
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d3 c2 00 00       	call   c000c2f3 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 93 f3 01 00       	call   c001f3b8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 42 ff 01 c0       	mov    ebx,0xc001ff42
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 4c ff 01 c0    	cmp    ebx,0xc001ff4c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 0c 3d 02 c0       	mov    eax,0xc0023d0c
c0000049:	3d 0c 3d 02 c0       	cmp    eax,0xc0023d0c
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 0c 3d 02 c0       	push   0xc0023d0c
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 0c 3d 02 c0       	mov    eax,0xc0023d0c
c0000075:	2d 0c 3d 02 c0       	sub    eax,0xc0023d0c
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 0c 3d 02 c0       	push   0xc0023d0c
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d ac 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023eac,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 54 ff 01 c0       	mov    ebx,0xc001ff54
c00000bb:	81 eb 50 ff 01 c0    	sub    ebx,0xc001ff50
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 50 ff 01 c0       	mov    esi,0xc001ff50
c00000ca:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 b0 3e 02 c0       	mov    ds:0xc0023eb0,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 0c 3d 02 c0       	push   0xc0023d0c
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 ac 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023eac,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 b4 3e 02 c0       	push   0xc0023eb4
c000012c:	68 0c 3d 02 c0       	push   0xc0023d0c
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <voodooXADD>:
c0000150:	55                   	push   ebp
c0000151:	89 e5                	mov    ebp,esp
c0000153:	60                   	pusha  
c0000154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000157:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000015a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c000015d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0000160:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000163:	89 35 fe 01 00 c0    	mov    DWORD PTR ds:0xc00001fe,esi
c0000169:	89 25 fa 01 00 c0    	mov    DWORD PTR ds:0xc00001fa,esp
c000016f:	60                   	pusha  
c0000170:	b0 90                	mov    al,0x90
c0000172:	b9 20 00 00 00       	mov    ecx,0x20
c0000177:	bf d1 01 00 c0       	mov    edi,0xc00001d1
c000017c:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000017e:	61                   	popa   
c000017f:	60                   	pusha  
c0000180:	89 d6                	mov    esi,edx
c0000182:	bf d1 01 00 c0       	mov    edi,0xc00001d1
c0000187:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000189:	61                   	popa   
c000018a:	60                   	pusha  
c000018b:	89 d6                	mov    esi,edx
c000018d:	bf e1 01 00 c0       	mov    edi,0xc00001e1
c0000192:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000194:	61                   	popa   
c0000195:	b1 90                	mov    cl,0x90
c0000197:	85 db                	test   ebx,ebx
c0000199:	74 06                	je     c00001a1 <voodooXADD.skipChange>
c000019b:	8a 8b d0 01 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffe30]

c00001a1 <voodooXADD.skipChange>:
c00001a1:	88 8b d1 01 00 c0    	mov    BYTE PTR [ebx-0x3ffffe2f],cl
c00001a7:	80 ab d2 01 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffe2e],0x3a
c00001ae:	88 8b e1 01 00 c0    	mov    BYTE PTR [ebx-0x3ffffe1f],cl
c00001b4:	80 ab e2 01 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffe1e],0xbe
c00001bb:	89 c4                	mov    esp,eax
c00001bd:	81 c4 10 00 00 00    	add    esp,0x10
c00001c3:	5f                   	pop    edi
c00001c4:	5e                   	pop    esi
c00001c5:	5d                   	pop    ebp
c00001c6:	5b                   	pop    ebx
c00001c7:	5b                   	pop    ebx
c00001c8:	5a                   	pop    edx
c00001c9:	59                   	pop    ecx
c00001ca:	58                   	pop    eax
c00001cb:	8b 25 fe 01 00 c0    	mov    esp,DWORD PTR ds:0xc00001fe

c00001d1 <voodooXADD.helper>:
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	8b 25 fa 01 00 c0    	mov    esp,DWORD PTR ds:0xc00001fa
c00001f7:	61                   	popa   
c00001f8:	c9                   	leave  
c00001f9:	c3                   	ret    

c00001fa <voodooXADD.oldStack>:
c00001fa:	00 00                	add    BYTE PTR [eax],al
	...

c00001fe <voodooXADD.newStack>:
c00001fe:	00 00                	add    BYTE PTR [eax],al
	...

c0000202 <doTPAUSE>:
c0000202:	fb                   	sti    
c0000203:	31 c0                	xor    eax,eax
c0000205:	31 d2                	xor    edx,edx
c0000207:	66 0f ae f0          	tpause eax
c000020b:	c3                   	ret    

c000020c <hasLegacyFPU>:
c000020c:	0f 20 c2             	mov    edx,cr0
c000020f:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000215:	0f 22 c2             	mov    cr0,edx
c0000218:	db e3                	fninit 
c000021a:	dd 3d 2f 02 00 c0    	fnstsw WORD PTR ds:0xc000022f
c0000220:	31 c0                	xor    eax,eax
c0000222:	66 81 3d 2f 02 00 c0 00 00 	cmp    WORD PTR ds:0xc000022f,0x0
c000022b:	75 01                	jne    c000022e <hasLegacyFPU.nofpu>

c000022d <hasLegacyFPU.hasfpu>:
c000022d:	40                   	inc    eax

c000022e <hasLegacyFPU.nofpu>:
c000022e:	c3                   	ret    

c000022f <testword>:
c000022f:	aa                   	stos   BYTE PTR es:[edi],al
c0000230:	55                   	push   ebp

c0000231 <is486>:
c0000231:	0f 09                	wbinvd 
c0000233:	31 c0                	xor    eax,eax
c0000235:	40                   	inc    eax
c0000236:	c3                   	ret    
c0000237:	90                   	nop
c0000238:	90                   	nop
c0000239:	90                   	nop
c000023a:	90                   	nop
c000023b:	90                   	nop
c000023c:	90                   	nop
c000023d:	90                   	nop
c000023e:	90                   	nop
c000023f:	90                   	nop
c0000240:	90                   	nop
c0000241:	90                   	nop
c0000242:	90                   	nop
c0000243:	90                   	nop
c0000244:	90                   	nop
c0000245:	90                   	nop
c0000246:	90                   	nop
c0000247:	90                   	nop
c0000248:	90                   	nop
c0000249:	90                   	nop
c000024a:	90                   	nop
c000024b:	90                   	nop
c000024c:	90                   	nop
c000024d:	90                   	nop
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	31 c0                	xor    eax,eax
c0000266:	c3                   	ret    

c0000267 <goToVM86>:
c0000267:	fa                   	cli    
c0000268:	55                   	push   ebp
c0000269:	89 e5                	mov    ebp,esp
c000026b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000026e:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000271:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000274:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000277:	25 ff ff 00 00       	and    eax,0xffff
c000027c:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000282:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0000288:	81 e2 ff ff 00 00    	and    edx,0xffff
c000028e:	52                   	push   edx
c000028f:	51                   	push   ecx
c0000290:	68 02 02 02 00       	push   0x20202
c0000295:	53                   	push   ebx
c0000296:	50                   	push   eax
c0000297:	cf                   	iret   

c0000298 <goToUsermode>:
c0000298:	fa                   	cli    
c0000299:	55                   	push   ebp
c000029a:	89 e5                	mov    ebp,esp
c000029c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000029f:	66 b8 23 00          	mov    ax,0x23
c00002a3:	66 8e d8             	mov    ds,ax
c00002a6:	66 8e c0             	mov    es,ax
c00002a9:	66 8e e0             	mov    fs,ax
c00002ac:	66 8e e8             	mov    gs,ax
c00002af:	89 e0                	mov    eax,esp
c00002b1:	68 23 00 00 00       	push   0x23
c00002b6:	50                   	push   eax
c00002b7:	68 02 02 00 00       	push   0x202
c00002bc:	68 1b 00 00 00       	push   0x1b
c00002c1:	53                   	push   ebx
c00002c2:	cf                   	iret   

c00002c3 <switchToThreadASMFirstTime>:
c00002c3:	9c                   	pushf  
c00002c4:	fa                   	cli    
c00002c5:	50                   	push   eax
c00002c6:	53                   	push   ebx
c00002c7:	51                   	push   ecx
c00002c8:	52                   	push   edx
c00002c9:	56                   	push   esi
c00002ca:	57                   	push   edi
c00002cb:	55                   	push   ebp
c00002cc:	e9 11 00 00 00       	jmp    c00002e2 <commonThreadSwitch>

c00002d1 <switchToThreadASM>:
c00002d1:	9c                   	pushf  
c00002d2:	50                   	push   eax
c00002d3:	53                   	push   ebx
c00002d4:	51                   	push   ecx
c00002d5:	52                   	push   edx
c00002d6:	56                   	push   esi
c00002d7:	57                   	push   edi
c00002d8:	55                   	push   ebp
c00002d9:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002df:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002e2 <commonThreadSwitch>:
c00002e2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002e6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002ec:	8b 06                	mov    eax,DWORD PTR [esi]
c00002ee:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002f1:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002f4:	0f 20 d9             	mov    ecx,cr3
c00002f7:	39 c8                	cmp    eax,ecx
c00002f9:	74 03                	je     c00002fe <commonThreadSwitch.doneVAS>
c00002fb:	0f 22 d8             	mov    cr3,eax

c00002fe <commonThreadSwitch.doneVAS>:
c00002fe:	85 d2                	test   edx,edx
c0000300:	74 4e                	je     c0000350 <commonThreadSwitch.notFirstTime>
c0000302:	fa                   	cli    
c0000303:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000306:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c000030b:	60                   	pusha  
c000030c:	e8 b9 eb 00 00       	call   c000eeca <mapVASFirstTime>
c0000311:	61                   	popa   
c0000312:	89 c4                	mov    esp,eax
c0000314:	56                   	push   esi
c0000315:	52                   	push   edx
c0000316:	e8 e3 80 01 00       	call   c00183fe <changeTSS>
c000031b:	5a                   	pop    edx
c000031c:	5e                   	pop    esi
c000031d:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000324:	81 fa 01 00 00 00    	cmp    edx,0x1
c000032a:	74 39                	je     c0000365 <commonThreadSwitch.cameOffAFork>
c000032c:	5d                   	pop    ebp
c000032d:	5f                   	pop    edi
c000032e:	5e                   	pop    esi
c000032f:	59                   	pop    ecx
c0000330:	59                   	pop    ecx
c0000331:	5b                   	pop    ebx
c0000332:	58                   	pop    eax
c0000333:	81 c4 04 00 00 00    	add    esp,0x4
c0000339:	6a 02                	push   0x2
c000033b:	9d                   	popf   
c000033c:	52                   	push   edx
c000033d:	e8 cf 84 01 00       	call   c0018811 <taskStartupFunction>
c0000342:	5a                   	pop    edx
c0000343:	50                   	push   eax
c0000344:	ff d2                	call   edx
c0000346:	e8 75 8a 01 00       	call   c0018dc0 <taskReturned>
c000034b:	e9 fb ff ff ff       	jmp    c000034b <commonThreadSwitch.doneVAS+0x4d>

c0000350 <commonThreadSwitch.notFirstTime>:
c0000350:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000353:	56                   	push   esi
c0000354:	52                   	push   edx
c0000355:	e8 a4 80 01 00       	call   c00183fe <changeTSS>
c000035a:	5a                   	pop    edx
c000035b:	5e                   	pop    esi
c000035c:	5d                   	pop    ebp
c000035d:	5f                   	pop    edi
c000035e:	5e                   	pop    esi
c000035f:	5a                   	pop    edx
c0000360:	59                   	pop    ecx
c0000361:	5b                   	pop    ebx
c0000362:	58                   	pop    eax
c0000363:	9d                   	popf   
c0000364:	c3                   	ret    

c0000365 <commonThreadSwitch.cameOffAFork>:
c0000365:	31 c0                	xor    eax,eax
c0000367:	31 d2                	xor    edx,edx
c0000369:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c000036c:	e9 a2 02 00 00       	jmp    c0000613 <offAForkJumpThingy>

c0000371 <detectCPUID>:
c0000371:	9c                   	pushf  
c0000372:	9c                   	pushf  
c0000373:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c000037a:	9d                   	popf   
c000037b:	9c                   	pushf  
c000037c:	58                   	pop    eax
c000037d:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000380:	9d                   	popf   
c0000381:	25 00 00 20 00       	and    eax,0x200000
c0000386:	c3                   	ret    

c0000387 <asmQuickAcquireLock>:
c0000387:	55                   	push   ebp
c0000388:	89 e5                	mov    ebp,esp
c000038a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000038d <asmQuickAcquireLock.retry>:
c000038d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000392:	72 02                	jb     c0000396 <asmQuickAcquireLock.spin_with_pause>
c0000394:	fa                   	cli    
c0000395:	c3                   	ret    

c0000396 <asmQuickAcquireLock.spin_with_pause>:
c0000396:	f3 90                	pause  
c0000398:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000039e:	75 f6                	jne    c0000396 <asmQuickAcquireLock.spin_with_pause>
c00003a0:	e9 e8 ff ff ff       	jmp    c000038d <asmQuickAcquireLock.retry>

c00003a5 <asmQuickReleaseLock>:
c00003a5:	55                   	push   ebp
c00003a6:	89 e5                	mov    ebp,esp
c00003a8:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003af:	5d                   	pop    ebp
c00003b0:	c3                   	ret    

c00003b1 <asmAcquireLock>:
c00003b1:	55                   	push   ebp
c00003b2:	89 e5                	mov    ebp,esp
c00003b4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003b7 <asmAcquireLock.retry>:
c00003b7:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003bc:	72 05                	jb     c00003c3 <asmAcquireLock.spin_with_pause>
c00003be:	9c                   	pushf  
c00003bf:	58                   	pop    eax
c00003c0:	fa                   	cli    
c00003c1:	5d                   	pop    ebp
c00003c2:	c3                   	ret    

c00003c3 <asmAcquireLock.spin_with_pause>:
c00003c3:	f3 90                	pause  
c00003c5:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003cb:	75 f6                	jne    c00003c3 <asmAcquireLock.spin_with_pause>
c00003cd:	e9 e5 ff ff ff       	jmp    c00003b7 <asmAcquireLock.retry>

c00003d2 <asmReleaseLock>:
c00003d2:	55                   	push   ebp
c00003d3:	89 e5                	mov    ebp,esp
c00003d5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003d8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003db:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003e1:	52                   	push   edx
c00003e2:	9d                   	popf   
c00003e3:	5d                   	pop    ebp
c00003e4:	c3                   	ret    

c00003e5 <loadGDT>:
c00003e5:	0f 01 15 f0 42 02 c0 	lgdtd  ds:0xc00242f0
c00003ec:	66 b8 10 00          	mov    ax,0x10
c00003f0:	66 8e d8             	mov    ds,ax
c00003f3:	66 8e c0             	mov    es,ax
c00003f6:	66 8e e0             	mov    fs,ax
c00003f9:	66 8e e8             	mov    gs,ax
c00003fc:	66 8e d0             	mov    ss,ax
c00003ff:	e9 00 00 00 00       	jmp    c0000404 <flush2>

c0000404 <flush2>:
c0000404:	c3                   	ret    

c0000405 <isr0>:
c0000405:	fa                   	cli    
c0000406:	68 00 00 00 00       	push   0x0
c000040b:	68 00 00 00 00       	push   0x0
c0000410:	e9 a2 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000415 <isr1>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 01                	push   0x1
c000041a:	e9 98 01 00 00       	jmp    c00005b7 <int_common_stub>

c000041f <isr2>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 02                	push   0x2
c0000424:	e9 8e 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000429 <isr3>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 03                	push   0x3
c000042e:	e9 84 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000433 <isr4>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 04                	push   0x4
c0000438:	e9 7a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000043d <isr5>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 05                	push   0x5
c0000442:	e9 70 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000447 <isr6>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 06                	push   0x6
c000044c:	e9 66 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000451 <isr7>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 07                	push   0x7
c0000456:	e9 5c 01 00 00       	jmp    c00005b7 <int_common_stub>

c000045b <isr8>:
c000045b:	fa                   	cli    
c000045c:	6a 08                	push   0x8
c000045e:	e9 54 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000463 <isr9>:
c0000463:	fa                   	cli    
c0000464:	6a 00                	push   0x0
c0000466:	6a 09                	push   0x9
c0000468:	e9 4a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000046d <isr10>:
c000046d:	fa                   	cli    
c000046e:	6a 0a                	push   0xa
c0000470:	e9 42 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000475 <isr11>:
c0000475:	fa                   	cli    
c0000476:	6a 0b                	push   0xb
c0000478:	e9 3a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000047d <isr12>:
c000047d:	fa                   	cli    
c000047e:	6a 0c                	push   0xc
c0000480:	e9 32 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000485 <isr13>:
c0000485:	fa                   	cli    
c0000486:	6a 0d                	push   0xd
c0000488:	e9 2a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000048d <isr14>:
c000048d:	fa                   	cli    
c000048e:	6a 0e                	push   0xe
c0000490:	e9 22 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000495 <isr15>:
c0000495:	fa                   	cli    
c0000496:	6a 00                	push   0x0
c0000498:	6a 0f                	push   0xf
c000049a:	e9 18 01 00 00       	jmp    c00005b7 <int_common_stub>

c000049f <isr16>:
c000049f:	fa                   	cli    
c00004a0:	6a 00                	push   0x0
c00004a2:	6a 10                	push   0x10
c00004a4:	e9 0e 01 00 00       	jmp    c00005b7 <int_common_stub>

c00004a9 <isr17>:
c00004a9:	fa                   	cli    
c00004aa:	6a 00                	push   0x0
c00004ac:	6a 11                	push   0x11
c00004ae:	e9 04 01 00 00       	jmp    c00005b7 <int_common_stub>

c00004b3 <isr18>:
c00004b3:	fa                   	cli    
c00004b4:	6a 00                	push   0x0
c00004b6:	6a 12                	push   0x12
c00004b8:	e9 fa 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004bd <isr96>:
c00004bd:	fa                   	cli    
c00004be:	6a 00                	push   0x0
c00004c0:	6a 60                	push   0x60
c00004c2:	e9 20 01 00 00       	jmp    c00005e7 <syscall_common_stub>

c00004c7 <irq0>:
c00004c7:	fa                   	cli    
c00004c8:	6a 00                	push   0x0
c00004ca:	6a 20                	push   0x20
c00004cc:	e9 e6 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004d1 <irq1>:
c00004d1:	fa                   	cli    
c00004d2:	6a 00                	push   0x0
c00004d4:	6a 21                	push   0x21
c00004d6:	e9 dc 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004db <irq2>:
c00004db:	fa                   	cli    
c00004dc:	6a 00                	push   0x0
c00004de:	6a 22                	push   0x22
c00004e0:	e9 d2 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004e5 <irq3>:
c00004e5:	fa                   	cli    
c00004e6:	6a 00                	push   0x0
c00004e8:	6a 23                	push   0x23
c00004ea:	e9 c8 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004ef <irq4>:
c00004ef:	fa                   	cli    
c00004f0:	6a 00                	push   0x0
c00004f2:	6a 24                	push   0x24
c00004f4:	e9 be 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004f9 <irq5>:
c00004f9:	fa                   	cli    
c00004fa:	6a 00                	push   0x0
c00004fc:	6a 25                	push   0x25
c00004fe:	e9 b4 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000503 <irq6>:
c0000503:	fa                   	cli    
c0000504:	6a 00                	push   0x0
c0000506:	6a 26                	push   0x26
c0000508:	e9 aa 00 00 00       	jmp    c00005b7 <int_common_stub>

c000050d <irq7>:
c000050d:	fa                   	cli    
c000050e:	6a 00                	push   0x0
c0000510:	6a 27                	push   0x27
c0000512:	e9 a0 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000517 <irq8>:
c0000517:	fa                   	cli    
c0000518:	6a 00                	push   0x0
c000051a:	6a 28                	push   0x28
c000051c:	e9 96 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000521 <irq9>:
c0000521:	fa                   	cli    
c0000522:	6a 00                	push   0x0
c0000524:	6a 29                	push   0x29
c0000526:	e9 8c 00 00 00       	jmp    c00005b7 <int_common_stub>

c000052b <irq10>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 2a                	push   0x2a
c0000530:	e9 82 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000535 <irq11>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 2b                	push   0x2b
c000053a:	e9 78 00 00 00       	jmp    c00005b7 <int_common_stub>

c000053f <irq12>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 2c                	push   0x2c
c0000544:	e9 6e 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000549 <irq13>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 2d                	push   0x2d
c000054e:	e9 64 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000553 <irq14>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 2e                	push   0x2e
c0000558:	e9 5a 00 00 00       	jmp    c00005b7 <int_common_stub>

c000055d <irq15>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 2f                	push   0x2f
c0000562:	e9 50 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000567 <irq16>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 30                	push   0x30
c000056c:	e9 46 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000571 <irq17>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 31                	push   0x31
c0000576:	e9 3c 00 00 00       	jmp    c00005b7 <int_common_stub>

c000057b <irq18>:
c000057b:	fa                   	cli    
c000057c:	6a 00                	push   0x0
c000057e:	6a 32                	push   0x32
c0000580:	e9 32 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000585 <irq19>:
c0000585:	fa                   	cli    
c0000586:	6a 00                	push   0x0
c0000588:	6a 33                	push   0x33
c000058a:	e9 28 00 00 00       	jmp    c00005b7 <int_common_stub>

c000058f <irq20>:
c000058f:	fa                   	cli    
c0000590:	6a 00                	push   0x0
c0000592:	6a 34                	push   0x34
c0000594:	e9 1e 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000599 <irq21>:
c0000599:	fa                   	cli    
c000059a:	6a 00                	push   0x0
c000059c:	6a 35                	push   0x35
c000059e:	e9 14 00 00 00       	jmp    c00005b7 <int_common_stub>

c00005a3 <irq22>:
c00005a3:	fa                   	cli    
c00005a4:	6a 00                	push   0x0
c00005a6:	6a 36                	push   0x36
c00005a8:	e9 0a 00 00 00       	jmp    c00005b7 <int_common_stub>

c00005ad <irq23>:
c00005ad:	fa                   	cli    
c00005ae:	6a 00                	push   0x0
c00005b0:	6a 37                	push   0x37
c00005b2:	e9 00 00 00 00       	jmp    c00005b7 <int_common_stub>

c00005b7 <int_common_stub>:
c00005b7:	60                   	pusha  
c00005b8:	1e                   	push   ds
c00005b9:	06                   	push   es
c00005ba:	0f a0                	push   fs
c00005bc:	0f a8                	push   gs
c00005be:	66 b8 10 00          	mov    ax,0x10
c00005c2:	66 8e d8             	mov    ds,ax
c00005c5:	66 8e c0             	mov    es,ax
c00005c8:	66 8e e0             	mov    fs,ax
c00005cb:	66 8e e8             	mov    gs,ax
c00005ce:	89 e1                	mov    ecx,esp
c00005d0:	51                   	push   ecx
c00005d1:	b9 a3 0d 01 c0       	mov    ecx,0xc0010da3
c00005d6:	ff d1                	call   ecx
c00005d8:	59                   	pop    ecx
c00005d9:	0f a9                	pop    gs
c00005db:	0f a1                	pop    fs
c00005dd:	07                   	pop    es
c00005de:	1f                   	pop    ds
c00005df:	61                   	popa   
c00005e0:	81 c4 08 00 00 00    	add    esp,0x8
c00005e6:	cf                   	iret   

c00005e7 <syscall_common_stub>:
c00005e7:	60                   	pusha  
c00005e8:	1e                   	push   ds
c00005e9:	06                   	push   es
c00005ea:	0f a0                	push   fs
c00005ec:	0f a8                	push   gs
c00005ee:	66 b8 10 00          	mov    ax,0x10
c00005f2:	66 8e d8             	mov    ds,ax
c00005f5:	66 8e c0             	mov    es,ax
c00005f8:	66 8e e0             	mov    fs,ax
c00005fb:	66 8e e8             	mov    gs,ax
c00005fe:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000604:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000607:	89 e1                	mov    ecx,esp
c0000609:	51                   	push   ecx
c000060a:	fb                   	sti    
c000060b:	b9 a3 0d 01 c0       	mov    ecx,0xc0010da3
c0000610:	ff d1                	call   ecx
c0000612:	59                   	pop    ecx

c0000613 <offAForkJumpThingy>:
c0000613:	0f a9                	pop    gs
c0000615:	0f a1                	pop    fs
c0000617:	07                   	pop    es
c0000618:	1f                   	pop    ds
c0000619:	61                   	popa   
c000061a:	81 c4 08 00 00 00    	add    esp,0x8
c0000620:	cf                   	iret   

c0000621 <memcmp>:
c0000621:	56                   	push   esi
c0000622:	53                   	push   ebx
c0000623:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000627:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000062b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000062f:	01 d6                	add    esi,edx
c0000631:	39 f2                	cmp    edx,esi
c0000633:	74 0e                	je     c0000643 <memcmp+0x22>
c0000635:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000638:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000063b:	38 c8                	cmp    al,cl
c000063d:	75 08                	jne    c0000647 <memcmp+0x26>
c000063f:	42                   	inc    edx
c0000640:	43                   	inc    ebx
c0000641:	eb ee                	jmp    c0000631 <memcmp+0x10>
c0000643:	31 c0                	xor    eax,eax
c0000645:	eb 02                	jmp    c0000649 <memcmp+0x28>
c0000647:	29 c8                	sub    eax,ecx
c0000649:	5b                   	pop    ebx
c000064a:	5e                   	pop    esi
c000064b:	c3                   	ret    

c000064c <memmove>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000652:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000656:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000065a:	39 c8                	cmp    eax,ecx
c000065c:	73 12                	jae    c0000670 <memmove+0x24>
c000065e:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000661:	89 c3                	mov    ebx,eax
c0000663:	39 f1                	cmp    ecx,esi
c0000665:	74 1a                	je     c0000681 <memmove+0x35>
c0000667:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000669:	43                   	inc    ebx
c000066a:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000066d:	41                   	inc    ecx
c000066e:	eb f3                	jmp    c0000663 <memmove+0x17>
c0000670:	76 0f                	jbe    c0000681 <memmove+0x35>
c0000672:	85 d2                	test   edx,edx
c0000674:	74 0b                	je     c0000681 <memmove+0x35>
c0000676:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000067a:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000067e:	4a                   	dec    edx
c000067f:	eb f1                	jmp    c0000672 <memmove+0x26>
c0000681:	5b                   	pop    ebx
c0000682:	5e                   	pop    esi
c0000683:	c3                   	ret    

c0000684 <memcpy>:
c0000684:	57                   	push   edi
c0000685:	56                   	push   esi
c0000686:	53                   	push   ebx
c0000687:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000068b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000068f:	89 da                	mov    edx,ebx
c0000691:	89 d9                	mov    ecx,ebx
c0000693:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000697:	83 e2 fc             	and    edx,0xfffffffc
c000069a:	c1 e9 02             	shr    ecx,0x2
c000069d:	89 c7                	mov    edi,eax
c000069f:	fc                   	cld    
c00006a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006a2:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006a5:	01 c2                	add    edx,eax
c00006a7:	01 de                	add    esi,ebx
c00006a9:	39 f1                	cmp    ecx,esi
c00006ab:	74 09                	je     c00006b6 <memcpy+0x32>
c00006ad:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006af:	42                   	inc    edx
c00006b0:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006b3:	41                   	inc    ecx
c00006b4:	eb f3                	jmp    c00006a9 <memcpy+0x25>
c00006b6:	5b                   	pop    ebx
c00006b7:	5e                   	pop    esi
c00006b8:	5f                   	pop    edi
c00006b9:	c3                   	ret    

c00006ba <memset>:
c00006ba:	53                   	push   ebx
c00006bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006c3:	89 c2                	mov    edx,eax
c00006c5:	01 c1                	add    ecx,eax
c00006c7:	39 ca                	cmp    edx,ecx
c00006c9:	74 0a                	je     c00006d5 <memset+0x1b>
c00006cb:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006cf:	42                   	inc    edx
c00006d0:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006d3:	eb f2                	jmp    c00006c7 <memset+0xd>
c00006d5:	5b                   	pop    ebx
c00006d6:	c3                   	ret    

c00006d7 <strlen>:
c00006d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006db:	31 c0                	xor    eax,eax
c00006dd:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006e1:	74 03                	je     c00006e6 <strlen+0xf>
c00006e3:	40                   	inc    eax
c00006e4:	eb f7                	jmp    c00006dd <strlen+0x6>
c00006e6:	c3                   	ret    

c00006e7 <strpbrk>:
c00006e7:	53                   	push   ebx
c00006e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ec:	8a 08                	mov    cl,BYTE PTR [eax]
c00006ee:	84 c9                	test   cl,cl
c00006f0:	74 14                	je     c0000706 <strpbrk+0x1f>
c00006f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006f6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006f8:	84 db                	test   bl,bl
c00006fa:	74 07                	je     c0000703 <strpbrk+0x1c>
c00006fc:	38 cb                	cmp    bl,cl
c00006fe:	74 08                	je     c0000708 <strpbrk+0x21>
c0000700:	42                   	inc    edx
c0000701:	eb f3                	jmp    c00006f6 <strpbrk+0xf>
c0000703:	40                   	inc    eax
c0000704:	eb e6                	jmp    c00006ec <strpbrk+0x5>
c0000706:	31 c0                	xor    eax,eax
c0000708:	5b                   	pop    ebx
c0000709:	c3                   	ret    

c000070a <strtok>:
c000070a:	56                   	push   esi
c000070b:	53                   	push   ebx
c000070c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000710:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000714:	85 db                	test   ebx,ebx
c0000716:	75 0e                	jne    c0000726 <strtok+0x1c>
c0000718:	8b 1d cc 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023ecc
c000071e:	85 db                	test   ebx,ebx
c0000720:	75 04                	jne    c0000726 <strtok+0x1c>
c0000722:	31 db                	xor    ebx,ebx
c0000724:	eb 2e                	jmp    c0000754 <strtok+0x4a>
c0000726:	56                   	push   esi
c0000727:	53                   	push   ebx
c0000728:	e8 ba ff ff ff       	call   c00006e7 <strpbrk>
c000072d:	5a                   	pop    edx
c000072e:	a3 cc 3e 02 c0       	mov    ds:0xc0023ecc,eax
c0000733:	59                   	pop    ecx
c0000734:	a1 cc 3e 02 c0       	mov    eax,ds:0xc0023ecc
c0000739:	39 d8                	cmp    eax,ebx
c000073b:	75 07                	jne    c0000744 <strtok+0x3a>
c000073d:	43                   	inc    ebx
c000073e:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000742:	eb e2                	jmp    c0000726 <strtok+0x1c>
c0000744:	85 c0                	test   eax,eax
c0000746:	74 da                	je     c0000722 <strtok+0x18>
c0000748:	8d 50 01             	lea    edx,[eax+0x1]
c000074b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000074e:	89 15 cc 3e 02 c0    	mov    DWORD PTR ds:0xc0023ecc,edx
c0000754:	89 d8                	mov    eax,ebx
c0000756:	5b                   	pop    ebx
c0000757:	5e                   	pop    esi
c0000758:	c3                   	ret    

c0000759 <strcpy>:
c0000759:	53                   	push   ebx
c000075a:	31 d2                	xor    edx,edx
c000075c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000764:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000767:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000076a:	84 c9                	test   cl,cl
c000076c:	74 06                	je     c0000774 <strcpy+0x1b>
c000076e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000771:	42                   	inc    edx
c0000772:	eb ec                	jmp    c0000760 <strcpy+0x7>
c0000774:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000777:	5b                   	pop    ebx
c0000778:	c3                   	ret    

c0000779 <strncpy>:
c0000779:	56                   	push   esi
c000077a:	53                   	push   ebx
c000077b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000077f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000783:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000787:	89 c3                	mov    ebx,eax
c0000789:	85 c9                	test   ecx,ecx
c000078b:	74 1a                	je     c00007a7 <strncpy+0x2e>
c000078d:	46                   	inc    esi
c000078e:	43                   	inc    ebx
c000078f:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000792:	49                   	dec    ecx
c0000793:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000796:	84 d2                	test   dl,dl
c0000798:	75 ef                	jne    c0000789 <strncpy+0x10>
c000079a:	31 d2                	xor    edx,edx
c000079c:	39 d1                	cmp    ecx,edx
c000079e:	74 07                	je     c00007a7 <strncpy+0x2e>
c00007a0:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007a4:	42                   	inc    edx
c00007a5:	eb f5                	jmp    c000079c <strncpy+0x23>
c00007a7:	5b                   	pop    ebx
c00007a8:	5e                   	pop    esi
c00007a9:	c3                   	ret    

c00007aa <strcmp>:
c00007aa:	31 c9                	xor    ecx,ecx
c00007ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007b8:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007bc:	38 d0                	cmp    al,dl
c00007be:	75 08                	jne    c00007c8 <strcmp+0x1e>
c00007c0:	41                   	inc    ecx
c00007c1:	84 c0                	test   al,al
c00007c3:	75 e7                	jne    c00007ac <strcmp+0x2>
c00007c5:	31 c0                	xor    eax,eax
c00007c7:	c3                   	ret    
c00007c8:	29 d0                	sub    eax,edx
c00007ca:	c3                   	ret    

c00007cb <strchr>:
c00007cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007cf:	8a 10                	mov    dl,BYTE PTR [eax]
c00007d1:	84 d2                	test   dl,dl
c00007d3:	74 09                	je     c00007de <strchr+0x13>
c00007d5:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007d9:	74 05                	je     c00007e0 <strchr+0x15>
c00007db:	40                   	inc    eax
c00007dc:	eb f1                	jmp    c00007cf <strchr+0x4>
c00007de:	31 c0                	xor    eax,eax
c00007e0:	c3                   	ret    

c00007e1 <strncmp>:
c00007e1:	56                   	push   esi
c00007e2:	53                   	push   ebx
c00007e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007ef:	01 d6                	add    esi,edx
c00007f1:	39 f2                	cmp    edx,esi
c00007f3:	74 12                	je     c0000807 <strncmp+0x26>
c00007f5:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007f8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007fb:	38 c8                	cmp    al,cl
c00007fd:	75 0c                	jne    c000080b <strncmp+0x2a>
c00007ff:	42                   	inc    edx
c0000800:	84 c0                	test   al,al
c0000802:	74 03                	je     c0000807 <strncmp+0x26>
c0000804:	43                   	inc    ebx
c0000805:	eb ea                	jmp    c00007f1 <strncmp+0x10>
c0000807:	31 c0                	xor    eax,eax
c0000809:	eb 02                	jmp    c000080d <strncmp+0x2c>
c000080b:	29 c8                	sub    eax,ecx
c000080d:	5b                   	pop    ebx
c000080e:	5e                   	pop    esi
c000080f:	c3                   	ret    

c0000810 <strcat>:
c0000810:	53                   	push   ebx
c0000811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000815:	89 c1                	mov    ecx,eax
c0000817:	8d 51 01             	lea    edx,[ecx+0x1]
c000081a:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000081e:	74 04                	je     c0000824 <strcat+0x14>
c0000820:	89 d1                	mov    ecx,edx
c0000822:	eb f3                	jmp    c0000817 <strcat+0x7>
c0000824:	31 d2                	xor    edx,edx
c0000826:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000082a:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000082d:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000830:	42                   	inc    edx
c0000831:	84 db                	test   bl,bl
c0000833:	75 f1                	jne    c0000826 <strcat+0x16>
c0000835:	5b                   	pop    ebx
c0000836:	c3                   	ret    

c0000837 <strncat>:
c0000837:	56                   	push   esi
c0000838:	53                   	push   ebx
c0000839:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000083d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000841:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000845:	89 c2                	mov    edx,eax
c0000847:	85 db                	test   ebx,ebx
c0000849:	74 23                	je     c000086e <strncat+0x37>
c000084b:	8d 72 01             	lea    esi,[edx+0x1]
c000084e:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000852:	74 04                	je     c0000858 <strncat+0x21>
c0000854:	89 f2                	mov    edx,esi
c0000856:	eb f3                	jmp    c000084b <strncat+0x14>
c0000858:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000085b:	41                   	inc    ecx
c000085c:	42                   	inc    edx
c000085d:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000860:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000863:	84 db                	test   bl,bl
c0000865:	74 07                	je     c000086e <strncat+0x37>
c0000867:	39 f1                	cmp    ecx,esi
c0000869:	75 f0                	jne    c000085b <strncat+0x24>
c000086b:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000086e:	5b                   	pop    ebx
c000086f:	5e                   	pop    esi
c0000870:	c3                   	ret    

c0000871 <strstr>:
c0000871:	57                   	push   edi
c0000872:	56                   	push   esi
c0000873:	53                   	push   ebx
c0000874:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000878:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087c:	57                   	push   edi
c000087d:	e8 55 fe ff ff       	call   c00006d7 <strlen>
c0000882:	59                   	pop    ecx
c0000883:	89 c6                	mov    esi,eax
c0000885:	85 c0                	test   eax,eax
c0000887:	74 1f                	je     c00008a8 <strstr+0x37>
c0000889:	53                   	push   ebx
c000088a:	e8 48 fe ff ff       	call   c00006d7 <strlen>
c000088f:	5a                   	pop    edx
c0000890:	39 f0                	cmp    eax,esi
c0000892:	72 12                	jb     c00008a6 <strstr+0x35>
c0000894:	56                   	push   esi
c0000895:	57                   	push   edi
c0000896:	53                   	push   ebx
c0000897:	e8 85 fd ff ff       	call   c0000621 <memcmp>
c000089c:	83 c4 0c             	add    esp,0xc
c000089f:	85 c0                	test   eax,eax
c00008a1:	74 05                	je     c00008a8 <strstr+0x37>
c00008a3:	43                   	inc    ebx
c00008a4:	eb e3                	jmp    c0000889 <strstr+0x18>
c00008a6:	31 db                	xor    ebx,ebx
c00008a8:	89 d8                	mov    eax,ebx
c00008aa:	5b                   	pop    ebx
c00008ab:	5e                   	pop    esi
c00008ac:	5f                   	pop    edi
c00008ad:	c3                   	ret    

c00008ae <toupper>:
c00008ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b2:	0f b6 d0             	movzx  edx,al
c00008b5:	f6 82 60 ff 01 c0 02 	test   BYTE PTR [edx-0x3ffe00a0],0x2
c00008bc:	74 03                	je     c00008c1 <toupper+0x13>
c00008be:	83 e8 20             	sub    eax,0x20
c00008c1:	c3                   	ret    

c00008c2 <tolower>:
c00008c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008c6:	0f b6 d0             	movzx  edx,al
c00008c9:	f6 82 60 ff 01 c0 01 	test   BYTE PTR [edx-0x3ffe00a0],0x1
c00008d0:	74 03                	je     c00008d5 <tolower+0x13>
c00008d2:	83 c0 20             	add    eax,0x20
c00008d5:	c3                   	ret    

c00008d6 <simple_strtoul>:
c00008d6:	55                   	push   ebp
c00008d7:	57                   	push   edi
c00008d8:	56                   	push   esi
c00008d9:	53                   	push   ebx
c00008da:	83 ec 08             	sub    esp,0x8
c00008dd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008e1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008e5:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008e8:	f6 82 60 ff 01 c0 08 	test   BYTE PTR [edx-0x3ffe00a0],0x8
c00008ef:	74 03                	je     c00008f4 <simple_strtoul+0x1e>
c00008f1:	41                   	inc    ecx
c00008f2:	eb f1                	jmp    c00008e5 <simple_strtoul+0xf>
c00008f4:	80 fa 09             	cmp    dl,0x9
c00008f7:	74 f8                	je     c00008f1 <simple_strtoul+0x1b>
c00008f9:	80 fa 2d             	cmp    dl,0x2d
c00008fc:	75 0b                	jne    c0000909 <simple_strtoul+0x33>
c00008fe:	41                   	inc    ecx
c00008ff:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000907:	eb 0e                	jmp    c0000917 <simple_strtoul+0x41>
c0000909:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000911:	80 fa 2b             	cmp    dl,0x2b
c0000914:	75 01                	jne    c0000917 <simple_strtoul+0x41>
c0000916:	41                   	inc    ecx
c0000917:	85 f6                	test   esi,esi
c0000919:	75 22                	jne    c000093d <simple_strtoul+0x67>
c000091b:	be 0a 00 00 00       	mov    esi,0xa
c0000920:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000923:	75 5a                	jne    c000097f <simple_strtoul+0xa9>
c0000925:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000929:	50                   	push   eax
c000092a:	e8 93 ff ff ff       	call   c00008c2 <tolower>
c000092f:	5a                   	pop    edx
c0000930:	83 f8 78             	cmp    eax,0x78
c0000933:	74 03                	je     c0000938 <simple_strtoul+0x62>
c0000935:	41                   	inc    ecx
c0000936:	eb 16                	jmp    c000094e <simple_strtoul+0x78>
c0000938:	83 c1 02             	add    ecx,0x2
c000093b:	eb 22                	jmp    c000095f <simple_strtoul+0x89>
c000093d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000940:	83 f8 22             	cmp    eax,0x22
c0000943:	0f 87 b7 00 00 00    	ja     c0000a00 <simple_strtoul+0x12a>
c0000949:	83 fe 08             	cmp    esi,0x8
c000094c:	75 0c                	jne    c000095a <simple_strtoul+0x84>
c000094e:	be 08 00 00 00       	mov    esi,0x8
c0000953:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000956:	75 27                	jne    c000097f <simple_strtoul+0xa9>
c0000958:	eb 1f                	jmp    c0000979 <simple_strtoul+0xa3>
c000095a:	83 fe 10             	cmp    esi,0x10
c000095d:	75 20                	jne    c000097f <simple_strtoul+0xa9>
c000095f:	be 10 00 00 00       	mov    esi,0x10
c0000964:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000967:	75 16                	jne    c000097f <simple_strtoul+0xa9>
c0000969:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000096d:	50                   	push   eax
c000096e:	e8 4f ff ff ff       	call   c00008c2 <tolower>
c0000973:	5d                   	pop    ebp
c0000974:	83 f8 78             	cmp    eax,0x78
c0000977:	74 03                	je     c000097c <simple_strtoul+0xa6>
c0000979:	41                   	inc    ecx
c000097a:	eb 03                	jmp    c000097f <simple_strtoul+0xa9>
c000097c:	83 c1 02             	add    ecx,0x2
c000097f:	31 ed                	xor    ebp,ebp
c0000981:	31 db                	xor    ebx,ebx
c0000983:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000098a:	8a 11                	mov    dl,BYTE PTR [ecx]
c000098c:	84 d2                	test   dl,dl
c000098e:	74 27                	je     c00009b7 <simple_strtoul+0xe1>
c0000990:	0f b6 fa             	movzx  edi,dl
c0000993:	f6 87 60 ff 01 c0 04 	test   BYTE PTR [edi-0x3ffe00a0],0x4
c000099a:	74 05                	je     c00009a1 <simple_strtoul+0xcb>
c000099c:	83 ef 30             	sub    edi,0x30
c000099f:	eb 22                	jmp    c00009c3 <simple_strtoul+0xed>
c00009a1:	0f be d2             	movsx  edx,dl
c00009a4:	52                   	push   edx
c00009a5:	e8 04 ff ff ff       	call   c00008ae <toupper>
c00009aa:	5f                   	pop    edi
c00009ab:	0f b6 d0             	movzx  edx,al
c00009ae:	f6 82 60 ff 01 c0 01 	test   BYTE PTR [edx-0x3ffe00a0],0x1
c00009b5:	75 09                	jne    c00009c0 <simple_strtoul+0xea>
c00009b7:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009bc:	75 2d                	jne    c00009eb <simple_strtoul+0x115>
c00009be:	eb 57                	jmp    c0000a17 <simple_strtoul+0x141>
c00009c0:	8d 78 c9             	lea    edi,[eax-0x37]
c00009c3:	39 f7                	cmp    edi,esi
c00009c5:	73 f0                	jae    c00009b7 <simple_strtoul+0xe1>
c00009c7:	31 d2                	xor    edx,edx
c00009c9:	89 f8                	mov    eax,edi
c00009cb:	f7 d0                	not    eax
c00009cd:	f7 f6                	div    esi
c00009cf:	39 d8                	cmp    eax,ebx
c00009d1:	72 0e                	jb     c00009e1 <simple_strtoul+0x10b>
c00009d3:	0f af de             	imul   ebx,esi
c00009d6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009dd:	01 fb                	add    ebx,edi
c00009df:	eb 07                	jmp    c00009e8 <simple_strtoul+0x112>
c00009e1:	bd 01 00 00 00       	mov    ebp,0x1
c00009e6:	31 db                	xor    ebx,ebx
c00009e8:	41                   	inc    ecx
c00009e9:	eb 9f                	jmp    c000098a <simple_strtoul+0xb4>
c00009eb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009ee:	09 d8                	or     eax,ebx
c00009f0:	75 1f                	jne    c0000a11 <simple_strtoul+0x13b>
c00009f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009fa:	31 db                	xor    ebx,ebx
c00009fc:	89 38                	mov    DWORD PTR [eax],edi
c00009fe:	eb 17                	jmp    c0000a17 <simple_strtoul+0x141>
c0000a00:	31 db                	xor    ebx,ebx
c0000a02:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a07:	74 14                	je     c0000a1d <simple_strtoul+0x147>
c0000a09:	31 ed                	xor    ebp,ebp
c0000a0b:	85 c9                	test   ecx,ecx
c0000a0d:	75 e3                	jne    c00009f2 <simple_strtoul+0x11c>
c0000a0f:	31 db                	xor    ebx,ebx
c0000a11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a15:	89 08                	mov    DWORD PTR [eax],ecx
c0000a17:	4d                   	dec    ebp
c0000a18:	75 03                	jne    c0000a1d <simple_strtoul+0x147>
c0000a1a:	83 cb ff             	or     ebx,0xffffffff
c0000a1d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a22:	75 02                	jne    c0000a26 <simple_strtoul+0x150>
c0000a24:	f7 db                	neg    ebx
c0000a26:	83 c4 08             	add    esp,0x8
c0000a29:	89 d8                	mov    eax,ebx
c0000a2b:	5b                   	pop    ebx
c0000a2c:	5e                   	pop    esi
c0000a2d:	5f                   	pop    edi
c0000a2e:	5d                   	pop    ebp
c0000a2f:	c3                   	ret    

c0000a30 <largebin_index>:
c0000a30:	89 c2                	mov    edx,eax
c0000a32:	c1 ea 08             	shr    edx,0x8
c0000a35:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a3b:	77 10                	ja     c0000a4d <largebin_index+0x1d>
c0000a3d:	0f bd d2             	bsr    edx,edx
c0000a40:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a43:	d3 e8                	shr    eax,cl
c0000a45:	83 e0 03             	and    eax,0x3
c0000a48:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a4c:	c3                   	ret    
c0000a4d:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a52:	c3                   	ret    

c0000a53 <malloc_init_state>:
c0000a53:	53                   	push   ebx
c0000a54:	8d 50 34             	lea    edx,[eax+0x34]
c0000a57:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a5d:	89 d1                	mov    ecx,edx
c0000a5f:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a62:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a65:	83 c2 08             	add    edx,0x8
c0000a68:	39 da                	cmp    edx,ebx
c0000a6a:	75 f3                	jne    c0000a5f <malloc_init_state+0xc>
c0000a6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a6e:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a78:	83 e2 03             	and    edx,0x3
c0000a7b:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a85:	83 ca 48             	or     edx,0x48
c0000a88:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a92:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a9c:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000aa3:	89 10                	mov    DWORD PTR [eax],edx
c0000aa5:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000aa8:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ab2:	5b                   	pop    ebx
c0000ab3:	c3                   	ret    

c0000ab4 <malloc_consolidate>:
c0000ab4:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ab6:	85 d2                	test   edx,edx
c0000ab8:	0f 84 d8 00 00 00    	je     c0000b96 <malloc_consolidate+0xe2>
c0000abe:	55                   	push   ebp
c0000abf:	83 e2 fd             	and    edx,0xfffffffd
c0000ac2:	57                   	push   edi
c0000ac3:	89 c5                	mov    ebp,eax
c0000ac5:	56                   	push   esi
c0000ac6:	8d 78 34             	lea    edi,[eax+0x34]
c0000ac9:	53                   	push   ebx
c0000aca:	83 ec 10             	sub    esp,0x10
c0000acd:	89 10                	mov    DWORD PTR [eax],edx
c0000acf:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ad3:	c1 ea 03             	shr    edx,0x3
c0000ad6:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000ada:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000ade:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ae1:	85 d2                	test   edx,edx
c0000ae3:	0f 84 98 00 00 00    	je     c0000b81 <malloc_consolidate+0xcd>
c0000ae9:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000af0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000af3:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000af6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000afa:	89 f9                	mov    ecx,edi
c0000afc:	83 e1 fe             	and    ecx,0xfffffffe
c0000aff:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b02:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b05:	83 e3 fc             	and    ebx,0xfffffffc
c0000b08:	83 e7 01             	and    edi,0x1
c0000b0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b0e:	75 14                	jne    c0000b24 <malloc_consolidate+0x70>
c0000b10:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b12:	29 fa                	sub    edx,edi
c0000b14:	01 f9                	add    ecx,edi
c0000b16:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b19:	89 fb                	mov    ebx,edi
c0000b1b:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b1e:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b21:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b24:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b27:	74 40                	je     c0000b69 <malloc_consolidate+0xb5>
c0000b29:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b2c:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b2f:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b33:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b36:	83 e7 01             	and    edi,0x1
c0000b39:	75 0e                	jne    c0000b49 <malloc_consolidate+0x95>
c0000b3b:	01 d9                	add    ecx,ebx
c0000b3d:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b40:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b43:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b46:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b49:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b4c:	89 ce                	mov    esi,ecx
c0000b4e:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b51:	83 ce 01             	or     esi,0x1
c0000b54:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b57:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b5a:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b5d:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b61:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b64:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b67:	eb 0c                	jmp    c0000b75 <malloc_consolidate+0xc1>
c0000b69:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b6c:	83 c9 01             	or     ecx,0x1
c0000b6f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b72:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b79:	85 d2                	test   edx,edx
c0000b7b:	0f 85 6f ff ff ff    	jne    c0000af0 <malloc_consolidate+0x3c>
c0000b81:	83 c5 04             	add    ebp,0x4
c0000b84:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b88:	0f 85 50 ff ff ff    	jne    c0000ade <malloc_consolidate+0x2a>
c0000b8e:	83 c4 10             	add    esp,0x10
c0000b91:	5b                   	pop    ebx
c0000b92:	5e                   	pop    esi
c0000b93:	5f                   	pop    edi
c0000b94:	5d                   	pop    ebp
c0000b95:	c3                   	ret    
c0000b96:	e9 b8 fe ff ff       	jmp    c0000a53 <malloc_init_state>

c0000b9b <dlfree>:
c0000b9b:	57                   	push   edi
c0000b9c:	56                   	push   esi
c0000b9d:	53                   	push   ebx
c0000b9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ba2:	85 db                	test   ebx,ebx
c0000ba4:	0f 84 e2 00 00 00    	je     c0000c8c <dlfree+0xf1>
c0000baa:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bad:	8b 0d e0 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023ee0
c0000bb3:	89 f0                	mov    eax,esi
c0000bb5:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bb8:	83 e0 fc             	and    eax,0xfffffffc
c0000bbb:	39 c1                	cmp    ecx,eax
c0000bbd:	72 24                	jb     c0000be3 <dlfree+0x48>
c0000bbf:	83 c9 03             	or     ecx,0x3
c0000bc2:	c1 e8 03             	shr    eax,0x3
c0000bc5:	89 0d e0 3e 02 c0    	mov    DWORD PTR ds:0xc0023ee0,ecx
c0000bcb:	83 e8 02             	sub    eax,0x2
c0000bce:	8b 0c 85 e4 3e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdc11c]
c0000bd5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000bd7:	89 14 85 e4 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc11c],edx
c0000bde:	e9 a9 00 00 00       	jmp    c0000c8c <dlfree+0xf1>
c0000be3:	83 e6 02             	and    esi,0x2
c0000be6:	0f 85 a0 00 00 00    	jne    c0000c8c <dlfree+0xf1>
c0000bec:	83 c9 01             	or     ecx,0x1
c0000bef:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bf2:	89 0d e0 3e 02 c0    	mov    DWORD PTR ds:0xc0023ee0,ecx
c0000bf8:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bfb:	83 e1 fc             	and    ecx,0xfffffffc
c0000bfe:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c02:	75 13                	jne    c0000c17 <dlfree+0x7c>
c0000c04:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c07:	29 da                	sub    edx,ebx
c0000c09:	01 d8                	add    eax,ebx
c0000c0b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c0e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c11:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c14:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c17:	39 35 0c 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f0c,esi
c0000c1d:	74 40                	je     c0000c5f <dlfree+0xc4>
c0000c1f:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c23:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c26:	80 e3 01             	and    bl,0x1
c0000c29:	75 0e                	jne    c0000c39 <dlfree+0x9e>
c0000c2b:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c2e:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c31:	01 c8                	add    eax,ecx
c0000c33:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c36:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c39:	8b 0d 1c 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023f1c
c0000c3f:	c7 42 0c 14 3f 02 c0 	mov    DWORD PTR [edx+0xc],0xc0023f14
c0000c46:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c49:	89 15 1c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f1c,edx
c0000c4f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c52:	89 c1                	mov    ecx,eax
c0000c54:	83 c9 01             	or     ecx,0x1
c0000c57:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c5a:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c5d:	eb 10                	jmp    c0000c6f <dlfree+0xd4>
c0000c5f:	01 c8                	add    eax,ecx
c0000c61:	89 c1                	mov    ecx,eax
c0000c63:	83 c9 01             	or     ecx,0x1
c0000c66:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c69:	89 15 0c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f0c,edx
c0000c6f:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c74:	76 16                	jbe    c0000c8c <dlfree+0xf1>
c0000c76:	f6 05 e0 3e 02 c0 02 	test   BYTE PTR ds:0xc0023ee0,0x2
c0000c7d:	74 0d                	je     c0000c8c <dlfree+0xf1>
c0000c7f:	5b                   	pop    ebx
c0000c80:	b8 e0 3e 02 c0       	mov    eax,0xc0023ee0
c0000c85:	5e                   	pop    esi
c0000c86:	5f                   	pop    edi
c0000c87:	e9 28 fe ff ff       	jmp    c0000ab4 <malloc_consolidate>
c0000c8c:	5b                   	pop    ebx
c0000c8d:	5e                   	pop    esi
c0000c8e:	5f                   	pop    edi
c0000c8f:	c3                   	ret    

c0000c90 <sYSMALLOc>:
c0000c90:	55                   	push   ebp
c0000c91:	57                   	push   edi
c0000c92:	56                   	push   esi
c0000c93:	53                   	push   ebx
c0000c94:	89 d3                	mov    ebx,edx
c0000c96:	83 ec 2c             	sub    esp,0x2c
c0000c99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c9d:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ca3:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ca6:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ca9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cad:	74 1f                	je     c0000cce <sYSMALLOc+0x3e>
c0000caf:	89 d8                	mov    eax,ebx
c0000cb1:	e8 fe fd ff ff       	call   c0000ab4 <malloc_consolidate>
c0000cb6:	83 ec 0c             	sub    esp,0xc
c0000cb9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000cbd:	83 e8 07             	sub    eax,0x7
c0000cc0:	50                   	push   eax
c0000cc1:	e8 30 02 00 00       	call   c0000ef6 <dlmalloc>
c0000cc6:	83 c4 10             	add    esp,0x10
c0000cc9:	e9 20 02 00 00       	jmp    c0000eee <sYSMALLOc+0x25e>
c0000cce:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000cd1:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000cd7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000cda:	83 e0 fc             	and    eax,0xfffffffc
c0000cdd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ce1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ce5:	83 c0 10             	add    eax,0x10
c0000ce8:	01 c1                	add    ecx,eax
c0000cea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cee:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cf5:	74 04                	je     c0000cfb <sYSMALLOc+0x6b>
c0000cf7:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000cfb:	f7 da                	neg    edx
c0000cfd:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000d01:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000d05:	21 d1                	and    ecx,edx
c0000d07:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000d0b:	7f 07                	jg     c0000d14 <sYSMALLOc+0x84>
c0000d0d:	31 c0                	xor    eax,eax
c0000d0f:	e9 da 01 00 00       	jmp    c0000eee <sYSMALLOc+0x25e>
c0000d14:	83 ec 0c             	sub    esp,0xc
c0000d17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d1b:	e8 31 b1 00 00       	call   c000be51 <sbrk>
c0000d20:	83 c4 10             	add    esp,0x10
c0000d23:	89 c6                	mov    esi,eax
c0000d25:	83 f8 ff             	cmp    eax,0xffffffff
c0000d28:	74 e3                	je     c0000d0d <sYSMALLOc+0x7d>
c0000d2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d2e:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d32:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d35:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d3b:	39 f1                	cmp    ecx,esi
c0000d3d:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d43:	75 13                	jne    c0000d58 <sYSMALLOc+0xc8>
c0000d45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d49:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d4d:	83 c8 01             	or     eax,0x1
c0000d50:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d53:	e9 3e 01 00 00       	jmp    c0000e96 <sYSMALLOc+0x206>
c0000d58:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d5e:	88 d0                	mov    al,dl
c0000d60:	83 e0 01             	and    eax,0x1
c0000d63:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d68:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d6c:	0f 95 c0             	setne  al
c0000d6f:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d73:	39 f1                	cmp    ecx,esi
c0000d75:	76 12                	jbe    c0000d89 <sYSMALLOc+0xf9>
c0000d77:	84 c0                	test   al,al
c0000d79:	74 0e                	je     c0000d89 <sYSMALLOc+0xf9>
c0000d7b:	83 e2 fe             	and    edx,0xfffffffe
c0000d7e:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d84:	e9 83 00 00 00       	jmp    c0000e0c <sYSMALLOc+0x17c>
c0000d89:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d8e:	74 7c                	je     c0000e0c <sYSMALLOc+0x17c>
c0000d90:	84 c0                	test   al,al
c0000d92:	74 0c                	je     c0000da0 <sYSMALLOc+0x110>
c0000d94:	89 f0                	mov    eax,esi
c0000d96:	29 c8                	sub    eax,ecx
c0000d98:	01 e8                	add    eax,ebp
c0000d9a:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000da0:	89 f2                	mov    edx,esi
c0000da2:	83 e2 07             	and    edx,0x7
c0000da5:	74 0c                	je     c0000db3 <sYSMALLOc+0x123>
c0000da7:	b8 08 00 00 00       	mov    eax,0x8
c0000dac:	29 d0                	sub    eax,edx
c0000dae:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000db1:	eb 04                	jmp    c0000db7 <sYSMALLOc+0x127>
c0000db3:	89 f5                	mov    ebp,esi
c0000db5:	31 c0                	xor    eax,eax
c0000db7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000dbb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000dbf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000dc3:	01 c1                	add    ecx,eax
c0000dc5:	83 ec 0c             	sub    esp,0xc
c0000dc8:	01 f1                	add    ecx,esi
c0000dca:	01 ca                	add    edx,ecx
c0000dcc:	29 c8                	sub    eax,ecx
c0000dce:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000dd2:	01 c2                	add    edx,eax
c0000dd4:	52                   	push   edx
c0000dd5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000dd9:	e8 73 b0 00 00       	call   c000be51 <sbrk>
c0000dde:	83 c4 10             	add    esp,0x10
c0000de1:	83 f8 ff             	cmp    eax,0xffffffff
c0000de4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000de8:	75 0f                	jne    c0000df9 <sYSMALLOc+0x169>
c0000dea:	83 ec 0c             	sub    esp,0xc
c0000ded:	6a 00                	push   0x0
c0000def:	e8 5d b0 00 00       	call   c000be51 <sbrk>
c0000df4:	83 c4 10             	add    esp,0x10
c0000df7:	eb 30                	jmp    c0000e29 <sYSMALLOc+0x199>
c0000df9:	39 c6                	cmp    esi,eax
c0000dfb:	76 33                	jbe    c0000e30 <sYSMALLOc+0x1a0>
c0000dfd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e01:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e08:	01 f0                	add    eax,esi
c0000e0a:	eb 1d                	jmp    c0000e29 <sYSMALLOc+0x199>
c0000e0c:	83 ec 0c             	sub    esp,0xc
c0000e0f:	89 f5                	mov    ebp,esi
c0000e11:	6a 00                	push   0x0
c0000e13:	e8 39 b0 00 00       	call   c000be51 <sbrk>
c0000e18:	89 c2                	mov    edx,eax
c0000e1a:	29 f2                	sub    edx,esi
c0000e1c:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000e20:	83 c4 10             	add    esp,0x10
c0000e23:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e29:	31 d2                	xor    edx,edx
c0000e2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000e2e:	74 66                	je     c0000e96 <sYSMALLOc+0x206>
c0000e30:	29 e8                	sub    eax,ebp
c0000e32:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e35:	01 d0                	add    eax,edx
c0000e37:	83 c8 01             	or     eax,0x1
c0000e3a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e3d:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e43:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e48:	74 4c                	je     c0000e96 <sYSMALLOc+0x206>
c0000e4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e4e:	83 e8 0c             	sub    eax,0xc
c0000e51:	83 e0 f8             	and    eax,0xfffffff8
c0000e54:	89 c2                	mov    edx,eax
c0000e56:	83 ca 01             	or     edx,0x1
c0000e59:	83 f8 0f             	cmp    eax,0xf
c0000e5c:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e5f:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e67:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e6f:	76 25                	jbe    c0000e96 <sYSMALLOc+0x206>
c0000e71:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e77:	83 ec 0c             	sub    esp,0xc
c0000e7a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e84:	83 c7 08             	add    edi,0x8
c0000e87:	57                   	push   edi
c0000e88:	e8 0e fd ff ff       	call   c0000b9b <dlfree>
c0000e8d:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e93:	83 c4 10             	add    esp,0x10
c0000e96:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e9c:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000ea2:	73 06                	jae    c0000eaa <sYSMALLOc+0x21a>
c0000ea4:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000eaa:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000eb0:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000eb6:	73 06                	jae    c0000ebe <sYSMALLOc+0x22e>
c0000eb8:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ebe:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ec1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ec4:	83 e2 fc             	and    edx,0xfffffffc
c0000ec7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ecb:	0f 82 3c fe ff ff    	jb     c0000d0d <sYSMALLOc+0x7d>
c0000ed1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ed5:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ed8:	29 fa                	sub    edx,edi
c0000eda:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000edd:	83 ca 01             	or     edx,0x1
c0000ee0:	89 fb                	mov    ebx,edi
c0000ee2:	83 c0 08             	add    eax,0x8
c0000ee5:	83 cb 01             	or     ebx,0x1
c0000ee8:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000eeb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000eee:	83 c4 2c             	add    esp,0x2c
c0000ef1:	5b                   	pop    ebx
c0000ef2:	5e                   	pop    esi
c0000ef3:	5f                   	pop    edi
c0000ef4:	5d                   	pop    ebp
c0000ef5:	c3                   	ret    

c0000ef6 <dlmalloc>:
c0000ef6:	55                   	push   ebp
c0000ef7:	57                   	push   edi
c0000ef8:	56                   	push   esi
c0000ef9:	53                   	push   ebx
c0000efa:	83 ec 1c             	sub    esp,0x1c
c0000efd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f01:	83 f8 df             	cmp    eax,0xffffffdf
c0000f04:	0f 87 70 03 00 00    	ja     c000127a <dlmalloc+0x384>
c0000f0a:	83 c0 0b             	add    eax,0xb
c0000f0d:	be 10 00 00 00       	mov    esi,0x10
c0000f12:	83 f8 0f             	cmp    eax,0xf
c0000f15:	76 05                	jbe    c0000f1c <dlmalloc+0x26>
c0000f17:	83 e0 f8             	and    eax,0xfffffff8
c0000f1a:	89 c6                	mov    esi,eax
c0000f1c:	8b 3d e0 3e 02 c0    	mov    edi,DWORD PTR ds:0xc0023ee0
c0000f22:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f28:	75 17                	jne    c0000f41 <dlmalloc+0x4b>
c0000f2a:	85 ff                	test   edi,edi
c0000f2c:	0f 85 05 03 00 00    	jne    c0001237 <dlmalloc+0x341>
c0000f32:	b8 e0 3e 02 c0       	mov    eax,0xc0023ee0
c0000f37:	e8 78 fb ff ff       	call   c0000ab4 <malloc_consolidate>
c0000f3c:	e9 f6 02 00 00       	jmp    c0001237 <dlmalloc+0x341>
c0000f41:	39 f7                	cmp    edi,esi
c0000f43:	72 1f                	jb     c0000f64 <dlmalloc+0x6e>
c0000f45:	89 f2                	mov    edx,esi
c0000f47:	c1 ea 03             	shr    edx,0x3
c0000f4a:	83 ea 02             	sub    edx,0x2
c0000f4d:	8b 04 95 e4 3e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc11c]
c0000f54:	85 c0                	test   eax,eax
c0000f56:	74 0c                	je     c0000f64 <dlmalloc+0x6e>
c0000f58:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f5b:	89 0c 95 e4 3e 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc11c],ecx
c0000f62:	eb 30                	jmp    c0000f94 <dlmalloc+0x9e>
c0000f64:	89 f0                	mov    eax,esi
c0000f66:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f6c:	77 2e                	ja     c0000f9c <dlmalloc+0xa6>
c0000f6e:	c1 e8 03             	shr    eax,0x3
c0000f71:	8d 14 c5 14 3f 02 c0 	lea    edx,[eax*8-0x3ffdc0ec]
c0000f78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f7c:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f7f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f82:	39 c3                	cmp    ebx,eax
c0000f84:	74 2e                	je     c0000fb4 <dlmalloc+0xbe>
c0000f86:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f89:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f8e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f91:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f94:	83 c0 08             	add    eax,0x8
c0000f97:	e9 e0 02 00 00       	jmp    c000127c <dlmalloc+0x386>
c0000f9c:	e8 8f fa ff ff       	call   c0000a30 <largebin_index>
c0000fa1:	83 e7 02             	and    edi,0x2
c0000fa4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fa8:	74 0a                	je     c0000fb4 <dlmalloc+0xbe>
c0000faa:	b8 e0 3e 02 c0       	mov    eax,0xc0023ee0
c0000faf:	e8 00 fb ff ff       	call   c0000ab4 <malloc_consolidate>
c0000fb4:	8d 46 10             	lea    eax,[esi+0x10]
c0000fb7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fbb:	8b 1d 20 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023f20
c0000fc1:	81 fb 14 3f 02 c0    	cmp    ebx,0xc0023f14
c0000fc7:	0f 84 13 01 00 00    	je     c00010e0 <dlmalloc+0x1ea>
c0000fcd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fd3:	83 e7 fc             	and    edi,0xfffffffc
c0000fd6:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fdc:	77 4c                	ja     c000102a <dlmalloc+0x134>
c0000fde:	3d 14 3f 02 c0       	cmp    eax,0xc0023f14
c0000fe3:	75 45                	jne    c000102a <dlmalloc+0x134>
c0000fe5:	39 1d 10 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f10,ebx
c0000feb:	75 3d                	jne    c000102a <dlmalloc+0x134>
c0000fed:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000ff1:	73 37                	jae    c000102a <dlmalloc+0x134>
c0000ff3:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000ff6:	89 fa                	mov    edx,edi
c0000ff8:	a3 1c 3f 02 c0       	mov    ds:0xc0023f1c,eax
c0000ffd:	a3 20 3f 02 c0       	mov    ds:0xc0023f20,eax
c0001002:	a3 10 3f 02 c0       	mov    ds:0xc0023f10,eax
c0001007:	29 f2                	sub    edx,esi
c0001009:	c7 40 08 14 3f 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023f14
c0001010:	c7 40 0c 14 3f 02 c0 	mov    DWORD PTR [eax+0xc],0xc0023f14
c0001017:	83 ce 01             	or     esi,0x1
c000101a:	89 d1                	mov    ecx,edx
c000101c:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000101f:	83 c9 01             	or     ecx,0x1
c0001022:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001025:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001028:	eb 15                	jmp    c000103f <dlmalloc+0x149>
c000102a:	a3 20 3f 02 c0       	mov    ds:0xc0023f20,eax
c000102f:	39 fe                	cmp    esi,edi
c0001031:	c7 40 08 14 3f 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023f14
c0001038:	75 0d                	jne    c0001047 <dlmalloc+0x151>
c000103a:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000103f:	8d 43 08             	lea    eax,[ebx+0x8]
c0001042:	e9 35 02 00 00       	jmp    c000127c <dlmalloc+0x386>
c0001047:	89 f8                	mov    eax,edi
c0001049:	81 ff ff 00 00 00    	cmp    edi,0xff
c000104f:	77 19                	ja     c000106a <dlmalloc+0x174>
c0001051:	c1 e8 03             	shr    eax,0x3
c0001054:	8d 14 00             	lea    edx,[eax+eax*1]
c0001057:	83 c2 0d             	add    edx,0xd
c000105a:	8d 2c 95 d8 3e 02 c0 	lea    ebp,[edx*4-0x3ffdc128]
c0001061:	8b 14 95 e0 3e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc120]
c0001068:	eb 46                	jmp    c00010b0 <dlmalloc+0x1ba>
c000106a:	e8 c1 f9 ff ff       	call   c0000a30 <largebin_index>
c000106f:	8d 14 00             	lea    edx,[eax+eax*1]
c0001072:	83 c2 0d             	add    edx,0xd
c0001075:	8d 0c 95 e0 3e 02 c0 	lea    ecx,[edx*4-0x3ffdc120]
c000107c:	8b 14 95 e0 3e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc120]
c0001083:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001086:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000108a:	89 d5                	mov    ebp,edx
c000108c:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001090:	74 1e                	je     c00010b0 <dlmalloc+0x1ba>
c0001092:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001095:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001098:	77 12                	ja     c00010ac <dlmalloc+0x1b6>
c000109a:	83 cf 01             	or     edi,0x1
c000109d:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010a0:	76 05                	jbe    c00010a7 <dlmalloc+0x1b1>
c00010a2:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010a5:	eb f6                	jmp    c000109d <dlmalloc+0x1a7>
c00010a7:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010aa:	eb 04                	jmp    c00010b0 <dlmalloc+0x1ba>
c00010ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010b0:	89 c7                	mov    edi,eax
c00010b2:	88 c1                	mov    cl,al
c00010b4:	c1 ff 05             	sar    edi,0x5
c00010b7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010bb:	bf 01 00 00 00       	mov    edi,0x1
c00010c0:	d3 e7                	shl    edi,cl
c00010c2:	89 f8                	mov    eax,edi
c00010c4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010c8:	09 04 bd 14 42 02 c0 	or     DWORD PTR [edi*4-0x3ffdbdec],eax
c00010cf:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010d2:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010d5:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010d8:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010db:	e9 db fe ff ff       	jmp    c0000fbb <dlmalloc+0xc5>
c00010e0:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010e6:	76 78                	jbe    c0001160 <dlmalloc+0x26a>
c00010e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010ec:	8d 04 c5 14 3f 02 c0 	lea    eax,[eax*8-0x3ffdc0ec]
c00010f3:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010f6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010f9:	39 ca                	cmp    edx,ecx
c00010fb:	74 63                	je     c0001160 <dlmalloc+0x26a>
c00010fd:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001100:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001103:	83 e3 fc             	and    ebx,0xfffffffc
c0001106:	39 de                	cmp    esi,ebx
c0001108:	77 52                	ja     c000115c <dlmalloc+0x266>
c000110a:	89 df                	mov    edi,ebx
c000110c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000110f:	29 f7                	sub    edi,esi
c0001111:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001114:	01 d3                	add    ebx,edx
c0001116:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001119:	83 ff 0f             	cmp    edi,0xf
c000111c:	8d 42 08             	lea    eax,[edx+0x8]
c000111f:	77 09                	ja     c000112a <dlmalloc+0x234>
c0001121:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001125:	e9 52 01 00 00       	jmp    c000127c <dlmalloc+0x386>
c000112a:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000112d:	83 ce 01             	or     esi,0x1
c0001130:	89 0d 1c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f1c,ecx
c0001136:	89 0d 20 3f 02 c0    	mov    DWORD PTR ds:0xc0023f20,ecx
c000113c:	c7 41 08 14 3f 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0023f14
c0001143:	c7 41 0c 14 3f 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0023f14
c000114a:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000114d:	89 fa                	mov    edx,edi
c000114f:	83 ca 01             	or     edx,0x1
c0001152:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001155:	89 3b                	mov    DWORD PTR [ebx],edi
c0001157:	e9 20 01 00 00       	jmp    c000127c <dlmalloc+0x386>
c000115c:	89 c2                	mov    edx,eax
c000115e:	eb 99                	jmp    c00010f9 <dlmalloc+0x203>
c0001160:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001164:	b8 01 00 00 00       	mov    eax,0x1
c0001169:	41                   	inc    ecx
c000116a:	89 cb                	mov    ebx,ecx
c000116c:	8d 14 cd 0c 3f 02 c0 	lea    edx,[ecx*8-0x3ffdc0f4]
c0001173:	c1 eb 05             	shr    ebx,0x5
c0001176:	d3 e0                	shl    eax,cl
c0001178:	8b 3c 9d 14 42 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbdec]
c000117f:	39 f8                	cmp    eax,edi
c0001181:	77 04                	ja     c0001187 <dlmalloc+0x291>
c0001183:	85 c0                	test   eax,eax
c0001185:	75 26                	jne    c00011ad <dlmalloc+0x2b7>
c0001187:	43                   	inc    ebx
c0001188:	83 fb 02             	cmp    ebx,0x2
c000118b:	0f 87 a6 00 00 00    	ja     c0001237 <dlmalloc+0x341>
c0001191:	8b 3c 9d 14 42 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbdec]
c0001198:	85 ff                	test   edi,edi
c000119a:	74 eb                	je     c0001187 <dlmalloc+0x291>
c000119c:	89 d8                	mov    eax,ebx
c000119e:	c1 e0 06             	shl    eax,0x6
c00011a1:	8d 14 85 0c 3f 02 c0 	lea    edx,[eax*4-0x3ffdc0f4]
c00011a8:	b8 01 00 00 00       	mov    eax,0x1
c00011ad:	85 f8                	test   eax,edi
c00011af:	75 07                	jne    c00011b8 <dlmalloc+0x2c2>
c00011b1:	83 c2 08             	add    edx,0x8
c00011b4:	01 c0                	add    eax,eax
c00011b6:	eb f5                	jmp    c00011ad <dlmalloc+0x2b7>
c00011b8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011bb:	39 ca                	cmp    edx,ecx
c00011bd:	75 14                	jne    c00011d3 <dlmalloc+0x2dd>
c00011bf:	89 c1                	mov    ecx,eax
c00011c1:	83 c2 08             	add    edx,0x8
c00011c4:	f7 d1                	not    ecx
c00011c6:	01 c0                	add    eax,eax
c00011c8:	21 cf                	and    edi,ecx
c00011ca:	89 3c 9d 14 42 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbdec],edi
c00011d1:	eb ac                	jmp    c000117f <dlmalloc+0x289>
c00011d3:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011d6:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011d9:	83 e0 fc             	and    eax,0xfffffffc
c00011dc:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011df:	89 c3                	mov    ebx,eax
c00011e1:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011e4:	29 f3                	sub    ebx,esi
c00011e6:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011e9:	83 fb 0f             	cmp    ebx,0xf
c00011ec:	8d 41 08             	lea    eax,[ecx+0x8]
c00011ef:	77 09                	ja     c00011fa <dlmalloc+0x304>
c00011f1:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011f5:	e9 82 00 00 00       	jmp    c000127c <dlmalloc+0x386>
c00011fa:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011fd:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001203:	89 3d 1c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f1c,edi
c0001209:	89 3d 20 3f 02 c0    	mov    DWORD PTR ds:0xc0023f20,edi
c000120f:	c7 47 08 14 3f 02 c0 	mov    DWORD PTR [edi+0x8],0xc0023f14
c0001216:	c7 47 0c 14 3f 02 c0 	mov    DWORD PTR [edi+0xc],0xc0023f14
c000121d:	77 06                	ja     c0001225 <dlmalloc+0x32f>
c000121f:	89 3d 10 3f 02 c0    	mov    DWORD PTR ds:0xc0023f10,edi
c0001225:	83 ce 01             	or     esi,0x1
c0001228:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000122b:	89 d9                	mov    ecx,ebx
c000122d:	83 c9 01             	or     ecx,0x1
c0001230:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001233:	89 1a                	mov    DWORD PTR [edx],ebx
c0001235:	eb 45                	jmp    c000127c <dlmalloc+0x386>
c0001237:	a1 0c 3f 02 c0       	mov    eax,ds:0xc0023f0c
c000123c:	8d 4e 10             	lea    ecx,[esi+0x10]
c000123f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001242:	83 e2 fc             	and    edx,0xfffffffc
c0001245:	39 d1                	cmp    ecx,edx
c0001247:	77 1e                	ja     c0001267 <dlmalloc+0x371>
c0001249:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000124c:	89 f3                	mov    ebx,esi
c000124e:	89 0d 0c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f0c,ecx
c0001254:	83 cb 01             	or     ebx,0x1
c0001257:	29 f2                	sub    edx,esi
c0001259:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000125c:	83 ca 01             	or     edx,0x1
c000125f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001262:	e9 2d fd ff ff       	jmp    c0000f94 <dlmalloc+0x9e>
c0001267:	83 c4 1c             	add    esp,0x1c
c000126a:	89 f0                	mov    eax,esi
c000126c:	5b                   	pop    ebx
c000126d:	ba e0 3e 02 c0       	mov    edx,0xc0023ee0
c0001272:	5e                   	pop    esi
c0001273:	5f                   	pop    edi
c0001274:	5d                   	pop    ebp
c0001275:	e9 16 fa ff ff       	jmp    c0000c90 <sYSMALLOc>
c000127a:	31 c0                	xor    eax,eax
c000127c:	83 c4 1c             	add    esp,0x1c
c000127f:	5b                   	pop    ebx
c0001280:	5e                   	pop    esi
c0001281:	5f                   	pop    edi
c0001282:	5d                   	pop    ebp
c0001283:	c3                   	ret    

c0001284 <iALLOc>:
c0001284:	55                   	push   ebp
c0001285:	89 c5                	mov    ebp,eax
c0001287:	57                   	push   edi
c0001288:	56                   	push   esi
c0001289:	53                   	push   ebx
c000128a:	83 ec 2c             	sub    esp,0x2c
c000128d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001291:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001295:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001299:	83 3d e0 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023ee0,0x0
c00012a0:	75 12                	jne    c00012b4 <iALLOc+0x30>
c00012a2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012a6:	b8 e0 3e 02 c0       	mov    eax,0xc0023ee0
c00012ab:	e8 04 f8 ff ff       	call   c0000ab4 <malloc_consolidate>
c00012b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012b4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012b9:	74 12                	je     c00012cd <iALLOc+0x49>
c00012bb:	85 ed                	test   ebp,ebp
c00012bd:	0f 84 64 01 00 00    	je     c0001427 <iALLOc+0x1a3>
c00012c3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012cb:	eb 33                	jmp    c0001300 <iALLOc+0x7c>
c00012cd:	85 ed                	test   ebp,ebp
c00012cf:	75 14                	jne    c00012e5 <iALLOc+0x61>
c00012d1:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012d9:	83 c4 2c             	add    esp,0x2c
c00012dc:	5b                   	pop    ebx
c00012dd:	5e                   	pop    esi
c00012de:	5f                   	pop    edi
c00012df:	5d                   	pop    ebp
c00012e0:	e9 11 fc ff ff       	jmp    c0000ef6 <dlmalloc>
c00012e5:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012ec:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012f4:	83 f8 0f             	cmp    eax,0xf
c00012f7:	76 07                	jbe    c0001300 <iALLOc+0x7c>
c00012f9:	83 e0 f8             	and    eax,0xfffffff8
c00012fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001300:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001305:	75 09                	jne    c0001310 <iALLOc+0x8c>
c0001307:	89 d0                	mov    eax,edx
c0001309:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000130c:	31 f6                	xor    esi,esi
c000130e:	eb 3b                	jmp    c000134b <iALLOc+0xc7>
c0001310:	8b 02                	mov    eax,DWORD PTR [edx]
c0001312:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000131a:	83 c0 0b             	add    eax,0xb
c000131d:	83 f8 0f             	cmp    eax,0xf
c0001320:	76 07                	jbe    c0001329 <iALLOc+0xa5>
c0001322:	83 e0 f8             	and    eax,0xfffffff8
c0001325:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001329:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000132d:	0f af f5             	imul   esi,ebp
c0001330:	eb 25                	jmp    c0001357 <iALLOc+0xd3>
c0001332:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001334:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001337:	bb 10 00 00 00       	mov    ebx,0x10
c000133c:	83 f9 0f             	cmp    ecx,0xf
c000133f:	76 05                	jbe    c0001346 <iALLOc+0xc2>
c0001341:	83 e1 f8             	and    ecx,0xfffffff8
c0001344:	89 cb                	mov    ebx,ecx
c0001346:	01 de                	add    esi,ebx
c0001348:	83 c0 04             	add    eax,0x4
c000134b:	39 c7                	cmp    edi,eax
c000134d:	75 e3                	jne    c0001332 <iALLOc+0xae>
c000134f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001357:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000135b:	8b 1d 34 42 02 c0    	mov    ebx,DWORD PTR ds:0xc0024234
c0001361:	83 ec 0c             	sub    esp,0xc
c0001364:	c7 05 34 42 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024234,0x0
c000136e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001372:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001376:	50                   	push   eax
c0001377:	e8 7a fb ff ff       	call   c0000ef6 <dlmalloc>
c000137c:	83 c4 10             	add    esp,0x10
c000137f:	89 1d 34 42 02 c0    	mov    DWORD PTR ds:0xc0024234,ebx
c0001385:	85 c0                	test   eax,eax
c0001387:	0f 84 92 00 00 00    	je     c000141f <iALLOc+0x19b>
c000138d:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001390:	8d 78 f8             	lea    edi,[eax-0x8]
c0001393:	83 e3 fc             	and    ebx,0xfffffffc
c0001396:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000139a:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000139f:	74 1e                	je     c00013bf <iALLOc+0x13b>
c00013a1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013a5:	89 d9                	mov    ecx,ebx
c00013a7:	52                   	push   edx
c00013a8:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013ac:	83 e9 04             	sub    ecx,0x4
c00013af:	51                   	push   ecx
c00013b0:	6a 00                	push   0x0
c00013b2:	50                   	push   eax
c00013b3:	e8 02 f3 ff ff       	call   c00006ba <memset>
c00013b8:	83 c4 10             	add    esp,0x10
c00013bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013bf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013c4:	75 14                	jne    c00013da <iALLOc+0x156>
c00013c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00013c9:	29 f3                	sub    ebx,esi
c00013cb:	8d 48 08             	lea    ecx,[eax+0x8]
c00013ce:	83 cb 01             	or     ebx,0x1
c00013d1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013d5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013d8:	89 f3                	mov    ebx,esi
c00013da:	31 c0                	xor    eax,eax
c00013dc:	4d                   	dec    ebp
c00013dd:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013e0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013e4:	39 c5                	cmp    ebp,eax
c00013e6:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013e9:	74 2c                	je     c0001417 <iALLOc+0x193>
c00013eb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013ef:	85 c9                	test   ecx,ecx
c00013f1:	75 15                	jne    c0001408 <iALLOc+0x184>
c00013f3:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013f6:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013f9:	b9 10 00 00 00       	mov    ecx,0x10
c00013fe:	83 fe 0f             	cmp    esi,0xf
c0001401:	76 05                	jbe    c0001408 <iALLOc+0x184>
c0001403:	83 e6 f8             	and    esi,0xfffffff8
c0001406:	89 f1                	mov    ecx,esi
c0001408:	89 ce                	mov    esi,ecx
c000140a:	29 cb                	sub    ebx,ecx
c000140c:	83 ce 01             	or     esi,0x1
c000140f:	40                   	inc    eax
c0001410:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001413:	01 cf                	add    edi,ecx
c0001415:	eb c6                	jmp    c00013dd <iALLOc+0x159>
c0001417:	83 cb 01             	or     ebx,0x1
c000141a:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000141d:	eb 08                	jmp    c0001427 <iALLOc+0x1a3>
c000141f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001427:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000142b:	83 c4 2c             	add    esp,0x2c
c000142e:	5b                   	pop    ebx
c000142f:	5e                   	pop    esi
c0001430:	5f                   	pop    edi
c0001431:	5d                   	pop    ebp
c0001432:	c3                   	ret    

c0001433 <dlrealloc>:
c0001433:	55                   	push   ebp
c0001434:	57                   	push   edi
c0001435:	56                   	push   esi
c0001436:	53                   	push   ebx
c0001437:	83 ec 1c             	sub    esp,0x1c
c000143a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000143e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001442:	85 db                	test   ebx,ebx
c0001444:	75 10                	jne    c0001456 <dlrealloc+0x23>
c0001446:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000144a:	83 c4 1c             	add    esp,0x1c
c000144d:	5b                   	pop    ebx
c000144e:	5e                   	pop    esi
c000144f:	5f                   	pop    edi
c0001450:	5d                   	pop    ebp
c0001451:	e9 a0 fa ff ff       	jmp    c0000ef6 <dlmalloc>
c0001456:	83 f8 df             	cmp    eax,0xffffffdf
c0001459:	76 07                	jbe    c0001462 <dlrealloc+0x2f>
c000145b:	31 db                	xor    ebx,ebx
c000145d:	e9 7c 01 00 00       	jmp    c00015de <dlrealloc+0x1ab>
c0001462:	83 c0 0b             	add    eax,0xb
c0001465:	bf 10 00 00 00       	mov    edi,0x10
c000146a:	83 f8 0f             	cmp    eax,0xf
c000146d:	76 05                	jbe    c0001474 <dlrealloc+0x41>
c000146f:	83 e0 f8             	and    eax,0xfffffff8
c0001472:	89 c7                	mov    edi,eax
c0001474:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001477:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000147a:	89 c6                	mov    esi,eax
c000147c:	83 e6 fc             	and    esi,0xfffffffc
c000147f:	a8 02                	test   al,0x2
c0001481:	75 d8                	jne    c000145b <dlrealloc+0x28>
c0001483:	39 f7                	cmp    edi,esi
c0001485:	0f 86 15 01 00 00    	jbe    c00015a0 <dlrealloc+0x16d>
c000148b:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c000148f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001492:	39 15 0c 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f0c,edx
c0001498:	75 33                	jne    c00014cd <dlrealloc+0x9a>
c000149a:	83 e1 fc             	and    ecx,0xfffffffc
c000149d:	01 f1                	add    ecx,esi
c000149f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014a3:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014a6:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014aa:	77 49                	ja     c00014f5 <dlrealloc+0xc2>
c00014ac:	01 fd                	add    ebp,edi
c00014ae:	83 e0 01             	and    eax,0x1
c00014b1:	09 f8                	or     eax,edi
c00014b3:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014b6:	89 2d 0c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f0c,ebp
c00014bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014c0:	29 f8                	sub    eax,edi
c00014c2:	83 c8 01             	or     eax,0x1
c00014c5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014c8:	e9 11 01 00 00       	jmp    c00015de <dlrealloc+0x1ab>
c00014cd:	89 c8                	mov    eax,ecx
c00014cf:	83 e0 fe             	and    eax,0xfffffffe
c00014d2:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014d7:	75 1c                	jne    c00014f5 <dlrealloc+0xc2>
c00014d9:	83 e1 fc             	and    ecx,0xfffffffc
c00014dc:	01 f1                	add    ecx,esi
c00014de:	39 cf                	cmp    edi,ecx
c00014e0:	77 13                	ja     c00014f5 <dlrealloc+0xc2>
c00014e2:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014e5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014e8:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014eb:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014ee:	89 ce                	mov    esi,ecx
c00014f0:	e9 ab 00 00 00       	jmp    c00015a0 <dlrealloc+0x16d>
c00014f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014f9:	8d 47 f9             	lea    eax,[edi-0x7]
c00014fc:	83 ec 0c             	sub    esp,0xc
c00014ff:	50                   	push   eax
c0001500:	e8 f1 f9 ff ff       	call   c0000ef6 <dlmalloc>
c0001505:	83 c4 10             	add    esp,0x10
c0001508:	89 c1                	mov    ecx,eax
c000150a:	85 c0                	test   eax,eax
c000150c:	0f 84 49 ff ff ff    	je     c000145b <dlrealloc+0x28>
c0001512:	8d 40 f8             	lea    eax,[eax-0x8]
c0001515:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001519:	39 c2                	cmp    edx,eax
c000151b:	75 0a                	jne    c0001527 <dlrealloc+0xf4>
c000151d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001520:	83 e0 fc             	and    eax,0xfffffffc
c0001523:	01 c6                	add    esi,eax
c0001525:	eb 79                	jmp    c00015a0 <dlrealloc+0x16d>
c0001527:	83 ee 04             	sub    esi,0x4
c000152a:	83 fe 27             	cmp    esi,0x27
c000152d:	76 16                	jbe    c0001545 <dlrealloc+0x112>
c000152f:	50                   	push   eax
c0001530:	56                   	push   esi
c0001531:	53                   	push   ebx
c0001532:	51                   	push   ecx
c0001533:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001537:	e8 48 f1 ff ff       	call   c0000684 <memcpy>
c000153c:	83 c4 10             	add    esp,0x10
c000153f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001543:	eb 43                	jmp    c0001588 <dlrealloc+0x155>
c0001545:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001547:	83 fe 13             	cmp    esi,0x13
c000154a:	89 01                	mov    DWORD PTR [ecx],eax
c000154c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000154f:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001552:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001555:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001558:	76 2e                	jbe    c0001588 <dlrealloc+0x155>
c000155a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000155d:	83 fe 1b             	cmp    esi,0x1b
c0001560:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001563:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001566:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001569:	76 1d                	jbe    c0001588 <dlrealloc+0x155>
c000156b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000156e:	83 fe 23             	cmp    esi,0x23
c0001571:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001574:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001577:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000157a:	76 0c                	jbe    c0001588 <dlrealloc+0x155>
c000157c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000157f:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001582:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001585:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001588:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158c:	83 ec 0c             	sub    esp,0xc
c000158f:	53                   	push   ebx
c0001590:	e8 06 f6 ff ff       	call   c0000b9b <dlfree>
c0001595:	83 c4 10             	add    esp,0x10
c0001598:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000159c:	89 cb                	mov    ebx,ecx
c000159e:	eb 3e                	jmp    c00015de <dlrealloc+0x1ab>
c00015a0:	89 f2                	mov    edx,esi
c00015a2:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015a5:	29 fa                	sub    edx,edi
c00015a7:	83 e1 01             	and    ecx,0x1
c00015aa:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015ae:	83 fa 0f             	cmp    edx,0xf
c00015b1:	77 0b                	ja     c00015be <dlrealloc+0x18b>
c00015b3:	09 ce                	or     esi,ecx
c00015b5:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015bc:	eb 20                	jmp    c00015de <dlrealloc+0x1ab>
c00015be:	01 fd                	add    ebp,edi
c00015c0:	83 ec 0c             	sub    esp,0xc
c00015c3:	09 cf                	or     edi,ecx
c00015c5:	83 ca 01             	or     edx,0x1
c00015c8:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015cb:	83 c5 08             	add    ebp,0x8
c00015ce:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015d1:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015d5:	55                   	push   ebp
c00015d6:	e8 c0 f5 ff ff       	call   c0000b9b <dlfree>
c00015db:	83 c4 10             	add    esp,0x10
c00015de:	83 c4 1c             	add    esp,0x1c
c00015e1:	89 d8                	mov    eax,ebx
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlmemalign>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 0c             	sub    esp,0xc
c00015ef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015f7:	83 fa 08             	cmp    edx,0x8
c00015fa:	77 10                	ja     c000160c <dlmemalign+0x24>
c00015fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001600:	83 c4 0c             	add    esp,0xc
c0001603:	5b                   	pop    ebx
c0001604:	5e                   	pop    esi
c0001605:	5f                   	pop    edi
c0001606:	5d                   	pop    ebp
c0001607:	e9 ea f8 ff ff       	jmp    c0000ef6 <dlmalloc>
c000160c:	bf 10 00 00 00       	mov    edi,0x10
c0001611:	83 fa 0f             	cmp    edx,0xf
c0001614:	76 13                	jbe    c0001629 <dlmemalign+0x41>
c0001616:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001619:	85 d1                	test   ecx,edx
c000161b:	75 04                	jne    c0001621 <dlmemalign+0x39>
c000161d:	89 d7                	mov    edi,edx
c000161f:	eb 08                	jmp    c0001629 <dlmemalign+0x41>
c0001621:	39 d7                	cmp    edi,edx
c0001623:	73 04                	jae    c0001629 <dlmemalign+0x41>
c0001625:	01 ff                	add    edi,edi
c0001627:	eb f8                	jmp    c0001621 <dlmemalign+0x39>
c0001629:	83 f8 df             	cmp    eax,0xffffffdf
c000162c:	76 07                	jbe    c0001635 <dlmemalign+0x4d>
c000162e:	31 c0                	xor    eax,eax
c0001630:	e9 ce 00 00 00       	jmp    c0001703 <dlmemalign+0x11b>
c0001635:	83 c0 0b             	add    eax,0xb
c0001638:	bd 10 00 00 00       	mov    ebp,0x10
c000163d:	83 f8 0f             	cmp    eax,0xf
c0001640:	76 05                	jbe    c0001647 <dlmemalign+0x5f>
c0001642:	83 e0 f8             	and    eax,0xfffffff8
c0001645:	89 c5                	mov    ebp,eax
c0001647:	83 ec 0c             	sub    esp,0xc
c000164a:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000164e:	50                   	push   eax
c000164f:	e8 a2 f8 ff ff       	call   c0000ef6 <dlmalloc>
c0001654:	83 c4 10             	add    esp,0x10
c0001657:	89 c1                	mov    ecx,eax
c0001659:	85 c0                	test   eax,eax
c000165b:	74 d1                	je     c000162e <dlmemalign+0x46>
c000165d:	31 d2                	xor    edx,edx
c000165f:	8d 70 f8             	lea    esi,[eax-0x8]
c0001662:	f7 f7                	div    edi
c0001664:	85 d2                	test   edx,edx
c0001666:	74 62                	je     c00016ca <dlmemalign+0xe2>
c0001668:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000166c:	89 f8                	mov    eax,edi
c000166e:	f7 d8                	neg    eax
c0001670:	21 c3                	and    ebx,eax
c0001672:	83 eb 08             	sub    ebx,0x8
c0001675:	89 d8                	mov    eax,ebx
c0001677:	29 f0                	sub    eax,esi
c0001679:	83 f8 0f             	cmp    eax,0xf
c000167c:	77 02                	ja     c0001680 <dlmemalign+0x98>
c000167e:	01 fb                	add    ebx,edi
c0001680:	89 d8                	mov    eax,ebx
c0001682:	29 f0                	sub    eax,esi
c0001684:	89 c6                	mov    esi,eax
c0001686:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001689:	89 c2                	mov    edx,eax
c000168b:	83 e2 fc             	and    edx,0xfffffffc
c000168e:	29 f2                	sub    edx,esi
c0001690:	a8 02                	test   al,0x2
c0001692:	74 10                	je     c00016a4 <dlmemalign+0xbc>
c0001694:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001697:	83 ca 02             	or     edx,0x2
c000169a:	8d 43 08             	lea    eax,[ebx+0x8]
c000169d:	89 33                	mov    DWORD PTR [ebx],esi
c000169f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016a2:	eb 5f                	jmp    c0001703 <dlmemalign+0x11b>
c00016a4:	83 ec 0c             	sub    esp,0xc
c00016a7:	89 d0                	mov    eax,edx
c00016a9:	83 c8 01             	or     eax,0x1
c00016ac:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016af:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016b4:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016b7:	83 e0 01             	and    eax,0x1
c00016ba:	09 f0                	or     eax,esi
c00016bc:	89 de                	mov    esi,ebx
c00016be:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016c1:	51                   	push   ecx
c00016c2:	e8 d4 f4 ff ff       	call   c0000b9b <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016cd:	a8 02                	test   al,0x2
c00016cf:	75 2f                	jne    c0001700 <dlmemalign+0x118>
c00016d1:	83 e0 fc             	and    eax,0xfffffffc
c00016d4:	8d 55 10             	lea    edx,[ebp+0x10]
c00016d7:	39 c2                	cmp    edx,eax
c00016d9:	73 25                	jae    c0001700 <dlmemalign+0x118>
c00016db:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016de:	83 ec 0c             	sub    esp,0xc
c00016e1:	29 e8                	sub    eax,ebp
c00016e3:	83 c2 08             	add    edx,0x8
c00016e6:	83 c8 01             	or     eax,0x1
c00016e9:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016ec:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016ef:	83 e0 01             	and    eax,0x1
c00016f2:	09 c5                	or     ebp,eax
c00016f4:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016f7:	52                   	push   edx
c00016f8:	e8 9e f4 ff ff       	call   c0000b9b <dlfree>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	8d 46 08             	lea    eax,[esi+0x8]
c0001703:	83 c4 0c             	add    esp,0xc
c0001706:	5b                   	pop    ebx
c0001707:	5e                   	pop    esi
c0001708:	5f                   	pop    edi
c0001709:	5d                   	pop    ebp
c000170a:	c3                   	ret    

c000170b <dlcalloc>:
c000170b:	53                   	push   ebx
c000170c:	83 ec 14             	sub    esp,0x14
c000170f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001713:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001718:	50                   	push   eax
c0001719:	e8 d8 f7 ff ff       	call   c0000ef6 <dlmalloc>
c000171e:	83 c4 10             	add    esp,0x10
c0001721:	89 c3                	mov    ebx,eax
c0001723:	85 c0                	test   eax,eax
c0001725:	74 77                	je     c000179e <dlcalloc+0x93>
c0001727:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000172a:	89 d0                	mov    eax,edx
c000172c:	83 e0 fc             	and    eax,0xfffffffc
c000172f:	80 e2 02             	and    dl,0x2
c0001732:	75 5a                	jne    c000178e <dlcalloc+0x83>
c0001734:	83 e8 04             	sub    eax,0x4
c0001737:	83 f8 27             	cmp    eax,0x27
c000173a:	76 03                	jbe    c000173f <dlcalloc+0x34>
c000173c:	51                   	push   ecx
c000173d:	eb 53                	jmp    c0001792 <dlcalloc+0x87>
c000173f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001745:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000174c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001753:	83 f8 13             	cmp    eax,0x13
c0001756:	76 46                	jbe    c000179e <dlcalloc+0x93>
c0001758:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000175f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001766:	83 f8 1b             	cmp    eax,0x1b
c0001769:	76 33                	jbe    c000179e <dlcalloc+0x93>
c000176b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001772:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001779:	83 f8 23             	cmp    eax,0x23
c000177c:	76 20                	jbe    c000179e <dlcalloc+0x93>
c000177e:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001785:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000178c:	eb 10                	jmp    c000179e <dlcalloc+0x93>
c000178e:	83 e8 08             	sub    eax,0x8
c0001791:	52                   	push   edx
c0001792:	50                   	push   eax
c0001793:	6a 00                	push   0x0
c0001795:	53                   	push   ebx
c0001796:	e8 1f ef ff ff       	call   c00006ba <memset>
c000179b:	83 c4 10             	add    esp,0x10
c000179e:	89 d8                	mov    eax,ebx
c00017a0:	83 c4 08             	add    esp,0x8
c00017a3:	5b                   	pop    ebx
c00017a4:	c3                   	ret    

c00017a5 <dlcfree>:
c00017a5:	e9 f1 f3 ff ff       	jmp    c0000b9b <dlfree>

c00017aa <dlindependent_calloc>:
c00017aa:	83 ec 28             	sub    esp,0x28
c00017ad:	b9 03 00 00 00       	mov    ecx,0x3
c00017b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017c6:	e8 b9 fa ff ff       	call   c0001284 <iALLOc>
c00017cb:	83 c4 2c             	add    esp,0x2c
c00017ce:	c3                   	ret    

c00017cf <dlindependent_comalloc>:
c00017cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017d7:	31 c9                	xor    ecx,ecx
c00017d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017e1:	e9 9e fa ff ff       	jmp    c0001284 <iALLOc>

c00017e6 <dlvalloc>:
c00017e6:	83 ec 0c             	sub    esp,0xc
c00017e9:	83 3d e0 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023ee0,0x0
c00017f0:	75 0a                	jne    c00017fc <dlvalloc+0x16>
c00017f2:	b8 e0 3e 02 c0       	mov    eax,0xc0023ee0
c00017f7:	e8 b8 f2 ff ff       	call   c0000ab4 <malloc_consolidate>
c00017fc:	50                   	push   eax
c00017fd:	50                   	push   eax
c00017fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001802:	ff 35 3c 42 02 c0    	push   DWORD PTR ds:0xc002423c
c0001808:	e8 db fd ff ff       	call   c00015e8 <dlmemalign>
c000180d:	83 c4 1c             	add    esp,0x1c
c0001810:	c3                   	ret    

c0001811 <dlpvalloc>:
c0001811:	83 ec 0c             	sub    esp,0xc
c0001814:	83 3d e0 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023ee0,0x0
c000181b:	75 0a                	jne    c0001827 <dlpvalloc+0x16>
c000181d:	b8 e0 3e 02 c0       	mov    eax,0xc0023ee0
c0001822:	e8 8d f2 ff ff       	call   c0000ab4 <malloc_consolidate>
c0001827:	a1 3c 42 02 c0       	mov    eax,ds:0xc002423c
c000182c:	89 c1                	mov    ecx,eax
c000182e:	52                   	push   edx
c000182f:	f7 d9                	neg    ecx
c0001831:	52                   	push   edx
c0001832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001836:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000183a:	21 ca                	and    edx,ecx
c000183c:	52                   	push   edx
c000183d:	50                   	push   eax
c000183e:	e8 a5 fd ff ff       	call   c00015e8 <dlmemalign>
c0001843:	83 c4 1c             	add    esp,0x1c
c0001846:	c3                   	ret    

c0001847 <dlmalloc_trim>:
c0001847:	b8 e0 3e 02 c0       	mov    eax,0xc0023ee0
c000184c:	e8 63 f2 ff ff       	call   c0000ab4 <malloc_consolidate>
c0001851:	31 c0                	xor    eax,eax
c0001853:	c3                   	ret    

c0001854 <dlmalloc_usable_size>:
c0001854:	53                   	push   ebx
c0001855:	31 c0                	xor    eax,eax
c0001857:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000185b:	85 c9                	test   ecx,ecx
c000185d:	74 24                	je     c0001883 <dlmalloc_usable_size+0x2f>
c000185f:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001862:	f6 c2 02             	test   dl,0x2
c0001865:	74 08                	je     c000186f <dlmalloc_usable_size+0x1b>
c0001867:	83 e2 fc             	and    edx,0xfffffffc
c000186a:	8d 42 f8             	lea    eax,[edx-0x8]
c000186d:	eb 14                	jmp    c0001883 <dlmalloc_usable_size+0x2f>
c000186f:	89 d3                	mov    ebx,edx
c0001871:	31 c0                	xor    eax,eax
c0001873:	83 e3 fe             	and    ebx,0xfffffffe
c0001876:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000187b:	74 06                	je     c0001883 <dlmalloc_usable_size+0x2f>
c000187d:	83 e2 fc             	and    edx,0xfffffffc
c0001880:	8d 42 fc             	lea    eax,[edx-0x4]
c0001883:	5b                   	pop    ebx
c0001884:	c3                   	ret    

c0001885 <dlmallinfo>:
c0001885:	55                   	push   ebp
c0001886:	57                   	push   edi
c0001887:	56                   	push   esi
c0001888:	53                   	push   ebx
c0001889:	83 ec 08             	sub    esp,0x8
c000188c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001890:	83 3d 0c 3f 02 c0 00 	cmp    DWORD PTR ds:0xc0023f0c,0x0
c0001897:	75 0a                	jne    c00018a3 <dlmallinfo+0x1e>
c0001899:	b8 e0 3e 02 c0       	mov    eax,0xc0023ee0
c000189e:	e8 11 f2 ff ff       	call   c0000ab4 <malloc_consolidate>
c00018a3:	a1 0c 3f 02 c0       	mov    eax,ds:0xc0023f0c
c00018a8:	31 ed                	xor    ebp,ebp
c00018aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018ad:	31 c9                	xor    ecx,ecx
c00018af:	83 e0 fc             	and    eax,0xfffffffc
c00018b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018b6:	31 c0                	xor    eax,eax
c00018b8:	8b 14 85 e4 3e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc11c]
c00018bf:	85 d2                	test   edx,edx
c00018c1:	74 0e                	je     c00018d1 <dlmallinfo+0x4c>
c00018c3:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018c6:	45                   	inc    ebp
c00018c7:	83 e6 fc             	and    esi,0xfffffffc
c00018ca:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018cd:	01 f1                	add    ecx,esi
c00018cf:	eb ee                	jmp    c00018bf <dlmallinfo+0x3a>
c00018d1:	40                   	inc    eax
c00018d2:	83 f8 0a             	cmp    eax,0xa
c00018d5:	75 e1                	jne    c00018b8 <dlmallinfo+0x33>
c00018d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018db:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018e2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018e5:	b8 14 3f 02 c0       	mov    eax,0xc0023f14
c00018ea:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018ed:	39 f0                	cmp    eax,esi
c00018ef:	74 10                	je     c0001901 <dlmallinfo+0x7c>
c00018f1:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018f4:	ff 04 24             	inc    DWORD PTR [esp]
c00018f7:	83 e7 fc             	and    edi,0xfffffffc
c00018fa:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018fd:	01 fa                	add    edx,edi
c00018ff:	eb ec                	jmp    c00018ed <dlmallinfo+0x68>
c0001901:	83 c0 08             	add    eax,0x8
c0001904:	3d 0c 42 02 c0       	cmp    eax,0xc002420c
c0001909:	75 df                	jne    c00018ea <dlmallinfo+0x65>
c000190b:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000190e:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001911:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001914:	a1 48 42 02 c0       	mov    eax,ds:0xc0024248
c0001919:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000191c:	89 03                	mov    DWORD PTR [ebx],eax
c000191e:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001921:	8b 35 30 42 02 c0    	mov    esi,DWORD PTR ds:0xc0024230
c0001927:	29 d0                	sub    eax,edx
c0001929:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000192c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000192f:	8b 35 44 42 02 c0    	mov    esi,DWORD PTR ds:0xc0024244
c0001935:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001939:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000193c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000193f:	8b 35 54 42 02 c0    	mov    esi,DWORD PTR ds:0xc0024254
c0001945:	89 d8                	mov    eax,ebx
c0001947:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000194a:	83 c4 08             	add    esp,0x8
c000194d:	5b                   	pop    ebx
c000194e:	5e                   	pop    esi
c000194f:	5f                   	pop    edi
c0001950:	5d                   	pop    ebp
c0001951:	c2 04 00             	ret    0x4

c0001954 <dlmalloc_stats>:
c0001954:	83 ec 30             	sub    esp,0x30
c0001957:	8d 44 24 08          	lea    eax,[esp+0x8]
c000195b:	50                   	push   eax
c000195c:	e8 24 ff ff ff       	call   c0001885 <dlmallinfo>
c0001961:	83 c4 30             	add    esp,0x30
c0001964:	c3                   	ret    

c0001965 <dlmallopt>:
c0001965:	56                   	push   esi
c0001966:	b8 e0 3e 02 c0       	mov    eax,0xc0023ee0
c000196b:	53                   	push   ebx
c000196c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001970:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001974:	e8 3b f1 ff ff       	call   c0000ab4 <malloc_consolidate>
c0001979:	8d 46 04             	lea    eax,[esi+0x4]
c000197c:	83 f8 05             	cmp    eax,0x5
c000197f:	77 67                	ja     c00019e8 <dlmallopt+0x83>
c0001981:	ff 24 85 64 00 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdff9c]
c0001988:	83 fb 50             	cmp    ebx,0x50
c000198b:	77 5b                	ja     c00019e8 <dlmallopt+0x83>
c000198d:	ba 08 00 00 00       	mov    edx,0x8
c0001992:	85 db                	test   ebx,ebx
c0001994:	74 12                	je     c00019a8 <dlmallopt+0x43>
c0001996:	83 c3 0b             	add    ebx,0xb
c0001999:	ba 10 00 00 00       	mov    edx,0x10
c000199e:	83 fb 0f             	cmp    ebx,0xf
c00019a1:	76 05                	jbe    c00019a8 <dlmallopt+0x43>
c00019a3:	89 da                	mov    edx,ebx
c00019a5:	83 e2 f8             	and    edx,0xfffffff8
c00019a8:	a1 e0 3e 02 c0       	mov    eax,ds:0xc0023ee0
c00019ad:	83 e0 03             	and    eax,0x3
c00019b0:	09 d0                	or     eax,edx
c00019b2:	a3 e0 3e 02 c0       	mov    ds:0xc0023ee0,eax
c00019b7:	eb 31                	jmp    c00019ea <dlmallopt+0x85>
c00019b9:	89 1d 24 42 02 c0    	mov    DWORD PTR ds:0xc0024224,ebx
c00019bf:	eb 06                	jmp    c00019c7 <dlmallopt+0x62>
c00019c1:	89 1d 28 42 02 c0    	mov    DWORD PTR ds:0xc0024228,ebx
c00019c7:	be 01 00 00 00       	mov    esi,0x1
c00019cc:	eb 1c                	jmp    c00019ea <dlmallopt+0x85>
c00019ce:	89 1d 2c 42 02 c0    	mov    DWORD PTR ds:0xc002422c,ebx
c00019d4:	eb f1                	jmp    c00019c7 <dlmallopt+0x62>
c00019d6:	31 f6                	xor    esi,esi
c00019d8:	85 db                	test   ebx,ebx
c00019da:	75 0e                	jne    c00019ea <dlmallopt+0x85>
c00019dc:	c7 05 34 42 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024234,0x0
c00019e6:	eb df                	jmp    c00019c7 <dlmallopt+0x62>
c00019e8:	31 f6                	xor    esi,esi
c00019ea:	89 f0                	mov    eax,esi
c00019ec:	5b                   	pop    ebx
c00019ed:	5e                   	pop    esi
c00019ee:	c3                   	ret    

c00019ef <disk_status>:
c00019ef:	31 c0                	xor    eax,eax
c00019f1:	c3                   	ret    

c00019f2 <disk_initialize>:
c00019f2:	31 c0                	xor    eax,eax
c00019f4:	c3                   	ret    

c00019f5 <disk_read>:
c00019f5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019fa:	0f b6 04 85 00 58 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda800]
c0001a02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a06:	e9 23 8b 01 00       	jmp    c001a52e <fatWrapperReadDisk>

c0001a0b <disk_write>:
c0001a0b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a10:	0f b6 04 85 00 58 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda800]
c0001a18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a1c:	e9 54 8b 01 00       	jmp    c001a575 <fatWrapperWriteDisk>

c0001a21 <disk_ioctl>:
c0001a21:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a2a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a2f:	0f b6 04 85 00 58 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda800]
c0001a37:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a3b:	e9 7c 8b 01 00       	jmp    c001a5bc <fatWrapperIoctl>

c0001a40 <ld_word>:
c0001a40:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a44:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a47:	c1 e2 08             	shl    edx,0x8
c0001a4a:	09 d0                	or     eax,edx
c0001a4c:	c3                   	ret    

c0001a4d <ld_dword>:
c0001a4d:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a51:	89 d1                	mov    ecx,edx
c0001a53:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a57:	c1 e1 08             	shl    ecx,0x8
c0001a5a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a5d:	09 ca                	or     edx,ecx
c0001a5f:	c1 e2 08             	shl    edx,0x8
c0001a62:	09 d0                	or     eax,edx
c0001a64:	c3                   	ret    

c0001a65 <ld_qword>:
c0001a65:	57                   	push   edi
c0001a66:	56                   	push   esi
c0001a67:	53                   	push   ebx
c0001a68:	31 db                	xor    ebx,ebx
c0001a6a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a6d:	89 df                	mov    edi,ebx
c0001a6f:	89 ce                	mov    esi,ecx
c0001a71:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a75:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a79:	c1 e6 08             	shl    esi,0x8
c0001a7c:	09 f2                	or     edx,esi
c0001a7e:	89 d6                	mov    esi,edx
c0001a80:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a84:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a88:	c1 e6 08             	shl    esi,0x8
c0001a8b:	09 f2                	or     edx,esi
c0001a8d:	89 d6                	mov    esi,edx
c0001a8f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a93:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a97:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a9a:	c1 e6 08             	shl    esi,0x8
c0001a9d:	89 fb                	mov    ebx,edi
c0001a9f:	09 f2                	or     edx,esi
c0001aa1:	89 d1                	mov    ecx,edx
c0001aa3:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001aa7:	c1 e1 08             	shl    ecx,0x8
c0001aaa:	89 da                	mov    edx,ebx
c0001aac:	09 c8                	or     eax,ecx
c0001aae:	5b                   	pop    ebx
c0001aaf:	5e                   	pop    esi
c0001ab0:	5f                   	pop    edi
c0001ab1:	c3                   	ret    

c0001ab2 <st_word>:
c0001ab2:	66 89 10             	mov    WORD PTR [eax],dx
c0001ab5:	c3                   	ret    

c0001ab6 <st_dword>:
c0001ab6:	89 10                	mov    DWORD PTR [eax],edx
c0001ab8:	c3                   	ret    

c0001ab9 <st_qword>:
c0001ab9:	89 10                	mov    DWORD PTR [eax],edx
c0001abb:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001abe:	c3                   	ret    

c0001abf <mem_cpy>:
c0001abf:	85 c9                	test   ecx,ecx
c0001ac1:	74 10                	je     c0001ad3 <mem_cpy+0x14>
c0001ac3:	57                   	push   edi
c0001ac4:	01 c1                	add    ecx,eax
c0001ac6:	56                   	push   esi
c0001ac7:	89 c7                	mov    edi,eax
c0001ac9:	89 d6                	mov    esi,edx
c0001acb:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001acc:	39 f9                	cmp    ecx,edi
c0001ace:	75 fb                	jne    c0001acb <mem_cpy+0xc>
c0001ad0:	5e                   	pop    esi
c0001ad1:	5f                   	pop    edi
c0001ad2:	c3                   	ret    
c0001ad3:	c3                   	ret    

c0001ad4 <mem_set>:
c0001ad4:	01 c1                	add    ecx,eax
c0001ad6:	40                   	inc    eax
c0001ad7:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001ada:	39 c8                	cmp    eax,ecx
c0001adc:	75 f8                	jne    c0001ad6 <mem_set+0x2>
c0001ade:	c3                   	ret    

c0001adf <mem_cmp>:
c0001adf:	57                   	push   edi
c0001ae0:	56                   	push   esi
c0001ae1:	89 c6                	mov    esi,eax
c0001ae3:	53                   	push   ebx
c0001ae4:	46                   	inc    esi
c0001ae5:	42                   	inc    edx
c0001ae6:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001aea:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001aee:	29 fb                	sub    ebx,edi
c0001af0:	89 cf                	mov    edi,ecx
c0001af2:	29 f7                	sub    edi,esi
c0001af4:	01 c7                	add    edi,eax
c0001af6:	74 04                	je     c0001afc <mem_cmp+0x1d>
c0001af8:	85 db                	test   ebx,ebx
c0001afa:	74 e8                	je     c0001ae4 <mem_cmp+0x5>
c0001afc:	89 d8                	mov    eax,ebx
c0001afe:	5b                   	pop    ebx
c0001aff:	5e                   	pop    esi
c0001b00:	5f                   	pop    edi
c0001b01:	c3                   	ret    

c0001b02 <chk_chr>:
c0001b02:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b05:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b08:	74 07                	je     c0001b11 <chk_chr+0xf>
c0001b0a:	39 d1                	cmp    ecx,edx
c0001b0c:	74 03                	je     c0001b11 <chk_chr+0xf>
c0001b0e:	40                   	inc    eax
c0001b0f:	eb f1                	jmp    c0001b02 <chk_chr>
c0001b11:	89 c8                	mov    eax,ecx
c0001b13:	c3                   	ret    

c0001b14 <dbc_1st>:
c0001b14:	31 c0                	xor    eax,eax
c0001b16:	c3                   	ret    

c0001b17 <dbc_2nd>:
c0001b17:	31 c0                	xor    eax,eax
c0001b19:	c3                   	ret    

c0001b1a <tchar2uni>:
c0001b1a:	57                   	push   edi
c0001b1b:	89 c7                	mov    edi,eax
c0001b1d:	56                   	push   esi
c0001b1e:	53                   	push   ebx
c0001b1f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b21:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b23:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b26:	84 c9                	test   cl,cl
c0001b28:	78 0a                	js     c0001b34 <tchar2uni+0x1a>
c0001b2a:	0f b6 d1             	movzx  edx,cl
c0001b2d:	89 f3                	mov    ebx,esi
c0001b2f:	e9 9f 00 00 00       	jmp    c0001bd3 <tchar2uni+0xb9>
c0001b34:	88 ca                	mov    dl,cl
c0001b36:	83 e2 e0             	and    edx,0xffffffe0
c0001b39:	80 fa c0             	cmp    dl,0xc0
c0001b3c:	75 0c                	jne    c0001b4a <tchar2uni+0x30>
c0001b3e:	89 ca                	mov    edx,ecx
c0001b40:	b9 01 00 00 00       	mov    ecx,0x1
c0001b45:	83 e2 1f             	and    edx,0x1f
c0001b48:	eb 2e                	jmp    c0001b78 <tchar2uni+0x5e>
c0001b4a:	88 ca                	mov    dl,cl
c0001b4c:	83 e2 f0             	and    edx,0xfffffff0
c0001b4f:	80 fa e0             	cmp    dl,0xe0
c0001b52:	75 0c                	jne    c0001b60 <tchar2uni+0x46>
c0001b54:	89 ca                	mov    edx,ecx
c0001b56:	b9 02 00 00 00       	mov    ecx,0x2
c0001b5b:	83 e2 0f             	and    edx,0xf
c0001b5e:	eb 18                	jmp    c0001b78 <tchar2uni+0x5e>
c0001b60:	88 ca                	mov    dl,cl
c0001b62:	83 e2 f8             	and    edx,0xfffffff8
c0001b65:	88 d0                	mov    al,dl
c0001b67:	83 ca ff             	or     edx,0xffffffff
c0001b6a:	3c f0                	cmp    al,0xf0
c0001b6c:	75 6c                	jne    c0001bda <tchar2uni+0xc0>
c0001b6e:	89 ca                	mov    edx,ecx
c0001b70:	b9 03 00 00 00       	mov    ecx,0x3
c0001b75:	83 e2 07             	and    edx,0x7
c0001b78:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b7c:	46                   	inc    esi
c0001b7d:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b80:	88 c8                	mov    al,cl
c0001b82:	83 e0 c0             	and    eax,0xffffffc0
c0001b85:	3c 80                	cmp    al,0x80
c0001b87:	75 4e                	jne    c0001bd7 <tchar2uni+0xbd>
c0001b89:	c1 e2 06             	shl    edx,0x6
c0001b8c:	83 e1 3f             	and    ecx,0x3f
c0001b8f:	09 ca                	or     edx,ecx
c0001b91:	39 de                	cmp    esi,ebx
c0001b93:	75 e7                	jne    c0001b7c <tchar2uni+0x62>
c0001b95:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b98:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b9e:	77 37                	ja     c0001bd7 <tchar2uni+0xbd>
c0001ba0:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001ba6:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bac:	76 29                	jbe    c0001bd7 <tchar2uni+0xbd>
c0001bae:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bb4:	76 1d                	jbe    c0001bd3 <tchar2uni+0xb9>
c0001bb6:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bbc:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bc2:	c1 e1 06             	shl    ecx,0x6
c0001bc5:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bcb:	09 ca                	or     edx,ecx
c0001bcd:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bd3:	89 1f                	mov    DWORD PTR [edi],ebx
c0001bd5:	eb 03                	jmp    c0001bda <tchar2uni+0xc0>
c0001bd7:	83 ca ff             	or     edx,0xffffffff
c0001bda:	5b                   	pop    ebx
c0001bdb:	89 d0                	mov    eax,edx
c0001bdd:	5e                   	pop    esi
c0001bde:	5f                   	pop    edi
c0001bdf:	c3                   	ret    

c0001be0 <put_utf>:
c0001be0:	53                   	push   ebx
c0001be1:	83 f8 7f             	cmp    eax,0x7f
c0001be4:	89 c3                	mov    ebx,eax
c0001be6:	b0 00                	mov    al,0x0
c0001be8:	77 11                	ja     c0001bfb <put_utf+0x1b>
c0001bea:	85 c9                	test   ecx,ecx
c0001bec:	0f 84 e5 00 00 00    	je     c0001cd7 <put_utf+0xf7>
c0001bf2:	88 1a                	mov    BYTE PTR [edx],bl
c0001bf4:	b0 01                	mov    al,0x1
c0001bf6:	e9 dc 00 00 00       	jmp    c0001cd7 <put_utf+0xf7>
c0001bfb:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c01:	77 23                	ja     c0001c26 <put_utf+0x46>
c0001c03:	83 f9 01             	cmp    ecx,0x1
c0001c06:	0f 86 cb 00 00 00    	jbe    c0001cd7 <put_utf+0xf7>
c0001c0c:	89 d8                	mov    eax,ebx
c0001c0e:	83 e3 3f             	and    ebx,0x3f
c0001c11:	c1 e8 06             	shr    eax,0x6
c0001c14:	83 cb 80             	or     ebx,0xffffff80
c0001c17:	83 c8 c0             	or     eax,0xffffffc0
c0001c1a:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c1d:	88 02                	mov    BYTE PTR [edx],al
c0001c1f:	b0 02                	mov    al,0x2
c0001c21:	e9 b1 00 00 00       	jmp    c0001cd7 <put_utf+0xf7>
c0001c26:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c2c:	77 40                	ja     c0001c6e <put_utf+0x8e>
c0001c2e:	83 f9 02             	cmp    ecx,0x2
c0001c31:	0f 86 a0 00 00 00    	jbe    c0001cd7 <put_utf+0xf7>
c0001c37:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c3d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c43:	0f 86 8e 00 00 00    	jbe    c0001cd7 <put_utf+0xf7>
c0001c49:	89 d8                	mov    eax,ebx
c0001c4b:	c1 e8 0c             	shr    eax,0xc
c0001c4e:	83 c8 e0             	or     eax,0xffffffe0
c0001c51:	88 02                	mov    BYTE PTR [edx],al
c0001c53:	89 d8                	mov    eax,ebx
c0001c55:	83 e3 3f             	and    ebx,0x3f
c0001c58:	c1 e8 06             	shr    eax,0x6
c0001c5b:	83 cb 80             	or     ebx,0xffffff80
c0001c5e:	83 e0 3f             	and    eax,0x3f
c0001c61:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c64:	83 c8 80             	or     eax,0xffffff80
c0001c67:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c6a:	b0 03                	mov    al,0x3
c0001c6c:	eb 69                	jmp    c0001cd7 <put_utf+0xf7>
c0001c6e:	83 f9 03             	cmp    ecx,0x3
c0001c71:	76 64                	jbe    c0001cd7 <put_utf+0xf7>
c0001c73:	89 d9                	mov    ecx,ebx
c0001c75:	0f b7 c3             	movzx  eax,bx
c0001c78:	66 31 c9             	xor    cx,cx
c0001c7b:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c81:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c87:	c1 e9 06             	shr    ecx,0x6
c0001c8a:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c90:	77 43                	ja     c0001cd5 <put_utf+0xf5>
c0001c92:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c98:	77 3b                	ja     c0001cd5 <put_utf+0xf5>
c0001c9a:	09 cb                	or     ebx,ecx
c0001c9c:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ca2:	89 d8                	mov    eax,ebx
c0001ca4:	c1 e8 12             	shr    eax,0x12
c0001ca7:	83 c8 f0             	or     eax,0xfffffff0
c0001caa:	88 02                	mov    BYTE PTR [edx],al
c0001cac:	89 d8                	mov    eax,ebx
c0001cae:	c1 e8 0c             	shr    eax,0xc
c0001cb1:	83 e0 3f             	and    eax,0x3f
c0001cb4:	83 c8 80             	or     eax,0xffffff80
c0001cb7:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cba:	89 d8                	mov    eax,ebx
c0001cbc:	83 e3 3f             	and    ebx,0x3f
c0001cbf:	c1 e8 06             	shr    eax,0x6
c0001cc2:	83 cb 80             	or     ebx,0xffffff80
c0001cc5:	83 e0 3f             	and    eax,0x3f
c0001cc8:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001ccb:	83 c8 80             	or     eax,0xffffff80
c0001cce:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cd1:	b0 04                	mov    al,0x4
c0001cd3:	eb 02                	jmp    c0001cd7 <put_utf+0xf7>
c0001cd5:	31 c0                	xor    eax,eax
c0001cd7:	5b                   	pop    ebx
c0001cd8:	c3                   	ret    

c0001cd9 <clst2sect>:
c0001cd9:	89 c1                	mov    ecx,eax
c0001cdb:	83 ea 02             	sub    edx,0x2
c0001cde:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ce1:	83 e8 02             	sub    eax,0x2
c0001ce4:	39 d0                	cmp    eax,edx
c0001ce6:	76 0d                	jbe    c0001cf5 <clst2sect+0x1c>
c0001ce8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cec:	f7 e2                	mul    edx
c0001cee:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cf1:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cf4:	c3                   	ret    
c0001cf5:	31 c0                	xor    eax,eax
c0001cf7:	31 d2                	xor    edx,edx
c0001cf9:	c3                   	ret    

c0001cfa <clmt_clust>:
c0001cfa:	57                   	push   edi
c0001cfb:	89 cf                	mov    edi,ecx
c0001cfd:	56                   	push   esi
c0001cfe:	89 d6                	mov    esi,edx
c0001d00:	53                   	push   ebx
c0001d01:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d05:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d08:	89 f2                	mov    edx,esi
c0001d0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d0c:	c1 ef 09             	shr    edi,0x9
c0001d0f:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d13:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d16:	89 f9                	mov    ecx,edi
c0001d18:	31 ff                	xor    edi,edi
c0001d1a:	57                   	push   edi
c0001d1b:	56                   	push   esi
c0001d1c:	51                   	push   ecx
c0001d1d:	52                   	push   edx
c0001d1e:	e8 39 d4 01 00       	call   c001f15c <__udivdi3>
c0001d23:	83 c4 10             	add    esp,0x10
c0001d26:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d28:	85 d2                	test   edx,edx
c0001d2a:	74 10                	je     c0001d3c <clmt_clust+0x42>
c0001d2c:	39 d0                	cmp    eax,edx
c0001d2e:	72 07                	jb     c0001d37 <clmt_clust+0x3d>
c0001d30:	29 d0                	sub    eax,edx
c0001d32:	83 c3 08             	add    ebx,0x8
c0001d35:	eb ef                	jmp    c0001d26 <clmt_clust+0x2c>
c0001d37:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d3a:	89 c2                	mov    edx,eax
c0001d3c:	5b                   	pop    ebx
c0001d3d:	89 d0                	mov    eax,edx
c0001d3f:	5e                   	pop    esi
c0001d40:	5f                   	pop    edi
c0001d41:	c3                   	ret    

c0001d42 <pick_lfn>:
c0001d42:	55                   	push   ebp
c0001d43:	57                   	push   edi
c0001d44:	56                   	push   esi
c0001d45:	89 d6                	mov    esi,edx
c0001d47:	53                   	push   ebx
c0001d48:	89 c3                	mov    ebx,eax
c0001d4a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d4d:	e8 ee fc ff ff       	call   c0001a40 <ld_word>
c0001d52:	66 85 c0             	test   ax,ax
c0001d55:	74 04                	je     c0001d5b <pick_lfn+0x19>
c0001d57:	31 c0                	xor    eax,eax
c0001d59:	eb 5c                	jmp    c0001db7 <pick_lfn+0x75>
c0001d5b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d5e:	bd 01 00 00 00       	mov    ebp,0x1
c0001d63:	83 e1 bf             	and    ecx,0xffffffbf
c0001d66:	31 ff                	xor    edi,edi
c0001d68:	49                   	dec    ecx
c0001d69:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d6c:	0f b6 87 80 01 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdfe80]
c0001d73:	01 f0                	add    eax,esi
c0001d75:	e8 c6 fc ff ff       	call   c0001a40 <ld_word>
c0001d7a:	66 85 ed             	test   bp,bp
c0001d7d:	74 11                	je     c0001d90 <pick_lfn+0x4e>
c0001d7f:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d85:	77 d0                	ja     c0001d57 <pick_lfn+0x15>
c0001d87:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d8b:	89 c5                	mov    ebp,eax
c0001d8d:	41                   	inc    ecx
c0001d8e:	eb 04                	jmp    c0001d94 <pick_lfn+0x52>
c0001d90:	66 40                	inc    ax
c0001d92:	75 c3                	jne    c0001d57 <pick_lfn+0x15>
c0001d94:	47                   	inc    edi
c0001d95:	83 ff 0d             	cmp    edi,0xd
c0001d98:	75 d2                	jne    c0001d6c <pick_lfn+0x2a>
c0001d9a:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d9d:	74 13                	je     c0001db2 <pick_lfn+0x70>
c0001d9f:	66 85 ed             	test   bp,bp
c0001da2:	74 0e                	je     c0001db2 <pick_lfn+0x70>
c0001da4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001daa:	77 ab                	ja     c0001d57 <pick_lfn+0x15>
c0001dac:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001db2:	b8 01 00 00 00       	mov    eax,0x1
c0001db7:	5b                   	pop    ebx
c0001db8:	5e                   	pop    esi
c0001db9:	5f                   	pop    edi
c0001dba:	5d                   	pop    ebp
c0001dbb:	c3                   	ret    

c0001dbc <put_lfn>:
c0001dbc:	55                   	push   ebp
c0001dbd:	31 ed                	xor    ebp,ebp
c0001dbf:	57                   	push   edi
c0001dc0:	89 d7                	mov    edi,edx
c0001dc2:	56                   	push   esi
c0001dc3:	31 f6                	xor    esi,esi
c0001dc5:	53                   	push   ebx
c0001dc6:	83 ec 08             	sub    esp,0x8
c0001dc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dcc:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001dd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001dd4:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dda:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ddd:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001de0:	31 d2                	xor    edx,edx
c0001de2:	e8 cb fc ff ff       	call   c0001ab2 <st_word>
c0001de7:	0f b6 d9             	movzx  ebx,cl
c0001dea:	4b                   	dec    ebx
c0001deb:	6b db 0d             	imul   ebx,ebx,0xd
c0001dee:	66 83 fe ff          	cmp    si,0xffff
c0001df2:	74 08                	je     c0001dfc <put_lfn+0x40>
c0001df4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001df7:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dfb:	43                   	inc    ebx
c0001dfc:	0f b6 85 80 01 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdfe80]
c0001e03:	0f b7 d6             	movzx  edx,si
c0001e06:	01 f8                	add    eax,edi
c0001e08:	e8 a5 fc ff ff       	call   c0001ab2 <st_word>
c0001e0d:	66 85 f6             	test   si,si
c0001e10:	75 03                	jne    c0001e15 <put_lfn+0x59>
c0001e12:	83 ce ff             	or     esi,0xffffffff
c0001e15:	45                   	inc    ebp
c0001e16:	83 fd 0d             	cmp    ebp,0xd
c0001e19:	75 d3                	jne    c0001dee <put_lfn+0x32>
c0001e1b:	66 46                	inc    si
c0001e1d:	74 0a                	je     c0001e29 <put_lfn+0x6d>
c0001e1f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e22:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e27:	75 09                	jne    c0001e32 <put_lfn+0x76>
c0001e29:	88 c8                	mov    al,cl
c0001e2b:	83 c8 40             	or     eax,0x40
c0001e2e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e32:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e36:	88 07                	mov    BYTE PTR [edi],al
c0001e38:	83 c4 08             	add    esp,0x8
c0001e3b:	5b                   	pop    ebx
c0001e3c:	5e                   	pop    esi
c0001e3d:	5f                   	pop    edi
c0001e3e:	5d                   	pop    ebp
c0001e3f:	c3                   	ret    

c0001e40 <gen_numname>:
c0001e40:	57                   	push   edi
c0001e41:	89 cf                	mov    edi,ecx
c0001e43:	56                   	push   esi
c0001e44:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e49:	53                   	push   ebx
c0001e4a:	89 c6                	mov    esi,eax
c0001e4c:	83 ec 10             	sub    esp,0x10
c0001e4f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e53:	e8 67 fc ff ff       	call   c0001abf <mem_cpy>
c0001e58:	83 fb 05             	cmp    ebx,0x5
c0001e5b:	76 2d                	jbe    c0001e8a <gen_numname+0x4a>
c0001e5d:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e60:	66 85 c0             	test   ax,ax
c0001e63:	74 25                	je     c0001e8a <gen_numname+0x4a>
c0001e65:	83 c7 02             	add    edi,0x2
c0001e68:	ba 10 00 00 00       	mov    edx,0x10
c0001e6d:	01 db                	add    ebx,ebx
c0001e6f:	89 c1                	mov    ecx,eax
c0001e71:	66 d1 e8             	shr    ax,1
c0001e74:	83 e1 01             	and    ecx,0x1
c0001e77:	01 cb                	add    ebx,ecx
c0001e79:	0f ba e3 10          	bt     ebx,0x10
c0001e7d:	73 06                	jae    c0001e85 <gen_numname+0x45>
c0001e7f:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e85:	4a                   	dec    edx
c0001e86:	75 e5                	jne    c0001e6d <gen_numname+0x2d>
c0001e88:	eb d3                	jmp    c0001e5d <gen_numname+0x1d>
c0001e8a:	b8 07 00 00 00       	mov    eax,0x7
c0001e8f:	88 d9                	mov    cl,bl
c0001e91:	83 e1 0f             	and    ecx,0xf
c0001e94:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e97:	80 fa 39             	cmp    dl,0x39
c0001e9a:	76 03                	jbe    c0001e9f <gen_numname+0x5f>
c0001e9c:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e9f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001ea2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001ea6:	89 da                	mov    edx,ebx
c0001ea8:	c1 ea 04             	shr    edx,0x4
c0001eab:	83 fb 0f             	cmp    ebx,0xf
c0001eae:	76 06                	jbe    c0001eb6 <gen_numname+0x76>
c0001eb0:	89 c8                	mov    eax,ecx
c0001eb2:	89 d3                	mov    ebx,edx
c0001eb4:	eb d9                	jmp    c0001e8f <gen_numname+0x4f>
c0001eb6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ebb:	31 d2                	xor    edx,edx
c0001ebd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001ec0:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ec3:	39 ca                	cmp    edx,ecx
c0001ec5:	73 18                	jae    c0001edf <gen_numname+0x9f>
c0001ec7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001eca:	3c 20                	cmp    al,0x20
c0001ecc:	74 11                	je     c0001edf <gen_numname+0x9f>
c0001ece:	e8 41 fc ff ff       	call   c0001b14 <dbc_1st>
c0001ed3:	85 c0                	test   eax,eax
c0001ed5:	74 05                	je     c0001edc <gen_numname+0x9c>
c0001ed7:	39 d3                	cmp    ebx,edx
c0001ed9:	74 04                	je     c0001edf <gen_numname+0x9f>
c0001edb:	42                   	inc    edx
c0001edc:	42                   	inc    edx
c0001edd:	eb e1                	jmp    c0001ec0 <gen_numname+0x80>
c0001edf:	b0 20                	mov    al,0x20
c0001ee1:	83 f9 07             	cmp    ecx,0x7
c0001ee4:	77 05                	ja     c0001eeb <gen_numname+0xab>
c0001ee6:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001eea:	41                   	inc    ecx
c0001eeb:	42                   	inc    edx
c0001eec:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001ef0:	83 fa 07             	cmp    edx,0x7
c0001ef3:	76 ea                	jbe    c0001edf <gen_numname+0x9f>
c0001ef5:	83 c4 10             	add    esp,0x10
c0001ef8:	5b                   	pop    ebx
c0001ef9:	5e                   	pop    esi
c0001efa:	5f                   	pop    edi
c0001efb:	c3                   	ret    

c0001efc <sum_sfn>:
c0001efc:	31 c9                	xor    ecx,ecx
c0001efe:	31 d2                	xor    edx,edx
c0001f00:	d0 ca                	ror    dl,1
c0001f02:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f05:	41                   	inc    ecx
c0001f06:	83 f9 0b             	cmp    ecx,0xb
c0001f09:	75 f5                	jne    c0001f00 <sum_sfn+0x4>
c0001f0b:	88 d0                	mov    al,dl
c0001f0d:	c3                   	ret    

c0001f0e <xdir_sum>:
c0001f0e:	56                   	push   esi
c0001f0f:	31 c9                	xor    ecx,ecx
c0001f11:	53                   	push   ebx
c0001f12:	31 d2                	xor    edx,edx
c0001f14:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f18:	43                   	inc    ebx
c0001f19:	c1 e3 05             	shl    ebx,0x5
c0001f1c:	83 fa 02             	cmp    edx,0x2
c0001f1f:	74 0b                	je     c0001f2c <xdir_sum+0x1e>
c0001f21:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f25:	66 d1 c9             	ror    cx,1
c0001f28:	01 f1                	add    ecx,esi
c0001f2a:	eb 05                	jmp    c0001f31 <xdir_sum+0x23>
c0001f2c:	ba 03 00 00 00       	mov    edx,0x3
c0001f31:	42                   	inc    edx
c0001f32:	39 d3                	cmp    ebx,edx
c0001f34:	77 e6                	ja     c0001f1c <xdir_sum+0xe>
c0001f36:	89 c8                	mov    eax,ecx
c0001f38:	5b                   	pop    ebx
c0001f39:	5e                   	pop    esi
c0001f3a:	c3                   	ret    

c0001f3b <xsum32>:
c0001f3b:	d1 ca                	ror    edx,1
c0001f3d:	0f b6 c0             	movzx  eax,al
c0001f40:	01 d0                	add    eax,edx
c0001f42:	c3                   	ret    

c0001f43 <get_xfileinfo>:
c0001f43:	55                   	push   ebp
c0001f44:	31 c9                	xor    ecx,ecx
c0001f46:	57                   	push   edi
c0001f47:	bd 40 00 00 00       	mov    ebp,0x40
c0001f4c:	56                   	push   esi
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	53                   	push   ebx
c0001f50:	89 c6                	mov    esi,eax
c0001f52:	83 ec 0c             	sub    esp,0xc
c0001f55:	89 d3                	mov    ebx,edx
c0001f57:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f5e:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f62:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f65:	76 6d                	jbe    c0001fd4 <get_xfileinfo+0x91>
c0001f67:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f6d:	76 0b                	jbe    c0001f7a <get_xfileinfo+0x37>
c0001f6f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f73:	bf 01 00 00 00       	mov    edi,0x1
c0001f78:	eb 63                	jmp    c0001fdd <get_xfileinfo+0x9a>
c0001f7a:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f80:	75 03                	jne    c0001f85 <get_xfileinfo+0x42>
c0001f82:	83 c5 02             	add    ebp,0x2
c0001f85:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f88:	83 c5 02             	add    ebp,0x2
c0001f8b:	e8 b0 fa ff ff       	call   c0001a40 <ld_word>
c0001f90:	ff 04 24             	inc    DWORD PTR [esp]
c0001f93:	66 85 c9             	test   cx,cx
c0001f96:	75 0d                	jne    c0001fa5 <get_xfileinfo+0x62>
c0001f98:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f9e:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fa3:	76 2b                	jbe    c0001fd0 <get_xfileinfo+0x8d>
c0001fa5:	c1 e1 10             	shl    ecx,0x10
c0001fa8:	ba ff 00 00 00       	mov    edx,0xff
c0001fad:	0f b7 c0             	movzx  eax,ax
c0001fb0:	29 fa                	sub    edx,edi
c0001fb2:	09 c8                	or     eax,ecx
c0001fb4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fb8:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fbc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fc0:	e8 1b fc ff ff       	call   c0001be0 <put_utf>
c0001fc5:	84 c0                	test   al,al
c0001fc7:	74 a6                	je     c0001f6f <get_xfileinfo+0x2c>
c0001fc9:	0f b6 c0             	movzx  eax,al
c0001fcc:	01 c7                	add    edi,eax
c0001fce:	31 c0                	xor    eax,eax
c0001fd0:	89 c1                	mov    ecx,eax
c0001fd2:	eb 8a                	jmp    c0001f5e <get_xfileinfo+0x1b>
c0001fd4:	85 ff                	test   edi,edi
c0001fd6:	74 97                	je     c0001f6f <get_xfileinfo+0x2c>
c0001fd8:	66 85 c9             	test   cx,cx
c0001fdb:	75 92                	jne    c0001f6f <get_xfileinfo+0x2c>
c0001fdd:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fe2:	31 c0                	xor    eax,eax
c0001fe4:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fe8:	31 d2                	xor    edx,edx
c0001fea:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fed:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001ff0:	80 e1 10             	and    cl,0x10
c0001ff3:	75 08                	jne    c0001ffd <get_xfileinfo+0xba>
c0001ff5:	8d 46 38             	lea    eax,[esi+0x38]
c0001ff8:	e8 68 fa ff ff       	call   c0001a65 <ld_qword>
c0001ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0001fff:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002002:	8d 46 0c             	lea    eax,[esi+0xc]
c0002005:	e8 36 fa ff ff       	call   c0001a40 <ld_word>
c000200a:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000200e:	8d 46 0e             	lea    eax,[esi+0xe]
c0002011:	e8 2a fa ff ff       	call   c0001a40 <ld_word>
c0002016:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000201a:	83 c4 0c             	add    esp,0xc
c000201d:	5b                   	pop    ebx
c000201e:	5e                   	pop    esi
c000201f:	5f                   	pop    edi
c0002020:	5d                   	pop    ebp
c0002021:	c3                   	ret    

c0002022 <get_ldnumber>:
c0002022:	8b 10                	mov    edx,DWORD PTR [eax]
c0002024:	85 d2                	test   edx,edx
c0002026:	74 14                	je     c000203c <get_ldnumber+0x1a>
c0002028:	56                   	push   esi
c0002029:	53                   	push   ebx
c000202a:	89 d3                	mov    ebx,edx
c000202c:	43                   	inc    ebx
c000202d:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002030:	80 f9 1f             	cmp    cl,0x1f
c0002033:	76 0d                	jbe    c0002042 <get_ldnumber+0x20>
c0002035:	80 f9 3a             	cmp    cl,0x3a
c0002038:	75 f2                	jne    c000202c <get_ldnumber+0xa>
c000203a:	eb 0a                	jmp    c0002046 <get_ldnumber+0x24>
c000203c:	83 c9 ff             	or     ecx,0xffffffff
c000203f:	89 c8                	mov    eax,ecx
c0002041:	c3                   	ret    
c0002042:	31 c9                	xor    ecx,ecx
c0002044:	eb 24                	jmp    c000206a <get_ldnumber+0x48>
c0002046:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002049:	8d 4e d0             	lea    ecx,[esi-0x30]
c000204c:	80 f9 09             	cmp    cl,0x9
c000204f:	77 16                	ja     c0002067 <get_ldnumber+0x45>
c0002051:	83 c2 02             	add    edx,0x2
c0002054:	83 c9 ff             	or     ecx,0xffffffff
c0002057:	39 d3                	cmp    ebx,edx
c0002059:	75 0f                	jne    c000206a <get_ldnumber+0x48>
c000205b:	89 f2                	mov    edx,esi
c000205d:	89 18                	mov    DWORD PTR [eax],ebx
c000205f:	0f be ca             	movsx  ecx,dl
c0002062:	83 e9 30             	sub    ecx,0x30
c0002065:	eb 03                	jmp    c000206a <get_ldnumber+0x48>
c0002067:	83 c9 ff             	or     ecx,0xffffffff
c000206a:	89 c8                	mov    eax,ecx
c000206c:	5b                   	pop    ebx
c000206d:	5e                   	pop    esi
c000206e:	c3                   	ret    

c000206f <crc32>:
c000206f:	56                   	push   esi
c0002070:	89 d6                	mov    esi,edx
c0002072:	53                   	push   ebx
c0002073:	b2 01                	mov    dl,0x1
c0002075:	bb 08 00 00 00       	mov    ebx,0x8
c000207a:	89 f1                	mov    ecx,esi
c000207c:	84 d1                	test   cl,dl
c000207e:	0f 95 c1             	setne  cl
c0002081:	0f b6 c9             	movzx  ecx,cl
c0002084:	31 c1                	xor    ecx,eax
c0002086:	89 c8                	mov    eax,ecx
c0002088:	d1 e8                	shr    eax,1
c000208a:	80 e1 01             	and    cl,0x1
c000208d:	74 05                	je     c0002094 <crc32+0x25>
c000208f:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002094:	d1 e2                	shl    edx,1
c0002096:	4b                   	dec    ebx
c0002097:	75 e1                	jne    c000207a <crc32+0xb>
c0002099:	5b                   	pop    ebx
c000209a:	5e                   	pop    esi
c000209b:	c3                   	ret    

c000209c <test_gpt_header>:
c000209c:	55                   	push   ebp
c000209d:	b9 10 00 00 00       	mov    ecx,0x10
c00020a2:	57                   	push   edi
c00020a3:	ba 80 00 02 c0       	mov    edx,0xc0020080
c00020a8:	56                   	push   esi
c00020a9:	31 ff                	xor    edi,edi
c00020ab:	53                   	push   ebx
c00020ac:	89 c3                	mov    ebx,eax
c00020ae:	e8 2c fa ff ff       	call   c0001adf <mem_cmp>
c00020b3:	85 c0                	test   eax,eax
c00020b5:	75 55                	jne    c000210c <test_gpt_header+0x70>
c00020b7:	89 c7                	mov    edi,eax
c00020b9:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020be:	83 ce ff             	or     esi,0xffffffff
c00020c1:	31 d2                	xor    edx,edx
c00020c3:	83 fd 03             	cmp    ebp,0x3
c00020c6:	76 05                	jbe    c00020cd <test_gpt_header+0x31>
c00020c8:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020cd:	89 f0                	mov    eax,esi
c00020cf:	45                   	inc    ebp
c00020d0:	e8 9a ff ff ff       	call   c000206f <crc32>
c00020d5:	83 fd 4c             	cmp    ebp,0x4c
c00020d8:	89 c6                	mov    esi,eax
c00020da:	75 e5                	jne    c00020c1 <test_gpt_header+0x25>
c00020dc:	8d 43 10             	lea    eax,[ebx+0x10]
c00020df:	f7 d6                	not    esi
c00020e1:	e8 67 f9 ff ff       	call   c0001a4d <ld_dword>
c00020e6:	39 c6                	cmp    esi,eax
c00020e8:	75 22                	jne    c000210c <test_gpt_header+0x70>
c00020ea:	8d 43 54             	lea    eax,[ebx+0x54]
c00020ed:	e8 5b f9 ff ff       	call   c0001a4d <ld_dword>
c00020f2:	83 c0 80             	add    eax,0xffffff80
c00020f5:	75 15                	jne    c000210c <test_gpt_header+0x70>
c00020f7:	8d 43 50             	lea    eax,[ebx+0x50]
c00020fa:	e8 4e f9 ff ff       	call   c0001a4d <ld_dword>
c00020ff:	3d 80 00 00 00       	cmp    eax,0x80
c0002104:	0f 96 c0             	setbe  al
c0002107:	0f b6 c0             	movzx  eax,al
c000210a:	89 c7                	mov    edi,eax
c000210c:	5b                   	pop    ebx
c000210d:	89 f8                	mov    eax,edi
c000210f:	5e                   	pop    esi
c0002110:	5f                   	pop    edi
c0002111:	5d                   	pop    ebp
c0002112:	c3                   	ret    

c0002113 <make_rand>:
c0002113:	56                   	push   esi
c0002114:	85 c0                	test   eax,eax
c0002116:	53                   	push   ebx
c0002117:	75 05                	jne    c000211e <make_rand+0xb>
c0002119:	b8 01 00 00 00       	mov    eax,0x1
c000211e:	01 d1                	add    ecx,edx
c0002120:	bb 08 00 00 00       	mov    ebx,0x8
c0002125:	89 c6                	mov    esi,eax
c0002127:	d1 e8                	shr    eax,1
c0002129:	83 e6 01             	and    esi,0x1
c000212c:	85 f6                	test   esi,esi
c000212e:	74 05                	je     c0002135 <make_rand+0x22>
c0002130:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002135:	4b                   	dec    ebx
c0002136:	75 ed                	jne    c0002125 <make_rand+0x12>
c0002138:	42                   	inc    edx
c0002139:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000213c:	39 ca                	cmp    edx,ecx
c000213e:	75 e0                	jne    c0002120 <make_rand+0xd>
c0002140:	5b                   	pop    ebx
c0002141:	5e                   	pop    esi
c0002142:	c3                   	ret    

c0002143 <validate>:
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d6                	mov    esi,edx
c0002147:	51                   	push   ecx
c0002148:	85 c0                	test   eax,eax
c000214a:	75 09                	jne    c0002155 <validate+0x12>
c000214c:	b8 09 00 00 00       	mov    eax,0x9
c0002151:	31 c9                	xor    ecx,ecx
c0002153:	eb 2f                	jmp    c0002184 <validate+0x41>
c0002155:	89 c3                	mov    ebx,eax
c0002157:	8b 00                	mov    eax,DWORD PTR [eax]
c0002159:	85 c0                	test   eax,eax
c000215b:	74 ef                	je     c000214c <validate+0x9>
c000215d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002160:	74 ea                	je     c000214c <validate+0x9>
c0002162:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002166:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000216a:	75 e0                	jne    c000214c <validate+0x9>
c000216c:	83 ec 0c             	sub    esp,0xc
c000216f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002173:	50                   	push   eax
c0002174:	e8 76 f8 ff ff       	call   c00019ef <disk_status>
c0002179:	83 c4 10             	add    esp,0x10
c000217c:	a8 01                	test   al,0x1
c000217e:	75 cc                	jne    c000214c <validate+0x9>
c0002180:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002182:	31 c0                	xor    eax,eax
c0002184:	89 0e                	mov    DWORD PTR [esi],ecx
c0002186:	5a                   	pop    edx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <sync_window>:
c000218a:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000218e:	0f 84 85 00 00 00    	je     c0002219 <sync_window+0x8f>
c0002194:	55                   	push   ebp
c0002195:	8d 68 54             	lea    ebp,[eax+0x54]
c0002198:	57                   	push   edi
c0002199:	56                   	push   esi
c000219a:	53                   	push   ebx
c000219b:	89 c3                	mov    ebx,eax
c000219d:	83 ec 28             	sub    esp,0x28
c00021a0:	6a 01                	push   0x1
c00021a2:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021a5:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021a8:	55                   	push   ebp
c00021a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021ad:	50                   	push   eax
c00021ae:	e8 58 f8 ff ff       	call   c0001a0b <disk_write>
c00021b3:	83 c4 20             	add    esp,0x20
c00021b6:	ba 01 00 00 00       	mov    edx,0x1
c00021bb:	85 c0                	test   eax,eax
c00021bd:	75 50                	jne    c000220f <sync_window+0x85>
c00021bf:	31 ff                	xor    edi,edi
c00021c1:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021c4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021c8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021cc:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021cf:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021d2:	89 c6                	mov    esi,eax
c00021d4:	89 d7                	mov    edi,edx
c00021d6:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021d9:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021dd:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021e0:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021e4:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021e8:	73 23                	jae    c000220d <sync_window+0x83>
c00021ea:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021ee:	75 1d                	jne    c000220d <sync_window+0x83>
c00021f0:	83 ec 0c             	sub    esp,0xc
c00021f3:	6a 01                	push   0x1
c00021f5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021f9:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021fd:	52                   	push   edx
c00021fe:	50                   	push   eax
c00021ff:	55                   	push   ebp
c0002200:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002204:	50                   	push   eax
c0002205:	e8 01 f8 ff ff       	call   c0001a0b <disk_write>
c000220a:	83 c4 20             	add    esp,0x20
c000220d:	31 d2                	xor    edx,edx
c000220f:	83 c4 1c             	add    esp,0x1c
c0002212:	89 d0                	mov    eax,edx
c0002214:	5b                   	pop    ebx
c0002215:	5e                   	pop    esi
c0002216:	5f                   	pop    edi
c0002217:	5d                   	pop    ebp
c0002218:	c3                   	ret    
c0002219:	31 d2                	xor    edx,edx
c000221b:	89 d0                	mov    eax,edx
c000221d:	c3                   	ret    

c000221e <move_window>:
c000221e:	56                   	push   esi
c000221f:	53                   	push   ebx
c0002220:	89 c3                	mov    ebx,eax
c0002222:	83 ec 14             	sub    esp,0x14
c0002225:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002228:	75 07                	jne    c0002231 <move_window+0x13>
c000222a:	31 f6                	xor    esi,esi
c000222c:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000222f:	74 59                	je     c000228a <move_window+0x6c>
c0002231:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002235:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002239:	89 d8                	mov    eax,ebx
c000223b:	e8 4a ff ff ff       	call   c000218a <sync_window>
c0002240:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002244:	89 c6                	mov    esi,eax
c0002246:	85 c0                	test   eax,eax
c0002248:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000224c:	75 3c                	jne    c000228a <move_window+0x6c>
c000224e:	83 ec 0c             	sub    esp,0xc
c0002251:	8d 43 54             	lea    eax,[ebx+0x54]
c0002254:	6a 01                	push   0x1
c0002256:	51                   	push   ecx
c0002257:	52                   	push   edx
c0002258:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000225c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002260:	50                   	push   eax
c0002261:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002265:	50                   	push   eax
c0002266:	e8 8a f7 ff ff       	call   c00019f5 <disk_read>
c000226b:	83 c4 20             	add    esp,0x20
c000226e:	85 c0                	test   eax,eax
c0002270:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002274:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002278:	74 0a                	je     c0002284 <move_window+0x66>
c000227a:	83 ca ff             	or     edx,0xffffffff
c000227d:	be 01 00 00 00       	mov    esi,0x1
c0002282:	89 d1                	mov    ecx,edx
c0002284:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002287:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000228a:	89 f0                	mov    eax,esi
c000228c:	83 c4 14             	add    esp,0x14
c000228f:	5b                   	pop    ebx
c0002290:	5e                   	pop    esi
c0002291:	c3                   	ret    

c0002292 <check_fs>:
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	83 ec 08             	sub    esp,0x8
c0002298:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000229c:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022a3:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022aa:	e8 6f ff ff ff       	call   c000221e <move_window>
c00022af:	ba 04 00 00 00       	mov    edx,0x4
c00022b4:	85 c0                	test   eax,eax
c00022b6:	0f 85 89 00 00 00    	jne    c0002345 <check_fs+0xb3>
c00022bc:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022c2:	e8 79 f7 ff ff       	call   c0001a40 <ld_word>
c00022c7:	ba 03 00 00 00       	mov    edx,0x3
c00022cc:	66 3d 55 aa          	cmp    ax,0xaa55
c00022d0:	75 73                	jne    c0002345 <check_fs+0xb3>
c00022d2:	ba a0 01 02 c0       	mov    edx,0xc00201a0
c00022d7:	8d 43 54             	lea    eax,[ebx+0x54]
c00022da:	b9 0b 00 00 00       	mov    ecx,0xb
c00022df:	e8 fb f7 ff ff       	call   c0001adf <mem_cmp>
c00022e4:	ba 01 00 00 00       	mov    edx,0x1
c00022e9:	85 c0                	test   eax,eax
c00022eb:	74 58                	je     c0002345 <check_fs+0xb3>
c00022ed:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022f0:	8d 50 18             	lea    edx,[eax+0x18]
c00022f3:	80 fa 01             	cmp    dl,0x1
c00022f6:	76 09                	jbe    c0002301 <check_fs+0x6f>
c00022f8:	ba 02 00 00 00       	mov    edx,0x2
c00022fd:	3c eb                	cmp    al,0xeb
c00022ff:	75 44                	jne    c0002345 <check_fs+0xb3>
c0002301:	ba 0c 2e 02 c0       	mov    edx,0xc0022e0c
c0002306:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000230c:	b9 03 00 00 00       	mov    ecx,0x3
c0002311:	e8 c9 f7 ff ff       	call   c0001adf <mem_cmp>
c0002316:	31 d2                	xor    edx,edx
c0002318:	85 c0                	test   eax,eax
c000231a:	74 29                	je     c0002345 <check_fs+0xb3>
c000231c:	ba ac 01 02 c0       	mov    edx,0xc00201ac
c0002321:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002327:	b9 05 00 00 00       	mov    ecx,0x5
c000232c:	e8 ae f7 ff ff       	call   c0001adf <mem_cmp>
c0002331:	31 d2                	xor    edx,edx
c0002333:	85 c0                	test   eax,eax
c0002335:	74 0e                	je     c0002345 <check_fs+0xb3>
c0002337:	31 d2                	xor    edx,edx
c0002339:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002340:	0f 95 c2             	setne  dl
c0002343:	01 d2                	add    edx,edx
c0002345:	89 d0                	mov    eax,edx
c0002347:	83 c4 08             	add    esp,0x8
c000234a:	5b                   	pop    ebx
c000234b:	c3                   	ret    

c000234c <find_volume>:
c000234c:	55                   	push   ebp
c000234d:	31 c9                	xor    ecx,ecx
c000234f:	57                   	push   edi
c0002350:	56                   	push   esi
c0002351:	89 d6                	mov    esi,edx
c0002353:	53                   	push   ebx
c0002354:	31 d2                	xor    edx,edx
c0002356:	83 ec 3c             	sub    esp,0x3c
c0002359:	89 c3                	mov    ebx,eax
c000235b:	e8 32 ff ff ff       	call   c0002292 <check_fs>
c0002360:	83 f8 02             	cmp    eax,0x2
c0002363:	74 0e                	je     c0002373 <find_volume+0x27>
c0002365:	0f 87 5d 01 00 00    	ja     c00024c8 <find_volume+0x17c>
c000236b:	85 f6                	test   esi,esi
c000236d:	0f 84 55 01 00 00    	je     c00024c8 <find_volume+0x17c>
c0002373:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000237a:	0f 85 dd 00 00 00    	jne    c000245d <find_volume+0x111>
c0002380:	31 c9                	xor    ecx,ecx
c0002382:	ba 01 00 00 00       	mov    edx,0x1
c0002387:	89 d8                	mov    eax,ebx
c0002389:	e8 90 fe ff ff       	call   c000221e <move_window>
c000238e:	85 c0                	test   eax,eax
c0002390:	74 0a                	je     c000239c <find_volume+0x50>
c0002392:	b8 04 00 00 00       	mov    eax,0x4
c0002397:	e9 2c 01 00 00       	jmp    c00024c8 <find_volume+0x17c>
c000239c:	8d 6b 54             	lea    ebp,[ebx+0x54]
c000239f:	89 e8                	mov    eax,ebp
c00023a1:	e8 f6 fc ff ff       	call   c000209c <test_gpt_header>
c00023a6:	85 c0                	test   eax,eax
c00023a8:	75 0a                	jne    c00023b4 <find_volume+0x68>
c00023aa:	b8 03 00 00 00       	mov    eax,0x3
c00023af:	e9 14 01 00 00       	jmp    c00024c8 <find_volume+0x17c>
c00023b4:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023ba:	e8 8e f6 ff ff       	call   c0001a4d <ld_dword>
c00023bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023c3:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023c9:	e8 97 f6 ff ff       	call   c0001a65 <ld_qword>
c00023ce:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023da:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023de:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023e6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023ea:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023ee:	74 ba                	je     c00023aa <find_volume+0x5e>
c00023f0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023f4:	31 c9                	xor    ecx,ecx
c00023f6:	c1 e7 07             	shl    edi,0x7
c00023f9:	89 d8                	mov    eax,ebx
c00023fb:	89 fa                	mov    edx,edi
c00023fd:	c1 ea 09             	shr    edx,0x9
c0002400:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002404:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002408:	e8 11 fe ff ff       	call   c000221e <move_window>
c000240d:	85 c0                	test   eax,eax
c000240f:	75 81                	jne    c0002392 <find_volume+0x46>
c0002411:	81 e7 80 01 00 00    	and    edi,0x180
c0002417:	b9 10 00 00 00       	mov    ecx,0x10
c000241c:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002420:	ba 90 01 02 c0       	mov    edx,0xc0020190
c0002425:	e8 b5 f6 ff ff       	call   c0001adf <mem_cmp>
c000242a:	85 c0                	test   eax,eax
c000242c:	75 29                	jne    c0002457 <find_volume+0x10b>
c000242e:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002432:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002436:	e8 2a f6 ff ff       	call   c0001a65 <ld_qword>
c000243b:	89 d1                	mov    ecx,edx
c000243d:	89 c2                	mov    edx,eax
c000243f:	89 d8                	mov    eax,ebx
c0002441:	e8 4c fe ff ff       	call   c0002292 <check_fs>
c0002446:	85 f6                	test   esi,esi
c0002448:	75 07                	jne    c0002451 <find_volume+0x105>
c000244a:	83 f8 01             	cmp    eax,0x1
c000244d:	77 08                	ja     c0002457 <find_volume+0x10b>
c000244f:	eb 77                	jmp    c00024c8 <find_volume+0x17c>
c0002451:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002455:	74 71                	je     c00024c8 <find_volume+0x17c>
c0002457:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000245b:	eb 89                	jmp    c00023e6 <find_volume+0x9a>
c000245d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002461:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002467:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000246d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002471:	89 cd                	mov    ebp,ecx
c0002473:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002477:	89 f8                	mov    eax,edi
c0002479:	83 c7 10             	add    edi,0x10
c000247c:	e8 cc f5 ff ff       	call   c0001a4d <ld_dword>
c0002481:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002485:	89 01                	mov    DWORD PTR [ecx],eax
c0002487:	83 c1 04             	add    ecx,0x4
c000248a:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000248e:	75 e3                	jne    c0002473 <find_volume+0x127>
c0002490:	31 ff                	xor    edi,edi
c0002492:	85 f6                	test   esi,esi
c0002494:	74 03                	je     c0002499 <find_volume+0x14d>
c0002496:	8d 7e ff             	lea    edi,[esi-0x1]
c0002499:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000249d:	85 d2                	test   edx,edx
c000249f:	74 14                	je     c00024b5 <find_volume+0x169>
c00024a1:	31 c9                	xor    ecx,ecx
c00024a3:	89 d8                	mov    eax,ebx
c00024a5:	e8 e8 fd ff ff       	call   c0002292 <check_fs>
c00024aa:	83 f8 01             	cmp    eax,0x1
c00024ad:	76 19                	jbe    c00024c8 <find_volume+0x17c>
c00024af:	85 f6                	test   esi,esi
c00024b1:	74 0f                	je     c00024c2 <find_volume+0x176>
c00024b3:	eb 13                	jmp    c00024c8 <find_volume+0x17c>
c00024b5:	85 f6                	test   esi,esi
c00024b7:	0f 85 ed fe ff ff    	jne    c00023aa <find_volume+0x5e>
c00024bd:	b8 03 00 00 00       	mov    eax,0x3
c00024c2:	47                   	inc    edi
c00024c3:	83 ff 03             	cmp    edi,0x3
c00024c6:	76 d1                	jbe    c0002499 <find_volume+0x14d>
c00024c8:	83 c4 3c             	add    esp,0x3c
c00024cb:	5b                   	pop    ebx
c00024cc:	5e                   	pop    esi
c00024cd:	5f                   	pop    edi
c00024ce:	5d                   	pop    ebp
c00024cf:	c3                   	ret    

c00024d0 <mount_volume>:
c00024d0:	55                   	push   ebp
c00024d1:	57                   	push   edi
c00024d2:	89 cf                	mov    edi,ecx
c00024d4:	56                   	push   esi
c00024d5:	53                   	push   ebx
c00024d6:	bb 0b 00 00 00       	mov    ebx,0xb
c00024db:	83 ec 3c             	sub    esp,0x3c
c00024de:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024e8:	e8 35 fb ff ff       	call   c0002022 <get_ldnumber>
c00024ed:	85 c0                	test   eax,eax
c00024ef:	0f 88 3a 05 00 00    	js     c0002a2f <mount_volume+0x55f>
c00024f5:	8b 2c 85 80 42 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdbd80]
c00024fc:	89 c6                	mov    esi,eax
c00024fe:	bb 0c 00 00 00       	mov    ebx,0xc
c0002503:	85 ed                	test   ebp,ebp
c0002505:	0f 84 24 05 00 00    	je     c0002a2f <mount_volume+0x55f>
c000250b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000250f:	83 e7 fe             	and    edi,0xfffffffe
c0002512:	89 2a                	mov    DWORD PTR [edx],ebp
c0002514:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002518:	74 32                	je     c000254c <mount_volume+0x7c>
c000251a:	83 ec 0c             	sub    esp,0xc
c000251d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002521:	50                   	push   eax
c0002522:	e8 c8 f4 ff ff       	call   c00019ef <disk_status>
c0002527:	83 c4 10             	add    esp,0x10
c000252a:	a8 01                	test   al,0x1
c000252c:	75 1e                	jne    c000254c <mount_volume+0x7c>
c000252e:	31 db                	xor    ebx,ebx
c0002530:	89 f9                	mov    ecx,edi
c0002532:	84 c9                	test   cl,cl
c0002534:	0f 84 f5 04 00 00    	je     c0002a2f <mount_volume+0x55f>
c000253a:	a8 04                	test   al,0x4
c000253c:	0f 84 ed 04 00 00    	je     c0002a2f <mount_volume+0x55f>
c0002542:	bb 0a 00 00 00       	mov    ebx,0xa
c0002547:	e9 e3 04 00 00       	jmp    c0002a2f <mount_volume+0x55f>
c000254c:	83 ec 0c             	sub    esp,0xc
c000254f:	89 f0                	mov    eax,esi
c0002551:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002555:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002558:	0f b6 f0             	movzx  esi,al
c000255b:	bb 03 00 00 00       	mov    ebx,0x3
c0002560:	56                   	push   esi
c0002561:	e8 8c f4 ff ff       	call   c00019f2 <disk_initialize>
c0002566:	83 c4 10             	add    esp,0x10
c0002569:	a8 01                	test   al,0x1
c000256b:	0f 85 be 04 00 00    	jne    c0002a2f <mount_volume+0x55f>
c0002571:	89 f9                	mov    ecx,edi
c0002573:	84 c9                	test   cl,cl
c0002575:	74 04                	je     c000257b <mount_volume+0xab>
c0002577:	a8 04                	test   al,0x4
c0002579:	75 c7                	jne    c0002542 <mount_volume+0x72>
c000257b:	31 d2                	xor    edx,edx
c000257d:	89 e8                	mov    eax,ebp
c000257f:	e8 c8 fd ff ff       	call   c000234c <find_volume>
c0002584:	83 f8 04             	cmp    eax,0x4
c0002587:	75 0a                	jne    c0002593 <mount_volume+0xc3>
c0002589:	bb 01 00 00 00       	mov    ebx,0x1
c000258e:	e9 9c 04 00 00       	jmp    c0002a2f <mount_volume+0x55f>
c0002593:	83 f8 01             	cmp    eax,0x1
c0002596:	76 0a                	jbe    c00025a2 <mount_volume+0xd2>
c0002598:	bb 0d 00 00 00       	mov    ebx,0xd
c000259d:	e9 8d 04 00 00       	jmp    c0002a2f <mount_volume+0x55f>
c00025a2:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025a5:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025b0:	75 17                	jne    c00025c9 <mount_volume+0xf9>
c00025b2:	b8 0b 00 00 00       	mov    eax,0xb
c00025b7:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025bc:	75 da                	jne    c0002598 <mount_volume+0xc8>
c00025be:	40                   	inc    eax
c00025bf:	83 f8 40             	cmp    eax,0x40
c00025c2:	75 f3                	jne    c00025b7 <mount_volume+0xe7>
c00025c4:	e9 5a 02 00 00       	jmp    c0002823 <mount_volume+0x353>
c00025c9:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025cc:	e8 6f f4 ff ff       	call   c0001a40 <ld_word>
c00025d1:	66 3d 00 02          	cmp    ax,0x200
c00025d5:	75 c1                	jne    c0002598 <mount_volume+0xc8>
c00025d7:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025da:	e8 61 f4 ff ff       	call   c0001a40 <ld_word>
c00025df:	0f b7 c0             	movzx  eax,ax
c00025e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025e6:	85 c0                	test   eax,eax
c00025e8:	75 0c                	jne    c00025f6 <mount_volume+0x126>
c00025ea:	8d 45 78             	lea    eax,[ebp+0x78]
c00025ed:	e8 5b f4 ff ff       	call   c0001a4d <ld_dword>
c00025f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025fa:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025fd:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002600:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002604:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002607:	48                   	dec    eax
c0002608:	3c 01                	cmp    al,0x1
c000260a:	77 8c                	ja     c0002598 <mount_volume+0xc8>
c000260c:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002610:	89 c3                	mov    ebx,eax
c0002612:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002616:	66 85 c0             	test   ax,ax
c0002619:	0f 84 79 ff ff ff    	je     c0002598 <mount_volume+0xc8>
c000261f:	8d 40 ff             	lea    eax,[eax-0x1]
c0002622:	85 d8                	test   eax,ebx
c0002624:	0f 85 6e ff ff ff    	jne    c0002598 <mount_volume+0xc8>
c000262a:	8d 45 65             	lea    eax,[ebp+0x65]
c000262d:	e8 0e f4 ff ff       	call   c0001a40 <ld_word>
c0002632:	89 c7                	mov    edi,eax
c0002634:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002638:	a8 0f                	test   al,0xf
c000263a:	0f 85 58 ff ff ff    	jne    c0002598 <mount_volume+0xc8>
c0002640:	8d 45 67             	lea    eax,[ebp+0x67]
c0002643:	e8 f8 f3 ff ff       	call   c0001a40 <ld_word>
c0002648:	0f b7 f0             	movzx  esi,ax
c000264b:	85 f6                	test   esi,esi
c000264d:	75 0a                	jne    c0002659 <mount_volume+0x189>
c000264f:	8d 45 74             	lea    eax,[ebp+0x74]
c0002652:	e8 f6 f3 ff ff       	call   c0001a4d <ld_dword>
c0002657:	89 c6                	mov    esi,eax
c0002659:	8d 45 62             	lea    eax,[ebp+0x62]
c000265c:	e8 df f3 ff ff       	call   c0001a40 <ld_word>
c0002661:	66 85 c0             	test   ax,ax
c0002664:	0f 84 2e ff ff ff    	je     c0002598 <mount_volume+0xc8>
c000266a:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000266f:	0f b7 c8             	movzx  ecx,ax
c0002672:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002677:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000267b:	89 fa                	mov    edx,edi
c000267d:	66 c1 ea 04          	shr    dx,0x4
c0002681:	0f b7 d2             	movzx  edx,dx
c0002684:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002688:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000268b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000268f:	39 c6                	cmp    esi,eax
c0002691:	0f 82 01 ff ff ff    	jb     c0002598 <mount_volume+0xc8>
c0002697:	29 c6                	sub    esi,eax
c0002699:	31 d2                	xor    edx,edx
c000269b:	89 f0                	mov    eax,esi
c000269d:	f7 f3                	div    ebx
c000269f:	39 de                	cmp    esi,ebx
c00026a1:	0f 82 f1 fe ff ff    	jb     c0002598 <mount_volume+0xc8>
c00026a7:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026ac:	0f 87 e6 fe ff ff    	ja     c0002598 <mount_volume+0xc8>
c00026b2:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026b7:	0f 86 63 03 00 00    	jbe    c0002a20 <mount_volume+0x550>
c00026bd:	bb 03 00 00 00       	mov    ebx,0x3
c00026c2:	8d 70 02             	lea    esi,[eax+0x2]
c00026c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026cd:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026d0:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026d3:	31 d2                	xor    edx,edx
c00026d5:	89 c8                	mov    eax,ecx
c00026d7:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026da:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026de:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026e2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026e6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026ea:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026ed:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026f4:	31 d2                	xor    edx,edx
c00026f6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026fa:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026fe:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002701:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002704:	83 fb 03             	cmp    ebx,0x3
c0002707:	75 2b                	jne    c0002734 <mount_volume+0x264>
c0002709:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000270c:	e8 2f f3 ff ff       	call   c0001a40 <ld_word>
c0002711:	66 09 c7             	or     di,ax
c0002714:	0f 85 7e fe ff ff    	jne    c0002598 <mount_volume+0xc8>
c000271a:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002720:	c1 e6 02             	shl    esi,0x2
c0002723:	e8 25 f3 ff ff       	call   c0001a4d <ld_dword>
c0002728:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000272f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002732:	eb 30                	jmp    c0002764 <mount_volume+0x294>
c0002734:	66 85 ff             	test   di,di
c0002737:	0f 84 5b fe ff ff    	je     c0002598 <mount_volume+0xc8>
c000273d:	31 d2                	xor    edx,edx
c000273f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002743:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002747:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000274b:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000274e:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002751:	83 fb 02             	cmp    ebx,0x2
c0002754:	75 04                	jne    c000275a <mount_volume+0x28a>
c0002756:	01 f6                	add    esi,esi
c0002758:	eb 0a                	jmp    c0002764 <mount_volume+0x294>
c000275a:	8d 04 76             	lea    eax,[esi+esi*2]
c000275d:	83 e6 01             	and    esi,0x1
c0002760:	d1 e8                	shr    eax,1
c0002762:	01 c6                	add    esi,eax
c0002764:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000276a:	c1 ee 09             	shr    esi,0x9
c000276d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002771:	0f 87 21 fe ff ff    	ja     c0002598 <mount_volume+0xc8>
c0002777:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000277e:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002785:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002789:	83 fb 03             	cmp    ebx,0x3
c000278c:	75 7a                	jne    c0002808 <mount_volume+0x338>
c000278e:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002794:	e8 a7 f2 ff ff       	call   c0001a40 <ld_word>
c0002799:	66 48                	dec    ax
c000279b:	75 6b                	jne    c0002808 <mount_volume+0x338>
c000279d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027a5:	83 c2 01             	add    edx,0x1
c00027a8:	89 e8                	mov    eax,ebp
c00027aa:	83 d1 00             	adc    ecx,0x0
c00027ad:	e8 6c fa ff ff       	call   c000221e <move_window>
c00027b2:	85 c0                	test   eax,eax
c00027b4:	75 52                	jne    c0002808 <mount_volume+0x338>
c00027b6:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027ba:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027c0:	e8 7b f2 ff ff       	call   c0001a40 <ld_word>
c00027c5:	66 3d 55 aa          	cmp    ax,0xaa55
c00027c9:	75 3d                	jne    c0002808 <mount_volume+0x338>
c00027cb:	8d 45 54             	lea    eax,[ebp+0x54]
c00027ce:	e8 7a f2 ff ff       	call   c0001a4d <ld_dword>
c00027d3:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027d8:	75 2e                	jne    c0002808 <mount_volume+0x338>
c00027da:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027e0:	e8 68 f2 ff ff       	call   c0001a4d <ld_dword>
c00027e5:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027ea:	75 1c                	jne    c0002808 <mount_volume+0x338>
c00027ec:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027f2:	e8 56 f2 ff ff       	call   c0001a4d <ld_dword>
c00027f7:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027fa:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002800:	e8 48 f2 ff ff       	call   c0001a4d <ld_dword>
c0002805:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002808:	66 a1 60 42 02 c0    	mov    ax,ds:0xc0024260
c000280e:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002811:	40                   	inc    eax
c0002812:	31 db                	xor    ebx,ebx
c0002814:	66 a3 60 42 02 c0    	mov    ds:0xc0024260,ax
c000281a:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000281e:	e9 0c 02 00 00       	jmp    c0002a2f <mount_volume+0x55f>
c0002823:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002829:	e8 12 f2 ff ff       	call   c0001a40 <ld_word>
c000282e:	66 3d 00 01          	cmp    ax,0x100
c0002832:	0f 85 60 fd ff ff    	jne    c0002598 <mount_volume+0xc8>
c0002838:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000283f:	0f 85 53 fd ff ff    	jne    c0002598 <mount_volume+0xc8>
c0002845:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000284b:	e8 15 f2 ff ff       	call   c0001a65 <ld_qword>
c0002850:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002854:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002858:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000285e:	e8 ea f1 ff ff       	call   c0001a4d <ld_dword>
c0002863:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002866:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000286c:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000286f:	fe c8                	dec    al
c0002871:	0f 85 21 fd ff ff    	jne    c0002598 <mount_volume+0xc8>
c0002877:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c000287e:	bb 01 00 00 00       	mov    ebx,0x1
c0002883:	d3 e3                	shl    ebx,cl
c0002885:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002889:	66 85 db             	test   bx,bx
c000288c:	0f 84 06 fd ff ff    	je     c0002598 <mount_volume+0xc8>
c0002892:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002898:	e8 b0 f1 ff ff       	call   c0001a4d <ld_dword>
c000289d:	89 c6                	mov    esi,eax
c000289f:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028a4:	0f 87 ee fc ff ff    	ja     c0002598 <mount_volume+0xc8>
c00028aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ae:	8d 40 02             	lea    eax,[eax+0x2]
c00028b1:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b4:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028bb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028be:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028c4:	e8 84 f1 ff ff       	call   c0001a4d <ld_dword>
c00028c9:	31 d2                	xor    edx,edx
c00028cb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028cf:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028db:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028de:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028e1:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028e7:	e8 61 f1 ff ff       	call   c0001a4d <ld_dword>
c00028ec:	31 d2                	xor    edx,edx
c00028ee:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028f2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028f6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028fa:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028fd:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002900:	0f b7 c3             	movzx  eax,bx
c0002903:	31 d2                	xor    edx,edx
c0002905:	0f af f0             	imul   esi,eax
c0002908:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000290c:	89 f0                	mov    eax,esi
c000290e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002912:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002916:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000291a:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000291e:	39 c1                	cmp    ecx,eax
c0002920:	89 df                	mov    edi,ebx
c0002922:	19 d7                	sbb    edi,edx
c0002924:	0f 82 6e fc ff ff    	jb     c0002598 <mount_volume+0xc8>
c000292a:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002930:	31 db                	xor    ebx,ebx
c0002932:	e8 16 f1 ff ff       	call   c0001a4d <ld_dword>
c0002937:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000293e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002941:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002949:	85 db                	test   ebx,ebx
c000294b:	75 39                	jne    c0002986 <mount_volume+0x4b6>
c000294d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002951:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002955:	0f 86 3d fc ff ff    	jbe    c0002598 <mount_volume+0xc8>
c000295b:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000295e:	31 ff                	xor    edi,edi
c0002960:	89 e8                	mov    eax,ebp
c0002962:	e8 72 f3 ff ff       	call   c0001cd9 <clst2sect>
c0002967:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000296b:	01 c6                	add    esi,eax
c000296d:	89 e8                	mov    eax,ebp
c000296f:	11 d7                	adc    edi,edx
c0002971:	89 f2                	mov    edx,esi
c0002973:	89 f9                	mov    ecx,edi
c0002975:	e8 a4 f8 ff ff       	call   c000221e <move_window>
c000297a:	85 c0                	test   eax,eax
c000297c:	0f 85 07 fc ff ff    	jne    c0002589 <mount_volume+0xb9>
c0002982:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002986:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000298b:	74 0b                	je     c0002998 <mount_volume+0x4c8>
c000298d:	83 c3 20             	add    ebx,0x20
c0002990:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002996:	eb b1                	jmp    c0002949 <mount_volume+0x479>
c0002998:	8d 75 54             	lea    esi,[ebp+0x54]
c000299b:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c000299f:	e8 a9 f0 ff ff       	call   c0001a4d <ld_dword>
c00029a4:	89 c3                	mov    ebx,eax
c00029a6:	83 f8 01             	cmp    eax,0x1
c00029a9:	0f 86 e9 fb ff ff    	jbe    c0002598 <mount_volume+0xc8>
c00029af:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029b2:	0f 86 e0 fb ff ff    	jbe    c0002598 <mount_volume+0xc8>
c00029b8:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029bb:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029bf:	0f af c2             	imul   eax,edx
c00029c2:	31 d2                	xor    edx,edx
c00029c4:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029c7:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029ca:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029cd:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029d0:	31 c9                	xor    ecx,ecx
c00029d2:	89 da                	mov    edx,ebx
c00029d4:	89 e8                	mov    eax,ebp
c00029d6:	c1 ea 07             	shr    edx,0x7
c00029d9:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029dc:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029df:	e8 3a f8 ff ff       	call   c000221e <move_window>
c00029e4:	85 c0                	test   eax,eax
c00029e6:	0f 85 9d fb ff ff    	jne    c0002589 <mount_volume+0xb9>
c00029ec:	89 d8                	mov    eax,ebx
c00029ee:	83 e0 7f             	and    eax,0x7f
c00029f1:	8d 04 86             	lea    eax,[esi+eax*4]
c00029f4:	e8 54 f0 ff ff       	call   c0001a4d <ld_dword>
c00029f9:	83 f8 ff             	cmp    eax,0xffffffff
c00029fc:	74 0a                	je     c0002a08 <mount_volume+0x538>
c00029fe:	43                   	inc    ebx
c00029ff:	39 d8                	cmp    eax,ebx
c0002a01:	74 cd                	je     c00029d0 <mount_volume+0x500>
c0002a03:	e9 90 fb ff ff       	jmp    c0002598 <mount_volume+0xc8>
c0002a08:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a0f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a16:	bb 04 00 00 00       	mov    ebx,0x4
c0002a1b:	e9 e8 fd ff ff       	jmp    c0002808 <mount_volume+0x338>
c0002a20:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002a25:	19 db                	sbb    ebx,ebx
c0002a27:	83 c3 02             	add    ebx,0x2
c0002a2a:	e9 93 fc ff ff       	jmp    c00026c2 <mount_volume+0x1f2>
c0002a2f:	83 c4 3c             	add    esp,0x3c
c0002a32:	89 d8                	mov    eax,ebx
c0002a34:	5b                   	pop    ebx
c0002a35:	5e                   	pop    esi
c0002a36:	5f                   	pop    edi
c0002a37:	5d                   	pop    ebp
c0002a38:	c3                   	ret    

c0002a39 <find_bitmap>:
c0002a39:	55                   	push   ebp
c0002a3a:	57                   	push   edi
c0002a3b:	89 c7                	mov    edi,eax
c0002a3d:	56                   	push   esi
c0002a3e:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a41:	53                   	push   ebx
c0002a42:	83 ec 1c             	sub    esp,0x1c
c0002a45:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a4c:	83 e8 02             	sub    eax,0x2
c0002a4f:	39 f0                	cmp    eax,esi
c0002a51:	77 02                	ja     c0002a55 <find_bitmap+0x1c>
c0002a53:	31 f6                	xor    esi,esi
c0002a55:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a59:	89 f3                	mov    ebx,esi
c0002a5b:	31 ed                	xor    ebp,ebp
c0002a5d:	31 c9                	xor    ecx,ecx
c0002a5f:	89 da                	mov    edx,ebx
c0002a61:	89 f8                	mov    eax,edi
c0002a63:	c1 ea 0c             	shr    edx,0xc
c0002a66:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a69:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a6c:	e8 ad f7 ff ff       	call   c000221e <move_window>
c0002a71:	85 c0                	test   eax,eax
c0002a73:	75 68                	jne    c0002add <find_bitmap+0xa4>
c0002a75:	89 da                	mov    edx,ebx
c0002a77:	89 d9                	mov    ecx,ebx
c0002a79:	c1 ea 03             	shr    edx,0x3
c0002a7c:	83 e1 07             	and    ecx,0x7
c0002a7f:	b8 01 00 00 00       	mov    eax,0x1
c0002a84:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a8a:	d3 e0                	shl    eax,cl
c0002a8c:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a8f:	83 e9 02             	sub    ecx,0x2
c0002a92:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a96:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a9a:	43                   	inc    ebx
c0002a9b:	21 c1                	and    ecx,eax
c0002a9d:	d1 e0                	shl    eax,1
c0002a9f:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002aa3:	77 09                	ja     c0002aae <find_bitmap+0x75>
c0002aa5:	31 db                	xor    ebx,ebx
c0002aa7:	ba 00 02 00 00       	mov    edx,0x200
c0002aac:	31 c0                	xor    eax,eax
c0002aae:	84 c9                	test   cl,cl
c0002ab0:	75 10                	jne    c0002ac2 <find_bitmap+0x89>
c0002ab2:	45                   	inc    ebp
c0002ab3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ab7:	75 0f                	jne    c0002ac8 <find_bitmap+0x8f>
c0002ab9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002abd:	83 c0 02             	add    eax,0x2
c0002ac0:	eb 22                	jmp    c0002ae4 <find_bitmap+0xab>
c0002ac2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ac6:	31 ed                	xor    ebp,ebp
c0002ac8:	39 de                	cmp    esi,ebx
c0002aca:	74 16                	je     c0002ae2 <find_bitmap+0xa9>
c0002acc:	84 c0                	test   al,al
c0002ace:	75 c6                	jne    c0002a96 <find_bitmap+0x5d>
c0002ad0:	42                   	inc    edx
c0002ad1:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002ad7:	77 84                	ja     c0002a5d <find_bitmap+0x24>
c0002ad9:	b0 01                	mov    al,0x1
c0002adb:	eb b9                	jmp    c0002a96 <find_bitmap+0x5d>
c0002add:	83 c8 ff             	or     eax,0xffffffff
c0002ae0:	eb 02                	jmp    c0002ae4 <find_bitmap+0xab>
c0002ae2:	31 c0                	xor    eax,eax
c0002ae4:	83 c4 1c             	add    esp,0x1c
c0002ae7:	5b                   	pop    ebx
c0002ae8:	5e                   	pop    esi
c0002ae9:	5f                   	pop    edi
c0002aea:	5d                   	pop    ebp
c0002aeb:	c3                   	ret    

c0002aec <change_bitmap>:
c0002aec:	55                   	push   ebp
c0002aed:	89 cd                	mov    ebp,ecx
c0002aef:	57                   	push   edi
c0002af0:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002af3:	56                   	push   esi
c0002af4:	89 c7                	mov    edi,eax
c0002af6:	53                   	push   ebx
c0002af7:	89 c8                	mov    eax,ecx
c0002af9:	83 ec 1c             	sub    esp,0x1c
c0002afc:	31 d2                	xor    edx,edx
c0002afe:	89 ce                	mov    esi,ecx
c0002b00:	c1 e8 0c             	shr    eax,0xc
c0002b03:	bb 01 00 00 00       	mov    ebx,0x1
c0002b08:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b0b:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b0e:	c1 ee 03             	shr    esi,0x3
c0002b11:	83 e1 07             	and    ecx,0x7
c0002b14:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b1a:	d3 e3                	shl    ebx,cl
c0002b1c:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b20:	89 c1                	mov    ecx,eax
c0002b22:	89 d3                	mov    ebx,edx
c0002b24:	83 c1 01             	add    ecx,0x1
c0002b27:	83 d3 00             	adc    ebx,0x0
c0002b2a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b2e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b32:	89 d1                	mov    ecx,edx
c0002b34:	89 c2                	mov    edx,eax
c0002b36:	89 f8                	mov    eax,edi
c0002b38:	e8 e1 f6 ff ff       	call   c000221e <move_window>
c0002b3d:	89 c1                	mov    ecx,eax
c0002b3f:	85 c0                	test   eax,eax
c0002b41:	75 48                	jne    c0002b8b <change_bitmap+0x9f>
c0002b43:	31 d2                	xor    edx,edx
c0002b45:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b49:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b4d:	0f 95 c2             	setne  dl
c0002b50:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b54:	74 3c                	je     c0002b92 <change_bitmap+0xa6>
c0002b56:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b5a:	4d                   	dec    ebp
c0002b5b:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b5f:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b63:	74 32                	je     c0002b97 <change_bitmap+0xab>
c0002b65:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b69:	75 d8                	jne    c0002b43 <change_bitmap+0x57>
c0002b6b:	8d 46 01             	lea    eax,[esi+0x1]
c0002b6e:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b73:	89 c3                	mov    ebx,eax
c0002b75:	31 f6                	xor    esi,esi
c0002b77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b7f:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b85:	74 99                	je     c0002b20 <change_bitmap+0x34>
c0002b87:	89 de                	mov    esi,ebx
c0002b89:	eb b8                	jmp    c0002b43 <change_bitmap+0x57>
c0002b8b:	b9 01 00 00 00       	mov    ecx,0x1
c0002b90:	eb 05                	jmp    c0002b97 <change_bitmap+0xab>
c0002b92:	b9 02 00 00 00       	mov    ecx,0x2
c0002b97:	83 c4 1c             	add    esp,0x1c
c0002b9a:	89 c8                	mov    eax,ecx
c0002b9c:	5b                   	pop    ebx
c0002b9d:	5e                   	pop    esi
c0002b9e:	5f                   	pop    edi
c0002b9f:	5d                   	pop    ebp
c0002ba0:	c3                   	ret    

c0002ba1 <put_fat>:
c0002ba1:	83 fa 01             	cmp    edx,0x1
c0002ba4:	0f 86 7b 01 00 00    	jbe    c0002d25 <put_fat+0x184>
c0002baa:	55                   	push   ebp
c0002bab:	57                   	push   edi
c0002bac:	89 cf                	mov    edi,ecx
c0002bae:	56                   	push   esi
c0002baf:	b9 02 00 00 00       	mov    ecx,0x2
c0002bb4:	53                   	push   ebx
c0002bb5:	89 c6                	mov    esi,eax
c0002bb7:	83 ec 1c             	sub    esp,0x1c
c0002bba:	89 d3                	mov    ebx,edx
c0002bbc:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bbf:	0f 86 68 01 00 00    	jbe    c0002d2d <put_fat+0x18c>
c0002bc5:	8a 00                	mov    al,BYTE PTR [eax]
c0002bc7:	3c 02                	cmp    al,0x2
c0002bc9:	0f 84 c7 00 00 00    	je     c0002c96 <put_fat+0xf5>
c0002bcf:	77 09                	ja     c0002bda <put_fat+0x39>
c0002bd1:	fe c8                	dec    al
c0002bd3:	74 17                	je     c0002bec <put_fat+0x4b>
c0002bd5:	e9 53 01 00 00       	jmp    c0002d2d <put_fat+0x18c>
c0002bda:	b9 02 00 00 00       	mov    ecx,0x2
c0002bdf:	3c 04                	cmp    al,0x4
c0002be1:	0f 86 e1 00 00 00    	jbe    c0002cc8 <put_fat+0x127>
c0002be7:	e9 41 01 00 00       	jmp    c0002d2d <put_fat+0x18c>
c0002bec:	89 d5                	mov    ebp,edx
c0002bee:	31 c9                	xor    ecx,ecx
c0002bf0:	d1 ed                	shr    ebp,1
c0002bf2:	89 f0                	mov    eax,esi
c0002bf4:	01 d5                	add    ebp,edx
c0002bf6:	89 ea                	mov    edx,ebp
c0002bf8:	c1 ea 09             	shr    edx,0x9
c0002bfb:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bfe:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c01:	e8 18 f6 ff ff       	call   c000221e <move_window>
c0002c06:	89 c1                	mov    ecx,eax
c0002c08:	85 c0                	test   eax,eax
c0002c0a:	0f 85 1d 01 00 00    	jne    c0002d2d <put_fat+0x18c>
c0002c10:	8d 46 54             	lea    eax,[esi+0x54]
c0002c13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c17:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c1a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c24:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c28:	89 f8                	mov    eax,edi
c0002c2a:	83 e3 01             	and    ebx,0x1
c0002c2d:	74 0d                	je     c0002c3c <put_fat+0x9b>
c0002c2f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c32:	89 fa                	mov    edx,edi
c0002c34:	83 e0 0f             	and    eax,0xf
c0002c37:	c1 e2 04             	shl    edx,0x4
c0002c3a:	09 d0                	or     eax,edx
c0002c3c:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c43:	31 c9                	xor    ecx,ecx
c0002c45:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c49:	c1 ea 09             	shr    edx,0x9
c0002c4c:	89 f0                	mov    eax,esi
c0002c4e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c51:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c54:	e8 c5 f5 ff ff       	call   c000221e <move_window>
c0002c59:	89 c1                	mov    ecx,eax
c0002c5b:	85 c0                	test   eax,eax
c0002c5d:	0f 85 ca 00 00 00    	jne    c0002d2d <put_fat+0x18c>
c0002c63:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c67:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c6d:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c71:	85 db                	test   ebx,ebx
c0002c73:	74 07                	je     c0002c7c <put_fat+0xdb>
c0002c75:	c1 ef 04             	shr    edi,0x4
c0002c78:	89 fa                	mov    edx,edi
c0002c7a:	eb 0e                	jmp    c0002c8a <put_fat+0xe9>
c0002c7c:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c7f:	c1 ef 08             	shr    edi,0x8
c0002c82:	83 e2 f0             	and    edx,0xfffffff0
c0002c85:	83 e7 0f             	and    edi,0xf
c0002c88:	09 fa                	or     edx,edi
c0002c8a:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c8d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c91:	e9 97 00 00 00       	jmp    c0002d2d <put_fat+0x18c>
c0002c96:	31 c9                	xor    ecx,ecx
c0002c98:	c1 ea 08             	shr    edx,0x8
c0002c9b:	89 f0                	mov    eax,esi
c0002c9d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ca0:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ca3:	e8 76 f5 ff ff       	call   c000221e <move_window>
c0002ca8:	89 c1                	mov    ecx,eax
c0002caa:	85 c0                	test   eax,eax
c0002cac:	75 7f                	jne    c0002d2d <put_fat+0x18c>
c0002cae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb2:	01 db                	add    ebx,ebx
c0002cb4:	0f b7 d7             	movzx  edx,di
c0002cb7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cbd:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002cc1:	e8 ec ed ff ff       	call   c0001ab2 <st_word>
c0002cc6:	eb 53                	jmp    c0002d1b <put_fat+0x17a>
c0002cc8:	31 c9                	xor    ecx,ecx
c0002cca:	c1 ea 07             	shr    edx,0x7
c0002ccd:	89 f0                	mov    eax,esi
c0002ccf:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cd2:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cd5:	e8 44 f5 ff ff       	call   c000221e <move_window>
c0002cda:	89 c1                	mov    ecx,eax
c0002cdc:	85 c0                	test   eax,eax
c0002cde:	75 4d                	jne    c0002d2d <put_fat+0x18c>
c0002ce0:	c1 e3 02             	shl    ebx,0x2
c0002ce3:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ce9:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cec:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cf0:	74 1c                	je     c0002d0e <put_fat+0x16d>
c0002cf2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cf6:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002cfc:	89 d8                	mov    eax,ebx
c0002cfe:	e8 4a ed ff ff       	call   c0001a4d <ld_dword>
c0002d03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d07:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d0c:	09 c7                	or     edi,eax
c0002d0e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d12:	89 fa                	mov    edx,edi
c0002d14:	89 d8                	mov    eax,ebx
c0002d16:	e8 9b ed ff ff       	call   c0001ab6 <st_dword>
c0002d1b:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d1f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d23:	eb 08                	jmp    c0002d2d <put_fat+0x18c>
c0002d25:	b9 02 00 00 00       	mov    ecx,0x2
c0002d2a:	89 c8                	mov    eax,ecx
c0002d2c:	c3                   	ret    
c0002d2d:	83 c4 1c             	add    esp,0x1c
c0002d30:	89 c8                	mov    eax,ecx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	5f                   	pop    edi
c0002d35:	5d                   	pop    ebp
c0002d36:	c3                   	ret    

c0002d37 <fill_last_frag>:
c0002d37:	57                   	push   edi
c0002d38:	89 cf                	mov    edi,ecx
c0002d3a:	56                   	push   esi
c0002d3b:	89 d6                	mov    esi,edx
c0002d3d:	53                   	push   ebx
c0002d3e:	89 c3                	mov    ebx,eax
c0002d40:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d43:	85 c0                	test   eax,eax
c0002d45:	74 21                	je     c0002d68 <fill_last_frag+0x31>
c0002d47:	89 f9                	mov    ecx,edi
c0002d49:	83 f8 01             	cmp    eax,0x1
c0002d4c:	76 05                	jbe    c0002d53 <fill_last_frag+0x1c>
c0002d4e:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d51:	29 c1                	sub    ecx,eax
c0002d53:	8d 56 01             	lea    edx,[esi+0x1]
c0002d56:	29 c2                	sub    edx,eax
c0002d58:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d5a:	e8 42 fe ff ff       	call   c0002ba1 <put_fat>
c0002d5f:	85 c0                	test   eax,eax
c0002d61:	75 05                	jne    c0002d68 <fill_last_frag+0x31>
c0002d63:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d66:	eb d8                	jmp    c0002d40 <fill_last_frag+0x9>
c0002d68:	5b                   	pop    ebx
c0002d69:	5e                   	pop    esi
c0002d6a:	5f                   	pop    edi
c0002d6b:	c3                   	ret    

c0002d6c <fill_first_frag>:
c0002d6c:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d70:	75 2d                	jne    c0002d9f <fill_first_frag+0x33>
c0002d72:	57                   	push   edi
c0002d73:	56                   	push   esi
c0002d74:	53                   	push   ebx
c0002d75:	89 c3                	mov    ebx,eax
c0002d77:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d7a:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d7d:	01 d7                	add    edi,edx
c0002d7f:	39 fa                	cmp    edx,edi
c0002d81:	74 14                	je     c0002d97 <fill_first_frag+0x2b>
c0002d83:	8d 72 01             	lea    esi,[edx+0x1]
c0002d86:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d88:	89 f1                	mov    ecx,esi
c0002d8a:	e8 12 fe ff ff       	call   c0002ba1 <put_fat>
c0002d8f:	89 f2                	mov    edx,esi
c0002d91:	85 c0                	test   eax,eax
c0002d93:	74 ea                	je     c0002d7f <fill_first_frag+0x13>
c0002d95:	eb 0b                	jmp    c0002da2 <fill_first_frag+0x36>
c0002d97:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d9b:	31 c0                	xor    eax,eax
c0002d9d:	eb 03                	jmp    c0002da2 <fill_first_frag+0x36>
c0002d9f:	31 c0                	xor    eax,eax
c0002da1:	c3                   	ret    
c0002da2:	5b                   	pop    ebx
c0002da3:	5e                   	pop    esi
c0002da4:	5f                   	pop    edi
c0002da5:	c3                   	ret    

c0002da6 <get_fat>:
c0002da6:	83 fa 01             	cmp    edx,0x1
c0002da9:	0f 86 db 01 00 00    	jbe    c0002f8a <get_fat+0x1e4>
c0002daf:	55                   	push   ebp
c0002db0:	b9 01 00 00 00       	mov    ecx,0x1
c0002db5:	57                   	push   edi
c0002db6:	56                   	push   esi
c0002db7:	53                   	push   ebx
c0002db8:	83 ec 1c             	sub    esp,0x1c
c0002dbb:	8b 38                	mov    edi,DWORD PTR [eax]
c0002dbd:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dc0:	0f 86 cc 01 00 00    	jbe    c0002f92 <get_fat+0x1ec>
c0002dc6:	89 c3                	mov    ebx,eax
c0002dc8:	89 d6                	mov    esi,edx
c0002dca:	8a 07                	mov    al,BYTE PTR [edi]
c0002dcc:	3c 02                	cmp    al,0x2
c0002dce:	0f 84 99 00 00 00    	je     c0002e6d <get_fat+0xc7>
c0002dd4:	77 09                	ja     c0002ddf <get_fat+0x39>
c0002dd6:	fe c8                	dec    al
c0002dd8:	74 1a                	je     c0002df4 <get_fat+0x4e>
c0002dda:	e9 b3 01 00 00       	jmp    c0002f92 <get_fat+0x1ec>
c0002ddf:	3c 03                	cmp    al,0x3
c0002de1:	0f 84 b5 00 00 00    	je     c0002e9c <get_fat+0xf6>
c0002de7:	3c 04                	cmp    al,0x4
c0002de9:	0f 84 e3 00 00 00    	je     c0002ed2 <get_fat+0x12c>
c0002def:	e9 9e 01 00 00       	jmp    c0002f92 <get_fat+0x1ec>
c0002df4:	89 d3                	mov    ebx,edx
c0002df6:	31 c9                	xor    ecx,ecx
c0002df8:	d1 eb                	shr    ebx,1
c0002dfa:	89 f8                	mov    eax,edi
c0002dfc:	01 d3                	add    ebx,edx
c0002dfe:	89 da                	mov    edx,ebx
c0002e00:	c1 ea 09             	shr    edx,0x9
c0002e03:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e06:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e09:	e8 10 f4 ff ff       	call   c000221e <move_window>
c0002e0e:	85 c0                	test   eax,eax
c0002e10:	74 08                	je     c0002e1a <get_fat+0x74>
c0002e12:	83 c9 ff             	or     ecx,0xffffffff
c0002e15:	e9 78 01 00 00       	jmp    c0002f92 <get_fat+0x1ec>
c0002e1a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e1d:	31 c9                	xor    ecx,ecx
c0002e1f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e25:	89 ea                	mov    edx,ebp
c0002e27:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e2b:	c1 ea 09             	shr    edx,0x9
c0002e2e:	89 f8                	mov    eax,edi
c0002e30:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e33:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e36:	e8 e3 f3 ff ff       	call   c000221e <move_window>
c0002e3b:	85 c0                	test   eax,eax
c0002e3d:	75 d3                	jne    c0002e12 <get_fat+0x6c>
c0002e3f:	0f b6 c3             	movzx  eax,bl
c0002e42:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e48:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e4d:	c1 e3 08             	shl    ebx,0x8
c0002e50:	09 c3                	or     ebx,eax
c0002e52:	89 d9                	mov    ecx,ebx
c0002e54:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e5a:	83 e6 01             	and    esi,0x1
c0002e5d:	0f 84 2f 01 00 00    	je     c0002f92 <get_fat+0x1ec>
c0002e63:	89 d9                	mov    ecx,ebx
c0002e65:	c1 e9 04             	shr    ecx,0x4
c0002e68:	e9 25 01 00 00       	jmp    c0002f92 <get_fat+0x1ec>
c0002e6d:	31 c9                	xor    ecx,ecx
c0002e6f:	c1 ea 08             	shr    edx,0x8
c0002e72:	89 f8                	mov    eax,edi
c0002e74:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e77:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e7a:	e8 9f f3 ff ff       	call   c000221e <move_window>
c0002e7f:	85 c0                	test   eax,eax
c0002e81:	75 8f                	jne    c0002e12 <get_fat+0x6c>
c0002e83:	01 f6                	add    esi,esi
c0002e85:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e8b:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e8f:	e8 ac eb ff ff       	call   c0001a40 <ld_word>
c0002e94:	0f b7 c8             	movzx  ecx,ax
c0002e97:	e9 f6 00 00 00       	jmp    c0002f92 <get_fat+0x1ec>
c0002e9c:	31 c9                	xor    ecx,ecx
c0002e9e:	c1 ea 07             	shr    edx,0x7
c0002ea1:	89 f8                	mov    eax,edi
c0002ea3:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ea6:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ea9:	e8 70 f3 ff ff       	call   c000221e <move_window>
c0002eae:	85 c0                	test   eax,eax
c0002eb0:	0f 85 5c ff ff ff    	jne    c0002e12 <get_fat+0x6c>
c0002eb6:	c1 e6 02             	shl    esi,0x2
c0002eb9:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ebf:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ec3:	e8 85 eb ff ff       	call   c0001a4d <ld_dword>
c0002ec8:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ecd:	e9 b4 00 00 00       	jmp    c0002f86 <get_fat+0x1e0>
c0002ed2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ed5:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ed8:	89 d1                	mov    ecx,edx
c0002eda:	09 c1                	or     ecx,eax
c0002edc:	74 06                	je     c0002ee4 <get_fat+0x13e>
c0002ede:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ee2:	75 0f                	jne    c0002ef3 <get_fat+0x14d>
c0002ee4:	b9 01 00 00 00       	mov    ecx,0x1
c0002ee9:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002eed:	0f 85 9f 00 00 00    	jne    c0002f92 <get_fat+0x1ec>
c0002ef3:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002ef7:	89 f5                	mov    ebp,esi
c0002ef9:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002efe:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f01:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f04:	80 f9 02             	cmp    cl,0x2
c0002f07:	75 35                	jne    c0002f3e <get_fat+0x198>
c0002f09:	83 c0 ff             	add    eax,0xffffffff
c0002f0c:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f11:	83 d2 ff             	adc    edx,0xffffffff
c0002f14:	31 db                	xor    ebx,ebx
c0002f16:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f1a:	53                   	push   ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	51                   	push   ecx
c0002f1f:	52                   	push   edx
c0002f20:	50                   	push   eax
c0002f21:	e8 36 c2 01 00       	call   c001f15c <__udivdi3>
c0002f26:	83 c4 10             	add    esp,0x10
c0002f29:	b9 01 00 00 00       	mov    ecx,0x1
c0002f2e:	39 c5                	cmp    ebp,eax
c0002f30:	77 60                	ja     c0002f92 <get_fat+0x1ec>
c0002f32:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f37:	74 59                	je     c0002f92 <get_fat+0x1ec>
c0002f39:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f3c:	eb 54                	jmp    c0002f92 <get_fat+0x1ec>
c0002f3e:	80 f9 03             	cmp    cl,0x3
c0002f41:	75 05                	jne    c0002f48 <get_fat+0x1a2>
c0002f43:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f46:	77 f1                	ja     c0002f39 <get_fat+0x193>
c0002f48:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f4d:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f51:	75 3f                	jne    c0002f92 <get_fat+0x1ec>
c0002f53:	31 c9                	xor    ecx,ecx
c0002f55:	89 f2                	mov    edx,esi
c0002f57:	89 f8                	mov    eax,edi
c0002f59:	c1 ea 07             	shr    edx,0x7
c0002f5c:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f5f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f62:	e8 b7 f2 ff ff       	call   c000221e <move_window>
c0002f67:	85 c0                	test   eax,eax
c0002f69:	0f 85 a3 fe ff ff    	jne    c0002e12 <get_fat+0x6c>
c0002f6f:	c1 e6 02             	shl    esi,0x2
c0002f72:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f78:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f7c:	e8 cc ea ff ff       	call   c0001a4d <ld_dword>
c0002f81:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f86:	89 c1                	mov    ecx,eax
c0002f88:	eb 08                	jmp    c0002f92 <get_fat+0x1ec>
c0002f8a:	b9 01 00 00 00       	mov    ecx,0x1
c0002f8f:	89 c8                	mov    eax,ecx
c0002f91:	c3                   	ret    
c0002f92:	83 c4 1c             	add    esp,0x1c
c0002f95:	89 c8                	mov    eax,ecx
c0002f97:	5b                   	pop    ebx
c0002f98:	5e                   	pop    esi
c0002f99:	5f                   	pop    edi
c0002f9a:	5d                   	pop    ebp
c0002f9b:	c3                   	ret    

c0002f9c <dir_sdi>:
c0002f9c:	55                   	push   ebp
c0002f9d:	57                   	push   edi
c0002f9e:	56                   	push   esi
c0002f9f:	53                   	push   ebx
c0002fa0:	89 c3                	mov    ebx,eax
c0002fa2:	83 ec 1c             	sub    esp,0x1c
c0002fa5:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa7:	31 c0                	xor    eax,eax
c0002fa9:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fac:	0f 94 c0             	sete   al
c0002faf:	48                   	dec    eax
c0002fb0:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fb5:	05 00 00 00 10       	add    eax,0x10000000
c0002fba:	39 d0                	cmp    eax,edx
c0002fbc:	77 0a                	ja     c0002fc8 <dir_sdi+0x2c>
c0002fbe:	b8 02 00 00 00       	mov    eax,0x2
c0002fc3:	e9 c4 00 00 00       	jmp    c000308c <dir_sdi+0xf0>
c0002fc8:	89 d6                	mov    esi,edx
c0002fca:	f6 c2 1f             	test   dl,0x1f
c0002fcd:	75 ef                	jne    c0002fbe <dir_sdi+0x22>
c0002fcf:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fd2:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fd5:	85 c9                	test   ecx,ecx
c0002fd7:	75 2d                	jne    c0003006 <dir_sdi+0x6a>
c0002fd9:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fdc:	77 1b                	ja     c0002ff9 <dir_sdi+0x5d>
c0002fde:	89 f2                	mov    edx,esi
c0002fe0:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fe4:	c1 ea 05             	shr    edx,0x5
c0002fe7:	39 c2                	cmp    edx,eax
c0002fe9:	73 d3                	jae    c0002fbe <dir_sdi+0x22>
c0002feb:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fee:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002ff1:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002ff4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002ff7:	eb 4b                	jmp    c0003044 <dir_sdi+0xa8>
c0002ff9:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ffc:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003000:	85 c0                	test   eax,eax
c0003002:	74 da                	je     c0002fde <dir_sdi+0x42>
c0003004:	89 c1                	mov    ecx,eax
c0003006:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000300a:	c1 e5 09             	shl    ebp,0x9
c000300d:	89 ca                	mov    edx,ecx
c000300f:	39 ee                	cmp    esi,ebp
c0003011:	72 1c                	jb     c000302f <dir_sdi+0x93>
c0003013:	89 d8                	mov    eax,ebx
c0003015:	e8 8c fd ff ff       	call   c0002da6 <get_fat>
c000301a:	89 c1                	mov    ecx,eax
c000301c:	83 f8 ff             	cmp    eax,0xffffffff
c000301f:	74 66                	je     c0003087 <dir_sdi+0xeb>
c0003021:	83 f8 01             	cmp    eax,0x1
c0003024:	76 98                	jbe    c0002fbe <dir_sdi+0x22>
c0003026:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003029:	76 93                	jbe    c0002fbe <dir_sdi+0x22>
c000302b:	29 ee                	sub    esi,ebp
c000302d:	eb de                	jmp    c000300d <dir_sdi+0x71>
c000302f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003033:	89 f8                	mov    eax,edi
c0003035:	e8 9f ec ff ff       	call   c0001cd9 <clst2sect>
c000303a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003041:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003044:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003047:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000304a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000304d:	89 d1                	mov    ecx,edx
c000304f:	09 c1                	or     ecx,eax
c0003051:	0f 84 67 ff ff ff    	je     c0002fbe <dir_sdi+0x22>
c0003057:	89 f1                	mov    ecx,esi
c0003059:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003061:	c1 e9 09             	shr    ecx,0x9
c0003064:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003068:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000306c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003070:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003073:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003079:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000307c:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003080:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003083:	31 c0                	xor    eax,eax
c0003085:	eb 05                	jmp    c000308c <dir_sdi+0xf0>
c0003087:	b8 01 00 00 00       	mov    eax,0x1
c000308c:	83 c4 1c             	add    esp,0x1c
c000308f:	5b                   	pop    ebx
c0003090:	5e                   	pop    esi
c0003091:	5f                   	pop    edi
c0003092:	5d                   	pop    ebp
c0003093:	c3                   	ret    

c0003094 <create_chain>:
c0003094:	55                   	push   ebp
c0003095:	89 c5                	mov    ebp,eax
c0003097:	57                   	push   edi
c0003098:	56                   	push   esi
c0003099:	53                   	push   ebx
c000309a:	83 ec 1c             	sub    esp,0x1c
c000309d:	85 d2                	test   edx,edx
c000309f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030a3:	8b 30                	mov    esi,DWORD PTR [eax]
c00030a5:	75 0e                	jne    c00030b5 <create_chain+0x21>
c00030a7:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030aa:	85 ff                	test   edi,edi
c00030ac:	74 39                	je     c00030e7 <create_chain+0x53>
c00030ae:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030b1:	77 39                	ja     c00030ec <create_chain+0x58>
c00030b3:	eb 32                	jmp    c00030e7 <create_chain+0x53>
c00030b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030b9:	e8 e8 fc ff ff       	call   c0002da6 <get_fat>
c00030be:	89 c3                	mov    ebx,eax
c00030c0:	83 f8 01             	cmp    eax,0x1
c00030c3:	77 0a                	ja     c00030cf <create_chain+0x3b>
c00030c5:	bb 01 00 00 00       	mov    ebx,0x1
c00030ca:	e9 ba 01 00 00       	jmp    c0003289 <create_chain+0x1f5>
c00030cf:	83 f8 ff             	cmp    eax,0xffffffff
c00030d2:	0f 84 62 01 00 00    	je     c000323a <create_chain+0x1a6>
c00030d8:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030db:	0f 87 a8 01 00 00    	ja     c0003289 <create_chain+0x1f5>
c00030e1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030e5:	eb 05                	jmp    c00030ec <create_chain+0x58>
c00030e7:	bf 01 00 00 00       	mov    edi,0x1
c00030ec:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030f0:	75 07                	jne    c00030f9 <create_chain+0x65>
c00030f2:	31 db                	xor    ebx,ebx
c00030f4:	e9 90 01 00 00       	jmp    c0003289 <create_chain+0x1f5>
c00030f9:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030fc:	75 74                	jne    c0003172 <create_chain+0xde>
c00030fe:	b9 01 00 00 00       	mov    ecx,0x1
c0003103:	89 fa                	mov    edx,edi
c0003105:	89 f0                	mov    eax,esi
c0003107:	e8 2d f9 ff ff       	call   c0002a39 <find_bitmap>
c000310c:	89 c3                	mov    ebx,eax
c000310e:	8d 40 ff             	lea    eax,[eax-0x1]
c0003111:	83 f8 fd             	cmp    eax,0xfffffffd
c0003114:	0f 87 6f 01 00 00    	ja     c0003289 <create_chain+0x1f5>
c000311a:	83 ec 0c             	sub    esp,0xc
c000311d:	b9 01 00 00 00       	mov    ecx,0x1
c0003122:	6a 01                	push   0x1
c0003124:	89 da                	mov    edx,ebx
c0003126:	89 f0                	mov    eax,esi
c0003128:	e8 bf f9 ff ff       	call   c0002aec <change_bitmap>
c000312d:	83 c4 10             	add    esp,0x10
c0003130:	83 f8 02             	cmp    eax,0x2
c0003133:	74 90                	je     c00030c5 <create_chain+0x31>
c0003135:	83 f8 01             	cmp    eax,0x1
c0003138:	0f 84 fc 00 00 00    	je     c000323a <create_chain+0x1a6>
c000313e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003143:	75 09                	jne    c000314e <create_chain+0xba>
c0003145:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003149:	e9 0c 01 00 00       	jmp    c000325a <create_chain+0x1c6>
c000314e:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003152:	0f 85 e7 00 00 00    	jne    c000323f <create_chain+0x1ab>
c0003158:	8d 57 01             	lea    edx,[edi+0x1]
c000315b:	39 da                	cmp    edx,ebx
c000315d:	0f 84 f7 00 00 00    	je     c000325a <create_chain+0x1c6>
c0003163:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003166:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000316a:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000316d:	e9 cd 00 00 00       	jmp    c000323f <create_chain+0x1ab>
c0003172:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003176:	75 41                	jne    c00031b9 <create_chain+0x125>
c0003178:	8d 5f 01             	lea    ebx,[edi+0x1]
c000317b:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000317e:	77 05                	ja     c0003185 <create_chain+0xf1>
c0003180:	bb 02 00 00 00       	mov    ebx,0x2
c0003185:	89 da                	mov    edx,ebx
c0003187:	89 e8                	mov    eax,ebp
c0003189:	e8 18 fc ff ff       	call   c0002da6 <get_fat>
c000318e:	83 f8 01             	cmp    eax,0x1
c0003191:	0f 84 2e ff ff ff    	je     c00030c5 <create_chain+0x31>
c0003197:	83 f8 ff             	cmp    eax,0xffffffff
c000319a:	0f 84 9a 00 00 00    	je     c000323a <create_chain+0x1a6>
c00031a0:	85 c0                	test   eax,eax
c00031a2:	74 11                	je     c00031b5 <create_chain+0x121>
c00031a4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031a7:	83 f8 01             	cmp    eax,0x1
c00031aa:	76 0d                	jbe    c00031b9 <create_chain+0x125>
c00031ac:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031af:	76 08                	jbe    c00031b9 <create_chain+0x125>
c00031b1:	89 c7                	mov    edi,eax
c00031b3:	eb 04                	jmp    c00031b9 <create_chain+0x125>
c00031b5:	85 db                	test   ebx,ebx
c00031b7:	75 38                	jne    c00031f1 <create_chain+0x15d>
c00031b9:	89 fb                	mov    ebx,edi
c00031bb:	43                   	inc    ebx
c00031bc:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031bf:	77 0e                	ja     c00031cf <create_chain+0x13b>
c00031c1:	83 ff 01             	cmp    edi,0x1
c00031c4:	0f 86 28 ff ff ff    	jbe    c00030f2 <create_chain+0x5e>
c00031ca:	bb 02 00 00 00       	mov    ebx,0x2
c00031cf:	89 da                	mov    edx,ebx
c00031d1:	89 e8                	mov    eax,ebp
c00031d3:	e8 ce fb ff ff       	call   c0002da6 <get_fat>
c00031d8:	85 c0                	test   eax,eax
c00031da:	74 15                	je     c00031f1 <create_chain+0x15d>
c00031dc:	83 f8 01             	cmp    eax,0x1
c00031df:	0f 84 e0 fe ff ff    	je     c00030c5 <create_chain+0x31>
c00031e5:	40                   	inc    eax
c00031e6:	74 52                	je     c000323a <create_chain+0x1a6>
c00031e8:	39 fb                	cmp    ebx,edi
c00031ea:	75 cf                	jne    c00031bb <create_chain+0x127>
c00031ec:	e9 01 ff ff ff       	jmp    c00030f2 <create_chain+0x5e>
c00031f1:	83 c9 ff             	or     ecx,0xffffffff
c00031f4:	89 da                	mov    edx,ebx
c00031f6:	89 f0                	mov    eax,esi
c00031f8:	e8 a4 f9 ff ff       	call   c0002ba1 <put_fat>
c00031fd:	85 c0                	test   eax,eax
c00031ff:	75 32                	jne    c0003233 <create_chain+0x19f>
c0003201:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003206:	74 11                	je     c0003219 <create_chain+0x185>
c0003208:	89 d9                	mov    ecx,ebx
c000320a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000320e:	89 f0                	mov    eax,esi
c0003210:	e8 8c f9 ff ff       	call   c0002ba1 <put_fat>
c0003215:	85 c0                	test   eax,eax
c0003217:	75 1a                	jne    c0003233 <create_chain+0x19f>
c0003219:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000321c:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000321f:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003222:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003225:	39 d0                	cmp    eax,edx
c0003227:	77 04                	ja     c000322d <create_chain+0x199>
c0003229:	48                   	dec    eax
c000322a:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000322d:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003231:	eb 56                	jmp    c0003289 <create_chain+0x1f5>
c0003233:	48                   	dec    eax
c0003234:	0f 85 8b fe ff ff    	jne    c00030c5 <create_chain+0x31>
c000323a:	83 cb ff             	or     ebx,0xffffffff
c000323d:	eb 4a                	jmp    c0003289 <create_chain+0x1f5>
c000323f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003243:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003246:	41                   	inc    ecx
c0003247:	39 d9                	cmp    ecx,ebx
c0003249:	75 19                	jne    c0003264 <create_chain+0x1d0>
c000324b:	b9 02 00 00 00       	mov    ecx,0x2
c0003250:	85 d2                	test   edx,edx
c0003252:	74 03                	je     c0003257 <create_chain+0x1c3>
c0003254:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003257:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000325a:	85 c0                	test   eax,eax
c000325c:	0f 85 63 fe ff ff    	jne    c00030c5 <create_chain+0x31>
c0003262:	eb b5                	jmp    c0003219 <create_chain+0x185>
c0003264:	85 d2                	test   edx,edx
c0003266:	75 07                	jne    c000326f <create_chain+0x1db>
c0003268:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000326f:	89 d9                	mov    ecx,ebx
c0003271:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003275:	89 e8                	mov    eax,ebp
c0003277:	e8 bb fa ff ff       	call   c0002d37 <fill_last_frag>
c000327c:	85 c0                	test   eax,eax
c000327e:	75 b3                	jne    c0003233 <create_chain+0x19f>
c0003280:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003287:	eb 90                	jmp    c0003219 <create_chain+0x185>
c0003289:	83 c4 1c             	add    esp,0x1c
c000328c:	89 d8                	mov    eax,ebx
c000328e:	5b                   	pop    ebx
c000328f:	5e                   	pop    esi
c0003290:	5f                   	pop    edi
c0003291:	5d                   	pop    ebp
c0003292:	c3                   	ret    

c0003293 <remove_chain>:
c0003293:	55                   	push   ebp
c0003294:	57                   	push   edi
c0003295:	56                   	push   esi
c0003296:	53                   	push   ebx
c0003297:	83 ec 1c             	sub    esp,0x1c
c000329a:	83 fa 01             	cmp    edx,0x1
c000329d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032a1:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032a3:	77 0a                	ja     c00032af <remove_chain+0x1c>
c00032a5:	b8 02 00 00 00       	mov    eax,0x2
c00032aa:	e9 24 01 00 00       	jmp    c00033d3 <remove_chain+0x140>
c00032af:	89 d6                	mov    esi,edx
c00032b1:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032b4:	76 ef                	jbe    c00032a5 <remove_chain+0x12>
c00032b6:	89 c7                	mov    edi,eax
c00032b8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032bd:	75 06                	jne    c00032c5 <remove_chain+0x32>
c00032bf:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032c3:	eb 54                	jmp    c0003319 <remove_chain+0x86>
c00032c5:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c8:	75 06                	jne    c00032d0 <remove_chain+0x3d>
c00032ca:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032ce:	74 ef                	je     c00032bf <remove_chain+0x2c>
c00032d0:	83 c9 ff             	or     ecx,0xffffffff
c00032d3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032d7:	89 d8                	mov    eax,ebx
c00032d9:	e8 c3 f8 ff ff       	call   c0002ba1 <put_fat>
c00032de:	85 c0                	test   eax,eax
c00032e0:	74 dd                	je     c00032bf <remove_chain+0x2c>
c00032e2:	e9 ec 00 00 00       	jmp    c00033d3 <remove_chain+0x140>
c00032e7:	83 f8 01             	cmp    eax,0x1
c00032ea:	74 b9                	je     c00032a5 <remove_chain+0x12>
c00032ec:	83 f8 ff             	cmp    eax,0xffffffff
c00032ef:	74 6d                	je     c000335e <remove_chain+0xcb>
c00032f1:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032f4:	75 6f                	jne    c0003365 <remove_chain+0xd2>
c00032f6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032f9:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032fc:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032ff:	39 d0                	cmp    eax,edx
c0003301:	73 08                	jae    c000330b <remove_chain+0x78>
c0003303:	40                   	inc    eax
c0003304:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003308:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000330b:	8d 4e 01             	lea    ecx,[esi+0x1]
c000330e:	39 e9                	cmp    ecx,ebp
c0003310:	75 64                	jne    c0003376 <remove_chain+0xe3>
c0003312:	89 ee                	mov    esi,ebp
c0003314:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003317:	76 0f                	jbe    c0003328 <remove_chain+0x95>
c0003319:	89 f2                	mov    edx,esi
c000331b:	89 f8                	mov    eax,edi
c000331d:	e8 84 fa ff ff       	call   c0002da6 <get_fat>
c0003322:	89 c5                	mov    ebp,eax
c0003324:	85 c0                	test   eax,eax
c0003326:	75 bf                	jne    c00032e7 <remove_chain+0x54>
c0003328:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000332b:	0f 85 a0 00 00 00    	jne    c00033d1 <remove_chain+0x13e>
c0003331:	eb 6c                	jmp    c000339f <remove_chain+0x10c>
c0003333:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003336:	84 c0                	test   al,al
c0003338:	75 7d                	jne    c00033b7 <remove_chain+0x124>
c000333a:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000333d:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003341:	0f 84 86 00 00 00    	je     c00033cd <remove_chain+0x13a>
c0003347:	89 da                	mov    edx,ebx
c0003349:	89 f8                	mov    eax,edi
c000334b:	e8 56 fa ff ff       	call   c0002da6 <get_fat>
c0003350:	83 f8 01             	cmp    eax,0x1
c0003353:	0f 86 4c ff ff ff    	jbe    c00032a5 <remove_chain+0x12>
c0003359:	83 f8 ff             	cmp    eax,0xffffffff
c000335c:	75 4e                	jne    c00033ac <remove_chain+0x119>
c000335e:	b8 01 00 00 00       	mov    eax,0x1
c0003363:	eb 6e                	jmp    c00033d3 <remove_chain+0x140>
c0003365:	31 c9                	xor    ecx,ecx
c0003367:	89 f2                	mov    edx,esi
c0003369:	89 d8                	mov    eax,ebx
c000336b:	e8 31 f8 ff ff       	call   c0002ba1 <put_fat>
c0003370:	85 c0                	test   eax,eax
c0003372:	74 82                	je     c00032f6 <remove_chain+0x63>
c0003374:	eb 5d                	jmp    c00033d3 <remove_chain+0x140>
c0003376:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003379:	75 1b                	jne    c0003396 <remove_chain+0x103>
c000337b:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000337f:	89 d8                	mov    eax,ebx
c0003381:	83 ec 0c             	sub    esp,0xc
c0003384:	6a 00                	push   0x0
c0003386:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000338a:	e8 5d f7 ff ff       	call   c0002aec <change_bitmap>
c000338f:	83 c4 10             	add    esp,0x10
c0003392:	85 c0                	test   eax,eax
c0003394:	75 3d                	jne    c00033d3 <remove_chain+0x140>
c0003396:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000339a:	e9 73 ff ff ff       	jmp    c0003312 <remove_chain+0x7f>
c000339f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033a4:	75 8d                	jne    c0003333 <remove_chain+0xa0>
c00033a6:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033aa:	eb 25                	jmp    c00033d1 <remove_chain+0x13e>
c00033ac:	8d 53 01             	lea    edx,[ebx+0x1]
c00033af:	89 c3                	mov    ebx,eax
c00033b1:	39 c2                	cmp    edx,eax
c00033b3:	74 88                	je     c000333d <remove_chain+0xaa>
c00033b5:	eb 1a                	jmp    c00033d1 <remove_chain+0x13e>
c00033b7:	3c 03                	cmp    al,0x3
c00033b9:	75 16                	jne    c00033d1 <remove_chain+0x13e>
c00033bb:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033be:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033c2:	77 0d                	ja     c00033d1 <remove_chain+0x13e>
c00033c4:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033c7:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033cb:	72 04                	jb     c00033d1 <remove_chain+0x13e>
c00033cd:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033d1:	31 c0                	xor    eax,eax
c00033d3:	83 c4 1c             	add    esp,0x1c
c00033d6:	5b                   	pop    ebx
c00033d7:	5e                   	pop    esi
c00033d8:	5f                   	pop    edi
c00033d9:	5d                   	pop    ebp
c00033da:	c3                   	ret    

c00033db <dir_clear>:
c00033db:	55                   	push   ebp
c00033dc:	57                   	push   edi
c00033dd:	56                   	push   esi
c00033de:	89 c6                	mov    esi,eax
c00033e0:	53                   	push   ebx
c00033e1:	83 ec 1c             	sub    esp,0x1c
c00033e4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033e8:	e8 9d ed ff ff       	call   c000218a <sync_window>
c00033ed:	85 c0                	test   eax,eax
c00033ef:	0f 85 de 00 00 00    	jne    c00034d3 <dir_clear+0xf8>
c00033f5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f9:	89 f0                	mov    eax,esi
c00033fb:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033fe:	e8 d6 e8 ff ff       	call   c0001cd9 <clst2sect>
c0003403:	b9 00 02 00 00       	mov    ecx,0x200
c0003408:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000340c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003410:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003413:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003416:	89 e8                	mov    eax,ebp
c0003418:	31 d2                	xor    edx,edx
c000341a:	e8 b5 e6 ff ff       	call   c0001ad4 <mem_set>
c000341f:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003423:	c1 e3 09             	shl    ebx,0x9
c0003426:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000342c:	76 1f                	jbe    c000344d <dir_clear+0x72>
c000342e:	bb 00 80 00 00       	mov    ebx,0x8000
c0003433:	eb 18                	jmp    c000344d <dir_clear+0x72>
c0003435:	83 ec 0c             	sub    esp,0xc
c0003438:	53                   	push   ebx
c0003439:	e8 35 4e 00 00       	call   c0008273 <ff_memalloc>
c000343e:	83 c4 10             	add    esp,0x10
c0003441:	89 c7                	mov    edi,eax
c0003443:	85 c0                	test   eax,eax
c0003445:	0f 85 8f 00 00 00    	jne    c00034da <dir_clear+0xff>
c000344b:	d1 eb                	shr    ebx,1
c000344d:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003453:	77 e0                	ja     c0003435 <dir_clear+0x5a>
c0003455:	31 db                	xor    ebx,ebx
c0003457:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000345b:	39 d8                	cmp    eax,ebx
c000345d:	76 66                	jbe    c00034c5 <dir_clear+0xea>
c000345f:	83 ec 0c             	sub    esp,0xc
c0003462:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003466:	6a 01                	push   0x1
c0003468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000346c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003470:	55                   	push   ebp
c0003471:	50                   	push   eax
c0003472:	e8 94 e5 ff ff       	call   c0001a0b <disk_write>
c0003477:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000347c:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003481:	83 c4 20             	add    esp,0x20
c0003484:	85 c0                	test   eax,eax
c0003486:	75 3d                	jne    c00034c5 <dir_clear+0xea>
c0003488:	43                   	inc    ebx
c0003489:	eb cc                	jmp    c0003457 <dir_clear+0x7c>
c000348b:	83 ec 0c             	sub    esp,0xc
c000348e:	31 d2                	xor    edx,edx
c0003490:	55                   	push   ebp
c0003491:	89 d8                	mov    eax,ebx
c0003493:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003497:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000349b:	52                   	push   edx
c000349c:	50                   	push   eax
c000349d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034a1:	57                   	push   edi
c00034a2:	50                   	push   eax
c00034a3:	e8 63 e5 ff ff       	call   c0001a0b <disk_write>
c00034a8:	83 c4 20             	add    esp,0x20
c00034ab:	85 c0                	test   eax,eax
c00034ad:	75 0a                	jne    c00034b9 <dir_clear+0xde>
c00034af:	01 eb                	add    ebx,ebp
c00034b1:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034b5:	39 d8                	cmp    eax,ebx
c00034b7:	77 d2                	ja     c000348b <dir_clear+0xb0>
c00034b9:	83 ec 0c             	sub    esp,0xc
c00034bc:	57                   	push   edi
c00034bd:	e8 c7 4d 00 00       	call   c0008289 <ff_memfree>
c00034c2:	83 c4 10             	add    esp,0x10
c00034c5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034c9:	39 d8                	cmp    eax,ebx
c00034cb:	0f 95 c0             	setne  al
c00034ce:	0f b6 c0             	movzx  eax,al
c00034d1:	eb 19                	jmp    c00034ec <dir_clear+0x111>
c00034d3:	b8 01 00 00 00       	mov    eax,0x1
c00034d8:	eb 12                	jmp    c00034ec <dir_clear+0x111>
c00034da:	89 d9                	mov    ecx,ebx
c00034dc:	31 d2                	xor    edx,edx
c00034de:	c1 eb 09             	shr    ebx,0x9
c00034e1:	e8 ee e5 ff ff       	call   c0001ad4 <mem_set>
c00034e6:	89 dd                	mov    ebp,ebx
c00034e8:	31 db                	xor    ebx,ebx
c00034ea:	eb c5                	jmp    c00034b1 <dir_clear+0xd6>
c00034ec:	83 c4 1c             	add    esp,0x1c
c00034ef:	5b                   	pop    ebx
c00034f0:	5e                   	pop    esi
c00034f1:	5f                   	pop    edi
c00034f2:	5d                   	pop    ebp
c00034f3:	c3                   	ret    

c00034f4 <dir_next>:
c00034f4:	55                   	push   ebp
c00034f5:	57                   	push   edi
c00034f6:	56                   	push   esi
c00034f7:	53                   	push   ebx
c00034f8:	89 c3                	mov    ebx,eax
c00034fa:	83 ec 1c             	sub    esp,0x1c
c00034fd:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003503:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003506:	8d 78 20             	lea    edi,[eax+0x20]
c0003509:	31 c0                	xor    eax,eax
c000350b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000350f:	0f 94 c0             	sete   al
c0003512:	48                   	dec    eax
c0003513:	25 00 00 20 f0       	and    eax,0xf0200000
c0003518:	05 00 00 00 10       	add    eax,0x10000000
c000351d:	39 f8                	cmp    eax,edi
c000351f:	77 0e                	ja     c000352f <dir_next+0x3b>
c0003521:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003528:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000352f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003532:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003535:	b8 04 00 00 00       	mov    eax,0x4
c000353a:	89 ce                	mov    esi,ecx
c000353c:	09 d6                	or     esi,edx
c000353e:	0f 84 da 00 00 00    	je     c000361e <dir_next+0x12a>
c0003544:	89 f8                	mov    eax,edi
c0003546:	25 ff 01 00 00       	and    eax,0x1ff
c000354b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000354f:	0f 85 b9 00 00 00    	jne    c000360e <dir_next+0x11a>
c0003555:	83 c2 01             	add    edx,0x1
c0003558:	83 d1 00             	adc    ecx,0x0
c000355b:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000355e:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003561:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003564:	85 d2                	test   edx,edx
c0003566:	75 29                	jne    c0003591 <dir_next+0x9d>
c0003568:	89 fa                	mov    edx,edi
c000356a:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000356e:	c1 ea 05             	shr    edx,0x5
c0003571:	39 c2                	cmp    edx,eax
c0003573:	0f 82 95 00 00 00    	jb     c000360e <dir_next+0x11a>
c0003579:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003580:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003587:	b8 04 00 00 00       	mov    eax,0x4
c000358c:	e9 8d 00 00 00       	jmp    c000361e <dir_next+0x12a>
c0003591:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003595:	89 f9                	mov    ecx,edi
c0003597:	48                   	dec    eax
c0003598:	c1 e9 09             	shr    ecx,0x9
c000359b:	85 c8                	test   eax,ecx
c000359d:	75 6f                	jne    c000360e <dir_next+0x11a>
c000359f:	89 d8                	mov    eax,ebx
c00035a1:	e8 00 f8 ff ff       	call   c0002da6 <get_fat>
c00035a6:	89 c6                	mov    esi,eax
c00035a8:	83 f8 01             	cmp    eax,0x1
c00035ab:	77 07                	ja     c00035b4 <dir_next+0xc0>
c00035ad:	b8 02 00 00 00       	mov    eax,0x2
c00035b2:	eb 6a                	jmp    c000361e <dir_next+0x12a>
c00035b4:	83 f8 ff             	cmp    eax,0xffffffff
c00035b7:	75 07                	jne    c00035c0 <dir_next+0xcc>
c00035b9:	b8 01 00 00 00       	mov    eax,0x1
c00035be:	eb 5e                	jmp    c000361e <dir_next+0x12a>
c00035c0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035c3:	77 37                	ja     c00035fc <dir_next+0x108>
c00035c5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035ca:	74 ad                	je     c0003579 <dir_next+0x85>
c00035cc:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035cf:	89 d8                	mov    eax,ebx
c00035d1:	e8 be fa ff ff       	call   c0003094 <create_chain>
c00035d6:	89 c6                	mov    esi,eax
c00035d8:	b8 07 00 00 00       	mov    eax,0x7
c00035dd:	85 f6                	test   esi,esi
c00035df:	74 3d                	je     c000361e <dir_next+0x12a>
c00035e1:	83 fe 01             	cmp    esi,0x1
c00035e4:	74 c7                	je     c00035ad <dir_next+0xb9>
c00035e6:	83 fe ff             	cmp    esi,0xffffffff
c00035e9:	74 ce                	je     c00035b9 <dir_next+0xc5>
c00035eb:	89 f2                	mov    edx,esi
c00035ed:	89 e8                	mov    eax,ebp
c00035ef:	e8 e7 fd ff ff       	call   c00033db <dir_clear>
c00035f4:	85 c0                	test   eax,eax
c00035f6:	75 c1                	jne    c00035b9 <dir_next+0xc5>
c00035f8:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035fc:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035ff:	89 f2                	mov    edx,esi
c0003601:	89 e8                	mov    eax,ebp
c0003603:	e8 d1 e6 ff ff       	call   c0001cd9 <clst2sect>
c0003608:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000360b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000360e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003612:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003615:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003619:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000361c:	31 c0                	xor    eax,eax
c000361e:	83 c4 1c             	add    esp,0x1c
c0003621:	5b                   	pop    ebx
c0003622:	5e                   	pop    esi
c0003623:	5f                   	pop    edi
c0003624:	5d                   	pop    ebp
c0003625:	c3                   	ret    

c0003626 <load_xdir>:
c0003626:	55                   	push   ebp
c0003627:	57                   	push   edi
c0003628:	56                   	push   esi
c0003629:	89 c6                	mov    esi,eax
c000362b:	53                   	push   ebx
c000362c:	83 ec 1c             	sub    esp,0x1c
c000362f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003631:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003634:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003637:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000363a:	e8 df eb ff ff       	call   c000221e <move_window>
c000363f:	89 c3                	mov    ebx,eax
c0003641:	85 c0                	test   eax,eax
c0003643:	0f 85 0c 01 00 00    	jne    c0003755 <load_xdir+0x12f>
c0003649:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000364c:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000364f:	0f 85 fb 00 00 00    	jne    c0003750 <load_xdir+0x12a>
c0003655:	89 f8                	mov    eax,edi
c0003657:	b9 20 00 00 00       	mov    ecx,0x20
c000365c:	e8 5e e4 ff ff       	call   c0001abf <mem_cpy>
c0003661:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003665:	40                   	inc    eax
c0003666:	c1 e0 05             	shl    eax,0x5
c0003669:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000366d:	83 e8 60             	sub    eax,0x60
c0003670:	3d 00 02 00 00       	cmp    eax,0x200
c0003675:	0f 87 d5 00 00 00    	ja     c0003750 <load_xdir+0x12a>
c000367b:	31 d2                	xor    edx,edx
c000367d:	89 f0                	mov    eax,esi
c000367f:	e8 70 fe ff ff       	call   c00034f4 <dir_next>
c0003684:	89 c3                	mov    ebx,eax
c0003686:	83 f8 04             	cmp    eax,0x4
c0003689:	0f 84 c1 00 00 00    	je     c0003750 <load_xdir+0x12a>
c000368f:	85 c0                	test   eax,eax
c0003691:	0f 85 be 00 00 00    	jne    c0003755 <load_xdir+0x12f>
c0003697:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000369a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000369d:	8b 06                	mov    eax,DWORD PTR [esi]
c000369f:	e8 7a eb ff ff       	call   c000221e <move_window>
c00036a4:	89 c3                	mov    ebx,eax
c00036a6:	85 c0                	test   eax,eax
c00036a8:	0f 85 a7 00 00 00    	jne    c0003755 <load_xdir+0x12f>
c00036ae:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036b1:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036b4:	0f 85 96 00 00 00    	jne    c0003750 <load_xdir+0x12a>
c00036ba:	8d 47 20             	lea    eax,[edi+0x20]
c00036bd:	b9 20 00 00 00       	mov    ecx,0x20
c00036c2:	e8 f8 e3 ff ff       	call   c0001abf <mem_cpy>
c00036c7:	31 d2                	xor    edx,edx
c00036c9:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036cd:	b9 0f 00 00 00       	mov    ecx,0xf
c00036d2:	83 c0 2c             	add    eax,0x2c
c00036d5:	f7 f1                	div    ecx
c00036d7:	c1 e0 05             	shl    eax,0x5
c00036da:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036de:	77 70                	ja     c0003750 <load_xdir+0x12a>
c00036e0:	bd 40 00 00 00       	mov    ebp,0x40
c00036e5:	31 d2                	xor    edx,edx
c00036e7:	89 f0                	mov    eax,esi
c00036e9:	e8 06 fe ff ff       	call   c00034f4 <dir_next>
c00036ee:	89 c3                	mov    ebx,eax
c00036f0:	83 f8 04             	cmp    eax,0x4
c00036f3:	74 5b                	je     c0003750 <load_xdir+0x12a>
c00036f5:	85 c0                	test   eax,eax
c00036f7:	75 5c                	jne    c0003755 <load_xdir+0x12f>
c00036f9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036fc:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036ff:	8b 06                	mov    eax,DWORD PTR [esi]
c0003701:	e8 18 eb ff ff       	call   c000221e <move_window>
c0003706:	89 c3                	mov    ebx,eax
c0003708:	85 c0                	test   eax,eax
c000370a:	75 49                	jne    c0003755 <load_xdir+0x12f>
c000370c:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000370f:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003712:	75 3c                	jne    c0003750 <load_xdir+0x12a>
c0003714:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000371a:	77 0d                	ja     c0003729 <load_xdir+0x103>
c000371c:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000371f:	b9 20 00 00 00       	mov    ecx,0x20
c0003724:	e8 96 e3 ff ff       	call   c0001abf <mem_cpy>
c0003729:	83 c5 20             	add    ebp,0x20
c000372c:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003730:	77 b3                	ja     c00036e5 <load_xdir+0xbf>
c0003732:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003738:	77 1b                	ja     c0003755 <load_xdir+0x12f>
c000373a:	89 f8                	mov    eax,edi
c000373c:	e8 cd e7 ff ff       	call   c0001f0e <xdir_sum>
c0003741:	89 c1                	mov    ecx,eax
c0003743:	8d 47 02             	lea    eax,[edi+0x2]
c0003746:	e8 f5 e2 ff ff       	call   c0001a40 <ld_word>
c000374b:	66 39 c1             	cmp    cx,ax
c000374e:	74 05                	je     c0003755 <load_xdir+0x12f>
c0003750:	bb 02 00 00 00       	mov    ebx,0x2
c0003755:	83 c4 1c             	add    esp,0x1c
c0003758:	89 d8                	mov    eax,ebx
c000375a:	5b                   	pop    ebx
c000375b:	5e                   	pop    esi
c000375c:	5f                   	pop    edi
c000375d:	5d                   	pop    ebp
c000375e:	c3                   	ret    

c000375f <load_obj_xdir>:
c000375f:	53                   	push   ebx
c0003760:	89 c3                	mov    ebx,eax
c0003762:	83 ec 08             	sub    esp,0x8
c0003765:	8b 02                	mov    eax,DWORD PTR [edx]
c0003767:	89 03                	mov    DWORD PTR [ebx],eax
c0003769:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000376c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000376f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003772:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003775:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003778:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000377f:	30 c0                	xor    al,al
c0003781:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003788:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000378b:	89 d8                	mov    eax,ebx
c000378d:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003790:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003793:	e8 04 f8 ff ff       	call   c0002f9c <dir_sdi>
c0003798:	85 c0                	test   eax,eax
c000379a:	75 0b                	jne    c00037a7 <load_obj_xdir+0x48>
c000379c:	89 d8                	mov    eax,ebx
c000379e:	83 c4 08             	add    esp,0x8
c00037a1:	5b                   	pop    ebx
c00037a2:	e9 7f fe ff ff       	jmp    c0003626 <load_xdir>
c00037a7:	83 c4 08             	add    esp,0x8
c00037aa:	5b                   	pop    ebx
c00037ab:	c3                   	ret    

c00037ac <dir_read>:
c00037ac:	55                   	push   ebp
c00037ad:	bd 04 00 00 00       	mov    ebp,0x4
c00037b2:	57                   	push   edi
c00037b3:	56                   	push   esi
c00037b4:	be ff ff ff ff       	mov    esi,0xffffffff
c00037b9:	53                   	push   ebx
c00037ba:	89 c3                	mov    ebx,eax
c00037bc:	83 ec 1c             	sub    esp,0x1c
c00037bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037c3:	8b 38                	mov    edi,DWORD PTR [eax]
c00037c5:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037ca:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037cd:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037d0:	89 c8                	mov    eax,ecx
c00037d2:	09 d0                	or     eax,edx
c00037d4:	0f 84 25 01 00 00    	je     c00038ff <dir_read+0x153>
c00037da:	89 f8                	mov    eax,edi
c00037dc:	e8 3d ea ff ff       	call   c000221e <move_window>
c00037e1:	89 c5                	mov    ebp,eax
c00037e3:	85 c0                	test   eax,eax
c00037e5:	0f 85 23 01 00 00    	jne    c000390e <dir_read+0x162>
c00037eb:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037ee:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037f0:	84 c9                	test   cl,cl
c00037f2:	0f 84 11 01 00 00    	je     c0003909 <dir_read+0x15d>
c00037f8:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037fb:	75 48                	jne    c0003845 <dir_read+0x99>
c00037fd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003802:	74 10                	je     c0003814 <dir_read+0x68>
c0003804:	80 f9 83             	cmp    cl,0x83
c0003807:	0f 85 dd 00 00 00    	jne    c00038ea <dir_read+0x13e>
c000380d:	31 ed                	xor    ebp,ebp
c000380f:	e9 08 01 00 00       	jmp    c000391c <dir_read+0x170>
c0003814:	80 f9 85             	cmp    cl,0x85
c0003817:	0f 85 cd 00 00 00    	jne    c00038ea <dir_read+0x13e>
c000381d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003820:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003823:	89 d8                	mov    eax,ebx
c0003825:	e8 fc fd ff ff       	call   c0003626 <load_xdir>
c000382a:	89 c5                	mov    ebp,eax
c000382c:	85 c0                	test   eax,eax
c000382e:	0f 85 da 00 00 00    	jne    c000390e <dir_read+0x162>
c0003834:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003837:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000383a:	83 e0 3f             	and    eax,0x3f
c000383d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003840:	e9 d7 00 00 00       	jmp    c000391c <dir_read+0x170>
c0003845:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003848:	83 e0 3f             	and    eax,0x3f
c000384b:	80 f9 2e             	cmp    cl,0x2e
c000384e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003852:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003855:	0f 84 8a 00 00 00    	je     c00038e5 <dir_read+0x139>
c000385b:	80 f9 e5             	cmp    cl,0xe5
c000385e:	0f 84 81 00 00 00    	je     c00038e5 <dir_read+0x139>
c0003864:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003868:	83 e0 1f             	and    eax,0x1f
c000386b:	83 f8 08             	cmp    eax,0x8
c000386e:	0f 94 c0             	sete   al
c0003871:	0f b6 c0             	movzx  eax,al
c0003874:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003878:	75 6b                	jne    c00038e5 <dir_read+0x139>
c000387a:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000387f:	75 44                	jne    c00038c5 <dir_read+0x119>
c0003881:	f6 c1 40             	test   cl,0x40
c0003884:	74 12                	je     c0003898 <dir_read+0xec>
c0003886:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003889:	83 e1 bf             	and    ecx,0xffffffbf
c000388c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003890:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003893:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003896:	eb 06                	jmp    c000389e <dir_read+0xf2>
c0003898:	89 f0                	mov    eax,esi
c000389a:	38 c8                	cmp    al,cl
c000389c:	75 47                	jne    c00038e5 <dir_read+0x139>
c000389e:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038a2:	be ff ff ff ff       	mov    esi,0xffffffff
c00038a7:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038aa:	75 3e                	jne    c00038ea <dir_read+0x13e>
c00038ac:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038b0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038b3:	e8 8a e4 ff ff       	call   c0001d42 <pick_lfn>
c00038b8:	85 c0                	test   eax,eax
c00038ba:	74 2e                	je     c00038ea <dir_read+0x13e>
c00038bc:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038c0:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038c3:	eb 25                	jmp    c00038ea <dir_read+0x13e>
c00038c5:	89 f0                	mov    eax,esi
c00038c7:	84 c0                	test   al,al
c00038c9:	75 11                	jne    c00038dc <dir_read+0x130>
c00038cb:	89 d0                	mov    eax,edx
c00038cd:	e8 2a e6 ff ff       	call   c0001efc <sum_sfn>
c00038d2:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038d6:	0f 84 31 ff ff ff    	je     c000380d <dir_read+0x61>
c00038dc:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038e3:	eb 37                	jmp    c000391c <dir_read+0x170>
c00038e5:	be ff ff ff ff       	mov    esi,0xffffffff
c00038ea:	31 d2                	xor    edx,edx
c00038ec:	89 d8                	mov    eax,ebx
c00038ee:	e8 01 fc ff ff       	call   c00034f4 <dir_next>
c00038f3:	89 c5                	mov    ebp,eax
c00038f5:	85 c0                	test   eax,eax
c00038f7:	0f 84 cd fe ff ff    	je     c00037ca <dir_read+0x1e>
c00038fd:	eb 0f                	jmp    c000390e <dir_read+0x162>
c00038ff:	85 ed                	test   ebp,ebp
c0003901:	0f 84 06 ff ff ff    	je     c000380d <dir_read+0x61>
c0003907:	eb 05                	jmp    c000390e <dir_read+0x162>
c0003909:	bd 04 00 00 00       	mov    ebp,0x4
c000390e:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003915:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000391c:	83 c4 1c             	add    esp,0x1c
c000391f:	89 e8                	mov    eax,ebp
c0003921:	5b                   	pop    ebx
c0003922:	5e                   	pop    esi
c0003923:	5f                   	pop    edi
c0003924:	5d                   	pop    ebp
c0003925:	c3                   	ret    

c0003926 <dir_alloc>:
c0003926:	55                   	push   ebp
c0003927:	89 d5                	mov    ebp,edx
c0003929:	57                   	push   edi
c000392a:	31 d2                	xor    edx,edx
c000392c:	56                   	push   esi
c000392d:	53                   	push   ebx
c000392e:	89 c3                	mov    ebx,eax
c0003930:	83 ec 0c             	sub    esp,0xc
c0003933:	8b 38                	mov    edi,DWORD PTR [eax]
c0003935:	e8 62 f6 ff ff       	call   c0002f9c <dir_sdi>
c000393a:	85 c0                	test   eax,eax
c000393c:	75 4e                	jne    c000398c <dir_alloc+0x66>
c000393e:	31 f6                	xor    esi,esi
c0003940:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003943:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003946:	89 f8                	mov    eax,edi
c0003948:	e8 d1 e8 ff ff       	call   c000221e <move_window>
c000394d:	85 c0                	test   eax,eax
c000394f:	75 3b                	jne    c000398c <dir_alloc+0x66>
c0003951:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003954:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003957:	8a 12                	mov    dl,BYTE PTR [edx]
c0003959:	75 07                	jne    c0003962 <dir_alloc+0x3c>
c000395b:	f7 d2                	not    edx
c000395d:	c0 ea 07             	shr    dl,0x7
c0003960:	eb 0d                	jmp    c000396f <dir_alloc+0x49>
c0003962:	84 d2                	test   dl,dl
c0003964:	0f 94 c1             	sete   cl
c0003967:	80 fa e5             	cmp    dl,0xe5
c000396a:	0f 94 c2             	sete   dl
c000396d:	09 ca                	or     edx,ecx
c000396f:	84 d2                	test   dl,dl
c0003971:	74 07                	je     c000397a <dir_alloc+0x54>
c0003973:	46                   	inc    esi
c0003974:	39 ee                	cmp    esi,ebp
c0003976:	75 04                	jne    c000397c <dir_alloc+0x56>
c0003978:	eb 1c                	jmp    c0003996 <dir_alloc+0x70>
c000397a:	31 f6                	xor    esi,esi
c000397c:	ba 01 00 00 00       	mov    edx,0x1
c0003981:	89 d8                	mov    eax,ebx
c0003983:	e8 6c fb ff ff       	call   c00034f4 <dir_next>
c0003988:	85 c0                	test   eax,eax
c000398a:	74 b4                	je     c0003940 <dir_alloc+0x1a>
c000398c:	83 f8 04             	cmp    eax,0x4
c000398f:	75 05                	jne    c0003996 <dir_alloc+0x70>
c0003991:	b8 07 00 00 00       	mov    eax,0x7
c0003996:	83 c4 0c             	add    esp,0xc
c0003999:	5b                   	pop    ebx
c000399a:	5e                   	pop    esi
c000399b:	5f                   	pop    edi
c000399c:	5d                   	pop    ebp
c000399d:	c3                   	ret    

c000399e <store_xdir>:
c000399e:	55                   	push   ebp
c000399f:	57                   	push   edi
c00039a0:	89 c7                	mov    edi,eax
c00039a2:	56                   	push   esi
c00039a3:	53                   	push   ebx
c00039a4:	83 ec 0c             	sub    esp,0xc
c00039a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00039a9:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039ac:	89 e8                	mov    eax,ebp
c00039ae:	e8 5b e5 ff ff       	call   c0001f0e <xdir_sum>
c00039b3:	0f b7 d0             	movzx  edx,ax
c00039b6:	8d 45 02             	lea    eax,[ebp+0x2]
c00039b9:	e8 f4 e0 ff ff       	call   c0001ab2 <st_word>
c00039be:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039c2:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039c5:	89 f8                	mov    eax,edi
c00039c7:	e8 d0 f5 ff ff       	call   c0002f9c <dir_sdi>
c00039cc:	89 c6                	mov    esi,eax
c00039ce:	85 f6                	test   esi,esi
c00039d0:	75 3d                	jne    c0003a0f <store_xdir+0x71>
c00039d2:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039d5:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039d8:	8b 07                	mov    eax,DWORD PTR [edi]
c00039da:	e8 3f e8 ff ff       	call   c000221e <move_window>
c00039df:	89 c6                	mov    esi,eax
c00039e1:	85 c0                	test   eax,eax
c00039e3:	75 2a                	jne    c0003a0f <store_xdir+0x71>
c00039e5:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039e8:	b9 20 00 00 00       	mov    ecx,0x20
c00039ed:	89 ea                	mov    edx,ebp
c00039ef:	e8 cb e0 ff ff       	call   c0001abf <mem_cpy>
c00039f4:	8b 07                	mov    eax,DWORD PTR [edi]
c00039f6:	85 db                	test   ebx,ebx
c00039f8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039fc:	74 11                	je     c0003a0f <store_xdir+0x71>
c00039fe:	31 d2                	xor    edx,edx
c0003a00:	89 f8                	mov    eax,edi
c0003a02:	83 c5 20             	add    ebp,0x20
c0003a05:	e8 ea fa ff ff       	call   c00034f4 <dir_next>
c0003a0a:	4b                   	dec    ebx
c0003a0b:	89 c6                	mov    esi,eax
c0003a0d:	eb bf                	jmp    c00039ce <store_xdir+0x30>
c0003a0f:	89 f0                	mov    eax,esi
c0003a11:	83 fe 02             	cmp    esi,0x2
c0003a14:	76 05                	jbe    c0003a1b <store_xdir+0x7d>
c0003a16:	b8 02 00 00 00       	mov    eax,0x2
c0003a1b:	83 c4 0c             	add    esp,0xc
c0003a1e:	5b                   	pop    ebx
c0003a1f:	5e                   	pop    esi
c0003a20:	5f                   	pop    edi
c0003a21:	5d                   	pop    ebp
c0003a22:	c3                   	ret    

c0003a23 <dir_remove>:
c0003a23:	57                   	push   edi
c0003a24:	56                   	push   esi
c0003a25:	53                   	push   ebx
c0003a26:	89 c3                	mov    ebx,eax
c0003a28:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a2b:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a2d:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a30:	83 fa ff             	cmp    edx,0xffffffff
c0003a33:	74 09                	je     c0003a3e <dir_remove+0x1b>
c0003a35:	e8 62 f5 ff ff       	call   c0002f9c <dir_sdi>
c0003a3a:	85 c0                	test   eax,eax
c0003a3c:	75 41                	jne    c0003a7f <dir_remove+0x5c>
c0003a3e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a41:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a44:	89 f0                	mov    eax,esi
c0003a46:	e8 d3 e7 ff ff       	call   c000221e <move_window>
c0003a4b:	85 c0                	test   eax,eax
c0003a4d:	75 26                	jne    c0003a75 <dir_remove+0x52>
c0003a4f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a52:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a55:	75 05                	jne    c0003a5c <dir_remove+0x39>
c0003a57:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a5a:	eb 03                	jmp    c0003a5f <dir_remove+0x3c>
c0003a5c:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a5f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a63:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a66:	73 17                	jae    c0003a7f <dir_remove+0x5c>
c0003a68:	31 d2                	xor    edx,edx
c0003a6a:	89 d8                	mov    eax,ebx
c0003a6c:	e8 83 fa ff ff       	call   c00034f4 <dir_next>
c0003a71:	85 c0                	test   eax,eax
c0003a73:	74 c9                	je     c0003a3e <dir_remove+0x1b>
c0003a75:	83 f8 04             	cmp    eax,0x4
c0003a78:	75 05                	jne    c0003a7f <dir_remove+0x5c>
c0003a7a:	b8 02 00 00 00       	mov    eax,0x2
c0003a7f:	5b                   	pop    ebx
c0003a80:	5e                   	pop    esi
c0003a81:	5f                   	pop    edi
c0003a82:	c3                   	ret    

c0003a83 <create_name>:
c0003a83:	55                   	push   ebp
c0003a84:	89 d5                	mov    ebp,edx
c0003a86:	57                   	push   edi
c0003a87:	89 c7                	mov    edi,eax
c0003a89:	56                   	push   esi
c0003a8a:	31 f6                	xor    esi,esi
c0003a8c:	53                   	push   ebx
c0003a8d:	83 ec 3c             	sub    esp,0x3c
c0003a90:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a92:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a96:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a98:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a9b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a9f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003aa3:	e8 72 e0 ff ff       	call   c0001b1a <tchar2uni>
c0003aa8:	89 c3                	mov    ebx,eax
c0003aaa:	83 f8 ff             	cmp    eax,0xffffffff
c0003aad:	75 0a                	jne    c0003ab9 <create_name+0x36>
c0003aaf:	b8 06 00 00 00       	mov    eax,0x6
c0003ab4:	e9 9e 02 00 00       	jmp    c0003d57 <create_name+0x2d4>
c0003ab9:	3d ff ff 00 00       	cmp    eax,0xffff
c0003abe:	76 0c                	jbe    c0003acc <create_name+0x49>
c0003ac0:	c1 e8 10             	shr    eax,0x10
c0003ac3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ac7:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003acb:	46                   	inc    esi
c0003acc:	66 83 fb 1f          	cmp    bx,0x1f
c0003ad0:	76 4f                	jbe    c0003b21 <create_name+0x9e>
c0003ad2:	66 83 fb 5c          	cmp    bx,0x5c
c0003ad6:	74 35                	je     c0003b0d <create_name+0x8a>
c0003ad8:	66 83 fb 2f          	cmp    bx,0x2f
c0003adc:	74 2f                	je     c0003b0d <create_name+0x8a>
c0003ade:	66 83 fb 7f          	cmp    bx,0x7f
c0003ae2:	77 11                	ja     c0003af5 <create_name+0x72>
c0003ae4:	0f b7 d3             	movzx  edx,bx
c0003ae7:	b8 b2 01 02 c0       	mov    eax,0xc00201b2
c0003aec:	e8 11 e0 ff ff       	call   c0001b02 <chk_chr>
c0003af1:	85 c0                	test   eax,eax
c0003af3:	75 ba                	jne    c0003aaf <create_name+0x2c>
c0003af5:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003afb:	77 b2                	ja     c0003aaf <create_name+0x2c>
c0003afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b01:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b05:	46                   	inc    esi
c0003b06:	eb 97                	jmp    c0003a9f <create_name+0x1c>
c0003b08:	40                   	inc    eax
c0003b09:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b0d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b11:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b13:	80 fa 2f             	cmp    dl,0x2f
c0003b16:	74 f0                	je     c0003b08 <create_name+0x85>
c0003b18:	80 fa 5c             	cmp    dl,0x5c
c0003b1b:	74 eb                	je     c0003b08 <create_name+0x85>
c0003b1d:	31 db                	xor    ebx,ebx
c0003b1f:	eb 02                	jmp    c0003b23 <create_name+0xa0>
c0003b21:	b3 04                	mov    bl,0x4
c0003b23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b27:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b2a:	85 f6                	test   esi,esi
c0003b2c:	74 18                	je     c0003b46 <create_name+0xc3>
c0003b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b32:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b37:	66 83 f8 20          	cmp    ax,0x20
c0003b3b:	74 06                	je     c0003b43 <create_name+0xc0>
c0003b3d:	66 83 f8 2e          	cmp    ax,0x2e
c0003b41:	75 03                	jne    c0003b46 <create_name+0xc3>
c0003b43:	4e                   	dec    esi
c0003b44:	eb e4                	jmp    c0003b2a <create_name+0xa7>
c0003b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b4a:	31 ed                	xor    ebp,ebp
c0003b4c:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b52:	85 f6                	test   esi,esi
c0003b54:	0f 84 55 ff ff ff    	je     c0003aaf <create_name+0x2c>
c0003b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b5e:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b61:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b65:	66 83 f8 20          	cmp    ax,0x20
c0003b69:	75 04                	jne    c0003b6f <create_name+0xec>
c0003b6b:	89 d5                	mov    ebp,edx
c0003b6d:	eb eb                	jmp    c0003b5a <create_name+0xd7>
c0003b6f:	85 ed                	test   ebp,ebp
c0003b71:	75 06                	jne    c0003b79 <create_name+0xf6>
c0003b73:	66 83 f8 2e          	cmp    ax,0x2e
c0003b77:	75 08                	jne    c0003b81 <create_name+0xfe>
c0003b79:	83 cb 03             	or     ebx,0x3
c0003b7c:	eb 03                	jmp    c0003b81 <create_name+0xfe>
c0003b7e:	4e                   	dec    esi
c0003b7f:	74 0c                	je     c0003b8d <create_name+0x10a>
c0003b81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b85:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b8b:	75 f1                	jne    c0003b7e <create_name+0xfb>
c0003b8d:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b92:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b95:	ba 20 00 00 00       	mov    edx,0x20
c0003b9a:	e8 35 df ff ff       	call   c0001ad4 <mem_set>
c0003b9f:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003ba7:	31 c9                	xor    ecx,ecx
c0003ba9:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003bae:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bb1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003bb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003bb9:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bbd:	66 85 ed             	test   bp,bp
c0003bc0:	0f 84 30 01 00 00    	je     c0003cf6 <create_name+0x273>
c0003bc6:	66 83 fd 20          	cmp    bp,0x20
c0003bca:	74 10                	je     c0003bdc <create_name+0x159>
c0003bcc:	66 83 fd 2e          	cmp    bp,0x2e
c0003bd0:	75 13                	jne    c0003be5 <create_name+0x162>
c0003bd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bd6:	0f 84 6b 01 00 00    	je     c0003d47 <create_name+0x2c4>
c0003bdc:	83 cb 03             	or     ebx,0x3
c0003bdf:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003be3:	eb c9                	jmp    c0003bae <create_name+0x12b>
c0003be5:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003be9:	73 0b                	jae    c0003bf6 <create_name+0x173>
c0003beb:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bef:	75 47                	jne    c0003c38 <create_name+0x1b5>
c0003bf1:	e9 51 01 00 00       	jmp    c0003d47 <create_name+0x2c4>
c0003bf6:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bfb:	75 10                	jne    c0003c0d <create_name+0x18a>
c0003bfd:	83 cb 03             	or     ebx,0x3
c0003c00:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c08:	e9 e9 00 00 00       	jmp    c0003cf6 <create_name+0x273>
c0003c0d:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c11:	74 0d                	je     c0003c20 <create_name+0x19d>
c0003c13:	83 cb 03             	or     ebx,0x3
c0003c16:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c1a:	0f 87 d6 00 00 00    	ja     c0003cf6 <create_name+0x273>
c0003c20:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c25:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003c29:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c31:	b9 08 00 00 00       	mov    ecx,0x8
c0003c36:	eb a7                	jmp    c0003bdf <create_name+0x15c>
c0003c38:	66 83 fd 7f          	cmp    bp,0x7f
c0003c3c:	76 68                	jbe    c0003ca6 <create_name+0x223>
c0003c3e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c42:	88 da                	mov    dl,bl
c0003c44:	83 ca 02             	or     edx,0x2
c0003c47:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c4b:	50                   	push   eax
c0003c4c:	50                   	push   eax
c0003c4d:	68 b5 01 00 00       	push   0x1b5
c0003c52:	55                   	push   ebp
c0003c53:	e8 48 46 00 00       	call   c00082a0 <ff_uni2oem>
c0003c58:	83 c4 10             	add    esp,0x10
c0003c5b:	89 c5                	mov    ebp,eax
c0003c5d:	a8 80                	test   al,0x80
c0003c5f:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c63:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c67:	74 0c                	je     c0003c75 <create_name+0x1f2>
c0003c69:	83 e5 7f             	and    ebp,0x7f
c0003c6c:	0f b6 ad 00 01 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdff00]
c0003c73:	eb 2a                	jmp    c0003c9f <create_name+0x21c>
c0003c75:	66 3d ff 00          	cmp    ax,0xff
c0003c79:	76 24                	jbe    c0003c9f <create_name+0x21c>
c0003c7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c7f:	48                   	dec    eax
c0003c80:	39 c8                	cmp    eax,ecx
c0003c82:	77 0c                	ja     c0003c90 <create_name+0x20d>
c0003c84:	83 cb 03             	or     ebx,0x3
c0003c87:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c8b:	e9 4f ff ff ff       	jmp    c0003bdf <create_name+0x15c>
c0003c90:	89 e8                	mov    eax,ebp
c0003c92:	88 d3                	mov    bl,dl
c0003c94:	66 c1 e8 08          	shr    ax,0x8
c0003c98:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c9c:	41                   	inc    ecx
c0003c9d:	eb 4b                	jmp    c0003cea <create_name+0x267>
c0003c9f:	88 d3                	mov    bl,dl
c0003ca1:	66 85 ed             	test   bp,bp
c0003ca4:	74 19                	je     c0003cbf <create_name+0x23c>
c0003ca6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003caa:	0f b7 d5             	movzx  edx,bp
c0003cad:	b8 bb 01 02 c0       	mov    eax,0xc00201bb
c0003cb2:	e8 4b de ff ff       	call   c0001b02 <chk_chr>
c0003cb7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cbb:	85 c0                	test   eax,eax
c0003cbd:	74 0a                	je     c0003cc9 <create_name+0x246>
c0003cbf:	83 cb 03             	or     ebx,0x3
c0003cc2:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cc7:	eb 21                	jmp    c0003cea <create_name+0x267>
c0003cc9:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ccc:	66 83 f8 19          	cmp    ax,0x19
c0003cd0:	77 07                	ja     c0003cd9 <create_name+0x256>
c0003cd2:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003cd7:	eb 11                	jmp    c0003cea <create_name+0x267>
c0003cd9:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cdc:	66 83 f8 19          	cmp    ax,0x19
c0003ce0:	77 08                	ja     c0003cea <create_name+0x267>
c0003ce2:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ce7:	83 ed 20             	sub    ebp,0x20
c0003cea:	89 e8                	mov    eax,ebp
c0003cec:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cf0:	41                   	inc    ecx
c0003cf1:	e9 e9 fe ff ff       	jmp    c0003bdf <create_name+0x15c>
c0003cf6:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003cfa:	75 04                	jne    c0003d00 <create_name+0x27d>
c0003cfc:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003d00:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003d05:	75 05                	jne    c0003d0c <create_name+0x289>
c0003d07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d0c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d10:	83 e0 0c             	and    eax,0xc
c0003d13:	3c 0c                	cmp    al,0xc
c0003d15:	74 0b                	je     c0003d22 <create_name+0x29f>
c0003d17:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d1b:	83 e0 03             	and    eax,0x3
c0003d1e:	3c 03                	cmp    al,0x3
c0003d20:	75 05                	jne    c0003d27 <create_name+0x2a4>
c0003d22:	83 cb 02             	or     ebx,0x2
c0003d25:	eb 19                	jmp    c0003d40 <create_name+0x2bd>
c0003d27:	f6 c3 02             	test   bl,0x2
c0003d2a:	75 14                	jne    c0003d40 <create_name+0x2bd>
c0003d2c:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d31:	74 03                	je     c0003d36 <create_name+0x2b3>
c0003d33:	83 cb 10             	or     ebx,0x10
c0003d36:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d3b:	74 03                	je     c0003d40 <create_name+0x2bd>
c0003d3d:	83 cb 08             	or     ebx,0x8
c0003d40:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d43:	31 c0                	xor    eax,eax
c0003d45:	eb 10                	jmp    c0003d57 <create_name+0x2d4>
c0003d47:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d4c:	0f 85 ce fe ff ff    	jne    c0003c20 <create_name+0x19d>
c0003d52:	e9 a6 fe ff ff       	jmp    c0003bfd <create_name+0x17a>
c0003d57:	83 c4 3c             	add    esp,0x3c
c0003d5a:	5b                   	pop    ebx
c0003d5b:	5e                   	pop    esi
c0003d5c:	5f                   	pop    edi
c0003d5d:	5d                   	pop    ebp
c0003d5e:	c3                   	ret    

c0003d5f <xname_sum>:
c0003d5f:	56                   	push   esi
c0003d60:	53                   	push   ebx
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	51                   	push   ecx
c0003d64:	31 db                	xor    ebx,ebx
c0003d66:	83 c6 02             	add    esi,0x2
c0003d69:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d6d:	66 85 c0             	test   ax,ax
c0003d70:	74 1f                	je     c0003d91 <xname_sum+0x32>
c0003d72:	83 ec 0c             	sub    esp,0xc
c0003d75:	66 d1 cb             	ror    bx,1
c0003d78:	50                   	push   eax
c0003d79:	e8 1e 46 00 00       	call   c000839c <ff_wtoupper>
c0003d7e:	83 c4 10             	add    esp,0x10
c0003d81:	0f b6 d0             	movzx  edx,al
c0003d84:	66 c1 e8 08          	shr    ax,0x8
c0003d88:	01 d3                	add    ebx,edx
c0003d8a:	66 d1 cb             	ror    bx,1
c0003d8d:	01 c3                	add    ebx,eax
c0003d8f:	eb d5                	jmp    c0003d66 <xname_sum+0x7>
c0003d91:	89 d8                	mov    eax,ebx
c0003d93:	5a                   	pop    edx
c0003d94:	5b                   	pop    ebx
c0003d95:	5e                   	pop    esi
c0003d96:	c3                   	ret    

c0003d97 <create_xdir>:
c0003d97:	55                   	push   ebp
c0003d98:	b9 40 00 00 00       	mov    ecx,0x40
c0003d9d:	57                   	push   edi
c0003d9e:	bd 01 00 00 00       	mov    ebp,0x1
c0003da3:	56                   	push   esi
c0003da4:	31 ff                	xor    edi,edi
c0003da6:	53                   	push   ebx
c0003da7:	be 40 00 00 00       	mov    esi,0x40
c0003dac:	89 c3                	mov    ebx,eax
c0003dae:	83 ec 1c             	sub    esp,0x1c
c0003db1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003db5:	31 d2                	xor    edx,edx
c0003db7:	e8 18 dd ff ff       	call   c0001ad4 <mem_set>
c0003dbc:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003dbf:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003dc3:	31 c9                	xor    ecx,ecx
c0003dc5:	8d 46 01             	lea    eax,[esi+0x1]
c0003dc8:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003dcc:	83 c6 02             	add    esi,0x2
c0003dcf:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003dd3:	66 85 ed             	test   bp,bp
c0003dd6:	74 12                	je     c0003dea <create_xdir+0x53>
c0003dd8:	0f b6 c1             	movzx  eax,cl
c0003ddb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ddf:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003de3:	66 83 fd 01          	cmp    bp,0x1
c0003de7:	80 d9 ff             	sbb    cl,0xff
c0003dea:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003ded:	0f b7 d5             	movzx  edx,bp
c0003df0:	83 c6 02             	add    esi,0x2
c0003df3:	e8 ba dc ff ff       	call   c0001ab2 <st_word>
c0003df8:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dfe:	75 d3                	jne    c0003dd3 <create_xdir+0x3c>
c0003e00:	8d 47 01             	lea    eax,[edi+0x1]
c0003e03:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e07:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003e0b:	0f b6 c1             	movzx  eax,cl
c0003e0e:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003e13:	74 07                	je     c0003e1c <create_xdir+0x85>
c0003e15:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e1a:	eb a9                	jmp    c0003dc5 <create_xdir+0x2e>
c0003e1c:	8d 47 02             	lea    eax,[edi+0x2]
c0003e1f:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e22:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e25:	89 d0                	mov    eax,edx
c0003e27:	e8 33 ff ff ff       	call   c0003d5f <xname_sum>
c0003e2c:	83 c4 1c             	add    esp,0x1c
c0003e2f:	0f b7 d0             	movzx  edx,ax
c0003e32:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e35:	5b                   	pop    ebx
c0003e36:	5e                   	pop    esi
c0003e37:	5f                   	pop    edi
c0003e38:	5d                   	pop    ebp
c0003e39:	e9 74 dc ff ff       	jmp    c0001ab2 <st_word>

c0003e3e <cmp_lfn>:
c0003e3e:	55                   	push   ebp
c0003e3f:	57                   	push   edi
c0003e40:	89 d7                	mov    edi,edx
c0003e42:	56                   	push   esi
c0003e43:	53                   	push   ebx
c0003e44:	83 ec 1c             	sub    esp,0x1c
c0003e47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e4b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e4e:	e8 ed db ff ff       	call   c0001a40 <ld_word>
c0003e53:	66 85 c0             	test   ax,ax
c0003e56:	74 07                	je     c0003e5f <cmp_lfn+0x21>
c0003e58:	31 c0                	xor    eax,eax
c0003e5a:	e9 9a 00 00 00       	jmp    c0003ef9 <cmp_lfn+0xbb>
c0003e5f:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e61:	bd 01 00 00 00       	mov    ebp,0x1
c0003e66:	83 e3 3f             	and    ebx,0x3f
c0003e69:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e71:	4b                   	dec    ebx
c0003e72:	6b db 0d             	imul   ebx,ebx,0xd
c0003e75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e79:	0f b6 80 80 01 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfe80]
c0003e80:	01 f8                	add    eax,edi
c0003e82:	e8 b9 db ff ff       	call   c0001a40 <ld_word>
c0003e87:	66 85 ed             	test   bp,bp
c0003e8a:	89 c6                	mov    esi,eax
c0003e8c:	74 3c                	je     c0003eca <cmp_lfn+0x8c>
c0003e8e:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e94:	77 c2                	ja     c0003e58 <cmp_lfn+0x1a>
c0003e96:	83 ec 0c             	sub    esp,0xc
c0003e99:	0f b7 c0             	movzx  eax,ax
c0003e9c:	50                   	push   eax
c0003e9d:	e8 fa 44 00 00       	call   c000839c <ff_wtoupper>
c0003ea2:	89 c5                	mov    ebp,eax
c0003ea4:	8d 43 01             	lea    eax,[ebx+0x1]
c0003ea7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003eab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003eaf:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003eb3:	89 04 24             	mov    DWORD PTR [esp],eax
c0003eb6:	e8 e1 44 00 00       	call   c000839c <ff_wtoupper>
c0003ebb:	83 c4 10             	add    esp,0x10
c0003ebe:	39 c5                	cmp    ebp,eax
c0003ec0:	75 96                	jne    c0003e58 <cmp_lfn+0x1a>
c0003ec2:	89 f5                	mov    ebp,esi
c0003ec4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ec8:	eb 04                	jmp    c0003ece <cmp_lfn+0x90>
c0003eca:	66 46                	inc    si
c0003ecc:	75 8a                	jne    c0003e58 <cmp_lfn+0x1a>
c0003ece:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ed2:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ed7:	75 9c                	jne    c0003e75 <cmp_lfn+0x37>
c0003ed9:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003edc:	74 16                	je     c0003ef4 <cmp_lfn+0xb6>
c0003ede:	66 85 ed             	test   bp,bp
c0003ee1:	74 11                	je     c0003ef4 <cmp_lfn+0xb6>
c0003ee3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ee7:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003eec:	0f 94 c0             	sete   al
c0003eef:	0f b6 c0             	movzx  eax,al
c0003ef2:	eb 05                	jmp    c0003ef9 <cmp_lfn+0xbb>
c0003ef4:	b8 01 00 00 00       	mov    eax,0x1
c0003ef9:	83 c4 1c             	add    esp,0x1c
c0003efc:	5b                   	pop    ebx
c0003efd:	5e                   	pop    esi
c0003efe:	5f                   	pop    edi
c0003eff:	5d                   	pop    ebp
c0003f00:	c3                   	ret    

c0003f01 <dir_find>:
c0003f01:	55                   	push   ebp
c0003f02:	31 d2                	xor    edx,edx
c0003f04:	57                   	push   edi
c0003f05:	56                   	push   esi
c0003f06:	53                   	push   ebx
c0003f07:	89 c3                	mov    ebx,eax
c0003f09:	83 ec 1c             	sub    esp,0x1c
c0003f0c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003f0e:	e8 89 f0 ff ff       	call   c0002f9c <dir_sdi>
c0003f13:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f16:	85 c0                	test   eax,eax
c0003f18:	0f 85 9e 01 00 00    	jne    c00040bc <dir_find+0x1bb>
c0003f1e:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f21:	0f 85 8d 00 00 00    	jne    c0003fb4 <dir_find+0xb3>
c0003f27:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f2a:	e8 30 fe ff ff       	call   c0003d5f <xname_sum>
c0003f2f:	89 c7                	mov    edi,eax
c0003f31:	31 d2                	xor    edx,edx
c0003f33:	89 d8                	mov    eax,ebx
c0003f35:	e8 72 f8 ff ff       	call   c00037ac <dir_read>
c0003f3a:	85 c0                	test   eax,eax
c0003f3c:	0f 85 5e 01 00 00    	jne    c00040a0 <dir_find+0x19f>
c0003f42:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f45:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f48:	e8 f3 da ff ff       	call   c0001a40 <ld_word>
c0003f4d:	66 39 f8             	cmp    ax,di
c0003f50:	75 df                	jne    c0003f31 <dir_find+0x30>
c0003f52:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f55:	31 ed                	xor    ebp,ebp
c0003f57:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f5b:	ba 40 00 00 00       	mov    edx,0x40
c0003f60:	89 e9                	mov    ecx,ebp
c0003f62:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f66:	0f 84 42 01 00 00    	je     c00040ae <dir_find+0x1ad>
c0003f6c:	f6 c2 1f             	test   dl,0x1f
c0003f6f:	75 03                	jne    c0003f74 <dir_find+0x73>
c0003f71:	83 c2 02             	add    edx,0x2
c0003f74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f78:	89 d0                	mov    eax,edx
c0003f7a:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f7d:	e8 be da ff ff       	call   c0001a40 <ld_word>
c0003f82:	83 ec 0c             	sub    esp,0xc
c0003f85:	0f b7 c0             	movzx  eax,ax
c0003f88:	50                   	push   eax
c0003f89:	e8 0e 44 00 00       	call   c000839c <ff_wtoupper>
c0003f8e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f92:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f95:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f99:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f9c:	e8 fb 43 00 00       	call   c000839c <ff_wtoupper>
c0003fa1:	83 c4 10             	add    esp,0x10
c0003fa4:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003fa8:	75 87                	jne    c0003f31 <dir_find+0x30>
c0003faa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003fae:	45                   	inc    ebp
c0003faf:	83 c2 02             	add    edx,0x2
c0003fb2:	eb ac                	jmp    c0003f60 <dir_find+0x5f>
c0003fb4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fbb:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fc0:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fc5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fc8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fcb:	89 f0                	mov    eax,esi
c0003fcd:	e8 4c e2 ff ff       	call   c000221e <move_window>
c0003fd2:	85 c0                	test   eax,eax
c0003fd4:	0f 85 c6 00 00 00    	jne    c00040a0 <dir_find+0x19f>
c0003fda:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fdd:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fe0:	84 c9                	test   cl,cl
c0003fe2:	0f 84 bd 00 00 00    	je     c00040a5 <dir_find+0x1a4>
c0003fe8:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003feb:	88 d0                	mov    al,dl
c0003fed:	83 e0 3f             	and    eax,0x3f
c0003ff0:	80 f9 e5             	cmp    cl,0xe5
c0003ff3:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ff6:	0f 84 87 00 00 00    	je     c0004083 <dir_find+0x182>
c0003ffc:	80 e2 08             	and    dl,0x8
c0003fff:	74 06                	je     c0004007 <dir_find+0x106>
c0004001:	3c 0f                	cmp    al,0xf
c0004003:	75 7e                	jne    c0004083 <dir_find+0x182>
c0004005:	eb 04                	jmp    c000400b <dir_find+0x10a>
c0004007:	3c 0f                	cmp    al,0xf
c0004009:	75 4c                	jne    c0004057 <dir_find+0x156>
c000400b:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000400f:	75 7e                	jne    c000408f <dir_find+0x18e>
c0004011:	f6 c1 40             	test   cl,0x40
c0004014:	74 12                	je     c0004028 <dir_find+0x127>
c0004016:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004019:	83 e1 bf             	and    ecx,0xffffffbf
c000401c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004020:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004023:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004026:	eb 06                	jmp    c000402e <dir_find+0x12d>
c0004028:	89 f8                	mov    eax,edi
c000402a:	38 c8                	cmp    al,cl
c000402c:	75 5c                	jne    c000408a <dir_find+0x189>
c000402e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004032:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004037:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000403a:	75 53                	jne    c000408f <dir_find+0x18e>
c000403c:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004040:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004043:	89 ea                	mov    edx,ebp
c0004045:	e8 f4 fd ff ff       	call   c0003e3e <cmp_lfn>
c000404a:	85 c0                	test   eax,eax
c000404c:	74 41                	je     c000408f <dir_find+0x18e>
c000404e:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004052:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004055:	eb 38                	jmp    c000408f <dir_find+0x18e>
c0004057:	89 f8                	mov    eax,edi
c0004059:	84 c0                	test   al,al
c000405b:	75 0d                	jne    c000406a <dir_find+0x169>
c000405d:	89 e8                	mov    eax,ebp
c000405f:	e8 98 de ff ff       	call   c0001efc <sum_sfn>
c0004064:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004068:	74 52                	je     c00040bc <dir_find+0x1bb>
c000406a:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000406e:	75 13                	jne    c0004083 <dir_find+0x182>
c0004070:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004073:	b9 0b 00 00 00       	mov    ecx,0xb
c0004078:	89 e8                	mov    eax,ebp
c000407a:	e8 60 da ff ff       	call   c0001adf <mem_cmp>
c000407f:	85 c0                	test   eax,eax
c0004081:	74 39                	je     c00040bc <dir_find+0x1bb>
c0004083:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000408a:	bf ff ff ff ff       	mov    edi,0xffffffff
c000408f:	31 d2                	xor    edx,edx
c0004091:	89 d8                	mov    eax,ebx
c0004093:	e8 5c f4 ff ff       	call   c00034f4 <dir_next>
c0004098:	85 c0                	test   eax,eax
c000409a:	0f 84 25 ff ff ff    	je     c0003fc5 <dir_find+0xc4>
c00040a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00040a3:	eb 17                	jmp    c00040bc <dir_find+0x1bb>
c00040a5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00040ac:	eb 0e                	jmp    c00040bc <dir_find+0x1bb>
c00040ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b1:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00040b6:	0f 85 75 fe ff ff    	jne    c0003f31 <dir_find+0x30>
c00040bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040bf:	83 c4 1c             	add    esp,0x1c
c00040c2:	5b                   	pop    ebx
c00040c3:	5e                   	pop    esi
c00040c4:	5f                   	pop    edi
c00040c5:	5d                   	pop    ebp
c00040c6:	c3                   	ret    

c00040c7 <dir_register>:
c00040c7:	55                   	push   ebp
c00040c8:	57                   	push   edi
c00040c9:	56                   	push   esi
c00040ca:	be 06 00 00 00       	mov    esi,0x6
c00040cf:	53                   	push   ebx
c00040d0:	83 ec 6c             	sub    esp,0x6c
c00040d3:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040d7:	0f 85 62 02 00 00    	jne    c000433f <dir_register+0x278>
c00040dd:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040df:	31 ff                	xor    edi,edi
c00040e1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040e4:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040e9:	74 03                	je     c00040ee <dir_register+0x27>
c00040eb:	47                   	inc    edi
c00040ec:	eb f6                	jmp    c00040e4 <dir_register+0x1d>
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040f4:	0f 85 e1 00 00 00    	jne    c00041db <dir_register+0x114>
c00040fa:	83 c7 0e             	add    edi,0xe
c00040fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0004102:	89 f8                	mov    eax,edi
c0004104:	31 d2                	xor    edx,edx
c0004106:	f7 f1                	div    ecx
c0004108:	8d 50 02             	lea    edx,[eax+0x2]
c000410b:	89 c7                	mov    edi,eax
c000410d:	89 d8                	mov    eax,ebx
c000410f:	e8 12 f8 ff ff       	call   c0003926 <dir_alloc>
c0004114:	89 c6                	mov    esi,eax
c0004116:	85 c0                	test   eax,eax
c0004118:	0f 85 21 02 00 00    	jne    c000433f <dir_register+0x278>
c000411e:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004124:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004127:	c1 e7 05             	shl    edi,0x5
c000412a:	29 f8                	sub    eax,edi
c000412c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000412f:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004132:	a8 04                	test   al,0x4
c0004134:	0f 84 91 00 00 00    	je     c00041cb <dir_register+0x104>
c000413a:	83 e0 fb             	and    eax,0xfffffffb
c000413d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004140:	89 d8                	mov    eax,ebx
c0004142:	e8 25 ec ff ff       	call   c0002d6c <fill_first_frag>
c0004147:	85 c0                	test   eax,eax
c0004149:	0f 85 ee 01 00 00    	jne    c000433d <dir_register+0x276>
c000414f:	83 c9 ff             	or     ecx,0xffffffff
c0004152:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004155:	89 d8                	mov    eax,ebx
c0004157:	e8 db eb ff ff       	call   c0002d37 <fill_last_frag>
c000415c:	85 c0                	test   eax,eax
c000415e:	0f 85 d9 01 00 00    	jne    c000433d <dir_register+0x276>
c0004164:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004168:	74 61                	je     c00041cb <dir_register+0x104>
c000416a:	89 da                	mov    edx,ebx
c000416c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004170:	e8 ea f5 ff ff       	call   c000375f <load_obj_xdir>
c0004175:	85 c0                	test   eax,eax
c0004177:	0f 85 c0 01 00 00    	jne    c000433d <dir_register+0x276>
c000417d:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004181:	31 c9                	xor    ecx,ecx
c0004183:	c1 e2 09             	shl    edx,0x9
c0004186:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004189:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000418c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000418f:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004192:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004195:	83 c0 38             	add    eax,0x38
c0004198:	e8 1c d9 ff ff       	call   c0001ab9 <st_qword>
c000419d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00041a3:	83 c0 28             	add    eax,0x28
c00041a6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00041a9:	e8 0b d9 ff ff       	call   c0001ab9 <st_qword>
c00041ae:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00041b1:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00041b4:	83 c8 01             	or     eax,0x1
c00041b7:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041be:	e8 db f7 ff ff       	call   c000399e <store_xdir>
c00041c3:	85 c0                	test   eax,eax
c00041c5:	0f 85 72 01 00 00    	jne    c000433d <dir_register+0x276>
c00041cb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ce:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041d1:	e8 c1 fb ff ff       	call   c0003d97 <create_xdir>
c00041d6:	e9 64 01 00 00       	jmp    c000433f <dir_register+0x278>
c00041db:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041de:	b9 0c 00 00 00       	mov    ecx,0xc
c00041e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041e7:	89 c2                	mov    edx,eax
c00041e9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041ed:	e8 cd d8 ff ff       	call   c0001abf <mem_cpy>
c00041f2:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041f7:	74 58                	je     c0004251 <dir_register+0x18a>
c00041f9:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041fd:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004205:	83 ec 0c             	sub    esp,0xc
c0004208:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000420b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000420f:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004213:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004217:	e8 24 dc ff ff       	call   c0001e40 <gen_numname>
c000421c:	89 d8                	mov    eax,ebx
c000421e:	e8 de fc ff ff       	call   c0003f01 <dir_find>
c0004223:	83 c4 10             	add    esp,0x10
c0004226:	89 c6                	mov    esi,eax
c0004228:	85 c0                	test   eax,eax
c000422a:	75 15                	jne    c0004241 <dir_register+0x17a>
c000422c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004230:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004235:	75 ce                	jne    c0004205 <dir_register+0x13e>
c0004237:	be 07 00 00 00       	mov    esi,0x7
c000423c:	e9 fe 00 00 00       	jmp    c000433f <dir_register+0x278>
c0004241:	83 f8 04             	cmp    eax,0x4
c0004244:	0f 85 f5 00 00 00    	jne    c000433f <dir_register+0x278>
c000424a:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000424e:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004251:	b9 01 00 00 00       	mov    ecx,0x1
c0004256:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000425b:	74 0f                	je     c000426c <dir_register+0x1a5>
c000425d:	b9 0d 00 00 00       	mov    ecx,0xd
c0004262:	8d 47 0c             	lea    eax,[edi+0xc]
c0004265:	31 d2                	xor    edx,edx
c0004267:	f7 f1                	div    ecx
c0004269:	8d 48 01             	lea    ecx,[eax+0x1]
c000426c:	89 ca                	mov    edx,ecx
c000426e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004272:	89 d8                	mov    eax,ebx
c0004274:	e8 ad f6 ff ff       	call   c0003926 <dir_alloc>
c0004279:	89 c6                	mov    esi,eax
c000427b:	85 c0                	test   eax,eax
c000427d:	0f 85 bc 00 00 00    	jne    c000433f <dir_register+0x278>
c0004283:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004287:	49                   	dec    ecx
c0004288:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000428c:	74 6a                	je     c00042f8 <dir_register+0x231>
c000428e:	89 c8                	mov    eax,ecx
c0004290:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004293:	c1 e0 05             	shl    eax,0x5
c0004296:	29 c2                	sub    edx,eax
c0004298:	89 d8                	mov    eax,ebx
c000429a:	e8 fd ec ff ff       	call   c0002f9c <dir_sdi>
c000429f:	89 c6                	mov    esi,eax
c00042a1:	85 c0                	test   eax,eax
c00042a3:	0f 85 96 00 00 00    	jne    c000433f <dir_register+0x278>
c00042a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00042ad:	e8 4a dc ff ff       	call   c0001efc <sum_sfn>
c00042b2:	0f b6 f8             	movzx  edi,al
c00042b5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042b8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042bb:	89 e8                	mov    eax,ebp
c00042bd:	e8 5c df ff ff       	call   c000221e <move_window>
c00042c2:	89 c6                	mov    esi,eax
c00042c4:	85 c0                	test   eax,eax
c00042c6:	75 77                	jne    c000433f <dir_register+0x278>
c00042c8:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00042cd:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042d0:	83 ec 0c             	sub    esp,0xc
c00042d3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042d6:	57                   	push   edi
c00042d7:	e8 e0 da ff ff       	call   c0001dbc <put_lfn>
c00042dc:	31 d2                	xor    edx,edx
c00042de:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042e2:	89 d8                	mov    eax,ebx
c00042e4:	e8 0b f2 ff ff       	call   c00034f4 <dir_next>
c00042e9:	83 c4 10             	add    esp,0x10
c00042ec:	89 c6                	mov    esi,eax
c00042ee:	85 c0                	test   eax,eax
c00042f0:	75 4d                	jne    c000433f <dir_register+0x278>
c00042f2:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042f6:	75 bd                	jne    c00042b5 <dir_register+0x1ee>
c00042f8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042fb:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	e8 19 df ff ff       	call   c000221e <move_window>
c0004305:	89 c6                	mov    esi,eax
c0004307:	85 c0                	test   eax,eax
c0004309:	75 34                	jne    c000433f <dir_register+0x278>
c000430b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000430e:	b9 20 00 00 00       	mov    ecx,0x20
c0004313:	31 d2                	xor    edx,edx
c0004315:	e8 ba d7 ff ff       	call   c0001ad4 <mem_set>
c000431a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000431d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004321:	b9 0b 00 00 00       	mov    ecx,0xb
c0004326:	e8 94 d7 ff ff       	call   c0001abf <mem_cpy>
c000432b:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000432e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004331:	83 e0 18             	and    eax,0x18
c0004334:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004337:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000433b:	eb 02                	jmp    c000433f <dir_register+0x278>
c000433d:	89 c6                	mov    esi,eax
c000433f:	83 c4 6c             	add    esp,0x6c
c0004342:	89 f0                	mov    eax,esi
c0004344:	5b                   	pop    ebx
c0004345:	5e                   	pop    esi
c0004346:	5f                   	pop    edi
c0004347:	5d                   	pop    ebp
c0004348:	c3                   	ret    

c0004349 <sync_fs>:
c0004349:	56                   	push   esi
c000434a:	53                   	push   ebx
c000434b:	53                   	push   ebx
c000434c:	89 c3                	mov    ebx,eax
c000434e:	e8 37 de ff ff       	call   c000218a <sync_window>
c0004353:	85 c0                	test   eax,eax
c0004355:	0f 85 b1 00 00 00    	jne    c000440c <sync_fs+0xc3>
c000435b:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000435e:	0f 85 8e 00 00 00    	jne    c00043f2 <sync_fs+0xa9>
c0004364:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004368:	0f 85 84 00 00 00    	jne    c00043f2 <sync_fs+0xa9>
c000436e:	b9 00 02 00 00       	mov    ecx,0x200
c0004373:	8d 73 54             	lea    esi,[ebx+0x54]
c0004376:	31 d2                	xor    edx,edx
c0004378:	89 f0                	mov    eax,esi
c000437a:	e8 55 d7 ff ff       	call   c0001ad4 <mem_set>
c000437f:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004385:	ba 55 aa 00 00       	mov    edx,0xaa55
c000438a:	e8 23 d7 ff ff       	call   c0001ab2 <st_word>
c000438f:	ba 52 52 61 41       	mov    edx,0x41615252
c0004394:	89 f0                	mov    eax,esi
c0004396:	e8 1b d7 ff ff       	call   c0001ab6 <st_dword>
c000439b:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00043a1:	ba 72 72 41 61       	mov    edx,0x61417272
c00043a6:	e8 0b d7 ff ff       	call   c0001ab6 <st_dword>
c00043ab:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043ae:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00043b4:	e8 fd d6 ff ff       	call   c0001ab6 <st_dword>
c00043b9:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043bc:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043c2:	e8 ef d6 ff ff       	call   c0001ab6 <st_dword>
c00043c7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043ca:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043cd:	83 c0 01             	add    eax,0x1
c00043d0:	83 d2 00             	adc    edx,0x0
c00043d3:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043d6:	83 ec 0c             	sub    esp,0xc
c00043d9:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043dc:	6a 01                	push   0x1
c00043de:	52                   	push   edx
c00043df:	50                   	push   eax
c00043e0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043e4:	56                   	push   esi
c00043e5:	50                   	push   eax
c00043e6:	e8 20 d6 ff ff       	call   c0001a0b <disk_write>
c00043eb:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043ef:	83 c4 20             	add    esp,0x20
c00043f2:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043f6:	51                   	push   ecx
c00043f7:	6a 00                	push   0x0
c00043f9:	6a 00                	push   0x0
c00043fb:	50                   	push   eax
c00043fc:	e8 20 d6 ff ff       	call   c0001a21 <disk_ioctl>
c0004401:	83 c4 10             	add    esp,0x10
c0004404:	85 c0                	test   eax,eax
c0004406:	0f 95 c0             	setne  al
c0004409:	0f b6 c0             	movzx  eax,al
c000440c:	5a                   	pop    edx
c000440d:	5b                   	pop    ebx
c000440e:	5e                   	pop    esi
c000440f:	c3                   	ret    

c0004410 <create_partition>:
c0004410:	55                   	push   ebp
c0004411:	0f b6 c0             	movzx  eax,al
c0004414:	57                   	push   edi
c0004415:	56                   	push   esi
c0004416:	53                   	push   ebx
c0004417:	83 ec 60             	sub    esp,0x60
c000441a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000441e:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004422:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004426:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000442a:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000442e:	50                   	push   eax
c000442f:	6a 01                	push   0x1
c0004431:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004435:	e8 e7 d5 ff ff       	call   c0001a21 <disk_ioctl>
c000443a:	83 c4 10             	add    esp,0x10
c000443d:	85 c0                	test   eax,eax
c000443f:	74 0a                	je     c000444b <create_partition+0x3b>
c0004441:	b8 01 00 00 00       	mov    eax,0x1
c0004446:	e9 67 05 00 00       	jmp    c00049b2 <create_partition+0x5a2>
c000444b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000444f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004453:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004457:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000445b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004460:	0f 86 ed 03 00 00    	jbe    c0004853 <create_partition+0x443>
c0004466:	83 c0 df             	add    eax,0xffffffdf
c0004469:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004471:	83 d2 ff             	adc    edx,0xffffffff
c0004474:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004478:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000447c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004480:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004484:	83 c0 bd             	add    eax,0xffffffbd
c0004487:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000448e:	83 d2 ff             	adc    edx,0xffffffff
c0004491:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004495:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004499:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044a1:	be 22 00 00 00       	mov    esi,0x22
c00044a6:	31 ff                	xor    edi,edi
c00044a8:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00044b0:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044b8:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044c0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044c4:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044ca:	75 0e                	jne    c00044da <create_partition+0xca>
c00044cc:	b9 00 02 00 00       	mov    ecx,0x200
c00044d1:	31 d2                	xor    edx,edx
c00044d3:	89 d8                	mov    eax,ebx
c00044d5:	e8 fa d5 ff ff       	call   c0001ad4 <mem_set>
c00044da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044de:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044e6:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044e9:	0f 84 23 01 00 00    	je     c0004612 <create_partition+0x202>
c00044ef:	89 f0                	mov    eax,esi
c00044f1:	89 fa                	mov    edx,edi
c00044f3:	05 ff 07 00 00       	add    eax,0x7ff
c00044f8:	83 d2 00             	adc    edx,0x0
c00044fb:	89 c1                	mov    ecx,eax
c00044fd:	89 d7                	mov    edi,edx
c00044ff:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004505:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004509:	89 ce                	mov    esi,ecx
c000450b:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000450f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004513:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004517:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000451a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000451e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004521:	b8 64 00 00 00       	mov    eax,0x64
c0004526:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004529:	b8 00 00 00 00       	mov    eax,0x0
c000452e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004532:	72 41                	jb     c0004575 <create_partition+0x165>
c0004534:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004538:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000453c:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004540:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004545:	01 c1                	add    ecx,eax
c0004547:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000454b:	f7 24 24             	mul    DWORD PTR [esp]
c000454e:	6a 00                	push   0x0
c0004550:	01 ca                	add    edx,ecx
c0004552:	6a 64                	push   0x64
c0004554:	52                   	push   edx
c0004555:	50                   	push   eax
c0004556:	e8 01 ac 01 00       	call   c001f15c <__udivdi3>
c000455b:	83 c4 10             	add    esp,0x10
c000455e:	05 ff 07 00 00       	add    eax,0x7ff
c0004563:	83 d2 00             	adc    edx,0x0
c0004566:	89 c1                	mov    ecx,eax
c0004568:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000456c:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004572:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004575:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004578:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000457c:	01 f0                	add    eax,esi
c000457e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004582:	11 fa                	adc    edx,edi
c0004584:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004588:	19 d1                	sbb    ecx,edx
c000458a:	73 2e                	jae    c00045ba <create_partition+0x1aa>
c000458c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004590:	89 f8                	mov    eax,edi
c0004592:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004599:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000459d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045a5:	73 6b                	jae    c0004612 <create_partition+0x202>
c00045a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00045ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00045af:	29 f0                	sub    eax,esi
c00045b1:	19 fa                	sbb    edx,edi
c00045b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00045b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045be:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045c1:	74 4f                	je     c0004612 <create_partition+0x202>
c00045c3:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045c6:	b9 10 00 00 00       	mov    ecx,0x10
c00045cb:	ba 90 01 02 c0       	mov    edx,0xc0020190
c00045d0:	e8 ea d4 ff ff       	call   c0001abf <mem_cpy>
c00045d5:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045d9:	b9 10 00 00 00       	mov    ecx,0x10
c00045de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045e2:	e8 2c db ff ff       	call   c0002113 <make_rand>
c00045e7:	89 f2                	mov    edx,esi
c00045e9:	89 f9                	mov    ecx,edi
c00045eb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045ef:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045f3:	e8 c1 d4 ff ff       	call   c0001ab9 <st_qword>
c00045f8:	03 34 24             	add    esi,DWORD PTR [esp]
c00045fb:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045ff:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004603:	89 f2                	mov    edx,esi
c0004605:	89 f9                	mov    ecx,edi
c0004607:	83 c2 ff             	add    edx,0xffffffff
c000460a:	83 d1 ff             	adc    ecx,0xffffffff
c000460d:	e8 a7 d4 ff ff       	call   c0001ab9 <st_qword>
c0004612:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004616:	83 e8 80             	sub    eax,0xffffff80
c0004619:	89 c5                	mov    ebp,eax
c000461b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000461f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004625:	75 6b                	jne    c0004692 <create_partition+0x282>
c0004627:	45                   	inc    ebp
c0004628:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000462c:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004631:	e8 39 da ff ff       	call   c000206f <crc32>
c0004636:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000463c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004640:	75 e5                	jne    c0004627 <create_partition+0x217>
c0004642:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004646:	31 d2                	xor    edx,edx
c0004648:	83 ec 0c             	sub    esp,0xc
c000464b:	c1 ed 09             	shr    ebp,0x9
c000464e:	6a 01                	push   0x1
c0004650:	8d 45 02             	lea    eax,[ebp+0x2]
c0004653:	52                   	push   edx
c0004654:	50                   	push   eax
c0004655:	53                   	push   ebx
c0004656:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000465a:	e8 ac d3 ff ff       	call   c0001a0b <disk_write>
c000465f:	83 c4 20             	add    esp,0x20
c0004662:	85 c0                	test   eax,eax
c0004664:	0f 85 d7 fd ff ff    	jne    c0004441 <create_partition+0x31>
c000466a:	83 ec 0c             	sub    esp,0xc
c000466d:	31 d2                	xor    edx,edx
c000466f:	6a 01                	push   0x1
c0004671:	89 e8                	mov    eax,ebp
c0004673:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004677:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000467b:	52                   	push   edx
c000467c:	50                   	push   eax
c000467d:	53                   	push   ebx
c000467e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004682:	e8 84 d3 ff ff       	call   c0001a0b <disk_write>
c0004687:	83 c4 20             	add    esp,0x20
c000468a:	85 c0                	test   eax,eax
c000468c:	0f 85 af fd ff ff    	jne    c0004441 <create_partition+0x31>
c0004692:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004696:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000469a:	3d 00 40 00 00       	cmp    eax,0x4000
c000469f:	74 0d                	je     c00046ae <create_partition+0x29e>
c00046a1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00046a5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00046a9:	e9 12 fe ff ff       	jmp    c00044c0 <create_partition+0xb0>
c00046ae:	31 d2                	xor    edx,edx
c00046b0:	b9 00 02 00 00       	mov    ecx,0x200
c00046b5:	89 d8                	mov    eax,ebx
c00046b7:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046ba:	e8 15 d4 ff ff       	call   c0001ad4 <mem_set>
c00046bf:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046c2:	b9 10 00 00 00       	mov    ecx,0x10
c00046c7:	ba 80 00 02 c0       	mov    edx,0xc0020080
c00046cc:	89 d8                	mov    eax,ebx
c00046ce:	e8 ec d3 ff ff       	call   c0001abf <mem_cpy>
c00046d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046d7:	8d 43 58             	lea    eax,[ebx+0x58]
c00046da:	f7 d2                	not    edx
c00046dc:	e8 d5 d3 ff ff       	call   c0001ab6 <st_dword>
c00046e1:	8d 43 18             	lea    eax,[ebx+0x18]
c00046e4:	31 c9                	xor    ecx,ecx
c00046e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00046e9:	ba 01 00 00 00       	mov    edx,0x1
c00046ee:	e8 c6 d3 ff ff       	call   c0001ab9 <st_qword>
c00046f3:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046f7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046fb:	83 c2 ff             	add    edx,0xffffffff
c00046fe:	89 e8                	mov    eax,ebp
c0004700:	83 d1 ff             	adc    ecx,0xffffffff
c0004703:	e8 b1 d3 ff ff       	call   c0001ab9 <st_qword>
c0004708:	31 c9                	xor    ecx,ecx
c000470a:	8d 43 28             	lea    eax,[ebx+0x28]
c000470d:	ba 22 00 00 00       	mov    edx,0x22
c0004712:	e8 a2 d3 ff ff       	call   c0001ab9 <st_qword>
c0004717:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000471b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000471f:	83 c2 de             	add    edx,0xffffffde
c0004722:	8d 43 30             	lea    eax,[ebx+0x30]
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	31 f6                	xor    esi,esi
c000472a:	e8 8a d3 ff ff       	call   c0001ab9 <st_qword>
c000472f:	8d 43 54             	lea    eax,[ebx+0x54]
c0004732:	ba 80 00 00 00       	mov    edx,0x80
c0004737:	e8 7a d3 ff ff       	call   c0001ab6 <st_dword>
c000473c:	8d 43 50             	lea    eax,[ebx+0x50]
c000473f:	ba 80 00 00 00       	mov    edx,0x80
c0004744:	e8 6d d3 ff ff       	call   c0001ab6 <st_dword>
c0004749:	ba 02 00 00 00       	mov    edx,0x2
c000474e:	89 f8                	mov    eax,edi
c0004750:	e8 61 d3 ff ff       	call   c0001ab6 <st_dword>
c0004755:	8d 53 38             	lea    edx,[ebx+0x38]
c0004758:	b9 10 00 00 00       	mov    ecx,0x10
c000475d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004761:	e8 ad d9 ff ff       	call   c0002113 <make_rand>
c0004766:	83 c8 ff             	or     eax,0xffffffff
c0004769:	46                   	inc    esi
c000476a:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000476f:	e8 fb d8 ff ff       	call   c000206f <crc32>
c0004774:	83 fe 5c             	cmp    esi,0x5c
c0004777:	75 f0                	jne    c0004769 <create_partition+0x359>
c0004779:	f7 d0                	not    eax
c000477b:	8d 73 10             	lea    esi,[ebx+0x10]
c000477e:	89 c2                	mov    edx,eax
c0004780:	89 f0                	mov    eax,esi
c0004782:	e8 2f d3 ff ff       	call   c0001ab6 <st_dword>
c0004787:	83 ec 0c             	sub    esp,0xc
c000478a:	6a 01                	push   0x1
c000478c:	6a 00                	push   0x0
c000478e:	6a 01                	push   0x1
c0004790:	53                   	push   ebx
c0004791:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004795:	e8 71 d2 ff ff       	call   c0001a0b <disk_write>
c000479a:	83 c4 20             	add    esp,0x20
c000479d:	85 c0                	test   eax,eax
c000479f:	0f 85 9c fc ff ff    	jne    c0004441 <create_partition+0x31>
c00047a5:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00047a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00047ad:	83 c2 ff             	add    edx,0xffffffff
c00047b0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047b3:	83 d1 ff             	adc    ecx,0xffffffff
c00047b6:	e8 fe d2 ff ff       	call   c0001ab9 <st_qword>
c00047bb:	ba 01 00 00 00       	mov    edx,0x1
c00047c0:	31 c9                	xor    ecx,ecx
c00047c2:	89 e8                	mov    eax,ebp
c00047c4:	e8 f0 d2 ff ff       	call   c0001ab9 <st_qword>
c00047c9:	89 f8                	mov    eax,edi
c00047cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047cf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047d3:	31 ff                	xor    edi,edi
c00047d5:	e8 df d2 ff ff       	call   c0001ab9 <st_qword>
c00047da:	89 f0                	mov    eax,esi
c00047dc:	31 d2                	xor    edx,edx
c00047de:	e8 d3 d2 ff ff       	call   c0001ab6 <st_dword>
c00047e3:	83 c8 ff             	or     eax,0xffffffff
c00047e6:	47                   	inc    edi
c00047e7:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047ec:	e8 7e d8 ff ff       	call   c000206f <crc32>
c00047f1:	83 ff 5c             	cmp    edi,0x5c
c00047f4:	75 f0                	jne    c00047e6 <create_partition+0x3d6>
c00047f6:	f7 d0                	not    eax
c00047f8:	89 c2                	mov    edx,eax
c00047fa:	89 f0                	mov    eax,esi
c00047fc:	e8 b5 d2 ff ff       	call   c0001ab6 <st_dword>
c0004801:	83 ec 0c             	sub    esp,0xc
c0004804:	6a 01                	push   0x1
c0004806:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000480a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000480e:	83 c0 ff             	add    eax,0xffffffff
c0004811:	83 d2 ff             	adc    edx,0xffffffff
c0004814:	52                   	push   edx
c0004815:	50                   	push   eax
c0004816:	53                   	push   ebx
c0004817:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000481b:	e8 eb d1 ff ff       	call   c0001a0b <disk_write>
c0004820:	83 c4 20             	add    esp,0x20
c0004823:	85 c0                	test   eax,eax
c0004825:	0f 85 16 fc ff ff    	jne    c0004441 <create_partition+0x31>
c000482b:	31 d2                	xor    edx,edx
c000482d:	89 d8                	mov    eax,ebx
c000482f:	b9 00 02 00 00       	mov    ecx,0x200
c0004834:	e8 9b d2 ff ff       	call   c0001ad4 <mem_set>
c0004839:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000483f:	b9 10 00 00 00       	mov    ecx,0x10
c0004844:	ba 90 00 02 c0       	mov    edx,0xc0020090
c0004849:	e8 71 d2 ff ff       	call   c0001abf <mem_cpy>
c000484e:	e9 21 01 00 00       	jmp    c0004974 <create_partition+0x564>
c0004853:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004857:	b9 05 00 00 00       	mov    ecx,0x5
c000485c:	89 04 24             	mov    DWORD PTR [esp],eax
c000485f:	bf 08 00 00 00       	mov    edi,0x8
c0004864:	89 f8                	mov    eax,edi
c0004866:	31 d2                	xor    edx,edx
c0004868:	0f b6 f0             	movzx  esi,al
c000486b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000486e:	f7 f6                	div    esi
c0004870:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004875:	76 0a                	jbe    c0004881 <create_partition+0x471>
c0004877:	d1 e7                	shl    edi,1
c0004879:	49                   	dec    ecx
c000487a:	75 e8                	jne    c0004864 <create_partition+0x454>
c000487c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004881:	b9 00 02 00 00       	mov    ecx,0x200
c0004886:	31 d2                	xor    edx,edx
c0004888:	89 d8                	mov    eax,ebx
c000488a:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004890:	e8 3f d2 ff ff       	call   c0001ad4 <mem_set>
c0004895:	b9 64 00 00 00       	mov    ecx,0x64
c000489a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000489d:	31 d2                	xor    edx,edx
c000489f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00048a7:	f7 f1                	div    ecx
c00048a9:	b9 3f 00 00 00       	mov    ecx,0x3f
c00048ae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048b2:	89 f8                	mov    eax,edi
c00048b4:	0f b6 c0             	movzx  eax,al
c00048b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00048bb:	e9 80 00 00 00       	jmp    c0004940 <create_partition+0x530>
c00048c0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048c3:	29 cf                	sub    edi,ecx
c00048c5:	89 ca                	mov    edx,ecx
c00048c7:	89 f0                	mov    eax,esi
c00048c9:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048ce:	e8 e3 d1 ff ff       	call   c0001ab6 <st_dword>
c00048d3:	8d 46 04             	lea    eax,[esi+0x4]
c00048d6:	89 fa                	mov    edx,edi
c00048d8:	83 c6 10             	add    esi,0x10
c00048db:	e8 d6 d1 ff ff       	call   c0001ab6 <st_dword>
c00048e0:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048e4:	31 d2                	xor    edx,edx
c00048e6:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048e9:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048ed:	89 c8                	mov    eax,ecx
c00048ef:	01 f9                	add    ecx,edi
c00048f1:	f7 f5                	div    ebp
c00048f3:	89 d5                	mov    ebp,edx
c00048f5:	31 d2                	xor    edx,edx
c00048f7:	45                   	inc    ebp
c00048f8:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048fc:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048ff:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004902:	89 c2                	mov    edx,eax
c0004904:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004907:	c1 ea 02             	shr    edx,0x2
c000490a:	83 e2 c0             	and    edx,0xffffffc0
c000490d:	09 ea                	or     edx,ebp
c000490f:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004914:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004917:	31 d2                	xor    edx,edx
c0004919:	f7 f5                	div    ebp
c000491b:	89 d7                	mov    edi,edx
c000491d:	31 d2                	xor    edx,edx
c000491f:	47                   	inc    edi
c0004920:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004924:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004927:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c000492a:	89 c5                	mov    ebp,eax
c000492c:	c1 ed 02             	shr    ebp,0x2
c000492f:	83 e5 c0             	and    ebp,0xffffffc0
c0004932:	09 ef                	or     edi,ebp
c0004934:	89 fa                	mov    edx,edi
c0004936:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004939:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000493e:	74 34                	je     c0004974 <create_partition+0x564>
c0004940:	85 c9                	test   ecx,ecx
c0004942:	74 30                	je     c0004974 <create_partition+0x564>
c0004944:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004947:	76 2b                	jbe    c0004974 <create_partition+0x564>
c0004949:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000494d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004951:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004954:	83 ff 64             	cmp    edi,0x64
c0004957:	76 4b                	jbe    c00049a4 <create_partition+0x594>
c0004959:	89 f8                	mov    eax,edi
c000495b:	01 c8                	add    eax,ecx
c000495d:	0f 82 5d ff ff ff    	jb     c00048c0 <create_partition+0x4b0>
c0004963:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004966:	0f 87 54 ff ff ff    	ja     c00048c0 <create_partition+0x4b0>
c000496c:	85 ff                	test   edi,edi
c000496e:	0f 85 51 ff ff ff    	jne    c00048c5 <create_partition+0x4b5>
c0004974:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000497a:	ba 55 aa 00 00       	mov    edx,0xaa55
c000497f:	e8 2e d1 ff ff       	call   c0001ab2 <st_word>
c0004984:	83 ec 0c             	sub    esp,0xc
c0004987:	6a 01                	push   0x1
c0004989:	6a 00                	push   0x0
c000498b:	6a 00                	push   0x0
c000498d:	53                   	push   ebx
c000498e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004992:	e8 74 d0 ff ff       	call   c0001a0b <disk_write>
c0004997:	83 c4 20             	add    esp,0x20
c000499a:	85 c0                	test   eax,eax
c000499c:	0f 95 c0             	setne  al
c000499f:	0f b6 c0             	movzx  eax,al
c00049a2:	eb 0e                	jmp    c00049b2 <create_partition+0x5a2>
c00049a4:	74 07                	je     c00049ad <create_partition+0x59d>
c00049a6:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00049ab:	eb ac                	jmp    c0004959 <create_partition+0x549>
c00049ad:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049b0:	eb a7                	jmp    c0004959 <create_partition+0x549>
c00049b2:	83 c4 5c             	add    esp,0x5c
c00049b5:	5b                   	pop    ebx
c00049b6:	5e                   	pop    esi
c00049b7:	5f                   	pop    edi
c00049b8:	5d                   	pop    ebp
c00049b9:	c3                   	ret    

c00049ba <get_fileinfo>:
c00049ba:	55                   	push   ebp
c00049bb:	57                   	push   edi
c00049bc:	56                   	push   esi
c00049bd:	53                   	push   ebx
c00049be:	83 ec 1c             	sub    esp,0x1c
c00049c1:	8b 30                	mov    esi,DWORD PTR [eax]
c00049c3:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049c7:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049cb:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049ce:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049d1:	0f 84 dc 01 00 00    	je     c0004bb3 <get_fileinfo+0x1f9>
c00049d7:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049da:	75 0f                	jne    c00049eb <get_fileinfo+0x31>
c00049dc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049df:	83 c4 1c             	add    esp,0x1c
c00049e2:	5b                   	pop    ebx
c00049e3:	5e                   	pop    esi
c00049e4:	5f                   	pop    edi
c00049e5:	5d                   	pop    ebp
c00049e6:	e9 58 d5 ff ff       	jmp    c0001f43 <get_xfileinfo>
c00049eb:	89 d3                	mov    ebx,edx
c00049ed:	89 c6                	mov    esi,eax
c00049ef:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049f3:	74 6a                	je     c0004a5f <get_fileinfo+0xa5>
c00049f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049fd:	31 ed                	xor    ebp,ebp
c00049ff:	31 ff                	xor    edi,edi
c0004a01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004a05:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a09:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a0c:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a10:	66 85 d2             	test   dx,dx
c0004a13:	74 3e                	je     c0004a53 <get_fileinfo+0x99>
c0004a15:	66 85 ed             	test   bp,bp
c0004a18:	75 0c                	jne    c0004a26 <get_fileinfo+0x6c>
c0004a1a:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a20:	66 3d ff 07          	cmp    ax,0x7ff
c0004a24:	76 22                	jbe    c0004a48 <get_fileinfo+0x8e>
c0004a26:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a2b:	89 e8                	mov    eax,ebp
c0004a2d:	29 f9                	sub    ecx,edi
c0004a2f:	c1 e0 10             	shl    eax,0x10
c0004a32:	09 d0                	or     eax,edx
c0004a34:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a38:	e8 a3 d1 ff ff       	call   c0001be0 <put_utf>
c0004a3d:	84 c0                	test   al,al
c0004a3f:	74 10                	je     c0004a51 <get_fileinfo+0x97>
c0004a41:	0f b6 c0             	movzx  eax,al
c0004a44:	31 d2                	xor    edx,edx
c0004a46:	01 c7                	add    edi,eax
c0004a48:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a4d:	89 d5                	mov    ebp,edx
c0004a4f:	eb b0                	jmp    c0004a01 <get_fileinfo+0x47>
c0004a51:	31 ff                	xor    edi,edi
c0004a53:	66 85 ed             	test   bp,bp
c0004a56:	74 02                	je     c0004a5a <get_fileinfo+0xa0>
c0004a58:	31 ff                	xor    edi,edi
c0004a5a:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a5f:	31 ff                	xor    edi,edi
c0004a61:	31 c9                	xor    ecx,ecx
c0004a63:	83 f9 0a             	cmp    ecx,0xa
c0004a66:	0f 87 ad 00 00 00    	ja     c0004b19 <get_fileinfo+0x15f>
c0004a6c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a6f:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a72:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a76:	66 83 fa 20          	cmp    dx,0x20
c0004a7a:	0f 84 92 00 00 00    	je     c0004b12 <get_fileinfo+0x158>
c0004a80:	66 83 fa 05          	cmp    dx,0x5
c0004a84:	75 05                	jne    c0004a8b <get_fileinfo+0xd1>
c0004a86:	ba e5 00 00 00       	mov    edx,0xe5
c0004a8b:	83 ff 0b             	cmp    edi,0xb
c0004a8e:	77 0b                	ja     c0004a9b <get_fileinfo+0xe1>
c0004a90:	83 fd 09             	cmp    ebp,0x9
c0004a93:	75 06                	jne    c0004a9b <get_fileinfo+0xe1>
c0004a95:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a9a:	47                   	inc    edi
c0004a9b:	0f b7 c2             	movzx  eax,dx
c0004a9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004aa2:	e8 6d d0 ff ff       	call   c0001b14 <dbc_1st>
c0004aa7:	85 c0                	test   eax,eax
c0004aa9:	74 2f                	je     c0004ada <get_fileinfo+0x120>
c0004aab:	83 fd 08             	cmp    ebp,0x8
c0004aae:	74 2a                	je     c0004ada <get_fileinfo+0x120>
c0004ab0:	83 fd 0b             	cmp    ebp,0xb
c0004ab3:	74 25                	je     c0004ada <get_fileinfo+0x120>
c0004ab5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ab8:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004abc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ac0:	e8 52 d0 ff ff       	call   c0001b17 <dbc_2nd>
c0004ac5:	85 c0                	test   eax,eax
c0004ac7:	74 11                	je     c0004ada <get_fileinfo+0x120>
c0004ac9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004acd:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004ad2:	c1 e2 08             	shl    edx,0x8
c0004ad5:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004ad8:	09 c2                	or     edx,eax
c0004ada:	0f b7 d2             	movzx  edx,dx
c0004add:	50                   	push   eax
c0004ade:	50                   	push   eax
c0004adf:	68 b5 01 00 00       	push   0x1b5
c0004ae4:	52                   	push   edx
c0004ae5:	e8 46 38 00 00       	call   c0008330 <ff_oem2uni>
c0004aea:	83 c4 10             	add    esp,0x10
c0004aed:	66 85 c0             	test   ax,ax
c0004af0:	75 04                	jne    c0004af6 <get_fileinfo+0x13c>
c0004af2:	31 ff                	xor    edi,edi
c0004af4:	eb 23                	jmp    c0004b19 <get_fileinfo+0x15f>
c0004af6:	b9 0c 00 00 00       	mov    ecx,0xc
c0004afb:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004aff:	29 f9                	sub    ecx,edi
c0004b01:	0f b7 c0             	movzx  eax,ax
c0004b04:	e8 d7 d0 ff ff       	call   c0001be0 <put_utf>
c0004b09:	84 c0                	test   al,al
c0004b0b:	74 e5                	je     c0004af2 <get_fileinfo+0x138>
c0004b0d:	0f b6 c0             	movzx  eax,al
c0004b10:	01 c7                	add    edi,eax
c0004b12:	89 e9                	mov    ecx,ebp
c0004b14:	e9 4a ff ff ff       	jmp    c0004a63 <get_fileinfo+0xa9>
c0004b19:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b1e:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b22:	75 54                	jne    c0004b78 <get_fileinfo+0x1be>
c0004b24:	85 ff                	test   edi,edi
c0004b26:	75 0b                	jne    c0004b33 <get_fileinfo+0x179>
c0004b28:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b2c:	ba 01 00 00 00       	mov    edx,0x1
c0004b31:	eb 33                	jmp    c0004b66 <get_fileinfo+0x1ac>
c0004b33:	b1 08                	mov    cl,0x8
c0004b35:	31 d2                	xor    edx,edx
c0004b37:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b3d:	84 c0                	test   al,al
c0004b3f:	74 25                	je     c0004b66 <get_fileinfo+0x1ac>
c0004b41:	66 83 f8 2e          	cmp    ax,0x2e
c0004b45:	74 16                	je     c0004b5d <get_fileinfo+0x1a3>
c0004b47:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b4a:	66 83 ff 19          	cmp    di,0x19
c0004b4e:	77 0f                	ja     c0004b5f <get_fileinfo+0x1a5>
c0004b50:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b53:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b56:	74 07                	je     c0004b5f <get_fileinfo+0x1a5>
c0004b58:	83 c0 20             	add    eax,0x20
c0004b5b:	eb 02                	jmp    c0004b5f <get_fileinfo+0x1a5>
c0004b5d:	b1 10                	mov    cl,0x10
c0004b5f:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b63:	42                   	inc    edx
c0004b64:	eb d1                	jmp    c0004b37 <get_fileinfo+0x17d>
c0004b66:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b6b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b6e:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b72:	75 04                	jne    c0004b78 <get_fileinfo+0x1be>
c0004b74:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b78:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b7b:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b7e:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b81:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b84:	83 c0 1c             	add    eax,0x1c
c0004b87:	e8 c1 ce ff ff       	call   c0001a4d <ld_dword>
c0004b8c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b93:	89 03                	mov    DWORD PTR [ebx],eax
c0004b95:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b98:	83 c0 16             	add    eax,0x16
c0004b9b:	e8 a0 ce ff ff       	call   c0001a40 <ld_word>
c0004ba0:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004ba4:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ba7:	83 c0 18             	add    eax,0x18
c0004baa:	e8 91 ce ff ff       	call   c0001a40 <ld_word>
c0004baf:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004bb3:	83 c4 1c             	add    esp,0x1c
c0004bb6:	5b                   	pop    ebx
c0004bb7:	5e                   	pop    esi
c0004bb8:	5f                   	pop    edi
c0004bb9:	5d                   	pop    ebp
c0004bba:	c3                   	ret    

c0004bbb <ld_clust.isra.0>:
c0004bbb:	56                   	push   esi
c0004bbc:	89 c6                	mov    esi,eax
c0004bbe:	53                   	push   ebx
c0004bbf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bc2:	89 d3                	mov    ebx,edx
c0004bc4:	e8 77 ce ff ff       	call   c0001a40 <ld_word>
c0004bc9:	0f b7 c8             	movzx  ecx,ax
c0004bcc:	89 f0                	mov    eax,esi
c0004bce:	3c 03                	cmp    al,0x3
c0004bd0:	75 0d                	jne    c0004bdf <ld_clust.isra.0+0x24>
c0004bd2:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bd5:	e8 66 ce ff ff       	call   c0001a40 <ld_word>
c0004bda:	c1 e0 10             	shl    eax,0x10
c0004bdd:	09 c1                	or     ecx,eax
c0004bdf:	89 c8                	mov    eax,ecx
c0004be1:	5b                   	pop    ebx
c0004be2:	5e                   	pop    esi
c0004be3:	c3                   	ret    

c0004be4 <st_clust.isra.1>:
c0004be4:	56                   	push   esi
c0004be5:	89 c6                	mov    esi,eax
c0004be7:	53                   	push   ebx
c0004be8:	89 d3                	mov    ebx,edx
c0004bea:	0f b7 d1             	movzx  edx,cx
c0004bed:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bf0:	e8 bd ce ff ff       	call   c0001ab2 <st_word>
c0004bf5:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bf8:	75 0f                	jne    c0004c09 <st_clust.isra.1+0x25>
c0004bfa:	c1 e9 10             	shr    ecx,0x10
c0004bfd:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c00:	89 ca                	mov    edx,ecx
c0004c02:	5b                   	pop    ebx
c0004c03:	5e                   	pop    esi
c0004c04:	e9 a9 ce ff ff       	jmp    c0001ab2 <st_word>
c0004c09:	5b                   	pop    ebx
c0004c0a:	5e                   	pop    esi
c0004c0b:	c3                   	ret    

c0004c0c <init_alloc_info.isra.2>:
c0004c0c:	56                   	push   esi
c0004c0d:	53                   	push   ebx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	89 d3                	mov    ebx,edx
c0004c12:	51                   	push   ecx
c0004c13:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c15:	83 c0 34             	add    eax,0x34
c0004c18:	e8 30 ce ff ff       	call   c0001a4d <ld_dword>
c0004c1d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c20:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c22:	83 c0 38             	add    eax,0x38
c0004c25:	e8 3b ce ff ff       	call   c0001a65 <ld_qword>
c0004c2a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c2d:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c30:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c32:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c35:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c3c:	83 e0 02             	and    eax,0x2
c0004c3f:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c42:	5b                   	pop    ebx
c0004c43:	5b                   	pop    ebx
c0004c44:	5e                   	pop    esi
c0004c45:	c3                   	ret    

c0004c46 <follow_path>:
c0004c46:	56                   	push   esi
c0004c47:	53                   	push   ebx
c0004c48:	89 c3                	mov    ebx,eax
c0004c4a:	83 ec 14             	sub    esp,0x14
c0004c4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c51:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c59:	80 fa 5c             	cmp    dl,0x5c
c0004c5c:	75 07                	jne    c0004c65 <follow_path+0x1f>
c0004c5e:	40                   	inc    eax
c0004c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c63:	eb ee                	jmp    c0004c53 <follow_path+0xd>
c0004c65:	80 fa 2f             	cmp    dl,0x2f
c0004c68:	74 f4                	je     c0004c5e <follow_path+0x18>
c0004c6a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c71:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c78:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c7b:	77 52                	ja     c0004ccf <follow_path+0x89>
c0004c7d:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c81:	31 d2                	xor    edx,edx
c0004c83:	89 d8                	mov    eax,ebx
c0004c85:	e8 12 e3 ff ff       	call   c0002f9c <dir_sdi>
c0004c8a:	eb 7c                	jmp    c0004d08 <follow_path+0xc2>
c0004c8c:	89 d8                	mov    eax,ebx
c0004c8e:	e8 6e f2 ff ff       	call   c0003f01 <dir_find>
c0004c93:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c96:	85 c0                	test   eax,eax
c0004c98:	75 46                	jne    c0004ce0 <follow_path+0x9a>
c0004c9a:	80 e2 04             	and    dl,0x4
c0004c9d:	75 69                	jne    c0004d08 <follow_path+0xc2>
c0004c9f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ca3:	74 5e                	je     c0004d03 <follow_path+0xbd>
c0004ca5:	8a 06                	mov    al,BYTE PTR [esi]
c0004ca7:	3c 04                	cmp    al,0x4
c0004ca9:	75 41                	jne    c0004cec <follow_path+0xa6>
c0004cab:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004cae:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004cb2:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004cb5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004cb8:	30 c0                	xor    al,al
c0004cba:	09 d0                	or     eax,edx
c0004cbc:	89 da                	mov    edx,ebx
c0004cbe:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004cc1:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cc4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cc7:	8d 46 10             	lea    eax,[esi+0x10]
c0004cca:	e8 3d ff ff ff       	call   c0004c0c <init_alloc_info.isra.2>
c0004ccf:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cd3:	89 d8                	mov    eax,ebx
c0004cd5:	e8 a9 ed ff ff       	call   c0003a83 <create_name>
c0004cda:	85 c0                	test   eax,eax
c0004cdc:	74 ae                	je     c0004c8c <follow_path+0x46>
c0004cde:	eb 28                	jmp    c0004d08 <follow_path+0xc2>
c0004ce0:	83 f8 04             	cmp    eax,0x4
c0004ce3:	75 23                	jne    c0004d08 <follow_path+0xc2>
c0004ce5:	80 e2 04             	and    dl,0x4
c0004ce8:	74 19                	je     c0004d03 <follow_path+0xbd>
c0004cea:	eb 1c                	jmp    c0004d08 <follow_path+0xc2>
c0004cec:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cef:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cf5:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cf9:	e8 bd fe ff ff       	call   c0004bbb <ld_clust.isra.0>
c0004cfe:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d01:	eb cc                	jmp    c0004ccf <follow_path+0x89>
c0004d03:	b8 05 00 00 00       	mov    eax,0x5
c0004d08:	83 c4 14             	add    esp,0x14
c0004d0b:	5b                   	pop    ebx
c0004d0c:	5e                   	pop    esi
c0004d0d:	c3                   	ret    

c0004d0e <f_mount>:
c0004d0e:	53                   	push   ebx
c0004d0f:	83 ec 18             	sub    esp,0x18
c0004d12:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d16:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d1e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d22:	e8 fb d2 ff ff       	call   c0002022 <get_ldnumber>
c0004d27:	89 c2                	mov    edx,eax
c0004d29:	b8 0b 00 00 00       	mov    eax,0xb
c0004d2e:	85 d2                	test   edx,edx
c0004d30:	78 39                	js     c0004d6b <f_mount+0x5d>
c0004d32:	8b 04 95 80 42 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbd80]
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	74 03                	je     c0004d40 <f_mount+0x32>
c0004d3d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d44:	85 c0                	test   eax,eax
c0004d46:	74 03                	je     c0004d4b <f_mount+0x3d>
c0004d48:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d4f:	89 04 95 80 42 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbd80],eax
c0004d56:	31 c0                	xor    eax,eax
c0004d58:	84 db                	test   bl,bl
c0004d5a:	74 0f                	je     c0004d6b <f_mount+0x5d>
c0004d5c:	31 c9                	xor    ecx,ecx
c0004d5e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d62:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d66:	e8 65 d7 ff ff       	call   c00024d0 <mount_volume>
c0004d6b:	83 c4 18             	add    esp,0x18
c0004d6e:	5b                   	pop    ebx
c0004d6f:	c3                   	ret    

c0004d70 <f_open>:
c0004d70:	55                   	push   ebp
c0004d71:	bd 09 00 00 00       	mov    ebp,0x9
c0004d76:	57                   	push   edi
c0004d77:	56                   	push   esi
c0004d78:	53                   	push   ebx
c0004d79:	83 ec 7c             	sub    esp,0x7c
c0004d7c:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d83:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d8a:	85 db                	test   ebx,ebx
c0004d8c:	0f 84 10 04 00 00    	je     c00051a2 <f_open+0x432>
c0004d92:	89 fe                	mov    esi,edi
c0004d94:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d98:	83 e6 3f             	and    esi,0x3f
c0004d9b:	89 f0                	mov    eax,esi
c0004d9d:	0f b6 c8             	movzx  ecx,al
c0004da0:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004da7:	e8 24 d7 ff ff       	call   c00024d0 <mount_volume>
c0004dac:	89 c5                	mov    ebp,eax
c0004dae:	85 c0                	test   eax,eax
c0004db0:	0f 85 e6 03 00 00    	jne    c000519c <f_open+0x42c>
c0004db6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dba:	bd 11 00 00 00       	mov    ebp,0x11
c0004dbf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dc3:	83 ec 0c             	sub    esp,0xc
c0004dc6:	68 60 04 00 00       	push   0x460
c0004dcb:	e8 a3 34 00 00       	call   c0008273 <ff_memalloc>
c0004dd0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dd4:	83 c4 10             	add    esp,0x10
c0004dd7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ddc:	0f 84 c0 03 00 00    	je     c00051a2 <f_open+0x432>
c0004de2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dea:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004df0:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004df3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004df6:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dfd:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e01:	e8 40 fe ff ff       	call   c0004c46 <follow_path>
c0004e06:	89 c5                	mov    ebp,eax
c0004e08:	85 c0                	test   eax,eax
c0004e0a:	75 0c                	jne    c0004e18 <f_open+0xa8>
c0004e0c:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e11:	79 05                	jns    c0004e18 <f_open+0xa8>
c0004e13:	bd 06 00 00 00       	mov    ebp,0x6
c0004e18:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e1e:	0f 84 84 01 00 00    	je     c0004fa8 <f_open+0x238>
c0004e24:	85 ed                	test   ebp,ebp
c0004e26:	74 20                	je     c0004e48 <f_open+0xd8>
c0004e28:	83 fd 04             	cmp    ebp,0x4
c0004e2b:	0f 85 58 03 00 00    	jne    c0005189 <f_open+0x419>
c0004e31:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e35:	83 ce 08             	or     esi,0x8
c0004e38:	e8 8a f2 ff ff       	call   c00040c7 <dir_register>
c0004e3d:	89 c5                	mov    ebp,eax
c0004e3f:	85 c0                	test   eax,eax
c0004e41:	74 2f                	je     c0004e72 <f_open+0x102>
c0004e43:	e9 41 03 00 00       	jmp    c0005189 <f_open+0x419>
c0004e48:	bd 07 00 00 00       	mov    ebp,0x7
c0004e4d:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e52:	0f 85 31 03 00 00    	jne    c0005189 <f_open+0x419>
c0004e58:	bd 08 00 00 00       	mov    ebp,0x8
c0004e5d:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e63:	0f 85 20 03 00 00    	jne    c0005189 <f_open+0x419>
c0004e69:	83 e7 08             	and    edi,0x8
c0004e6c:	0f 84 65 01 00 00    	je     c0004fd7 <f_open+0x267>
c0004e72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e76:	8a 02                	mov    al,BYTE PTR [edx]
c0004e78:	3c 04                	cmp    al,0x4
c0004e7a:	0f 85 97 00 00 00    	jne    c0004f17 <f_open+0x1a7>
c0004e80:	8d 42 10             	lea    eax,[edx+0x10]
c0004e83:	89 13                	mov    DWORD PTR [ebx],edx
c0004e85:	89 da                	mov    edx,ebx
c0004e87:	e8 80 fd ff ff       	call   c0004c0c <init_alloc_info.isra.2>
c0004e8c:	31 d2                	xor    edx,edx
c0004e8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e92:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e97:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9a:	83 c0 02             	add    eax,0x2
c0004e9d:	e8 32 cc ff ff       	call   c0001ad4 <mem_set>
c0004ea2:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004ea7:	31 d2                	xor    edx,edx
c0004ea9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ead:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eb0:	83 c0 26             	add    eax,0x26
c0004eb3:	e8 1c cc ff ff       	call   c0001ad4 <mem_set>
c0004eb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ebc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004ebf:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004ec3:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ec8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ecb:	83 c0 08             	add    eax,0x8
c0004ece:	e8 e3 cb ff ff       	call   c0001ab6 <st_dword>
c0004ed3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eda:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ede:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ee2:	e8 b7 ea ff ff       	call   c000399e <store_xdir>
c0004ee7:	89 c5                	mov    ebp,eax
c0004ee9:	85 c0                	test   eax,eax
c0004eeb:	0f 85 98 02 00 00    	jne    c0005189 <f_open+0x419>
c0004ef1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ef4:	85 d2                	test   edx,edx
c0004ef6:	0f 84 db 00 00 00    	je     c0004fd7 <f_open+0x267>
c0004efc:	31 c9                	xor    ecx,ecx
c0004efe:	89 d8                	mov    eax,ebx
c0004f00:	e8 8e e3 ff ff       	call   c0003293 <remove_chain>
c0004f05:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f09:	89 c5                	mov    ebp,eax
c0004f0b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f0e:	48                   	dec    eax
c0004f0f:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f12:	e9 b8 00 00 00       	jmp    c0004fcf <f_open+0x25f>
c0004f17:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f1b:	89 ea                	mov    edx,ebp
c0004f1d:	e8 99 fc ff ff       	call   c0004bbb <ld_clust.isra.0>
c0004f22:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f27:	89 c7                	mov    edi,eax
c0004f29:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f2c:	e8 85 cb ff ff       	call   c0001ab6 <st_dword>
c0004f31:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f35:	31 c9                	xor    ecx,ecx
c0004f37:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f3f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f43:	e8 9c fc ff ff       	call   c0004be4 <st_clust.isra.1>
c0004f48:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f4c:	31 d2                	xor    edx,edx
c0004f4e:	83 c0 1c             	add    eax,0x1c
c0004f51:	e8 60 cb ff ff       	call   c0001ab6 <st_dword>
c0004f56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f5a:	85 ff                	test   edi,edi
c0004f5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f60:	74 75                	je     c0004fd7 <f_open+0x267>
c0004f62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f66:	31 c9                	xor    ecx,ecx
c0004f68:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f6b:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f76:	89 fa                	mov    edx,edi
c0004f78:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f7c:	e8 12 e3 ff ff       	call   c0003293 <remove_chain>
c0004f81:	89 c5                	mov    ebp,eax
c0004f83:	85 c0                	test   eax,eax
c0004f85:	0f 85 fe 01 00 00    	jne    c0005189 <f_open+0x419>
c0004f8b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f8f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f97:	4f                   	dec    edi
c0004f98:	e8 81 d2 ff ff       	call   c000221e <move_window>
c0004f9d:	89 c5                	mov    ebp,eax
c0004f9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa3:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004fa6:	eb 27                	jmp    c0004fcf <f_open+0x25f>
c0004fa8:	85 ed                	test   ebp,ebp
c0004faa:	0f 85 d9 01 00 00    	jne    c0005189 <f_open+0x419>
c0004fb0:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fb4:	bd 04 00 00 00       	mov    ebp,0x4
c0004fb9:	a8 10                	test   al,0x10
c0004fbb:	0f 85 c8 01 00 00    	jne    c0005189 <f_open+0x419>
c0004fc1:	83 e7 02             	and    edi,0x2
c0004fc4:	74 11                	je     c0004fd7 <f_open+0x267>
c0004fc6:	bd 07 00 00 00       	mov    ebp,0x7
c0004fcb:	a8 01                	test   al,0x1
c0004fcd:	eb 02                	jmp    c0004fd1 <f_open+0x261>
c0004fcf:	85 ed                	test   ebp,ebp
c0004fd1:	0f 85 b2 01 00 00    	jne    c0005189 <f_open+0x419>
c0004fd7:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fdd:	74 03                	je     c0004fe2 <f_open+0x272>
c0004fdf:	83 ce 40             	or     esi,0x40
c0004fe2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fe6:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fe9:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fec:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fef:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004ff2:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004ff6:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004ff9:	8a 02                	mov    al,BYTE PTR [edx]
c0004ffb:	3c 04                	cmp    al,0x4
c0004ffd:	75 2a                	jne    c0005029 <f_open+0x2b9>
c0004fff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005003:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005008:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000500b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000500f:	30 c0                	xor    al,al
c0005011:	09 c8                	or     eax,ecx
c0005013:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005016:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000501a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000501d:	8d 42 10             	lea    eax,[edx+0x10]
c0005020:	89 da                	mov    edx,ebx
c0005022:	e8 e5 fb ff ff       	call   c0004c0c <init_alloc_info.isra.2>
c0005027:	eb 1c                	jmp    c0005045 <f_open+0x2d5>
c0005029:	89 fa                	mov    edx,edi
c000502b:	e8 8b fb ff ff       	call   c0004bbb <ld_clust.isra.0>
c0005030:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005033:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005036:	e8 12 ca ff ff       	call   c0001a4d <ld_dword>
c000503b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005042:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005045:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005049:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005050:	89 03                	mov    DWORD PTR [ebx],eax
c0005052:	31 d2                	xor    edx,edx
c0005054:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005058:	b9 00 02 00 00       	mov    ecx,0x200
c000505d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005061:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005065:	89 f0                	mov    eax,esi
c0005067:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000506e:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005071:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005078:	8d 43 50             	lea    eax,[ebx+0x50]
c000507b:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005082:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005089:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000508d:	e8 42 ca ff ff       	call   c0001ad4 <mem_set>
c0005092:	83 e6 20             	and    esi,0x20
c0005095:	75 07                	jne    c000509e <f_open+0x32e>
c0005097:	31 ed                	xor    ebp,ebp
c0005099:	e9 eb 00 00 00       	jmp    c0005189 <f_open+0x419>
c000509e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00050a1:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00050a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050a8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050b0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050b4:	74 e1                	je     c0005097 <f_open+0x327>
c00050b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050be:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050c1:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050c8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050cb:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050cf:	31 ff                	xor    edi,edi
c00050d1:	c1 e5 09             	shl    ebp,0x9
c00050d4:	89 ee                	mov    esi,ebp
c00050d6:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050da:	89 f8                	mov    eax,edi
c00050dc:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050e0:	73 22                	jae    c0005104 <f_open+0x394>
c00050e2:	89 d8                	mov    eax,ebx
c00050e4:	e8 bd dc ff ff       	call   c0002da6 <get_fat>
c00050e9:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050ed:	89 c2                	mov    edx,eax
c00050ef:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050f3:	83 f8 01             	cmp    eax,0x1
c00050f6:	76 10                	jbe    c0005108 <f_open+0x398>
c00050f8:	83 f8 ff             	cmp    eax,0xffffffff
c00050fb:	75 d9                	jne    c00050d6 <f_open+0x366>
c00050fd:	bd 01 00 00 00       	mov    ebp,0x1
c0005102:	eb 09                	jmp    c000510d <f_open+0x39d>
c0005104:	31 ed                	xor    ebp,ebp
c0005106:	eb 05                	jmp    c000510d <f_open+0x39d>
c0005108:	bd 02 00 00 00       	mov    ebp,0x2
c000510d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005110:	85 ed                	test   ebp,ebp
c0005112:	75 75                	jne    c0005189 <f_open+0x419>
c0005114:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005118:	25 ff 01 00 00       	and    eax,0x1ff
c000511d:	0f 84 74 ff ff ff    	je     c0005097 <f_open+0x327>
c0005123:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005127:	bd 02 00 00 00       	mov    ebp,0x2
c000512c:	89 c8                	mov    eax,ecx
c000512e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005132:	e8 a2 cb ff ff       	call   c0001cd9 <clst2sect>
c0005137:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000513b:	89 d7                	mov    edi,edx
c000513d:	09 c7                	or     edi,eax
c000513f:	74 48                	je     c0005189 <f_open+0x419>
c0005141:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005145:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005149:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005151:	0f ac fe 09          	shrd   esi,edi,0x9
c0005155:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005159:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000515d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005160:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005164:	83 ec 0c             	sub    esp,0xc
c0005167:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000516a:	6a 01                	push   0x1
c000516c:	52                   	push   edx
c000516d:	50                   	push   eax
c000516e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005172:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005176:	50                   	push   eax
c0005177:	e8 79 c8 ff ff       	call   c00019f5 <disk_read>
c000517c:	83 c4 20             	add    esp,0x20
c000517f:	85 c0                	test   eax,eax
c0005181:	0f 95 c0             	setne  al
c0005184:	0f b6 c0             	movzx  eax,al
c0005187:	89 c5                	mov    ebp,eax
c0005189:	83 ec 0c             	sub    esp,0xc
c000518c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005190:	e8 f4 30 00 00       	call   c0008289 <ff_memfree>
c0005195:	83 c4 10             	add    esp,0x10
c0005198:	85 ed                	test   ebp,ebp
c000519a:	74 06                	je     c00051a2 <f_open+0x432>
c000519c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00051a2:	83 c4 7c             	add    esp,0x7c
c00051a5:	89 e8                	mov    eax,ebp
c00051a7:	5b                   	pop    ebx
c00051a8:	5e                   	pop    esi
c00051a9:	5f                   	pop    edi
c00051aa:	5d                   	pop    ebp
c00051ab:	c3                   	ret    

c00051ac <f_read>:
c00051ac:	55                   	push   ebp
c00051ad:	57                   	push   edi
c00051ae:	56                   	push   esi
c00051af:	53                   	push   ebx
c00051b0:	83 ec 2c             	sub    esp,0x2c
c00051b3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051b7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051bb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	89 d8                	mov    eax,ebx
c00051c7:	e8 77 cf ff ff       	call   c0002143 <validate>
c00051cc:	89 c5                	mov    ebp,eax
c00051ce:	85 c0                	test   eax,eax
c00051d0:	0f 85 4c 02 00 00    	jne    c0005422 <f_read+0x276>
c00051d6:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051da:	85 ed                	test   ebp,ebp
c00051dc:	0f 85 40 02 00 00    	jne    c0005422 <f_read+0x276>
c00051e2:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051e6:	0f 84 31 02 00 00    	je     c000541d <f_read+0x271>
c00051ec:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051ef:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051f2:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051f5:	bf 00 00 00 00       	mov    edi,0x0
c00051fa:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051fd:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005201:	89 d1                	mov    ecx,edx
c0005203:	19 f9                	sbb    ecx,edi
c0005205:	0f 83 cf 00 00 00    	jae    c00052da <f_read+0x12e>
c000520b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000520f:	e9 c6 00 00 00       	jmp    c00052da <f_read+0x12e>
c0005214:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005217:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000521a:	89 d0                	mov    eax,edx
c000521c:	25 ff 01 00 00       	and    eax,0x1ff
c0005221:	0f 85 c9 01 00 00    	jne    c00053f0 <f_read+0x244>
c0005227:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000522b:	89 d6                	mov    esi,edx
c000522d:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005231:	89 cf                	mov    edi,ecx
c0005233:	48                   	dec    eax
c0005234:	0f ac fe 09          	shrd   esi,edi,0x9
c0005238:	21 f0                	and    eax,esi
c000523a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000523e:	0f 84 a6 00 00 00    	je     c00052ea <f_read+0x13e>
c0005244:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005248:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000524b:	89 c8                	mov    eax,ecx
c000524d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005250:	e8 84 ca ff ff       	call   c0001cd9 <clst2sect>
c0005255:	89 d7                	mov    edi,edx
c0005257:	09 c7                	or     edi,eax
c0005259:	0f 84 b4 00 00 00    	je     c0005313 <f_read+0x167>
c000525f:	31 ff                	xor    edi,edi
c0005261:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005265:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005268:	01 c6                	add    esi,eax
c000526a:	11 d7                	adc    edi,edx
c000526c:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005274:	0f 86 fd 00 00 00    	jbe    c0005377 <f_read+0x1cb>
c000527a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000527e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005282:	c1 e8 09             	shr    eax,0x9
c0005285:	89 04 24             	mov    DWORD PTR [esp],eax
c0005288:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000528c:	03 14 24             	add    edx,DWORD PTR [esp]
c000528f:	39 c2                	cmp    edx,eax
c0005291:	76 07                	jbe    c000529a <f_read+0xee>
c0005293:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005297:	89 04 24             	mov    DWORD PTR [esp],eax
c000529a:	83 ec 0c             	sub    esp,0xc
c000529d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00052a1:	57                   	push   edi
c00052a2:	56                   	push   esi
c00052a3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00052a7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052ab:	50                   	push   eax
c00052ac:	e8 44 c7 ff ff       	call   c00019f5 <disk_read>
c00052b1:	83 c4 20             	add    esp,0x20
c00052b4:	85 c0                	test   eax,eax
c00052b6:	75 6e                	jne    c0005326 <f_read+0x17a>
c00052b8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052bc:	78 7e                	js     c000533c <f_read+0x190>
c00052be:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052c1:	c1 e6 09             	shl    esi,0x9
c00052c4:	31 ff                	xor    edi,edi
c00052c6:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052ce:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052d2:	01 30                	add    DWORD PTR [eax],esi
c00052d4:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052d7:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052da:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052df:	0f 85 2f ff ff ff    	jne    c0005214 <f_read+0x68>
c00052e5:	e9 38 01 00 00       	jmp    c0005422 <f_read+0x276>
c00052ea:	89 c8                	mov    eax,ecx
c00052ec:	09 d0                	or     eax,edx
c00052ee:	75 05                	jne    c00052f5 <f_read+0x149>
c00052f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052f3:	eb 19                	jmp    c000530e <f_read+0x162>
c00052f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052f9:	74 09                	je     c0005304 <f_read+0x158>
c00052fb:	89 d8                	mov    eax,ebx
c00052fd:	e8 f8 c9 ff ff       	call   c0001cfa <clmt_clust>
c0005302:	eb 0a                	jmp    c000530e <f_read+0x162>
c0005304:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005307:	89 d8                	mov    eax,ebx
c0005309:	e8 98 da ff ff       	call   c0002da6 <get_fat>
c000530e:	83 f8 01             	cmp    eax,0x1
c0005311:	77 0e                	ja     c0005321 <f_read+0x175>
c0005313:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005317:	bd 02 00 00 00       	mov    ebp,0x2
c000531c:	e9 01 01 00 00       	jmp    c0005422 <f_read+0x276>
c0005321:	83 f8 ff             	cmp    eax,0xffffffff
c0005324:	75 0e                	jne    c0005334 <f_read+0x188>
c0005326:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000532a:	bd 01 00 00 00       	mov    ebp,0x1
c000532f:	e9 ee 00 00 00       	jmp    c0005422 <f_read+0x276>
c0005334:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005337:	e9 08 ff ff ff       	jmp    c0005244 <f_read+0x98>
c000533c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000533f:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005342:	29 f0                	sub    eax,esi
c0005344:	19 fa                	sbb    edx,edi
c0005346:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005349:	89 d7                	mov    edi,edx
c000534b:	ba 00 00 00 00       	mov    edx,0x0
c0005350:	89 f9                	mov    ecx,edi
c0005352:	19 d1                	sbb    ecx,edx
c0005354:	0f 83 64 ff ff ff    	jae    c00052be <f_read+0x112>
c000535a:	89 c7                	mov    edi,eax
c000535c:	8d 53 50             	lea    edx,[ebx+0x50]
c000535f:	c1 e7 09             	shl    edi,0x9
c0005362:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005366:	b9 00 02 00 00       	mov    ecx,0x200
c000536b:	01 f8                	add    eax,edi
c000536d:	e8 4d c7 ff ff       	call   c0001abf <mem_cpy>
c0005372:	e9 47 ff ff ff       	jmp    c00052be <f_read+0x112>
c0005377:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000537a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000537d:	89 04 24             	mov    DWORD PTR [esp],eax
c0005380:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005384:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005388:	75 05                	jne    c000538f <f_read+0x1e3>
c000538a:	39 34 24             	cmp    DWORD PTR [esp],esi
c000538d:	74 5b                	je     c00053ea <f_read+0x23e>
c000538f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005392:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005396:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000539a:	79 2a                	jns    c00053c6 <f_read+0x21a>
c000539c:	83 ec 0c             	sub    esp,0xc
c000539f:	6a 01                	push   0x1
c00053a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053ad:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053b1:	50                   	push   eax
c00053b2:	e8 54 c6 ff ff       	call   c0001a0b <disk_write>
c00053b7:	83 c4 20             	add    esp,0x20
c00053ba:	85 c0                	test   eax,eax
c00053bc:	0f 85 64 ff ff ff    	jne    c0005326 <f_read+0x17a>
c00053c2:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053c6:	83 ec 0c             	sub    esp,0xc
c00053c9:	6a 01                	push   0x1
c00053cb:	57                   	push   edi
c00053cc:	56                   	push   esi
c00053cd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053d5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053d9:	50                   	push   eax
c00053da:	e8 16 c6 ff ff       	call   c00019f5 <disk_read>
c00053df:	83 c4 20             	add    esp,0x20
c00053e2:	85 c0                	test   eax,eax
c00053e4:	0f 85 3c ff ff ff    	jne    c0005326 <f_read+0x17a>
c00053ea:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053ed:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053f0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053f3:	ba 00 02 00 00       	mov    edx,0x200
c00053f8:	25 ff 01 00 00       	and    eax,0x1ff
c00053fd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005401:	29 c2                	sub    edx,eax
c0005403:	39 d6                	cmp    esi,edx
c0005405:	76 02                	jbe    c0005409 <f_read+0x25d>
c0005407:	89 d6                	mov    esi,edx
c0005409:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000540d:	89 f1                	mov    ecx,esi
c000540f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005413:	e8 a7 c6 ff ff       	call   c0001abf <mem_cpy>
c0005418:	e9 a7 fe ff ff       	jmp    c00052c4 <f_read+0x118>
c000541d:	bd 07 00 00 00       	mov    ebp,0x7
c0005422:	83 c4 2c             	add    esp,0x2c
c0005425:	89 e8                	mov    eax,ebp
c0005427:	5b                   	pop    ebx
c0005428:	5e                   	pop    esi
c0005429:	5f                   	pop    edi
c000542a:	5d                   	pop    ebp
c000542b:	c3                   	ret    

c000542c <f_write>:
c000542c:	55                   	push   ebp
c000542d:	57                   	push   edi
c000542e:	56                   	push   esi
c000542f:	53                   	push   ebx
c0005430:	83 ec 2c             	sub    esp,0x2c
c0005433:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005437:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000543b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005441:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005445:	89 d8                	mov    eax,ebx
c0005447:	e8 f7 cc ff ff       	call   c0002143 <validate>
c000544c:	89 c5                	mov    ebp,eax
c000544e:	85 c0                	test   eax,eax
c0005450:	0f 85 86 02 00 00    	jne    c00056dc <f_write+0x2b0>
c0005456:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000545a:	85 ed                	test   ebp,ebp
c000545c:	0f 85 7a 02 00 00    	jne    c00056dc <f_write+0x2b0>
c0005462:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005466:	0f 84 6b 02 00 00    	je     c00056d7 <f_write+0x2ab>
c000546c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005470:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005473:	0f 84 43 01 00 00    	je     c00055bc <f_write+0x190>
c0005479:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000547c:	89 c1                	mov    ecx,eax
c000547e:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005482:	0f 83 34 01 00 00    	jae    c00055bc <f_write+0x190>
c0005488:	f7 d0                	not    eax
c000548a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000548e:	e9 29 01 00 00       	jmp    c00055bc <f_write+0x190>
c0005493:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005496:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005499:	89 d0                	mov    eax,edx
c000549b:	25 ff 01 00 00       	and    eax,0x1ff
c00054a0:	0f 85 00 02 00 00    	jne    c00056a6 <f_write+0x27a>
c00054a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054aa:	89 d6                	mov    esi,edx
c00054ac:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054b0:	89 cf                	mov    edi,ecx
c00054b2:	48                   	dec    eax
c00054b3:	0f ac fe 09          	shrd   esi,edi,0x9
c00054b7:	21 f0                	and    eax,esi
c00054b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054bd:	0f 84 06 01 00 00    	je     c00055c9 <f_write+0x19d>
c00054c3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054c7:	0f 88 6e 01 00 00    	js     c000563b <f_write+0x20f>
c00054cd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054d1:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054d4:	89 c8                	mov    eax,ecx
c00054d6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054da:	e8 fa c7 ff ff       	call   c0001cd9 <clst2sect>
c00054df:	89 d1                	mov    ecx,edx
c00054e1:	09 c1                	or     ecx,eax
c00054e3:	0f 84 1c 01 00 00    	je     c0005605 <f_write+0x1d9>
c00054e9:	31 ff                	xor    edi,edi
c00054eb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054ef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054f3:	01 c6                	add    esi,eax
c00054f5:	11 d7                	adc    edi,edx
c00054f7:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054ff:	0f 86 63 01 00 00    	jbe    c0005668 <f_write+0x23c>
c0005505:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005509:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000550d:	c1 e8 09             	shr    eax,0x9
c0005510:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005514:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005518:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000551c:	39 c2                	cmp    edx,eax
c000551e:	76 08                	jbe    c0005528 <f_write+0xfc>
c0005520:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005524:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005528:	83 ec 0c             	sub    esp,0xc
c000552b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000552f:	57                   	push   edi
c0005530:	56                   	push   esi
c0005531:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005535:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005539:	50                   	push   eax
c000553a:	e8 cc c4 ff ff       	call   c0001a0b <disk_write>
c000553f:	83 c4 20             	add    esp,0x20
c0005542:	85 c0                	test   eax,eax
c0005544:	0f 85 ce 00 00 00    	jne    c0005618 <f_write+0x1ec>
c000554a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000554d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005550:	29 f0                	sub    eax,esi
c0005552:	19 fa                	sbb    edx,edi
c0005554:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005558:	89 d7                	mov    edi,edx
c000555a:	ba 00 00 00 00       	mov    edx,0x0
c000555f:	89 f9                	mov    ecx,edi
c0005561:	19 d1                	sbb    ecx,edx
c0005563:	73 1c                	jae    c0005581 <f_write+0x155>
c0005565:	89 c7                	mov    edi,eax
c0005567:	b9 00 02 00 00       	mov    ecx,0x200
c000556c:	c1 e7 09             	shl    edi,0x9
c000556f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005572:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005576:	89 fa                	mov    edx,edi
c0005578:	e8 42 c5 ff ff       	call   c0001abf <mem_cpy>
c000557d:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005581:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005585:	c1 e6 09             	shl    esi,0x9
c0005588:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000558c:	31 ff                	xor    edi,edi
c000558e:	01 30                	add    DWORD PTR [eax],esi
c0005590:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005594:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005598:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000559b:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000559e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00055a1:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00055a4:	89 c1                	mov    ecx,eax
c00055a6:	39 f2                	cmp    edx,esi
c00055a8:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055ab:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055ae:	19 f9                	sbb    ecx,edi
c00055b0:	73 04                	jae    c00055b6 <f_write+0x18a>
c00055b2:	89 f2                	mov    edx,esi
c00055b4:	89 f8                	mov    eax,edi
c00055b6:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055b9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055bc:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055c1:	0f 85 cc fe ff ff    	jne    c0005493 <f_write+0x67>
c00055c7:	eb 2e                	jmp    c00055f7 <f_write+0x1cb>
c00055c9:	89 c8                	mov    eax,ecx
c00055cb:	09 d0                	or     eax,edx
c00055cd:	75 0b                	jne    c00055da <f_write+0x1ae>
c00055cf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055d2:	31 d2                	xor    edx,edx
c00055d4:	85 c0                	test   eax,eax
c00055d6:	75 28                	jne    c0005600 <f_write+0x1d4>
c00055d8:	eb 12                	jmp    c00055ec <f_write+0x1c0>
c00055da:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055de:	74 09                	je     c00055e9 <f_write+0x1bd>
c00055e0:	89 d8                	mov    eax,ebx
c00055e2:	e8 13 c7 ff ff       	call   c0001cfa <clmt_clust>
c00055e7:	eb 0a                	jmp    c00055f3 <f_write+0x1c7>
c00055e9:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ec:	89 d8                	mov    eax,ebx
c00055ee:	e8 a1 da ff ff       	call   c0003094 <create_chain>
c00055f3:	85 c0                	test   eax,eax
c00055f5:	75 09                	jne    c0005600 <f_write+0x1d4>
c00055f7:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055fb:	e9 dc 00 00 00       	jmp    c00056dc <f_write+0x2b0>
c0005600:	83 f8 01             	cmp    eax,0x1
c0005603:	75 0e                	jne    c0005613 <f_write+0x1e7>
c0005605:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005609:	bd 02 00 00 00       	mov    ebp,0x2
c000560e:	e9 c9 00 00 00       	jmp    c00056dc <f_write+0x2b0>
c0005613:	83 f8 ff             	cmp    eax,0xffffffff
c0005616:	75 0e                	jne    c0005626 <f_write+0x1fa>
c0005618:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000561c:	bd 01 00 00 00       	mov    ebp,0x1
c0005621:	e9 b6 00 00 00       	jmp    c00056dc <f_write+0x2b0>
c0005626:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005629:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000562d:	0f 85 90 fe ff ff    	jne    c00054c3 <f_write+0x97>
c0005633:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005636:	e9 88 fe ff ff       	jmp    c00054c3 <f_write+0x97>
c000563b:	83 ec 0c             	sub    esp,0xc
c000563e:	8d 43 50             	lea    eax,[ebx+0x50]
c0005641:	6a 01                	push   0x1
c0005643:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005646:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005649:	50                   	push   eax
c000564a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000564e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005652:	50                   	push   eax
c0005653:	e8 b3 c3 ff ff       	call   c0001a0b <disk_write>
c0005658:	83 c4 20             	add    esp,0x20
c000565b:	85 c0                	test   eax,eax
c000565d:	75 b9                	jne    c0005618 <f_write+0x1ec>
c000565f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005663:	e9 65 fe ff ff       	jmp    c00054cd <f_write+0xa1>
c0005668:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000566b:	75 05                	jne    c0005672 <f_write+0x246>
c000566d:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005670:	74 2e                	je     c00056a0 <f_write+0x274>
c0005672:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005675:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005678:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000567b:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000567e:	73 20                	jae    c00056a0 <f_write+0x274>
c0005680:	83 ec 0c             	sub    esp,0xc
c0005683:	8d 43 50             	lea    eax,[ebx+0x50]
c0005686:	6a 01                	push   0x1
c0005688:	57                   	push   edi
c0005689:	56                   	push   esi
c000568a:	50                   	push   eax
c000568b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000568f:	50                   	push   eax
c0005690:	e8 60 c3 ff ff       	call   c00019f5 <disk_read>
c0005695:	83 c4 20             	add    esp,0x20
c0005698:	85 c0                	test   eax,eax
c000569a:	0f 85 78 ff ff ff    	jne    c0005618 <f_write+0x1ec>
c00056a0:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00056a3:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00056a6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056a9:	ba 00 02 00 00       	mov    edx,0x200
c00056ae:	25 ff 01 00 00       	and    eax,0x1ff
c00056b3:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056b7:	29 c2                	sub    edx,eax
c00056b9:	39 d6                	cmp    esi,edx
c00056bb:	76 02                	jbe    c00056bf <f_write+0x293>
c00056bd:	89 d6                	mov    esi,edx
c00056bf:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056c3:	89 f1                	mov    ecx,esi
c00056c5:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056c9:	e8 f1 c3 ff ff       	call   c0001abf <mem_cpy>
c00056ce:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056d2:	e9 b1 fe ff ff       	jmp    c0005588 <f_write+0x15c>
c00056d7:	bd 07 00 00 00       	mov    ebp,0x7
c00056dc:	83 c4 2c             	add    esp,0x2c
c00056df:	89 e8                	mov    eax,ebp
c00056e1:	5b                   	pop    ebx
c00056e2:	5e                   	pop    esi
c00056e3:	5f                   	pop    edi
c00056e4:	5d                   	pop    ebp
c00056e5:	c3                   	ret    

c00056e6 <f_sync>:
c00056e6:	56                   	push   esi
c00056e7:	53                   	push   ebx
c00056e8:	83 ec 64             	sub    esp,0x64
c00056eb:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056ef:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056f3:	89 d8                	mov    eax,ebx
c00056f5:	e8 49 ca ff ff       	call   c0002143 <validate>
c00056fa:	85 c0                	test   eax,eax
c00056fc:	0f 85 ba 01 00 00    	jne    c00058bc <f_sync+0x1d6>
c0005702:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005705:	f6 c2 40             	test   dl,0x40
c0005708:	0f 84 ae 01 00 00    	je     c00058bc <f_sync+0x1d6>
c000570e:	84 d2                	test   dl,dl
c0005710:	79 33                	jns    c0005745 <f_sync+0x5f>
c0005712:	83 ec 0c             	sub    esp,0xc
c0005715:	8d 43 50             	lea    eax,[ebx+0x50]
c0005718:	6a 01                	push   0x1
c000571a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000571d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005720:	50                   	push   eax
c0005721:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005725:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005729:	50                   	push   eax
c000572a:	e8 dc c2 ff ff       	call   c0001a0b <disk_write>
c000572f:	83 c4 20             	add    esp,0x20
c0005732:	89 c2                	mov    edx,eax
c0005734:	b8 01 00 00 00       	mov    eax,0x1
c0005739:	85 d2                	test   edx,edx
c000573b:	0f 85 7b 01 00 00    	jne    c00058bc <f_sync+0x1d6>
c0005741:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005749:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000574c:	0f 85 11 01 00 00    	jne    c0005863 <f_sync+0x17d>
c0005752:	89 d8                	mov    eax,ebx
c0005754:	e8 13 d6 ff ff       	call   c0002d6c <fill_first_frag>
c0005759:	85 c0                	test   eax,eax
c000575b:	0f 85 5b 01 00 00    	jne    c00058bc <f_sync+0x1d6>
c0005761:	83 c9 ff             	or     ecx,0xffffffff
c0005764:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005767:	89 d8                	mov    eax,ebx
c0005769:	e8 c9 d5 ff ff       	call   c0002d37 <fill_last_frag>
c000576e:	85 c0                	test   eax,eax
c0005770:	0f 85 46 01 00 00    	jne    c00058bc <f_sync+0x1d6>
c0005776:	83 ec 0c             	sub    esp,0xc
c0005779:	68 60 04 00 00       	push   0x460
c000577e:	e8 f0 2a 00 00       	call   c0008273 <ff_memalloc>
c0005783:	83 c4 10             	add    esp,0x10
c0005786:	89 c6                	mov    esi,eax
c0005788:	b8 11 00 00 00       	mov    eax,0x11
c000578d:	85 f6                	test   esi,esi
c000578f:	0f 84 27 01 00 00    	je     c00058bc <f_sync+0x1d6>
c0005795:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005799:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000579f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00057a2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00057a5:	89 da                	mov    edx,ebx
c00057a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057ab:	e8 af df ff ff       	call   c000375f <load_obj_xdir>
c00057b0:	85 c0                	test   eax,eax
c00057b2:	0f 85 95 00 00 00    	jne    c000584d <f_sync+0x167>
c00057b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057bc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057bf:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057c3:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057c6:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057c9:	83 ca 01             	or     edx,0x1
c00057cc:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057cf:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057d2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d5:	83 c0 34             	add    eax,0x34
c00057d8:	e8 d9 c2 ff ff       	call   c0001ab6 <st_dword>
c00057dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057e4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057ea:	83 c0 38             	add    eax,0x38
c00057ed:	e8 c7 c2 ff ff       	call   c0001ab9 <st_qword>
c00057f2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057fc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057ff:	83 c0 28             	add    eax,0x28
c0005802:	e8 b2 c2 ff ff       	call   c0001ab9 <st_qword>
c0005807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000580b:	ba 00 00 21 50       	mov    edx,0x50210000
c0005810:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005813:	83 c0 0c             	add    eax,0xc
c0005816:	e8 9b c2 ff ff       	call   c0001ab6 <st_dword>
c000581b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000581f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005822:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005826:	31 d2                	xor    edx,edx
c0005828:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000582b:	83 c0 10             	add    eax,0x10
c000582e:	e8 83 c2 ff ff       	call   c0001ab6 <st_dword>
c0005833:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005837:	e8 62 e1 ff ff       	call   c000399e <store_xdir>
c000583c:	85 c0                	test   eax,eax
c000583e:	75 0d                	jne    c000584d <f_sync+0x167>
c0005840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005844:	e8 00 eb ff ff       	call   c0004349 <sync_fs>
c0005849:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000584d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005851:	83 ec 0c             	sub    esp,0xc
c0005854:	56                   	push   esi
c0005855:	e8 2f 2a 00 00       	call   c0008289 <ff_memfree>
c000585a:	83 c4 10             	add    esp,0x10
c000585d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005861:	eb 59                	jmp    c00058bc <f_sync+0x1d6>
c0005863:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005866:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005869:	e8 b0 c9 ff ff       	call   c000221e <move_window>
c000586e:	85 c0                	test   eax,eax
c0005870:	75 4a                	jne    c00058bc <f_sync+0x1d6>
c0005872:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005875:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005879:	89 f2                	mov    edx,esi
c000587b:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000587e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005880:	e8 5f f3 ff ff       	call   c0004be4 <st_clust.isra.1>
c0005885:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005888:	8d 46 1c             	lea    eax,[esi+0x1c]
c000588b:	e8 26 c2 ff ff       	call   c0001ab6 <st_dword>
c0005890:	8d 46 16             	lea    eax,[esi+0x16]
c0005893:	ba 00 00 21 50       	mov    edx,0x50210000
c0005898:	e8 19 c2 ff ff       	call   c0001ab6 <st_dword>
c000589d:	8d 46 12             	lea    eax,[esi+0x12]
c00058a0:	31 d2                	xor    edx,edx
c00058a2:	e8 0b c2 ff ff       	call   c0001ab2 <st_word>
c00058a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058ab:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b3:	e8 91 ea ff ff       	call   c0004349 <sync_fs>
c00058b8:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058bc:	83 c4 64             	add    esp,0x64
c00058bf:	5b                   	pop    ebx
c00058c0:	5e                   	pop    esi
c00058c1:	c3                   	ret    

c00058c2 <f_close>:
c00058c2:	53                   	push   ebx
c00058c3:	83 ec 24             	sub    esp,0x24
c00058c6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058ca:	53                   	push   ebx
c00058cb:	e8 16 fe ff ff       	call   c00056e6 <f_sync>
c00058d0:	83 c4 10             	add    esp,0x10
c00058d3:	85 c0                	test   eax,eax
c00058d5:	75 15                	jne    c00058ec <f_close+0x2a>
c00058d7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058db:	89 d8                	mov    eax,ebx
c00058dd:	e8 61 c8 ff ff       	call   c0002143 <validate>
c00058e2:	85 c0                	test   eax,eax
c00058e4:	75 06                	jne    c00058ec <f_close+0x2a>
c00058e6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058ec:	83 c4 18             	add    esp,0x18
c00058ef:	5b                   	pop    ebx
c00058f0:	c3                   	ret    

c00058f1 <f_lseek>:
c00058f1:	55                   	push   ebp
c00058f2:	57                   	push   edi
c00058f3:	56                   	push   esi
c00058f4:	53                   	push   ebx
c00058f5:	83 ec 3c             	sub    esp,0x3c
c00058f8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058fc:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005900:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005904:	89 04 24             	mov    DWORD PTR [esp],eax
c0005907:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000590b:	89 d8                	mov    eax,ebx
c000590d:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005911:	e8 2d c8 ff ff       	call   c0002143 <validate>
c0005916:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000591a:	85 c0                	test   eax,eax
c000591c:	0f 85 7a 04 00 00    	jne    c0005d9c <f_lseek+0x4ab>
c0005922:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005926:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000592a:	85 c0                	test   eax,eax
c000592c:	0f 85 6a 04 00 00    	jne    c0005d9c <f_lseek+0x4ab>
c0005932:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005936:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005939:	74 0c                	je     c0005947 <f_lseek+0x56>
c000593b:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000593e:	85 c0                	test   eax,eax
c0005940:	75 1f                	jne    c0005961 <f_lseek+0x70>
c0005942:	e9 b5 01 00 00       	jmp    c0005afc <f_lseek+0x20b>
c0005947:	83 c9 ff             	or     ecx,0xffffffff
c000594a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594d:	89 d8                	mov    eax,ebx
c000594f:	e8 e3 d3 ff ff       	call   c0002d37 <fill_last_frag>
c0005954:	85 c0                	test   eax,eax
c0005956:	74 e3                	je     c000593b <f_lseek+0x4a>
c0005958:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000595c:	e9 3b 04 00 00       	jmp    c0005d9c <f_lseek+0x4ab>
c0005961:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005966:	0f 85 ac 00 00 00    	jne    c0005a18 <f_lseek+0x127>
c000596c:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005970:	0f 85 a2 00 00 00    	jne    c0005a18 <f_lseek+0x127>
c0005976:	8d 78 04             	lea    edi,[eax+0x4]
c0005979:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000597c:	8b 00                	mov    eax,DWORD PTR [eax]
c000597e:	be 02 00 00 00       	mov    esi,0x2
c0005983:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005987:	85 ed                	test   ebp,ebp
c0005989:	74 73                	je     c00059fe <f_lseek+0x10d>
c000598b:	89 e9                	mov    ecx,ebp
c000598d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005994:	ff 04 24             	inc    DWORD PTR [esp]
c0005997:	89 ca                	mov    edx,ecx
c0005999:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000599d:	89 d8                	mov    eax,ebx
c000599f:	e8 02 d4 ff ff       	call   c0002da6 <get_fat>
c00059a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059a8:	83 f8 01             	cmp    eax,0x1
c00059ab:	77 11                	ja     c00059be <f_lseek+0xcd>
c00059ad:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059b1:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00059b9:	e9 de 03 00 00       	jmp    c0005d9c <f_lseek+0x4ab>
c00059be:	83 f8 ff             	cmp    eax,0xffffffff
c00059c1:	75 11                	jne    c00059d4 <f_lseek+0xe3>
c00059c3:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059c7:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059cf:	e9 c8 03 00 00       	jmp    c0005d9c <f_lseek+0x4ab>
c00059d4:	8d 51 01             	lea    edx,[ecx+0x1]
c00059d7:	89 c1                	mov    ecx,eax
c00059d9:	39 c2                	cmp    edx,eax
c00059db:	74 b7                	je     c0005994 <f_lseek+0xa3>
c00059dd:	83 c6 02             	add    esi,0x2
c00059e0:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059e4:	72 0b                	jb     c00059f1 <f_lseek+0x100>
c00059e6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059e9:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059ec:	89 0f                	mov    DWORD PTR [edi],ecx
c00059ee:	83 c7 08             	add    edi,0x8
c00059f1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059f5:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059f8:	76 04                	jbe    c00059fe <f_lseek+0x10d>
c00059fa:	89 c5                	mov    ebp,eax
c00059fc:	eb 8d                	jmp    c000598b <f_lseek+0x9a>
c00059fe:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a01:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005a05:	89 30                	mov    DWORD PTR [eax],esi
c0005a07:	0f 87 87 03 00 00    	ja     c0005d94 <f_lseek+0x4a3>
c0005a0d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a13:	e9 84 03 00 00       	jmp    c0005d9c <f_lseek+0x4ab>
c0005a18:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005a1b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005a1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a2a:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005a2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a31:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a35:	73 0f                	jae    c0005a46 <f_lseek+0x155>
c0005a37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a3a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a4a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a4e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a51:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a58:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a5c:	0f 84 3a 03 00 00    	je     c0005d9c <f_lseek+0x4ab>
c0005a62:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a66:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a6a:	83 c6 ff             	add    esi,0xffffffff
c0005a6d:	89 d8                	mov    eax,ebx
c0005a6f:	83 d7 ff             	adc    edi,0xffffffff
c0005a72:	89 f2                	mov    edx,esi
c0005a74:	89 f9                	mov    ecx,edi
c0005a76:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a7a:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a7d:	e8 78 c2 ff ff       	call   c0001cfa <clmt_clust>
c0005a82:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a86:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a89:	89 c2                	mov    edx,eax
c0005a8b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a8f:	89 c8                	mov    eax,ecx
c0005a91:	e8 43 c2 ff ff       	call   c0001cd9 <clst2sect>
c0005a96:	89 d7                	mov    edi,edx
c0005a98:	09 c7                	or     edi,eax
c0005a9a:	0f 84 0d ff ff ff    	je     c00059ad <f_lseek+0xbc>
c0005aa0:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005aa4:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005aaa:	0f 84 ec 02 00 00    	je     c0005d9c <f_lseek+0x4ab>
c0005ab0:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ab4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ab8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005abb:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005abf:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ac3:	4d                   	dec    ebp
c0005ac4:	31 ff                	xor    edi,edi
c0005ac6:	21 ee                	and    esi,ebp
c0005ac8:	01 c6                	add    esi,eax
c0005aca:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005acd:	11 d7                	adc    edi,edx
c0005acf:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005ad2:	39 fa                	cmp    edx,edi
c0005ad4:	75 08                	jne    c0005ade <f_lseek+0x1ed>
c0005ad6:	39 f0                	cmp    eax,esi
c0005ad8:	0f 84 be 02 00 00    	je     c0005d9c <f_lseek+0x4ab>
c0005ade:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ae1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ae5:	0f 89 80 02 00 00    	jns    c0005d6b <f_lseek+0x47a>
c0005aeb:	83 ec 0c             	sub    esp,0xc
c0005aee:	6a 01                	push   0x1
c0005af0:	52                   	push   edx
c0005af1:	50                   	push   eax
c0005af2:	55                   	push   ebp
c0005af3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005af7:	e9 5a 02 00 00       	jmp    c0005d56 <f_lseek+0x465>
c0005afc:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b00:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005b03:	74 16                	je     c0005b1b <f_lseek+0x22a>
c0005b05:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005b0a:	76 0f                	jbe    c0005b1b <f_lseek+0x22a>
c0005b0c:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005b13:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005b1b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005b1e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005b21:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005b24:	89 c7                	mov    edi,eax
c0005b26:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b2a:	73 0d                	jae    c0005b39 <f_lseek+0x248>
c0005b2c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b30:	75 07                	jne    c0005b39 <f_lseek+0x248>
c0005b32:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b35:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b39:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b3c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b3f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b43:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b4a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b51:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b54:	75 09                	jne    c0005b5f <f_lseek+0x26e>
c0005b56:	31 f6                	xor    esi,esi
c0005b58:	31 ff                	xor    edi,edi
c0005b5a:	e9 af 01 00 00       	jmp    c0005d0e <f_lseek+0x41d>
c0005b5f:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b63:	89 d7                	mov    edi,edx
c0005b65:	c1 e1 09             	shl    ecx,0x9
c0005b68:	09 c7                	or     edi,eax
c0005b6a:	89 cd                	mov    ebp,ecx
c0005b6c:	74 6d                	je     c0005bdb <f_lseek+0x2ea>
c0005b6e:	83 c0 ff             	add    eax,0xffffffff
c0005b71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b75:	83 d2 ff             	adc    edx,0xffffffff
c0005b78:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b7f:	83 c0 ff             	add    eax,0xffffffff
c0005b82:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b86:	83 d2 ff             	adc    edx,0xffffffff
c0005b89:	31 ff                	xor    edi,edi
c0005b8b:	57                   	push   edi
c0005b8c:	51                   	push   ecx
c0005b8d:	52                   	push   edx
c0005b8e:	50                   	push   eax
c0005b8f:	e8 c8 95 01 00       	call   c001f15c <__udivdi3>
c0005b94:	83 c4 10             	add    esp,0x10
c0005b97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b9f:	57                   	push   edi
c0005ba0:	55                   	push   ebp
c0005ba1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005ba5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005ba9:	e8 ae 95 01 00       	call   c001f15c <__udivdi3>
c0005bae:	83 c4 10             	add    esp,0x10
c0005bb1:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005bb5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005bb9:	19 d1                	sbb    ecx,edx
c0005bbb:	72 1e                	jb     c0005bdb <f_lseek+0x2ea>
c0005bbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005bc1:	89 e9                	mov    ecx,ebp
c0005bc3:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005bc6:	f7 d9                	neg    ecx
c0005bc8:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005bcb:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005bcf:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005bd2:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005bd5:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005bd9:	eb 28                	jmp    c0005c03 <f_lseek+0x312>
c0005bdb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005bde:	85 c0                	test   eax,eax
c0005be0:	75 1e                	jne    c0005c00 <f_lseek+0x30f>
c0005be2:	31 d2                	xor    edx,edx
c0005be4:	89 d8                	mov    eax,ebx
c0005be6:	e8 a9 d4 ff ff       	call   c0003094 <create_chain>
c0005beb:	83 f8 01             	cmp    eax,0x1
c0005bee:	0f 84 b9 fd ff ff    	je     c00059ad <f_lseek+0xbc>
c0005bf4:	83 f8 ff             	cmp    eax,0xffffffff
c0005bf7:	0f 84 c6 fd ff ff    	je     c00059c3 <f_lseek+0xd2>
c0005bfd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005c00:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c03:	85 c0                	test   eax,eax
c0005c05:	0f 84 4b ff ff ff    	je     c0005b56 <f_lseek+0x265>
c0005c0b:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005c0f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005c17:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005c1a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c1e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005c21:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005c24:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c28:	0f 83 9d 00 00 00    	jae    c0005ccb <f_lseek+0x3da>
c0005c2e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c32:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c36:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c39:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c3d:	01 f2                	add    edx,esi
c0005c3f:	11 f9                	adc    ecx,edi
c0005c41:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c45:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c49:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c4c:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c4f:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c52:	f6 c1 02             	test   cl,0x2
c0005c55:	74 35                	je     c0005c8c <f_lseek+0x39b>
c0005c57:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c5b:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c5e:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c61:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c65:	73 16                	jae    c0005c7d <f_lseek+0x38c>
c0005c67:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c6b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c6f:	88 ca                	mov    dl,cl
c0005c71:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c74:	83 ca 40             	or     edx,0x40
c0005c77:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c7a:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c7d:	89 c2                	mov    edx,eax
c0005c7f:	89 d8                	mov    eax,ebx
c0005c81:	e8 0e d4 ff ff       	call   c0003094 <create_chain>
c0005c86:	85 c0                	test   eax,eax
c0005c88:	75 0b                	jne    c0005c95 <f_lseek+0x3a4>
c0005c8a:	eb 30                	jmp    c0005cbc <f_lseek+0x3cb>
c0005c8c:	89 c2                	mov    edx,eax
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	e8 11 d1 ff ff       	call   c0002da6 <get_fat>
c0005c95:	83 f8 ff             	cmp    eax,0xffffffff
c0005c98:	0f 84 25 fd ff ff    	je     c00059c3 <f_lseek+0xd2>
c0005c9e:	83 f8 01             	cmp    eax,0x1
c0005ca1:	0f 86 06 fd ff ff    	jbe    c00059ad <f_lseek+0xbc>
c0005ca7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005cab:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005cae:	0f 86 f9 fc ff ff    	jbe    c00059ad <f_lseek+0xbc>
c0005cb4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cb7:	e9 5b ff ff ff       	jmp    c0005c17 <f_lseek+0x326>
c0005cbc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005cc3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ccb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005cce:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005cd2:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005cd5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005cd8:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005cdb:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ce1:	0f 84 6f fe ff ff    	je     c0005b56 <f_lseek+0x265>
c0005ce7:	89 c2                	mov    edx,eax
c0005ce9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ced:	e8 e7 bf ff ff       	call   c0001cd9 <clst2sect>
c0005cf2:	89 d7                	mov    edi,edx
c0005cf4:	09 c7                	or     edi,eax
c0005cf6:	0f 84 b1 fc ff ff    	je     c00059ad <f_lseek+0xbc>
c0005cfc:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d00:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d03:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d07:	c1 ef 09             	shr    edi,0x9
c0005d0a:	01 c6                	add    esi,eax
c0005d0c:	11 d7                	adc    edi,edx
c0005d0e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d11:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d14:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005d17:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005d1a:	19 d1                	sbb    ecx,edx
c0005d1c:	73 0a                	jae    c0005d28 <f_lseek+0x437>
c0005d1e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005d21:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005d24:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005d28:	a9 ff 01 00 00       	test   eax,0x1ff
c0005d2d:	74 6d                	je     c0005d9c <f_lseek+0x4ab>
c0005d2f:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d35:	39 fa                	cmp    edx,edi
c0005d37:	75 04                	jne    c0005d3d <f_lseek+0x44c>
c0005d39:	39 f0                	cmp    eax,esi
c0005d3b:	74 5f                	je     c0005d9c <f_lseek+0x4ab>
c0005d3d:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d40:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d44:	79 25                	jns    c0005d6b <f_lseek+0x47a>
c0005d46:	83 ec 0c             	sub    esp,0xc
c0005d49:	6a 01                	push   0x1
c0005d4b:	52                   	push   edx
c0005d4c:	50                   	push   eax
c0005d4d:	55                   	push   ebp
c0005d4e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d52:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d56:	50                   	push   eax
c0005d57:	e8 af bc ff ff       	call   c0001a0b <disk_write>
c0005d5c:	83 c4 20             	add    esp,0x20
c0005d5f:	85 c0                	test   eax,eax
c0005d61:	0f 85 5c fc ff ff    	jne    c00059c3 <f_lseek+0xd2>
c0005d67:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d6b:	83 ec 0c             	sub    esp,0xc
c0005d6e:	6a 01                	push   0x1
c0005d70:	57                   	push   edi
c0005d71:	56                   	push   esi
c0005d72:	55                   	push   ebp
c0005d73:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d77:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d7b:	50                   	push   eax
c0005d7c:	e8 74 bc ff ff       	call   c00019f5 <disk_read>
c0005d81:	83 c4 20             	add    esp,0x20
c0005d84:	85 c0                	test   eax,eax
c0005d86:	0f 85 37 fc ff ff    	jne    c00059c3 <f_lseek+0xd2>
c0005d8c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d8f:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d92:	eb 08                	jmp    c0005d9c <f_lseek+0x4ab>
c0005d94:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005da0:	83 c4 3c             	add    esp,0x3c
c0005da3:	5b                   	pop    ebx
c0005da4:	5e                   	pop    esi
c0005da5:	5f                   	pop    edi
c0005da6:	5d                   	pop    ebp
c0005da7:	c3                   	ret    

c0005da8 <f_opendir>:
c0005da8:	56                   	push   esi
c0005da9:	b8 09 00 00 00       	mov    eax,0x9
c0005dae:	53                   	push   ebx
c0005daf:	83 ec 24             	sub    esp,0x24
c0005db2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005db6:	85 db                	test   ebx,ebx
c0005db8:	0f 84 e6 00 00 00    	je     c0005ea4 <f_opendir+0xfc>
c0005dbe:	31 c9                	xor    ecx,ecx
c0005dc0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005dc4:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005dc8:	e8 03 c7 ff ff       	call   c00024d0 <mount_volume>
c0005dcd:	85 c0                	test   eax,eax
c0005dcf:	0f 85 c9 00 00 00    	jne    c0005e9e <f_opendir+0xf6>
c0005dd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dd9:	83 ec 0c             	sub    esp,0xc
c0005ddc:	89 03                	mov    DWORD PTR [ebx],eax
c0005dde:	68 60 04 00 00       	push   0x460
c0005de3:	e8 8b 24 00 00       	call   c0008273 <ff_memalloc>
c0005de8:	83 c4 10             	add    esp,0x10
c0005deb:	89 c6                	mov    esi,eax
c0005ded:	b8 11 00 00 00       	mov    eax,0x11
c0005df2:	85 f6                	test   esi,esi
c0005df4:	0f 84 aa 00 00 00    	je     c0005ea4 <f_opendir+0xfc>
c0005dfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dfe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e07:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e0a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005e0e:	89 d8                	mov    eax,ebx
c0005e10:	e8 31 ee ff ff       	call   c0004c46 <follow_path>
c0005e15:	85 c0                	test   eax,eax
c0005e17:	75 61                	jne    c0005e7a <f_opendir+0xd2>
c0005e19:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005e1d:	78 46                	js     c0005e65 <f_opendir+0xbd>
c0005e1f:	b8 05 00 00 00       	mov    eax,0x5
c0005e24:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005e28:	74 50                	je     c0005e7a <f_opendir+0xd2>
c0005e2a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e2e:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e30:	3c 04                	cmp    al,0x4
c0005e32:	75 26                	jne    c0005e5a <f_opendir+0xb2>
c0005e34:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e37:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e3a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e3d:	30 d2                	xor    dl,dl
c0005e3f:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e43:	09 c2                	or     edx,eax
c0005e45:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e48:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e4b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e4e:	89 da                	mov    edx,ebx
c0005e50:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e53:	e8 b4 ed ff ff       	call   c0004c0c <init_alloc_info.isra.2>
c0005e58:	eb 0b                	jmp    c0005e65 <f_opendir+0xbd>
c0005e5a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e5d:	e8 59 ed ff ff       	call   c0004bbb <ld_clust.isra.0>
c0005e62:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e69:	31 d2                	xor    edx,edx
c0005e6b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e6f:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e73:	89 d8                	mov    eax,ebx
c0005e75:	e8 22 d1 ff ff       	call   c0002f9c <dir_sdi>
c0005e7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e7e:	83 ec 0c             	sub    esp,0xc
c0005e81:	56                   	push   esi
c0005e82:	e8 02 24 00 00       	call   c0008289 <ff_memfree>
c0005e87:	83 c4 10             	add    esp,0x10
c0005e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e8e:	83 f8 04             	cmp    eax,0x4
c0005e91:	74 06                	je     c0005e99 <f_opendir+0xf1>
c0005e93:	85 c0                	test   eax,eax
c0005e95:	74 0d                	je     c0005ea4 <f_opendir+0xfc>
c0005e97:	eb 05                	jmp    c0005e9e <f_opendir+0xf6>
c0005e99:	b8 05 00 00 00       	mov    eax,0x5
c0005e9e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ea4:	83 c4 24             	add    esp,0x24
c0005ea7:	5b                   	pop    ebx
c0005ea8:	5e                   	pop    esi
c0005ea9:	c3                   	ret    

c0005eaa <f_closedir>:
c0005eaa:	53                   	push   ebx
c0005eab:	83 ec 18             	sub    esp,0x18
c0005eae:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005eb2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005eb6:	89 d8                	mov    eax,ebx
c0005eb8:	e8 86 c2 ff ff       	call   c0002143 <validate>
c0005ebd:	85 c0                	test   eax,eax
c0005ebf:	75 06                	jne    c0005ec7 <f_closedir+0x1d>
c0005ec1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ec7:	83 c4 18             	add    esp,0x18
c0005eca:	5b                   	pop    ebx
c0005ecb:	c3                   	ret    

c0005ecc <f_readdir>:
c0005ecc:	57                   	push   edi
c0005ecd:	56                   	push   esi
c0005ece:	53                   	push   ebx
c0005ecf:	83 ec 20             	sub    esp,0x20
c0005ed2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005eda:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ede:	89 d8                	mov    eax,ebx
c0005ee0:	e8 5e c2 ff ff       	call   c0002143 <validate>
c0005ee5:	85 c0                	test   eax,eax
c0005ee7:	75 77                	jne    c0005f60 <f_readdir+0x94>
c0005ee9:	85 ff                	test   edi,edi
c0005eeb:	75 0b                	jne    c0005ef8 <f_readdir+0x2c>
c0005eed:	31 d2                	xor    edx,edx
c0005eef:	89 d8                	mov    eax,ebx
c0005ef1:	e8 a6 d0 ff ff       	call   c0002f9c <dir_sdi>
c0005ef6:	eb 68                	jmp    c0005f60 <f_readdir+0x94>
c0005ef8:	83 ec 0c             	sub    esp,0xc
c0005efb:	68 60 04 00 00       	push   0x460
c0005f00:	e8 6e 23 00 00       	call   c0008273 <ff_memalloc>
c0005f05:	83 c4 10             	add    esp,0x10
c0005f08:	89 c6                	mov    esi,eax
c0005f0a:	b8 11 00 00 00       	mov    eax,0x11
c0005f0f:	85 f6                	test   esi,esi
c0005f11:	74 4d                	je     c0005f60 <f_readdir+0x94>
c0005f13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f17:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f20:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f23:	31 d2                	xor    edx,edx
c0005f25:	89 d8                	mov    eax,ebx
c0005f27:	e8 80 d8 ff ff       	call   c00037ac <dir_read>
c0005f2c:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f31:	75 19                	jne    c0005f4c <f_readdir+0x80>
c0005f33:	89 fa                	mov    edx,edi
c0005f35:	89 d8                	mov    eax,ebx
c0005f37:	e8 7e ea ff ff       	call   c00049ba <get_fileinfo>
c0005f3c:	31 d2                	xor    edx,edx
c0005f3e:	89 d8                	mov    eax,ebx
c0005f40:	e8 af d5 ff ff       	call   c00034f4 <dir_next>
c0005f45:	83 f8 04             	cmp    eax,0x4
c0005f48:	75 02                	jne    c0005f4c <f_readdir+0x80>
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f50:	83 ec 0c             	sub    esp,0xc
c0005f53:	56                   	push   esi
c0005f54:	e8 30 23 00 00       	call   c0008289 <ff_memfree>
c0005f59:	83 c4 10             	add    esp,0x10
c0005f5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f60:	83 c4 20             	add    esp,0x20
c0005f63:	5b                   	pop    ebx
c0005f64:	5e                   	pop    esi
c0005f65:	5f                   	pop    edi
c0005f66:	c3                   	ret    

c0005f67 <f_stat>:
c0005f67:	57                   	push   edi
c0005f68:	31 c9                	xor    ecx,ecx
c0005f6a:	56                   	push   esi
c0005f6b:	53                   	push   ebx
c0005f6c:	83 ec 50             	sub    esp,0x50
c0005f6f:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f73:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f77:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f7b:	e8 50 c5 ff ff       	call   c00024d0 <mount_volume>
c0005f80:	89 c3                	mov    ebx,eax
c0005f82:	85 c0                	test   eax,eax
c0005f84:	75 67                	jne    c0005fed <f_stat+0x86>
c0005f86:	83 ec 0c             	sub    esp,0xc
c0005f89:	bb 11 00 00 00       	mov    ebx,0x11
c0005f8e:	68 60 04 00 00       	push   0x460
c0005f93:	e8 db 22 00 00       	call   c0008273 <ff_memalloc>
c0005f98:	83 c4 10             	add    esp,0x10
c0005f9b:	89 c6                	mov    esi,eax
c0005f9d:	85 c0                	test   eax,eax
c0005f9f:	74 4c                	je     c0005fed <f_stat+0x86>
c0005fa1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005fa5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005fab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fae:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005fb1:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005fb5:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fb9:	e8 88 ec ff ff       	call   c0004c46 <follow_path>
c0005fbe:	89 c3                	mov    ebx,eax
c0005fc0:	85 c0                	test   eax,eax
c0005fc2:	75 1d                	jne    c0005fe1 <f_stat+0x7a>
c0005fc4:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005fc9:	78 11                	js     c0005fdc <f_stat+0x75>
c0005fcb:	85 ff                	test   edi,edi
c0005fcd:	74 12                	je     c0005fe1 <f_stat+0x7a>
c0005fcf:	89 fa                	mov    edx,edi
c0005fd1:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fd5:	e8 e0 e9 ff ff       	call   c00049ba <get_fileinfo>
c0005fda:	eb 05                	jmp    c0005fe1 <f_stat+0x7a>
c0005fdc:	bb 06 00 00 00       	mov    ebx,0x6
c0005fe1:	83 ec 0c             	sub    esp,0xc
c0005fe4:	56                   	push   esi
c0005fe5:	e8 9f 22 00 00       	call   c0008289 <ff_memfree>
c0005fea:	83 c4 10             	add    esp,0x10
c0005fed:	83 c4 50             	add    esp,0x50
c0005ff0:	89 d8                	mov    eax,ebx
c0005ff2:	5b                   	pop    ebx
c0005ff3:	5e                   	pop    esi
c0005ff4:	5f                   	pop    edi
c0005ff5:	c3                   	ret    

c0005ff6 <f_getfree>:
c0005ff6:	55                   	push   ebp
c0005ff7:	31 c9                	xor    ecx,ecx
c0005ff9:	57                   	push   edi
c0005ffa:	56                   	push   esi
c0005ffb:	53                   	push   ebx
c0005ffc:	83 ec 5c             	sub    esp,0x5c
c0005fff:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006003:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006007:	e8 c4 c4 ff ff       	call   c00024d0 <mount_volume>
c000600c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006010:	85 c0                	test   eax,eax
c0006012:	0f 85 9d 01 00 00    	jne    c00061b5 <f_getfree+0x1bf>
c0006018:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000601c:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006020:	89 02                	mov    DWORD PTR [edx],eax
c0006022:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006025:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006028:	8d 71 fe             	lea    esi,[ecx-0x2]
c000602b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000602f:	39 f2                	cmp    edx,esi
c0006031:	77 0b                	ja     c000603e <f_getfree+0x48>
c0006033:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006037:	89 10                	mov    DWORD PTR [eax],edx
c0006039:	e9 77 01 00 00       	jmp    c00061b5 <f_getfree+0x1bf>
c000603e:	8a 10                	mov    dl,BYTE PTR [eax]
c0006040:	80 fa 01             	cmp    dl,0x1
c0006043:	75 3a                	jne    c000607f <f_getfree+0x89>
c0006045:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006049:	be 02 00 00 00       	mov    esi,0x2
c000604e:	31 db                	xor    ebx,ebx
c0006050:	89 f2                	mov    edx,esi
c0006052:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006056:	e8 4b cd ff ff       	call   c0002da6 <get_fat>
c000605b:	83 f8 ff             	cmp    eax,0xffffffff
c000605e:	0f 84 28 01 00 00    	je     c000618c <f_getfree+0x196>
c0006064:	83 f8 01             	cmp    eax,0x1
c0006067:	0f 84 29 01 00 00    	je     c0006196 <f_getfree+0x1a0>
c000606d:	83 d3 00             	adc    ebx,0x0
c0006070:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006074:	46                   	inc    esi
c0006075:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006078:	77 d6                	ja     c0006050 <f_getfree+0x5a>
c000607a:	e9 25 01 00 00       	jmp    c00061a4 <f_getfree+0x1ae>
c000607f:	80 fa 04             	cmp    dl,0x4
c0006082:	0f 85 88 00 00 00    	jne    c0006110 <f_getfree+0x11a>
c0006088:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000608b:	31 ed                	xor    ebp,ebp
c000608d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006090:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006094:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006098:	31 db                	xor    ebx,ebx
c000609a:	85 ed                	test   ebp,ebp
c000609c:	75 3f                	jne    c00060dd <f_getfree+0xe7>
c000609e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00060a6:	83 c0 01             	add    eax,0x1
c00060a9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00060ad:	83 d2 00             	adc    edx,0x0
c00060b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060b4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00060b8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00060c0:	e8 59 c1 ff ff       	call   c000221e <move_window>
c00060c5:	85 c0                	test   eax,eax
c00060c7:	0f 85 d3 00 00 00    	jne    c00061a0 <f_getfree+0x1aa>
c00060cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060d1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060d9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060e1:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060e4:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060e8:	89 cf                	mov    edi,ecx
c00060ea:	85 f6                	test   esi,esi
c00060ec:	74 12                	je     c0006100 <f_getfree+0x10a>
c00060ee:	88 c1                	mov    cl,al
c00060f0:	83 e1 01             	and    ecx,0x1
c00060f3:	80 f9 01             	cmp    cl,0x1
c00060f6:	83 d3 00             	adc    ebx,0x0
c00060f9:	d0 e8                	shr    al,1
c00060fb:	4e                   	dec    esi
c00060fc:	39 fe                	cmp    esi,edi
c00060fe:	75 ea                	jne    c00060ea <f_getfree+0xf4>
c0006100:	45                   	inc    ebp
c0006101:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006107:	85 f6                	test   esi,esi
c0006109:	75 8f                	jne    c000609a <f_getfree+0xa4>
c000610b:	e9 94 00 00 00       	jmp    c00061a4 <f_getfree+0x1ae>
c0006110:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006113:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006116:	31 f6                	xor    esi,esi
c0006118:	31 db                	xor    ebx,ebx
c000611a:	85 f6                	test   esi,esi
c000611c:	75 1b                	jne    c0006139 <f_getfree+0x143>
c000611e:	89 d7                	mov    edi,edx
c0006120:	89 cd                	mov    ebp,ecx
c0006122:	83 c7 01             	add    edi,0x1
c0006125:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006129:	83 d5 00             	adc    ebp,0x0
c000612c:	e8 ed c0 ff ff       	call   c000221e <move_window>
c0006131:	85 c0                	test   eax,eax
c0006133:	75 6b                	jne    c00061a0 <f_getfree+0x1aa>
c0006135:	89 fa                	mov    edx,edi
c0006137:	89 e9                	mov    ecx,ebp
c0006139:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000613d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006141:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006145:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006148:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000614c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006150:	75 11                	jne    c0006163 <f_getfree+0x16d>
c0006152:	e8 e9 b8 ff ff       	call   c0001a40 <ld_word>
c0006157:	66 83 f8 01          	cmp    ax,0x1
c000615b:	83 d3 00             	adc    ebx,0x0
c000615e:	83 c6 02             	add    esi,0x2
c0006161:	eb 13                	jmp    c0006176 <f_getfree+0x180>
c0006163:	e8 e5 b8 ff ff       	call   c0001a4d <ld_dword>
c0006168:	25 ff ff ff 0f       	and    eax,0xfffffff
c000616d:	83 f8 01             	cmp    eax,0x1
c0006170:	83 d3 00             	adc    ebx,0x0
c0006173:	83 c6 04             	add    esi,0x4
c0006176:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000617c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006180:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006184:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006188:	75 90                	jne    c000611a <f_getfree+0x124>
c000618a:	eb 18                	jmp    c00061a4 <f_getfree+0x1ae>
c000618c:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006194:	eb 0e                	jmp    c00061a4 <f_getfree+0x1ae>
c0006196:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000619e:	eb 04                	jmp    c00061a4 <f_getfree+0x1ae>
c00061a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061a4:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00061a8:	89 18                	mov    DWORD PTR [eax],ebx
c00061aa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061ae:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00061b1:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00061b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061b9:	83 c4 5c             	add    esp,0x5c
c00061bc:	5b                   	pop    ebx
c00061bd:	5e                   	pop    esi
c00061be:	5f                   	pop    edi
c00061bf:	5d                   	pop    ebp
c00061c0:	c3                   	ret    

c00061c1 <f_truncate>:
c00061c1:	56                   	push   esi
c00061c2:	53                   	push   ebx
c00061c3:	83 ec 14             	sub    esp,0x14
c00061c6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00061ca:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00061ce:	89 d8                	mov    eax,ebx
c00061d0:	e8 6e bf ff ff       	call   c0002143 <validate>
c00061d5:	89 c6                	mov    esi,eax
c00061d7:	85 c0                	test   eax,eax
c00061d9:	0f 85 d2 00 00 00    	jne    c00062b1 <f_truncate+0xf0>
c00061df:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061e3:	85 f6                	test   esi,esi
c00061e5:	0f 85 c6 00 00 00    	jne    c00062b1 <f_truncate+0xf0>
c00061eb:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061ef:	0f 84 b7 00 00 00    	je     c00062ac <f_truncate+0xeb>
c00061f5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061f8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061fb:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061fe:	89 d1                	mov    ecx,edx
c0006200:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006203:	0f 83 a8 00 00 00    	jae    c00062b1 <f_truncate+0xf0>
c0006209:	09 c2                	or     edx,eax
c000620b:	75 15                	jne    c0006222 <f_truncate+0x61>
c000620d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006210:	31 c9                	xor    ecx,ecx
c0006212:	89 d8                	mov    eax,ebx
c0006214:	e8 7a d0 ff ff       	call   c0003293 <remove_chain>
c0006219:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006220:	eb 35                	jmp    c0006257 <f_truncate+0x96>
c0006222:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006225:	89 d8                	mov    eax,ebx
c0006227:	e8 7a cb ff ff       	call   c0002da6 <get_fat>
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 01 00 00 00       	mov    eax,0x1
c0006233:	83 fa ff             	cmp    edx,0xffffffff
c0006236:	74 1f                	je     c0006257 <f_truncate+0x96>
c0006238:	b8 02 00 00 00       	mov    eax,0x2
c000623d:	83 fa 01             	cmp    edx,0x1
c0006240:	74 15                	je     c0006257 <f_truncate+0x96>
c0006242:	31 c0                	xor    eax,eax
c0006244:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006248:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000624b:	76 0a                	jbe    c0006257 <f_truncate+0x96>
c000624d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006250:	89 d8                	mov    eax,ebx
c0006252:	e8 3c d0 ff ff       	call   c0003293 <remove_chain>
c0006257:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000625a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000625d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006260:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006263:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006266:	83 ca 40             	or     edx,0x40
c0006269:	85 c0                	test   eax,eax
c000626b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000626e:	75 35                	jne    c00062a5 <f_truncate+0xe4>
c0006270:	84 d2                	test   dl,dl
c0006272:	79 3d                	jns    c00062b1 <f_truncate+0xf0>
c0006274:	83 ec 0c             	sub    esp,0xc
c0006277:	8d 43 50             	lea    eax,[ebx+0x50]
c000627a:	6a 01                	push   0x1
c000627c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000627f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006282:	50                   	push   eax
c0006283:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006287:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000628b:	50                   	push   eax
c000628c:	e8 7a b7 ff ff       	call   c0001a0b <disk_write>
c0006291:	83 c4 20             	add    esp,0x20
c0006294:	85 c0                	test   eax,eax
c0006296:	75 08                	jne    c00062a0 <f_truncate+0xdf>
c0006298:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000629c:	31 f6                	xor    esi,esi
c000629e:	eb 11                	jmp    c00062b1 <f_truncate+0xf0>
c00062a0:	b8 01 00 00 00       	mov    eax,0x1
c00062a5:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00062a8:	89 c6                	mov    esi,eax
c00062aa:	eb 05                	jmp    c00062b1 <f_truncate+0xf0>
c00062ac:	be 07 00 00 00       	mov    esi,0x7
c00062b1:	89 f0                	mov    eax,esi
c00062b3:	83 c4 14             	add    esp,0x14
c00062b6:	5b                   	pop    ebx
c00062b7:	5e                   	pop    esi
c00062b8:	c3                   	ret    

c00062b9 <f_unlink>:
c00062b9:	56                   	push   esi
c00062ba:	b9 02 00 00 00       	mov    ecx,0x2
c00062bf:	53                   	push   ebx
c00062c0:	81 ec e4 00 00 00    	sub    esp,0xe4
c00062c6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00062ca:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062d1:	e8 fa c1 ff ff       	call   c00024d0 <mount_volume>
c00062d6:	85 c0                	test   eax,eax
c00062d8:	0f 85 55 01 00 00    	jne    c0006433 <f_unlink+0x17a>
c00062de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062e2:	83 ec 0c             	sub    esp,0xc
c00062e5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062e9:	68 60 04 00 00       	push   0x460
c00062ee:	e8 80 1f 00 00       	call   c0008273 <ff_memalloc>
c00062f3:	83 c4 10             	add    esp,0x10
c00062f6:	89 c3                	mov    ebx,eax
c00062f8:	b8 11 00 00 00       	mov    eax,0x11
c00062fd:	85 db                	test   ebx,ebx
c00062ff:	0f 84 2e 01 00 00    	je     c0006433 <f_unlink+0x17a>
c0006305:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006309:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000630f:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006312:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006315:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000631c:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006320:	e8 21 e9 ff ff       	call   c0004c46 <follow_path>
c0006325:	85 c0                	test   eax,eax
c0006327:	0f 85 f2 00 00 00    	jne    c000641f <f_unlink+0x166>
c000632d:	b8 06 00 00 00       	mov    eax,0x6
c0006332:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000633a:	0f 88 df 00 00 00    	js     c000641f <f_unlink+0x166>
c0006340:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006345:	74 0a                	je     c0006351 <f_unlink+0x98>
c0006347:	b8 07 00 00 00       	mov    eax,0x7
c000634c:	e9 ce 00 00 00       	jmp    c000641f <f_unlink+0x166>
c0006351:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006355:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006359:	8a 02                	mov    al,BYTE PTR [edx]
c000635b:	3c 04                	cmp    al,0x4
c000635d:	75 12                	jne    c0006371 <f_unlink+0xb8>
c000635f:	8d 42 10             	lea    eax,[edx+0x10]
c0006362:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006366:	e8 a1 e8 ff ff       	call   c0004c0c <init_alloc_info.isra.2>
c000636b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000636f:	eb 0e                	jmp    c000637f <f_unlink+0xc6>
c0006371:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006378:	e8 3e e8 ff ff       	call   c0004bbb <ld_clust.isra.0>
c000637d:	89 c6                	mov    esi,eax
c000637f:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006384:	75 12                	jne    c0006398 <f_unlink+0xdf>
c0006386:	8d 44 24 48          	lea    eax,[esp+0x48]
c000638a:	e8 94 d6 ff ff       	call   c0003a23 <dir_remove>
c000638f:	85 c0                	test   eax,eax
c0006391:	74 6c                	je     c00063ff <f_unlink+0x146>
c0006393:	e9 87 00 00 00       	jmp    c000641f <f_unlink+0x166>
c0006398:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000639c:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00063a3:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00063aa:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00063ad:	75 21                	jne    c00063d0 <f_unlink+0x117>
c00063af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00063b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00063b7:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00063be:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00063c5:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00063c9:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063d0:	31 d2                	xor    edx,edx
c00063d2:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063d9:	e8 be cb ff ff       	call   c0002f9c <dir_sdi>
c00063de:	85 c0                	test   eax,eax
c00063e0:	75 3d                	jne    c000641f <f_unlink+0x166>
c00063e2:	31 d2                	xor    edx,edx
c00063e4:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063eb:	e8 bc d3 ff ff       	call   c00037ac <dir_read>
c00063f0:	85 c0                	test   eax,eax
c00063f2:	0f 84 4f ff ff ff    	je     c0006347 <f_unlink+0x8e>
c00063f8:	83 f8 04             	cmp    eax,0x4
c00063fb:	75 22                	jne    c000641f <f_unlink+0x166>
c00063fd:	eb 87                	jmp    c0006386 <f_unlink+0xcd>
c00063ff:	85 f6                	test   esi,esi
c0006401:	75 0b                	jne    c000640e <f_unlink+0x155>
c0006403:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006407:	e8 3d df ff ff       	call   c0004349 <sync_fs>
c000640c:	eb 11                	jmp    c000641f <f_unlink+0x166>
c000640e:	31 c9                	xor    ecx,ecx
c0006410:	89 f2                	mov    edx,esi
c0006412:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006416:	e8 78 ce ff ff       	call   c0003293 <remove_chain>
c000641b:	85 c0                	test   eax,eax
c000641d:	74 e4                	je     c0006403 <f_unlink+0x14a>
c000641f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006423:	83 ec 0c             	sub    esp,0xc
c0006426:	53                   	push   ebx
c0006427:	e8 5d 1e 00 00       	call   c0008289 <ff_memfree>
c000642c:	83 c4 10             	add    esp,0x10
c000642f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006433:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006439:	5b                   	pop    ebx
c000643a:	5e                   	pop    esi
c000643b:	c3                   	ret    

c000643c <f_mkdir>:
c000643c:	57                   	push   edi
c000643d:	b9 02 00 00 00       	mov    ecx,0x2
c0006442:	56                   	push   esi
c0006443:	53                   	push   ebx
c0006444:	83 c4 80             	add    esp,0xffffff80
c0006447:	8d 54 24 08          	lea    edx,[esp+0x8]
c000644b:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006452:	e8 79 c0 ff ff       	call   c00024d0 <mount_volume>
c0006457:	89 c3                	mov    ebx,eax
c0006459:	85 c0                	test   eax,eax
c000645b:	0f 85 fe 01 00 00    	jne    c000665f <f_mkdir+0x223>
c0006461:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006465:	bb 11 00 00 00       	mov    ebx,0x11
c000646a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000646e:	83 ec 0c             	sub    esp,0xc
c0006471:	68 60 04 00 00       	push   0x460
c0006476:	e8 f8 1d 00 00       	call   c0008273 <ff_memalloc>
c000647b:	83 c4 10             	add    esp,0x10
c000647e:	89 c7                	mov    edi,eax
c0006480:	85 c0                	test   eax,eax
c0006482:	0f 84 d7 01 00 00    	je     c000665f <f_mkdir+0x223>
c0006488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000648c:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006492:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006495:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006498:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000649f:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064a3:	e8 9e e7 ff ff       	call   c0004c46 <follow_path>
c00064a8:	89 c3                	mov    ebx,eax
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 3e                	je     c00064ec <f_mkdir+0xb0>
c00064ae:	83 f8 04             	cmp    eax,0x4
c00064b1:	75 3e                	jne    c00064f1 <f_mkdir+0xb5>
c00064b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b7:	31 d2                	xor    edx,edx
c00064b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064c1:	e8 ce cb ff ff       	call   c0003094 <create_chain>
c00064c6:	89 c6                	mov    esi,eax
c00064c8:	85 c0                	test   eax,eax
c00064ca:	74 0c                	je     c00064d8 <f_mkdir+0x9c>
c00064cc:	bb 02 00 00 00       	mov    ebx,0x2
c00064d1:	83 f8 01             	cmp    eax,0x1
c00064d4:	74 07                	je     c00064dd <f_mkdir+0xa1>
c00064d6:	eb 2a                	jmp    c0006502 <f_mkdir+0xc6>
c00064d8:	bb 07 00 00 00       	mov    ebx,0x7
c00064dd:	31 c9                	xor    ecx,ecx
c00064df:	89 f2                	mov    edx,esi
c00064e1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064e5:	e8 a9 cd ff ff       	call   c0003293 <remove_chain>
c00064ea:	eb 05                	jmp    c00064f1 <f_mkdir+0xb5>
c00064ec:	bb 08 00 00 00       	mov    ebx,0x8
c00064f1:	83 ec 0c             	sub    esp,0xc
c00064f4:	57                   	push   edi
c00064f5:	e8 8f 1d 00 00       	call   c0008289 <ff_memfree>
c00064fa:	83 c4 10             	add    esp,0x10
c00064fd:	e9 5d 01 00 00       	jmp    c000665f <f_mkdir+0x223>
c0006502:	bb 01 00 00 00       	mov    ebx,0x1
c0006507:	83 f8 ff             	cmp    eax,0xffffffff
c000650a:	74 d1                	je     c00064dd <f_mkdir+0xa1>
c000650c:	89 f2                	mov    edx,esi
c000650e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006512:	e8 c4 ce ff ff       	call   c00033db <dir_clear>
c0006517:	89 c3                	mov    ebx,eax
c0006519:	85 c0                	test   eax,eax
c000651b:	75 c0                	jne    c00064dd <f_mkdir+0xa1>
c000651d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006521:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006524:	74 69                	je     c000658f <f_mkdir+0x153>
c0006526:	b9 0b 00 00 00       	mov    ecx,0xb
c000652b:	83 c0 54             	add    eax,0x54
c000652e:	ba 20 00 00 00       	mov    edx,0x20
c0006533:	e8 9c b5 ff ff       	call   c0001ad4 <mem_set>
c0006538:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000653c:	ba 00 00 21 50       	mov    edx,0x50210000
c0006541:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006545:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006549:	83 c0 6a             	add    eax,0x6a
c000654c:	e8 65 b5 ff ff       	call   c0001ab6 <st_dword>
c0006551:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006555:	89 f1                	mov    ecx,esi
c0006557:	8d 50 54             	lea    edx,[eax+0x54]
c000655a:	e8 85 e6 ff ff       	call   c0004be4 <st_clust.isra.1>
c000655f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006563:	b9 20 00 00 00       	mov    ecx,0x20
c0006568:	8d 50 54             	lea    edx,[eax+0x54]
c000656b:	83 c0 74             	add    eax,0x74
c000656e:	e8 4c b5 ff ff       	call   c0001abf <mem_cpy>
c0006573:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006577:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000657b:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000657f:	8d 50 74             	lea    edx,[eax+0x74]
c0006582:	e8 5d e6 ff ff       	call   c0004be4 <st_clust.isra.1>
c0006587:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000658b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000658f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006593:	e8 2f db ff ff       	call   c00040c7 <dir_register>
c0006598:	89 c3                	mov    ebx,eax
c000659a:	85 c0                	test   eax,eax
c000659c:	0f 85 3b ff ff ff    	jne    c00064dd <f_mkdir+0xa1>
c00065a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065a9:	75 74                	jne    c000661f <f_mkdir+0x1e3>
c00065ab:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00065b3:	83 c0 0c             	add    eax,0xc
c00065b6:	e8 fb b4 ff ff       	call   c0001ab6 <st_dword>
c00065bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065bf:	89 f2                	mov    edx,esi
c00065c1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065c4:	83 c0 34             	add    eax,0x34
c00065c7:	e8 ea b4 ff ff       	call   c0001ab6 <st_dword>
c00065cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d0:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065d7:	c1 e2 09             	shl    edx,0x9
c00065da:	83 c0 38             	add    eax,0x38
c00065dd:	e8 d4 b4 ff ff       	call   c0001ab6 <st_dword>
c00065e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065e6:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065ed:	c1 e2 09             	shl    edx,0x9
c00065f0:	83 c0 28             	add    eax,0x28
c00065f3:	e8 be b4 ff ff       	call   c0001ab6 <st_dword>
c00065f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065fc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065ff:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006603:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006606:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000660a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000660e:	e8 8b d3 ff ff       	call   c000399e <store_xdir>
c0006613:	89 c3                	mov    ebx,eax
c0006615:	85 c0                	test   eax,eax
c0006617:	0f 85 d4 fe ff ff    	jne    c00064f1 <f_mkdir+0xb5>
c000661d:	eb 30                	jmp    c000664f <f_mkdir+0x213>
c000661f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006623:	ba 00 00 21 50       	mov    edx,0x50210000
c0006628:	83 c0 16             	add    eax,0x16
c000662b:	e8 86 b4 ff ff       	call   c0001ab6 <st_dword>
c0006630:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006634:	89 f1                	mov    ecx,esi
c0006636:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000663a:	e8 a5 e5 ff ff       	call   c0004be4 <st_clust.isra.1>
c000663f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006643:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006647:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000664f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006653:	e8 f1 dc ff ff       	call   c0004349 <sync_fs>
c0006658:	89 c3                	mov    ebx,eax
c000665a:	e9 92 fe ff ff       	jmp    c00064f1 <f_mkdir+0xb5>
c000665f:	83 ec 80             	sub    esp,0xffffff80
c0006662:	89 d8                	mov    eax,ebx
c0006664:	5b                   	pop    ebx
c0006665:	5e                   	pop    esi
c0006666:	5f                   	pop    edi
c0006667:	c3                   	ret    

c0006668 <f_rename>:
c0006668:	55                   	push   ebp
c0006669:	57                   	push   edi
c000666a:	56                   	push   esi
c000666b:	53                   	push   ebx
c000666c:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006672:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006679:	e8 a4 b9 ff ff       	call   c0002022 <get_ldnumber>
c000667e:	b9 02 00 00 00       	mov    ecx,0x2
c0006683:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006687:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000668e:	e8 3d be ff ff       	call   c00024d0 <mount_volume>
c0006693:	85 c0                	test   eax,eax
c0006695:	0f 85 b5 02 00 00    	jne    c0006950 <f_rename+0x2e8>
c000669b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000669f:	83 ec 0c             	sub    esp,0xc
c00066a2:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00066a6:	68 60 04 00 00       	push   0x460
c00066ab:	e8 c3 1b 00 00       	call   c0008273 <ff_memalloc>
c00066b0:	83 c4 10             	add    esp,0x10
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	b8 11 00 00 00       	mov    eax,0x11
c00066ba:	85 db                	test   ebx,ebx
c00066bc:	0f 84 8e 02 00 00    	je     c0006950 <f_rename+0x2e8>
c00066c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c6:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00066cc:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066d2:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066d9:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066dd:	e8 64 e5 ff ff       	call   c0004c46 <follow_path>
c00066e2:	85 c0                	test   eax,eax
c00066e4:	0f 85 52 02 00 00    	jne    c000693c <f_rename+0x2d4>
c00066ea:	b8 06 00 00 00       	mov    eax,0x6
c00066ef:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066f7:	0f 85 3f 02 00 00    	jne    c000693c <f_rename+0x2d4>
c00066fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006701:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006704:	0f 85 05 01 00 00    	jne    c000680f <f_rename+0x1a7>
c000670a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000670d:	b9 40 00 00 00       	mov    ecx,0x40
c0006712:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006716:	e8 a4 b3 ff ff       	call   c0001abf <mem_cpy>
c000671b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006720:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006724:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000672b:	e8 8f b3 ff ff       	call   c0001abf <mem_cpy>
c0006730:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006737:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000673e:	e8 03 e5 ff ff       	call   c0004c46 <follow_path>
c0006743:	85 c0                	test   eax,eax
c0006745:	75 29                	jne    c0006770 <f_rename+0x108>
c0006747:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000674b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006752:	74 0a                	je     c000675e <f_rename+0xf6>
c0006754:	b8 08 00 00 00       	mov    eax,0x8
c0006759:	e9 de 01 00 00       	jmp    c000693c <f_rename+0x2d4>
c000675e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006765:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000676c:	75 e6                	jne    c0006754 <f_rename+0xec>
c000676e:	eb 09                	jmp    c0006779 <f_rename+0x111>
c0006770:	83 f8 04             	cmp    eax,0x4
c0006773:	0f 85 c3 01 00 00    	jne    c000693c <f_rename+0x2d4>
c0006779:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006780:	e8 42 d9 ff ff       	call   c00040c7 <dir_register>
c0006785:	85 c0                	test   eax,eax
c0006787:	0f 85 af 01 00 00    	jne    c000693c <f_rename+0x2d4>
c000678d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006791:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006794:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006797:	89 c5                	mov    ebp,eax
c0006799:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000679c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00067a0:	8d 46 24             	lea    eax,[esi+0x24]
c00067a3:	e8 98 b2 ff ff       	call   c0001a40 <ld_word>
c00067a8:	b9 40 00 00 00       	mov    ecx,0x40
c00067ad:	89 c7                	mov    edi,eax
c00067af:	8d 54 24 18          	lea    edx,[esp+0x18]
c00067b3:	89 f0                	mov    eax,esi
c00067b5:	e8 05 b3 ff ff       	call   c0001abf <mem_cpy>
c00067ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067be:	89 e9                	mov    ecx,ebp
c00067c0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067c3:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00067c6:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00067ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ce:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067d1:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067d4:	0f b7 d7             	movzx  edx,di
c00067d7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067da:	83 c0 24             	add    eax,0x24
c00067dd:	e8 d0 b2 ff ff       	call   c0001ab2 <st_word>
c00067e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e9:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067ec:	a8 10                	test   al,0x10
c00067ee:	75 06                	jne    c00067f6 <f_rename+0x18e>
c00067f0:	83 c8 20             	or     eax,0x20
c00067f3:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067f6:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067fd:	e8 9c d1 ff ff       	call   c000399e <store_xdir>
c0006802:	85 c0                	test   eax,eax
c0006804:	0f 84 1c 01 00 00    	je     c0006926 <f_rename+0x2be>
c000680a:	e9 2d 01 00 00       	jmp    c000693c <f_rename+0x2d4>
c000680f:	b9 20 00 00 00       	mov    ecx,0x20
c0006814:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000681b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000681f:	e8 9b b2 ff ff       	call   c0001abf <mem_cpy>
c0006824:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006829:	8d 54 24 58          	lea    edx,[esp+0x58]
c000682d:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006834:	e8 86 b2 ff ff       	call   c0001abf <mem_cpy>
c0006839:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006840:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006847:	e8 fa e3 ff ff       	call   c0004c46 <follow_path>
c000684c:	85 c0                	test   eax,eax
c000684e:	75 27                	jne    c0006877 <f_rename+0x20f>
c0006850:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006854:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000685b:	0f 85 f3 fe ff ff    	jne    c0006754 <f_rename+0xec>
c0006861:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006868:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000686f:	0f 85 df fe ff ff    	jne    c0006754 <f_rename+0xec>
c0006875:	eb 09                	jmp    c0006880 <f_rename+0x218>
c0006877:	83 f8 04             	cmp    eax,0x4
c000687a:	0f 85 bc 00 00 00    	jne    c000693c <f_rename+0x2d4>
c0006880:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006887:	e8 3b d8 ff ff       	call   c00040c7 <dir_register>
c000688c:	85 c0                	test   eax,eax
c000688e:	0f 85 a8 00 00 00    	jne    c000693c <f_rename+0x2d4>
c0006894:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000689b:	b9 13 00 00 00       	mov    ecx,0x13
c00068a0:	8d 46 0d             	lea    eax,[esi+0xd]
c00068a3:	8d 54 24 25          	lea    edx,[esp+0x25]
c00068a7:	e8 13 b2 ff ff       	call   c0001abf <mem_cpy>
c00068ac:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00068b0:	a8 10                	test   al,0x10
c00068b2:	75 03                	jne    c00068b7 <f_rename+0x24f>
c00068b4:	83 c8 20             	or     eax,0x20
c00068b7:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00068ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068be:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068c2:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00068c6:	74 5e                	je     c0006926 <f_rename+0x2be>
c00068c8:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068cf:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068d3:	74 51                	je     c0006926 <f_rename+0x2be>
c00068d5:	89 f2                	mov    edx,esi
c00068d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068db:	8a 07                	mov    al,BYTE PTR [edi]
c00068dd:	e8 d9 e2 ff ff       	call   c0004bbb <ld_clust.isra.0>
c00068e2:	89 c2                	mov    edx,eax
c00068e4:	89 f8                	mov    eax,edi
c00068e6:	e8 ee b3 ff ff       	call   c0001cd9 <clst2sect>
c00068eb:	89 c6                	mov    esi,eax
c00068ed:	89 d1                	mov    ecx,edx
c00068ef:	b8 02 00 00 00       	mov    eax,0x2
c00068f4:	09 f2                	or     edx,esi
c00068f6:	74 44                	je     c000693c <f_rename+0x2d4>
c00068f8:	89 f2                	mov    edx,esi
c00068fa:	89 f8                	mov    eax,edi
c00068fc:	e8 1d b9 ff ff       	call   c000221e <move_window>
c0006901:	85 c0                	test   eax,eax
c0006903:	75 37                	jne    c000693c <f_rename+0x2d4>
c0006905:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006909:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000690d:	75 17                	jne    c0006926 <f_rename+0x2be>
c000690f:	8d 50 74             	lea    edx,[eax+0x74]
c0006912:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006919:	e8 c6 e2 ff ff       	call   c0004be4 <st_clust.isra.1>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006926:	8d 44 24 58          	lea    eax,[esp+0x58]
c000692a:	e8 f4 d0 ff ff       	call   c0003a23 <dir_remove>
c000692f:	85 c0                	test   eax,eax
c0006931:	75 09                	jne    c000693c <f_rename+0x2d4>
c0006933:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006937:	e8 0d da ff ff       	call   c0004349 <sync_fs>
c000693c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006940:	83 ec 0c             	sub    esp,0xc
c0006943:	53                   	push   ebx
c0006944:	e8 40 19 00 00       	call   c0008289 <ff_memfree>
c0006949:	83 c4 10             	add    esp,0x10
c000694c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006950:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006956:	5b                   	pop    ebx
c0006957:	5e                   	pop    esi
c0006958:	5f                   	pop    edi
c0006959:	5d                   	pop    ebp
c000695a:	c3                   	ret    

c000695b <f_chmod>:
c000695b:	57                   	push   edi
c000695c:	b9 02 00 00 00       	mov    ecx,0x2
c0006961:	56                   	push   esi
c0006962:	53                   	push   ebx
c0006963:	83 ec 60             	sub    esp,0x60
c0006966:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000696a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000696e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006972:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006976:	e8 55 bb ff ff       	call   c00024d0 <mount_volume>
c000697b:	85 c0                	test   eax,eax
c000697d:	0f 85 af 00 00 00    	jne    c0006a32 <f_chmod+0xd7>
c0006983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006987:	83 ec 0c             	sub    esp,0xc
c000698a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000698e:	68 60 04 00 00       	push   0x460
c0006993:	e8 db 18 00 00       	call   c0008273 <ff_memalloc>
c0006998:	83 c4 10             	add    esp,0x10
c000699b:	89 c6                	mov    esi,eax
c000699d:	b8 11 00 00 00       	mov    eax,0x11
c00069a2:	85 f6                	test   esi,esi
c00069a4:	0f 84 88 00 00 00    	je     c0006a32 <f_chmod+0xd7>
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00069b4:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00069b7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069ba:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069be:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069c2:	e8 7f e2 ff ff       	call   c0004c46 <follow_path>
c00069c7:	85 c0                	test   eax,eax
c00069c9:	75 53                	jne    c0006a1e <f_chmod+0xc3>
c00069cb:	b8 06 00 00 00       	mov    eax,0x6
c00069d0:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069d5:	75 47                	jne    c0006a1e <f_chmod+0xc3>
c00069d7:	89 f9                	mov    ecx,edi
c00069d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069dd:	83 e1 27             	and    ecx,0x27
c00069e0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069e3:	75 1d                	jne    c0006a02 <f_chmod+0xa7>
c00069e5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e8:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069eb:	21 cb                	and    ebx,ecx
c00069ed:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069f0:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069f3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069f7:	e8 a2 cf ff ff       	call   c000399e <store_xdir>
c00069fc:	85 c0                	test   eax,eax
c00069fe:	75 1e                	jne    c0006a1e <f_chmod+0xc3>
c0006a00:	eb 13                	jmp    c0006a15 <f_chmod+0xba>
c0006a02:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006a06:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a09:	21 cb                	and    ebx,ecx
c0006a0b:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a0e:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006a11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a19:	e8 2b d9 ff ff       	call   c0004349 <sync_fs>
c0006a1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a22:	83 ec 0c             	sub    esp,0xc
c0006a25:	56                   	push   esi
c0006a26:	e8 5e 18 00 00       	call   c0008289 <ff_memfree>
c0006a2b:	83 c4 10             	add    esp,0x10
c0006a2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a32:	83 c4 60             	add    esp,0x60
c0006a35:	5b                   	pop    ebx
c0006a36:	5e                   	pop    esi
c0006a37:	5f                   	pop    edi
c0006a38:	c3                   	ret    

c0006a39 <f_utime>:
c0006a39:	56                   	push   esi
c0006a3a:	b9 02 00 00 00       	mov    ecx,0x2
c0006a3f:	53                   	push   ebx
c0006a40:	83 ec 64             	sub    esp,0x64
c0006a43:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a47:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a4b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a4f:	e8 7c ba ff ff       	call   c00024d0 <mount_volume>
c0006a54:	85 c0                	test   eax,eax
c0006a56:	0f 85 b5 00 00 00    	jne    c0006b11 <f_utime+0xd8>
c0006a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a60:	83 ec 0c             	sub    esp,0xc
c0006a63:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a67:	68 60 04 00 00       	push   0x460
c0006a6c:	e8 02 18 00 00       	call   c0008273 <ff_memalloc>
c0006a71:	83 c4 10             	add    esp,0x10
c0006a74:	89 c3                	mov    ebx,eax
c0006a76:	b8 11 00 00 00       	mov    eax,0x11
c0006a7b:	85 db                	test   ebx,ebx
c0006a7d:	0f 84 8e 00 00 00    	je     c0006b11 <f_utime+0xd8>
c0006a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a87:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a8d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a90:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a93:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a97:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a9b:	e8 a6 e1 ff ff       	call   c0004c46 <follow_path>
c0006aa0:	85 c0                	test   eax,eax
c0006aa2:	75 59                	jne    c0006afd <f_utime+0xc4>
c0006aa4:	b8 06 00 00 00       	mov    eax,0x6
c0006aa9:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006aae:	75 4d                	jne    c0006afd <f_utime+0xc4>
c0006ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab4:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ab8:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006abc:	c1 e2 10             	shl    edx,0x10
c0006abf:	09 ca                	or     edx,ecx
c0006ac1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ac4:	75 1a                	jne    c0006ae0 <f_utime+0xa7>
c0006ac6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006ac9:	83 c0 0c             	add    eax,0xc
c0006acc:	e8 e5 af ff ff       	call   c0001ab6 <st_dword>
c0006ad1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ad5:	e8 c4 ce ff ff       	call   c000399e <store_xdir>
c0006ada:	85 c0                	test   eax,eax
c0006adc:	75 1f                	jne    c0006afd <f_utime+0xc4>
c0006ade:	eb 14                	jmp    c0006af4 <f_utime+0xbb>
c0006ae0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ae4:	83 c0 16             	add    eax,0x16
c0006ae7:	e8 ca af ff ff       	call   c0001ab6 <st_dword>
c0006aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	e8 4c d8 ff ff       	call   c0004349 <sync_fs>
c0006afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b01:	83 ec 0c             	sub    esp,0xc
c0006b04:	53                   	push   ebx
c0006b05:	e8 7f 17 00 00       	call   c0008289 <ff_memfree>
c0006b0a:	83 c4 10             	add    esp,0x10
c0006b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b11:	83 c4 64             	add    esp,0x64
c0006b14:	5b                   	pop    ebx
c0006b15:	5e                   	pop    esi
c0006b16:	c3                   	ret    

c0006b17 <f_getlabel>:
c0006b17:	55                   	push   ebp
c0006b18:	31 c9                	xor    ecx,ecx
c0006b1a:	57                   	push   edi
c0006b1b:	56                   	push   esi
c0006b1c:	53                   	push   ebx
c0006b1d:	83 ec 6c             	sub    esp,0x6c
c0006b20:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b24:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006b2b:	e8 a0 b9 ff ff       	call   c00024d0 <mount_volume>
c0006b30:	89 c6                	mov    esi,eax
c0006b32:	85 c0                	test   eax,eax
c0006b34:	0f 85 c1 01 00 00    	jne    c0006cfb <f_getlabel+0x1e4>
c0006b3a:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b42:	0f 84 5f 01 00 00    	je     c0006ca7 <f_getlabel+0x190>
c0006b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b4c:	31 d2                	xor    edx,edx
c0006b4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b52:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b5a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b5e:	e8 39 c4 ff ff       	call   c0002f9c <dir_sdi>
c0006b63:	85 c0                	test   eax,eax
c0006b65:	0f 85 2d 01 00 00    	jne    c0006c98 <f_getlabel+0x181>
c0006b6b:	ba 01 00 00 00       	mov    edx,0x1
c0006b70:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b74:	e8 33 cc ff ff       	call   c00037ac <dir_read>
c0006b79:	85 c0                	test   eax,eax
c0006b7b:	0f 85 17 01 00 00    	jne    c0006c98 <f_getlabel+0x181>
c0006b81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b85:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b88:	74 09                	je     c0006b93 <f_getlabel+0x7c>
c0006b8a:	31 db                	xor    ebx,ebx
c0006b8c:	31 c9                	xor    ecx,ecx
c0006b8e:	e9 c8 00 00 00       	jmp    c0006c5b <f_getlabel+0x144>
c0006b93:	31 ed                	xor    ebp,ebp
c0006b95:	31 db                	xor    ebx,ebx
c0006b97:	31 ff                	xor    edi,edi
c0006b99:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b9d:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006ba1:	39 fa                	cmp    edx,edi
c0006ba3:	76 4b                	jbe    c0006bf0 <f_getlabel+0xd9>
c0006ba5:	47                   	inc    edi
c0006ba6:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006ba9:	01 d0                	add    eax,edx
c0006bab:	e8 90 ae ff ff       	call   c0001a40 <ld_word>
c0006bb0:	66 85 ed             	test   bp,bp
c0006bb3:	75 0d                	jne    c0006bc2 <f_getlabel+0xab>
c0006bb5:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006bbb:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006bc0:	76 28                	jbe    c0006bea <f_getlabel+0xd3>
c0006bc2:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bc9:	89 e9                	mov    ecx,ebp
c0006bcb:	01 da                	add    edx,ebx
c0006bcd:	c1 e1 10             	shl    ecx,0x10
c0006bd0:	0f b7 c0             	movzx  eax,ax
c0006bd3:	09 c8                	or     eax,ecx
c0006bd5:	b9 04 00 00 00       	mov    ecx,0x4
c0006bda:	e8 01 b0 ff ff       	call   c0001be0 <put_utf>
c0006bdf:	84 c0                	test   al,al
c0006be1:	74 0b                	je     c0006bee <f_getlabel+0xd7>
c0006be3:	0f b6 c0             	movzx  eax,al
c0006be6:	01 c3                	add    ebx,eax
c0006be8:	31 c0                	xor    eax,eax
c0006bea:	89 c5                	mov    ebp,eax
c0006bec:	eb ab                	jmp    c0006b99 <f_getlabel+0x82>
c0006bee:	31 db                	xor    ebx,ebx
c0006bf0:	66 85 ed             	test   bp,bp
c0006bf3:	74 02                	je     c0006bf7 <f_getlabel+0xe0>
c0006bf5:	31 db                	xor    ebx,ebx
c0006bf7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bfe:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006c02:	e9 a0 00 00 00       	jmp    c0006ca7 <f_getlabel+0x190>
c0006c07:	83 ff 0b             	cmp    edi,0xb
c0006c0a:	74 11                	je     c0006c1d <f_getlabel+0x106>
c0006c0c:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006c11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c15:	8d 79 02             	lea    edi,[ecx+0x2]
c0006c18:	c1 e0 08             	shl    eax,0x8
c0006c1b:	09 c2                	or     edx,eax
c0006c1d:	0f b7 d2             	movzx  edx,dx
c0006c20:	50                   	push   eax
c0006c21:	50                   	push   eax
c0006c22:	68 b5 01 00 00       	push   0x1b5
c0006c27:	52                   	push   edx
c0006c28:	e8 03 17 00 00       	call   c0008330 <ff_oem2uni>
c0006c2d:	83 c4 10             	add    esp,0x10
c0006c30:	66 85 c0             	test   ax,ax
c0006c33:	74 46                	je     c0006c7b <f_getlabel+0x164>
c0006c35:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c3c:	0f b7 c0             	movzx  eax,ax
c0006c3f:	01 da                	add    edx,ebx
c0006c41:	b9 04 00 00 00       	mov    ecx,0x4
c0006c46:	e8 95 af ff ff       	call   c0001be0 <put_utf>
c0006c4b:	84 c0                	test   al,al
c0006c4d:	74 2c                	je     c0006c7b <f_getlabel+0x164>
c0006c4f:	0f b6 c0             	movzx  eax,al
c0006c52:	01 c3                	add    ebx,eax
c0006c54:	83 ff 0b             	cmp    edi,0xb
c0006c57:	74 24                	je     c0006c7d <f_getlabel+0x166>
c0006c59:	89 f9                	mov    ecx,edi
c0006c5b:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c5f:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c62:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c67:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c70:	e8 9f ae ff ff       	call   c0001b14 <dbc_1st>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	74 a4                	je     c0006c1d <f_getlabel+0x106>
c0006c79:	eb 8c                	jmp    c0006c07 <f_getlabel+0xf0>
c0006c7b:	31 db                	xor    ebx,ebx
c0006c7d:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c84:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c87:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c8e:	74 17                	je     c0006ca7 <f_getlabel+0x190>
c0006c90:	4b                   	dec    ebx
c0006c91:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c94:	74 ee                	je     c0006c84 <f_getlabel+0x16d>
c0006c96:	eb 0f                	jmp    c0006ca7 <f_getlabel+0x190>
c0006c98:	83 f8 04             	cmp    eax,0x4
c0006c9b:	75 5c                	jne    c0006cf9 <f_getlabel+0x1e2>
c0006c9d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ca4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ca7:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006caf:	74 4a                	je     c0006cfb <f_getlabel+0x1e4>
c0006cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb5:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006cb8:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006cbb:	e8 5e b5 ff ff       	call   c000221e <move_window>
c0006cc0:	89 c6                	mov    esi,eax
c0006cc2:	85 c0                	test   eax,eax
c0006cc4:	75 35                	jne    c0006cfb <f_getlabel+0x1e4>
c0006cc6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006cca:	b8 43 00 00 00       	mov    eax,0x43
c0006ccf:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006cd1:	80 f9 03             	cmp    cl,0x3
c0006cd4:	74 0f                	je     c0006ce5 <f_getlabel+0x1ce>
c0006cd6:	31 c0                	xor    eax,eax
c0006cd8:	80 f9 04             	cmp    cl,0x4
c0006cdb:	0f 94 c0             	sete   al
c0006cde:	48                   	dec    eax
c0006cdf:	83 e0 c3             	and    eax,0xffffffc3
c0006ce2:	83 c0 64             	add    eax,0x64
c0006ce5:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ce9:	e8 5f ad ff ff       	call   c0001a4d <ld_dword>
c0006cee:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cf5:	89 07                	mov    DWORD PTR [edi],eax
c0006cf7:	eb 02                	jmp    c0006cfb <f_getlabel+0x1e4>
c0006cf9:	89 c6                	mov    esi,eax
c0006cfb:	83 c4 6c             	add    esp,0x6c
c0006cfe:	89 f0                	mov    eax,esi
c0006d00:	5b                   	pop    ebx
c0006d01:	5e                   	pop    esi
c0006d02:	5f                   	pop    edi
c0006d03:	5d                   	pop    ebp
c0006d04:	c3                   	ret    

c0006d05 <f_setlabel>:
c0006d05:	56                   	push   esi
c0006d06:	b9 02 00 00 00       	mov    ecx,0x2
c0006d0b:	53                   	push   ebx
c0006d0c:	83 ec 74             	sub    esp,0x74
c0006d0f:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006d13:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d1a:	e8 b1 b7 ff ff       	call   c00024d0 <mount_volume>
c0006d1f:	89 c6                	mov    esi,eax
c0006d21:	85 c0                	test   eax,eax
c0006d23:	0f 85 41 02 00 00    	jne    c0006f6a <f_setlabel+0x265>
c0006d29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d2d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d30:	0f 85 8e 00 00 00    	jne    c0006dc4 <f_setlabel+0xbf>
c0006d36:	b9 16 00 00 00       	mov    ecx,0x16
c0006d3b:	31 d2                	xor    edx,edx
c0006d3d:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	e8 8c ad ff ff       	call   c0001ad4 <mem_set>
c0006d48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d4f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d52:	0f 86 0a 01 00 00    	jbe    c0006e62 <f_setlabel+0x15d>
c0006d58:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d5f:	e8 b6 ad ff ff       	call   c0001b1a <tchar2uni>
c0006d64:	89 c6                	mov    esi,eax
c0006d66:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d6b:	76 2a                	jbe    c0006d97 <f_setlabel+0x92>
c0006d6d:	83 f8 ff             	cmp    eax,0xffffffff
c0006d70:	74 05                	je     c0006d77 <f_setlabel+0x72>
c0006d72:	83 fb 09             	cmp    ebx,0x9
c0006d75:	76 0a                	jbe    c0006d81 <f_setlabel+0x7c>
c0006d77:	be 06 00 00 00       	mov    esi,0x6
c0006d7c:	e9 e9 01 00 00       	jmp    c0006f6a <f_setlabel+0x265>
c0006d81:	89 c2                	mov    edx,eax
c0006d83:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d87:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d8a:	c1 ea 10             	shr    edx,0x10
c0006d8d:	01 c8                	add    eax,ecx
c0006d8f:	43                   	inc    ebx
c0006d90:	e8 1d ad ff ff       	call   c0001ab2 <st_word>
c0006d95:	eb 04                	jmp    c0006d9b <f_setlabel+0x96>
c0006d97:	85 c0                	test   eax,eax
c0006d99:	74 dc                	je     c0006d77 <f_setlabel+0x72>
c0006d9b:	89 f2                	mov    edx,esi
c0006d9d:	b8 d7 00 02 c0       	mov    eax,0xc00200d7
c0006da2:	e8 5b ad ff ff       	call   c0001b02 <chk_chr>
c0006da7:	85 c0                	test   eax,eax
c0006da9:	75 cc                	jne    c0006d77 <f_setlabel+0x72>
c0006dab:	83 fb 0a             	cmp    ebx,0xa
c0006dae:	77 c7                	ja     c0006d77 <f_setlabel+0x72>
c0006db0:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006db3:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006db7:	0f b7 d6             	movzx  edx,si
c0006dba:	01 c8                	add    eax,ecx
c0006dbc:	43                   	inc    ebx
c0006dbd:	e8 f0 ac ff ff       	call   c0001ab2 <st_word>
c0006dc2:	eb 84                	jmp    c0006d48 <f_setlabel+0x43>
c0006dc4:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dc9:	ba 20 00 00 00       	mov    edx,0x20
c0006dce:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006dd2:	31 db                	xor    ebx,ebx
c0006dd4:	e8 fb ac ff ff       	call   c0001ad4 <mem_set>
c0006dd9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006de0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006de3:	76 60                	jbe    c0006e45 <f_setlabel+0x140>
c0006de5:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dec:	e8 29 ad ff ff       	call   c0001b1a <tchar2uni>
c0006df1:	3d ff ff 00 00       	cmp    eax,0xffff
c0006df6:	0f 87 7b ff ff ff    	ja     c0006d77 <f_setlabel+0x72>
c0006dfc:	83 ec 0c             	sub    esp,0xc
c0006dff:	50                   	push   eax
c0006e00:	e8 97 15 00 00       	call   c000839c <ff_wtoupper>
c0006e05:	5a                   	pop    edx
c0006e06:	59                   	pop    ecx
c0006e07:	68 b5 01 00 00       	push   0x1b5
c0006e0c:	50                   	push   eax
c0006e0d:	e8 8e 14 00 00       	call   c00082a0 <ff_uni2oem>
c0006e12:	83 c4 10             	add    esp,0x10
c0006e15:	89 c6                	mov    esi,eax
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	0f 84 57 ff ff ff    	je     c0006d77 <f_setlabel+0x72>
c0006e20:	0f b7 d0             	movzx  edx,ax
c0006e23:	b8 d0 00 02 c0       	mov    eax,0xc00200d0
c0006e28:	e8 d5 ac ff ff       	call   c0001b02 <chk_chr>
c0006e2d:	85 c0                	test   eax,eax
c0006e2f:	0f 85 42 ff ff ff    	jne    c0006d77 <f_setlabel+0x72>
c0006e35:	66 81 fe ff 00       	cmp    si,0xff
c0006e3a:	0f 87 14 01 00 00    	ja     c0006f54 <f_setlabel+0x24f>
c0006e40:	e9 fa 00 00 00       	jmp    c0006f3f <f_setlabel+0x23a>
c0006e45:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e4a:	0f 84 27 ff ff ff    	je     c0006d77 <f_setlabel+0x72>
c0006e50:	85 db                	test   ebx,ebx
c0006e52:	74 0e                	je     c0006e62 <f_setlabel+0x15d>
c0006e54:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e57:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e5c:	75 04                	jne    c0006e62 <f_setlabel+0x15d>
c0006e5e:	89 c3                	mov    ebx,eax
c0006e60:	eb ee                	jmp    c0006e50 <f_setlabel+0x14b>
c0006e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e66:	31 d2                	xor    edx,edx
c0006e68:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e6c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e74:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e78:	e8 1f c1 ff ff       	call   c0002f9c <dir_sdi>
c0006e7d:	89 c6                	mov    esi,eax
c0006e7f:	85 c0                	test   eax,eax
c0006e81:	0f 85 e3 00 00 00    	jne    c0006f6a <f_setlabel+0x265>
c0006e87:	ba 01 00 00 00       	mov    edx,0x1
c0006e8c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e90:	e8 17 c9 ff ff       	call   c00037ac <dir_read>
c0006e95:	85 c0                	test   eax,eax
c0006e97:	75 21                	jne    c0006eba <f_setlabel+0x1b5>
c0006e99:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e9d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ea1:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006ea4:	74 5d                	je     c0006f03 <f_setlabel+0x1fe>
c0006ea6:	85 db                	test   ebx,ebx
c0006ea8:	74 0b                	je     c0006eb5 <f_setlabel+0x1b0>
c0006eaa:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eaf:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006eb3:	eb 70                	jmp    c0006f25 <f_setlabel+0x220>
c0006eb5:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006eb8:	eb 70                	jmp    c0006f2a <f_setlabel+0x225>
c0006eba:	83 f8 04             	cmp    eax,0x4
c0006ebd:	75 7c                	jne    c0006f3b <f_setlabel+0x236>
c0006ebf:	85 db                	test   ebx,ebx
c0006ec1:	0f 84 a3 00 00 00    	je     c0006f6a <f_setlabel+0x265>
c0006ec7:	ba 01 00 00 00       	mov    edx,0x1
c0006ecc:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ed0:	e8 51 ca ff ff       	call   c0003926 <dir_alloc>
c0006ed5:	89 c6                	mov    esi,eax
c0006ed7:	85 c0                	test   eax,eax
c0006ed9:	0f 85 8b 00 00 00    	jne    c0006f6a <f_setlabel+0x265>
c0006edf:	31 d2                	xor    edx,edx
c0006ee1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee5:	b9 20 00 00 00       	mov    ecx,0x20
c0006eea:	e8 e5 ab ff ff       	call   c0001ad4 <mem_set>
c0006eef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ef6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006efa:	75 18                	jne    c0006f14 <f_setlabel+0x20f>
c0006efc:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006eff:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f03:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006f06:	b9 16 00 00 00       	mov    ecx,0x16
c0006f0b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f0f:	83 c0 02             	add    eax,0x2
c0006f12:	eb 9b                	jmp    c0006eaf <f_setlabel+0x1aa>
c0006f14:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006f18:	b9 0b 00 00 00       	mov    ecx,0xb
c0006f1d:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006f21:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f25:	e8 95 ab ff ff       	call   c0001abf <mem_cpy>
c0006f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f2e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f36:	e8 0e d4 ff ff       	call   c0004349 <sync_fs>
c0006f3b:	89 c6                	mov    esi,eax
c0006f3d:	eb 2b                	jmp    c0006f6a <f_setlabel+0x265>
c0006f3f:	83 fb 0a             	cmp    ebx,0xa
c0006f42:	0f 87 2f fe ff ff    	ja     c0006d77 <f_setlabel+0x72>
c0006f48:	89 f0                	mov    eax,esi
c0006f4a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f4e:	43                   	inc    ebx
c0006f4f:	e9 85 fe ff ff       	jmp    c0006dd9 <f_setlabel+0xd4>
c0006f54:	83 fb 09             	cmp    ebx,0x9
c0006f57:	0f 87 1a fe ff ff    	ja     c0006d77 <f_setlabel+0x72>
c0006f5d:	89 f0                	mov    eax,esi
c0006f5f:	66 c1 e8 08          	shr    ax,0x8
c0006f63:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f67:	43                   	inc    ebx
c0006f68:	eb de                	jmp    c0006f48 <f_setlabel+0x243>
c0006f6a:	89 f0                	mov    eax,esi
c0006f6c:	83 c4 74             	add    esp,0x74
c0006f6f:	5b                   	pop    ebx
c0006f70:	5e                   	pop    esi
c0006f71:	c3                   	ret    

c0006f72 <f_forward>:
c0006f72:	55                   	push   ebp
c0006f73:	57                   	push   edi
c0006f74:	56                   	push   esi
c0006f75:	53                   	push   ebx
c0006f76:	83 ec 2c             	sub    esp,0x2c
c0006f79:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f7d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f81:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f87:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f8b:	89 d8                	mov    eax,ebx
c0006f8d:	e8 b1 b1 ff ff       	call   c0002143 <validate>
c0006f92:	89 c5                	mov    ebp,eax
c0006f94:	85 c0                	test   eax,eax
c0006f96:	0f 85 aa 01 00 00    	jne    c0007146 <f_forward+0x1d4>
c0006f9c:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006fa0:	85 ed                	test   ebp,ebp
c0006fa2:	0f 85 9e 01 00 00    	jne    c0007146 <f_forward+0x1d4>
c0006fa8:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006fac:	0f 84 8f 01 00 00    	je     c0007141 <f_forward+0x1cf>
c0006fb2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006fb5:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006fb8:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006fbb:	bf 00 00 00 00       	mov    edi,0x0
c0006fc0:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006fc3:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006fc7:	89 d1                	mov    ecx,edx
c0006fc9:	19 f9                	sbb    ecx,edi
c0006fcb:	0f 83 cf 00 00 00    	jae    c00070a0 <f_forward+0x12e>
c0006fd1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fd5:	e9 c6 00 00 00       	jmp    c00070a0 <f_forward+0x12e>
c0006fda:	50                   	push   eax
c0006fdb:	50                   	push   eax
c0006fdc:	6a 00                	push   0x0
c0006fde:	6a 00                	push   0x0
c0006fe0:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fe4:	83 c4 10             	add    esp,0x10
c0006fe7:	85 c0                	test   eax,eax
c0006fe9:	0f 84 57 01 00 00    	je     c0007146 <f_forward+0x1d4>
c0006fef:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006ff2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006ff6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006ff9:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006ffd:	89 d7                	mov    edi,edx
c0006fff:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007002:	89 c6                	mov    esi,eax
c0007004:	0f ac fe 09          	shrd   esi,edi,0x9
c0007008:	21 ce                	and    esi,ecx
c000700a:	89 c1                	mov    ecx,eax
c000700c:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007012:	0f 84 98 00 00 00    	je     c00070b0 <f_forward+0x13e>
c0007018:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000701c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000701f:	89 c8                	mov    eax,ecx
c0007021:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007025:	e8 af ac ff ff       	call   c0001cd9 <clst2sect>
c000702a:	89 d7                	mov    edi,edx
c000702c:	09 c7                	or     edi,eax
c000702e:	0f 84 9e 00 00 00    	je     c00070d2 <f_forward+0x160>
c0007034:	31 ff                	xor    edi,edi
c0007036:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007039:	01 c6                	add    esi,eax
c000703b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000703f:	11 d7                	adc    edi,edx
c0007041:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007044:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007047:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000704b:	39 fa                	cmp    edx,edi
c000704d:	0f 85 a2 00 00 00    	jne    c00070f5 <f_forward+0x183>
c0007053:	39 f0                	cmp    eax,esi
c0007055:	0f 85 9a 00 00 00    	jne    c00070f5 <f_forward+0x183>
c000705b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000705e:	ba 00 02 00 00       	mov    edx,0x200
c0007063:	25 ff 01 00 00       	and    eax,0x1ff
c0007068:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000706c:	29 c2                	sub    edx,eax
c000706e:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007071:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007074:	39 d1                	cmp    ecx,edx
c0007076:	76 02                	jbe    c000707a <f_forward+0x108>
c0007078:	89 d1                	mov    ecx,edx
c000707a:	8d 73 50             	lea    esi,[ebx+0x50]
c000707d:	52                   	push   edx
c000707e:	01 c6                	add    esi,eax
c0007080:	52                   	push   edx
c0007081:	51                   	push   ecx
c0007082:	56                   	push   esi
c0007083:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007087:	83 c4 10             	add    esp,0x10
c000708a:	85 c0                	test   eax,eax
c000708c:	74 44                	je     c00070d2 <f_forward+0x160>
c000708e:	31 ff                	xor    edi,edi
c0007090:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007093:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007096:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000709a:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000709e:	01 07                	add    DWORD PTR [edi],eax
c00070a0:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00070a5:	0f 85 2f ff ff ff    	jne    c0006fda <f_forward+0x68>
c00070ab:	e9 96 00 00 00       	jmp    c0007146 <f_forward+0x1d4>
c00070b0:	85 f6                	test   esi,esi
c00070b2:	0f 85 60 ff ff ff    	jne    c0007018 <f_forward+0xa6>
c00070b8:	89 d7                	mov    edi,edx
c00070ba:	09 c7                	or     edi,eax
c00070bc:	75 05                	jne    c00070c3 <f_forward+0x151>
c00070be:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00070c1:	eb 0a                	jmp    c00070cd <f_forward+0x15b>
c00070c3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00070c6:	89 d8                	mov    eax,ebx
c00070c8:	e8 d9 bc ff ff       	call   c0002da6 <get_fat>
c00070cd:	83 f8 01             	cmp    eax,0x1
c00070d0:	77 0b                	ja     c00070dd <f_forward+0x16b>
c00070d2:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070d6:	bd 02 00 00 00       	mov    ebp,0x2
c00070db:	eb 69                	jmp    c0007146 <f_forward+0x1d4>
c00070dd:	83 f8 ff             	cmp    eax,0xffffffff
c00070e0:	75 0b                	jne    c00070ed <f_forward+0x17b>
c00070e2:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070e6:	bd 01 00 00 00       	mov    ebp,0x1
c00070eb:	eb 59                	jmp    c0007146 <f_forward+0x1d4>
c00070ed:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070f0:	e9 23 ff ff ff       	jmp    c0007018 <f_forward+0xa6>
c00070f5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070f9:	79 20                	jns    c000711b <f_forward+0x1a9>
c00070fb:	83 ec 0c             	sub    esp,0xc
c00070fe:	6a 01                	push   0x1
c0007100:	52                   	push   edx
c0007101:	50                   	push   eax
c0007102:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007106:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000710a:	50                   	push   eax
c000710b:	e8 fb a8 ff ff       	call   c0001a0b <disk_write>
c0007110:	83 c4 20             	add    esp,0x20
c0007113:	85 c0                	test   eax,eax
c0007115:	75 cb                	jne    c00070e2 <f_forward+0x170>
c0007117:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000711b:	83 ec 0c             	sub    esp,0xc
c000711e:	6a 01                	push   0x1
c0007120:	57                   	push   edi
c0007121:	56                   	push   esi
c0007122:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007126:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000712a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000712e:	50                   	push   eax
c000712f:	e8 c1 a8 ff ff       	call   c00019f5 <disk_read>
c0007134:	83 c4 20             	add    esp,0x20
c0007137:	85 c0                	test   eax,eax
c0007139:	0f 84 1c ff ff ff    	je     c000705b <f_forward+0xe9>
c000713f:	eb a1                	jmp    c00070e2 <f_forward+0x170>
c0007141:	bd 07 00 00 00       	mov    ebp,0x7
c0007146:	83 c4 2c             	add    esp,0x2c
c0007149:	89 e8                	mov    eax,ebp
c000714b:	5b                   	pop    ebx
c000714c:	5e                   	pop    esi
c000714d:	5f                   	pop    edi
c000714e:	5d                   	pop    ebp
c000714f:	c3                   	ret    

c0007150 <f_mkfs>:
c0007150:	55                   	push   ebp
c0007151:	57                   	push   edi
c0007152:	56                   	push   esi
c0007153:	53                   	push   ebx
c0007154:	bb 0b 00 00 00       	mov    ebx,0xb
c0007159:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000715f:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007166:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000716d:	e8 b0 ae ff ff       	call   c0002022 <get_ldnumber>
c0007172:	85 c0                	test   eax,eax
c0007174:	0f 88 ec 10 00 00    	js     c0008266 <f_mkfs+0x1116>
c000717a:	8b 14 85 80 42 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbd80]
c0007181:	85 d2                	test   edx,edx
c0007183:	74 03                	je     c0007188 <f_mkfs+0x38>
c0007185:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007188:	85 f6                	test   esi,esi
c000718a:	75 05                	jne    c0007191 <f_mkfs+0x41>
c000718c:	be c0 00 02 c0       	mov    esi,0xc00200c0
c0007191:	83 ec 0c             	sub    esp,0xc
c0007194:	0f b6 c0             	movzx  eax,al
c0007197:	bb 03 00 00 00       	mov    ebx,0x3
c000719c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00071a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071a4:	e8 49 a8 ff ff       	call   c00019f2 <disk_initialize>
c00071a9:	83 c4 10             	add    esp,0x10
c00071ac:	a8 01                	test   al,0x1
c00071ae:	0f 85 b2 10 00 00    	jne    c0008266 <f_mkfs+0x1116>
c00071b4:	bb 0a 00 00 00       	mov    ebx,0xa
c00071b9:	a8 04                	test   al,0x4
c00071bb:	0f 85 a5 10 00 00    	jne    c0008266 <f_mkfs+0x1116>
c00071c1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00071c4:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00071c8:	85 c0                	test   eax,eax
c00071ca:	75 20                	jne    c00071ec <f_mkfs+0x9c>
c00071cc:	51                   	push   ecx
c00071cd:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071d1:	50                   	push   eax
c00071d2:	6a 03                	push   0x3
c00071d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071d8:	e8 44 a8 ff ff       	call   c0001a21 <disk_ioctl>
c00071dd:	83 c4 10             	add    esp,0x10
c00071e0:	85 c0                	test   eax,eax
c00071e2:	74 08                	je     c00071ec <f_mkfs+0x9c>
c00071e4:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071ec:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071f0:	8d 42 ff             	lea    eax,[edx-0x1]
c00071f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071f8:	77 04                	ja     c00071fe <f_mkfs+0xae>
c00071fa:	85 c2                	test   edx,eax
c00071fc:	74 08                	je     c0007206 <f_mkfs+0xb6>
c00071fe:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007206:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007209:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000720d:	48                   	dec    eax
c000720e:	3c 01                	cmp    al,0x1
c0007210:	76 05                	jbe    c0007217 <f_mkfs+0xc7>
c0007212:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007217:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000721a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000721e:	48                   	dec    eax
c000721f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007224:	77 07                	ja     c000722d <f_mkfs+0xdd>
c0007226:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000722b:	74 08                	je     c0007235 <f_mkfs+0xe5>
c000722d:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007235:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007238:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000723e:	77 07                	ja     c0007247 <f_mkfs+0xf7>
c0007240:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007243:	85 d8                	test   eax,ebx
c0007245:	74 02                	je     c0007249 <f_mkfs+0xf9>
c0007247:	31 db                	xor    ebx,ebx
c0007249:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007254:	77 0a                	ja     c0007260 <f_mkfs+0x110>
c0007256:	bb 11 00 00 00       	mov    ebx,0x11
c000725b:	e9 06 10 00 00       	jmp    c0008266 <f_mkfs+0x1116>
c0007260:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007267:	8b 36                	mov    esi,DWORD PTR [esi]
c0007269:	85 ed                	test   ebp,ebp
c000726b:	75 1e                	jne    c000728b <f_mkfs+0x13b>
c000726d:	83 ec 0c             	sub    esp,0xc
c0007270:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007277:	25 00 fe ff ff       	and    eax,0xfffffe00
c000727c:	50                   	push   eax
c000727d:	e8 f1 0f 00 00       	call   c0008273 <ff_memalloc>
c0007282:	83 c4 10             	add    esp,0x10
c0007285:	89 c5                	mov    ebp,eax
c0007287:	85 c0                	test   eax,eax
c0007289:	74 cb                	je     c0007256 <f_mkfs+0x106>
c000728b:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007293:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000729b:	52                   	push   edx
c000729c:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00072a0:	50                   	push   eax
c00072a1:	6a 01                	push   0x1
c00072a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072a7:	e8 75 a7 ff ff       	call   c0001a21 <disk_ioctl>
c00072ac:	83 c4 10             	add    esp,0x10
c00072af:	85 c0                	test   eax,eax
c00072b1:	0f 85 4a 0f 00 00    	jne    c0008201 <f_mkfs+0x10b1>
c00072b7:	89 f1                	mov    ecx,esi
c00072b9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00072c1:	83 e1 0f             	and    ecx,0xf
c00072c4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072cc:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072d0:	83 e6 08             	and    esi,0x8
c00072d3:	75 56                	jne    c000732b <f_mkfs+0x1db>
c00072d5:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072d9:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072dd:	83 ff 00             	cmp    edi,0x0
c00072e0:	76 20                	jbe    c0007302 <f_mkfs+0x1b2>
c00072e2:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072e7:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072ef:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072f5:	83 d7 ff             	adc    edi,0xffffffff
c00072f8:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072fc:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007300:	eb 21                	jmp    c0007323 <f_mkfs+0x1d3>
c0007302:	ba 3f 00 00 00       	mov    edx,0x3f
c0007307:	39 f2                	cmp    edx,esi
c0007309:	19 f8                	sbb    eax,edi
c000730b:	73 1e                	jae    c000732b <f_mkfs+0x1db>
c000730d:	83 c6 c1             	add    esi,0xffffffc1
c0007310:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007318:	83 d7 ff             	adc    edi,0xffffffff
c000731b:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000731f:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007323:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000732b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000732f:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007333:	89 04 24             	mov    DWORD PTR [esp],eax
c0007336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000733a:	31 c0                	xor    eax,eax
c000733c:	ba 7f 00 00 00       	mov    edx,0x7f
c0007341:	89 c7                	mov    edi,eax
c0007343:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007346:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000734a:	0f 83 c5 0a 00 00    	jae    c0007e15 <f_mkfs+0xcc5>
c0007350:	89 df                	mov    edi,ebx
c0007352:	c1 ef 09             	shr    edi,0x9
c0007355:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007359:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007360:	c1 ef 09             	shr    edi,0x9
c0007363:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007368:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000736c:	74 29                	je     c0007397 <f_mkfs+0x247>
c000736e:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007374:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007379:	0f 97 c2             	seta   dl
c000737c:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000737f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007383:	0f 92 c0             	setb   al
c0007386:	08 c2                	or     dl,al
c0007388:	75 5b                	jne    c00073e5 <f_mkfs+0x295>
c000738a:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000738e:	83 e0 07             	and    eax,0x7
c0007391:	3c 04                	cmp    al,0x4
c0007393:	74 50                	je     c00073e5 <f_mkfs+0x295>
c0007395:	eb 1b                	jmp    c00073b2 <f_mkfs+0x262>
c0007397:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000739c:	0f 87 73 0a 00 00    	ja     c0007e15 <f_mkfs+0xcc5>
c00073a2:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073a8:	76 08                	jbe    c00073b2 <f_mkfs+0x262>
c00073aa:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00073b2:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073b6:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00073ba:	83 e0 01             	and    eax,0x1
c00073bd:	80 e1 02             	and    cl,0x2
c00073c0:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00073c4:	74 0d                	je     c00073d3 <f_mkfs+0x283>
c00073c6:	84 c0                	test   al,al
c00073c8:	0f 84 53 09 00 00    	je     c0007d21 <f_mkfs+0xbd1>
c00073ce:	e9 12 08 00 00       	jmp    c0007be5 <f_mkfs+0xa95>
c00073d3:	bb 13 00 00 00       	mov    ebx,0x13
c00073d8:	84 c0                	test   al,al
c00073da:	0f 85 05 08 00 00    	jne    c0007be5 <f_mkfs+0xa95>
c00073e0:	e9 39 0e 00 00       	jmp    c000821e <f_mkfs+0x10ce>
c00073e5:	31 c0                	xor    eax,eax
c00073e7:	ba ff 0f 00 00       	mov    edx,0xfff
c00073ec:	89 c7                	mov    edi,eax
c00073ee:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073f1:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073f5:	0f 83 1a 0a 00 00    	jae    c0007e15 <f_mkfs+0xcc5>
c00073fb:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007401:	77 39                	ja     c000743c <f_mkfs+0x2ec>
c0007403:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007408:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007410:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007413:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007417:	73 08                	jae    c0007421 <f_mkfs+0x2d1>
c0007419:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007421:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007426:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007429:	b8 00 00 00 00       	mov    eax,0x0
c000742e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007432:	73 08                	jae    c000743c <f_mkfs+0x2ec>
c0007434:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000743c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007440:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007444:	83 c0 20             	add    eax,0x20
c0007447:	83 d2 00             	adc    edx,0x0
c000744a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000744e:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007452:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007456:	31 d2                	xor    edx,edx
c0007458:	31 ff                	xor    edi,edi
c000745a:	52                   	push   edx
c000745b:	89 fb                	mov    ebx,edi
c000745d:	50                   	push   eax
c000745e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007462:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007466:	e8 f1 7c 01 00       	call   c001f15c <__udivdi3>
c000746b:	83 c4 10             	add    esp,0x10
c000746e:	c1 e0 02             	shl    eax,0x2
c0007471:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007475:	05 07 02 00 00       	add    eax,0x207
c000747a:	89 f1                	mov    ecx,esi
c000747c:	c1 e8 09             	shr    eax,0x9
c000747f:	83 c1 ff             	add    ecx,0xffffffff
c0007482:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007486:	83 d3 ff             	adc    ebx,0xffffffff
c0007489:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000748d:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007491:	31 d2                	xor    edx,edx
c0007493:	01 c8                	add    eax,ecx
c0007495:	11 da                	adc    edx,ebx
c0007497:	89 c1                	mov    ecx,eax
c0007499:	f7 de                	neg    esi
c000749b:	89 d0                	mov    eax,edx
c000749d:	83 d7 00             	adc    edi,0x0
c00074a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00074a4:	f7 df                	neg    edi
c00074a6:	21 f1                	and    ecx,esi
c00074a8:	21 f8                	and    eax,edi
c00074aa:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00074ae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00074b2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00074b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00074ba:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00074be:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074c1:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00074c5:	0f ac d0 01          	shrd   eax,edx,0x1
c00074c9:	89 df                	mov    edi,ebx
c00074cb:	d1 ea                	shr    edx,1
c00074cd:	39 c1                	cmp    ecx,eax
c00074cf:	19 d7                	sbb    edi,edx
c00074d1:	0f 83 3e 09 00 00    	jae    c0007e15 <f_mkfs+0xcc5>
c00074d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074db:	31 d2                	xor    edx,edx
c00074dd:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074e5:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074ec:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074f0:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074f4:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074f8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074fc:	83 f8 0f             	cmp    eax,0xf
c00074ff:	0f 86 10 09 00 00    	jbe    c0007e15 <f_mkfs+0xcc5>
c0007505:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000750d:	0f 87 02 09 00 00    	ja     c0007e15 <f_mkfs+0xcc5>
c0007513:	31 d2                	xor    edx,edx
c0007515:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007519:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007521:	83 c0 07             	add    eax,0x7
c0007524:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000752c:	c1 e8 03             	shr    eax,0x3
c000752f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007536:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000753a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000753e:	c1 e0 09             	shl    eax,0x9
c0007541:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007545:	48                   	dec    eax
c0007546:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000754a:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000754e:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007552:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007556:	31 d2                	xor    edx,edx
c0007558:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000755c:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007563:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007567:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000756c:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007570:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007574:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007578:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000757c:	31 ff                	xor    edi,edi
c000757e:	31 f6                	xor    esi,esi
c0007580:	31 db                	xor    ebx,ebx
c0007582:	85 ff                	test   edi,edi
c0007584:	74 05                	je     c000758b <f_mkfs+0x43b>
c0007586:	4f                   	dec    edi
c0007587:	74 44                	je     c00075cd <f_mkfs+0x47d>
c0007589:	eb 4f                	jmp    c00075da <f_mkfs+0x48a>
c000758b:	83 ec 0c             	sub    esp,0xc
c000758e:	0f b7 c3             	movzx  eax,bx
c0007591:	50                   	push   eax
c0007592:	e8 05 0e 00 00       	call   c000839c <ff_wtoupper>
c0007597:	83 c4 10             	add    esp,0x10
c000759a:	89 c1                	mov    ecx,eax
c000759c:	8d 53 01             	lea    edx,[ebx+0x1]
c000759f:	66 39 c3             	cmp    bx,ax
c00075a2:	75 3e                	jne    c00075e2 <f_mkfs+0x492>
c00075a4:	be 01 00 00 00       	mov    esi,0x1
c00075a9:	89 df                	mov    edi,ebx
c00075ab:	66 01 f7             	add    di,si
c00075ae:	75 07                	jne    c00075b7 <f_mkfs+0x467>
c00075b0:	83 fe 7f             	cmp    esi,0x7f
c00075b3:	77 31                	ja     c00075e6 <f_mkfs+0x496>
c00075b5:	eb 16                	jmp    c00075cd <f_mkfs+0x47d>
c00075b7:	83 ec 0c             	sub    esp,0xc
c00075ba:	0f b7 ff             	movzx  edi,di
c00075bd:	57                   	push   edi
c00075be:	e8 d9 0d 00 00       	call   c000839c <ff_wtoupper>
c00075c3:	83 c4 10             	add    esp,0x10
c00075c6:	39 c7                	cmp    edi,eax
c00075c8:	75 e6                	jne    c00075b0 <f_mkfs+0x460>
c00075ca:	46                   	inc    esi
c00075cb:	eb dc                	jmp    c00075a9 <f_mkfs+0x459>
c00075cd:	31 c0                	xor    eax,eax
c00075cf:	89 d9                	mov    ecx,ebx
c00075d1:	4e                   	dec    esi
c00075d2:	0f 95 c0             	setne  al
c00075d5:	43                   	inc    ebx
c00075d6:	89 c7                	mov    edi,eax
c00075d8:	eb 14                	jmp    c00075ee <f_mkfs+0x49e>
c00075da:	89 f1                	mov    ecx,esi
c00075dc:	01 f3                	add    ebx,esi
c00075de:	31 ff                	xor    edi,edi
c00075e0:	eb 0c                	jmp    c00075ee <f_mkfs+0x49e>
c00075e2:	89 d3                	mov    ebx,edx
c00075e4:	eb 08                	jmp    c00075ee <f_mkfs+0x49e>
c00075e6:	bf 02 00 00 00       	mov    edi,0x2
c00075eb:	83 c9 ff             	or     ecx,0xffffffff
c00075ee:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075f2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075f5:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075f9:	0f b6 c1             	movzx  eax,cl
c00075fc:	e8 3a a9 ff ff       	call   c0001f3b <xsum32>
c0007601:	66 c1 e9 08          	shr    cx,0x8
c0007605:	89 c2                	mov    edx,eax
c0007607:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000760a:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000760e:	0f b7 c1             	movzx  eax,cx
c0007611:	e8 25 a9 ff ff       	call   c0001f3b <xsum32>
c0007616:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000761b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000761f:	66 85 db             	test   bx,bx
c0007622:	74 1f                	je     c0007643 <f_mkfs+0x4f3>
c0007624:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007627:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000762e:	83 c0 02             	add    eax,0x2
c0007631:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007637:	39 c2                	cmp    edx,eax
c0007639:	74 08                	je     c0007643 <f_mkfs+0x4f3>
c000763b:	89 04 24             	mov    DWORD PTR [esp],eax
c000763e:	e9 3f ff ff ff       	jmp    c0007582 <f_mkfs+0x432>
c0007643:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007646:	83 ec 0c             	sub    esp,0xc
c0007649:	05 01 02 00 00       	add    eax,0x201
c000764e:	c1 e8 09             	shr    eax,0x9
c0007651:	50                   	push   eax
c0007652:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007656:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000765a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000765e:	55                   	push   ebp
c000765f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007663:	e8 a3 a3 ff ff       	call   c0001a0b <disk_write>
c0007668:	83 c4 20             	add    esp,0x20
c000766b:	85 c0                	test   eax,eax
c000766d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007670:	0f 85 8b 0b 00 00    	jne    c0008201 <f_mkfs+0x10b1>
c0007676:	89 d0                	mov    eax,edx
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000767e:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007682:	66 85 db             	test   bx,bx
c0007685:	74 04                	je     c000768b <f_mkfs+0x53b>
c0007687:	31 c0                	xor    eax,eax
c0007689:	eb b0                	jmp    c000763b <f_mkfs+0x4eb>
c000768b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000768f:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007693:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007697:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000769d:	31 d2                	xor    edx,edx
c000769f:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00076aa:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076ae:	c1 eb 09             	shr    ebx,0x9
c00076b1:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00076b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076bc:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00076c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00076c4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076c8:	8d 70 01             	lea    esi,[eax+0x1]
c00076cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076d3:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076da:	31 d2                	xor    edx,edx
c00076dc:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00076e4:	89 c1                	mov    ecx,eax
c00076e6:	89 e8                	mov    eax,ebp
c00076e8:	e8 e7 a3 ff ff       	call   c0001ad4 <mem_set>
c00076ed:	31 c0                	xor    eax,eax
c00076ef:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076f2:	76 10                	jbe    c0007704 <f_mkfs+0x5b4>
c00076f4:	83 fe 07             	cmp    esi,0x7
c00076f7:	76 0b                	jbe    c0007704 <f_mkfs+0x5b4>
c00076f9:	40                   	inc    eax
c00076fa:	83 ee 08             	sub    esi,0x8
c00076fd:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007702:	eb eb                	jmp    c00076ef <f_mkfs+0x59f>
c0007704:	b2 01                	mov    dl,0x1
c0007706:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000770a:	85 f6                	test   esi,esi
c000770c:	74 0c                	je     c000771a <f_mkfs+0x5ca>
c000770e:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007711:	76 07                	jbe    c000771a <f_mkfs+0x5ca>
c0007713:	08 11                	or     BYTE PTR [ecx],dl
c0007715:	4e                   	dec    esi
c0007716:	d1 e2                	shl    edx,1
c0007718:	eb f0                	jmp    c000770a <f_mkfs+0x5ba>
c000771a:	89 df                	mov    edi,ebx
c000771c:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007720:	76 04                	jbe    c0007726 <f_mkfs+0x5d6>
c0007722:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007726:	83 ec 0c             	sub    esp,0xc
c0007729:	57                   	push   edi
c000772a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000772e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007732:	55                   	push   ebp
c0007733:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007737:	e8 cf a2 ff ff       	call   c0001a0b <disk_write>
c000773c:	83 c4 20             	add    esp,0x20
c000773f:	85 c0                	test   eax,eax
c0007741:	0f 85 ba 0a 00 00    	jne    c0008201 <f_mkfs+0x10b1>
c0007747:	31 d2                	xor    edx,edx
c0007749:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000774d:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007751:	29 fb                	sub    ebx,edi
c0007753:	0f 85 7a ff ff ff    	jne    c00076d3 <f_mkfs+0x583>
c0007759:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000775d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007765:	31 f6                	xor    esi,esi
c0007767:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000776b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000776e:	31 d2                	xor    edx,edx
c0007770:	89 e8                	mov    eax,ebp
c0007772:	e8 5d a3 ff ff       	call   c0001ad4 <mem_set>
c0007777:	31 c9                	xor    ecx,ecx
c0007779:	85 db                	test   ebx,ebx
c000777b:	75 40                	jne    c00077bd <f_mkfs+0x66d>
c000777d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007782:	89 e8                	mov    eax,ebp
c0007784:	bb 02 00 00 00       	mov    ebx,0x2
c0007789:	e8 28 a3 ff ff       	call   c0001ab6 <st_dword>
c000778e:	8d 45 04             	lea    eax,[ebp+0x4]
c0007791:	83 ca ff             	or     edx,0xffffffff
c0007794:	e8 1d a3 ff ff       	call   c0001ab6 <st_dword>
c0007799:	b9 08 00 00 00       	mov    ecx,0x8
c000779e:	eb 1d                	jmp    c00077bd <f_mkfs+0x66d>
c00077a0:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077a3:	76 3b                	jbe    c00077e0 <f_mkfs+0x690>
c00077a5:	43                   	inc    ebx
c00077a6:	83 fe 01             	cmp    esi,0x1
c00077a9:	89 da                	mov    edx,ebx
c00077ab:	77 03                	ja     c00077b0 <f_mkfs+0x660>
c00077ad:	83 ca ff             	or     edx,0xffffffff
c00077b0:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00077b4:	4e                   	dec    esi
c00077b5:	e8 fc a2 ff ff       	call   c0001ab6 <st_dword>
c00077ba:	83 c1 04             	add    ecx,0x4
c00077bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00077c1:	85 f6                	test   esi,esi
c00077c3:	75 db                	jne    c00077a0 <f_mkfs+0x650>
c00077c5:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00077ca:	77 14                	ja     c00077e0 <f_mkfs+0x690>
c00077cc:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077d0:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077d7:	85 f6                	test   esi,esi
c00077d9:	74 05                	je     c00077e0 <f_mkfs+0x690>
c00077db:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077de:	77 dd                	ja     c00077bd <f_mkfs+0x66d>
c00077e0:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077e4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077e8:	39 cf                	cmp    edi,ecx
c00077ea:	76 02                	jbe    c00077ee <f_mkfs+0x69e>
c00077ec:	89 cf                	mov    edi,ecx
c00077ee:	83 ec 0c             	sub    esp,0xc
c00077f1:	57                   	push   edi
c00077f2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077f6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077fa:	55                   	push   ebp
c00077fb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077ff:	e8 07 a2 ff ff       	call   c0001a0b <disk_write>
c0007804:	83 c4 20             	add    esp,0x20
c0007807:	85 c0                	test   eax,eax
c0007809:	0f 85 f2 09 00 00    	jne    c0008201 <f_mkfs+0x10b1>
c000780f:	31 d2                	xor    edx,edx
c0007811:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007815:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007819:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c000781d:	0f 85 48 ff ff ff    	jne    c000776b <f_mkfs+0x61b>
c0007823:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007826:	31 d2                	xor    edx,edx
c0007828:	89 e8                	mov    eax,ebp
c000782a:	31 ff                	xor    edi,edi
c000782c:	e8 a3 a2 ff ff       	call   c0001ad4 <mem_set>
c0007831:	8d 45 34             	lea    eax,[ebp+0x34]
c0007834:	ba 02 00 00 00       	mov    edx,0x2
c0007839:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000783d:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007841:	e8 70 a2 ff ff       	call   c0001ab6 <st_dword>
c0007846:	8d 45 38             	lea    eax,[ebp+0x38]
c0007849:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000784d:	e8 64 a2 ff ff       	call   c0001ab6 <st_dword>
c0007852:	8d 45 44             	lea    eax,[ebp+0x44]
c0007855:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007859:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000785d:	e8 54 a2 ff ff       	call   c0001ab6 <st_dword>
c0007862:	8d 45 54             	lea    eax,[ebp+0x54]
c0007865:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007869:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000786d:	83 c2 02             	add    edx,0x2
c0007870:	e8 41 a2 ff ff       	call   c0001ab6 <st_dword>
c0007875:	8d 45 58             	lea    eax,[ebp+0x58]
c0007878:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000787c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007880:	e8 31 a2 ff ff       	call   c0001ab6 <st_dword>
c0007885:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007889:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000788e:	89 c6                	mov    esi,eax
c0007890:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007894:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007898:	89 04 24             	mov    DWORD PTR [esp],eax
c000789b:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c000789f:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00078a2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00078a6:	39 cb                	cmp    ebx,ecx
c00078a8:	76 02                	jbe    c00078ac <f_mkfs+0x75c>
c00078aa:	89 cb                	mov    ebx,ecx
c00078ac:	83 ec 0c             	sub    esp,0xc
c00078af:	53                   	push   ebx
c00078b0:	57                   	push   edi
c00078b1:	56                   	push   esi
c00078b2:	55                   	push   ebp
c00078b3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078b7:	e8 4f a1 ff ff       	call   c0001a0b <disk_write>
c00078bc:	83 c4 20             	add    esp,0x20
c00078bf:	85 c0                	test   eax,eax
c00078c1:	0f 85 3a 09 00 00    	jne    c0008201 <f_mkfs+0x10b1>
c00078c7:	31 d2                	xor    edx,edx
c00078c9:	b9 00 02 00 00       	mov    ecx,0x200
c00078ce:	89 e8                	mov    eax,ebp
c00078d0:	e8 ff a1 ff ff       	call   c0001ad4 <mem_set>
c00078d5:	31 d2                	xor    edx,edx
c00078d7:	01 de                	add    esi,ebx
c00078d9:	11 d7                	adc    edi,edx
c00078db:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078de:	75 bf                	jne    c000789f <f_mkfs+0x74f>
c00078e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078e4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078e8:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078f0:	b9 00 02 00 00       	mov    ecx,0x200
c00078f5:	31 d2                	xor    edx,edx
c00078f7:	89 e8                	mov    eax,ebp
c00078f9:	e8 d6 a1 ff ff       	call   c0001ad4 <mem_set>
c00078fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0007903:	ba a0 01 02 c0       	mov    edx,0xc00201a0
c0007908:	89 e8                	mov    eax,ebp
c000790a:	e8 b0 a1 ff ff       	call   c0001abf <mem_cpy>
c000790f:	8d 45 40             	lea    eax,[ebp+0x40]
c0007912:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007916:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000791a:	e8 9a a1 ff ff       	call   c0001ab9 <st_qword>
c000791f:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007923:	8d 45 48             	lea    eax,[ebp+0x48]
c0007926:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000792a:	e8 8a a1 ff ff       	call   c0001ab9 <st_qword>
c000792f:	8d 45 50             	lea    eax,[ebp+0x50]
c0007932:	ba 20 00 00 00       	mov    edx,0x20
c0007937:	e8 7a a1 ff ff       	call   c0001ab6 <st_dword>
c000793c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007940:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007944:	e8 6d a1 ff ff       	call   c0001ab6 <st_dword>
c0007949:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000794d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007951:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007955:	e8 5c a1 ff ff       	call   c0001ab6 <st_dword>
c000795a:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000795d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007961:	e8 50 a1 ff ff       	call   c0001ab6 <st_dword>
c0007966:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000796a:	8d 50 02             	lea    edx,[eax+0x2]
c000796d:	8d 45 60             	lea    eax,[ebp+0x60]
c0007970:	e8 41 a1 ff ff       	call   c0001ab6 <st_dword>
c0007975:	8d 45 64             	lea    eax,[ebp+0x64]
c0007978:	ba 00 00 21 50       	mov    edx,0x50210000
c000797d:	e8 34 a1 ff ff       	call   c0001ab6 <st_dword>
c0007982:	8d 45 68             	lea    eax,[ebp+0x68]
c0007985:	ba 00 01 00 00       	mov    edx,0x100
c000798a:	e8 23 a1 ff ff       	call   c0001ab2 <st_word>
c000798f:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007993:	b8 0a 00 00 00       	mov    eax,0xa
c0007998:	48                   	dec    eax
c0007999:	74 05                	je     c00079a0 <f_mkfs+0x850>
c000799b:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c000799e:	eb f8                	jmp    c0007998 <f_mkfs+0x848>
c00079a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079a4:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00079a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079ac:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00079b0:	74 05                	je     c00079b7 <f_mkfs+0x867>
c00079b2:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c00079b5:	eb f5                	jmp    c00079ac <f_mkfs+0x85c>
c00079b7:	8d 45 78             	lea    eax,[ebp+0x78]
c00079ba:	ba eb fe 00 00       	mov    edx,0xfeeb
c00079bf:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c00079c5:	31 db                	xor    ebx,ebx
c00079c7:	e8 e6 a0 ff ff       	call   c0001ab2 <st_word>
c00079cc:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079d2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00079da:	e8 d3 a0 ff ff       	call   c0001ab2 <st_word>
c00079df:	31 c9                	xor    ecx,ecx
c00079e1:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079e4:	83 f8 01             	cmp    eax,0x1
c00079e7:	76 13                	jbe    c00079fc <f_mkfs+0x8ac>
c00079e9:	83 f9 70             	cmp    ecx,0x70
c00079ec:	74 0e                	je     c00079fc <f_mkfs+0x8ac>
c00079ee:	89 da                	mov    edx,ebx
c00079f0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079f5:	e8 41 a5 ff ff       	call   c0001f3b <xsum32>
c00079fa:	89 c3                	mov    ebx,eax
c00079fc:	41                   	inc    ecx
c00079fd:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a03:	75 dc                	jne    c00079e1 <f_mkfs+0x891>
c0007a05:	89 f0                	mov    eax,esi
c0007a07:	89 fa                	mov    edx,edi
c0007a09:	83 c0 01             	add    eax,0x1
c0007a0c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a10:	83 d2 00             	adc    edx,0x0
c0007a13:	83 ec 0c             	sub    esp,0xc
c0007a16:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007a1a:	6a 01                	push   0x1
c0007a1c:	57                   	push   edi
c0007a1d:	56                   	push   esi
c0007a1e:	55                   	push   ebp
c0007a1f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a23:	e8 e3 9f ff ff       	call   c0001a0b <disk_write>
c0007a28:	83 c4 20             	add    esp,0x20
c0007a2b:	85 c0                	test   eax,eax
c0007a2d:	0f 85 ce 07 00 00    	jne    c0008201 <f_mkfs+0x10b1>
c0007a33:	31 d2                	xor    edx,edx
c0007a35:	b9 00 02 00 00       	mov    ecx,0x200
c0007a3a:	89 e8                	mov    eax,ebp
c0007a3c:	e8 93 a0 ff ff       	call   c0001ad4 <mem_set>
c0007a41:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a46:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a49:	e8 64 a0 ff ff       	call   c0001ab2 <st_word>
c0007a4e:	89 f0                	mov    eax,esi
c0007a50:	89 fa                	mov    edx,edi
c0007a52:	83 c0 09             	add    eax,0x9
c0007a55:	83 d2 00             	adc    edx,0x0
c0007a58:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a5b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a5f:	31 c9                	xor    ecx,ecx
c0007a61:	41                   	inc    ecx
c0007a62:	89 da                	mov    edx,ebx
c0007a64:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a69:	e8 cd a4 ff ff       	call   c0001f3b <xsum32>
c0007a6e:	89 c3                	mov    ebx,eax
c0007a70:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a76:	75 e9                	jne    c0007a61 <f_mkfs+0x911>
c0007a78:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a7c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a80:	83 c0 01             	add    eax,0x1
c0007a83:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a87:	83 d2 00             	adc    edx,0x0
c0007a8a:	83 ec 0c             	sub    esp,0xc
c0007a8d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a91:	6a 01                	push   0x1
c0007a93:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a9b:	55                   	push   ebp
c0007a9c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aa0:	e8 66 9f ff ff       	call   c0001a0b <disk_write>
c0007aa5:	83 c4 20             	add    esp,0x20
c0007aa8:	85 c0                	test   eax,eax
c0007aaa:	0f 85 51 07 00 00    	jne    c0008201 <f_mkfs+0x10b1>
c0007ab0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ab4:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ab8:	75 09                	jne    c0007ac3 <f_mkfs+0x973>
c0007aba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007abd:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ac1:	74 12                	je     c0007ad5 <f_mkfs+0x985>
c0007ac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ac7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007acb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007acf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ad3:	eb 8a                	jmp    c0007a5f <f_mkfs+0x90f>
c0007ad5:	31 d2                	xor    edx,edx
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	89 e8                	mov    eax,ebp
c0007ade:	e8 f1 9f ff ff       	call   c0001ad4 <mem_set>
c0007ae3:	83 c6 0b             	add    esi,0xb
c0007ae6:	83 d7 00             	adc    edi,0x0
c0007ae9:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007aed:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007af1:	31 c9                	xor    ecx,ecx
c0007af3:	41                   	inc    ecx
c0007af4:	89 da                	mov    edx,ebx
c0007af6:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007afb:	e8 3b a4 ff ff       	call   c0001f3b <xsum32>
c0007b00:	89 c3                	mov    ebx,eax
c0007b02:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b08:	75 e9                	jne    c0007af3 <f_mkfs+0x9a3>
c0007b0a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b0d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b11:	83 c6 01             	add    esi,0x1
c0007b14:	83 d7 00             	adc    edi,0x0
c0007b17:	83 ec 0c             	sub    esp,0xc
c0007b1a:	6a 01                	push   0x1
c0007b1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b24:	55                   	push   ebp
c0007b25:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b29:	e8 dd 9e ff ff       	call   c0001a0b <disk_write>
c0007b2e:	83 c4 20             	add    esp,0x20
c0007b31:	85 c0                	test   eax,eax
c0007b33:	0f 85 c8 06 00 00    	jne    c0008201 <f_mkfs+0x10b1>
c0007b39:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b3d:	75 06                	jne    c0007b45 <f_mkfs+0x9f5>
c0007b3f:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b43:	74 09                	je     c0007b4e <f_mkfs+0x9fe>
c0007b45:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b48:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b4c:	eb a3                	jmp    c0007af1 <f_mkfs+0x9a1>
c0007b4e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b52:	89 da                	mov    edx,ebx
c0007b54:	01 e8                	add    eax,ebp
c0007b56:	e8 5b 9f ff ff       	call   c0001ab6 <st_dword>
c0007b5b:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b60:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b68:	75 e4                	jne    c0007b4e <f_mkfs+0x9fe>
c0007b6a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b6d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b71:	83 c6 02             	add    esi,0x2
c0007b74:	83 d7 00             	adc    edi,0x0
c0007b77:	83 ec 0c             	sub    esp,0xc
c0007b7a:	6a 01                	push   0x1
c0007b7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b84:	55                   	push   ebp
c0007b85:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b89:	e8 7d 9e ff ff       	call   c0001a0b <disk_write>
c0007b8e:	83 c4 20             	add    esp,0x20
c0007b91:	85 c0                	test   eax,eax
c0007b93:	0f 85 68 06 00 00    	jne    c0008201 <f_mkfs+0x10b1>
c0007b99:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b9e:	74 0d                	je     c0007bad <f_mkfs+0xa5d>
c0007ba0:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ba8:	e9 43 fd ff ff       	jmp    c00078f0 <f_mkfs+0x7a0>
c0007bad:	b1 07                	mov    cl,0x7
c0007baf:	e9 e3 05 00 00       	jmp    c0008197 <f_mkfs+0x1047>
c0007bb4:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007bb9:	0f 85 4f 02 00 00    	jne    c0007e0e <f_mkfs+0xcbe>
c0007bbf:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007bc4:	0f 86 22 02 00 00    	jbe    c0007dec <f_mkfs+0xc9c>
c0007bca:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007bcf:	0f 85 81 06 00 00    	jne    c0008256 <f_mkfs+0x1106>
c0007bd5:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007bd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bdc:	83 f8 40             	cmp    eax,0x40
c0007bdf:	0f 87 51 06 00 00    	ja     c0008236 <f_mkfs+0x10e6>
c0007be5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007be9:	85 ff                	test   edi,edi
c0007beb:	75 1c                	jne    c0007c09 <f_mkfs+0xab9>
c0007bed:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bf0:	ba a0 00 02 c0       	mov    edx,0xc00200a0
c0007bf5:	c1 e9 0c             	shr    ecx,0xc
c0007bf8:	bf 01 00 00 00       	mov    edi,0x1
c0007bfd:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c00:	66 85 c0             	test   ax,ax
c0007c03:	0f 85 95 01 00 00    	jne    c0007d9e <f_mkfs+0xc4e>
c0007c09:	31 d2                	xor    edx,edx
c0007c0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c0e:	f7 f7                	div    edi
c0007c10:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007c15:	0f 86 95 01 00 00    	jbe    c0007db0 <f_mkfs+0xc60>
c0007c1b:	83 c0 02             	add    eax,0x2
c0007c1e:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007c23:	01 c0                	add    eax,eax
c0007c25:	05 ff 01 00 00       	add    eax,0x1ff
c0007c2a:	be 01 00 00 00       	mov    esi,0x1
c0007c2f:	c1 e8 09             	shr    eax,0x9
c0007c32:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c36:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c3a:	c1 e0 05             	shl    eax,0x5
c0007c3d:	c1 e8 09             	shr    eax,0x9
c0007c40:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c44:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c49:	31 d2                	xor    edx,edx
c0007c4b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c4f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c53:	89 f0                	mov    eax,esi
c0007c55:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c59:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c5d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c61:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c69:	31 d2                	xor    edx,edx
c0007c6b:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c70:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c74:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c78:	31 db                	xor    ebx,ebx
c0007c7a:	01 c8                	add    eax,ecx
c0007c7c:	11 da                	adc    edx,ebx
c0007c7e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c82:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c86:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c8a:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c8e:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c92:	f7 da                	neg    edx
c0007c94:	21 d1                	and    ecx,edx
c0007c96:	29 d9                	sub    ecx,ebx
c0007c98:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c9d:	0f 85 20 01 00 00    	jne    c0007dc3 <f_mkfs+0xc73>
c0007ca3:	31 db                	xor    ebx,ebx
c0007ca5:	01 ce                	add    esi,ecx
c0007ca7:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007cab:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007caf:	31 d2                	xor    edx,edx
c0007cb1:	89 f8                	mov    eax,edi
c0007cb3:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007cb7:	c1 e0 04             	shl    eax,0x4
c0007cba:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007cbe:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007cc2:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007cc6:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007cca:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007ccd:	19 d3                	sbb    ebx,edx
c0007ccf:	0f 82 40 01 00 00    	jb     c0007e15 <f_mkfs+0xcc5>
c0007cd5:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cd8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cdc:	89 c8                	mov    eax,ecx
c0007cde:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ce3:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ce7:	29 f0                	sub    eax,esi
c0007ce9:	29 d0                	sub    eax,edx
c0007ceb:	31 d2                	xor    edx,edx
c0007ced:	f7 f7                	div    edi
c0007cef:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cf4:	89 c3                	mov    ebx,eax
c0007cf6:	0f 85 b8 fe ff ff    	jne    c0007bb4 <f_mkfs+0xa64>
c0007cfc:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d01:	0f 87 1d 01 00 00    	ja     c0007e24 <f_mkfs+0xcd4>
c0007d07:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d0c:	0f 85 03 01 00 00    	jne    c0007e15 <f_mkfs+0xcc5>
c0007d12:	83 ff 01             	cmp    edi,0x1
c0007d15:	0f 86 fa 00 00 00    	jbe    c0007e15 <f_mkfs+0xcc5>
c0007d1b:	d1 ef                	shr    edi,1
c0007d1d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007d21:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007d25:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d28:	85 db                	test   ebx,ebx
c0007d2a:	75 2d                	jne    c0007d59 <f_mkfs+0xc09>
c0007d2c:	89 cb                	mov    ebx,ecx
c0007d2e:	ba b0 00 02 c0       	mov    edx,0xc00200b0
c0007d33:	c1 eb 11             	shr    ebx,0x11
c0007d36:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d3e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d41:	66 85 c0             	test   ax,ax
c0007d44:	74 11                	je     c0007d57 <f_mkfs+0xc07>
c0007d46:	83 c2 02             	add    edx,0x2
c0007d49:	39 d8                	cmp    eax,ebx
c0007d4b:	77 0a                	ja     c0007d57 <f_mkfs+0xc07>
c0007d4d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d51:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d55:	eb e7                	jmp    c0007d3e <f_mkfs+0xbee>
c0007d57:	31 db                	xor    ebx,ebx
c0007d59:	31 d2                	xor    edx,edx
c0007d5b:	89 c8                	mov    eax,ecx
c0007d5d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d61:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d68:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d6d:	c1 ea 09             	shr    edx,0x9
c0007d70:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d75:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d79:	0f 87 96 00 00 00    	ja     c0007e15 <f_mkfs+0xcc5>
c0007d7f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d83:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d8b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d8f:	be 20 00 00 00       	mov    esi,0x20
c0007d94:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d99:	e9 a6 fe ff ff       	jmp    c0007c44 <f_mkfs+0xaf4>
c0007d9e:	83 c2 02             	add    edx,0x2
c0007da1:	39 c8                	cmp    eax,ecx
c0007da3:	0f 87 60 fe ff ff    	ja     c0007c09 <f_mkfs+0xab9>
c0007da9:	01 ff                	add    edi,edi
c0007dab:	e9 4d fe ff ff       	jmp    c0007bfd <f_mkfs+0xaad>
c0007db0:	8d 04 40             	lea    eax,[eax+eax*2]
c0007db3:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007db8:	40                   	inc    eax
c0007db9:	d1 e8                	shr    eax,1
c0007dbb:	83 c0 03             	add    eax,0x3
c0007dbe:	e9 62 fe ff ff       	jmp    c0007c25 <f_mkfs+0xad5>
c0007dc3:	31 d2                	xor    edx,edx
c0007dc5:	89 c8                	mov    eax,ecx
c0007dc7:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007dcb:	85 d2                	test   edx,edx
c0007dcd:	74 0c                	je     c0007ddb <f_mkfs+0xc8b>
c0007dcf:	49                   	dec    ecx
c0007dd0:	46                   	inc    esi
c0007dd1:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007dd6:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ddb:	89 c8                	mov    eax,ecx
c0007ddd:	31 d2                	xor    edx,edx
c0007ddf:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007de3:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007de7:	e9 c3 fe ff ff       	jmp    c0007caf <f_mkfs+0xb5f>
c0007dec:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007df1:	77 31                	ja     c0007e24 <f_mkfs+0xcd4>
c0007df3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df8:	75 1b                	jne    c0007e15 <f_mkfs+0xcc5>
c0007dfa:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dfd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e01:	3d 80 00 00 00       	cmp    eax,0x80
c0007e06:	0f 86 d9 fd ff ff    	jbe    c0007be5 <f_mkfs+0xa95>
c0007e0c:	eb 07                	jmp    c0007e15 <f_mkfs+0xcc5>
c0007e0e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e13:	76 0a                	jbe    c0007e1f <f_mkfs+0xccf>
c0007e15:	bb 0e 00 00 00       	mov    ebx,0xe
c0007e1a:	e9 ff 03 00 00       	jmp    c000821e <f_mkfs+0x10ce>
c0007e1f:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007e24:	31 d2                	xor    edx,edx
c0007e26:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2b:	89 e8                	mov    eax,ebp
c0007e2d:	e8 a2 9c ff ff       	call   c0001ad4 <mem_set>
c0007e32:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e37:	ba c2 01 02 c0       	mov    edx,0xc00201c2
c0007e3c:	89 e8                	mov    eax,ebp
c0007e3e:	e8 7c 9c ff ff       	call   c0001abf <mem_cpy>
c0007e43:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e46:	ba 00 02 00 00       	mov    edx,0x200
c0007e4b:	e8 62 9c ff ff       	call   c0001ab2 <st_word>
c0007e50:	89 f8                	mov    eax,edi
c0007e52:	0f b7 d6             	movzx  edx,si
c0007e55:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e58:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e5b:	e8 52 9c ff ff       	call   c0001ab2 <st_word>
c0007e60:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e64:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e69:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e6c:	75 08                	jne    c0007e76 <f_mkfs+0xd26>
c0007e6e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e76:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e79:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e7d:	e8 30 9c ff ff       	call   c0001ab2 <st_word>
c0007e82:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e87:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e8b:	39 d0                	cmp    eax,edx
c0007e8d:	b8 00 00 00 00       	mov    eax,0x0
c0007e92:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e96:	72 0a                	jb     c0007ea2 <f_mkfs+0xd52>
c0007e98:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e9b:	e8 12 9c ff ff       	call   c0001ab2 <st_word>
c0007ea0:	eb 08                	jmp    c0007eaa <f_mkfs+0xd5a>
c0007ea2:	8d 45 20             	lea    eax,[ebp+0x20]
c0007ea5:	e8 0c 9c ff ff       	call   c0001ab6 <st_dword>
c0007eaa:	8d 45 18             	lea    eax,[ebp+0x18]
c0007ead:	ba 3f 00 00 00       	mov    edx,0x3f
c0007eb2:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007eb6:	e8 f7 9b ff ff       	call   c0001ab2 <st_word>
c0007ebb:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007ebe:	ba ff 00 00 00       	mov    edx,0xff
c0007ec3:	e8 ea 9b ff ff       	call   c0001ab2 <st_word>
c0007ec8:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007ecb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ecf:	e8 e2 9b ff ff       	call   c0001ab6 <st_dword>
c0007ed4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ed9:	75 57                	jne    c0007f32 <f_mkfs+0xde2>
c0007edb:	8d 45 43             	lea    eax,[ebp+0x43]
c0007ede:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ee3:	e8 ce 9b ff ff       	call   c0001ab6 <st_dword>
c0007ee8:	8d 45 24             	lea    eax,[ebp+0x24]
c0007eeb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007eef:	e8 c2 9b ff ff       	call   c0001ab6 <st_dword>
c0007ef4:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007ef7:	ba 02 00 00 00       	mov    edx,0x2
c0007efc:	e8 b5 9b ff ff       	call   c0001ab6 <st_dword>
c0007f01:	8d 45 30             	lea    eax,[ebp+0x30]
c0007f04:	ba 01 00 00 00       	mov    edx,0x1
c0007f09:	e8 a4 9b ff ff       	call   c0001ab2 <st_word>
c0007f0e:	8d 45 32             	lea    eax,[ebp+0x32]
c0007f11:	ba 06 00 00 00       	mov    edx,0x6
c0007f16:	e8 97 9b ff ff       	call   c0001ab2 <st_word>
c0007f1b:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007f1f:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007f23:	8d 45 47             	lea    eax,[ebp+0x47]
c0007f26:	b9 13 00 00 00       	mov    ecx,0x13
c0007f2b:	ba ce 01 02 c0       	mov    edx,0xc00201ce
c0007f30:	eb 2f                	jmp    c0007f61 <f_mkfs+0xe11>
c0007f32:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f35:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f3a:	e8 77 9b ff ff       	call   c0001ab6 <st_dword>
c0007f3f:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f44:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f47:	e8 66 9b ff ff       	call   c0001ab2 <st_word>
c0007f4c:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f50:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f54:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f57:	b9 13 00 00 00       	mov    ecx,0x13
c0007f5c:	ba e2 01 02 c0       	mov    edx,0xc00201e2
c0007f61:	e8 59 9b ff ff       	call   c0001abf <mem_cpy>
c0007f66:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f6c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f71:	89 f0                	mov    eax,esi
c0007f73:	e8 3a 9b ff ff       	call   c0001ab2 <st_word>
c0007f78:	83 ec 0c             	sub    esp,0xc
c0007f7b:	6a 01                	push   0x1
c0007f7d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f81:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f85:	55                   	push   ebp
c0007f86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f8a:	e8 7c 9a ff ff       	call   c0001a0b <disk_write>
c0007f8f:	83 c4 20             	add    esp,0x20
c0007f92:	85 c0                	test   eax,eax
c0007f94:	0f 85 67 02 00 00    	jne    c0008201 <f_mkfs+0x10b1>
c0007f9a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f9f:	0f 85 b7 00 00 00    	jne    c000805c <f_mkfs+0xf0c>
c0007fa5:	83 ec 0c             	sub    esp,0xc
c0007fa8:	6a 01                	push   0x1
c0007faa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fb2:	83 c0 06             	add    eax,0x6
c0007fb5:	83 d2 00             	adc    edx,0x0
c0007fb8:	52                   	push   edx
c0007fb9:	50                   	push   eax
c0007fba:	55                   	push   ebp
c0007fbb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fbf:	e8 47 9a ff ff       	call   c0001a0b <disk_write>
c0007fc4:	83 c4 20             	add    esp,0x20
c0007fc7:	b9 00 02 00 00       	mov    ecx,0x200
c0007fcc:	31 d2                	xor    edx,edx
c0007fce:	89 e8                	mov    eax,ebp
c0007fd0:	e8 ff 9a ff ff       	call   c0001ad4 <mem_set>
c0007fd5:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fda:	89 e8                	mov    eax,ebp
c0007fdc:	e8 d5 9a ff ff       	call   c0001ab6 <st_dword>
c0007fe1:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fe7:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fec:	e8 c5 9a ff ff       	call   c0001ab6 <st_dword>
c0007ff1:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007ff4:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007ffa:	e8 b7 9a ff ff       	call   c0001ab6 <st_dword>
c0007fff:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008005:	ba 02 00 00 00       	mov    edx,0x2
c000800a:	e8 a7 9a ff ff       	call   c0001ab6 <st_dword>
c000800f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008014:	89 f0                	mov    eax,esi
c0008016:	e8 97 9a ff ff       	call   c0001ab2 <st_word>
c000801b:	83 ec 0c             	sub    esp,0xc
c000801e:	6a 01                	push   0x1
c0008020:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008024:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008028:	83 c0 07             	add    eax,0x7
c000802b:	83 d2 00             	adc    edx,0x0
c000802e:	52                   	push   edx
c000802f:	50                   	push   eax
c0008030:	55                   	push   ebp
c0008031:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008035:	e8 d1 99 ff ff       	call   c0001a0b <disk_write>
c000803a:	83 c4 14             	add    esp,0x14
c000803d:	6a 01                	push   0x1
c000803f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008043:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008047:	83 c0 01             	add    eax,0x1
c000804a:	83 d2 00             	adc    edx,0x0
c000804d:	52                   	push   edx
c000804e:	50                   	push   eax
c000804f:	55                   	push   ebp
c0008050:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008054:	e8 b2 99 ff ff       	call   c0001a0b <disk_write>
c0008059:	83 c4 20             	add    esp,0x20
c000805c:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008063:	31 d2                	xor    edx,edx
c0008065:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000806b:	31 db                	xor    ebx,ebx
c000806d:	89 e8                	mov    eax,ebp
c000806f:	e8 60 9a ff ff       	call   c0001ad4 <mem_set>
c0008074:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008079:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008080:	0f 94 c3             	sete   bl
c0008083:	4b                   	dec    ebx
c0008084:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000808a:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008090:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008095:	75 21                	jne    c00080b8 <f_mkfs+0xf68>
c0008097:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000809c:	89 e8                	mov    eax,ebp
c000809e:	e8 13 9a ff ff       	call   c0001ab6 <st_dword>
c00080a3:	8d 45 04             	lea    eax,[ebp+0x4]
c00080a6:	83 ca ff             	or     edx,0xffffffff
c00080a9:	e8 08 9a ff ff       	call   c0001ab6 <st_dword>
c00080ae:	8d 45 08             	lea    eax,[ebp+0x8]
c00080b1:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00080b6:	eb 04                	jmp    c00080bc <f_mkfs+0xf6c>
c00080b8:	89 da                	mov    edx,ebx
c00080ba:	89 e8                	mov    eax,ebp
c00080bc:	e8 f5 99 ff ff       	call   c0001ab6 <st_dword>
c00080c1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00080c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00080c9:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080cd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080d1:	39 ce                	cmp    esi,ecx
c00080d3:	76 02                	jbe    c00080d7 <f_mkfs+0xf87>
c00080d5:	89 ce                	mov    esi,ecx
c00080d7:	83 ec 0c             	sub    esp,0xc
c00080da:	56                   	push   esi
c00080db:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080e3:	55                   	push   ebp
c00080e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080e8:	e8 1e 99 ff ff       	call   c0001a0b <disk_write>
c00080ed:	83 c4 20             	add    esp,0x20
c00080f0:	85 c0                	test   eax,eax
c00080f2:	0f 85 09 01 00 00    	jne    c0008201 <f_mkfs+0x10b1>
c00080f8:	31 d2                	xor    edx,edx
c00080fa:	b9 00 02 00 00       	mov    ecx,0x200
c00080ff:	89 e8                	mov    eax,ebp
c0008101:	e8 ce 99 ff ff       	call   c0001ad4 <mem_set>
c0008106:	31 d2                	xor    edx,edx
c0008108:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000810c:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008110:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008114:	75 b3                	jne    c00080c9 <f_mkfs+0xf79>
c0008116:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008119:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008120:	40                   	inc    eax
c0008121:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008125:	0f 87 65 ff ff ff    	ja     c0008090 <f_mkfs+0xf40>
c000812b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008130:	74 04                	je     c0008136 <f_mkfs+0xfe6>
c0008132:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008136:	89 fb                	mov    ebx,edi
c0008138:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000813c:	76 04                	jbe    c0008142 <f_mkfs+0xff2>
c000813e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008142:	83 ec 0c             	sub    esp,0xc
c0008145:	53                   	push   ebx
c0008146:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000814a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000814e:	55                   	push   ebp
c000814f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008153:	e8 b3 98 ff ff       	call   c0001a0b <disk_write>
c0008158:	83 c4 20             	add    esp,0x20
c000815b:	85 c0                	test   eax,eax
c000815d:	0f 85 9e 00 00 00    	jne    c0008201 <f_mkfs+0x10b1>
c0008163:	31 d2                	xor    edx,edx
c0008165:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008169:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000816d:	29 df                	sub    edi,ebx
c000816f:	75 c5                	jne    c0008136 <f_mkfs+0xfe6>
c0008171:	b1 0c                	mov    cl,0xc
c0008173:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008178:	74 1d                	je     c0008197 <f_mkfs+0x1047>
c000817a:	b8 ff ff 00 00       	mov    eax,0xffff
c000817f:	b1 06                	mov    cl,0x6
c0008181:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008185:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008189:	72 0c                	jb     c0008197 <f_mkfs+0x1047>
c000818b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008190:	0f 94 c1             	sete   cl
c0008193:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008197:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000819c:	75 4c                	jne    c00081ea <f_mkfs+0x109a>
c000819e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00081a2:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00081a6:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00081ad:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00081b4:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00081bf:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00081ca:	0f b6 c9             	movzx  ecx,cl
c00081cd:	83 ec 0c             	sub    esp,0xc
c00081d0:	55                   	push   ebp
c00081d1:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081dc:	e8 2f c2 ff ff       	call   c0004410 <create_partition>
c00081e1:	83 c4 10             	add    esp,0x10
c00081e4:	89 c3                	mov    ebx,eax
c00081e6:	85 c0                	test   eax,eax
c00081e8:	75 34                	jne    c000821e <f_mkfs+0x10ce>
c00081ea:	31 db                	xor    ebx,ebx
c00081ec:	50                   	push   eax
c00081ed:	6a 00                	push   0x0
c00081ef:	6a 00                	push   0x0
c00081f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081f5:	e8 27 98 ff ff       	call   c0001a21 <disk_ioctl>
c00081fa:	83 c4 10             	add    esp,0x10
c00081fd:	85 c0                	test   eax,eax
c00081ff:	74 1d                	je     c000821e <f_mkfs+0x10ce>
c0008201:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008209:	75 0c                	jne    c0008217 <f_mkfs+0x10c7>
c000820b:	83 ec 0c             	sub    esp,0xc
c000820e:	55                   	push   ebp
c000820f:	e8 75 00 00 00       	call   c0008289 <ff_memfree>
c0008214:	83 c4 10             	add    esp,0x10
c0008217:	bb 01 00 00 00       	mov    ebx,0x1
c000821c:	eb 48                	jmp    c0008266 <f_mkfs+0x1116>
c000821e:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008226:	75 3e                	jne    c0008266 <f_mkfs+0x1116>
c0008228:	83 ec 0c             	sub    esp,0xc
c000822b:	55                   	push   ebp
c000822c:	e8 58 00 00 00       	call   c0008289 <ff_memfree>
c0008231:	83 c4 10             	add    esp,0x10
c0008234:	eb 30                	jmp    c0008266 <f_mkfs+0x1116>
c0008236:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000823b:	0f 85 eb fa ff ff    	jne    c0007d2c <f_mkfs+0xbdc>
c0008241:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008245:	81 ff 80 00 00 00    	cmp    edi,0x80
c000824b:	0f 86 b8 f9 ff ff    	jbe    c0007c09 <f_mkfs+0xab9>
c0008251:	e9 bf fb ff ff       	jmp    c0007e15 <f_mkfs+0xcc5>
c0008256:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000825b:	0f 85 c0 fa ff ff    	jne    c0007d21 <f_mkfs+0xbd1>
c0008261:	e9 af fb ff ff       	jmp    c0007e15 <f_mkfs+0xcc5>
c0008266:	81 c4 9c 00 00 00    	add    esp,0x9c
c000826c:	89 d8                	mov    eax,ebx
c000826e:	5b                   	pop    ebx
c000826f:	5e                   	pop    esi
c0008270:	5f                   	pop    edi
c0008271:	5d                   	pop    ebp
c0008272:	c3                   	ret    

c0008273 <ff_memalloc>:
c0008273:	83 ec 0c             	sub    esp,0xc
c0008276:	83 ec 0c             	sub    esp,0xc
c0008279:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827d:	e8 82 3d 00 00       	call   c000c004 <malloc>
c0008282:	83 c4 10             	add    esp,0x10
c0008285:	83 c4 0c             	add    esp,0xc
c0008288:	c3                   	ret    

c0008289 <ff_memfree>:
c0008289:	83 ec 0c             	sub    esp,0xc
c000828c:	83 ec 0c             	sub    esp,0xc
c000828f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008293:	e8 7c 3d 00 00       	call   c000c014 <free>
c0008298:	83 c4 10             	add    esp,0x10
c000829b:	90                   	nop
c000829c:	83 c4 0c             	add    esp,0xc
c000829f:	c3                   	ret    

c00082a0 <ff_uni2oem>:
c00082a0:	83 ec 14             	sub    esp,0x14
c00082a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00082a7:	66 89 04 24          	mov    WORD PTR [esp],ax
c00082ab:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082b2:	c7 44 24 0c 00 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020500
c00082ba:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00082bf:	77 0b                	ja     c00082cc <ff_uni2oem+0x2c>
c00082c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00082c5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082ca:	eb 5b                	jmp    c0008327 <ff_uni2oem+0x87>
c00082cc:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082d4:	77 51                	ja     c0008327 <ff_uni2oem+0x87>
c00082d6:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082dc:	75 49                	jne    c0008327 <ff_uni2oem+0x87>
c00082de:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082e5:	eb 0b                	jmp    c00082f2 <ff_uni2oem+0x52>
c00082e7:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ec:	40                   	inc    eax
c00082ed:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082f2:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082f8:	77 1b                	ja     c0008315 <ff_uni2oem+0x75>
c00082fa:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082ff:	01 c0                	add    eax,eax
c0008301:	89 c2                	mov    edx,eax
c0008303:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008307:	01 d0                	add    eax,edx
c0008309:	66 8b 00             	mov    ax,WORD PTR [eax]
c000830c:	0f b7 c0             	movzx  eax,ax
c000830f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008313:	75 d2                	jne    c00082e7 <ff_uni2oem+0x47>
c0008315:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000831a:	83 e8 80             	sub    eax,0xffffff80
c000831d:	25 ff 00 00 00       	and    eax,0xff
c0008322:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008327:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000832c:	83 c4 14             	add    esp,0x14
c000832f:	c3                   	ret    

c0008330 <ff_oem2uni>:
c0008330:	83 ec 18             	sub    esp,0x18
c0008333:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008337:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000833b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008340:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008344:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000834b:	c7 44 24 10 00 05 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020500
c0008353:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008359:	77 0b                	ja     c0008366 <ff_oem2uni+0x36>
c000835b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000835f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008364:	eb 2d                	jmp    c0008393 <ff_oem2uni+0x63>
c0008366:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000836c:	75 25                	jne    c0008393 <ff_oem2uni+0x63>
c000836e:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008375:	77 1c                	ja     c0008393 <ff_oem2uni+0x63>
c0008377:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000837c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008381:	01 c0                	add    eax,eax
c0008383:	89 c2                	mov    edx,eax
c0008385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008389:	01 d0                	add    eax,edx
c000838b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000838e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008393:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008398:	83 c4 18             	add    esp,0x18
c000839b:	c3                   	ret    

c000839c <ff_wtoupper>:
c000839c:	83 ec 10             	sub    esp,0x10
c000839f:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00083a7:	0f 87 3e 01 00 00    	ja     c00084eb <ff_wtoupper+0x14f>
c00083ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083b1:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083b6:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00083bd:	77 07                	ja     c00083c6 <ff_wtoupper+0x2a>
c00083bf:	b8 00 03 02 c0       	mov    eax,0xc0020300
c00083c4:	eb 05                	jmp    c00083cb <ff_wtoupper+0x2f>
c00083c6:	b8 40 02 02 c0       	mov    eax,0xc0020240
c00083cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083d3:	8d 50 02             	lea    edx,[eax+0x2]
c00083d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083dd:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083e2:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083e8:	0f 84 f4 00 00 00    	je     c00084e2 <ff_wtoupper+0x146>
c00083ee:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083f3:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083f8:	0f 82 e4 00 00 00    	jb     c00084e2 <ff_wtoupper+0x146>
c00083fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008402:	8d 50 02             	lea    edx,[eax+0x2]
c0008405:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008409:	66 8b 00             	mov    ax,WORD PTR [eax]
c000840c:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008411:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008416:	66 c1 e8 08          	shr    ax,0x8
c000841a:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000841f:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008426:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000842b:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008430:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008435:	01 ca                	add    edx,ecx
c0008437:	39 d0                	cmp    eax,edx
c0008439:	0f 8d 86 00 00 00    	jge    c00084c5 <ff_wtoupper+0x129>
c000843f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008444:	83 f8 08             	cmp    eax,0x8
c0008447:	0f 87 94 00 00 00    	ja     c00084e1 <ff_wtoupper+0x145>
c000844d:	8b 04 85 00 02 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfe00]
c0008454:	ff e0                	jmp    eax
c0008456:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000845b:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008460:	29 c2                	sub    edx,eax
c0008462:	89 d0                	mov    eax,edx
c0008464:	01 c0                	add    eax,eax
c0008466:	89 c2                	mov    edx,eax
c0008468:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000846c:	01 d0                	add    eax,edx
c000846e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008471:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008476:	eb 4b                	jmp    c00084c3 <ff_wtoupper+0x127>
c0008478:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000847d:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008481:	83 e0 01             	and    eax,0x1
c0008484:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008489:	eb 38                	jmp    c00084c3 <ff_wtoupper+0x127>
c000848b:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008491:	eb 30                	jmp    c00084c3 <ff_wtoupper+0x127>
c0008493:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008499:	eb 28                	jmp    c00084c3 <ff_wtoupper+0x127>
c000849b:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00084a1:	eb 20                	jmp    c00084c3 <ff_wtoupper+0x127>
c00084a3:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00084a9:	eb 18                	jmp    c00084c3 <ff_wtoupper+0x127>
c00084ab:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00084b1:	eb 10                	jmp    c00084c3 <ff_wtoupper+0x127>
c00084b3:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00084b9:	eb 08                	jmp    c00084c3 <ff_wtoupper+0x127>
c00084bb:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084c2:	90                   	nop
c00084c3:	eb 1c                	jmp    c00084e1 <ff_wtoupper+0x145>
c00084c5:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084cb:	0f 85 fe fe ff ff    	jne    c00083cf <ff_wtoupper+0x33>
c00084d1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084d6:	01 c0                	add    eax,eax
c00084d8:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084dc:	e9 ee fe ff ff       	jmp    c00083cf <ff_wtoupper+0x33>
c00084e1:	90                   	nop
c00084e2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084e7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084ef:	83 c4 10             	add    esp,0x10
c00084f2:	c3                   	ret    

c00084f3 <is_bad_src_ratio>:
c00084f3:	83 ec 0c             	sub    esp,0xc
c00084f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00084fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008501:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008505:	dd 04 24             	fld    QWORD PTR [esp]
c0008508:	dd 05 c0 0a 02 c0    	fld    QWORD PTR ds:0xc0020ac0
c000850e:	de d9                	fcompp 
c0008510:	df e0                	fnstsw ax
c0008512:	f6 c4 45             	test   ah,0x45
c0008515:	74 10                	je     c0008527 <is_bad_src_ratio+0x34>
c0008517:	dd 04 24             	fld    QWORD PTR [esp]
c000851a:	dc 1d c8 0a 02 c0    	fcomp  QWORD PTR ds:0xc0020ac8
c0008520:	df e0                	fnstsw ax
c0008522:	f6 c4 45             	test   ah,0x45
c0008525:	75 07                	jne    c000852e <is_bad_src_ratio+0x3b>
c0008527:	b8 01 00 00 00       	mov    eax,0x1
c000852c:	eb 05                	jmp    c0008533 <is_bad_src_ratio+0x40>
c000852e:	b8 00 00 00 00       	mov    eax,0x0
c0008533:	83 c4 0c             	add    esp,0xc
c0008536:	c3                   	ret    

c0008537 <psrc_set_converter>:
c0008537:	56                   	push   esi
c0008538:	89 d6                	mov    esi,edx
c000853a:	53                   	push   ebx
c000853b:	89 c3                	mov    ebx,eax
c000853d:	83 ec 0c             	sub    esp,0xc
c0008540:	52                   	push   edx
c0008541:	50                   	push   eax
c0008542:	e8 33 24 00 00       	call   c000a97a <sinc_set_converter>
c0008547:	83 c4 10             	add    esp,0x10
c000854a:	85 c0                	test   eax,eax
c000854c:	74 25                	je     c0008573 <psrc_set_converter+0x3c>
c000854e:	50                   	push   eax
c000854f:	50                   	push   eax
c0008550:	56                   	push   esi
c0008551:	53                   	push   ebx
c0008552:	e8 32 28 00 00       	call   c000ad89 <zoh_set_converter>
c0008557:	83 c4 10             	add    esp,0x10
c000855a:	85 c0                	test   eax,eax
c000855c:	74 15                	je     c0008573 <psrc_set_converter+0x3c>
c000855e:	51                   	push   ecx
c000855f:	51                   	push   ecx
c0008560:	56                   	push   esi
c0008561:	53                   	push   ebx
c0008562:	e8 10 0a 00 00       	call   c0008f77 <linear_set_converter>
c0008567:	83 c4 10             	add    esp,0x10
c000856a:	ba 0a 00 00 00       	mov    edx,0xa
c000856f:	85 c0                	test   eax,eax
c0008571:	75 02                	jne    c0008575 <psrc_set_converter+0x3e>
c0008573:	31 d2                	xor    edx,edx
c0008575:	89 d0                	mov    eax,edx
c0008577:	5a                   	pop    edx
c0008578:	5b                   	pop    ebx
c0008579:	5e                   	pop    esi
c000857a:	c3                   	ret    

c000857b <src_delete>:
c000857b:	53                   	push   ebx
c000857c:	83 ec 08             	sub    esp,0x8
c000857f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008583:	85 db                	test   ebx,ebx
c0008585:	74 29                	je     c00085b0 <src_delete+0x35>
c0008587:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000858a:	85 c0                	test   eax,eax
c000858c:	74 0c                	je     c000859a <src_delete+0x1f>
c000858e:	83 ec 0c             	sub    esp,0xc
c0008591:	50                   	push   eax
c0008592:	e8 7d 3a 00 00       	call   c000c014 <free>
c0008597:	83 c4 10             	add    esp,0x10
c000859a:	50                   	push   eax
c000859b:	6a 3c                	push   0x3c
c000859d:	6a 00                	push   0x0
c000859f:	53                   	push   ebx
c00085a0:	e8 15 81 ff ff       	call   c00006ba <memset>
c00085a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00085a8:	e8 67 3a 00 00       	call   c000c014 <free>
c00085ad:	83 c4 10             	add    esp,0x10
c00085b0:	31 c0                	xor    eax,eax
c00085b2:	83 c4 08             	add    esp,0x8
c00085b5:	5b                   	pop    ebx
c00085b6:	c3                   	ret    

c00085b7 <src_process>:
c00085b7:	56                   	push   esi
c00085b8:	53                   	push   ebx
c00085b9:	53                   	push   ebx
c00085ba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00085be:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00085c2:	85 f6                	test   esi,esi
c00085c4:	0f 84 e2 00 00 00    	je     c00086ac <src_process+0xf5>
c00085ca:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00085ce:	0f 84 df 00 00 00    	je     c00086b3 <src_process+0xfc>
c00085d4:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c00085d8:	0f 84 d5 00 00 00    	je     c00086b3 <src_process+0xfc>
c00085de:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c00085e5:	0f 85 cf 00 00 00    	jne    c00086ba <src_process+0x103>
c00085eb:	85 db                	test   ebx,ebx
c00085ed:	0f 84 ce 00 00 00    	je     c00086c1 <src_process+0x10a>
c00085f3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00085f6:	0f 84 cc 00 00 00    	je     c00086c8 <src_process+0x111>
c00085fc:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c0008600:	0f 84 c2 00 00 00    	je     c00086c8 <src_process+0x111>
c0008606:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008609:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000860c:	e8 e2 fe ff ff       	call   c00084f3 <is_bad_src_ratio>
c0008611:	5a                   	pop    edx
c0008612:	85 c0                	test   eax,eax
c0008614:	59                   	pop    ecx
c0008615:	0f 85 b4 00 00 00    	jne    c00086cf <src_process+0x118>
c000861b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000861f:	79 07                	jns    c0008628 <src_process+0x71>
c0008621:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008628:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000862c:	79 07                	jns    c0008635 <src_process+0x7e>
c000862e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008635:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008637:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000863a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000863d:	39 ca                	cmp    edx,ecx
c000863f:	73 0b                	jae    c000864c <src_process+0x95>
c0008641:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008645:	8d 04 82             	lea    eax,[edx+eax*4]
c0008648:	39 c1                	cmp    ecx,eax
c000864a:	eb 09                	jmp    c0008655 <src_process+0x9e>
c000864c:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c0008650:	8d 04 81             	lea    eax,[ecx+eax*4]
c0008653:	39 c2                	cmp    edx,eax
c0008655:	72 7f                	jb     c00086d6 <src_process+0x11f>
c0008657:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000865e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008665:	d9 05 e0 0a 02 c0    	fld    DWORD PTR ds:0xc0020ae0
c000866b:	dc 1e                	fcomp  QWORD PTR [esi]
c000866d:	df e0                	fnstsw ax
c000866f:	9e                   	sahf   
c0008670:	76 05                	jbe    c0008677 <src_process+0xc0>
c0008672:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c0008675:	dd 1e                	fstp   QWORD PTR [esi]
c0008677:	83 ec 10             	sub    esp,0x10
c000867a:	dd 06                	fld    QWORD PTR [esi]
c000867c:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c000867f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008682:	e8 f9 6c 01 00       	call   c001f380 <fabs>
c0008687:	83 c4 10             	add    esp,0x10
c000868a:	dd 05 d0 0a 02 c0    	fld    QWORD PTR ds:0xc0020ad0
c0008690:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0008694:	de d9                	fcompp 
c0008696:	df e0                	fnstsw ax
c0008698:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000869c:	9e                   	sahf   
c000869d:	76 05                	jbe    c00086a4 <src_process+0xed>
c000869f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00086a2:	eb 03                	jmp    c00086a7 <src_process+0xf0>
c00086a4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00086a7:	59                   	pop    ecx
c00086a8:	5b                   	pop    ebx
c00086a9:	5e                   	pop    esi
c00086aa:	ff e0                	jmp    eax
c00086ac:	b8 02 00 00 00       	mov    eax,0x2
c00086b1:	eb 28                	jmp    c00086db <src_process+0x124>
c00086b3:	b8 07 00 00 00       	mov    eax,0x7
c00086b8:	eb 21                	jmp    c00086db <src_process+0x124>
c00086ba:	b8 12 00 00 00       	mov    eax,0x12
c00086bf:	eb 1a                	jmp    c00086db <src_process+0x124>
c00086c1:	b8 03 00 00 00       	mov    eax,0x3
c00086c6:	eb 13                	jmp    c00086db <src_process+0x124>
c00086c8:	b8 04 00 00 00       	mov    eax,0x4
c00086cd:	eb 0c                	jmp    c00086db <src_process+0x124>
c00086cf:	b8 06 00 00 00       	mov    eax,0x6
c00086d4:	eb 05                	jmp    c00086db <src_process+0x124>
c00086d6:	b8 10 00 00 00       	mov    eax,0x10
c00086db:	5a                   	pop    edx
c00086dc:	5b                   	pop    ebx
c00086dd:	5e                   	pop    esi
c00086de:	c3                   	ret    

c00086df <src_callback_read>:
c00086df:	55                   	push   ebp
c00086e0:	57                   	push   edi
c00086e1:	56                   	push   esi
c00086e2:	53                   	push   ebx
c00086e3:	83 ec 4c             	sub    esp,0x4c
c00086e6:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00086ea:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c00086ee:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00086f2:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00086f6:	85 ff                	test   edi,edi
c00086f8:	0f 8e 36 01 00 00    	jle    c0008834 <src_callback_read+0x155>
c00086fe:	85 db                	test   ebx,ebx
c0008700:	0f 84 2e 01 00 00    	je     c0008834 <src_callback_read+0x155>
c0008706:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000870d:	74 0c                	je     c000871b <src_callback_read+0x3c>
c000870f:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008716:	e9 19 01 00 00       	jmp    c0008834 <src_callback_read+0x155>
c000871b:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000871f:	75 0c                	jne    c000872d <src_callback_read+0x4e>
c0008721:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008728:	e9 07 01 00 00       	jmp    c0008834 <src_callback_read+0x155>
c000872d:	51                   	push   ecx
c000872e:	6a 24                	push   0x24
c0008730:	6a 00                	push   0x0
c0008732:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008736:	50                   	push   eax
c0008737:	e8 7e 7f ff ff       	call   c00006ba <memset>
c000873c:	5e                   	pop    esi
c000873d:	5d                   	pop    ebp
c000873e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008742:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008746:	e8 a8 fd ff ff       	call   c00084f3 <is_bad_src_ratio>
c000874b:	83 c4 10             	add    esp,0x10
c000874e:	85 c0                	test   eax,eax
c0008750:	74 0c                	je     c000875e <src_callback_read+0x7f>
c0008752:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008759:	e9 d6 00 00 00       	jmp    c0008834 <src_callback_read+0x155>
c000875e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0008762:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008766:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000876a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000876e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008771:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0008775:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008779:	31 f6                	xor    esi,esi
c000877b:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000877e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008782:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008787:	75 30                	jne    c00087b9 <src_callback_read+0xda>
c0008789:	8d 44 24 14          	lea    eax,[esp+0x14]
c000878d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008791:	52                   	push   edx
c0008792:	52                   	push   edx
c0008793:	8d 44 24 20          	lea    eax,[esp+0x20]
c0008797:	50                   	push   eax
c0008798:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000879b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c000879e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00087a2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00087a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00087aa:	83 c4 10             	add    esp,0x10
c00087ad:	85 c0                	test   eax,eax
c00087af:	75 08                	jne    c00087b9 <src_callback_read+0xda>
c00087b1:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00087b9:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087c0:	50                   	push   eax
c00087c1:	50                   	push   eax
c00087c2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00087c6:	50                   	push   eax
c00087c7:	53                   	push   ebx
c00087c8:	e8 ea fd ff ff       	call   c00085b7 <src_process>
c00087cd:	83 c4 10             	add    esp,0x10
c00087d0:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00087d7:	85 c0                	test   eax,eax
c00087d9:	75 42                	jne    c000881d <src_callback_read+0x13e>
c00087db:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00087df:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00087e2:	89 e9                	mov    ecx,ebp
c00087e4:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c00087e8:	0f af ca             	imul   ecx,edx
c00087eb:	c1 e1 02             	shl    ecx,0x2
c00087ee:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c00087f2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00087f6:	0f af d1             	imul   edx,ecx
c00087f9:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c00087fd:	c1 e2 02             	shl    edx,0x2
c0008800:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008804:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008807:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000880c:	75 04                	jne    c0008812 <src_callback_read+0x133>
c000880e:	85 c9                	test   ecx,ecx
c0008810:	74 0b                	je     c000881d <src_callback_read+0x13e>
c0008812:	39 d7                	cmp    edi,edx
c0008814:	7e 09                	jle    c000881f <src_callback_read+0x140>
c0008816:	89 d6                	mov    esi,edx
c0008818:	e9 65 ff ff ff       	jmp    c0008782 <src_callback_read+0xa3>
c000881d:	89 f2                	mov    edx,esi
c000881f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008823:	85 c0                	test   eax,eax
c0008825:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008828:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000882c:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000882f:	74 05                	je     c0008836 <src_callback_read+0x157>
c0008831:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008834:	31 d2                	xor    edx,edx
c0008836:	83 c4 4c             	add    esp,0x4c
c0008839:	89 d0                	mov    eax,edx
c000883b:	5b                   	pop    ebx
c000883c:	5e                   	pop    esi
c000883d:	5f                   	pop    edi
c000883e:	5d                   	pop    ebp
c000883f:	c3                   	ret    

c0008840 <src_set_ratio>:
c0008840:	53                   	push   ebx
c0008841:	b8 02 00 00 00       	mov    eax,0x2
c0008846:	83 ec 08             	sub    esp,0x8
c0008849:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000884d:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c0008851:	85 db                	test   ebx,ebx
c0008853:	74 33                	je     c0008888 <src_set_ratio+0x48>
c0008855:	b8 07 00 00 00       	mov    eax,0x7
c000885a:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c000885e:	74 2c                	je     c000888c <src_set_ratio+0x4c>
c0008860:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008864:	74 2a                	je     c0008890 <src_set_ratio+0x50>
c0008866:	50                   	push   eax
c0008867:	50                   	push   eax
c0008868:	dd 14 24             	fst    QWORD PTR [esp]
c000886b:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000886f:	e8 7f fc ff ff       	call   c00084f3 <is_bad_src_ratio>
c0008874:	5a                   	pop    edx
c0008875:	85 c0                	test   eax,eax
c0008877:	59                   	pop    ecx
c0008878:	75 07                	jne    c0008881 <src_set_ratio+0x41>
c000887a:	dd 04 24             	fld    QWORD PTR [esp]
c000887d:	dd 1b                	fstp   QWORD PTR [ebx]
c000887f:	eb 11                	jmp    c0008892 <src_set_ratio+0x52>
c0008881:	b8 06 00 00 00       	mov    eax,0x6
c0008886:	eb 0a                	jmp    c0008892 <src_set_ratio+0x52>
c0008888:	dd d8                	fstp   st(0)
c000888a:	eb 06                	jmp    c0008892 <src_set_ratio+0x52>
c000888c:	dd d8                	fstp   st(0)
c000888e:	eb 02                	jmp    c0008892 <src_set_ratio+0x52>
c0008890:	dd d8                	fstp   st(0)
c0008892:	83 c4 08             	add    esp,0x8
c0008895:	5b                   	pop    ebx
c0008896:	c3                   	ret    

c0008897 <src_get_channels>:
c0008897:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000889b:	b8 02 00 00 00       	mov    eax,0x2
c00088a0:	85 d2                	test   edx,edx
c00088a2:	74 14                	je     c00088b8 <src_get_channels+0x21>
c00088a4:	b8 07 00 00 00       	mov    eax,0x7
c00088a9:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088ad:	74 09                	je     c00088b8 <src_get_channels+0x21>
c00088af:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088b3:	74 03                	je     c00088b8 <src_get_channels+0x21>
c00088b5:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088b8:	c3                   	ret    

c00088b9 <src_reset>:
c00088b9:	53                   	push   ebx
c00088ba:	b8 02 00 00 00       	mov    eax,0x2
c00088bf:	83 ec 08             	sub    esp,0x8
c00088c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088c6:	85 db                	test   ebx,ebx
c00088c8:	74 2e                	je     c00088f8 <src_reset+0x3f>
c00088ca:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00088cd:	85 c0                	test   eax,eax
c00088cf:	74 09                	je     c00088da <src_reset+0x21>
c00088d1:	83 ec 0c             	sub    esp,0xc
c00088d4:	53                   	push   ebx
c00088d5:	ff d0                	call   eax
c00088d7:	83 c4 10             	add    esp,0x10
c00088da:	d9 ee                	fldz   
c00088dc:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00088e3:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c00088e6:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00088ed:	dd 1b                	fstp   QWORD PTR [ebx]
c00088ef:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00088f6:	31 c0                	xor    eax,eax
c00088f8:	83 c4 08             	add    esp,0x8
c00088fb:	5b                   	pop    ebx
c00088fc:	c3                   	ret    

c00088fd <src_new>:
c00088fd:	57                   	push   edi
c00088fe:	56                   	push   esi
c00088ff:	53                   	push   ebx
c0008900:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008904:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008908:	85 f6                	test   esi,esi
c000890a:	74 73                	je     c000897f <src_new+0x82>
c000890c:	85 ff                	test   edi,edi
c000890e:	7f 08                	jg     c0008918 <src_new+0x1b>
c0008910:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008916:	eb 1e                	jmp    c0008936 <src_new+0x39>
c0008918:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c000891e:	50                   	push   eax
c000891f:	50                   	push   eax
c0008920:	6a 3c                	push   0x3c
c0008922:	6a 01                	push   0x1
c0008924:	e8 0b 37 00 00       	call   c000c034 <calloc>
c0008929:	83 c4 10             	add    esp,0x10
c000892c:	89 c3                	mov    ebx,eax
c000892e:	85 c0                	test   eax,eax
c0008930:	75 10                	jne    c0008942 <src_new+0x45>
c0008932:	85 f6                	test   esi,esi
c0008934:	75 04                	jne    c000893a <src_new+0x3d>
c0008936:	31 db                	xor    ebx,ebx
c0008938:	eb 4b                	jmp    c0008985 <src_new+0x88>
c000893a:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008940:	eb 43                	jmp    c0008985 <src_new+0x88>
c0008942:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008945:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000894c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008950:	e8 e2 fb ff ff       	call   c0008537 <psrc_set_converter>
c0008955:	85 c0                	test   eax,eax
c0008957:	74 18                	je     c0008971 <src_new+0x74>
c0008959:	85 f6                	test   esi,esi
c000895b:	74 06                	je     c0008963 <src_new+0x66>
c000895d:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008963:	83 ec 0c             	sub    esp,0xc
c0008966:	53                   	push   ebx
c0008967:	31 db                	xor    ebx,ebx
c0008969:	e8 a6 36 00 00       	call   c000c014 <free>
c000896e:	83 c4 10             	add    esp,0x10
c0008971:	83 ec 0c             	sub    esp,0xc
c0008974:	53                   	push   ebx
c0008975:	e8 3f ff ff ff       	call   c00088b9 <src_reset>
c000897a:	83 c4 10             	add    esp,0x10
c000897d:	eb 06                	jmp    c0008985 <src_new+0x88>
c000897f:	85 ff                	test   edi,edi
c0008981:	7f 9b                	jg     c000891e <src_new+0x21>
c0008983:	eb b1                	jmp    c0008936 <src_new+0x39>
c0008985:	89 d8                	mov    eax,ebx
c0008987:	5b                   	pop    ebx
c0008988:	5e                   	pop    esi
c0008989:	5f                   	pop    edi
c000898a:	c3                   	ret    

c000898b <src_callback_new>:
c000898b:	56                   	push   esi
c000898c:	53                   	push   ebx
c000898d:	53                   	push   ebx
c000898e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008992:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008996:	85 f6                	test   esi,esi
c0008998:	75 0e                	jne    c00089a8 <src_callback_new+0x1d>
c000899a:	31 db                	xor    ebx,ebx
c000899c:	85 c0                	test   eax,eax
c000899e:	74 47                	je     c00089e7 <src_callback_new+0x5c>
c00089a0:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089a6:	eb 3f                	jmp    c00089e7 <src_callback_new+0x5c>
c00089a8:	85 c0                	test   eax,eax
c00089aa:	74 06                	je     c00089b2 <src_callback_new+0x27>
c00089ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00089b2:	51                   	push   ecx
c00089b3:	50                   	push   eax
c00089b4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089bc:	e8 3c ff ff ff       	call   c00088fd <src_new>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	89 c3                	mov    ebx,eax
c00089c6:	85 c0                	test   eax,eax
c00089c8:	74 1d                	je     c00089e7 <src_callback_new+0x5c>
c00089ca:	83 ec 0c             	sub    esp,0xc
c00089cd:	50                   	push   eax
c00089ce:	e8 e6 fe ff ff       	call   c00088b9 <src_reset>
c00089d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089d7:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00089de:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00089e1:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00089e4:	83 c4 10             	add    esp,0x10
c00089e7:	89 d8                	mov    eax,ebx
c00089e9:	5a                   	pop    edx
c00089ea:	5b                   	pop    ebx
c00089eb:	5e                   	pop    esi
c00089ec:	c3                   	ret    

c00089ed <src_get_name>:
c00089ed:	53                   	push   ebx
c00089ee:	83 ec 14             	sub    esp,0x14
c00089f1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00089f5:	53                   	push   ebx
c00089f6:	e8 59 1f 00 00       	call   c000a954 <sinc_get_name>
c00089fb:	83 c4 10             	add    esp,0x10
c00089fe:	85 c0                	test   eax,eax
c0008a00:	75 1d                	jne    c0008a1f <src_get_name+0x32>
c0008a02:	83 ec 0c             	sub    esp,0xc
c0008a05:	53                   	push   ebx
c0008a06:	e8 60 23 00 00       	call   c000ad6b <zoh_get_name>
c0008a0b:	83 c4 10             	add    esp,0x10
c0008a0e:	85 c0                	test   eax,eax
c0008a10:	75 0d                	jne    c0008a1f <src_get_name+0x32>
c0008a12:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a16:	83 c4 08             	add    esp,0x8
c0008a19:	5b                   	pop    ebx
c0008a1a:	e9 3a 05 00 00       	jmp    c0008f59 <linear_get_name>
c0008a1f:	83 c4 08             	add    esp,0x8
c0008a22:	5b                   	pop    ebx
c0008a23:	c3                   	ret    

c0008a24 <src_get_description>:
c0008a24:	53                   	push   ebx
c0008a25:	83 ec 14             	sub    esp,0x14
c0008a28:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a2c:	53                   	push   ebx
c0008a2d:	e8 35 1f 00 00       	call   c000a967 <sinc_get_description>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	85 c0                	test   eax,eax
c0008a37:	75 1d                	jne    c0008a56 <src_get_description+0x32>
c0008a39:	83 ec 0c             	sub    esp,0xc
c0008a3c:	53                   	push   ebx
c0008a3d:	e8 38 23 00 00       	call   c000ad7a <zoh_get_description>
c0008a42:	83 c4 10             	add    esp,0x10
c0008a45:	85 c0                	test   eax,eax
c0008a47:	75 0d                	jne    c0008a56 <src_get_description+0x32>
c0008a49:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a4d:	83 c4 08             	add    esp,0x8
c0008a50:	5b                   	pop    ebx
c0008a51:	e9 12 05 00 00       	jmp    c0008f68 <linear_get_description>
c0008a56:	83 c4 08             	add    esp,0x8
c0008a59:	5b                   	pop    ebx
c0008a5a:	c3                   	ret    

c0008a5b <src_get_version>:
c0008a5b:	b8 00 06 02 c0       	mov    eax,0xc0020600
c0008a60:	c3                   	ret    

c0008a61 <src_is_valid_ratio>:
c0008a61:	50                   	push   eax
c0008a62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a66:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a6a:	e8 84 fa ff ff       	call   c00084f3 <is_bad_src_ratio>
c0008a6f:	85 c0                	test   eax,eax
c0008a71:	0f 94 c0             	sete   al
c0008a74:	83 c4 0c             	add    esp,0xc
c0008a77:	0f b6 c0             	movzx  eax,al
c0008a7a:	c3                   	ret    

c0008a7b <src_error>:
c0008a7b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a7f:	31 c0                	xor    eax,eax
c0008a81:	85 d2                	test   edx,edx
c0008a83:	74 03                	je     c0008a88 <src_error+0xd>
c0008a85:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008a88:	c3                   	ret    

c0008a89 <src_strerror>:
c0008a89:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a8d:	31 c0                	xor    eax,eax
c0008a8f:	83 fa 17             	cmp    edx,0x17
c0008a92:	77 07                	ja     c0008a9b <src_strerror+0x12>
c0008a94:	8b 04 95 60 0a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf5a0]
c0008a9b:	c3                   	ret    

c0008a9c <src_simple>:
c0008a9c:	56                   	push   esi
c0008a9d:	53                   	push   ebx
c0008a9e:	83 ec 18             	sub    esp,0x18
c0008aa1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008aa5:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008aa9:	50                   	push   eax
c0008aaa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008aae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008ab2:	e8 46 fe ff ff       	call   c00088fd <src_new>
c0008ab7:	83 c4 10             	add    esp,0x10
c0008aba:	85 c0                	test   eax,eax
c0008abc:	75 06                	jne    c0008ac4 <src_simple+0x28>
c0008abe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008ac2:	eb 25                	jmp    c0008ae9 <src_simple+0x4d>
c0008ac4:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008acb:	89 c3                	mov    ebx,eax
c0008acd:	50                   	push   eax
c0008ace:	50                   	push   eax
c0008acf:	56                   	push   esi
c0008ad0:	53                   	push   ebx
c0008ad1:	e8 e1 fa ff ff       	call   c00085b7 <src_process>
c0008ad6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008ad9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008add:	e8 99 fa ff ff       	call   c000857b <src_delete>
c0008ae2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ae6:	83 c4 10             	add    esp,0x10
c0008ae9:	83 c4 14             	add    esp,0x14
c0008aec:	5b                   	pop    ebx
c0008aed:	5e                   	pop    esi
c0008aee:	c3                   	ret    

c0008aef <src_short_to_float_array>:
c0008aef:	83 ec 0c             	sub    esp,0xc
c0008af2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008af6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008afa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008afe:	85 c0                	test   eax,eax
c0008b00:	74 0f                	je     c0008b11 <src_short_to_float_array+0x22>
c0008b02:	48                   	dec    eax
c0008b03:	d9 05 e4 0a 02 c0    	fld    DWORD PTR ds:0xc0020ae4
c0008b09:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008b0c:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008b0f:	eb ed                	jmp    c0008afe <src_short_to_float_array+0xf>
c0008b11:	83 c4 0c             	add    esp,0xc
c0008b14:	c3                   	ret    

c0008b15 <src_float_to_short_array>:
c0008b15:	56                   	push   esi
c0008b16:	53                   	push   ebx
c0008b17:	52                   	push   edx
c0008b18:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b1c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b20:	85 db                	test   ebx,ebx
c0008b22:	74 51                	je     c0008b75 <src_float_to_short_array+0x60>
c0008b24:	4b                   	dec    ebx
c0008b25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b29:	d9 05 e8 0a 02 c0    	fld    DWORD PTR ds:0xc0020ae8
c0008b2f:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b32:	dc 15 d8 0a 02 c0    	fcom   QWORD PTR ds:0xc0020ad8
c0008b38:	df e0                	fnstsw ax
c0008b3a:	9e                   	sahf   
c0008b3b:	72 0a                	jb     c0008b47 <src_float_to_short_array+0x32>
c0008b3d:	dd d8                	fstp   st(0)
c0008b3f:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008b45:	eb d9                	jmp    c0008b20 <src_float_to_short_array+0xb>
c0008b47:	d9 05 ec 0a 02 c0    	fld    DWORD PTR ds:0xc0020aec
c0008b4d:	d8 d9                	fcomp  st(1)
c0008b4f:	df e0                	fnstsw ax
c0008b51:	9e                   	sahf   
c0008b52:	72 0a                	jb     c0008b5e <src_float_to_short_array+0x49>
c0008b54:	dd d8                	fstp   st(0)
c0008b56:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008b5c:	eb c2                	jmp    c0008b20 <src_float_to_short_array+0xb>
c0008b5e:	83 ec 10             	sub    esp,0x10
c0008b61:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b64:	e8 37 68 01 00       	call   c001f3a0 <lrint>
c0008b69:	83 c4 10             	add    esp,0x10
c0008b6c:	c1 f8 10             	sar    eax,0x10
c0008b6f:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008b73:	eb ab                	jmp    c0008b20 <src_float_to_short_array+0xb>
c0008b75:	58                   	pop    eax
c0008b76:	5b                   	pop    ebx
c0008b77:	5e                   	pop    esi
c0008b78:	c3                   	ret    

c0008b79 <src_int_to_float_array>:
c0008b79:	83 ec 0c             	sub    esp,0xc
c0008b7c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008b80:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008b84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008b88:	85 c0                	test   eax,eax
c0008b8a:	74 0f                	je     c0008b9b <src_int_to_float_array+0x22>
c0008b8c:	48                   	dec    eax
c0008b8d:	d9 05 f0 0a 02 c0    	fld    DWORD PTR ds:0xc0020af0
c0008b93:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008b96:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008b99:	eb ed                	jmp    c0008b88 <src_int_to_float_array+0xf>
c0008b9b:	83 c4 0c             	add    esp,0xc
c0008b9e:	c3                   	ret    

c0008b9f <src_float_to_int_array>:
c0008b9f:	56                   	push   esi
c0008ba0:	53                   	push   ebx
c0008ba1:	52                   	push   edx
c0008ba2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ba6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008baa:	85 db                	test   ebx,ebx
c0008bac:	74 4f                	je     c0008bfd <src_float_to_int_array+0x5e>
c0008bae:	4b                   	dec    ebx
c0008baf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bb3:	d9 05 e8 0a 02 c0    	fld    DWORD PTR ds:0xc0020ae8
c0008bb9:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008bbc:	dc 15 d8 0a 02 c0    	fcom   QWORD PTR ds:0xc0020ad8
c0008bc2:	df e0                	fnstsw ax
c0008bc4:	9e                   	sahf   
c0008bc5:	72 0b                	jb     c0008bd2 <src_float_to_int_array+0x33>
c0008bc7:	dd d8                	fstp   st(0)
c0008bc9:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008bd0:	eb d8                	jmp    c0008baa <src_float_to_int_array+0xb>
c0008bd2:	d9 05 ec 0a 02 c0    	fld    DWORD PTR ds:0xc0020aec
c0008bd8:	d8 d9                	fcomp  st(1)
c0008bda:	df e0                	fnstsw ax
c0008bdc:	9e                   	sahf   
c0008bdd:	72 0b                	jb     c0008bea <src_float_to_int_array+0x4b>
c0008bdf:	dd d8                	fstp   st(0)
c0008be1:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008be8:	eb c0                	jmp    c0008baa <src_float_to_int_array+0xb>
c0008bea:	83 ec 10             	sub    esp,0x10
c0008bed:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008bf0:	e8 ab 67 01 00       	call   c001f3a0 <lrint>
c0008bf5:	83 c4 10             	add    esp,0x10
c0008bf8:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008bfb:	eb ad                	jmp    c0008baa <src_float_to_int_array+0xb>
c0008bfd:	58                   	pop    eax
c0008bfe:	5b                   	pop    ebx
c0008bff:	5e                   	pop    esi
c0008c00:	c3                   	ret    

c0008c01 <is_bad_src_ratio>:
c0008c01:	83 ec 0c             	sub    esp,0xc
c0008c04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c08:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c0f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c13:	dd 04 24             	fld    QWORD PTR [esp]
c0008c16:	dd 05 c0 0a 02 c0    	fld    QWORD PTR ds:0xc0020ac0
c0008c1c:	de d9                	fcompp 
c0008c1e:	df e0                	fnstsw ax
c0008c20:	f6 c4 45             	test   ah,0x45
c0008c23:	74 10                	je     c0008c35 <is_bad_src_ratio+0x34>
c0008c25:	dd 04 24             	fld    QWORD PTR [esp]
c0008c28:	dc 1d c8 0a 02 c0    	fcomp  QWORD PTR ds:0xc0020ac8
c0008c2e:	df e0                	fnstsw ax
c0008c30:	f6 c4 45             	test   ah,0x45
c0008c33:	75 07                	jne    c0008c3c <is_bad_src_ratio+0x3b>
c0008c35:	b8 01 00 00 00       	mov    eax,0x1
c0008c3a:	eb 05                	jmp    c0008c41 <is_bad_src_ratio+0x40>
c0008c3c:	b8 00 00 00 00       	mov    eax,0x0
c0008c41:	83 c4 0c             	add    esp,0xc
c0008c44:	c3                   	ret    

c0008c45 <fmod_one>:
c0008c45:	83 ec 2c             	sub    esp,0x2c
c0008c48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008c54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008c58:	83 ec 08             	sub    esp,0x8
c0008c5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c63:	e8 38 67 01 00       	call   c001f3a0 <lrint>
c0008c68:	83 c4 10             	add    esp,0x10
c0008c6b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c6f:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008c73:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008c77:	de e1                	fsubrp st(1),st
c0008c79:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008c7d:	d9 ee                	fldz   
c0008c7f:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008c83:	df e0                	fnstsw ax
c0008c85:	f6 c4 45             	test   ah,0x45
c0008c88:	75 0a                	jne    c0008c94 <fmod_one+0x4f>
c0008c8a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c8e:	d9 e8                	fld1   
c0008c90:	de c1                	faddp  st(1),st
c0008c92:	eb 04                	jmp    c0008c98 <fmod_one+0x53>
c0008c94:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c98:	83 c4 2c             	add    esp,0x2c
c0008c9b:	c3                   	ret    

c0008c9c <linear_vari_process>:
c0008c9c:	55                   	push   ebp
c0008c9d:	57                   	push   edi
c0008c9e:	56                   	push   esi
c0008c9f:	53                   	push   ebx
c0008ca0:	83 ec 2c             	sub    esp,0x2c
c0008ca3:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008ca7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008cab:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008cb3:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008cb7:	0f 8e 5e 02 00 00    	jle    c0008f1b <linear_vari_process+0x27f>
c0008cbd:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008cc0:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008cc8:	85 db                	test   ebx,ebx
c0008cca:	0f 84 4b 02 00 00    	je     c0008f1b <linear_vari_process+0x27f>
c0008cd0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008cd3:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008cd7:	74 19                	je     c0008cf2 <linear_vari_process+0x56>
c0008cd9:	31 d2                	xor    edx,edx
c0008cdb:	39 c2                	cmp    edx,eax
c0008cdd:	7d 0c                	jge    c0008ceb <linear_vari_process+0x4f>
c0008cdf:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008ce1:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008ce4:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008ce8:	42                   	inc    edx
c0008ce9:	eb f0                	jmp    c0008cdb <linear_vari_process+0x3f>
c0008ceb:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008cf2:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008cf5:	0f af d0             	imul   edx,eax
c0008cf8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008cfb:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008cff:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008d06:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008d09:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008d10:	dd 07                	fld    QWORD PTR [edi]
c0008d12:	dd 14 24             	fst    QWORD PTR [esp]
c0008d15:	50                   	push   eax
c0008d16:	50                   	push   eax
c0008d17:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d1a:	e8 e2 fe ff ff       	call   c0008c01 <is_bad_src_ratio>
c0008d1f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008d23:	5a                   	pop    edx
c0008d24:	59                   	pop    ecx
c0008d25:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008d2a:	0f 85 e3 01 00 00    	jne    c0008f13 <linear_vari_process+0x277>
c0008d30:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008d33:	d9 e8                	fld1   
c0008d35:	d8 d1                	fcom   st(1)
c0008d37:	df e0                	fnstsw ax
c0008d39:	9e                   	sahf   
c0008d3a:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008d3e:	0f 86 99 00 00 00    	jbe    c0008ddd <linear_vari_process+0x141>
c0008d44:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008d47:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008d4a:	0f 8d 8d 00 00 00    	jge    c0008ddd <linear_vari_process+0x141>
c0008d50:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d54:	d8 c1                	fadd   st,st(1)
c0008d56:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d59:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008d5c:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008d5f:	df e0                	fnstsw ax
c0008d61:	9e                   	sahf   
c0008d62:	73 79                	jae    c0008ddd <linear_vari_process+0x141>
c0008d64:	85 d2                	test   edx,edx
c0008d66:	7e 38                	jle    c0008da0 <linear_vari_process+0x104>
c0008d68:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d6c:	83 ec 10             	sub    esp,0x10
c0008d6f:	dd 07                	fld    QWORD PTR [edi]
c0008d71:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d74:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d77:	e8 04 66 01 00       	call   c001f380 <fabs>
c0008d7c:	83 c4 10             	add    esp,0x10
c0008d7f:	dc 1d 38 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020b38
c0008d85:	df e0                	fnstsw ax
c0008d87:	9e                   	sahf   
c0008d88:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d8c:	76 12                	jbe    c0008da0 <linear_vari_process+0x104>
c0008d8e:	dd 07                	fld    QWORD PTR [edi]
c0008d90:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008d93:	d8 e1                	fsub   st,st(1)
c0008d95:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008d98:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008d9b:	de c1                	faddp  st(1),st
c0008d9d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008da0:	31 c0                	xor    eax,eax
c0008da2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008da5:	7e 1f                	jle    c0008dc6 <linear_vari_process+0x12a>
c0008da7:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008dab:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008dad:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008db0:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008db4:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008db7:	d8 e1                	fsub   st,st(1)
c0008db9:	40                   	inc    eax
c0008dba:	d8 ca                	fmul   st,st(2)
c0008dbc:	de c1                	faddp  st(1),st
c0008dbe:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008dc1:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008dc4:	eb dc                	jmp    c0008da2 <linear_vari_process+0x106>
c0008dc6:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008dca:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008dcd:	de c1                	faddp  st(1),st
c0008dcf:	e9 5f ff ff ff       	jmp    c0008d33 <linear_vari_process+0x97>
c0008dd4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008dd8:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008ddb:	de c1                	faddp  st(1),st
c0008ddd:	83 ec 10             	sub    esp,0x10
c0008de0:	dd 14 24             	fst    QWORD PTR [esp]
c0008de3:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008de7:	e8 59 fe ff ff       	call   c0008c45 <fmod_one>
c0008dec:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008def:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008df3:	d8 e1                	fsub   st,st(1)
c0008df5:	d9 c9                	fxch   st(1)
c0008df7:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008dfb:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dfe:	e8 9d 65 01 00       	call   c001f3a0 <lrint>
c0008e03:	83 c4 10             	add    esp,0x10
c0008e06:	0f af e8             	imul   ebp,eax
c0008e09:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008e0d:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008e10:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008e13:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008e16:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008e19:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008e1c:	0f 8d 97 00 00 00    	jge    c0008eb9 <linear_vari_process+0x21d>
c0008e22:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008e26:	d9 c0                	fld    st(0)
c0008e28:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008e2b:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008e2f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e33:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008e37:	de d9                	fcompp 
c0008e39:	df e0                	fnstsw ax
c0008e3b:	9e                   	sahf   
c0008e3c:	76 7b                	jbe    c0008eb9 <linear_vari_process+0x21d>
c0008e3e:	85 ed                	test   ebp,ebp
c0008e40:	7e 38                	jle    c0008e7a <linear_vari_process+0x1de>
c0008e42:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008e46:	83 ec 10             	sub    esp,0x10
c0008e49:	dd 07                	fld    QWORD PTR [edi]
c0008e4b:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008e4e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e51:	e8 2a 65 01 00       	call   c001f380 <fabs>
c0008e56:	83 c4 10             	add    esp,0x10
c0008e59:	dc 1d 38 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020b38
c0008e5f:	df e0                	fnstsw ax
c0008e61:	9e                   	sahf   
c0008e62:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008e66:	76 12                	jbe    c0008e7a <linear_vari_process+0x1de>
c0008e68:	dd 07                	fld    QWORD PTR [edi]
c0008e6a:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008e6d:	d8 e1                	fsub   st,st(1)
c0008e6f:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008e72:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008e75:	de c1                	faddp  st(1),st
c0008e77:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e7a:	31 c0                	xor    eax,eax
c0008e7c:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008e7f:	39 c2                	cmp    edx,eax
c0008e81:	0f 8e 4d ff ff ff    	jle    c0008dd4 <linear_vari_process+0x138>
c0008e87:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008e8c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e90:	89 e9                	mov    ecx,ebp
c0008e92:	01 c5                	add    ebp,eax
c0008e94:	29 d1                	sub    ecx,edx
c0008e96:	89 ca                	mov    edx,ecx
c0008e98:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008e9c:	01 c2                	add    edx,eax
c0008e9e:	40                   	inc    eax
c0008e9f:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008ea2:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008ea5:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008ea8:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008eab:	d8 e1                	fsub   st,st(1)
c0008ead:	d8 ca                	fmul   st,st(2)
c0008eaf:	de c1                	faddp  st(1),st
c0008eb1:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008eb4:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008eb7:	eb c3                	jmp    c0008e7c <linear_vari_process+0x1e0>
c0008eb9:	39 d1                	cmp    ecx,edx
c0008ebb:	7d 13                	jge    c0008ed0 <linear_vari_process+0x234>
c0008ebd:	89 d0                	mov    eax,edx
c0008ebf:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008ec2:	29 c8                	sub    eax,ecx
c0008ec4:	99                   	cdq    
c0008ec5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ec8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ecc:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008ed0:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008ed3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008ed6:	85 c0                	test   eax,eax
c0008ed8:	7f 1b                	jg     c0008ef5 <linear_vari_process+0x259>
c0008eda:	dd 04 24             	fld    QWORD PTR [esp]
c0008edd:	dd 1f                	fstp   QWORD PTR [edi]
c0008edf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008ee2:	99                   	cdq    
c0008ee3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ee6:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008ee9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008eec:	99                   	cdq    
c0008eed:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ef0:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008ef3:	eb 26                	jmp    c0008f1b <linear_vari_process+0x27f>
c0008ef5:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008ef8:	31 d2                	xor    edx,edx
c0008efa:	29 c8                	sub    eax,ecx
c0008efc:	c1 e0 02             	shl    eax,0x2
c0008eff:	39 d1                	cmp    ecx,edx
c0008f01:	7e d7                	jle    c0008eda <linear_vari_process+0x23e>
c0008f03:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008f05:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008f09:	83 c0 04             	add    eax,0x4
c0008f0c:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008f10:	42                   	inc    edx
c0008f11:	eb ec                	jmp    c0008eff <linear_vari_process+0x263>
c0008f13:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008f1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008f1f:	83 c4 2c             	add    esp,0x2c
c0008f22:	5b                   	pop    ebx
c0008f23:	5e                   	pop    esi
c0008f24:	5f                   	pop    edi
c0008f25:	5d                   	pop    ebp
c0008f26:	c3                   	ret    

c0008f27 <linear_reset>:
c0008f27:	83 ec 0c             	sub    esp,0xc
c0008f2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008f2e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008f31:	85 c0                	test   eax,eax
c0008f33:	74 20                	je     c0008f55 <linear_reset+0x2e>
c0008f35:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008f38:	83 c0 1c             	add    eax,0x1c
c0008f3b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0008f3e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0008f45:	c1 e2 02             	shl    edx,0x2
c0008f48:	51                   	push   ecx
c0008f49:	52                   	push   edx
c0008f4a:	6a 00                	push   0x0
c0008f4c:	50                   	push   eax
c0008f4d:	e8 68 77 ff ff       	call   c00006ba <memset>
c0008f52:	83 c4 10             	add    esp,0x10
c0008f55:	83 c4 0c             	add    esp,0xc
c0008f58:	c3                   	ret    

c0008f59 <linear_get_name>:
c0008f59:	31 c0                	xor    eax,eax
c0008f5b:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f60:	75 05                	jne    c0008f67 <linear_get_name+0xe>
c0008f62:	b8 f4 0a 02 c0       	mov    eax,0xc0020af4
c0008f67:	c3                   	ret    

c0008f68 <linear_get_description>:
c0008f68:	31 c0                	xor    eax,eax
c0008f6a:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f6f:	75 05                	jne    c0008f76 <linear_get_description+0xe>
c0008f71:	b8 08 0b 02 c0       	mov    eax,0xc0020b08
c0008f76:	c3                   	ret    

c0008f77 <linear_set_converter>:
c0008f77:	53                   	push   ebx
c0008f78:	b8 0a 00 00 00       	mov    eax,0xa
c0008f7d:	83 ec 08             	sub    esp,0x8
c0008f80:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008f84:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008f89:	75 6e                	jne    c0008ff9 <linear_set_converter+0x82>
c0008f8b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008f8e:	85 c0                	test   eax,eax
c0008f90:	74 13                	je     c0008fa5 <linear_set_converter+0x2e>
c0008f92:	83 ec 0c             	sub    esp,0xc
c0008f95:	50                   	push   eax
c0008f96:	e8 79 30 00 00       	call   c000c014 <free>
c0008f9b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	50                   	push   eax
c0008fa6:	50                   	push   eax
c0008fa7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008faa:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008fb1:	50                   	push   eax
c0008fb2:	6a 01                	push   0x1
c0008fb4:	e8 7b 30 00 00       	call   c000c034 <calloc>
c0008fb9:	83 c4 10             	add    esp,0x10
c0008fbc:	89 c2                	mov    edx,eax
c0008fbe:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008fc1:	85 d2                	test   edx,edx
c0008fc3:	b8 01 00 00 00       	mov    eax,0x1
c0008fc8:	74 2f                	je     c0008ff9 <linear_set_converter+0x82>
c0008fca:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008fcd:	83 ec 0c             	sub    esp,0xc
c0008fd0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008fd3:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008fd9:	c7 43 24 9c 8c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008c9c
c0008fe0:	c7 43 20 9c 8c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008c9c
c0008fe7:	c7 43 28 27 8f 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008f27
c0008fee:	53                   	push   ebx
c0008fef:	e8 33 ff ff ff       	call   c0008f27 <linear_reset>
c0008ff4:	83 c4 10             	add    esp,0x10
c0008ff7:	31 c0                	xor    eax,eax
c0008ff9:	83 c4 08             	add    esp,0x8
c0008ffc:	5b                   	pop    ebx
c0008ffd:	c3                   	ret    

c0008ffe <is_bad_src_ratio>:
c0008ffe:	83 ec 0c             	sub    esp,0xc
c0009001:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009005:	89 04 24             	mov    DWORD PTR [esp],eax
c0009008:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000900c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009010:	dd 04 24             	fld    QWORD PTR [esp]
c0009013:	dd 05 c0 0a 02 c0    	fld    QWORD PTR ds:0xc0020ac0
c0009019:	de d9                	fcompp 
c000901b:	df e0                	fnstsw ax
c000901d:	f6 c4 45             	test   ah,0x45
c0009020:	74 10                	je     c0009032 <is_bad_src_ratio+0x34>
c0009022:	dd 04 24             	fld    QWORD PTR [esp]
c0009025:	dc 1d c8 0a 02 c0    	fcomp  QWORD PTR ds:0xc0020ac8
c000902b:	df e0                	fnstsw ax
c000902d:	f6 c4 45             	test   ah,0x45
c0009030:	75 07                	jne    c0009039 <is_bad_src_ratio+0x3b>
c0009032:	b8 01 00 00 00       	mov    eax,0x1
c0009037:	eb 05                	jmp    c000903e <is_bad_src_ratio+0x40>
c0009039:	b8 00 00 00 00       	mov    eax,0x0
c000903e:	83 c4 0c             	add    esp,0xc
c0009041:	c3                   	ret    

c0009042 <int_to_fp>:
c0009042:	c1 e0 0c             	shl    eax,0xc
c0009045:	c3                   	ret    

c0009046 <fp_to_int>:
c0009046:	c1 f8 0c             	sar    eax,0xc
c0009049:	c3                   	ret    

c000904a <fp_fraction_part>:
c000904a:	25 ff 0f 00 00       	and    eax,0xfff
c000904f:	c3                   	ret    

c0009050 <fp_to_double>:
c0009050:	83 ec 0c             	sub    esp,0xc
c0009053:	e8 f2 ff ff ff       	call   c000904a <fp_fraction_part>
c0009058:	d9 05 c8 0c 02 c0    	fld    DWORD PTR ds:0xc0020cc8
c000905e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009062:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0009066:	83 c4 0c             	add    esp,0xc
c0009069:	c3                   	ret    

c000906a <calc_output_single>:
c000906a:	55                   	push   ebp
c000906b:	57                   	push   edi
c000906c:	89 c7                	mov    edi,eax
c000906e:	56                   	push   esi
c000906f:	53                   	push   ebx
c0009070:	89 d3                	mov    ebx,edx
c0009072:	83 ec 24             	sub    esp,0x24
c0009075:	89 de                	mov    esi,ebx
c0009077:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000907a:	e8 c3 ff ff ff       	call   c0009042 <int_to_fp>
c000907f:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009082:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009086:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000908d:	29 c8                	sub    eax,ecx
c000908f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0009097:	99                   	cdq    
c0009098:	f7 fb                	idiv   ebx
c000909a:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c000909d:	0f af f0             	imul   esi,eax
c00090a0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00090a4:	01 ce                	add    esi,ecx
c00090a6:	29 c2                	sub    edx,eax
c00090a8:	8d 14 97             	lea    edx,[edi+edx*4]
c00090ab:	89 f0                	mov    eax,esi
c00090ad:	e8 9e ff ff ff       	call   c0009050 <fp_to_double>
c00090b2:	89 f0                	mov    eax,esi
c00090b4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00090b8:	e8 89 ff ff ff       	call   c0009046 <fp_to_int>
c00090bd:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00090c1:	83 c2 04             	add    edx,0x4
c00090c4:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00090c8:	d8 e1                	fsub   st,st(1)
c00090ca:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00090ce:	de c9                	fmulp  st(1),st
c00090d0:	de c1                	faddp  st(1),st
c00090d2:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00090d8:	29 de                	sub    esi,ebx
c00090da:	dc 04 24             	fadd   QWORD PTR [esp]
c00090dd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090e0:	79 c9                	jns    c00090ab <calc_output_single+0x41>
c00090e2:	89 d8                	mov    eax,ebx
c00090e4:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00090e8:	29 c8                	sub    eax,ecx
c00090ea:	d9 ee                	fldz   
c00090ec:	89 c1                	mov    ecx,eax
c00090ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f2:	29 c8                	sub    eax,ecx
c00090f4:	99                   	cdq    
c00090f5:	f7 fb                	idiv   ebx
c00090f7:	89 da                	mov    edx,ebx
c00090f9:	0f af d0             	imul   edx,eax
c00090fc:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c0009100:	01 d1                	add    ecx,edx
c0009102:	8d 14 87             	lea    edx,[edi+eax*4]
c0009105:	89 c8                	mov    eax,ecx
c0009107:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000910b:	e8 40 ff ff ff       	call   c0009050 <fp_to_double>
c0009110:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009114:	89 c8                	mov    eax,ecx
c0009116:	e8 2b ff ff ff       	call   c0009046 <fp_to_int>
c000911b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000911f:	29 d9                	sub    ecx,ebx
c0009121:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009125:	83 ea 04             	sub    edx,0x4
c0009128:	d8 e1                	fsub   st,st(1)
c000912a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000912e:	de c9                	fmulp  st(1),st
c0009130:	de c1                	faddp  st(1),st
c0009132:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009138:	85 c9                	test   ecx,ecx
c000913a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000913e:	de c1                	faddp  st(1),st
c0009140:	7f c3                	jg     c0009105 <calc_output_single+0x9b>
c0009142:	dd 04 24             	fld    QWORD PTR [esp]
c0009145:	83 c4 24             	add    esp,0x24
c0009148:	de c1                	faddp  st(1),st
c000914a:	5b                   	pop    ebx
c000914b:	5e                   	pop    esi
c000914c:	5f                   	pop    edi
c000914d:	5d                   	pop    ebp
c000914e:	c3                   	ret    

c000914f <calc_output_stereo>:
c000914f:	55                   	push   ebp
c0009150:	57                   	push   edi
c0009151:	89 c7                	mov    edi,eax
c0009153:	56                   	push   esi
c0009154:	53                   	push   ebx
c0009155:	89 d3                	mov    ebx,edx
c0009157:	83 ec 44             	sub    esp,0x44
c000915a:	89 de                	mov    esi,ebx
c000915c:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009160:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009163:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009167:	e8 d6 fe ff ff       	call   c0009042 <int_to_fp>
c000916c:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c000916f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009173:	d9 ee                	fldz   
c0009175:	29 c8                	sub    eax,ecx
c0009177:	dd 14 24             	fst    QWORD PTR [esp]
c000917a:	99                   	cdq    
c000917b:	f7 fb                	idiv   ebx
c000917d:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009180:	0f af f0             	imul   esi,eax
c0009183:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009187:	01 ce                	add    esi,ecx
c0009189:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000918c:	0f af c2             	imul   eax,edx
c000918f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009193:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009197:	29 c2                	sub    edx,eax
c0009199:	8d 14 97             	lea    edx,[edi+edx*4]
c000919c:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00091a0:	89 f0                	mov    eax,esi
c00091a2:	e8 a9 fe ff ff       	call   c0009050 <fp_to_double>
c00091a7:	89 f0                	mov    eax,esi
c00091a9:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00091ad:	e8 94 fe ff ff       	call   c0009046 <fp_to_int>
c00091b2:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00091b6:	83 c2 08             	add    edx,0x8
c00091b9:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00091bd:	d8 e1                	fsub   st,st(1)
c00091bf:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00091c3:	de c9                	fmulp  st(1),st
c00091c5:	de c1                	faddp  st(1),st
c00091c7:	d9 c0                	fld    st(0)
c00091c9:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00091cf:	dc 04 24             	fadd   QWORD PTR [esp]
c00091d2:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091d5:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00091db:	29 de                	sub    esi,ebx
c00091dd:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00091e1:	de c1                	faddp  st(1),st
c00091e3:	79 b7                	jns    c000919c <calc_output_stereo+0x4d>
c00091e5:	89 d8                	mov    eax,ebx
c00091e7:	d9 ee                	fldz   
c00091e9:	d9 ee                	fldz   
c00091eb:	29 c8                	sub    eax,ecx
c00091ed:	89 c1                	mov    ecx,eax
c00091ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00091f3:	29 c8                	sub    eax,ecx
c00091f5:	99                   	cdq    
c00091f6:	f7 fb                	idiv   ebx
c00091f8:	89 da                	mov    edx,ebx
c00091fa:	0f af d0             	imul   edx,eax
c00091fd:	40                   	inc    eax
c00091fe:	01 d1                	add    ecx,edx
c0009200:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009205:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009209:	8d 14 87             	lea    edx,[edi+eax*4]
c000920c:	eb 04                	jmp    c0009212 <calc_output_stereo+0xc3>
c000920e:	d9 ca                	fxch   st(2)
c0009210:	d9 c9                	fxch   st(1)
c0009212:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009216:	d9 c9                	fxch   st(1)
c0009218:	89 c8                	mov    eax,ecx
c000921a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000921e:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009222:	e8 29 fe ff ff       	call   c0009050 <fp_to_double>
c0009227:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000922b:	89 c8                	mov    eax,ecx
c000922d:	e8 14 fe ff ff       	call   c0009046 <fp_to_int>
c0009232:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009236:	29 d9                	sub    ecx,ebx
c0009238:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000923c:	83 ea 08             	sub    edx,0x8
c000923f:	d8 e1                	fsub   st,st(1)
c0009241:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009245:	de c9                	fmulp  st(1),st
c0009247:	de c1                	faddp  st(1),st
c0009249:	d9 c0                	fld    st(0)
c000924b:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c0009251:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009255:	de c1                	faddp  st(1),st
c0009257:	d9 c9                	fxch   st(1)
c0009259:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c000925f:	85 c9                	test   ecx,ecx
c0009261:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009265:	de c1                	faddp  st(1),st
c0009267:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000926b:	7f a1                	jg     c000920e <calc_output_stereo+0xbf>
c000926d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009271:	dd 04 24             	fld    QWORD PTR [esp]
c0009274:	de c3                	faddp  st(3),st
c0009276:	d9 ca                	fxch   st(2)
c0009278:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000927c:	d9 18                	fstp   DWORD PTR [eax]
c000927e:	de c1                	faddp  st(1),st
c0009280:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c0009284:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c0009287:	83 c4 44             	add    esp,0x44
c000928a:	5b                   	pop    ebx
c000928b:	5e                   	pop    esi
c000928c:	5f                   	pop    edi
c000928d:	5d                   	pop    ebp
c000928e:	c3                   	ret    

c000928f <calc_output_quad>:
c000928f:	55                   	push   ebp
c0009290:	57                   	push   edi
c0009291:	56                   	push   esi
c0009292:	89 c6                	mov    esi,eax
c0009294:	53                   	push   ebx
c0009295:	89 d3                	mov    ebx,edx
c0009297:	83 ec 5c             	sub    esp,0x5c
c000929a:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c000929e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00092a1:	dd 1c 24             	fstp   QWORD PTR [esp]
c00092a4:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00092a8:	e8 95 fd ff ff       	call   c0009042 <int_to_fp>
c00092ad:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00092b0:	d9 ee                	fldz   
c00092b2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00092b6:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00092ba:	29 c8                	sub    eax,ecx
c00092bc:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00092c0:	99                   	cdq    
c00092c1:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00092c5:	f7 fb                	idiv   ebx
c00092c7:	89 da                	mov    edx,ebx
c00092c9:	0f af d0             	imul   edx,eax
c00092cc:	01 ca                	add    edx,ecx
c00092ce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00092d2:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c00092d5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00092d9:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00092dc:	0f af c2             	imul   eax,edx
c00092df:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00092e3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00092e7:	29 c2                	sub    edx,eax
c00092e9:	8d 14 96             	lea    edx,[esi+edx*4]
c00092ec:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092f4:	e8 57 fd ff ff       	call   c0009050 <fp_to_double>
c00092f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092fd:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009301:	e8 40 fd ff ff       	call   c0009046 <fp_to_int>
c0009306:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000930a:	83 c2 10             	add    edx,0x10
c000930d:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009311:	d8 e1                	fsub   st,st(1)
c0009313:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009317:	de c9                	fmulp  st(1),st
c0009319:	de c1                	faddp  st(1),st
c000931b:	d9 c0                	fld    st(0)
c000931d:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009323:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009327:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000932b:	d9 c0                	fld    st(0)
c000932d:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009333:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009337:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000933b:	d9 c0                	fld    st(0)
c000933d:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009343:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009347:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000934b:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009351:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c0009355:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0009359:	de c1                	faddp  st(1),st
c000935b:	79 8f                	jns    c00092ec <calc_output_quad+0x5d>
c000935d:	89 d8                	mov    eax,ebx
c000935f:	d9 ee                	fldz   
c0009361:	29 c8                	sub    eax,ecx
c0009363:	d9 ee                	fldz   
c0009365:	89 c1                	mov    ecx,eax
c0009367:	d9 ee                	fldz   
c0009369:	d9 ee                	fldz   
c000936b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000936f:	29 c8                	sub    eax,ecx
c0009371:	99                   	cdq    
c0009372:	f7 fb                	idiv   ebx
c0009374:	89 da                	mov    edx,ebx
c0009376:	0f af d0             	imul   edx,eax
c0009379:	40                   	inc    eax
c000937a:	01 d1                	add    ecx,edx
c000937c:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009381:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009385:	8d 14 86             	lea    edx,[esi+eax*4]
c0009388:	eb 0a                	jmp    c0009394 <calc_output_quad+0x105>
c000938a:	d9 cc                	fxch   st(4)
c000938c:	d9 ca                	fxch   st(2)
c000938e:	d9 c9                	fxch   st(1)
c0009390:	d9 cb                	fxch   st(3)
c0009392:	d9 c9                	fxch   st(1)
c0009394:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009398:	d9 c9                	fxch   st(1)
c000939a:	89 c8                	mov    eax,ecx
c000939c:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00093a0:	d9 c9                	fxch   st(1)
c00093a2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00093a6:	d9 c9                	fxch   st(1)
c00093a8:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00093ac:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00093b0:	e8 9b fc ff ff       	call   c0009050 <fp_to_double>
c00093b5:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00093b9:	89 c8                	mov    eax,ecx
c00093bb:	e8 86 fc ff ff       	call   c0009046 <fp_to_int>
c00093c0:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00093c4:	29 d9                	sub    ecx,ebx
c00093c6:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00093ca:	83 ea 10             	sub    edx,0x10
c00093cd:	d8 e1                	fsub   st,st(1)
c00093cf:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00093d3:	de c9                	fmulp  st(1),st
c00093d5:	de c1                	faddp  st(1),st
c00093d7:	d9 c0                	fld    st(0)
c00093d9:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c00093df:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00093e3:	de c1                	faddp  st(1),st
c00093e5:	d9 c1                	fld    st(1)
c00093e7:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c00093ed:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00093f1:	de c1                	faddp  st(1),st
c00093f3:	d9 c2                	fld    st(2)
c00093f5:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00093fb:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00093ff:	de c1                	faddp  st(1),st
c0009401:	d9 cb                	fxch   st(3)
c0009403:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009409:	85 c9                	test   ecx,ecx
c000940b:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000940f:	de c1                	faddp  st(1),st
c0009411:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009415:	0f 8f 6f ff ff ff    	jg     c000938a <calc_output_quad+0xfb>
c000941b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000941f:	de c4                	faddp  st(4),st
c0009421:	d9 cb                	fxch   st(3)
c0009423:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009426:	d9 1f                	fstp   DWORD PTR [edi]
c0009428:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000942c:	de c2                	faddp  st(2),st
c000942e:	d9 c9                	fxch   st(1)
c0009430:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009433:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009436:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000943a:	de c3                	faddp  st(3),st
c000943c:	d9 ca                	fxch   st(2)
c000943e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009441:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009444:	de c1                	faddp  st(1),st
c0009446:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009449:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000944c:	83 c4 5c             	add    esp,0x5c
c000944f:	5b                   	pop    ebx
c0009450:	5e                   	pop    esi
c0009451:	5f                   	pop    edi
c0009452:	5d                   	pop    ebp
c0009453:	c3                   	ret    

c0009454 <calc_output_hex>:
c0009454:	55                   	push   ebp
c0009455:	57                   	push   edi
c0009456:	89 c7                	mov    edi,eax
c0009458:	56                   	push   esi
c0009459:	53                   	push   ebx
c000945a:	89 d3                	mov    ebx,edx
c000945c:	83 ec 7c             	sub    esp,0x7c
c000945f:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c0009466:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009469:	dd 1c 24             	fstp   QWORD PTR [esp]
c000946c:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c0009473:	e8 ca fb ff ff       	call   c0009042 <int_to_fp>
c0009478:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c000947b:	d9 ee                	fldz   
c000947d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009481:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009485:	29 c8                	sub    eax,ecx
c0009487:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c000948b:	99                   	cdq    
c000948c:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c0009490:	f7 fb                	idiv   ebx
c0009492:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c0009496:	89 da                	mov    edx,ebx
c0009498:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000949c:	0f af d0             	imul   edx,eax
c000949f:	01 ca                	add    edx,ecx
c00094a1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00094a5:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00094a8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00094ac:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00094af:	0f af c2             	imul   eax,edx
c00094b2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00094b6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00094ba:	29 c2                	sub    edx,eax
c00094bc:	8d 14 97             	lea    edx,[edi+edx*4]
c00094bf:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094c7:	e8 84 fb ff ff       	call   c0009050 <fp_to_double>
c00094cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094d0:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00094d4:	e8 6d fb ff ff       	call   c0009046 <fp_to_int>
c00094d9:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00094dd:	83 c2 18             	add    edx,0x18
c00094e0:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00094e4:	d8 e1                	fsub   st,st(1)
c00094e6:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c00094ea:	de c9                	fmulp  st(1),st
c00094ec:	de c1                	faddp  st(1),st
c00094ee:	d9 c0                	fld    st(0)
c00094f0:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c00094f6:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00094fa:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094fe:	d9 c0                	fld    st(0)
c0009500:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009506:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c000950a:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000950e:	d9 c0                	fld    st(0)
c0009510:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009516:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000951a:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000951e:	d9 c0                	fld    st(0)
c0009520:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009526:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000952a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000952e:	d9 c0                	fld    st(0)
c0009530:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009536:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000953a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000953e:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009544:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009548:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000954c:	de c1                	faddp  st(1),st
c000954e:	0f 89 6b ff ff ff    	jns    c00094bf <calc_output_hex+0x6b>
c0009554:	d9 ee                	fldz   
c0009556:	d9 ee                	fldz   
c0009558:	89 d8                	mov    eax,ebx
c000955a:	29 c8                	sub    eax,ecx
c000955c:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c0009560:	89 c1                	mov    ecx,eax
c0009562:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0009566:	29 c8                	sub    eax,ecx
c0009568:	99                   	cdq    
c0009569:	f7 fb                	idiv   ebx
c000956b:	89 da                	mov    edx,ebx
c000956d:	0f af d0             	imul   edx,eax
c0009570:	40                   	inc    eax
c0009571:	01 d1                	add    ecx,edx
c0009573:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0009578:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c000957c:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c0009580:	8d 14 87             	lea    edx,[edi+eax*4]
c0009583:	d9 ee                	fldz   
c0009585:	d9 ee                	fldz   
c0009587:	d9 ca                	fxch   st(2)
c0009589:	eb 08                	jmp    c0009593 <calc_output_hex+0x13f>
c000958b:	d9 cc                	fxch   st(4)
c000958d:	d9 cb                	fxch   st(3)
c000958f:	d9 ca                	fxch   st(2)
c0009591:	d9 c9                	fxch   st(1)
c0009593:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c0009597:	89 c8                	mov    eax,ecx
c0009599:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c000959d:	d9 ca                	fxch   st(2)
c000959f:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00095a3:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00095a7:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00095ab:	e8 a0 fa ff ff       	call   c0009050 <fp_to_double>
c00095b0:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00095b4:	89 c8                	mov    eax,ecx
c00095b6:	e8 8b fa ff ff       	call   c0009046 <fp_to_int>
c00095bb:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00095bf:	29 d9                	sub    ecx,ebx
c00095c1:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00095c5:	83 ea 18             	sub    edx,0x18
c00095c8:	d8 e1                	fsub   st,st(1)
c00095ca:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00095ce:	de c9                	fmulp  st(1),st
c00095d0:	de c1                	faddp  st(1),st
c00095d2:	d9 c0                	fld    st(0)
c00095d4:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00095da:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00095de:	de c1                	faddp  st(1),st
c00095e0:	d9 c1                	fld    st(1)
c00095e2:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00095e8:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c00095ec:	de c1                	faddp  st(1),st
c00095ee:	d9 c2                	fld    st(2)
c00095f0:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c00095f6:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00095fa:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00095fe:	d9 c2                	fld    st(2)
c0009600:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009606:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c000960a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000960e:	d9 c2                	fld    st(2)
c0009610:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009616:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c000961a:	de c1                	faddp  st(1),st
c000961c:	d9 cb                	fxch   st(3)
c000961e:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009624:	85 c9                	test   ecx,ecx
c0009626:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c000962a:	de c1                	faddp  st(1),st
c000962c:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009630:	0f 8f 55 ff ff ff    	jg     c000958b <calc_output_hex+0x137>
c0009636:	d9 cb                	fxch   st(3)
c0009638:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000963c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000963f:	d9 1e                	fstp   DWORD PTR [esi]
c0009641:	d9 c9                	fxch   st(1)
c0009643:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009647:	dc 0c 24             	fmul   QWORD PTR [esp]
c000964a:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000964d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009651:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009655:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009658:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c000965b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000965f:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009663:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009666:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c0009669:	d9 ca                	fxch   st(2)
c000966b:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000966f:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009672:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c0009675:	de c1                	faddp  st(1),st
c0009677:	dc 0c 24             	fmul   QWORD PTR [esp]
c000967a:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c000967d:	83 c4 7c             	add    esp,0x7c
c0009680:	5b                   	pop    ebx
c0009681:	5e                   	pop    esi
c0009682:	5f                   	pop    edi
c0009683:	5d                   	pop    ebp
c0009684:	c3                   	ret    

c0009685 <sinc_reset>:
c0009685:	56                   	push   esi
c0009686:	53                   	push   ebx
c0009687:	51                   	push   ecx
c0009688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000968c:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000968f:	85 db                	test   ebx,ebx
c0009691:	74 51                	je     c00096e4 <sinc_reset+0x5f>
c0009693:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000969a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00096a1:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00096a8:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00096ae:	d9 ee                	fldz   
c00096b0:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c00096b3:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c00096b6:	52                   	push   edx
c00096b7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096ba:	c1 e0 02             	shl    eax,0x2
c00096bd:	50                   	push   eax
c00096be:	6a 00                	push   0x0
c00096c0:	56                   	push   esi
c00096c1:	e8 f4 6f ff ff       	call   c00006ba <memset>
c00096c6:	83 c4 0c             	add    esp,0xc
c00096c9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00096cc:	c1 e0 02             	shl    eax,0x2
c00096cf:	50                   	push   eax
c00096d0:	68 aa 00 00 00       	push   0xaa
c00096d5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096d8:	8d 04 86             	lea    eax,[esi+eax*4]
c00096db:	50                   	push   eax
c00096dc:	e8 d9 6f ff ff       	call   c00006ba <memset>
c00096e1:	83 c4 10             	add    esp,0x10
c00096e4:	58                   	pop    eax
c00096e5:	5b                   	pop    ebx
c00096e6:	5e                   	pop    esi
c00096e7:	c3                   	ret    

c00096e8 <calc_output_multi>:
c00096e8:	55                   	push   ebp
c00096e9:	57                   	push   edi
c00096ea:	8d 78 44             	lea    edi,[eax+0x44]
c00096ed:	56                   	push   esi
c00096ee:	89 c6                	mov    esi,eax
c00096f0:	53                   	push   ebx
c00096f1:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c00096f7:	83 ec 4c             	sub    esp,0x4c
c00096fa:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00096fe:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0009702:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009706:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000970a:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000970e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009712:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009715:	e8 28 f9 ff ff       	call   c0009042 <int_to_fp>
c000971a:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c000971d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009721:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009725:	99                   	cdq    
c0009726:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c000972a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000972e:	0f af d0             	imul   edx,eax
c0009731:	0f af c3             	imul   eax,ebx
c0009734:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009738:	29 c5                	sub    ebp,eax
c000973a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000973e:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0009742:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009749:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000974d:	52                   	push   edx
c000974e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009752:	6a 00                	push   0x0
c0009754:	57                   	push   edi
c0009755:	e8 60 6f ff ff       	call   c00006ba <memset>
c000975a:	83 c4 10             	add    esp,0x10
c000975d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009761:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009765:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009769:	e8 e2 f8 ff ff       	call   c0009050 <fp_to_double>
c000976e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009772:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009776:	e8 cb f8 ff ff       	call   c0009046 <fp_to_int>
c000977b:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000977e:	89 d9                	mov    ecx,ebx
c0009780:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009783:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009787:	d8 e1                	fsub   st,st(1)
c0009789:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000978d:	de c9                	fmulp  st(1),st
c000978f:	de c1                	faddp  st(1),st
c0009791:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009795:	89 c8                	mov    eax,ecx
c0009797:	bd 08 00 00 00       	mov    ebp,0x8
c000979c:	99                   	cdq    
c000979d:	f7 fd                	idiv   ebp
c000979f:	4a                   	dec    edx
c00097a0:	83 fa 06             	cmp    edx,0x6
c00097a3:	77 07                	ja     c00097ac <calc_output_multi+0xc4>
c00097a5:	ff 24 95 40 0b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf4c0]
c00097ac:	49                   	dec    ecx
c00097ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097b1:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097b4:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097bb:	d9 c1                	fld    st(1)
c00097bd:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097c1:	dc 00                	fadd   QWORD PTR [eax]
c00097c3:	dd 18                	fstp   QWORD PTR [eax]
c00097c5:	49                   	dec    ecx
c00097c6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097ca:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097cd:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097d4:	d9 c1                	fld    st(1)
c00097d6:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097da:	dc 00                	fadd   QWORD PTR [eax]
c00097dc:	dd 18                	fstp   QWORD PTR [eax]
c00097de:	49                   	dec    ecx
c00097df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097e3:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097e6:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097ed:	d9 c1                	fld    st(1)
c00097ef:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097f3:	dc 00                	fadd   QWORD PTR [eax]
c00097f5:	dd 18                	fstp   QWORD PTR [eax]
c00097f7:	49                   	dec    ecx
c00097f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097fc:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097ff:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009806:	d9 c1                	fld    st(1)
c0009808:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000980c:	dc 00                	fadd   QWORD PTR [eax]
c000980e:	dd 18                	fstp   QWORD PTR [eax]
c0009810:	49                   	dec    ecx
c0009811:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009815:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009818:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000981f:	d9 c1                	fld    st(1)
c0009821:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009825:	dc 00                	fadd   QWORD PTR [eax]
c0009827:	dd 18                	fstp   QWORD PTR [eax]
c0009829:	49                   	dec    ecx
c000982a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000982e:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009831:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009838:	d9 c1                	fld    st(1)
c000983a:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000983e:	dc 00                	fadd   QWORD PTR [eax]
c0009840:	dd 18                	fstp   QWORD PTR [eax]
c0009842:	49                   	dec    ecx
c0009843:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009847:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000984a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009851:	d9 c1                	fld    st(1)
c0009853:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009857:	dc 00                	fadd   QWORD PTR [eax]
c0009859:	dd 18                	fstp   QWORD PTR [eax]
c000985b:	49                   	dec    ecx
c000985c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009860:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009863:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000986a:	d9 c1                	fld    st(1)
c000986c:	85 c9                	test   ecx,ecx
c000986e:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009872:	dc 00                	fadd   QWORD PTR [eax]
c0009874:	dd 18                	fstp   QWORD PTR [eax]
c0009876:	0f 8f 19 ff ff ff    	jg     c0009795 <calc_output_multi+0xad>
c000987c:	dd d9                	fstp   st(1)
c000987e:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c0009882:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009886:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c000988a:	0f 89 d1 fe ff ff    	jns    c0009761 <calc_output_multi+0x79>
c0009890:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009894:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009898:	89 d1                	mov    ecx,edx
c000989a:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000989e:	29 c8                	sub    eax,ecx
c00098a0:	99                   	cdq    
c00098a1:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c00098a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00098a9:	0f af d0             	imul   edx,eax
c00098ac:	40                   	inc    eax
c00098ad:	01 d1                	add    ecx,edx
c00098af:	0f af c3             	imul   eax,ebx
c00098b2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00098b6:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c00098b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098bd:	50                   	push   eax
c00098be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098c2:	6a 00                	push   0x0
c00098c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098c8:	e8 ed 6d ff ff       	call   c00006ba <memset>
c00098cd:	83 c4 10             	add    esp,0x10
c00098d0:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00098d4:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00098d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00098dc:	e8 6f f7 ff ff       	call   c0009050 <fp_to_double>
c00098e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00098e5:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00098e9:	e8 58 f7 ff ff       	call   c0009046 <fp_to_int>
c00098ee:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00098f1:	89 d9                	mov    ecx,ebx
c00098f3:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00098f6:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00098fa:	d8 e1                	fsub   st,st(1)
c00098fc:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009900:	de c9                	fmulp  st(1),st
c0009902:	de c1                	faddp  st(1),st
c0009904:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009908:	89 c8                	mov    eax,ecx
c000990a:	bd 08 00 00 00       	mov    ebp,0x8
c000990f:	99                   	cdq    
c0009910:	f7 fd                	idiv   ebp
c0009912:	4a                   	dec    edx
c0009913:	83 fa 06             	cmp    edx,0x6
c0009916:	77 07                	ja     c000991f <calc_output_multi+0x237>
c0009918:	ff 24 95 5c 0b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf4a4]
c000991f:	49                   	dec    ecx
c0009920:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009924:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009928:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000992b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009932:	d9 c1                	fld    st(1)
c0009934:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009938:	dc 00                	fadd   QWORD PTR [eax]
c000993a:	dd 18                	fstp   QWORD PTR [eax]
c000993c:	49                   	dec    ecx
c000993d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009941:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009945:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009948:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000994f:	d9 c1                	fld    st(1)
c0009951:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009955:	dc 00                	fadd   QWORD PTR [eax]
c0009957:	dd 18                	fstp   QWORD PTR [eax]
c0009959:	49                   	dec    ecx
c000995a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000995e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009962:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009965:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000996c:	d9 c1                	fld    st(1)
c000996e:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009972:	dc 00                	fadd   QWORD PTR [eax]
c0009974:	dd 18                	fstp   QWORD PTR [eax]
c0009976:	49                   	dec    ecx
c0009977:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000997b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000997f:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009982:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009989:	d9 c1                	fld    st(1)
c000998b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000998f:	dc 00                	fadd   QWORD PTR [eax]
c0009991:	dd 18                	fstp   QWORD PTR [eax]
c0009993:	49                   	dec    ecx
c0009994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009998:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000999c:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000999f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099a6:	d9 c1                	fld    st(1)
c00099a8:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099ac:	dc 00                	fadd   QWORD PTR [eax]
c00099ae:	dd 18                	fstp   QWORD PTR [eax]
c00099b0:	49                   	dec    ecx
c00099b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099b9:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099bc:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099c3:	d9 c1                	fld    st(1)
c00099c5:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099c9:	dc 00                	fadd   QWORD PTR [eax]
c00099cb:	dd 18                	fstp   QWORD PTR [eax]
c00099cd:	49                   	dec    ecx
c00099ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099d6:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099d9:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099e0:	d9 c1                	fld    st(1)
c00099e2:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099e6:	dc 00                	fadd   QWORD PTR [eax]
c00099e8:	dd 18                	fstp   QWORD PTR [eax]
c00099ea:	49                   	dec    ecx
c00099eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099f3:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099f6:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099fd:	d9 c1                	fld    st(1)
c00099ff:	85 c9                	test   ecx,ecx
c0009a01:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a05:	dc 00                	fadd   QWORD PTR [eax]
c0009a07:	dd 18                	fstp   QWORD PTR [eax]
c0009a09:	0f 8f f9 fe ff ff    	jg     c0009908 <calc_output_multi+0x220>
c0009a0f:	dd d9                	fstp   st(1)
c0009a11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a15:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009a19:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c0009a1d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0009a22:	0f 8f ac fe ff ff    	jg     c00098d4 <calc_output_multi+0x1ec>
c0009a28:	b9 08 00 00 00       	mov    ecx,0x8
c0009a2d:	89 d8                	mov    eax,ebx
c0009a2f:	99                   	cdq    
c0009a30:	f7 f9                	idiv   ecx
c0009a32:	4a                   	dec    edx
c0009a33:	83 fa 06             	cmp    edx,0x6
c0009a36:	77 07                	ja     c0009a3f <calc_output_multi+0x357>
c0009a38:	ff 24 95 78 0b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf488]
c0009a3f:	4b                   	dec    ebx
c0009a40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a44:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a47:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a4a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a4e:	d8 c9                	fmul   st,st(1)
c0009a50:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a53:	4b                   	dec    ebx
c0009a54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a58:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a5b:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a5e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a62:	d8 c9                	fmul   st,st(1)
c0009a64:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a67:	4b                   	dec    ebx
c0009a68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6c:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a6f:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a72:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a76:	d8 c9                	fmul   st,st(1)
c0009a78:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a7b:	4b                   	dec    ebx
c0009a7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a80:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a83:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a86:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a8a:	d8 c9                	fmul   st,st(1)
c0009a8c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a8f:	4b                   	dec    ebx
c0009a90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a94:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a97:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a9a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a9e:	d8 c9                	fmul   st,st(1)
c0009aa0:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009aa3:	4b                   	dec    ebx
c0009aa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009aa8:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009aab:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009aae:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ab2:	d8 c9                	fmul   st,st(1)
c0009ab4:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ab7:	4b                   	dec    ebx
c0009ab8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009abc:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009abf:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ac2:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ac6:	d8 c9                	fmul   st,st(1)
c0009ac8:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009acb:	4b                   	dec    ebx
c0009acc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ad0:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009ad3:	85 db                	test   ebx,ebx
c0009ad5:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ad8:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009adc:	d8 c9                	fmul   st,st(1)
c0009ade:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ae1:	0f 8f 46 ff ff ff    	jg     c0009a2d <calc_output_multi+0x345>
c0009ae7:	dd d8                	fstp   st(0)
c0009ae9:	83 c4 4c             	add    esp,0x4c
c0009aec:	5b                   	pop    ebx
c0009aed:	5e                   	pop    esi
c0009aee:	5f                   	pop    edi
c0009aef:	5d                   	pop    ebp
c0009af0:	c3                   	ret    

c0009af1 <double_to_fp>:
c0009af1:	d9 05 cc 0c 02 c0    	fld    DWORD PTR ds:0xc0020ccc
c0009af7:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009afb:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009aff:	e9 9c 58 01 00       	jmp    c001f3a0 <lrint>

c0009b04 <fmod_one>:
c0009b04:	83 ec 2c             	sub    esp,0x2c
c0009b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009b0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b17:	83 ec 08             	sub    esp,0x8
c0009b1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b22:	e8 79 58 01 00       	call   c001f3a0 <lrint>
c0009b27:	83 c4 10             	add    esp,0x10
c0009b2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b2e:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009b32:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009b36:	de e1                	fsubrp st(1),st
c0009b38:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009b3c:	d9 ee                	fldz   
c0009b3e:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009b42:	df e0                	fnstsw ax
c0009b44:	f6 c4 45             	test   ah,0x45
c0009b47:	75 0a                	jne    c0009b53 <fmod_one+0x4f>
c0009b49:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b4d:	d9 e8                	fld1   
c0009b4f:	de c1                	faddp  st(1),st
c0009b51:	eb 04                	jmp    c0009b57 <fmod_one+0x53>
c0009b53:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b57:	83 c4 2c             	add    esp,0x2c
c0009b5a:	c3                   	ret    

c0009b5b <prepare_data>:
c0009b5b:	55                   	push   ebp
c0009b5c:	57                   	push   edi
c0009b5d:	56                   	push   esi
c0009b5e:	53                   	push   ebx
c0009b5f:	83 ec 1c             	sub    esp,0x1c
c0009b62:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009b66:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b6a:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009b6e:	0f 89 57 01 00 00    	jns    c0009ccb <prepare_data+0x170>
c0009b74:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009b77:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b7a:	85 d2                	test   edx,edx
c0009b7c:	75 0d                	jne    c0009b8b <prepare_data+0x30>
c0009b7e:	8d 14 36             	lea    edx,[esi+esi*1]
c0009b81:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009b84:	29 d0                	sub    eax,edx
c0009b86:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b89:	eb 44                	jmp    c0009bcf <prepare_data+0x74>
c0009b8b:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009b8e:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009b91:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009b94:	39 c1                	cmp    ecx,eax
c0009b96:	7d 04                	jge    c0009b9c <prepare_data+0x41>
c0009b98:	29 d0                	sub    eax,edx
c0009b9a:	eb 2d                	jmp    c0009bc9 <prepare_data+0x6e>
c0009b9c:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009ba2:	29 d7                	sub    edi,edx
c0009ba4:	01 f7                	add    edi,esi
c0009ba6:	51                   	push   ecx
c0009ba7:	29 f2                	sub    edx,esi
c0009ba9:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009bb0:	8d 14 90             	lea    edx,[eax+edx*4]
c0009bb3:	51                   	push   ecx
c0009bb4:	52                   	push   edx
c0009bb5:	50                   	push   eax
c0009bb6:	e8 91 6a ff ff       	call   c000064c <memmove>
c0009bbb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009bbe:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bc1:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009bc4:	29 f0                	sub    eax,esi
c0009bc6:	83 c4 10             	add    esp,0x10
c0009bc9:	29 f0                	sub    eax,esi
c0009bcb:	79 02                	jns    c0009bcf <prepare_data+0x74>
c0009bcd:	31 c0                	xor    eax,eax
c0009bcf:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009bd2:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009bd5:	29 ef                	sub    edi,ebp
c0009bd7:	39 c7                	cmp    edi,eax
c0009bd9:	7e 02                	jle    c0009bdd <prepare_data+0x82>
c0009bdb:	89 c7                	mov    edi,eax
c0009bdd:	89 f8                	mov    eax,edi
c0009bdf:	99                   	cdq    
c0009be0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009be3:	b8 15 00 00 00       	mov    eax,0x15
c0009be8:	29 d7                	sub    edi,edx
c0009bea:	0f 88 dd 00 00 00    	js     c0009ccd <prepare_data+0x172>
c0009bf0:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009bf3:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009bf6:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009bf9:	0f 8f ce 00 00 00    	jg     c0009ccd <prepare_data+0x172>
c0009bff:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009c05:	50                   	push   eax
c0009c06:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009c0d:	50                   	push   eax
c0009c0e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c12:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c14:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009c17:	50                   	push   eax
c0009c18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009c1b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009c1f:	50                   	push   eax
c0009c20:	e8 5f 6a ff ff       	call   c0000684 <memcpy>
c0009c25:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009c28:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009c2b:	01 fd                	add    ebp,edi
c0009c2d:	01 f9                	add    ecx,edi
c0009c2f:	83 c4 10             	add    esp,0x10
c0009c32:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009c35:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009c38:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009c3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c3f:	0f 85 86 00 00 00    	jne    c0009ccb <prepare_data+0x170>
c0009c45:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009c48:	89 e8                	mov    eax,ebp
c0009c4a:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009c4d:	29 c8                	sub    eax,ecx
c0009c4f:	39 f8                	cmp    eax,edi
c0009c51:	7d 78                	jge    c0009ccb <prepare_data+0x170>
c0009c53:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009c57:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009c5b:	74 6e                	je     c0009ccb <prepare_data+0x170>
c0009c5d:	8d 7e 04             	lea    edi,[esi+0x4]
c0009c60:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009c64:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009c67:	29 ef                	sub    edi,ebp
c0009c69:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009c6d:	7c 29                	jl     c0009c98 <prepare_data+0x13d>
c0009c6f:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c72:	29 f1                	sub    ecx,esi
c0009c74:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009c7b:	55                   	push   ebp
c0009c7c:	50                   	push   eax
c0009c7d:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009c80:	50                   	push   eax
c0009c81:	52                   	push   edx
c0009c82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c86:	e8 c1 69 ff ff       	call   c000064c <memmove>
c0009c8b:	83 c4 10             	add    esp,0x10
c0009c8e:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009c91:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009c94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c98:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009c9b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009c9e:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009ca1:	83 c6 05             	add    esi,0x5
c0009ca4:	78 07                	js     c0009cad <prepare_data+0x152>
c0009ca6:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009ca9:	39 cf                	cmp    edi,ecx
c0009cab:	7e 04                	jle    c0009cb1 <prepare_data+0x156>
c0009cad:	89 ce                	mov    esi,ecx
c0009caf:	29 c6                	sub    esi,eax
c0009cb1:	8d 04 82             	lea    eax,[edx+eax*4]
c0009cb4:	51                   	push   ecx
c0009cb5:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009cbc:	51                   	push   ecx
c0009cbd:	6a 00                	push   0x0
c0009cbf:	50                   	push   eax
c0009cc0:	e8 f5 69 ff ff       	call   c00006ba <memset>
c0009cc5:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009cc8:	83 c4 10             	add    esp,0x10
c0009ccb:	31 c0                	xor    eax,eax
c0009ccd:	83 c4 1c             	add    esp,0x1c
c0009cd0:	5b                   	pop    ebx
c0009cd1:	5e                   	pop    esi
c0009cd2:	5f                   	pop    edi
c0009cd3:	5d                   	pop    ebp
c0009cd4:	c3                   	ret    

c0009cd5 <sinc_multichan_vari_process>:
c0009cd5:	55                   	push   ebp
c0009cd6:	b8 05 00 00 00       	mov    eax,0x5
c0009cdb:	57                   	push   edi
c0009cdc:	56                   	push   esi
c0009cdd:	53                   	push   ebx
c0009cde:	83 ec 3c             	sub    esp,0x3c
c0009ce1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009ce5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009ce9:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009cec:	85 db                	test   ebx,ebx
c0009cee:	0f 84 5d 02 00 00    	je     c0009f51 <sinc_multichan_vari_process+0x27c>
c0009cf4:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009cf7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009cfa:	0f af d0             	imul   edx,eax
c0009cfd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009d00:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009d04:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009d0b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009d0e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009d15:	dd 06                	fld    QWORD PTR [esi]
c0009d17:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009d1b:	55                   	push   ebp
c0009d1c:	55                   	push   ebp
c0009d1d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d20:	e8 d9 f2 ff ff       	call   c0008ffe <is_bad_src_ratio>
c0009d25:	89 c2                	mov    edx,eax
c0009d27:	58                   	pop    eax
c0009d28:	85 d2                	test   edx,edx
c0009d2a:	59                   	pop    ecx
c0009d2b:	b8 16 00 00 00       	mov    eax,0x16
c0009d30:	0f 85 1b 02 00 00    	jne    c0009f51 <sinc_multichan_vari_process+0x27c>
c0009d36:	d9 05 d0 0c 02 c0    	fld    DWORD PTR ds:0xc0020cd0
c0009d3c:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009d3f:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009d42:	dd 06                	fld    QWORD PTR [esi]
c0009d44:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009d47:	d8 d1                	fcom   st(1)
c0009d49:	df e0                	fnstsw ax
c0009d4b:	9e                   	sahf   
c0009d4c:	76 0f                	jbe    c0009d5d <sinc_multichan_vari_process+0x88>
c0009d4e:	dd d8                	fstp   st(0)
c0009d50:	d9 e8                	fld1   
c0009d52:	d8 d9                	fcomp  st(1)
c0009d54:	df e0                	fnstsw ax
c0009d56:	9e                   	sahf   
c0009d57:	77 0f                	ja     c0009d68 <sinc_multichan_vari_process+0x93>
c0009d59:	dd d8                	fstp   st(0)
c0009d5b:	eb 11                	jmp    c0009d6e <sinc_multichan_vari_process+0x99>
c0009d5d:	dd d9                	fstp   st(1)
c0009d5f:	d9 e8                	fld1   
c0009d61:	d8 d9                	fcomp  st(1)
c0009d63:	df e0                	fnstsw ax
c0009d65:	9e                   	sahf   
c0009d66:	76 04                	jbe    c0009d6c <sinc_multichan_vari_process+0x97>
c0009d68:	de f9                	fdivp  st(1),st
c0009d6a:	eb 02                	jmp    c0009d6e <sinc_multichan_vari_process+0x99>
c0009d6c:	dd d8                	fstp   st(0)
c0009d6e:	83 ec 10             	sub    esp,0x10
c0009d71:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d74:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d77:	e8 24 56 01 00       	call   c001f3a0 <lrint>
c0009d7c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009d7f:	40                   	inc    eax
c0009d80:	dd 14 24             	fst    QWORD PTR [esp]
c0009d83:	0f af c5             	imul   eax,ebp
c0009d86:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d8a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d8e:	e8 71 fd ff ff       	call   c0009b04 <fmod_one>
c0009d93:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009d96:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009d9a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d9d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009da1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009da5:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009da9:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009dac:	e8 ef 55 01 00       	call   c001f3a0 <lrint>
c0009db1:	0f af e8             	imul   ebp,eax
c0009db4:	d9 e8                	fld1   
c0009db6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009dba:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009dbe:	01 e8                	add    eax,ebp
c0009dc0:	dc 05 38 0b 02 c0    	fadd   QWORD PTR ds:0xc0020b38
c0009dc6:	99                   	cdq    
c0009dc7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009dcb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009dce:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009dd1:	83 c4 10             	add    esp,0x10
c0009dd4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009dd7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009dda:	7d 4b                	jge    c0009e27 <sinc_multichan_vari_process+0x152>
c0009ddc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009ddf:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009de2:	01 c8                	add    eax,ecx
c0009de4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009de7:	99                   	cdq    
c0009de8:	f7 f9                	idiv   ecx
c0009dea:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009dee:	7d 09                	jge    c0009df9 <sinc_multichan_vari_process+0x124>
c0009df0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009df3:	85 c0                	test   eax,eax
c0009df5:	79 57                	jns    c0009e4e <sinc_multichan_vari_process+0x179>
c0009df7:	eb 70                	jmp    c0009e69 <sinc_multichan_vari_process+0x194>
c0009df9:	51                   	push   ecx
c0009dfa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009dfe:	57                   	push   edi
c0009dff:	53                   	push   ebx
c0009e00:	e8 56 fd ff ff       	call   c0009b5b <prepare_data>
c0009e05:	83 c4 10             	add    esp,0x10
c0009e08:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009e0b:	85 c0                	test   eax,eax
c0009e0d:	0f 85 3e 01 00 00    	jne    c0009f51 <sinc_multichan_vari_process+0x27c>
c0009e13:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009e16:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009e19:	01 c8                	add    eax,ecx
c0009e1b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009e1e:	99                   	cdq    
c0009e1f:	f7 f9                	idiv   ecx
c0009e21:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009e25:	7c c9                	jl     c0009df0 <sinc_multichan_vari_process+0x11b>
c0009e27:	dd 04 24             	fld    QWORD PTR [esp]
c0009e2a:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009e2d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e31:	dd 1e                	fstp   QWORD PTR [esi]
c0009e33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009e36:	99                   	cdq    
c0009e37:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e3a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009e3d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009e40:	99                   	cdq    
c0009e41:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e44:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009e47:	31 c0                	xor    eax,eax
c0009e49:	e9 03 01 00 00       	jmp    c0009f51 <sinc_multichan_vari_process+0x27c>
c0009e4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e52:	dd 04 24             	fld    QWORD PTR [esp]
c0009e55:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009e58:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e5c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009e60:	d9 c9                	fxch   st(1)
c0009e62:	de d9                	fcompp 
c0009e64:	df e0                	fnstsw ax
c0009e66:	9e                   	sahf   
c0009e67:	73 be                	jae    c0009e27 <sinc_multichan_vari_process+0x152>
c0009e69:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009e6d:	7e 31                	jle    c0009ea0 <sinc_multichan_vari_process+0x1cb>
c0009e6f:	83 ec 10             	sub    esp,0x10
c0009e72:	dd 06                	fld    QWORD PTR [esi]
c0009e74:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009e77:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e7a:	e8 01 55 01 00       	call   c001f380 <fabs>
c0009e7f:	83 c4 10             	add    esp,0x10
c0009e82:	dc 1d c0 0c 02 c0    	fcomp  QWORD PTR ds:0xc0020cc0
c0009e88:	df e0                	fnstsw ax
c0009e8a:	9e                   	sahf   
c0009e8b:	76 13                	jbe    c0009ea0 <sinc_multichan_vari_process+0x1cb>
c0009e8d:	dd 06                	fld    QWORD PTR [esi]
c0009e8f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009e92:	d8 e1                	fsub   st,st(1)
c0009e94:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009e97:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009e9a:	de c1                	faddp  st(1),st
c0009e9c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009ea0:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009ea3:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009ea7:	d9 e8                	fld1   
c0009ea9:	d8 d9                	fcomp  st(1)
c0009eab:	df e0                	fnstsw ax
c0009ead:	9e                   	sahf   
c0009eae:	77 04                	ja     c0009eb4 <sinc_multichan_vari_process+0x1df>
c0009eb0:	dd d8                	fstp   st(0)
c0009eb2:	d9 e8                	fld1   
c0009eb4:	de c9                	fmulp  st(1),st
c0009eb6:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009eba:	50                   	push   eax
c0009ebb:	50                   	push   eax
c0009ebc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ec0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ec4:	e8 28 fc ff ff       	call   c0009af1 <double_to_fp>
c0009ec9:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009ecd:	89 c5                	mov    ebp,eax
c0009ecf:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009ed3:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ed6:	e8 16 fc ff ff       	call   c0009af1 <double_to_fp>
c0009edb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009ede:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009ee1:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009ee4:	89 c1                	mov    ecx,eax
c0009ee6:	52                   	push   edx
c0009ee7:	89 d8                	mov    eax,ebx
c0009ee9:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009eed:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009ef0:	52                   	push   edx
c0009ef1:	52                   	push   edx
c0009ef2:	89 ea                	mov    edx,ebp
c0009ef4:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ef7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009efa:	e8 e9 f7 ff ff       	call   c00096e8 <calc_output_multi>
c0009eff:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009f02:	d9 e8                	fld1   
c0009f04:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009f07:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009f0b:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009f0f:	83 c4 10             	add    esp,0x10
c0009f12:	dd 14 24             	fst    QWORD PTR [esp]
c0009f15:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009f19:	e8 e6 fb ff ff       	call   c0009b04 <fmod_one>
c0009f1e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f21:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f25:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f28:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009f2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f30:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f34:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f37:	e8 64 54 01 00       	call   c001f3a0 <lrint>
c0009f3c:	0f af e8             	imul   ebp,eax
c0009f3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f43:	01 e8                	add    eax,ebp
c0009f45:	99                   	cdq    
c0009f46:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009f49:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009f4c:	e9 80 fe ff ff       	jmp    c0009dd1 <sinc_multichan_vari_process+0xfc>
c0009f51:	83 c4 3c             	add    esp,0x3c
c0009f54:	5b                   	pop    ebx
c0009f55:	5e                   	pop    esi
c0009f56:	5f                   	pop    edi
c0009f57:	5d                   	pop    ebp
c0009f58:	c3                   	ret    

c0009f59 <sinc_hex_vari_process>:
c0009f59:	55                   	push   ebp
c0009f5a:	b8 05 00 00 00       	mov    eax,0x5
c0009f5f:	57                   	push   edi
c0009f60:	56                   	push   esi
c0009f61:	53                   	push   ebx
c0009f62:	83 ec 3c             	sub    esp,0x3c
c0009f65:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009f69:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009f6d:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009f70:	85 db                	test   ebx,ebx
c0009f72:	0f 84 58 02 00 00    	je     c000a1d0 <sinc_hex_vari_process+0x277>
c0009f78:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009f7b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009f7e:	0f af d0             	imul   edx,eax
c0009f81:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009f84:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009f88:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009f8f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009f92:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009f99:	dd 06                	fld    QWORD PTR [esi]
c0009f9b:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009f9f:	55                   	push   ebp
c0009fa0:	55                   	push   ebp
c0009fa1:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009fa4:	e8 55 f0 ff ff       	call   c0008ffe <is_bad_src_ratio>
c0009fa9:	89 c2                	mov    edx,eax
c0009fab:	58                   	pop    eax
c0009fac:	85 d2                	test   edx,edx
c0009fae:	59                   	pop    ecx
c0009faf:	b8 16 00 00 00       	mov    eax,0x16
c0009fb4:	0f 85 16 02 00 00    	jne    c000a1d0 <sinc_hex_vari_process+0x277>
c0009fba:	d9 05 d0 0c 02 c0    	fld    DWORD PTR ds:0xc0020cd0
c0009fc0:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009fc3:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009fc6:	dd 06                	fld    QWORD PTR [esi]
c0009fc8:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009fcb:	d8 d1                	fcom   st(1)
c0009fcd:	df e0                	fnstsw ax
c0009fcf:	9e                   	sahf   
c0009fd0:	76 0f                	jbe    c0009fe1 <sinc_hex_vari_process+0x88>
c0009fd2:	dd d8                	fstp   st(0)
c0009fd4:	d9 e8                	fld1   
c0009fd6:	d8 d9                	fcomp  st(1)
c0009fd8:	df e0                	fnstsw ax
c0009fda:	9e                   	sahf   
c0009fdb:	77 0f                	ja     c0009fec <sinc_hex_vari_process+0x93>
c0009fdd:	dd d8                	fstp   st(0)
c0009fdf:	eb 11                	jmp    c0009ff2 <sinc_hex_vari_process+0x99>
c0009fe1:	dd d9                	fstp   st(1)
c0009fe3:	d9 e8                	fld1   
c0009fe5:	d8 d9                	fcomp  st(1)
c0009fe7:	df e0                	fnstsw ax
c0009fe9:	9e                   	sahf   
c0009fea:	76 04                	jbe    c0009ff0 <sinc_hex_vari_process+0x97>
c0009fec:	de f9                	fdivp  st(1),st
c0009fee:	eb 02                	jmp    c0009ff2 <sinc_hex_vari_process+0x99>
c0009ff0:	dd d8                	fstp   st(0)
c0009ff2:	83 ec 10             	sub    esp,0x10
c0009ff5:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ff8:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ffb:	e8 a0 53 01 00       	call   c001f3a0 <lrint>
c000a000:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a003:	40                   	inc    eax
c000a004:	dd 14 24             	fst    QWORD PTR [esp]
c000a007:	0f af c5             	imul   eax,ebp
c000a00a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a00e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a012:	e8 ed fa ff ff       	call   c0009b04 <fmod_one>
c000a017:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a01a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a01e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a021:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a025:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a029:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a02d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a030:	e8 6b 53 01 00       	call   c001f3a0 <lrint>
c000a035:	0f af e8             	imul   ebp,eax
c000a038:	d9 e8                	fld1   
c000a03a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a03e:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a042:	01 e8                	add    eax,ebp
c000a044:	dc 05 38 0b 02 c0    	fadd   QWORD PTR ds:0xc0020b38
c000a04a:	99                   	cdq    
c000a04b:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a04f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a052:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a055:	83 c4 10             	add    esp,0x10
c000a058:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a05b:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a05e:	7d 4b                	jge    c000a0ab <sinc_hex_vari_process+0x152>
c000a060:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a063:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a066:	01 c8                	add    eax,ecx
c000a068:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a06b:	99                   	cdq    
c000a06c:	f7 f9                	idiv   ecx
c000a06e:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a072:	7d 09                	jge    c000a07d <sinc_hex_vari_process+0x124>
c000a074:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a077:	85 c0                	test   eax,eax
c000a079:	79 57                	jns    c000a0d2 <sinc_hex_vari_process+0x179>
c000a07b:	eb 70                	jmp    c000a0ed <sinc_hex_vari_process+0x194>
c000a07d:	51                   	push   ecx
c000a07e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a082:	57                   	push   edi
c000a083:	53                   	push   ebx
c000a084:	e8 d2 fa ff ff       	call   c0009b5b <prepare_data>
c000a089:	83 c4 10             	add    esp,0x10
c000a08c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a08f:	85 c0                	test   eax,eax
c000a091:	0f 85 39 01 00 00    	jne    c000a1d0 <sinc_hex_vari_process+0x277>
c000a097:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a09a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a09d:	01 c8                	add    eax,ecx
c000a09f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a0a2:	99                   	cdq    
c000a0a3:	f7 f9                	idiv   ecx
c000a0a5:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a0a9:	7c c9                	jl     c000a074 <sinc_hex_vari_process+0x11b>
c000a0ab:	dd 04 24             	fld    QWORD PTR [esp]
c000a0ae:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a0b1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a0b5:	dd 1e                	fstp   QWORD PTR [esi]
c000a0b7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a0ba:	99                   	cdq    
c000a0bb:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0be:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a0c1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a0c4:	99                   	cdq    
c000a0c5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0c8:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a0cb:	31 c0                	xor    eax,eax
c000a0cd:	e9 fe 00 00 00       	jmp    c000a1d0 <sinc_hex_vari_process+0x277>
c000a0d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0d6:	dd 04 24             	fld    QWORD PTR [esp]
c000a0d9:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a0dc:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a0e0:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a0e4:	d9 c9                	fxch   st(1)
c000a0e6:	de d9                	fcompp 
c000a0e8:	df e0                	fnstsw ax
c000a0ea:	9e                   	sahf   
c000a0eb:	73 be                	jae    c000a0ab <sinc_hex_vari_process+0x152>
c000a0ed:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a0f1:	7e 31                	jle    c000a124 <sinc_hex_vari_process+0x1cb>
c000a0f3:	83 ec 10             	sub    esp,0x10
c000a0f6:	dd 06                	fld    QWORD PTR [esi]
c000a0f8:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a0fb:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0fe:	e8 7d 52 01 00       	call   c001f380 <fabs>
c000a103:	83 c4 10             	add    esp,0x10
c000a106:	dc 1d c0 0c 02 c0    	fcomp  QWORD PTR ds:0xc0020cc0
c000a10c:	df e0                	fnstsw ax
c000a10e:	9e                   	sahf   
c000a10f:	76 13                	jbe    c000a124 <sinc_hex_vari_process+0x1cb>
c000a111:	dd 06                	fld    QWORD PTR [esi]
c000a113:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a116:	d8 e1                	fsub   st,st(1)
c000a118:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a11b:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a11e:	de c1                	faddp  st(1),st
c000a120:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a124:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a127:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a12b:	d9 e8                	fld1   
c000a12d:	d8 d9                	fcomp  st(1)
c000a12f:	df e0                	fnstsw ax
c000a131:	9e                   	sahf   
c000a132:	77 04                	ja     c000a138 <sinc_hex_vari_process+0x1df>
c000a134:	dd d8                	fstp   st(0)
c000a136:	d9 e8                	fld1   
c000a138:	de c9                	fmulp  st(1),st
c000a13a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a13e:	50                   	push   eax
c000a13f:	50                   	push   eax
c000a140:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a144:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a148:	e8 a4 f9 ff ff       	call   c0009af1 <double_to_fp>
c000a14d:	89 c5                	mov    ebp,eax
c000a14f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a153:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a157:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a15a:	e8 92 f9 ff ff       	call   c0009af1 <double_to_fp>
c000a15f:	83 c4 0c             	add    esp,0xc
c000a162:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a165:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a168:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a16b:	89 c1                	mov    ecx,eax
c000a16d:	52                   	push   edx
c000a16e:	89 d8                	mov    eax,ebx
c000a170:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a174:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a177:	52                   	push   edx
c000a178:	52                   	push   edx
c000a179:	89 ea                	mov    edx,ebp
c000a17b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a17e:	e8 d1 f2 ff ff       	call   c0009454 <calc_output_hex>
c000a183:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a187:	d9 e8                	fld1   
c000a189:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a18d:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a191:	dd 14 24             	fst    QWORD PTR [esp]
c000a194:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a198:	e8 67 f9 ff ff       	call   c0009b04 <fmod_one>
c000a19d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a1a0:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a1a4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1a7:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a1ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1af:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a1b3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1b6:	e8 e5 51 01 00       	call   c001f3a0 <lrint>
c000a1bb:	0f af e8             	imul   ebp,eax
c000a1be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a1c2:	01 e8                	add    eax,ebp
c000a1c4:	99                   	cdq    
c000a1c5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a1c8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a1cb:	e9 85 fe ff ff       	jmp    c000a055 <sinc_hex_vari_process+0xfc>
c000a1d0:	83 c4 3c             	add    esp,0x3c
c000a1d3:	5b                   	pop    ebx
c000a1d4:	5e                   	pop    esi
c000a1d5:	5f                   	pop    edi
c000a1d6:	5d                   	pop    ebp
c000a1d7:	c3                   	ret    

c000a1d8 <sinc_quad_vari_process>:
c000a1d8:	55                   	push   ebp
c000a1d9:	b8 05 00 00 00       	mov    eax,0x5
c000a1de:	57                   	push   edi
c000a1df:	56                   	push   esi
c000a1e0:	53                   	push   ebx
c000a1e1:	83 ec 3c             	sub    esp,0x3c
c000a1e4:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a1e8:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a1ec:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a1ef:	85 db                	test   ebx,ebx
c000a1f1:	0f 84 58 02 00 00    	je     c000a44f <sinc_quad_vari_process+0x277>
c000a1f7:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a1fa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a1fd:	0f af d0             	imul   edx,eax
c000a200:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a203:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a207:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a20e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a211:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a218:	dd 06                	fld    QWORD PTR [esi]
c000a21a:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a21e:	55                   	push   ebp
c000a21f:	55                   	push   ebp
c000a220:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a223:	e8 d6 ed ff ff       	call   c0008ffe <is_bad_src_ratio>
c000a228:	89 c2                	mov    edx,eax
c000a22a:	58                   	pop    eax
c000a22b:	85 d2                	test   edx,edx
c000a22d:	59                   	pop    ecx
c000a22e:	b8 16 00 00 00       	mov    eax,0x16
c000a233:	0f 85 16 02 00 00    	jne    c000a44f <sinc_quad_vari_process+0x277>
c000a239:	d9 05 d0 0c 02 c0    	fld    DWORD PTR ds:0xc0020cd0
c000a23f:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a242:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a245:	dd 06                	fld    QWORD PTR [esi]
c000a247:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a24a:	d8 d1                	fcom   st(1)
c000a24c:	df e0                	fnstsw ax
c000a24e:	9e                   	sahf   
c000a24f:	76 0f                	jbe    c000a260 <sinc_quad_vari_process+0x88>
c000a251:	dd d8                	fstp   st(0)
c000a253:	d9 e8                	fld1   
c000a255:	d8 d9                	fcomp  st(1)
c000a257:	df e0                	fnstsw ax
c000a259:	9e                   	sahf   
c000a25a:	77 0f                	ja     c000a26b <sinc_quad_vari_process+0x93>
c000a25c:	dd d8                	fstp   st(0)
c000a25e:	eb 11                	jmp    c000a271 <sinc_quad_vari_process+0x99>
c000a260:	dd d9                	fstp   st(1)
c000a262:	d9 e8                	fld1   
c000a264:	d8 d9                	fcomp  st(1)
c000a266:	df e0                	fnstsw ax
c000a268:	9e                   	sahf   
c000a269:	76 04                	jbe    c000a26f <sinc_quad_vari_process+0x97>
c000a26b:	de f9                	fdivp  st(1),st
c000a26d:	eb 02                	jmp    c000a271 <sinc_quad_vari_process+0x99>
c000a26f:	dd d8                	fstp   st(0)
c000a271:	83 ec 10             	sub    esp,0x10
c000a274:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a277:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a27a:	e8 21 51 01 00       	call   c001f3a0 <lrint>
c000a27f:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a282:	40                   	inc    eax
c000a283:	dd 14 24             	fst    QWORD PTR [esp]
c000a286:	0f af c5             	imul   eax,ebp
c000a289:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a28d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a291:	e8 6e f8 ff ff       	call   c0009b04 <fmod_one>
c000a296:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a299:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a29d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a2a0:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a2a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a2a8:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a2ac:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2af:	e8 ec 50 01 00       	call   c001f3a0 <lrint>
c000a2b4:	0f af e8             	imul   ebp,eax
c000a2b7:	d9 e8                	fld1   
c000a2b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a2bd:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a2c1:	01 e8                	add    eax,ebp
c000a2c3:	dc 05 38 0b 02 c0    	fadd   QWORD PTR ds:0xc0020b38
c000a2c9:	99                   	cdq    
c000a2ca:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a2ce:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a2d1:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a2d4:	83 c4 10             	add    esp,0x10
c000a2d7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a2da:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a2dd:	7d 4b                	jge    c000a32a <sinc_quad_vari_process+0x152>
c000a2df:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2e2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2e5:	01 c8                	add    eax,ecx
c000a2e7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2ea:	99                   	cdq    
c000a2eb:	f7 f9                	idiv   ecx
c000a2ed:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a2f1:	7d 09                	jge    c000a2fc <sinc_quad_vari_process+0x124>
c000a2f3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a2f6:	85 c0                	test   eax,eax
c000a2f8:	79 57                	jns    c000a351 <sinc_quad_vari_process+0x179>
c000a2fa:	eb 70                	jmp    c000a36c <sinc_quad_vari_process+0x194>
c000a2fc:	51                   	push   ecx
c000a2fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a301:	57                   	push   edi
c000a302:	53                   	push   ebx
c000a303:	e8 53 f8 ff ff       	call   c0009b5b <prepare_data>
c000a308:	83 c4 10             	add    esp,0x10
c000a30b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a30e:	85 c0                	test   eax,eax
c000a310:	0f 85 39 01 00 00    	jne    c000a44f <sinc_quad_vari_process+0x277>
c000a316:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a319:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a31c:	01 c8                	add    eax,ecx
c000a31e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a321:	99                   	cdq    
c000a322:	f7 f9                	idiv   ecx
c000a324:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a328:	7c c9                	jl     c000a2f3 <sinc_quad_vari_process+0x11b>
c000a32a:	dd 04 24             	fld    QWORD PTR [esp]
c000a32d:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a330:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a334:	dd 1e                	fstp   QWORD PTR [esi]
c000a336:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a339:	99                   	cdq    
c000a33a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a33d:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a340:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a343:	99                   	cdq    
c000a344:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a347:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a34a:	31 c0                	xor    eax,eax
c000a34c:	e9 fe 00 00 00       	jmp    c000a44f <sinc_quad_vari_process+0x277>
c000a351:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a355:	dd 04 24             	fld    QWORD PTR [esp]
c000a358:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a35b:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a35f:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a363:	d9 c9                	fxch   st(1)
c000a365:	de d9                	fcompp 
c000a367:	df e0                	fnstsw ax
c000a369:	9e                   	sahf   
c000a36a:	73 be                	jae    c000a32a <sinc_quad_vari_process+0x152>
c000a36c:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a370:	7e 31                	jle    c000a3a3 <sinc_quad_vari_process+0x1cb>
c000a372:	83 ec 10             	sub    esp,0x10
c000a375:	dd 06                	fld    QWORD PTR [esi]
c000a377:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a37a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a37d:	e8 fe 4f 01 00       	call   c001f380 <fabs>
c000a382:	83 c4 10             	add    esp,0x10
c000a385:	dc 1d c0 0c 02 c0    	fcomp  QWORD PTR ds:0xc0020cc0
c000a38b:	df e0                	fnstsw ax
c000a38d:	9e                   	sahf   
c000a38e:	76 13                	jbe    c000a3a3 <sinc_quad_vari_process+0x1cb>
c000a390:	dd 06                	fld    QWORD PTR [esi]
c000a392:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a395:	d8 e1                	fsub   st,st(1)
c000a397:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a39a:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a39d:	de c1                	faddp  st(1),st
c000a39f:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a3a3:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a3a6:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a3aa:	d9 e8                	fld1   
c000a3ac:	d8 d9                	fcomp  st(1)
c000a3ae:	df e0                	fnstsw ax
c000a3b0:	9e                   	sahf   
c000a3b1:	77 04                	ja     c000a3b7 <sinc_quad_vari_process+0x1df>
c000a3b3:	dd d8                	fstp   st(0)
c000a3b5:	d9 e8                	fld1   
c000a3b7:	de c9                	fmulp  st(1),st
c000a3b9:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a3bd:	50                   	push   eax
c000a3be:	50                   	push   eax
c000a3bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3c3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3c7:	e8 25 f7 ff ff       	call   c0009af1 <double_to_fp>
c000a3cc:	89 c5                	mov    ebp,eax
c000a3ce:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a3d2:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a3d6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3d9:	e8 13 f7 ff ff       	call   c0009af1 <double_to_fp>
c000a3de:	83 c4 0c             	add    esp,0xc
c000a3e1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a3e4:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a3e7:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a3ea:	89 c1                	mov    ecx,eax
c000a3ec:	52                   	push   edx
c000a3ed:	89 d8                	mov    eax,ebx
c000a3ef:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a3f3:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a3f6:	52                   	push   edx
c000a3f7:	52                   	push   edx
c000a3f8:	89 ea                	mov    edx,ebp
c000a3fa:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3fd:	e8 8d ee ff ff       	call   c000928f <calc_output_quad>
c000a402:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a406:	d9 e8                	fld1   
c000a408:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a40c:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a410:	dd 14 24             	fst    QWORD PTR [esp]
c000a413:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a417:	e8 e8 f6 ff ff       	call   c0009b04 <fmod_one>
c000a41c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a41f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a423:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a426:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a42a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a42e:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a432:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a435:	e8 66 4f 01 00       	call   c001f3a0 <lrint>
c000a43a:	0f af e8             	imul   ebp,eax
c000a43d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a441:	01 e8                	add    eax,ebp
c000a443:	99                   	cdq    
c000a444:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a447:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a44a:	e9 85 fe ff ff       	jmp    c000a2d4 <sinc_quad_vari_process+0xfc>
c000a44f:	83 c4 3c             	add    esp,0x3c
c000a452:	5b                   	pop    ebx
c000a453:	5e                   	pop    esi
c000a454:	5f                   	pop    edi
c000a455:	5d                   	pop    ebp
c000a456:	c3                   	ret    

c000a457 <sinc_stereo_vari_process>:
c000a457:	55                   	push   ebp
c000a458:	b8 05 00 00 00       	mov    eax,0x5
c000a45d:	57                   	push   edi
c000a45e:	56                   	push   esi
c000a45f:	53                   	push   ebx
c000a460:	83 ec 3c             	sub    esp,0x3c
c000a463:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a467:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a46b:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a46e:	85 db                	test   ebx,ebx
c000a470:	0f 84 58 02 00 00    	je     c000a6ce <sinc_stereo_vari_process+0x277>
c000a476:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a479:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a47c:	0f af d0             	imul   edx,eax
c000a47f:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a482:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a486:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a48d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a490:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a497:	dd 06                	fld    QWORD PTR [esi]
c000a499:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a49d:	55                   	push   ebp
c000a49e:	55                   	push   ebp
c000a49f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4a2:	e8 57 eb ff ff       	call   c0008ffe <is_bad_src_ratio>
c000a4a7:	89 c2                	mov    edx,eax
c000a4a9:	58                   	pop    eax
c000a4aa:	85 d2                	test   edx,edx
c000a4ac:	59                   	pop    ecx
c000a4ad:	b8 16 00 00 00       	mov    eax,0x16
c000a4b2:	0f 85 16 02 00 00    	jne    c000a6ce <sinc_stereo_vari_process+0x277>
c000a4b8:	d9 05 d0 0c 02 c0    	fld    DWORD PTR ds:0xc0020cd0
c000a4be:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a4c1:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a4c4:	dd 06                	fld    QWORD PTR [esi]
c000a4c6:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a4c9:	d8 d1                	fcom   st(1)
c000a4cb:	df e0                	fnstsw ax
c000a4cd:	9e                   	sahf   
c000a4ce:	76 0f                	jbe    c000a4df <sinc_stereo_vari_process+0x88>
c000a4d0:	dd d8                	fstp   st(0)
c000a4d2:	d9 e8                	fld1   
c000a4d4:	d8 d9                	fcomp  st(1)
c000a4d6:	df e0                	fnstsw ax
c000a4d8:	9e                   	sahf   
c000a4d9:	77 0f                	ja     c000a4ea <sinc_stereo_vari_process+0x93>
c000a4db:	dd d8                	fstp   st(0)
c000a4dd:	eb 11                	jmp    c000a4f0 <sinc_stereo_vari_process+0x99>
c000a4df:	dd d9                	fstp   st(1)
c000a4e1:	d9 e8                	fld1   
c000a4e3:	d8 d9                	fcomp  st(1)
c000a4e5:	df e0                	fnstsw ax
c000a4e7:	9e                   	sahf   
c000a4e8:	76 04                	jbe    c000a4ee <sinc_stereo_vari_process+0x97>
c000a4ea:	de f9                	fdivp  st(1),st
c000a4ec:	eb 02                	jmp    c000a4f0 <sinc_stereo_vari_process+0x99>
c000a4ee:	dd d8                	fstp   st(0)
c000a4f0:	83 ec 10             	sub    esp,0x10
c000a4f3:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4f6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4f9:	e8 a2 4e 01 00       	call   c001f3a0 <lrint>
c000a4fe:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a501:	40                   	inc    eax
c000a502:	dd 14 24             	fst    QWORD PTR [esp]
c000a505:	0f af c5             	imul   eax,ebp
c000a508:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a50c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a510:	e8 ef f5 ff ff       	call   c0009b04 <fmod_one>
c000a515:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a518:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a51c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a51f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a527:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a52b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a52e:	e8 6d 4e 01 00       	call   c001f3a0 <lrint>
c000a533:	0f af e8             	imul   ebp,eax
c000a536:	d9 e8                	fld1   
c000a538:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a53c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a540:	01 e8                	add    eax,ebp
c000a542:	dc 05 38 0b 02 c0    	fadd   QWORD PTR ds:0xc0020b38
c000a548:	99                   	cdq    
c000a549:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a54d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a550:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a553:	83 c4 10             	add    esp,0x10
c000a556:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a559:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a55c:	7d 4b                	jge    c000a5a9 <sinc_stereo_vari_process+0x152>
c000a55e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a561:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a564:	01 c8                	add    eax,ecx
c000a566:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a569:	99                   	cdq    
c000a56a:	f7 f9                	idiv   ecx
c000a56c:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a570:	7d 09                	jge    c000a57b <sinc_stereo_vari_process+0x124>
c000a572:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a575:	85 c0                	test   eax,eax
c000a577:	79 57                	jns    c000a5d0 <sinc_stereo_vari_process+0x179>
c000a579:	eb 70                	jmp    c000a5eb <sinc_stereo_vari_process+0x194>
c000a57b:	51                   	push   ecx
c000a57c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a580:	57                   	push   edi
c000a581:	53                   	push   ebx
c000a582:	e8 d4 f5 ff ff       	call   c0009b5b <prepare_data>
c000a587:	83 c4 10             	add    esp,0x10
c000a58a:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a58d:	85 c0                	test   eax,eax
c000a58f:	0f 85 39 01 00 00    	jne    c000a6ce <sinc_stereo_vari_process+0x277>
c000a595:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a59b:	01 c8                	add    eax,ecx
c000a59d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a5a0:	99                   	cdq    
c000a5a1:	f7 f9                	idiv   ecx
c000a5a3:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a5a7:	7c c9                	jl     c000a572 <sinc_stereo_vari_process+0x11b>
c000a5a9:	dd 04 24             	fld    QWORD PTR [esp]
c000a5ac:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a5af:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a5b3:	dd 1e                	fstp   QWORD PTR [esi]
c000a5b5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a5b8:	99                   	cdq    
c000a5b9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5bc:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a5bf:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a5c2:	99                   	cdq    
c000a5c3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5c6:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a5c9:	31 c0                	xor    eax,eax
c000a5cb:	e9 fe 00 00 00       	jmp    c000a6ce <sinc_stereo_vari_process+0x277>
c000a5d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d4:	dd 04 24             	fld    QWORD PTR [esp]
c000a5d7:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a5da:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a5de:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a5e2:	d9 c9                	fxch   st(1)
c000a5e4:	de d9                	fcompp 
c000a5e6:	df e0                	fnstsw ax
c000a5e8:	9e                   	sahf   
c000a5e9:	73 be                	jae    c000a5a9 <sinc_stereo_vari_process+0x152>
c000a5eb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a5ef:	7e 31                	jle    c000a622 <sinc_stereo_vari_process+0x1cb>
c000a5f1:	83 ec 10             	sub    esp,0x10
c000a5f4:	dd 06                	fld    QWORD PTR [esi]
c000a5f6:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a5f9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5fc:	e8 7f 4d 01 00       	call   c001f380 <fabs>
c000a601:	83 c4 10             	add    esp,0x10
c000a604:	dc 1d c0 0c 02 c0    	fcomp  QWORD PTR ds:0xc0020cc0
c000a60a:	df e0                	fnstsw ax
c000a60c:	9e                   	sahf   
c000a60d:	76 13                	jbe    c000a622 <sinc_stereo_vari_process+0x1cb>
c000a60f:	dd 06                	fld    QWORD PTR [esi]
c000a611:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a614:	d8 e1                	fsub   st,st(1)
c000a616:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a619:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a61c:	de c1                	faddp  st(1),st
c000a61e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a622:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a625:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a629:	d9 e8                	fld1   
c000a62b:	d8 d9                	fcomp  st(1)
c000a62d:	df e0                	fnstsw ax
c000a62f:	9e                   	sahf   
c000a630:	77 04                	ja     c000a636 <sinc_stereo_vari_process+0x1df>
c000a632:	dd d8                	fstp   st(0)
c000a634:	d9 e8                	fld1   
c000a636:	de c9                	fmulp  st(1),st
c000a638:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a63c:	50                   	push   eax
c000a63d:	50                   	push   eax
c000a63e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a646:	e8 a6 f4 ff ff       	call   c0009af1 <double_to_fp>
c000a64b:	89 c5                	mov    ebp,eax
c000a64d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a651:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a655:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a658:	e8 94 f4 ff ff       	call   c0009af1 <double_to_fp>
c000a65d:	83 c4 0c             	add    esp,0xc
c000a660:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a663:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a666:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a669:	89 c1                	mov    ecx,eax
c000a66b:	52                   	push   edx
c000a66c:	89 d8                	mov    eax,ebx
c000a66e:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a672:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a675:	52                   	push   edx
c000a676:	52                   	push   edx
c000a677:	89 ea                	mov    edx,ebp
c000a679:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a67c:	e8 ce ea ff ff       	call   c000914f <calc_output_stereo>
c000a681:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a685:	d9 e8                	fld1   
c000a687:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a68b:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a68f:	dd 14 24             	fst    QWORD PTR [esp]
c000a692:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a696:	e8 69 f4 ff ff       	call   c0009b04 <fmod_one>
c000a69b:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a69e:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a6a2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a6a5:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a6a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a6ad:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a6b1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6b4:	e8 e7 4c 01 00       	call   c001f3a0 <lrint>
c000a6b9:	0f af e8             	imul   ebp,eax
c000a6bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a6c0:	01 e8                	add    eax,ebp
c000a6c2:	99                   	cdq    
c000a6c3:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a6c6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a6c9:	e9 85 fe ff ff       	jmp    c000a553 <sinc_stereo_vari_process+0xfc>
c000a6ce:	83 c4 3c             	add    esp,0x3c
c000a6d1:	5b                   	pop    ebx
c000a6d2:	5e                   	pop    esi
c000a6d3:	5f                   	pop    edi
c000a6d4:	5d                   	pop    ebp
c000a6d5:	c3                   	ret    

c000a6d6 <sinc_mono_vari_process>:
c000a6d6:	55                   	push   ebp
c000a6d7:	b8 05 00 00 00       	mov    eax,0x5
c000a6dc:	57                   	push   edi
c000a6dd:	56                   	push   esi
c000a6de:	53                   	push   ebx
c000a6df:	83 ec 3c             	sub    esp,0x3c
c000a6e2:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a6e6:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a6ea:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a6ed:	85 db                	test   ebx,ebx
c000a6ef:	0f 84 57 02 00 00    	je     c000a94c <sinc_mono_vari_process+0x276>
c000a6f5:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a6f8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6fb:	0f af d0             	imul   edx,eax
c000a6fe:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a701:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a705:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a70c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a70f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a716:	dd 06                	fld    QWORD PTR [esi]
c000a718:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a71c:	51                   	push   ecx
c000a71d:	51                   	push   ecx
c000a71e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a721:	e8 d8 e8 ff ff       	call   c0008ffe <is_bad_src_ratio>
c000a726:	5d                   	pop    ebp
c000a727:	89 c2                	mov    edx,eax
c000a729:	58                   	pop    eax
c000a72a:	85 d2                	test   edx,edx
c000a72c:	b8 16 00 00 00       	mov    eax,0x16
c000a731:	0f 85 15 02 00 00    	jne    c000a94c <sinc_mono_vari_process+0x276>
c000a737:	d9 05 d0 0c 02 c0    	fld    DWORD PTR ds:0xc0020cd0
c000a73d:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a740:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a743:	dd 06                	fld    QWORD PTR [esi]
c000a745:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a748:	d8 d1                	fcom   st(1)
c000a74a:	df e0                	fnstsw ax
c000a74c:	9e                   	sahf   
c000a74d:	76 0f                	jbe    c000a75e <sinc_mono_vari_process+0x88>
c000a74f:	dd d8                	fstp   st(0)
c000a751:	d9 e8                	fld1   
c000a753:	d8 d9                	fcomp  st(1)
c000a755:	df e0                	fnstsw ax
c000a757:	9e                   	sahf   
c000a758:	77 0f                	ja     c000a769 <sinc_mono_vari_process+0x93>
c000a75a:	dd d8                	fstp   st(0)
c000a75c:	eb 11                	jmp    c000a76f <sinc_mono_vari_process+0x99>
c000a75e:	dd d9                	fstp   st(1)
c000a760:	d9 e8                	fld1   
c000a762:	d8 d9                	fcomp  st(1)
c000a764:	df e0                	fnstsw ax
c000a766:	9e                   	sahf   
c000a767:	76 04                	jbe    c000a76d <sinc_mono_vari_process+0x97>
c000a769:	de f9                	fdivp  st(1),st
c000a76b:	eb 02                	jmp    c000a76f <sinc_mono_vari_process+0x99>
c000a76d:	dd d8                	fstp   st(0)
c000a76f:	83 ec 10             	sub    esp,0x10
c000a772:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a775:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a778:	e8 23 4c 01 00       	call   c001f3a0 <lrint>
c000a77d:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a780:	40                   	inc    eax
c000a781:	dd 14 24             	fst    QWORD PTR [esp]
c000a784:	0f af e8             	imul   ebp,eax
c000a787:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a78b:	e8 74 f3 ff ff       	call   c0009b04 <fmod_one>
c000a790:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a793:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a797:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a79b:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a79f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a7a2:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a7a6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a7aa:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7ad:	e8 ee 4b 01 00       	call   c001f3a0 <lrint>
c000a7b2:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a7b7:	d9 e8                	fld1   
c000a7b9:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a7bd:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a7c1:	99                   	cdq    
c000a7c2:	dc 05 38 0b 02 c0    	fadd   QWORD PTR ds:0xc0020b38
c000a7c8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a7cb:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a7cf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a7d2:	83 c4 10             	add    esp,0x10
c000a7d5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a7d8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a7db:	7d 44                	jge    c000a821 <sinc_mono_vari_process+0x14b>
c000a7dd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7e0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7e3:	01 c8                	add    eax,ecx
c000a7e5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7e8:	99                   	cdq    
c000a7e9:	f7 f9                	idiv   ecx
c000a7eb:	39 d5                	cmp    ebp,edx
c000a7ed:	7d 09                	jge    c000a7f8 <sinc_mono_vari_process+0x122>
c000a7ef:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a7f2:	85 c0                	test   eax,eax
c000a7f4:	79 52                	jns    c000a848 <sinc_mono_vari_process+0x172>
c000a7f6:	eb 6b                	jmp    c000a863 <sinc_mono_vari_process+0x18d>
c000a7f8:	52                   	push   edx
c000a7f9:	55                   	push   ebp
c000a7fa:	57                   	push   edi
c000a7fb:	53                   	push   ebx
c000a7fc:	e8 5a f3 ff ff       	call   c0009b5b <prepare_data>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a807:	85 c0                	test   eax,eax
c000a809:	0f 85 3d 01 00 00    	jne    c000a94c <sinc_mono_vari_process+0x276>
c000a80f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a812:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a815:	01 c8                	add    eax,ecx
c000a817:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a81a:	99                   	cdq    
c000a81b:	f7 f9                	idiv   ecx
c000a81d:	39 d5                	cmp    ebp,edx
c000a81f:	7c ce                	jl     c000a7ef <sinc_mono_vari_process+0x119>
c000a821:	dd 04 24             	fld    QWORD PTR [esp]
c000a824:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a827:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a82b:	dd 1e                	fstp   QWORD PTR [esi]
c000a82d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a830:	99                   	cdq    
c000a831:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a834:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a837:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a83a:	99                   	cdq    
c000a83b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a83e:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a841:	31 c0                	xor    eax,eax
c000a843:	e9 04 01 00 00       	jmp    c000a94c <sinc_mono_vari_process+0x276>
c000a848:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a84c:	dd 04 24             	fld    QWORD PTR [esp]
c000a84f:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a852:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a856:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a85a:	d9 c9                	fxch   st(1)
c000a85c:	de d9                	fcompp 
c000a85e:	df e0                	fnstsw ax
c000a860:	9e                   	sahf   
c000a861:	77 be                	ja     c000a821 <sinc_mono_vari_process+0x14b>
c000a863:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a867:	7e 31                	jle    c000a89a <sinc_mono_vari_process+0x1c4>
c000a869:	83 ec 10             	sub    esp,0x10
c000a86c:	dd 06                	fld    QWORD PTR [esi]
c000a86e:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a871:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a874:	e8 07 4b 01 00       	call   c001f380 <fabs>
c000a879:	83 c4 10             	add    esp,0x10
c000a87c:	dc 1d c0 0c 02 c0    	fcomp  QWORD PTR ds:0xc0020cc0
c000a882:	df e0                	fnstsw ax
c000a884:	9e                   	sahf   
c000a885:	76 13                	jbe    c000a89a <sinc_mono_vari_process+0x1c4>
c000a887:	dd 06                	fld    QWORD PTR [esi]
c000a889:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a88c:	d8 e1                	fsub   st,st(1)
c000a88e:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a891:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a894:	de c1                	faddp  st(1),st
c000a896:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a89a:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a89d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a8a1:	d9 e8                	fld1   
c000a8a3:	d8 d9                	fcomp  st(1)
c000a8a5:	df e0                	fnstsw ax
c000a8a7:	9e                   	sahf   
c000a8a8:	77 04                	ja     c000a8ae <sinc_mono_vari_process+0x1d8>
c000a8aa:	dd d8                	fstp   st(0)
c000a8ac:	d9 e8                	fld1   
c000a8ae:	de c9                	fmulp  st(1),st
c000a8b0:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a8b4:	50                   	push   eax
c000a8b5:	50                   	push   eax
c000a8b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8be:	e8 2e f2 ff ff       	call   c0009af1 <double_to_fp>
c000a8c3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a8c7:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a8cb:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8cf:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8d2:	e8 1a f2 ff ff       	call   c0009af1 <double_to_fp>
c000a8d7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a8db:	89 c1                	mov    ecx,eax
c000a8dd:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a8e1:	89 d8                	mov    eax,ebx
c000a8e3:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a8e6:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a8ea:	e8 7b e7 ff ff       	call   c000906a <calc_output_single>
c000a8ef:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a8f2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a8f5:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8f9:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a8fc:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a8ff:	d9 e8                	fld1   
c000a901:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a905:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a909:	dd 14 24             	fst    QWORD PTR [esp]
c000a90c:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a910:	e8 ef f1 ff ff       	call   c0009b04 <fmod_one>
c000a915:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a918:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a91c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a920:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a924:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a927:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a92b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a92f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a932:	e8 69 4a 01 00       	call   c001f3a0 <lrint>
c000a937:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a93c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a940:	99                   	cdq    
c000a941:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a944:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a947:	e9 86 fe ff ff       	jmp    c000a7d2 <sinc_mono_vari_process+0xfc>
c000a94c:	83 c4 3c             	add    esp,0x3c
c000a94f:	5b                   	pop    ebx
c000a950:	5e                   	pop    esi
c000a951:	5f                   	pop    edi
c000a952:	5d                   	pop    ebp
c000a953:	c3                   	ret    

c000a954 <sinc_get_name>:
c000a954:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a958:	31 c0                	xor    eax,eax
c000a95a:	83 fa 02             	cmp    edx,0x2
c000a95d:	77 07                	ja     c000a966 <sinc_get_name+0x12>
c000a95f:	8b 04 95 a0 0b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf460]
c000a966:	c3                   	ret    

c000a967 <sinc_get_description>:
c000a967:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a96b:	31 c0                	xor    eax,eax
c000a96d:	83 fa 02             	cmp    edx,0x2
c000a970:	77 07                	ja     c000a979 <sinc_get_description+0x12>
c000a972:	8b 04 95 94 0b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf46c]
c000a979:	c3                   	ret    

c000a97a <sinc_set_converter>:
c000a97a:	53                   	push   ebx
c000a97b:	81 ec 58 08 00 00    	sub    esp,0x858
c000a981:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a988:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a98b:	85 c0                	test   eax,eax
c000a98d:	74 13                	je     c000a9a2 <sinc_set_converter+0x28>
c000a98f:	83 ec 0c             	sub    esp,0xc
c000a992:	50                   	push   eax
c000a993:	e8 7c 16 00 00       	call   c000c014 <free>
c000a998:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a99f:	83 c4 10             	add    esp,0x10
c000a9a2:	50                   	push   eax
c000a9a3:	68 44 08 00 00       	push   0x844
c000a9a8:	6a 00                	push   0x0
c000a9aa:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a9ae:	50                   	push   eax
c000a9af:	e8 06 5d ff ff       	call   c00006ba <memset>
c000a9b4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a9b7:	83 c4 10             	add    esp,0x10
c000a9ba:	b8 0b 00 00 00       	mov    eax,0xb
c000a9bf:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a9c5:	7f 6e                	jg     c000aa35 <sinc_set_converter+0xbb>
c000a9c7:	83 fa 01             	cmp    edx,0x1
c000a9ca:	75 10                	jne    c000a9dc <sinc_set_converter+0x62>
c000a9cc:	c7 43 24 d6 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a6d6
c000a9d3:	c7 43 20 d6 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a6d6
c000a9da:	eb 4d                	jmp    c000aa29 <sinc_set_converter+0xaf>
c000a9dc:	83 fa 02             	cmp    edx,0x2
c000a9df:	75 10                	jne    c000a9f1 <sinc_set_converter+0x77>
c000a9e1:	c7 43 24 57 a4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a457
c000a9e8:	c7 43 20 57 a4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a457
c000a9ef:	eb 38                	jmp    c000aa29 <sinc_set_converter+0xaf>
c000a9f1:	83 fa 04             	cmp    edx,0x4
c000a9f4:	75 10                	jne    c000aa06 <sinc_set_converter+0x8c>
c000a9f6:	c7 43 24 d8 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a1d8
c000a9fd:	c7 43 20 d8 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a1d8
c000aa04:	eb 23                	jmp    c000aa29 <sinc_set_converter+0xaf>
c000aa06:	83 fa 06             	cmp    edx,0x6
c000aa09:	75 10                	jne    c000aa1b <sinc_set_converter+0xa1>
c000aa0b:	c7 43 24 59 9f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009f59
c000aa12:	c7 43 20 59 9f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009f59
c000aa19:	eb 0e                	jmp    c000aa29 <sinc_set_converter+0xaf>
c000aa1b:	c7 43 24 d5 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009cd5
c000aa22:	c7 43 20 d5 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009cd5
c000aa29:	c7 43 28 85 96 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009685
c000aa30:	b8 0a 00 00 00       	mov    eax,0xa
c000aa35:	81 c4 58 08 00 00    	add    esp,0x858
c000aa3b:	5b                   	pop    ebx
c000aa3c:	c3                   	ret    

c000aa3d <is_bad_src_ratio>:
c000aa3d:	83 ec 0c             	sub    esp,0xc
c000aa40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa44:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa4f:	dd 04 24             	fld    QWORD PTR [esp]
c000aa52:	dd 05 c0 0a 02 c0    	fld    QWORD PTR ds:0xc0020ac0
c000aa58:	de d9                	fcompp 
c000aa5a:	df e0                	fnstsw ax
c000aa5c:	f6 c4 45             	test   ah,0x45
c000aa5f:	74 10                	je     c000aa71 <is_bad_src_ratio+0x34>
c000aa61:	dd 04 24             	fld    QWORD PTR [esp]
c000aa64:	dc 1d c8 0a 02 c0    	fcomp  QWORD PTR ds:0xc0020ac8
c000aa6a:	df e0                	fnstsw ax
c000aa6c:	f6 c4 45             	test   ah,0x45
c000aa6f:	75 07                	jne    c000aa78 <is_bad_src_ratio+0x3b>
c000aa71:	b8 01 00 00 00       	mov    eax,0x1
c000aa76:	eb 05                	jmp    c000aa7d <is_bad_src_ratio+0x40>
c000aa78:	b8 00 00 00 00       	mov    eax,0x0
c000aa7d:	83 c4 0c             	add    esp,0xc
c000aa80:	c3                   	ret    

c000aa81 <fmod_one>:
c000aa81:	83 ec 2c             	sub    esp,0x2c
c000aa84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa94:	83 ec 08             	sub    esp,0x8
c000aa97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa9f:	e8 fc 48 01 00       	call   c001f3a0 <lrint>
c000aaa4:	83 c4 10             	add    esp,0x10
c000aaa7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aaab:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000aaaf:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aab3:	de e1                	fsubrp st(1),st
c000aab5:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aab9:	d9 ee                	fldz   
c000aabb:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aabf:	df e0                	fnstsw ax
c000aac1:	f6 c4 45             	test   ah,0x45
c000aac4:	75 0a                	jne    c000aad0 <fmod_one+0x4f>
c000aac6:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aaca:	d9 e8                	fld1   
c000aacc:	de c1                	faddp  st(1),st
c000aace:	eb 04                	jmp    c000aad4 <fmod_one+0x53>
c000aad0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aad4:	83 c4 2c             	add    esp,0x2c
c000aad7:	c3                   	ret    

c000aad8 <zoh_vari_process>:
c000aad8:	55                   	push   ebp
c000aad9:	57                   	push   edi
c000aada:	56                   	push   esi
c000aadb:	53                   	push   ebx
c000aadc:	83 ec 2c             	sub    esp,0x2c
c000aadf:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aae3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aae7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aaef:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aaf3:	0f 8e 34 02 00 00    	jle    c000ad2d <zoh_vari_process+0x255>
c000aaf9:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aafc:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000ab04:	85 db                	test   ebx,ebx
c000ab06:	0f 84 21 02 00 00    	je     c000ad2d <zoh_vari_process+0x255>
c000ab0c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab0f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000ab13:	74 19                	je     c000ab2e <zoh_vari_process+0x56>
c000ab15:	31 d2                	xor    edx,edx
c000ab17:	39 c2                	cmp    edx,eax
c000ab19:	7d 0c                	jge    c000ab27 <zoh_vari_process+0x4f>
c000ab1b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ab1d:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000ab20:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ab24:	42                   	inc    edx
c000ab25:	eb f0                	jmp    c000ab17 <zoh_vari_process+0x3f>
c000ab27:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ab2e:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ab31:	0f af d0             	imul   edx,eax
c000ab34:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ab37:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ab3b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ab42:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ab45:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ab4c:	dd 07                	fld    QWORD PTR [edi]
c000ab4e:	dd 14 24             	fst    QWORD PTR [esp]
c000ab51:	50                   	push   eax
c000ab52:	50                   	push   eax
c000ab53:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab56:	e8 e2 fe ff ff       	call   c000aa3d <is_bad_src_ratio>
c000ab5b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ab5f:	5a                   	pop    edx
c000ab60:	59                   	pop    ecx
c000ab61:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000ab66:	0f 85 b9 01 00 00    	jne    c000ad25 <zoh_vari_process+0x24d>
c000ab6c:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000ab6f:	d9 e8                	fld1   
c000ab71:	d8 d1                	fcom   st(1)
c000ab73:	df e0                	fnstsw ax
c000ab75:	9e                   	sahf   
c000ab76:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab7a:	0f 86 85 00 00 00    	jbe    c000ac05 <zoh_vari_process+0x12d>
c000ab80:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab83:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab86:	7d 7d                	jge    c000ac05 <zoh_vari_process+0x12d>
c000ab88:	d9 c0                	fld    st(0)
c000ab8a:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ab8d:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000ab90:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000ab93:	df e0                	fnstsw ax
c000ab95:	9e                   	sahf   
c000ab96:	73 6d                	jae    c000ac05 <zoh_vari_process+0x12d>
c000ab98:	85 d2                	test   edx,edx
c000ab9a:	7e 38                	jle    c000abd4 <zoh_vari_process+0xfc>
c000ab9c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aba0:	83 ec 10             	sub    esp,0x10
c000aba3:	dd 07                	fld    QWORD PTR [edi]
c000aba5:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000aba8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abab:	e8 d0 47 01 00       	call   c001f380 <fabs>
c000abb0:	83 c4 10             	add    esp,0x10
c000abb3:	dc 1d 38 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020b38
c000abb9:	df e0                	fnstsw ax
c000abbb:	9e                   	sahf   
c000abbc:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000abc0:	76 12                	jbe    c000abd4 <zoh_vari_process+0xfc>
c000abc2:	dd 07                	fld    QWORD PTR [edi]
c000abc4:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abc7:	d8 e1                	fsub   st,st(1)
c000abc9:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abcc:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abcf:	de c1                	faddp  st(1),st
c000abd1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abd4:	31 c0                	xor    eax,eax
c000abd6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000abd9:	7e 13                	jle    c000abee <zoh_vari_process+0x116>
c000abdb:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000abdf:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000abe2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000abe5:	40                   	inc    eax
c000abe6:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000abe9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000abec:	eb e8                	jmp    c000abd6 <zoh_vari_process+0xfe>
c000abee:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abf2:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abf5:	de c1                	faddp  st(1),st
c000abf7:	e9 73 ff ff ff       	jmp    c000ab6f <zoh_vari_process+0x97>
c000abfc:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ac00:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ac03:	de c1                	faddp  st(1),st
c000ac05:	83 ec 10             	sub    esp,0x10
c000ac08:	dd 14 24             	fst    QWORD PTR [esp]
c000ac0b:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ac0f:	e8 6d fe ff ff       	call   c000aa81 <fmod_one>
c000ac14:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac17:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ac1b:	d8 e1                	fsub   st,st(1)
c000ac1d:	d9 c9                	fxch   st(1)
c000ac1f:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ac23:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac26:	e8 75 47 01 00       	call   c001f3a0 <lrint>
c000ac2b:	83 c4 10             	add    esp,0x10
c000ac2e:	0f af e8             	imul   ebp,eax
c000ac31:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ac34:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ac37:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac3b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ac3e:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ac41:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ac44:	0f 8d 82 00 00 00    	jge    c000accc <zoh_vari_process+0x1f4>
c000ac4a:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ac4e:	d9 c0                	fld    st(0)
c000ac50:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ac53:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000ac57:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ac5b:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000ac5f:	de d9                	fcompp 
c000ac61:	df e0                	fnstsw ax
c000ac63:	9e                   	sahf   
c000ac64:	72 66                	jb     c000accc <zoh_vari_process+0x1f4>
c000ac66:	85 d2                	test   edx,edx
c000ac68:	7e 38                	jle    c000aca2 <zoh_vari_process+0x1ca>
c000ac6a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ac6e:	83 ec 10             	sub    esp,0x10
c000ac71:	dd 07                	fld    QWORD PTR [edi]
c000ac73:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ac76:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac79:	e8 02 47 01 00       	call   c001f380 <fabs>
c000ac7e:	83 c4 10             	add    esp,0x10
c000ac81:	dc 1d 38 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020b38
c000ac87:	df e0                	fnstsw ax
c000ac89:	9e                   	sahf   
c000ac8a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac8e:	76 12                	jbe    c000aca2 <zoh_vari_process+0x1ca>
c000ac90:	dd 07                	fld    QWORD PTR [edi]
c000ac92:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ac95:	d8 e1                	fsub   st,st(1)
c000ac97:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ac9a:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ac9d:	de c1                	faddp  st(1),st
c000ac9f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aca2:	31 d2                	xor    edx,edx
c000aca4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aca7:	39 d0                	cmp    eax,edx
c000aca9:	0f 8e 4d ff ff ff    	jle    c000abfc <zoh_vari_process+0x124>
c000acaf:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000acb2:	29 c1                	sub    ecx,eax
c000acb4:	89 c8                	mov    eax,ecx
c000acb6:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000acb8:	01 d0                	add    eax,edx
c000acba:	42                   	inc    edx
c000acbb:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000acbe:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000acc1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000acc4:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000acc7:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000acca:	eb d8                	jmp    c000aca4 <zoh_vari_process+0x1cc>
c000accc:	39 e9                	cmp    ecx,ebp
c000acce:	7d 13                	jge    c000ace3 <zoh_vari_process+0x20b>
c000acd0:	89 e8                	mov    eax,ebp
c000acd2:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000acd5:	29 c8                	sub    eax,ecx
c000acd7:	99                   	cdq    
c000acd8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acdb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acdf:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000ace3:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000ace6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ace9:	85 c0                	test   eax,eax
c000aceb:	7f 1b                	jg     c000ad08 <zoh_vari_process+0x230>
c000aced:	dd 04 24             	fld    QWORD PTR [esp]
c000acf0:	dd 1f                	fstp   QWORD PTR [edi]
c000acf2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000acf5:	99                   	cdq    
c000acf6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acf9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000acfc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000acff:	99                   	cdq    
c000ad00:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ad03:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000ad06:	eb 25                	jmp    c000ad2d <zoh_vari_process+0x255>
c000ad08:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ad0b:	31 d2                	xor    edx,edx
c000ad0d:	29 e8                	sub    eax,ebp
c000ad0f:	c1 e0 02             	shl    eax,0x2
c000ad12:	39 d5                	cmp    ebp,edx
c000ad14:	7e d7                	jle    c000aced <zoh_vari_process+0x215>
c000ad16:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ad18:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ad1b:	83 c0 04             	add    eax,0x4
c000ad1e:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ad22:	42                   	inc    edx
c000ad23:	eb ed                	jmp    c000ad12 <zoh_vari_process+0x23a>
c000ad25:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ad2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ad31:	83 c4 2c             	add    esp,0x2c
c000ad34:	5b                   	pop    ebx
c000ad35:	5e                   	pop    esi
c000ad36:	5f                   	pop    edi
c000ad37:	5d                   	pop    ebp
c000ad38:	c3                   	ret    

c000ad39 <zoh_reset>:
c000ad39:	83 ec 0c             	sub    esp,0xc
c000ad3c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad40:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ad43:	85 c0                	test   eax,eax
c000ad45:	74 20                	je     c000ad67 <zoh_reset+0x2e>
c000ad47:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ad4a:	83 c0 1c             	add    eax,0x1c
c000ad4d:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000ad50:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000ad57:	c1 e2 02             	shl    edx,0x2
c000ad5a:	51                   	push   ecx
c000ad5b:	52                   	push   edx
c000ad5c:	6a 00                	push   0x0
c000ad5e:	50                   	push   eax
c000ad5f:	e8 56 59 ff ff       	call   c00006ba <memset>
c000ad64:	83 c4 10             	add    esp,0x10
c000ad67:	83 c4 0c             	add    esp,0xc
c000ad6a:	c3                   	ret    

c000ad6b <zoh_get_name>:
c000ad6b:	31 c0                	xor    eax,eax
c000ad6d:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad72:	75 05                	jne    c000ad79 <zoh_get_name+0xe>
c000ad74:	b8 d4 0c 02 c0       	mov    eax,0xc0020cd4
c000ad79:	c3                   	ret    

c000ad7a <zoh_get_description>:
c000ad7a:	31 c0                	xor    eax,eax
c000ad7c:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad81:	75 05                	jne    c000ad88 <zoh_get_description+0xe>
c000ad83:	b8 e5 0c 02 c0       	mov    eax,0xc0020ce5
c000ad88:	c3                   	ret    

c000ad89 <zoh_set_converter>:
c000ad89:	53                   	push   ebx
c000ad8a:	b8 0a 00 00 00       	mov    eax,0xa
c000ad8f:	83 ec 08             	sub    esp,0x8
c000ad92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad96:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ad9b:	75 6e                	jne    c000ae0b <zoh_set_converter+0x82>
c000ad9d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000ada0:	85 c0                	test   eax,eax
c000ada2:	74 13                	je     c000adb7 <zoh_set_converter+0x2e>
c000ada4:	83 ec 0c             	sub    esp,0xc
c000ada7:	50                   	push   eax
c000ada8:	e8 67 12 00 00       	call   c000c014 <free>
c000adad:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000adb4:	83 c4 10             	add    esp,0x10
c000adb7:	50                   	push   eax
c000adb8:	50                   	push   eax
c000adb9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000adbc:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000adc3:	50                   	push   eax
c000adc4:	6a 01                	push   0x1
c000adc6:	e8 69 12 00 00       	call   c000c034 <calloc>
c000adcb:	83 c4 10             	add    esp,0x10
c000adce:	89 c2                	mov    edx,eax
c000add0:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000add3:	85 d2                	test   edx,edx
c000add5:	b8 01 00 00 00       	mov    eax,0x1
c000adda:	74 2f                	je     c000ae0b <zoh_set_converter+0x82>
c000addc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000addf:	83 ec 0c             	sub    esp,0xc
c000ade2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ade5:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000adeb:	c7 43 24 d8 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aad8
c000adf2:	c7 43 20 d8 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aad8
c000adf9:	c7 43 28 39 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad39
c000ae00:	53                   	push   ebx
c000ae01:	e8 33 ff ff ff       	call   c000ad39 <zoh_reset>
c000ae06:	83 c4 10             	add    esp,0x10
c000ae09:	31 c0                	xor    eax,eax
c000ae0b:	83 c4 08             	add    esp,0x8
c000ae0e:	5b                   	pop    ebx
c000ae0f:	c3                   	ret    

c000ae10 <Computer::close(int, int, void*)>:
c000ae10:	57                   	push   edi
c000ae11:	56                   	push   esi
c000ae12:	53                   	push   ebx
c000ae13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae17:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ae1b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ae1f:	83 ec 0c             	sub    esp,0xc
c000ae22:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000ae28:	e8 49 58 00 00       	call   c0010676 <Device::closeAll()>
c000ae2d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ae33:	83 c4 10             	add    esp,0x10
c000ae36:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae38:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ae3c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ae44:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ae48:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae4c:	5b                   	pop    ebx
c000ae4d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ae50:	5e                   	pop    esi
c000ae51:	5f                   	pop    edi
c000ae52:	ff e0                	jmp    eax

c000ae54 <Computer::Computer()>:
c000ae54:	83 ec 0c             	sub    esp,0xc
c000ae57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5b:	83 ec 08             	sub    esp,0x8
c000ae5e:	68 1c 0d 02 c0       	push   0xc0020d1c
c000ae63:	50                   	push   eax
c000ae64:	e8 87 58 00 00       	call   c00106f0 <Device::Device(char const*)>
c000ae69:	83 c4 10             	add    esp,0x10
c000ae6c:	ba e4 0e 02 c0       	mov    edx,0xc0020ee4
c000ae71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae75:	89 10                	mov    DWORD PTR [eax],edx
c000ae77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7b:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ae85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae89:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ae93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae97:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ae9d:	83 ca 04             	or     edx,0x4
c000aea0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000aea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeaa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeb0:	0f b6 d0             	movzx  edx,al
c000aeb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb7:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000aebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aec8:	0f b6 d0             	movzx  edx,al
c000aecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aecf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000aed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aede:	8d 50 01             	lea    edx,[eax+0x1]
c000aee1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aee5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aeeb:	0f b6 d0             	movzx  edx,al
c000aeee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aef2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aef6:	83 e1 3f             	and    ecx,0x3f
c000aef9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aefd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af01:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af07:	0f b6 d0             	movzx  edx,al
c000af0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af0e:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000af15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af19:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af1f:	0f b6 d0             	movzx  edx,al
c000af22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af26:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af2f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af35:	8d 50 01             	lea    edx,[eax+0x1]
c000af38:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af3c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af42:	0f b6 d0             	movzx  edx,al
c000af45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af49:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af4d:	83 e1 3f             	and    ecx,0x3f
c000af50:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af58:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af5e:	0f b6 d0             	movzx  edx,al
c000af61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af65:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000af6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af70:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af76:	0f b6 d0             	movzx  edx,al
c000af79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af7d:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af86:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af8c:	8d 50 01             	lea    edx,[eax+0x1]
c000af8f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af93:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af99:	0f b6 d0             	movzx  edx,al
c000af9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000afa4:	83 e1 3f             	and    ecx,0x3f
c000afa7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000afab:	90                   	nop
c000afac:	83 c4 0c             	add    esp,0xc
c000afaf:	c3                   	ret    

c000afb0 <Computer::setBootMessage(char const*)>:
c000afb0:	c3                   	ret    
c000afb1:	90                   	nop

c000afb2 <Computer::start()>:
c000afb2:	56                   	push   esi
c000afb3:	53                   	push   ebx
c000afb4:	50                   	push   eax
c000afb5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000afb9:	e8 20 d8 00 00       	call   c00187de <lockScheduler()>
c000afbe:	e8 4f db 00 00       	call   c0018b12 <schedule()>
c000afc3:	e8 18 d8 00 00       	call   c00187e0 <unlockScheduler()>
c000afc8:	fb                   	sti    
c000afc9:	83 ec 0c             	sub    esp,0xc
c000afcc:	68 3b 07 00 00       	push   0x73b
c000afd1:	e8 30 40 00 00       	call   c000f006 <operator new(unsigned long)>
c000afd6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000afdd:	89 c6                	mov    esi,eax
c000afdf:	ff 35 34 57 02 c0    	push   DWORD PTR ds:0xc0025734
c000afe5:	68 25 0d 02 c0       	push   0xc0020d25
c000afea:	6a 01                	push   0x1
c000afec:	50                   	push   eax
c000afed:	e8 4c d6 00 00       	call   c001863e <Process::Process(bool, char const*, Process*, char**)>
c000aff2:	83 c4 20             	add    esp,0x20
c000aff5:	68 ff 00 00 00       	push   0xff
c000affa:	6a 00                	push   0x0
c000affc:	68 91 b9 00 c0       	push   0xc000b991
c000b001:	56                   	push   esi
c000b002:	e8 01 d9 00 00       	call   c0018908 <Process::createThread(void (*)(void*), void*, int)>
c000b007:	6a 7a                	push   0x7a
c000b009:	6a 00                	push   0x0
c000b00b:	68 41 91 01 c0       	push   0xc0019141
c000b010:	ff 35 34 57 02 c0    	push   DWORD PTR ds:0xc0025734
c000b016:	e8 ed d8 00 00       	call   c0018908 <Process::createThread(void (*)(void*), void*, int)>
c000b01b:	83 c4 20             	add    esp,0x20
c000b01e:	a3 e8 56 02 c0       	mov    ds:0xc00256e8,eax
c000b023:	c6 05 ed 42 02 c0 01 	mov    BYTE PTR ds:0xc00242ed,0x1
c000b02a:	e8 21 44 00 00       	call   c000f450 <initVFS()>
c000b02f:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b035:	8b 10                	mov    edx,DWORD PTR [eax]
c000b037:	6a 00                	push   0x0
c000b039:	6a 00                	push   0x0
c000b03b:	6a 00                	push   0x0
c000b03d:	50                   	push   eax
c000b03e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b041:	e8 f5 bf 00 00       	call   c001703b <setupSystemCalls()>
c000b046:	e8 03 4f 00 00       	call   c000ff4e <loadClockSettings()>
c000b04b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b04e:	e8 f7 55 00 00       	call   c001064a <Device::loadDriversForAll()>
c000b053:	5a                   	pop    edx
c000b054:	8b 1d e8 42 02 c0    	mov    ebx,DWORD PTR ds:0xc00242e8
c000b05a:	59                   	pop    ecx
c000b05b:	6a 01                	push   0x1
c000b05d:	68 32 0d 02 c0       	push   0xc0020d32
c000b062:	e8 a6 d1 00 00       	call   c001820d <Thr::loadDLL(char const*, bool)>
c000b067:	5e                   	pop    esi
c000b068:	5a                   	pop    edx
c000b069:	53                   	push   ebx
c000b06a:	50                   	push   eax
c000b06b:	e8 63 d3 00 00       	call   c00183d3 <Thr::executeDLL(unsigned long, void*)>
c000b070:	83 c4 10             	add    esp,0x10
c000b073:	eb fe                	jmp    c000b073 <Computer::start()+0xc1>

c000b075 <firstTask()>:
c000b075:	83 ec 18             	sub    esp,0x18
c000b078:	ff 35 e8 42 02 c0    	push   DWORD PTR ds:0xc00242e8
c000b07e:	e8 2f ff ff ff       	call   c000afb2 <Computer::start()>
c000b083:	90                   	nop

c000b084 <Computer::detectFeatures()>:
c000b084:	55                   	push   ebp
c000b085:	57                   	push   edi
c000b086:	56                   	push   esi
c000b087:	53                   	push   ebx
c000b088:	83 ec 1c             	sub    esp,0x1c
c000b08b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b08f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000b099:	e8 d3 52 ff ff       	call   c0000371 <detectCPUID>
c000b09e:	85 c0                	test   eax,eax
c000b0a0:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0a6:	0f 95 c2             	setne  dl
c000b0a9:	83 e0 fd             	and    eax,0xfffffffd
c000b0ac:	d1 e2                	shl    edx,1
c000b0ae:	09 d0                	or     eax,edx
c000b0b0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0b6:	a8 02                	test   al,0x2
c000b0b8:	75 46                	jne    c000b100 <Computer::detectFeatures()+0x7c>
c000b0ba:	f6 05 01 43 02 c0 04 	test   BYTE PTR ds:0xc0024301,0x4
c000b0c1:	74 07                	je     c000b0ca <Computer::detectFeatures()+0x46>
c000b0c3:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b0ca:	e8 57 3d 01 00       	call   c001ee26 <x87Detect>
c000b0cf:	83 e0 01             	and    eax,0x1
c000b0d2:	c1 e0 04             	shl    eax,0x4
c000b0d5:	88 c2                	mov    dl,al
c000b0d7:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0dd:	83 e0 ef             	and    eax,0xffffffef
c000b0e0:	09 d0                	or     eax,edx
c000b0e2:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0e8:	a8 10                	test   al,0x10
c000b0ea:	0f 85 10 01 00 00    	jne    c000b200 <Computer::detectFeatures()+0x17c>
c000b0f0:	84 c0                	test   al,al
c000b0f2:	0f 88 2b 01 00 00    	js     c000b223 <Computer::detectFeatures()+0x19f>
c000b0f8:	83 c4 1c             	add    esp,0x1c
c000b0fb:	5b                   	pop    ebx
c000b0fc:	5e                   	pop    esi
c000b0fd:	5f                   	pop    edi
c000b0fe:	5d                   	pop    ebp
c000b0ff:	c3                   	ret    
c000b100:	83 ec 0c             	sub    esp,0xc
c000b103:	6a 20                	push   0x20
c000b105:	e8 59 95 00 00       	call   c0014663 <cpuidCheckEDX(unsigned int)>
c000b10a:	83 e0 01             	and    eax,0x1
c000b10d:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b114:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b11a:	83 e0 f7             	and    eax,0xfffffff7
c000b11d:	09 d0                	or     eax,edx
c000b11f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b125:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b12c:	e8 32 95 00 00       	call   c0014663 <cpuidCheckEDX(unsigned int)>
c000b131:	83 e0 01             	and    eax,0x1
c000b134:	88 c2                	mov    dl,al
c000b136:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b13c:	83 e0 fe             	and    eax,0xfffffffe
c000b13f:	09 d0                	or     eax,edx
c000b141:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b147:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b14e:	e8 10 95 00 00       	call   c0014663 <cpuidCheckEDX(unsigned int)>
c000b153:	c1 e0 07             	shl    eax,0x7
c000b156:	88 c2                	mov    dl,al
c000b158:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b15e:	83 e0 7f             	and    eax,0x7f
c000b161:	09 d0                	or     eax,edx
c000b163:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b169:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b170:	e8 ee 94 00 00       	call   c0014663 <cpuidCheckEDX(unsigned int)>
c000b175:	83 c4 10             	add    esp,0x10
c000b178:	83 e0 01             	and    eax,0x1
c000b17b:	c1 e0 05             	shl    eax,0x5
c000b17e:	88 c2                	mov    dl,al
c000b180:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b186:	83 e0 df             	and    eax,0xffffffdf
c000b189:	09 d0                	or     eax,edx
c000b18b:	f7 05 00 43 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024300,0x401
c000b195:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b19b:	0f 84 a8 00 00 00    	je     c000b249 <Computer::detectFeatures()+0x1c5>
c000b1a1:	83 ec 0c             	sub    esp,0xc
c000b1a4:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b1ab:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b1af:	50                   	push   eax
c000b1b0:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b1b4:	55                   	push   ebp
c000b1b5:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b1b9:	57                   	push   edi
c000b1ba:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b1be:	56                   	push   esi
c000b1bf:	68 00 00 00 80       	push   0x80000000
c000b1c4:	e8 17 94 00 00       	call   c00145e0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b1c9:	83 c4 20             	add    esp,0x20
c000b1cc:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b1d3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b1d7:	0f 86 dd fe ff ff    	jbe    c000b0ba <Computer::detectFeatures()+0x36>
c000b1dd:	83 ec 0c             	sub    esp,0xc
c000b1e0:	50                   	push   eax
c000b1e1:	55                   	push   ebp
c000b1e2:	57                   	push   edi
c000b1e3:	56                   	push   esi
c000b1e4:	68 01 00 00 80       	push   0x80000001
c000b1e9:	e8 f2 93 00 00       	call   c00145e0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b1ee:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b1f8:	83 c4 20             	add    esp,0x20
c000b1fb:	e9 ba fe ff ff       	jmp    c000b0ba <Computer::detectFeatures()+0x36>
c000b200:	e8 db 3b 01 00       	call   c001ede0 <sseDetect>
c000b205:	88 c2                	mov    dl,al
c000b207:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b20d:	c1 e2 07             	shl    edx,0x7
c000b210:	83 e0 7f             	and    eax,0x7f
c000b213:	09 d0                	or     eax,edx
c000b215:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b21b:	84 c0                	test   al,al
c000b21d:	0f 89 d5 fe ff ff    	jns    c000b0f8 <Computer::detectFeatures()+0x74>
c000b223:	e8 a8 3b 01 00       	call   c001edd0 <avxDetect>
c000b228:	83 e0 01             	and    eax,0x1
c000b22b:	c1 e0 05             	shl    eax,0x5
c000b22e:	88 c2                	mov    dl,al
c000b230:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b236:	83 e0 df             	and    eax,0xffffffdf
c000b239:	09 d0                	or     eax,edx
c000b23b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b241:	83 c4 1c             	add    esp,0x1c
c000b244:	5b                   	pop    ebx
c000b245:	5e                   	pop    esi
c000b246:	5f                   	pop    edi
c000b247:	5d                   	pop    ebp
c000b248:	c3                   	ret    
c000b249:	83 ec 0c             	sub    esp,0xc
c000b24c:	68 00 02 00 00       	push   0x200
c000b251:	e8 0d 94 00 00       	call   c0014663 <cpuidCheckEDX(unsigned int)>
c000b256:	83 c4 10             	add    esp,0x10
c000b259:	e9 43 ff ff ff       	jmp    c000b1a1 <Computer::detectFeatures()+0x11d>

c000b25e <Computer::displayFeatures()>:
c000b25e:	53                   	push   ebx
c000b25f:	83 ec 14             	sub    esp,0x14
c000b262:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b266:	68 56 0d 02 c0       	push   0xc0020d56
c000b26b:	e8 85 3e 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000b270:	83 c4 10             	add    esp,0x10
c000b273:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000b27a:	0f 85 73 02 00 00    	jne    c000b4f3 <Computer::displayFeatures()+0x295>
c000b280:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c000b285:	83 ec 08             	sub    esp,0x8
c000b288:	50                   	push   eax
c000b289:	68 69 0d 02 c0       	push   0xc0020d69
c000b28e:	e8 62 3e 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000b293:	83 c4 10             	add    esp,0x10
c000b296:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000b29d:	0f 85 8c 02 00 00    	jne    c000b52f <Computer::displayFeatures()+0x2d1>
c000b2a3:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c000b2a8:	83 ec 08             	sub    esp,0x8
c000b2ab:	50                   	push   eax
c000b2ac:	68 7a 0d 02 c0       	push   0xc0020d7a
c000b2b1:	e8 3f 3e 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000b2b6:	83 c4 10             	add    esp,0x10
c000b2b9:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000b2c0:	0f 85 5f 02 00 00    	jne    c000b525 <Computer::displayFeatures()+0x2c7>
c000b2c6:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c000b2cb:	83 ec 08             	sub    esp,0x8
c000b2ce:	50                   	push   eax
c000b2cf:	68 8b 0d 02 c0       	push   0xc0020d8b
c000b2d4:	e8 1c 3e 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000b2d9:	83 c4 10             	add    esp,0x10
c000b2dc:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000b2e3:	0f 85 32 02 00 00    	jne    c000b51b <Computer::displayFeatures()+0x2bd>
c000b2e9:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c000b2ee:	83 ec 08             	sub    esp,0x8
c000b2f1:	50                   	push   eax
c000b2f2:	68 9c 0d 02 c0       	push   0xc0020d9c
c000b2f7:	e8 f9 3d 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000b2fc:	83 c4 10             	add    esp,0x10
c000b2ff:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000b306:	0f 85 05 02 00 00    	jne    c000b511 <Computer::displayFeatures()+0x2b3>
c000b30c:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c000b311:	83 ec 08             	sub    esp,0x8
c000b314:	50                   	push   eax
c000b315:	68 ad 0d 02 c0       	push   0xc0020dad
c000b31a:	e8 d6 3d 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000b31f:	83 c4 10             	add    esp,0x10
c000b322:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000b329:	0f 85 d8 01 00 00    	jne    c000b507 <Computer::displayFeatures()+0x2a9>
c000b32f:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c000b334:	83 ec 08             	sub    esp,0x8
c000b337:	50                   	push   eax
c000b338:	68 be 0d 02 c0       	push   0xc0020dbe
c000b33d:	e8 b3 3d 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000b342:	83 c4 10             	add    esp,0x10
c000b345:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000b34c:	0f 85 ab 01 00 00    	jne    c000b4fd <Computer::displayFeatures()+0x29f>
c000b352:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c000b357:	83 ec 08             	sub    esp,0x8
c000b35a:	50                   	push   eax
c000b35b:	68 cf 0d 02 c0       	push   0xc0020dcf
c000b360:	e8 90 3d 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000b365:	83 c4 10             	add    esp,0x10
c000b368:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000b36f:	0f 88 1b 02 00 00    	js     c000b590 <Computer::displayFeatures()+0x332>
c000b375:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c000b37a:	83 ec 08             	sub    esp,0x8
c000b37d:	50                   	push   eax
c000b37e:	68 e0 0d 02 c0       	push   0xc0020de0
c000b383:	e8 6d 3d 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000b388:	83 c4 10             	add    esp,0x10
c000b38b:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000b392:	0f 85 a1 01 00 00    	jne    c000b539 <Computer::displayFeatures()+0x2db>
c000b398:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c000b39d:	83 ec 08             	sub    esp,0x8
c000b3a0:	50                   	push   eax
c000b3a1:	68 f1 0d 02 c0       	push   0xc0020df1
c000b3a6:	e8 4a 3d 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000b3ab:	83 c4 10             	add    esp,0x10
c000b3ae:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000b3b5:	0f 85 cb 01 00 00    	jne    c000b586 <Computer::displayFeatures()+0x328>
c000b3bb:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c000b3c0:	83 ec 08             	sub    esp,0x8
c000b3c3:	50                   	push   eax
c000b3c4:	68 02 0e 02 c0       	push   0xc0020e02
c000b3c9:	e8 27 3d 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000b3ce:	83 c4 10             	add    esp,0x10
c000b3d1:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000b3d8:	0f 85 9e 01 00 00    	jne    c000b57c <Computer::displayFeatures()+0x31e>
c000b3de:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c000b3e3:	83 ec 08             	sub    esp,0x8
c000b3e6:	50                   	push   eax
c000b3e7:	68 13 0e 02 c0       	push   0xc0020e13
c000b3ec:	e8 04 3d 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000b3f1:	83 c4 10             	add    esp,0x10
c000b3f4:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000b3fb:	0f 85 71 01 00 00    	jne    c000b572 <Computer::displayFeatures()+0x314>
c000b401:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c000b406:	83 ec 08             	sub    esp,0x8
c000b409:	50                   	push   eax
c000b40a:	68 24 0e 02 c0       	push   0xc0020e24
c000b40f:	e8 e1 3c 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000b414:	83 c4 10             	add    esp,0x10
c000b417:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000b41e:	0f 85 44 01 00 00    	jne    c000b568 <Computer::displayFeatures()+0x30a>
c000b424:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c000b429:	83 ec 08             	sub    esp,0x8
c000b42c:	50                   	push   eax
c000b42d:	68 35 0e 02 c0       	push   0xc0020e35
c000b432:	e8 be 3c 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000b437:	83 c4 10             	add    esp,0x10
c000b43a:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000b441:	0f 85 17 01 00 00    	jne    c000b55e <Computer::displayFeatures()+0x300>
c000b447:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c000b44c:	83 ec 08             	sub    esp,0x8
c000b44f:	50                   	push   eax
c000b450:	68 46 0e 02 c0       	push   0xc0020e46
c000b455:	e8 9b 3c 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000b45a:	83 c4 10             	add    esp,0x10
c000b45d:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000b464:	0f 85 ea 00 00 00    	jne    c000b554 <Computer::displayFeatures()+0x2f6>
c000b46a:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c000b46f:	83 ec 08             	sub    esp,0x8
c000b472:	50                   	push   eax
c000b473:	68 57 0e 02 c0       	push   0xc0020e57
c000b478:	e8 78 3c 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000b47d:	83 c4 10             	add    esp,0x10
c000b480:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000b487:	0f 88 0d 01 00 00    	js     c000b59a <Computer::displayFeatures()+0x33c>
c000b48d:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c000b492:	83 ec 08             	sub    esp,0x8
c000b495:	50                   	push   eax
c000b496:	68 68 0e 02 c0       	push   0xc0020e68
c000b49b:	e8 55 3c 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000b4aa:	0f 85 9a 00 00 00    	jne    c000b54a <Computer::displayFeatures()+0x2ec>
c000b4b0:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c000b4b5:	83 ec 08             	sub    esp,0x8
c000b4b8:	50                   	push   eax
c000b4b9:	68 79 0e 02 c0       	push   0xc0020e79
c000b4be:	e8 32 3c 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000b4c3:	83 c4 10             	add    esp,0x10
c000b4c6:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000b4cd:	75 74                	jne    c000b543 <Computer::displayFeatures()+0x2e5>
c000b4cf:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c000b4d4:	83 ec 08             	sub    esp,0x8
c000b4d7:	50                   	push   eax
c000b4d8:	68 8a 0e 02 c0       	push   0xc0020e8a
c000b4dd:	e8 13 3c 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000b4e2:	c7 44 24 20 66 24 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022466
c000b4ea:	83 c4 18             	add    esp,0x18
c000b4ed:	5b                   	pop    ebx
c000b4ee:	e9 02 3c 00 00       	jmp    c000f0f5 <Dbg::kprintf(char const*, ...)>
c000b4f3:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c000b4f8:	e9 88 fd ff ff       	jmp    c000b285 <Computer::displayFeatures()+0x27>
c000b4fd:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c000b502:	e9 50 fe ff ff       	jmp    c000b357 <Computer::displayFeatures()+0xf9>
c000b507:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c000b50c:	e9 23 fe ff ff       	jmp    c000b334 <Computer::displayFeatures()+0xd6>
c000b511:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c000b516:	e9 f6 fd ff ff       	jmp    c000b311 <Computer::displayFeatures()+0xb3>
c000b51b:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c000b520:	e9 c9 fd ff ff       	jmp    c000b2ee <Computer::displayFeatures()+0x90>
c000b525:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c000b52a:	e9 9c fd ff ff       	jmp    c000b2cb <Computer::displayFeatures()+0x6d>
c000b52f:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c000b534:	e9 6f fd ff ff       	jmp    c000b2a8 <Computer::displayFeatures()+0x4a>
c000b539:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c000b53e:	e9 5a fe ff ff       	jmp    c000b39d <Computer::displayFeatures()+0x13f>
c000b543:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c000b548:	eb 8a                	jmp    c000b4d4 <Computer::displayFeatures()+0x276>
c000b54a:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c000b54f:	e9 61 ff ff ff       	jmp    c000b4b5 <Computer::displayFeatures()+0x257>
c000b554:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c000b559:	e9 11 ff ff ff       	jmp    c000b46f <Computer::displayFeatures()+0x211>
c000b55e:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c000b563:	e9 e4 fe ff ff       	jmp    c000b44c <Computer::displayFeatures()+0x1ee>
c000b568:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c000b56d:	e9 b7 fe ff ff       	jmp    c000b429 <Computer::displayFeatures()+0x1cb>
c000b572:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c000b577:	e9 8a fe ff ff       	jmp    c000b406 <Computer::displayFeatures()+0x1a8>
c000b57c:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c000b581:	e9 5d fe ff ff       	jmp    c000b3e3 <Computer::displayFeatures()+0x185>
c000b586:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c000b58b:	e9 30 fe ff ff       	jmp    c000b3c0 <Computer::displayFeatures()+0x162>
c000b590:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c000b595:	e9 e0 fd ff ff       	jmp    c000b37a <Computer::displayFeatures()+0x11c>
c000b59a:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c000b59f:	e9 ee fe ff ff       	jmp    c000b492 <Computer::displayFeatures()+0x234>

c000b5a4 <Computer::rdmsr(unsigned int)>:
c000b5a4:	83 ec 0c             	sub    esp,0xc
c000b5a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5ab:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5b2:	74 0a                	je     c000b5be <Computer::rdmsr(unsigned int)+0x1a>
c000b5b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5b8:	0f 32                	rdmsr  
c000b5ba:	83 c4 0c             	add    esp,0xc
c000b5bd:	c3                   	ret    
c000b5be:	83 ec 0c             	sub    esp,0xc
c000b5c1:	68 9b 0e 02 c0       	push   0xc0020e9b
c000b5c6:	e8 bf a2 00 00       	call   c001588a <Krnl::panic(char const*)>
c000b5cb:	83 c4 10             	add    esp,0x10
c000b5ce:	eb e4                	jmp    c000b5b4 <Computer::rdmsr(unsigned int)+0x10>

c000b5d0 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b5d0:	57                   	push   edi
c000b5d1:	56                   	push   esi
c000b5d2:	52                   	push   edx
c000b5d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5d7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b5db:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b5df:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5e6:	74 0e                	je     c000b5f6 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b5e8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5ec:	89 f0                	mov    eax,esi
c000b5ee:	89 fa                	mov    edx,edi
c000b5f0:	0f 30                	wrmsr  
c000b5f2:	58                   	pop    eax
c000b5f3:	5e                   	pop    esi
c000b5f4:	5f                   	pop    edi
c000b5f5:	c3                   	ret    
c000b5f6:	83 ec 0c             	sub    esp,0xc
c000b5f9:	68 a1 0e 02 c0       	push   0xc0020ea1
c000b5fe:	e8 87 a2 00 00       	call   c001588a <Krnl::panic(char const*)>
c000b603:	83 c4 10             	add    esp,0x10
c000b606:	eb e0                	jmp    c000b5e8 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b608 <Computer::nmiEnabled()>:
c000b608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b60c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b612:	c3                   	ret    
c000b613:	90                   	nop

c000b614 <Computer::readCMOS(unsigned char)>:
c000b614:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b618:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b61f:	19 c0                	sbb    eax,eax
c000b621:	83 e0 80             	and    eax,0xffffff80
c000b624:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b628:	e6 70                	out    0x70,al
c000b62a:	e4 71                	in     al,0x71
c000b62c:	c3                   	ret    
c000b62d:	90                   	nop

c000b62e <Computer::enableNMI(bool)>:
c000b62e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b632:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b636:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b63c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b644:	eb ce                	jmp    c000b614 <Computer::readCMOS(unsigned char)>

c000b646 <Computer::open(int, int, void*)>:
c000b646:	56                   	push   esi
c000b647:	53                   	push   ebx
c000b648:	83 ec 10             	sub    esp,0x10
c000b64b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b64f:	f6 05 00 43 02 c0 04 	test   BYTE PTR ds:0xc0024300,0x4
c000b656:	68 68 22 00 00       	push   0x2268
c000b65b:	0f 94 05 20 37 02 c0 	sete   BYTE PTR ds:0xc0023720
c000b662:	e8 9f 39 00 00       	call   c000f006 <operator new(unsigned long)>
c000b667:	89 04 24             	mov    DWORD PTR [esp],eax
c000b66a:	89 c6                	mov    esi,eax
c000b66c:	e8 33 86 00 00       	call   c0013ca4 <ACPI::ACPI()>
c000b671:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b677:	58                   	pop    eax
c000b678:	5a                   	pop    edx
c000b679:	56                   	push   esi
c000b67a:	53                   	push   ebx
c000b67b:	e8 80 4e 00 00       	call   c0010500 <Device::addChild(Device*)>
c000b680:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b683:	e8 fc f9 ff ff       	call   c000b084 <Computer::detectFeatures()>
c000b688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b68b:	e8 ce fb ff ff       	call   c000b25e <Computer::displayFeatures()>
c000b690:	59                   	pop    ecx
c000b691:	5e                   	pop    esi
c000b692:	6a 01                	push   0x1
c000b694:	53                   	push   ebx
c000b695:	e8 94 ff ff ff       	call   c000b62e <Computer::enableNMI(bool)>
c000b69a:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b6a1:	e8 60 39 00 00       	call   c000f006 <operator new(unsigned long)>
c000b6a6:	89 04 24             	mov    DWORD PTR [esp],eax
c000b6a9:	89 c6                	mov    esi,eax
c000b6ab:	e8 7e 90 00 00       	call   c001472e <CPU::CPU()>
c000b6b0:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b6b6:	58                   	pop    eax
c000b6b7:	5a                   	pop    edx
c000b6b8:	56                   	push   esi
c000b6b9:	53                   	push   ebx
c000b6ba:	e8 41 4e 00 00       	call   c0010500 <Device::addChild(Device*)>
c000b6bf:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b6c5:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b6cb:	6a 00                	push   0x0
c000b6cd:	6a 00                	push   0x0
c000b6cf:	50                   	push   eax
c000b6d0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6d3:	83 c4 20             	add    esp,0x20
c000b6d6:	e8 8d 53 00 00       	call   c0010a68 <setupFPU()>
c000b6db:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b6e1:	85 c0                	test   eax,eax
c000b6e3:	74 1f                	je     c000b704 <Computer::open(int, int, void*)+0xbe>
c000b6e5:	83 ec 08             	sub    esp,0x8
c000b6e8:	50                   	push   eax
c000b6e9:	53                   	push   ebx
c000b6ea:	e8 11 4e 00 00       	call   c0010500 <Device::addChild(Device*)>
c000b6ef:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b6f5:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6f7:	6a 00                	push   0x0
c000b6f9:	6a 00                	push   0x0
c000b6fb:	6a 00                	push   0x0
c000b6fd:	50                   	push   eax
c000b6fe:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b701:	83 c4 20             	add    esp,0x20
c000b704:	83 ec 0c             	sub    esp,0xc
c000b707:	68 75 b0 00 c0       	push   0xc000b075
c000b70c:	e8 f7 d2 00 00       	call   c0018a08 <setupMultitasking(void (*)())>
c000b711:	83 c4 14             	add    esp,0x14
c000b714:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b719:	5b                   	pop    ebx
c000b71a:	5e                   	pop    esi
c000b71b:	c3                   	ret    

c000b71c <Computer::disableNMI()>:
c000b71c:	6a 00                	push   0x0
c000b71e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b722:	e8 07 ff ff ff       	call   c000b62e <Computer::enableNMI(bool)>
c000b727:	58                   	pop    eax
c000b728:	5a                   	pop    edx
c000b729:	c3                   	ret    

c000b72a <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b72a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b72e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b735:	19 c0                	sbb    eax,eax
c000b737:	83 e0 80             	and    eax,0xffffff80
c000b73a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b73e:	e6 70                	out    0x70,al
c000b740:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b744:	e6 71                	out    0x71,al
c000b746:	c3                   	ret    
c000b747:	90                   	nop

c000b748 <Computer::handleNMI()>:
c000b748:	56                   	push   esi
c000b749:	53                   	push   ebx
c000b74a:	83 ec 10             	sub    esp,0x10
c000b74d:	e4 92                	in     al,0x92
c000b74f:	89 c6                	mov    esi,eax
c000b751:	e4 61                	in     al,0x61
c000b753:	68 a7 0e 02 c0       	push   0xc0020ea7
c000b758:	88 c3                	mov    bl,al
c000b75a:	e8 96 39 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000b75f:	83 c4 10             	add    esp,0x10
c000b762:	83 e6 10             	and    esi,0x10
c000b765:	75 0d                	jne    c000b774 <Computer::handleNMI()+0x2c>
c000b767:	f6 c3 40             	test   bl,0x40
c000b76a:	75 1d                	jne    c000b789 <Computer::handleNMI()+0x41>
c000b76c:	84 db                	test   bl,bl
c000b76e:	78 2d                	js     c000b79d <Computer::handleNMI()+0x55>
c000b770:	58                   	pop    eax
c000b771:	5b                   	pop    ebx
c000b772:	5e                   	pop    esi
c000b773:	c3                   	ret    
c000b774:	83 ec 0c             	sub    esp,0xc
c000b777:	68 b8 0e 02 c0       	push   0xc0020eb8
c000b77c:	e8 09 a1 00 00       	call   c001588a <Krnl::panic(char const*)>
c000b781:	83 c4 10             	add    esp,0x10
c000b784:	f6 c3 40             	test   bl,0x40
c000b787:	74 e3                	je     c000b76c <Computer::handleNMI()+0x24>
c000b789:	83 ec 0c             	sub    esp,0xc
c000b78c:	68 c5 0e 02 c0       	push   0xc0020ec5
c000b791:	e8 f4 a0 00 00       	call   c001588a <Krnl::panic(char const*)>
c000b796:	83 c4 10             	add    esp,0x10
c000b799:	84 db                	test   bl,bl
c000b79b:	79 d3                	jns    c000b770 <Computer::handleNMI()+0x28>
c000b79d:	c7 44 24 10 cf 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020ecf
c000b7a5:	5a                   	pop    edx
c000b7a6:	5b                   	pop    ebx
c000b7a7:	5e                   	pop    esi
c000b7a8:	e9 dd a0 00 00       	jmp    c001588a <Krnl::panic(char const*)>
c000b7ad:	90                   	nop

c000b7ae <Computer::setDiskActivityLight(int, bool)>:
c000b7ae:	56                   	push   esi
c000b7af:	53                   	push   ebx
c000b7b0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b7b4:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b7b9:	77 1b                	ja     c000b7d6 <Computer::setDiskActivityLight(int, bool)+0x28>
c000b7bb:	e4 92                	in     al,0x92
c000b7bd:	bb 40 00 00 00       	mov    ebx,0x40
c000b7c2:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b7c6:	89 da                	mov    edx,ebx
c000b7c8:	d3 e2                	shl    edx,cl
c000b7ca:	89 f1                	mov    ecx,esi
c000b7cc:	f7 d2                	not    edx
c000b7ce:	d3 e3                	shl    ebx,cl
c000b7d0:	21 d0                	and    eax,edx
c000b7d2:	09 d8                	or     eax,ebx
c000b7d4:	e6 92                	out    0x92,al
c000b7d6:	5b                   	pop    ebx
c000b7d7:	5e                   	pop    esi
c000b7d8:	c3                   	ret    
c000b7d9:	90                   	nop

c000b7da <GDTEntry::setBase(unsigned int)>:
c000b7da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7de:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b7e2:	89 c1                	mov    ecx,eax
c000b7e4:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b7e8:	c1 e9 10             	shr    ecx,0x10
c000b7eb:	c1 e8 18             	shr    eax,0x18
c000b7ee:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b7f1:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b7f4:	c3                   	ret    
c000b7f5:	90                   	nop

c000b7f6 <GDTEntry::setLimit(unsigned int)>:
c000b7f6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b7fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7fe:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b801:	66 89 01             	mov    WORD PTR [ecx],ax
c000b804:	83 e2 f0             	and    edx,0xfffffff0
c000b807:	c1 e8 10             	shr    eax,0x10
c000b80a:	83 e0 0f             	and    eax,0xf
c000b80d:	09 d0                	or     eax,edx
c000b80f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b812:	c3                   	ret    
c000b813:	90                   	nop

c000b814 <GDT::GDT()>:
c000b814:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b818:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b81e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b822:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b828:	90                   	nop
c000b829:	c3                   	ret    

c000b82a <GDT::addEntry(GDTEntry)>:
c000b82a:	53                   	push   ebx
c000b82b:	83 ec 0c             	sub    esp,0xc
c000b82e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b832:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b834:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b83b:	52                   	push   edx
c000b83c:	50                   	push   eax
c000b83d:	68 08 0f 02 c0       	push   0xc0020f08
c000b842:	e8 ae 38 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000b847:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b849:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b84d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b851:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b855:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b859:	8d 50 01             	lea    edx,[eax+0x1]
c000b85c:	c1 e0 03             	shl    eax,0x3
c000b85f:	89 13                	mov    DWORD PTR [ebx],edx
c000b861:	83 c4 18             	add    esp,0x18
c000b864:	5b                   	pop    ebx
c000b865:	c3                   	ret    

c000b866 <GDT::getNumberOfEntries()>:
c000b866:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b86a:	8b 00                	mov    eax,DWORD PTR [eax]
c000b86c:	c3                   	ret    
c000b86d:	90                   	nop

c000b86e <GDT::flush()>:
c000b86e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b872:	8b 10                	mov    edx,DWORD PTR [eax]
c000b874:	83 c0 04             	add    eax,0x4
c000b877:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b87e:	a3 f2 42 02 c0       	mov    ds:0xc00242f2,eax
c000b883:	66 89 15 f0 42 02 c0 	mov    WORD PTR ds:0xc00242f0,dx
c000b88a:	e9 56 4b ff ff       	jmp    c00003e5 <loadGDT>
c000b88f:	90                   	nop

c000b890 <GDT::setup()>:
c000b890:	55                   	push   ebp
c000b891:	57                   	push   edi
c000b892:	56                   	push   esi
c000b893:	53                   	push   ebx
c000b894:	83 ec 3c             	sub    esp,0x3c
c000b897:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b89b:	6a 00                	push   0x0
c000b89d:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b8a1:	53                   	push   ebx
c000b8a2:	e8 33 ff ff ff       	call   c000b7da <GDTEntry::setBase(unsigned int)>
c000b8a7:	6a 00                	push   0x0
c000b8a9:	53                   	push   ebx
c000b8aa:	e8 47 ff ff ff       	call   c000b7f6 <GDTEntry::setLimit(unsigned int)>
c000b8af:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b8b7:	6a 00                	push   0x0
c000b8b9:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b8bd:	53                   	push   ebx
c000b8be:	e8 17 ff ff ff       	call   c000b7da <GDTEntry::setBase(unsigned int)>
c000b8c3:	68 ff ff ff 00       	push   0xffffff
c000b8c8:	53                   	push   ebx
c000b8c9:	e8 28 ff ff ff       	call   c000b7f6 <GDTEntry::setLimit(unsigned int)>
c000b8ce:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b8d2:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8d7:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b8dc:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b8e0:	83 c4 20             	add    esp,0x20
c000b8e3:	6a 00                	push   0x0
c000b8e5:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b8e9:	53                   	push   ebx
c000b8ea:	e8 eb fe ff ff       	call   c000b7da <GDTEntry::setBase(unsigned int)>
c000b8ef:	68 ff ff ff 00       	push   0xffffff
c000b8f4:	53                   	push   ebx
c000b8f5:	e8 fc fe ff ff       	call   c000b7f6 <GDTEntry::setLimit(unsigned int)>
c000b8fa:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b8fe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b902:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b906:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b90a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b90e:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b913:	0d 00 92 c0 00       	or     eax,0xc09200
c000b918:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b91c:	89 d8                	mov    eax,ebx
c000b91e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b922:	80 cc 60             	or     ah,0x60
c000b925:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b929:	83 c4 0c             	add    esp,0xc
c000b92c:	89 f8                	mov    eax,edi
c000b92e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b932:	80 cc 60             	or     ah,0x60
c000b935:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b939:	89 c7                	mov    edi,eax
c000b93b:	55                   	push   ebp
c000b93c:	e8 e9 fe ff ff       	call   c000b82a <GDT::addEntry(GDTEntry)>
c000b941:	83 c4 0c             	add    esp,0xc
c000b944:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b948:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b94c:	55                   	push   ebp
c000b94d:	e8 d8 fe ff ff       	call   c000b82a <GDT::addEntry(GDTEntry)>
c000b952:	83 c4 0c             	add    esp,0xc
c000b955:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b959:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b95d:	55                   	push   ebp
c000b95e:	e8 c7 fe ff ff       	call   c000b82a <GDT::addEntry(GDTEntry)>
c000b963:	83 c4 0c             	add    esp,0xc
c000b966:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b96a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b96e:	53                   	push   ebx
c000b96f:	51                   	push   ecx
c000b970:	55                   	push   ebp
c000b971:	e8 b4 fe ff ff       	call   c000b82a <GDT::addEntry(GDTEntry)>
c000b976:	83 c4 0c             	add    esp,0xc
c000b979:	57                   	push   edi
c000b97a:	56                   	push   esi
c000b97b:	55                   	push   ebp
c000b97c:	e8 a9 fe ff ff       	call   c000b82a <GDT::addEntry(GDTEntry)>
c000b981:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b984:	e8 e5 fe ff ff       	call   c000b86e <GDT::flush()>
c000b989:	83 c4 4c             	add    esp,0x4c
c000b98c:	5b                   	pop    ebx
c000b98d:	5e                   	pop    esi
c000b98e:	5f                   	pop    edi
c000b98f:	5d                   	pop    ebp
c000b990:	c3                   	ret    

c000b991 <idleFunction(void*)>:
c000b991:	53                   	push   ebx
c000b992:	83 ec 08             	sub    esp,0x8
c000b995:	e8 46 ce 00 00       	call   c00187e0 <unlockScheduler()>
c000b99a:	e8 7b 8d 00 00       	call   c001471a <thisCPU()>
c000b99f:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b9a6:	74 41                	je     c000b9e9 <idleFunction(void*)+0x58>
c000b9a8:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c000b9ad:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b9b4:	74 33                	je     c000b9e9 <idleFunction(void*)+0x58>
c000b9b6:	31 db                	xor    ebx,ebx
c000b9b8:	52                   	push   edx
c000b9b9:	52                   	push   edx
c000b9ba:	68 e1 00 00 00       	push   0xe1
c000b9bf:	50                   	push   eax
c000b9c0:	e8 df fb ff ff       	call   c000b5a4 <Computer::rdmsr(unsigned int)>
c000b9c5:	53                   	push   ebx
c000b9c6:	83 e0 02             	and    eax,0x2
c000b9c9:	50                   	push   eax
c000b9ca:	68 e1 00 00 00       	push   0xe1
c000b9cf:	ff 35 e8 42 02 c0    	push   DWORD PTR ds:0xc00242e8
c000b9d5:	e8 f6 fb ff ff       	call   c000b5d0 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b9da:	83 c4 20             	add    esp,0x20
c000b9dd:	e8 20 48 ff ff       	call   c0000202 <doTPAUSE>
c000b9e2:	e8 39 3a 01 00       	call   c001f420 <idleCommon()>
c000b9e7:	eb f4                	jmp    c000b9dd <idleFunction(void*)+0x4c>
c000b9e9:	fb                   	sti    
c000b9ea:	f4                   	hlt    
c000b9eb:	e8 30 3a 01 00       	call   c001f420 <idleCommon()>
c000b9f0:	eb f7                	jmp    c000b9e9 <idleFunction(void*)+0x58>

c000b9f2 <IDTEntry::IDTEntry(bool)>:
c000b9f2:	83 ec 04             	sub    esp,0x4
c000b9f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9f9:	88 04 24             	mov    BYTE PTR [esp],al
c000b9fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba00:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000ba06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba0a:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000ba0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba12:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba15:	83 e2 f0             	and    edx,0xfffffff0
c000ba18:	83 ca 0e             	or     edx,0xe
c000ba1b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba22:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba25:	83 e2 ef             	and    edx,0xffffffef
c000ba28:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba2b:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ba2f:	74 04                	je     c000ba35 <IDTEntry::IDTEntry(bool)+0x43>
c000ba31:	b2 03                	mov    dl,0x3
c000ba33:	eb 02                	jmp    c000ba37 <IDTEntry::IDTEntry(bool)+0x45>
c000ba35:	b2 00                	mov    dl,0x0
c000ba37:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba3b:	83 e2 03             	and    edx,0x3
c000ba3e:	88 d1                	mov    cl,dl
c000ba40:	c1 e1 05             	shl    ecx,0x5
c000ba43:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba46:	83 e2 9f             	and    edx,0xffffff9f
c000ba49:	09 ca                	or     edx,ecx
c000ba4b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba52:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba55:	83 ca 80             	or     edx,0xffffff80
c000ba58:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba5b:	90                   	nop
c000ba5c:	83 c4 04             	add    esp,0x4
c000ba5f:	c3                   	ret    

c000ba60 <IDTEntry::setOffset(unsigned int)>:
c000ba60:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ba64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba68:	66 89 02             	mov    WORD PTR [edx],ax
c000ba6b:	c1 e8 10             	shr    eax,0x10
c000ba6e:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ba72:	c3                   	ret    
c000ba73:	90                   	nop

c000ba74 <IDT::IDT()>:
c000ba74:	90                   	nop
c000ba75:	c3                   	ret    

c000ba76 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ba76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba7a:	83 c0 30             	add    eax,0x30
c000ba7d:	c3                   	ret    

c000ba7e <IDT::addEntry(IDTEntry, int)>:
c000ba7e:	53                   	push   ebx
c000ba7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba87:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ba8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba8f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ba92:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ba96:	5b                   	pop    ebx
c000ba97:	c3                   	ret    

c000ba98 <IDT::addEntry(int, void (*)(), bool)>:
c000ba98:	53                   	push   ebx
c000ba99:	83 ec 10             	sub    esp,0x10
c000ba9c:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000baa1:	50                   	push   eax
c000baa2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000baa6:	53                   	push   ebx
c000baa7:	e8 46 ff ff ff       	call   c000b9f2 <IDTEntry::IDTEntry(bool)>
c000baac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000bab0:	53                   	push   ebx
c000bab1:	e8 aa ff ff ff       	call   c000ba60 <IDTEntry::setOffset(unsigned int)>
c000bab6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000baba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000babe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bac2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bac6:	e8 b3 ff ff ff       	call   c000ba7e <IDT::addEntry(IDTEntry, int)>
c000bacb:	83 c4 30             	add    esp,0x30
c000bace:	5b                   	pop    ebx
c000bacf:	c3                   	ret    

c000bad0 <IDT::flush()>:
c000bad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bad4:	66 c7 05 f8 42 02 c0 ff 07 	mov    WORD PTR ds:0xc00242f8,0x7ff
c000badd:	a3 fa 42 02 c0       	mov    ds:0xc00242fa,eax
c000bae2:	0f 01 1d f8 42 02 c0 	lidtd  ds:0xc00242f8
c000bae9:	c3                   	ret    

c000baea <IDT::setup()>:
c000baea:	57                   	push   edi
c000baeb:	56                   	push   esi
c000baec:	53                   	push   ebx
c000baed:	83 ec 10             	sub    esp,0x10
c000baf0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000baf4:	6a 00                	push   0x0
c000baf6:	68 05 04 00 c0       	push   0xc0000405
c000bafb:	6a 00                	push   0x0
c000bafd:	53                   	push   ebx
c000bafe:	e8 95 ff ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bb03:	6a 00                	push   0x0
c000bb05:	68 15 04 00 c0       	push   0xc0000415
c000bb0a:	6a 01                	push   0x1
c000bb0c:	53                   	push   ebx
c000bb0d:	e8 86 ff ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bb12:	83 c4 20             	add    esp,0x20
c000bb15:	6a 00                	push   0x0
c000bb17:	68 1f 04 00 c0       	push   0xc000041f
c000bb1c:	6a 02                	push   0x2
c000bb1e:	53                   	push   ebx
c000bb1f:	e8 74 ff ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bb24:	6a 00                	push   0x0
c000bb26:	68 29 04 00 c0       	push   0xc0000429
c000bb2b:	6a 03                	push   0x3
c000bb2d:	53                   	push   ebx
c000bb2e:	e8 65 ff ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bb33:	83 c4 20             	add    esp,0x20
c000bb36:	6a 00                	push   0x0
c000bb38:	68 33 04 00 c0       	push   0xc0000433
c000bb3d:	6a 04                	push   0x4
c000bb3f:	53                   	push   ebx
c000bb40:	e8 53 ff ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bb45:	6a 00                	push   0x0
c000bb47:	68 3d 04 00 c0       	push   0xc000043d
c000bb4c:	6a 05                	push   0x5
c000bb4e:	53                   	push   ebx
c000bb4f:	e8 44 ff ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bb54:	83 c4 20             	add    esp,0x20
c000bb57:	6a 00                	push   0x0
c000bb59:	68 47 04 00 c0       	push   0xc0000447
c000bb5e:	6a 06                	push   0x6
c000bb60:	53                   	push   ebx
c000bb61:	e8 32 ff ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bb66:	6a 00                	push   0x0
c000bb68:	68 51 04 00 c0       	push   0xc0000451
c000bb6d:	6a 07                	push   0x7
c000bb6f:	53                   	push   ebx
c000bb70:	e8 23 ff ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bb75:	83 c4 20             	add    esp,0x20
c000bb78:	6a 00                	push   0x0
c000bb7a:	68 5b 04 00 c0       	push   0xc000045b
c000bb7f:	6a 08                	push   0x8
c000bb81:	53                   	push   ebx
c000bb82:	e8 11 ff ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bb87:	6a 00                	push   0x0
c000bb89:	68 63 04 00 c0       	push   0xc0000463
c000bb8e:	6a 09                	push   0x9
c000bb90:	53                   	push   ebx
c000bb91:	e8 02 ff ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bb96:	83 c4 20             	add    esp,0x20
c000bb99:	6a 00                	push   0x0
c000bb9b:	68 6d 04 00 c0       	push   0xc000046d
c000bba0:	6a 0a                	push   0xa
c000bba2:	53                   	push   ebx
c000bba3:	e8 f0 fe ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bba8:	6a 00                	push   0x0
c000bbaa:	68 75 04 00 c0       	push   0xc0000475
c000bbaf:	6a 0b                	push   0xb
c000bbb1:	53                   	push   ebx
c000bbb2:	e8 e1 fe ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bbb7:	83 c4 20             	add    esp,0x20
c000bbba:	6a 00                	push   0x0
c000bbbc:	68 7d 04 00 c0       	push   0xc000047d
c000bbc1:	6a 0c                	push   0xc
c000bbc3:	53                   	push   ebx
c000bbc4:	e8 cf fe ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bbc9:	6a 00                	push   0x0
c000bbcb:	68 85 04 00 c0       	push   0xc0000485
c000bbd0:	6a 0d                	push   0xd
c000bbd2:	53                   	push   ebx
c000bbd3:	e8 c0 fe ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bbd8:	83 c4 20             	add    esp,0x20
c000bbdb:	6a 00                	push   0x0
c000bbdd:	68 8d 04 00 c0       	push   0xc000048d
c000bbe2:	6a 0e                	push   0xe
c000bbe4:	53                   	push   ebx
c000bbe5:	e8 ae fe ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bbea:	6a 00                	push   0x0
c000bbec:	68 95 04 00 c0       	push   0xc0000495
c000bbf1:	6a 0f                	push   0xf
c000bbf3:	53                   	push   ebx
c000bbf4:	e8 9f fe ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bbf9:	83 c4 20             	add    esp,0x20
c000bbfc:	6a 00                	push   0x0
c000bbfe:	68 9f 04 00 c0       	push   0xc000049f
c000bc03:	6a 10                	push   0x10
c000bc05:	53                   	push   ebx
c000bc06:	e8 8d fe ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bc0b:	6a 00                	push   0x0
c000bc0d:	68 a9 04 00 c0       	push   0xc00004a9
c000bc12:	6a 11                	push   0x11
c000bc14:	53                   	push   ebx
c000bc15:	e8 7e fe ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bc1a:	83 c4 20             	add    esp,0x20
c000bc1d:	6a 00                	push   0x0
c000bc1f:	68 b3 04 00 c0       	push   0xc00004b3
c000bc24:	6a 12                	push   0x12
c000bc26:	53                   	push   ebx
c000bc27:	e8 6c fe ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bc2c:	6a 01                	push   0x1
c000bc2e:	68 bd 04 00 c0       	push   0xc00004bd
c000bc33:	6a 60                	push   0x60
c000bc35:	53                   	push   ebx
c000bc36:	e8 5d fe ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bc3b:	83 c4 20             	add    esp,0x20
c000bc3e:	6a 00                	push   0x0
c000bc40:	68 c7 04 00 c0       	push   0xc00004c7
c000bc45:	6a 20                	push   0x20
c000bc47:	53                   	push   ebx
c000bc48:	e8 4b fe ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bc4d:	6a 00                	push   0x0
c000bc4f:	68 d1 04 00 c0       	push   0xc00004d1
c000bc54:	6a 21                	push   0x21
c000bc56:	53                   	push   ebx
c000bc57:	e8 3c fe ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bc5c:	83 c4 20             	add    esp,0x20
c000bc5f:	6a 00                	push   0x0
c000bc61:	68 db 04 00 c0       	push   0xc00004db
c000bc66:	6a 22                	push   0x22
c000bc68:	53                   	push   ebx
c000bc69:	e8 2a fe ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bc6e:	6a 00                	push   0x0
c000bc70:	68 e5 04 00 c0       	push   0xc00004e5
c000bc75:	6a 23                	push   0x23
c000bc77:	53                   	push   ebx
c000bc78:	e8 1b fe ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bc7d:	83 c4 20             	add    esp,0x20
c000bc80:	6a 00                	push   0x0
c000bc82:	68 ef 04 00 c0       	push   0xc00004ef
c000bc87:	6a 24                	push   0x24
c000bc89:	53                   	push   ebx
c000bc8a:	e8 09 fe ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bc8f:	6a 00                	push   0x0
c000bc91:	68 f9 04 00 c0       	push   0xc00004f9
c000bc96:	6a 25                	push   0x25
c000bc98:	53                   	push   ebx
c000bc99:	e8 fa fd ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bc9e:	83 c4 20             	add    esp,0x20
c000bca1:	6a 00                	push   0x0
c000bca3:	68 03 05 00 c0       	push   0xc0000503
c000bca8:	6a 26                	push   0x26
c000bcaa:	53                   	push   ebx
c000bcab:	e8 e8 fd ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bcb0:	6a 00                	push   0x0
c000bcb2:	68 0d 05 00 c0       	push   0xc000050d
c000bcb7:	6a 27                	push   0x27
c000bcb9:	53                   	push   ebx
c000bcba:	e8 d9 fd ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bcbf:	83 c4 20             	add    esp,0x20
c000bcc2:	6a 00                	push   0x0
c000bcc4:	68 17 05 00 c0       	push   0xc0000517
c000bcc9:	6a 28                	push   0x28
c000bccb:	53                   	push   ebx
c000bccc:	e8 c7 fd ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bcd1:	6a 00                	push   0x0
c000bcd3:	68 21 05 00 c0       	push   0xc0000521
c000bcd8:	6a 29                	push   0x29
c000bcda:	53                   	push   ebx
c000bcdb:	e8 b8 fd ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bce0:	83 c4 20             	add    esp,0x20
c000bce3:	6a 00                	push   0x0
c000bce5:	68 2b 05 00 c0       	push   0xc000052b
c000bcea:	6a 2a                	push   0x2a
c000bcec:	53                   	push   ebx
c000bced:	e8 a6 fd ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bcf2:	6a 00                	push   0x0
c000bcf4:	68 35 05 00 c0       	push   0xc0000535
c000bcf9:	6a 2b                	push   0x2b
c000bcfb:	53                   	push   ebx
c000bcfc:	e8 97 fd ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bd01:	83 c4 20             	add    esp,0x20
c000bd04:	6a 00                	push   0x0
c000bd06:	68 3f 05 00 c0       	push   0xc000053f
c000bd0b:	6a 2c                	push   0x2c
c000bd0d:	53                   	push   ebx
c000bd0e:	e8 85 fd ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bd13:	6a 00                	push   0x0
c000bd15:	68 49 05 00 c0       	push   0xc0000549
c000bd1a:	6a 2d                	push   0x2d
c000bd1c:	53                   	push   ebx
c000bd1d:	e8 76 fd ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bd22:	83 c4 20             	add    esp,0x20
c000bd25:	6a 00                	push   0x0
c000bd27:	68 53 05 00 c0       	push   0xc0000553
c000bd2c:	6a 2e                	push   0x2e
c000bd2e:	53                   	push   ebx
c000bd2f:	e8 64 fd ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bd34:	6a 00                	push   0x0
c000bd36:	68 5d 05 00 c0       	push   0xc000055d
c000bd3b:	6a 2f                	push   0x2f
c000bd3d:	53                   	push   ebx
c000bd3e:	e8 55 fd ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bd43:	83 c4 20             	add    esp,0x20
c000bd46:	6a 00                	push   0x0
c000bd48:	68 67 05 00 c0       	push   0xc0000567
c000bd4d:	6a 30                	push   0x30
c000bd4f:	53                   	push   ebx
c000bd50:	e8 43 fd ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bd55:	6a 00                	push   0x0
c000bd57:	68 71 05 00 c0       	push   0xc0000571
c000bd5c:	6a 31                	push   0x31
c000bd5e:	53                   	push   ebx
c000bd5f:	e8 34 fd ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bd64:	83 c4 20             	add    esp,0x20
c000bd67:	6a 00                	push   0x0
c000bd69:	68 7b 05 00 c0       	push   0xc000057b
c000bd6e:	6a 32                	push   0x32
c000bd70:	53                   	push   ebx
c000bd71:	e8 22 fd ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bd76:	6a 00                	push   0x0
c000bd78:	68 85 05 00 c0       	push   0xc0000585
c000bd7d:	6a 33                	push   0x33
c000bd7f:	53                   	push   ebx
c000bd80:	e8 13 fd ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bd85:	83 c4 20             	add    esp,0x20
c000bd88:	6a 00                	push   0x0
c000bd8a:	68 8f 05 00 c0       	push   0xc000058f
c000bd8f:	6a 34                	push   0x34
c000bd91:	53                   	push   ebx
c000bd92:	e8 01 fd ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bd97:	6a 00                	push   0x0
c000bd99:	68 99 05 00 c0       	push   0xc0000599
c000bd9e:	6a 35                	push   0x35
c000bda0:	53                   	push   ebx
c000bda1:	e8 f2 fc ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bda6:	83 c4 20             	add    esp,0x20
c000bda9:	6a 00                	push   0x0
c000bdab:	68 a3 05 00 c0       	push   0xc00005a3
c000bdb0:	6a 36                	push   0x36
c000bdb2:	53                   	push   ebx
c000bdb3:	e8 e0 fc ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bdb8:	6a 00                	push   0x0
c000bdba:	68 ad 05 00 c0       	push   0xc00005ad
c000bdbf:	6a 37                	push   0x37
c000bdc1:	53                   	push   ebx
c000bdc2:	e8 d1 fc ff ff       	call   c000ba98 <IDT::addEntry(int, void (*)(), bool)>
c000bdc7:	83 c4 20             	add    esp,0x20
c000bdca:	e8 e4 24 00 00       	call   c000e2b3 <Virt::getAKernelVAS()>
c000bdcf:	52                   	push   edx
c000bdd0:	6a 03                	push   0x3
c000bdd2:	6a 02                	push   0x2
c000bdd4:	50                   	push   eax
c000bdd5:	e8 1c 2b 00 00       	call   c000e8f6 <VAS::allocatePages(int, int)>
c000bdda:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000bde1:	89 c6                	mov    esi,eax
c000bde3:	e8 1e 32 00 00       	call   c000f006 <operator new(unsigned long)>
c000bde8:	81 c6 00 20 00 00    	add    esi,0x2000
c000bdee:	89 04 24             	mov    DWORD PTR [esp],eax
c000bdf1:	89 c7                	mov    edi,eax
c000bdf3:	e8 c0 1c 00 00       	call   c000dab8 <TSS::TSS()>
c000bdf8:	83 c4 0c             	add    esp,0xc
c000bdfb:	68 5b 04 00 c0       	push   0xc000045b
c000be00:	56                   	push   esi
c000be01:	57                   	push   edi
c000be02:	e8 f1 1c 00 00       	call   c000daf8 <TSS::setup(unsigned long, unsigned long)>
c000be07:	59                   	pop    ecx
c000be08:	89 c6                	mov    esi,eax
c000be0a:	5f                   	pop    edi
c000be0b:	6a 00                	push   0x0
c000be0d:	8d 44 24 14          	lea    eax,[esp+0x14]
c000be11:	50                   	push   eax
c000be12:	e8 db fb ff ff       	call   c000b9f2 <IDTEntry::IDTEntry(bool)>
c000be17:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be1b:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000be20:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000be27:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000be2d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be31:	80 ce 05             	or     dh,0x5
c000be34:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000be37:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be3f:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000be42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000be45:	e8 86 fc ff ff       	call   c000bad0 <IDT::flush()>
c000be4a:	83 c4 20             	add    esp,0x20
c000be4d:	5b                   	pop    ebx
c000be4e:	5e                   	pop    esi
c000be4f:	5f                   	pop    edi
c000be50:	c3                   	ret    

c000be51 <sbrk>:
c000be51:	55                   	push   ebp
c000be52:	57                   	push   edi
c000be53:	56                   	push   esi
c000be54:	53                   	push   ebx
c000be55:	83 ec 1c             	sub    esp,0x1c
c000be58:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000be5c:	85 db                	test   ebx,ebx
c000be5e:	74 37                	je     c000be97 <sbrk+0x46>
c000be60:	78 3f                	js     c000bea1 <sbrk+0x50>
c000be62:	e8 b3 88 00 00       	call   c001471a <thisCPU()>
c000be67:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000be6d:	83 e0 01             	and    eax,0x1
c000be70:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000be74:	a1 00 37 02 c0       	mov    eax,ds:0xc0023700
c000be79:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be7d:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000be83:	89 d8                	mov    eax,ebx
c000be85:	78 35                	js     c000bebc <sbrk+0x6b>
c000be87:	c1 f8 0c             	sar    eax,0xc
c000be8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000be8e:	89 c7                	mov    edi,eax
c000be90:	be 00 00 00 00       	mov    esi,0x0
c000be95:	eb 3c                	jmp    c000bed3 <sbrk+0x82>
c000be97:	a1 00 37 02 c0       	mov    eax,ds:0xc0023700
c000be9c:	e9 ad 00 00 00       	jmp    c000bf4e <sbrk+0xfd>
c000bea1:	83 ec 08             	sub    esp,0x8
c000bea4:	53                   	push   ebx
c000bea5:	68 24 0f 02 c0       	push   0xc0020f24
c000beaa:	e8 46 32 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000beaf:	83 c4 10             	add    esp,0x10
c000beb2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000beb7:	e9 92 00 00 00       	jmp    c000bf4e <sbrk+0xfd>
c000bebc:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000bec2:	eb c3                	jmp    c000be87 <sbrk+0x36>
c000bec4:	81 05 00 37 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023700,0x1000
c000bece:	46                   	inc    esi
c000becf:	39 f7                	cmp    edi,esi
c000bed1:	74 34                	je     c000bf07 <sbrk+0xb6>
c000bed3:	e8 db 23 00 00       	call   c000e2b3 <Virt::getAKernelVAS()>
c000bed8:	89 c3                	mov    ebx,eax
c000beda:	8b 2d 00 37 02 c0    	mov    ebp,DWORD PTR ds:0xc0023700
c000bee0:	e8 c9 06 00 00       	call   c000c5ae <Phys::allocatePage()>
c000bee5:	68 01 04 00 00       	push   0x401
c000beea:	55                   	push   ebp
c000beeb:	50                   	push   eax
c000beec:	53                   	push   ebx
c000beed:	e8 04 29 00 00       	call   c000e7f6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bef2:	83 c4 10             	add    esp,0x10
c000bef5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000befa:	74 c8                	je     c000bec4 <sbrk+0x73>
c000befc:	8b 1d 00 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023700
c000bf02:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf05:	eb bd                	jmp    c000bec4 <sbrk+0x73>
c000bf07:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bf0c:	74 48                	je     c000bf56 <sbrk+0x105>
c000bf0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bf12:	89 d3                	mov    ebx,edx
c000bf14:	c1 eb 0a             	shr    ebx,0xa
c000bf17:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bf1d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bf23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf27:	c1 e0 0c             	shl    eax,0xc
c000bf2a:	01 d0                	add    eax,edx
c000bf2c:	c1 e8 0a             	shr    eax,0xa
c000bf2f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf34:	2d 00 00 40 00       	sub    eax,0x400000
c000bf39:	39 c3                	cmp    ebx,eax
c000bf3b:	77 0d                	ja     c000bf4a <sbrk+0xf9>
c000bf3d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf40:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf46:	39 d8                	cmp    eax,ebx
c000bf48:	73 f3                	jae    c000bf3d <sbrk+0xec>
c000bf4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf4e:	83 c4 1c             	add    esp,0x1c
c000bf51:	5b                   	pop    ebx
c000bf52:	5e                   	pop    esi
c000bf53:	5f                   	pop    edi
c000bf54:	5d                   	pop    ebp
c000bf55:	c3                   	ret    
c000bf56:	e8 da 34 01 00       	call   c001f435 <CPU::readCR3()>
c000bf5b:	83 ec 0c             	sub    esp,0xc
c000bf5e:	50                   	push   eax
c000bf5f:	e8 e3 34 01 00       	call   c001f447 <CPU::writeCR3(unsigned long)>
c000bf64:	83 c4 10             	add    esp,0x10
c000bf67:	eb e1                	jmp    c000bf4a <sbrk+0xf9>

c000bf69 <mmap>:
c000bf69:	83 ec 18             	sub    esp,0x18
c000bf6c:	68 54 0f 02 c0       	push   0xc0020f54
c000bf71:	e8 14 99 00 00       	call   c001588a <Krnl::panic(char const*)>
c000bf76:	b8 00 00 00 00       	mov    eax,0x0
c000bf7b:	83 c4 1c             	add    esp,0x1c
c000bf7e:	c3                   	ret    

c000bf7f <munmap>:
c000bf7f:	83 ec 18             	sub    esp,0x18
c000bf82:	68 59 0f 02 c0       	push   0xc0020f59
c000bf87:	e8 fe 98 00 00       	call   c001588a <Krnl::panic(char const*)>
c000bf8c:	b8 00 00 00 00       	mov    eax,0x0
c000bf91:	83 c4 1c             	add    esp,0x1c
c000bf94:	c3                   	ret    

c000bf95 <liballoc_lock()>:
c000bf95:	83 ec 0c             	sub    esp,0xc
c000bf98:	e8 41 c8 00 00       	call   c00187de <lockScheduler()>
c000bf9d:	b8 00 00 00 00       	mov    eax,0x0
c000bfa2:	83 c4 0c             	add    esp,0xc
c000bfa5:	c3                   	ret    

c000bfa6 <liballoc_unlock()>:
c000bfa6:	83 ec 0c             	sub    esp,0xc
c000bfa9:	e8 32 c8 00 00       	call   c00187e0 <unlockScheduler()>
c000bfae:	b8 00 00 00 00       	mov    eax,0x0
c000bfb3:	83 c4 0c             	add    esp,0xc
c000bfb6:	c3                   	ret    

c000bfb7 <liballoc_alloc(int)>:
c000bfb7:	83 ec 0c             	sub    esp,0xc
c000bfba:	e8 f4 22 00 00       	call   c000e2b3 <Virt::getAKernelVAS()>
c000bfbf:	83 ec 04             	sub    esp,0x4
c000bfc2:	6a 01                	push   0x1
c000bfc4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfc8:	50                   	push   eax
c000bfc9:	e8 28 29 00 00       	call   c000e8f6 <VAS::allocatePages(int, int)>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	c3                   	ret    

c000bfd2 <liballoc_free(void*, int)>:
c000bfd2:	83 ec 0c             	sub    esp,0xc
c000bfd5:	e8 d9 22 00 00       	call   c000e2b3 <Virt::getAKernelVAS()>
c000bfda:	83 ec 08             	sub    esp,0x8
c000bfdd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfe1:	50                   	push   eax
c000bfe2:	e8 b9 25 00 00       	call   c000e5a0 <VAS::freeAllocatedPages(unsigned long)>
c000bfe7:	b8 00 00 00 00       	mov    eax,0x0
c000bfec:	83 c4 1c             	add    esp,0x1c
c000bfef:	c3                   	ret    

c000bff0 <realloc>:
c000bff0:	83 ec 14             	sub    esp,0x14
c000bff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bff7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bffb:	e8 33 54 ff ff       	call   c0001433 <dlrealloc>
c000c000:	83 c4 1c             	add    esp,0x1c
c000c003:	c3                   	ret    

c000c004 <malloc>:
c000c004:	83 ec 18             	sub    esp,0x18
c000c007:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c00b:	e8 e6 4e ff ff       	call   c0000ef6 <dlmalloc>
c000c010:	83 c4 1c             	add    esp,0x1c
c000c013:	c3                   	ret    

c000c014 <free>:
c000c014:	83 ec 18             	sub    esp,0x18
c000c017:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c01b:	e8 7b 4b ff ff       	call   c0000b9b <dlfree>
c000c020:	83 c4 1c             	add    esp,0x1c
c000c023:	c3                   	ret    

c000c024 <rfree>:
c000c024:	83 ec 18             	sub    esp,0x18
c000c027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c02b:	e8 e4 ff ff ff       	call   c000c014 <free>
c000c030:	83 c4 1c             	add    esp,0x1c
c000c033:	c3                   	ret    

c000c034 <calloc>:
c000c034:	56                   	push   esi
c000c035:	53                   	push   ebx
c000c036:	83 ec 10             	sub    esp,0x10
c000c039:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c03d:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000c042:	53                   	push   ebx
c000c043:	e8 bc ff ff ff       	call   c000c004 <malloc>
c000c048:	89 c6                	mov    esi,eax
c000c04a:	83 c4 0c             	add    esp,0xc
c000c04d:	53                   	push   ebx
c000c04e:	6a 00                	push   0x0
c000c050:	50                   	push   eax
c000c051:	e8 64 46 ff ff       	call   c00006ba <memset>
c000c056:	89 f0                	mov    eax,esi
c000c058:	83 c4 14             	add    esp,0x14
c000c05b:	5b                   	pop    ebx
c000c05c:	5e                   	pop    esi
c000c05d:	c3                   	ret    

c000c05e <hwTextMode_loadInData(VgaText*)>:
c000c05e:	57                   	push   edi
c000c05f:	56                   	push   esi
c000c060:	53                   	push   ebx
c000c061:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000c065:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000c06b:	85 c0                	test   eax,eax
c000c06d:	7e 30                	jle    c000c09f <hwTextMode_loadInData(VgaText*)+0x41>
c000c06f:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000c072:	31 f6                	xor    esi,esi
c000c074:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000c077:	31 c0                	xor    eax,eax
c000c079:	c1 e1 05             	shl    ecx,0x5
c000c07c:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000c082:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000c086:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000c08a:	40                   	inc    eax
c000c08b:	83 f8 50             	cmp    eax,0x50
c000c08e:	75 f2                	jne    c000c082 <hwTextMode_loadInData(VgaText*)+0x24>
c000c090:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000c096:	46                   	inc    esi
c000c097:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000c09d:	7f d5                	jg     c000c074 <hwTextMode_loadInData(VgaText*)+0x16>
c000c09f:	5b                   	pop    ebx
c000c0a0:	5e                   	pop    esi
c000c0a1:	5f                   	pop    edi
c000c0a2:	c3                   	ret    

c000c0a3 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000c0a3:	56                   	push   esi
c000c0a4:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000c0a9:	53                   	push   ebx
c000c0aa:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c0ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c0b2:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000c0b8:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000c0be:	c1 e0 04             	shl    eax,0x4
c000c0c1:	83 e6 0f             	and    esi,0xf
c000c0c4:	0f b6 c0             	movzx  eax,al
c000c0c7:	41                   	inc    ecx
c000c0c8:	09 f0                	or     eax,esi
c000c0ca:	83 c2 02             	add    edx,0x2
c000c0cd:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000c0d1:	c1 e0 08             	shl    eax,0x8
c000c0d4:	09 f0                	or     eax,esi
c000c0d6:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000c0da:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000c0e0:	75 d0                	jne    c000c0b2 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000c0e2:	5b                   	pop    ebx
c000c0e3:	5e                   	pop    esi
c000c0e4:	c3                   	ret    

c000c0e5 <hwTextMode_showCursor(VgaText*, bool)>:
c000c0e5:	56                   	push   esi
c000c0e6:	53                   	push   ebx
c000c0e7:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000c0ec:	74 38                	je     c000c126 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000c0ee:	bb d4 03 00 00       	mov    ebx,0x3d4
c000c0f3:	b0 0a                	mov    al,0xa
c000c0f5:	89 da                	mov    edx,ebx
c000c0f7:	ee                   	out    dx,al
c000c0f8:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000c0fd:	89 ca                	mov    edx,ecx
c000c0ff:	ec                   	in     al,dx
c000c100:	b2 0f                	mov    dl,0xf
c000c102:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c106:	83 e0 c0             	and    eax,0xffffffc0
c000c109:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000c10f:	09 d0                	or     eax,edx
c000c111:	89 ca                	mov    edx,ecx
c000c113:	ee                   	out    dx,al
c000c114:	b0 0b                	mov    al,0xb
c000c116:	89 da                	mov    edx,ebx
c000c118:	ee                   	out    dx,al
c000c119:	89 ca                	mov    edx,ecx
c000c11b:	ec                   	in     al,dx
c000c11c:	83 e0 e0             	and    eax,0xffffffe0
c000c11f:	83 c8 0f             	or     eax,0xf
c000c122:	ee                   	out    dx,al
c000c123:	5b                   	pop    ebx
c000c124:	5e                   	pop    esi
c000c125:	c3                   	ret    
c000c126:	b0 0a                	mov    al,0xa
c000c128:	ba d4 03 00 00       	mov    edx,0x3d4
c000c12d:	ee                   	out    dx,al
c000c12e:	b0 20                	mov    al,0x20
c000c130:	ba d5 03 00 00       	mov    edx,0x3d5
c000c135:	ee                   	out    dx,al
c000c136:	5b                   	pop    ebx
c000c137:	5e                   	pop    esi
c000c138:	c3                   	ret    

c000c139 <hwTextMode_update(VgaText*)>:
c000c139:	c3                   	ret    

c000c13a <hwTextMode_updateCursor(VgaText*)>:
c000c13a:	56                   	push   esi
c000c13b:	b9 19 00 00 00       	mov    ecx,0x19
c000c140:	53                   	push   ebx
c000c141:	be d4 03 00 00       	mov    esi,0x3d4
c000c146:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c14a:	89 f2                	mov    edx,esi
c000c14c:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000c152:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000c158:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000c15b:	c1 e1 04             	shl    ecx,0x4
c000c15e:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000c164:	b0 0f                	mov    al,0xf
c000c166:	ee                   	out    dx,al
c000c167:	bb d5 03 00 00       	mov    ebx,0x3d5
c000c16c:	88 c8                	mov    al,cl
c000c16e:	89 da                	mov    edx,ebx
c000c170:	ee                   	out    dx,al
c000c171:	b0 0e                	mov    al,0xe
c000c173:	89 f2                	mov    edx,esi
c000c175:	ee                   	out    dx,al
c000c176:	89 c8                	mov    eax,ecx
c000c178:	89 da                	mov    edx,ebx
c000c17a:	66 c1 e8 08          	shr    ax,0x8
c000c17e:	ee                   	out    dx,al
c000c17f:	5b                   	pop    ebx
c000c180:	5e                   	pop    esi
c000c181:	c3                   	ret    

c000c182 <hwTextMode_disableBlink(VgaText*, bool)>:
c000c182:	ba da 03 00 00       	mov    edx,0x3da
c000c187:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000c18c:	75 18                	jne    c000c1a6 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000c18e:	ec                   	in     al,dx
c000c18f:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c194:	b0 30                	mov    al,0x30
c000c196:	89 ca                	mov    edx,ecx
c000c198:	ee                   	out    dx,al
c000c199:	ba c1 03 00 00       	mov    edx,0x3c1
c000c19e:	ec                   	in     al,dx
c000c19f:	83 c8 08             	or     eax,0x8
c000c1a2:	89 ca                	mov    edx,ecx
c000c1a4:	ee                   	out    dx,al
c000c1a5:	c3                   	ret    
c000c1a6:	ec                   	in     al,dx
c000c1a7:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c1ac:	b0 30                	mov    al,0x30
c000c1ae:	89 ca                	mov    edx,ecx
c000c1b0:	ee                   	out    dx,al
c000c1b1:	ba c1 03 00 00       	mov    edx,0x3c1
c000c1b6:	ec                   	in     al,dx
c000c1b7:	83 e0 f7             	and    eax,0xfffffff7
c000c1ba:	89 ca                	mov    edx,ecx
c000c1bc:	ee                   	out    dx,al
c000c1bd:	c3                   	ret    

c000c1be <hwTextMode_scrollScreen(VgaText*)>:
c000c1be:	55                   	push   ebp
c000c1bf:	bd 02 00 00 00       	mov    ebp,0x2
c000c1c4:	57                   	push   edi
c000c1c5:	56                   	push   esi
c000c1c6:	53                   	push   ebx
c000c1c7:	83 ec 1c             	sub    esp,0x1c
c000c1ca:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000c1d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1d6:	31 c0                	xor    eax,eax
c000c1d8:	eb 0b                	jmp    c000c1e5 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000c1da:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1e0:	74 57                	je     c000c239 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000c1e2:	43                   	inc    ebx
c000c1e3:	89 f0                	mov    eax,esi
c000c1e5:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000c1eb:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000c1f1:	88 13                	mov    BYTE PTR [ebx],dl
c000c1f3:	8d 70 01             	lea    esi,[eax+0x1]
c000c1f6:	83 fd 18             	cmp    ebp,0x18
c000c1f9:	75 df                	jne    c000c1da <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000c1fb:	a8 01                	test   al,0x1
c000c1fd:	75 13                	jne    c000c212 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000c1ff:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000c202:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c208:	75 d8                	jne    c000c1e2 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000c20a:	83 c4 1c             	add    esp,0x1c
c000c20d:	5b                   	pop    ebx
c000c20e:	5e                   	pop    esi
c000c20f:	5f                   	pop    edi
c000c210:	5d                   	pop    ebp
c000c211:	c3                   	ret    
c000c212:	83 ec 08             	sub    esp,0x8
c000c215:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c219:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000c220:	50                   	push   eax
c000c221:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c225:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000c22c:	50                   	push   eax
c000c22d:	e8 66 0b 00 00       	call   c000cd98 <VgaText::combineColours(unsigned char, unsigned char)>
c000c232:	83 c4 10             	add    esp,0x10
c000c235:	88 07                	mov    BYTE PTR [edi],al
c000c237:	eb c9                	jmp    c000c202 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000c239:	45                   	inc    ebp
c000c23a:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000c242:	eb 8e                	jmp    c000c1d2 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000c244 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000c244:	56                   	push   esi
c000c245:	53                   	push   ebx
c000c246:	83 ec 0c             	sub    esp,0xc
c000c249:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c24d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000c251:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000c256:	50                   	push   eax
c000c257:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000c25c:	50                   	push   eax
c000c25d:	e8 36 0b 00 00       	call   c000cd98 <VgaText::combineColours(unsigned char, unsigned char)>
c000c262:	5a                   	pop    edx
c000c263:	0f b6 c0             	movzx  eax,al
c000c266:	59                   	pop    ecx
c000c267:	50                   	push   eax
c000c268:	89 f0                	mov    eax,esi
c000c26a:	0f be f0             	movsx  esi,al
c000c26d:	56                   	push   esi
c000c26e:	e8 cb 0b 00 00       	call   c000ce3e <VgaText::combineCharAndColour(char, unsigned char)>
c000c273:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c277:	ba 19 00 00 00       	mov    edx,0x19
c000c27c:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000c282:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c285:	8d 14 92             	lea    edx,[edx+edx*4]
c000c288:	c1 e1 04             	shl    ecx,0x4
c000c28b:	c1 e2 04             	shl    edx,0x4
c000c28e:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000c292:	01 ca                	add    edx,ecx
c000c294:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000c29c:	83 c4 14             	add    esp,0x14
c000c29f:	5b                   	pop    ebx
c000c2a0:	5e                   	pop    esi
c000c2a1:	c3                   	ret    

c000c2a2 <setupTextMode()>:
c000c2a2:	c7 05 98 43 02 c0 82 c1 00 c0 	mov    DWORD PTR ds:0xc0024398,0xc000c182
c000c2ac:	c7 05 84 43 02 c0 5e c0 00 c0 	mov    DWORD PTR ds:0xc0024384,0xc000c05e
c000c2b6:	c7 05 80 43 02 c0 a3 c0 00 c0 	mov    DWORD PTR ds:0xc0024380,0xc000c0a3
c000c2c0:	c7 05 8c 43 02 c0 be c1 00 c0 	mov    DWORD PTR ds:0xc002438c,0xc000c1be
c000c2ca:	c7 05 94 43 02 c0 e5 c0 00 c0 	mov    DWORD PTR ds:0xc0024394,0xc000c0e5
c000c2d4:	c7 05 88 43 02 c0 39 c1 00 c0 	mov    DWORD PTR ds:0xc0024388,0xc000c139
c000c2de:	c7 05 90 43 02 c0 3a c1 00 c0 	mov    DWORD PTR ds:0xc0024390,0xc000c13a
c000c2e8:	c7 05 9c 43 02 c0 44 c2 00 c0 	mov    DWORD PTR ds:0xc002439c,0xc000c244
c000c2f2:	c3                   	ret    

c000c2f3 <kernel_main>:
c000c2f3:	57                   	push   edi
c000c2f4:	bf f9 03 00 00       	mov    edi,0x3f9
c000c2f9:	56                   	push   esi
c000c2fa:	31 f6                	xor    esi,esi
c000c2fc:	53                   	push   ebx
c000c2fd:	83 ec 10             	sub    esp,0x10
c000c300:	e8 ed 08 00 00       	call   c000cbf2 <installVgaTextImplementation()>
c000c305:	e8 98 ff ff ff       	call   c000c2a2 <setupTextMode()>
c000c30a:	89 f0                	mov    eax,esi
c000c30c:	89 fa                	mov    edx,edi
c000c30e:	ee                   	out    dx,al
c000c30f:	bb fb 03 00 00       	mov    ebx,0x3fb
c000c314:	b0 80                	mov    al,0x80
c000c316:	89 da                	mov    edx,ebx
c000c318:	ee                   	out    dx,al
c000c319:	b1 03                	mov    cl,0x3
c000c31b:	ba f8 03 00 00       	mov    edx,0x3f8
c000c320:	88 c8                	mov    al,cl
c000c322:	ee                   	out    dx,al
c000c323:	89 f0                	mov    eax,esi
c000c325:	89 fa                	mov    edx,edi
c000c327:	ee                   	out    dx,al
c000c328:	88 c8                	mov    al,cl
c000c32a:	89 da                	mov    edx,ebx
c000c32c:	ee                   	out    dx,al
c000c32d:	b0 c7                	mov    al,0xc7
c000c32f:	ba fa 03 00 00       	mov    edx,0x3fa
c000c334:	ee                   	out    dx,al
c000c335:	b0 0b                	mov    al,0xb
c000c337:	ba fc 03 00 00       	mov    edx,0x3fc
c000c33c:	ee                   	out    dx,al
c000c33d:	a1 24 05 00 00       	mov    eax,ds:0x524
c000c342:	83 ec 0c             	sub    esp,0xc
c000c345:	05 ff 0f 00 00       	add    eax,0xfff
c000c34a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c34f:	50                   	push   eax
c000c350:	e8 59 03 00 00       	call   c000c6ae <Phys::physicalMemorySetup(unsigned int)>
c000c355:	e8 da 1e 00 00       	call   c000e234 <Virt::virtualMemorySetup()>
c000c35a:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000c360:	83 c4 10             	add    esp,0x10
c000c363:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000c369:	75 0e                	jne    c000c379 <kernel_main+0x86>
c000c36b:	89 d8                	mov    eax,ebx
c000c36d:	25 48 03 00 00       	and    eax,0x348
c000c372:	3d 00 03 00 00       	cmp    eax,0x300
c000c377:	74 10                	je     c000c389 <kernel_main+0x96>
c000c379:	83 ec 0c             	sub    esp,0xc
c000c37c:	68 67 24 02 c0       	push   0xc0022467
c000c381:	e8 04 95 00 00       	call   c001588a <Krnl::panic(char const*)>
c000c386:	83 c4 10             	add    esp,0x10
c000c389:	83 ec 0c             	sub    esp,0xc
c000c38c:	89 1d 00 43 02 c0    	mov    DWORD PTR ds:0xc0024300,ebx
c000c392:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c396:	53                   	push   ebx
c000c397:	e8 42 20 00 00       	call   c000e3de <VAS::VAS()>
c000c39c:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c000c3a2:	e8 79 3c ff ff       	call   c0000020 <callGlobalConstructors>
c000c3a7:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000c3ae:	e8 53 2c 00 00       	call   c000f006 <operator new(unsigned long)>
c000c3b3:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3b6:	89 c6                	mov    esi,eax
c000c3b8:	e8 97 ea ff ff       	call   c000ae54 <Computer::Computer()>
c000c3bd:	6a 00                	push   0x0
c000c3bf:	89 35 e8 42 02 c0    	mov    DWORD PTR ds:0xc00242e8,esi
c000c3c5:	6a 00                	push   0x0
c000c3c7:	6a 00                	push   0x0
c000c3c9:	56                   	push   esi
c000c3ca:	e8 77 f2 ff ff       	call   c000b646 <Computer::open(int, int, void*)>
c000c3cf:	83 c4 14             	add    esp,0x14
c000c3d2:	53                   	push   ebx
c000c3d3:	e8 b2 22 00 00       	call   c000e68a <VAS::~VAS()>
c000c3d8:	c7 04 24 60 0f 02 c0 	mov    DWORD PTR [esp],0xc0020f60
c000c3df:	e8 a6 94 00 00       	call   c001588a <Krnl::panic(char const*)>
c000c3e4:	83 c4 20             	add    esp,0x20
c000c3e7:	5b                   	pop    ebx
c000c3e8:	5e                   	pop    esi
c000c3e9:	5f                   	pop    edi
c000c3ea:	c3                   	ret    

c000c3eb <Phys::allocateDMA(unsigned long)>:
c000c3eb:	55                   	push   ebp
c000c3ec:	31 d2                	xor    edx,edx
c000c3ee:	57                   	push   edi
c000c3ef:	31 ed                	xor    ebp,ebp
c000c3f1:	56                   	push   esi
c000c3f2:	31 c9                	xor    ecx,ecx
c000c3f4:	53                   	push   ebx
c000c3f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c3f9:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000c3ff:	31 c0                	xor    eax,eax
c000c401:	c1 ee 0c             	shr    esi,0xc
c000c404:	eb 17                	jmp    c000c41d <Phys::allocateDMA(unsigned long)+0x32>
c000c406:	85 c9                	test   ecx,ecx
c000c408:	75 04                	jne    c000c40e <Phys::allocateDMA(unsigned long)+0x23>
c000c40a:	89 d5                	mov    ebp,edx
c000c40c:	89 d0                	mov    eax,edx
c000c40e:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c411:	39 de                	cmp    esi,ebx
c000c413:	74 20                	je     c000c435 <Phys::allocateDMA(unsigned long)+0x4a>
c000c415:	42                   	inc    edx
c000c416:	89 d9                	mov    ecx,ebx
c000c418:	83 fa 2f             	cmp    edx,0x2f
c000c41b:	7f 11                	jg     c000c42e <Phys::allocateDMA(unsigned long)+0x43>
c000c41d:	80 ba 40 43 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdbcc0],0x0
c000c424:	74 e0                	je     c000c406 <Phys::allocateDMA(unsigned long)+0x1b>
c000c426:	31 c9                	xor    ecx,ecx
c000c428:	42                   	inc    edx
c000c429:	83 fa 2f             	cmp    edx,0x2f
c000c42c:	7e ef                	jle    c000c41d <Phys::allocateDMA(unsigned long)+0x32>
c000c42e:	5b                   	pop    ebx
c000c42f:	31 c0                	xor    eax,eax
c000c431:	5e                   	pop    esi
c000c432:	5f                   	pop    edi
c000c433:	5d                   	pop    ebp
c000c434:	c3                   	ret    
c000c435:	8d 14 30             	lea    edx,[eax+esi*1]
c000c438:	89 d7                	mov    edi,edx
c000c43a:	4f                   	dec    edi
c000c43b:	79 03                	jns    c000c440 <Phys::allocateDMA(unsigned long)+0x55>
c000c43d:	8d 7a 0e             	lea    edi,[edx+0xe]
c000c440:	c1 ff 04             	sar    edi,0x4
c000c443:	89 c2                	mov    edx,eax
c000c445:	c1 fa 04             	sar    edx,0x4
c000c448:	39 fa                	cmp    edx,edi
c000c44a:	75 2f                	jne    c000c47b <Phys::allocateDMA(unsigned long)+0x90>
c000c44c:	85 db                	test   ebx,ebx
c000c44e:	74 1a                	je     c000c46a <Phys::allocateDMA(unsigned long)+0x7f>
c000c450:	be 40 43 02 c0       	mov    esi,0xc0024340
c000c455:	8d 90 40 43 02 c0    	lea    edx,[eax-0x3ffdbcc0]
c000c45b:	f7 d6                	not    esi
c000c45d:	29 c6                	sub    esi,eax
c000c45f:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c462:	42                   	inc    edx
c000c463:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000c466:	39 d9                	cmp    ecx,ebx
c000c468:	7f f5                	jg     c000c45f <Phys::allocateDMA(unsigned long)+0x74>
c000c46a:	85 ff                	test   edi,edi
c000c46c:	74 13                	je     c000c481 <Phys::allocateDMA(unsigned long)+0x96>
c000c46e:	5b                   	pop    ebx
c000c46f:	05 50 20 0c 00       	add    eax,0xc2050
c000c474:	5e                   	pop    esi
c000c475:	c1 e0 0c             	shl    eax,0xc
c000c478:	5f                   	pop    edi
c000c479:	5d                   	pop    ebp
c000c47a:	c3                   	ret    
c000c47b:	89 ea                	mov    edx,ebp
c000c47d:	31 c9                	xor    ecx,ecx
c000c47f:	eb a7                	jmp    c000c428 <Phys::allocateDMA(unsigned long)+0x3d>
c000c481:	5b                   	pop    ebx
c000c482:	c1 e0 0c             	shl    eax,0xc
c000c485:	5e                   	pop    esi
c000c486:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000c48b:	5f                   	pop    edi
c000c48c:	5d                   	pop    ebp
c000c48d:	c3                   	ret    

c000c48e <Phys::freeDMA(unsigned long, unsigned long)>:
c000c48e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c492:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c496:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c49c:	c1 e9 0c             	shr    ecx,0xc
c000c49f:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c4a4:	76 25                	jbe    c000c4cb <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c4a6:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c4ab:	c1 e8 0c             	shr    eax,0xc
c000c4ae:	8d 50 10             	lea    edx,[eax+0x10]
c000c4b1:	85 c9                	test   ecx,ecx
c000c4b3:	74 15                	je     c000c4ca <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c4b5:	8d 82 40 43 02 c0    	lea    eax,[edx-0x3ffdbcc0]
c000c4bb:	8d 94 11 40 43 02 c0 	lea    edx,[ecx+edx*1-0x3ffdbcc0]
c000c4c2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c4c5:	40                   	inc    eax
c000c4c6:	39 d0                	cmp    eax,edx
c000c4c8:	75 f8                	jne    c000c4c2 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c4ca:	c3                   	ret    
c000c4cb:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c4d1:	c1 ea 0c             	shr    edx,0xc
c000c4d4:	eb db                	jmp    c000c4b1 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c4d6 <Phys::setPageState(unsigned long, bool)>:
c000c4d6:	56                   	push   esi
c000c4d7:	ba 01 00 00 00       	mov    edx,0x1
c000c4dc:	53                   	push   ebx
c000c4dd:	8b 35 04 37 02 c0    	mov    esi,DWORD PTR ds:0xc0023704
c000c4e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c4e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c4eb:	89 c8                	mov    eax,ecx
c000c4ed:	83 e1 07             	and    ecx,0x7
c000c4f0:	c1 e8 03             	shr    eax,0x3
c000c4f3:	d3 e3                	shl    ebx,cl
c000c4f5:	01 c6                	add    esi,eax
c000c4f7:	d3 e2                	shl    edx,cl
c000c4f9:	f7 d2                	not    edx
c000c4fb:	20 16                	and    BYTE PTR [esi],dl
c000c4fd:	03 05 04 37 02 c0    	add    eax,DWORD PTR ds:0xc0023704
c000c503:	08 18                	or     BYTE PTR [eax],bl
c000c505:	5b                   	pop    ebx
c000c506:	5e                   	pop    esi
c000c507:	c3                   	ret    

c000c508 <Phys::getPageState(unsigned long)>:
c000c508:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c50c:	8b 15 04 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023704
c000c512:	89 c8                	mov    eax,ecx
c000c514:	83 e1 07             	and    ecx,0x7
c000c517:	c1 e8 03             	shr    eax,0x3
c000c51a:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000c51e:	d3 f8                	sar    eax,cl
c000c520:	83 e0 01             	and    eax,0x1
c000c523:	c3                   	ret    

c000c524 <Phys::freePage(unsigned long)>:
c000c524:	53                   	push   ebx
c000c525:	83 ec 08             	sub    esp,0x8
c000c528:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c52c:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c532:	76 57                	jbe    c000c58b <Phys::freePage(unsigned long)+0x67>
c000c534:	c1 eb 0c             	shr    ebx,0xc
c000c537:	53                   	push   ebx
c000c538:	e8 cb ff ff ff       	call   c000c508 <Phys::getPageState(unsigned long)>
c000c53d:	5a                   	pop    edx
c000c53e:	84 c0                	test   al,al
c000c540:	74 5b                	je     c000c59d <Phys::freePage(unsigned long)+0x79>
c000c542:	a1 2c 43 02 c0       	mov    eax,ds:0xc002432c
c000c547:	48                   	dec    eax
c000c548:	a3 2c 43 02 c0       	mov    ds:0xc002432c,eax
c000c54d:	8d 04 80             	lea    eax,[eax+eax*4]
c000c550:	8d 04 80             	lea    eax,[eax+eax*4]
c000c553:	c1 e0 02             	shl    eax,0x2
c000c556:	99                   	cdq    
c000c557:	f7 3d 30 43 02 c0    	idiv   DWORD PTR ds:0xc0024330
c000c55d:	39 05 28 43 02 c0    	cmp    DWORD PTR ds:0xc0024328,eax
c000c563:	75 13                	jne    c000c578 <Phys::freePage(unsigned long)+0x54>
c000c565:	83 ec 08             	sub    esp,0x8
c000c568:	6a 00                	push   0x0
c000c56a:	53                   	push   ebx
c000c56b:	e8 66 ff ff ff       	call   c000c4d6 <Phys::setPageState(unsigned long, bool)>
c000c570:	83 c4 10             	add    esp,0x10
c000c573:	83 c4 08             	add    esp,0x8
c000c576:	5b                   	pop    ebx
c000c577:	c3                   	ret    
c000c578:	83 ec 0c             	sub    esp,0xc
c000c57b:	a3 28 43 02 c0       	mov    ds:0xc0024328,eax
c000c580:	50                   	push   eax
c000c581:	e8 00 0a 00 00       	call   c000cf86 <VgaText::updateRAMUsageDisplay(int)>
c000c586:	83 c4 10             	add    esp,0x10
c000c589:	eb da                	jmp    c000c565 <Phys::freePage(unsigned long)+0x41>
c000c58b:	68 00 10 00 00       	push   0x1000
c000c590:	53                   	push   ebx
c000c591:	e8 f8 fe ff ff       	call   c000c48e <Phys::freeDMA(unsigned long, unsigned long)>
c000c596:	59                   	pop    ecx
c000c597:	5b                   	pop    ebx
c000c598:	83 c4 08             	add    esp,0x8
c000c59b:	5b                   	pop    ebx
c000c59c:	c3                   	ret    
c000c59d:	c7 44 24 10 7b 0f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020f7b
c000c5a5:	83 c4 08             	add    esp,0x8
c000c5a8:	5b                   	pop    ebx
c000c5a9:	e9 dc 92 00 00       	jmp    c001588a <Krnl::panic(char const*)>

c000c5ae <Phys::allocatePage()>:
c000c5ae:	56                   	push   esi
c000c5af:	53                   	push   ebx
c000c5b0:	51                   	push   ecx
c000c5b1:	8b 35 20 43 02 c0    	mov    esi,DWORD PTR ds:0xc0024320
c000c5b7:	89 f3                	mov    ebx,esi
c000c5b9:	eb 0a                	jmp    c000c5c5 <Phys::allocatePage()+0x17>
c000c5bb:	89 1d 20 43 02 c0    	mov    DWORD PTR ds:0xc0024320,ebx
c000c5c1:	39 de                	cmp    esi,ebx
c000c5c3:	74 24                	je     c000c5e9 <Phys::allocatePage()+0x3b>
c000c5c5:	53                   	push   ebx
c000c5c6:	e8 3d ff ff ff       	call   c000c508 <Phys::getPageState(unsigned long)>
c000c5cb:	5a                   	pop    edx
c000c5cc:	84 c0                	test   al,al
c000c5ce:	74 5a                	je     c000c62a <Phys::allocatePage()+0x7c>
c000c5d0:	43                   	inc    ebx
c000c5d1:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c5d7:	75 e2                	jne    c000c5bb <Phys::allocatePage()+0xd>
c000c5d9:	31 db                	xor    ebx,ebx
c000c5db:	c7 05 20 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024320,0x0
c000c5e5:	39 de                	cmp    esi,ebx
c000c5e7:	75 dc                	jne    c000c5c5 <Phys::allocatePage()+0x17>
c000c5e9:	83 ec 0c             	sub    esp,0xc
c000c5ec:	68 91 0f 02 c0       	push   0xc0020f91
c000c5f1:	e8 ff 2a 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000c5f6:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000c5fd:	e8 e9 fd ff ff       	call   c000c3eb <Phys::allocateDMA(unsigned long)>
c000c602:	83 c4 10             	add    esp,0x10
c000c605:	85 c0                	test   eax,eax
c000c607:	75 56                	jne    c000c65f <Phys::allocatePage()+0xb1>
c000c609:	83 ec 0c             	sub    esp,0xc
c000c60c:	68 a2 0f 02 c0       	push   0xc0020fa2
c000c611:	e8 74 92 00 00       	call   c001588a <Krnl::panic(char const*)>
c000c616:	83 c4 10             	add    esp,0x10
c000c619:	8b 1d 20 43 02 c0    	mov    ebx,DWORD PTR ds:0xc0024320
c000c61f:	53                   	push   ebx
c000c620:	e8 e3 fe ff ff       	call   c000c508 <Phys::getPageState(unsigned long)>
c000c625:	5a                   	pop    edx
c000c626:	84 c0                	test   al,al
c000c628:	75 a6                	jne    c000c5d0 <Phys::allocatePage()+0x22>
c000c62a:	6a 01                	push   0x1
c000c62c:	53                   	push   ebx
c000c62d:	e8 a4 fe ff ff       	call   c000c4d6 <Phys::setPageState(unsigned long, bool)>
c000c632:	a1 2c 43 02 c0       	mov    eax,ds:0xc002432c
c000c637:	59                   	pop    ecx
c000c638:	40                   	inc    eax
c000c639:	5b                   	pop    ebx
c000c63a:	a3 2c 43 02 c0       	mov    ds:0xc002432c,eax
c000c63f:	8d 04 80             	lea    eax,[eax+eax*4]
c000c642:	8d 04 80             	lea    eax,[eax+eax*4]
c000c645:	c1 e0 02             	shl    eax,0x2
c000c648:	99                   	cdq    
c000c649:	f7 3d 30 43 02 c0    	idiv   DWORD PTR ds:0xc0024330
c000c64f:	39 05 28 43 02 c0    	cmp    DWORD PTR ds:0xc0024328,eax
c000c655:	75 0c                	jne    c000c663 <Phys::allocatePage()+0xb5>
c000c657:	a1 20 43 02 c0       	mov    eax,ds:0xc0024320
c000c65c:	c1 e0 0c             	shl    eax,0xc
c000c65f:	5a                   	pop    edx
c000c660:	5b                   	pop    ebx
c000c661:	5e                   	pop    esi
c000c662:	c3                   	ret    
c000c663:	83 ec 0c             	sub    esp,0xc
c000c666:	a3 28 43 02 c0       	mov    ds:0xc0024328,eax
c000c66b:	50                   	push   eax
c000c66c:	e8 15 09 00 00       	call   c000cf86 <VgaText::updateRAMUsageDisplay(int)>
c000c671:	83 c4 10             	add    esp,0x10
c000c674:	eb e1                	jmp    c000c657 <Phys::allocatePage()+0xa9>

c000c676 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c676:	56                   	push   esi
c000c677:	53                   	push   ebx
c000c678:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c67c:	39 1d 24 43 02 c0    	cmp    DWORD PTR ds:0xc0024324,ebx
c000c682:	73 06                	jae    c000c68a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c684:	89 1d 24 43 02 c0    	mov    DWORD PTR ds:0xc0024324,ebx
c000c68a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c68e:	c1 eb 0c             	shr    ebx,0xc
c000c691:	c1 e8 0c             	shr    eax,0xc
c000c694:	39 d8                	cmp    eax,ebx
c000c696:	73 13                	jae    c000c6ab <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c698:	6a 00                	push   0x0
c000c69a:	8d 70 01             	lea    esi,[eax+0x1]
c000c69d:	50                   	push   eax
c000c69e:	e8 33 fe ff ff       	call   c000c4d6 <Phys::setPageState(unsigned long, bool)>
c000c6a3:	5a                   	pop    edx
c000c6a4:	89 f0                	mov    eax,esi
c000c6a6:	59                   	pop    ecx
c000c6a7:	39 f3                	cmp    ebx,esi
c000c6a9:	75 ed                	jne    c000c698 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c6ab:	5b                   	pop    ebx
c000c6ac:	5e                   	pop    esi
c000c6ad:	c3                   	ret    

c000c6ae <Phys::physicalMemorySetup(unsigned int)>:
c000c6ae:	55                   	push   ebp
c000c6af:	57                   	push   edi
c000c6b0:	56                   	push   esi
c000c6b1:	53                   	push   ebx
c000c6b2:	31 db                	xor    ebx,ebx
c000c6b4:	83 ec 40             	sub    esp,0x40
c000c6b7:	6a 30                	push   0x30
c000c6b9:	6a 00                	push   0x0
c000c6bb:	68 40 43 02 c0       	push   0xc0024340
c000c6c0:	e8 f5 3f ff ff       	call   c00006ba <memset>
c000c6c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c6c9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c6ce:	05 00 10 00 00       	add    eax,0x1000
c000c6d3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c6d7:	83 c4 10             	add    esp,0x10
c000c6da:	83 ec 08             	sub    esp,0x8
c000c6dd:	6a 01                	push   0x1
c000c6df:	53                   	push   ebx
c000c6e0:	43                   	inc    ebx
c000c6e1:	e8 f0 fd ff ff       	call   c000c4d6 <Phys::setPageState(unsigned long, bool)>
c000c6e6:	83 c4 10             	add    esp,0x10
c000c6e9:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c6ef:	75 e9                	jne    c000c6da <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c6f1:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000c6f8:	66 85 c0             	test   ax,ax
c000c6fb:	0f 84 8e 01 00 00    	je     c000c88f <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000c701:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c705:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c70d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c711:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000c716:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c71a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c722:	eb 15                	jmp    c000c739 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000c724:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c728:	83 c3 18             	add    ebx,0x18
c000c72b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c72f:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000c733:	0f 84 66 01 00 00    	je     c000c89f <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000c739:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c73c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c73f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000c742:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c746:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c74a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000c74c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000c74f:	01 f0                	add    eax,esi
c000c751:	55                   	push   ebp
c000c752:	11 fa                	adc    edx,edi
c000c754:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c758:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c75c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c760:	56                   	push   esi
c000c761:	68 dc 0f 02 c0       	push   0xc0020fdc
c000c766:	e8 8a 29 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000c76b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c76f:	83 c4 10             	add    esp,0x10
c000c772:	09 f8                	or     eax,edi
c000c774:	0f 85 25 01 00 00    	jne    c000c89f <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000c77a:	4d                   	dec    ebp
c000c77b:	75 a7                	jne    c000c724 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c77d:	ba 00 00 08 00       	mov    edx,0x80000
c000c782:	89 c1                	mov    ecx,eax
c000c784:	39 f2                	cmp    edx,esi
c000c786:	19 f9                	sbb    ecx,edi
c000c788:	0f 82 a7 00 00 00    	jb     c000c835 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000c78e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000c792:	89 c1                	mov    ecx,eax
c000c794:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000c798:	0f 83 97 00 00 00    	jae    c000c835 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000c79e:	ba 00 00 0a 00       	mov    edx,0xa0000
c000c7a3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c7a7:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c7ab:	39 fa                	cmp    edx,edi
c000c7ad:	19 e8                	sbb    eax,ebp
c000c7af:	0f 82 14 01 00 00    	jb     c000c8c9 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000c7b5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c7b9:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c7bd:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000c7c3:	ba ff 1f 00 00       	mov    edx,0x1fff
c000c7c8:	83 d5 ff             	adc    ebp,0xffffffff
c000c7cb:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c7cf:	31 c0                	xor    eax,eax
c000c7d1:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000c7d5:	39 fa                	cmp    edx,edi
c000c7d7:	89 c1                	mov    ecx,eax
c000c7d9:	19 e9                	sbb    ecx,ebp
c000c7db:	0f 83 43 ff ff ff    	jae    c000c724 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c7e1:	be 00 00 08 00       	mov    esi,0x80000
c000c7e6:	50                   	push   eax
c000c7e7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c7eb:	57                   	push   edi
c000c7ec:	56                   	push   esi
c000c7ed:	68 00 10 02 c0       	push   0xc0021000
c000c7f2:	e8 fe 28 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000c7f7:	5a                   	pop    edx
c000c7f8:	59                   	pop    ecx
c000c7f9:	57                   	push   edi
c000c7fa:	56                   	push   esi
c000c7fb:	e8 76 fe ff ff       	call   c000c676 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c800:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c804:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c808:	83 c4 0c             	add    esp,0xc
c000c80b:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c80f:	03 05 30 43 02 c0    	add    eax,DWORD PTR ds:0xc0024330
c000c815:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c81c:	a3 30 43 02 c0       	mov    ds:0xc0024330,eax
c000c821:	52                   	push   edx
c000c822:	50                   	push   eax
c000c823:	68 be 0f 02 c0       	push   0xc0020fbe
c000c828:	e8 c8 28 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000c82d:	83 c4 10             	add    esp,0x10
c000c830:	e9 ef fe ff ff       	jmp    c000c724 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c835:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000c839:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c83d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c841:	39 ea                	cmp    edx,ebp
c000c843:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000c847:	0f 82 d7 fe ff ff    	jb     c000c724 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c84d:	ba ff 1f 00 00       	mov    edx,0x1fff
c000c852:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000c856:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000c85a:	0f 83 c4 fe ff ff    	jae    c000c724 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c860:	39 ee                	cmp    esi,ebp
c000c862:	89 f8                	mov    eax,edi
c000c864:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000c868:	0f 83 78 ff ff ff    	jae    c000c7e6 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c872:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c876:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000c87a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c87e:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000c882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c886:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c88a:	e9 57 ff ff ff       	jmp    c000c7e6 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c88f:	83 ec 0c             	sub    esp,0xc
c000c892:	68 b0 0f 02 c0       	push   0xc0020fb0
c000c897:	e8 ee 8f 00 00       	call   c001588a <Krnl::panic(char const*)>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	bb 40 01 00 00       	mov    ebx,0x140
c000c8a4:	83 ec 08             	sub    esp,0x8
c000c8a7:	6a 00                	push   0x0
c000c8a9:	53                   	push   ebx
c000c8aa:	43                   	inc    ebx
c000c8ab:	e8 26 fc ff ff       	call   c000c4d6 <Phys::setPageState(unsigned long, bool)>
c000c8b0:	ff 05 30 43 02 c0    	inc    DWORD PTR ds:0xc0024330
c000c8b6:	83 c4 10             	add    esp,0x10
c000c8b9:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c8bf:	75 e3                	jne    c000c8a4 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000c8c1:	83 c4 3c             	add    esp,0x3c
c000c8c4:	5b                   	pop    ebx
c000c8c5:	5e                   	pop    esi
c000c8c6:	5f                   	pop    edi
c000c8c7:	5d                   	pop    ebp
c000c8c8:	c3                   	ret    
c000c8c9:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000c8d1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c8d9:	e9 d7 fe ff ff       	jmp    c000c7b5 <Phys::physicalMemorySetup(unsigned int)+0x107>

c000c8de <Pipe::isAtty()>:
c000c8de:	31 c0                	xor    eax,eax
c000c8e0:	c3                   	ret    
c000c8e1:	90                   	nop

c000c8e2 <Pipe::~Pipe()>:
c000c8e2:	83 ec 0c             	sub    esp,0xc
c000c8e5:	ba 6c 10 02 c0       	mov    edx,0xc002106c
c000c8ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8ee:	89 10                	mov    DWORD PTR [eax],edx
c000c8f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8f4:	83 ec 0c             	sub    esp,0xc
c000c8f7:	50                   	push   eax
c000c8f8:	e8 c5 15 00 00       	call   c000dec2 <UnixFile::~UnixFile()>
c000c8fd:	83 c4 10             	add    esp,0x10
c000c900:	90                   	nop
c000c901:	83 c4 0c             	add    esp,0xc
c000c904:	c3                   	ret    
c000c905:	90                   	nop

c000c906 <Pipe::~Pipe()>:
c000c906:	83 ec 0c             	sub    esp,0xc
c000c909:	83 ec 0c             	sub    esp,0xc
c000c90c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c910:	e8 cd ff ff ff       	call   c000c8e2 <Pipe::~Pipe()>
c000c915:	83 c4 10             	add    esp,0x10
c000c918:	83 ec 08             	sub    esp,0x8
c000c91b:	6a 20                	push   0x20
c000c91d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c921:	e8 ef 26 00 00       	call   c000f015 <operator delete(void*, unsigned long)>
c000c926:	83 c4 10             	add    esp,0x10
c000c929:	83 c4 0c             	add    esp,0xc
c000c92c:	c3                   	ret    
c000c92d:	90                   	nop

c000c92e <Pipe::read(unsigned long long, void*, int*)>:
c000c92e:	55                   	push   ebp
c000c92f:	57                   	push   edi
c000c930:	56                   	push   esi
c000c931:	53                   	push   ebx
c000c932:	83 ec 1c             	sub    esp,0x1c
c000c935:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c939:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c93d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c941:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c944:	89 c8                	mov    eax,ecx
c000c946:	99                   	cdq    
c000c947:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c94b:	74 19                	je     c000c966 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c94d:	39 f9                	cmp    ecx,edi
c000c94f:	89 d1                	mov    ecx,edx
c000c951:	19 f1                	sbb    ecx,esi
c000c953:	73 11                	jae    c000c966 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c955:	e8 84 be 00 00       	call   c00187de <lockScheduler()>
c000c95a:	e8 b3 c1 00 00       	call   c0018b12 <schedule()>
c000c95f:	e8 7c be 00 00       	call   c00187e0 <unlockScheduler()>
c000c964:	eb db                	jmp    c000c941 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c966:	39 f8                	cmp    eax,edi
c000c968:	89 d1                	mov    ecx,edx
c000c96a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c96e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c972:	19 f1                	sbb    ecx,esi
c000c974:	73 08                	jae    c000c97e <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c976:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c97a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c97e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c981:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c984:	29 c6                	sub    esi,eax
c000c986:	89 f1                	mov    ecx,esi
c000c988:	c1 f9 1f             	sar    ecx,0x1f
c000c98b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c98f:	89 ca                	mov    edx,ecx
c000c991:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c995:	19 d1                	sbb    ecx,edx
c000c997:	73 04                	jae    c000c99d <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c999:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c99d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c9a1:	89 fd                	mov    ebp,edi
c000c9a3:	29 f5                	sub    ebp,esi
c000c9a5:	85 f6                	test   esi,esi
c000c9a7:	74 12                	je     c000c9bb <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c9a9:	52                   	push   edx
c000c9aa:	56                   	push   esi
c000c9ab:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c9ae:	50                   	push   eax
c000c9af:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c9b3:	e8 cc 3c ff ff       	call   c0000684 <memcpy>
c000c9b8:	83 c4 10             	add    esp,0x10
c000c9bb:	85 ed                	test   ebp,ebp
c000c9bd:	74 12                	je     c000c9d1 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c9bf:	50                   	push   eax
c000c9c0:	55                   	push   ebp
c000c9c1:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c9c4:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c9c8:	56                   	push   esi
c000c9c9:	e8 b6 3c ff ff       	call   c0000684 <memcpy>
c000c9ce:	83 c4 10             	add    esp,0x10
c000c9d1:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c9d4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c9d7:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c9da:	99                   	cdq    
c000c9db:	89 f7                	mov    edi,esi
c000c9dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c9e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c9e5:	c1 ff 1f             	sar    edi,0x1f
c000c9e8:	57                   	push   edi
c000c9e9:	56                   	push   esi
c000c9ea:	52                   	push   edx
c000c9eb:	50                   	push   eax
c000c9ec:	e8 6b 28 01 00       	call   c001f25c <__umoddi3>
c000c9f1:	83 c4 10             	add    esp,0x10
c000c9f4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c9f7:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c9fc:	75 10                	jne    c000ca0e <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000c9fe:	83 ec 0c             	sub    esp,0xc
c000ca01:	68 29 10 02 c0       	push   0xc0021029
c000ca06:	e8 7f 8e 00 00       	call   c001588a <Krnl::panic(char const*)>
c000ca0b:	83 c4 10             	add    esp,0x10
c000ca0e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca12:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca16:	89 10                	mov    DWORD PTR [eax],edx
c000ca18:	83 c4 1c             	add    esp,0x1c
c000ca1b:	31 c0                	xor    eax,eax
c000ca1d:	5b                   	pop    ebx
c000ca1e:	5e                   	pop    esi
c000ca1f:	5f                   	pop    edi
c000ca20:	5d                   	pop    ebp
c000ca21:	c3                   	ret    

c000ca22 <Pipe::write(unsigned long long, void*, int*)>:
c000ca22:	55                   	push   ebp
c000ca23:	57                   	push   edi
c000ca24:	56                   	push   esi
c000ca25:	53                   	push   ebx
c000ca26:	83 ec 1c             	sub    esp,0x1c
c000ca29:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca2d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ca31:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ca35:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca38:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ca3b:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ca3e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ca42:	89 de                	mov    esi,ebx
c000ca44:	89 df                	mov    edi,ebx
c000ca46:	c1 ff 1f             	sar    edi,0x1f
c000ca49:	01 c6                	add    esi,eax
c000ca4b:	89 c8                	mov    eax,ecx
c000ca4d:	11 d7                	adc    edi,edx
c000ca4f:	99                   	cdq    
c000ca50:	39 f1                	cmp    ecx,esi
c000ca52:	89 d0                	mov    eax,edx
c000ca54:	19 f8                	sbb    eax,edi
c000ca56:	b8 01 00 00 00       	mov    eax,0x1
c000ca5b:	0f 82 80 00 00 00    	jb     c000cae1 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ca61:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ca64:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ca67:	01 d8                	add    eax,ebx
c000ca69:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ca6d:	99                   	cdq    
c000ca6e:	f7 f9                	idiv   ecx
c000ca70:	29 d1                	sub    ecx,edx
c000ca72:	89 d7                	mov    edi,edx
c000ca74:	89 c8                	mov    eax,ecx
c000ca76:	99                   	cdq    
c000ca77:	39 ce                	cmp    esi,ecx
c000ca79:	19 d3                	sbb    ebx,edx
c000ca7b:	bb 00 00 00 00       	mov    ebx,0x0
c000ca80:	72 04                	jb     c000ca86 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ca82:	89 f3                	mov    ebx,esi
c000ca84:	29 cb                	sub    ebx,ecx
c000ca86:	89 f1                	mov    ecx,esi
c000ca88:	29 d9                	sub    ecx,ebx
c000ca8a:	74 1a                	je     c000caa6 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000ca8c:	52                   	push   edx
c000ca8d:	51                   	push   ecx
c000ca8e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ca92:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ca96:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ca99:	57                   	push   edi
c000ca9a:	e8 e5 3b ff ff       	call   c0000684 <memcpy>
c000ca9f:	83 c4 10             	add    esp,0x10
c000caa2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000caa6:	85 db                	test   ebx,ebx
c000caa8:	74 12                	je     c000cabc <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000caaa:	50                   	push   eax
c000caab:	53                   	push   ebx
c000caac:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000cab0:	51                   	push   ecx
c000cab1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000cab4:	e8 cb 3b ff ff       	call   c0000684 <memcpy>
c000cab9:	83 c4 10             	add    esp,0x10
c000cabc:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000cabf:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000cac4:	75 10                	jne    c000cad6 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000cac6:	83 ec 0c             	sub    esp,0xc
c000cac9:	68 45 10 02 c0       	push   0xc0021045
c000cace:	e8 b7 8d 00 00       	call   c001588a <Krnl::panic(char const*)>
c000cad3:	83 c4 10             	add    esp,0x10
c000cad6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cada:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000cadd:	89 38                	mov    DWORD PTR [eax],edi
c000cadf:	31 c0                	xor    eax,eax
c000cae1:	83 c4 1c             	add    esp,0x1c
c000cae4:	5b                   	pop    ebx
c000cae5:	5e                   	pop    esi
c000cae6:	5f                   	pop    edi
c000cae7:	5d                   	pop    ebp
c000cae8:	c3                   	ret    
c000cae9:	90                   	nop

c000caea <Pipe::Pipe(int)>:
c000caea:	83 ec 0c             	sub    esp,0xc
c000caed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caf1:	83 ec 08             	sub    esp,0x8
c000caf4:	6a 00                	push   0x0
c000caf6:	50                   	push   eax
c000caf7:	e8 24 12 00 00       	call   c000dd20 <UnixFile::UnixFile(int)>
c000cafc:	83 c4 10             	add    esp,0x10
c000caff:	ba 6c 10 02 c0       	mov    edx,0xc002106c
c000cb04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb08:	89 10                	mov    DWORD PTR [eax],edx
c000cb0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb0e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb12:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000cb15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb19:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000cb20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb24:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000cb2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cb2f:	83 ec 0c             	sub    esp,0xc
c000cb32:	50                   	push   eax
c000cb33:	e8 cc f4 ff ff       	call   c000c004 <malloc>
c000cb38:	83 c4 10             	add    esp,0x10
c000cb3b:	89 c2                	mov    edx,eax
c000cb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb41:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000cb44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb48:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000cb4c:	90                   	nop
c000cb4d:	83 c4 0c             	add    esp,0xc
c000cb50:	c3                   	ret    
c000cb51:	90                   	nop

c000cb52 <VgaText::isAtty()>:
c000cb52:	b0 01                	mov    al,0x1
c000cb54:	c3                   	ret    
c000cb55:	90                   	nop

c000cb56 <VgaText::~VgaText()>:
c000cb56:	83 ec 0c             	sub    esp,0xc
c000cb59:	ba 28 11 02 c0       	mov    edx,0xc0021128
c000cb5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb62:	89 10                	mov    DWORD PTR [eax],edx
c000cb64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb68:	83 ec 0c             	sub    esp,0xc
c000cb6b:	50                   	push   eax
c000cb6c:	e8 51 13 00 00       	call   c000dec2 <UnixFile::~UnixFile()>
c000cb71:	83 c4 10             	add    esp,0x10
c000cb74:	90                   	nop
c000cb75:	83 c4 0c             	add    esp,0xc
c000cb78:	c3                   	ret    
c000cb79:	90                   	nop

c000cb7a <VgaText::~VgaText()>:
c000cb7a:	83 ec 0c             	sub    esp,0xc
c000cb7d:	83 ec 0c             	sub    esp,0xc
c000cb80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb84:	e8 cd ff ff ff       	call   c000cb56 <VgaText::~VgaText()>
c000cb89:	83 c4 10             	add    esp,0x10
c000cb8c:	83 ec 08             	sub    esp,0x8
c000cb8f:	68 60 12 00 00       	push   0x1260
c000cb94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb98:	e8 78 24 00 00       	call   c000f015 <operator delete(void*, unsigned long)>
c000cb9d:	83 c4 10             	add    esp,0x10
c000cba0:	83 c4 0c             	add    esp,0xc
c000cba3:	c3                   	ret    

c000cba4 <VgaText::read(unsigned long long, void*, int*)>:
c000cba4:	83 ec 10             	sub    esp,0x10
c000cba7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbb3:	e8 38 57 00 00       	call   c00122f0 <readKeyboard(VgaText*, char*, unsigned long)>
c000cbb8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cbbc:	89 02                	mov    DWORD PTR [edx],eax
c000cbbe:	31 c0                	xor    eax,eax
c000cbc0:	83 c4 1c             	add    esp,0x1c
c000cbc3:	c3                   	ret    

c000cbc4 <setTerminalScrollLock(bool)>:
c000cbc4:	c3                   	ret    

c000cbc5 <addToTerminalCycle(VgaText*)>:
c000cbc5:	8b 15 a0 43 02 c0    	mov    edx,DWORD PTR ds:0xc00243a0
c000cbcb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbcf:	85 d2                	test   edx,edx
c000cbd1:	75 0c                	jne    c000cbdf <addToTerminalCycle(VgaText*)+0x1a>
c000cbd3:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000cbd9:	a3 a0 43 02 c0       	mov    ds:0xc00243a0,eax
c000cbde:	c3                   	ret    
c000cbdf:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000cbe5:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000cbeb:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000cbf1:	c3                   	ret    

c000cbf2 <installVgaTextImplementation()>:
c000cbf2:	83 ec 10             	sub    esp,0x10
c000cbf5:	6a 20                	push   0x20
c000cbf7:	6a 00                	push   0x0
c000cbf9:	68 80 43 02 c0       	push   0xc0024380
c000cbfe:	e8 b7 3a ff ff       	call   c00006ba <memset>
c000cc03:	83 c4 1c             	add    esp,0x1c
c000cc06:	c3                   	ret    

c000cc07 <scrollTerminalScrollLock(int)>:
c000cc07:	c3                   	ret    

c000cc08 <VgaText::load()>:
c000cc08:	53                   	push   ebx
c000cc09:	31 c0                	xor    eax,eax
c000cc0b:	83 ec 58             	sub    esp,0x58
c000cc0e:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000cc12:	89 e2                	mov    edx,esp
c000cc14:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000cc18:	40                   	inc    eax
c000cc19:	83 f8 50             	cmp    eax,0x50
c000cc1c:	75 f6                	jne    c000cc14 <VgaText::load()+0xc>
c000cc1e:	31 c0                	xor    eax,eax
c000cc20:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000cc27:	84 c9                	test   cl,cl
c000cc29:	74 06                	je     c000cc31 <VgaText::load()+0x29>
c000cc2b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cc2e:	40                   	inc    eax
c000cc2f:	eb ef                	jmp    c000cc20 <VgaText::load()+0x18>
c000cc31:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000cc37:	85 c0                	test   eax,eax
c000cc39:	74 09                	je     c000cc44 <VgaText::load()+0x3c>
c000cc3b:	51                   	push   ecx
c000cc3c:	51                   	push   ecx
c000cc3d:	52                   	push   edx
c000cc3e:	53                   	push   ebx
c000cc3f:	ff d0                	call   eax
c000cc41:	83 c4 10             	add    esp,0x10
c000cc44:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000cc4a:	85 c0                	test   eax,eax
c000cc4c:	74 09                	je     c000cc57 <VgaText::load()+0x4f>
c000cc4e:	83 ec 0c             	sub    esp,0xc
c000cc51:	53                   	push   ebx
c000cc52:	ff d0                	call   eax
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	83 c4 58             	add    esp,0x58
c000cc5a:	5b                   	pop    ebx
c000cc5b:	c3                   	ret    

c000cc5c <VgaText::updateCursor()>:
c000cc5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc60:	39 05 a4 43 02 c0    	cmp    DWORD PTR ds:0xc00243a4,eax
c000cc66:	75 0c                	jne    c000cc74 <VgaText::updateCursor()+0x18>
c000cc68:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000cc6e:	85 c0                	test   eax,eax
c000cc70:	74 02                	je     c000cc74 <VgaText::updateCursor()+0x18>
c000cc72:	ff e0                	jmp    eax
c000cc74:	c3                   	ret    
c000cc75:	90                   	nop

c000cc76 <VgaText::showCursor(bool)>:
c000cc76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc7e:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000cc84:	c3                   	ret    
c000cc85:	90                   	nop

c000cc86 <VgaText::disableBlink(bool)>:
c000cc86:	56                   	push   esi
c000cc87:	53                   	push   ebx
c000cc88:	51                   	push   ecx
c000cc89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc8d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc91:	39 1d a4 43 02 c0    	cmp    DWORD PTR ds:0xc00243a4,ebx
c000cc97:	75 18                	jne    c000ccb1 <VgaText::disableBlink(bool)+0x2b>
c000cc99:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000cc9f:	85 c0                	test   eax,eax
c000cca1:	74 0e                	je     c000ccb1 <VgaText::disableBlink(bool)+0x2b>
c000cca3:	89 f1                	mov    ecx,esi
c000cca5:	52                   	push   edx
c000cca6:	52                   	push   edx
c000cca7:	0f b6 d1             	movzx  edx,cl
c000ccaa:	52                   	push   edx
c000ccab:	53                   	push   ebx
c000ccac:	ff d0                	call   eax
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 f0                	mov    eax,esi
c000ccb3:	83 f0 01             	xor    eax,0x1
c000ccb6:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000ccbc:	58                   	pop    eax
c000ccbd:	5b                   	pop    ebx
c000ccbe:	5e                   	pop    esi
c000ccbf:	c3                   	ret    

c000ccc0 <VgaText::doANSI_SGR(int)>:
c000ccc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccc8:	85 d2                	test   edx,edx
c000ccca:	75 14                	jne    c000cce0 <VgaText::doANSI_SGR(int)+0x20>
c000cccc:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000ccd2:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000ccd8:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000ccde:	eb 65                	jmp    c000cd45 <VgaText::doANSI_SGR(int)+0x85>
c000cce0:	83 fa 07             	cmp    edx,0x7
c000cce3:	75 14                	jne    c000ccf9 <VgaText::doANSI_SGR(int)+0x39>
c000cce5:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000cceb:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000ccf1:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000ccf7:	eb 4c                	jmp    c000cd45 <VgaText::doANSI_SGR(int)+0x85>
c000ccf9:	83 fa 1b             	cmp    edx,0x1b
c000ccfc:	74 ce                	je     c000cccc <VgaText::doANSI_SGR(int)+0xc>
c000ccfe:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000cd01:	83 f9 07             	cmp    ecx,0x7
c000cd04:	77 09                	ja     c000cd0f <VgaText::doANSI_SGR(int)+0x4f>
c000cd06:	8b 14 8d 40 37 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc8c0]
c000cd0d:	eb 20                	jmp    c000cd2f <VgaText::doANSI_SGR(int)+0x6f>
c000cd0f:	8d 4a d8             	lea    ecx,[edx-0x28]
c000cd12:	83 f9 07             	cmp    ecx,0x7
c000cd15:	77 09                	ja     c000cd20 <VgaText::doANSI_SGR(int)+0x60>
c000cd17:	8b 14 8d 40 37 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc8c0]
c000cd1e:	eb 25                	jmp    c000cd45 <VgaText::doANSI_SGR(int)+0x85>
c000cd20:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000cd23:	83 f9 07             	cmp    ecx,0x7
c000cd26:	77 0e                	ja     c000cd36 <VgaText::doANSI_SGR(int)+0x76>
c000cd28:	8b 14 95 f8 35 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdca08]
c000cd2f:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd35:	c3                   	ret    
c000cd36:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000cd39:	83 f9 07             	cmp    ecx,0x7
c000cd3c:	77 0d                	ja     c000cd4b <VgaText::doANSI_SGR(int)+0x8b>
c000cd3e:	8b 14 95 d0 35 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdca30]
c000cd45:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd4b:	c3                   	ret    

c000cd4c <VgaText::setDefaultBgColour(VgaColour)>:
c000cd4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd54:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000cd5a:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd60:	c3                   	ret    
c000cd61:	90                   	nop

c000cd62 <VgaText::setDefaultFgColour(VgaColour)>:
c000cd62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd6a:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000cd70:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd76:	c3                   	ret    
c000cd77:	90                   	nop

c000cd78 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000cd78:	53                   	push   ebx
c000cd79:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd7d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cd81:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cd85:	51                   	push   ecx
c000cd86:	e8 c1 ff ff ff       	call   c000cd4c <VgaText::setDefaultBgColour(VgaColour)>
c000cd8b:	58                   	pop    eax
c000cd8c:	5a                   	pop    edx
c000cd8d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cd91:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000cd95:	5b                   	pop    ebx
c000cd96:	eb ca                	jmp    c000cd62 <VgaText::setDefaultFgColour(VgaColour)>

c000cd98 <VgaText::combineColours(unsigned char, unsigned char)>:
c000cd98:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000cd9c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000cda1:	83 e0 0f             	and    eax,0xf
c000cda4:	c1 e2 04             	shl    edx,0x4
c000cda7:	09 d0                	or     eax,edx
c000cda9:	c3                   	ret    

c000cdaa <VgaText::scrollScreen()>:
c000cdaa:	57                   	push   edi
c000cdab:	56                   	push   esi
c000cdac:	be 01 00 00 00       	mov    esi,0x1
c000cdb1:	53                   	push   ebx
c000cdb2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cdb6:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000cdbc:	31 ff                	xor    edi,edi
c000cdbe:	01 d9                	add    ecx,ebx
c000cdc0:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000cdc3:	83 fe 17             	cmp    esi,0x17
c000cdc6:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000cdcc:	75 28                	jne    c000cdf6 <VgaText::scrollScreen()+0x4c>
c000cdce:	f7 c7 01 00 00 00    	test   edi,0x1
c000cdd4:	74 1c                	je     c000cdf2 <VgaText::scrollScreen()+0x48>
c000cdd6:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000cddd:	50                   	push   eax
c000cdde:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000cde5:	50                   	push   eax
c000cde6:	e8 ad ff ff ff       	call   c000cd98 <VgaText::combineColours(unsigned char, unsigned char)>
c000cdeb:	5a                   	pop    edx
c000cdec:	5a                   	pop    edx
c000cded:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000cdf0:	eb 04                	jmp    c000cdf6 <VgaText::scrollScreen()+0x4c>
c000cdf2:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000cdf6:	47                   	inc    edi
c000cdf7:	41                   	inc    ecx
c000cdf8:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000cdfe:	75 c0                	jne    c000cdc0 <VgaText::scrollScreen()+0x16>
c000ce00:	46                   	inc    esi
c000ce01:	83 fe 18             	cmp    esi,0x18
c000ce04:	75 b0                	jne    c000cdb6 <VgaText::scrollScreen()+0xc>
c000ce06:	39 1d a4 43 02 c0    	cmp    DWORD PTR ds:0xc00243a4,ebx
c000ce0c:	75 24                	jne    c000ce32 <VgaText::scrollScreen()+0x88>
c000ce0e:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ce15:	74 08                	je     c000ce1f <VgaText::scrollScreen()+0x75>
c000ce17:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ce1d:	eb 13                	jmp    c000ce32 <VgaText::scrollScreen()+0x88>
c000ce1f:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ce25:	85 c0                	test   eax,eax
c000ce27:	74 09                	je     c000ce32 <VgaText::scrollScreen()+0x88>
c000ce29:	83 ec 0c             	sub    esp,0xc
c000ce2c:	53                   	push   ebx
c000ce2d:	ff d0                	call   eax
c000ce2f:	83 c4 10             	add    esp,0x10
c000ce32:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce36:	5b                   	pop    ebx
c000ce37:	5e                   	pop    esi
c000ce38:	5f                   	pop    edi
c000ce39:	e9 1e fe ff ff       	jmp    c000cc5c <VgaText::updateCursor()>

c000ce3e <VgaText::combineCharAndColour(char, unsigned char)>:
c000ce3e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ce43:	c1 e0 08             	shl    eax,0x8
c000ce46:	89 c2                	mov    edx,eax
c000ce48:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ce4d:	09 d0                	or     eax,edx
c000ce4f:	c3                   	ret    

c000ce50 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ce50:	53                   	push   ebx
c000ce51:	83 ec 08             	sub    esp,0x8
c000ce54:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ce58:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce5d:	50                   	push   eax
c000ce5e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce63:	50                   	push   eax
c000ce64:	e8 2f ff ff ff       	call   c000cd98 <VgaText::combineColours(unsigned char, unsigned char)>
c000ce69:	5a                   	pop    edx
c000ce6a:	0f b6 c0             	movzx  eax,al
c000ce6d:	5b                   	pop    ebx
c000ce6e:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ce73:	50                   	push   eax
c000ce74:	53                   	push   ebx
c000ce75:	e8 c4 ff ff ff       	call   c000ce3e <VgaText::combineCharAndColour(char, unsigned char)>
c000ce7a:	5a                   	pop    edx
c000ce7b:	5a                   	pop    edx
c000ce7c:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ce82:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ce86:	0f b7 d2             	movzx  edx,dx
c000ce89:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ce8e:	39 0d a4 43 02 c0    	cmp    DWORD PTR ds:0xc00243a4,ecx
c000ce94:	75 14                	jne    c000ceaa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ce96:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ce9c:	85 c0                	test   eax,eax
c000ce9e:	74 0a                	je     c000ceaa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000cea0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000cea4:	83 c4 08             	add    esp,0x8
c000cea7:	5b                   	pop    ebx
c000cea8:	ff e0                	jmp    eax
c000ceaa:	83 c4 08             	add    esp,0x8
c000cead:	5b                   	pop    ebx
c000ceae:	c3                   	ret    
c000ceaf:	90                   	nop

c000ceb0 <VgaText::getCursorX()>:
c000ceb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ceb4:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000ceba:	c3                   	ret    
c000cebb:	90                   	nop

c000cebc <VgaText::getCursorY()>:
c000cebc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cec0:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000cec6:	c3                   	ret    
c000cec7:	90                   	nop

c000cec8 <VgaText::setCursor(int, int)>:
c000cec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cecc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ced0:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000ced6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ceda:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000cee0:	e9 77 fd ff ff       	jmp    c000cc5c <VgaText::updateCursor()>
c000cee5:	90                   	nop

c000cee6 <VgaText::setCursorX(int)>:
c000cee6:	83 ec 10             	sub    esp,0x10
c000cee9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ceed:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000cef3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cef7:	50                   	push   eax
c000cef8:	e8 cb ff ff ff       	call   c000cec8 <VgaText::setCursor(int, int)>
c000cefd:	83 c4 1c             	add    esp,0x1c
c000cf00:	c3                   	ret    
c000cf01:	90                   	nop

c000cf02 <VgaText::setCursorY(int)>:
c000cf02:	83 ec 10             	sub    esp,0x10
c000cf05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf0d:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000cf13:	50                   	push   eax
c000cf14:	e8 af ff ff ff       	call   c000cec8 <VgaText::setCursor(int, int)>
c000cf19:	83 c4 1c             	add    esp,0x1c
c000cf1c:	c3                   	ret    
c000cf1d:	90                   	nop

c000cf1e <VgaText::incrementCursor(bool)>:
c000cf1e:	56                   	push   esi
c000cf1f:	53                   	push   ebx
c000cf20:	51                   	push   ecx
c000cf21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf25:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf29:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cf2f:	40                   	inc    eax
c000cf30:	83 f8 50             	cmp    eax,0x50
c000cf33:	74 08                	je     c000cf3d <VgaText::incrementCursor(bool)+0x1f>
c000cf35:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cf3b:	eb 33                	jmp    c000cf70 <VgaText::incrementCursor(bool)+0x52>
c000cf3d:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cf43:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cf4d:	8d 50 01             	lea    edx,[eax+0x1]
c000cf50:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cf56:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cf5c:	75 12                	jne    c000cf70 <VgaText::incrementCursor(bool)+0x52>
c000cf5e:	83 ec 0c             	sub    esp,0xc
c000cf61:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cf67:	53                   	push   ebx
c000cf68:	e8 3d fe ff ff       	call   c000cdaa <VgaText::scrollScreen()>
c000cf6d:	83 c4 10             	add    esp,0x10
c000cf70:	89 f0                	mov    eax,esi
c000cf72:	84 c0                	test   al,al
c000cf74:	74 0c                	je     c000cf82 <VgaText::incrementCursor(bool)+0x64>
c000cf76:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf7a:	5a                   	pop    edx
c000cf7b:	5b                   	pop    ebx
c000cf7c:	5e                   	pop    esi
c000cf7d:	e9 da fc ff ff       	jmp    c000cc5c <VgaText::updateCursor()>
c000cf82:	58                   	pop    eax
c000cf83:	5b                   	pop    ebx
c000cf84:	5e                   	pop    esi
c000cf85:	c3                   	ret    

c000cf86 <VgaText::updateRAMUsageDisplay(int)>:
c000cf86:	53                   	push   ebx
c000cf87:	bb 0a 00 00 00       	mov    ebx,0xa
c000cf8c:	6a 0f                	push   0xf
c000cf8e:	6a 00                	push   0x0
c000cf90:	e8 03 fe ff ff       	call   c000cd98 <VgaText::combineColours(unsigned char, unsigned char)>
c000cf95:	5a                   	pop    edx
c000cf96:	59                   	pop    ecx
c000cf97:	0f b6 c8             	movzx  ecx,al
c000cf9a:	51                   	push   ecx
c000cf9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cf9f:	99                   	cdq    
c000cfa0:	f7 fb                	idiv   ebx
c000cfa2:	89 d3                	mov    ebx,edx
c000cfa4:	83 c0 30             	add    eax,0x30
c000cfa7:	83 c3 30             	add    ebx,0x30
c000cfaa:	0f be c0             	movsx  eax,al
c000cfad:	0f b6 db             	movzx  ebx,bl
c000cfb0:	50                   	push   eax
c000cfb1:	e8 88 fe ff ff       	call   c000ce3e <VgaText::combineCharAndColour(char, unsigned char)>
c000cfb6:	5a                   	pop    edx
c000cfb7:	5a                   	pop    edx
c000cfb8:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cfbe:	51                   	push   ecx
c000cfbf:	53                   	push   ebx
c000cfc0:	e8 79 fe ff ff       	call   c000ce3e <VgaText::combineCharAndColour(char, unsigned char)>
c000cfc5:	5b                   	pop    ebx
c000cfc6:	5a                   	pop    edx
c000cfc7:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cfcd:	51                   	push   ecx
c000cfce:	6a 25                	push   0x25
c000cfd0:	e8 69 fe ff ff       	call   c000ce3e <VgaText::combineCharAndColour(char, unsigned char)>
c000cfd5:	59                   	pop    ecx
c000cfd6:	5b                   	pop    ebx
c000cfd7:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cfdd:	5b                   	pop    ebx
c000cfde:	c3                   	ret    
c000cfdf:	90                   	nop

c000cfe0 <VgaText::updateDiskUsage()>:
c000cfe0:	55                   	push   ebp
c000cfe1:	bd 10 27 00 00       	mov    ebp,0x2710
c000cfe6:	57                   	push   edi
c000cfe7:	56                   	push   esi
c000cfe8:	53                   	push   ebx
c000cfe9:	6a 0f                	push   0xf
c000cfeb:	6a 00                	push   0x0
c000cfed:	e8 a6 fd ff ff       	call   c000cd98 <VgaText::combineColours(unsigned char, unsigned char)>
c000cff2:	5a                   	pop    edx
c000cff3:	0f b6 d8             	movzx  ebx,al
c000cff6:	59                   	pop    ecx
c000cff7:	a1 84 60 02 c0       	mov    eax,ds:0xc0026084
c000cffc:	53                   	push   ebx
c000cffd:	b9 0a 00 00 00       	mov    ecx,0xa
c000d002:	99                   	cdq    
c000d003:	f7 fd                	idiv   ebp
c000d005:	99                   	cdq    
c000d006:	f7 f9                	idiv   ecx
c000d008:	8d 42 30             	lea    eax,[edx+0x30]
c000d00b:	0f b6 c0             	movzx  eax,al
c000d00e:	50                   	push   eax
c000d00f:	e8 2a fe ff ff       	call   c000ce3e <VgaText::combineCharAndColour(char, unsigned char)>
c000d014:	5e                   	pop    esi
c000d015:	5f                   	pop    edi
c000d016:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000d01c:	bf e8 03 00 00       	mov    edi,0x3e8
c000d021:	53                   	push   ebx
c000d022:	a1 84 60 02 c0       	mov    eax,ds:0xc0026084
c000d027:	99                   	cdq    
c000d028:	f7 ff                	idiv   edi
c000d02a:	99                   	cdq    
c000d02b:	f7 f9                	idiv   ecx
c000d02d:	8d 42 30             	lea    eax,[edx+0x30]
c000d030:	0f b6 c0             	movzx  eax,al
c000d033:	50                   	push   eax
c000d034:	e8 05 fe ff ff       	call   c000ce3e <VgaText::combineCharAndColour(char, unsigned char)>
c000d039:	5a                   	pop    edx
c000d03a:	5e                   	pop    esi
c000d03b:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000d041:	be 64 00 00 00       	mov    esi,0x64
c000d046:	53                   	push   ebx
c000d047:	a1 84 60 02 c0       	mov    eax,ds:0xc0026084
c000d04c:	99                   	cdq    
c000d04d:	f7 fe                	idiv   esi
c000d04f:	99                   	cdq    
c000d050:	f7 f9                	idiv   ecx
c000d052:	8d 42 30             	lea    eax,[edx+0x30]
c000d055:	0f b6 c0             	movzx  eax,al
c000d058:	50                   	push   eax
c000d059:	e8 e0 fd ff ff       	call   c000ce3e <VgaText::combineCharAndColour(char, unsigned char)>
c000d05e:	5a                   	pop    edx
c000d05f:	5a                   	pop    edx
c000d060:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000d066:	53                   	push   ebx
c000d067:	a1 84 60 02 c0       	mov    eax,ds:0xc0026084
c000d06c:	99                   	cdq    
c000d06d:	f7 f9                	idiv   ecx
c000d06f:	99                   	cdq    
c000d070:	f7 f9                	idiv   ecx
c000d072:	8d 42 30             	lea    eax,[edx+0x30]
c000d075:	0f b6 c0             	movzx  eax,al
c000d078:	50                   	push   eax
c000d079:	e8 c0 fd ff ff       	call   c000ce3e <VgaText::combineCharAndColour(char, unsigned char)>
c000d07e:	5a                   	pop    edx
c000d07f:	5a                   	pop    edx
c000d080:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000d086:	53                   	push   ebx
c000d087:	a1 84 60 02 c0       	mov    eax,ds:0xc0026084
c000d08c:	99                   	cdq    
c000d08d:	f7 f9                	idiv   ecx
c000d08f:	8d 42 30             	lea    eax,[edx+0x30]
c000d092:	0f b6 c0             	movzx  eax,al
c000d095:	50                   	push   eax
c000d096:	e8 a3 fd ff ff       	call   c000ce3e <VgaText::combineCharAndColour(char, unsigned char)>
c000d09b:	5a                   	pop    edx
c000d09c:	5a                   	pop    edx
c000d09d:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000d0a3:	53                   	push   ebx
c000d0a4:	a1 80 60 02 c0       	mov    eax,ds:0xc0026080
c000d0a9:	99                   	cdq    
c000d0aa:	f7 fd                	idiv   ebp
c000d0ac:	99                   	cdq    
c000d0ad:	f7 f9                	idiv   ecx
c000d0af:	8d 42 30             	lea    eax,[edx+0x30]
c000d0b2:	0f b6 c0             	movzx  eax,al
c000d0b5:	50                   	push   eax
c000d0b6:	e8 83 fd ff ff       	call   c000ce3e <VgaText::combineCharAndColour(char, unsigned char)>
c000d0bb:	5d                   	pop    ebp
c000d0bc:	5a                   	pop    edx
c000d0bd:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000d0c3:	53                   	push   ebx
c000d0c4:	a1 80 60 02 c0       	mov    eax,ds:0xc0026080
c000d0c9:	99                   	cdq    
c000d0ca:	f7 ff                	idiv   edi
c000d0cc:	99                   	cdq    
c000d0cd:	f7 f9                	idiv   ecx
c000d0cf:	8d 42 30             	lea    eax,[edx+0x30]
c000d0d2:	0f b6 c0             	movzx  eax,al
c000d0d5:	50                   	push   eax
c000d0d6:	e8 63 fd ff ff       	call   c000ce3e <VgaText::combineCharAndColour(char, unsigned char)>
c000d0db:	5f                   	pop    edi
c000d0dc:	5d                   	pop    ebp
c000d0dd:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000d0e3:	53                   	push   ebx
c000d0e4:	a1 80 60 02 c0       	mov    eax,ds:0xc0026080
c000d0e9:	99                   	cdq    
c000d0ea:	f7 fe                	idiv   esi
c000d0ec:	99                   	cdq    
c000d0ed:	f7 f9                	idiv   ecx
c000d0ef:	8d 42 30             	lea    eax,[edx+0x30]
c000d0f2:	0f b6 c0             	movzx  eax,al
c000d0f5:	50                   	push   eax
c000d0f6:	e8 43 fd ff ff       	call   c000ce3e <VgaText::combineCharAndColour(char, unsigned char)>
c000d0fb:	5a                   	pop    edx
c000d0fc:	5e                   	pop    esi
c000d0fd:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000d103:	53                   	push   ebx
c000d104:	a1 80 60 02 c0       	mov    eax,ds:0xc0026080
c000d109:	99                   	cdq    
c000d10a:	f7 f9                	idiv   ecx
c000d10c:	99                   	cdq    
c000d10d:	f7 f9                	idiv   ecx
c000d10f:	8d 42 30             	lea    eax,[edx+0x30]
c000d112:	0f b6 c0             	movzx  eax,al
c000d115:	50                   	push   eax
c000d116:	e8 23 fd ff ff       	call   c000ce3e <VgaText::combineCharAndColour(char, unsigned char)>
c000d11b:	5f                   	pop    edi
c000d11c:	5d                   	pop    ebp
c000d11d:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000d123:	53                   	push   ebx
c000d124:	a1 80 60 02 c0       	mov    eax,ds:0xc0026080
c000d129:	99                   	cdq    
c000d12a:	f7 f9                	idiv   ecx
c000d12c:	83 c2 30             	add    edx,0x30
c000d12f:	0f b6 d2             	movzx  edx,dl
c000d132:	52                   	push   edx
c000d133:	e8 06 fd ff ff       	call   c000ce3e <VgaText::combineCharAndColour(char, unsigned char)>
c000d138:	5a                   	pop    edx
c000d139:	59                   	pop    ecx
c000d13a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000d140:	5b                   	pop    ebx
c000d141:	5e                   	pop    esi
c000d142:	5f                   	pop    edi
c000d143:	5d                   	pop    ebp
c000d144:	c3                   	ret    
c000d145:	90                   	nop

c000d146 <VgaText::updateTitle()>:
c000d146:	53                   	push   ebx
c000d147:	31 c0                	xor    eax,eax
c000d149:	83 ec 58             	sub    esp,0x58
c000d14c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000d150:	89 e1                	mov    ecx,esp
c000d152:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000d156:	40                   	inc    eax
c000d157:	83 f8 50             	cmp    eax,0x50
c000d15a:	75 f6                	jne    c000d152 <VgaText::updateTitle()+0xc>
c000d15c:	31 c0                	xor    eax,eax
c000d15e:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000d165:	84 db                	test   bl,bl
c000d167:	74 06                	je     c000d16f <VgaText::updateTitle()+0x29>
c000d169:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000d16c:	40                   	inc    eax
c000d16d:	eb ef                	jmp    c000d15e <VgaText::updateTitle()+0x18>
c000d16f:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000d175:	85 c0                	test   eax,eax
c000d177:	74 09                	je     c000d182 <VgaText::updateTitle()+0x3c>
c000d179:	53                   	push   ebx
c000d17a:	53                   	push   ebx
c000d17b:	51                   	push   ecx
c000d17c:	52                   	push   edx
c000d17d:	ff d0                	call   eax
c000d17f:	83 c4 10             	add    esp,0x10
c000d182:	e8 59 fe ff ff       	call   c000cfe0 <VgaText::updateDiskUsage()>
c000d187:	83 c4 58             	add    esp,0x58
c000d18a:	5b                   	pop    ebx
c000d18b:	c3                   	ret    

c000d18c <VgaText::setTitleTextColour(VgaColour)>:
c000d18c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d190:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d194:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000d19a:	eb aa                	jmp    c000d146 <VgaText::updateTitle()>

c000d19c <VgaText::setTitleColour(VgaColour)>:
c000d19c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1a4:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000d1aa:	eb 9a                	jmp    c000d146 <VgaText::updateTitle()>

c000d1ac <VgaText::setTitle(char*)>:
c000d1ac:	53                   	push   ebx
c000d1ad:	83 ec 10             	sub    esp,0x10
c000d1b0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1b8:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000d1be:	50                   	push   eax
c000d1bf:	e8 95 35 ff ff       	call   c0000759 <strcpy>
c000d1c4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000d1c8:	83 c4 18             	add    esp,0x18
c000d1cb:	5b                   	pop    ebx
c000d1cc:	e9 75 ff ff ff       	jmp    c000d146 <VgaText::updateTitle()>
c000d1d1:	90                   	nop

c000d1d2 <VgaText::decrementCursor(bool)>:
c000d1d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d1d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d1da:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000d1e0:	85 c0                	test   eax,eax
c000d1e2:	74 07                	je     c000d1eb <VgaText::decrementCursor(bool)+0x19>
c000d1e4:	48                   	dec    eax
c000d1e5:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000d1eb:	84 c9                	test   cl,cl
c000d1ed:	74 09                	je     c000d1f8 <VgaText::decrementCursor(bool)+0x26>
c000d1ef:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d1f3:	e9 64 fa ff ff       	jmp    c000cc5c <VgaText::updateCursor()>
c000d1f8:	c3                   	ret    
c000d1f9:	90                   	nop

c000d1fa <VgaText::putchar(char, VgaColour, VgaColour)>:
c000d1fa:	53                   	push   ebx
c000d1fb:	83 ec 08             	sub    esp,0x8
c000d1fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d202:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d206:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d20a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d20e:	3c 07                	cmp    al,0x7
c000d210:	75 2a                	jne    c000d23c <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000d212:	a1 4c 44 02 c0       	mov    eax,ds:0xc002444c
c000d217:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d21f:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000d227:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000d22f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d233:	83 c4 08             	add    esp,0x8
c000d236:	5b                   	pop    ebx
c000d237:	e9 a4 2c 00 00       	jmp    c000fee0 <Buzzer::beep(int, int, bool)>
c000d23c:	3c 0d                	cmp    al,0xd
c000d23e:	75 0c                	jne    c000d24c <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000d240:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d24a:	eb 3b                	jmp    c000d287 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000d24c:	3c 0a                	cmp    al,0xa
c000d24e:	75 40                	jne    c000d290 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000d250:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000d256:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d260:	8d 50 01             	lea    edx,[eax+0x1]
c000d263:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000d269:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000d26f:	75 12                	jne    c000d283 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000d271:	83 ec 0c             	sub    esp,0xc
c000d274:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000d27a:	53                   	push   ebx
c000d27b:	e8 2a fb ff ff       	call   c000cdaa <VgaText::scrollScreen()>
c000d280:	83 c4 10             	add    esp,0x10
c000d283:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d287:	83 c4 08             	add    esp,0x8
c000d28a:	5b                   	pop    ebx
c000d28b:	e9 cc f9 ff ff       	jmp    c000cc5c <VgaText::updateCursor()>
c000d290:	3c 08                	cmp    al,0x8
c000d292:	75 31                	jne    c000d2c5 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000d294:	50                   	push   eax
c000d295:	50                   	push   eax
c000d296:	6a 01                	push   0x1
c000d298:	53                   	push   ebx
c000d299:	e8 34 ff ff ff       	call   c000d1d2 <VgaText::decrementCursor(bool)>
c000d29e:	5a                   	pop    edx
c000d29f:	59                   	pop    ecx
c000d2a0:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2a6:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2ac:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d2b2:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d2b8:	6a 20                	push   0x20
c000d2ba:	53                   	push   ebx
c000d2bb:	e8 90 fb ff ff       	call   c000ce50 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2c0:	83 c4 28             	add    esp,0x28
c000d2c3:	5b                   	pop    ebx
c000d2c4:	c3                   	ret    
c000d2c5:	83 ec 08             	sub    esp,0x8
c000d2c8:	0f be c0             	movsx  eax,al
c000d2cb:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2d1:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2d7:	51                   	push   ecx
c000d2d8:	52                   	push   edx
c000d2d9:	50                   	push   eax
c000d2da:	53                   	push   ebx
c000d2db:	e8 70 fb ff ff       	call   c000ce50 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2e0:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000d2e4:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000d2ec:	83 c4 28             	add    esp,0x28
c000d2ef:	5b                   	pop    ebx
c000d2f0:	e9 29 fc ff ff       	jmp    c000cf1e <VgaText::incrementCursor(bool)>
c000d2f5:	90                   	nop

c000d2f6 <VgaText::isShowingCursor()>:
c000d2f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2fa:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000d300:	c3                   	ret    
c000d301:	90                   	nop

c000d302 <VgaText::isBlinkDisabled()>:
c000d302:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d306:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000d30c:	83 f0 01             	xor    eax,0x1
c000d30f:	c3                   	ret    

c000d310 <VgaText::setCursorHeight(int)>:
c000d310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d314:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d318:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000d31e:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000d325:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d329:	e9 48 f9 ff ff       	jmp    c000cc76 <VgaText::showCursor(bool)>

c000d32e <VgaText::getCursorHeight()>:
c000d32e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d332:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000d338:	c3                   	ret    

c000d339 <setActiveTerminal(VgaText*)>:
c000d339:	53                   	push   ebx
c000d33a:	83 ec 08             	sub    esp,0x8
c000d33d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d341:	85 db                	test   ebx,ebx
c000d343:	75 11                	jne    c000d356 <setActiveTerminal(VgaText*)+0x1d>
c000d345:	c7 44 24 10 80 10 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021080
c000d34d:	83 c4 08             	add    esp,0x8
c000d350:	5b                   	pop    ebx
c000d351:	e9 34 85 00 00       	jmp    c001588a <Krnl::panic(char const*)>
c000d356:	50                   	push   eax
c000d357:	50                   	push   eax
c000d358:	53                   	push   ebx
c000d359:	68 8e 10 02 c0       	push   0xc002108e
c000d35e:	e8 92 1d 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000d363:	a1 a4 43 02 c0       	mov    eax,ds:0xc00243a4
c000d368:	83 c4 10             	add    esp,0x10
c000d36b:	85 c0                	test   eax,eax
c000d36d:	74 0c                	je     c000d37b <setActiveTerminal(VgaText*)+0x42>
c000d36f:	83 ec 0c             	sub    esp,0xc
c000d372:	50                   	push   eax
c000d373:	e8 e4 f8 ff ff       	call   c000cc5c <VgaText::updateCursor()>
c000d378:	83 c4 10             	add    esp,0x10
c000d37b:	89 1d a4 43 02 c0    	mov    DWORD PTR ds:0xc00243a4,ebx
c000d381:	51                   	push   ecx
c000d382:	51                   	push   ecx
c000d383:	53                   	push   ebx
c000d384:	68 a6 10 02 c0       	push   0xc00210a6
c000d389:	e8 67 1d 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000d38e:	83 c4 0c             	add    esp,0xc
c000d391:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d397:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d39d:	53                   	push   ebx
c000d39e:	e8 25 fb ff ff       	call   c000cec8 <VgaText::setCursor(int, int)>
c000d3a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3a6:	e8 57 ff ff ff       	call   c000d302 <VgaText::isBlinkDisabled()>
c000d3ab:	5a                   	pop    edx
c000d3ac:	0f b6 c0             	movzx  eax,al
c000d3af:	59                   	pop    ecx
c000d3b0:	50                   	push   eax
c000d3b1:	53                   	push   ebx
c000d3b2:	e8 cf f8 ff ff       	call   c000cc86 <VgaText::disableBlink(bool)>
c000d3b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3ba:	e8 6f ff ff ff       	call   c000d32e <VgaText::getCursorHeight()>
c000d3bf:	5a                   	pop    edx
c000d3c0:	59                   	pop    ecx
c000d3c1:	50                   	push   eax
c000d3c2:	53                   	push   ebx
c000d3c3:	e8 48 ff ff ff       	call   c000d310 <VgaText::setCursorHeight(int)>
c000d3c8:	83 c4 10             	add    esp,0x10
c000d3cb:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000d3d2:	75 0a                	jne    c000d3de <setActiveTerminal(VgaText*)+0xa5>
c000d3d4:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000d3de:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d3e2:	83 c4 08             	add    esp,0x8
c000d3e5:	5b                   	pop    ebx
c000d3e6:	e9 1d f8 ff ff       	jmp    c000cc08 <VgaText::load()>

c000d3eb <doTerminalCycle()>:
c000d3eb:	83 ec 18             	sub    esp,0x18
c000d3ee:	a1 a0 43 02 c0       	mov    eax,ds:0xc00243a0
c000d3f3:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000d3f9:	50                   	push   eax
c000d3fa:	a3 a0 43 02 c0       	mov    ds:0xc00243a0,eax
c000d3ff:	e8 35 ff ff ff       	call   c000d339 <setActiveTerminal(VgaText*)>
c000d404:	83 c4 1c             	add    esp,0x1c
c000d407:	c3                   	ret    

c000d408 <VgaText::doUpdate()>:
c000d408:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d40c:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000d412:	85 c0                	test   eax,eax
c000d414:	74 02                	je     c000d418 <VgaText::doUpdate()+0x10>
c000d416:	ff e0                	jmp    eax
c000d418:	c3                   	ret    
c000d419:	90                   	nop

c000d41a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000d41a:	55                   	push   ebp
c000d41b:	57                   	push   edi
c000d41c:	56                   	push   esi
c000d41d:	53                   	push   ebx
c000d41e:	83 ec 1c             	sub    esp,0x1c
c000d421:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d425:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d42a:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000d431:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000d434:	50                   	push   eax
c000d435:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d43a:	50                   	push   eax
c000d43b:	e8 58 f9 ff ff       	call   c000cd98 <VgaText::combineColours(unsigned char, unsigned char)>
c000d440:	59                   	pop    ecx
c000d441:	0f b6 c0             	movzx  eax,al
c000d444:	5b                   	pop    ebx
c000d445:	31 c9                	xor    ecx,ecx
c000d447:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d44f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d453:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d459:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d45d:	0f b7 db             	movzx  ebx,bx
c000d460:	01 db                	add    ebx,ebx
c000d462:	01 fb                	add    ebx,edi
c000d464:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000d467:	84 c0                	test   al,al
c000d469:	0f 84 38 01 00 00    	je     c000d5a7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c000d46f:	3c 0d                	cmp    al,0xd
c000d471:	75 0f                	jne    c000d482 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c000d473:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d47d:	e9 1f 01 00 00       	jmp    c000d5a1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d482:	3c 0a                	cmp    al,0xa
c000d484:	75 5b                	jne    c000d4e1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c000d486:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d48c:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d496:	8d 48 01             	lea    ecx,[eax+0x1]
c000d499:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d49f:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d4a5:	75 12                	jne    c000d4b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c000d4a7:	83 ec 0c             	sub    esp,0xc
c000d4aa:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d4b0:	55                   	push   ebp
c000d4b1:	e8 f4 f8 ff ff       	call   c000cdaa <VgaText::scrollScreen()>
c000d4b6:	83 c4 10             	add    esp,0x10
c000d4b9:	83 ec 0c             	sub    esp,0xc
c000d4bc:	55                   	push   ebp
c000d4bd:	e8 9a f7 ff ff       	call   c000cc5c <VgaText::updateCursor()>
c000d4c2:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d4ca:	83 c4 10             	add    esp,0x10
c000d4cd:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d4d3:	31 c9                	xor    ecx,ecx
c000d4d5:	0f b7 db             	movzx  ebx,bx
c000d4d8:	01 db                	add    ebx,ebx
c000d4da:	01 fb                	add    ebx,edi
c000d4dc:	e9 c0 00 00 00       	jmp    c000d5a1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d4e1:	3c 08                	cmp    al,0x8
c000d4e3:	75 4e                	jne    c000d533 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d4e5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d4e9:	53                   	push   ebx
c000d4ea:	53                   	push   ebx
c000d4eb:	6a 01                	push   0x1
c000d4ed:	55                   	push   ebp
c000d4ee:	e8 df fc ff ff       	call   c000d1d2 <VgaText::decrementCursor(bool)>
c000d4f3:	58                   	pop    eax
c000d4f4:	5a                   	pop    edx
c000d4f5:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d4fb:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d501:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d507:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d50d:	6a 20                	push   0x20
c000d50f:	55                   	push   ebp
c000d510:	e8 3b f9 ff ff       	call   c000ce50 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d515:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d51d:	83 c4 20             	add    esp,0x20
c000d520:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d526:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d52a:	0f b7 db             	movzx  ebx,bx
c000d52d:	01 db                	add    ebx,ebx
c000d52f:	01 fb                	add    ebx,edi
c000d531:	eb 6e                	jmp    c000d5a1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d533:	51                   	push   ecx
c000d534:	51                   	push   ecx
c000d535:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d539:	50                   	push   eax
c000d53a:	e8 ff f8 ff ff       	call   c000ce3e <VgaText::combineCharAndColour(char, unsigned char)>
c000d53f:	83 c4 10             	add    esp,0x10
c000d542:	66 89 03             	mov    WORD PTR [ebx],ax
c000d545:	39 2d a4 43 02 c0    	cmp    DWORD PTR ds:0xc00243a4,ebp
c000d54b:	75 2a                	jne    c000d577 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d54d:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d553:	85 c0                	test   eax,eax
c000d555:	74 20                	je     c000d577 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d557:	52                   	push   edx
c000d558:	52                   	push   edx
c000d559:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d55f:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d565:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d569:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d56d:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d570:	51                   	push   ecx
c000d571:	55                   	push   ebp
c000d572:	ff d0                	call   eax
c000d574:	83 c4 20             	add    esp,0x20
c000d577:	83 c3 02             	add    ebx,0x2
c000d57a:	50                   	push   eax
c000d57b:	50                   	push   eax
c000d57c:	6a 00                	push   0x0
c000d57e:	55                   	push   ebp
c000d57f:	e8 9a f9 ff ff       	call   c000cf1e <VgaText::incrementCursor(bool)>
c000d584:	83 c4 10             	add    esp,0x10
c000d587:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d58e:	75 0f                	jne    c000d59f <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c000d590:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d598:	0f b7 db             	movzx  ebx,bx
c000d59b:	01 db                	add    ebx,ebx
c000d59d:	01 fb                	add    ebx,edi
c000d59f:	b1 01                	mov    cl,0x1
c000d5a1:	46                   	inc    esi
c000d5a2:	e9 bd fe ff ff       	jmp    c000d464 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c000d5a7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d5ab:	83 ec 0c             	sub    esp,0xc
c000d5ae:	55                   	push   ebp
c000d5af:	e8 a8 f6 ff ff       	call   c000cc5c <VgaText::updateCursor()>
c000d5b4:	83 c4 10             	add    esp,0x10
c000d5b7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d5bb:	84 c9                	test   cl,cl
c000d5bd:	74 0c                	je     c000d5cb <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c000d5bf:	83 ec 0c             	sub    esp,0xc
c000d5c2:	55                   	push   ebp
c000d5c3:	e8 40 fe ff ff       	call   c000d408 <VgaText::doUpdate()>
c000d5c8:	83 c4 10             	add    esp,0x10
c000d5cb:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d5d2:	83 c4 1c             	add    esp,0x1c
c000d5d5:	5b                   	pop    ebx
c000d5d6:	5e                   	pop    esi
c000d5d7:	5f                   	pop    edi
c000d5d8:	5d                   	pop    ebp
c000d5d9:	c3                   	ret    

c000d5da <VgaText::clearScreen()>:
c000d5da:	57                   	push   edi
c000d5db:	56                   	push   esi
c000d5dc:	31 f6                	xor    esi,esi
c000d5de:	53                   	push   ebx
c000d5df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d5e3:	52                   	push   edx
c000d5e4:	6a 00                	push   0x0
c000d5e6:	6a 00                	push   0x0
c000d5e8:	53                   	push   ebx
c000d5e9:	e8 da f8 ff ff       	call   c000cec8 <VgaText::setCursor(int, int)>
c000d5ee:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d5f5:	83 c4 10             	add    esp,0x10
c000d5f8:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d5fe:	7e 26                	jle    c000d626 <VgaText::clearScreen()+0x4c>
c000d600:	31 ff                	xor    edi,edi
c000d602:	50                   	push   eax
c000d603:	50                   	push   eax
c000d604:	56                   	push   esi
c000d605:	57                   	push   edi
c000d606:	47                   	inc    edi
c000d607:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d60d:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d613:	6a 20                	push   0x20
c000d615:	53                   	push   ebx
c000d616:	e8 35 f8 ff ff       	call   c000ce50 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d61b:	83 c4 20             	add    esp,0x20
c000d61e:	83 ff 50             	cmp    edi,0x50
c000d621:	75 df                	jne    c000d602 <VgaText::clearScreen()+0x28>
c000d623:	46                   	inc    esi
c000d624:	eb d2                	jmp    c000d5f8 <VgaText::clearScreen()+0x1e>
c000d626:	83 ec 0c             	sub    esp,0xc
c000d629:	53                   	push   ebx
c000d62a:	e8 d9 fd ff ff       	call   c000d408 <VgaText::doUpdate()>
c000d62f:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d636:	83 c4 10             	add    esp,0x10
c000d639:	5b                   	pop    ebx
c000d63a:	5e                   	pop    esi
c000d63b:	5f                   	pop    edi
c000d63c:	c3                   	ret    
c000d63d:	90                   	nop

c000d63e <VgaText::putchar(char)>:
c000d63e:	56                   	push   esi
c000d63f:	53                   	push   ebx
c000d640:	83 ec 14             	sub    esp,0x14
c000d643:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d647:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d64b:	3c 5b                	cmp    al,0x5b
c000d64d:	75 21                	jne    c000d670 <VgaText::putchar(char)+0x32>
c000d64f:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d656:	74 28                	je     c000d680 <VgaText::putchar(char)+0x42>
c000d658:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d661:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d66b:	e9 e2 00 00 00       	jmp    c000d752 <VgaText::putchar(char)+0x114>
c000d670:	3c 1b                	cmp    al,0x1b
c000d672:	75 0c                	jne    c000d680 <VgaText::putchar(char)+0x42>
c000d674:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d67b:	e9 d2 00 00 00       	jmp    c000d752 <VgaText::putchar(char)+0x114>
c000d680:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d686:	84 c9                	test   cl,cl
c000d688:	0f 84 ab 00 00 00    	je     c000d739 <VgaText::putchar(char)+0xfb>
c000d68e:	8d 50 c0             	lea    edx,[eax-0x40]
c000d691:	80 fa 3e             	cmp    dl,0x3e
c000d694:	0f 87 82 00 00 00    	ja     c000d71c <VgaText::putchar(char)+0xde>
c000d69a:	3c 6d                	cmp    al,0x6d
c000d69c:	75 4d                	jne    c000d6eb <VgaText::putchar(char)+0xad>
c000d69e:	31 f6                	xor    esi,esi
c000d6a0:	31 d2                	xor    edx,edx
c000d6a2:	31 c0                	xor    eax,eax
c000d6a4:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d6aa:	7e 30                	jle    c000d6dc <VgaText::putchar(char)+0x9e>
c000d6ac:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d6b4:	80 fa 3b             	cmp    dl,0x3b
c000d6b7:	75 17                	jne    c000d6d0 <VgaText::putchar(char)+0x92>
c000d6b9:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d6bd:	50                   	push   eax
c000d6be:	53                   	push   ebx
c000d6bf:	e8 fc f5 ff ff       	call   c000ccc0 <VgaText::doANSI_SGR(int)>
c000d6c4:	59                   	pop    ecx
c000d6c5:	31 d2                	xor    edx,edx
c000d6c7:	58                   	pop    eax
c000d6c8:	31 c0                	xor    eax,eax
c000d6ca:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d6ce:	eb 09                	jmp    c000d6d9 <VgaText::putchar(char)+0x9b>
c000d6d0:	6b c0 0a             	imul   eax,eax,0xa
c000d6d3:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d6d7:	88 ca                	mov    dl,cl
c000d6d9:	46                   	inc    esi
c000d6da:	eb c8                	jmp    c000d6a4 <VgaText::putchar(char)+0x66>
c000d6dc:	84 d2                	test   dl,dl
c000d6de:	74 31                	je     c000d711 <VgaText::putchar(char)+0xd3>
c000d6e0:	50                   	push   eax
c000d6e1:	53                   	push   ebx
c000d6e2:	e8 d9 f5 ff ff       	call   c000ccc0 <VgaText::doANSI_SGR(int)>
c000d6e7:	58                   	pop    eax
c000d6e8:	5a                   	pop    edx
c000d6e9:	eb 26                	jmp    c000d711 <VgaText::putchar(char)+0xd3>
c000d6eb:	3c 4a                	cmp    al,0x4a
c000d6ed:	75 22                	jne    c000d711 <VgaText::putchar(char)+0xd3>
c000d6ef:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d6f6:	75 19                	jne    c000d711 <VgaText::putchar(char)+0xd3>
c000d6f8:	83 ec 0c             	sub    esp,0xc
c000d6fb:	53                   	push   ebx
c000d6fc:	e8 d9 fe ff ff       	call   c000d5da <VgaText::clearScreen()>
c000d701:	83 c4 0c             	add    esp,0xc
c000d704:	6a 00                	push   0x0
c000d706:	6a 00                	push   0x0
c000d708:	53                   	push   ebx
c000d709:	e8 ba f7 ff ff       	call   c000cec8 <VgaText::setCursor(int, int)>
c000d70e:	83 c4 10             	add    esp,0x10
c000d711:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d71a:	eb 36                	jmp    c000d752 <VgaText::putchar(char)+0x114>
c000d71c:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d722:	83 fa 0e             	cmp    edx,0xe
c000d725:	7f 2b                	jg     c000d752 <VgaText::putchar(char)+0x114>
c000d727:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d72a:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d730:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d737:	eb 19                	jmp    c000d752 <VgaText::putchar(char)+0x114>
c000d739:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d73f:	0f be c0             	movsx  eax,al
c000d742:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d748:	50                   	push   eax
c000d749:	53                   	push   ebx
c000d74a:	e8 ab fa ff ff       	call   c000d1fa <VgaText::putchar(char, VgaColour, VgaColour)>
c000d74f:	83 c4 10             	add    esp,0x10
c000d752:	83 c4 14             	add    esp,0x14
c000d755:	5b                   	pop    ebx
c000d756:	5e                   	pop    esi
c000d757:	c3                   	ret    

c000d758 <VgaText::puts(char const*)>:
c000d758:	53                   	push   ebx
c000d759:	83 ec 08             	sub    esp,0x8
c000d75c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d760:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d763:	84 c0                	test   al,al
c000d765:	74 12                	je     c000d779 <VgaText::puts(char const*)+0x21>
c000d767:	43                   	inc    ebx
c000d768:	51                   	push   ecx
c000d769:	51                   	push   ecx
c000d76a:	50                   	push   eax
c000d76b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d76f:	e8 ca fe ff ff       	call   c000d63e <VgaText::putchar(char)>
c000d774:	83 c4 10             	add    esp,0x10
c000d777:	eb e7                	jmp    c000d760 <VgaText::puts(char const*)+0x8>
c000d779:	83 c4 08             	add    esp,0x8
c000d77c:	5b                   	pop    ebx
c000d77d:	c3                   	ret    

c000d77e <VgaText::putx(unsigned int)>:
c000d77e:	57                   	push   edi
c000d77f:	b9 11 00 00 00       	mov    ecx,0x11
c000d784:	56                   	push   esi
c000d785:	be c2 10 02 c0       	mov    esi,0xc00210c2
c000d78a:	53                   	push   ebx
c000d78b:	83 ec 20             	sub    esp,0x20
c000d78e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d792:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d796:	fc                   	cld    
c000d797:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d799:	be 08 00 00 00       	mov    esi,0x8
c000d79e:	50                   	push   eax
c000d79f:	50                   	push   eax
c000d7a0:	89 d8                	mov    eax,ebx
c000d7a2:	c1 e3 04             	shl    ebx,0x4
c000d7a5:	c1 e8 1c             	shr    eax,0x1c
c000d7a8:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d7ad:	50                   	push   eax
c000d7ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d7b2:	e8 87 fe ff ff       	call   c000d63e <VgaText::putchar(char)>
c000d7b7:	83 c4 10             	add    esp,0x10
c000d7ba:	4e                   	dec    esi
c000d7bb:	75 e1                	jne    c000d79e <VgaText::putx(unsigned int)+0x20>
c000d7bd:	83 c4 20             	add    esp,0x20
c000d7c0:	5b                   	pop    ebx
c000d7c1:	5e                   	pop    esi
c000d7c2:	5f                   	pop    edi
c000d7c3:	c3                   	ret    

c000d7c4 <VgaText::VgaText(char const*)>:
c000d7c4:	57                   	push   edi
c000d7c5:	56                   	push   esi
c000d7c6:	53                   	push   ebx
c000d7c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7cb:	83 ec 08             	sub    esp,0x8
c000d7ce:	6a 00                	push   0x0
c000d7d0:	50                   	push   eax
c000d7d1:	e8 4a 05 00 00       	call   c000dd20 <UnixFile::UnixFile(int)>
c000d7d6:	83 c4 10             	add    esp,0x10
c000d7d9:	ba 28 11 02 c0       	mov    edx,0xc0021128
c000d7de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7e2:	89 10                	mov    DWORD PTR [eax],edx
c000d7e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7e8:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d7f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f6:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d804:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d80b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d80f:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d81a:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d828:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d836:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d83d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d841:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d84c:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d852:	bb 80 43 02 c0       	mov    ebx,0xc0024380
c000d857:	b8 08 00 00 00       	mov    eax,0x8
c000d85c:	fc                   	cld    
c000d85d:	89 d7                	mov    edi,edx
c000d85f:	89 de                	mov    esi,ebx
c000d861:	89 c1                	mov    ecx,eax
c000d863:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d869:	05 1e 10 00 00       	add    eax,0x101e
c000d86e:	83 ec 08             	sub    esp,0x8
c000d871:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d875:	50                   	push   eax
c000d876:	e8 de 2e ff ff       	call   c0000759 <strcpy>
c000d87b:	83 c4 10             	add    esp,0x10
c000d87e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d882:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d890:	83 c0 0c             	add    eax,0xc
c000d893:	83 ec 04             	sub    esp,0x4
c000d896:	68 00 0f 00 00       	push   0xf00
c000d89b:	6a 00                	push   0x0
c000d89d:	50                   	push   eax
c000d89e:	e8 17 2e ff ff       	call   c00006ba <memset>
c000d8a3:	83 c4 10             	add    esp,0x10
c000d8a6:	83 ec 04             	sub    esp,0x4
c000d8a9:	6a 00                	push   0x0
c000d8ab:	6a 07                	push   0x7
c000d8ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8b1:	e8 c2 f4 ff ff       	call   c000cd78 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d8b6:	83 c4 10             	add    esp,0x10
c000d8b9:	83 ec 08             	sub    esp,0x8
c000d8bc:	6a 02                	push   0x2
c000d8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8c2:	e8 49 fa ff ff       	call   c000d310 <VgaText::setCursorHeight(int)>
c000d8c7:	83 c4 10             	add    esp,0x10
c000d8ca:	83 ec 04             	sub    esp,0x4
c000d8cd:	6a 00                	push   0x0
c000d8cf:	6a 00                	push   0x0
c000d8d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8d5:	e8 ee f5 ff ff       	call   c000cec8 <VgaText::setCursor(int, int)>
c000d8da:	83 c4 10             	add    esp,0x10
c000d8dd:	83 ec 08             	sub    esp,0x8
c000d8e0:	6a 01                	push   0x1
c000d8e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8e6:	e8 8b f3 ff ff       	call   c000cc76 <VgaText::showCursor(bool)>
c000d8eb:	83 c4 10             	add    esp,0x10
c000d8ee:	83 ec 08             	sub    esp,0x8
c000d8f1:	6a 01                	push   0x1
c000d8f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8f7:	e8 8a f3 ff ff       	call   c000cc86 <VgaText::disableBlink(bool)>
c000d8fc:	83 c4 10             	add    esp,0x10
c000d8ff:	83 ec 0c             	sub    esp,0xc
c000d902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d906:	e8 cf fc ff ff       	call   c000d5da <VgaText::clearScreen()>
c000d90b:	83 c4 10             	add    esp,0x10
c000d90e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d912:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d91d:	05 9e 10 00 00       	add    eax,0x109e
c000d922:	83 ec 04             	sub    esp,0x4
c000d925:	68 96 00 00 00       	push   0x96
c000d92a:	6a 00                	push   0x0
c000d92c:	50                   	push   eax
c000d92d:	e8 88 2d ff ff       	call   c00006ba <memset>
c000d932:	83 c4 10             	add    esp,0x10
c000d935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d939:	05 34 11 00 00       	add    eax,0x1134
c000d93e:	83 ec 04             	sub    esp,0x4
c000d941:	68 2c 01 00 00       	push   0x12c
c000d946:	6a 00                	push   0x0
c000d948:	50                   	push   eax
c000d949:	e8 6c 2d ff ff       	call   c00006ba <memset>
c000d94e:	83 c4 10             	add    esp,0x10
c000d951:	90                   	nop
c000d952:	5b                   	pop    ebx
c000d953:	5e                   	pop    esi
c000d954:	5f                   	pop    edi
c000d955:	c3                   	ret    

c000d956 <VgaText::receiveKey(unsigned char)>:
c000d956:	55                   	push   ebp
c000d957:	57                   	push   edi
c000d958:	56                   	push   esi
c000d959:	53                   	push   ebx
c000d95a:	83 ec 1c             	sub    esp,0x1c
c000d95d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d961:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d965:	84 db                	test   bl,bl
c000d967:	0f 84 c9 00 00 00    	je     c000da36 <VgaText::receiveKey(unsigned char)+0xe0>
c000d96d:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d973:	80 fb 08             	cmp    bl,0x8
c000d976:	75 2c                	jne    c000d9a4 <VgaText::receiveKey(unsigned char)+0x4e>
c000d978:	83 ec 0c             	sub    esp,0xc
c000d97b:	57                   	push   edi
c000d97c:	e8 56 2d ff ff       	call   c00006d7 <strlen>
c000d981:	83 c4 10             	add    esp,0x10
c000d984:	85 c0                	test   eax,eax
c000d986:	74 41                	je     c000d9c9 <VgaText::receiveKey(unsigned char)+0x73>
c000d988:	50                   	push   eax
c000d989:	50                   	push   eax
c000d98a:	6a 08                	push   0x8
c000d98c:	56                   	push   esi
c000d98d:	e8 ac fc ff ff       	call   c000d63e <VgaText::putchar(char)>
c000d992:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d995:	e8 3d 2d ff ff       	call   c00006d7 <strlen>
c000d99a:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d9a2:	eb 22                	jmp    c000d9c6 <VgaText::receiveKey(unsigned char)+0x70>
c000d9a4:	0f be c3             	movsx  eax,bl
c000d9a7:	52                   	push   edx
c000d9a8:	52                   	push   edx
c000d9a9:	50                   	push   eax
c000d9aa:	56                   	push   esi
c000d9ab:	e8 8e fc ff ff       	call   c000d63e <VgaText::putchar(char)>
c000d9b0:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d9b4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d9b9:	59                   	pop    ecx
c000d9ba:	5d                   	pop    ebp
c000d9bb:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d9bf:	50                   	push   eax
c000d9c0:	57                   	push   edi
c000d9c1:	e8 4a 2e ff ff       	call   c0000810 <strcat>
c000d9c6:	83 c4 10             	add    esp,0x10
c000d9c9:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d9d0:	75 05                	jne    c000d9d7 <VgaText::receiveKey(unsigned char)+0x81>
c000d9d2:	80 fb 0a             	cmp    bl,0xa
c000d9d5:	75 53                	jne    c000da2a <VgaText::receiveKey(unsigned char)+0xd4>
c000d9d7:	83 ec 0c             	sub    esp,0xc
c000d9da:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d9e0:	53                   	push   ebx
c000d9e1:	e8 f1 2c ff ff       	call   c00006d7 <strlen>
c000d9e6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d9e9:	89 c5                	mov    ebp,eax
c000d9eb:	e8 e7 2c ff ff       	call   c00006d7 <strlen>
c000d9f0:	83 c4 10             	add    esp,0x10
c000d9f3:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000d9f7:	3d 2c 01 00 00       	cmp    eax,0x12c
c000d9fc:	76 10                	jbe    c000da0e <VgaText::receiveKey(unsigned char)+0xb8>
c000d9fe:	83 ec 0c             	sub    esp,0xc
c000da01:	68 d3 10 02 c0       	push   0xc00210d3
c000da06:	e8 7f 7e 00 00       	call   c001588a <Krnl::panic(char const*)>
c000da0b:	83 c4 10             	add    esp,0x10
c000da0e:	50                   	push   eax
c000da0f:	50                   	push   eax
c000da10:	57                   	push   edi
c000da11:	53                   	push   ebx
c000da12:	e8 f9 2d ff ff       	call   c0000810 <strcat>
c000da17:	83 c4 0c             	add    esp,0xc
c000da1a:	68 96 00 00 00       	push   0x96
c000da1f:	6a 00                	push   0x0
c000da21:	57                   	push   edi
c000da22:	e8 93 2c ff ff       	call   c00006ba <memset>
c000da27:	83 c4 10             	add    esp,0x10
c000da2a:	83 ec 0c             	sub    esp,0xc
c000da2d:	56                   	push   esi
c000da2e:	e8 d5 f9 ff ff       	call   c000d408 <VgaText::doUpdate()>
c000da33:	83 c4 10             	add    esp,0x10
c000da36:	83 c4 1c             	add    esp,0x1c
c000da39:	5b                   	pop    ebx
c000da3a:	5e                   	pop    esi
c000da3b:	5f                   	pop    edi
c000da3c:	5d                   	pop    ebp
c000da3d:	c3                   	ret    

c000da3e <VgaText::write(unsigned long long, void*, int*)>:
c000da3e:	55                   	push   ebp
c000da3f:	57                   	push   edi
c000da40:	56                   	push   esi
c000da41:	53                   	push   ebx
c000da42:	83 ec 0c             	sub    esp,0xc
c000da45:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000da49:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000da4d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000da51:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000da58:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000da5b:	39 eb                	cmp    ebx,ebp
c000da5d:	74 13                	je     c000da72 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000da5f:	43                   	inc    ebx
c000da60:	50                   	push   eax
c000da61:	50                   	push   eax
c000da62:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000da66:	50                   	push   eax
c000da67:	56                   	push   esi
c000da68:	e8 d1 fb ff ff       	call   c000d63e <VgaText::putchar(char)>
c000da6d:	83 c4 10             	add    esp,0x10
c000da70:	eb e9                	jmp    c000da5b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000da72:	83 ec 0c             	sub    esp,0xc
c000da75:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000da7c:	56                   	push   esi
c000da7d:	e8 86 f9 ff ff       	call   c000d408 <VgaText::doUpdate()>
c000da82:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000da86:	89 38                	mov    DWORD PTR [eax],edi
c000da88:	83 c4 1c             	add    esp,0x1c
c000da8b:	31 c0                	xor    eax,eax
c000da8d:	5b                   	pop    ebx
c000da8e:	5e                   	pop    esi
c000da8f:	5f                   	pop    edi
c000da90:	5d                   	pop    ebp
c000da91:	c3                   	ret    

c000da92 <newTerminal(char*)>:
c000da92:	83 ec 28             	sub    esp,0x28
c000da95:	68 60 12 00 00       	push   0x1260
c000da9a:	e8 67 15 00 00       	call   c000f006 <operator new(unsigned long)>
c000da9f:	5a                   	pop    edx
c000daa0:	59                   	pop    ecx
c000daa1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000daa5:	50                   	push   eax
c000daa6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000daaa:	e8 15 fd ff ff       	call   c000d7c4 <VgaText::VgaText(char const*)>
c000daaf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dab3:	83 c4 2c             	add    esp,0x2c
c000dab6:	c3                   	ret    
c000dab7:	90                   	nop

c000dab8 <TSS::TSS()>:
c000dab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dabc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dac3:	90                   	nop
c000dac4:	c3                   	ret    
c000dac5:	90                   	nop

c000dac6 <TSS::setESP(unsigned long)>:
c000dac6:	55                   	push   ebp
c000dac7:	89 e5                	mov    ebp,esp
c000dac9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dacc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dacf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dad2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000dad5:	90                   	nop
c000dad6:	5d                   	pop    ebp
c000dad7:	c3                   	ret    

c000dad8 <TSS::flush()>:
c000dad8:	55                   	push   ebp
c000dad9:	89 e5                	mov    ebp,esp
c000dadb:	83 ec 10             	sub    esp,0x10
c000dade:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dae1:	8b 00                	mov    eax,DWORD PTR [eax]
c000dae3:	83 c8 03             	or     eax,0x3
c000dae6:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000daea:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000daee:	66 89 d0             	mov    ax,dx
c000daf1:	0f 00 d8             	ltr    ax
c000daf4:	90                   	nop
c000daf5:	c9                   	leave  
c000daf6:	c3                   	ret    
c000daf7:	90                   	nop

c000daf8 <TSS::setup(unsigned long, unsigned long)>:
c000daf8:	55                   	push   ebp
c000daf9:	89 e5                	mov    ebp,esp
c000dafb:	53                   	push   ebx
c000dafc:	83 ec 14             	sub    esp,0x14
c000daff:	83 ec 0c             	sub    esp,0xc
c000db02:	6a 68                	push   0x68
c000db04:	e8 fb e4 ff ff       	call   c000c004 <malloc>
c000db09:	83 c4 10             	add    esp,0x10
c000db0c:	89 c2                	mov    edx,eax
c000db0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db11:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db1a:	83 ec 04             	sub    esp,0x4
c000db1d:	6a 68                	push   0x68
c000db1f:	6a 00                	push   0x0
c000db21:	50                   	push   eax
c000db22:	e8 93 2b ff ff       	call   c00006ba <memset>
c000db27:	83 c4 10             	add    esp,0x10
c000db2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db2d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db30:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000db36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db39:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db3c:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000db42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db48:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db4b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db51:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db54:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000db5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db5d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db60:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000db66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db69:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db6c:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000db72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db78:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000db7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db81:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db84:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000db87:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000db8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db8d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db90:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db93:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000db96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db99:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db9c:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000dba3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dba6:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000dba9:	e8 87 18 01 00       	call   c001f435 <CPU::readCR3()>
c000dbae:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000dbb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbb7:	83 ec 08             	sub    esp,0x8
c000dbba:	50                   	push   eax
c000dbbb:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbbe:	50                   	push   eax
c000dbbf:	e8 16 dc ff ff       	call   c000b7da <GDTEntry::setBase(unsigned int)>
c000dbc4:	83 c4 10             	add    esp,0x10
c000dbc7:	83 ec 08             	sub    esp,0x8
c000dbca:	6a 68                	push   0x68
c000dbcc:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbcf:	50                   	push   eax
c000dbd0:	e8 21 dc ff ff       	call   c000b7f6 <GDTEntry::setLimit(unsigned int)>
c000dbd5:	83 c4 10             	add    esp,0x10
c000dbd8:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000dbdc:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dbdf:	83 e0 0f             	and    eax,0xf
c000dbe2:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dbe5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dbe8:	83 c8 40             	or     eax,0x40
c000dbeb:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dbee:	e8 27 6b 00 00       	call   c001471a <thisCPU()>
c000dbf3:	05 78 01 00 00       	add    eax,0x178
c000dbf8:	83 ec 04             	sub    esp,0x4
c000dbfb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000dbfe:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000dc01:	50                   	push   eax
c000dc02:	e8 23 dc ff ff       	call   c000b82a <GDT::addEntry(GDTEntry)>
c000dc07:	83 c4 10             	add    esp,0x10
c000dc0a:	89 c2                	mov    edx,eax
c000dc0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc0f:	89 10                	mov    DWORD PTR [eax],edx
c000dc11:	e8 04 6b 00 00       	call   c001471a <thisCPU()>
c000dc16:	05 78 01 00 00       	add    eax,0x178
c000dc1b:	83 ec 0c             	sub    esp,0xc
c000dc1e:	50                   	push   eax
c000dc1f:	e8 4a dc ff ff       	call   c000b86e <GDT::flush()>
c000dc24:	83 c4 10             	add    esp,0x10
c000dc27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc2a:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc2c:	83 ec 08             	sub    esp,0x8
c000dc2f:	50                   	push   eax
c000dc30:	68 3c 11 02 c0       	push   0xc002113c
c000dc35:	e8 bb 14 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000dc3a:	83 c4 10             	add    esp,0x10
c000dc3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc40:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc42:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000dc45:	c9                   	leave  
c000dc46:	c3                   	ret    
c000dc47:	90                   	nop

c000dc48 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000dc48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc4c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dc50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc53:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dc58:	75 08                	jne    c000dc62 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000dc5a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000dc60:	eb 38                	jmp    c000dc9a <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000dc62:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dc67:	75 17                	jne    c000dc80 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000dc69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dc6e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dc71:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dc77:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc79:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dc7d:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000dc80:	89 c1                	mov    ecx,eax
c000dc82:	83 e1 fd             	and    ecx,0xfffffffd
c000dc85:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000dc8b:	74 cd                	je     c000dc5a <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000dc8d:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dc92:	83 e0 ef             	and    eax,0xffffffef
c000dc95:	83 f8 08             	cmp    eax,0x8
c000dc98:	76 c0                	jbe    c000dc5a <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000dc9a:	31 c0                	xor    eax,eax
c000dc9c:	c3                   	ret    
c000dc9d:	90                   	nop

c000dc9e <ReservedFilename::isAtty()>:
c000dc9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dca2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dca5:	31 c0                	xor    eax,eax
c000dca7:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000dcad:	74 09                	je     c000dcb8 <ReservedFilename::isAtty()+0x1a>
c000dcaf:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000dcb5:	0f 94 c0             	sete   al
c000dcb8:	c3                   	ret    
c000dcb9:	90                   	nop

c000dcba <ReservedFilename::write(unsigned long long, void*, int*)>:
c000dcba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dcc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dcc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dcc9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dcce:	75 08                	jne    c000dcd8 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000dcd0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000dcd6:	eb 3d                	jmp    c000dd15 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000dcd8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dcdd:	75 17                	jne    c000dcf6 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000dcdf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dce4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dce7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dced:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dcf3:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000dcf6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000dcfb:	75 04                	jne    c000dd01 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000dcfd:	89 0a                	mov    DWORD PTR [edx],ecx
c000dcff:	eb 14                	jmp    c000dd15 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000dd01:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000dd06:	74 c8                	je     c000dcd0 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000dd08:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dd0d:	83 e0 ef             	and    eax,0xffffffef
c000dd10:	83 f8 08             	cmp    eax,0x8
c000dd13:	76 bb                	jbe    c000dcd0 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000dd15:	31 c0                	xor    eax,eax
c000dd17:	c3                   	ret    

c000dd18 <UnixFile::getFileDescriptor()>:
c000dd18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd1f:	c3                   	ret    

c000dd20 <UnixFile::UnixFile(int)>:
c000dd20:	53                   	push   ebx
c000dd21:	83 ec 18             	sub    esp,0x18
c000dd24:	ba 28 12 02 c0       	mov    edx,0xc0021228
c000dd29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd2d:	89 10                	mov    DWORD PTR [eax],edx
c000dd2f:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000dd37:	0f 8f 4d 01 00 00    	jg     c000de8a <UnixFile::UnixFile(int)+0x16a>
c000dd3d:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c000dd42:	8d 50 01             	lea    edx,[eax+0x1]
c000dd45:	89 15 80 37 02 c0    	mov    DWORD PTR ds:0xc0023780,edx
c000dd4b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dd4f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000dd52:	83 ec 08             	sub    esp,0x8
c000dd55:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dd59:	68 38 44 02 c0       	push   0xc0024438
c000dd5e:	e8 47 17 01 00       	call   c001f4aa <LinkedList<UnixFile>::addElement(UnixFile*)>
c000dd63:	83 c4 10             	add    esp,0x10
c000dd66:	a0 34 44 02 c0       	mov    al,ds:0xc0024434
c000dd6b:	83 f0 01             	xor    eax,0x1
c000dd6e:	84 c0                	test   al,al
c000dd70:	0f 84 15 01 00 00    	je     c000de8b <UnixFile::UnixFile(int)+0x16b>
c000dd76:	c6 05 34 44 02 c0 01 	mov    BYTE PTR ds:0xc0024434,0x1
c000dd7d:	83 ec 0c             	sub    esp,0xc
c000dd80:	6a 0c                	push   0xc
c000dd82:	e8 7f 12 00 00       	call   c000f006 <operator new(unsigned long)>
c000dd87:	83 c4 10             	add    esp,0x10
c000dd8a:	89 c3                	mov    ebx,eax
c000dd8c:	83 ec 08             	sub    esp,0x8
c000dd8f:	68 03 ff ff 0f       	push   0xfffff03
c000dd94:	53                   	push   ebx
c000dd95:	e8 f6 00 00 00       	call   c000de90 <ReservedFilename::ReservedFilename(int)>
c000dd9a:	83 c4 10             	add    esp,0x10
c000dd9d:	89 1d 2c 44 02 c0    	mov    DWORD PTR ds:0xc002442c,ebx
c000dda3:	83 ec 0c             	sub    esp,0xc
c000dda6:	6a 0c                	push   0xc
c000dda8:	e8 59 12 00 00       	call   c000f006 <operator new(unsigned long)>
c000ddad:	83 c4 10             	add    esp,0x10
c000ddb0:	89 c3                	mov    ebx,eax
c000ddb2:	83 ec 08             	sub    esp,0x8
c000ddb5:	68 01 ff ff 0f       	push   0xfffff01
c000ddba:	53                   	push   ebx
c000ddbb:	e8 d0 00 00 00       	call   c000de90 <ReservedFilename::ReservedFilename(int)>
c000ddc0:	83 c4 10             	add    esp,0x10
c000ddc3:	89 1d 30 44 02 c0    	mov    DWORD PTR ds:0xc0024430,ebx
c000ddc9:	83 ec 0c             	sub    esp,0xc
c000ddcc:	6a 0c                	push   0xc
c000ddce:	e8 33 12 00 00       	call   c000f006 <operator new(unsigned long)>
c000ddd3:	83 c4 10             	add    esp,0x10
c000ddd6:	89 c3                	mov    ebx,eax
c000ddd8:	83 ec 08             	sub    esp,0x8
c000dddb:	68 00 ff ff 0f       	push   0xfffff00
c000dde0:	53                   	push   ebx
c000dde1:	e8 aa 00 00 00       	call   c000de90 <ReservedFilename::ReservedFilename(int)>
c000dde6:	83 c4 10             	add    esp,0x10
c000dde9:	89 1d 24 44 02 c0    	mov    DWORD PTR ds:0xc0024424,ebx
c000ddef:	83 ec 0c             	sub    esp,0xc
c000ddf2:	6a 0c                	push   0xc
c000ddf4:	e8 0d 12 00 00       	call   c000f006 <operator new(unsigned long)>
c000ddf9:	83 c4 10             	add    esp,0x10
c000ddfc:	89 c3                	mov    ebx,eax
c000ddfe:	83 ec 08             	sub    esp,0x8
c000de01:	68 02 ff ff 0f       	push   0xfffff02
c000de06:	53                   	push   ebx
c000de07:	e8 84 00 00 00       	call   c000de90 <ReservedFilename::ReservedFilename(int)>
c000de0c:	83 c4 10             	add    esp,0x10
c000de0f:	89 1d 28 44 02 c0    	mov    DWORD PTR ds:0xc0024428,ebx
c000de15:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000de1d:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000de22:	7f 67                	jg     c000de8b <UnixFile::UnixFile(int)+0x16b>
c000de24:	83 ec 0c             	sub    esp,0xc
c000de27:	6a 0c                	push   0xc
c000de29:	e8 d8 11 00 00       	call   c000f006 <operator new(unsigned long)>
c000de2e:	83 c4 10             	add    esp,0x10
c000de31:	89 c3                	mov    ebx,eax
c000de33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de37:	05 10 ff ff 0f       	add    eax,0xfffff10
c000de3c:	83 ec 08             	sub    esp,0x8
c000de3f:	50                   	push   eax
c000de40:	53                   	push   ebx
c000de41:	e8 4a 00 00 00       	call   c000de90 <ReservedFilename::ReservedFilename(int)>
c000de46:	83 c4 10             	add    esp,0x10
c000de49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de4d:	89 1c 85 00 44 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbc00],ebx
c000de54:	83 ec 0c             	sub    esp,0xc
c000de57:	6a 0c                	push   0xc
c000de59:	e8 a8 11 00 00       	call   c000f006 <operator new(unsigned long)>
c000de5e:	83 c4 10             	add    esp,0x10
c000de61:	89 c3                	mov    ebx,eax
c000de63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de67:	05 20 ff ff 0f       	add    eax,0xfffff20
c000de6c:	83 ec 08             	sub    esp,0x8
c000de6f:	50                   	push   eax
c000de70:	53                   	push   ebx
c000de71:	e8 1a 00 00 00       	call   c000de90 <ReservedFilename::ReservedFilename(int)>
c000de76:	83 c4 10             	add    esp,0x10
c000de79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de7d:	89 1c 85 c0 43 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbc40],ebx
c000de84:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000de88:	eb 93                	jmp    c000de1d <UnixFile::UnixFile(int)+0xfd>
c000de8a:	90                   	nop
c000de8b:	83 c4 18             	add    esp,0x18
c000de8e:	5b                   	pop    ebx
c000de8f:	c3                   	ret    

c000de90 <ReservedFilename::ReservedFilename(int)>:
c000de90:	83 ec 0c             	sub    esp,0xc
c000de93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de97:	83 ec 08             	sub    esp,0x8
c000de9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de9e:	50                   	push   eax
c000de9f:	e8 7c fe ff ff       	call   c000dd20 <UnixFile::UnixFile(int)>
c000dea4:	83 c4 10             	add    esp,0x10
c000dea7:	ba 44 12 02 c0       	mov    edx,0xc0021244
c000deac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deb0:	89 10                	mov    DWORD PTR [eax],edx
c000deb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deb6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000deba:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000debd:	90                   	nop
c000debe:	83 c4 0c             	add    esp,0xc
c000dec1:	c3                   	ret    

c000dec2 <UnixFile::~UnixFile()>:
c000dec2:	83 ec 1c             	sub    esp,0x1c
c000dec5:	ba 28 12 02 c0       	mov    edx,0xc0021228
c000deca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dece:	89 10                	mov    DWORD PTR [eax],edx
c000ded0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ded4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ded7:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000dedc:	7f 73                	jg     c000df51 <UnixFile::~UnixFile()+0x8f>
c000dede:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dee6:	83 ec 0c             	sub    esp,0xc
c000dee9:	68 38 44 02 c0       	push   0xc0024438
c000deee:	e8 8b 16 01 00       	call   c001f57e <LinkedList<UnixFile>::getFirstElement()>
c000def3:	83 c4 10             	add    esp,0x10
c000def6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defa:	83 ec 0c             	sub    esp,0xc
c000defd:	68 38 44 02 c0       	push   0xc0024438
c000df02:	e8 7f 16 01 00       	call   c001f586 <LinkedList<UnixFile>::removeFirst()>
c000df07:	83 c4 10             	add    esp,0x10
c000df0a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df0e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000df12:	74 40                	je     c000df54 <UnixFile::~UnixFile()+0x92>
c000df14:	83 ec 08             	sub    esp,0x8
c000df17:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000df1b:	68 38 44 02 c0       	push   0xc0024438
c000df20:	e8 85 15 01 00       	call   c001f4aa <LinkedList<UnixFile>::addElement(UnixFile*)>
c000df25:	83 c4 10             	add    esp,0x10
c000df28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df2c:	8d 50 01             	lea    edx,[eax+0x1]
c000df2f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df33:	3d 88 13 00 00       	cmp    eax,0x1388
c000df38:	0f 94 c0             	sete   al
c000df3b:	84 c0                	test   al,al
c000df3d:	74 a7                	je     c000dee6 <UnixFile::~UnixFile()+0x24>
c000df3f:	83 ec 0c             	sub    esp,0xc
c000df42:	68 00 12 02 c0       	push   0xc0021200
c000df47:	e8 3e 79 00 00       	call   c001588a <Krnl::panic(char const*)>
c000df4c:	83 c4 10             	add    esp,0x10
c000df4f:	eb 95                	jmp    c000dee6 <UnixFile::~UnixFile()+0x24>
c000df51:	90                   	nop
c000df52:	eb 01                	jmp    c000df55 <UnixFile::~UnixFile()+0x93>
c000df54:	90                   	nop
c000df55:	90                   	nop
c000df56:	83 c4 1c             	add    esp,0x1c
c000df59:	c3                   	ret    

c000df5a <UnixFile::~UnixFile()>:
c000df5a:	83 ec 0c             	sub    esp,0xc
c000df5d:	83 ec 0c             	sub    esp,0xc
c000df60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df64:	e8 59 ff ff ff       	call   c000dec2 <UnixFile::~UnixFile()>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	83 ec 08             	sub    esp,0x8
c000df6f:	6a 0c                	push   0xc
c000df71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df75:	e8 9b 10 00 00       	call   c000f015 <operator delete(void*, unsigned long)>
c000df7a:	83 c4 10             	add    esp,0x10
c000df7d:	83 c4 0c             	add    esp,0xc
c000df80:	c3                   	ret    
c000df81:	90                   	nop

c000df82 <ReservedFilename::~ReservedFilename()>:
c000df82:	83 ec 0c             	sub    esp,0xc
c000df85:	ba 44 12 02 c0       	mov    edx,0xc0021244
c000df8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df8e:	89 10                	mov    DWORD PTR [eax],edx
c000df90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df94:	83 ec 0c             	sub    esp,0xc
c000df97:	50                   	push   eax
c000df98:	e8 25 ff ff ff       	call   c000dec2 <UnixFile::~UnixFile()>
c000df9d:	83 c4 10             	add    esp,0x10
c000dfa0:	90                   	nop
c000dfa1:	83 c4 0c             	add    esp,0xc
c000dfa4:	c3                   	ret    
c000dfa5:	90                   	nop

c000dfa6 <ReservedFilename::~ReservedFilename()>:
c000dfa6:	83 ec 0c             	sub    esp,0xc
c000dfa9:	83 ec 0c             	sub    esp,0xc
c000dfac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb0:	e8 cd ff ff ff       	call   c000df82 <ReservedFilename::~ReservedFilename()>
c000dfb5:	83 c4 10             	add    esp,0x10
c000dfb8:	83 ec 08             	sub    esp,0x8
c000dfbb:	6a 0c                	push   0xc
c000dfbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfc1:	e8 4f 10 00 00       	call   c000f015 <operator delete(void*, unsigned long)>
c000dfc6:	83 c4 10             	add    esp,0x10
c000dfc9:	83 c4 0c             	add    esp,0xc
c000dfcc:	c3                   	ret    

c000dfcd <getFromFileDescriptor(int)>:
c000dfcd:	53                   	push   ebx
c000dfce:	83 ec 08             	sub    esp,0x8
c000dfd1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dfd5:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000dfdb:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000dfe1:	7f 2c                	jg     c000e00f <getFromFileDescriptor(int)+0x42>
c000dfe3:	83 ec 0c             	sub    esp,0xc
c000dfe6:	68 38 44 02 c0       	push   0xc0024438
c000dfeb:	e8 8e 15 01 00       	call   c001f57e <LinkedList<UnixFile>::getFirstElement()>
c000dff0:	83 c4 10             	add    esp,0x10
c000dff3:	85 c0                	test   eax,eax
c000dff5:	75 04                	jne    c000dffb <getFromFileDescriptor(int)+0x2e>
c000dff7:	31 c0                	xor    eax,eax
c000dff9:	eb 6e                	jmp    c000e069 <getFromFileDescriptor(int)+0x9c>
c000dffb:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000dffe:	74 69                	je     c000e069 <getFromFileDescriptor(int)+0x9c>
c000e000:	52                   	push   edx
c000e001:	52                   	push   edx
c000e002:	50                   	push   eax
c000e003:	68 38 44 02 c0       	push   0xc0024438
c000e008:	e8 1b 16 01 00       	call   c001f628 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000e00d:	eb e1                	jmp    c000dff0 <getFromFileDescriptor(int)+0x23>
c000e00f:	a1 2c 44 02 c0       	mov    eax,ds:0xc002442c
c000e014:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000e01a:	74 4d                	je     c000e069 <getFromFileDescriptor(int)+0x9c>
c000e01c:	a1 30 44 02 c0       	mov    eax,ds:0xc0024430
c000e021:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000e027:	74 40                	je     c000e069 <getFromFileDescriptor(int)+0x9c>
c000e029:	a1 28 44 02 c0       	mov    eax,ds:0xc0024428
c000e02e:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000e034:	74 33                	je     c000e069 <getFromFileDescriptor(int)+0x9c>
c000e036:	a1 24 44 02 c0       	mov    eax,ds:0xc0024424
c000e03b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000e041:	74 26                	je     c000e069 <getFromFileDescriptor(int)+0x9c>
c000e043:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000e049:	83 f8 08             	cmp    eax,0x8
c000e04c:	77 09                	ja     c000e057 <getFromFileDescriptor(int)+0x8a>
c000e04e:	8b 04 85 00 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbc00]
c000e055:	eb 12                	jmp    c000e069 <getFromFileDescriptor(int)+0x9c>
c000e057:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000e05d:	83 fb 08             	cmp    ebx,0x8
c000e060:	77 95                	ja     c000dff7 <getFromFileDescriptor(int)+0x2a>
c000e062:	8b 04 9d c0 43 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbc40]
c000e069:	83 c4 08             	add    esp,0x8
c000e06c:	5b                   	pop    ebx
c000e06d:	c3                   	ret    

c000e06e <__static_initialization_and_destruction_0(int, int)>:
c000e06e:	83 ec 0c             	sub    esp,0xc
c000e071:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e076:	75 34                	jne    c000e0ac <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e078:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000e080:	75 2a                	jne    c000e0ac <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e082:	83 ec 0c             	sub    esp,0xc
c000e085:	68 38 44 02 c0       	push   0xc0024438
c000e08a:	e8 c3 13 01 00       	call   c001f452 <LinkedList<UnixFile>::LinkedList()>
c000e08f:	83 c4 10             	add    esp,0x10
c000e092:	83 ec 04             	sub    esp,0x4
c000e095:	68 fc 36 02 c0       	push   0xc00236fc
c000e09a:	68 38 44 02 c0       	push   0xc0024438
c000e09f:	68 50 f4 01 c0       	push   0xc001f450
c000e0a4:	e8 e8 0e 00 00       	call   c000ef91 <__cxa_atexit>
c000e0a9:	83 c4 10             	add    esp,0x10
c000e0ac:	90                   	nop
c000e0ad:	83 c4 0c             	add    esp,0xc
c000e0b0:	c3                   	ret    

c000e0b1 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000e0b1:	83 ec 0c             	sub    esp,0xc
c000e0b4:	83 ec 08             	sub    esp,0x8
c000e0b7:	68 ff ff 00 00       	push   0xffff
c000e0bc:	6a 01                	push   0x1
c000e0be:	e8 ab ff ff ff       	call   c000e06e <__static_initialization_and_destruction_0(int, int)>
c000e0c3:	83 c4 10             	add    esp,0x10
c000e0c6:	83 c4 0c             	add    esp,0xc
c000e0c9:	c3                   	ret    

c000e0ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000e0ca:	53                   	push   ebx
c000e0cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e0cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e0d3:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000e0d9:	89 c8                	mov    eax,ecx
c000e0db:	d1 e8                	shr    eax,1
c000e0dd:	03 05 88 37 02 c0    	add    eax,DWORD PTR ds:0xc0023788
c000e0e3:	83 e1 01             	and    ecx,0x1
c000e0e6:	8a 10                	mov    dl,BYTE PTR [eax]
c000e0e8:	75 09                	jne    c000e0f3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000e0ea:	83 e2 f0             	and    edx,0xfffffff0
c000e0ed:	09 da                	or     edx,ebx
c000e0ef:	88 10                	mov    BYTE PTR [eax],dl
c000e0f1:	5b                   	pop    ebx
c000e0f2:	c3                   	ret    
c000e0f3:	c1 e3 04             	shl    ebx,0x4
c000e0f6:	83 e2 0f             	and    edx,0xf
c000e0f9:	09 da                	or     edx,ebx
c000e0fb:	88 10                	mov    BYTE PTR [eax],dl
c000e0fd:	5b                   	pop    ebx
c000e0fe:	c3                   	ret    

c000e0ff <Virt::getPageState(unsigned long)>:
c000e0ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e103:	8b 0d 88 37 02 c0    	mov    ecx,DWORD PTR ds:0xc0023788
c000e109:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000e10f:	89 d0                	mov    eax,edx
c000e111:	d1 e8                	shr    eax,1
c000e113:	83 e2 01             	and    edx,0x1
c000e116:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000e119:	75 04                	jne    c000e11f <Virt::getPageState(unsigned long)+0x20>
c000e11b:	83 e0 0f             	and    eax,0xf
c000e11e:	c3                   	ret    
c000e11f:	c0 e8 04             	shr    al,0x4
c000e122:	c3                   	ret    

c000e123 <Virt::allocateKernelVirtualPages(int)>:
c000e123:	55                   	push   ebp
c000e124:	31 ed                	xor    ebp,ebp
c000e126:	57                   	push   edi
c000e127:	56                   	push   esi
c000e128:	53                   	push   ebx
c000e129:	31 db                	xor    ebx,ebx
c000e12b:	83 ec 1c             	sub    esp,0x1c
c000e12e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e132:	8b 3d 84 37 02 c0    	mov    edi,DWORD PTR ds:0xc0023784
c000e138:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e13d:	57                   	push   edi
c000e13e:	e8 bc ff ff ff       	call   c000e0ff <Virt::getPageState(unsigned long)>
c000e143:	5a                   	pop    edx
c000e144:	84 c0                	test   al,al
c000e146:	75 3a                	jne    c000e182 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000e148:	85 db                	test   ebx,ebx
c000e14a:	75 02                	jne    c000e14e <Virt::allocateKernelVirtualPages(int)+0x2b>
c000e14c:	89 fd                	mov    ebp,edi
c000e14e:	43                   	inc    ebx
c000e14f:	39 f3                	cmp    ebx,esi
c000e151:	74 5a                	je     c000e1ad <Virt::allocateKernelVirtualPages(int)+0x8a>
c000e153:	47                   	inc    edi
c000e154:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e15a:	76 31                	jbe    c000e18d <Virt::allocateKernelVirtualPages(int)+0x6a>
c000e15c:	c7 05 84 37 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023784,0xc8000
c000e166:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e16b:	75 28                	jne    c000e195 <Virt::allocateKernelVirtualPages(int)+0x72>
c000e16d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e172:	bf 00 80 0c 00       	mov    edi,0xc8000
c000e177:	57                   	push   edi
c000e178:	e8 82 ff ff ff       	call   c000e0ff <Virt::getPageState(unsigned long)>
c000e17d:	5a                   	pop    edx
c000e17e:	84 c0                	test   al,al
c000e180:	74 c6                	je     c000e148 <Virt::allocateKernelVirtualPages(int)+0x25>
c000e182:	31 db                	xor    ebx,ebx
c000e184:	47                   	inc    edi
c000e185:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e18b:	77 cf                	ja     c000e15c <Virt::allocateKernelVirtualPages(int)+0x39>
c000e18d:	89 3d 84 37 02 c0    	mov    DWORD PTR ds:0xc0023784,edi
c000e193:	eb a8                	jmp    c000e13d <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e195:	83 ec 0c             	sub    esp,0xc
c000e198:	68 58 12 02 c0       	push   0xc0021258
c000e19d:	e8 e8 76 00 00       	call   c001588a <Krnl::panic(char const*)>
c000e1a2:	8b 3d 84 37 02 c0    	mov    edi,DWORD PTR ds:0xc0023784
c000e1a8:	83 c4 10             	add    esp,0x10
c000e1ab:	eb 90                	jmp    c000e13d <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e1ad:	89 2d 84 37 02 c0    	mov    DWORD PTR ds:0xc0023784,ebp
c000e1b3:	4b                   	dec    ebx
c000e1b4:	74 5f                	je     c000e215 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000e1b6:	85 f6                	test   esi,esi
c000e1b8:	74 3d                	je     c000e1f7 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e1ba:	89 e8                	mov    eax,ebp
c000e1bc:	31 db                	xor    ebx,ebx
c000e1be:	8d 7e ff             	lea    edi,[esi-0x1]
c000e1c1:	eb 14                	jmp    c000e1d7 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000e1c3:	6a 01                	push   0x1
c000e1c5:	43                   	inc    ebx
c000e1c6:	50                   	push   eax
c000e1c7:	e8 fe fe ff ff       	call   c000e0ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e1cc:	58                   	pop    eax
c000e1cd:	39 f3                	cmp    ebx,esi
c000e1cf:	5a                   	pop    edx
c000e1d0:	74 25                	je     c000e1f7 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e1d2:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c000e1d7:	8d 50 01             	lea    edx,[eax+0x1]
c000e1da:	85 db                	test   ebx,ebx
c000e1dc:	89 15 84 37 02 c0    	mov    DWORD PTR ds:0xc0023784,edx
c000e1e2:	74 20                	je     c000e204 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000e1e4:	39 df                	cmp    edi,ebx
c000e1e6:	75 db                	jne    c000e1c3 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000e1e8:	6a 03                	push   0x3
c000e1ea:	43                   	inc    ebx
c000e1eb:	50                   	push   eax
c000e1ec:	e8 d9 fe ff ff       	call   c000e0ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e1f1:	59                   	pop    ecx
c000e1f2:	39 f3                	cmp    ebx,esi
c000e1f4:	58                   	pop    eax
c000e1f5:	75 db                	jne    c000e1d2 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e1f7:	83 c4 1c             	add    esp,0x1c
c000e1fa:	89 e8                	mov    eax,ebp
c000e1fc:	5b                   	pop    ebx
c000e1fd:	c1 e0 0c             	shl    eax,0xc
c000e200:	5e                   	pop    esi
c000e201:	5f                   	pop    edi
c000e202:	5d                   	pop    ebp
c000e203:	c3                   	ret    
c000e204:	6a 02                	push   0x2
c000e206:	bb 01 00 00 00       	mov    ebx,0x1
c000e20b:	50                   	push   eax
c000e20c:	e8 b9 fe ff ff       	call   c000e0ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e211:	58                   	pop    eax
c000e212:	5a                   	pop    edx
c000e213:	eb bd                	jmp    c000e1d2 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e215:	6a 04                	push   0x4
c000e217:	8d 45 01             	lea    eax,[ebp+0x1]
c000e21a:	55                   	push   ebp
c000e21b:	a3 84 37 02 c0       	mov    ds:0xc0023784,eax
c000e220:	e8 a5 fe ff ff       	call   c000e0ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e225:	59                   	pop    ecx
c000e226:	89 e8                	mov    eax,ebp
c000e228:	5b                   	pop    ebx
c000e229:	c1 e0 0c             	shl    eax,0xc
c000e22c:	83 c4 1c             	add    esp,0x1c
c000e22f:	5b                   	pop    ebx
c000e230:	5e                   	pop    esi
c000e231:	5f                   	pop    edi
c000e232:	5d                   	pop    ebp
c000e233:	c3                   	ret    

c000e234 <Virt::virtualMemorySetup()>:
c000e234:	53                   	push   ebx
c000e235:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e23a:	83 ec 08             	sub    esp,0x8
c000e23d:	6a 0f                	push   0xf
c000e23f:	53                   	push   ebx
c000e240:	43                   	inc    ebx
c000e241:	e8 84 fe ff ff       	call   c000e0ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e246:	59                   	pop    ecx
c000e247:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e24d:	58                   	pop    eax
c000e24e:	75 ed                	jne    c000e23d <Virt::virtualMemorySetup()+0x9>
c000e250:	83 ec 08             	sub    esp,0x8
c000e253:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e258:	68 00 00 00 c8       	push   0xc8000000
c000e25d:	68 df 13 02 c0       	push   0xc00213df
c000e262:	e8 8e 0e 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000e267:	58                   	pop    eax
c000e268:	5a                   	pop    edx
c000e269:	68 00 f0 ff ef       	push   0xeffff000
c000e26e:	68 f3 13 02 c0       	push   0xc00213f3
c000e273:	e8 7d 0e 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000e278:	83 c4 10             	add    esp,0x10
c000e27b:	83 ec 08             	sub    esp,0x8
c000e27e:	6a 00                	push   0x0
c000e280:	53                   	push   ebx
c000e281:	43                   	inc    ebx
c000e282:	e8 43 fe ff ff       	call   c000e0ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e287:	83 c4 10             	add    esp,0x10
c000e28a:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e290:	75 e9                	jne    c000e27b <Virt::virtualMemorySetup()+0x47>
c000e292:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000e297:	83 ec 08             	sub    esp,0x8
c000e29a:	6a 0f                	push   0xf
c000e29c:	53                   	push   ebx
c000e29d:	43                   	inc    ebx
c000e29e:	e8 27 fe ff ff       	call   c000e0ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2a3:	83 c4 10             	add    esp,0x10
c000e2a6:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000e2ac:	75 e9                	jne    c000e297 <Virt::virtualMemorySetup()+0x63>
c000e2ae:	83 c4 08             	add    esp,0x8
c000e2b1:	5b                   	pop    ebx
c000e2b2:	c3                   	ret    

c000e2b3 <Virt::getAKernelVAS()>:
c000e2b3:	a1 44 44 02 c0       	mov    eax,ds:0xc0024444
c000e2b8:	c3                   	ret    

c000e2b9 <Virt::setupPageSwapping(int)>:
c000e2b9:	57                   	push   edi
c000e2ba:	56                   	push   esi
c000e2bb:	53                   	push   ebx
c000e2bc:	83 ec 1c             	sub    esp,0x1c
c000e2bf:	68 14 01 00 00       	push   0x114
c000e2c4:	e8 3d 0d 00 00       	call   c000f006 <operator new(unsigned long)>
c000e2c9:	83 c4 0c             	add    esp,0xc
c000e2cc:	89 c6                	mov    esi,eax
c000e2ce:	ff 35 34 57 02 c0    	push   DWORD PTR ds:0xc0025734
c000e2d4:	68 07 14 02 c0       	push   0xc0021407
c000e2d9:	50                   	push   eax
c000e2da:	e8 45 13 00 00       	call   c000f624 <File::File(char const*, Process*)>
c000e2df:	89 34 24             	mov    DWORD PTR [esp],esi
c000e2e2:	e8 19 15 00 00       	call   c000f800 <File::unlink()>
c000e2e7:	58                   	pop    eax
c000e2e8:	5a                   	pop    edx
c000e2e9:	6a 12                	push   0x12
c000e2eb:	56                   	push   esi
c000e2ec:	e8 97 13 00 00       	call   c000f688 <File::open(FileOpenMode)>
c000e2f1:	83 c4 10             	add    esp,0x10
c000e2f4:	85 c0                	test   eax,eax
c000e2f6:	0f 85 bf 00 00 00    	jne    c000e3bb <Virt::setupPageSwapping(int)+0x102>
c000e2fc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e300:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e308:	c1 e3 08             	shl    ebx,0x8
c000e30b:	83 ec 0c             	sub    esp,0xc
c000e30e:	68 00 00 01 00       	push   0x10000
c000e313:	e8 ec dc ff ff       	call   c000c004 <malloc>
c000e318:	83 c4 0c             	add    esp,0xc
c000e31b:	89 c7                	mov    edi,eax
c000e31d:	68 00 00 01 00       	push   0x10000
c000e322:	6a 00                	push   0x0
c000e324:	50                   	push   eax
c000e325:	e8 90 23 ff ff       	call   c00006ba <memset>
c000e32a:	83 c4 10             	add    esp,0x10
c000e32d:	85 db                	test   ebx,ebx
c000e32f:	79 03                	jns    c000e334 <Virt::setupPageSwapping(int)+0x7b>
c000e331:	83 c3 0f             	add    ebx,0xf
c000e334:	c1 fb 04             	sar    ebx,0x4
c000e337:	4b                   	dec    ebx
c000e338:	83 fb ff             	cmp    ebx,0xffffffff
c000e33b:	74 4b                	je     c000e388 <Virt::setupPageSwapping(int)+0xcf>
c000e33d:	83 ec 0c             	sub    esp,0xc
c000e340:	8b 06                	mov    eax,DWORD PTR [esi]
c000e342:	8d 54 24 18          	lea    edx,[esp+0x18]
c000e346:	52                   	push   edx
c000e347:	57                   	push   edi
c000e348:	6a 00                	push   0x0
c000e34a:	68 00 00 01 00       	push   0x10000
c000e34f:	56                   	push   esi
c000e350:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e353:	83 c4 20             	add    esp,0x20
c000e356:	85 c0                	test   eax,eax
c000e358:	75 4e                	jne    c000e3a8 <Virt::setupPageSwapping(int)+0xef>
c000e35a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e35e:	3d 00 00 01 00       	cmp    eax,0x10000
c000e363:	74 d2                	je     c000e337 <Virt::setupPageSwapping(int)+0x7e>
c000e365:	83 ec 08             	sub    esp,0x8
c000e368:	4b                   	dec    ebx
c000e369:	50                   	push   eax
c000e36a:	68 5a 14 02 c0       	push   0xc002145a
c000e36f:	e8 81 0d 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000e374:	c7 04 24 63 14 02 c0 	mov    DWORD PTR [esp],0xc0021463
c000e37b:	e8 0a 75 00 00       	call   c001588a <Krnl::panic(char const*)>
c000e380:	83 c4 10             	add    esp,0x10
c000e383:	83 fb ff             	cmp    ebx,0xffffffff
c000e386:	75 b5                	jne    c000e33d <Virt::setupPageSwapping(int)+0x84>
c000e388:	83 ec 0c             	sub    esp,0xc
c000e38b:	56                   	push   esi
c000e38c:	e8 55 13 00 00       	call   c000f6e6 <File::close()>
c000e391:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e394:	e8 8b dc ff ff       	call   c000c024 <rfree>
c000e399:	89 34 24             	mov    DWORD PTR [esp],esi
c000e39c:	8b 06                	mov    eax,DWORD PTR [esi]
c000e39e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e3a1:	83 c4 20             	add    esp,0x20
c000e3a4:	5b                   	pop    ebx
c000e3a5:	5e                   	pop    esi
c000e3a6:	5f                   	pop    edi
c000e3a7:	c3                   	ret    
c000e3a8:	83 ec 08             	sub    esp,0x8
c000e3ab:	50                   	push   eax
c000e3ac:	68 42 14 02 c0       	push   0xc0021442
c000e3b1:	e8 3f 0d 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000e3b6:	83 c4 10             	add    esp,0x10
c000e3b9:	eb 9f                	jmp    c000e35a <Virt::setupPageSwapping(int)+0xa1>
c000e3bb:	83 ec 08             	sub    esp,0x8
c000e3be:	50                   	push   eax
c000e3bf:	68 1e 14 02 c0       	push   0xc002141e
c000e3c4:	e8 2c 0d 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000e3c9:	c7 04 24 27 14 02 c0 	mov    DWORD PTR [esp],0xc0021427
c000e3d0:	e8 b5 74 00 00       	call   c001588a <Krnl::panic(char const*)>
c000e3d5:	83 c4 10             	add    esp,0x10
c000e3d8:	e9 1f ff ff ff       	jmp    c000e2fc <Virt::setupPageSwapping(int)+0x43>
c000e3dd:	90                   	nop

c000e3de <VAS::VAS()>:
c000e3de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3e2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e3e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3ed:	a3 44 44 02 c0       	mov    ds:0xc0024444,eax
c000e3f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3f6:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e3fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3fe:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e401:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e405:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e40c:	90                   	nop
c000e40d:	c3                   	ret    

c000e40e <VAS::VAS(VAS*)>:
c000e40e:	83 ec 0c             	sub    esp,0xc
c000e411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e415:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e41c:	83 ec 0c             	sub    esp,0xc
c000e41f:	68 78 12 02 c0       	push   0xc0021278
c000e424:	e8 61 74 00 00       	call   c001588a <Krnl::panic(char const*)>
c000e429:	83 c4 10             	add    esp,0x10
c000e42c:	90                   	nop
c000e42d:	83 c4 0c             	add    esp,0xc
c000e430:	c3                   	ret    
c000e431:	90                   	nop

c000e432 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e432:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e436:	89 c2                	mov    edx,eax
c000e438:	c1 e8 0a             	shr    eax,0xa
c000e43b:	c1 ea 16             	shr    edx,0x16
c000e43e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e443:	19 c9                	sbb    ecx,ecx
c000e445:	c1 e2 0c             	shl    edx,0xc
c000e448:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e44e:	25 fc 0f 00 00       	and    eax,0xffc
c000e453:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e45a:	01 d0                	add    eax,edx
c000e45c:	c3                   	ret    
c000e45d:	90                   	nop

c000e45e <VAS::getPageTableEntry(unsigned long)>:
c000e45e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e462:	89 ca                	mov    edx,ecx
c000e464:	c1 e9 0a             	shr    ecx,0xa
c000e467:	c1 ea 16             	shr    edx,0x16
c000e46a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e470:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e476:	c1 e0 0c             	shl    eax,0xc
c000e479:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e47c:	c3                   	ret    

c000e47d <Virt::freeKernelVirtualPages(unsigned long)>:
c000e47d:	57                   	push   edi
c000e47e:	56                   	push   esi
c000e47f:	be 01 00 00 00       	mov    esi,0x1
c000e484:	53                   	push   ebx
c000e485:	83 ec 10             	sub    esp,0x10
c000e488:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e48c:	c1 eb 0c             	shr    ebx,0xc
c000e48f:	eb 3f                	jmp    c000e4d0 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000e491:	e8 1d fe ff ff       	call   c000e2b3 <Virt::getAKernelVAS()>
c000e496:	83 ec 08             	sub    esp,0x8
c000e499:	57                   	push   edi
c000e49a:	50                   	push   eax
c000e49b:	e8 be ff ff ff       	call   c000e45e <VAS::getPageTableEntry(unsigned long)>
c000e4a0:	83 c4 10             	add    esp,0x10
c000e4a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4a5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e4a9:	f6 c4 04             	test   ah,0x4
c000e4ac:	75 5f                	jne    c000e50d <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000e4ae:	80 fa 04             	cmp    dl,0x4
c000e4b1:	74 78                	je     c000e52b <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000e4b3:	80 fa 02             	cmp    dl,0x2
c000e4b6:	0f 84 88 00 00 00    	je     c000e544 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000e4bc:	80 fa 03             	cmp    dl,0x3
c000e4bf:	0f 84 ad 00 00 00    	je     c000e572 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000e4c5:	fe ca                	dec    dl
c000e4c7:	0f 84 92 00 00 00    	je     c000e55f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e4cd:	43                   	inc    ebx
c000e4ce:	31 f6                	xor    esi,esi
c000e4d0:	53                   	push   ebx
c000e4d1:	e8 29 fc ff ff       	call   c000e0ff <Virt::getPageState(unsigned long)>
c000e4d6:	5f                   	pop    edi
c000e4d7:	89 df                	mov    edi,ebx
c000e4d9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e4dd:	c1 e7 0c             	shl    edi,0xc
c000e4e0:	84 c0                	test   al,al
c000e4e2:	75 ad                	jne    c000e491 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e4e4:	83 ec 0c             	sub    esp,0xc
c000e4e7:	68 69 14 02 c0       	push   0xc0021469
c000e4ec:	e8 99 73 00 00       	call   c001588a <Krnl::panic(char const*)>
c000e4f1:	e8 bd fd ff ff       	call   c000e2b3 <Virt::getAKernelVAS()>
c000e4f6:	5a                   	pop    edx
c000e4f7:	59                   	pop    ecx
c000e4f8:	57                   	push   edi
c000e4f9:	50                   	push   eax
c000e4fa:	e8 5f ff ff ff       	call   c000e45e <VAS::getPageTableEntry(unsigned long)>
c000e4ff:	83 c4 10             	add    esp,0x10
c000e502:	8b 00                	mov    eax,DWORD PTR [eax]
c000e504:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e508:	f6 c4 04             	test   ah,0x4
c000e50b:	74 c0                	je     c000e4cd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e50d:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e511:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e516:	83 ec 0c             	sub    esp,0xc
c000e519:	50                   	push   eax
c000e51a:	e8 05 e0 ff ff       	call   c000c524 <Phys::freePage(unsigned long)>
c000e51f:	83 c4 10             	add    esp,0x10
c000e522:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e526:	80 fa 04             	cmp    dl,0x4
c000e529:	75 88                	jne    c000e4b3 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000e52b:	89 f0                	mov    eax,esi
c000e52d:	84 c0                	test   al,al
c000e52f:	75 47                	jne    c000e578 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000e531:	c7 44 24 20 9c 12 02 c0 	mov    DWORD PTR [esp+0x20],0xc002129c
c000e539:	83 c4 10             	add    esp,0x10
c000e53c:	5b                   	pop    ebx
c000e53d:	5e                   	pop    esi
c000e53e:	5f                   	pop    edi
c000e53f:	e9 46 73 00 00       	jmp    c001588a <Krnl::panic(char const*)>
c000e544:	89 f0                	mov    eax,esi
c000e546:	84 c0                	test   al,al
c000e548:	75 15                	jne    c000e55f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e54a:	83 ec 0c             	sub    esp,0xc
c000e54d:	68 85 14 02 c0       	push   0xc0021485
c000e552:	e8 33 73 00 00       	call   c001588a <Krnl::panic(char const*)>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	e9 6e ff ff ff       	jmp    c000e4cd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e55f:	83 ec 08             	sub    esp,0x8
c000e562:	6a 00                	push   0x0
c000e564:	53                   	push   ebx
c000e565:	e8 60 fb ff ff       	call   c000e0ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e56a:	83 c4 10             	add    esp,0x10
c000e56d:	e9 5b ff ff ff       	jmp    c000e4cd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e572:	89 f0                	mov    eax,esi
c000e574:	84 c0                	test   al,al
c000e576:	75 15                	jne    c000e58d <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000e578:	83 ec 08             	sub    esp,0x8
c000e57b:	6a 00                	push   0x0
c000e57d:	53                   	push   ebx
c000e57e:	e8 47 fb ff ff       	call   c000e0ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e583:	83 c4 10             	add    esp,0x10
c000e586:	83 c4 10             	add    esp,0x10
c000e589:	5b                   	pop    ebx
c000e58a:	5e                   	pop    esi
c000e58b:	5f                   	pop    edi
c000e58c:	c3                   	ret    
c000e58d:	c7 44 24 20 a1 14 02 c0 	mov    DWORD PTR [esp+0x20],0xc00214a1
c000e595:	83 c4 10             	add    esp,0x10
c000e598:	5b                   	pop    ebx
c000e599:	5e                   	pop    esi
c000e59a:	5f                   	pop    edi
c000e59b:	e9 ea 72 00 00       	jmp    c001588a <Krnl::panic(char const*)>

c000e5a0 <VAS::freeAllocatedPages(unsigned long)>:
c000e5a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5a8:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e5ac:	74 09                	je     c000e5b7 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e5ae:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e5b2:	e9 c6 fe ff ff       	jmp    c000e47d <Virt::freeKernelVirtualPages(unsigned long)>
c000e5b7:	c7 44 24 04 c0 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc00212c0
c000e5bf:	e9 31 0b 00 00       	jmp    c000f0f5 <Dbg::kprintf(char const*, ...)>

c000e5c4 <VAS::virtualToPhysical(unsigned long)>:
c000e5c4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e5c8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e5cc:	e8 8d fe ff ff       	call   c000e45e <VAS::getPageTableEntry(unsigned long)>
c000e5d1:	5a                   	pop    edx
c000e5d2:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5d4:	59                   	pop    ecx
c000e5d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e5da:	c3                   	ret    
c000e5db:	90                   	nop

c000e5dc <VAS::reflagRange(unsigned long, int, int, int)>:
c000e5dc:	55                   	push   ebp
c000e5dd:	57                   	push   edi
c000e5de:	56                   	push   esi
c000e5df:	53                   	push   ebx
c000e5e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e5e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000e5e8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e5ec:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e5f0:	85 db                	test   ebx,ebx
c000e5f2:	7e 22                	jle    c000e616 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000e5f4:	c1 e3 0c             	shl    ebx,0xc
c000e5f7:	01 f3                	add    ebx,esi
c000e5f9:	56                   	push   esi
c000e5fa:	81 c6 00 10 00 00    	add    esi,0x1000
c000e600:	55                   	push   ebp
c000e601:	e8 58 fe ff ff       	call   c000e45e <VAS::getPageTableEntry(unsigned long)>
c000e606:	5a                   	pop    edx
c000e607:	59                   	pop    ecx
c000e608:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e60a:	21 f9                	and    ecx,edi
c000e60c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000e610:	39 f3                	cmp    ebx,esi
c000e612:	89 08                	mov    DWORD PTR [eax],ecx
c000e614:	75 e3                	jne    c000e5f9 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000e616:	5b                   	pop    ebx
c000e617:	5e                   	pop    esi
c000e618:	5f                   	pop    edi
c000e619:	5d                   	pop    ebp
c000e61a:	c3                   	ret    
c000e61b:	90                   	nop

c000e61c <VAS::setToWriteCombining(unsigned long, int)>:
c000e61c:	83 ec 0c             	sub    esp,0xc
c000e61f:	e8 f6 60 00 00       	call   c001471a <thisCPU()>
c000e624:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000e62b:	75 04                	jne    c000e631 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000e62d:	83 c4 0c             	add    esp,0xc
c000e630:	c3                   	ret    
c000e631:	83 ec 0c             	sub    esp,0xc
c000e634:	68 80 00 00 00       	push   0x80
c000e639:	6a ff                	push   0xffffffff
c000e63b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e63f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e643:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e647:	e8 90 ff ff ff       	call   c000e5dc <VAS::reflagRange(unsigned long, int, int, int)>
c000e64c:	83 c4 20             	add    esp,0x20
c000e64f:	83 c4 0c             	add    esp,0xc
c000e652:	c3                   	ret    
c000e653:	90                   	nop

c000e654 <VAS::mapOtherVASIn(bool, VAS*)>:
c000e654:	83 ec 0c             	sub    esp,0xc
c000e657:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e65c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e660:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e663:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e667:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e66a:	19 c0                	sbb    eax,eax
c000e66c:	83 ca 03             	or     edx,0x3
c000e66f:	83 e0 fc             	and    eax,0xfffffffc
c000e672:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e679:	e8 b7 0d 01 00       	call   c001f435 <CPU::readCR3()>
c000e67e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e682:	83 c4 0c             	add    esp,0xc
c000e685:	e9 bd 0d 01 00       	jmp    c001f447 <CPU::writeCR3(unsigned long)>

c000e68a <VAS::~VAS()>:
c000e68a:	83 ec 2c             	sub    esp,0x2c
c000e68d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e695:	e8 44 a1 00 00       	call   c00187de <lockScheduler()>
c000e69a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e69f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e6a4:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e6aa:	83 ec 04             	sub    esp,0x4
c000e6ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e6b1:	6a 01                	push   0x1
c000e6b3:	50                   	push   eax
c000e6b4:	e8 9b ff ff ff       	call   c000e654 <VAS::mapOtherVASIn(bool, VAS*)>
c000e6b9:	83 c4 10             	add    esp,0x10
c000e6bc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e6c4:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e6cc:	0f 8f d7 00 00 00    	jg     c000e7a9 <VAS::~VAS()+0x11f>
c000e6d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e6d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e6d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6dd:	c1 e2 02             	shl    edx,0x2
c000e6e0:	01 d0                	add    eax,edx
c000e6e2:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6ec:	83 e0 01             	and    eax,0x1
c000e6ef:	0f 84 ab 00 00 00    	je     c000e7a0 <VAS::~VAS()+0x116>
c000e6f5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e6fd:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e705:	7f 75                	jg     c000e77c <VAS::~VAS()+0xf2>
c000e707:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e70b:	c1 e0 0a             	shl    eax,0xa
c000e70e:	89 c2                	mov    edx,eax
c000e710:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e714:	01 d0                	add    eax,edx
c000e716:	c1 e0 0c             	shl    eax,0xc
c000e719:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e71d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e722:	8b 00                	mov    eax,DWORD PTR [eax]
c000e724:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e727:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e72d:	83 ec 04             	sub    esp,0x4
c000e730:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e734:	6a 01                	push   0x1
c000e736:	50                   	push   eax
c000e737:	e8 f6 fc ff ff       	call   c000e432 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e73c:	83 c4 10             	add    esp,0x10
c000e73f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e743:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e747:	8b 00                	mov    eax,DWORD PTR [eax]
c000e749:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e74d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e751:	25 01 04 00 00       	and    eax,0x401
c000e756:	3d 01 04 00 00       	cmp    eax,0x401
c000e75b:	75 19                	jne    c000e776 <VAS::~VAS()+0xec>
c000e75d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e761:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e766:	83 ec 0c             	sub    esp,0xc
c000e769:	50                   	push   eax
c000e76a:	e8 b5 dd ff ff       	call   c000c524 <Phys::freePage(unsigned long)>
c000e76f:	83 c4 10             	add    esp,0x10
c000e772:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e776:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e77a:	eb 81                	jmp    c000e6fd <VAS::~VAS()+0x73>
c000e77c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e780:	25 00 04 00 00       	and    eax,0x400
c000e785:	74 19                	je     c000e7a0 <VAS::~VAS()+0x116>
c000e787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e790:	83 ec 0c             	sub    esp,0xc
c000e793:	50                   	push   eax
c000e794:	e8 8b dd ff ff       	call   c000c524 <Phys::freePage(unsigned long)>
c000e799:	83 c4 10             	add    esp,0x10
c000e79c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e7a0:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e7a4:	e9 1b ff ff ff       	jmp    c000e6c4 <VAS::~VAS()+0x3a>
c000e7a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7ad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e7b0:	83 ec 0c             	sub    esp,0xc
c000e7b3:	50                   	push   eax
c000e7b4:	e8 c4 fc ff ff       	call   c000e47d <Virt::freeKernelVirtualPages(unsigned long)>
c000e7b9:	83 c4 10             	add    esp,0x10
c000e7bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e7c3:	83 ec 0c             	sub    esp,0xc
c000e7c6:	50                   	push   eax
c000e7c7:	e8 58 dd ff ff       	call   c000c524 <Phys::freePage(unsigned long)>
c000e7cc:	83 c4 10             	add    esp,0x10
c000e7cf:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e7d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e7d7:	c1 e0 02             	shl    eax,0x2
c000e7da:	83 ec 08             	sub    esp,0x8
c000e7dd:	50                   	push   eax
c000e7de:	68 e4 12 02 c0       	push   0xc00212e4
c000e7e3:	e8 0d 09 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000e7e8:	83 c4 10             	add    esp,0x10
c000e7eb:	e8 f0 9f 00 00       	call   c00187e0 <unlockScheduler()>
c000e7f0:	90                   	nop
c000e7f1:	83 c4 2c             	add    esp,0x2c
c000e7f4:	c3                   	ret    
c000e7f5:	90                   	nop

c000e7f6 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e7f6:	55                   	push   ebp
c000e7f7:	57                   	push   edi
c000e7f8:	56                   	push   esi
c000e7f9:	53                   	push   ebx
c000e7fa:	83 ec 1c             	sub    esp,0x1c
c000e7fd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e801:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e805:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e80b:	77 08                	ja     c000e815 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e80d:	0f 20 d8             	mov    eax,cr3
c000e810:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e813:	75 47                	jne    c000e85c <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000e815:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e819:	09 d8                	or     eax,ebx
c000e81b:	a9 ff 0f 00 00       	test   eax,0xfff
c000e820:	75 57                	jne    c000e879 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000e822:	89 de                	mov    esi,ebx
c000e824:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e827:	c1 ee 16             	shr    esi,0x16
c000e82a:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e831:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e835:	74 54                	je     c000e88b <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000e837:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e83b:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e841:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e845:	c1 e6 0c             	shl    esi,0xc
c000e848:	c1 eb 0a             	shr    ebx,0xa
c000e84b:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e851:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e854:	83 c4 1c             	add    esp,0x1c
c000e857:	5b                   	pop    ebx
c000e858:	5e                   	pop    esi
c000e859:	5f                   	pop    edi
c000e85a:	5d                   	pop    ebp
c000e85b:	c3                   	ret    
c000e85c:	83 ec 0c             	sub    esp,0xc
c000e85f:	68 04 13 02 c0       	push   0xc0021304
c000e864:	e8 8c 08 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000e869:	83 c4 10             	add    esp,0x10
c000e86c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e870:	09 d8                	or     eax,ebx
c000e872:	a9 ff 0f 00 00       	test   eax,0xfff
c000e877:	74 a9                	je     c000e822 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e879:	83 ec 0c             	sub    esp,0xc
c000e87c:	68 6c 13 02 c0       	push   0xc002136c
c000e881:	e8 04 70 00 00       	call   c001588a <Krnl::panic(char const*)>
c000e886:	83 c4 10             	add    esp,0x10
c000e889:	eb 97                	jmp    c000e822 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e88b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e88f:	e8 1a dd ff ff       	call   c000c5ae <Phys::allocatePage()>
c000e894:	89 c5                	mov    ebp,eax
c000e896:	e8 18 fa ff ff       	call   c000e2b3 <Virt::getAKernelVAS()>
c000e89b:	83 ec 0c             	sub    esp,0xc
c000e89e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e8a2:	6a 01                	push   0x1
c000e8a4:	e8 7a f8 ff ff       	call   c000e123 <Virt::allocateKernelVirtualPages(int)>
c000e8a9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e8b0:	6a 01                	push   0x1
c000e8b2:	50                   	push   eax
c000e8b3:	55                   	push   ebp
c000e8b4:	81 cd 07 04 00 00    	or     ebp,0x407
c000e8ba:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e8be:	51                   	push   ecx
c000e8bf:	e8 1e 02 00 00       	call   c000eae2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e8c4:	83 c4 1c             	add    esp,0x1c
c000e8c7:	68 00 10 00 00       	push   0x1000
c000e8cc:	6a 00                	push   0x0
c000e8ce:	50                   	push   eax
c000e8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e8d3:	e8 e2 1d ff ff       	call   c00006ba <memset>
c000e8d8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e8dc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e8df:	e8 99 fb ff ff       	call   c000e47d <Virt::freeKernelVirtualPages(unsigned long)>
c000e8e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e8e8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e8eb:	83 c4 10             	add    esp,0x10
c000e8ee:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e8f1:	e9 41 ff ff ff       	jmp    c000e837 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e8f6 <VAS::allocatePages(int, int)>:
c000e8f6:	55                   	push   ebp
c000e8f7:	57                   	push   edi
c000e8f8:	56                   	push   esi
c000e8f9:	53                   	push   ebx
c000e8fa:	83 ec 1c             	sub    esp,0x1c
c000e8fd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e901:	e8 14 5e 00 00       	call   c001471a <thisCPU()>
c000e906:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e90c:	83 e0 01             	and    eax,0x1
c000e90f:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e913:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e917:	0f 85 d7 00 00 00    	jne    c000e9f4 <VAS::allocatePages(int, int)+0xfe>
c000e91d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e920:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e924:	85 c0                	test   eax,eax
c000e926:	0f 84 ac 00 00 00    	je     c000e9d8 <VAS::allocatePages(int, int)+0xe2>
c000e92c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e930:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e934:	c1 e6 0c             	shl    esi,0xc
c000e937:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000e93b:	85 c0                	test   eax,eax
c000e93d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000e940:	7e 33                	jle    c000e975 <VAS::allocatePages(int, int)+0x7f>
c000e942:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e946:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e94a:	81 cd 00 04 00 00    	or     ebp,0x400
c000e950:	e8 59 dc ff ff       	call   c000c5ae <Phys::allocatePage()>
c000e955:	55                   	push   ebp
c000e956:	53                   	push   ebx
c000e957:	50                   	push   eax
c000e958:	57                   	push   edi
c000e959:	e8 98 fe ff ff       	call   c000e7f6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e95e:	83 c4 10             	add    esp,0x10
c000e961:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e966:	74 03                	je     c000e96b <VAS::allocatePages(int, int)+0x75>
c000e968:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e96b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e971:	39 de                	cmp    esi,ebx
c000e973:	75 db                	jne    c000e950 <VAS::allocatePages(int, int)+0x5a>
c000e975:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e97a:	74 3f                	je     c000e9bb <VAS::allocatePages(int, int)+0xc5>
c000e97c:	c1 ee 0a             	shr    esi,0xa
c000e97f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e983:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000e989:	c1 eb 0a             	shr    ebx,0xa
c000e98c:	81 ee 00 00 40 00    	sub    esi,0x400000
c000e992:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e998:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e99e:	39 f3                	cmp    ebx,esi
c000e9a0:	77 0d                	ja     c000e9af <VAS::allocatePages(int, int)+0xb9>
c000e9a2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e9a5:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e9ab:	39 de                	cmp    esi,ebx
c000e9ad:	73 f3                	jae    c000e9a2 <VAS::allocatePages(int, int)+0xac>
c000e9af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9b3:	83 c4 1c             	add    esp,0x1c
c000e9b6:	5b                   	pop    ebx
c000e9b7:	5e                   	pop    esi
c000e9b8:	5f                   	pop    edi
c000e9b9:	5d                   	pop    ebp
c000e9ba:	c3                   	ret    
c000e9bb:	e8 75 0a 01 00       	call   c001f435 <CPU::readCR3()>
c000e9c0:	83 ec 0c             	sub    esp,0xc
c000e9c3:	50                   	push   eax
c000e9c4:	e8 7e 0a 01 00       	call   c001f447 <CPU::writeCR3(unsigned long)>
c000e9c9:	83 c4 10             	add    esp,0x10
c000e9cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9d0:	83 c4 1c             	add    esp,0x1c
c000e9d3:	5b                   	pop    ebx
c000e9d4:	5e                   	pop    esi
c000e9d5:	5f                   	pop    edi
c000e9d6:	5d                   	pop    ebp
c000e9d7:	c3                   	ret    
c000e9d8:	83 ec 0c             	sub    esp,0xc
c000e9db:	68 90 13 02 c0       	push   0xc0021390
c000e9e0:	e8 a5 6e 00 00       	call   c001588a <Krnl::panic(char const*)>
c000e9e5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e9e8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e9ec:	83 c4 10             	add    esp,0x10
c000e9ef:	e9 38 ff ff ff       	jmp    c000e92c <VAS::allocatePages(int, int)+0x36>
c000e9f4:	83 ec 0c             	sub    esp,0xc
c000e9f7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e9fb:	e8 23 f7 ff ff       	call   c000e123 <Virt::allocateKernelVirtualPages(int)>
c000ea00:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea04:	83 c4 10             	add    esp,0x10
c000ea07:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000ea0c:	0f 87 94 00 00 00    	ja     c000eaa6 <VAS::allocatePages(int, int)+0x1b0>
c000ea12:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea16:	85 d2                	test   edx,edx
c000ea18:	7e 3c                	jle    c000ea56 <VAS::allocatePages(int, int)+0x160>
c000ea1a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ea1e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea22:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea26:	c1 e5 0c             	shl    ebp,0xc
c000ea29:	81 ce 00 04 00 00    	or     esi,0x400
c000ea2f:	01 dd                	add    ebp,ebx
c000ea31:	e8 78 db ff ff       	call   c000c5ae <Phys::allocatePage()>
c000ea36:	56                   	push   esi
c000ea37:	53                   	push   ebx
c000ea38:	50                   	push   eax
c000ea39:	57                   	push   edi
c000ea3a:	e8 b7 fd ff ff       	call   c000e7f6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ea3f:	83 c4 10             	add    esp,0x10
c000ea42:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea47:	74 03                	je     c000ea4c <VAS::allocatePages(int, int)+0x156>
c000ea49:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea4c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea52:	39 dd                	cmp    ebp,ebx
c000ea54:	75 db                	jne    c000ea31 <VAS::allocatePages(int, int)+0x13b>
c000ea56:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea5b:	0f 84 5a ff ff ff    	je     c000e9bb <VAS::allocatePages(int, int)+0xc5>
c000ea61:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea69:	89 d3                	mov    ebx,edx
c000ea6b:	c1 e0 0c             	shl    eax,0xc
c000ea6e:	c1 eb 0a             	shr    ebx,0xa
c000ea71:	01 d0                	add    eax,edx
c000ea73:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ea79:	c1 e8 0a             	shr    eax,0xa
c000ea7c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ea82:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ea87:	2d 00 00 40 00       	sub    eax,0x400000
c000ea8c:	39 c3                	cmp    ebx,eax
c000ea8e:	0f 87 1b ff ff ff    	ja     c000e9af <VAS::allocatePages(int, int)+0xb9>
c000ea94:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea97:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea9d:	39 d8                	cmp    eax,ebx
c000ea9f:	73 f3                	jae    c000ea94 <VAS::allocatePages(int, int)+0x19e>
c000eaa1:	e9 09 ff ff ff       	jmp    c000e9af <VAS::allocatePages(int, int)+0xb9>
c000eaa6:	e8 6f 5c 00 00       	call   c001471a <thisCPU()>
c000eaab:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000eab2:	0f 84 5a ff ff ff    	je     c000ea12 <VAS::allocatePages(int, int)+0x11c>
c000eab8:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000eac0:	e9 4d ff ff ff       	jmp    c000ea12 <VAS::allocatePages(int, int)+0x11c>
c000eac5:	90                   	nop

c000eac6 <VAS::setCPUSpecific(unsigned long)>:
c000eac6:	83 ec 0c             	sub    esp,0xc
c000eac9:	6a 05                	push   0x5
c000eacb:	68 00 00 40 c2       	push   0xc2400000
c000ead0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ead4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ead8:	e8 19 fd ff ff       	call   c000e7f6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eadd:	83 c4 1c             	add    esp,0x1c
c000eae0:	c3                   	ret    
c000eae1:	90                   	nop

c000eae2 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000eae2:	55                   	push   ebp
c000eae3:	57                   	push   edi
c000eae4:	56                   	push   esi
c000eae5:	53                   	push   ebx
c000eae6:	83 ec 1c             	sub    esp,0x1c
c000eae9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000eaed:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eaf1:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000eaf5:	e8 20 5c 00 00       	call   c001471a <thisCPU()>
c000eafa:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000eb00:	83 e0 01             	and    eax,0x1
c000eb03:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eb07:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb0b:	85 c0                	test   eax,eax
c000eb0d:	7e 39                	jle    c000eb48 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000eb0f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb13:	89 f3                	mov    ebx,esi
c000eb15:	c1 e0 0c             	shl    eax,0xc
c000eb18:	01 f0                	add    eax,esi
c000eb1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eb1e:	55                   	push   ebp
c000eb1f:	53                   	push   ebx
c000eb20:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb24:	29 f0                	sub    eax,esi
c000eb26:	01 d8                	add    eax,ebx
c000eb28:	50                   	push   eax
c000eb29:	57                   	push   edi
c000eb2a:	e8 c7 fc ff ff       	call   c000e7f6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb2f:	83 c4 10             	add    esp,0x10
c000eb32:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb37:	74 03                	je     c000eb3c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000eb39:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb3c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb42:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000eb46:	75 d6                	jne    c000eb1e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000eb48:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb4d:	74 42                	je     c000eb91 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000eb4f:	89 f3                	mov    ebx,esi
c000eb51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb55:	c1 eb 0a             	shr    ebx,0xa
c000eb58:	c1 e0 0c             	shl    eax,0xc
c000eb5b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000eb61:	01 f0                	add    eax,esi
c000eb63:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000eb69:	c1 e8 0a             	shr    eax,0xa
c000eb6c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb71:	2d 00 00 40 00       	sub    eax,0x400000
c000eb76:	39 c3                	cmp    ebx,eax
c000eb78:	77 0d                	ja     c000eb87 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000eb7a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb7d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb83:	39 d8                	cmp    eax,ebx
c000eb85:	73 f3                	jae    c000eb7a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000eb87:	83 c4 1c             	add    esp,0x1c
c000eb8a:	89 f0                	mov    eax,esi
c000eb8c:	5b                   	pop    ebx
c000eb8d:	5e                   	pop    esi
c000eb8e:	5f                   	pop    edi
c000eb8f:	5d                   	pop    ebp
c000eb90:	c3                   	ret    
c000eb91:	e8 9f 08 01 00       	call   c001f435 <CPU::readCR3()>
c000eb96:	83 ec 0c             	sub    esp,0xc
c000eb99:	50                   	push   eax
c000eb9a:	e8 a8 08 01 00       	call   c001f447 <CPU::writeCR3(unsigned long)>
c000eb9f:	89 f0                	mov    eax,esi
c000eba1:	83 c4 10             	add    esp,0x10
c000eba4:	83 c4 1c             	add    esp,0x1c
c000eba7:	5b                   	pop    ebx
c000eba8:	5e                   	pop    esi
c000eba9:	5f                   	pop    edi
c000ebaa:	5d                   	pop    ebp
c000ebab:	c3                   	ret    

c000ebac <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000ebac:	55                   	push   ebp
c000ebad:	57                   	push   edi
c000ebae:	56                   	push   esi
c000ebaf:	53                   	push   ebx
c000ebb0:	83 ec 1c             	sub    esp,0x1c
c000ebb3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ebb7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ebbb:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000ebbf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ebc3:	a9 ff 0f 00 00       	test   eax,0xfff
c000ebc8:	75 4a                	jne    c000ec14 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000ebca:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ebce:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ebd1:	c1 eb 16             	shr    ebx,0x16
c000ebd4:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000ebdb:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000ebdf:	74 4d                	je     c000ec2e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000ebe1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ebe5:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000ebe9:	c1 e8 0a             	shr    eax,0xa
c000ebec:	80 fa 01             	cmp    dl,0x1
c000ebef:	19 d2                	sbb    edx,edx
c000ebf1:	c1 e3 0c             	shl    ebx,0xc
c000ebf4:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000ebf8:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000ebfe:	25 fc 0f 00 00       	and    eax,0xffc
c000ec03:	01 d8                	add    eax,ebx
c000ec05:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000ec0c:	83 c4 1c             	add    esp,0x1c
c000ec0f:	5b                   	pop    ebx
c000ec10:	5e                   	pop    esi
c000ec11:	5f                   	pop    edi
c000ec12:	5d                   	pop    ebp
c000ec13:	c3                   	ret    
c000ec14:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ec18:	83 ec 0c             	sub    esp,0xc
c000ec1b:	68 bc 13 02 c0       	push   0xc00213bc
c000ec20:	e8 65 6c 00 00       	call   c001588a <Krnl::panic(char const*)>
c000ec25:	83 c4 10             	add    esp,0x10
c000ec28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec2c:	eb 9c                	jmp    c000ebca <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000ec2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ec32:	e8 77 d9 ff ff       	call   c000c5ae <Phys::allocatePage()>
c000ec37:	89 c5                	mov    ebp,eax
c000ec39:	e8 75 f6 ff ff       	call   c000e2b3 <Virt::getAKernelVAS()>
c000ec3e:	83 ec 0c             	sub    esp,0xc
c000ec41:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec45:	6a 01                	push   0x1
c000ec47:	e8 d7 f4 ff ff       	call   c000e123 <Virt::allocateKernelVirtualPages(int)>
c000ec4c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ec53:	6a 01                	push   0x1
c000ec55:	50                   	push   eax
c000ec56:	55                   	push   ebp
c000ec57:	81 cd 07 04 00 00    	or     ebp,0x407
c000ec5d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ec61:	51                   	push   ecx
c000ec62:	e8 7b fe ff ff       	call   c000eae2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ec67:	83 c4 1c             	add    esp,0x1c
c000ec6a:	68 00 10 00 00       	push   0x1000
c000ec6f:	6a 00                	push   0x0
c000ec71:	50                   	push   eax
c000ec72:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ec76:	e8 3f 1a ff ff       	call   c00006ba <memset>
c000ec7b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ec7f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ec82:	e8 f6 f7 ff ff       	call   c000e47d <Virt::freeKernelVirtualPages(unsigned long)>
c000ec87:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ec8a:	83 c4 10             	add    esp,0x10
c000ec8d:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000ec90:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ec94:	e9 48 ff ff ff       	jmp    c000ebe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c000ec99:	90                   	nop

c000ec9a <VAS::VAS(bool)>:
c000ec9a:	53                   	push   ebx
c000ec9b:	83 ec 28             	sub    esp,0x28
c000ec9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eca2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000eca6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecaa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ecb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecb5:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000ecb9:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000ecbc:	e8 ed d8 ff ff       	call   c000c5ae <Phys::allocatePage()>
c000ecc1:	89 c2                	mov    edx,eax
c000ecc3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecc7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ecca:	e8 e4 f5 ff ff       	call   c000e2b3 <Virt::getAKernelVAS()>
c000eccf:	89 c3                	mov    ebx,eax
c000ecd1:	83 ec 0c             	sub    esp,0xc
c000ecd4:	6a 01                	push   0x1
c000ecd6:	e8 48 f4 ff ff       	call   c000e123 <Virt::allocateKernelVirtualPages(int)>
c000ecdb:	83 c4 10             	add    esp,0x10
c000ecde:	89 c2                	mov    edx,eax
c000ece0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ece4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ece7:	83 ec 0c             	sub    esp,0xc
c000ecea:	6a 03                	push   0x3
c000ecec:	6a 01                	push   0x1
c000ecee:	52                   	push   edx
c000ecef:	50                   	push   eax
c000ecf0:	53                   	push   ebx
c000ecf1:	e8 ec fd ff ff       	call   c000eae2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ecf6:	83 c4 20             	add    esp,0x20
c000ecf9:	89 c2                	mov    edx,eax
c000ecfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecff:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ed02:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ed0a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000ed12:	7f 1c                	jg     c000ed30 <VAS::VAS(bool)+0x96>
c000ed14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed1b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ed1f:	c1 e2 02             	shl    edx,0x2
c000ed22:	01 d0                	add    eax,edx
c000ed24:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ed2a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ed2e:	eb da                	jmp    c000ed0a <VAS::VAS(bool)+0x70>
c000ed30:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ed38:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ed40:	7f 71                	jg     c000edb3 <VAS::VAS(bool)+0x119>
c000ed42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed46:	2d 00 02 00 00       	sub    eax,0x200
c000ed4b:	c1 e0 0c             	shl    eax,0xc
c000ed4e:	83 c8 03             	or     eax,0x3
c000ed51:	89 c3                	mov    ebx,eax
c000ed53:	e8 c2 59 00 00       	call   c001471a <thisCPU()>
c000ed58:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ed5e:	83 e0 10             	and    eax,0x10
c000ed61:	84 c0                	test   al,al
c000ed63:	74 07                	je     c000ed6c <VAS::VAS(bool)+0xd2>
c000ed65:	b8 00 01 00 00       	mov    eax,0x100
c000ed6a:	eb 05                	jmp    c000ed71 <VAS::VAS(bool)+0xd7>
c000ed6c:	b8 00 00 00 00       	mov    eax,0x0
c000ed71:	09 d8                	or     eax,ebx
c000ed73:	89 c1                	mov    ecx,eax
c000ed75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed79:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed7c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed80:	c1 e2 02             	shl    edx,0x2
c000ed83:	01 d0                	add    eax,edx
c000ed85:	89 ca                	mov    edx,ecx
c000ed87:	89 10                	mov    DWORD PTR [eax],edx
c000ed89:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed8d:	2d 40 03 00 00       	sub    eax,0x340
c000ed92:	83 f8 7f             	cmp    eax,0x7f
c000ed95:	77 16                	ja     c000edad <VAS::VAS(bool)+0x113>
c000ed97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed9b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed9e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eda2:	c1 e2 02             	shl    edx,0x2
c000eda5:	01 d0                	add    eax,edx
c000eda7:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000edad:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000edb1:	eb 85                	jmp    c000ed38 <VAS::VAS(bool)+0x9e>
c000edb3:	e8 62 59 00 00       	call   c001471a <thisCPU()>
c000edb8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000edbe:	83 e0 10             	and    eax,0x10
c000edc1:	84 c0                	test   al,al
c000edc3:	74 07                	je     c000edcc <VAS::VAS(bool)+0x132>
c000edc5:	b8 03 41 00 00       	mov    eax,0x4103
c000edca:	eb 05                	jmp    c000edd1 <VAS::VAS(bool)+0x137>
c000edcc:	b8 03 40 00 00       	mov    eax,0x4003
c000edd1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000edd5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000edd8:	81 c2 20 0c 00 00    	add    edx,0xc20
c000edde:	89 02                	mov    DWORD PTR [edx],eax
c000ede0:	e8 35 59 00 00       	call   c001471a <thisCPU()>
c000ede5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000edeb:	83 ec 08             	sub    esp,0x8
c000edee:	50                   	push   eax
c000edef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000edf3:	e8 ce fc ff ff       	call   c000eac6 <VAS::setCPUSpecific(unsigned long)>
c000edf8:	83 c4 10             	add    esp,0x10
c000edfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edff:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ee02:	e8 13 59 00 00       	call   c001471a <thisCPU()>
c000ee07:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee0d:	83 e0 10             	and    eax,0x10
c000ee10:	84 c0                	test   al,al
c000ee12:	74 07                	je     c000ee1b <VAS::VAS(bool)+0x181>
c000ee14:	b8 00 01 00 00       	mov    eax,0x100
c000ee19:	eb 05                	jmp    c000ee20 <VAS::VAS(bool)+0x186>
c000ee1b:	b8 00 00 00 00       	mov    eax,0x0
c000ee20:	09 d8                	or     eax,ebx
c000ee22:	89 c2                	mov    edx,eax
c000ee24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee28:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee2b:	05 fc 0f 00 00       	add    eax,0xffc
c000ee30:	83 ca 03             	or     edx,0x3
c000ee33:	89 10                	mov    DWORD PTR [eax],edx
c000ee35:	e8 e0 58 00 00       	call   c001471a <thisCPU()>
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	50                   	push   eax
c000ee3e:	e8 9f 19 00 00       	call   c00107e2 <Device::getName()>
c000ee43:	83 c4 10             	add    esp,0x10
c000ee46:	83 ec 08             	sub    esp,0x8
c000ee49:	68 bb 14 02 c0       	push   0xc00214bb
c000ee4e:	50                   	push   eax
c000ee4f:	e8 56 19 ff ff       	call   c00007aa <strcmp>
c000ee54:	83 c4 10             	add    esp,0x10
c000ee57:	85 c0                	test   eax,eax
c000ee59:	0f 94 c0             	sete   al
c000ee5c:	84 c0                	test   al,al
c000ee5e:	74 64                	je     c000eec4 <VAS::VAS(bool)+0x22a>
c000ee60:	e8 5c 99 00 00       	call   c00187c1 <disableIRQs()>
c000ee65:	e8 b0 58 00 00       	call   c001471a <thisCPU()>
c000ee6a:	05 7c 09 00 00       	add    eax,0x97c
c000ee6f:	83 ec 0c             	sub    esp,0xc
c000ee72:	50                   	push   eax
c000ee73:	e8 fe cb ff ff       	call   c000ba76 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ee78:	83 c4 10             	add    esp,0x10
c000ee7b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ee80:	89 c3                	mov    ebx,eax
c000ee82:	e8 93 58 00 00       	call   c001471a <thisCPU()>
c000ee87:	05 7c 09 00 00       	add    eax,0x97c
c000ee8c:	83 ec 0c             	sub    esp,0xc
c000ee8f:	50                   	push   eax
c000ee90:	e8 e1 cb ff ff       	call   c000ba76 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ee95:	83 c4 10             	add    esp,0x10
c000ee98:	83 ec 08             	sub    esp,0x8
c000ee9b:	50                   	push   eax
c000ee9c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eea0:	e8 b9 f5 ff ff       	call   c000e45e <VAS::getPageTableEntry(unsigned long)>
c000eea5:	83 c4 10             	add    esp,0x10
c000eea8:	8b 00                	mov    eax,DWORD PTR [eax]
c000eeaa:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eeaf:	6a 11                	push   0x11
c000eeb1:	53                   	push   ebx
c000eeb2:	50                   	push   eax
c000eeb3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eeb7:	e8 3a f9 ff ff       	call   c000e7f6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eebc:	83 c4 10             	add    esp,0x10
c000eebf:	e8 0b 99 00 00       	call   c00187cf <enableIRQs()>
c000eec4:	90                   	nop
c000eec5:	83 c4 28             	add    esp,0x28
c000eec8:	5b                   	pop    ebx
c000eec9:	c3                   	ret    

c000eeca <mapVASFirstTime>:
c000eeca:	55                   	push   ebp
c000eecb:	57                   	push   edi
c000eecc:	56                   	push   esi
c000eecd:	53                   	push   ebx
c000eece:	83 ec 0c             	sub    esp,0xc
c000eed1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eed6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000eed9:	4a                   	dec    edx
c000eeda:	0f 84 99 00 00 00    	je     c000ef79 <mapVASFirstTime+0xaf>
c000eee0:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000eee3:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000eee6:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000eeeb:	c1 e5 15             	shl    ebp,0x15
c000eeee:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000eef3:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000eef9:	29 eb                	sub    ebx,ebp
c000eefb:	29 ee                	sub    esi,ebp
c000eefd:	e8 ac d6 ff ff       	call   c000c5ae <Phys::allocatePage()>
c000ef02:	83 ec 0c             	sub    esp,0xc
c000ef05:	68 03 04 00 00       	push   0x403
c000ef0a:	6a 01                	push   0x1
c000ef0c:	53                   	push   ebx
c000ef0d:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ef13:	50                   	push   eax
c000ef14:	57                   	push   edi
c000ef15:	e8 c8 fb ff ff       	call   c000eae2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef1a:	83 c4 20             	add    esp,0x20
c000ef1d:	39 f3                	cmp    ebx,esi
c000ef1f:	75 dc                	jne    c000eefd <mapVASFirstTime+0x33>
c000ef21:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000ef26:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000ef2b:	29 ee                	sub    esi,ebp
c000ef2d:	29 e8                	sub    eax,ebp
c000ef2f:	89 c5                	mov    ebp,eax
c000ef31:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000ef35:	19 db                	sbb    ebx,ebx
c000ef37:	e8 72 d6 ff ff       	call   c000c5ae <Phys::allocatePage()>
c000ef3c:	83 e3 04             	and    ebx,0x4
c000ef3f:	83 ec 0c             	sub    esp,0xc
c000ef42:	81 c3 03 04 00 00    	add    ebx,0x403
c000ef48:	53                   	push   ebx
c000ef49:	6a 01                	push   0x1
c000ef4b:	56                   	push   esi
c000ef4c:	81 ee 00 10 00 00    	sub    esi,0x1000
c000ef52:	50                   	push   eax
c000ef53:	57                   	push   edi
c000ef54:	e8 89 fb ff ff       	call   c000eae2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef59:	83 c4 20             	add    esp,0x20
c000ef5c:	39 f5                	cmp    ebp,esi
c000ef5e:	75 d1                	jne    c000ef31 <mapVASFirstTime+0x67>
c000ef60:	e8 d0 04 01 00       	call   c001f435 <CPU::readCR3()>
c000ef65:	83 ec 0c             	sub    esp,0xc
c000ef68:	50                   	push   eax
c000ef69:	e8 d9 04 01 00       	call   c001f447 <CPU::writeCR3(unsigned long)>
c000ef6e:	83 c4 10             	add    esp,0x10
c000ef71:	83 c4 0c             	add    esp,0xc
c000ef74:	5b                   	pop    ebx
c000ef75:	5e                   	pop    esi
c000ef76:	5f                   	pop    edi
c000ef77:	5d                   	pop    ebp
c000ef78:	c3                   	ret    
c000ef79:	83 ec 0c             	sub    esp,0xc
c000ef7c:	68 c9 14 02 c0       	push   0xc00214c9
c000ef81:	e8 6f 01 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000ef86:	83 c4 10             	add    esp,0x10
c000ef89:	83 c4 0c             	add    esp,0xc
c000ef8c:	5b                   	pop    ebx
c000ef8d:	5e                   	pop    esi
c000ef8e:	5f                   	pop    edi
c000ef8f:	5d                   	pop    ebp
c000ef90:	c3                   	ret    

c000ef91 <__cxa_atexit>:
c000ef91:	31 c0                	xor    eax,eax
c000ef93:	c3                   	ret    

c000ef94 <__cxa_finalize>:
c000ef94:	c3                   	ret    

c000ef95 <__stack_chk_fail>:
c000ef95:	55                   	push   ebp
c000ef96:	89 e5                	mov    ebp,esp
c000ef98:	83 ec 10             	sub    esp,0x10
c000ef9b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ef9e:	68 e2 14 02 c0       	push   0xc00214e2
c000efa3:	e8 4d 01 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000efa8:	58                   	pop    eax
c000efa9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efac:	5a                   	pop    edx
c000efad:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000efb0:	68 e2 14 02 c0       	push   0xc00214e2
c000efb5:	e8 3b 01 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000efba:	59                   	pop    ecx
c000efbb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efbe:	5a                   	pop    edx
c000efbf:	8b 00                	mov    eax,DWORD PTR [eax]
c000efc1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000efc4:	68 e2 14 02 c0       	push   0xc00214e2
c000efc9:	e8 27 01 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000efce:	59                   	pop    ecx
c000efcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efd2:	5a                   	pop    edx
c000efd3:	8b 00                	mov    eax,DWORD PTR [eax]
c000efd5:	8b 00                	mov    eax,DWORD PTR [eax]
c000efd7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000efda:	68 e2 14 02 c0       	push   0xc00214e2
c000efdf:	e8 11 01 00 00       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c000efe4:	c7 04 24 ea 14 02 c0 	mov    DWORD PTR [esp],0xc00214ea
c000efeb:	e8 9a 68 00 00       	call   c001588a <Krnl::panic(char const*)>
c000eff0:	83 c4 10             	add    esp,0x10
c000eff3:	c9                   	leave  
c000eff4:	c3                   	ret    

c000eff5 <__cxa_pure_virtual>:
c000eff5:	83 ec 18             	sub    esp,0x18
c000eff8:	68 02 15 02 c0       	push   0xc0021502
c000effd:	e8 88 68 00 00       	call   c001588a <Krnl::panic(char const*)>
c000f002:	83 c4 1c             	add    esp,0x1c
c000f005:	c3                   	ret    

c000f006 <operator new(unsigned long)>:
c000f006:	e9 f9 cf ff ff       	jmp    c000c004 <malloc>

c000f00b <operator new[](unsigned long)>:
c000f00b:	e9 f4 cf ff ff       	jmp    c000c004 <malloc>

c000f010 <operator delete(void*)>:
c000f010:	e9 0f d0 ff ff       	jmp    c000c024 <rfree>

c000f015 <operator delete(void*, unsigned long)>:
c000f015:	e9 0a d0 ff ff       	jmp    c000c024 <rfree>

c000f01a <operator delete[](void*)>:
c000f01a:	e9 05 d0 ff ff       	jmp    c000c024 <rfree>

c000f01f <operator delete[](void*, unsigned long)>:
c000f01f:	e9 00 d0 ff ff       	jmp    c000c024 <rfree>

c000f024 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000f024:	57                   	push   edi
c000f025:	b9 3f 00 00 00       	mov    ecx,0x3f
c000f02a:	56                   	push   esi
c000f02b:	be 18 15 02 c0       	mov    esi,0xc0021518
c000f030:	53                   	push   ebx
c000f031:	83 ec 40             	sub    esp,0x40
c000f034:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000f038:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000f03c:	fc                   	cld    
c000f03d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f03f:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000f043:	83 f9 3e             	cmp    ecx,0x3e
c000f046:	7e 05                	jle    c000f04d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c000f048:	b9 3e 00 00 00       	mov    ecx,0x3e
c000f04d:	89 df                	mov    edi,ebx
c000f04f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000f053:	eb 02                	jmp    c000f057 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c000f055:	89 c7                	mov    edi,eax
c000f057:	31 d2                	xor    edx,edx
c000f059:	46                   	inc    esi
c000f05a:	89 f8                	mov    eax,edi
c000f05c:	f7 f1                	div    ecx
c000f05e:	39 cf                	cmp    edi,ecx
c000f060:	73 f3                	jae    c000f055 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c000f062:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f065:	eb 02                	jmp    c000f069 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c000f067:	89 c3                	mov    ebx,eax
c000f069:	31 d2                	xor    edx,edx
c000f06b:	4e                   	dec    esi
c000f06c:	89 d8                	mov    eax,ebx
c000f06e:	f7 f1                	div    ecx
c000f070:	39 cb                	cmp    ebx,ecx
c000f072:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000f076:	88 16                	mov    BYTE PTR [esi],dl
c000f078:	73 ed                	jae    c000f067 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c000f07a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f07e:	83 c4 40             	add    esp,0x40
c000f081:	5b                   	pop    ebx
c000f082:	5e                   	pop    esi
c000f083:	5f                   	pop    edi
c000f084:	c3                   	ret    

c000f085 <Dbg::logc(char)>:
c000f085:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f089:	ba fd 03 00 00       	mov    edx,0x3fd
c000f08e:	ec                   	in     al,dx
c000f08f:	a8 20                	test   al,0x20
c000f091:	74 fb                	je     c000f08e <Dbg::logc(char)+0x9>
c000f093:	ba f8 03 00 00       	mov    edx,0x3f8
c000f098:	88 c8                	mov    al,cl
c000f09a:	ee                   	out    dx,al
c000f09b:	c3                   	ret    

c000f09c <Dbg::logs(char*)>:
c000f09c:	53                   	push   ebx
c000f09d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000f0a1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f0a4:	84 c0                	test   al,al
c000f0a6:	74 0f                	je     c000f0b7 <Dbg::logs(char*)+0x1b>
c000f0a8:	50                   	push   eax
c000f0a9:	43                   	inc    ebx
c000f0aa:	e8 d6 ff ff ff       	call   c000f085 <Dbg::logc(char)>
c000f0af:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f0b2:	5a                   	pop    edx
c000f0b3:	84 c0                	test   al,al
c000f0b5:	75 f1                	jne    c000f0a8 <Dbg::logs(char*)+0xc>
c000f0b7:	5b                   	pop    ebx
c000f0b8:	c3                   	ret    

c000f0b9 <Dbg::logWriteInt(unsigned int)>:
c000f0b9:	83 ec 10             	sub    esp,0x10
c000f0bc:	6a 0a                	push   0xa
c000f0be:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f0c2:	50                   	push   eax
c000f0c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0c7:	e8 58 ff ff ff       	call   c000f024 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f0cc:	50                   	push   eax
c000f0cd:	e8 ca ff ff ff       	call   c000f09c <Dbg::logs(char*)>
c000f0d2:	83 c4 20             	add    esp,0x20
c000f0d5:	c3                   	ret    

c000f0d6 <Dbg::logWriteIntBase(unsigned int, int)>:
c000f0d6:	83 ec 10             	sub    esp,0x10
c000f0d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f0dd:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f0e1:	50                   	push   eax
c000f0e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0e6:	e8 39 ff ff ff       	call   c000f024 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f0eb:	50                   	push   eax
c000f0ec:	e8 ab ff ff ff       	call   c000f09c <Dbg::logs(char*)>
c000f0f1:	83 c4 20             	add    esp,0x20
c000f0f4:	c3                   	ret    

c000f0f5 <Dbg::kprintf(char const*, ...)>:
c000f0f5:	55                   	push   ebp
c000f0f6:	57                   	push   edi
c000f0f7:	56                   	push   esi
c000f0f8:	53                   	push   ebx
c000f0f9:	83 ec 0c             	sub    esp,0xc
c000f0fc:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f100:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000f104:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f108:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000f10b:	84 c0                	test   al,al
c000f10d:	74 4a                	je     c000f159 <Dbg::kprintf(char const*, ...)+0x64>
c000f10f:	31 db                	xor    ebx,ebx
c000f111:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000f114:	3c 25                	cmp    al,0x25
c000f116:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000f119:	0f 85 e4 00 00 00    	jne    c000f203 <Dbg::kprintf(char const*, ...)+0x10e>
c000f11f:	83 c3 02             	add    ebx,0x2
c000f122:	8a 07                	mov    al,BYTE PTR [edi]
c000f124:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000f127:	83 e8 25             	sub    eax,0x25
c000f12a:	3c 53                	cmp    al,0x53
c000f12c:	0f 87 ba 00 00 00    	ja     c000f1ec <Dbg::kprintf(char const*, ...)+0xf7>
c000f132:	0f b6 c0             	movzx  eax,al
c000f135:	ff 24 85 58 15 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdeaa8]
c000f13c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f140:	89 c8                	mov    eax,ecx
c000f142:	83 c1 04             	add    ecx,0x4
c000f145:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f149:	ff 30                	push   DWORD PTR [eax]
c000f14b:	e8 4c ff ff ff       	call   c000f09c <Dbg::logs(char*)>
c000f150:	58                   	pop    eax
c000f151:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f155:	84 c0                	test   al,al
c000f157:	75 b8                	jne    c000f111 <Dbg::kprintf(char const*, ...)+0x1c>
c000f159:	83 c4 0c             	add    esp,0xc
c000f15c:	5b                   	pop    ebx
c000f15d:	5e                   	pop    esi
c000f15e:	5f                   	pop    edi
c000f15f:	5d                   	pop    ebp
c000f160:	c3                   	ret    
c000f161:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f165:	89 d0                	mov    eax,edx
c000f167:	83 c2 04             	add    edx,0x4
c000f16a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f16e:	ff 30                	push   DWORD PTR [eax]
c000f170:	e8 44 ff ff ff       	call   c000f0b9 <Dbg::logWriteInt(unsigned int)>
c000f175:	58                   	pop    eax
c000f176:	eb d9                	jmp    c000f151 <Dbg::kprintf(char const*, ...)+0x5c>
c000f178:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f17c:	89 d0                	mov    eax,edx
c000f17e:	83 c2 04             	add    edx,0x4
c000f181:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f184:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f188:	50                   	push   eax
c000f189:	e8 f7 fe ff ff       	call   c000f085 <Dbg::logc(char)>
c000f18e:	58                   	pop    eax
c000f18f:	eb c0                	jmp    c000f151 <Dbg::kprintf(char const*, ...)+0x5c>
c000f191:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f195:	89 c8                	mov    eax,ecx
c000f197:	83 c1 04             	add    ecx,0x4
c000f19a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f19e:	ff 30                	push   DWORD PTR [eax]
c000f1a0:	e8 14 ff ff ff       	call   c000f0b9 <Dbg::logWriteInt(unsigned int)>
c000f1a5:	5f                   	pop    edi
c000f1a6:	eb a9                	jmp    c000f151 <Dbg::kprintf(char const*, ...)+0x5c>
c000f1a8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1ac:	89 c8                	mov    eax,ecx
c000f1ae:	83 c1 04             	add    ecx,0x4
c000f1b1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f1b5:	6a 10                	push   0x10
c000f1b7:	ff 30                	push   DWORD PTR [eax]
c000f1b9:	e8 18 ff ff ff       	call   c000f0d6 <Dbg::logWriteIntBase(unsigned int, int)>
c000f1be:	59                   	pop    ecx
c000f1bf:	5f                   	pop    edi
c000f1c0:	eb 8f                	jmp    c000f151 <Dbg::kprintf(char const*, ...)+0x5c>
c000f1c2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f1c6:	89 d0                	mov    eax,edx
c000f1c8:	83 c2 08             	add    edx,0x8
c000f1cb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f1cf:	6a 10                	push   0x10
c000f1d1:	ff 30                	push   DWORD PTR [eax]
c000f1d3:	e8 fe fe ff ff       	call   c000f0d6 <Dbg::logWriteIntBase(unsigned int, int)>
c000f1d8:	58                   	pop    eax
c000f1d9:	5a                   	pop    edx
c000f1da:	e9 72 ff ff ff       	jmp    c000f151 <Dbg::kprintf(char const*, ...)+0x5c>
c000f1df:	6a 25                	push   0x25
c000f1e1:	e8 9f fe ff ff       	call   c000f085 <Dbg::logc(char)>
c000f1e6:	58                   	pop    eax
c000f1e7:	e9 65 ff ff ff       	jmp    c000f151 <Dbg::kprintf(char const*, ...)+0x5c>
c000f1ec:	6a 25                	push   0x25
c000f1ee:	e8 92 fe ff ff       	call   c000f085 <Dbg::logc(char)>
c000f1f3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000f1f6:	50                   	push   eax
c000f1f7:	e8 89 fe ff ff       	call   c000f085 <Dbg::logc(char)>
c000f1fc:	5a                   	pop    edx
c000f1fd:	59                   	pop    ecx
c000f1fe:	e9 4e ff ff ff       	jmp    c000f151 <Dbg::kprintf(char const*, ...)+0x5c>
c000f203:	50                   	push   eax
c000f204:	89 eb                	mov    ebx,ebp
c000f206:	e8 7a fe ff ff       	call   c000f085 <Dbg::logc(char)>
c000f20b:	89 fd                	mov    ebp,edi
c000f20d:	58                   	pop    eax
c000f20e:	e9 3e ff ff ff       	jmp    c000f151 <Dbg::kprintf(char const*, ...)+0x5c>
c000f213:	90                   	nop

c000f214 <File::read(unsigned long long, void*, int*)>:
c000f214:	53                   	push   ebx
c000f215:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f219:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f21d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f224:	3c 19                	cmp    al,0x19
c000f226:	77 35                	ja     c000f25d <File::read(unsigned long long, void*, int*)+0x49>
c000f228:	8b 04 85 e0 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb720]
c000f22f:	85 c0                	test   eax,eax
c000f231:	74 2a                	je     c000f25d <File::read(unsigned long long, void*, int*)+0x49>
c000f233:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f239:	85 c0                	test   eax,eax
c000f23b:	74 20                	je     c000f25d <File::read(unsigned long long, void*, int*)+0x49>
c000f23d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f241:	74 21                	je     c000f264 <File::read(unsigned long long, void*, int*)+0x50>
c000f243:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f245:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f249:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f24f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f253:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f257:	5b                   	pop    ebx
c000f258:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f25b:	ff e0                	jmp    eax
c000f25d:	b8 0b 00 00 00       	mov    eax,0xb
c000f262:	eb 05                	jmp    c000f269 <File::read(unsigned long long, void*, int*)+0x55>
c000f264:	b8 05 00 00 00       	mov    eax,0x5
c000f269:	5b                   	pop    ebx
c000f26a:	c3                   	ret    
c000f26b:	90                   	nop

c000f26c <File::write(unsigned long long, void*, int*)>:
c000f26c:	53                   	push   ebx
c000f26d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f271:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f275:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f27c:	3c 19                	cmp    al,0x19
c000f27e:	77 35                	ja     c000f2b5 <File::write(unsigned long long, void*, int*)+0x49>
c000f280:	8b 04 85 e0 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb720]
c000f287:	85 c0                	test   eax,eax
c000f289:	74 2a                	je     c000f2b5 <File::write(unsigned long long, void*, int*)+0x49>
c000f28b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f291:	85 c0                	test   eax,eax
c000f293:	74 20                	je     c000f2b5 <File::write(unsigned long long, void*, int*)+0x49>
c000f295:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f299:	74 21                	je     c000f2bc <File::write(unsigned long long, void*, int*)+0x50>
c000f29b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f29d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f2a1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f2a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f2ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f2af:	5b                   	pop    ebx
c000f2b0:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f2b3:	ff e0                	jmp    eax
c000f2b5:	b8 0b 00 00 00       	mov    eax,0xb
c000f2ba:	eb 05                	jmp    c000f2c1 <File::write(unsigned long long, void*, int*)+0x55>
c000f2bc:	b8 05 00 00 00       	mov    eax,0x5
c000f2c1:	5b                   	pop    ebx
c000f2c2:	c3                   	ret    
c000f2c3:	90                   	nop

c000f2c4 <Directory::read(unsigned long long, void*, int*)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f2c9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f2cd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f2d4:	3c 19                	cmp    al,0x19
c000f2d6:	77 35                	ja     c000f30d <Directory::read(unsigned long long, void*, int*)+0x49>
c000f2d8:	8b 04 85 e0 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb720]
c000f2df:	85 c0                	test   eax,eax
c000f2e1:	74 2a                	je     c000f30d <Directory::read(unsigned long long, void*, int*)+0x49>
c000f2e3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f2e9:	85 c0                	test   eax,eax
c000f2eb:	74 20                	je     c000f30d <Directory::read(unsigned long long, void*, int*)+0x49>
c000f2ed:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f2f1:	74 21                	je     c000f314 <Directory::read(unsigned long long, void*, int*)+0x50>
c000f2f3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f2f5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f2f9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f2ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f303:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f307:	5b                   	pop    ebx
c000f308:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f30b:	ff e0                	jmp    eax
c000f30d:	b8 0b 00 00 00       	mov    eax,0xb
c000f312:	eb 05                	jmp    c000f319 <Directory::read(unsigned long long, void*, int*)+0x55>
c000f314:	b8 05 00 00 00       	mov    eax,0x5
c000f319:	5b                   	pop    ebx
c000f31a:	c3                   	ret    
c000f31b:	90                   	nop

c000f31c <Directory::write(unsigned long long, void*, int*)>:
c000f31c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f320:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f327:	b8 0b 00 00 00       	mov    eax,0xb
c000f32c:	80 fa 19             	cmp    dl,0x19
c000f32f:	77 18                	ja     c000f349 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f331:	8b 14 95 e0 48 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb720]
c000f338:	85 d2                	test   edx,edx
c000f33a:	74 0d                	je     c000f349 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f33c:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f343:	19 c0                	sbb    eax,eax
c000f345:	83 e0 0a             	and    eax,0xa
c000f348:	40                   	inc    eax
c000f349:	c3                   	ret    

c000f34a <File::isAtty()>:
c000f34a:	31 c0                	xor    eax,eax
c000f34c:	c3                   	ret    
c000f34d:	90                   	nop

c000f34e <Directory::isAtty()>:
c000f34e:	31 c0                	xor    eax,eax
c000f350:	c3                   	ret    
c000f351:	90                   	nop

c000f352 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f352:	b8 0a 00 00 00       	mov    eax,0xa
c000f357:	c3                   	ret    

c000f358 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f358:	b8 0a 00 00 00       	mov    eax,0xa
c000f35d:	c3                   	ret    

c000f35e <File::~File()>:
c000f35e:	83 ec 0c             	sub    esp,0xc
c000f361:	ba 14 17 02 c0       	mov    edx,0xc0021714
c000f366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f36a:	89 10                	mov    DWORD PTR [eax],edx
c000f36c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f370:	83 ec 0c             	sub    esp,0xc
c000f373:	50                   	push   eax
c000f374:	e8 49 eb ff ff       	call   c000dec2 <UnixFile::~UnixFile()>
c000f379:	83 c4 10             	add    esp,0x10
c000f37c:	90                   	nop
c000f37d:	83 c4 0c             	add    esp,0xc
c000f380:	c3                   	ret    
c000f381:	90                   	nop

c000f382 <File::~File()>:
c000f382:	83 ec 0c             	sub    esp,0xc
c000f385:	83 ec 0c             	sub    esp,0xc
c000f388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f38c:	e8 cd ff ff ff       	call   c000f35e <File::~File()>
c000f391:	83 c4 10             	add    esp,0x10
c000f394:	83 ec 08             	sub    esp,0x8
c000f397:	68 14 01 00 00       	push   0x114
c000f39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3a0:	e8 70 fc ff ff       	call   c000f015 <operator delete(void*, unsigned long)>
c000f3a5:	83 c4 10             	add    esp,0x10
c000f3a8:	83 c4 0c             	add    esp,0xc
c000f3ab:	c3                   	ret    

c000f3ac <Directory::~Directory()>:
c000f3ac:	83 ec 0c             	sub    esp,0xc
c000f3af:	ba 30 17 02 c0       	mov    edx,0xc0021730
c000f3b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3b8:	89 10                	mov    DWORD PTR [eax],edx
c000f3ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3be:	83 ec 0c             	sub    esp,0xc
c000f3c1:	50                   	push   eax
c000f3c2:	e8 fb ea ff ff       	call   c000dec2 <UnixFile::~UnixFile()>
c000f3c7:	83 c4 10             	add    esp,0x10
c000f3ca:	90                   	nop
c000f3cb:	83 c4 0c             	add    esp,0xc
c000f3ce:	c3                   	ret    
c000f3cf:	90                   	nop

c000f3d0 <Directory::~Directory()>:
c000f3d0:	83 ec 0c             	sub    esp,0xc
c000f3d3:	83 ec 0c             	sub    esp,0xc
c000f3d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3da:	e8 cd ff ff ff       	call   c000f3ac <Directory::~Directory()>
c000f3df:	83 c4 10             	add    esp,0x10
c000f3e2:	83 ec 08             	sub    esp,0x8
c000f3e5:	68 14 01 00 00       	push   0x114
c000f3ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3ee:	e8 22 fc ff ff       	call   c000f015 <operator delete(void*, unsigned long)>
c000f3f3:	83 c4 10             	add    esp,0x10
c000f3f6:	83 c4 0c             	add    esp,0xc
c000f3f9:	c3                   	ret    

c000f3fa <Filesystem::Filesystem()>:
c000f3fa:	ba b0 16 02 c0       	mov    edx,0xc00216b0
c000f3ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f403:	89 10                	mov    DWORD PTR [eax],edx
c000f405:	8b 15 48 44 02 c0    	mov    edx,DWORD PTR ds:0xc0024448
c000f40b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f40f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f412:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f416:	a3 48 44 02 c0       	mov    ds:0xc0024448,eax
c000f41b:	90                   	nop
c000f41c:	c3                   	ret    
c000f41d:	90                   	nop

c000f41e <Filesystem::~Filesystem()>:
c000f41e:	ba b0 16 02 c0       	mov    edx,0xc00216b0
c000f423:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f427:	89 10                	mov    DWORD PTR [eax],edx
c000f429:	90                   	nop
c000f42a:	c3                   	ret    
c000f42b:	90                   	nop

c000f42c <Filesystem::~Filesystem()>:
c000f42c:	83 ec 0c             	sub    esp,0xc
c000f42f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f433:	e8 e6 ff ff ff       	call   c000f41e <Filesystem::~Filesystem()>
c000f438:	83 c4 04             	add    esp,0x4
c000f43b:	83 ec 08             	sub    esp,0x8
c000f43e:	6a 08                	push   0x8
c000f440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f444:	e8 cc fb ff ff       	call   c000f015 <operator delete(void*, unsigned long)>
c000f449:	83 c4 10             	add    esp,0x10
c000f44c:	83 c4 0c             	add    esp,0xc
c000f44f:	c3                   	ret    

c000f450 <initVFS()>:
c000f450:	83 ec 18             	sub    esp,0x18
c000f453:	6a 08                	push   0x8
c000f455:	e8 ac fb ff ff       	call   c000f006 <operator new(unsigned long)>
c000f45a:	89 04 24             	mov    DWORD PTR [esp],eax
c000f45d:	e8 5e b2 00 00       	call   c001a6c0 <FAT::FAT()>
c000f462:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f469:	e8 98 fb ff ff       	call   c000f006 <operator new(unsigned long)>
c000f46e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f471:	e8 c0 c4 00 00       	call   c001b936 <ISO9660::ISO9660()>
c000f476:	83 c4 1c             	add    esp,0x1c
c000f479:	c3                   	ret    

c000f47a <standardiseFiles(char*, char const*, char const*)>:
c000f47a:	55                   	push   ebp
c000f47b:	57                   	push   edi
c000f47c:	56                   	push   esi
c000f47d:	53                   	push   ebx
c000f47e:	81 ec 10 04 00 00    	sub    esp,0x410
c000f484:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f48b:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f492:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f499:	68 00 04 00 00       	push   0x400
c000f49e:	6a 00                	push   0x0
c000f4a0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f4a4:	56                   	push   esi
c000f4a5:	e8 10 12 ff ff       	call   c00006ba <memset>
c000f4aa:	83 c4 10             	add    esp,0x10
c000f4ad:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f4b1:	75 0b                	jne    c000f4be <standardiseFiles(char*, char const*, char const*)+0x44>
c000f4b3:	50                   	push   eax
c000f4b4:	50                   	push   eax
c000f4b5:	57                   	push   edi
c000f4b6:	56                   	push   esi
c000f4b7:	e8 9d 12 ff ff       	call   c0000759 <strcpy>
c000f4bc:	eb 41                	jmp    c000f4ff <standardiseFiles(char*, char const*, char const*)+0x85>
c000f4be:	8a 07                	mov    al,BYTE PTR [edi]
c000f4c0:	3c 5c                	cmp    al,0x5c
c000f4c2:	74 04                	je     c000f4c8 <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f4c4:	3c 2f                	cmp    al,0x2f
c000f4c6:	75 18                	jne    c000f4e0 <standardiseFiles(char*, char const*, char const*)+0x66>
c000f4c8:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f4cb:	3c 60                	cmp    al,0x60
c000f4cd:	7e 03                	jle    c000f4d2 <standardiseFiles(char*, char const*, char const*)+0x58>
c000f4cf:	83 e8 20             	sub    eax,0x20
c000f4d2:	88 04 24             	mov    BYTE PTR [esp],al
c000f4d5:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f4dc:	50                   	push   eax
c000f4dd:	50                   	push   eax
c000f4de:	eb 18                	jmp    c000f4f8 <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f4e0:	50                   	push   eax
c000f4e1:	50                   	push   eax
c000f4e2:	55                   	push   ebp
c000f4e3:	56                   	push   esi
c000f4e4:	e8 70 12 ff ff       	call   c0000759 <strcpy>
c000f4e9:	5a                   	pop    edx
c000f4ea:	59                   	pop    ecx
c000f4eb:	68 b4 29 02 c0       	push   0xc00229b4
c000f4f0:	56                   	push   esi
c000f4f1:	e8 1a 13 ff ff       	call   c0000810 <strcat>
c000f4f6:	5d                   	pop    ebp
c000f4f7:	58                   	pop    eax
c000f4f8:	57                   	push   edi
c000f4f9:	56                   	push   esi
c000f4fa:	e8 11 13 ff ff       	call   c0000810 <strcat>
c000f4ff:	83 c4 10             	add    esp,0x10
c000f502:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f505:	3c 60                	cmp    al,0x60
c000f507:	7e 03                	jle    c000f50c <standardiseFiles(char*, char const*, char const*)+0x92>
c000f509:	83 e8 20             	sub    eax,0x20
c000f50c:	88 04 24             	mov    BYTE PTR [esp],al
c000f50f:	88 03                	mov    BYTE PTR [ebx],al
c000f511:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f518:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f51e:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f522:	bf 03 00 00 00       	mov    edi,0x3
c000f527:	b8 03 00 00 00       	mov    eax,0x3
c000f52c:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f52f:	84 d2                	test   dl,dl
c000f531:	0f 84 91 00 00 00    	je     c000f5c8 <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f537:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f53a:	80 fa 5c             	cmp    dl,0x5c
c000f53d:	74 05                	je     c000f544 <standardiseFiles(char*, char const*, char const*)+0xca>
c000f53f:	80 fa 2f             	cmp    dl,0x2f
c000f542:	75 12                	jne    c000f556 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f544:	89 c5                	mov    ebp,eax
c000f546:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f54b:	74 09                	je     c000f556 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f54d:	40                   	inc    eax
c000f54e:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f552:	89 cf                	mov    edi,ecx
c000f554:	eb d6                	jmp    c000f52c <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f556:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f55b:	75 5b                	jne    c000f5b8 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f55d:	80 fa 2e             	cmp    dl,0x2e
c000f560:	75 56                	jne    c000f5b8 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f562:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f566:	74 19                	je     c000f581 <standardiseFiles(char*, char const*, char const*)+0x107>
c000f568:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f56d:	74 53                	je     c000f5c2 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f56f:	89 f9                	mov    ecx,edi
c000f571:	41                   	inc    ecx
c000f572:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f575:	80 fa 2f             	cmp    dl,0x2f
c000f578:	74 f7                	je     c000f571 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f57a:	80 fa 5c             	cmp    dl,0x5c
c000f57d:	74 f2                	je     c000f571 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f57f:	eb d1                	jmp    c000f552 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f581:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f586:	74 3a                	je     c000f5c2 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f588:	83 f8 03             	cmp    eax,0x3
c000f58b:	74 c5                	je     c000f552 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f58d:	41                   	inc    ecx
c000f58e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f591:	80 fa 2f             	cmp    dl,0x2f
c000f594:	74 f7                	je     c000f58d <standardiseFiles(char*, char const*, char const*)+0x113>
c000f596:	80 fa 5c             	cmp    dl,0x5c
c000f599:	74 f2                	je     c000f58d <standardiseFiles(char*, char const*, char const*)+0x113>
c000f59b:	48                   	dec    eax
c000f59c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f5a0:	75 06                	jne    c000f5a8 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f5a2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f5a6:	eb f3                	jmp    c000f59b <standardiseFiles(char*, char const*, char const*)+0x121>
c000f5a8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f5ac:	74 07                	je     c000f5b5 <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f5ae:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f5b2:	48                   	dec    eax
c000f5b3:	eb f3                	jmp    c000f5a8 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f5b5:	40                   	inc    eax
c000f5b6:	eb 9a                	jmp    c000f552 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5b8:	80 fa 2f             	cmp    dl,0x2f
c000f5bb:	74 95                	je     c000f552 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5bd:	80 fa 5c             	cmp    dl,0x5c
c000f5c0:	74 90                	je     c000f552 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5c2:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f5c5:	40                   	inc    eax
c000f5c6:	eb 8a                	jmp    c000f552 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5c8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f5cc:	83 ec 0c             	sub    esp,0xc
c000f5cf:	53                   	push   ebx
c000f5d0:	e8 02 11 ff ff       	call   c00006d7 <strlen>
c000f5d5:	83 c4 10             	add    esp,0x10
c000f5d8:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f5dd:	75 26                	jne    c000f605 <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f5df:	83 ec 0c             	sub    esp,0xc
c000f5e2:	53                   	push   ebx
c000f5e3:	e8 ef 10 ff ff       	call   c00006d7 <strlen>
c000f5e8:	83 c4 10             	add    esp,0x10
c000f5eb:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f5f0:	74 26                	je     c000f618 <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f5f2:	83 ec 0c             	sub    esp,0xc
c000f5f5:	53                   	push   ebx
c000f5f6:	e8 dc 10 ff ff       	call   c00006d7 <strlen>
c000f5fb:	83 c4 10             	add    esp,0x10
c000f5fe:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f603:	eb c7                	jmp    c000f5cc <standardiseFiles(char*, char const*, char const*)+0x152>
c000f605:	83 ec 0c             	sub    esp,0xc
c000f608:	53                   	push   ebx
c000f609:	e8 c9 10 ff ff       	call   c00006d7 <strlen>
c000f60e:	83 c4 10             	add    esp,0x10
c000f611:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f616:	74 c7                	je     c000f5df <standardiseFiles(char*, char const*, char const*)+0x165>
c000f618:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f61e:	5b                   	pop    ebx
c000f61f:	5e                   	pop    esi
c000f620:	5f                   	pop    edi
c000f621:	5d                   	pop    ebp
c000f622:	c3                   	ret    
c000f623:	90                   	nop

c000f624 <File::File(char const*, Process*)>:
c000f624:	83 ec 0c             	sub    esp,0xc
c000f627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f62b:	83 ec 08             	sub    esp,0x8
c000f62e:	6a 00                	push   0x0
c000f630:	50                   	push   eax
c000f631:	e8 ea e6 ff ff       	call   c000dd20 <UnixFile::UnixFile(int)>
c000f636:	83 c4 10             	add    esp,0x10
c000f639:	ba 14 17 02 c0       	mov    edx,0xc0021714
c000f63e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f642:	89 10                	mov    DWORD PTR [eax],edx
c000f644:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f648:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f652:	83 c0 0d             	add    eax,0xd
c000f655:	83 ec 04             	sub    esp,0x4
c000f658:	52                   	push   edx
c000f659:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f65d:	50                   	push   eax
c000f65e:	e8 17 fe ff ff       	call   c000f47a <standardiseFiles(char*, char const*, char const*)>
c000f663:	83 c4 10             	add    esp,0x10
c000f666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f66a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f66d:	8d 50 bf             	lea    edx,[eax-0x41]
c000f670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f674:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f67a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f67e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f682:	90                   	nop
c000f683:	83 c4 0c             	add    esp,0xc
c000f686:	c3                   	ret    
c000f687:	90                   	nop

c000f688 <File::open(FileOpenMode)>:
c000f688:	53                   	push   ebx
c000f689:	b8 0b 00 00 00       	mov    eax,0xb
c000f68e:	83 ec 08             	sub    esp,0x8
c000f691:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f695:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f69c:	80 fa 19             	cmp    dl,0x19
c000f69f:	77 40                	ja     c000f6e1 <File::open(FileOpenMode)+0x59>
c000f6a1:	8b 14 95 e0 48 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb720]
c000f6a8:	85 d2                	test   edx,edx
c000f6aa:	74 35                	je     c000f6e1 <File::open(FileOpenMode)+0x59>
c000f6ac:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f6b2:	85 d2                	test   edx,edx
c000f6b4:	74 2b                	je     c000f6e1 <File::open(FileOpenMode)+0x59>
c000f6b6:	b8 06 00 00 00       	mov    eax,0x6
c000f6bb:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f6bf:	75 20                	jne    c000f6e1 <File::open(FileOpenMode)+0x59>
c000f6c1:	8b 02                	mov    eax,DWORD PTR [edx]
c000f6c3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f6c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f6cd:	51                   	push   ecx
c000f6ce:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f6d1:	51                   	push   ecx
c000f6d2:	52                   	push   edx
c000f6d3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f6d6:	83 c4 10             	add    esp,0x10
c000f6d9:	85 c0                	test   eax,eax
c000f6db:	75 04                	jne    c000f6e1 <File::open(FileOpenMode)+0x59>
c000f6dd:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f6e1:	83 c4 08             	add    esp,0x8
c000f6e4:	5b                   	pop    ebx
c000f6e5:	c3                   	ret    

c000f6e6 <File::close()>:
c000f6e6:	53                   	push   ebx
c000f6e7:	b8 0b 00 00 00       	mov    eax,0xb
c000f6ec:	83 ec 08             	sub    esp,0x8
c000f6ef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f6f3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f6fa:	80 fa 19             	cmp    dl,0x19
c000f6fd:	77 41                	ja     c000f740 <File::close()+0x5a>
c000f6ff:	8b 1c 95 e0 48 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb720]
c000f706:	85 db                	test   ebx,ebx
c000f708:	74 36                	je     c000f740 <File::close()+0x5a>
c000f70a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f711:	74 2d                	je     c000f740 <File::close()+0x5a>
c000f713:	b8 05 00 00 00       	mov    eax,0x5
c000f718:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f71c:	74 22                	je     c000f740 <File::close()+0x5a>
c000f71e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f722:	8b 04 95 e0 48 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb720]
c000f729:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f72f:	53                   	push   ebx
c000f730:	53                   	push   ebx
c000f731:	8b 10                	mov    edx,DWORD PTR [eax]
c000f733:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f739:	50                   	push   eax
c000f73a:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f73d:	83 c4 10             	add    esp,0x10
c000f740:	83 c4 08             	add    esp,0x8
c000f743:	5b                   	pop    ebx
c000f744:	c3                   	ret    
c000f745:	90                   	nop

c000f746 <File::seek(unsigned long long)>:
c000f746:	56                   	push   esi
c000f747:	53                   	push   ebx
c000f748:	b8 0b 00 00 00       	mov    eax,0xb
c000f74d:	51                   	push   ecx
c000f74e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f752:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f756:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f75d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f761:	80 fa 19             	cmp    dl,0x19
c000f764:	77 31                	ja     c000f797 <File::seek(unsigned long long)+0x51>
c000f766:	8b 14 95 e0 48 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb720]
c000f76d:	85 d2                	test   edx,edx
c000f76f:	74 26                	je     c000f797 <File::seek(unsigned long long)+0x51>
c000f771:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f777:	85 d2                	test   edx,edx
c000f779:	74 1c                	je     c000f797 <File::seek(unsigned long long)+0x51>
c000f77b:	b8 05 00 00 00       	mov    eax,0x5
c000f780:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f784:	74 11                	je     c000f797 <File::seek(unsigned long long)+0x51>
c000f786:	8b 02                	mov    eax,DWORD PTR [edx]
c000f788:	53                   	push   ebx
c000f789:	51                   	push   ecx
c000f78a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f790:	52                   	push   edx
c000f791:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f794:	83 c4 10             	add    esp,0x10
c000f797:	5a                   	pop    edx
c000f798:	5b                   	pop    ebx
c000f799:	5e                   	pop    esi
c000f79a:	c3                   	ret    
c000f79b:	90                   	nop

c000f79c <File::tell(unsigned long long*)>:
c000f79c:	83 ec 0c             	sub    esp,0xc
c000f79f:	b8 0b 00 00 00       	mov    eax,0xb
c000f7a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f7a8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f7af:	80 fa 19             	cmp    dl,0x19
c000f7b2:	77 34                	ja     c000f7e8 <File::tell(unsigned long long*)+0x4c>
c000f7b4:	8b 14 95 e0 48 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb720]
c000f7bb:	85 d2                	test   edx,edx
c000f7bd:	74 29                	je     c000f7e8 <File::tell(unsigned long long*)+0x4c>
c000f7bf:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f7c5:	85 d2                	test   edx,edx
c000f7c7:	74 1f                	je     c000f7e8 <File::tell(unsigned long long*)+0x4c>
c000f7c9:	b8 05 00 00 00       	mov    eax,0x5
c000f7ce:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f7d2:	74 14                	je     c000f7e8 <File::tell(unsigned long long*)+0x4c>
c000f7d4:	50                   	push   eax
c000f7d5:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f7db:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f7e1:	52                   	push   edx
c000f7e2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f7e5:	83 c4 10             	add    esp,0x10
c000f7e8:	83 c4 0c             	add    esp,0xc
c000f7eb:	c3                   	ret    

c000f7ec <File::rewind()>:
c000f7ec:	83 ec 10             	sub    esp,0x10
c000f7ef:	6a 00                	push   0x0
c000f7f1:	6a 00                	push   0x0
c000f7f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7f7:	e8 4a ff ff ff       	call   c000f746 <File::seek(unsigned long long)>
c000f7fc:	83 c4 1c             	add    esp,0x1c
c000f7ff:	c3                   	ret    

c000f800 <File::unlink()>:
c000f800:	83 ec 0c             	sub    esp,0xc
c000f803:	b8 0b 00 00 00       	mov    eax,0xb
c000f808:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f80c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f813:	80 f9 19             	cmp    cl,0x19
c000f816:	77 2f                	ja     c000f847 <File::unlink()+0x47>
c000f818:	8b 0c 8d e0 48 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb720]
c000f81f:	85 c9                	test   ecx,ecx
c000f821:	74 24                	je     c000f847 <File::unlink()+0x47>
c000f823:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f829:	85 c9                	test   ecx,ecx
c000f82b:	74 1a                	je     c000f847 <File::unlink()+0x47>
c000f82d:	b8 06 00 00 00       	mov    eax,0x6
c000f832:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f836:	75 0f                	jne    c000f847 <File::unlink()+0x47>
c000f838:	83 c2 0d             	add    edx,0xd
c000f83b:	50                   	push   eax
c000f83c:	50                   	push   eax
c000f83d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f83f:	52                   	push   edx
c000f840:	51                   	push   ecx
c000f841:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f844:	83 c4 10             	add    esp,0x10
c000f847:	83 c4 0c             	add    esp,0xc
c000f84a:	c3                   	ret    
c000f84b:	90                   	nop

c000f84c <File::rename(char const*)>:
c000f84c:	83 ec 0c             	sub    esp,0xc
c000f84f:	b8 0b 00 00 00       	mov    eax,0xb
c000f854:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f858:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f85f:	80 f9 19             	cmp    cl,0x19
c000f862:	77 32                	ja     c000f896 <File::rename(char const*)+0x4a>
c000f864:	8b 0c 8d e0 48 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb720]
c000f86b:	85 c9                	test   ecx,ecx
c000f86d:	74 27                	je     c000f896 <File::rename(char const*)+0x4a>
c000f86f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f875:	85 c9                	test   ecx,ecx
c000f877:	74 1d                	je     c000f896 <File::rename(char const*)+0x4a>
c000f879:	b8 06 00 00 00       	mov    eax,0x6
c000f87e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f882:	75 12                	jne    c000f896 <File::rename(char const*)+0x4a>
c000f884:	83 c2 0d             	add    edx,0xd
c000f887:	50                   	push   eax
c000f888:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f88a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f88e:	52                   	push   edx
c000f88f:	51                   	push   ecx
c000f890:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f893:	83 c4 10             	add    esp,0x10
c000f896:	83 c4 0c             	add    esp,0xc
c000f899:	c3                   	ret    

c000f89a <File::chfatattr(unsigned char, unsigned char)>:
c000f89a:	57                   	push   edi
c000f89b:	b8 0b 00 00 00       	mov    eax,0xb
c000f8a0:	56                   	push   esi
c000f8a1:	53                   	push   ebx
c000f8a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f8a6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f8aa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f8b1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f8b5:	80 f9 19             	cmp    cl,0x19
c000f8b8:	77 37                	ja     c000f8f1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f8ba:	8b 0c 8d e0 48 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb720]
c000f8c1:	85 c9                	test   ecx,ecx
c000f8c3:	74 2c                	je     c000f8f1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f8c5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f8cb:	85 c9                	test   ecx,ecx
c000f8cd:	74 22                	je     c000f8f1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f8cf:	b8 06 00 00 00       	mov    eax,0x6
c000f8d4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f8d8:	75 17                	jne    c000f8f1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f8da:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f8dc:	89 f0                	mov    eax,esi
c000f8de:	83 c2 0d             	add    edx,0xd
c000f8e1:	0f b6 f0             	movzx  esi,al
c000f8e4:	0f b6 db             	movzx  ebx,bl
c000f8e7:	56                   	push   esi
c000f8e8:	53                   	push   ebx
c000f8e9:	52                   	push   edx
c000f8ea:	51                   	push   ecx
c000f8eb:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000f8ee:	83 c4 10             	add    esp,0x10
c000f8f1:	5b                   	pop    ebx
c000f8f2:	5e                   	pop    esi
c000f8f3:	5f                   	pop    edi
c000f8f4:	c3                   	ret    
c000f8f5:	90                   	nop

c000f8f6 <File::exists()>:
c000f8f6:	83 ec 0c             	sub    esp,0xc
c000f8f9:	31 c0                	xor    eax,eax
c000f8fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f8ff:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f906:	80 f9 19             	cmp    cl,0x19
c000f909:	77 24                	ja     c000f92f <File::exists()+0x39>
c000f90b:	8b 0c 8d e0 48 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb720]
c000f912:	85 c9                	test   ecx,ecx
c000f914:	74 19                	je     c000f92f <File::exists()+0x39>
c000f916:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f91c:	85 c9                	test   ecx,ecx
c000f91e:	74 0f                	je     c000f92f <File::exists()+0x39>
c000f920:	83 c2 0d             	add    edx,0xd
c000f923:	50                   	push   eax
c000f924:	50                   	push   eax
c000f925:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f927:	52                   	push   edx
c000f928:	51                   	push   ecx
c000f929:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f92c:	83 c4 10             	add    esp,0x10
c000f92f:	83 c4 0c             	add    esp,0xc
c000f932:	c3                   	ret    
c000f933:	90                   	nop

c000f934 <File::stat(unsigned long long*, bool*)>:
c000f934:	56                   	push   esi
c000f935:	53                   	push   ebx
c000f936:	50                   	push   eax
c000f937:	b8 0b 00 00 00       	mov    eax,0xb
c000f93c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f940:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f944:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f94b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f94f:	80 f9 19             	cmp    cl,0x19
c000f952:	77 3d                	ja     c000f991 <File::stat(unsigned long long*, bool*)+0x5d>
c000f954:	8b 0c 8d e0 48 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb720]
c000f95b:	85 c9                	test   ecx,ecx
c000f95d:	74 32                	je     c000f991 <File::stat(unsigned long long*, bool*)+0x5d>
c000f95f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f965:	85 c9                	test   ecx,ecx
c000f967:	74 28                	je     c000f991 <File::stat(unsigned long long*, bool*)+0x5d>
c000f969:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f96b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f96f:	74 13                	je     c000f984 <File::stat(unsigned long long*, bool*)+0x50>
c000f971:	83 ec 04             	sub    esp,0x4
c000f974:	56                   	push   esi
c000f975:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000f97b:	51                   	push   ecx
c000f97c:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000f97f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000f982:	eb 0a                	jmp    c000f98e <File::stat(unsigned long long*, bool*)+0x5a>
c000f984:	53                   	push   ebx
c000f985:	83 c2 0d             	add    edx,0xd
c000f988:	56                   	push   esi
c000f989:	52                   	push   edx
c000f98a:	51                   	push   ecx
c000f98b:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000f98e:	83 c4 10             	add    esp,0x10
c000f991:	5a                   	pop    edx
c000f992:	5b                   	pop    ebx
c000f993:	5e                   	pop    esi
c000f994:	c3                   	ret    

c000f995 <getcwd(Process*, char*, int)>:
c000f995:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f999:	31 c0                	xor    eax,eax
c000f99b:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000f99e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000f9a2:	7d 15                	jge    c000f9b9 <getcwd(Process*, char*, int)+0x24>
c000f9a4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f9a8:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000f9af:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000f9b2:	84 c9                	test   cl,cl
c000f9b4:	74 06                	je     c000f9bc <getcwd(Process*, char*, int)+0x27>
c000f9b6:	40                   	inc    eax
c000f9b7:	eb e2                	jmp    c000f99b <getcwd(Process*, char*, int)+0x6>
c000f9b9:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000f9bc:	31 c0                	xor    eax,eax
c000f9be:	c3                   	ret    

c000f9bf <setcwd(Process*, char*)>:
c000f9bf:	55                   	push   ebp
c000f9c0:	57                   	push   edi
c000f9c1:	56                   	push   esi
c000f9c2:	53                   	push   ebx
c000f9c3:	81 ec 20 02 00 00    	sub    esp,0x220
c000f9c9:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000f9d0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000f9d6:	57                   	push   edi
c000f9d7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000f9de:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000f9e2:	56                   	push   esi
c000f9e3:	e8 92 fa ff ff       	call   c000f47a <standardiseFiles(char*, char const*, char const*)>
c000f9e8:	89 34 24             	mov    DWORD PTR [esp],esi
c000f9eb:	e8 e7 0c ff ff       	call   c00006d7 <strlen>
c000f9f0:	83 c4 10             	add    esp,0x10
c000f9f3:	83 f8 02             	cmp    eax,0x2
c000f9f6:	77 17                	ja     c000fa0f <setcwd(Process*, char*)+0x50>
c000f9f8:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000f9fd:	83 e8 41             	sub    eax,0x41
c000fa00:	83 f8 19             	cmp    eax,0x19
c000fa03:	76 24                	jbe    c000fa29 <setcwd(Process*, char*)+0x6a>
c000fa05:	b8 03 00 00 00       	mov    eax,0x3
c000fa0a:	e9 cb 00 00 00       	jmp    c000fada <setcwd(Process*, char*)+0x11b>
c000fa0f:	83 ec 0c             	sub    esp,0xc
c000fa12:	56                   	push   esi
c000fa13:	e8 bf 0c ff ff       	call   c00006d7 <strlen>
c000fa18:	83 c4 10             	add    esp,0x10
c000fa1b:	83 f8 03             	cmp    eax,0x3
c000fa1e:	75 33                	jne    c000fa53 <setcwd(Process*, char*)+0x94>
c000fa20:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000fa25:	75 2c                	jne    c000fa53 <setcwd(Process*, char*)+0x94>
c000fa27:	eb cf                	jmp    c000f9f8 <setcwd(Process*, char*)+0x39>
c000fa29:	8b 14 85 e0 48 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb720]
c000fa30:	b8 05 00 00 00       	mov    eax,0x5
c000fa35:	85 d2                	test   edx,edx
c000fa37:	0f 84 9d 00 00 00    	je     c000fada <setcwd(Process*, char*)+0x11b>
c000fa3d:	b8 06 00 00 00       	mov    eax,0x6
c000fa42:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fa49:	0f 84 8b 00 00 00    	je     c000fada <setcwd(Process*, char*)+0x11b>
c000fa4f:	51                   	push   ecx
c000fa50:	51                   	push   ecx
c000fa51:	eb 7b                	jmp    c000face <setcwd(Process*, char*)+0x10f>
c000fa53:	83 ec 0c             	sub    esp,0xc
c000fa56:	68 14 01 00 00       	push   0x114
c000fa5b:	e8 a6 f5 ff ff       	call   c000f006 <operator new(unsigned long)>
c000fa60:	83 c4 0c             	add    esp,0xc
c000fa63:	89 c3                	mov    ebx,eax
c000fa65:	55                   	push   ebp
c000fa66:	56                   	push   esi
c000fa67:	50                   	push   eax
c000fa68:	e8 b7 fb ff ff       	call   c000f624 <File::File(char const*, Process*)>
c000fa6d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000fa72:	83 c4 0c             	add    esp,0xc
c000fa75:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000fa79:	50                   	push   eax
c000fa7a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fa7e:	50                   	push   eax
c000fa7f:	53                   	push   ebx
c000fa80:	e8 af fe ff ff       	call   c000f934 <File::stat(unsigned long long*, bool*)>
c000fa85:	83 c4 10             	add    esp,0x10
c000fa88:	8b 13                	mov    edx,DWORD PTR [ebx]
c000fa8a:	83 f8 02             	cmp    eax,0x2
c000fa8d:	75 09                	jne    c000fa98 <setcwd(Process*, char*)+0xd9>
c000fa8f:	83 ec 0c             	sub    esp,0xc
c000fa92:	53                   	push   ebx
c000fa93:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fa96:	eb 0d                	jmp    c000faa5 <setcwd(Process*, char*)+0xe6>
c000fa98:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000fa9b:	85 c0                	test   eax,eax
c000fa9d:	74 10                	je     c000faaf <setcwd(Process*, char*)+0xf0>
c000fa9f:	83 ec 0c             	sub    esp,0xc
c000faa2:	53                   	push   ebx
c000faa3:	ff d2                	call   edx
c000faa5:	83 c4 10             	add    esp,0x10
c000faa8:	b8 01 00 00 00       	mov    eax,0x1
c000faad:	eb 2b                	jmp    c000fada <setcwd(Process*, char*)+0x11b>
c000faaf:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000fab4:	75 10                	jne    c000fac6 <setcwd(Process*, char*)+0x107>
c000fab6:	83 ec 0c             	sub    esp,0xc
c000fab9:	53                   	push   ebx
c000faba:	ff d2                	call   edx
c000fabc:	83 c4 10             	add    esp,0x10
c000fabf:	b8 02 00 00 00       	mov    eax,0x2
c000fac4:	eb 14                	jmp    c000fada <setcwd(Process*, char*)+0x11b>
c000fac6:	83 ec 0c             	sub    esp,0xc
c000fac9:	53                   	push   ebx
c000faca:	ff d2                	call   edx
c000facc:	58                   	pop    eax
c000facd:	5a                   	pop    edx
c000face:	56                   	push   esi
c000facf:	57                   	push   edi
c000fad0:	e8 84 0c ff ff       	call   c0000759 <strcpy>
c000fad5:	83 c4 10             	add    esp,0x10
c000fad8:	31 c0                	xor    eax,eax
c000fada:	81 c4 1c 02 00 00    	add    esp,0x21c
c000fae0:	5b                   	pop    ebx
c000fae1:	5e                   	pop    esi
c000fae2:	5f                   	pop    edi
c000fae3:	5d                   	pop    ebp
c000fae4:	c3                   	ret    
c000fae5:	90                   	nop

c000fae6 <Directory::Directory(char const*, Process*)>:
c000fae6:	83 ec 0c             	sub    esp,0xc
c000fae9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000faed:	83 ec 08             	sub    esp,0x8
c000faf0:	6a 00                	push   0x0
c000faf2:	50                   	push   eax
c000faf3:	e8 28 e2 ff ff       	call   c000dd20 <UnixFile::UnixFile(int)>
c000faf8:	83 c4 10             	add    esp,0x10
c000fafb:	ba 30 17 02 c0       	mov    edx,0xc0021730
c000fb00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb04:	89 10                	mov    DWORD PTR [eax],edx
c000fb06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fb0a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fb10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb14:	83 c0 0d             	add    eax,0xd
c000fb17:	83 ec 04             	sub    esp,0x4
c000fb1a:	52                   	push   edx
c000fb1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb1f:	50                   	push   eax
c000fb20:	e8 55 f9 ff ff       	call   c000f47a <standardiseFiles(char*, char const*, char const*)>
c000fb25:	83 c4 10             	add    esp,0x10
c000fb28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb2c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fb2f:	8d 50 bf             	lea    edx,[eax-0x41]
c000fb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb36:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fb3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb40:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fb44:	90                   	nop
c000fb45:	83 c4 0c             	add    esp,0xc
c000fb48:	c3                   	ret    
c000fb49:	90                   	nop

c000fb4a <Directory::open()>:
c000fb4a:	53                   	push   ebx
c000fb4b:	b8 0b 00 00 00       	mov    eax,0xb
c000fb50:	83 ec 08             	sub    esp,0x8
c000fb53:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb57:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fb5e:	80 fa 19             	cmp    dl,0x19
c000fb61:	77 3d                	ja     c000fba0 <Directory::open()+0x56>
c000fb63:	8b 14 95 e0 48 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb720]
c000fb6a:	85 d2                	test   edx,edx
c000fb6c:	74 32                	je     c000fba0 <Directory::open()+0x56>
c000fb6e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fb74:	85 d2                	test   edx,edx
c000fb76:	74 28                	je     c000fba0 <Directory::open()+0x56>
c000fb78:	b8 06 00 00 00       	mov    eax,0x6
c000fb7d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fb81:	75 1d                	jne    c000fba0 <Directory::open()+0x56>
c000fb83:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fb89:	50                   	push   eax
c000fb8a:	8b 02                	mov    eax,DWORD PTR [edx]
c000fb8c:	51                   	push   ecx
c000fb8d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fb90:	51                   	push   ecx
c000fb91:	52                   	push   edx
c000fb92:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fb95:	83 c4 10             	add    esp,0x10
c000fb98:	85 c0                	test   eax,eax
c000fb9a:	75 04                	jne    c000fba0 <Directory::open()+0x56>
c000fb9c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fba0:	83 c4 08             	add    esp,0x8
c000fba3:	5b                   	pop    ebx
c000fba4:	c3                   	ret    
c000fba5:	90                   	nop

c000fba6 <Directory::close()>:
c000fba6:	53                   	push   ebx
c000fba7:	b8 0b 00 00 00       	mov    eax,0xb
c000fbac:	83 ec 08             	sub    esp,0x8
c000fbaf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fbb3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fbba:	80 fa 19             	cmp    dl,0x19
c000fbbd:	77 41                	ja     c000fc00 <Directory::close()+0x5a>
c000fbbf:	8b 1c 95 e0 48 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb720]
c000fbc6:	85 db                	test   ebx,ebx
c000fbc8:	74 36                	je     c000fc00 <Directory::close()+0x5a>
c000fbca:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fbd1:	74 2d                	je     c000fc00 <Directory::close()+0x5a>
c000fbd3:	b8 05 00 00 00       	mov    eax,0x5
c000fbd8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fbdc:	74 22                	je     c000fc00 <Directory::close()+0x5a>
c000fbde:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fbe2:	8b 04 95 e0 48 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb720]
c000fbe9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fbef:	53                   	push   ebx
c000fbf0:	53                   	push   ebx
c000fbf1:	8b 10                	mov    edx,DWORD PTR [eax]
c000fbf3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000fbf9:	50                   	push   eax
c000fbfa:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000fbfd:	83 c4 10             	add    esp,0x10
c000fc00:	83 c4 08             	add    esp,0x8
c000fc03:	5b                   	pop    ebx
c000fc04:	c3                   	ret    
c000fc05:	90                   	nop

c000fc06 <Directory::unlink()>:
c000fc06:	83 ec 0c             	sub    esp,0xc
c000fc09:	b8 0b 00 00 00       	mov    eax,0xb
c000fc0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fc12:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fc19:	80 f9 19             	cmp    cl,0x19
c000fc1c:	77 2f                	ja     c000fc4d <Directory::unlink()+0x47>
c000fc1e:	8b 0c 8d e0 48 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb720]
c000fc25:	85 c9                	test   ecx,ecx
c000fc27:	74 24                	je     c000fc4d <Directory::unlink()+0x47>
c000fc29:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fc2f:	85 c9                	test   ecx,ecx
c000fc31:	74 1a                	je     c000fc4d <Directory::unlink()+0x47>
c000fc33:	b8 06 00 00 00       	mov    eax,0x6
c000fc38:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fc3c:	75 0f                	jne    c000fc4d <Directory::unlink()+0x47>
c000fc3e:	83 c2 0d             	add    edx,0xd
c000fc41:	50                   	push   eax
c000fc42:	50                   	push   eax
c000fc43:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fc45:	52                   	push   edx
c000fc46:	51                   	push   ecx
c000fc47:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fc4a:	83 c4 10             	add    esp,0x10
c000fc4d:	83 c4 0c             	add    esp,0xc
c000fc50:	c3                   	ret    
c000fc51:	90                   	nop

c000fc52 <Directory::rename(char const*)>:
c000fc52:	83 ec 0c             	sub    esp,0xc
c000fc55:	b8 0b 00 00 00       	mov    eax,0xb
c000fc5a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fc5e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fc65:	80 f9 19             	cmp    cl,0x19
c000fc68:	77 32                	ja     c000fc9c <Directory::rename(char const*)+0x4a>
c000fc6a:	8b 0c 8d e0 48 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb720]
c000fc71:	85 c9                	test   ecx,ecx
c000fc73:	74 27                	je     c000fc9c <Directory::rename(char const*)+0x4a>
c000fc75:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fc7b:	85 c9                	test   ecx,ecx
c000fc7d:	74 1d                	je     c000fc9c <Directory::rename(char const*)+0x4a>
c000fc7f:	b8 06 00 00 00       	mov    eax,0x6
c000fc84:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fc88:	75 12                	jne    c000fc9c <Directory::rename(char const*)+0x4a>
c000fc8a:	83 c2 0d             	add    edx,0xd
c000fc8d:	50                   	push   eax
c000fc8e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fc90:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc94:	52                   	push   edx
c000fc95:	51                   	push   ecx
c000fc96:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fc99:	83 c4 10             	add    esp,0x10
c000fc9c:	83 c4 0c             	add    esp,0xc
c000fc9f:	c3                   	ret    

c000fca0 <Directory::exists()>:
c000fca0:	83 ec 0c             	sub    esp,0xc
c000fca3:	31 c0                	xor    eax,eax
c000fca5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fca9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fcb0:	80 f9 19             	cmp    cl,0x19
c000fcb3:	77 24                	ja     c000fcd9 <Directory::exists()+0x39>
c000fcb5:	8b 0c 8d e0 48 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb720]
c000fcbc:	85 c9                	test   ecx,ecx
c000fcbe:	74 19                	je     c000fcd9 <Directory::exists()+0x39>
c000fcc0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fcc6:	85 c9                	test   ecx,ecx
c000fcc8:	74 0f                	je     c000fcd9 <Directory::exists()+0x39>
c000fcca:	83 c2 0d             	add    edx,0xd
c000fccd:	50                   	push   eax
c000fcce:	50                   	push   eax
c000fccf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fcd1:	52                   	push   edx
c000fcd2:	51                   	push   ecx
c000fcd3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fcd6:	83 c4 10             	add    esp,0x10
c000fcd9:	83 c4 0c             	add    esp,0xc
c000fcdc:	c3                   	ret    
c000fcdd:	90                   	nop

c000fcde <Directory::read(dirent*)>:
c000fcde:	83 ec 1c             	sub    esp,0x1c
c000fce1:	b8 0b 00 00 00       	mov    eax,0xb
c000fce6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fcea:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fcf1:	80 fa 19             	cmp    dl,0x19
c000fcf4:	77 30                	ja     c000fd26 <Directory::read(dirent*)+0x48>
c000fcf6:	8b 14 95 e0 48 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb720]
c000fcfd:	85 d2                	test   edx,edx
c000fcff:	74 25                	je     c000fd26 <Directory::read(dirent*)+0x48>
c000fd01:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fd08:	74 1c                	je     c000fd26 <Directory::read(dirent*)+0x48>
c000fd0a:	83 ec 0c             	sub    esp,0xc
c000fd0d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd0f:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fd13:	52                   	push   edx
c000fd14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fd18:	6a 00                	push   0x0
c000fd1a:	68 10 01 00 00       	push   0x110
c000fd1f:	51                   	push   ecx
c000fd20:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fd23:	83 c4 20             	add    esp,0x20
c000fd26:	83 c4 1c             	add    esp,0x1c
c000fd29:	c3                   	ret    

c000fd2a <Directory::create()>:
c000fd2a:	83 ec 0c             	sub    esp,0xc
c000fd2d:	b8 0b 00 00 00       	mov    eax,0xb
c000fd32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd36:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd3d:	80 f9 19             	cmp    cl,0x19
c000fd40:	77 2f                	ja     c000fd71 <Directory::create()+0x47>
c000fd42:	8b 0c 8d e0 48 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb720]
c000fd49:	85 c9                	test   ecx,ecx
c000fd4b:	74 24                	je     c000fd71 <Directory::create()+0x47>
c000fd4d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd53:	85 c9                	test   ecx,ecx
c000fd55:	74 1a                	je     c000fd71 <Directory::create()+0x47>
c000fd57:	b8 06 00 00 00       	mov    eax,0x6
c000fd5c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fd60:	75 0f                	jne    c000fd71 <Directory::create()+0x47>
c000fd62:	83 c2 0d             	add    edx,0xd
c000fd65:	50                   	push   eax
c000fd66:	50                   	push   eax
c000fd67:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd69:	52                   	push   edx
c000fd6a:	51                   	push   ecx
c000fd6b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fd6e:	83 c4 10             	add    esp,0x10
c000fd71:	83 c4 0c             	add    esp,0xc
c000fd74:	c3                   	ret    
c000fd75:	90                   	nop

c000fd76 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fd76:	b8 0a 00 00 00       	mov    eax,0xa
c000fd7b:	c3                   	ret    

c000fd7c <Bus::Bus(char const*)>:
c000fd7c:	83 ec 0c             	sub    esp,0xc
c000fd7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd83:	83 ec 08             	sub    esp,0x8
c000fd86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd8a:	50                   	push   eax
c000fd8b:	e8 60 09 00 00       	call   c00106f0 <Device::Device(char const*)>
c000fd90:	83 c4 10             	add    esp,0x10
c000fd93:	ba 4c 17 02 c0       	mov    edx,0xc002174c
c000fd98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd9c:	89 10                	mov    DWORD PTR [eax],edx
c000fd9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fda2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fdac:	90                   	nop
c000fdad:	83 c4 0c             	add    esp,0xc
c000fdb0:	c3                   	ret    
c000fdb1:	90                   	nop

c000fdb2 <Bus::~Bus()>:
c000fdb2:	83 ec 0c             	sub    esp,0xc
c000fdb5:	ba 4c 17 02 c0       	mov    edx,0xc002174c
c000fdba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdbe:	89 10                	mov    DWORD PTR [eax],edx
c000fdc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdc4:	83 ec 0c             	sub    esp,0xc
c000fdc7:	50                   	push   eax
c000fdc8:	e8 d5 05 00 00       	call   c00103a2 <Device::~Device()>
c000fdcd:	83 c4 10             	add    esp,0x10
c000fdd0:	90                   	nop
c000fdd1:	83 c4 0c             	add    esp,0xc
c000fdd4:	c3                   	ret    
c000fdd5:	90                   	nop

c000fdd6 <Bus::~Bus()>:
c000fdd6:	83 ec 0c             	sub    esp,0xc
c000fdd9:	83 ec 0c             	sub    esp,0xc
c000fddc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fde0:	e8 cd ff ff ff       	call   c000fdb2 <Bus::~Bus()>
c000fde5:	83 c4 10             	add    esp,0x10
c000fde8:	83 ec 08             	sub    esp,0x8
c000fdeb:	68 58 01 00 00       	push   0x158
c000fdf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdf4:	e8 1c f2 ff ff       	call   c000f015 <operator delete(void*, unsigned long)>
c000fdf9:	83 c4 10             	add    esp,0x10
c000fdfc:	83 c4 0c             	add    esp,0xc
c000fdff:	c3                   	ret    

c000fe00 <Buzzer::Buzzer(char const*)>:
c000fe00:	83 ec 0c             	sub    esp,0xc
c000fe03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe07:	83 ec 08             	sub    esp,0x8
c000fe0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe0e:	50                   	push   eax
c000fe0f:	e8 dc 08 00 00       	call   c00106f0 <Device::Device(char const*)>
c000fe14:	83 c4 10             	add    esp,0x10
c000fe17:	ba 78 17 02 c0       	mov    edx,0xc0021778
c000fe1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe20:	89 10                	mov    DWORD PTR [eax],edx
c000fe22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe26:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000fe30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe34:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000fe3e:	90                   	nop
c000fe3f:	83 c4 0c             	add    esp,0xc
c000fe42:	c3                   	ret    
c000fe43:	90                   	nop

c000fe44 <Buzzer::~Buzzer()>:
c000fe44:	83 ec 0c             	sub    esp,0xc
c000fe47:	ba 78 17 02 c0       	mov    edx,0xc0021778
c000fe4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe50:	89 10                	mov    DWORD PTR [eax],edx
c000fe52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe56:	83 ec 0c             	sub    esp,0xc
c000fe59:	50                   	push   eax
c000fe5a:	e8 43 05 00 00       	call   c00103a2 <Device::~Device()>
c000fe5f:	83 c4 10             	add    esp,0x10
c000fe62:	90                   	nop
c000fe63:	83 c4 0c             	add    esp,0xc
c000fe66:	c3                   	ret    
c000fe67:	90                   	nop

c000fe68 <Buzzer::~Buzzer()>:
c000fe68:	83 ec 0c             	sub    esp,0xc
c000fe6b:	83 ec 0c             	sub    esp,0xc
c000fe6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe72:	e8 cd ff ff ff       	call   c000fe44 <Buzzer::~Buzzer()>
c000fe77:	83 c4 10             	add    esp,0x10
c000fe7a:	83 ec 08             	sub    esp,0x8
c000fe7d:	68 5c 01 00 00       	push   0x15c
c000fe82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe86:	e8 8a f1 ff ff       	call   c000f015 <operator delete(void*, unsigned long)>
c000fe8b:	83 c4 10             	add    esp,0x10
c000fe8e:	83 c4 0c             	add    esp,0xc
c000fe91:	c3                   	ret    

c000fe92 <Buzzer::stop()>:
c000fe92:	83 ec 14             	sub    esp,0x14
c000fe95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fe99:	8b 10                	mov    edx,DWORD PTR [eax]
c000fe9b:	6a 00                	push   0x0
c000fe9d:	50                   	push   eax
c000fe9e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fea1:	83 c4 1c             	add    esp,0x1c
c000fea4:	c3                   	ret    

c000fea5 <beepThread(void*)>:
c000fea5:	53                   	push   ebx
c000fea6:	83 ec 08             	sub    esp,0x8
c000fea9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fead:	e8 2e 89 00 00       	call   c00187e0 <unlockScheduler()>
c000feb2:	b8 40 42 0f 00       	mov    eax,0xf4240
c000feb7:	52                   	push   edx
c000feb8:	52                   	push   edx
c000feb9:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000febf:	52                   	push   edx
c000fec0:	50                   	push   eax
c000fec1:	e8 60 8e 00 00       	call   c0018d26 <nanoSleep(unsigned long long)>
c000fec6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fec9:	e8 c4 ff ff ff       	call   c000fe92 <Buzzer::stop()>
c000fece:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000fed6:	83 c4 18             	add    esp,0x18
c000fed9:	5b                   	pop    ebx
c000feda:	e9 8d 8d 00 00       	jmp    c0018c6c <blockTask(TaskState)>
c000fedf:	90                   	nop

c000fee0 <Buzzer::beep(int, int, bool)>:
c000fee0:	57                   	push   edi
c000fee1:	56                   	push   esi
c000fee2:	53                   	push   ebx
c000fee3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fee7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000feeb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000feef:	52                   	push   edx
c000fef0:	52                   	push   edx
c000fef1:	8b 06                	mov    eax,DWORD PTR [esi]
c000fef3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fef7:	56                   	push   esi
c000fef8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000fefb:	83 c4 10             	add    esp,0x10
c000fefe:	89 f8                	mov    eax,edi
c000ff00:	84 c0                	test   al,al
c000ff02:	74 1f                	je     c000ff23 <Buzzer::beep(int, int, bool)+0x43>
c000ff04:	50                   	push   eax
c000ff05:	50                   	push   eax
c000ff06:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000ff0c:	99                   	cdq    
c000ff0d:	52                   	push   edx
c000ff0e:	50                   	push   eax
c000ff0f:	e8 12 8e 00 00       	call   c0018d26 <nanoSleep(unsigned long long)>
c000ff14:	83 c4 10             	add    esp,0x10
c000ff17:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000ff1b:	5b                   	pop    ebx
c000ff1c:	5e                   	pop    esi
c000ff1d:	5f                   	pop    edi
c000ff1e:	e9 6f ff ff ff       	jmp    c000fe92 <Buzzer::stop()>
c000ff23:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000ff29:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c000ff2e:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000ff36:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000ff3a:	c7 44 24 14 a5 fe 00 c0 	mov    DWORD PTR [esp+0x14],0xc000fea5
c000ff42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ff46:	5b                   	pop    ebx
c000ff47:	5e                   	pop    esi
c000ff48:	5f                   	pop    edi
c000ff49:	e9 ba 89 00 00       	jmp    c0018908 <Process::createThread(void (*)(void*), void*, int)>

c000ff4e <loadClockSettings()>:
c000ff4e:	c7 05 54 44 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0024454,0xa
c000ff58:	c6 05 51 44 02 c0 00 	mov    BYTE PTR ds:0xc0024451,0x0
c000ff5f:	c6 05 50 44 02 c0 01 	mov    BYTE PTR ds:0xc0024450,0x1
c000ff66:	c3                   	ret    
c000ff67:	90                   	nop

c000ff68 <Clock::Clock(char const*)>:
c000ff68:	83 ec 0c             	sub    esp,0xc
c000ff6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff6f:	83 ec 08             	sub    esp,0x8
c000ff72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff76:	50                   	push   eax
c000ff77:	e8 74 07 00 00       	call   c00106f0 <Device::Device(char const*)>
c000ff7c:	83 c4 10             	add    esp,0x10
c000ff7f:	ba a8 17 02 c0       	mov    edx,0xc00217a8
c000ff84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff88:	89 10                	mov    DWORD PTR [eax],edx
c000ff8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff8e:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000ff98:	90                   	nop
c000ff99:	83 c4 0c             	add    esp,0xc
c000ff9c:	c3                   	ret    
c000ff9d:	90                   	nop

c000ff9e <Clock::~Clock()>:
c000ff9e:	83 ec 0c             	sub    esp,0xc
c000ffa1:	ba a8 17 02 c0       	mov    edx,0xc00217a8
c000ffa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffaa:	89 10                	mov    DWORD PTR [eax],edx
c000ffac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffb0:	83 ec 0c             	sub    esp,0xc
c000ffb3:	50                   	push   eax
c000ffb4:	e8 e9 03 00 00       	call   c00103a2 <Device::~Device()>
c000ffb9:	83 c4 10             	add    esp,0x10
c000ffbc:	90                   	nop
c000ffbd:	83 c4 0c             	add    esp,0xc
c000ffc0:	c3                   	ret    
c000ffc1:	90                   	nop

c000ffc2 <Clock::~Clock()>:
c000ffc2:	83 ec 0c             	sub    esp,0xc
c000ffc5:	83 ec 0c             	sub    esp,0xc
c000ffc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffcc:	e8 cd ff ff ff       	call   c000ff9e <Clock::~Clock()>
c000ffd1:	83 c4 10             	add    esp,0x10
c000ffd4:	83 ec 08             	sub    esp,0x8
c000ffd7:	68 58 01 00 00       	push   0x158
c000ffdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffe0:	e8 30 f0 ff ff       	call   c000f015 <operator delete(void*, unsigned long)>
c000ffe5:	83 c4 10             	add    esp,0x10
c000ffe8:	83 c4 0c             	add    esp,0xc
c000ffeb:	c3                   	ret    

c000ffec <Clock::timeInSecondsLocal()>:
c000ffec:	53                   	push   ebx
c000ffed:	83 ec 14             	sub    esp,0x14
c000fff0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fff4:	8b 10                	mov    edx,DWORD PTR [eax]
c000fff6:	50                   	push   eax
c000fff7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fffa:	0f b6 0d 50 44 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024450
c0010001:	03 0d 54 44 02 c0    	add    ecx,DWORD PTR ds:0xc0024454
c0010007:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001000d:	89 cb                	mov    ebx,ecx
c001000f:	c1 fb 1f             	sar    ebx,0x1f
c0010012:	01 c8                	add    eax,ecx
c0010014:	11 da                	adc    edx,ebx
c0010016:	83 c4 10             	add    esp,0x10
c0010019:	31 c9                	xor    ecx,ecx
c001001b:	80 3d 51 44 02 c0 00 	cmp    BYTE PTR ds:0xc0024451,0x0
c0010022:	74 05                	je     c0010029 <Clock::timeInSecondsLocal()+0x3d>
c0010024:	b9 08 07 00 00       	mov    ecx,0x708
c0010029:	31 db                	xor    ebx,ebx
c001002b:	01 c8                	add    eax,ecx
c001002d:	11 da                	adc    edx,ebx
c001002f:	83 c4 08             	add    esp,0x8
c0010032:	5b                   	pop    ebx
c0010033:	c3                   	ret    

c0010034 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0010034:	57                   	push   edi
c0010035:	56                   	push   esi
c0010036:	53                   	push   ebx
c0010037:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001003b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001003f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010041:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010045:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0010048:	0f b6 05 50 44 02 c0 	movzx  eax,BYTE PTR ds:0xc0024450
c001004f:	03 05 54 44 02 c0    	add    eax,DWORD PTR ds:0xc0024454
c0010055:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001005b:	99                   	cdq    
c001005c:	29 c6                	sub    esi,eax
c001005e:	19 d7                	sbb    edi,edx
c0010060:	89 f0                	mov    eax,esi
c0010062:	89 fa                	mov    edx,edi
c0010064:	31 f6                	xor    esi,esi
c0010066:	80 3d 51 44 02 c0 00 	cmp    BYTE PTR ds:0xc0024451,0x0
c001006d:	74 05                	je     c0010074 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001006f:	be 08 07 00 00       	mov    esi,0x708
c0010074:	31 ff                	xor    edi,edi
c0010076:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001007a:	29 f0                	sub    eax,esi
c001007c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010080:	19 fa                	sbb    edx,edi
c0010082:	89 d8                	mov    eax,ebx
c0010084:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010088:	5b                   	pop    ebx
c0010089:	5e                   	pop    esi
c001008a:	5f                   	pop    edi
c001008b:	ff e0                	jmp    eax

c001008d <datetimeToSeconds(datetime_t)>:
c001008d:	55                   	push   ebp
c001008e:	57                   	push   edi
c001008f:	56                   	push   esi
c0010090:	53                   	push   ebx
c0010091:	83 ec 14             	sub    esp,0x14
c0010094:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010098:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001009c:	89 d3                	mov    ebx,edx
c001009e:	0f b6 c6             	movzx  eax,dh
c00100a1:	c1 eb 10             	shr    ebx,0x10
c00100a4:	48                   	dec    eax
c00100a5:	66 81 eb 6c 07       	sub    bx,0x76c
c00100aa:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00100ae:	0f b6 f5             	movzx  esi,ch
c00100b1:	89 cf                	mov    edi,ecx
c00100b3:	6b f6 3c             	imul   esi,esi,0x3c
c00100b6:	c1 ef 10             	shr    edi,0x10
c00100b9:	0f b6 c9             	movzx  ecx,cl
c00100bc:	89 f8                	mov    eax,edi
c00100be:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00100c4:	0f b6 f8             	movzx  edi,al
c00100c7:	0f b6 d2             	movzx  edx,dl
c00100ca:	01 fe                	add    esi,edi
c00100cc:	01 f1                	add    ecx,esi
c00100ce:	0f b7 f3             	movzx  esi,bx
c00100d1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00100d5:	c1 f9 1f             	sar    ecx,0x1f
c00100d8:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00100dd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00100e1:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00100e6:	8b 0c 8d e0 17 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde820]
c00100ed:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c00100f1:	76 29                	jbe    c001011c <datetimeToSeconds(datetime_t)+0x8f>
c00100f3:	f6 c3 03             	test   bl,0x3
c00100f6:	75 24                	jne    c001011c <datetimeToSeconds(datetime_t)+0x8f>
c00100f8:	31 d2                	xor    edx,edx
c00100fa:	bf 64 00 00 00       	mov    edi,0x64
c00100ff:	89 d8                	mov    eax,ebx
c0010101:	66 f7 f7             	div    di
c0010104:	66 85 d2             	test   dx,dx
c0010107:	75 12                	jne    c001011b <datetimeToSeconds(datetime_t)+0x8e>
c0010109:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001010f:	bf 90 01 00 00       	mov    edi,0x190
c0010114:	99                   	cdq    
c0010115:	f7 ff                	idiv   edi
c0010117:	85 d2                	test   edx,edx
c0010119:	75 01                	jne    c001011c <datetimeToSeconds(datetime_t)+0x8f>
c001011b:	41                   	inc    ecx
c001011c:	66 83 fb 46          	cmp    bx,0x46
c0010120:	76 45                	jbe    c0010167 <datetimeToSeconds(datetime_t)+0xda>
c0010122:	bb 46 00 00 00       	mov    ebx,0x46
c0010127:	bf 64 00 00 00       	mov    edi,0x64
c001012c:	bd 90 01 00 00       	mov    ebp,0x190
c0010131:	b8 6d 01 00 00       	mov    eax,0x16d
c0010136:	f6 c3 03             	test   bl,0x3
c0010139:	75 23                	jne    c001015e <datetimeToSeconds(datetime_t)+0xd1>
c001013b:	89 d8                	mov    eax,ebx
c001013d:	99                   	cdq    
c001013e:	f7 ff                	idiv   edi
c0010140:	b8 6e 01 00 00       	mov    eax,0x16e
c0010145:	85 d2                	test   edx,edx
c0010147:	75 15                	jne    c001015e <datetimeToSeconds(datetime_t)+0xd1>
c0010149:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001014f:	99                   	cdq    
c0010150:	f7 fd                	idiv   ebp
c0010152:	83 fa 01             	cmp    edx,0x1
c0010155:	19 c0                	sbb    eax,eax
c0010157:	f7 d0                	not    eax
c0010159:	05 6e 01 00 00       	add    eax,0x16e
c001015e:	01 c1                	add    ecx,eax
c0010160:	43                   	inc    ebx
c0010161:	39 f3                	cmp    ebx,esi
c0010163:	7c cc                	jl     c0010131 <datetimeToSeconds(datetime_t)+0xa4>
c0010165:	eb 35                	jmp    c001019c <datetimeToSeconds(datetime_t)+0x10f>
c0010167:	74 33                	je     c001019c <datetimeToSeconds(datetime_t)+0x10f>
c0010169:	b8 45 00 00 00       	mov    eax,0x45
c001016e:	89 c2                	mov    edx,eax
c0010170:	83 e2 03             	and    edx,0x3
c0010173:	39 f0                	cmp    eax,esi
c0010175:	7e 0f                	jle    c0010186 <datetimeToSeconds(datetime_t)+0xf9>
c0010177:	83 fa 01             	cmp    edx,0x1
c001017a:	19 d2                	sbb    edx,edx
c001017c:	48                   	dec    eax
c001017d:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0010184:	eb e8                	jmp    c001016e <datetimeToSeconds(datetime_t)+0xe1>
c0010186:	b8 6d 01 00 00       	mov    eax,0x16d
c001018b:	85 d2                	test   edx,edx
c001018d:	75 0b                	jne    c001019a <datetimeToSeconds(datetime_t)+0x10d>
c001018f:	66 83 fb 01          	cmp    bx,0x1
c0010193:	19 c0                	sbb    eax,eax
c0010195:	05 6e 01 00 00       	add    eax,0x16e
c001019a:	29 c1                	sub    ecx,eax
c001019c:	b8 80 51 01 00       	mov    eax,0x15180
c00101a1:	f7 e9                	imul   ecx
c00101a3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00101a7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00101ab:	83 c4 14             	add    esp,0x14
c00101ae:	5b                   	pop    ebx
c00101af:	5e                   	pop    esi
c00101b0:	5f                   	pop    edi
c00101b1:	5d                   	pop    ebp
c00101b2:	c3                   	ret    
c00101b3:	90                   	nop

c00101b4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00101b4:	57                   	push   edi
c00101b5:	56                   	push   esi
c00101b6:	53                   	push   ebx
c00101b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101bb:	8b 06                	mov    eax,DWORD PTR [esi]
c00101bd:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00101c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101c8:	e8 c0 fe ff ff       	call   c001008d <datetimeToSeconds(datetime_t)>
c00101cd:	59                   	pop    ecx
c00101ce:	0f b6 0d 50 44 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024450
c00101d5:	5b                   	pop    ebx
c00101d6:	03 0d 54 44 02 c0    	add    ecx,DWORD PTR ds:0xc0024454
c00101dc:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00101e2:	89 cb                	mov    ebx,ecx
c00101e4:	c1 fb 1f             	sar    ebx,0x1f
c00101e7:	29 c8                	sub    eax,ecx
c00101e9:	19 da                	sbb    edx,ebx
c00101eb:	31 c9                	xor    ecx,ecx
c00101ed:	80 3d 51 44 02 c0 00 	cmp    BYTE PTR ds:0xc0024451,0x0
c00101f4:	74 05                	je     c00101fb <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00101f6:	b9 08 07 00 00       	mov    ecx,0x708
c00101fb:	31 db                	xor    ebx,ebx
c00101fd:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0010201:	29 c8                	sub    eax,ecx
c0010203:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010207:	19 da                	sbb    edx,ebx
c0010209:	89 f8                	mov    eax,edi
c001020b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001020f:	5b                   	pop    ebx
c0010210:	5e                   	pop    esi
c0010211:	5f                   	pop    edi
c0010212:	ff e0                	jmp    eax

c0010214 <secondsToDatetime(unsigned long long)>:
c0010214:	55                   	push   ebp
c0010215:	57                   	push   edi
c0010216:	56                   	push   esi
c0010217:	53                   	push   ebx
c0010218:	83 ec 1c             	sub    esp,0x1c
c001021b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001021f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010223:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0010227:	6a 00                	push   0x0
c0010229:	68 80 51 01 00       	push   0x15180
c001022e:	55                   	push   ebp
c001022f:	57                   	push   edi
c0010230:	e8 27 ef 00 00       	call   c001f15c <__udivdi3>
c0010235:	83 c4 10             	add    esp,0x10
c0010238:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001023e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010242:	6a 00                	push   0x0
c0010244:	68 80 51 01 00       	push   0x15180
c0010249:	55                   	push   ebp
c001024a:	57                   	push   edi
c001024b:	bf 10 0e 00 00       	mov    edi,0xe10
c0010250:	e8 07 f0 00 00       	call   c001f25c <__umoddi3>
c0010255:	83 c4 10             	add    esp,0x10
c0010258:	99                   	cdq    
c0010259:	f7 ff                	idiv   edi
c001025b:	bf 3c 00 00 00       	mov    edi,0x3c
c0010260:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0010263:	89 d0                	mov    eax,edx
c0010265:	99                   	cdq    
c0010266:	f7 ff                	idiv   edi
c0010268:	85 db                	test   ebx,ebx
c001026a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001026d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0010270:	79 11                	jns    c0010283 <secondsToDatetime(unsigned long long)+0x6f>
c0010272:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010276:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001027c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0010281:	eb 07                	jmp    c001028a <secondsToDatetime(unsigned long long)+0x76>
c0010283:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0010288:	89 d8                	mov    eax,ebx
c001028a:	bf b4 05 00 00       	mov    edi,0x5b4
c001028f:	99                   	cdq    
c0010290:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0010295:	f7 f9                	idiv   ecx
c0010297:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001029c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00102a0:	31 d2                	xor    edx,edx
c00102a2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00102aa:	01 c3                	add    ebx,eax
c00102ac:	89 d8                	mov    eax,ebx
c00102ae:	f7 f1                	div    ecx
c00102b0:	31 d2                	xor    edx,edx
c00102b2:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00102b5:	89 d8                	mov    eax,ebx
c00102b7:	f7 f7                	div    edi
c00102b9:	31 d2                	xor    edx,edx
c00102bb:	29 c1                	sub    ecx,eax
c00102bd:	89 d8                	mov    eax,ebx
c00102bf:	f7 f5                	div    ebp
c00102c1:	bd 6d 01 00 00       	mov    ebp,0x16d
c00102c6:	29 c1                	sub    ecx,eax
c00102c8:	31 d2                	xor    edx,edx
c00102ca:	89 c8                	mov    eax,ecx
c00102cc:	f7 f5                	div    ebp
c00102ce:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00102d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00102d7:	31 d2                	xor    edx,edx
c00102d9:	89 c8                	mov    eax,ecx
c00102db:	f7 f5                	div    ebp
c00102dd:	31 d2                	xor    edx,edx
c00102df:	01 c3                	add    ebx,eax
c00102e1:	89 c8                	mov    eax,ecx
c00102e3:	f7 f7                	div    edi
c00102e5:	bf 99 00 00 00       	mov    edi,0x99
c00102ea:	29 c3                	sub    ebx,eax
c00102ec:	31 d2                	xor    edx,edx
c00102ee:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00102f6:	29 c3                	sub    ebx,eax
c00102f8:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00102fb:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00102fe:	bb 05 00 00 00       	mov    ebx,0x5
c0010303:	83 c1 02             	add    ecx,0x2
c0010306:	89 c8                	mov    eax,ecx
c0010308:	f7 f7                	div    edi
c001030a:	31 d2                	xor    edx,edx
c001030c:	89 c7                	mov    edi,eax
c001030e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0010314:	83 c0 02             	add    eax,0x2
c0010317:	f7 f3                	div    ebx
c0010319:	89 eb                	mov    ebx,ebp
c001031b:	29 c3                	sub    ebx,eax
c001031d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0010323:	88 1e                	mov    BYTE PTR [esi],bl
c0010325:	19 c0                	sbb    eax,eax
c0010327:	31 d2                	xor    edx,edx
c0010329:	83 e0 0c             	and    eax,0xc
c001032c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0010330:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0010338:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001033c:	83 f9 01             	cmp    ecx,0x1
c001033f:	0f 96 c2             	setbe  dl
c0010342:	41                   	inc    ecx
c0010343:	01 d0                	add    eax,edx
c0010345:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0010348:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001034c:	83 c4 1c             	add    esp,0x1c
c001034f:	89 f0                	mov    eax,esi
c0010351:	5b                   	pop    ebx
c0010352:	5e                   	pop    esi
c0010353:	5f                   	pop    edi
c0010354:	5d                   	pop    ebp
c0010355:	c2 04 00             	ret    0x4

c0010358 <Clock::timeInDatetimeLocal()>:
c0010358:	53                   	push   ebx
c0010359:	83 ec 14             	sub    esp,0x14
c001035c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010360:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010364:	e8 83 fc ff ff       	call   c000ffec <Clock::timeInSecondsLocal()>
c0010369:	83 c4 0c             	add    esp,0xc
c001036c:	52                   	push   edx
c001036d:	50                   	push   eax
c001036e:	53                   	push   ebx
c001036f:	e8 a0 fe ff ff       	call   c0010214 <secondsToDatetime(unsigned long long)>
c0010374:	89 d8                	mov    eax,ebx
c0010376:	83 c4 14             	add    esp,0x14
c0010379:	5b                   	pop    ebx
c001037a:	c2 04 00             	ret    0x4
c001037d:	90                   	nop

c001037e <Device::hibernate()>:
c001037e:	c3                   	ret    
c001037f:	90                   	nop

c0010380 <Device::wake()>:
c0010380:	c3                   	ret    
c0010381:	90                   	nop

c0010382 <Device::detect()>:
c0010382:	c3                   	ret    
c0010383:	90                   	nop

c0010384 <Device::disableLegacy()>:
c0010384:	c3                   	ret    
c0010385:	90                   	nop

c0010386 <Device::powerSaving(PowerSavingLevel)>:
c0010386:	c3                   	ret    
c0010387:	90                   	nop

c0010388 <DriverlessDevice::close(int, int, void*)>:
c0010388:	31 c0                	xor    eax,eax
c001038a:	c3                   	ret    
c001038b:	90                   	nop

c001038c <DriverlessDevice::detect()>:
c001038c:	c3                   	ret    
c001038d:	90                   	nop

c001038e <DriverlessDevice::open(int, int, void*)>:
c001038e:	83 ec 18             	sub    esp,0x18
c0010391:	68 10 18 02 c0       	push   0xc0021810
c0010396:	e8 ef 54 00 00       	call   c001588a <Krnl::panic(char const*)>
c001039b:	83 c8 ff             	or     eax,0xffffffff
c001039e:	83 c4 1c             	add    esp,0x1c
c00103a1:	c3                   	ret    

c00103a2 <Device::~Device()>:
c00103a2:	ba 38 18 02 c0       	mov    edx,0xc0021838
c00103a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103ab:	89 10                	mov    DWORD PTR [eax],edx
c00103ad:	90                   	nop
c00103ae:	c3                   	ret    
c00103af:	90                   	nop

c00103b0 <Device::~Device()>:
c00103b0:	83 ec 0c             	sub    esp,0xc
c00103b3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00103b7:	e8 e6 ff ff ff       	call   c00103a2 <Device::~Device()>
c00103bc:	83 c4 04             	add    esp,0x4
c00103bf:	83 ec 08             	sub    esp,0x8
c00103c2:	68 58 01 00 00       	push   0x158
c00103c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103cb:	e8 45 ec ff ff       	call   c000f015 <operator delete(void*, unsigned long)>
c00103d0:	83 c4 10             	add    esp,0x10
c00103d3:	83 c4 0c             	add    esp,0xc
c00103d6:	c3                   	ret    
c00103d7:	90                   	nop

c00103d8 <Device::findAndLoadDriver()>:
c00103d8:	c3                   	ret    
c00103d9:	90                   	nop

c00103da <Device::preOpenPCI(PCIDeviceInfo)>:
c00103da:	57                   	push   edi
c00103db:	b9 09 00 00 00       	mov    ecx,0x9
c00103e0:	56                   	push   esi
c00103e1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00103e5:	8d 74 24 10          	lea    esi,[esp+0x10]
c00103e9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00103f3:	81 c7 18 01 00 00    	add    edi,0x118
c00103f9:	fc                   	cld    
c00103fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00103fc:	5e                   	pop    esi
c00103fd:	5f                   	pop    edi
c00103fe:	c3                   	ret    
c00103ff:	90                   	nop

c0010400 <Device::preOpenACPI(void*, char*, char*)>:
c0010400:	56                   	push   esi
c0010401:	53                   	push   ebx
c0010402:	83 ec 08             	sub    esp,0x8
c0010405:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010409:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001040d:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0010417:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001041b:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0010421:	6a 1e                	push   0x1e
c0010423:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0010429:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001042d:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0010433:	50                   	push   eax
c0010434:	e8 4b 02 ff ff       	call   c0000684 <memcpy>
c0010439:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001043d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010441:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0010449:	83 c4 14             	add    esp,0x14
c001044c:	5b                   	pop    ebx
c001044d:	5e                   	pop    esi
c001044e:	e9 31 02 ff ff       	jmp    c0000684 <memcpy>
c0010453:	90                   	nop

c0010454 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010454:	55                   	push   ebp
c0010455:	57                   	push   edi
c0010456:	56                   	push   esi
c0010457:	53                   	push   ebx
c0010458:	83 ec 0c             	sub    esp,0xc
c001045b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001045f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010463:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010467:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001046b:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c0010470:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0010477:	75 0b                	jne    c0010484 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c0010479:	8b 00                	mov    eax,DWORD PTR [eax]
c001047b:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001047f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010482:	eb 24                	jmp    c00104a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c0010484:	e8 91 42 00 00       	call   c001471a <thisCPU()>
c0010489:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001048f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010491:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0010495:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0010499:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c001049d:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00104a1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00104a5:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00104a8:	83 c4 0c             	add    esp,0xc
c00104ab:	5b                   	pop    ebx
c00104ac:	5e                   	pop    esi
c00104ad:	5f                   	pop    edi
c00104ae:	5d                   	pop    ebp
c00104af:	ff e0                	jmp    eax
c00104b1:	90                   	nop

c00104b2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00104b2:	57                   	push   edi
c00104b3:	56                   	push   esi
c00104b4:	53                   	push   ebx
c00104b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00104bd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00104c1:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00104c6:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00104cd:	75 0b                	jne    c00104da <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c00104cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00104d1:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00104d5:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00104d8:	eb 20                	jmp    c00104fa <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c00104da:	e8 3b 42 00 00       	call   c001471a <thisCPU()>
c00104df:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00104e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00104e7:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00104eb:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00104ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00104f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00104f7:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c00104fa:	5b                   	pop    ebx
c00104fb:	5e                   	pop    esi
c00104fc:	5f                   	pop    edi
c00104fd:	ff e0                	jmp    eax
c00104ff:	90                   	nop

c0010500 <Device::addChild(Device*)>:
c0010500:	53                   	push   ebx
c0010501:	83 ec 08             	sub    esp,0x8
c0010504:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010508:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001050c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0010512:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0010518:	8b 13                	mov    edx,DWORD PTR [ebx]
c001051a:	85 d2                	test   edx,edx
c001051c:	74 04                	je     c0010522 <Device::addChild(Device*)+0x22>
c001051e:	89 d3                	mov    ebx,edx
c0010520:	eb f6                	jmp    c0010518 <Device::addChild(Device*)+0x18>
c0010522:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010525:	83 ec 0c             	sub    esp,0xc
c0010528:	6a 08                	push   0x8
c001052a:	e8 d7 ea ff ff       	call   c000f006 <operator new(unsigned long)>
c001052f:	89 03                	mov    DWORD PTR [ebx],eax
c0010531:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010537:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001053e:	83 c4 18             	add    esp,0x18
c0010541:	5b                   	pop    ebx
c0010542:	c3                   	ret    
c0010543:	90                   	nop

c0010544 <Device::removeAllChildren()>:
c0010544:	56                   	push   esi
c0010545:	53                   	push   ebx
c0010546:	52                   	push   edx
c0010547:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001054b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0010551:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010554:	74 17                	je     c001056d <Device::removeAllChildren()+0x29>
c0010556:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0010559:	85 c0                	test   eax,eax
c001055b:	74 0c                	je     c0010569 <Device::removeAllChildren()+0x25>
c001055d:	83 ec 0c             	sub    esp,0xc
c0010560:	8b 10                	mov    edx,DWORD PTR [eax]
c0010562:	50                   	push   eax
c0010563:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0010566:	83 c4 10             	add    esp,0x10
c0010569:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001056b:	eb e4                	jmp    c0010551 <Device::removeAllChildren()+0xd>
c001056d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0010573:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010579:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001057f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010586:	58                   	pop    eax
c0010587:	5b                   	pop    ebx
c0010588:	5e                   	pop    esi
c0010589:	c3                   	ret    

c001058a <Device::hibernateAll()>:
c001058a:	53                   	push   ebx
c001058b:	83 ec 14             	sub    esp,0x14
c001058e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010592:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010594:	53                   	push   ebx
c0010595:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0010598:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001059e:	83 c4 10             	add    esp,0x10
c00105a1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00105a4:	74 0f                	je     c00105b5 <Device::hibernateAll()+0x2b>
c00105a6:	83 ec 0c             	sub    esp,0xc
c00105a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00105ac:	e8 d9 ff ff ff       	call   c001058a <Device::hibernateAll()>
c00105b1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00105b3:	eb e9                	jmp    c001059e <Device::hibernateAll()+0x14>
c00105b5:	83 c4 08             	add    esp,0x8
c00105b8:	5b                   	pop    ebx
c00105b9:	c3                   	ret    

c00105ba <Device::wakeAll()>:
c00105ba:	53                   	push   ebx
c00105bb:	83 ec 14             	sub    esp,0x14
c00105be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00105c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105c4:	53                   	push   ebx
c00105c5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00105c8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00105ce:	83 c4 10             	add    esp,0x10
c00105d1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00105d4:	74 0f                	je     c00105e5 <Device::wakeAll()+0x2b>
c00105d6:	83 ec 0c             	sub    esp,0xc
c00105d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00105dc:	e8 d9 ff ff ff       	call   c00105ba <Device::wakeAll()>
c00105e1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00105e3:	eb e9                	jmp    c00105ce <Device::wakeAll()+0x14>
c00105e5:	83 c4 08             	add    esp,0x8
c00105e8:	5b                   	pop    ebx
c00105e9:	c3                   	ret    

c00105ea <Device::detectAll()>:
c00105ea:	53                   	push   ebx
c00105eb:	83 ec 14             	sub    esp,0x14
c00105ee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00105f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105f4:	53                   	push   ebx
c00105f5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00105f8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00105fe:	83 c4 10             	add    esp,0x10
c0010601:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010604:	74 0f                	je     c0010615 <Device::detectAll()+0x2b>
c0010606:	83 ec 0c             	sub    esp,0xc
c0010609:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001060c:	e8 d9 ff ff ff       	call   c00105ea <Device::detectAll()>
c0010611:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010613:	eb e9                	jmp    c00105fe <Device::detectAll()+0x14>
c0010615:	83 c4 08             	add    esp,0x8
c0010618:	5b                   	pop    ebx
c0010619:	c3                   	ret    

c001061a <Device::disableLegacyAll()>:
c001061a:	53                   	push   ebx
c001061b:	83 ec 14             	sub    esp,0x14
c001061e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010622:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010624:	53                   	push   ebx
c0010625:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0010628:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001062e:	83 c4 10             	add    esp,0x10
c0010631:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010634:	74 0f                	je     c0010645 <Device::disableLegacyAll()+0x2b>
c0010636:	83 ec 0c             	sub    esp,0xc
c0010639:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001063c:	e8 d9 ff ff ff       	call   c001061a <Device::disableLegacyAll()>
c0010641:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010643:	eb e9                	jmp    c001062e <Device::disableLegacyAll()+0x14>
c0010645:	83 c4 08             	add    esp,0x8
c0010648:	5b                   	pop    ebx
c0010649:	c3                   	ret    

c001064a <Device::loadDriversForAll()>:
c001064a:	53                   	push   ebx
c001064b:	83 ec 08             	sub    esp,0x8
c001064e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010652:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010658:	8b 18                	mov    ebx,DWORD PTR [eax]
c001065a:	85 db                	test   ebx,ebx
c001065c:	74 12                	je     c0010670 <Device::loadDriversForAll()+0x26>
c001065e:	83 ec 0c             	sub    esp,0xc
c0010661:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0010664:	e8 e1 ff ff ff       	call   c001064a <Device::loadDriversForAll()>
c0010669:	83 c4 10             	add    esp,0x10
c001066c:	89 d8                	mov    eax,ebx
c001066e:	eb e8                	jmp    c0010658 <Device::loadDriversForAll()+0xe>
c0010670:	83 c4 08             	add    esp,0x8
c0010673:	5b                   	pop    ebx
c0010674:	c3                   	ret    
c0010675:	90                   	nop

c0010676 <Device::closeAll()>:
c0010676:	53                   	push   ebx
c0010677:	83 ec 08             	sub    esp,0x8
c001067a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001067e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010680:	6a 00                	push   0x0
c0010682:	6a 00                	push   0x0
c0010684:	6a 00                	push   0x0
c0010686:	53                   	push   ebx
c0010687:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001068a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010690:	83 c4 10             	add    esp,0x10
c0010693:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010696:	74 0f                	je     c00106a7 <Device::closeAll()+0x31>
c0010698:	83 ec 0c             	sub    esp,0xc
c001069b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001069e:	e8 d3 ff ff ff       	call   c0010676 <Device::closeAll()>
c00106a3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106a5:	eb e9                	jmp    c0010690 <Device::closeAll()+0x1a>
c00106a7:	83 c4 08             	add    esp,0x8
c00106aa:	5b                   	pop    ebx
c00106ab:	c3                   	ret    

c00106ac <Device::powerSavingAll(PowerSavingLevel)>:
c00106ac:	56                   	push   esi
c00106ad:	53                   	push   ebx
c00106ae:	83 ec 0c             	sub    esp,0xc
c00106b1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00106b5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00106b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106bb:	56                   	push   esi
c00106bc:	53                   	push   ebx
c00106bd:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00106c0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106c6:	83 c4 10             	add    esp,0x10
c00106c9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106cc:	74 0f                	je     c00106dd <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00106ce:	52                   	push   edx
c00106cf:	52                   	push   edx
c00106d0:	56                   	push   esi
c00106d1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106d4:	e8 d3 ff ff ff       	call   c00106ac <Device::powerSavingAll(PowerSavingLevel)>
c00106d9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106db:	eb e9                	jmp    c00106c6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00106dd:	58                   	pop    eax
c00106de:	5b                   	pop    ebx
c00106df:	5e                   	pop    esi
c00106e0:	c3                   	ret    
c00106e1:	90                   	nop

c00106e2 <Device::setName(char const*)>:
c00106e2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00106ea:	e9 6a 00 ff ff       	jmp    c0000759 <strcpy>
c00106ef:	90                   	nop

c00106f0 <Device::Device(char const*)>:
c00106f0:	83 ec 0c             	sub    esp,0xc
c00106f3:	ba 38 18 02 c0       	mov    edx,0xc0021838
c00106f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106fc:	89 10                	mov    DWORD PTR [eax],edx
c00106fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010702:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001070c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010710:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001071a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001071e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001072c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0010736:	83 ec 08             	sub    esp,0x8
c0010739:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001073d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010741:	e8 9c ff ff ff       	call   c00106e2 <Device::setName(char const*)>
c0010746:	83 c4 10             	add    esp,0x10
c0010749:	83 ec 0c             	sub    esp,0xc
c001074c:	6a 08                	push   0x8
c001074e:	e8 b3 e8 ff ff       	call   c000f006 <operator new(unsigned long)>
c0010753:	83 c4 10             	add    esp,0x10
c0010756:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001075c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010763:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010767:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001076d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010771:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010777:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001077d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010781:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010787:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001078e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010792:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0010799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001079d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00107a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107a8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00107b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107b6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00107c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107c4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00107ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107d2:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00107dc:	90                   	nop
c00107dd:	83 c4 0c             	add    esp,0xc
c00107e0:	c3                   	ret    
c00107e1:	90                   	nop

c00107e2 <Device::getName()>:
c00107e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107e6:	05 d0 00 00 00       	add    eax,0xd0
c00107eb:	c3                   	ret    

c00107ec <DriverlessDevice::DriverlessDevice(char const*)>:
c00107ec:	83 ec 0c             	sub    esp,0xc
c00107ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107f3:	83 ec 08             	sub    esp,0x8
c00107f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107fa:	50                   	push   eax
c00107fb:	e8 f0 fe ff ff       	call   c00106f0 <Device::Device(char const*)>
c0010800:	83 c4 10             	add    esp,0x10
c0010803:	ba 64 18 02 c0       	mov    edx,0xc0021864
c0010808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001080c:	89 10                	mov    DWORD PTR [eax],edx
c001080e:	90                   	nop
c001080f:	83 c4 0c             	add    esp,0xc
c0010812:	c3                   	ret    
c0010813:	90                   	nop

c0010814 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0010814:	57                   	push   edi
c0010815:	56                   	push   esi
c0010816:	53                   	push   ebx
c0010817:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001081b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001081f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010823:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0010829:	75 0c                	jne    c0010837 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001082b:	52                   	push   edx
c001082c:	52                   	push   edx
c001082d:	53                   	push   ebx
c001082e:	56                   	push   esi
c001082f:	e8 40 ee 00 00       	call   c001f674 <LinkedList<Device>::addElement(Device*)>
c0010834:	83 c4 10             	add    esp,0x10
c0010837:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001083d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010840:	74 12                	je     c0010854 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0010842:	50                   	push   eax
c0010843:	57                   	push   edi
c0010844:	56                   	push   esi
c0010845:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010848:	e8 c7 ff ff ff       	call   c0010814 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001084d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001084f:	83 c4 10             	add    esp,0x10
c0010852:	eb e9                	jmp    c001083d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0010854:	5b                   	pop    ebx
c0010855:	5e                   	pop    esi
c0010856:	5f                   	pop    edi
c0010857:	c3                   	ret    

c0010858 <getDevicesOfType(DeviceType)>:
c0010858:	53                   	push   ebx
c0010859:	83 ec 14             	sub    esp,0x14
c001085c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010860:	53                   	push   ebx
c0010861:	e8 ea ee 00 00       	call   c001f750 <LinkedList<Device>::LinkedList()>
c0010866:	83 c4 0c             	add    esp,0xc
c0010869:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001086d:	53                   	push   ebx
c001086e:	ff 35 e8 42 02 c0    	push   DWORD PTR ds:0xc00242e8
c0010874:	e8 9b ff ff ff       	call   c0010814 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0010879:	89 d8                	mov    eax,ebx
c001087b:	83 c4 18             	add    esp,0x18
c001087e:	5b                   	pop    ebx
c001087f:	c2 04 00             	ret    0x4

c0010882 <HardDiskController::HardDiskController(char const*)>:
c0010882:	83 ec 0c             	sub    esp,0xc
c0010885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010889:	83 ec 08             	sub    esp,0x8
c001088c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010890:	50                   	push   eax
c0010891:	e8 5a fe ff ff       	call   c00106f0 <Device::Device(char const*)>
c0010896:	83 c4 10             	add    esp,0x10
c0010899:	ba 90 18 02 c0       	mov    edx,0xc0021890
c001089e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a2:	89 10                	mov    DWORD PTR [eax],edx
c00108a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a8:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00108b2:	90                   	nop
c00108b3:	83 c4 0c             	add    esp,0xc
c00108b6:	c3                   	ret    
c00108b7:	90                   	nop

c00108b8 <HardDiskController::~HardDiskController()>:
c00108b8:	83 ec 0c             	sub    esp,0xc
c00108bb:	ba 90 18 02 c0       	mov    edx,0xc0021890
c00108c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c4:	89 10                	mov    DWORD PTR [eax],edx
c00108c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ca:	83 ec 0c             	sub    esp,0xc
c00108cd:	50                   	push   eax
c00108ce:	e8 cf fa ff ff       	call   c00103a2 <Device::~Device()>
c00108d3:	83 c4 10             	add    esp,0x10
c00108d6:	90                   	nop
c00108d7:	83 c4 0c             	add    esp,0xc
c00108da:	c3                   	ret    
c00108db:	90                   	nop

c00108dc <HardDiskController::~HardDiskController()>:
c00108dc:	83 ec 0c             	sub    esp,0xc
c00108df:	83 ec 0c             	sub    esp,0xc
c00108e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108e6:	e8 cd ff ff ff       	call   c00108b8 <HardDiskController::~HardDiskController()>
c00108eb:	83 c4 10             	add    esp,0x10
c00108ee:	83 ec 08             	sub    esp,0x8
c00108f1:	68 58 01 00 00       	push   0x158
c00108f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108fa:	e8 16 e7 ff ff       	call   c000f015 <operator delete(void*, unsigned long)>
c00108ff:	83 c4 10             	add    esp,0x10
c0010902:	83 c4 0c             	add    esp,0xc
c0010905:	c3                   	ret    

c0010906 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0010906:	83 ec 0c             	sub    esp,0xc
c0010909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001090d:	83 ec 08             	sub    esp,0x8
c0010910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010914:	50                   	push   eax
c0010915:	e8 d6 fd ff ff       	call   c00106f0 <Device::Device(char const*)>
c001091a:	83 c4 10             	add    esp,0x10
c001091d:	ba bc 18 02 c0       	mov    edx,0xc00218bc
c0010922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010926:	89 10                	mov    DWORD PTR [eax],edx
c0010928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010937:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001093e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010942:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001094c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010950:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010954:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001095a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001095e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010968:	90                   	nop
c0010969:	83 c4 0c             	add    esp,0xc
c001096c:	c3                   	ret    
c001096d:	90                   	nop

c001096e <PhysicalDisk::startCache()>:
c001096e:	56                   	push   esi
c001096f:	53                   	push   ebx
c0010970:	83 ec 10             	sub    esp,0x10
c0010973:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010977:	6a 30                	push   0x30
c0010979:	e8 88 e6 ff ff       	call   c000f006 <operator new(unsigned long)>
c001097e:	89 c6                	mov    esi,eax
c0010980:	58                   	pop    eax
c0010981:	5a                   	pop    edx
c0010982:	53                   	push   ebx
c0010983:	56                   	push   esi
c0010984:	e8 27 25 00 00       	call   c0012eb0 <VCache::VCache(PhysicalDisk*)>
c0010989:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001098f:	83 c4 14             	add    esp,0x14
c0010992:	5b                   	pop    ebx
c0010993:	5e                   	pop    esi
c0010994:	c3                   	ret    
c0010995:	90                   	nop

c0010996 <PhysicalDisk::~PhysicalDisk()>:
c0010996:	83 ec 0c             	sub    esp,0xc
c0010999:	ba bc 18 02 c0       	mov    edx,0xc00218bc
c001099e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a2:	89 10                	mov    DWORD PTR [eax],edx
c00109a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a8:	83 ec 0c             	sub    esp,0xc
c00109ab:	50                   	push   eax
c00109ac:	e8 f1 f9 ff ff       	call   c00103a2 <Device::~Device()>
c00109b1:	83 c4 10             	add    esp,0x10
c00109b4:	90                   	nop
c00109b5:	83 c4 0c             	add    esp,0xc
c00109b8:	c3                   	ret    
c00109b9:	90                   	nop

c00109ba <PhysicalDisk::~PhysicalDisk()>:
c00109ba:	83 ec 0c             	sub    esp,0xc
c00109bd:	83 ec 0c             	sub    esp,0xc
c00109c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109c4:	e8 cd ff ff ff       	call   c0010996 <PhysicalDisk::~PhysicalDisk()>
c00109c9:	83 c4 10             	add    esp,0x10
c00109cc:	83 ec 08             	sub    esp,0x8
c00109cf:	68 6c 01 00 00       	push   0x16c
c00109d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109d8:	e8 38 e6 ff ff       	call   c000f015 <operator delete(void*, unsigned long)>
c00109dd:	83 c4 10             	add    esp,0x10
c00109e0:	83 c4 0c             	add    esp,0xc
c00109e3:	c3                   	ret    

c00109e4 <FPU::FPU(char const*)>:
c00109e4:	83 ec 0c             	sub    esp,0xc
c00109e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109eb:	83 ec 08             	sub    esp,0x8
c00109ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109f2:	50                   	push   eax
c00109f3:	e8 f8 fc ff ff       	call   c00106f0 <Device::Device(char const*)>
c00109f8:	83 c4 10             	add    esp,0x10
c00109fb:	ba fc 18 02 c0       	mov    edx,0xc00218fc
c0010a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a04:	89 10                	mov    DWORD PTR [eax],edx
c0010a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a0a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010a14:	90                   	nop
c0010a15:	83 c4 0c             	add    esp,0xc
c0010a18:	c3                   	ret    
c0010a19:	90                   	nop

c0010a1a <FPU::~FPU()>:
c0010a1a:	83 ec 0c             	sub    esp,0xc
c0010a1d:	ba fc 18 02 c0       	mov    edx,0xc00218fc
c0010a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a26:	89 10                	mov    DWORD PTR [eax],edx
c0010a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a2c:	83 ec 0c             	sub    esp,0xc
c0010a2f:	50                   	push   eax
c0010a30:	e8 6d f9 ff ff       	call   c00103a2 <Device::~Device()>
c0010a35:	83 c4 10             	add    esp,0x10
c0010a38:	90                   	nop
c0010a39:	83 c4 0c             	add    esp,0xc
c0010a3c:	c3                   	ret    
c0010a3d:	90                   	nop

c0010a3e <FPU::~FPU()>:
c0010a3e:	83 ec 0c             	sub    esp,0xc
c0010a41:	83 ec 0c             	sub    esp,0xc
c0010a44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a48:	e8 cd ff ff ff       	call   c0010a1a <FPU::~FPU()>
c0010a4d:	83 c4 10             	add    esp,0x10
c0010a50:	83 ec 08             	sub    esp,0x8
c0010a53:	68 58 01 00 00       	push   0x158
c0010a58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a5c:	e8 b4 e5 ff ff       	call   c000f015 <operator delete(void*, unsigned long)>
c0010a61:	83 c4 10             	add    esp,0x10
c0010a64:	83 c4 0c             	add    esp,0xc
c0010a67:	c3                   	ret    

c0010a68 <setupFPU()>:
c0010a68:	53                   	push   ebx
c0010a69:	83 ec 08             	sub    esp,0x8
c0010a6c:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c0010a71:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010a78:	74 19                	je     c0010a93 <setupFPU()+0x2b>
c0010a7a:	83 ec 0c             	sub    esp,0xc
c0010a7d:	68 58 01 00 00       	push   0x158
c0010a82:	e8 7f e5 ff ff       	call   c000f006 <operator new(unsigned long)>
c0010a87:	89 c3                	mov    ebx,eax
c0010a89:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a8c:	e8 9d d3 00 00       	call   c001de2e <AVX::AVX()>
c0010a91:	eb 5b                	jmp    c0010aee <setupFPU()+0x86>
c0010a93:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010a99:	84 c0                	test   al,al
c0010a9b:	79 19                	jns    c0010ab6 <setupFPU()+0x4e>
c0010a9d:	83 ec 0c             	sub    esp,0xc
c0010aa0:	68 58 01 00 00       	push   0x158
c0010aa5:	e8 5c e5 ff ff       	call   c000f006 <operator new(unsigned long)>
c0010aaa:	89 c3                	mov    ebx,eax
c0010aac:	89 04 24             	mov    DWORD PTR [esp],eax
c0010aaf:	e8 a0 d4 00 00       	call   c001df54 <SSE::SSE()>
c0010ab4:	eb 38                	jmp    c0010aee <setupFPU()+0x86>
c0010ab6:	a8 20                	test   al,0x20
c0010ab8:	74 19                	je     c0010ad3 <setupFPU()+0x6b>
c0010aba:	83 ec 0c             	sub    esp,0xc
c0010abd:	68 58 01 00 00       	push   0x158
c0010ac2:	e8 3f e5 ff ff       	call   c000f006 <operator new(unsigned long)>
c0010ac7:	89 c3                	mov    ebx,eax
c0010ac9:	89 04 24             	mov    DWORD PTR [esp],eax
c0010acc:	e8 ed d3 00 00       	call   c001debe <MMX::MMX()>
c0010ad1:	eb 1b                	jmp    c0010aee <setupFPU()+0x86>
c0010ad3:	a8 10                	test   al,0x10
c0010ad5:	74 1c                	je     c0010af3 <setupFPU()+0x8b>
c0010ad7:	83 ec 0c             	sub    esp,0xc
c0010ada:	68 58 01 00 00       	push   0x158
c0010adf:	e8 22 e5 ff ff       	call   c000f006 <operator new(unsigned long)>
c0010ae4:	89 c3                	mov    ebx,eax
c0010ae6:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ae9:	e8 f4 d4 00 00       	call   c001dfe2 <x87::x87()>
c0010aee:	83 c4 10             	add    esp,0x10
c0010af1:	eb 2c                	jmp    c0010b1f <setupFPU()+0xb7>
c0010af3:	83 ec 0c             	sub    esp,0xc
c0010af6:	31 db                	xor    ebx,ebx
c0010af8:	68 e8 18 02 c0       	push   0xc00218e8
c0010afd:	e8 f3 e5 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0010b02:	e8 13 3c 00 00       	call   c001471a <thisCPU()>
c0010b07:	e8 0e 3c 00 00       	call   c001471a <thisCPU()>
c0010b0c:	e8 97 ec 00 00       	call   c001f7a8 <CPU::readCR0()>
c0010b11:	83 c8 04             	or     eax,0x4
c0010b14:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b17:	e8 9e ec 00 00       	call   c001f7ba <CPU::writeCR0(unsigned long)>
c0010b1c:	83 c4 10             	add    esp,0x10
c0010b1f:	89 d8                	mov    eax,ebx
c0010b21:	83 c4 08             	add    esp,0x8
c0010b24:	5b                   	pop    ebx
c0010b25:	c3                   	ret    

c0010b26 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010b26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b2a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010b2e:	c1 e0 04             	shl    eax,0x4
c0010b31:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010b35:	8d 50 10             	lea    edx,[eax+0x10]
c0010b38:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010b3e:	74 08                	je     c0010b48 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010b40:	83 c0 04             	add    eax,0x4
c0010b43:	39 d0                	cmp    eax,edx
c0010b45:	75 f1                	jne    c0010b38 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010b47:	c3                   	ret    
c0010b48:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010b52:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010b5c:	eb e2                	jmp    c0010b40 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010b5e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010b5e:	57                   	push   edi
c0010b5f:	31 c0                	xor    eax,eax
c0010b61:	56                   	push   esi
c0010b62:	53                   	push   ebx
c0010b63:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010b67:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010b6b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010b6f:	89 da                	mov    edx,ebx
c0010b71:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010b75:	c1 e2 04             	shl    edx,0x4
c0010b78:	01 ca                	add    edx,ecx
c0010b7a:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010b82:	74 16                	je     c0010b9a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010b84:	40                   	inc    eax
c0010b85:	83 f8 04             	cmp    eax,0x4
c0010b88:	75 f0                	jne    c0010b7a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010b8a:	c7 44 24 10 2c 19 02 c0 	mov    DWORD PTR [esp+0x10],0xc002192c
c0010b92:	5b                   	pop    ebx
c0010b93:	5e                   	pop    esi
c0010b94:	5f                   	pop    edi
c0010b95:	e9 f0 4c 00 00       	jmp    c001588a <Krnl::panic(char const*)>
c0010b9a:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010b9d:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010ba0:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010ba6:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010bac:	5b                   	pop    ebx
c0010bad:	5e                   	pop    esi
c0010bae:	5f                   	pop    edi
c0010baf:	c3                   	ret    

c0010bb0 <doubleFault(regs*, void*)>:
c0010bb0:	55                   	push   ebp
c0010bb1:	89 e5                	mov    ebp,esp
c0010bb3:	83 ec 08             	sub    esp,0x8
c0010bb6:	83 ec 0c             	sub    esp,0xc
c0010bb9:	68 67 19 02 c0       	push   0xc0021967
c0010bbe:	e8 c7 4c 00 00       	call   c001588a <Krnl::panic(char const*)>
c0010bc3:	83 c4 10             	add    esp,0x10
c0010bc6:	90                   	nop
c0010bc7:	c9                   	leave  
c0010bc8:	c3                   	ret    
c0010bc9:	90                   	nop

c0010bca <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010bca:	56                   	push   esi
c0010bcb:	53                   	push   ebx
c0010bcc:	50                   	push   eax
c0010bcd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010bd1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010bd5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010bda:	75 35                	jne    c0010c11 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010bdc:	8d 43 20             	lea    eax,[ebx+0x20]
c0010bdf:	31 d2                	xor    edx,edx
c0010be1:	89 c1                	mov    ecx,eax
c0010be3:	c1 e1 04             	shl    ecx,0x4
c0010be6:	01 f1                	add    ecx,esi
c0010be8:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010bf0:	74 3e                	je     c0010c30 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010bf2:	42                   	inc    edx
c0010bf3:	83 fa 04             	cmp    edx,0x4
c0010bf6:	75 f0                	jne    c0010be8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010bf8:	83 ec 0c             	sub    esp,0xc
c0010bfb:	68 ac 19 02 c0       	push   0xc00219ac
c0010c00:	e8 85 4c 00 00       	call   c001588a <Krnl::panic(char const*)>
c0010c05:	83 c4 10             	add    esp,0x10
c0010c08:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c0d:	5a                   	pop    edx
c0010c0e:	5b                   	pop    ebx
c0010c0f:	5e                   	pop    esi
c0010c10:	c3                   	ret    
c0010c11:	83 ec 0c             	sub    esp,0xc
c0010c14:	56                   	push   esi
c0010c15:	e8 c8 fb ff ff       	call   c00107e2 <Device::getName()>
c0010c1a:	83 c4 10             	add    esp,0x10
c0010c1d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010c20:	75 ba                	jne    c0010bdc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c22:	83 fb 0f             	cmp    ebx,0xf
c0010c25:	7f 29                	jg     c0010c50 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010c27:	0f b6 9b 40 3a 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc5c0]
c0010c2e:	eb ac                	jmp    c0010bdc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c30:	8d 04 82             	lea    eax,[edx+eax*4]
c0010c33:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c37:	8d 04 86             	lea    eax,[esi+eax*4]
c0010c3a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010c40:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010c44:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010c4a:	89 d8                	mov    eax,ebx
c0010c4c:	5a                   	pop    edx
c0010c4d:	5b                   	pop    ebx
c0010c4e:	5e                   	pop    esi
c0010c4f:	c3                   	ret    
c0010c50:	83 ec 0c             	sub    esp,0xc
c0010c53:	68 74 19 02 c0       	push   0xc0021974
c0010c58:	e8 2d 4c 00 00       	call   c001588a <Krnl::panic(char const*)>
c0010c5d:	83 c4 10             	add    esp,0x10
c0010c60:	e9 77 ff ff ff       	jmp    c0010bdc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c65:	90                   	nop

c0010c66 <InterruptController::clearAllHandlers(int, bool)>:
c0010c66:	56                   	push   esi
c0010c67:	53                   	push   ebx
c0010c68:	52                   	push   edx
c0010c69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c6d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010c71:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010c76:	75 61                	jne    c0010cd9 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010c78:	8d 46 20             	lea    eax,[esi+0x20]
c0010c7b:	c1 e6 04             	shl    esi,0x4
c0010c7e:	c1 e0 04             	shl    eax,0x4
c0010c81:	01 de                	add    esi,ebx
c0010c83:	01 d8                	add    eax,ebx
c0010c85:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010c8f:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010c99:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010ca3:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010cad:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010cb7:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010cc1:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010ccb:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010cd5:	58                   	pop    eax
c0010cd6:	5b                   	pop    ebx
c0010cd7:	5e                   	pop    esi
c0010cd8:	c3                   	ret    
c0010cd9:	83 ec 0c             	sub    esp,0xc
c0010cdc:	53                   	push   ebx
c0010cdd:	e8 00 fb ff ff       	call   c00107e2 <Device::getName()>
c0010ce2:	83 c4 10             	add    esp,0x10
c0010ce5:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010ce8:	75 8e                	jne    c0010c78 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010cea:	83 fe 0f             	cmp    esi,0xf
c0010ced:	7f 09                	jg     c0010cf8 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010cef:	0f b6 b6 40 3a 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc5c0]
c0010cf6:	eb 80                	jmp    c0010c78 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010cf8:	83 ec 0c             	sub    esp,0xc
c0010cfb:	68 e8 19 02 c0       	push   0xc00219e8
c0010d00:	e8 85 4b 00 00       	call   c001588a <Krnl::panic(char const*)>
c0010d05:	83 c4 10             	add    esp,0x10
c0010d08:	e9 6b ff ff ff       	jmp    c0010c78 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d0d:	90                   	nop

c0010d0e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010d0e:	56                   	push   esi
c0010d0f:	53                   	push   ebx
c0010d10:	52                   	push   edx
c0010d11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d15:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d19:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010d1e:	75 3a                	jne    c0010d5a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010d20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d24:	8d 50 20             	lea    edx,[eax+0x20]
c0010d27:	c1 e2 04             	shl    edx,0x4
c0010d2a:	8d 04 16             	lea    eax,[esi+edx*1]
c0010d2d:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010d31:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010d37:	74 0b                	je     c0010d44 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010d39:	83 c0 04             	add    eax,0x4
c0010d3c:	39 d0                	cmp    eax,edx
c0010d3e:	75 f1                	jne    c0010d31 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010d40:	58                   	pop    eax
c0010d41:	5b                   	pop    ebx
c0010d42:	5e                   	pop    esi
c0010d43:	c3                   	ret    
c0010d44:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010d4e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010d58:	eb df                	jmp    c0010d39 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010d5a:	83 ec 0c             	sub    esp,0xc
c0010d5d:	56                   	push   esi
c0010d5e:	e8 7f fa ff ff       	call   c00107e2 <Device::getName()>
c0010d63:	83 c4 10             	add    esp,0x10
c0010d66:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d69:	75 b5                	jne    c0010d20 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010d6b:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010d70:	7f 11                	jg     c0010d83 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010d72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d76:	0f b6 80 40 3a 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc5c0]
c0010d7d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010d81:	eb 9d                	jmp    c0010d20 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010d83:	83 ec 0c             	sub    esp,0xc
c0010d86:	68 e8 19 02 c0       	push   0xc00219e8
c0010d8b:	e8 fa 4a 00 00       	call   c001588a <Krnl::panic(char const*)>
c0010d90:	83 c4 10             	add    esp,0x10
c0010d93:	eb 8b                	jmp    c0010d20 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010d95 <nmiHandler(regs*, void*)>:
c0010d95:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c0010d9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d9e:	e9 a5 a9 ff ff       	jmp    c000b748 <Computer::handleNMI()>

c0010da3 <int_handler>:
c0010da3:	55                   	push   ebp
c0010da4:	57                   	push   edi
c0010da5:	56                   	push   esi
c0010da6:	53                   	push   ebx
c0010da7:	83 ec 0c             	sub    esp,0xc
c0010daa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010dae:	80 3d 34 4d 02 c0 00 	cmp    BYTE PTR ds:0xc0024d34,0x0
c0010db5:	74 0b                	je     c0010dc2 <int_handler+0x1f>
c0010db7:	fa                   	cli    
c0010db8:	f4                   	hlt    
c0010db9:	80 3d 34 4d 02 c0 00 	cmp    BYTE PTR ds:0xc0024d34,0x0
c0010dc0:	75 f5                	jne    c0010db7 <int_handler+0x14>
c0010dc2:	e8 53 39 00 00       	call   c001471a <thisCPU()>
c0010dc7:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010dca:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010dd0:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010dd3:	83 f8 17             	cmp    eax,0x17
c0010dd6:	77 13                	ja     c0010deb <int_handler+0x48>
c0010dd8:	83 ec 08             	sub    esp,0x8
c0010ddb:	8b 17                	mov    edx,DWORD PTR [edi]
c0010ddd:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010de0:	0f b6 c0             	movzx  eax,al
c0010de3:	50                   	push   eax
c0010de4:	57                   	push   edi
c0010de5:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010de8:	83 c4 10             	add    esp,0x10
c0010deb:	83 c3 15             	add    ebx,0x15
c0010dee:	c1 e3 04             	shl    ebx,0x4
c0010df1:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010df5:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010dfc:	31 db                	xor    ebx,ebx
c0010dfe:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010e02:	85 c0                	test   eax,eax
c0010e04:	74 13                	je     c0010e19 <int_handler+0x76>
c0010e06:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010e09:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010e0d:	74 1c                	je     c0010e2b <int_handler+0x88>
c0010e0f:	83 ec 08             	sub    esp,0x8
c0010e12:	52                   	push   edx
c0010e13:	56                   	push   esi
c0010e14:	ff d0                	call   eax
c0010e16:	83 c4 10             	add    esp,0x10
c0010e19:	43                   	inc    ebx
c0010e1a:	83 fb 04             	cmp    ebx,0x4
c0010e1d:	75 df                	jne    c0010dfe <int_handler+0x5b>
c0010e1f:	83 c4 0c             	add    esp,0xc
c0010e22:	31 c0                	xor    eax,eax
c0010e24:	5b                   	pop    ebx
c0010e25:	31 d2                	xor    edx,edx
c0010e27:	5e                   	pop    esi
c0010e28:	5f                   	pop    edi
c0010e29:	5d                   	pop    ebp
c0010e2a:	c3                   	ret    
c0010e2b:	83 ec 08             	sub    esp,0x8
c0010e2e:	52                   	push   edx
c0010e2f:	56                   	push   esi
c0010e30:	ff d0                	call   eax
c0010e32:	83 c4 10             	add    esp,0x10
c0010e35:	83 c4 0c             	add    esp,0xc
c0010e38:	5b                   	pop    ebx
c0010e39:	5e                   	pop    esi
c0010e3a:	5f                   	pop    edi
c0010e3b:	5d                   	pop    ebp
c0010e3c:	c3                   	ret    
c0010e3d:	90                   	nop

c0010e3e <InterruptController::InterruptController(char const*)>:
c0010e3e:	83 ec 1c             	sub    esp,0x1c
c0010e41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e45:	83 ec 08             	sub    esp,0x8
c0010e48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e4c:	50                   	push   eax
c0010e4d:	e8 9e f8 ff ff       	call   c00106f0 <Device::Device(char const*)>
c0010e52:	83 c4 10             	add    esp,0x10
c0010e55:	ba 24 1c 02 c0       	mov    edx,0xc0021c24
c0010e5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e5e:	89 10                	mov    DWORD PTR [eax],edx
c0010e60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e64:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010e6e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010e76:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010e7e:	7f 5e                	jg     c0010ede <InterruptController::InterruptController(char const*)+0xa0>
c0010e80:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010e88:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010e8d:	7f 49                	jg     c0010ed8 <InterruptController::InterruptController(char const*)+0x9a>
c0010e8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010e97:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010e9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ea2:	01 ca                	add    edx,ecx
c0010ea4:	83 c2 54             	add    edx,0x54
c0010ea7:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010eaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eb3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010eb7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010ebe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ec2:	01 ca                	add    edx,ecx
c0010ec4:	81 c2 54 04 00 00    	add    edx,0x454
c0010eca:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010ed2:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010ed6:	eb b0                	jmp    c0010e88 <InterruptController::InterruptController(char const*)+0x4a>
c0010ed8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010edc:	eb 98                	jmp    c0010e76 <InterruptController::InterruptController(char const*)+0x38>
c0010ede:	90                   	nop
c0010edf:	83 c4 1c             	add    esp,0x1c
c0010ee2:	c3                   	ret    
c0010ee3:	90                   	nop

c0010ee4 <InterruptController::~InterruptController()>:
c0010ee4:	83 ec 0c             	sub    esp,0xc
c0010ee7:	ba 24 1c 02 c0       	mov    edx,0xc0021c24
c0010eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ef0:	89 10                	mov    DWORD PTR [eax],edx
c0010ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ef6:	83 ec 0c             	sub    esp,0xc
c0010ef9:	50                   	push   eax
c0010efa:	e8 a3 f4 ff ff       	call   c00103a2 <Device::~Device()>
c0010eff:	83 c4 10             	add    esp,0x10
c0010f02:	90                   	nop
c0010f03:	83 c4 0c             	add    esp,0xc
c0010f06:	c3                   	ret    
c0010f07:	90                   	nop

c0010f08 <InterruptController::~InterruptController()>:
c0010f08:	83 ec 0c             	sub    esp,0xc
c0010f0b:	83 ec 0c             	sub    esp,0xc
c0010f0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f12:	e8 cd ff ff ff       	call   c0010ee4 <InterruptController::~InterruptController()>
c0010f17:	83 c4 10             	add    esp,0x10
c0010f1a:	83 ec 08             	sub    esp,0x8
c0010f1d:	68 58 21 00 00       	push   0x2158
c0010f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f26:	e8 ea e0 ff ff       	call   c000f015 <operator delete(void*, unsigned long)>
c0010f2b:	83 c4 10             	add    esp,0x10
c0010f2e:	83 c4 0c             	add    esp,0xc
c0010f31:	c3                   	ret    

c0010f32 <displayDebugInfo(regs*)>:
c0010f32:	55                   	push   ebp
c0010f33:	57                   	push   edi
c0010f34:	56                   	push   esi
c0010f35:	53                   	push   ebx
c0010f36:	83 ec 24             	sub    esp,0x24
c0010f39:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010f3d:	0f 20 c2             	mov    edx,cr0
c0010f40:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010f44:	0f 20 d7             	mov    edi,cr2
c0010f47:	0f 20 de             	mov    esi,cr3
c0010f4a:	0f 20 e5             	mov    ebp,cr4
c0010f4d:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0010f50:	68 22 1a 02 c0       	push   0xc0021a22
c0010f55:	e8 9b e1 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0010f5a:	58                   	pop    eax
c0010f5b:	5a                   	pop    edx
c0010f5c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010f5f:	68 2d 1a 02 c0       	push   0xc0021a2d
c0010f64:	e8 8c e1 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0010f69:	59                   	pop    ecx
c0010f6a:	58                   	pop    eax
c0010f6b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010f6e:	68 38 1a 02 c0       	push   0xc0021a38
c0010f73:	e8 7d e1 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0010f78:	58                   	pop    eax
c0010f79:	5a                   	pop    edx
c0010f7a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010f7d:	68 43 1a 02 c0       	push   0xc0021a43
c0010f82:	e8 6e e1 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0010f87:	59                   	pop    ecx
c0010f88:	58                   	pop    eax
c0010f89:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010f8c:	68 4e 1a 02 c0       	push   0xc0021a4e
c0010f91:	e8 5f e1 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0010f96:	58                   	pop    eax
c0010f97:	5a                   	pop    edx
c0010f98:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0010f9b:	68 59 1a 02 c0       	push   0xc0021a59
c0010fa0:	e8 50 e1 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0010fa5:	59                   	pop    ecx
c0010fa6:	58                   	pop    eax
c0010fa7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010faa:	68 64 1a 02 c0       	push   0xc0021a64
c0010faf:	e8 41 e1 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0010fb4:	58                   	pop    eax
c0010fb5:	5a                   	pop    edx
c0010fb6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010fb9:	68 6f 1a 02 c0       	push   0xc0021a6f
c0010fbe:	e8 32 e1 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0010fc3:	59                   	pop    ecx
c0010fc4:	58                   	pop    eax
c0010fc5:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010fc8:	68 7a 1a 02 c0       	push   0xc0021a7a
c0010fcd:	e8 23 e1 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0010fd2:	58                   	pop    eax
c0010fd3:	5a                   	pop    edx
c0010fd4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010fd7:	68 89 1a 02 c0       	push   0xc0021a89
c0010fdc:	e8 14 e1 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0010fe1:	59                   	pop    ecx
c0010fe2:	58                   	pop    eax
c0010fe3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010fe6:	68 94 1a 02 c0       	push   0xc0021a94
c0010feb:	e8 05 e1 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0010ff0:	58                   	pop    eax
c0010ff1:	5a                   	pop    edx
c0010ff2:	57                   	push   edi
c0010ff3:	68 9f 1a 02 c0       	push   0xc0021a9f
c0010ff8:	e8 f8 e0 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0010ffd:	59                   	pop    ecx
c0010ffe:	58                   	pop    eax
c0010fff:	56                   	push   esi
c0011000:	68 aa 1a 02 c0       	push   0xc0021aaa
c0011005:	e8 eb e0 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001100a:	58                   	pop    eax
c001100b:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0011010:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011016:	e8 1e c3 ff ff       	call   c000d339 <setActiveTerminal(VgaText*)>
c001101b:	58                   	pop    eax
c001101c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001101f:	5a                   	pop    edx
c0011020:	c1 e0 05             	shl    eax,0x5
c0011023:	05 a0 37 02 c0       	add    eax,0xc00237a0
c0011028:	50                   	push   eax
c0011029:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c001102e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011034:	e8 1f c7 ff ff       	call   c000d758 <VgaText::puts(char const*)>
c0011039:	59                   	pop    ecx
c001103a:	58                   	pop    eax
c001103b:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0011040:	68 b5 1a 02 c0       	push   0xc0021ab5
c0011045:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001104b:	e8 08 c7 ff ff       	call   c000d758 <VgaText::puts(char const*)>
c0011050:	58                   	pop    eax
c0011051:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011056:	5a                   	pop    edx
c0011057:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001105a:	83 c0 0c             	add    eax,0xc
c001105d:	50                   	push   eax
c001105e:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0011063:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011069:	e8 ea c6 ff ff       	call   c000d758 <VgaText::puts(char const*)>
c001106e:	59                   	pop    ecx
c001106f:	58                   	pop    eax
c0011070:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0011075:	68 be 1a 02 c0       	push   0xc0021abe
c001107a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011080:	e8 d3 c6 ff ff       	call   c000d758 <VgaText::puts(char const*)>
c0011085:	58                   	pop    eax
c0011086:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c001108b:	5a                   	pop    edx
c001108c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001108f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011095:	e8 e4 c6 ff ff       	call   c000d77e <VgaText::putx(unsigned int)>
c001109a:	59                   	pop    ecx
c001109b:	58                   	pop    eax
c001109c:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c00110a1:	68 c6 1a 02 c0       	push   0xc0021ac6
c00110a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110ac:	e8 a7 c6 ff ff       	call   c000d758 <VgaText::puts(char const*)>
c00110b1:	58                   	pop    eax
c00110b2:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c00110b7:	5a                   	pop    edx
c00110b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00110bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110c1:	e8 b8 c6 ff ff       	call   c000d77e <VgaText::putx(unsigned int)>
c00110c6:	59                   	pop    ecx
c00110c7:	58                   	pop    eax
c00110c8:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c00110cd:	68 ce 1a 02 c0       	push   0xc0021ace
c00110d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110d8:	e8 7b c6 ff ff       	call   c000d758 <VgaText::puts(char const*)>
c00110dd:	58                   	pop    eax
c00110de:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c00110e3:	5a                   	pop    edx
c00110e4:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00110e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110ed:	e8 8c c6 ff ff       	call   c000d77e <VgaText::putx(unsigned int)>
c00110f2:	59                   	pop    ecx
c00110f3:	58                   	pop    eax
c00110f4:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c00110f9:	68 d6 1a 02 c0       	push   0xc0021ad6
c00110fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011104:	e8 4f c6 ff ff       	call   c000d758 <VgaText::puts(char const*)>
c0011109:	58                   	pop    eax
c001110a:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c001110f:	5a                   	pop    edx
c0011110:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0011113:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011119:	e8 60 c6 ff ff       	call   c000d77e <VgaText::putx(unsigned int)>
c001111e:	59                   	pop    ecx
c001111f:	58                   	pop    eax
c0011120:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0011125:	68 de 1a 02 c0       	push   0xc0021ade
c001112a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011130:	e8 23 c6 ff ff       	call   c000d758 <VgaText::puts(char const*)>
c0011135:	58                   	pop    eax
c0011136:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c001113b:	5a                   	pop    edx
c001113c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001113f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011145:	e8 34 c6 ff ff       	call   c000d77e <VgaText::putx(unsigned int)>
c001114a:	59                   	pop    ecx
c001114b:	58                   	pop    eax
c001114c:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0011151:	68 e6 1a 02 c0       	push   0xc0021ae6
c0011156:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001115c:	e8 f7 c5 ff ff       	call   c000d758 <VgaText::puts(char const*)>
c0011161:	58                   	pop    eax
c0011162:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0011167:	5a                   	pop    edx
c0011168:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001116b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011171:	e8 08 c6 ff ff       	call   c000d77e <VgaText::putx(unsigned int)>
c0011176:	59                   	pop    ecx
c0011177:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c001117c:	5b                   	pop    ebx
c001117d:	68 ee 1a 02 c0       	push   0xc0021aee
c0011182:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011188:	e8 cb c5 ff ff       	call   c000d758 <VgaText::puts(char const*)>
c001118d:	58                   	pop    eax
c001118e:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0011193:	5a                   	pop    edx
c0011194:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011198:	52                   	push   edx
c0011199:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001119f:	e8 da c5 ff ff       	call   c000d77e <VgaText::putx(unsigned int)>
c00111a4:	59                   	pop    ecx
c00111a5:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c00111aa:	5b                   	pop    ebx
c00111ab:	68 f7 1a 02 c0       	push   0xc0021af7
c00111b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111b6:	e8 9d c5 ff ff       	call   c000d758 <VgaText::puts(char const*)>
c00111bb:	58                   	pop    eax
c00111bc:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c00111c1:	5a                   	pop    edx
c00111c2:	57                   	push   edi
c00111c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111c9:	e8 b0 c5 ff ff       	call   c000d77e <VgaText::putx(unsigned int)>
c00111ce:	59                   	pop    ecx
c00111cf:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c00111d4:	5b                   	pop    ebx
c00111d5:	68 ff 1a 02 c0       	push   0xc0021aff
c00111da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111e0:	e8 73 c5 ff ff       	call   c000d758 <VgaText::puts(char const*)>
c00111e5:	5f                   	pop    edi
c00111e6:	58                   	pop    eax
c00111e7:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c00111ec:	56                   	push   esi
c00111ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111f3:	e8 86 c5 ff ff       	call   c000d77e <VgaText::putx(unsigned int)>
c00111f8:	58                   	pop    eax
c00111f9:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c00111fe:	5a                   	pop    edx
c00111ff:	68 07 1b 02 c0       	push   0xc0021b07
c0011204:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001120a:	e8 49 c5 ff ff       	call   c000d758 <VgaText::puts(char const*)>
c001120f:	59                   	pop    ecx
c0011210:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0011215:	5b                   	pop    ebx
c0011216:	55                   	push   ebp
c0011217:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001121d:	e8 5c c5 ff ff       	call   c000d77e <VgaText::putx(unsigned int)>
c0011222:	5e                   	pop    esi
c0011223:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0011228:	5f                   	pop    edi
c0011229:	68 0f 1b 02 c0       	push   0xc0021b0f
c001122e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011234:	e8 1f c5 ff ff       	call   c000d758 <VgaText::puts(char const*)>
c0011239:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c001123e:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011244:	e8 7a e5 00 00       	call   c001f7c3 <CPU::readDR0()>
c0011249:	5d                   	pop    ebp
c001124a:	5a                   	pop    edx
c001124b:	50                   	push   eax
c001124c:	53                   	push   ebx
c001124d:	e8 2c c5 ff ff       	call   c000d77e <VgaText::putx(unsigned int)>
c0011252:	59                   	pop    ecx
c0011253:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0011258:	5b                   	pop    ebx
c0011259:	68 18 1b 02 c0       	push   0xc0021b18
c001125e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011264:	e8 ef c4 ff ff       	call   c000d758 <VgaText::puts(char const*)>
c0011269:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c001126e:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011274:	e8 5c e5 00 00       	call   c001f7d5 <CPU::readDR1()>
c0011279:	5e                   	pop    esi
c001127a:	5f                   	pop    edi
c001127b:	50                   	push   eax
c001127c:	53                   	push   ebx
c001127d:	e8 fc c4 ff ff       	call   c000d77e <VgaText::putx(unsigned int)>
c0011282:	5d                   	pop    ebp
c0011283:	58                   	pop    eax
c0011284:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0011289:	68 20 1b 02 c0       	push   0xc0021b20
c001128e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011294:	e8 bf c4 ff ff       	call   c000d758 <VgaText::puts(char const*)>
c0011299:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c001129e:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00112a4:	e8 3e e5 00 00       	call   c001f7e7 <CPU::readDR2()>
c00112a9:	5a                   	pop    edx
c00112aa:	59                   	pop    ecx
c00112ab:	50                   	push   eax
c00112ac:	53                   	push   ebx
c00112ad:	e8 cc c4 ff ff       	call   c000d77e <VgaText::putx(unsigned int)>
c00112b2:	5b                   	pop    ebx
c00112b3:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c00112b8:	5e                   	pop    esi
c00112b9:	68 28 1b 02 c0       	push   0xc0021b28
c00112be:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112c4:	e8 8f c4 ff ff       	call   c000d758 <VgaText::puts(char const*)>
c00112c9:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c00112ce:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00112d4:	e8 20 e5 00 00       	call   c001f7f9 <CPU::readDR3()>
c00112d9:	5f                   	pop    edi
c00112da:	5d                   	pop    ebp
c00112db:	50                   	push   eax
c00112dc:	53                   	push   ebx
c00112dd:	e8 9c c4 ff ff       	call   c000d77e <VgaText::putx(unsigned int)>
c00112e2:	58                   	pop    eax
c00112e3:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c00112e8:	5a                   	pop    edx
c00112e9:	68 30 1b 02 c0       	push   0xc0021b30
c00112ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112f4:	e8 5f c4 ff ff       	call   c000d758 <VgaText::puts(char const*)>
c00112f9:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c00112fe:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011304:	e8 02 e5 00 00       	call   c001f80b <CPU::readDR6()>
c0011309:	59                   	pop    ecx
c001130a:	5e                   	pop    esi
c001130b:	50                   	push   eax
c001130c:	53                   	push   ebx
c001130d:	e8 6c c4 ff ff       	call   c000d77e <VgaText::putx(unsigned int)>
c0011312:	5f                   	pop    edi
c0011313:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0011318:	5d                   	pop    ebp
c0011319:	68 38 1b 02 c0       	push   0xc0021b38
c001131e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011324:	e8 2f c4 ff ff       	call   c000d758 <VgaText::puts(char const*)>
c0011329:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c001132e:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011334:	e8 e4 e4 00 00       	call   c001f81d <CPU::readDR7()>
c0011339:	5a                   	pop    edx
c001133a:	59                   	pop    ecx
c001133b:	50                   	push   eax
c001133c:	53                   	push   ebx
c001133d:	e8 3c c4 ff ff       	call   c000d77e <VgaText::putx(unsigned int)>
c0011342:	fa                   	cli    
c0011343:	f4                   	hlt    
c0011344:	83 c4 10             	add    esp,0x10
c0011347:	eb fe                	jmp    c0011347 <displayDebugInfo(regs*)+0x415>

c0011349 <x87EmulHandler(regs*, void*)>:
c0011349:	53                   	push   ebx
c001134a:	83 ec 08             	sub    esp,0x8
c001134d:	a1 74 44 02 c0       	mov    eax,ds:0xc0024474
c0011352:	85 c0                	test   eax,eax
c0011354:	74 15                	je     c001136b <x87EmulHandler(regs*, void*)+0x22>
c0011356:	83 ec 0c             	sub    esp,0xc
c0011359:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001135d:	ff d0                	call   eax
c001135f:	83 c4 10             	add    esp,0x10
c0011362:	84 c0                	test   al,al
c0011364:	74 2f                	je     c0011395 <x87EmulHandler(regs*, void*)+0x4c>
c0011366:	83 c4 08             	add    esp,0x8
c0011369:	5b                   	pop    ebx
c001136a:	c3                   	ret    
c001136b:	83 ec 08             	sub    esp,0x8
c001136e:	8b 1d e8 42 02 c0    	mov    ebx,DWORD PTR ds:0xc00242e8
c0011374:	6a 01                	push   0x1
c0011376:	68 40 1b 02 c0       	push   0xc0021b40
c001137b:	e8 8d 6e 00 00       	call   c001820d <Thr::loadDLL(char const*, bool)>
c0011380:	5a                   	pop    edx
c0011381:	59                   	pop    ecx
c0011382:	53                   	push   ebx
c0011383:	50                   	push   eax
c0011384:	e8 4a 70 00 00       	call   c00183d3 <Thr::executeDLL(unsigned long, void*)>
c0011389:	a1 74 44 02 c0       	mov    eax,ds:0xc0024474
c001138e:	83 c4 10             	add    esp,0x10
c0011391:	85 c0                	test   eax,eax
c0011393:	75 c1                	jne    c0011356 <x87EmulHandler(regs*, void*)+0xd>
c0011395:	83 ec 0c             	sub    esp,0xc
c0011398:	68 5d 1b 02 c0       	push   0xc0021b5d
c001139d:	e8 53 dd ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c00113a2:	58                   	pop    eax
c00113a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113a7:	e8 86 fb ff ff       	call   c0010f32 <displayDebugInfo(regs*)>

c00113ac <gpFault(regs*, void*)>:
c00113ac:	53                   	push   ebx
c00113ad:	83 ec 14             	sub    esp,0x14
c00113b0:	c7 05 70 44 02 c0 51 96 01 c0 	mov    DWORD PTR ds:0xc0024470,0xc0019651
c00113ba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00113be:	53                   	push   ebx
c00113bf:	e8 8d 82 00 00       	call   c0019651 <Vm::faultHandler(regs*)>
c00113c4:	83 c4 10             	add    esp,0x10
c00113c7:	84 c0                	test   al,al
c00113c9:	74 05                	je     c00113d0 <gpFault(regs*, void*)+0x24>
c00113cb:	83 c4 08             	add    esp,0x8
c00113ce:	5b                   	pop    ebx
c00113cf:	c3                   	ret    
c00113d0:	83 ec 0c             	sub    esp,0xc
c00113d3:	68 5d 1b 02 c0       	push   0xc0021b5d
c00113d8:	e8 18 dd ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c00113dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00113e0:	e8 4d fb ff ff       	call   c0010f32 <displayDebugInfo(regs*)>

c00113e5 <pgFault(regs*, void*)>:
c00113e5:	83 ec 18             	sub    esp,0x18
c00113e8:	68 78 1b 02 c0       	push   0xc0021b78
c00113ed:	e8 03 dd ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c00113f2:	58                   	pop    eax
c00113f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113f7:	e8 36 fb ff ff       	call   c0010f32 <displayDebugInfo(regs*)>

c00113fc <otherISRHandler(regs*, void*)>:
c00113fc:	53                   	push   ebx
c00113fd:	83 ec 0c             	sub    esp,0xc
c0011400:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011404:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011407:	50                   	push   eax
c0011408:	50                   	push   eax
c0011409:	68 85 1b 02 c0       	push   0xc0021b85
c001140e:	e8 e2 dc ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0011413:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011416:	e8 17 fb ff ff       	call   c0010f32 <displayDebugInfo(regs*)>

c001141b <opcodeFault(regs*, void*)>:
c001141b:	55                   	push   ebp
c001141c:	89 e5                	mov    ebp,esp
c001141e:	56                   	push   esi
c001141f:	53                   	push   ebx
c0011420:	83 ec 40             	sub    esp,0x40
c0011423:	e8 f2 32 00 00       	call   c001471a <thisCPU()>
c0011428:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001142e:	84 c0                	test   al,al
c0011430:	74 24                	je     c0011456 <opcodeFault(regs*, void*)+0x3b>
c0011432:	83 ec 0c             	sub    esp,0xc
c0011435:	68 a4 1b 02 c0       	push   0xc0021ba4
c001143a:	e8 b6 dc ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001143f:	83 c4 10             	add    esp,0x10
c0011442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011445:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011448:	8d 50 19             	lea    edx,[eax+0x19]
c001144b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001144e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011451:	e9 77 05 00 00       	jmp    c00119cd <opcodeFault(regs*, void*)+0x5b2>
c0011456:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011459:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001145c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001145f:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0011463:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0011467:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001146a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001146d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0011470:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011473:	8a 00                	mov    al,BYTE PTR [eax]
c0011475:	3c f0                	cmp    al,0xf0
c0011477:	75 17                	jne    c0011490 <opcodeFault(regs*, void*)+0x75>
c0011479:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001147c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001147f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011482:	8d 50 01             	lea    edx,[eax+0x1]
c0011485:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011488:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001148b:	e9 da 00 00 00       	jmp    c001156a <opcodeFault(regs*, void*)+0x14f>
c0011490:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011493:	8a 00                	mov    al,BYTE PTR [eax]
c0011495:	3c f2                	cmp    al,0xf2
c0011497:	74 09                	je     c00114a2 <opcodeFault(regs*, void*)+0x87>
c0011499:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001149c:	8a 00                	mov    al,BYTE PTR [eax]
c001149e:	3c f3                	cmp    al,0xf3
c00114a0:	75 1b                	jne    c00114bd <opcodeFault(regs*, void*)+0xa2>
c00114a2:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00114a6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00114a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ac:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114af:	8d 50 01             	lea    edx,[eax+0x1]
c00114b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114b5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00114b8:	e9 ad 00 00 00       	jmp    c001156a <opcodeFault(regs*, void*)+0x14f>
c00114bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00114c0:	8a 00                	mov    al,BYTE PTR [eax]
c00114c2:	3c 66                	cmp    al,0x66
c00114c4:	75 1f                	jne    c00114e5 <opcodeFault(regs*, void*)+0xca>
c00114c6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00114ca:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00114ce:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00114d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114d7:	8d 50 01             	lea    edx,[eax+0x1]
c00114da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114dd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00114e0:	e9 85 00 00 00       	jmp    c001156a <opcodeFault(regs*, void*)+0x14f>
c00114e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00114e8:	8a 00                	mov    al,BYTE PTR [eax]
c00114ea:	3c 67                	cmp    al,0x67
c00114ec:	75 18                	jne    c0011506 <opcodeFault(regs*, void*)+0xeb>
c00114ee:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00114f2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00114f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114fb:	8d 50 01             	lea    edx,[eax+0x1]
c00114fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011501:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011504:	eb 64                	jmp    c001156a <opcodeFault(regs*, void*)+0x14f>
c0011506:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011509:	8a 00                	mov    al,BYTE PTR [eax]
c001150b:	3c 2e                	cmp    al,0x2e
c001150d:	74 09                	je     c0011518 <opcodeFault(regs*, void*)+0xfd>
c001150f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011512:	8a 00                	mov    al,BYTE PTR [eax]
c0011514:	3c 3e                	cmp    al,0x3e
c0011516:	75 18                	jne    c0011530 <opcodeFault(regs*, void*)+0x115>
c0011518:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001151c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001151f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011522:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011525:	8d 50 01             	lea    edx,[eax+0x1]
c0011528:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001152e:	eb 3a                	jmp    c001156a <opcodeFault(regs*, void*)+0x14f>
c0011530:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011533:	8a 00                	mov    al,BYTE PTR [eax]
c0011535:	3c 36                	cmp    al,0x36
c0011537:	74 1b                	je     c0011554 <opcodeFault(regs*, void*)+0x139>
c0011539:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001153c:	8a 00                	mov    al,BYTE PTR [eax]
c001153e:	3c 26                	cmp    al,0x26
c0011540:	74 12                	je     c0011554 <opcodeFault(regs*, void*)+0x139>
c0011542:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011545:	8a 00                	mov    al,BYTE PTR [eax]
c0011547:	3c 64                	cmp    al,0x64
c0011549:	74 09                	je     c0011554 <opcodeFault(regs*, void*)+0x139>
c001154b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001154e:	8a 00                	mov    al,BYTE PTR [eax]
c0011550:	3c 65                	cmp    al,0x65
c0011552:	75 16                	jne    c001156a <opcodeFault(regs*, void*)+0x14f>
c0011554:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011558:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001155b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001155e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011561:	8d 50 01             	lea    edx,[eax+0x1]
c0011564:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011567:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001156a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001156d:	8a 00                	mov    al,BYTE PTR [eax]
c001156f:	3c 0f                	cmp    al,0xf
c0011571:	0f 85 ad 00 00 00    	jne    c0011624 <opcodeFault(regs*, void*)+0x209>
c0011577:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001157a:	40                   	inc    eax
c001157b:	8a 00                	mov    al,BYTE PTR [eax]
c001157d:	3c c2                	cmp    al,0xc2
c001157f:	74 0e                	je     c001158f <opcodeFault(regs*, void*)+0x174>
c0011581:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011584:	40                   	inc    eax
c0011585:	8a 00                	mov    al,BYTE PTR [eax]
c0011587:	3c c3                	cmp    al,0xc3
c0011589:	0f 85 95 00 00 00    	jne    c0011624 <opcodeFault(regs*, void*)+0x209>
c001158f:	83 ec 0c             	sub    esp,0xc
c0011592:	68 c7 1b 02 c0       	push   0xc0021bc7
c0011597:	e8 59 db ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001159c:	83 c4 10             	add    esp,0x10
c001159f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115a5:	8d 50 01             	lea    edx,[eax+0x1]
c00115a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ab:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115ae:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115b4:	8a 00                	mov    al,BYTE PTR [eax]
c00115b6:	8d 50 fe             	lea    edx,[eax-0x2]
c00115b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115bc:	88 10                	mov    BYTE PTR [eax],dl
c00115be:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00115c1:	50                   	push   eax
c00115c2:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00115c5:	50                   	push   eax
c00115c6:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00115c9:	50                   	push   eax
c00115ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00115cd:	e8 d0 40 00 00       	call   c00156a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00115d2:	83 c4 10             	add    esp,0x10
c00115d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115db:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00115de:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00115e1:	01 d0                	add    eax,edx
c00115e3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00115e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115ec:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00115ef:	48                   	dec    eax
c00115f0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00115f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115f6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00115f9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ff:	83 ec 04             	sub    esp,0x4
c0011602:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0011605:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0011608:	50                   	push   eax
c0011609:	e8 42 eb fe ff       	call   c0000150 <voodooXADD>
c001160e:	83 c4 10             	add    esp,0x10
c0011611:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0011614:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0011617:	01 c2                	add    edx,eax
c0011619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001161c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001161f:	e9 a9 03 00 00       	jmp    c00119cd <opcodeFault(regs*, void*)+0x5b2>
c0011624:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011627:	8a 00                	mov    al,BYTE PTR [eax]
c0011629:	3c 0f                	cmp    al,0xf
c001162b:	0f 85 8b 01 00 00    	jne    c00117bc <opcodeFault(regs*, void*)+0x3a1>
c0011631:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011634:	40                   	inc    eax
c0011635:	8a 00                	mov    al,BYTE PTR [eax]
c0011637:	3c c7                	cmp    al,0xc7
c0011639:	0f 86 7d 01 00 00    	jbe    c00117bc <opcodeFault(regs*, void*)+0x3a1>
c001163f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011642:	40                   	inc    eax
c0011643:	8a 00                	mov    al,BYTE PTR [eax]
c0011645:	3c cf                	cmp    al,0xcf
c0011647:	0f 87 6f 01 00 00    	ja     c00117bc <opcodeFault(regs*, void*)+0x3a1>
c001164d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011650:	40                   	inc    eax
c0011651:	8a 00                	mov    al,BYTE PTR [eax]
c0011653:	83 c0 38             	add    eax,0x38
c0011656:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0011659:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001165d:	75 0b                	jne    c001166a <opcodeFault(regs*, void*)+0x24f>
c001165f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011662:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0011665:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011668:	eb 75                	jmp    c00116df <opcodeFault(regs*, void*)+0x2c4>
c001166a:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001166e:	75 0b                	jne    c001167b <opcodeFault(regs*, void*)+0x260>
c0011670:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011673:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0011676:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011679:	eb 64                	jmp    c00116df <opcodeFault(regs*, void*)+0x2c4>
c001167b:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001167f:	75 0b                	jne    c001168c <opcodeFault(regs*, void*)+0x271>
c0011681:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011684:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011687:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001168a:	eb 53                	jmp    c00116df <opcodeFault(regs*, void*)+0x2c4>
c001168c:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0011690:	75 0b                	jne    c001169d <opcodeFault(regs*, void*)+0x282>
c0011692:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011695:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011698:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001169b:	eb 42                	jmp    c00116df <opcodeFault(regs*, void*)+0x2c4>
c001169d:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00116a1:	75 0b                	jne    c00116ae <opcodeFault(regs*, void*)+0x293>
c00116a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116a6:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00116a9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116ac:	eb 31                	jmp    c00116df <opcodeFault(regs*, void*)+0x2c4>
c00116ae:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00116b2:	75 0b                	jne    c00116bf <opcodeFault(regs*, void*)+0x2a4>
c00116b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116b7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00116ba:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116bd:	eb 20                	jmp    c00116df <opcodeFault(regs*, void*)+0x2c4>
c00116bf:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00116c3:	75 0b                	jne    c00116d0 <opcodeFault(regs*, void*)+0x2b5>
c00116c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116c8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00116cb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116ce:	eb 0f                	jmp    c00116df <opcodeFault(regs*, void*)+0x2c4>
c00116d0:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00116d4:	75 09                	jne    c00116df <opcodeFault(regs*, void*)+0x2c4>
c00116d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116d9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00116dc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116df:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00116e3:	74 10                	je     c00116f5 <opcodeFault(regs*, void*)+0x2da>
c00116e5:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00116ec:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00116f3:	eb 2d                	jmp    c0011722 <opcodeFault(regs*, void*)+0x307>
c00116f5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00116f8:	c1 e0 18             	shl    eax,0x18
c00116fb:	89 c2                	mov    edx,eax
c00116fd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011700:	c1 e0 08             	shl    eax,0x8
c0011703:	25 00 00 ff 00       	and    eax,0xff0000
c0011708:	09 c2                	or     edx,eax
c001170a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001170d:	c1 e8 08             	shr    eax,0x8
c0011710:	25 00 ff 00 00       	and    eax,0xff00
c0011715:	09 c2                	or     edx,eax
c0011717:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001171a:	c1 e8 18             	shr    eax,0x18
c001171d:	09 d0                	or     eax,edx
c001171f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011722:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0011726:	75 0b                	jne    c0011733 <opcodeFault(regs*, void*)+0x318>
c0011728:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001172b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001172e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011731:	eb 75                	jmp    c00117a8 <opcodeFault(regs*, void*)+0x38d>
c0011733:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0011737:	75 0b                	jne    c0011744 <opcodeFault(regs*, void*)+0x329>
c0011739:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001173c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001173f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0011742:	eb 64                	jmp    c00117a8 <opcodeFault(regs*, void*)+0x38d>
c0011744:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0011748:	75 0b                	jne    c0011755 <opcodeFault(regs*, void*)+0x33a>
c001174a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001174d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011750:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0011753:	eb 53                	jmp    c00117a8 <opcodeFault(regs*, void*)+0x38d>
c0011755:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0011759:	75 0b                	jne    c0011766 <opcodeFault(regs*, void*)+0x34b>
c001175b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001175e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011761:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011764:	eb 42                	jmp    c00117a8 <opcodeFault(regs*, void*)+0x38d>
c0011766:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001176a:	75 0b                	jne    c0011777 <opcodeFault(regs*, void*)+0x35c>
c001176c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001176f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011772:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0011775:	eb 31                	jmp    c00117a8 <opcodeFault(regs*, void*)+0x38d>
c0011777:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001177b:	75 0b                	jne    c0011788 <opcodeFault(regs*, void*)+0x36d>
c001177d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011780:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011783:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011786:	eb 20                	jmp    c00117a8 <opcodeFault(regs*, void*)+0x38d>
c0011788:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001178c:	75 0b                	jne    c0011799 <opcodeFault(regs*, void*)+0x37e>
c001178e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011791:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011794:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0011797:	eb 0f                	jmp    c00117a8 <opcodeFault(regs*, void*)+0x38d>
c0011799:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001179d:	75 09                	jne    c00117a8 <opcodeFault(regs*, void*)+0x38d>
c001179f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117a2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117a5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00117a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ab:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00117ae:	8d 50 02             	lea    edx,[eax+0x2]
c00117b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117b4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00117b7:	e9 11 02 00 00       	jmp    c00119cd <opcodeFault(regs*, void*)+0x5b2>
c00117bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00117bf:	8a 00                	mov    al,BYTE PTR [eax]
c00117c1:	3c 0f                	cmp    al,0xf
c00117c3:	0f 85 76 01 00 00    	jne    c001193f <opcodeFault(regs*, void*)+0x524>
c00117c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00117cc:	40                   	inc    eax
c00117cd:	8a 00                	mov    al,BYTE PTR [eax]
c00117cf:	3c c7                	cmp    al,0xc7
c00117d1:	0f 85 68 01 00 00    	jne    c001193f <opcodeFault(regs*, void*)+0x524>
c00117d7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00117da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117dd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00117e0:	8d 50 01             	lea    edx,[eax+0x1]
c00117e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117e6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00117e9:	8d 45 ba             	lea    eax,[ebp-0x46]
c00117ec:	50                   	push   eax
c00117ed:	8d 45 bb             	lea    eax,[ebp-0x45]
c00117f0:	50                   	push   eax
c00117f1:	8d 45 bc             	lea    eax,[ebp-0x44]
c00117f4:	50                   	push   eax
c00117f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00117f8:	e8 a5 3e 00 00       	call   c00156a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00117fd:	83 c4 10             	add    esp,0x10
c0011800:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0011803:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0011806:	83 f0 01             	xor    eax,0x1
c0011809:	84 c0                	test   al,al
c001180b:	0f 84 2e 01 00 00    	je     c001193f <opcodeFault(regs*, void*)+0x524>
c0011811:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0011814:	3c 01                	cmp    al,0x1
c0011816:	0f 85 23 01 00 00    	jne    c001193f <opcodeFault(regs*, void*)+0x524>
c001181c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001181f:	83 f0 01             	xor    eax,0x1
c0011822:	84 c0                	test   al,al
c0011824:	0f 84 15 01 00 00    	je     c001193f <opcodeFault(regs*, void*)+0x524>
c001182a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001182d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011830:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0011833:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001183a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001183d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0011840:	89 c2                	mov    edx,eax
c0011842:	b8 00 00 00 00       	mov    eax,0x0
c0011847:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001184a:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001184d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011850:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0011853:	ba 00 00 00 00       	mov    edx,0x0
c0011858:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001185b:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001185e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011861:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0011864:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0011867:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001186e:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0011871:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0011874:	89 c2                	mov    edx,eax
c0011876:	b8 00 00 00 00       	mov    eax,0x0
c001187b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001187e:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0011881:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011884:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011887:	ba 00 00 00 00       	mov    edx,0x0
c001188c:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001188f:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0011892:	e8 47 6f 00 00       	call   c00187de <lockScheduler()>
c0011897:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001189a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001189d:	8b 00                	mov    eax,DWORD PTR [eax]
c001189f:	89 c1                	mov    ecx,eax
c00118a1:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00118a4:	89 cb                	mov    ebx,ecx
c00118a6:	89 d0                	mov    eax,edx
c00118a8:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00118ab:	89 c6                	mov    esi,eax
c00118ad:	89 f0                	mov    eax,esi
c00118af:	09 d8                	or     eax,ebx
c00118b1:	85 c0                	test   eax,eax
c00118b3:	75 21                	jne    c00118d6 <opcodeFault(regs*, void*)+0x4bb>
c00118b5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00118b8:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00118bb:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00118be:	89 01                	mov    DWORD PTR [ecx],eax
c00118c0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00118c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118c6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118c9:	83 c8 40             	or     eax,0x40
c00118cc:	89 c2                	mov    edx,eax
c00118ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118d1:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00118d4:	eb 3e                	jmp    c0011914 <opcodeFault(regs*, void*)+0x4f9>
c00118d6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00118d9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00118dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00118de:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00118e1:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00118e4:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00118e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118ea:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00118ed:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00118f0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00118f3:	89 d0                	mov    eax,edx
c00118f5:	31 d2                	xor    edx,edx
c00118f7:	89 c3                	mov    ebx,eax
c00118f9:	89 d6                	mov    esi,edx
c00118fb:	89 da                	mov    edx,ebx
c00118fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011900:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0011903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011906:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011909:	83 e0 bf             	and    eax,0xffffffbf
c001190c:	89 c2                	mov    edx,eax
c001190e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011911:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0011914:	e8 c7 6e 00 00       	call   c00187e0 <unlockScheduler()>
c0011919:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001191c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001191f:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0011922:	01 c2                	add    edx,eax
c0011924:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011927:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001192a:	83 ec 0c             	sub    esp,0xc
c001192d:	68 d6 1b 02 c0       	push   0xc0021bd6
c0011932:	e8 be d7 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0011937:	83 c4 10             	add    esp,0x10
c001193a:	e9 8e 00 00 00       	jmp    c00119cd <opcodeFault(regs*, void*)+0x5b2>
c001193f:	83 ec 0c             	sub    esp,0xc
c0011942:	68 e9 1b 02 c0       	push   0xc0021be9
c0011947:	e8 a9 d7 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001194c:	83 c4 10             	add    esp,0x10
c001194f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011952:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011955:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011958:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001195b:	c1 e0 04             	shl    eax,0x4
c001195e:	01 d0                	add    eax,edx
c0011960:	83 c0 03             	add    eax,0x3
c0011963:	8a 00                	mov    al,BYTE PTR [eax]
c0011965:	0f b6 d8             	movzx  ebx,al
c0011968:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001196b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001196e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011971:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011974:	c1 e0 04             	shl    eax,0x4
c0011977:	01 d0                	add    eax,edx
c0011979:	83 c0 02             	add    eax,0x2
c001197c:	8a 00                	mov    al,BYTE PTR [eax]
c001197e:	0f b6 c8             	movzx  ecx,al
c0011981:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011984:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011987:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001198a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001198d:	c1 e0 04             	shl    eax,0x4
c0011990:	01 d0                	add    eax,edx
c0011992:	40                   	inc    eax
c0011993:	8a 00                	mov    al,BYTE PTR [eax]
c0011995:	0f b6 d0             	movzx  edx,al
c0011998:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001199b:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001199e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119a1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119a4:	c1 e0 04             	shl    eax,0x4
c00119a7:	01 f0                	add    eax,esi
c00119a9:	8a 00                	mov    al,BYTE PTR [eax]
c00119ab:	0f b6 c0             	movzx  eax,al
c00119ae:	83 ec 0c             	sub    esp,0xc
c00119b1:	53                   	push   ebx
c00119b2:	51                   	push   ecx
c00119b3:	52                   	push   edx
c00119b4:	50                   	push   eax
c00119b5:	68 fc 1b 02 c0       	push   0xc0021bfc
c00119ba:	e8 36 d7 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c00119bf:	83 c4 20             	add    esp,0x20
c00119c2:	83 ec 0c             	sub    esp,0xc
c00119c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00119c8:	e8 65 f5 ff ff       	call   c0010f32 <displayDebugInfo(regs*)>
c00119cd:	8d 65 f8             	lea    esp,[ebp-0x8]
c00119d0:	5b                   	pop    ebx
c00119d1:	5e                   	pop    esi
c00119d2:	5d                   	pop    ebp
c00119d3:	c3                   	ret    

c00119d4 <displayProgramFault(char const*)>:
c00119d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119d9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119dc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00119e2:	85 c0                	test   eax,eax
c00119e4:	74 15                	je     c00119fb <displayProgramFault(char const*)+0x27>
c00119e6:	83 ec 0c             	sub    esp,0xc
c00119e9:	6a 04                	push   0x4
c00119eb:	6a 0f                	push   0xf
c00119ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00119f1:	50                   	push   eax
c00119f2:	e8 23 ba ff ff       	call   c000d41a <VgaText::puts(char const*, VgaColour, VgaColour)>
c00119f7:	83 c4 1c             	add    esp,0x1c
c00119fa:	c3                   	ret    
c00119fb:	c3                   	ret    

c00119fc <setupInterruptController()>:
c00119fc:	55                   	push   ebp
c00119fd:	89 e5                	mov    ebp,esp
c00119ff:	53                   	push   ebx
c0011a00:	83 ec 14             	sub    esp,0x14
c0011a03:	e8 0f 2d 00 00       	call   c0014717 <getCPUNumber()>
c0011a08:	85 c0                	test   eax,eax
c0011a0a:	0f 95 c0             	setne  al
c0011a0d:	84 c0                	test   al,al
c0011a0f:	74 56                	je     c0011a67 <setupInterruptController()+0x6b>
c0011a11:	83 ec 0c             	sub    esp,0xc
c0011a14:	68 58 21 00 00       	push   0x2158
c0011a19:	e8 e8 d5 ff ff       	call   c000f006 <operator new(unsigned long)>
c0011a1e:	83 c4 10             	add    esp,0x10
c0011a21:	89 c3                	mov    ebx,eax
c0011a23:	83 ec 0c             	sub    esp,0xc
c0011a26:	53                   	push   ebx
c0011a27:	e8 60 c7 00 00       	call   c001e18c <APIC::APIC()>
c0011a2c:	83 c4 10             	add    esp,0x10
c0011a2f:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0011a32:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0011a35:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011a38:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a3a:	83 c0 08             	add    eax,0x8
c0011a3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a3f:	6a 00                	push   0x0
c0011a41:	6a 00                	push   0x0
c0011a43:	6a 00                	push   0x0
c0011a45:	52                   	push   edx
c0011a46:	ff d0                	call   eax
c0011a48:	83 c4 10             	add    esp,0x10
c0011a4b:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c0011a50:	83 ec 08             	sub    esp,0x8
c0011a53:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011a56:	50                   	push   eax
c0011a57:	e8 a4 ea ff ff       	call   c0010500 <Device::addChild(Device*)>
c0011a5c:	83 c4 10             	add    esp,0x10
c0011a5f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011a62:	e9 48 03 00 00       	jmp    c0011daf <setupInterruptController()+0x3b3>
c0011a67:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c0011a6c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011a72:	83 e0 01             	and    eax,0x1
c0011a75:	84 c0                	test   al,al
c0011a77:	0f 95 c0             	setne  al
c0011a7a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0011a7d:	83 ec 0c             	sub    esp,0xc
c0011a80:	68 58 21 00 00       	push   0x2158
c0011a85:	e8 7c d5 ff ff       	call   c000f006 <operator new(unsigned long)>
c0011a8a:	83 c4 10             	add    esp,0x10
c0011a8d:	89 c3                	mov    ebx,eax
c0011a8f:	83 ec 0c             	sub    esp,0xc
c0011a92:	53                   	push   ebx
c0011a93:	e8 b6 cb 00 00       	call   c001e64e <PIC::PIC()>
c0011a98:	83 c4 10             	add    esp,0x10
c0011a9b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011a9e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011aa1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011aa4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011aa6:	83 c0 08             	add    eax,0x8
c0011aa9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011aab:	6a 00                	push   0x0
c0011aad:	6a 00                	push   0x0
c0011aaf:	6a 00                	push   0x0
c0011ab1:	52                   	push   edx
c0011ab2:	ff d0                	call   eax
c0011ab4:	83 c4 10             	add    esp,0x10
c0011ab7:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0011abb:	74 6e                	je     c0011b2b <setupInterruptController()+0x12f>
c0011abd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011ac0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ac3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ac5:	83 c0 0c             	add    eax,0xc
c0011ac8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011aca:	6a 00                	push   0x0
c0011acc:	6a 00                	push   0x0
c0011ace:	6a 00                	push   0x0
c0011ad0:	52                   	push   edx
c0011ad1:	ff d0                	call   eax
c0011ad3:	83 c4 10             	add    esp,0x10
c0011ad6:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011ada:	74 15                	je     c0011af1 <setupInterruptController()+0xf5>
c0011adc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011adf:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ae1:	83 c0 04             	add    eax,0x4
c0011ae4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ae6:	83 ec 0c             	sub    esp,0xc
c0011ae9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011aec:	ff d0                	call   eax
c0011aee:	83 c4 10             	add    esp,0x10
c0011af1:	83 ec 0c             	sub    esp,0xc
c0011af4:	68 58 21 00 00       	push   0x2158
c0011af9:	e8 08 d5 ff ff       	call   c000f006 <operator new(unsigned long)>
c0011afe:	83 c4 10             	add    esp,0x10
c0011b01:	89 c3                	mov    ebx,eax
c0011b03:	83 ec 0c             	sub    esp,0xc
c0011b06:	53                   	push   ebx
c0011b07:	e8 80 c6 00 00       	call   c001e18c <APIC::APIC()>
c0011b0c:	83 c4 10             	add    esp,0x10
c0011b0f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011b12:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011b15:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b18:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b1a:	83 c0 08             	add    eax,0x8
c0011b1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b1f:	6a 00                	push   0x0
c0011b21:	6a 00                	push   0x0
c0011b23:	6a 00                	push   0x0
c0011b25:	52                   	push   edx
c0011b26:	ff d0                	call   eax
c0011b28:	83 c4 10             	add    esp,0x10
c0011b2b:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c0011b30:	83 ec 08             	sub    esp,0x8
c0011b33:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011b36:	50                   	push   eax
c0011b37:	e8 c4 e9 ff ff       	call   c0010500 <Device::addChild(Device*)>
c0011b3c:	83 c4 10             	add    esp,0x10
c0011b3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b42:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b44:	83 c0 24             	add    eax,0x24
c0011b47:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b49:	6a 00                	push   0x0
c0011b4b:	68 fc 13 01 c0       	push   0xc00113fc
c0011b50:	6a 00                	push   0x0
c0011b52:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011b55:	ff d0                	call   eax
c0011b57:	83 c4 10             	add    esp,0x10
c0011b5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b5f:	83 c0 24             	add    eax,0x24
c0011b62:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b64:	6a 00                	push   0x0
c0011b66:	68 fc 13 01 c0       	push   0xc00113fc
c0011b6b:	6a 01                	push   0x1
c0011b6d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011b70:	ff d0                	call   eax
c0011b72:	83 c4 10             	add    esp,0x10
c0011b75:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b78:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b7a:	83 c0 24             	add    eax,0x24
c0011b7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b7f:	6a 00                	push   0x0
c0011b81:	68 95 0d 01 c0       	push   0xc0010d95
c0011b86:	6a 02                	push   0x2
c0011b88:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011b8b:	ff d0                	call   eax
c0011b8d:	83 c4 10             	add    esp,0x10
c0011b90:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b93:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b95:	83 c0 24             	add    eax,0x24
c0011b98:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b9a:	6a 00                	push   0x0
c0011b9c:	68 fc 13 01 c0       	push   0xc00113fc
c0011ba1:	6a 03                	push   0x3
c0011ba3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ba6:	ff d0                	call   eax
c0011ba8:	83 c4 10             	add    esp,0x10
c0011bab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bb0:	83 c0 24             	add    eax,0x24
c0011bb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bb5:	6a 00                	push   0x0
c0011bb7:	68 fc 13 01 c0       	push   0xc00113fc
c0011bbc:	6a 04                	push   0x4
c0011bbe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011bc1:	ff d0                	call   eax
c0011bc3:	83 c4 10             	add    esp,0x10
c0011bc6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bcb:	83 c0 24             	add    eax,0x24
c0011bce:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bd0:	6a 00                	push   0x0
c0011bd2:	68 fc 13 01 c0       	push   0xc00113fc
c0011bd7:	6a 05                	push   0x5
c0011bd9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011bdc:	ff d0                	call   eax
c0011bde:	83 c4 10             	add    esp,0x10
c0011be1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011be4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011be6:	83 c0 24             	add    eax,0x24
c0011be9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011beb:	6a 00                	push   0x0
c0011bed:	68 1b 14 01 c0       	push   0xc001141b
c0011bf2:	6a 06                	push   0x6
c0011bf4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011bf7:	ff d0                	call   eax
c0011bf9:	83 c4 10             	add    esp,0x10
c0011bfc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bff:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c01:	83 c0 24             	add    eax,0x24
c0011c04:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c06:	6a 00                	push   0x0
c0011c08:	68 49 13 01 c0       	push   0xc0011349
c0011c0d:	6a 07                	push   0x7
c0011c0f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c12:	ff d0                	call   eax
c0011c14:	83 c4 10             	add    esp,0x10
c0011c17:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c1c:	83 c0 24             	add    eax,0x24
c0011c1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c21:	6a 00                	push   0x0
c0011c23:	68 b0 0b 01 c0       	push   0xc0010bb0
c0011c28:	6a 08                	push   0x8
c0011c2a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c2d:	ff d0                	call   eax
c0011c2f:	83 c4 10             	add    esp,0x10
c0011c32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c35:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c37:	83 c0 24             	add    eax,0x24
c0011c3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c3c:	6a 00                	push   0x0
c0011c3e:	68 fc 13 01 c0       	push   0xc00113fc
c0011c43:	6a 09                	push   0x9
c0011c45:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c48:	ff d0                	call   eax
c0011c4a:	83 c4 10             	add    esp,0x10
c0011c4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c52:	83 c0 24             	add    eax,0x24
c0011c55:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c57:	6a 00                	push   0x0
c0011c59:	68 fc 13 01 c0       	push   0xc00113fc
c0011c5e:	6a 0a                	push   0xa
c0011c60:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c63:	ff d0                	call   eax
c0011c65:	83 c4 10             	add    esp,0x10
c0011c68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c6d:	83 c0 24             	add    eax,0x24
c0011c70:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c72:	6a 00                	push   0x0
c0011c74:	68 fc 13 01 c0       	push   0xc00113fc
c0011c79:	6a 0b                	push   0xb
c0011c7b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c7e:	ff d0                	call   eax
c0011c80:	83 c4 10             	add    esp,0x10
c0011c83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c86:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c88:	83 c0 24             	add    eax,0x24
c0011c8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c8d:	6a 00                	push   0x0
c0011c8f:	68 fc 13 01 c0       	push   0xc00113fc
c0011c94:	6a 0c                	push   0xc
c0011c96:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c99:	ff d0                	call   eax
c0011c9b:	83 c4 10             	add    esp,0x10
c0011c9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ca1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ca3:	83 c0 24             	add    eax,0x24
c0011ca6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ca8:	6a 00                	push   0x0
c0011caa:	68 ac 13 01 c0       	push   0xc00113ac
c0011caf:	6a 0d                	push   0xd
c0011cb1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cb4:	ff d0                	call   eax
c0011cb6:	83 c4 10             	add    esp,0x10
c0011cb9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cbe:	83 c0 24             	add    eax,0x24
c0011cc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cc3:	6a 00                	push   0x0
c0011cc5:	68 e5 13 01 c0       	push   0xc00113e5
c0011cca:	6a 0e                	push   0xe
c0011ccc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ccf:	ff d0                	call   eax
c0011cd1:	83 c4 10             	add    esp,0x10
c0011cd4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cd9:	83 c0 24             	add    eax,0x24
c0011cdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cde:	6a 00                	push   0x0
c0011ce0:	68 fc 13 01 c0       	push   0xc00113fc
c0011ce5:	6a 0f                	push   0xf
c0011ce7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cea:	ff d0                	call   eax
c0011cec:	83 c4 10             	add    esp,0x10
c0011cef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cf4:	83 c0 24             	add    eax,0x24
c0011cf7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cf9:	6a 00                	push   0x0
c0011cfb:	68 fc 13 01 c0       	push   0xc00113fc
c0011d00:	6a 10                	push   0x10
c0011d02:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d05:	ff d0                	call   eax
c0011d07:	83 c4 10             	add    esp,0x10
c0011d0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d0f:	83 c0 24             	add    eax,0x24
c0011d12:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d14:	6a 00                	push   0x0
c0011d16:	68 fc 13 01 c0       	push   0xc00113fc
c0011d1b:	6a 11                	push   0x11
c0011d1d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d20:	ff d0                	call   eax
c0011d22:	83 c4 10             	add    esp,0x10
c0011d25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d28:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d2a:	83 c0 24             	add    eax,0x24
c0011d2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d2f:	6a 00                	push   0x0
c0011d31:	68 fc 13 01 c0       	push   0xc00113fc
c0011d36:	6a 12                	push   0x12
c0011d38:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d3b:	ff d0                	call   eax
c0011d3d:	83 c4 10             	add    esp,0x10
c0011d40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d43:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d45:	83 c0 24             	add    eax,0x24
c0011d48:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d4a:	6a 00                	push   0x0
c0011d4c:	68 fc 13 01 c0       	push   0xc00113fc
c0011d51:	6a 13                	push   0x13
c0011d53:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d56:	ff d0                	call   eax
c0011d58:	83 c4 10             	add    esp,0x10
c0011d5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d60:	83 c0 24             	add    eax,0x24
c0011d63:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d65:	6a 00                	push   0x0
c0011d67:	68 fc 13 01 c0       	push   0xc00113fc
c0011d6c:	6a 14                	push   0x14
c0011d6e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d71:	ff d0                	call   eax
c0011d73:	83 c4 10             	add    esp,0x10
c0011d76:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d79:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d7b:	83 c0 24             	add    eax,0x24
c0011d7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d80:	6a 00                	push   0x0
c0011d82:	68 fc 13 01 c0       	push   0xc00113fc
c0011d87:	6a 1e                	push   0x1e
c0011d89:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d8c:	ff d0                	call   eax
c0011d8e:	83 c4 10             	add    esp,0x10
c0011d91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d94:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d96:	83 c0 24             	add    eax,0x24
c0011d99:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d9b:	6a 00                	push   0x0
c0011d9d:	68 f4 71 01 c0       	push   0xc00171f4
c0011da2:	6a 60                	push   0x60
c0011da4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011da7:	ff d0                	call   eax
c0011da9:	83 c4 10             	add    esp,0x10
c0011dac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011daf:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011db2:	c9                   	leave  
c0011db3:	c3                   	ret    

c0011db4 <InterruptController::convertLegacyIRQNumber(int)>:
c0011db4:	55                   	push   ebp
c0011db5:	89 e5                	mov    ebp,esp
c0011db7:	83 ec 08             	sub    esp,0x8
c0011dba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011dbd:	83 ec 0c             	sub    esp,0xc
c0011dc0:	50                   	push   eax
c0011dc1:	e8 1c ea ff ff       	call   c00107e2 <Device::getName()>
c0011dc6:	83 c4 10             	add    esp,0x10
c0011dc9:	8a 00                	mov    al,BYTE PTR [eax]
c0011dcb:	3c 41                	cmp    al,0x41
c0011dcd:	0f 94 c0             	sete   al
c0011dd0:	84 c0                	test   al,al
c0011dd2:	74 28                	je     c0011dfc <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011dd4:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0011dd8:	7f 12                	jg     c0011dec <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0011dda:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011ddd:	05 40 3a 02 c0       	add    eax,0xc0023a40
c0011de2:	8a 00                	mov    al,BYTE PTR [eax]
c0011de4:	0f b6 c0             	movzx  eax,al
c0011de7:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0011dea:	eb 10                	jmp    c0011dfc <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011dec:	83 ec 0c             	sub    esp,0xc
c0011def:	68 74 19 02 c0       	push   0xc0021974
c0011df4:	e8 91 3a 00 00       	call   c001588a <Krnl::panic(char const*)>
c0011df9:	83 c4 10             	add    esp,0x10
c0011dfc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011dff:	c9                   	leave  
c0011e00:	c3                   	ret    
c0011e01:	90                   	nop

c0011e02 <startGUI(void*)>:
c0011e02:	55                   	push   ebp
c0011e03:	89 e5                	mov    ebp,esp
c0011e05:	53                   	push   ebx
c0011e06:	83 ec 04             	sub    esp,0x4
c0011e09:	e8 d2 69 00 00       	call   c00187e0 <unlockScheduler()>
c0011e0e:	e8 b6 69 00 00       	call   c00187c9 <getIRQNestingLevel()>
c0011e13:	83 ec 08             	sub    esp,0x8
c0011e16:	50                   	push   eax
c0011e17:	68 64 1c 02 c0       	push   0xc0021c64
c0011e1c:	e8 d4 d2 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0011e21:	83 c4 10             	add    esp,0x10
c0011e24:	8b 1d e8 42 02 c0    	mov    ebx,DWORD PTR ds:0xc00242e8
c0011e2a:	83 ec 08             	sub    esp,0x8
c0011e2d:	6a 01                	push   0x1
c0011e2f:	68 7e 1c 02 c0       	push   0xc0021c7e
c0011e34:	e8 d4 63 00 00       	call   c001820d <Thr::loadDLL(char const*, bool)>
c0011e39:	83 c4 10             	add    esp,0x10
c0011e3c:	83 ec 08             	sub    esp,0x8
c0011e3f:	53                   	push   ebx
c0011e40:	50                   	push   eax
c0011e41:	e8 8d 65 00 00       	call   c00183d3 <Thr::executeDLL(unsigned long, void*)>
c0011e46:	83 c4 10             	add    esp,0x10
c0011e49:	8b 1d e8 42 02 c0    	mov    ebx,DWORD PTR ds:0xc00242e8
c0011e4f:	83 ec 08             	sub    esp,0x8
c0011e52:	6a 01                	push   0x1
c0011e54:	68 98 1c 02 c0       	push   0xc0021c98
c0011e59:	e8 af 63 00 00       	call   c001820d <Thr::loadDLL(char const*, bool)>
c0011e5e:	83 c4 10             	add    esp,0x10
c0011e61:	83 ec 08             	sub    esp,0x8
c0011e64:	53                   	push   ebx
c0011e65:	50                   	push   eax
c0011e66:	e8 68 65 00 00       	call   c00183d3 <Thr::executeDLL(unsigned long, void*)>
c0011e6b:	83 c4 10             	add    esp,0x10
c0011e6e:	90                   	nop
c0011e6f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011e72:	c9                   	leave  
c0011e73:	c3                   	ret    

c0011e74 <sendKeyToTerminal(unsigned char)>:
c0011e74:	55                   	push   ebp
c0011e75:	89 e5                	mov    ebp,esp
c0011e77:	83 ec 28             	sub    esp,0x28
c0011e7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011e7d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0011e80:	a1 a4 43 02 c0       	mov    eax,ds:0xc00243a4
c0011e85:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0011e89:	83 ec 08             	sub    esp,0x8
c0011e8c:	52                   	push   edx
c0011e8d:	50                   	push   eax
c0011e8e:	e8 c3 ba ff ff       	call   c000d956 <VgaText::receiveKey(unsigned char)>
c0011e93:	83 c4 10             	add    esp,0x10
c0011e96:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0011e9a:	75 41                	jne    c0011edd <sendKeyToTerminal(unsigned char)+0x69>
c0011e9c:	e8 64 69 00 00       	call   c0018805 <lockStuff()>
c0011ea1:	a1 80 44 02 c0       	mov    eax,ds:0xc0024480
c0011ea6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011ea9:	c7 05 80 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024480,0x0
c0011eb3:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011eb7:	74 1f                	je     c0011ed8 <sendKeyToTerminal(unsigned char)+0x64>
c0011eb9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ebc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0011ebf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011ec2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ec5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011ec8:	83 ec 0c             	sub    esp,0xc
c0011ecb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011ece:	e8 1b 6f 00 00       	call   c0018dee <unblockTask(ThreadControlBlock*)>
c0011ed3:	83 c4 10             	add    esp,0x10
c0011ed6:	eb db                	jmp    c0011eb3 <sendKeyToTerminal(unsigned char)+0x3f>
c0011ed8:	e8 ba 6c 00 00       	call   c0018b97 <unlockStuff()>
c0011edd:	90                   	nop
c0011ede:	c9                   	leave  
c0011edf:	c3                   	ret    

c0011ee0 <sendKeyboardToken(KeyboardToken)>:
c0011ee0:	55                   	push   ebp
c0011ee1:	89 e5                	mov    ebp,esp
c0011ee3:	83 ec 18             	sub    esp,0x18
c0011ee6:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0011ee9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011eec:	0f b7 c0             	movzx  eax,ax
c0011eef:	83 f2 01             	xor    edx,0x1
c0011ef2:	88 90 a0 44 02 c0    	mov    BYTE PTR [eax-0x3ffdbb60],dl
c0011ef8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011efb:	66 3d 03 02          	cmp    ax,0x203
c0011eff:	75 07                	jne    c0011f08 <sendKeyboardToken(KeyboardToken)+0x28>
c0011f01:	a0 a0 45 02 c0       	mov    al,ds:0xc00245a0
c0011f06:	84 c0                	test   al,al
c0011f08:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0011f0c:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0011f0f:	a0 a8 48 02 c0       	mov    al,ds:0xc00248a8
c0011f14:	38 c2                	cmp    dl,al
c0011f16:	74 1c                	je     c0011f34 <sendKeyboardToken(KeyboardToken)+0x54>
c0011f18:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0011f1b:	a2 a8 48 02 c0       	mov    ds:0xc00248a8,al
c0011f20:	a0 a8 48 02 c0       	mov    al,ds:0xc00248a8
c0011f25:	0f b6 c0             	movzx  eax,al
c0011f28:	83 ec 0c             	sub    esp,0xc
c0011f2b:	50                   	push   eax
c0011f2c:	e8 93 ac ff ff       	call   c000cbc4 <setTerminalScrollLock(bool)>
c0011f31:	83 c4 10             	add    esp,0x10
c0011f34:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0011f37:	84 c0                	test   al,al
c0011f39:	0f 84 ae 00 00 00    	je     c0011fed <sendKeyboardToken(KeyboardToken)+0x10d>
c0011f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f42:	66 3d 10 03          	cmp    ax,0x310
c0011f46:	75 06                	jne    c0011f4e <sendKeyboardToken(KeyboardToken)+0x6e>
c0011f48:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0011f4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f51:	66 3d 11 03          	cmp    ax,0x311
c0011f55:	75 06                	jne    c0011f5d <sendKeyboardToken(KeyboardToken)+0x7d>
c0011f57:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0011f5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f60:	66 3d 12 03          	cmp    ax,0x312
c0011f64:	75 06                	jne    c0011f6c <sendKeyboardToken(KeyboardToken)+0x8c>
c0011f66:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0011f6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f6f:	66 3d 13 03          	cmp    ax,0x313
c0011f73:	75 06                	jne    c0011f7b <sendKeyboardToken(KeyboardToken)+0x9b>
c0011f75:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0011f7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f7e:	66 3d 14 03          	cmp    ax,0x314
c0011f82:	75 06                	jne    c0011f8a <sendKeyboardToken(KeyboardToken)+0xaa>
c0011f84:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0011f8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f8d:	66 3d 15 03          	cmp    ax,0x315
c0011f91:	75 06                	jne    c0011f99 <sendKeyboardToken(KeyboardToken)+0xb9>
c0011f93:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0011f99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f9c:	66 3d 16 03          	cmp    ax,0x316
c0011fa0:	75 06                	jne    c0011fa8 <sendKeyboardToken(KeyboardToken)+0xc8>
c0011fa2:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0011fa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fab:	66 3d 17 03          	cmp    ax,0x317
c0011faf:	75 06                	jne    c0011fb7 <sendKeyboardToken(KeyboardToken)+0xd7>
c0011fb1:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0011fb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fba:	66 3d 18 03          	cmp    ax,0x318
c0011fbe:	75 06                	jne    c0011fc6 <sendKeyboardToken(KeyboardToken)+0xe6>
c0011fc0:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0011fc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fc9:	66 3d 19 03          	cmp    ax,0x319
c0011fcd:	75 06                	jne    c0011fd5 <sendKeyboardToken(KeyboardToken)+0xf5>
c0011fcf:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0011fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fd8:	66 3d 1a 03          	cmp    ax,0x31a
c0011fdc:	0f 85 c9 00 00 00    	jne    c00120ab <sendKeyboardToken(KeyboardToken)+0x1cb>
c0011fe2:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0011fe8:	e9 be 00 00 00       	jmp    c00120ab <sendKeyboardToken(KeyboardToken)+0x1cb>
c0011fed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ff0:	66 3d 10 03          	cmp    ax,0x310
c0011ff4:	75 0a                	jne    c0012000 <sendKeyboardToken(KeyboardToken)+0x120>
c0011ff6:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0011ffc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012000:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012003:	66 3d 11 03          	cmp    ax,0x311
c0012007:	75 0a                	jne    c0012013 <sendKeyboardToken(KeyboardToken)+0x133>
c0012009:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001200f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012013:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012016:	66 3d 12 03          	cmp    ax,0x312
c001201a:	75 0a                	jne    c0012026 <sendKeyboardToken(KeyboardToken)+0x146>
c001201c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0012022:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012029:	66 3d 13 03          	cmp    ax,0x313
c001202d:	75 0a                	jne    c0012039 <sendKeyboardToken(KeyboardToken)+0x159>
c001202f:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0012035:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001203c:	66 3d 14 03          	cmp    ax,0x314
c0012040:	75 0a                	jne    c001204c <sendKeyboardToken(KeyboardToken)+0x16c>
c0012042:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0012048:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001204c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001204f:	66 3d 15 03          	cmp    ax,0x315
c0012053:	75 0a                	jne    c001205f <sendKeyboardToken(KeyboardToken)+0x17f>
c0012055:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001205b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001205f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012062:	66 3d 16 03          	cmp    ax,0x316
c0012066:	75 0a                	jne    c0012072 <sendKeyboardToken(KeyboardToken)+0x192>
c0012068:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001206e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012075:	66 3d 17 03          	cmp    ax,0x317
c0012079:	75 0a                	jne    c0012085 <sendKeyboardToken(KeyboardToken)+0x1a5>
c001207b:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0012081:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012085:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012088:	66 3d 18 03          	cmp    ax,0x318
c001208c:	75 0a                	jne    c0012098 <sendKeyboardToken(KeyboardToken)+0x1b8>
c001208e:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0012094:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012098:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001209b:	66 3d 19 03          	cmp    ax,0x319
c001209f:	75 0a                	jne    c00120ab <sendKeyboardToken(KeyboardToken)+0x1cb>
c00120a1:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00120a7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120ae:	66 3d 00 02          	cmp    ax,0x200
c00120b2:	75 2a                	jne    c00120de <sendKeyboardToken(KeyboardToken)+0x1fe>
c00120b4:	a0 a0 48 02 c0       	mov    al,ds:0xc00248a0
c00120b9:	83 f0 01             	xor    eax,0x1
c00120bc:	84 c0                	test   al,al
c00120be:	74 1e                	je     c00120de <sendKeyboardToken(KeyboardToken)+0x1fe>
c00120c0:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c00120c5:	6a 01                	push   0x1
c00120c7:	6a 00                	push   0x0
c00120c9:	68 02 1e 01 c0       	push   0xc0011e02
c00120ce:	50                   	push   eax
c00120cf:	e8 34 68 00 00       	call   c0018908 <Process::createThread(void (*)(void*), void*, int)>
c00120d4:	83 c4 10             	add    esp,0x10
c00120d7:	c6 05 a0 48 02 c0 01 	mov    BYTE PTR ds:0xc00248a0,0x1
c00120de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120e1:	66 3d 1d 03          	cmp    ax,0x31d
c00120e5:	75 06                	jne    c00120ed <sendKeyboardToken(KeyboardToken)+0x20d>
c00120e7:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00120ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120f0:	66 3d 1c 03          	cmp    ax,0x31c
c00120f4:	75 06                	jne    c00120fc <sendKeyboardToken(KeyboardToken)+0x21c>
c00120f6:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00120fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120ff:	66 3d 1b 03          	cmp    ax,0x31b
c0012103:	75 06                	jne    c001210b <sendKeyboardToken(KeyboardToken)+0x22b>
c0012105:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001210b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001210e:	66 3d 1e 03          	cmp    ax,0x31e
c0012112:	75 06                	jne    c001211a <sendKeyboardToken(KeyboardToken)+0x23a>
c0012114:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001211a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001211d:	66 3d 1f 03          	cmp    ax,0x31f
c0012121:	75 06                	jne    c0012129 <sendKeyboardToken(KeyboardToken)+0x249>
c0012123:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0012129:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001212c:	66 3d 1a 03          	cmp    ax,0x31a
c0012130:	75 06                	jne    c0012138 <sendKeyboardToken(KeyboardToken)+0x258>
c0012132:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0012138:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001213c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001213f:	83 f0 01             	xor    eax,0x1
c0012142:	84 c0                	test   al,al
c0012144:	74 77                	je     c00121bd <sendKeyboardToken(KeyboardToken)+0x2dd>
c0012146:	a0 a1 45 02 c0       	mov    al,ds:0xc00245a1
c001214b:	84 c0                	test   al,al
c001214d:	74 41                	je     c0012190 <sendKeyboardToken(KeyboardToken)+0x2b0>
c001214f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0012153:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0012157:	74 2b                	je     c0012184 <sendKeyboardToken(KeyboardToken)+0x2a4>
c0012159:	8b 15 a4 48 02 c0    	mov    edx,DWORD PTR ds:0xc00248a4
c001215f:	89 d0                	mov    eax,edx
c0012161:	c1 e0 02             	shl    eax,0x2
c0012164:	01 d0                	add    eax,edx
c0012166:	01 c0                	add    eax,eax
c0012168:	a3 a4 48 02 c0       	mov    ds:0xc00248a4,eax
c001216d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012170:	0f b7 c0             	movzx  eax,ax
c0012173:	8d 50 d0             	lea    edx,[eax-0x30]
c0012176:	a1 a4 48 02 c0       	mov    eax,ds:0xc00248a4
c001217b:	01 d0                	add    eax,edx
c001217d:	a3 a4 48 02 c0       	mov    ds:0xc00248a4,eax
c0012182:	eb 6d                	jmp    c00121f1 <sendKeyboardToken(KeyboardToken)+0x311>
c0012184:	c7 05 a4 48 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00248a4,0x0
c001218e:	eb 61                	jmp    c00121f1 <sendKeyboardToken(KeyboardToken)+0x311>
c0012190:	a1 a4 48 02 c0       	mov    eax,ds:0xc00248a4
c0012195:	85 c0                	test   eax,eax
c0012197:	74 18                	je     c00121b1 <sendKeyboardToken(KeyboardToken)+0x2d1>
c0012199:	a1 a4 48 02 c0       	mov    eax,ds:0xc00248a4
c001219e:	0f b6 c0             	movzx  eax,al
c00121a1:	83 ec 0c             	sub    esp,0xc
c00121a4:	50                   	push   eax
c00121a5:	e8 ca fc ff ff       	call   c0011e74 <sendKeyToTerminal(unsigned char)>
c00121aa:	83 c4 10             	add    esp,0x10
c00121ad:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00121b1:	c7 05 a4 48 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00248a4,0x0
c00121bb:	eb 34                	jmp    c00121f1 <sendKeyboardToken(KeyboardToken)+0x311>
c00121bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121c0:	66 3d 01 01          	cmp    ax,0x101
c00121c4:	75 2b                	jne    c00121f1 <sendKeyboardToken(KeyboardToken)+0x311>
c00121c6:	a1 a4 48 02 c0       	mov    eax,ds:0xc00248a4
c00121cb:	85 c0                	test   eax,eax
c00121cd:	74 18                	je     c00121e7 <sendKeyboardToken(KeyboardToken)+0x307>
c00121cf:	a1 a4 48 02 c0       	mov    eax,ds:0xc00248a4
c00121d4:	0f b6 c0             	movzx  eax,al
c00121d7:	83 ec 0c             	sub    esp,0xc
c00121da:	50                   	push   eax
c00121db:	e8 94 fc ff ff       	call   c0011e74 <sendKeyToTerminal(unsigned char)>
c00121e0:	83 c4 10             	add    esp,0x10
c00121e3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00121e7:	c7 05 a4 48 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00248a4,0x0
c00121f1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00121f4:	83 f0 01             	xor    eax,0x1
c00121f7:	84 c0                	test   al,al
c00121f9:	74 4c                	je     c0012247 <sendKeyboardToken(KeyboardToken)+0x367>
c00121fb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00121fe:	83 f0 01             	xor    eax,0x1
c0012201:	84 c0                	test   al,al
c0012203:	74 42                	je     c0012247 <sendKeyboardToken(KeyboardToken)+0x367>
c0012205:	a0 a0 45 02 c0       	mov    al,ds:0xc00245a0
c001220a:	83 f0 01             	xor    eax,0x1
c001220d:	84 c0                	test   al,al
c001220f:	74 36                	je     c0012247 <sendKeyboardToken(KeyboardToken)+0x367>
c0012211:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012214:	66 83 f8 1f          	cmp    ax,0x1f
c0012218:	76 09                	jbe    c0012223 <sendKeyboardToken(KeyboardToken)+0x343>
c001221a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001221d:	66 83 f8 7e          	cmp    ax,0x7e
c0012221:	76 12                	jbe    c0012235 <sendKeyboardToken(KeyboardToken)+0x355>
c0012223:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012226:	66 83 f8 0a          	cmp    ax,0xa
c001222a:	74 09                	je     c0012235 <sendKeyboardToken(KeyboardToken)+0x355>
c001222c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001222f:	66 83 f8 08          	cmp    ax,0x8
c0012233:	75 12                	jne    c0012247 <sendKeyboardToken(KeyboardToken)+0x367>
c0012235:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012238:	0f b6 c0             	movzx  eax,al
c001223b:	83 ec 0c             	sub    esp,0xc
c001223e:	50                   	push   eax
c001223f:	e8 30 fc ff ff       	call   c0011e74 <sendKeyToTerminal(unsigned char)>
c0012244:	83 c4 10             	add    esp,0x10
c0012247:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001224a:	83 f0 01             	xor    eax,0x1
c001224d:	84 c0                	test   al,al
c001224f:	74 4f                	je     c00122a0 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0012251:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012254:	83 f0 01             	xor    eax,0x1
c0012257:	84 c0                	test   al,al
c0012259:	74 45                	je     c00122a0 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001225b:	a0 a0 45 02 c0       	mov    al,ds:0xc00245a0
c0012260:	84 c0                	test   al,al
c0012262:	74 3c                	je     c00122a0 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0012264:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012267:	66 83 f8 3f          	cmp    ax,0x3f
c001226b:	76 33                	jbe    c00122a0 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001226d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012270:	66 83 f8 7f          	cmp    ax,0x7f
c0012274:	77 2a                	ja     c00122a0 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0012276:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012279:	88 c2                	mov    dl,al
c001227b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001227e:	66 83 f8 5f          	cmp    ax,0x5f
c0012282:	76 04                	jbe    c0012288 <sendKeyboardToken(KeyboardToken)+0x3a8>
c0012284:	b0 20                	mov    al,0x20
c0012286:	eb 02                	jmp    c001228a <sendKeyboardToken(KeyboardToken)+0x3aa>
c0012288:	b0 00                	mov    al,0x0
c001228a:	29 c2                	sub    edx,eax
c001228c:	88 d0                	mov    al,dl
c001228e:	83 e8 40             	sub    eax,0x40
c0012291:	0f b6 c0             	movzx  eax,al
c0012294:	83 ec 0c             	sub    esp,0xc
c0012297:	50                   	push   eax
c0012298:	e8 d7 fb ff ff       	call   c0011e74 <sendKeyToTerminal(unsigned char)>
c001229d:	83 c4 10             	add    esp,0x10
c00122a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122a3:	66 3d 00 03          	cmp    ax,0x300
c00122a7:	75 0f                	jne    c00122b8 <sendKeyboardToken(KeyboardToken)+0x3d8>
c00122a9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00122ac:	83 f0 01             	xor    eax,0x1
c00122af:	84 c0                	test   al,al
c00122b1:	74 05                	je     c00122b8 <sendKeyboardToken(KeyboardToken)+0x3d8>
c00122b3:	e8 33 b1 ff ff       	call   c000d3eb <doTerminalCycle()>
c00122b8:	90                   	nop
c00122b9:	c9                   	leave  
c00122ba:	c3                   	ret    

c00122bb <clearInternalKeybuffer(VgaText*)>:
c00122bb:	55                   	push   ebp
c00122bc:	89 e5                	mov    ebp,esp
c00122be:	83 ec 08             	sub    esp,0x8
c00122c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122c4:	05 34 11 00 00       	add    eax,0x1134
c00122c9:	83 ec 0c             	sub    esp,0xc
c00122cc:	50                   	push   eax
c00122cd:	e8 05 e4 fe ff       	call   c00006d7 <strlen>
c00122d2:	83 c4 10             	add    esp,0x10
c00122d5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00122d8:	81 c2 34 11 00 00    	add    edx,0x1134
c00122de:	83 ec 04             	sub    esp,0x4
c00122e1:	50                   	push   eax
c00122e2:	6a 00                	push   0x0
c00122e4:	52                   	push   edx
c00122e5:	e8 d0 e3 fe ff       	call   c00006ba <memset>
c00122ea:	83 c4 10             	add    esp,0x10
c00122ed:	90                   	nop
c00122ee:	c9                   	leave  
c00122ef:	c3                   	ret    

c00122f0 <readKeyboard(VgaText*, char*, unsigned long)>:
c00122f0:	55                   	push   ebp
c00122f1:	89 e5                	mov    ebp,esp
c00122f3:	83 ec 18             	sub    esp,0x18
c00122f6:	fb                   	sti    
c00122f7:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00122fe:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0012302:	74 77                	je     c001237b <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0012304:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012307:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001230d:	84 c0                	test   al,al
c001230f:	75 02                	jne    c0012313 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0012311:	eb f1                	jmp    c0012304 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0012313:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0012316:	8d 50 01             	lea    edx,[eax+0x1]
c0012319:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001231c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001231f:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0012325:	88 10                	mov    BYTE PTR [eax],dl
c0012327:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001232a:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0012330:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0012333:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012336:	05 34 11 00 00       	add    eax,0x1134
c001233b:	83 ec 0c             	sub    esp,0xc
c001233e:	50                   	push   eax
c001233f:	e8 93 e3 fe ff       	call   c00006d7 <strlen>
c0012344:	83 c4 10             	add    esp,0x10
c0012347:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001234a:	81 c2 34 11 00 00    	add    edx,0x1134
c0012350:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012353:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012356:	81 c2 34 11 00 00    	add    edx,0x1134
c001235c:	83 ec 04             	sub    esp,0x4
c001235f:	50                   	push   eax
c0012360:	51                   	push   ecx
c0012361:	52                   	push   edx
c0012362:	e8 e5 e2 fe ff       	call   c000064c <memmove>
c0012367:	83 c4 10             	add    esp,0x10
c001236a:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001236d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0012370:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0012374:	75 88                	jne    c00122fe <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0012376:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0012379:	eb 03                	jmp    c001237e <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c001237b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001237e:	c9                   	leave  
c001237f:	c3                   	ret    

c0012380 <Keyboard::Keyboard(char const*)>:
c0012380:	83 ec 0c             	sub    esp,0xc
c0012383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012387:	83 ec 08             	sub    esp,0x8
c001238a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001238e:	50                   	push   eax
c001238f:	e8 5c e3 ff ff       	call   c00106f0 <Device::Device(char const*)>
c0012394:	83 c4 10             	add    esp,0x10
c0012397:	ba bc 1c 02 c0       	mov    edx,0xc0021cbc
c001239c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123a0:	89 10                	mov    DWORD PTR [eax],edx
c00123a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123a6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00123b0:	c6 05 84 44 02 c0 01 	mov    BYTE PTR ds:0xc0024484,0x1
c00123b7:	90                   	nop
c00123b8:	83 c4 0c             	add    esp,0xc
c00123bb:	c3                   	ret    

c00123bc <Keyboard::~Keyboard()>:
c00123bc:	83 ec 0c             	sub    esp,0xc
c00123bf:	ba bc 1c 02 c0       	mov    edx,0xc0021cbc
c00123c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123c8:	89 10                	mov    DWORD PTR [eax],edx
c00123ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123ce:	83 ec 0c             	sub    esp,0xc
c00123d1:	50                   	push   eax
c00123d2:	e8 cb df ff ff       	call   c00103a2 <Device::~Device()>
c00123d7:	83 c4 10             	add    esp,0x10
c00123da:	90                   	nop
c00123db:	83 c4 0c             	add    esp,0xc
c00123de:	c3                   	ret    
c00123df:	90                   	nop

c00123e0 <Keyboard::~Keyboard()>:
c00123e0:	83 ec 0c             	sub    esp,0xc
c00123e3:	83 ec 0c             	sub    esp,0xc
c00123e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00123ea:	e8 cd ff ff ff       	call   c00123bc <Keyboard::~Keyboard()>
c00123ef:	83 c4 10             	add    esp,0x10
c00123f2:	83 ec 08             	sub    esp,0x8
c00123f5:	68 5c 01 00 00       	push   0x15c
c00123fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00123fe:	e8 12 cc ff ff       	call   c000f015 <operator delete(void*, unsigned long)>
c0012403:	83 c4 10             	add    esp,0x10
c0012406:	83 c4 0c             	add    esp,0xc
c0012409:	c3                   	ret    

c001240a <LogicalDisk::close(int, int, void*)>:
c001240a:	83 c8 ff             	or     eax,0xffffffff
c001240d:	c3                   	ret    

c001240e <LogicalDisk::~LogicalDisk()>:
c001240e:	83 ec 0c             	sub    esp,0xc
c0012411:	ba 6c 1d 02 c0       	mov    edx,0xc0021d6c
c0012416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001241a:	89 10                	mov    DWORD PTR [eax],edx
c001241c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012420:	83 ec 0c             	sub    esp,0xc
c0012423:	50                   	push   eax
c0012424:	e8 79 df ff ff       	call   c00103a2 <Device::~Device()>
c0012429:	83 c4 10             	add    esp,0x10
c001242c:	90                   	nop
c001242d:	83 c4 0c             	add    esp,0xc
c0012430:	c3                   	ret    
c0012431:	90                   	nop

c0012432 <LogicalDisk::~LogicalDisk()>:
c0012432:	83 ec 0c             	sub    esp,0xc
c0012435:	83 ec 0c             	sub    esp,0xc
c0012438:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001243c:	e8 cd ff ff ff       	call   c001240e <LogicalDisk::~LogicalDisk()>
c0012441:	83 c4 10             	add    esp,0x10
c0012444:	83 ec 08             	sub    esp,0x8
c0012447:	68 74 01 00 00       	push   0x174
c001244c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012450:	e8 c0 cb ff ff       	call   c000f015 <operator delete(void*, unsigned long)>
c0012455:	83 c4 10             	add    esp,0x10
c0012458:	83 c4 0c             	add    esp,0xc
c001245b:	c3                   	ret    

c001245c <LogicalDisk::open(int, int, void*)>:
c001245c:	83 ec 18             	sub    esp,0x18
c001245f:	68 e8 1c 02 c0       	push   0xc0021ce8
c0012464:	e8 21 34 00 00       	call   c001588a <Krnl::panic(char const*)>
c0012469:	83 c8 ff             	or     eax,0xffffffff
c001246c:	83 c4 1c             	add    esp,0x1c
c001246f:	c3                   	ret    

c0012470 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0012470:	53                   	push   ebx
c0012471:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012475:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012479:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001247d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0012483:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0012489:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001248f:	77 10                	ja     c00124a1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0012491:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0012497:	89 d3                	mov    ebx,edx
c0012499:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001249f:	72 05                	jb     c00124a6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00124a1:	83 c8 ff             	or     eax,0xffffffff
c00124a4:	89 c2                	mov    edx,eax
c00124a6:	5b                   	pop    ebx
c00124a7:	c3                   	ret    

c00124a8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00124a8:	56                   	push   esi
c00124a9:	83 c8 ff             	or     eax,0xffffffff
c00124ac:	53                   	push   ebx
c00124ad:	89 c2                	mov    edx,eax
c00124af:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00124b3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00124b7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00124bb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00124c1:	77 27                	ja     c00124ea <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00124c3:	89 d8                	mov    eax,ebx
c00124c5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00124cb:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00124d1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124d6:	89 c2                	mov    edx,eax
c00124d8:	73 10                	jae    c00124ea <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00124da:	89 c8                	mov    eax,ecx
c00124dc:	89 da                	mov    edx,ebx
c00124de:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00124e4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00124ea:	5b                   	pop    ebx
c00124eb:	5e                   	pop    esi
c00124ec:	c3                   	ret    
c00124ed:	90                   	nop

c00124ee <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00124ee:	83 ec 1c             	sub    esp,0x1c
c00124f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00124f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00124f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012501:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012505:	89 04 24             	mov    DWORD PTR [esp],eax
c0012508:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001250c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012510:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012514:	83 ec 08             	sub    esp,0x8
c0012517:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001251b:	50                   	push   eax
c001251c:	e8 cf e1 ff ff       	call   c00106f0 <Device::Device(char const*)>
c0012521:	83 c4 10             	add    esp,0x10
c0012524:	ba 6c 1d 02 c0       	mov    edx,0xc0021d6c
c0012529:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001252d:	89 10                	mov    DWORD PTR [eax],edx
c001252f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012533:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001253a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001253e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0012545:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012549:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0012553:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012557:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001255b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001255f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0012565:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001256b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001256f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0012572:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012576:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001257c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0012582:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012586:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001258a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0012590:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012594:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001259e:	90                   	nop
c001259f:	83 c4 1c             	add    esp,0x1c
c00125a2:	c3                   	ret    
c00125a3:	90                   	nop

c00125a4 <LogicalDisk::assignDriveLetter()>:
c00125a4:	55                   	push   ebp
c00125a5:	57                   	push   edi
c00125a6:	56                   	push   esi
c00125a7:	53                   	push   ebx
c00125a8:	83 ec 14             	sub    esp,0x14
c00125ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00125af:	8b 3d c0 48 02 c0    	mov    edi,DWORD PTR ds:0xc00248c0
c00125b5:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00125bb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00125bf:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00125c5:	8b 3d c4 48 02 c0    	mov    edi,DWORD PTR ds:0xc00248c4
c00125cb:	3c 01                	cmp    al,0x1
c00125cd:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00125d1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00125d5:	19 c0                	sbb    eax,eax
c00125d7:	83 e0 02             	and    eax,0x2
c00125da:	83 c0 41             	add    eax,0x41
c00125dd:	0f be e8             	movsx  ebp,al
c00125e0:	3c 43                	cmp    al,0x43
c00125e2:	75 10                	jne    c00125f4 <LogicalDisk::assignDriveLetter()+0x50>
c00125e4:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00125eb:	75 5d                	jne    c001264a <LogicalDisk::assignDriveLetter()+0xa6>
c00125ed:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00125f2:	75 56                	jne    c001264a <LogicalDisk::assignDriveLetter()+0xa6>
c00125f4:	8d 75 bf             	lea    esi,[ebp-0x41]
c00125f7:	ba 01 00 00 00       	mov    edx,0x1
c00125fc:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0012600:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0012604:	d3 e2                	shl    edx,cl
c0012606:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001260a:	89 d7                	mov    edi,edx
c001260c:	89 d6                	mov    esi,edx
c001260e:	c1 ff 1f             	sar    edi,0x1f
c0012611:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0012615:	21 f9                	and    ecx,edi
c0012617:	09 d1                	or     ecx,edx
c0012619:	75 2f                	jne    c001264a <LogicalDisk::assignDriveLetter()+0xa6>
c001261b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001261f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012623:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0012629:	09 f2                	or     edx,esi
c001262b:	89 15 c0 48 02 c0    	mov    DWORD PTR ds:0xc00248c0,edx
c0012631:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012635:	09 fa                	or     edx,edi
c0012637:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001263b:	89 15 c4 48 02 c0    	mov    DWORD PTR ds:0xc00248c4,edx
c0012641:	89 1c bd e0 48 02 c0 	mov    DWORD PTR [edi*4-0x3ffdb720],ebx
c0012648:	eb 08                	jmp    c0012652 <LogicalDisk::assignDriveLetter()+0xae>
c001264a:	45                   	inc    ebp
c001264b:	40                   	inc    eax
c001264c:	3c 5b                	cmp    al,0x5b
c001264e:	75 90                	jne    c00125e0 <LogicalDisk::assignDriveLetter()+0x3c>
c0012650:	31 c0                	xor    eax,eax
c0012652:	83 c4 14             	add    esp,0x14
c0012655:	5b                   	pop    ebx
c0012656:	5e                   	pop    esi
c0012657:	5f                   	pop    edi
c0012658:	5d                   	pop    ebp
c0012659:	c3                   	ret    

c001265a <LogicalDisk::mount()>:
c001265a:	56                   	push   esi
c001265b:	53                   	push   ebx
c001265c:	51                   	push   ecx
c001265d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012661:	8b 1d 48 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024448
c0012667:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0012671:	85 db                	test   ebx,ebx
c0012673:	74 50                	je     c00126c5 <LogicalDisk::mount()+0x6b>
c0012675:	e8 4f 61 00 00       	call   c00187c9 <getIRQNestingLevel()>
c001267a:	52                   	push   edx
c001267b:	52                   	push   edx
c001267c:	50                   	push   eax
c001267d:	68 0c 1d 02 c0       	push   0xc0021d0c
c0012682:	e8 6e ca ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0012687:	83 c4 0c             	add    esp,0xc
c001268a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0012691:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012693:	83 e8 41             	sub    eax,0x41
c0012696:	50                   	push   eax
c0012697:	56                   	push   esi
c0012698:	53                   	push   ebx
c0012699:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001269c:	83 c4 10             	add    esp,0x10
c001269f:	84 c0                	test   al,al
c00126a1:	74 08                	je     c00126ab <LogicalDisk::mount()+0x51>
c00126a3:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00126a9:	eb 1c                	jmp    c00126c7 <LogicalDisk::mount()+0x6d>
c00126ab:	e8 19 61 00 00       	call   c00187c9 <getIRQNestingLevel()>
c00126b0:	51                   	push   ecx
c00126b1:	51                   	push   ecx
c00126b2:	50                   	push   eax
c00126b3:	68 27 1d 02 c0       	push   0xc0021d27
c00126b8:	e8 38 ca ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c00126bd:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00126c0:	83 c4 10             	add    esp,0x10
c00126c3:	eb ac                	jmp    c0012671 <LogicalDisk::mount()+0x17>
c00126c5:	31 c0                	xor    eax,eax
c00126c7:	5a                   	pop    edx
c00126c8:	5b                   	pop    ebx
c00126c9:	5e                   	pop    esi
c00126ca:	c3                   	ret    
c00126cb:	90                   	nop

c00126cc <LogicalDisk::unmount()>:
c00126cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126d0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00126da:	c3                   	ret    
c00126db:	90                   	nop

c00126dc <LogicalDisk::unassignDriveLetter()>:
c00126dc:	57                   	push   edi
c00126dd:	56                   	push   esi
c00126de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00126e2:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00126e9:	84 c9                	test   cl,cl
c00126eb:	75 0f                	jne    c00126fc <LogicalDisk::unassignDriveLetter()+0x20>
c00126ed:	c7 44 24 0c 42 1d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021d42
c00126f5:	5e                   	pop    esi
c00126f6:	5f                   	pop    edi
c00126f7:	e9 8e 31 00 00       	jmp    c001588a <Krnl::panic(char const*)>
c00126fc:	83 e9 41             	sub    ecx,0x41
c00126ff:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0012706:	b8 01 00 00 00       	mov    eax,0x1
c001270b:	c7 04 8d e0 48 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdb720],0x0
c0012716:	d3 e0                	shl    eax,cl
c0012718:	89 c7                	mov    edi,eax
c001271a:	f7 d0                	not    eax
c001271c:	c1 ff 1f             	sar    edi,0x1f
c001271f:	21 05 c0 48 02 c0    	and    DWORD PTR ds:0xc00248c0,eax
c0012725:	89 fe                	mov    esi,edi
c0012727:	f7 d6                	not    esi
c0012729:	21 35 c4 48 02 c0    	and    DWORD PTR ds:0xc00248c4,esi
c001272f:	5e                   	pop    esi
c0012730:	5f                   	pop    edi
c0012731:	c3                   	ret    

c0012732 <LogicalDisk::read(unsigned long long, int, void*)>:
c0012732:	57                   	push   edi
c0012733:	56                   	push   esi
c0012734:	53                   	push   ebx
c0012735:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012739:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001273d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012741:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012745:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001274b:	77 41                	ja     c001278e <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001274d:	99                   	cdq    
c001274e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0012754:	01 c8                	add    eax,ecx
c0012756:	11 da                	adc    edx,ebx
c0012758:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001275e:	19 d7                	sbb    edi,edx
c0012760:	72 33                	jb     c0012795 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0012762:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0012768:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001276e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012772:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0012776:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001277c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012782:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012786:	5b                   	pop    ebx
c0012787:	5e                   	pop    esi
c0012788:	5f                   	pop    edi
c0012789:	e9 9a 09 00 00       	jmp    c0013128 <VCache::read(unsigned long long, int, void*)>
c001278e:	b8 05 00 00 00       	mov    eax,0x5
c0012793:	eb 05                	jmp    c001279a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0012795:	b8 07 00 00 00       	mov    eax,0x7
c001279a:	5b                   	pop    ebx
c001279b:	5e                   	pop    esi
c001279c:	5f                   	pop    edi
c001279d:	c3                   	ret    

c001279e <LogicalDisk::write(unsigned long long, int, void*)>:
c001279e:	57                   	push   edi
c001279f:	56                   	push   esi
c00127a0:	53                   	push   ebx
c00127a1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00127a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00127a9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00127ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00127b1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00127b7:	77 41                	ja     c00127fa <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00127b9:	99                   	cdq    
c00127ba:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00127c0:	01 c8                	add    eax,ecx
c00127c2:	11 da                	adc    edx,ebx
c00127c4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00127ca:	19 d7                	sbb    edi,edx
c00127cc:	72 33                	jb     c0012801 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00127ce:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00127d4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00127da:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00127de:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00127e2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00127e8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00127ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00127f2:	5b                   	pop    ebx
c00127f3:	5e                   	pop    esi
c00127f4:	5f                   	pop    edi
c00127f5:	e9 4a 08 00 00       	jmp    c0013044 <VCache::write(unsigned long long, int, void*)>
c00127fa:	b8 05 00 00 00       	mov    eax,0x5
c00127ff:	eb 05                	jmp    c0012806 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0012801:	b8 07 00 00 00       	mov    eax,0x7
c0012806:	5b                   	pop    ebx
c0012807:	5e                   	pop    esi
c0012808:	5f                   	pop    edi
c0012809:	c3                   	ret    

c001280a <Mouse::Mouse(char const*)>:
c001280a:	83 ec 0c             	sub    esp,0xc
c001280d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012811:	83 ec 08             	sub    esp,0x8
c0012814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012818:	50                   	push   eax
c0012819:	e8 d2 de ff ff       	call   c00106f0 <Device::Device(char const*)>
c001281e:	83 c4 10             	add    esp,0x10
c0012821:	ba 98 1d 02 c0       	mov    edx,0xc0021d98
c0012826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001282a:	89 10                	mov    DWORD PTR [eax],edx
c001282c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012830:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001283a:	90                   	nop
c001283b:	83 c4 0c             	add    esp,0xc
c001283e:	c3                   	ret    
c001283f:	90                   	nop

c0012840 <Mouse::~Mouse()>:
c0012840:	83 ec 0c             	sub    esp,0xc
c0012843:	ba 98 1d 02 c0       	mov    edx,0xc0021d98
c0012848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001284c:	89 10                	mov    DWORD PTR [eax],edx
c001284e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012852:	83 ec 0c             	sub    esp,0xc
c0012855:	50                   	push   eax
c0012856:	e8 47 db ff ff       	call   c00103a2 <Device::~Device()>
c001285b:	83 c4 10             	add    esp,0x10
c001285e:	90                   	nop
c001285f:	83 c4 0c             	add    esp,0xc
c0012862:	c3                   	ret    
c0012863:	90                   	nop

c0012864 <Mouse::~Mouse()>:
c0012864:	83 ec 0c             	sub    esp,0xc
c0012867:	83 ec 0c             	sub    esp,0xc
c001286a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001286e:	e8 cd ff ff ff       	call   c0012840 <Mouse::~Mouse()>
c0012873:	83 c4 10             	add    esp,0x10
c0012876:	83 ec 08             	sub    esp,0x8
c0012879:	68 58 01 00 00       	push   0x158
c001287e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012882:	e8 8e c7 ff ff       	call   c000f015 <operator delete(void*, unsigned long)>
c0012887:	83 c4 10             	add    esp,0x10
c001288a:	83 c4 0c             	add    esp,0xc
c001288d:	c3                   	ret    

c001288e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001288e:	55                   	push   ebp
c001288f:	57                   	push   edi
c0012890:	56                   	push   esi
c0012891:	53                   	push   ebx
c0012892:	81 ec 28 01 00 00    	sub    esp,0x128
c0012898:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001289f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00128a6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00128ad:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00128b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00128b8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00128bc:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00128c3:	e8 1a df ff ff       	call   c00107e2 <Device::getName()>
c00128c8:	5a                   	pop    edx
c00128c9:	59                   	pop    ecx
c00128ca:	50                   	push   eax
c00128cb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00128cf:	55                   	push   ebp
c00128d0:	e8 84 de fe ff       	call   c0000759 <strcpy>
c00128d5:	5b                   	pop    ebx
c00128d6:	58                   	pop    eax
c00128d7:	68 bc 1d 02 c0       	push   0xc0021dbc
c00128dc:	55                   	push   ebp
c00128dd:	e8 2e df fe ff       	call   c0000810 <strcat>
c00128e2:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00128e9:	e8 18 c7 ff ff       	call   c000f006 <operator new(unsigned long)>
c00128ee:	83 c4 0c             	add    esp,0xc
c00128f1:	89 c3                	mov    ebx,eax
c00128f3:	57                   	push   edi
c00128f4:	56                   	push   esi
c00128f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128fd:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0012904:	55                   	push   ebp
c0012905:	50                   	push   eax
c0012906:	e8 e3 fb ff ff       	call   c00124ee <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001290b:	83 c4 14             	add    esp,0x14
c001290e:	53                   	push   ebx
c001290f:	e8 90 fc ff ff       	call   c00125a4 <LogicalDisk::assignDriveLetter()>
c0012914:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012917:	e8 3e fd ff ff       	call   c001265a <LogicalDisk::mount()>
c001291c:	58                   	pop    eax
c001291d:	5a                   	pop    edx
c001291e:	53                   	push   ebx
c001291f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012926:	e8 d5 db ff ff       	call   c0010500 <Device::addChild(Device*)>
c001292b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012931:	5b                   	pop    ebx
c0012932:	5e                   	pop    esi
c0012933:	5f                   	pop    edi
c0012934:	5d                   	pop    ebp
c0012935:	c3                   	ret    

c0012936 <createPartitionsForDisk(PhysicalDisk*)>:
c0012936:	55                   	push   ebp
c0012937:	57                   	push   edi
c0012938:	56                   	push   esi
c0012939:	53                   	push   ebx
c001293a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0012940:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0012947:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001294d:	3d 00 02 00 00       	cmp    eax,0x200
c0012952:	74 27                	je     c001297b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0012954:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001295a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0012960:	83 ec 10             	sub    esp,0x10
c0012963:	0f a4 f7 0a          	shld   edi,esi,0xa
c0012967:	99                   	cdq    
c0012968:	c1 e6 0a             	shl    esi,0xa
c001296b:	52                   	push   edx
c001296c:	89 fd                	mov    ebp,edi
c001296e:	50                   	push   eax
c001296f:	55                   	push   ebp
c0012970:	56                   	push   esi
c0012971:	e8 e6 c7 00 00       	call   c001f15c <__udivdi3>
c0012976:	e9 b1 00 00 00       	jmp    c0012a2c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001297b:	83 ec 0c             	sub    esp,0xc
c001297e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012980:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0012984:	56                   	push   esi
c0012985:	6a 01                	push   0x1
c0012987:	6a 00                	push   0x0
c0012989:	6a 00                	push   0x0
c001298b:	53                   	push   ebx
c001298c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001298f:	83 c4 20             	add    esp,0x20
c0012992:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001299a:	75 0a                	jne    c00129a6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001299c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00129a4:	74 2c                	je     c00129d2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00129a6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00129ac:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00129b2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00129b8:	83 ec 10             	sub    esp,0x10
c00129bb:	0f a4 c2 0a          	shld   edx,eax,0xa
c00129bf:	89 f7                	mov    edi,esi
c00129c1:	c1 e0 0a             	shl    eax,0xa
c00129c4:	c1 ff 1f             	sar    edi,0x1f
c00129c7:	57                   	push   edi
c00129c8:	56                   	push   esi
c00129c9:	52                   	push   edx
c00129ca:	50                   	push   eax
c00129cb:	e8 8c c7 00 00       	call   c001f15c <__udivdi3>
c00129d0:	eb 5a                	jmp    c0012a2c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00129d2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00129d9:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00129e0:	83 e1 7f             	and    ecx,0x7f
c00129e3:	83 e0 7f             	and    eax,0x7f
c00129e6:	01 c1                	add    ecx,eax
c00129e8:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00129ef:	83 e0 7f             	and    eax,0x7f
c00129f2:	01 c1                	add    ecx,eax
c00129f4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00129fb:	83 e0 7f             	and    eax,0x7f
c00129fe:	00 c1                	add    cl,al
c0012a00:	74 41                	je     c0012a43 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0012a02:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012a08:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012a0e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012a14:	83 ec 10             	sub    esp,0x10
c0012a17:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012a1b:	89 f7                	mov    edi,esi
c0012a1d:	c1 e0 0a             	shl    eax,0xa
c0012a20:	c1 ff 1f             	sar    edi,0x1f
c0012a23:	57                   	push   edi
c0012a24:	56                   	push   esi
c0012a25:	52                   	push   edx
c0012a26:	50                   	push   eax
c0012a27:	e8 30 c7 00 00       	call   c001f15c <__udivdi3>
c0012a2c:	83 c4 14             	add    esp,0x14
c0012a2f:	52                   	push   edx
c0012a30:	50                   	push   eax
c0012a31:	6a 00                	push   0x0
c0012a33:	6a 00                	push   0x0
c0012a35:	53                   	push   ebx
c0012a36:	e8 53 fe ff ff       	call   c001288e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012a3b:	83 c4 20             	add    esp,0x20
c0012a3e:	e9 79 01 00 00       	jmp    c0012bbc <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0012a43:	89 f0                	mov    eax,esi
c0012a45:	31 f6                	xor    esi,esi
c0012a47:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0012a4e:	75 02                	jne    c0012a52 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0012a50:	89 f1                	mov    ecx,esi
c0012a52:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0012a59:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0012a60:	c1 e2 08             	shl    edx,0x8
c0012a63:	c1 e7 10             	shl    edi,0x10
c0012a66:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0012a6e:	09 fa                	or     edx,edi
c0012a70:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0012a78:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0012a7f:	83 c0 10             	add    eax,0x10
c0012a82:	09 fa                	or     edx,edi
c0012a84:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0012a8b:	c1 e7 18             	shl    edi,0x18
c0012a8e:	09 fa                	or     edx,edi
c0012a90:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0012a97:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0012a9b:	c1 e7 10             	shl    edi,0x10
c0012a9e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0012aa5:	c1 e2 08             	shl    edx,0x8
c0012aa8:	09 fa                	or     edx,edi
c0012aaa:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0012ab1:	09 fa                	or     edx,edi
c0012ab3:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0012aba:	c1 e7 18             	shl    edi,0x18
c0012abd:	09 fa                	or     edx,edi
c0012abf:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0012ac3:	46                   	inc    esi
c0012ac4:	83 fe 04             	cmp    esi,0x4
c0012ac7:	0f 85 7a ff ff ff    	jne    c0012a47 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012acd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ad1:	83 f0 01             	xor    eax,0x1
c0012ad4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012ad8:	75 57                	jne    c0012b31 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012ada:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ade:	83 f0 01             	xor    eax,0x1
c0012ae1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012ae5:	75 4a                	jne    c0012b31 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012ae7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012aeb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012af3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012afb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012b01:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012b07:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012b0d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012b11:	89 f7                	mov    edi,esi
c0012b13:	c1 e0 0a             	shl    eax,0xa
c0012b16:	c1 ff 1f             	sar    edi,0x1f
c0012b19:	57                   	push   edi
c0012b1a:	56                   	push   esi
c0012b1b:	52                   	push   edx
c0012b1c:	50                   	push   eax
c0012b1d:	e8 3a c6 00 00       	call   c001f15c <__udivdi3>
c0012b22:	83 c4 10             	add    esp,0x10
c0012b25:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012b29:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012b2d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0012b31:	84 c9                	test   cl,cl
c0012b33:	74 53                	je     c0012b88 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0012b35:	0f b6 c9             	movzx  ecx,cl
c0012b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b3c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012b40:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012b44:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012b48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012b4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b50:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0012b54:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0012b58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012b5c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0012b60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b68:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0012b6c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0012b70:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0012b74:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0012b78:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012b7c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012b80:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0012b84:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0012b88:	31 ed                	xor    ebp,ebp
c0012b8a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0012b8e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0012b92:	89 f8                	mov    eax,edi
c0012b94:	09 f0                	or     eax,esi
c0012b96:	74 1e                	je     c0012bb6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012b98:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0012b9c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0012ba0:	89 d1                	mov    ecx,edx
c0012ba2:	09 c1                	or     ecx,eax
c0012ba4:	74 10                	je     c0012bb6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012ba6:	83 ec 0c             	sub    esp,0xc
c0012ba9:	57                   	push   edi
c0012baa:	56                   	push   esi
c0012bab:	52                   	push   edx
c0012bac:	50                   	push   eax
c0012bad:	53                   	push   ebx
c0012bae:	e8 db fc ff ff       	call   c001288e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012bb3:	83 c4 20             	add    esp,0x20
c0012bb6:	45                   	inc    ebp
c0012bb7:	83 fd 04             	cmp    ebp,0x4
c0012bba:	75 ce                	jne    c0012b8a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0012bbc:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012bc2:	5b                   	pop    ebx
c0012bc3:	5e                   	pop    esi
c0012bc4:	5f                   	pop    edi
c0012bc5:	5d                   	pop    ebp
c0012bc6:	c3                   	ret    
c0012bc7:	90                   	nop

c0012bc8 <Timer::Timer(char const*)>:
c0012bc8:	83 ec 0c             	sub    esp,0xc
c0012bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bcf:	83 ec 08             	sub    esp,0x8
c0012bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bd6:	50                   	push   eax
c0012bd7:	e8 14 db ff ff       	call   c00106f0 <Device::Device(char const*)>
c0012bdc:	83 c4 10             	add    esp,0x10
c0012bdf:	ba d0 1d 02 c0       	mov    edx,0xc0021dd0
c0012be4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012be8:	89 10                	mov    DWORD PTR [eax],edx
c0012bea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bee:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0012bf8:	90                   	nop
c0012bf9:	83 c4 0c             	add    esp,0xc
c0012bfc:	c3                   	ret    
c0012bfd:	90                   	nop

c0012bfe <Timer::~Timer()>:
c0012bfe:	83 ec 0c             	sub    esp,0xc
c0012c01:	ba d0 1d 02 c0       	mov    edx,0xc0021dd0
c0012c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c0a:	89 10                	mov    DWORD PTR [eax],edx
c0012c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c10:	83 ec 0c             	sub    esp,0xc
c0012c13:	50                   	push   eax
c0012c14:	e8 89 d7 ff ff       	call   c00103a2 <Device::~Device()>
c0012c19:	83 c4 10             	add    esp,0x10
c0012c1c:	90                   	nop
c0012c1d:	83 c4 0c             	add    esp,0xc
c0012c20:	c3                   	ret    
c0012c21:	90                   	nop

c0012c22 <Timer::~Timer()>:
c0012c22:	83 ec 0c             	sub    esp,0xc
c0012c25:	83 ec 0c             	sub    esp,0xc
c0012c28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c2c:	e8 cd ff ff ff       	call   c0012bfe <Timer::~Timer()>
c0012c31:	83 c4 10             	add    esp,0x10
c0012c34:	83 ec 08             	sub    esp,0x8
c0012c37:	68 5c 01 00 00       	push   0x15c
c0012c3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c40:	e8 d0 c3 ff ff       	call   c000f015 <operator delete(void*, unsigned long)>
c0012c45:	83 c4 10             	add    esp,0x10
c0012c48:	83 c4 0c             	add    esp,0xc
c0012c4b:	c3                   	ret    

c0012c4c <Timer::read()>:
c0012c4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c50:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012c56:	c3                   	ret    

c0012c57 <timerHandler(unsigned long long)>:
c0012c57:	55                   	push   ebp
c0012c58:	57                   	push   edi
c0012c59:	56                   	push   esi
c0012c5a:	53                   	push   ebx
c0012c5b:	83 ec 0c             	sub    esp,0xc
c0012c5e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012c62:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012c66:	01 35 50 49 02 c0    	add    DWORD PTR ds:0xc0024950,esi
c0012c6c:	11 3d 54 49 02 c0    	adc    DWORD PTR ds:0xc0024954,edi
c0012c72:	80 3d ed 42 02 c0 00 	cmp    BYTE PTR ds:0xc00242ed,0x0
c0012c79:	0f 84 07 01 00 00    	je     c0012d86 <timerHandler(unsigned long long)+0x12f>
c0012c7f:	e8 81 5b 00 00       	call   c0018805 <lockStuff()>
c0012c84:	83 ec 0c             	sub    esp,0xc
c0012c87:	68 1c 57 02 c0       	push   0xc002571c
c0012c8c:	e8 9f cb 00 00       	call   c001f830 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012c91:	c7 04 24 1c 57 02 c0 	mov    DWORD PTR [esp],0xc002571c
c0012c98:	89 c3                	mov    ebx,eax
c0012c9a:	e8 99 cb 00 00       	call   c001f838 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012c9f:	83 c4 10             	add    esp,0x10
c0012ca2:	84 c0                	test   al,al
c0012ca4:	74 60                	je     c0012d06 <timerHandler(unsigned long long)+0xaf>
c0012ca6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012cac:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0012caf:	85 c0                	test   eax,eax
c0012cb1:	0f 85 91 00 00 00    	jne    c0012d48 <timerHandler(unsigned long long)+0xf1>
c0012cb7:	e9 be 00 00 00       	jmp    c0012d7a <timerHandler(unsigned long long)+0x123>
c0012cbc:	83 ec 0c             	sub    esp,0xc
c0012cbf:	55                   	push   ebp
c0012cc0:	e8 29 61 00 00       	call   c0018dee <unblockTask(ThreadControlBlock*)>
c0012cc5:	83 c4 10             	add    esp,0x10
c0012cc8:	39 eb                	cmp    ebx,ebp
c0012cca:	75 12                	jne    c0012cde <timerHandler(unsigned long long)+0x87>
c0012ccc:	83 ec 0c             	sub    esp,0xc
c0012ccf:	68 1c 57 02 c0       	push   0xc002571c
c0012cd4:	e8 57 cb 00 00       	call   c001f830 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012cd9:	89 c3                	mov    ebx,eax
c0012cdb:	83 c4 10             	add    esp,0x10
c0012cde:	83 ec 0c             	sub    esp,0xc
c0012ce1:	68 1c 57 02 c0       	push   0xc002571c
c0012ce6:	e8 4d cb 00 00       	call   c001f838 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012ceb:	83 c4 10             	add    esp,0x10
c0012cee:	84 c0                	test   al,al
c0012cf0:	75 b4                	jne    c0012ca6 <timerHandler(unsigned long long)+0x4f>
c0012cf2:	83 ec 0c             	sub    esp,0xc
c0012cf5:	68 1c 57 02 c0       	push   0xc002571c
c0012cfa:	e8 31 cb 00 00       	call   c001f830 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012cff:	83 c4 10             	add    esp,0x10
c0012d02:	39 d8                	cmp    eax,ebx
c0012d04:	74 a0                	je     c0012ca6 <timerHandler(unsigned long long)+0x4f>
c0012d06:	83 ec 0c             	sub    esp,0xc
c0012d09:	68 1c 57 02 c0       	push   0xc002571c
c0012d0e:	e8 1d cb 00 00       	call   c001f830 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d13:	c7 04 24 1c 57 02 c0 	mov    DWORD PTR [esp],0xc002571c
c0012d1a:	89 c5                	mov    ebp,eax
c0012d1c:	e8 33 cb 00 00       	call   c001f854 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012d21:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0012d24:	83 c4 10             	add    esp,0x10
c0012d27:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0012d2a:	39 15 50 49 02 c0    	cmp    DWORD PTR ds:0xc0024950,edx
c0012d30:	a1 54 49 02 c0       	mov    eax,ds:0xc0024954
c0012d35:	19 c8                	sbb    eax,ecx
c0012d37:	73 83                	jae    c0012cbc <timerHandler(unsigned long long)+0x65>
c0012d39:	50                   	push   eax
c0012d3a:	50                   	push   eax
c0012d3b:	55                   	push   ebp
c0012d3c:	68 1c 57 02 c0       	push   0xc002571c
c0012d41:	e8 bc cb 00 00       	call   c001f902 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012d46:	eb 93                	jmp    c0012cdb <timerHandler(unsigned long long)+0x84>
c0012d48:	80 3d ec 42 02 c0 00 	cmp    BYTE PTR ds:0xc00242ec,0x0
c0012d4f:	74 29                	je     c0012d7a <timerHandler(unsigned long long)+0x123>
c0012d51:	39 c6                	cmp    esi,eax
c0012d53:	bb 00 00 00 00       	mov    ebx,0x0
c0012d58:	19 df                	sbb    edi,ebx
c0012d5a:	72 19                	jb     c0012d75 <timerHandler(unsigned long long)+0x11e>
c0012d5c:	e8 7d 5a 00 00       	call   c00187de <lockScheduler()>
c0012d61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d66:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0012d69:	e8 a4 5d 00 00       	call   c0018b12 <schedule()>
c0012d6e:	e8 6d 5a 00 00       	call   c00187e0 <unlockScheduler()>
c0012d73:	eb 05                	jmp    c0012d7a <timerHandler(unsigned long long)+0x123>
c0012d75:	29 f0                	sub    eax,esi
c0012d77:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0012d7a:	83 c4 0c             	add    esp,0xc
c0012d7d:	5b                   	pop    ebx
c0012d7e:	5e                   	pop    esi
c0012d7f:	5f                   	pop    edi
c0012d80:	5d                   	pop    ebp
c0012d81:	e9 11 5e 00 00       	jmp    c0018b97 <unlockStuff()>
c0012d86:	83 c4 0c             	add    esp,0xc
c0012d89:	5b                   	pop    ebx
c0012d8a:	5e                   	pop    esi
c0012d8b:	5f                   	pop    edi
c0012d8c:	5d                   	pop    ebp
c0012d8d:	c3                   	ret    

c0012d8e <setupTimer(int)>:
c0012d8e:	57                   	push   edi
c0012d8f:	56                   	push   esi
c0012d90:	53                   	push   ebx
c0012d91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012d95:	e8 7d 19 00 00       	call   c0014717 <getCPUNumber()>
c0012d9a:	85 c0                	test   eax,eax
c0012d9c:	74 32                	je     c0012dd0 <setupTimer(int)+0x42>
c0012d9e:	83 ec 0c             	sub    esp,0xc
c0012da1:	68 60 01 00 00       	push   0x160
c0012da6:	e8 5b c2 ff ff       	call   c000f006 <operator new(unsigned long)>
c0012dab:	89 04 24             	mov    DWORD PTR [esp],eax
c0012dae:	89 c3                	mov    ebx,eax
c0012db0:	e8 47 be 00 00       	call   c001ebfc <APICTimer::APICTimer()>
c0012db5:	6a 00                	push   0x0
c0012db7:	6a 00                	push   0x0
c0012db9:	56                   	push   esi
c0012dba:	53                   	push   ebx
c0012dbb:	e8 44 bd 00 00       	call   c001eb04 <APICTimer::open(int, int, void*)>
c0012dc0:	83 c4 20             	add    esp,0x20
c0012dc3:	e8 52 19 00 00       	call   c001471a <thisCPU()>
c0012dc8:	56                   	push   esi
c0012dc9:	56                   	push   esi
c0012dca:	53                   	push   ebx
c0012dcb:	e9 96 00 00 00       	jmp    c0012e66 <setupTimer(int)+0xd8>
c0012dd0:	e8 45 19 00 00       	call   c001471a <thisCPU()>
c0012dd5:	83 ec 0c             	sub    esp,0xc
c0012dd8:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012dde:	e8 ff d9 ff ff       	call   c00107e2 <Device::getName()>
c0012de3:	83 c4 10             	add    esp,0x10
c0012de6:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012de9:	0f 85 87 00 00 00    	jne    c0012e76 <setupTimer(int)+0xe8>
c0012def:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c0012df4:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0012dfb:	74 79                	je     c0012e76 <setupTimer(int)+0xe8>
c0012dfd:	83 ec 0c             	sub    esp,0xc
c0012e00:	68 5c 01 00 00       	push   0x15c
c0012e05:	e8 fc c1 ff ff       	call   c000f006 <operator new(unsigned long)>
c0012e0a:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e0d:	89 c3                	mov    ebx,eax
c0012e0f:	e8 38 bf 00 00       	call   c001ed4c <PIT::PIT()>
c0012e14:	59                   	pop    ecx
c0012e15:	5f                   	pop    edi
c0012e16:	53                   	push   ebx
c0012e17:	ff 35 e8 42 02 c0    	push   DWORD PTR ds:0xc00242e8
c0012e1d:	e8 de d6 ff ff       	call   c0010500 <Device::addChild(Device*)>
c0012e22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e24:	6a 00                	push   0x0
c0012e26:	6a 00                	push   0x0
c0012e28:	56                   	push   esi
c0012e29:	53                   	push   ebx
c0012e2a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e2d:	83 c4 14             	add    esp,0x14
c0012e30:	68 60 01 00 00       	push   0x160
c0012e35:	e8 cc c1 ff ff       	call   c000f006 <operator new(unsigned long)>
c0012e3a:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e3d:	89 c7                	mov    edi,eax
c0012e3f:	e8 b8 bd 00 00       	call   c001ebfc <APICTimer::APICTimer()>
c0012e44:	6a 00                	push   0x0
c0012e46:	6a 00                	push   0x0
c0012e48:	56                   	push   esi
c0012e49:	57                   	push   edi
c0012e4a:	e8 b5 bc 00 00       	call   c001eb04 <APICTimer::open(int, int, void*)>
c0012e4f:	83 c4 20             	add    esp,0x20
c0012e52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e54:	6a 00                	push   0x0
c0012e56:	6a 00                	push   0x0
c0012e58:	6a 00                	push   0x0
c0012e5a:	53                   	push   ebx
c0012e5b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012e5e:	e8 b7 18 00 00       	call   c001471a <thisCPU()>
c0012e63:	5a                   	pop    edx
c0012e64:	59                   	pop    ecx
c0012e65:	57                   	push   edi
c0012e66:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012e6c:	e8 8f d6 ff ff       	call   c0010500 <Device::addChild(Device*)>
c0012e71:	83 c4 10             	add    esp,0x10
c0012e74:	eb 33                	jmp    c0012ea9 <setupTimer(int)+0x11b>
c0012e76:	83 ec 0c             	sub    esp,0xc
c0012e79:	68 5c 01 00 00       	push   0x15c
c0012e7e:	e8 83 c1 ff ff       	call   c000f006 <operator new(unsigned long)>
c0012e83:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e86:	89 c3                	mov    ebx,eax
c0012e88:	e8 bf be 00 00       	call   c001ed4c <PIT::PIT()>
c0012e8d:	58                   	pop    eax
c0012e8e:	5a                   	pop    edx
c0012e8f:	53                   	push   ebx
c0012e90:	ff 35 e8 42 02 c0    	push   DWORD PTR ds:0xc00242e8
c0012e96:	e8 65 d6 ff ff       	call   c0010500 <Device::addChild(Device*)>
c0012e9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e9d:	6a 00                	push   0x0
c0012e9f:	6a 00                	push   0x0
c0012ea1:	56                   	push   esi
c0012ea2:	53                   	push   ebx
c0012ea3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ea6:	83 c4 20             	add    esp,0x20
c0012ea9:	89 d8                	mov    eax,ebx
c0012eab:	5b                   	pop    ebx
c0012eac:	5e                   	pop    esi
c0012ead:	5f                   	pop    edi
c0012eae:	c3                   	ret    
c0012eaf:	90                   	nop

c0012eb0 <VCache::VCache(PhysicalDisk*)>:
c0012eb0:	53                   	push   ebx
c0012eb1:	83 ec 08             	sub    esp,0x8
c0012eb4:	ba 00 1e 02 c0       	mov    edx,0xc0021e00
c0012eb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ebd:	89 10                	mov    DWORD PTR [eax],edx
c0012ebf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ec3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0012eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ece:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0012ed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ed9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0012ee0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0012ee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012eeb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0012ef2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012ef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012efd:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0012f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f08:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012f0c:	83 ec 0c             	sub    esp,0xc
c0012f0f:	6a 10                	push   0x10
c0012f11:	e8 f0 c0 ff ff       	call   c000f006 <operator new(unsigned long)>
c0012f16:	83 c4 10             	add    esp,0x10
c0012f19:	89 c3                	mov    ebx,eax
c0012f1b:	83 ec 0c             	sub    esp,0xc
c0012f1e:	53                   	push   ebx
c0012f1f:	e8 d2 59 00 00       	call   c00188f6 <Mutex::Mutex()>
c0012f24:	83 c4 10             	add    esp,0x10
c0012f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f2b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0012f2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f32:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012f36:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012f39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f3d:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0012f44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f48:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0012f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f52:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012f55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f59:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0012f5f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012f65:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012f69:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0012f6c:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0012f6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f73:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012f77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f7b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012f81:	c1 e0 06             	shl    eax,0x6
c0012f84:	83 ec 0c             	sub    esp,0xc
c0012f87:	50                   	push   eax
c0012f88:	e8 77 90 ff ff       	call   c000c004 <malloc>
c0012f8d:	83 c4 10             	add    esp,0x10
c0012f90:	89 c2                	mov    edx,eax
c0012f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f96:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012f99:	90                   	nop
c0012f9a:	83 c4 08             	add    esp,0x8
c0012f9d:	5b                   	pop    ebx
c0012f9e:	c3                   	ret    
c0012f9f:	90                   	nop

c0012fa0 <VCache::writeWriteBuffer()>:
c0012fa0:	53                   	push   ebx
c0012fa1:	83 ec 14             	sub    esp,0x14
c0012fa4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012fa8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012fab:	8b 10                	mov    edx,DWORD PTR [eax]
c0012fad:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012fb0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012fb3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012fb6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0012fb9:	50                   	push   eax
c0012fba:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0012fbd:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0012fc4:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0012fcb:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0012fcf:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0012fd6:	83 c4 28             	add    esp,0x28
c0012fd9:	5b                   	pop    ebx
c0012fda:	c3                   	ret    
c0012fdb:	90                   	nop

c0012fdc <VCache::~VCache()>:
c0012fdc:	83 ec 0c             	sub    esp,0xc
c0012fdf:	ba 00 1e 02 c0       	mov    edx,0xc0021e00
c0012fe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fe8:	89 10                	mov    DWORD PTR [eax],edx
c0012fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fee:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0012ff1:	84 c0                	test   al,al
c0012ff3:	74 0f                	je     c0013004 <VCache::~VCache()+0x28>
c0012ff5:	83 ec 0c             	sub    esp,0xc
c0012ff8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ffc:	e8 9f ff ff ff       	call   c0012fa0 <VCache::writeWriteBuffer()>
c0013001:	83 c4 10             	add    esp,0x10
c0013004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013008:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001300b:	83 ec 0c             	sub    esp,0xc
c001300e:	50                   	push   eax
c001300f:	e8 00 90 ff ff       	call   c000c014 <free>
c0013014:	83 c4 10             	add    esp,0x10
c0013017:	90                   	nop
c0013018:	83 c4 0c             	add    esp,0xc
c001301b:	c3                   	ret    

c001301c <VCache::~VCache()>:
c001301c:	83 ec 0c             	sub    esp,0xc
c001301f:	83 ec 0c             	sub    esp,0xc
c0013022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013026:	e8 b1 ff ff ff       	call   c0012fdc <VCache::~VCache()>
c001302b:	83 c4 10             	add    esp,0x10
c001302e:	83 ec 08             	sub    esp,0x8
c0013031:	6a 30                	push   0x30
c0013033:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013037:	e8 d9 bf ff ff       	call   c000f015 <operator delete(void*, unsigned long)>
c001303c:	83 c4 10             	add    esp,0x10
c001303f:	83 c4 0c             	add    esp,0xc
c0013042:	c3                   	ret    
c0013043:	90                   	nop

c0013044 <VCache::write(unsigned long long, int, void*)>:
c0013044:	55                   	push   ebp
c0013045:	57                   	push   edi
c0013046:	56                   	push   esi
c0013047:	53                   	push   ebx
c0013048:	83 ec 28             	sub    esp,0x28
c001304b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001304f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013053:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0013057:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001305b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001305e:	e8 f5 5c 00 00       	call   c0018d58 <Semaphore::acquire()>
c0013063:	83 c4 10             	add    esp,0x10
c0013066:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001306a:	74 66                	je     c00130d2 <VCache::write(unsigned long long, int, void*)+0x8e>
c001306c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001306f:	99                   	cdq    
c0013070:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013074:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0013077:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001307a:	89 c1                	mov    ecx,eax
c001307c:	89 d0                	mov    eax,edx
c001307e:	31 f1                	xor    ecx,esi
c0013080:	31 f8                	xor    eax,edi
c0013082:	89 ca                	mov    edx,ecx
c0013084:	09 c2                	or     edx,eax
c0013086:	75 3e                	jne    c00130c6 <VCache::write(unsigned long long, int, void*)+0x82>
c0013088:	83 fd 01             	cmp    ebp,0x1
c001308b:	75 39                	jne    c00130c6 <VCache::write(unsigned long long, int, void*)+0x82>
c001308d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013090:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013096:	51                   	push   ecx
c0013097:	50                   	push   eax
c0013098:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001309c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00130a0:	0f af c8             	imul   ecx,eax
c00130a3:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00130a6:	51                   	push   ecx
c00130a7:	e8 d8 d5 fe ff       	call   c0000684 <memcpy>
c00130ac:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00130af:	83 c4 10             	add    esp,0x10
c00130b2:	40                   	inc    eax
c00130b3:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00130b6:	83 f8 40             	cmp    eax,0x40
c00130b9:	75 57                	jne    c0013112 <VCache::write(unsigned long long, int, void*)+0xce>
c00130bb:	83 ec 0c             	sub    esp,0xc
c00130be:	53                   	push   ebx
c00130bf:	e8 dc fe ff ff       	call   c0012fa0 <VCache::writeWriteBuffer()>
c00130c4:	eb 34                	jmp    c00130fa <VCache::write(unsigned long long, int, void*)+0xb6>
c00130c6:	83 ec 0c             	sub    esp,0xc
c00130c9:	53                   	push   ebx
c00130ca:	e8 d1 fe ff ff       	call   c0012fa0 <VCache::writeWriteBuffer()>
c00130cf:	83 c4 10             	add    esp,0x10
c00130d2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00130d5:	83 fd 3f             	cmp    ebp,0x3f
c00130d8:	7f 25                	jg     c00130ff <VCache::write(unsigned long long, int, void*)+0xbb>
c00130da:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00130dd:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00130e0:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00130e3:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00130e7:	52                   	push   edx
c00130e8:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00130ee:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00130f2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00130f5:	e8 8a d5 fe ff       	call   c0000684 <memcpy>
c00130fa:	83 c4 10             	add    esp,0x10
c00130fd:	eb 13                	jmp    c0013112 <VCache::write(unsigned long long, int, void*)+0xce>
c00130ff:	83 ec 0c             	sub    esp,0xc
c0013102:	8b 10                	mov    edx,DWORD PTR [eax]
c0013104:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013108:	55                   	push   ebp
c0013109:	57                   	push   edi
c001310a:	56                   	push   esi
c001310b:	50                   	push   eax
c001310c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001310f:	83 c4 20             	add    esp,0x20
c0013112:	83 ec 0c             	sub    esp,0xc
c0013115:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013118:	e8 c3 61 00 00       	call   c00192e0 <Semaphore::release()>
c001311d:	83 c4 2c             	add    esp,0x2c
c0013120:	31 c0                	xor    eax,eax
c0013122:	5b                   	pop    ebx
c0013123:	5e                   	pop    esi
c0013124:	5f                   	pop    edi
c0013125:	5d                   	pop    ebp
c0013126:	c3                   	ret    
c0013127:	90                   	nop

c0013128 <VCache::read(unsigned long long, int, void*)>:
c0013128:	57                   	push   edi
c0013129:	56                   	push   esi
c001312a:	53                   	push   ebx
c001312b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001312f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013133:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013137:	83 ec 0c             	sub    esp,0xc
c001313a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001313d:	e8 16 5c 00 00       	call   c0018d58 <Semaphore::acquire()>
c0013142:	83 c4 10             	add    esp,0x10
c0013145:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0013149:	74 0c                	je     c0013157 <VCache::read(unsigned long long, int, void*)+0x2f>
c001314b:	83 ec 0c             	sub    esp,0xc
c001314e:	53                   	push   ebx
c001314f:	e8 4c fe ff ff       	call   c0012fa0 <VCache::writeWriteBuffer()>
c0013154:	83 c4 10             	add    esp,0x10
c0013157:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001315a:	83 ec 0c             	sub    esp,0xc
c001315d:	8b 10                	mov    edx,DWORD PTR [eax]
c001315f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013163:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013167:	57                   	push   edi
c0013168:	56                   	push   esi
c0013169:	50                   	push   eax
c001316a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001316d:	83 c4 14             	add    esp,0x14
c0013170:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013173:	e8 68 61 00 00       	call   c00192e0 <Semaphore::release()>
c0013178:	83 c4 10             	add    esp,0x10
c001317b:	31 c0                	xor    eax,eax
c001317d:	5b                   	pop    ebx
c001317e:	5e                   	pop    esi
c001317f:	5f                   	pop    edi
c0013180:	c3                   	ret    
c0013181:	90                   	nop

c0013182 <Video::putrect(int, int, int, int, unsigned int)>:
c0013182:	55                   	push   ebp
c0013183:	57                   	push   edi
c0013184:	56                   	push   esi
c0013185:	53                   	push   ebx
c0013186:	83 ec 1c             	sub    esp,0x1c
c0013189:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001318d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013191:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013195:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0013199:	01 e8                	add    eax,ebp
c001319b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001319f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00131a3:	01 df                	add    edi,ebx
c00131a5:	39 fb                	cmp    ebx,edi
c00131a7:	7d 1b                	jge    c00131c4 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00131a9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00131ad:	7d 12                	jge    c00131c1 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00131af:	8b 16                	mov    edx,DWORD PTR [esi]
c00131b1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00131b5:	53                   	push   ebx
c00131b6:	55                   	push   ebp
c00131b7:	45                   	inc    ebp
c00131b8:	56                   	push   esi
c00131b9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00131bc:	83 c4 10             	add    esp,0x10
c00131bf:	eb e8                	jmp    c00131a9 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c00131c1:	43                   	inc    ebx
c00131c2:	eb e1                	jmp    c00131a5 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c00131c4:	83 c4 1c             	add    esp,0x1c
c00131c7:	5b                   	pop    ebx
c00131c8:	5e                   	pop    esi
c00131c9:	5f                   	pop    edi
c00131ca:	5d                   	pop    ebp
c00131cb:	c3                   	ret    

c00131cc <Video::blit(unsigned int*, int, int, int, int)>:
c00131cc:	55                   	push   ebp
c00131cd:	57                   	push   edi
c00131ce:	56                   	push   esi
c00131cf:	53                   	push   ebx
c00131d0:	83 ec 1c             	sub    esp,0x1c
c00131d3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00131d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00131db:	85 c0                	test   eax,eax
c00131dd:	79 02                	jns    c00131e1 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00131df:	31 c0                	xor    eax,eax
c00131e1:	c1 e0 02             	shl    eax,0x2
c00131e4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00131e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00131ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00131f0:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00131f4:	39 d8                	cmp    eax,ebx
c00131f6:	7e 49                	jle    c0013241 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00131f8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00131fe:	7c 41                	jl     c0013241 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0013200:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013204:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0013208:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001320c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0013210:	39 f9                	cmp    ecx,edi
c0013212:	7e 22                	jle    c0013236 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0013214:	83 c5 04             	add    ebp,0x4
c0013217:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001321d:	7c 14                	jl     c0013233 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001321f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013221:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0013224:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013228:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001322c:	56                   	push   esi
c001322d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0013230:	83 c4 10             	add    esp,0x10
c0013233:	47                   	inc    edi
c0013234:	eb d2                	jmp    c0013208 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0013236:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001323a:	43                   	inc    ebx
c001323b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001323f:	eb ab                	jmp    c00131ec <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0013241:	83 c4 1c             	add    esp,0x1c
c0013244:	5b                   	pop    ebx
c0013245:	5e                   	pop    esi
c0013246:	5f                   	pop    edi
c0013247:	5d                   	pop    ebp
c0013248:	c3                   	ret    
c0013249:	90                   	nop

c001324a <Video::clearScreen(unsigned int)>:
c001324a:	57                   	push   edi
c001324b:	56                   	push   esi
c001324c:	53                   	push   ebx
c001324d:	31 db                	xor    ebx,ebx
c001324f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013253:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0013259:	7e 1f                	jle    c001327a <Video::clearScreen(unsigned int)+0x30>
c001325b:	31 ff                	xor    edi,edi
c001325d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0013263:	7e 12                	jle    c0013277 <Video::clearScreen(unsigned int)+0x2d>
c0013265:	8b 06                	mov    eax,DWORD PTR [esi]
c0013267:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001326b:	53                   	push   ebx
c001326c:	57                   	push   edi
c001326d:	47                   	inc    edi
c001326e:	56                   	push   esi
c001326f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013272:	83 c4 10             	add    esp,0x10
c0013275:	eb e6                	jmp    c001325d <Video::clearScreen(unsigned int)+0x13>
c0013277:	43                   	inc    ebx
c0013278:	eb d9                	jmp    c0013253 <Video::clearScreen(unsigned int)+0x9>
c001327a:	5b                   	pop    ebx
c001327b:	5e                   	pop    esi
c001327c:	5f                   	pop    edi
c001327d:	c3                   	ret    

c001327e <Video::putpixel(int, int, unsigned int)>:
c001327e:	c7 44 24 04 08 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021e08
c0013286:	e9 6a be ff ff       	jmp    c000f0f5 <Dbg::kprintf(char const*, ...)>
c001328b:	90                   	nop

c001328c <Video::Video(char const*)>:
c001328c:	83 ec 0c             	sub    esp,0xc
c001328f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013293:	83 ec 08             	sub    esp,0x8
c0013296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001329a:	50                   	push   eax
c001329b:	e8 50 d4 ff ff       	call   c00106f0 <Device::Device(char const*)>
c00132a0:	83 c4 10             	add    esp,0x10
c00132a3:	ba 20 1e 02 c0       	mov    edx,0xc0021e20
c00132a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ac:	89 10                	mov    DWORD PTR [eax],edx
c00132ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132b2:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00132bc:	90                   	nop
c00132bd:	83 c4 0c             	add    esp,0xc
c00132c0:	c3                   	ret    
c00132c1:	90                   	nop

c00132c2 <Video::~Video()>:
c00132c2:	83 ec 0c             	sub    esp,0xc
c00132c5:	ba 20 1e 02 c0       	mov    edx,0xc0021e20
c00132ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ce:	89 10                	mov    DWORD PTR [eax],edx
c00132d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132d4:	83 ec 0c             	sub    esp,0xc
c00132d7:	50                   	push   eax
c00132d8:	e8 c5 d0 ff ff       	call   c00103a2 <Device::~Device()>
c00132dd:	83 c4 10             	add    esp,0x10
c00132e0:	90                   	nop
c00132e1:	83 c4 0c             	add    esp,0xc
c00132e4:	c3                   	ret    
c00132e5:	90                   	nop

c00132e6 <Video::~Video()>:
c00132e6:	83 ec 0c             	sub    esp,0xc
c00132e9:	83 ec 0c             	sub    esp,0xc
c00132ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132f0:	e8 cd ff ff ff       	call   c00132c2 <Video::~Video()>
c00132f5:	83 c4 10             	add    esp,0x10
c00132f8:	83 ec 08             	sub    esp,0x8
c00132fb:	68 64 01 00 00       	push   0x164
c0013300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013304:	e8 0c bd ff ff       	call   c000f015 <operator delete(void*, unsigned long)>
c0013309:	83 c4 10             	add    esp,0x10
c001330c:	83 c4 0c             	add    esp,0xc
c001330f:	c3                   	ret    

c0013310 <Video::isMonochrome()>:
c0013310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013314:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001331a:	c3                   	ret    
c001331b:	90                   	nop

c001331c <Video::getWidth()>:
c001331c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013320:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0013326:	c3                   	ret    
c0013327:	90                   	nop

c0013328 <Video::getHeight()>:
c0013328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001332c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013332:	c3                   	ret    
c0013333:	90                   	nop

c0013334 <Video::drawCursor(int, int, unsigned char*, int)>:
c0013334:	55                   	push   ebp
c0013335:	57                   	push   edi
c0013336:	56                   	push   esi
c0013337:	53                   	push   ebx
c0013338:	83 ec 2c             	sub    esp,0x2c
c001333b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001333f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013343:	83 f8 01             	cmp    eax,0x1
c0013346:	19 c9                	sbb    ecx,ecx
c0013348:	31 db                	xor    ebx,ebx
c001334a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001334e:	89 cd                	mov    ebp,ecx
c0013350:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0013358:	f7 d5                	not    ebp
c001335a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0013360:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013364:	01 d8                	add    eax,ebx
c0013366:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001336a:	56                   	push   esi
c001336b:	e8 b8 ff ff ff       	call   c0013328 <Video::getHeight()>
c0013370:	59                   	pop    ecx
c0013371:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013375:	7e 70                	jle    c00133e7 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0013377:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001337b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001337f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0013382:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013386:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001338a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0013391:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013395:	89 f8                	mov    eax,edi
c0013397:	83 c0 20             	add    eax,0x20
c001339a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001339e:	56                   	push   esi
c001339f:	e8 78 ff ff ff       	call   c001331c <Video::getWidth()>
c00133a4:	5a                   	pop    edx
c00133a5:	39 c7                	cmp    edi,eax
c00133a7:	7d 34                	jge    c00133dd <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00133a9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00133ae:	74 05                	je     c00133b5 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00133b0:	8b 06                	mov    eax,DWORD PTR [esi]
c00133b2:	55                   	push   ebp
c00133b3:	eb 0d                	jmp    c00133c2 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00133b5:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00133ba:	74 12                	je     c00133ce <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00133bc:	8b 06                	mov    eax,DWORD PTR [esi]
c00133be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00133c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00133c6:	57                   	push   edi
c00133c7:	56                   	push   esi
c00133c8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00133cb:	83 c4 10             	add    esp,0x10
c00133ce:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00133d2:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00133d6:	47                   	inc    edi
c00133d7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00133db:	75 c1                	jne    c001339e <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00133dd:	43                   	inc    ebx
c00133de:	83 fb 20             	cmp    ebx,0x20
c00133e1:	0f 85 79 ff ff ff    	jne    c0013360 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00133e7:	83 c4 2c             	add    esp,0x2c
c00133ea:	5b                   	pop    ebx
c00133eb:	5e                   	pop    esi
c00133ec:	5f                   	pop    edi
c00133ed:	5d                   	pop    ebp
c00133ee:	c3                   	ret    
c00133ef:	90                   	nop

c00133f0 <ACPI::close(int, int, void*)>:
c00133f0:	83 ec 1c             	sub    esp,0x1c
c00133f3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00133fb:	74 0a                	je     c0013407 <ACPI::close(int, int, void*)+0x17>
c00133fd:	b8 00 00 00 00       	mov    eax,0x0
c0013402:	e9 9a 00 00 00       	jmp    c00134a1 <ACPI::close(int, int, void*)+0xb1>
c0013407:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001340c:	75 37                	jne    c0013445 <ACPI::close(int, int, void*)+0x55>
c001340e:	83 ec 0c             	sub    esp,0xc
c0013411:	68 58 1e 02 c0       	push   0xc0021e58
c0013416:	e8 da bc ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001341b:	83 c4 10             	add    esp,0x10
c001341e:	a1 68 49 02 c0       	mov    eax,ds:0xc0024968
c0013423:	85 c0                	test   eax,eax
c0013425:	74 07                	je     c001342e <ACPI::close(int, int, void*)+0x3e>
c0013427:	a1 68 49 02 c0       	mov    eax,ds:0xc0024968
c001342c:	ff d0                	call   eax
c001342e:	83 ec 0c             	sub    esp,0xc
c0013431:	68 0c 1f 02 c0       	push   0xc0021f0c
c0013436:	e8 4f 24 00 00       	call   c001588a <Krnl::panic(char const*)>
c001343b:	83 c4 10             	add    esp,0x10
c001343e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013443:	eb 5c                	jmp    c00134a1 <ACPI::close(int, int, void*)+0xb1>
c0013445:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001344a:	75 50                	jne    c001349c <ACPI::close(int, int, void*)+0xac>
c001344c:	a1 64 49 02 c0       	mov    eax,ds:0xc0024964
c0013451:	85 c0                	test   eax,eax
c0013453:	74 07                	je     c001345c <ACPI::close(int, int, void*)+0x6c>
c0013455:	a1 64 49 02 c0       	mov    eax,ds:0xc0024964
c001345a:	ff d0                	call   eax
c001345c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0013461:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0013466:	83 e0 02             	and    eax,0x2
c0013469:	74 1c                	je     c0013487 <ACPI::close(int, int, void*)+0x97>
c001346b:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0013472:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013476:	89 c2                	mov    edx,eax
c0013478:	ec                   	in     al,dx
c0013479:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001347d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0013481:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013485:	eb da                	jmp    c0013461 <ACPI::close(int, int, void*)+0x71>
c0013487:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001348e:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0013493:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0013497:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001349b:	ee                   	out    dx,al
c001349c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00134a1:	83 c4 1c             	add    esp,0x1c
c00134a4:	c3                   	ret    

c00134a5 <findRSDP()>:
c00134a5:	83 ec 1c             	sub    esp,0x1c
c00134a8:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c00134ad:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00134b3:	83 e0 04             	and    eax,0x4
c00134b6:	84 c0                	test   al,al
c00134b8:	75 07                	jne    c00134c1 <findRSDP()+0x1c>
c00134ba:	b8 00 00 00 00       	mov    eax,0x0
c00134bf:	eb 6a                	jmp    c001352b <findRSDP()+0x86>
c00134c1:	a1 30 43 02 c0       	mov    eax,ds:0xc0024330
c00134c6:	3d ff 07 00 00       	cmp    eax,0x7ff
c00134cb:	7f 1b                	jg     c00134e8 <findRSDP()+0x43>
c00134cd:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c00134d2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00134d8:	83 e2 fb             	and    edx,0xfffffffb
c00134db:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00134e1:	b8 00 00 00 00       	mov    eax,0x0
c00134e6:	eb 43                	jmp    c001352b <findRSDP()+0x86>
c00134e8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00134f0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00134f8:	77 2c                	ja     c0013526 <findRSDP()+0x81>
c00134fa:	83 ec 04             	sub    esp,0x4
c00134fd:	6a 08                	push   0x8
c00134ff:	68 65 1e 02 c0       	push   0xc0021e65
c0013504:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013508:	e8 14 d1 fe ff       	call   c0000621 <memcmp>
c001350d:	83 c4 10             	add    esp,0x10
c0013510:	85 c0                	test   eax,eax
c0013512:	0f 94 c0             	sete   al
c0013515:	84 c0                	test   al,al
c0013517:	74 06                	je     c001351f <findRSDP()+0x7a>
c0013519:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001351d:	eb 0c                	jmp    c001352b <findRSDP()+0x86>
c001351f:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0013524:	eb ca                	jmp    c00134f0 <findRSDP()+0x4b>
c0013526:	b8 00 00 00 00       	mov    eax,0x0
c001352b:	83 c4 1c             	add    esp,0x1c
c001352e:	c3                   	ret    

c001352f <loadACPITables(unsigned char*)>:
c001352f:	56                   	push   esi
c0013530:	53                   	push   ebx
c0013531:	83 ec 44             	sub    esp,0x44
c0013534:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c0013539:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001353f:	83 e0 04             	and    eax,0x4
c0013542:	84 c0                	test   al,al
c0013544:	0f 84 05 02 00 00    	je     c001374f <loadACPITables(unsigned char*)+0x220>
c001354a:	a0 80 4b 02 c0       	mov    al,ds:0xc0024b80
c001354f:	84 c0                	test   al,al
c0013551:	74 75                	je     c00135c8 <loadACPITables(unsigned char*)+0x99>
c0013553:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013557:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001355b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001355f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013562:	83 e8 24             	sub    eax,0x24
c0013565:	c1 e8 03             	shr    eax,0x3
c0013568:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001356c:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0013574:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013578:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001357c:	0f 8d b2 00 00 00    	jge    c0013634 <loadACPITables(unsigned char*)+0x105>
c0013582:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013586:	83 c0 24             	add    eax,0x24
c0013589:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001358d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013591:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013595:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013599:	c1 e0 03             	shl    eax,0x3
c001359c:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00135a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00135a4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00135a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00135a9:	89 c1                	mov    ecx,eax
c00135ab:	a1 6c 49 02 c0       	mov    eax,ds:0xc002496c
c00135b0:	8d 50 01             	lea    edx,[eax+0x1]
c00135b3:	89 15 6c 49 02 c0    	mov    DWORD PTR ds:0xc002496c,edx
c00135b9:	89 ca                	mov    edx,ecx
c00135bb:	89 14 c5 84 49 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb67c],edx
c00135c2:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00135c6:	eb ac                	jmp    c0013574 <loadACPITables(unsigned char*)+0x45>
c00135c8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00135cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00135d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00135d7:	83 e8 24             	sub    eax,0x24
c00135da:	c1 e8 02             	shr    eax,0x2
c00135dd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00135e1:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00135e9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00135ed:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00135f1:	7d 41                	jge    c0013634 <loadACPITables(unsigned char*)+0x105>
c00135f3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00135f7:	83 c0 24             	add    eax,0x24
c00135fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00135fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013602:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013606:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001360a:	c1 e0 02             	shl    eax,0x2
c001360d:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013611:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013615:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013617:	a1 6c 49 02 c0       	mov    eax,ds:0xc002496c
c001361c:	8d 50 01             	lea    edx,[eax+0x1]
c001361f:	89 15 6c 49 02 c0    	mov    DWORD PTR ds:0xc002496c,edx
c0013625:	89 ca                	mov    edx,ecx
c0013627:	89 14 c5 84 49 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb67c],edx
c001362e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0013632:	eb b5                	jmp    c00135e9 <loadACPITables(unsigned char*)+0xba>
c0013634:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c001363c:	a1 6c 49 02 c0       	mov    eax,ds:0xc002496c
c0013641:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0013645:	0f 8d 05 01 00 00    	jge    c0013750 <loadACPITables(unsigned char*)+0x221>
c001364b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001364f:	8b 04 c5 84 49 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb67c]
c0013656:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001365a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001365e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013666:	25 ff 0f 00 00       	and    eax,0xfff
c001366b:	89 c6                	mov    esi,eax
c001366d:	e8 41 ac ff ff       	call   c000e2b3 <Virt::getAKernelVAS()>
c0013672:	89 c3                	mov    ebx,eax
c0013674:	83 ec 0c             	sub    esp,0xc
c0013677:	6a 01                	push   0x1
c0013679:	e8 a5 aa ff ff       	call   c000e123 <Virt::allocateKernelVirtualPages(int)>
c001367e:	83 c4 10             	add    esp,0x10
c0013681:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013685:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001368b:	83 ec 0c             	sub    esp,0xc
c001368e:	6a 01                	push   0x1
c0013690:	6a 01                	push   0x1
c0013692:	50                   	push   eax
c0013693:	52                   	push   edx
c0013694:	53                   	push   ebx
c0013695:	e8 48 b4 ff ff       	call   c000eae2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001369a:	83 c4 20             	add    esp,0x20
c001369d:	09 f0                	or     eax,esi
c001369f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00136a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00136a7:	c1 e0 03             	shl    eax,0x3
c00136aa:	05 80 49 02 c0       	add    eax,0xc0024980
c00136af:	83 ec 04             	sub    esp,0x4
c00136b2:	6a 04                	push   0x4
c00136b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136b8:	50                   	push   eax
c00136b9:	e8 c6 cf fe ff       	call   c0000684 <memcpy>
c00136be:	83 c4 10             	add    esp,0x10
c00136c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00136cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00136d0:	05 00 10 00 00       	add    eax,0x1000
c00136d5:	c1 e8 0c             	shr    eax,0xc
c00136d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00136dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00136e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136e7:	25 ff 0f 00 00       	and    eax,0xfff
c00136ec:	89 c6                	mov    esi,eax
c00136ee:	e8 c0 ab ff ff       	call   c000e2b3 <Virt::getAKernelVAS()>
c00136f3:	89 c3                	mov    ebx,eax
c00136f5:	83 ec 0c             	sub    esp,0xc
c00136f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00136fc:	e8 22 aa ff ff       	call   c000e123 <Virt::allocateKernelVirtualPages(int)>
c0013701:	83 c4 10             	add    esp,0x10
c0013704:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013708:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001370e:	83 ec 0c             	sub    esp,0xc
c0013711:	6a 01                	push   0x1
c0013713:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013717:	50                   	push   eax
c0013718:	52                   	push   edx
c0013719:	53                   	push   ebx
c001371a:	e8 c3 b3 ff ff       	call   c000eae2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001371f:	83 c4 20             	add    esp,0x20
c0013722:	09 f0                	or     eax,esi
c0013724:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013728:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001372b:	83 ec 0c             	sub    esp,0xc
c001372e:	50                   	push   eax
c001372f:	e8 49 ad ff ff       	call   c000e47d <Virt::freeKernelVirtualPages(unsigned long)>
c0013734:	83 c4 10             	add    esp,0x10
c0013737:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001373b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001373f:	89 14 c5 84 49 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb67c],edx
c0013746:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c001374a:	e9 ed fe ff ff       	jmp    c001363c <loadACPITables(unsigned char*)+0x10d>
c001374f:	90                   	nop
c0013750:	83 c4 44             	add    esp,0x44
c0013753:	5b                   	pop    ebx
c0013754:	5e                   	pop    esi
c0013755:	c3                   	ret    

c0013756 <findRSDT(unsigned char*)>:
c0013756:	56                   	push   esi
c0013757:	53                   	push   ebx
c0013758:	83 ec 44             	sub    esp,0x44
c001375b:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c0013760:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013766:	83 e0 04             	and    eax,0x4
c0013769:	84 c0                	test   al,al
c001376b:	75 0a                	jne    c0013777 <findRSDT(unsigned char*)+0x21>
c001376d:	b8 00 00 00 00       	mov    eax,0x0
c0013772:	e9 f7 00 00 00       	jmp    c001386e <findRSDT(unsigned char*)+0x118>
c0013777:	83 ec 04             	sub    esp,0x4
c001377a:	6a 24                	push   0x24
c001377c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0013780:	8d 44 24 18          	lea    eax,[esp+0x18]
c0013784:	50                   	push   eax
c0013785:	e8 fa ce fe ff       	call   c0000684 <memcpy>
c001378a:	83 c4 10             	add    esp,0x10
c001378d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0013791:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013795:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001379d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00137a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00137a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00137a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00137ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00137b1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00137b5:	25 ff 0f 00 00       	and    eax,0xfff
c00137ba:	89 c6                	mov    esi,eax
c00137bc:	e8 f2 aa ff ff       	call   c000e2b3 <Virt::getAKernelVAS()>
c00137c1:	89 c3                	mov    ebx,eax
c00137c3:	83 ec 0c             	sub    esp,0xc
c00137c6:	6a 02                	push   0x2
c00137c8:	e8 56 a9 ff ff       	call   c000e123 <Virt::allocateKernelVirtualPages(int)>
c00137cd:	83 c4 10             	add    esp,0x10
c00137d0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00137d4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00137da:	83 ec 0c             	sub    esp,0xc
c00137dd:	6a 01                	push   0x1
c00137df:	6a 02                	push   0x2
c00137e1:	50                   	push   eax
c00137e2:	52                   	push   edx
c00137e3:	53                   	push   ebx
c00137e4:	e8 f9 b2 ff ff       	call   c000eae2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00137e9:	83 c4 20             	add    esp,0x20
c00137ec:	09 f0                	or     eax,esi
c00137ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00137f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137f6:	25 ff 0f 00 00       	and    eax,0xfff
c00137fb:	89 c6                	mov    esi,eax
c00137fd:	e8 b1 aa ff ff       	call   c000e2b3 <Virt::getAKernelVAS()>
c0013802:	89 c3                	mov    ebx,eax
c0013804:	83 ec 0c             	sub    esp,0xc
c0013807:	6a 02                	push   0x2
c0013809:	e8 15 a9 ff ff       	call   c000e123 <Virt::allocateKernelVirtualPages(int)>
c001380e:	83 c4 10             	add    esp,0x10
c0013811:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013815:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001381b:	83 ec 0c             	sub    esp,0xc
c001381e:	6a 01                	push   0x1
c0013820:	6a 02                	push   0x2
c0013822:	50                   	push   eax
c0013823:	52                   	push   edx
c0013824:	53                   	push   ebx
c0013825:	e8 b8 b2 ff ff       	call   c000eae2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001382a:	83 c4 20             	add    esp,0x20
c001382d:	09 f0                	or     eax,esi
c001382f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013833:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0013838:	75 11                	jne    c001384b <findRSDT(unsigned char*)+0xf5>
c001383a:	c6 05 80 4b 02 c0 00 	mov    BYTE PTR ds:0xc0024b80,0x0
c0013841:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013845:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013849:	eb 1f                	jmp    c001386a <findRSDT(unsigned char*)+0x114>
c001384b:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0013850:	75 11                	jne    c0013863 <findRSDT(unsigned char*)+0x10d>
c0013852:	c6 05 80 4b 02 c0 01 	mov    BYTE PTR ds:0xc0024b80,0x1
c0013859:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001385d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013861:	eb 07                	jmp    c001386a <findRSDT(unsigned char*)+0x114>
c0013863:	b8 00 00 00 00       	mov    eax,0x0
c0013868:	eb 04                	jmp    c001386e <findRSDT(unsigned char*)+0x118>
c001386a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001386e:	83 c4 44             	add    esp,0x44
c0013871:	5b                   	pop    ebx
c0013872:	5e                   	pop    esi
c0013873:	c3                   	ret    

c0013874 <findDataTable(unsigned char*, char*)>:
c0013874:	83 ec 1c             	sub    esp,0x1c
c0013877:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c001387c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013882:	83 e0 04             	and    eax,0x4
c0013885:	84 c0                	test   al,al
c0013887:	75 07                	jne    c0013890 <findDataTable(unsigned char*, char*)+0x1c>
c0013889:	b8 00 00 00 00       	mov    eax,0x0
c001388e:	eb 7c                	jmp    c001390c <findDataTable(unsigned char*, char*)+0x98>
c0013890:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013898:	a1 6c 49 02 c0       	mov    eax,ds:0xc002496c
c001389d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00138a1:	7d 3a                	jge    c00138dd <findDataTable(unsigned char*, char*)+0x69>
c00138a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138a7:	c1 e0 03             	shl    eax,0x3
c00138aa:	05 80 49 02 c0       	add    eax,0xc0024980
c00138af:	83 ec 04             	sub    esp,0x4
c00138b2:	6a 04                	push   0x4
c00138b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138b8:	50                   	push   eax
c00138b9:	e8 63 cd fe ff       	call   c0000621 <memcmp>
c00138be:	83 c4 10             	add    esp,0x10
c00138c1:	85 c0                	test   eax,eax
c00138c3:	0f 94 c0             	sete   al
c00138c6:	84 c0                	test   al,al
c00138c8:	74 0d                	je     c00138d7 <findDataTable(unsigned char*, char*)+0x63>
c00138ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138ce:	8b 04 c5 84 49 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb67c]
c00138d5:	eb 35                	jmp    c001390c <findDataTable(unsigned char*, char*)+0x98>
c00138d7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00138db:	eb bb                	jmp    c0013898 <findDataTable(unsigned char*, char*)+0x24>
c00138dd:	a0 80 4b 02 c0       	mov    al,ds:0xc0024b80
c00138e2:	84 c0                	test   al,al
c00138e4:	74 07                	je     c00138ed <findDataTable(unsigned char*, char*)+0x79>
c00138e6:	b8 58 00 00 00       	mov    eax,0x58
c00138eb:	eb 05                	jmp    c00138f2 <findDataTable(unsigned char*, char*)+0x7e>
c00138ed:	b8 52 00 00 00       	mov    eax,0x52
c00138f2:	83 ec 04             	sub    esp,0x4
c00138f5:	50                   	push   eax
c00138f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138fa:	68 30 1f 02 c0       	push   0xc0021f30
c00138ff:	e8 f1 b7 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0013904:	83 c4 10             	add    esp,0x10
c0013907:	b8 00 00 00 00       	mov    eax,0x0
c001390c:	83 c4 1c             	add    esp,0x1c
c001390f:	c3                   	ret    

c0013910 <scanMADT()>:
c0013910:	83 ec 2c             	sub    esp,0x2c
c0013913:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c0013918:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001391e:	83 e0 04             	and    eax,0x4
c0013921:	84 c0                	test   al,al
c0013923:	0f 84 73 03 00 00    	je     c0013c9c <scanMADT()+0x38c>
c0013929:	e8 77 fb ff ff       	call   c00134a5 <findRSDP()>
c001392e:	a3 8c 4b 02 c0       	mov    ds:0xc0024b8c,eax
c0013933:	a1 8c 4b 02 c0       	mov    eax,ds:0xc0024b8c
c0013938:	85 c0                	test   eax,eax
c001393a:	75 19                	jne    c0013955 <scanMADT()+0x45>
c001393c:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c0013941:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013947:	83 e2 fb             	and    edx,0xfffffffb
c001394a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013950:	e9 4b 03 00 00       	jmp    c0013ca0 <scanMADT()+0x390>
c0013955:	a1 8c 4b 02 c0       	mov    eax,ds:0xc0024b8c
c001395a:	83 ec 0c             	sub    esp,0xc
c001395d:	50                   	push   eax
c001395e:	e8 f3 fd ff ff       	call   c0013756 <findRSDT(unsigned char*)>
c0013963:	83 c4 10             	add    esp,0x10
c0013966:	a3 88 4b 02 c0       	mov    ds:0xc0024b88,eax
c001396b:	a1 88 4b 02 c0       	mov    eax,ds:0xc0024b88
c0013970:	85 c0                	test   eax,eax
c0013972:	75 19                	jne    c001398d <scanMADT()+0x7d>
c0013974:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c0013979:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001397f:	83 e2 fb             	and    edx,0xfffffffb
c0013982:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013988:	e9 13 03 00 00       	jmp    c0013ca0 <scanMADT()+0x390>
c001398d:	a1 88 4b 02 c0       	mov    eax,ds:0xc0024b88
c0013992:	83 ec 0c             	sub    esp,0xc
c0013995:	50                   	push   eax
c0013996:	e8 94 fb ff ff       	call   c001352f <loadACPITables(unsigned char*)>
c001399b:	83 c4 10             	add    esp,0x10
c001399e:	a1 88 4b 02 c0       	mov    eax,ds:0xc0024b88
c00139a3:	83 ec 08             	sub    esp,0x8
c00139a6:	68 6e 1e 02 c0       	push   0xc0021e6e
c00139ab:	50                   	push   eax
c00139ac:	e8 c3 fe ff ff       	call   c0013874 <findDataTable(unsigned char*, char*)>
c00139b1:	83 c4 10             	add    esp,0x10
c00139b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00139b8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00139bd:	75 19                	jne    c00139d8 <scanMADT()+0xc8>
c00139bf:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c00139c4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00139ca:	83 e2 fe             	and    edx,0xfffffffe
c00139cd:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00139d3:	e9 c8 02 00 00       	jmp    c0013ca0 <scanMADT()+0x390>
c00139d8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00139e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00139e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00139e7:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00139eb:	0f 87 af 02 00 00    	ja     c0013ca0 <scanMADT()+0x390>
c00139f1:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c00139f9:	0f 87 a1 02 00 00    	ja     c0013ca0 <scanMADT()+0x390>
c00139ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a03:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a0b:	8d 50 01             	lea    edx,[eax+0x1]
c0013a0e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013a12:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013a16:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013a1a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0013a1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a22:	8d 50 01             	lea    edx,[eax+0x1]
c0013a25:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013a29:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013a2d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013a31:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0013a35:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0013a3a:	0f 86 5f 02 00 00    	jbe    c0013c9f <scanMADT()+0x38f>
c0013a40:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013a45:	75 57                	jne    c0013a9e <scanMADT()+0x18e>
c0013a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a4b:	8d 50 01             	lea    edx,[eax+0x1]
c0013a4e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013a52:	8a 15 c0 4c 02 c0    	mov    dl,BYTE PTR ds:0xc0024cc0
c0013a58:	0f b6 d2             	movzx  edx,dl
c0013a5b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013a5f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013a63:	88 82 00 4d 02 c0    	mov    BYTE PTR [edx-0x3ffdb300],al
c0013a69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a6d:	8d 50 01             	lea    edx,[eax+0x1]
c0013a70:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013a74:	8a 15 c0 4c 02 c0    	mov    dl,BYTE PTR ds:0xc0024cc0
c0013a7a:	8d 4a 01             	lea    ecx,[edx+0x1]
c0013a7d:	88 0d c0 4c 02 c0    	mov    BYTE PTR ds:0xc0024cc0,cl
c0013a83:	0f b6 d2             	movzx  edx,dl
c0013a86:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013a8a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013a8e:	88 82 e0 4c 02 c0    	mov    BYTE PTR [edx-0x3ffdb320],al
c0013a94:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013a99:	e9 ea 01 00 00       	jmp    c0013c88 <scanMADT()+0x378>
c0013a9e:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0013aa3:	0f 85 14 01 00 00    	jne    c0013bbd <scanMADT()+0x2ad>
c0013aa9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013aad:	8d 50 01             	lea    edx,[eax+0x1]
c0013ab0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013ab4:	8a 15 90 4b 02 c0    	mov    dl,BYTE PTR ds:0xc0024b90
c0013aba:	0f b6 d2             	movzx  edx,dl
c0013abd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013ac1:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013ac5:	88 82 a0 4b 02 c0    	mov    BYTE PTR [edx-0x3ffdb460],al
c0013acb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0013acf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ad3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ad7:	01 d0                	add    eax,edx
c0013ad9:	83 c0 2c             	add    eax,0x2c
c0013adc:	8a 00                	mov    al,BYTE PTR [eax]
c0013ade:	0f b6 d0             	movzx  edx,al
c0013ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ae5:	8d 48 01             	lea    ecx,[eax+0x1]
c0013ae8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013aec:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013af0:	0f b6 c0             	movzx  eax,al
c0013af3:	c1 e0 08             	shl    eax,0x8
c0013af6:	89 d1                	mov    ecx,edx
c0013af8:	09 c1                	or     ecx,eax
c0013afa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013afe:	8d 50 02             	lea    edx,[eax+0x2]
c0013b01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b05:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013b09:	0f b6 c0             	movzx  eax,al
c0013b0c:	c1 e0 10             	shl    eax,0x10
c0013b0f:	09 c1                	or     ecx,eax
c0013b11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b15:	8d 50 03             	lea    edx,[eax+0x3]
c0013b18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b1c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013b20:	0f b6 c0             	movzx  eax,al
c0013b23:	c1 e0 18             	shl    eax,0x18
c0013b26:	09 c1                	or     ecx,eax
c0013b28:	89 ca                	mov    edx,ecx
c0013b2a:	a0 90 4b 02 c0       	mov    al,ds:0xc0024b90
c0013b2f:	0f b6 c0             	movzx  eax,al
c0013b32:	89 14 85 c0 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb440],edx
c0013b39:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013b3e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b46:	01 d0                	add    eax,edx
c0013b48:	83 c0 2c             	add    eax,0x2c
c0013b4b:	8a 00                	mov    al,BYTE PTR [eax]
c0013b4d:	0f b6 d0             	movzx  edx,al
c0013b50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b54:	8d 48 01             	lea    ecx,[eax+0x1]
c0013b57:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b5b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013b5f:	0f b6 c0             	movzx  eax,al
c0013b62:	c1 e0 08             	shl    eax,0x8
c0013b65:	89 d1                	mov    ecx,edx
c0013b67:	09 c1                	or     ecx,eax
c0013b69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b6d:	8d 50 02             	lea    edx,[eax+0x2]
c0013b70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b74:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013b78:	0f b6 c0             	movzx  eax,al
c0013b7b:	c1 e0 10             	shl    eax,0x10
c0013b7e:	09 c1                	or     ecx,eax
c0013b80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b84:	8d 50 03             	lea    edx,[eax+0x3]
c0013b87:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b8b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013b8f:	0f b6 c0             	movzx  eax,al
c0013b92:	c1 e0 18             	shl    eax,0x18
c0013b95:	09 c1                	or     ecx,eax
c0013b97:	89 ca                	mov    edx,ecx
c0013b99:	a0 90 4b 02 c0       	mov    al,ds:0xc0024b90
c0013b9e:	0f b6 c0             	movzx  eax,al
c0013ba1:	89 14 85 40 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb3c0],edx
c0013ba8:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013bad:	a0 90 4b 02 c0       	mov    al,ds:0xc0024b90
c0013bb2:	40                   	inc    eax
c0013bb3:	a2 90 4b 02 c0       	mov    ds:0xc0024b90,al
c0013bb8:	e9 cb 00 00 00       	jmp    c0013c88 <scanMADT()+0x378>
c0013bbd:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0013bc2:	0f 85 a6 00 00 00    	jne    c0013c6e <scanMADT()+0x35e>
c0013bc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bcc:	8d 50 01             	lea    edx,[eax+0x1]
c0013bcf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013bd3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013bd7:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013bdb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0013bdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013be3:	8d 50 01             	lea    edx,[eax+0x1]
c0013be6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013bea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013bee:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013bf2:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013bf6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bfe:	01 d0                	add    eax,edx
c0013c00:	83 c0 2c             	add    eax,0x2c
c0013c03:	8a 00                	mov    al,BYTE PTR [eax]
c0013c05:	0f b6 d0             	movzx  edx,al
c0013c08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c0c:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c13:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013c17:	0f b6 c0             	movzx  eax,al
c0013c1a:	c1 e0 08             	shl    eax,0x8
c0013c1d:	89 d1                	mov    ecx,edx
c0013c1f:	09 c1                	or     ecx,eax
c0013c21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c25:	8d 50 02             	lea    edx,[eax+0x2]
c0013c28:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c2c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c30:	0f b6 c0             	movzx  eax,al
c0013c33:	c1 e0 10             	shl    eax,0x10
c0013c36:	09 c1                	or     ecx,eax
c0013c38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c3c:	8d 50 03             	lea    edx,[eax+0x3]
c0013c3f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c43:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c47:	0f b6 c0             	movzx  eax,al
c0013c4a:	c1 e0 18             	shl    eax,0x18
c0013c4d:	09 c8                	or     eax,ecx
c0013c4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013c53:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013c58:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0013c5d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0013c62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013c66:	88 90 40 3a 02 c0    	mov    BYTE PTR [eax-0x3ffdc5c0],dl
c0013c6c:	eb 1a                	jmp    c0013c88 <scanMADT()+0x378>
c0013c6e:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0013c73:	75 07                	jne    c0013c7c <scanMADT()+0x36c>
c0013c75:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013c7a:	eb 0c                	jmp    c0013c88 <scanMADT()+0x378>
c0013c7c:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0013c81:	75 05                	jne    c0013c88 <scanMADT()+0x378>
c0013c83:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0013c88:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0013c8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c91:	01 d0                	add    eax,edx
c0013c93:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013c97:	e9 44 fd ff ff       	jmp    c00139e0 <scanMADT()+0xd0>
c0013c9c:	90                   	nop
c0013c9d:	eb 01                	jmp    c0013ca0 <scanMADT()+0x390>
c0013c9f:	90                   	nop
c0013ca0:	83 c4 2c             	add    esp,0x2c
c0013ca3:	c3                   	ret    

c0013ca4 <ACPI::ACPI()>:
c0013ca4:	83 ec 0c             	sub    esp,0xc
c0013ca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cab:	83 ec 08             	sub    esp,0x8
c0013cae:	68 73 1e 02 c0       	push   0xc0021e73
c0013cb3:	50                   	push   eax
c0013cb4:	e8 37 ca ff ff       	call   c00106f0 <Device::Device(char const*)>
c0013cb9:	83 c4 10             	add    esp,0x10
c0013cbc:	ba fc 1f 02 c0       	mov    edx,0xc0021ffc
c0013cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cc5:	89 10                	mov    DWORD PTR [eax],edx
c0013cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ccb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cd6:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0013ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ce4:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cf2:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0013cf9:	e8 12 fc ff ff       	call   c0013910 <scanMADT()>
c0013cfe:	90                   	nop
c0013cff:	83 c4 0c             	add    esp,0xc
c0013d02:	c3                   	ret    
c0013d03:	90                   	nop

c0013d04 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013d04:	83 ec 2c             	sub    esp,0x2c
c0013d07:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013d0b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013d0f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013d13:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013d17:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013d1c:	88 d0                	mov    al,dl
c0013d1e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013d22:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0013d27:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013d2f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013d33:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013d39:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013d3d:	0f 8d 97 00 00 00    	jge    c0013dda <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0013d43:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013d47:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d4b:	83 c2 2a             	add    edx,0x2a
c0013d4e:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0013d52:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0013d57:	75 78                	jne    c0013dd1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013d59:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013d5d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d61:	83 c2 2a             	add    edx,0x2a
c0013d64:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0013d68:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0013d6c:	75 63                	jne    c0013dd1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013d6e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013d73:	74 3a                	je     c0013daf <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0013d75:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013d79:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d7d:	83 c2 2a             	add    edx,0x2a
c0013d80:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0013d84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013d8b:	39 c2                	cmp    edx,eax
c0013d8d:	74 10                	je     c0013d9f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0013d8f:	83 ec 0c             	sub    esp,0xc
c0013d92:	68 60 1f 02 c0       	push   0xc0021f60
c0013d97:	e8 ee 1a 00 00       	call   c001588a <Krnl::panic(char const*)>
c0013d9c:	83 c4 10             	add    esp,0x10
c0013d9f:	83 ec 0c             	sub    esp,0xc
c0013da2:	68 78 1e 02 c0       	push   0xc0021e78
c0013da7:	e8 de 1a 00 00       	call   c001588a <Krnl::panic(char const*)>
c0013dac:	83 c4 10             	add    esp,0x10
c0013daf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013db3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013db7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013dbb:	83 c2 2a             	add    edx,0x2a
c0013dbe:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0013dc2:	8b 02                	mov    eax,DWORD PTR [edx]
c0013dc4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013dc7:	89 01                	mov    DWORD PTR [ecx],eax
c0013dc9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013dcc:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0013dd1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013dd5:	e9 55 ff ff ff       	jmp    c0013d2f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0013dda:	90                   	nop
c0013ddb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ddf:	83 c4 2c             	add    esp,0x2c
c0013de2:	c2 04 00             	ret    0x4
c0013de5:	90                   	nop

c0013de6 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013de6:	56                   	push   esi
c0013de7:	53                   	push   ebx
c0013de8:	83 ec 14             	sub    esp,0x14
c0013deb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013def:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013df3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013df7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013dfc:	88 c8                	mov    al,cl
c0013dfe:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013e02:	88 d0                	mov    al,dl
c0013e04:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013e08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e0c:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013e12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e16:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013e1c:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013e21:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013e26:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0013e2b:	83 ec 04             	sub    esp,0x4
c0013e2e:	56                   	push   esi
c0013e2f:	53                   	push   ebx
c0013e30:	51                   	push   ecx
c0013e31:	52                   	push   edx
c0013e32:	50                   	push   eax
c0013e33:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013e37:	68 90 1f 02 c0       	push   0xc0021f90
c0013e3c:	e8 b4 b2 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0013e41:	83 c4 20             	add    esp,0x20
c0013e44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e48:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013e4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e52:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013e55:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013e59:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013e5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e61:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013e67:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013e6b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0013e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013e72:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0013e77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e7b:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013e81:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013e85:	8d 48 01             	lea    ecx,[eax+0x1]
c0013e88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e8c:	83 c2 2a             	add    edx,0x2a
c0013e8f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0013e93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e97:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013e9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ea1:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013ea4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013ea8:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0013eac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eb0:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013eb6:	8d 50 01             	lea    edx,[eax+0x1]
c0013eb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ebd:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0013ec3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ec7:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013ecd:	3d 00 08 00 00       	cmp    eax,0x800
c0013ed2:	75 10                	jne    c0013ee4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0013ed4:	83 ec 0c             	sub    esp,0xc
c0013ed7:	68 87 1e 02 c0       	push   0xc0021e87
c0013edc:	e8 a9 19 00 00       	call   c001588a <Krnl::panic(char const*)>
c0013ee1:	83 c4 10             	add    esp,0x10
c0013ee4:	90                   	nop
c0013ee5:	83 c4 14             	add    esp,0x14
c0013ee8:	5b                   	pop    ebx
c0013ee9:	5e                   	pop    esi
c0013eea:	c3                   	ret    
c0013eeb:	90                   	nop

c0013eec <ACPI::setScreenBrightnessLevel(void*, int)>:
c0013eec:	b8 00 00 00 00       	mov    eax,0x0
c0013ef1:	c3                   	ret    

c0013ef2 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0013ef2:	83 ec 1c             	sub    esp,0x1c
c0013ef5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013ef9:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0013efc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013f00:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c0013f05:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0013f0a:	83 ec 08             	sub    esp,0x8
c0013f0d:	52                   	push   edx
c0013f0e:	50                   	push   eax
c0013f0f:	e8 00 77 ff ff       	call   c000b614 <Computer::readCMOS(unsigned char)>
c0013f14:	83 c4 10             	add    esp,0x10
c0013f17:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0013f1b:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c0013f20:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0013f25:	83 ec 04             	sub    esp,0x4
c0013f28:	6a 01                	push   0x1
c0013f2a:	52                   	push   edx
c0013f2b:	50                   	push   eax
c0013f2c:	e8 f9 77 ff ff       	call   c000b72a <Computer::writeCMOS(unsigned char, unsigned char)>
c0013f31:	83 c4 10             	add    esp,0x10
c0013f34:	90                   	nop
c0013f35:	83 c4 1c             	add    esp,0x1c
c0013f38:	c3                   	ret    
c0013f39:	90                   	nop

c0013f3a <ACPI::open(int, int, void*)>:
c0013f3a:	53                   	push   ebx
c0013f3b:	83 ec 18             	sub    esp,0x18
c0013f3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f42:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0013f49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f4d:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0013f53:	84 c0                	test   al,al
c0013f55:	74 60                	je     c0013fb7 <ACPI::open(int, int, void*)+0x7d>
c0013f57:	83 ec 0c             	sub    esp,0xc
c0013f5a:	68 58 01 00 00       	push   0x158
c0013f5f:	e8 a2 b0 ff ff       	call   c000f006 <operator new(unsigned long)>
c0013f64:	83 c4 10             	add    esp,0x10
c0013f67:	89 c3                	mov    ebx,eax
c0013f69:	83 ec 0c             	sub    esp,0xc
c0013f6c:	53                   	push   ebx
c0013f6d:	e8 5c 7f 00 00       	call   c001bece <PCI::PCI()>
c0013f72:	83 c4 10             	add    esp,0x10
c0013f75:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0013f79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f7d:	83 ec 08             	sub    esp,0x8
c0013f80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013f84:	50                   	push   eax
c0013f85:	e8 76 c5 ff ff       	call   c0010500 <Device::addChild(Device*)>
c0013f8a:	83 c4 10             	add    esp,0x10
c0013f8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013f91:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f93:	83 c0 08             	add    eax,0x8
c0013f96:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f98:	6a 00                	push   0x0
c0013f9a:	6a 00                	push   0x0
c0013f9c:	6a 00                	push   0x0
c0013f9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fa2:	ff d0                	call   eax
c0013fa4:	83 c4 10             	add    esp,0x10
c0013fa7:	83 ec 0c             	sub    esp,0xc
c0013faa:	68 a4 1e 02 c0       	push   0xc0021ea4
c0013faf:	e8 41 b1 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0013fb4:	83 c4 10             	add    esp,0x10
c0013fb7:	83 ec 0c             	sub    esp,0xc
c0013fba:	68 af 1e 02 c0       	push   0xc0021eaf
c0013fbf:	e8 67 37 00 00       	call   c001772b <Thr::loadKernelSymbolTable(char const*)>
c0013fc4:	83 c4 10             	add    esp,0x10
c0013fc7:	8b 1d e8 42 02 c0    	mov    ebx,DWORD PTR ds:0xc00242e8
c0013fcd:	83 ec 08             	sub    esp,0x8
c0013fd0:	6a 01                	push   0x1
c0013fd2:	68 cd 1e 02 c0       	push   0xc0021ecd
c0013fd7:	e8 31 42 00 00       	call   c001820d <Thr::loadDLL(char const*, bool)>
c0013fdc:	83 c4 10             	add    esp,0x10
c0013fdf:	83 ec 08             	sub    esp,0x8
c0013fe2:	53                   	push   ebx
c0013fe3:	50                   	push   eax
c0013fe4:	e8 ea 43 00 00       	call   c00183d3 <Thr::executeDLL(unsigned long, void*)>
c0013fe9:	83 c4 10             	add    esp,0x10
c0013fec:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c0013ff1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013ff7:	83 e0 04             	and    eax,0x4
c0013ffa:	84 c0                	test   al,al
c0013ffc:	0f 84 cf 00 00 00    	je     c00140d1 <ACPI::open(int, int, void*)+0x197>
c0014002:	83 ec 0c             	sub    esp,0xc
c0014005:	68 14 01 00 00       	push   0x114
c001400a:	e8 f7 af ff ff       	call   c000f006 <operator new(unsigned long)>
c001400f:	83 c4 10             	add    esp,0x10
c0014012:	89 c3                	mov    ebx,eax
c0014014:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0014019:	83 ec 04             	sub    esp,0x4
c001401c:	50                   	push   eax
c001401d:	68 ea 1e 02 c0       	push   0xc0021eea
c0014022:	53                   	push   ebx
c0014023:	e8 fc b5 ff ff       	call   c000f624 <File::File(char const*, Process*)>
c0014028:	83 c4 10             	add    esp,0x10
c001402b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001402f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014034:	74 17                	je     c001404d <ACPI::open(int, int, void*)+0x113>
c0014036:	83 ec 0c             	sub    esp,0xc
c0014039:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001403d:	e8 b4 b8 ff ff       	call   c000f8f6 <File::exists()>
c0014042:	83 c4 10             	add    esp,0x10
c0014045:	84 c0                	test   al,al
c0014047:	74 04                	je     c001404d <ACPI::open(int, int, void*)+0x113>
c0014049:	b0 01                	mov    al,0x1
c001404b:	eb 02                	jmp    c001404f <ACPI::open(int, int, void*)+0x115>
c001404d:	b0 00                	mov    al,0x0
c001404f:	84 c0                	test   al,al
c0014051:	74 25                	je     c0014078 <ACPI::open(int, int, void*)+0x13e>
c0014053:	8b 1d e8 42 02 c0    	mov    ebx,DWORD PTR ds:0xc00242e8
c0014059:	83 ec 08             	sub    esp,0x8
c001405c:	6a 01                	push   0x1
c001405e:	68 ea 1e 02 c0       	push   0xc0021eea
c0014063:	e8 a5 41 00 00       	call   c001820d <Thr::loadDLL(char const*, bool)>
c0014068:	83 c4 10             	add    esp,0x10
c001406b:	83 ec 08             	sub    esp,0x8
c001406e:	53                   	push   ebx
c001406f:	50                   	push   eax
c0014070:	e8 5e 43 00 00       	call   c00183d3 <Thr::executeDLL(unsigned long, void*)>
c0014075:	83 c4 10             	add    esp,0x10
c0014078:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001407d:	74 1e                	je     c001409d <ACPI::open(int, int, void*)+0x163>
c001407f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014084:	74 17                	je     c001409d <ACPI::open(int, int, void*)+0x163>
c0014086:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001408a:	8b 00                	mov    eax,DWORD PTR [eax]
c001408c:	83 c0 08             	add    eax,0x8
c001408f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014091:	83 ec 0c             	sub    esp,0xc
c0014094:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014098:	ff d0                	call   eax
c001409a:	83 c4 10             	add    esp,0x10
c001409d:	a1 88 4b 02 c0       	mov    eax,ds:0xc0024b88
c00140a2:	83 ec 08             	sub    esp,0x8
c00140a5:	68 07 1f 02 c0       	push   0xc0021f07
c00140aa:	50                   	push   eax
c00140ab:	e8 c4 f7 ff ff       	call   c0013874 <findDataTable(unsigned char*, char*)>
c00140b0:	83 c4 10             	add    esp,0x10
c00140b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00140b7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00140bc:	74 13                	je     c00140d1 <ACPI::open(int, int, void*)+0x197>
c00140be:	83 ec 08             	sub    esp,0x8
c00140c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00140c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00140c9:	e8 24 fe ff ff       	call   c0013ef2 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00140ce:	83 c4 10             	add    esp,0x10
c00140d1:	b8 00 00 00 00       	mov    eax,0x0
c00140d6:	83 c4 18             	add    esp,0x18
c00140d9:	5b                   	pop    ebx
c00140da:	c3                   	ret    
c00140db:	90                   	nop

c00140dc <ACPI::sleep()>:
c00140dc:	83 ec 0c             	sub    esp,0xc
c00140df:	a1 60 49 02 c0       	mov    eax,ds:0xc0024960
c00140e4:	85 c0                	test   eax,eax
c00140e6:	74 07                	je     c00140ef <ACPI::sleep()+0x13>
c00140e8:	a1 60 49 02 c0       	mov    eax,ds:0xc0024960
c00140ed:	ff d0                	call   eax
c00140ef:	90                   	nop
c00140f0:	83 c4 0c             	add    esp,0xc
c00140f3:	c3                   	ret    

c00140f4 <CPU::close(int, int, void*)>:
c00140f4:	31 c0                	xor    eax,eax
c00140f6:	c3                   	ret    

c00140f7 <lookupAMDCPUName(unsigned char, unsigned char)>:
c00140f7:	55                   	push   ebp
c00140f8:	57                   	push   edi
c00140f9:	56                   	push   esi
c00140fa:	53                   	push   ebx
c00140fb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00140ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014103:	89 ce                	mov    esi,ecx
c0014105:	89 d5                	mov    ebp,edx
c0014107:	80 f9 04             	cmp    cl,0x4
c001410a:	75 28                	jne    c0014134 <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c001410c:	8d 42 f9             	lea    eax,[edx-0x7]
c001410f:	3c 03                	cmp    al,0x3
c0014111:	0f 86 63 01 00 00    	jbe    c001427a <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0014117:	80 fa 03             	cmp    dl,0x3
c001411a:	0f 84 5a 01 00 00    	je     c001427a <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0014120:	8d 7a f2             	lea    edi,[edx-0xe]
c0014123:	b8 10 3c 02 c0       	mov    eax,0xc0023c10
c0014128:	89 fb                	mov    ebx,edi
c001412a:	80 fb 01             	cmp    bl,0x1
c001412d:	77 4e                	ja     c001417d <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c001412f:	e9 52 01 00 00       	jmp    c0014286 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014134:	80 f9 05             	cmp    cl,0x5
c0014137:	75 4d                	jne    c0014186 <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c0014139:	b8 20 3c 02 c0       	mov    eax,0xc0023c20
c001413e:	80 fa 03             	cmp    dl,0x3
c0014141:	0f 86 3f 01 00 00    	jbe    c0014286 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014147:	8d 7a fa             	lea    edi,[edx-0x6]
c001414a:	b8 30 3c 02 c0       	mov    eax,0xc0023c30
c001414f:	89 fb                	mov    ebx,edi
c0014151:	80 fb 01             	cmp    bl,0x1
c0014154:	0f 86 2c 01 00 00    	jbe    c0014286 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001415a:	b8 40 3c 02 c0       	mov    eax,0xc0023c40
c001415f:	80 fa 08             	cmp    dl,0x8
c0014162:	0f 84 1e 01 00 00    	je     c0014286 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014168:	89 d7                	mov    edi,edx
c001416a:	b8 50 3c 02 c0       	mov    eax,0xc0023c50
c001416f:	83 e7 fb             	and    edi,0xfffffffb
c0014172:	89 fb                	mov    ebx,edi
c0014174:	80 fb 09             	cmp    bl,0x9
c0014177:	0f 84 09 01 00 00    	je     c0014286 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001417d:	31 c0                	xor    eax,eax
c001417f:	89 eb                	mov    ebx,ebp
c0014181:	0f b6 fb             	movzx  edi,bl
c0014184:	eb 30                	jmp    c00141b6 <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c0014186:	31 c0                	xor    eax,eax
c0014188:	80 f9 06             	cmp    cl,0x6
c001418b:	75 f2                	jne    c001417f <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c001418d:	80 fa 0a             	cmp    dl,0xa
c0014190:	77 ed                	ja     c001417f <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0014192:	bf de 05 00 00       	mov    edi,0x5de
c0014197:	0f a3 d7             	bt     edi,edx
c001419a:	73 e3                	jae    c001417f <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c001419c:	b8 60 3c 02 c0       	mov    eax,0xc0023c60
c00141a1:	e9 e0 00 00 00       	jmp    c0014286 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00141a6:	39 c7                	cmp    edi,eax
c00141a8:	0f 84 d3 00 00 00    	je     c0014281 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c00141ae:	40                   	inc    eax
c00141af:	3d d0 00 00 00       	cmp    eax,0xd0
c00141b4:	74 09                	je     c00141bf <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c00141b6:	89 f3                	mov    ebx,esi
c00141b8:	80 fb 0f             	cmp    bl,0xf
c00141bb:	75 f1                	jne    c00141ae <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c00141bd:	eb e7                	jmp    c00141a6 <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c00141bf:	80 f9 10             	cmp    cl,0x10
c00141c2:	75 14                	jne    c00141d8 <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c00141c4:	8d 42 fc             	lea    eax,[edx-0x4]
c00141c7:	83 e0 fb             	and    eax,0xfffffffb
c00141ca:	3c 02                	cmp    al,0x2
c00141cc:	76 34                	jbe    c0014202 <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c00141ce:	b8 12 23 02 c0       	mov    eax,0xc0022312
c00141d3:	80 fa 02             	cmp    dl,0x2
c00141d6:	eb 24                	jmp    c00141fc <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c00141d8:	80 f9 11             	cmp    cl,0x11
c00141db:	75 13                	jne    c00141f0 <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c00141dd:	b8 12 23 02 c0       	mov    eax,0xc0022312
c00141e2:	80 fa 03             	cmp    dl,0x3
c00141e5:	0f 85 9b 00 00 00    	jne    c0014286 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00141eb:	e9 91 00 00 00       	jmp    c0014281 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c00141f0:	80 f9 12             	cmp    cl,0x12
c00141f3:	75 14                	jne    c0014209 <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c00141f5:	b8 12 23 02 c0       	mov    eax,0xc0022312
c00141fa:	fe ca                	dec    dl
c00141fc:	0f 85 84 00 00 00    	jne    c0014286 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014202:	b8 80 3c 02 c0       	mov    eax,0xc0023c80
c0014207:	eb 7d                	jmp    c0014286 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014209:	80 f9 14             	cmp    cl,0x14
c001420c:	75 12                	jne    c0014220 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c001420e:	4a                   	dec    edx
c001420f:	b8 12 23 02 c0       	mov    eax,0xc0022312
c0014214:	80 fa 01             	cmp    dl,0x1
c0014217:	77 6d                	ja     c0014286 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014219:	b8 90 3c 02 c0       	mov    eax,0xc0023c90
c001421e:	eb 66                	jmp    c0014286 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014220:	80 f9 15             	cmp    cl,0x15
c0014223:	75 31                	jne    c0014256 <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c0014225:	b8 a0 3c 02 c0       	mov    eax,0xc0023ca0
c001422a:	80 fa 01             	cmp    dl,0x1
c001422d:	74 57                	je     c0014286 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001422f:	b8 12 23 02 c0       	mov    eax,0xc0022312
c0014234:	80 fa 13             	cmp    dl,0x13
c0014237:	76 0c                	jbe    c0014245 <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c0014239:	80 fa 30             	cmp    dl,0x30
c001423c:	75 48                	jne    c0014286 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001423e:	b8 c0 3c 02 c0       	mov    eax,0xc0023cc0
c0014243:	eb 41                	jmp    c0014286 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014245:	b9 04 00 09 00       	mov    ecx,0x90004
c001424a:	0f a3 d1             	bt     ecx,edx
c001424d:	73 37                	jae    c0014286 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001424f:	b8 b0 3c 02 c0       	mov    eax,0xc0023cb0
c0014254:	eb 30                	jmp    c0014286 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014256:	b8 12 23 02 c0       	mov    eax,0xc0022312
c001425b:	80 f9 16             	cmp    cl,0x16
c001425e:	75 26                	jne    c0014286 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014260:	b8 d0 3c 02 c0       	mov    eax,0xc0023cd0
c0014265:	84 d2                	test   dl,dl
c0014267:	74 1d                	je     c0014286 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014269:	b8 12 23 02 c0       	mov    eax,0xc0022312
c001426e:	80 fa 30             	cmp    dl,0x30
c0014271:	75 13                	jne    c0014286 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014273:	b8 e0 3c 02 c0       	mov    eax,0xc0023ce0
c0014278:	eb 0c                	jmp    c0014286 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001427a:	b8 00 3c 02 c0       	mov    eax,0xc0023c00
c001427f:	eb 05                	jmp    c0014286 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014281:	b8 70 3c 02 c0       	mov    eax,0xc0023c70
c0014286:	5b                   	pop    ebx
c0014287:	5e                   	pop    esi
c0014288:	5f                   	pop    edi
c0014289:	5d                   	pop    ebp
c001428a:	c3                   	ret    

c001428b <lookupIntelCPUName(unsigned char, unsigned char)>:
c001428b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001428f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014293:	80 f9 04             	cmp    cl,0x4
c0014296:	75 6b                	jne    c0014303 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0014298:	b8 60 3a 02 c0       	mov    eax,0xc0023a60
c001429d:	80 fa 01             	cmp    dl,0x1
c00142a0:	0f 86 92 02 00 00    	jbe    c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00142a6:	b8 70 3a 02 c0       	mov    eax,0xc0023a70
c00142ab:	80 fa 02             	cmp    dl,0x2
c00142ae:	0f 84 84 02 00 00    	je     c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00142b4:	b8 80 3a 02 c0       	mov    eax,0xc0023a80
c00142b9:	80 fa 03             	cmp    dl,0x3
c00142bc:	0f 84 76 02 00 00    	je     c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00142c2:	b8 90 3a 02 c0       	mov    eax,0xc0023a90
c00142c7:	80 fa 04             	cmp    dl,0x4
c00142ca:	0f 84 68 02 00 00    	je     c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00142d0:	b8 a0 3a 02 c0       	mov    eax,0xc0023aa0
c00142d5:	80 fa 05             	cmp    dl,0x5
c00142d8:	0f 84 5a 02 00 00    	je     c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00142de:	b8 80 3a 02 c0       	mov    eax,0xc0023a80
c00142e3:	80 fa 07             	cmp    dl,0x7
c00142e6:	0f 84 4c 02 00 00    	je     c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00142ec:	83 ea 08             	sub    edx,0x8
c00142ef:	b8 12 23 02 c0       	mov    eax,0xc0022312
c00142f4:	80 fa 01             	cmp    dl,0x1
c00142f7:	0f 87 3b 02 00 00    	ja     c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00142fd:	b8 b0 3a 02 c0       	mov    eax,0xc0023ab0
c0014302:	c3                   	ret    
c0014303:	80 f9 05             	cmp    cl,0x5
c0014306:	75 45                	jne    c001434d <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0014308:	8d 4a ff             	lea    ecx,[edx-0x1]
c001430b:	b8 c0 3a 02 c0       	mov    eax,0xc0023ac0
c0014310:	80 f9 02             	cmp    cl,0x2
c0014313:	0f 86 1f 02 00 00    	jbe    c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014319:	80 fa 04             	cmp    dl,0x4
c001431c:	0f 84 f3 01 00 00    	je     c0014515 <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c0014322:	80 fa 07             	cmp    dl,0x7
c0014325:	0f 84 0d 02 00 00    	je     c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001432b:	b8 d0 3a 02 c0       	mov    eax,0xc0023ad0
c0014330:	80 fa 08             	cmp    dl,0x8
c0014333:	0f 84 ff 01 00 00    	je     c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014339:	b8 12 23 02 c0       	mov    eax,0xc0022312
c001433e:	80 fa 09             	cmp    dl,0x9
c0014341:	0f 85 f1 01 00 00    	jne    c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014347:	b8 e0 3a 02 c0       	mov    eax,0xc0023ae0
c001434c:	c3                   	ret    
c001434d:	80 f9 06             	cmp    cl,0x6
c0014350:	0f 85 85 01 00 00    	jne    c00144db <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c0014356:	b8 f0 3a 02 c0       	mov    eax,0xc0023af0
c001435b:	80 fa 01             	cmp    dl,0x1
c001435e:	0f 84 d4 01 00 00    	je     c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014364:	8d 42 fb             	lea    eax,[edx-0x5]
c0014367:	3c 01                	cmp    al,0x1
c0014369:	0f 86 ac 01 00 00    	jbe    c001451b <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c001436f:	80 fa 03             	cmp    dl,0x3
c0014372:	0f 84 a3 01 00 00    	je     c001451b <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0014378:	8d 4a f9             	lea    ecx,[edx-0x7]
c001437b:	b8 10 3b 02 c0       	mov    eax,0xc0023b10
c0014380:	80 f9 01             	cmp    cl,0x1
c0014383:	0f 86 af 01 00 00    	jbe    c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014389:	80 fa 09             	cmp    dl,0x9
c001438c:	0f 84 8f 01 00 00    	je     c0014521 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0014392:	8d 4a f6             	lea    ecx,[edx-0xa]
c0014395:	80 f9 01             	cmp    cl,0x1
c0014398:	0f 86 9a 01 00 00    	jbe    c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001439e:	b8 20 3b 02 c0       	mov    eax,0xc0023b20
c00143a3:	80 fa 0d             	cmp    dl,0xd
c00143a6:	0f 84 8c 01 00 00    	je     c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00143ac:	b8 30 3b 02 c0       	mov    eax,0xc0023b30
c00143b1:	80 fa 0e             	cmp    dl,0xe
c00143b4:	0f 84 7e 01 00 00    	je     c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00143ba:	b8 40 3b 02 c0       	mov    eax,0xc0023b40
c00143bf:	80 fa 0f             	cmp    dl,0xf
c00143c2:	0f 84 70 01 00 00    	je     c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00143c8:	b8 20 3b 02 c0       	mov    eax,0xc0023b20
c00143cd:	80 fa 15             	cmp    dl,0x15
c00143d0:	0f 84 62 01 00 00    	je     c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00143d6:	8d 4a ea             	lea    ecx,[edx-0x16]
c00143d9:	b8 40 3b 02 c0       	mov    eax,0xc0023b40
c00143de:	80 f9 01             	cmp    cl,0x1
c00143e1:	0f 86 51 01 00 00    	jbe    c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00143e7:	80 fa 1a             	cmp    dl,0x1a
c00143ea:	0f 84 37 01 00 00    	je     c0014527 <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c00143f0:	80 fa 1c             	cmp    dl,0x1c
c00143f3:	0f 84 34 01 00 00    	je     c001452d <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c00143f9:	80 fa 1d             	cmp    dl,0x1d
c00143fc:	0f 84 36 01 00 00    	je     c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014402:	b8 70 3b 02 c0       	mov    eax,0xc0023b70
c0014407:	80 fa 25             	cmp    dl,0x25
c001440a:	0f 84 28 01 00 00    	je     c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014410:	8d 4a da             	lea    ecx,[edx-0x26]
c0014413:	b8 60 3b 02 c0       	mov    eax,0xc0023b60
c0014418:	80 f9 01             	cmp    cl,0x1
c001441b:	0f 86 17 01 00 00    	jbe    c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014421:	b8 80 3b 02 c0       	mov    eax,0xc0023b80
c0014426:	80 fa 2a             	cmp    dl,0x2a
c0014429:	0f 84 09 01 00 00    	je     c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001442f:	b8 70 3b 02 c0       	mov    eax,0xc0023b70
c0014434:	80 fa 2c             	cmp    dl,0x2c
c0014437:	0f 84 fb 00 00 00    	je     c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001443d:	b8 80 3b 02 c0       	mov    eax,0xc0023b80
c0014442:	80 fa 2d             	cmp    dl,0x2d
c0014445:	0f 84 ed 00 00 00    	je     c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001444b:	b8 50 3b 02 c0       	mov    eax,0xc0023b50
c0014450:	80 fa 2e             	cmp    dl,0x2e
c0014453:	0f 84 df 00 00 00    	je     c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014459:	b8 70 3b 02 c0       	mov    eax,0xc0023b70
c001445e:	80 fa 2f             	cmp    dl,0x2f
c0014461:	0f 84 d1 00 00 00    	je     c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014467:	8d 4a cb             	lea    ecx,[edx-0x35]
c001446a:	b8 60 3b 02 c0       	mov    eax,0xc0023b60
c001446f:	80 f9 01             	cmp    cl,0x1
c0014472:	0f 86 c0 00 00 00    	jbe    c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014478:	b8 90 3b 02 c0       	mov    eax,0xc0023b90
c001447d:	80 fa 37             	cmp    dl,0x37
c0014480:	0f 84 b2 00 00 00    	je     c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014486:	b8 a0 3b 02 c0       	mov    eax,0xc0023ba0
c001448b:	80 fa 3a             	cmp    dl,0x3a
c001448e:	0f 84 a4 00 00 00    	je     c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014494:	b8 b0 3b 02 c0       	mov    eax,0xc0023bb0
c0014499:	80 fa 3c             	cmp    dl,0x3c
c001449c:	0f 84 96 00 00 00    	je     c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144a2:	b8 c0 3b 02 c0       	mov    eax,0xc0023bc0
c00144a7:	80 fa 3d             	cmp    dl,0x3d
c00144aa:	0f 84 88 00 00 00    	je     c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144b0:	b8 a0 3b 02 c0       	mov    eax,0xc0023ba0
c00144b5:	80 fa 3e             	cmp    dl,0x3e
c00144b8:	74 7e                	je     c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144ba:	8d 42 bb             	lea    eax,[edx-0x45]
c00144bd:	3c 01                	cmp    al,0x1
c00144bf:	76 72                	jbe    c0014533 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c00144c1:	80 fa 3f             	cmp    dl,0x3f
c00144c4:	74 6d                	je     c0014533 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c00144c6:	80 fa 4a             	cmp    dl,0x4a
c00144c9:	74 0a                	je     c00144d5 <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c00144cb:	b8 12 23 02 c0       	mov    eax,0xc0022312
c00144d0:	80 fa 4d             	cmp    dl,0x4d
c00144d3:	75 63                	jne    c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144d5:	b8 90 3b 02 c0       	mov    eax,0xc0023b90
c00144da:	c3                   	ret    
c00144db:	b8 12 23 02 c0       	mov    eax,0xc0022312
c00144e0:	80 f9 0b             	cmp    cl,0xb
c00144e3:	75 0a                	jne    c00144ef <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c00144e5:	fe ca                	dec    dl
c00144e7:	75 4f                	jne    c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144e9:	b8 d0 3b 02 c0       	mov    eax,0xc0023bd0
c00144ee:	c3                   	ret    
c00144ef:	80 f9 0f             	cmp    cl,0xf
c00144f2:	75 44                	jne    c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144f4:	b8 e0 3b 02 c0       	mov    eax,0xc0023be0
c00144f9:	80 fa 02             	cmp    dl,0x2
c00144fc:	76 3a                	jbe    c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144fe:	8d 42 fd             	lea    eax,[edx-0x3]
c0014501:	3c 01                	cmp    al,0x1
c0014503:	76 0a                	jbe    c001450f <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0014505:	b8 12 23 02 c0       	mov    eax,0xc0022312
c001450a:	80 fa 06             	cmp    dl,0x6
c001450d:	75 29                	jne    c0014538 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001450f:	b8 f0 3b 02 c0       	mov    eax,0xc0023bf0
c0014514:	c3                   	ret    
c0014515:	b8 d0 3a 02 c0       	mov    eax,0xc0023ad0
c001451a:	c3                   	ret    
c001451b:	b8 00 3b 02 c0       	mov    eax,0xc0023b00
c0014520:	c3                   	ret    
c0014521:	b8 20 3b 02 c0       	mov    eax,0xc0023b20
c0014526:	c3                   	ret    
c0014527:	b8 50 3b 02 c0       	mov    eax,0xc0023b50
c001452c:	c3                   	ret    
c001452d:	b8 60 3b 02 c0       	mov    eax,0xc0023b60
c0014532:	c3                   	ret    
c0014533:	b8 b0 3b 02 c0       	mov    eax,0xc0023bb0
c0014538:	c3                   	ret    

c0014539 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0014539:	60                   	pusha  
c001453a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001453e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014542:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014546:	9c                   	pushf  
c0014547:	fa                   	cli    
c0014548:	0f 09                	wbinvd 
c001454a:	0f 30                	wrmsr  
c001454c:	9d                   	popf   
c001454d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014551:	89 02                	mov    DWORD PTR [edx],eax
c0014553:	61                   	popa   
c0014554:	c3                   	ret    

c0014555 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0014555:	60                   	pusha  
c0014556:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001455a:	9c                   	pushf  
c001455b:	fa                   	cli    
c001455c:	0f 09                	wbinvd 
c001455e:	31 c0                	xor    eax,eax
c0014560:	31 d2                	xor    edx,edx
c0014562:	0f 32                	rdmsr  
c0014564:	9d                   	popf   
c0014565:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014569:	89 02                	mov    DWORD PTR [edx],eax
c001456b:	61                   	popa   
c001456c:	c3                   	ret    

c001456d <AMD_K6_writeback(int, int, int)>:
c001456d:	56                   	push   esi
c001456e:	53                   	push   ebx
c001456f:	83 ec 10             	sub    esp,0x10
c0014572:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014576:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001457b:	75 5d                	jne    c00145da <AMD_K6_writeback(int, int, int)+0x6d>
c001457d:	83 f8 08             	cmp    eax,0x8
c0014580:	75 09                	jne    c001458b <AMD_K6_writeback(int, int, int)+0x1e>
c0014582:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0014587:	7e 13                	jle    c001459c <AMD_K6_writeback(int, int, int)+0x2f>
c0014589:	eb 30                	jmp    c00145bb <AMD_K6_writeback(int, int, int)+0x4e>
c001458b:	83 f8 06             	cmp    eax,0x6
c001458e:	7c 4a                	jl     c00145da <AMD_K6_writeback(int, int, int)+0x6d>
c0014590:	83 f8 07             	cmp    eax,0x7
c0014593:	7e 07                	jle    c001459c <AMD_K6_writeback(int, int, int)+0x2f>
c0014595:	83 f8 09             	cmp    eax,0x9
c0014598:	74 21                	je     c00145bb <AMD_K6_writeback(int, int, int)+0x4e>
c001459a:	eb 3e                	jmp    c00145da <AMD_K6_writeback(int, int, int)+0x6d>
c001459c:	89 e6                	mov    esi,esp
c001459e:	8b 1d 24 43 02 c0    	mov    ebx,DWORD PTR ds:0xc0024324
c00145a4:	56                   	push   esi
c00145a5:	c1 eb 15             	shr    ebx,0x15
c00145a8:	68 82 00 00 c0       	push   0xc0000082
c00145ad:	83 e3 7e             	and    ebx,0x7e
c00145b0:	e8 a0 ff ff ff       	call   c0014555 <AMD_K6_read_msr(unsigned int, REGS*)>
c00145b5:	56                   	push   esi
c00145b6:	6a 00                	push   0x0
c00145b8:	53                   	push   ebx
c00145b9:	eb 12                	jmp    c00145cd <AMD_K6_writeback(int, int, int)+0x60>
c00145bb:	89 e3                	mov    ebx,esp
c00145bd:	53                   	push   ebx
c00145be:	68 82 00 00 c0       	push   0xc0000082
c00145c3:	e8 8d ff ff ff       	call   c0014555 <AMD_K6_read_msr(unsigned int, REGS*)>
c00145c8:	53                   	push   ebx
c00145c9:	6a 00                	push   0x0
c00145cb:	6a 00                	push   0x0
c00145cd:	68 82 00 00 c0       	push   0xc0000082
c00145d2:	e8 62 ff ff ff       	call   c0014539 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c00145d7:	83 c4 18             	add    esp,0x18
c00145da:	83 c4 10             	add    esp,0x10
c00145dd:	5b                   	pop    ebx
c00145de:	5e                   	pop    esi
c00145df:	c3                   	ret    

c00145e0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00145e0:	55                   	push   ebp
c00145e1:	57                   	push   edi
c00145e2:	56                   	push   esi
c00145e3:	53                   	push   ebx
c00145e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145e8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00145ec:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00145f0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00145f4:	39 05 00 3d 02 c0    	cmp    DWORD PTR ds:0xc0023d00,eax
c00145fa:	75 23                	jne    c001461f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00145fc:	a1 2c 4d 02 c0       	mov    eax,ds:0xc0024d2c
c0014601:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014605:	89 06                	mov    DWORD PTR [esi],eax
c0014607:	a1 28 4d 02 c0       	mov    eax,ds:0xc0024d28
c001460c:	89 07                	mov    DWORD PTR [edi],eax
c001460e:	a1 24 4d 02 c0       	mov    eax,ds:0xc0024d24
c0014613:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014616:	a1 20 4d 02 c0       	mov    eax,ds:0xc0024d20
c001461b:	89 02                	mov    DWORD PTR [edx],eax
c001461d:	eb 3f                	jmp    c001465e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001461f:	31 c9                	xor    ecx,ecx
c0014621:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014625:	0f a2                	cpuid  
c0014627:	89 06                	mov    DWORD PTR [esi],eax
c0014629:	89 1f                	mov    DWORD PTR [edi],ebx
c001462b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001462f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0014632:	89 10                	mov    DWORD PTR [eax],edx
c0014634:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014638:	a3 00 3d 02 c0       	mov    ds:0xc0023d00,eax
c001463d:	8b 06                	mov    eax,DWORD PTR [esi]
c001463f:	a3 2c 4d 02 c0       	mov    ds:0xc0024d2c,eax
c0014644:	8b 07                	mov    eax,DWORD PTR [edi]
c0014646:	a3 28 4d 02 c0       	mov    ds:0xc0024d28,eax
c001464b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001464e:	a3 24 4d 02 c0       	mov    ds:0xc0024d24,eax
c0014653:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014657:	8b 00                	mov    eax,DWORD PTR [eax]
c0014659:	a3 20 4d 02 c0       	mov    ds:0xc0024d20,eax
c001465e:	5b                   	pop    ebx
c001465f:	5e                   	pop    esi
c0014660:	5f                   	pop    edi
c0014661:	5d                   	pop    ebp
c0014662:	c3                   	ret    

c0014663 <cpuidCheckEDX(unsigned int)>:
c0014663:	83 ec 10             	sub    esp,0x10
c0014666:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001466a:	50                   	push   eax
c001466b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001466f:	50                   	push   eax
c0014670:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014674:	50                   	push   eax
c0014675:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014679:	50                   	push   eax
c001467a:	6a 01                	push   0x1
c001467c:	e8 5f ff ff ff       	call   c00145e0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014681:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014685:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0014689:	0f 95 c0             	setne  al
c001468c:	83 c4 24             	add    esp,0x24
c001468f:	c3                   	ret    

c0014690 <cpuidCheckECX(unsigned int)>:
c0014690:	83 ec 10             	sub    esp,0x10
c0014693:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014697:	50                   	push   eax
c0014698:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001469c:	50                   	push   eax
c001469d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146a1:	50                   	push   eax
c00146a2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146a6:	50                   	push   eax
c00146a7:	6a 01                	push   0x1
c00146a9:	e8 32 ff ff ff       	call   c00145e0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00146ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00146b2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00146b6:	0f 95 c0             	setne  al
c00146b9:	83 c4 24             	add    esp,0x24
c00146bc:	c3                   	ret    

c00146bd <cpuidCheckExtendedEBX(unsigned int)>:
c00146bd:	83 ec 10             	sub    esp,0x10
c00146c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146c4:	50                   	push   eax
c00146c5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146c9:	50                   	push   eax
c00146ca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146ce:	50                   	push   eax
c00146cf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146d3:	50                   	push   eax
c00146d4:	6a 07                	push   0x7
c00146d6:	e8 05 ff ff ff       	call   c00145e0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00146db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00146df:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00146e3:	0f 95 c0             	setne  al
c00146e6:	83 c4 24             	add    esp,0x24
c00146e9:	c3                   	ret    

c00146ea <cpuidCheckExtendedECX(unsigned int)>:
c00146ea:	83 ec 10             	sub    esp,0x10
c00146ed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146f1:	50                   	push   eax
c00146f2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146f6:	50                   	push   eax
c00146f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146fb:	50                   	push   eax
c00146fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014700:	50                   	push   eax
c0014701:	6a 07                	push   0x7
c0014703:	e8 d8 fe ff ff       	call   c00145e0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014708:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001470c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0014710:	0f 95 c0             	setne  al
c0014713:	83 c4 24             	add    esp,0x24
c0014716:	c3                   	ret    

c0014717 <getCPUNumber()>:
c0014717:	31 c0                	xor    eax,eax
c0014719:	c3                   	ret    

c001471a <thisCPU()>:
c001471a:	e8 f8 ff ff ff       	call   c0014717 <getCPUNumber()>
c001471f:	8b 15 e8 42 02 c0    	mov    edx,DWORD PTR ds:0xc00242e8
c0014725:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c001472c:	c3                   	ret    
c001472d:	90                   	nop

c001472e <CPU::CPU()>:
c001472e:	83 ec 0c             	sub    esp,0xc
c0014731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014735:	83 ec 08             	sub    esp,0x8
c0014738:	68 12 23 02 c0       	push   0xc0022312
c001473d:	50                   	push   eax
c001473e:	e8 ad bf ff ff       	call   c00106f0 <Device::Device(char const*)>
c0014743:	83 c4 10             	add    esp,0x10
c0014746:	ba ec 23 02 c0       	mov    edx,0xc00223ec
c001474b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001474f:	89 10                	mov    DWORD PTR [eax],edx
c0014751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014755:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001475f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014763:	05 78 01 00 00       	add    eax,0x178
c0014768:	83 ec 0c             	sub    esp,0xc
c001476b:	50                   	push   eax
c001476c:	e8 a3 70 ff ff       	call   c000b814 <GDT::GDT()>
c0014771:	83 c4 10             	add    esp,0x10
c0014774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014778:	05 7c 09 00 00       	add    eax,0x97c
c001477d:	83 ec 0c             	sub    esp,0xc
c0014780:	50                   	push   eax
c0014781:	e8 ee 72 ff ff       	call   c000ba74 <IDT::IDT()>
c0014786:	83 c4 10             	add    esp,0x10
c0014789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001478d:	05 7c 11 00 00       	add    eax,0x117c
c0014792:	83 ec 0c             	sub    esp,0xc
c0014795:	50                   	push   eax
c0014796:	e8 1d 93 ff ff       	call   c000dab8 <TSS::TSS()>
c001479b:	83 c4 10             	add    esp,0x10
c001479e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147a2:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00147a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ad:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00147b7:	90                   	nop
c00147b8:	83 c4 0c             	add    esp,0xc
c00147bb:	c3                   	ret    

c00147bc <CPU::displayFeatures()>:
c00147bc:	53                   	push   ebx
c00147bd:	83 ec 10             	sub    esp,0x10
c00147c0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00147c4:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00147ca:	68 20 20 02 c0       	push   0xc0022020
c00147cf:	e8 21 a9 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c00147d4:	59                   	pop    ecx
c00147d5:	58                   	pop    eax
c00147d6:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00147dc:	50                   	push   eax
c00147dd:	68 31 20 02 c0       	push   0xc0022031
c00147e2:	e8 0e a9 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c00147e7:	58                   	pop    eax
c00147e8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00147ee:	5a                   	pop    edx
c00147ef:	c1 e8 0e             	shr    eax,0xe
c00147f2:	0f b6 c0             	movzx  eax,al
c00147f5:	50                   	push   eax
c00147f6:	68 42 20 02 c0       	push   0xc0022042
c00147fb:	e8 f5 a8 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0014800:	59                   	pop    ecx
c0014801:	58                   	pop    eax
c0014802:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014808:	66 c1 e8 06          	shr    ax,0x6
c001480c:	0f b6 c0             	movzx  eax,al
c001480f:	50                   	push   eax
c0014810:	68 53 20 02 c0       	push   0xc0022053
c0014815:	e8 db a8 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001481a:	c7 04 24 66 24 02 c0 	mov    DWORD PTR [esp],0xc0022466
c0014821:	e8 cf a8 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0014826:	83 c4 10             	add    esp,0x10
c0014829:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c001482e:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0014835:	74 05                	je     c001483c <CPU::displayFeatures()+0x80>
c0014837:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c001483c:	52                   	push   edx
c001483d:	52                   	push   edx
c001483e:	50                   	push   eax
c001483f:	68 64 20 02 c0       	push   0xc0022064
c0014844:	e8 ac a8 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0014849:	83 c4 10             	add    esp,0x10
c001484c:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c0014851:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0014858:	78 05                	js     c001485f <CPU::displayFeatures()+0xa3>
c001485a:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c001485f:	51                   	push   ecx
c0014860:	51                   	push   ecx
c0014861:	50                   	push   eax
c0014862:	68 7b 20 02 c0       	push   0xc002207b
c0014867:	e8 89 a8 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001486c:	83 c4 10             	add    esp,0x10
c001486f:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c0014874:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001487b:	75 05                	jne    c0014882 <CPU::displayFeatures()+0xc6>
c001487d:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c0014882:	52                   	push   edx
c0014883:	52                   	push   edx
c0014884:	50                   	push   eax
c0014885:	68 92 20 02 c0       	push   0xc0022092
c001488a:	e8 66 a8 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001488f:	83 c4 10             	add    esp,0x10
c0014892:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c0014897:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001489e:	75 05                	jne    c00148a5 <CPU::displayFeatures()+0xe9>
c00148a0:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c00148a5:	51                   	push   ecx
c00148a6:	51                   	push   ecx
c00148a7:	50                   	push   eax
c00148a8:	68 a9 20 02 c0       	push   0xc00220a9
c00148ad:	e8 43 a8 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c00148b2:	83 c4 10             	add    esp,0x10
c00148b5:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c00148ba:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00148c1:	75 05                	jne    c00148c8 <CPU::displayFeatures()+0x10c>
c00148c3:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c00148c8:	52                   	push   edx
c00148c9:	52                   	push   edx
c00148ca:	50                   	push   eax
c00148cb:	68 c0 20 02 c0       	push   0xc00220c0
c00148d0:	e8 20 a8 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c00148d5:	83 c4 10             	add    esp,0x10
c00148d8:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c00148dd:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00148e4:	75 05                	jne    c00148eb <CPU::displayFeatures()+0x12f>
c00148e6:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c00148eb:	51                   	push   ecx
c00148ec:	51                   	push   ecx
c00148ed:	50                   	push   eax
c00148ee:	68 d7 20 02 c0       	push   0xc00220d7
c00148f3:	e8 fd a7 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c00148f8:	83 c4 10             	add    esp,0x10
c00148fb:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c0014900:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014907:	75 05                	jne    c001490e <CPU::displayFeatures()+0x152>
c0014909:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c001490e:	52                   	push   edx
c001490f:	52                   	push   edx
c0014910:	50                   	push   eax
c0014911:	68 ee 20 02 c0       	push   0xc00220ee
c0014916:	e8 da a7 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001491b:	83 c4 10             	add    esp,0x10
c001491e:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c0014923:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c001492a:	75 05                	jne    c0014931 <CPU::displayFeatures()+0x175>
c001492c:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c0014931:	51                   	push   ecx
c0014932:	51                   	push   ecx
c0014933:	50                   	push   eax
c0014934:	68 05 21 02 c0       	push   0xc0022105
c0014939:	e8 b7 a7 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001493e:	83 c4 10             	add    esp,0x10
c0014941:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c0014946:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001494d:	75 05                	jne    c0014954 <CPU::displayFeatures()+0x198>
c001494f:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c0014954:	52                   	push   edx
c0014955:	52                   	push   edx
c0014956:	50                   	push   eax
c0014957:	68 1c 21 02 c0       	push   0xc002211c
c001495c:	e8 94 a7 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0014961:	83 c4 10             	add    esp,0x10
c0014964:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c0014969:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0014970:	75 05                	jne    c0014977 <CPU::displayFeatures()+0x1bb>
c0014972:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c0014977:	51                   	push   ecx
c0014978:	51                   	push   ecx
c0014979:	50                   	push   eax
c001497a:	68 33 21 02 c0       	push   0xc0022133
c001497f:	e8 71 a7 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0014984:	83 c4 10             	add    esp,0x10
c0014987:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c001498c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014993:	75 05                	jne    c001499a <CPU::displayFeatures()+0x1de>
c0014995:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c001499a:	52                   	push   edx
c001499b:	52                   	push   edx
c001499c:	50                   	push   eax
c001499d:	68 4a 21 02 c0       	push   0xc002214a
c00149a2:	e8 4e a7 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c00149a7:	83 c4 10             	add    esp,0x10
c00149aa:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c00149af:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00149b6:	75 05                	jne    c00149bd <CPU::displayFeatures()+0x201>
c00149b8:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c00149bd:	51                   	push   ecx
c00149be:	51                   	push   ecx
c00149bf:	50                   	push   eax
c00149c0:	68 61 21 02 c0       	push   0xc0022161
c00149c5:	e8 2b a7 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c00149ca:	83 c4 10             	add    esp,0x10
c00149cd:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c00149d2:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00149d9:	75 05                	jne    c00149e0 <CPU::displayFeatures()+0x224>
c00149db:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c00149e0:	52                   	push   edx
c00149e1:	52                   	push   edx
c00149e2:	50                   	push   eax
c00149e3:	68 78 21 02 c0       	push   0xc0022178
c00149e8:	e8 08 a7 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c00149ed:	83 c4 10             	add    esp,0x10
c00149f0:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c00149f5:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00149fc:	78 05                	js     c0014a03 <CPU::displayFeatures()+0x247>
c00149fe:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c0014a03:	51                   	push   ecx
c0014a04:	51                   	push   ecx
c0014a05:	50                   	push   eax
c0014a06:	68 8f 21 02 c0       	push   0xc002218f
c0014a0b:	e8 e5 a6 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0014a10:	83 c4 10             	add    esp,0x10
c0014a13:	b8 4f 0d 02 c0       	mov    eax,0xc0020d4f
c0014a18:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0014a1f:	75 05                	jne    c0014a26 <CPU::displayFeatures()+0x26a>
c0014a21:	b8 53 0d 02 c0       	mov    eax,0xc0020d53
c0014a26:	52                   	push   edx
c0014a27:	52                   	push   edx
c0014a28:	50                   	push   eax
c0014a29:	68 a6 21 02 c0       	push   0xc00221a6
c0014a2e:	e8 c2 a6 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0014a33:	83 c4 18             	add    esp,0x18
c0014a36:	5b                   	pop    ebx
c0014a37:	c3                   	ret    

c0014a38 <CPU::detectFeatures()>:
c0014a38:	55                   	push   ebp
c0014a39:	57                   	push   edi
c0014a3a:	56                   	push   esi
c0014a3b:	53                   	push   ebx
c0014a3c:	83 ec 50             	sub    esp,0x50
c0014a3f:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0014a43:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0014a4d:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0014a54:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0014a5a:	6a 0d                	push   0xd
c0014a5c:	6a 00                	push   0x0
c0014a5e:	57                   	push   edi
c0014a5f:	e8 56 bc fe ff       	call   c00006ba <memset>
c0014a64:	83 c4 10             	add    esp,0x10
c0014a67:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c0014a6c:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0014a73:	0f 84 20 09 00 00    	je     c0015399 <CPU::detectFeatures()+0x961>
c0014a79:	83 ec 0c             	sub    esp,0xc
c0014a7c:	6a 10                	push   0x10
c0014a7e:	e8 e0 fb ff ff       	call   c0014663 <cpuidCheckEDX(unsigned int)>
c0014a83:	83 e0 01             	and    eax,0x1
c0014a86:	8d 14 00             	lea    edx,[eax+eax*1]
c0014a89:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014a8f:	83 e0 fd             	and    eax,0xfffffffd
c0014a92:	09 d0                	or     eax,edx
c0014a94:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014a9a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0014aa1:	e8 bd fb ff ff       	call   c0014663 <cpuidCheckEDX(unsigned int)>
c0014aa6:	83 e0 01             	and    eax,0x1
c0014aa9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014ab0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014ab6:	83 e0 fb             	and    eax,0xfffffffb
c0014ab9:	09 d0                	or     eax,edx
c0014abb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014ac1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0014ac8:	e8 96 fb ff ff       	call   c0014663 <cpuidCheckEDX(unsigned int)>
c0014acd:	83 e0 01             	and    eax,0x1
c0014ad0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014ad7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014add:	83 e0 f7             	and    eax,0xfffffff7
c0014ae0:	09 d0                	or     eax,edx
c0014ae2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014ae8:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0014aef:	e8 6f fb ff ff       	call   c0014663 <cpuidCheckEDX(unsigned int)>
c0014af4:	83 e0 01             	and    eax,0x1
c0014af7:	c1 e0 04             	shl    eax,0x4
c0014afa:	88 c2                	mov    dl,al
c0014afc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014b02:	83 e0 ef             	and    eax,0xffffffef
c0014b05:	09 d0                	or     eax,edx
c0014b07:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014b0d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0014b14:	e8 4a fb ff ff       	call   c0014663 <cpuidCheckEDX(unsigned int)>
c0014b19:	83 e0 01             	and    eax,0x1
c0014b1c:	c1 e0 05             	shl    eax,0x5
c0014b1f:	88 c2                	mov    dl,al
c0014b21:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014b27:	83 e0 df             	and    eax,0xffffffdf
c0014b2a:	09 d0                	or     eax,edx
c0014b2c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014b32:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0014b39:	e8 25 fb ff ff       	call   c0014663 <cpuidCheckEDX(unsigned int)>
c0014b3e:	83 e0 01             	and    eax,0x1
c0014b41:	8d 14 00             	lea    edx,[eax+eax*1]
c0014b44:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014b4a:	83 e0 fd             	and    eax,0xfffffffd
c0014b4d:	09 d0                	or     eax,edx
c0014b4f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014b55:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0014b5c:	e8 02 fb ff ff       	call   c0014663 <cpuidCheckEDX(unsigned int)>
c0014b61:	83 e0 01             	and    eax,0x1
c0014b64:	c1 e0 06             	shl    eax,0x6
c0014b67:	88 c2                	mov    dl,al
c0014b69:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014b6f:	83 e0 bf             	and    eax,0xffffffbf
c0014b72:	09 d0                	or     eax,edx
c0014b74:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014b7a:	58                   	pop    eax
c0014b7b:	8d 74 24 28          	lea    esi,[esp+0x28]
c0014b7f:	56                   	push   esi
c0014b80:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014b84:	55                   	push   ebp
c0014b85:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014b89:	50                   	push   eax
c0014b8a:	8d 54 24 28          	lea    edx,[esp+0x28]
c0014b8e:	52                   	push   edx
c0014b8f:	6a 00                	push   0x0
c0014b91:	e8 4a fa ff ff       	call   c00145e0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014b96:	83 c4 1c             	add    esp,0x1c
c0014b99:	6a 04                	push   0x4
c0014b9b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0014b9f:	50                   	push   eax
c0014ba0:	57                   	push   edi
c0014ba1:	e8 de ba fe ff       	call   c0000684 <memcpy>
c0014ba6:	83 c4 0c             	add    esp,0xc
c0014ba9:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0014baf:	6a 04                	push   0x4
c0014bb1:	56                   	push   esi
c0014bb2:	50                   	push   eax
c0014bb3:	e8 cc ba fe ff       	call   c0000684 <memcpy>
c0014bb8:	83 c4 0c             	add    esp,0xc
c0014bbb:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0014bc1:	6a 04                	push   0x4
c0014bc3:	55                   	push   ebp
c0014bc4:	50                   	push   eax
c0014bc5:	e8 ba ba fe ff       	call   c0000684 <memcpy>
c0014bca:	58                   	pop    eax
c0014bcb:	5a                   	pop    edx
c0014bcc:	68 bd 21 02 c0       	push   0xc00221bd
c0014bd1:	57                   	push   edi
c0014bd2:	e8 d3 bb fe ff       	call   c00007aa <strcmp>
c0014bd7:	83 c4 10             	add    esp,0x10
c0014bda:	85 c0                	test   eax,eax
c0014bdc:	75 0f                	jne    c0014bed <CPU::detectFeatures()+0x1b5>
c0014bde:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0014be8:	e9 22 02 00 00       	jmp    c0014e0f <CPU::detectFeatures()+0x3d7>
c0014bed:	50                   	push   eax
c0014bee:	50                   	push   eax
c0014bef:	68 ca 21 02 c0       	push   0xc00221ca
c0014bf4:	57                   	push   edi
c0014bf5:	e8 b0 bb fe ff       	call   c00007aa <strcmp>
c0014bfa:	83 c4 10             	add    esp,0x10
c0014bfd:	85 c0                	test   eax,eax
c0014bff:	74 dd                	je     c0014bde <CPU::detectFeatures()+0x1a6>
c0014c01:	51                   	push   ecx
c0014c02:	51                   	push   ecx
c0014c03:	68 d7 21 02 c0       	push   0xc00221d7
c0014c08:	57                   	push   edi
c0014c09:	e8 9c bb fe ff       	call   c00007aa <strcmp>
c0014c0e:	83 c4 10             	add    esp,0x10
c0014c11:	85 c0                	test   eax,eax
c0014c13:	74 2a                	je     c0014c3f <CPU::detectFeatures()+0x207>
c0014c15:	52                   	push   edx
c0014c16:	52                   	push   edx
c0014c17:	68 e4 21 02 c0       	push   0xc00221e4
c0014c1c:	57                   	push   edi
c0014c1d:	e8 88 bb fe ff       	call   c00007aa <strcmp>
c0014c22:	83 c4 10             	add    esp,0x10
c0014c25:	85 c0                	test   eax,eax
c0014c27:	74 16                	je     c0014c3f <CPU::detectFeatures()+0x207>
c0014c29:	50                   	push   eax
c0014c2a:	50                   	push   eax
c0014c2b:	68 f1 21 02 c0       	push   0xc00221f1
c0014c30:	57                   	push   edi
c0014c31:	e8 74 bb fe ff       	call   c00007aa <strcmp>
c0014c36:	83 c4 10             	add    esp,0x10
c0014c39:	85 c0                	test   eax,eax
c0014c3b:	74 48                	je     c0014c85 <CPU::detectFeatures()+0x24d>
c0014c3d:	eb 0f                	jmp    c0014c4e <CPU::detectFeatures()+0x216>
c0014c3f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0014c49:	e9 c1 01 00 00       	jmp    c0014e0f <CPU::detectFeatures()+0x3d7>
c0014c4e:	50                   	push   eax
c0014c4f:	50                   	push   eax
c0014c50:	68 fe 21 02 c0       	push   0xc00221fe
c0014c55:	57                   	push   edi
c0014c56:	e8 4f bb fe ff       	call   c00007aa <strcmp>
c0014c5b:	83 c4 10             	add    esp,0x10
c0014c5e:	85 c0                	test   eax,eax
c0014c60:	74 23                	je     c0014c85 <CPU::detectFeatures()+0x24d>
c0014c62:	50                   	push   eax
c0014c63:	50                   	push   eax
c0014c64:	68 0b 22 02 c0       	push   0xc002220b
c0014c69:	57                   	push   edi
c0014c6a:	e8 3b bb fe ff       	call   c00007aa <strcmp>
c0014c6f:	83 c4 10             	add    esp,0x10
c0014c72:	85 c0                	test   eax,eax
c0014c74:	75 1e                	jne    c0014c94 <CPU::detectFeatures()+0x25c>
c0014c76:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014c80:	e9 8a 01 00 00       	jmp    c0014e0f <CPU::detectFeatures()+0x3d7>
c0014c85:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0014c8f:	e9 7b 01 00 00       	jmp    c0014e0f <CPU::detectFeatures()+0x3d7>
c0014c94:	50                   	push   eax
c0014c95:	50                   	push   eax
c0014c96:	68 18 22 02 c0       	push   0xc0022218
c0014c9b:	57                   	push   edi
c0014c9c:	e8 09 bb fe ff       	call   c00007aa <strcmp>
c0014ca1:	83 c4 10             	add    esp,0x10
c0014ca4:	85 c0                	test   eax,eax
c0014ca6:	75 0f                	jne    c0014cb7 <CPU::detectFeatures()+0x27f>
c0014ca8:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0014cb2:	e9 58 01 00 00       	jmp    c0014e0f <CPU::detectFeatures()+0x3d7>
c0014cb7:	50                   	push   eax
c0014cb8:	50                   	push   eax
c0014cb9:	68 d7 21 02 c0       	push   0xc00221d7
c0014cbe:	57                   	push   edi
c0014cbf:	e8 e6 ba fe ff       	call   c00007aa <strcmp>
c0014cc4:	83 c4 10             	add    esp,0x10
c0014cc7:	85 c0                	test   eax,eax
c0014cc9:	75 0f                	jne    c0014cda <CPU::detectFeatures()+0x2a2>
c0014ccb:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0014cd5:	e9 35 01 00 00       	jmp    c0014e0f <CPU::detectFeatures()+0x3d7>
c0014cda:	50                   	push   eax
c0014cdb:	50                   	push   eax
c0014cdc:	68 25 22 02 c0       	push   0xc0022225
c0014ce1:	57                   	push   edi
c0014ce2:	e8 c3 ba fe ff       	call   c00007aa <strcmp>
c0014ce7:	83 c4 10             	add    esp,0x10
c0014cea:	85 c0                	test   eax,eax
c0014cec:	75 0f                	jne    c0014cfd <CPU::detectFeatures()+0x2c5>
c0014cee:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0014cf8:	e9 12 01 00 00       	jmp    c0014e0f <CPU::detectFeatures()+0x3d7>
c0014cfd:	51                   	push   ecx
c0014cfe:	51                   	push   ecx
c0014cff:	68 32 22 02 c0       	push   0xc0022232
c0014d04:	57                   	push   edi
c0014d05:	e8 a0 ba fe ff       	call   c00007aa <strcmp>
c0014d0a:	83 c4 10             	add    esp,0x10
c0014d0d:	85 c0                	test   eax,eax
c0014d0f:	75 0f                	jne    c0014d20 <CPU::detectFeatures()+0x2e8>
c0014d11:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0014d1b:	e9 ef 00 00 00       	jmp    c0014e0f <CPU::detectFeatures()+0x3d7>
c0014d20:	52                   	push   edx
c0014d21:	52                   	push   edx
c0014d22:	68 3f 22 02 c0       	push   0xc002223f
c0014d27:	57                   	push   edi
c0014d28:	e8 7d ba fe ff       	call   c00007aa <strcmp>
c0014d2d:	83 c4 10             	add    esp,0x10
c0014d30:	85 c0                	test   eax,eax
c0014d32:	75 0f                	jne    c0014d43 <CPU::detectFeatures()+0x30b>
c0014d34:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0014d3e:	e9 cc 00 00 00       	jmp    c0014e0f <CPU::detectFeatures()+0x3d7>
c0014d43:	50                   	push   eax
c0014d44:	50                   	push   eax
c0014d45:	68 4c 22 02 c0       	push   0xc002224c
c0014d4a:	57                   	push   edi
c0014d4b:	e8 5a ba fe ff       	call   c00007aa <strcmp>
c0014d50:	83 c4 10             	add    esp,0x10
c0014d53:	85 c0                	test   eax,eax
c0014d55:	75 0f                	jne    c0014d66 <CPU::detectFeatures()+0x32e>
c0014d57:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0014d61:	e9 a9 00 00 00       	jmp    c0014e0f <CPU::detectFeatures()+0x3d7>
c0014d66:	50                   	push   eax
c0014d67:	50                   	push   eax
c0014d68:	68 59 22 02 c0       	push   0xc0022259
c0014d6d:	57                   	push   edi
c0014d6e:	e8 37 ba fe ff       	call   c00007aa <strcmp>
c0014d73:	83 c4 10             	add    esp,0x10
c0014d76:	85 c0                	test   eax,eax
c0014d78:	75 0f                	jne    c0014d89 <CPU::detectFeatures()+0x351>
c0014d7a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0014d84:	e9 86 00 00 00       	jmp    c0014e0f <CPU::detectFeatures()+0x3d7>
c0014d89:	50                   	push   eax
c0014d8a:	50                   	push   eax
c0014d8b:	68 66 22 02 c0       	push   0xc0022266
c0014d90:	57                   	push   edi
c0014d91:	e8 14 ba fe ff       	call   c00007aa <strcmp>
c0014d96:	83 c4 10             	add    esp,0x10
c0014d99:	85 c0                	test   eax,eax
c0014d9b:	75 0c                	jne    c0014da9 <CPU::detectFeatures()+0x371>
c0014d9d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0014da7:	eb 66                	jmp    c0014e0f <CPU::detectFeatures()+0x3d7>
c0014da9:	50                   	push   eax
c0014daa:	50                   	push   eax
c0014dab:	68 73 22 02 c0       	push   0xc0022273
c0014db0:	57                   	push   edi
c0014db1:	e8 f4 b9 fe ff       	call   c00007aa <strcmp>
c0014db6:	83 c4 10             	add    esp,0x10
c0014db9:	85 c0                	test   eax,eax
c0014dbb:	75 0c                	jne    c0014dc9 <CPU::detectFeatures()+0x391>
c0014dbd:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0014dc7:	eb 46                	jmp    c0014e0f <CPU::detectFeatures()+0x3d7>
c0014dc9:	50                   	push   eax
c0014dca:	50                   	push   eax
c0014dcb:	68 80 22 02 c0       	push   0xc0022280
c0014dd0:	57                   	push   edi
c0014dd1:	e8 d4 b9 fe ff       	call   c00007aa <strcmp>
c0014dd6:	83 c4 10             	add    esp,0x10
c0014dd9:	85 c0                	test   eax,eax
c0014ddb:	74 e0                	je     c0014dbd <CPU::detectFeatures()+0x385>
c0014ddd:	50                   	push   eax
c0014dde:	50                   	push   eax
c0014ddf:	68 8d 22 02 c0       	push   0xc002228d
c0014de4:	57                   	push   edi
c0014de5:	e8 c0 b9 fe ff       	call   c00007aa <strcmp>
c0014dea:	83 c4 10             	add    esp,0x10
c0014ded:	85 c0                	test   eax,eax
c0014def:	74 cc                	je     c0014dbd <CPU::detectFeatures()+0x385>
c0014df1:	51                   	push   ecx
c0014df2:	51                   	push   ecx
c0014df3:	68 9a 22 02 c0       	push   0xc002229a
c0014df8:	57                   	push   edi
c0014df9:	e8 ac b9 fe ff       	call   c00007aa <strcmp>
c0014dfe:	83 c4 10             	add    esp,0x10
c0014e01:	85 c0                	test   eax,eax
c0014e03:	74 b8                	je     c0014dbd <CPU::detectFeatures()+0x385>
c0014e05:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0014e0f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0014e14:	0f 86 be 00 00 00    	jbe    c0014ed8 <CPU::detectFeatures()+0x4a0>
c0014e1a:	83 ec 0c             	sub    esp,0xc
c0014e1d:	68 80 00 00 00       	push   0x80
c0014e22:	e8 96 f8 ff ff       	call   c00146bd <cpuidCheckExtendedEBX(unsigned int)>
c0014e27:	83 e0 01             	and    eax,0x1
c0014e2a:	c1 e0 06             	shl    eax,0x6
c0014e2d:	88 c2                	mov    dl,al
c0014e2f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014e35:	83 e0 bf             	and    eax,0xffffffbf
c0014e38:	09 d0                	or     eax,edx
c0014e3a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014e40:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0014e47:	e8 71 f8 ff ff       	call   c00146bd <cpuidCheckExtendedEBX(unsigned int)>
c0014e4c:	83 e0 01             	and    eax,0x1
c0014e4f:	c1 e0 04             	shl    eax,0x4
c0014e52:	88 c2                	mov    dl,al
c0014e54:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014e5a:	83 e0 ef             	and    eax,0xffffffef
c0014e5d:	09 d0                	or     eax,edx
c0014e5f:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014e65:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0014e6c:	e8 4c f8 ff ff       	call   c00146bd <cpuidCheckExtendedEBX(unsigned int)>
c0014e71:	c1 e0 07             	shl    eax,0x7
c0014e74:	88 c2                	mov    dl,al
c0014e76:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014e7c:	83 e0 7f             	and    eax,0x7f
c0014e7f:	09 d0                	or     eax,edx
c0014e81:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014e87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0014e8e:	e8 57 f8 ff ff       	call   c00146ea <cpuidCheckExtendedECX(unsigned int)>
c0014e93:	83 e0 01             	and    eax,0x1
c0014e96:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014e9d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014ea3:	83 e0 f7             	and    eax,0xfffffff7
c0014ea6:	09 d0                	or     eax,edx
c0014ea8:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014eae:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0014eb5:	e8 30 f8 ff ff       	call   c00146ea <cpuidCheckExtendedECX(unsigned int)>
c0014eba:	83 c4 10             	add    esp,0x10
c0014ebd:	83 e0 01             	and    eax,0x1
c0014ec0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014ec7:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014ecd:	83 e0 fb             	and    eax,0xfffffffb
c0014ed0:	09 d0                	or     eax,edx
c0014ed2:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014ed8:	83 ec 0c             	sub    esp,0xc
c0014edb:	56                   	push   esi
c0014edc:	55                   	push   ebp
c0014edd:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0014ee1:	57                   	push   edi
c0014ee2:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014ee6:	50                   	push   eax
c0014ee7:	6a 01                	push   0x1
c0014ee9:	e8 f2 f6 ff ff       	call   c00145e0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014eee:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014ef2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0014ef8:	88 ca                	mov    dl,cl
c0014efa:	83 e0 f0             	and    eax,0xfffffff0
c0014efd:	83 e2 0f             	and    edx,0xf
c0014f00:	09 d0                	or     eax,edx
c0014f02:	88 ca                	mov    dl,cl
c0014f04:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0014f0a:	c0 ea 04             	shr    dl,0x4
c0014f0d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0014f11:	0f b6 c2             	movzx  eax,dl
c0014f14:	83 c4 20             	add    esp,0x20
c0014f17:	c1 e0 06             	shl    eax,0x6
c0014f1a:	89 c5                	mov    ebp,eax
c0014f1c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014f22:	66 25 3f c0          	and    ax,0xc03f
c0014f26:	09 e8                	or     eax,ebp
c0014f28:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0014f2f:	89 c8                	mov    eax,ecx
c0014f31:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0014f37:	c1 e8 08             	shr    eax,0x8
c0014f3a:	83 e2 3f             	and    edx,0x3f
c0014f3d:	83 e0 0f             	and    eax,0xf
c0014f40:	89 c5                	mov    ebp,eax
c0014f42:	c1 e5 06             	shl    ebp,0x6
c0014f45:	09 d5                	or     ebp,edx
c0014f47:	89 ea                	mov    edx,ebp
c0014f49:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0014f4f:	88 c2                	mov    dl,al
c0014f51:	c0 ea 02             	shr    dl,0x2
c0014f54:	89 d5                	mov    ebp,edx
c0014f56:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0014f5c:	83 e2 c0             	and    edx,0xffffffc0
c0014f5f:	09 d5                	or     ebp,edx
c0014f61:	89 ea                	mov    edx,ebp
c0014f63:	89 cd                	mov    ebp,ecx
c0014f65:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0014f6b:	c1 ed 0c             	shr    ebp,0xc
c0014f6e:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0014f74:	83 e5 03             	and    ebp,0x3
c0014f77:	83 e2 cf             	and    edx,0xffffffcf
c0014f7a:	c1 e5 04             	shl    ebp,0x4
c0014f7d:	09 d5                	or     ebp,edx
c0014f7f:	3c 06                	cmp    al,0x6
c0014f81:	89 ea                	mov    edx,ebp
c0014f83:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0014f89:	74 04                	je     c0014f8f <CPU::detectFeatures()+0x557>
c0014f8b:	3c 0f                	cmp    al,0xf
c0014f8d:	75 5c                	jne    c0014feb <CPU::detectFeatures()+0x5b3>
c0014f8f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0014f93:	89 cd                	mov    ebp,ecx
c0014f95:	c1 ed 10             	shr    ebp,0x10
c0014f98:	c1 e5 04             	shl    ebp,0x4
c0014f9b:	09 ea                	or     edx,ebp
c0014f9d:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0014fa3:	0f b6 d2             	movzx  edx,dl
c0014fa6:	66 81 e5 3f c0       	and    bp,0xc03f
c0014fab:	c1 e2 06             	shl    edx,0x6
c0014fae:	09 ea                	or     edx,ebp
c0014fb0:	3c 0f                	cmp    al,0xf
c0014fb2:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0014fb9:	75 30                	jne    c0014feb <CPU::detectFeatures()+0x5b3>
c0014fbb:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0014fc1:	c1 e9 14             	shr    ecx,0x14
c0014fc4:	83 e0 3f             	and    eax,0x3f
c0014fc7:	83 c1 0f             	add    ecx,0xf
c0014fca:	88 ca                	mov    dl,cl
c0014fcc:	c0 e9 02             	shr    cl,0x2
c0014fcf:	c1 e2 06             	shl    edx,0x6
c0014fd2:	09 d0                	or     eax,edx
c0014fd4:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0014fda:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0014fe0:	83 e0 c0             	and    eax,0xffffffc0
c0014fe3:	09 c1                	or     ecx,eax
c0014fe5:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0014feb:	83 ec 0c             	sub    esp,0xc
c0014fee:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0014ff5:	56                   	push   esi
c0014ff6:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014ffa:	50                   	push   eax
c0014ffb:	57                   	push   edi
c0014ffc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0015000:	55                   	push   ebp
c0015001:	68 00 00 00 80       	push   0x80000000
c0015006:	e8 d5 f5 ff ff       	call   c00145e0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001500b:	83 c4 20             	add    esp,0x20
c001500e:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0015016:	8d 44 24 18          	lea    eax,[esp+0x18]
c001501a:	76 1e                	jbe    c001503a <CPU::detectFeatures()+0x602>
c001501c:	83 ec 0c             	sub    esp,0xc
c001501f:	56                   	push   esi
c0015020:	50                   	push   eax
c0015021:	57                   	push   edi
c0015022:	55                   	push   ebp
c0015023:	68 01 00 00 80       	push   0x80000001
c0015028:	e8 b3 f5 ff ff       	call   c00145e0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001502d:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0015037:	83 c4 20             	add    esp,0x20
c001503a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0015040:	83 f8 01             	cmp    eax,0x1
c0015043:	75 6f                	jne    c00150b4 <CPU::detectFeatures()+0x67c>
c0015045:	51                   	push   ecx
c0015046:	51                   	push   ecx
c0015047:	68 a6 22 02 c0       	push   0xc00222a6
c001504c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015050:	56                   	push   esi
c0015051:	e8 03 b7 fe ff       	call   c0000759 <strcpy>
c0015056:	5f                   	pop    edi
c0015057:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001505d:	5d                   	pop    ebp
c001505e:	66 c1 e8 06          	shr    ax,0x6
c0015062:	0f b6 c0             	movzx  eax,al
c0015065:	50                   	push   eax
c0015066:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001506c:	c1 e8 0e             	shr    eax,0xe
c001506f:	0f b6 c0             	movzx  eax,al
c0015072:	50                   	push   eax
c0015073:	e8 13 f2 ff ff       	call   c001428b <lookupIntelCPUName(unsigned char, unsigned char)>
c0015078:	5a                   	pop    edx
c0015079:	59                   	pop    ecx
c001507a:	50                   	push   eax
c001507b:	56                   	push   esi
c001507c:	e8 8f b7 fe ff       	call   c0000810 <strcat>
c0015081:	5f                   	pop    edi
c0015082:	5d                   	pop    ebp
c0015083:	56                   	push   esi
c0015084:	53                   	push   ebx
c0015085:	e8 58 b6 ff ff       	call   c00106e2 <Device::setName(char const*)>
c001508a:	58                   	pop    eax
c001508b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0015091:	5a                   	pop    edx
c0015092:	68 ad 22 02 c0       	push   0xc00222ad
c0015097:	50                   	push   eax
c0015098:	e8 0d b7 fe ff       	call   c00007aa <strcmp>
c001509d:	83 c4 10             	add    esp,0x10
c00150a0:	85 c0                	test   eax,eax
c00150a2:	0f 85 73 03 00 00    	jne    c001541b <CPU::detectFeatures()+0x9e3>
c00150a8:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00150af:	e9 67 03 00 00       	jmp    c001541b <CPU::detectFeatures()+0x9e3>
c00150b4:	83 f8 02             	cmp    eax,0x2
c00150b7:	0f 85 b5 00 00 00    	jne    c0015172 <CPU::detectFeatures()+0x73a>
c00150bd:	57                   	push   edi
c00150be:	57                   	push   edi
c00150bf:	68 bf 22 02 c0       	push   0xc00222bf
c00150c4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00150c8:	56                   	push   esi
c00150c9:	e8 8b b6 fe ff       	call   c0000759 <strcpy>
c00150ce:	5d                   	pop    ebp
c00150cf:	58                   	pop    eax
c00150d0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00150d6:	66 c1 e8 06          	shr    ax,0x6
c00150da:	0f b6 c0             	movzx  eax,al
c00150dd:	50                   	push   eax
c00150de:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00150e4:	c1 e8 0e             	shr    eax,0xe
c00150e7:	0f b6 c0             	movzx  eax,al
c00150ea:	50                   	push   eax
c00150eb:	e8 07 f0 ff ff       	call   c00140f7 <lookupAMDCPUName(unsigned char, unsigned char)>
c00150f0:	5a                   	pop    edx
c00150f1:	59                   	pop    ecx
c00150f2:	50                   	push   eax
c00150f3:	56                   	push   esi
c00150f4:	e8 17 b7 fe ff       	call   c0000810 <strcat>
c00150f9:	5f                   	pop    edi
c00150fa:	5d                   	pop    ebp
c00150fb:	56                   	push   esi
c00150fc:	53                   	push   ebx
c00150fd:	e8 e0 b5 ff ff       	call   c00106e2 <Device::setName(char const*)>
c0015102:	58                   	pop    eax
c0015103:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0015109:	5a                   	pop    edx
c001510a:	68 c4 22 02 c0       	push   0xc00222c4
c001510f:	50                   	push   eax
c0015110:	e8 95 b6 fe ff       	call   c00007aa <strcmp>
c0015115:	83 c4 10             	add    esp,0x10
c0015118:	85 c0                	test   eax,eax
c001511a:	75 20                	jne    c001513c <CPU::detectFeatures()+0x704>
c001511c:	8b 15 e8 42 02 c0    	mov    edx,DWORD PTR ds:0xc00242e8
c0015122:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0015128:	a8 01                	test   al,0x1
c001512a:	74 10                	je     c001513c <CPU::detectFeatures()+0x704>
c001512c:	83 e0 fe             	and    eax,0xfffffffe
c001512f:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0015135:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001513c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015142:	c1 e8 0e             	shr    eax,0xe
c0015145:	3c 05                	cmp    al,0x5
c0015147:	0f 85 ce 02 00 00    	jne    c001541b <CPU::detectFeatures()+0x9e3>
c001514d:	56                   	push   esi
c001514e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0015154:	83 e0 0f             	and    eax,0xf
c0015157:	50                   	push   eax
c0015158:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001515e:	66 c1 e8 06          	shr    ax,0x6
c0015162:	0f b6 c0             	movzx  eax,al
c0015165:	50                   	push   eax
c0015166:	6a 05                	push   0x5
c0015168:	e8 00 f4 ff ff       	call   c001456d <AMD_K6_writeback(int, int, int)>
c001516d:	e9 1f 02 00 00       	jmp    c0015391 <CPU::detectFeatures()+0x959>
c0015172:	8d 50 fd             	lea    edx,[eax-0x3]
c0015175:	83 fa 01             	cmp    edx,0x1
c0015178:	76 09                	jbe    c0015183 <CPU::detectFeatures()+0x74b>
c001517a:	83 f8 06             	cmp    eax,0x6
c001517d:	0f 85 91 01 00 00    	jne    c0015314 <CPU::detectFeatures()+0x8dc>
c0015183:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0015189:	c1 ea 0e             	shr    edx,0xe
c001518c:	80 fa 05             	cmp    dl,0x5
c001518f:	75 7b                	jne    c001520c <CPU::detectFeatures()+0x7d4>
c0015191:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0015197:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001519c:	66 81 fa 00 01       	cmp    dx,0x100
c00151a1:	75 0c                	jne    c00151af <CPU::detectFeatures()+0x777>
c00151a3:	51                   	push   ecx
c00151a4:	51                   	push   ecx
c00151a5:	68 cb 22 02 c0       	push   0xc00222cb
c00151aa:	e9 dc 01 00 00       	jmp    c001538b <CPU::detectFeatures()+0x953>
c00151af:	66 81 fa 00 02       	cmp    dx,0x200
c00151b4:	75 0c                	jne    c00151c2 <CPU::detectFeatures()+0x78a>
c00151b6:	52                   	push   edx
c00151b7:	52                   	push   edx
c00151b8:	68 de 22 02 c0       	push   0xc00222de
c00151bd:	e9 c9 01 00 00       	jmp    c001538b <CPU::detectFeatures()+0x953>
c00151c2:	66 81 fa 40 02       	cmp    dx,0x240
c00151c7:	75 0c                	jne    c00151d5 <CPU::detectFeatures()+0x79d>
c00151c9:	50                   	push   eax
c00151ca:	50                   	push   eax
c00151cb:	68 f0 22 02 c0       	push   0xc00222f0
c00151d0:	e9 b6 01 00 00       	jmp    c001538b <CPU::detectFeatures()+0x953>
c00151d5:	83 f8 06             	cmp    eax,0x6
c00151d8:	75 0c                	jne    c00151e6 <CPU::detectFeatures()+0x7ae>
c00151da:	50                   	push   eax
c00151db:	50                   	push   eax
c00151dc:	68 02 23 02 c0       	push   0xc0022302
c00151e1:	e9 a5 01 00 00       	jmp    c001538b <CPU::detectFeatures()+0x953>
c00151e6:	83 f8 04             	cmp    eax,0x4
c00151e9:	75 0c                	jne    c00151f7 <CPU::detectFeatures()+0x7bf>
c00151eb:	50                   	push   eax
c00151ec:	50                   	push   eax
c00151ed:	68 0e 23 02 c0       	push   0xc002230e
c00151f2:	e9 94 01 00 00       	jmp    c001538b <CPU::detectFeatures()+0x953>
c00151f7:	83 f8 03             	cmp    eax,0x3
c00151fa:	0f 85 1b 02 00 00    	jne    c001541b <CPU::detectFeatures()+0x9e3>
c0015200:	50                   	push   eax
c0015201:	50                   	push   eax
c0015202:	68 16 23 02 c0       	push   0xc0022316
c0015207:	e9 7f 01 00 00       	jmp    c001538b <CPU::detectFeatures()+0x953>
c001520c:	80 fa 06             	cmp    dl,0x6
c001520f:	0f 85 db 00 00 00    	jne    c00152f0 <CPU::detectFeatures()+0x8b8>
c0015215:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001521b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0015220:	66 81 fa 80 01       	cmp    dx,0x180
c0015225:	75 0c                	jne    c0015233 <CPU::detectFeatures()+0x7fb>
c0015227:	50                   	push   eax
c0015228:	50                   	push   eax
c0015229:	68 21 23 02 c0       	push   0xc0022321
c001522e:	e9 58 01 00 00       	jmp    c001538b <CPU::detectFeatures()+0x953>
c0015233:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0015239:	66 f7 c1 80 ff       	test   cx,0xff80
c001523e:	75 0c                	jne    c001524c <CPU::detectFeatures()+0x814>
c0015240:	50                   	push   eax
c0015241:	50                   	push   eax
c0015242:	68 31 23 02 c0       	push   0xc0022331
c0015247:	e9 3f 01 00 00       	jmp    c001538b <CPU::detectFeatures()+0x953>
c001524c:	66 81 fa 40 02       	cmp    dx,0x240
c0015251:	75 0c                	jne    c001525f <CPU::detectFeatures()+0x827>
c0015253:	55                   	push   ebp
c0015254:	55                   	push   ebp
c0015255:	68 38 23 02 c0       	push   0xc0022338
c001525a:	e9 2c 01 00 00       	jmp    c001538b <CPU::detectFeatures()+0x953>
c001525f:	66 81 fa 80 02       	cmp    dx,0x280
c0015264:	75 0c                	jne    c0015272 <CPU::detectFeatures()+0x83a>
c0015266:	57                   	push   edi
c0015267:	57                   	push   edi
c0015268:	68 41 23 02 c0       	push   0xc0022341
c001526d:	e9 19 01 00 00       	jmp    c001538b <CPU::detectFeatures()+0x953>
c0015272:	66 81 fa 40 03       	cmp    dx,0x340
c0015277:	74 ed                	je     c0015266 <CPU::detectFeatures()+0x82e>
c0015279:	66 81 fa c0 03       	cmp    dx,0x3c0
c001527e:	75 0c                	jne    c001528c <CPU::detectFeatures()+0x854>
c0015280:	56                   	push   esi
c0015281:	56                   	push   esi
c0015282:	68 48 23 02 c0       	push   0xc0022348
c0015287:	e9 ff 00 00 00       	jmp    c001538b <CPU::detectFeatures()+0x953>
c001528c:	83 f8 06             	cmp    eax,0x6
c001528f:	0f 84 45 ff ff ff    	je     c00151da <CPU::detectFeatures()+0x7a2>
c0015295:	83 f8 04             	cmp    eax,0x4
c0015298:	0f 84 4d ff ff ff    	je     c00151eb <CPU::detectFeatures()+0x7b3>
c001529e:	83 f8 03             	cmp    eax,0x3
c00152a1:	0f 85 74 01 00 00    	jne    c001541b <CPU::detectFeatures()+0x9e3>
c00152a7:	51                   	push   ecx
c00152a8:	51                   	push   ecx
c00152a9:	68 51 23 02 c0       	push   0xc0022351
c00152ae:	53                   	push   ebx
c00152af:	e8 2e b4 ff ff       	call   c00106e2 <Device::setName(char const*)>
c00152b4:	b1 c1                	mov    cl,0xc1
c00152b6:	88 c8                	mov    al,cl
c00152b8:	e6 22                	out    0x22,al
c00152ba:	e4 23                	in     al,0x23
c00152bc:	88 c2                	mov    dl,al
c00152be:	88 c8                	mov    al,cl
c00152c0:	e6 22                	out    0x22,al
c00152c2:	88 d0                	mov    al,dl
c00152c4:	83 c8 10             	or     eax,0x10
c00152c7:	e6 23                	out    0x23,al
c00152c9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00152d0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00152d3:	89 d0                	mov    eax,edx
c00152d5:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00152db:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00152df:	40                   	inc    eax
c00152e0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00152e6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00152eb:	e9 a1 00 00 00       	jmp    c0015391 <CPU::detectFeatures()+0x959>
c00152f0:	83 f8 06             	cmp    eax,0x6
c00152f3:	0f 84 e1 fe ff ff    	je     c00151da <CPU::detectFeatures()+0x7a2>
c00152f9:	83 f8 04             	cmp    eax,0x4
c00152fc:	0f 84 e9 fe ff ff    	je     c00151eb <CPU::detectFeatures()+0x7b3>
c0015302:	83 f8 03             	cmp    eax,0x3
c0015305:	0f 85 10 01 00 00    	jne    c001541b <CPU::detectFeatures()+0x9e3>
c001530b:	52                   	push   edx
c001530c:	52                   	push   edx
c001530d:	68 5c 23 02 c0       	push   0xc002235c
c0015312:	eb 77                	jmp    c001538b <CPU::detectFeatures()+0x953>
c0015314:	83 f8 07             	cmp    eax,0x7
c0015317:	75 09                	jne    c0015322 <CPU::detectFeatures()+0x8ea>
c0015319:	50                   	push   eax
c001531a:	50                   	push   eax
c001531b:	68 66 23 02 c0       	push   0xc0022366
c0015320:	eb 69                	jmp    c001538b <CPU::detectFeatures()+0x953>
c0015322:	83 f8 0a             	cmp    eax,0xa
c0015325:	75 09                	jne    c0015330 <CPU::detectFeatures()+0x8f8>
c0015327:	50                   	push   eax
c0015328:	50                   	push   eax
c0015329:	68 71 23 02 c0       	push   0xc0022371
c001532e:	eb 5b                	jmp    c001538b <CPU::detectFeatures()+0x953>
c0015330:	83 f8 0b             	cmp    eax,0xb
c0015333:	75 09                	jne    c001533e <CPU::detectFeatures()+0x906>
c0015335:	50                   	push   eax
c0015336:	50                   	push   eax
c0015337:	68 79 23 02 c0       	push   0xc0022379
c001533c:	eb 4d                	jmp    c001538b <CPU::detectFeatures()+0x953>
c001533e:	83 f8 08             	cmp    eax,0x8
c0015341:	75 09                	jne    c001534c <CPU::detectFeatures()+0x914>
c0015343:	50                   	push   eax
c0015344:	50                   	push   eax
c0015345:	68 82 23 02 c0       	push   0xc0022382
c001534a:	eb 3f                	jmp    c001538b <CPU::detectFeatures()+0x953>
c001534c:	83 f8 09             	cmp    eax,0x9
c001534f:	75 09                	jne    c001535a <CPU::detectFeatures()+0x922>
c0015351:	50                   	push   eax
c0015352:	50                   	push   eax
c0015353:	68 8a 23 02 c0       	push   0xc002238a
c0015358:	eb 31                	jmp    c001538b <CPU::detectFeatures()+0x953>
c001535a:	83 f8 05             	cmp    eax,0x5
c001535d:	75 09                	jne    c0015368 <CPU::detectFeatures()+0x930>
c001535f:	50                   	push   eax
c0015360:	50                   	push   eax
c0015361:	68 92 23 02 c0       	push   0xc0022392
c0015366:	eb 23                	jmp    c001538b <CPU::detectFeatures()+0x953>
c0015368:	83 f8 0c             	cmp    eax,0xc
c001536b:	75 09                	jne    c0015376 <CPU::detectFeatures()+0x93e>
c001536d:	55                   	push   ebp
c001536e:	55                   	push   ebp
c001536f:	68 a0 23 02 c0       	push   0xc00223a0
c0015374:	eb 15                	jmp    c001538b <CPU::detectFeatures()+0x953>
c0015376:	83 f8 0d             	cmp    eax,0xd
c0015379:	75 09                	jne    c0015384 <CPU::detectFeatures()+0x94c>
c001537b:	57                   	push   edi
c001537c:	57                   	push   edi
c001537d:	68 ab 23 02 c0       	push   0xc00223ab
c0015382:	eb 07                	jmp    c001538b <CPU::detectFeatures()+0x953>
c0015384:	56                   	push   esi
c0015385:	56                   	push   esi
c0015386:	68 bf 23 02 c0       	push   0xc00223bf
c001538b:	53                   	push   ebx
c001538c:	e8 51 b3 ff ff       	call   c00106e2 <Device::setName(char const*)>
c0015391:	83 c4 10             	add    esp,0x10
c0015394:	e9 82 00 00 00       	jmp    c001541b <CPU::detectFeatures()+0x9e3>
c0015399:	51                   	push   ecx
c001539a:	51                   	push   ecx
c001539b:	68 0b 22 02 c0       	push   0xc002220b
c00153a0:	57                   	push   edi
c00153a1:	e8 b3 b3 fe ff       	call   c0000759 <strcpy>
c00153a6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00153b0:	e8 7c ae fe ff       	call   c0000231 <is486>
c00153b5:	83 c4 10             	add    esp,0x10
c00153b8:	85 c0                	test   eax,eax
c00153ba:	74 2d                	je     c00153e9 <CPU::detectFeatures()+0x9b1>
c00153bc:	52                   	push   edx
c00153bd:	52                   	push   edx
c00153be:	68 cb 23 02 c0       	push   0xc00223cb
c00153c3:	53                   	push   ebx
c00153c4:	e8 19 b3 ff ff       	call   c00106e2 <Device::setName(char const*)>
c00153c9:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00153d0:	e8 d3 a3 00 00       	call   c001f7a8 <CPU::readCR0()>
c00153d5:	83 c4 10             	add    esp,0x10
c00153d8:	83 e0 14             	and    eax,0x14
c00153db:	83 f8 04             	cmp    eax,0x4
c00153de:	75 1f                	jne    c00153ff <CPU::detectFeatures()+0x9c7>
c00153e0:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00153e7:	eb 32                	jmp    c001541b <CPU::detectFeatures()+0x9e3>
c00153e9:	50                   	push   eax
c00153ea:	50                   	push   eax
c00153eb:	68 d6 23 02 c0       	push   0xc00223d6
c00153f0:	53                   	push   ebx
c00153f1:	e8 ec b2 ff ff       	call   c00106e2 <Device::setName(char const*)>
c00153f6:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00153fd:	eb d1                	jmp    c00153d0 <CPU::detectFeatures()+0x998>
c00153ff:	e8 08 ae fe ff       	call   c000020c <hasLegacyFPU>
c0015404:	83 e0 01             	and    eax,0x1
c0015407:	8d 14 00             	lea    edx,[eax+eax*1]
c001540a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0015410:	83 e0 fd             	and    eax,0xfffffffd
c0015413:	09 d0                	or     eax,edx
c0015415:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001541b:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0015422:	83 c4 4c             	add    esp,0x4c
c0015425:	5b                   	pop    ebx
c0015426:	5e                   	pop    esi
c0015427:	5f                   	pop    edi
c0015428:	5d                   	pop    ebp
c0015429:	c3                   	ret    

c001542a <CPU::setupSMEP()>:
c001542a:	83 ec 0c             	sub    esp,0xc
c001542d:	e8 40 a6 00 00       	call   c001fa72 <CPU::readCR4()>
c0015432:	0d 00 00 10 00       	or     eax,0x100000
c0015437:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001543b:	83 c4 0c             	add    esp,0xc
c001543e:	e9 4a a6 00 00       	jmp    c001fa8d <CPU::writeCR4(unsigned long)>
c0015443:	90                   	nop

c0015444 <CPU::setupUMIP()>:
c0015444:	83 ec 0c             	sub    esp,0xc
c0015447:	e8 26 a6 00 00       	call   c001fa72 <CPU::readCR4()>
c001544c:	80 cc 08             	or     ah,0x8
c001544f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015453:	83 c4 0c             	add    esp,0xc
c0015456:	e9 32 a6 00 00       	jmp    c001fa8d <CPU::writeCR4(unsigned long)>
c001545b:	90                   	nop

c001545c <CPU::setupTSC()>:
c001545c:	83 ec 0c             	sub    esp,0xc
c001545f:	e8 0e a6 00 00       	call   c001fa72 <CPU::readCR4()>
c0015464:	83 c8 04             	or     eax,0x4
c0015467:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001546b:	83 c4 0c             	add    esp,0xc
c001546e:	e9 1a a6 00 00       	jmp    c001fa8d <CPU::writeCR4(unsigned long)>
c0015473:	90                   	nop

c0015474 <CPU::setupLargePages()>:
c0015474:	83 ec 0c             	sub    esp,0xc
c0015477:	e8 f6 a5 00 00       	call   c001fa72 <CPU::readCR4()>
c001547c:	83 c8 10             	or     eax,0x10
c001547f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015483:	83 c4 0c             	add    esp,0xc
c0015486:	e9 02 a6 00 00       	jmp    c001fa8d <CPU::writeCR4(unsigned long)>
c001548b:	90                   	nop

c001548c <CPU::setupPAT()>:
c001548c:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c0015491:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0015498:	74 2c                	je     c00154c6 <CPU::setupPAT()+0x3a>
c001549a:	53                   	push   ebx
c001549b:	83 ec 10             	sub    esp,0x10
c001549e:	68 77 02 00 00       	push   0x277
c00154a3:	50                   	push   eax
c00154a4:	e8 fb 60 ff ff       	call   c000b5a4 <Computer::rdmsr(unsigned int)>
c00154a9:	83 e2 f8             	and    edx,0xfffffff8
c00154ac:	83 ca 01             	or     edx,0x1
c00154af:	52                   	push   edx
c00154b0:	50                   	push   eax
c00154b1:	68 77 02 00 00       	push   0x277
c00154b6:	ff 35 e8 42 02 c0    	push   DWORD PTR ds:0xc00242e8
c00154bc:	e8 0f 61 ff ff       	call   c000b5d0 <Computer::wrmsr(unsigned int, unsigned long long)>
c00154c1:	83 c4 28             	add    esp,0x28
c00154c4:	5b                   	pop    ebx
c00154c5:	c3                   	ret    
c00154c6:	c3                   	ret    
c00154c7:	90                   	nop

c00154c8 <CPU::setupMTRR()>:
c00154c8:	c3                   	ret    
c00154c9:	90                   	nop

c00154ca <CPU::setupGlobalPages()>:
c00154ca:	83 ec 0c             	sub    esp,0xc
c00154cd:	e8 a0 a5 00 00       	call   c001fa72 <CPU::readCR4()>
c00154d2:	0c 80                	or     al,0x80
c00154d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00154d8:	83 c4 0c             	add    esp,0xc
c00154db:	e9 ad a5 00 00       	jmp    c001fa8d <CPU::writeCR4(unsigned long)>

c00154e0 <CPU::allowUsermodeDataAccess()>:
c00154e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00154e4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00154eb:	74 03                	je     c00154f0 <CPU::allowUsermodeDataAccess()+0x10>
c00154ed:	0f 01 cb             	stac   
c00154f0:	c3                   	ret    
c00154f1:	90                   	nop

c00154f2 <CPU::prohibitUsermodeDataAccess()>:
c00154f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00154f6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00154fd:	74 03                	je     c0015502 <CPU::prohibitUsermodeDataAccess()+0x10>
c00154ff:	0f 01 ca             	clac   
c0015502:	c3                   	ret    
c0015503:	90                   	nop

c0015504 <CPU::setupSMAP()>:
c0015504:	53                   	push   ebx
c0015505:	83 ec 08             	sub    esp,0x8
c0015508:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001550c:	e8 61 a5 00 00       	call   c001fa72 <CPU::readCR4()>
c0015511:	83 ec 0c             	sub    esp,0xc
c0015514:	0d 00 00 20 00       	or     eax,0x200000
c0015519:	50                   	push   eax
c001551a:	e8 6e a5 00 00       	call   c001fa8d <CPU::writeCR4(unsigned long)>
c001551f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0015523:	83 c4 18             	add    esp,0x18
c0015526:	5b                   	pop    ebx
c0015527:	eb c9                	jmp    c00154f2 <CPU::prohibitUsermodeDataAccess()>
c0015529:	90                   	nop

c001552a <CPU::setupFeatures()>:
c001552a:	53                   	push   ebx
c001552b:	83 ec 08             	sub    esp,0x8
c001552e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015532:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0015539:	74 0c                	je     c0015547 <CPU::setupFeatures()+0x1d>
c001553b:	83 ec 0c             	sub    esp,0xc
c001553e:	53                   	push   ebx
c001553f:	e8 e6 fe ff ff       	call   c001542a <CPU::setupSMEP()>
c0015544:	83 c4 10             	add    esp,0x10
c0015547:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001554e:	74 0c                	je     c001555c <CPU::setupFeatures()+0x32>
c0015550:	83 ec 0c             	sub    esp,0xc
c0015553:	53                   	push   ebx
c0015554:	e8 ab ff ff ff       	call   c0015504 <CPU::setupSMAP()>
c0015559:	83 c4 10             	add    esp,0x10
c001555c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0015563:	74 0c                	je     c0015571 <CPU::setupFeatures()+0x47>
c0015565:	83 ec 0c             	sub    esp,0xc
c0015568:	53                   	push   ebx
c0015569:	e8 d6 fe ff ff       	call   c0015444 <CPU::setupUMIP()>
c001556e:	83 c4 10             	add    esp,0x10
c0015571:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0015578:	74 0c                	je     c0015586 <CPU::setupFeatures()+0x5c>
c001557a:	83 ec 0c             	sub    esp,0xc
c001557d:	53                   	push   ebx
c001557e:	e8 d9 fe ff ff       	call   c001545c <CPU::setupTSC()>
c0015583:	83 c4 10             	add    esp,0x10
c0015586:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001558d:	74 0c                	je     c001559b <CPU::setupFeatures()+0x71>
c001558f:	83 ec 0c             	sub    esp,0xc
c0015592:	53                   	push   ebx
c0015593:	e8 dc fe ff ff       	call   c0015474 <CPU::setupLargePages()>
c0015598:	83 c4 10             	add    esp,0x10
c001559b:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00155a2:	74 0c                	je     c00155b0 <CPU::setupFeatures()+0x86>
c00155a4:	83 ec 0c             	sub    esp,0xc
c00155a7:	53                   	push   ebx
c00155a8:	e8 1d ff ff ff       	call   c00154ca <CPU::setupGlobalPages()>
c00155ad:	83 c4 10             	add    esp,0x10
c00155b0:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00155b7:	74 0d                	je     c00155c6 <CPU::setupFeatures()+0x9c>
c00155b9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00155bd:	83 c4 08             	add    esp,0x8
c00155c0:	5b                   	pop    ebx
c00155c1:	e9 c6 fe ff ff       	jmp    c001548c <CPU::setupPAT()>
c00155c6:	83 c4 08             	add    esp,0x8
c00155c9:	5b                   	pop    ebx
c00155ca:	c3                   	ret    
c00155cb:	90                   	nop

c00155cc <CPU::open(int, int, void*)>:
c00155cc:	57                   	push   edi
c00155cd:	56                   	push   esi
c00155ce:	53                   	push   ebx
c00155cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00155d3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00155d7:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00155dd:	83 ec 0c             	sub    esp,0xc
c00155e0:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00155e6:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00155ec:	50                   	push   eax
c00155ed:	e8 9e 62 ff ff       	call   c000b890 <GDT::setup()>
c00155f2:	83 c4 0c             	add    esp,0xc
c00155f5:	6a 00                	push   0x0
c00155f7:	68 ef be ad de       	push   0xdeadbeef
c00155fc:	57                   	push   edi
c00155fd:	e8 f6 84 ff ff       	call   c000daf8 <TSS::setup(unsigned long, unsigned long)>
c0015602:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015605:	e8 ce 84 ff ff       	call   c000dad8 <TSS::flush()>
c001560a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0015610:	89 04 24             	mov    DWORD PTR [esp],eax
c0015613:	e8 d2 64 ff ff       	call   c000baea <IDT::setup()>
c0015618:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c001561f:	e8 60 a4 00 00       	call   c001fa84 <CPU::writeDR7(unsigned long)>
c0015624:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001562e:	e8 7b 6f ff ff       	call   c000c5ae <Phys::allocatePage()>
c0015633:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0015639:	89 30                	mov    DWORD PTR [eax],esi
c001563b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0015641:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0015644:	58                   	pop    eax
c0015645:	5a                   	pop    edx
c0015646:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001564c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015650:	e8 71 94 ff ff       	call   c000eac6 <VAS::setCPUSpecific(unsigned long)>
c0015655:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015658:	e8 db f3 ff ff       	call   c0014a38 <CPU::detectFeatures()>
c001565d:	e8 9a c3 ff ff       	call   c00119fc <setupInterruptController()>
c0015662:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0015668:	a1 00 43 02 c0       	mov    eax,ds:0xc0024300
c001566d:	83 e0 10             	and    eax,0x10
c0015670:	83 f8 01             	cmp    eax,0x1
c0015673:	19 c0                	sbb    eax,eax
c0015675:	83 e0 46             	and    eax,0x46
c0015678:	83 c0 1e             	add    eax,0x1e
c001567b:	89 04 24             	mov    DWORD PTR [esp],eax
c001567e:	e8 0b d7 ff ff       	call   c0012d8e <setupTimer(int)>
c0015683:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0015689:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001568c:	e8 99 fe ff ff       	call   c001552a <CPU::setupFeatures()>
c0015691:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015694:	e8 23 f1 ff ff       	call   c00147bc <CPU::displayFeatures()>
c0015699:	83 c4 10             	add    esp,0x10
c001569c:	31 c0                	xor    eax,eax
c001569e:	5b                   	pop    ebx
c001569f:	5e                   	pop    esi
c00156a0:	5f                   	pop    edi
c00156a1:	c3                   	ret    

c00156a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00156a2:	57                   	push   edi
c00156a3:	56                   	push   esi
c00156a4:	53                   	push   ebx
c00156a5:	51                   	push   ecx
c00156a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00156aa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00156ae:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00156b1:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00156b4:	88 c8                	mov    al,cl
c00156b6:	c0 e8 06             	shr    al,0x6
c00156b9:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00156bd:	89 c8                	mov    eax,ecx
c00156bf:	66 c1 e8 03          	shr    ax,0x3
c00156c3:	83 e0 07             	and    eax,0x7
c00156c6:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00156cb:	88 02                	mov    BYTE PTR [edx],al
c00156cd:	0f 84 99 01 00 00    	je     c001586c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ca>
c00156d3:	83 e1 07             	and    ecx,0x7
c00156d6:	80 f9 04             	cmp    cl,0x4
c00156d9:	0f 84 98 00 00 00    	je     c0015777 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xd5>
c00156df:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00156e4:	0f 95 c0             	setne  al
c00156e7:	80 f9 05             	cmp    cl,0x5
c00156ea:	0f 95 c2             	setne  dl
c00156ed:	08 c2                	or     dl,al
c00156ef:	74 79                	je     c001576a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xc8>
c00156f1:	84 c9                	test   cl,cl
c00156f3:	75 05                	jne    c00156fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x58>
c00156f5:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00156f8:	eb 3c                	jmp    c0015736 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x94>
c00156fa:	80 f9 01             	cmp    cl,0x1
c00156fd:	75 05                	jne    c0015704 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x62>
c00156ff:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015702:	eb 32                	jmp    c0015736 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x94>
c0015704:	80 f9 02             	cmp    cl,0x2
c0015707:	75 05                	jne    c001570e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x6c>
c0015709:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001570c:	eb 28                	jmp    c0015736 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x94>
c001570e:	31 c0                	xor    eax,eax
c0015710:	80 f9 03             	cmp    cl,0x3
c0015713:	75 05                	jne    c001571a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x78>
c0015715:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015718:	eb 1c                	jmp    c0015736 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x94>
c001571a:	80 f9 05             	cmp    cl,0x5
c001571d:	75 05                	jne    c0015724 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c001571f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0015722:	eb 12                	jmp    c0015736 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x94>
c0015724:	80 f9 06             	cmp    cl,0x6
c0015727:	75 05                	jne    c001572e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x8c>
c0015729:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001572c:	eb 08                	jmp    c0015736 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x94>
c001572e:	80 f9 07             	cmp    cl,0x7
c0015731:	75 03                	jne    c0015736 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x94>
c0015733:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015736:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001573b:	75 10                	jne    c001574d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xab>
c001573d:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0015741:	b9 03 00 00 00       	mov    ecx,0x3
c0015746:	01 d0                	add    eax,edx
c0015748:	e9 2a 01 00 00       	jmp    c0015877 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d5>
c001574d:	b9 02 00 00 00       	mov    ecx,0x2
c0015752:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0015757:	0f 85 1a 01 00 00    	jne    c0015877 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d5>
c001575d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0015760:	b9 06 00 00 00       	mov    ecx,0x6
c0015765:	e9 0d 01 00 00       	jmp    c0015877 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d5>
c001576a:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001576d:	b9 06 00 00 00       	mov    ecx,0x6
c0015772:	e9 02 01 00 00       	jmp    c0015879 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d7>
c0015777:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001577a:	88 c8                	mov    al,cl
c001577c:	89 ca                	mov    edx,ecx
c001577e:	c0 e8 06             	shr    al,0x6
c0015781:	66 c1 ea 03          	shr    dx,0x3
c0015785:	88 44 24 02          	mov    BYTE PTR [esp+0x2],al
c0015789:	83 e2 07             	and    edx,0x7
c001578c:	80 e1 07             	and    cl,0x7
c001578f:	75 05                	jne    c0015796 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xf4>
c0015791:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0015794:	eb 3f                	jmp    c00157d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x133>
c0015796:	80 f9 01             	cmp    cl,0x1
c0015799:	75 05                	jne    c00157a0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfe>
c001579b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001579e:	eb 35                	jmp    c00157d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x133>
c00157a0:	80 f9 02             	cmp    cl,0x2
c00157a3:	75 05                	jne    c00157aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x108>
c00157a5:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00157a8:	eb 2b                	jmp    c00157d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x133>
c00157aa:	80 f9 03             	cmp    cl,0x3
c00157ad:	75 05                	jne    c00157b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x112>
c00157af:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00157b2:	eb 21                	jmp    c00157d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x133>
c00157b4:	80 f9 04             	cmp    cl,0x4
c00157b7:	75 05                	jne    c00157be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x11c>
c00157b9:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00157bc:	eb 17                	jmp    c00157d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x133>
c00157be:	80 f9 05             	cmp    cl,0x5
c00157c1:	75 05                	jne    c00157c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x126>
c00157c3:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00157c6:	eb 0d                	jmp    c00157d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x133>
c00157c8:	80 f9 06             	cmp    cl,0x6
c00157cb:	75 05                	jne    c00157d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x130>
c00157cd:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00157d0:	eb 03                	jmp    c00157d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x133>
c00157d2:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00157d5:	84 d2                	test   dl,dl
c00157d7:	75 05                	jne    c00157de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x13c>
c00157d9:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00157dc:	eb 3c                	jmp    c001581a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x178>
c00157de:	80 fa 01             	cmp    dl,0x1
c00157e1:	75 05                	jne    c00157e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00157e3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00157e6:	eb 32                	jmp    c001581a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x178>
c00157e8:	80 fa 02             	cmp    dl,0x2
c00157eb:	75 05                	jne    c00157f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c00157ed:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00157f0:	eb 28                	jmp    c001581a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x178>
c00157f2:	80 fa 03             	cmp    dl,0x3
c00157f5:	75 05                	jne    c00157fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x15a>
c00157f7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00157fa:	eb 1e                	jmp    c001581a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x178>
c00157fc:	31 c0                	xor    eax,eax
c00157fe:	80 fa 04             	cmp    dl,0x4
c0015801:	74 17                	je     c001581a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x178>
c0015803:	80 fa 05             	cmp    dl,0x5
c0015806:	75 05                	jne    c001580d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16b>
c0015808:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001580b:	eb 0d                	jmp    c001581a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x178>
c001580d:	80 fa 06             	cmp    dl,0x6
c0015810:	75 05                	jne    c0015817 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x175>
c0015812:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015815:	eb 03                	jmp    c001581a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x178>
c0015817:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001581a:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001581f:	0f 94 c2             	sete   dl
c0015822:	80 f9 05             	cmp    cl,0x5
c0015825:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0015829:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001582e:	d3 e0                	shl    eax,cl
c0015830:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0015834:	74 0a                	je     c0015840 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x19e>
c0015836:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0015839:	b9 07 00 00 00       	mov    ecx,0x7
c001583e:	eb 37                	jmp    c0015877 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d5>
c0015840:	01 f8                	add    eax,edi
c0015842:	b9 03 00 00 00       	mov    ecx,0x3
c0015847:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001584c:	74 2b                	je     c0015879 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d7>
c001584e:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0015853:	75 0d                	jne    c0015862 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1c0>
c0015855:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0015859:	01 c8                	add    eax,ecx
c001585b:	b9 04 00 00 00       	mov    ecx,0x4
c0015860:	eb 17                	jmp    c0015879 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d7>
c0015862:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0015865:	b9 07 00 00 00       	mov    ecx,0x7
c001586a:	eb 0d                	jmp    c0015879 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d7>
c001586c:	b9 02 00 00 00       	mov    ecx,0x2
c0015871:	b2 01                	mov    dl,0x1
c0015873:	31 c0                	xor    eax,eax
c0015875:	eb 02                	jmp    c0015879 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d7>
c0015877:	31 d2                	xor    edx,edx
c0015879:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001587d:	89 0b                	mov    DWORD PTR [ebx],ecx
c001587f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015883:	88 11                	mov    BYTE PTR [ecx],dl
c0015885:	5a                   	pop    edx
c0015886:	5b                   	pop    ebx
c0015887:	5e                   	pop    esi
c0015888:	5f                   	pop    edi
c0015889:	c3                   	ret    

c001588a <Krnl::panic(char const*)>:
c001588a:	55                   	push   ebp
c001588b:	89 e5                	mov    ebp,esp
c001588d:	53                   	push   ebx
c001588e:	50                   	push   eax
c001588f:	a1 30 4d 02 c0       	mov    eax,ds:0xc0024d30
c0015894:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0015897:	85 c0                	test   eax,eax
c0015899:	74 02                	je     c001589d <Krnl::panic(char const*)+0x13>
c001589b:	ff d0                	call   eax
c001589d:	fa                   	cli    
c001589e:	c6 05 34 4d 02 c0 01 	mov    BYTE PTR ds:0xc0024d34,0x1
c00158a5:	83 ec 08             	sub    esp,0x8
c00158a8:	c6 05 20 37 02 c0 00 	mov    BYTE PTR ds:0xc0023720,0x0
c00158af:	53                   	push   ebx
c00158b0:	68 10 24 02 c0       	push   0xc0022410
c00158b5:	e8 3b 98 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c00158ba:	58                   	pop    eax
c00158bb:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c00158c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00158c6:	e8 6e 7a ff ff       	call   c000d339 <setActiveTerminal(VgaText*)>
c00158cb:	83 c4 0c             	add    esp,0xc
c00158ce:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c00158d3:	6a 01                	push   0x1
c00158d5:	6a 0f                	push   0xf
c00158d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00158dd:	e8 96 74 ff ff       	call   c000cd78 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00158e2:	5a                   	pop    edx
c00158e3:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c00158e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00158ee:	e8 e7 7c ff ff       	call   c000d5da <VgaText::clearScreen()>
c00158f3:	59                   	pop    ecx
c00158f4:	58                   	pop    eax
c00158f5:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c00158fa:	68 29 24 02 c0       	push   0xc0022429
c00158ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015905:	e8 4e 7e ff ff       	call   c000d758 <VgaText::puts(char const*)>
c001590a:	58                   	pop    eax
c001590b:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0015910:	5a                   	pop    edx
c0015911:	68 d0 24 02 c0       	push   0xc00224d0
c0015916:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001591c:	e8 37 7e ff ff       	call   c000d758 <VgaText::puts(char const*)>
c0015921:	59                   	pop    ecx
c0015922:	58                   	pop    eax
c0015923:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0015928:	68 45 24 02 c0       	push   0xc0022445
c001592d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015933:	e8 20 7e ff ff       	call   c000d758 <VgaText::puts(char const*)>
c0015938:	58                   	pop    eax
c0015939:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c001593e:	5a                   	pop    edx
c001593f:	53                   	push   ebx
c0015940:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015946:	e8 0d 7e ff ff       	call   c000d758 <VgaText::puts(char const*)>
c001594b:	59                   	pop    ecx
c001594c:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0015951:	5b                   	pop    ebx
c0015952:	68 65 24 02 c0       	push   0xc0022465
c0015957:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001595d:	e8 f6 7d ff ff       	call   c000d758 <VgaText::puts(char const*)>
c0015962:	58                   	pop    eax
c0015963:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0015968:	5a                   	pop    edx
c0015969:	68 0c 25 02 c0       	push   0xc002250c
c001596e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015974:	e8 df 7d ff ff       	call   c000d758 <VgaText::puts(char const*)>
c0015979:	59                   	pop    ecx
c001597a:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c001597f:	5b                   	pop    ebx
c0015980:	68 45 24 02 c0       	push   0xc0022445
c0015985:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001598b:	e8 c8 7d ff ff       	call   c000d758 <VgaText::puts(char const*)>
c0015990:	58                   	pop    eax
c0015991:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015996:	5a                   	pop    edx
c0015997:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001599a:	83 c0 0c             	add    eax,0xc
c001599d:	50                   	push   eax
c001599e:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c00159a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00159a9:	e8 aa 7d ff ff       	call   c000d758 <VgaText::puts(char const*)>
c00159ae:	59                   	pop    ecx
c00159af:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c00159b4:	5b                   	pop    ebx
c00159b5:	68 64 24 02 c0       	push   0xc0022464
c00159ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00159c0:	e8 93 7d ff ff       	call   c000d758 <VgaText::puts(char const*)>
c00159c5:	58                   	pop    eax
c00159c6:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c00159cb:	5a                   	pop    edx
c00159cc:	68 38 25 02 c0       	push   0xc0022538
c00159d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00159d7:	e8 7c 7d ff ff       	call   c000d758 <VgaText::puts(char const*)>
c00159dc:	59                   	pop    ecx
c00159dd:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c00159e2:	5b                   	pop    ebx
c00159e3:	68 78 25 02 c0       	push   0xc0022578
c00159e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00159ee:	e8 65 7d ff ff       	call   c000d758 <VgaText::puts(char const*)>
c00159f3:	58                   	pop    eax
c00159f4:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c00159f9:	5a                   	pop    edx
c00159fa:	68 50 24 02 c0       	push   0xc0022450
c00159ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015a05:	e8 4e 7d ff ff       	call   c000d758 <VgaText::puts(char const*)>
c0015a0a:	59                   	pop    ecx
c0015a0b:	5b                   	pop    ebx
c0015a0c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0015a0f:	68 68 24 02 c0       	push   0xc0022468
c0015a14:	e8 dc 96 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0015a19:	58                   	pop    eax
c0015a1a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015a1d:	5a                   	pop    edx
c0015a1e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0015a21:	68 71 24 02 c0       	push   0xc0022471
c0015a26:	e8 ca 96 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0015a2b:	59                   	pop    ecx
c0015a2c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015a2f:	5b                   	pop    ebx
c0015a30:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a32:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0015a35:	68 7a 24 02 c0       	push   0xc002247a
c0015a3a:	e8 b6 96 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0015a3f:	58                   	pop    eax
c0015a40:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0015a45:	5a                   	pop    edx
c0015a46:	68 bc 25 02 c0       	push   0xc00225bc
c0015a4b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015a51:	e8 02 7d ff ff       	call   c000d758 <VgaText::puts(char const*)>
c0015a56:	59                   	pop    ecx
c0015a57:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0015a5c:	5b                   	pop    ebx
c0015a5d:	68 83 24 02 c0       	push   0xc0022483
c0015a62:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015a68:	e8 eb 7c ff ff       	call   c000d758 <VgaText::puts(char const*)>
c0015a6d:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0015a72:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015a78:	e8 2b 9d 00 00       	call   c001f7a8 <CPU::readCR0()>
c0015a7d:	5a                   	pop    edx
c0015a7e:	59                   	pop    ecx
c0015a7f:	50                   	push   eax
c0015a80:	53                   	push   ebx
c0015a81:	e8 f8 7c ff ff       	call   c000d77e <VgaText::putx(unsigned int)>
c0015a86:	5b                   	pop    ebx
c0015a87:	58                   	pop    eax
c0015a88:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0015a8d:	68 8d 24 02 c0       	push   0xc002248d
c0015a92:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015a98:	e8 bb 7c ff ff       	call   c000d758 <VgaText::puts(char const*)>
c0015a9d:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0015aa2:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015aa8:	e8 e9 9f 00 00       	call   c001fa96 <CPU::readCR2()>
c0015aad:	5a                   	pop    edx
c0015aae:	59                   	pop    ecx
c0015aaf:	50                   	push   eax
c0015ab0:	53                   	push   ebx
c0015ab1:	e8 c8 7c ff ff       	call   c000d77e <VgaText::putx(unsigned int)>
c0015ab6:	5b                   	pop    ebx
c0015ab7:	58                   	pop    eax
c0015ab8:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0015abd:	68 97 24 02 c0       	push   0xc0022497
c0015ac2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015ac8:	e8 8b 7c ff ff       	call   c000d758 <VgaText::puts(char const*)>
c0015acd:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0015ad2:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015ad8:	e8 58 99 00 00       	call   c001f435 <CPU::readCR3()>
c0015add:	5a                   	pop    edx
c0015ade:	59                   	pop    ecx
c0015adf:	50                   	push   eax
c0015ae0:	53                   	push   ebx
c0015ae1:	e8 98 7c ff ff       	call   c000d77e <VgaText::putx(unsigned int)>
c0015ae6:	5b                   	pop    ebx
c0015ae7:	58                   	pop    eax
c0015ae8:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0015aed:	68 aa 24 02 c0       	push   0xc00224aa
c0015af2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015af8:	e8 5b 7c ff ff       	call   c000d758 <VgaText::puts(char const*)>
c0015afd:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0015b02:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015b08:	e8 65 9f 00 00       	call   c001fa72 <CPU::readCR4()>
c0015b0d:	5a                   	pop    edx
c0015b0e:	59                   	pop    ecx
c0015b0f:	50                   	push   eax
c0015b10:	53                   	push   ebx
c0015b11:	e8 68 7c ff ff       	call   c000d77e <VgaText::putx(unsigned int)>
c0015b16:	5b                   	pop    ebx
c0015b17:	58                   	pop    eax
c0015b18:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0015b1d:	68 b4 24 02 c0       	push   0xc00224b4
c0015b22:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015b28:	e8 2b 7c ff ff       	call   c000d758 <VgaText::puts(char const*)>
c0015b2d:	5a                   	pop    edx
c0015b2e:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0015b33:	59                   	pop    ecx
c0015b34:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b3a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0015b3d:	50                   	push   eax
c0015b3e:	e8 3b 7c ff ff       	call   c000d77e <VgaText::putx(unsigned int)>
c0015b43:	5b                   	pop    ebx
c0015b44:	58                   	pop    eax
c0015b45:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0015b4a:	68 cb 24 02 c0       	push   0xc00224cb
c0015b4f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015b55:	e8 fe 7b ff ff       	call   c000d758 <VgaText::puts(char const*)>
c0015b5a:	5a                   	pop    edx
c0015b5b:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0015b60:	59                   	pop    ecx
c0015b61:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b67:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015b6a:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0015b6d:	50                   	push   eax
c0015b6e:	e8 0b 7c ff ff       	call   c000d77e <VgaText::putx(unsigned int)>
c0015b73:	5b                   	pop    ebx
c0015b74:	58                   	pop    eax
c0015b75:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0015b7a:	68 cb 24 02 c0       	push   0xc00224cb
c0015b7f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015b85:	e8 ce 7b ff ff       	call   c000d758 <VgaText::puts(char const*)>
c0015b8a:	59                   	pop    ecx
c0015b8b:	a1 34 57 02 c0       	mov    eax,ds:0xc0025734
c0015b90:	5b                   	pop    ebx
c0015b91:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b97:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015b9a:	8b 12                	mov    edx,DWORD PTR [edx]
c0015b9c:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0015b9f:	50                   	push   eax
c0015ba0:	e8 d9 7b ff ff       	call   c000d77e <VgaText::putx(unsigned int)>
c0015ba5:	83 c4 10             	add    esp,0x10
c0015ba8:	b2 fe                	mov    dl,0xfe
c0015baa:	e4 60                	in     al,0x60
c0015bac:	3c 1c                	cmp    al,0x1c
c0015bae:	74 04                	je     c0015bb4 <Krnl::panic(char const*)+0x32a>
c0015bb0:	3c 5a                	cmp    al,0x5a
c0015bb2:	75 f6                	jne    c0015baa <Krnl::panic(char const*)+0x320>
c0015bb4:	e4 64                	in     al,0x64
c0015bb6:	a8 02                	test   al,0x2
c0015bb8:	75 fa                	jne    c0015bb4 <Krnl::panic(char const*)+0x32a>
c0015bba:	88 d0                	mov    al,dl
c0015bbc:	e6 64                	out    0x64,al
c0015bbe:	fa                   	cli    
c0015bbf:	f4                   	hlt    
c0015bc0:	eb e8                	jmp    c0015baa <Krnl::panic(char const*)+0x320>

c0015bc2 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015bc2:	55                   	push   ebp
c0015bc3:	57                   	push   edi
c0015bc4:	56                   	push   esi
c0015bc5:	53                   	push   ebx
c0015bc6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015bcc:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015bd3:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015bd5:	8d 6e 01             	lea    ebp,[esi+0x1]
c0015bd8:	80 fb 40             	cmp    bl,0x40
c0015bdb:	75 1b                	jne    c0015bf8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0015bdd:	8a 16                	mov    dl,BYTE PTR [esi]
c0015bdf:	84 d2                	test   dl,dl
c0015be1:	0f 84 f1 00 00 00    	je     c0015cd8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015be7:	8d 46 01             	lea    eax,[esi+0x1]
c0015bea:	80 fa 3a             	cmp    dl,0x3a
c0015bed:	74 04                	je     c0015bf3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0015bef:	89 c6                	mov    esi,eax
c0015bf1:	eb ea                	jmp    c0015bdd <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0015bf3:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015bf6:	89 c6                	mov    esi,eax
c0015bf8:	50                   	push   eax
c0015bf9:	6a 40                	push   0x40
c0015bfb:	6a 00                	push   0x0
c0015bfd:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015c01:	50                   	push   eax
c0015c02:	e8 b3 aa fe ff       	call   c00006ba <memset>
c0015c07:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015c0e:	31 c0                	xor    eax,eax
c0015c10:	83 c4 10             	add    esp,0x10
c0015c13:	8a 0f                	mov    cl,BYTE PTR [edi]
c0015c15:	84 c9                	test   cl,cl
c0015c17:	0f 84 bb 00 00 00    	je     c0015cd8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015c1d:	3d c7 00 00 00       	cmp    eax,0xc7
c0015c22:	0f 8f b0 00 00 00    	jg     c0015cd8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015c28:	80 f9 0a             	cmp    cl,0xa
c0015c2b:	0f 85 98 00 00 00    	jne    c0015cc9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0015c31:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0015c36:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0015c3a:	a8 df                	test   al,0xdf
c0015c3c:	0f 94 c1             	sete   cl
c0015c3f:	3c 23                	cmp    al,0x23
c0015c41:	0f 94 c2             	sete   dl
c0015c44:	08 d1                	or     cl,dl
c0015c46:	75 4a                	jne    c0015c92 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015c48:	8d 50 f7             	lea    edx,[eax-0x9]
c0015c4b:	80 fa 01             	cmp    dl,0x1
c0015c4e:	76 42                	jbe    c0015c92 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015c50:	3c 5b                	cmp    al,0x5b
c0015c52:	75 42                	jne    c0015c96 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0015c54:	80 fb 40             	cmp    bl,0x40
c0015c57:	75 39                	jne    c0015c92 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015c59:	83 ec 0c             	sub    esp,0xc
c0015c5c:	8d 54 24 65          	lea    edx,[esp+0x65]
c0015c60:	52                   	push   edx
c0015c61:	e8 71 aa fe ff       	call   c00006d7 <strlen>
c0015c66:	83 c4 10             	add    esp,0x10
c0015c69:	83 f8 3f             	cmp    eax,0x3f
c0015c6c:	77 6a                	ja     c0015cd8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015c6e:	50                   	push   eax
c0015c6f:	50                   	push   eax
c0015c70:	8d 54 24 61          	lea    edx,[esp+0x61]
c0015c74:	52                   	push   edx
c0015c75:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015c79:	52                   	push   edx
c0015c7a:	e8 da aa fe ff       	call   c0000759 <strcpy>
c0015c7f:	58                   	pop    eax
c0015c80:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015c84:	52                   	push   edx
c0015c85:	e8 4d aa fe ff       	call   c00006d7 <strlen>
c0015c8a:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015c8f:	83 c4 10             	add    esp,0x10
c0015c92:	31 d2                	xor    edx,edx
c0015c94:	eb 3a                	jmp    c0015cd0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015c96:	80 fb 40             	cmp    bl,0x40
c0015c99:	74 06                	je     c0015ca1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0015c9b:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015c9f:	eb 20                	jmp    c0015cc1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0015ca1:	50                   	push   eax
c0015ca2:	50                   	push   eax
c0015ca3:	55                   	push   ebp
c0015ca4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015ca8:	50                   	push   eax
c0015ca9:	e8 fc aa fe ff       	call   c00007aa <strcmp>
c0015cae:	83 c4 10             	add    esp,0x10
c0015cb1:	85 c0                	test   eax,eax
c0015cb3:	75 dd                	jne    c0015c92 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015cb5:	eb e4                	jmp    c0015c9b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0015cb7:	8d 50 01             	lea    edx,[eax+0x1]
c0015cba:	80 f9 3d             	cmp    cl,0x3d
c0015cbd:	74 1d                	je     c0015cdc <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015cbf:	89 d0                	mov    eax,edx
c0015cc1:	8a 08                	mov    cl,BYTE PTR [eax]
c0015cc3:	84 c9                	test   cl,cl
c0015cc5:	75 f0                	jne    c0015cb7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0015cc7:	eb 0f                	jmp    c0015cd8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015cc9:	8d 50 01             	lea    edx,[eax+0x1]
c0015ccc:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0015cd0:	47                   	inc    edi
c0015cd1:	89 d0                	mov    eax,edx
c0015cd3:	e9 3b ff ff ff       	jmp    c0015c13 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0015cd8:	31 c0                	xor    eax,eax
c0015cda:	eb 33                	jmp    c0015d0f <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0015cdc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015ce0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015ce3:	50                   	push   eax
c0015ce4:	50                   	push   eax
c0015ce5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015ce9:	50                   	push   eax
c0015cea:	56                   	push   esi
c0015ceb:	e8 ba aa fe ff       	call   c00007aa <strcmp>
c0015cf0:	83 c4 10             	add    esp,0x10
c0015cf3:	85 c0                	test   eax,eax
c0015cf5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015cf9:	75 97                	jne    c0015c92 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015cfb:	51                   	push   ecx
c0015cfc:	51                   	push   ecx
c0015cfd:	52                   	push   edx
c0015cfe:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015d05:	e8 4f aa fe ff       	call   c0000759 <strcpy>
c0015d0a:	83 c4 10             	add    esp,0x10
c0015d0d:	b0 01                	mov    al,0x1
c0015d0f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015d15:	5b                   	pop    ebx
c0015d16:	5e                   	pop    esi
c0015d17:	5f                   	pop    edi
c0015d18:	5d                   	pop    ebp
c0015d19:	c3                   	ret    

c0015d1a <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015d1a:	57                   	push   edi
c0015d1b:	56                   	push   esi
c0015d1c:	53                   	push   ebx
c0015d1d:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0015d23:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0015d2a:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0015d31:	53                   	push   ebx
c0015d32:	e8 a0 a9 fe ff       	call   c00006d7 <strlen>
c0015d37:	89 34 24             	mov    DWORD PTR [esp],esi
c0015d3a:	89 c7                	mov    edi,eax
c0015d3c:	e8 96 a9 fe ff       	call   c00006d7 <strlen>
c0015d41:	83 c4 10             	add    esp,0x10
c0015d44:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015d48:	31 ff                	xor    edi,edi
c0015d4a:	3d ff 00 00 00       	cmp    eax,0xff
c0015d4f:	0f 87 18 01 00 00    	ja     c0015e6d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015d55:	51                   	push   ecx
c0015d56:	51                   	push   ecx
c0015d57:	56                   	push   esi
c0015d58:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0015d5c:	56                   	push   esi
c0015d5d:	e8 f7 a9 fe ff       	call   c0000759 <strcpy>
c0015d62:	58                   	pop    eax
c0015d63:	5a                   	pop    edx
c0015d64:	68 b4 29 02 c0       	push   0xc00229b4
c0015d69:	56                   	push   esi
c0015d6a:	e8 a1 aa fe ff       	call   c0000810 <strcat>
c0015d6f:	59                   	pop    ecx
c0015d70:	58                   	pop    eax
c0015d71:	53                   	push   ebx
c0015d72:	56                   	push   esi
c0015d73:	e8 98 aa fe ff       	call   c0000810 <strcat>
c0015d78:	58                   	pop    eax
c0015d79:	5a                   	pop    edx
c0015d7a:	68 e2 25 02 c0       	push   0xc00225e2
c0015d7f:	56                   	push   esi
c0015d80:	e8 8b aa fe ff       	call   c0000810 <strcat>
c0015d85:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015d8c:	e8 75 92 ff ff       	call   c000f006 <operator new(unsigned long)>
c0015d91:	83 c4 0c             	add    esp,0xc
c0015d94:	89 c3                	mov    ebx,eax
c0015d96:	ff 35 34 57 02 c0    	push   DWORD PTR ds:0xc0025734
c0015d9c:	56                   	push   esi
c0015d9d:	50                   	push   eax
c0015d9e:	e8 81 98 ff ff       	call   c000f624 <File::File(char const*, Process*)>
c0015da3:	59                   	pop    ecx
c0015da4:	5e                   	pop    esi
c0015da5:	6a 01                	push   0x1
c0015da7:	53                   	push   ebx
c0015da8:	e8 db 98 ff ff       	call   c000f688 <File::open(FileOpenMode)>
c0015dad:	83 c4 10             	add    esp,0x10
c0015db0:	85 c0                	test   eax,eax
c0015db2:	74 08                	je     c0015dbc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0015db4:	83 ec 0c             	sub    esp,0xc
c0015db7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015db9:	53                   	push   ebx
c0015dba:	eb 2e                	jmp    c0015dea <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0015dbc:	52                   	push   edx
c0015dbd:	8d 44 24 07          	lea    eax,[esp+0x7]
c0015dc1:	50                   	push   eax
c0015dc2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015dc6:	50                   	push   eax
c0015dc7:	53                   	push   ebx
c0015dc8:	e8 67 9b ff ff       	call   c000f934 <File::stat(unsigned long long*, bool*)>
c0015dcd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015dd1:	83 c4 10             	add    esp,0x10
c0015dd4:	89 c1                	mov    ecx,eax
c0015dd6:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0015dda:	75 13                	jne    c0015def <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0015ddc:	83 ec 0c             	sub    esp,0xc
c0015ddf:	53                   	push   ebx
c0015de0:	e8 01 99 ff ff       	call   c000f6e6 <File::close()>
c0015de5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015de7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015dea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ded:	eb 7b                	jmp    c0015e6a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0015def:	83 ec 0c             	sub    esp,0xc
c0015df2:	50                   	push   eax
c0015df3:	e8 0c 62 ff ff       	call   c000c004 <malloc>
c0015df8:	89 c6                	mov    esi,eax
c0015dfa:	58                   	pop    eax
c0015dfb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015dfd:	8d 54 24 10          	lea    edx,[esp+0x10]
c0015e01:	52                   	push   edx
c0015e02:	56                   	push   esi
c0015e03:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015e07:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015e0b:	53                   	push   ebx
c0015e0c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015e0f:	83 c4 20             	add    esp,0x20
c0015e12:	85 c0                	test   eax,eax
c0015e14:	75 0a                	jne    c0015e20 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015e16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e1a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0015e1e:	74 18                	je     c0015e38 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0015e20:	83 ec 0c             	sub    esp,0xc
c0015e23:	31 ff                	xor    edi,edi
c0015e25:	53                   	push   ebx
c0015e26:	e8 bb 98 ff ff       	call   c000f6e6 <File::close()>
c0015e2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e2d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e30:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015e33:	83 c4 10             	add    esp,0x10
c0015e36:	eb 35                	jmp    c0015e6d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015e38:	83 ec 0c             	sub    esp,0xc
c0015e3b:	53                   	push   ebx
c0015e3c:	e8 a5 98 ff ff       	call   c000f6e6 <File::close()>
c0015e41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e43:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015e49:	83 c4 0c             	add    esp,0xc
c0015e4c:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015e53:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015e5a:	56                   	push   esi
c0015e5b:	e8 62 fd ff ff       	call   c0015bc2 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0015e63:	89 c7                	mov    edi,eax
c0015e65:	e8 aa 61 ff ff       	call   c000c014 <free>
c0015e6a:	83 c4 10             	add    esp,0x10
c0015e6d:	81 c4 10 01 00 00    	add    esp,0x110
c0015e73:	89 f8                	mov    eax,edi
c0015e75:	5b                   	pop    ebx
c0015e76:	5e                   	pop    esi
c0015e77:	5f                   	pop    edi
c0015e78:	c3                   	ret    

c0015e79 <Reg::getLine(char*, char*, char*)>:
c0015e79:	57                   	push   edi
c0015e7a:	56                   	push   esi
c0015e7b:	53                   	push   ebx
c0015e7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e80:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015e84:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015e88:	57                   	push   edi
c0015e89:	56                   	push   esi
c0015e8a:	53                   	push   ebx
c0015e8b:	68 e7 25 02 c0       	push   0xc00225e7
c0015e90:	e8 85 fe ff ff       	call   c0015d1a <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015e95:	83 c4 10             	add    esp,0x10
c0015e98:	84 c0                	test   al,al
c0015e9a:	75 10                	jne    c0015eac <Reg::getLine(char*, char*, char*)+0x33>
c0015e9c:	57                   	push   edi
c0015e9d:	56                   	push   esi
c0015e9e:	53                   	push   ebx
c0015e9f:	68 0c 26 02 c0       	push   0xc002260c
c0015ea4:	e8 71 fe ff ff       	call   c0015d1a <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015ea9:	83 c4 10             	add    esp,0x10
c0015eac:	5b                   	pop    ebx
c0015ead:	5e                   	pop    esi
c0015eae:	5f                   	pop    edi
c0015eaf:	c3                   	ret    

c0015eb0 <Reg::readInt(char*, char*, int*)>:
c0015eb0:	55                   	push   ebp
c0015eb1:	57                   	push   edi
c0015eb2:	56                   	push   esi
c0015eb3:	53                   	push   ebx
c0015eb4:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015eba:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015ebe:	57                   	push   edi
c0015ebf:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015ec6:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015ecd:	e8 a7 ff ff ff       	call   c0015e79 <Reg::getLine(char*, char*, char*)>
c0015ed2:	83 c4 10             	add    esp,0x10
c0015ed5:	84 c0                	test   al,al
c0015ed7:	0f 84 b3 00 00 00    	je     c0015f90 <Reg::readInt(char*, char*, int*)+0xe0>
c0015edd:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015ee1:	80 fa 2b             	cmp    dl,0x2b
c0015ee4:	74 0c                	je     c0015ef2 <Reg::readInt(char*, char*, int*)+0x42>
c0015ee6:	80 fa 2d             	cmp    dl,0x2d
c0015ee9:	75 0e                	jne    c0015ef9 <Reg::readInt(char*, char*, int*)+0x49>
c0015eeb:	ba 01 00 00 00       	mov    edx,0x1
c0015ef0:	eb 0b                	jmp    c0015efd <Reg::readInt(char*, char*, int*)+0x4d>
c0015ef2:	ba 01 00 00 00       	mov    edx,0x1
c0015ef7:	eb 02                	jmp    c0015efb <Reg::readInt(char*, char*, int*)+0x4b>
c0015ef9:	31 d2                	xor    edx,edx
c0015efb:	31 c0                	xor    eax,eax
c0015efd:	be 0a 00 00 00       	mov    esi,0xa
c0015f02:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015f07:	75 20                	jne    c0015f29 <Reg::readInt(char*, char*, int*)+0x79>
c0015f09:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015f0d:	80 f9 78             	cmp    cl,0x78
c0015f10:	75 0a                	jne    c0015f1c <Reg::readInt(char*, char*, int*)+0x6c>
c0015f12:	83 c2 02             	add    edx,0x2
c0015f15:	be 10 00 00 00       	mov    esi,0x10
c0015f1a:	eb 0d                	jmp    c0015f29 <Reg::readInt(char*, char*, int*)+0x79>
c0015f1c:	80 f9 62             	cmp    cl,0x62
c0015f1f:	75 08                	jne    c0015f29 <Reg::readInt(char*, char*, int*)+0x79>
c0015f21:	83 c2 02             	add    edx,0x2
c0015f24:	be 02 00 00 00       	mov    esi,0x2
c0015f29:	01 d7                	add    edi,edx
c0015f2b:	31 d2                	xor    edx,edx
c0015f2d:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015f2f:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015f33:	80 fb 0d             	cmp    bl,0xd
c0015f36:	0f 94 c3             	sete   bl
c0015f39:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015f3e:	0f 94 c1             	sete   cl
c0015f41:	08 cb                	or     bl,cl
c0015f43:	75 3a                	jne    c0015f7f <Reg::readInt(char*, char*, int*)+0xcf>
c0015f45:	0f af d6             	imul   edx,esi
c0015f48:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015f4d:	83 fe 10             	cmp    esi,0x10
c0015f50:	75 26                	jne    c0015f78 <Reg::readInt(char*, char*, int*)+0xc8>
c0015f52:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015f56:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015f59:	89 e9                	mov    ecx,ebp
c0015f5b:	80 f9 05             	cmp    cl,0x5
c0015f5e:	77 06                	ja     c0015f66 <Reg::readInt(char*, char*, int*)+0xb6>
c0015f60:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015f64:	eb 16                	jmp    c0015f7c <Reg::readInt(char*, char*, int*)+0xcc>
c0015f66:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015f6a:	83 e9 61             	sub    ecx,0x61
c0015f6d:	80 f9 05             	cmp    cl,0x5
c0015f70:	77 06                	ja     c0015f78 <Reg::readInt(char*, char*, int*)+0xc8>
c0015f72:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0015f76:	eb 04                	jmp    c0015f7c <Reg::readInt(char*, char*, int*)+0xcc>
c0015f78:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015f7c:	47                   	inc    edi
c0015f7d:	eb ae                	jmp    c0015f2d <Reg::readInt(char*, char*, int*)+0x7d>
c0015f7f:	84 c0                	test   al,al
c0015f81:	74 02                	je     c0015f85 <Reg::readInt(char*, char*, int*)+0xd5>
c0015f83:	f7 da                	neg    edx
c0015f85:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015f8c:	89 10                	mov    DWORD PTR [eax],edx
c0015f8e:	88 d8                	mov    al,bl
c0015f90:	81 c4 ec 00 00 00    	add    esp,0xec
c0015f96:	5b                   	pop    ebx
c0015f97:	5e                   	pop    esi
c0015f98:	5f                   	pop    edi
c0015f99:	5d                   	pop    ebp
c0015f9a:	c3                   	ret    

c0015f9b <Reg::readString(char*, char*, char*, int)>:
c0015f9b:	57                   	push   edi
c0015f9c:	56                   	push   esi
c0015f9d:	53                   	push   ebx
c0015f9e:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015fa4:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015fab:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0015faf:	57                   	push   edi
c0015fb0:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015fb7:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015fbe:	e8 b6 fe ff ff       	call   c0015e79 <Reg::getLine(char*, char*, char*)>
c0015fc3:	83 c4 10             	add    esp,0x10
c0015fc6:	89 c6                	mov    esi,eax
c0015fc8:	84 c0                	test   al,al
c0015fca:	74 44                	je     c0016010 <Reg::readString(char*, char*, char*, int)+0x75>
c0015fcc:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0015fd3:	31 c0                	xor    eax,eax
c0015fd5:	4a                   	dec    edx
c0015fd6:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015fd9:	84 c9                	test   cl,cl
c0015fdb:	74 0f                	je     c0015fec <Reg::readString(char*, char*, char*, int)+0x51>
c0015fdd:	39 c2                	cmp    edx,eax
c0015fdf:	7e 0b                	jle    c0015fec <Reg::readString(char*, char*, char*, int)+0x51>
c0015fe1:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015fe4:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015fe9:	40                   	inc    eax
c0015fea:	eb ea                	jmp    c0015fd6 <Reg::readString(char*, char*, char*, int)+0x3b>
c0015fec:	83 ec 0c             	sub    esp,0xc
c0015fef:	53                   	push   ebx
c0015ff0:	e8 e2 a6 fe ff       	call   c00006d7 <strlen>
c0015ff5:	83 c4 10             	add    esp,0x10
c0015ff8:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0015ffd:	75 11                	jne    c0016010 <Reg::readString(char*, char*, char*, int)+0x75>
c0015fff:	83 ec 0c             	sub    esp,0xc
c0016002:	53                   	push   ebx
c0016003:	e8 cf a6 fe ff       	call   c00006d7 <strlen>
c0016008:	83 c4 10             	add    esp,0x10
c001600b:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0016010:	81 c4 d0 00 00 00    	add    esp,0xd0
c0016016:	89 f0                	mov    eax,esi
c0016018:	5b                   	pop    ebx
c0016019:	5e                   	pop    esi
c001601a:	5f                   	pop    edi
c001601b:	c3                   	ret    

c001601c <Reg::readBool(char*, char*, bool*)>:
c001601c:	83 ec 20             	sub    esp,0x20
c001601f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016023:	50                   	push   eax
c0016024:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016028:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001602c:	e8 7f fe ff ff       	call   c0015eb0 <Reg::readInt(char*, char*, int*)>
c0016031:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0016036:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001603a:	0f 95 02             	setne  BYTE PTR [edx]
c001603d:	83 c4 2c             	add    esp,0x2c
c0016040:	c3                   	ret    

c0016041 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0016041:	53                   	push   ebx
c0016042:	83 ec 1c             	sub    esp,0x1c
c0016045:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0016049:	8d 44 24 13          	lea    eax,[esp+0x13]
c001604d:	50                   	push   eax
c001604e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016052:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016056:	e8 c1 ff ff ff       	call   c001601c <Reg::readBool(char*, char*, bool*)>
c001605b:	83 c4 10             	add    esp,0x10
c001605e:	84 c0                	test   al,al
c0016060:	74 04                	je     c0016066 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0016062:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0016066:	88 d8                	mov    al,bl
c0016068:	83 c4 18             	add    esp,0x18
c001606b:	5b                   	pop    ebx
c001606c:	c3                   	ret    

c001606d <Reg::readIntWithDefault(char*, char*, int)>:
c001606d:	53                   	push   ebx
c001606e:	83 ec 1c             	sub    esp,0x1c
c0016071:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016075:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016079:	50                   	push   eax
c001607a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001607e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016082:	e8 29 fe ff ff       	call   c0015eb0 <Reg::readInt(char*, char*, int*)>
c0016087:	83 c4 10             	add    esp,0x10
c001608a:	84 c0                	test   al,al
c001608c:	74 04                	je     c0016092 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001608e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0016092:	89 d8                	mov    eax,ebx
c0016094:	83 c4 18             	add    esp,0x18
c0016097:	5b                   	pop    ebx
c0016098:	c3                   	ret    

c0016099 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0016099:	56                   	push   esi
c001609a:	53                   	push   ebx
c001609b:	51                   	push   ecx
c001609c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00160a0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00160a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160a8:	56                   	push   esi
c00160a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160b1:	e8 e5 fe ff ff       	call   c0015f9b <Reg::readString(char*, char*, char*, int)>
c00160b6:	83 c4 10             	add    esp,0x10
c00160b9:	84 c0                	test   al,al
c00160bb:	74 02                	je     c00160bf <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c00160bd:	89 f3                	mov    ebx,esi
c00160bf:	89 d8                	mov    eax,ebx
c00160c1:	5a                   	pop    edx
c00160c2:	5b                   	pop    ebx
c00160c3:	5e                   	pop    esi
c00160c4:	c3                   	ret    

c00160c5 <Sys::exit(regs*)>:
c00160c5:	83 ec 18             	sub    esp,0x18
c00160c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00160cc:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00160cf:	e8 20 31 00 00       	call   c00191f4 <terminateTask(int)>
c00160d4:	83 c8 ff             	or     eax,0xffffffff
c00160d7:	83 c4 1c             	add    esp,0x1c
c00160da:	89 c2                	mov    edx,eax
c00160dc:	c3                   	ret    

c00160dd <Sys::loadDLL(regs*)>:
c00160dd:	56                   	push   esi
c00160de:	53                   	push   ebx
c00160df:	31 d2                	xor    edx,edx
c00160e1:	51                   	push   ecx
c00160e2:	b8 01 00 00 00       	mov    eax,0x1
c00160e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00160eb:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00160ef:	74 7d                	je     c001616e <Sys::loadDLL(regs*)+0x91>
c00160f1:	83 ec 0c             	sub    esp,0xc
c00160f4:	68 14 01 00 00       	push   0x114
c00160f9:	e8 08 8f ff ff       	call   c000f006 <operator new(unsigned long)>
c00160fe:	83 c4 0c             	add    esp,0xc
c0016101:	89 c3                	mov    ebx,eax
c0016103:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016108:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001610b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001610e:	53                   	push   ebx
c001610f:	e8 10 95 ff ff       	call   c000f624 <File::File(char const*, Process*)>
c0016114:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016117:	e8 da 97 ff ff       	call   c000f8f6 <File::exists()>
c001611c:	83 c4 10             	add    esp,0x10
c001611f:	84 c0                	test   al,al
c0016121:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016123:	75 11                	jne    c0016136 <Sys::loadDLL(regs*)+0x59>
c0016125:	83 ec 0c             	sub    esp,0xc
c0016128:	53                   	push   ebx
c0016129:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001612c:	83 c4 10             	add    esp,0x10
c001612f:	b8 03 00 00 00       	mov    eax,0x3
c0016134:	eb 36                	jmp    c001616c <Sys::loadDLL(regs*)+0x8f>
c0016136:	83 ec 0c             	sub    esp,0xc
c0016139:	53                   	push   ebx
c001613a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001613d:	58                   	pop    eax
c001613e:	5a                   	pop    edx
c001613f:	6a 00                	push   0x0
c0016141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0016144:	e8 c4 20 00 00       	call   c001820d <Thr::loadDLL(char const*, bool)>
c0016149:	83 c4 10             	add    esp,0x10
c001614c:	89 c1                	mov    ecx,eax
c001614e:	31 d2                	xor    edx,edx
c0016150:	b8 04 00 00 00       	mov    eax,0x4
c0016155:	85 c9                	test   ecx,ecx
c0016157:	74 15                	je     c001616e <Sys::loadDLL(regs*)+0x91>
c0016159:	53                   	push   ebx
c001615a:	53                   	push   ebx
c001615b:	ff 35 e8 42 02 c0    	push   DWORD PTR ds:0xc00242e8
c0016161:	51                   	push   ecx
c0016162:	e8 6c 22 00 00       	call   c00183d3 <Thr::executeDLL(unsigned long, void*)>
c0016167:	83 c4 10             	add    esp,0x10
c001616a:	31 c0                	xor    eax,eax
c001616c:	31 d2                	xor    edx,edx
c001616e:	59                   	pop    ecx
c001616f:	5b                   	pop    ebx
c0016170:	5e                   	pop    esi
c0016171:	c3                   	ret    

c0016172 <Sys::read(regs*)>:
c0016172:	57                   	push   edi
c0016173:	56                   	push   esi
c0016174:	53                   	push   ebx
c0016175:	83 ec 10             	sub    esp,0x10
c0016178:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001617c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001617f:	83 f8 02             	cmp    eax,0x2
c0016182:	77 10                	ja     c0016194 <Sys::read(regs*)+0x22>
c0016184:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016189:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001618c:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016192:	eb 0e                	jmp    c00161a2 <Sys::read(regs*)+0x30>
c0016194:	83 ec 0c             	sub    esp,0xc
c0016197:	50                   	push   eax
c0016198:	e8 30 7e ff ff       	call   c000dfcd <getFromFileDescriptor(int)>
c001619d:	83 c4 10             	add    esp,0x10
c00161a0:	89 c1                	mov    ecx,eax
c00161a2:	83 c8 ff             	or     eax,0xffffffff
c00161a5:	85 c9                	test   ecx,ecx
c00161a7:	89 c2                	mov    edx,eax
c00161a9:	74 28                	je     c00161d3 <Sys::read(regs*)+0x61>
c00161ab:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00161b3:	31 ff                	xor    edi,edi
c00161b5:	83 ec 0c             	sub    esp,0xc
c00161b8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00161ba:	8d 54 24 18          	lea    edx,[esp+0x18]
c00161be:	52                   	push   edx
c00161bf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00161c2:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00161c5:	57                   	push   edi
c00161c6:	56                   	push   esi
c00161c7:	51                   	push   ecx
c00161c8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00161cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00161cf:	83 c4 20             	add    esp,0x20
c00161d2:	99                   	cdq    
c00161d3:	83 c4 10             	add    esp,0x10
c00161d6:	5b                   	pop    ebx
c00161d7:	5e                   	pop    esi
c00161d8:	5f                   	pop    edi
c00161d9:	c3                   	ret    

c00161da <Sys::sbrk(regs*)>:
c00161da:	56                   	push   esi
c00161db:	53                   	push   ebx
c00161dc:	50                   	push   eax
c00161dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00161e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00161e9:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00161ec:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c00161f2:	85 db                	test   ebx,ebx
c00161f4:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00161f7:	74 02                	je     c00161fb <Sys::sbrk(regs*)+0x21>
c00161f9:	79 06                	jns    c0016201 <Sys::sbrk(regs*)+0x27>
c00161fb:	89 f0                	mov    eax,esi
c00161fd:	31 d2                	xor    edx,edx
c00161ff:	eb 2a                	jmp    c001622b <Sys::sbrk(regs*)+0x51>
c0016201:	83 c8 ff             	or     eax,0xffffffff
c0016204:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001620a:	89 c2                	mov    edx,eax
c001620c:	77 1d                	ja     c001622b <Sys::sbrk(regs*)+0x51>
c001620e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0016214:	50                   	push   eax
c0016215:	c1 ea 0c             	shr    edx,0xc
c0016218:	68 07 04 00 00       	push   0x407
c001621d:	52                   	push   edx
c001621e:	51                   	push   ecx
c001621f:	e8 d2 86 ff ff       	call   c000e8f6 <VAS::allocatePages(int, int)>
c0016224:	89 f0                	mov    eax,esi
c0016226:	31 d2                	xor    edx,edx
c0016228:	83 c4 10             	add    esp,0x10
c001622b:	59                   	pop    ecx
c001622c:	5b                   	pop    ebx
c001622d:	5e                   	pop    esi
c001622e:	c3                   	ret    

c001622f <Sys::write(regs*)>:
c001622f:	57                   	push   edi
c0016230:	56                   	push   esi
c0016231:	53                   	push   ebx
c0016232:	83 ec 10             	sub    esp,0x10
c0016235:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016239:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001623c:	83 f8 02             	cmp    eax,0x2
c001623f:	77 10                	ja     c0016251 <Sys::write(regs*)+0x22>
c0016241:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016246:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016249:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001624f:	eb 0e                	jmp    c001625f <Sys::write(regs*)+0x30>
c0016251:	83 ec 0c             	sub    esp,0xc
c0016254:	50                   	push   eax
c0016255:	e8 73 7d ff ff       	call   c000dfcd <getFromFileDescriptor(int)>
c001625a:	83 c4 10             	add    esp,0x10
c001625d:	89 c1                	mov    ecx,eax
c001625f:	83 c8 ff             	or     eax,0xffffffff
c0016262:	85 c9                	test   ecx,ecx
c0016264:	89 c2                	mov    edx,eax
c0016266:	74 28                	je     c0016290 <Sys::write(regs*)+0x61>
c0016268:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016270:	31 ff                	xor    edi,edi
c0016272:	83 ec 0c             	sub    esp,0xc
c0016275:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016277:	8d 54 24 18          	lea    edx,[esp+0x18]
c001627b:	52                   	push   edx
c001627c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001627f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0016282:	57                   	push   edi
c0016283:	56                   	push   esi
c0016284:	51                   	push   ecx
c0016285:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016288:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001628c:	83 c4 20             	add    esp,0x20
c001628f:	99                   	cdq    
c0016290:	83 c4 10             	add    esp,0x10
c0016293:	5b                   	pop    ebx
c0016294:	5e                   	pop    esi
c0016295:	5f                   	pop    edi
c0016296:	c3                   	ret    

c0016297 <Sys::yield(regs*)>:
c0016297:	83 ec 0c             	sub    esp,0xc
c001629a:	e8 3f 25 00 00       	call   c00187de <lockScheduler()>
c001629f:	e8 6e 28 00 00       	call   c0018b12 <schedule()>
c00162a4:	e8 37 25 00 00       	call   c00187e0 <unlockScheduler()>
c00162a9:	31 c0                	xor    eax,eax
c00162ab:	31 d2                	xor    edx,edx
c00162ad:	83 c4 0c             	add    esp,0xc
c00162b0:	c3                   	ret    

c00162b1 <sysCallGetPID(regs*)>:
c00162b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00162b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00162bb:	99                   	cdq    
c00162bc:	c3                   	ret    

c00162bd <sysCallSeekDir(regs*)>:
c00162bd:	31 c0                	xor    eax,eax
c00162bf:	31 d2                	xor    edx,edx
c00162c1:	c3                   	ret    

c00162c2 <sysCallTellDir(regs*)>:
c00162c2:	31 c0                	xor    eax,eax
c00162c4:	31 d2                	xor    edx,edx
c00162c6:	c3                   	ret    

c00162c7 <sysCallVerify(regs*)>:
c00162c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162cb:	31 d2                	xor    edx,edx
c00162cd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00162d0:	c3                   	ret    

c00162d1 <sysCallFork(regs*)>:
c00162d1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00162d6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00162db:	c3                   	ret    

c00162dc <sysCallExecve(regs*)>:
c00162dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00162e1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00162e6:	c3                   	ret    

c00162e7 <sysCallGetArgc(regs*)>:
c00162e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162ec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00162ef:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c00162f5:	99                   	cdq    
c00162f6:	c3                   	ret    

c00162f7 <sysFormatDisk(regs*)>:
c00162f7:	56                   	push   esi
c00162f8:	53                   	push   ebx
c00162f9:	53                   	push   ebx
c00162fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162fe:	8b 1d 48 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024448
c0016304:	eb 25                	jmp    c001632b <sysFormatDisk(regs*)+0x34>
c0016306:	83 ec 0c             	sub    esp,0xc
c0016309:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001630c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001630e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0016311:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016314:	50                   	push   eax
c0016315:	ff 34 85 e0 48 02 c0 	push   DWORD PTR [eax*4-0x3ffdb720]
c001631c:	53                   	push   ebx
c001631d:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0016320:	83 c4 20             	add    esp,0x20
c0016323:	83 f8 08             	cmp    eax,0x8
c0016326:	75 12                	jne    c001633a <sysFormatDisk(regs*)+0x43>
c0016328:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001632b:	85 db                	test   ebx,ebx
c001632d:	75 d7                	jne    c0016306 <sysFormatDisk(regs*)+0xf>
c001632f:	59                   	pop    ecx
c0016330:	b8 03 00 00 00       	mov    eax,0x3
c0016335:	31 d2                	xor    edx,edx
c0016337:	5b                   	pop    ebx
c0016338:	5e                   	pop    esi
c0016339:	c3                   	ret    
c001633a:	85 c0                	test   eax,eax
c001633c:	74 1b                	je     c0016359 <sysFormatDisk(regs*)+0x62>
c001633e:	83 f8 09             	cmp    eax,0x9
c0016341:	74 0b                	je     c001634e <sysFormatDisk(regs*)+0x57>
c0016343:	59                   	pop    ecx
c0016344:	b8 02 00 00 00       	mov    eax,0x2
c0016349:	31 d2                	xor    edx,edx
c001634b:	5b                   	pop    ebx
c001634c:	5e                   	pop    esi
c001634d:	c3                   	ret    
c001634e:	59                   	pop    ecx
c001634f:	b8 01 00 00 00       	mov    eax,0x1
c0016354:	31 d2                	xor    edx,edx
c0016356:	5b                   	pop    ebx
c0016357:	5e                   	pop    esi
c0016358:	c3                   	ret    
c0016359:	59                   	pop    ecx
c001635a:	31 c0                	xor    eax,eax
c001635c:	31 d2                	xor    edx,edx
c001635e:	5b                   	pop    ebx
c001635f:	5e                   	pop    esi
c0016360:	c3                   	ret    

c0016361 <sysSetDiskVolumeLabel(regs*)>:
c0016361:	56                   	push   esi
c0016362:	53                   	push   ebx
c0016363:	53                   	push   ebx
c0016364:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016368:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001636b:	83 f8 19             	cmp    eax,0x19
c001636e:	77 29                	ja     c0016399 <sysSetDiskVolumeLabel(regs*)+0x38>
c0016370:	8b 0c 85 e0 48 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdb720]
c0016377:	85 c9                	test   ecx,ecx
c0016379:	74 1e                	je     c0016399 <sysSetDiskVolumeLabel(regs*)+0x38>
c001637b:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001637e:	85 d2                	test   edx,edx
c0016380:	74 17                	je     c0016399 <sysSetDiskVolumeLabel(regs*)+0x38>
c0016382:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c0016388:	8b 33                	mov    esi,DWORD PTR [ebx]
c001638a:	52                   	push   edx
c001638b:	50                   	push   eax
c001638c:	51                   	push   ecx
c001638d:	53                   	push   ebx
c001638e:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0016391:	83 c4 10             	add    esp,0x10
c0016394:	99                   	cdq    
c0016395:	59                   	pop    ecx
c0016396:	5b                   	pop    ebx
c0016397:	5e                   	pop    esi
c0016398:	c3                   	ret    
c0016399:	59                   	pop    ecx
c001639a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001639f:	ba ff ff ff ff       	mov    edx,0xffffffff
c00163a4:	5b                   	pop    ebx
c00163a5:	5e                   	pop    esi
c00163a6:	c3                   	ret    

c00163a7 <sysGetDiskVolumeLabel(regs*)>:
c00163a7:	57                   	push   edi
c00163a8:	56                   	push   esi
c00163a9:	53                   	push   ebx
c00163aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ae:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00163b1:	83 fa 19             	cmp    edx,0x19
c00163b4:	77 34                	ja     c00163ea <sysGetDiskVolumeLabel(regs*)+0x43>
c00163b6:	8b 0c 95 e0 48 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdb720]
c00163bd:	85 c9                	test   ecx,ecx
c00163bf:	74 29                	je     c00163ea <sysGetDiskVolumeLabel(regs*)+0x43>
c00163c1:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00163c4:	85 db                	test   ebx,ebx
c00163c6:	74 22                	je     c00163ea <sysGetDiskVolumeLabel(regs*)+0x43>
c00163c8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00163cb:	85 c0                	test   eax,eax
c00163cd:	74 1b                	je     c00163ea <sysGetDiskVolumeLabel(regs*)+0x43>
c00163cf:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c00163d5:	83 ec 0c             	sub    esp,0xc
c00163d8:	8b 3e                	mov    edi,DWORD PTR [esi]
c00163da:	50                   	push   eax
c00163db:	53                   	push   ebx
c00163dc:	52                   	push   edx
c00163dd:	51                   	push   ecx
c00163de:	56                   	push   esi
c00163df:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00163e2:	83 c4 20             	add    esp,0x20
c00163e5:	99                   	cdq    
c00163e6:	5b                   	pop    ebx
c00163e7:	5e                   	pop    esi
c00163e8:	5f                   	pop    edi
c00163e9:	c3                   	ret    
c00163ea:	5b                   	pop    ebx
c00163eb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00163f0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00163f5:	5e                   	pop    esi
c00163f6:	5f                   	pop    edi
c00163f7:	c3                   	ret    

c00163f8 <sysShutdown(regs*)>:
c00163f8:	83 ec 0c             	sub    esp,0xc
c00163fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016402:	85 c0                	test   eax,eax
c0016404:	74 18                	je     c001641e <sysShutdown(regs*)+0x26>
c0016406:	83 f8 01             	cmp    eax,0x1
c0016409:	74 38                	je     c0016443 <sysShutdown(regs*)+0x4b>
c001640b:	83 f8 02             	cmp    eax,0x2
c001640e:	74 24                	je     c0016434 <sysShutdown(regs*)+0x3c>
c0016410:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016415:	ba ff ff ff ff       	mov    edx,0xffffffff
c001641a:	83 c4 0c             	add    esp,0xc
c001641d:	c3                   	ret    
c001641e:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c0016423:	8b 10                	mov    edx,DWORD PTR [eax]
c0016425:	6a 00                	push   0x0
c0016427:	6a 00                	push   0x0
c0016429:	6a 00                	push   0x0
c001642b:	50                   	push   eax
c001642c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001642f:	83 c4 10             	add    esp,0x10
c0016432:	eb dc                	jmp    c0016410 <sysShutdown(regs*)+0x18>
c0016434:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c0016439:	8b 10                	mov    edx,DWORD PTR [eax]
c001643b:	6a 00                	push   0x0
c001643d:	6a 00                	push   0x0
c001643f:	6a 01                	push   0x1
c0016441:	eb e8                	jmp    c001642b <sysShutdown(regs*)+0x33>
c0016443:	a1 60 49 02 c0       	mov    eax,ds:0xc0024960
c0016448:	85 c0                	test   eax,eax
c001644a:	74 02                	je     c001644e <sysShutdown(regs*)+0x56>
c001644c:	ff d0                	call   eax
c001644e:	31 c0                	xor    eax,eax
c0016450:	31 d2                	xor    edx,edx
c0016452:	83 c4 0c             	add    esp,0xc
c0016455:	c3                   	ret    

c0016456 <sysCallGetCwd(regs*)>:
c0016456:	83 ec 10             	sub    esp,0x10
c0016459:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001645d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0016460:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016463:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016468:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001646b:	e8 25 95 ff ff       	call   c000f995 <getcwd(Process*, char*, int)>
c0016470:	83 c4 1c             	add    esp,0x1c
c0016473:	99                   	cdq    
c0016474:	c3                   	ret    

c0016475 <sysCallSetCwd(regs*)>:
c0016475:	83 ec 14             	sub    esp,0x14
c0016478:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001647c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001647f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016484:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016487:	e8 33 95 ff ff       	call   c000f9bf <setcwd(Process*, char*)>
c001648c:	83 c4 1c             	add    esp,0x1c
c001648f:	99                   	cdq    
c0016490:	c3                   	ret    

c0016491 <sysCallRealpath(regs*)>:
c0016491:	83 ec 0c             	sub    esp,0xc
c0016494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016498:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001649b:	85 d2                	test   edx,edx
c001649d:	74 07                	je     c00164a6 <sysCallRealpath(regs*)+0x15>
c001649f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00164a2:	85 c0                	test   eax,eax
c00164a4:	75 0b                	jne    c00164b1 <sysCallRealpath(regs*)+0x20>
c00164a6:	b8 01 00 00 00       	mov    eax,0x1
c00164ab:	31 d2                	xor    edx,edx
c00164ad:	83 c4 0c             	add    esp,0xc
c00164b0:	c3                   	ret    
c00164b1:	51                   	push   ecx
c00164b2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00164b8:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00164bb:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00164c1:	51                   	push   ecx
c00164c2:	52                   	push   edx
c00164c3:	50                   	push   eax
c00164c4:	e8 b1 8f ff ff       	call   c000f47a <standardiseFiles(char*, char const*, char const*)>
c00164c9:	83 c4 10             	add    esp,0x10
c00164cc:	31 c0                	xor    eax,eax
c00164ce:	31 d2                	xor    edx,edx
c00164d0:	83 c4 0c             	add    esp,0xc
c00164d3:	c3                   	ret    

c00164d4 <sysCallReadDir(regs*)>:
c00164d4:	53                   	push   ebx
c00164d5:	83 ec 18             	sub    esp,0x18
c00164d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00164dc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00164df:	83 f8 02             	cmp    eax,0x2
c00164e2:	76 53                	jbe    c0016537 <sysCallReadDir(regs*)+0x63>
c00164e4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00164e7:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c00164ed:	77 4f                	ja     c001653e <sysCallReadDir(regs*)+0x6a>
c00164ef:	83 ec 0c             	sub    esp,0xc
c00164f2:	50                   	push   eax
c00164f3:	e8 d5 7a ff ff       	call   c000dfcd <getFromFileDescriptor(int)>
c00164f8:	83 c4 10             	add    esp,0x10
c00164fb:	85 c0                	test   eax,eax
c00164fd:	74 50                	je     c001654f <sysCallReadDir(regs*)+0x7b>
c00164ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016507:	83 ec 0c             	sub    esp,0xc
c001650a:	8b 10                	mov    edx,DWORD PTR [eax]
c001650c:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0016510:	51                   	push   ecx
c0016511:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016514:	6a 00                	push   0x0
c0016516:	68 10 01 00 00       	push   0x110
c001651b:	50                   	push   eax
c001651c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001651f:	83 c4 20             	add    esp,0x20
c0016522:	85 c0                	test   eax,eax
c0016524:	74 38                	je     c001655e <sysCallReadDir(regs*)+0x8a>
c0016526:	83 f8 07             	cmp    eax,0x7
c0016529:	74 0c                	je     c0016537 <sysCallReadDir(regs*)+0x63>
c001652b:	b8 02 00 00 00       	mov    eax,0x2
c0016530:	31 d2                	xor    edx,edx
c0016532:	83 c4 18             	add    esp,0x18
c0016535:	5b                   	pop    ebx
c0016536:	c3                   	ret    
c0016537:	b8 01 00 00 00       	mov    eax,0x1
c001653c:	eb f2                	jmp    c0016530 <sysCallReadDir(regs*)+0x5c>
c001653e:	83 ec 08             	sub    esp,0x8
c0016541:	52                   	push   edx
c0016542:	68 28 26 02 c0       	push   0xc0022628
c0016547:	e8 a9 8b ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001654c:	83 c4 10             	add    esp,0x10
c001654f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016554:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016559:	83 c4 18             	add    esp,0x18
c001655c:	5b                   	pop    ebx
c001655d:	c3                   	ret    
c001655e:	31 c0                	xor    eax,eax
c0016560:	eb ce                	jmp    c0016530 <sysCallReadDir(regs*)+0x5c>

c0016562 <sysCallIsATTY(regs*)>:
c0016562:	83 ec 0c             	sub    esp,0xc
c0016565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016569:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001656c:	83 f8 02             	cmp    eax,0x2
c001656f:	76 07                	jbe    c0016578 <sysCallIsATTY(regs*)+0x16>
c0016571:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016576:	75 26                	jne    c001659e <sysCallIsATTY(regs*)+0x3c>
c0016578:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001657d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016580:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0016586:	85 c0                	test   eax,eax
c0016588:	74 24                	je     c00165ae <sysCallIsATTY(regs*)+0x4c>
c001658a:	83 ec 0c             	sub    esp,0xc
c001658d:	8b 10                	mov    edx,DWORD PTR [eax]
c001658f:	50                   	push   eax
c0016590:	ff 12                	call   DWORD PTR [edx]
c0016592:	31 d2                	xor    edx,edx
c0016594:	0f b6 c0             	movzx  eax,al
c0016597:	83 c4 10             	add    esp,0x10
c001659a:	83 c4 0c             	add    esp,0xc
c001659d:	c3                   	ret    
c001659e:	83 ec 0c             	sub    esp,0xc
c00165a1:	50                   	push   eax
c00165a2:	e8 26 7a ff ff       	call   c000dfcd <getFromFileDescriptor(int)>
c00165a7:	83 c4 10             	add    esp,0x10
c00165aa:	85 c0                	test   eax,eax
c00165ac:	75 dc                	jne    c001658a <sysCallIsATTY(regs*)+0x28>
c00165ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165b3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00165b8:	83 c4 0c             	add    esp,0xc
c00165bb:	c3                   	ret    

c00165bc <sysCallSeek(regs*)>:
c00165bc:	53                   	push   ebx
c00165bd:	83 ec 08             	sub    esp,0x8
c00165c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00165c4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00165c7:	83 f8 02             	cmp    eax,0x2
c00165ca:	76 4a                	jbe    c0016616 <sysCallSeek(regs*)+0x5a>
c00165cc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00165d1:	77 32                	ja     c0016605 <sysCallSeek(regs*)+0x49>
c00165d3:	83 ec 0c             	sub    esp,0xc
c00165d6:	50                   	push   eax
c00165d7:	e8 f1 79 ff ff       	call   c000dfcd <getFromFileDescriptor(int)>
c00165dc:	83 c4 0c             	add    esp,0xc
c00165df:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00165e2:	31 db                	xor    ebx,ebx
c00165e4:	53                   	push   ebx
c00165e5:	51                   	push   ecx
c00165e6:	50                   	push   eax
c00165e7:	e8 5a 91 ff ff       	call   c000f746 <File::seek(unsigned long long)>
c00165ec:	83 c4 10             	add    esp,0x10
c00165ef:	85 c0                	test   eax,eax
c00165f1:	0f 95 c0             	setne  al
c00165f4:	31 d2                	xor    edx,edx
c00165f6:	0f b6 c0             	movzx  eax,al
c00165f9:	f7 d8                	neg    eax
c00165fb:	83 d2 00             	adc    edx,0x0
c00165fe:	83 c4 08             	add    esp,0x8
c0016601:	f7 da                	neg    edx
c0016603:	5b                   	pop    ebx
c0016604:	c3                   	ret    
c0016605:	83 ec 08             	sub    esp,0x8
c0016608:	50                   	push   eax
c0016609:	68 e4 26 02 c0       	push   0xc00226e4
c001660e:	e8 e2 8a ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0016613:	83 c4 10             	add    esp,0x10
c0016616:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001661b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016620:	83 c4 08             	add    esp,0x8
c0016623:	5b                   	pop    ebx
c0016624:	c3                   	ret    

c0016625 <sysCallTell(regs*)>:
c0016625:	53                   	push   ebx
c0016626:	83 ec 08             	sub    esp,0x8
c0016629:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001662d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016630:	83 f8 02             	cmp    eax,0x2
c0016633:	76 5e                	jbe    c0016693 <sysCallTell(regs*)+0x6e>
c0016635:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001663a:	77 2d                	ja     c0016669 <sysCallTell(regs*)+0x44>
c001663c:	83 ec 0c             	sub    esp,0xc
c001663f:	50                   	push   eax
c0016640:	e8 88 79 ff ff       	call   c000dfcd <getFromFileDescriptor(int)>
c0016645:	5a                   	pop    edx
c0016646:	59                   	pop    ecx
c0016647:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001664a:	50                   	push   eax
c001664b:	e8 4c 91 ff ff       	call   c000f79c <File::tell(unsigned long long*)>
c0016650:	83 c4 10             	add    esp,0x10
c0016653:	85 c0                	test   eax,eax
c0016655:	0f 95 c0             	setne  al
c0016658:	31 d2                	xor    edx,edx
c001665a:	0f b6 c0             	movzx  eax,al
c001665d:	f7 d8                	neg    eax
c001665f:	83 d2 00             	adc    edx,0x0
c0016662:	83 c4 08             	add    esp,0x8
c0016665:	f7 da                	neg    edx
c0016667:	5b                   	pop    ebx
c0016668:	c3                   	ret    
c0016669:	83 ec 08             	sub    esp,0x8
c001666c:	50                   	push   eax
c001666d:	68 fe 26 02 c0       	push   0xc00226fe
c0016672:	e8 7e 8a ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0016677:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001667a:	83 c4 10             	add    esp,0x10
c001667d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016683:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001668a:	31 d2                	xor    edx,edx
c001668c:	31 c0                	xor    eax,eax
c001668e:	83 c4 08             	add    esp,0x8
c0016691:	5b                   	pop    ebx
c0016692:	c3                   	ret    
c0016693:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016698:	ba ff ff ff ff       	mov    edx,0xffffffff
c001669d:	83 c4 08             	add    esp,0x8
c00166a0:	5b                   	pop    ebx
c00166a1:	c3                   	ret    

c00166a2 <sysCallSizeFromFilename(regs*)>:
c00166a2:	57                   	push   edi
c00166a3:	56                   	push   esi
c00166a4:	53                   	push   ebx
c00166a5:	83 ec 10             	sub    esp,0x10
c00166a8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00166ac:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00166af:	83 fb 02             	cmp    ebx,0x2
c00166b2:	0f 86 8a 00 00 00    	jbe    c0016742 <sysCallSizeFromFilename(regs*)+0xa0>
c00166b8:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00166be:	77 56                	ja     c0016716 <sysCallSizeFromFilename(regs*)+0x74>
c00166c0:	83 ec 0c             	sub    esp,0xc
c00166c3:	68 14 01 00 00       	push   0x114
c00166c8:	e8 39 89 ff ff       	call   c000f006 <operator new(unsigned long)>
c00166cd:	83 c4 0c             	add    esp,0xc
c00166d0:	89 c7                	mov    edi,eax
c00166d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166d7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00166da:	53                   	push   ebx
c00166db:	57                   	push   edi
c00166dc:	e8 43 8f ff ff       	call   c000f624 <File::File(char const*, Process*)>
c00166e1:	83 c4 0c             	add    esp,0xc
c00166e4:	8d 44 24 13          	lea    eax,[esp+0x13]
c00166e8:	50                   	push   eax
c00166e9:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00166ec:	57                   	push   edi
c00166ed:	e8 42 92 ff ff       	call   c000f934 <File::stat(unsigned long long*, bool*)>
c00166f2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00166f5:	89 c3                	mov    ebx,eax
c00166f7:	8b 07                	mov    eax,DWORD PTR [edi]
c00166f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00166fc:	83 c4 10             	add    esp,0x10
c00166ff:	31 c0                	xor    eax,eax
c0016701:	85 db                	test   ebx,ebx
c0016703:	0f 95 c0             	setne  al
c0016706:	31 d2                	xor    edx,edx
c0016708:	f7 d8                	neg    eax
c001670a:	83 d2 00             	adc    edx,0x0
c001670d:	83 c4 10             	add    esp,0x10
c0016710:	f7 da                	neg    edx
c0016712:	5b                   	pop    ebx
c0016713:	5e                   	pop    esi
c0016714:	5f                   	pop    edi
c0016715:	c3                   	ret    
c0016716:	83 ec 08             	sub    esp,0x8
c0016719:	53                   	push   ebx
c001671a:	68 18 27 02 c0       	push   0xc0022718
c001671f:	e8 d1 89 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0016724:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016727:	83 c4 10             	add    esp,0x10
c001672a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016730:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016737:	31 d2                	xor    edx,edx
c0016739:	83 c4 10             	add    esp,0x10
c001673c:	31 c0                	xor    eax,eax
c001673e:	5b                   	pop    ebx
c001673f:	5e                   	pop    esi
c0016740:	5f                   	pop    edi
c0016741:	c3                   	ret    
c0016742:	83 c4 10             	add    esp,0x10
c0016745:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001674a:	5b                   	pop    ebx
c001674b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016750:	5e                   	pop    esi
c0016751:	5f                   	pop    edi
c0016752:	c3                   	ret    

c0016753 <sysCallSize(regs*)>:
c0016753:	53                   	push   ebx
c0016754:	83 ec 18             	sub    esp,0x18
c0016757:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001675b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001675e:	83 f8 02             	cmp    eax,0x2
c0016761:	76 64                	jbe    c00167c7 <sysCallSize(regs*)+0x74>
c0016763:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016768:	77 33                	ja     c001679d <sysCallSize(regs*)+0x4a>
c001676a:	83 ec 0c             	sub    esp,0xc
c001676d:	50                   	push   eax
c001676e:	e8 5a 78 ff ff       	call   c000dfcd <getFromFileDescriptor(int)>
c0016773:	83 c4 0c             	add    esp,0xc
c0016776:	8d 54 24 13          	lea    edx,[esp+0x13]
c001677a:	52                   	push   edx
c001677b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001677e:	50                   	push   eax
c001677f:	e8 b0 91 ff ff       	call   c000f934 <File::stat(unsigned long long*, bool*)>
c0016784:	83 c4 10             	add    esp,0x10
c0016787:	85 c0                	test   eax,eax
c0016789:	0f 95 c0             	setne  al
c001678c:	31 d2                	xor    edx,edx
c001678e:	0f b6 c0             	movzx  eax,al
c0016791:	f7 d8                	neg    eax
c0016793:	83 d2 00             	adc    edx,0x0
c0016796:	83 c4 18             	add    esp,0x18
c0016799:	f7 da                	neg    edx
c001679b:	5b                   	pop    ebx
c001679c:	c3                   	ret    
c001679d:	83 ec 08             	sub    esp,0x8
c00167a0:	50                   	push   eax
c00167a1:	68 18 27 02 c0       	push   0xc0022718
c00167a6:	e8 4a 89 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c00167ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00167ae:	83 c4 10             	add    esp,0x10
c00167b1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00167b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00167be:	31 d2                	xor    edx,edx
c00167c0:	31 c0                	xor    eax,eax
c00167c2:	83 c4 18             	add    esp,0x18
c00167c5:	5b                   	pop    ebx
c00167c6:	c3                   	ret    
c00167c7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00167cc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00167d1:	83 c4 18             	add    esp,0x18
c00167d4:	5b                   	pop    ebx
c00167d5:	c3                   	ret    

c00167d6 <sysCallClose(regs*)>:
c00167d6:	53                   	push   ebx
c00167d7:	83 ec 08             	sub    esp,0x8
c00167da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167de:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00167e1:	83 f8 02             	cmp    eax,0x2
c00167e4:	76 50                	jbe    c0016836 <sysCallClose(regs*)+0x60>
c00167e6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00167eb:	74 58                	je     c0016845 <sysCallClose(regs*)+0x6f>
c00167ed:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00167f2:	74 60                	je     c0016854 <sysCallClose(regs*)+0x7e>
c00167f4:	77 2f                	ja     c0016825 <sysCallClose(regs*)+0x4f>
c00167f6:	83 ec 0c             	sub    esp,0xc
c00167f9:	50                   	push   eax
c00167fa:	e8 ce 77 ff ff       	call   c000dfcd <getFromFileDescriptor(int)>
c00167ff:	89 c3                	mov    ebx,eax
c0016801:	89 04 24             	mov    DWORD PTR [esp],eax
c0016804:	e8 dd 8e ff ff       	call   c000f6e6 <File::close()>
c0016809:	83 c4 10             	add    esp,0x10
c001680c:	85 db                	test   ebx,ebx
c001680e:	74 0c                	je     c001681c <sysCallClose(regs*)+0x46>
c0016810:	83 ec 0c             	sub    esp,0xc
c0016813:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016815:	53                   	push   ebx
c0016816:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016819:	83 c4 10             	add    esp,0x10
c001681c:	31 c0                	xor    eax,eax
c001681e:	31 d2                	xor    edx,edx
c0016820:	83 c4 08             	add    esp,0x8
c0016823:	5b                   	pop    ebx
c0016824:	c3                   	ret    
c0016825:	83 ec 08             	sub    esp,0x8
c0016828:	50                   	push   eax
c0016829:	68 4c 26 02 c0       	push   0xc002264c
c001682e:	e8 c2 88 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0016833:	83 c4 10             	add    esp,0x10
c0016836:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001683b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016840:	83 c4 08             	add    esp,0x8
c0016843:	5b                   	pop    ebx
c0016844:	c3                   	ret    
c0016845:	83 ec 0c             	sub    esp,0xc
c0016848:	68 33 27 02 c0       	push   0xc0022733
c001684d:	e8 a3 88 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0016852:	eb c5                	jmp    c0016819 <sysCallClose(regs*)+0x43>
c0016854:	83 ec 0c             	sub    esp,0xc
c0016857:	68 41 27 02 c0       	push   0xc0022741
c001685c:	eb ef                	jmp    c001684d <sysCallClose(regs*)+0x77>

c001685e <sysCallOpenDir(regs*)>:
c001685e:	56                   	push   esi
c001685f:	53                   	push   ebx
c0016860:	53                   	push   ebx
c0016861:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016865:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0016868:	85 f6                	test   esi,esi
c001686a:	74 51                	je     c00168bd <sysCallOpenDir(regs*)+0x5f>
c001686c:	83 ec 0c             	sub    esp,0xc
c001686f:	68 14 01 00 00       	push   0x114
c0016874:	e8 8d 87 ff ff       	call   c000f006 <operator new(unsigned long)>
c0016879:	83 c4 0c             	add    esp,0xc
c001687c:	89 c6                	mov    esi,eax
c001687e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016883:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016886:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016889:	56                   	push   esi
c001688a:	e8 57 92 ff ff       	call   c000fae6 <Directory::Directory(char const*, Process*)>
c001688f:	89 34 24             	mov    DWORD PTR [esp],esi
c0016892:	e8 b3 92 ff ff       	call   c000fb4a <Directory::open()>
c0016897:	83 c4 10             	add    esp,0x10
c001689a:	85 c0                	test   eax,eax
c001689c:	75 1f                	jne    c00168bd <sysCallOpenDir(regs*)+0x5f>
c001689e:	83 ec 0c             	sub    esp,0xc
c00168a1:	56                   	push   esi
c00168a2:	e8 71 74 ff ff       	call   c000dd18 <UnixFile::getFileDescriptor()>
c00168a7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00168aa:	83 c4 10             	add    esp,0x10
c00168ad:	89 02                	mov    DWORD PTR [edx],eax
c00168af:	c1 f8 1f             	sar    eax,0x1f
c00168b2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00168b5:	31 c0                	xor    eax,eax
c00168b7:	59                   	pop    ecx
c00168b8:	31 d2                	xor    edx,edx
c00168ba:	5b                   	pop    ebx
c00168bb:	5e                   	pop    esi
c00168bc:	c3                   	ret    
c00168bd:	59                   	pop    ecx
c00168be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00168c3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00168c8:	5b                   	pop    ebx
c00168c9:	5e                   	pop    esi
c00168ca:	c3                   	ret    

c00168cb <sysCallMakeDir(regs*)>:
c00168cb:	56                   	push   esi
c00168cc:	53                   	push   ebx
c00168cd:	83 ec 10             	sub    esp,0x10
c00168d0:	68 14 01 00 00       	push   0x114
c00168d5:	e8 2c 87 ff ff       	call   c000f006 <operator new(unsigned long)>
c00168da:	83 c4 0c             	add    esp,0xc
c00168dd:	89 c3                	mov    ebx,eax
c00168df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168e4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00168e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00168eb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00168ee:	53                   	push   ebx
c00168ef:	e8 f2 91 ff ff       	call   c000fae6 <Directory::Directory(char const*, Process*)>
c00168f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00168f7:	e8 2e 94 ff ff       	call   c000fd2a <Directory::create()>
c00168fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00168ff:	89 c6                	mov    esi,eax
c0016901:	e8 a0 92 ff ff       	call   c000fba6 <Directory::close()>
c0016906:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016908:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001690b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001690e:	31 c0                	xor    eax,eax
c0016910:	85 f6                	test   esi,esi
c0016912:	0f 95 c0             	setne  al
c0016915:	31 d2                	xor    edx,edx
c0016917:	f7 d8                	neg    eax
c0016919:	83 d2 00             	adc    edx,0x0
c001691c:	83 c4 14             	add    esp,0x14
c001691f:	f7 da                	neg    edx
c0016921:	5b                   	pop    ebx
c0016922:	5e                   	pop    esi
c0016923:	c3                   	ret    

c0016924 <sysCallCloseDir(regs*)>:
c0016924:	53                   	push   ebx
c0016925:	83 ec 08             	sub    esp,0x8
c0016928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001692c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001692f:	83 f8 02             	cmp    eax,0x2
c0016932:	76 47                	jbe    c001697b <sysCallCloseDir(regs*)+0x57>
c0016934:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016939:	77 2f                	ja     c001696a <sysCallCloseDir(regs*)+0x46>
c001693b:	83 ec 0c             	sub    esp,0xc
c001693e:	50                   	push   eax
c001693f:	e8 89 76 ff ff       	call   c000dfcd <getFromFileDescriptor(int)>
c0016944:	89 c3                	mov    ebx,eax
c0016946:	89 04 24             	mov    DWORD PTR [esp],eax
c0016949:	e8 58 92 ff ff       	call   c000fba6 <Directory::close()>
c001694e:	83 c4 10             	add    esp,0x10
c0016951:	85 db                	test   ebx,ebx
c0016953:	74 0c                	je     c0016961 <sysCallCloseDir(regs*)+0x3d>
c0016955:	83 ec 0c             	sub    esp,0xc
c0016958:	8b 03                	mov    eax,DWORD PTR [ebx]
c001695a:	53                   	push   ebx
c001695b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001695e:	83 c4 10             	add    esp,0x10
c0016961:	31 c0                	xor    eax,eax
c0016963:	31 d2                	xor    edx,edx
c0016965:	83 c4 08             	add    esp,0x8
c0016968:	5b                   	pop    ebx
c0016969:	c3                   	ret    
c001696a:	83 ec 08             	sub    esp,0x8
c001696d:	50                   	push   eax
c001696e:	68 74 26 02 c0       	push   0xc0022674
c0016973:	e8 7d 87 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0016978:	83 c4 10             	add    esp,0x10
c001697b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016980:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016985:	83 c4 08             	add    esp,0x8
c0016988:	5b                   	pop    ebx
c0016989:	c3                   	ret    

c001698a <sysCallWait(regs*)>:
c001698a:	83 ec 10             	sub    esp,0x10
c001698d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016991:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0016994:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016997:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001699a:	e8 ee 22 00 00       	call   c0018c8d <waitTask(int, int*, int)>
c001699f:	83 c4 1c             	add    esp,0x1c
c00169a2:	99                   	cdq    
c00169a3:	c3                   	ret    

c00169a4 <sysCallRmdir(regs*)>:
c00169a4:	56                   	push   esi
c00169a5:	53                   	push   ebx
c00169a6:	83 ec 10             	sub    esp,0x10
c00169a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00169ad:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00169b0:	68 14 01 00 00       	push   0x114
c00169b5:	e8 4c 86 ff ff       	call   c000f006 <operator new(unsigned long)>
c00169ba:	83 c4 0c             	add    esp,0xc
c00169bd:	89 c3                	mov    ebx,eax
c00169bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169c4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00169c7:	56                   	push   esi
c00169c8:	53                   	push   ebx
c00169c9:	e8 56 8c ff ff       	call   c000f624 <File::File(char const*, Process*)>
c00169ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169d1:	e8 2a 8e ff ff       	call   c000f800 <File::unlink()>
c00169d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169d9:	89 c6                	mov    esi,eax
c00169db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00169e0:	31 c0                	xor    eax,eax
c00169e2:	85 f6                	test   esi,esi
c00169e4:	0f 95 c0             	setne  al
c00169e7:	31 d2                	xor    edx,edx
c00169e9:	f7 d8                	neg    eax
c00169eb:	83 d2 00             	adc    edx,0x0
c00169ee:	83 c4 14             	add    esp,0x14
c00169f1:	f7 da                	neg    edx
c00169f3:	5b                   	pop    ebx
c00169f4:	5e                   	pop    esi
c00169f5:	c3                   	ret    

c00169f6 <sysCallUnlink(regs*)>:
c00169f6:	56                   	push   esi
c00169f7:	53                   	push   ebx
c00169f8:	83 ec 10             	sub    esp,0x10
c00169fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00169ff:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016a02:	68 14 01 00 00       	push   0x114
c0016a07:	e8 fa 85 ff ff       	call   c000f006 <operator new(unsigned long)>
c0016a0c:	83 c4 0c             	add    esp,0xc
c0016a0f:	89 c3                	mov    ebx,eax
c0016a11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a16:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016a19:	56                   	push   esi
c0016a1a:	53                   	push   ebx
c0016a1b:	e8 04 8c ff ff       	call   c000f624 <File::File(char const*, Process*)>
c0016a20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a23:	e8 d8 8d ff ff       	call   c000f800 <File::unlink()>
c0016a28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a2b:	89 c6                	mov    esi,eax
c0016a2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a2f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a32:	31 c0                	xor    eax,eax
c0016a34:	85 f6                	test   esi,esi
c0016a36:	0f 95 c0             	setne  al
c0016a39:	31 d2                	xor    edx,edx
c0016a3b:	f7 d8                	neg    eax
c0016a3d:	83 d2 00             	adc    edx,0x0
c0016a40:	83 c4 14             	add    esp,0x14
c0016a43:	f7 da                	neg    edx
c0016a45:	5b                   	pop    ebx
c0016a46:	5e                   	pop    esi
c0016a47:	c3                   	ret    

c0016a48 <sysCallGetArgv(regs*)>:
c0016a48:	83 ec 0c             	sub    esp,0xc
c0016a4b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016a4f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016a52:	85 c0                	test   eax,eax
c0016a54:	78 2b                	js     c0016a81 <sysCallGetArgv(regs*)+0x39>
c0016a56:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016a5c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016a5f:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0016a65:	7d 1a                	jge    c0016a81 <sysCallGetArgv(regs*)+0x39>
c0016a67:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0016a6e:	85 c0                	test   eax,eax
c0016a70:	74 17                	je     c0016a89 <sysCallGetArgv(regs*)+0x41>
c0016a72:	83 ec 08             	sub    esp,0x8
c0016a75:	50                   	push   eax
c0016a76:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0016a79:	e8 db 9c fe ff       	call   c0000759 <strcpy>
c0016a7e:	83 c4 10             	add    esp,0x10
c0016a81:	31 c0                	xor    eax,eax
c0016a83:	31 d2                	xor    edx,edx
c0016a85:	83 c4 0c             	add    esp,0xc
c0016a88:	c3                   	ret    
c0016a89:	b8 01 00 00 00       	mov    eax,0x1
c0016a8e:	31 d2                	xor    edx,edx
c0016a90:	83 c4 0c             	add    esp,0xc
c0016a93:	c3                   	ret    

c0016a94 <sysCallTTYName(regs*)>:
c0016a94:	56                   	push   esi
c0016a95:	53                   	push   ebx
c0016a96:	53                   	push   ebx
c0016a97:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016a9b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016a9e:	85 c0                	test   eax,eax
c0016aa0:	74 5f                	je     c0016b01 <sysCallTTYName(regs*)+0x6d>
c0016aa2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016aa5:	83 f8 02             	cmp    eax,0x2
c0016aa8:	77 3e                	ja     c0016ae8 <sysCallTTYName(regs*)+0x54>
c0016aaa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016aaf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ab2:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016ab8:	85 db                	test   ebx,ebx
c0016aba:	74 45                	je     c0016b01 <sysCallTTYName(regs*)+0x6d>
c0016abc:	83 ec 0c             	sub    esp,0xc
c0016abf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ac1:	53                   	push   ebx
c0016ac2:	ff 10                	call   DWORD PTR [eax]
c0016ac4:	83 c4 10             	add    esp,0x10
c0016ac7:	84 c0                	test   al,al
c0016ac9:	74 41                	je     c0016b0c <sysCallTTYName(regs*)+0x78>
c0016acb:	83 ec 08             	sub    esp,0x8
c0016ace:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0016ad4:	53                   	push   ebx
c0016ad5:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016ad8:	e8 7c 9c fe ff       	call   c0000759 <strcpy>
c0016add:	83 c4 10             	add    esp,0x10
c0016ae0:	31 c0                	xor    eax,eax
c0016ae2:	59                   	pop    ecx
c0016ae3:	31 d2                	xor    edx,edx
c0016ae5:	5b                   	pop    ebx
c0016ae6:	5e                   	pop    esi
c0016ae7:	c3                   	ret    
c0016ae8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016aed:	74 bb                	je     c0016aaa <sysCallTTYName(regs*)+0x16>
c0016aef:	83 ec 0c             	sub    esp,0xc
c0016af2:	50                   	push   eax
c0016af3:	e8 d5 74 ff ff       	call   c000dfcd <getFromFileDescriptor(int)>
c0016af8:	83 c4 10             	add    esp,0x10
c0016afb:	89 c3                	mov    ebx,eax
c0016afd:	85 db                	test   ebx,ebx
c0016aff:	75 bb                	jne    c0016abc <sysCallTTYName(regs*)+0x28>
c0016b01:	59                   	pop    ecx
c0016b02:	b8 01 00 00 00       	mov    eax,0x1
c0016b07:	31 d2                	xor    edx,edx
c0016b09:	5b                   	pop    ebx
c0016b0a:	5e                   	pop    esi
c0016b0b:	c3                   	ret    
c0016b0c:	59                   	pop    ecx
c0016b0d:	b8 02 00 00 00       	mov    eax,0x2
c0016b12:	31 d2                	xor    edx,edx
c0016b14:	5b                   	pop    ebx
c0016b15:	5e                   	pop    esi
c0016b16:	c3                   	ret    

c0016b17 <sysCallGetEnv(regs*)>:
c0016b17:	83 ec 0c             	sub    esp,0xc
c0016b1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b1e:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0016b21:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016b24:	85 c9                	test   ecx,ecx
c0016b26:	75 22                	jne    c0016b4a <sysCallGetEnv(regs*)+0x33>
c0016b28:	85 d2                	test   edx,edx
c0016b2a:	74 08                	je     c0016b34 <sysCallGetEnv(regs*)+0x1d>
c0016b2c:	31 c0                	xor    eax,eax
c0016b2e:	31 d2                	xor    edx,edx
c0016b30:	83 c4 0c             	add    esp,0xc
c0016b33:	c3                   	ret    
c0016b34:	83 ec 0c             	sub    esp,0xc
c0016b37:	68 98 26 02 c0       	push   0xc0022698
c0016b3c:	e8 96 9b fe ff       	call   c00006d7 <strlen>
c0016b41:	83 c4 10             	add    esp,0x10
c0016b44:	31 d2                	xor    edx,edx
c0016b46:	83 c4 0c             	add    esp,0xc
c0016b49:	c3                   	ret    
c0016b4a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016b4d:	85 d2                	test   edx,edx
c0016b4f:	74 05                	je     c0016b56 <sysCallGetEnv(regs*)+0x3f>
c0016b51:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016b54:	eb d6                	jmp    c0016b2c <sysCallGetEnv(regs*)+0x15>
c0016b56:	83 ec 08             	sub    esp,0x8
c0016b59:	68 98 26 02 c0       	push   0xc0022698
c0016b5e:	50                   	push   eax
c0016b5f:	e8 f5 9b fe ff       	call   c0000759 <strcpy>
c0016b64:	83 c4 10             	add    esp,0x10
c0016b67:	eb c3                	jmp    c0016b2c <sysCallGetEnv(regs*)+0x15>

c0016b69 <sysCallUSleep(regs*)>:
c0016b69:	83 ec 14             	sub    esp,0x14
c0016b6c:	b8 e8 03 00 00       	mov    eax,0x3e8
c0016b71:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016b75:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0016b7c:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0016b7f:	01 ca                	add    edx,ecx
c0016b81:	52                   	push   edx
c0016b82:	50                   	push   eax
c0016b83:	e8 9e 21 00 00       	call   c0018d26 <nanoSleep(unsigned long long)>
c0016b88:	31 c0                	xor    eax,eax
c0016b8a:	31 d2                	xor    edx,edx
c0016b8c:	83 c4 1c             	add    esp,0x1c
c0016b8f:	c3                   	ret    

c0016b90 <sysCallSpawn(regs*)>:
c0016b90:	56                   	push   esi
c0016b91:	53                   	push   ebx
c0016b92:	53                   	push   ebx
c0016b93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016b97:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0016b9a:	85 f6                	test   esi,esi
c0016b9c:	75 08                	jne    c0016ba6 <sysCallSpawn(regs*)+0x16>
c0016b9e:	59                   	pop    ecx
c0016b9f:	31 c0                	xor    eax,eax
c0016ba1:	31 d2                	xor    edx,edx
c0016ba3:	5b                   	pop    ebx
c0016ba4:	5e                   	pop    esi
c0016ba5:	c3                   	ret    
c0016ba6:	83 ec 0c             	sub    esp,0xc
c0016ba9:	68 3b 07 00 00       	push   0x73b
c0016bae:	e8 53 84 ff ff       	call   c000f006 <operator new(unsigned long)>
c0016bb3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016bb6:	89 c6                	mov    esi,eax
c0016bb8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bbd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016bc0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016bc3:	56                   	push   esi
c0016bc4:	e8 bd 18 00 00       	call   c0018486 <Process::Process(char const*, Process*, char**)>
c0016bc9:	83 c4 20             	add    esp,0x20
c0016bcc:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0016bd3:	75 c9                	jne    c0016b9e <sysCallSpawn(regs*)+0xe>
c0016bd5:	83 ec 0c             	sub    esp,0xc
c0016bd8:	56                   	push   esi
c0016bd9:	e8 0e 1e 00 00       	call   c00189ec <Process::createUserThread()>
c0016bde:	8b 06                	mov    eax,DWORD PTR [esi]
c0016be0:	83 c4 10             	add    esp,0x10
c0016be3:	99                   	cdq    
c0016be4:	59                   	pop    ecx
c0016be5:	5b                   	pop    ebx
c0016be6:	5e                   	pop    esi
c0016be7:	c3                   	ret    

c0016be8 <sysAppSettings(regs*)>:
c0016be8:	53                   	push   ebx
c0016be9:	83 ec 08             	sub    esp,0x8
c0016bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bf0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0016bf3:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c0016bf9:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016bfe:	66 3d c0 09          	cmp    ax,0x9c0
c0016c02:	75 2f                	jne    c0016c33 <sysAppSettings(regs*)+0x4b>
c0016c04:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0016c0a:	83 e0 1f             	and    eax,0x1f
c0016c0d:	3c 01                	cmp    al,0x1
c0016c0f:	74 2e                	je     c0016c3f <sysAppSettings(regs*)+0x57>
c0016c11:	3c 07                	cmp    al,0x7
c0016c13:	0f 84 bd 00 00 00    	je     c0016cd6 <sysAppSettings(regs*)+0xee>
c0016c19:	84 c0                	test   al,al
c0016c1b:	0f 84 dc 00 00 00    	je     c0016cfd <sysAppSettings(regs*)+0x115>
c0016c21:	3c 08                	cmp    al,0x8
c0016c23:	74 6d                	je     c0016c92 <sysAppSettings(regs*)+0xaa>
c0016c25:	0f b6 c0             	movzx  eax,al
c0016c28:	83 c4 08             	add    esp,0x8
c0016c2b:	05 e8 03 00 00       	add    eax,0x3e8
c0016c30:	5b                   	pop    ebx
c0016c31:	99                   	cdq    
c0016c32:	c3                   	ret    
c0016c33:	b8 01 00 00 00       	mov    eax,0x1
c0016c38:	31 d2                	xor    edx,edx
c0016c3a:	83 c4 08             	add    esp,0x8
c0016c3d:	5b                   	pop    ebx
c0016c3e:	c3                   	ret    
c0016c3f:	51                   	push   ecx
c0016c40:	68 00 01 00 00       	push   0x100
c0016c45:	6a 00                	push   0x0
c0016c47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c4c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016c4f:	83 c0 0c             	add    eax,0xc
c0016c52:	50                   	push   eax
c0016c53:	e8 62 9a fe ff       	call   c00006ba <memset>
c0016c58:	83 c4 0c             	add    esp,0xc
c0016c5b:	68 ff 00 00 00       	push   0xff
c0016c60:	53                   	push   ebx
c0016c61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c66:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016c69:	83 c0 0c             	add    eax,0xc
c0016c6c:	50                   	push   eax
c0016c6d:	e8 12 9a fe ff       	call   c0000684 <memcpy>
c0016c72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c77:	5b                   	pop    ebx
c0016c78:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016c7b:	5a                   	pop    edx
c0016c7c:	8d 50 0c             	lea    edx,[eax+0xc]
c0016c7f:	52                   	push   edx
c0016c80:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0016c86:	e8 21 65 ff ff       	call   c000d1ac <VgaText::setTitle(char*)>
c0016c8b:	83 c4 10             	add    esp,0x10
c0016c8e:	31 c0                	xor    eax,eax
c0016c90:	eb a6                	jmp    c0016c38 <sysAppSettings(regs*)+0x50>
c0016c92:	83 ec 08             	sub    esp,0x8
c0016c95:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016c9b:	83 e0 0f             	and    eax,0xf
c0016c9e:	50                   	push   eax
c0016c9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ca4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ca7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0016cad:	e8 ea 64 ff ff       	call   c000d19c <VgaText::setTitleColour(VgaColour)>
c0016cb2:	58                   	pop    eax
c0016cb3:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016cb9:	5a                   	pop    edx
c0016cba:	c1 e8 04             	shr    eax,0x4
c0016cbd:	83 e0 0f             	and    eax,0xf
c0016cc0:	50                   	push   eax
c0016cc1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cc6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016cc9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0016ccf:	e8 b8 64 ff ff       	call   c000d18c <VgaText::setTitleTextColour(VgaColour)>
c0016cd4:	eb b5                	jmp    c0016c8b <sysAppSettings(regs*)+0xa3>
c0016cd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cdb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016cde:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0016ce4:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0016cea:	c0 e8 06             	shr    al,0x6
c0016ced:	83 e0 01             	and    eax,0x1
c0016cf0:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0016cf6:	31 c0                	xor    eax,eax
c0016cf8:	e9 3b ff ff ff       	jmp    c0016c38 <sysAppSettings(regs*)+0x50>
c0016cfd:	b8 02 00 00 00       	mov    eax,0x2
c0016d02:	e9 31 ff ff ff       	jmp    c0016c38 <sysAppSettings(regs*)+0x50>

c0016d07 <sysSetFatAttrib(regs*)>:
c0016d07:	57                   	push   edi
c0016d08:	56                   	push   esi
c0016d09:	53                   	push   ebx
c0016d0a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016d0e:	83 ec 0c             	sub    esp,0xc
c0016d11:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016d14:	68 14 01 00 00       	push   0x114
c0016d19:	e8 e8 82 ff ff       	call   c000f006 <operator new(unsigned long)>
c0016d1e:	83 c4 0c             	add    esp,0xc
c0016d21:	89 c3                	mov    ebx,eax
c0016d23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d28:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016d2b:	57                   	push   edi
c0016d2c:	53                   	push   ebx
c0016d2d:	e8 f2 88 ff ff       	call   c000f624 <File::File(char const*, Process*)>
c0016d32:	83 c4 0c             	add    esp,0xc
c0016d35:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016d38:	0f b6 d4             	movzx  edx,ah
c0016d3b:	0f b6 c0             	movzx  eax,al
c0016d3e:	52                   	push   edx
c0016d3f:	50                   	push   eax
c0016d40:	53                   	push   ebx
c0016d41:	e8 54 8b ff ff       	call   c000f89a <File::chfatattr(unsigned char, unsigned char)>
c0016d46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016d49:	89 c6                	mov    esi,eax
c0016d4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d4d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016d50:	83 c4 10             	add    esp,0x10
c0016d53:	31 c0                	xor    eax,eax
c0016d55:	5b                   	pop    ebx
c0016d56:	85 f6                	test   esi,esi
c0016d58:	5e                   	pop    esi
c0016d59:	0f 95 c0             	setne  al
c0016d5c:	5f                   	pop    edi
c0016d5d:	31 d2                	xor    edx,edx
c0016d5f:	f7 d8                	neg    eax
c0016d61:	83 d2 00             	adc    edx,0x0
c0016d64:	f7 da                	neg    edx
c0016d66:	c3                   	ret    

c0016d67 <sysPanic(regs*)>:
c0016d67:	83 ec 18             	sub    esp,0x18
c0016d6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d6e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016d71:	e8 14 eb ff ff       	call   c001588a <Krnl::panic(char const*)>
c0016d76:	c7 04 24 4f 27 02 c0 	mov    DWORD PTR [esp],0xc002274f
c0016d7d:	e8 08 eb ff ff       	call   c001588a <Krnl::panic(char const*)>
c0016d82:	b8 01 00 00 00       	mov    eax,0x1
c0016d87:	31 d2                	xor    edx,edx
c0016d89:	83 c4 1c             	add    esp,0x1c
c0016d8c:	c3                   	ret    

c0016d8d <sysPipe(regs*)>:
c0016d8d:	57                   	push   edi
c0016d8e:	56                   	push   esi
c0016d8f:	53                   	push   ebx
c0016d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d94:	83 ec 0c             	sub    esp,0xc
c0016d97:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016d9a:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016d9d:	6a 20                	push   0x20
c0016d9f:	e8 62 82 ff ff       	call   c000f006 <operator new(unsigned long)>
c0016da4:	89 c3                	mov    ebx,eax
c0016da6:	58                   	pop    eax
c0016da7:	5a                   	pop    edx
c0016da8:	68 00 50 00 00       	push   0x5000
c0016dad:	53                   	push   ebx
c0016dae:	e8 37 5d ff ff       	call   c000caea <Pipe::Pipe(int)>
c0016db3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016db6:	e8 5d 6f ff ff       	call   c000dd18 <UnixFile::getFileDescriptor()>
c0016dbb:	89 07                	mov    DWORD PTR [edi],eax
c0016dbd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016dc0:	e8 53 6f ff ff       	call   c000dd18 <UnixFile::getFileDescriptor()>
c0016dc5:	83 c4 10             	add    esp,0x10
c0016dc8:	89 06                	mov    DWORD PTR [esi],eax
c0016dca:	31 d2                	xor    edx,edx
c0016dcc:	5b                   	pop    ebx
c0016dcd:	31 c0                	xor    eax,eax
c0016dcf:	5e                   	pop    esi
c0016dd0:	5f                   	pop    edi
c0016dd1:	c3                   	ret    

c0016dd2 <sysGetUnixTime(regs*)>:
c0016dd2:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c0016dd7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016ddd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016de1:	e9 06 92 ff ff       	jmp    c000ffec <Clock::timeInSecondsLocal()>

c0016de6 <string_ends_with(char const*, char const*)>:
c0016de6:	57                   	push   edi
c0016de7:	56                   	push   esi
c0016de8:	53                   	push   ebx
c0016de9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016ded:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016df1:	83 ec 0c             	sub    esp,0xc
c0016df4:	53                   	push   ebx
c0016df5:	e8 dd 98 fe ff       	call   c00006d7 <strlen>
c0016dfa:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016dfd:	89 c6                	mov    esi,eax
c0016dff:	e8 d3 98 fe ff       	call   c00006d7 <strlen>
c0016e04:	83 c4 10             	add    esp,0x10
c0016e07:	39 c6                	cmp    esi,eax
c0016e09:	7d 06                	jge    c0016e11 <string_ends_with(char const*, char const*)+0x2b>
c0016e0b:	5b                   	pop    ebx
c0016e0c:	31 c0                	xor    eax,eax
c0016e0e:	5e                   	pop    esi
c0016e0f:	5f                   	pop    edi
c0016e10:	c3                   	ret    
c0016e11:	83 ec 08             	sub    esp,0x8
c0016e14:	29 c6                	sub    esi,eax
c0016e16:	57                   	push   edi
c0016e17:	01 f3                	add    ebx,esi
c0016e19:	53                   	push   ebx
c0016e1a:	e8 8b 99 fe ff       	call   c00007aa <strcmp>
c0016e1f:	83 c4 10             	add    esp,0x10
c0016e22:	85 c0                	test   eax,eax
c0016e24:	5b                   	pop    ebx
c0016e25:	0f 94 c0             	sete   al
c0016e28:	5e                   	pop    esi
c0016e29:	0f b6 c0             	movzx  eax,al
c0016e2c:	5f                   	pop    edi
c0016e2d:	c3                   	ret    

c0016e2e <sysCallOpen(regs*)>:
c0016e2e:	56                   	push   esi
c0016e2f:	53                   	push   ebx
c0016e30:	81 ec 04 01 00 00    	sub    esp,0x104
c0016e36:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016e3d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016e40:	85 c9                	test   ecx,ecx
c0016e42:	0f 84 b3 00 00 00    	je     c0016efb <sysCallOpen(regs*)+0xcd>
c0016e48:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016e4b:	85 c0                	test   eax,eax
c0016e4d:	0f 84 a8 00 00 00    	je     c0016efb <sysCallOpen(regs*)+0xcd>
c0016e53:	52                   	push   edx
c0016e54:	68 5e 27 02 c0       	push   0xc002275e
c0016e59:	50                   	push   eax
c0016e5a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016e5e:	56                   	push   esi
c0016e5f:	e8 16 86 ff ff       	call   c000f47a <standardiseFiles(char*, char const*, char const*)>
c0016e64:	89 34 24             	mov    DWORD PTR [esp],esi
c0016e67:	e8 6b 98 fe ff       	call   c00006d7 <strlen>
c0016e6c:	83 c4 10             	add    esp,0x10
c0016e6f:	48                   	dec    eax
c0016e70:	74 1d                	je     c0016e8f <sysCallOpen(regs*)+0x61>
c0016e72:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016e75:	eb 0f                	jmp    c0016e86 <sysCallOpen(regs*)+0x58>
c0016e77:	80 fa 3a             	cmp    dl,0x3a
c0016e7a:	74 0f                	je     c0016e8b <sysCallOpen(regs*)+0x5d>
c0016e7c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016e80:	48                   	dec    eax
c0016e81:	74 0c                	je     c0016e8f <sysCallOpen(regs*)+0x61>
c0016e83:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016e86:	80 fa 2e             	cmp    dl,0x2e
c0016e89:	75 ec                	jne    c0016e77 <sysCallOpen(regs*)+0x49>
c0016e8b:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0016e8f:	83 ec 08             	sub    esp,0x8
c0016e92:	68 62 27 02 c0       	push   0xc0022762
c0016e97:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016e9a:	e8 47 ff ff ff       	call   c0016de6 <string_ends_with(char const*, char const*)>
c0016e9f:	83 c4 10             	add    esp,0x10
c0016ea2:	85 c0                	test   eax,eax
c0016ea4:	75 17                	jne    c0016ebd <sysCallOpen(regs*)+0x8f>
c0016ea6:	83 ec 08             	sub    esp,0x8
c0016ea9:	68 83 27 02 c0       	push   0xc0022783
c0016eae:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016eb1:	e8 30 ff ff ff       	call   c0016de6 <string_ends_with(char const*, char const*)>
c0016eb6:	83 c4 10             	add    esp,0x10
c0016eb9:	85 c0                	test   eax,eax
c0016ebb:	74 51                	je     c0016f0e <sysCallOpen(regs*)+0xe0>
c0016ebd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016ec0:	83 ec 08             	sub    esp,0x8
c0016ec3:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016ec9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016ed0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016ed3:	ff 30                	push   DWORD PTR [eax]
c0016ed5:	68 67 27 02 c0       	push   0xc0022767
c0016eda:	e8 16 82 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0016edf:	c7 04 24 76 27 02 c0 	mov    DWORD PTR [esp],0xc0022776
c0016ee6:	e8 0a 82 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0016eeb:	83 c4 10             	add    esp,0x10
c0016eee:	81 c4 04 01 00 00    	add    esp,0x104
c0016ef4:	31 c0                	xor    eax,eax
c0016ef6:	31 d2                	xor    edx,edx
c0016ef8:	5b                   	pop    ebx
c0016ef9:	5e                   	pop    esi
c0016efa:	c3                   	ret    
c0016efb:	81 c4 04 01 00 00    	add    esp,0x104
c0016f01:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016f06:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016f0b:	5b                   	pop    ebx
c0016f0c:	5e                   	pop    esi
c0016f0d:	c3                   	ret    
c0016f0e:	83 ec 08             	sub    esp,0x8
c0016f11:	68 63 27 02 c0       	push   0xc0022763
c0016f16:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f19:	e8 8c 98 fe ff       	call   c00007aa <strcmp>
c0016f1e:	83 c4 10             	add    esp,0x10
c0016f21:	85 c0                	test   eax,eax
c0016f23:	74 98                	je     c0016ebd <sysCallOpen(regs*)+0x8f>
c0016f25:	83 ec 08             	sub    esp,0x8
c0016f28:	68 62 27 02 c0       	push   0xc0022762
c0016f2d:	56                   	push   esi
c0016f2e:	e8 b3 fe ff ff       	call   c0016de6 <string_ends_with(char const*, char const*)>
c0016f33:	83 c4 10             	add    esp,0x10
c0016f36:	85 c0                	test   eax,eax
c0016f38:	75 83                	jne    c0016ebd <sysCallOpen(regs*)+0x8f>
c0016f3a:	83 ec 08             	sub    esp,0x8
c0016f3d:	68 88 27 02 c0       	push   0xc0022788
c0016f42:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f45:	e8 9c fe ff ff       	call   c0016de6 <string_ends_with(char const*, char const*)>
c0016f4a:	83 c4 10             	add    esp,0x10
c0016f4d:	85 c0                	test   eax,eax
c0016f4f:	0f 85 d1 00 00 00    	jne    c0017026 <sysCallOpen(regs*)+0x1f8>
c0016f55:	83 ec 08             	sub    esp,0x8
c0016f58:	68 8d 27 02 c0       	push   0xc002278d
c0016f5d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f60:	e8 81 fe ff ff       	call   c0016de6 <string_ends_with(char const*, char const*)>
c0016f65:	83 c4 10             	add    esp,0x10
c0016f68:	85 c0                	test   eax,eax
c0016f6a:	0f 85 b6 00 00 00    	jne    c0017026 <sysCallOpen(regs*)+0x1f8>
c0016f70:	83 ec 08             	sub    esp,0x8
c0016f73:	68 89 27 02 c0       	push   0xc0022789
c0016f78:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f7b:	e8 2a 98 fe ff       	call   c00007aa <strcmp>
c0016f80:	83 c4 10             	add    esp,0x10
c0016f83:	85 c0                	test   eax,eax
c0016f85:	0f 84 9b 00 00 00    	je     c0017026 <sysCallOpen(regs*)+0x1f8>
c0016f8b:	83 ec 08             	sub    esp,0x8
c0016f8e:	68 88 27 02 c0       	push   0xc0022788
c0016f93:	56                   	push   esi
c0016f94:	e8 4d fe ff ff       	call   c0016de6 <string_ends_with(char const*, char const*)>
c0016f99:	83 c4 10             	add    esp,0x10
c0016f9c:	85 c0                	test   eax,eax
c0016f9e:	0f 85 82 00 00 00    	jne    c0017026 <sysCallOpen(regs*)+0x1f8>
c0016fa4:	83 ec 0c             	sub    esp,0xc
c0016fa7:	68 14 01 00 00       	push   0x114
c0016fac:	e8 55 80 ff ff       	call   c000f006 <operator new(unsigned long)>
c0016fb1:	83 c4 0c             	add    esp,0xc
c0016fb4:	89 c6                	mov    esi,eax
c0016fb6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fbb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016fbe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016fc1:	56                   	push   esi
c0016fc2:	e8 5d 86 ff ff       	call   c000f624 <File::File(char const*, Process*)>
c0016fc7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016fca:	83 c4 10             	add    esp,0x10
c0016fcd:	0f b6 c2             	movzx  eax,dl
c0016fd0:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0016fd3:	89 d0                	mov    eax,edx
c0016fd5:	83 e0 01             	and    eax,0x1
c0016fd8:	f6 c2 02             	test   dl,0x2
c0016fdb:	74 03                	je     c0016fe0 <sysCallOpen(regs*)+0x1b2>
c0016fdd:	83 c8 02             	or     eax,0x2
c0016fe0:	f6 c2 04             	test   dl,0x4
c0016fe3:	74 03                	je     c0016fe8 <sysCallOpen(regs*)+0x1ba>
c0016fe5:	83 c8 04             	or     eax,0x4
c0016fe8:	f6 c2 08             	test   dl,0x8
c0016feb:	74 03                	je     c0016ff0 <sysCallOpen(regs*)+0x1c2>
c0016fed:	83 c8 0a             	or     eax,0xa
c0016ff0:	83 e2 10             	and    edx,0x10
c0016ff3:	74 03                	je     c0016ff8 <sysCallOpen(regs*)+0x1ca>
c0016ff5:	83 c8 12             	or     eax,0x12
c0016ff8:	83 ec 08             	sub    esp,0x8
c0016ffb:	50                   	push   eax
c0016ffc:	56                   	push   esi
c0016ffd:	e8 86 86 ff ff       	call   c000f688 <File::open(FileOpenMode)>
c0017002:	83 c4 10             	add    esp,0x10
c0017005:	85 c0                	test   eax,eax
c0017007:	0f 85 ee fe ff ff    	jne    c0016efb <sysCallOpen(regs*)+0xcd>
c001700d:	83 ec 0c             	sub    esp,0xc
c0017010:	56                   	push   esi
c0017011:	e8 02 6d ff ff       	call   c000dd18 <UnixFile::getFileDescriptor()>
c0017016:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0017019:	89 02                	mov    DWORD PTR [edx],eax
c001701b:	c1 f8 1f             	sar    eax,0x1f
c001701e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017021:	e9 c5 fe ff ff       	jmp    c0016eeb <sysCallOpen(regs*)+0xbd>
c0017026:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017029:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001702f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017036:	e9 b3 fe ff ff       	jmp    c0016eee <sysCallOpen(regs*)+0xc0>

c001703b <setupSystemCalls()>:
c001703b:	c7 05 40 4d 02 c0 97 62 01 c0 	mov    DWORD PTR ds:0xc0024d40,0xc0016297
c0017045:	c7 05 44 4d 02 c0 c5 60 01 c0 	mov    DWORD PTR ds:0xc0024d44,0xc00160c5
c001704f:	c7 05 48 4d 02 c0 da 61 01 c0 	mov    DWORD PTR ds:0xc0024d48,0xc00161da
c0017059:	c7 05 4c 4d 02 c0 2f 62 01 c0 	mov    DWORD PTR ds:0xc0024d4c,0xc001622f
c0017063:	c7 05 50 4d 02 c0 72 61 01 c0 	mov    DWORD PTR ds:0xc0024d50,0xc0016172
c001706d:	c7 05 54 4d 02 c0 b1 62 01 c0 	mov    DWORD PTR ds:0xc0024d54,0xc00162b1
c0017077:	c7 05 58 4d 02 c0 56 64 01 c0 	mov    DWORD PTR ds:0xc0024d58,0xc0016456
c0017081:	c7 05 5c 4d 02 c0 75 64 01 c0 	mov    DWORD PTR ds:0xc0024d5c,0xc0016475
c001708b:	c7 05 64 4d 02 c0 d6 67 01 c0 	mov    DWORD PTR ds:0xc0024d64,0xc00167d6
c0017095:	c7 05 60 4d 02 c0 2e 6e 01 c0 	mov    DWORD PTR ds:0xc0024d60,0xc0016e2e
c001709f:	c7 05 68 4d 02 c0 5e 68 01 c0 	mov    DWORD PTR ds:0xc0024d68,0xc001685e
c00170a9:	c7 05 6c 4d 02 c0 d4 64 01 c0 	mov    DWORD PTR ds:0xc0024d6c,0xc00164d4
c00170b3:	c7 05 70 4d 02 c0 bd 62 01 c0 	mov    DWORD PTR ds:0xc0024d70,0xc00162bd
c00170bd:	c7 05 74 4d 02 c0 c2 62 01 c0 	mov    DWORD PTR ds:0xc0024d74,0xc00162c2
c00170c7:	c7 05 78 4d 02 c0 cb 68 01 c0 	mov    DWORD PTR ds:0xc0024d78,0xc00168cb
c00170d1:	c7 05 7c 4d 02 c0 24 69 01 c0 	mov    DWORD PTR ds:0xc0024d7c,0xc0016924
c00170db:	c7 05 80 4d 02 c0 bc 65 01 c0 	mov    DWORD PTR ds:0xc0024d80,0xc00165bc
c00170e5:	c7 05 84 4d 02 c0 25 66 01 c0 	mov    DWORD PTR ds:0xc0024d84,0xc0016625
c00170ef:	c7 05 88 4d 02 c0 53 67 01 c0 	mov    DWORD PTR ds:0xc0024d88,0xc0016753
c00170f9:	c7 05 8c 4d 02 c0 c7 62 01 c0 	mov    DWORD PTR ds:0xc0024d8c,0xc00162c7
c0017103:	c7 05 90 4d 02 c0 8a 69 01 c0 	mov    DWORD PTR ds:0xc0024d90,0xc001698a
c001710d:	c7 05 94 4d 02 c0 d1 62 01 c0 	mov    DWORD PTR ds:0xc0024d94,0xc00162d1
c0017117:	c7 05 98 4d 02 c0 dc 62 01 c0 	mov    DWORD PTR ds:0xc0024d98,0xc00162dc
c0017121:	c7 05 9c 4d 02 c0 a4 69 01 c0 	mov    DWORD PTR ds:0xc0024d9c,0xc00169a4
c001712b:	c7 05 a0 4d 02 c0 f6 69 01 c0 	mov    DWORD PTR ds:0xc0024da0,0xc00169f6
c0017135:	c7 05 a4 4d 02 c0 e7 62 01 c0 	mov    DWORD PTR ds:0xc0024da4,0xc00162e7
c001713f:	c7 05 a8 4d 02 c0 48 6a 01 c0 	mov    DWORD PTR ds:0xc0024da8,0xc0016a48
c0017149:	c7 05 ac 4d 02 c0 91 64 01 c0 	mov    DWORD PTR ds:0xc0024dac,0xc0016491
c0017153:	c7 05 b0 4d 02 c0 94 6a 01 c0 	mov    DWORD PTR ds:0xc0024db0,0xc0016a94
c001715d:	c7 05 b4 4d 02 c0 62 65 01 c0 	mov    DWORD PTR ds:0xc0024db4,0xc0016562
c0017167:	c7 05 b8 4d 02 c0 69 6b 01 c0 	mov    DWORD PTR ds:0xc0024db8,0xc0016b69
c0017171:	c7 05 bc 4d 02 c0 a2 66 01 c0 	mov    DWORD PTR ds:0xc0024dbc,0xc00166a2
c001717b:	c7 05 c0 4d 02 c0 90 6b 01 c0 	mov    DWORD PTR ds:0xc0024dc0,0xc0016b90
c0017185:	c7 05 c4 4d 02 c0 17 6b 01 c0 	mov    DWORD PTR ds:0xc0024dc4,0xc0016b17
c001718f:	c7 05 c8 4d 02 c0 e8 6b 01 c0 	mov    DWORD PTR ds:0xc0024dc8,0xc0016be8
c0017199:	c7 05 cc 4d 02 c0 f7 62 01 c0 	mov    DWORD PTR ds:0xc0024dcc,0xc00162f7
c00171a3:	c7 05 d0 4d 02 c0 61 63 01 c0 	mov    DWORD PTR ds:0xc0024dd0,0xc0016361
c00171ad:	c7 05 d4 4d 02 c0 a7 63 01 c0 	mov    DWORD PTR ds:0xc0024dd4,0xc00163a7
c00171b7:	c7 05 d8 4d 02 c0 07 6d 01 c0 	mov    DWORD PTR ds:0xc0024dd8,0xc0016d07
c00171c1:	c7 05 dc 4d 02 c0 67 6d 01 c0 	mov    DWORD PTR ds:0xc0024ddc,0xc0016d67
c00171cb:	c7 05 e0 4d 02 c0 f8 63 01 c0 	mov    DWORD PTR ds:0xc0024de0,0xc00163f8
c00171d5:	c7 05 e4 4d 02 c0 8d 6d 01 c0 	mov    DWORD PTR ds:0xc0024de4,0xc0016d8d
c00171df:	c7 05 e8 4d 02 c0 d2 6d 01 c0 	mov    DWORD PTR ds:0xc0024de8,0xc0016dd2
c00171e9:	c7 05 ec 4d 02 c0 dd 60 01 c0 	mov    DWORD PTR ds:0xc0024dec,0xc00160dd
c00171f3:	c3                   	ret    

c00171f4 <systemCall(regs*, void*)>:
c00171f4:	53                   	push   ebx
c00171f5:	83 ec 08             	sub    esp,0x8
c00171f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00171fc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00171ff:	83 f8 7f             	cmp    eax,0x7f
c0017202:	77 16                	ja     c001721a <systemCall(regs*, void*)+0x26>
c0017204:	8b 14 85 40 4d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb2c0]
c001720b:	85 d2                	test   edx,edx
c001720d:	74 0b                	je     c001721a <systemCall(regs*, void*)+0x26>
c001720f:	83 ec 0c             	sub    esp,0xc
c0017212:	53                   	push   ebx
c0017213:	ff d2                	call   edx
c0017215:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017218:	eb 0d                	jmp    c0017227 <systemCall(regs*, void*)+0x33>
c001721a:	52                   	push   edx
c001721b:	52                   	push   edx
c001721c:	50                   	push   eax
c001721d:	68 92 27 02 c0       	push   0xc0022792
c0017222:	e8 ce 7e ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0017227:	83 c4 10             	add    esp,0x10
c001722a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001722f:	31 d2                	xor    edx,edx
c0017231:	83 c4 08             	add    esp,0x8
c0017234:	5b                   	pop    ebx
c0017235:	c3                   	ret    

c0017236 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0017236:	55                   	push   ebp
c0017237:	89 e5                	mov    ebp,esp
c0017239:	57                   	push   edi
c001723a:	56                   	push   esi
c001723b:	53                   	push   ebx
c001723c:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0017242:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017245:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0017248:	85 c0                	test   eax,eax
c001724a:	0f 95 c1             	setne  cl
c001724d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0017251:	0f 94 c2             	sete   dl
c0017254:	84 d1                	test   cl,dl
c0017256:	74 26                	je     c001727e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c0017258:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001725f:	74 1d                	je     c001727e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c0017261:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0017264:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001726a:	89 d6                	mov    esi,edx
c001726c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017272:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c0017278:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001727b:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001727e:	83 ec 0c             	sub    esp,0xc
c0017281:	05 ff 0f 00 00       	add    eax,0xfff
c0017286:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0017289:	6a 01                	push   0x1
c001728b:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c0017291:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c0017297:	e8 87 6e ff ff       	call   c000e123 <Virt::allocateKernelVirtualPages(int)>
c001729c:	83 c4 10             	add    esp,0x10
c001729f:	89 c6                	mov    esi,eax
c00172a1:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c00172a7:	0f 86 21 01 00 00    	jbe    c00173ce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c00172ad:	c1 eb 0c             	shr    ebx,0xc
c00172b0:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c00172ba:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c00172c0:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00172c3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00172c6:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c00172cc:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c00172cf:	29 d8                	sub    eax,ebx
c00172d1:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c00172d7:	0f 83 f4 00 00 00    	jae    c00173d1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c00172dd:	83 ec 0c             	sub    esp,0xc
c00172e0:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c00172e6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00172e9:	3d 00 10 00 00       	cmp    eax,0x1000
c00172ee:	8b 09                	mov    ecx,DWORD PTR [ecx]
c00172f0:	52                   	push   edx
c00172f1:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c00172f7:	52                   	push   edx
c00172f8:	76 05                	jbe    c00172ff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c00172fa:	b8 00 10 00 00       	mov    eax,0x1000
c00172ff:	31 d2                	xor    edx,edx
c0017301:	52                   	push   edx
c0017302:	50                   	push   eax
c0017303:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0017306:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017309:	83 c4 20             	add    esp,0x20
c001730c:	85 c0                	test   eax,eax
c001730e:	74 1f                	je     c001732f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c0017310:	51                   	push   ecx
c0017311:	51                   	push   ecx
c0017312:	50                   	push   eax
c0017313:	68 a6 27 02 c0       	push   0xc00227a6
c0017318:	e8 d8 7d ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001731d:	89 34 24             	mov    DWORD PTR [esp],esi
c0017320:	e8 58 71 ff ff       	call   c000e47d <Virt::freeKernelVirtualPages(unsigned long)>
c0017325:	83 c4 10             	add    esp,0x10
c0017328:	31 c0                	xor    eax,eax
c001732a:	e9 7c 01 00 00       	jmp    c00174ab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001732f:	e8 aa 14 00 00       	call   c00187de <lockScheduler()>
c0017334:	e8 75 52 ff ff       	call   c000c5ae <Phys::allocatePage()>
c0017339:	6a 07                	push   0x7
c001733b:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c0017341:	56                   	push   esi
c0017342:	50                   	push   eax
c0017343:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017349:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001734c:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c0017352:	e8 9f 74 ff ff       	call   c000e7f6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0017357:	83 c4 0c             	add    esp,0xc
c001735a:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0017360:	6a 00                	push   0x0
c0017362:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017368:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001736b:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c0017371:	e8 de 72 ff ff       	call   c000e654 <VAS::mapOtherVASIn(bool, VAS*)>
c0017376:	58                   	pop    eax
c0017377:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001737d:	5a                   	pop    edx
c001737e:	68 07 04 00 00       	push   0x407
c0017383:	53                   	push   ebx
c0017384:	81 c3 00 10 00 00    	add    ebx,0x1000
c001738a:	50                   	push   eax
c001738b:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0017391:	6a 00                	push   0x0
c0017393:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017398:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001739b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00173a1:	e8 06 78 ff ff       	call   c000ebac <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00173a6:	83 c4 1c             	add    esp,0x1c
c00173a9:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c00173af:	68 00 10 00 00       	push   0x1000
c00173b4:	50                   	push   eax
c00173b5:	56                   	push   esi
c00173b6:	e8 c9 92 fe ff       	call   c0000684 <memcpy>
c00173bb:	e8 20 14 00 00       	call   c00187e0 <unlockScheduler()>
c00173c0:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c00173c6:	83 c4 10             	add    esp,0x10
c00173c9:	e9 f5 fe ff ff       	jmp    c00172c3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c00173ce:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00173d1:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c00173db:	0f 86 bc 00 00 00    	jbe    c001749d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c00173e1:	e8 f8 13 00 00       	call   c00187de <lockScheduler()>
c00173e6:	51                   	push   ecx
c00173e7:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00173ed:	6a 00                	push   0x0
c00173ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00173f4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00173f7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00173fd:	e8 52 72 ff ff       	call   c000e654 <VAS::mapOtherVASIn(bool, VAS*)>
c0017402:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c0017408:	83 c4 10             	add    esp,0x10
c001740b:	c1 e8 0c             	shr    eax,0xc
c001740e:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c0017418:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001741e:	e8 8b 51 ff ff       	call   c000c5ae <Phys::allocatePage()>
c0017423:	6a 07                	push   0x7
c0017425:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001742b:	56                   	push   esi
c001742c:	50                   	push   eax
c001742d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017433:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0017436:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001743c:	e8 b5 73 ff ff       	call   c000e7f6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0017441:	58                   	pop    eax
c0017442:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c0017448:	5a                   	pop    edx
c0017449:	68 07 04 00 00       	push   0x407
c001744e:	53                   	push   ebx
c001744f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0017455:	50                   	push   eax
c0017456:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001745c:	6a 00                	push   0x0
c001745e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017463:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017466:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001746c:	e8 3b 77 ff ff       	call   c000ebac <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0017471:	83 c4 1c             	add    esp,0x1c
c0017474:	68 00 10 00 00       	push   0x1000
c0017479:	6a 00                	push   0x0
c001747b:	56                   	push   esi
c001747c:	e8 39 92 fe ff       	call   c00006ba <memset>
c0017481:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c0017487:	83 c4 10             	add    esp,0x10
c001748a:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c0017490:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c0017496:	77 86                	ja     c001741e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c0017498:	e8 43 13 00 00       	call   c00187e0 <unlockScheduler()>
c001749d:	83 ec 0c             	sub    esp,0xc
c00174a0:	56                   	push   esi
c00174a1:	e8 d7 6f ff ff       	call   c000e47d <Virt::freeKernelVirtualPages(unsigned long)>
c00174a6:	83 c4 10             	add    esp,0x10
c00174a9:	b0 01                	mov    al,0x1
c00174ab:	8d 65 f4             	lea    esp,[ebp-0xc]
c00174ae:	5b                   	pop    ebx
c00174af:	5e                   	pop    esi
c00174b0:	5f                   	pop    edi
c00174b1:	5d                   	pop    ebp
c00174b2:	c3                   	ret    

c00174b3 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00174b3:	55                   	push   ebp
c00174b4:	57                   	push   edi
c00174b5:	56                   	push   esi
c00174b6:	53                   	push   ebx
c00174b7:	83 ec 48             	sub    esp,0x48
c00174ba:	68 14 01 00 00       	push   0x114
c00174bf:	e8 42 7b ff ff       	call   c000f006 <operator new(unsigned long)>
c00174c4:	83 c4 0c             	add    esp,0xc
c00174c7:	89 c6                	mov    esi,eax
c00174c9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00174cd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00174d1:	50                   	push   eax
c00174d2:	e8 4d 81 ff ff       	call   c000f624 <File::File(char const*, Process*)>
c00174d7:	58                   	pop    eax
c00174d8:	5a                   	pop    edx
c00174d9:	6a 01                	push   0x1
c00174db:	56                   	push   esi
c00174dc:	e8 a7 81 ff ff       	call   c000f688 <File::open(FileOpenMode)>
c00174e1:	83 c4 10             	add    esp,0x10
c00174e4:	85 c0                	test   eax,eax
c00174e6:	0f 85 47 01 00 00    	jne    c0017633 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00174ec:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00174f4:	83 ec 0c             	sub    esp,0xc
c00174f7:	6a 34                	push   0x34
c00174f9:	e8 06 4b ff ff       	call   c000c004 <malloc>
c00174fe:	89 c3                	mov    ebx,eax
c0017500:	58                   	pop    eax
c0017501:	8b 06                	mov    eax,DWORD PTR [esi]
c0017503:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0017507:	57                   	push   edi
c0017508:	53                   	push   ebx
c0017509:	6a 00                	push   0x0
c001750b:	6a 34                	push   0x34
c001750d:	56                   	push   esi
c001750e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017511:	83 c4 20             	add    esp,0x20
c0017514:	85 c0                	test   eax,eax
c0017516:	0f 85 17 01 00 00    	jne    c0017633 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001751c:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0017522:	0f 85 0b 01 00 00    	jne    c0017633 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017528:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001752b:	85 c0                	test   eax,eax
c001752d:	0f 84 00 01 00 00    	je     c0017633 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017533:	31 d2                	xor    edx,edx
c0017535:	55                   	push   ebp
c0017536:	52                   	push   edx
c0017537:	50                   	push   eax
c0017538:	56                   	push   esi
c0017539:	e8 08 82 ff ff       	call   c000f746 <File::seek(unsigned long long)>
c001753e:	83 c4 10             	add    esp,0x10
c0017541:	85 c0                	test   eax,eax
c0017543:	0f 85 ea 00 00 00    	jne    c0017633 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017549:	83 ec 0c             	sub    esp,0xc
c001754c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001754f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0017553:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017557:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001755b:	0f af c2             	imul   eax,edx
c001755e:	50                   	push   eax
c001755f:	e8 a0 4a ff ff       	call   c000c004 <malloc>
c0017564:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017567:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001756b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001756d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017571:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0017575:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0017579:	0f af c2             	imul   eax,edx
c001757c:	99                   	cdq    
c001757d:	52                   	push   edx
c001757e:	50                   	push   eax
c001757f:	56                   	push   esi
c0017580:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017583:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0017586:	83 c4 20             	add    esp,0x20
c0017589:	85 c0                	test   eax,eax
c001758b:	0f 84 a2 00 00 00    	je     c0017633 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017591:	31 d2                	xor    edx,edx
c0017593:	51                   	push   ecx
c0017594:	52                   	push   edx
c0017595:	50                   	push   eax
c0017596:	56                   	push   esi
c0017597:	e8 aa 81 ff ff       	call   c000f746 <File::seek(unsigned long long)>
c001759c:	83 c4 10             	add    esp,0x10
c001759f:	85 c0                	test   eax,eax
c00175a1:	0f 85 8c 00 00 00    	jne    c0017633 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00175a7:	83 ec 0c             	sub    esp,0xc
c00175aa:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00175ae:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00175b2:	31 ed                	xor    ebp,ebp
c00175b4:	0f af c2             	imul   eax,edx
c00175b7:	50                   	push   eax
c00175b8:	e8 47 4a ff ff       	call   c000c004 <malloc>
c00175bd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00175c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00175c4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00175c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175ca:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00175ce:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00175d2:	0f af c2             	imul   eax,edx
c00175d5:	99                   	cdq    
c00175d6:	52                   	push   edx
c00175d7:	50                   	push   eax
c00175d8:	56                   	push   esi
c00175d9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00175dc:	83 c4 20             	add    esp,0x20
c00175df:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00175e7:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00175eb:	0f 86 80 00 00 00    	jbe    c0017671 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00175f1:	0f b7 fd             	movzx  edi,bp
c00175f4:	c1 e7 05             	shl    edi,0x5
c00175f7:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00175fb:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00175fe:	75 6b                	jne    c001766b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017600:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0017603:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017607:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001760a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001760e:	52                   	push   edx
c001760f:	31 d2                	xor    edx,edx
c0017611:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0017614:	52                   	push   edx
c0017615:	50                   	push   eax
c0017616:	56                   	push   esi
c0017617:	e8 2a 81 ff ff       	call   c000f746 <File::seek(unsigned long long)>
c001761c:	83 c4 10             	add    esp,0x10
c001761f:	85 c0                	test   eax,eax
c0017621:	74 17                	je     c001763a <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0017623:	83 ec 0c             	sub    esp,0xc
c0017626:	68 d1 27 02 c0       	push   0xc00227d1
c001762b:	e8 c5 7a ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0017630:	83 c4 10             	add    esp,0x10
c0017633:	31 c0                	xor    eax,eax
c0017635:	e9 87 00 00 00       	jmp    c00176c1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001763a:	83 ec 0c             	sub    esp,0xc
c001763d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0017640:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0017643:	50                   	push   eax
c0017644:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017648:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001764c:	56                   	push   esi
c001764d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0017651:	e8 e0 fb ff ff       	call   c0017236 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0017656:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001765a:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001765e:	83 c4 20             	add    esp,0x20
c0017661:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0017665:	73 04                	jae    c001766b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017667:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001766b:	45                   	inc    ebp
c001766c:	e9 76 ff ff ff       	jmp    c00175e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0017671:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0017675:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017679:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001767d:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c0017683:	83 ec 0c             	sub    esp,0xc
c0017686:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001768c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017691:	05 00 10 00 00       	add    eax,0x1000
c0017696:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017699:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001769d:	e8 72 49 ff ff       	call   c000c014 <free>
c00176a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00176a5:	e8 6a 49 ff ff       	call   c000c014 <free>
c00176aa:	58                   	pop    eax
c00176ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00176af:	e8 60 49 ff ff       	call   c000c014 <free>
c00176b4:	89 34 24             	mov    DWORD PTR [esp],esi
c00176b7:	e8 2a 80 ff ff       	call   c000f6e6 <File::close()>
c00176bc:	83 c4 10             	add    esp,0x10
c00176bf:	b0 01                	mov    al,0x1
c00176c1:	83 c4 3c             	add    esp,0x3c
c00176c4:	5b                   	pop    ebx
c00176c5:	5e                   	pop    esi
c00176c6:	5f                   	pop    edi
c00176c7:	5d                   	pop    ebp
c00176c8:	c3                   	ret    

c00176c9 <Thr::runtimeReferenceHelper()>:
c00176c9:	83 ec 18             	sub    esp,0x18
c00176cc:	68 d9 27 02 c0       	push   0xc00227d9
c00176d1:	e8 1f 7a ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c00176d6:	fa                   	cli    
c00176d7:	83 c4 10             	add    esp,0x10
c00176da:	eb fe                	jmp    c00176da <Thr::runtimeReferenceHelper()+0x11>

c00176dc <Thr::getAddressOfKernelSymbol(char const*)>:
c00176dc:	57                   	push   edi
c00176dd:	56                   	push   esi
c00176de:	53                   	push   ebx
c00176df:	31 db                	xor    ebx,ebx
c00176e1:	39 1d e0 56 02 c0    	cmp    DWORD PTR ds:0xc00256e0,ebx
c00176e7:	7e 3c                	jle    c0017725 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00176e9:	8b 34 9d 60 56 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffda9a0]
c00176f0:	31 ff                	xor    edi,edi
c00176f2:	39 3c 9d 60 55 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdaaa0],edi
c00176f9:	7e 27                	jle    c0017722 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00176fb:	50                   	push   eax
c00176fc:	50                   	push   eax
c00176fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017701:	8b 06                	mov    eax,DWORD PTR [esi]
c0017703:	03 04 9d e0 55 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdaa20]
c001770a:	50                   	push   eax
c001770b:	e8 9a 90 fe ff       	call   c00007aa <strcmp>
c0017710:	83 c4 10             	add    esp,0x10
c0017713:	85 c0                	test   eax,eax
c0017715:	75 05                	jne    c001771c <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0017717:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001771a:	eb 0b                	jmp    c0017727 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001771c:	83 c6 10             	add    esi,0x10
c001771f:	47                   	inc    edi
c0017720:	eb d0                	jmp    c00176f2 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0017722:	43                   	inc    ebx
c0017723:	eb bc                	jmp    c00176e1 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0017725:	31 c0                	xor    eax,eax
c0017727:	5b                   	pop    ebx
c0017728:	5e                   	pop    esi
c0017729:	5f                   	pop    edi
c001772a:	c3                   	ret    

c001772b <Thr::loadKernelSymbolTable(char const*)>:
c001772b:	55                   	push   ebp
c001772c:	57                   	push   edi
c001772d:	56                   	push   esi
c001772e:	53                   	push   ebx
c001772f:	83 ec 68             	sub    esp,0x68
c0017732:	8b 35 34 57 02 c0    	mov    esi,DWORD PTR ds:0xc0025734
c0017738:	68 14 01 00 00       	push   0x114
c001773d:	e8 c4 78 ff ff       	call   c000f006 <operator new(unsigned long)>
c0017742:	83 c4 0c             	add    esp,0xc
c0017745:	89 c3                	mov    ebx,eax
c0017747:	56                   	push   esi
c0017748:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001774c:	50                   	push   eax
c001774d:	e8 d2 7e ff ff       	call   c000f624 <File::File(char const*, Process*)>
c0017752:	5e                   	pop    esi
c0017753:	5f                   	pop    edi
c0017754:	6a 01                	push   0x1
c0017756:	53                   	push   ebx
c0017757:	e8 2c 7f ff ff       	call   c000f688 <File::open(FileOpenMode)>
c001775c:	83 c4 10             	add    esp,0x10
c001775f:	31 d2                	xor    edx,edx
c0017761:	85 c0                	test   eax,eax
c0017763:	0f 85 79 02 00 00    	jne    c00179e2 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0017769:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017771:	83 ec 0c             	sub    esp,0xc
c0017774:	6a 34                	push   0x34
c0017776:	e8 89 48 ff ff       	call   c000c004 <malloc>
c001777b:	59                   	pop    ecx
c001777c:	89 c7                	mov    edi,eax
c001777e:	8d 74 24 34          	lea    esi,[esp+0x34]
c0017782:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017784:	56                   	push   esi
c0017785:	57                   	push   edi
c0017786:	6a 00                	push   0x0
c0017788:	6a 34                	push   0x34
c001778a:	53                   	push   ebx
c001778b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001778e:	83 c4 20             	add    esp,0x20
c0017791:	85 c0                	test   eax,eax
c0017793:	74 17                	je     c00177ac <Thr::loadKernelSymbolTable(char const*)+0x81>
c0017795:	83 ec 0c             	sub    esp,0xc
c0017798:	68 fb 27 02 c0       	push   0xc00227fb
c001779d:	e8 e8 e0 ff ff       	call   c001588a <Krnl::panic(char const*)>
c00177a2:	83 c4 10             	add    esp,0x10
c00177a5:	31 d2                	xor    edx,edx
c00177a7:	e9 36 02 00 00       	jmp    c00179e2 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00177ac:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00177b2:	75 e1                	jne    c0017795 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00177b4:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00177b7:	85 c0                	test   eax,eax
c00177b9:	74 da                	je     c0017795 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00177bb:	52                   	push   edx
c00177bc:	31 d2                	xor    edx,edx
c00177be:	52                   	push   edx
c00177bf:	50                   	push   eax
c00177c0:	53                   	push   ebx
c00177c1:	e8 80 7f ff ff       	call   c000f746 <File::seek(unsigned long long)>
c00177c6:	83 c4 10             	add    esp,0x10
c00177c9:	85 c0                	test   eax,eax
c00177cb:	75 c8                	jne    c0017795 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00177cd:	83 ec 0c             	sub    esp,0xc
c00177d0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00177d4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00177d8:	31 ed                	xor    ebp,ebp
c00177da:	0f af c2             	imul   eax,edx
c00177dd:	50                   	push   eax
c00177de:	e8 21 48 ff ff       	call   c000c004 <malloc>
c00177e3:	89 34 24             	mov    DWORD PTR [esp],esi
c00177e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00177ea:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00177ec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00177f0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00177f4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00177f8:	0f af c2             	imul   eax,edx
c00177fb:	99                   	cdq    
c00177fc:	52                   	push   edx
c00177fd:	50                   	push   eax
c00177fe:	53                   	push   ebx
c00177ff:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017802:	83 c4 20             	add    esp,0x20
c0017805:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001780d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017815:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001781d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017825:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017829:	0f 86 aa 00 00 00    	jbe    c00178d9 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001782f:	0f b7 f5             	movzx  esi,bp
c0017832:	6b f6 28             	imul   esi,esi,0x28
c0017835:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0017839:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001783c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017840:	50                   	push   eax
c0017841:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017845:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0017849:	8b 16                	mov    edx,DWORD PTR [esi]
c001784b:	6b c0 28             	imul   eax,eax,0x28
c001784e:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0017852:	89 d0                	mov    eax,edx
c0017854:	31 d2                	xor    edx,edx
c0017856:	52                   	push   edx
c0017857:	50                   	push   eax
c0017858:	53                   	push   ebx
c0017859:	e8 e8 7e ff ff       	call   c000f746 <File::seek(unsigned long long)>
c001785e:	83 c4 0c             	add    esp,0xc
c0017861:	6a 20                	push   0x20
c0017863:	6a 00                	push   0x0
c0017865:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017869:	52                   	push   edx
c001786a:	e8 4b 8e fe ff       	call   c00006ba <memset>
c001786f:	58                   	pop    eax
c0017870:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017872:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0017876:	51                   	push   ecx
c0017877:	8d 54 24 40          	lea    edx,[esp+0x40]
c001787b:	52                   	push   edx
c001787c:	6a 00                	push   0x0
c001787e:	6a 1f                	push   0x1f
c0017880:	53                   	push   ebx
c0017881:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017884:	83 c4 18             	add    esp,0x18
c0017887:	68 12 28 02 c0       	push   0xc0022812
c001788c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017890:	52                   	push   edx
c0017891:	e8 14 8f fe ff       	call   c00007aa <strcmp>
c0017896:	83 c4 10             	add    esp,0x10
c0017899:	85 c0                	test   eax,eax
c001789b:	75 0f                	jne    c00178ac <Thr::loadKernelSymbolTable(char const*)+0x181>
c001789d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00178a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00178a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00178a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00178ac:	50                   	push   eax
c00178ad:	50                   	push   eax
c00178ae:	68 1a 28 02 c0       	push   0xc002281a
c00178b3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00178b7:	50                   	push   eax
c00178b8:	e8 ed 8e fe ff       	call   c00007aa <strcmp>
c00178bd:	83 c4 10             	add    esp,0x10
c00178c0:	85 c0                	test   eax,eax
c00178c2:	75 0f                	jne    c00178d3 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c00178c4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00178c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00178cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00178cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00178d3:	45                   	inc    ebp
c00178d4:	e9 4c ff ff ff       	jmp    c0017825 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c00178d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00178de:	75 10                	jne    c00178f0 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c00178e0:	83 ec 0c             	sub    esp,0xc
c00178e3:	68 22 28 02 c0       	push   0xc0022822
c00178e8:	e8 9d df ff ff       	call   c001588a <Krnl::panic(char const*)>
c00178ed:	83 c4 10             	add    esp,0x10
c00178f0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00178f5:	75 10                	jne    c0017907 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c00178f7:	83 ec 0c             	sub    esp,0xc
c00178fa:	68 22 28 02 c0       	push   0xc0022822
c00178ff:	e8 86 df ff ff       	call   c001588a <Krnl::panic(char const*)>
c0017904:	83 c4 10             	add    esp,0x10
c0017907:	31 d2                	xor    edx,edx
c0017909:	50                   	push   eax
c001790a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001790e:	52                   	push   edx
c001790f:	50                   	push   eax
c0017910:	53                   	push   ebx
c0017911:	e8 30 7e ff ff       	call   c000f746 <File::seek(unsigned long long)>
c0017916:	5a                   	pop    edx
c0017917:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001791b:	e8 e4 46 ff ff       	call   c000c004 <malloc>
c0017920:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017928:	89 c1                	mov    ecx,eax
c001792a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001792e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017932:	5e                   	pop    esi
c0017933:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017935:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017939:	55                   	push   ebp
c001793a:	51                   	push   ecx
c001793b:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c001793f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017943:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017947:	53                   	push   ebx
c0017948:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001794b:	83 c4 14             	add    esp,0x14
c001794e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017952:	e8 ad 46 ff ff       	call   c000c004 <malloc>
c0017957:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001795a:	89 c6                	mov    esi,eax
c001795c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001795e:	56                   	push   esi
c001795f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017963:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017967:	53                   	push   ebx
c0017968:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001796b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001796f:	8b 15 e0 56 02 c0    	mov    edx,DWORD PTR ds:0xc00256e0
c0017975:	83 c4 1c             	add    esp,0x1c
c0017978:	c1 e8 04             	shr    eax,0x4
c001797b:	89 04 95 60 55 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaaa0],eax
c0017982:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017986:	31 d2                	xor    edx,edx
c0017988:	52                   	push   edx
c0017989:	50                   	push   eax
c001798a:	53                   	push   ebx
c001798b:	e8 b6 7d ff ff       	call   c000f746 <File::seek(unsigned long long)>
c0017990:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017993:	31 d2                	xor    edx,edx
c0017995:	56                   	push   esi
c0017996:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001799a:	52                   	push   edx
c001799b:	50                   	push   eax
c001799c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001799e:	53                   	push   ebx
c001799f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00179a2:	83 c4 14             	add    esp,0x14
c00179a5:	53                   	push   ebx
c00179a6:	e8 3b 7d ff ff       	call   c000f6e6 <File::close()>
c00179ab:	5d                   	pop    ebp
c00179ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179b0:	e8 5f 46 ff ff       	call   c000c014 <free>
c00179b5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00179b8:	e8 57 46 ff ff       	call   c000c014 <free>
c00179bd:	a1 e0 56 02 c0       	mov    eax,ds:0xc00256e0
c00179c2:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00179c6:	8d 50 01             	lea    edx,[eax+0x1]
c00179c9:	89 0c 85 60 56 02 c0 	mov    DWORD PTR [eax*4-0x3ffda9a0],ecx
c00179d0:	89 15 e0 56 02 c0    	mov    DWORD PTR ds:0xc00256e0,edx
c00179d6:	89 34 85 e0 55 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaa20],esi
c00179dd:	83 c4 10             	add    esp,0x10
c00179e0:	b2 01                	mov    dl,0x1
c00179e2:	83 c4 5c             	add    esp,0x5c
c00179e5:	88 d0                	mov    al,dl
c00179e7:	5b                   	pop    ebx
c00179e8:	5e                   	pop    esi
c00179e9:	5f                   	pop    edi
c00179ea:	5d                   	pop    ebp
c00179eb:	c3                   	ret    

c00179ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00179ec:	55                   	push   ebp
c00179ed:	57                   	push   edi
c00179ee:	56                   	push   esi
c00179ef:	53                   	push   ebx
c00179f0:	81 ec 68 03 00 00    	sub    esp,0x368
c00179f6:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00179fd:	8b 1d 34 57 02 c0    	mov    ebx,DWORD PTR ds:0xc0025734
c0017a03:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017a07:	68 14 01 00 00       	push   0x114
c0017a0c:	e8 f5 75 ff ff       	call   c000f006 <operator new(unsigned long)>
c0017a11:	83 c4 0c             	add    esp,0xc
c0017a14:	89 c7                	mov    edi,eax
c0017a16:	53                   	push   ebx
c0017a17:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017a1e:	50                   	push   eax
c0017a1f:	e8 00 7c ff ff       	call   c000f624 <File::File(char const*, Process*)>
c0017a24:	5e                   	pop    esi
c0017a25:	5d                   	pop    ebp
c0017a26:	6a 01                	push   0x1
c0017a28:	57                   	push   edi
c0017a29:	e8 5a 7c ff ff       	call   c000f688 <File::open(FileOpenMode)>
c0017a2e:	83 c4 10             	add    esp,0x10
c0017a31:	85 c0                	test   eax,eax
c0017a33:	0f 85 10 07 00 00    	jne    c0018149 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017a39:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017a41:	83 ec 0c             	sub    esp,0xc
c0017a44:	6a 34                	push   0x34
c0017a46:	e8 b9 45 ff ff       	call   c000c004 <malloc>
c0017a4b:	5b                   	pop    ebx
c0017a4c:	89 c5                	mov    ebp,eax
c0017a4e:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017a52:	8b 07                	mov    eax,DWORD PTR [edi]
c0017a54:	53                   	push   ebx
c0017a55:	55                   	push   ebp
c0017a56:	6a 00                	push   0x0
c0017a58:	6a 34                	push   0x34
c0017a5a:	57                   	push   edi
c0017a5b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017a5e:	83 c4 20             	add    esp,0x20
c0017a61:	85 c0                	test   eax,eax
c0017a63:	0f 85 e0 06 00 00    	jne    c0018149 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017a69:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0017a70:	0f 85 d3 06 00 00    	jne    c0018149 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017a76:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0017a79:	85 c0                	test   eax,eax
c0017a7b:	0f 84 c8 06 00 00    	je     c0018149 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017a81:	31 d2                	xor    edx,edx
c0017a83:	51                   	push   ecx
c0017a84:	52                   	push   edx
c0017a85:	50                   	push   eax
c0017a86:	57                   	push   edi
c0017a87:	e8 ba 7c ff ff       	call   c000f746 <File::seek(unsigned long long)>
c0017a8c:	83 c4 10             	add    esp,0x10
c0017a8f:	85 c0                	test   eax,eax
c0017a91:	0f 85 b2 06 00 00    	jne    c0018149 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017a97:	83 ec 0c             	sub    esp,0xc
c0017a9a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017a9d:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017aa1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017aa5:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017aa9:	0f af c2             	imul   eax,edx
c0017aac:	50                   	push   eax
c0017aad:	e8 52 45 ff ff       	call   c000c004 <malloc>
c0017ab2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017ab5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017ab9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017abb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017abf:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017ac3:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017ac7:	0f af c2             	imul   eax,edx
c0017aca:	99                   	cdq    
c0017acb:	52                   	push   edx
c0017acc:	50                   	push   eax
c0017acd:	57                   	push   edi
c0017ace:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017ad1:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0017ad4:	83 c4 20             	add    esp,0x20
c0017ad7:	85 c0                	test   eax,eax
c0017ad9:	0f 84 6a 06 00 00    	je     c0018149 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017adf:	52                   	push   edx
c0017ae0:	31 d2                	xor    edx,edx
c0017ae2:	52                   	push   edx
c0017ae3:	50                   	push   eax
c0017ae4:	57                   	push   edi
c0017ae5:	e8 5c 7c ff ff       	call   c000f746 <File::seek(unsigned long long)>
c0017aea:	83 c4 10             	add    esp,0x10
c0017aed:	85 c0                	test   eax,eax
c0017aef:	0f 85 54 06 00 00    	jne    c0018149 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017af5:	83 ec 0c             	sub    esp,0xc
c0017af8:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017afc:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017b00:	31 f6                	xor    esi,esi
c0017b02:	0f af c2             	imul   eax,edx
c0017b05:	50                   	push   eax
c0017b06:	e8 f9 44 ff ff       	call   c000c004 <malloc>
c0017b0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017b0e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017b12:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017b14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b18:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017b1c:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017b20:	0f af c2             	imul   eax,edx
c0017b23:	99                   	cdq    
c0017b24:	52                   	push   edx
c0017b25:	50                   	push   eax
c0017b26:	57                   	push   edi
c0017b27:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017b2a:	83 c4 20             	add    esp,0x20
c0017b2d:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c0017b31:	0f 86 af 00 00 00    	jbe    c0017be6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c0017b37:	0f b7 de             	movzx  ebx,si
c0017b3a:	c1 e3 05             	shl    ebx,0x5
c0017b3d:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0017b41:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017b44:	0f 85 96 00 00 00    	jne    c0017be0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c0017b4a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017b4d:	31 d2                	xor    edx,edx
c0017b4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017b56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b5a:	50                   	push   eax
c0017b5b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017b5e:	52                   	push   edx
c0017b5f:	50                   	push   eax
c0017b60:	57                   	push   edi
c0017b61:	e8 e0 7b ff ff       	call   c000f746 <File::seek(unsigned long long)>
c0017b66:	83 c4 10             	add    esp,0x10
c0017b69:	85 c0                	test   eax,eax
c0017b6b:	0f 85 d8 05 00 00    	jne    c0018149 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017b71:	52                   	push   edx
c0017b72:	52                   	push   edx
c0017b73:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017b77:	68 3c 28 02 c0       	push   0xc002283c
c0017b7c:	e8 74 75 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0017b81:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c0017b88:	31 d2                	xor    edx,edx
c0017b8a:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c0017b8e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017b92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b96:	59                   	pop    ecx
c0017b97:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017b99:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017ba0:	50                   	push   eax
c0017ba1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ba5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ba9:	52                   	push   edx
c0017baa:	50                   	push   eax
c0017bab:	57                   	push   edi
c0017bac:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017baf:	83 c4 18             	add    esp,0x18
c0017bb2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017bb5:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017bb8:	50                   	push   eax
c0017bb9:	68 60 28 02 c0       	push   0xc0022860
c0017bbe:	e8 32 75 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0017bc3:	83 c4 0c             	add    esp,0xc
c0017bc6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017bc9:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017bcc:	50                   	push   eax
c0017bcd:	6a 00                	push   0x0
c0017bcf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bd3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0017bd7:	50                   	push   eax
c0017bd8:	e8 dd 8a fe ff       	call   c00006ba <memset>
c0017bdd:	83 c4 10             	add    esp,0x10
c0017be0:	46                   	inc    esi
c0017be1:	e9 47 ff ff ff       	jmp    c0017b2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c0017be6:	31 db                	xor    ebx,ebx
c0017be8:	50                   	push   eax
c0017be9:	68 00 01 00 00       	push   0x100
c0017bee:	6a 00                	push   0x0
c0017bf0:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017bf4:	50                   	push   eax
c0017bf5:	e8 c0 8a fe ff       	call   c00006ba <memset>
c0017bfa:	83 c4 0c             	add    esp,0xc
c0017bfd:	68 00 01 00 00       	push   0x100
c0017c02:	6a 00                	push   0x0
c0017c04:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017c0b:	50                   	push   eax
c0017c0c:	e8 a9 8a fe ff       	call   c00006ba <memset>
c0017c11:	83 c4 10             	add    esp,0x10
c0017c14:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017c1c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017c24:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017c2c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017c34:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017c3c:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c0017c40:	0f 86 2f 01 00 00    	jbe    c0017d75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c0017c46:	0f b7 f3             	movzx  esi,bx
c0017c49:	6b f6 28             	imul   esi,esi,0x28
c0017c4c:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0017c50:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017c53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c57:	50                   	push   eax
c0017c58:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017c5c:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0017c60:	8b 06                	mov    eax,DWORD PTR [esi]
c0017c62:	6b d2 28             	imul   edx,edx,0x28
c0017c65:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017c69:	31 d2                	xor    edx,edx
c0017c6b:	52                   	push   edx
c0017c6c:	50                   	push   eax
c0017c6d:	57                   	push   edi
c0017c6e:	e8 d3 7a ff ff       	call   c000f746 <File::seek(unsigned long long)>
c0017c73:	83 c4 0c             	add    esp,0xc
c0017c76:	6a 20                	push   0x20
c0017c78:	6a 00                	push   0x0
c0017c7a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017c81:	51                   	push   ecx
c0017c82:	e8 33 8a fe ff       	call   c00006ba <memset>
c0017c87:	58                   	pop    eax
c0017c88:	8b 07                	mov    eax,DWORD PTR [edi]
c0017c8a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017c8e:	52                   	push   edx
c0017c8f:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017c96:	51                   	push   ecx
c0017c97:	6a 00                	push   0x0
c0017c99:	6a 1f                	push   0x1f
c0017c9b:	57                   	push   edi
c0017c9c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017c9f:	83 c4 1c             	add    esp,0x1c
c0017ca2:	6a 09                	push   0x9
c0017ca4:	68 7d 28 02 c0       	push   0xc002287d
c0017ca9:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017cb0:	51                   	push   ecx
c0017cb1:	e8 6b 89 fe ff       	call   c0000621 <memcmp>
c0017cb6:	83 c4 10             	add    esp,0x10
c0017cb9:	85 c0                	test   eax,eax
c0017cbb:	75 21                	jne    c0017cde <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c0017cbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cc1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017cc5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017cc9:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017ccd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017cd0:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017cd7:	89 c8                	mov    eax,ecx
c0017cd9:	40                   	inc    eax
c0017cda:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017cde:	50                   	push   eax
c0017cdf:	6a 09                	push   0x9
c0017ce1:	68 87 28 02 c0       	push   0xc0022887
c0017ce6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017ced:	50                   	push   eax
c0017cee:	e8 2e 89 fe ff       	call   c0000621 <memcmp>
c0017cf3:	83 c4 10             	add    esp,0x10
c0017cf6:	85 c0                	test   eax,eax
c0017cf8:	75 21                	jne    c0017d1b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c0017cfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cfe:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017d02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d06:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017d0a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017d0d:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017d14:	89 c8                	mov    eax,ecx
c0017d16:	40                   	inc    eax
c0017d17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017d1b:	50                   	push   eax
c0017d1c:	50                   	push   eax
c0017d1d:	68 12 28 02 c0       	push   0xc0022812
c0017d22:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017d29:	50                   	push   eax
c0017d2a:	e8 7b 8a fe ff       	call   c00007aa <strcmp>
c0017d2f:	83 c4 10             	add    esp,0x10
c0017d32:	85 c0                	test   eax,eax
c0017d34:	75 0f                	jne    c0017d45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c0017d36:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017d39:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017d45:	50                   	push   eax
c0017d46:	50                   	push   eax
c0017d47:	68 1a 28 02 c0       	push   0xc002281a
c0017d4c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017d53:	50                   	push   eax
c0017d54:	e8 51 8a fe ff       	call   c00007aa <strcmp>
c0017d59:	83 c4 10             	add    esp,0x10
c0017d5c:	85 c0                	test   eax,eax
c0017d5e:	75 0f                	jne    c0017d6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c0017d60:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017d63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d6b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017d6f:	43                   	inc    ebx
c0017d70:	e9 c7 fe ff ff       	jmp    c0017c3c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c0017d75:	31 d2                	xor    edx,edx
c0017d77:	50                   	push   eax
c0017d78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d7c:	52                   	push   edx
c0017d7d:	50                   	push   eax
c0017d7e:	57                   	push   edi
c0017d7f:	e8 c2 79 ff ff       	call   c000f746 <File::seek(unsigned long long)>
c0017d84:	5a                   	pop    edx
c0017d85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d89:	e8 76 42 ff ff       	call   c000c004 <malloc>
c0017d8e:	31 d2                	xor    edx,edx
c0017d90:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017d94:	59                   	pop    ecx
c0017d95:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017d97:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017d9b:	53                   	push   ebx
c0017d9c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017da0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017da4:	52                   	push   edx
c0017da5:	50                   	push   eax
c0017da6:	57                   	push   edi
c0017da7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017daa:	83 c4 14             	add    esp,0x14
c0017dad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017db1:	e8 4e 42 ff ff       	call   c000c004 <malloc>
c0017db6:	31 d2                	xor    edx,edx
c0017db8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017dbc:	83 c4 0c             	add    esp,0xc
c0017dbf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017dc3:	52                   	push   edx
c0017dc4:	50                   	push   eax
c0017dc5:	57                   	push   edi
c0017dc6:	e8 7b 79 ff ff       	call   c000f746 <File::seek(unsigned long long)>
c0017dcb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017dce:	31 d2                	xor    edx,edx
c0017dd0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017dd4:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017dd6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017dda:	52                   	push   edx
c0017ddb:	50                   	push   eax
c0017ddc:	57                   	push   edi
c0017ddd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017de0:	83 c4 20             	add    esp,0x20
c0017de3:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017deb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017def:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c0017df3:	0f 84 54 03 00 00    	je     c001814d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c0017df9:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c0017e00:	31 d2                	xor    edx,edx
c0017e02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017e06:	c1 e8 03             	shr    eax,0x3
c0017e09:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017e0d:	50                   	push   eax
c0017e0e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017e12:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017e16:	52                   	push   edx
c0017e17:	50                   	push   eax
c0017e18:	57                   	push   edi
c0017e19:	e8 28 79 ff ff       	call   c000f746 <File::seek(unsigned long long)>
c0017e1e:	58                   	pop    eax
c0017e1f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e23:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017e2a:	e8 d5 41 ff ff       	call   c000c004 <malloc>
c0017e2f:	31 d2                	xor    edx,edx
c0017e31:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017e35:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017e37:	58                   	pop    eax
c0017e38:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017e3c:	50                   	push   eax
c0017e3d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017e41:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e45:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017e4c:	52                   	push   edx
c0017e4d:	50                   	push   eax
c0017e4e:	57                   	push   edi
c0017e4f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017e52:	83 c4 20             	add    esp,0x20
c0017e55:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017e5d:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0017e61:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c0017e65:	0f 8d c6 02 00 00    	jge    c0018131 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c0017e6b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e73:	31 db                	xor    ebx,ebx
c0017e75:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c0017e78:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017e7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e80:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c0017e84:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017e88:	c1 e8 08             	shr    eax,0x8
c0017e8b:	89 c6                	mov    esi,eax
c0017e8d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017e91:	c1 e6 04             	shl    esi,0x4
c0017e94:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c0017e98:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017e9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017e9f:	85 c0                	test   eax,eax
c0017ea1:	0f 85 17 01 00 00    	jne    c0017fbe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0017ea7:	83 ec 0c             	sub    esp,0xc
c0017eaa:	b3 01                	mov    bl,0x1
c0017eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017eb0:	03 06                	add    eax,DWORD PTR [esi]
c0017eb2:	50                   	push   eax
c0017eb3:	e8 24 f8 ff ff       	call   c00176dc <Thr::getAddressOfKernelSymbol(char const*)>
c0017eb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017ebc:	83 c4 10             	add    esp,0x10
c0017ebf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017ec4:	0f 85 f4 00 00 00    	jne    c0017fbe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0017eca:	50                   	push   eax
c0017ecb:	50                   	push   eax
c0017ecc:	68 91 28 02 c0       	push   0xc0022891
c0017ed1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ed5:	03 06                	add    eax,DWORD PTR [esi]
c0017ed7:	50                   	push   eax
c0017ed8:	e8 cd 88 fe ff       	call   c00007aa <strcmp>
c0017edd:	83 c4 10             	add    esp,0x10
c0017ee0:	85 c0                	test   eax,eax
c0017ee2:	75 0a                	jne    c0017eee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c0017ee4:	b8 5c f1 01 c0       	mov    eax,0xc001f15c
c0017ee9:	e9 ca 00 00 00       	jmp    c0017fb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0017eee:	50                   	push   eax
c0017eef:	50                   	push   eax
c0017ef0:	68 9b 28 02 c0       	push   0xc002289b
c0017ef5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ef9:	03 06                	add    eax,DWORD PTR [esi]
c0017efb:	50                   	push   eax
c0017efc:	e8 a9 88 fe ff       	call   c00007aa <strcmp>
c0017f01:	83 c4 10             	add    esp,0x10
c0017f04:	85 c0                	test   eax,eax
c0017f06:	75 0a                	jne    c0017f12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c0017f08:	b8 90 ee 01 c0       	mov    eax,0xc001ee90
c0017f0d:	e9 a6 00 00 00       	jmp    c0017fb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0017f12:	53                   	push   ebx
c0017f13:	53                   	push   ebx
c0017f14:	68 a4 28 02 c0       	push   0xc00228a4
c0017f19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f1d:	03 06                	add    eax,DWORD PTR [esi]
c0017f1f:	50                   	push   eax
c0017f20:	e8 85 88 fe ff       	call   c00007aa <strcmp>
c0017f25:	83 c4 10             	add    esp,0x10
c0017f28:	85 c0                	test   eax,eax
c0017f2a:	75 0a                	jne    c0017f36 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c0017f2c:	b8 5c f2 01 c0       	mov    eax,0xc001f25c
c0017f31:	e9 82 00 00 00       	jmp    c0017fb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0017f36:	51                   	push   ecx
c0017f37:	51                   	push   ecx
c0017f38:	68 ae 28 02 c0       	push   0xc00228ae
c0017f3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f41:	03 06                	add    eax,DWORD PTR [esi]
c0017f43:	50                   	push   eax
c0017f44:	e8 61 88 fe ff       	call   c00007aa <strcmp>
c0017f49:	83 c4 10             	add    esp,0x10
c0017f4c:	85 c0                	test   eax,eax
c0017f4e:	74 63                	je     c0017fb3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c0017f50:	50                   	push   eax
c0017f51:	50                   	push   eax
c0017f52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017f56:	03 06                	add    eax,DWORD PTR [esi]
c0017f58:	50                   	push   eax
c0017f59:	68 b7 28 02 c0       	push   0xc00228b7
c0017f5e:	e8 92 71 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0017f63:	58                   	pop    eax
c0017f64:	5a                   	pop    edx
c0017f65:	68 d1 28 02 c0       	push   0xc00228d1
c0017f6a:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c0017f71:	53                   	push   ebx
c0017f72:	e8 e2 87 fe ff       	call   c0000759 <strcpy>
c0017f77:	59                   	pop    ecx
c0017f78:	58                   	pop    eax
c0017f79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017f7d:	03 06                	add    eax,DWORD PTR [esi]
c0017f7f:	50                   	push   eax
c0017f80:	53                   	push   ebx
c0017f81:	e8 8a 88 fe ff       	call   c0000810 <strcat>
c0017f86:	58                   	pop    eax
c0017f87:	5a                   	pop    edx
c0017f88:	68 67 29 02 c0       	push   0xc0022967
c0017f8d:	53                   	push   ebx
c0017f8e:	e8 7d 88 fe ff       	call   c0000810 <strcat>
c0017f93:	83 c4 10             	add    esp,0x10
c0017f96:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017f9b:	0f 84 4b 01 00 00    	je     c00180ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0017fa1:	83 ec 0c             	sub    esp,0xc
c0017fa4:	53                   	push   ebx
c0017fa5:	e8 e0 d8 ff ff       	call   c001588a <Krnl::panic(char const*)>
c0017faa:	83 c4 10             	add    esp,0x10
c0017fad:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c0017fb1:	eb 0b                	jmp    c0017fbe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0017fb3:	b8 dc ef 01 c0       	mov    eax,0xc001efdc
c0017fb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017fbc:	b3 01                	mov    bl,0x1
c0017fbe:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0017fc3:	0f 85 80 00 00 00    	jne    c0018049 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c0017fc9:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0017fd0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017fd4:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0017fd8:	01 ce                	add    esi,ecx
c0017fda:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0017fe2:	8b 06                	mov    eax,DWORD PTR [esi]
c0017fe4:	0f 94 c2             	sete   dl
c0017fe7:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0017fef:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c0017ff4:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c0017ff8:	84 db                	test   bl,bl
c0017ffa:	74 31                	je     c001802d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c0017ffc:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018000:	01 c3                	add    ebx,eax
c0018002:	84 d2                	test   dl,dl
c0018004:	75 0a                	jne    c0018010 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c0018006:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001800a:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001800e:	76 32                	jbe    c0018042 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018010:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0018015:	0f 84 d1 00 00 00    	je     c00180ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001801b:	83 ec 0c             	sub    esp,0xc
c001801e:	68 e8 28 02 c0       	push   0xc00228e8
c0018023:	e8 62 d8 ff ff       	call   c001588a <Krnl::panic(char const*)>
c0018028:	83 c4 10             	add    esp,0x10
c001802b:	eb 15                	jmp    c0018042 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001802d:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c0018030:	84 d2                	test   dl,dl
c0018032:	75 0e                	jne    c0018042 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018034:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0018038:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001803c:	77 04                	ja     c0018042 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001803e:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0018042:	89 1e                	mov    DWORD PTR [esi],ebx
c0018044:	e9 df 00 00 00       	jmp    c0018128 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018049:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001804e:	75 6e                	jne    c00180be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c0018050:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0018057:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001805b:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001805f:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0018067:	74 17                	je     c0018080 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c0018069:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0018071:	74 0d                	je     c0018080 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c0018073:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0018077:	83 e8 04             	sub    eax,0x4
c001807a:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001807e:	76 17                	jbe    c0018097 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c0018080:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0018085:	74 65                	je     c00180ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018087:	83 ec 0c             	sub    esp,0xc
c001808a:	68 04 29 02 c0       	push   0xc0022904
c001808f:	e8 f6 d7 ff ff       	call   c001588a <Krnl::panic(char const*)>
c0018094:	83 c4 10             	add    esp,0x10
c0018097:	8b 16                	mov    edx,DWORD PTR [esi]
c0018099:	84 db                	test   bl,bl
c001809b:	74 13                	je     c00180b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c001809d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180a1:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c00180a8:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00180ac:	01 d0                	add    eax,edx
c00180ae:	eb 06                	jmp    c00180b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c00180b0:	89 d0                	mov    eax,edx
c00180b2:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00180b6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00180ba:	89 06                	mov    DWORD PTR [esi],eax
c00180bc:	eb 6a                	jmp    c0018128 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c00180be:	50                   	push   eax
c00180bf:	50                   	push   eax
c00180c0:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00180c5:	50                   	push   eax
c00180c6:	68 20 29 02 c0       	push   0xc0022920
c00180cb:	e8 25 70 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c00180d0:	83 c4 10             	add    esp,0x10
c00180d3:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00180d8:	74 12                	je     c00180ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00180da:	83 ec 0c             	sub    esp,0xc
c00180dd:	68 2b 29 02 c0       	push   0xc002292b
c00180e2:	e8 a3 d7 ff ff       	call   c001588a <Krnl::panic(char const*)>
c00180e7:	83 c4 10             	add    esp,0x10
c00180ea:	eb 3c                	jmp    c0018128 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c00180ec:	83 ec 0c             	sub    esp,0xc
c00180ef:	57                   	push   edi
c00180f0:	e8 f1 75 ff ff       	call   c000f6e6 <File::close()>
c00180f5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00180f8:	8b 07                	mov    eax,DWORD PTR [edi]
c00180fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00180fd:	59                   	pop    ecx
c00180fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018102:	e8 0d 3f ff ff       	call   c000c014 <free>
c0018107:	5b                   	pop    ebx
c0018108:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001810c:	e8 03 3f ff ff       	call   c000c014 <free>
c0018111:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018114:	e8 fb 3e ff ff       	call   c000c014 <free>
c0018119:	5e                   	pop    esi
c001811a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001811e:	e8 f1 3e ff ff       	call   c000c014 <free>
c0018123:	83 c4 10             	add    esp,0x10
c0018126:	eb 21                	jmp    c0018149 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0018128:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001812c:	e9 2c fd ff ff       	jmp    c0017e5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c0018131:	83 ec 0c             	sub    esp,0xc
c0018134:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018138:	e8 d7 3e ff ff       	call   c000c014 <free>
c001813d:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c0018141:	83 c4 10             	add    esp,0x10
c0018144:	e9 a2 fc ff ff       	jmp    c0017deb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c0018149:	31 c0                	xor    eax,eax
c001814b:	eb 32                	jmp    c001817f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c001814d:	83 ec 0c             	sub    esp,0xc
c0018150:	57                   	push   edi
c0018151:	e8 90 75 ff ff       	call   c000f6e6 <File::close()>
c0018156:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018159:	8b 07                	mov    eax,DWORD PTR [edi]
c001815b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001815e:	58                   	pop    eax
c001815f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018163:	e8 ac 3e ff ff       	call   c000c014 <free>
c0018168:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001816b:	e8 a4 3e ff ff       	call   c000c014 <free>
c0018170:	5a                   	pop    edx
c0018171:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018175:	e8 9a 3e ff ff       	call   c000c014 <free>
c001817a:	83 c4 10             	add    esp,0x10
c001817d:	b0 01                	mov    al,0x1
c001817f:	81 c4 5c 03 00 00    	add    esp,0x35c
c0018185:	5b                   	pop    ebx
c0018186:	5e                   	pop    esi
c0018187:	5f                   	pop    edi
c0018188:	5d                   	pop    ebp
c0018189:	c3                   	ret    

c001818a <Thr::getDriverBaseFromAddress(unsigned long)>:
c001818a:	56                   	push   esi
c001818b:	31 d2                	xor    edx,edx
c001818d:	53                   	push   ebx
c001818e:	8b 1d 40 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024f40
c0018194:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018198:	39 d3                	cmp    ebx,edx
c001819a:	7e 1b                	jle    c00181b7 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001819c:	8b 04 95 60 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaea0]
c00181a3:	39 c8                	cmp    eax,ecx
c00181a5:	77 0d                	ja     c00181b4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00181a7:	8b 34 95 60 4f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdb0a0]
c00181ae:	01 c6                	add    esi,eax
c00181b0:	39 ce                	cmp    esi,ecx
c00181b2:	77 05                	ja     c00181b9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00181b4:	42                   	inc    edx
c00181b5:	eb e1                	jmp    c0018198 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00181b7:	31 c0                	xor    eax,eax
c00181b9:	5b                   	pop    ebx
c00181ba:	5e                   	pop    esi
c00181bb:	c3                   	ret    

c00181bc <Thr::getDriverNameFromAddress(unsigned long)>:
c00181bc:	53                   	push   ebx
c00181bd:	31 c0                	xor    eax,eax
c00181bf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00181c3:	8b 1d 40 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024f40
c00181c9:	39 c3                	cmp    ebx,eax
c00181cb:	7e 22                	jle    c00181ef <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00181cd:	8b 14 85 60 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaea0]
c00181d4:	39 ca                	cmp    edx,ecx
c00181d6:	77 14                	ja     c00181ec <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00181d8:	03 14 85 60 4f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdb0a0]
c00181df:	39 ca                	cmp    edx,ecx
c00181e1:	76 09                	jbe    c00181ec <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00181e3:	8b 04 85 60 53 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaca0]
c00181ea:	eb 05                	jmp    c00181f1 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00181ec:	40                   	inc    eax
c00181ed:	eb da                	jmp    c00181c9 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00181ef:	31 c0                	xor    eax,eax
c00181f1:	5b                   	pop    ebx
c00181f2:	c3                   	ret    

c00181f3 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00181f3:	53                   	push   ebx
c00181f4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00181f8:	53                   	push   ebx
c00181f9:	e8 8c ff ff ff       	call   c001818a <Thr::getDriverBaseFromAddress(unsigned long)>
c00181fe:	5a                   	pop    edx
c00181ff:	31 d2                	xor    edx,edx
c0018201:	85 c0                	test   eax,eax
c0018203:	74 04                	je     c0018209 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0018205:	89 da                	mov    edx,ebx
c0018207:	29 c2                	sub    edx,eax
c0018209:	89 d0                	mov    eax,edx
c001820b:	5b                   	pop    ebx
c001820c:	c3                   	ret    

c001820d <Thr::loadDLL(char const*, bool)>:
c001820d:	55                   	push   ebp
c001820e:	57                   	push   edi
c001820f:	56                   	push   esi
c0018210:	53                   	push   ebx
c0018211:	81 ec 34 01 00 00    	sub    esp,0x134
c0018217:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001821e:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0018225:	56                   	push   esi
c0018226:	68 43 29 02 c0       	push   0xc0022943
c001822b:	e8 c5 6e ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0018230:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018237:	e8 ca 6d ff ff       	call   c000f006 <operator new(unsigned long)>
c001823c:	83 c4 0c             	add    esp,0xc
c001823f:	89 c3                	mov    ebx,eax
c0018241:	ff 35 34 57 02 c0    	push   DWORD PTR ds:0xc0025734
c0018247:	56                   	push   esi
c0018248:	50                   	push   eax
c0018249:	e8 d6 73 ff ff       	call   c000f624 <File::File(char const*, Process*)>
c001824e:	83 c4 0c             	add    esp,0xc
c0018251:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0018255:	50                   	push   eax
c0018256:	8d 44 24 20          	lea    eax,[esp+0x20]
c001825a:	50                   	push   eax
c001825b:	53                   	push   ebx
c001825c:	e8 d3 76 ff ff       	call   c000f934 <File::stat(unsigned long long*, bool*)>
c0018261:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018263:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018266:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018269:	83 c4 10             	add    esp,0x10
c001826c:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0018271:	75 0a                	jne    c001827d <Thr::loadDLL(char const*, bool)+0x70>
c0018273:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018277:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001827b:	75 3c                	jne    c00182b9 <Thr::loadDLL(char const*, bool)+0xac>
c001827d:	89 e8                	mov    eax,ebp
c001827f:	84 c0                	test   al,al
c0018281:	0f 84 3d 01 00 00    	je     c00183c4 <Thr::loadDLL(char const*, bool)+0x1b7>
c0018287:	50                   	push   eax
c0018288:	50                   	push   eax
c0018289:	68 54 29 02 c0       	push   0xc0022954
c001828e:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0018292:	53                   	push   ebx
c0018293:	e8 c1 84 fe ff       	call   c0000759 <strcpy>
c0018298:	58                   	pop    eax
c0018299:	5a                   	pop    edx
c001829a:	56                   	push   esi
c001829b:	53                   	push   ebx
c001829c:	e8 6f 85 fe ff       	call   c0000810 <strcat>
c00182a1:	59                   	pop    ecx
c00182a2:	5f                   	pop    edi
c00182a3:	68 67 29 02 c0       	push   0xc0022967
c00182a8:	53                   	push   ebx
c00182a9:	e8 62 85 fe ff       	call   c0000810 <strcat>
c00182ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00182b1:	e8 d4 d5 ff ff       	call   c001588a <Krnl::panic(char const*)>
c00182b6:	83 c4 10             	add    esp,0x10
c00182b9:	e8 f5 5f ff ff       	call   c000e2b3 <Virt::getAKernelVAS()>
c00182be:	51                   	push   ecx
c00182bf:	6a 03                	push   0x3
c00182c1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00182c5:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00182c9:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c00182cf:	83 d3 00             	adc    ebx,0x0
c00182d2:	89 ca                	mov    edx,ecx
c00182d4:	89 d1                	mov    ecx,edx
c00182d6:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c00182da:	51                   	push   ecx
c00182db:	50                   	push   eax
c00182dc:	e8 15 66 ff ff       	call   c000e8f6 <VAS::allocatePages(int, int)>
c00182e1:	89 34 24             	mov    DWORD PTR [esp],esi
c00182e4:	89 c3                	mov    ebx,eax
c00182e6:	e8 ec 83 fe ff       	call   c00006d7 <strlen>
c00182eb:	8b 3d 40 4f 02 c0    	mov    edi,DWORD PTR ds:0xc0024f40
c00182f1:	40                   	inc    eax
c00182f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00182f5:	e8 0a 3d ff ff       	call   c000c004 <malloc>
c00182fa:	89 04 bd 60 53 02 c0 	mov    DWORD PTR [edi*4-0x3ffdaca0],eax
c0018301:	5f                   	pop    edi
c0018302:	58                   	pop    eax
c0018303:	a1 40 4f 02 c0       	mov    eax,ds:0xc0024f40
c0018308:	56                   	push   esi
c0018309:	ff 34 85 60 53 02 c0 	push   DWORD PTR [eax*4-0x3ffdaca0]
c0018310:	e8 44 84 fe ff       	call   c0000759 <strcpy>
c0018315:	a1 40 4f 02 c0       	mov    eax,ds:0xc0024f40
c001831a:	8d 50 01             	lea    edx,[eax+0x1]
c001831d:	89 1c 85 60 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaea0],ebx
c0018324:	89 15 40 4f 02 c0    	mov    DWORD PTR ds:0xc0024f40,edx
c001832a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001832e:	83 c4 0c             	add    esp,0xc
c0018331:	89 14 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],edx
c0018338:	6a 01                	push   0x1
c001833a:	53                   	push   ebx
c001833b:	56                   	push   esi
c001833c:	e8 ab f6 ff ff       	call   c00179ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0018341:	83 c4 10             	add    esp,0x10
c0018344:	89 c7                	mov    edi,eax
c0018346:	fe c8                	dec    al
c0018348:	74 16                	je     c0018360 <Thr::loadDLL(char const*, bool)+0x153>
c001834a:	89 e8                	mov    eax,ebp
c001834c:	84 c0                	test   al,al
c001834e:	74 10                	je     c0018360 <Thr::loadDLL(char const*, bool)+0x153>
c0018350:	83 ec 0c             	sub    esp,0xc
c0018353:	68 69 29 02 c0       	push   0xc0022969
c0018358:	e8 2d d5 ff ff       	call   c001588a <Krnl::panic(char const*)>
c001835d:	83 c4 10             	add    esp,0x10
c0018360:	31 f6                	xor    esi,esi
c0018362:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018366:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001836a:	05 ff 0f 00 00       	add    eax,0xfff
c001836f:	83 d2 00             	adc    edx,0x0
c0018372:	0f ac d0 0c          	shrd   eax,edx,0xc
c0018376:	c1 ea 0c             	shr    edx,0xc
c0018379:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001837d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018381:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0018385:	ba 00 00 00 00       	mov    edx,0x0
c001838a:	89 d0                	mov    eax,edx
c001838c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0018390:	73 2c                	jae    c00183be <Thr::loadDLL(char const*, bool)+0x1b1>
c0018392:	e8 1c 5f ff ff       	call   c000e2b3 <Virt::getAKernelVAS()>
c0018397:	89 f5                	mov    ebp,esi
c0018399:	c1 e5 0c             	shl    ebp,0xc
c001839c:	52                   	push   edx
c001839d:	01 dd                	add    ebp,ebx
c001839f:	52                   	push   edx
c00183a0:	55                   	push   ebp
c00183a1:	50                   	push   eax
c00183a2:	e8 b7 60 ff ff       	call   c000e45e <VAS::getPageTableEntry(unsigned long)>
c00183a7:	83 c4 10             	add    esp,0x10
c00183aa:	f6 00 60             	test   BYTE PTR [eax],0x60
c00183ad:	75 0c                	jne    c00183bb <Thr::loadDLL(char const*, bool)+0x1ae>
c00183af:	83 ec 0c             	sub    esp,0xc
c00183b2:	55                   	push   ebp
c00183b3:	e8 6c 41 ff ff       	call   c000c524 <Phys::freePage(unsigned long)>
c00183b8:	83 c4 10             	add    esp,0x10
c00183bb:	46                   	inc    esi
c00183bc:	eb a4                	jmp    c0018362 <Thr::loadDLL(char const*, bool)+0x155>
c00183be:	89 f8                	mov    eax,edi
c00183c0:	84 c0                	test   al,al
c00183c2:	75 02                	jne    c00183c6 <Thr::loadDLL(char const*, bool)+0x1b9>
c00183c4:	31 db                	xor    ebx,ebx
c00183c6:	81 c4 2c 01 00 00    	add    esp,0x12c
c00183cc:	89 d8                	mov    eax,ebx
c00183ce:	5b                   	pop    ebx
c00183cf:	5e                   	pop    esi
c00183d0:	5f                   	pop    edi
c00183d1:	5d                   	pop    ebp
c00183d2:	c3                   	ret    

c00183d3 <Thr::executeDLL(unsigned long, void*)>:
c00183d3:	56                   	push   esi
c00183d4:	53                   	push   ebx
c00183d5:	51                   	push   ecx
c00183d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00183da:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00183de:	85 db                	test   ebx,ebx
c00183e0:	75 10                	jne    c00183f2 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00183e2:	83 ec 0c             	sub    esp,0xc
c00183e5:	68 88 29 02 c0       	push   0xc0022988
c00183ea:	e8 9b d4 ff ff       	call   c001588a <Krnl::panic(char const*)>
c00183ef:	83 c4 10             	add    esp,0x10
c00183f2:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00183f6:	89 d8                	mov    eax,ebx
c00183f8:	5a                   	pop    edx
c00183f9:	5b                   	pop    ebx
c00183fa:	5e                   	pop    esi
c00183fb:	ff e0                	jmp    eax
c00183fd:	90                   	nop

c00183fe <changeTSS>:
c00183fe:	83 ec 0c             	sub    esp,0xc
c0018401:	e8 14 c3 ff ff       	call   c001471a <thisCPU()>
c0018406:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001840c:	83 ec 08             	sub    esp,0x8
c001840f:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0018412:	05 7c 11 00 00       	add    eax,0x117c
c0018417:	c1 e1 15             	shl    ecx,0x15
c001841a:	ba 00 00 e8 01       	mov    edx,0x1e80000
c001841f:	29 ca                	sub    edx,ecx
c0018421:	52                   	push   edx
c0018422:	50                   	push   eax
c0018423:	e8 9e 56 ff ff       	call   c000dac6 <TSS::setESP(unsigned long)>
c0018428:	83 c4 1c             	add    esp,0x1c
c001842b:	c3                   	ret    

c001842c <Process::addArgs(char**)>:
c001842c:	57                   	push   edi
c001842d:	56                   	push   esi
c001842e:	53                   	push   ebx
c001842f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018433:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018437:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c0018441:	85 ff                	test   edi,edi
c0018443:	74 3d                	je     c0018482 <Process::addArgs(char**)+0x56>
c0018445:	8b 07                	mov    eax,DWORD PTR [edi]
c0018447:	85 c0                	test   eax,eax
c0018449:	74 37                	je     c0018482 <Process::addArgs(char**)+0x56>
c001844b:	31 db                	xor    ebx,ebx
c001844d:	83 ec 0c             	sub    esp,0xc
c0018450:	50                   	push   eax
c0018451:	e8 81 82 fe ff       	call   c00006d7 <strlen>
c0018456:	40                   	inc    eax
c0018457:	89 04 24             	mov    DWORD PTR [esp],eax
c001845a:	e8 a5 3b ff ff       	call   c000c004 <malloc>
c001845f:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c0018466:	5a                   	pop    edx
c0018467:	59                   	pop    ecx
c0018468:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001846b:	43                   	inc    ebx
c001846c:	50                   	push   eax
c001846d:	e8 e7 82 fe ff       	call   c0000759 <strcpy>
c0018472:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c0018478:	83 c4 10             	add    esp,0x10
c001847b:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001847e:	85 c0                	test   eax,eax
c0018480:	75 cb                	jne    c001844d <Process::addArgs(char**)+0x21>
c0018482:	5b                   	pop    ebx
c0018483:	5e                   	pop    esi
c0018484:	5f                   	pop    edi
c0018485:	c3                   	ret    

c0018486 <Process::Process(char const*, Process*, char**)>:
c0018486:	56                   	push   esi
c0018487:	53                   	push   ebx
c0018488:	83 ec 14             	sub    esp,0x14
c001848b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001848f:	05 0c 02 00 00       	add    eax,0x20c
c0018494:	bb 07 00 00 00       	mov    ebx,0x7
c0018499:	89 c6                	mov    esi,eax
c001849b:	85 db                	test   ebx,ebx
c001849d:	78 12                	js     c00184b1 <Process::Process(char const*, Process*, char**)+0x2b>
c001849f:	83 ec 0c             	sub    esp,0xc
c00184a2:	56                   	push   esi
c00184a3:	e8 02 76 00 00       	call   c001faaa <ThreadControlBlock::ThreadControlBlock()>
c00184a8:	83 c4 10             	add    esp,0x10
c00184ab:	83 c6 63             	add    esi,0x63
c00184ae:	4b                   	dec    ebx
c00184af:	eb ea                	jmp    c001849b <Process::Process(char const*, Process*, char**)+0x15>
c00184b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184b5:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00184bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184c0:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00184c9:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c00184ce:	8d 50 01             	lea    edx,[eax+0x1]
c00184d1:	89 15 04 3d 02 c0    	mov    DWORD PTR ds:0xc0023d04,edx
c00184d7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00184db:	89 02                	mov    DWORD PTR [edx],eax
c00184dd:	83 ec 0c             	sub    esp,0xc
c00184e0:	6a 10                	push   0x10
c00184e2:	e8 1f 6b ff ff       	call   c000f006 <operator new(unsigned long)>
c00184e7:	83 c4 10             	add    esp,0x10
c00184ea:	89 c3                	mov    ebx,eax
c00184ec:	83 ec 08             	sub    esp,0x8
c00184ef:	6a 00                	push   0x0
c00184f1:	53                   	push   ebx
c00184f2:	e8 a3 67 ff ff       	call   c000ec9a <VAS::VAS(bool)>
c00184f7:	83 c4 10             	add    esp,0x10
c00184fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184fe:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0018504:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018508:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018512:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018516:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001851a:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0018520:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018524:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001852a:	85 c0                	test   eax,eax
c001852c:	74 42                	je     c0018570 <Process::Process(char const*, Process*, char**)+0xea>
c001852e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018532:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018538:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001853e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018542:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0018548:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001854c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018552:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001855c:	05 0c 01 00 00       	add    eax,0x10c
c0018561:	83 ec 08             	sub    esp,0x8
c0018564:	52                   	push   edx
c0018565:	50                   	push   eax
c0018566:	e8 ee 81 fe ff       	call   c0000759 <strcpy>
c001856b:	83 c4 10             	add    esp,0x10
c001856e:	eb 5c                	jmp    c00185cc <Process::Process(char const*, Process*, char**)+0x146>
c0018570:	83 ec 0c             	sub    esp,0xc
c0018573:	68 60 12 00 00       	push   0x1260
c0018578:	e8 89 6a ff ff       	call   c000f006 <operator new(unsigned long)>
c001857d:	83 c4 10             	add    esp,0x10
c0018580:	89 c3                	mov    ebx,eax
c0018582:	83 ec 08             	sub    esp,0x8
c0018585:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018589:	53                   	push   ebx
c001858a:	e8 35 52 ff ff       	call   c000d7c4 <VgaText::VgaText(char const*)>
c001858f:	83 c4 10             	add    esp,0x10
c0018592:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018596:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001859c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185a0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00185a6:	83 ec 0c             	sub    esp,0xc
c00185a9:	50                   	push   eax
c00185aa:	e8 16 46 ff ff       	call   c000cbc5 <addToTerminalCycle(VgaText*)>
c00185af:	83 c4 10             	add    esp,0x10
c00185b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185b6:	05 0c 01 00 00       	add    eax,0x10c
c00185bb:	83 ec 08             	sub    esp,0x8
c00185be:	68 b2 29 02 c0       	push   0xc00229b2
c00185c3:	50                   	push   eax
c00185c4:	e8 90 81 fe ff       	call   c0000759 <strcpy>
c00185c9:	83 c4 10             	add    esp,0x10
c00185cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185d0:	83 c0 0c             	add    eax,0xc
c00185d3:	83 ec 08             	sub    esp,0x8
c00185d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00185da:	50                   	push   eax
c00185db:	e8 79 81 fe ff       	call   c0000759 <strcpy>
c00185e0:	83 c4 10             	add    esp,0x10
c00185e3:	83 ec 08             	sub    esp,0x8
c00185e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00185ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00185ee:	e8 39 fe ff ff       	call   c001842c <Process::addArgs(char**)>
c00185f3:	83 c4 10             	add    esp,0x10
c00185f6:	83 ec 08             	sub    esp,0x8
c00185f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00185fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018601:	e8 ad ee ff ff       	call   c00174b3 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0018606:	83 c4 10             	add    esp,0x10
c0018609:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001860d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018611:	83 f0 01             	xor    eax,0x1
c0018614:	88 c2                	mov    dl,al
c0018616:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001861a:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c0018620:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018625:	83 ec 08             	sub    esp,0x8
c0018628:	50                   	push   eax
c0018629:	68 b0 2a 02 c0       	push   0xc0022ab0
c001862e:	e8 c2 6a ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0018633:	83 c4 10             	add    esp,0x10
c0018636:	90                   	nop
c0018637:	83 c4 14             	add    esp,0x14
c001863a:	5b                   	pop    ebx
c001863b:	5e                   	pop    esi
c001863c:	c3                   	ret    
c001863d:	90                   	nop

c001863e <Process::Process(bool, char const*, Process*, char**)>:
c001863e:	56                   	push   esi
c001863f:	53                   	push   ebx
c0018640:	83 ec 14             	sub    esp,0x14
c0018643:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018647:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001864b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001864f:	05 0c 02 00 00       	add    eax,0x20c
c0018654:	bb 07 00 00 00       	mov    ebx,0x7
c0018659:	89 c6                	mov    esi,eax
c001865b:	85 db                	test   ebx,ebx
c001865d:	78 12                	js     c0018671 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001865f:	83 ec 0c             	sub    esp,0xc
c0018662:	56                   	push   esi
c0018663:	e8 42 74 00 00       	call   c001faaa <ThreadControlBlock::ThreadControlBlock()>
c0018668:	83 c4 10             	add    esp,0x10
c001866b:	83 c6 63             	add    esi,0x63
c001866e:	4b                   	dec    ebx
c001866f:	eb ea                	jmp    c001865b <Process::Process(bool, char const*, Process*, char**)+0x1d>
c0018671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018675:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001867c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018680:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0018689:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c001868e:	8d 50 01             	lea    edx,[eax+0x1]
c0018691:	89 15 04 3d 02 c0    	mov    DWORD PTR ds:0xc0023d04,edx
c0018697:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001869b:	89 02                	mov    DWORD PTR [edx],eax
c001869d:	83 ec 0c             	sub    esp,0xc
c00186a0:	6a 10                	push   0x10
c00186a2:	e8 5f 69 ff ff       	call   c000f006 <operator new(unsigned long)>
c00186a7:	83 c4 10             	add    esp,0x10
c00186aa:	89 c3                	mov    ebx,eax
c00186ac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00186b1:	83 ec 08             	sub    esp,0x8
c00186b4:	50                   	push   eax
c00186b5:	53                   	push   ebx
c00186b6:	e8 df 65 ff ff       	call   c000ec9a <VAS::VAS(bool)>
c00186bb:	83 c4 10             	add    esp,0x10
c00186be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186c2:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c00186c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186cc:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c00186d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186da:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00186de:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c00186e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186e8:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00186ee:	85 c0                	test   eax,eax
c00186f0:	74 42                	je     c0018734 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c00186f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186f6:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00186fc:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018706:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001870c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018710:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018716:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001871c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018720:	05 0c 01 00 00       	add    eax,0x10c
c0018725:	83 ec 08             	sub    esp,0x8
c0018728:	52                   	push   edx
c0018729:	50                   	push   eax
c001872a:	e8 2a 80 fe ff       	call   c0000759 <strcpy>
c001872f:	83 c4 10             	add    esp,0x10
c0018732:	eb 5c                	jmp    c0018790 <Process::Process(bool, char const*, Process*, char**)+0x152>
c0018734:	83 ec 0c             	sub    esp,0xc
c0018737:	68 60 12 00 00       	push   0x1260
c001873c:	e8 c5 68 ff ff       	call   c000f006 <operator new(unsigned long)>
c0018741:	83 c4 10             	add    esp,0x10
c0018744:	89 c3                	mov    ebx,eax
c0018746:	83 ec 08             	sub    esp,0x8
c0018749:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001874d:	53                   	push   ebx
c001874e:	e8 71 50 ff ff       	call   c000d7c4 <VgaText::VgaText(char const*)>
c0018753:	83 c4 10             	add    esp,0x10
c0018756:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001875a:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c0018760:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018764:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001876a:	83 ec 0c             	sub    esp,0xc
c001876d:	50                   	push   eax
c001876e:	e8 52 44 ff ff       	call   c000cbc5 <addToTerminalCycle(VgaText*)>
c0018773:	83 c4 10             	add    esp,0x10
c0018776:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001877a:	05 0c 01 00 00       	add    eax,0x10c
c001877f:	83 ec 08             	sub    esp,0x8
c0018782:	68 b2 29 02 c0       	push   0xc00229b2
c0018787:	50                   	push   eax
c0018788:	e8 cc 7f fe ff       	call   c0000759 <strcpy>
c001878d:	83 c4 10             	add    esp,0x10
c0018790:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018794:	83 c0 0c             	add    eax,0xc
c0018797:	83 ec 08             	sub    esp,0x8
c001879a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001879e:	50                   	push   eax
c001879f:	e8 b5 7f fe ff       	call   c0000759 <strcpy>
c00187a4:	83 c4 10             	add    esp,0x10
c00187a7:	83 ec 08             	sub    esp,0x8
c00187aa:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00187ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187b2:	e8 75 fc ff ff       	call   c001842c <Process::addArgs(char**)>
c00187b7:	83 c4 10             	add    esp,0x10
c00187ba:	90                   	nop
c00187bb:	83 c4 14             	add    esp,0x14
c00187be:	5b                   	pop    ebx
c00187bf:	5e                   	pop    esi
c00187c0:	c3                   	ret    

c00187c1 <disableIRQs()>:
c00187c1:	fa                   	cli    
c00187c2:	ff 05 0c 57 02 c0    	inc    DWORD PTR ds:0xc002570c
c00187c8:	c3                   	ret    

c00187c9 <getIRQNestingLevel()>:
c00187c9:	a1 0c 57 02 c0       	mov    eax,ds:0xc002570c
c00187ce:	c3                   	ret    

c00187cf <enableIRQs()>:
c00187cf:	a1 0c 57 02 c0       	mov    eax,ds:0xc002570c
c00187d4:	48                   	dec    eax
c00187d5:	a3 0c 57 02 c0       	mov    ds:0xc002570c,eax
c00187da:	75 01                	jne    c00187dd <enableIRQs()+0xe>
c00187dc:	fb                   	sti    
c00187dd:	c3                   	ret    

c00187de <lockScheduler()>:
c00187de:	eb e1                	jmp    c00187c1 <disableIRQs()>

c00187e0 <unlockScheduler()>:
c00187e0:	eb ed                	jmp    c00187cf <enableIRQs()>

c00187e2 <userModeEntryPoint(void*)>:
c00187e2:	83 ec 0c             	sub    esp,0xc
c00187e5:	e8 f6 ff ff ff       	call   c00187e0 <unlockScheduler()>
c00187ea:	fb                   	sti    
c00187eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187f0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00187f3:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c00187f9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00187fd:	83 c4 0c             	add    esp,0xc
c0018800:	e9 93 7a fe ff       	jmp    c0000298 <goToUsermode>

c0018805 <lockStuff()>:
c0018805:	e8 b7 ff ff ff       	call   c00187c1 <disableIRQs()>
c001880a:	ff 05 08 57 02 c0    	inc    DWORD PTR ds:0xc0025708
c0018810:	c3                   	ret    

c0018811 <taskStartupFunction>:
c0018811:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018816:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018819:	c3                   	ret    

c001881a <updateTimeUsed()>:
c001881a:	57                   	push   edi
c001881b:	56                   	push   esi
c001881c:	53                   	push   ebx
c001881d:	e8 f8 be ff ff       	call   c001471a <thisCPU()>
c0018822:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0018829:	74 49                	je     c0018874 <updateTimeUsed()+0x5a>
c001882b:	0f 31                	rdtsc  
c001882d:	89 c1                	mov    ecx,eax
c001882f:	a3 48 57 02 c0       	mov    ds:0xc0025748,eax
c0018834:	2b 0d 38 57 02 c0    	sub    ecx,DWORD PTR ds:0xc0025738
c001883a:	89 d3                	mov    ebx,edx
c001883c:	89 0d 40 57 02 c0    	mov    DWORD PTR ds:0xc0025740,ecx
c0018842:	1b 1d 3c 57 02 c0    	sbb    ebx,DWORD PTR ds:0xc002573c
c0018848:	a3 38 57 02 c0       	mov    ds:0xc0025738,eax
c001884d:	89 1d 44 57 02 c0    	mov    DWORD PTR ds:0xc0025744,ebx
c0018853:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018858:	89 15 4c 57 02 c0    	mov    DWORD PTR ds:0xc002574c,edx
c001885e:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0018861:	89 15 3c 57 02 c0    	mov    DWORD PTR ds:0xc002573c,edx
c0018867:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001886a:	01 f1                	add    ecx,esi
c001886c:	11 fb                	adc    ebx,edi
c001886e:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c0018871:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0018874:	5b                   	pop    ebx
c0018875:	5e                   	pop    esi
c0018876:	5f                   	pop    edi
c0018877:	c3                   	ret    

c0018878 <switchToThread(ThreadControlBlock*)>:
c0018878:	53                   	push   ebx
c0018879:	83 ec 08             	sub    esp,0x8
c001887c:	a1 08 57 02 c0       	mov    eax,ds:0xc0025708
c0018881:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018885:	85 c0                	test   eax,eax
c0018887:	75 30                	jne    c00188b9 <switchToThread(ThreadControlBlock*)+0x41>
c0018889:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001888c:	3c ff                	cmp    al,0xff
c001888e:	74 25                	je     c00188b5 <switchToThread(ThreadControlBlock*)+0x3d>
c0018890:	0f b6 d0             	movzx  edx,al
c0018893:	b8 84 03 00 00       	mov    eax,0x384
c0018898:	29 d0                	sub    eax,edx
c001889a:	c1 e0 10             	shl    eax,0x10
c001889d:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00188a0:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00188a3:	e8 72 ff ff ff       	call   c001881a <updateTimeUsed()>
c00188a8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00188ac:	83 c4 08             	add    esp,0x8
c00188af:	5b                   	pop    ebx
c00188b0:	e9 1c 7a fe ff       	jmp    c00002d1 <switchToThreadASM>
c00188b5:	31 c0                	xor    eax,eax
c00188b7:	eb e7                	jmp    c00188a0 <switchToThread(ThreadControlBlock*)+0x28>
c00188b9:	c7 05 04 57 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025704,0x1
c00188c3:	83 c4 08             	add    esp,0x8
c00188c6:	5b                   	pop    ebx
c00188c7:	c3                   	ret    

c00188c8 <Semaphore::Semaphore(int)>:
c00188c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00188d0:	89 10                	mov    DWORD PTR [eax],edx
c00188d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188d6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00188dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00188e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188ec:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00188f3:	90                   	nop
c00188f4:	c3                   	ret    
c00188f5:	90                   	nop

c00188f6 <Mutex::Mutex()>:
c00188f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188fa:	6a 01                	push   0x1
c00188fc:	50                   	push   eax
c00188fd:	e8 c6 ff ff ff       	call   c00188c8 <Semaphore::Semaphore(int)>
c0018902:	83 c4 08             	add    esp,0x8
c0018905:	90                   	nop
c0018906:	c3                   	ret    
c0018907:	90                   	nop

c0018908 <Process::createThread(void (*)(void*), void*, int)>:
c0018908:	55                   	push   ebp
c0018909:	31 c9                	xor    ecx,ecx
c001890b:	57                   	push   edi
c001890c:	56                   	push   esi
c001890d:	53                   	push   ebx
c001890e:	83 ec 1c             	sub    esp,0x1c
c0018911:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018915:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001891c:	89 f2                	mov    edx,esi
c001891e:	0f b7 c2             	movzx  eax,dx
c0018921:	83 e2 01             	and    edx,0x1
c0018924:	74 14                	je     c001893a <Process::createThread(void (*)(void*), void*, int)+0x32>
c0018926:	d1 f8                	sar    eax,1
c0018928:	41                   	inc    ecx
c0018929:	89 c2                	mov    edx,eax
c001892b:	83 f9 10             	cmp    ecx,0x10
c001892e:	75 ee                	jne    c001891e <Process::createThread(void (*)(void*), void*, int)+0x16>
c0018930:	83 c4 1c             	add    esp,0x1c
c0018933:	31 c0                	xor    eax,eax
c0018935:	5b                   	pop    ebx
c0018936:	5e                   	pop    esi
c0018937:	5f                   	pop    edi
c0018938:	5d                   	pop    ebp
c0018939:	c3                   	ret    
c001893a:	83 ec 08             	sub    esp,0x8
c001893d:	b8 01 00 00 00       	mov    eax,0x1
c0018942:	d3 e0                	shl    eax,cl
c0018944:	09 c6                	or     esi,eax
c0018946:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001894c:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0018953:	8d 34 09             	lea    esi,[ecx+ecx*1]
c0018956:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018959:	01 ce                	add    esi,ecx
c001895b:	89 f0                	mov    eax,esi
c001895d:	c1 e0 05             	shl    eax,0x5
c0018960:	01 c6                	add    esi,eax
c0018962:	8d 04 33             	lea    eax,[ebx+esi*1]
c0018965:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001896b:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0018971:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018975:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001897b:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0018981:	89 ca                	mov    edx,ecx
c0018983:	f7 da                	neg    edx
c0018985:	c1 e2 15             	shl    edx,0x15
c0018988:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001898e:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018994:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018998:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00189a2:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c00189a8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00189ac:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00189b2:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00189bc:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00189c6:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c00189cd:	50                   	push   eax
c00189ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00189d2:	68 28 57 02 c0       	push   0xc0025728
c00189d7:	e8 26 6f 00 00       	call   c001f902 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00189dc:	83 c4 10             	add    esp,0x10
c00189df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00189e3:	83 c4 1c             	add    esp,0x1c
c00189e6:	5b                   	pop    ebx
c00189e7:	5e                   	pop    esi
c00189e8:	5f                   	pop    edi
c00189e9:	5d                   	pop    ebp
c00189ea:	c3                   	ret    
c00189eb:	90                   	nop

c00189ec <Process::createUserThread()>:
c00189ec:	83 ec 0c             	sub    esp,0xc
c00189ef:	68 80 00 00 00       	push   0x80
c00189f4:	6a 00                	push   0x0
c00189f6:	68 e2 87 01 c0       	push   0xc00187e2
c00189fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00189ff:	e8 04 ff ff ff       	call   c0018908 <Process::createThread(void (*)(void*), void*, int)>
c0018a04:	83 c4 1c             	add    esp,0x1c
c0018a07:	c3                   	ret    

c0018a08 <setupMultitasking(void (*)())>:
c0018a08:	56                   	push   esi
c0018a09:	53                   	push   ebx
c0018a0a:	53                   	push   ebx
c0018a0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018a0f:	eb 10                	jmp    c0018a21 <setupMultitasking(void (*)())+0x19>
c0018a11:	83 ec 0c             	sub    esp,0xc
c0018a14:	68 28 57 02 c0       	push   0xc0025728
c0018a19:	e8 36 6e 00 00       	call   c001f854 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018a1e:	83 c4 10             	add    esp,0x10
c0018a21:	83 ec 0c             	sub    esp,0xc
c0018a24:	68 28 57 02 c0       	push   0xc0025728
c0018a29:	e8 0a 6e 00 00       	call   c001f838 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018a2e:	83 c4 10             	add    esp,0x10
c0018a31:	84 c0                	test   al,al
c0018a33:	74 dc                	je     c0018a11 <setupMultitasking(void (*)())+0x9>
c0018a35:	83 ec 0c             	sub    esp,0xc
c0018a38:	68 3b 07 00 00       	push   0x73b
c0018a3d:	e8 c4 65 ff ff       	call   c000f006 <operator new(unsigned long)>
c0018a42:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018a49:	89 c3                	mov    ebx,eax
c0018a4b:	6a 00                	push   0x0
c0018a4d:	68 b6 29 02 c0       	push   0xc00229b6
c0018a52:	6a 01                	push   0x1
c0018a54:	50                   	push   eax
c0018a55:	e8 e4 fb ff ff       	call   c001863e <Process::Process(bool, char const*, Process*, char**)>
c0018a5a:	83 c4 18             	add    esp,0x18
c0018a5d:	89 1d 34 57 02 c0    	mov    DWORD PTR ds:0xc0025734,ebx
c0018a63:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0018a69:	68 d8 2a 02 c0       	push   0xc0022ad8
c0018a6e:	e8 82 66 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0018a73:	58                   	pop    eax
c0018a74:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0018a7a:	e8 ba 48 ff ff       	call   c000d339 <setActiveTerminal(VgaText*)>
c0018a7f:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c0018a87:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018a8d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018a90:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0018a9a:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018aa0:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0018aa6:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018ab0:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0018aba:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018ac4:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018aca:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018ad0:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018ada:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018ae0:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018aea:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018af0:	5a                   	pop    edx
c0018af1:	59                   	pop    ecx
c0018af2:	68 b2 29 02 c0       	push   0xc00229b2
c0018af7:	50                   	push   eax
c0018af8:	e8 5c 7c fe ff       	call   c0000759 <strcpy>
c0018afd:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0018b04:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018b08:	83 c4 14             	add    esp,0x14
c0018b0b:	5b                   	pop    ebx
c0018b0c:	5e                   	pop    esi
c0018b0d:	e9 b1 77 fe ff       	jmp    c00002c3 <switchToThreadASMFirstTime>

c0018b12 <schedule()>:
c0018b12:	a1 08 57 02 c0       	mov    eax,ds:0xc0025708
c0018b17:	85 c0                	test   eax,eax
c0018b19:	74 0b                	je     c0018b26 <schedule()+0x14>
c0018b1b:	c7 05 04 57 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025704,0x1
c0018b25:	c3                   	ret    
c0018b26:	53                   	push   ebx
c0018b27:	83 ec 14             	sub    esp,0x14
c0018b2a:	68 28 57 02 c0       	push   0xc0025728
c0018b2f:	e8 04 6d 00 00       	call   c001f838 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018b34:	83 c4 10             	add    esp,0x10
c0018b37:	84 c0                	test   al,al
c0018b39:	75 38                	jne    c0018b73 <schedule()+0x61>
c0018b3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018b40:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018b43:	4a                   	dec    edx
c0018b44:	74 32                	je     c0018b78 <schedule()+0x66>
c0018b46:	83 ec 0c             	sub    esp,0xc
c0018b49:	68 28 57 02 c0       	push   0xc0025728
c0018b4e:	e8 dd 6c 00 00       	call   c001f830 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018b53:	c7 04 24 28 57 02 c0 	mov    DWORD PTR [esp],0xc0025728
c0018b5a:	89 c3                	mov    ebx,eax
c0018b5c:	e8 f3 6c 00 00       	call   c001f854 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018b61:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018b68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018b6b:	e8 08 fd ff ff       	call   c0018878 <switchToThread(ThreadControlBlock*)>
c0018b70:	83 c4 10             	add    esp,0x10
c0018b73:	83 c4 08             	add    esp,0x8
c0018b76:	5b                   	pop    ebx
c0018b77:	c3                   	ret    
c0018b78:	83 ec 08             	sub    esp,0x8
c0018b7b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018b82:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018b88:	68 28 57 02 c0       	push   0xc0025728
c0018b8d:	e8 70 6d 00 00       	call   c001f902 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018b92:	83 c4 10             	add    esp,0x10
c0018b95:	eb af                	jmp    c0018b46 <schedule()+0x34>

c0018b97 <unlockStuff()>:
c0018b97:	a1 08 57 02 c0       	mov    eax,ds:0xc0025708
c0018b9c:	48                   	dec    eax
c0018b9d:	a3 08 57 02 c0       	mov    ds:0xc0025708,eax
c0018ba2:	75 09                	jne    c0018bad <unlockStuff()+0x16>
c0018ba4:	a1 04 57 02 c0       	mov    eax,ds:0xc0025704
c0018ba9:	85 c0                	test   eax,eax
c0018bab:	75 05                	jne    c0018bb2 <unlockStuff()+0x1b>
c0018bad:	e9 1d fc ff ff       	jmp    c00187cf <enableIRQs()>
c0018bb2:	83 ec 0c             	sub    esp,0xc
c0018bb5:	c7 05 04 57 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025704,0x0
c0018bbf:	e8 4e ff ff ff       	call   c0018b12 <schedule()>
c0018bc4:	83 c4 0c             	add    esp,0xc
c0018bc7:	e9 03 fc ff ff       	jmp    c00187cf <enableIRQs()>

c0018bcc <Semaphore::tryAcquire()>:
c0018bcc:	83 ec 0c             	sub    esp,0xc
c0018bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018bd3:	e8 2d fc ff ff       	call   c0018805 <lockStuff()>
c0018bd8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018bdb:	3b 10                	cmp    edx,DWORD PTR [eax]
c0018bdd:	7c 0b                	jl     c0018bea <Semaphore::tryAcquire()+0x1e>
c0018bdf:	e8 b3 ff ff ff       	call   c0018b97 <unlockStuff()>
c0018be4:	31 c0                	xor    eax,eax
c0018be6:	83 c4 0c             	add    esp,0xc
c0018be9:	c3                   	ret    
c0018bea:	42                   	inc    edx
c0018beb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018bee:	e8 a4 ff ff ff       	call   c0018b97 <unlockStuff()>
c0018bf3:	b0 01                	mov    al,0x1
c0018bf5:	83 c4 0c             	add    esp,0xc
c0018bf8:	c3                   	ret    
c0018bf9:	90                   	nop

c0018bfa <Semaphore::assertLocked(char const*)>:
c0018bfa:	83 ec 0c             	sub    esp,0xc
c0018bfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c01:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018c05:	e8 fb fb ff ff       	call   c0018805 <lockStuff()>
c0018c0a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0018c0c:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c0018c0f:	7c 05                	jl     c0018c16 <Semaphore::assertLocked(char const*)+0x1c>
c0018c11:	83 c4 0c             	add    esp,0xc
c0018c14:	eb 81                	jmp    c0018b97 <unlockStuff()>
c0018c16:	83 ec 0c             	sub    esp,0xc
c0018c19:	52                   	push   edx
c0018c1a:	e8 6b cc ff ff       	call   c001588a <Krnl::panic(char const*)>
c0018c1f:	83 c4 10             	add    esp,0x10
c0018c22:	83 c4 0c             	add    esp,0xc
c0018c25:	e9 6d ff ff ff       	jmp    c0018b97 <unlockStuff()>

c0018c2a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018c2a:	83 ec 0c             	sub    esp,0xc
c0018c2d:	e8 97 fb ff ff       	call   c00187c9 <getIRQNestingLevel()>
c0018c32:	83 ec 08             	sub    esp,0x8
c0018c35:	50                   	push   eax
c0018c36:	68 0c 2b 02 c0       	push   0xc0022b0c
c0018c3b:	e8 b5 64 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0018c40:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018c44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018c49:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018c4c:	e8 c1 fe ff ff       	call   c0018b12 <schedule()>
c0018c51:	e8 8a fb ff ff       	call   c00187e0 <unlockScheduler()>
c0018c56:	e8 6e fb ff ff       	call   c00187c9 <getIRQNestingLevel()>
c0018c5b:	5a                   	pop    edx
c0018c5c:	59                   	pop    ecx
c0018c5d:	50                   	push   eax
c0018c5e:	68 40 2b 02 c0       	push   0xc0022b40
c0018c63:	e8 8d 64 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0018c68:	83 c4 1c             	add    esp,0x1c
c0018c6b:	c3                   	ret    

c0018c6c <blockTask(TaskState)>:
c0018c6c:	83 ec 0c             	sub    esp,0xc
c0018c6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018c73:	e8 66 fb ff ff       	call   c00187de <lockScheduler()>
c0018c78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018c7d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018c80:	e8 8d fe ff ff       	call   c0018b12 <schedule()>
c0018c85:	83 c4 0c             	add    esp,0xc
c0018c88:	e9 53 fb ff ff       	jmp    c00187e0 <unlockScheduler()>

c0018c8d <waitTask(int, int*, int)>:
c0018c8d:	83 ec 18             	sub    esp,0x18
c0018c90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018c95:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018c99:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018c9c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018ca0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ca5:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0018ca8:	6a 07                	push   0x7
c0018caa:	e8 bd ff ff ff       	call   c0018c6c <blockTask(TaskState)>
c0018caf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018cb4:	83 c4 10             	add    esp,0x10
c0018cb7:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0018cba:	85 d2                	test   edx,edx
c0018cbc:	74 0a                	je     c0018cc8 <waitTask(int, int*, int)+0x3b>
c0018cbe:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0018cc1:	89 02                	mov    DWORD PTR [edx],eax
c0018cc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018cc8:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0018ccb:	83 c4 0c             	add    esp,0xc
c0018cce:	c3                   	ret    

c0018ccf <nanoSleepUntil(unsigned long long)>:
c0018ccf:	83 ec 0c             	sub    esp,0xc
c0018cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cd6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018cda:	3b 05 50 49 02 c0    	cmp    eax,DWORD PTR ds:0xc0024950
c0018ce0:	89 d1                	mov    ecx,edx
c0018ce2:	1b 0d 54 49 02 c0    	sbb    ecx,DWORD PTR ds:0xc0024954
c0018ce8:	73 04                	jae    c0018cee <nanoSleepUntil(unsigned long long)+0x1f>
c0018cea:	83 c4 0c             	add    esp,0xc
c0018ced:	c3                   	ret    
c0018cee:	e8 12 fb ff ff       	call   c0018805 <lockStuff()>
c0018cf3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018cf9:	83 ec 08             	sub    esp,0x8
c0018cfc:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c0018cff:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c0018d02:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018d08:	68 1c 57 02 c0       	push   0xc002571c
c0018d0d:	e8 f0 6b 00 00       	call   c001f902 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018d12:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018d19:	e8 4e ff ff ff       	call   c0018c6c <blockTask(TaskState)>
c0018d1e:	83 c4 1c             	add    esp,0x1c
c0018d21:	e9 71 fe ff ff       	jmp    c0018b97 <unlockStuff()>

c0018d26 <nanoSleep(unsigned long long)>:
c0018d26:	a1 50 49 02 c0       	mov    eax,ds:0xc0024950
c0018d2b:	8b 15 54 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024954
c0018d31:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018d35:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0018d39:	eb 94                	jmp    c0018ccf <nanoSleepUntil(unsigned long long)>

c0018d3b <sleep(unsigned long long)>:
c0018d3b:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0018d43:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0018d48:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0018d4c:	01 ca                	add    edx,ecx
c0018d4e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018d52:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018d56:	eb ce                	jmp    c0018d26 <nanoSleep(unsigned long long)>

c0018d58 <Semaphore::acquire()>:
c0018d58:	83 ec 0c             	sub    esp,0xc
c0018d5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d5f:	e8 a1 fa ff ff       	call   c0018805 <lockStuff()>
c0018d64:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018d67:	3b 10                	cmp    edx,DWORD PTR [eax]
c0018d69:	7d 0c                	jge    c0018d77 <Semaphore::acquire()+0x1f>
c0018d6b:	42                   	inc    edx
c0018d6c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018d6f:	83 c4 0c             	add    esp,0xc
c0018d72:	e9 20 fe ff ff       	jmp    c0018b97 <unlockStuff()>
c0018d77:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018d7d:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c0018d84:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018d87:	85 d2                	test   edx,edx
c0018d89:	74 2a                	je     c0018db5 <Semaphore::acquire()+0x5d>
c0018d8b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0018d8e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018d94:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c0018d97:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018d9d:	83 ec 0c             	sub    esp,0xc
c0018da0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0018da3:	6a 05                	push   0x5
c0018da5:	e8 c2 fe ff ff       	call   c0018c6c <blockTask(TaskState)>
c0018daa:	83 c4 10             	add    esp,0x10
c0018dad:	83 c4 0c             	add    esp,0xc
c0018db0:	e9 e2 fd ff ff       	jmp    c0018b97 <unlockStuff()>
c0018db5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018dbb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0018dbe:	eb d7                	jmp    c0018d97 <Semaphore::acquire()+0x3f>

c0018dc0 <taskReturned>:
c0018dc0:	83 ec 18             	sub    esp,0x18
c0018dc3:	68 74 2b 02 c0       	push   0xc0022b74
c0018dc8:	e8 bd ca ff ff       	call   c001588a <Krnl::panic(char const*)>
c0018dcd:	83 c4 10             	add    esp,0x10
c0018dd0:	83 ec 0c             	sub    esp,0xc
c0018dd3:	6a 02                	push   0x2
c0018dd5:	e8 92 fe ff ff       	call   c0018c6c <blockTask(TaskState)>
c0018dda:	e8 ff f9 ff ff       	call   c00187de <lockScheduler()>
c0018ddf:	e8 2e fd ff ff       	call   c0018b12 <schedule()>
c0018de4:	e8 f7 f9 ff ff       	call   c00187e0 <unlockScheduler()>
c0018de9:	83 c4 10             	add    esp,0x10
c0018dec:	eb e2                	jmp    c0018dd0 <taskReturned+0x10>

c0018dee <unblockTask(ThreadControlBlock*)>:
c0018dee:	53                   	push   ebx
c0018def:	83 ec 08             	sub    esp,0x8
c0018df2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018df6:	e8 e3 f9 ff ff       	call   c00187de <lockScheduler()>
c0018dfb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018dfe:	85 c0                	test   eax,eax
c0018e00:	74 5c                	je     c0018e5e <unblockTask(ThreadControlBlock*)+0x70>
c0018e02:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018e05:	48                   	dec    eax
c0018e06:	74 31                	je     c0018e39 <unblockTask(ThreadControlBlock*)+0x4b>
c0018e08:	83 ec 0c             	sub    esp,0xc
c0018e0b:	68 28 57 02 c0       	push   0xc0025728
c0018e10:	e8 1b 6a 00 00       	call   c001f830 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018e15:	83 c4 10             	add    esp,0x10
c0018e18:	85 c0                	test   eax,eax
c0018e1a:	75 17                	jne    c0018e33 <unblockTask(ThreadControlBlock*)+0x45>
c0018e1c:	eb 65                	jmp    c0018e83 <unblockTask(ThreadControlBlock*)+0x95>
c0018e1e:	83 ec 08             	sub    esp,0x8
c0018e21:	50                   	push   eax
c0018e22:	68 28 57 02 c0       	push   0xc0025728
c0018e27:	e8 14 6d 00 00       	call   c001fb40 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018e2c:	83 c4 10             	add    esp,0x10
c0018e2f:	85 c0                	test   eax,eax
c0018e31:	74 50                	je     c0018e83 <unblockTask(ThreadControlBlock*)+0x95>
c0018e33:	39 c3                	cmp    ebx,eax
c0018e35:	75 e7                	jne    c0018e1e <unblockTask(ThreadControlBlock*)+0x30>
c0018e37:	eb 1c                	jmp    c0018e55 <unblockTask(ThreadControlBlock*)+0x67>
c0018e39:	83 ec 0c             	sub    esp,0xc
c0018e3c:	68 64 2c 02 c0       	push   0xc0022c64
c0018e41:	e8 af 62 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0018e46:	c7 04 24 f0 2b 02 c0 	mov    DWORD PTR [esp],0xc0022bf0
c0018e4d:	e8 a3 62 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0018e52:	83 c4 10             	add    esp,0x10
c0018e55:	83 c4 08             	add    esp,0x8
c0018e58:	5b                   	pop    ebx
c0018e59:	e9 82 f9 ff ff       	jmp    c00187e0 <unlockScheduler()>
c0018e5e:	83 ec 0c             	sub    esp,0xc
c0018e61:	68 a8 2b 02 c0       	push   0xc0022ba8
c0018e66:	e8 8a 62 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0018e6b:	c7 04 24 f0 2b 02 c0 	mov    DWORD PTR [esp],0xc0022bf0
c0018e72:	e8 7e 62 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0018e77:	83 c4 10             	add    esp,0x10
c0018e7a:	83 c4 08             	add    esp,0x8
c0018e7d:	5b                   	pop    ebx
c0018e7e:	e9 5d f9 ff ff       	jmp    c00187e0 <unlockScheduler()>
c0018e83:	83 ec 08             	sub    esp,0x8
c0018e86:	53                   	push   ebx
c0018e87:	68 28 57 02 c0       	push   0xc0025728
c0018e8c:	e8 71 6a 00 00       	call   c001f902 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018e91:	83 c4 10             	add    esp,0x10
c0018e94:	83 c4 08             	add    esp,0x8
c0018e97:	5b                   	pop    ebx
c0018e98:	e9 43 f9 ff ff       	jmp    c00187e0 <unlockScheduler()>

c0018e9d <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018e9d:	55                   	push   ebp
c0018e9e:	57                   	push   edi
c0018e9f:	56                   	push   esi
c0018ea0:	53                   	push   ebx
c0018ea1:	83 ec 1c             	sub    esp,0x1c
c0018ea4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018ea8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018eab:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c0018eb1:	85 c9                	test   ecx,ecx
c0018eb3:	7e 20                	jle    c0018ed5 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c0018eb5:	31 f6                	xor    esi,esi
c0018eb7:	83 ec 0c             	sub    esp,0xc
c0018eba:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c0018ec1:	46                   	inc    esi
c0018ec2:	e8 4d 31 ff ff       	call   c000c014 <free>
c0018ec7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018eca:	83 c4 10             	add    esp,0x10
c0018ecd:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c0018ed3:	7f e2                	jg     c0018eb7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c0018ed5:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018edf:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0018ee4:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0018ee7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018eea:	d3 c0                	rol    eax,cl
c0018eec:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c0018ef3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018ef6:	89 f7                	mov    edi,esi
c0018ef8:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c0018f00:	0f 85 4f 01 00 00    	jne    c0019055 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c0018f06:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018f0c:	85 c0                	test   eax,eax
c0018f0e:	0f 84 aa 00 00 00    	je     c0018fbe <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c0018f14:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0018f17:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018f1b:	31 c9                	xor    ecx,ecx
c0018f1d:	eb 10                	jmp    c0018f2f <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c0018f1f:	41                   	inc    ecx
c0018f20:	83 f9 10             	cmp    ecx,0x10
c0018f23:	0f 84 95 00 00 00    	je     c0018fbe <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c0018f29:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018f2f:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c0018f36:	d3 fa                	sar    edx,cl
c0018f38:	83 e2 01             	and    edx,0x1
c0018f3b:	74 e2                	je     c0018f1f <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018f3d:	8d 14 09             	lea    edx,[ecx+ecx*1]
c0018f40:	01 ca                	add    edx,ecx
c0018f42:	89 d5                	mov    ebp,edx
c0018f44:	c1 e5 05             	shl    ebp,0x5
c0018f47:	01 ea                	add    edx,ebp
c0018f49:	01 d0                	add    eax,edx
c0018f4b:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018f51:	83 fd 07             	cmp    ebp,0x7
c0018f54:	75 c9                	jne    c0018f1f <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018f56:	05 40 02 00 00       	add    eax,0x240
c0018f5b:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0018f5e:	83 fd ff             	cmp    ebp,0xffffffff
c0018f61:	0f 8c 08 01 00 00    	jl     c001906f <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c0018f67:	0f 84 b9 01 00 00    	je     c0019126 <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c0018f6d:	85 ed                	test   ebp,ebp
c0018f6f:	0f 84 a0 01 00 00    	je     c0019115 <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c0018f75:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018f77:	75 a6                	jne    c0018f1f <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018f79:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018f7f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018f83:	01 d0                	add    eax,edx
c0018f85:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018f89:	83 ec 0c             	sub    esp,0xc
c0018f8c:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0018f92:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018f95:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018f9b:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018fa2:	50                   	push   eax
c0018fa3:	e8 46 fe ff ff       	call   c0018dee <unblockTask(ThreadControlBlock*)>
c0018fa8:	83 c4 10             	add    esp,0x10
c0018fab:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018fae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018fb2:	89 f7                	mov    edi,esi
c0018fb4:	41                   	inc    ecx
c0018fb5:	83 f9 10             	cmp    ecx,0x10
c0018fb8:	0f 85 6b ff ff ff    	jne    c0018f29 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0018fbe:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c0018fc4:	85 c0                	test   eax,eax
c0018fc6:	74 5d                	je     c0019025 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c0018fc8:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c0018fce:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c0018fd4:	74 4f                	je     c0019025 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c0018fd6:	83 ec 0c             	sub    esp,0xc
c0018fd9:	68 28 57 02 c0       	push   0xc0025728
c0018fde:	e8 4d 68 00 00       	call   c001f830 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018fe3:	c7 04 24 28 57 02 c0 	mov    DWORD PTR [esp],0xc0025728
c0018fea:	89 c7                	mov    edi,eax
c0018fec:	e8 47 68 00 00       	call   c001f838 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018ff1:	83 c4 10             	add    esp,0x10
c0018ff4:	84 c0                	test   al,al
c0018ff6:	0f 84 e4 00 00 00    	je     c00190e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c0018ffc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018fff:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0019005:	85 d2                	test   edx,edx
c0019007:	74 0f                	je     c0019018 <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c0019009:	83 ec 0c             	sub    esp,0xc
c001900c:	8b 02                	mov    eax,DWORD PTR [edx]
c001900e:	52                   	push   edx
c001900f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019012:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019015:	83 c4 10             	add    esp,0x10
c0019018:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c0019022:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019025:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001902b:	85 db                	test   ebx,ebx
c001902d:	74 16                	je     c0019045 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c001902f:	83 ec 0c             	sub    esp,0xc
c0019032:	53                   	push   ebx
c0019033:	e8 52 56 ff ff       	call   c000e68a <VAS::~VAS()>
c0019038:	58                   	pop    eax
c0019039:	5a                   	pop    edx
c001903a:	6a 10                	push   0x10
c001903c:	53                   	push   ebx
c001903d:	e8 d3 5f ff ff       	call   c000f015 <operator delete(void*, unsigned long)>
c0019042:	83 c4 10             	add    esp,0x10
c0019045:	83 ec 0c             	sub    esp,0xc
c0019048:	68 bd 29 02 c0       	push   0xc00229bd
c001904d:	e8 a3 60 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0019052:	83 c4 10             	add    esp,0x10
c0019055:	83 ec 08             	sub    esp,0x8
c0019058:	68 3b 07 00 00       	push   0x73b
c001905d:	68 cb 29 02 c0       	push   0xc00229cb
c0019062:	e8 8e 60 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0019067:	83 c4 2c             	add    esp,0x2c
c001906a:	5b                   	pop    ebx
c001906b:	5e                   	pop    esi
c001906c:	5f                   	pop    edi
c001906d:	5d                   	pop    ebp
c001906e:	c3                   	ret    
c001906f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019073:	83 ec 0c             	sub    esp,0xc
c0019076:	68 a8 2c 02 c0       	push   0xc0022ca8
c001907b:	e8 0a c8 ff ff       	call   c001588a <Krnl::panic(char const*)>
c0019080:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0019083:	83 c4 10             	add    esp,0x10
c0019086:	89 f7                	mov    edi,esi
c0019088:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001908c:	e9 8e fe ff ff       	jmp    c0018f1f <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0019091:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019097:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001909d:	75 1c                	jne    c00190bb <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001909f:	83 ec 0c             	sub    esp,0xc
c00190a2:	68 10 2d 02 c0       	push   0xc0022d10
c00190a7:	e8 49 60 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c00190ac:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00190b3:	e8 b4 fb ff ff       	call   c0018c6c <blockTask(TaskState)>
c00190b8:	83 c4 10             	add    esp,0x10
c00190bb:	83 ec 08             	sub    esp,0x8
c00190be:	56                   	push   esi
c00190bf:	68 28 57 02 c0       	push   0xc0025728
c00190c4:	e8 39 68 00 00       	call   c001f902 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00190c9:	c7 04 24 28 57 02 c0 	mov    DWORD PTR [esp],0xc0025728
c00190d0:	e8 5b 67 00 00       	call   c001f830 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00190d5:	83 c4 10             	add    esp,0x10
c00190d8:	39 f8                	cmp    eax,edi
c00190da:	0f 84 1c ff ff ff    	je     c0018ffc <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c00190e0:	83 ec 0c             	sub    esp,0xc
c00190e3:	68 28 57 02 c0       	push   0xc0025728
c00190e8:	e8 43 67 00 00       	call   c001f830 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00190ed:	c7 04 24 28 57 02 c0 	mov    DWORD PTR [esp],0xc0025728
c00190f4:	89 c6                	mov    esi,eax
c00190f6:	e8 59 67 00 00       	call   c001f854 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00190fb:	83 c4 10             	add    esp,0x10
c00190fe:	39 f3                	cmp    ebx,esi
c0019100:	74 b9                	je     c00190bb <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c0019102:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0019105:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019108:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001910e:	75 ab                	jne    c00190bb <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c0019110:	e9 7c ff ff ff       	jmp    c0019091 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0019115:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019119:	83 ec 0c             	sub    esp,0xc
c001911c:	68 dc 2c 02 c0       	push   0xc0022cdc
c0019121:	e9 55 ff ff ff       	jmp    c001907b <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c0019126:	8b 36                	mov    esi,DWORD PTR [esi]
c0019128:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001912c:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001912f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019132:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c0019138:	01 d7                	add    edi,edx
c001913a:	89 f8                	mov    eax,edi
c001913c:	e9 44 fe ff ff       	jmp    c0018f85 <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c0019141 <cleanerTaskFunction(void*)>:
c0019141:	53                   	push   ebx
c0019142:	83 ec 08             	sub    esp,0x8
c0019145:	e8 96 f6 ff ff       	call   c00187e0 <unlockScheduler()>
c001914a:	e8 8f f6 ff ff       	call   c00187de <lockScheduler()>
c001914f:	80 3d ec 56 02 c0 00 	cmp    BYTE PTR ds:0xc00256ec,0x0
c0019156:	0f 85 8e 00 00 00    	jne    c00191ea <cleanerTaskFunction(void*)+0xa9>
c001915c:	83 ec 0c             	sub    esp,0xc
c001915f:	6a 02                	push   0x2
c0019161:	e8 c4 fa ff ff       	call   c0018c2a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019166:	83 c4 10             	add    esp,0x10
c0019169:	c6 05 ec 56 02 c0 00 	mov    BYTE PTR ds:0xc00256ec,0x0
c0019170:	e8 90 f6 ff ff       	call   c0018805 <lockStuff()>
c0019175:	e8 64 f6 ff ff       	call   c00187de <lockScheduler()>
c001917a:	83 ec 0c             	sub    esp,0xc
c001917d:	68 10 57 02 c0       	push   0xc0025710
c0019182:	e8 b1 66 00 00       	call   c001f838 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0019187:	83 c4 10             	add    esp,0x10
c001918a:	84 c0                	test   al,al
c001918c:	75 40                	jne    c00191ce <cleanerTaskFunction(void*)+0x8d>
c001918e:	83 ec 0c             	sub    esp,0xc
c0019191:	68 10 57 02 c0       	push   0xc0025710
c0019196:	e8 95 66 00 00       	call   c001f830 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001919b:	c7 04 24 10 57 02 c0 	mov    DWORD PTR [esp],0xc0025710
c00191a2:	89 c3                	mov    ebx,eax
c00191a4:	e8 ab 66 00 00       	call   c001f854 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00191a9:	c7 04 24 e1 29 02 c0 	mov    DWORD PTR [esp],0xc00229e1
c00191b0:	e8 40 5f ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c00191b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00191b8:	e8 e0 fc ff ff       	call   c0018e9d <cleanupTerminatedTask(ThreadControlBlock*)>
c00191bd:	c7 04 24 fa 29 02 c0 	mov    DWORD PTR [esp],0xc00229fa
c00191c4:	e8 2c 5f ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c00191c9:	83 c4 10             	add    esp,0x10
c00191cc:	eb ac                	jmp    c001917a <cleanerTaskFunction(void*)+0x39>
c00191ce:	e8 0d f6 ff ff       	call   c00187e0 <unlockScheduler()>
c00191d3:	e8 bf f9 ff ff       	call   c0018b97 <unlockStuff()>
c00191d8:	e8 01 f6 ff ff       	call   c00187de <lockScheduler()>
c00191dd:	80 3d ec 56 02 c0 00 	cmp    BYTE PTR ds:0xc00256ec,0x0
c00191e4:	0f 84 72 ff ff ff    	je     c001915c <cleanerTaskFunction(void*)+0x1b>
c00191ea:	e8 f1 f5 ff ff       	call   c00187e0 <unlockScheduler()>
c00191ef:	e9 75 ff ff ff       	jmp    c0019169 <cleanerTaskFunction(void*)+0x28>

c00191f4 <terminateTask(int)>:
c00191f4:	83 ec 14             	sub    esp,0x14
c00191f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191fc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00191ff:	83 c0 0c             	add    eax,0xc
c0019202:	50                   	push   eax
c0019203:	68 38 2d 02 c0       	push   0xc0022d38
c0019208:	e8 e8 5e ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001920d:	e8 f3 f5 ff ff       	call   c0018805 <lockStuff()>
c0019212:	e8 c7 f5 ff ff       	call   c00187de <lockScheduler()>
c0019217:	c7 04 24 0d 2a 02 c0 	mov    DWORD PTR [esp],0xc0022a0d
c001921e:	e8 d2 5e ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0019223:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019227:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001922c:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001922f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019234:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019237:	5a                   	pop    edx
c0019238:	59                   	pop    ecx
c0019239:	50                   	push   eax
c001923a:	68 10 57 02 c0       	push   0xc0025710
c001923f:	e8 be 66 00 00       	call   c001f902 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019244:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019249:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0019250:	c7 04 24 27 2a 02 c0 	mov    DWORD PTR [esp],0xc0022a27
c0019257:	e8 99 5e ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001925c:	83 c4 10             	add    esp,0x10
c001925f:	a1 e8 56 02 c0       	mov    eax,ds:0xc00256e8
c0019264:	85 c0                	test   eax,eax
c0019266:	74 5a                	je     c00192c2 <terminateTask(int)+0xce>
c0019268:	83 ec 0c             	sub    esp,0xc
c001926b:	68 41 2a 02 c0       	push   0xc0022a41
c0019270:	e8 80 5e ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0019275:	58                   	pop    eax
c0019276:	c6 05 ec 56 02 c0 01 	mov    BYTE PTR ds:0xc00256ec,0x1
c001927d:	ff 35 e8 56 02 c0    	push   DWORD PTR ds:0xc00256e8
c0019283:	e8 66 fb ff ff       	call   c0018dee <unblockTask(ThreadControlBlock*)>
c0019288:	c7 04 24 5b 2a 02 c0 	mov    DWORD PTR [esp],0xc0022a5b
c001928f:	e8 61 5e ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0019294:	83 c4 10             	add    esp,0x10
c0019297:	e8 44 f5 ff ff       	call   c00187e0 <unlockScheduler()>
c001929c:	e8 f6 f8 ff ff       	call   c0018b97 <unlockStuff()>
c00192a1:	83 ec 0c             	sub    esp,0xc
c00192a4:	68 93 2a 02 c0       	push   0xc0022a93
c00192a9:	e8 47 5e ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c00192ae:	83 c4 10             	add    esp,0x10
c00192b1:	e8 28 f5 ff ff       	call   c00187de <lockScheduler()>
c00192b6:	e8 57 f8 ff ff       	call   c0018b12 <schedule()>
c00192bb:	e8 20 f5 ff ff       	call   c00187e0 <unlockScheduler()>
c00192c0:	eb ef                	jmp    c00192b1 <terminateTask(int)+0xbd>
c00192c2:	83 ec 0c             	sub    esp,0xc
c00192c5:	68 75 2a 02 c0       	push   0xc0022a75
c00192ca:	e8 26 5e ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c00192cf:	83 c4 10             	add    esp,0x10
c00192d2:	eb c3                	jmp    c0019297 <terminateTask(int)+0xa3>

c00192d4 <Thr::terminateFromIRQ(int)>:
c00192d4:	83 ec 18             	sub    esp,0x18
c00192d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192db:	e8 14 ff ff ff       	call   c00191f4 <terminateTask(int)>

c00192e0 <Semaphore::release()>:
c00192e0:	83 ec 0c             	sub    esp,0xc
c00192e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192e7:	e8 19 f5 ff ff       	call   c0018805 <lockStuff()>
c00192ec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00192ef:	85 d2                	test   edx,edx
c00192f1:	74 1a                	je     c001930d <Semaphore::release()+0x2d>
c00192f3:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00192f6:	83 ec 0c             	sub    esp,0xc
c00192f9:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00192fc:	52                   	push   edx
c00192fd:	e8 ec fa ff ff       	call   c0018dee <unblockTask(ThreadControlBlock*)>
c0019302:	83 c4 10             	add    esp,0x10
c0019305:	83 c4 0c             	add    esp,0xc
c0019308:	e9 8a f8 ff ff       	jmp    c0018b97 <unlockStuff()>
c001930d:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c0019310:	83 c4 0c             	add    esp,0xc
c0019313:	e9 7f f8 ff ff       	jmp    c0018b97 <unlockStuff()>

c0019318 <__static_initialization_and_destruction_0(int, int)>:
c0019318:	83 ec 0c             	sub    esp,0xc
c001931b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0019320:	0f 85 88 00 00 00    	jne    c00193ae <__static_initialization_and_destruction_0(int, int)+0x96>
c0019326:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001932e:	75 7e                	jne    c00193ae <__static_initialization_and_destruction_0(int, int)+0x96>
c0019330:	83 ec 0c             	sub    esp,0xc
c0019333:	68 28 57 02 c0       	push   0xc0025728
c0019338:	e8 ab 67 00 00       	call   c001fae8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001933d:	83 c4 10             	add    esp,0x10
c0019340:	83 ec 04             	sub    esp,0x4
c0019343:	68 fc 36 02 c0       	push   0xc00236fc
c0019348:	68 28 57 02 c0       	push   0xc0025728
c001934d:	68 a8 fa 01 c0       	push   0xc001faa8
c0019352:	e8 3a 5c ff ff       	call   c000ef91 <__cxa_atexit>
c0019357:	83 c4 10             	add    esp,0x10
c001935a:	83 ec 0c             	sub    esp,0xc
c001935d:	68 1c 57 02 c0       	push   0xc002571c
c0019362:	e8 81 67 00 00       	call   c001fae8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019367:	83 c4 10             	add    esp,0x10
c001936a:	83 ec 04             	sub    esp,0x4
c001936d:	68 fc 36 02 c0       	push   0xc00236fc
c0019372:	68 1c 57 02 c0       	push   0xc002571c
c0019377:	68 a8 fa 01 c0       	push   0xc001faa8
c001937c:	e8 10 5c ff ff       	call   c000ef91 <__cxa_atexit>
c0019381:	83 c4 10             	add    esp,0x10
c0019384:	83 ec 0c             	sub    esp,0xc
c0019387:	68 10 57 02 c0       	push   0xc0025710
c001938c:	e8 57 67 00 00       	call   c001fae8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019391:	83 c4 10             	add    esp,0x10
c0019394:	83 ec 04             	sub    esp,0x4
c0019397:	68 fc 36 02 c0       	push   0xc00236fc
c001939c:	68 10 57 02 c0       	push   0xc0025710
c00193a1:	68 a8 fa 01 c0       	push   0xc001faa8
c00193a6:	e8 e6 5b ff ff       	call   c000ef91 <__cxa_atexit>
c00193ab:	83 c4 10             	add    esp,0x10
c00193ae:	90                   	nop
c00193af:	83 c4 0c             	add    esp,0xc
c00193b2:	c3                   	ret    

c00193b3 <_GLOBAL__sub_I_kernelProcess>:
c00193b3:	83 ec 0c             	sub    esp,0xc
c00193b6:	83 ec 08             	sub    esp,0x8
c00193b9:	68 ff ff 00 00       	push   0xffff
c00193be:	6a 01                	push   0x1
c00193c0:	e8 53 ff ff ff       	call   c0019318 <__static_initialization_and_destruction_0(int, int)>
c00193c5:	83 c4 10             	add    esp,0x10
c00193c8:	83 c4 0c             	add    esp,0xc
c00193cb:	c3                   	ret    

c00193cc <Vm::vm8086EntryPoint(void*)>:
c00193cc:	83 ec 0c             	sub    esp,0xc
c00193cf:	e8 0c f4 ff ff       	call   c00187e0 <unlockScheduler()>
c00193d4:	fb                   	sti    
c00193d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00193da:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c00193de:	52                   	push   edx
c00193df:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c00193e3:	52                   	push   edx
c00193e4:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00193e8:	52                   	push   edx
c00193e9:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c00193ed:	50                   	push   eax
c00193ee:	e8 74 6e fe ff       	call   c0000267 <goToVM86>
c00193f3:	83 c4 1c             	add    esp,0x1c
c00193f6:	c3                   	ret    

c00193f7 <Vm::inbv(unsigned short)>:
c00193f7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00193fb:	ec                   	in     al,dx
c00193fc:	c3                   	ret    

c00193fd <Vm::outbv(unsigned short, unsigned char)>:
c00193fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019401:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019405:	ee                   	out    dx,al
c0019406:	c3                   	ret    

c0019407 <Vm::realToLinear(unsigned short, unsigned short)>:
c0019407:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001940c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019411:	c1 e0 04             	shl    eax,0x4
c0019414:	01 d0                	add    eax,edx
c0019416:	c3                   	ret    

c0019417 <Vm::getSegment(unsigned int)>:
c0019417:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001941b:	c1 e8 10             	shr    eax,0x10
c001941e:	c3                   	ret    

c001941f <Vm::getOffset(unsigned int)>:
c001941f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019423:	c3                   	ret    

c0019424 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019424:	55                   	push   ebp
c0019425:	57                   	push   edi
c0019426:	56                   	push   esi
c0019427:	53                   	push   ebx
c0019428:	83 ec 2c             	sub    esp,0x2c
c001942b:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001942f:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0019433:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019437:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001943b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001943f:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0019443:	e8 96 f3 ff ff       	call   c00187de <lockScheduler()>
c0019448:	68 80 00 00 00       	push   0x80
c001944d:	6a 00                	push   0x0
c001944f:	68 cc 93 01 c0       	push   0xc00193cc
c0019454:	55                   	push   ebp
c0019455:	e8 ae f4 ff ff       	call   c0018908 <Process::createThread(void (*)(void*), void*, int)>
c001945a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001945e:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c0019462:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0019466:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c001946a:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c001946e:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0019472:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019479:	e8 88 5b ff ff       	call   c000f006 <operator new(unsigned long)>
c001947e:	83 c4 0c             	add    esp,0xc
c0019481:	89 c3                	mov    ebx,eax
c0019483:	55                   	push   ebp
c0019484:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019488:	50                   	push   eax
c0019489:	e8 96 61 ff ff       	call   c000f624 <File::File(char const*, Process*)>
c001948e:	83 c4 0c             	add    esp,0xc
c0019491:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019495:	50                   	push   eax
c0019496:	8d 44 24 20          	lea    eax,[esp+0x20]
c001949a:	50                   	push   eax
c001949b:	53                   	push   ebx
c001949c:	e8 93 64 ff ff       	call   c000f934 <File::stat(unsigned long long*, bool*)>
c00194a1:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c00194a5:	83 c4 10             	add    esp,0x10
c00194a8:	84 d2                	test   dl,dl
c00194aa:	74 1c                	je     c00194c8 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c00194ac:	83 ec 0c             	sub    esp,0xc
c00194af:	68 57 2d 02 c0       	push   0xc0022d57
c00194b4:	e8 d1 c3 ff ff       	call   c001588a <Krnl::panic(char const*)>
c00194b9:	e8 22 f3 ff ff       	call   c00187e0 <unlockScheduler()>
c00194be:	83 c4 10             	add    esp,0x10
c00194c1:	31 d2                	xor    edx,edx
c00194c3:	e9 81 00 00 00       	jmp    c0019549 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c00194c8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00194cc:	51                   	push   ecx
c00194cd:	51                   	push   ecx
c00194ce:	6a 01                	push   0x1
c00194d0:	53                   	push   ebx
c00194d1:	e8 b2 61 ff ff       	call   c000f688 <File::open(FileOpenMode)>
c00194d6:	83 c4 10             	add    esp,0x10
c00194d9:	85 c0                	test   eax,eax
c00194db:	74 1b                	je     c00194f8 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c00194dd:	83 ec 0c             	sub    esp,0xc
c00194e0:	68 70 2d 02 c0       	push   0xc0022d70
c00194e5:	e8 a0 c3 ff ff       	call   c001588a <Krnl::panic(char const*)>
c00194ea:	e8 f1 f2 ff ff       	call   c00187e0 <unlockScheduler()>
c00194ef:	83 c4 10             	add    esp,0x10
c00194f2:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00194f6:	eb 51                	jmp    c0019549 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c00194f8:	83 ec 0c             	sub    esp,0xc
c00194fb:	0f b7 ff             	movzx  edi,di
c00194fe:	6a 07                	push   0x7
c0019500:	0f b7 f6             	movzx  esi,si
c0019503:	68 00 01 00 00       	push   0x100
c0019508:	6a 00                	push   0x0
c001950a:	6a 00                	push   0x0
c001950c:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c0019512:	e8 cb 55 ff ff       	call   c000eae2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019517:	83 c4 18             	add    esp,0x18
c001951a:	57                   	push   edi
c001951b:	56                   	push   esi
c001951c:	e8 e6 fe ff ff       	call   c0019407 <Vm::realToLinear(unsigned short, unsigned short)>
c0019521:	5a                   	pop    edx
c0019522:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019524:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019528:	51                   	push   ecx
c0019529:	50                   	push   eax
c001952a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001952e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019532:	53                   	push   ebx
c0019533:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019536:	83 c4 14             	add    esp,0x14
c0019539:	53                   	push   ebx
c001953a:	e8 a7 61 ff ff       	call   c000f6e6 <File::close()>
c001953f:	e8 9c f2 ff ff       	call   c00187e0 <unlockScheduler()>
c0019544:	83 c4 10             	add    esp,0x10
c0019547:	b2 01                	mov    dl,0x1
c0019549:	83 c4 2c             	add    esp,0x2c
c001954c:	88 d0                	mov    al,dl
c001954e:	5b                   	pop    ebx
c001954f:	5e                   	pop    esi
c0019550:	5f                   	pop    edi
c0019551:	5d                   	pop    ebp
c0019552:	c3                   	ret    

c0019553 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0019553:	57                   	push   edi
c0019554:	56                   	push   esi
c0019555:	53                   	push   ebx
c0019556:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001955a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001955e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019562:	83 e8 06             	sub    eax,0x6
c0019565:	0f b7 c0             	movzx  eax,ax
c0019568:	50                   	push   eax
c0019569:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001956e:	50                   	push   eax
c001956f:	e8 93 fe ff ff       	call   c0019407 <Vm::realToLinear(unsigned short, unsigned short)>
c0019574:	5a                   	pop    edx
c0019575:	5e                   	pop    esi
c0019576:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0019579:	8d 56 fa             	lea    edx,[esi-0x6]
c001957c:	81 e2 ff ff 00 00    	and    edx,0xffff
c0019582:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0019585:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0019588:	83 c2 02             	add    edx,0x2
c001958b:	66 89 10             	mov    WORD PTR [eax],dx
c001958e:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0019591:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0019595:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0019598:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001959c:	89 d6                	mov    esi,edx
c001959e:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00195a4:	66 81 e6 ff fd       	and    si,0xfdff
c00195a9:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c00195ad:	74 07                	je     c00195b6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00195af:	89 d6                	mov    esi,edx
c00195b1:	66 81 ce 00 02       	or     si,0x200
c00195b6:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00195ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00195bf:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00195c3:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00195cb:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00195ce:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00195d6:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00195d9:	5b                   	pop    ebx
c00195da:	5e                   	pop    esi
c00195db:	5f                   	pop    edi
c00195dc:	c3                   	ret    

c00195dd <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00195dd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00195e2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00195e7:	c1 e0 04             	shl    eax,0x4
c00195ea:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00195ed:	c3                   	ret    

c00195ee <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00195ee:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00195f3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00195f8:	c1 e0 04             	shl    eax,0x4
c00195fb:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00195ff:	c3                   	ret    

c0019600 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019600:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019605:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001960a:	c1 e0 04             	shl    eax,0x4
c001960d:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019610:	c3                   	ret    

c0019611 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0019611:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019616:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001961b:	c1 e0 04             	shl    eax,0x4
c001961e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019622:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0019625:	c3                   	ret    

c0019626 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0019626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001962b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019630:	c1 e0 04             	shl    eax,0x4
c0019633:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019637:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001963b:	c3                   	ret    

c001963c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001963c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019641:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019646:	c1 e0 04             	shl    eax,0x4
c0019649:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001964d:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0019650:	c3                   	ret    

c0019651 <Vm::faultHandler(regs*)>:
c0019651:	55                   	push   ebp
c0019652:	57                   	push   edi
c0019653:	56                   	push   esi
c0019654:	53                   	push   ebx
c0019655:	83 ec 1c             	sub    esp,0x1c
c0019658:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001965c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001965f:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0019663:	0f b7 f0             	movzx  esi,ax
c0019666:	52                   	push   edx
c0019667:	0f b7 c0             	movzx  eax,ax
c001966a:	50                   	push   eax
c001966b:	e8 97 fd ff ff       	call   c0019407 <Vm::realToLinear(unsigned short, unsigned short)>
c0019670:	5a                   	pop    edx
c0019671:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0019674:	59                   	pop    ecx
c0019675:	89 c7                	mov    edi,eax
c0019677:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001967a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001967e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019683:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019687:	0f b7 c5             	movzx  eax,bp
c001968a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001968e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0019692:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019696:	e8 6c fd ff ff       	call   c0019407 <Vm::realToLinear(unsigned short, unsigned short)>
c001969b:	5a                   	pop    edx
c001969c:	59                   	pop    ecx
c001969d:	b1 06                	mov    cl,0x6
c001969f:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00196a4:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00196a9:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c00196ac:	80 fa 9d             	cmp    dl,0x9d
c00196af:	0f 84 1d 02 00 00    	je     c00198d2 <Vm::faultHandler(regs*)+0x281>
c00196b5:	0f 87 8e 00 00 00    	ja     c0019749 <Vm::faultHandler(regs*)+0xf8>
c00196bb:	80 fa 66             	cmp    dl,0x66
c00196be:	0f 84 89 01 00 00    	je     c001984d <Vm::faultHandler(regs*)+0x1fc>
c00196c4:	77 44                	ja     c001970a <Vm::faultHandler(regs*)+0xb9>
c00196c6:	80 fa 36             	cmp    dl,0x36
c00196c9:	0f 84 74 01 00 00    	je     c0019843 <Vm::faultHandler(regs*)+0x1f2>
c00196cf:	77 1a                	ja     c00196eb <Vm::faultHandler(regs*)+0x9a>
c00196d1:	80 fa 26             	cmp    dl,0x26
c00196d4:	0f 84 4b 01 00 00    	je     c0019825 <Vm::faultHandler(regs*)+0x1d4>
c00196da:	80 fa 2e             	cmp    dl,0x2e
c00196dd:	0f 85 4a 05 00 00    	jne    c0019c2d <Vm::faultHandler(regs*)+0x5dc>
c00196e3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00196e6:	31 c9                	xor    ecx,ecx
c00196e8:	47                   	inc    edi
c00196e9:	eb be                	jmp    c00196a9 <Vm::faultHandler(regs*)+0x58>
c00196eb:	80 fa 64             	cmp    dl,0x64
c00196ee:	0f 84 3b 01 00 00    	je     c001982f <Vm::faultHandler(regs*)+0x1de>
c00196f4:	0f 87 3f 01 00 00    	ja     c0019839 <Vm::faultHandler(regs*)+0x1e8>
c00196fa:	80 fa 3e             	cmp    dl,0x3e
c00196fd:	0f 85 2a 05 00 00    	jne    c0019c2d <Vm::faultHandler(regs*)+0x5dc>
c0019703:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019706:	b1 01                	mov    cl,0x1
c0019708:	eb de                	jmp    c00196e8 <Vm::faultHandler(regs*)+0x97>
c001970a:	80 fa 6d             	cmp    dl,0x6d
c001970d:	0f 84 bf 02 00 00    	je     c00199d2 <Vm::faultHandler(regs*)+0x381>
c0019713:	77 17                	ja     c001972c <Vm::faultHandler(regs*)+0xdb>
c0019715:	80 fa 67             	cmp    dl,0x67
c0019718:	0f 84 3c 01 00 00    	je     c001985a <Vm::faultHandler(regs*)+0x209>
c001971e:	80 fa 6c             	cmp    dl,0x6c
c0019721:	0f 84 5d 02 00 00    	je     c0019984 <Vm::faultHandler(regs*)+0x333>
c0019727:	e9 01 05 00 00       	jmp    c0019c2d <Vm::faultHandler(regs*)+0x5dc>
c001972c:	80 fa 6f             	cmp    dl,0x6f
c001972f:	0f 84 8b 03 00 00    	je     c0019ac0 <Vm::faultHandler(regs*)+0x46f>
c0019735:	0f 82 0f 03 00 00    	jb     c0019a4a <Vm::faultHandler(regs*)+0x3f9>
c001973b:	80 fa 9c             	cmp    dl,0x9c
c001973e:	0f 84 23 01 00 00    	je     c0019867 <Vm::faultHandler(regs*)+0x216>
c0019744:	e9 e4 04 00 00       	jmp    c0019c2d <Vm::faultHandler(regs*)+0x5dc>
c0019749:	80 fa ec             	cmp    dl,0xec
c001974c:	0f 84 7f 04 00 00    	je     c0019bd1 <Vm::faultHandler(regs*)+0x580>
c0019752:	77 7b                	ja     c00197cf <Vm::faultHandler(regs*)+0x17e>
c0019754:	80 fa e4             	cmp    dl,0xe4
c0019757:	0f 84 fe 03 00 00    	je     c0019b5b <Vm::faultHandler(regs*)+0x50a>
c001975d:	77 53                	ja     c00197b2 <Vm::faultHandler(regs*)+0x161>
c001975f:	80 fa cd             	cmp    dl,0xcd
c0019762:	0f 84 cd 01 00 00    	je     c0019935 <Vm::faultHandler(regs*)+0x2e4>
c0019768:	80 fa cf             	cmp    dl,0xcf
c001976b:	0f 85 bc 04 00 00    	jne    c0019c2d <Vm::faultHandler(regs*)+0x5dc>
c0019771:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019774:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0019777:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001977b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001977e:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0019782:	81 ca 00 02 02 00    	or     edx,0x20200
c0019788:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001978b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001978f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019795:	66 c1 e8 09          	shr    ax,0x9
c0019799:	83 e0 01             	and    eax,0x1
c001979c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001979f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00197a2:	83 c0 06             	add    eax,0x6
c00197a5:	25 ff ff 00 00       	and    eax,0xffff
c00197aa:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00197ad:	e9 77 04 00 00       	jmp    c0019c29 <Vm::faultHandler(regs*)+0x5d8>
c00197b2:	80 fa e6             	cmp    dl,0xe6
c00197b5:	0f 84 ea 03 00 00    	je     c0019ba5 <Vm::faultHandler(regs*)+0x554>
c00197bb:	0f 82 b6 03 00 00    	jb     c0019b77 <Vm::faultHandler(regs*)+0x526>
c00197c1:	80 fa e7             	cmp    dl,0xe7
c00197c4:	0f 84 f2 03 00 00    	je     c0019bbc <Vm::faultHandler(regs*)+0x56b>
c00197ca:	e9 5e 04 00 00       	jmp    c0019c2d <Vm::faultHandler(regs*)+0x5dc>
c00197cf:	80 fa ef             	cmp    dl,0xef
c00197d2:	0f 84 3c 04 00 00    	je     c0019c14 <Vm::faultHandler(regs*)+0x5c3>
c00197d8:	77 28                	ja     c0019802 <Vm::faultHandler(regs*)+0x1b1>
c00197da:	80 fa ed             	cmp    dl,0xed
c00197dd:	0f 84 0a 04 00 00    	je     c0019bed <Vm::faultHandler(regs*)+0x59c>
c00197e3:	80 fa ee             	cmp    dl,0xee
c00197e6:	0f 85 41 04 00 00    	jne    c0019c2d <Vm::faultHandler(regs*)+0x5dc>
c00197ec:	50                   	push   eax
c00197ed:	50                   	push   eax
c00197ee:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00197f2:	50                   	push   eax
c00197f3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00197f7:	50                   	push   eax
c00197f8:	e8 00 fc ff ff       	call   c00193fd <Vm::outbv(unsigned short, unsigned char)>
c00197fd:	e9 0a 04 00 00       	jmp    c0019c0c <Vm::faultHandler(regs*)+0x5bb>
c0019802:	80 fa fa             	cmp    dl,0xfa
c0019805:	0f 84 5d 01 00 00    	je     c0019968 <Vm::faultHandler(regs*)+0x317>
c001980b:	80 fa fb             	cmp    dl,0xfb
c001980e:	0f 84 62 01 00 00    	je     c0019976 <Vm::faultHandler(regs*)+0x325>
c0019814:	80 fa f3             	cmp    dl,0xf3
c0019817:	0f 85 10 04 00 00    	jne    c0019c2d <Vm::faultHandler(regs*)+0x5dc>
c001981d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019820:	e9 c3 fe ff ff       	jmp    c00196e8 <Vm::faultHandler(regs*)+0x97>
c0019825:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019828:	b1 02                	mov    cl,0x2
c001982a:	e9 b9 fe ff ff       	jmp    c00196e8 <Vm::faultHandler(regs*)+0x97>
c001982f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019832:	b1 03                	mov    cl,0x3
c0019834:	e9 af fe ff ff       	jmp    c00196e8 <Vm::faultHandler(regs*)+0x97>
c0019839:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001983c:	b1 04                	mov    cl,0x4
c001983e:	e9 a5 fe ff ff       	jmp    c00196e8 <Vm::faultHandler(regs*)+0x97>
c0019843:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019846:	b1 05                	mov    cl,0x5
c0019848:	e9 9b fe ff ff       	jmp    c00196e8 <Vm::faultHandler(regs*)+0x97>
c001984d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019850:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019855:	e9 8e fe ff ff       	jmp    c00196e8 <Vm::faultHandler(regs*)+0x97>
c001985a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001985d:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019862:	e9 81 fe ff ff       	jmp    c00196e8 <Vm::faultHandler(regs*)+0x97>
c0019867:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001986a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001986e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019873:	74 30                	je     c00198a5 <Vm::faultHandler(regs*)+0x254>
c0019875:	83 e9 04             	sub    ecx,0x4
c0019878:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001987e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019884:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019887:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001988a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019890:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019894:	0f 84 8c 03 00 00    	je     c0019c26 <Vm::faultHandler(regs*)+0x5d5>
c001989a:	80 ce 02             	or     dh,0x2
c001989d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00198a0:	e9 81 03 00 00       	jmp    c0019c26 <Vm::faultHandler(regs*)+0x5d5>
c00198a5:	83 e9 02             	sub    ecx,0x2
c00198a8:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00198ae:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00198b1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00198b5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00198bb:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00198bf:	74 05                	je     c00198c6 <Vm::faultHandler(regs*)+0x275>
c00198c1:	80 ce 02             	or     dh,0x2
c00198c4:	eb 03                	jmp    c00198c9 <Vm::faultHandler(regs*)+0x278>
c00198c6:	80 e6 fd             	and    dh,0xfd
c00198c9:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00198cd:	e9 54 03 00 00       	jmp    c0019c26 <Vm::faultHandler(regs*)+0x5d5>
c00198d2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00198d7:	74 2a                	je     c0019903 <Vm::faultHandler(regs*)+0x2b2>
c00198d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00198db:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00198e1:	81 ca 00 02 02 00    	or     edx,0x20200
c00198e7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00198ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00198ec:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00198f2:	c1 e8 09             	shr    eax,0x9
c00198f5:	83 e0 01             	and    eax,0x1
c00198f8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00198fb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00198fe:	83 c0 04             	add    eax,0x4
c0019901:	eb 25                	jmp    c0019928 <Vm::faultHandler(regs*)+0x2d7>
c0019903:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019906:	81 ca 00 02 02 00    	or     edx,0x20200
c001990c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001990f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019912:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019918:	66 c1 e8 09          	shr    ax,0x9
c001991c:	83 e0 01             	and    eax,0x1
c001991f:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019922:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019925:	83 c0 02             	add    eax,0x2
c0019928:	25 ff ff 00 00       	and    eax,0xffff
c001992d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019930:	e9 f1 02 00 00       	jmp    c0019c26 <Vm::faultHandler(regs*)+0x5d5>
c0019935:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019939:	3c ff                	cmp    al,0xff
c001993b:	75 10                	jne    c001994d <Vm::faultHandler(regs*)+0x2fc>
c001993d:	83 ec 0c             	sub    esp,0xc
c0019940:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019943:	e8 8c f9 ff ff       	call   c00192d4 <Thr::terminateFromIRQ(int)>
c0019948:	e9 c2 02 00 00       	jmp    c0019c0f <Vm::faultHandler(regs*)+0x5be>
c001994d:	83 ec 0c             	sub    esp,0xc
c0019950:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019958:	57                   	push   edi
c0019959:	50                   	push   eax
c001995a:	53                   	push   ebx
c001995b:	e8 f3 fb ff ff       	call   c0019553 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0019960:	83 c4 20             	add    esp,0x20
c0019963:	e9 c1 02 00 00       	jmp    c0019c29 <Vm::faultHandler(regs*)+0x5d8>
c0019968:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001996d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019971:	e9 b0 02 00 00       	jmp    c0019c26 <Vm::faultHandler(regs*)+0x5d5>
c0019976:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001997b:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001997f:	e9 a2 02 00 00       	jmp    c0019c26 <Vm::faultHandler(regs*)+0x5d5>
c0019984:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019989:	74 0d                	je     c0019998 <Vm::faultHandler(regs*)+0x347>
c001998b:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019992:	0f 87 e9 02 00 00    	ja     c0019c81 <Vm::faultHandler(regs*)+0x630>
c0019998:	83 ec 0c             	sub    esp,0xc
c001999b:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001999e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00199a2:	50                   	push   eax
c00199a3:	e8 4f fa ff ff       	call   c00193f7 <Vm::inbv(unsigned short)>
c00199a8:	83 c4 0c             	add    esp,0xc
c00199ab:	0f b6 c0             	movzx  eax,al
c00199ae:	0f b7 c9             	movzx  ecx,cx
c00199b1:	50                   	push   eax
c00199b2:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00199b6:	50                   	push   eax
c00199b7:	51                   	push   ecx
c00199b8:	e8 54 fc ff ff       	call   c0019611 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00199bd:	83 c4 10             	add    esp,0x10
c00199c0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00199c3:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00199c7:	74 03                	je     c00199cc <Vm::faultHandler(regs*)+0x37b>
c00199c9:	48                   	dec    eax
c00199ca:	eb 01                	jmp    c00199cd <Vm::faultHandler(regs*)+0x37c>
c00199cc:	40                   	inc    eax
c00199cd:	0f b7 c0             	movzx  eax,ax
c00199d0:	eb 70                	jmp    c0019a42 <Vm::faultHandler(regs*)+0x3f1>
c00199d2:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00199d5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00199d8:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00199dd:	74 0c                	je     c00199eb <Vm::faultHandler(regs*)+0x39a>
c00199df:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c00199e5:	0f 87 96 02 00 00    	ja     c0019c81 <Vm::faultHandler(regs*)+0x630>
c00199eb:	0f b7 c9             	movzx  ecx,cx
c00199ee:	0f b7 f6             	movzx  esi,si
c00199f1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00199f4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00199f9:	74 20                	je     c0019a1b <Vm::faultHandler(regs*)+0x3ca>
c00199fb:	ed                   	in     eax,dx
c00199fc:	55                   	push   ebp
c00199fd:	50                   	push   eax
c00199fe:	51                   	push   ecx
c00199ff:	56                   	push   esi
c0019a00:	e8 37 fc ff ff       	call   c001963c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019a05:	83 c4 10             	add    esp,0x10
c0019a08:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019a0b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019a0f:	74 05                	je     c0019a16 <Vm::faultHandler(regs*)+0x3c5>
c0019a11:	83 e8 04             	sub    eax,0x4
c0019a14:	eb 27                	jmp    c0019a3d <Vm::faultHandler(regs*)+0x3ec>
c0019a16:	83 c0 04             	add    eax,0x4
c0019a19:	eb 22                	jmp    c0019a3d <Vm::faultHandler(regs*)+0x3ec>
c0019a1b:	66 ed                	in     ax,dx
c0019a1d:	0f b7 c0             	movzx  eax,ax
c0019a20:	57                   	push   edi
c0019a21:	50                   	push   eax
c0019a22:	51                   	push   ecx
c0019a23:	56                   	push   esi
c0019a24:	e8 fd fb ff ff       	call   c0019626 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019a29:	83 c4 10             	add    esp,0x10
c0019a2c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019a2f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019a33:	74 05                	je     c0019a3a <Vm::faultHandler(regs*)+0x3e9>
c0019a35:	83 e8 02             	sub    eax,0x2
c0019a38:	eb 03                	jmp    c0019a3d <Vm::faultHandler(regs*)+0x3ec>
c0019a3a:	83 c0 02             	add    eax,0x2
c0019a3d:	25 ff ff 00 00       	and    eax,0xffff
c0019a42:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019a45:	e9 dc 01 00 00       	jmp    c0019c26 <Vm::faultHandler(regs*)+0x5d5>
c0019a4a:	49                   	dec    ecx
c0019a4b:	80 f9 05             	cmp    cl,0x5
c0019a4e:	77 24                	ja     c0019a74 <Vm::faultHandler(regs*)+0x423>
c0019a50:	0f b6 c9             	movzx  ecx,cl
c0019a53:	ff 24 8d b8 2d 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdd248]
c0019a5a:	0f b7 f5             	movzx  esi,bp
c0019a5d:	eb 15                	jmp    c0019a74 <Vm::faultHandler(regs*)+0x423>
c0019a5f:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0019a63:	eb 0f                	jmp    c0019a74 <Vm::faultHandler(regs*)+0x423>
c0019a65:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0019a69:	eb 09                	jmp    c0019a74 <Vm::faultHandler(regs*)+0x423>
c0019a6b:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0019a6f:	eb 03                	jmp    c0019a74 <Vm::faultHandler(regs*)+0x423>
c0019a71:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0019a74:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019a77:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019a7c:	74 0b                	je     c0019a89 <Vm::faultHandler(regs*)+0x438>
c0019a7e:	3d ff ff 00 00       	cmp    eax,0xffff
c0019a83:	0f 87 f8 01 00 00    	ja     c0019c81 <Vm::faultHandler(regs*)+0x630>
c0019a89:	0f b7 c0             	movzx  eax,ax
c0019a8c:	52                   	push   edx
c0019a8d:	52                   	push   edx
c0019a8e:	50                   	push   eax
c0019a8f:	56                   	push   esi
c0019a90:	e8 48 fb ff ff       	call   c00195dd <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019a95:	59                   	pop    ecx
c0019a96:	0f b6 c0             	movzx  eax,al
c0019a99:	5e                   	pop    esi
c0019a9a:	50                   	push   eax
c0019a9b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019a9f:	50                   	push   eax
c0019aa0:	e8 58 f9 ff ff       	call   c00193fd <Vm::outbv(unsigned short, unsigned char)>
c0019aa5:	83 c4 10             	add    esp,0x10
c0019aa8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019aab:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019aaf:	74 03                	je     c0019ab4 <Vm::faultHandler(regs*)+0x463>
c0019ab1:	48                   	dec    eax
c0019ab2:	eb 01                	jmp    c0019ab5 <Vm::faultHandler(regs*)+0x464>
c0019ab4:	40                   	inc    eax
c0019ab5:	0f b7 c0             	movzx  eax,ax
c0019ab8:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019abb:	e9 66 01 00 00       	jmp    c0019c26 <Vm::faultHandler(regs*)+0x5d5>
c0019ac0:	49                   	dec    ecx
c0019ac1:	80 f9 05             	cmp    cl,0x5
c0019ac4:	77 1f                	ja     c0019ae5 <Vm::faultHandler(regs*)+0x494>
c0019ac6:	0f b6 c9             	movzx  ecx,cl
c0019ac9:	ff 24 8d d0 2d 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdd230]
c0019ad0:	89 ee                	mov    esi,ebp
c0019ad2:	eb 11                	jmp    c0019ae5 <Vm::faultHandler(regs*)+0x494>
c0019ad4:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0019ad7:	eb 0c                	jmp    c0019ae5 <Vm::faultHandler(regs*)+0x494>
c0019ad9:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019adc:	eb 07                	jmp    c0019ae5 <Vm::faultHandler(regs*)+0x494>
c0019ade:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0019ae1:	eb 02                	jmp    c0019ae5 <Vm::faultHandler(regs*)+0x494>
c0019ae3:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019ae5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0019ae8:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019aed:	74 0c                	je     c0019afb <Vm::faultHandler(regs*)+0x4aa>
c0019aef:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019af5:	0f 87 86 01 00 00    	ja     c0019c81 <Vm::faultHandler(regs*)+0x630>
c0019afb:	0f b7 d6             	movzx  edx,si
c0019afe:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019b01:	0f b7 c1             	movzx  eax,cx
c0019b04:	81 e7 00 04 00 00    	and    edi,0x400
c0019b0a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019b0d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b12:	74 1d                	je     c0019b31 <Vm::faultHandler(regs*)+0x4e0>
c0019b14:	55                   	push   ebp
c0019b15:	55                   	push   ebp
c0019b16:	50                   	push   eax
c0019b17:	52                   	push   edx
c0019b18:	e8 e3 fa ff ff       	call   c0019600 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019b1d:	83 c4 10             	add    esp,0x10
c0019b20:	89 f2                	mov    edx,esi
c0019b22:	ef                   	out    dx,eax
c0019b23:	85 ff                	test   edi,edi
c0019b25:	74 05                	je     c0019b2c <Vm::faultHandler(regs*)+0x4db>
c0019b27:	83 e9 04             	sub    ecx,0x4
c0019b2a:	eb 21                	jmp    c0019b4d <Vm::faultHandler(regs*)+0x4fc>
c0019b2c:	83 c1 04             	add    ecx,0x4
c0019b2f:	eb 1c                	jmp    c0019b4d <Vm::faultHandler(regs*)+0x4fc>
c0019b31:	55                   	push   ebp
c0019b32:	55                   	push   ebp
c0019b33:	50                   	push   eax
c0019b34:	52                   	push   edx
c0019b35:	e8 b4 fa ff ff       	call   c00195ee <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019b3a:	83 c4 10             	add    esp,0x10
c0019b3d:	89 f2                	mov    edx,esi
c0019b3f:	66 ef                	out    dx,ax
c0019b41:	85 ff                	test   edi,edi
c0019b43:	74 05                	je     c0019b4a <Vm::faultHandler(regs*)+0x4f9>
c0019b45:	83 e9 02             	sub    ecx,0x2
c0019b48:	eb 03                	jmp    c0019b4d <Vm::faultHandler(regs*)+0x4fc>
c0019b4a:	83 c1 02             	add    ecx,0x2
c0019b4d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019b53:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0019b56:	e9 cb 00 00 00       	jmp    c0019c26 <Vm::faultHandler(regs*)+0x5d5>
c0019b5b:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019b62:	83 ec 0c             	sub    esp,0xc
c0019b65:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019b69:	50                   	push   eax
c0019b6a:	e8 88 f8 ff ff       	call   c00193f7 <Vm::inbv(unsigned short)>
c0019b6f:	0f b6 c0             	movzx  eax,al
c0019b72:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019b75:	eb 3f                	jmp    c0019bb6 <Vm::faultHandler(regs*)+0x565>
c0019b77:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b7c:	74 07                	je     c0019b85 <Vm::faultHandler(regs*)+0x534>
c0019b7e:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019b82:	ed                   	in     eax,dx
c0019b83:	eb 14                	jmp    c0019b99 <Vm::faultHandler(regs*)+0x548>
c0019b85:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0019b88:	66 31 c9             	xor    cx,cx
c0019b8b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0019b8e:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019b92:	66 ed                	in     ax,dx
c0019b94:	0f b7 c0             	movzx  eax,ax
c0019b97:	09 c8                	or     eax,ecx
c0019b99:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019b9c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019ba0:	e9 84 00 00 00       	jmp    c0019c29 <Vm::faultHandler(regs*)+0x5d8>
c0019ba5:	52                   	push   edx
c0019ba6:	52                   	push   edx
c0019ba7:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019bab:	50                   	push   eax
c0019bac:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019bb0:	50                   	push   eax
c0019bb1:	e8 47 f8 ff ff       	call   c00193fd <Vm::outbv(unsigned short, unsigned char)>
c0019bb6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019bba:	eb 53                	jmp    c0019c0f <Vm::faultHandler(regs*)+0x5be>
c0019bbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019bbf:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019bc3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019bc8:	74 03                	je     c0019bcd <Vm::faultHandler(regs*)+0x57c>
c0019bca:	ef                   	out    dx,eax
c0019bcb:	eb cf                	jmp    c0019b9c <Vm::faultHandler(regs*)+0x54b>
c0019bcd:	66 ef                	out    dx,ax
c0019bcf:	eb cb                	jmp    c0019b9c <Vm::faultHandler(regs*)+0x54b>
c0019bd1:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019bd8:	83 ec 0c             	sub    esp,0xc
c0019bdb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019bdf:	50                   	push   eax
c0019be0:	e8 12 f8 ff ff       	call   c00193f7 <Vm::inbv(unsigned short)>
c0019be5:	0f b6 c0             	movzx  eax,al
c0019be8:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019beb:	eb 1f                	jmp    c0019c0c <Vm::faultHandler(regs*)+0x5bb>
c0019bed:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019bf0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019bf5:	74 03                	je     c0019bfa <Vm::faultHandler(regs*)+0x5a9>
c0019bf7:	ed                   	in     eax,dx
c0019bf8:	eb 0d                	jmp    c0019c07 <Vm::faultHandler(regs*)+0x5b6>
c0019bfa:	66 ed                	in     ax,dx
c0019bfc:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019bff:	0f b7 c0             	movzx  eax,ax
c0019c02:	66 31 d2             	xor    dx,dx
c0019c05:	09 d0                	or     eax,edx
c0019c07:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019c0a:	eb 1a                	jmp    c0019c26 <Vm::faultHandler(regs*)+0x5d5>
c0019c0c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019c0f:	83 c4 10             	add    esp,0x10
c0019c12:	eb 15                	jmp    c0019c29 <Vm::faultHandler(regs*)+0x5d8>
c0019c14:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019c17:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019c1a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c1f:	74 03                	je     c0019c24 <Vm::faultHandler(regs*)+0x5d3>
c0019c21:	ef                   	out    dx,eax
c0019c22:	eb 02                	jmp    c0019c26 <Vm::faultHandler(regs*)+0x5d5>
c0019c24:	66 ef                	out    dx,ax
c0019c26:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019c29:	b0 01                	mov    al,0x1
c0019c2b:	eb 56                	jmp    c0019c83 <Vm::faultHandler(regs*)+0x632>
c0019c2d:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0019c31:	50                   	push   eax
c0019c32:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0019c36:	50                   	push   eax
c0019c37:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0019c3b:	50                   	push   eax
c0019c3c:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0019c40:	50                   	push   eax
c0019c41:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019c45:	50                   	push   eax
c0019c46:	52                   	push   edx
c0019c47:	52                   	push   edx
c0019c48:	68 89 2d 02 c0       	push   0xc0022d89
c0019c4d:	e8 a3 54 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c0019c52:	83 c4 20             	add    esp,0x20
c0019c55:	83 ec 0c             	sub    esp,0xc
c0019c58:	6a 60                	push   0x60
c0019c5a:	e8 98 f7 ff ff       	call   c00193f7 <Vm::inbv(unsigned short)>
c0019c5f:	83 c4 10             	add    esp,0x10
c0019c62:	3c 1c                	cmp    al,0x1c
c0019c64:	74 04                	je     c0019c6a <Vm::faultHandler(regs*)+0x619>
c0019c66:	3c 5a                	cmp    al,0x5a
c0019c68:	75 eb                	jne    c0019c55 <Vm::faultHandler(regs*)+0x604>
c0019c6a:	3c 5a                	cmp    al,0x5a
c0019c6c:	74 04                	je     c0019c72 <Vm::faultHandler(regs*)+0x621>
c0019c6e:	3c 1c                	cmp    al,0x1c
c0019c70:	75 0f                	jne    c0019c81 <Vm::faultHandler(regs*)+0x630>
c0019c72:	83 ec 0c             	sub    esp,0xc
c0019c75:	6a 60                	push   0x60
c0019c77:	e8 7b f7 ff ff       	call   c00193f7 <Vm::inbv(unsigned short)>
c0019c7c:	83 c4 10             	add    esp,0x10
c0019c7f:	eb e9                	jmp    c0019c6a <Vm::faultHandler(regs*)+0x619>
c0019c81:	31 c0                	xor    eax,eax
c0019c83:	83 c4 1c             	add    esp,0x1c
c0019c86:	5b                   	pop    ebx
c0019c87:	5e                   	pop    esi
c0019c88:	5f                   	pop    edi
c0019c89:	5d                   	pop    ebp
c0019c8a:	c3                   	ret    
c0019c8b:	90                   	nop

c0019c8c <FAT::getName()>:
c0019c8c:	b8 e8 2d 02 c0       	mov    eax,0xc0022de8
c0019c91:	c3                   	ret    

c0019c92 <FAT::tell(void*, unsigned long long*)>:
c0019c92:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019c97:	75 06                	jne    c0019c9f <FAT::tell(void*, unsigned long long*)+0xd>
c0019c99:	b8 04 00 00 00       	mov    eax,0x4
c0019c9e:	c3                   	ret    
c0019c9f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019ca4:	75 06                	jne    c0019cac <FAT::tell(void*, unsigned long long*)+0x1a>
c0019ca6:	b8 04 00 00 00       	mov    eax,0x4
c0019cab:	c3                   	ret    
c0019cac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cb0:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0019cb3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019cb6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019cba:	89 01                	mov    DWORD PTR [ecx],eax
c0019cbc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019cbf:	b8 00 00 00 00       	mov    eax,0x0
c0019cc4:	c3                   	ret    
c0019cc5:	90                   	nop

c0019cc6 <FAT::stat(void*, unsigned long long*)>:
c0019cc6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019ccb:	75 06                	jne    c0019cd3 <FAT::stat(void*, unsigned long long*)+0xd>
c0019ccd:	b8 04 00 00 00       	mov    eax,0x4
c0019cd2:	c3                   	ret    
c0019cd3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019cd8:	75 06                	jne    c0019ce0 <FAT::stat(void*, unsigned long long*)+0x1a>
c0019cda:	b8 04 00 00 00       	mov    eax,0x4
c0019cdf:	c3                   	ret    
c0019ce0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ce4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019ce7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019cea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019cee:	89 01                	mov    DWORD PTR [ecx],eax
c0019cf0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019cf3:	b8 00 00 00 00       	mov    eax,0x0
c0019cf8:	c3                   	ret    
c0019cf9:	90                   	nop

c0019cfa <FAT::~FAT()>:
c0019cfa:	83 ec 0c             	sub    esp,0xc
c0019cfd:	ba 6c 2e 02 c0       	mov    edx,0xc0022e6c
c0019d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d06:	89 10                	mov    DWORD PTR [eax],edx
c0019d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d0c:	83 ec 0c             	sub    esp,0xc
c0019d0f:	50                   	push   eax
c0019d10:	e8 09 57 ff ff       	call   c000f41e <Filesystem::~Filesystem()>
c0019d15:	83 c4 10             	add    esp,0x10
c0019d18:	90                   	nop
c0019d19:	83 c4 0c             	add    esp,0xc
c0019d1c:	c3                   	ret    
c0019d1d:	90                   	nop

c0019d1e <FAT::~FAT()>:
c0019d1e:	83 ec 0c             	sub    esp,0xc
c0019d21:	83 ec 0c             	sub    esp,0xc
c0019d24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d28:	e8 cd ff ff ff       	call   c0019cfa <FAT::~FAT()>
c0019d2d:	83 c4 10             	add    esp,0x10
c0019d30:	83 ec 08             	sub    esp,0x8
c0019d33:	6a 08                	push   0x8
c0019d35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d39:	e8 d7 52 ff ff       	call   c000f015 <operator delete(void*, unsigned long)>
c0019d3e:	83 c4 10             	add    esp,0x10
c0019d41:	83 c4 0c             	add    esp,0xc
c0019d44:	c3                   	ret    
c0019d45:	90                   	nop

c0019d46 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019d46:	83 ec 1c             	sub    esp,0x1c
c0019d49:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019d50:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019d55:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019d59:	8b 04 85 80 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda880]
c0019d60:	83 f8 ff             	cmp    eax,0xffffffff
c0019d63:	75 34                	jne    c0019d99 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0019d65:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019d69:	88 c2                	mov    dl,al
c0019d6b:	a1 60 57 02 c0       	mov    eax,ds:0xc0025760
c0019d70:	01 d0                	add    eax,edx
c0019d72:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019d76:	8b 15 60 57 02 c0    	mov    edx,DWORD PTR ds:0xc0025760
c0019d7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019d80:	89 14 85 80 57 02 c0 	mov    DWORD PTR [eax*4-0x3ffda880],edx
c0019d87:	a1 60 57 02 c0       	mov    eax,ds:0xc0025760
c0019d8c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019d90:	89 14 85 00 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda800],edx
c0019d97:	eb 17                	jmp    c0019db0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0019d99:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019d9d:	88 c2                	mov    dl,al
c0019d9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019da3:	8b 04 85 80 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda880]
c0019daa:	01 d0                	add    eax,edx
c0019dac:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019db0:	83 ec 04             	sub    esp,0x4
c0019db3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019db7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019dbb:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019dbf:	50                   	push   eax
c0019dc0:	e8 52 cd fe ff       	call   c0006b17 <f_getlabel>
c0019dc5:	83 c4 10             	add    esp,0x10
c0019dc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019dcc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019dd1:	75 07                	jne    c0019dda <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0019dd3:	b8 00 00 00 00       	mov    eax,0x0
c0019dd8:	eb 05                	jmp    c0019ddf <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0019dda:	b8 01 00 00 00       	mov    eax,0x1
c0019ddf:	83 c4 1c             	add    esp,0x1c
c0019de2:	c3                   	ret    
c0019de3:	90                   	nop

c0019de4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019de4:	57                   	push   edi
c0019de5:	83 ec 58             	sub    esp,0x58
c0019de8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019df0:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019df4:	b9 0f 00 00 00       	mov    ecx,0xf
c0019df9:	b8 00 00 00 00       	mov    eax,0x0
c0019dfe:	fc                   	cld    
c0019dff:	89 d7                	mov    edi,edx
c0019e01:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019e03:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019e07:	8b 04 85 80 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda880]
c0019e0e:	83 f8 ff             	cmp    eax,0xffffffff
c0019e11:	75 34                	jne    c0019e47 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0019e13:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019e17:	88 c2                	mov    dl,al
c0019e19:	a1 60 57 02 c0       	mov    eax,ds:0xc0025760
c0019e1e:	01 d0                	add    eax,edx
c0019e20:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019e24:	8b 15 60 57 02 c0    	mov    edx,DWORD PTR ds:0xc0025760
c0019e2a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019e2e:	89 14 85 80 57 02 c0 	mov    DWORD PTR [eax*4-0x3ffda880],edx
c0019e35:	a1 60 57 02 c0       	mov    eax,ds:0xc0025760
c0019e3a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019e3e:	89 14 85 00 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda800],edx
c0019e45:	eb 17                	jmp    c0019e5e <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0019e47:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019e4b:	88 c2                	mov    dl,al
c0019e4d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019e51:	8b 04 85 80 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda880]
c0019e58:	01 d0                	add    eax,edx
c0019e5a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019e5e:	83 ec 08             	sub    esp,0x8
c0019e61:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019e65:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e69:	50                   	push   eax
c0019e6a:	e8 a1 69 fe ff       	call   c0000810 <strcat>
c0019e6f:	83 c4 10             	add    esp,0x10
c0019e72:	83 ec 0c             	sub    esp,0xc
c0019e75:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e79:	50                   	push   eax
c0019e7a:	e8 86 ce fe ff       	call   c0006d05 <f_setlabel>
c0019e7f:	83 c4 10             	add    esp,0x10
c0019e82:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019e86:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019e8b:	75 07                	jne    c0019e94 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0019e8d:	b8 00 00 00 00       	mov    eax,0x0
c0019e92:	eb 05                	jmp    c0019e99 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0019e94:	b8 01 00 00 00       	mov    eax,0x1
c0019e99:	83 c4 58             	add    esp,0x58
c0019e9c:	5f                   	pop    edi
c0019e9d:	c3                   	ret    

c0019e9e <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019e9e:	83 ec 2c             	sub    esp,0x2c
c0019ea1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019ea9:	83 ec 08             	sub    esp,0x8
c0019eac:	68 0c 2e 02 c0       	push   0xc0022e0c
c0019eb1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019eb5:	e8 f0 68 fe ff       	call   c00007aa <strcmp>
c0019eba:	83 c4 10             	add    esp,0x10
c0019ebd:	85 c0                	test   eax,eax
c0019ebf:	0f 94 c0             	sete   al
c0019ec2:	84 c0                	test   al,al
c0019ec4:	74 0d                	je     c0019ed3 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0019ec6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019ece:	e9 a6 00 00 00       	jmp    c0019f79 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019ed3:	83 ec 08             	sub    esp,0x8
c0019ed6:	68 fe 2d 02 c0       	push   0xc0022dfe
c0019edb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019edf:	e8 c6 68 fe ff       	call   c00007aa <strcmp>
c0019ee4:	83 c4 10             	add    esp,0x10
c0019ee7:	85 c0                	test   eax,eax
c0019ee9:	0f 94 c0             	sete   al
c0019eec:	84 c0                	test   al,al
c0019eee:	74 0a                	je     c0019efa <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0019ef0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019ef8:	eb 7f                	jmp    c0019f79 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019efa:	83 ec 08             	sub    esp,0x8
c0019efd:	68 04 2e 02 c0       	push   0xc0022e04
c0019f02:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019f06:	e8 9f 68 fe ff       	call   c00007aa <strcmp>
c0019f0b:	83 c4 10             	add    esp,0x10
c0019f0e:	85 c0                	test   eax,eax
c0019f10:	0f 94 c0             	sete   al
c0019f13:	84 c0                	test   al,al
c0019f15:	74 0a                	je     c0019f21 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0019f17:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019f1f:	eb 58                	jmp    c0019f79 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019f21:	83 ec 08             	sub    esp,0x8
c0019f24:	68 ac 01 02 c0       	push   0xc00201ac
c0019f29:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019f2d:	e8 78 68 fe ff       	call   c00007aa <strcmp>
c0019f32:	83 c4 10             	add    esp,0x10
c0019f35:	85 c0                	test   eax,eax
c0019f37:	0f 94 c0             	sete   al
c0019f3a:	84 c0                	test   al,al
c0019f3c:	74 0a                	je     c0019f48 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0019f3e:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019f46:	eb 31                	jmp    c0019f79 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019f48:	83 ec 08             	sub    esp,0x8
c0019f4b:	68 0a 2e 02 c0       	push   0xc0022e0a
c0019f50:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019f54:	e8 51 68 fe ff       	call   c00007aa <strcmp>
c0019f59:	83 c4 10             	add    esp,0x10
c0019f5c:	85 c0                	test   eax,eax
c0019f5e:	0f 94 c0             	sete   al
c0019f61:	84 c0                	test   al,al
c0019f63:	74 0a                	je     c0019f6f <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0019f65:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019f6d:	eb 0a                	jmp    c0019f79 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019f6f:	b8 08 00 00 00       	mov    eax,0x8
c0019f74:	e9 04 01 00 00       	jmp    c001a07d <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019f79:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019f80:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019f85:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019f89:	8b 04 85 80 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda880]
c0019f90:	83 f8 ff             	cmp    eax,0xffffffff
c0019f93:	75 34                	jne    c0019fc9 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0019f95:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019f99:	88 c2                	mov    dl,al
c0019f9b:	a1 60 57 02 c0       	mov    eax,ds:0xc0025760
c0019fa0:	01 d0                	add    eax,edx
c0019fa2:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019fa6:	8b 15 60 57 02 c0    	mov    edx,DWORD PTR ds:0xc0025760
c0019fac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019fb0:	89 14 85 80 57 02 c0 	mov    DWORD PTR [eax*4-0x3ffda880],edx
c0019fb7:	a1 60 57 02 c0       	mov    eax,ds:0xc0025760
c0019fbc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019fc0:	89 14 85 00 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda800],edx
c0019fc7:	eb 17                	jmp    c0019fe0 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0019fc9:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019fcd:	88 c2                	mov    dl,al
c0019fcf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019fd3:	8b 04 85 80 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda880]
c0019fda:	01 d0                	add    eax,edx
c0019fdc:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019fe0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019fe4:	88 04 24             	mov    BYTE PTR [esp],al
c0019fe7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019feb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019fef:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019ff7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019ffc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a004:	83 ec 0c             	sub    esp,0xc
c001a007:	68 00 20 00 00       	push   0x2000
c001a00c:	e8 f3 1f ff ff       	call   c000c004 <malloc>
c001a011:	83 c4 10             	add    esp,0x10
c001a014:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a018:	68 00 20 00 00       	push   0x2000
c001a01d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a021:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a025:	50                   	push   eax
c001a026:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a02a:	50                   	push   eax
c001a02b:	e8 20 d1 fe ff       	call   c0007150 <f_mkfs>
c001a030:	83 c4 10             	add    esp,0x10
c001a033:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a037:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a03c:	75 07                	jne    c001a045 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001a03e:	b8 00 00 00 00       	mov    eax,0x0
c001a043:	eb 38                	jmp    c001a07d <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a045:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a04a:	75 17                	jne    c001a063 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001a04c:	83 ec 0c             	sub    esp,0xc
c001a04f:	68 3c 2e 02 c0       	push   0xc0022e3c
c001a054:	e8 9c 50 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001a059:	83 c4 10             	add    esp,0x10
c001a05c:	b8 09 00 00 00       	mov    eax,0x9
c001a061:	eb 1a                	jmp    c001a07d <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a063:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a067:	83 ec 08             	sub    esp,0x8
c001a06a:	50                   	push   eax
c001a06b:	68 10 2e 02 c0       	push   0xc0022e10
c001a070:	e8 80 50 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001a075:	83 c4 10             	add    esp,0x10
c001a078:	b8 01 00 00 00       	mov    eax,0x1
c001a07d:	83 c4 2c             	add    esp,0x2c
c001a080:	c3                   	ret    
c001a081:	90                   	nop

c001a082 <FAT::tryMount(LogicalDisk*, int)>:
c001a082:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a088:	a1 60 57 02 c0       	mov    eax,ds:0xc0025760
c001a08d:	83 f8 14             	cmp    eax,0x14
c001a090:	75 17                	jne    c001a0a9 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001a092:	83 ec 0c             	sub    esp,0xc
c001a095:	68 22 2e 02 c0       	push   0xc0022e22
c001a09a:	e8 eb b7 ff ff       	call   c001588a <Krnl::panic(char const*)>
c001a09f:	83 c4 10             	add    esp,0x10
c001a0a2:	b0 00                	mov    al,0x0
c001a0a4:	e9 d7 01 00 00       	jmp    c001a280 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a0a9:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a0b0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a0b6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a0bc:	3d 00 02 00 00       	cmp    eax,0x200
c001a0c1:	74 07                	je     c001a0ca <FAT::tryMount(LogicalDisk*, int)+0x48>
c001a0c3:	b0 00                	mov    al,0x0
c001a0c5:	e9 b6 01 00 00       	jmp    c001a280 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a0ca:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a0d2:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a0d9:	8b 04 85 80 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda880]
c001a0e0:	83 f8 ff             	cmp    eax,0xffffffff
c001a0e3:	74 07                	je     c001a0ec <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001a0e5:	b0 01                	mov    al,0x1
c001a0e7:	e9 94 01 00 00       	jmp    c001a280 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a0ec:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a0f6:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a0fe:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a105:	88 c2                	mov    dl,al
c001a107:	a1 60 57 02 c0       	mov    eax,ds:0xc0025760
c001a10c:	01 d0                	add    eax,edx
c001a10e:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a115:	8b 15 60 57 02 c0    	mov    edx,DWORD PTR ds:0xc0025760
c001a11b:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a122:	89 14 85 80 57 02 c0 	mov    DWORD PTR [eax*4-0x3ffda880],edx
c001a129:	a1 60 57 02 c0       	mov    eax,ds:0xc0025760
c001a12e:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a135:	89 14 85 00 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda800],edx
c001a13c:	83 ec 0c             	sub    esp,0xc
c001a13f:	68 54 02 00 00       	push   0x254
c001a144:	e8 bb 1e ff ff       	call   c000c004 <malloc>
c001a149:	83 c4 10             	add    esp,0x10
c001a14c:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a153:	83 ec 04             	sub    esp,0x4
c001a156:	6a 00                	push   0x0
c001a158:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a15f:	50                   	push   eax
c001a160:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a167:	e8 a2 ab fe ff       	call   c0004d0e <f_mount>
c001a16c:	83 c4 10             	add    esp,0x10
c001a16f:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a176:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a17e:	74 19                	je     c001a199 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001a180:	83 ec 0c             	sub    esp,0xc
c001a183:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a18a:	e8 95 1e ff ff       	call   c000c024 <rfree>
c001a18f:	83 c4 10             	add    esp,0x10
c001a192:	b0 00                	mov    al,0x0
c001a194:	e9 e7 00 00 00       	jmp    c001a280 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a199:	83 ec 04             	sub    esp,0x4
c001a19c:	68 00 01 00 00       	push   0x100
c001a1a1:	6a 00                	push   0x0
c001a1a3:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a1aa:	50                   	push   eax
c001a1ab:	e8 0a 65 fe ff       	call   c00006ba <memset>
c001a1b0:	83 c4 10             	add    esp,0x10
c001a1b3:	83 ec 08             	sub    esp,0x8
c001a1b6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a1bd:	50                   	push   eax
c001a1be:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a1c5:	50                   	push   eax
c001a1c6:	e8 45 66 fe ff       	call   c0000810 <strcat>
c001a1cb:	83 c4 10             	add    esp,0x10
c001a1ce:	83 ec 08             	sub    esp,0x8
c001a1d1:	68 30 2e 02 c0       	push   0xc0022e30
c001a1d6:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a1dd:	50                   	push   eax
c001a1de:	e8 2d 66 fe ff       	call   c0000810 <strcat>
c001a1e3:	83 c4 10             	add    esp,0x10
c001a1e6:	83 ec 04             	sub    esp,0x4
c001a1e9:	6a 01                	push   0x1
c001a1eb:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001a1f2:	50                   	push   eax
c001a1f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a1f7:	50                   	push   eax
c001a1f8:	e8 73 ab fe ff       	call   c0004d70 <f_open>
c001a1fd:	83 c4 10             	add    esp,0x10
c001a200:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a207:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a20e:	85 c0                	test   eax,eax
c001a210:	74 0a                	je     c001a21c <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001a212:	78 2d                	js     c001a241 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a214:	83 e8 04             	sub    eax,0x4
c001a217:	83 f8 01             	cmp    eax,0x1
c001a21a:	77 25                	ja     c001a241 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a21c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001a224:	83 ec 0c             	sub    esp,0xc
c001a227:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a22b:	50                   	push   eax
c001a22c:	e8 91 b6 fe ff       	call   c00058c2 <f_close>
c001a231:	83 c4 10             	add    esp,0x10
c001a234:	90                   	nop
c001a235:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001a23d:	74 3a                	je     c001a279 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001a23f:	eb 2d                	jmp    c001a26e <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001a241:	83 ec 0c             	sub    esp,0xc
c001a244:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a24b:	e8 d4 1d ff ff       	call   c000c024 <rfree>
c001a250:	83 c4 10             	add    esp,0x10
c001a253:	83 ec 04             	sub    esp,0x4
c001a256:	6a 00                	push   0x0
c001a258:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a25f:	50                   	push   eax
c001a260:	6a 00                	push   0x0
c001a262:	e8 a7 aa fe ff       	call   c0004d0e <f_mount>
c001a267:	83 c4 10             	add    esp,0x10
c001a26a:	b0 00                	mov    al,0x0
c001a26c:	eb 12                	jmp    c001a280 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a26e:	a1 60 57 02 c0       	mov    eax,ds:0xc0025760
c001a273:	40                   	inc    eax
c001a274:	a3 60 57 02 c0       	mov    ds:0xc0025760,eax
c001a279:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001a280:	81 c4 6c 03 00 00    	add    esp,0x36c
c001a286:	c3                   	ret    
c001a287:	90                   	nop

c001a288 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001a288:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001a28e:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001a296:	74 0a                	je     c001a2a2 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001a298:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001a2a0:	75 0a                	jne    c001a2ac <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001a2a2:	b8 04 00 00 00       	mov    eax,0x4
c001a2a7:	e9 db 00 00 00       	jmp    c001a387 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001a2ac:	83 ec 08             	sub    esp,0x8
c001a2af:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a2b6:	50                   	push   eax
c001a2b7:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001a2be:	e8 09 bc fe ff       	call   c0005ecc <f_readdir>
c001a2c3:	83 c4 10             	add    esp,0x10
c001a2c6:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001a2cd:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a2d3:	83 ec 0c             	sub    esp,0xc
c001a2d6:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001a2dd:	83 c0 1a             	add    eax,0x1a
c001a2e0:	50                   	push   eax
c001a2e1:	e8 f1 63 fe ff       	call   c00006d7 <strlen>
c001a2e6:	83 c4 10             	add    esp,0x10
c001a2e9:	ba 00 00 00 00       	mov    edx,0x0
c001a2ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a2f2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a2f6:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001a2fd:	0f b6 c0             	movzx  eax,al
c001a300:	83 e0 10             	and    eax,0x10
c001a303:	74 07                	je     c001a30c <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001a305:	b8 02 00 00 00       	mov    eax,0x2
c001a30a:	eb 05                	jmp    c001a311 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001a30c:	b8 01 00 00 00       	mov    eax,0x1
c001a311:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a315:	83 ec 08             	sub    esp,0x8
c001a318:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a31f:	83 c0 1a             	add    eax,0x1a
c001a322:	50                   	push   eax
c001a323:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a327:	83 c0 10             	add    eax,0x10
c001a32a:	50                   	push   eax
c001a32b:	e8 29 64 fe ff       	call   c0000759 <strcpy>
c001a330:	83 c4 10             	add    esp,0x10
c001a333:	83 ec 04             	sub    esp,0x4
c001a336:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001a33d:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a341:	50                   	push   eax
c001a342:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001a349:	e8 36 63 fe ff       	call   c0000684 <memcpy>
c001a34e:	83 c4 10             	add    esp,0x10
c001a351:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001a358:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a35e:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001a365:	84 c0                	test   al,al
c001a367:	75 07                	jne    c001a370 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001a369:	b8 07 00 00 00       	mov    eax,0x7
c001a36e:	eb 17                	jmp    c001a387 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001a370:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001a377:	85 c0                	test   eax,eax
c001a379:	75 07                	jne    c001a382 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001a37b:	b8 00 00 00 00       	mov    eax,0x0
c001a380:	eb 05                	jmp    c001a387 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001a382:	b8 01 00 00 00       	mov    eax,0x1
c001a387:	81 c4 3c 02 00 00    	add    esp,0x23c
c001a38d:	c3                   	ret    

c001a38e <FAT::read(void*, unsigned long, void*, int*)>:
c001a38e:	83 ec 1c             	sub    esp,0x1c
c001a391:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a396:	74 07                	je     c001a39f <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001a398:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a39d:	75 07                	jne    c001a3a6 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001a39f:	b8 04 00 00 00       	mov    eax,0x4
c001a3a4:	eb 3d                	jmp    c001a3e3 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a3a6:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a3aa:	50                   	push   eax
c001a3ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a3b3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a3b7:	e8 f0 ad fe ff       	call   c00051ac <f_read>
c001a3bc:	83 c4 10             	add    esp,0x10
c001a3bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a3c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3c7:	89 c2                	mov    edx,eax
c001a3c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a3cd:	89 10                	mov    DWORD PTR [eax],edx
c001a3cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a3d3:	85 c0                	test   eax,eax
c001a3d5:	75 07                	jne    c001a3de <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001a3d7:	b8 00 00 00 00       	mov    eax,0x0
c001a3dc:	eb 05                	jmp    c001a3e3 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a3de:	b8 01 00 00 00       	mov    eax,0x1
c001a3e3:	83 c4 1c             	add    esp,0x1c
c001a3e6:	c3                   	ret    
c001a3e7:	90                   	nop

c001a3e8 <FAT::write(void*, unsigned long, void*, int*)>:
c001a3e8:	83 ec 1c             	sub    esp,0x1c
c001a3eb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a3f0:	74 07                	je     c001a3f9 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001a3f2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a3f7:	75 07                	jne    c001a400 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001a3f9:	b8 04 00 00 00       	mov    eax,0x4
c001a3fe:	eb 3d                	jmp    c001a43d <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a400:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a404:	50                   	push   eax
c001a405:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a409:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a40d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a411:	e8 16 b0 fe ff       	call   c000542c <f_write>
c001a416:	83 c4 10             	add    esp,0x10
c001a419:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a41d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a421:	89 c2                	mov    edx,eax
c001a423:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a427:	89 10                	mov    DWORD PTR [eax],edx
c001a429:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a42d:	85 c0                	test   eax,eax
c001a42f:	75 07                	jne    c001a438 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001a431:	b8 00 00 00 00       	mov    eax,0x0
c001a436:	eb 05                	jmp    c001a43d <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a438:	b8 01 00 00 00       	mov    eax,0x1
c001a43d:	83 c4 1c             	add    esp,0x1c
c001a440:	c3                   	ret    
c001a441:	90                   	nop

c001a442 <FAT::close(void*)>:
c001a442:	83 ec 1c             	sub    esp,0x1c
c001a445:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a44a:	75 07                	jne    c001a453 <FAT::close(void*)+0x11>
c001a44c:	b8 04 00 00 00       	mov    eax,0x4
c001a451:	eb 36                	jmp    c001a489 <FAT::close(void*)+0x47>
c001a453:	83 ec 0c             	sub    esp,0xc
c001a456:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a45a:	e8 63 b4 fe ff       	call   c00058c2 <f_close>
c001a45f:	83 c4 10             	add    esp,0x10
c001a462:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a466:	83 ec 0c             	sub    esp,0xc
c001a469:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a46d:	e8 a2 1b ff ff       	call   c000c014 <free>
c001a472:	83 c4 10             	add    esp,0x10
c001a475:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a479:	85 c0                	test   eax,eax
c001a47b:	75 07                	jne    c001a484 <FAT::close(void*)+0x42>
c001a47d:	b8 00 00 00 00       	mov    eax,0x0
c001a482:	eb 05                	jmp    c001a489 <FAT::close(void*)+0x47>
c001a484:	b8 01 00 00 00       	mov    eax,0x1
c001a489:	83 c4 1c             	add    esp,0x1c
c001a48c:	c3                   	ret    
c001a48d:	90                   	nop

c001a48e <FAT::closeDir(void*)>:
c001a48e:	83 ec 1c             	sub    esp,0x1c
c001a491:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a496:	75 07                	jne    c001a49f <FAT::closeDir(void*)+0x11>
c001a498:	b8 04 00 00 00       	mov    eax,0x4
c001a49d:	eb 36                	jmp    c001a4d5 <FAT::closeDir(void*)+0x47>
c001a49f:	83 ec 0c             	sub    esp,0xc
c001a4a2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a4a6:	e8 ff b9 fe ff       	call   c0005eaa <f_closedir>
c001a4ab:	83 c4 10             	add    esp,0x10
c001a4ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a4b2:	83 ec 0c             	sub    esp,0xc
c001a4b5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a4b9:	e8 56 1b ff ff       	call   c000c014 <free>
c001a4be:	83 c4 10             	add    esp,0x10
c001a4c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4c5:	85 c0                	test   eax,eax
c001a4c7:	75 07                	jne    c001a4d0 <FAT::closeDir(void*)+0x42>
c001a4c9:	b8 00 00 00 00       	mov    eax,0x0
c001a4ce:	eb 05                	jmp    c001a4d5 <FAT::closeDir(void*)+0x47>
c001a4d0:	b8 01 00 00 00       	mov    eax,0x1
c001a4d5:	83 c4 1c             	add    esp,0x1c
c001a4d8:	c3                   	ret    
c001a4d9:	90                   	nop

c001a4da <FAT::seek(void*, unsigned long long)>:
c001a4da:	83 ec 2c             	sub    esp,0x2c
c001a4dd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a4e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a4e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a4e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a4ed:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a4f2:	75 07                	jne    c001a4fb <FAT::seek(void*, unsigned long long)+0x21>
c001a4f4:	b8 04 00 00 00       	mov    eax,0x4
c001a4f9:	eb 2f                	jmp    c001a52a <FAT::seek(void*, unsigned long long)+0x50>
c001a4fb:	83 ec 04             	sub    esp,0x4
c001a4fe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a502:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a506:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a50a:	e8 e2 b3 fe ff       	call   c00058f1 <f_lseek>
c001a50f:	83 c4 10             	add    esp,0x10
c001a512:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a516:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a51a:	85 c0                	test   eax,eax
c001a51c:	75 07                	jne    c001a525 <FAT::seek(void*, unsigned long long)+0x4b>
c001a51e:	b8 00 00 00 00       	mov    eax,0x0
c001a523:	eb 05                	jmp    c001a52a <FAT::seek(void*, unsigned long long)+0x50>
c001a525:	b8 01 00 00 00       	mov    eax,0x1
c001a52a:	83 c4 2c             	add    esp,0x2c
c001a52d:	c3                   	ret    

c001a52e <fatWrapperReadDisk>:
c001a52e:	83 ec 1c             	sub    esp,0x1c
c001a531:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a535:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a539:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a53d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a540:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a544:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a548:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a54d:	8b 04 85 e0 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb720]
c001a554:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a558:	83 ec 0c             	sub    esp,0xc
c001a55b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a55f:	52                   	push   edx
c001a560:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a564:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a568:	50                   	push   eax
c001a569:	e8 c4 81 ff ff       	call   c0012732 <LogicalDisk::read(unsigned long long, int, void*)>
c001a56e:	83 c4 20             	add    esp,0x20
c001a571:	83 c4 1c             	add    esp,0x1c
c001a574:	c3                   	ret    

c001a575 <fatWrapperWriteDisk>:
c001a575:	83 ec 1c             	sub    esp,0x1c
c001a578:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a57c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a580:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a584:	89 04 24             	mov    DWORD PTR [esp],eax
c001a587:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a58b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a58f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a594:	8b 04 85 e0 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb720]
c001a59b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a59f:	83 ec 0c             	sub    esp,0xc
c001a5a2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a5a6:	52                   	push   edx
c001a5a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a5ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a5af:	50                   	push   eax
c001a5b0:	e8 e9 81 ff ff       	call   c001279e <LogicalDisk::write(unsigned long long, int, void*)>
c001a5b5:	83 c4 20             	add    esp,0x20
c001a5b8:	83 c4 1c             	add    esp,0x1c
c001a5bb:	c3                   	ret    

c001a5bc <fatWrapperIoctl>:
c001a5bc:	53                   	push   ebx
c001a5bd:	83 ec 28             	sub    esp,0x28
c001a5c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a5c4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a5c8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a5cc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a5d0:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001a5d5:	75 31                	jne    c001a608 <fatWrapperIoctl+0x4c>
c001a5d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a5db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a5df:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a5e4:	8b 04 85 e0 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb720]
c001a5eb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a5f1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a5f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a5fb:	66 89 02             	mov    WORD PTR [edx],ax
c001a5fe:	b8 00 00 00 00       	mov    eax,0x0
c001a603:	e9 b2 00 00 00       	jmp    c001a6ba <fatWrapperIoctl+0xfe>
c001a608:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001a60d:	75 6a                	jne    c001a679 <fatWrapperIoctl+0xbd>
c001a60f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a613:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a617:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a61c:	8b 04 85 e0 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb720]
c001a623:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a629:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a62f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a635:	89 c8                	mov    eax,ecx
c001a637:	89 da                	mov    edx,ebx
c001a639:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a63d:	c1 e0 0a             	shl    eax,0xa
c001a640:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001a645:	8b 0c 8d e0 48 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb720]
c001a64c:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a652:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a658:	89 cb                	mov    ebx,ecx
c001a65a:	c1 fb 1f             	sar    ebx,0x1f
c001a65d:	53                   	push   ebx
c001a65e:	51                   	push   ecx
c001a65f:	52                   	push   edx
c001a660:	50                   	push   eax
c001a661:	e8 f6 4a 00 00       	call   c001f15c <__udivdi3>
c001a666:	83 c4 10             	add    esp,0x10
c001a669:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a66d:	89 01                	mov    DWORD PTR [ecx],eax
c001a66f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a672:	b8 00 00 00 00       	mov    eax,0x0
c001a677:	eb 41                	jmp    c001a6ba <fatWrapperIoctl+0xfe>
c001a679:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001a67e:	75 07                	jne    c001a687 <fatWrapperIoctl+0xcb>
c001a680:	b8 00 00 00 00       	mov    eax,0x0
c001a685:	eb 33                	jmp    c001a6ba <fatWrapperIoctl+0xfe>
c001a687:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001a68c:	75 19                	jne    c001a6a7 <fatWrapperIoctl+0xeb>
c001a68e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a692:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a696:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a69a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a6a0:	b8 00 00 00 00       	mov    eax,0x0
c001a6a5:	eb 13                	jmp    c001a6ba <fatWrapperIoctl+0xfe>
c001a6a7:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001a6ac:	75 07                	jne    c001a6b5 <fatWrapperIoctl+0xf9>
c001a6ae:	b8 00 00 00 00       	mov    eax,0x0
c001a6b3:	eb 05                	jmp    c001a6ba <fatWrapperIoctl+0xfe>
c001a6b5:	b8 04 00 00 00       	mov    eax,0x4
c001a6ba:	83 c4 28             	add    esp,0x28
c001a6bd:	5b                   	pop    ebx
c001a6be:	c3                   	ret    
c001a6bf:	90                   	nop

c001a6c0 <FAT::FAT()>:
c001a6c0:	83 ec 1c             	sub    esp,0x1c
c001a6c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6c7:	83 ec 0c             	sub    esp,0xc
c001a6ca:	50                   	push   eax
c001a6cb:	e8 2a 4d ff ff       	call   c000f3fa <Filesystem::Filesystem()>
c001a6d0:	83 c4 10             	add    esp,0x10
c001a6d3:	ba 6c 2e 02 c0       	mov    edx,0xc0022e6c
c001a6d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6dc:	89 10                	mov    DWORD PTR [eax],edx
c001a6de:	c7 05 60 57 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025760,0x0
c001a6e8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a6f0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a6f5:	7f 15                	jg     c001a70c <FAT::FAT()+0x4c>
c001a6f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6fb:	c7 04 85 80 57 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffda880],0xffffffff
c001a706:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a70a:	eb e4                	jmp    c001a6f0 <FAT::FAT()+0x30>
c001a70c:	90                   	nop
c001a70d:	83 c4 1c             	add    esp,0x1c
c001a710:	c3                   	ret    
c001a711:	90                   	nop

c001a712 <FAT::fixFilepath(char*)>:
c001a712:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a716:	8a 00                	mov    al,BYTE PTR [eax]
c001a718:	3c 40                	cmp    al,0x40
c001a71a:	7e 2c                	jle    c001a748 <FAT::fixFilepath(char*)+0x36>
c001a71c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a720:	8a 00                	mov    al,BYTE PTR [eax]
c001a722:	83 e8 41             	sub    eax,0x41
c001a725:	88 c2                	mov    dl,al
c001a727:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a72b:	88 10                	mov    BYTE PTR [eax],dl
c001a72d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a731:	8a 00                	mov    al,BYTE PTR [eax]
c001a733:	0f be c0             	movsx  eax,al
c001a736:	8b 04 85 80 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda880]
c001a73d:	83 c0 30             	add    eax,0x30
c001a740:	88 c2                	mov    dl,al
c001a742:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a746:	88 10                	mov    BYTE PTR [eax],dl
c001a748:	90                   	nop
c001a749:	c3                   	ret    

c001a74a <FAT::open(char const*, void**, FileOpenMode)>:
c001a74a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a750:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a758:	74 0a                	je     c001a764 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001a75a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a762:	75 0a                	jne    c001a76e <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001a764:	b8 04 00 00 00       	mov    eax,0x4
c001a769:	e9 fd 00 00 00       	jmp    c001a86b <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001a76e:	83 ec 08             	sub    esp,0x8
c001a771:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a778:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a77c:	50                   	push   eax
c001a77d:	e8 d7 5f fe ff       	call   c0000759 <strcpy>
c001a782:	83 c4 10             	add    esp,0x10
c001a785:	83 ec 08             	sub    esp,0x8
c001a788:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a78c:	50                   	push   eax
c001a78d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a794:	e8 79 ff ff ff       	call   c001a712 <FAT::fixFilepath(char*)>
c001a799:	83 c4 10             	add    esp,0x10
c001a79c:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a7a4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a7ab:	83 e0 01             	and    eax,0x1
c001a7ae:	74 08                	je     c001a7b8 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001a7b0:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001a7b8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a7bf:	83 e0 04             	and    eax,0x4
c001a7c2:	74 10                	je     c001a7d4 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001a7c4:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001a7cc:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a7d4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a7db:	83 e0 02             	and    eax,0x2
c001a7de:	74 08                	je     c001a7e8 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001a7e0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a7e8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a7ef:	83 e0 08             	and    eax,0x8
c001a7f2:	74 08                	je     c001a7fc <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001a7f4:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001a7fc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a803:	83 e0 10             	and    eax,0x10
c001a806:	74 08                	je     c001a810 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001a808:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001a810:	83 ec 0c             	sub    esp,0xc
c001a813:	68 50 02 00 00       	push   0x250
c001a818:	e8 e7 17 ff ff       	call   c000c004 <malloc>
c001a81d:	83 c4 10             	add    esp,0x10
c001a820:	89 c2                	mov    edx,eax
c001a822:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a829:	89 10                	mov    DWORD PTR [eax],edx
c001a82b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001a833:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a83a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a83c:	83 ec 04             	sub    esp,0x4
c001a83f:	52                   	push   edx
c001a840:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a844:	52                   	push   edx
c001a845:	50                   	push   eax
c001a846:	e8 25 a5 fe ff       	call   c0004d70 <f_open>
c001a84b:	83 c4 10             	add    esp,0x10
c001a84e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001a855:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001a85d:	74 07                	je     c001a866 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001a85f:	b8 01 00 00 00       	mov    eax,0x1
c001a864:	eb 05                	jmp    c001a86b <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001a866:	b8 00 00 00 00       	mov    eax,0x0
c001a86b:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a871:	c3                   	ret    

c001a872 <FAT::openDir(char const*, void**)>:
c001a872:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a878:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a880:	74 0a                	je     c001a88c <FAT::openDir(char const*, void**)+0x1a>
c001a882:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a88a:	75 07                	jne    c001a893 <FAT::openDir(char const*, void**)+0x21>
c001a88c:	b8 04 00 00 00       	mov    eax,0x4
c001a891:	eb 7d                	jmp    c001a910 <FAT::openDir(char const*, void**)+0x9e>
c001a893:	83 ec 08             	sub    esp,0x8
c001a896:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a89d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a8a1:	50                   	push   eax
c001a8a2:	e8 b2 5e fe ff       	call   c0000759 <strcpy>
c001a8a7:	83 c4 10             	add    esp,0x10
c001a8aa:	83 ec 08             	sub    esp,0x8
c001a8ad:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a8b1:	50                   	push   eax
c001a8b2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a8b9:	e8 54 fe ff ff       	call   c001a712 <FAT::fixFilepath(char*)>
c001a8be:	83 c4 10             	add    esp,0x10
c001a8c1:	83 ec 0c             	sub    esp,0xc
c001a8c4:	6a 4c                	push   0x4c
c001a8c6:	e8 39 17 ff ff       	call   c000c004 <malloc>
c001a8cb:	83 c4 10             	add    esp,0x10
c001a8ce:	89 c2                	mov    edx,eax
c001a8d0:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a8d7:	89 10                	mov    DWORD PTR [eax],edx
c001a8d9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a8e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001a8e2:	83 ec 08             	sub    esp,0x8
c001a8e5:	8d 54 24 14          	lea    edx,[esp+0x14]
c001a8e9:	52                   	push   edx
c001a8ea:	50                   	push   eax
c001a8eb:	e8 b8 b4 fe ff       	call   c0005da8 <f_opendir>
c001a8f0:	83 c4 10             	add    esp,0x10
c001a8f3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a8fa:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001a902:	74 07                	je     c001a90b <FAT::openDir(char const*, void**)+0x99>
c001a904:	b8 01 00 00 00       	mov    eax,0x1
c001a909:	eb 05                	jmp    c001a910 <FAT::openDir(char const*, void**)+0x9e>
c001a90b:	b8 00 00 00 00       	mov    eax,0x0
c001a910:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a916:	c3                   	ret    
c001a917:	90                   	nop

c001a918 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001a918:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a91e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001a926:	75 0a                	jne    c001a932 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001a928:	b8 04 00 00 00       	mov    eax,0x4
c001a92d:	e9 c9 00 00 00       	jmp    c001a9fb <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001a932:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001a93a:	75 0a                	jne    c001a946 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001a93c:	b8 04 00 00 00       	mov    eax,0x4
c001a941:	e9 b5 00 00 00       	jmp    c001a9fb <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001a946:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001a94e:	75 0a                	jne    c001a95a <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001a950:	b8 04 00 00 00       	mov    eax,0x4
c001a955:	e9 a1 00 00 00       	jmp    c001a9fb <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001a95a:	83 ec 08             	sub    esp,0x8
c001a95d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a964:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a96b:	50                   	push   eax
c001a96c:	e8 e8 5d fe ff       	call   c0000759 <strcpy>
c001a971:	83 c4 10             	add    esp,0x10
c001a974:	83 ec 08             	sub    esp,0x8
c001a977:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a97e:	50                   	push   eax
c001a97f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a986:	e8 87 fd ff ff       	call   c001a712 <FAT::fixFilepath(char*)>
c001a98b:	83 c4 10             	add    esp,0x10
c001a98e:	83 ec 08             	sub    esp,0x8
c001a991:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a995:	50                   	push   eax
c001a996:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a99d:	50                   	push   eax
c001a99e:	e8 c4 b5 fe ff       	call   c0005f67 <f_stat>
c001a9a3:	83 c4 10             	add    esp,0x10
c001a9a6:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a9ad:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a9b4:	85 c0                	test   eax,eax
c001a9b6:	74 07                	je     c001a9bf <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001a9b8:	83 f8 04             	cmp    eax,0x4
c001a9bb:	74 32                	je     c001a9ef <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001a9bd:	eb 37                	jmp    c001a9f6 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001a9bf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a9c3:	0f b6 c0             	movzx  eax,al
c001a9c6:	83 e0 10             	and    eax,0x10
c001a9c9:	0f 95 c2             	setne  dl
c001a9cc:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a9d3:	88 10                	mov    BYTE PTR [eax],dl
c001a9d5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a9d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a9dc:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a9e3:	89 01                	mov    DWORD PTR [ecx],eax
c001a9e5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a9e8:	b8 00 00 00 00       	mov    eax,0x0
c001a9ed:	eb 0c                	jmp    c001a9fb <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001a9ef:	b8 02 00 00 00       	mov    eax,0x2
c001a9f4:	eb 05                	jmp    c001a9fb <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001a9f6:	b8 01 00 00 00       	mov    eax,0x1
c001a9fb:	81 c4 2c 02 00 00    	add    esp,0x22c
c001aa01:	c3                   	ret    

c001aa02 <FAT::unlink(char const*)>:
c001aa02:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa08:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001aa10:	75 07                	jne    c001aa19 <FAT::unlink(char const*)+0x17>
c001aa12:	b8 04 00 00 00       	mov    eax,0x4
c001aa17:	eb 5c                	jmp    c001aa75 <FAT::unlink(char const*)+0x73>
c001aa19:	83 ec 08             	sub    esp,0x8
c001aa1c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa23:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa27:	50                   	push   eax
c001aa28:	e8 2c 5d fe ff       	call   c0000759 <strcpy>
c001aa2d:	83 c4 10             	add    esp,0x10
c001aa30:	83 ec 08             	sub    esp,0x8
c001aa33:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa37:	50                   	push   eax
c001aa38:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa3f:	e8 ce fc ff ff       	call   c001a712 <FAT::fixFilepath(char*)>
c001aa44:	83 c4 10             	add    esp,0x10
c001aa47:	83 ec 0c             	sub    esp,0xc
c001aa4a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa4e:	50                   	push   eax
c001aa4f:	e8 65 b8 fe ff       	call   c00062b9 <f_unlink>
c001aa54:	83 c4 10             	add    esp,0x10
c001aa57:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001aa5e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001aa65:	85 c0                	test   eax,eax
c001aa67:	75 07                	jne    c001aa70 <FAT::unlink(char const*)+0x6e>
c001aa69:	b8 00 00 00 00       	mov    eax,0x0
c001aa6e:	eb 05                	jmp    c001aa75 <FAT::unlink(char const*)+0x73>
c001aa70:	b8 01 00 00 00       	mov    eax,0x1
c001aa75:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aa7b:	c3                   	ret    

c001aa7c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001aa7c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aa82:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001aa89:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001aa90:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001aa94:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001aa98:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001aaa0:	75 0a                	jne    c001aaac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001aaa2:	b8 04 00 00 00       	mov    eax,0x4
c001aaa7:	e9 1c 01 00 00       	jmp    c001abc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001aaac:	83 ec 08             	sub    esp,0x8
c001aaaf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001aab6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aaba:	50                   	push   eax
c001aabb:	e8 99 5c fe ff       	call   c0000759 <strcpy>
c001aac0:	83 c4 10             	add    esp,0x10
c001aac3:	83 ec 08             	sub    esp,0x8
c001aac6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001aaca:	50                   	push   eax
c001aacb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001aad2:	e8 3b fc ff ff       	call   c001a712 <FAT::fixFilepath(char*)>
c001aad7:	83 c4 10             	add    esp,0x10
c001aada:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001aae2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001aaea:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001aaef:	83 e0 01             	and    eax,0x1
c001aaf2:	74 08                	je     c001aafc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001aaf4:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001aafc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ab01:	83 e0 02             	and    eax,0x2
c001ab04:	74 08                	je     c001ab0e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001ab06:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001ab0e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ab13:	83 e0 04             	and    eax,0x4
c001ab16:	74 08                	je     c001ab20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001ab18:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001ab20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ab25:	83 e0 08             	and    eax,0x8
c001ab28:	74 08                	je     c001ab32 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001ab2a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001ab32:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ab37:	83 e0 01             	and    eax,0x1
c001ab3a:	74 08                	je     c001ab44 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001ab3c:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001ab44:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ab49:	83 e0 02             	and    eax,0x2
c001ab4c:	74 08                	je     c001ab56 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001ab4e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001ab56:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ab5b:	83 e0 04             	and    eax,0x4
c001ab5e:	74 08                	je     c001ab68 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001ab60:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001ab68:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ab6d:	83 e0 08             	and    eax,0x8
c001ab70:	74 08                	je     c001ab7a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001ab72:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001ab7a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ab81:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001ab88:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001ab90:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001ab98:	83 ec 04             	sub    esp,0x4
c001ab9b:	52                   	push   edx
c001ab9c:	50                   	push   eax
c001ab9d:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aba1:	50                   	push   eax
c001aba2:	e8 b4 bd fe ff       	call   c000695b <f_chmod>
c001aba7:	83 c4 10             	add    esp,0x10
c001abaa:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001abb1:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001abb8:	85 c0                	test   eax,eax
c001abba:	75 07                	jne    c001abc3 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001abbc:	b8 00 00 00 00       	mov    eax,0x0
c001abc1:	eb 05                	jmp    c001abc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001abc3:	b8 01 00 00 00       	mov    eax,0x1
c001abc8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001abce:	c3                   	ret    
c001abcf:	90                   	nop

c001abd0 <FAT::rename(char const*, char const*)>:
c001abd0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001abd6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001abde:	74 0a                	je     c001abea <FAT::rename(char const*, char const*)+0x1a>
c001abe0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001abe8:	75 0a                	jne    c001abf4 <FAT::rename(char const*, char const*)+0x24>
c001abea:	b8 04 00 00 00       	mov    eax,0x4
c001abef:	e9 98 00 00 00       	jmp    c001ac8c <FAT::rename(char const*, char const*)+0xbc>
c001abf4:	83 ec 08             	sub    esp,0x8
c001abf7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001abfe:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ac05:	50                   	push   eax
c001ac06:	e8 4e 5b fe ff       	call   c0000759 <strcpy>
c001ac0b:	83 c4 10             	add    esp,0x10
c001ac0e:	83 ec 08             	sub    esp,0x8
c001ac11:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001ac18:	50                   	push   eax
c001ac19:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ac20:	e8 ed fa ff ff       	call   c001a712 <FAT::fixFilepath(char*)>
c001ac25:	83 c4 10             	add    esp,0x10
c001ac28:	83 ec 08             	sub    esp,0x8
c001ac2b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001ac32:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ac36:	50                   	push   eax
c001ac37:	e8 1d 5b fe ff       	call   c0000759 <strcpy>
c001ac3c:	83 c4 10             	add    esp,0x10
c001ac3f:	83 ec 08             	sub    esp,0x8
c001ac42:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ac46:	50                   	push   eax
c001ac47:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ac4e:	e8 bf fa ff ff       	call   c001a712 <FAT::fixFilepath(char*)>
c001ac53:	83 c4 10             	add    esp,0x10
c001ac56:	83 ec 08             	sub    esp,0x8
c001ac59:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ac5d:	50                   	push   eax
c001ac5e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ac65:	50                   	push   eax
c001ac66:	e8 fd b9 fe ff       	call   c0006668 <f_rename>
c001ac6b:	83 c4 10             	add    esp,0x10
c001ac6e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001ac75:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001ac7c:	85 c0                	test   eax,eax
c001ac7e:	75 07                	jne    c001ac87 <FAT::rename(char const*, char const*)+0xb7>
c001ac80:	b8 00 00 00 00       	mov    eax,0x0
c001ac85:	eb 05                	jmp    c001ac8c <FAT::rename(char const*, char const*)+0xbc>
c001ac87:	b8 01 00 00 00       	mov    eax,0x1
c001ac8c:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ac92:	c3                   	ret    
c001ac93:	90                   	nop

c001ac94 <FAT::mkdir(char const*)>:
c001ac94:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ac9a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001aca2:	75 07                	jne    c001acab <FAT::mkdir(char const*)+0x17>
c001aca4:	b8 04 00 00 00       	mov    eax,0x4
c001aca9:	eb 5c                	jmp    c001ad07 <FAT::mkdir(char const*)+0x73>
c001acab:	83 ec 08             	sub    esp,0x8
c001acae:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001acb5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001acb9:	50                   	push   eax
c001acba:	e8 9a 5a fe ff       	call   c0000759 <strcpy>
c001acbf:	83 c4 10             	add    esp,0x10
c001acc2:	83 ec 08             	sub    esp,0x8
c001acc5:	8d 44 24 14          	lea    eax,[esp+0x14]
c001acc9:	50                   	push   eax
c001acca:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001acd1:	e8 3c fa ff ff       	call   c001a712 <FAT::fixFilepath(char*)>
c001acd6:	83 c4 10             	add    esp,0x10
c001acd9:	83 ec 0c             	sub    esp,0xc
c001acdc:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ace0:	50                   	push   eax
c001ace1:	e8 56 b7 fe ff       	call   c000643c <f_mkdir>
c001ace6:	83 c4 10             	add    esp,0x10
c001ace9:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001acf0:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001acf7:	85 c0                	test   eax,eax
c001acf9:	75 07                	jne    c001ad02 <FAT::mkdir(char const*)+0x6e>
c001acfb:	b8 00 00 00 00       	mov    eax,0x0
c001ad00:	eb 05                	jmp    c001ad07 <FAT::mkdir(char const*)+0x73>
c001ad02:	b8 01 00 00 00       	mov    eax,0x1
c001ad07:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ad0d:	c3                   	ret    

c001ad0e <FAT::exists(char const*)>:
c001ad0e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ad14:	83 ec 08             	sub    esp,0x8
c001ad17:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ad1e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ad22:	50                   	push   eax
c001ad23:	e8 31 5a fe ff       	call   c0000759 <strcpy>
c001ad28:	83 c4 10             	add    esp,0x10
c001ad2b:	83 ec 08             	sub    esp,0x8
c001ad2e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ad32:	50                   	push   eax
c001ad33:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ad3a:	e8 d3 f9 ff ff       	call   c001a712 <FAT::fixFilepath(char*)>
c001ad3f:	83 c4 10             	add    esp,0x10
c001ad42:	83 ec 08             	sub    esp,0x8
c001ad45:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001ad4c:	50                   	push   eax
c001ad4d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ad51:	50                   	push   eax
c001ad52:	e8 10 b2 fe ff       	call   c0005f67 <f_stat>
c001ad57:	83 c4 10             	add    esp,0x10
c001ad5a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ad61:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ad68:	85 c0                	test   eax,eax
c001ad6a:	75 04                	jne    c001ad70 <FAT::exists(char const*)+0x62>
c001ad6c:	b0 01                	mov    al,0x1
c001ad6e:	eb 02                	jmp    c001ad72 <FAT::exists(char const*)+0x64>
c001ad70:	b0 00                	mov    al,0x0
c001ad72:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ad78:	c3                   	ret    
c001ad79:	90                   	nop

c001ad7a <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001ad7a:	b8 08 00 00 00       	mov    eax,0x8
c001ad7f:	c3                   	ret    

c001ad80 <ISO9660::seek(void*, unsigned long long)>:
c001ad80:	53                   	push   ebx
c001ad81:	b8 04 00 00 00       	mov    eax,0x4
c001ad86:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad8a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ad8e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad92:	85 d2                	test   edx,edx
c001ad94:	74 17                	je     c001adad <ISO9660::seek(void*, unsigned long long)+0x2d>
c001ad96:	89 c8                	mov    eax,ecx
c001ad98:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001ad9b:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001ad9e:	b8 01 00 00 00       	mov    eax,0x1
c001ada3:	73 08                	jae    c001adad <ISO9660::seek(void*, unsigned long long)+0x2d>
c001ada5:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001ada8:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001adab:	31 c0                	xor    eax,eax
c001adad:	5b                   	pop    ebx
c001adae:	c3                   	ret    
c001adaf:	90                   	nop

c001adb0 <ISO9660::tell(void*, unsigned long long*)>:
c001adb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001adb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adb8:	85 d2                	test   edx,edx
c001adba:	74 12                	je     c001adce <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001adbc:	85 c0                	test   eax,eax
c001adbe:	74 0e                	je     c001adce <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001adc0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001adc3:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001adc6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001adc9:	89 10                	mov    DWORD PTR [eax],edx
c001adcb:	31 c0                	xor    eax,eax
c001adcd:	c3                   	ret    
c001adce:	b8 04 00 00 00       	mov    eax,0x4
c001add3:	c3                   	ret    

c001add4 <ISO9660::getName()>:
c001add4:	b8 c8 2e 02 c0       	mov    eax,0xc0022ec8
c001add9:	c3                   	ret    

c001adda <ISO9660::stat(void*, unsigned long long*)>:
c001adda:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001adde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ade2:	85 d2                	test   edx,edx
c001ade4:	74 12                	je     c001adf8 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ade6:	85 c0                	test   eax,eax
c001ade8:	74 0e                	je     c001adf8 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001adea:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001aded:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001adf0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001adf3:	89 10                	mov    DWORD PTR [eax],edx
c001adf5:	31 c0                	xor    eax,eax
c001adf7:	c3                   	ret    
c001adf8:	b8 04 00 00 00       	mov    eax,0x4
c001adfd:	c3                   	ret    

c001adfe <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001adfe:	b8 01 00 00 00       	mov    eax,0x1
c001ae03:	c3                   	ret    

c001ae04 <ISO9660::unlink(char const*)>:
c001ae04:	b8 01 00 00 00       	mov    eax,0x1
c001ae09:	c3                   	ret    

c001ae0a <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ae0a:	b8 01 00 00 00       	mov    eax,0x1
c001ae0f:	c3                   	ret    

c001ae10 <ISO9660::rename(char const*, char const*)>:
c001ae10:	b8 01 00 00 00       	mov    eax,0x1
c001ae15:	c3                   	ret    

c001ae16 <ISO9660::mkdir(char const*)>:
c001ae16:	b8 01 00 00 00       	mov    eax,0x1
c001ae1b:	c3                   	ret    

c001ae1c <ISO9660::close(void*)>:
c001ae1c:	83 ec 0c             	sub    esp,0xc
c001ae1f:	b8 04 00 00 00       	mov    eax,0x4
c001ae24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae28:	85 d2                	test   edx,edx
c001ae2a:	74 0e                	je     c001ae3a <ISO9660::close(void*)+0x1e>
c001ae2c:	83 ec 0c             	sub    esp,0xc
c001ae2f:	52                   	push   edx
c001ae30:	e8 df 11 ff ff       	call   c000c014 <free>
c001ae35:	83 c4 10             	add    esp,0x10
c001ae38:	31 c0                	xor    eax,eax
c001ae3a:	83 c4 0c             	add    esp,0xc
c001ae3d:	c3                   	ret    

c001ae3e <ISO9660::closeDir(void*)>:
c001ae3e:	83 ec 0c             	sub    esp,0xc
c001ae41:	b8 04 00 00 00       	mov    eax,0x4
c001ae46:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae4a:	85 d2                	test   edx,edx
c001ae4c:	74 0e                	je     c001ae5c <ISO9660::closeDir(void*)+0x1e>
c001ae4e:	83 ec 0c             	sub    esp,0xc
c001ae51:	52                   	push   edx
c001ae52:	e8 bd 11 ff ff       	call   c000c014 <free>
c001ae57:	83 c4 10             	add    esp,0x10
c001ae5a:	31 c0                	xor    eax,eax
c001ae5c:	83 c4 0c             	add    esp,0xc
c001ae5f:	c3                   	ret    

c001ae60 <ISO9660::~ISO9660()>:
c001ae60:	83 ec 0c             	sub    esp,0xc
c001ae63:	ba 1c 2f 02 c0       	mov    edx,0xc0022f1c
c001ae68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae6c:	89 10                	mov    DWORD PTR [eax],edx
c001ae6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae72:	83 ec 0c             	sub    esp,0xc
c001ae75:	50                   	push   eax
c001ae76:	e8 a3 45 ff ff       	call   c000f41e <Filesystem::~Filesystem()>
c001ae7b:	83 c4 10             	add    esp,0x10
c001ae7e:	90                   	nop
c001ae7f:	83 c4 0c             	add    esp,0xc
c001ae82:	c3                   	ret    
c001ae83:	90                   	nop

c001ae84 <ISO9660::~ISO9660()>:
c001ae84:	83 ec 0c             	sub    esp,0xc
c001ae87:	83 ec 0c             	sub    esp,0xc
c001ae8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae8e:	e8 cd ff ff ff       	call   c001ae60 <ISO9660::~ISO9660()>
c001ae93:	83 c4 10             	add    esp,0x10
c001ae96:	83 ec 08             	sub    esp,0x8
c001ae99:	6a 08                	push   0x8
c001ae9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae9f:	e8 71 41 ff ff       	call   c000f015 <operator delete(void*, unsigned long)>
c001aea4:	83 c4 10             	add    esp,0x10
c001aea7:	83 c4 0c             	add    esp,0xc
c001aeaa:	c3                   	ret    

c001aeab <__memmem(unsigned char*, int, unsigned char*, int)>:
c001aeab:	55                   	push   ebp
c001aeac:	31 c9                	xor    ecx,ecx
c001aeae:	57                   	push   edi
c001aeaf:	56                   	push   esi
c001aeb0:	53                   	push   ebx
c001aeb1:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001aeb5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001aeb9:	89 eb                	mov    ebx,ebp
c001aebb:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001aebf:	39 ce                	cmp    esi,ecx
c001aec1:	7e 17                	jle    c001aeda <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001aec3:	31 d2                	xor    edx,edx
c001aec5:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001aec9:	7d 13                	jge    c001aede <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001aecb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001aecf:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001aed2:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001aed5:	75 0d                	jne    c001aee4 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001aed7:	42                   	inc    edx
c001aed8:	eb eb                	jmp    c001aec5 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001aeda:	31 c0                	xor    eax,eax
c001aedc:	eb 0a                	jmp    c001aee8 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001aede:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001aee2:	eb 04                	jmp    c001aee8 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001aee4:	41                   	inc    ecx
c001aee5:	43                   	inc    ebx
c001aee6:	eb d7                	jmp    c001aebf <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001aee8:	5b                   	pop    ebx
c001aee9:	5e                   	pop    esi
c001aeea:	5f                   	pop    edi
c001aeeb:	5d                   	pop    ebp
c001aeec:	c3                   	ret    

c001aeed <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001aeed:	56                   	push   esi
c001aeee:	53                   	push   ebx
c001aeef:	52                   	push   edx
c001aef0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aef4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aef8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aefc:	39 0d 60 58 02 c0    	cmp    DWORD PTR ds:0xc0025860,ecx
c001af02:	75 08                	jne    c001af0c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001af04:	38 05 08 3d 02 c0    	cmp    BYTE PTR ds:0xc0023d08,al
c001af0a:	74 2b                	je     c001af37 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001af0c:	83 ec 0c             	sub    esp,0xc
c001af0f:	a2 08 3d 02 c0       	mov    ds:0xc0023d08,al
c001af14:	68 80 58 02 c0       	push   0xc0025880
c001af19:	0f be c0             	movsx  eax,al
c001af1c:	6a 01                	push   0x1
c001af1e:	89 0d 60 58 02 c0    	mov    DWORD PTR ds:0xc0025860,ecx
c001af24:	31 db                	xor    ebx,ebx
c001af26:	53                   	push   ebx
c001af27:	51                   	push   ecx
c001af28:	ff 34 85 dc 47 02 c0 	push   DWORD PTR [eax*4-0x3ffdb824]
c001af2f:	e8 fe 77 ff ff       	call   c0012732 <LogicalDisk::read(unsigned long long, int, void*)>
c001af34:	83 c4 20             	add    esp,0x20
c001af37:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001af3f:	c7 44 24 14 80 58 02 c0 	mov    DWORD PTR [esp+0x14],0xc0025880
c001af47:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001af4b:	58                   	pop    eax
c001af4c:	5b                   	pop    ebx
c001af4d:	5e                   	pop    esi
c001af4e:	e9 31 57 fe ff       	jmp    c0000684 <memcpy>
c001af53:	90                   	nop

c001af54 <ISO9660::tryMount(LogicalDisk*, int)>:
c001af54:	81 ec 10 08 00 00    	sub    esp,0x810
c001af5a:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001af61:	83 c0 41             	add    eax,0x41
c001af64:	0f be c0             	movsx  eax,al
c001af67:	50                   	push   eax
c001af68:	8d 44 24 08          	lea    eax,[esp+0x8]
c001af6c:	50                   	push   eax
c001af6d:	6a 10                	push   0x10
c001af6f:	e8 79 ff ff ff       	call   c001aeed <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001af74:	83 c4 10             	add    esp,0x10
c001af77:	31 c0                	xor    eax,eax
c001af79:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001af7e:	75 1d                	jne    c001af9d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001af80:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001af85:	75 16                	jne    c001af9d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001af87:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001af8c:	75 0f                	jne    c001af9d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001af8e:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001af93:	75 08                	jne    c001af9d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001af95:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001af9a:	0f 94 c0             	sete   al
c001af9d:	81 c4 0c 08 00 00    	add    esp,0x80c
c001afa3:	c3                   	ret    

c001afa4 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001afa4:	55                   	push   ebp
c001afa5:	57                   	push   edi
c001afa6:	56                   	push   esi
c001afa7:	53                   	push   ebx
c001afa8:	81 ec 34 08 00 00    	sub    esp,0x834
c001afae:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001afb5:	55                   	push   ebp
c001afb6:	68 e3 2e 02 c0       	push   0xc0022ee3
c001afbb:	e8 35 41 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001afc0:	83 c4 10             	add    esp,0x10
c001afc3:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001afcb:	0f 84 06 02 00 00    	je     c001b1d7 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001afd1:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001afd9:	0f 84 f8 01 00 00    	je     c001b1d7 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001afdf:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001afe6:	b8 01 00 00 00       	mov    eax,0x1
c001afeb:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001afef:	0f 85 e7 01 00 00    	jne    c001b1dc <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001aff5:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001aff8:	31 d2                	xor    edx,edx
c001affa:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001affd:	89 e9                	mov    ecx,ebp
c001afff:	89 d3                	mov    ebx,edx
c001b001:	01 f1                	add    ecx,esi
c001b003:	11 fb                	adc    ebx,edi
c001b005:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b009:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b00d:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001b014:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001b017:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001b01a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b01e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b022:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b026:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b02a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b02e:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001b032:	72 19                	jb     c001b04d <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001b034:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b03c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b040:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b043:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b047:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b04b:	eb 13                	jmp    c001b060 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001b04d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b051:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b055:	29 f0                	sub    eax,esi
c001b057:	19 fa                	sbb    edx,edi
c001b059:	89 04 24             	mov    DWORD PTR [esp],eax
c001b05c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b060:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001b067:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b06a:	8b 00                	mov    eax,DWORD PTR [eax]
c001b06c:	53                   	push   ebx
c001b06d:	0f a4 c2 0b          	shld   edx,eax,0xb
c001b071:	c1 e0 0b             	shl    eax,0xb
c001b074:	01 c6                	add    esi,eax
c001b076:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b07d:	11 d7                	adc    edi,edx
c001b07f:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b083:	89 fa                	mov    edx,edi
c001b085:	50                   	push   eax
c001b086:	8d 44 24 28          	lea    eax,[esp+0x28]
c001b08a:	50                   	push   eax
c001b08b:	89 f0                	mov    eax,esi
c001b08d:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b091:	50                   	push   eax
c001b092:	e8 56 fe ff ff       	call   c001aeed <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b097:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b09e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b0a2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b0a5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b0a9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001b0af:	83 c4 10             	add    esp,0x10
c001b0b2:	b8 00 08 00 00       	mov    eax,0x800
c001b0b7:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001b0bb:	29 d0                	sub    eax,edx
c001b0bd:	39 c1                	cmp    ecx,eax
c001b0bf:	83 db 00             	sbb    ebx,0x0
c001b0c2:	7d 19                	jge    c001b0dd <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001b0c4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b0c9:	75 16                	jne    c001b0e1 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001b0cb:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b0d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b0d8:	e9 f6 00 00 00       	jmp    c001b1d3 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001b0dd:	89 c5                	mov    ebp,eax
c001b0df:	eb 03                	jmp    c001b0e4 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001b0e1:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001b0e4:	51                   	push   ecx
c001b0e5:	55                   	push   ebp
c001b0e6:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001b0ea:	50                   	push   eax
c001b0eb:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001b0f2:	e8 8d 55 fe ff       	call   c0000684 <memcpy>
c001b0f7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b0fb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b0ff:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001b106:	01 e8                	add    eax,ebp
c001b108:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b10c:	89 e8                	mov    eax,ebp
c001b10e:	99                   	cdq    
c001b10f:	01 ee                	add    esi,ebp
c001b111:	11 d7                	adc    edi,edx
c001b113:	29 e9                	sub    ecx,ebp
c001b115:	19 d3                	sbb    ebx,edx
c001b117:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b11b:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b11f:	83 c4 10             	add    esp,0x10
c001b122:	b8 ff 07 00 00       	mov    eax,0x7ff
c001b127:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001b12a:	b8 00 00 00 00       	mov    eax,0x0
c001b12f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b133:	7d 3f                	jge    c001b174 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001b135:	52                   	push   edx
c001b136:	89 fa                	mov    edx,edi
c001b138:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b13f:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b143:	50                   	push   eax
c001b144:	89 f0                	mov    eax,esi
c001b146:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b14a:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b14e:	50                   	push   eax
c001b14f:	e8 99 fd ff ff       	call   c001aeed <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b154:	81 c6 00 08 00 00    	add    esi,0x800
c001b15a:	83 d7 00             	adc    edi,0x0
c001b15d:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001b165:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001b16d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001b172:	eb ab                	jmp    c001b11f <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001b174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b178:	0b 04 24             	or     eax,DWORD PTR [esp]
c001b17b:	74 34                	je     c001b1b1 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001b17d:	89 fa                	mov    edx,edi
c001b17f:	50                   	push   eax
c001b180:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b187:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b18b:	50                   	push   eax
c001b18c:	89 f0                	mov    eax,esi
c001b18e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001b192:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b196:	55                   	push   ebp
c001b197:	50                   	push   eax
c001b198:	e8 50 fd ff ff       	call   c001aeed <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b19d:	83 c4 0c             	add    esp,0xc
c001b1a0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001b1a4:	55                   	push   ebp
c001b1a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1a9:	e8 d6 54 fe ff       	call   c0000684 <memcpy>
c001b1ae:	83 c4 10             	add    esp,0x10
c001b1b1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b1b8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b1bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b1c0:	89 38                	mov    DWORD PTR [eax],edi
c001b1c2:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b1c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1cd:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001b1d0:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001b1d3:	31 c0                	xor    eax,eax
c001b1d5:	eb 05                	jmp    c001b1dc <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b1d7:	b8 04 00 00 00       	mov    eax,0x4
c001b1dc:	81 c4 2c 08 00 00    	add    esp,0x82c
c001b1e2:	5b                   	pop    ebx
c001b1e3:	5e                   	pop    esi
c001b1e4:	5f                   	pop    edi
c001b1e5:	5d                   	pop    ebp
c001b1e6:	c3                   	ret    
c001b1e7:	90                   	nop

c001b1e8 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b1e8:	55                   	push   ebp
c001b1e9:	57                   	push   edi
c001b1ea:	56                   	push   esi
c001b1eb:	53                   	push   ebx
c001b1ec:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001b1f2:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001b1f9:	85 f6                	test   esi,esi
c001b1fb:	0f 84 64 02 00 00    	je     c001b465 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001b201:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001b209:	0f 84 56 02 00 00    	je     c001b465 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001b20f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001b212:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001b215:	75 0a                	jne    c001b221 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001b217:	b8 07 00 00 00       	mov    eax,0x7
c001b21c:	e9 49 02 00 00       	jmp    c001b46a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001b221:	50                   	push   eax
c001b222:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b226:	50                   	push   eax
c001b227:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b22e:	53                   	push   ebx
c001b22f:	8b 06                	mov    eax,DWORD PTR [esi]
c001b231:	c1 e0 0b             	shl    eax,0xb
c001b234:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001b237:	c1 e8 0b             	shr    eax,0xb
c001b23a:	50                   	push   eax
c001b23b:	e8 ad fc ff ff       	call   c001aeed <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b240:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b243:	83 c4 10             	add    esp,0x10
c001b246:	89 c1                	mov    ecx,eax
c001b248:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001b24b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001b251:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001b254:	84 db                	test   bl,bl
c001b256:	0f 85 90 00 00 00    	jne    c001b2ec <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001b25c:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001b262:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b268:	29 c7                	sub    edi,eax
c001b26a:	89 fb                	mov    ebx,edi
c001b26c:	c1 fb 1f             	sar    ebx,0x1f
c001b26f:	01 f8                	add    eax,edi
c001b271:	11 da                	adc    edx,ebx
c001b273:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b277:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b27b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001b27e:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001b281:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b284:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b287:	89 04 24             	mov    DWORD PTR [esp],eax
c001b28a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b28e:	89 d8                	mov    eax,ebx
c001b290:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b293:	ba 00 00 00 00       	mov    edx,0x0
c001b298:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b29c:	b8 00 00 00 00       	mov    eax,0x0
c001b2a1:	73 0b                	jae    c001b2ae <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001b2a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b2aa:	29 f8                	sub    eax,edi
c001b2ac:	19 da                	sbb    edx,ebx
c001b2ae:	89 d3                	mov    ebx,edx
c001b2b0:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b2b3:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b2b6:	09 c3                	or     ebx,eax
c001b2b8:	0f 84 59 ff ff ff    	je     c001b217 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001b2be:	55                   	push   ebp
c001b2bf:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b2c3:	50                   	push   eax
c001b2c4:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b2cb:	53                   	push   ebx
c001b2cc:	8b 06                	mov    eax,DWORD PTR [esi]
c001b2ce:	c1 e0 0b             	shl    eax,0xb
c001b2d1:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b2d5:	c1 e8 0b             	shr    eax,0xb
c001b2d8:	50                   	push   eax
c001b2d9:	e8 0f fc ff ff       	call   c001aeed <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b2de:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b2e1:	83 c4 10             	add    esp,0x10
c001b2e4:	25 ff 07 00 00       	and    eax,0x7ff
c001b2e9:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001b2ec:	57                   	push   edi
c001b2ed:	6a 28                	push   0x28
c001b2ef:	6a 00                	push   0x0
c001b2f1:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b2f5:	50                   	push   eax
c001b2f6:	e8 bf 53 fe ff       	call   c00006ba <memset>
c001b2fb:	31 d2                	xor    edx,edx
c001b2fd:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001b300:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b306:	89 f8                	mov    eax,edi
c001b308:	83 c0 21             	add    eax,0x21
c001b30b:	83 d2 00             	adc    edx,0x0
c001b30e:	89 c7                	mov    edi,eax
c001b310:	89 d5                	mov    ebp,edx
c001b312:	83 c4 10             	add    esp,0x10
c001b315:	31 c9                	xor    ecx,ecx
c001b317:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001b31e:	83 f9 28             	cmp    ecx,0x28
c001b321:	88 04 24             	mov    BYTE PTR [esp],al
c001b324:	0f 94 c2             	sete   dl
c001b327:	88 d0                	mov    al,dl
c001b329:	ba ff 07 00 00       	mov    edx,0x7ff
c001b32e:	39 fa                	cmp    edx,edi
c001b330:	ba 00 00 00 00       	mov    edx,0x0
c001b335:	19 ea                	sbb    edx,ebp
c001b337:	0f 92 c2             	setb   dl
c001b33a:	09 c2                	or     edx,eax
c001b33c:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001b340:	0f 94 c0             	sete   al
c001b343:	08 d0                	or     al,dl
c001b345:	75 16                	jne    c001b35d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b347:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001b34b:	74 10                	je     c001b35d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b34d:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b350:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001b354:	41                   	inc    ecx
c001b355:	83 c7 01             	add    edi,0x1
c001b358:	83 d5 00             	adc    ebp,0x0
c001b35b:	eb ba                	jmp    c001b317 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001b35d:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001b364:	83 ec 0c             	sub    esp,0xc
c001b367:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b36b:	57                   	push   edi
c001b36c:	e8 66 53 fe ff       	call   c00006d7 <strlen>
c001b371:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001b379:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b37d:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001b384:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b387:	5a                   	pop    edx
c001b388:	25 ff 07 00 00       	and    eax,0x7ff
c001b38d:	01 c8                	add    eax,ecx
c001b38f:	59                   	pop    ecx
c001b390:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001b396:	83 e0 02             	and    eax,0x2
c001b399:	3c 01                	cmp    al,0x1
c001b39b:	19 c0                	sbb    eax,eax
c001b39d:	83 c0 02             	add    eax,0x2
c001b3a0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b3a4:	57                   	push   edi
c001b3a5:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b3a9:	50                   	push   eax
c001b3aa:	e8 aa 53 fe ff       	call   c0000759 <strcpy>
c001b3af:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001b3b3:	83 c4 10             	add    esp,0x10
c001b3b6:	84 c0                	test   al,al
c001b3b8:	75 21                	jne    c001b3db <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001b3ba:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001b3c2:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b3ca:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b3d2:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001b3d9:	eb 28                	jmp    c001b403 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001b3db:	fe c8                	dec    al
c001b3dd:	75 24                	jne    c001b403 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001b3df:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001b3e7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b3ef:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b3f7:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001b3fe:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001b403:	0f b6 fb             	movzx  edi,bl
c001b406:	31 db                	xor    ebx,ebx
c001b408:	50                   	push   eax
c001b409:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001b410:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b414:	50                   	push   eax
c001b415:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001b41c:	e8 63 52 fe ff       	call   c0000684 <memcpy>
c001b421:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001b428:	89 f9                	mov    ecx,edi
c001b42a:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b430:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001b433:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b436:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001b439:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b43c:	83 c4 10             	add    esp,0x10
c001b43f:	39 c7                	cmp    edi,eax
c001b441:	89 df                	mov    edi,ebx
c001b443:	19 d7                	sbb    edi,edx
c001b445:	72 10                	jb     c001b457 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001b447:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001b44e:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001b455:	eb 0a                	jmp    c001b461 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001b457:	29 c8                	sub    eax,ecx
c001b459:	19 da                	sbb    edx,ebx
c001b45b:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b45e:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b461:	31 c0                	xor    eax,eax
c001b463:	eb 05                	jmp    c001b46a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001b465:	b8 04 00 00 00       	mov    eax,0x4
c001b46a:	81 c4 5c 09 00 00    	add    esp,0x95c
c001b470:	5b                   	pop    ebx
c001b471:	5e                   	pop    esi
c001b472:	5f                   	pop    edi
c001b473:	5d                   	pop    ebp
c001b474:	c3                   	ret    

c001b475 <readRoot(unsigned int*, unsigned int*, char)>:
c001b475:	81 ec 40 08 00 00    	sub    esp,0x840
c001b47b:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001b483:	50                   	push   eax
c001b484:	8d 44 24 38          	lea    eax,[esp+0x38]
c001b488:	50                   	push   eax
c001b489:	6a 10                	push   0x10
c001b48b:	e8 5d fa ff ff       	call   c001aeed <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b490:	83 c4 0c             	add    esp,0xc
c001b493:	6a 22                	push   0x22
c001b495:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001b49c:	50                   	push   eax
c001b49d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001b4a1:	50                   	push   eax
c001b4a2:	e8 dd 51 fe ff       	call   c0000684 <memcpy>
c001b4a7:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b4ae:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b4b2:	89 10                	mov    DWORD PTR [eax],edx
c001b4b4:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b4bb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b4bf:	89 10                	mov    DWORD PTR [eax],edx
c001b4c1:	b0 01                	mov    al,0x1
c001b4c3:	81 c4 4c 08 00 00    	add    esp,0x84c
c001b4c9:	c3                   	ret    

c001b4ca <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001b4ca:	55                   	push   ebp
c001b4cb:	57                   	push   edi
c001b4cc:	56                   	push   esi
c001b4cd:	53                   	push   ebx
c001b4ce:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b4d4:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b4db:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001b4e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b4e6:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001b4ea:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b4ee:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b4f2:	75 03                	jne    c001b4f7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b4f4:	83 c3 02             	add    ebx,0x2
c001b4f7:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001b4fa:	75 03                	jne    c001b4ff <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001b4fc:	43                   	inc    ebx
c001b4fd:	eb f8                	jmp    c001b4f7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b4ff:	51                   	push   ecx
c001b500:	68 00 01 00 00       	push   0x100
c001b505:	6a 00                	push   0x0
c001b507:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b50b:	50                   	push   eax
c001b50c:	e8 a9 51 fe ff       	call   c00006ba <memset>
c001b511:	83 c4 10             	add    esp,0x10
c001b514:	31 d2                	xor    edx,edx
c001b516:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b519:	84 c0                	test   al,al
c001b51b:	74 21                	je     c001b53e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001b51d:	3c 2f                	cmp    al,0x2f
c001b51f:	75 0b                	jne    c001b52c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001b521:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001b525:	bd 01 00 00 00       	mov    ebp,0x1
c001b52a:	eb 14                	jmp    c001b540 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001b52c:	8d 48 9f             	lea    ecx,[eax-0x61]
c001b52f:	80 f9 19             	cmp    cl,0x19
c001b532:	77 03                	ja     c001b537 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b534:	83 e8 20             	sub    eax,0x20
c001b537:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001b53b:	42                   	inc    edx
c001b53c:	eb d8                	jmp    c001b516 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001b53e:	31 ed                	xor    ebp,ebp
c001b540:	83 ec 0c             	sub    esp,0xc
c001b543:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001b54a:	e8 b5 0a ff ff       	call   c000c004 <malloc>
c001b54f:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b556:	89 c6                	mov    esi,eax
c001b558:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001b55e:	c1 ef 0b             	shr    edi,0xb
c001b561:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001b568:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001b56c:	83 c4 10             	add    esp,0x10
c001b56f:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001b574:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b578:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001b57f:	74 28                	je     c001b5a9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001b581:	52                   	push   edx
c001b582:	57                   	push   edi
c001b583:	50                   	push   eax
c001b584:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b588:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b58f:	e8 59 f9 ff ff       	call   c001aeed <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b594:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b598:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001b59f:	05 00 08 00 00       	add    eax,0x800
c001b5a4:	83 c4 10             	add    esp,0x10
c001b5a7:	eb cb                	jmp    c001b574 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001b5a9:	83 ec 0c             	sub    esp,0xc
c001b5ac:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b5b0:	57                   	push   edi
c001b5b1:	e8 21 51 fe ff       	call   c00006d7 <strlen>
c001b5b6:	50                   	push   eax
c001b5b7:	57                   	push   edi
c001b5b8:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001b5bf:	56                   	push   esi
c001b5c0:	e8 e6 f8 ff ff       	call   c001aeab <__memmem(unsigned char*, int, unsigned char*, int)>
c001b5c5:	83 c4 20             	add    esp,0x20
c001b5c8:	85 c0                	test   eax,eax
c001b5ca:	75 13                	jne    c001b5df <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001b5cc:	83 ec 0c             	sub    esp,0xc
c001b5cf:	56                   	push   esi
c001b5d0:	e8 3f 0a ff ff       	call   c000c014 <free>
c001b5d5:	83 c4 10             	add    esp,0x10
c001b5d8:	31 c0                	xor    eax,eax
c001b5da:	e9 b3 00 00 00       	jmp    c001b692 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b5df:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001b5e3:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001b5e7:	c1 e7 08             	shl    edi,0x8
c001b5ea:	c1 e2 10             	shl    edx,0x10
c001b5ed:	09 d7                	or     edi,edx
c001b5ef:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001b5f3:	09 d7                	or     edi,edx
c001b5f5:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001b5f9:	c1 e2 18             	shl    edx,0x18
c001b5fc:	09 d7                	or     edi,edx
c001b5fe:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001b602:	89 d1                	mov    ecx,edx
c001b604:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001b608:	c1 e1 08             	shl    ecx,0x8
c001b60b:	c1 e2 10             	shl    edx,0x10
c001b60e:	09 ca                	or     edx,ecx
c001b610:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001b614:	09 ca                	or     edx,ecx
c001b616:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001b61a:	c1 e1 18             	shl    ecx,0x18
c001b61d:	09 ca                	or     edx,ecx
c001b61f:	89 e9                	mov    ecx,ebp
c001b621:	84 c9                	test   cl,cl
c001b623:	74 3c                	je     c001b661 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001b625:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b629:	83 ec 0c             	sub    esp,0xc
c001b62c:	56                   	push   esi
c001b62d:	e8 e2 09 ff ff       	call   c000c014 <free>
c001b632:	83 c4 0c             	add    esp,0xc
c001b635:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b63c:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001b641:	50                   	push   eax
c001b642:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b649:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b650:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b654:	52                   	push   edx
c001b655:	57                   	push   edi
c001b656:	53                   	push   ebx
c001b657:	e8 6e fe ff ff       	call   c001b4ca <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b65c:	83 c4 20             	add    esp,0x20
c001b65f:	eb 31                	jmp    c001b692 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b661:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001b664:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001b66b:	d0 e8                	shr    al,1
c001b66d:	89 3b                	mov    DWORD PTR [ebx],edi
c001b66f:	83 e0 01             	and    eax,0x1
c001b672:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b679:	83 ec 0c             	sub    esp,0xc
c001b67c:	89 13                	mov    DWORD PTR [ebx],edx
c001b67e:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001b685:	89 03                	mov    DWORD PTR [ebx],eax
c001b687:	56                   	push   esi
c001b688:	e8 87 09 ff ff       	call   c000c014 <free>
c001b68d:	83 c4 10             	add    esp,0x10
c001b690:	b0 01                	mov    al,0x1
c001b692:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b698:	5b                   	pop    ebx
c001b699:	5e                   	pop    esi
c001b69a:	5f                   	pop    edi
c001b69b:	5d                   	pop    ebp
c001b69c:	c3                   	ret    

c001b69d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001b69d:	55                   	push   ebp
c001b69e:	57                   	push   edi
c001b69f:	56                   	push   esi
c001b6a0:	53                   	push   ebx
c001b6a1:	83 ec 20             	sub    esp,0x20
c001b6a4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b6a8:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001b6ac:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b6b0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b6b8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b6c0:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001b6c5:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001b6cb:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001b6d1:	57                   	push   edi
c001b6d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b6d6:	50                   	push   eax
c001b6d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b6db:	50                   	push   eax
c001b6dc:	e8 94 fd ff ff       	call   c001b475 <readRoot(unsigned int*, unsigned int*, char)>
c001b6e1:	5a                   	pop    edx
c001b6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b6e6:	e8 ec 4f fe ff       	call   c00006d7 <strlen>
c001b6eb:	83 c4 10             	add    esp,0x10
c001b6ee:	83 f8 03             	cmp    eax,0x3
c001b6f1:	77 17                	ja     c001b70a <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b6f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6f7:	89 03                	mov    DWORD PTR [ebx],eax
c001b6f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6fd:	89 06                	mov    DWORD PTR [esi],eax
c001b6ff:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001b706:	b0 01                	mov    al,0x1
c001b708:	eb 19                	jmp    c001b723 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001b70a:	50                   	push   eax
c001b70b:	55                   	push   ebp
c001b70c:	57                   	push   edi
c001b70d:	56                   	push   esi
c001b70e:	53                   	push   ebx
c001b70f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b713:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b717:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b71b:	e8 aa fd ff ff       	call   c001b4ca <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b720:	83 c4 20             	add    esp,0x20
c001b723:	83 c4 1c             	add    esp,0x1c
c001b726:	5b                   	pop    ebx
c001b727:	5e                   	pop    esi
c001b728:	5f                   	pop    edi
c001b729:	5d                   	pop    ebp
c001b72a:	c3                   	ret    
c001b72b:	90                   	nop

c001b72c <ISO9660::open(char const*, void**, FileOpenMode)>:
c001b72c:	57                   	push   edi
c001b72d:	56                   	push   esi
c001b72e:	53                   	push   ebx
c001b72f:	83 ec 10             	sub    esp,0x10
c001b732:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b736:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b73a:	85 ff                	test   edi,edi
c001b73c:	74 7b                	je     c001b7b9 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b73e:	85 f6                	test   esi,esi
c001b740:	74 77                	je     c001b7b9 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b742:	83 ec 0c             	sub    esp,0xc
c001b745:	6a 1c                	push   0x1c
c001b747:	e8 b8 08 ff ff       	call   c000c004 <malloc>
c001b74c:	89 07                	mov    DWORD PTR [edi],eax
c001b74e:	89 c3                	mov    ebx,eax
c001b750:	58                   	pop    eax
c001b751:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b755:	50                   	push   eax
c001b756:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001b759:	50                   	push   eax
c001b75a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b75e:	50                   	push   eax
c001b75f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b763:	50                   	push   eax
c001b764:	56                   	push   esi
c001b765:	e8 33 ff ff ff       	call   c001b69d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b76a:	83 c4 20             	add    esp,0x20
c001b76d:	84 c0                	test   al,al
c001b76f:	74 07                	je     c001b778 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001b771:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b776:	74 0b                	je     c001b783 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001b778:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001b77c:	b8 01 00 00 00       	mov    eax,0x1
c001b781:	eb 3b                	jmp    c001b7be <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001b783:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b787:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001b78b:	89 03                	mov    DWORD PTR [ebx],eax
c001b78d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001b794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b798:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001b79f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b7a6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b7a9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b7b0:	8a 06                	mov    al,BYTE PTR [esi]
c001b7b2:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001b7b5:	31 c0                	xor    eax,eax
c001b7b7:	eb 05                	jmp    c001b7be <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001b7b9:	b8 04 00 00 00       	mov    eax,0x4
c001b7be:	83 c4 10             	add    esp,0x10
c001b7c1:	5b                   	pop    ebx
c001b7c2:	5e                   	pop    esi
c001b7c3:	5f                   	pop    edi
c001b7c4:	c3                   	ret    
c001b7c5:	90                   	nop

c001b7c6 <ISO9660::exists(char const*)>:
c001b7c6:	83 ec 28             	sub    esp,0x28
c001b7c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b7cd:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b7d1:	52                   	push   edx
c001b7d2:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001b7d5:	52                   	push   edx
c001b7d6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b7da:	52                   	push   edx
c001b7db:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b7df:	52                   	push   edx
c001b7e0:	50                   	push   eax
c001b7e1:	e8 b7 fe ff ff       	call   c001b69d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b7e6:	83 c4 3c             	add    esp,0x3c
c001b7e9:	c3                   	ret    

c001b7ea <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001b7ea:	56                   	push   esi
c001b7eb:	53                   	push   ebx
c001b7ec:	83 ec 14             	sub    esp,0x14
c001b7ef:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b7f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b7f7:	85 db                	test   ebx,ebx
c001b7f9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b7fd:	0f 94 c2             	sete   dl
c001b800:	85 f6                	test   esi,esi
c001b802:	0f 94 c0             	sete   al
c001b805:	08 c2                	or     dl,al
c001b807:	75 68                	jne    c001b871 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b809:	85 c9                	test   ecx,ecx
c001b80b:	74 64                	je     c001b871 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b80d:	83 ec 0c             	sub    esp,0xc
c001b810:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b813:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b817:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b81d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b824:	50                   	push   eax
c001b825:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001b828:	50                   	push   eax
c001b829:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b82d:	50                   	push   eax
c001b82e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b832:	50                   	push   eax
c001b833:	51                   	push   ecx
c001b834:	e8 64 fe ff ff       	call   c001b69d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b839:	83 c4 20             	add    esp,0x20
c001b83c:	ba 01 00 00 00       	mov    edx,0x1
c001b841:	84 c0                	test   al,al
c001b843:	74 31                	je     c001b876 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b845:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b849:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b850:	89 03                	mov    DWORD PTR [ebx],eax
c001b852:	ba 00 00 00 00       	mov    edx,0x0
c001b857:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b85b:	85 c0                	test   eax,eax
c001b85d:	0f 95 06             	setne  BYTE PTR [esi]
c001b860:	74 14                	je     c001b876 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b862:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b868:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b86f:	eb 05                	jmp    c001b876 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b871:	ba 04 00 00 00       	mov    edx,0x4
c001b876:	83 c4 14             	add    esp,0x14
c001b879:	89 d0                	mov    eax,edx
c001b87b:	5b                   	pop    ebx
c001b87c:	5e                   	pop    esi
c001b87d:	c3                   	ret    

c001b87e <ISO9660::openDir(char const*, void**)>:
c001b87e:	57                   	push   edi
c001b87f:	56                   	push   esi
c001b880:	53                   	push   ebx
c001b881:	83 ec 10             	sub    esp,0x10
c001b884:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b888:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b88c:	85 ff                	test   edi,edi
c001b88e:	0f 84 95 00 00 00    	je     c001b929 <ISO9660::openDir(char const*, void**)+0xab>
c001b894:	85 f6                	test   esi,esi
c001b896:	0f 84 8d 00 00 00    	je     c001b929 <ISO9660::openDir(char const*, void**)+0xab>
c001b89c:	83 ec 0c             	sub    esp,0xc
c001b89f:	6a 1c                	push   0x1c
c001b8a1:	e8 5e 07 ff ff       	call   c000c004 <malloc>
c001b8a6:	89 07                	mov    DWORD PTR [edi],eax
c001b8a8:	89 c3                	mov    ebx,eax
c001b8aa:	59                   	pop    ecx
c001b8ab:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b8af:	50                   	push   eax
c001b8b0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001b8b3:	50                   	push   eax
c001b8b4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b8b8:	50                   	push   eax
c001b8b9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b8bd:	50                   	push   eax
c001b8be:	56                   	push   esi
c001b8bf:	e8 d9 fd ff ff       	call   c001b69d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b8c4:	83 c4 20             	add    esp,0x20
c001b8c7:	84 c0                	test   al,al
c001b8c9:	74 07                	je     c001b8d2 <ISO9660::openDir(char const*, void**)+0x54>
c001b8cb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b8d0:	75 21                	jne    c001b8f3 <ISO9660::openDir(char const*, void**)+0x75>
c001b8d2:	0f b6 c0             	movzx  eax,al
c001b8d5:	52                   	push   edx
c001b8d6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b8da:	50                   	push   eax
c001b8db:	68 f6 2e 02 c0       	push   0xc0022ef6
c001b8e0:	e8 10 38 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001b8e5:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001b8e9:	83 c4 10             	add    esp,0x10
c001b8ec:	b8 01 00 00 00       	mov    eax,0x1
c001b8f1:	eb 3b                	jmp    c001b92e <ISO9660::openDir(char const*, void**)+0xb0>
c001b8f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8f7:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001b8fb:	89 03                	mov    DWORD PTR [ebx],eax
c001b8fd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001b904:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b908:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001b90f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b916:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b919:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b920:	8a 06                	mov    al,BYTE PTR [esi]
c001b922:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001b925:	31 c0                	xor    eax,eax
c001b927:	eb 05                	jmp    c001b92e <ISO9660::openDir(char const*, void**)+0xb0>
c001b929:	b8 04 00 00 00       	mov    eax,0x4
c001b92e:	83 c4 10             	add    esp,0x10
c001b931:	5b                   	pop    ebx
c001b932:	5e                   	pop    esi
c001b933:	5f                   	pop    edi
c001b934:	c3                   	ret    
c001b935:	90                   	nop

c001b936 <ISO9660::ISO9660()>:
c001b936:	83 ec 0c             	sub    esp,0xc
c001b939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b93d:	83 ec 0c             	sub    esp,0xc
c001b940:	50                   	push   eax
c001b941:	e8 b4 3a ff ff       	call   c000f3fa <Filesystem::Filesystem()>
c001b946:	83 c4 10             	add    esp,0x10
c001b949:	ba 1c 2f 02 c0       	mov    edx,0xc0022f1c
c001b94e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b952:	89 10                	mov    DWORD PTR [eax],edx
c001b954:	90                   	nop
c001b955:	83 c4 0c             	add    esp,0xc
c001b958:	c3                   	ret    
c001b959:	90                   	nop

c001b95a <SoundChannel::~SoundChannel()>:
c001b95a:	83 ec 0c             	sub    esp,0xc
c001b95d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b961:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b964:	83 ec 0c             	sub    esp,0xc
c001b967:	50                   	push   eax
c001b968:	e8 a7 06 ff ff       	call   c000c014 <free>
c001b96d:	83 c4 10             	add    esp,0x10
c001b970:	90                   	nop
c001b971:	83 c4 0c             	add    esp,0xc
c001b974:	c3                   	ret    
c001b975:	90                   	nop

c001b976 <SoundChannel::setSpeed(float)>:
c001b976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b97a:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001b97e:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001b981:	c3                   	ret    

c001b982 <SoundChannel::getSpeed()>:
c001b982:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b986:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001b989:	c3                   	ret    

c001b98a <SoundChannel::setVolume(int)>:
c001b98a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b98e:	83 f8 64             	cmp    eax,0x64
c001b991:	7e 05                	jle    c001b998 <SoundChannel::setVolume(int)+0xe>
c001b993:	b8 64 00 00 00       	mov    eax,0x64
c001b998:	85 c0                	test   eax,eax
c001b99a:	79 02                	jns    c001b99e <SoundChannel::setVolume(int)+0x14>
c001b99c:	31 c0                	xor    eax,eax
c001b99e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b9a2:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001b9a5:	c3                   	ret    

c001b9a6 <SoundChannel::getVolume()>:
c001b9a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9aa:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b9ad:	c3                   	ret    

c001b9ae <SoundChannel::pause()>:
c001b9ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9b2:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001b9b6:	c3                   	ret    
c001b9b7:	90                   	nop

c001b9b8 <SoundChannel::SoundChannel(int, int, int, int)>:
c001b9b8:	83 ec 1c             	sub    esp,0x1c
c001b9bb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b9bf:	e8 ea ff ff ff       	call   c001b9ae <SoundChannel::pause()>
c001b9c4:	83 c4 04             	add    esp,0x4
c001b9c7:	6a 50                	push   0x50
c001b9c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b9cd:	e8 b8 ff ff ff       	call   c001b98a <SoundChannel::setVolume(int)>
c001b9d2:	83 c4 08             	add    esp,0x8
c001b9d5:	d9 e8                	fld1   
c001b9d7:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001b9db:	d9 1c 24             	fstp   DWORD PTR [esp]
c001b9de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b9e2:	e8 8f ff ff ff       	call   c001b976 <SoundChannel::setSpeed(float)>
c001b9e7:	83 c4 08             	add    esp,0x8
c001b9ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9ee:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b9f2:	89 10                	mov    DWORD PTR [eax],edx
c001b9f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b9fc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b9ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba03:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ba07:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ba0a:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001ba0f:	75 23                	jne    c001ba34 <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001ba11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba15:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ba1e:	0f af c2             	imul   eax,edx
c001ba21:	85 c0                	test   eax,eax
c001ba23:	79 03                	jns    c001ba28 <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001ba25:	83 c0 03             	add    eax,0x3
c001ba28:	c1 f8 02             	sar    eax,0x2
c001ba2b:	05 a0 0f 00 00       	add    eax,0xfa0
c001ba30:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ba34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba38:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ba3c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001ba3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba43:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001ba4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba4e:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001ba55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba59:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ba5c:	c1 e0 02             	shl    eax,0x2
c001ba5f:	83 ec 0c             	sub    esp,0xc
c001ba62:	50                   	push   eax
c001ba63:	e8 9c 05 ff ff       	call   c000c004 <malloc>
c001ba68:	83 c4 10             	add    esp,0x10
c001ba6b:	89 c2                	mov    edx,eax
c001ba6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba71:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ba74:	83 ec 04             	sub    esp,0x4
c001ba77:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ba7b:	50                   	push   eax
c001ba7c:	6a 01                	push   0x1
c001ba7e:	6a 04                	push   0x4
c001ba80:	e8 78 ce fe ff       	call   c00088fd <src_new>
c001ba85:	83 c4 10             	add    esp,0x10
c001ba88:	89 c2                	mov    edx,eax
c001ba8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba8e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ba91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba95:	85 c0                	test   eax,eax
c001ba97:	74 10                	je     c001baa9 <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001ba99:	83 ec 0c             	sub    esp,0xc
c001ba9c:	68 78 2f 02 c0       	push   0xc0022f78
c001baa1:	e8 e4 9d ff ff       	call   c001588a <Krnl::panic(char const*)>
c001baa6:	83 c4 10             	add    esp,0x10
c001baa9:	90                   	nop
c001baaa:	83 c4 1c             	add    esp,0x1c
c001baad:	c3                   	ret    

c001baae <SoundChannel::play()>:
c001baae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bab2:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001bab6:	c3                   	ret    
c001bab7:	90                   	nop

c001bab8 <SoundChannel::paused()>:
c001bab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001babc:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001babf:	c3                   	ret    

c001bac0 <SoundChannel::getSampleRate()>:
c001bac0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bac4:	8b 00                	mov    eax,DWORD PTR [eax]
c001bac6:	c3                   	ret    
c001bac7:	90                   	nop

c001bac8 <SoundChannel::getBits()>:
c001bac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bacc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bacf:	c3                   	ret    

c001bad0 <SoundChannel::getBufferUsed()>:
c001bad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bad4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001bad7:	c3                   	ret    

c001bad8 <SoundChannel::getBufferSize()>:
c001bad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001badc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001badf:	c3                   	ret    

c001bae0 <SoundChannel::unbuffer(float*, int, int)>:
c001bae0:	53                   	push   ebx
c001bae1:	83 ec 40             	sub    esp,0x40
c001bae4:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001bae8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001baf0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001baf3:	db 03                	fild   DWORD PTR [ebx]
c001baf5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001baf9:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001bafd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bb00:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001bb03:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bb07:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001bb0b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bb0f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bb13:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bb17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb1b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bb1f:	50                   	push   eax
c001bb20:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001bb23:	e8 8f ca fe ff       	call   c00085b7 <src_process>
c001bb28:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bb2c:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001bb2f:	83 c4 0c             	add    esp,0xc
c001bb32:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bb35:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001bb38:	29 d0                	sub    eax,edx
c001bb3a:	c1 e0 02             	shl    eax,0x2
c001bb3d:	50                   	push   eax
c001bb3e:	8d 04 91             	lea    eax,[ecx+edx*4]
c001bb41:	50                   	push   eax
c001bb42:	51                   	push   ecx
c001bb43:	e8 04 4b fe ff       	call   c000064c <memmove>
c001bb48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bb4c:	83 c4 48             	add    esp,0x48
c001bb4f:	5b                   	pop    ebx
c001bb50:	c3                   	ret    
c001bb51:	90                   	nop

c001bb52 <SoundChannel::buffer8(unsigned char*, int)>:
c001bb52:	53                   	push   ebx
c001bb53:	31 c0                	xor    eax,eax
c001bb55:	83 ec 08             	sub    esp,0x8
c001bb58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bb5c:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001bb5f:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001bb62:	74 35                	je     c001bb99 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001bb64:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001bb68:	7d 2f                	jge    c001bb99 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001bb6a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bb6e:	d9 05 94 2f 02 c0    	fld    DWORD PTR ds:0xc0022f94
c001bb74:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001bb78:	40                   	inc    eax
c001bb79:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001bb7e:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001bb81:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001bb85:	8d 59 01             	lea    ebx,[ecx+0x1]
c001bb88:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001bb8b:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001bb8e:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001bb91:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bb94:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001bb97:	eb c9                	jmp    c001bb62 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001bb99:	83 c4 08             	add    esp,0x8
c001bb9c:	5b                   	pop    ebx
c001bb9d:	c3                   	ret    

c001bb9e <SoundDevice::SoundDevice(char const*)>:
c001bb9e:	83 ec 1c             	sub    esp,0x1c
c001bba1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bba5:	83 ec 08             	sub    esp,0x8
c001bba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bbac:	50                   	push   eax
c001bbad:	e8 3e 4b ff ff       	call   c00106f0 <Device::Device(char const*)>
c001bbb2:	83 c4 10             	add    esp,0x10
c001bbb5:	ba a0 2f 02 c0       	mov    edx,0xc0022fa0
c001bbba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbbe:	89 10                	mov    DWORD PTR [eax],edx
c001bbc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbc4:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001bbce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbd2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001bbdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bbe4:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bbe9:	7f 19                	jg     c001bc04 <SoundDevice::SoundDevice(char const*)+0x66>
c001bbeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bbf3:	83 c2 54             	add    edx,0x54
c001bbf6:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001bbfe:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bc02:	eb e0                	jmp    c001bbe4 <SoundDevice::SoundDevice(char const*)+0x46>
c001bc04:	90                   	nop
c001bc05:	83 c4 1c             	add    esp,0x1c
c001bc08:	c3                   	ret    
c001bc09:	90                   	nop

c001bc0a <SoundDevice::~SoundDevice()>:
c001bc0a:	53                   	push   ebx
c001bc0b:	83 ec 18             	sub    esp,0x18
c001bc0e:	ba a0 2f 02 c0       	mov    edx,0xc0022fa0
c001bc13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc17:	89 10                	mov    DWORD PTR [eax],edx
c001bc19:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bc21:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bc26:	7f 46                	jg     c001bc6e <SoundDevice::~SoundDevice()+0x64>
c001bc28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc2c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc30:	83 c2 54             	add    edx,0x54
c001bc33:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001bc37:	85 c0                	test   eax,eax
c001bc39:	74 2d                	je     c001bc68 <SoundDevice::~SoundDevice()+0x5e>
c001bc3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc43:	83 c2 54             	add    edx,0x54
c001bc46:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001bc4a:	85 db                	test   ebx,ebx
c001bc4c:	74 1a                	je     c001bc68 <SoundDevice::~SoundDevice()+0x5e>
c001bc4e:	83 ec 0c             	sub    esp,0xc
c001bc51:	53                   	push   ebx
c001bc52:	e8 03 fd ff ff       	call   c001b95a <SoundChannel::~SoundChannel()>
c001bc57:	83 c4 10             	add    esp,0x10
c001bc5a:	83 ec 08             	sub    esp,0x8
c001bc5d:	6a 2c                	push   0x2c
c001bc5f:	53                   	push   ebx
c001bc60:	e8 b0 33 ff ff       	call   c000f015 <operator delete(void*, unsigned long)>
c001bc65:	83 c4 10             	add    esp,0x10
c001bc68:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bc6c:	eb b3                	jmp    c001bc21 <SoundDevice::~SoundDevice()+0x17>
c001bc6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc72:	83 ec 0c             	sub    esp,0xc
c001bc75:	50                   	push   eax
c001bc76:	e8 27 47 ff ff       	call   c00103a2 <Device::~Device()>
c001bc7b:	83 c4 10             	add    esp,0x10
c001bc7e:	90                   	nop
c001bc7f:	83 c4 18             	add    esp,0x18
c001bc82:	5b                   	pop    ebx
c001bc83:	c3                   	ret    

c001bc84 <SoundDevice::~SoundDevice()>:
c001bc84:	83 ec 0c             	sub    esp,0xc
c001bc87:	83 ec 0c             	sub    esp,0xc
c001bc8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bc8e:	e8 77 ff ff ff       	call   c001bc0a <SoundDevice::~SoundDevice()>
c001bc93:	83 c4 10             	add    esp,0x10
c001bc96:	83 ec 08             	sub    esp,0x8
c001bc99:	68 e4 01 00 00       	push   0x1e4
c001bc9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bca2:	e8 6e 33 ff ff       	call   c000f015 <operator delete(void*, unsigned long)>
c001bca7:	83 c4 10             	add    esp,0x10
c001bcaa:	83 c4 0c             	add    esp,0xc
c001bcad:	c3                   	ret    

c001bcae <SoundDevice::getFreeChannelNum()>:
c001bcae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bcb2:	31 c0                	xor    eax,eax
c001bcb4:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001bcbc:	74 09                	je     c001bcc7 <SoundDevice::getFreeChannelNum()+0x19>
c001bcbe:	40                   	inc    eax
c001bcbf:	83 f8 20             	cmp    eax,0x20
c001bcc2:	75 f0                	jne    c001bcb4 <SoundDevice::getFreeChannelNum()+0x6>
c001bcc4:	83 c8 ff             	or     eax,0xffffffff
c001bcc7:	c3                   	ret    

c001bcc8 <SoundDevice::addChannel(SoundChannel*)>:
c001bcc8:	56                   	push   esi
c001bcc9:	53                   	push   ebx
c001bcca:	51                   	push   ecx
c001bccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bccf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bcd3:	53                   	push   ebx
c001bcd4:	e8 d5 ff ff ff       	call   c001bcae <SoundDevice::getFreeChannelNum()>
c001bcd9:	5a                   	pop    edx
c001bcda:	83 f8 ff             	cmp    eax,0xffffffff
c001bcdd:	74 51                	je     c001bd30 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bcdf:	85 f6                	test   esi,esi
c001bce1:	74 4d                	je     c001bd30 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bce3:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001bcea:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001bcf1:	75 30                	jne    c001bd23 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001bcf3:	83 ec 0c             	sub    esp,0xc
c001bcf6:	56                   	push   esi
c001bcf7:	e8 c4 fd ff ff       	call   c001bac0 <SoundChannel::getSampleRate()>
c001bcfc:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001bd02:	89 34 24             	mov    DWORD PTR [esp],esi
c001bd05:	e8 be fd ff ff       	call   c001bac8 <SoundChannel::getBits()>
c001bd0a:	83 c4 0c             	add    esp,0xc
c001bd0d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001bd13:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd15:	50                   	push   eax
c001bd16:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001bd1c:	53                   	push   ebx
c001bd1d:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001bd20:	83 c4 10             	add    esp,0x10
c001bd23:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001bd29:	b8 01 00 00 00       	mov    eax,0x1
c001bd2e:	eb 03                	jmp    c001bd33 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001bd30:	83 c8 ff             	or     eax,0xffffffff
c001bd33:	5a                   	pop    edx
c001bd34:	5b                   	pop    ebx
c001bd35:	5e                   	pop    esi
c001bd36:	c3                   	ret    
c001bd37:	90                   	nop

c001bd38 <SoundDevice::removeChannel(int)>:
c001bd38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bd3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd40:	83 fa 1f             	cmp    edx,0x1f
c001bd43:	77 23                	ja     c001bd68 <SoundDevice::removeChannel(int)+0x30>
c001bd45:	8d 14 90             	lea    edx,[eax+edx*4]
c001bd48:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001bd4f:	74 17                	je     c001bd68 <SoundDevice::removeChannel(int)+0x30>
c001bd51:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001bd5b:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001bd61:	75 05                	jne    c001bd68 <SoundDevice::removeChannel(int)+0x30>
c001bd63:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd65:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001bd68:	c3                   	ret    
c001bd69:	90                   	nop

c001bd6a <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001bd6a:	56                   	push   esi
c001bd6b:	53                   	push   ebx
c001bd6c:	31 db                	xor    ebx,ebx
c001bd6e:	83 ec 14             	sub    esp,0x14
c001bd71:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001bd75:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001bd79:	7d 55                	jge    c001bdd0 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001bd7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bd7f:	d9 e8                	fld1   
c001bd81:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001bd84:	d8 0d d0 2f 02 c0    	fmul   DWORD PTR ds:0xc0022fd0
c001bd8a:	d8 0d d4 2f 02 c0    	fmul   DWORD PTR ds:0xc0022fd4
c001bd90:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001bd94:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001bd98:	d8 15 d8 2f 02 c0    	fcom   DWORD PTR ds:0xc0022fd8
c001bd9e:	df e0                	fnstsw ax
c001bda0:	9e                   	sahf   
c001bda1:	72 08                	jb     c001bdab <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001bda3:	dd d8                	fstp   st(0)
c001bda5:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001bda9:	eb 22                	jmp    c001bdcd <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001bdab:	d9 ee                	fldz   
c001bdad:	d8 d9                	fcomp  st(1)
c001bdaf:	df e0                	fnstsw ax
c001bdb1:	9e                   	sahf   
c001bdb2:	72 08                	jb     c001bdbc <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001bdb4:	dd d8                	fstp   st(0)
c001bdb6:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001bdba:	eb 11                	jmp    c001bdcd <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001bdbc:	83 ec 10             	sub    esp,0x10
c001bdbf:	d9 1c 24             	fstp   DWORD PTR [esp]
c001bdc2:	e8 e5 35 00 00       	call   c001f3ac <lrintf>
c001bdc7:	83 c4 10             	add    esp,0x10
c001bdca:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001bdcd:	43                   	inc    ebx
c001bdce:	eb a5                	jmp    c001bd75 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001bdd0:	83 c4 14             	add    esp,0x14
c001bdd3:	5b                   	pop    ebx
c001bdd4:	5e                   	pop    esi
c001bdd5:	c3                   	ret    

c001bdd6 <SoundDevice::getAudio(int, float*, float*)>:
c001bdd6:	55                   	push   ebp
c001bdd7:	57                   	push   edi
c001bdd8:	56                   	push   esi
c001bdd9:	53                   	push   ebx
c001bdda:	31 db                	xor    ebx,ebx
c001bddc:	83 ec 20             	sub    esp,0x20
c001bddf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bde3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001bde7:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001bdeb:	c1 e0 02             	shl    eax,0x2
c001bdee:	50                   	push   eax
c001bdef:	6a 00                	push   0x0
c001bdf1:	55                   	push   ebp
c001bdf2:	e8 c3 48 fe ff       	call   c00006ba <memset>
c001bdf7:	83 c4 10             	add    esp,0x10
c001bdfa:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001bdfe:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001be05:	85 c0                	test   eax,eax
c001be07:	0f 84 94 00 00 00    	je     c001bea1 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001be0d:	83 ec 0c             	sub    esp,0xc
c001be10:	50                   	push   eax
c001be11:	e8 a2 fc ff ff       	call   c001bab8 <SoundChannel::paused()>
c001be16:	83 c4 10             	add    esp,0x10
c001be19:	84 c0                	test   al,al
c001be1b:	0f 85 80 00 00 00    	jne    c001bea1 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001be21:	83 ec 0c             	sub    esp,0xc
c001be24:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001be2b:	e8 76 fb ff ff       	call   c001b9a6 <SoundChannel::getVolume()>
c001be30:	83 c4 10             	add    esp,0x10
c001be33:	85 c0                	test   eax,eax
c001be35:	74 6a                	je     c001bea1 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001be37:	83 ec 0c             	sub    esp,0xc
c001be3a:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001be41:	e8 60 fb ff ff       	call   c001b9a6 <SoundChannel::getVolume()>
c001be46:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001be4a:	d9 05 dc 2f 02 c0    	fld    DWORD PTR ds:0xc0022fdc
c001be50:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001be54:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001be58:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001be5c:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001be62:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001be66:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001be6d:	e8 6e fc ff ff       	call   c001bae0 <SoundChannel::unbuffer(float*, int, int)>
c001be72:	83 c4 20             	add    esp,0x20
c001be75:	31 d2                	xor    edx,edx
c001be77:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001be7b:	39 c2                	cmp    edx,eax
c001be7d:	7d 1a                	jge    c001be99 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001be7f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001be83:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001be86:	d8 c9                	fmul   st,st(1)
c001be88:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001be8e:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001be92:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001be96:	42                   	inc    edx
c001be97:	eb e2                	jmp    c001be7b <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001be99:	dd d8                	fstp   st(0)
c001be9b:	39 c7                	cmp    edi,eax
c001be9d:	7e 02                	jle    c001bea1 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001be9f:	89 c7                	mov    edi,eax
c001bea1:	43                   	inc    ebx
c001bea2:	83 fb 20             	cmp    ebx,0x20
c001bea5:	0f 85 53 ff ff ff    	jne    c001bdfe <SoundDevice::getAudio(int, float*, float*)+0x28>
c001beab:	83 c4 1c             	add    esp,0x1c
c001beae:	89 f8                	mov    eax,edi
c001beb0:	5b                   	pop    ebx
c001beb1:	5e                   	pop    esi
c001beb2:	5f                   	pop    edi
c001beb3:	5d                   	pop    ebp
c001beb4:	c3                   	ret    
c001beb5:	90                   	nop

c001beb6 <PCI::open(int, int, void*)>:
c001beb6:	83 ec 18             	sub    esp,0x18
c001beb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bebd:	8b 10                	mov    edx,DWORD PTR [eax]
c001bebf:	50                   	push   eax
c001bec0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001bec3:	31 c0                	xor    eax,eax
c001bec5:	83 c4 1c             	add    esp,0x1c
c001bec8:	c3                   	ret    
c001bec9:	90                   	nop

c001beca <PCI::close(int, int, void*)>:
c001beca:	31 c0                	xor    eax,eax
c001becc:	c3                   	ret    
c001becd:	90                   	nop

c001bece <PCI::PCI()>:
c001bece:	83 ec 0c             	sub    esp,0xc
c001bed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bed5:	83 ec 08             	sub    esp,0x8
c001bed8:	68 e0 2f 02 c0       	push   0xc0022fe0
c001bedd:	50                   	push   eax
c001bede:	e8 99 3e ff ff       	call   c000fd7c <Bus::Bus(char const*)>
c001bee3:	83 c4 10             	add    esp,0x10
c001bee6:	ba 6c 30 02 c0       	mov    edx,0xc002306c
c001beeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001beef:	89 10                	mov    DWORD PTR [eax],edx
c001bef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bef5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001befb:	0f b6 d0             	movzx  edx,al
c001befe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf02:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001bf09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf0d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bf13:	0f b6 d0             	movzx  edx,al
c001bf16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf1a:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001bf1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf23:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bf29:	8d 50 01             	lea    edx,[eax+0x1]
c001bf2c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bf30:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bf36:	0f b6 d0             	movzx  edx,al
c001bf39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf3d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bf41:	83 c9 c0             	or     ecx,0xffffffc0
c001bf44:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bf48:	90                   	nop
c001bf49:	83 c4 0c             	add    esp,0xc
c001bf4c:	c3                   	ret    
c001bf4d:	90                   	nop

c001bf4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bf4e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001bf52:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bf57:	89 ca                	mov    edx,ecx
c001bf59:	c1 e0 10             	shl    eax,0x10
c001bf5c:	81 e2 fc 00 00 00    	and    edx,0xfc
c001bf62:	09 d0                	or     eax,edx
c001bf64:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001bf69:	c1 e2 08             	shl    edx,0x8
c001bf6c:	09 d0                	or     eax,edx
c001bf6e:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001bf73:	c1 e2 0b             	shl    edx,0xb
c001bf76:	09 d0                	or     eax,edx
c001bf78:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bf7d:	0d 00 00 00 80       	or     eax,0x80000000
c001bf82:	ef                   	out    dx,eax
c001bf83:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bf88:	ed                   	in     eax,dx
c001bf89:	83 e1 02             	and    ecx,0x2
c001bf8c:	0f b6 c9             	movzx  ecx,cl
c001bf8f:	c1 e1 03             	shl    ecx,0x3
c001bf92:	d3 e8                	shr    eax,cl
c001bf94:	c3                   	ret    
c001bf95:	90                   	nop

c001bf96 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001bf96:	6a 00                	push   0x0
c001bf98:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bf9d:	50                   	push   eax
c001bf9e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bfa3:	50                   	push   eax
c001bfa4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bfa9:	50                   	push   eax
c001bfaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bfae:	e8 9b ff ff ff       	call   c001bf4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bfb3:	83 c4 14             	add    esp,0x14
c001bfb6:	c3                   	ret    
c001bfb7:	90                   	nop

c001bfb8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001bfb8:	6a 0e                	push   0xe
c001bfba:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bfbf:	50                   	push   eax
c001bfc0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bfc5:	50                   	push   eax
c001bfc6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bfcb:	50                   	push   eax
c001bfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bfd0:	e8 79 ff ff ff       	call   c001bf4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bfd5:	83 c4 14             	add    esp,0x14
c001bfd8:	0f b6 c0             	movzx  eax,al
c001bfdb:	c3                   	ret    

c001bfdc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001bfdc:	55                   	push   ebp
c001bfdd:	57                   	push   edi
c001bfde:	56                   	push   esi
c001bfdf:	53                   	push   ebx
c001bfe0:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bfe5:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001bfea:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001bfef:	6a 0a                	push   0xa
c001bff1:	56                   	push   esi
c001bff2:	55                   	push   ebp
c001bff3:	57                   	push   edi
c001bff4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bff8:	e8 51 ff ff ff       	call   c001bf4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bffd:	6a 0a                	push   0xa
c001bfff:	89 c3                	mov    ebx,eax
c001c001:	56                   	push   esi
c001c002:	0f b6 db             	movzx  ebx,bl
c001c005:	55                   	push   ebp
c001c006:	57                   	push   edi
c001c007:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001c00b:	e8 3e ff ff ff       	call   c001bf4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c010:	83 c4 28             	add    esp,0x28
c001c013:	25 00 ff 00 00       	and    eax,0xff00
c001c018:	09 d8                	or     eax,ebx
c001c01a:	5b                   	pop    ebx
c001c01b:	5e                   	pop    esi
c001c01c:	5f                   	pop    edi
c001c01d:	5d                   	pop    ebp
c001c01e:	c3                   	ret    
c001c01f:	90                   	nop

c001c020 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001c020:	6a 08                	push   0x8
c001c022:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c027:	50                   	push   eax
c001c028:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c02d:	50                   	push   eax
c001c02e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c033:	50                   	push   eax
c001c034:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c038:	e8 11 ff ff ff       	call   c001bf4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c03d:	83 c4 14             	add    esp,0x14
c001c040:	0f b6 c4             	movzx  eax,ah
c001c043:	c3                   	ret    

c001c044 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001c044:	6a 08                	push   0x8
c001c046:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c04b:	50                   	push   eax
c001c04c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c051:	50                   	push   eax
c001c052:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c057:	50                   	push   eax
c001c058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c05c:	e8 ed fe ff ff       	call   c001bf4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c061:	83 c4 14             	add    esp,0x14
c001c064:	c3                   	ret    
c001c065:	90                   	nop

c001c066 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001c066:	6a 3c                	push   0x3c
c001c068:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c06d:	50                   	push   eax
c001c06e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c073:	50                   	push   eax
c001c074:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c079:	50                   	push   eax
c001c07a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c07e:	e8 cb fe ff ff       	call   c001bf4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c083:	83 c4 14             	add    esp,0x14
c001c086:	c3                   	ret    
c001c087:	90                   	nop

c001c088 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001c088:	6a 18                	push   0x18
c001c08a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c08f:	50                   	push   eax
c001c090:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c095:	50                   	push   eax
c001c096:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c09b:	50                   	push   eax
c001c09c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c0a0:	e8 a9 fe ff ff       	call   c001bf4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c0a5:	83 c4 14             	add    esp,0x14
c001c0a8:	0f b6 c4             	movzx  eax,ah
c001c0ab:	c3                   	ret    

c001c0ac <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c0ac:	55                   	push   ebp
c001c0ad:	57                   	push   edi
c001c0ae:	56                   	push   esi
c001c0af:	53                   	push   ebx
c001c0b0:	50                   	push   eax
c001c0b1:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c0b5:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001c0ba:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c0bf:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001c0c4:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001c0cb:	8d 43 12             	lea    eax,[ebx+0x12]
c001c0ce:	83 c3 10             	add    ebx,0x10
c001c0d1:	0f b6 c0             	movzx  eax,al
c001c0d4:	0f b6 db             	movzx  ebx,bl
c001c0d7:	50                   	push   eax
c001c0d8:	51                   	push   ecx
c001c0d9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c0dd:	57                   	push   edi
c001c0de:	55                   	push   ebp
c001c0df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c0e3:	e8 66 fe ff ff       	call   c001bf4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c0e8:	53                   	push   ebx
c001c0e9:	89 c6                	mov    esi,eax
c001c0eb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c0ef:	c1 e6 10             	shl    esi,0x10
c001c0f2:	51                   	push   ecx
c001c0f3:	57                   	push   edi
c001c0f4:	55                   	push   ebp
c001c0f5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c0f9:	e8 50 fe ff ff       	call   c001bf4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c0fe:	83 c4 2c             	add    esp,0x2c
c001c101:	0f b7 c0             	movzx  eax,ax
c001c104:	5b                   	pop    ebx
c001c105:	09 f0                	or     eax,esi
c001c107:	5e                   	pop    esi
c001c108:	5f                   	pop    edi
c001c109:	5d                   	pop    ebp
c001c10a:	c3                   	ret    
c001c10b:	90                   	nop

c001c10c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c10c:	53                   	push   ebx
c001c10d:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c112:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c117:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c11b:	c1 e1 10             	shl    ecx,0x10
c001c11e:	25 fc 00 00 00       	and    eax,0xfc
c001c123:	09 c1                	or     ecx,eax
c001c125:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c12a:	c1 e0 08             	shl    eax,0x8
c001c12d:	09 c1                	or     ecx,eax
c001c12f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c134:	c1 e0 0b             	shl    eax,0xb
c001c137:	09 c1                	or     ecx,eax
c001c139:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001c13f:	89 c8                	mov    eax,ecx
c001c141:	ef                   	out    dx,eax
c001c142:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c147:	ed                   	in     eax,dx
c001c148:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001c14d:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001c152:	74 0a                	je     c001c15e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001c154:	0f b7 d8             	movzx  ebx,ax
c001c157:	89 d0                	mov    eax,edx
c001c159:	c1 e0 10             	shl    eax,0x10
c001c15c:	eb 05                	jmp    c001c163 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001c15e:	66 31 c0             	xor    ax,ax
c001c161:	89 d3                	mov    ebx,edx
c001c163:	09 c3                	or     ebx,eax
c001c165:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c16a:	89 c8                	mov    eax,ecx
c001c16c:	ef                   	out    dx,eax
c001c16d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c172:	89 d8                	mov    eax,ebx
c001c174:	ef                   	out    dx,eax
c001c175:	5b                   	pop    ebx
c001c176:	c3                   	ret    
c001c177:	90                   	nop

c001c178 <PCI::checkBus(unsigned char)>:
c001c178:	56                   	push   esi
c001c179:	53                   	push   ebx
c001c17a:	31 db                	xor    ebx,ebx
c001c17c:	51                   	push   ecx
c001c17d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c182:	52                   	push   edx
c001c183:	53                   	push   ebx
c001c184:	43                   	inc    ebx
c001c185:	56                   	push   esi
c001c186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c18a:	e8 29 03 00 00       	call   c001c4b8 <PCI::checkDevice(unsigned char, unsigned char)>
c001c18f:	83 c4 10             	add    esp,0x10
c001c192:	83 fb 20             	cmp    ebx,0x20
c001c195:	75 eb                	jne    c001c182 <PCI::checkBus(unsigned char)+0xa>
c001c197:	58                   	pop    eax
c001c198:	5b                   	pop    ebx
c001c199:	5e                   	pop    esi
c001c19a:	c3                   	ret    
c001c19b:	90                   	nop

c001c19c <PCI::foundDevice(PCIDeviceInfo)>:
c001c19c:	55                   	push   ebp
c001c19d:	57                   	push   edi
c001c19e:	56                   	push   esi
c001c19f:	53                   	push   ebx
c001c1a0:	83 ec 1c             	sub    esp,0x1c
c001c1a3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c1a7:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001c1ad:	0f 84 51 01 00 00    	je     c001c304 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c1b3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c1b7:	66 81 f9 06 04       	cmp    cx,0x406
c001c1bc:	75 2c                	jne    c001c1ea <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001c1be:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001c1c3:	50                   	push   eax
c001c1c4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001c1c9:	50                   	push   eax
c001c1ca:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001c1cf:	50                   	push   eax
c001c1d0:	56                   	push   esi
c001c1d1:	e8 b2 fe ff ff       	call   c001c088 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c1d6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c1da:	0f b6 c0             	movzx  eax,al
c001c1dd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c1e1:	83 c4 2c             	add    esp,0x2c
c001c1e4:	5b                   	pop    ebx
c001c1e5:	5e                   	pop    esi
c001c1e6:	5f                   	pop    edi
c001c1e7:	5d                   	pop    ebp
c001c1e8:	eb 8e                	jmp    c001c178 <PCI::checkBus(unsigned char)>
c001c1ea:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c1ee:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001c1f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c1f8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c1fc:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001c200:	88 d3                	mov    bl,dl
c001c202:	85 c0                	test   eax,eax
c001c204:	74 33                	je     c001c239 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001c206:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c209:	85 d2                	test   edx,edx
c001c20b:	74 28                	je     c001c235 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c20d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c213:	31 ef                	xor    edi,ebp
c001c215:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c21b:	75 18                	jne    c001c235 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c21d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c221:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001c227:	75 0c                	jne    c001c235 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c229:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001c22f:	0f 84 cf 00 00 00    	je     c001c304 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c235:	8b 00                	mov    eax,DWORD PTR [eax]
c001c237:	eb c9                	jmp    c001c202 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001c239:	66 81 f9 01 06       	cmp    cx,0x601
c001c23e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001c242:	75 18                	jne    c001c25c <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001c244:	83 ec 0c             	sub    esp,0xc
c001c247:	68 58 01 00 00       	push   0x158
c001c24c:	e8 b5 2d ff ff       	call   c000f006 <operator new(unsigned long)>
c001c251:	59                   	pop    ecx
c001c252:	89 c5                	mov    ebp,eax
c001c254:	5f                   	pop    edi
c001c255:	68 e8 2f 02 c0       	push   0xc0022fe8
c001c25a:	eb 7d                	jmp    c001c2d9 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001c25c:	66 81 f9 01 01       	cmp    cx,0x101
c001c261:	75 60                	jne    c001c2c3 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001c263:	83 ec 0c             	sub    esp,0xc
c001c266:	68 70 02 00 00       	push   0x270
c001c26b:	e8 96 2d ff ff       	call   c000f006 <operator new(unsigned long)>
c001c270:	89 04 24             	mov    DWORD PTR [esp],eax
c001c273:	89 c5                	mov    ebp,eax
c001c275:	e8 02 03 00 00       	call   c001c57c <IDE::IDE()>
c001c27a:	58                   	pop    eax
c001c27b:	5a                   	pop    edx
c001c27c:	55                   	push   ebp
c001c27d:	56                   	push   esi
c001c27e:	e8 7d 42 ff ff       	call   c0010500 <Device::addChild(Device*)>
c001c283:	83 ec 1c             	sub    esp,0x1c
c001c286:	b9 09 00 00 00       	mov    ecx,0x9
c001c28b:	fc                   	cld    
c001c28c:	89 e7                	mov    edi,esp
c001c28e:	89 de                	mov    esi,ebx
c001c290:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c292:	55                   	push   ebp
c001c293:	e8 42 41 ff ff       	call   c00103da <Device::preOpenPCI(PCIDeviceInfo)>
c001c298:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c29b:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001c29f:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001c2a7:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001c2af:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001c2b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c2ba:	83 c4 4c             	add    esp,0x4c
c001c2bd:	5b                   	pop    ebx
c001c2be:	5e                   	pop    esi
c001c2bf:	5f                   	pop    edi
c001c2c0:	5d                   	pop    ebp
c001c2c1:	ff e0                	jmp    eax
c001c2c3:	83 ec 0c             	sub    esp,0xc
c001c2c6:	68 58 01 00 00       	push   0x158
c001c2cb:	e8 36 2d ff ff       	call   c000f006 <operator new(unsigned long)>
c001c2d0:	59                   	pop    ecx
c001c2d1:	89 c5                	mov    ebp,eax
c001c2d3:	5f                   	pop    edi
c001c2d4:	68 07 30 02 c0       	push   0xc0023007
c001c2d9:	55                   	push   ebp
c001c2da:	e8 0d 45 ff ff       	call   c00107ec <DriverlessDevice::DriverlessDevice(char const*)>
c001c2df:	58                   	pop    eax
c001c2e0:	5a                   	pop    edx
c001c2e1:	55                   	push   ebp
c001c2e2:	56                   	push   esi
c001c2e3:	e8 18 42 ff ff       	call   c0010500 <Device::addChild(Device*)>
c001c2e8:	b9 09 00 00 00       	mov    ecx,0x9
c001c2ed:	fc                   	cld    
c001c2ee:	89 df                	mov    edi,ebx
c001c2f0:	89 de                	mov    esi,ebx
c001c2f2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c2f4:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001c2f8:	83 c4 2c             	add    esp,0x2c
c001c2fb:	5b                   	pop    ebx
c001c2fc:	5e                   	pop    esi
c001c2fd:	5f                   	pop    edi
c001c2fe:	5d                   	pop    ebp
c001c2ff:	e9 d6 40 ff ff       	jmp    c00103da <Device::preOpenPCI(PCIDeviceInfo)>
c001c304:	83 c4 1c             	add    esp,0x1c
c001c307:	5b                   	pop    ebx
c001c308:	5e                   	pop    esi
c001c309:	5f                   	pop    edi
c001c30a:	5d                   	pop    ebp
c001c30b:	c3                   	ret    

c001c30c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c30c:	55                   	push   ebp
c001c30d:	57                   	push   edi
c001c30e:	56                   	push   esi
c001c30f:	53                   	push   ebx
c001c310:	83 ec 5c             	sub    esp,0x5c
c001c313:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001c317:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c31b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001c31f:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001c324:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c328:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001c32c:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001c331:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c335:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001c33a:	6a 0c                	push   0xc
c001c33c:	55                   	push   ebp
c001c33d:	53                   	push   ebx
c001c33e:	57                   	push   edi
c001c33f:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001c346:	e8 03 fc ff ff       	call   c001bf4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c34b:	55                   	push   ebp
c001c34c:	53                   	push   ebx
c001c34d:	57                   	push   edi
c001c34e:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001c355:	e8 82 fc ff ff       	call   c001bfdc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c35a:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c001c35f:	83 c4 24             	add    esp,0x24
c001c362:	55                   	push   ebp
c001c363:	53                   	push   ebx
c001c364:	57                   	push   edi
c001c365:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c369:	e8 f8 fc ff ff       	call   c001c066 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c36e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001c372:	6a 3c                	push   0x3c
c001c374:	55                   	push   ebp
c001c375:	53                   	push   ebx
c001c376:	57                   	push   edi
c001c377:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001c37e:	e8 cb fb ff ff       	call   c001bf4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c383:	0f b6 c4             	movzx  eax,ah
c001c386:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c38a:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001c38e:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001c392:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c001c397:	83 c4 24             	add    esp,0x24
c001c39a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001c3a0:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001c3a7:	74 6c                	je     c001c415 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c001c3a9:	31 f6                	xor    esi,esi
c001c3ab:	8b 15 e8 42 02 c0    	mov    edx,DWORD PTR ds:0xc00242e8
c001c3b1:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c3b7:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001c3bd:	7e 56                	jle    c001c415 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c001c3bf:	8d 14 f2             	lea    edx,[edx+esi*8]
c001c3c2:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001c3c9:	39 cb                	cmp    ebx,ecx
c001c3cb:	75 45                	jne    c001c412 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c001c3cd:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001c3d4:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c3d8:	75 38                	jne    c001c412 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c001c3da:	83 ec 0c             	sub    esp,0xc
c001c3dd:	68 21 30 02 c0       	push   0xc0023021
c001c3e2:	e8 0e 2d ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001c3e7:	8b 15 e8 42 02 c0    	mov    edx,DWORD PTR ds:0xc00242e8
c001c3ed:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c3f3:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001c3fb:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001c3ff:	52                   	push   edx
c001c400:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c404:	53                   	push   ebx
c001c405:	68 46 30 02 c0       	push   0xc0023046
c001c40a:	e8 e6 2c ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001c40f:	83 c4 20             	add    esp,0x20
c001c412:	46                   	inc    esi
c001c413:	eb 96                	jmp    c001c3ab <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c001c415:	31 d2                	xor    edx,edx
c001c417:	83 ec 0c             	sub    esp,0xc
c001c41a:	55                   	push   ebp
c001c41b:	53                   	push   ebx
c001c41c:	57                   	push   edi
c001c41d:	52                   	push   edx
c001c41e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c422:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c429:	e8 7e fc ff ff       	call   c001c0ac <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c42e:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001c432:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c436:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c43a:	42                   	inc    edx
c001c43b:	83 c4 20             	add    esp,0x20
c001c43e:	83 fa 06             	cmp    edx,0x6
c001c441:	75 d4                	jne    c001c417 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c001c443:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c447:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001c44b:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001c44f:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001c453:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c457:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001c45b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c460:	86 e0                	xchg   al,ah
c001c462:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001c467:	55                   	push   ebp
c001c468:	53                   	push   ebx
c001c469:	57                   	push   edi
c001c46a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c46e:	e8 ad fb ff ff       	call   c001c020 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c473:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c477:	55                   	push   ebp
c001c478:	53                   	push   ebx
c001c479:	57                   	push   edi
c001c47a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c481:	e8 10 fb ff ff       	call   c001bf96 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c486:	83 ec 0c             	sub    esp,0xc
c001c489:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001c48e:	b9 09 00 00 00       	mov    ecx,0x9
c001c493:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001c497:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001c49b:	fc                   	cld    
c001c49c:	89 e7                	mov    edi,esp
c001c49e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c4a0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001c4a7:	e8 f0 fc ff ff       	call   c001c19c <PCI::foundDevice(PCIDeviceInfo)>
c001c4ac:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c4b2:	5b                   	pop    ebx
c001c4b3:	5e                   	pop    esi
c001c4b4:	5f                   	pop    edi
c001c4b5:	5d                   	pop    ebp
c001c4b6:	c3                   	ret    
c001c4b7:	90                   	nop

c001c4b8 <PCI::checkDevice(unsigned char, unsigned char)>:
c001c4b8:	55                   	push   ebp
c001c4b9:	57                   	push   edi
c001c4ba:	56                   	push   esi
c001c4bb:	53                   	push   ebx
c001c4bc:	83 ec 0c             	sub    esp,0xc
c001c4bf:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c4c3:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c4c8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c4cd:	6a 00                	push   0x0
c001c4cf:	56                   	push   esi
c001c4d0:	57                   	push   edi
c001c4d1:	55                   	push   ebp
c001c4d2:	e8 bf fa ff ff       	call   c001bf96 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c4d7:	6a 00                	push   0x0
c001c4d9:	56                   	push   esi
c001c4da:	57                   	push   edi
c001c4db:	55                   	push   ebp
c001c4dc:	e8 2b fe ff ff       	call   c001c30c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c4e1:	83 c4 20             	add    esp,0x20
c001c4e4:	6a 00                	push   0x0
c001c4e6:	56                   	push   esi
c001c4e7:	57                   	push   edi
c001c4e8:	55                   	push   ebp
c001c4e9:	e8 ca fa ff ff       	call   c001bfb8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c4ee:	83 c4 10             	add    esp,0x10
c001c4f1:	84 c0                	test   al,al
c001c4f3:	79 27                	jns    c001c51c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c4f5:	bb 01 00 00 00       	mov    ebx,0x1
c001c4fa:	53                   	push   ebx
c001c4fb:	56                   	push   esi
c001c4fc:	57                   	push   edi
c001c4fd:	55                   	push   ebp
c001c4fe:	e8 93 fa ff ff       	call   c001bf96 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c503:	83 c4 10             	add    esp,0x10
c001c506:	66 40                	inc    ax
c001c508:	74 0c                	je     c001c516 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001c50a:	53                   	push   ebx
c001c50b:	56                   	push   esi
c001c50c:	57                   	push   edi
c001c50d:	55                   	push   ebp
c001c50e:	e8 f9 fd ff ff       	call   c001c30c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c513:	83 c4 10             	add    esp,0x10
c001c516:	43                   	inc    ebx
c001c517:	83 fb 08             	cmp    ebx,0x8
c001c51a:	75 de                	jne    c001c4fa <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c51c:	83 c4 0c             	add    esp,0xc
c001c51f:	5b                   	pop    ebx
c001c520:	5e                   	pop    esi
c001c521:	5f                   	pop    edi
c001c522:	5d                   	pop    ebp
c001c523:	c3                   	ret    

c001c524 <PCI::detect()>:
c001c524:	56                   	push   esi
c001c525:	53                   	push   ebx
c001c526:	53                   	push   ebx
c001c527:	31 db                	xor    ebx,ebx
c001c529:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c52d:	6a 00                	push   0x0
c001c52f:	6a 00                	push   0x0
c001c531:	6a 00                	push   0x0
c001c533:	56                   	push   esi
c001c534:	e8 7f fa ff ff       	call   c001bfb8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c539:	83 c4 10             	add    esp,0x10
c001c53c:	a8 80                	test   al,0x80
c001c53e:	75 21                	jne    c001c561 <PCI::detect()+0x3d>
c001c540:	51                   	push   ecx
c001c541:	51                   	push   ecx
c001c542:	6a 00                	push   0x0
c001c544:	56                   	push   esi
c001c545:	e8 2e fc ff ff       	call   c001c178 <PCI::checkBus(unsigned char)>
c001c54a:	83 c4 10             	add    esp,0x10
c001c54d:	eb 24                	jmp    c001c573 <PCI::detect()+0x4f>
c001c54f:	52                   	push   edx
c001c550:	52                   	push   edx
c001c551:	53                   	push   ebx
c001c552:	43                   	inc    ebx
c001c553:	56                   	push   esi
c001c554:	e8 1f fc ff ff       	call   c001c178 <PCI::checkBus(unsigned char)>
c001c559:	83 c4 10             	add    esp,0x10
c001c55c:	83 fb 08             	cmp    ebx,0x8
c001c55f:	74 12                	je     c001c573 <PCI::detect()+0x4f>
c001c561:	53                   	push   ebx
c001c562:	6a 00                	push   0x0
c001c564:	6a 00                	push   0x0
c001c566:	56                   	push   esi
c001c567:	e8 2a fa ff ff       	call   c001bf96 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c56c:	83 c4 10             	add    esp,0x10
c001c56f:	66 40                	inc    ax
c001c571:	74 dc                	je     c001c54f <PCI::detect()+0x2b>
c001c573:	58                   	pop    eax
c001c574:	5b                   	pop    ebx
c001c575:	5e                   	pop    esi
c001c576:	c3                   	ret    
c001c577:	90                   	nop

c001c578 <IDE::close(int, int, void*)>:
c001c578:	83 c8 ff             	or     eax,0xffffffff
c001c57b:	c3                   	ret    

c001c57c <IDE::IDE()>:
c001c57c:	83 ec 0c             	sub    esp,0xc
c001c57f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c583:	83 ec 08             	sub    esp,0x8
c001c586:	68 90 30 02 c0       	push   0xc0023090
c001c58b:	50                   	push   eax
c001c58c:	e8 f1 42 ff ff       	call   c0010882 <HardDiskController::HardDiskController(char const*)>
c001c591:	83 c4 10             	add    esp,0x10
c001c594:	ba d0 32 02 c0       	mov    edx,0xc00232d0
c001c599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c59d:	89 10                	mov    DWORD PTR [eax],edx
c001c59f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5a3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c5aa:	90                   	nop
c001c5ab:	83 c4 0c             	add    esp,0xc
c001c5ae:	c3                   	ret    
c001c5af:	90                   	nop

c001c5b0 <IDE::prepareInterrupt(unsigned char)>:
c001c5b0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c5b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c5b9:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c5c1:	c3                   	ret    

c001c5c2 <selectDrive(unsigned char, unsigned char)>:
c001c5c2:	c3                   	ret    
c001c5c3:	90                   	nop

c001c5c4 <IDE::getBase(unsigned char)>:
c001c5c4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c5c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5cd:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c5d5:	c3                   	ret    

c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c5d6:	55                   	push   ebp
c001c5d7:	57                   	push   edi
c001c5d8:	56                   	push   esi
c001c5d9:	53                   	push   ebx
c001c5da:	83 ec 1c             	sub    esp,0x1c
c001c5dd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c5e1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c5e5:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c5e8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c5ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c5f0:	80 f9 03             	cmp    cl,0x3
c001c5f3:	77 51                	ja     c001c646 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001c5f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c5f9:	0f b6 f2             	movzx  esi,dl
c001c5fc:	0f b6 db             	movzx  ebx,bl
c001c5ff:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c602:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001c606:	83 ca 80             	or     edx,0xffffff80
c001c609:	0f b6 d2             	movzx  edx,dl
c001c60c:	52                   	push   edx
c001c60d:	6a 0c                	push   0xc
c001c60f:	56                   	push   esi
c001c610:	57                   	push   edi
c001c611:	e8 c0 ff ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c616:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c61b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c61f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c623:	ee                   	out    dx,al
c001c624:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c629:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c62d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c631:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c635:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c63d:	83 c4 2c             	add    esp,0x2c
c001c640:	5b                   	pop    ebx
c001c641:	5e                   	pop    esi
c001c642:	5f                   	pop    edi
c001c643:	5d                   	pop    ebp
c001c644:	eb 90                	jmp    c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c646:	80 fb 07             	cmp    bl,0x7
c001c649:	77 12                	ja     c001c65d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001c64b:	0f b6 d2             	movzx  edx,dl
c001c64e:	0f b6 db             	movzx  ebx,bl
c001c651:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001c659:	89 da                	mov    edx,ebx
c001c65b:	eb 2f                	jmp    c001c68c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c65d:	80 fb 0d             	cmp    bl,0xd
c001c660:	77 13                	ja     c001c675 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001c662:	0f b6 d2             	movzx  edx,dl
c001c665:	0f b6 db             	movzx  ebx,bl
c001c668:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c66f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c673:	eb 17                	jmp    c001c68c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c675:	80 fb 15             	cmp    bl,0x15
c001c678:	77 13                	ja     c001c68d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c67a:	0f b6 d2             	movzx  edx,dl
c001c67d:	0f b6 db             	movzx  ebx,bl
c001c680:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c688:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c68c:	ee                   	out    dx,al
c001c68d:	83 c4 1c             	add    esp,0x1c
c001c690:	5b                   	pop    ebx
c001c691:	5e                   	pop    esi
c001c692:	5f                   	pop    edi
c001c693:	5d                   	pop    ebp
c001c694:	c3                   	ret    
c001c695:	90                   	nop

c001c696 <IDE::read(unsigned char, unsigned char)>:
c001c696:	55                   	push   ebp
c001c697:	57                   	push   edi
c001c698:	56                   	push   esi
c001c699:	53                   	push   ebx
c001c69a:	83 ec 1c             	sub    esp,0x1c
c001c69d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c6a1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c6a5:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c6a8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c6ac:	3c 03                	cmp    al,0x3
c001c6ae:	77 43                	ja     c001c6f3 <IDE::read(unsigned char, unsigned char)+0x5d>
c001c6b0:	0f b6 f2             	movzx  esi,dl
c001c6b3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c6b6:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001c6ba:	83 c8 80             	or     eax,0xffffff80
c001c6bd:	0f b6 c0             	movzx  eax,al
c001c6c0:	50                   	push   eax
c001c6c1:	6a 0c                	push   0xc
c001c6c3:	56                   	push   esi
c001c6c4:	57                   	push   edi
c001c6c5:	e8 0c ff ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6ca:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001c6cf:	0f b6 c3             	movzx  eax,bl
c001c6d2:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001c6d6:	ec                   	in     al,dx
c001c6d7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c6db:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c6e0:	52                   	push   edx
c001c6e1:	6a 0c                	push   0xc
c001c6e3:	56                   	push   esi
c001c6e4:	57                   	push   edi
c001c6e5:	e8 ec fe ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6ea:	83 c4 20             	add    esp,0x20
c001c6ed:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c6f1:	eb 49                	jmp    c001c73c <IDE::read(unsigned char, unsigned char)+0xa6>
c001c6f3:	80 fb 07             	cmp    bl,0x7
c001c6f6:	77 12                	ja     c001c70a <IDE::read(unsigned char, unsigned char)+0x74>
c001c6f8:	0f b6 d2             	movzx  edx,dl
c001c6fb:	0f b6 c3             	movzx  eax,bl
c001c6fe:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001c706:	89 c2                	mov    edx,eax
c001c708:	eb 31                	jmp    c001c73b <IDE::read(unsigned char, unsigned char)+0xa5>
c001c70a:	80 fb 0d             	cmp    bl,0xd
c001c70d:	77 13                	ja     c001c722 <IDE::read(unsigned char, unsigned char)+0x8c>
c001c70f:	0f b6 d2             	movzx  edx,dl
c001c712:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001c719:	0f b6 d3             	movzx  edx,bl
c001c71c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c720:	eb 19                	jmp    c001c73b <IDE::read(unsigned char, unsigned char)+0xa5>
c001c722:	31 c0                	xor    eax,eax
c001c724:	80 fb 15             	cmp    bl,0x15
c001c727:	77 13                	ja     c001c73c <IDE::read(unsigned char, unsigned char)+0xa6>
c001c729:	0f b6 d2             	movzx  edx,dl
c001c72c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001c734:	0f b6 d3             	movzx  edx,bl
c001c737:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c73b:	ec                   	in     al,dx
c001c73c:	83 c4 1c             	add    esp,0x1c
c001c73f:	5b                   	pop    ebx
c001c740:	5e                   	pop    esi
c001c741:	5f                   	pop    edi
c001c742:	5d                   	pop    ebp
c001c743:	c3                   	ret    

c001c744 <IDE::waitInterrupt(unsigned char)>:
c001c744:	55                   	push   ebp
c001c745:	57                   	push   edi
c001c746:	56                   	push   esi
c001c747:	53                   	push   ebx
c001c748:	31 db                	xor    ebx,ebx
c001c74a:	83 ec 0c             	sub    esp,0xc
c001c74d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c751:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001c756:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001c75e:	89 e8                	mov    eax,ebp
c001c760:	84 c0                	test   al,al
c001c762:	75 34                	jne    c001c798 <IDE::waitInterrupt(unsigned char)+0x54>
c001c764:	52                   	push   edx
c001c765:	6a 0c                	push   0xc
c001c767:	56                   	push   esi
c001c768:	57                   	push   edi
c001c769:	e8 28 ff ff ff       	call   c001c696 <IDE::read(unsigned char, unsigned char)>
c001c76e:	83 c4 10             	add    esp,0x10
c001c771:	a8 01                	test   al,0x1
c001c773:	75 2b                	jne    c001c7a0 <IDE::waitInterrupt(unsigned char)+0x5c>
c001c775:	f6 c3 04             	test   bl,0x4
c001c778:	75 16                	jne    c001c790 <IDE::waitInterrupt(unsigned char)+0x4c>
c001c77a:	83 fb 32             	cmp    ebx,0x32
c001c77d:	7e 11                	jle    c001c790 <IDE::waitInterrupt(unsigned char)+0x4c>
c001c77f:	50                   	push   eax
c001c780:	50                   	push   eax
c001c781:	6a 00                	push   0x0
c001c783:	68 80 96 98 00       	push   0x989680
c001c788:	e8 99 c5 ff ff       	call   c0018d26 <nanoSleep(unsigned long long)>
c001c78d:	83 c4 10             	add    esp,0x10
c001c790:	83 fb 3c             	cmp    ebx,0x3c
c001c793:	74 0b                	je     c001c7a0 <IDE::waitInterrupt(unsigned char)+0x5c>
c001c795:	43                   	inc    ebx
c001c796:	eb be                	jmp    c001c756 <IDE::waitInterrupt(unsigned char)+0x12>
c001c798:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001c7a0:	83 c4 0c             	add    esp,0xc
c001c7a3:	89 e8                	mov    eax,ebp
c001c7a5:	5b                   	pop    ebx
c001c7a6:	5e                   	pop    esi
c001c7a7:	5f                   	pop    edi
c001c7a8:	5d                   	pop    ebp
c001c7a9:	c3                   	ret    

c001c7aa <ideChannel0IRQHandler(regs*, void*)>:
c001c7aa:	83 ec 10             	sub    esp,0x10
c001c7ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c7b1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c7b8:	6a 07                	push   0x7
c001c7ba:	6a 00                	push   0x0
c001c7bc:	50                   	push   eax
c001c7bd:	e8 d4 fe ff ff       	call   c001c696 <IDE::read(unsigned char, unsigned char)>
c001c7c2:	83 c4 1c             	add    esp,0x1c
c001c7c5:	c3                   	ret    

c001c7c6 <ideChannel1IRQHandler(regs*, void*)>:
c001c7c6:	83 ec 10             	sub    esp,0x10
c001c7c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c7cd:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c7d4:	6a 07                	push   0x7
c001c7d6:	6a 01                	push   0x1
c001c7d8:	50                   	push   eax
c001c7d9:	e8 b8 fe ff ff       	call   c001c696 <IDE::read(unsigned char, unsigned char)>
c001c7de:	83 c4 1c             	add    esp,0x1c
c001c7e1:	c3                   	ret    

c001c7e2 <IDE::enableIRQs(unsigned char, bool)>:
c001c7e2:	57                   	push   edi
c001c7e3:	56                   	push   esi
c001c7e4:	be 04 00 00 00       	mov    esi,0x4
c001c7e9:	53                   	push   ebx
c001c7ea:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c7ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7f3:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001c7f8:	0f 94 c0             	sete   al
c001c7fb:	d1 e0                	shl    eax,1
c001c7fd:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001c804:	0f b6 c0             	movzx  eax,al
c001c807:	50                   	push   eax
c001c808:	6a 0c                	push   0xc
c001c80a:	57                   	push   edi
c001c80b:	53                   	push   ebx
c001c80c:	e8 c5 fd ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c811:	83 c4 10             	add    esp,0x10
c001c814:	50                   	push   eax
c001c815:	6a 0c                	push   0xc
c001c817:	57                   	push   edi
c001c818:	53                   	push   ebx
c001c819:	e8 78 fe ff ff       	call   c001c696 <IDE::read(unsigned char, unsigned char)>
c001c81e:	83 c4 10             	add    esp,0x10
c001c821:	4e                   	dec    esi
c001c822:	75 f0                	jne    c001c814 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001c824:	5b                   	pop    ebx
c001c825:	5e                   	pop    esi
c001c826:	5f                   	pop    edi
c001c827:	c3                   	ret    

c001c828 <IDE::open(int, int, void*)>:
c001c828:	55                   	push   ebp
c001c829:	57                   	push   edi
c001c82a:	56                   	push   esi
c001c82b:	53                   	push   ebx
c001c82c:	83 ec 1c             	sub    esp,0x1c
c001c82f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c833:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c83c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c845:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c84c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c853:	0f 85 b0 02 00 00    	jne    c001cb09 <IDE::open(int, int, void*)+0x2e1>
c001c859:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c85f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001c863:	83 e0 7f             	and    eax,0x7f
c001c866:	3c 05                	cmp    al,0x5
c001c868:	74 04                	je     c001c86e <IDE::open(int, int, void*)+0x46>
c001c86a:	3c 0f                	cmp    al,0xf
c001c86c:	75 32                	jne    c001c8a0 <IDE::open(int, int, void*)+0x78>
c001c86e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c874:	83 e0 fc             	and    eax,0xfffffffc
c001c877:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c87e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c884:	83 e0 fc             	and    eax,0xfffffffc
c001c887:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c88e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c894:	83 e0 fc             	and    eax,0xfffffffc
c001c897:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c89e:	eb 14                	jmp    c001c8b4 <IDE::open(int, int, void*)+0x8c>
c001c8a0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c8aa:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c8b4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001c8bb:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c8c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c8c6:	89 c6                	mov    esi,eax
c001c8c8:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c8cd:	c1 e6 10             	shl    esi,0x10
c001c8d0:	89 e8                	mov    eax,ebp
c001c8d2:	89 fa                	mov    edx,edi
c001c8d4:	c1 e0 0b             	shl    eax,0xb
c001c8d7:	09 f0                	or     eax,esi
c001c8d9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001c8e0:	c1 e6 08             	shl    esi,0x8
c001c8e3:	09 c6                	or     esi,eax
c001c8e5:	89 f0                	mov    eax,esi
c001c8e7:	0d 08 00 00 80       	or     eax,0x80000008
c001c8ec:	ef                   	out    dx,eax
c001c8ed:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001c8f2:	89 ca                	mov    edx,ecx
c001c8f4:	ed                   	in     eax,dx
c001c8f5:	c1 e8 10             	shr    eax,0x10
c001c8f8:	3d ff ff 00 00       	cmp    eax,0xffff
c001c8fd:	0f 84 f5 00 00 00    	je     c001c9f8 <IDE::open(int, int, void*)+0x1d0>
c001c903:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001c909:	89 fa                	mov    edx,edi
c001c90b:	89 f0                	mov    eax,esi
c001c90d:	ef                   	out    dx,eax
c001c90e:	b0 fe                	mov    al,0xfe
c001c910:	89 ca                	mov    edx,ecx
c001c912:	ee                   	out    dx,al
c001c913:	89 f0                	mov    eax,esi
c001c915:	89 fa                	mov    edx,edi
c001c917:	ef                   	out    dx,eax
c001c918:	89 ca                	mov    edx,ecx
c001c91a:	ed                   	in     eax,dx
c001c91b:	3c fe                	cmp    al,0xfe
c001c91d:	0f 85 a9 00 00 00    	jne    c001c9cc <IDE::open(int, int, void*)+0x1a4>
c001c923:	8b 15 e8 42 02 c0    	mov    edx,DWORD PTR ds:0xc00242e8
c001c929:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001c930:	74 33                	je     c001c965 <IDE::open(int, int, void*)+0x13d>
c001c932:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c938:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c93c:	40                   	inc    eax
c001c93d:	83 ec 0c             	sub    esp,0xc
c001c940:	0f b6 c0             	movzx  eax,al
c001c943:	50                   	push   eax
c001c944:	55                   	push   ebp
c001c945:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c949:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001c94f:	51                   	push   ecx
c001c950:	e8 af 73 ff ff       	call   c0013d04 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c955:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c95a:	83 c4 1c             	add    esp,0x1c
c001c95d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c963:	eb 0a                	jmp    c001c96f <IDE::open(int, int, void*)+0x147>
c001c965:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c96f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c976:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c97d:	c1 e1 10             	shl    ecx,0x10
c001c980:	c1 e0 08             	shl    eax,0x8
c001c983:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c988:	09 c1                	or     ecx,eax
c001c98a:	89 fa                	mov    edx,edi
c001c98c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c993:	c1 e0 0b             	shl    eax,0xb
c001c996:	09 c1                	or     ecx,eax
c001c998:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c99e:	89 c8                	mov    eax,ecx
c001c9a0:	ef                   	out    dx,eax
c001c9a1:	be fc 0c 00 00       	mov    esi,0xcfc
c001c9a6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001c9ac:	89 f2                	mov    edx,esi
c001c9ae:	ee                   	out    dx,al
c001c9af:	89 c8                	mov    eax,ecx
c001c9b1:	89 fa                	mov    edx,edi
c001c9b3:	ef                   	out    dx,eax
c001c9b4:	89 f2                	mov    edx,esi
c001c9b6:	ed                   	in     eax,dx
c001c9b7:	0f b6 c0             	movzx  eax,al
c001c9ba:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001c9c0:	74 46                	je     c001ca08 <IDE::open(int, int, void*)+0x1e0>
c001c9c2:	83 ec 0c             	sub    esp,0xc
c001c9c5:	68 a8 30 02 c0       	push   0xc00230a8
c001c9ca:	eb 34                	jmp    c001ca00 <IDE::open(int, int, void*)+0x1d8>
c001c9cc:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c9d5:	75 17                	jne    c001c9ee <IDE::open(int, int, void*)+0x1c6>
c001c9d7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001c9dc:	74 07                	je     c001c9e5 <IDE::open(int, int, void*)+0x1bd>
c001c9de:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001c9e3:	75 09                	jne    c001c9ee <IDE::open(int, int, void*)+0x1c6>
c001c9e5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c9ec:	eb 1a                	jmp    c001ca08 <IDE::open(int, int, void*)+0x1e0>
c001c9ee:	83 ec 0c             	sub    esp,0xc
c001c9f1:	68 b0 30 02 c0       	push   0xc00230b0
c001c9f6:	eb 08                	jmp    c001ca00 <IDE::open(int, int, void*)+0x1d8>
c001c9f8:	83 ec 0c             	sub    esp,0xc
c001c9fb:	68 e1 30 02 c0       	push   0xc00230e1
c001ca00:	e8 85 8e ff ff       	call   c001588a <Krnl::panic(char const*)>
c001ca05:	83 c4 10             	add    esp,0x10
c001ca08:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001ca0f:	79 1a                	jns    c001ca2b <IDE::open(int, int, void*)+0x203>
c001ca11:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001ca17:	83 e0 fc             	and    eax,0xfffffffc
c001ca1a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001ca21:	83 c0 08             	add    eax,0x8
c001ca24:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001ca2b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001ca31:	89 c2                	mov    edx,eax
c001ca33:	83 e2 0f             	and    edx,0xf
c001ca36:	66 83 fa 08          	cmp    dx,0x8
c001ca3a:	75 0a                	jne    c001ca46 <IDE::open(int, int, void*)+0x21e>
c001ca3c:	83 e8 02             	sub    eax,0x2
c001ca3f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ca46:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001ca4c:	89 c2                	mov    edx,eax
c001ca4e:	83 e2 0f             	and    edx,0xf
c001ca51:	66 83 fa 08          	cmp    dx,0x8
c001ca55:	75 0a                	jne    c001ca61 <IDE::open(int, int, void*)+0x239>
c001ca57:	83 e8 02             	sub    eax,0x2
c001ca5a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ca61:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001ca68:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001ca6f:	89 d0                	mov    eax,edx
c001ca71:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ca74:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ca78:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001ca7c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001ca7f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ca84:	0f b6 c9             	movzx  ecx,cl
c001ca87:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001ca8e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ca91:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ca95:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001ca99:	8d 50 02             	lea    edx,[eax+0x2]
c001ca9c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001caa1:	0f b6 d2             	movzx  edx,dl
c001caa4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001caaa:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001caad:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cab1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001cab5:	8d 48 03             	lea    ecx,[eax+0x3]
c001cab8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cabd:	0f b6 c9             	movzx  ecx,cl
c001cac0:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cac6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cac9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cacd:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cad1:	8d 50 04             	lea    edx,[eax+0x4]
c001cad4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001cada:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cadf:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cae6:	66 85 f6             	test   si,si
c001cae9:	74 3e                	je     c001cb29 <IDE::open(int, int, void*)+0x301>
c001caeb:	0f b6 d2             	movzx  edx,dl
c001caee:	83 c0 05             	add    eax,0x5
c001caf1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001caf4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001caf8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001cafc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001cb02:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cb07:	eb 20                	jmp    c001cb29 <IDE::open(int, int, void*)+0x301>
c001cb09:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001cb13:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001cb1d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001cb24:	e9 02 ff ff ff       	jmp    c001ca2b <IDE::open(int, int, void*)+0x203>
c001cb29:	52                   	push   edx
c001cb2a:	52                   	push   edx
c001cb2b:	6a 00                	push   0x0
c001cb2d:	53                   	push   ebx
c001cb2e:	e8 7d fa ff ff       	call   c001c5b0 <IDE::prepareInterrupt(unsigned char)>
c001cb33:	59                   	pop    ecx
c001cb34:	5e                   	pop    esi
c001cb35:	6a 01                	push   0x1
c001cb37:	53                   	push   ebx
c001cb38:	e8 73 fa ff ff       	call   c001c5b0 <IDE::prepareInterrupt(unsigned char)>
c001cb3d:	83 c4 0c             	add    esp,0xc
c001cb40:	6a 00                	push   0x0
c001cb42:	6a 00                	push   0x0
c001cb44:	53                   	push   ebx
c001cb45:	e8 98 fc ff ff       	call   c001c7e2 <IDE::enableIRQs(unsigned char, bool)>
c001cb4a:	83 c4 0c             	add    esp,0xc
c001cb4d:	6a 00                	push   0x0
c001cb4f:	6a 01                	push   0x1
c001cb51:	53                   	push   ebx
c001cb52:	e8 8b fc ff ff       	call   c001c7e2 <IDE::enableIRQs(unsigned char, bool)>
c001cb57:	83 c4 10             	add    esp,0x10
c001cb5a:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001cb61:	74 40                	je     c001cba3 <IDE::open(int, int, void*)+0x37b>
c001cb63:	83 ec 0c             	sub    esp,0xc
c001cb66:	68 0b 31 02 c0       	push   0xc002310b
c001cb6b:	e8 85 25 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001cb70:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb73:	6a 01                	push   0x1
c001cb75:	68 aa c7 01 c0       	push   0xc001c7aa
c001cb7a:	6a 0e                	push   0xe
c001cb7c:	53                   	push   ebx
c001cb7d:	e8 d2 38 ff ff       	call   c0010454 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cb82:	83 c4 14             	add    esp,0x14
c001cb85:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cb8b:	53                   	push   ebx
c001cb8c:	6a 01                	push   0x1
c001cb8e:	68 c6 c7 01 c0       	push   0xc001c7c6
c001cb93:	6a 0f                	push   0xf
c001cb95:	53                   	push   ebx
c001cb96:	e8 b9 38 ff ff       	call   c0010454 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cb9b:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001cba1:	eb 4a                	jmp    c001cbed <IDE::open(int, int, void*)+0x3c5>
c001cba3:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001cbad:	50                   	push   eax
c001cbae:	6a 0f                	push   0xf
c001cbb0:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cbb6:	68 27 31 02 c0       	push   0xc0023127
c001cbbb:	e8 35 25 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001cbc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbc3:	6a 00                	push   0x0
c001cbc5:	68 aa c7 01 c0       	push   0xc001c7aa
c001cbca:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cbd0:	53                   	push   ebx
c001cbd1:	e8 7e 38 ff ff       	call   c0010454 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cbd6:	83 c4 14             	add    esp,0x14
c001cbd9:	53                   	push   ebx
c001cbda:	6a 00                	push   0x0
c001cbdc:	68 c6 c7 01 c0       	push   0xc001c7c6
c001cbe1:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001cbe7:	53                   	push   ebx
c001cbe8:	e8 67 38 ff ff       	call   c0010454 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cbed:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cbef:	83 c4 20             	add    esp,0x20
c001cbf2:	83 ec 0c             	sub    esp,0xc
c001cbf5:	53                   	push   ebx
c001cbf6:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001cbf9:	83 c4 0c             	add    esp,0xc
c001cbfc:	6a 07                	push   0x7
c001cbfe:	6a 00                	push   0x0
c001cc00:	53                   	push   ebx
c001cc01:	e8 90 fa ff ff       	call   c001c696 <IDE::read(unsigned char, unsigned char)>
c001cc06:	83 c4 0c             	add    esp,0xc
c001cc09:	6a 07                	push   0x7
c001cc0b:	6a 01                	push   0x1
c001cc0d:	53                   	push   ebx
c001cc0e:	e8 83 fa ff ff       	call   c001c696 <IDE::read(unsigned char, unsigned char)>
c001cc13:	83 c4 0c             	add    esp,0xc
c001cc16:	6a 01                	push   0x1
c001cc18:	6a 00                	push   0x0
c001cc1a:	53                   	push   ebx
c001cc1b:	e8 c2 fb ff ff       	call   c001c7e2 <IDE::enableIRQs(unsigned char, bool)>
c001cc20:	83 c4 0c             	add    esp,0xc
c001cc23:	6a 01                	push   0x1
c001cc25:	6a 01                	push   0x1
c001cc27:	53                   	push   ebx
c001cc28:	e8 b5 fb ff ff       	call   c001c7e2 <IDE::enableIRQs(unsigned char, bool)>
c001cc2d:	83 c4 2c             	add    esp,0x2c
c001cc30:	31 c0                	xor    eax,eax
c001cc32:	5b                   	pop    ebx
c001cc33:	5e                   	pop    esi
c001cc34:	5f                   	pop    edi
c001cc35:	5d                   	pop    ebp
c001cc36:	c3                   	ret    
c001cc37:	90                   	nop

c001cc38 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001cc38:	55                   	push   ebp
c001cc39:	57                   	push   edi
c001cc3a:	56                   	push   esi
c001cc3b:	53                   	push   ebx
c001cc3c:	83 ec 1c             	sub    esp,0x1c
c001cc3f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cc43:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cc47:	8d 50 f8             	lea    edx,[eax-0x8]
c001cc4a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cc4e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001cc52:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001cc56:	80 fa 03             	cmp    dl,0x3
c001cc59:	77 5d                	ja     c001ccb8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001cc5b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cc5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc63:	0f b6 db             	movzx  ebx,bl
c001cc66:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001cc69:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001cc6d:	83 ca 80             	or     edx,0xffffff80
c001cc70:	0f b6 d2             	movzx  edx,dl
c001cc73:	52                   	push   edx
c001cc74:	6a 0c                	push   0xc
c001cc76:	53                   	push   ebx
c001cc77:	56                   	push   esi
c001cc78:	e8 59 f9 ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc7d:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001cc82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc86:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cc8a:	0f b6 c0             	movzx  eax,al
c001cc8d:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001cc91:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cc93:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cc98:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001cc9c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001cca0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001cca4:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ccac:	83 c4 2c             	add    esp,0x2c
c001ccaf:	5b                   	pop    ebx
c001ccb0:	5e                   	pop    esi
c001ccb1:	5f                   	pop    edi
c001ccb2:	5d                   	pop    ebp
c001ccb3:	e9 1e f9 ff ff       	jmp    c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ccb8:	3c 07                	cmp    al,0x7
c001ccba:	77 10                	ja     c001cccc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001ccbc:	0f b6 db             	movzx  ebx,bl
c001ccbf:	0f b6 d0             	movzx  edx,al
c001ccc2:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001ccca:	eb 2d                	jmp    c001ccf9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cccc:	3c 0d                	cmp    al,0xd
c001ccce:	77 13                	ja     c001cce3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001ccd0:	0f b6 db             	movzx  ebx,bl
c001ccd3:	0f b6 c0             	movzx  eax,al
c001ccd6:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001ccdd:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001cce1:	eb 16                	jmp    c001ccf9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cce3:	3c 15                	cmp    al,0x15
c001cce5:	77 14                	ja     c001ccfb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001cce7:	0f b6 db             	movzx  ebx,bl
c001ccea:	0f b6 c0             	movzx  eax,al
c001cced:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001ccf5:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001ccf9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ccfb:	83 c4 1c             	add    esp,0x1c
c001ccfe:	5b                   	pop    ebx
c001ccff:	5e                   	pop    esi
c001cd00:	5f                   	pop    edi
c001cd01:	5d                   	pop    ebp
c001cd02:	c3                   	ret    
c001cd03:	90                   	nop

c001cd04 <IDE::detect()>:
c001cd04:	55                   	push   ebp
c001cd05:	57                   	push   edi
c001cd06:	56                   	push   esi
c001cd07:	53                   	push   ebx
c001cd08:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001cd0e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001cd15:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001cd1c:	0f 85 be 02 00 00    	jne    c001cfe0 <IDE::detect()+0x2dc>
c001cd22:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001cd29:	31 f6                	xor    esi,esi
c001cd2b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cd33:	31 ed                	xor    ebp,ebp
c001cd35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd39:	c1 e0 06             	shl    eax,0x6
c001cd3c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001cd44:	89 e8                	mov    eax,ebp
c001cd46:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001cd4a:	c1 e0 04             	shl    eax,0x4
c001cd4d:	83 c8 a0             	or     eax,0xffffffa0
c001cd50:	0f b6 c0             	movzx  eax,al
c001cd53:	50                   	push   eax
c001cd54:	6a 06                	push   0x6
c001cd56:	56                   	push   esi
c001cd57:	53                   	push   ebx
c001cd58:	e8 79 f8 ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd5d:	83 c4 0c             	add    esp,0xc
c001cd60:	6a 0c                	push   0xc
c001cd62:	56                   	push   esi
c001cd63:	53                   	push   ebx
c001cd64:	e8 2d f9 ff ff       	call   c001c696 <IDE::read(unsigned char, unsigned char)>
c001cd69:	83 c4 0c             	add    esp,0xc
c001cd6c:	6a 0c                	push   0xc
c001cd6e:	56                   	push   esi
c001cd6f:	53                   	push   ebx
c001cd70:	e8 21 f9 ff ff       	call   c001c696 <IDE::read(unsigned char, unsigned char)>
c001cd75:	83 c4 0c             	add    esp,0xc
c001cd78:	6a 0c                	push   0xc
c001cd7a:	56                   	push   esi
c001cd7b:	53                   	push   ebx
c001cd7c:	e8 15 f9 ff ff       	call   c001c696 <IDE::read(unsigned char, unsigned char)>
c001cd81:	83 c4 0c             	add    esp,0xc
c001cd84:	6a 0c                	push   0xc
c001cd86:	56                   	push   esi
c001cd87:	53                   	push   ebx
c001cd88:	e8 09 f9 ff ff       	call   c001c696 <IDE::read(unsigned char, unsigned char)>
c001cd8d:	68 ec 00 00 00       	push   0xec
c001cd92:	6a 07                	push   0x7
c001cd94:	56                   	push   esi
c001cd95:	53                   	push   ebx
c001cd96:	e8 3b f8 ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd9b:	83 c4 1c             	add    esp,0x1c
c001cd9e:	6a 0c                	push   0xc
c001cda0:	56                   	push   esi
c001cda1:	53                   	push   ebx
c001cda2:	e8 ef f8 ff ff       	call   c001c696 <IDE::read(unsigned char, unsigned char)>
c001cda7:	83 c4 0c             	add    esp,0xc
c001cdaa:	6a 0c                	push   0xc
c001cdac:	56                   	push   esi
c001cdad:	53                   	push   ebx
c001cdae:	e8 e3 f8 ff ff       	call   c001c696 <IDE::read(unsigned char, unsigned char)>
c001cdb3:	83 c4 0c             	add    esp,0xc
c001cdb6:	6a 0c                	push   0xc
c001cdb8:	56                   	push   esi
c001cdb9:	53                   	push   ebx
c001cdba:	e8 d7 f8 ff ff       	call   c001c696 <IDE::read(unsigned char, unsigned char)>
c001cdbf:	83 c4 0c             	add    esp,0xc
c001cdc2:	6a 0c                	push   0xc
c001cdc4:	56                   	push   esi
c001cdc5:	53                   	push   ebx
c001cdc6:	e8 cb f8 ff ff       	call   c001c696 <IDE::read(unsigned char, unsigned char)>
c001cdcb:	83 c4 0c             	add    esp,0xc
c001cdce:	6a 0c                	push   0xc
c001cdd0:	56                   	push   esi
c001cdd1:	53                   	push   ebx
c001cdd2:	e8 bf f8 ff ff       	call   c001c696 <IDE::read(unsigned char, unsigned char)>
c001cdd7:	83 c4 10             	add    esp,0x10
c001cdda:	84 c0                	test   al,al
c001cddc:	0f 84 8b 01 00 00    	je     c001cf6d <IDE::detect()+0x269>
c001cde2:	31 ff                	xor    edi,edi
c001cde4:	50                   	push   eax
c001cde5:	6a 0c                	push   0xc
c001cde7:	56                   	push   esi
c001cde8:	53                   	push   ebx
c001cde9:	e8 a8 f8 ff ff       	call   c001c696 <IDE::read(unsigned char, unsigned char)>
c001cdee:	83 c4 10             	add    esp,0x10
c001cdf1:	a8 01                	test   al,0x1
c001cdf3:	0f 85 8e 01 00 00    	jne    c001cf87 <IDE::detect()+0x283>
c001cdf9:	84 c0                	test   al,al
c001cdfb:	78 04                	js     c001ce01 <IDE::detect()+0xfd>
c001cdfd:	a8 08                	test   al,0x8
c001cdff:	75 27                	jne    c001ce28 <IDE::detect()+0x124>
c001ce01:	47                   	inc    edi
c001ce02:	81 ff 17 01 00 00    	cmp    edi,0x117
c001ce08:	7e da                	jle    c001cde4 <IDE::detect()+0xe0>
c001ce0a:	50                   	push   eax
c001ce0b:	50                   	push   eax
c001ce0c:	6a 00                	push   0x0
c001ce0e:	68 40 4b 4c 00       	push   0x4c4b40
c001ce13:	e8 0e bf ff ff       	call   c0018d26 <nanoSleep(unsigned long long)>
c001ce18:	83 c4 10             	add    esp,0x10
c001ce1b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001ce21:	75 c1                	jne    c001cde4 <IDE::detect()+0xe0>
c001ce23:	e9 5f 01 00 00       	jmp    c001cf87 <IDE::detect()+0x283>
c001ce28:	31 c9                	xor    ecx,ecx
c001ce2a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001ce2e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ce32:	83 ec 0c             	sub    esp,0xc
c001ce35:	68 80 00 00 00       	push   0x80
c001ce3a:	57                   	push   edi
c001ce3b:	6a 00                	push   0x0
c001ce3d:	56                   	push   esi
c001ce3e:	53                   	push   ebx
c001ce3f:	e8 f4 fd ff ff       	call   c001cc38 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ce44:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001ce49:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ce4d:	89 d1                	mov    ecx,edx
c001ce4f:	c1 e0 06             	shl    eax,0x6
c001ce52:	01 d8                	add    eax,ebx
c001ce54:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001ce5b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001ce62:	89 f2                	mov    edx,esi
c001ce64:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001ce6a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001ce6e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001ce74:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ce78:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001ce7f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001ce87:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001ce8e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001ce96:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001ce9c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001cea3:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001cea9:	8d 54 24 58          	lea    edx,[esp+0x58]
c001cead:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ceb1:	83 c4 20             	add    esp,0x20
c001ceb4:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001ceb7:	83 c0 02             	add    eax,0x2
c001ceba:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001cec0:	83 c7 02             	add    edi,0x2
c001cec3:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001cec6:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001cecc:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001ced0:	75 e2                	jne    c001ceb4 <IDE::detect()+0x1b0>
c001ced2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ced6:	c1 e0 06             	shl    eax,0x6
c001ced9:	01 d8                	add    eax,ebx
c001cedb:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001cee1:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001cee8:	66 c1 ea 09          	shr    dx,0x9
c001ceec:	83 e2 01             	and    edx,0x1
c001ceef:	84 c9                	test   cl,cl
c001cef1:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001cef7:	75 2f                	jne    c001cf28 <IDE::detect()+0x224>
c001cef9:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001ceff:	85 c0                	test   eax,eax
c001cf01:	74 66                	je     c001cf69 <IDE::detect()+0x265>
c001cf03:	50                   	push   eax
c001cf04:	55                   	push   ebp
c001cf05:	56                   	push   esi
c001cf06:	68 43 31 02 c0       	push   0xc0023143
c001cf0b:	e8 e5 21 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001cf10:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cf17:	e8 ea 20 ff ff       	call   c000f006 <operator new(unsigned long)>
c001cf1c:	89 c7                	mov    edi,eax
c001cf1e:	89 04 24             	mov    DWORD PTR [esp],eax
c001cf21:	e8 e8 02 00 00       	call   c001d20e <ATA::ATA()>
c001cf26:	eb 28                	jmp    c001cf50 <IDE::detect()+0x24c>
c001cf28:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001cf2e:	55                   	push   ebp
c001cf2f:	56                   	push   esi
c001cf30:	68 72 31 02 c0       	push   0xc0023172
c001cf35:	e8 bb 21 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001cf3a:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001cf41:	e8 c0 20 ff ff       	call   c000f006 <operator new(unsigned long)>
c001cf46:	89 c7                	mov    edi,eax
c001cf48:	89 04 24             	mov    DWORD PTR [esp],eax
c001cf4b:	e8 ee 08 00 00       	call   c001d83e <ATAPI::ATAPI()>
c001cf50:	5a                   	pop    edx
c001cf51:	59                   	pop    ecx
c001cf52:	57                   	push   edi
c001cf53:	53                   	push   ebx
c001cf54:	e8 a7 35 ff ff       	call   c0010500 <Device::addChild(Device*)>
c001cf59:	8b 07                	mov    eax,DWORD PTR [edi]
c001cf5b:	53                   	push   ebx
c001cf5c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf60:	6a 00                	push   0x0
c001cf62:	57                   	push   edi
c001cf63:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf66:	83 c4 20             	add    esp,0x20
c001cf69:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001cf6d:	4d                   	dec    ebp
c001cf6e:	74 0a                	je     c001cf7a <IDE::detect()+0x276>
c001cf70:	bd 01 00 00 00       	mov    ebp,0x1
c001cf75:	e9 bb fd ff ff       	jmp    c001cd35 <IDE::detect()+0x31>
c001cf7a:	4e                   	dec    esi
c001cf7b:	74 63                	je     c001cfe0 <IDE::detect()+0x2dc>
c001cf7d:	be 01 00 00 00       	mov    esi,0x1
c001cf82:	e9 ac fd ff ff       	jmp    c001cd33 <IDE::detect()+0x2f>
c001cf87:	50                   	push   eax
c001cf88:	6a 04                	push   0x4
c001cf8a:	56                   	push   esi
c001cf8b:	53                   	push   ebx
c001cf8c:	e8 05 f7 ff ff       	call   c001c696 <IDE::read(unsigned char, unsigned char)>
c001cf91:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001cf95:	83 c4 0c             	add    esp,0xc
c001cf98:	6a 05                	push   0x5
c001cf9a:	56                   	push   esi
c001cf9b:	53                   	push   ebx
c001cf9c:	e8 f5 f6 ff ff       	call   c001c696 <IDE::read(unsigned char, unsigned char)>
c001cfa1:	83 c4 10             	add    esp,0x10
c001cfa4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001cfa8:	80 fa 14             	cmp    dl,0x14
c001cfab:	75 04                	jne    c001cfb1 <IDE::detect()+0x2ad>
c001cfad:	3c eb                	cmp    al,0xeb
c001cfaf:	eb 07                	jmp    c001cfb8 <IDE::detect()+0x2b4>
c001cfb1:	3c 96                	cmp    al,0x96
c001cfb3:	75 b8                	jne    c001cf6d <IDE::detect()+0x269>
c001cfb5:	80 fa 69             	cmp    dl,0x69
c001cfb8:	75 b3                	jne    c001cf6d <IDE::detect()+0x269>
c001cfba:	68 a1 00 00 00       	push   0xa1
c001cfbf:	6a 07                	push   0x7
c001cfc1:	56                   	push   esi
c001cfc2:	53                   	push   ebx
c001cfc3:	e8 0e f6 ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfc8:	5f                   	pop    edi
c001cfc9:	58                   	pop    eax
c001cfca:	6a 00                	push   0x0
c001cfcc:	68 40 42 0f 00       	push   0xf4240
c001cfd1:	e8 50 bd ff ff       	call   c0018d26 <nanoSleep(unsigned long long)>
c001cfd6:	83 c4 10             	add    esp,0x10
c001cfd9:	b1 01                	mov    cl,0x1
c001cfdb:	e9 4a fe ff ff       	jmp    c001ce2a <IDE::detect()+0x126>
c001cfe0:	81 c4 1c 02 00 00    	add    esp,0x21c
c001cfe6:	5b                   	pop    ebx
c001cfe7:	5e                   	pop    esi
c001cfe8:	5f                   	pop    edi
c001cfe9:	5d                   	pop    ebp
c001cfea:	c3                   	ret    
c001cfeb:	90                   	nop

c001cfec <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001cfec:	55                   	push   ebp
c001cfed:	57                   	push   edi
c001cfee:	56                   	push   esi
c001cfef:	53                   	push   ebx
c001cff0:	83 ec 1c             	sub    esp,0x1c
c001cff3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001cff7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001cffb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001cfff:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d003:	88 c3                	mov    bl,al
c001d005:	84 c0                	test   al,al
c001d007:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d00b:	0f 84 67 01 00 00    	je     c001d178 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001d011:	83 ec 0c             	sub    esp,0xc
c001d014:	68 a3 31 02 c0       	push   0xc00231a3
c001d019:	e8 d7 20 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001d01e:	83 c4 10             	add    esp,0x10
c001d021:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d025:	3c 01                	cmp    al,0x1
c001d027:	75 17                	jne    c001d040 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001d029:	83 ec 0c             	sub    esp,0xc
c001d02c:	b3 13                	mov    bl,0x13
c001d02e:	68 af 31 02 c0       	push   0xc00231af
c001d033:	e8 bd 20 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001d038:	83 c4 10             	add    esp,0x10
c001d03b:	e9 25 01 00 00       	jmp    c001d165 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d040:	3c 02                	cmp    al,0x2
c001d042:	0f 85 ef 00 00 00    	jne    c001d137 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001d048:	d1 e6                	shl    esi,1
c001d04a:	09 ee                	or     esi,ebp
c001d04c:	52                   	push   edx
c001d04d:	89 f0                	mov    eax,esi
c001d04f:	6a 01                	push   0x1
c001d051:	0f b6 f0             	movzx  esi,al
c001d054:	c1 e6 06             	shl    esi,0x6
c001d057:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001d05f:	50                   	push   eax
c001d060:	57                   	push   edi
c001d061:	e8 30 f6 ff ff       	call   c001c696 <IDE::read(unsigned char, unsigned char)>
c001d066:	83 c4 10             	add    esp,0x10
c001d069:	89 c6                	mov    esi,eax
c001d06b:	a8 01                	test   al,0x1
c001d06d:	74 12                	je     c001d081 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001d06f:	83 ec 0c             	sub    esp,0xc
c001d072:	b3 07                	mov    bl,0x7
c001d074:	68 c4 31 02 c0       	push   0xc00231c4
c001d079:	e8 77 20 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001d07e:	83 c4 10             	add    esp,0x10
c001d081:	f7 c6 02 00 00 00    	test   esi,0x2
c001d087:	74 12                	je     c001d09b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001d089:	83 ec 0c             	sub    esp,0xc
c001d08c:	b3 03                	mov    bl,0x3
c001d08e:	68 e2 31 02 c0       	push   0xc00231e2
c001d093:	e8 5d 20 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001d098:	83 c4 10             	add    esp,0x10
c001d09b:	f7 c6 04 00 00 00    	test   esi,0x4
c001d0a1:	74 12                	je     c001d0b5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001d0a3:	83 ec 0c             	sub    esp,0xc
c001d0a6:	b3 14                	mov    bl,0x14
c001d0a8:	68 02 32 02 c0       	push   0xc0023202
c001d0ad:	e8 43 20 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001d0b2:	83 c4 10             	add    esp,0x10
c001d0b5:	f7 c6 08 00 00 00    	test   esi,0x8
c001d0bb:	74 12                	je     c001d0cf <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001d0bd:	83 ec 0c             	sub    esp,0xc
c001d0c0:	b3 03                	mov    bl,0x3
c001d0c2:	68 e2 31 02 c0       	push   0xc00231e2
c001d0c7:	e8 29 20 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001d0cc:	83 c4 10             	add    esp,0x10
c001d0cf:	f7 c6 10 00 00 00    	test   esi,0x10
c001d0d5:	74 12                	je     c001d0e9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001d0d7:	83 ec 0c             	sub    esp,0xc
c001d0da:	b3 15                	mov    bl,0x15
c001d0dc:	68 1a 32 02 c0       	push   0xc002321a
c001d0e1:	e8 0f 20 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001d0e6:	83 c4 10             	add    esp,0x10
c001d0e9:	f7 c6 20 00 00 00    	test   esi,0x20
c001d0ef:	74 12                	je     c001d103 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001d0f1:	83 ec 0c             	sub    esp,0xc
c001d0f4:	b3 03                	mov    bl,0x3
c001d0f6:	68 e2 31 02 c0       	push   0xc00231e2
c001d0fb:	e8 f5 1f ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001d100:	83 c4 10             	add    esp,0x10
c001d103:	f7 c6 40 00 00 00    	test   esi,0x40
c001d109:	74 12                	je     c001d11d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001d10b:	83 ec 0c             	sub    esp,0xc
c001d10e:	b3 16                	mov    bl,0x16
c001d110:	68 34 32 02 c0       	push   0xc0023234
c001d115:	e8 db 1f ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001d11a:	83 c4 10             	add    esp,0x10
c001d11d:	89 f0                	mov    eax,esi
c001d11f:	84 c0                	test   al,al
c001d121:	79 42                	jns    c001d165 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d123:	83 ec 0c             	sub    esp,0xc
c001d126:	b3 0d                	mov    bl,0xd
c001d128:	68 55 32 02 c0       	push   0xc0023255
c001d12d:	e8 c3 1f ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001d132:	83 c4 10             	add    esp,0x10
c001d135:	eb 2e                	jmp    c001d165 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d137:	3c 03                	cmp    al,0x3
c001d139:	75 14                	jne    c001d14f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001d13b:	83 ec 0c             	sub    esp,0xc
c001d13e:	b3 17                	mov    bl,0x17
c001d140:	68 69 32 02 c0       	push   0xc0023269
c001d145:	e8 ab 1f ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001d14a:	83 c4 10             	add    esp,0x10
c001d14d:	eb 16                	jmp    c001d165 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d14f:	3c 04                	cmp    al,0x4
c001d151:	75 12                	jne    c001d165 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d153:	83 ec 0c             	sub    esp,0xc
c001d156:	b3 08                	mov    bl,0x8
c001d158:	68 7f 32 02 c0       	push   0xc002327f
c001d15d:	e8 93 1f ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001d162:	83 c4 10             	add    esp,0x10
c001d165:	50                   	push   eax
c001d166:	50                   	push   eax
c001d167:	0f b6 c3             	movzx  eax,bl
c001d16a:	50                   	push   eax
c001d16b:	68 97 32 02 c0       	push   0xc0023297
c001d170:	e8 80 1f ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001d175:	83 c4 10             	add    esp,0x10
c001d178:	83 c4 1c             	add    esp,0x1c
c001d17b:	88 d8                	mov    al,bl
c001d17d:	5b                   	pop    ebx
c001d17e:	5e                   	pop    esi
c001d17f:	5f                   	pop    edi
c001d180:	5d                   	pop    ebp
c001d181:	c3                   	ret    

c001d182 <IDE::polling(unsigned char, unsigned int)>:
c001d182:	57                   	push   edi
c001d183:	56                   	push   esi
c001d184:	53                   	push   ebx
c001d185:	bb 04 00 00 00       	mov    ebx,0x4
c001d18a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d18e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d193:	52                   	push   edx
c001d194:	6a 0c                	push   0xc
c001d196:	56                   	push   esi
c001d197:	57                   	push   edi
c001d198:	e8 f9 f4 ff ff       	call   c001c696 <IDE::read(unsigned char, unsigned char)>
c001d19d:	83 c4 10             	add    esp,0x10
c001d1a0:	4b                   	dec    ebx
c001d1a1:	75 f0                	jne    c001d193 <IDE::polling(unsigned char, unsigned int)+0x11>
c001d1a3:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d1a8:	50                   	push   eax
c001d1a9:	6a 0c                	push   0xc
c001d1ab:	56                   	push   esi
c001d1ac:	57                   	push   edi
c001d1ad:	e8 e4 f4 ff ff       	call   c001c696 <IDE::read(unsigned char, unsigned char)>
c001d1b2:	83 c4 10             	add    esp,0x10
c001d1b5:	a8 01                	test   al,0x1
c001d1b7:	74 12                	je     c001d1cb <IDE::polling(unsigned char, unsigned int)+0x49>
c001d1b9:	83 ec 0c             	sub    esp,0xc
c001d1bc:	68 b1 32 02 c0       	push   0xc00232b1
c001d1c1:	e8 2f 1f ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001d1c6:	83 c4 10             	add    esp,0x10
c001d1c9:	eb 17                	jmp    c001d1e2 <IDE::polling(unsigned char, unsigned int)+0x60>
c001d1cb:	a8 20                	test   al,0x20
c001d1cd:	75 0f                	jne    c001d1de <IDE::polling(unsigned char, unsigned int)+0x5c>
c001d1cf:	4b                   	dec    ebx
c001d1d0:	74 10                	je     c001d1e2 <IDE::polling(unsigned char, unsigned int)+0x60>
c001d1d2:	84 c0                	test   al,al
c001d1d4:	78 d2                	js     c001d1a8 <IDE::polling(unsigned char, unsigned int)+0x26>
c001d1d6:	a8 08                	test   al,0x8
c001d1d8:	74 ce                	je     c001d1a8 <IDE::polling(unsigned char, unsigned int)+0x26>
c001d1da:	31 c0                	xor    eax,eax
c001d1dc:	eb 06                	jmp    c001d1e4 <IDE::polling(unsigned char, unsigned int)+0x62>
c001d1de:	b0 01                	mov    al,0x1
c001d1e0:	eb 02                	jmp    c001d1e4 <IDE::polling(unsigned char, unsigned int)+0x62>
c001d1e2:	b0 02                	mov    al,0x2
c001d1e4:	5b                   	pop    ebx
c001d1e5:	5e                   	pop    esi
c001d1e6:	5f                   	pop    edi
c001d1e7:	c3                   	ret    

c001d1e8 <ATA::close(int, int, void*)>:
c001d1e8:	83 ec 0c             	sub    esp,0xc
c001d1eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1ef:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d1f5:	85 c0                	test   eax,eax
c001d1f7:	74 0c                	je     c001d205 <ATA::close(int, int, void*)+0x1d>
c001d1f9:	83 ec 0c             	sub    esp,0xc
c001d1fc:	8b 10                	mov    edx,DWORD PTR [eax]
c001d1fe:	50                   	push   eax
c001d1ff:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d202:	83 c4 10             	add    esp,0x10
c001d205:	31 c0                	xor    eax,eax
c001d207:	83 c4 0c             	add    esp,0xc
c001d20a:	c3                   	ret    
c001d20b:	90                   	nop

c001d20c <ATA::powerSaving(PowerSavingLevel)>:
c001d20c:	c3                   	ret    
c001d20d:	90                   	nop

c001d20e <ATA::ATA()>:
c001d20e:	83 ec 0c             	sub    esp,0xc
c001d211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d215:	83 ec 04             	sub    esp,0x4
c001d218:	68 00 02 00 00       	push   0x200
c001d21d:	68 f4 32 02 c0       	push   0xc00232f4
c001d222:	50                   	push   eax
c001d223:	e8 de 36 ff ff       	call   c0010906 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d228:	83 c4 10             	add    esp,0x10
c001d22b:	ba 20 33 02 c0       	mov    edx,0xc0023320
c001d230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d234:	89 10                	mov    DWORD PTR [eax],edx
c001d236:	90                   	nop
c001d237:	83 c4 0c             	add    esp,0xc
c001d23a:	c3                   	ret    
c001d23b:	90                   	nop

c001d23c <ATA::flush(bool)>:
c001d23c:	53                   	push   ebx
c001d23d:	83 ec 08             	sub    esp,0x8
c001d240:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001d245:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d249:	19 c0                	sbb    eax,eax
c001d24b:	83 e0 fd             	and    eax,0xfffffffd
c001d24e:	05 ea 00 00 00       	add    eax,0xea
c001d253:	50                   	push   eax
c001d254:	6a 07                	push   0x7
c001d256:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d25d:	50                   	push   eax
c001d25e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d264:	e8 6d f3 ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d269:	83 c4 0c             	add    esp,0xc
c001d26c:	6a 00                	push   0x0
c001d26e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d275:	50                   	push   eax
c001d276:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d27c:	e8 01 ff ff ff       	call   c001d182 <IDE::polling(unsigned char, unsigned int)>
c001d281:	83 c4 18             	add    esp,0x18
c001d284:	5b                   	pop    ebx
c001d285:	c3                   	ret    

c001d286 <ATA::readyForCommand()>:
c001d286:	56                   	push   esi
c001d287:	53                   	push   ebx
c001d288:	31 db                	xor    ebx,ebx
c001d28a:	50                   	push   eax
c001d28b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d28f:	50                   	push   eax
c001d290:	6a 0c                	push   0xc
c001d292:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d299:	50                   	push   eax
c001d29a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d2a0:	e8 f1 f3 ff ff       	call   c001c696 <IDE::read(unsigned char, unsigned char)>
c001d2a5:	83 c4 10             	add    esp,0x10
c001d2a8:	a8 88                	test   al,0x88
c001d2aa:	74 23                	je     c001d2cf <ATA::readyForCommand()+0x49>
c001d2ac:	43                   	inc    ebx
c001d2ad:	83 fb 63             	cmp    ebx,0x63
c001d2b0:	7e dd                	jle    c001d28f <ATA::readyForCommand()+0x9>
c001d2b2:	51                   	push   ecx
c001d2b3:	51                   	push   ecx
c001d2b4:	6a 00                	push   0x0
c001d2b6:	68 40 42 0f 00       	push   0xf4240
c001d2bb:	e8 66 ba ff ff       	call   c0018d26 <nanoSleep(unsigned long long)>
c001d2c0:	83 c4 10             	add    esp,0x10
c001d2c3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d2c9:	75 c4                	jne    c001d28f <ATA::readyForCommand()+0x9>
c001d2cb:	31 c0                	xor    eax,eax
c001d2cd:	eb 02                	jmp    c001d2d1 <ATA::readyForCommand()+0x4b>
c001d2cf:	b0 01                	mov    al,0x1
c001d2d1:	5a                   	pop    edx
c001d2d2:	5b                   	pop    ebx
c001d2d3:	5e                   	pop    esi
c001d2d4:	c3                   	ret    
c001d2d5:	90                   	nop

c001d2d6 <ATA::access(unsigned long long, int, void*, bool)>:
c001d2d6:	55                   	push   ebp
c001d2d7:	57                   	push   edi
c001d2d8:	56                   	push   esi
c001d2d9:	53                   	push   ebx
c001d2da:	83 ec 2c             	sub    esp,0x2c
c001d2dd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d2e1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d2e5:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d2e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2ed:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d2f1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001d2f5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d2f9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d2ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d303:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d309:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d30d:	c1 e0 06             	shl    eax,0x6
c001d310:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d318:	74 5d                	je     c001d377 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001d31a:	89 fa                	mov    edx,edi
c001d31c:	89 f0                	mov    eax,esi
c001d31e:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001d322:	c1 ea 1c             	shr    edx,0x1c
c001d325:	89 d1                	mov    ecx,edx
c001d327:	09 c1                	or     ecx,eax
c001d329:	74 25                	je     c001d350 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001d32b:	31 ed                	xor    ebp,ebp
c001d32d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d334:	89 fa                	mov    edx,edi
c001d336:	89 f0                	mov    eax,esi
c001d338:	0f ad d0             	shrd   eax,edx,cl
c001d33b:	d3 ea                	shr    edx,cl
c001d33d:	f6 c1 20             	test   cl,0x20
c001d340:	74 02                	je     c001d344 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001d342:	89 d0                	mov    eax,edx
c001d344:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d348:	45                   	inc    ebp
c001d349:	83 fd 06             	cmp    ebp,0x6
c001d34c:	75 df                	jne    c001d32d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001d34e:	eb 76                	jmp    c001d3c6 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001d350:	89 f0                	mov    eax,esi
c001d352:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d357:	89 fa                	mov    edx,edi
c001d359:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d360:	0f ac d0 10          	shrd   eax,edx,0x10
c001d364:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d369:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d36d:	c1 ee 18             	shr    esi,0x18
c001d370:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001d375:	eb 56                	jmp    c001d3cd <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001d377:	6a 00                	push   0x0
c001d379:	6a 3f                	push   0x3f
c001d37b:	57                   	push   edi
c001d37c:	56                   	push   esi
c001d37d:	e8 da 1e 00 00       	call   c001f25c <__umoddi3>
c001d382:	83 c4 10             	add    esp,0x10
c001d385:	40                   	inc    eax
c001d386:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d38a:	6a 00                	push   0x0
c001d38c:	68 f0 03 00 00       	push   0x3f0
c001d391:	57                   	push   edi
c001d392:	56                   	push   esi
c001d393:	e8 c4 1d 00 00       	call   c001f15c <__udivdi3>
c001d398:	83 c4 10             	add    esp,0x10
c001d39b:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d3a0:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d3a7:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d3ac:	6a 00                	push   0x0
c001d3ae:	6a 3f                	push   0x3f
c001d3b0:	57                   	push   edi
c001d3b1:	56                   	push   esi
c001d3b2:	e8 a5 1d 00 00       	call   c001f15c <__udivdi3>
c001d3b7:	83 c4 10             	add    esp,0x10
c001d3ba:	89 c6                	mov    esi,eax
c001d3bc:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001d3c1:	83 e6 0f             	and    esi,0xf
c001d3c4:	eb 07                	jmp    c001d3cd <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001d3c6:	31 f6                	xor    esi,esi
c001d3c8:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001d3cd:	bf 01 00 00 00       	mov    edi,0x1
c001d3d2:	50                   	push   eax
c001d3d3:	6a 00                	push   0x0
c001d3d5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d3dc:	50                   	push   eax
c001d3dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d3e1:	e8 fc f3 ff ff       	call   c001c7e2 <IDE::enableIRQs(unsigned char, bool)>
c001d3e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3e9:	e8 98 fe ff ff       	call   c001d286 <ATA::readyForCommand()>
c001d3ee:	83 c4 10             	add    esp,0x10
c001d3f1:	84 c0                	test   al,al
c001d3f3:	0f 84 50 02 00 00    	je     c001d649 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001d3f9:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d3ff:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d405:	c1 e0 04             	shl    eax,0x4
c001d408:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001d40f:	09 c6                	or     esi,eax
c001d411:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001d416:	75 05                	jne    c001d41d <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001d418:	83 ce a0             	or     esi,0xffffffa0
c001d41b:	eb 03                	jmp    c001d420 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001d41d:	83 ce e0             	or     esi,0xffffffe0
c001d420:	89 f0                	mov    eax,esi
c001d422:	0f b6 f0             	movzx  esi,al
c001d425:	56                   	push   esi
c001d426:	6a 06                	push   0x6
c001d428:	51                   	push   ecx
c001d429:	52                   	push   edx
c001d42a:	e8 a7 f1 ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d42f:	83 c4 10             	add    esp,0x10
c001d432:	6a 00                	push   0x0
c001d434:	6a 01                	push   0x1
c001d436:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d43d:	50                   	push   eax
c001d43e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d444:	e8 8d f1 ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d449:	83 c4 10             	add    esp,0x10
c001d44c:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001d451:	75 6e                	jne    c001d4c1 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001d453:	6a 00                	push   0x0
c001d455:	6a 08                	push   0x8
c001d457:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d45e:	50                   	push   eax
c001d45f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d465:	e8 6c f1 ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d46a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d46f:	50                   	push   eax
c001d470:	6a 09                	push   0x9
c001d472:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d479:	50                   	push   eax
c001d47a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d480:	e8 51 f1 ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d485:	83 c4 20             	add    esp,0x20
c001d488:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d48d:	50                   	push   eax
c001d48e:	6a 0a                	push   0xa
c001d490:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d497:	50                   	push   eax
c001d498:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d49e:	e8 33 f1 ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4a3:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d4a8:	50                   	push   eax
c001d4a9:	6a 0b                	push   0xb
c001d4ab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d4b2:	50                   	push   eax
c001d4b3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d4b9:	e8 18 f1 ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4be:	83 c4 20             	add    esp,0x20
c001d4c1:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d4c6:	50                   	push   eax
c001d4c7:	6a 02                	push   0x2
c001d4c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d4d0:	50                   	push   eax
c001d4d1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d4d7:	e8 fa f0 ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4dc:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d4e1:	50                   	push   eax
c001d4e2:	6a 03                	push   0x3
c001d4e4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d4eb:	50                   	push   eax
c001d4ec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d4f2:	e8 df f0 ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4f7:	83 c4 20             	add    esp,0x20
c001d4fa:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d4ff:	50                   	push   eax
c001d500:	6a 04                	push   0x4
c001d502:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d509:	50                   	push   eax
c001d50a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d510:	e8 c1 f0 ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d515:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d51a:	50                   	push   eax
c001d51b:	6a 05                	push   0x5
c001d51d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d524:	50                   	push   eax
c001d525:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d52b:	e8 a6 f0 ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d530:	83 c4 20             	add    esp,0x20
c001d533:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001d538:	0f 94 c0             	sete   al
c001d53b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d540:	74 09                	je     c001d54b <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001d542:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001d549:	eb 07                	jmp    c001d552 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001d54b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001d552:	0f b6 c0             	movzx  eax,al
c001d555:	50                   	push   eax
c001d556:	6a 07                	push   0x7
c001d558:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d55f:	50                   	push   eax
c001d560:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d566:	e8 6b f0 ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d56b:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d56f:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d573:	83 c4 10             	add    esp,0x10
c001d576:	85 f6                	test   esi,esi
c001d578:	0f 84 ac 00 00 00    	je     c001d62a <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001d57e:	50                   	push   eax
c001d57f:	6a 01                	push   0x1
c001d581:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d588:	50                   	push   eax
c001d589:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d58f:	e8 ee fb ff ff       	call   c001d182 <IDE::polling(unsigned char, unsigned int)>
c001d594:	83 c4 10             	add    esp,0x10
c001d597:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d59d:	84 c0                	test   al,al
c001d59f:	74 20                	je     c001d5c1 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001d5a1:	0f b6 f8             	movzx  edi,al
c001d5a4:	0f b6 d2             	movzx  edx,dl
c001d5a7:	57                   	push   edi
c001d5a8:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d5af:	50                   	push   eax
c001d5b0:	52                   	push   edx
c001d5b1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d5b7:	e8 30 fa ff ff       	call   c001cfec <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d5bc:	e9 85 00 00 00       	jmp    c001d646 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001d5c1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d5c6:	74 41                	je     c001d609 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001d5c8:	31 c9                	xor    ecx,ecx
c001d5ca:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001d5ce:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d5d2:	50                   	push   eax
c001d5d3:	50                   	push   eax
c001d5d4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d5db:	50                   	push   eax
c001d5dc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d5e2:	e8 dd ef ff ff       	call   c001c5c4 <IDE::getBase(unsigned char)>
c001d5e7:	89 c2                	mov    edx,eax
c001d5e9:	89 e8                	mov    eax,ebp
c001d5eb:	66 ef                	out    dx,ax
c001d5ed:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d5f1:	83 c4 10             	add    esp,0x10
c001d5f4:	41                   	inc    ecx
c001d5f5:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d5fb:	75 cd                	jne    c001d5ca <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001d5fd:	4e                   	dec    esi
c001d5fe:	81 c7 00 02 00 00    	add    edi,0x200
c001d604:	e9 6d ff ff ff       	jmp    c001d576 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001d609:	0f b6 d2             	movzx  edx,dl
c001d60c:	51                   	push   ecx
c001d60d:	51                   	push   ecx
c001d60e:	52                   	push   edx
c001d60f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d615:	e8 aa ef ff ff       	call   c001c5c4 <IDE::getBase(unsigned char)>
c001d61a:	b9 00 01 00 00       	mov    ecx,0x100
c001d61f:	89 c2                	mov    edx,eax
c001d621:	fc                   	cld    
c001d622:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d625:	83 c4 10             	add    esp,0x10
c001d628:	eb d3                	jmp    c001d5fd <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001d62a:	31 ff                	xor    edi,edi
c001d62c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d631:	74 16                	je     c001d649 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001d633:	50                   	push   eax
c001d634:	50                   	push   eax
c001d635:	31 c0                	xor    eax,eax
c001d637:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001d63c:	0f 94 c0             	sete   al
c001d63f:	50                   	push   eax
c001d640:	53                   	push   ebx
c001d641:	e8 f6 fb ff ff       	call   c001d23c <ATA::flush(bool)>
c001d646:	83 c4 10             	add    esp,0x10
c001d649:	83 c4 2c             	add    esp,0x2c
c001d64c:	89 f8                	mov    eax,edi
c001d64e:	5b                   	pop    ebx
c001d64f:	5e                   	pop    esi
c001d650:	5f                   	pop    edi
c001d651:	5d                   	pop    ebp
c001d652:	c3                   	ret    
c001d653:	90                   	nop

c001d654 <ATA::read(unsigned long long, int, void*)>:
c001d654:	57                   	push   edi
c001d655:	b8 04 00 00 00       	mov    eax,0x4
c001d65a:	56                   	push   esi
c001d65b:	53                   	push   ebx
c001d65c:	83 ec 10             	sub    esp,0x10
c001d65f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d663:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d667:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d66a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d66e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d672:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d678:	77 3b                	ja     c001d6b5 <ATA::read(unsigned long long, int, void*)+0x61>
c001d67a:	b8 06 00 00 00       	mov    eax,0x6
c001d67f:	85 d2                	test   edx,edx
c001d681:	74 32                	je     c001d6b5 <ATA::read(unsigned long long, int, void*)+0x61>
c001d683:	50                   	push   eax
c001d684:	50                   	push   eax
c001d685:	6a 00                	push   0x0
c001d687:	52                   	push   edx
c001d688:	53                   	push   ebx
c001d689:	57                   	push   edi
c001d68a:	56                   	push   esi
c001d68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d68f:	e8 42 fc ff ff       	call   c001d2d6 <ATA::access(unsigned long long, int, void*, bool)>
c001d694:	83 c4 20             	add    esp,0x20
c001d697:	85 c0                	test   eax,eax
c001d699:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d69d:	75 11                	jne    c001d6b0 <ATA::read(unsigned long long, int, void*)+0x5c>
c001d69f:	01 1d 84 60 02 c0    	add    DWORD PTR ds:0xc0026084,ebx
c001d6a5:	e8 36 f9 fe ff       	call   c000cfe0 <VgaText::updateDiskUsage()>
c001d6aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d6ae:	eb 05                	jmp    c001d6b5 <ATA::read(unsigned long long, int, void*)+0x61>
c001d6b0:	b8 01 00 00 00       	mov    eax,0x1
c001d6b5:	83 c4 10             	add    esp,0x10
c001d6b8:	5b                   	pop    ebx
c001d6b9:	5e                   	pop    esi
c001d6ba:	5f                   	pop    edi
c001d6bb:	c3                   	ret    

c001d6bc <ATA::write(unsigned long long, int, void*)>:
c001d6bc:	57                   	push   edi
c001d6bd:	b8 04 00 00 00       	mov    eax,0x4
c001d6c2:	56                   	push   esi
c001d6c3:	53                   	push   ebx
c001d6c4:	83 ec 10             	sub    esp,0x10
c001d6c7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d6cb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d6cf:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d6d2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d6d6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d6da:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d6e0:	77 3b                	ja     c001d71d <ATA::write(unsigned long long, int, void*)+0x61>
c001d6e2:	b8 06 00 00 00       	mov    eax,0x6
c001d6e7:	85 d2                	test   edx,edx
c001d6e9:	74 32                	je     c001d71d <ATA::write(unsigned long long, int, void*)+0x61>
c001d6eb:	50                   	push   eax
c001d6ec:	50                   	push   eax
c001d6ed:	6a 01                	push   0x1
c001d6ef:	52                   	push   edx
c001d6f0:	53                   	push   ebx
c001d6f1:	57                   	push   edi
c001d6f2:	56                   	push   esi
c001d6f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d6f7:	e8 da fb ff ff       	call   c001d2d6 <ATA::access(unsigned long long, int, void*, bool)>
c001d6fc:	83 c4 20             	add    esp,0x20
c001d6ff:	85 c0                	test   eax,eax
c001d701:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d705:	75 11                	jne    c001d718 <ATA::write(unsigned long long, int, void*)+0x5c>
c001d707:	01 1d 80 60 02 c0    	add    DWORD PTR ds:0xc0026080,ebx
c001d70d:	e8 ce f8 fe ff       	call   c000cfe0 <VgaText::updateDiskUsage()>
c001d712:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d716:	eb 05                	jmp    c001d71d <ATA::write(unsigned long long, int, void*)+0x61>
c001d718:	b8 01 00 00 00       	mov    eax,0x1
c001d71d:	83 c4 10             	add    esp,0x10
c001d720:	5b                   	pop    ebx
c001d721:	5e                   	pop    esi
c001d722:	5f                   	pop    edi
c001d723:	c3                   	ret    

c001d724 <ATA::detectCHS()>:
c001d724:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d728:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d72e:	c1 e0 06             	shl    eax,0x6
c001d731:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d737:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d741:	c7 44 24 04 03 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023303
c001d749:	e9 3c 81 ff ff       	jmp    c001588a <Krnl::panic(char const*)>

c001d74e <ATA::open(int, int, void*)>:
c001d74e:	53                   	push   ebx
c001d74f:	83 ec 08             	sub    esp,0x8
c001d752:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d756:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d75a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d75e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d764:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d76a:	c1 e0 06             	shl    eax,0x6
c001d76d:	01 d0                	add    eax,edx
c001d76f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d776:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d77c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d783:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d78d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d793:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d79a:	75 0c                	jne    c001d7a8 <ATA::open(int, int, void*)+0x5a>
c001d79c:	83 ec 0c             	sub    esp,0xc
c001d79f:	53                   	push   ebx
c001d7a0:	e8 7f ff ff ff       	call   c001d724 <ATA::detectCHS()>
c001d7a5:	83 c4 10             	add    esp,0x10
c001d7a8:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d7ae:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d7b4:	c1 e0 06             	shl    eax,0x6
c001d7b7:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d7be:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d7c8:	d1 e8                	shr    eax,1
c001d7ca:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d7d0:	6a 04                	push   0x4
c001d7d2:	6a 0c                	push   0xc
c001d7d4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7db:	50                   	push   eax
c001d7dc:	52                   	push   edx
c001d7dd:	e8 f4 ed ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7e2:	90                   	nop
c001d7e3:	90                   	nop
c001d7e4:	6a 00                	push   0x0
c001d7e6:	6a 0c                	push   0xc
c001d7e8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7ef:	50                   	push   eax
c001d7f0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7f6:	e8 db ed ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7fb:	83 c4 14             	add    esp,0x14
c001d7fe:	53                   	push   ebx
c001d7ff:	e8 6a 31 ff ff       	call   c001096e <PhysicalDisk::startCache()>
c001d804:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d807:	e8 2a 51 ff ff       	call   c0012936 <createPartitionsForDisk(PhysicalDisk*)>
c001d80c:	31 c0                	xor    eax,eax
c001d80e:	83 c4 18             	add    esp,0x18
c001d811:	5b                   	pop    ebx
c001d812:	c3                   	ret    
c001d813:	90                   	nop

c001d814 <ATAPI::write(unsigned long long, int, void*)>:
c001d814:	b8 03 00 00 00       	mov    eax,0x3
c001d819:	c3                   	ret    

c001d81a <ATAPI::close(int, int, void*)>:
c001d81a:	83 ec 0c             	sub    esp,0xc
c001d81d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d821:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d827:	85 c0                	test   eax,eax
c001d829:	74 0c                	je     c001d837 <ATAPI::close(int, int, void*)+0x1d>
c001d82b:	83 ec 0c             	sub    esp,0xc
c001d82e:	8b 10                	mov    edx,DWORD PTR [eax]
c001d830:	50                   	push   eax
c001d831:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d834:	83 c4 10             	add    esp,0x10
c001d837:	31 c0                	xor    eax,eax
c001d839:	83 c4 0c             	add    esp,0xc
c001d83c:	c3                   	ret    
c001d83d:	90                   	nop

c001d83e <ATAPI::ATAPI()>:
c001d83e:	83 ec 0c             	sub    esp,0xc
c001d841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d845:	83 ec 04             	sub    esp,0x4
c001d848:	68 00 08 00 00       	push   0x800
c001d84d:	68 4c 33 02 c0       	push   0xc002334c
c001d852:	50                   	push   eax
c001d853:	e8 ae 30 ff ff       	call   c0010906 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d858:	83 c4 10             	add    esp,0x10
c001d85b:	ba 8c 33 02 c0       	mov    edx,0xc002338c
c001d860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d864:	89 10                	mov    DWORD PTR [eax],edx
c001d866:	90                   	nop
c001d867:	83 c4 0c             	add    esp,0xc
c001d86a:	c3                   	ret    
c001d86b:	90                   	nop

c001d86c <ATAPI::readyForCommand()>:
c001d86c:	56                   	push   esi
c001d86d:	53                   	push   ebx
c001d86e:	31 db                	xor    ebx,ebx
c001d870:	50                   	push   eax
c001d871:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d875:	50                   	push   eax
c001d876:	6a 0c                	push   0xc
c001d878:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d87f:	50                   	push   eax
c001d880:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d886:	e8 0b ee ff ff       	call   c001c696 <IDE::read(unsigned char, unsigned char)>
c001d88b:	83 c4 10             	add    esp,0x10
c001d88e:	a8 88                	test   al,0x88
c001d890:	74 23                	je     c001d8b5 <ATAPI::readyForCommand()+0x49>
c001d892:	43                   	inc    ebx
c001d893:	83 fb 63             	cmp    ebx,0x63
c001d896:	7e dd                	jle    c001d875 <ATAPI::readyForCommand()+0x9>
c001d898:	51                   	push   ecx
c001d899:	51                   	push   ecx
c001d89a:	6a 00                	push   0x0
c001d89c:	68 40 42 0f 00       	push   0xf4240
c001d8a1:	e8 80 b4 ff ff       	call   c0018d26 <nanoSleep(unsigned long long)>
c001d8a6:	83 c4 10             	add    esp,0x10
c001d8a9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d8af:	75 c4                	jne    c001d875 <ATAPI::readyForCommand()+0x9>
c001d8b1:	31 c0                	xor    eax,eax
c001d8b3:	eb 02                	jmp    c001d8b7 <ATAPI::readyForCommand()+0x4b>
c001d8b5:	b0 01                	mov    al,0x1
c001d8b7:	5a                   	pop    edx
c001d8b8:	5b                   	pop    ebx
c001d8b9:	5e                   	pop    esi
c001d8ba:	c3                   	ret    
c001d8bb:	90                   	nop

c001d8bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d8bc:	55                   	push   ebp
c001d8bd:	57                   	push   edi
c001d8be:	56                   	push   esi
c001d8bf:	53                   	push   ebx
c001d8c0:	83 ec 20             	sub    esp,0x20
c001d8c3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d8c7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d8cb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d8cf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d8d3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d8d7:	6a 01                	push   0x1
c001d8d9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d8e0:	50                   	push   eax
c001d8e1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d8e7:	e8 f6 ee ff ff       	call   c001c7e2 <IDE::enableIRQs(unsigned char, bool)>
c001d8ec:	5e                   	pop    esi
c001d8ed:	58                   	pop    eax
c001d8ee:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d8f5:	50                   	push   eax
c001d8f6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d8fc:	e8 af ec ff ff       	call   c001c5b0 <IDE::prepareInterrupt(unsigned char)>
c001d901:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d904:	e8 63 ff ff ff       	call   c001d86c <ATAPI::readyForCommand()>
c001d909:	83 c4 10             	add    esp,0x10
c001d90c:	84 c0                	test   al,al
c001d90e:	75 0a                	jne    c001d91a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d910:	bb 01 00 00 00       	mov    ebx,0x1
c001d915:	e9 57 02 00 00       	jmp    c001db71 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d91a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001d920:	c1 e0 04             	shl    eax,0x4
c001d923:	0f b6 c0             	movzx  eax,al
c001d926:	50                   	push   eax
c001d927:	6a 06                	push   0x6
c001d929:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d930:	50                   	push   eax
c001d931:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d937:	e8 9a ec ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d93c:	6a 00                	push   0x0
c001d93e:	6a 01                	push   0x1
c001d940:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d947:	50                   	push   eax
c001d948:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d94e:	e8 83 ec ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d953:	83 c4 20             	add    esp,0x20
c001d956:	0f b6 c3             	movzx  eax,bl
c001d959:	0f b6 df             	movzx  ebx,bh
c001d95c:	50                   	push   eax
c001d95d:	6a 04                	push   0x4
c001d95f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d966:	50                   	push   eax
c001d967:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d96d:	e8 64 ec ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d972:	53                   	push   ebx
c001d973:	6a 05                	push   0x5
c001d975:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d97c:	50                   	push   eax
c001d97d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d983:	e8 4e ec ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d988:	83 c4 20             	add    esp,0x20
c001d98b:	68 a0 00 00 00       	push   0xa0
c001d990:	6a 07                	push   0x7
c001d992:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d999:	50                   	push   eax
c001d99a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d9a0:	e8 31 ec ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9a5:	83 c4 0c             	add    esp,0xc
c001d9a8:	6a 01                	push   0x1
c001d9aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d9b1:	50                   	push   eax
c001d9b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d9b8:	e8 c5 f7 ff ff       	call   c001d182 <IDE::polling(unsigned char, unsigned int)>
c001d9bd:	83 c4 10             	add    esp,0x10
c001d9c0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001d9c6:	84 c0                	test   al,al
c001d9c8:	74 23                	je     c001d9ed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d9ca:	0f b6 d8             	movzx  ebx,al
c001d9cd:	0f b6 d2             	movzx  edx,dl
c001d9d0:	53                   	push   ebx
c001d9d1:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001d9d8:	50                   	push   eax
c001d9d9:	52                   	push   edx
c001d9da:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d9e0:	e8 07 f6 ff ff       	call   c001cfec <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d9e5:	83 c4 10             	add    esp,0x10
c001d9e8:	e9 84 01 00 00       	jmp    c001db71 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d9ed:	0f b6 d2             	movzx  edx,dl
c001d9f0:	53                   	push   ebx
c001d9f1:	53                   	push   ebx
c001d9f2:	52                   	push   edx
c001d9f3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d9f9:	e8 c6 eb ff ff       	call   c001c5c4 <IDE::getBase(unsigned char)>
c001d9fe:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001da02:	b9 06 00 00 00       	mov    ecx,0x6
c001da07:	89 c2                	mov    edx,eax
c001da09:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001da0c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001da10:	83 c4 10             	add    esp,0x10
c001da13:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001da19:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001da20:	85 db                	test   ebx,ebx
c001da22:	0f 84 ec 00 00 00    	je     c001db14 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001da28:	51                   	push   ecx
c001da29:	51                   	push   ecx
c001da2a:	52                   	push   edx
c001da2b:	50                   	push   eax
c001da2c:	e8 13 ed ff ff       	call   c001c744 <IDE::waitInterrupt(unsigned char)>
c001da31:	83 c4 10             	add    esp,0x10
c001da34:	84 c0                	test   al,al
c001da36:	0f 84 d4 fe ff ff    	je     c001d910 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001da3c:	56                   	push   esi
c001da3d:	56                   	push   esi
c001da3e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001da45:	50                   	push   eax
c001da46:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001da4c:	e8 5f eb ff ff       	call   c001c5b0 <IDE::prepareInterrupt(unsigned char)>
c001da51:	83 c4 0c             	add    esp,0xc
c001da54:	6a 04                	push   0x4
c001da56:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001da5d:	50                   	push   eax
c001da5e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001da64:	e8 2d ec ff ff       	call   c001c696 <IDE::read(unsigned char, unsigned char)>
c001da69:	83 c4 0c             	add    esp,0xc
c001da6c:	89 c6                	mov    esi,eax
c001da6e:	6a 05                	push   0x5
c001da70:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001da77:	50                   	push   eax
c001da78:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001da7e:	e8 13 ec ff ff       	call   c001c696 <IDE::read(unsigned char, unsigned char)>
c001da83:	89 f1                	mov    ecx,esi
c001da85:	0f b6 c0             	movzx  eax,al
c001da88:	0f b6 f1             	movzx  esi,cl
c001da8b:	c1 e0 08             	shl    eax,0x8
c001da8e:	09 c6                	or     esi,eax
c001da90:	d1 fe                	sar    esi,1
c001da92:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001da96:	83 c4 10             	add    esp,0x10
c001da99:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001da9e:	74 41                	je     c001dae1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001daa0:	31 c9                	xor    ecx,ecx
c001daa2:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001daa8:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001daaf:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001dab3:	75 0a                	jne    c001dabf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001dab5:	01 c9                	add    ecx,ecx
c001dab7:	01 cd                	add    ebp,ecx
c001dab9:	4b                   	dec    ebx
c001daba:	e9 54 ff ff ff       	jmp    c001da13 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001dabf:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001dac4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dac8:	51                   	push   ecx
c001dac9:	51                   	push   ecx
c001daca:	52                   	push   edx
c001dacb:	50                   	push   eax
c001dacc:	e8 f3 ea ff ff       	call   c001c5c4 <IDE::getBase(unsigned char)>
c001dad1:	89 c2                	mov    edx,eax
c001dad3:	89 f0                	mov    eax,esi
c001dad5:	66 ef                	out    dx,ax
c001dad7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dadb:	83 c4 10             	add    esp,0x10
c001dade:	41                   	inc    ecx
c001dadf:	eb c1                	jmp    c001daa2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001dae1:	31 f6                	xor    esi,esi
c001dae3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dae9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001daf0:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001daf4:	75 06                	jne    c001dafc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001daf6:	01 f6                	add    esi,esi
c001daf8:	01 f5                	add    ebp,esi
c001dafa:	eb bd                	jmp    c001dab9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001dafc:	51                   	push   ecx
c001dafd:	51                   	push   ecx
c001dafe:	52                   	push   edx
c001daff:	50                   	push   eax
c001db00:	e8 bf ea ff ff       	call   c001c5c4 <IDE::getBase(unsigned char)>
c001db05:	89 c2                	mov    edx,eax
c001db07:	66 ed                	in     ax,dx
c001db09:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001db0e:	83 c4 10             	add    esp,0x10
c001db11:	46                   	inc    esi
c001db12:	eb cf                	jmp    c001dae3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001db14:	51                   	push   ecx
c001db15:	51                   	push   ecx
c001db16:	52                   	push   edx
c001db17:	50                   	push   eax
c001db18:	e8 27 ec ff ff       	call   c001c744 <IDE::waitInterrupt(unsigned char)>
c001db1d:	83 c4 10             	add    esp,0x10
c001db20:	84 c0                	test   al,al
c001db22:	0f 84 e8 fd ff ff    	je     c001d910 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001db28:	bb a0 86 01 00       	mov    ebx,0x186a0
c001db2d:	52                   	push   edx
c001db2e:	52                   	push   edx
c001db2f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db36:	50                   	push   eax
c001db37:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db3d:	e8 6e ea ff ff       	call   c001c5b0 <IDE::prepareInterrupt(unsigned char)>
c001db42:	83 c4 10             	add    esp,0x10
c001db45:	50                   	push   eax
c001db46:	50                   	push   eax
c001db47:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db4e:	50                   	push   eax
c001db4f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db55:	e8 6a ea ff ff       	call   c001c5c4 <IDE::getBase(unsigned char)>
c001db5a:	8d 50 07             	lea    edx,[eax+0x7]
c001db5d:	ec                   	in     al,dx
c001db5e:	83 c4 10             	add    esp,0x10
c001db61:	a8 88                	test   al,0x88
c001db63:	74 0a                	je     c001db6f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001db65:	4b                   	dec    ebx
c001db66:	75 dd                	jne    c001db45 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001db68:	bb 02 00 00 00       	mov    ebx,0x2
c001db6d:	eb 02                	jmp    c001db71 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001db6f:	31 db                	xor    ebx,ebx
c001db71:	83 c4 1c             	add    esp,0x1c
c001db74:	89 d8                	mov    eax,ebx
c001db76:	5b                   	pop    ebx
c001db77:	5e                   	pop    esi
c001db78:	5f                   	pop    edi
c001db79:	5d                   	pop    ebp
c001db7a:	c3                   	ret    
c001db7b:	90                   	nop

c001db7c <ATAPI::diskRemoved()>:
c001db7c:	83 ec 18             	sub    esp,0x18
c001db7f:	68 57 33 02 c0       	push   0xc0023357
c001db84:	e8 6c 15 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001db89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db8d:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001db94:	83 c4 1c             	add    esp,0x1c
c001db97:	c3                   	ret    

c001db98 <ATAPI::eject()>:
c001db98:	57                   	push   edi
c001db99:	b9 03 00 00 00       	mov    ecx,0x3
c001db9e:	53                   	push   ebx
c001db9f:	83 ec 14             	sub    esp,0x14
c001dba2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dba6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dbaa:	fc                   	cld    
c001dbab:	31 c0                	xor    eax,eax
c001dbad:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dbaf:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001dbb4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001dbb9:	50                   	push   eax
c001dbba:	50                   	push   eax
c001dbbb:	6a 00                	push   0x0
c001dbbd:	6a 00                	push   0x0
c001dbbf:	6a 00                	push   0x0
c001dbc1:	6a 02                	push   0x2
c001dbc3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dbc7:	50                   	push   eax
c001dbc8:	53                   	push   ebx
c001dbc9:	e8 ee fc ff ff       	call   c001d8bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dbce:	83 c4 14             	add    esp,0x14
c001dbd1:	53                   	push   ebx
c001dbd2:	e8 a5 ff ff ff       	call   c001db7c <ATAPI::diskRemoved()>
c001dbd7:	83 c4 24             	add    esp,0x24
c001dbda:	5b                   	pop    ebx
c001dbdb:	5f                   	pop    edi
c001dbdc:	c3                   	ret    
c001dbdd:	90                   	nop

c001dbde <ATAPI::diskInserted()>:
c001dbde:	53                   	push   ebx
c001dbdf:	83 ec 14             	sub    esp,0x14
c001dbe2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001dbe6:	68 6d 33 02 c0       	push   0xc002336d
c001dbeb:	e8 05 15 ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001dbf0:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001dbf7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dbfa:	e8 6f 2d ff ff       	call   c001096e <PhysicalDisk::startCache()>
c001dbff:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001dc03:	83 c4 18             	add    esp,0x18
c001dc06:	5b                   	pop    ebx
c001dc07:	e9 2a 4d ff ff       	jmp    c0012936 <createPartitionsForDisk(PhysicalDisk*)>

c001dc0c <ATAPI::detectMedia()>:
c001dc0c:	56                   	push   esi
c001dc0d:	53                   	push   ebx
c001dc0e:	83 ec 28             	sub    esp,0x28
c001dc11:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dc15:	6a 0c                	push   0xc
c001dc17:	6a 00                	push   0x0
c001dc19:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001dc1d:	56                   	push   esi
c001dc1e:	e8 97 2a fe ff       	call   c00006ba <memset>
c001dc23:	58                   	pop    eax
c001dc24:	5a                   	pop    edx
c001dc25:	6a 00                	push   0x0
c001dc27:	6a 00                	push   0x0
c001dc29:	6a 00                	push   0x0
c001dc2b:	6a 00                	push   0x0
c001dc2d:	56                   	push   esi
c001dc2e:	53                   	push   ebx
c001dc2f:	e8 88 fc ff ff       	call   c001d8bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dc34:	83 c4 1c             	add    esp,0x1c
c001dc37:	6a 0c                	push   0xc
c001dc39:	6a 00                	push   0x0
c001dc3b:	56                   	push   esi
c001dc3c:	e8 79 2a fe ff       	call   c00006ba <memset>
c001dc41:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001dc46:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001dc4b:	59                   	pop    ecx
c001dc4c:	58                   	pop    eax
c001dc4d:	6a 01                	push   0x1
c001dc4f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001dc53:	50                   	push   eax
c001dc54:	6a 00                	push   0x0
c001dc56:	6a 12                	push   0x12
c001dc58:	56                   	push   esi
c001dc59:	53                   	push   ebx
c001dc5a:	e8 5d fc ff ff       	call   c001d8bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dc5f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001dc63:	83 c4 20             	add    esp,0x20
c001dc66:	83 e0 7f             	and    eax,0x7f
c001dc69:	3c 70                	cmp    al,0x70
c001dc6b:	74 15                	je     c001dc82 <ATAPI::detectMedia()+0x76>
c001dc6d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dc74:	75 0c                	jne    c001dc82 <ATAPI::detectMedia()+0x76>
c001dc76:	83 ec 0c             	sub    esp,0xc
c001dc79:	53                   	push   ebx
c001dc7a:	e8 5f ff ff ff       	call   c001dbde <ATAPI::diskInserted()>
c001dc7f:	83 c4 10             	add    esp,0x10
c001dc82:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001dc86:	83 e0 0f             	and    eax,0xf
c001dc89:	3c 02                	cmp    al,0x2
c001dc8b:	75 1b                	jne    c001dca8 <ATAPI::detectMedia()+0x9c>
c001dc8d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001dc92:	75 2d                	jne    c001dcc1 <ATAPI::detectMedia()+0xb5>
c001dc94:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dc9b:	74 24                	je     c001dcc1 <ATAPI::detectMedia()+0xb5>
c001dc9d:	83 ec 0c             	sub    esp,0xc
c001dca0:	53                   	push   ebx
c001dca1:	e8 d6 fe ff ff       	call   c001db7c <ATAPI::diskRemoved()>
c001dca6:	eb 16                	jmp    c001dcbe <ATAPI::detectMedia()+0xb2>
c001dca8:	84 c0                	test   al,al
c001dcaa:	75 15                	jne    c001dcc1 <ATAPI::detectMedia()+0xb5>
c001dcac:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dcb3:	75 0c                	jne    c001dcc1 <ATAPI::detectMedia()+0xb5>
c001dcb5:	83 ec 0c             	sub    esp,0xc
c001dcb8:	53                   	push   ebx
c001dcb9:	e8 20 ff ff ff       	call   c001dbde <ATAPI::diskInserted()>
c001dcbe:	83 c4 10             	add    esp,0x10
c001dcc1:	83 c4 24             	add    esp,0x24
c001dcc4:	5b                   	pop    ebx
c001dcc5:	5e                   	pop    esi
c001dcc6:	c3                   	ret    
c001dcc7:	90                   	nop

c001dcc8 <ATAPI::open(int, int, void*)>:
c001dcc8:	53                   	push   ebx
c001dcc9:	83 ec 08             	sub    esp,0x8
c001dccc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dcd0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dcd4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dcd8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dcde:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001dce4:	c1 e0 06             	shl    eax,0x6
c001dce7:	01 d0                	add    eax,edx
c001dce9:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001dcf0:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001dcf6:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001dcfd:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001dd07:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dd0d:	6a 04                	push   0x4
c001dd0f:	6a 0c                	push   0xc
c001dd11:	51                   	push   ecx
c001dd12:	52                   	push   edx
c001dd13:	e8 be e8 ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd18:	90                   	nop
c001dd19:	90                   	nop
c001dd1a:	6a 00                	push   0x0
c001dd1c:	6a 0c                	push   0xc
c001dd1e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dd25:	50                   	push   eax
c001dd26:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dd2c:	e8 a5 e8 ff ff       	call   c001c5d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd31:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001dd38:	83 c4 14             	add    esp,0x14
c001dd3b:	53                   	push   ebx
c001dd3c:	e8 cb fe ff ff       	call   c001dc0c <ATAPI::detectMedia()>
c001dd41:	31 c0                	xor    eax,eax
c001dd43:	83 c4 18             	add    esp,0x18
c001dd46:	5b                   	pop    ebx
c001dd47:	c3                   	ret    

c001dd48 <ATAPI::read(unsigned long long, int, void*)>:
c001dd48:	55                   	push   ebp
c001dd49:	57                   	push   edi
c001dd4a:	56                   	push   esi
c001dd4b:	53                   	push   ebx
c001dd4c:	83 ec 1c             	sub    esp,0x1c
c001dd4f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dd53:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dd57:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001dd5b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001dd62:	74 41                	je     c001dda5 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001dd64:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dd68:	b9 03 00 00 00       	mov    ecx,0x3
c001dd6d:	fc                   	cld    
c001dd6e:	31 c0                	xor    eax,eax
c001dd70:	86 fb                	xchg   bl,bh
c001dd72:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dd74:	c1 c3 10             	rol    ebx,0x10
c001dd77:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001dd7c:	89 e8                	mov    eax,ebp
c001dd7e:	86 fb                	xchg   bl,bh
c001dd80:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001dd84:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001dd88:	50                   	push   eax
c001dd89:	50                   	push   eax
c001dd8a:	55                   	push   ebp
c001dd8b:	c1 e5 0b             	shl    ebp,0xb
c001dd8e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dd92:	6a 00                	push   0x0
c001dd94:	55                   	push   ebp
c001dd95:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dd99:	50                   	push   eax
c001dd9a:	56                   	push   esi
c001dd9b:	e8 1c fb ff ff       	call   c001d8bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dda0:	83 c4 20             	add    esp,0x20
c001dda3:	eb 1a                	jmp    c001ddbf <ATAPI::read(unsigned long long, int, void*)+0x77>
c001dda5:	83 ec 0c             	sub    esp,0xc
c001dda8:	56                   	push   esi
c001dda9:	e8 5e fe ff ff       	call   c001dc0c <ATAPI::detectMedia()>
c001ddae:	83 c4 10             	add    esp,0x10
c001ddb1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001ddb8:	75 aa                	jne    c001dd64 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ddba:	b8 02 00 00 00       	mov    eax,0x2
c001ddbf:	83 c4 1c             	add    esp,0x1c
c001ddc2:	5b                   	pop    ebx
c001ddc3:	5e                   	pop    esi
c001ddc4:	5f                   	pop    edi
c001ddc5:	5d                   	pop    ebp
c001ddc6:	c3                   	ret    
c001ddc7:	90                   	nop

c001ddc8 <AVX::open(int, int, void*)>:
c001ddc8:	83 ec 0c             	sub    esp,0xc
c001ddcb:	e8 08 10 00 00       	call   c001edd8 <avxInit>
c001ddd0:	b8 00 00 00 00       	mov    eax,0x0
c001ddd5:	83 c4 0c             	add    esp,0xc
c001ddd8:	c3                   	ret    
c001ddd9:	90                   	nop

c001ddda <AVX::close(int, int, void*)>:
c001ddda:	83 ec 0c             	sub    esp,0xc
c001dddd:	e8 f7 0f 00 00       	call   c001edd9 <avxClose>
c001dde2:	b8 00 00 00 00       	mov    eax,0x0
c001dde7:	83 c4 0c             	add    esp,0xc
c001ddea:	c3                   	ret    
c001ddeb:	90                   	nop

c001ddec <AVX::available()>:
c001ddec:	83 ec 0c             	sub    esp,0xc
c001ddef:	e8 dc 0f 00 00       	call   c001edd0 <avxDetect>
c001ddf4:	85 c0                	test   eax,eax
c001ddf6:	0f 95 c0             	setne  al
c001ddf9:	83 c4 0c             	add    esp,0xc
c001ddfc:	c3                   	ret    
c001ddfd:	90                   	nop

c001ddfe <AVX::save(void*)>:
c001ddfe:	83 ec 0c             	sub    esp,0xc
c001de01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de05:	83 ec 0c             	sub    esp,0xc
c001de08:	50                   	push   eax
c001de09:	e8 c8 0f 00 00       	call   c001edd6 <avxSave>
c001de0e:	83 c4 10             	add    esp,0x10
c001de11:	90                   	nop
c001de12:	83 c4 0c             	add    esp,0xc
c001de15:	c3                   	ret    

c001de16 <AVX::load(void*)>:
c001de16:	83 ec 0c             	sub    esp,0xc
c001de19:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de1d:	83 ec 0c             	sub    esp,0xc
c001de20:	50                   	push   eax
c001de21:	e8 b1 0f 00 00       	call   c001edd7 <avxLoad>
c001de26:	83 c4 10             	add    esp,0x10
c001de29:	90                   	nop
c001de2a:	83 c4 0c             	add    esp,0xc
c001de2d:	c3                   	ret    

c001de2e <AVX::AVX()>:
c001de2e:	83 ec 0c             	sub    esp,0xc
c001de31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de35:	83 ec 08             	sub    esp,0x8
c001de38:	68 b8 33 02 c0       	push   0xc00233b8
c001de3d:	50                   	push   eax
c001de3e:	e8 a1 2b ff ff       	call   c00109e4 <FPU::FPU(char const*)>
c001de43:	83 c4 10             	add    esp,0x10
c001de46:	ba c8 33 02 c0       	mov    edx,0xc00233c8
c001de4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de4f:	89 10                	mov    DWORD PTR [eax],edx
c001de51:	90                   	nop
c001de52:	83 c4 0c             	add    esp,0xc
c001de55:	c3                   	ret    

c001de56 <MMX::available()>:
c001de56:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c001de5b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001de61:	83 e0 20             	and    eax,0x20
c001de64:	84 c0                	test   al,al
c001de66:	0f 95 c0             	setne  al
c001de69:	c3                   	ret    

c001de6a <MMX::open(int, int, void*)>:
c001de6a:	83 ec 0c             	sub    esp,0xc
c001de6d:	e8 da 0f 00 00       	call   c001ee4c <x87Init>
c001de72:	b8 00 00 00 00       	mov    eax,0x0
c001de77:	83 c4 0c             	add    esp,0xc
c001de7a:	c3                   	ret    
c001de7b:	90                   	nop

c001de7c <MMX::close(int, int, void*)>:
c001de7c:	83 ec 0c             	sub    esp,0xc
c001de7f:	e8 e2 0f 00 00       	call   c001ee66 <x87Close>
c001de84:	b8 00 00 00 00       	mov    eax,0x0
c001de89:	83 c4 0c             	add    esp,0xc
c001de8c:	c3                   	ret    
c001de8d:	90                   	nop

c001de8e <MMX::save(void*)>:
c001de8e:	83 ec 0c             	sub    esp,0xc
c001de91:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de95:	83 ec 0c             	sub    esp,0xc
c001de98:	50                   	push   eax
c001de99:	e8 a3 0f 00 00       	call   c001ee41 <x87Save>
c001de9e:	83 c4 10             	add    esp,0x10
c001dea1:	90                   	nop
c001dea2:	83 c4 0c             	add    esp,0xc
c001dea5:	c3                   	ret    

c001dea6 <MMX::load(void*)>:
c001dea6:	83 ec 0c             	sub    esp,0xc
c001dea9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dead:	83 ec 0c             	sub    esp,0xc
c001deb0:	50                   	push   eax
c001deb1:	e8 91 0f 00 00       	call   c001ee47 <x87Load>
c001deb6:	83 c4 10             	add    esp,0x10
c001deb9:	90                   	nop
c001deba:	83 c4 0c             	add    esp,0xc
c001debd:	c3                   	ret    

c001debe <MMX::MMX()>:
c001debe:	83 ec 0c             	sub    esp,0xc
c001dec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dec5:	83 ec 08             	sub    esp,0x8
c001dec8:	68 f8 33 02 c0       	push   0xc00233f8
c001decd:	50                   	push   eax
c001dece:	e8 11 2b ff ff       	call   c00109e4 <FPU::FPU(char const*)>
c001ded3:	83 c4 10             	add    esp,0x10
c001ded6:	ba 08 34 02 c0       	mov    edx,0xc0023408
c001dedb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dedf:	89 10                	mov    DWORD PTR [eax],edx
c001dee1:	90                   	nop
c001dee2:	83 c4 0c             	add    esp,0xc
c001dee5:	c3                   	ret    

c001dee6 <SSE::open(int, int, void*)>:
c001dee6:	83 ec 0c             	sub    esp,0xc
c001dee9:	e8 19 0f 00 00       	call   c001ee07 <sseInit>
c001deee:	b8 00 00 00 00       	mov    eax,0x0
c001def3:	83 c4 0c             	add    esp,0xc
c001def6:	c3                   	ret    
c001def7:	90                   	nop

c001def8 <SSE::close(int, int, void*)>:
c001def8:	83 ec 0c             	sub    esp,0xc
c001defb:	e8 17 0f 00 00       	call   c001ee17 <sseClose>
c001df00:	b8 00 00 00 00       	mov    eax,0x0
c001df05:	83 c4 0c             	add    esp,0xc
c001df08:	c3                   	ret    
c001df09:	90                   	nop

c001df0a <SSE::available()>:
c001df0a:	83 ec 1c             	sub    esp,0x1c
c001df0d:	e8 ce 0e 00 00       	call   c001ede0 <sseDetect>
c001df12:	85 c0                	test   eax,eax
c001df14:	0f 95 c0             	setne  al
c001df17:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001df1b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001df1f:	83 c4 1c             	add    esp,0x1c
c001df22:	c3                   	ret    
c001df23:	90                   	nop

c001df24 <SSE::save(void*)>:
c001df24:	83 ec 0c             	sub    esp,0xc
c001df27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df2b:	83 ec 0c             	sub    esp,0xc
c001df2e:	50                   	push   eax
c001df2f:	e8 c7 0e 00 00       	call   c001edfb <sseSave>
c001df34:	83 c4 10             	add    esp,0x10
c001df37:	90                   	nop
c001df38:	83 c4 0c             	add    esp,0xc
c001df3b:	c3                   	ret    

c001df3c <SSE::load(void*)>:
c001df3c:	83 ec 0c             	sub    esp,0xc
c001df3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df43:	83 ec 0c             	sub    esp,0xc
c001df46:	50                   	push   eax
c001df47:	e8 b5 0e 00 00       	call   c001ee01 <sseLoad>
c001df4c:	83 c4 10             	add    esp,0x10
c001df4f:	90                   	nop
c001df50:	83 c4 0c             	add    esp,0xc
c001df53:	c3                   	ret    

c001df54 <SSE::SSE()>:
c001df54:	83 ec 0c             	sub    esp,0xc
c001df57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df5b:	83 ec 08             	sub    esp,0x8
c001df5e:	68 38 34 02 c0       	push   0xc0023438
c001df63:	50                   	push   eax
c001df64:	e8 7b 2a ff ff       	call   c00109e4 <FPU::FPU(char const*)>
c001df69:	83 c4 10             	add    esp,0x10
c001df6c:	ba 48 34 02 c0       	mov    edx,0xc0023448
c001df71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df75:	89 10                	mov    DWORD PTR [eax],edx
c001df77:	90                   	nop
c001df78:	83 c4 0c             	add    esp,0xc
c001df7b:	c3                   	ret    

c001df7c <x87::open(int, int, void*)>:
c001df7c:	83 ec 0c             	sub    esp,0xc
c001df7f:	e8 c8 0e 00 00       	call   c001ee4c <x87Init>
c001df84:	b8 00 00 00 00       	mov    eax,0x0
c001df89:	83 c4 0c             	add    esp,0xc
c001df8c:	c3                   	ret    
c001df8d:	90                   	nop

c001df8e <x87::close(int, int, void*)>:
c001df8e:	83 ec 0c             	sub    esp,0xc
c001df91:	e8 d0 0e 00 00       	call   c001ee66 <x87Close>
c001df96:	b8 00 00 00 00       	mov    eax,0x0
c001df9b:	83 c4 0c             	add    esp,0xc
c001df9e:	c3                   	ret    
c001df9f:	90                   	nop

c001dfa0 <x87::available()>:
c001dfa0:	83 ec 0c             	sub    esp,0xc
c001dfa3:	e8 7e 0e 00 00       	call   c001ee26 <x87Detect>
c001dfa8:	85 c0                	test   eax,eax
c001dfaa:	0f 95 c0             	setne  al
c001dfad:	83 c4 0c             	add    esp,0xc
c001dfb0:	c3                   	ret    
c001dfb1:	90                   	nop

c001dfb2 <x87::save(void*)>:
c001dfb2:	83 ec 0c             	sub    esp,0xc
c001dfb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dfb9:	83 ec 0c             	sub    esp,0xc
c001dfbc:	50                   	push   eax
c001dfbd:	e8 7f 0e 00 00       	call   c001ee41 <x87Save>
c001dfc2:	83 c4 10             	add    esp,0x10
c001dfc5:	90                   	nop
c001dfc6:	83 c4 0c             	add    esp,0xc
c001dfc9:	c3                   	ret    

c001dfca <x87::load(void*)>:
c001dfca:	83 ec 0c             	sub    esp,0xc
c001dfcd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dfd1:	83 ec 0c             	sub    esp,0xc
c001dfd4:	50                   	push   eax
c001dfd5:	e8 6d 0e 00 00       	call   c001ee47 <x87Load>
c001dfda:	83 c4 10             	add    esp,0x10
c001dfdd:	90                   	nop
c001dfde:	83 c4 0c             	add    esp,0xc
c001dfe1:	c3                   	ret    

c001dfe2 <x87::x87()>:
c001dfe2:	83 ec 0c             	sub    esp,0xc
c001dfe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfe9:	83 ec 08             	sub    esp,0x8
c001dfec:	68 78 34 02 c0       	push   0xc0023478
c001dff1:	50                   	push   eax
c001dff2:	e8 ed 29 ff ff       	call   c00109e4 <FPU::FPU(char const*)>
c001dff7:	83 c4 10             	add    esp,0x10
c001dffa:	ba 88 34 02 c0       	mov    edx,0xc0023488
c001dfff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e003:	89 10                	mov    DWORD PTR [eax],edx
c001e005:	90                   	nop
c001e006:	83 c4 0c             	add    esp,0xc
c001e009:	c3                   	ret    

c001e00a <APIC::disable()>:
c001e00a:	90                   	nop
c001e00b:	c3                   	ret    

c001e00c <APIC::close(int, int, void*)>:
c001e00c:	55                   	push   ebp
c001e00d:	89 e5                	mov    ebp,esp
c001e00f:	83 ec 08             	sub    esp,0x8
c001e012:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e015:	8b 00                	mov    eax,DWORD PTR [eax]
c001e017:	83 c0 3c             	add    eax,0x3c
c001e01a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e01c:	83 ec 0c             	sub    esp,0xc
c001e01f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e022:	ff d0                	call   eax
c001e024:	83 c4 10             	add    esp,0x10
c001e027:	b8 00 00 00 00       	mov    eax,0x0
c001e02c:	c9                   	leave  
c001e02d:	c3                   	ret    

c001e02e <IOAPIC::close(int, int, void*)>:
c001e02e:	b8 00 00 00 00       	mov    eax,0x0
c001e033:	c3                   	ret    

c001e034 <APIC::io_wait()>:
c001e034:	eb 00                	jmp    c001e036 <APIC::io_wait()+0x2>
c001e036:	eb 00                	jmp    c001e038 <APIC::io_wait()+0x4>
c001e038:	90                   	nop
c001e039:	c3                   	ret    

c001e03a <APIC::getBase()>:
c001e03a:	55                   	push   ebp
c001e03b:	89 e5                	mov    ebp,esp
c001e03d:	83 ec 18             	sub    esp,0x18
c001e040:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c001e045:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e04b:	83 e0 08             	and    eax,0x8
c001e04e:	84 c0                	test   al,al
c001e050:	75 07                	jne    c001e059 <APIC::getBase()+0x1f>
c001e052:	b8 00 00 00 00       	mov    eax,0x0
c001e057:	eb 21                	jmp    c001e07a <APIC::getBase()+0x40>
c001e059:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c001e05e:	83 ec 08             	sub    esp,0x8
c001e061:	6a 1b                	push   0x1b
c001e063:	50                   	push   eax
c001e064:	e8 3b d5 fe ff       	call   c000b5a4 <Computer::rdmsr(unsigned int)>
c001e069:	83 c4 10             	add    esp,0x10
c001e06c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e06f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e072:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e075:	25 00 f0 ff ff       	and    eax,0xfffff000
c001e07a:	c9                   	leave  
c001e07b:	c3                   	ret    

c001e07c <APIC::eoi(unsigned char)>:
c001e07c:	55                   	push   ebp
c001e07d:	89 e5                	mov    ebp,esp
c001e07f:	83 ec 28             	sub    esp,0x28
c001e082:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e085:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e088:	83 ec 0c             	sub    esp,0xc
c001e08b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e08e:	e8 a7 ff ff ff       	call   c001e03a <APIC::getBase()>
c001e093:	83 c4 10             	add    esp,0x10
c001e096:	05 b0 00 00 00       	add    eax,0xb0
c001e09b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e09e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001e0a1:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e0a7:	90                   	nop
c001e0a8:	c9                   	leave  
c001e0a9:	c3                   	ret    

c001e0aa <APIC::open(int, int, void*)>:
c001e0aa:	55                   	push   ebp
c001e0ab:	89 e5                	mov    ebp,esp
c001e0ad:	57                   	push   edi
c001e0ae:	56                   	push   esi
c001e0af:	53                   	push   ebx
c001e0b0:	83 ec 1c             	sub    esp,0x1c
c001e0b3:	83 ec 0c             	sub    esp,0xc
c001e0b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e0b9:	e8 7c ff ff ff       	call   c001e03a <APIC::getBase()>
c001e0be:	83 c4 10             	add    esp,0x10
c001e0c1:	05 f0 00 00 00       	add    eax,0xf0
c001e0c6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e0c9:	83 ec 0c             	sub    esp,0xc
c001e0cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e0cf:	e8 66 ff ff ff       	call   c001e03a <APIC::getBase()>
c001e0d4:	83 c4 10             	add    esp,0x10
c001e0d7:	89 c2                	mov    edx,eax
c001e0d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e0dc:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e0e2:	0f b6 f8             	movzx  edi,al
c001e0e5:	89 d0                	mov    eax,edx
c001e0e7:	ba 00 00 00 00       	mov    edx,0x0
c001e0ec:	89 c1                	mov    ecx,eax
c001e0ee:	80 e5 ff             	and    ch,0xff
c001e0f1:	89 cb                	mov    ebx,ecx
c001e0f3:	0f b6 f2             	movzx  esi,dl
c001e0f6:	89 d8                	mov    eax,ebx
c001e0f8:	89 f2                	mov    edx,esi
c001e0fa:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e0fd:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e100:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e104:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e108:	83 e0 00             	and    eax,0x0
c001e10b:	09 d0                	or     eax,edx
c001e10d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e111:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e114:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e11a:	8d 50 01             	lea    edx,[eax+0x1]
c001e11d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e120:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e126:	0f b6 d0             	movzx  edx,al
c001e129:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e12c:	83 c2 08             	add    edx,0x8
c001e12f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e133:	0f b6 c9             	movzx  ecx,cl
c001e136:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e13c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e140:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e143:	8b 00                	mov    eax,DWORD PTR [eax]
c001e145:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e148:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001e14f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e152:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001e155:	89 10                	mov    DWORD PTR [eax],edx
c001e157:	b8 00 00 00 00       	mov    eax,0x0
c001e15c:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e15f:	5b                   	pop    ebx
c001e160:	5e                   	pop    esi
c001e161:	5f                   	pop    edi
c001e162:	5d                   	pop    ebp
c001e163:	c3                   	ret    

c001e164 <IOAPIC::IOAPIC()>:
c001e164:	83 ec 0c             	sub    esp,0xc
c001e167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e16b:	83 ec 08             	sub    esp,0x8
c001e16e:	68 b8 34 02 c0       	push   0xc00234b8
c001e173:	50                   	push   eax
c001e174:	e8 77 25 ff ff       	call   c00106f0 <Device::Device(char const*)>
c001e179:	83 c4 10             	add    esp,0x10
c001e17c:	ba e0 35 02 c0       	mov    edx,0xc00235e0
c001e181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e185:	89 10                	mov    DWORD PTR [eax],edx
c001e187:	90                   	nop
c001e188:	83 c4 0c             	add    esp,0xc
c001e18b:	c3                   	ret    

c001e18c <APIC::APIC()>:
c001e18c:	53                   	push   ebx
c001e18d:	83 ec 18             	sub    esp,0x18
c001e190:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e194:	83 ec 08             	sub    esp,0x8
c001e197:	68 c0 34 02 c0       	push   0xc00234c0
c001e19c:	50                   	push   eax
c001e19d:	e8 9c 2c ff ff       	call   c0010e3e <InterruptController::InterruptController(char const*)>
c001e1a2:	83 c4 10             	add    esp,0x10
c001e1a5:	ba 98 35 02 c0       	mov    edx,0xc0023598
c001e1aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1ae:	89 10                	mov    DWORD PTR [eax],edx
c001e1b0:	a0 e0 60 02 c0       	mov    al,ds:0xc00260e0
c001e1b5:	83 f0 01             	xor    eax,0x1
c001e1b8:	84 c0                	test   al,al
c001e1ba:	0f 84 96 00 00 00    	je     c001e256 <APIC::APIC()+0xca>
c001e1c0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e1c5:	a0 90 4b 02 c0       	mov    al,ds:0xc0024b90
c001e1ca:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001e1ce:	73 7f                	jae    c001e24f <APIC::APIC()+0xc3>
c001e1d0:	83 ec 0c             	sub    esp,0xc
c001e1d3:	68 68 01 00 00       	push   0x168
c001e1d8:	e8 29 0e ff ff       	call   c000f006 <operator new(unsigned long)>
c001e1dd:	83 c4 10             	add    esp,0x10
c001e1e0:	89 c3                	mov    ebx,eax
c001e1e2:	83 ec 0c             	sub    esp,0xc
c001e1e5:	53                   	push   ebx
c001e1e6:	e8 79 ff ff ff       	call   c001e164 <IOAPIC::IOAPIC()>
c001e1eb:	83 c4 10             	add    esp,0x10
c001e1ee:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e1f2:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e1f7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e1fb:	89 14 85 c0 60 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9f40],edx
c001e202:	a1 a0 60 02 c0       	mov    eax,ds:0xc00260a0
c001e207:	40                   	inc    eax
c001e208:	a3 a0 60 02 c0       	mov    ds:0xc00260a0,eax
c001e20d:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c001e212:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e218:	83 ec 08             	sub    esp,0x8
c001e21b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e21f:	50                   	push   eax
c001e220:	e8 db 22 ff ff       	call   c0010500 <Device::addChild(Device*)>
c001e225:	83 c4 10             	add    esp,0x10
c001e228:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e22c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e22e:	83 c0 08             	add    eax,0x8
c001e231:	8b 00                	mov    eax,DWORD PTR [eax]
c001e233:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001e238:	6a 00                	push   0x0
c001e23a:	6a 00                	push   0x0
c001e23c:	52                   	push   edx
c001e23d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e241:	ff d0                	call   eax
c001e243:	83 c4 10             	add    esp,0x10
c001e246:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001e24a:	e9 76 ff ff ff       	jmp    c001e1c5 <APIC::APIC()+0x39>
c001e24f:	c6 05 e0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260e0,0x1
c001e256:	90                   	nop
c001e257:	83 c4 18             	add    esp,0x18
c001e25a:	5b                   	pop    ebx
c001e25b:	c3                   	ret    

c001e25c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e25c:	55                   	push   ebp
c001e25d:	89 e5                	mov    ebp,esp
c001e25f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e262:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e268:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e26b:	72 1d                	jb     c001e28a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e26d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e270:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e276:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e279:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e27f:	01 d0                	add    eax,edx
c001e281:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e284:	73 04                	jae    c001e28a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e286:	b0 01                	mov    al,0x1
c001e288:	eb 02                	jmp    c001e28c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e28a:	b0 00                	mov    al,0x0
c001e28c:	5d                   	pop    ebp
c001e28d:	c3                   	ret    

c001e28e <IOAPIC::read(int)>:
c001e28e:	55                   	push   ebp
c001e28f:	89 e5                	mov    ebp,esp
c001e291:	83 ec 10             	sub    esp,0x10
c001e294:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e297:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e29d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e2a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e2a3:	0f b6 d0             	movzx  edx,al
c001e2a6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e2a9:	89 10                	mov    DWORD PTR [eax],edx
c001e2ab:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e2ae:	83 c0 10             	add    eax,0x10
c001e2b1:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2b3:	c9                   	leave  
c001e2b4:	c3                   	ret    
c001e2b5:	90                   	nop

c001e2b6 <IOAPIC::open(int, int, void*)>:
c001e2b6:	55                   	push   ebp
c001e2b7:	89 e5                	mov    ebp,esp
c001e2b9:	57                   	push   edi
c001e2ba:	56                   	push   esi
c001e2bb:	53                   	push   ebx
c001e2bc:	83 ec 0c             	sub    esp,0xc
c001e2bf:	83 ec 0c             	sub    esp,0xc
c001e2c2:	68 eb 34 02 c0       	push   0xc00234eb
c001e2c7:	e8 29 0e ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001e2cc:	83 c4 10             	add    esp,0x10
c001e2cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e2d2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e2d5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e2db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e2de:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e2e4:	8b 14 85 c0 4b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb440]
c001e2eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e2ee:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e2f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e2f7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e2fd:	8b 14 85 40 4c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb3c0]
c001e304:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e307:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e30d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e310:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e316:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e319:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e31f:	0f b6 f8             	movzx  edi,al
c001e322:	89 d0                	mov    eax,edx
c001e324:	ba 00 00 00 00       	mov    edx,0x0
c001e329:	89 c1                	mov    ecx,eax
c001e32b:	80 e5 ff             	and    ch,0xff
c001e32e:	89 cb                	mov    ebx,ecx
c001e330:	0f b6 f2             	movzx  esi,dl
c001e333:	89 d8                	mov    eax,ebx
c001e335:	89 f2                	mov    edx,esi
c001e337:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e33a:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e33d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e341:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e345:	83 e0 00             	and    eax,0x0
c001e348:	09 d0                	or     eax,edx
c001e34a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e34e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e351:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e357:	8d 50 01             	lea    edx,[eax+0x1]
c001e35a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e35d:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e363:	0f b6 d0             	movzx  edx,al
c001e366:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e369:	83 c2 08             	add    edx,0x8
c001e36c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e370:	0f b6 c9             	movzx  ecx,cl
c001e373:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e379:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e37d:	83 ec 08             	sub    esp,0x8
c001e380:	6a 01                	push   0x1
c001e382:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e385:	e8 04 ff ff ff       	call   c001e28e <IOAPIC::read(int)>
c001e38a:	83 c4 10             	add    esp,0x10
c001e38d:	c1 f8 10             	sar    eax,0x10
c001e390:	0f b6 c0             	movzx  eax,al
c001e393:	8d 50 01             	lea    edx,[eax+0x1]
c001e396:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e399:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e39f:	b8 00 00 00 00       	mov    eax,0x0
c001e3a4:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e3a7:	5b                   	pop    ebx
c001e3a8:	5e                   	pop    esi
c001e3a9:	5f                   	pop    edi
c001e3aa:	5d                   	pop    ebp
c001e3ab:	c3                   	ret    

c001e3ac <IOAPIC::write(int, int)>:
c001e3ac:	55                   	push   ebp
c001e3ad:	89 e5                	mov    ebp,esp
c001e3af:	83 ec 10             	sub    esp,0x10
c001e3b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e3b5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e3bb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e3be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e3c1:	0f b6 d0             	movzx  edx,al
c001e3c4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e3c7:	89 10                	mov    DWORD PTR [eax],edx
c001e3c9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e3cc:	8d 50 10             	lea    edx,[eax+0x10]
c001e3cf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e3d2:	89 02                	mov    DWORD PTR [edx],eax
c001e3d4:	90                   	nop
c001e3d5:	c9                   	leave  
c001e3d6:	c3                   	ret    
c001e3d7:	90                   	nop

c001e3d8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001e3d8:	55                   	push   ebp
c001e3d9:	89 e5                	mov    ebp,esp
c001e3db:	83 ec 20             	sub    esp,0x20
c001e3de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e3e1:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e3e4:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e3e7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e3ea:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e3ed:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e3f0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e3f3:	88 d0                	mov    al,dl
c001e3f5:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001e3f8:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001e3fc:	83 c0 08             	add    eax,0x8
c001e3ff:	01 c0                	add    eax,eax
c001e401:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e404:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001e408:	83 c0 08             	add    eax,0x8
c001e40b:	01 c0                	add    eax,eax
c001e40d:	40                   	inc    eax
c001e40e:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001e411:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e414:	50                   	push   eax
c001e415:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e418:	e8 71 fe ff ff       	call   c001e28e <IOAPIC::read(int)>
c001e41d:	83 c4 08             	add    esp,0x8
c001e420:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e423:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001e42a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001e42d:	c1 e0 18             	shl    eax,0x18
c001e430:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e433:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e436:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e439:	52                   	push   edx
c001e43a:	50                   	push   eax
c001e43b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e43e:	e8 69 ff ff ff       	call   c001e3ac <IOAPIC::write(int, int)>
c001e443:	83 c4 0c             	add    esp,0xc
c001e446:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e449:	50                   	push   eax
c001e44a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e44d:	e8 3c fe ff ff       	call   c001e28e <IOAPIC::read(int)>
c001e452:	83 c4 08             	add    esp,0x8
c001e455:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e458:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001e45f:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001e466:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001e46d:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001e474:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001e478:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001e47b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001e47e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e481:	52                   	push   edx
c001e482:	50                   	push   eax
c001e483:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e486:	e8 21 ff ff ff       	call   c001e3ac <IOAPIC::write(int, int)>
c001e48b:	83 c4 0c             	add    esp,0xc
c001e48e:	90                   	nop
c001e48f:	c9                   	leave  
c001e490:	c3                   	ret    
c001e491:	90                   	nop

c001e492 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001e492:	55                   	push   ebp
c001e493:	89 e5                	mov    ebp,esp
c001e495:	56                   	push   esi
c001e496:	53                   	push   ebx
c001e497:	83 ec 20             	sub    esp,0x20
c001e49a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e49d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e4a0:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001e4a4:	74 28                	je     c001e4ce <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001e4a6:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001e4aa:	7f 12                	jg     c001e4be <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001e4ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e4af:	05 40 3a 02 c0       	add    eax,0xc0023a40
c001e4b4:	8a 00                	mov    al,BYTE PTR [eax]
c001e4b6:	0f b6 c0             	movzx  eax,al
c001e4b9:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001e4bc:	eb 10                	jmp    c001e4ce <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001e4be:	83 ec 0c             	sub    esp,0xc
c001e4c1:	68 fc 34 02 c0       	push   0xc00234fc
c001e4c6:	e8 bf 73 ff ff       	call   c001588a <Krnl::panic(char const*)>
c001e4cb:	83 c4 10             	add    esp,0x10
c001e4ce:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e4d2:	a1 a0 60 02 c0       	mov    eax,ds:0xc00260a0
c001e4d7:	83 ec 08             	sub    esp,0x8
c001e4da:	50                   	push   eax
c001e4db:	68 34 35 02 c0       	push   0xc0023534
c001e4e0:	e8 10 0c ff ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001e4e5:	83 c4 10             	add    esp,0x10
c001e4e8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e4ef:	a1 a0 60 02 c0       	mov    eax,ds:0xc00260a0
c001e4f4:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e4f7:	7d 58                	jge    c001e551 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001e4f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e4fc:	8b 04 85 c0 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f40]
c001e503:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e506:	83 ec 08             	sub    esp,0x8
c001e509:	52                   	push   edx
c001e50a:	50                   	push   eax
c001e50b:	e8 4c fd ff ff       	call   c001e25c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001e510:	83 c4 10             	add    esp,0x10
c001e513:	84 c0                	test   al,al
c001e515:	74 35                	je     c001e54c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001e517:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e51a:	8b 1c 85 c0 60 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9f40]
c001e521:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e524:	83 c0 20             	add    eax,0x20
c001e527:	0f b6 f0             	movzx  esi,al
c001e52a:	e8 e8 61 ff ff       	call   c0014717 <getCPUNumber()>
c001e52f:	99                   	cdq    
c001e530:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001e533:	0f b6 c9             	movzx  ecx,cl
c001e536:	83 ec 0c             	sub    esp,0xc
c001e539:	56                   	push   esi
c001e53a:	52                   	push   edx
c001e53b:	50                   	push   eax
c001e53c:	51                   	push   ecx
c001e53d:	53                   	push   ebx
c001e53e:	e8 95 fe ff ff       	call   c001e3d8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001e543:	83 c4 20             	add    esp,0x20
c001e546:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001e54a:	eb 05                	jmp    c001e551 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001e54c:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001e54f:	eb 9e                	jmp    c001e4ef <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001e551:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e554:	83 f0 01             	xor    eax,0x1
c001e557:	84 c0                	test   al,al
c001e559:	74 10                	je     c001e56b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001e55b:	83 ec 0c             	sub    esp,0xc
c001e55e:	68 4b 35 02 c0       	push   0xc002354b
c001e563:	e8 22 73 ff ff       	call   c001588a <Krnl::panic(char const*)>
c001e568:	83 c4 10             	add    esp,0x10
c001e56b:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001e56f:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e576:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001e57a:	7f 65                	jg     c001e5e1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001e57c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e57f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e582:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e589:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e58c:	01 ca                	add    edx,ecx
c001e58e:	83 c2 54             	add    edx,0x54
c001e591:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001e595:	85 c0                	test   eax,eax
c001e597:	75 43                	jne    c001e5dc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001e599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e59c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e59f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e5a6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e5a9:	01 ca                	add    edx,ecx
c001e5ab:	8d 4a 54             	lea    ecx,[edx+0x54]
c001e5ae:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001e5b1:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e5b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5b8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e5bb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e5c2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e5c5:	01 ca                	add    edx,ecx
c001e5c7:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001e5cd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e5d0:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e5d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e5d7:	83 e8 20             	sub    eax,0x20
c001e5da:	eb 1a                	jmp    c001e5f6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001e5dc:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001e5df:	eb 95                	jmp    c001e576 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001e5e1:	83 ec 0c             	sub    esp,0xc
c001e5e4:	68 58 35 02 c0       	push   0xc0023558
c001e5e9:	e8 9c 72 ff ff       	call   c001588a <Krnl::panic(char const*)>
c001e5ee:	83 c4 10             	add    esp,0x10
c001e5f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001e5f6:	8d 65 f8             	lea    esp,[ebp-0x8]
c001e5f9:	5b                   	pop    ebx
c001e5fa:	5e                   	pop    esi
c001e5fb:	5d                   	pop    ebp
c001e5fc:	c3                   	ret    
c001e5fd:	90                   	nop

c001e5fe <PIC::disable()>:
c001e5fe:	55                   	push   ebp
c001e5ff:	89 e5                	mov    ebp,esp
c001e601:	83 ec 10             	sub    esp,0x10
c001e604:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001e60a:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001e60e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e611:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e615:	ee                   	out    dx,al
c001e616:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001e61c:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001e620:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e623:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001e627:	ee                   	out    dx,al
c001e628:	90                   	nop
c001e629:	c9                   	leave  
c001e62a:	c3                   	ret    
c001e62b:	90                   	nop

c001e62c <PIC::close(int, int, void*)>:
c001e62c:	55                   	push   ebp
c001e62d:	89 e5                	mov    ebp,esp
c001e62f:	83 ec 08             	sub    esp,0x8
c001e632:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e635:	8b 00                	mov    eax,DWORD PTR [eax]
c001e637:	83 c0 3c             	add    eax,0x3c
c001e63a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e63c:	83 ec 0c             	sub    esp,0xc
c001e63f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e642:	ff d0                	call   eax
c001e644:	83 c4 10             	add    esp,0x10
c001e647:	b8 00 00 00 00       	mov    eax,0x0
c001e64c:	c9                   	leave  
c001e64d:	c3                   	ret    

c001e64e <PIC::PIC()>:
c001e64e:	83 ec 0c             	sub    esp,0xc
c001e651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e655:	83 ec 08             	sub    esp,0x8
c001e658:	68 04 36 02 c0       	push   0xc0023604
c001e65d:	50                   	push   eax
c001e65e:	e8 db 27 ff ff       	call   c0010e3e <InterruptController::InterruptController(char const*)>
c001e663:	83 c4 10             	add    esp,0x10
c001e666:	ba 30 36 02 c0       	mov    edx,0xc0023630
c001e66b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e66f:	89 10                	mov    DWORD PTR [eax],edx
c001e671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e675:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e67b:	0f b6 d0             	movzx  edx,al
c001e67e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e682:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001e689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e68d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e693:	0f b6 d0             	movzx  edx,al
c001e696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e69a:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e69f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6a3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e6a9:	8d 50 01             	lea    edx,[eax+0x1]
c001e6ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e6b0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e6b6:	0f b6 d0             	movzx  edx,al
c001e6b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6bd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e6c1:	83 e1 3f             	and    ecx,0x3f
c001e6c4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e6c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6cc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e6d2:	0f b6 d0             	movzx  edx,al
c001e6d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6d9:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001e6e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6e4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e6ea:	0f b6 d0             	movzx  edx,al
c001e6ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6f1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e6f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6fa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e700:	8d 50 01             	lea    edx,[eax+0x1]
c001e703:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e707:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e70d:	0f b6 d0             	movzx  edx,al
c001e710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e714:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e718:	83 e1 3f             	and    ecx,0x3f
c001e71b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e71f:	90                   	nop
c001e720:	83 c4 0c             	add    esp,0xc
c001e723:	c3                   	ret    

c001e724 <PIC::ioWait()>:
c001e724:	eb 00                	jmp    c001e726 <PIC::ioWait()+0x2>
c001e726:	eb 00                	jmp    c001e728 <PIC::ioWait()+0x4>
c001e728:	90                   	nop
c001e729:	c3                   	ret    

c001e72a <PIC::getIRQReg(int)>:
c001e72a:	55                   	push   ebp
c001e72b:	89 e5                	mov    ebp,esp
c001e72d:	83 ec 10             	sub    esp,0x10
c001e730:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e733:	0f b6 c0             	movzx  eax,al
c001e736:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001e73c:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001e73f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e742:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e746:	ee                   	out    dx,al
c001e747:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e74a:	0f b6 c0             	movzx  eax,al
c001e74d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001e753:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001e756:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e759:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e75d:	ee                   	out    dx,al
c001e75e:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001e764:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001e768:	89 c2                	mov    edx,eax
c001e76a:	ec                   	in     al,dx
c001e76b:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001e76e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e771:	0f b6 c0             	movzx  eax,al
c001e774:	c1 e0 08             	shl    eax,0x8
c001e777:	89 c1                	mov    ecx,eax
c001e779:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001e77f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001e783:	89 c2                	mov    edx,eax
c001e785:	ec                   	in     al,dx
c001e786:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001e789:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e78c:	0f b6 c0             	movzx  eax,al
c001e78f:	09 c8                	or     eax,ecx
c001e791:	c9                   	leave  
c001e792:	c3                   	ret    
c001e793:	90                   	nop

c001e794 <PIC::eoi(unsigned char)>:
c001e794:	55                   	push   ebp
c001e795:	89 e5                	mov    ebp,esp
c001e797:	83 ec 14             	sub    esp,0x14
c001e79a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e79d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e7a0:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001e7a4:	75 1e                	jne    c001e7c4 <PIC::eoi(unsigned char)+0x30>
c001e7a6:	6a 0b                	push   0xb
c001e7a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7ab:	e8 7a ff ff ff       	call   c001e72a <PIC::getIRQReg(int)>
c001e7b0:	83 c4 08             	add    esp,0x8
c001e7b3:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001e7b7:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001e7bb:	25 80 00 00 00       	and    eax,0x80
c001e7c0:	85 c0                	test   eax,eax
c001e7c2:	74 5f                	je     c001e823 <PIC::eoi(unsigned char)+0x8f>
c001e7c4:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001e7c8:	75 2d                	jne    c001e7f7 <PIC::eoi(unsigned char)+0x63>
c001e7ca:	6a 0b                	push   0xb
c001e7cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7cf:	e8 56 ff ff ff       	call   c001e72a <PIC::getIRQReg(int)>
c001e7d4:	83 c4 08             	add    esp,0x8
c001e7d7:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001e7db:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7de:	66 85 c0             	test   ax,ax
c001e7e1:	78 14                	js     c001e7f7 <PIC::eoi(unsigned char)+0x63>
c001e7e3:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001e7e9:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001e7ed:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e7f0:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e7f4:	ee                   	out    dx,al
c001e7f5:	eb 2d                	jmp    c001e824 <PIC::eoi(unsigned char)+0x90>
c001e7f7:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001e7fb:	76 12                	jbe    c001e80f <PIC::eoi(unsigned char)+0x7b>
c001e7fd:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001e803:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001e807:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e80a:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e80e:	ee                   	out    dx,al
c001e80f:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001e815:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001e819:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e81c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e820:	ee                   	out    dx,al
c001e821:	eb 01                	jmp    c001e824 <PIC::eoi(unsigned char)+0x90>
c001e823:	90                   	nop
c001e824:	c9                   	leave  
c001e825:	c3                   	ret    

c001e826 <PIC::remap()>:
c001e826:	55                   	push   ebp
c001e827:	89 e5                	mov    ebp,esp
c001e829:	83 ec 48             	sub    esp,0x48
c001e82c:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001e833:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001e83a:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001e840:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001e843:	89 c2                	mov    edx,eax
c001e845:	ec                   	in     al,dx
c001e846:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001e849:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001e84c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001e84f:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001e855:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001e858:	89 c2                	mov    edx,eax
c001e85a:	ec                   	in     al,dx
c001e85b:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001e85e:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001e861:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001e864:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001e86a:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001e86e:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001e871:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001e874:	ee                   	out    dx,al
c001e875:	83 ec 0c             	sub    esp,0xc
c001e878:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e87b:	e8 a4 fe ff ff       	call   c001e724 <PIC::ioWait()>
c001e880:	83 c4 10             	add    esp,0x10
c001e883:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001e889:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001e88d:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001e890:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001e893:	ee                   	out    dx,al
c001e894:	83 ec 0c             	sub    esp,0xc
c001e897:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e89a:	e8 85 fe ff ff       	call   c001e724 <PIC::ioWait()>
c001e89f:	83 c4 10             	add    esp,0x10
c001e8a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001e8a5:	0f b6 c0             	movzx  eax,al
c001e8a8:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001e8ae:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001e8b1:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001e8b4:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001e8b7:	ee                   	out    dx,al
c001e8b8:	83 ec 0c             	sub    esp,0xc
c001e8bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e8be:	e8 61 fe ff ff       	call   c001e724 <PIC::ioWait()>
c001e8c3:	83 c4 10             	add    esp,0x10
c001e8c6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e8c9:	0f b6 c0             	movzx  eax,al
c001e8cc:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001e8d2:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001e8d5:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001e8d8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e8db:	ee                   	out    dx,al
c001e8dc:	83 ec 0c             	sub    esp,0xc
c001e8df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e8e2:	e8 3d fe ff ff       	call   c001e724 <PIC::ioWait()>
c001e8e7:	83 c4 10             	add    esp,0x10
c001e8ea:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001e8f0:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001e8f4:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001e8f7:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001e8fa:	ee                   	out    dx,al
c001e8fb:	83 ec 0c             	sub    esp,0xc
c001e8fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e901:	e8 1e fe ff ff       	call   c001e724 <PIC::ioWait()>
c001e906:	83 c4 10             	add    esp,0x10
c001e909:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001e90f:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001e913:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001e916:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001e919:	ee                   	out    dx,al
c001e91a:	83 ec 0c             	sub    esp,0xc
c001e91d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e920:	e8 ff fd ff ff       	call   c001e724 <PIC::ioWait()>
c001e925:	83 c4 10             	add    esp,0x10
c001e928:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001e92e:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001e932:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001e935:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001e938:	ee                   	out    dx,al
c001e939:	83 ec 0c             	sub    esp,0xc
c001e93c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e93f:	e8 e0 fd ff ff       	call   c001e724 <PIC::ioWait()>
c001e944:	83 c4 10             	add    esp,0x10
c001e947:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001e94d:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001e951:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001e954:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e957:	ee                   	out    dx,al
c001e958:	83 ec 0c             	sub    esp,0xc
c001e95b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e95e:	e8 c1 fd ff ff       	call   c001e724 <PIC::ioWait()>
c001e963:	83 c4 10             	add    esp,0x10
c001e966:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001e96a:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001e970:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001e973:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001e976:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e979:	ee                   	out    dx,al
c001e97a:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001e97e:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001e984:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001e987:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001e98a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e98d:	ee                   	out    dx,al
c001e98e:	90                   	nop
c001e98f:	c9                   	leave  
c001e990:	c3                   	ret    
c001e991:	90                   	nop

c001e992 <PIC::open(int, int, void*)>:
c001e992:	55                   	push   ebp
c001e993:	89 e5                	mov    ebp,esp
c001e995:	83 ec 18             	sub    esp,0x18
c001e998:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001e99e:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001e9a2:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e9a5:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e9a9:	ee                   	out    dx,al
c001e9aa:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001e9b0:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001e9b4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e9b7:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e9bb:	ee                   	out    dx,al
c001e9bc:	83 ec 0c             	sub    esp,0xc
c001e9bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9c2:	e8 5f fe ff ff       	call   c001e826 <PIC::remap()>
c001e9c7:	83 c4 10             	add    esp,0x10
c001e9ca:	b8 00 00 00 00       	mov    eax,0x0
c001e9cf:	c9                   	leave  
c001e9d0:	c3                   	ret    
c001e9d1:	90                   	nop

c001e9d2 <APICTimer::close(int, int, void*)>:
c001e9d2:	b8 00 00 00 00       	mov    eax,0x0
c001e9d7:	c3                   	ret    

c001e9d8 <apicTimerHandler(regs*, void*)>:
c001e9d8:	83 ec 0c             	sub    esp,0xc
c001e9db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e9df:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9e1:	99                   	cdq    
c001e9e2:	52                   	push   edx
c001e9e3:	50                   	push   eax
c001e9e4:	6a 00                	push   0x0
c001e9e6:	68 00 ca 9a 3b       	push   0x3b9aca00
c001e9eb:	e8 6c 07 00 00       	call   c001f15c <__udivdi3>
c001e9f0:	83 c4 10             	add    esp,0x10
c001e9f3:	83 ec 08             	sub    esp,0x8
c001e9f6:	52                   	push   edx
c001e9f7:	50                   	push   eax
c001e9f8:	e8 5a 42 ff ff       	call   c0012c57 <timerHandler(unsigned long long)>
c001e9fd:	83 c4 10             	add    esp,0x10
c001ea00:	90                   	nop
c001ea01:	83 c4 0c             	add    esp,0xc
c001ea04:	c3                   	ret    
c001ea05:	90                   	nop

c001ea06 <APICTimer::write(int)>:
c001ea06:	53                   	push   ebx
c001ea07:	83 ec 28             	sub    esp,0x28
c001ea0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ea0e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ea12:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ea18:	e8 fd 5c ff ff       	call   c001471a <thisCPU()>
c001ea1d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001ea23:	83 ec 0c             	sub    esp,0xc
c001ea26:	50                   	push   eax
c001ea27:	e8 0e f6 ff ff       	call   c001e03a <APIC::getBase()>
c001ea2c:	83 c4 10             	add    esp,0x10
c001ea2f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ea33:	a1 50 49 02 c0       	mov    eax,ds:0xc0024950
c001ea38:	8b 15 54 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024954
c001ea3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ea42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ea46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ea4a:	05 e0 03 00 00       	add    eax,0x3e0
c001ea4f:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001ea55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ea59:	05 80 03 00 00       	add    eax,0x380
c001ea5e:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001ea64:	fb                   	sti    
c001ea65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea69:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea6d:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001ea72:	83 d2 00             	adc    edx,0x0
c001ea75:	89 c1                	mov    ecx,eax
c001ea77:	89 d3                	mov    ebx,edx
c001ea79:	a1 50 49 02 c0       	mov    eax,ds:0xc0024950
c001ea7e:	8b 15 54 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024954
c001ea84:	39 c8                	cmp    eax,ecx
c001ea86:	89 d0                	mov    eax,edx
c001ea88:	19 d8                	sbb    eax,ebx
c001ea8a:	73 02                	jae    c001ea8e <APICTimer::write(int)+0x88>
c001ea8c:	eb d7                	jmp    c001ea65 <APICTimer::write(int)+0x5f>
c001ea8e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ea92:	05 20 03 00 00       	add    eax,0x320
c001ea97:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001ea9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eaa1:	05 90 03 00 00       	add    eax,0x390
c001eaa6:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaa8:	f7 d0                	not    eax
c001eaaa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eaae:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eab6:	ba 00 00 00 00       	mov    edx,0x0
c001eabb:	f7 f3                	div    ebx
c001eabd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001eac1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001eac5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001eacb:	0d 00 00 02 00       	or     eax,0x20000
c001ead0:	89 c2                	mov    edx,eax
c001ead2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ead6:	05 20 03 00 00       	add    eax,0x320
c001eadb:	89 10                	mov    DWORD PTR [eax],edx
c001eadd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eae1:	05 e0 03 00 00       	add    eax,0x3e0
c001eae6:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001eaec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eaf0:	05 80 03 00 00       	add    eax,0x380
c001eaf5:	89 c2                	mov    edx,eax
c001eaf7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eafb:	89 02                	mov    DWORD PTR [edx],eax
c001eafd:	90                   	nop
c001eafe:	83 c4 28             	add    esp,0x28
c001eb01:	5b                   	pop    ebx
c001eb02:	c3                   	ret    
c001eb03:	90                   	nop

c001eb04 <APICTimer::open(int, int, void*)>:
c001eb04:	57                   	push   edi
c001eb05:	56                   	push   esi
c001eb06:	53                   	push   ebx
c001eb07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb0b:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb0d:	83 c0 24             	add    eax,0x24
c001eb10:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb12:	83 ec 08             	sub    esp,0x8
c001eb15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb1d:	ff d0                	call   eax
c001eb1f:	83 c4 10             	add    esp,0x10
c001eb22:	e8 f3 5b ff ff       	call   c001471a <thisCPU()>
c001eb27:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001eb2d:	83 ec 0c             	sub    esp,0xc
c001eb30:	50                   	push   eax
c001eb31:	e8 04 f5 ff ff       	call   c001e03a <APIC::getBase()>
c001eb36:	83 c4 10             	add    esp,0x10
c001eb39:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001eb3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb43:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eb49:	0f b6 f8             	movzx  edi,al
c001eb4c:	89 d0                	mov    eax,edx
c001eb4e:	ba 00 00 00 00       	mov    edx,0x0
c001eb53:	89 c1                	mov    ecx,eax
c001eb55:	80 e5 ff             	and    ch,0xff
c001eb58:	89 cb                	mov    ebx,ecx
c001eb5a:	0f b6 f2             	movzx  esi,dl
c001eb5d:	89 d8                	mov    eax,ebx
c001eb5f:	89 f2                	mov    edx,esi
c001eb61:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eb65:	8d 5f 08             	lea    ebx,[edi+0x8]
c001eb68:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001eb6c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001eb70:	83 e0 00             	and    eax,0x0
c001eb73:	09 d0                	or     eax,edx
c001eb75:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001eb79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb7d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eb83:	8d 50 01             	lea    edx,[eax+0x1]
c001eb86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eb8a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001eb90:	0f b6 d0             	movzx  edx,al
c001eb93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb97:	83 c2 08             	add    edx,0x8
c001eb9a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001eb9e:	0f b6 c9             	movzx  ecx,cl
c001eba1:	81 c9 00 00 01 00    	or     ecx,0x10000
c001eba7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ebab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebaf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ebb3:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ebb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebbd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ebc1:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ebc7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ebcb:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ebd1:	83 ec 0c             	sub    esp,0xc
c001ebd4:	51                   	push   ecx
c001ebd5:	6a 01                	push   0x1
c001ebd7:	68 d8 e9 01 c0       	push   0xc001e9d8
c001ebdc:	52                   	push   edx
c001ebdd:	50                   	push   eax
c001ebde:	e8 71 18 ff ff       	call   c0010454 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ebe3:	83 c4 20             	add    esp,0x20
c001ebe6:	89 c2                	mov    edx,eax
c001ebe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebec:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ebf2:	b8 00 00 00 00       	mov    eax,0x0
c001ebf7:	5b                   	pop    ebx
c001ebf8:	5e                   	pop    esi
c001ebf9:	5f                   	pop    edi
c001ebfa:	c3                   	ret    
c001ebfb:	90                   	nop

c001ebfc <APICTimer::APICTimer()>:
c001ebfc:	83 ec 0c             	sub    esp,0xc
c001ebff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec03:	83 ec 08             	sub    esp,0x8
c001ec06:	68 70 36 02 c0       	push   0xc0023670
c001ec0b:	50                   	push   eax
c001ec0c:	e8 b7 3f ff ff       	call   c0012bc8 <Timer::Timer(char const*)>
c001ec11:	83 c4 10             	add    esp,0x10
c001ec14:	ba 84 36 02 c0       	mov    edx,0xc0023684
c001ec19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec1d:	89 10                	mov    DWORD PTR [eax],edx
c001ec1f:	90                   	nop
c001ec20:	83 c4 0c             	add    esp,0xc
c001ec23:	c3                   	ret    

c001ec24 <PIT::write(int)>:
c001ec24:	83 ec 10             	sub    esp,0x10
c001ec27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ec2b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ec2f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ec35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ec39:	a3 e4 60 02 c0       	mov    ds:0xc00260e4,eax
c001ec3e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ec43:	99                   	cdq    
c001ec44:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ec48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ec4c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ec53:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ec58:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ec5c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ec61:	ee                   	out    dx,al
c001ec62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec66:	0f b6 c0             	movzx  eax,al
c001ec69:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ec70:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ec74:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ec78:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ec7d:	ee                   	out    dx,al
c001ec7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec82:	c1 f8 08             	sar    eax,0x8
c001ec85:	0f b6 c0             	movzx  eax,al
c001ec88:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ec8f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ec93:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ec97:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ec9c:	ee                   	out    dx,al
c001ec9d:	90                   	nop
c001ec9e:	83 c4 10             	add    esp,0x10
c001eca1:	c3                   	ret    

c001eca2 <pitHandler(regs*, void*)>:
c001eca2:	83 ec 0c             	sub    esp,0xc
c001eca5:	a1 e4 60 02 c0       	mov    eax,ds:0xc00260e4
c001ecaa:	99                   	cdq    
c001ecab:	52                   	push   edx
c001ecac:	50                   	push   eax
c001ecad:	6a 00                	push   0x0
c001ecaf:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ecb4:	e8 a3 04 00 00       	call   c001f15c <__udivdi3>
c001ecb9:	83 c4 10             	add    esp,0x10
c001ecbc:	83 ec 08             	sub    esp,0x8
c001ecbf:	52                   	push   edx
c001ecc0:	50                   	push   eax
c001ecc1:	e8 91 3f ff ff       	call   c0012c57 <timerHandler(unsigned long long)>
c001ecc6:	83 c4 10             	add    esp,0x10
c001ecc9:	90                   	nop
c001ecca:	83 c4 0c             	add    esp,0xc
c001eccd:	c3                   	ret    

c001ecce <PIT::open(int, int, void*)>:
c001ecce:	83 ec 0c             	sub    esp,0xc
c001ecd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecd5:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecd7:	83 c0 24             	add    eax,0x24
c001ecda:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecdc:	83 ec 08             	sub    esp,0x8
c001ecdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ece3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ece7:	ff d0                	call   eax
c001ece9:	83 c4 10             	add    esp,0x10
c001ecec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf0:	83 ec 0c             	sub    esp,0xc
c001ecf3:	6a 00                	push   0x0
c001ecf5:	6a 01                	push   0x1
c001ecf7:	68 a2 ec 01 c0       	push   0xc001eca2
c001ecfc:	6a 00                	push   0x0
c001ecfe:	50                   	push   eax
c001ecff:	e8 50 17 ff ff       	call   c0010454 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ed04:	83 c4 20             	add    esp,0x20
c001ed07:	89 c2                	mov    edx,eax
c001ed09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed0d:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ed13:	b8 00 00 00 00       	mov    eax,0x0
c001ed18:	83 c4 0c             	add    esp,0xc
c001ed1b:	c3                   	ret    

c001ed1c <PIT::close(int, int, void*)>:
c001ed1c:	83 ec 0c             	sub    esp,0xc
c001ed1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed23:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ed2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed31:	6a 01                	push   0x1
c001ed33:	68 a2 ec 01 c0       	push   0xc001eca2
c001ed38:	6a 00                	push   0x0
c001ed3a:	50                   	push   eax
c001ed3b:	e8 72 17 ff ff       	call   c00104b2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ed40:	83 c4 10             	add    esp,0x10
c001ed43:	b8 00 00 00 00       	mov    eax,0x0
c001ed48:	83 c4 0c             	add    esp,0xc
c001ed4b:	c3                   	ret    

c001ed4c <PIT::PIT()>:
c001ed4c:	83 ec 0c             	sub    esp,0xc
c001ed4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed53:	83 ec 08             	sub    esp,0x8
c001ed56:	68 ac 36 02 c0       	push   0xc00236ac
c001ed5b:	50                   	push   eax
c001ed5c:	e8 67 3e ff ff       	call   c0012bc8 <Timer::Timer(char const*)>
c001ed61:	83 c4 10             	add    esp,0x10
c001ed64:	ba d4 36 02 c0       	mov    edx,0xc00236d4
c001ed69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed6d:	89 10                	mov    DWORD PTR [eax],edx
c001ed6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed73:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ed79:	0f b6 d0             	movzx  edx,al
c001ed7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed80:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ed87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed8b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ed91:	0f b6 d0             	movzx  edx,al
c001ed94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed98:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ed9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eda1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eda7:	8d 50 01             	lea    edx,[eax+0x1]
c001edaa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001edae:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001edb4:	0f b6 d0             	movzx  edx,al
c001edb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edbb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001edbf:	83 e1 3f             	and    ecx,0x3f
c001edc2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001edc6:	90                   	nop
c001edc7:	83 c4 0c             	add    esp,0xc
c001edca:	c3                   	ret    
c001edcb:	66 90                	xchg   ax,ax
c001edcd:	66 90                	xchg   ax,ax
c001edcf:	90                   	nop

c001edd0 <avxDetect>:
c001edd0:	b8 00 00 00 00       	mov    eax,0x0
c001edd5:	c3                   	ret    

c001edd6 <avxSave>:
c001edd6:	c3                   	ret    

c001edd7 <avxLoad>:
c001edd7:	c3                   	ret    

c001edd8 <avxInit>:
c001edd8:	c3                   	ret    

c001edd9 <avxClose>:
c001edd9:	c3                   	ret    
c001edda:	66 90                	xchg   ax,ax
c001eddc:	66 90                	xchg   ax,ax
c001edde:	66 90                	xchg   ax,ax

c001ede0 <sseDetect>:
c001ede0:	b8 01 00 00 00       	mov    eax,0x1
c001ede5:	0f a2                	cpuid  
c001ede7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001eded:	74 06                	je     c001edf5 <sseDetect.noSSE>
c001edef:	b8 01 00 00 00       	mov    eax,0x1
c001edf4:	c3                   	ret    

c001edf5 <sseDetect.noSSE>:
c001edf5:	b8 00 00 00 00       	mov    eax,0x0
c001edfa:	c3                   	ret    

c001edfb <sseSave>:
c001edfb:	0f ae 44 24 08       	fxsave [esp+0x8]
c001ee00:	c3                   	ret    

c001ee01 <sseLoad>:
c001ee01:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001ee06:	c3                   	ret    

c001ee07 <sseInit>:
c001ee07:	e8 40 00 00 00       	call   c001ee4c <x87Init>
c001ee0c:	0f 20 e0             	mov    eax,cr4
c001ee0f:	66 0d 00 06          	or     ax,0x600
c001ee13:	0f 22 e0             	mov    cr4,eax
c001ee16:	c3                   	ret    

c001ee17 <sseClose>:
c001ee17:	c3                   	ret    
c001ee18:	66 90                	xchg   ax,ax
c001ee1a:	66 90                	xchg   ax,ax
c001ee1c:	66 90                	xchg   ax,ax
c001ee1e:	66 90                	xchg   ax,ax

c001ee20 <value_37F>:
c001ee20:	7f 03                	jg     c001ee25 <value_37A+0x1>

c001ee22 <value_37E>:
c001ee22:	7e 03                	jle    c001ee27 <x87Detect+0x1>

c001ee24 <value_37A>:
c001ee24:	7a 03                	jp     c001ee29 <x87Detect+0x3>

c001ee26 <x87Detect>:
c001ee26:	b8 01 00 00 00       	mov    eax,0x1
c001ee2b:	0f a2                	cpuid  
c001ee2d:	f7 c2 01 00 00 00    	test   edx,0x1
c001ee33:	74 06                	je     c001ee3b <x87Detect.nox87>
c001ee35:	b8 01 00 00 00       	mov    eax,0x1
c001ee3a:	c3                   	ret    

c001ee3b <x87Detect.nox87>:
c001ee3b:	b8 00 00 00 00       	mov    eax,0x0
c001ee40:	c3                   	ret    

c001ee41 <x87Save>:
c001ee41:	9b dd 74 24 08       	fsave  [esp+0x8]
c001ee46:	c3                   	ret    

c001ee47 <x87Load>:
c001ee47:	dd 64 24 08          	frstor [esp+0x8]
c001ee4b:	c3                   	ret    

c001ee4c <x87Init>:
c001ee4c:	9b db e3             	finit  
c001ee4f:	0f 20 c0             	mov    eax,cr0
c001ee52:	66 25 fb ff          	and    ax,0xfffb
c001ee56:	66 0d 22 00          	or     ax,0x22
c001ee5a:	0f 22 c0             	mov    cr0,eax
c001ee5d:	0f 06                	clts   
c001ee5f:	d9 2d 24 ee 01 c0    	fldcw  WORD PTR ds:0xc001ee24
c001ee65:	c3                   	ret    

c001ee66 <x87Close>:
c001ee66:	c3                   	ret    
c001ee67:	90                   	nop

c001ee68 <__do_global_ctors_aux>:
c001ee68:	a1 48 ff 01 c0       	mov    eax,ds:0xc001ff48
c001ee6d:	83 f8 ff             	cmp    eax,0xffffffff
c001ee70:	74 1a                	je     c001ee8c <__do_global_ctors_aux+0x24>
c001ee72:	55                   	push   ebp
c001ee73:	89 e5                	mov    ebp,esp
c001ee75:	53                   	push   ebx
c001ee76:	52                   	push   edx
c001ee77:	bb 48 ff 01 c0       	mov    ebx,0xc001ff48
c001ee7c:	ff d0                	call   eax
c001ee7e:	83 eb 04             	sub    ebx,0x4
c001ee81:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ee83:	83 f8 ff             	cmp    eax,0xffffffff
c001ee86:	75 f4                	jne    c001ee7c <__do_global_ctors_aux+0x14>
c001ee88:	58                   	pop    eax
c001ee89:	5b                   	pop    ebx
c001ee8a:	5d                   	pop    ebp
c001ee8b:	c3                   	ret    
c001ee8c:	c3                   	ret    
c001ee8d:	66 90                	xchg   ax,ax
c001ee8f:	90                   	nop

c001ee90 <__divdi3>:
c001ee90:	55                   	push   ebp
c001ee91:	57                   	push   edi
c001ee92:	56                   	push   esi
c001ee93:	53                   	push   ebx
c001ee94:	83 ec 1c             	sub    esp,0x1c
c001ee97:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ee9b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ee9f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001eea2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001eea6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eeaa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001eeae:	85 db                	test   ebx,ebx
c001eeb0:	0f 88 8e 00 00 00    	js     c001ef44 <__divdi3+0xb4>
c001eeb6:	89 dd                	mov    ebp,ebx
c001eeb8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001eec0:	89 d3                	mov    ebx,edx
c001eec2:	85 d2                	test   edx,edx
c001eec4:	79 0d                	jns    c001eed3 <__divdi3+0x43>
c001eec6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001eeca:	f7 d8                	neg    eax
c001eecc:	83 d2 00             	adc    edx,0x0
c001eecf:	f7 da                	neg    edx
c001eed1:	89 d3                	mov    ebx,edx
c001eed3:	89 c7                	mov    edi,eax
c001eed5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001eed8:	85 db                	test   ebx,ebx
c001eeda:	75 48                	jne    c001ef24 <__divdi3+0x94>
c001eedc:	39 ef                	cmp    edi,ebp
c001eede:	76 24                	jbe    c001ef04 <__divdi3+0x74>
c001eee0:	89 ea                	mov    edx,ebp
c001eee2:	f7 f7                	div    edi
c001eee4:	89 c1                	mov    ecx,eax
c001eee6:	31 f6                	xor    esi,esi
c001eee8:	89 c8                	mov    eax,ecx
c001eeea:	89 f2                	mov    edx,esi
c001eeec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001eef0:	85 c9                	test   ecx,ecx
c001eef2:	74 07                	je     c001eefb <__divdi3+0x6b>
c001eef4:	f7 d8                	neg    eax
c001eef6:	83 d2 00             	adc    edx,0x0
c001eef9:	f7 da                	neg    edx
c001eefb:	83 c4 1c             	add    esp,0x1c
c001eefe:	5b                   	pop    ebx
c001eeff:	5e                   	pop    esi
c001ef00:	5f                   	pop    edi
c001ef01:	5d                   	pop    ebp
c001ef02:	c3                   	ret    
c001ef03:	90                   	nop
c001ef04:	85 ff                	test   edi,edi
c001ef06:	75 0b                	jne    c001ef13 <__divdi3+0x83>
c001ef08:	b8 01 00 00 00       	mov    eax,0x1
c001ef0d:	31 d2                	xor    edx,edx
c001ef0f:	f7 f3                	div    ebx
c001ef11:	89 c7                	mov    edi,eax
c001ef13:	31 d2                	xor    edx,edx
c001ef15:	89 e8                	mov    eax,ebp
c001ef17:	f7 f7                	div    edi
c001ef19:	89 c6                	mov    esi,eax
c001ef1b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ef1e:	f7 f7                	div    edi
c001ef20:	89 c1                	mov    ecx,eax
c001ef22:	eb c4                	jmp    c001eee8 <__divdi3+0x58>
c001ef24:	39 eb                	cmp    ebx,ebp
c001ef26:	77 3c                	ja     c001ef64 <__divdi3+0xd4>
c001ef28:	0f bd f3             	bsr    esi,ebx
c001ef2b:	83 f6 1f             	xor    esi,0x1f
c001ef2e:	75 40                	jne    c001ef70 <__divdi3+0xe0>
c001ef30:	39 eb                	cmp    ebx,ebp
c001ef32:	72 09                	jb     c001ef3d <__divdi3+0xad>
c001ef34:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001ef37:	0f 87 97 00 00 00    	ja     c001efd4 <__divdi3+0x144>
c001ef3d:	b9 01 00 00 00       	mov    ecx,0x1
c001ef42:	eb a4                	jmp    c001eee8 <__divdi3+0x58>
c001ef44:	f7 d9                	neg    ecx
c001ef46:	83 d3 00             	adc    ebx,0x0
c001ef49:	f7 db                	neg    ebx
c001ef4b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ef4e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ef52:	89 dd                	mov    ebp,ebx
c001ef54:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001ef5c:	e9 5f ff ff ff       	jmp    c001eec0 <__divdi3+0x30>
c001ef61:	8d 76 00             	lea    esi,[esi+0x0]
c001ef64:	31 f6                	xor    esi,esi
c001ef66:	31 c9                	xor    ecx,ecx
c001ef68:	e9 7b ff ff ff       	jmp    c001eee8 <__divdi3+0x58>
c001ef6d:	8d 76 00             	lea    esi,[esi+0x0]
c001ef70:	b8 20 00 00 00       	mov    eax,0x20
c001ef75:	29 f0                	sub    eax,esi
c001ef77:	89 f1                	mov    ecx,esi
c001ef79:	d3 e3                	shl    ebx,cl
c001ef7b:	89 fa                	mov    edx,edi
c001ef7d:	88 c1                	mov    cl,al
c001ef7f:	d3 ea                	shr    edx,cl
c001ef81:	09 da                	or     edx,ebx
c001ef83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ef87:	89 f1                	mov    ecx,esi
c001ef89:	d3 e7                	shl    edi,cl
c001ef8b:	89 eb                	mov    ebx,ebp
c001ef8d:	88 c1                	mov    cl,al
c001ef8f:	d3 eb                	shr    ebx,cl
c001ef91:	89 f1                	mov    ecx,esi
c001ef93:	d3 e5                	shl    ebp,cl
c001ef95:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001ef98:	88 c1                	mov    cl,al
c001ef9a:	d3 ea                	shr    edx,cl
c001ef9c:	09 d5                	or     ebp,edx
c001ef9e:	89 e8                	mov    eax,ebp
c001efa0:	89 da                	mov    edx,ebx
c001efa2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001efa6:	89 d3                	mov    ebx,edx
c001efa8:	89 c5                	mov    ebp,eax
c001efaa:	f7 e7                	mul    edi
c001efac:	39 d3                	cmp    ebx,edx
c001efae:	72 18                	jb     c001efc8 <__divdi3+0x138>
c001efb0:	74 0a                	je     c001efbc <__divdi3+0x12c>
c001efb2:	89 e9                	mov    ecx,ebp
c001efb4:	31 f6                	xor    esi,esi
c001efb6:	e9 2d ff ff ff       	jmp    c001eee8 <__divdi3+0x58>
c001efbb:	90                   	nop
c001efbc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001efbf:	89 f1                	mov    ecx,esi
c001efc1:	d3 e7                	shl    edi,cl
c001efc3:	39 c7                	cmp    edi,eax
c001efc5:	73 eb                	jae    c001efb2 <__divdi3+0x122>
c001efc7:	90                   	nop
c001efc8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001efcb:	31 f6                	xor    esi,esi
c001efcd:	e9 16 ff ff ff       	jmp    c001eee8 <__divdi3+0x58>
c001efd2:	66 90                	xchg   ax,ax
c001efd4:	31 c9                	xor    ecx,ecx
c001efd6:	e9 0d ff ff ff       	jmp    c001eee8 <__divdi3+0x58>
c001efdb:	90                   	nop

c001efdc <__moddi3>:
c001efdc:	55                   	push   ebp
c001efdd:	57                   	push   edi
c001efde:	56                   	push   esi
c001efdf:	53                   	push   ebx
c001efe0:	83 ec 2c             	sub    esp,0x2c
c001efe3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001efe7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001efeb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001efef:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001eff3:	85 db                	test   ebx,ebx
c001eff5:	0f 88 85 00 00 00    	js     c001f080 <__moddi3+0xa4>
c001effb:	89 de                	mov    esi,ebx
c001effd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f005:	89 d7                	mov    edi,edx
c001f007:	85 d2                	test   edx,edx
c001f009:	79 09                	jns    c001f014 <__moddi3+0x38>
c001f00b:	f7 d8                	neg    eax
c001f00d:	83 d2 00             	adc    edx,0x0
c001f010:	f7 da                	neg    edx
c001f012:	89 d7                	mov    edi,edx
c001f014:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f018:	89 cd                	mov    ebp,ecx
c001f01a:	85 ff                	test   edi,edi
c001f01c:	75 52                	jne    c001f070 <__moddi3+0x94>
c001f01e:	89 c3                	mov    ebx,eax
c001f020:	39 f0                	cmp    eax,esi
c001f022:	76 24                	jbe    c001f048 <__moddi3+0x6c>
c001f024:	89 c8                	mov    eax,ecx
c001f026:	89 f2                	mov    edx,esi
c001f028:	f7 f3                	div    ebx
c001f02a:	89 d6                	mov    esi,edx
c001f02c:	89 f0                	mov    eax,esi
c001f02e:	31 d2                	xor    edx,edx
c001f030:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f034:	85 c9                	test   ecx,ecx
c001f036:	74 07                	je     c001f03f <__moddi3+0x63>
c001f038:	f7 d8                	neg    eax
c001f03a:	83 d2 00             	adc    edx,0x0
c001f03d:	f7 da                	neg    edx
c001f03f:	83 c4 2c             	add    esp,0x2c
c001f042:	5b                   	pop    ebx
c001f043:	5e                   	pop    esi
c001f044:	5f                   	pop    edi
c001f045:	5d                   	pop    ebp
c001f046:	c3                   	ret    
c001f047:	90                   	nop
c001f048:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f04c:	85 db                	test   ebx,ebx
c001f04e:	75 0d                	jne    c001f05d <__moddi3+0x81>
c001f050:	b8 01 00 00 00       	mov    eax,0x1
c001f055:	31 d2                	xor    edx,edx
c001f057:	f7 f7                	div    edi
c001f059:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f05d:	89 f0                	mov    eax,esi
c001f05f:	31 d2                	xor    edx,edx
c001f061:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f065:	f7 f7                	div    edi
c001f067:	89 e8                	mov    eax,ebp
c001f069:	f7 f7                	div    edi
c001f06b:	89 d6                	mov    esi,edx
c001f06d:	eb bd                	jmp    c001f02c <__moddi3+0x50>
c001f06f:	90                   	nop
c001f070:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f074:	39 f7                	cmp    edi,esi
c001f076:	76 20                	jbe    c001f098 <__moddi3+0xbc>
c001f078:	89 c8                	mov    eax,ecx
c001f07a:	89 f2                	mov    edx,esi
c001f07c:	eb b2                	jmp    c001f030 <__moddi3+0x54>
c001f07e:	66 90                	xchg   ax,ax
c001f080:	f7 d9                	neg    ecx
c001f082:	83 d3 00             	adc    ebx,0x0
c001f085:	f7 db                	neg    ebx
c001f087:	89 de                	mov    esi,ebx
c001f089:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f091:	e9 6f ff ff ff       	jmp    c001f005 <__moddi3+0x29>
c001f096:	66 90                	xchg   ax,ax
c001f098:	0f bd c7             	bsr    eax,edi
c001f09b:	83 f0 1f             	xor    eax,0x1f
c001f09e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f0a2:	75 24                	jne    c001f0c8 <__moddi3+0xec>
c001f0a4:	39 f7                	cmp    edi,esi
c001f0a6:	72 06                	jb     c001f0ae <__moddi3+0xd2>
c001f0a8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f0ac:	77 0c                	ja     c001f0ba <__moddi3+0xde>
c001f0ae:	89 e9                	mov    ecx,ebp
c001f0b0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f0b4:	19 fe                	sbb    esi,edi
c001f0b6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f0ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f0be:	89 f2                	mov    edx,esi
c001f0c0:	e9 6b ff ff ff       	jmp    c001f030 <__moddi3+0x54>
c001f0c5:	8d 76 00             	lea    esi,[esi+0x0]
c001f0c8:	b8 20 00 00 00       	mov    eax,0x20
c001f0cd:	89 c2                	mov    edx,eax
c001f0cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f0d3:	29 da                	sub    edx,ebx
c001f0d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f0d9:	88 d9                	mov    cl,bl
c001f0db:	d3 e7                	shl    edi,cl
c001f0dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0e1:	88 d1                	mov    cl,dl
c001f0e3:	d3 e8                	shr    eax,cl
c001f0e5:	09 c7                	or     edi,eax
c001f0e7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f0eb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f0ef:	89 d8                	mov    eax,ebx
c001f0f1:	88 d9                	mov    cl,bl
c001f0f3:	d3 e7                	shl    edi,cl
c001f0f5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f0f9:	89 f3                	mov    ebx,esi
c001f0fb:	88 d1                	mov    cl,dl
c001f0fd:	d3 eb                	shr    ebx,cl
c001f0ff:	89 c7                	mov    edi,eax
c001f101:	88 c1                	mov    cl,al
c001f103:	d3 e6                	shl    esi,cl
c001f105:	89 e8                	mov    eax,ebp
c001f107:	88 d1                	mov    cl,dl
c001f109:	d3 e8                	shr    eax,cl
c001f10b:	09 f0                	or     eax,esi
c001f10d:	89 f9                	mov    ecx,edi
c001f10f:	d3 e5                	shl    ebp,cl
c001f111:	89 da                	mov    edx,ebx
c001f113:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f117:	89 d3                	mov    ebx,edx
c001f119:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f11d:	89 c6                	mov    esi,eax
c001f11f:	89 d1                	mov    ecx,edx
c001f121:	39 d3                	cmp    ebx,edx
c001f123:	72 27                	jb     c001f14c <__moddi3+0x170>
c001f125:	74 21                	je     c001f148 <__moddi3+0x16c>
c001f127:	29 f5                	sub    ebp,esi
c001f129:	19 cb                	sbb    ebx,ecx
c001f12b:	89 de                	mov    esi,ebx
c001f12d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f131:	d3 e6                	shl    esi,cl
c001f133:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f137:	89 f9                	mov    ecx,edi
c001f139:	d3 ed                	shr    ebp,cl
c001f13b:	09 ee                	or     esi,ebp
c001f13d:	89 f0                	mov    eax,esi
c001f13f:	d3 eb                	shr    ebx,cl
c001f141:	89 da                	mov    edx,ebx
c001f143:	e9 e8 fe ff ff       	jmp    c001f030 <__moddi3+0x54>
c001f148:	39 c5                	cmp    ebp,eax
c001f14a:	73 db                	jae    c001f127 <__moddi3+0x14b>
c001f14c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f150:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f154:	89 d1                	mov    ecx,edx
c001f156:	89 c6                	mov    esi,eax
c001f158:	eb cd                	jmp    c001f127 <__moddi3+0x14b>
c001f15a:	66 90                	xchg   ax,ax

c001f15c <__udivdi3>:
c001f15c:	55                   	push   ebp
c001f15d:	57                   	push   edi
c001f15e:	56                   	push   esi
c001f15f:	53                   	push   ebx
c001f160:	83 ec 1c             	sub    esp,0x1c
c001f163:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f167:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f16b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f16f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f173:	85 d2                	test   edx,edx
c001f175:	75 41                	jne    c001f1b8 <__udivdi3+0x5c>
c001f177:	39 f7                	cmp    edi,esi
c001f179:	76 15                	jbe    c001f190 <__udivdi3+0x34>
c001f17b:	89 e8                	mov    eax,ebp
c001f17d:	89 f2                	mov    edx,esi
c001f17f:	f7 f7                	div    edi
c001f181:	31 db                	xor    ebx,ebx
c001f183:	89 da                	mov    edx,ebx
c001f185:	83 c4 1c             	add    esp,0x1c
c001f188:	5b                   	pop    ebx
c001f189:	5e                   	pop    esi
c001f18a:	5f                   	pop    edi
c001f18b:	5d                   	pop    ebp
c001f18c:	c3                   	ret    
c001f18d:	8d 76 00             	lea    esi,[esi+0x0]
c001f190:	89 f9                	mov    ecx,edi
c001f192:	85 ff                	test   edi,edi
c001f194:	75 0b                	jne    c001f1a1 <__udivdi3+0x45>
c001f196:	b8 01 00 00 00       	mov    eax,0x1
c001f19b:	31 d2                	xor    edx,edx
c001f19d:	f7 f7                	div    edi
c001f19f:	89 c1                	mov    ecx,eax
c001f1a1:	31 d2                	xor    edx,edx
c001f1a3:	89 f0                	mov    eax,esi
c001f1a5:	f7 f1                	div    ecx
c001f1a7:	89 c3                	mov    ebx,eax
c001f1a9:	89 e8                	mov    eax,ebp
c001f1ab:	f7 f1                	div    ecx
c001f1ad:	89 da                	mov    edx,ebx
c001f1af:	83 c4 1c             	add    esp,0x1c
c001f1b2:	5b                   	pop    ebx
c001f1b3:	5e                   	pop    esi
c001f1b4:	5f                   	pop    edi
c001f1b5:	5d                   	pop    ebp
c001f1b6:	c3                   	ret    
c001f1b7:	90                   	nop
c001f1b8:	39 f2                	cmp    edx,esi
c001f1ba:	77 1c                	ja     c001f1d8 <__udivdi3+0x7c>
c001f1bc:	0f bd da             	bsr    ebx,edx
c001f1bf:	83 f3 1f             	xor    ebx,0x1f
c001f1c2:	75 24                	jne    c001f1e8 <__udivdi3+0x8c>
c001f1c4:	39 f2                	cmp    edx,esi
c001f1c6:	72 08                	jb     c001f1d0 <__udivdi3+0x74>
c001f1c8:	39 ef                	cmp    edi,ebp
c001f1ca:	0f 87 84 00 00 00    	ja     c001f254 <__udivdi3+0xf8>
c001f1d0:	b8 01 00 00 00       	mov    eax,0x1
c001f1d5:	eb ac                	jmp    c001f183 <__udivdi3+0x27>
c001f1d7:	90                   	nop
c001f1d8:	31 db                	xor    ebx,ebx
c001f1da:	31 c0                	xor    eax,eax
c001f1dc:	89 da                	mov    edx,ebx
c001f1de:	83 c4 1c             	add    esp,0x1c
c001f1e1:	5b                   	pop    ebx
c001f1e2:	5e                   	pop    esi
c001f1e3:	5f                   	pop    edi
c001f1e4:	5d                   	pop    ebp
c001f1e5:	c3                   	ret    
c001f1e6:	66 90                	xchg   ax,ax
c001f1e8:	b8 20 00 00 00       	mov    eax,0x20
c001f1ed:	29 d8                	sub    eax,ebx
c001f1ef:	88 d9                	mov    cl,bl
c001f1f1:	d3 e2                	shl    edx,cl
c001f1f3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f1f7:	89 fa                	mov    edx,edi
c001f1f9:	88 c1                	mov    cl,al
c001f1fb:	d3 ea                	shr    edx,cl
c001f1fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f201:	09 d1                	or     ecx,edx
c001f203:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f207:	88 d9                	mov    cl,bl
c001f209:	d3 e7                	shl    edi,cl
c001f20b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f20f:	89 f7                	mov    edi,esi
c001f211:	88 c1                	mov    cl,al
c001f213:	d3 ef                	shr    edi,cl
c001f215:	88 d9                	mov    cl,bl
c001f217:	d3 e6                	shl    esi,cl
c001f219:	89 ea                	mov    edx,ebp
c001f21b:	88 c1                	mov    cl,al
c001f21d:	d3 ea                	shr    edx,cl
c001f21f:	09 d6                	or     esi,edx
c001f221:	89 f0                	mov    eax,esi
c001f223:	89 fa                	mov    edx,edi
c001f225:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f229:	89 d7                	mov    edi,edx
c001f22b:	89 c6                	mov    esi,eax
c001f22d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f231:	39 d7                	cmp    edi,edx
c001f233:	72 13                	jb     c001f248 <__udivdi3+0xec>
c001f235:	74 09                	je     c001f240 <__udivdi3+0xe4>
c001f237:	89 f0                	mov    eax,esi
c001f239:	31 db                	xor    ebx,ebx
c001f23b:	e9 43 ff ff ff       	jmp    c001f183 <__udivdi3+0x27>
c001f240:	88 d9                	mov    cl,bl
c001f242:	d3 e5                	shl    ebp,cl
c001f244:	39 c5                	cmp    ebp,eax
c001f246:	73 ef                	jae    c001f237 <__udivdi3+0xdb>
c001f248:	8d 46 ff             	lea    eax,[esi-0x1]
c001f24b:	31 db                	xor    ebx,ebx
c001f24d:	e9 31 ff ff ff       	jmp    c001f183 <__udivdi3+0x27>
c001f252:	66 90                	xchg   ax,ax
c001f254:	31 c0                	xor    eax,eax
c001f256:	e9 28 ff ff ff       	jmp    c001f183 <__udivdi3+0x27>
c001f25b:	90                   	nop

c001f25c <__umoddi3>:
c001f25c:	55                   	push   ebp
c001f25d:	57                   	push   edi
c001f25e:	56                   	push   esi
c001f25f:	53                   	push   ebx
c001f260:	83 ec 1c             	sub    esp,0x1c
c001f263:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f267:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f26b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f26f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f273:	89 da                	mov    edx,ebx
c001f275:	85 c0                	test   eax,eax
c001f277:	75 37                	jne    c001f2b0 <__umoddi3+0x54>
c001f279:	39 df                	cmp    edi,ebx
c001f27b:	76 13                	jbe    c001f290 <__umoddi3+0x34>
c001f27d:	89 f0                	mov    eax,esi
c001f27f:	f7 f7                	div    edi
c001f281:	89 d0                	mov    eax,edx
c001f283:	31 d2                	xor    edx,edx
c001f285:	83 c4 1c             	add    esp,0x1c
c001f288:	5b                   	pop    ebx
c001f289:	5e                   	pop    esi
c001f28a:	5f                   	pop    edi
c001f28b:	5d                   	pop    ebp
c001f28c:	c3                   	ret    
c001f28d:	8d 76 00             	lea    esi,[esi+0x0]
c001f290:	89 fd                	mov    ebp,edi
c001f292:	85 ff                	test   edi,edi
c001f294:	75 0b                	jne    c001f2a1 <__umoddi3+0x45>
c001f296:	b8 01 00 00 00       	mov    eax,0x1
c001f29b:	31 d2                	xor    edx,edx
c001f29d:	f7 f7                	div    edi
c001f29f:	89 c5                	mov    ebp,eax
c001f2a1:	89 d8                	mov    eax,ebx
c001f2a3:	31 d2                	xor    edx,edx
c001f2a5:	f7 f5                	div    ebp
c001f2a7:	89 f0                	mov    eax,esi
c001f2a9:	f7 f5                	div    ebp
c001f2ab:	89 d0                	mov    eax,edx
c001f2ad:	eb d4                	jmp    c001f283 <__umoddi3+0x27>
c001f2af:	90                   	nop
c001f2b0:	89 f1                	mov    ecx,esi
c001f2b2:	39 d8                	cmp    eax,ebx
c001f2b4:	76 0a                	jbe    c001f2c0 <__umoddi3+0x64>
c001f2b6:	89 f0                	mov    eax,esi
c001f2b8:	83 c4 1c             	add    esp,0x1c
c001f2bb:	5b                   	pop    ebx
c001f2bc:	5e                   	pop    esi
c001f2bd:	5f                   	pop    edi
c001f2be:	5d                   	pop    ebp
c001f2bf:	c3                   	ret    
c001f2c0:	0f bd e8             	bsr    ebp,eax
c001f2c3:	83 f5 1f             	xor    ebp,0x1f
c001f2c6:	75 1c                	jne    c001f2e4 <__umoddi3+0x88>
c001f2c8:	39 d8                	cmp    eax,ebx
c001f2ca:	72 04                	jb     c001f2d0 <__umoddi3+0x74>
c001f2cc:	39 f7                	cmp    edi,esi
c001f2ce:	77 08                	ja     c001f2d8 <__umoddi3+0x7c>
c001f2d0:	89 da                	mov    edx,ebx
c001f2d2:	29 fe                	sub    esi,edi
c001f2d4:	19 c2                	sbb    edx,eax
c001f2d6:	89 f1                	mov    ecx,esi
c001f2d8:	89 c8                	mov    eax,ecx
c001f2da:	83 c4 1c             	add    esp,0x1c
c001f2dd:	5b                   	pop    ebx
c001f2de:	5e                   	pop    esi
c001f2df:	5f                   	pop    edi
c001f2e0:	5d                   	pop    ebp
c001f2e1:	c3                   	ret    
c001f2e2:	66 90                	xchg   ax,ax
c001f2e4:	ba 20 00 00 00       	mov    edx,0x20
c001f2e9:	29 ea                	sub    edx,ebp
c001f2eb:	89 e9                	mov    ecx,ebp
c001f2ed:	d3 e0                	shl    eax,cl
c001f2ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f2f3:	89 f8                	mov    eax,edi
c001f2f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f2f9:	88 d1                	mov    cl,dl
c001f2fb:	d3 e8                	shr    eax,cl
c001f2fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f301:	09 c1                	or     ecx,eax
c001f303:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f307:	89 e9                	mov    ecx,ebp
c001f309:	d3 e7                	shl    edi,cl
c001f30b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f30f:	89 d8                	mov    eax,ebx
c001f311:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f315:	88 d1                	mov    cl,dl
c001f317:	d3 e8                	shr    eax,cl
c001f319:	89 c7                	mov    edi,eax
c001f31b:	89 e9                	mov    ecx,ebp
c001f31d:	d3 e3                	shl    ebx,cl
c001f31f:	89 f0                	mov    eax,esi
c001f321:	88 d1                	mov    cl,dl
c001f323:	d3 e8                	shr    eax,cl
c001f325:	09 d8                	or     eax,ebx
c001f327:	89 e9                	mov    ecx,ebp
c001f329:	d3 e6                	shl    esi,cl
c001f32b:	89 f3                	mov    ebx,esi
c001f32d:	89 fa                	mov    edx,edi
c001f32f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f333:	89 d1                	mov    ecx,edx
c001f335:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f339:	89 c6                	mov    esi,eax
c001f33b:	89 d7                	mov    edi,edx
c001f33d:	39 d1                	cmp    ecx,edx
c001f33f:	72 27                	jb     c001f368 <__umoddi3+0x10c>
c001f341:	74 21                	je     c001f364 <__umoddi3+0x108>
c001f343:	89 ca                	mov    edx,ecx
c001f345:	29 f3                	sub    ebx,esi
c001f347:	19 fa                	sbb    edx,edi
c001f349:	89 d0                	mov    eax,edx
c001f34b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f34f:	d3 e0                	shl    eax,cl
c001f351:	89 e9                	mov    ecx,ebp
c001f353:	d3 eb                	shr    ebx,cl
c001f355:	09 d8                	or     eax,ebx
c001f357:	d3 ea                	shr    edx,cl
c001f359:	83 c4 1c             	add    esp,0x1c
c001f35c:	5b                   	pop    ebx
c001f35d:	5e                   	pop    esi
c001f35e:	5f                   	pop    edi
c001f35f:	5d                   	pop    ebp
c001f360:	c3                   	ret    
c001f361:	8d 76 00             	lea    esi,[esi+0x0]
c001f364:	39 c3                	cmp    ebx,eax
c001f366:	73 db                	jae    c001f343 <__umoddi3+0xe7>
c001f368:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f36c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f370:	89 d7                	mov    edi,edx
c001f372:	89 c6                	mov    esi,eax
c001f374:	eb cd                	jmp    c001f343 <__umoddi3+0xe7>
c001f376:	66 90                	xchg   ax,ax
c001f378:	66 90                	xchg   ax,ax
c001f37a:	66 90                	xchg   ax,ax
c001f37c:	66 90                	xchg   ax,ax
c001f37e:	66 90                	xchg   ax,ax

c001f380 <fabs>:
c001f380:	83 ec 0c             	sub    esp,0xc
c001f383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f387:	89 04 24             	mov    DWORD PTR [esp],eax
c001f38a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f38e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001f393:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f397:	dd 04 24             	fld    QWORD PTR [esp]
c001f39a:	83 c4 0c             	add    esp,0xc
c001f39d:	c3                   	ret    
c001f39e:	66 90                	xchg   ax,ax

c001f3a0 <lrint>:
c001f3a0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001f3a4:	83 ec 04             	sub    esp,0x4
c001f3a7:	db 1c 24             	fistp  DWORD PTR [esp]
c001f3aa:	58                   	pop    eax
c001f3ab:	c3                   	ret    

c001f3ac <lrintf>:
c001f3ac:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001f3b0:	83 ec 04             	sub    esp,0x4
c001f3b3:	db 1c 24             	fistp  DWORD PTR [esp]
c001f3b6:	58                   	pop    eax
c001f3b7:	c3                   	ret    

Disassembly of section .init:

c001f3b8 <_init>:
c001f3b8:	55                   	push   ebp
c001f3b9:	89 e5                	mov    ebp,esp
c001f3bb:	e8 58 0d fe ff       	call   c0000118 <frame_dummy>
c001f3c0:	e8 a3 fa ff ff       	call   c001ee68 <__do_global_ctors_aux>
c001f3c5:	5d                   	pop    ebp
c001f3c6:	c3                   	ret    

Disassembly of section .fini:

c001f3c7 <_fini>:
c001f3c7:	55                   	push   ebp
c001f3c8:	89 e5                	mov    ebp,esp
c001f3ca:	e8 d9 0c fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001f3cf:	5d                   	pop    ebp
c001f3d0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f3d2 <Computer::~Computer()>:
c001f3d2:	83 ec 0c             	sub    esp,0xc
c001f3d5:	ba e4 0e 02 c0       	mov    edx,0xc0020ee4
c001f3da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3de:	89 10                	mov    DWORD PTR [eax],edx
c001f3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3e4:	83 ec 0c             	sub    esp,0xc
c001f3e7:	50                   	push   eax
c001f3e8:	e8 b5 0f ff ff       	call   c00103a2 <Device::~Device()>
c001f3ed:	83 c4 10             	add    esp,0x10
c001f3f0:	90                   	nop
c001f3f1:	83 c4 0c             	add    esp,0xc
c001f3f4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f3f6 <Computer::~Computer()>:
c001f3f6:	83 ec 0c             	sub    esp,0xc
c001f3f9:	83 ec 0c             	sub    esp,0xc
c001f3fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f400:	e8 cd ff ff ff       	call   c001f3d2 <Computer::~Computer()>
c001f405:	83 c4 10             	add    esp,0x10
c001f408:	83 ec 08             	sub    esp,0x8
c001f40b:	68 ec 01 00 00       	push   0x1ec
c001f410:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f414:	e8 fc fb fe ff       	call   c000f015 <operator delete(void*, unsigned long)>
c001f419:	83 c4 10             	add    esp,0x10
c001f41c:	83 c4 0c             	add    esp,0xc
c001f41f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f420 <idleCommon()>:
c001f420:	83 ec 0c             	sub    esp,0xc
c001f423:	e8 b6 93 ff ff       	call   c00187de <lockScheduler()>
c001f428:	e8 e5 96 ff ff       	call   c0018b12 <schedule()>
c001f42d:	83 c4 0c             	add    esp,0xc
c001f430:	e9 ab 93 ff ff       	jmp    c00187e0 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001f435 <CPU::readCR3()>:
c001f435:	83 ec 10             	sub    esp,0x10
c001f438:	0f 20 d8             	mov    eax,cr3
c001f43b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f43f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f443:	83 c4 10             	add    esp,0x10
c001f446:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001f447 <CPU::writeCR3(unsigned long)>:
c001f447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f44b:	0f 22 d8             	mov    cr3,eax
c001f44e:	90                   	nop
c001f44f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f450 <LinkedList<UnixFile>::~LinkedList()>:
c001f450:	90                   	nop
c001f451:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f452 <LinkedList<UnixFile>::LinkedList()>:
c001f452:	83 ec 0c             	sub    esp,0xc
c001f455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f459:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f45f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f463:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f46a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f46e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f479:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f47f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f483:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f48e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f495:	83 ec 0c             	sub    esp,0xc
c001f498:	68 5a 11 02 c0       	push   0xc002115a
c001f49d:	e8 53 fc fe ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001f4a2:	83 c4 10             	add    esp,0x10
c001f4a5:	90                   	nop
c001f4a6:	83 c4 0c             	add    esp,0xc
c001f4a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f4aa <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f4aa:	83 ec 0c             	sub    esp,0xc
c001f4ad:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f4b2:	75 10                	jne    c001f4c4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f4b4:	83 ec 0c             	sub    esp,0xc
c001f4b7:	68 74 11 02 c0       	push   0xc0021174
c001f4bc:	e8 c9 63 ff ff       	call   c001588a <Krnl::panic(char const*)>
c001f4c1:	83 c4 10             	add    esp,0x10
c001f4c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4c8:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4ca:	85 c0                	test   eax,eax
c001f4cc:	74 34                	je     c001f502 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f4ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4d5:	85 c0                	test   eax,eax
c001f4d7:	74 29                	je     c001f502 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f4d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4dd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4e4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f4e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f4f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4f9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f500:	eb 65                	jmp    c001f567 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f506:	8b 00                	mov    eax,DWORD PTR [eax]
c001f508:	85 c0                	test   eax,eax
c001f50a:	75 4b                	jne    c001f557 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f50c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f510:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f513:	85 c0                	test   eax,eax
c001f515:	75 40                	jne    c001f557 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f51b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f51f:	89 10                	mov    DWORD PTR [eax],edx
c001f521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f525:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f529:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f530:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f533:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f53a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f53e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f541:	85 c0                	test   eax,eax
c001f543:	74 22                	je     c001f567 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f545:	83 ec 0c             	sub    esp,0xc
c001f548:	68 96 11 02 c0       	push   0xc0021196
c001f54d:	e8 38 63 ff ff       	call   c001588a <Krnl::panic(char const*)>
c001f552:	83 c4 10             	add    esp,0x10
c001f555:	eb 10                	jmp    c001f567 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f557:	83 ec 0c             	sub    esp,0xc
c001f55a:	68 a0 11 02 c0       	push   0xc00211a0
c001f55f:	e8 26 63 ff ff       	call   c001588a <Krnl::panic(char const*)>
c001f564:	83 c4 10             	add    esp,0x10
c001f567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f56b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f56e:	8d 50 01             	lea    edx,[eax+0x1]
c001f571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f575:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f578:	90                   	nop
c001f579:	83 c4 0c             	add    esp,0xc
c001f57c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f57e <LinkedList<UnixFile>::getFirstElement()>:
c001f57e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f582:	8b 00                	mov    eax,DWORD PTR [eax]
c001f584:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f586 <LinkedList<UnixFile>::removeFirst()>:
c001f586:	83 ec 0c             	sub    esp,0xc
c001f589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f58d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f58f:	85 c0                	test   eax,eax
c001f591:	75 12                	jne    c001f5a5 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f593:	83 ec 0c             	sub    esp,0xc
c001f596:	68 ac 11 02 c0       	push   0xc00211ac
c001f59b:	e8 ea 62 ff ff       	call   c001588a <Krnl::panic(char const*)>
c001f5a0:	83 c4 10             	add    esp,0x10
c001f5a3:	eb 7e                	jmp    c001f623 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f5a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5af:	85 c0                	test   eax,eax
c001f5b1:	74 10                	je     c001f5c3 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f5b3:	83 ec 0c             	sub    esp,0xc
c001f5b6:	68 f7 11 02 c0       	push   0xc00211f7
c001f5bb:	e8 ca 62 ff ff       	call   c001588a <Krnl::panic(char const*)>
c001f5c0:	83 c4 10             	add    esp,0x10
c001f5c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5c7:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5cc:	85 c0                	test   eax,eax
c001f5ce:	75 33                	jne    c001f603 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f5d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5d4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f5da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5de:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f5e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5e9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5ec:	83 f8 01             	cmp    eax,0x1
c001f5ef:	74 21                	je     c001f612 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f5f1:	83 ec 0c             	sub    esp,0xc
c001f5f4:	68 d0 11 02 c0       	push   0xc00211d0
c001f5f9:	e8 8c 62 ff ff       	call   c001588a <Krnl::panic(char const*)>
c001f5fe:	83 c4 10             	add    esp,0x10
c001f601:	eb 0f                	jmp    c001f612 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f607:	8b 00                	mov    eax,DWORD PTR [eax]
c001f609:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f60c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f610:	89 10                	mov    DWORD PTR [eax],edx
c001f612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f616:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f619:	8d 50 ff             	lea    edx,[eax-0x1]
c001f61c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f620:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f623:	83 c4 0c             	add    esp,0xc
c001f626:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f628 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f628:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f62c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f62f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f630 <DriverlessDevice::~DriverlessDevice()>:
c001f630:	ba 64 18 02 c0       	mov    edx,0xc0021864
c001f635:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f639:	89 10                	mov    DWORD PTR [eax],edx
c001f63b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f63f:	50                   	push   eax
c001f640:	e8 5d 0d ff ff       	call   c00103a2 <Device::~Device()>
c001f645:	83 c4 04             	add    esp,0x4
c001f648:	90                   	nop
c001f649:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f64a <DriverlessDevice::~DriverlessDevice()>:
c001f64a:	83 ec 0c             	sub    esp,0xc
c001f64d:	83 ec 0c             	sub    esp,0xc
c001f650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f654:	e8 d7 ff ff ff       	call   c001f630 <DriverlessDevice::~DriverlessDevice()>
c001f659:	83 c4 10             	add    esp,0x10
c001f65c:	83 ec 08             	sub    esp,0x8
c001f65f:	68 58 01 00 00       	push   0x158
c001f664:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f668:	e8 a8 f9 fe ff       	call   c000f015 <operator delete(void*, unsigned long)>
c001f66d:	83 c4 10             	add    esp,0x10
c001f670:	83 c4 0c             	add    esp,0xc
c001f673:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f674 <LinkedList<Device>::addElement(Device*)>:
c001f674:	83 ec 0c             	sub    esp,0xc
c001f677:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f67c:	75 10                	jne    c001f68e <LinkedList<Device>::addElement(Device*)+0x1a>
c001f67e:	83 ec 0c             	sub    esp,0xc
c001f681:	68 74 11 02 c0       	push   0xc0021174
c001f686:	e8 ff 61 ff ff       	call   c001588a <Krnl::panic(char const*)>
c001f68b:	83 c4 10             	add    esp,0x10
c001f68e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f692:	8b 00                	mov    eax,DWORD PTR [eax]
c001f694:	85 c0                	test   eax,eax
c001f696:	74 3a                	je     c001f6d2 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f69c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f69f:	85 c0                	test   eax,eax
c001f6a1:	74 2f                	je     c001f6d2 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f6a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6aa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6ae:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f6b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6bc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f6bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6c6:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f6d0:	eb 68                	jmp    c001f73a <LinkedList<Device>::addElement(Device*)+0xc6>
c001f6d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6d6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6d8:	85 c0                	test   eax,eax
c001f6da:	75 4e                	jne    c001f72a <LinkedList<Device>::addElement(Device*)+0xb6>
c001f6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6e3:	85 c0                	test   eax,eax
c001f6e5:	75 43                	jne    c001f72a <LinkedList<Device>::addElement(Device*)+0xb6>
c001f6e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6ef:	89 10                	mov    DWORD PTR [eax],edx
c001f6f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6f5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6f9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f6fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f700:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f703:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f70d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f711:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f714:	85 c0                	test   eax,eax
c001f716:	74 22                	je     c001f73a <LinkedList<Device>::addElement(Device*)+0xc6>
c001f718:	83 ec 0c             	sub    esp,0xc
c001f71b:	68 96 11 02 c0       	push   0xc0021196
c001f720:	e8 65 61 ff ff       	call   c001588a <Krnl::panic(char const*)>
c001f725:	83 c4 10             	add    esp,0x10
c001f728:	eb 10                	jmp    c001f73a <LinkedList<Device>::addElement(Device*)+0xc6>
c001f72a:	83 ec 0c             	sub    esp,0xc
c001f72d:	68 a0 11 02 c0       	push   0xc00211a0
c001f732:	e8 53 61 ff ff       	call   c001588a <Krnl::panic(char const*)>
c001f737:	83 c4 10             	add    esp,0x10
c001f73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f73e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f741:	8d 50 01             	lea    edx,[eax+0x1]
c001f744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f748:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f74b:	90                   	nop
c001f74c:	83 c4 0c             	add    esp,0xc
c001f74f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f750 <LinkedList<Device>::LinkedList()>:
c001f750:	83 ec 0c             	sub    esp,0xc
c001f753:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f757:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f761:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f76c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f777:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f77d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f781:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f78c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f793:	83 ec 0c             	sub    esp,0xc
c001f796:	68 5a 11 02 c0       	push   0xc002115a
c001f79b:	e8 55 f9 fe ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001f7a0:	83 c4 10             	add    esp,0x10
c001f7a3:	90                   	nop
c001f7a4:	83 c4 0c             	add    esp,0xc
c001f7a7:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001f7a8 <CPU::readCR0()>:
c001f7a8:	83 ec 10             	sub    esp,0x10
c001f7ab:	0f 20 c0             	mov    eax,cr0
c001f7ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f7b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7b6:	83 c4 10             	add    esp,0x10
c001f7b9:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001f7ba <CPU::writeCR0(unsigned long)>:
c001f7ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7be:	0f 22 c0             	mov    cr0,eax
c001f7c1:	90                   	nop
c001f7c2:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001f7c3 <CPU::readDR0()>:
c001f7c3:	83 ec 10             	sub    esp,0x10
c001f7c6:	0f 21 c0             	mov    eax,db0
c001f7c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f7cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7d1:	83 c4 10             	add    esp,0x10
c001f7d4:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001f7d5 <CPU::readDR1()>:
c001f7d5:	83 ec 10             	sub    esp,0x10
c001f7d8:	0f 21 c8             	mov    eax,db1
c001f7db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f7df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7e3:	83 c4 10             	add    esp,0x10
c001f7e6:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001f7e7 <CPU::readDR2()>:
c001f7e7:	83 ec 10             	sub    esp,0x10
c001f7ea:	0f 21 d0             	mov    eax,db2
c001f7ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f7f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7f5:	83 c4 10             	add    esp,0x10
c001f7f8:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001f7f9 <CPU::readDR3()>:
c001f7f9:	83 ec 10             	sub    esp,0x10
c001f7fc:	0f 21 d8             	mov    eax,db3
c001f7ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f803:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f807:	83 c4 10             	add    esp,0x10
c001f80a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001f80b <CPU::readDR6()>:
c001f80b:	83 ec 10             	sub    esp,0x10
c001f80e:	0f 21 f0             	mov    eax,db6
c001f811:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f815:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f819:	83 c4 10             	add    esp,0x10
c001f81c:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001f81d <CPU::readDR7()>:
c001f81d:	83 ec 10             	sub    esp,0x10
c001f820:	0f 21 f8             	mov    eax,db7
c001f823:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f827:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f82b:	83 c4 10             	add    esp,0x10
c001f82e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f830 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f834:	8b 00                	mov    eax,DWORD PTR [eax]
c001f836:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f838 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f838:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f83c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f83e:	85 c0                	test   eax,eax
c001f840:	75 0e                	jne    c001f850 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f846:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f849:	85 c0                	test   eax,eax
c001f84b:	75 03                	jne    c001f850 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f84d:	b0 01                	mov    al,0x1
c001f84f:	c3                   	ret    
c001f850:	b0 00                	mov    al,0x0
c001f852:	90                   	nop
c001f853:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f854 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f854:	83 ec 0c             	sub    esp,0xc
c001f857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f85b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f85d:	85 c0                	test   eax,eax
c001f85f:	75 15                	jne    c001f876 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001f861:	83 ec 0c             	sub    esp,0xc
c001f864:	68 ac 11 02 c0       	push   0xc00211ac
c001f869:	e8 1c 60 ff ff       	call   c001588a <Krnl::panic(char const*)>
c001f86e:	83 c4 10             	add    esp,0x10
c001f871:	e9 88 00 00 00       	jmp    c001f8fe <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001f876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f87a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f87d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f880:	85 c0                	test   eax,eax
c001f882:	0f 95 c0             	setne  al
c001f885:	84 c0                	test   al,al
c001f887:	74 10                	je     c001f899 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001f889:	83 ec 0c             	sub    esp,0xc
c001f88c:	68 f7 11 02 c0       	push   0xc00211f7
c001f891:	e8 f4 5f ff ff       	call   c001588a <Krnl::panic(char const*)>
c001f896:	83 c4 10             	add    esp,0x10
c001f899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f89d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f89f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f8a2:	85 c0                	test   eax,eax
c001f8a4:	0f 94 c0             	sete   al
c001f8a7:	84 c0                	test   al,al
c001f8a9:	74 33                	je     c001f8de <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001f8ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8af:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f8b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f8c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8c7:	83 f8 01             	cmp    eax,0x1
c001f8ca:	74 21                	je     c001f8ed <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001f8cc:	83 ec 0c             	sub    esp,0xc
c001f8cf:	68 d0 11 02 c0       	push   0xc00211d0
c001f8d4:	e8 b1 5f ff ff       	call   c001588a <Krnl::panic(char const*)>
c001f8d9:	83 c4 10             	add    esp,0x10
c001f8dc:	eb 0f                	jmp    c001f8ed <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001f8de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8e2:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8e4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f8e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8eb:	89 10                	mov    DWORD PTR [eax],edx
c001f8ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8f4:	8d 50 ff             	lea    edx,[eax-0x1]
c001f8f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8fb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f8fe:	83 c4 0c             	add    esp,0xc
c001f901:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f902 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f902:	83 ec 0c             	sub    esp,0xc
c001f905:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f90a:	75 10                	jne    c001f91c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001f90c:	83 ec 0c             	sub    esp,0xc
c001f90f:	68 74 11 02 c0       	push   0xc0021174
c001f914:	e8 71 5f ff ff       	call   c001588a <Krnl::panic(char const*)>
c001f919:	83 c4 10             	add    esp,0x10
c001f91c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f920:	8b 00                	mov    eax,DWORD PTR [eax]
c001f922:	85 c0                	test   eax,eax
c001f924:	74 34                	je     c001f95a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001f926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f92a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f92d:	85 c0                	test   eax,eax
c001f92f:	74 29                	je     c001f95a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001f931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f935:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f938:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f93c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f93f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f943:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f947:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f94a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f94e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f951:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f958:	eb 65                	jmp    c001f9bf <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001f95a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f95e:	8b 00                	mov    eax,DWORD PTR [eax]
c001f960:	85 c0                	test   eax,eax
c001f962:	75 4b                	jne    c001f9af <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001f964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f968:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f96b:	85 c0                	test   eax,eax
c001f96d:	75 40                	jne    c001f9af <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001f96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f973:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f977:	89 10                	mov    DWORD PTR [eax],edx
c001f979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f97d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f981:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f988:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f98b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f996:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f999:	85 c0                	test   eax,eax
c001f99b:	74 22                	je     c001f9bf <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001f99d:	83 ec 0c             	sub    esp,0xc
c001f9a0:	68 96 11 02 c0       	push   0xc0021196
c001f9a5:	e8 e0 5e ff ff       	call   c001588a <Krnl::panic(char const*)>
c001f9aa:	83 c4 10             	add    esp,0x10
c001f9ad:	eb 10                	jmp    c001f9bf <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001f9af:	83 ec 0c             	sub    esp,0xc
c001f9b2:	68 a0 11 02 c0       	push   0xc00211a0
c001f9b7:	e8 ce 5e ff ff       	call   c001588a <Krnl::panic(char const*)>
c001f9bc:	83 c4 10             	add    esp,0x10
c001f9bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9c6:	8d 50 01             	lea    edx,[eax+0x1]
c001f9c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9cd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9d0:	90                   	nop
c001f9d1:	83 c4 0c             	add    esp,0xc
c001f9d4:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f9d6 <ACPI::~ACPI()>:
c001f9d6:	83 ec 0c             	sub    esp,0xc
c001f9d9:	ba fc 1f 02 c0       	mov    edx,0xc0021ffc
c001f9de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e2:	89 10                	mov    DWORD PTR [eax],edx
c001f9e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e8:	83 ec 0c             	sub    esp,0xc
c001f9eb:	50                   	push   eax
c001f9ec:	e8 b1 09 ff ff       	call   c00103a2 <Device::~Device()>
c001f9f1:	83 c4 10             	add    esp,0x10
c001f9f4:	90                   	nop
c001f9f5:	83 c4 0c             	add    esp,0xc
c001f9f8:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f9fa <ACPI::~ACPI()>:
c001f9fa:	83 ec 0c             	sub    esp,0xc
c001f9fd:	83 ec 0c             	sub    esp,0xc
c001fa00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa04:	e8 cd ff ff ff       	call   c001f9d6 <ACPI::~ACPI()>
c001fa09:	83 c4 10             	add    esp,0x10
c001fa0c:	83 ec 08             	sub    esp,0x8
c001fa0f:	68 68 22 00 00       	push   0x2268
c001fa14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa18:	e8 f8 f5 fe ff       	call   c000f015 <operator delete(void*, unsigned long)>
c001fa1d:	83 c4 10             	add    esp,0x10
c001fa20:	83 c4 0c             	add    esp,0xc
c001fa23:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fa24 <CPU::~CPU()>:
c001fa24:	83 ec 0c             	sub    esp,0xc
c001fa27:	ba ec 23 02 c0       	mov    edx,0xc00223ec
c001fa2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa30:	89 10                	mov    DWORD PTR [eax],edx
c001fa32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa36:	83 ec 0c             	sub    esp,0xc
c001fa39:	50                   	push   eax
c001fa3a:	e8 63 09 ff ff       	call   c00103a2 <Device::~Device()>
c001fa3f:	83 c4 10             	add    esp,0x10
c001fa42:	90                   	nop
c001fa43:	83 c4 0c             	add    esp,0xc
c001fa46:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fa48 <CPU::~CPU()>:
c001fa48:	83 ec 0c             	sub    esp,0xc
c001fa4b:	83 ec 0c             	sub    esp,0xc
c001fa4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa52:	e8 cd ff ff ff       	call   c001fa24 <CPU::~CPU()>
c001fa57:	83 c4 10             	add    esp,0x10
c001fa5a:	83 ec 08             	sub    esp,0x8
c001fa5d:	68 98 11 00 00       	push   0x1198
c001fa62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa66:	e8 aa f5 fe ff       	call   c000f015 <operator delete(void*, unsigned long)>
c001fa6b:	83 c4 10             	add    esp,0x10
c001fa6e:	83 c4 0c             	add    esp,0xc
c001fa71:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001fa72 <CPU::readCR4()>:
c001fa72:	83 ec 10             	sub    esp,0x10
c001fa75:	0f 20 e0             	mov    eax,cr4
c001fa78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa80:	83 c4 10             	add    esp,0x10
c001fa83:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001fa84 <CPU::writeDR7(unsigned long)>:
c001fa84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa88:	0f 23 f8             	mov    db7,eax
c001fa8b:	90                   	nop
c001fa8c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001fa8d <CPU::writeCR4(unsigned long)>:
c001fa8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa91:	0f 22 e0             	mov    cr4,eax
c001fa94:	90                   	nop
c001fa95:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001fa96 <CPU::readCR2()>:
c001fa96:	83 ec 10             	sub    esp,0x10
c001fa99:	0f 20 d0             	mov    eax,cr2
c001fa9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001faa0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001faa4:	83 c4 10             	add    esp,0x10
c001faa7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001faa8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001faa8:	90                   	nop
c001faa9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001faaa <ThreadControlBlock::ThreadControlBlock()>:
c001faaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faae:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fab5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fab9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fac0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fac4:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001facb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001facf:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001fad6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fada:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001fade:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fae2:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001fae6:	90                   	nop
c001fae7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fae8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fae8:	83 ec 0c             	sub    esp,0xc
c001faeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001faf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb04:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb0f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb19:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb24:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb2b:	83 ec 0c             	sub    esp,0xc
c001fb2e:	68 5a 11 02 c0       	push   0xc002115a
c001fb33:	e8 bd f5 fe ff       	call   c000f0f5 <Dbg::kprintf(char const*, ...)>
c001fb38:	83 c4 10             	add    esp,0x10
c001fb3b:	90                   	nop
c001fb3c:	83 c4 0c             	add    esp,0xc
c001fb3f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fb40 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fb40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb44:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fb47:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fb48 <PCI::~PCI()>:
c001fb48:	83 ec 0c             	sub    esp,0xc
c001fb4b:	ba 6c 30 02 c0       	mov    edx,0xc002306c
c001fb50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb54:	89 10                	mov    DWORD PTR [eax],edx
c001fb56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb5a:	83 ec 0c             	sub    esp,0xc
c001fb5d:	50                   	push   eax
c001fb5e:	e8 4f 02 ff ff       	call   c000fdb2 <Bus::~Bus()>
c001fb63:	83 c4 10             	add    esp,0x10
c001fb66:	90                   	nop
c001fb67:	83 c4 0c             	add    esp,0xc
c001fb6a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fb6c <PCI::~PCI()>:
c001fb6c:	83 ec 0c             	sub    esp,0xc
c001fb6f:	83 ec 0c             	sub    esp,0xc
c001fb72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb76:	e8 cd ff ff ff       	call   c001fb48 <PCI::~PCI()>
c001fb7b:	83 c4 10             	add    esp,0x10
c001fb7e:	83 ec 08             	sub    esp,0x8
c001fb81:	68 58 01 00 00       	push   0x158
c001fb86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb8a:	e8 86 f4 fe ff       	call   c000f015 <operator delete(void*, unsigned long)>
c001fb8f:	83 c4 10             	add    esp,0x10
c001fb92:	83 c4 0c             	add    esp,0xc
c001fb95:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fb96 <IDE::~IDE()>:
c001fb96:	83 ec 0c             	sub    esp,0xc
c001fb99:	ba d0 32 02 c0       	mov    edx,0xc00232d0
c001fb9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba2:	89 10                	mov    DWORD PTR [eax],edx
c001fba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba8:	83 ec 0c             	sub    esp,0xc
c001fbab:	50                   	push   eax
c001fbac:	e8 07 0d ff ff       	call   c00108b8 <HardDiskController::~HardDiskController()>
c001fbb1:	83 c4 10             	add    esp,0x10
c001fbb4:	90                   	nop
c001fbb5:	83 c4 0c             	add    esp,0xc
c001fbb8:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fbba <IDE::~IDE()>:
c001fbba:	83 ec 0c             	sub    esp,0xc
c001fbbd:	83 ec 0c             	sub    esp,0xc
c001fbc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbc4:	e8 cd ff ff ff       	call   c001fb96 <IDE::~IDE()>
c001fbc9:	83 c4 10             	add    esp,0x10
c001fbcc:	83 ec 08             	sub    esp,0x8
c001fbcf:	68 70 02 00 00       	push   0x270
c001fbd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbd8:	e8 38 f4 fe ff       	call   c000f015 <operator delete(void*, unsigned long)>
c001fbdd:	83 c4 10             	add    esp,0x10
c001fbe0:	83 c4 0c             	add    esp,0xc
c001fbe3:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fbe4 <ATA::~ATA()>:
c001fbe4:	83 ec 0c             	sub    esp,0xc
c001fbe7:	ba 20 33 02 c0       	mov    edx,0xc0023320
c001fbec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf0:	89 10                	mov    DWORD PTR [eax],edx
c001fbf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf6:	83 ec 0c             	sub    esp,0xc
c001fbf9:	50                   	push   eax
c001fbfa:	e8 97 0d ff ff       	call   c0010996 <PhysicalDisk::~PhysicalDisk()>
c001fbff:	83 c4 10             	add    esp,0x10
c001fc02:	90                   	nop
c001fc03:	83 c4 0c             	add    esp,0xc
c001fc06:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fc08 <ATA::~ATA()>:
c001fc08:	83 ec 0c             	sub    esp,0xc
c001fc0b:	83 ec 0c             	sub    esp,0xc
c001fc0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc12:	e8 cd ff ff ff       	call   c001fbe4 <ATA::~ATA()>
c001fc17:	83 c4 10             	add    esp,0x10
c001fc1a:	83 ec 08             	sub    esp,0x8
c001fc1d:	68 7c 01 00 00       	push   0x17c
c001fc22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc26:	e8 ea f3 fe ff       	call   c000f015 <operator delete(void*, unsigned long)>
c001fc2b:	83 c4 10             	add    esp,0x10
c001fc2e:	83 c4 0c             	add    esp,0xc
c001fc31:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fc32 <ATAPI::~ATAPI()>:
c001fc32:	83 ec 0c             	sub    esp,0xc
c001fc35:	ba 8c 33 02 c0       	mov    edx,0xc002338c
c001fc3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc3e:	89 10                	mov    DWORD PTR [eax],edx
c001fc40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc44:	83 ec 0c             	sub    esp,0xc
c001fc47:	50                   	push   eax
c001fc48:	e8 49 0d ff ff       	call   c0010996 <PhysicalDisk::~PhysicalDisk()>
c001fc4d:	83 c4 10             	add    esp,0x10
c001fc50:	90                   	nop
c001fc51:	83 c4 0c             	add    esp,0xc
c001fc54:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fc56 <ATAPI::~ATAPI()>:
c001fc56:	83 ec 0c             	sub    esp,0xc
c001fc59:	83 ec 0c             	sub    esp,0xc
c001fc5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc60:	e8 cd ff ff ff       	call   c001fc32 <ATAPI::~ATAPI()>
c001fc65:	83 c4 10             	add    esp,0x10
c001fc68:	83 ec 08             	sub    esp,0x8
c001fc6b:	68 80 01 00 00       	push   0x180
c001fc70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc74:	e8 9c f3 fe ff       	call   c000f015 <operator delete(void*, unsigned long)>
c001fc79:	83 c4 10             	add    esp,0x10
c001fc7c:	83 c4 0c             	add    esp,0xc
c001fc7f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001fc80 <AVX::~AVX()>:
c001fc80:	83 ec 0c             	sub    esp,0xc
c001fc83:	ba c8 33 02 c0       	mov    edx,0xc00233c8
c001fc88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc8c:	89 10                	mov    DWORD PTR [eax],edx
c001fc8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc92:	83 ec 0c             	sub    esp,0xc
c001fc95:	50                   	push   eax
c001fc96:	e8 7f 0d ff ff       	call   c0010a1a <FPU::~FPU()>
c001fc9b:	83 c4 10             	add    esp,0x10
c001fc9e:	90                   	nop
c001fc9f:	83 c4 0c             	add    esp,0xc
c001fca2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001fca4 <AVX::~AVX()>:
c001fca4:	83 ec 0c             	sub    esp,0xc
c001fca7:	83 ec 0c             	sub    esp,0xc
c001fcaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcae:	e8 cd ff ff ff       	call   c001fc80 <AVX::~AVX()>
c001fcb3:	83 c4 10             	add    esp,0x10
c001fcb6:	83 ec 08             	sub    esp,0x8
c001fcb9:	68 58 01 00 00       	push   0x158
c001fcbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcc2:	e8 4e f3 fe ff       	call   c000f015 <operator delete(void*, unsigned long)>
c001fcc7:	83 c4 10             	add    esp,0x10
c001fcca:	83 c4 0c             	add    esp,0xc
c001fccd:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001fcce <MMX::~MMX()>:
c001fcce:	83 ec 0c             	sub    esp,0xc
c001fcd1:	ba 08 34 02 c0       	mov    edx,0xc0023408
c001fcd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcda:	89 10                	mov    DWORD PTR [eax],edx
c001fcdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce0:	83 ec 0c             	sub    esp,0xc
c001fce3:	50                   	push   eax
c001fce4:	e8 31 0d ff ff       	call   c0010a1a <FPU::~FPU()>
c001fce9:	83 c4 10             	add    esp,0x10
c001fcec:	90                   	nop
c001fced:	83 c4 0c             	add    esp,0xc
c001fcf0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001fcf2 <MMX::~MMX()>:
c001fcf2:	83 ec 0c             	sub    esp,0xc
c001fcf5:	83 ec 0c             	sub    esp,0xc
c001fcf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcfc:	e8 cd ff ff ff       	call   c001fcce <MMX::~MMX()>
c001fd01:	83 c4 10             	add    esp,0x10
c001fd04:	83 ec 08             	sub    esp,0x8
c001fd07:	68 58 01 00 00       	push   0x158
c001fd0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd10:	e8 00 f3 fe ff       	call   c000f015 <operator delete(void*, unsigned long)>
c001fd15:	83 c4 10             	add    esp,0x10
c001fd18:	83 c4 0c             	add    esp,0xc
c001fd1b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001fd1c <SSE::~SSE()>:
c001fd1c:	83 ec 0c             	sub    esp,0xc
c001fd1f:	ba 48 34 02 c0       	mov    edx,0xc0023448
c001fd24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd28:	89 10                	mov    DWORD PTR [eax],edx
c001fd2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd2e:	83 ec 0c             	sub    esp,0xc
c001fd31:	50                   	push   eax
c001fd32:	e8 e3 0c ff ff       	call   c0010a1a <FPU::~FPU()>
c001fd37:	83 c4 10             	add    esp,0x10
c001fd3a:	90                   	nop
c001fd3b:	83 c4 0c             	add    esp,0xc
c001fd3e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001fd40 <SSE::~SSE()>:
c001fd40:	83 ec 0c             	sub    esp,0xc
c001fd43:	83 ec 0c             	sub    esp,0xc
c001fd46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd4a:	e8 cd ff ff ff       	call   c001fd1c <SSE::~SSE()>
c001fd4f:	83 c4 10             	add    esp,0x10
c001fd52:	83 ec 08             	sub    esp,0x8
c001fd55:	68 58 01 00 00       	push   0x158
c001fd5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd5e:	e8 b2 f2 fe ff       	call   c000f015 <operator delete(void*, unsigned long)>
c001fd63:	83 c4 10             	add    esp,0x10
c001fd66:	83 c4 0c             	add    esp,0xc
c001fd69:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001fd6a <x87::~x87()>:
c001fd6a:	83 ec 0c             	sub    esp,0xc
c001fd6d:	ba 88 34 02 c0       	mov    edx,0xc0023488
c001fd72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd76:	89 10                	mov    DWORD PTR [eax],edx
c001fd78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd7c:	83 ec 0c             	sub    esp,0xc
c001fd7f:	50                   	push   eax
c001fd80:	e8 95 0c ff ff       	call   c0010a1a <FPU::~FPU()>
c001fd85:	83 c4 10             	add    esp,0x10
c001fd88:	90                   	nop
c001fd89:	83 c4 0c             	add    esp,0xc
c001fd8c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001fd8e <x87::~x87()>:
c001fd8e:	83 ec 0c             	sub    esp,0xc
c001fd91:	83 ec 0c             	sub    esp,0xc
c001fd94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd98:	e8 cd ff ff ff       	call   c001fd6a <x87::~x87()>
c001fd9d:	83 c4 10             	add    esp,0x10
c001fda0:	83 ec 08             	sub    esp,0x8
c001fda3:	68 58 01 00 00       	push   0x158
c001fda8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdac:	e8 64 f2 fe ff       	call   c000f015 <operator delete(void*, unsigned long)>
c001fdb1:	83 c4 10             	add    esp,0x10
c001fdb4:	83 c4 0c             	add    esp,0xc
c001fdb7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fdb8 <IOAPIC::~IOAPIC()>:
c001fdb8:	83 ec 0c             	sub    esp,0xc
c001fdbb:	ba e0 35 02 c0       	mov    edx,0xc00235e0
c001fdc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc4:	89 10                	mov    DWORD PTR [eax],edx
c001fdc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdca:	83 ec 0c             	sub    esp,0xc
c001fdcd:	50                   	push   eax
c001fdce:	e8 cf 05 ff ff       	call   c00103a2 <Device::~Device()>
c001fdd3:	83 c4 10             	add    esp,0x10
c001fdd6:	90                   	nop
c001fdd7:	83 c4 0c             	add    esp,0xc
c001fdda:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fddc <IOAPIC::~IOAPIC()>:
c001fddc:	83 ec 0c             	sub    esp,0xc
c001fddf:	83 ec 0c             	sub    esp,0xc
c001fde2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fde6:	e8 cd ff ff ff       	call   c001fdb8 <IOAPIC::~IOAPIC()>
c001fdeb:	83 c4 10             	add    esp,0x10
c001fdee:	83 ec 08             	sub    esp,0x8
c001fdf1:	68 68 01 00 00       	push   0x168
c001fdf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdfa:	e8 16 f2 fe ff       	call   c000f015 <operator delete(void*, unsigned long)>
c001fdff:	83 c4 10             	add    esp,0x10
c001fe02:	83 c4 0c             	add    esp,0xc
c001fe05:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001fe06 <APIC::~APIC()>:
c001fe06:	83 ec 0c             	sub    esp,0xc
c001fe09:	ba 98 35 02 c0       	mov    edx,0xc0023598
c001fe0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe12:	89 10                	mov    DWORD PTR [eax],edx
c001fe14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe18:	83 ec 0c             	sub    esp,0xc
c001fe1b:	50                   	push   eax
c001fe1c:	e8 c3 10 ff ff       	call   c0010ee4 <InterruptController::~InterruptController()>
c001fe21:	83 c4 10             	add    esp,0x10
c001fe24:	90                   	nop
c001fe25:	83 c4 0c             	add    esp,0xc
c001fe28:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001fe2a <APIC::~APIC()>:
c001fe2a:	83 ec 0c             	sub    esp,0xc
c001fe2d:	83 ec 0c             	sub    esp,0xc
c001fe30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe34:	e8 cd ff ff ff       	call   c001fe06 <APIC::~APIC()>
c001fe39:	83 c4 10             	add    esp,0x10
c001fe3c:	83 ec 08             	sub    esp,0x8
c001fe3f:	68 58 21 00 00       	push   0x2158
c001fe44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe48:	e8 c8 f1 fe ff       	call   c000f015 <operator delete(void*, unsigned long)>
c001fe4d:	83 c4 10             	add    esp,0x10
c001fe50:	83 c4 0c             	add    esp,0xc
c001fe53:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001fe54 <PIC::~PIC()>:
c001fe54:	83 ec 0c             	sub    esp,0xc
c001fe57:	ba 30 36 02 c0       	mov    edx,0xc0023630
c001fe5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe60:	89 10                	mov    DWORD PTR [eax],edx
c001fe62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe66:	83 ec 0c             	sub    esp,0xc
c001fe69:	50                   	push   eax
c001fe6a:	e8 75 10 ff ff       	call   c0010ee4 <InterruptController::~InterruptController()>
c001fe6f:	83 c4 10             	add    esp,0x10
c001fe72:	90                   	nop
c001fe73:	83 c4 0c             	add    esp,0xc
c001fe76:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001fe78 <PIC::~PIC()>:
c001fe78:	83 ec 0c             	sub    esp,0xc
c001fe7b:	83 ec 0c             	sub    esp,0xc
c001fe7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe82:	e8 cd ff ff ff       	call   c001fe54 <PIC::~PIC()>
c001fe87:	83 c4 10             	add    esp,0x10
c001fe8a:	83 ec 08             	sub    esp,0x8
c001fe8d:	68 58 21 00 00       	push   0x2158
c001fe92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe96:	e8 7a f1 fe ff       	call   c000f015 <operator delete(void*, unsigned long)>
c001fe9b:	83 c4 10             	add    esp,0x10
c001fe9e:	83 c4 0c             	add    esp,0xc
c001fea1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001fea2 <APICTimer::~APICTimer()>:
c001fea2:	83 ec 0c             	sub    esp,0xc
c001fea5:	ba 84 36 02 c0       	mov    edx,0xc0023684
c001feaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feae:	89 10                	mov    DWORD PTR [eax],edx
c001feb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb4:	83 ec 0c             	sub    esp,0xc
c001feb7:	50                   	push   eax
c001feb8:	e8 41 2d ff ff       	call   c0012bfe <Timer::~Timer()>
c001febd:	83 c4 10             	add    esp,0x10
c001fec0:	90                   	nop
c001fec1:	83 c4 0c             	add    esp,0xc
c001fec4:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001fec6 <APICTimer::~APICTimer()>:
c001fec6:	83 ec 0c             	sub    esp,0xc
c001fec9:	83 ec 0c             	sub    esp,0xc
c001fecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fed0:	e8 cd ff ff ff       	call   c001fea2 <APICTimer::~APICTimer()>
c001fed5:	83 c4 10             	add    esp,0x10
c001fed8:	83 ec 08             	sub    esp,0x8
c001fedb:	68 60 01 00 00       	push   0x160
c001fee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fee4:	e8 2c f1 fe ff       	call   c000f015 <operator delete(void*, unsigned long)>
c001fee9:	83 c4 10             	add    esp,0x10
c001feec:	83 c4 0c             	add    esp,0xc
c001feef:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001fef0 <PIT::~PIT()>:
c001fef0:	83 ec 0c             	sub    esp,0xc
c001fef3:	ba d4 36 02 c0       	mov    edx,0xc00236d4
c001fef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fefc:	89 10                	mov    DWORD PTR [eax],edx
c001fefe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff02:	83 ec 0c             	sub    esp,0xc
c001ff05:	50                   	push   eax
c001ff06:	e8 f3 2c ff ff       	call   c0012bfe <Timer::~Timer()>
c001ff0b:	83 c4 10             	add    esp,0x10
c001ff0e:	90                   	nop
c001ff0f:	83 c4 0c             	add    esp,0xc
c001ff12:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ff14 <PIT::~PIT()>:
c001ff14:	83 ec 0c             	sub    esp,0xc
c001ff17:	83 ec 0c             	sub    esp,0xc
c001ff1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff1e:	e8 cd ff ff ff       	call   c001fef0 <PIT::~PIT()>
c001ff23:	83 c4 10             	add    esp,0x10
c001ff26:	83 ec 08             	sub    esp,0x8
c001ff29:	68 5c 01 00 00       	push   0x15c
c001ff2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff32:	e8 de f0 fe ff       	call   c000f015 <operator delete(void*, unsigned long)>
c001ff37:	83 c4 10             	add    esp,0x10
c001ff3a:	83 c4 0c             	add    esp,0xc
c001ff3d:	c3                   	ret    
