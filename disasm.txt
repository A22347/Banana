
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 5e d7 00 00       	call   c000d77e <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 f3 e8 01 00       	call   c001e918 <_init>
c0000025:	c3                   	ret    
c0000026:	bb f4 f4 01 c0       	mov    ebx,0xc001f4f4
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb fc f4 01 c0    	cmp    ebx,0xc001f4fc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 e8 b3 03 c0       	mov    eax,0xc003b3e8
c0000049:	3d e8 b3 03 c0       	cmp    eax,0xc003b3e8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 e8 b3 03 c0       	push   0xc003b3e8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 e8 b3 03 c0       	mov    eax,0xc003b3e8
c0000075:	2d e8 b3 03 c0       	sub    eax,0xc003b3e8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 e8 b3 03 c0       	push   0xc003b3e8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 88 b5 03 c0 00 	cmp    BYTE PTR ds:0xc003b588,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 04 f5 01 c0       	mov    ebx,0xc001f504
c00000bb:	81 eb 00 f5 01 c0    	sub    ebx,0xc001f500
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 00 f5 01 c0       	mov    esi,0xc001f500
c00000ca:	a1 8c b5 03 c0       	mov    eax,ds:0xc003b58c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 8c b5 03 c0       	mov    ds:0xc003b58c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 8c b5 03 c0       	mov    eax,ds:0xc003b58c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 e8 b3 03 c0       	push   0xc003b3e8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 88 b5 03 c0 01 	mov    BYTE PTR ds:0xc003b588,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 90 b5 03 c0       	push   0xc003b590
c000012c:	68 e8 b3 03 c0       	push   0xc003b3e8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	90                   	nop
c00001b3:	90                   	nop
c00001b4:	90                   	nop
c00001b5:	90                   	nop
c00001b6:	90                   	nop
c00001b7:	90                   	nop
c00001b8:	90                   	nop
c00001b9:	90                   	nop
c00001ba:	90                   	nop
c00001bb:	90                   	nop
c00001bc:	90                   	nop
c00001bd:	90                   	nop
c00001be:	90                   	nop
c00001bf:	90                   	nop
c00001c0:	90                   	nop
c00001c1:	90                   	nop
c00001c2:	90                   	nop
c00001c3:	90                   	nop
c00001c4:	90                   	nop
c00001c5:	90                   	nop
c00001c6:	90                   	nop
c00001c7:	90                   	nop
c00001c8:	90                   	nop
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	31 c0                	xor    eax,eax
c00001e1:	c3                   	ret    

c00001e2 <goToVM86>:
c00001e2:	fa                   	cli    
c00001e3:	55                   	push   ebp
c00001e4:	89 e5                	mov    ebp,esp
c00001e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001e9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001ec:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001ef:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001f2:	25 ff ff 00 00       	and    eax,0xffff
c00001f7:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001fd:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0000203:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000209:	52                   	push   edx
c000020a:	51                   	push   ecx
c000020b:	68 02 02 02 00       	push   0x20202
c0000210:	53                   	push   ebx
c0000211:	50                   	push   eax
c0000212:	cf                   	iret   

c0000213 <goToUsermode>:
c0000213:	fa                   	cli    
c0000214:	55                   	push   ebp
c0000215:	89 e5                	mov    ebp,esp
c0000217:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000021a:	66 b8 23 00          	mov    ax,0x23
c000021e:	66 8e d8             	mov    ds,ax
c0000221:	66 8e c0             	mov    es,ax
c0000224:	66 8e e0             	mov    fs,ax
c0000227:	66 8e e8             	mov    gs,ax
c000022a:	89 e0                	mov    eax,esp
c000022c:	68 23 00 00 00       	push   0x23
c0000231:	50                   	push   eax
c0000232:	68 02 02 00 00       	push   0x202
c0000237:	68 1b 00 00 00       	push   0x1b
c000023c:	53                   	push   ebx
c000023d:	cf                   	iret   

c000023e <switchToThreadASMFirstTime>:
c000023e:	9c                   	pushf  
c000023f:	fa                   	cli    
c0000240:	50                   	push   eax
c0000241:	53                   	push   ebx
c0000242:	51                   	push   ecx
c0000243:	52                   	push   edx
c0000244:	56                   	push   esi
c0000245:	57                   	push   edi
c0000246:	55                   	push   ebp
c0000247:	e9 11 00 00 00       	jmp    c000025d <commonThreadSwitch>

c000024c <switchToThreadASM>:
c000024c:	9c                   	pushf  
c000024d:	50                   	push   eax
c000024e:	53                   	push   ebx
c000024f:	51                   	push   ecx
c0000250:	52                   	push   edx
c0000251:	56                   	push   esi
c0000252:	57                   	push   edi
c0000253:	55                   	push   ebp
c0000254:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000025a:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c000025d <commonThreadSwitch>:
c000025d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000261:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000267:	8b 06                	mov    eax,DWORD PTR [esi]
c0000269:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000026c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000026f:	0f 20 d9             	mov    ecx,cr3
c0000272:	39 c8                	cmp    eax,ecx
c0000274:	74 03                	je     c0000279 <commonThreadSwitch.doneVAS>
c0000276:	0f 22 d8             	mov    cr3,eax

c0000279 <commonThreadSwitch.doneVAS>:
c0000279:	85 d2                	test   edx,edx
c000027b:	74 4e                	je     c00002cb <commonThreadSwitch.notFirstTime>
c000027d:	fa                   	cli    
c000027e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000281:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000286:	60                   	pusha  
c0000287:	e8 7c 20 01 00       	call   c0012308 <mapVASFirstTime>
c000028c:	61                   	popa   
c000028d:	89 c4                	mov    esp,eax
c000028f:	56                   	push   esi
c0000290:	52                   	push   edx
c0000291:	e8 c0 dc 00 00       	call   c000df56 <changeTSS>
c0000296:	5a                   	pop    edx
c0000297:	5e                   	pop    esi
c0000298:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000029f:	81 fa 01 00 00 00    	cmp    edx,0x1
c00002a5:	74 39                	je     c00002e0 <commonThreadSwitch.cameOffAFork>
c00002a7:	5d                   	pop    ebp
c00002a8:	5f                   	pop    edi
c00002a9:	5e                   	pop    esi
c00002aa:	59                   	pop    ecx
c00002ab:	59                   	pop    ecx
c00002ac:	5b                   	pop    ebx
c00002ad:	58                   	pop    eax
c00002ae:	81 c4 04 00 00 00    	add    esp,0x4
c00002b4:	6a 02                	push   0x2
c00002b6:	9d                   	popf   
c00002b7:	52                   	push   edx
c00002b8:	e8 ac e0 00 00       	call   c000e369 <taskStartupFunction>
c00002bd:	5a                   	pop    edx
c00002be:	50                   	push   eax
c00002bf:	ff d2                	call   edx
c00002c1:	e8 52 e8 00 00       	call   c000eb18 <taskReturned>
c00002c6:	e9 fb ff ff ff       	jmp    c00002c6 <commonThreadSwitch.doneVAS+0x4d>

c00002cb <commonThreadSwitch.notFirstTime>:
c00002cb:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ce:	56                   	push   esi
c00002cf:	52                   	push   edx
c00002d0:	e8 81 dc 00 00       	call   c000df56 <changeTSS>
c00002d5:	5a                   	pop    edx
c00002d6:	5e                   	pop    esi
c00002d7:	5d                   	pop    ebp
c00002d8:	5f                   	pop    edi
c00002d9:	5e                   	pop    esi
c00002da:	5a                   	pop    edx
c00002db:	59                   	pop    ecx
c00002dc:	5b                   	pop    ebx
c00002dd:	58                   	pop    eax
c00002de:	9d                   	popf   
c00002df:	c3                   	ret    

c00002e0 <commonThreadSwitch.cameOffAFork>:
c00002e0:	31 c0                	xor    eax,eax
c00002e2:	31 d2                	xor    edx,edx
c00002e4:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002e7:	e9 a2 02 00 00       	jmp    c000058e <offAForkJumpThingy>

c00002ec <detectCPUID>:
c00002ec:	9c                   	pushf  
c00002ed:	9c                   	pushf  
c00002ee:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002f5:	9d                   	popf   
c00002f6:	9c                   	pushf  
c00002f7:	58                   	pop    eax
c00002f8:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002fb:	9d                   	popf   
c00002fc:	25 00 00 20 00       	and    eax,0x200000
c0000301:	c3                   	ret    

c0000302 <asmQuickAcquireLock>:
c0000302:	55                   	push   ebp
c0000303:	89 e5                	mov    ebp,esp
c0000305:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000308 <asmQuickAcquireLock.retry>:
c0000308:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030d:	72 02                	jb     c0000311 <asmQuickAcquireLock.spin_with_pause>
c000030f:	fa                   	cli    
c0000310:	c3                   	ret    

c0000311 <asmQuickAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmQuickAcquireLock.spin_with_pause>
c000031b:	e9 e8 ff ff ff       	jmp    c0000308 <asmQuickAcquireLock.retry>

c0000320 <asmQuickReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000032a:	5d                   	pop    ebp
c000032b:	c3                   	ret    

c000032c <asmAcquireLock>:
c000032c:	55                   	push   ebp
c000032d:	89 e5                	mov    ebp,esp
c000032f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000332 <asmAcquireLock.retry>:
c0000332:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000337:	72 05                	jb     c000033e <asmAcquireLock.spin_with_pause>
c0000339:	9c                   	pushf  
c000033a:	58                   	pop    eax
c000033b:	fa                   	cli    
c000033c:	5d                   	pop    ebp
c000033d:	c3                   	ret    

c000033e <asmAcquireLock.spin_with_pause>:
c000033e:	f3 90                	pause  
c0000340:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000346:	75 f6                	jne    c000033e <asmAcquireLock.spin_with_pause>
c0000348:	e9 e5 ff ff ff       	jmp    c0000332 <asmAcquireLock.retry>

c000034d <asmReleaseLock>:
c000034d:	55                   	push   ebp
c000034e:	89 e5                	mov    ebp,esp
c0000350:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000353:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000356:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000035c:	52                   	push   edx
c000035d:	9d                   	popf   
c000035e:	5d                   	pop    ebp
c000035f:	c3                   	ret    

c0000360 <loadGDT>:
c0000360:	0f 01 15 64 bb 03 c0 	lgdtd  ds:0xc003bb64
c0000367:	66 b8 10 00          	mov    ax,0x10
c000036b:	66 8e d8             	mov    ds,ax
c000036e:	66 8e c0             	mov    es,ax
c0000371:	66 8e e0             	mov    fs,ax
c0000374:	66 8e e8             	mov    gs,ax
c0000377:	66 8e d0             	mov    ss,ax
c000037a:	e9 00 00 00 00       	jmp    c000037f <flush2>

c000037f <flush2>:
c000037f:	c3                   	ret    

c0000380 <isr0>:
c0000380:	fa                   	cli    
c0000381:	68 00 00 00 00       	push   0x0
c0000386:	68 00 00 00 00       	push   0x0
c000038b:	e9 a2 01 00 00       	jmp    c0000532 <int_common_stub>

c0000390 <isr1>:
c0000390:	fa                   	cli    
c0000391:	6a 00                	push   0x0
c0000393:	6a 01                	push   0x1
c0000395:	e9 98 01 00 00       	jmp    c0000532 <int_common_stub>

c000039a <isr2>:
c000039a:	fa                   	cli    
c000039b:	6a 00                	push   0x0
c000039d:	6a 02                	push   0x2
c000039f:	e9 8e 01 00 00       	jmp    c0000532 <int_common_stub>

c00003a4 <isr3>:
c00003a4:	fa                   	cli    
c00003a5:	6a 00                	push   0x0
c00003a7:	6a 03                	push   0x3
c00003a9:	e9 84 01 00 00       	jmp    c0000532 <int_common_stub>

c00003ae <isr4>:
c00003ae:	fa                   	cli    
c00003af:	6a 00                	push   0x0
c00003b1:	6a 04                	push   0x4
c00003b3:	e9 7a 01 00 00       	jmp    c0000532 <int_common_stub>

c00003b8 <isr5>:
c00003b8:	fa                   	cli    
c00003b9:	6a 00                	push   0x0
c00003bb:	6a 05                	push   0x5
c00003bd:	e9 70 01 00 00       	jmp    c0000532 <int_common_stub>

c00003c2 <isr6>:
c00003c2:	fa                   	cli    
c00003c3:	6a 00                	push   0x0
c00003c5:	6a 06                	push   0x6
c00003c7:	e9 66 01 00 00       	jmp    c0000532 <int_common_stub>

c00003cc <isr7>:
c00003cc:	fa                   	cli    
c00003cd:	6a 00                	push   0x0
c00003cf:	6a 07                	push   0x7
c00003d1:	e9 5c 01 00 00       	jmp    c0000532 <int_common_stub>

c00003d6 <isr8>:
c00003d6:	fa                   	cli    
c00003d7:	6a 08                	push   0x8
c00003d9:	e9 54 01 00 00       	jmp    c0000532 <int_common_stub>

c00003de <isr9>:
c00003de:	fa                   	cli    
c00003df:	6a 00                	push   0x0
c00003e1:	6a 09                	push   0x9
c00003e3:	e9 4a 01 00 00       	jmp    c0000532 <int_common_stub>

c00003e8 <isr10>:
c00003e8:	fa                   	cli    
c00003e9:	6a 0a                	push   0xa
c00003eb:	e9 42 01 00 00       	jmp    c0000532 <int_common_stub>

c00003f0 <isr11>:
c00003f0:	fa                   	cli    
c00003f1:	6a 0b                	push   0xb
c00003f3:	e9 3a 01 00 00       	jmp    c0000532 <int_common_stub>

c00003f8 <isr12>:
c00003f8:	fa                   	cli    
c00003f9:	6a 0c                	push   0xc
c00003fb:	e9 32 01 00 00       	jmp    c0000532 <int_common_stub>

c0000400 <isr13>:
c0000400:	fa                   	cli    
c0000401:	6a 0d                	push   0xd
c0000403:	e9 2a 01 00 00       	jmp    c0000532 <int_common_stub>

c0000408 <isr14>:
c0000408:	fa                   	cli    
c0000409:	6a 0e                	push   0xe
c000040b:	e9 22 01 00 00       	jmp    c0000532 <int_common_stub>

c0000410 <isr15>:
c0000410:	fa                   	cli    
c0000411:	6a 00                	push   0x0
c0000413:	6a 0f                	push   0xf
c0000415:	e9 18 01 00 00       	jmp    c0000532 <int_common_stub>

c000041a <isr16>:
c000041a:	fa                   	cli    
c000041b:	6a 00                	push   0x0
c000041d:	6a 10                	push   0x10
c000041f:	e9 0e 01 00 00       	jmp    c0000532 <int_common_stub>

c0000424 <isr17>:
c0000424:	fa                   	cli    
c0000425:	6a 00                	push   0x0
c0000427:	6a 11                	push   0x11
c0000429:	e9 04 01 00 00       	jmp    c0000532 <int_common_stub>

c000042e <isr18>:
c000042e:	fa                   	cli    
c000042f:	6a 00                	push   0x0
c0000431:	6a 12                	push   0x12
c0000433:	e9 fa 00 00 00       	jmp    c0000532 <int_common_stub>

c0000438 <isr96>:
c0000438:	fa                   	cli    
c0000439:	6a 00                	push   0x0
c000043b:	6a 60                	push   0x60
c000043d:	e9 20 01 00 00       	jmp    c0000562 <syscall_common_stub>

c0000442 <irq0>:
c0000442:	fa                   	cli    
c0000443:	6a 00                	push   0x0
c0000445:	6a 20                	push   0x20
c0000447:	e9 e6 00 00 00       	jmp    c0000532 <int_common_stub>

c000044c <irq1>:
c000044c:	fa                   	cli    
c000044d:	6a 00                	push   0x0
c000044f:	6a 21                	push   0x21
c0000451:	e9 dc 00 00 00       	jmp    c0000532 <int_common_stub>

c0000456 <irq2>:
c0000456:	fa                   	cli    
c0000457:	6a 00                	push   0x0
c0000459:	6a 22                	push   0x22
c000045b:	e9 d2 00 00 00       	jmp    c0000532 <int_common_stub>

c0000460 <irq3>:
c0000460:	fa                   	cli    
c0000461:	6a 00                	push   0x0
c0000463:	6a 23                	push   0x23
c0000465:	e9 c8 00 00 00       	jmp    c0000532 <int_common_stub>

c000046a <irq4>:
c000046a:	fa                   	cli    
c000046b:	6a 00                	push   0x0
c000046d:	6a 24                	push   0x24
c000046f:	e9 be 00 00 00       	jmp    c0000532 <int_common_stub>

c0000474 <irq5>:
c0000474:	fa                   	cli    
c0000475:	6a 00                	push   0x0
c0000477:	6a 25                	push   0x25
c0000479:	e9 b4 00 00 00       	jmp    c0000532 <int_common_stub>

c000047e <irq6>:
c000047e:	fa                   	cli    
c000047f:	6a 00                	push   0x0
c0000481:	6a 26                	push   0x26
c0000483:	e9 aa 00 00 00       	jmp    c0000532 <int_common_stub>

c0000488 <irq7>:
c0000488:	fa                   	cli    
c0000489:	6a 00                	push   0x0
c000048b:	6a 27                	push   0x27
c000048d:	e9 a0 00 00 00       	jmp    c0000532 <int_common_stub>

c0000492 <irq8>:
c0000492:	fa                   	cli    
c0000493:	6a 00                	push   0x0
c0000495:	6a 28                	push   0x28
c0000497:	e9 96 00 00 00       	jmp    c0000532 <int_common_stub>

c000049c <irq9>:
c000049c:	fa                   	cli    
c000049d:	6a 00                	push   0x0
c000049f:	6a 29                	push   0x29
c00004a1:	e9 8c 00 00 00       	jmp    c0000532 <int_common_stub>

c00004a6 <irq10>:
c00004a6:	fa                   	cli    
c00004a7:	6a 00                	push   0x0
c00004a9:	6a 2a                	push   0x2a
c00004ab:	e9 82 00 00 00       	jmp    c0000532 <int_common_stub>

c00004b0 <irq11>:
c00004b0:	fa                   	cli    
c00004b1:	6a 00                	push   0x0
c00004b3:	6a 2b                	push   0x2b
c00004b5:	e9 78 00 00 00       	jmp    c0000532 <int_common_stub>

c00004ba <irq12>:
c00004ba:	fa                   	cli    
c00004bb:	6a 00                	push   0x0
c00004bd:	6a 2c                	push   0x2c
c00004bf:	e9 6e 00 00 00       	jmp    c0000532 <int_common_stub>

c00004c4 <irq13>:
c00004c4:	fa                   	cli    
c00004c5:	6a 00                	push   0x0
c00004c7:	6a 2d                	push   0x2d
c00004c9:	e9 64 00 00 00       	jmp    c0000532 <int_common_stub>

c00004ce <irq14>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 2e                	push   0x2e
c00004d3:	e9 5a 00 00 00       	jmp    c0000532 <int_common_stub>

c00004d8 <irq15>:
c00004d8:	fa                   	cli    
c00004d9:	6a 00                	push   0x0
c00004db:	6a 2f                	push   0x2f
c00004dd:	e9 50 00 00 00       	jmp    c0000532 <int_common_stub>

c00004e2 <irq16>:
c00004e2:	fa                   	cli    
c00004e3:	6a 00                	push   0x0
c00004e5:	6a 30                	push   0x30
c00004e7:	e9 46 00 00 00       	jmp    c0000532 <int_common_stub>

c00004ec <irq17>:
c00004ec:	fa                   	cli    
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 31                	push   0x31
c00004f1:	e9 3c 00 00 00       	jmp    c0000532 <int_common_stub>

c00004f6 <irq18>:
c00004f6:	fa                   	cli    
c00004f7:	6a 00                	push   0x0
c00004f9:	6a 32                	push   0x32
c00004fb:	e9 32 00 00 00       	jmp    c0000532 <int_common_stub>

c0000500 <irq19>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 33                	push   0x33
c0000505:	e9 28 00 00 00       	jmp    c0000532 <int_common_stub>

c000050a <irq20>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 34                	push   0x34
c000050f:	e9 1e 00 00 00       	jmp    c0000532 <int_common_stub>

c0000514 <irq21>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 35                	push   0x35
c0000519:	e9 14 00 00 00       	jmp    c0000532 <int_common_stub>

c000051e <irq22>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 36                	push   0x36
c0000523:	e9 0a 00 00 00       	jmp    c0000532 <int_common_stub>

c0000528 <irq23>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 37                	push   0x37
c000052d:	e9 00 00 00 00       	jmp    c0000532 <int_common_stub>

c0000532 <int_common_stub>:
c0000532:	60                   	pusha  
c0000533:	1e                   	push   ds
c0000534:	06                   	push   es
c0000535:	0f a0                	push   fs
c0000537:	0f a8                	push   gs
c0000539:	66 b8 10 00          	mov    ax,0x10
c000053d:	66 8e d8             	mov    ds,ax
c0000540:	66 8e c0             	mov    es,ax
c0000543:	66 8e e0             	mov    fs,ax
c0000546:	66 8e e8             	mov    gs,ax
c0000549:	89 e1                	mov    ecx,esp
c000054b:	51                   	push   ecx
c000054c:	b9 cb 3f 01 c0       	mov    ecx,0xc0013fcb
c0000551:	ff d1                	call   ecx
c0000553:	59                   	pop    ecx
c0000554:	0f a9                	pop    gs
c0000556:	0f a1                	pop    fs
c0000558:	07                   	pop    es
c0000559:	1f                   	pop    ds
c000055a:	61                   	popa   
c000055b:	81 c4 08 00 00 00    	add    esp,0x8
c0000561:	cf                   	iret   

c0000562 <syscall_common_stub>:
c0000562:	60                   	pusha  
c0000563:	1e                   	push   ds
c0000564:	06                   	push   es
c0000565:	0f a0                	push   fs
c0000567:	0f a8                	push   gs
c0000569:	66 b8 10 00          	mov    ax,0x10
c000056d:	66 8e d8             	mov    ds,ax
c0000570:	66 8e c0             	mov    es,ax
c0000573:	66 8e e0             	mov    fs,ax
c0000576:	66 8e e8             	mov    gs,ax
c0000579:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000057f:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000582:	89 e1                	mov    ecx,esp
c0000584:	51                   	push   ecx
c0000585:	fb                   	sti    
c0000586:	b9 cb 3f 01 c0       	mov    ecx,0xc0013fcb
c000058b:	ff d1                	call   ecx
c000058d:	59                   	pop    ecx

c000058e <offAForkJumpThingy>:
c000058e:	0f a9                	pop    gs
c0000590:	0f a1                	pop    fs
c0000592:	07                   	pop    es
c0000593:	1f                   	pop    ds
c0000594:	61                   	popa   
c0000595:	81 c4 08 00 00 00    	add    esp,0x8
c000059b:	cf                   	iret   

c000059c <memcmp>:
c000059c:	55                   	push   ebp
c000059d:	89 e5                	mov    ebp,esp
c000059f:	83 ec 10             	sub    esp,0x10
c00005a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00005a5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00005a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00005ab:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c00005ae:	eb 06                	jmp    c00005b6 <memcmp+0x1a>
c00005b0:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c00005b3:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
c00005b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00005b9:	8d 50 ff             	lea    edx,[eax-0x1]
c00005bc:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
c00005bf:	85 c0                	test   eax,eax
c00005c1:	74 0e                	je     c00005d1 <memcmp+0x35>
c00005c3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00005c6:	8a 10                	mov    dl,BYTE PTR [eax]
c00005c8:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c00005cb:	8a 00                	mov    al,BYTE PTR [eax]
c00005cd:	38 c2                	cmp    dl,al
c00005cf:	74 df                	je     c00005b0 <memcmp+0x14>
c00005d1:	83 7d 10 ff          	cmp    DWORD PTR [ebp+0x10],0xffffffff
c00005d5:	74 16                	je     c00005ed <memcmp+0x51>
c00005d7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00005da:	8a 00                	mov    al,BYTE PTR [eax]
c00005dc:	0f b6 d0             	movzx  edx,al
c00005df:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c00005e2:	8a 00                	mov    al,BYTE PTR [eax]
c00005e4:	0f b6 c0             	movzx  eax,al
c00005e7:	29 c2                	sub    edx,eax
c00005e9:	89 d0                	mov    eax,edx
c00005eb:	eb 05                	jmp    c00005f2 <memcmp+0x56>
c00005ed:	b8 00 00 00 00       	mov    eax,0x0
c00005f2:	c9                   	leave  
c00005f3:	c3                   	ret    

c00005f4 <memmove>:
c00005f4:	55                   	push   ebp
c00005f5:	89 e5                	mov    ebp,esp
c00005f7:	83 ec 10             	sub    esp,0x10
c00005fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00005fd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000600:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000603:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c0000606:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0000609:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
c000060c:	76 1d                	jbe    c000062b <memmove+0x37>
c000060e:	eb 13                	jmp    c0000623 <memmove+0x2f>
c0000610:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0000613:	8a 10                	mov    dl,BYTE PTR [eax]
c0000615:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000618:	88 10                	mov    BYTE PTR [eax],dl
c000061a:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c000061d:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
c0000620:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0000623:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0000627:	75 e7                	jne    c0000610 <memmove+0x1c>
c0000629:	eb 31                	jmp    c000065c <memmove+0x68>
c000062b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c000062e:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
c0000631:	73 29                	jae    c000065c <memmove+0x68>
c0000633:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0000636:	48                   	dec    eax
c0000637:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
c000063a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000063d:	48                   	dec    eax
c000063e:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
c0000641:	eb 13                	jmp    c0000656 <memmove+0x62>
c0000643:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0000646:	8a 10                	mov    dl,BYTE PTR [eax]
c0000648:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000064b:	88 10                	mov    BYTE PTR [eax],dl
c000064d:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
c0000650:	ff 4d f8             	dec    DWORD PTR [ebp-0x8]
c0000653:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0000656:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000065a:	75 e7                	jne    c0000643 <memmove+0x4f>
c000065c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000065f:	c9                   	leave  
c0000660:	c3                   	ret    

c0000661 <memcpy>:
c0000661:	55                   	push   ebp
c0000662:	89 e5                	mov    ebp,esp
c0000664:	57                   	push   edi
c0000665:	56                   	push   esi
c0000666:	83 ec 20             	sub    esp,0x20
c0000669:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000066c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000066f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000672:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0000675:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0000678:	83 e0 03             	and    eax,0x3
c000067b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000067e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0000681:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0000684:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0000687:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000068a:	c1 e8 02             	shr    eax,0x2
c000068d:	89 c1                	mov    ecx,eax
c000068f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000692:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0000695:	89 c6                	mov    esi,eax
c0000697:	89 d7                	mov    edi,edx
c0000699:	fc                   	cld    
c000069a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000069c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00006a3:	eb 21                	jmp    c00006c6 <memcpy+0x65>
c00006a5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00006a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00006ab:	01 c2                	add    edx,eax
c00006ad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00006b0:	01 d0                	add    eax,edx
c00006b2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00006b5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00006b8:	01 d1                	add    ecx,edx
c00006ba:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00006bd:	01 ca                	add    edx,ecx
c00006bf:	8a 00                	mov    al,BYTE PTR [eax]
c00006c1:	88 02                	mov    BYTE PTR [edx],al
c00006c3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00006c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00006c9:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
c00006cc:	72 d7                	jb     c00006a5 <memcpy+0x44>
c00006ce:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00006d1:	83 c4 20             	add    esp,0x20
c00006d4:	5e                   	pop    esi
c00006d5:	5f                   	pop    edi
c00006d6:	5d                   	pop    ebp
c00006d7:	c3                   	ret    

c00006d8 <memset>:
c00006d8:	55                   	push   ebp
c00006d9:	89 e5                	mov    ebp,esp
c00006db:	83 ec 10             	sub    esp,0x10
c00006de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00006e1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00006e4:	eb 10                	jmp    c00006f6 <memset+0x1e>
c00006e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00006e9:	88 c2                	mov    dl,al
c00006eb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00006ee:	88 10                	mov    BYTE PTR [eax],dl
c00006f0:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c00006f3:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00006f6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00006fa:	75 ea                	jne    c00006e6 <memset+0xe>
c00006fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00006ff:	c9                   	leave  
c0000700:	c3                   	ret    

c0000701 <strlen>:
c0000701:	55                   	push   ebp
c0000702:	89 e5                	mov    ebp,esp
c0000704:	83 ec 10             	sub    esp,0x10
c0000707:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
c000070e:	eb 06                	jmp    c0000716 <strlen+0x15>
c0000710:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c0000713:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000719:	8a 00                	mov    al,BYTE PTR [eax]
c000071b:	84 c0                	test   al,al
c000071d:	75 f1                	jne    c0000710 <strlen+0xf>
c000071f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000722:	c9                   	leave  
c0000723:	c3                   	ret    

c0000724 <strpbrk>:
c0000724:	55                   	push   ebp
c0000725:	89 e5                	mov    ebp,esp
c0000727:	83 ec 10             	sub    esp,0x10
c000072a:	eb 2a                	jmp    c0000756 <strpbrk+0x32>
c000072c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000072f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000732:	eb 16                	jmp    c000074a <strpbrk+0x26>
c0000734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000737:	8a 10                	mov    dl,BYTE PTR [eax]
c0000739:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000073c:	8a 00                	mov    al,BYTE PTR [eax]
c000073e:	38 c2                	cmp    dl,al
c0000740:	75 05                	jne    c0000747 <strpbrk+0x23>
c0000742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000745:	eb 1d                	jmp    c0000764 <strpbrk+0x40>
c0000747:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c000074a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000074d:	8a 00                	mov    al,BYTE PTR [eax]
c000074f:	84 c0                	test   al,al
c0000751:	75 e1                	jne    c0000734 <strpbrk+0x10>
c0000753:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000756:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000759:	8a 00                	mov    al,BYTE PTR [eax]
c000075b:	84 c0                	test   al,al
c000075d:	75 cd                	jne    c000072c <strpbrk+0x8>
c000075f:	b8 00 00 00 00       	mov    eax,0x0
c0000764:	c9                   	leave  
c0000765:	c3                   	ret    

c0000766 <strtok>:
c0000766:	55                   	push   ebp
c0000767:	89 e5                	mov    ebp,esp
c0000769:	83 ec 10             	sub    esp,0x10
c000076c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000076f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000772:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
c0000776:	75 18                	jne    c0000790 <strtok+0x2a>
c0000778:	a1 a8 b5 03 c0       	mov    eax,ds:0xc003b5a8
c000077d:	85 c0                	test   eax,eax
c000077f:	75 07                	jne    c0000788 <strtok+0x22>
c0000781:	b8 00 00 00 00       	mov    eax,0x0
c0000786:	eb 6a                	jmp    c00007f2 <strtok+0x8c>
c0000788:	a1 a8 b5 03 c0       	mov    eax,ds:0xc003b5a8
c000078d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000790:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0000793:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0000796:	e8 89 ff ff ff       	call   c0000724 <strpbrk>
c000079b:	83 c4 08             	add    esp,0x8
c000079e:	a3 a8 b5 03 c0       	mov    ds:0xc003b5a8,eax
c00007a3:	eb 1f                	jmp    c00007c4 <strtok+0x5e>
c00007a5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00007a8:	8d 50 01             	lea    edx,[eax+0x1]
c00007ab:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00007ae:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007b1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00007b4:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00007b7:	e8 68 ff ff ff       	call   c0000724 <strpbrk>
c00007bc:	83 c4 08             	add    esp,0x8
c00007bf:	a3 a8 b5 03 c0       	mov    ds:0xc003b5a8,eax
c00007c4:	a1 a8 b5 03 c0       	mov    eax,ds:0xc003b5a8
c00007c9:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
c00007cc:	74 d7                	je     c00007a5 <strtok+0x3f>
c00007ce:	a1 a8 b5 03 c0       	mov    eax,ds:0xc003b5a8
c00007d3:	85 c0                	test   eax,eax
c00007d5:	74 16                	je     c00007ed <strtok+0x87>
c00007d7:	a1 a8 b5 03 c0       	mov    eax,ds:0xc003b5a8
c00007dc:	8d 50 01             	lea    edx,[eax+0x1]
c00007df:	89 15 a8 b5 03 c0    	mov    DWORD PTR ds:0xc003b5a8,edx
c00007e5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007e8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00007eb:	eb 05                	jmp    c00007f2 <strtok+0x8c>
c00007ed:	b8 00 00 00 00       	mov    eax,0x0
c00007f2:	c9                   	leave  
c00007f3:	c3                   	ret    

c00007f4 <strcpy>:
c00007f4:	55                   	push   ebp
c00007f5:	89 e5                	mov    ebp,esp
c00007f7:	83 ec 10             	sub    esp,0x10
c00007fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00007fd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000800:	eb 10                	jmp    c0000812 <strcpy+0x1e>
c0000802:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000805:	8a 10                	mov    dl,BYTE PTR [eax]
c0000807:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000080a:	88 10                	mov    BYTE PTR [eax],dl
c000080c:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c000080f:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
c0000812:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000815:	8a 00                	mov    al,BYTE PTR [eax]
c0000817:	84 c0                	test   al,al
c0000819:	75 e7                	jne    c0000802 <strcpy+0xe>
c000081b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000081e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000824:	c9                   	leave  
c0000825:	c3                   	ret    

c0000826 <strncpy>:
c0000826:	55                   	push   ebp
c0000827:	89 e5                	mov    ebp,esp
c0000829:	83 ec 10             	sub    esp,0x10
c000082c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000082f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000835:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000838:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000083c:	74 2a                	je     c0000868 <strncpy+0x42>
c000083e:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0000841:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000844:	8d 42 01             	lea    eax,[edx+0x1]
c0000847:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000084a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000084d:	8d 48 01             	lea    ecx,[eax+0x1]
c0000850:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
c0000853:	8a 12                	mov    dl,BYTE PTR [edx]
c0000855:	88 10                	mov    BYTE PTR [eax],dl
c0000857:	8a 00                	mov    al,BYTE PTR [eax]
c0000859:	84 c0                	test   al,al
c000085b:	75 db                	jne    c0000838 <strncpy+0x12>
c000085d:	eb 09                	jmp    c0000868 <strncpy+0x42>
c000085f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000862:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000865:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c0000868:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000086b:	8d 50 ff             	lea    edx,[eax-0x1]
c000086e:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
c0000871:	85 c0                	test   eax,eax
c0000873:	75 ea                	jne    c000085f <strncpy+0x39>
c0000875:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000878:	c9                   	leave  
c0000879:	c3                   	ret    

c000087a <strcmp>:
c000087a:	55                   	push   ebp
c000087b:	89 e5                	mov    ebp,esp
c000087d:	eb 19                	jmp    c0000898 <strcmp+0x1e>
c000087f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000882:	8d 50 01             	lea    edx,[eax+0x1]
c0000885:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
c0000888:	8a 00                	mov    al,BYTE PTR [eax]
c000088a:	84 c0                	test   al,al
c000088c:	75 07                	jne    c0000895 <strcmp+0x1b>
c000088e:	b8 00 00 00 00       	mov    eax,0x0
c0000893:	eb 25                	jmp    c00008ba <strcmp+0x40>
c0000895:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
c0000898:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000089b:	8a 10                	mov    dl,BYTE PTR [eax]
c000089d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00008a0:	8a 00                	mov    al,BYTE PTR [eax]
c00008a2:	38 c2                	cmp    dl,al
c00008a4:	74 d9                	je     c000087f <strcmp+0x5>
c00008a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008a9:	8a 00                	mov    al,BYTE PTR [eax]
c00008ab:	0f b6 d0             	movzx  edx,al
c00008ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00008b1:	8a 00                	mov    al,BYTE PTR [eax]
c00008b3:	0f b6 c0             	movzx  eax,al
c00008b6:	29 c2                	sub    edx,eax
c00008b8:	89 d0                	mov    eax,edx
c00008ba:	5d                   	pop    ebp
c00008bb:	c3                   	ret    

c00008bc <strchr>:
c00008bc:	55                   	push   ebp
c00008bd:	89 e5                	mov    ebp,esp
c00008bf:	eb 14                	jmp    c00008d5 <strchr+0x19>
c00008c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008c4:	8a 00                	mov    al,BYTE PTR [eax]
c00008c6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00008c9:	38 d0                	cmp    al,dl
c00008cb:	75 05                	jne    c00008d2 <strchr+0x16>
c00008cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008d0:	eb 11                	jmp    c00008e3 <strchr+0x27>
c00008d2:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c00008d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008d8:	8a 00                	mov    al,BYTE PTR [eax]
c00008da:	84 c0                	test   al,al
c00008dc:	75 e3                	jne    c00008c1 <strchr+0x5>
c00008de:	b8 00 00 00 00       	mov    eax,0x0
c00008e3:	5d                   	pop    ebp
c00008e4:	c3                   	ret    

c00008e5 <strncmp>:
c00008e5:	55                   	push   ebp
c00008e6:	89 e5                	mov    ebp,esp
c00008e8:	eb 19                	jmp    c0000903 <strncmp+0x1e>
c00008ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008ed:	8d 50 01             	lea    edx,[eax+0x1]
c00008f0:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
c00008f3:	8a 00                	mov    al,BYTE PTR [eax]
c00008f5:	84 c0                	test   al,al
c00008f7:	75 07                	jne    c0000900 <strncmp+0x1b>
c00008f9:	b8 00 00 00 00       	mov    eax,0x0
c00008fe:	eb 3f                	jmp    c000093f <strncmp+0x5a>
c0000900:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
c0000903:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0000906:	8d 50 ff             	lea    edx,[eax-0x1]
c0000909:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
c000090c:	85 c0                	test   eax,eax
c000090e:	74 0e                	je     c000091e <strncmp+0x39>
c0000910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000913:	8a 10                	mov    dl,BYTE PTR [eax]
c0000915:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000918:	8a 00                	mov    al,BYTE PTR [eax]
c000091a:	38 c2                	cmp    dl,al
c000091c:	74 cc                	je     c00008ea <strncmp+0x5>
c000091e:	83 7d 10 ff          	cmp    DWORD PTR [ebp+0x10],0xffffffff
c0000922:	74 16                	je     c000093a <strncmp+0x55>
c0000924:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000927:	8a 00                	mov    al,BYTE PTR [eax]
c0000929:	0f b6 d0             	movzx  edx,al
c000092c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000092f:	8a 00                	mov    al,BYTE PTR [eax]
c0000931:	0f b6 c0             	movzx  eax,al
c0000934:	29 c2                	sub    edx,eax
c0000936:	89 d0                	mov    eax,edx
c0000938:	eb 05                	jmp    c000093f <strncmp+0x5a>
c000093a:	b8 00 00 00 00       	mov    eax,0x0
c000093f:	5d                   	pop    ebp
c0000940:	c3                   	ret    

c0000941 <strcat>:
c0000941:	55                   	push   ebp
c0000942:	89 e5                	mov    ebp,esp
c0000944:	83 ec 10             	sub    esp,0x10
c0000947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000094a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c000094d:	90                   	nop
c000094e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000951:	8d 50 01             	lea    edx,[eax+0x1]
c0000954:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c0000957:	8a 00                	mov    al,BYTE PTR [eax]
c0000959:	84 c0                	test   al,al
c000095b:	75 f1                	jne    c000094e <strcat+0xd>
c000095d:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
c0000960:	90                   	nop
c0000961:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000964:	8d 42 01             	lea    eax,[edx+0x1]
c0000967:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000096a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000096d:	8d 48 01             	lea    ecx,[eax+0x1]
c0000970:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
c0000973:	8a 12                	mov    dl,BYTE PTR [edx]
c0000975:	88 10                	mov    BYTE PTR [eax],dl
c0000977:	8a 00                	mov    al,BYTE PTR [eax]
c0000979:	84 c0                	test   al,al
c000097b:	75 e4                	jne    c0000961 <strcat+0x20>
c000097d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000980:	c9                   	leave  
c0000981:	c3                   	ret    

c0000982 <strncat>:
c0000982:	55                   	push   ebp
c0000983:	89 e5                	mov    ebp,esp
c0000985:	83 ec 10             	sub    esp,0x10
c0000988:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000098c:	74 4b                	je     c00009d9 <strncat+0x57>
c000098e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000991:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000994:	90                   	nop
c0000995:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000998:	8d 50 01             	lea    edx,[eax+0x1]
c000099b:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000099e:	8a 00                	mov    al,BYTE PTR [eax]
c00009a0:	84 c0                	test   al,al
c00009a2:	75 f1                	jne    c0000995 <strncat+0x13>
c00009a4:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
c00009a7:	90                   	nop
c00009a8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00009ab:	8d 42 01             	lea    eax,[edx+0x1]
c00009ae:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00009b1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00009b4:	8d 48 01             	lea    ecx,[eax+0x1]
c00009b7:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
c00009ba:	8a 12                	mov    dl,BYTE PTR [edx]
c00009bc:	88 10                	mov    BYTE PTR [eax],dl
c00009be:	8a 00                	mov    al,BYTE PTR [eax]
c00009c0:	84 c0                	test   al,al
c00009c2:	74 09                	je     c00009cd <strncat+0x4b>
c00009c4:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00009c7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00009cb:	75 db                	jne    c00009a8 <strncat+0x26>
c00009cd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00009d1:	75 06                	jne    c00009d9 <strncat+0x57>
c00009d3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00009d6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00009d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00009dc:	c9                   	leave  
c00009dd:	c3                   	ret    

c00009de <strstr>:
c00009de:	55                   	push   ebp
c00009df:	89 e5                	mov    ebp,esp
c00009e1:	83 ec 10             	sub    esp,0x10
c00009e4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00009e7:	e8 15 fd ff ff       	call   c0000701 <strlen>
c00009ec:	83 c4 04             	add    esp,0x4
c00009ef:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00009f2:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
c00009f6:	75 22                	jne    c0000a1a <strstr+0x3c>
c00009f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00009fb:	eb 32                	jmp    c0000a2f <strstr+0x51>
c00009fd:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0000a00:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0000a03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0000a06:	e8 91 fb ff ff       	call   c000059c <memcmp>
c0000a0b:	83 c4 0c             	add    esp,0xc
c0000a0e:	85 c0                	test   eax,eax
c0000a10:	75 05                	jne    c0000a17 <strstr+0x39>
c0000a12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a15:	eb 18                	jmp    c0000a2f <strstr+0x51>
c0000a17:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000a1a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0000a1d:	e8 df fc ff ff       	call   c0000701 <strlen>
c0000a22:	83 c4 04             	add    esp,0x4
c0000a25:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
c0000a28:	76 d3                	jbe    c00009fd <strstr+0x1f>
c0000a2a:	b8 00 00 00 00       	mov    eax,0x0
c0000a2f:	c9                   	leave  
c0000a30:	c3                   	ret    

c0000a31 <toupper>:
c0000a31:	55                   	push   ebp
c0000a32:	89 e5                	mov    ebp,esp
c0000a34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a37:	0f b6 c0             	movzx  eax,al
c0000a3a:	8a 80 20 f5 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0ae0]
c0000a40:	0f b6 c0             	movzx  eax,al
c0000a43:	83 e0 02             	and    eax,0x2
c0000a46:	85 c0                	test   eax,eax
c0000a48:	74 08                	je     c0000a52 <toupper+0x21>
c0000a4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a4d:	83 e8 20             	sub    eax,0x20
c0000a50:	eb 03                	jmp    c0000a55 <toupper+0x24>
c0000a52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a55:	5d                   	pop    ebp
c0000a56:	c3                   	ret    

c0000a57 <tolower>:
c0000a57:	55                   	push   ebp
c0000a58:	89 e5                	mov    ebp,esp
c0000a5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a5d:	0f b6 c0             	movzx  eax,al
c0000a60:	8a 80 20 f5 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0ae0]
c0000a66:	0f b6 c0             	movzx  eax,al
c0000a69:	83 e0 01             	and    eax,0x1
c0000a6c:	85 c0                	test   eax,eax
c0000a6e:	74 08                	je     c0000a78 <tolower+0x21>
c0000a70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a73:	83 c0 20             	add    eax,0x20
c0000a76:	eb 03                	jmp    c0000a7b <tolower+0x24>
c0000a78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a7b:	5d                   	pop    ebp
c0000a7c:	c3                   	ret    

c0000a7d <simple_strtoul>:
c0000a7d:	55                   	push   ebp
c0000a7e:	89 e5                	mov    ebp,esp
c0000a80:	83 ec 28             	sub    esp,0x28
c0000a83:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0000a8a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0000a91:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0000a98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a9b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0000a9e:	eb 03                	jmp    c0000aa3 <simple_strtoul+0x26>
c0000aa0:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000aa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000aa6:	8a 00                	mov    al,BYTE PTR [eax]
c0000aa8:	0f b6 c0             	movzx  eax,al
c0000aab:	8a 80 20 f5 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0ae0]
c0000ab1:	0f b6 c0             	movzx  eax,al
c0000ab4:	83 e0 08             	and    eax,0x8
c0000ab7:	85 c0                	test   eax,eax
c0000ab9:	75 e5                	jne    c0000aa0 <simple_strtoul+0x23>
c0000abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000abe:	8a 00                	mov    al,BYTE PTR [eax]
c0000ac0:	3c 09                	cmp    al,0x9
c0000ac2:	74 dc                	je     c0000aa0 <simple_strtoul+0x23>
c0000ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000ac7:	8a 00                	mov    al,BYTE PTR [eax]
c0000ac9:	3c 2d                	cmp    al,0x2d
c0000acb:	75 0c                	jne    c0000ad9 <simple_strtoul+0x5c>
c0000acd:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
c0000ad4:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000ad7:	eb 1c                	jmp    c0000af5 <simple_strtoul+0x78>
c0000ad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000adc:	8a 00                	mov    al,BYTE PTR [eax]
c0000ade:	3c 2b                	cmp    al,0x2b
c0000ae0:	75 0c                	jne    c0000aee <simple_strtoul+0x71>
c0000ae2:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000ae5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0000aec:	eb 07                	jmp    c0000af5 <simple_strtoul+0x78>
c0000aee:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0000af5:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0000af9:	75 43                	jne    c0000b3e <simple_strtoul+0xc1>
c0000afb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000afe:	8a 00                	mov    al,BYTE PTR [eax]
c0000b00:	3c 30                	cmp    al,0x30
c0000b02:	75 31                	jne    c0000b35 <simple_strtoul+0xb8>
c0000b04:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000b0a:	8a 00                	mov    al,BYTE PTR [eax]
c0000b0c:	0f be c0             	movsx  eax,al
c0000b0f:	83 ec 0c             	sub    esp,0xc
c0000b12:	50                   	push   eax
c0000b13:	e8 3f ff ff ff       	call   c0000a57 <tolower>
c0000b18:	83 c4 10             	add    esp,0x10
c0000b1b:	83 f8 78             	cmp    eax,0x78
c0000b1e:	75 0c                	jne    c0000b2c <simple_strtoul+0xaf>
c0000b20:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
c0000b27:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b2a:	eb 26                	jmp    c0000b52 <simple_strtoul+0xd5>
c0000b2c:	c7 45 10 08 00 00 00 	mov    DWORD PTR [ebp+0x10],0x8
c0000b33:	eb 1d                	jmp    c0000b52 <simple_strtoul+0xd5>
c0000b35:	c7 45 10 0a 00 00 00 	mov    DWORD PTR [ebp+0x10],0xa
c0000b3c:	eb 14                	jmp    c0000b52 <simple_strtoul+0xd5>
c0000b3e:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
c0000b42:	0f 86 07 01 00 00    	jbe    c0000c4f <simple_strtoul+0x1d2>
c0000b48:	83 7d 10 24          	cmp    DWORD PTR [ebp+0x10],0x24
c0000b4c:	0f 87 fd 00 00 00    	ja     c0000c4f <simple_strtoul+0x1d2>
c0000b52:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
c0000b56:	75 0c                	jne    c0000b64 <simple_strtoul+0xe7>
c0000b58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000b5b:	8a 00                	mov    al,BYTE PTR [eax]
c0000b5d:	3c 30                	cmp    al,0x30
c0000b5f:	75 03                	jne    c0000b64 <simple_strtoul+0xe7>
c0000b61:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b64:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
c0000b68:	0f 85 d2 00 00 00    	jne    c0000c40 <simple_strtoul+0x1c3>
c0000b6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000b71:	8a 00                	mov    al,BYTE PTR [eax]
c0000b73:	3c 30                	cmp    al,0x30
c0000b75:	0f 85 c5 00 00 00    	jne    c0000c40 <simple_strtoul+0x1c3>
c0000b7b:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000b81:	8a 00                	mov    al,BYTE PTR [eax]
c0000b83:	0f be c0             	movsx  eax,al
c0000b86:	83 ec 0c             	sub    esp,0xc
c0000b89:	50                   	push   eax
c0000b8a:	e8 c8 fe ff ff       	call   c0000a57 <tolower>
c0000b8f:	83 c4 10             	add    esp,0x10
c0000b92:	83 f8 78             	cmp    eax,0x78
c0000b95:	0f 85 a5 00 00 00    	jne    c0000c40 <simple_strtoul+0x1c3>
c0000b9b:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b9e:	e9 9d 00 00 00       	jmp    c0000c40 <simple_strtoul+0x1c3>
c0000ba3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000ba6:	8a 00                	mov    al,BYTE PTR [eax]
c0000ba8:	0f b6 c0             	movzx  eax,al
c0000bab:	8a 80 20 f5 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0ae0]
c0000bb1:	0f b6 c0             	movzx  eax,al
c0000bb4:	83 e0 04             	and    eax,0x4
c0000bb7:	85 c0                	test   eax,eax
c0000bb9:	74 10                	je     c0000bcb <simple_strtoul+0x14e>
c0000bbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000bbe:	8a 00                	mov    al,BYTE PTR [eax]
c0000bc0:	0f b6 c0             	movzx  eax,al
c0000bc3:	83 e8 30             	sub    eax,0x30
c0000bc6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0000bc9:	eb 31                	jmp    c0000bfc <simple_strtoul+0x17f>
c0000bcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000bce:	8a 00                	mov    al,BYTE PTR [eax]
c0000bd0:	0f be c0             	movsx  eax,al
c0000bd3:	83 ec 0c             	sub    esp,0xc
c0000bd6:	50                   	push   eax
c0000bd7:	e8 55 fe ff ff       	call   c0000a31 <toupper>
c0000bdc:	83 c4 10             	add    esp,0x10
c0000bdf:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0000be2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0000be5:	0f b6 c0             	movzx  eax,al
c0000be8:	8a 80 20 f5 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0ae0]
c0000bee:	0f b6 c0             	movzx  eax,al
c0000bf1:	83 e0 01             	and    eax,0x1
c0000bf4:	85 c0                	test   eax,eax
c0000bf6:	74 5a                	je     c0000c52 <simple_strtoul+0x1d5>
c0000bf8:	83 6d f0 37          	sub    DWORD PTR [ebp-0x10],0x37
c0000bfc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0000bff:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
c0000c02:	73 51                	jae    c0000c55 <simple_strtoul+0x1d8>
c0000c04:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0000c07:	f7 d0                	not    eax
c0000c09:	ba 00 00 00 00       	mov    edx,0x0
c0000c0e:	f7 75 10             	div    DWORD PTR [ebp+0x10]
c0000c11:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0000c14:	76 10                	jbe    c0000c26 <simple_strtoul+0x1a9>
c0000c16:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
c0000c1d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0000c24:	eb 17                	jmp    c0000c3d <simple_strtoul+0x1c0>
c0000c26:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0000c29:	0f af 45 10          	imul   eax,DWORD PTR [ebp+0x10]
c0000c2d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0000c30:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0000c33:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0000c36:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
c0000c3d:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000c40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000c43:	8a 00                	mov    al,BYTE PTR [eax]
c0000c45:	84 c0                	test   al,al
c0000c47:	0f 85 56 ff ff ff    	jne    c0000ba3 <simple_strtoul+0x126>
c0000c4d:	eb 07                	jmp    c0000c56 <simple_strtoul+0x1d9>
c0000c4f:	90                   	nop
c0000c50:	eb 04                	jmp    c0000c56 <simple_strtoul+0x1d9>
c0000c52:	90                   	nop
c0000c53:	eb 01                	jmp    c0000c56 <simple_strtoul+0x1d9>
c0000c55:	90                   	nop
c0000c56:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
c0000c5a:	74 24                	je     c0000c80 <simple_strtoul+0x203>
c0000c5c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0000c60:	75 16                	jne    c0000c78 <simple_strtoul+0x1fb>
c0000c62:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0000c66:	75 10                	jne    c0000c78 <simple_strtoul+0x1fb>
c0000c68:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0000c6c:	74 0a                	je     c0000c78 <simple_strtoul+0x1fb>
c0000c6e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000c71:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0000c74:	89 10                	mov    DWORD PTR [eax],edx
c0000c76:	eb 08                	jmp    c0000c80 <simple_strtoul+0x203>
c0000c78:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000c7b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0000c7e:	89 10                	mov    DWORD PTR [eax],edx
c0000c80:	83 7d e4 01          	cmp    DWORD PTR [ebp-0x1c],0x1
c0000c84:	75 07                	jne    c0000c8d <simple_strtoul+0x210>
c0000c86:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
c0000c8d:	83 7d ec 01          	cmp    DWORD PTR [ebp-0x14],0x1
c0000c91:	75 03                	jne    c0000c96 <simple_strtoul+0x219>
c0000c93:	f7 5d e8             	neg    DWORD PTR [ebp-0x18]
c0000c96:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0000c99:	c9                   	leave  
c0000c9a:	c3                   	ret    

c0000c9b <largebin_index>:
c0000c9b:	89 c2                	mov    edx,eax
c0000c9d:	c1 ea 08             	shr    edx,0x8
c0000ca0:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000ca6:	77 10                	ja     c0000cb8 <largebin_index+0x1d>
c0000ca8:	0f bd d2             	bsr    edx,edx
c0000cab:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000cae:	d3 e8                	shr    eax,cl
c0000cb0:	83 e0 03             	and    eax,0x3
c0000cb3:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000cb7:	c3                   	ret    
c0000cb8:	b8 5f 00 00 00       	mov    eax,0x5f
c0000cbd:	c3                   	ret    

c0000cbe <malloc_init_state>:
c0000cbe:	53                   	push   ebx
c0000cbf:	8d 50 34             	lea    edx,[eax+0x34]
c0000cc2:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000cc8:	89 d1                	mov    ecx,edx
c0000cca:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000ccd:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000cd0:	83 c2 08             	add    edx,0x8
c0000cd3:	39 da                	cmp    edx,ebx
c0000cd5:	75 f3                	jne    c0000cca <malloc_init_state+0xc>
c0000cd7:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd9:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ce3:	83 e2 03             	and    edx,0x3
c0000ce6:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000cf0:	83 ca 48             	or     edx,0x48
c0000cf3:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cfd:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000d07:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000d0e:	89 10                	mov    DWORD PTR [eax],edx
c0000d10:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000d13:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000d1d:	5b                   	pop    ebx
c0000d1e:	c3                   	ret    

c0000d1f <malloc_consolidate>:
c0000d1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000d21:	85 d2                	test   edx,edx
c0000d23:	0f 84 d8 00 00 00    	je     c0000e01 <malloc_consolidate+0xe2>
c0000d29:	55                   	push   ebp
c0000d2a:	83 e2 fd             	and    edx,0xfffffffd
c0000d2d:	57                   	push   edi
c0000d2e:	89 c5                	mov    ebp,eax
c0000d30:	56                   	push   esi
c0000d31:	8d 78 34             	lea    edi,[eax+0x34]
c0000d34:	53                   	push   ebx
c0000d35:	83 ec 10             	sub    esp,0x10
c0000d38:	89 10                	mov    DWORD PTR [eax],edx
c0000d3a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000d3e:	c1 ea 03             	shr    edx,0x3
c0000d41:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d45:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d49:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d4c:	85 d2                	test   edx,edx
c0000d4e:	0f 84 98 00 00 00    	je     c0000dec <malloc_consolidate+0xcd>
c0000d54:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d5b:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d5e:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d61:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d65:	89 f9                	mov    ecx,edi
c0000d67:	83 e1 fe             	and    ecx,0xfffffffe
c0000d6a:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d6d:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d70:	83 e3 fc             	and    ebx,0xfffffffc
c0000d73:	83 e7 01             	and    edi,0x1
c0000d76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d79:	75 14                	jne    c0000d8f <malloc_consolidate+0x70>
c0000d7b:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d7d:	29 fa                	sub    edx,edi
c0000d7f:	01 f9                	add    ecx,edi
c0000d81:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d84:	89 fb                	mov    ebx,edi
c0000d86:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d89:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d8c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d8f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d92:	74 40                	je     c0000dd4 <malloc_consolidate+0xb5>
c0000d94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d97:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d9a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d9e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000da1:	83 e7 01             	and    edi,0x1
c0000da4:	75 0e                	jne    c0000db4 <malloc_consolidate+0x95>
c0000da6:	01 d9                	add    ecx,ebx
c0000da8:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000dab:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000dae:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000db1:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000db4:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000db7:	89 ce                	mov    esi,ecx
c0000db9:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000dbc:	83 ce 01             	or     esi,0x1
c0000dbf:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000dc2:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000dc5:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000dc8:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000dcc:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000dcf:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000dd2:	eb 0c                	jmp    c0000de0 <malloc_consolidate+0xc1>
c0000dd4:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000dd7:	83 c9 01             	or     ecx,0x1
c0000dda:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ddd:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000de0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000de4:	85 d2                	test   edx,edx
c0000de6:	0f 85 6f ff ff ff    	jne    c0000d5b <malloc_consolidate+0x3c>
c0000dec:	83 c5 04             	add    ebp,0x4
c0000def:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000df3:	0f 85 50 ff ff ff    	jne    c0000d49 <malloc_consolidate+0x2a>
c0000df9:	83 c4 10             	add    esp,0x10
c0000dfc:	5b                   	pop    ebx
c0000dfd:	5e                   	pop    esi
c0000dfe:	5f                   	pop    edi
c0000dff:	5d                   	pop    ebp
c0000e00:	c3                   	ret    
c0000e01:	e9 b8 fe ff ff       	jmp    c0000cbe <malloc_init_state>

c0000e06 <dlfree>:
c0000e06:	57                   	push   edi
c0000e07:	56                   	push   esi
c0000e08:	53                   	push   ebx
c0000e09:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000e0d:	85 db                	test   ebx,ebx
c0000e0f:	0f 84 e2 00 00 00    	je     c0000ef7 <dlfree+0xf1>
c0000e15:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000e18:	8b 0d c0 b5 03 c0    	mov    ecx,DWORD PTR ds:0xc003b5c0
c0000e1e:	89 f0                	mov    eax,esi
c0000e20:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000e23:	83 e0 fc             	and    eax,0xfffffffc
c0000e26:	39 c1                	cmp    ecx,eax
c0000e28:	72 24                	jb     c0000e4e <dlfree+0x48>
c0000e2a:	83 c9 03             	or     ecx,0x3
c0000e2d:	c1 e8 03             	shr    eax,0x3
c0000e30:	89 0d c0 b5 03 c0    	mov    DWORD PTR ds:0xc003b5c0,ecx
c0000e36:	83 e8 02             	sub    eax,0x2
c0000e39:	8b 0c 85 c4 b5 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc4a3c]
c0000e40:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e42:	89 14 85 c4 b5 03 c0 	mov    DWORD PTR [eax*4-0x3ffc4a3c],edx
c0000e49:	e9 a9 00 00 00       	jmp    c0000ef7 <dlfree+0xf1>
c0000e4e:	83 e6 02             	and    esi,0x2
c0000e51:	0f 85 a0 00 00 00    	jne    c0000ef7 <dlfree+0xf1>
c0000e57:	83 c9 01             	or     ecx,0x1
c0000e5a:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e5d:	89 0d c0 b5 03 c0    	mov    DWORD PTR ds:0xc003b5c0,ecx
c0000e63:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e66:	83 e1 fc             	and    ecx,0xfffffffc
c0000e69:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e6d:	75 13                	jne    c0000e82 <dlfree+0x7c>
c0000e6f:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e72:	29 da                	sub    edx,ebx
c0000e74:	01 d8                	add    eax,ebx
c0000e76:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e79:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e7c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e7f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e82:	39 35 ec b5 03 c0    	cmp    DWORD PTR ds:0xc003b5ec,esi
c0000e88:	74 40                	je     c0000eca <dlfree+0xc4>
c0000e8a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e8e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e91:	80 e3 01             	and    bl,0x1
c0000e94:	75 0e                	jne    c0000ea4 <dlfree+0x9e>
c0000e96:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e99:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e9c:	01 c8                	add    eax,ecx
c0000e9e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000ea1:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000ea4:	8b 0d fc b5 03 c0    	mov    ecx,DWORD PTR ds:0xc003b5fc
c0000eaa:	c7 42 0c f4 b5 03 c0 	mov    DWORD PTR [edx+0xc],0xc003b5f4
c0000eb1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000eb4:	89 15 fc b5 03 c0    	mov    DWORD PTR ds:0xc003b5fc,edx
c0000eba:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ebd:	89 c1                	mov    ecx,eax
c0000ebf:	83 c9 01             	or     ecx,0x1
c0000ec2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ec5:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000ec8:	eb 10                	jmp    c0000eda <dlfree+0xd4>
c0000eca:	01 c8                	add    eax,ecx
c0000ecc:	89 c1                	mov    ecx,eax
c0000ece:	83 c9 01             	or     ecx,0x1
c0000ed1:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ed4:	89 15 ec b5 03 c0    	mov    DWORD PTR ds:0xc003b5ec,edx
c0000eda:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000edf:	76 16                	jbe    c0000ef7 <dlfree+0xf1>
c0000ee1:	f6 05 c0 b5 03 c0 02 	test   BYTE PTR ds:0xc003b5c0,0x2
c0000ee8:	74 0d                	je     c0000ef7 <dlfree+0xf1>
c0000eea:	5b                   	pop    ebx
c0000eeb:	b8 c0 b5 03 c0       	mov    eax,0xc003b5c0
c0000ef0:	5e                   	pop    esi
c0000ef1:	5f                   	pop    edi
c0000ef2:	e9 28 fe ff ff       	jmp    c0000d1f <malloc_consolidate>
c0000ef7:	5b                   	pop    ebx
c0000ef8:	5e                   	pop    esi
c0000ef9:	5f                   	pop    edi
c0000efa:	c3                   	ret    

c0000efb <sYSMALLOc>:
c0000efb:	55                   	push   ebp
c0000efc:	57                   	push   edi
c0000efd:	56                   	push   esi
c0000efe:	53                   	push   ebx
c0000eff:	89 d3                	mov    ebx,edx
c0000f01:	83 ec 2c             	sub    esp,0x2c
c0000f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f08:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000f0e:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000f11:	8d 42 ff             	lea    eax,[edx-0x1]
c0000f14:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000f18:	74 1f                	je     c0000f39 <sYSMALLOc+0x3e>
c0000f1a:	89 d8                	mov    eax,ebx
c0000f1c:	e8 fe fd ff ff       	call   c0000d1f <malloc_consolidate>
c0000f21:	83 ec 0c             	sub    esp,0xc
c0000f24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000f28:	83 e8 07             	sub    eax,0x7
c0000f2b:	50                   	push   eax
c0000f2c:	e8 30 02 00 00       	call   c0001161 <dlmalloc>
c0000f31:	83 c4 10             	add    esp,0x10
c0000f34:	e9 20 02 00 00       	jmp    c0001159 <sYSMALLOc+0x25e>
c0000f39:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000f3c:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000f42:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000f45:	83 e0 fc             	and    eax,0xfffffffc
c0000f48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f50:	83 c0 10             	add    eax,0x10
c0000f53:	01 c1                	add    ecx,eax
c0000f55:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f59:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f60:	74 04                	je     c0000f66 <sYSMALLOc+0x6b>
c0000f62:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f66:	f7 da                	neg    edx
c0000f68:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f6c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f70:	21 d1                	and    ecx,edx
c0000f72:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f76:	7f 07                	jg     c0000f7f <sYSMALLOc+0x84>
c0000f78:	31 c0                	xor    eax,eax
c0000f7a:	e9 da 01 00 00       	jmp    c0001159 <sYSMALLOc+0x25e>
c0000f7f:	83 ec 0c             	sub    esp,0xc
c0000f82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f86:	e8 51 c3 00 00       	call   c000d2dc <sbrk>
c0000f8b:	83 c4 10             	add    esp,0x10
c0000f8e:	89 c6                	mov    esi,eax
c0000f90:	83 f8 ff             	cmp    eax,0xffffffff
c0000f93:	74 e3                	je     c0000f78 <sYSMALLOc+0x7d>
c0000f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f99:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f9d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000fa0:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000fa6:	39 f1                	cmp    ecx,esi
c0000fa8:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000fae:	75 13                	jne    c0000fc3 <sYSMALLOc+0xc8>
c0000fb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb8:	83 c8 01             	or     eax,0x1
c0000fbb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000fbe:	e9 3e 01 00 00       	jmp    c0001101 <sYSMALLOc+0x206>
c0000fc3:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000fc9:	88 d0                	mov    al,dl
c0000fcb:	83 e0 01             	and    eax,0x1
c0000fce:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000fd3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000fd7:	0f 95 c0             	setne  al
c0000fda:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000fde:	39 f1                	cmp    ecx,esi
c0000fe0:	76 12                	jbe    c0000ff4 <sYSMALLOc+0xf9>
c0000fe2:	84 c0                	test   al,al
c0000fe4:	74 0e                	je     c0000ff4 <sYSMALLOc+0xf9>
c0000fe6:	83 e2 fe             	and    edx,0xfffffffe
c0000fe9:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fef:	e9 83 00 00 00       	jmp    c0001077 <sYSMALLOc+0x17c>
c0000ff4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ff9:	74 7c                	je     c0001077 <sYSMALLOc+0x17c>
c0000ffb:	84 c0                	test   al,al
c0000ffd:	74 0c                	je     c000100b <sYSMALLOc+0x110>
c0000fff:	89 f0                	mov    eax,esi
c0001001:	29 c8                	sub    eax,ecx
c0001003:	01 e8                	add    eax,ebp
c0001005:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c000100b:	89 f2                	mov    edx,esi
c000100d:	83 e2 07             	and    edx,0x7
c0001010:	74 0c                	je     c000101e <sYSMALLOc+0x123>
c0001012:	b8 08 00 00 00       	mov    eax,0x8
c0001017:	29 d0                	sub    eax,edx
c0001019:	8d 2c 06             	lea    ebp,[esi+eax*1]
c000101c:	eb 04                	jmp    c0001022 <sYSMALLOc+0x127>
c000101e:	89 f5                	mov    ebp,esi
c0001020:	31 c0                	xor    eax,eax
c0001022:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0001026:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000102a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000102e:	01 c1                	add    ecx,eax
c0001030:	83 ec 0c             	sub    esp,0xc
c0001033:	01 f1                	add    ecx,esi
c0001035:	01 ca                	add    edx,ecx
c0001037:	29 c8                	sub    eax,ecx
c0001039:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c000103d:	01 c2                	add    edx,eax
c000103f:	52                   	push   edx
c0001040:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0001044:	e8 93 c2 00 00       	call   c000d2dc <sbrk>
c0001049:	83 c4 10             	add    esp,0x10
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001053:	75 0f                	jne    c0001064 <sYSMALLOc+0x169>
c0001055:	83 ec 0c             	sub    esp,0xc
c0001058:	6a 00                	push   0x0
c000105a:	e8 7d c2 00 00       	call   c000d2dc <sbrk>
c000105f:	83 c4 10             	add    esp,0x10
c0001062:	eb 30                	jmp    c0001094 <sYSMALLOc+0x199>
c0001064:	39 c6                	cmp    esi,eax
c0001066:	76 33                	jbe    c000109b <sYSMALLOc+0x1a0>
c0001068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000106c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001073:	01 f0                	add    eax,esi
c0001075:	eb 1d                	jmp    c0001094 <sYSMALLOc+0x199>
c0001077:	83 ec 0c             	sub    esp,0xc
c000107a:	89 f5                	mov    ebp,esi
c000107c:	6a 00                	push   0x0
c000107e:	e8 59 c2 00 00       	call   c000d2dc <sbrk>
c0001083:	89 c2                	mov    edx,eax
c0001085:	29 f2                	sub    edx,esi
c0001087:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c000108b:	83 c4 10             	add    esp,0x10
c000108e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001094:	31 d2                	xor    edx,edx
c0001096:	83 f8 ff             	cmp    eax,0xffffffff
c0001099:	74 66                	je     c0001101 <sYSMALLOc+0x206>
c000109b:	29 e8                	sub    eax,ebp
c000109d:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c00010a0:	01 d0                	add    eax,edx
c00010a2:	83 c8 01             	or     eax,0x1
c00010a5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00010a8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010ae:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010b3:	74 4c                	je     c0001101 <sYSMALLOc+0x206>
c00010b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010b9:	83 e8 0c             	sub    eax,0xc
c00010bc:	83 e0 f8             	and    eax,0xfffffff8
c00010bf:	89 c2                	mov    edx,eax
c00010c1:	83 ca 01             	or     edx,0x1
c00010c4:	83 f8 0f             	cmp    eax,0xf
c00010c7:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c00010ca:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c00010d2:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c00010da:	76 25                	jbe    c0001101 <sYSMALLOc+0x206>
c00010dc:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00010e2:	83 ec 0c             	sub    esp,0xc
c00010e5:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010ef:	83 c7 08             	add    edi,0x8
c00010f2:	57                   	push   edi
c00010f3:	e8 0e fd ff ff       	call   c0000e06 <dlfree>
c00010f8:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010fe:	83 c4 10             	add    esp,0x10
c0001101:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001107:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000110d:	73 06                	jae    c0001115 <sYSMALLOc+0x21a>
c000110f:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001115:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000111b:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001121:	73 06                	jae    c0001129 <sYSMALLOc+0x22e>
c0001123:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001129:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000112c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000112f:	83 e2 fc             	and    edx,0xfffffffc
c0001132:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0001136:	0f 82 3c fe ff ff    	jb     c0000f78 <sYSMALLOc+0x7d>
c000113c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001140:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001143:	29 fa                	sub    edx,edi
c0001145:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001148:	83 ca 01             	or     edx,0x1
c000114b:	89 fb                	mov    ebx,edi
c000114d:	83 c0 08             	add    eax,0x8
c0001150:	83 cb 01             	or     ebx,0x1
c0001153:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001156:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001159:	83 c4 2c             	add    esp,0x2c
c000115c:	5b                   	pop    ebx
c000115d:	5e                   	pop    esi
c000115e:	5f                   	pop    edi
c000115f:	5d                   	pop    ebp
c0001160:	c3                   	ret    

c0001161 <dlmalloc>:
c0001161:	55                   	push   ebp
c0001162:	57                   	push   edi
c0001163:	56                   	push   esi
c0001164:	53                   	push   ebx
c0001165:	83 ec 1c             	sub    esp,0x1c
c0001168:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000116c:	83 f8 df             	cmp    eax,0xffffffdf
c000116f:	0f 87 70 03 00 00    	ja     c00014e5 <dlmalloc+0x384>
c0001175:	83 c0 0b             	add    eax,0xb
c0001178:	be 10 00 00 00       	mov    esi,0x10
c000117d:	83 f8 0f             	cmp    eax,0xf
c0001180:	76 05                	jbe    c0001187 <dlmalloc+0x26>
c0001182:	83 e0 f8             	and    eax,0xfffffff8
c0001185:	89 c6                	mov    esi,eax
c0001187:	8b 3d c0 b5 03 c0    	mov    edi,DWORD PTR ds:0xc003b5c0
c000118d:	f7 c7 01 00 00 00    	test   edi,0x1
c0001193:	75 17                	jne    c00011ac <dlmalloc+0x4b>
c0001195:	85 ff                	test   edi,edi
c0001197:	0f 85 05 03 00 00    	jne    c00014a2 <dlmalloc+0x341>
c000119d:	b8 c0 b5 03 c0       	mov    eax,0xc003b5c0
c00011a2:	e8 78 fb ff ff       	call   c0000d1f <malloc_consolidate>
c00011a7:	e9 f6 02 00 00       	jmp    c00014a2 <dlmalloc+0x341>
c00011ac:	39 f7                	cmp    edi,esi
c00011ae:	72 1f                	jb     c00011cf <dlmalloc+0x6e>
c00011b0:	89 f2                	mov    edx,esi
c00011b2:	c1 ea 03             	shr    edx,0x3
c00011b5:	83 ea 02             	sub    edx,0x2
c00011b8:	8b 04 95 c4 b5 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc4a3c]
c00011bf:	85 c0                	test   eax,eax
c00011c1:	74 0c                	je     c00011cf <dlmalloc+0x6e>
c00011c3:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00011c6:	89 0c 95 c4 b5 03 c0 	mov    DWORD PTR [edx*4-0x3ffc4a3c],ecx
c00011cd:	eb 30                	jmp    c00011ff <dlmalloc+0x9e>
c00011cf:	89 f0                	mov    eax,esi
c00011d1:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d7:	77 2e                	ja     c0001207 <dlmalloc+0xa6>
c00011d9:	c1 e8 03             	shr    eax,0x3
c00011dc:	8d 14 c5 f4 b5 03 c0 	lea    edx,[eax*8-0x3ffc4a0c]
c00011e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011e7:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011ea:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011ed:	39 c3                	cmp    ebx,eax
c00011ef:	74 2e                	je     c000121f <dlmalloc+0xbe>
c00011f1:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011f4:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011f9:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011fc:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011ff:	83 c0 08             	add    eax,0x8
c0001202:	e9 e0 02 00 00       	jmp    c00014e7 <dlmalloc+0x386>
c0001207:	e8 8f fa ff ff       	call   c0000c9b <largebin_index>
c000120c:	83 e7 02             	and    edi,0x2
c000120f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001213:	74 0a                	je     c000121f <dlmalloc+0xbe>
c0001215:	b8 c0 b5 03 c0       	mov    eax,0xc003b5c0
c000121a:	e8 00 fb ff ff       	call   c0000d1f <malloc_consolidate>
c000121f:	8d 46 10             	lea    eax,[esi+0x10]
c0001222:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001226:	8b 1d 00 b6 03 c0    	mov    ebx,DWORD PTR ds:0xc003b600
c000122c:	81 fb f4 b5 03 c0    	cmp    ebx,0xc003b5f4
c0001232:	0f 84 13 01 00 00    	je     c000134b <dlmalloc+0x1ea>
c0001238:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000123b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000123e:	83 e7 fc             	and    edi,0xfffffffc
c0001241:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001247:	77 4c                	ja     c0001295 <dlmalloc+0x134>
c0001249:	3d f4 b5 03 c0       	cmp    eax,0xc003b5f4
c000124e:	75 45                	jne    c0001295 <dlmalloc+0x134>
c0001250:	39 1d f0 b5 03 c0    	cmp    DWORD PTR ds:0xc003b5f0,ebx
c0001256:	75 3d                	jne    c0001295 <dlmalloc+0x134>
c0001258:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000125c:	73 37                	jae    c0001295 <dlmalloc+0x134>
c000125e:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001261:	89 fa                	mov    edx,edi
c0001263:	a3 fc b5 03 c0       	mov    ds:0xc003b5fc,eax
c0001268:	a3 00 b6 03 c0       	mov    ds:0xc003b600,eax
c000126d:	a3 f0 b5 03 c0       	mov    ds:0xc003b5f0,eax
c0001272:	29 f2                	sub    edx,esi
c0001274:	c7 40 08 f4 b5 03 c0 	mov    DWORD PTR [eax+0x8],0xc003b5f4
c000127b:	c7 40 0c f4 b5 03 c0 	mov    DWORD PTR [eax+0xc],0xc003b5f4
c0001282:	83 ce 01             	or     esi,0x1
c0001285:	89 d1                	mov    ecx,edx
c0001287:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000128a:	83 c9 01             	or     ecx,0x1
c000128d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001290:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001293:	eb 15                	jmp    c00012aa <dlmalloc+0x149>
c0001295:	a3 00 b6 03 c0       	mov    ds:0xc003b600,eax
c000129a:	39 fe                	cmp    esi,edi
c000129c:	c7 40 08 f4 b5 03 c0 	mov    DWORD PTR [eax+0x8],0xc003b5f4
c00012a3:	75 0d                	jne    c00012b2 <dlmalloc+0x151>
c00012a5:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00012aa:	8d 43 08             	lea    eax,[ebx+0x8]
c00012ad:	e9 35 02 00 00       	jmp    c00014e7 <dlmalloc+0x386>
c00012b2:	89 f8                	mov    eax,edi
c00012b4:	81 ff ff 00 00 00    	cmp    edi,0xff
c00012ba:	77 19                	ja     c00012d5 <dlmalloc+0x174>
c00012bc:	c1 e8 03             	shr    eax,0x3
c00012bf:	8d 14 00             	lea    edx,[eax+eax*1]
c00012c2:	83 c2 0d             	add    edx,0xd
c00012c5:	8d 2c 95 b8 b5 03 c0 	lea    ebp,[edx*4-0x3ffc4a48]
c00012cc:	8b 14 95 c0 b5 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc4a40]
c00012d3:	eb 46                	jmp    c000131b <dlmalloc+0x1ba>
c00012d5:	e8 c1 f9 ff ff       	call   c0000c9b <largebin_index>
c00012da:	8d 14 00             	lea    edx,[eax+eax*1]
c00012dd:	83 c2 0d             	add    edx,0xd
c00012e0:	8d 0c 95 c0 b5 03 c0 	lea    ecx,[edx*4-0x3ffc4a40]
c00012e7:	8b 14 95 c0 b5 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc4a40]
c00012ee:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012f1:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012f5:	89 d5                	mov    ebp,edx
c00012f7:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012fb:	74 1e                	je     c000131b <dlmalloc+0x1ba>
c00012fd:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001300:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001303:	77 12                	ja     c0001317 <dlmalloc+0x1b6>
c0001305:	83 cf 01             	or     edi,0x1
c0001308:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000130b:	76 05                	jbe    c0001312 <dlmalloc+0x1b1>
c000130d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001310:	eb f6                	jmp    c0001308 <dlmalloc+0x1a7>
c0001312:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001315:	eb 04                	jmp    c000131b <dlmalloc+0x1ba>
c0001317:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000131b:	89 c7                	mov    edi,eax
c000131d:	88 c1                	mov    cl,al
c000131f:	c1 ff 05             	sar    edi,0x5
c0001322:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001326:	bf 01 00 00 00       	mov    edi,0x1
c000132b:	d3 e7                	shl    edi,cl
c000132d:	89 f8                	mov    eax,edi
c000132f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001333:	09 04 bd f4 b8 03 c0 	or     DWORD PTR [edi*4-0x3ffc470c],eax
c000133a:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c000133d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001340:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001343:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001346:	e9 db fe ff ff       	jmp    c0001226 <dlmalloc+0xc5>
c000134b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001351:	76 78                	jbe    c00013cb <dlmalloc+0x26a>
c0001353:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001357:	8d 04 c5 f4 b5 03 c0 	lea    eax,[eax*8-0x3ffc4a0c]
c000135e:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001361:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001364:	39 ca                	cmp    edx,ecx
c0001366:	74 63                	je     c00013cb <dlmalloc+0x26a>
c0001368:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000136b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000136e:	83 e3 fc             	and    ebx,0xfffffffc
c0001371:	39 de                	cmp    esi,ebx
c0001373:	77 52                	ja     c00013c7 <dlmalloc+0x266>
c0001375:	89 df                	mov    edi,ebx
c0001377:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000137a:	29 f7                	sub    edi,esi
c000137c:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000137f:	01 d3                	add    ebx,edx
c0001381:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001384:	83 ff 0f             	cmp    edi,0xf
c0001387:	8d 42 08             	lea    eax,[edx+0x8]
c000138a:	77 09                	ja     c0001395 <dlmalloc+0x234>
c000138c:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001390:	e9 52 01 00 00       	jmp    c00014e7 <dlmalloc+0x386>
c0001395:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001398:	83 ce 01             	or     esi,0x1
c000139b:	89 0d fc b5 03 c0    	mov    DWORD PTR ds:0xc003b5fc,ecx
c00013a1:	89 0d 00 b6 03 c0    	mov    DWORD PTR ds:0xc003b600,ecx
c00013a7:	c7 41 08 f4 b5 03 c0 	mov    DWORD PTR [ecx+0x8],0xc003b5f4
c00013ae:	c7 41 0c f4 b5 03 c0 	mov    DWORD PTR [ecx+0xc],0xc003b5f4
c00013b5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c00013b8:	89 fa                	mov    edx,edi
c00013ba:	83 ca 01             	or     edx,0x1
c00013bd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00013c0:	89 3b                	mov    DWORD PTR [ebx],edi
c00013c2:	e9 20 01 00 00       	jmp    c00014e7 <dlmalloc+0x386>
c00013c7:	89 c2                	mov    edx,eax
c00013c9:	eb 99                	jmp    c0001364 <dlmalloc+0x203>
c00013cb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00013cf:	b8 01 00 00 00       	mov    eax,0x1
c00013d4:	41                   	inc    ecx
c00013d5:	89 cb                	mov    ebx,ecx
c00013d7:	8d 14 cd ec b5 03 c0 	lea    edx,[ecx*8-0x3ffc4a14]
c00013de:	c1 eb 05             	shr    ebx,0x5
c00013e1:	d3 e0                	shl    eax,cl
c00013e3:	8b 3c 9d f4 b8 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc470c]
c00013ea:	39 f8                	cmp    eax,edi
c00013ec:	77 04                	ja     c00013f2 <dlmalloc+0x291>
c00013ee:	85 c0                	test   eax,eax
c00013f0:	75 26                	jne    c0001418 <dlmalloc+0x2b7>
c00013f2:	43                   	inc    ebx
c00013f3:	83 fb 02             	cmp    ebx,0x2
c00013f6:	0f 87 a6 00 00 00    	ja     c00014a2 <dlmalloc+0x341>
c00013fc:	8b 3c 9d f4 b8 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc470c]
c0001403:	85 ff                	test   edi,edi
c0001405:	74 eb                	je     c00013f2 <dlmalloc+0x291>
c0001407:	89 d8                	mov    eax,ebx
c0001409:	c1 e0 06             	shl    eax,0x6
c000140c:	8d 14 85 ec b5 03 c0 	lea    edx,[eax*4-0x3ffc4a14]
c0001413:	b8 01 00 00 00       	mov    eax,0x1
c0001418:	85 f8                	test   eax,edi
c000141a:	75 07                	jne    c0001423 <dlmalloc+0x2c2>
c000141c:	83 c2 08             	add    edx,0x8
c000141f:	01 c0                	add    eax,eax
c0001421:	eb f5                	jmp    c0001418 <dlmalloc+0x2b7>
c0001423:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001426:	39 ca                	cmp    edx,ecx
c0001428:	75 14                	jne    c000143e <dlmalloc+0x2dd>
c000142a:	89 c1                	mov    ecx,eax
c000142c:	83 c2 08             	add    edx,0x8
c000142f:	f7 d1                	not    ecx
c0001431:	01 c0                	add    eax,eax
c0001433:	21 cf                	and    edi,ecx
c0001435:	89 3c 9d f4 b8 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc470c],edi
c000143c:	eb ac                	jmp    c00013ea <dlmalloc+0x289>
c000143e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001441:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001444:	83 e0 fc             	and    eax,0xfffffffc
c0001447:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000144a:	89 c3                	mov    ebx,eax
c000144c:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000144f:	29 f3                	sub    ebx,esi
c0001451:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001454:	83 fb 0f             	cmp    ebx,0xf
c0001457:	8d 41 08             	lea    eax,[ecx+0x8]
c000145a:	77 09                	ja     c0001465 <dlmalloc+0x304>
c000145c:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001460:	e9 82 00 00 00       	jmp    c00014e7 <dlmalloc+0x386>
c0001465:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001468:	81 fe ff 00 00 00    	cmp    esi,0xff
c000146e:	89 3d fc b5 03 c0    	mov    DWORD PTR ds:0xc003b5fc,edi
c0001474:	89 3d 00 b6 03 c0    	mov    DWORD PTR ds:0xc003b600,edi
c000147a:	c7 47 08 f4 b5 03 c0 	mov    DWORD PTR [edi+0x8],0xc003b5f4
c0001481:	c7 47 0c f4 b5 03 c0 	mov    DWORD PTR [edi+0xc],0xc003b5f4
c0001488:	77 06                	ja     c0001490 <dlmalloc+0x32f>
c000148a:	89 3d f0 b5 03 c0    	mov    DWORD PTR ds:0xc003b5f0,edi
c0001490:	83 ce 01             	or     esi,0x1
c0001493:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001496:	89 d9                	mov    ecx,ebx
c0001498:	83 c9 01             	or     ecx,0x1
c000149b:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000149e:	89 1a                	mov    DWORD PTR [edx],ebx
c00014a0:	eb 45                	jmp    c00014e7 <dlmalloc+0x386>
c00014a2:	a1 ec b5 03 c0       	mov    eax,ds:0xc003b5ec
c00014a7:	8d 4e 10             	lea    ecx,[esi+0x10]
c00014aa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00014ad:	83 e2 fc             	and    edx,0xfffffffc
c00014b0:	39 d1                	cmp    ecx,edx
c00014b2:	77 1e                	ja     c00014d2 <dlmalloc+0x371>
c00014b4:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00014b7:	89 f3                	mov    ebx,esi
c00014b9:	89 0d ec b5 03 c0    	mov    DWORD PTR ds:0xc003b5ec,ecx
c00014bf:	83 cb 01             	or     ebx,0x1
c00014c2:	29 f2                	sub    edx,esi
c00014c4:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014c7:	83 ca 01             	or     edx,0x1
c00014ca:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014cd:	e9 2d fd ff ff       	jmp    c00011ff <dlmalloc+0x9e>
c00014d2:	83 c4 1c             	add    esp,0x1c
c00014d5:	89 f0                	mov    eax,esi
c00014d7:	5b                   	pop    ebx
c00014d8:	ba c0 b5 03 c0       	mov    edx,0xc003b5c0
c00014dd:	5e                   	pop    esi
c00014de:	5f                   	pop    edi
c00014df:	5d                   	pop    ebp
c00014e0:	e9 16 fa ff ff       	jmp    c0000efb <sYSMALLOc>
c00014e5:	31 c0                	xor    eax,eax
c00014e7:	83 c4 1c             	add    esp,0x1c
c00014ea:	5b                   	pop    ebx
c00014eb:	5e                   	pop    esi
c00014ec:	5f                   	pop    edi
c00014ed:	5d                   	pop    ebp
c00014ee:	c3                   	ret    

c00014ef <iALLOc>:
c00014ef:	55                   	push   ebp
c00014f0:	89 c5                	mov    ebp,eax
c00014f2:	57                   	push   edi
c00014f3:	56                   	push   esi
c00014f4:	53                   	push   ebx
c00014f5:	83 ec 2c             	sub    esp,0x2c
c00014f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014fc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001500:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001504:	83 3d c0 b5 03 c0 00 	cmp    DWORD PTR ds:0xc003b5c0,0x0
c000150b:	75 12                	jne    c000151f <iALLOc+0x30>
c000150d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001511:	b8 c0 b5 03 c0       	mov    eax,0xc003b5c0
c0001516:	e8 04 f8 ff ff       	call   c0000d1f <malloc_consolidate>
c000151b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000151f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001524:	74 12                	je     c0001538 <iALLOc+0x49>
c0001526:	85 ed                	test   ebp,ebp
c0001528:	0f 84 64 01 00 00    	je     c0001692 <iALLOc+0x1a3>
c000152e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001536:	eb 33                	jmp    c000156b <iALLOc+0x7c>
c0001538:	85 ed                	test   ebp,ebp
c000153a:	75 14                	jne    c0001550 <iALLOc+0x61>
c000153c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001544:	83 c4 2c             	add    esp,0x2c
c0001547:	5b                   	pop    ebx
c0001548:	5e                   	pop    esi
c0001549:	5f                   	pop    edi
c000154a:	5d                   	pop    ebp
c000154b:	e9 11 fc ff ff       	jmp    c0001161 <dlmalloc>
c0001550:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001557:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000155f:	83 f8 0f             	cmp    eax,0xf
c0001562:	76 07                	jbe    c000156b <iALLOc+0x7c>
c0001564:	83 e0 f8             	and    eax,0xfffffff8
c0001567:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000156b:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001570:	75 09                	jne    c000157b <iALLOc+0x8c>
c0001572:	89 d0                	mov    eax,edx
c0001574:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001577:	31 f6                	xor    esi,esi
c0001579:	eb 3b                	jmp    c00015b6 <iALLOc+0xc7>
c000157b:	8b 02                	mov    eax,DWORD PTR [edx]
c000157d:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001585:	83 c0 0b             	add    eax,0xb
c0001588:	83 f8 0f             	cmp    eax,0xf
c000158b:	76 07                	jbe    c0001594 <iALLOc+0xa5>
c000158d:	83 e0 f8             	and    eax,0xfffffff8
c0001590:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001594:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001598:	0f af f5             	imul   esi,ebp
c000159b:	eb 25                	jmp    c00015c2 <iALLOc+0xd3>
c000159d:	8b 18                	mov    ebx,DWORD PTR [eax]
c000159f:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00015a2:	bb 10 00 00 00       	mov    ebx,0x10
c00015a7:	83 f9 0f             	cmp    ecx,0xf
c00015aa:	76 05                	jbe    c00015b1 <iALLOc+0xc2>
c00015ac:	83 e1 f8             	and    ecx,0xfffffff8
c00015af:	89 cb                	mov    ebx,ecx
c00015b1:	01 de                	add    esi,ebx
c00015b3:	83 c0 04             	add    eax,0x4
c00015b6:	39 c7                	cmp    edi,eax
c00015b8:	75 e3                	jne    c000159d <iALLOc+0xae>
c00015ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00015c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00015c6:	8b 1d 14 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b914
c00015cc:	83 ec 0c             	sub    esp,0xc
c00015cf:	c7 05 14 b9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b914,0x0
c00015d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00015dd:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00015e1:	50                   	push   eax
c00015e2:	e8 7a fb ff ff       	call   c0001161 <dlmalloc>
c00015e7:	83 c4 10             	add    esp,0x10
c00015ea:	89 1d 14 b9 03 c0    	mov    DWORD PTR ds:0xc003b914,ebx
c00015f0:	85 c0                	test   eax,eax
c00015f2:	0f 84 92 00 00 00    	je     c000168a <iALLOc+0x19b>
c00015f8:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015fb:	8d 78 f8             	lea    edi,[eax-0x8]
c00015fe:	83 e3 fc             	and    ebx,0xfffffffc
c0001601:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001605:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000160a:	74 1e                	je     c000162a <iALLOc+0x13b>
c000160c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001610:	89 d9                	mov    ecx,ebx
c0001612:	52                   	push   edx
c0001613:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001617:	83 e9 04             	sub    ecx,0x4
c000161a:	51                   	push   ecx
c000161b:	6a 00                	push   0x0
c000161d:	50                   	push   eax
c000161e:	e8 b5 f0 ff ff       	call   c00006d8 <memset>
c0001623:	83 c4 10             	add    esp,0x10
c0001626:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000162a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000162f:	75 14                	jne    c0001645 <iALLOc+0x156>
c0001631:	8d 04 37             	lea    eax,[edi+esi*1]
c0001634:	29 f3                	sub    ebx,esi
c0001636:	8d 48 08             	lea    ecx,[eax+0x8]
c0001639:	83 cb 01             	or     ebx,0x1
c000163c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001640:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001643:	89 f3                	mov    ebx,esi
c0001645:	31 c0                	xor    eax,eax
c0001647:	4d                   	dec    ebp
c0001648:	8d 4f 08             	lea    ecx,[edi+0x8]
c000164b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000164f:	39 c5                	cmp    ebp,eax
c0001651:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001654:	74 2c                	je     c0001682 <iALLOc+0x193>
c0001656:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000165a:	85 c9                	test   ecx,ecx
c000165c:	75 15                	jne    c0001673 <iALLOc+0x184>
c000165e:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001661:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001664:	b9 10 00 00 00       	mov    ecx,0x10
c0001669:	83 fe 0f             	cmp    esi,0xf
c000166c:	76 05                	jbe    c0001673 <iALLOc+0x184>
c000166e:	83 e6 f8             	and    esi,0xfffffff8
c0001671:	89 f1                	mov    ecx,esi
c0001673:	89 ce                	mov    esi,ecx
c0001675:	29 cb                	sub    ebx,ecx
c0001677:	83 ce 01             	or     esi,0x1
c000167a:	40                   	inc    eax
c000167b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000167e:	01 cf                	add    edi,ecx
c0001680:	eb c6                	jmp    c0001648 <iALLOc+0x159>
c0001682:	83 cb 01             	or     ebx,0x1
c0001685:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001688:	eb 08                	jmp    c0001692 <iALLOc+0x1a3>
c000168a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001692:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001696:	83 c4 2c             	add    esp,0x2c
c0001699:	5b                   	pop    ebx
c000169a:	5e                   	pop    esi
c000169b:	5f                   	pop    edi
c000169c:	5d                   	pop    ebp
c000169d:	c3                   	ret    

c000169e <dlrealloc>:
c000169e:	55                   	push   ebp
c000169f:	57                   	push   edi
c00016a0:	56                   	push   esi
c00016a1:	53                   	push   ebx
c00016a2:	83 ec 1c             	sub    esp,0x1c
c00016a5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00016a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00016ad:	85 db                	test   ebx,ebx
c00016af:	75 10                	jne    c00016c1 <dlrealloc+0x23>
c00016b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00016b5:	83 c4 1c             	add    esp,0x1c
c00016b8:	5b                   	pop    ebx
c00016b9:	5e                   	pop    esi
c00016ba:	5f                   	pop    edi
c00016bb:	5d                   	pop    ebp
c00016bc:	e9 a0 fa ff ff       	jmp    c0001161 <dlmalloc>
c00016c1:	83 f8 df             	cmp    eax,0xffffffdf
c00016c4:	76 07                	jbe    c00016cd <dlrealloc+0x2f>
c00016c6:	31 db                	xor    ebx,ebx
c00016c8:	e9 7c 01 00 00       	jmp    c0001849 <dlrealloc+0x1ab>
c00016cd:	83 c0 0b             	add    eax,0xb
c00016d0:	bf 10 00 00 00       	mov    edi,0x10
c00016d5:	83 f8 0f             	cmp    eax,0xf
c00016d8:	76 05                	jbe    c00016df <dlrealloc+0x41>
c00016da:	83 e0 f8             	and    eax,0xfffffff8
c00016dd:	89 c7                	mov    edi,eax
c00016df:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00016e2:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00016e5:	89 c6                	mov    esi,eax
c00016e7:	83 e6 fc             	and    esi,0xfffffffc
c00016ea:	a8 02                	test   al,0x2
c00016ec:	75 d8                	jne    c00016c6 <dlrealloc+0x28>
c00016ee:	39 f7                	cmp    edi,esi
c00016f0:	0f 86 15 01 00 00    	jbe    c000180b <dlrealloc+0x16d>
c00016f6:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016fa:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016fd:	39 15 ec b5 03 c0    	cmp    DWORD PTR ds:0xc003b5ec,edx
c0001703:	75 33                	jne    c0001738 <dlrealloc+0x9a>
c0001705:	83 e1 fc             	and    ecx,0xfffffffc
c0001708:	01 f1                	add    ecx,esi
c000170a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000170e:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001711:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0001715:	77 49                	ja     c0001760 <dlrealloc+0xc2>
c0001717:	01 fd                	add    ebp,edi
c0001719:	83 e0 01             	and    eax,0x1
c000171c:	09 f8                	or     eax,edi
c000171e:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001721:	89 2d ec b5 03 c0    	mov    DWORD PTR ds:0xc003b5ec,ebp
c0001727:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000172b:	29 f8                	sub    eax,edi
c000172d:	83 c8 01             	or     eax,0x1
c0001730:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001733:	e9 11 01 00 00       	jmp    c0001849 <dlrealloc+0x1ab>
c0001738:	89 c8                	mov    eax,ecx
c000173a:	83 e0 fe             	and    eax,0xfffffffe
c000173d:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001742:	75 1c                	jne    c0001760 <dlrealloc+0xc2>
c0001744:	83 e1 fc             	and    ecx,0xfffffffc
c0001747:	01 f1                	add    ecx,esi
c0001749:	39 cf                	cmp    edi,ecx
c000174b:	77 13                	ja     c0001760 <dlrealloc+0xc2>
c000174d:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001750:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001753:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001756:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001759:	89 ce                	mov    esi,ecx
c000175b:	e9 ab 00 00 00       	jmp    c000180b <dlrealloc+0x16d>
c0001760:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001764:	8d 47 f9             	lea    eax,[edi-0x7]
c0001767:	83 ec 0c             	sub    esp,0xc
c000176a:	50                   	push   eax
c000176b:	e8 f1 f9 ff ff       	call   c0001161 <dlmalloc>
c0001770:	83 c4 10             	add    esp,0x10
c0001773:	89 c1                	mov    ecx,eax
c0001775:	85 c0                	test   eax,eax
c0001777:	0f 84 49 ff ff ff    	je     c00016c6 <dlrealloc+0x28>
c000177d:	8d 40 f8             	lea    eax,[eax-0x8]
c0001780:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001784:	39 c2                	cmp    edx,eax
c0001786:	75 0a                	jne    c0001792 <dlrealloc+0xf4>
c0001788:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000178b:	83 e0 fc             	and    eax,0xfffffffc
c000178e:	01 c6                	add    esi,eax
c0001790:	eb 79                	jmp    c000180b <dlrealloc+0x16d>
c0001792:	83 ee 04             	sub    esi,0x4
c0001795:	83 fe 27             	cmp    esi,0x27
c0001798:	76 16                	jbe    c00017b0 <dlrealloc+0x112>
c000179a:	50                   	push   eax
c000179b:	56                   	push   esi
c000179c:	53                   	push   ebx
c000179d:	51                   	push   ecx
c000179e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00017a2:	e8 ba ee ff ff       	call   c0000661 <memcpy>
c00017a7:	83 c4 10             	add    esp,0x10
c00017aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017ae:	eb 43                	jmp    c00017f3 <dlrealloc+0x155>
c00017b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00017b2:	83 fe 13             	cmp    esi,0x13
c00017b5:	89 01                	mov    DWORD PTR [ecx],eax
c00017b7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00017ba:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00017bd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00017c0:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00017c3:	76 2e                	jbe    c00017f3 <dlrealloc+0x155>
c00017c5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00017c8:	83 fe 1b             	cmp    esi,0x1b
c00017cb:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00017ce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00017d1:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00017d4:	76 1d                	jbe    c00017f3 <dlrealloc+0x155>
c00017d6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00017d9:	83 fe 23             	cmp    esi,0x23
c00017dc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00017df:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00017e2:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00017e5:	76 0c                	jbe    c00017f3 <dlrealloc+0x155>
c00017e7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017ea:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017ed:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017f0:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017f3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017f7:	83 ec 0c             	sub    esp,0xc
c00017fa:	53                   	push   ebx
c00017fb:	e8 06 f6 ff ff       	call   c0000e06 <dlfree>
c0001800:	83 c4 10             	add    esp,0x10
c0001803:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001807:	89 cb                	mov    ebx,ecx
c0001809:	eb 3e                	jmp    c0001849 <dlrealloc+0x1ab>
c000180b:	89 f2                	mov    edx,esi
c000180d:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001810:	29 fa                	sub    edx,edi
c0001812:	83 e1 01             	and    ecx,0x1
c0001815:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c0001819:	83 fa 0f             	cmp    edx,0xf
c000181c:	77 0b                	ja     c0001829 <dlrealloc+0x18b>
c000181e:	09 ce                	or     esi,ecx
c0001820:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001823:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001827:	eb 20                	jmp    c0001849 <dlrealloc+0x1ab>
c0001829:	01 fd                	add    ebp,edi
c000182b:	83 ec 0c             	sub    esp,0xc
c000182e:	09 cf                	or     edi,ecx
c0001830:	83 ca 01             	or     edx,0x1
c0001833:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001836:	83 c5 08             	add    ebp,0x8
c0001839:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000183c:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001840:	55                   	push   ebp
c0001841:	e8 c0 f5 ff ff       	call   c0000e06 <dlfree>
c0001846:	83 c4 10             	add    esp,0x10
c0001849:	83 c4 1c             	add    esp,0x1c
c000184c:	89 d8                	mov    eax,ebx
c000184e:	5b                   	pop    ebx
c000184f:	5e                   	pop    esi
c0001850:	5f                   	pop    edi
c0001851:	5d                   	pop    ebp
c0001852:	c3                   	ret    

c0001853 <dlmemalign>:
c0001853:	55                   	push   ebp
c0001854:	57                   	push   edi
c0001855:	56                   	push   esi
c0001856:	53                   	push   ebx
c0001857:	83 ec 0c             	sub    esp,0xc
c000185a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000185e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001862:	83 fa 08             	cmp    edx,0x8
c0001865:	77 10                	ja     c0001877 <dlmemalign+0x24>
c0001867:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000186b:	83 c4 0c             	add    esp,0xc
c000186e:	5b                   	pop    ebx
c000186f:	5e                   	pop    esi
c0001870:	5f                   	pop    edi
c0001871:	5d                   	pop    ebp
c0001872:	e9 ea f8 ff ff       	jmp    c0001161 <dlmalloc>
c0001877:	bf 10 00 00 00       	mov    edi,0x10
c000187c:	83 fa 0f             	cmp    edx,0xf
c000187f:	76 13                	jbe    c0001894 <dlmemalign+0x41>
c0001881:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001884:	85 d1                	test   ecx,edx
c0001886:	75 04                	jne    c000188c <dlmemalign+0x39>
c0001888:	89 d7                	mov    edi,edx
c000188a:	eb 08                	jmp    c0001894 <dlmemalign+0x41>
c000188c:	39 d7                	cmp    edi,edx
c000188e:	73 04                	jae    c0001894 <dlmemalign+0x41>
c0001890:	01 ff                	add    edi,edi
c0001892:	eb f8                	jmp    c000188c <dlmemalign+0x39>
c0001894:	83 f8 df             	cmp    eax,0xffffffdf
c0001897:	76 07                	jbe    c00018a0 <dlmemalign+0x4d>
c0001899:	31 c0                	xor    eax,eax
c000189b:	e9 ce 00 00 00       	jmp    c000196e <dlmemalign+0x11b>
c00018a0:	83 c0 0b             	add    eax,0xb
c00018a3:	bd 10 00 00 00       	mov    ebp,0x10
c00018a8:	83 f8 0f             	cmp    eax,0xf
c00018ab:	76 05                	jbe    c00018b2 <dlmemalign+0x5f>
c00018ad:	83 e0 f8             	and    eax,0xfffffff8
c00018b0:	89 c5                	mov    ebp,eax
c00018b2:	83 ec 0c             	sub    esp,0xc
c00018b5:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00018b9:	50                   	push   eax
c00018ba:	e8 a2 f8 ff ff       	call   c0001161 <dlmalloc>
c00018bf:	83 c4 10             	add    esp,0x10
c00018c2:	89 c1                	mov    ecx,eax
c00018c4:	85 c0                	test   eax,eax
c00018c6:	74 d1                	je     c0001899 <dlmemalign+0x46>
c00018c8:	31 d2                	xor    edx,edx
c00018ca:	8d 70 f8             	lea    esi,[eax-0x8]
c00018cd:	f7 f7                	div    edi
c00018cf:	85 d2                	test   edx,edx
c00018d1:	74 62                	je     c0001935 <dlmemalign+0xe2>
c00018d3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00018d7:	89 f8                	mov    eax,edi
c00018d9:	f7 d8                	neg    eax
c00018db:	21 c3                	and    ebx,eax
c00018dd:	83 eb 08             	sub    ebx,0x8
c00018e0:	89 d8                	mov    eax,ebx
c00018e2:	29 f0                	sub    eax,esi
c00018e4:	83 f8 0f             	cmp    eax,0xf
c00018e7:	77 02                	ja     c00018eb <dlmemalign+0x98>
c00018e9:	01 fb                	add    ebx,edi
c00018eb:	89 d8                	mov    eax,ebx
c00018ed:	29 f0                	sub    eax,esi
c00018ef:	89 c6                	mov    esi,eax
c00018f1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018f4:	89 c2                	mov    edx,eax
c00018f6:	83 e2 fc             	and    edx,0xfffffffc
c00018f9:	29 f2                	sub    edx,esi
c00018fb:	a8 02                	test   al,0x2
c00018fd:	74 10                	je     c000190f <dlmemalign+0xbc>
c00018ff:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001902:	83 ca 02             	or     edx,0x2
c0001905:	8d 43 08             	lea    eax,[ebx+0x8]
c0001908:	89 33                	mov    DWORD PTR [ebx],esi
c000190a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000190d:	eb 5f                	jmp    c000196e <dlmemalign+0x11b>
c000190f:	83 ec 0c             	sub    esp,0xc
c0001912:	89 d0                	mov    eax,edx
c0001914:	83 c8 01             	or     eax,0x1
c0001917:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000191a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000191f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001922:	83 e0 01             	and    eax,0x1
c0001925:	09 f0                	or     eax,esi
c0001927:	89 de                	mov    esi,ebx
c0001929:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000192c:	51                   	push   ecx
c000192d:	e8 d4 f4 ff ff       	call   c0000e06 <dlfree>
c0001932:	83 c4 10             	add    esp,0x10
c0001935:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001938:	a8 02                	test   al,0x2
c000193a:	75 2f                	jne    c000196b <dlmemalign+0x118>
c000193c:	83 e0 fc             	and    eax,0xfffffffc
c000193f:	8d 55 10             	lea    edx,[ebp+0x10]
c0001942:	39 c2                	cmp    edx,eax
c0001944:	73 25                	jae    c000196b <dlmemalign+0x118>
c0001946:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001949:	83 ec 0c             	sub    esp,0xc
c000194c:	29 e8                	sub    eax,ebp
c000194e:	83 c2 08             	add    edx,0x8
c0001951:	83 c8 01             	or     eax,0x1
c0001954:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001957:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000195a:	83 e0 01             	and    eax,0x1
c000195d:	09 c5                	or     ebp,eax
c000195f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001962:	52                   	push   edx
c0001963:	e8 9e f4 ff ff       	call   c0000e06 <dlfree>
c0001968:	83 c4 10             	add    esp,0x10
c000196b:	8d 46 08             	lea    eax,[esi+0x8]
c000196e:	83 c4 0c             	add    esp,0xc
c0001971:	5b                   	pop    ebx
c0001972:	5e                   	pop    esi
c0001973:	5f                   	pop    edi
c0001974:	5d                   	pop    ebp
c0001975:	c3                   	ret    

c0001976 <dlcalloc>:
c0001976:	53                   	push   ebx
c0001977:	83 ec 14             	sub    esp,0x14
c000197a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000197e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001983:	50                   	push   eax
c0001984:	e8 d8 f7 ff ff       	call   c0001161 <dlmalloc>
c0001989:	83 c4 10             	add    esp,0x10
c000198c:	89 c3                	mov    ebx,eax
c000198e:	85 c0                	test   eax,eax
c0001990:	74 77                	je     c0001a09 <dlcalloc+0x93>
c0001992:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001995:	89 d0                	mov    eax,edx
c0001997:	83 e0 fc             	and    eax,0xfffffffc
c000199a:	80 e2 02             	and    dl,0x2
c000199d:	75 5a                	jne    c00019f9 <dlcalloc+0x83>
c000199f:	83 e8 04             	sub    eax,0x4
c00019a2:	83 f8 27             	cmp    eax,0x27
c00019a5:	76 03                	jbe    c00019aa <dlcalloc+0x34>
c00019a7:	51                   	push   ecx
c00019a8:	eb 53                	jmp    c00019fd <dlcalloc+0x87>
c00019aa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00019b0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00019b7:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00019be:	83 f8 13             	cmp    eax,0x13
c00019c1:	76 46                	jbe    c0001a09 <dlcalloc+0x93>
c00019c3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00019ca:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00019d1:	83 f8 1b             	cmp    eax,0x1b
c00019d4:	76 33                	jbe    c0001a09 <dlcalloc+0x93>
c00019d6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00019dd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00019e4:	83 f8 23             	cmp    eax,0x23
c00019e7:	76 20                	jbe    c0001a09 <dlcalloc+0x93>
c00019e9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019f0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019f7:	eb 10                	jmp    c0001a09 <dlcalloc+0x93>
c00019f9:	83 e8 08             	sub    eax,0x8
c00019fc:	52                   	push   edx
c00019fd:	50                   	push   eax
c00019fe:	6a 00                	push   0x0
c0001a00:	53                   	push   ebx
c0001a01:	e8 d2 ec ff ff       	call   c00006d8 <memset>
c0001a06:	83 c4 10             	add    esp,0x10
c0001a09:	89 d8                	mov    eax,ebx
c0001a0b:	83 c4 08             	add    esp,0x8
c0001a0e:	5b                   	pop    ebx
c0001a0f:	c3                   	ret    

c0001a10 <dlcfree>:
c0001a10:	e9 f1 f3 ff ff       	jmp    c0000e06 <dlfree>

c0001a15 <dlindependent_calloc>:
c0001a15:	83 ec 28             	sub    esp,0x28
c0001a18:	b9 03 00 00 00       	mov    ecx,0x3
c0001a1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a21:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001a25:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001a29:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001a2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a31:	e8 b9 fa ff ff       	call   c00014ef <iALLOc>
c0001a36:	83 c4 2c             	add    esp,0x2c
c0001a39:	c3                   	ret    

c0001a3a <dlindependent_comalloc>:
c0001a3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001a3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a42:	31 c9                	xor    ecx,ecx
c0001a44:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a4c:	e9 9e fa ff ff       	jmp    c00014ef <iALLOc>

c0001a51 <dlvalloc>:
c0001a51:	83 ec 0c             	sub    esp,0xc
c0001a54:	83 3d c0 b5 03 c0 00 	cmp    DWORD PTR ds:0xc003b5c0,0x0
c0001a5b:	75 0a                	jne    c0001a67 <dlvalloc+0x16>
c0001a5d:	b8 c0 b5 03 c0       	mov    eax,0xc003b5c0
c0001a62:	e8 b8 f2 ff ff       	call   c0000d1f <malloc_consolidate>
c0001a67:	50                   	push   eax
c0001a68:	50                   	push   eax
c0001a69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a6d:	ff 35 1c b9 03 c0    	push   DWORD PTR ds:0xc003b91c
c0001a73:	e8 db fd ff ff       	call   c0001853 <dlmemalign>
c0001a78:	83 c4 1c             	add    esp,0x1c
c0001a7b:	c3                   	ret    

c0001a7c <dlpvalloc>:
c0001a7c:	83 ec 0c             	sub    esp,0xc
c0001a7f:	83 3d c0 b5 03 c0 00 	cmp    DWORD PTR ds:0xc003b5c0,0x0
c0001a86:	75 0a                	jne    c0001a92 <dlpvalloc+0x16>
c0001a88:	b8 c0 b5 03 c0       	mov    eax,0xc003b5c0
c0001a8d:	e8 8d f2 ff ff       	call   c0000d1f <malloc_consolidate>
c0001a92:	a1 1c b9 03 c0       	mov    eax,ds:0xc003b91c
c0001a97:	89 c1                	mov    ecx,eax
c0001a99:	52                   	push   edx
c0001a9a:	f7 d9                	neg    ecx
c0001a9c:	52                   	push   edx
c0001a9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001aa1:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001aa5:	21 ca                	and    edx,ecx
c0001aa7:	52                   	push   edx
c0001aa8:	50                   	push   eax
c0001aa9:	e8 a5 fd ff ff       	call   c0001853 <dlmemalign>
c0001aae:	83 c4 1c             	add    esp,0x1c
c0001ab1:	c3                   	ret    

c0001ab2 <dlmalloc_trim>:
c0001ab2:	b8 c0 b5 03 c0       	mov    eax,0xc003b5c0
c0001ab7:	e8 63 f2 ff ff       	call   c0000d1f <malloc_consolidate>
c0001abc:	31 c0                	xor    eax,eax
c0001abe:	c3                   	ret    

c0001abf <dlmalloc_usable_size>:
c0001abf:	53                   	push   ebx
c0001ac0:	31 c0                	xor    eax,eax
c0001ac2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001ac6:	85 c9                	test   ecx,ecx
c0001ac8:	74 24                	je     c0001aee <dlmalloc_usable_size+0x2f>
c0001aca:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001acd:	f6 c2 02             	test   dl,0x2
c0001ad0:	74 08                	je     c0001ada <dlmalloc_usable_size+0x1b>
c0001ad2:	83 e2 fc             	and    edx,0xfffffffc
c0001ad5:	8d 42 f8             	lea    eax,[edx-0x8]
c0001ad8:	eb 14                	jmp    c0001aee <dlmalloc_usable_size+0x2f>
c0001ada:	89 d3                	mov    ebx,edx
c0001adc:	31 c0                	xor    eax,eax
c0001ade:	83 e3 fe             	and    ebx,0xfffffffe
c0001ae1:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001ae6:	74 06                	je     c0001aee <dlmalloc_usable_size+0x2f>
c0001ae8:	83 e2 fc             	and    edx,0xfffffffc
c0001aeb:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aee:	5b                   	pop    ebx
c0001aef:	c3                   	ret    

c0001af0 <dlmallinfo>:
c0001af0:	55                   	push   ebp
c0001af1:	57                   	push   edi
c0001af2:	56                   	push   esi
c0001af3:	53                   	push   ebx
c0001af4:	83 ec 08             	sub    esp,0x8
c0001af7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001afb:	83 3d ec b5 03 c0 00 	cmp    DWORD PTR ds:0xc003b5ec,0x0
c0001b02:	75 0a                	jne    c0001b0e <dlmallinfo+0x1e>
c0001b04:	b8 c0 b5 03 c0       	mov    eax,0xc003b5c0
c0001b09:	e8 11 f2 ff ff       	call   c0000d1f <malloc_consolidate>
c0001b0e:	a1 ec b5 03 c0       	mov    eax,ds:0xc003b5ec
c0001b13:	31 ed                	xor    ebp,ebp
c0001b15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001b18:	31 c9                	xor    ecx,ecx
c0001b1a:	83 e0 fc             	and    eax,0xfffffffc
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	31 c0                	xor    eax,eax
c0001b23:	8b 14 85 c4 b5 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc4a3c]
c0001b2a:	85 d2                	test   edx,edx
c0001b2c:	74 0e                	je     c0001b3c <dlmallinfo+0x4c>
c0001b2e:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001b31:	45                   	inc    ebp
c0001b32:	83 e6 fc             	and    esi,0xfffffffc
c0001b35:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001b38:	01 f1                	add    ecx,esi
c0001b3a:	eb ee                	jmp    c0001b2a <dlmallinfo+0x3a>
c0001b3c:	40                   	inc    eax
c0001b3d:	83 f8 0a             	cmp    eax,0xa
c0001b40:	75 e1                	jne    c0001b23 <dlmallinfo+0x33>
c0001b42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b46:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b4d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b50:	b8 f4 b5 03 c0       	mov    eax,0xc003b5f4
c0001b55:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b58:	39 f0                	cmp    eax,esi
c0001b5a:	74 10                	je     c0001b6c <dlmallinfo+0x7c>
c0001b5c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b5f:	ff 04 24             	inc    DWORD PTR [esp]
c0001b62:	83 e7 fc             	and    edi,0xfffffffc
c0001b65:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b68:	01 fa                	add    edx,edi
c0001b6a:	eb ec                	jmp    c0001b58 <dlmallinfo+0x68>
c0001b6c:	83 c0 08             	add    eax,0x8
c0001b6f:	3d ec b8 03 c0       	cmp    eax,0xc003b8ec
c0001b74:	75 df                	jne    c0001b55 <dlmallinfo+0x65>
c0001b76:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b79:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b7c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b7f:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c0001b84:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b87:	89 03                	mov    DWORD PTR [ebx],eax
c0001b89:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b8c:	8b 35 10 b9 03 c0    	mov    esi,DWORD PTR ds:0xc003b910
c0001b92:	29 d0                	sub    eax,edx
c0001b94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b97:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b9a:	8b 35 24 b9 03 c0    	mov    esi,DWORD PTR ds:0xc003b924
c0001ba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ba4:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001ba7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001baa:	8b 35 34 b9 03 c0    	mov    esi,DWORD PTR ds:0xc003b934
c0001bb0:	89 d8                	mov    eax,ebx
c0001bb2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001bb5:	83 c4 08             	add    esp,0x8
c0001bb8:	5b                   	pop    ebx
c0001bb9:	5e                   	pop    esi
c0001bba:	5f                   	pop    edi
c0001bbb:	5d                   	pop    ebp
c0001bbc:	c2 04 00             	ret    0x4

c0001bbf <dlmalloc_stats>:
c0001bbf:	83 ec 30             	sub    esp,0x30
c0001bc2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001bc6:	50                   	push   eax
c0001bc7:	e8 24 ff ff ff       	call   c0001af0 <dlmallinfo>
c0001bcc:	83 c4 30             	add    esp,0x30
c0001bcf:	c3                   	ret    

c0001bd0 <dlmallopt>:
c0001bd0:	56                   	push   esi
c0001bd1:	b8 c0 b5 03 c0       	mov    eax,0xc003b5c0
c0001bd6:	53                   	push   ebx
c0001bd7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001bdb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001bdf:	e8 3b f1 ff ff       	call   c0000d1f <malloc_consolidate>
c0001be4:	8d 46 04             	lea    eax,[esi+0x4]
c0001be7:	83 f8 05             	cmp    eax,0x5
c0001bea:	77 67                	ja     c0001c53 <dlmallopt+0x83>
c0001bec:	ff 24 85 24 f6 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe09dc]
c0001bf3:	83 fb 50             	cmp    ebx,0x50
c0001bf6:	77 5b                	ja     c0001c53 <dlmallopt+0x83>
c0001bf8:	ba 08 00 00 00       	mov    edx,0x8
c0001bfd:	85 db                	test   ebx,ebx
c0001bff:	74 12                	je     c0001c13 <dlmallopt+0x43>
c0001c01:	83 c3 0b             	add    ebx,0xb
c0001c04:	ba 10 00 00 00       	mov    edx,0x10
c0001c09:	83 fb 0f             	cmp    ebx,0xf
c0001c0c:	76 05                	jbe    c0001c13 <dlmallopt+0x43>
c0001c0e:	89 da                	mov    edx,ebx
c0001c10:	83 e2 f8             	and    edx,0xfffffff8
c0001c13:	a1 c0 b5 03 c0       	mov    eax,ds:0xc003b5c0
c0001c18:	83 e0 03             	and    eax,0x3
c0001c1b:	09 d0                	or     eax,edx
c0001c1d:	a3 c0 b5 03 c0       	mov    ds:0xc003b5c0,eax
c0001c22:	eb 31                	jmp    c0001c55 <dlmallopt+0x85>
c0001c24:	89 1d 04 b9 03 c0    	mov    DWORD PTR ds:0xc003b904,ebx
c0001c2a:	eb 06                	jmp    c0001c32 <dlmallopt+0x62>
c0001c2c:	89 1d 08 b9 03 c0    	mov    DWORD PTR ds:0xc003b908,ebx
c0001c32:	be 01 00 00 00       	mov    esi,0x1
c0001c37:	eb 1c                	jmp    c0001c55 <dlmallopt+0x85>
c0001c39:	89 1d 0c b9 03 c0    	mov    DWORD PTR ds:0xc003b90c,ebx
c0001c3f:	eb f1                	jmp    c0001c32 <dlmallopt+0x62>
c0001c41:	31 f6                	xor    esi,esi
c0001c43:	85 db                	test   ebx,ebx
c0001c45:	75 0e                	jne    c0001c55 <dlmallopt+0x85>
c0001c47:	c7 05 14 b9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b914,0x0
c0001c51:	eb df                	jmp    c0001c32 <dlmallopt+0x62>
c0001c53:	31 f6                	xor    esi,esi
c0001c55:	89 f0                	mov    eax,esi
c0001c57:	5b                   	pop    ebx
c0001c58:	5e                   	pop    esi
c0001c59:	c3                   	ret    

c0001c5a <disk_status>:
c0001c5a:	31 c0                	xor    eax,eax
c0001c5c:	c3                   	ret    

c0001c5d <disk_initialize>:
c0001c5d:	31 c0                	xor    eax,eax
c0001c5f:	c3                   	ret    

c0001c60 <disk_read>:
c0001c60:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c65:	0f b6 04 85 20 c8 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc37e0]
c0001c6d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c71:	e9 9c 79 01 00       	jmp    c0019612 <fatWrapperReadDisk>

c0001c76 <disk_write>:
c0001c76:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c7b:	0f b6 04 85 20 c8 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc37e0]
c0001c83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c87:	e9 cd 79 01 00       	jmp    c0019659 <fatWrapperWriteDisk>

c0001c8c <disk_ioctl>:
c0001c8c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c91:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c95:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c9a:	0f b6 04 85 20 c8 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc37e0]
c0001ca2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ca6:	e9 f5 79 01 00       	jmp    c00196a0 <fatWrapperIoctl>

c0001cab <ld_word>:
c0001cab:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001caf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cb2:	c1 e2 08             	shl    edx,0x8
c0001cb5:	09 d0                	or     eax,edx
c0001cb7:	c3                   	ret    

c0001cb8 <ld_dword>:
c0001cb8:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001cbc:	89 d1                	mov    ecx,edx
c0001cbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cc2:	c1 e1 08             	shl    ecx,0x8
c0001cc5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cc8:	09 ca                	or     edx,ecx
c0001cca:	c1 e2 08             	shl    edx,0x8
c0001ccd:	09 d0                	or     eax,edx
c0001ccf:	c3                   	ret    

c0001cd0 <ld_qword>:
c0001cd0:	57                   	push   edi
c0001cd1:	56                   	push   esi
c0001cd2:	53                   	push   ebx
c0001cd3:	31 db                	xor    ebx,ebx
c0001cd5:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001cd8:	89 df                	mov    edi,ebx
c0001cda:	89 ce                	mov    esi,ecx
c0001cdc:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001ce0:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ce4:	c1 e6 08             	shl    esi,0x8
c0001ce7:	09 f2                	or     edx,esi
c0001ce9:	89 d6                	mov    esi,edx
c0001ceb:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001cef:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cf3:	c1 e6 08             	shl    esi,0x8
c0001cf6:	09 f2                	or     edx,esi
c0001cf8:	89 d6                	mov    esi,edx
c0001cfa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cfe:	0f a4 f7 08          	shld   edi,esi,0x8
c0001d02:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d05:	c1 e6 08             	shl    esi,0x8
c0001d08:	89 fb                	mov    ebx,edi
c0001d0a:	09 f2                	or     edx,esi
c0001d0c:	89 d1                	mov    ecx,edx
c0001d0e:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001d12:	c1 e1 08             	shl    ecx,0x8
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	09 c8                	or     eax,ecx
c0001d19:	5b                   	pop    ebx
c0001d1a:	5e                   	pop    esi
c0001d1b:	5f                   	pop    edi
c0001d1c:	c3                   	ret    

c0001d1d <st_word>:
c0001d1d:	66 89 10             	mov    WORD PTR [eax],dx
c0001d20:	c3                   	ret    

c0001d21 <st_dword>:
c0001d21:	89 10                	mov    DWORD PTR [eax],edx
c0001d23:	c3                   	ret    

c0001d24 <st_qword>:
c0001d24:	89 10                	mov    DWORD PTR [eax],edx
c0001d26:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001d29:	c3                   	ret    

c0001d2a <mem_cpy>:
c0001d2a:	85 c9                	test   ecx,ecx
c0001d2c:	74 10                	je     c0001d3e <mem_cpy+0x14>
c0001d2e:	57                   	push   edi
c0001d2f:	01 c1                	add    ecx,eax
c0001d31:	56                   	push   esi
c0001d32:	89 c7                	mov    edi,eax
c0001d34:	89 d6                	mov    esi,edx
c0001d36:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d37:	39 f9                	cmp    ecx,edi
c0001d39:	75 fb                	jne    c0001d36 <mem_cpy+0xc>
c0001d3b:	5e                   	pop    esi
c0001d3c:	5f                   	pop    edi
c0001d3d:	c3                   	ret    
c0001d3e:	c3                   	ret    

c0001d3f <mem_set>:
c0001d3f:	01 c1                	add    ecx,eax
c0001d41:	40                   	inc    eax
c0001d42:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d45:	39 c8                	cmp    eax,ecx
c0001d47:	75 f8                	jne    c0001d41 <mem_set+0x2>
c0001d49:	c3                   	ret    

c0001d4a <mem_cmp>:
c0001d4a:	57                   	push   edi
c0001d4b:	56                   	push   esi
c0001d4c:	89 c6                	mov    esi,eax
c0001d4e:	53                   	push   ebx
c0001d4f:	46                   	inc    esi
c0001d50:	42                   	inc    edx
c0001d51:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d55:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d59:	29 fb                	sub    ebx,edi
c0001d5b:	89 cf                	mov    edi,ecx
c0001d5d:	29 f7                	sub    edi,esi
c0001d5f:	01 c7                	add    edi,eax
c0001d61:	74 04                	je     c0001d67 <mem_cmp+0x1d>
c0001d63:	85 db                	test   ebx,ebx
c0001d65:	74 e8                	je     c0001d4f <mem_cmp+0x5>
c0001d67:	89 d8                	mov    eax,ebx
c0001d69:	5b                   	pop    ebx
c0001d6a:	5e                   	pop    esi
c0001d6b:	5f                   	pop    edi
c0001d6c:	c3                   	ret    

c0001d6d <chk_chr>:
c0001d6d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d70:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d73:	74 07                	je     c0001d7c <chk_chr+0xf>
c0001d75:	39 d1                	cmp    ecx,edx
c0001d77:	74 03                	je     c0001d7c <chk_chr+0xf>
c0001d79:	40                   	inc    eax
c0001d7a:	eb f1                	jmp    c0001d6d <chk_chr>
c0001d7c:	89 c8                	mov    eax,ecx
c0001d7e:	c3                   	ret    

c0001d7f <dbc_1st>:
c0001d7f:	31 c0                	xor    eax,eax
c0001d81:	c3                   	ret    

c0001d82 <dbc_2nd>:
c0001d82:	31 c0                	xor    eax,eax
c0001d84:	c3                   	ret    

c0001d85 <tchar2uni>:
c0001d85:	57                   	push   edi
c0001d86:	89 c7                	mov    edi,eax
c0001d88:	56                   	push   esi
c0001d89:	53                   	push   ebx
c0001d8a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d8c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d8e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d91:	84 c9                	test   cl,cl
c0001d93:	78 0a                	js     c0001d9f <tchar2uni+0x1a>
c0001d95:	0f b6 d1             	movzx  edx,cl
c0001d98:	89 f3                	mov    ebx,esi
c0001d9a:	e9 9f 00 00 00       	jmp    c0001e3e <tchar2uni+0xb9>
c0001d9f:	88 ca                	mov    dl,cl
c0001da1:	83 e2 e0             	and    edx,0xffffffe0
c0001da4:	80 fa c0             	cmp    dl,0xc0
c0001da7:	75 0c                	jne    c0001db5 <tchar2uni+0x30>
c0001da9:	89 ca                	mov    edx,ecx
c0001dab:	b9 01 00 00 00       	mov    ecx,0x1
c0001db0:	83 e2 1f             	and    edx,0x1f
c0001db3:	eb 2e                	jmp    c0001de3 <tchar2uni+0x5e>
c0001db5:	88 ca                	mov    dl,cl
c0001db7:	83 e2 f0             	and    edx,0xfffffff0
c0001dba:	80 fa e0             	cmp    dl,0xe0
c0001dbd:	75 0c                	jne    c0001dcb <tchar2uni+0x46>
c0001dbf:	89 ca                	mov    edx,ecx
c0001dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0001dc6:	83 e2 0f             	and    edx,0xf
c0001dc9:	eb 18                	jmp    c0001de3 <tchar2uni+0x5e>
c0001dcb:	88 ca                	mov    dl,cl
c0001dcd:	83 e2 f8             	and    edx,0xfffffff8
c0001dd0:	88 d0                	mov    al,dl
c0001dd2:	83 ca ff             	or     edx,0xffffffff
c0001dd5:	3c f0                	cmp    al,0xf0
c0001dd7:	75 6c                	jne    c0001e45 <tchar2uni+0xc0>
c0001dd9:	89 ca                	mov    edx,ecx
c0001ddb:	b9 03 00 00 00       	mov    ecx,0x3
c0001de0:	83 e2 07             	and    edx,0x7
c0001de3:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001de7:	46                   	inc    esi
c0001de8:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001deb:	88 c8                	mov    al,cl
c0001ded:	83 e0 c0             	and    eax,0xffffffc0
c0001df0:	3c 80                	cmp    al,0x80
c0001df2:	75 4e                	jne    c0001e42 <tchar2uni+0xbd>
c0001df4:	c1 e2 06             	shl    edx,0x6
c0001df7:	83 e1 3f             	and    ecx,0x3f
c0001dfa:	09 ca                	or     edx,ecx
c0001dfc:	39 de                	cmp    esi,ebx
c0001dfe:	75 e7                	jne    c0001de7 <tchar2uni+0x62>
c0001e00:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e03:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e09:	77 37                	ja     c0001e42 <tchar2uni+0xbd>
c0001e0b:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e11:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e17:	76 29                	jbe    c0001e42 <tchar2uni+0xbd>
c0001e19:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e1f:	76 1d                	jbe    c0001e3e <tchar2uni+0xb9>
c0001e21:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e27:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e2d:	c1 e1 06             	shl    ecx,0x6
c0001e30:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e36:	09 ca                	or     edx,ecx
c0001e38:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e3e:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e40:	eb 03                	jmp    c0001e45 <tchar2uni+0xc0>
c0001e42:	83 ca ff             	or     edx,0xffffffff
c0001e45:	5b                   	pop    ebx
c0001e46:	89 d0                	mov    eax,edx
c0001e48:	5e                   	pop    esi
c0001e49:	5f                   	pop    edi
c0001e4a:	c3                   	ret    

c0001e4b <put_utf>:
c0001e4b:	53                   	push   ebx
c0001e4c:	83 f8 7f             	cmp    eax,0x7f
c0001e4f:	89 c3                	mov    ebx,eax
c0001e51:	b0 00                	mov    al,0x0
c0001e53:	77 11                	ja     c0001e66 <put_utf+0x1b>
c0001e55:	85 c9                	test   ecx,ecx
c0001e57:	0f 84 e5 00 00 00    	je     c0001f42 <put_utf+0xf7>
c0001e5d:	88 1a                	mov    BYTE PTR [edx],bl
c0001e5f:	b0 01                	mov    al,0x1
c0001e61:	e9 dc 00 00 00       	jmp    c0001f42 <put_utf+0xf7>
c0001e66:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e6c:	77 23                	ja     c0001e91 <put_utf+0x46>
c0001e6e:	83 f9 01             	cmp    ecx,0x1
c0001e71:	0f 86 cb 00 00 00    	jbe    c0001f42 <put_utf+0xf7>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	83 e3 3f             	and    ebx,0x3f
c0001e7c:	c1 e8 06             	shr    eax,0x6
c0001e7f:	83 cb 80             	or     ebx,0xffffff80
c0001e82:	83 c8 c0             	or     eax,0xffffffc0
c0001e85:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e88:	88 02                	mov    BYTE PTR [edx],al
c0001e8a:	b0 02                	mov    al,0x2
c0001e8c:	e9 b1 00 00 00       	jmp    c0001f42 <put_utf+0xf7>
c0001e91:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e97:	77 40                	ja     c0001ed9 <put_utf+0x8e>
c0001e99:	83 f9 02             	cmp    ecx,0x2
c0001e9c:	0f 86 a0 00 00 00    	jbe    c0001f42 <put_utf+0xf7>
c0001ea2:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ea8:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001eae:	0f 86 8e 00 00 00    	jbe    c0001f42 <put_utf+0xf7>
c0001eb4:	89 d8                	mov    eax,ebx
c0001eb6:	c1 e8 0c             	shr    eax,0xc
c0001eb9:	83 c8 e0             	or     eax,0xffffffe0
c0001ebc:	88 02                	mov    BYTE PTR [edx],al
c0001ebe:	89 d8                	mov    eax,ebx
c0001ec0:	83 e3 3f             	and    ebx,0x3f
c0001ec3:	c1 e8 06             	shr    eax,0x6
c0001ec6:	83 cb 80             	or     ebx,0xffffff80
c0001ec9:	83 e0 3f             	and    eax,0x3f
c0001ecc:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ecf:	83 c8 80             	or     eax,0xffffff80
c0001ed2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ed5:	b0 03                	mov    al,0x3
c0001ed7:	eb 69                	jmp    c0001f42 <put_utf+0xf7>
c0001ed9:	83 f9 03             	cmp    ecx,0x3
c0001edc:	76 64                	jbe    c0001f42 <put_utf+0xf7>
c0001ede:	89 d9                	mov    ecx,ebx
c0001ee0:	0f b7 c3             	movzx  eax,bx
c0001ee3:	66 31 c9             	xor    cx,cx
c0001ee6:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001eec:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ef2:	c1 e9 06             	shr    ecx,0x6
c0001ef5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001efb:	77 43                	ja     c0001f40 <put_utf+0xf5>
c0001efd:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f03:	77 3b                	ja     c0001f40 <put_utf+0xf5>
c0001f05:	09 cb                	or     ebx,ecx
c0001f07:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f0d:	89 d8                	mov    eax,ebx
c0001f0f:	c1 e8 12             	shr    eax,0x12
c0001f12:	83 c8 f0             	or     eax,0xfffffff0
c0001f15:	88 02                	mov    BYTE PTR [edx],al
c0001f17:	89 d8                	mov    eax,ebx
c0001f19:	c1 e8 0c             	shr    eax,0xc
c0001f1c:	83 e0 3f             	and    eax,0x3f
c0001f1f:	83 c8 80             	or     eax,0xffffff80
c0001f22:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f25:	89 d8                	mov    eax,ebx
c0001f27:	83 e3 3f             	and    ebx,0x3f
c0001f2a:	c1 e8 06             	shr    eax,0x6
c0001f2d:	83 cb 80             	or     ebx,0xffffff80
c0001f30:	83 e0 3f             	and    eax,0x3f
c0001f33:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f36:	83 c8 80             	or     eax,0xffffff80
c0001f39:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f3c:	b0 04                	mov    al,0x4
c0001f3e:	eb 02                	jmp    c0001f42 <put_utf+0xf7>
c0001f40:	31 c0                	xor    eax,eax
c0001f42:	5b                   	pop    ebx
c0001f43:	c3                   	ret    

c0001f44 <clst2sect>:
c0001f44:	89 c1                	mov    ecx,eax
c0001f46:	83 ea 02             	sub    edx,0x2
c0001f49:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f4c:	83 e8 02             	sub    eax,0x2
c0001f4f:	39 d0                	cmp    eax,edx
c0001f51:	76 0d                	jbe    c0001f60 <clst2sect+0x1c>
c0001f53:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f57:	f7 e2                	mul    edx
c0001f59:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f5c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f5f:	c3                   	ret    
c0001f60:	31 c0                	xor    eax,eax
c0001f62:	31 d2                	xor    edx,edx
c0001f64:	c3                   	ret    

c0001f65 <clmt_clust>:
c0001f65:	57                   	push   edi
c0001f66:	89 cf                	mov    edi,ecx
c0001f68:	56                   	push   esi
c0001f69:	89 d6                	mov    esi,edx
c0001f6b:	53                   	push   ebx
c0001f6c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f70:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f73:	89 f2                	mov    edx,esi
c0001f75:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f77:	c1 ef 09             	shr    edi,0x9
c0001f7a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f7e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f81:	89 f9                	mov    ecx,edi
c0001f83:	31 ff                	xor    edi,edi
c0001f85:	57                   	push   edi
c0001f86:	56                   	push   esi
c0001f87:	51                   	push   ecx
c0001f88:	52                   	push   edx
c0001f89:	e8 2e c7 01 00       	call   c001e6bc <__udivdi3>
c0001f8e:	83 c4 10             	add    esp,0x10
c0001f91:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f93:	85 d2                	test   edx,edx
c0001f95:	74 10                	je     c0001fa7 <clmt_clust+0x42>
c0001f97:	39 d0                	cmp    eax,edx
c0001f99:	72 07                	jb     c0001fa2 <clmt_clust+0x3d>
c0001f9b:	29 d0                	sub    eax,edx
c0001f9d:	83 c3 08             	add    ebx,0x8
c0001fa0:	eb ef                	jmp    c0001f91 <clmt_clust+0x2c>
c0001fa2:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001fa5:	89 c2                	mov    edx,eax
c0001fa7:	5b                   	pop    ebx
c0001fa8:	89 d0                	mov    eax,edx
c0001faa:	5e                   	pop    esi
c0001fab:	5f                   	pop    edi
c0001fac:	c3                   	ret    

c0001fad <pick_lfn>:
c0001fad:	55                   	push   ebp
c0001fae:	57                   	push   edi
c0001faf:	56                   	push   esi
c0001fb0:	89 d6                	mov    esi,edx
c0001fb2:	53                   	push   ebx
c0001fb3:	89 c3                	mov    ebx,eax
c0001fb5:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fb8:	e8 ee fc ff ff       	call   c0001cab <ld_word>
c0001fbd:	66 85 c0             	test   ax,ax
c0001fc0:	74 04                	je     c0001fc6 <pick_lfn+0x19>
c0001fc2:	31 c0                	xor    eax,eax
c0001fc4:	eb 5c                	jmp    c0002022 <pick_lfn+0x75>
c0001fc6:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001fc9:	bd 01 00 00 00       	mov    ebp,0x1
c0001fce:	83 e1 bf             	and    ecx,0xffffffbf
c0001fd1:	31 ff                	xor    edi,edi
c0001fd3:	49                   	dec    ecx
c0001fd4:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fd7:	0f b6 87 40 f7 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe08c0]
c0001fde:	01 f0                	add    eax,esi
c0001fe0:	e8 c6 fc ff ff       	call   c0001cab <ld_word>
c0001fe5:	66 85 ed             	test   bp,bp
c0001fe8:	74 11                	je     c0001ffb <pick_lfn+0x4e>
c0001fea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ff0:	77 d0                	ja     c0001fc2 <pick_lfn+0x15>
c0001ff2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ff6:	89 c5                	mov    ebp,eax
c0001ff8:	41                   	inc    ecx
c0001ff9:	eb 04                	jmp    c0001fff <pick_lfn+0x52>
c0001ffb:	66 40                	inc    ax
c0001ffd:	75 c3                	jne    c0001fc2 <pick_lfn+0x15>
c0001fff:	47                   	inc    edi
c0002000:	83 ff 0d             	cmp    edi,0xd
c0002003:	75 d2                	jne    c0001fd7 <pick_lfn+0x2a>
c0002005:	f6 06 40             	test   BYTE PTR [esi],0x40
c0002008:	74 13                	je     c000201d <pick_lfn+0x70>
c000200a:	66 85 ed             	test   bp,bp
c000200d:	74 0e                	je     c000201d <pick_lfn+0x70>
c000200f:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002015:	77 ab                	ja     c0001fc2 <pick_lfn+0x15>
c0002017:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c000201d:	b8 01 00 00 00       	mov    eax,0x1
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <put_lfn>:
c0002027:	55                   	push   ebp
c0002028:	31 ed                	xor    ebp,ebp
c000202a:	57                   	push   edi
c000202b:	89 d7                	mov    edi,edx
c000202d:	56                   	push   esi
c000202e:	31 f6                	xor    esi,esi
c0002030:	53                   	push   ebx
c0002031:	83 ec 08             	sub    esp,0x8
c0002034:	89 04 24             	mov    DWORD PTR [esp],eax
c0002037:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c000203b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000203f:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002045:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002048:	8d 42 1a             	lea    eax,[edx+0x1a]
c000204b:	31 d2                	xor    edx,edx
c000204d:	e8 cb fc ff ff       	call   c0001d1d <st_word>
c0002052:	0f b6 d9             	movzx  ebx,cl
c0002055:	4b                   	dec    ebx
c0002056:	6b db 0d             	imul   ebx,ebx,0xd
c0002059:	66 83 fe ff          	cmp    si,0xffff
c000205d:	74 08                	je     c0002067 <put_lfn+0x40>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0002066:	43                   	inc    ebx
c0002067:	0f b6 85 40 f7 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe08c0]
c000206e:	0f b7 d6             	movzx  edx,si
c0002071:	01 f8                	add    eax,edi
c0002073:	e8 a5 fc ff ff       	call   c0001d1d <st_word>
c0002078:	66 85 f6             	test   si,si
c000207b:	75 03                	jne    c0002080 <put_lfn+0x59>
c000207d:	83 ce ff             	or     esi,0xffffffff
c0002080:	45                   	inc    ebp
c0002081:	83 fd 0d             	cmp    ebp,0xd
c0002084:	75 d3                	jne    c0002059 <put_lfn+0x32>
c0002086:	66 46                	inc    si
c0002088:	74 0a                	je     c0002094 <put_lfn+0x6d>
c000208a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000208d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002092:	75 09                	jne    c000209d <put_lfn+0x76>
c0002094:	88 c8                	mov    al,cl
c0002096:	83 c8 40             	or     eax,0x40
c0002099:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000209d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00020a1:	88 07                	mov    BYTE PTR [edi],al
c00020a3:	83 c4 08             	add    esp,0x8
c00020a6:	5b                   	pop    ebx
c00020a7:	5e                   	pop    esi
c00020a8:	5f                   	pop    edi
c00020a9:	5d                   	pop    ebp
c00020aa:	c3                   	ret    

c00020ab <gen_numname>:
c00020ab:	57                   	push   edi
c00020ac:	89 cf                	mov    edi,ecx
c00020ae:	56                   	push   esi
c00020af:	b9 0b 00 00 00       	mov    ecx,0xb
c00020b4:	53                   	push   ebx
c00020b5:	89 c6                	mov    esi,eax
c00020b7:	83 ec 10             	sub    esp,0x10
c00020ba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00020be:	e8 67 fc ff ff       	call   c0001d2a <mem_cpy>
c00020c3:	83 fb 05             	cmp    ebx,0x5
c00020c6:	76 2d                	jbe    c00020f5 <gen_numname+0x4a>
c00020c8:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020cb:	66 85 c0             	test   ax,ax
c00020ce:	74 25                	je     c00020f5 <gen_numname+0x4a>
c00020d0:	83 c7 02             	add    edi,0x2
c00020d3:	ba 10 00 00 00       	mov    edx,0x10
c00020d8:	01 db                	add    ebx,ebx
c00020da:	89 c1                	mov    ecx,eax
c00020dc:	66 d1 e8             	shr    ax,1
c00020df:	83 e1 01             	and    ecx,0x1
c00020e2:	01 cb                	add    ebx,ecx
c00020e4:	0f ba e3 10          	bt     ebx,0x10
c00020e8:	73 06                	jae    c00020f0 <gen_numname+0x45>
c00020ea:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020f0:	4a                   	dec    edx
c00020f1:	75 e5                	jne    c00020d8 <gen_numname+0x2d>
c00020f3:	eb d3                	jmp    c00020c8 <gen_numname+0x1d>
c00020f5:	b8 07 00 00 00       	mov    eax,0x7
c00020fa:	88 d9                	mov    cl,bl
c00020fc:	83 e1 0f             	and    ecx,0xf
c00020ff:	8d 51 30             	lea    edx,[ecx+0x30]
c0002102:	80 fa 39             	cmp    dl,0x39
c0002105:	76 03                	jbe    c000210a <gen_numname+0x5f>
c0002107:	8d 51 37             	lea    edx,[ecx+0x37]
c000210a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000210d:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002111:	89 da                	mov    edx,ebx
c0002113:	c1 ea 04             	shr    edx,0x4
c0002116:	83 fb 0f             	cmp    ebx,0xf
c0002119:	76 06                	jbe    c0002121 <gen_numname+0x76>
c000211b:	89 c8                	mov    eax,ecx
c000211d:	89 d3                	mov    ebx,edx
c000211f:	eb d9                	jmp    c00020fa <gen_numname+0x4f>
c0002121:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0002126:	31 d2                	xor    edx,edx
c0002128:	8d 58 fe             	lea    ebx,[eax-0x2]
c000212b:	8d 04 16             	lea    eax,[esi+edx*1]
c000212e:	39 ca                	cmp    edx,ecx
c0002130:	73 18                	jae    c000214a <gen_numname+0x9f>
c0002132:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002135:	3c 20                	cmp    al,0x20
c0002137:	74 11                	je     c000214a <gen_numname+0x9f>
c0002139:	e8 41 fc ff ff       	call   c0001d7f <dbc_1st>
c000213e:	85 c0                	test   eax,eax
c0002140:	74 05                	je     c0002147 <gen_numname+0x9c>
c0002142:	39 d3                	cmp    ebx,edx
c0002144:	74 04                	je     c000214a <gen_numname+0x9f>
c0002146:	42                   	inc    edx
c0002147:	42                   	inc    edx
c0002148:	eb e1                	jmp    c000212b <gen_numname+0x80>
c000214a:	b0 20                	mov    al,0x20
c000214c:	83 f9 07             	cmp    ecx,0x7
c000214f:	77 05                	ja     c0002156 <gen_numname+0xab>
c0002151:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002155:	41                   	inc    ecx
c0002156:	42                   	inc    edx
c0002157:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000215b:	83 fa 07             	cmp    edx,0x7
c000215e:	76 ea                	jbe    c000214a <gen_numname+0x9f>
c0002160:	83 c4 10             	add    esp,0x10
c0002163:	5b                   	pop    ebx
c0002164:	5e                   	pop    esi
c0002165:	5f                   	pop    edi
c0002166:	c3                   	ret    

c0002167 <sum_sfn>:
c0002167:	31 c9                	xor    ecx,ecx
c0002169:	31 d2                	xor    edx,edx
c000216b:	d0 ca                	ror    dl,1
c000216d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002170:	41                   	inc    ecx
c0002171:	83 f9 0b             	cmp    ecx,0xb
c0002174:	75 f5                	jne    c000216b <sum_sfn+0x4>
c0002176:	88 d0                	mov    al,dl
c0002178:	c3                   	ret    

c0002179 <xdir_sum>:
c0002179:	56                   	push   esi
c000217a:	31 c9                	xor    ecx,ecx
c000217c:	53                   	push   ebx
c000217d:	31 d2                	xor    edx,edx
c000217f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002183:	43                   	inc    ebx
c0002184:	c1 e3 05             	shl    ebx,0x5
c0002187:	83 fa 02             	cmp    edx,0x2
c000218a:	74 0b                	je     c0002197 <xdir_sum+0x1e>
c000218c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002190:	66 d1 c9             	ror    cx,1
c0002193:	01 f1                	add    ecx,esi
c0002195:	eb 05                	jmp    c000219c <xdir_sum+0x23>
c0002197:	ba 03 00 00 00       	mov    edx,0x3
c000219c:	42                   	inc    edx
c000219d:	39 d3                	cmp    ebx,edx
c000219f:	77 e6                	ja     c0002187 <xdir_sum+0xe>
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	5b                   	pop    ebx
c00021a4:	5e                   	pop    esi
c00021a5:	c3                   	ret    

c00021a6 <xsum32>:
c00021a6:	d1 ca                	ror    edx,1
c00021a8:	0f b6 c0             	movzx  eax,al
c00021ab:	01 d0                	add    eax,edx
c00021ad:	c3                   	ret    

c00021ae <get_xfileinfo>:
c00021ae:	55                   	push   ebp
c00021af:	31 c9                	xor    ecx,ecx
c00021b1:	57                   	push   edi
c00021b2:	bd 40 00 00 00       	mov    ebp,0x40
c00021b7:	56                   	push   esi
c00021b8:	31 ff                	xor    edi,edi
c00021ba:	53                   	push   ebx
c00021bb:	89 c6                	mov    esi,eax
c00021bd:	83 ec 0c             	sub    esp,0xc
c00021c0:	89 d3                	mov    ebx,edx
c00021c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00021c9:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c00021cd:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00021d0:	76 6d                	jbe    c000223f <get_xfileinfo+0x91>
c00021d2:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00021d8:	76 0b                	jbe    c00021e5 <get_xfileinfo+0x37>
c00021da:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c00021de:	bf 01 00 00 00       	mov    edi,0x1
c00021e3:	eb 63                	jmp    c0002248 <get_xfileinfo+0x9a>
c00021e5:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021eb:	75 03                	jne    c00021f0 <get_xfileinfo+0x42>
c00021ed:	83 c5 02             	add    ebp,0x2
c00021f0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021f3:	83 c5 02             	add    ebp,0x2
c00021f6:	e8 b0 fa ff ff       	call   c0001cab <ld_word>
c00021fb:	ff 04 24             	inc    DWORD PTR [esp]
c00021fe:	66 85 c9             	test   cx,cx
c0002201:	75 0d                	jne    c0002210 <get_xfileinfo+0x62>
c0002203:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002209:	66 81 fa ff 07       	cmp    dx,0x7ff
c000220e:	76 2b                	jbe    c000223b <get_xfileinfo+0x8d>
c0002210:	c1 e1 10             	shl    ecx,0x10
c0002213:	ba ff 00 00 00       	mov    edx,0xff
c0002218:	0f b7 c0             	movzx  eax,ax
c000221b:	29 fa                	sub    edx,edi
c000221d:	09 c8                	or     eax,ecx
c000221f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0002223:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0002227:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000222b:	e8 1b fc ff ff       	call   c0001e4b <put_utf>
c0002230:	84 c0                	test   al,al
c0002232:	74 a6                	je     c00021da <get_xfileinfo+0x2c>
c0002234:	0f b6 c0             	movzx  eax,al
c0002237:	01 c7                	add    edi,eax
c0002239:	31 c0                	xor    eax,eax
c000223b:	89 c1                	mov    ecx,eax
c000223d:	eb 8a                	jmp    c00021c9 <get_xfileinfo+0x1b>
c000223f:	85 ff                	test   edi,edi
c0002241:	74 97                	je     c00021da <get_xfileinfo+0x2c>
c0002243:	66 85 c9             	test   cx,cx
c0002246:	75 92                	jne    c00021da <get_xfileinfo+0x2c>
c0002248:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000224d:	31 c0                	xor    eax,eax
c000224f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002253:	31 d2                	xor    edx,edx
c0002255:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002258:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000225b:	80 e1 10             	and    cl,0x10
c000225e:	75 08                	jne    c0002268 <get_xfileinfo+0xba>
c0002260:	8d 46 38             	lea    eax,[esi+0x38]
c0002263:	e8 68 fa ff ff       	call   c0001cd0 <ld_qword>
c0002268:	89 03                	mov    DWORD PTR [ebx],eax
c000226a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000226d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002270:	e8 36 fa ff ff       	call   c0001cab <ld_word>
c0002275:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002279:	8d 46 0e             	lea    eax,[esi+0xe]
c000227c:	e8 2a fa ff ff       	call   c0001cab <ld_word>
c0002281:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002285:	83 c4 0c             	add    esp,0xc
c0002288:	5b                   	pop    ebx
c0002289:	5e                   	pop    esi
c000228a:	5f                   	pop    edi
c000228b:	5d                   	pop    ebp
c000228c:	c3                   	ret    

c000228d <get_ldnumber>:
c000228d:	8b 10                	mov    edx,DWORD PTR [eax]
c000228f:	85 d2                	test   edx,edx
c0002291:	74 14                	je     c00022a7 <get_ldnumber+0x1a>
c0002293:	56                   	push   esi
c0002294:	53                   	push   ebx
c0002295:	89 d3                	mov    ebx,edx
c0002297:	43                   	inc    ebx
c0002298:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000229b:	80 f9 1f             	cmp    cl,0x1f
c000229e:	76 0d                	jbe    c00022ad <get_ldnumber+0x20>
c00022a0:	80 f9 3a             	cmp    cl,0x3a
c00022a3:	75 f2                	jne    c0002297 <get_ldnumber+0xa>
c00022a5:	eb 0a                	jmp    c00022b1 <get_ldnumber+0x24>
c00022a7:	83 c9 ff             	or     ecx,0xffffffff
c00022aa:	89 c8                	mov    eax,ecx
c00022ac:	c3                   	ret    
c00022ad:	31 c9                	xor    ecx,ecx
c00022af:	eb 24                	jmp    c00022d5 <get_ldnumber+0x48>
c00022b1:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c00022b4:	8d 4e d0             	lea    ecx,[esi-0x30]
c00022b7:	80 f9 09             	cmp    cl,0x9
c00022ba:	77 16                	ja     c00022d2 <get_ldnumber+0x45>
c00022bc:	83 c2 02             	add    edx,0x2
c00022bf:	83 c9 ff             	or     ecx,0xffffffff
c00022c2:	39 d3                	cmp    ebx,edx
c00022c4:	75 0f                	jne    c00022d5 <get_ldnumber+0x48>
c00022c6:	89 f2                	mov    edx,esi
c00022c8:	89 18                	mov    DWORD PTR [eax],ebx
c00022ca:	0f be ca             	movsx  ecx,dl
c00022cd:	83 e9 30             	sub    ecx,0x30
c00022d0:	eb 03                	jmp    c00022d5 <get_ldnumber+0x48>
c00022d2:	83 c9 ff             	or     ecx,0xffffffff
c00022d5:	89 c8                	mov    eax,ecx
c00022d7:	5b                   	pop    ebx
c00022d8:	5e                   	pop    esi
c00022d9:	c3                   	ret    

c00022da <crc32>:
c00022da:	56                   	push   esi
c00022db:	89 d6                	mov    esi,edx
c00022dd:	53                   	push   ebx
c00022de:	b2 01                	mov    dl,0x1
c00022e0:	bb 08 00 00 00       	mov    ebx,0x8
c00022e5:	89 f1                	mov    ecx,esi
c00022e7:	84 d1                	test   cl,dl
c00022e9:	0f 95 c1             	setne  cl
c00022ec:	0f b6 c9             	movzx  ecx,cl
c00022ef:	31 c1                	xor    ecx,eax
c00022f1:	89 c8                	mov    eax,ecx
c00022f3:	d1 e8                	shr    eax,1
c00022f5:	80 e1 01             	and    cl,0x1
c00022f8:	74 05                	je     c00022ff <crc32+0x25>
c00022fa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022ff:	d1 e2                	shl    edx,1
c0002301:	4b                   	dec    ebx
c0002302:	75 e1                	jne    c00022e5 <crc32+0xb>
c0002304:	5b                   	pop    ebx
c0002305:	5e                   	pop    esi
c0002306:	c3                   	ret    

c0002307 <test_gpt_header>:
c0002307:	55                   	push   ebp
c0002308:	b9 10 00 00 00       	mov    ecx,0x10
c000230d:	57                   	push   edi
c000230e:	ba 40 f6 01 c0       	mov    edx,0xc001f640
c0002313:	56                   	push   esi
c0002314:	31 ff                	xor    edi,edi
c0002316:	53                   	push   ebx
c0002317:	89 c3                	mov    ebx,eax
c0002319:	e8 2c fa ff ff       	call   c0001d4a <mem_cmp>
c000231e:	85 c0                	test   eax,eax
c0002320:	75 55                	jne    c0002377 <test_gpt_header+0x70>
c0002322:	89 c7                	mov    edi,eax
c0002324:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c0002329:	83 ce ff             	or     esi,0xffffffff
c000232c:	31 d2                	xor    edx,edx
c000232e:	83 fd 03             	cmp    ebp,0x3
c0002331:	76 05                	jbe    c0002338 <test_gpt_header+0x31>
c0002333:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c0002338:	89 f0                	mov    eax,esi
c000233a:	45                   	inc    ebp
c000233b:	e8 9a ff ff ff       	call   c00022da <crc32>
c0002340:	83 fd 4c             	cmp    ebp,0x4c
c0002343:	89 c6                	mov    esi,eax
c0002345:	75 e5                	jne    c000232c <test_gpt_header+0x25>
c0002347:	8d 43 10             	lea    eax,[ebx+0x10]
c000234a:	f7 d6                	not    esi
c000234c:	e8 67 f9 ff ff       	call   c0001cb8 <ld_dword>
c0002351:	39 c6                	cmp    esi,eax
c0002353:	75 22                	jne    c0002377 <test_gpt_header+0x70>
c0002355:	8d 43 54             	lea    eax,[ebx+0x54]
c0002358:	e8 5b f9 ff ff       	call   c0001cb8 <ld_dword>
c000235d:	83 c0 80             	add    eax,0xffffff80
c0002360:	75 15                	jne    c0002377 <test_gpt_header+0x70>
c0002362:	8d 43 50             	lea    eax,[ebx+0x50]
c0002365:	e8 4e f9 ff ff       	call   c0001cb8 <ld_dword>
c000236a:	3d 80 00 00 00       	cmp    eax,0x80
c000236f:	0f 96 c0             	setbe  al
c0002372:	0f b6 c0             	movzx  eax,al
c0002375:	89 c7                	mov    edi,eax
c0002377:	5b                   	pop    ebx
c0002378:	89 f8                	mov    eax,edi
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <make_rand>:
c000237e:	56                   	push   esi
c000237f:	85 c0                	test   eax,eax
c0002381:	53                   	push   ebx
c0002382:	75 05                	jne    c0002389 <make_rand+0xb>
c0002384:	b8 01 00 00 00       	mov    eax,0x1
c0002389:	01 d1                	add    ecx,edx
c000238b:	bb 08 00 00 00       	mov    ebx,0x8
c0002390:	89 c6                	mov    esi,eax
c0002392:	d1 e8                	shr    eax,1
c0002394:	83 e6 01             	and    esi,0x1
c0002397:	85 f6                	test   esi,esi
c0002399:	74 05                	je     c00023a0 <make_rand+0x22>
c000239b:	35 00 00 00 a3       	xor    eax,0xa3000000
c00023a0:	4b                   	dec    ebx
c00023a1:	75 ed                	jne    c0002390 <make_rand+0x12>
c00023a3:	42                   	inc    edx
c00023a4:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c00023a7:	39 ca                	cmp    edx,ecx
c00023a9:	75 e0                	jne    c000238b <make_rand+0xd>
c00023ab:	5b                   	pop    ebx
c00023ac:	5e                   	pop    esi
c00023ad:	c3                   	ret    

c00023ae <validate>:
c00023ae:	56                   	push   esi
c00023af:	53                   	push   ebx
c00023b0:	89 d6                	mov    esi,edx
c00023b2:	51                   	push   ecx
c00023b3:	85 c0                	test   eax,eax
c00023b5:	75 09                	jne    c00023c0 <validate+0x12>
c00023b7:	b8 09 00 00 00       	mov    eax,0x9
c00023bc:	31 c9                	xor    ecx,ecx
c00023be:	eb 2f                	jmp    c00023ef <validate+0x41>
c00023c0:	89 c3                	mov    ebx,eax
c00023c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00023c4:	85 c0                	test   eax,eax
c00023c6:	74 ef                	je     c00023b7 <validate+0x9>
c00023c8:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00023cb:	74 ea                	je     c00023b7 <validate+0x9>
c00023cd:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00023d1:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00023d5:	75 e0                	jne    c00023b7 <validate+0x9>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023de:	50                   	push   eax
c00023df:	e8 76 f8 ff ff       	call   c0001c5a <disk_status>
c00023e4:	83 c4 10             	add    esp,0x10
c00023e7:	a8 01                	test   al,0x1
c00023e9:	75 cc                	jne    c00023b7 <validate+0x9>
c00023eb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023ed:	31 c0                	xor    eax,eax
c00023ef:	89 0e                	mov    DWORD PTR [esi],ecx
c00023f1:	5a                   	pop    edx
c00023f2:	5b                   	pop    ebx
c00023f3:	5e                   	pop    esi
c00023f4:	c3                   	ret    

c00023f5 <sync_window>:
c00023f5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023f9:	0f 84 85 00 00 00    	je     c0002484 <sync_window+0x8f>
c00023ff:	55                   	push   ebp
c0002400:	8d 68 54             	lea    ebp,[eax+0x54]
c0002403:	57                   	push   edi
c0002404:	56                   	push   esi
c0002405:	53                   	push   ebx
c0002406:	89 c3                	mov    ebx,eax
c0002408:	83 ec 28             	sub    esp,0x28
c000240b:	6a 01                	push   0x1
c000240d:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002410:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c0002413:	55                   	push   ebp
c0002414:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002418:	50                   	push   eax
c0002419:	e8 58 f8 ff ff       	call   c0001c76 <disk_write>
c000241e:	83 c4 20             	add    esp,0x20
c0002421:	ba 01 00 00 00       	mov    edx,0x1
c0002426:	85 c0                	test   eax,eax
c0002428:	75 50                	jne    c000247a <sync_window+0x85>
c000242a:	31 ff                	xor    edi,edi
c000242c:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c000242f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002433:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0002437:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000243a:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c000243d:	89 c6                	mov    esi,eax
c000243f:	89 d7                	mov    edi,edx
c0002441:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002444:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002448:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000244b:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c000244f:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002453:	73 23                	jae    c0002478 <sync_window+0x83>
c0002455:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002459:	75 1d                	jne    c0002478 <sync_window+0x83>
c000245b:	83 ec 0c             	sub    esp,0xc
c000245e:	6a 01                	push   0x1
c0002460:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002464:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002468:	52                   	push   edx
c0002469:	50                   	push   eax
c000246a:	55                   	push   ebp
c000246b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000246f:	50                   	push   eax
c0002470:	e8 01 f8 ff ff       	call   c0001c76 <disk_write>
c0002475:	83 c4 20             	add    esp,0x20
c0002478:	31 d2                	xor    edx,edx
c000247a:	83 c4 1c             	add    esp,0x1c
c000247d:	89 d0                	mov    eax,edx
c000247f:	5b                   	pop    ebx
c0002480:	5e                   	pop    esi
c0002481:	5f                   	pop    edi
c0002482:	5d                   	pop    ebp
c0002483:	c3                   	ret    
c0002484:	31 d2                	xor    edx,edx
c0002486:	89 d0                	mov    eax,edx
c0002488:	c3                   	ret    

c0002489 <move_window>:
c0002489:	56                   	push   esi
c000248a:	53                   	push   ebx
c000248b:	89 c3                	mov    ebx,eax
c000248d:	83 ec 14             	sub    esp,0x14
c0002490:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002493:	75 07                	jne    c000249c <move_window+0x13>
c0002495:	31 f6                	xor    esi,esi
c0002497:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000249a:	74 59                	je     c00024f5 <move_window+0x6c>
c000249c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024a0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00024a4:	89 d8                	mov    eax,ebx
c00024a6:	e8 4a ff ff ff       	call   c00023f5 <sync_window>
c00024ab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024af:	89 c6                	mov    esi,eax
c00024b1:	85 c0                	test   eax,eax
c00024b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024b7:	75 3c                	jne    c00024f5 <move_window+0x6c>
c00024b9:	83 ec 0c             	sub    esp,0xc
c00024bc:	8d 43 54             	lea    eax,[ebx+0x54]
c00024bf:	6a 01                	push   0x1
c00024c1:	51                   	push   ecx
c00024c2:	52                   	push   edx
c00024c3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00024c7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00024cb:	50                   	push   eax
c00024cc:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00024d0:	50                   	push   eax
c00024d1:	e8 8a f7 ff ff       	call   c0001c60 <disk_read>
c00024d6:	83 c4 20             	add    esp,0x20
c00024d9:	85 c0                	test   eax,eax
c00024db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024e3:	74 0a                	je     c00024ef <move_window+0x66>
c00024e5:	83 ca ff             	or     edx,0xffffffff
c00024e8:	be 01 00 00 00       	mov    esi,0x1
c00024ed:	89 d1                	mov    ecx,edx
c00024ef:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024f2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024f5:	89 f0                	mov    eax,esi
c00024f7:	83 c4 14             	add    esp,0x14
c00024fa:	5b                   	pop    ebx
c00024fb:	5e                   	pop    esi
c00024fc:	c3                   	ret    

c00024fd <check_fs>:
c00024fd:	53                   	push   ebx
c00024fe:	89 c3                	mov    ebx,eax
c0002500:	83 ec 08             	sub    esp,0x8
c0002503:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002507:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000250e:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002515:	e8 6f ff ff ff       	call   c0002489 <move_window>
c000251a:	ba 04 00 00 00       	mov    edx,0x4
c000251f:	85 c0                	test   eax,eax
c0002521:	0f 85 89 00 00 00    	jne    c00025b0 <check_fs+0xb3>
c0002527:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000252d:	e8 79 f7 ff ff       	call   c0001cab <ld_word>
c0002532:	ba 03 00 00 00       	mov    edx,0x3
c0002537:	66 3d 55 aa          	cmp    ax,0xaa55
c000253b:	75 73                	jne    c00025b0 <check_fs+0xb3>
c000253d:	ba 60 f7 01 c0       	mov    edx,0xc001f760
c0002542:	8d 43 54             	lea    eax,[ebx+0x54]
c0002545:	b9 0b 00 00 00       	mov    ecx,0xb
c000254a:	e8 fb f7 ff ff       	call   c0001d4a <mem_cmp>
c000254f:	ba 01 00 00 00       	mov    edx,0x1
c0002554:	85 c0                	test   eax,eax
c0002556:	74 58                	je     c00025b0 <check_fs+0xb3>
c0002558:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000255b:	8d 50 18             	lea    edx,[eax+0x18]
c000255e:	80 fa 01             	cmp    dl,0x1
c0002561:	76 09                	jbe    c000256c <check_fs+0x6f>
c0002563:	ba 02 00 00 00       	mov    edx,0x2
c0002568:	3c eb                	cmp    al,0xeb
c000256a:	75 44                	jne    c00025b0 <check_fs+0xb3>
c000256c:	ba 70 a4 03 c0       	mov    edx,0xc003a470
c0002571:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002577:	b9 03 00 00 00       	mov    ecx,0x3
c000257c:	e8 c9 f7 ff ff       	call   c0001d4a <mem_cmp>
c0002581:	31 d2                	xor    edx,edx
c0002583:	85 c0                	test   eax,eax
c0002585:	74 29                	je     c00025b0 <check_fs+0xb3>
c0002587:	ba 6c f7 01 c0       	mov    edx,0xc001f76c
c000258c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002592:	b9 05 00 00 00       	mov    ecx,0x5
c0002597:	e8 ae f7 ff ff       	call   c0001d4a <mem_cmp>
c000259c:	31 d2                	xor    edx,edx
c000259e:	85 c0                	test   eax,eax
c00025a0:	74 0e                	je     c00025b0 <check_fs+0xb3>
c00025a2:	31 d2                	xor    edx,edx
c00025a4:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c00025ab:	0f 95 c2             	setne  dl
c00025ae:	01 d2                	add    edx,edx
c00025b0:	89 d0                	mov    eax,edx
c00025b2:	83 c4 08             	add    esp,0x8
c00025b5:	5b                   	pop    ebx
c00025b6:	c3                   	ret    

c00025b7 <find_volume>:
c00025b7:	55                   	push   ebp
c00025b8:	31 c9                	xor    ecx,ecx
c00025ba:	57                   	push   edi
c00025bb:	56                   	push   esi
c00025bc:	89 d6                	mov    esi,edx
c00025be:	53                   	push   ebx
c00025bf:	31 d2                	xor    edx,edx
c00025c1:	83 ec 3c             	sub    esp,0x3c
c00025c4:	89 c3                	mov    ebx,eax
c00025c6:	e8 32 ff ff ff       	call   c00024fd <check_fs>
c00025cb:	83 f8 02             	cmp    eax,0x2
c00025ce:	74 0e                	je     c00025de <find_volume+0x27>
c00025d0:	0f 87 5d 01 00 00    	ja     c0002733 <find_volume+0x17c>
c00025d6:	85 f6                	test   esi,esi
c00025d8:	0f 84 55 01 00 00    	je     c0002733 <find_volume+0x17c>
c00025de:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00025e5:	0f 85 dd 00 00 00    	jne    c00026c8 <find_volume+0x111>
c00025eb:	31 c9                	xor    ecx,ecx
c00025ed:	ba 01 00 00 00       	mov    edx,0x1
c00025f2:	89 d8                	mov    eax,ebx
c00025f4:	e8 90 fe ff ff       	call   c0002489 <move_window>
c00025f9:	85 c0                	test   eax,eax
c00025fb:	74 0a                	je     c0002607 <find_volume+0x50>
c00025fd:	b8 04 00 00 00       	mov    eax,0x4
c0002602:	e9 2c 01 00 00       	jmp    c0002733 <find_volume+0x17c>
c0002607:	8d 6b 54             	lea    ebp,[ebx+0x54]
c000260a:	89 e8                	mov    eax,ebp
c000260c:	e8 f6 fc ff ff       	call   c0002307 <test_gpt_header>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 0a                	jne    c000261f <find_volume+0x68>
c0002615:	b8 03 00 00 00       	mov    eax,0x3
c000261a:	e9 14 01 00 00       	jmp    c0002733 <find_volume+0x17c>
c000261f:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002625:	e8 8e f6 ff ff       	call   c0001cb8 <ld_dword>
c000262a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000262e:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002634:	e8 97 f6 ff ff       	call   c0001cd0 <ld_qword>
c0002639:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002641:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002645:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002649:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002651:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002655:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002659:	74 ba                	je     c0002615 <find_volume+0x5e>
c000265b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000265f:	31 c9                	xor    ecx,ecx
c0002661:	c1 e7 07             	shl    edi,0x7
c0002664:	89 d8                	mov    eax,ebx
c0002666:	89 fa                	mov    edx,edi
c0002668:	c1 ea 09             	shr    edx,0x9
c000266b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000266f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002673:	e8 11 fe ff ff       	call   c0002489 <move_window>
c0002678:	85 c0                	test   eax,eax
c000267a:	75 81                	jne    c00025fd <find_volume+0x46>
c000267c:	81 e7 80 01 00 00    	and    edi,0x180
c0002682:	b9 10 00 00 00       	mov    ecx,0x10
c0002687:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000268b:	ba 50 f7 01 c0       	mov    edx,0xc001f750
c0002690:	e8 b5 f6 ff ff       	call   c0001d4a <mem_cmp>
c0002695:	85 c0                	test   eax,eax
c0002697:	75 29                	jne    c00026c2 <find_volume+0x10b>
c0002699:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000269d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c00026a1:	e8 2a f6 ff ff       	call   c0001cd0 <ld_qword>
c00026a6:	89 d1                	mov    ecx,edx
c00026a8:	89 c2                	mov    edx,eax
c00026aa:	89 d8                	mov    eax,ebx
c00026ac:	e8 4c fe ff ff       	call   c00024fd <check_fs>
c00026b1:	85 f6                	test   esi,esi
c00026b3:	75 07                	jne    c00026bc <find_volume+0x105>
c00026b5:	83 f8 01             	cmp    eax,0x1
c00026b8:	77 08                	ja     c00026c2 <find_volume+0x10b>
c00026ba:	eb 77                	jmp    c0002733 <find_volume+0x17c>
c00026bc:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026c0:	74 71                	je     c0002733 <find_volume+0x17c>
c00026c2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00026c6:	eb 89                	jmp    c0002651 <find_volume+0x9a>
c00026c8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00026cc:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00026d2:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00026d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026dc:	89 cd                	mov    ebp,ecx
c00026de:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00026e2:	89 f8                	mov    eax,edi
c00026e4:	83 c7 10             	add    edi,0x10
c00026e7:	e8 cc f5 ff ff       	call   c0001cb8 <ld_dword>
c00026ec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026f0:	89 01                	mov    DWORD PTR [ecx],eax
c00026f2:	83 c1 04             	add    ecx,0x4
c00026f5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026f9:	75 e3                	jne    c00026de <find_volume+0x127>
c00026fb:	31 ff                	xor    edi,edi
c00026fd:	85 f6                	test   esi,esi
c00026ff:	74 03                	je     c0002704 <find_volume+0x14d>
c0002701:	8d 7e ff             	lea    edi,[esi-0x1]
c0002704:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002708:	85 d2                	test   edx,edx
c000270a:	74 14                	je     c0002720 <find_volume+0x169>
c000270c:	31 c9                	xor    ecx,ecx
c000270e:	89 d8                	mov    eax,ebx
c0002710:	e8 e8 fd ff ff       	call   c00024fd <check_fs>
c0002715:	83 f8 01             	cmp    eax,0x1
c0002718:	76 19                	jbe    c0002733 <find_volume+0x17c>
c000271a:	85 f6                	test   esi,esi
c000271c:	74 0f                	je     c000272d <find_volume+0x176>
c000271e:	eb 13                	jmp    c0002733 <find_volume+0x17c>
c0002720:	85 f6                	test   esi,esi
c0002722:	0f 85 ed fe ff ff    	jne    c0002615 <find_volume+0x5e>
c0002728:	b8 03 00 00 00       	mov    eax,0x3
c000272d:	47                   	inc    edi
c000272e:	83 ff 03             	cmp    edi,0x3
c0002731:	76 d1                	jbe    c0002704 <find_volume+0x14d>
c0002733:	83 c4 3c             	add    esp,0x3c
c0002736:	5b                   	pop    ebx
c0002737:	5e                   	pop    esi
c0002738:	5f                   	pop    edi
c0002739:	5d                   	pop    ebp
c000273a:	c3                   	ret    

c000273b <mount_volume>:
c000273b:	55                   	push   ebp
c000273c:	57                   	push   edi
c000273d:	89 cf                	mov    edi,ecx
c000273f:	56                   	push   esi
c0002740:	53                   	push   ebx
c0002741:	bb 0b 00 00 00       	mov    ebx,0xb
c0002746:	83 ec 3c             	sub    esp,0x3c
c0002749:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000274f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002753:	e8 35 fb ff ff       	call   c000228d <get_ldnumber>
c0002758:	85 c0                	test   eax,eax
c000275a:	0f 88 3a 05 00 00    	js     c0002c9a <mount_volume+0x55f>
c0002760:	8b 2c 85 60 b9 03 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffc46a0]
c0002767:	89 c6                	mov    esi,eax
c0002769:	bb 0c 00 00 00       	mov    ebx,0xc
c000276e:	85 ed                	test   ebp,ebp
c0002770:	0f 84 24 05 00 00    	je     c0002c9a <mount_volume+0x55f>
c0002776:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000277a:	83 e7 fe             	and    edi,0xfffffffe
c000277d:	89 2a                	mov    DWORD PTR [edx],ebp
c000277f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002783:	74 32                	je     c00027b7 <mount_volume+0x7c>
c0002785:	83 ec 0c             	sub    esp,0xc
c0002788:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000278c:	50                   	push   eax
c000278d:	e8 c8 f4 ff ff       	call   c0001c5a <disk_status>
c0002792:	83 c4 10             	add    esp,0x10
c0002795:	a8 01                	test   al,0x1
c0002797:	75 1e                	jne    c00027b7 <mount_volume+0x7c>
c0002799:	31 db                	xor    ebx,ebx
c000279b:	89 f9                	mov    ecx,edi
c000279d:	84 c9                	test   cl,cl
c000279f:	0f 84 f5 04 00 00    	je     c0002c9a <mount_volume+0x55f>
c00027a5:	a8 04                	test   al,0x4
c00027a7:	0f 84 ed 04 00 00    	je     c0002c9a <mount_volume+0x55f>
c00027ad:	bb 0a 00 00 00       	mov    ebx,0xa
c00027b2:	e9 e3 04 00 00       	jmp    c0002c9a <mount_volume+0x55f>
c00027b7:	83 ec 0c             	sub    esp,0xc
c00027ba:	89 f0                	mov    eax,esi
c00027bc:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00027c0:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c00027c3:	0f b6 f0             	movzx  esi,al
c00027c6:	bb 03 00 00 00       	mov    ebx,0x3
c00027cb:	56                   	push   esi
c00027cc:	e8 8c f4 ff ff       	call   c0001c5d <disk_initialize>
c00027d1:	83 c4 10             	add    esp,0x10
c00027d4:	a8 01                	test   al,0x1
c00027d6:	0f 85 be 04 00 00    	jne    c0002c9a <mount_volume+0x55f>
c00027dc:	89 f9                	mov    ecx,edi
c00027de:	84 c9                	test   cl,cl
c00027e0:	74 04                	je     c00027e6 <mount_volume+0xab>
c00027e2:	a8 04                	test   al,0x4
c00027e4:	75 c7                	jne    c00027ad <mount_volume+0x72>
c00027e6:	31 d2                	xor    edx,edx
c00027e8:	89 e8                	mov    eax,ebp
c00027ea:	e8 c8 fd ff ff       	call   c00025b7 <find_volume>
c00027ef:	83 f8 04             	cmp    eax,0x4
c00027f2:	75 0a                	jne    c00027fe <mount_volume+0xc3>
c00027f4:	bb 01 00 00 00       	mov    ebx,0x1
c00027f9:	e9 9c 04 00 00       	jmp    c0002c9a <mount_volume+0x55f>
c00027fe:	83 f8 01             	cmp    eax,0x1
c0002801:	76 0a                	jbe    c000280d <mount_volume+0xd2>
c0002803:	bb 0d 00 00 00       	mov    ebx,0xd
c0002808:	e9 8d 04 00 00       	jmp    c0002c9a <mount_volume+0x55f>
c000280d:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002810:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c0002813:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002817:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000281b:	75 17                	jne    c0002834 <mount_volume+0xf9>
c000281d:	b8 0b 00 00 00       	mov    eax,0xb
c0002822:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c0002827:	75 da                	jne    c0002803 <mount_volume+0xc8>
c0002829:	40                   	inc    eax
c000282a:	83 f8 40             	cmp    eax,0x40
c000282d:	75 f3                	jne    c0002822 <mount_volume+0xe7>
c000282f:	e9 5a 02 00 00       	jmp    c0002a8e <mount_volume+0x353>
c0002834:	8d 45 5f             	lea    eax,[ebp+0x5f]
c0002837:	e8 6f f4 ff ff       	call   c0001cab <ld_word>
c000283c:	66 3d 00 02          	cmp    ax,0x200
c0002840:	75 c1                	jne    c0002803 <mount_volume+0xc8>
c0002842:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002845:	e8 61 f4 ff ff       	call   c0001cab <ld_word>
c000284a:	0f b7 c0             	movzx  eax,ax
c000284d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002851:	85 c0                	test   eax,eax
c0002853:	75 0c                	jne    c0002861 <mount_volume+0x126>
c0002855:	8d 45 78             	lea    eax,[ebp+0x78]
c0002858:	e8 5b f4 ff ff       	call   c0001cb8 <ld_dword>
c000285d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002865:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002868:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000286b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000286f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002872:	48                   	dec    eax
c0002873:	3c 01                	cmp    al,0x1
c0002875:	77 8c                	ja     c0002803 <mount_volume+0xc8>
c0002877:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000287b:	89 c3                	mov    ebx,eax
c000287d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002881:	66 85 c0             	test   ax,ax
c0002884:	0f 84 79 ff ff ff    	je     c0002803 <mount_volume+0xc8>
c000288a:	8d 40 ff             	lea    eax,[eax-0x1]
c000288d:	85 d8                	test   eax,ebx
c000288f:	0f 85 6e ff ff ff    	jne    c0002803 <mount_volume+0xc8>
c0002895:	8d 45 65             	lea    eax,[ebp+0x65]
c0002898:	e8 0e f4 ff ff       	call   c0001cab <ld_word>
c000289d:	89 c7                	mov    edi,eax
c000289f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c00028a3:	a8 0f                	test   al,0xf
c00028a5:	0f 85 58 ff ff ff    	jne    c0002803 <mount_volume+0xc8>
c00028ab:	8d 45 67             	lea    eax,[ebp+0x67]
c00028ae:	e8 f8 f3 ff ff       	call   c0001cab <ld_word>
c00028b3:	0f b7 f0             	movzx  esi,ax
c00028b6:	85 f6                	test   esi,esi
c00028b8:	75 0a                	jne    c00028c4 <mount_volume+0x189>
c00028ba:	8d 45 74             	lea    eax,[ebp+0x74]
c00028bd:	e8 f6 f3 ff ff       	call   c0001cb8 <ld_dword>
c00028c2:	89 c6                	mov    esi,eax
c00028c4:	8d 45 62             	lea    eax,[ebp+0x62]
c00028c7:	e8 df f3 ff ff       	call   c0001cab <ld_word>
c00028cc:	66 85 c0             	test   ax,ax
c00028cf:	0f 84 2e ff ff ff    	je     c0002803 <mount_volume+0xc8>
c00028d5:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00028da:	0f b7 c8             	movzx  ecx,ax
c00028dd:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00028e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00028e6:	89 fa                	mov    edx,edi
c00028e8:	66 c1 ea 04          	shr    dx,0x4
c00028ec:	0f b7 d2             	movzx  edx,dx
c00028ef:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028f3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028fa:	39 c6                	cmp    esi,eax
c00028fc:	0f 82 01 ff ff ff    	jb     c0002803 <mount_volume+0xc8>
c0002902:	29 c6                	sub    esi,eax
c0002904:	31 d2                	xor    edx,edx
c0002906:	89 f0                	mov    eax,esi
c0002908:	f7 f3                	div    ebx
c000290a:	39 de                	cmp    esi,ebx
c000290c:	0f 82 f1 fe ff ff    	jb     c0002803 <mount_volume+0xc8>
c0002912:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002917:	0f 87 e6 fe ff ff    	ja     c0002803 <mount_volume+0xc8>
c000291d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002922:	0f 86 63 03 00 00    	jbe    c0002c8b <mount_volume+0x550>
c0002928:	bb 03 00 00 00       	mov    ebx,0x3
c000292d:	8d 70 02             	lea    esi,[eax+0x2]
c0002930:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002934:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002938:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000293b:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000293e:	31 d2                	xor    edx,edx
c0002940:	89 c8                	mov    eax,ecx
c0002942:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002945:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002949:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000294d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002951:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002955:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002958:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000295b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000295f:	31 d2                	xor    edx,edx
c0002961:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002965:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002969:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000296c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000296f:	83 fb 03             	cmp    ebx,0x3
c0002972:	75 2b                	jne    c000299f <mount_volume+0x264>
c0002974:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002977:	e8 2f f3 ff ff       	call   c0001cab <ld_word>
c000297c:	66 09 c7             	or     di,ax
c000297f:	0f 85 7e fe ff ff    	jne    c0002803 <mount_volume+0xc8>
c0002985:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000298b:	c1 e6 02             	shl    esi,0x2
c000298e:	e8 25 f3 ff ff       	call   c0001cb8 <ld_dword>
c0002993:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000299a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000299d:	eb 30                	jmp    c00029cf <mount_volume+0x294>
c000299f:	66 85 ff             	test   di,di
c00029a2:	0f 84 5b fe ff ff    	je     c0002803 <mount_volume+0xc8>
c00029a8:	31 d2                	xor    edx,edx
c00029aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00029ae:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00029b2:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00029b6:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c00029b9:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c00029bc:	83 fb 02             	cmp    ebx,0x2
c00029bf:	75 04                	jne    c00029c5 <mount_volume+0x28a>
c00029c1:	01 f6                	add    esi,esi
c00029c3:	eb 0a                	jmp    c00029cf <mount_volume+0x294>
c00029c5:	8d 04 76             	lea    eax,[esi+esi*2]
c00029c8:	83 e6 01             	and    esi,0x1
c00029cb:	d1 e8                	shr    eax,1
c00029cd:	01 c6                	add    esi,eax
c00029cf:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00029d5:	c1 ee 09             	shr    esi,0x9
c00029d8:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00029dc:	0f 87 21 fe ff ff    	ja     c0002803 <mount_volume+0xc8>
c00029e2:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029e9:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029f0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029f4:	83 fb 03             	cmp    ebx,0x3
c00029f7:	75 7a                	jne    c0002a73 <mount_volume+0x338>
c00029f9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029ff:	e8 a7 f2 ff ff       	call   c0001cab <ld_word>
c0002a04:	66 48                	dec    ax
c0002a06:	75 6b                	jne    c0002a73 <mount_volume+0x338>
c0002a08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002a0c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a10:	83 c2 01             	add    edx,0x1
c0002a13:	89 e8                	mov    eax,ebp
c0002a15:	83 d1 00             	adc    ecx,0x0
c0002a18:	e8 6c fa ff ff       	call   c0002489 <move_window>
c0002a1d:	85 c0                	test   eax,eax
c0002a1f:	75 52                	jne    c0002a73 <mount_volume+0x338>
c0002a21:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c0002a25:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002a2b:	e8 7b f2 ff ff       	call   c0001cab <ld_word>
c0002a30:	66 3d 55 aa          	cmp    ax,0xaa55
c0002a34:	75 3d                	jne    c0002a73 <mount_volume+0x338>
c0002a36:	8d 45 54             	lea    eax,[ebp+0x54]
c0002a39:	e8 7a f2 ff ff       	call   c0001cb8 <ld_dword>
c0002a3e:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002a43:	75 2e                	jne    c0002a73 <mount_volume+0x338>
c0002a45:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a4b:	e8 68 f2 ff ff       	call   c0001cb8 <ld_dword>
c0002a50:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a55:	75 1c                	jne    c0002a73 <mount_volume+0x338>
c0002a57:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a5d:	e8 56 f2 ff ff       	call   c0001cb8 <ld_dword>
c0002a62:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a65:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a6b:	e8 48 f2 ff ff       	call   c0001cb8 <ld_dword>
c0002a70:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a73:	66 a1 40 b9 03 c0    	mov    ax,ds:0xc003b940
c0002a79:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a7c:	40                   	inc    eax
c0002a7d:	31 db                	xor    ebx,ebx
c0002a7f:	66 a3 40 b9 03 c0    	mov    ds:0xc003b940,ax
c0002a85:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a89:	e9 0c 02 00 00       	jmp    c0002c9a <mount_volume+0x55f>
c0002a8e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a94:	e8 12 f2 ff ff       	call   c0001cab <ld_word>
c0002a99:	66 3d 00 01          	cmp    ax,0x100
c0002a9d:	0f 85 60 fd ff ff    	jne    c0002803 <mount_volume+0xc8>
c0002aa3:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002aaa:	0f 85 53 fd ff ff    	jne    c0002803 <mount_volume+0xc8>
c0002ab0:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002ab6:	e8 15 f2 ff ff       	call   c0001cd0 <ld_qword>
c0002abb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002abf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002ac3:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002ac9:	e8 ea f1 ff ff       	call   c0001cb8 <ld_dword>
c0002ace:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002ad1:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002ad7:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002ada:	fe c8                	dec    al
c0002adc:	0f 85 21 fd ff ff    	jne    c0002803 <mount_volume+0xc8>
c0002ae2:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002ae9:	bb 01 00 00 00       	mov    ebx,0x1
c0002aee:	d3 e3                	shl    ebx,cl
c0002af0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002af4:	66 85 db             	test   bx,bx
c0002af7:	0f 84 06 fd ff ff    	je     c0002803 <mount_volume+0xc8>
c0002afd:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002b03:	e8 b0 f1 ff ff       	call   c0001cb8 <ld_dword>
c0002b08:	89 c6                	mov    esi,eax
c0002b0a:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002b0f:	0f 87 ee fc ff ff    	ja     c0002803 <mount_volume+0xc8>
c0002b15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b19:	8d 40 02             	lea    eax,[eax+0x2]
c0002b1c:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002b1f:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002b22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b26:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002b29:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002b2f:	e8 84 f1 ff ff       	call   c0001cb8 <ld_dword>
c0002b34:	31 d2                	xor    edx,edx
c0002b36:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b3a:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002b46:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002b49:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b4c:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b52:	e8 61 f1 ff ff       	call   c0001cb8 <ld_dword>
c0002b57:	31 d2                	xor    edx,edx
c0002b59:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b5d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b61:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b65:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b68:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b6b:	0f b7 c3             	movzx  eax,bx
c0002b6e:	31 d2                	xor    edx,edx
c0002b70:	0f af f0             	imul   esi,eax
c0002b73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b77:	89 f0                	mov    eax,esi
c0002b79:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b7d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b81:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b85:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b89:	39 c1                	cmp    ecx,eax
c0002b8b:	89 df                	mov    edi,ebx
c0002b8d:	19 d7                	sbb    edi,edx
c0002b8f:	0f 82 6e fc ff ff    	jb     c0002803 <mount_volume+0xc8>
c0002b95:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b9b:	31 db                	xor    ebx,ebx
c0002b9d:	e8 16 f1 ff ff       	call   c0001cb8 <ld_dword>
c0002ba2:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002ba9:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002bac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002bb4:	85 db                	test   ebx,ebx
c0002bb6:	75 39                	jne    c0002bf1 <mount_volume+0x4b6>
c0002bb8:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002bbc:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002bc0:	0f 86 3d fc ff ff    	jbe    c0002803 <mount_volume+0xc8>
c0002bc6:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002bc9:	31 ff                	xor    edi,edi
c0002bcb:	89 e8                	mov    eax,ebp
c0002bcd:	e8 72 f3 ff ff       	call   c0001f44 <clst2sect>
c0002bd2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002bd6:	01 c6                	add    esi,eax
c0002bd8:	89 e8                	mov    eax,ebp
c0002bda:	11 d7                	adc    edi,edx
c0002bdc:	89 f2                	mov    edx,esi
c0002bde:	89 f9                	mov    ecx,edi
c0002be0:	e8 a4 f8 ff ff       	call   c0002489 <move_window>
c0002be5:	85 c0                	test   eax,eax
c0002be7:	0f 85 07 fc ff ff    	jne    c00027f4 <mount_volume+0xb9>
c0002bed:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002bf1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bf6:	74 0b                	je     c0002c03 <mount_volume+0x4c8>
c0002bf8:	83 c3 20             	add    ebx,0x20
c0002bfb:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002c01:	eb b1                	jmp    c0002bb4 <mount_volume+0x479>
c0002c03:	8d 75 54             	lea    esi,[ebp+0x54]
c0002c06:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002c0a:	e8 a9 f0 ff ff       	call   c0001cb8 <ld_dword>
c0002c0f:	89 c3                	mov    ebx,eax
c0002c11:	83 f8 01             	cmp    eax,0x1
c0002c14:	0f 86 e9 fb ff ff    	jbe    c0002803 <mount_volume+0xc8>
c0002c1a:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002c1d:	0f 86 e0 fb ff ff    	jbe    c0002803 <mount_volume+0xc8>
c0002c23:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002c26:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002c2a:	0f af c2             	imul   eax,edx
c0002c2d:	31 d2                	xor    edx,edx
c0002c2f:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002c32:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002c35:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002c38:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002c3b:	31 c9                	xor    ecx,ecx
c0002c3d:	89 da                	mov    edx,ebx
c0002c3f:	89 e8                	mov    eax,ebp
c0002c41:	c1 ea 07             	shr    edx,0x7
c0002c44:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002c47:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c4a:	e8 3a f8 ff ff       	call   c0002489 <move_window>
c0002c4f:	85 c0                	test   eax,eax
c0002c51:	0f 85 9d fb ff ff    	jne    c00027f4 <mount_volume+0xb9>
c0002c57:	89 d8                	mov    eax,ebx
c0002c59:	83 e0 7f             	and    eax,0x7f
c0002c5c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c5f:	e8 54 f0 ff ff       	call   c0001cb8 <ld_dword>
c0002c64:	83 f8 ff             	cmp    eax,0xffffffff
c0002c67:	74 0a                	je     c0002c73 <mount_volume+0x538>
c0002c69:	43                   	inc    ebx
c0002c6a:	39 d8                	cmp    eax,ebx
c0002c6c:	74 cd                	je     c0002c3b <mount_volume+0x500>
c0002c6e:	e9 90 fb ff ff       	jmp    c0002803 <mount_volume+0xc8>
c0002c73:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c7a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c81:	bb 04 00 00 00       	mov    ebx,0x4
c0002c86:	e9 e8 fd ff ff       	jmp    c0002a73 <mount_volume+0x338>
c0002c8b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c90:	19 db                	sbb    ebx,ebx
c0002c92:	83 c3 02             	add    ebx,0x2
c0002c95:	e9 93 fc ff ff       	jmp    c000292d <mount_volume+0x1f2>
c0002c9a:	83 c4 3c             	add    esp,0x3c
c0002c9d:	89 d8                	mov    eax,ebx
c0002c9f:	5b                   	pop    ebx
c0002ca0:	5e                   	pop    esi
c0002ca1:	5f                   	pop    edi
c0002ca2:	5d                   	pop    ebp
c0002ca3:	c3                   	ret    

c0002ca4 <find_bitmap>:
c0002ca4:	55                   	push   ebp
c0002ca5:	57                   	push   edi
c0002ca6:	89 c7                	mov    edi,eax
c0002ca8:	56                   	push   esi
c0002ca9:	8d 72 fe             	lea    esi,[edx-0x2]
c0002cac:	53                   	push   ebx
c0002cad:	83 ec 1c             	sub    esp,0x1c
c0002cb0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002cb3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002cb7:	83 e8 02             	sub    eax,0x2
c0002cba:	39 f0                	cmp    eax,esi
c0002cbc:	77 02                	ja     c0002cc0 <find_bitmap+0x1c>
c0002cbe:	31 f6                	xor    esi,esi
c0002cc0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002cc4:	89 f3                	mov    ebx,esi
c0002cc6:	31 ed                	xor    ebp,ebp
c0002cc8:	31 c9                	xor    ecx,ecx
c0002cca:	89 da                	mov    edx,ebx
c0002ccc:	89 f8                	mov    eax,edi
c0002cce:	c1 ea 0c             	shr    edx,0xc
c0002cd1:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002cd4:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002cd7:	e8 ad f7 ff ff       	call   c0002489 <move_window>
c0002cdc:	85 c0                	test   eax,eax
c0002cde:	75 68                	jne    c0002d48 <find_bitmap+0xa4>
c0002ce0:	89 da                	mov    edx,ebx
c0002ce2:	89 d9                	mov    ecx,ebx
c0002ce4:	c1 ea 03             	shr    edx,0x3
c0002ce7:	83 e1 07             	and    ecx,0x7
c0002cea:	b8 01 00 00 00       	mov    eax,0x1
c0002cef:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cf5:	d3 e0                	shl    eax,cl
c0002cf7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cfa:	83 e9 02             	sub    ecx,0x2
c0002cfd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d01:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002d05:	43                   	inc    ebx
c0002d06:	21 c1                	and    ecx,eax
c0002d08:	d1 e0                	shl    eax,1
c0002d0a:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002d0e:	77 09                	ja     c0002d19 <find_bitmap+0x75>
c0002d10:	31 db                	xor    ebx,ebx
c0002d12:	ba 00 02 00 00       	mov    edx,0x200
c0002d17:	31 c0                	xor    eax,eax
c0002d19:	84 c9                	test   cl,cl
c0002d1b:	75 10                	jne    c0002d2d <find_bitmap+0x89>
c0002d1d:	45                   	inc    ebp
c0002d1e:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002d22:	75 0f                	jne    c0002d33 <find_bitmap+0x8f>
c0002d24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d28:	83 c0 02             	add    eax,0x2
c0002d2b:	eb 22                	jmp    c0002d4f <find_bitmap+0xab>
c0002d2d:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002d31:	31 ed                	xor    ebp,ebp
c0002d33:	39 de                	cmp    esi,ebx
c0002d35:	74 16                	je     c0002d4d <find_bitmap+0xa9>
c0002d37:	84 c0                	test   al,al
c0002d39:	75 c6                	jne    c0002d01 <find_bitmap+0x5d>
c0002d3b:	42                   	inc    edx
c0002d3c:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002d42:	77 84                	ja     c0002cc8 <find_bitmap+0x24>
c0002d44:	b0 01                	mov    al,0x1
c0002d46:	eb b9                	jmp    c0002d01 <find_bitmap+0x5d>
c0002d48:	83 c8 ff             	or     eax,0xffffffff
c0002d4b:	eb 02                	jmp    c0002d4f <find_bitmap+0xab>
c0002d4d:	31 c0                	xor    eax,eax
c0002d4f:	83 c4 1c             	add    esp,0x1c
c0002d52:	5b                   	pop    ebx
c0002d53:	5e                   	pop    esi
c0002d54:	5f                   	pop    edi
c0002d55:	5d                   	pop    ebp
c0002d56:	c3                   	ret    

c0002d57 <change_bitmap>:
c0002d57:	55                   	push   ebp
c0002d58:	89 cd                	mov    ebp,ecx
c0002d5a:	57                   	push   edi
c0002d5b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d5e:	56                   	push   esi
c0002d5f:	89 c7                	mov    edi,eax
c0002d61:	53                   	push   ebx
c0002d62:	89 c8                	mov    eax,ecx
c0002d64:	83 ec 1c             	sub    esp,0x1c
c0002d67:	31 d2                	xor    edx,edx
c0002d69:	89 ce                	mov    esi,ecx
c0002d6b:	c1 e8 0c             	shr    eax,0xc
c0002d6e:	bb 01 00 00 00       	mov    ebx,0x1
c0002d73:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d76:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d79:	c1 ee 03             	shr    esi,0x3
c0002d7c:	83 e1 07             	and    ecx,0x7
c0002d7f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d85:	d3 e3                	shl    ebx,cl
c0002d87:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d8b:	89 c1                	mov    ecx,eax
c0002d8d:	89 d3                	mov    ebx,edx
c0002d8f:	83 c1 01             	add    ecx,0x1
c0002d92:	83 d3 00             	adc    ebx,0x0
c0002d95:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d99:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d9d:	89 d1                	mov    ecx,edx
c0002d9f:	89 c2                	mov    edx,eax
c0002da1:	89 f8                	mov    eax,edi
c0002da3:	e8 e1 f6 ff ff       	call   c0002489 <move_window>
c0002da8:	89 c1                	mov    ecx,eax
c0002daa:	85 c0                	test   eax,eax
c0002dac:	75 48                	jne    c0002df6 <change_bitmap+0x9f>
c0002dae:	31 d2                	xor    edx,edx
c0002db0:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002db4:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002db8:	0f 95 c2             	setne  dl
c0002dbb:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002dbf:	74 3c                	je     c0002dfd <change_bitmap+0xa6>
c0002dc1:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002dc5:	4d                   	dec    ebp
c0002dc6:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002dca:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002dce:	74 32                	je     c0002e02 <change_bitmap+0xab>
c0002dd0:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002dd4:	75 d8                	jne    c0002dae <change_bitmap+0x57>
c0002dd6:	8d 46 01             	lea    eax,[esi+0x1]
c0002dd9:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002dde:	89 c3                	mov    ebx,eax
c0002de0:	31 f6                	xor    esi,esi
c0002de2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002de6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002dea:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002df0:	74 99                	je     c0002d8b <change_bitmap+0x34>
c0002df2:	89 de                	mov    esi,ebx
c0002df4:	eb b8                	jmp    c0002dae <change_bitmap+0x57>
c0002df6:	b9 01 00 00 00       	mov    ecx,0x1
c0002dfb:	eb 05                	jmp    c0002e02 <change_bitmap+0xab>
c0002dfd:	b9 02 00 00 00       	mov    ecx,0x2
c0002e02:	83 c4 1c             	add    esp,0x1c
c0002e05:	89 c8                	mov    eax,ecx
c0002e07:	5b                   	pop    ebx
c0002e08:	5e                   	pop    esi
c0002e09:	5f                   	pop    edi
c0002e0a:	5d                   	pop    ebp
c0002e0b:	c3                   	ret    

c0002e0c <put_fat>:
c0002e0c:	83 fa 01             	cmp    edx,0x1
c0002e0f:	0f 86 7b 01 00 00    	jbe    c0002f90 <put_fat+0x184>
c0002e15:	55                   	push   ebp
c0002e16:	57                   	push   edi
c0002e17:	89 cf                	mov    edi,ecx
c0002e19:	56                   	push   esi
c0002e1a:	b9 02 00 00 00       	mov    ecx,0x2
c0002e1f:	53                   	push   ebx
c0002e20:	89 c6                	mov    esi,eax
c0002e22:	83 ec 1c             	sub    esp,0x1c
c0002e25:	89 d3                	mov    ebx,edx
c0002e27:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002e2a:	0f 86 68 01 00 00    	jbe    c0002f98 <put_fat+0x18c>
c0002e30:	8a 00                	mov    al,BYTE PTR [eax]
c0002e32:	3c 02                	cmp    al,0x2
c0002e34:	0f 84 c7 00 00 00    	je     c0002f01 <put_fat+0xf5>
c0002e3a:	77 09                	ja     c0002e45 <put_fat+0x39>
c0002e3c:	fe c8                	dec    al
c0002e3e:	74 17                	je     c0002e57 <put_fat+0x4b>
c0002e40:	e9 53 01 00 00       	jmp    c0002f98 <put_fat+0x18c>
c0002e45:	b9 02 00 00 00       	mov    ecx,0x2
c0002e4a:	3c 04                	cmp    al,0x4
c0002e4c:	0f 86 e1 00 00 00    	jbe    c0002f33 <put_fat+0x127>
c0002e52:	e9 41 01 00 00       	jmp    c0002f98 <put_fat+0x18c>
c0002e57:	89 d5                	mov    ebp,edx
c0002e59:	31 c9                	xor    ecx,ecx
c0002e5b:	d1 ed                	shr    ebp,1
c0002e5d:	89 f0                	mov    eax,esi
c0002e5f:	01 d5                	add    ebp,edx
c0002e61:	89 ea                	mov    edx,ebp
c0002e63:	c1 ea 09             	shr    edx,0x9
c0002e66:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e69:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e6c:	e8 18 f6 ff ff       	call   c0002489 <move_window>
c0002e71:	89 c1                	mov    ecx,eax
c0002e73:	85 c0                	test   eax,eax
c0002e75:	0f 85 1d 01 00 00    	jne    c0002f98 <put_fat+0x18c>
c0002e7b:	8d 46 54             	lea    eax,[esi+0x54]
c0002e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e82:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e85:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e8f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e93:	89 f8                	mov    eax,edi
c0002e95:	83 e3 01             	and    ebx,0x1
c0002e98:	74 0d                	je     c0002ea7 <put_fat+0x9b>
c0002e9a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e9d:	89 fa                	mov    edx,edi
c0002e9f:	83 e0 0f             	and    eax,0xf
c0002ea2:	c1 e2 04             	shl    edx,0x4
c0002ea5:	09 d0                	or     eax,edx
c0002ea7:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002eaa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002eae:	31 c9                	xor    ecx,ecx
c0002eb0:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb4:	c1 ea 09             	shr    edx,0x9
c0002eb7:	89 f0                	mov    eax,esi
c0002eb9:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ebc:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebf:	e8 c5 f5 ff ff       	call   c0002489 <move_window>
c0002ec4:	89 c1                	mov    ecx,eax
c0002ec6:	85 c0                	test   eax,eax
c0002ec8:	0f 85 ca 00 00 00    	jne    c0002f98 <put_fat+0x18c>
c0002ece:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002ed2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002ed8:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002edc:	85 db                	test   ebx,ebx
c0002ede:	74 07                	je     c0002ee7 <put_fat+0xdb>
c0002ee0:	c1 ef 04             	shr    edi,0x4
c0002ee3:	89 fa                	mov    edx,edi
c0002ee5:	eb 0e                	jmp    c0002ef5 <put_fat+0xe9>
c0002ee7:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002eea:	c1 ef 08             	shr    edi,0x8
c0002eed:	83 e2 f0             	and    edx,0xfffffff0
c0002ef0:	83 e7 0f             	and    edi,0xf
c0002ef3:	09 fa                	or     edx,edi
c0002ef5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002ef8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002efc:	e9 97 00 00 00       	jmp    c0002f98 <put_fat+0x18c>
c0002f01:	31 c9                	xor    ecx,ecx
c0002f03:	c1 ea 08             	shr    edx,0x8
c0002f06:	89 f0                	mov    eax,esi
c0002f08:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002f0b:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002f0e:	e8 76 f5 ff ff       	call   c0002489 <move_window>
c0002f13:	89 c1                	mov    ecx,eax
c0002f15:	85 c0                	test   eax,eax
c0002f17:	75 7f                	jne    c0002f98 <put_fat+0x18c>
c0002f19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f1d:	01 db                	add    ebx,ebx
c0002f1f:	0f b7 d7             	movzx  edx,di
c0002f22:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002f28:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002f2c:	e8 ec ed ff ff       	call   c0001d1d <st_word>
c0002f31:	eb 53                	jmp    c0002f86 <put_fat+0x17a>
c0002f33:	31 c9                	xor    ecx,ecx
c0002f35:	c1 ea 07             	shr    edx,0x7
c0002f38:	89 f0                	mov    eax,esi
c0002f3a:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002f3d:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002f40:	e8 44 f5 ff ff       	call   c0002489 <move_window>
c0002f45:	89 c1                	mov    ecx,eax
c0002f47:	85 c0                	test   eax,eax
c0002f49:	75 4d                	jne    c0002f98 <put_fat+0x18c>
c0002f4b:	c1 e3 02             	shl    ebx,0x2
c0002f4e:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f54:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f57:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f5b:	74 1c                	je     c0002f79 <put_fat+0x16d>
c0002f5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f61:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f67:	89 d8                	mov    eax,ebx
c0002f69:	e8 4a ed ff ff       	call   c0001cb8 <ld_dword>
c0002f6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f72:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f77:	09 c7                	or     edi,eax
c0002f79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f7d:	89 fa                	mov    edx,edi
c0002f7f:	89 d8                	mov    eax,ebx
c0002f81:	e8 9b ed ff ff       	call   c0001d21 <st_dword>
c0002f86:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f8a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f8e:	eb 08                	jmp    c0002f98 <put_fat+0x18c>
c0002f90:	b9 02 00 00 00       	mov    ecx,0x2
c0002f95:	89 c8                	mov    eax,ecx
c0002f97:	c3                   	ret    
c0002f98:	83 c4 1c             	add    esp,0x1c
c0002f9b:	89 c8                	mov    eax,ecx
c0002f9d:	5b                   	pop    ebx
c0002f9e:	5e                   	pop    esi
c0002f9f:	5f                   	pop    edi
c0002fa0:	5d                   	pop    ebp
c0002fa1:	c3                   	ret    

c0002fa2 <fill_last_frag>:
c0002fa2:	57                   	push   edi
c0002fa3:	89 cf                	mov    edi,ecx
c0002fa5:	56                   	push   esi
c0002fa6:	89 d6                	mov    esi,edx
c0002fa8:	53                   	push   ebx
c0002fa9:	89 c3                	mov    ebx,eax
c0002fab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002fae:	85 c0                	test   eax,eax
c0002fb0:	74 21                	je     c0002fd3 <fill_last_frag+0x31>
c0002fb2:	89 f9                	mov    ecx,edi
c0002fb4:	83 f8 01             	cmp    eax,0x1
c0002fb7:	76 05                	jbe    c0002fbe <fill_last_frag+0x1c>
c0002fb9:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002fbc:	29 c1                	sub    ecx,eax
c0002fbe:	8d 56 01             	lea    edx,[esi+0x1]
c0002fc1:	29 c2                	sub    edx,eax
c0002fc3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fc5:	e8 42 fe ff ff       	call   c0002e0c <put_fat>
c0002fca:	85 c0                	test   eax,eax
c0002fcc:	75 05                	jne    c0002fd3 <fill_last_frag+0x31>
c0002fce:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002fd1:	eb d8                	jmp    c0002fab <fill_last_frag+0x9>
c0002fd3:	5b                   	pop    ebx
c0002fd4:	5e                   	pop    esi
c0002fd5:	5f                   	pop    edi
c0002fd6:	c3                   	ret    

c0002fd7 <fill_first_frag>:
c0002fd7:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002fdb:	75 2d                	jne    c000300a <fill_first_frag+0x33>
c0002fdd:	57                   	push   edi
c0002fde:	56                   	push   esi
c0002fdf:	53                   	push   ebx
c0002fe0:	89 c3                	mov    ebx,eax
c0002fe2:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002fe5:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002fe8:	01 d7                	add    edi,edx
c0002fea:	39 fa                	cmp    edx,edi
c0002fec:	74 14                	je     c0003002 <fill_first_frag+0x2b>
c0002fee:	8d 72 01             	lea    esi,[edx+0x1]
c0002ff1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ff3:	89 f1                	mov    ecx,esi
c0002ff5:	e8 12 fe ff ff       	call   c0002e0c <put_fat>
c0002ffa:	89 f2                	mov    edx,esi
c0002ffc:	85 c0                	test   eax,eax
c0002ffe:	74 ea                	je     c0002fea <fill_first_frag+0x13>
c0003000:	eb 0b                	jmp    c000300d <fill_first_frag+0x36>
c0003002:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003006:	31 c0                	xor    eax,eax
c0003008:	eb 03                	jmp    c000300d <fill_first_frag+0x36>
c000300a:	31 c0                	xor    eax,eax
c000300c:	c3                   	ret    
c000300d:	5b                   	pop    ebx
c000300e:	5e                   	pop    esi
c000300f:	5f                   	pop    edi
c0003010:	c3                   	ret    

c0003011 <get_fat>:
c0003011:	83 fa 01             	cmp    edx,0x1
c0003014:	0f 86 db 01 00 00    	jbe    c00031f5 <get_fat+0x1e4>
c000301a:	55                   	push   ebp
c000301b:	b9 01 00 00 00       	mov    ecx,0x1
c0003020:	57                   	push   edi
c0003021:	56                   	push   esi
c0003022:	53                   	push   ebx
c0003023:	83 ec 1c             	sub    esp,0x1c
c0003026:	8b 38                	mov    edi,DWORD PTR [eax]
c0003028:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c000302b:	0f 86 cc 01 00 00    	jbe    c00031fd <get_fat+0x1ec>
c0003031:	89 c3                	mov    ebx,eax
c0003033:	89 d6                	mov    esi,edx
c0003035:	8a 07                	mov    al,BYTE PTR [edi]
c0003037:	3c 02                	cmp    al,0x2
c0003039:	0f 84 99 00 00 00    	je     c00030d8 <get_fat+0xc7>
c000303f:	77 09                	ja     c000304a <get_fat+0x39>
c0003041:	fe c8                	dec    al
c0003043:	74 1a                	je     c000305f <get_fat+0x4e>
c0003045:	e9 b3 01 00 00       	jmp    c00031fd <get_fat+0x1ec>
c000304a:	3c 03                	cmp    al,0x3
c000304c:	0f 84 b5 00 00 00    	je     c0003107 <get_fat+0xf6>
c0003052:	3c 04                	cmp    al,0x4
c0003054:	0f 84 e3 00 00 00    	je     c000313d <get_fat+0x12c>
c000305a:	e9 9e 01 00 00       	jmp    c00031fd <get_fat+0x1ec>
c000305f:	89 d3                	mov    ebx,edx
c0003061:	31 c9                	xor    ecx,ecx
c0003063:	d1 eb                	shr    ebx,1
c0003065:	89 f8                	mov    eax,edi
c0003067:	01 d3                	add    ebx,edx
c0003069:	89 da                	mov    edx,ebx
c000306b:	c1 ea 09             	shr    edx,0x9
c000306e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003071:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003074:	e8 10 f4 ff ff       	call   c0002489 <move_window>
c0003079:	85 c0                	test   eax,eax
c000307b:	74 08                	je     c0003085 <get_fat+0x74>
c000307d:	83 c9 ff             	or     ecx,0xffffffff
c0003080:	e9 78 01 00 00       	jmp    c00031fd <get_fat+0x1ec>
c0003085:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003088:	31 c9                	xor    ecx,ecx
c000308a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003090:	89 ea                	mov    edx,ebp
c0003092:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003096:	c1 ea 09             	shr    edx,0x9
c0003099:	89 f8                	mov    eax,edi
c000309b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000309e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030a1:	e8 e3 f3 ff ff       	call   c0002489 <move_window>
c00030a6:	85 c0                	test   eax,eax
c00030a8:	75 d3                	jne    c000307d <get_fat+0x6c>
c00030aa:	0f b6 c3             	movzx  eax,bl
c00030ad:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00030b3:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c00030b8:	c1 e3 08             	shl    ebx,0x8
c00030bb:	09 c3                	or     ebx,eax
c00030bd:	89 d9                	mov    ecx,ebx
c00030bf:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00030c5:	83 e6 01             	and    esi,0x1
c00030c8:	0f 84 2f 01 00 00    	je     c00031fd <get_fat+0x1ec>
c00030ce:	89 d9                	mov    ecx,ebx
c00030d0:	c1 e9 04             	shr    ecx,0x4
c00030d3:	e9 25 01 00 00       	jmp    c00031fd <get_fat+0x1ec>
c00030d8:	31 c9                	xor    ecx,ecx
c00030da:	c1 ea 08             	shr    edx,0x8
c00030dd:	89 f8                	mov    eax,edi
c00030df:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030e2:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030e5:	e8 9f f3 ff ff       	call   c0002489 <move_window>
c00030ea:	85 c0                	test   eax,eax
c00030ec:	75 8f                	jne    c000307d <get_fat+0x6c>
c00030ee:	01 f6                	add    esi,esi
c00030f0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030f6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030fa:	e8 ac eb ff ff       	call   c0001cab <ld_word>
c00030ff:	0f b7 c8             	movzx  ecx,ax
c0003102:	e9 f6 00 00 00       	jmp    c00031fd <get_fat+0x1ec>
c0003107:	31 c9                	xor    ecx,ecx
c0003109:	c1 ea 07             	shr    edx,0x7
c000310c:	89 f8                	mov    eax,edi
c000310e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003111:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003114:	e8 70 f3 ff ff       	call   c0002489 <move_window>
c0003119:	85 c0                	test   eax,eax
c000311b:	0f 85 5c ff ff ff    	jne    c000307d <get_fat+0x6c>
c0003121:	c1 e6 02             	shl    esi,0x2
c0003124:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000312a:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000312e:	e8 85 eb ff ff       	call   c0001cb8 <ld_dword>
c0003133:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003138:	e9 b4 00 00 00       	jmp    c00031f1 <get_fat+0x1e0>
c000313d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003140:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003143:	89 d1                	mov    ecx,edx
c0003145:	09 c1                	or     ecx,eax
c0003147:	74 06                	je     c000314f <get_fat+0x13e>
c0003149:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000314d:	75 0f                	jne    c000315e <get_fat+0x14d>
c000314f:	b9 01 00 00 00       	mov    ecx,0x1
c0003154:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003158:	0f 85 9f 00 00 00    	jne    c00031fd <get_fat+0x1ec>
c000315e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003162:	89 f5                	mov    ebp,esi
c0003164:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003169:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000316c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000316f:	80 f9 02             	cmp    cl,0x2
c0003172:	75 35                	jne    c00031a9 <get_fat+0x198>
c0003174:	83 c0 ff             	add    eax,0xffffffff
c0003177:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000317c:	83 d2 ff             	adc    edx,0xffffffff
c000317f:	31 db                	xor    ebx,ebx
c0003181:	0f ac d0 09          	shrd   eax,edx,0x9
c0003185:	53                   	push   ebx
c0003186:	c1 ea 09             	shr    edx,0x9
c0003189:	51                   	push   ecx
c000318a:	52                   	push   edx
c000318b:	50                   	push   eax
c000318c:	e8 2b b5 01 00       	call   c001e6bc <__udivdi3>
c0003191:	83 c4 10             	add    esp,0x10
c0003194:	b9 01 00 00 00       	mov    ecx,0x1
c0003199:	39 c5                	cmp    ebp,eax
c000319b:	77 60                	ja     c00031fd <get_fat+0x1ec>
c000319d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c00031a2:	74 59                	je     c00031fd <get_fat+0x1ec>
c00031a4:	8d 4e 01             	lea    ecx,[esi+0x1]
c00031a7:	eb 54                	jmp    c00031fd <get_fat+0x1ec>
c00031a9:	80 f9 03             	cmp    cl,0x3
c00031ac:	75 05                	jne    c00031b3 <get_fat+0x1a2>
c00031ae:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c00031b1:	77 f1                	ja     c00031a4 <get_fat+0x193>
c00031b3:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c00031b8:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c00031bc:	75 3f                	jne    c00031fd <get_fat+0x1ec>
c00031be:	31 c9                	xor    ecx,ecx
c00031c0:	89 f2                	mov    edx,esi
c00031c2:	89 f8                	mov    eax,edi
c00031c4:	c1 ea 07             	shr    edx,0x7
c00031c7:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00031ca:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00031cd:	e8 b7 f2 ff ff       	call   c0002489 <move_window>
c00031d2:	85 c0                	test   eax,eax
c00031d4:	0f 85 a3 fe ff ff    	jne    c000307d <get_fat+0x6c>
c00031da:	c1 e6 02             	shl    esi,0x2
c00031dd:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031e3:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031e7:	e8 cc ea ff ff       	call   c0001cb8 <ld_dword>
c00031ec:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031f1:	89 c1                	mov    ecx,eax
c00031f3:	eb 08                	jmp    c00031fd <get_fat+0x1ec>
c00031f5:	b9 01 00 00 00       	mov    ecx,0x1
c00031fa:	89 c8                	mov    eax,ecx
c00031fc:	c3                   	ret    
c00031fd:	83 c4 1c             	add    esp,0x1c
c0003200:	89 c8                	mov    eax,ecx
c0003202:	5b                   	pop    ebx
c0003203:	5e                   	pop    esi
c0003204:	5f                   	pop    edi
c0003205:	5d                   	pop    ebp
c0003206:	c3                   	ret    

c0003207 <dir_sdi>:
c0003207:	55                   	push   ebp
c0003208:	57                   	push   edi
c0003209:	56                   	push   esi
c000320a:	53                   	push   ebx
c000320b:	89 c3                	mov    ebx,eax
c000320d:	83 ec 1c             	sub    esp,0x1c
c0003210:	8b 38                	mov    edi,DWORD PTR [eax]
c0003212:	31 c0                	xor    eax,eax
c0003214:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003217:	0f 94 c0             	sete   al
c000321a:	48                   	dec    eax
c000321b:	25 00 00 20 f0       	and    eax,0xf0200000
c0003220:	05 00 00 00 10       	add    eax,0x10000000
c0003225:	39 d0                	cmp    eax,edx
c0003227:	77 0a                	ja     c0003233 <dir_sdi+0x2c>
c0003229:	b8 02 00 00 00       	mov    eax,0x2
c000322e:	e9 c4 00 00 00       	jmp    c00032f7 <dir_sdi+0xf0>
c0003233:	89 d6                	mov    esi,edx
c0003235:	f6 c2 1f             	test   dl,0x1f
c0003238:	75 ef                	jne    c0003229 <dir_sdi+0x22>
c000323a:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000323d:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0003240:	85 c9                	test   ecx,ecx
c0003242:	75 2d                	jne    c0003271 <dir_sdi+0x6a>
c0003244:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003247:	77 1b                	ja     c0003264 <dir_sdi+0x5d>
c0003249:	89 f2                	mov    edx,esi
c000324b:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000324f:	c1 ea 05             	shr    edx,0x5
c0003252:	39 c2                	cmp    edx,eax
c0003254:	73 d3                	jae    c0003229 <dir_sdi+0x22>
c0003256:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003259:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000325c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003262:	eb 4b                	jmp    c00032af <dir_sdi+0xa8>
c0003264:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003267:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000326b:	85 c0                	test   eax,eax
c000326d:	74 da                	je     c0003249 <dir_sdi+0x42>
c000326f:	89 c1                	mov    ecx,eax
c0003271:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003275:	c1 e5 09             	shl    ebp,0x9
c0003278:	89 ca                	mov    edx,ecx
c000327a:	39 ee                	cmp    esi,ebp
c000327c:	72 1c                	jb     c000329a <dir_sdi+0x93>
c000327e:	89 d8                	mov    eax,ebx
c0003280:	e8 8c fd ff ff       	call   c0003011 <get_fat>
c0003285:	89 c1                	mov    ecx,eax
c0003287:	83 f8 ff             	cmp    eax,0xffffffff
c000328a:	74 66                	je     c00032f2 <dir_sdi+0xeb>
c000328c:	83 f8 01             	cmp    eax,0x1
c000328f:	76 98                	jbe    c0003229 <dir_sdi+0x22>
c0003291:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003294:	76 93                	jbe    c0003229 <dir_sdi+0x22>
c0003296:	29 ee                	sub    esi,ebp
c0003298:	eb de                	jmp    c0003278 <dir_sdi+0x71>
c000329a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000329e:	89 f8                	mov    eax,edi
c00032a0:	e8 9f ec ff ff       	call   c0001f44 <clst2sect>
c00032a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00032a9:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00032ac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00032af:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00032b2:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00032b5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00032b8:	89 d1                	mov    ecx,edx
c00032ba:	09 c1                	or     ecx,eax
c00032bc:	0f 84 67 ff ff ff    	je     c0003229 <dir_sdi+0x22>
c00032c2:	89 f1                	mov    ecx,esi
c00032c4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00032cc:	c1 e9 09             	shr    ecx,0x9
c00032cf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032d3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00032d7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00032db:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00032de:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00032e4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00032e7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032eb:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032ee:	31 c0                	xor    eax,eax
c00032f0:	eb 05                	jmp    c00032f7 <dir_sdi+0xf0>
c00032f2:	b8 01 00 00 00       	mov    eax,0x1
c00032f7:	83 c4 1c             	add    esp,0x1c
c00032fa:	5b                   	pop    ebx
c00032fb:	5e                   	pop    esi
c00032fc:	5f                   	pop    edi
c00032fd:	5d                   	pop    ebp
c00032fe:	c3                   	ret    

c00032ff <create_chain>:
c00032ff:	55                   	push   ebp
c0003300:	89 c5                	mov    ebp,eax
c0003302:	57                   	push   edi
c0003303:	56                   	push   esi
c0003304:	53                   	push   ebx
c0003305:	83 ec 1c             	sub    esp,0x1c
c0003308:	85 d2                	test   edx,edx
c000330a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000330e:	8b 30                	mov    esi,DWORD PTR [eax]
c0003310:	75 0e                	jne    c0003320 <create_chain+0x21>
c0003312:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003315:	85 ff                	test   edi,edi
c0003317:	74 39                	je     c0003352 <create_chain+0x53>
c0003319:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c000331c:	77 39                	ja     c0003357 <create_chain+0x58>
c000331e:	eb 32                	jmp    c0003352 <create_chain+0x53>
c0003320:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003324:	e8 e8 fc ff ff       	call   c0003011 <get_fat>
c0003329:	89 c3                	mov    ebx,eax
c000332b:	83 f8 01             	cmp    eax,0x1
c000332e:	77 0a                	ja     c000333a <create_chain+0x3b>
c0003330:	bb 01 00 00 00       	mov    ebx,0x1
c0003335:	e9 ba 01 00 00       	jmp    c00034f4 <create_chain+0x1f5>
c000333a:	83 f8 ff             	cmp    eax,0xffffffff
c000333d:	0f 84 62 01 00 00    	je     c00034a5 <create_chain+0x1a6>
c0003343:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003346:	0f 87 a8 01 00 00    	ja     c00034f4 <create_chain+0x1f5>
c000334c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003350:	eb 05                	jmp    c0003357 <create_chain+0x58>
c0003352:	bf 01 00 00 00       	mov    edi,0x1
c0003357:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000335b:	75 07                	jne    c0003364 <create_chain+0x65>
c000335d:	31 db                	xor    ebx,ebx
c000335f:	e9 90 01 00 00       	jmp    c00034f4 <create_chain+0x1f5>
c0003364:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003367:	75 74                	jne    c00033dd <create_chain+0xde>
c0003369:	b9 01 00 00 00       	mov    ecx,0x1
c000336e:	89 fa                	mov    edx,edi
c0003370:	89 f0                	mov    eax,esi
c0003372:	e8 2d f9 ff ff       	call   c0002ca4 <find_bitmap>
c0003377:	89 c3                	mov    ebx,eax
c0003379:	8d 40 ff             	lea    eax,[eax-0x1]
c000337c:	83 f8 fd             	cmp    eax,0xfffffffd
c000337f:	0f 87 6f 01 00 00    	ja     c00034f4 <create_chain+0x1f5>
c0003385:	83 ec 0c             	sub    esp,0xc
c0003388:	b9 01 00 00 00       	mov    ecx,0x1
c000338d:	6a 01                	push   0x1
c000338f:	89 da                	mov    edx,ebx
c0003391:	89 f0                	mov    eax,esi
c0003393:	e8 bf f9 ff ff       	call   c0002d57 <change_bitmap>
c0003398:	83 c4 10             	add    esp,0x10
c000339b:	83 f8 02             	cmp    eax,0x2
c000339e:	74 90                	je     c0003330 <create_chain+0x31>
c00033a0:	83 f8 01             	cmp    eax,0x1
c00033a3:	0f 84 fc 00 00 00    	je     c00034a5 <create_chain+0x1a6>
c00033a9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ae:	75 09                	jne    c00033b9 <create_chain+0xba>
c00033b0:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c00033b4:	e9 0c 01 00 00       	jmp    c00034c5 <create_chain+0x1c6>
c00033b9:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c00033bd:	0f 85 e7 00 00 00    	jne    c00034aa <create_chain+0x1ab>
c00033c3:	8d 57 01             	lea    edx,[edi+0x1]
c00033c6:	39 da                	cmp    edx,ebx
c00033c8:	0f 84 f7 00 00 00    	je     c00034c5 <create_chain+0x1c6>
c00033ce:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00033d1:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00033d5:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00033d8:	e9 cd 00 00 00       	jmp    c00034aa <create_chain+0x1ab>
c00033dd:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00033e1:	75 41                	jne    c0003424 <create_chain+0x125>
c00033e3:	8d 5f 01             	lea    ebx,[edi+0x1]
c00033e6:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e9:	77 05                	ja     c00033f0 <create_chain+0xf1>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 18 fc ff ff       	call   c0003011 <get_fat>
c00033f9:	83 f8 01             	cmp    eax,0x1
c00033fc:	0f 84 2e ff ff ff    	je     c0003330 <create_chain+0x31>
c0003402:	83 f8 ff             	cmp    eax,0xffffffff
c0003405:	0f 84 9a 00 00 00    	je     c00034a5 <create_chain+0x1a6>
c000340b:	85 c0                	test   eax,eax
c000340d:	74 11                	je     c0003420 <create_chain+0x121>
c000340f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003412:	83 f8 01             	cmp    eax,0x1
c0003415:	76 0d                	jbe    c0003424 <create_chain+0x125>
c0003417:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c000341a:	76 08                	jbe    c0003424 <create_chain+0x125>
c000341c:	89 c7                	mov    edi,eax
c000341e:	eb 04                	jmp    c0003424 <create_chain+0x125>
c0003420:	85 db                	test   ebx,ebx
c0003422:	75 38                	jne    c000345c <create_chain+0x15d>
c0003424:	89 fb                	mov    ebx,edi
c0003426:	43                   	inc    ebx
c0003427:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000342a:	77 0e                	ja     c000343a <create_chain+0x13b>
c000342c:	83 ff 01             	cmp    edi,0x1
c000342f:	0f 86 28 ff ff ff    	jbe    c000335d <create_chain+0x5e>
c0003435:	bb 02 00 00 00       	mov    ebx,0x2
c000343a:	89 da                	mov    edx,ebx
c000343c:	89 e8                	mov    eax,ebp
c000343e:	e8 ce fb ff ff       	call   c0003011 <get_fat>
c0003443:	85 c0                	test   eax,eax
c0003445:	74 15                	je     c000345c <create_chain+0x15d>
c0003447:	83 f8 01             	cmp    eax,0x1
c000344a:	0f 84 e0 fe ff ff    	je     c0003330 <create_chain+0x31>
c0003450:	40                   	inc    eax
c0003451:	74 52                	je     c00034a5 <create_chain+0x1a6>
c0003453:	39 fb                	cmp    ebx,edi
c0003455:	75 cf                	jne    c0003426 <create_chain+0x127>
c0003457:	e9 01 ff ff ff       	jmp    c000335d <create_chain+0x5e>
c000345c:	83 c9 ff             	or     ecx,0xffffffff
c000345f:	89 da                	mov    edx,ebx
c0003461:	89 f0                	mov    eax,esi
c0003463:	e8 a4 f9 ff ff       	call   c0002e0c <put_fat>
c0003468:	85 c0                	test   eax,eax
c000346a:	75 32                	jne    c000349e <create_chain+0x19f>
c000346c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003471:	74 11                	je     c0003484 <create_chain+0x185>
c0003473:	89 d9                	mov    ecx,ebx
c0003475:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003479:	89 f0                	mov    eax,esi
c000347b:	e8 8c f9 ff ff       	call   c0002e0c <put_fat>
c0003480:	85 c0                	test   eax,eax
c0003482:	75 1a                	jne    c000349e <create_chain+0x19f>
c0003484:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003487:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000348a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000348d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003490:	39 d0                	cmp    eax,edx
c0003492:	77 04                	ja     c0003498 <create_chain+0x199>
c0003494:	48                   	dec    eax
c0003495:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003498:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000349c:	eb 56                	jmp    c00034f4 <create_chain+0x1f5>
c000349e:	48                   	dec    eax
c000349f:	0f 85 8b fe ff ff    	jne    c0003330 <create_chain+0x31>
c00034a5:	83 cb ff             	or     ebx,0xffffffff
c00034a8:	eb 4a                	jmp    c00034f4 <create_chain+0x1f5>
c00034aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034ae:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00034b1:	41                   	inc    ecx
c00034b2:	39 d9                	cmp    ecx,ebx
c00034b4:	75 19                	jne    c00034cf <create_chain+0x1d0>
c00034b6:	b9 02 00 00 00       	mov    ecx,0x2
c00034bb:	85 d2                	test   edx,edx
c00034bd:	74 03                	je     c00034c2 <create_chain+0x1c3>
c00034bf:	8d 4a 01             	lea    ecx,[edx+0x1]
c00034c2:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00034c5:	85 c0                	test   eax,eax
c00034c7:	0f 85 63 fe ff ff    	jne    c0003330 <create_chain+0x31>
c00034cd:	eb b5                	jmp    c0003484 <create_chain+0x185>
c00034cf:	85 d2                	test   edx,edx
c00034d1:	75 07                	jne    c00034da <create_chain+0x1db>
c00034d3:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034da:	89 d9                	mov    ecx,ebx
c00034dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00034e0:	89 e8                	mov    eax,ebp
c00034e2:	e8 bb fa ff ff       	call   c0002fa2 <fill_last_frag>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	75 b3                	jne    c000349e <create_chain+0x19f>
c00034eb:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034f2:	eb 90                	jmp    c0003484 <create_chain+0x185>
c00034f4:	83 c4 1c             	add    esp,0x1c
c00034f7:	89 d8                	mov    eax,ebx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    

c00034fe <remove_chain>:
c00034fe:	55                   	push   ebp
c00034ff:	57                   	push   edi
c0003500:	56                   	push   esi
c0003501:	53                   	push   ebx
c0003502:	83 ec 1c             	sub    esp,0x1c
c0003505:	83 fa 01             	cmp    edx,0x1
c0003508:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000350c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000350e:	77 0a                	ja     c000351a <remove_chain+0x1c>
c0003510:	b8 02 00 00 00       	mov    eax,0x2
c0003515:	e9 24 01 00 00       	jmp    c000363e <remove_chain+0x140>
c000351a:	89 d6                	mov    esi,edx
c000351c:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000351f:	76 ef                	jbe    c0003510 <remove_chain+0x12>
c0003521:	89 c7                	mov    edi,eax
c0003523:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003528:	75 06                	jne    c0003530 <remove_chain+0x32>
c000352a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000352e:	eb 54                	jmp    c0003584 <remove_chain+0x86>
c0003530:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003533:	75 06                	jne    c000353b <remove_chain+0x3d>
c0003535:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c0003539:	74 ef                	je     c000352a <remove_chain+0x2c>
c000353b:	83 c9 ff             	or     ecx,0xffffffff
c000353e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003542:	89 d8                	mov    eax,ebx
c0003544:	e8 c3 f8 ff ff       	call   c0002e0c <put_fat>
c0003549:	85 c0                	test   eax,eax
c000354b:	74 dd                	je     c000352a <remove_chain+0x2c>
c000354d:	e9 ec 00 00 00       	jmp    c000363e <remove_chain+0x140>
c0003552:	83 f8 01             	cmp    eax,0x1
c0003555:	74 b9                	je     c0003510 <remove_chain+0x12>
c0003557:	83 f8 ff             	cmp    eax,0xffffffff
c000355a:	74 6d                	je     c00035c9 <remove_chain+0xcb>
c000355c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000355f:	75 6f                	jne    c00035d0 <remove_chain+0xd2>
c0003561:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003564:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003567:	8d 51 fe             	lea    edx,[ecx-0x2]
c000356a:	39 d0                	cmp    eax,edx
c000356c:	73 08                	jae    c0003576 <remove_chain+0x78>
c000356e:	40                   	inc    eax
c000356f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003573:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003576:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003579:	39 e9                	cmp    ecx,ebp
c000357b:	75 64                	jne    c00035e1 <remove_chain+0xe3>
c000357d:	89 ee                	mov    esi,ebp
c000357f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003582:	76 0f                	jbe    c0003593 <remove_chain+0x95>
c0003584:	89 f2                	mov    edx,esi
c0003586:	89 f8                	mov    eax,edi
c0003588:	e8 84 fa ff ff       	call   c0003011 <get_fat>
c000358d:	89 c5                	mov    ebp,eax
c000358f:	85 c0                	test   eax,eax
c0003591:	75 bf                	jne    c0003552 <remove_chain+0x54>
c0003593:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003596:	0f 85 a0 00 00 00    	jne    c000363c <remove_chain+0x13e>
c000359c:	eb 6c                	jmp    c000360a <remove_chain+0x10c>
c000359e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c00035a1:	84 c0                	test   al,al
c00035a3:	75 7d                	jne    c0003622 <remove_chain+0x124>
c00035a5:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00035a8:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c00035ac:	0f 84 86 00 00 00    	je     c0003638 <remove_chain+0x13a>
c00035b2:	89 da                	mov    edx,ebx
c00035b4:	89 f8                	mov    eax,edi
c00035b6:	e8 56 fa ff ff       	call   c0003011 <get_fat>
c00035bb:	83 f8 01             	cmp    eax,0x1
c00035be:	0f 86 4c ff ff ff    	jbe    c0003510 <remove_chain+0x12>
c00035c4:	83 f8 ff             	cmp    eax,0xffffffff
c00035c7:	75 4e                	jne    c0003617 <remove_chain+0x119>
c00035c9:	b8 01 00 00 00       	mov    eax,0x1
c00035ce:	eb 6e                	jmp    c000363e <remove_chain+0x140>
c00035d0:	31 c9                	xor    ecx,ecx
c00035d2:	89 f2                	mov    edx,esi
c00035d4:	89 d8                	mov    eax,ebx
c00035d6:	e8 31 f8 ff ff       	call   c0002e0c <put_fat>
c00035db:	85 c0                	test   eax,eax
c00035dd:	74 82                	je     c0003561 <remove_chain+0x63>
c00035df:	eb 5d                	jmp    c000363e <remove_chain+0x140>
c00035e1:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00035e4:	75 1b                	jne    c0003601 <remove_chain+0x103>
c00035e6:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035ea:	89 d8                	mov    eax,ebx
c00035ec:	83 ec 0c             	sub    esp,0xc
c00035ef:	6a 00                	push   0x0
c00035f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035f5:	e8 5d f7 ff ff       	call   c0002d57 <change_bitmap>
c00035fa:	83 c4 10             	add    esp,0x10
c00035fd:	85 c0                	test   eax,eax
c00035ff:	75 3d                	jne    c000363e <remove_chain+0x140>
c0003601:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003605:	e9 73 ff ff ff       	jmp    c000357d <remove_chain+0x7f>
c000360a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000360f:	75 8d                	jne    c000359e <remove_chain+0xa0>
c0003611:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003615:	eb 25                	jmp    c000363c <remove_chain+0x13e>
c0003617:	8d 53 01             	lea    edx,[ebx+0x1]
c000361a:	89 c3                	mov    ebx,eax
c000361c:	39 c2                	cmp    edx,eax
c000361e:	74 88                	je     c00035a8 <remove_chain+0xaa>
c0003620:	eb 1a                	jmp    c000363c <remove_chain+0x13e>
c0003622:	3c 03                	cmp    al,0x3
c0003624:	75 16                	jne    c000363c <remove_chain+0x13e>
c0003626:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0003629:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000362d:	77 0d                	ja     c000363c <remove_chain+0x13e>
c000362f:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003632:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003636:	72 04                	jb     c000363c <remove_chain+0x13e>
c0003638:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c000363c:	31 c0                	xor    eax,eax
c000363e:	83 c4 1c             	add    esp,0x1c
c0003641:	5b                   	pop    ebx
c0003642:	5e                   	pop    esi
c0003643:	5f                   	pop    edi
c0003644:	5d                   	pop    ebp
c0003645:	c3                   	ret    

c0003646 <dir_clear>:
c0003646:	55                   	push   ebp
c0003647:	57                   	push   edi
c0003648:	56                   	push   esi
c0003649:	89 c6                	mov    esi,eax
c000364b:	53                   	push   ebx
c000364c:	83 ec 1c             	sub    esp,0x1c
c000364f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003653:	e8 9d ed ff ff       	call   c00023f5 <sync_window>
c0003658:	85 c0                	test   eax,eax
c000365a:	0f 85 de 00 00 00    	jne    c000373e <dir_clear+0xf8>
c0003660:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003664:	89 f0                	mov    eax,esi
c0003666:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003669:	e8 d6 e8 ff ff       	call   c0001f44 <clst2sect>
c000366e:	b9 00 02 00 00       	mov    ecx,0x200
c0003673:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003677:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000367b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000367e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003681:	89 e8                	mov    eax,ebp
c0003683:	31 d2                	xor    edx,edx
c0003685:	e8 b5 e6 ff ff       	call   c0001d3f <mem_set>
c000368a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000368e:	c1 e3 09             	shl    ebx,0x9
c0003691:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003697:	76 1f                	jbe    c00036b8 <dir_clear+0x72>
c0003699:	bb 00 80 00 00       	mov    ebx,0x8000
c000369e:	eb 18                	jmp    c00036b8 <dir_clear+0x72>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	53                   	push   ebx
c00036a4:	e8 35 4e 00 00       	call   c00084de <ff_memalloc>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	89 c7                	mov    edi,eax
c00036ae:	85 c0                	test   eax,eax
c00036b0:	0f 85 8f 00 00 00    	jne    c0003745 <dir_clear+0xff>
c00036b6:	d1 eb                	shr    ebx,1
c00036b8:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00036be:	77 e0                	ja     c00036a0 <dir_clear+0x5a>
c00036c0:	31 db                	xor    ebx,ebx
c00036c2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036c6:	39 d8                	cmp    eax,ebx
c00036c8:	76 66                	jbe    c0003730 <dir_clear+0xea>
c00036ca:	83 ec 0c             	sub    esp,0xc
c00036cd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036d1:	6a 01                	push   0x1
c00036d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00036d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00036db:	55                   	push   ebp
c00036dc:	50                   	push   eax
c00036dd:	e8 94 e5 ff ff       	call   c0001c76 <disk_write>
c00036e2:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00036e7:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036ec:	83 c4 20             	add    esp,0x20
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 3d                	jne    c0003730 <dir_clear+0xea>
c00036f3:	43                   	inc    ebx
c00036f4:	eb cc                	jmp    c00036c2 <dir_clear+0x7c>
c00036f6:	83 ec 0c             	sub    esp,0xc
c00036f9:	31 d2                	xor    edx,edx
c00036fb:	55                   	push   ebp
c00036fc:	89 d8                	mov    eax,ebx
c00036fe:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003702:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003706:	52                   	push   edx
c0003707:	50                   	push   eax
c0003708:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000370c:	57                   	push   edi
c000370d:	50                   	push   eax
c000370e:	e8 63 e5 ff ff       	call   c0001c76 <disk_write>
c0003713:	83 c4 20             	add    esp,0x20
c0003716:	85 c0                	test   eax,eax
c0003718:	75 0a                	jne    c0003724 <dir_clear+0xde>
c000371a:	01 eb                	add    ebx,ebp
c000371c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003720:	39 d8                	cmp    eax,ebx
c0003722:	77 d2                	ja     c00036f6 <dir_clear+0xb0>
c0003724:	83 ec 0c             	sub    esp,0xc
c0003727:	57                   	push   edi
c0003728:	e8 c7 4d 00 00       	call   c00084f4 <ff_memfree>
c000372d:	83 c4 10             	add    esp,0x10
c0003730:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003734:	39 d8                	cmp    eax,ebx
c0003736:	0f 95 c0             	setne  al
c0003739:	0f b6 c0             	movzx  eax,al
c000373c:	eb 19                	jmp    c0003757 <dir_clear+0x111>
c000373e:	b8 01 00 00 00       	mov    eax,0x1
c0003743:	eb 12                	jmp    c0003757 <dir_clear+0x111>
c0003745:	89 d9                	mov    ecx,ebx
c0003747:	31 d2                	xor    edx,edx
c0003749:	c1 eb 09             	shr    ebx,0x9
c000374c:	e8 ee e5 ff ff       	call   c0001d3f <mem_set>
c0003751:	89 dd                	mov    ebp,ebx
c0003753:	31 db                	xor    ebx,ebx
c0003755:	eb c5                	jmp    c000371c <dir_clear+0xd6>
c0003757:	83 c4 1c             	add    esp,0x1c
c000375a:	5b                   	pop    ebx
c000375b:	5e                   	pop    esi
c000375c:	5f                   	pop    edi
c000375d:	5d                   	pop    ebp
c000375e:	c3                   	ret    

c000375f <dir_next>:
c000375f:	55                   	push   ebp
c0003760:	57                   	push   edi
c0003761:	56                   	push   esi
c0003762:	53                   	push   ebx
c0003763:	89 c3                	mov    ebx,eax
c0003765:	83 ec 1c             	sub    esp,0x1c
c0003768:	8b 28                	mov    ebp,DWORD PTR [eax]
c000376a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000376e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003771:	8d 78 20             	lea    edi,[eax+0x20]
c0003774:	31 c0                	xor    eax,eax
c0003776:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000377a:	0f 94 c0             	sete   al
c000377d:	48                   	dec    eax
c000377e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003783:	05 00 00 00 10       	add    eax,0x10000000
c0003788:	39 f8                	cmp    eax,edi
c000378a:	77 0e                	ja     c000379a <dir_next+0x3b>
c000378c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003793:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000379a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000379d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037a0:	b8 04 00 00 00       	mov    eax,0x4
c00037a5:	89 ce                	mov    esi,ecx
c00037a7:	09 d6                	or     esi,edx
c00037a9:	0f 84 da 00 00 00    	je     c0003889 <dir_next+0x12a>
c00037af:	89 f8                	mov    eax,edi
c00037b1:	25 ff 01 00 00       	and    eax,0x1ff
c00037b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037ba:	0f 85 b9 00 00 00    	jne    c0003879 <dir_next+0x11a>
c00037c0:	83 c2 01             	add    edx,0x1
c00037c3:	83 d1 00             	adc    ecx,0x0
c00037c6:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00037c9:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00037cc:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037cf:	85 d2                	test   edx,edx
c00037d1:	75 29                	jne    c00037fc <dir_next+0x9d>
c00037d3:	89 fa                	mov    edx,edi
c00037d5:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037d9:	c1 ea 05             	shr    edx,0x5
c00037dc:	39 c2                	cmp    edx,eax
c00037de:	0f 82 95 00 00 00    	jb     c0003879 <dir_next+0x11a>
c00037e4:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037eb:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037f2:	b8 04 00 00 00       	mov    eax,0x4
c00037f7:	e9 8d 00 00 00       	jmp    c0003889 <dir_next+0x12a>
c00037fc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003800:	89 f9                	mov    ecx,edi
c0003802:	48                   	dec    eax
c0003803:	c1 e9 09             	shr    ecx,0x9
c0003806:	85 c8                	test   eax,ecx
c0003808:	75 6f                	jne    c0003879 <dir_next+0x11a>
c000380a:	89 d8                	mov    eax,ebx
c000380c:	e8 00 f8 ff ff       	call   c0003011 <get_fat>
c0003811:	89 c6                	mov    esi,eax
c0003813:	83 f8 01             	cmp    eax,0x1
c0003816:	77 07                	ja     c000381f <dir_next+0xc0>
c0003818:	b8 02 00 00 00       	mov    eax,0x2
c000381d:	eb 6a                	jmp    c0003889 <dir_next+0x12a>
c000381f:	83 f8 ff             	cmp    eax,0xffffffff
c0003822:	75 07                	jne    c000382b <dir_next+0xcc>
c0003824:	b8 01 00 00 00       	mov    eax,0x1
c0003829:	eb 5e                	jmp    c0003889 <dir_next+0x12a>
c000382b:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c000382e:	77 37                	ja     c0003867 <dir_next+0x108>
c0003830:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003835:	74 ad                	je     c00037e4 <dir_next+0x85>
c0003837:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000383a:	89 d8                	mov    eax,ebx
c000383c:	e8 be fa ff ff       	call   c00032ff <create_chain>
c0003841:	89 c6                	mov    esi,eax
c0003843:	b8 07 00 00 00       	mov    eax,0x7
c0003848:	85 f6                	test   esi,esi
c000384a:	74 3d                	je     c0003889 <dir_next+0x12a>
c000384c:	83 fe 01             	cmp    esi,0x1
c000384f:	74 c7                	je     c0003818 <dir_next+0xb9>
c0003851:	83 fe ff             	cmp    esi,0xffffffff
c0003854:	74 ce                	je     c0003824 <dir_next+0xc5>
c0003856:	89 f2                	mov    edx,esi
c0003858:	89 e8                	mov    eax,ebp
c000385a:	e8 e7 fd ff ff       	call   c0003646 <dir_clear>
c000385f:	85 c0                	test   eax,eax
c0003861:	75 c1                	jne    c0003824 <dir_next+0xc5>
c0003863:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003867:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000386a:	89 f2                	mov    edx,esi
c000386c:	89 e8                	mov    eax,ebp
c000386e:	e8 d1 e6 ff ff       	call   c0001f44 <clst2sect>
c0003873:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003876:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003879:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000387d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003880:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003884:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003887:	31 c0                	xor    eax,eax
c0003889:	83 c4 1c             	add    esp,0x1c
c000388c:	5b                   	pop    ebx
c000388d:	5e                   	pop    esi
c000388e:	5f                   	pop    edi
c000388f:	5d                   	pop    ebp
c0003890:	c3                   	ret    

c0003891 <load_xdir>:
c0003891:	55                   	push   ebp
c0003892:	57                   	push   edi
c0003893:	56                   	push   esi
c0003894:	89 c6                	mov    esi,eax
c0003896:	53                   	push   ebx
c0003897:	83 ec 1c             	sub    esp,0x1c
c000389a:	8b 00                	mov    eax,DWORD PTR [eax]
c000389c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000389f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00038a2:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038a5:	e8 df eb ff ff       	call   c0002489 <move_window>
c00038aa:	89 c3                	mov    ebx,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 0c 01 00 00    	jne    c00039c0 <load_xdir+0x12f>
c00038b4:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038b7:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c00038ba:	0f 85 fb 00 00 00    	jne    c00039bb <load_xdir+0x12a>
c00038c0:	89 f8                	mov    eax,edi
c00038c2:	b9 20 00 00 00       	mov    ecx,0x20
c00038c7:	e8 5e e4 ff ff       	call   c0001d2a <mem_cpy>
c00038cc:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00038d0:	40                   	inc    eax
c00038d1:	c1 e0 05             	shl    eax,0x5
c00038d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038d8:	83 e8 60             	sub    eax,0x60
c00038db:	3d 00 02 00 00       	cmp    eax,0x200
c00038e0:	0f 87 d5 00 00 00    	ja     c00039bb <load_xdir+0x12a>
c00038e6:	31 d2                	xor    edx,edx
c00038e8:	89 f0                	mov    eax,esi
c00038ea:	e8 70 fe ff ff       	call   c000375f <dir_next>
c00038ef:	89 c3                	mov    ebx,eax
c00038f1:	83 f8 04             	cmp    eax,0x4
c00038f4:	0f 84 c1 00 00 00    	je     c00039bb <load_xdir+0x12a>
c00038fa:	85 c0                	test   eax,eax
c00038fc:	0f 85 be 00 00 00    	jne    c00039c0 <load_xdir+0x12f>
c0003902:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003905:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003908:	8b 06                	mov    eax,DWORD PTR [esi]
c000390a:	e8 7a eb ff ff       	call   c0002489 <move_window>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	85 c0                	test   eax,eax
c0003913:	0f 85 a7 00 00 00    	jne    c00039c0 <load_xdir+0x12f>
c0003919:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000391c:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000391f:	0f 85 96 00 00 00    	jne    c00039bb <load_xdir+0x12a>
c0003925:	8d 47 20             	lea    eax,[edi+0x20]
c0003928:	b9 20 00 00 00       	mov    ecx,0x20
c000392d:	e8 f8 e3 ff ff       	call   c0001d2a <mem_cpy>
c0003932:	31 d2                	xor    edx,edx
c0003934:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c0003938:	b9 0f 00 00 00       	mov    ecx,0xf
c000393d:	83 c0 2c             	add    eax,0x2c
c0003940:	f7 f1                	div    ecx
c0003942:	c1 e0 05             	shl    eax,0x5
c0003945:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003949:	77 70                	ja     c00039bb <load_xdir+0x12a>
c000394b:	bd 40 00 00 00       	mov    ebp,0x40
c0003950:	31 d2                	xor    edx,edx
c0003952:	89 f0                	mov    eax,esi
c0003954:	e8 06 fe ff ff       	call   c000375f <dir_next>
c0003959:	89 c3                	mov    ebx,eax
c000395b:	83 f8 04             	cmp    eax,0x4
c000395e:	74 5b                	je     c00039bb <load_xdir+0x12a>
c0003960:	85 c0                	test   eax,eax
c0003962:	75 5c                	jne    c00039c0 <load_xdir+0x12f>
c0003964:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003967:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000396a:	8b 06                	mov    eax,DWORD PTR [esi]
c000396c:	e8 18 eb ff ff       	call   c0002489 <move_window>
c0003971:	89 c3                	mov    ebx,eax
c0003973:	85 c0                	test   eax,eax
c0003975:	75 49                	jne    c00039c0 <load_xdir+0x12f>
c0003977:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000397a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000397d:	75 3c                	jne    c00039bb <load_xdir+0x12a>
c000397f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003985:	77 0d                	ja     c0003994 <load_xdir+0x103>
c0003987:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000398a:	b9 20 00 00 00       	mov    ecx,0x20
c000398f:	e8 96 e3 ff ff       	call   c0001d2a <mem_cpy>
c0003994:	83 c5 20             	add    ebp,0x20
c0003997:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000399b:	77 b3                	ja     c0003950 <load_xdir+0xbf>
c000399d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c00039a3:	77 1b                	ja     c00039c0 <load_xdir+0x12f>
c00039a5:	89 f8                	mov    eax,edi
c00039a7:	e8 cd e7 ff ff       	call   c0002179 <xdir_sum>
c00039ac:	89 c1                	mov    ecx,eax
c00039ae:	8d 47 02             	lea    eax,[edi+0x2]
c00039b1:	e8 f5 e2 ff ff       	call   c0001cab <ld_word>
c00039b6:	66 39 c1             	cmp    cx,ax
c00039b9:	74 05                	je     c00039c0 <load_xdir+0x12f>
c00039bb:	bb 02 00 00 00       	mov    ebx,0x2
c00039c0:	83 c4 1c             	add    esp,0x1c
c00039c3:	89 d8                	mov    eax,ebx
c00039c5:	5b                   	pop    ebx
c00039c6:	5e                   	pop    esi
c00039c7:	5f                   	pop    edi
c00039c8:	5d                   	pop    ebp
c00039c9:	c3                   	ret    

c00039ca <load_obj_xdir>:
c00039ca:	53                   	push   ebx
c00039cb:	89 c3                	mov    ebx,eax
c00039cd:	83 ec 08             	sub    esp,0x8
c00039d0:	8b 02                	mov    eax,DWORD PTR [edx]
c00039d2:	89 03                	mov    DWORD PTR [ebx],eax
c00039d4:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00039d7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00039da:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039dd:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00039e0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039e3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039ea:	30 c0                	xor    al,al
c00039ec:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039f3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039f6:	89 d8                	mov    eax,ebx
c00039f8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039fb:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039fe:	e8 04 f8 ff ff       	call   c0003207 <dir_sdi>
c0003a03:	85 c0                	test   eax,eax
c0003a05:	75 0b                	jne    c0003a12 <load_obj_xdir+0x48>
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	83 c4 08             	add    esp,0x8
c0003a0c:	5b                   	pop    ebx
c0003a0d:	e9 7f fe ff ff       	jmp    c0003891 <load_xdir>
c0003a12:	83 c4 08             	add    esp,0x8
c0003a15:	5b                   	pop    ebx
c0003a16:	c3                   	ret    

c0003a17 <dir_read>:
c0003a17:	55                   	push   ebp
c0003a18:	bd 04 00 00 00       	mov    ebp,0x4
c0003a1d:	57                   	push   edi
c0003a1e:	56                   	push   esi
c0003a1f:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a24:	53                   	push   ebx
c0003a25:	89 c3                	mov    ebx,eax
c0003a27:	83 ec 1c             	sub    esp,0x1c
c0003a2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a2e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a30:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003a35:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a38:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a3b:	89 c8                	mov    eax,ecx
c0003a3d:	09 d0                	or     eax,edx
c0003a3f:	0f 84 25 01 00 00    	je     c0003b6a <dir_read+0x153>
c0003a45:	89 f8                	mov    eax,edi
c0003a47:	e8 3d ea ff ff       	call   c0002489 <move_window>
c0003a4c:	89 c5                	mov    ebp,eax
c0003a4e:	85 c0                	test   eax,eax
c0003a50:	0f 85 23 01 00 00    	jne    c0003b79 <dir_read+0x162>
c0003a56:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a59:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a5b:	84 c9                	test   cl,cl
c0003a5d:	0f 84 11 01 00 00    	je     c0003b74 <dir_read+0x15d>
c0003a63:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a66:	75 48                	jne    c0003ab0 <dir_read+0x99>
c0003a68:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a6d:	74 10                	je     c0003a7f <dir_read+0x68>
c0003a6f:	80 f9 83             	cmp    cl,0x83
c0003a72:	0f 85 dd 00 00 00    	jne    c0003b55 <dir_read+0x13e>
c0003a78:	31 ed                	xor    ebp,ebp
c0003a7a:	e9 08 01 00 00       	jmp    c0003b87 <dir_read+0x170>
c0003a7f:	80 f9 85             	cmp    cl,0x85
c0003a82:	0f 85 cd 00 00 00    	jne    c0003b55 <dir_read+0x13e>
c0003a88:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a8b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a8e:	89 d8                	mov    eax,ebx
c0003a90:	e8 fc fd ff ff       	call   c0003891 <load_xdir>
c0003a95:	89 c5                	mov    ebp,eax
c0003a97:	85 c0                	test   eax,eax
c0003a99:	0f 85 da 00 00 00    	jne    c0003b79 <dir_read+0x162>
c0003a9f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003aa2:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003aa5:	83 e0 3f             	and    eax,0x3f
c0003aa8:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003aab:	e9 d7 00 00 00       	jmp    c0003b87 <dir_read+0x170>
c0003ab0:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003ab3:	83 e0 3f             	and    eax,0x3f
c0003ab6:	80 f9 2e             	cmp    cl,0x2e
c0003ab9:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003abd:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ac0:	0f 84 8a 00 00 00    	je     c0003b50 <dir_read+0x139>
c0003ac6:	80 f9 e5             	cmp    cl,0xe5
c0003ac9:	0f 84 81 00 00 00    	je     c0003b50 <dir_read+0x139>
c0003acf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ad3:	83 e0 1f             	and    eax,0x1f
c0003ad6:	83 f8 08             	cmp    eax,0x8
c0003ad9:	0f 94 c0             	sete   al
c0003adc:	0f b6 c0             	movzx  eax,al
c0003adf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003ae3:	75 6b                	jne    c0003b50 <dir_read+0x139>
c0003ae5:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aea:	75 44                	jne    c0003b30 <dir_read+0x119>
c0003aec:	f6 c1 40             	test   cl,0x40
c0003aef:	74 12                	je     c0003b03 <dir_read+0xec>
c0003af1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003af4:	83 e1 bf             	and    ecx,0xffffffbf
c0003af7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003afb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003afe:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003b01:	eb 06                	jmp    c0003b09 <dir_read+0xf2>
c0003b03:	89 f0                	mov    eax,esi
c0003b05:	38 c8                	cmp    al,cl
c0003b07:	75 47                	jne    c0003b50 <dir_read+0x139>
c0003b09:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b0d:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b12:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003b15:	75 3e                	jne    c0003b55 <dir_read+0x13e>
c0003b17:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b1b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b1e:	e8 8a e4 ff ff       	call   c0001fad <pick_lfn>
c0003b23:	85 c0                	test   eax,eax
c0003b25:	74 2e                	je     c0003b55 <dir_read+0x13e>
c0003b27:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b2b:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003b2e:	eb 25                	jmp    c0003b55 <dir_read+0x13e>
c0003b30:	89 f0                	mov    eax,esi
c0003b32:	84 c0                	test   al,al
c0003b34:	75 11                	jne    c0003b47 <dir_read+0x130>
c0003b36:	89 d0                	mov    eax,edx
c0003b38:	e8 2a e6 ff ff       	call   c0002167 <sum_sfn>
c0003b3d:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003b41:	0f 84 31 ff ff ff    	je     c0003a78 <dir_read+0x61>
c0003b47:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b4e:	eb 37                	jmp    c0003b87 <dir_read+0x170>
c0003b50:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b55:	31 d2                	xor    edx,edx
c0003b57:	89 d8                	mov    eax,ebx
c0003b59:	e8 01 fc ff ff       	call   c000375f <dir_next>
c0003b5e:	89 c5                	mov    ebp,eax
c0003b60:	85 c0                	test   eax,eax
c0003b62:	0f 84 cd fe ff ff    	je     c0003a35 <dir_read+0x1e>
c0003b68:	eb 0f                	jmp    c0003b79 <dir_read+0x162>
c0003b6a:	85 ed                	test   ebp,ebp
c0003b6c:	0f 84 06 ff ff ff    	je     c0003a78 <dir_read+0x61>
c0003b72:	eb 05                	jmp    c0003b79 <dir_read+0x162>
c0003b74:	bd 04 00 00 00       	mov    ebp,0x4
c0003b79:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b80:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b87:	83 c4 1c             	add    esp,0x1c
c0003b8a:	89 e8                	mov    eax,ebp
c0003b8c:	5b                   	pop    ebx
c0003b8d:	5e                   	pop    esi
c0003b8e:	5f                   	pop    edi
c0003b8f:	5d                   	pop    ebp
c0003b90:	c3                   	ret    

c0003b91 <dir_alloc>:
c0003b91:	55                   	push   ebp
c0003b92:	89 d5                	mov    ebp,edx
c0003b94:	57                   	push   edi
c0003b95:	31 d2                	xor    edx,edx
c0003b97:	56                   	push   esi
c0003b98:	53                   	push   ebx
c0003b99:	89 c3                	mov    ebx,eax
c0003b9b:	83 ec 0c             	sub    esp,0xc
c0003b9e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ba0:	e8 62 f6 ff ff       	call   c0003207 <dir_sdi>
c0003ba5:	85 c0                	test   eax,eax
c0003ba7:	75 4e                	jne    c0003bf7 <dir_alloc+0x66>
c0003ba9:	31 f6                	xor    esi,esi
c0003bab:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003bae:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 d1 e8 ff ff       	call   c0002489 <move_window>
c0003bb8:	85 c0                	test   eax,eax
c0003bba:	75 3b                	jne    c0003bf7 <dir_alloc+0x66>
c0003bbc:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003bbf:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003bc2:	8a 12                	mov    dl,BYTE PTR [edx]
c0003bc4:	75 07                	jne    c0003bcd <dir_alloc+0x3c>
c0003bc6:	f7 d2                	not    edx
c0003bc8:	c0 ea 07             	shr    dl,0x7
c0003bcb:	eb 0d                	jmp    c0003bda <dir_alloc+0x49>
c0003bcd:	84 d2                	test   dl,dl
c0003bcf:	0f 94 c1             	sete   cl
c0003bd2:	80 fa e5             	cmp    dl,0xe5
c0003bd5:	0f 94 c2             	sete   dl
c0003bd8:	09 ca                	or     edx,ecx
c0003bda:	84 d2                	test   dl,dl
c0003bdc:	74 07                	je     c0003be5 <dir_alloc+0x54>
c0003bde:	46                   	inc    esi
c0003bdf:	39 ee                	cmp    esi,ebp
c0003be1:	75 04                	jne    c0003be7 <dir_alloc+0x56>
c0003be3:	eb 1c                	jmp    c0003c01 <dir_alloc+0x70>
c0003be5:	31 f6                	xor    esi,esi
c0003be7:	ba 01 00 00 00       	mov    edx,0x1
c0003bec:	89 d8                	mov    eax,ebx
c0003bee:	e8 6c fb ff ff       	call   c000375f <dir_next>
c0003bf3:	85 c0                	test   eax,eax
c0003bf5:	74 b4                	je     c0003bab <dir_alloc+0x1a>
c0003bf7:	83 f8 04             	cmp    eax,0x4
c0003bfa:	75 05                	jne    c0003c01 <dir_alloc+0x70>
c0003bfc:	b8 07 00 00 00       	mov    eax,0x7
c0003c01:	83 c4 0c             	add    esp,0xc
c0003c04:	5b                   	pop    ebx
c0003c05:	5e                   	pop    esi
c0003c06:	5f                   	pop    edi
c0003c07:	5d                   	pop    ebp
c0003c08:	c3                   	ret    

c0003c09 <store_xdir>:
c0003c09:	55                   	push   ebp
c0003c0a:	57                   	push   edi
c0003c0b:	89 c7                	mov    edi,eax
c0003c0d:	56                   	push   esi
c0003c0e:	53                   	push   ebx
c0003c0f:	83 ec 0c             	sub    esp,0xc
c0003c12:	8b 00                	mov    eax,DWORD PTR [eax]
c0003c14:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003c17:	89 e8                	mov    eax,ebp
c0003c19:	e8 5b e5 ff ff       	call   c0002179 <xdir_sum>
c0003c1e:	0f b7 d0             	movzx  edx,ax
c0003c21:	8d 45 02             	lea    eax,[ebp+0x2]
c0003c24:	e8 f4 e0 ff ff       	call   c0001d1d <st_word>
c0003c29:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003c2d:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003c30:	89 f8                	mov    eax,edi
c0003c32:	e8 d0 f5 ff ff       	call   c0003207 <dir_sdi>
c0003c37:	89 c6                	mov    esi,eax
c0003c39:	85 f6                	test   esi,esi
c0003c3b:	75 3d                	jne    c0003c7a <store_xdir+0x71>
c0003c3d:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003c40:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003c43:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c45:	e8 3f e8 ff ff       	call   c0002489 <move_window>
c0003c4a:	89 c6                	mov    esi,eax
c0003c4c:	85 c0                	test   eax,eax
c0003c4e:	75 2a                	jne    c0003c7a <store_xdir+0x71>
c0003c50:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c53:	b9 20 00 00 00       	mov    ecx,0x20
c0003c58:	89 ea                	mov    edx,ebp
c0003c5a:	e8 cb e0 ff ff       	call   c0001d2a <mem_cpy>
c0003c5f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c61:	85 db                	test   ebx,ebx
c0003c63:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c67:	74 11                	je     c0003c7a <store_xdir+0x71>
c0003c69:	31 d2                	xor    edx,edx
c0003c6b:	89 f8                	mov    eax,edi
c0003c6d:	83 c5 20             	add    ebp,0x20
c0003c70:	e8 ea fa ff ff       	call   c000375f <dir_next>
c0003c75:	4b                   	dec    ebx
c0003c76:	89 c6                	mov    esi,eax
c0003c78:	eb bf                	jmp    c0003c39 <store_xdir+0x30>
c0003c7a:	89 f0                	mov    eax,esi
c0003c7c:	83 fe 02             	cmp    esi,0x2
c0003c7f:	76 05                	jbe    c0003c86 <store_xdir+0x7d>
c0003c81:	b8 02 00 00 00       	mov    eax,0x2
c0003c86:	83 c4 0c             	add    esp,0xc
c0003c89:	5b                   	pop    ebx
c0003c8a:	5e                   	pop    esi
c0003c8b:	5f                   	pop    edi
c0003c8c:	5d                   	pop    ebp
c0003c8d:	c3                   	ret    

c0003c8e <dir_remove>:
c0003c8e:	57                   	push   edi
c0003c8f:	56                   	push   esi
c0003c90:	53                   	push   ebx
c0003c91:	89 c3                	mov    ebx,eax
c0003c93:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c96:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c98:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c9b:	83 fa ff             	cmp    edx,0xffffffff
c0003c9e:	74 09                	je     c0003ca9 <dir_remove+0x1b>
c0003ca0:	e8 62 f5 ff ff       	call   c0003207 <dir_sdi>
c0003ca5:	85 c0                	test   eax,eax
c0003ca7:	75 41                	jne    c0003cea <dir_remove+0x5c>
c0003ca9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003cac:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003caf:	89 f0                	mov    eax,esi
c0003cb1:	e8 d3 e7 ff ff       	call   c0002489 <move_window>
c0003cb6:	85 c0                	test   eax,eax
c0003cb8:	75 26                	jne    c0003ce0 <dir_remove+0x52>
c0003cba:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003cbd:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003cc0:	75 05                	jne    c0003cc7 <dir_remove+0x39>
c0003cc2:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003cc5:	eb 03                	jmp    c0003cca <dir_remove+0x3c>
c0003cc7:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003cca:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003cce:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003cd1:	73 17                	jae    c0003cea <dir_remove+0x5c>
c0003cd3:	31 d2                	xor    edx,edx
c0003cd5:	89 d8                	mov    eax,ebx
c0003cd7:	e8 83 fa ff ff       	call   c000375f <dir_next>
c0003cdc:	85 c0                	test   eax,eax
c0003cde:	74 c9                	je     c0003ca9 <dir_remove+0x1b>
c0003ce0:	83 f8 04             	cmp    eax,0x4
c0003ce3:	75 05                	jne    c0003cea <dir_remove+0x5c>
c0003ce5:	b8 02 00 00 00       	mov    eax,0x2
c0003cea:	5b                   	pop    ebx
c0003ceb:	5e                   	pop    esi
c0003cec:	5f                   	pop    edi
c0003ced:	c3                   	ret    

c0003cee <create_name>:
c0003cee:	55                   	push   ebp
c0003cef:	89 d5                	mov    ebp,edx
c0003cf1:	57                   	push   edi
c0003cf2:	89 c7                	mov    edi,eax
c0003cf4:	56                   	push   esi
c0003cf5:	31 f6                	xor    esi,esi
c0003cf7:	53                   	push   ebx
c0003cf8:	83 ec 3c             	sub    esp,0x3c
c0003cfb:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cfd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d01:	8b 07                	mov    eax,DWORD PTR [edi]
c0003d03:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003d06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003d0a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003d0e:	e8 72 e0 ff ff       	call   c0001d85 <tchar2uni>
c0003d13:	89 c3                	mov    ebx,eax
c0003d15:	83 f8 ff             	cmp    eax,0xffffffff
c0003d18:	75 0a                	jne    c0003d24 <create_name+0x36>
c0003d1a:	b8 06 00 00 00       	mov    eax,0x6
c0003d1f:	e9 9e 02 00 00       	jmp    c0003fc2 <create_name+0x2d4>
c0003d24:	3d ff ff 00 00       	cmp    eax,0xffff
c0003d29:	76 0c                	jbe    c0003d37 <create_name+0x49>
c0003d2b:	c1 e8 10             	shr    eax,0x10
c0003d2e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003d32:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003d36:	46                   	inc    esi
c0003d37:	66 83 fb 1f          	cmp    bx,0x1f
c0003d3b:	76 4f                	jbe    c0003d8c <create_name+0x9e>
c0003d3d:	66 83 fb 5c          	cmp    bx,0x5c
c0003d41:	74 35                	je     c0003d78 <create_name+0x8a>
c0003d43:	66 83 fb 2f          	cmp    bx,0x2f
c0003d47:	74 2f                	je     c0003d78 <create_name+0x8a>
c0003d49:	66 83 fb 7f          	cmp    bx,0x7f
c0003d4d:	77 11                	ja     c0003d60 <create_name+0x72>
c0003d4f:	0f b7 d3             	movzx  edx,bx
c0003d52:	b8 72 f7 01 c0       	mov    eax,0xc001f772
c0003d57:	e8 11 e0 ff ff       	call   c0001d6d <chk_chr>
c0003d5c:	85 c0                	test   eax,eax
c0003d5e:	75 ba                	jne    c0003d1a <create_name+0x2c>
c0003d60:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d66:	77 b2                	ja     c0003d1a <create_name+0x2c>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d70:	46                   	inc    esi
c0003d71:	eb 97                	jmp    c0003d0a <create_name+0x1c>
c0003d73:	40                   	inc    eax
c0003d74:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d78:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d7c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d7e:	80 fa 2f             	cmp    dl,0x2f
c0003d81:	74 f0                	je     c0003d73 <create_name+0x85>
c0003d83:	80 fa 5c             	cmp    dl,0x5c
c0003d86:	74 eb                	je     c0003d73 <create_name+0x85>
c0003d88:	31 db                	xor    ebx,ebx
c0003d8a:	eb 02                	jmp    c0003d8e <create_name+0xa0>
c0003d8c:	b3 04                	mov    bl,0x4
c0003d8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d92:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d95:	85 f6                	test   esi,esi
c0003d97:	74 18                	je     c0003db1 <create_name+0xc3>
c0003d99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d9d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003da2:	66 83 f8 20          	cmp    ax,0x20
c0003da6:	74 06                	je     c0003dae <create_name+0xc0>
c0003da8:	66 83 f8 2e          	cmp    ax,0x2e
c0003dac:	75 03                	jne    c0003db1 <create_name+0xc3>
c0003dae:	4e                   	dec    esi
c0003daf:	eb e4                	jmp    c0003d95 <create_name+0xa7>
c0003db1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003db5:	31 ed                	xor    ebp,ebp
c0003db7:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003dbd:	85 f6                	test   esi,esi
c0003dbf:	0f 84 55 ff ff ff    	je     c0003d1a <create_name+0x2c>
c0003dc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dc9:	8d 55 01             	lea    edx,[ebp+0x1]
c0003dcc:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003dd0:	66 83 f8 20          	cmp    ax,0x20
c0003dd4:	75 04                	jne    c0003dda <create_name+0xec>
c0003dd6:	89 d5                	mov    ebp,edx
c0003dd8:	eb eb                	jmp    c0003dc5 <create_name+0xd7>
c0003dda:	85 ed                	test   ebp,ebp
c0003ddc:	75 06                	jne    c0003de4 <create_name+0xf6>
c0003dde:	66 83 f8 2e          	cmp    ax,0x2e
c0003de2:	75 08                	jne    c0003dec <create_name+0xfe>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	eb 03                	jmp    c0003dec <create_name+0xfe>
c0003de9:	4e                   	dec    esi
c0003dea:	74 0c                	je     c0003df8 <create_name+0x10a>
c0003dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003df0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003df6:	75 f1                	jne    c0003de9 <create_name+0xfb>
c0003df8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfd:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003e00:	ba 20 00 00 00       	mov    edx,0x20
c0003e05:	e8 35 df ff ff       	call   c0001d3f <mem_set>
c0003e0a:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003e12:	31 c9                	xor    ecx,ecx
c0003e14:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003e19:	8d 45 01             	lea    eax,[ebp+0x1]
c0003e1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003e24:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003e28:	66 85 ed             	test   bp,bp
c0003e2b:	0f 84 30 01 00 00    	je     c0003f61 <create_name+0x273>
c0003e31:	66 83 fd 20          	cmp    bp,0x20
c0003e35:	74 10                	je     c0003e47 <create_name+0x159>
c0003e37:	66 83 fd 2e          	cmp    bp,0x2e
c0003e3b:	75 13                	jne    c0003e50 <create_name+0x162>
c0003e3d:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e41:	0f 84 6b 01 00 00    	je     c0003fb2 <create_name+0x2c4>
c0003e47:	83 cb 03             	or     ebx,0x3
c0003e4a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e4e:	eb c9                	jmp    c0003e19 <create_name+0x12b>
c0003e50:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e54:	73 0b                	jae    c0003e61 <create_name+0x173>
c0003e56:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e5a:	75 47                	jne    c0003ea3 <create_name+0x1b5>
c0003e5c:	e9 51 01 00 00       	jmp    c0003fb2 <create_name+0x2c4>
c0003e61:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e66:	75 10                	jne    c0003e78 <create_name+0x18a>
c0003e68:	83 cb 03             	or     ebx,0x3
c0003e6b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e73:	e9 e9 00 00 00       	jmp    c0003f61 <create_name+0x273>
c0003e78:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e7c:	74 0d                	je     c0003e8b <create_name+0x19d>
c0003e7e:	83 cb 03             	or     ebx,0x3
c0003e81:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e85:	0f 87 d6 00 00 00    	ja     c0003f61 <create_name+0x273>
c0003e8b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e90:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e94:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e9c:	b9 08 00 00 00       	mov    ecx,0x8
c0003ea1:	eb a7                	jmp    c0003e4a <create_name+0x15c>
c0003ea3:	66 83 fd 7f          	cmp    bp,0x7f
c0003ea7:	76 68                	jbe    c0003f11 <create_name+0x223>
c0003ea9:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003ead:	88 da                	mov    dl,bl
c0003eaf:	83 ca 02             	or     edx,0x2
c0003eb2:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003eb6:	50                   	push   eax
c0003eb7:	50                   	push   eax
c0003eb8:	68 b5 01 00 00       	push   0x1b5
c0003ebd:	55                   	push   ebp
c0003ebe:	e8 48 46 00 00       	call   c000850b <ff_uni2oem>
c0003ec3:	83 c4 10             	add    esp,0x10
c0003ec6:	89 c5                	mov    ebp,eax
c0003ec8:	a8 80                	test   al,0x80
c0003eca:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003ece:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ed2:	74 0c                	je     c0003ee0 <create_name+0x1f2>
c0003ed4:	83 e5 7f             	and    ebp,0x7f
c0003ed7:	0f b6 ad c0 f6 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe0940]
c0003ede:	eb 2a                	jmp    c0003f0a <create_name+0x21c>
c0003ee0:	66 3d ff 00          	cmp    ax,0xff
c0003ee4:	76 24                	jbe    c0003f0a <create_name+0x21c>
c0003ee6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eea:	48                   	dec    eax
c0003eeb:	39 c8                	cmp    eax,ecx
c0003eed:	77 0c                	ja     c0003efb <create_name+0x20d>
c0003eef:	83 cb 03             	or     ebx,0x3
c0003ef2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef6:	e9 4f ff ff ff       	jmp    c0003e4a <create_name+0x15c>
c0003efb:	89 e8                	mov    eax,ebp
c0003efd:	88 d3                	mov    bl,dl
c0003eff:	66 c1 e8 08          	shr    ax,0x8
c0003f03:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f07:	41                   	inc    ecx
c0003f08:	eb 4b                	jmp    c0003f55 <create_name+0x267>
c0003f0a:	88 d3                	mov    bl,dl
c0003f0c:	66 85 ed             	test   bp,bp
c0003f0f:	74 19                	je     c0003f2a <create_name+0x23c>
c0003f11:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003f15:	0f b7 d5             	movzx  edx,bp
c0003f18:	b8 7b f7 01 c0       	mov    eax,0xc001f77b
c0003f1d:	e8 4b de ff ff       	call   c0001d6d <chk_chr>
c0003f22:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003f26:	85 c0                	test   eax,eax
c0003f28:	74 0a                	je     c0003f34 <create_name+0x246>
c0003f2a:	83 cb 03             	or     ebx,0x3
c0003f2d:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003f32:	eb 21                	jmp    c0003f55 <create_name+0x267>
c0003f34:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003f37:	66 83 f8 19          	cmp    ax,0x19
c0003f3b:	77 07                	ja     c0003f44 <create_name+0x256>
c0003f3d:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003f42:	eb 11                	jmp    c0003f55 <create_name+0x267>
c0003f44:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003f47:	66 83 f8 19          	cmp    ax,0x19
c0003f4b:	77 08                	ja     c0003f55 <create_name+0x267>
c0003f4d:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f52:	83 ed 20             	sub    ebp,0x20
c0003f55:	89 e8                	mov    eax,ebp
c0003f57:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f5b:	41                   	inc    ecx
c0003f5c:	e9 e9 fe ff ff       	jmp    c0003e4a <create_name+0x15c>
c0003f61:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f65:	75 04                	jne    c0003f6b <create_name+0x27d>
c0003f67:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f6b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f70:	75 05                	jne    c0003f77 <create_name+0x289>
c0003f72:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f77:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f7b:	83 e0 0c             	and    eax,0xc
c0003f7e:	3c 0c                	cmp    al,0xc
c0003f80:	74 0b                	je     c0003f8d <create_name+0x29f>
c0003f82:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f86:	83 e0 03             	and    eax,0x3
c0003f89:	3c 03                	cmp    al,0x3
c0003f8b:	75 05                	jne    c0003f92 <create_name+0x2a4>
c0003f8d:	83 cb 02             	or     ebx,0x2
c0003f90:	eb 19                	jmp    c0003fab <create_name+0x2bd>
c0003f92:	f6 c3 02             	test   bl,0x2
c0003f95:	75 14                	jne    c0003fab <create_name+0x2bd>
c0003f97:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f9c:	74 03                	je     c0003fa1 <create_name+0x2b3>
c0003f9e:	83 cb 10             	or     ebx,0x10
c0003fa1:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003fa6:	74 03                	je     c0003fab <create_name+0x2bd>
c0003fa8:	83 cb 08             	or     ebx,0x8
c0003fab:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003fae:	31 c0                	xor    eax,eax
c0003fb0:	eb 10                	jmp    c0003fc2 <create_name+0x2d4>
c0003fb2:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003fb7:	0f 85 ce fe ff ff    	jne    c0003e8b <create_name+0x19d>
c0003fbd:	e9 a6 fe ff ff       	jmp    c0003e68 <create_name+0x17a>
c0003fc2:	83 c4 3c             	add    esp,0x3c
c0003fc5:	5b                   	pop    ebx
c0003fc6:	5e                   	pop    esi
c0003fc7:	5f                   	pop    edi
c0003fc8:	5d                   	pop    ebp
c0003fc9:	c3                   	ret    

c0003fca <xname_sum>:
c0003fca:	56                   	push   esi
c0003fcb:	53                   	push   ebx
c0003fcc:	89 c6                	mov    esi,eax
c0003fce:	51                   	push   ecx
c0003fcf:	31 db                	xor    ebx,ebx
c0003fd1:	83 c6 02             	add    esi,0x2
c0003fd4:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003fd8:	66 85 c0             	test   ax,ax
c0003fdb:	74 1f                	je     c0003ffc <xname_sum+0x32>
c0003fdd:	83 ec 0c             	sub    esp,0xc
c0003fe0:	66 d1 cb             	ror    bx,1
c0003fe3:	50                   	push   eax
c0003fe4:	e8 1e 46 00 00       	call   c0008607 <ff_wtoupper>
c0003fe9:	83 c4 10             	add    esp,0x10
c0003fec:	0f b6 d0             	movzx  edx,al
c0003fef:	66 c1 e8 08          	shr    ax,0x8
c0003ff3:	01 d3                	add    ebx,edx
c0003ff5:	66 d1 cb             	ror    bx,1
c0003ff8:	01 c3                	add    ebx,eax
c0003ffa:	eb d5                	jmp    c0003fd1 <xname_sum+0x7>
c0003ffc:	89 d8                	mov    eax,ebx
c0003ffe:	5a                   	pop    edx
c0003fff:	5b                   	pop    ebx
c0004000:	5e                   	pop    esi
c0004001:	c3                   	ret    

c0004002 <create_xdir>:
c0004002:	55                   	push   ebp
c0004003:	b9 40 00 00 00       	mov    ecx,0x40
c0004008:	57                   	push   edi
c0004009:	bd 01 00 00 00       	mov    ebp,0x1
c000400e:	56                   	push   esi
c000400f:	31 ff                	xor    edi,edi
c0004011:	53                   	push   ebx
c0004012:	be 40 00 00 00       	mov    esi,0x40
c0004017:	89 c3                	mov    ebx,eax
c0004019:	83 ec 1c             	sub    esp,0x1c
c000401c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0004020:	31 d2                	xor    edx,edx
c0004022:	e8 18 dd ff ff       	call   c0001d3f <mem_set>
c0004027:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c000402a:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c000402e:	31 c9                	xor    ecx,ecx
c0004030:	8d 46 01             	lea    eax,[esi+0x1]
c0004033:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0004037:	83 c6 02             	add    esi,0x2
c000403a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000403e:	66 85 ed             	test   bp,bp
c0004041:	74 12                	je     c0004055 <create_xdir+0x53>
c0004043:	0f b6 c1             	movzx  eax,cl
c0004046:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000404a:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c000404e:	66 83 fd 01          	cmp    bp,0x1
c0004052:	80 d9 ff             	sbb    cl,0xff
c0004055:	8d 04 33             	lea    eax,[ebx+esi*1]
c0004058:	0f b7 d5             	movzx  edx,bp
c000405b:	83 c6 02             	add    esi,0x2
c000405e:	e8 ba dc ff ff       	call   c0001d1d <st_word>
c0004063:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0004069:	75 d3                	jne    c000403e <create_xdir+0x3c>
c000406b:	8d 47 01             	lea    eax,[edi+0x1]
c000406e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004072:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0004076:	0f b6 c1             	movzx  eax,cl
c0004079:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c000407e:	74 07                	je     c0004087 <create_xdir+0x85>
c0004080:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004085:	eb a9                	jmp    c0004030 <create_xdir+0x2e>
c0004087:	8d 47 02             	lea    eax,[edi+0x2]
c000408a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c000408d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004090:	89 d0                	mov    eax,edx
c0004092:	e8 33 ff ff ff       	call   c0003fca <xname_sum>
c0004097:	83 c4 1c             	add    esp,0x1c
c000409a:	0f b7 d0             	movzx  edx,ax
c000409d:	8d 43 24             	lea    eax,[ebx+0x24]
c00040a0:	5b                   	pop    ebx
c00040a1:	5e                   	pop    esi
c00040a2:	5f                   	pop    edi
c00040a3:	5d                   	pop    ebp
c00040a4:	e9 74 dc ff ff       	jmp    c0001d1d <st_word>

c00040a9 <cmp_lfn>:
c00040a9:	55                   	push   ebp
c00040aa:	57                   	push   edi
c00040ab:	89 d7                	mov    edi,edx
c00040ad:	56                   	push   esi
c00040ae:	53                   	push   ebx
c00040af:	83 ec 1c             	sub    esp,0x1c
c00040b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00040b6:	8d 42 1a             	lea    eax,[edx+0x1a]
c00040b9:	e8 ed db ff ff       	call   c0001cab <ld_word>
c00040be:	66 85 c0             	test   ax,ax
c00040c1:	74 07                	je     c00040ca <cmp_lfn+0x21>
c00040c3:	31 c0                	xor    eax,eax
c00040c5:	e9 9a 00 00 00       	jmp    c0004164 <cmp_lfn+0xbb>
c00040ca:	8a 1f                	mov    bl,BYTE PTR [edi]
c00040cc:	bd 01 00 00 00       	mov    ebp,0x1
c00040d1:	83 e3 3f             	and    ebx,0x3f
c00040d4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00040dc:	4b                   	dec    ebx
c00040dd:	6b db 0d             	imul   ebx,ebx,0xd
c00040e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00040e4:	0f b6 80 40 f7 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe08c0]
c00040eb:	01 f8                	add    eax,edi
c00040ed:	e8 b9 db ff ff       	call   c0001cab <ld_word>
c00040f2:	66 85 ed             	test   bp,bp
c00040f5:	89 c6                	mov    esi,eax
c00040f7:	74 3c                	je     c0004135 <cmp_lfn+0x8c>
c00040f9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040ff:	77 c2                	ja     c00040c3 <cmp_lfn+0x1a>
c0004101:	83 ec 0c             	sub    esp,0xc
c0004104:	0f b7 c0             	movzx  eax,ax
c0004107:	50                   	push   eax
c0004108:	e8 fa 44 00 00       	call   c0008607 <ff_wtoupper>
c000410d:	89 c5                	mov    ebp,eax
c000410f:	8d 43 01             	lea    eax,[ebx+0x1]
c0004112:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004116:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000411a:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000411e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004121:	e8 e1 44 00 00       	call   c0008607 <ff_wtoupper>
c0004126:	83 c4 10             	add    esp,0x10
c0004129:	39 c5                	cmp    ebp,eax
c000412b:	75 96                	jne    c00040c3 <cmp_lfn+0x1a>
c000412d:	89 f5                	mov    ebp,esi
c000412f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0004133:	eb 04                	jmp    c0004139 <cmp_lfn+0x90>
c0004135:	66 46                	inc    si
c0004137:	75 8a                	jne    c00040c3 <cmp_lfn+0x1a>
c0004139:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c000413d:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0004142:	75 9c                	jne    c00040e0 <cmp_lfn+0x37>
c0004144:	f6 07 40             	test   BYTE PTR [edi],0x40
c0004147:	74 16                	je     c000415f <cmp_lfn+0xb6>
c0004149:	66 85 ed             	test   bp,bp
c000414c:	74 11                	je     c000415f <cmp_lfn+0xb6>
c000414e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004152:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004157:	0f 94 c0             	sete   al
c000415a:	0f b6 c0             	movzx  eax,al
c000415d:	eb 05                	jmp    c0004164 <cmp_lfn+0xbb>
c000415f:	b8 01 00 00 00       	mov    eax,0x1
c0004164:	83 c4 1c             	add    esp,0x1c
c0004167:	5b                   	pop    ebx
c0004168:	5e                   	pop    esi
c0004169:	5f                   	pop    edi
c000416a:	5d                   	pop    ebp
c000416b:	c3                   	ret    

c000416c <dir_find>:
c000416c:	55                   	push   ebp
c000416d:	31 d2                	xor    edx,edx
c000416f:	57                   	push   edi
c0004170:	56                   	push   esi
c0004171:	53                   	push   ebx
c0004172:	89 c3                	mov    ebx,eax
c0004174:	83 ec 1c             	sub    esp,0x1c
c0004177:	8b 30                	mov    esi,DWORD PTR [eax]
c0004179:	e8 89 f0 ff ff       	call   c0003207 <dir_sdi>
c000417e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004181:	85 c0                	test   eax,eax
c0004183:	0f 85 9e 01 00 00    	jne    c0004327 <dir_find+0x1bb>
c0004189:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000418c:	0f 85 8d 00 00 00    	jne    c000421f <dir_find+0xb3>
c0004192:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004195:	e8 30 fe ff ff       	call   c0003fca <xname_sum>
c000419a:	89 c7                	mov    edi,eax
c000419c:	31 d2                	xor    edx,edx
c000419e:	89 d8                	mov    eax,ebx
c00041a0:	e8 72 f8 ff ff       	call   c0003a17 <dir_read>
c00041a5:	85 c0                	test   eax,eax
c00041a7:	0f 85 5e 01 00 00    	jne    c000430b <dir_find+0x19f>
c00041ad:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00041b0:	8d 41 24             	lea    eax,[ecx+0x24]
c00041b3:	e8 f3 da ff ff       	call   c0001cab <ld_word>
c00041b8:	66 39 f8             	cmp    ax,di
c00041bb:	75 df                	jne    c000419c <dir_find+0x30>
c00041bd:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c00041c0:	31 ed                	xor    ebp,ebp
c00041c2:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00041c6:	ba 40 00 00 00       	mov    edx,0x40
c00041cb:	89 e9                	mov    ecx,ebp
c00041cd:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c00041d1:	0f 84 42 01 00 00    	je     c0004319 <dir_find+0x1ad>
c00041d7:	f6 c2 1f             	test   dl,0x1f
c00041da:	75 03                	jne    c00041df <dir_find+0x73>
c00041dc:	83 c2 02             	add    edx,0x2
c00041df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00041e3:	89 d0                	mov    eax,edx
c00041e5:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00041e8:	e8 be da ff ff       	call   c0001cab <ld_word>
c00041ed:	83 ec 0c             	sub    esp,0xc
c00041f0:	0f b7 c0             	movzx  eax,ax
c00041f3:	50                   	push   eax
c00041f4:	e8 0e 44 00 00       	call   c0008607 <ff_wtoupper>
c00041f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041fd:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004200:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004204:	89 04 24             	mov    DWORD PTR [esp],eax
c0004207:	e8 fb 43 00 00       	call   c0008607 <ff_wtoupper>
c000420c:	83 c4 10             	add    esp,0x10
c000420f:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0004213:	75 87                	jne    c000419c <dir_find+0x30>
c0004215:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004219:	45                   	inc    ebp
c000421a:	83 c2 02             	add    edx,0x2
c000421d:	eb ac                	jmp    c00041cb <dir_find+0x5f>
c000421f:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004226:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c000422b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004230:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004233:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004236:	89 f0                	mov    eax,esi
c0004238:	e8 4c e2 ff ff       	call   c0002489 <move_window>
c000423d:	85 c0                	test   eax,eax
c000423f:	0f 85 c6 00 00 00    	jne    c000430b <dir_find+0x19f>
c0004245:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004248:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c000424b:	84 c9                	test   cl,cl
c000424d:	0f 84 bd 00 00 00    	je     c0004310 <dir_find+0x1a4>
c0004253:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004256:	88 d0                	mov    al,dl
c0004258:	83 e0 3f             	and    eax,0x3f
c000425b:	80 f9 e5             	cmp    cl,0xe5
c000425e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004261:	0f 84 87 00 00 00    	je     c00042ee <dir_find+0x182>
c0004267:	80 e2 08             	and    dl,0x8
c000426a:	74 06                	je     c0004272 <dir_find+0x106>
c000426c:	3c 0f                	cmp    al,0xf
c000426e:	75 7e                	jne    c00042ee <dir_find+0x182>
c0004270:	eb 04                	jmp    c0004276 <dir_find+0x10a>
c0004272:	3c 0f                	cmp    al,0xf
c0004274:	75 4c                	jne    c00042c2 <dir_find+0x156>
c0004276:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000427a:	75 7e                	jne    c00042fa <dir_find+0x18e>
c000427c:	f6 c1 40             	test   cl,0x40
c000427f:	74 12                	je     c0004293 <dir_find+0x127>
c0004281:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004284:	83 e1 bf             	and    ecx,0xffffffbf
c0004287:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000428b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000428e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004291:	eb 06                	jmp    c0004299 <dir_find+0x12d>
c0004293:	89 f8                	mov    eax,edi
c0004295:	38 c8                	cmp    al,cl
c0004297:	75 5c                	jne    c00042f5 <dir_find+0x189>
c0004299:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000429d:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042a2:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c00042a5:	75 53                	jne    c00042fa <dir_find+0x18e>
c00042a7:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c00042ab:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042ae:	89 ea                	mov    edx,ebp
c00042b0:	e8 f4 fd ff ff       	call   c00040a9 <cmp_lfn>
c00042b5:	85 c0                	test   eax,eax
c00042b7:	74 41                	je     c00042fa <dir_find+0x18e>
c00042b9:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c00042bd:	8d 79 ff             	lea    edi,[ecx-0x1]
c00042c0:	eb 38                	jmp    c00042fa <dir_find+0x18e>
c00042c2:	89 f8                	mov    eax,edi
c00042c4:	84 c0                	test   al,al
c00042c6:	75 0d                	jne    c00042d5 <dir_find+0x169>
c00042c8:	89 e8                	mov    eax,ebp
c00042ca:	e8 98 de ff ff       	call   c0002167 <sum_sfn>
c00042cf:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c00042d3:	74 52                	je     c0004327 <dir_find+0x1bb>
c00042d5:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c00042d9:	75 13                	jne    c00042ee <dir_find+0x182>
c00042db:	8d 53 3c             	lea    edx,[ebx+0x3c]
c00042de:	b9 0b 00 00 00       	mov    ecx,0xb
c00042e3:	89 e8                	mov    eax,ebp
c00042e5:	e8 60 da ff ff       	call   c0001d4a <mem_cmp>
c00042ea:	85 c0                	test   eax,eax
c00042ec:	74 39                	je     c0004327 <dir_find+0x1bb>
c00042ee:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042f5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042fa:	31 d2                	xor    edx,edx
c00042fc:	89 d8                	mov    eax,ebx
c00042fe:	e8 5c f4 ff ff       	call   c000375f <dir_next>
c0004303:	85 c0                	test   eax,eax
c0004305:	0f 84 25 ff ff ff    	je     c0004230 <dir_find+0xc4>
c000430b:	89 04 24             	mov    DWORD PTR [esp],eax
c000430e:	eb 17                	jmp    c0004327 <dir_find+0x1bb>
c0004310:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004317:	eb 0e                	jmp    c0004327 <dir_find+0x1bb>
c0004319:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000431c:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004321:	0f 85 75 fe ff ff    	jne    c000419c <dir_find+0x30>
c0004327:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000432a:	83 c4 1c             	add    esp,0x1c
c000432d:	5b                   	pop    ebx
c000432e:	5e                   	pop    esi
c000432f:	5f                   	pop    edi
c0004330:	5d                   	pop    ebp
c0004331:	c3                   	ret    

c0004332 <dir_register>:
c0004332:	55                   	push   ebp
c0004333:	57                   	push   edi
c0004334:	56                   	push   esi
c0004335:	be 06 00 00 00       	mov    esi,0x6
c000433a:	53                   	push   ebx
c000433b:	83 ec 6c             	sub    esp,0x6c
c000433e:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004342:	0f 85 62 02 00 00    	jne    c00045aa <dir_register+0x278>
c0004348:	8b 28                	mov    ebp,DWORD PTR [eax]
c000434a:	31 ff                	xor    edi,edi
c000434c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000434f:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004354:	74 03                	je     c0004359 <dir_register+0x27>
c0004356:	47                   	inc    edi
c0004357:	eb f6                	jmp    c000434f <dir_register+0x1d>
c0004359:	89 c3                	mov    ebx,eax
c000435b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000435f:	0f 85 e1 00 00 00    	jne    c0004446 <dir_register+0x114>
c0004365:	83 c7 0e             	add    edi,0xe
c0004368:	b9 0f 00 00 00       	mov    ecx,0xf
c000436d:	89 f8                	mov    eax,edi
c000436f:	31 d2                	xor    edx,edx
c0004371:	f7 f1                	div    ecx
c0004373:	8d 50 02             	lea    edx,[eax+0x2]
c0004376:	89 c7                	mov    edi,eax
c0004378:	89 d8                	mov    eax,ebx
c000437a:	e8 12 f8 ff ff       	call   c0003b91 <dir_alloc>
c000437f:	89 c6                	mov    esi,eax
c0004381:	85 c0                	test   eax,eax
c0004383:	0f 85 21 02 00 00    	jne    c00045aa <dir_register+0x278>
c0004389:	81 c7 01 00 00 08    	add    edi,0x8000001
c000438f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004392:	c1 e7 05             	shl    edi,0x5
c0004395:	29 f8                	sub    eax,edi
c0004397:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000439a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000439d:	a8 04                	test   al,0x4
c000439f:	0f 84 91 00 00 00    	je     c0004436 <dir_register+0x104>
c00043a5:	83 e0 fb             	and    eax,0xfffffffb
c00043a8:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00043ab:	89 d8                	mov    eax,ebx
c00043ad:	e8 25 ec ff ff       	call   c0002fd7 <fill_first_frag>
c00043b2:	85 c0                	test   eax,eax
c00043b4:	0f 85 ee 01 00 00    	jne    c00045a8 <dir_register+0x276>
c00043ba:	83 c9 ff             	or     ecx,0xffffffff
c00043bd:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00043c0:	89 d8                	mov    eax,ebx
c00043c2:	e8 db eb ff ff       	call   c0002fa2 <fill_last_frag>
c00043c7:	85 c0                	test   eax,eax
c00043c9:	0f 85 d9 01 00 00    	jne    c00045a8 <dir_register+0x276>
c00043cf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00043d3:	74 61                	je     c0004436 <dir_register+0x104>
c00043d5:	89 da                	mov    edx,ebx
c00043d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043db:	e8 ea f5 ff ff       	call   c00039ca <load_obj_xdir>
c00043e0:	85 c0                	test   eax,eax
c00043e2:	0f 85 c0 01 00 00    	jne    c00045a8 <dir_register+0x276>
c00043e8:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043ec:	31 c9                	xor    ecx,ecx
c00043ee:	c1 e2 09             	shl    edx,0x9
c00043f1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043f4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043f7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043fa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043fd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004400:	83 c0 38             	add    eax,0x38
c0004403:	e8 1c d9 ff ff       	call   c0001d24 <st_qword>
c0004408:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000440b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000440e:	83 c0 28             	add    eax,0x28
c0004411:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004414:	e8 0b d9 ff ff       	call   c0001d24 <st_qword>
c0004419:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000441c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000441f:	83 c8 01             	or     eax,0x1
c0004422:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c0004425:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004429:	e8 db f7 ff ff       	call   c0003c09 <store_xdir>
c000442e:	85 c0                	test   eax,eax
c0004430:	0f 85 72 01 00 00    	jne    c00045a8 <dir_register+0x276>
c0004436:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004439:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000443c:	e8 c1 fb ff ff       	call   c0004002 <create_xdir>
c0004441:	e9 64 01 00 00       	jmp    c00045aa <dir_register+0x278>
c0004446:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004449:	b9 0c 00 00 00       	mov    ecx,0xc
c000444e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004452:	89 c2                	mov    edx,eax
c0004454:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004458:	e8 cd d8 ff ff       	call   c0001d2a <mem_cpy>
c000445d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004462:	74 58                	je     c00044bc <dir_register+0x18a>
c0004464:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004468:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004470:	83 ec 0c             	sub    esp,0xc
c0004473:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004476:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000447a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000447e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004482:	e8 24 dc ff ff       	call   c00020ab <gen_numname>
c0004487:	89 d8                	mov    eax,ebx
c0004489:	e8 de fc ff ff       	call   c000416c <dir_find>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	89 c6                	mov    esi,eax
c0004493:	85 c0                	test   eax,eax
c0004495:	75 15                	jne    c00044ac <dir_register+0x17a>
c0004497:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000449b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c00044a0:	75 ce                	jne    c0004470 <dir_register+0x13e>
c00044a2:	be 07 00 00 00       	mov    esi,0x7
c00044a7:	e9 fe 00 00 00       	jmp    c00045aa <dir_register+0x278>
c00044ac:	83 f8 04             	cmp    eax,0x4
c00044af:	0f 85 f5 00 00 00    	jne    c00045aa <dir_register+0x278>
c00044b5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00044b9:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c00044bc:	b9 01 00 00 00       	mov    ecx,0x1
c00044c1:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00044c6:	74 0f                	je     c00044d7 <dir_register+0x1a5>
c00044c8:	b9 0d 00 00 00       	mov    ecx,0xd
c00044cd:	8d 47 0c             	lea    eax,[edi+0xc]
c00044d0:	31 d2                	xor    edx,edx
c00044d2:	f7 f1                	div    ecx
c00044d4:	8d 48 01             	lea    ecx,[eax+0x1]
c00044d7:	89 ca                	mov    edx,ecx
c00044d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044dd:	89 d8                	mov    eax,ebx
c00044df:	e8 ad f6 ff ff       	call   c0003b91 <dir_alloc>
c00044e4:	89 c6                	mov    esi,eax
c00044e6:	85 c0                	test   eax,eax
c00044e8:	0f 85 bc 00 00 00    	jne    c00045aa <dir_register+0x278>
c00044ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044f2:	49                   	dec    ecx
c00044f3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044f7:	74 6a                	je     c0004563 <dir_register+0x231>
c00044f9:	89 c8                	mov    eax,ecx
c00044fb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044fe:	c1 e0 05             	shl    eax,0x5
c0004501:	29 c2                	sub    edx,eax
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 fd ec ff ff       	call   c0003207 <dir_sdi>
c000450a:	89 c6                	mov    esi,eax
c000450c:	85 c0                	test   eax,eax
c000450e:	0f 85 96 00 00 00    	jne    c00045aa <dir_register+0x278>
c0004514:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004518:	e8 4a dc ff ff       	call   c0002167 <sum_sfn>
c000451d:	0f b6 f8             	movzx  edi,al
c0004520:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004523:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004526:	89 e8                	mov    eax,ebp
c0004528:	e8 5c df ff ff       	call   c0002489 <move_window>
c000452d:	89 c6                	mov    esi,eax
c000452f:	85 c0                	test   eax,eax
c0004531:	75 77                	jne    c00045aa <dir_register+0x278>
c0004533:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0004538:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000453b:	83 ec 0c             	sub    esp,0xc
c000453e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004541:	57                   	push   edi
c0004542:	e8 e0 da ff ff       	call   c0002027 <put_lfn>
c0004547:	31 d2                	xor    edx,edx
c0004549:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000454d:	89 d8                	mov    eax,ebx
c000454f:	e8 0b f2 ff ff       	call   c000375f <dir_next>
c0004554:	83 c4 10             	add    esp,0x10
c0004557:	89 c6                	mov    esi,eax
c0004559:	85 c0                	test   eax,eax
c000455b:	75 4d                	jne    c00045aa <dir_register+0x278>
c000455d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004561:	75 bd                	jne    c0004520 <dir_register+0x1ee>
c0004563:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004566:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004569:	89 e8                	mov    eax,ebp
c000456b:	e8 19 df ff ff       	call   c0002489 <move_window>
c0004570:	89 c6                	mov    esi,eax
c0004572:	85 c0                	test   eax,eax
c0004574:	75 34                	jne    c00045aa <dir_register+0x278>
c0004576:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004579:	b9 20 00 00 00       	mov    ecx,0x20
c000457e:	31 d2                	xor    edx,edx
c0004580:	e8 ba d7 ff ff       	call   c0001d3f <mem_set>
c0004585:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004588:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000458c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004591:	e8 94 d7 ff ff       	call   c0001d2a <mem_cpy>
c0004596:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004599:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000459c:	83 e0 18             	and    eax,0x18
c000459f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c00045a2:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00045a6:	eb 02                	jmp    c00045aa <dir_register+0x278>
c00045a8:	89 c6                	mov    esi,eax
c00045aa:	83 c4 6c             	add    esp,0x6c
c00045ad:	89 f0                	mov    eax,esi
c00045af:	5b                   	pop    ebx
c00045b0:	5e                   	pop    esi
c00045b1:	5f                   	pop    edi
c00045b2:	5d                   	pop    ebp
c00045b3:	c3                   	ret    

c00045b4 <sync_fs>:
c00045b4:	56                   	push   esi
c00045b5:	53                   	push   ebx
c00045b6:	53                   	push   ebx
c00045b7:	89 c3                	mov    ebx,eax
c00045b9:	e8 37 de ff ff       	call   c00023f5 <sync_window>
c00045be:	85 c0                	test   eax,eax
c00045c0:	0f 85 b1 00 00 00    	jne    c0004677 <sync_fs+0xc3>
c00045c6:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00045c9:	0f 85 8e 00 00 00    	jne    c000465d <sync_fs+0xa9>
c00045cf:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00045d3:	0f 85 84 00 00 00    	jne    c000465d <sync_fs+0xa9>
c00045d9:	b9 00 02 00 00       	mov    ecx,0x200
c00045de:	8d 73 54             	lea    esi,[ebx+0x54]
c00045e1:	31 d2                	xor    edx,edx
c00045e3:	89 f0                	mov    eax,esi
c00045e5:	e8 55 d7 ff ff       	call   c0001d3f <mem_set>
c00045ea:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045f0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045f5:	e8 23 d7 ff ff       	call   c0001d1d <st_word>
c00045fa:	ba 52 52 61 41       	mov    edx,0x41615252
c00045ff:	89 f0                	mov    eax,esi
c0004601:	e8 1b d7 ff ff       	call   c0001d21 <st_dword>
c0004606:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c000460c:	ba 72 72 41 61       	mov    edx,0x61417272
c0004611:	e8 0b d7 ff ff       	call   c0001d21 <st_dword>
c0004616:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004619:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000461f:	e8 fd d6 ff ff       	call   c0001d21 <st_dword>
c0004624:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004627:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c000462d:	e8 ef d6 ff ff       	call   c0001d21 <st_dword>
c0004632:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004635:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004638:	83 c0 01             	add    eax,0x1
c000463b:	83 d2 00             	adc    edx,0x0
c000463e:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004641:	83 ec 0c             	sub    esp,0xc
c0004644:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004647:	6a 01                	push   0x1
c0004649:	52                   	push   edx
c000464a:	50                   	push   eax
c000464b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000464f:	56                   	push   esi
c0004650:	50                   	push   eax
c0004651:	e8 20 d6 ff ff       	call   c0001c76 <disk_write>
c0004656:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000465a:	83 c4 20             	add    esp,0x20
c000465d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004661:	51                   	push   ecx
c0004662:	6a 00                	push   0x0
c0004664:	6a 00                	push   0x0
c0004666:	50                   	push   eax
c0004667:	e8 20 d6 ff ff       	call   c0001c8c <disk_ioctl>
c000466c:	83 c4 10             	add    esp,0x10
c000466f:	85 c0                	test   eax,eax
c0004671:	0f 95 c0             	setne  al
c0004674:	0f b6 c0             	movzx  eax,al
c0004677:	5a                   	pop    edx
c0004678:	5b                   	pop    ebx
c0004679:	5e                   	pop    esi
c000467a:	c3                   	ret    

c000467b <create_partition>:
c000467b:	55                   	push   ebp
c000467c:	0f b6 c0             	movzx  eax,al
c000467f:	57                   	push   edi
c0004680:	56                   	push   esi
c0004681:	53                   	push   ebx
c0004682:	83 ec 60             	sub    esp,0x60
c0004685:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004689:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000468d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004691:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004695:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004699:	50                   	push   eax
c000469a:	6a 01                	push   0x1
c000469c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00046a0:	e8 e7 d5 ff ff       	call   c0001c8c <disk_ioctl>
c00046a5:	83 c4 10             	add    esp,0x10
c00046a8:	85 c0                	test   eax,eax
c00046aa:	74 0a                	je     c00046b6 <create_partition+0x3b>
c00046ac:	b8 01 00 00 00       	mov    eax,0x1
c00046b1:	e9 67 05 00 00       	jmp    c0004c1d <create_partition+0x5a2>
c00046b6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046ba:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00046be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00046c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00046c6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00046cb:	0f 86 ed 03 00 00    	jbe    c0004abe <create_partition+0x443>
c00046d1:	83 c0 df             	add    eax,0xffffffdf
c00046d4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00046dc:	83 d2 ff             	adc    edx,0xffffffff
c00046df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00046e3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00046e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046ef:	83 c0 bd             	add    eax,0xffffffbd
c00046f2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046f9:	83 d2 ff             	adc    edx,0xffffffff
c00046fc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004700:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004704:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000470c:	be 22 00 00 00       	mov    esi,0x22
c0004711:	31 ff                	xor    edi,edi
c0004713:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c000471b:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004723:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000472b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000472f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004735:	75 0e                	jne    c0004745 <create_partition+0xca>
c0004737:	b9 00 02 00 00       	mov    ecx,0x200
c000473c:	31 d2                	xor    edx,edx
c000473e:	89 d8                	mov    eax,ebx
c0004740:	e8 fa d5 ff ff       	call   c0001d3f <mem_set>
c0004745:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004749:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000474d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004751:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004754:	0f 84 23 01 00 00    	je     c000487d <create_partition+0x202>
c000475a:	89 f0                	mov    eax,esi
c000475c:	89 fa                	mov    edx,edi
c000475e:	05 ff 07 00 00       	add    eax,0x7ff
c0004763:	83 d2 00             	adc    edx,0x0
c0004766:	89 c1                	mov    ecx,eax
c0004768:	89 d7                	mov    edi,edx
c000476a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004770:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004774:	89 ce                	mov    esi,ecx
c0004776:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000477a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000477e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004782:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004785:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004789:	89 04 24             	mov    DWORD PTR [esp],eax
c000478c:	b8 64 00 00 00       	mov    eax,0x64
c0004791:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004794:	b8 00 00 00 00       	mov    eax,0x0
c0004799:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000479d:	72 41                	jb     c00047e0 <create_partition+0x165>
c000479f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00047a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a7:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c00047ab:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00047b0:	01 c1                	add    ecx,eax
c00047b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00047b6:	f7 24 24             	mul    DWORD PTR [esp]
c00047b9:	6a 00                	push   0x0
c00047bb:	01 ca                	add    edx,ecx
c00047bd:	6a 64                	push   0x64
c00047bf:	52                   	push   edx
c00047c0:	50                   	push   eax
c00047c1:	e8 f6 9e 01 00       	call   c001e6bc <__udivdi3>
c00047c6:	83 c4 10             	add    esp,0x10
c00047c9:	05 ff 07 00 00       	add    eax,0x7ff
c00047ce:	83 d2 00             	adc    edx,0x0
c00047d1:	89 c1                	mov    ecx,eax
c00047d3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047d7:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00047dd:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00047e0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00047e7:	01 f0                	add    eax,esi
c00047e9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047ed:	11 fa                	adc    edx,edi
c00047ef:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047f3:	19 d1                	sbb    ecx,edx
c00047f5:	73 2e                	jae    c0004825 <create_partition+0x1aa>
c00047f7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047fb:	89 f8                	mov    eax,edi
c00047fd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004804:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004808:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004810:	73 6b                	jae    c000487d <create_partition+0x202>
c0004812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004816:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000481a:	29 f0                	sub    eax,esi
c000481c:	19 fa                	sbb    edx,edi
c000481e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004821:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004829:	0b 04 24             	or     eax,DWORD PTR [esp]
c000482c:	74 4f                	je     c000487d <create_partition+0x202>
c000482e:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004831:	b9 10 00 00 00       	mov    ecx,0x10
c0004836:	ba 50 f7 01 c0       	mov    edx,0xc001f750
c000483b:	e8 ea d4 ff ff       	call   c0001d2a <mem_cpy>
c0004840:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004844:	b9 10 00 00 00       	mov    ecx,0x10
c0004849:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000484d:	e8 2c db ff ff       	call   c000237e <make_rand>
c0004852:	89 f2                	mov    edx,esi
c0004854:	89 f9                	mov    ecx,edi
c0004856:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000485a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000485e:	e8 c1 d4 ff ff       	call   c0001d24 <st_qword>
c0004863:	03 34 24             	add    esi,DWORD PTR [esp]
c0004866:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000486a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000486e:	89 f2                	mov    edx,esi
c0004870:	89 f9                	mov    ecx,edi
c0004872:	83 c2 ff             	add    edx,0xffffffff
c0004875:	83 d1 ff             	adc    ecx,0xffffffff
c0004878:	e8 a7 d4 ff ff       	call   c0001d24 <st_qword>
c000487d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004881:	83 e8 80             	sub    eax,0xffffff80
c0004884:	89 c5                	mov    ebp,eax
c0004886:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000488a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004890:	75 6b                	jne    c00048fd <create_partition+0x282>
c0004892:	45                   	inc    ebp
c0004893:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004897:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000489c:	e8 39 da ff ff       	call   c00022da <crc32>
c00048a1:	81 fd 00 02 00 00    	cmp    ebp,0x200
c00048a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00048ab:	75 e5                	jne    c0004892 <create_partition+0x217>
c00048ad:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00048b1:	31 d2                	xor    edx,edx
c00048b3:	83 ec 0c             	sub    esp,0xc
c00048b6:	c1 ed 09             	shr    ebp,0x9
c00048b9:	6a 01                	push   0x1
c00048bb:	8d 45 02             	lea    eax,[ebp+0x2]
c00048be:	52                   	push   edx
c00048bf:	50                   	push   eax
c00048c0:	53                   	push   ebx
c00048c1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048c5:	e8 ac d3 ff ff       	call   c0001c76 <disk_write>
c00048ca:	83 c4 20             	add    esp,0x20
c00048cd:	85 c0                	test   eax,eax
c00048cf:	0f 85 d7 fd ff ff    	jne    c00046ac <create_partition+0x31>
c00048d5:	83 ec 0c             	sub    esp,0xc
c00048d8:	31 d2                	xor    edx,edx
c00048da:	6a 01                	push   0x1
c00048dc:	89 e8                	mov    eax,ebp
c00048de:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00048e2:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00048e6:	52                   	push   edx
c00048e7:	50                   	push   eax
c00048e8:	53                   	push   ebx
c00048e9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048ed:	e8 84 d3 ff ff       	call   c0001c76 <disk_write>
c00048f2:	83 c4 20             	add    esp,0x20
c00048f5:	85 c0                	test   eax,eax
c00048f7:	0f 85 af fd ff ff    	jne    c00046ac <create_partition+0x31>
c00048fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004901:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004905:	3d 00 40 00 00       	cmp    eax,0x4000
c000490a:	74 0d                	je     c0004919 <create_partition+0x29e>
c000490c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004910:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004914:	e9 12 fe ff ff       	jmp    c000472b <create_partition+0xb0>
c0004919:	31 d2                	xor    edx,edx
c000491b:	b9 00 02 00 00       	mov    ecx,0x200
c0004920:	89 d8                	mov    eax,ebx
c0004922:	8d 6b 20             	lea    ebp,[ebx+0x20]
c0004925:	e8 15 d4 ff ff       	call   c0001d3f <mem_set>
c000492a:	8d 7b 48             	lea    edi,[ebx+0x48]
c000492d:	b9 10 00 00 00       	mov    ecx,0x10
c0004932:	ba 40 f6 01 c0       	mov    edx,0xc001f640
c0004937:	89 d8                	mov    eax,ebx
c0004939:	e8 ec d3 ff ff       	call   c0001d2a <mem_cpy>
c000493e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004942:	8d 43 58             	lea    eax,[ebx+0x58]
c0004945:	f7 d2                	not    edx
c0004947:	e8 d5 d3 ff ff       	call   c0001d21 <st_dword>
c000494c:	8d 43 18             	lea    eax,[ebx+0x18]
c000494f:	31 c9                	xor    ecx,ecx
c0004951:	89 04 24             	mov    DWORD PTR [esp],eax
c0004954:	ba 01 00 00 00       	mov    edx,0x1
c0004959:	e8 c6 d3 ff ff       	call   c0001d24 <st_qword>
c000495e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004962:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004966:	83 c2 ff             	add    edx,0xffffffff
c0004969:	89 e8                	mov    eax,ebp
c000496b:	83 d1 ff             	adc    ecx,0xffffffff
c000496e:	e8 b1 d3 ff ff       	call   c0001d24 <st_qword>
c0004973:	31 c9                	xor    ecx,ecx
c0004975:	8d 43 28             	lea    eax,[ebx+0x28]
c0004978:	ba 22 00 00 00       	mov    edx,0x22
c000497d:	e8 a2 d3 ff ff       	call   c0001d24 <st_qword>
c0004982:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004986:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000498a:	83 c2 de             	add    edx,0xffffffde
c000498d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004990:	83 d1 ff             	adc    ecx,0xffffffff
c0004993:	31 f6                	xor    esi,esi
c0004995:	e8 8a d3 ff ff       	call   c0001d24 <st_qword>
c000499a:	8d 43 54             	lea    eax,[ebx+0x54]
c000499d:	ba 80 00 00 00       	mov    edx,0x80
c00049a2:	e8 7a d3 ff ff       	call   c0001d21 <st_dword>
c00049a7:	8d 43 50             	lea    eax,[ebx+0x50]
c00049aa:	ba 80 00 00 00       	mov    edx,0x80
c00049af:	e8 6d d3 ff ff       	call   c0001d21 <st_dword>
c00049b4:	ba 02 00 00 00       	mov    edx,0x2
c00049b9:	89 f8                	mov    eax,edi
c00049bb:	e8 61 d3 ff ff       	call   c0001d21 <st_dword>
c00049c0:	8d 53 38             	lea    edx,[ebx+0x38]
c00049c3:	b9 10 00 00 00       	mov    ecx,0x10
c00049c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00049cc:	e8 ad d9 ff ff       	call   c000237e <make_rand>
c00049d1:	83 c8 ff             	or     eax,0xffffffff
c00049d4:	46                   	inc    esi
c00049d5:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00049da:	e8 fb d8 ff ff       	call   c00022da <crc32>
c00049df:	83 fe 5c             	cmp    esi,0x5c
c00049e2:	75 f0                	jne    c00049d4 <create_partition+0x359>
c00049e4:	f7 d0                	not    eax
c00049e6:	8d 73 10             	lea    esi,[ebx+0x10]
c00049e9:	89 c2                	mov    edx,eax
c00049eb:	89 f0                	mov    eax,esi
c00049ed:	e8 2f d3 ff ff       	call   c0001d21 <st_dword>
c00049f2:	83 ec 0c             	sub    esp,0xc
c00049f5:	6a 01                	push   0x1
c00049f7:	6a 00                	push   0x0
c00049f9:	6a 01                	push   0x1
c00049fb:	53                   	push   ebx
c00049fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a00:	e8 71 d2 ff ff       	call   c0001c76 <disk_write>
c0004a05:	83 c4 20             	add    esp,0x20
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 9c fc ff ff    	jne    c00046ac <create_partition+0x31>
c0004a10:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004a14:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004a18:	83 c2 ff             	add    edx,0xffffffff
c0004a1b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a1e:	83 d1 ff             	adc    ecx,0xffffffff
c0004a21:	e8 fe d2 ff ff       	call   c0001d24 <st_qword>
c0004a26:	ba 01 00 00 00       	mov    edx,0x1
c0004a2b:	31 c9                	xor    ecx,ecx
c0004a2d:	89 e8                	mov    eax,ebp
c0004a2f:	e8 f0 d2 ff ff       	call   c0001d24 <st_qword>
c0004a34:	89 f8                	mov    eax,edi
c0004a36:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0004a3a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004a3e:	31 ff                	xor    edi,edi
c0004a40:	e8 df d2 ff ff       	call   c0001d24 <st_qword>
c0004a45:	89 f0                	mov    eax,esi
c0004a47:	31 d2                	xor    edx,edx
c0004a49:	e8 d3 d2 ff ff       	call   c0001d21 <st_dword>
c0004a4e:	83 c8 ff             	or     eax,0xffffffff
c0004a51:	47                   	inc    edi
c0004a52:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a57:	e8 7e d8 ff ff       	call   c00022da <crc32>
c0004a5c:	83 ff 5c             	cmp    edi,0x5c
c0004a5f:	75 f0                	jne    c0004a51 <create_partition+0x3d6>
c0004a61:	f7 d0                	not    eax
c0004a63:	89 c2                	mov    edx,eax
c0004a65:	89 f0                	mov    eax,esi
c0004a67:	e8 b5 d2 ff ff       	call   c0001d21 <st_dword>
c0004a6c:	83 ec 0c             	sub    esp,0xc
c0004a6f:	6a 01                	push   0x1
c0004a71:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a75:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a79:	83 c0 ff             	add    eax,0xffffffff
c0004a7c:	83 d2 ff             	adc    edx,0xffffffff
c0004a7f:	52                   	push   edx
c0004a80:	50                   	push   eax
c0004a81:	53                   	push   ebx
c0004a82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a86:	e8 eb d1 ff ff       	call   c0001c76 <disk_write>
c0004a8b:	83 c4 20             	add    esp,0x20
c0004a8e:	85 c0                	test   eax,eax
c0004a90:	0f 85 16 fc ff ff    	jne    c00046ac <create_partition+0x31>
c0004a96:	31 d2                	xor    edx,edx
c0004a98:	89 d8                	mov    eax,ebx
c0004a9a:	b9 00 02 00 00       	mov    ecx,0x200
c0004a9f:	e8 9b d2 ff ff       	call   c0001d3f <mem_set>
c0004aa4:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004aaa:	b9 10 00 00 00       	mov    ecx,0x10
c0004aaf:	ba 50 f6 01 c0       	mov    edx,0xc001f650
c0004ab4:	e8 71 d2 ff ff       	call   c0001d2a <mem_cpy>
c0004ab9:	e9 21 01 00 00       	jmp    c0004bdf <create_partition+0x564>
c0004abe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004ac2:	b9 05 00 00 00       	mov    ecx,0x5
c0004ac7:	89 04 24             	mov    DWORD PTR [esp],eax
c0004aca:	bf 08 00 00 00       	mov    edi,0x8
c0004acf:	89 f8                	mov    eax,edi
c0004ad1:	31 d2                	xor    edx,edx
c0004ad3:	0f b6 f0             	movzx  esi,al
c0004ad6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004ad9:	f7 f6                	div    esi
c0004adb:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004ae0:	76 0a                	jbe    c0004aec <create_partition+0x471>
c0004ae2:	d1 e7                	shl    edi,1
c0004ae4:	49                   	dec    ecx
c0004ae5:	75 e8                	jne    c0004acf <create_partition+0x454>
c0004ae7:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aec:	b9 00 02 00 00       	mov    ecx,0x200
c0004af1:	31 d2                	xor    edx,edx
c0004af3:	89 d8                	mov    eax,ebx
c0004af5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004afb:	e8 3f d2 ff ff       	call   c0001d3f <mem_set>
c0004b00:	b9 64 00 00 00       	mov    ecx,0x64
c0004b05:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004b08:	31 d2                	xor    edx,edx
c0004b0a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004b12:	f7 f1                	div    ecx
c0004b14:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004b19:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004b1d:	89 f8                	mov    eax,edi
c0004b1f:	0f b6 c0             	movzx  eax,al
c0004b22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004b26:	e9 80 00 00 00       	jmp    c0004bab <create_partition+0x530>
c0004b2b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b2e:	29 cf                	sub    edi,ecx
c0004b30:	89 ca                	mov    edx,ecx
c0004b32:	89 f0                	mov    eax,esi
c0004b34:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b39:	e8 e3 d1 ff ff       	call   c0001d21 <st_dword>
c0004b3e:	8d 46 04             	lea    eax,[esi+0x4]
c0004b41:	89 fa                	mov    edx,edi
c0004b43:	83 c6 10             	add    esi,0x10
c0004b46:	e8 d6 d1 ff ff       	call   c0001d21 <st_dword>
c0004b4b:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b4f:	31 d2                	xor    edx,edx
c0004b51:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b54:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b58:	89 c8                	mov    eax,ecx
c0004b5a:	01 f9                	add    ecx,edi
c0004b5c:	f7 f5                	div    ebp
c0004b5e:	89 d5                	mov    ebp,edx
c0004b60:	31 d2                	xor    edx,edx
c0004b62:	45                   	inc    ebp
c0004b63:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b67:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b6a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b6d:	89 c2                	mov    edx,eax
c0004b6f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b72:	c1 ea 02             	shr    edx,0x2
c0004b75:	83 e2 c0             	and    edx,0xffffffc0
c0004b78:	09 ea                	or     edx,ebp
c0004b7a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b7f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b82:	31 d2                	xor    edx,edx
c0004b84:	f7 f5                	div    ebp
c0004b86:	89 d7                	mov    edi,edx
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	47                   	inc    edi
c0004b8b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b8f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b92:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b95:	89 c5                	mov    ebp,eax
c0004b97:	c1 ed 02             	shr    ebp,0x2
c0004b9a:	83 e5 c0             	and    ebp,0xffffffc0
c0004b9d:	09 ef                	or     edi,ebp
c0004b9f:	89 fa                	mov    edx,edi
c0004ba1:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004ba4:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004ba9:	74 34                	je     c0004bdf <create_partition+0x564>
c0004bab:	85 c9                	test   ecx,ecx
c0004bad:	74 30                	je     c0004bdf <create_partition+0x564>
c0004baf:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004bb2:	76 2b                	jbe    c0004bdf <create_partition+0x564>
c0004bb4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004bb8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004bbc:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004bbf:	83 ff 64             	cmp    edi,0x64
c0004bc2:	76 4b                	jbe    c0004c0f <create_partition+0x594>
c0004bc4:	89 f8                	mov    eax,edi
c0004bc6:	01 c8                	add    eax,ecx
c0004bc8:	0f 82 5d ff ff ff    	jb     c0004b2b <create_partition+0x4b0>
c0004bce:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004bd1:	0f 87 54 ff ff ff    	ja     c0004b2b <create_partition+0x4b0>
c0004bd7:	85 ff                	test   edi,edi
c0004bd9:	0f 85 51 ff ff ff    	jne    c0004b30 <create_partition+0x4b5>
c0004bdf:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004be5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004bea:	e8 2e d1 ff ff       	call   c0001d1d <st_word>
c0004bef:	83 ec 0c             	sub    esp,0xc
c0004bf2:	6a 01                	push   0x1
c0004bf4:	6a 00                	push   0x0
c0004bf6:	6a 00                	push   0x0
c0004bf8:	53                   	push   ebx
c0004bf9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bfd:	e8 74 d0 ff ff       	call   c0001c76 <disk_write>
c0004c02:	83 c4 20             	add    esp,0x20
c0004c05:	85 c0                	test   eax,eax
c0004c07:	0f 95 c0             	setne  al
c0004c0a:	0f b6 c0             	movzx  eax,al
c0004c0d:	eb 0e                	jmp    c0004c1d <create_partition+0x5a2>
c0004c0f:	74 07                	je     c0004c18 <create_partition+0x59d>
c0004c11:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004c16:	eb ac                	jmp    c0004bc4 <create_partition+0x549>
c0004c18:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004c1b:	eb a7                	jmp    c0004bc4 <create_partition+0x549>
c0004c1d:	83 c4 5c             	add    esp,0x5c
c0004c20:	5b                   	pop    ebx
c0004c21:	5e                   	pop    esi
c0004c22:	5f                   	pop    edi
c0004c23:	5d                   	pop    ebp
c0004c24:	c3                   	ret    

c0004c25 <get_fileinfo>:
c0004c25:	55                   	push   ebp
c0004c26:	57                   	push   edi
c0004c27:	56                   	push   esi
c0004c28:	53                   	push   ebx
c0004c29:	83 ec 1c             	sub    esp,0x1c
c0004c2c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c2e:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004c32:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004c36:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004c39:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004c3c:	0f 84 dc 01 00 00    	je     c0004e1e <get_fileinfo+0x1f9>
c0004c42:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004c45:	75 0f                	jne    c0004c56 <get_fileinfo+0x31>
c0004c47:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c4a:	83 c4 1c             	add    esp,0x1c
c0004c4d:	5b                   	pop    ebx
c0004c4e:	5e                   	pop    esi
c0004c4f:	5f                   	pop    edi
c0004c50:	5d                   	pop    ebp
c0004c51:	e9 58 d5 ff ff       	jmp    c00021ae <get_xfileinfo>
c0004c56:	89 d3                	mov    ebx,edx
c0004c58:	89 c6                	mov    esi,eax
c0004c5a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c5e:	74 6a                	je     c0004cca <get_fileinfo+0xa5>
c0004c60:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c68:	31 ed                	xor    ebp,ebp
c0004c6a:	31 ff                	xor    edi,edi
c0004c6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c74:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c77:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c7b:	66 85 d2             	test   dx,dx
c0004c7e:	74 3e                	je     c0004cbe <get_fileinfo+0x99>
c0004c80:	66 85 ed             	test   bp,bp
c0004c83:	75 0c                	jne    c0004c91 <get_fileinfo+0x6c>
c0004c85:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c8b:	66 3d ff 07          	cmp    ax,0x7ff
c0004c8f:	76 22                	jbe    c0004cb3 <get_fileinfo+0x8e>
c0004c91:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c96:	89 e8                	mov    eax,ebp
c0004c98:	29 f9                	sub    ecx,edi
c0004c9a:	c1 e0 10             	shl    eax,0x10
c0004c9d:	09 d0                	or     eax,edx
c0004c9f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004ca3:	e8 a3 d1 ff ff       	call   c0001e4b <put_utf>
c0004ca8:	84 c0                	test   al,al
c0004caa:	74 10                	je     c0004cbc <get_fileinfo+0x97>
c0004cac:	0f b6 c0             	movzx  eax,al
c0004caf:	31 d2                	xor    edx,edx
c0004cb1:	01 c7                	add    edi,eax
c0004cb3:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004cb8:	89 d5                	mov    ebp,edx
c0004cba:	eb b0                	jmp    c0004c6c <get_fileinfo+0x47>
c0004cbc:	31 ff                	xor    edi,edi
c0004cbe:	66 85 ed             	test   bp,bp
c0004cc1:	74 02                	je     c0004cc5 <get_fileinfo+0xa0>
c0004cc3:	31 ff                	xor    edi,edi
c0004cc5:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004cca:	31 ff                	xor    edi,edi
c0004ccc:	31 c9                	xor    ecx,ecx
c0004cce:	83 f9 0a             	cmp    ecx,0xa
c0004cd1:	0f 87 ad 00 00 00    	ja     c0004d84 <get_fileinfo+0x15f>
c0004cd7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cda:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004cdd:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004ce1:	66 83 fa 20          	cmp    dx,0x20
c0004ce5:	0f 84 92 00 00 00    	je     c0004d7d <get_fileinfo+0x158>
c0004ceb:	66 83 fa 05          	cmp    dx,0x5
c0004cef:	75 05                	jne    c0004cf6 <get_fileinfo+0xd1>
c0004cf1:	ba e5 00 00 00       	mov    edx,0xe5
c0004cf6:	83 ff 0b             	cmp    edi,0xb
c0004cf9:	77 0b                	ja     c0004d06 <get_fileinfo+0xe1>
c0004cfb:	83 fd 09             	cmp    ebp,0x9
c0004cfe:	75 06                	jne    c0004d06 <get_fileinfo+0xe1>
c0004d00:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004d05:	47                   	inc    edi
c0004d06:	0f b7 c2             	movzx  eax,dx
c0004d09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d0d:	e8 6d d0 ff ff       	call   c0001d7f <dbc_1st>
c0004d12:	85 c0                	test   eax,eax
c0004d14:	74 2f                	je     c0004d45 <get_fileinfo+0x120>
c0004d16:	83 fd 08             	cmp    ebp,0x8
c0004d19:	74 2a                	je     c0004d45 <get_fileinfo+0x120>
c0004d1b:	83 fd 0b             	cmp    ebp,0xb
c0004d1e:	74 25                	je     c0004d45 <get_fileinfo+0x120>
c0004d20:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d23:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004d27:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004d2b:	e8 52 d0 ff ff       	call   c0001d82 <dbc_2nd>
c0004d30:	85 c0                	test   eax,eax
c0004d32:	74 11                	je     c0004d45 <get_fileinfo+0x120>
c0004d34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004d38:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004d3d:	c1 e2 08             	shl    edx,0x8
c0004d40:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004d43:	09 c2                	or     edx,eax
c0004d45:	0f b7 d2             	movzx  edx,dx
c0004d48:	50                   	push   eax
c0004d49:	50                   	push   eax
c0004d4a:	68 b5 01 00 00       	push   0x1b5
c0004d4f:	52                   	push   edx
c0004d50:	e8 46 38 00 00       	call   c000859b <ff_oem2uni>
c0004d55:	83 c4 10             	add    esp,0x10
c0004d58:	66 85 c0             	test   ax,ax
c0004d5b:	75 04                	jne    c0004d61 <get_fileinfo+0x13c>
c0004d5d:	31 ff                	xor    edi,edi
c0004d5f:	eb 23                	jmp    c0004d84 <get_fileinfo+0x15f>
c0004d61:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d66:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d6a:	29 f9                	sub    ecx,edi
c0004d6c:	0f b7 c0             	movzx  eax,ax
c0004d6f:	e8 d7 d0 ff ff       	call   c0001e4b <put_utf>
c0004d74:	84 c0                	test   al,al
c0004d76:	74 e5                	je     c0004d5d <get_fileinfo+0x138>
c0004d78:	0f b6 c0             	movzx  eax,al
c0004d7b:	01 c7                	add    edi,eax
c0004d7d:	89 e9                	mov    ecx,ebp
c0004d7f:	e9 4a ff ff ff       	jmp    c0004cce <get_fileinfo+0xa9>
c0004d84:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d89:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d8d:	75 54                	jne    c0004de3 <get_fileinfo+0x1be>
c0004d8f:	85 ff                	test   edi,edi
c0004d91:	75 0b                	jne    c0004d9e <get_fileinfo+0x179>
c0004d93:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d97:	ba 01 00 00 00       	mov    edx,0x1
c0004d9c:	eb 33                	jmp    c0004dd1 <get_fileinfo+0x1ac>
c0004d9e:	b1 08                	mov    cl,0x8
c0004da0:	31 d2                	xor    edx,edx
c0004da2:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004da8:	84 c0                	test   al,al
c0004daa:	74 25                	je     c0004dd1 <get_fileinfo+0x1ac>
c0004dac:	66 83 f8 2e          	cmp    ax,0x2e
c0004db0:	74 16                	je     c0004dc8 <get_fileinfo+0x1a3>
c0004db2:	8d 78 bf             	lea    edi,[eax-0x41]
c0004db5:	66 83 ff 19          	cmp    di,0x19
c0004db9:	77 0f                	ja     c0004dca <get_fileinfo+0x1a5>
c0004dbb:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004dbe:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004dc1:	74 07                	je     c0004dca <get_fileinfo+0x1a5>
c0004dc3:	83 c0 20             	add    eax,0x20
c0004dc6:	eb 02                	jmp    c0004dca <get_fileinfo+0x1a5>
c0004dc8:	b1 10                	mov    cl,0x10
c0004dca:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004dce:	42                   	inc    edx
c0004dcf:	eb d1                	jmp    c0004da2 <get_fileinfo+0x17d>
c0004dd1:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004dd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dd9:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ddd:	75 04                	jne    c0004de3 <get_fileinfo+0x1be>
c0004ddf:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004de3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004de6:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004de9:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004dec:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004def:	83 c0 1c             	add    eax,0x1c
c0004df2:	e8 c1 ce ff ff       	call   c0001cb8 <ld_dword>
c0004df7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004dfe:	89 03                	mov    DWORD PTR [ebx],eax
c0004e00:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004e03:	83 c0 16             	add    eax,0x16
c0004e06:	e8 a0 ce ff ff       	call   c0001cab <ld_word>
c0004e0b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004e0f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004e12:	83 c0 18             	add    eax,0x18
c0004e15:	e8 91 ce ff ff       	call   c0001cab <ld_word>
c0004e1a:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004e1e:	83 c4 1c             	add    esp,0x1c
c0004e21:	5b                   	pop    ebx
c0004e22:	5e                   	pop    esi
c0004e23:	5f                   	pop    edi
c0004e24:	5d                   	pop    ebp
c0004e25:	c3                   	ret    

c0004e26 <ld_clust.isra.0>:
c0004e26:	56                   	push   esi
c0004e27:	89 c6                	mov    esi,eax
c0004e29:	53                   	push   ebx
c0004e2a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004e2d:	89 d3                	mov    ebx,edx
c0004e2f:	e8 77 ce ff ff       	call   c0001cab <ld_word>
c0004e34:	0f b7 c8             	movzx  ecx,ax
c0004e37:	89 f0                	mov    eax,esi
c0004e39:	3c 03                	cmp    al,0x3
c0004e3b:	75 0d                	jne    c0004e4a <ld_clust.isra.0+0x24>
c0004e3d:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e40:	e8 66 ce ff ff       	call   c0001cab <ld_word>
c0004e45:	c1 e0 10             	shl    eax,0x10
c0004e48:	09 c1                	or     ecx,eax
c0004e4a:	89 c8                	mov    eax,ecx
c0004e4c:	5b                   	pop    ebx
c0004e4d:	5e                   	pop    esi
c0004e4e:	c3                   	ret    

c0004e4f <st_clust.isra.1>:
c0004e4f:	56                   	push   esi
c0004e50:	89 c6                	mov    esi,eax
c0004e52:	53                   	push   ebx
c0004e53:	89 d3                	mov    ebx,edx
c0004e55:	0f b7 d1             	movzx  edx,cx
c0004e58:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e5b:	e8 bd ce ff ff       	call   c0001d1d <st_word>
c0004e60:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e63:	75 0f                	jne    c0004e74 <st_clust.isra.1+0x25>
c0004e65:	c1 e9 10             	shr    ecx,0x10
c0004e68:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e6b:	89 ca                	mov    edx,ecx
c0004e6d:	5b                   	pop    ebx
c0004e6e:	5e                   	pop    esi
c0004e6f:	e9 a9 ce ff ff       	jmp    c0001d1d <st_word>
c0004e74:	5b                   	pop    ebx
c0004e75:	5e                   	pop    esi
c0004e76:	c3                   	ret    

c0004e77 <init_alloc_info.isra.2>:
c0004e77:	56                   	push   esi
c0004e78:	53                   	push   ebx
c0004e79:	89 c6                	mov    esi,eax
c0004e7b:	89 d3                	mov    ebx,edx
c0004e7d:	51                   	push   ecx
c0004e7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e80:	83 c0 34             	add    eax,0x34
c0004e83:	e8 30 ce ff ff       	call   c0001cb8 <ld_dword>
c0004e88:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e8b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e8d:	83 c0 38             	add    eax,0x38
c0004e90:	e8 3b ce ff ff       	call   c0001cd0 <ld_qword>
c0004e95:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e98:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e9b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e9d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004ea0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ea7:	83 e0 02             	and    eax,0x2
c0004eaa:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004ead:	5b                   	pop    ebx
c0004eae:	5b                   	pop    ebx
c0004eaf:	5e                   	pop    esi
c0004eb0:	c3                   	ret    

c0004eb1 <follow_path>:
c0004eb1:	56                   	push   esi
c0004eb2:	53                   	push   ebx
c0004eb3:	89 c3                	mov    ebx,eax
c0004eb5:	83 ec 14             	sub    esp,0x14
c0004eb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ebc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ebe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ec2:	8a 10                	mov    dl,BYTE PTR [eax]
c0004ec4:	80 fa 5c             	cmp    dl,0x5c
c0004ec7:	75 07                	jne    c0004ed0 <follow_path+0x1f>
c0004ec9:	40                   	inc    eax
c0004eca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ece:	eb ee                	jmp    c0004ebe <follow_path+0xd>
c0004ed0:	80 fa 2f             	cmp    dl,0x2f
c0004ed3:	74 f4                	je     c0004ec9 <follow_path+0x18>
c0004ed5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004edc:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ee3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004ee6:	77 52                	ja     c0004f3a <follow_path+0x89>
c0004ee8:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004eec:	31 d2                	xor    edx,edx
c0004eee:	89 d8                	mov    eax,ebx
c0004ef0:	e8 12 e3 ff ff       	call   c0003207 <dir_sdi>
c0004ef5:	eb 7c                	jmp    c0004f73 <follow_path+0xc2>
c0004ef7:	89 d8                	mov    eax,ebx
c0004ef9:	e8 6e f2 ff ff       	call   c000416c <dir_find>
c0004efe:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004f01:	85 c0                	test   eax,eax
c0004f03:	75 46                	jne    c0004f4b <follow_path+0x9a>
c0004f05:	80 e2 04             	and    dl,0x4
c0004f08:	75 69                	jne    c0004f73 <follow_path+0xc2>
c0004f0a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004f0e:	74 5e                	je     c0004f6e <follow_path+0xbd>
c0004f10:	8a 06                	mov    al,BYTE PTR [esi]
c0004f12:	3c 04                	cmp    al,0x4
c0004f14:	75 41                	jne    c0004f57 <follow_path+0xa6>
c0004f16:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f19:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004f1d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f20:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004f23:	30 c0                	xor    al,al
c0004f25:	09 d0                	or     eax,edx
c0004f27:	89 da                	mov    edx,ebx
c0004f29:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f2c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004f2f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f32:	8d 46 10             	lea    eax,[esi+0x10]
c0004f35:	e8 3d ff ff ff       	call   c0004e77 <init_alloc_info.isra.2>
c0004f3a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004f3e:	89 d8                	mov    eax,ebx
c0004f40:	e8 a9 ed ff ff       	call   c0003cee <create_name>
c0004f45:	85 c0                	test   eax,eax
c0004f47:	74 ae                	je     c0004ef7 <follow_path+0x46>
c0004f49:	eb 28                	jmp    c0004f73 <follow_path+0xc2>
c0004f4b:	83 f8 04             	cmp    eax,0x4
c0004f4e:	75 23                	jne    c0004f73 <follow_path+0xc2>
c0004f50:	80 e2 04             	and    dl,0x4
c0004f53:	74 19                	je     c0004f6e <follow_path+0xbd>
c0004f55:	eb 1c                	jmp    c0004f73 <follow_path+0xc2>
c0004f57:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f5a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f60:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f64:	e8 bd fe ff ff       	call   c0004e26 <ld_clust.isra.0>
c0004f69:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f6c:	eb cc                	jmp    c0004f3a <follow_path+0x89>
c0004f6e:	b8 05 00 00 00       	mov    eax,0x5
c0004f73:	83 c4 14             	add    esp,0x14
c0004f76:	5b                   	pop    ebx
c0004f77:	5e                   	pop    esi
c0004f78:	c3                   	ret    

c0004f79 <f_mount>:
c0004f79:	53                   	push   ebx
c0004f7a:	83 ec 18             	sub    esp,0x18
c0004f7d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f81:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f89:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f8d:	e8 fb d2 ff ff       	call   c000228d <get_ldnumber>
c0004f92:	89 c2                	mov    edx,eax
c0004f94:	b8 0b 00 00 00       	mov    eax,0xb
c0004f99:	85 d2                	test   edx,edx
c0004f9b:	78 39                	js     c0004fd6 <f_mount+0x5d>
c0004f9d:	8b 04 95 60 b9 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc46a0]
c0004fa4:	85 c0                	test   eax,eax
c0004fa6:	74 03                	je     c0004fab <f_mount+0x32>
c0004fa8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004fab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004faf:	85 c0                	test   eax,eax
c0004fb1:	74 03                	je     c0004fb6 <f_mount+0x3d>
c0004fb3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004fb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fba:	89 04 95 60 b9 03 c0 	mov    DWORD PTR [edx*4-0x3ffc46a0],eax
c0004fc1:	31 c0                	xor    eax,eax
c0004fc3:	84 db                	test   bl,bl
c0004fc5:	74 0f                	je     c0004fd6 <f_mount+0x5d>
c0004fc7:	31 c9                	xor    ecx,ecx
c0004fc9:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fcd:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fd1:	e8 65 d7 ff ff       	call   c000273b <mount_volume>
c0004fd6:	83 c4 18             	add    esp,0x18
c0004fd9:	5b                   	pop    ebx
c0004fda:	c3                   	ret    

c0004fdb <f_open>:
c0004fdb:	55                   	push   ebp
c0004fdc:	bd 09 00 00 00       	mov    ebp,0x9
c0004fe1:	57                   	push   edi
c0004fe2:	56                   	push   esi
c0004fe3:	53                   	push   ebx
c0004fe4:	83 ec 7c             	sub    esp,0x7c
c0004fe7:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fee:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ff5:	85 db                	test   ebx,ebx
c0004ff7:	0f 84 10 04 00 00    	je     c000540d <f_open+0x432>
c0004ffd:	89 fe                	mov    esi,edi
c0004fff:	8d 54 24 20          	lea    edx,[esp+0x20]
c0005003:	83 e6 3f             	and    esi,0x3f
c0005006:	89 f0                	mov    eax,esi
c0005008:	0f b6 c8             	movzx  ecx,al
c000500b:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0005012:	e8 24 d7 ff ff       	call   c000273b <mount_volume>
c0005017:	89 c5                	mov    ebp,eax
c0005019:	85 c0                	test   eax,eax
c000501b:	0f 85 e6 03 00 00    	jne    c0005407 <f_open+0x42c>
c0005021:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005025:	bd 11 00 00 00       	mov    ebp,0x11
c000502a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000502e:	83 ec 0c             	sub    esp,0xc
c0005031:	68 60 04 00 00       	push   0x460
c0005036:	e8 a3 34 00 00       	call   c00084de <ff_memalloc>
c000503b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000503f:	83 c4 10             	add    esp,0x10
c0005042:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0005047:	0f 84 c0 03 00 00    	je     c000540d <f_open+0x432>
c000504d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005051:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005055:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c000505b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c000505e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005061:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0005068:	8d 44 24 24          	lea    eax,[esp+0x24]
c000506c:	e8 40 fe ff ff       	call   c0004eb1 <follow_path>
c0005071:	89 c5                	mov    ebp,eax
c0005073:	85 c0                	test   eax,eax
c0005075:	75 0c                	jne    c0005083 <f_open+0xa8>
c0005077:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c000507c:	79 05                	jns    c0005083 <f_open+0xa8>
c000507e:	bd 06 00 00 00       	mov    ebp,0x6
c0005083:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005089:	0f 84 84 01 00 00    	je     c0005213 <f_open+0x238>
c000508f:	85 ed                	test   ebp,ebp
c0005091:	74 20                	je     c00050b3 <f_open+0xd8>
c0005093:	83 fd 04             	cmp    ebp,0x4
c0005096:	0f 85 58 03 00 00    	jne    c00053f4 <f_open+0x419>
c000509c:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050a0:	83 ce 08             	or     esi,0x8
c00050a3:	e8 8a f2 ff ff       	call   c0004332 <dir_register>
c00050a8:	89 c5                	mov    ebp,eax
c00050aa:	85 c0                	test   eax,eax
c00050ac:	74 2f                	je     c00050dd <f_open+0x102>
c00050ae:	e9 41 03 00 00       	jmp    c00053f4 <f_open+0x419>
c00050b3:	bd 07 00 00 00       	mov    ebp,0x7
c00050b8:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c00050bd:	0f 85 31 03 00 00    	jne    c00053f4 <f_open+0x419>
c00050c3:	bd 08 00 00 00       	mov    ebp,0x8
c00050c8:	f7 c7 04 00 00 00    	test   edi,0x4
c00050ce:	0f 85 20 03 00 00    	jne    c00053f4 <f_open+0x419>
c00050d4:	83 e7 08             	and    edi,0x8
c00050d7:	0f 84 65 01 00 00    	je     c0005242 <f_open+0x267>
c00050dd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050e1:	8a 02                	mov    al,BYTE PTR [edx]
c00050e3:	3c 04                	cmp    al,0x4
c00050e5:	0f 85 97 00 00 00    	jne    c0005182 <f_open+0x1a7>
c00050eb:	8d 42 10             	lea    eax,[edx+0x10]
c00050ee:	89 13                	mov    DWORD PTR [ebx],edx
c00050f0:	89 da                	mov    edx,ebx
c00050f2:	e8 80 fd ff ff       	call   c0004e77 <init_alloc_info.isra.2>
c00050f7:	31 d2                	xor    edx,edx
c00050f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050fd:	b9 1e 00 00 00       	mov    ecx,0x1e
c0005102:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005105:	83 c0 02             	add    eax,0x2
c0005108:	e8 32 cc ff ff       	call   c0001d3f <mem_set>
c000510d:	b9 1a 00 00 00       	mov    ecx,0x1a
c0005112:	31 d2                	xor    edx,edx
c0005114:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005118:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000511b:	83 c0 26             	add    eax,0x26
c000511e:	e8 1c cc ff ff       	call   c0001d3f <mem_set>
c0005123:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005127:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000512a:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c000512e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005133:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005136:	83 c0 08             	add    eax,0x8
c0005139:	e8 e3 cb ff ff       	call   c0001d21 <st_dword>
c000513e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005142:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005145:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0005149:	8d 44 24 24          	lea    eax,[esp+0x24]
c000514d:	e8 b7 ea ff ff       	call   c0003c09 <store_xdir>
c0005152:	89 c5                	mov    ebp,eax
c0005154:	85 c0                	test   eax,eax
c0005156:	0f 85 98 02 00 00    	jne    c00053f4 <f_open+0x419>
c000515c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000515f:	85 d2                	test   edx,edx
c0005161:	0f 84 db 00 00 00    	je     c0005242 <f_open+0x267>
c0005167:	31 c9                	xor    ecx,ecx
c0005169:	89 d8                	mov    eax,ebx
c000516b:	e8 8e e3 ff ff       	call   c00034fe <remove_chain>
c0005170:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005174:	89 c5                	mov    ebp,eax
c0005176:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005179:	48                   	dec    eax
c000517a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000517d:	e9 b8 00 00 00       	jmp    c000523a <f_open+0x25f>
c0005182:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005186:	89 ea                	mov    edx,ebp
c0005188:	e8 99 fc ff ff       	call   c0004e26 <ld_clust.isra.0>
c000518d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005192:	89 c7                	mov    edi,eax
c0005194:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005197:	e8 85 cb ff ff       	call   c0001d21 <st_dword>
c000519c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00051a0:	31 c9                	xor    ecx,ecx
c00051a2:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c00051a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051aa:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00051ae:	e8 9c fc ff ff       	call   c0004e4f <st_clust.isra.1>
c00051b3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00051b7:	31 d2                	xor    edx,edx
c00051b9:	83 c0 1c             	add    eax,0x1c
c00051bc:	e8 60 cb ff ff       	call   c0001d21 <st_dword>
c00051c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c5:	85 ff                	test   edi,edi
c00051c7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051cb:	74 75                	je     c0005242 <f_open+0x267>
c00051cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051d1:	31 c9                	xor    ecx,ecx
c00051d3:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c00051d6:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c00051d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051e1:	89 fa                	mov    edx,edi
c00051e3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00051e7:	e8 12 e3 ff ff       	call   c00034fe <remove_chain>
c00051ec:	89 c5                	mov    ebp,eax
c00051ee:	85 c0                	test   eax,eax
c00051f0:	0f 85 fe 01 00 00    	jne    c00053f4 <f_open+0x419>
c00051f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005202:	4f                   	dec    edi
c0005203:	e8 81 d2 ff ff       	call   c0002489 <move_window>
c0005208:	89 c5                	mov    ebp,eax
c000520a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000520e:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0005211:	eb 27                	jmp    c000523a <f_open+0x25f>
c0005213:	85 ed                	test   ebp,ebp
c0005215:	0f 85 d9 01 00 00    	jne    c00053f4 <f_open+0x419>
c000521b:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000521f:	bd 04 00 00 00       	mov    ebp,0x4
c0005224:	a8 10                	test   al,0x10
c0005226:	0f 85 c8 01 00 00    	jne    c00053f4 <f_open+0x419>
c000522c:	83 e7 02             	and    edi,0x2
c000522f:	74 11                	je     c0005242 <f_open+0x267>
c0005231:	bd 07 00 00 00       	mov    ebp,0x7
c0005236:	a8 01                	test   al,0x1
c0005238:	eb 02                	jmp    c000523c <f_open+0x261>
c000523a:	85 ed                	test   ebp,ebp
c000523c:	0f 85 b2 01 00 00    	jne    c00053f4 <f_open+0x419>
c0005242:	f7 c6 08 00 00 00    	test   esi,0x8
c0005248:	74 03                	je     c000524d <f_open+0x272>
c000524a:	83 ce 40             	or     esi,0x40
c000524d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005251:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005254:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005257:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000525a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000525d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005261:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005264:	8a 02                	mov    al,BYTE PTR [edx]
c0005266:	3c 04                	cmp    al,0x4
c0005268:	75 2a                	jne    c0005294 <f_open+0x2b9>
c000526a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000526e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005273:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005276:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000527a:	30 c0                	xor    al,al
c000527c:	09 c8                	or     eax,ecx
c000527e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005281:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005285:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005288:	8d 42 10             	lea    eax,[edx+0x10]
c000528b:	89 da                	mov    edx,ebx
c000528d:	e8 e5 fb ff ff       	call   c0004e77 <init_alloc_info.isra.2>
c0005292:	eb 1c                	jmp    c00052b0 <f_open+0x2d5>
c0005294:	89 fa                	mov    edx,edi
c0005296:	e8 8b fb ff ff       	call   c0004e26 <ld_clust.isra.0>
c000529b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000529e:	8d 47 1c             	lea    eax,[edi+0x1c]
c00052a1:	e8 12 ca ff ff       	call   c0001cb8 <ld_dword>
c00052a6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00052ad:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00052b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052b4:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c00052bb:	89 03                	mov    DWORD PTR [ebx],eax
c00052bd:	31 d2                	xor    edx,edx
c00052bf:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00052c3:	b9 00 02 00 00       	mov    ecx,0x200
c00052c8:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00052cc:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c00052d0:	89 f0                	mov    eax,esi
c00052d2:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00052d9:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c00052dc:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00052e3:	8d 43 50             	lea    eax,[ebx+0x50]
c00052e6:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052ed:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052f8:	e8 42 ca ff ff       	call   c0001d3f <mem_set>
c00052fd:	83 e6 20             	and    esi,0x20
c0005300:	75 07                	jne    c0005309 <f_open+0x32e>
c0005302:	31 ed                	xor    ebp,ebp
c0005304:	e9 eb 00 00 00       	jmp    c00053f4 <f_open+0x419>
c0005309:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005313:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005317:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000531b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000531f:	74 e1                	je     c0005302 <f_open+0x327>
c0005321:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005329:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000532c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000532f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005333:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005336:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000533a:	31 ff                	xor    edi,edi
c000533c:	c1 e5 09             	shl    ebp,0x9
c000533f:	89 ee                	mov    esi,ebp
c0005341:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005345:	89 f8                	mov    eax,edi
c0005347:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000534b:	73 22                	jae    c000536f <f_open+0x394>
c000534d:	89 d8                	mov    eax,ebx
c000534f:	e8 bd dc ff ff       	call   c0003011 <get_fat>
c0005354:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005358:	89 c2                	mov    edx,eax
c000535a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000535e:	83 f8 01             	cmp    eax,0x1
c0005361:	76 10                	jbe    c0005373 <f_open+0x398>
c0005363:	83 f8 ff             	cmp    eax,0xffffffff
c0005366:	75 d9                	jne    c0005341 <f_open+0x366>
c0005368:	bd 01 00 00 00       	mov    ebp,0x1
c000536d:	eb 09                	jmp    c0005378 <f_open+0x39d>
c000536f:	31 ed                	xor    ebp,ebp
c0005371:	eb 05                	jmp    c0005378 <f_open+0x39d>
c0005373:	bd 02 00 00 00       	mov    ebp,0x2
c0005378:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000537b:	85 ed                	test   ebp,ebp
c000537d:	75 75                	jne    c00053f4 <f_open+0x419>
c000537f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005383:	25 ff 01 00 00       	and    eax,0x1ff
c0005388:	0f 84 74 ff ff ff    	je     c0005302 <f_open+0x327>
c000538e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005392:	bd 02 00 00 00       	mov    ebp,0x2
c0005397:	89 c8                	mov    eax,ecx
c0005399:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000539d:	e8 a2 cb ff ff       	call   c0001f44 <clst2sect>
c00053a2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00053a6:	89 d7                	mov    edi,edx
c00053a8:	09 c7                	or     edi,eax
c00053aa:	74 48                	je     c00053f4 <f_open+0x419>
c00053ac:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00053b0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00053b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00053bc:	0f ac fe 09          	shrd   esi,edi,0x9
c00053c0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00053c4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00053c8:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00053cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00053cf:	83 ec 0c             	sub    esp,0xc
c00053d2:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00053d5:	6a 01                	push   0x1
c00053d7:	52                   	push   edx
c00053d8:	50                   	push   eax
c00053d9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00053dd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053e1:	50                   	push   eax
c00053e2:	e8 79 c8 ff ff       	call   c0001c60 <disk_read>
c00053e7:	83 c4 20             	add    esp,0x20
c00053ea:	85 c0                	test   eax,eax
c00053ec:	0f 95 c0             	setne  al
c00053ef:	0f b6 c0             	movzx  eax,al
c00053f2:	89 c5                	mov    ebp,eax
c00053f4:	83 ec 0c             	sub    esp,0xc
c00053f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053fb:	e8 f4 30 00 00       	call   c00084f4 <ff_memfree>
c0005400:	83 c4 10             	add    esp,0x10
c0005403:	85 ed                	test   ebp,ebp
c0005405:	74 06                	je     c000540d <f_open+0x432>
c0005407:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000540d:	83 c4 7c             	add    esp,0x7c
c0005410:	89 e8                	mov    eax,ebp
c0005412:	5b                   	pop    ebx
c0005413:	5e                   	pop    esi
c0005414:	5f                   	pop    edi
c0005415:	5d                   	pop    ebp
c0005416:	c3                   	ret    

c0005417 <f_read>:
c0005417:	55                   	push   ebp
c0005418:	57                   	push   edi
c0005419:	56                   	push   esi
c000541a:	53                   	push   ebx
c000541b:	83 ec 2c             	sub    esp,0x2c
c000541e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005422:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005426:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000542c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005430:	89 d8                	mov    eax,ebx
c0005432:	e8 77 cf ff ff       	call   c00023ae <validate>
c0005437:	89 c5                	mov    ebp,eax
c0005439:	85 c0                	test   eax,eax
c000543b:	0f 85 4c 02 00 00    	jne    c000568d <f_read+0x276>
c0005441:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005445:	85 ed                	test   ebp,ebp
c0005447:	0f 85 40 02 00 00    	jne    c000568d <f_read+0x276>
c000544d:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005451:	0f 84 31 02 00 00    	je     c0005688 <f_read+0x271>
c0005457:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000545a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000545d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005460:	bf 00 00 00 00       	mov    edi,0x0
c0005465:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005468:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000546c:	89 d1                	mov    ecx,edx
c000546e:	19 f9                	sbb    ecx,edi
c0005470:	0f 83 cf 00 00 00    	jae    c0005545 <f_read+0x12e>
c0005476:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000547a:	e9 c6 00 00 00       	jmp    c0005545 <f_read+0x12e>
c000547f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005482:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005485:	89 d0                	mov    eax,edx
c0005487:	25 ff 01 00 00       	and    eax,0x1ff
c000548c:	0f 85 c9 01 00 00    	jne    c000565b <f_read+0x244>
c0005492:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005496:	89 d6                	mov    esi,edx
c0005498:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000549c:	89 cf                	mov    edi,ecx
c000549e:	48                   	dec    eax
c000549f:	0f ac fe 09          	shrd   esi,edi,0x9
c00054a3:	21 f0                	and    eax,esi
c00054a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054a9:	0f 84 a6 00 00 00    	je     c0005555 <f_read+0x13e>
c00054af:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054b3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054b6:	89 c8                	mov    eax,ecx
c00054b8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00054bb:	e8 84 ca ff ff       	call   c0001f44 <clst2sect>
c00054c0:	89 d7                	mov    edi,edx
c00054c2:	09 c7                	or     edi,eax
c00054c4:	0f 84 b4 00 00 00    	je     c000557e <f_read+0x167>
c00054ca:	31 ff                	xor    edi,edi
c00054cc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054d0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00054d3:	01 c6                	add    esi,eax
c00054d5:	11 d7                	adc    edi,edx
c00054d7:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054df:	0f 86 fd 00 00 00    	jbe    c00055e2 <f_read+0x1cb>
c00054e5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054ed:	c1 e8 09             	shr    eax,0x9
c00054f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00054f3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054f7:	03 14 24             	add    edx,DWORD PTR [esp]
c00054fa:	39 c2                	cmp    edx,eax
c00054fc:	76 07                	jbe    c0005505 <f_read+0xee>
c00054fe:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005502:	89 04 24             	mov    DWORD PTR [esp],eax
c0005505:	83 ec 0c             	sub    esp,0xc
c0005508:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000550c:	57                   	push   edi
c000550d:	56                   	push   esi
c000550e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005512:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005516:	50                   	push   eax
c0005517:	e8 44 c7 ff ff       	call   c0001c60 <disk_read>
c000551c:	83 c4 20             	add    esp,0x20
c000551f:	85 c0                	test   eax,eax
c0005521:	75 6e                	jne    c0005591 <f_read+0x17a>
c0005523:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005527:	78 7e                	js     c00055a7 <f_read+0x190>
c0005529:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000552c:	c1 e6 09             	shl    esi,0x9
c000552f:	31 ff                	xor    edi,edi
c0005531:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005535:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005539:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000553d:	01 30                	add    DWORD PTR [eax],esi
c000553f:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005542:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005545:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000554a:	0f 85 2f ff ff ff    	jne    c000547f <f_read+0x68>
c0005550:	e9 38 01 00 00       	jmp    c000568d <f_read+0x276>
c0005555:	89 c8                	mov    eax,ecx
c0005557:	09 d0                	or     eax,edx
c0005559:	75 05                	jne    c0005560 <f_read+0x149>
c000555b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000555e:	eb 19                	jmp    c0005579 <f_read+0x162>
c0005560:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005564:	74 09                	je     c000556f <f_read+0x158>
c0005566:	89 d8                	mov    eax,ebx
c0005568:	e8 f8 c9 ff ff       	call   c0001f65 <clmt_clust>
c000556d:	eb 0a                	jmp    c0005579 <f_read+0x162>
c000556f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005572:	89 d8                	mov    eax,ebx
c0005574:	e8 98 da ff ff       	call   c0003011 <get_fat>
c0005579:	83 f8 01             	cmp    eax,0x1
c000557c:	77 0e                	ja     c000558c <f_read+0x175>
c000557e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005582:	bd 02 00 00 00       	mov    ebp,0x2
c0005587:	e9 01 01 00 00       	jmp    c000568d <f_read+0x276>
c000558c:	83 f8 ff             	cmp    eax,0xffffffff
c000558f:	75 0e                	jne    c000559f <f_read+0x188>
c0005591:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005595:	bd 01 00 00 00       	mov    ebp,0x1
c000559a:	e9 ee 00 00 00       	jmp    c000568d <f_read+0x276>
c000559f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055a2:	e9 08 ff ff ff       	jmp    c00054af <f_read+0x98>
c00055a7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00055aa:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00055ad:	29 f0                	sub    eax,esi
c00055af:	19 fa                	sbb    edx,edi
c00055b1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00055b4:	89 d7                	mov    edi,edx
c00055b6:	ba 00 00 00 00       	mov    edx,0x0
c00055bb:	89 f9                	mov    ecx,edi
c00055bd:	19 d1                	sbb    ecx,edx
c00055bf:	0f 83 64 ff ff ff    	jae    c0005529 <f_read+0x112>
c00055c5:	89 c7                	mov    edi,eax
c00055c7:	8d 53 50             	lea    edx,[ebx+0x50]
c00055ca:	c1 e7 09             	shl    edi,0x9
c00055cd:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055d1:	b9 00 02 00 00       	mov    ecx,0x200
c00055d6:	01 f8                	add    eax,edi
c00055d8:	e8 4d c7 ff ff       	call   c0001d2a <mem_cpy>
c00055dd:	e9 47 ff ff ff       	jmp    c0005529 <f_read+0x112>
c00055e2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00055e5:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00055e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00055eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055ef:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055f3:	75 05                	jne    c00055fa <f_read+0x1e3>
c00055f5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055f8:	74 5b                	je     c0005655 <f_read+0x23e>
c00055fa:	8d 43 50             	lea    eax,[ebx+0x50]
c00055fd:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005601:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005605:	79 2a                	jns    c0005631 <f_read+0x21a>
c0005607:	83 ec 0c             	sub    esp,0xc
c000560a:	6a 01                	push   0x1
c000560c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005610:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005614:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005618:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000561c:	50                   	push   eax
c000561d:	e8 54 c6 ff ff       	call   c0001c76 <disk_write>
c0005622:	83 c4 20             	add    esp,0x20
c0005625:	85 c0                	test   eax,eax
c0005627:	0f 85 64 ff ff ff    	jne    c0005591 <f_read+0x17a>
c000562d:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005631:	83 ec 0c             	sub    esp,0xc
c0005634:	6a 01                	push   0x1
c0005636:	57                   	push   edi
c0005637:	56                   	push   esi
c0005638:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000563c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005640:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005644:	50                   	push   eax
c0005645:	e8 16 c6 ff ff       	call   c0001c60 <disk_read>
c000564a:	83 c4 20             	add    esp,0x20
c000564d:	85 c0                	test   eax,eax
c000564f:	0f 85 3c ff ff ff    	jne    c0005591 <f_read+0x17a>
c0005655:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005658:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000565b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000565e:	ba 00 02 00 00       	mov    edx,0x200
c0005663:	25 ff 01 00 00       	and    eax,0x1ff
c0005668:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000566c:	29 c2                	sub    edx,eax
c000566e:	39 d6                	cmp    esi,edx
c0005670:	76 02                	jbe    c0005674 <f_read+0x25d>
c0005672:	89 d6                	mov    esi,edx
c0005674:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005678:	89 f1                	mov    ecx,esi
c000567a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000567e:	e8 a7 c6 ff ff       	call   c0001d2a <mem_cpy>
c0005683:	e9 a7 fe ff ff       	jmp    c000552f <f_read+0x118>
c0005688:	bd 07 00 00 00       	mov    ebp,0x7
c000568d:	83 c4 2c             	add    esp,0x2c
c0005690:	89 e8                	mov    eax,ebp
c0005692:	5b                   	pop    ebx
c0005693:	5e                   	pop    esi
c0005694:	5f                   	pop    edi
c0005695:	5d                   	pop    ebp
c0005696:	c3                   	ret    

c0005697 <f_write>:
c0005697:	55                   	push   ebp
c0005698:	57                   	push   edi
c0005699:	56                   	push   esi
c000569a:	53                   	push   ebx
c000569b:	83 ec 2c             	sub    esp,0x2c
c000569e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00056a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00056ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00056b0:	89 d8                	mov    eax,ebx
c00056b2:	e8 f7 cc ff ff       	call   c00023ae <validate>
c00056b7:	89 c5                	mov    ebp,eax
c00056b9:	85 c0                	test   eax,eax
c00056bb:	0f 85 86 02 00 00    	jne    c0005947 <f_write+0x2b0>
c00056c1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00056c5:	85 ed                	test   ebp,ebp
c00056c7:	0f 85 7a 02 00 00    	jne    c0005947 <f_write+0x2b0>
c00056cd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00056d1:	0f 84 6b 02 00 00    	je     c0005942 <f_write+0x2ab>
c00056d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056db:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00056de:	0f 84 43 01 00 00    	je     c0005827 <f_write+0x190>
c00056e4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056e7:	89 c1                	mov    ecx,eax
c00056e9:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056ed:	0f 83 34 01 00 00    	jae    c0005827 <f_write+0x190>
c00056f3:	f7 d0                	not    eax
c00056f5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056f9:	e9 29 01 00 00       	jmp    c0005827 <f_write+0x190>
c00056fe:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005701:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005704:	89 d0                	mov    eax,edx
c0005706:	25 ff 01 00 00       	and    eax,0x1ff
c000570b:	0f 85 00 02 00 00    	jne    c0005911 <f_write+0x27a>
c0005711:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005715:	89 d6                	mov    esi,edx
c0005717:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000571b:	89 cf                	mov    edi,ecx
c000571d:	48                   	dec    eax
c000571e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005722:	21 f0                	and    eax,esi
c0005724:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005728:	0f 84 06 01 00 00    	je     c0005834 <f_write+0x19d>
c000572e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005732:	0f 88 6e 01 00 00    	js     c00058a6 <f_write+0x20f>
c0005738:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000573c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000573f:	89 c8                	mov    eax,ecx
c0005741:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005745:	e8 fa c7 ff ff       	call   c0001f44 <clst2sect>
c000574a:	89 d1                	mov    ecx,edx
c000574c:	09 c1                	or     ecx,eax
c000574e:	0f 84 1c 01 00 00    	je     c0005870 <f_write+0x1d9>
c0005754:	31 ff                	xor    edi,edi
c0005756:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000575a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000575e:	01 c6                	add    esi,eax
c0005760:	11 d7                	adc    edi,edx
c0005762:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000576a:	0f 86 63 01 00 00    	jbe    c00058d3 <f_write+0x23c>
c0005770:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005774:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005778:	c1 e8 09             	shr    eax,0x9
c000577b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000577f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005783:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005787:	39 c2                	cmp    edx,eax
c0005789:	76 08                	jbe    c0005793 <f_write+0xfc>
c000578b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000578f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005793:	83 ec 0c             	sub    esp,0xc
c0005796:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000579a:	57                   	push   edi
c000579b:	56                   	push   esi
c000579c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00057a0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057a4:	50                   	push   eax
c00057a5:	e8 cc c4 ff ff       	call   c0001c76 <disk_write>
c00057aa:	83 c4 20             	add    esp,0x20
c00057ad:	85 c0                	test   eax,eax
c00057af:	0f 85 ce 00 00 00    	jne    c0005883 <f_write+0x1ec>
c00057b5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00057b8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00057bb:	29 f0                	sub    eax,esi
c00057bd:	19 fa                	sbb    edx,edi
c00057bf:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00057c3:	89 d7                	mov    edi,edx
c00057c5:	ba 00 00 00 00       	mov    edx,0x0
c00057ca:	89 f9                	mov    ecx,edi
c00057cc:	19 d1                	sbb    ecx,edx
c00057ce:	73 1c                	jae    c00057ec <f_write+0x155>
c00057d0:	89 c7                	mov    edi,eax
c00057d2:	b9 00 02 00 00       	mov    ecx,0x200
c00057d7:	c1 e7 09             	shl    edi,0x9
c00057da:	8d 43 50             	lea    eax,[ebx+0x50]
c00057dd:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00057e1:	89 fa                	mov    edx,edi
c00057e3:	e8 42 c5 ff ff       	call   c0001d2a <mem_cpy>
c00057e8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057ec:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057f0:	c1 e6 09             	shl    esi,0x9
c00057f3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057f7:	31 ff                	xor    edi,edi
c00057f9:	01 30                	add    DWORD PTR [eax],esi
c00057fb:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057ff:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005803:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005806:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005809:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000580c:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000580f:	89 c1                	mov    ecx,eax
c0005811:	39 f2                	cmp    edx,esi
c0005813:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005816:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005819:	19 f9                	sbb    ecx,edi
c000581b:	73 04                	jae    c0005821 <f_write+0x18a>
c000581d:	89 f2                	mov    edx,esi
c000581f:	89 f8                	mov    eax,edi
c0005821:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0005824:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0005827:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000582c:	0f 85 cc fe ff ff    	jne    c00056fe <f_write+0x67>
c0005832:	eb 2e                	jmp    c0005862 <f_write+0x1cb>
c0005834:	89 c8                	mov    eax,ecx
c0005836:	09 d0                	or     eax,edx
c0005838:	75 0b                	jne    c0005845 <f_write+0x1ae>
c000583a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000583d:	31 d2                	xor    edx,edx
c000583f:	85 c0                	test   eax,eax
c0005841:	75 28                	jne    c000586b <f_write+0x1d4>
c0005843:	eb 12                	jmp    c0005857 <f_write+0x1c0>
c0005845:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005849:	74 09                	je     c0005854 <f_write+0x1bd>
c000584b:	89 d8                	mov    eax,ebx
c000584d:	e8 13 c7 ff ff       	call   c0001f65 <clmt_clust>
c0005852:	eb 0a                	jmp    c000585e <f_write+0x1c7>
c0005854:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005857:	89 d8                	mov    eax,ebx
c0005859:	e8 a1 da ff ff       	call   c00032ff <create_chain>
c000585e:	85 c0                	test   eax,eax
c0005860:	75 09                	jne    c000586b <f_write+0x1d4>
c0005862:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005866:	e9 dc 00 00 00       	jmp    c0005947 <f_write+0x2b0>
c000586b:	83 f8 01             	cmp    eax,0x1
c000586e:	75 0e                	jne    c000587e <f_write+0x1e7>
c0005870:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005874:	bd 02 00 00 00       	mov    ebp,0x2
c0005879:	e9 c9 00 00 00       	jmp    c0005947 <f_write+0x2b0>
c000587e:	83 f8 ff             	cmp    eax,0xffffffff
c0005881:	75 0e                	jne    c0005891 <f_write+0x1fa>
c0005883:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005887:	bd 01 00 00 00       	mov    ebp,0x1
c000588c:	e9 b6 00 00 00       	jmp    c0005947 <f_write+0x2b0>
c0005891:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005894:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005898:	0f 85 90 fe ff ff    	jne    c000572e <f_write+0x97>
c000589e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00058a1:	e9 88 fe ff ff       	jmp    c000572e <f_write+0x97>
c00058a6:	83 ec 0c             	sub    esp,0xc
c00058a9:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ac:	6a 01                	push   0x1
c00058ae:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00058b1:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00058b4:	50                   	push   eax
c00058b5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00058b9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00058bd:	50                   	push   eax
c00058be:	e8 b3 c3 ff ff       	call   c0001c76 <disk_write>
c00058c3:	83 c4 20             	add    esp,0x20
c00058c6:	85 c0                	test   eax,eax
c00058c8:	75 b9                	jne    c0005883 <f_write+0x1ec>
c00058ca:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00058ce:	e9 65 fe ff ff       	jmp    c0005738 <f_write+0xa1>
c00058d3:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00058d6:	75 05                	jne    c00058dd <f_write+0x246>
c00058d8:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00058db:	74 2e                	je     c000590b <f_write+0x274>
c00058dd:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00058e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058e3:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00058e6:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00058e9:	73 20                	jae    c000590b <f_write+0x274>
c00058eb:	83 ec 0c             	sub    esp,0xc
c00058ee:	8d 43 50             	lea    eax,[ebx+0x50]
c00058f1:	6a 01                	push   0x1
c00058f3:	57                   	push   edi
c00058f4:	56                   	push   esi
c00058f5:	50                   	push   eax
c00058f6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058fa:	50                   	push   eax
c00058fb:	e8 60 c3 ff ff       	call   c0001c60 <disk_read>
c0005900:	83 c4 20             	add    esp,0x20
c0005903:	85 c0                	test   eax,eax
c0005905:	0f 85 78 ff ff ff    	jne    c0005883 <f_write+0x1ec>
c000590b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000590e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005911:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005914:	ba 00 02 00 00       	mov    edx,0x200
c0005919:	25 ff 01 00 00       	and    eax,0x1ff
c000591e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005922:	29 c2                	sub    edx,eax
c0005924:	39 d6                	cmp    esi,edx
c0005926:	76 02                	jbe    c000592a <f_write+0x293>
c0005928:	89 d6                	mov    esi,edx
c000592a:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c000592e:	89 f1                	mov    ecx,esi
c0005930:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005934:	e8 f1 c3 ff ff       	call   c0001d2a <mem_cpy>
c0005939:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c000593d:	e9 b1 fe ff ff       	jmp    c00057f3 <f_write+0x15c>
c0005942:	bd 07 00 00 00       	mov    ebp,0x7
c0005947:	83 c4 2c             	add    esp,0x2c
c000594a:	89 e8                	mov    eax,ebp
c000594c:	5b                   	pop    ebx
c000594d:	5e                   	pop    esi
c000594e:	5f                   	pop    edi
c000594f:	5d                   	pop    ebp
c0005950:	c3                   	ret    

c0005951 <f_sync>:
c0005951:	56                   	push   esi
c0005952:	53                   	push   ebx
c0005953:	83 ec 64             	sub    esp,0x64
c0005956:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000595a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000595e:	89 d8                	mov    eax,ebx
c0005960:	e8 49 ca ff ff       	call   c00023ae <validate>
c0005965:	85 c0                	test   eax,eax
c0005967:	0f 85 ba 01 00 00    	jne    c0005b27 <f_sync+0x1d6>
c000596d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005970:	f6 c2 40             	test   dl,0x40
c0005973:	0f 84 ae 01 00 00    	je     c0005b27 <f_sync+0x1d6>
c0005979:	84 d2                	test   dl,dl
c000597b:	79 33                	jns    c00059b0 <f_sync+0x5f>
c000597d:	83 ec 0c             	sub    esp,0xc
c0005980:	8d 43 50             	lea    eax,[ebx+0x50]
c0005983:	6a 01                	push   0x1
c0005985:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005988:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000598b:	50                   	push   eax
c000598c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005990:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005994:	50                   	push   eax
c0005995:	e8 dc c2 ff ff       	call   c0001c76 <disk_write>
c000599a:	83 c4 20             	add    esp,0x20
c000599d:	89 c2                	mov    edx,eax
c000599f:	b8 01 00 00 00       	mov    eax,0x1
c00059a4:	85 d2                	test   edx,edx
c00059a6:	0f 85 7b 01 00 00    	jne    c0005b27 <f_sync+0x1d6>
c00059ac:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00059b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059b4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00059b7:	0f 85 11 01 00 00    	jne    c0005ace <f_sync+0x17d>
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 13 d6 ff ff       	call   c0002fd7 <fill_first_frag>
c00059c4:	85 c0                	test   eax,eax
c00059c6:	0f 85 5b 01 00 00    	jne    c0005b27 <f_sync+0x1d6>
c00059cc:	83 c9 ff             	or     ecx,0xffffffff
c00059cf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00059d2:	89 d8                	mov    eax,ebx
c00059d4:	e8 c9 d5 ff ff       	call   c0002fa2 <fill_last_frag>
c00059d9:	85 c0                	test   eax,eax
c00059db:	0f 85 46 01 00 00    	jne    c0005b27 <f_sync+0x1d6>
c00059e1:	83 ec 0c             	sub    esp,0xc
c00059e4:	68 60 04 00 00       	push   0x460
c00059e9:	e8 f0 2a 00 00       	call   c00084de <ff_memalloc>
c00059ee:	83 c4 10             	add    esp,0x10
c00059f1:	89 c6                	mov    esi,eax
c00059f3:	b8 11 00 00 00       	mov    eax,0x11
c00059f8:	85 f6                	test   esi,esi
c00059fa:	0f 84 27 01 00 00    	je     c0005b27 <f_sync+0x1d6>
c0005a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a04:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005a0a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005a0d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005a10:	89 da                	mov    edx,ebx
c0005a12:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a16:	e8 af df ff ff       	call   c00039ca <load_obj_xdir>
c0005a1b:	85 c0                	test   eax,eax
c0005a1d:	0f 85 95 00 00 00    	jne    c0005ab8 <f_sync+0x167>
c0005a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a27:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a2a:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005a2e:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005a31:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005a34:	83 ca 01             	or     edx,0x1
c0005a37:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c0005a3a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005a3d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a40:	83 c0 34             	add    eax,0x34
c0005a43:	e8 d9 c2 ff ff       	call   c0001d21 <st_dword>
c0005a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a4c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a4f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a52:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a55:	83 c0 38             	add    eax,0x38
c0005a58:	e8 c7 c2 ff ff       	call   c0001d24 <st_qword>
c0005a5d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a64:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a67:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a6a:	83 c0 28             	add    eax,0x28
c0005a6d:	e8 b2 c2 ff ff       	call   c0001d24 <st_qword>
c0005a72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a76:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a7e:	83 c0 0c             	add    eax,0xc
c0005a81:	e8 9b c2 ff ff       	call   c0001d21 <st_dword>
c0005a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a8d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a91:	31 d2                	xor    edx,edx
c0005a93:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a96:	83 c0 10             	add    eax,0x10
c0005a99:	e8 83 c2 ff ff       	call   c0001d21 <st_dword>
c0005a9e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005aa2:	e8 62 e1 ff ff       	call   c0003c09 <store_xdir>
c0005aa7:	85 c0                	test   eax,eax
c0005aa9:	75 0d                	jne    c0005ab8 <f_sync+0x167>
c0005aab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005aaf:	e8 00 eb ff ff       	call   c00045b4 <sync_fs>
c0005ab4:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005ab8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005abc:	83 ec 0c             	sub    esp,0xc
c0005abf:	56                   	push   esi
c0005ac0:	e8 2f 2a 00 00       	call   c00084f4 <ff_memfree>
c0005ac5:	83 c4 10             	add    esp,0x10
c0005ac8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005acc:	eb 59                	jmp    c0005b27 <f_sync+0x1d6>
c0005ace:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005ad1:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005ad4:	e8 b0 c9 ff ff       	call   c0002489 <move_window>
c0005ad9:	85 c0                	test   eax,eax
c0005adb:	75 4a                	jne    c0005b27 <f_sync+0x1d6>
c0005add:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005ae0:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005ae4:	89 f2                	mov    edx,esi
c0005ae6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005ae9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aeb:	e8 5f f3 ff ff       	call   c0004e4f <st_clust.isra.1>
c0005af0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005af3:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005af6:	e8 26 c2 ff ff       	call   c0001d21 <st_dword>
c0005afb:	8d 46 16             	lea    eax,[esi+0x16]
c0005afe:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b03:	e8 19 c2 ff ff       	call   c0001d21 <st_dword>
c0005b08:	8d 46 12             	lea    eax,[esi+0x12]
c0005b0b:	31 d2                	xor    edx,edx
c0005b0d:	e8 0b c2 ff ff       	call   c0001d1d <st_word>
c0005b12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b16:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005b1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b1e:	e8 91 ea ff ff       	call   c00045b4 <sync_fs>
c0005b23:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005b27:	83 c4 64             	add    esp,0x64
c0005b2a:	5b                   	pop    ebx
c0005b2b:	5e                   	pop    esi
c0005b2c:	c3                   	ret    

c0005b2d <f_close>:
c0005b2d:	53                   	push   ebx
c0005b2e:	83 ec 24             	sub    esp,0x24
c0005b31:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005b35:	53                   	push   ebx
c0005b36:	e8 16 fe ff ff       	call   c0005951 <f_sync>
c0005b3b:	83 c4 10             	add    esp,0x10
c0005b3e:	85 c0                	test   eax,eax
c0005b40:	75 15                	jne    c0005b57 <f_close+0x2a>
c0005b42:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005b46:	89 d8                	mov    eax,ebx
c0005b48:	e8 61 c8 ff ff       	call   c00023ae <validate>
c0005b4d:	85 c0                	test   eax,eax
c0005b4f:	75 06                	jne    c0005b57 <f_close+0x2a>
c0005b51:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b57:	83 c4 18             	add    esp,0x18
c0005b5a:	5b                   	pop    ebx
c0005b5b:	c3                   	ret    

c0005b5c <f_lseek>:
c0005b5c:	55                   	push   ebp
c0005b5d:	57                   	push   edi
c0005b5e:	56                   	push   esi
c0005b5f:	53                   	push   ebx
c0005b60:	83 ec 3c             	sub    esp,0x3c
c0005b63:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b67:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b6b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b6f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b72:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b76:	89 d8                	mov    eax,ebx
c0005b78:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b7c:	e8 2d c8 ff ff       	call   c00023ae <validate>
c0005b81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b85:	85 c0                	test   eax,eax
c0005b87:	0f 85 7a 04 00 00    	jne    c0006007 <f_lseek+0x4ab>
c0005b8d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b95:	85 c0                	test   eax,eax
c0005b97:	0f 85 6a 04 00 00    	jne    c0006007 <f_lseek+0x4ab>
c0005b9d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ba1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005ba4:	74 0c                	je     c0005bb2 <f_lseek+0x56>
c0005ba6:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005ba9:	85 c0                	test   eax,eax
c0005bab:	75 1f                	jne    c0005bcc <f_lseek+0x70>
c0005bad:	e9 b5 01 00 00       	jmp    c0005d67 <f_lseek+0x20b>
c0005bb2:	83 c9 ff             	or     ecx,0xffffffff
c0005bb5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005bb8:	89 d8                	mov    eax,ebx
c0005bba:	e8 e3 d3 ff ff       	call   c0002fa2 <fill_last_frag>
c0005bbf:	85 c0                	test   eax,eax
c0005bc1:	74 e3                	je     c0005ba6 <f_lseek+0x4a>
c0005bc3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005bc7:	e9 3b 04 00 00       	jmp    c0006007 <f_lseek+0x4ab>
c0005bcc:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005bd1:	0f 85 ac 00 00 00    	jne    c0005c83 <f_lseek+0x127>
c0005bd7:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005bdb:	0f 85 a2 00 00 00    	jne    c0005c83 <f_lseek+0x127>
c0005be1:	8d 78 04             	lea    edi,[eax+0x4]
c0005be4:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005be7:	8b 00                	mov    eax,DWORD PTR [eax]
c0005be9:	be 02 00 00 00       	mov    esi,0x2
c0005bee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	74 73                	je     c0005c69 <f_lseek+0x10d>
c0005bf6:	89 e9                	mov    ecx,ebp
c0005bf8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bff:	ff 04 24             	inc    DWORD PTR [esp]
c0005c02:	89 ca                	mov    edx,ecx
c0005c04:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c08:	89 d8                	mov    eax,ebx
c0005c0a:	e8 02 d4 ff ff       	call   c0003011 <get_fat>
c0005c0f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c13:	83 f8 01             	cmp    eax,0x1
c0005c16:	77 11                	ja     c0005c29 <f_lseek+0xcd>
c0005c18:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005c1c:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005c24:	e9 de 03 00 00       	jmp    c0006007 <f_lseek+0x4ab>
c0005c29:	83 f8 ff             	cmp    eax,0xffffffff
c0005c2c:	75 11                	jne    c0005c3f <f_lseek+0xe3>
c0005c2e:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005c32:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005c3a:	e9 c8 03 00 00       	jmp    c0006007 <f_lseek+0x4ab>
c0005c3f:	8d 51 01             	lea    edx,[ecx+0x1]
c0005c42:	89 c1                	mov    ecx,eax
c0005c44:	39 c2                	cmp    edx,eax
c0005c46:	74 b7                	je     c0005bff <f_lseek+0xa3>
c0005c48:	83 c6 02             	add    esi,0x2
c0005c4b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c4f:	72 0b                	jb     c0005c5c <f_lseek+0x100>
c0005c51:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c54:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c57:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c59:	83 c7 08             	add    edi,0x8
c0005c5c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c60:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c63:	76 04                	jbe    c0005c69 <f_lseek+0x10d>
c0005c65:	89 c5                	mov    ebp,eax
c0005c67:	eb 8d                	jmp    c0005bf6 <f_lseek+0x9a>
c0005c69:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c6c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c70:	89 30                	mov    DWORD PTR [eax],esi
c0005c72:	0f 87 87 03 00 00    	ja     c0005fff <f_lseek+0x4a3>
c0005c78:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c7e:	e9 84 03 00 00       	jmp    c0006007 <f_lseek+0x4ab>
c0005c83:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c86:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c95:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c9c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005ca0:	73 0f                	jae    c0005cb1 <f_lseek+0x155>
c0005ca2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ca5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005cad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005cb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005cb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cb9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005cbc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005cc7:	0f 84 3a 03 00 00    	je     c0006007 <f_lseek+0x4ab>
c0005ccd:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005cd1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005cd5:	83 c6 ff             	add    esi,0xffffffff
c0005cd8:	89 d8                	mov    eax,ebx
c0005cda:	83 d7 ff             	adc    edi,0xffffffff
c0005cdd:	89 f2                	mov    edx,esi
c0005cdf:	89 f9                	mov    ecx,edi
c0005ce1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005ce5:	89 34 24             	mov    DWORD PTR [esp],esi
c0005ce8:	e8 78 c2 ff ff       	call   c0001f65 <clmt_clust>
c0005ced:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005cf1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cf4:	89 c2                	mov    edx,eax
c0005cf6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cfa:	89 c8                	mov    eax,ecx
c0005cfc:	e8 43 c2 ff ff       	call   c0001f44 <clst2sect>
c0005d01:	89 d7                	mov    edi,edx
c0005d03:	09 c7                	or     edi,eax
c0005d05:	0f 84 0d ff ff ff    	je     c0005c18 <f_lseek+0xbc>
c0005d0b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005d0f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005d15:	0f 84 ec 02 00 00    	je     c0006007 <f_lseek+0x4ab>
c0005d1b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005d23:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d26:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005d2a:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d2e:	4d                   	dec    ebp
c0005d2f:	31 ff                	xor    edi,edi
c0005d31:	21 ee                	and    esi,ebp
c0005d33:	01 c6                	add    esi,eax
c0005d35:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d38:	11 d7                	adc    edi,edx
c0005d3a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d3d:	39 fa                	cmp    edx,edi
c0005d3f:	75 08                	jne    c0005d49 <f_lseek+0x1ed>
c0005d41:	39 f0                	cmp    eax,esi
c0005d43:	0f 84 be 02 00 00    	je     c0006007 <f_lseek+0x4ab>
c0005d49:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d4c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d50:	0f 89 80 02 00 00    	jns    c0005fd6 <f_lseek+0x47a>
c0005d56:	83 ec 0c             	sub    esp,0xc
c0005d59:	6a 01                	push   0x1
c0005d5b:	52                   	push   edx
c0005d5c:	50                   	push   eax
c0005d5d:	55                   	push   ebp
c0005d5e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d62:	e9 5a 02 00 00       	jmp    c0005fc1 <f_lseek+0x465>
c0005d67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d6b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d6e:	74 16                	je     c0005d86 <f_lseek+0x22a>
c0005d70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d75:	76 0f                	jbe    c0005d86 <f_lseek+0x22a>
c0005d77:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d7e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d86:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d89:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d8c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d8f:	89 c7                	mov    edi,eax
c0005d91:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d95:	73 0d                	jae    c0005da4 <f_lseek+0x248>
c0005d97:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d9b:	75 07                	jne    c0005da4 <f_lseek+0x248>
c0005d9d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005da0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005da4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005da7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005daa:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005dae:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005db5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005dbc:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005dbf:	75 09                	jne    c0005dca <f_lseek+0x26e>
c0005dc1:	31 f6                	xor    esi,esi
c0005dc3:	31 ff                	xor    edi,edi
c0005dc5:	e9 af 01 00 00       	jmp    c0005f79 <f_lseek+0x41d>
c0005dca:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005dce:	89 d7                	mov    edi,edx
c0005dd0:	c1 e1 09             	shl    ecx,0x9
c0005dd3:	09 c7                	or     edi,eax
c0005dd5:	89 cd                	mov    ebp,ecx
c0005dd7:	74 6d                	je     c0005e46 <f_lseek+0x2ea>
c0005dd9:	83 c0 ff             	add    eax,0xffffffff
c0005ddc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005de0:	83 d2 ff             	adc    edx,0xffffffff
c0005de3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005de6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005dea:	83 c0 ff             	add    eax,0xffffffff
c0005ded:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005df1:	83 d2 ff             	adc    edx,0xffffffff
c0005df4:	31 ff                	xor    edi,edi
c0005df6:	57                   	push   edi
c0005df7:	51                   	push   ecx
c0005df8:	52                   	push   edx
c0005df9:	50                   	push   eax
c0005dfa:	e8 bd 88 01 00       	call   c001e6bc <__udivdi3>
c0005dff:	83 c4 10             	add    esp,0x10
c0005e02:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005e06:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005e0a:	57                   	push   edi
c0005e0b:	55                   	push   ebp
c0005e0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005e10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005e14:	e8 a3 88 01 00       	call   c001e6bc <__udivdi3>
c0005e19:	83 c4 10             	add    esp,0x10
c0005e1c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005e20:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e24:	19 d1                	sbb    ecx,edx
c0005e26:	72 1e                	jb     c0005e46 <f_lseek+0x2ea>
c0005e28:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005e2c:	89 e9                	mov    ecx,ebp
c0005e2e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005e31:	f7 d9                	neg    ecx
c0005e33:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005e36:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005e3a:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005e3d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005e40:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005e44:	eb 28                	jmp    c0005e6e <f_lseek+0x312>
c0005e46:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e49:	85 c0                	test   eax,eax
c0005e4b:	75 1e                	jne    c0005e6b <f_lseek+0x30f>
c0005e4d:	31 d2                	xor    edx,edx
c0005e4f:	89 d8                	mov    eax,ebx
c0005e51:	e8 a9 d4 ff ff       	call   c00032ff <create_chain>
c0005e56:	83 f8 01             	cmp    eax,0x1
c0005e59:	0f 84 b9 fd ff ff    	je     c0005c18 <f_lseek+0xbc>
c0005e5f:	83 f8 ff             	cmp    eax,0xffffffff
c0005e62:	0f 84 c6 fd ff ff    	je     c0005c2e <f_lseek+0xd2>
c0005e68:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e6b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e6e:	85 c0                	test   eax,eax
c0005e70:	0f 84 4b ff ff ff    	je     c0005dc1 <f_lseek+0x265>
c0005e76:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e7a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e82:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e85:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e89:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e8c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e8f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e93:	0f 83 9d 00 00 00    	jae    c0005f36 <f_lseek+0x3da>
c0005e99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e9d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005ea1:	29 34 24             	sub    DWORD PTR [esp],esi
c0005ea4:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005ea8:	01 f2                	add    edx,esi
c0005eaa:	11 f9                	adc    ecx,edi
c0005eac:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005eb0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005eb4:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005eb7:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005eba:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005ebd:	f6 c1 02             	test   cl,0x2
c0005ec0:	74 35                	je     c0005ef7 <f_lseek+0x39b>
c0005ec2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005ec6:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005ec9:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005ecc:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005ed0:	73 16                	jae    c0005ee8 <f_lseek+0x38c>
c0005ed2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005ed6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005eda:	88 ca                	mov    dl,cl
c0005edc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005edf:	83 ca 40             	or     edx,0x40
c0005ee2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005ee5:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005ee8:	89 c2                	mov    edx,eax
c0005eea:	89 d8                	mov    eax,ebx
c0005eec:	e8 0e d4 ff ff       	call   c00032ff <create_chain>
c0005ef1:	85 c0                	test   eax,eax
c0005ef3:	75 0b                	jne    c0005f00 <f_lseek+0x3a4>
c0005ef5:	eb 30                	jmp    c0005f27 <f_lseek+0x3cb>
c0005ef7:	89 c2                	mov    edx,eax
c0005ef9:	89 d8                	mov    eax,ebx
c0005efb:	e8 11 d1 ff ff       	call   c0003011 <get_fat>
c0005f00:	83 f8 ff             	cmp    eax,0xffffffff
c0005f03:	0f 84 25 fd ff ff    	je     c0005c2e <f_lseek+0xd2>
c0005f09:	83 f8 01             	cmp    eax,0x1
c0005f0c:	0f 86 06 fd ff ff    	jbe    c0005c18 <f_lseek+0xbc>
c0005f12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005f16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005f19:	0f 86 f9 fc ff ff    	jbe    c0005c18 <f_lseek+0xbc>
c0005f1f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005f22:	e9 5b ff ff ff       	jmp    c0005e82 <f_lseek+0x326>
c0005f27:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005f2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005f36:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005f39:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005f3d:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005f40:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005f43:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005f46:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f4c:	0f 84 6f fe ff ff    	je     c0005dc1 <f_lseek+0x265>
c0005f52:	89 c2                	mov    edx,eax
c0005f54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f58:	e8 e7 bf ff ff       	call   c0001f44 <clst2sect>
c0005f5d:	89 d7                	mov    edi,edx
c0005f5f:	09 c7                	or     edi,eax
c0005f61:	0f 84 b1 fc ff ff    	je     c0005c18 <f_lseek+0xbc>
c0005f67:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f6b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f6e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f72:	c1 ef 09             	shr    edi,0x9
c0005f75:	01 c6                	add    esi,eax
c0005f77:	11 d7                	adc    edi,edx
c0005f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f7c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f7f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f82:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f85:	19 d1                	sbb    ecx,edx
c0005f87:	73 0a                	jae    c0005f93 <f_lseek+0x437>
c0005f89:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f8c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f8f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f93:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f98:	74 6d                	je     c0006007 <f_lseek+0x4ab>
c0005f9a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f9d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005fa0:	39 fa                	cmp    edx,edi
c0005fa2:	75 04                	jne    c0005fa8 <f_lseek+0x44c>
c0005fa4:	39 f0                	cmp    eax,esi
c0005fa6:	74 5f                	je     c0006007 <f_lseek+0x4ab>
c0005fa8:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005fab:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005faf:	79 25                	jns    c0005fd6 <f_lseek+0x47a>
c0005fb1:	83 ec 0c             	sub    esp,0xc
c0005fb4:	6a 01                	push   0x1
c0005fb6:	52                   	push   edx
c0005fb7:	50                   	push   eax
c0005fb8:	55                   	push   ebp
c0005fb9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005fbd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005fc1:	50                   	push   eax
c0005fc2:	e8 af bc ff ff       	call   c0001c76 <disk_write>
c0005fc7:	83 c4 20             	add    esp,0x20
c0005fca:	85 c0                	test   eax,eax
c0005fcc:	0f 85 5c fc ff ff    	jne    c0005c2e <f_lseek+0xd2>
c0005fd2:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005fd6:	83 ec 0c             	sub    esp,0xc
c0005fd9:	6a 01                	push   0x1
c0005fdb:	57                   	push   edi
c0005fdc:	56                   	push   esi
c0005fdd:	55                   	push   ebp
c0005fde:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005fe2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005fe6:	50                   	push   eax
c0005fe7:	e8 74 bc ff ff       	call   c0001c60 <disk_read>
c0005fec:	83 c4 20             	add    esp,0x20
c0005fef:	85 c0                	test   eax,eax
c0005ff1:	0f 85 37 fc ff ff    	jne    c0005c2e <f_lseek+0xd2>
c0005ff7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005ffa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ffd:	eb 08                	jmp    c0006007 <f_lseek+0x4ab>
c0005fff:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0006007:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000600b:	83 c4 3c             	add    esp,0x3c
c000600e:	5b                   	pop    ebx
c000600f:	5e                   	pop    esi
c0006010:	5f                   	pop    edi
c0006011:	5d                   	pop    ebp
c0006012:	c3                   	ret    

c0006013 <f_opendir>:
c0006013:	56                   	push   esi
c0006014:	b8 09 00 00 00       	mov    eax,0x9
c0006019:	53                   	push   ebx
c000601a:	83 ec 24             	sub    esp,0x24
c000601d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006021:	85 db                	test   ebx,ebx
c0006023:	0f 84 e6 00 00 00    	je     c000610f <f_opendir+0xfc>
c0006029:	31 c9                	xor    ecx,ecx
c000602b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000602f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006033:	e8 03 c7 ff ff       	call   c000273b <mount_volume>
c0006038:	85 c0                	test   eax,eax
c000603a:	0f 85 c9 00 00 00    	jne    c0006109 <f_opendir+0xf6>
c0006040:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006044:	83 ec 0c             	sub    esp,0xc
c0006047:	89 03                	mov    DWORD PTR [ebx],eax
c0006049:	68 60 04 00 00       	push   0x460
c000604e:	e8 8b 24 00 00       	call   c00084de <ff_memalloc>
c0006053:	83 c4 10             	add    esp,0x10
c0006056:	89 c6                	mov    esi,eax
c0006058:	b8 11 00 00 00       	mov    eax,0x11
c000605d:	85 f6                	test   esi,esi
c000605f:	0f 84 aa 00 00 00    	je     c000610f <f_opendir+0xfc>
c0006065:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006069:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000606f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006072:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006075:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0006079:	89 d8                	mov    eax,ebx
c000607b:	e8 31 ee ff ff       	call   c0004eb1 <follow_path>
c0006080:	85 c0                	test   eax,eax
c0006082:	75 61                	jne    c00060e5 <f_opendir+0xd2>
c0006084:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006088:	78 46                	js     c00060d0 <f_opendir+0xbd>
c000608a:	b8 05 00 00 00       	mov    eax,0x5
c000608f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006093:	74 50                	je     c00060e5 <f_opendir+0xd2>
c0006095:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006099:	8a 01                	mov    al,BYTE PTR [ecx]
c000609b:	3c 04                	cmp    al,0x4
c000609d:	75 26                	jne    c00060c5 <f_opendir+0xb2>
c000609f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00060a2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00060a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00060a8:	30 d2                	xor    dl,dl
c00060aa:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c00060ae:	09 c2                	or     edx,eax
c00060b0:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00060b3:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00060b6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00060b9:	89 da                	mov    edx,ebx
c00060bb:	8d 41 10             	lea    eax,[ecx+0x10]
c00060be:	e8 b4 ed ff ff       	call   c0004e77 <init_alloc_info.isra.2>
c00060c3:	eb 0b                	jmp    c00060d0 <f_opendir+0xbd>
c00060c5:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00060c8:	e8 59 ed ff ff       	call   c0004e26 <ld_clust.isra.0>
c00060cd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00060d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00060da:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00060de:	89 d8                	mov    eax,ebx
c00060e0:	e8 22 d1 ff ff       	call   c0003207 <dir_sdi>
c00060e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060e9:	83 ec 0c             	sub    esp,0xc
c00060ec:	56                   	push   esi
c00060ed:	e8 02 24 00 00       	call   c00084f4 <ff_memfree>
c00060f2:	83 c4 10             	add    esp,0x10
c00060f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060f9:	83 f8 04             	cmp    eax,0x4
c00060fc:	74 06                	je     c0006104 <f_opendir+0xf1>
c00060fe:	85 c0                	test   eax,eax
c0006100:	74 0d                	je     c000610f <f_opendir+0xfc>
c0006102:	eb 05                	jmp    c0006109 <f_opendir+0xf6>
c0006104:	b8 05 00 00 00       	mov    eax,0x5
c0006109:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000610f:	83 c4 24             	add    esp,0x24
c0006112:	5b                   	pop    ebx
c0006113:	5e                   	pop    esi
c0006114:	c3                   	ret    

c0006115 <f_closedir>:
c0006115:	53                   	push   ebx
c0006116:	83 ec 18             	sub    esp,0x18
c0006119:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000611d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006121:	89 d8                	mov    eax,ebx
c0006123:	e8 86 c2 ff ff       	call   c00023ae <validate>
c0006128:	85 c0                	test   eax,eax
c000612a:	75 06                	jne    c0006132 <f_closedir+0x1d>
c000612c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0006132:	83 c4 18             	add    esp,0x18
c0006135:	5b                   	pop    ebx
c0006136:	c3                   	ret    

c0006137 <f_readdir>:
c0006137:	57                   	push   edi
c0006138:	56                   	push   esi
c0006139:	53                   	push   ebx
c000613a:	83 ec 20             	sub    esp,0x20
c000613d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006141:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006145:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006149:	89 d8                	mov    eax,ebx
c000614b:	e8 5e c2 ff ff       	call   c00023ae <validate>
c0006150:	85 c0                	test   eax,eax
c0006152:	75 77                	jne    c00061cb <f_readdir+0x94>
c0006154:	85 ff                	test   edi,edi
c0006156:	75 0b                	jne    c0006163 <f_readdir+0x2c>
c0006158:	31 d2                	xor    edx,edx
c000615a:	89 d8                	mov    eax,ebx
c000615c:	e8 a6 d0 ff ff       	call   c0003207 <dir_sdi>
c0006161:	eb 68                	jmp    c00061cb <f_readdir+0x94>
c0006163:	83 ec 0c             	sub    esp,0xc
c0006166:	68 60 04 00 00       	push   0x460
c000616b:	e8 6e 23 00 00       	call   c00084de <ff_memalloc>
c0006170:	83 c4 10             	add    esp,0x10
c0006173:	89 c6                	mov    esi,eax
c0006175:	b8 11 00 00 00       	mov    eax,0x11
c000617a:	85 f6                	test   esi,esi
c000617c:	74 4d                	je     c00061cb <f_readdir+0x94>
c000617e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006182:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006188:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000618b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000618e:	31 d2                	xor    edx,edx
c0006190:	89 d8                	mov    eax,ebx
c0006192:	e8 80 d8 ff ff       	call   c0003a17 <dir_read>
c0006197:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000619c:	75 19                	jne    c00061b7 <f_readdir+0x80>
c000619e:	89 fa                	mov    edx,edi
c00061a0:	89 d8                	mov    eax,ebx
c00061a2:	e8 7e ea ff ff       	call   c0004c25 <get_fileinfo>
c00061a7:	31 d2                	xor    edx,edx
c00061a9:	89 d8                	mov    eax,ebx
c00061ab:	e8 af d5 ff ff       	call   c000375f <dir_next>
c00061b0:	83 f8 04             	cmp    eax,0x4
c00061b3:	75 02                	jne    c00061b7 <f_readdir+0x80>
c00061b5:	31 c0                	xor    eax,eax
c00061b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061bb:	83 ec 0c             	sub    esp,0xc
c00061be:	56                   	push   esi
c00061bf:	e8 30 23 00 00       	call   c00084f4 <ff_memfree>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061cb:	83 c4 20             	add    esp,0x20
c00061ce:	5b                   	pop    ebx
c00061cf:	5e                   	pop    esi
c00061d0:	5f                   	pop    edi
c00061d1:	c3                   	ret    

c00061d2 <f_stat>:
c00061d2:	57                   	push   edi
c00061d3:	31 c9                	xor    ecx,ecx
c00061d5:	56                   	push   esi
c00061d6:	53                   	push   ebx
c00061d7:	83 ec 50             	sub    esp,0x50
c00061da:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c00061de:	8d 54 24 04          	lea    edx,[esp+0x4]
c00061e2:	8d 44 24 60          	lea    eax,[esp+0x60]
c00061e6:	e8 50 c5 ff ff       	call   c000273b <mount_volume>
c00061eb:	89 c3                	mov    ebx,eax
c00061ed:	85 c0                	test   eax,eax
c00061ef:	75 67                	jne    c0006258 <f_stat+0x86>
c00061f1:	83 ec 0c             	sub    esp,0xc
c00061f4:	bb 11 00 00 00       	mov    ebx,0x11
c00061f9:	68 60 04 00 00       	push   0x460
c00061fe:	e8 db 22 00 00       	call   c00084de <ff_memalloc>
c0006203:	83 c4 10             	add    esp,0x10
c0006206:	89 c6                	mov    esi,eax
c0006208:	85 c0                	test   eax,eax
c000620a:	74 4c                	je     c0006258 <f_stat+0x86>
c000620c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006210:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006216:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006219:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000621c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0006220:	8d 44 24 04          	lea    eax,[esp+0x4]
c0006224:	e8 88 ec ff ff       	call   c0004eb1 <follow_path>
c0006229:	89 c3                	mov    ebx,eax
c000622b:	85 c0                	test   eax,eax
c000622d:	75 1d                	jne    c000624c <f_stat+0x7a>
c000622f:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0006234:	78 11                	js     c0006247 <f_stat+0x75>
c0006236:	85 ff                	test   edi,edi
c0006238:	74 12                	je     c000624c <f_stat+0x7a>
c000623a:	89 fa                	mov    edx,edi
c000623c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0006240:	e8 e0 e9 ff ff       	call   c0004c25 <get_fileinfo>
c0006245:	eb 05                	jmp    c000624c <f_stat+0x7a>
c0006247:	bb 06 00 00 00       	mov    ebx,0x6
c000624c:	83 ec 0c             	sub    esp,0xc
c000624f:	56                   	push   esi
c0006250:	e8 9f 22 00 00       	call   c00084f4 <ff_memfree>
c0006255:	83 c4 10             	add    esp,0x10
c0006258:	83 c4 50             	add    esp,0x50
c000625b:	89 d8                	mov    eax,ebx
c000625d:	5b                   	pop    ebx
c000625e:	5e                   	pop    esi
c000625f:	5f                   	pop    edi
c0006260:	c3                   	ret    

c0006261 <f_getfree>:
c0006261:	55                   	push   ebp
c0006262:	31 c9                	xor    ecx,ecx
c0006264:	57                   	push   edi
c0006265:	56                   	push   esi
c0006266:	53                   	push   ebx
c0006267:	83 ec 5c             	sub    esp,0x5c
c000626a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000626e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006272:	e8 c4 c4 ff ff       	call   c000273b <mount_volume>
c0006277:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000627b:	85 c0                	test   eax,eax
c000627d:	0f 85 9d 01 00 00    	jne    c0006420 <f_getfree+0x1bf>
c0006283:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006287:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000628b:	89 02                	mov    DWORD PTR [edx],eax
c000628d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006290:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006293:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006296:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000629a:	39 f2                	cmp    edx,esi
c000629c:	77 0b                	ja     c00062a9 <f_getfree+0x48>
c000629e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062a2:	89 10                	mov    DWORD PTR [eax],edx
c00062a4:	e9 77 01 00 00       	jmp    c0006420 <f_getfree+0x1bf>
c00062a9:	8a 10                	mov    dl,BYTE PTR [eax]
c00062ab:	80 fa 01             	cmp    dl,0x1
c00062ae:	75 3a                	jne    c00062ea <f_getfree+0x89>
c00062b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00062b4:	be 02 00 00 00       	mov    esi,0x2
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	89 f2                	mov    edx,esi
c00062bd:	8d 44 24 28          	lea    eax,[esp+0x28]
c00062c1:	e8 4b cd ff ff       	call   c0003011 <get_fat>
c00062c6:	83 f8 ff             	cmp    eax,0xffffffff
c00062c9:	0f 84 28 01 00 00    	je     c00063f7 <f_getfree+0x196>
c00062cf:	83 f8 01             	cmp    eax,0x1
c00062d2:	0f 84 29 01 00 00    	je     c0006401 <f_getfree+0x1a0>
c00062d8:	83 d3 00             	adc    ebx,0x0
c00062db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062df:	46                   	inc    esi
c00062e0:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00062e3:	77 d6                	ja     c00062bb <f_getfree+0x5a>
c00062e5:	e9 25 01 00 00       	jmp    c000640f <f_getfree+0x1ae>
c00062ea:	80 fa 04             	cmp    dl,0x4
c00062ed:	0f 85 88 00 00 00    	jne    c000637b <f_getfree+0x11a>
c00062f3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062f6:	31 ed                	xor    ebp,ebp
c00062f8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062fb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006303:	31 db                	xor    ebx,ebx
c0006305:	85 ed                	test   ebp,ebp
c0006307:	75 3f                	jne    c0006348 <f_getfree+0xe7>
c0006309:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000630d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006311:	83 c0 01             	add    eax,0x1
c0006314:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006318:	83 d2 00             	adc    edx,0x0
c000631b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000631f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006323:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006327:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000632b:	e8 59 c1 ff ff       	call   c0002489 <move_window>
c0006330:	85 c0                	test   eax,eax
c0006332:	0f 85 d3 00 00 00    	jne    c000640b <f_getfree+0x1aa>
c0006338:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000633c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006340:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006344:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006348:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634c:	8d 4e f8             	lea    ecx,[esi-0x8]
c000634f:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006353:	89 cf                	mov    edi,ecx
c0006355:	85 f6                	test   esi,esi
c0006357:	74 12                	je     c000636b <f_getfree+0x10a>
c0006359:	88 c1                	mov    cl,al
c000635b:	83 e1 01             	and    ecx,0x1
c000635e:	80 f9 01             	cmp    cl,0x1
c0006361:	83 d3 00             	adc    ebx,0x0
c0006364:	d0 e8                	shr    al,1
c0006366:	4e                   	dec    esi
c0006367:	39 fe                	cmp    esi,edi
c0006369:	75 ea                	jne    c0006355 <f_getfree+0xf4>
c000636b:	45                   	inc    ebp
c000636c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006372:	85 f6                	test   esi,esi
c0006374:	75 8f                	jne    c0006305 <f_getfree+0xa4>
c0006376:	e9 94 00 00 00       	jmp    c000640f <f_getfree+0x1ae>
c000637b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000637e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006381:	31 f6                	xor    esi,esi
c0006383:	31 db                	xor    ebx,ebx
c0006385:	85 f6                	test   esi,esi
c0006387:	75 1b                	jne    c00063a4 <f_getfree+0x143>
c0006389:	89 d7                	mov    edi,edx
c000638b:	89 cd                	mov    ebp,ecx
c000638d:	83 c7 01             	add    edi,0x1
c0006390:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006394:	83 d5 00             	adc    ebp,0x0
c0006397:	e8 ed c0 ff ff       	call   c0002489 <move_window>
c000639c:	85 c0                	test   eax,eax
c000639e:	75 6b                	jne    c000640b <f_getfree+0x1aa>
c00063a0:	89 fa                	mov    edx,edi
c00063a2:	89 e9                	mov    ecx,ebp
c00063a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063a8:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00063ac:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c00063b0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00063b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00063b7:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00063bb:	75 11                	jne    c00063ce <f_getfree+0x16d>
c00063bd:	e8 e9 b8 ff ff       	call   c0001cab <ld_word>
c00063c2:	66 83 f8 01          	cmp    ax,0x1
c00063c6:	83 d3 00             	adc    ebx,0x0
c00063c9:	83 c6 02             	add    esi,0x2
c00063cc:	eb 13                	jmp    c00063e1 <f_getfree+0x180>
c00063ce:	e8 e5 b8 ff ff       	call   c0001cb8 <ld_dword>
c00063d3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00063d8:	83 f8 01             	cmp    eax,0x1
c00063db:	83 d3 00             	adc    ebx,0x0
c00063de:	83 c6 04             	add    esi,0x4
c00063e1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00063e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063ef:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063f3:	75 90                	jne    c0006385 <f_getfree+0x124>
c00063f5:	eb 18                	jmp    c000640f <f_getfree+0x1ae>
c00063f7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063ff:	eb 0e                	jmp    c000640f <f_getfree+0x1ae>
c0006401:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006409:	eb 04                	jmp    c000640f <f_getfree+0x1ae>
c000640b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000640f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006413:	89 18                	mov    DWORD PTR [eax],ebx
c0006415:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006419:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c000641c:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006420:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006424:	83 c4 5c             	add    esp,0x5c
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <f_truncate>:
c000642c:	56                   	push   esi
c000642d:	53                   	push   ebx
c000642e:	83 ec 14             	sub    esp,0x14
c0006431:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006435:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006439:	89 d8                	mov    eax,ebx
c000643b:	e8 6e bf ff ff       	call   c00023ae <validate>
c0006440:	89 c6                	mov    esi,eax
c0006442:	85 c0                	test   eax,eax
c0006444:	0f 85 d2 00 00 00    	jne    c000651c <f_truncate+0xf0>
c000644a:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000644e:	85 f6                	test   esi,esi
c0006450:	0f 85 c6 00 00 00    	jne    c000651c <f_truncate+0xf0>
c0006456:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000645a:	0f 84 b7 00 00 00    	je     c0006517 <f_truncate+0xeb>
c0006460:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006463:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006466:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006469:	89 d1                	mov    ecx,edx
c000646b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000646e:	0f 83 a8 00 00 00    	jae    c000651c <f_truncate+0xf0>
c0006474:	09 c2                	or     edx,eax
c0006476:	75 15                	jne    c000648d <f_truncate+0x61>
c0006478:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000647b:	31 c9                	xor    ecx,ecx
c000647d:	89 d8                	mov    eax,ebx
c000647f:	e8 7a d0 ff ff       	call   c00034fe <remove_chain>
c0006484:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000648b:	eb 35                	jmp    c00064c2 <f_truncate+0x96>
c000648d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006490:	89 d8                	mov    eax,ebx
c0006492:	e8 7a cb ff ff       	call   c0003011 <get_fat>
c0006497:	89 c2                	mov    edx,eax
c0006499:	b8 01 00 00 00       	mov    eax,0x1
c000649e:	83 fa ff             	cmp    edx,0xffffffff
c00064a1:	74 1f                	je     c00064c2 <f_truncate+0x96>
c00064a3:	b8 02 00 00 00       	mov    eax,0x2
c00064a8:	83 fa 01             	cmp    edx,0x1
c00064ab:	74 15                	je     c00064c2 <f_truncate+0x96>
c00064ad:	31 c0                	xor    eax,eax
c00064af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00064b3:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c00064b6:	76 0a                	jbe    c00064c2 <f_truncate+0x96>
c00064b8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00064bb:	89 d8                	mov    eax,ebx
c00064bd:	e8 3c d0 ff ff       	call   c00034fe <remove_chain>
c00064c2:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00064c5:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00064c8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00064cb:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00064ce:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00064d1:	83 ca 40             	or     edx,0x40
c00064d4:	85 c0                	test   eax,eax
c00064d6:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00064d9:	75 35                	jne    c0006510 <f_truncate+0xe4>
c00064db:	84 d2                	test   dl,dl
c00064dd:	79 3d                	jns    c000651c <f_truncate+0xf0>
c00064df:	83 ec 0c             	sub    esp,0xc
c00064e2:	8d 43 50             	lea    eax,[ebx+0x50]
c00064e5:	6a 01                	push   0x1
c00064e7:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064ea:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064ed:	50                   	push   eax
c00064ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064f2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064f6:	50                   	push   eax
c00064f7:	e8 7a b7 ff ff       	call   c0001c76 <disk_write>
c00064fc:	83 c4 20             	add    esp,0x20
c00064ff:	85 c0                	test   eax,eax
c0006501:	75 08                	jne    c000650b <f_truncate+0xdf>
c0006503:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006507:	31 f6                	xor    esi,esi
c0006509:	eb 11                	jmp    c000651c <f_truncate+0xf0>
c000650b:	b8 01 00 00 00       	mov    eax,0x1
c0006510:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006513:	89 c6                	mov    esi,eax
c0006515:	eb 05                	jmp    c000651c <f_truncate+0xf0>
c0006517:	be 07 00 00 00       	mov    esi,0x7
c000651c:	89 f0                	mov    eax,esi
c000651e:	83 c4 14             	add    esp,0x14
c0006521:	5b                   	pop    ebx
c0006522:	5e                   	pop    esi
c0006523:	c3                   	ret    

c0006524 <f_unlink>:
c0006524:	56                   	push   esi
c0006525:	b9 02 00 00 00       	mov    ecx,0x2
c000652a:	53                   	push   ebx
c000652b:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006531:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006535:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000653c:	e8 fa c1 ff ff       	call   c000273b <mount_volume>
c0006541:	85 c0                	test   eax,eax
c0006543:	0f 85 55 01 00 00    	jne    c000669e <f_unlink+0x17a>
c0006549:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000654d:	83 ec 0c             	sub    esp,0xc
c0006550:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006554:	68 60 04 00 00       	push   0x460
c0006559:	e8 80 1f 00 00       	call   c00084de <ff_memalloc>
c000655e:	83 c4 10             	add    esp,0x10
c0006561:	89 c3                	mov    ebx,eax
c0006563:	b8 11 00 00 00       	mov    eax,0x11
c0006568:	85 db                	test   ebx,ebx
c000656a:	0f 84 2e 01 00 00    	je     c000669e <f_unlink+0x17a>
c0006570:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006574:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000657a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000657d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006580:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006587:	8d 44 24 48          	lea    eax,[esp+0x48]
c000658b:	e8 21 e9 ff ff       	call   c0004eb1 <follow_path>
c0006590:	85 c0                	test   eax,eax
c0006592:	0f 85 f2 00 00 00    	jne    c000668a <f_unlink+0x166>
c0006598:	b8 06 00 00 00       	mov    eax,0x6
c000659d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00065a5:	0f 88 df 00 00 00    	js     c000668a <f_unlink+0x166>
c00065ab:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c00065b0:	74 0a                	je     c00065bc <f_unlink+0x98>
c00065b2:	b8 07 00 00 00       	mov    eax,0x7
c00065b7:	e9 ce 00 00 00       	jmp    c000668a <f_unlink+0x166>
c00065bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00065c0:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00065c4:	8a 02                	mov    al,BYTE PTR [edx]
c00065c6:	3c 04                	cmp    al,0x4
c00065c8:	75 12                	jne    c00065dc <f_unlink+0xb8>
c00065ca:	8d 42 10             	lea    eax,[edx+0x10]
c00065cd:	8d 54 24 20          	lea    edx,[esp+0x20]
c00065d1:	e8 a1 e8 ff ff       	call   c0004e77 <init_alloc_info.isra.2>
c00065d6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00065da:	eb 0e                	jmp    c00065ea <f_unlink+0xc6>
c00065dc:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00065e3:	e8 3e e8 ff ff       	call   c0004e26 <ld_clust.isra.0>
c00065e8:	89 c6                	mov    esi,eax
c00065ea:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065ef:	75 12                	jne    c0006603 <f_unlink+0xdf>
c00065f1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065f5:	e8 94 d6 ff ff       	call   c0003c8e <dir_remove>
c00065fa:	85 c0                	test   eax,eax
c00065fc:	74 6c                	je     c000666a <f_unlink+0x146>
c00065fe:	e9 87 00 00 00       	jmp    c000668a <f_unlink+0x166>
c0006603:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006607:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000660e:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006615:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006618:	75 21                	jne    c000663b <f_unlink+0x117>
c000661a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000661e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006622:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c0006629:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006630:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006634:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000663b:	31 d2                	xor    edx,edx
c000663d:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006644:	e8 be cb ff ff       	call   c0003207 <dir_sdi>
c0006649:	85 c0                	test   eax,eax
c000664b:	75 3d                	jne    c000668a <f_unlink+0x166>
c000664d:	31 d2                	xor    edx,edx
c000664f:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006656:	e8 bc d3 ff ff       	call   c0003a17 <dir_read>
c000665b:	85 c0                	test   eax,eax
c000665d:	0f 84 4f ff ff ff    	je     c00065b2 <f_unlink+0x8e>
c0006663:	83 f8 04             	cmp    eax,0x4
c0006666:	75 22                	jne    c000668a <f_unlink+0x166>
c0006668:	eb 87                	jmp    c00065f1 <f_unlink+0xcd>
c000666a:	85 f6                	test   esi,esi
c000666c:	75 0b                	jne    c0006679 <f_unlink+0x155>
c000666e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006672:	e8 3d df ff ff       	call   c00045b4 <sync_fs>
c0006677:	eb 11                	jmp    c000668a <f_unlink+0x166>
c0006679:	31 c9                	xor    ecx,ecx
c000667b:	89 f2                	mov    edx,esi
c000667d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006681:	e8 78 ce ff ff       	call   c00034fe <remove_chain>
c0006686:	85 c0                	test   eax,eax
c0006688:	74 e4                	je     c000666e <f_unlink+0x14a>
c000668a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000668e:	83 ec 0c             	sub    esp,0xc
c0006691:	53                   	push   ebx
c0006692:	e8 5d 1e 00 00       	call   c00084f4 <ff_memfree>
c0006697:	83 c4 10             	add    esp,0x10
c000669a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000669e:	81 c4 e4 00 00 00    	add    esp,0xe4
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	c3                   	ret    

c00066a7 <f_mkdir>:
c00066a7:	57                   	push   edi
c00066a8:	b9 02 00 00 00       	mov    ecx,0x2
c00066ad:	56                   	push   esi
c00066ae:	53                   	push   ebx
c00066af:	83 c4 80             	add    esp,0xffffff80
c00066b2:	8d 54 24 08          	lea    edx,[esp+0x8]
c00066b6:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c00066bd:	e8 79 c0 ff ff       	call   c000273b <mount_volume>
c00066c2:	89 c3                	mov    ebx,eax
c00066c4:	85 c0                	test   eax,eax
c00066c6:	0f 85 fe 01 00 00    	jne    c00068ca <f_mkdir+0x223>
c00066cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d0:	bb 11 00 00 00       	mov    ebx,0x11
c00066d5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00066d9:	83 ec 0c             	sub    esp,0xc
c00066dc:	68 60 04 00 00       	push   0x460
c00066e1:	e8 f8 1d 00 00       	call   c00084de <ff_memalloc>
c00066e6:	83 c4 10             	add    esp,0x10
c00066e9:	89 c7                	mov    edi,eax
c00066eb:	85 c0                	test   eax,eax
c00066ed:	0f 84 d7 01 00 00    	je     c00068ca <f_mkdir+0x223>
c00066f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006700:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006703:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000670a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000670e:	e8 9e e7 ff ff       	call   c0004eb1 <follow_path>
c0006713:	89 c3                	mov    ebx,eax
c0006715:	85 c0                	test   eax,eax
c0006717:	74 3e                	je     c0006757 <f_mkdir+0xb0>
c0006719:	83 f8 04             	cmp    eax,0x4
c000671c:	75 3e                	jne    c000675c <f_mkdir+0xb5>
c000671e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006722:	31 d2                	xor    edx,edx
c0006724:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006728:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000672c:	e8 ce cb ff ff       	call   c00032ff <create_chain>
c0006731:	89 c6                	mov    esi,eax
c0006733:	85 c0                	test   eax,eax
c0006735:	74 0c                	je     c0006743 <f_mkdir+0x9c>
c0006737:	bb 02 00 00 00       	mov    ebx,0x2
c000673c:	83 f8 01             	cmp    eax,0x1
c000673f:	74 07                	je     c0006748 <f_mkdir+0xa1>
c0006741:	eb 2a                	jmp    c000676d <f_mkdir+0xc6>
c0006743:	bb 07 00 00 00       	mov    ebx,0x7
c0006748:	31 c9                	xor    ecx,ecx
c000674a:	89 f2                	mov    edx,esi
c000674c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006750:	e8 a9 cd ff ff       	call   c00034fe <remove_chain>
c0006755:	eb 05                	jmp    c000675c <f_mkdir+0xb5>
c0006757:	bb 08 00 00 00       	mov    ebx,0x8
c000675c:	83 ec 0c             	sub    esp,0xc
c000675f:	57                   	push   edi
c0006760:	e8 8f 1d 00 00       	call   c00084f4 <ff_memfree>
c0006765:	83 c4 10             	add    esp,0x10
c0006768:	e9 5d 01 00 00       	jmp    c00068ca <f_mkdir+0x223>
c000676d:	bb 01 00 00 00       	mov    ebx,0x1
c0006772:	83 f8 ff             	cmp    eax,0xffffffff
c0006775:	74 d1                	je     c0006748 <f_mkdir+0xa1>
c0006777:	89 f2                	mov    edx,esi
c0006779:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000677d:	e8 c4 ce ff ff       	call   c0003646 <dir_clear>
c0006782:	89 c3                	mov    ebx,eax
c0006784:	85 c0                	test   eax,eax
c0006786:	75 c0                	jne    c0006748 <f_mkdir+0xa1>
c0006788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000678f:	74 69                	je     c00067fa <f_mkdir+0x153>
c0006791:	b9 0b 00 00 00       	mov    ecx,0xb
c0006796:	83 c0 54             	add    eax,0x54
c0006799:	ba 20 00 00 00       	mov    edx,0x20
c000679e:	e8 9c b5 ff ff       	call   c0001d3f <mem_set>
c00067a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a7:	ba 00 00 21 50       	mov    edx,0x50210000
c00067ac:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c00067b0:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c00067b4:	83 c0 6a             	add    eax,0x6a
c00067b7:	e8 65 b5 ff ff       	call   c0001d21 <st_dword>
c00067bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c0:	89 f1                	mov    ecx,esi
c00067c2:	8d 50 54             	lea    edx,[eax+0x54]
c00067c5:	e8 85 e6 ff ff       	call   c0004e4f <st_clust.isra.1>
c00067ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ce:	b9 20 00 00 00       	mov    ecx,0x20
c00067d3:	8d 50 54             	lea    edx,[eax+0x54]
c00067d6:	83 c0 74             	add    eax,0x74
c00067d9:	e8 4c b5 ff ff       	call   c0001d2a <mem_cpy>
c00067de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e2:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00067e6:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067ea:	8d 50 74             	lea    edx,[eax+0x74]
c00067ed:	e8 5d e6 ff ff       	call   c0004e4f <st_clust.isra.1>
c00067f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067fa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067fe:	e8 2f db ff ff       	call   c0004332 <dir_register>
c0006803:	89 c3                	mov    ebx,eax
c0006805:	85 c0                	test   eax,eax
c0006807:	0f 85 3b ff ff ff    	jne    c0006748 <f_mkdir+0xa1>
c000680d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006811:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006814:	75 74                	jne    c000688a <f_mkdir+0x1e3>
c0006816:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006819:	ba 00 00 21 50       	mov    edx,0x50210000
c000681e:	83 c0 0c             	add    eax,0xc
c0006821:	e8 fb b4 ff ff       	call   c0001d21 <st_dword>
c0006826:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000682a:	89 f2                	mov    edx,esi
c000682c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000682f:	83 c0 34             	add    eax,0x34
c0006832:	e8 ea b4 ff ff       	call   c0001d21 <st_dword>
c0006837:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000683f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006842:	c1 e2 09             	shl    edx,0x9
c0006845:	83 c0 38             	add    eax,0x38
c0006848:	e8 d4 b4 ff ff       	call   c0001d21 <st_dword>
c000684d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006851:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006855:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006858:	c1 e2 09             	shl    edx,0x9
c000685b:	83 c0 28             	add    eax,0x28
c000685e:	e8 be b4 ff ff       	call   c0001d21 <st_dword>
c0006863:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006867:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000686a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000686e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006871:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006875:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006879:	e8 8b d3 ff ff       	call   c0003c09 <store_xdir>
c000687e:	89 c3                	mov    ebx,eax
c0006880:	85 c0                	test   eax,eax
c0006882:	0f 85 d4 fe ff ff    	jne    c000675c <f_mkdir+0xb5>
c0006888:	eb 30                	jmp    c00068ba <f_mkdir+0x213>
c000688a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000688e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006893:	83 c0 16             	add    eax,0x16
c0006896:	e8 86 b4 ff ff       	call   c0001d21 <st_dword>
c000689b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000689f:	89 f1                	mov    ecx,esi
c00068a1:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00068a5:	e8 a5 e5 ff ff       	call   c0004e4f <st_clust.isra.1>
c00068aa:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00068ae:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c00068b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00068b6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00068be:	e8 f1 dc ff ff       	call   c00045b4 <sync_fs>
c00068c3:	89 c3                	mov    ebx,eax
c00068c5:	e9 92 fe ff ff       	jmp    c000675c <f_mkdir+0xb5>
c00068ca:	83 ec 80             	sub    esp,0xffffff80
c00068cd:	89 d8                	mov    eax,ebx
c00068cf:	5b                   	pop    ebx
c00068d0:	5e                   	pop    esi
c00068d1:	5f                   	pop    edi
c00068d2:	c3                   	ret    

c00068d3 <f_rename>:
c00068d3:	55                   	push   ebp
c00068d4:	57                   	push   edi
c00068d5:	56                   	push   esi
c00068d6:	53                   	push   ebx
c00068d7:	81 ec fc 00 00 00    	sub    esp,0xfc
c00068dd:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00068e4:	e8 a4 b9 ff ff       	call   c000228d <get_ldnumber>
c00068e9:	b9 02 00 00 00       	mov    ecx,0x2
c00068ee:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068f2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068f9:	e8 3d be ff ff       	call   c000273b <mount_volume>
c00068fe:	85 c0                	test   eax,eax
c0006900:	0f 85 b5 02 00 00    	jne    c0006bbb <f_rename+0x2e8>
c0006906:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000690a:	83 ec 0c             	sub    esp,0xc
c000690d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006911:	68 60 04 00 00       	push   0x460
c0006916:	e8 c3 1b 00 00       	call   c00084de <ff_memalloc>
c000691b:	83 c4 10             	add    esp,0x10
c000691e:	89 c3                	mov    ebx,eax
c0006920:	b8 11 00 00 00       	mov    eax,0x11
c0006925:	85 db                	test   ebx,ebx
c0006927:	0f 84 8e 02 00 00    	je     c0006bbb <f_rename+0x2e8>
c000692d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006931:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006937:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000693a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000693d:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006944:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006948:	e8 64 e5 ff ff       	call   c0004eb1 <follow_path>
c000694d:	85 c0                	test   eax,eax
c000694f:	0f 85 52 02 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c0006955:	b8 06 00 00 00       	mov    eax,0x6
c000695a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006962:	0f 85 3f 02 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c0006968:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000696c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000696f:	0f 85 05 01 00 00    	jne    c0006a7a <f_rename+0x1a7>
c0006975:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006978:	b9 40 00 00 00       	mov    ecx,0x40
c000697d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006981:	e8 a4 b3 ff ff       	call   c0001d2a <mem_cpy>
c0006986:	b9 4c 00 00 00       	mov    ecx,0x4c
c000698b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000698f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006996:	e8 8f b3 ff ff       	call   c0001d2a <mem_cpy>
c000699b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00069a2:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a9:	e8 03 e5 ff ff       	call   c0004eb1 <follow_path>
c00069ae:	85 c0                	test   eax,eax
c00069b0:	75 29                	jne    c00069db <f_rename+0x108>
c00069b2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00069b6:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00069bd:	74 0a                	je     c00069c9 <f_rename+0xf6>
c00069bf:	b8 08 00 00 00       	mov    eax,0x8
c00069c4:	e9 de 01 00 00       	jmp    c0006ba7 <f_rename+0x2d4>
c00069c9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00069d0:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00069d7:	75 e6                	jne    c00069bf <f_rename+0xec>
c00069d9:	eb 09                	jmp    c00069e4 <f_rename+0x111>
c00069db:	83 f8 04             	cmp    eax,0x4
c00069de:	0f 85 c3 01 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c00069e4:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069eb:	e8 42 d9 ff ff       	call   c0004332 <dir_register>
c00069f0:	85 c0                	test   eax,eax
c00069f2:	0f 85 af 01 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c00069f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069fc:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069ff:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006a02:	89 c5                	mov    ebp,eax
c0006a04:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006a07:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006a0b:	8d 46 24             	lea    eax,[esi+0x24]
c0006a0e:	e8 98 b2 ff ff       	call   c0001cab <ld_word>
c0006a13:	b9 40 00 00 00       	mov    ecx,0x40
c0006a18:	89 c7                	mov    edi,eax
c0006a1a:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006a1e:	89 f0                	mov    eax,esi
c0006a20:	e8 05 b3 ff ff       	call   c0001d2a <mem_cpy>
c0006a25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a29:	89 e9                	mov    ecx,ebp
c0006a2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a2e:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006a31:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006a35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a39:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a3c:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006a3f:	0f b7 d7             	movzx  edx,di
c0006a42:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a45:	83 c0 24             	add    eax,0x24
c0006a48:	e8 d0 b2 ff ff       	call   c0001d1d <st_word>
c0006a4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a51:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a54:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a57:	a8 10                	test   al,0x10
c0006a59:	75 06                	jne    c0006a61 <f_rename+0x18e>
c0006a5b:	83 c8 20             	or     eax,0x20
c0006a5e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 9c d1 ff ff       	call   c0003c09 <store_xdir>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	0f 84 1c 01 00 00    	je     c0006b91 <f_rename+0x2be>
c0006a75:	e9 2d 01 00 00       	jmp    c0006ba7 <f_rename+0x2d4>
c0006a7a:	b9 20 00 00 00       	mov    ecx,0x20
c0006a7f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a86:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a8a:	e8 9b b2 ff ff       	call   c0001d2a <mem_cpy>
c0006a8f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a94:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a98:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a9f:	e8 86 b2 ff ff       	call   c0001d2a <mem_cpy>
c0006aa4:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006aab:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006ab2:	e8 fa e3 ff ff       	call   c0004eb1 <follow_path>
c0006ab7:	85 c0                	test   eax,eax
c0006ab9:	75 27                	jne    c0006ae2 <f_rename+0x20f>
c0006abb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006abf:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006ac6:	0f 85 f3 fe ff ff    	jne    c00069bf <f_rename+0xec>
c0006acc:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006ad3:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006ada:	0f 85 df fe ff ff    	jne    c00069bf <f_rename+0xec>
c0006ae0:	eb 09                	jmp    c0006aeb <f_rename+0x218>
c0006ae2:	83 f8 04             	cmp    eax,0x4
c0006ae5:	0f 85 bc 00 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c0006aeb:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006af2:	e8 3b d8 ff ff       	call   c0004332 <dir_register>
c0006af7:	85 c0                	test   eax,eax
c0006af9:	0f 85 a8 00 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c0006aff:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006b06:	b9 13 00 00 00       	mov    ecx,0x13
c0006b0b:	8d 46 0d             	lea    eax,[esi+0xd]
c0006b0e:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006b12:	e8 13 b2 ff ff       	call   c0001d2a <mem_cpy>
c0006b17:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006b1b:	a8 10                	test   al,0x10
c0006b1d:	75 03                	jne    c0006b22 <f_rename+0x24f>
c0006b1f:	83 c8 20             	or     eax,0x20
c0006b22:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006b25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b29:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b2d:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006b31:	74 5e                	je     c0006b91 <f_rename+0x2be>
c0006b33:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006b3a:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006b3e:	74 51                	je     c0006b91 <f_rename+0x2be>
c0006b40:	89 f2                	mov    edx,esi
c0006b42:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006b46:	8a 07                	mov    al,BYTE PTR [edi]
c0006b48:	e8 d9 e2 ff ff       	call   c0004e26 <ld_clust.isra.0>
c0006b4d:	89 c2                	mov    edx,eax
c0006b4f:	89 f8                	mov    eax,edi
c0006b51:	e8 ee b3 ff ff       	call   c0001f44 <clst2sect>
c0006b56:	89 c6                	mov    esi,eax
c0006b58:	89 d1                	mov    ecx,edx
c0006b5a:	b8 02 00 00 00       	mov    eax,0x2
c0006b5f:	09 f2                	or     edx,esi
c0006b61:	74 44                	je     c0006ba7 <f_rename+0x2d4>
c0006b63:	89 f2                	mov    edx,esi
c0006b65:	89 f8                	mov    eax,edi
c0006b67:	e8 1d b9 ff ff       	call   c0002489 <move_window>
c0006b6c:	85 c0                	test   eax,eax
c0006b6e:	75 37                	jne    c0006ba7 <f_rename+0x2d4>
c0006b70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b74:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b78:	75 17                	jne    c0006b91 <f_rename+0x2be>
c0006b7a:	8d 50 74             	lea    edx,[eax+0x74]
c0006b7d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b84:	e8 c6 e2 ff ff       	call   c0004e4f <st_clust.isra.1>
c0006b89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b8d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b91:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b95:	e8 f4 d0 ff ff       	call   c0003c8e <dir_remove>
c0006b9a:	85 c0                	test   eax,eax
c0006b9c:	75 09                	jne    c0006ba7 <f_rename+0x2d4>
c0006b9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006ba2:	e8 0d da ff ff       	call   c00045b4 <sync_fs>
c0006ba7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	53                   	push   ebx
c0006baf:	e8 40 19 00 00       	call   c00084f4 <ff_memfree>
c0006bb4:	83 c4 10             	add    esp,0x10
c0006bb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bbb:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006bc1:	5b                   	pop    ebx
c0006bc2:	5e                   	pop    esi
c0006bc3:	5f                   	pop    edi
c0006bc4:	5d                   	pop    ebp
c0006bc5:	c3                   	ret    

c0006bc6 <f_chmod>:
c0006bc6:	57                   	push   edi
c0006bc7:	b9 02 00 00 00       	mov    ecx,0x2
c0006bcc:	56                   	push   esi
c0006bcd:	53                   	push   ebx
c0006bce:	83 ec 60             	sub    esp,0x60
c0006bd1:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006bd5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006bd9:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006bdd:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006be1:	e8 55 bb ff ff       	call   c000273b <mount_volume>
c0006be6:	85 c0                	test   eax,eax
c0006be8:	0f 85 af 00 00 00    	jne    c0006c9d <f_chmod+0xd7>
c0006bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bf2:	83 ec 0c             	sub    esp,0xc
c0006bf5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006bf9:	68 60 04 00 00       	push   0x460
c0006bfe:	e8 db 18 00 00       	call   c00084de <ff_memalloc>
c0006c03:	83 c4 10             	add    esp,0x10
c0006c06:	89 c6                	mov    esi,eax
c0006c08:	b8 11 00 00 00       	mov    eax,0x11
c0006c0d:	85 f6                	test   esi,esi
c0006c0f:	0f 84 88 00 00 00    	je     c0006c9d <f_chmod+0xd7>
c0006c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006c1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006c22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c25:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c29:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c2d:	e8 7f e2 ff ff       	call   c0004eb1 <follow_path>
c0006c32:	85 c0                	test   eax,eax
c0006c34:	75 53                	jne    c0006c89 <f_chmod+0xc3>
c0006c36:	b8 06 00 00 00       	mov    eax,0x6
c0006c3b:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c40:	75 47                	jne    c0006c89 <f_chmod+0xc3>
c0006c42:	89 f9                	mov    ecx,edi
c0006c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c48:	83 e1 27             	and    ecx,0x27
c0006c4b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c4e:	75 1d                	jne    c0006c6d <f_chmod+0xa7>
c0006c50:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c53:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c56:	21 cb                	and    ebx,ecx
c0006c58:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c5b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c5e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c62:	e8 a2 cf ff ff       	call   c0003c09 <store_xdir>
c0006c67:	85 c0                	test   eax,eax
c0006c69:	75 1e                	jne    c0006c89 <f_chmod+0xc3>
c0006c6b:	eb 13                	jmp    c0006c80 <f_chmod+0xba>
c0006c6d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c71:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c74:	21 cb                	and    ebx,ecx
c0006c76:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c79:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c84:	e8 2b d9 ff ff       	call   c00045b4 <sync_fs>
c0006c89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c8d:	83 ec 0c             	sub    esp,0xc
c0006c90:	56                   	push   esi
c0006c91:	e8 5e 18 00 00       	call   c00084f4 <ff_memfree>
c0006c96:	83 c4 10             	add    esp,0x10
c0006c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c9d:	83 c4 60             	add    esp,0x60
c0006ca0:	5b                   	pop    ebx
c0006ca1:	5e                   	pop    esi
c0006ca2:	5f                   	pop    edi
c0006ca3:	c3                   	ret    

c0006ca4 <f_utime>:
c0006ca4:	56                   	push   esi
c0006ca5:	b9 02 00 00 00       	mov    ecx,0x2
c0006caa:	53                   	push   ebx
c0006cab:	83 ec 64             	sub    esp,0x64
c0006cae:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006cb2:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006cb6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006cba:	e8 7c ba ff ff       	call   c000273b <mount_volume>
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	0f 85 b5 00 00 00    	jne    c0006d7c <f_utime+0xd8>
c0006cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ccb:	83 ec 0c             	sub    esp,0xc
c0006cce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006cd2:	68 60 04 00 00       	push   0x460
c0006cd7:	e8 02 18 00 00       	call   c00084de <ff_memalloc>
c0006cdc:	83 c4 10             	add    esp,0x10
c0006cdf:	89 c3                	mov    ebx,eax
c0006ce1:	b8 11 00 00 00       	mov    eax,0x11
c0006ce6:	85 db                	test   ebx,ebx
c0006ce8:	0f 84 8e 00 00 00    	je     c0006d7c <f_utime+0xd8>
c0006cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cf2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cf8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cfb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cfe:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006d02:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d06:	e8 a6 e1 ff ff       	call   c0004eb1 <follow_path>
c0006d0b:	85 c0                	test   eax,eax
c0006d0d:	75 59                	jne    c0006d68 <f_utime+0xc4>
c0006d0f:	b8 06 00 00 00       	mov    eax,0x6
c0006d14:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006d19:	75 4d                	jne    c0006d68 <f_utime+0xc4>
c0006d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d1f:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006d23:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006d27:	c1 e2 10             	shl    edx,0x10
c0006d2a:	09 ca                	or     edx,ecx
c0006d2c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d2f:	75 1a                	jne    c0006d4b <f_utime+0xa7>
c0006d31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006d34:	83 c0 0c             	add    eax,0xc
c0006d37:	e8 e5 af ff ff       	call   c0001d21 <st_dword>
c0006d3c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d40:	e8 c4 ce ff ff       	call   c0003c09 <store_xdir>
c0006d45:	85 c0                	test   eax,eax
c0006d47:	75 1f                	jne    c0006d68 <f_utime+0xc4>
c0006d49:	eb 14                	jmp    c0006d5f <f_utime+0xbb>
c0006d4b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d4f:	83 c0 16             	add    eax,0x16
c0006d52:	e8 ca af ff ff       	call   c0001d21 <st_dword>
c0006d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d63:	e8 4c d8 ff ff       	call   c00045b4 <sync_fs>
c0006d68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d6c:	83 ec 0c             	sub    esp,0xc
c0006d6f:	53                   	push   ebx
c0006d70:	e8 7f 17 00 00       	call   c00084f4 <ff_memfree>
c0006d75:	83 c4 10             	add    esp,0x10
c0006d78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d7c:	83 c4 64             	add    esp,0x64
c0006d7f:	5b                   	pop    ebx
c0006d80:	5e                   	pop    esi
c0006d81:	c3                   	ret    

c0006d82 <f_getlabel>:
c0006d82:	55                   	push   ebp
c0006d83:	31 c9                	xor    ecx,ecx
c0006d85:	57                   	push   edi
c0006d86:	56                   	push   esi
c0006d87:	53                   	push   ebx
c0006d88:	83 ec 6c             	sub    esp,0x6c
c0006d8b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d8f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d96:	e8 a0 b9 ff ff       	call   c000273b <mount_volume>
c0006d9b:	89 c6                	mov    esi,eax
c0006d9d:	85 c0                	test   eax,eax
c0006d9f:	0f 85 c1 01 00 00    	jne    c0006f66 <f_getlabel+0x1e4>
c0006da5:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006dad:	0f 84 5f 01 00 00    	je     c0006f12 <f_getlabel+0x190>
c0006db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006db7:	31 d2                	xor    edx,edx
c0006db9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006dbd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006dc5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006dc9:	e8 39 c4 ff ff       	call   c0003207 <dir_sdi>
c0006dce:	85 c0                	test   eax,eax
c0006dd0:	0f 85 2d 01 00 00    	jne    c0006f03 <f_getlabel+0x181>
c0006dd6:	ba 01 00 00 00       	mov    edx,0x1
c0006ddb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ddf:	e8 33 cc ff ff       	call   c0003a17 <dir_read>
c0006de4:	85 c0                	test   eax,eax
c0006de6:	0f 85 17 01 00 00    	jne    c0006f03 <f_getlabel+0x181>
c0006dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006df3:	74 09                	je     c0006dfe <f_getlabel+0x7c>
c0006df5:	31 db                	xor    ebx,ebx
c0006df7:	31 c9                	xor    ecx,ecx
c0006df9:	e9 c8 00 00 00       	jmp    c0006ec6 <f_getlabel+0x144>
c0006dfe:	31 ed                	xor    ebp,ebp
c0006e00:	31 db                	xor    ebx,ebx
c0006e02:	31 ff                	xor    edi,edi
c0006e04:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006e08:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006e0c:	39 fa                	cmp    edx,edi
c0006e0e:	76 4b                	jbe    c0006e5b <f_getlabel+0xd9>
c0006e10:	47                   	inc    edi
c0006e11:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006e14:	01 d0                	add    eax,edx
c0006e16:	e8 90 ae ff ff       	call   c0001cab <ld_word>
c0006e1b:	66 85 ed             	test   bp,bp
c0006e1e:	75 0d                	jne    c0006e2d <f_getlabel+0xab>
c0006e20:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006e26:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006e2b:	76 28                	jbe    c0006e55 <f_getlabel+0xd3>
c0006e2d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e34:	89 e9                	mov    ecx,ebp
c0006e36:	01 da                	add    edx,ebx
c0006e38:	c1 e1 10             	shl    ecx,0x10
c0006e3b:	0f b7 c0             	movzx  eax,ax
c0006e3e:	09 c8                	or     eax,ecx
c0006e40:	b9 04 00 00 00       	mov    ecx,0x4
c0006e45:	e8 01 b0 ff ff       	call   c0001e4b <put_utf>
c0006e4a:	84 c0                	test   al,al
c0006e4c:	74 0b                	je     c0006e59 <f_getlabel+0xd7>
c0006e4e:	0f b6 c0             	movzx  eax,al
c0006e51:	01 c3                	add    ebx,eax
c0006e53:	31 c0                	xor    eax,eax
c0006e55:	89 c5                	mov    ebp,eax
c0006e57:	eb ab                	jmp    c0006e04 <f_getlabel+0x82>
c0006e59:	31 db                	xor    ebx,ebx
c0006e5b:	66 85 ed             	test   bp,bp
c0006e5e:	74 02                	je     c0006e62 <f_getlabel+0xe0>
c0006e60:	31 db                	xor    ebx,ebx
c0006e62:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e69:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e6d:	e9 a0 00 00 00       	jmp    c0006f12 <f_getlabel+0x190>
c0006e72:	83 ff 0b             	cmp    edi,0xb
c0006e75:	74 11                	je     c0006e88 <f_getlabel+0x106>
c0006e77:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e80:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e83:	c1 e0 08             	shl    eax,0x8
c0006e86:	09 c2                	or     edx,eax
c0006e88:	0f b7 d2             	movzx  edx,dx
c0006e8b:	50                   	push   eax
c0006e8c:	50                   	push   eax
c0006e8d:	68 b5 01 00 00       	push   0x1b5
c0006e92:	52                   	push   edx
c0006e93:	e8 03 17 00 00       	call   c000859b <ff_oem2uni>
c0006e98:	83 c4 10             	add    esp,0x10
c0006e9b:	66 85 c0             	test   ax,ax
c0006e9e:	74 46                	je     c0006ee6 <f_getlabel+0x164>
c0006ea0:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ea7:	0f b7 c0             	movzx  eax,ax
c0006eaa:	01 da                	add    edx,ebx
c0006eac:	b9 04 00 00 00       	mov    ecx,0x4
c0006eb1:	e8 95 af ff ff       	call   c0001e4b <put_utf>
c0006eb6:	84 c0                	test   al,al
c0006eb8:	74 2c                	je     c0006ee6 <f_getlabel+0x164>
c0006eba:	0f b6 c0             	movzx  eax,al
c0006ebd:	01 c3                	add    ebx,eax
c0006ebf:	83 ff 0b             	cmp    edi,0xb
c0006ec2:	74 24                	je     c0006ee8 <f_getlabel+0x166>
c0006ec4:	89 f9                	mov    ecx,edi
c0006ec6:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006eca:	8d 79 01             	lea    edi,[ecx+0x1]
c0006ecd:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006ed2:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006ed7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006edb:	e8 9f ae ff ff       	call   c0001d7f <dbc_1st>
c0006ee0:	85 c0                	test   eax,eax
c0006ee2:	74 a4                	je     c0006e88 <f_getlabel+0x106>
c0006ee4:	eb 8c                	jmp    c0006e72 <f_getlabel+0xf0>
c0006ee6:	31 db                	xor    ebx,ebx
c0006ee8:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006eef:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ef2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006ef9:	74 17                	je     c0006f12 <f_getlabel+0x190>
c0006efb:	4b                   	dec    ebx
c0006efc:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eff:	74 ee                	je     c0006eef <f_getlabel+0x16d>
c0006f01:	eb 0f                	jmp    c0006f12 <f_getlabel+0x190>
c0006f03:	83 f8 04             	cmp    eax,0x4
c0006f06:	75 5c                	jne    c0006f64 <f_getlabel+0x1e2>
c0006f08:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006f0f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006f12:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006f1a:	74 4a                	je     c0006f66 <f_getlabel+0x1e4>
c0006f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f20:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006f23:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006f26:	e8 5e b5 ff ff       	call   c0002489 <move_window>
c0006f2b:	89 c6                	mov    esi,eax
c0006f2d:	85 c0                	test   eax,eax
c0006f2f:	75 35                	jne    c0006f66 <f_getlabel+0x1e4>
c0006f31:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006f35:	b8 43 00 00 00       	mov    eax,0x43
c0006f3a:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006f3c:	80 f9 03             	cmp    cl,0x3
c0006f3f:	74 0f                	je     c0006f50 <f_getlabel+0x1ce>
c0006f41:	31 c0                	xor    eax,eax
c0006f43:	80 f9 04             	cmp    cl,0x4
c0006f46:	0f 94 c0             	sete   al
c0006f49:	48                   	dec    eax
c0006f4a:	83 e0 c3             	and    eax,0xffffffc3
c0006f4d:	83 c0 64             	add    eax,0x64
c0006f50:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f54:	e8 5f ad ff ff       	call   c0001cb8 <ld_dword>
c0006f59:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f60:	89 07                	mov    DWORD PTR [edi],eax
c0006f62:	eb 02                	jmp    c0006f66 <f_getlabel+0x1e4>
c0006f64:	89 c6                	mov    esi,eax
c0006f66:	83 c4 6c             	add    esp,0x6c
c0006f69:	89 f0                	mov    eax,esi
c0006f6b:	5b                   	pop    ebx
c0006f6c:	5e                   	pop    esi
c0006f6d:	5f                   	pop    edi
c0006f6e:	5d                   	pop    ebp
c0006f6f:	c3                   	ret    

c0006f70 <f_setlabel>:
c0006f70:	56                   	push   esi
c0006f71:	b9 02 00 00 00       	mov    ecx,0x2
c0006f76:	53                   	push   ebx
c0006f77:	83 ec 74             	sub    esp,0x74
c0006f7a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f7e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f85:	e8 b1 b7 ff ff       	call   c000273b <mount_volume>
c0006f8a:	89 c6                	mov    esi,eax
c0006f8c:	85 c0                	test   eax,eax
c0006f8e:	0f 85 41 02 00 00    	jne    c00071d5 <f_setlabel+0x265>
c0006f94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f98:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f9b:	0f 85 8e 00 00 00    	jne    c000702f <f_setlabel+0xbf>
c0006fa1:	b9 16 00 00 00       	mov    ecx,0x16
c0006fa6:	31 d2                	xor    edx,edx
c0006fa8:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fac:	31 db                	xor    ebx,ebx
c0006fae:	e8 8c ad ff ff       	call   c0001d3f <mem_set>
c0006fb3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fba:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fbd:	0f 86 0a 01 00 00    	jbe    c00070cd <f_setlabel+0x15d>
c0006fc3:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fca:	e8 b6 ad ff ff       	call   c0001d85 <tchar2uni>
c0006fcf:	89 c6                	mov    esi,eax
c0006fd1:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fd6:	76 2a                	jbe    c0007002 <f_setlabel+0x92>
c0006fd8:	83 f8 ff             	cmp    eax,0xffffffff
c0006fdb:	74 05                	je     c0006fe2 <f_setlabel+0x72>
c0006fdd:	83 fb 09             	cmp    ebx,0x9
c0006fe0:	76 0a                	jbe    c0006fec <f_setlabel+0x7c>
c0006fe2:	be 06 00 00 00       	mov    esi,0x6
c0006fe7:	e9 e9 01 00 00       	jmp    c00071d5 <f_setlabel+0x265>
c0006fec:	89 c2                	mov    edx,eax
c0006fee:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ff2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ff5:	c1 ea 10             	shr    edx,0x10
c0006ff8:	01 c8                	add    eax,ecx
c0006ffa:	43                   	inc    ebx
c0006ffb:	e8 1d ad ff ff       	call   c0001d1d <st_word>
c0007000:	eb 04                	jmp    c0007006 <f_setlabel+0x96>
c0007002:	85 c0                	test   eax,eax
c0007004:	74 dc                	je     c0006fe2 <f_setlabel+0x72>
c0007006:	89 f2                	mov    edx,esi
c0007008:	b8 97 f6 01 c0       	mov    eax,0xc001f697
c000700d:	e8 5b ad ff ff       	call   c0001d6d <chk_chr>
c0007012:	85 c0                	test   eax,eax
c0007014:	75 cc                	jne    c0006fe2 <f_setlabel+0x72>
c0007016:	83 fb 0a             	cmp    ebx,0xa
c0007019:	77 c7                	ja     c0006fe2 <f_setlabel+0x72>
c000701b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000701e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0007022:	0f b7 d6             	movzx  edx,si
c0007025:	01 c8                	add    eax,ecx
c0007027:	43                   	inc    ebx
c0007028:	e8 f0 ac ff ff       	call   c0001d1d <st_word>
c000702d:	eb 84                	jmp    c0006fb3 <f_setlabel+0x43>
c000702f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007034:	ba 20 00 00 00       	mov    edx,0x20
c0007039:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000703d:	31 db                	xor    ebx,ebx
c000703f:	e8 fb ac ff ff       	call   c0001d3f <mem_set>
c0007044:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000704b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000704e:	76 60                	jbe    c00070b0 <f_setlabel+0x140>
c0007050:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0007057:	e8 29 ad ff ff       	call   c0001d85 <tchar2uni>
c000705c:	3d ff ff 00 00       	cmp    eax,0xffff
c0007061:	0f 87 7b ff ff ff    	ja     c0006fe2 <f_setlabel+0x72>
c0007067:	83 ec 0c             	sub    esp,0xc
c000706a:	50                   	push   eax
c000706b:	e8 97 15 00 00       	call   c0008607 <ff_wtoupper>
c0007070:	5a                   	pop    edx
c0007071:	59                   	pop    ecx
c0007072:	68 b5 01 00 00       	push   0x1b5
c0007077:	50                   	push   eax
c0007078:	e8 8e 14 00 00       	call   c000850b <ff_uni2oem>
c000707d:	83 c4 10             	add    esp,0x10
c0007080:	89 c6                	mov    esi,eax
c0007082:	66 85 c0             	test   ax,ax
c0007085:	0f 84 57 ff ff ff    	je     c0006fe2 <f_setlabel+0x72>
c000708b:	0f b7 d0             	movzx  edx,ax
c000708e:	b8 90 f6 01 c0       	mov    eax,0xc001f690
c0007093:	e8 d5 ac ff ff       	call   c0001d6d <chk_chr>
c0007098:	85 c0                	test   eax,eax
c000709a:	0f 85 42 ff ff ff    	jne    c0006fe2 <f_setlabel+0x72>
c00070a0:	66 81 fe ff 00       	cmp    si,0xff
c00070a5:	0f 87 14 01 00 00    	ja     c00071bf <f_setlabel+0x24f>
c00070ab:	e9 fa 00 00 00       	jmp    c00071aa <f_setlabel+0x23a>
c00070b0:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c00070b5:	0f 84 27 ff ff ff    	je     c0006fe2 <f_setlabel+0x72>
c00070bb:	85 db                	test   ebx,ebx
c00070bd:	74 0e                	je     c00070cd <f_setlabel+0x15d>
c00070bf:	8d 43 ff             	lea    eax,[ebx-0x1]
c00070c2:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c00070c7:	75 04                	jne    c00070cd <f_setlabel+0x15d>
c00070c9:	89 c3                	mov    ebx,eax
c00070cb:	eb ee                	jmp    c00070bb <f_setlabel+0x14b>
c00070cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070d1:	31 d2                	xor    edx,edx
c00070d3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00070d7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00070df:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070e3:	e8 1f c1 ff ff       	call   c0003207 <dir_sdi>
c00070e8:	89 c6                	mov    esi,eax
c00070ea:	85 c0                	test   eax,eax
c00070ec:	0f 85 e3 00 00 00    	jne    c00071d5 <f_setlabel+0x265>
c00070f2:	ba 01 00 00 00       	mov    edx,0x1
c00070f7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070fb:	e8 17 c9 ff ff       	call   c0003a17 <dir_read>
c0007100:	85 c0                	test   eax,eax
c0007102:	75 21                	jne    c0007125 <f_setlabel+0x1b5>
c0007104:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000710f:	74 5d                	je     c000716e <f_setlabel+0x1fe>
c0007111:	85 db                	test   ebx,ebx
c0007113:	74 0b                	je     c0007120 <f_setlabel+0x1b0>
c0007115:	b9 0b 00 00 00       	mov    ecx,0xb
c000711a:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000711e:	eb 70                	jmp    c0007190 <f_setlabel+0x220>
c0007120:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0007123:	eb 70                	jmp    c0007195 <f_setlabel+0x225>
c0007125:	83 f8 04             	cmp    eax,0x4
c0007128:	75 7c                	jne    c00071a6 <f_setlabel+0x236>
c000712a:	85 db                	test   ebx,ebx
c000712c:	0f 84 a3 00 00 00    	je     c00071d5 <f_setlabel+0x265>
c0007132:	ba 01 00 00 00       	mov    edx,0x1
c0007137:	8d 44 24 24          	lea    eax,[esp+0x24]
c000713b:	e8 51 ca ff ff       	call   c0003b91 <dir_alloc>
c0007140:	89 c6                	mov    esi,eax
c0007142:	85 c0                	test   eax,eax
c0007144:	0f 85 8b 00 00 00    	jne    c00071d5 <f_setlabel+0x265>
c000714a:	31 d2                	xor    edx,edx
c000714c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007150:	b9 20 00 00 00       	mov    ecx,0x20
c0007155:	e8 e5 ab ff ff       	call   c0001d3f <mem_set>
c000715a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000715e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007161:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007165:	75 18                	jne    c000717f <f_setlabel+0x20f>
c0007167:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000716a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000716e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007171:	b9 16 00 00 00       	mov    ecx,0x16
c0007176:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000717a:	83 c0 02             	add    eax,0x2
c000717d:	eb 9b                	jmp    c000711a <f_setlabel+0x1aa>
c000717f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007183:	b9 0b 00 00 00       	mov    ecx,0xb
c0007188:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000718c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007190:	e8 95 ab ff ff       	call   c0001d2a <mem_cpy>
c0007195:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007199:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000719d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a1:	e8 0e d4 ff ff       	call   c00045b4 <sync_fs>
c00071a6:	89 c6                	mov    esi,eax
c00071a8:	eb 2b                	jmp    c00071d5 <f_setlabel+0x265>
c00071aa:	83 fb 0a             	cmp    ebx,0xa
c00071ad:	0f 87 2f fe ff ff    	ja     c0006fe2 <f_setlabel+0x72>
c00071b3:	89 f0                	mov    eax,esi
c00071b5:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c00071b9:	43                   	inc    ebx
c00071ba:	e9 85 fe ff ff       	jmp    c0007044 <f_setlabel+0xd4>
c00071bf:	83 fb 09             	cmp    ebx,0x9
c00071c2:	0f 87 1a fe ff ff    	ja     c0006fe2 <f_setlabel+0x72>
c00071c8:	89 f0                	mov    eax,esi
c00071ca:	66 c1 e8 08          	shr    ax,0x8
c00071ce:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c00071d2:	43                   	inc    ebx
c00071d3:	eb de                	jmp    c00071b3 <f_setlabel+0x243>
c00071d5:	89 f0                	mov    eax,esi
c00071d7:	83 c4 74             	add    esp,0x74
c00071da:	5b                   	pop    ebx
c00071db:	5e                   	pop    esi
c00071dc:	c3                   	ret    

c00071dd <f_forward>:
c00071dd:	55                   	push   ebp
c00071de:	57                   	push   edi
c00071df:	56                   	push   esi
c00071e0:	53                   	push   ebx
c00071e1:	83 ec 2c             	sub    esp,0x2c
c00071e4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00071e8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071f2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071f6:	89 d8                	mov    eax,ebx
c00071f8:	e8 b1 b1 ff ff       	call   c00023ae <validate>
c00071fd:	89 c5                	mov    ebp,eax
c00071ff:	85 c0                	test   eax,eax
c0007201:	0f 85 aa 01 00 00    	jne    c00073b1 <f_forward+0x1d4>
c0007207:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000720b:	85 ed                	test   ebp,ebp
c000720d:	0f 85 9e 01 00 00    	jne    c00073b1 <f_forward+0x1d4>
c0007213:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007217:	0f 84 8f 01 00 00    	je     c00073ac <f_forward+0x1cf>
c000721d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007220:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007223:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0007226:	bf 00 00 00 00       	mov    edi,0x0
c000722b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000722e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007232:	89 d1                	mov    ecx,edx
c0007234:	19 f9                	sbb    ecx,edi
c0007236:	0f 83 cf 00 00 00    	jae    c000730b <f_forward+0x12e>
c000723c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007240:	e9 c6 00 00 00       	jmp    c000730b <f_forward+0x12e>
c0007245:	50                   	push   eax
c0007246:	50                   	push   eax
c0007247:	6a 00                	push   0x0
c0007249:	6a 00                	push   0x0
c000724b:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000724f:	83 c4 10             	add    esp,0x10
c0007252:	85 c0                	test   eax,eax
c0007254:	0f 84 57 01 00 00    	je     c00073b1 <f_forward+0x1d4>
c000725a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000725d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007261:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007264:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007268:	89 d7                	mov    edi,edx
c000726a:	8d 4e ff             	lea    ecx,[esi-0x1]
c000726d:	89 c6                	mov    esi,eax
c000726f:	0f ac fe 09          	shrd   esi,edi,0x9
c0007273:	21 ce                	and    esi,ecx
c0007275:	89 c1                	mov    ecx,eax
c0007277:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000727d:	0f 84 98 00 00 00    	je     c000731b <f_forward+0x13e>
c0007283:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007287:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000728a:	89 c8                	mov    eax,ecx
c000728c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007290:	e8 af ac ff ff       	call   c0001f44 <clst2sect>
c0007295:	89 d7                	mov    edi,edx
c0007297:	09 c7                	or     edi,eax
c0007299:	0f 84 9e 00 00 00    	je     c000733d <f_forward+0x160>
c000729f:	31 ff                	xor    edi,edi
c00072a1:	8d 4b 50             	lea    ecx,[ebx+0x50]
c00072a4:	01 c6                	add    esi,eax
c00072a6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00072aa:	11 d7                	adc    edi,edx
c00072ac:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00072af:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00072b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072b6:	39 fa                	cmp    edx,edi
c00072b8:	0f 85 a2 00 00 00    	jne    c0007360 <f_forward+0x183>
c00072be:	39 f0                	cmp    eax,esi
c00072c0:	0f 85 9a 00 00 00    	jne    c0007360 <f_forward+0x183>
c00072c6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00072c9:	ba 00 02 00 00       	mov    edx,0x200
c00072ce:	25 ff 01 00 00       	and    eax,0x1ff
c00072d3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00072d7:	29 c2                	sub    edx,eax
c00072d9:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00072dc:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00072df:	39 d1                	cmp    ecx,edx
c00072e1:	76 02                	jbe    c00072e5 <f_forward+0x108>
c00072e3:	89 d1                	mov    ecx,edx
c00072e5:	8d 73 50             	lea    esi,[ebx+0x50]
c00072e8:	52                   	push   edx
c00072e9:	01 c6                	add    esi,eax
c00072eb:	52                   	push   edx
c00072ec:	51                   	push   ecx
c00072ed:	56                   	push   esi
c00072ee:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	85 c0                	test   eax,eax
c00072f7:	74 44                	je     c000733d <f_forward+0x160>
c00072f9:	31 ff                	xor    edi,edi
c00072fb:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072fe:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007301:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007305:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007309:	01 07                	add    DWORD PTR [edi],eax
c000730b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007310:	0f 85 2f ff ff ff    	jne    c0007245 <f_forward+0x68>
c0007316:	e9 96 00 00 00       	jmp    c00073b1 <f_forward+0x1d4>
c000731b:	85 f6                	test   esi,esi
c000731d:	0f 85 60 ff ff ff    	jne    c0007283 <f_forward+0xa6>
c0007323:	89 d7                	mov    edi,edx
c0007325:	09 c7                	or     edi,eax
c0007327:	75 05                	jne    c000732e <f_forward+0x151>
c0007329:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000732c:	eb 0a                	jmp    c0007338 <f_forward+0x15b>
c000732e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007331:	89 d8                	mov    eax,ebx
c0007333:	e8 d9 bc ff ff       	call   c0003011 <get_fat>
c0007338:	83 f8 01             	cmp    eax,0x1
c000733b:	77 0b                	ja     c0007348 <f_forward+0x16b>
c000733d:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007341:	bd 02 00 00 00       	mov    ebp,0x2
c0007346:	eb 69                	jmp    c00073b1 <f_forward+0x1d4>
c0007348:	83 f8 ff             	cmp    eax,0xffffffff
c000734b:	75 0b                	jne    c0007358 <f_forward+0x17b>
c000734d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007351:	bd 01 00 00 00       	mov    ebp,0x1
c0007356:	eb 59                	jmp    c00073b1 <f_forward+0x1d4>
c0007358:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000735b:	e9 23 ff ff ff       	jmp    c0007283 <f_forward+0xa6>
c0007360:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007364:	79 20                	jns    c0007386 <f_forward+0x1a9>
c0007366:	83 ec 0c             	sub    esp,0xc
c0007369:	6a 01                	push   0x1
c000736b:	52                   	push   edx
c000736c:	50                   	push   eax
c000736d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007371:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007375:	50                   	push   eax
c0007376:	e8 fb a8 ff ff       	call   c0001c76 <disk_write>
c000737b:	83 c4 20             	add    esp,0x20
c000737e:	85 c0                	test   eax,eax
c0007380:	75 cb                	jne    c000734d <f_forward+0x170>
c0007382:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007386:	83 ec 0c             	sub    esp,0xc
c0007389:	6a 01                	push   0x1
c000738b:	57                   	push   edi
c000738c:	56                   	push   esi
c000738d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007391:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007395:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007399:	50                   	push   eax
c000739a:	e8 c1 a8 ff ff       	call   c0001c60 <disk_read>
c000739f:	83 c4 20             	add    esp,0x20
c00073a2:	85 c0                	test   eax,eax
c00073a4:	0f 84 1c ff ff ff    	je     c00072c6 <f_forward+0xe9>
c00073aa:	eb a1                	jmp    c000734d <f_forward+0x170>
c00073ac:	bd 07 00 00 00       	mov    ebp,0x7
c00073b1:	83 c4 2c             	add    esp,0x2c
c00073b4:	89 e8                	mov    eax,ebp
c00073b6:	5b                   	pop    ebx
c00073b7:	5e                   	pop    esi
c00073b8:	5f                   	pop    edi
c00073b9:	5d                   	pop    ebp
c00073ba:	c3                   	ret    

c00073bb <f_mkfs>:
c00073bb:	55                   	push   ebp
c00073bc:	57                   	push   edi
c00073bd:	56                   	push   esi
c00073be:	53                   	push   ebx
c00073bf:	bb 0b 00 00 00       	mov    ebx,0xb
c00073c4:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00073ca:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00073d1:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00073d8:	e8 b0 ae ff ff       	call   c000228d <get_ldnumber>
c00073dd:	85 c0                	test   eax,eax
c00073df:	0f 88 ec 10 00 00    	js     c00084d1 <f_mkfs+0x1116>
c00073e5:	8b 14 85 60 b9 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc46a0]
c00073ec:	85 d2                	test   edx,edx
c00073ee:	74 03                	je     c00073f3 <f_mkfs+0x38>
c00073f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073f3:	85 f6                	test   esi,esi
c00073f5:	75 05                	jne    c00073fc <f_mkfs+0x41>
c00073f7:	be 80 f6 01 c0       	mov    esi,0xc001f680
c00073fc:	83 ec 0c             	sub    esp,0xc
c00073ff:	0f b6 c0             	movzx  eax,al
c0007402:	bb 03 00 00 00       	mov    ebx,0x3
c0007407:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000740b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000740f:	e8 49 a8 ff ff       	call   c0001c5d <disk_initialize>
c0007414:	83 c4 10             	add    esp,0x10
c0007417:	a8 01                	test   al,0x1
c0007419:	0f 85 b2 10 00 00    	jne    c00084d1 <f_mkfs+0x1116>
c000741f:	bb 0a 00 00 00       	mov    ebx,0xa
c0007424:	a8 04                	test   al,0x4
c0007426:	0f 85 a5 10 00 00    	jne    c00084d1 <f_mkfs+0x1116>
c000742c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000742f:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007433:	85 c0                	test   eax,eax
c0007435:	75 20                	jne    c0007457 <f_mkfs+0x9c>
c0007437:	51                   	push   ecx
c0007438:	8d 44 24 78          	lea    eax,[esp+0x78]
c000743c:	50                   	push   eax
c000743d:	6a 03                	push   0x3
c000743f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007443:	e8 44 a8 ff ff       	call   c0001c8c <disk_ioctl>
c0007448:	83 c4 10             	add    esp,0x10
c000744b:	85 c0                	test   eax,eax
c000744d:	74 08                	je     c0007457 <f_mkfs+0x9c>
c000744f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007457:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000745b:	8d 42 ff             	lea    eax,[edx-0x1]
c000745e:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007463:	77 04                	ja     c0007469 <f_mkfs+0xae>
c0007465:	85 c2                	test   edx,eax
c0007467:	74 08                	je     c0007471 <f_mkfs+0xb6>
c0007469:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007471:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007474:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007478:	48                   	dec    eax
c0007479:	3c 01                	cmp    al,0x1
c000747b:	76 05                	jbe    c0007482 <f_mkfs+0xc7>
c000747d:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007482:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007485:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007489:	48                   	dec    eax
c000748a:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000748f:	77 07                	ja     c0007498 <f_mkfs+0xdd>
c0007491:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007496:	74 08                	je     c00074a0 <f_mkfs+0xe5>
c0007498:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00074a0:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00074a3:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c00074a9:	77 07                	ja     c00074b2 <f_mkfs+0xf7>
c00074ab:	8d 43 ff             	lea    eax,[ebx-0x1]
c00074ae:	85 d8                	test   eax,ebx
c00074b0:	74 02                	je     c00074b4 <f_mkfs+0xf9>
c00074b2:	31 db                	xor    ebx,ebx
c00074b4:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00074bf:	77 0a                	ja     c00074cb <f_mkfs+0x110>
c00074c1:	bb 11 00 00 00       	mov    ebx,0x11
c00074c6:	e9 06 10 00 00       	jmp    c00084d1 <f_mkfs+0x1116>
c00074cb:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00074d2:	8b 36                	mov    esi,DWORD PTR [esi]
c00074d4:	85 ed                	test   ebp,ebp
c00074d6:	75 1e                	jne    c00074f6 <f_mkfs+0x13b>
c00074d8:	83 ec 0c             	sub    esp,0xc
c00074db:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00074e2:	25 00 fe ff ff       	and    eax,0xfffffe00
c00074e7:	50                   	push   eax
c00074e8:	e8 f1 0f 00 00       	call   c00084de <ff_memalloc>
c00074ed:	83 c4 10             	add    esp,0x10
c00074f0:	89 c5                	mov    ebp,eax
c00074f2:	85 c0                	test   eax,eax
c00074f4:	74 cb                	je     c00074c1 <f_mkfs+0x106>
c00074f6:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074fe:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007506:	52                   	push   edx
c0007507:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c000750b:	50                   	push   eax
c000750c:	6a 01                	push   0x1
c000750e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007512:	e8 75 a7 ff ff       	call   c0001c8c <disk_ioctl>
c0007517:	83 c4 10             	add    esp,0x10
c000751a:	85 c0                	test   eax,eax
c000751c:	0f 85 4a 0f 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007522:	89 f1                	mov    ecx,esi
c0007524:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000752c:	83 e1 0f             	and    ecx,0xf
c000752f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007537:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000753b:	83 e6 08             	and    esi,0x8
c000753e:	75 56                	jne    c0007596 <f_mkfs+0x1db>
c0007540:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007544:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007548:	83 ff 00             	cmp    edi,0x0
c000754b:	76 20                	jbe    c000756d <f_mkfs+0x1b2>
c000754d:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007552:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000755a:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007560:	83 d7 ff             	adc    edi,0xffffffff
c0007563:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007567:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000756b:	eb 21                	jmp    c000758e <f_mkfs+0x1d3>
c000756d:	ba 3f 00 00 00       	mov    edx,0x3f
c0007572:	39 f2                	cmp    edx,esi
c0007574:	19 f8                	sbb    eax,edi
c0007576:	73 1e                	jae    c0007596 <f_mkfs+0x1db>
c0007578:	83 c6 c1             	add    esi,0xffffffc1
c000757b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007583:	83 d7 ff             	adc    edi,0xffffffff
c0007586:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000758a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000758e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007596:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000759a:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000759e:	89 04 24             	mov    DWORD PTR [esp],eax
c00075a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00075a5:	31 c0                	xor    eax,eax
c00075a7:	ba 7f 00 00 00       	mov    edx,0x7f
c00075ac:	89 c7                	mov    edi,eax
c00075ae:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075b1:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075b5:	0f 83 c5 0a 00 00    	jae    c0008080 <f_mkfs+0xcc5>
c00075bb:	89 df                	mov    edi,ebx
c00075bd:	c1 ef 09             	shr    edi,0x9
c00075c0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00075c4:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00075cb:	c1 ef 09             	shr    edi,0x9
c00075ce:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00075d3:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00075d7:	74 29                	je     c0007602 <f_mkfs+0x247>
c00075d9:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075df:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00075e4:	0f 97 c2             	seta   dl
c00075e7:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075ea:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075ee:	0f 92 c0             	setb   al
c00075f1:	08 c2                	or     dl,al
c00075f3:	75 5b                	jne    c0007650 <f_mkfs+0x295>
c00075f5:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075f9:	83 e0 07             	and    eax,0x7
c00075fc:	3c 04                	cmp    al,0x4
c00075fe:	74 50                	je     c0007650 <f_mkfs+0x295>
c0007600:	eb 1b                	jmp    c000761d <f_mkfs+0x262>
c0007602:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007607:	0f 87 73 0a 00 00    	ja     c0008080 <f_mkfs+0xcc5>
c000760d:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007613:	76 08                	jbe    c000761d <f_mkfs+0x262>
c0007615:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c000761d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007621:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007625:	83 e0 01             	and    eax,0x1
c0007628:	80 e1 02             	and    cl,0x2
c000762b:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c000762f:	74 0d                	je     c000763e <f_mkfs+0x283>
c0007631:	84 c0                	test   al,al
c0007633:	0f 84 53 09 00 00    	je     c0007f8c <f_mkfs+0xbd1>
c0007639:	e9 12 08 00 00       	jmp    c0007e50 <f_mkfs+0xa95>
c000763e:	bb 13 00 00 00       	mov    ebx,0x13
c0007643:	84 c0                	test   al,al
c0007645:	0f 85 05 08 00 00    	jne    c0007e50 <f_mkfs+0xa95>
c000764b:	e9 39 0e 00 00       	jmp    c0008489 <f_mkfs+0x10ce>
c0007650:	31 c0                	xor    eax,eax
c0007652:	ba ff 0f 00 00       	mov    edx,0xfff
c0007657:	89 c7                	mov    edi,eax
c0007659:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000765c:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007660:	0f 83 1a 0a 00 00    	jae    c0008080 <f_mkfs+0xcc5>
c0007666:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000766c:	77 39                	ja     c00076a7 <f_mkfs+0x2ec>
c000766e:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007673:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000767b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000767e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007682:	73 08                	jae    c000768c <f_mkfs+0x2d1>
c0007684:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000768c:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007691:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007694:	b8 00 00 00 00       	mov    eax,0x0
c0007699:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000769d:	73 08                	jae    c00076a7 <f_mkfs+0x2ec>
c000769f:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00076a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00076af:	83 c0 20             	add    eax,0x20
c00076b2:	83 d2 00             	adc    edx,0x0
c00076b5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00076b9:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00076bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076c1:	31 d2                	xor    edx,edx
c00076c3:	31 ff                	xor    edi,edi
c00076c5:	52                   	push   edx
c00076c6:	89 fb                	mov    ebx,edi
c00076c8:	50                   	push   eax
c00076c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00076cd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00076d1:	e8 e6 6f 01 00       	call   c001e6bc <__udivdi3>
c00076d6:	83 c4 10             	add    esp,0x10
c00076d9:	c1 e0 02             	shl    eax,0x2
c00076dc:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00076e0:	05 07 02 00 00       	add    eax,0x207
c00076e5:	89 f1                	mov    ecx,esi
c00076e7:	c1 e8 09             	shr    eax,0x9
c00076ea:	83 c1 ff             	add    ecx,0xffffffff
c00076ed:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076f1:	83 d3 ff             	adc    ebx,0xffffffff
c00076f4:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076f8:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	01 c8                	add    eax,ecx
c0007700:	11 da                	adc    edx,ebx
c0007702:	89 c1                	mov    ecx,eax
c0007704:	f7 de                	neg    esi
c0007706:	89 d0                	mov    eax,edx
c0007708:	83 d7 00             	adc    edi,0x0
c000770b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000770f:	f7 df                	neg    edi
c0007711:	21 f1                	and    ecx,esi
c0007713:	21 f8                	and    eax,edi
c0007715:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007719:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000771d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007721:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007725:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007729:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000772c:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007730:	0f ac d0 01          	shrd   eax,edx,0x1
c0007734:	89 df                	mov    edi,ebx
c0007736:	d1 ea                	shr    edx,1
c0007738:	39 c1                	cmp    ecx,eax
c000773a:	19 d7                	sbb    edi,edx
c000773c:	0f 83 3e 09 00 00    	jae    c0008080 <f_mkfs+0xcc5>
c0007742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007746:	31 d2                	xor    edx,edx
c0007748:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000774c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007750:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007754:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007757:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000775b:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000775f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007763:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007767:	83 f8 0f             	cmp    eax,0xf
c000776a:	0f 86 10 09 00 00    	jbe    c0008080 <f_mkfs+0xcc5>
c0007770:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007778:	0f 87 02 09 00 00    	ja     c0008080 <f_mkfs+0xcc5>
c000777e:	31 d2                	xor    edx,edx
c0007780:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007784:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000778c:	83 c0 07             	add    eax,0x7
c000778f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007797:	c1 e8 03             	shr    eax,0x3
c000779a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00077a1:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00077a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a9:	c1 e0 09             	shl    eax,0x9
c00077ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00077b0:	48                   	dec    eax
c00077b1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00077b5:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00077b9:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00077bd:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00077c1:	31 d2                	xor    edx,edx
c00077c3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00077c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00077ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077d2:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00077d7:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00077db:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00077df:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077e3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077e7:	31 ff                	xor    edi,edi
c00077e9:	31 f6                	xor    esi,esi
c00077eb:	31 db                	xor    ebx,ebx
c00077ed:	85 ff                	test   edi,edi
c00077ef:	74 05                	je     c00077f6 <f_mkfs+0x43b>
c00077f1:	4f                   	dec    edi
c00077f2:	74 44                	je     c0007838 <f_mkfs+0x47d>
c00077f4:	eb 4f                	jmp    c0007845 <f_mkfs+0x48a>
c00077f6:	83 ec 0c             	sub    esp,0xc
c00077f9:	0f b7 c3             	movzx  eax,bx
c00077fc:	50                   	push   eax
c00077fd:	e8 05 0e 00 00       	call   c0008607 <ff_wtoupper>
c0007802:	83 c4 10             	add    esp,0x10
c0007805:	89 c1                	mov    ecx,eax
c0007807:	8d 53 01             	lea    edx,[ebx+0x1]
c000780a:	66 39 c3             	cmp    bx,ax
c000780d:	75 3e                	jne    c000784d <f_mkfs+0x492>
c000780f:	be 01 00 00 00       	mov    esi,0x1
c0007814:	89 df                	mov    edi,ebx
c0007816:	66 01 f7             	add    di,si
c0007819:	75 07                	jne    c0007822 <f_mkfs+0x467>
c000781b:	83 fe 7f             	cmp    esi,0x7f
c000781e:	77 31                	ja     c0007851 <f_mkfs+0x496>
c0007820:	eb 16                	jmp    c0007838 <f_mkfs+0x47d>
c0007822:	83 ec 0c             	sub    esp,0xc
c0007825:	0f b7 ff             	movzx  edi,di
c0007828:	57                   	push   edi
c0007829:	e8 d9 0d 00 00       	call   c0008607 <ff_wtoupper>
c000782e:	83 c4 10             	add    esp,0x10
c0007831:	39 c7                	cmp    edi,eax
c0007833:	75 e6                	jne    c000781b <f_mkfs+0x460>
c0007835:	46                   	inc    esi
c0007836:	eb dc                	jmp    c0007814 <f_mkfs+0x459>
c0007838:	31 c0                	xor    eax,eax
c000783a:	89 d9                	mov    ecx,ebx
c000783c:	4e                   	dec    esi
c000783d:	0f 95 c0             	setne  al
c0007840:	43                   	inc    ebx
c0007841:	89 c7                	mov    edi,eax
c0007843:	eb 14                	jmp    c0007859 <f_mkfs+0x49e>
c0007845:	89 f1                	mov    ecx,esi
c0007847:	01 f3                	add    ebx,esi
c0007849:	31 ff                	xor    edi,edi
c000784b:	eb 0c                	jmp    c0007859 <f_mkfs+0x49e>
c000784d:	89 d3                	mov    ebx,edx
c000784f:	eb 08                	jmp    c0007859 <f_mkfs+0x49e>
c0007851:	bf 02 00 00 00       	mov    edi,0x2
c0007856:	83 c9 ff             	or     ecx,0xffffffff
c0007859:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000785d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007860:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007864:	0f b6 c1             	movzx  eax,cl
c0007867:	e8 3a a9 ff ff       	call   c00021a6 <xsum32>
c000786c:	66 c1 e9 08          	shr    cx,0x8
c0007870:	89 c2                	mov    edx,eax
c0007872:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007875:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007879:	0f b7 c1             	movzx  eax,cx
c000787c:	e8 25 a9 ff ff       	call   c00021a6 <xsum32>
c0007881:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007886:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000788a:	66 85 db             	test   bx,bx
c000788d:	74 1f                	je     c00078ae <f_mkfs+0x4f3>
c000788f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007892:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007899:	83 c0 02             	add    eax,0x2
c000789c:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00078a2:	39 c2                	cmp    edx,eax
c00078a4:	74 08                	je     c00078ae <f_mkfs+0x4f3>
c00078a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00078a9:	e9 3f ff ff ff       	jmp    c00077ed <f_mkfs+0x432>
c00078ae:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00078b1:	83 ec 0c             	sub    esp,0xc
c00078b4:	05 01 02 00 00       	add    eax,0x201
c00078b9:	c1 e8 09             	shr    eax,0x9
c00078bc:	50                   	push   eax
c00078bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00078c1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00078c5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00078c9:	55                   	push   ebp
c00078ca:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078ce:	e8 a3 a3 ff ff       	call   c0001c76 <disk_write>
c00078d3:	83 c4 20             	add    esp,0x20
c00078d6:	85 c0                	test   eax,eax
c00078d8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00078db:	0f 85 8b 0b 00 00    	jne    c000846c <f_mkfs+0x10b1>
c00078e1:	89 d0                	mov    eax,edx
c00078e3:	31 d2                	xor    edx,edx
c00078e5:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00078e9:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078ed:	66 85 db             	test   bx,bx
c00078f0:	74 04                	je     c00078f6 <f_mkfs+0x53b>
c00078f2:	31 c0                	xor    eax,eax
c00078f4:	eb b0                	jmp    c00078a6 <f_mkfs+0x4eb>
c00078f6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078fa:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078fe:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007902:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007908:	31 d2                	xor    edx,edx
c000790a:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007915:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007919:	c1 eb 09             	shr    ebx,0x9
c000791c:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007923:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007927:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000792b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000792f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007933:	8d 70 01             	lea    esi,[eax+0x1]
c0007936:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000793a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000793e:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007945:	31 d2                	xor    edx,edx
c0007947:	25 00 fe ff ff       	and    eax,0xfffffe00
c000794c:	89 04 24             	mov    DWORD PTR [esp],eax
c000794f:	89 c1                	mov    ecx,eax
c0007951:	89 e8                	mov    eax,ebp
c0007953:	e8 e7 a3 ff ff       	call   c0001d3f <mem_set>
c0007958:	31 c0                	xor    eax,eax
c000795a:	39 04 24             	cmp    DWORD PTR [esp],eax
c000795d:	76 10                	jbe    c000796f <f_mkfs+0x5b4>
c000795f:	83 fe 07             	cmp    esi,0x7
c0007962:	76 0b                	jbe    c000796f <f_mkfs+0x5b4>
c0007964:	40                   	inc    eax
c0007965:	83 ee 08             	sub    esi,0x8
c0007968:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000796d:	eb eb                	jmp    c000795a <f_mkfs+0x59f>
c000796f:	b2 01                	mov    dl,0x1
c0007971:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007975:	85 f6                	test   esi,esi
c0007977:	74 0c                	je     c0007985 <f_mkfs+0x5ca>
c0007979:	39 04 24             	cmp    DWORD PTR [esp],eax
c000797c:	76 07                	jbe    c0007985 <f_mkfs+0x5ca>
c000797e:	08 11                	or     BYTE PTR [ecx],dl
c0007980:	4e                   	dec    esi
c0007981:	d1 e2                	shl    edx,1
c0007983:	eb f0                	jmp    c0007975 <f_mkfs+0x5ba>
c0007985:	89 df                	mov    edi,ebx
c0007987:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000798b:	76 04                	jbe    c0007991 <f_mkfs+0x5d6>
c000798d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007991:	83 ec 0c             	sub    esp,0xc
c0007994:	57                   	push   edi
c0007995:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007999:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000799d:	55                   	push   ebp
c000799e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079a2:	e8 cf a2 ff ff       	call   c0001c76 <disk_write>
c00079a7:	83 c4 20             	add    esp,0x20
c00079aa:	85 c0                	test   eax,eax
c00079ac:	0f 85 ba 0a 00 00    	jne    c000846c <f_mkfs+0x10b1>
c00079b2:	31 d2                	xor    edx,edx
c00079b4:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c00079b8:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c00079bc:	29 fb                	sub    ebx,edi
c00079be:	0f 85 7a ff ff ff    	jne    c000793e <f_mkfs+0x583>
c00079c4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00079c8:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00079d0:	31 f6                	xor    esi,esi
c00079d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00079d6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00079d9:	31 d2                	xor    edx,edx
c00079db:	89 e8                	mov    eax,ebp
c00079dd:	e8 5d a3 ff ff       	call   c0001d3f <mem_set>
c00079e2:	31 c9                	xor    ecx,ecx
c00079e4:	85 db                	test   ebx,ebx
c00079e6:	75 40                	jne    c0007a28 <f_mkfs+0x66d>
c00079e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079ed:	89 e8                	mov    eax,ebp
c00079ef:	bb 02 00 00 00       	mov    ebx,0x2
c00079f4:	e8 28 a3 ff ff       	call   c0001d21 <st_dword>
c00079f9:	8d 45 04             	lea    eax,[ebp+0x4]
c00079fc:	83 ca ff             	or     edx,0xffffffff
c00079ff:	e8 1d a3 ff ff       	call   c0001d21 <st_dword>
c0007a04:	b9 08 00 00 00       	mov    ecx,0x8
c0007a09:	eb 1d                	jmp    c0007a28 <f_mkfs+0x66d>
c0007a0b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007a0e:	76 3b                	jbe    c0007a4b <f_mkfs+0x690>
c0007a10:	43                   	inc    ebx
c0007a11:	83 fe 01             	cmp    esi,0x1
c0007a14:	89 da                	mov    edx,ebx
c0007a16:	77 03                	ja     c0007a1b <f_mkfs+0x660>
c0007a18:	83 ca ff             	or     edx,0xffffffff
c0007a1b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007a1f:	4e                   	dec    esi
c0007a20:	e8 fc a2 ff ff       	call   c0001d21 <st_dword>
c0007a25:	83 c1 04             	add    ecx,0x4
c0007a28:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a2c:	85 f6                	test   esi,esi
c0007a2e:	75 db                	jne    c0007a0b <f_mkfs+0x650>
c0007a30:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007a35:	77 14                	ja     c0007a4b <f_mkfs+0x690>
c0007a37:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007a3b:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007a42:	85 f6                	test   esi,esi
c0007a44:	74 05                	je     c0007a4b <f_mkfs+0x690>
c0007a46:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007a49:	77 dd                	ja     c0007a28 <f_mkfs+0x66d>
c0007a4b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a4f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a53:	39 cf                	cmp    edi,ecx
c0007a55:	76 02                	jbe    c0007a59 <f_mkfs+0x69e>
c0007a57:	89 cf                	mov    edi,ecx
c0007a59:	83 ec 0c             	sub    esp,0xc
c0007a5c:	57                   	push   edi
c0007a5d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a61:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a65:	55                   	push   ebp
c0007a66:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a6a:	e8 07 a2 ff ff       	call   c0001c76 <disk_write>
c0007a6f:	83 c4 20             	add    esp,0x20
c0007a72:	85 c0                	test   eax,eax
c0007a74:	0f 85 f2 09 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007a7a:	31 d2                	xor    edx,edx
c0007a7c:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a80:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a84:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a88:	0f 85 48 ff ff ff    	jne    c00079d6 <f_mkfs+0x61b>
c0007a8e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a91:	31 d2                	xor    edx,edx
c0007a93:	89 e8                	mov    eax,ebp
c0007a95:	31 ff                	xor    edi,edi
c0007a97:	e8 a3 a2 ff ff       	call   c0001d3f <mem_set>
c0007a9c:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a9f:	ba 02 00 00 00       	mov    edx,0x2
c0007aa4:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007aa8:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007aac:	e8 70 a2 ff ff       	call   c0001d21 <st_dword>
c0007ab1:	8d 45 38             	lea    eax,[ebp+0x38]
c0007ab4:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007ab8:	e8 64 a2 ff ff       	call   c0001d21 <st_dword>
c0007abd:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ac0:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007ac4:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007ac8:	e8 54 a2 ff ff       	call   c0001d21 <st_dword>
c0007acd:	8d 45 54             	lea    eax,[ebp+0x54]
c0007ad0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007ad4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007ad8:	83 c2 02             	add    edx,0x2
c0007adb:	e8 41 a2 ff ff       	call   c0001d21 <st_dword>
c0007ae0:	8d 45 58             	lea    eax,[ebp+0x58]
c0007ae3:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007ae7:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aeb:	e8 31 a2 ff ff       	call   c0001d21 <st_dword>
c0007af0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007af4:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007af9:	89 c6                	mov    esi,eax
c0007afb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aff:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007b03:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b06:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007b0a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007b0d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b11:	39 cb                	cmp    ebx,ecx
c0007b13:	76 02                	jbe    c0007b17 <f_mkfs+0x75c>
c0007b15:	89 cb                	mov    ebx,ecx
c0007b17:	83 ec 0c             	sub    esp,0xc
c0007b1a:	53                   	push   ebx
c0007b1b:	57                   	push   edi
c0007b1c:	56                   	push   esi
c0007b1d:	55                   	push   ebp
c0007b1e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b22:	e8 4f a1 ff ff       	call   c0001c76 <disk_write>
c0007b27:	83 c4 20             	add    esp,0x20
c0007b2a:	85 c0                	test   eax,eax
c0007b2c:	0f 85 3a 09 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007b32:	31 d2                	xor    edx,edx
c0007b34:	b9 00 02 00 00       	mov    ecx,0x200
c0007b39:	89 e8                	mov    eax,ebp
c0007b3b:	e8 ff a1 ff ff       	call   c0001d3f <mem_set>
c0007b40:	31 d2                	xor    edx,edx
c0007b42:	01 de                	add    esi,ebx
c0007b44:	11 d7                	adc    edi,edx
c0007b46:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007b49:	75 bf                	jne    c0007b0a <f_mkfs+0x74f>
c0007b4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b4f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b53:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b5b:	b9 00 02 00 00       	mov    ecx,0x200
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	89 e8                	mov    eax,ebp
c0007b64:	e8 d6 a1 ff ff       	call   c0001d3f <mem_set>
c0007b69:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b6e:	ba 60 f7 01 c0       	mov    edx,0xc001f760
c0007b73:	89 e8                	mov    eax,ebp
c0007b75:	e8 b0 a1 ff ff       	call   c0001d2a <mem_cpy>
c0007b7a:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b7d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b81:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b85:	e8 9a a1 ff ff       	call   c0001d24 <st_qword>
c0007b8a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b8e:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b91:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b95:	e8 8a a1 ff ff       	call   c0001d24 <st_qword>
c0007b9a:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b9d:	ba 20 00 00 00       	mov    edx,0x20
c0007ba2:	e8 7a a1 ff ff       	call   c0001d21 <st_dword>
c0007ba7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007bab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007baf:	e8 6d a1 ff ff       	call   c0001d21 <st_dword>
c0007bb4:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007bb8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007bbc:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007bc0:	e8 5c a1 ff ff       	call   c0001d21 <st_dword>
c0007bc5:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007bc8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007bcc:	e8 50 a1 ff ff       	call   c0001d21 <st_dword>
c0007bd1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007bd5:	8d 50 02             	lea    edx,[eax+0x2]
c0007bd8:	8d 45 60             	lea    eax,[ebp+0x60]
c0007bdb:	e8 41 a1 ff ff       	call   c0001d21 <st_dword>
c0007be0:	8d 45 64             	lea    eax,[ebp+0x64]
c0007be3:	ba 00 00 21 50       	mov    edx,0x50210000
c0007be8:	e8 34 a1 ff ff       	call   c0001d21 <st_dword>
c0007bed:	8d 45 68             	lea    eax,[ebp+0x68]
c0007bf0:	ba 00 01 00 00       	mov    edx,0x100
c0007bf5:	e8 23 a1 ff ff       	call   c0001d1d <st_word>
c0007bfa:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bfe:	b8 0a 00 00 00       	mov    eax,0xa
c0007c03:	48                   	dec    eax
c0007c04:	74 05                	je     c0007c0b <f_mkfs+0x850>
c0007c06:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007c09:	eb f8                	jmp    c0007c03 <f_mkfs+0x848>
c0007c0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c0f:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007c13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c17:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007c1b:	74 05                	je     c0007c22 <f_mkfs+0x867>
c0007c1d:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007c20:	eb f5                	jmp    c0007c17 <f_mkfs+0x85c>
c0007c22:	8d 45 78             	lea    eax,[ebp+0x78]
c0007c25:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007c2a:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007c30:	31 db                	xor    ebx,ebx
c0007c32:	e8 e6 a0 ff ff       	call   c0001d1d <st_word>
c0007c37:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007c3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c42:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c45:	e8 d3 a0 ff ff       	call   c0001d1d <st_word>
c0007c4a:	31 c9                	xor    ecx,ecx
c0007c4c:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c4f:	83 f8 01             	cmp    eax,0x1
c0007c52:	76 13                	jbe    c0007c67 <f_mkfs+0x8ac>
c0007c54:	83 f9 70             	cmp    ecx,0x70
c0007c57:	74 0e                	je     c0007c67 <f_mkfs+0x8ac>
c0007c59:	89 da                	mov    edx,ebx
c0007c5b:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c60:	e8 41 a5 ff ff       	call   c00021a6 <xsum32>
c0007c65:	89 c3                	mov    ebx,eax
c0007c67:	41                   	inc    ecx
c0007c68:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c6e:	75 dc                	jne    c0007c4c <f_mkfs+0x891>
c0007c70:	89 f0                	mov    eax,esi
c0007c72:	89 fa                	mov    edx,edi
c0007c74:	83 c0 01             	add    eax,0x1
c0007c77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c7b:	83 d2 00             	adc    edx,0x0
c0007c7e:	83 ec 0c             	sub    esp,0xc
c0007c81:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c85:	6a 01                	push   0x1
c0007c87:	57                   	push   edi
c0007c88:	56                   	push   esi
c0007c89:	55                   	push   ebp
c0007c8a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c8e:	e8 e3 9f ff ff       	call   c0001c76 <disk_write>
c0007c93:	83 c4 20             	add    esp,0x20
c0007c96:	85 c0                	test   eax,eax
c0007c98:	0f 85 ce 07 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007c9e:	31 d2                	xor    edx,edx
c0007ca0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ca5:	89 e8                	mov    eax,ebp
c0007ca7:	e8 93 a0 ff ff       	call   c0001d3f <mem_set>
c0007cac:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007cb1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cb4:	e8 64 a0 ff ff       	call   c0001d1d <st_word>
c0007cb9:	89 f0                	mov    eax,esi
c0007cbb:	89 fa                	mov    edx,edi
c0007cbd:	83 c0 09             	add    eax,0x9
c0007cc0:	83 d2 00             	adc    edx,0x0
c0007cc3:	89 04 24             	mov    DWORD PTR [esp],eax
c0007cc6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007cca:	31 c9                	xor    ecx,ecx
c0007ccc:	41                   	inc    ecx
c0007ccd:	89 da                	mov    edx,ebx
c0007ccf:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007cd4:	e8 cd a4 ff ff       	call   c00021a6 <xsum32>
c0007cd9:	89 c3                	mov    ebx,eax
c0007cdb:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ce1:	75 e9                	jne    c0007ccc <f_mkfs+0x911>
c0007ce3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007ce7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ceb:	83 c0 01             	add    eax,0x1
c0007cee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007cf2:	83 d2 00             	adc    edx,0x0
c0007cf5:	83 ec 0c             	sub    esp,0xc
c0007cf8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cfc:	6a 01                	push   0x1
c0007cfe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007d02:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007d06:	55                   	push   ebp
c0007d07:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d0b:	e8 66 9f ff ff       	call   c0001c76 <disk_write>
c0007d10:	83 c4 20             	add    esp,0x20
c0007d13:	85 c0                	test   eax,eax
c0007d15:	0f 85 51 07 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007d1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d1f:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007d23:	75 09                	jne    c0007d2e <f_mkfs+0x973>
c0007d25:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d28:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007d2c:	74 12                	je     c0007d40 <f_mkfs+0x985>
c0007d2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d32:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007d36:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d3a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007d3e:	eb 8a                	jmp    c0007cca <f_mkfs+0x90f>
c0007d40:	31 d2                	xor    edx,edx
c0007d42:	b9 00 02 00 00       	mov    ecx,0x200
c0007d47:	89 e8                	mov    eax,ebp
c0007d49:	e8 f1 9f ff ff       	call   c0001d3f <mem_set>
c0007d4e:	83 c6 0b             	add    esi,0xb
c0007d51:	83 d7 00             	adc    edi,0x0
c0007d54:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d58:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d5c:	31 c9                	xor    ecx,ecx
c0007d5e:	41                   	inc    ecx
c0007d5f:	89 da                	mov    edx,ebx
c0007d61:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d66:	e8 3b a4 ff ff       	call   c00021a6 <xsum32>
c0007d6b:	89 c3                	mov    ebx,eax
c0007d6d:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d73:	75 e9                	jne    c0007d5e <f_mkfs+0x9a3>
c0007d75:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d78:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d7c:	83 c6 01             	add    esi,0x1
c0007d7f:	83 d7 00             	adc    edi,0x0
c0007d82:	83 ec 0c             	sub    esp,0xc
c0007d85:	6a 01                	push   0x1
c0007d87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d8f:	55                   	push   ebp
c0007d90:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d94:	e8 dd 9e ff ff       	call   c0001c76 <disk_write>
c0007d99:	83 c4 20             	add    esp,0x20
c0007d9c:	85 c0                	test   eax,eax
c0007d9e:	0f 85 c8 06 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007da4:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007da8:	75 06                	jne    c0007db0 <f_mkfs+0x9f5>
c0007daa:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007dae:	74 09                	je     c0007db9 <f_mkfs+0x9fe>
c0007db0:	89 34 24             	mov    DWORD PTR [esp],esi
c0007db3:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007db7:	eb a3                	jmp    c0007d5c <f_mkfs+0x9a1>
c0007db9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007dbd:	89 da                	mov    edx,ebx
c0007dbf:	01 e8                	add    eax,ebp
c0007dc1:	e8 5b 9f ff ff       	call   c0001d21 <st_dword>
c0007dc6:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007dcb:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007dd3:	75 e4                	jne    c0007db9 <f_mkfs+0x9fe>
c0007dd5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007dd8:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ddc:	83 c6 02             	add    esi,0x2
c0007ddf:	83 d7 00             	adc    edi,0x0
c0007de2:	83 ec 0c             	sub    esp,0xc
c0007de5:	6a 01                	push   0x1
c0007de7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007deb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007def:	55                   	push   ebp
c0007df0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df4:	e8 7d 9e ff ff       	call   c0001c76 <disk_write>
c0007df9:	83 c4 20             	add    esp,0x20
c0007dfc:	85 c0                	test   eax,eax
c0007dfe:	0f 85 68 06 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007e04:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007e09:	74 0d                	je     c0007e18 <f_mkfs+0xa5d>
c0007e0b:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007e13:	e9 43 fd ff ff       	jmp    c0007b5b <f_mkfs+0x7a0>
c0007e18:	b1 07                	mov    cl,0x7
c0007e1a:	e9 e3 05 00 00       	jmp    c0008402 <f_mkfs+0x1047>
c0007e1f:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007e24:	0f 85 4f 02 00 00    	jne    c0008079 <f_mkfs+0xcbe>
c0007e2a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007e2f:	0f 86 22 02 00 00    	jbe    c0008057 <f_mkfs+0xc9c>
c0007e35:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e3a:	0f 85 81 06 00 00    	jne    c00084c1 <f_mkfs+0x1106>
c0007e40:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e47:	83 f8 40             	cmp    eax,0x40
c0007e4a:	0f 87 51 06 00 00    	ja     c00084a1 <f_mkfs+0x10e6>
c0007e50:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e54:	85 ff                	test   edi,edi
c0007e56:	75 1c                	jne    c0007e74 <f_mkfs+0xab9>
c0007e58:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e5b:	ba 60 f6 01 c0       	mov    edx,0xc001f660
c0007e60:	c1 e9 0c             	shr    ecx,0xc
c0007e63:	bf 01 00 00 00       	mov    edi,0x1
c0007e68:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e6b:	66 85 c0             	test   ax,ax
c0007e6e:	0f 85 95 01 00 00    	jne    c0008009 <f_mkfs+0xc4e>
c0007e74:	31 d2                	xor    edx,edx
c0007e76:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e79:	f7 f7                	div    edi
c0007e7b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e80:	0f 86 95 01 00 00    	jbe    c000801b <f_mkfs+0xc60>
c0007e86:	83 c0 02             	add    eax,0x2
c0007e89:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e8e:	01 c0                	add    eax,eax
c0007e90:	05 ff 01 00 00       	add    eax,0x1ff
c0007e95:	be 01 00 00 00       	mov    esi,0x1
c0007e9a:	c1 e8 09             	shr    eax,0x9
c0007e9d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007ea1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007ea5:	c1 e0 05             	shl    eax,0x5
c0007ea8:	c1 e8 09             	shr    eax,0x9
c0007eab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007eaf:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007eb4:	31 d2                	xor    edx,edx
c0007eb6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007eba:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007ebe:	89 f0                	mov    eax,esi
c0007ec0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007ec4:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007ec8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007ecc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007ed0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007ed4:	31 d2                	xor    edx,edx
c0007ed6:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007edb:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007edf:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ee3:	31 db                	xor    ebx,ebx
c0007ee5:	01 c8                	add    eax,ecx
c0007ee7:	11 da                	adc    edx,ebx
c0007ee9:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007eed:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ef1:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007ef5:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007ef9:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007efd:	f7 da                	neg    edx
c0007eff:	21 d1                	and    ecx,edx
c0007f01:	29 d9                	sub    ecx,ebx
c0007f03:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f08:	0f 85 20 01 00 00    	jne    c000802e <f_mkfs+0xc73>
c0007f0e:	31 db                	xor    ebx,ebx
c0007f10:	01 ce                	add    esi,ecx
c0007f12:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007f16:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007f1a:	31 d2                	xor    edx,edx
c0007f1c:	89 f8                	mov    eax,edi
c0007f1e:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007f22:	c1 e0 04             	shl    eax,0x4
c0007f25:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007f29:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007f2d:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007f31:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007f35:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007f38:	19 d3                	sbb    ebx,edx
c0007f3a:	0f 82 40 01 00 00    	jb     c0008080 <f_mkfs+0xcc5>
c0007f40:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f43:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f47:	89 c8                	mov    eax,ecx
c0007f49:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f4e:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f52:	29 f0                	sub    eax,esi
c0007f54:	29 d0                	sub    eax,edx
c0007f56:	31 d2                	xor    edx,edx
c0007f58:	f7 f7                	div    edi
c0007f5a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f5f:	89 c3                	mov    ebx,eax
c0007f61:	0f 85 b8 fe ff ff    	jne    c0007e1f <f_mkfs+0xa64>
c0007f67:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f6c:	0f 87 1d 01 00 00    	ja     c000808f <f_mkfs+0xcd4>
c0007f72:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f77:	0f 85 03 01 00 00    	jne    c0008080 <f_mkfs+0xcc5>
c0007f7d:	83 ff 01             	cmp    edi,0x1
c0007f80:	0f 86 fa 00 00 00    	jbe    c0008080 <f_mkfs+0xcc5>
c0007f86:	d1 ef                	shr    edi,1
c0007f88:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f8c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f90:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f93:	85 db                	test   ebx,ebx
c0007f95:	75 2d                	jne    c0007fc4 <f_mkfs+0xc09>
c0007f97:	89 cb                	mov    ebx,ecx
c0007f99:	ba 70 f6 01 c0       	mov    edx,0xc001f670
c0007f9e:	c1 eb 11             	shr    ebx,0x11
c0007fa1:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007fa9:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007fac:	66 85 c0             	test   ax,ax
c0007faf:	74 11                	je     c0007fc2 <f_mkfs+0xc07>
c0007fb1:	83 c2 02             	add    edx,0x2
c0007fb4:	39 d8                	cmp    eax,ebx
c0007fb6:	77 0a                	ja     c0007fc2 <f_mkfs+0xc07>
c0007fb8:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007fbc:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007fc0:	eb e7                	jmp    c0007fa9 <f_mkfs+0xbee>
c0007fc2:	31 db                	xor    ebx,ebx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	89 c8                	mov    eax,ecx
c0007fc8:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007fcc:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007fd3:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007fd8:	c1 ea 09             	shr    edx,0x9
c0007fdb:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007fe0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007fe4:	0f 87 96 00 00 00    	ja     c0008080 <f_mkfs+0xcc5>
c0007fea:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fee:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007ff6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007ffa:	be 20 00 00 00       	mov    esi,0x20
c0007fff:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0008004:	e9 a6 fe ff ff       	jmp    c0007eaf <f_mkfs+0xaf4>
c0008009:	83 c2 02             	add    edx,0x2
c000800c:	39 c8                	cmp    eax,ecx
c000800e:	0f 87 60 fe ff ff    	ja     c0007e74 <f_mkfs+0xab9>
c0008014:	01 ff                	add    edi,edi
c0008016:	e9 4d fe ff ff       	jmp    c0007e68 <f_mkfs+0xaad>
c000801b:	8d 04 40             	lea    eax,[eax+eax*2]
c000801e:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008023:	40                   	inc    eax
c0008024:	d1 e8                	shr    eax,1
c0008026:	83 c0 03             	add    eax,0x3
c0008029:	e9 62 fe ff ff       	jmp    c0007e90 <f_mkfs+0xad5>
c000802e:	31 d2                	xor    edx,edx
c0008030:	89 c8                	mov    eax,ecx
c0008032:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008036:	85 d2                	test   edx,edx
c0008038:	74 0c                	je     c0008046 <f_mkfs+0xc8b>
c000803a:	49                   	dec    ecx
c000803b:	46                   	inc    esi
c000803c:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008041:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008046:	89 c8                	mov    eax,ecx
c0008048:	31 d2                	xor    edx,edx
c000804a:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000804e:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008052:	e9 c3 fe ff ff       	jmp    c0007f1a <f_mkfs+0xb5f>
c0008057:	3d f5 0f 00 00       	cmp    eax,0xff5
c000805c:	77 31                	ja     c000808f <f_mkfs+0xcd4>
c000805e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008063:	75 1b                	jne    c0008080 <f_mkfs+0xcc5>
c0008065:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000806c:	3d 80 00 00 00       	cmp    eax,0x80
c0008071:	0f 86 d9 fd ff ff    	jbe    c0007e50 <f_mkfs+0xa95>
c0008077:	eb 07                	jmp    c0008080 <f_mkfs+0xcc5>
c0008079:	3d f5 0f 00 00       	cmp    eax,0xff5
c000807e:	76 0a                	jbe    c000808a <f_mkfs+0xccf>
c0008080:	bb 0e 00 00 00       	mov    ebx,0xe
c0008085:	e9 ff 03 00 00       	jmp    c0008489 <f_mkfs+0x10ce>
c000808a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000808f:	31 d2                	xor    edx,edx
c0008091:	b9 00 02 00 00       	mov    ecx,0x200
c0008096:	89 e8                	mov    eax,ebp
c0008098:	e8 a2 9c ff ff       	call   c0001d3f <mem_set>
c000809d:	b9 0b 00 00 00       	mov    ecx,0xb
c00080a2:	ba 82 f7 01 c0       	mov    edx,0xc001f782
c00080a7:	89 e8                	mov    eax,ebp
c00080a9:	e8 7c 9c ff ff       	call   c0001d2a <mem_cpy>
c00080ae:	8d 45 0b             	lea    eax,[ebp+0xb]
c00080b1:	ba 00 02 00 00       	mov    edx,0x200
c00080b6:	e8 62 9c ff ff       	call   c0001d1d <st_word>
c00080bb:	89 f8                	mov    eax,edi
c00080bd:	0f b7 d6             	movzx  edx,si
c00080c0:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00080c3:	8d 45 0e             	lea    eax,[ebp+0xe]
c00080c6:	e8 52 9c ff ff       	call   c0001d1d <st_word>
c00080cb:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00080cf:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080d4:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00080d7:	75 08                	jne    c00080e1 <f_mkfs+0xd26>
c00080d9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00080e1:	8d 45 11             	lea    eax,[ebp+0x11]
c00080e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080e8:	e8 30 9c ff ff       	call   c0001d1d <st_word>
c00080ed:	b8 ff ff 00 00       	mov    eax,0xffff
c00080f2:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080f6:	39 d0                	cmp    eax,edx
c00080f8:	b8 00 00 00 00       	mov    eax,0x0
c00080fd:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0008101:	72 0a                	jb     c000810d <f_mkfs+0xd52>
c0008103:	8d 45 13             	lea    eax,[ebp+0x13]
c0008106:	e8 12 9c ff ff       	call   c0001d1d <st_word>
c000810b:	eb 08                	jmp    c0008115 <f_mkfs+0xd5a>
c000810d:	8d 45 20             	lea    eax,[ebp+0x20]
c0008110:	e8 0c 9c ff ff       	call   c0001d21 <st_dword>
c0008115:	8d 45 18             	lea    eax,[ebp+0x18]
c0008118:	ba 3f 00 00 00       	mov    edx,0x3f
c000811d:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008121:	e8 f7 9b ff ff       	call   c0001d1d <st_word>
c0008126:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0008129:	ba ff 00 00 00       	mov    edx,0xff
c000812e:	e8 ea 9b ff ff       	call   c0001d1d <st_word>
c0008133:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0008136:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000813a:	e8 e2 9b ff ff       	call   c0001d21 <st_dword>
c000813f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008144:	75 57                	jne    c000819d <f_mkfs+0xde2>
c0008146:	8d 45 43             	lea    eax,[ebp+0x43]
c0008149:	ba 00 00 21 50       	mov    edx,0x50210000
c000814e:	e8 ce 9b ff ff       	call   c0001d21 <st_dword>
c0008153:	8d 45 24             	lea    eax,[ebp+0x24]
c0008156:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000815a:	e8 c2 9b ff ff       	call   c0001d21 <st_dword>
c000815f:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008162:	ba 02 00 00 00       	mov    edx,0x2
c0008167:	e8 b5 9b ff ff       	call   c0001d21 <st_dword>
c000816c:	8d 45 30             	lea    eax,[ebp+0x30]
c000816f:	ba 01 00 00 00       	mov    edx,0x1
c0008174:	e8 a4 9b ff ff       	call   c0001d1d <st_word>
c0008179:	8d 45 32             	lea    eax,[ebp+0x32]
c000817c:	ba 06 00 00 00       	mov    edx,0x6
c0008181:	e8 97 9b ff ff       	call   c0001d1d <st_word>
c0008186:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c000818a:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000818e:	8d 45 47             	lea    eax,[ebp+0x47]
c0008191:	b9 13 00 00 00       	mov    ecx,0x13
c0008196:	ba 8e f7 01 c0       	mov    edx,0xc001f78e
c000819b:	eb 2f                	jmp    c00081cc <f_mkfs+0xe11>
c000819d:	8d 45 27             	lea    eax,[ebp+0x27]
c00081a0:	ba 00 00 21 50       	mov    edx,0x50210000
c00081a5:	e8 77 9b ff ff       	call   c0001d21 <st_dword>
c00081aa:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c00081af:	8d 45 16             	lea    eax,[ebp+0x16]
c00081b2:	e8 66 9b ff ff       	call   c0001d1d <st_word>
c00081b7:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00081bb:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00081bf:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00081c2:	b9 13 00 00 00       	mov    ecx,0x13
c00081c7:	ba a2 f7 01 c0       	mov    edx,0xc001f7a2
c00081cc:	e8 59 9b ff ff       	call   c0001d2a <mem_cpy>
c00081d1:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00081d7:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081dc:	89 f0                	mov    eax,esi
c00081de:	e8 3a 9b ff ff       	call   c0001d1d <st_word>
c00081e3:	83 ec 0c             	sub    esp,0xc
c00081e6:	6a 01                	push   0x1
c00081e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081f0:	55                   	push   ebp
c00081f1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081f5:	e8 7c 9a ff ff       	call   c0001c76 <disk_write>
c00081fa:	83 c4 20             	add    esp,0x20
c00081fd:	85 c0                	test   eax,eax
c00081ff:	0f 85 67 02 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0008205:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000820a:	0f 85 b7 00 00 00    	jne    c00082c7 <f_mkfs+0xf0c>
c0008210:	83 ec 0c             	sub    esp,0xc
c0008213:	6a 01                	push   0x1
c0008215:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008219:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000821d:	83 c0 06             	add    eax,0x6
c0008220:	83 d2 00             	adc    edx,0x0
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	55                   	push   ebp
c0008226:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000822a:	e8 47 9a ff ff       	call   c0001c76 <disk_write>
c000822f:	83 c4 20             	add    esp,0x20
c0008232:	b9 00 02 00 00       	mov    ecx,0x200
c0008237:	31 d2                	xor    edx,edx
c0008239:	89 e8                	mov    eax,ebp
c000823b:	e8 ff 9a ff ff       	call   c0001d3f <mem_set>
c0008240:	ba 52 52 61 41       	mov    edx,0x41615252
c0008245:	89 e8                	mov    eax,ebp
c0008247:	e8 d5 9a ff ff       	call   c0001d21 <st_dword>
c000824c:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008252:	ba 72 72 41 61       	mov    edx,0x61417272
c0008257:	e8 c5 9a ff ff       	call   c0001d21 <st_dword>
c000825c:	8d 53 ff             	lea    edx,[ebx-0x1]
c000825f:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008265:	e8 b7 9a ff ff       	call   c0001d21 <st_dword>
c000826a:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008270:	ba 02 00 00 00       	mov    edx,0x2
c0008275:	e8 a7 9a ff ff       	call   c0001d21 <st_dword>
c000827a:	ba 55 aa 00 00       	mov    edx,0xaa55
c000827f:	89 f0                	mov    eax,esi
c0008281:	e8 97 9a ff ff       	call   c0001d1d <st_word>
c0008286:	83 ec 0c             	sub    esp,0xc
c0008289:	6a 01                	push   0x1
c000828b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000828f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008293:	83 c0 07             	add    eax,0x7
c0008296:	83 d2 00             	adc    edx,0x0
c0008299:	52                   	push   edx
c000829a:	50                   	push   eax
c000829b:	55                   	push   ebp
c000829c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082a0:	e8 d1 99 ff ff       	call   c0001c76 <disk_write>
c00082a5:	83 c4 14             	add    esp,0x14
c00082a8:	6a 01                	push   0x1
c00082aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00082b2:	83 c0 01             	add    eax,0x1
c00082b5:	83 d2 00             	adc    edx,0x0
c00082b8:	52                   	push   edx
c00082b9:	50                   	push   eax
c00082ba:	55                   	push   ebp
c00082bb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082bf:	e8 b2 99 ff ff       	call   c0001c76 <disk_write>
c00082c4:	83 c4 20             	add    esp,0x20
c00082c7:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00082ce:	31 d2                	xor    edx,edx
c00082d0:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00082d6:	31 db                	xor    ebx,ebx
c00082d8:	89 e8                	mov    eax,ebp
c00082da:	e8 60 9a ff ff       	call   c0001d3f <mem_set>
c00082df:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00082e4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082eb:	0f 94 c3             	sete   bl
c00082ee:	4b                   	dec    ebx
c00082ef:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082f5:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082fb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008300:	75 21                	jne    c0008323 <f_mkfs+0xf68>
c0008302:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008307:	89 e8                	mov    eax,ebp
c0008309:	e8 13 9a ff ff       	call   c0001d21 <st_dword>
c000830e:	8d 45 04             	lea    eax,[ebp+0x4]
c0008311:	83 ca ff             	or     edx,0xffffffff
c0008314:	e8 08 9a ff ff       	call   c0001d21 <st_dword>
c0008319:	8d 45 08             	lea    eax,[ebp+0x8]
c000831c:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008321:	eb 04                	jmp    c0008327 <f_mkfs+0xf6c>
c0008323:	89 da                	mov    edx,ebx
c0008325:	89 e8                	mov    eax,ebp
c0008327:	e8 f5 99 ff ff       	call   c0001d21 <st_dword>
c000832c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008330:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008334:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008338:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000833c:	39 ce                	cmp    esi,ecx
c000833e:	76 02                	jbe    c0008342 <f_mkfs+0xf87>
c0008340:	89 ce                	mov    esi,ecx
c0008342:	83 ec 0c             	sub    esp,0xc
c0008345:	56                   	push   esi
c0008346:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000834a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000834e:	55                   	push   ebp
c000834f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008353:	e8 1e 99 ff ff       	call   c0001c76 <disk_write>
c0008358:	83 c4 20             	add    esp,0x20
c000835b:	85 c0                	test   eax,eax
c000835d:	0f 85 09 01 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0008363:	31 d2                	xor    edx,edx
c0008365:	b9 00 02 00 00       	mov    ecx,0x200
c000836a:	89 e8                	mov    eax,ebp
c000836c:	e8 ce 99 ff ff       	call   c0001d3f <mem_set>
c0008371:	31 d2                	xor    edx,edx
c0008373:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008377:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000837b:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000837f:	75 b3                	jne    c0008334 <f_mkfs+0xf79>
c0008381:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008384:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000838b:	40                   	inc    eax
c000838c:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008390:	0f 87 65 ff ff ff    	ja     c00082fb <f_mkfs+0xf40>
c0008396:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000839b:	74 04                	je     c00083a1 <f_mkfs+0xfe6>
c000839d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00083a1:	89 fb                	mov    ebx,edi
c00083a3:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00083a7:	76 04                	jbe    c00083ad <f_mkfs+0xff2>
c00083a9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00083ad:	83 ec 0c             	sub    esp,0xc
c00083b0:	53                   	push   ebx
c00083b1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00083b5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00083b9:	55                   	push   ebp
c00083ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083be:	e8 b3 98 ff ff       	call   c0001c76 <disk_write>
c00083c3:	83 c4 20             	add    esp,0x20
c00083c6:	85 c0                	test   eax,eax
c00083c8:	0f 85 9e 00 00 00    	jne    c000846c <f_mkfs+0x10b1>
c00083ce:	31 d2                	xor    edx,edx
c00083d0:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00083d4:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00083d8:	29 df                	sub    edi,ebx
c00083da:	75 c5                	jne    c00083a1 <f_mkfs+0xfe6>
c00083dc:	b1 0c                	mov    cl,0xc
c00083de:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e3:	74 1d                	je     c0008402 <f_mkfs+0x1047>
c00083e5:	b8 ff ff 00 00       	mov    eax,0xffff
c00083ea:	b1 06                	mov    cl,0x6
c00083ec:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083f0:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083f4:	72 0c                	jb     c0008402 <f_mkfs+0x1047>
c00083f6:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083fb:	0f 94 c1             	sete   cl
c00083fe:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008402:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008407:	75 4c                	jne    c0008455 <f_mkfs+0x109a>
c0008409:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000840d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008411:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008418:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000841f:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000842a:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008435:	0f b6 c9             	movzx  ecx,cl
c0008438:	83 ec 0c             	sub    esp,0xc
c000843b:	55                   	push   ebp
c000843c:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008443:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008447:	e8 2f c2 ff ff       	call   c000467b <create_partition>
c000844c:	83 c4 10             	add    esp,0x10
c000844f:	89 c3                	mov    ebx,eax
c0008451:	85 c0                	test   eax,eax
c0008453:	75 34                	jne    c0008489 <f_mkfs+0x10ce>
c0008455:	31 db                	xor    ebx,ebx
c0008457:	50                   	push   eax
c0008458:	6a 00                	push   0x0
c000845a:	6a 00                	push   0x0
c000845c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008460:	e8 27 98 ff ff       	call   c0001c8c <disk_ioctl>
c0008465:	83 c4 10             	add    esp,0x10
c0008468:	85 c0                	test   eax,eax
c000846a:	74 1d                	je     c0008489 <f_mkfs+0x10ce>
c000846c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008474:	75 0c                	jne    c0008482 <f_mkfs+0x10c7>
c0008476:	83 ec 0c             	sub    esp,0xc
c0008479:	55                   	push   ebp
c000847a:	e8 75 00 00 00       	call   c00084f4 <ff_memfree>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	bb 01 00 00 00       	mov    ebx,0x1
c0008487:	eb 48                	jmp    c00084d1 <f_mkfs+0x1116>
c0008489:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008491:	75 3e                	jne    c00084d1 <f_mkfs+0x1116>
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	55                   	push   ebp
c0008497:	e8 58 00 00 00       	call   c00084f4 <ff_memfree>
c000849c:	83 c4 10             	add    esp,0x10
c000849f:	eb 30                	jmp    c00084d1 <f_mkfs+0x1116>
c00084a1:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00084a6:	0f 85 eb fa ff ff    	jne    c0007f97 <f_mkfs+0xbdc>
c00084ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00084b0:	81 ff 80 00 00 00    	cmp    edi,0x80
c00084b6:	0f 86 b8 f9 ff ff    	jbe    c0007e74 <f_mkfs+0xab9>
c00084bc:	e9 bf fb ff ff       	jmp    c0008080 <f_mkfs+0xcc5>
c00084c1:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00084c6:	0f 85 c0 fa ff ff    	jne    c0007f8c <f_mkfs+0xbd1>
c00084cc:	e9 af fb ff ff       	jmp    c0008080 <f_mkfs+0xcc5>
c00084d1:	81 c4 9c 00 00 00    	add    esp,0x9c
c00084d7:	89 d8                	mov    eax,ebx
c00084d9:	5b                   	pop    ebx
c00084da:	5e                   	pop    esi
c00084db:	5f                   	pop    edi
c00084dc:	5d                   	pop    ebp
c00084dd:	c3                   	ret    

c00084de <ff_memalloc>:
c00084de:	83 ec 0c             	sub    esp,0xc
c00084e1:	83 ec 0c             	sub    esp,0xc
c00084e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084e8:	e8 a2 4f 00 00       	call   c000d48f <malloc>
c00084ed:	83 c4 10             	add    esp,0x10
c00084f0:	83 c4 0c             	add    esp,0xc
c00084f3:	c3                   	ret    

c00084f4 <ff_memfree>:
c00084f4:	83 ec 0c             	sub    esp,0xc
c00084f7:	83 ec 0c             	sub    esp,0xc
c00084fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084fe:	e8 9c 4f 00 00       	call   c000d49f <free>
c0008503:	83 c4 10             	add    esp,0x10
c0008506:	90                   	nop
c0008507:	83 c4 0c             	add    esp,0xc
c000850a:	c3                   	ret    

c000850b <ff_uni2oem>:
c000850b:	83 ec 14             	sub    esp,0x14
c000850e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008512:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008516:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000851d:	c7 44 24 0c c0 fa 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fac0
c0008525:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000852a:	77 0b                	ja     c0008537 <ff_uni2oem+0x2c>
c000852c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008530:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008535:	eb 5b                	jmp    c0008592 <ff_uni2oem+0x87>
c0008537:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c000853f:	77 51                	ja     c0008592 <ff_uni2oem+0x87>
c0008541:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008547:	75 49                	jne    c0008592 <ff_uni2oem+0x87>
c0008549:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008550:	eb 0b                	jmp    c000855d <ff_uni2oem+0x52>
c0008552:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008557:	40                   	inc    eax
c0008558:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000855d:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008563:	77 1b                	ja     c0008580 <ff_uni2oem+0x75>
c0008565:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000856a:	01 c0                	add    eax,eax
c000856c:	89 c2                	mov    edx,eax
c000856e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008572:	01 d0                	add    eax,edx
c0008574:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008577:	0f b7 c0             	movzx  eax,ax
c000857a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000857e:	75 d2                	jne    c0008552 <ff_uni2oem+0x47>
c0008580:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008585:	83 e8 80             	sub    eax,0xffffff80
c0008588:	25 ff 00 00 00       	and    eax,0xff
c000858d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008592:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008597:	83 c4 14             	add    esp,0x14
c000859a:	c3                   	ret    

c000859b <ff_oem2uni>:
c000859b:	83 ec 18             	sub    esp,0x18
c000859e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00085a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085a6:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00085ab:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085af:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00085b6:	c7 44 24 10 c0 fa 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fac0
c00085be:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00085c4:	77 0b                	ja     c00085d1 <ff_oem2uni+0x36>
c00085c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ca:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085cf:	eb 2d                	jmp    c00085fe <ff_oem2uni+0x63>
c00085d1:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00085d7:	75 25                	jne    c00085fe <ff_oem2uni+0x63>
c00085d9:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00085e0:	77 1c                	ja     c00085fe <ff_oem2uni+0x63>
c00085e2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00085e7:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085ec:	01 c0                	add    eax,eax
c00085ee:	89 c2                	mov    edx,eax
c00085f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085f4:	01 d0                	add    eax,edx
c00085f6:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f9:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085fe:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008603:	83 c4 18             	add    esp,0x18
c0008606:	c3                   	ret    

c0008607 <ff_wtoupper>:
c0008607:	83 ec 10             	sub    esp,0x10
c000860a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008612:	0f 87 3e 01 00 00    	ja     c0008756 <ff_wtoupper+0x14f>
c0008618:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000861c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008621:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008628:	77 07                	ja     c0008631 <ff_wtoupper+0x2a>
c000862a:	b8 c0 f8 01 c0       	mov    eax,0xc001f8c0
c000862f:	eb 05                	jmp    c0008636 <ff_wtoupper+0x2f>
c0008631:	b8 00 f8 01 c0       	mov    eax,0xc001f800
c0008636:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000863a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000863e:	8d 50 02             	lea    edx,[eax+0x2]
c0008641:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008645:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008648:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000864d:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008653:	0f 84 f4 00 00 00    	je     c000874d <ff_wtoupper+0x146>
c0008659:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000865e:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008663:	0f 82 e4 00 00 00    	jb     c000874d <ff_wtoupper+0x146>
c0008669:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000866d:	8d 50 02             	lea    edx,[eax+0x2]
c0008670:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008674:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008677:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000867c:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008681:	66 c1 e8 08          	shr    ax,0x8
c0008685:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000868a:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008691:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008696:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000869b:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00086a0:	01 ca                	add    edx,ecx
c00086a2:	39 d0                	cmp    eax,edx
c00086a4:	0f 8d 86 00 00 00    	jge    c0008730 <ff_wtoupper+0x129>
c00086aa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086af:	83 f8 08             	cmp    eax,0x8
c00086b2:	0f 87 94 00 00 00    	ja     c000874c <ff_wtoupper+0x145>
c00086b8:	8b 04 85 c0 f7 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0840]
c00086bf:	ff e0                	jmp    eax
c00086c1:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00086c6:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00086cb:	29 c2                	sub    edx,eax
c00086cd:	89 d0                	mov    eax,edx
c00086cf:	01 c0                	add    eax,eax
c00086d1:	89 c2                	mov    edx,eax
c00086d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086d7:	01 d0                	add    eax,edx
c00086d9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086dc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00086e1:	eb 4b                	jmp    c000872e <ff_wtoupper+0x127>
c00086e3:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00086e8:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086ec:	83 e0 01             	and    eax,0x1
c00086ef:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086f4:	eb 38                	jmp    c000872e <ff_wtoupper+0x127>
c00086f6:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086fc:	eb 30                	jmp    c000872e <ff_wtoupper+0x127>
c00086fe:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008704:	eb 28                	jmp    c000872e <ff_wtoupper+0x127>
c0008706:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000870c:	eb 20                	jmp    c000872e <ff_wtoupper+0x127>
c000870e:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008714:	eb 18                	jmp    c000872e <ff_wtoupper+0x127>
c0008716:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000871c:	eb 10                	jmp    c000872e <ff_wtoupper+0x127>
c000871e:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008724:	eb 08                	jmp    c000872e <ff_wtoupper+0x127>
c0008726:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000872d:	90                   	nop
c000872e:	eb 1c                	jmp    c000874c <ff_wtoupper+0x145>
c0008730:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008736:	0f 85 fe fe ff ff    	jne    c000863a <ff_wtoupper+0x33>
c000873c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008741:	01 c0                	add    eax,eax
c0008743:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008747:	e9 ee fe ff ff       	jmp    c000863a <ff_wtoupper+0x33>
c000874c:	90                   	nop
c000874d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008752:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008756:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000875a:	83 c4 10             	add    esp,0x10
c000875d:	c3                   	ret    

c000875e <is_bad_src_ratio>:
c000875e:	83 ec 0c             	sub    esp,0xc
c0008761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008765:	89 04 24             	mov    DWORD PTR [esp],eax
c0008768:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000876c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008770:	dd 04 24             	fld    QWORD PTR [esp]
c0008773:	dd 05 80 00 02 c0    	fld    QWORD PTR ds:0xc0020080
c0008779:	de d9                	fcompp 
c000877b:	df e0                	fnstsw ax
c000877d:	f6 c4 45             	test   ah,0x45
c0008780:	74 10                	je     c0008792 <is_bad_src_ratio+0x34>
c0008782:	dd 04 24             	fld    QWORD PTR [esp]
c0008785:	dc 1d 88 00 02 c0    	fcomp  QWORD PTR ds:0xc0020088
c000878b:	df e0                	fnstsw ax
c000878d:	f6 c4 45             	test   ah,0x45
c0008790:	75 07                	jne    c0008799 <is_bad_src_ratio+0x3b>
c0008792:	b8 01 00 00 00       	mov    eax,0x1
c0008797:	eb 05                	jmp    c000879e <is_bad_src_ratio+0x40>
c0008799:	b8 00 00 00 00       	mov    eax,0x0
c000879e:	83 c4 0c             	add    esp,0xc
c00087a1:	c3                   	ret    

c00087a2 <psrc_set_converter>:
c00087a2:	56                   	push   esi
c00087a3:	89 d6                	mov    esi,edx
c00087a5:	53                   	push   ebx
c00087a6:	89 c3                	mov    ebx,eax
c00087a8:	83 ec 0c             	sub    esp,0xc
c00087ab:	52                   	push   edx
c00087ac:	50                   	push   eax
c00087ad:	e8 33 24 00 00       	call   c000abe5 <sinc_set_converter>
c00087b2:	83 c4 10             	add    esp,0x10
c00087b5:	85 c0                	test   eax,eax
c00087b7:	74 25                	je     c00087de <psrc_set_converter+0x3c>
c00087b9:	50                   	push   eax
c00087ba:	50                   	push   eax
c00087bb:	56                   	push   esi
c00087bc:	53                   	push   ebx
c00087bd:	e8 39 29 00 00       	call   c000b0fb <zoh_set_converter>
c00087c2:	83 c4 10             	add    esp,0x10
c00087c5:	85 c0                	test   eax,eax
c00087c7:	74 15                	je     c00087de <psrc_set_converter+0x3c>
c00087c9:	51                   	push   ecx
c00087ca:	51                   	push   ecx
c00087cb:	56                   	push   esi
c00087cc:	53                   	push   ebx
c00087cd:	e8 10 0a 00 00       	call   c00091e2 <linear_set_converter>
c00087d2:	83 c4 10             	add    esp,0x10
c00087d5:	ba 0a 00 00 00       	mov    edx,0xa
c00087da:	85 c0                	test   eax,eax
c00087dc:	75 02                	jne    c00087e0 <psrc_set_converter+0x3e>
c00087de:	31 d2                	xor    edx,edx
c00087e0:	89 d0                	mov    eax,edx
c00087e2:	5a                   	pop    edx
c00087e3:	5b                   	pop    ebx
c00087e4:	5e                   	pop    esi
c00087e5:	c3                   	ret    

c00087e6 <src_delete>:
c00087e6:	53                   	push   ebx
c00087e7:	83 ec 08             	sub    esp,0x8
c00087ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ee:	85 db                	test   ebx,ebx
c00087f0:	74 29                	je     c000881b <src_delete+0x35>
c00087f2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087f5:	85 c0                	test   eax,eax
c00087f7:	74 0c                	je     c0008805 <src_delete+0x1f>
c00087f9:	83 ec 0c             	sub    esp,0xc
c00087fc:	50                   	push   eax
c00087fd:	e8 9d 4c 00 00       	call   c000d49f <free>
c0008802:	83 c4 10             	add    esp,0x10
c0008805:	50                   	push   eax
c0008806:	6a 3c                	push   0x3c
c0008808:	6a 00                	push   0x0
c000880a:	53                   	push   ebx
c000880b:	e8 c8 7e ff ff       	call   c00006d8 <memset>
c0008810:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008813:	e8 87 4c 00 00       	call   c000d49f <free>
c0008818:	83 c4 10             	add    esp,0x10
c000881b:	31 c0                	xor    eax,eax
c000881d:	83 c4 08             	add    esp,0x8
c0008820:	5b                   	pop    ebx
c0008821:	c3                   	ret    

c0008822 <src_process>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	53                   	push   ebx
c0008825:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008829:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000882d:	85 f6                	test   esi,esi
c000882f:	0f 84 e2 00 00 00    	je     c0008917 <src_process+0xf5>
c0008835:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0008839:	0f 84 df 00 00 00    	je     c000891e <src_process+0xfc>
c000883f:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008843:	0f 84 d5 00 00 00    	je     c000891e <src_process+0xfc>
c0008849:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008850:	0f 85 cf 00 00 00    	jne    c0008925 <src_process+0x103>
c0008856:	85 db                	test   ebx,ebx
c0008858:	0f 84 ce 00 00 00    	je     c000892c <src_process+0x10a>
c000885e:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008861:	0f 84 cc 00 00 00    	je     c0008933 <src_process+0x111>
c0008867:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000886b:	0f 84 c2 00 00 00    	je     c0008933 <src_process+0x111>
c0008871:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008874:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008877:	e8 e2 fe ff ff       	call   c000875e <is_bad_src_ratio>
c000887c:	5a                   	pop    edx
c000887d:	85 c0                	test   eax,eax
c000887f:	59                   	pop    ecx
c0008880:	0f 85 b4 00 00 00    	jne    c000893a <src_process+0x118>
c0008886:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000888a:	79 07                	jns    c0008893 <src_process+0x71>
c000888c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008893:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008897:	79 07                	jns    c00088a0 <src_process+0x7e>
c0008899:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00088a0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00088a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00088a5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00088a8:	39 ca                	cmp    edx,ecx
c00088aa:	73 0b                	jae    c00088b7 <src_process+0x95>
c00088ac:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c00088b0:	8d 04 82             	lea    eax,[edx+eax*4]
c00088b3:	39 c1                	cmp    ecx,eax
c00088b5:	eb 09                	jmp    c00088c0 <src_process+0x9e>
c00088b7:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c00088bb:	8d 04 81             	lea    eax,[ecx+eax*4]
c00088be:	39 c2                	cmp    edx,eax
c00088c0:	72 7f                	jb     c0008941 <src_process+0x11f>
c00088c2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00088c9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088d0:	d9 05 a0 00 02 c0    	fld    DWORD PTR ds:0xc00200a0
c00088d6:	dc 1e                	fcomp  QWORD PTR [esi]
c00088d8:	df e0                	fnstsw ax
c00088da:	9e                   	sahf   
c00088db:	76 05                	jbe    c00088e2 <src_process+0xc0>
c00088dd:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00088e0:	dd 1e                	fstp   QWORD PTR [esi]
c00088e2:	83 ec 10             	sub    esp,0x10
c00088e5:	dd 06                	fld    QWORD PTR [esi]
c00088e7:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00088ea:	dd 1c 24             	fstp   QWORD PTR [esp]
c00088ed:	e8 ee 5f 01 00       	call   c001e8e0 <fabs>
c00088f2:	83 c4 10             	add    esp,0x10
c00088f5:	dd 05 90 00 02 c0    	fld    QWORD PTR ds:0xc0020090
c00088fb:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00088ff:	de d9                	fcompp 
c0008901:	df e0                	fnstsw ax
c0008903:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008907:	9e                   	sahf   
c0008908:	76 05                	jbe    c000890f <src_process+0xed>
c000890a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000890d:	eb 03                	jmp    c0008912 <src_process+0xf0>
c000890f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0008912:	59                   	pop    ecx
c0008913:	5b                   	pop    ebx
c0008914:	5e                   	pop    esi
c0008915:	ff e0                	jmp    eax
c0008917:	b8 02 00 00 00       	mov    eax,0x2
c000891c:	eb 28                	jmp    c0008946 <src_process+0x124>
c000891e:	b8 07 00 00 00       	mov    eax,0x7
c0008923:	eb 21                	jmp    c0008946 <src_process+0x124>
c0008925:	b8 12 00 00 00       	mov    eax,0x12
c000892a:	eb 1a                	jmp    c0008946 <src_process+0x124>
c000892c:	b8 03 00 00 00       	mov    eax,0x3
c0008931:	eb 13                	jmp    c0008946 <src_process+0x124>
c0008933:	b8 04 00 00 00       	mov    eax,0x4
c0008938:	eb 0c                	jmp    c0008946 <src_process+0x124>
c000893a:	b8 06 00 00 00       	mov    eax,0x6
c000893f:	eb 05                	jmp    c0008946 <src_process+0x124>
c0008941:	b8 10 00 00 00       	mov    eax,0x10
c0008946:	5a                   	pop    edx
c0008947:	5b                   	pop    ebx
c0008948:	5e                   	pop    esi
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 4c             	sub    esp,0x4c
c0008951:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008955:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c0008959:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000895d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008961:	85 ff                	test   edi,edi
c0008963:	0f 8e 36 01 00 00    	jle    c0008a9f <src_callback_read+0x155>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 2e 01 00 00    	je     c0008a9f <src_callback_read+0x155>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 19 01 00 00       	jmp    c0008a9f <src_callback_read+0x155>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 07 01 00 00       	jmp    c0008a9f <src_callback_read+0x155>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 28          	lea    eax,[esp+0x28]
c00089a1:	50                   	push   eax
c00089a2:	e8 31 7d ff ff       	call   c00006d8 <memset>
c00089a7:	5e                   	pop    esi
c00089a8:	5d                   	pop    ebp
c00089a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00089ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00089b1:	e8 a8 fd ff ff       	call   c000875e <is_bad_src_ratio>
c00089b6:	83 c4 10             	add    esp,0x10
c00089b9:	85 c0                	test   eax,eax
c00089bb:	74 0c                	je     c00089c9 <src_callback_read+0x7f>
c00089bd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089c4:	e9 d6 00 00 00       	jmp    c0008a9f <src_callback_read+0x155>
c00089c9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00089cd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00089d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00089d5:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00089d9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089dc:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00089e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00089e4:	31 f6                	xor    esi,esi
c00089e6:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089e9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ed:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00089f2:	75 30                	jne    c0008a24 <src_callback_read+0xda>
c00089f4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00089f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00089fc:	52                   	push   edx
c00089fd:	52                   	push   edx
c00089fe:	8d 44 24 20          	lea    eax,[esp+0x20]
c0008a02:	50                   	push   eax
c0008a03:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a06:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a09:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008a0d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0008a15:	83 c4 10             	add    esp,0x10
c0008a18:	85 c0                	test   eax,eax
c0008a1a:	75 08                	jne    c0008a24 <src_callback_read+0xda>
c0008a1c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008a24:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a2b:	50                   	push   eax
c0008a2c:	50                   	push   eax
c0008a2d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0008a31:	50                   	push   eax
c0008a32:	53                   	push   ebx
c0008a33:	e8 ea fd ff ff       	call   c0008822 <src_process>
c0008a38:	83 c4 10             	add    esp,0x10
c0008a3b:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a42:	85 c0                	test   eax,eax
c0008a44:	75 42                	jne    c0008a88 <src_callback_read+0x13e>
c0008a46:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0008a4a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a4d:	89 e9                	mov    ecx,ebp
c0008a4f:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008a53:	0f af ca             	imul   ecx,edx
c0008a56:	c1 e1 02             	shl    ecx,0x2
c0008a59:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0008a5d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008a61:	0f af d1             	imul   edx,ecx
c0008a64:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c0008a68:	c1 e2 02             	shl    edx,0x2
c0008a6b:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008a6f:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a72:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c0008a77:	75 04                	jne    c0008a7d <src_callback_read+0x133>
c0008a79:	85 c9                	test   ecx,ecx
c0008a7b:	74 0b                	je     c0008a88 <src_callback_read+0x13e>
c0008a7d:	39 d7                	cmp    edi,edx
c0008a7f:	7e 09                	jle    c0008a8a <src_callback_read+0x140>
c0008a81:	89 d6                	mov    esi,edx
c0008a83:	e9 65 ff ff ff       	jmp    c00089ed <src_callback_read+0xa3>
c0008a88:	89 f2                	mov    edx,esi
c0008a8a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008a8e:	85 c0                	test   eax,eax
c0008a90:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a93:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008a97:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a9a:	74 05                	je     c0008aa1 <src_callback_read+0x157>
c0008a9c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a9f:	31 d2                	xor    edx,edx
c0008aa1:	83 c4 4c             	add    esp,0x4c
c0008aa4:	89 d0                	mov    eax,edx
c0008aa6:	5b                   	pop    ebx
c0008aa7:	5e                   	pop    esi
c0008aa8:	5f                   	pop    edi
c0008aa9:	5d                   	pop    ebp
c0008aaa:	c3                   	ret    

c0008aab <src_set_ratio>:
c0008aab:	53                   	push   ebx
c0008aac:	b8 02 00 00 00       	mov    eax,0x2
c0008ab1:	83 ec 08             	sub    esp,0x8
c0008ab4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ab8:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c0008abc:	85 db                	test   ebx,ebx
c0008abe:	74 33                	je     c0008af3 <src_set_ratio+0x48>
c0008ac0:	b8 07 00 00 00       	mov    eax,0x7
c0008ac5:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ac9:	74 2c                	je     c0008af7 <src_set_ratio+0x4c>
c0008acb:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008acf:	74 2a                	je     c0008afb <src_set_ratio+0x50>
c0008ad1:	50                   	push   eax
c0008ad2:	50                   	push   eax
c0008ad3:	dd 14 24             	fst    QWORD PTR [esp]
c0008ad6:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008ada:	e8 7f fc ff ff       	call   c000875e <is_bad_src_ratio>
c0008adf:	5a                   	pop    edx
c0008ae0:	85 c0                	test   eax,eax
c0008ae2:	59                   	pop    ecx
c0008ae3:	75 07                	jne    c0008aec <src_set_ratio+0x41>
c0008ae5:	dd 04 24             	fld    QWORD PTR [esp]
c0008ae8:	dd 1b                	fstp   QWORD PTR [ebx]
c0008aea:	eb 11                	jmp    c0008afd <src_set_ratio+0x52>
c0008aec:	b8 06 00 00 00       	mov    eax,0x6
c0008af1:	eb 0a                	jmp    c0008afd <src_set_ratio+0x52>
c0008af3:	dd d8                	fstp   st(0)
c0008af5:	eb 06                	jmp    c0008afd <src_set_ratio+0x52>
c0008af7:	dd d8                	fstp   st(0)
c0008af9:	eb 02                	jmp    c0008afd <src_set_ratio+0x52>
c0008afb:	dd d8                	fstp   st(0)
c0008afd:	83 c4 08             	add    esp,0x8
c0008b00:	5b                   	pop    ebx
c0008b01:	c3                   	ret    

c0008b02 <src_get_channels>:
c0008b02:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b06:	b8 02 00 00 00       	mov    eax,0x2
c0008b0b:	85 d2                	test   edx,edx
c0008b0d:	74 14                	je     c0008b23 <src_get_channels+0x21>
c0008b0f:	b8 07 00 00 00       	mov    eax,0x7
c0008b14:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b18:	74 09                	je     c0008b23 <src_get_channels+0x21>
c0008b1a:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b1e:	74 03                	je     c0008b23 <src_get_channels+0x21>
c0008b20:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b23:	c3                   	ret    

c0008b24 <src_reset>:
c0008b24:	53                   	push   ebx
c0008b25:	b8 02 00 00 00       	mov    eax,0x2
c0008b2a:	83 ec 08             	sub    esp,0x8
c0008b2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b31:	85 db                	test   ebx,ebx
c0008b33:	74 2e                	je     c0008b63 <src_reset+0x3f>
c0008b35:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b38:	85 c0                	test   eax,eax
c0008b3a:	74 09                	je     c0008b45 <src_reset+0x21>
c0008b3c:	83 ec 0c             	sub    esp,0xc
c0008b3f:	53                   	push   ebx
c0008b40:	ff d0                	call   eax
c0008b42:	83 c4 10             	add    esp,0x10
c0008b45:	d9 ee                	fldz   
c0008b47:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b4e:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008b51:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b58:	dd 1b                	fstp   QWORD PTR [ebx]
c0008b5a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b61:	31 c0                	xor    eax,eax
c0008b63:	83 c4 08             	add    esp,0x8
c0008b66:	5b                   	pop    ebx
c0008b67:	c3                   	ret    

c0008b68 <src_new>:
c0008b68:	57                   	push   edi
c0008b69:	56                   	push   esi
c0008b6a:	53                   	push   ebx
c0008b6b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b73:	85 f6                	test   esi,esi
c0008b75:	74 73                	je     c0008bea <src_new+0x82>
c0008b77:	85 ff                	test   edi,edi
c0008b79:	7f 08                	jg     c0008b83 <src_new+0x1b>
c0008b7b:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b81:	eb 1e                	jmp    c0008ba1 <src_new+0x39>
c0008b83:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b89:	50                   	push   eax
c0008b8a:	50                   	push   eax
c0008b8b:	6a 3c                	push   0x3c
c0008b8d:	6a 01                	push   0x1
c0008b8f:	e8 2b 49 00 00       	call   c000d4bf <calloc>
c0008b94:	83 c4 10             	add    esp,0x10
c0008b97:	89 c3                	mov    ebx,eax
c0008b99:	85 c0                	test   eax,eax
c0008b9b:	75 10                	jne    c0008bad <src_new+0x45>
c0008b9d:	85 f6                	test   esi,esi
c0008b9f:	75 04                	jne    c0008ba5 <src_new+0x3d>
c0008ba1:	31 db                	xor    ebx,ebx
c0008ba3:	eb 4b                	jmp    c0008bf0 <src_new+0x88>
c0008ba5:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008bab:	eb 43                	jmp    c0008bf0 <src_new+0x88>
c0008bad:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bb0:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bbb:	e8 e2 fb ff ff       	call   c00087a2 <psrc_set_converter>
c0008bc0:	85 c0                	test   eax,eax
c0008bc2:	74 18                	je     c0008bdc <src_new+0x74>
c0008bc4:	85 f6                	test   esi,esi
c0008bc6:	74 06                	je     c0008bce <src_new+0x66>
c0008bc8:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bce:	83 ec 0c             	sub    esp,0xc
c0008bd1:	53                   	push   ebx
c0008bd2:	31 db                	xor    ebx,ebx
c0008bd4:	e8 c6 48 00 00       	call   c000d49f <free>
c0008bd9:	83 c4 10             	add    esp,0x10
c0008bdc:	83 ec 0c             	sub    esp,0xc
c0008bdf:	53                   	push   ebx
c0008be0:	e8 3f ff ff ff       	call   c0008b24 <src_reset>
c0008be5:	83 c4 10             	add    esp,0x10
c0008be8:	eb 06                	jmp    c0008bf0 <src_new+0x88>
c0008bea:	85 ff                	test   edi,edi
c0008bec:	7f 9b                	jg     c0008b89 <src_new+0x21>
c0008bee:	eb b1                	jmp    c0008ba1 <src_new+0x39>
c0008bf0:	89 d8                	mov    eax,ebx
c0008bf2:	5b                   	pop    ebx
c0008bf3:	5e                   	pop    esi
c0008bf4:	5f                   	pop    edi
c0008bf5:	c3                   	ret    

c0008bf6 <src_callback_new>:
c0008bf6:	56                   	push   esi
c0008bf7:	53                   	push   ebx
c0008bf8:	53                   	push   ebx
c0008bf9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c01:	85 f6                	test   esi,esi
c0008c03:	75 0e                	jne    c0008c13 <src_callback_new+0x1d>
c0008c05:	31 db                	xor    ebx,ebx
c0008c07:	85 c0                	test   eax,eax
c0008c09:	74 47                	je     c0008c52 <src_callback_new+0x5c>
c0008c0b:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c11:	eb 3f                	jmp    c0008c52 <src_callback_new+0x5c>
c0008c13:	85 c0                	test   eax,eax
c0008c15:	74 06                	je     c0008c1d <src_callback_new+0x27>
c0008c17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1d:	51                   	push   ecx
c0008c1e:	50                   	push   eax
c0008c1f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c23:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c27:	e8 3c ff ff ff       	call   c0008b68 <src_new>
c0008c2c:	83 c4 10             	add    esp,0x10
c0008c2f:	89 c3                	mov    ebx,eax
c0008c31:	85 c0                	test   eax,eax
c0008c33:	74 1d                	je     c0008c52 <src_callback_new+0x5c>
c0008c35:	83 ec 0c             	sub    esp,0xc
c0008c38:	50                   	push   eax
c0008c39:	e8 e6 fe ff ff       	call   c0008b24 <src_reset>
c0008c3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c42:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c49:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c4c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4f:	83 c4 10             	add    esp,0x10
c0008c52:	89 d8                	mov    eax,ebx
c0008c54:	5a                   	pop    edx
c0008c55:	5b                   	pop    ebx
c0008c56:	5e                   	pop    esi
c0008c57:	c3                   	ret    

c0008c58 <src_get_name>:
c0008c58:	53                   	push   ebx
c0008c59:	83 ec 14             	sub    esp,0x14
c0008c5c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c60:	53                   	push   ebx
c0008c61:	e8 59 1f 00 00       	call   c000abbf <sinc_get_name>
c0008c66:	83 c4 10             	add    esp,0x10
c0008c69:	85 c0                	test   eax,eax
c0008c6b:	75 1d                	jne    c0008c8a <src_get_name+0x32>
c0008c6d:	83 ec 0c             	sub    esp,0xc
c0008c70:	53                   	push   ebx
c0008c71:	e8 67 24 00 00       	call   c000b0dd <zoh_get_name>
c0008c76:	83 c4 10             	add    esp,0x10
c0008c79:	85 c0                	test   eax,eax
c0008c7b:	75 0d                	jne    c0008c8a <src_get_name+0x32>
c0008c7d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c81:	83 c4 08             	add    esp,0x8
c0008c84:	5b                   	pop    ebx
c0008c85:	e9 3a 05 00 00       	jmp    c00091c4 <linear_get_name>
c0008c8a:	83 c4 08             	add    esp,0x8
c0008c8d:	5b                   	pop    ebx
c0008c8e:	c3                   	ret    

c0008c8f <src_get_description>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 35 1f 00 00       	call   c000abd2 <sinc_get_description>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_description+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 3f 24 00 00       	call   c000b0ec <zoh_get_description>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_description+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 12 05 00 00       	jmp    c00091d3 <linear_get_description>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_version>:
c0008cc6:	b8 c0 fb 01 c0       	mov    eax,0xc001fbc0
c0008ccb:	c3                   	ret    

c0008ccc <src_is_valid_ratio>:
c0008ccc:	50                   	push   eax
c0008ccd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008cd1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008cd5:	e8 84 fa ff ff       	call   c000875e <is_bad_src_ratio>
c0008cda:	85 c0                	test   eax,eax
c0008cdc:	0f 94 c0             	sete   al
c0008cdf:	83 c4 0c             	add    esp,0xc
c0008ce2:	0f b6 c0             	movzx  eax,al
c0008ce5:	c3                   	ret    

c0008ce6 <src_error>:
c0008ce6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008cea:	31 c0                	xor    eax,eax
c0008cec:	85 d2                	test   edx,edx
c0008cee:	74 03                	je     c0008cf3 <src_error+0xd>
c0008cf0:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008cf3:	c3                   	ret    

c0008cf4 <src_strerror>:
c0008cf4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008cf8:	31 c0                	xor    eax,eax
c0008cfa:	83 fa 17             	cmp    edx,0x17
c0008cfd:	77 07                	ja     c0008d06 <src_strerror+0x12>
c0008cff:	8b 04 95 20 00 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdffe0]
c0008d06:	c3                   	ret    

c0008d07 <src_simple>:
c0008d07:	56                   	push   esi
c0008d08:	53                   	push   ebx
c0008d09:	83 ec 18             	sub    esp,0x18
c0008d0c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d10:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d14:	50                   	push   eax
c0008d15:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d19:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d1d:	e8 46 fe ff ff       	call   c0008b68 <src_new>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	85 c0                	test   eax,eax
c0008d27:	75 06                	jne    c0008d2f <src_simple+0x28>
c0008d29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d2d:	eb 25                	jmp    c0008d54 <src_simple+0x4d>
c0008d2f:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d36:	89 c3                	mov    ebx,eax
c0008d38:	50                   	push   eax
c0008d39:	50                   	push   eax
c0008d3a:	56                   	push   esi
c0008d3b:	53                   	push   ebx
c0008d3c:	e8 e1 fa ff ff       	call   c0008822 <src_process>
c0008d41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d48:	e8 99 fa ff ff       	call   c00087e6 <src_delete>
c0008d4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	83 c4 14             	add    esp,0x14
c0008d57:	5b                   	pop    ebx
c0008d58:	5e                   	pop    esi
c0008d59:	c3                   	ret    

c0008d5a <src_short_to_float_array>:
c0008d5a:	83 ec 0c             	sub    esp,0xc
c0008d5d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008d61:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008d65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008d69:	85 c0                	test   eax,eax
c0008d6b:	74 0f                	je     c0008d7c <src_short_to_float_array+0x22>
c0008d6d:	48                   	dec    eax
c0008d6e:	d9 05 a4 00 02 c0    	fld    DWORD PTR ds:0xc00200a4
c0008d74:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008d77:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008d7a:	eb ed                	jmp    c0008d69 <src_short_to_float_array+0xf>
c0008d7c:	83 c4 0c             	add    esp,0xc
c0008d7f:	c3                   	ret    

c0008d80 <src_float_to_short_array>:
c0008d80:	56                   	push   esi
c0008d81:	53                   	push   ebx
c0008d82:	52                   	push   edx
c0008d83:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008d87:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008d8b:	85 db                	test   ebx,ebx
c0008d8d:	74 51                	je     c0008de0 <src_float_to_short_array+0x60>
c0008d8f:	4b                   	dec    ebx
c0008d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d94:	d9 05 a8 00 02 c0    	fld    DWORD PTR ds:0xc00200a8
c0008d9a:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008d9d:	dc 15 98 00 02 c0    	fcom   QWORD PTR ds:0xc0020098
c0008da3:	df e0                	fnstsw ax
c0008da5:	9e                   	sahf   
c0008da6:	72 0a                	jb     c0008db2 <src_float_to_short_array+0x32>
c0008da8:	dd d8                	fstp   st(0)
c0008daa:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008db0:	eb d9                	jmp    c0008d8b <src_float_to_short_array+0xb>
c0008db2:	d9 05 ac 00 02 c0    	fld    DWORD PTR ds:0xc00200ac
c0008db8:	d8 d9                	fcomp  st(1)
c0008dba:	df e0                	fnstsw ax
c0008dbc:	9e                   	sahf   
c0008dbd:	72 0a                	jb     c0008dc9 <src_float_to_short_array+0x49>
c0008dbf:	dd d8                	fstp   st(0)
c0008dc1:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008dc7:	eb c2                	jmp    c0008d8b <src_float_to_short_array+0xb>
c0008dc9:	83 ec 10             	sub    esp,0x10
c0008dcc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dcf:	e8 2c 5b 01 00       	call   c001e900 <lrint>
c0008dd4:	83 c4 10             	add    esp,0x10
c0008dd7:	c1 f8 10             	sar    eax,0x10
c0008dda:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008dde:	eb ab                	jmp    c0008d8b <src_float_to_short_array+0xb>
c0008de0:	58                   	pop    eax
c0008de1:	5b                   	pop    ebx
c0008de2:	5e                   	pop    esi
c0008de3:	c3                   	ret    

c0008de4 <src_int_to_float_array>:
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008deb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008def:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008df3:	85 c0                	test   eax,eax
c0008df5:	74 0f                	je     c0008e06 <src_int_to_float_array+0x22>
c0008df7:	48                   	dec    eax
c0008df8:	d9 05 b0 00 02 c0    	fld    DWORD PTR ds:0xc00200b0
c0008dfe:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008e01:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008e04:	eb ed                	jmp    c0008df3 <src_int_to_float_array+0xf>
c0008e06:	83 c4 0c             	add    esp,0xc
c0008e09:	c3                   	ret    

c0008e0a <src_float_to_int_array>:
c0008e0a:	56                   	push   esi
c0008e0b:	53                   	push   ebx
c0008e0c:	52                   	push   edx
c0008e0d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008e11:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008e15:	85 db                	test   ebx,ebx
c0008e17:	74 4f                	je     c0008e68 <src_float_to_int_array+0x5e>
c0008e19:	4b                   	dec    ebx
c0008e1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e1e:	d9 05 a8 00 02 c0    	fld    DWORD PTR ds:0xc00200a8
c0008e24:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008e27:	dc 15 98 00 02 c0    	fcom   QWORD PTR ds:0xc0020098
c0008e2d:	df e0                	fnstsw ax
c0008e2f:	9e                   	sahf   
c0008e30:	72 0b                	jb     c0008e3d <src_float_to_int_array+0x33>
c0008e32:	dd d8                	fstp   st(0)
c0008e34:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008e3b:	eb d8                	jmp    c0008e15 <src_float_to_int_array+0xb>
c0008e3d:	d9 05 ac 00 02 c0    	fld    DWORD PTR ds:0xc00200ac
c0008e43:	d8 d9                	fcomp  st(1)
c0008e45:	df e0                	fnstsw ax
c0008e47:	9e                   	sahf   
c0008e48:	72 0b                	jb     c0008e55 <src_float_to_int_array+0x4b>
c0008e4a:	dd d8                	fstp   st(0)
c0008e4c:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008e53:	eb c0                	jmp    c0008e15 <src_float_to_int_array+0xb>
c0008e55:	83 ec 10             	sub    esp,0x10
c0008e58:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e5b:	e8 a0 5a 01 00       	call   c001e900 <lrint>
c0008e60:	83 c4 10             	add    esp,0x10
c0008e63:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008e66:	eb ad                	jmp    c0008e15 <src_float_to_int_array+0xb>
c0008e68:	58                   	pop    eax
c0008e69:	5b                   	pop    ebx
c0008e6a:	5e                   	pop    esi
c0008e6b:	c3                   	ret    

c0008e6c <is_bad_src_ratio>:
c0008e6c:	83 ec 0c             	sub    esp,0xc
c0008e6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e73:	89 04 24             	mov    DWORD PTR [esp],eax
c0008e76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008e7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e7e:	dd 04 24             	fld    QWORD PTR [esp]
c0008e81:	dd 05 80 00 02 c0    	fld    QWORD PTR ds:0xc0020080
c0008e87:	de d9                	fcompp 
c0008e89:	df e0                	fnstsw ax
c0008e8b:	f6 c4 45             	test   ah,0x45
c0008e8e:	74 10                	je     c0008ea0 <is_bad_src_ratio+0x34>
c0008e90:	dd 04 24             	fld    QWORD PTR [esp]
c0008e93:	dc 1d 88 00 02 c0    	fcomp  QWORD PTR ds:0xc0020088
c0008e99:	df e0                	fnstsw ax
c0008e9b:	f6 c4 45             	test   ah,0x45
c0008e9e:	75 07                	jne    c0008ea7 <is_bad_src_ratio+0x3b>
c0008ea0:	b8 01 00 00 00       	mov    eax,0x1
c0008ea5:	eb 05                	jmp    c0008eac <is_bad_src_ratio+0x40>
c0008ea7:	b8 00 00 00 00       	mov    eax,0x0
c0008eac:	83 c4 0c             	add    esp,0xc
c0008eaf:	c3                   	ret    

c0008eb0 <fmod_one>:
c0008eb0:	83 ec 2c             	sub    esp,0x2c
c0008eb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008eb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ebb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008ebf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ec3:	83 ec 08             	sub    esp,0x8
c0008ec6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ece:	e8 2d 5a 01 00       	call   c001e900 <lrint>
c0008ed3:	83 c4 10             	add    esp,0x10
c0008ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008eda:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008ede:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008ee2:	de e1                	fsubrp st(1),st
c0008ee4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008ee8:	d9 ee                	fldz   
c0008eea:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008eee:	df e0                	fnstsw ax
c0008ef0:	f6 c4 45             	test   ah,0x45
c0008ef3:	75 0a                	jne    c0008eff <fmod_one+0x4f>
c0008ef5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008ef9:	d9 e8                	fld1   
c0008efb:	de c1                	faddp  st(1),st
c0008efd:	eb 04                	jmp    c0008f03 <fmod_one+0x53>
c0008eff:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008f03:	83 c4 2c             	add    esp,0x2c
c0008f06:	c3                   	ret    

c0008f07 <linear_vari_process>:
c0008f07:	55                   	push   ebp
c0008f08:	57                   	push   edi
c0008f09:	56                   	push   esi
c0008f0a:	53                   	push   ebx
c0008f0b:	83 ec 2c             	sub    esp,0x2c
c0008f0e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008f12:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008f16:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008f1e:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008f22:	0f 8e 5e 02 00 00    	jle    c0009186 <linear_vari_process+0x27f>
c0008f28:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008f2b:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008f33:	85 db                	test   ebx,ebx
c0008f35:	0f 84 4b 02 00 00    	je     c0009186 <linear_vari_process+0x27f>
c0008f3b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008f3e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008f42:	74 19                	je     c0008f5d <linear_vari_process+0x56>
c0008f44:	31 d2                	xor    edx,edx
c0008f46:	39 c2                	cmp    edx,eax
c0008f48:	7d 0c                	jge    c0008f56 <linear_vari_process+0x4f>
c0008f4a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008f4c:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008f4f:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008f53:	42                   	inc    edx
c0008f54:	eb f0                	jmp    c0008f46 <linear_vari_process+0x3f>
c0008f56:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008f5d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008f60:	0f af d0             	imul   edx,eax
c0008f63:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008f66:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008f6a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008f71:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008f74:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008f7b:	dd 07                	fld    QWORD PTR [edi]
c0008f7d:	dd 14 24             	fst    QWORD PTR [esp]
c0008f80:	50                   	push   eax
c0008f81:	50                   	push   eax
c0008f82:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008f85:	e8 e2 fe ff ff       	call   c0008e6c <is_bad_src_ratio>
c0008f8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008f8e:	5a                   	pop    edx
c0008f8f:	59                   	pop    ecx
c0008f90:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008f95:	0f 85 e3 01 00 00    	jne    c000917e <linear_vari_process+0x277>
c0008f9b:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008f9e:	d9 e8                	fld1   
c0008fa0:	d8 d1                	fcom   st(1)
c0008fa2:	df e0                	fnstsw ax
c0008fa4:	9e                   	sahf   
c0008fa5:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008fa9:	0f 86 99 00 00 00    	jbe    c0009048 <linear_vari_process+0x141>
c0008faf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008fb2:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008fb5:	0f 8d 8d 00 00 00    	jge    c0009048 <linear_vari_process+0x141>
c0008fbb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008fbf:	d8 c1                	fadd   st,st(1)
c0008fc1:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008fc4:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008fc7:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008fca:	df e0                	fnstsw ax
c0008fcc:	9e                   	sahf   
c0008fcd:	73 79                	jae    c0009048 <linear_vari_process+0x141>
c0008fcf:	85 d2                	test   edx,edx
c0008fd1:	7e 38                	jle    c000900b <linear_vari_process+0x104>
c0008fd3:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008fd7:	83 ec 10             	sub    esp,0x10
c0008fda:	dd 07                	fld    QWORD PTR [edi]
c0008fdc:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008fdf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008fe2:	e8 f9 58 01 00       	call   c001e8e0 <fabs>
c0008fe7:	83 c4 10             	add    esp,0x10
c0008fea:	dc 1d f8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200f8
c0008ff0:	df e0                	fnstsw ax
c0008ff2:	9e                   	sahf   
c0008ff3:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008ff7:	76 12                	jbe    c000900b <linear_vari_process+0x104>
c0008ff9:	dd 07                	fld    QWORD PTR [edi]
c0008ffb:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008ffe:	d8 e1                	fsub   st,st(1)
c0009000:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0009003:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0009006:	de c1                	faddp  st(1),st
c0009008:	dd 1c 24             	fstp   QWORD PTR [esp]
c000900b:	31 c0                	xor    eax,eax
c000900d:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0009010:	7e 1f                	jle    c0009031 <linear_vari_process+0x12a>
c0009012:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0009016:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0009018:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000901b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000901f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0009022:	d8 e1                	fsub   st,st(1)
c0009024:	40                   	inc    eax
c0009025:	d8 ca                	fmul   st,st(2)
c0009027:	de c1                	faddp  st(1),st
c0009029:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000902c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000902f:	eb dc                	jmp    c000900d <linear_vari_process+0x106>
c0009031:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009035:	dc 34 24             	fdiv   QWORD PTR [esp]
c0009038:	de c1                	faddp  st(1),st
c000903a:	e9 5f ff ff ff       	jmp    c0008f9e <linear_vari_process+0x97>
c000903f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009043:	dc 34 24             	fdiv   QWORD PTR [esp]
c0009046:	de c1                	faddp  st(1),st
c0009048:	83 ec 10             	sub    esp,0x10
c000904b:	dd 14 24             	fst    QWORD PTR [esp]
c000904e:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009052:	e8 59 fe ff ff       	call   c0008eb0 <fmod_one>
c0009057:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000905a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000905e:	d8 e1                	fsub   st,st(1)
c0009060:	d9 c9                	fxch   st(1)
c0009062:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009066:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009069:	e8 92 58 01 00       	call   c001e900 <lrint>
c000906e:	83 c4 10             	add    esp,0x10
c0009071:	0f af e8             	imul   ebp,eax
c0009074:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009078:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000907b:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000907e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0009081:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0009084:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0009087:	0f 8d 97 00 00 00    	jge    c0009124 <linear_vari_process+0x21d>
c000908d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009091:	d9 c0                	fld    st(0)
c0009093:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0009096:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000909a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000909e:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c00090a2:	de d9                	fcompp 
c00090a4:	df e0                	fnstsw ax
c00090a6:	9e                   	sahf   
c00090a7:	76 7b                	jbe    c0009124 <linear_vari_process+0x21d>
c00090a9:	85 ed                	test   ebp,ebp
c00090ab:	7e 38                	jle    c00090e5 <linear_vari_process+0x1de>
c00090ad:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00090b1:	83 ec 10             	sub    esp,0x10
c00090b4:	dd 07                	fld    QWORD PTR [edi]
c00090b6:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c00090b9:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090bc:	e8 1f 58 01 00       	call   c001e8e0 <fabs>
c00090c1:	83 c4 10             	add    esp,0x10
c00090c4:	dc 1d f8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200f8
c00090ca:	df e0                	fnstsw ax
c00090cc:	9e                   	sahf   
c00090cd:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00090d1:	76 12                	jbe    c00090e5 <linear_vari_process+0x1de>
c00090d3:	dd 07                	fld    QWORD PTR [edi]
c00090d5:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c00090d8:	d8 e1                	fsub   st,st(1)
c00090da:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c00090dd:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c00090e0:	de c1                	faddp  st(1),st
c00090e2:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090e5:	31 c0                	xor    eax,eax
c00090e7:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00090ea:	39 c2                	cmp    edx,eax
c00090ec:	0f 8e 4d ff ff ff    	jle    c000903f <linear_vari_process+0x138>
c00090f2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00090f4:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00090f7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00090fb:	89 e9                	mov    ecx,ebp
c00090fd:	01 c5                	add    ebp,eax
c00090ff:	29 d1                	sub    ecx,edx
c0009101:	89 ca                	mov    edx,ecx
c0009103:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009107:	01 c2                	add    edx,eax
c0009109:	40                   	inc    eax
c000910a:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000910d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0009110:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0009113:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009116:	d8 e1                	fsub   st,st(1)
c0009118:	d8 ca                	fmul   st,st(2)
c000911a:	de c1                	faddp  st(1),st
c000911c:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c000911f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009122:	eb c3                	jmp    c00090e7 <linear_vari_process+0x1e0>
c0009124:	39 d1                	cmp    ecx,edx
c0009126:	7d 13                	jge    c000913b <linear_vari_process+0x234>
c0009128:	89 d0                	mov    eax,edx
c000912a:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000912d:	29 c8                	sub    eax,ecx
c000912f:	99                   	cdq    
c0009130:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009133:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009137:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c000913b:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000913e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009141:	85 c0                	test   eax,eax
c0009143:	7f 1b                	jg     c0009160 <linear_vari_process+0x259>
c0009145:	dd 04 24             	fld    QWORD PTR [esp]
c0009148:	dd 1f                	fstp   QWORD PTR [edi]
c000914a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000914d:	99                   	cdq    
c000914e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009151:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009154:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009157:	99                   	cdq    
c0009158:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000915b:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000915e:	eb 26                	jmp    c0009186 <linear_vari_process+0x27f>
c0009160:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0009163:	31 d2                	xor    edx,edx
c0009165:	29 c8                	sub    eax,ecx
c0009167:	c1 e0 02             	shl    eax,0x2
c000916a:	39 d1                	cmp    ecx,edx
c000916c:	7e d7                	jle    c0009145 <linear_vari_process+0x23e>
c000916e:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0009170:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0009174:	83 c0 04             	add    eax,0x4
c0009177:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000917b:	42                   	inc    edx
c000917c:	eb ec                	jmp    c000916a <linear_vari_process+0x263>
c000917e:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0009186:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000918a:	83 c4 2c             	add    esp,0x2c
c000918d:	5b                   	pop    ebx
c000918e:	5e                   	pop    esi
c000918f:	5f                   	pop    edi
c0009190:	5d                   	pop    ebp
c0009191:	c3                   	ret    

c0009192 <linear_reset>:
c0009192:	83 ec 0c             	sub    esp,0xc
c0009195:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009199:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000919c:	85 c0                	test   eax,eax
c000919e:	74 20                	je     c00091c0 <linear_reset+0x2e>
c00091a0:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00091a3:	83 c0 1c             	add    eax,0x1c
c00091a6:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00091a9:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00091b0:	c1 e2 02             	shl    edx,0x2
c00091b3:	51                   	push   ecx
c00091b4:	52                   	push   edx
c00091b5:	6a 00                	push   0x0
c00091b7:	50                   	push   eax
c00091b8:	e8 1b 75 ff ff       	call   c00006d8 <memset>
c00091bd:	83 c4 10             	add    esp,0x10
c00091c0:	83 c4 0c             	add    esp,0xc
c00091c3:	c3                   	ret    

c00091c4 <linear_get_name>:
c00091c4:	31 c0                	xor    eax,eax
c00091c6:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00091cb:	75 05                	jne    c00091d2 <linear_get_name+0xe>
c00091cd:	b8 b4 00 02 c0       	mov    eax,0xc00200b4
c00091d2:	c3                   	ret    

c00091d3 <linear_get_description>:
c00091d3:	31 c0                	xor    eax,eax
c00091d5:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00091da:	75 05                	jne    c00091e1 <linear_get_description+0xe>
c00091dc:	b8 c8 00 02 c0       	mov    eax,0xc00200c8
c00091e1:	c3                   	ret    

c00091e2 <linear_set_converter>:
c00091e2:	53                   	push   ebx
c00091e3:	b8 0a 00 00 00       	mov    eax,0xa
c00091e8:	83 ec 08             	sub    esp,0x8
c00091eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00091ef:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c00091f4:	75 6e                	jne    c0009264 <linear_set_converter+0x82>
c00091f6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00091f9:	85 c0                	test   eax,eax
c00091fb:	74 13                	je     c0009210 <linear_set_converter+0x2e>
c00091fd:	83 ec 0c             	sub    esp,0xc
c0009200:	50                   	push   eax
c0009201:	e8 99 42 00 00       	call   c000d49f <free>
c0009206:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000920d:	83 c4 10             	add    esp,0x10
c0009210:	50                   	push   eax
c0009211:	50                   	push   eax
c0009212:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009215:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000921c:	50                   	push   eax
c000921d:	6a 01                	push   0x1
c000921f:	e8 9b 42 00 00       	call   c000d4bf <calloc>
c0009224:	83 c4 10             	add    esp,0x10
c0009227:	89 c2                	mov    edx,eax
c0009229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000922c:	85 d2                	test   edx,edx
c000922e:	b8 01 00 00 00       	mov    eax,0x1
c0009233:	74 2f                	je     c0009264 <linear_set_converter+0x82>
c0009235:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000923b:	83 ec 0c             	sub    esp,0xc
c000923e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009241:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009244:	c7 43 24 07 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008f07
c000924b:	c7 43 20 07 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008f07
c0009252:	c7 43 28 92 91 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009192
c0009259:	53                   	push   ebx
c000925a:	e8 33 ff ff ff       	call   c0009192 <linear_reset>
c000925f:	83 c4 10             	add    esp,0x10
c0009262:	31 c0                	xor    eax,eax
c0009264:	83 c4 08             	add    esp,0x8
c0009267:	5b                   	pop    ebx
c0009268:	c3                   	ret    

c0009269 <is_bad_src_ratio>:
c0009269:	83 ec 0c             	sub    esp,0xc
c000926c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009270:	89 04 24             	mov    DWORD PTR [esp],eax
c0009273:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009277:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000927b:	dd 04 24             	fld    QWORD PTR [esp]
c000927e:	dd 05 80 00 02 c0    	fld    QWORD PTR ds:0xc0020080
c0009284:	de d9                	fcompp 
c0009286:	df e0                	fnstsw ax
c0009288:	f6 c4 45             	test   ah,0x45
c000928b:	74 10                	je     c000929d <is_bad_src_ratio+0x34>
c000928d:	dd 04 24             	fld    QWORD PTR [esp]
c0009290:	dc 1d 88 00 02 c0    	fcomp  QWORD PTR ds:0xc0020088
c0009296:	df e0                	fnstsw ax
c0009298:	f6 c4 45             	test   ah,0x45
c000929b:	75 07                	jne    c00092a4 <is_bad_src_ratio+0x3b>
c000929d:	b8 01 00 00 00       	mov    eax,0x1
c00092a2:	eb 05                	jmp    c00092a9 <is_bad_src_ratio+0x40>
c00092a4:	b8 00 00 00 00       	mov    eax,0x0
c00092a9:	83 c4 0c             	add    esp,0xc
c00092ac:	c3                   	ret    

c00092ad <int_to_fp>:
c00092ad:	c1 e0 0c             	shl    eax,0xc
c00092b0:	c3                   	ret    

c00092b1 <fp_to_int>:
c00092b1:	c1 f8 0c             	sar    eax,0xc
c00092b4:	c3                   	ret    

c00092b5 <fp_fraction_part>:
c00092b5:	25 ff 0f 00 00       	and    eax,0xfff
c00092ba:	c3                   	ret    

c00092bb <fp_to_double>:
c00092bb:	83 ec 0c             	sub    esp,0xc
c00092be:	e8 f2 ff ff ff       	call   c00092b5 <fp_fraction_part>
c00092c3:	d9 05 c0 87 03 c0    	fld    DWORD PTR ds:0xc00387c0
c00092c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00092cd:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c00092d1:	83 c4 0c             	add    esp,0xc
c00092d4:	c3                   	ret    

c00092d5 <calc_output_single>:
c00092d5:	55                   	push   ebp
c00092d6:	57                   	push   edi
c00092d7:	89 c7                	mov    edi,eax
c00092d9:	56                   	push   esi
c00092da:	53                   	push   ebx
c00092db:	89 d3                	mov    ebx,edx
c00092dd:	83 ec 24             	sub    esp,0x24
c00092e0:	89 de                	mov    esi,ebx
c00092e2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00092e5:	e8 c3 ff ff ff       	call   c00092ad <int_to_fp>
c00092ea:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00092ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00092f8:	29 c8                	sub    eax,ecx
c00092fa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0009302:	99                   	cdq    
c0009303:	f7 fb                	idiv   ebx
c0009305:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009308:	0f af f0             	imul   esi,eax
c000930b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000930f:	01 ce                	add    esi,ecx
c0009311:	29 c2                	sub    edx,eax
c0009313:	8d 14 97             	lea    edx,[edi+edx*4]
c0009316:	89 f0                	mov    eax,esi
c0009318:	e8 9e ff ff ff       	call   c00092bb <fp_to_double>
c000931d:	89 f0                	mov    eax,esi
c000931f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009323:	e8 89 ff ff ff       	call   c00092b1 <fp_to_int>
c0009328:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000932c:	83 c2 04             	add    edx,0x4
c000932f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009333:	d8 e1                	fsub   st,st(1)
c0009335:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009339:	de c9                	fmulp  st(1),st
c000933b:	de c1                	faddp  st(1),st
c000933d:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009343:	29 de                	sub    esi,ebx
c0009345:	dc 04 24             	fadd   QWORD PTR [esp]
c0009348:	dd 1c 24             	fstp   QWORD PTR [esp]
c000934b:	79 c9                	jns    c0009316 <calc_output_single+0x41>
c000934d:	89 d8                	mov    eax,ebx
c000934f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009353:	29 c8                	sub    eax,ecx
c0009355:	d9 ee                	fldz   
c0009357:	89 c1                	mov    ecx,eax
c0009359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000935d:	29 c8                	sub    eax,ecx
c000935f:	99                   	cdq    
c0009360:	f7 fb                	idiv   ebx
c0009362:	89 da                	mov    edx,ebx
c0009364:	0f af d0             	imul   edx,eax
c0009367:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000936b:	01 d1                	add    ecx,edx
c000936d:	8d 14 87             	lea    edx,[edi+eax*4]
c0009370:	89 c8                	mov    eax,ecx
c0009372:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009376:	e8 40 ff ff ff       	call   c00092bb <fp_to_double>
c000937b:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000937f:	89 c8                	mov    eax,ecx
c0009381:	e8 2b ff ff ff       	call   c00092b1 <fp_to_int>
c0009386:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000938a:	29 d9                	sub    ecx,ebx
c000938c:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009390:	83 ea 04             	sub    edx,0x4
c0009393:	d8 e1                	fsub   st,st(1)
c0009395:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009399:	de c9                	fmulp  st(1),st
c000939b:	de c1                	faddp  st(1),st
c000939d:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c00093a3:	85 c9                	test   ecx,ecx
c00093a5:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00093a9:	de c1                	faddp  st(1),st
c00093ab:	7f c3                	jg     c0009370 <calc_output_single+0x9b>
c00093ad:	dd 04 24             	fld    QWORD PTR [esp]
c00093b0:	83 c4 24             	add    esp,0x24
c00093b3:	de c1                	faddp  st(1),st
c00093b5:	5b                   	pop    ebx
c00093b6:	5e                   	pop    esi
c00093b7:	5f                   	pop    edi
c00093b8:	5d                   	pop    ebp
c00093b9:	c3                   	ret    

c00093ba <calc_output_stereo>:
c00093ba:	55                   	push   ebp
c00093bb:	57                   	push   edi
c00093bc:	89 c7                	mov    edi,eax
c00093be:	56                   	push   esi
c00093bf:	53                   	push   ebx
c00093c0:	89 d3                	mov    ebx,edx
c00093c2:	83 ec 44             	sub    esp,0x44
c00093c5:	89 de                	mov    esi,ebx
c00093c7:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00093cb:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00093ce:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00093d2:	e8 d6 fe ff ff       	call   c00092ad <int_to_fp>
c00093d7:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093de:	d9 ee                	fldz   
c00093e0:	29 c8                	sub    eax,ecx
c00093e2:	dd 14 24             	fst    QWORD PTR [esp]
c00093e5:	99                   	cdq    
c00093e6:	f7 fb                	idiv   ebx
c00093e8:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00093eb:	0f af f0             	imul   esi,eax
c00093ee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00093f2:	01 ce                	add    esi,ecx
c00093f4:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00093f7:	0f af c2             	imul   eax,edx
c00093fa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00093fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009402:	29 c2                	sub    edx,eax
c0009404:	8d 14 97             	lea    edx,[edi+edx*4]
c0009407:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000940b:	89 f0                	mov    eax,esi
c000940d:	e8 a9 fe ff ff       	call   c00092bb <fp_to_double>
c0009412:	89 f0                	mov    eax,esi
c0009414:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009418:	e8 94 fe ff ff       	call   c00092b1 <fp_to_int>
c000941d:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009421:	83 c2 08             	add    edx,0x8
c0009424:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009428:	d8 e1                	fsub   st,st(1)
c000942a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000942e:	de c9                	fmulp  st(1),st
c0009430:	de c1                	faddp  st(1),st
c0009432:	d9 c0                	fld    st(0)
c0009434:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000943a:	dc 04 24             	fadd   QWORD PTR [esp]
c000943d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009440:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009446:	29 de                	sub    esi,ebx
c0009448:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000944c:	de c1                	faddp  st(1),st
c000944e:	79 b7                	jns    c0009407 <calc_output_stereo+0x4d>
c0009450:	89 d8                	mov    eax,ebx
c0009452:	d9 ee                	fldz   
c0009454:	d9 ee                	fldz   
c0009456:	29 c8                	sub    eax,ecx
c0009458:	89 c1                	mov    ecx,eax
c000945a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000945e:	29 c8                	sub    eax,ecx
c0009460:	99                   	cdq    
c0009461:	f7 fb                	idiv   ebx
c0009463:	89 da                	mov    edx,ebx
c0009465:	0f af d0             	imul   edx,eax
c0009468:	40                   	inc    eax
c0009469:	01 d1                	add    ecx,edx
c000946b:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009470:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009474:	8d 14 87             	lea    edx,[edi+eax*4]
c0009477:	eb 04                	jmp    c000947d <calc_output_stereo+0xc3>
c0009479:	d9 ca                	fxch   st(2)
c000947b:	d9 c9                	fxch   st(1)
c000947d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009481:	d9 c9                	fxch   st(1)
c0009483:	89 c8                	mov    eax,ecx
c0009485:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009489:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000948d:	e8 29 fe ff ff       	call   c00092bb <fp_to_double>
c0009492:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009496:	89 c8                	mov    eax,ecx
c0009498:	e8 14 fe ff ff       	call   c00092b1 <fp_to_int>
c000949d:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00094a1:	29 d9                	sub    ecx,ebx
c00094a3:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00094a7:	83 ea 08             	sub    edx,0x8
c00094aa:	d8 e1                	fsub   st,st(1)
c00094ac:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00094b0:	de c9                	fmulp  st(1),st
c00094b2:	de c1                	faddp  st(1),st
c00094b4:	d9 c0                	fld    st(0)
c00094b6:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c00094bc:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00094c0:	de c1                	faddp  st(1),st
c00094c2:	d9 c9                	fxch   st(1)
c00094c4:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c00094ca:	85 c9                	test   ecx,ecx
c00094cc:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00094d0:	de c1                	faddp  st(1),st
c00094d2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00094d6:	7f a1                	jg     c0009479 <calc_output_stereo+0xbf>
c00094d8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00094dc:	dd 04 24             	fld    QWORD PTR [esp]
c00094df:	de c3                	faddp  st(3),st
c00094e1:	d9 ca                	fxch   st(2)
c00094e3:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00094e7:	d9 18                	fstp   DWORD PTR [eax]
c00094e9:	de c1                	faddp  st(1),st
c00094eb:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00094ef:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00094f2:	83 c4 44             	add    esp,0x44
c00094f5:	5b                   	pop    ebx
c00094f6:	5e                   	pop    esi
c00094f7:	5f                   	pop    edi
c00094f8:	5d                   	pop    ebp
c00094f9:	c3                   	ret    

c00094fa <calc_output_quad>:
c00094fa:	55                   	push   ebp
c00094fb:	57                   	push   edi
c00094fc:	56                   	push   esi
c00094fd:	89 c6                	mov    esi,eax
c00094ff:	53                   	push   ebx
c0009500:	89 d3                	mov    ebx,edx
c0009502:	83 ec 5c             	sub    esp,0x5c
c0009505:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c0009509:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000950c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000950f:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0009513:	e8 95 fd ff ff       	call   c00092ad <int_to_fp>
c0009518:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c000951b:	d9 ee                	fldz   
c000951d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009521:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009525:	29 c8                	sub    eax,ecx
c0009527:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c000952b:	99                   	cdq    
c000952c:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009530:	f7 fb                	idiv   ebx
c0009532:	89 da                	mov    edx,ebx
c0009534:	0f af d0             	imul   edx,eax
c0009537:	01 ca                	add    edx,ecx
c0009539:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000953d:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c0009540:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009544:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0009547:	0f af c2             	imul   eax,edx
c000954a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000954e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009552:	29 c2                	sub    edx,eax
c0009554:	8d 14 96             	lea    edx,[esi+edx*4]
c0009557:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000955b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000955f:	e8 57 fd ff ff       	call   c00092bb <fp_to_double>
c0009564:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009568:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000956c:	e8 40 fd ff ff       	call   c00092b1 <fp_to_int>
c0009571:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009575:	83 c2 10             	add    edx,0x10
c0009578:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000957c:	d8 e1                	fsub   st,st(1)
c000957e:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009582:	de c9                	fmulp  st(1),st
c0009584:	de c1                	faddp  st(1),st
c0009586:	d9 c0                	fld    st(0)
c0009588:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c000958e:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009592:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009596:	d9 c0                	fld    st(0)
c0009598:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c000959e:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c00095a2:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00095a6:	d9 c0                	fld    st(0)
c00095a8:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00095ae:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00095b2:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00095b6:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00095bc:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c00095c0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00095c4:	de c1                	faddp  st(1),st
c00095c6:	79 8f                	jns    c0009557 <calc_output_quad+0x5d>
c00095c8:	89 d8                	mov    eax,ebx
c00095ca:	d9 ee                	fldz   
c00095cc:	29 c8                	sub    eax,ecx
c00095ce:	d9 ee                	fldz   
c00095d0:	89 c1                	mov    ecx,eax
c00095d2:	d9 ee                	fldz   
c00095d4:	d9 ee                	fldz   
c00095d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00095da:	29 c8                	sub    eax,ecx
c00095dc:	99                   	cdq    
c00095dd:	f7 fb                	idiv   ebx
c00095df:	89 da                	mov    edx,ebx
c00095e1:	0f af d0             	imul   edx,eax
c00095e4:	40                   	inc    eax
c00095e5:	01 d1                	add    ecx,edx
c00095e7:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00095ec:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00095f0:	8d 14 86             	lea    edx,[esi+eax*4]
c00095f3:	eb 0a                	jmp    c00095ff <calc_output_quad+0x105>
c00095f5:	d9 cc                	fxch   st(4)
c00095f7:	d9 ca                	fxch   st(2)
c00095f9:	d9 c9                	fxch   st(1)
c00095fb:	d9 cb                	fxch   st(3)
c00095fd:	d9 c9                	fxch   st(1)
c00095ff:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009603:	d9 c9                	fxch   st(1)
c0009605:	89 c8                	mov    eax,ecx
c0009607:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000960b:	d9 c9                	fxch   st(1)
c000960d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009611:	d9 c9                	fxch   st(1)
c0009613:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009617:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000961b:	e8 9b fc ff ff       	call   c00092bb <fp_to_double>
c0009620:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009624:	89 c8                	mov    eax,ecx
c0009626:	e8 86 fc ff ff       	call   c00092b1 <fp_to_int>
c000962b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000962f:	29 d9                	sub    ecx,ebx
c0009631:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009635:	83 ea 10             	sub    edx,0x10
c0009638:	d8 e1                	fsub   st,st(1)
c000963a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000963e:	de c9                	fmulp  st(1),st
c0009640:	de c1                	faddp  st(1),st
c0009642:	d9 c0                	fld    st(0)
c0009644:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c000964a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000964e:	de c1                	faddp  st(1),st
c0009650:	d9 c1                	fld    st(1)
c0009652:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c0009658:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000965c:	de c1                	faddp  st(1),st
c000965e:	d9 c2                	fld    st(2)
c0009660:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009666:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000966a:	de c1                	faddp  st(1),st
c000966c:	d9 cb                	fxch   st(3)
c000966e:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009674:	85 c9                	test   ecx,ecx
c0009676:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000967a:	de c1                	faddp  st(1),st
c000967c:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009680:	0f 8f 6f ff ff ff    	jg     c00095f5 <calc_output_quad+0xfb>
c0009686:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000968a:	de c4                	faddp  st(4),st
c000968c:	d9 cb                	fxch   st(3)
c000968e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009691:	d9 1f                	fstp   DWORD PTR [edi]
c0009693:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009697:	de c2                	faddp  st(2),st
c0009699:	d9 c9                	fxch   st(1)
c000969b:	dc 0c 24             	fmul   QWORD PTR [esp]
c000969e:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c00096a1:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00096a5:	de c3                	faddp  st(3),st
c00096a7:	d9 ca                	fxch   st(2)
c00096a9:	dc 0c 24             	fmul   QWORD PTR [esp]
c00096ac:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c00096af:	de c1                	faddp  st(1),st
c00096b1:	dc 0c 24             	fmul   QWORD PTR [esp]
c00096b4:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c00096b7:	83 c4 5c             	add    esp,0x5c
c00096ba:	5b                   	pop    ebx
c00096bb:	5e                   	pop    esi
c00096bc:	5f                   	pop    edi
c00096bd:	5d                   	pop    ebp
c00096be:	c3                   	ret    

c00096bf <calc_output_hex>:
c00096bf:	55                   	push   ebp
c00096c0:	57                   	push   edi
c00096c1:	89 c7                	mov    edi,eax
c00096c3:	56                   	push   esi
c00096c4:	53                   	push   ebx
c00096c5:	89 d3                	mov    ebx,edx
c00096c7:	83 ec 7c             	sub    esp,0x7c
c00096ca:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c00096d1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096d4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00096d7:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00096de:	e8 ca fb ff ff       	call   c00092ad <int_to_fp>
c00096e3:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00096e6:	d9 ee                	fldz   
c00096e8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00096ec:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00096f0:	29 c8                	sub    eax,ecx
c00096f2:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00096f6:	99                   	cdq    
c00096f7:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00096fb:	f7 fb                	idiv   ebx
c00096fd:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c0009701:	89 da                	mov    edx,ebx
c0009703:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009707:	0f af d0             	imul   edx,eax
c000970a:	01 ca                	add    edx,ecx
c000970c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009710:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009713:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009717:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000971a:	0f af c2             	imul   eax,edx
c000971d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009721:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009725:	29 c2                	sub    edx,eax
c0009727:	8d 14 97             	lea    edx,[edi+edx*4]
c000972a:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c000972e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009732:	e8 84 fb ff ff       	call   c00092bb <fp_to_double>
c0009737:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000973b:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c000973f:	e8 6d fb ff ff       	call   c00092b1 <fp_to_int>
c0009744:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009748:	83 c2 18             	add    edx,0x18
c000974b:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000974f:	d8 e1                	fsub   st,st(1)
c0009751:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009755:	de c9                	fmulp  st(1),st
c0009757:	de c1                	faddp  st(1),st
c0009759:	d9 c0                	fld    st(0)
c000975b:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009761:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009765:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009769:	d9 c0                	fld    st(0)
c000976b:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009771:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009775:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009779:	d9 c0                	fld    st(0)
c000977b:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009781:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009785:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009789:	d9 c0                	fld    st(0)
c000978b:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009791:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009795:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009799:	d9 c0                	fld    st(0)
c000979b:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00097a1:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00097a5:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00097a9:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00097af:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c00097b3:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00097b7:	de c1                	faddp  st(1),st
c00097b9:	0f 89 6b ff ff ff    	jns    c000972a <calc_output_hex+0x6b>
c00097bf:	d9 ee                	fldz   
c00097c1:	d9 ee                	fldz   
c00097c3:	89 d8                	mov    eax,ebx
c00097c5:	29 c8                	sub    eax,ecx
c00097c7:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00097cb:	89 c1                	mov    ecx,eax
c00097cd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00097d1:	29 c8                	sub    eax,ecx
c00097d3:	99                   	cdq    
c00097d4:	f7 fb                	idiv   ebx
c00097d6:	89 da                	mov    edx,ebx
c00097d8:	0f af d0             	imul   edx,eax
c00097db:	40                   	inc    eax
c00097dc:	01 d1                	add    ecx,edx
c00097de:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c00097e3:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00097e7:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c00097eb:	8d 14 87             	lea    edx,[edi+eax*4]
c00097ee:	d9 ee                	fldz   
c00097f0:	d9 ee                	fldz   
c00097f2:	d9 ca                	fxch   st(2)
c00097f4:	eb 08                	jmp    c00097fe <calc_output_hex+0x13f>
c00097f6:	d9 cc                	fxch   st(4)
c00097f8:	d9 cb                	fxch   st(3)
c00097fa:	d9 ca                	fxch   st(2)
c00097fc:	d9 c9                	fxch   st(1)
c00097fe:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c0009802:	89 c8                	mov    eax,ecx
c0009804:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c0009808:	d9 ca                	fxch   st(2)
c000980a:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c000980e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009812:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009816:	e8 a0 fa ff ff       	call   c00092bb <fp_to_double>
c000981b:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000981f:	89 c8                	mov    eax,ecx
c0009821:	e8 8b fa ff ff       	call   c00092b1 <fp_to_int>
c0009826:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000982a:	29 d9                	sub    ecx,ebx
c000982c:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009830:	83 ea 18             	sub    edx,0x18
c0009833:	d8 e1                	fsub   st,st(1)
c0009835:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009839:	de c9                	fmulp  st(1),st
c000983b:	de c1                	faddp  st(1),st
c000983d:	d9 c0                	fld    st(0)
c000983f:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009845:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0009849:	de c1                	faddp  st(1),st
c000984b:	d9 c1                	fld    st(1)
c000984d:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009853:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0009857:	de c1                	faddp  st(1),st
c0009859:	d9 c2                	fld    st(2)
c000985b:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009861:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009865:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009869:	d9 c2                	fld    st(2)
c000986b:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009871:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009875:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009879:	d9 c2                	fld    st(2)
c000987b:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009881:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009885:	de c1                	faddp  st(1),st
c0009887:	d9 cb                	fxch   st(3)
c0009889:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c000988f:	85 c9                	test   ecx,ecx
c0009891:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009895:	de c1                	faddp  st(1),st
c0009897:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000989b:	0f 8f 55 ff ff ff    	jg     c00097f6 <calc_output_hex+0x137>
c00098a1:	d9 cb                	fxch   st(3)
c00098a3:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00098a7:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098aa:	d9 1e                	fstp   DWORD PTR [esi]
c00098ac:	d9 c9                	fxch   st(1)
c00098ae:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c00098b2:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098b5:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c00098b8:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00098bc:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00098c0:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098c3:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c00098c6:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00098ca:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00098ce:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098d1:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00098d4:	d9 ca                	fxch   st(2)
c00098d6:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00098da:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098dd:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00098e0:	de c1                	faddp  st(1),st
c00098e2:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098e5:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00098e8:	83 c4 7c             	add    esp,0x7c
c00098eb:	5b                   	pop    ebx
c00098ec:	5e                   	pop    esi
c00098ed:	5f                   	pop    edi
c00098ee:	5d                   	pop    ebp
c00098ef:	c3                   	ret    

c00098f0 <calc_output_multi>:
c00098f0:	55                   	push   ebp
c00098f1:	57                   	push   edi
c00098f2:	8d 78 44             	lea    edi,[eax+0x44]
c00098f5:	56                   	push   esi
c00098f6:	89 c6                	mov    esi,eax
c00098f8:	53                   	push   ebx
c00098f9:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c00098ff:	83 ec 4c             	sub    esp,0x4c
c0009902:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0009906:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c000990a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000990e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009912:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009916:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000991a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000991d:	e8 8b f9 ff ff       	call   c00092ad <int_to_fp>
c0009922:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c0009925:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009929:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000992d:	99                   	cdq    
c000992e:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009932:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009936:	0f af d0             	imul   edx,eax
c0009939:	0f af c3             	imul   eax,ebx
c000993c:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009940:	29 c5                	sub    ebp,eax
c0009942:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009946:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000994a:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009951:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009955:	52                   	push   edx
c0009956:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000995a:	6a 00                	push   0x0
c000995c:	57                   	push   edi
c000995d:	e8 76 6d ff ff       	call   c00006d8 <memset>
c0009962:	83 c4 10             	add    esp,0x10
c0009965:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009969:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000996d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009971:	e8 45 f9 ff ff       	call   c00092bb <fp_to_double>
c0009976:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000997a:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000997e:	e8 2e f9 ff ff       	call   c00092b1 <fp_to_int>
c0009983:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009986:	89 d9                	mov    ecx,ebx
c0009988:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c000998b:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c000998f:	d8 e1                	fsub   st,st(1)
c0009991:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009995:	de c9                	fmulp  st(1),st
c0009997:	de c1                	faddp  st(1),st
c0009999:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000999d:	89 c8                	mov    eax,ecx
c000999f:	bd 08 00 00 00       	mov    ebp,0x8
c00099a4:	99                   	cdq    
c00099a5:	f7 fd                	idiv   ebp
c00099a7:	4a                   	dec    edx
c00099a8:	83 fa 06             	cmp    edx,0x6
c00099ab:	77 07                	ja     c00099b4 <calc_output_multi+0xc4>
c00099ad:	ff 24 95 00 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdff00]
c00099b4:	49                   	dec    ecx
c00099b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099b9:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00099bc:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099c3:	d9 c1                	fld    st(1)
c00099c5:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099c9:	dc 00                	fadd   QWORD PTR [eax]
c00099cb:	dd 18                	fstp   QWORD PTR [eax]
c00099cd:	49                   	dec    ecx
c00099ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099d2:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00099d5:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099dc:	d9 c1                	fld    st(1)
c00099de:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099e2:	dc 00                	fadd   QWORD PTR [eax]
c00099e4:	dd 18                	fstp   QWORD PTR [eax]
c00099e6:	49                   	dec    ecx
c00099e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099eb:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00099ee:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099f5:	d9 c1                	fld    st(1)
c00099f7:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099fb:	dc 00                	fadd   QWORD PTR [eax]
c00099fd:	dd 18                	fstp   QWORD PTR [eax]
c00099ff:	49                   	dec    ecx
c0009a00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a04:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a07:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a0e:	d9 c1                	fld    st(1)
c0009a10:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a14:	dc 00                	fadd   QWORD PTR [eax]
c0009a16:	dd 18                	fstp   QWORD PTR [eax]
c0009a18:	49                   	dec    ecx
c0009a19:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a1d:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a20:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a27:	d9 c1                	fld    st(1)
c0009a29:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a2d:	dc 00                	fadd   QWORD PTR [eax]
c0009a2f:	dd 18                	fstp   QWORD PTR [eax]
c0009a31:	49                   	dec    ecx
c0009a32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a36:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a39:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a40:	d9 c1                	fld    st(1)
c0009a42:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a46:	dc 00                	fadd   QWORD PTR [eax]
c0009a48:	dd 18                	fstp   QWORD PTR [eax]
c0009a4a:	49                   	dec    ecx
c0009a4b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a4f:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a52:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a59:	d9 c1                	fld    st(1)
c0009a5b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a5f:	dc 00                	fadd   QWORD PTR [eax]
c0009a61:	dd 18                	fstp   QWORD PTR [eax]
c0009a63:	49                   	dec    ecx
c0009a64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a68:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a6b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a72:	d9 c1                	fld    st(1)
c0009a74:	85 c9                	test   ecx,ecx
c0009a76:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a7a:	dc 00                	fadd   QWORD PTR [eax]
c0009a7c:	dd 18                	fstp   QWORD PTR [eax]
c0009a7e:	0f 8f 19 ff ff ff    	jg     c000999d <calc_output_multi+0xad>
c0009a84:	dd d9                	fstp   st(1)
c0009a86:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c0009a8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a8e:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c0009a92:	0f 89 d1 fe ff ff    	jns    c0009969 <calc_output_multi+0x79>
c0009a98:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a9c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009aa0:	89 d1                	mov    ecx,edx
c0009aa2:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009aa6:	29 c8                	sub    eax,ecx
c0009aa8:	99                   	cdq    
c0009aa9:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009aad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009ab1:	0f af d0             	imul   edx,eax
c0009ab4:	40                   	inc    eax
c0009ab5:	01 d1                	add    ecx,edx
c0009ab7:	0f af c3             	imul   eax,ebx
c0009aba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009abe:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009ac1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ac5:	50                   	push   eax
c0009ac6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009aca:	6a 00                	push   0x0
c0009acc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ad0:	e8 03 6c ff ff       	call   c00006d8 <memset>
c0009ad5:	83 c4 10             	add    esp,0x10
c0009ad8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009adc:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009ae0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009ae4:	e8 d2 f7 ff ff       	call   c00092bb <fp_to_double>
c0009ae9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009aed:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009af1:	e8 bb f7 ff ff       	call   c00092b1 <fp_to_int>
c0009af6:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009af9:	89 d9                	mov    ecx,ebx
c0009afb:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009afe:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009b02:	d8 e1                	fsub   st,st(1)
c0009b04:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b08:	de c9                	fmulp  st(1),st
c0009b0a:	de c1                	faddp  st(1),st
c0009b0c:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009b10:	89 c8                	mov    eax,ecx
c0009b12:	bd 08 00 00 00       	mov    ebp,0x8
c0009b17:	99                   	cdq    
c0009b18:	f7 fd                	idiv   ebp
c0009b1a:	4a                   	dec    edx
c0009b1b:	83 fa 06             	cmp    edx,0x6
c0009b1e:	77 07                	ja     c0009b27 <calc_output_multi+0x237>
c0009b20:	ff 24 95 1c 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfee4]
c0009b27:	49                   	dec    ecx
c0009b28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b2c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b30:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009b33:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b3a:	d9 c1                	fld    st(1)
c0009b3c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009b40:	dc 00                	fadd   QWORD PTR [eax]
c0009b42:	dd 18                	fstp   QWORD PTR [eax]
c0009b44:	49                   	dec    ecx
c0009b45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b4d:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009b50:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b57:	d9 c1                	fld    st(1)
c0009b59:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009b5d:	dc 00                	fadd   QWORD PTR [eax]
c0009b5f:	dd 18                	fstp   QWORD PTR [eax]
c0009b61:	49                   	dec    ecx
c0009b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b6a:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009b6d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b74:	d9 c1                	fld    st(1)
c0009b76:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009b7a:	dc 00                	fadd   QWORD PTR [eax]
c0009b7c:	dd 18                	fstp   QWORD PTR [eax]
c0009b7e:	49                   	dec    ecx
c0009b7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b87:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009b8a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b91:	d9 c1                	fld    st(1)
c0009b93:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009b97:	dc 00                	fadd   QWORD PTR [eax]
c0009b99:	dd 18                	fstp   QWORD PTR [eax]
c0009b9b:	49                   	dec    ecx
c0009b9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ba0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009ba4:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009ba7:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009bae:	d9 c1                	fld    st(1)
c0009bb0:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009bb4:	dc 00                	fadd   QWORD PTR [eax]
c0009bb6:	dd 18                	fstp   QWORD PTR [eax]
c0009bb8:	49                   	dec    ecx
c0009bb9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009bbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bc1:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009bc4:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009bcb:	d9 c1                	fld    st(1)
c0009bcd:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009bd1:	dc 00                	fadd   QWORD PTR [eax]
c0009bd3:	dd 18                	fstp   QWORD PTR [eax]
c0009bd5:	49                   	dec    ecx
c0009bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009bda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bde:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009be1:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009be8:	d9 c1                	fld    st(1)
c0009bea:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009bee:	dc 00                	fadd   QWORD PTR [eax]
c0009bf0:	dd 18                	fstp   QWORD PTR [eax]
c0009bf2:	49                   	dec    ecx
c0009bf3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009bf7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bfb:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009bfe:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009c05:	d9 c1                	fld    st(1)
c0009c07:	85 c9                	test   ecx,ecx
c0009c09:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009c0d:	dc 00                	fadd   QWORD PTR [eax]
c0009c0f:	dd 18                	fstp   QWORD PTR [eax]
c0009c11:	0f 8f f9 fe ff ff    	jg     c0009b10 <calc_output_multi+0x220>
c0009c17:	dd d9                	fstp   st(1)
c0009c19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009c1d:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009c21:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c0009c25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0009c2a:	0f 8f ac fe ff ff    	jg     c0009adc <calc_output_multi+0x1ec>
c0009c30:	b9 08 00 00 00       	mov    ecx,0x8
c0009c35:	89 d8                	mov    eax,ebx
c0009c37:	99                   	cdq    
c0009c38:	f7 f9                	idiv   ecx
c0009c3a:	4a                   	dec    edx
c0009c3b:	83 fa 06             	cmp    edx,0x6
c0009c3e:	77 07                	ja     c0009c47 <calc_output_multi+0x357>
c0009c40:	ff 24 95 38 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfec8]
c0009c47:	4b                   	dec    ebx
c0009c48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c4c:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c4f:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c52:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009c56:	d8 c9                	fmul   st,st(1)
c0009c58:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009c5b:	4b                   	dec    ebx
c0009c5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c60:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c63:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c66:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009c6a:	d8 c9                	fmul   st,st(1)
c0009c6c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009c6f:	4b                   	dec    ebx
c0009c70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c74:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c77:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c7a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009c7e:	d8 c9                	fmul   st,st(1)
c0009c80:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009c83:	4b                   	dec    ebx
c0009c84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c88:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c8b:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c8e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009c92:	d8 c9                	fmul   st,st(1)
c0009c94:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009c97:	4b                   	dec    ebx
c0009c98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c9c:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c9f:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ca2:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ca6:	d8 c9                	fmul   st,st(1)
c0009ca8:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009cab:	4b                   	dec    ebx
c0009cac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009cb0:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009cb3:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009cb6:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009cba:	d8 c9                	fmul   st,st(1)
c0009cbc:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009cbf:	4b                   	dec    ebx
c0009cc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009cc4:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009cc7:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009cca:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009cce:	d8 c9                	fmul   st,st(1)
c0009cd0:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009cd3:	4b                   	dec    ebx
c0009cd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009cd8:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009cdb:	85 db                	test   ebx,ebx
c0009cdd:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ce0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ce4:	d8 c9                	fmul   st,st(1)
c0009ce6:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ce9:	0f 8f 46 ff ff ff    	jg     c0009c35 <calc_output_multi+0x345>
c0009cef:	dd d8                	fstp   st(0)
c0009cf1:	83 c4 4c             	add    esp,0x4c
c0009cf4:	5b                   	pop    ebx
c0009cf5:	5e                   	pop    esi
c0009cf6:	5f                   	pop    edi
c0009cf7:	5d                   	pop    ebp
c0009cf8:	c3                   	ret    

c0009cf9 <sinc_reset>:
c0009cf9:	56                   	push   esi
c0009cfa:	53                   	push   ebx
c0009cfb:	51                   	push   ecx
c0009cfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d00:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009d03:	85 db                	test   ebx,ebx
c0009d05:	74 51                	je     c0009d58 <sinc_reset+0x5f>
c0009d07:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0009d0e:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0009d15:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c0009d1c:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c0009d22:	d9 ee                	fldz   
c0009d24:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009d27:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c0009d2a:	52                   	push   edx
c0009d2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009d2e:	c1 e0 02             	shl    eax,0x2
c0009d31:	50                   	push   eax
c0009d32:	6a 00                	push   0x0
c0009d34:	56                   	push   esi
c0009d35:	e8 9e 69 ff ff       	call   c00006d8 <memset>
c0009d3a:	83 c4 0c             	add    esp,0xc
c0009d3d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009d40:	c1 e0 02             	shl    eax,0x2
c0009d43:	50                   	push   eax
c0009d44:	68 aa 00 00 00       	push   0xaa
c0009d49:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009d4c:	8d 04 86             	lea    eax,[esi+eax*4]
c0009d4f:	50                   	push   eax
c0009d50:	e8 83 69 ff ff       	call   c00006d8 <memset>
c0009d55:	83 c4 10             	add    esp,0x10
c0009d58:	58                   	pop    eax
c0009d59:	5b                   	pop    ebx
c0009d5a:	5e                   	pop    esi
c0009d5b:	c3                   	ret    

c0009d5c <double_to_fp>:
c0009d5c:	d9 05 c4 87 03 c0    	fld    DWORD PTR ds:0xc00387c4
c0009d62:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009d66:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009d6a:	e9 91 4b 01 00       	jmp    c001e900 <lrint>

c0009d6f <fmod_one>:
c0009d6f:	83 ec 2c             	sub    esp,0x2c
c0009d72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d7a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009d82:	83 ec 08             	sub    esp,0x8
c0009d85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d8d:	e8 6e 4b 01 00       	call   c001e900 <lrint>
c0009d92:	83 c4 10             	add    esp,0x10
c0009d95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009d99:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009d9d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009da1:	de e1                	fsubrp st(1),st
c0009da3:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009da7:	d9 ee                	fldz   
c0009da9:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009dad:	df e0                	fnstsw ax
c0009daf:	f6 c4 45             	test   ah,0x45
c0009db2:	75 0a                	jne    c0009dbe <fmod_one+0x4f>
c0009db4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009db8:	d9 e8                	fld1   
c0009dba:	de c1                	faddp  st(1),st
c0009dbc:	eb 04                	jmp    c0009dc2 <fmod_one+0x53>
c0009dbe:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009dc2:	83 c4 2c             	add    esp,0x2c
c0009dc5:	c3                   	ret    

c0009dc6 <prepare_data>:
c0009dc6:	55                   	push   ebp
c0009dc7:	57                   	push   edi
c0009dc8:	56                   	push   esi
c0009dc9:	53                   	push   ebx
c0009dca:	83 ec 1c             	sub    esp,0x1c
c0009dcd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009dd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009dd5:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009dd9:	0f 89 57 01 00 00    	jns    c0009f36 <prepare_data+0x170>
c0009ddf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009de2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009de5:	85 d2                	test   edx,edx
c0009de7:	75 0d                	jne    c0009df6 <prepare_data+0x30>
c0009de9:	8d 14 36             	lea    edx,[esi+esi*1]
c0009dec:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009def:	29 d0                	sub    eax,edx
c0009df1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009df4:	eb 44                	jmp    c0009e3a <prepare_data+0x74>
c0009df6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009df9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009dfc:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009dff:	39 c1                	cmp    ecx,eax
c0009e01:	7d 04                	jge    c0009e07 <prepare_data+0x41>
c0009e03:	29 d0                	sub    eax,edx
c0009e05:	eb 2d                	jmp    c0009e34 <prepare_data+0x6e>
c0009e07:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009e0d:	29 d7                	sub    edi,edx
c0009e0f:	01 f7                	add    edi,esi
c0009e11:	51                   	push   ecx
c0009e12:	29 f2                	sub    edx,esi
c0009e14:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009e1b:	8d 14 90             	lea    edx,[eax+edx*4]
c0009e1e:	51                   	push   ecx
c0009e1f:	52                   	push   edx
c0009e20:	50                   	push   eax
c0009e21:	e8 ce 67 ff ff       	call   c00005f4 <memmove>
c0009e26:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009e29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009e2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009e2f:	29 f0                	sub    eax,esi
c0009e31:	83 c4 10             	add    esp,0x10
c0009e34:	29 f0                	sub    eax,esi
c0009e36:	79 02                	jns    c0009e3a <prepare_data+0x74>
c0009e38:	31 c0                	xor    eax,eax
c0009e3a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009e3d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009e40:	29 ef                	sub    edi,ebp
c0009e42:	39 c7                	cmp    edi,eax
c0009e44:	7e 02                	jle    c0009e48 <prepare_data+0x82>
c0009e46:	89 c7                	mov    edi,eax
c0009e48:	89 f8                	mov    eax,edi
c0009e4a:	99                   	cdq    
c0009e4b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e4e:	b8 15 00 00 00       	mov    eax,0x15
c0009e53:	29 d7                	sub    edi,edx
c0009e55:	0f 88 dd 00 00 00    	js     c0009f38 <prepare_data+0x172>
c0009e5b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009e5e:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009e61:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009e64:	0f 8f ce 00 00 00    	jg     c0009f38 <prepare_data+0x172>
c0009e6a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009e70:	50                   	push   eax
c0009e71:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009e78:	50                   	push   eax
c0009e79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009e7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e7f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009e82:	50                   	push   eax
c0009e83:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009e86:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009e8a:	50                   	push   eax
c0009e8b:	e8 d1 67 ff ff       	call   c0000661 <memcpy>
c0009e90:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009e93:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009e96:	01 fd                	add    ebp,edi
c0009e98:	01 f9                	add    ecx,edi
c0009e9a:	83 c4 10             	add    esp,0x10
c0009e9d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009ea0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009ea3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009ea6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009eaa:	0f 85 86 00 00 00    	jne    c0009f36 <prepare_data+0x170>
c0009eb0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009eb3:	89 e8                	mov    eax,ebp
c0009eb5:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009eb8:	29 c8                	sub    eax,ecx
c0009eba:	39 f8                	cmp    eax,edi
c0009ebc:	7d 78                	jge    c0009f36 <prepare_data+0x170>
c0009ebe:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009ec2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009ec6:	74 6e                	je     c0009f36 <prepare_data+0x170>
c0009ec8:	8d 7e 04             	lea    edi,[esi+0x4]
c0009ecb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009ecf:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009ed2:	29 ef                	sub    edi,ebp
c0009ed4:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009ed8:	7c 29                	jl     c0009f03 <prepare_data+0x13d>
c0009eda:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009edd:	29 f1                	sub    ecx,esi
c0009edf:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009ee6:	55                   	push   ebp
c0009ee7:	50                   	push   eax
c0009ee8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009eeb:	50                   	push   eax
c0009eec:	52                   	push   edx
c0009eed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ef1:	e8 fe 66 ff ff       	call   c00005f4 <memmove>
c0009ef6:	83 c4 10             	add    esp,0x10
c0009ef9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009efc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009eff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f03:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009f06:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009f09:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009f0c:	83 c6 05             	add    esi,0x5
c0009f0f:	78 07                	js     c0009f18 <prepare_data+0x152>
c0009f11:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009f14:	39 cf                	cmp    edi,ecx
c0009f16:	7e 04                	jle    c0009f1c <prepare_data+0x156>
c0009f18:	89 ce                	mov    esi,ecx
c0009f1a:	29 c6                	sub    esi,eax
c0009f1c:	8d 04 82             	lea    eax,[edx+eax*4]
c0009f1f:	51                   	push   ecx
c0009f20:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009f27:	51                   	push   ecx
c0009f28:	6a 00                	push   0x0
c0009f2a:	50                   	push   eax
c0009f2b:	e8 a8 67 ff ff       	call   c00006d8 <memset>
c0009f30:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009f33:	83 c4 10             	add    esp,0x10
c0009f36:	31 c0                	xor    eax,eax
c0009f38:	83 c4 1c             	add    esp,0x1c
c0009f3b:	5b                   	pop    ebx
c0009f3c:	5e                   	pop    esi
c0009f3d:	5f                   	pop    edi
c0009f3e:	5d                   	pop    ebp
c0009f3f:	c3                   	ret    

c0009f40 <sinc_multichan_vari_process>:
c0009f40:	55                   	push   ebp
c0009f41:	b8 05 00 00 00       	mov    eax,0x5
c0009f46:	57                   	push   edi
c0009f47:	56                   	push   esi
c0009f48:	53                   	push   ebx
c0009f49:	83 ec 3c             	sub    esp,0x3c
c0009f4c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009f50:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009f54:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009f57:	85 db                	test   ebx,ebx
c0009f59:	0f 84 5d 02 00 00    	je     c000a1bc <sinc_multichan_vari_process+0x27c>
c0009f5f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009f62:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009f65:	0f af d0             	imul   edx,eax
c0009f68:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009f6b:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009f6f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009f76:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009f79:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009f80:	dd 06                	fld    QWORD PTR [esi]
c0009f82:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009f86:	55                   	push   ebp
c0009f87:	55                   	push   ebp
c0009f88:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f8b:	e8 d9 f2 ff ff       	call   c0009269 <is_bad_src_ratio>
c0009f90:	89 c2                	mov    edx,eax
c0009f92:	58                   	pop    eax
c0009f93:	85 d2                	test   edx,edx
c0009f95:	59                   	pop    ecx
c0009f96:	b8 16 00 00 00       	mov    eax,0x16
c0009f9b:	0f 85 1b 02 00 00    	jne    c000a1bc <sinc_multichan_vari_process+0x27c>
c0009fa1:	d9 05 c8 87 03 c0    	fld    DWORD PTR ds:0xc00387c8
c0009fa7:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009faa:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009fad:	dd 06                	fld    QWORD PTR [esi]
c0009faf:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009fb2:	d8 d1                	fcom   st(1)
c0009fb4:	df e0                	fnstsw ax
c0009fb6:	9e                   	sahf   
c0009fb7:	76 0f                	jbe    c0009fc8 <sinc_multichan_vari_process+0x88>
c0009fb9:	dd d8                	fstp   st(0)
c0009fbb:	d9 e8                	fld1   
c0009fbd:	d8 d9                	fcomp  st(1)
c0009fbf:	df e0                	fnstsw ax
c0009fc1:	9e                   	sahf   
c0009fc2:	77 0f                	ja     c0009fd3 <sinc_multichan_vari_process+0x93>
c0009fc4:	dd d8                	fstp   st(0)
c0009fc6:	eb 11                	jmp    c0009fd9 <sinc_multichan_vari_process+0x99>
c0009fc8:	dd d9                	fstp   st(1)
c0009fca:	d9 e8                	fld1   
c0009fcc:	d8 d9                	fcomp  st(1)
c0009fce:	df e0                	fnstsw ax
c0009fd0:	9e                   	sahf   
c0009fd1:	76 04                	jbe    c0009fd7 <sinc_multichan_vari_process+0x97>
c0009fd3:	de f9                	fdivp  st(1),st
c0009fd5:	eb 02                	jmp    c0009fd9 <sinc_multichan_vari_process+0x99>
c0009fd7:	dd d8                	fstp   st(0)
c0009fd9:	83 ec 10             	sub    esp,0x10
c0009fdc:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009fdf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009fe2:	e8 19 49 01 00       	call   c001e900 <lrint>
c0009fe7:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009fea:	40                   	inc    eax
c0009feb:	dd 14 24             	fst    QWORD PTR [esp]
c0009fee:	0f af c5             	imul   eax,ebp
c0009ff1:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009ff5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ff9:	e8 71 fd ff ff       	call   c0009d6f <fmod_one>
c0009ffe:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a001:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a005:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a008:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a00c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a010:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a014:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a017:	e8 e4 48 01 00       	call   c001e900 <lrint>
c000a01c:	0f af e8             	imul   ebp,eax
c000a01f:	d9 e8                	fld1   
c000a021:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a025:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a029:	01 e8                	add    eax,ebp
c000a02b:	dc 05 f8 00 02 c0    	fadd   QWORD PTR ds:0xc00200f8
c000a031:	99                   	cdq    
c000a032:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a036:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a039:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a03c:	83 c4 10             	add    esp,0x10
c000a03f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a042:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a045:	7d 4b                	jge    c000a092 <sinc_multichan_vari_process+0x152>
c000a047:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a04a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a04d:	01 c8                	add    eax,ecx
c000a04f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a052:	99                   	cdq    
c000a053:	f7 f9                	idiv   ecx
c000a055:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a059:	7d 09                	jge    c000a064 <sinc_multichan_vari_process+0x124>
c000a05b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a05e:	85 c0                	test   eax,eax
c000a060:	79 57                	jns    c000a0b9 <sinc_multichan_vari_process+0x179>
c000a062:	eb 70                	jmp    c000a0d4 <sinc_multichan_vari_process+0x194>
c000a064:	51                   	push   ecx
c000a065:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a069:	57                   	push   edi
c000a06a:	53                   	push   ebx
c000a06b:	e8 56 fd ff ff       	call   c0009dc6 <prepare_data>
c000a070:	83 c4 10             	add    esp,0x10
c000a073:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a076:	85 c0                	test   eax,eax
c000a078:	0f 85 3e 01 00 00    	jne    c000a1bc <sinc_multichan_vari_process+0x27c>
c000a07e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a081:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a084:	01 c8                	add    eax,ecx
c000a086:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a089:	99                   	cdq    
c000a08a:	f7 f9                	idiv   ecx
c000a08c:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a090:	7c c9                	jl     c000a05b <sinc_multichan_vari_process+0x11b>
c000a092:	dd 04 24             	fld    QWORD PTR [esp]
c000a095:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a098:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a09c:	dd 1e                	fstp   QWORD PTR [esi]
c000a09e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a0a1:	99                   	cdq    
c000a0a2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0a5:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a0a8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a0ab:	99                   	cdq    
c000a0ac:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0af:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a0b2:	31 c0                	xor    eax,eax
c000a0b4:	e9 03 01 00 00       	jmp    c000a1bc <sinc_multichan_vari_process+0x27c>
c000a0b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0bd:	dd 04 24             	fld    QWORD PTR [esp]
c000a0c0:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a0c3:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a0c7:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a0cb:	d9 c9                	fxch   st(1)
c000a0cd:	de d9                	fcompp 
c000a0cf:	df e0                	fnstsw ax
c000a0d1:	9e                   	sahf   
c000a0d2:	73 be                	jae    c000a092 <sinc_multichan_vari_process+0x152>
c000a0d4:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a0d8:	7e 31                	jle    c000a10b <sinc_multichan_vari_process+0x1cb>
c000a0da:	83 ec 10             	sub    esp,0x10
c000a0dd:	dd 06                	fld    QWORD PTR [esi]
c000a0df:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a0e2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0e5:	e8 f6 47 01 00       	call   c001e8e0 <fabs>
c000a0ea:	83 c4 10             	add    esp,0x10
c000a0ed:	dc 1d b8 87 03 c0    	fcomp  QWORD PTR ds:0xc00387b8
c000a0f3:	df e0                	fnstsw ax
c000a0f5:	9e                   	sahf   
c000a0f6:	76 13                	jbe    c000a10b <sinc_multichan_vari_process+0x1cb>
c000a0f8:	dd 06                	fld    QWORD PTR [esi]
c000a0fa:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a0fd:	d8 e1                	fsub   st,st(1)
c000a0ff:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a102:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a105:	de c1                	faddp  st(1),st
c000a107:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a10b:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a10e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a112:	d9 e8                	fld1   
c000a114:	d8 d9                	fcomp  st(1)
c000a116:	df e0                	fnstsw ax
c000a118:	9e                   	sahf   
c000a119:	77 04                	ja     c000a11f <sinc_multichan_vari_process+0x1df>
c000a11b:	dd d8                	fstp   st(0)
c000a11d:	d9 e8                	fld1   
c000a11f:	de c9                	fmulp  st(1),st
c000a121:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a125:	50                   	push   eax
c000a126:	50                   	push   eax
c000a127:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a12b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a12f:	e8 28 fc ff ff       	call   c0009d5c <double_to_fp>
c000a134:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a138:	89 c5                	mov    ebp,eax
c000a13a:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a13e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a141:	e8 16 fc ff ff       	call   c0009d5c <double_to_fp>
c000a146:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a149:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a14c:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a14f:	89 c1                	mov    ecx,eax
c000a151:	52                   	push   edx
c000a152:	89 d8                	mov    eax,ebx
c000a154:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c000a158:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a15b:	52                   	push   edx
c000a15c:	52                   	push   edx
c000a15d:	89 ea                	mov    edx,ebp
c000a15f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a162:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a165:	e8 86 f7 ff ff       	call   c00098f0 <calc_output_multi>
c000a16a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000a16d:	d9 e8                	fld1   
c000a16f:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000a172:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c000a176:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a17a:	83 c4 10             	add    esp,0x10
c000a17d:	dd 14 24             	fst    QWORD PTR [esp]
c000a180:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a184:	e8 e6 fb ff ff       	call   c0009d6f <fmod_one>
c000a189:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a18c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a190:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a193:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a197:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a19b:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a19f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1a2:	e8 59 47 01 00       	call   c001e900 <lrint>
c000a1a7:	0f af e8             	imul   ebp,eax
c000a1aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a1ae:	01 e8                	add    eax,ebp
c000a1b0:	99                   	cdq    
c000a1b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a1b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a1b7:	e9 80 fe ff ff       	jmp    c000a03c <sinc_multichan_vari_process+0xfc>
c000a1bc:	83 c4 3c             	add    esp,0x3c
c000a1bf:	5b                   	pop    ebx
c000a1c0:	5e                   	pop    esi
c000a1c1:	5f                   	pop    edi
c000a1c2:	5d                   	pop    ebp
c000a1c3:	c3                   	ret    

c000a1c4 <sinc_hex_vari_process>:
c000a1c4:	55                   	push   ebp
c000a1c5:	b8 05 00 00 00       	mov    eax,0x5
c000a1ca:	57                   	push   edi
c000a1cb:	56                   	push   esi
c000a1cc:	53                   	push   ebx
c000a1cd:	83 ec 3c             	sub    esp,0x3c
c000a1d0:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a1d4:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a1d8:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a1db:	85 db                	test   ebx,ebx
c000a1dd:	0f 84 58 02 00 00    	je     c000a43b <sinc_hex_vari_process+0x277>
c000a1e3:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a1e6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a1e9:	0f af d0             	imul   edx,eax
c000a1ec:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a1ef:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a1f3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a1fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a1fd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a204:	dd 06                	fld    QWORD PTR [esi]
c000a206:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a20a:	55                   	push   ebp
c000a20b:	55                   	push   ebp
c000a20c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a20f:	e8 55 f0 ff ff       	call   c0009269 <is_bad_src_ratio>
c000a214:	89 c2                	mov    edx,eax
c000a216:	58                   	pop    eax
c000a217:	85 d2                	test   edx,edx
c000a219:	59                   	pop    ecx
c000a21a:	b8 16 00 00 00       	mov    eax,0x16
c000a21f:	0f 85 16 02 00 00    	jne    c000a43b <sinc_hex_vari_process+0x277>
c000a225:	d9 05 c8 87 03 c0    	fld    DWORD PTR ds:0xc00387c8
c000a22b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a22e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a231:	dd 06                	fld    QWORD PTR [esi]
c000a233:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a236:	d8 d1                	fcom   st(1)
c000a238:	df e0                	fnstsw ax
c000a23a:	9e                   	sahf   
c000a23b:	76 0f                	jbe    c000a24c <sinc_hex_vari_process+0x88>
c000a23d:	dd d8                	fstp   st(0)
c000a23f:	d9 e8                	fld1   
c000a241:	d8 d9                	fcomp  st(1)
c000a243:	df e0                	fnstsw ax
c000a245:	9e                   	sahf   
c000a246:	77 0f                	ja     c000a257 <sinc_hex_vari_process+0x93>
c000a248:	dd d8                	fstp   st(0)
c000a24a:	eb 11                	jmp    c000a25d <sinc_hex_vari_process+0x99>
c000a24c:	dd d9                	fstp   st(1)
c000a24e:	d9 e8                	fld1   
c000a250:	d8 d9                	fcomp  st(1)
c000a252:	df e0                	fnstsw ax
c000a254:	9e                   	sahf   
c000a255:	76 04                	jbe    c000a25b <sinc_hex_vari_process+0x97>
c000a257:	de f9                	fdivp  st(1),st
c000a259:	eb 02                	jmp    c000a25d <sinc_hex_vari_process+0x99>
c000a25b:	dd d8                	fstp   st(0)
c000a25d:	83 ec 10             	sub    esp,0x10
c000a260:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a263:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a266:	e8 95 46 01 00       	call   c001e900 <lrint>
c000a26b:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a26e:	40                   	inc    eax
c000a26f:	dd 14 24             	fst    QWORD PTR [esp]
c000a272:	0f af c5             	imul   eax,ebp
c000a275:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a279:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a27d:	e8 ed fa ff ff       	call   c0009d6f <fmod_one>
c000a282:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a285:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a289:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a28c:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a290:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a294:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a298:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a29b:	e8 60 46 01 00       	call   c001e900 <lrint>
c000a2a0:	0f af e8             	imul   ebp,eax
c000a2a3:	d9 e8                	fld1   
c000a2a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a2a9:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a2ad:	01 e8                	add    eax,ebp
c000a2af:	dc 05 f8 00 02 c0    	fadd   QWORD PTR ds:0xc00200f8
c000a2b5:	99                   	cdq    
c000a2b6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a2ba:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a2bd:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a2c0:	83 c4 10             	add    esp,0x10
c000a2c3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a2c6:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a2c9:	7d 4b                	jge    c000a316 <sinc_hex_vari_process+0x152>
c000a2cb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2ce:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2d1:	01 c8                	add    eax,ecx
c000a2d3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2d6:	99                   	cdq    
c000a2d7:	f7 f9                	idiv   ecx
c000a2d9:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a2dd:	7d 09                	jge    c000a2e8 <sinc_hex_vari_process+0x124>
c000a2df:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a2e2:	85 c0                	test   eax,eax
c000a2e4:	79 57                	jns    c000a33d <sinc_hex_vari_process+0x179>
c000a2e6:	eb 70                	jmp    c000a358 <sinc_hex_vari_process+0x194>
c000a2e8:	51                   	push   ecx
c000a2e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a2ed:	57                   	push   edi
c000a2ee:	53                   	push   ebx
c000a2ef:	e8 d2 fa ff ff       	call   c0009dc6 <prepare_data>
c000a2f4:	83 c4 10             	add    esp,0x10
c000a2f7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a2fa:	85 c0                	test   eax,eax
c000a2fc:	0f 85 39 01 00 00    	jne    c000a43b <sinc_hex_vari_process+0x277>
c000a302:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a305:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a308:	01 c8                	add    eax,ecx
c000a30a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a30d:	99                   	cdq    
c000a30e:	f7 f9                	idiv   ecx
c000a310:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a314:	7c c9                	jl     c000a2df <sinc_hex_vari_process+0x11b>
c000a316:	dd 04 24             	fld    QWORD PTR [esp]
c000a319:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a31c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a320:	dd 1e                	fstp   QWORD PTR [esi]
c000a322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a325:	99                   	cdq    
c000a326:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a329:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a32c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a32f:	99                   	cdq    
c000a330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a333:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a336:	31 c0                	xor    eax,eax
c000a338:	e9 fe 00 00 00       	jmp    c000a43b <sinc_hex_vari_process+0x277>
c000a33d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a341:	dd 04 24             	fld    QWORD PTR [esp]
c000a344:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a347:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a34b:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a34f:	d9 c9                	fxch   st(1)
c000a351:	de d9                	fcompp 
c000a353:	df e0                	fnstsw ax
c000a355:	9e                   	sahf   
c000a356:	73 be                	jae    c000a316 <sinc_hex_vari_process+0x152>
c000a358:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a35c:	7e 31                	jle    c000a38f <sinc_hex_vari_process+0x1cb>
c000a35e:	83 ec 10             	sub    esp,0x10
c000a361:	dd 06                	fld    QWORD PTR [esi]
c000a363:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a366:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a369:	e8 72 45 01 00       	call   c001e8e0 <fabs>
c000a36e:	83 c4 10             	add    esp,0x10
c000a371:	dc 1d b8 87 03 c0    	fcomp  QWORD PTR ds:0xc00387b8
c000a377:	df e0                	fnstsw ax
c000a379:	9e                   	sahf   
c000a37a:	76 13                	jbe    c000a38f <sinc_hex_vari_process+0x1cb>
c000a37c:	dd 06                	fld    QWORD PTR [esi]
c000a37e:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a381:	d8 e1                	fsub   st,st(1)
c000a383:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a386:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a389:	de c1                	faddp  st(1),st
c000a38b:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a38f:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a392:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a396:	d9 e8                	fld1   
c000a398:	d8 d9                	fcomp  st(1)
c000a39a:	df e0                	fnstsw ax
c000a39c:	9e                   	sahf   
c000a39d:	77 04                	ja     c000a3a3 <sinc_hex_vari_process+0x1df>
c000a39f:	dd d8                	fstp   st(0)
c000a3a1:	d9 e8                	fld1   
c000a3a3:	de c9                	fmulp  st(1),st
c000a3a5:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a3a9:	50                   	push   eax
c000a3aa:	50                   	push   eax
c000a3ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3b3:	e8 a4 f9 ff ff       	call   c0009d5c <double_to_fp>
c000a3b8:	89 c5                	mov    ebp,eax
c000a3ba:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a3be:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a3c2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3c5:	e8 92 f9 ff ff       	call   c0009d5c <double_to_fp>
c000a3ca:	83 c4 0c             	add    esp,0xc
c000a3cd:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a3d0:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a3d3:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a3d6:	89 c1                	mov    ecx,eax
c000a3d8:	52                   	push   edx
c000a3d9:	89 d8                	mov    eax,ebx
c000a3db:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a3df:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a3e2:	52                   	push   edx
c000a3e3:	52                   	push   edx
c000a3e4:	89 ea                	mov    edx,ebp
c000a3e6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3e9:	e8 d1 f2 ff ff       	call   c00096bf <calc_output_hex>
c000a3ee:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a3f2:	d9 e8                	fld1   
c000a3f4:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a3f8:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a3fc:	dd 14 24             	fst    QWORD PTR [esp]
c000a3ff:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a403:	e8 67 f9 ff ff       	call   c0009d6f <fmod_one>
c000a408:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a40b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a40f:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a412:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a416:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a41a:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a41e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a421:	e8 da 44 01 00       	call   c001e900 <lrint>
c000a426:	0f af e8             	imul   ebp,eax
c000a429:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a42d:	01 e8                	add    eax,ebp
c000a42f:	99                   	cdq    
c000a430:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a433:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a436:	e9 85 fe ff ff       	jmp    c000a2c0 <sinc_hex_vari_process+0xfc>
c000a43b:	83 c4 3c             	add    esp,0x3c
c000a43e:	5b                   	pop    ebx
c000a43f:	5e                   	pop    esi
c000a440:	5f                   	pop    edi
c000a441:	5d                   	pop    ebp
c000a442:	c3                   	ret    

c000a443 <sinc_quad_vari_process>:
c000a443:	55                   	push   ebp
c000a444:	b8 05 00 00 00       	mov    eax,0x5
c000a449:	57                   	push   edi
c000a44a:	56                   	push   esi
c000a44b:	53                   	push   ebx
c000a44c:	83 ec 3c             	sub    esp,0x3c
c000a44f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a453:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a457:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a45a:	85 db                	test   ebx,ebx
c000a45c:	0f 84 58 02 00 00    	je     c000a6ba <sinc_quad_vari_process+0x277>
c000a462:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a465:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a468:	0f af d0             	imul   edx,eax
c000a46b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a46e:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a472:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a479:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a47c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a483:	dd 06                	fld    QWORD PTR [esi]
c000a485:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a489:	55                   	push   ebp
c000a48a:	55                   	push   ebp
c000a48b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a48e:	e8 d6 ed ff ff       	call   c0009269 <is_bad_src_ratio>
c000a493:	89 c2                	mov    edx,eax
c000a495:	58                   	pop    eax
c000a496:	85 d2                	test   edx,edx
c000a498:	59                   	pop    ecx
c000a499:	b8 16 00 00 00       	mov    eax,0x16
c000a49e:	0f 85 16 02 00 00    	jne    c000a6ba <sinc_quad_vari_process+0x277>
c000a4a4:	d9 05 c8 87 03 c0    	fld    DWORD PTR ds:0xc00387c8
c000a4aa:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a4ad:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a4b0:	dd 06                	fld    QWORD PTR [esi]
c000a4b2:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a4b5:	d8 d1                	fcom   st(1)
c000a4b7:	df e0                	fnstsw ax
c000a4b9:	9e                   	sahf   
c000a4ba:	76 0f                	jbe    c000a4cb <sinc_quad_vari_process+0x88>
c000a4bc:	dd d8                	fstp   st(0)
c000a4be:	d9 e8                	fld1   
c000a4c0:	d8 d9                	fcomp  st(1)
c000a4c2:	df e0                	fnstsw ax
c000a4c4:	9e                   	sahf   
c000a4c5:	77 0f                	ja     c000a4d6 <sinc_quad_vari_process+0x93>
c000a4c7:	dd d8                	fstp   st(0)
c000a4c9:	eb 11                	jmp    c000a4dc <sinc_quad_vari_process+0x99>
c000a4cb:	dd d9                	fstp   st(1)
c000a4cd:	d9 e8                	fld1   
c000a4cf:	d8 d9                	fcomp  st(1)
c000a4d1:	df e0                	fnstsw ax
c000a4d3:	9e                   	sahf   
c000a4d4:	76 04                	jbe    c000a4da <sinc_quad_vari_process+0x97>
c000a4d6:	de f9                	fdivp  st(1),st
c000a4d8:	eb 02                	jmp    c000a4dc <sinc_quad_vari_process+0x99>
c000a4da:	dd d8                	fstp   st(0)
c000a4dc:	83 ec 10             	sub    esp,0x10
c000a4df:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4e2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4e5:	e8 16 44 01 00       	call   c001e900 <lrint>
c000a4ea:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a4ed:	40                   	inc    eax
c000a4ee:	dd 14 24             	fst    QWORD PTR [esp]
c000a4f1:	0f af c5             	imul   eax,ebp
c000a4f4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a4f8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4fc:	e8 6e f8 ff ff       	call   c0009d6f <fmod_one>
c000a501:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a504:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a508:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a50b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a50f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a513:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a517:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a51a:	e8 e1 43 01 00       	call   c001e900 <lrint>
c000a51f:	0f af e8             	imul   ebp,eax
c000a522:	d9 e8                	fld1   
c000a524:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a528:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a52c:	01 e8                	add    eax,ebp
c000a52e:	dc 05 f8 00 02 c0    	fadd   QWORD PTR ds:0xc00200f8
c000a534:	99                   	cdq    
c000a535:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a539:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a53c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a53f:	83 c4 10             	add    esp,0x10
c000a542:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a545:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a548:	7d 4b                	jge    c000a595 <sinc_quad_vari_process+0x152>
c000a54a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a54d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a550:	01 c8                	add    eax,ecx
c000a552:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a555:	99                   	cdq    
c000a556:	f7 f9                	idiv   ecx
c000a558:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a55c:	7d 09                	jge    c000a567 <sinc_quad_vari_process+0x124>
c000a55e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a561:	85 c0                	test   eax,eax
c000a563:	79 57                	jns    c000a5bc <sinc_quad_vari_process+0x179>
c000a565:	eb 70                	jmp    c000a5d7 <sinc_quad_vari_process+0x194>
c000a567:	51                   	push   ecx
c000a568:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a56c:	57                   	push   edi
c000a56d:	53                   	push   ebx
c000a56e:	e8 53 f8 ff ff       	call   c0009dc6 <prepare_data>
c000a573:	83 c4 10             	add    esp,0x10
c000a576:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a579:	85 c0                	test   eax,eax
c000a57b:	0f 85 39 01 00 00    	jne    c000a6ba <sinc_quad_vari_process+0x277>
c000a581:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a584:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a587:	01 c8                	add    eax,ecx
c000a589:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a58c:	99                   	cdq    
c000a58d:	f7 f9                	idiv   ecx
c000a58f:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a593:	7c c9                	jl     c000a55e <sinc_quad_vari_process+0x11b>
c000a595:	dd 04 24             	fld    QWORD PTR [esp]
c000a598:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a59b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a59f:	dd 1e                	fstp   QWORD PTR [esi]
c000a5a1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a5a4:	99                   	cdq    
c000a5a5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5a8:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a5ab:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a5ae:	99                   	cdq    
c000a5af:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5b2:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a5b5:	31 c0                	xor    eax,eax
c000a5b7:	e9 fe 00 00 00       	jmp    c000a6ba <sinc_quad_vari_process+0x277>
c000a5bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5c0:	dd 04 24             	fld    QWORD PTR [esp]
c000a5c3:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a5c6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a5ca:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a5ce:	d9 c9                	fxch   st(1)
c000a5d0:	de d9                	fcompp 
c000a5d2:	df e0                	fnstsw ax
c000a5d4:	9e                   	sahf   
c000a5d5:	73 be                	jae    c000a595 <sinc_quad_vari_process+0x152>
c000a5d7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a5db:	7e 31                	jle    c000a60e <sinc_quad_vari_process+0x1cb>
c000a5dd:	83 ec 10             	sub    esp,0x10
c000a5e0:	dd 06                	fld    QWORD PTR [esi]
c000a5e2:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a5e5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5e8:	e8 f3 42 01 00       	call   c001e8e0 <fabs>
c000a5ed:	83 c4 10             	add    esp,0x10
c000a5f0:	dc 1d b8 87 03 c0    	fcomp  QWORD PTR ds:0xc00387b8
c000a5f6:	df e0                	fnstsw ax
c000a5f8:	9e                   	sahf   
c000a5f9:	76 13                	jbe    c000a60e <sinc_quad_vari_process+0x1cb>
c000a5fb:	dd 06                	fld    QWORD PTR [esi]
c000a5fd:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a600:	d8 e1                	fsub   st,st(1)
c000a602:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a605:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a608:	de c1                	faddp  st(1),st
c000a60a:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a60e:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a611:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a615:	d9 e8                	fld1   
c000a617:	d8 d9                	fcomp  st(1)
c000a619:	df e0                	fnstsw ax
c000a61b:	9e                   	sahf   
c000a61c:	77 04                	ja     c000a622 <sinc_quad_vari_process+0x1df>
c000a61e:	dd d8                	fstp   st(0)
c000a620:	d9 e8                	fld1   
c000a622:	de c9                	fmulp  st(1),st
c000a624:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a628:	50                   	push   eax
c000a629:	50                   	push   eax
c000a62a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a62e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a632:	e8 25 f7 ff ff       	call   c0009d5c <double_to_fp>
c000a637:	89 c5                	mov    ebp,eax
c000a639:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a63d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a641:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a644:	e8 13 f7 ff ff       	call   c0009d5c <double_to_fp>
c000a649:	83 c4 0c             	add    esp,0xc
c000a64c:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a64f:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a652:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a655:	89 c1                	mov    ecx,eax
c000a657:	52                   	push   edx
c000a658:	89 d8                	mov    eax,ebx
c000a65a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a65e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a661:	52                   	push   edx
c000a662:	52                   	push   edx
c000a663:	89 ea                	mov    edx,ebp
c000a665:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a668:	e8 8d ee ff ff       	call   c00094fa <calc_output_quad>
c000a66d:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a671:	d9 e8                	fld1   
c000a673:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a677:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a67b:	dd 14 24             	fst    QWORD PTR [esp]
c000a67e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a682:	e8 e8 f6 ff ff       	call   c0009d6f <fmod_one>
c000a687:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a68a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a68e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a691:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a695:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a699:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a69d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6a0:	e8 5b 42 01 00       	call   c001e900 <lrint>
c000a6a5:	0f af e8             	imul   ebp,eax
c000a6a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a6ac:	01 e8                	add    eax,ebp
c000a6ae:	99                   	cdq    
c000a6af:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a6b2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a6b5:	e9 85 fe ff ff       	jmp    c000a53f <sinc_quad_vari_process+0xfc>
c000a6ba:	83 c4 3c             	add    esp,0x3c
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	5d                   	pop    ebp
c000a6c1:	c3                   	ret    

c000a6c2 <sinc_stereo_vari_process>:
c000a6c2:	55                   	push   ebp
c000a6c3:	b8 05 00 00 00       	mov    eax,0x5
c000a6c8:	57                   	push   edi
c000a6c9:	56                   	push   esi
c000a6ca:	53                   	push   ebx
c000a6cb:	83 ec 3c             	sub    esp,0x3c
c000a6ce:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a6d2:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a6d6:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a6d9:	85 db                	test   ebx,ebx
c000a6db:	0f 84 58 02 00 00    	je     c000a939 <sinc_stereo_vari_process+0x277>
c000a6e1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a6e4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6e7:	0f af d0             	imul   edx,eax
c000a6ea:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a6ed:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a6f1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a6f8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a6fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a702:	dd 06                	fld    QWORD PTR [esi]
c000a704:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a708:	55                   	push   ebp
c000a709:	55                   	push   ebp
c000a70a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a70d:	e8 57 eb ff ff       	call   c0009269 <is_bad_src_ratio>
c000a712:	89 c2                	mov    edx,eax
c000a714:	58                   	pop    eax
c000a715:	85 d2                	test   edx,edx
c000a717:	59                   	pop    ecx
c000a718:	b8 16 00 00 00       	mov    eax,0x16
c000a71d:	0f 85 16 02 00 00    	jne    c000a939 <sinc_stereo_vari_process+0x277>
c000a723:	d9 05 c8 87 03 c0    	fld    DWORD PTR ds:0xc00387c8
c000a729:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a72c:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a72f:	dd 06                	fld    QWORD PTR [esi]
c000a731:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a734:	d8 d1                	fcom   st(1)
c000a736:	df e0                	fnstsw ax
c000a738:	9e                   	sahf   
c000a739:	76 0f                	jbe    c000a74a <sinc_stereo_vari_process+0x88>
c000a73b:	dd d8                	fstp   st(0)
c000a73d:	d9 e8                	fld1   
c000a73f:	d8 d9                	fcomp  st(1)
c000a741:	df e0                	fnstsw ax
c000a743:	9e                   	sahf   
c000a744:	77 0f                	ja     c000a755 <sinc_stereo_vari_process+0x93>
c000a746:	dd d8                	fstp   st(0)
c000a748:	eb 11                	jmp    c000a75b <sinc_stereo_vari_process+0x99>
c000a74a:	dd d9                	fstp   st(1)
c000a74c:	d9 e8                	fld1   
c000a74e:	d8 d9                	fcomp  st(1)
c000a750:	df e0                	fnstsw ax
c000a752:	9e                   	sahf   
c000a753:	76 04                	jbe    c000a759 <sinc_stereo_vari_process+0x97>
c000a755:	de f9                	fdivp  st(1),st
c000a757:	eb 02                	jmp    c000a75b <sinc_stereo_vari_process+0x99>
c000a759:	dd d8                	fstp   st(0)
c000a75b:	83 ec 10             	sub    esp,0x10
c000a75e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a761:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a764:	e8 97 41 01 00       	call   c001e900 <lrint>
c000a769:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a76c:	40                   	inc    eax
c000a76d:	dd 14 24             	fst    QWORD PTR [esp]
c000a770:	0f af c5             	imul   eax,ebp
c000a773:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a777:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a77b:	e8 ef f5 ff ff       	call   c0009d6f <fmod_one>
c000a780:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a783:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a787:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a78a:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a78e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a792:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a796:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a799:	e8 62 41 01 00       	call   c001e900 <lrint>
c000a79e:	0f af e8             	imul   ebp,eax
c000a7a1:	d9 e8                	fld1   
c000a7a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a7a7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a7ab:	01 e8                	add    eax,ebp
c000a7ad:	dc 05 f8 00 02 c0    	fadd   QWORD PTR ds:0xc00200f8
c000a7b3:	99                   	cdq    
c000a7b4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a7b8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a7bb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a7be:	83 c4 10             	add    esp,0x10
c000a7c1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a7c4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a7c7:	7d 4b                	jge    c000a814 <sinc_stereo_vari_process+0x152>
c000a7c9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7cc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7cf:	01 c8                	add    eax,ecx
c000a7d1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7d4:	99                   	cdq    
c000a7d5:	f7 f9                	idiv   ecx
c000a7d7:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a7db:	7d 09                	jge    c000a7e6 <sinc_stereo_vari_process+0x124>
c000a7dd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a7e0:	85 c0                	test   eax,eax
c000a7e2:	79 57                	jns    c000a83b <sinc_stereo_vari_process+0x179>
c000a7e4:	eb 70                	jmp    c000a856 <sinc_stereo_vari_process+0x194>
c000a7e6:	51                   	push   ecx
c000a7e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a7eb:	57                   	push   edi
c000a7ec:	53                   	push   ebx
c000a7ed:	e8 d4 f5 ff ff       	call   c0009dc6 <prepare_data>
c000a7f2:	83 c4 10             	add    esp,0x10
c000a7f5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a7f8:	85 c0                	test   eax,eax
c000a7fa:	0f 85 39 01 00 00    	jne    c000a939 <sinc_stereo_vari_process+0x277>
c000a800:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a803:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a806:	01 c8                	add    eax,ecx
c000a808:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a80b:	99                   	cdq    
c000a80c:	f7 f9                	idiv   ecx
c000a80e:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a812:	7c c9                	jl     c000a7dd <sinc_stereo_vari_process+0x11b>
c000a814:	dd 04 24             	fld    QWORD PTR [esp]
c000a817:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a81a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a81e:	dd 1e                	fstp   QWORD PTR [esi]
c000a820:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a823:	99                   	cdq    
c000a824:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a827:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a82a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a82d:	99                   	cdq    
c000a82e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a831:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a834:	31 c0                	xor    eax,eax
c000a836:	e9 fe 00 00 00       	jmp    c000a939 <sinc_stereo_vari_process+0x277>
c000a83b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a83f:	dd 04 24             	fld    QWORD PTR [esp]
c000a842:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a845:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a849:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a84d:	d9 c9                	fxch   st(1)
c000a84f:	de d9                	fcompp 
c000a851:	df e0                	fnstsw ax
c000a853:	9e                   	sahf   
c000a854:	73 be                	jae    c000a814 <sinc_stereo_vari_process+0x152>
c000a856:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a85a:	7e 31                	jle    c000a88d <sinc_stereo_vari_process+0x1cb>
c000a85c:	83 ec 10             	sub    esp,0x10
c000a85f:	dd 06                	fld    QWORD PTR [esi]
c000a861:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a864:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a867:	e8 74 40 01 00       	call   c001e8e0 <fabs>
c000a86c:	83 c4 10             	add    esp,0x10
c000a86f:	dc 1d b8 87 03 c0    	fcomp  QWORD PTR ds:0xc00387b8
c000a875:	df e0                	fnstsw ax
c000a877:	9e                   	sahf   
c000a878:	76 13                	jbe    c000a88d <sinc_stereo_vari_process+0x1cb>
c000a87a:	dd 06                	fld    QWORD PTR [esi]
c000a87c:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a87f:	d8 e1                	fsub   st,st(1)
c000a881:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a884:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a887:	de c1                	faddp  st(1),st
c000a889:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a88d:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a890:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a894:	d9 e8                	fld1   
c000a896:	d8 d9                	fcomp  st(1)
c000a898:	df e0                	fnstsw ax
c000a89a:	9e                   	sahf   
c000a89b:	77 04                	ja     c000a8a1 <sinc_stereo_vari_process+0x1df>
c000a89d:	dd d8                	fstp   st(0)
c000a89f:	d9 e8                	fld1   
c000a8a1:	de c9                	fmulp  st(1),st
c000a8a3:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a8a7:	50                   	push   eax
c000a8a8:	50                   	push   eax
c000a8a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8b1:	e8 a6 f4 ff ff       	call   c0009d5c <double_to_fp>
c000a8b6:	89 c5                	mov    ebp,eax
c000a8b8:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a8bc:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a8c0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8c3:	e8 94 f4 ff ff       	call   c0009d5c <double_to_fp>
c000a8c8:	83 c4 0c             	add    esp,0xc
c000a8cb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a8ce:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a8d1:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a8d4:	89 c1                	mov    ecx,eax
c000a8d6:	52                   	push   edx
c000a8d7:	89 d8                	mov    eax,ebx
c000a8d9:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a8dd:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a8e0:	52                   	push   edx
c000a8e1:	52                   	push   edx
c000a8e2:	89 ea                	mov    edx,ebp
c000a8e4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8e7:	e8 ce ea ff ff       	call   c00093ba <calc_output_stereo>
c000a8ec:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a8f0:	d9 e8                	fld1   
c000a8f2:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a8f6:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a8fa:	dd 14 24             	fst    QWORD PTR [esp]
c000a8fd:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a901:	e8 69 f4 ff ff       	call   c0009d6f <fmod_one>
c000a906:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a909:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a90d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a910:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a914:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a918:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a91c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a91f:	e8 dc 3f 01 00       	call   c001e900 <lrint>
c000a924:	0f af e8             	imul   ebp,eax
c000a927:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a92b:	01 e8                	add    eax,ebp
c000a92d:	99                   	cdq    
c000a92e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a931:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a934:	e9 85 fe ff ff       	jmp    c000a7be <sinc_stereo_vari_process+0xfc>
c000a939:	83 c4 3c             	add    esp,0x3c
c000a93c:	5b                   	pop    ebx
c000a93d:	5e                   	pop    esi
c000a93e:	5f                   	pop    edi
c000a93f:	5d                   	pop    ebp
c000a940:	c3                   	ret    

c000a941 <sinc_mono_vari_process>:
c000a941:	55                   	push   ebp
c000a942:	b8 05 00 00 00       	mov    eax,0x5
c000a947:	57                   	push   edi
c000a948:	56                   	push   esi
c000a949:	53                   	push   ebx
c000a94a:	83 ec 3c             	sub    esp,0x3c
c000a94d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a951:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a955:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a958:	85 db                	test   ebx,ebx
c000a95a:	0f 84 57 02 00 00    	je     c000abb7 <sinc_mono_vari_process+0x276>
c000a960:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a963:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a966:	0f af d0             	imul   edx,eax
c000a969:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a96c:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a970:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a977:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a97a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a981:	dd 06                	fld    QWORD PTR [esi]
c000a983:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a987:	51                   	push   ecx
c000a988:	51                   	push   ecx
c000a989:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a98c:	e8 d8 e8 ff ff       	call   c0009269 <is_bad_src_ratio>
c000a991:	5d                   	pop    ebp
c000a992:	89 c2                	mov    edx,eax
c000a994:	58                   	pop    eax
c000a995:	85 d2                	test   edx,edx
c000a997:	b8 16 00 00 00       	mov    eax,0x16
c000a99c:	0f 85 15 02 00 00    	jne    c000abb7 <sinc_mono_vari_process+0x276>
c000a9a2:	d9 05 c8 87 03 c0    	fld    DWORD PTR ds:0xc00387c8
c000a9a8:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a9ab:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a9ae:	dd 06                	fld    QWORD PTR [esi]
c000a9b0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a9b3:	d8 d1                	fcom   st(1)
c000a9b5:	df e0                	fnstsw ax
c000a9b7:	9e                   	sahf   
c000a9b8:	76 0f                	jbe    c000a9c9 <sinc_mono_vari_process+0x88>
c000a9ba:	dd d8                	fstp   st(0)
c000a9bc:	d9 e8                	fld1   
c000a9be:	d8 d9                	fcomp  st(1)
c000a9c0:	df e0                	fnstsw ax
c000a9c2:	9e                   	sahf   
c000a9c3:	77 0f                	ja     c000a9d4 <sinc_mono_vari_process+0x93>
c000a9c5:	dd d8                	fstp   st(0)
c000a9c7:	eb 11                	jmp    c000a9da <sinc_mono_vari_process+0x99>
c000a9c9:	dd d9                	fstp   st(1)
c000a9cb:	d9 e8                	fld1   
c000a9cd:	d8 d9                	fcomp  st(1)
c000a9cf:	df e0                	fnstsw ax
c000a9d1:	9e                   	sahf   
c000a9d2:	76 04                	jbe    c000a9d8 <sinc_mono_vari_process+0x97>
c000a9d4:	de f9                	fdivp  st(1),st
c000a9d6:	eb 02                	jmp    c000a9da <sinc_mono_vari_process+0x99>
c000a9d8:	dd d8                	fstp   st(0)
c000a9da:	83 ec 10             	sub    esp,0x10
c000a9dd:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a9e0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a9e3:	e8 18 3f 01 00       	call   c001e900 <lrint>
c000a9e8:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a9eb:	40                   	inc    eax
c000a9ec:	dd 14 24             	fst    QWORD PTR [esp]
c000a9ef:	0f af e8             	imul   ebp,eax
c000a9f2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a9f6:	e8 74 f3 ff ff       	call   c0009d6f <fmod_one>
c000a9fb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a9fe:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aa02:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000aa06:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000aa0a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aa0d:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000aa11:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aa15:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aa18:	e8 e3 3e 01 00       	call   c001e900 <lrint>
c000aa1d:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000aa22:	d9 e8                	fld1   
c000aa24:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000aa28:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000aa2c:	99                   	cdq    
c000aa2d:	dc 05 f8 00 02 c0    	fadd   QWORD PTR ds:0xc00200f8
c000aa33:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000aa36:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000aa3a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000aa3d:	83 c4 10             	add    esp,0x10
c000aa40:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000aa43:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000aa46:	7d 44                	jge    c000aa8c <sinc_mono_vari_process+0x14b>
c000aa48:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000aa4b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000aa4e:	01 c8                	add    eax,ecx
c000aa50:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000aa53:	99                   	cdq    
c000aa54:	f7 f9                	idiv   ecx
c000aa56:	39 d5                	cmp    ebp,edx
c000aa58:	7d 09                	jge    c000aa63 <sinc_mono_vari_process+0x122>
c000aa5a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000aa5d:	85 c0                	test   eax,eax
c000aa5f:	79 52                	jns    c000aab3 <sinc_mono_vari_process+0x172>
c000aa61:	eb 6b                	jmp    c000aace <sinc_mono_vari_process+0x18d>
c000aa63:	52                   	push   edx
c000aa64:	55                   	push   ebp
c000aa65:	57                   	push   edi
c000aa66:	53                   	push   ebx
c000aa67:	e8 5a f3 ff ff       	call   c0009dc6 <prepare_data>
c000aa6c:	83 c4 10             	add    esp,0x10
c000aa6f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000aa72:	85 c0                	test   eax,eax
c000aa74:	0f 85 3d 01 00 00    	jne    c000abb7 <sinc_mono_vari_process+0x276>
c000aa7a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000aa7d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000aa80:	01 c8                	add    eax,ecx
c000aa82:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000aa85:	99                   	cdq    
c000aa86:	f7 f9                	idiv   ecx
c000aa88:	39 d5                	cmp    ebp,edx
c000aa8a:	7c ce                	jl     c000aa5a <sinc_mono_vari_process+0x119>
c000aa8c:	dd 04 24             	fld    QWORD PTR [esp]
c000aa8f:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000aa92:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa96:	dd 1e                	fstp   QWORD PTR [esi]
c000aa98:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000aa9b:	99                   	cdq    
c000aa9c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000aa9f:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000aaa2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000aaa5:	99                   	cdq    
c000aaa6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000aaa9:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aaac:	31 c0                	xor    eax,eax
c000aaae:	e9 04 01 00 00       	jmp    c000abb7 <sinc_mono_vari_process+0x276>
c000aab3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab7:	dd 04 24             	fld    QWORD PTR [esp]
c000aaba:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000aabd:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000aac1:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000aac5:	d9 c9                	fxch   st(1)
c000aac7:	de d9                	fcompp 
c000aac9:	df e0                	fnstsw ax
c000aacb:	9e                   	sahf   
c000aacc:	77 be                	ja     c000aa8c <sinc_mono_vari_process+0x14b>
c000aace:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000aad2:	7e 31                	jle    c000ab05 <sinc_mono_vari_process+0x1c4>
c000aad4:	83 ec 10             	sub    esp,0x10
c000aad7:	dd 06                	fld    QWORD PTR [esi]
c000aad9:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000aadc:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aadf:	e8 fc 3d 01 00       	call   c001e8e0 <fabs>
c000aae4:	83 c4 10             	add    esp,0x10
c000aae7:	dc 1d b8 87 03 c0    	fcomp  QWORD PTR ds:0xc00387b8
c000aaed:	df e0                	fnstsw ax
c000aaef:	9e                   	sahf   
c000aaf0:	76 13                	jbe    c000ab05 <sinc_mono_vari_process+0x1c4>
c000aaf2:	dd 06                	fld    QWORD PTR [esi]
c000aaf4:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000aaf7:	d8 e1                	fsub   st,st(1)
c000aaf9:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000aafc:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000aaff:	de c1                	faddp  st(1),st
c000ab01:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000ab05:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000ab08:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000ab0c:	d9 e8                	fld1   
c000ab0e:	d8 d9                	fcomp  st(1)
c000ab10:	df e0                	fnstsw ax
c000ab12:	9e                   	sahf   
c000ab13:	77 04                	ja     c000ab19 <sinc_mono_vari_process+0x1d8>
c000ab15:	dd d8                	fstp   st(0)
c000ab17:	d9 e8                	fld1   
c000ab19:	de c9                	fmulp  st(1),st
c000ab1b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab1f:	50                   	push   eax
c000ab20:	50                   	push   eax
c000ab21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab29:	e8 2e f2 ff ff       	call   c0009d5c <double_to_fp>
c000ab2e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ab32:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab36:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000ab3a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab3d:	e8 1a f2 ff ff       	call   c0009d5c <double_to_fp>
c000ab42:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ab46:	89 c1                	mov    ecx,eax
c000ab48:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000ab4c:	89 d8                	mov    eax,ebx
c000ab4e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000ab51:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000ab55:	e8 7b e7 ff ff       	call   c00092d5 <calc_output_single>
c000ab5a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab5d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000ab60:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000ab64:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000ab67:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000ab6a:	d9 e8                	fld1   
c000ab6c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000ab70:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000ab74:	dd 14 24             	fst    QWORD PTR [esp]
c000ab77:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000ab7b:	e8 ef f1 ff ff       	call   c0009d6f <fmod_one>
c000ab80:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ab83:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab87:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ab8b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000ab8f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab92:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000ab96:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ab9a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab9d:	e8 5e 3d 01 00       	call   c001e900 <lrint>
c000aba2:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000aba7:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000abab:	99                   	cdq    
c000abac:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000abaf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000abb2:	e9 86 fe ff ff       	jmp    c000aa3d <sinc_mono_vari_process+0xfc>
c000abb7:	83 c4 3c             	add    esp,0x3c
c000abba:	5b                   	pop    ebx
c000abbb:	5e                   	pop    esi
c000abbc:	5f                   	pop    edi
c000abbd:	5d                   	pop    ebp
c000abbe:	c3                   	ret    

c000abbf <sinc_get_name>:
c000abbf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000abc3:	31 c0                	xor    eax,eax
c000abc5:	83 fa 02             	cmp    edx,0x2
c000abc8:	77 07                	ja     c000abd1 <sinc_get_name+0x12>
c000abca:	8b 04 95 60 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfea0]
c000abd1:	c3                   	ret    

c000abd2 <sinc_get_description>:
c000abd2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000abd6:	31 c0                	xor    eax,eax
c000abd8:	83 fa 02             	cmp    edx,0x2
c000abdb:	77 07                	ja     c000abe4 <sinc_get_description+0x12>
c000abdd:	8b 04 95 54 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfeac]
c000abe4:	c3                   	ret    

c000abe5 <sinc_set_converter>:
c000abe5:	55                   	push   ebp
c000abe6:	57                   	push   edi
c000abe7:	56                   	push   esi
c000abe8:	53                   	push   ebx
c000abe9:	81 ec 5c 08 00 00    	sub    esp,0x85c
c000abef:	8b 9c 24 70 08 00 00 	mov    ebx,DWORD PTR [esp+0x870]
c000abf6:	8b ac 24 74 08 00 00 	mov    ebp,DWORD PTR [esp+0x874]
c000abfd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000ac00:	85 c0                	test   eax,eax
c000ac02:	74 13                	je     c000ac17 <sinc_set_converter+0x32>
c000ac04:	83 ec 0c             	sub    esp,0xc
c000ac07:	50                   	push   eax
c000ac08:	e8 92 28 00 00       	call   c000d49f <free>
c000ac0d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	56                   	push   esi
c000ac18:	68 44 08 00 00       	push   0x844
c000ac1d:	6a 00                	push   0x0
c000ac1f:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ac23:	56                   	push   esi
c000ac24:	e8 af 5a ff ff       	call   c00006d8 <memset>
c000ac29:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ac2c:	c7 44 24 1c 50 50 6a 02 	mov    DWORD PTR [esp+0x1c],0x26a5050
c000ac34:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ac38:	b8 0b 00 00 00       	mov    eax,0xb
c000ac3d:	83 c4 10             	add    esp,0x10
c000ac40:	81 fa 80 00 00 00    	cmp    edx,0x80
c000ac46:	0f 8f 58 01 00 00    	jg     c000ada4 <sinc_set_converter+0x1bf>
c000ac4c:	83 fa 01             	cmp    edx,0x1
c000ac4f:	75 10                	jne    c000ac61 <sinc_set_converter+0x7c>
c000ac51:	c7 43 24 41 a9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a941
c000ac58:	c7 43 20 41 a9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a941
c000ac5f:	eb 4d                	jmp    c000acae <sinc_set_converter+0xc9>
c000ac61:	83 fa 02             	cmp    edx,0x2
c000ac64:	75 10                	jne    c000ac76 <sinc_set_converter+0x91>
c000ac66:	c7 43 24 c2 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a6c2
c000ac6d:	c7 43 20 c2 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a6c2
c000ac74:	eb 38                	jmp    c000acae <sinc_set_converter+0xc9>
c000ac76:	83 fa 04             	cmp    edx,0x4
c000ac79:	75 10                	jne    c000ac8b <sinc_set_converter+0xa6>
c000ac7b:	c7 43 24 43 a4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a443
c000ac82:	c7 43 20 43 a4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a443
c000ac89:	eb 23                	jmp    c000acae <sinc_set_converter+0xc9>
c000ac8b:	83 fa 06             	cmp    edx,0x6
c000ac8e:	75 10                	jne    c000aca0 <sinc_set_converter+0xbb>
c000ac90:	c7 43 24 c4 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a1c4
c000ac97:	c7 43 20 c4 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a1c4
c000ac9e:	eb 0e                	jmp    c000acae <sinc_set_converter+0xc9>
c000aca0:	c7 43 24 40 9f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009f40
c000aca7:	c7 43 20 40 9f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009f40
c000acae:	c7 43 28 f9 9c 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009cf9
c000acb5:	83 fd 01             	cmp    ebp,0x1
c000acb8:	74 28                	je     c000ace2 <sinc_set_converter+0xfd>
c000acba:	b8 0a 00 00 00       	mov    eax,0xa
c000acbf:	83 fd 02             	cmp    ebp,0x2
c000acc2:	0f 85 dc 00 00 00    	jne    c000ada4 <sinc_set_converter+0x1bf>
c000acc8:	c7 44 24 3c 24 60 03 c0 	mov    DWORD PTR [esp+0x3c],0xc0036024
c000acd0:	c7 44 24 24 9e 09 00 00 	mov    DWORD PTR [esp+0x24],0x99e
c000acd8:	c7 44 24 28 80 00 00 00 	mov    DWORD PTR [esp+0x28],0x80
c000ace0:	eb 18                	jmp    c000acfa <sinc_set_converter+0x115>
c000ace2:	c7 44 24 3c 84 01 02 c0 	mov    DWORD PTR [esp+0x3c],0xc0020184
c000acea:	c7 44 24 24 a4 57 00 00 	mov    DWORD PTR [esp+0x24],0x57a4
c000acf2:	c7 44 24 28 eb 01 00 00 	mov    DWORD PTR [esp+0x28],0x1eb
c000acfa:	83 ec 10             	sub    esp,0x10
c000acfd:	d9 05 cc 87 03 c0    	fld    DWORD PTR ds:0xc00387cc
c000ad03:	da 4c 24 34          	fimul  DWORD PTR [esp+0x34]
c000ad07:	da 74 24 38          	fidiv  DWORD PTR [esp+0x38]
c000ad0b:	d8 0d d0 87 03 c0    	fmul   DWORD PTR ds:0xc00387d0
c000ad11:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ad14:	e8 e7 3b 01 00       	call   c001e900 <lrint>
c000ad19:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ad1d:	83 c4 10             	add    esp,0x10
c000ad20:	3d 00 10 00 00       	cmp    eax,0x1000
c000ad25:	7d 05                	jge    c000ad2c <sinc_set_converter+0x147>
c000ad27:	b8 00 10 00 00       	mov    eax,0x1000
c000ad2c:	0f af c2             	imul   eax,edx
c000ad2f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ad33:	51                   	push   ecx
c000ad34:	8d 84 02 11 02 00 00 	lea    eax,[edx+eax*1+0x211]
c000ad3b:	51                   	push   ecx
c000ad3c:	c1 e0 02             	shl    eax,0x2
c000ad3f:	50                   	push   eax
c000ad40:	6a 01                	push   0x1
c000ad42:	e8 78 27 00 00       	call   c000d4bf <calloc>
c000ad47:	83 c4 10             	add    esp,0x10
c000ad4a:	89 c5                	mov    ebp,eax
c000ad4c:	b8 01 00 00 00       	mov    eax,0x1
c000ad51:	85 ed                	test   ebp,ebp
c000ad53:	74 4f                	je     c000ada4 <sinc_set_converter+0x1bf>
c000ad55:	b9 11 02 00 00       	mov    ecx,0x211
c000ad5a:	fc                   	cld    
c000ad5b:	89 ef                	mov    edi,ebp
c000ad5d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ad5f:	50                   	push   eax
c000ad60:	68 44 08 00 00       	push   0x844
c000ad65:	68 ee 00 00 00       	push   0xee
c000ad6a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ad6e:	50                   	push   eax
c000ad6f:	e8 64 59 ff ff       	call   c00006d8 <memset>
c000ad74:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c000ad77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ad7a:	e8 7a ef ff ff       	call   c0009cf9 <sinc_reset>
c000ad7f:	bb 01 00 00 00       	mov    ebx,0x1
c000ad84:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	31 c9                	xor    ecx,ecx
c000ad8c:	89 da                	mov    edx,ebx
c000ad8e:	d3 e2                	shl    edx,cl
c000ad90:	39 c2                	cmp    edx,eax
c000ad92:	7d 05                	jge    c000ad99 <sinc_set_converter+0x1b4>
c000ad94:	09 d0                	or     eax,edx
c000ad96:	41                   	inc    ecx
c000ad97:	eb f3                	jmp    c000ad8c <sinc_set_converter+0x1a7>
c000ad99:	31 c0                	xor    eax,eax
c000ad9b:	83 f9 15             	cmp    ecx,0x15
c000ad9e:	0f 9d c0             	setge  al
c000ada1:	8d 04 c0             	lea    eax,[eax+eax*8]
c000ada4:	81 c4 5c 08 00 00    	add    esp,0x85c
c000adaa:	5b                   	pop    ebx
c000adab:	5e                   	pop    esi
c000adac:	5f                   	pop    edi
c000adad:	5d                   	pop    ebp
c000adae:	c3                   	ret    

c000adaf <is_bad_src_ratio>:
c000adaf:	83 ec 0c             	sub    esp,0xc
c000adb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adbd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc1:	dd 04 24             	fld    QWORD PTR [esp]
c000adc4:	dd 05 80 00 02 c0    	fld    QWORD PTR ds:0xc0020080
c000adca:	de d9                	fcompp 
c000adcc:	df e0                	fnstsw ax
c000adce:	f6 c4 45             	test   ah,0x45
c000add1:	74 10                	je     c000ade3 <is_bad_src_ratio+0x34>
c000add3:	dd 04 24             	fld    QWORD PTR [esp]
c000add6:	dc 1d 88 00 02 c0    	fcomp  QWORD PTR ds:0xc0020088
c000addc:	df e0                	fnstsw ax
c000adde:	f6 c4 45             	test   ah,0x45
c000ade1:	75 07                	jne    c000adea <is_bad_src_ratio+0x3b>
c000ade3:	b8 01 00 00 00       	mov    eax,0x1
c000ade8:	eb 05                	jmp    c000adef <is_bad_src_ratio+0x40>
c000adea:	b8 00 00 00 00       	mov    eax,0x0
c000adef:	83 c4 0c             	add    esp,0xc
c000adf2:	c3                   	ret    

c000adf3 <fmod_one>:
c000adf3:	83 ec 2c             	sub    esp,0x2c
c000adf6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adfe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ae02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ae06:	83 ec 08             	sub    esp,0x8
c000ae09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae11:	e8 ea 3a 01 00       	call   c001e900 <lrint>
c000ae16:	83 c4 10             	add    esp,0x10
c000ae19:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ae1d:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000ae21:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000ae25:	de e1                	fsubrp st(1),st
c000ae27:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ae2b:	d9 ee                	fldz   
c000ae2d:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000ae31:	df e0                	fnstsw ax
c000ae33:	f6 c4 45             	test   ah,0x45
c000ae36:	75 0a                	jne    c000ae42 <fmod_one+0x4f>
c000ae38:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ae3c:	d9 e8                	fld1   
c000ae3e:	de c1                	faddp  st(1),st
c000ae40:	eb 04                	jmp    c000ae46 <fmod_one+0x53>
c000ae42:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ae46:	83 c4 2c             	add    esp,0x2c
c000ae49:	c3                   	ret    

c000ae4a <zoh_vari_process>:
c000ae4a:	55                   	push   ebp
c000ae4b:	57                   	push   edi
c000ae4c:	56                   	push   esi
c000ae4d:	53                   	push   ebx
c000ae4e:	83 ec 2c             	sub    esp,0x2c
c000ae51:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000ae55:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ae59:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ae61:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000ae65:	0f 8e 34 02 00 00    	jle    c000b09f <zoh_vari_process+0x255>
c000ae6b:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000ae6e:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000ae76:	85 db                	test   ebx,ebx
c000ae78:	0f 84 21 02 00 00    	je     c000b09f <zoh_vari_process+0x255>
c000ae7e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ae81:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000ae85:	74 19                	je     c000aea0 <zoh_vari_process+0x56>
c000ae87:	31 d2                	xor    edx,edx
c000ae89:	39 c2                	cmp    edx,eax
c000ae8b:	7d 0c                	jge    c000ae99 <zoh_vari_process+0x4f>
c000ae8d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ae8f:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000ae92:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ae96:	42                   	inc    edx
c000ae97:	eb f0                	jmp    c000ae89 <zoh_vari_process+0x3f>
c000ae99:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000aea0:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000aea3:	0f af d0             	imul   edx,eax
c000aea6:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000aea9:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000aead:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000aeb4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aeb7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000aebe:	dd 07                	fld    QWORD PTR [edi]
c000aec0:	dd 14 24             	fst    QWORD PTR [esp]
c000aec3:	50                   	push   eax
c000aec4:	50                   	push   eax
c000aec5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aec8:	e8 e2 fe ff ff       	call   c000adaf <is_bad_src_ratio>
c000aecd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aed1:	5a                   	pop    edx
c000aed2:	59                   	pop    ecx
c000aed3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aed8:	0f 85 b9 01 00 00    	jne    c000b097 <zoh_vari_process+0x24d>
c000aede:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000aee1:	d9 e8                	fld1   
c000aee3:	d8 d1                	fcom   st(1)
c000aee5:	df e0                	fnstsw ax
c000aee7:	9e                   	sahf   
c000aee8:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aeec:	0f 86 85 00 00 00    	jbe    c000af77 <zoh_vari_process+0x12d>
c000aef2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aef5:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aef8:	7d 7d                	jge    c000af77 <zoh_vari_process+0x12d>
c000aefa:	d9 c0                	fld    st(0)
c000aefc:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aeff:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000af02:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000af05:	df e0                	fnstsw ax
c000af07:	9e                   	sahf   
c000af08:	73 6d                	jae    c000af77 <zoh_vari_process+0x12d>
c000af0a:	85 d2                	test   edx,edx
c000af0c:	7e 38                	jle    c000af46 <zoh_vari_process+0xfc>
c000af0e:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000af12:	83 ec 10             	sub    esp,0x10
c000af15:	dd 07                	fld    QWORD PTR [edi]
c000af17:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000af1a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000af1d:	e8 be 39 01 00       	call   c001e8e0 <fabs>
c000af22:	83 c4 10             	add    esp,0x10
c000af25:	dc 1d f8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200f8
c000af2b:	df e0                	fnstsw ax
c000af2d:	9e                   	sahf   
c000af2e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000af32:	76 12                	jbe    c000af46 <zoh_vari_process+0xfc>
c000af34:	dd 07                	fld    QWORD PTR [edi]
c000af36:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000af39:	d8 e1                	fsub   st,st(1)
c000af3b:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000af3e:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000af41:	de c1                	faddp  st(1),st
c000af43:	dd 1c 24             	fstp   QWORD PTR [esp]
c000af46:	31 c0                	xor    eax,eax
c000af48:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000af4b:	7e 13                	jle    c000af60 <zoh_vari_process+0x116>
c000af4d:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000af51:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000af54:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000af57:	40                   	inc    eax
c000af58:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000af5b:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000af5e:	eb e8                	jmp    c000af48 <zoh_vari_process+0xfe>
c000af60:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000af64:	dc 34 24             	fdiv   QWORD PTR [esp]
c000af67:	de c1                	faddp  st(1),st
c000af69:	e9 73 ff ff ff       	jmp    c000aee1 <zoh_vari_process+0x97>
c000af6e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000af72:	dc 34 24             	fdiv   QWORD PTR [esp]
c000af75:	de c1                	faddp  st(1),st
c000af77:	83 ec 10             	sub    esp,0x10
c000af7a:	dd 14 24             	fst    QWORD PTR [esp]
c000af7d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000af81:	e8 6d fe ff ff       	call   c000adf3 <fmod_one>
c000af86:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000af89:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000af8d:	d8 e1                	fsub   st,st(1)
c000af8f:	d9 c9                	fxch   st(1)
c000af91:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000af95:	dd 1c 24             	fstp   QWORD PTR [esp]
c000af98:	e8 63 39 01 00       	call   c001e900 <lrint>
c000af9d:	83 c4 10             	add    esp,0x10
c000afa0:	0f af e8             	imul   ebp,eax
c000afa3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000afa6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000afa9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000afad:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000afb0:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000afb3:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000afb6:	0f 8d 82 00 00 00    	jge    c000b03e <zoh_vari_process+0x1f4>
c000afbc:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000afc0:	d9 c0                	fld    st(0)
c000afc2:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000afc5:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000afc9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000afcd:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000afd1:	de d9                	fcompp 
c000afd3:	df e0                	fnstsw ax
c000afd5:	9e                   	sahf   
c000afd6:	72 66                	jb     c000b03e <zoh_vari_process+0x1f4>
c000afd8:	85 d2                	test   edx,edx
c000afda:	7e 38                	jle    c000b014 <zoh_vari_process+0x1ca>
c000afdc:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000afe0:	83 ec 10             	sub    esp,0x10
c000afe3:	dd 07                	fld    QWORD PTR [edi]
c000afe5:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000afe8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000afeb:	e8 f0 38 01 00       	call   c001e8e0 <fabs>
c000aff0:	83 c4 10             	add    esp,0x10
c000aff3:	dc 1d f8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200f8
c000aff9:	df e0                	fnstsw ax
c000affb:	9e                   	sahf   
c000affc:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000b000:	76 12                	jbe    c000b014 <zoh_vari_process+0x1ca>
c000b002:	dd 07                	fld    QWORD PTR [edi]
c000b004:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000b007:	d8 e1                	fsub   st,st(1)
c000b009:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000b00c:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000b00f:	de c1                	faddp  st(1),st
c000b011:	dd 1c 24             	fstp   QWORD PTR [esp]
c000b014:	31 d2                	xor    edx,edx
c000b016:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b019:	39 d0                	cmp    eax,edx
c000b01b:	0f 8e 4d ff ff ff    	jle    c000af6e <zoh_vari_process+0x124>
c000b021:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000b024:	29 c1                	sub    ecx,eax
c000b026:	89 c8                	mov    eax,ecx
c000b028:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b02a:	01 d0                	add    eax,edx
c000b02c:	42                   	inc    edx
c000b02d:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000b030:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000b033:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000b036:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000b039:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000b03c:	eb d8                	jmp    c000b016 <zoh_vari_process+0x1cc>
c000b03e:	39 e9                	cmp    ecx,ebp
c000b040:	7d 13                	jge    c000b055 <zoh_vari_process+0x20b>
c000b042:	89 e8                	mov    eax,ebp
c000b044:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000b047:	29 c8                	sub    eax,ecx
c000b049:	99                   	cdq    
c000b04a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b04d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b051:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000b055:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000b058:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000b05b:	85 c0                	test   eax,eax
c000b05d:	7f 1b                	jg     c000b07a <zoh_vari_process+0x230>
c000b05f:	dd 04 24             	fld    QWORD PTR [esp]
c000b062:	dd 1f                	fstp   QWORD PTR [edi]
c000b064:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000b067:	99                   	cdq    
c000b068:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b06b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000b06e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b071:	99                   	cdq    
c000b072:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b075:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000b078:	eb 25                	jmp    c000b09f <zoh_vari_process+0x255>
c000b07a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b07d:	31 d2                	xor    edx,edx
c000b07f:	29 e8                	sub    eax,ebp
c000b081:	c1 e0 02             	shl    eax,0x2
c000b084:	39 d5                	cmp    ebp,edx
c000b086:	7e d7                	jle    c000b05f <zoh_vari_process+0x215>
c000b088:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b08a:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000b08d:	83 c0 04             	add    eax,0x4
c000b090:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000b094:	42                   	inc    edx
c000b095:	eb ed                	jmp    c000b084 <zoh_vari_process+0x23a>
c000b097:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000b09f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0a3:	83 c4 2c             	add    esp,0x2c
c000b0a6:	5b                   	pop    ebx
c000b0a7:	5e                   	pop    esi
c000b0a8:	5f                   	pop    edi
c000b0a9:	5d                   	pop    ebp
c000b0aa:	c3                   	ret    

c000b0ab <zoh_reset>:
c000b0ab:	83 ec 0c             	sub    esp,0xc
c000b0ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b0b2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000b0b5:	85 c0                	test   eax,eax
c000b0b7:	74 20                	je     c000b0d9 <zoh_reset+0x2e>
c000b0b9:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000b0bc:	83 c0 1c             	add    eax,0x1c
c000b0bf:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000b0c2:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000b0c9:	c1 e2 02             	shl    edx,0x2
c000b0cc:	51                   	push   ecx
c000b0cd:	52                   	push   edx
c000b0ce:	6a 00                	push   0x0
c000b0d0:	50                   	push   eax
c000b0d1:	e8 02 56 ff ff       	call   c00006d8 <memset>
c000b0d6:	83 c4 10             	add    esp,0x10
c000b0d9:	83 c4 0c             	add    esp,0xc
c000b0dc:	c3                   	ret    

c000b0dd <zoh_get_name>:
c000b0dd:	31 c0                	xor    eax,eax
c000b0df:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000b0e4:	75 05                	jne    c000b0eb <zoh_get_name+0xe>
c000b0e6:	b8 d4 87 03 c0       	mov    eax,0xc00387d4
c000b0eb:	c3                   	ret    

c000b0ec <zoh_get_description>:
c000b0ec:	31 c0                	xor    eax,eax
c000b0ee:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000b0f3:	75 05                	jne    c000b0fa <zoh_get_description+0xe>
c000b0f5:	b8 e5 87 03 c0       	mov    eax,0xc00387e5
c000b0fa:	c3                   	ret    

c000b0fb <zoh_set_converter>:
c000b0fb:	53                   	push   ebx
c000b0fc:	b8 0a 00 00 00       	mov    eax,0xa
c000b101:	83 ec 08             	sub    esp,0x8
c000b104:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b108:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000b10d:	75 6e                	jne    c000b17d <zoh_set_converter+0x82>
c000b10f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000b112:	85 c0                	test   eax,eax
c000b114:	74 13                	je     c000b129 <zoh_set_converter+0x2e>
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	50                   	push   eax
c000b11a:	e8 80 23 00 00       	call   c000d49f <free>
c000b11f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b126:	83 c4 10             	add    esp,0x10
c000b129:	50                   	push   eax
c000b12a:	50                   	push   eax
c000b12b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000b12e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000b135:	50                   	push   eax
c000b136:	6a 01                	push   0x1
c000b138:	e8 82 23 00 00       	call   c000d4bf <calloc>
c000b13d:	83 c4 10             	add    esp,0x10
c000b140:	89 c2                	mov    edx,eax
c000b142:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000b145:	85 d2                	test   edx,edx
c000b147:	b8 01 00 00 00       	mov    eax,0x1
c000b14c:	74 2f                	je     c000b17d <zoh_set_converter+0x82>
c000b14e:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000b154:	83 ec 0c             	sub    esp,0xc
c000b157:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000b15a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b15d:	c7 43 24 4a ae 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ae4a
c000b164:	c7 43 20 4a ae 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ae4a
c000b16b:	c7 43 28 ab b0 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000b0ab
c000b172:	53                   	push   ebx
c000b173:	e8 33 ff ff ff       	call   c000b0ab <zoh_reset>
c000b178:	83 c4 10             	add    esp,0x10
c000b17b:	31 c0                	xor    eax,eax
c000b17d:	83 c4 08             	add    esp,0x8
c000b180:	5b                   	pop    ebx
c000b181:	c3                   	ret    

c000b182 <Computer::close(int, int, void*)>:
c000b182:	57                   	push   edi
c000b183:	56                   	push   esi
c000b184:	53                   	push   ebx
c000b185:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b189:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b18d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b191:	83 ec 0c             	sub    esp,0xc
c000b194:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000b19a:	e8 25 87 00 00       	call   c00138c4 <Device::closeAll()>
c000b19f:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b1a5:	83 c4 10             	add    esp,0x10
c000b1a8:	8b 10                	mov    edx,DWORD PTR [eax]
c000b1aa:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000b1ae:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000b1b6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b1ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1be:	5b                   	pop    ebx
c000b1bf:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000b1c2:	5e                   	pop    esi
c000b1c3:	5f                   	pop    edi
c000b1c4:	ff e0                	jmp    eax

c000b1c6 <Computer::Computer()>:
c000b1c6:	83 ec 0c             	sub    esp,0xc
c000b1c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1cd:	83 ec 08             	sub    esp,0x8
c000b1d0:	68 1c 88 03 c0       	push   0xc003881c
c000b1d5:	50                   	push   eax
c000b1d6:	e8 63 87 00 00       	call   c001393e <Device::Device(char const*)>
c000b1db:	83 c4 10             	add    esp,0x10
c000b1de:	ba 98 88 03 c0       	mov    edx,0xc0038898
c000b1e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1e7:	89 10                	mov    DWORD PTR [eax],edx
c000b1e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1ed:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b1f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1fb:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000b205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b209:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000b20f:	83 ca 04             	or     edx,0x4
c000b212:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000b218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b21c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b222:	0f b6 d0             	movzx  edx,al
c000b225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b229:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000b230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b234:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b23a:	0f b6 d0             	movzx  edx,al
c000b23d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b241:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000b246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b24a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b250:	8d 50 01             	lea    edx,[eax+0x1]
c000b253:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b257:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000b25d:	0f b6 d0             	movzx  edx,al
c000b260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b264:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000b268:	83 e1 3f             	and    ecx,0x3f
c000b26b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000b26f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b273:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b279:	0f b6 d0             	movzx  edx,al
c000b27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b280:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000b287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b28b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b291:	0f b6 d0             	movzx  edx,al
c000b294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b298:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000b29d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b2a7:	8d 50 01             	lea    edx,[eax+0x1]
c000b2aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b2ae:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000b2b4:	0f b6 d0             	movzx  edx,al
c000b2b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2bb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000b2bf:	83 e1 3f             	and    ecx,0x3f
c000b2c2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000b2c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2ca:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b2d0:	0f b6 d0             	movzx  edx,al
c000b2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2d7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000b2de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2e2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b2e8:	0f b6 d0             	movzx  edx,al
c000b2eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2ef:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000b2f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2f8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b2fe:	8d 50 01             	lea    edx,[eax+0x1]
c000b301:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b305:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000b30b:	0f b6 d0             	movzx  edx,al
c000b30e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b312:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000b316:	83 e1 3f             	and    ecx,0x3f
c000b319:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000b31d:	90                   	nop
c000b31e:	83 c4 0c             	add    esp,0xc
c000b321:	c3                   	ret    

c000b322 <Computer::setBootMessage(char const*)>:
c000b322:	c3                   	ret    
c000b323:	90                   	nop

c000b324 <Computer::start()>:
c000b324:	56                   	push   esi
c000b325:	53                   	push   ebx
c000b326:	50                   	push   eax
c000b327:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b32b:	e8 06 30 00 00       	call   c000e336 <lockScheduler()>
c000b330:	e8 35 33 00 00       	call   c000e66a <schedule()>
c000b335:	e8 fe 2f 00 00       	call   c000e338 <unlockScheduler()>
c000b33a:	fb                   	sti    
c000b33b:	83 ec 0c             	sub    esp,0xc
c000b33e:	68 3b 07 00 00       	push   0x73b
c000b343:	e8 fc 70 00 00       	call   c0012444 <operator new(unsigned long)>
c000b348:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b34f:	89 c6                	mov    esi,eax
c000b351:	ff 35 1c bc 03 c0    	push   DWORD PTR ds:0xc003bc1c
c000b357:	68 25 88 03 c0       	push   0xc0038825
c000b35c:	6a 01                	push   0x1
c000b35e:	50                   	push   eax
c000b35f:	e8 32 2e 00 00       	call   c000e196 <Process::Process(bool, char const*, Process*, char**)>
c000b364:	83 c4 20             	add    esp,0x20
c000b367:	68 ff 00 00 00       	push   0xff
c000b36c:	6a 00                	push   0x0
c000b36e:	68 03 c9 00 c0       	push   0xc000c903
c000b373:	56                   	push   esi
c000b374:	e8 e7 30 00 00       	call   c000e460 <Process::createThread(void (*)(void*), void*, int)>
c000b379:	6a 7a                	push   0x7a
c000b37b:	6a 00                	push   0x0
c000b37d:	68 a6 ee 00 c0       	push   0xc000eea6
c000b382:	ff 35 1c bc 03 c0    	push   DWORD PTR ds:0xc003bc1c
c000b388:	e8 d3 30 00 00       	call   c000e460 <Process::createThread(void (*)(void*), void*, int)>
c000b38d:	83 c4 20             	add    esp,0x20
c000b390:	a3 d0 bb 03 c0       	mov    ds:0xc003bbd0,eax
c000b395:	c6 05 cd b9 03 c0 01 	mov    BYTE PTR ds:0xc003b9cd,0x1
c000b39c:	e8 fd 72 00 00       	call   c001269e <initVFS()>
c000b3a1:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b3a7:	8b 10                	mov    edx,DWORD PTR [eax]
c000b3a9:	6a 00                	push   0x0
c000b3ab:	6a 00                	push   0x0
c000b3ad:	6a 00                	push   0x0
c000b3af:	50                   	push   eax
c000b3b0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b3b3:	e8 8b 48 00 00       	call   c000fc43 <setupSystemCalls()>
c000b3b8:	e8 df 7d 00 00       	call   c001319c <loadClockSettings()>
c000b3bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3c0:	e8 d3 84 00 00       	call   c0013898 <Device::loadDriversForAll()>
c000b3c5:	c7 04 24 32 88 03 c0 	mov    DWORD PTR [esp],0xc0038832
c000b3cc:	8b 1d c8 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9c8
c000b3d2:	e8 9e 12 00 00       	call   c000c675 <loadDLL(char const*)>
c000b3d7:	5a                   	pop    edx
c000b3d8:	59                   	pop    ecx
c000b3d9:	53                   	push   ebx
c000b3da:	50                   	push   eax
c000b3db:	e8 5e 13 00 00       	call   c000c73e <executeDLL(unsigned long, void*)>
c000b3e0:	c7 04 24 14 a0 03 c0 	mov    DWORD PTR [esp],0xc003a014
c000b3e7:	e8 a8 1a 00 00       	call   c000ce94 <kprintf(char const*, ...)>
c000b3ec:	83 c4 10             	add    esp,0x10
c000b3ef:	83 ec 0c             	sub    esp,0xc
c000b3f2:	6a 02                	push   0x2
c000b3f4:	e8 3c 35 00 00       	call   c000e935 <blockTask(TaskState)>
c000b3f9:	83 c4 10             	add    esp,0x10
c000b3fc:	eb f1                	jmp    c000b3ef <Computer::start()+0xcb>

c000b3fe <firstTask()>:
c000b3fe:	83 ec 18             	sub    esp,0x18
c000b401:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c000b407:	e8 18 ff ff ff       	call   c000b324 <Computer::start()>

c000b40c <Computer::detectFeatures()>:
c000b40c:	55                   	push   ebp
c000b40d:	57                   	push   edi
c000b40e:	56                   	push   esi
c000b40f:	53                   	push   ebx
c000b410:	83 ec 1c             	sub    esp,0x1c
c000b413:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b417:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000b421:	e8 c6 4e ff ff       	call   c00002ec <detectCPUID>
c000b426:	85 c0                	test   eax,eax
c000b428:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b42e:	0f 95 c2             	setne  dl
c000b431:	83 e0 fd             	and    eax,0xfffffffd
c000b434:	d1 e2                	shl    edx,1
c000b436:	09 d0                	or     eax,edx
c000b438:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b43e:	a8 02                	test   al,0x2
c000b440:	75 46                	jne    c000b488 <Computer::detectFeatures()+0x7c>
c000b442:	f6 05 75 bb 03 c0 04 	test   BYTE PTR ds:0xc003bb75,0x4
c000b449:	74 07                	je     c000b452 <Computer::detectFeatures()+0x46>
c000b44b:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b452:	e8 2f 2f 01 00       	call   c001e386 <x87Detect>
c000b457:	83 e0 01             	and    eax,0x1
c000b45a:	c1 e0 04             	shl    eax,0x4
c000b45d:	88 c2                	mov    dl,al
c000b45f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b465:	83 e0 ef             	and    eax,0xffffffef
c000b468:	09 d0                	or     eax,edx
c000b46a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b470:	a8 10                	test   al,0x10
c000b472:	0f 85 10 01 00 00    	jne    c000b588 <Computer::detectFeatures()+0x17c>
c000b478:	84 c0                	test   al,al
c000b47a:	0f 88 2b 01 00 00    	js     c000b5ab <Computer::detectFeatures()+0x19f>
c000b480:	83 c4 1c             	add    esp,0x1c
c000b483:	5b                   	pop    ebx
c000b484:	5e                   	pop    esi
c000b485:	5f                   	pop    edi
c000b486:	5d                   	pop    ebp
c000b487:	c3                   	ret    
c000b488:	83 ec 0c             	sub    esp,0xc
c000b48b:	6a 20                	push   0x20
c000b48d:	e8 01 bc 00 00       	call   c0017093 <cpuidCheckEDX(unsigned int)>
c000b492:	83 e0 01             	and    eax,0x1
c000b495:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b49c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b4a2:	83 e0 f7             	and    eax,0xfffffff7
c000b4a5:	09 d0                	or     eax,edx
c000b4a7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b4ad:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b4b4:	e8 da bb 00 00       	call   c0017093 <cpuidCheckEDX(unsigned int)>
c000b4b9:	83 e0 01             	and    eax,0x1
c000b4bc:	88 c2                	mov    dl,al
c000b4be:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b4c4:	83 e0 fe             	and    eax,0xfffffffe
c000b4c7:	09 d0                	or     eax,edx
c000b4c9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b4cf:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b4d6:	e8 b8 bb 00 00       	call   c0017093 <cpuidCheckEDX(unsigned int)>
c000b4db:	c1 e0 07             	shl    eax,0x7
c000b4de:	88 c2                	mov    dl,al
c000b4e0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b4e6:	83 e0 7f             	and    eax,0x7f
c000b4e9:	09 d0                	or     eax,edx
c000b4eb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b4f1:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b4f8:	e8 96 bb 00 00       	call   c0017093 <cpuidCheckEDX(unsigned int)>
c000b4fd:	83 c4 10             	add    esp,0x10
c000b500:	83 e0 01             	and    eax,0x1
c000b503:	c1 e0 05             	shl    eax,0x5
c000b506:	88 c2                	mov    dl,al
c000b508:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b50e:	83 e0 df             	and    eax,0xffffffdf
c000b511:	09 d0                	or     eax,edx
c000b513:	f7 05 74 bb 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003bb74,0x401
c000b51d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b523:	0f 84 a8 00 00 00    	je     c000b5d1 <Computer::detectFeatures()+0x1c5>
c000b529:	83 ec 0c             	sub    esp,0xc
c000b52c:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b533:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b537:	50                   	push   eax
c000b538:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b53c:	55                   	push   ebp
c000b53d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b541:	57                   	push   edi
c000b542:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b546:	56                   	push   esi
c000b547:	68 00 00 00 80       	push   0x80000000
c000b54c:	e8 bf ba 00 00       	call   c0017010 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b551:	83 c4 20             	add    esp,0x20
c000b554:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b55b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b55f:	0f 86 dd fe ff ff    	jbe    c000b442 <Computer::detectFeatures()+0x36>
c000b565:	83 ec 0c             	sub    esp,0xc
c000b568:	50                   	push   eax
c000b569:	55                   	push   ebp
c000b56a:	57                   	push   edi
c000b56b:	56                   	push   esi
c000b56c:	68 01 00 00 80       	push   0x80000001
c000b571:	e8 9a ba 00 00       	call   c0017010 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b576:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b580:	83 c4 20             	add    esp,0x20
c000b583:	e9 ba fe ff ff       	jmp    c000b442 <Computer::detectFeatures()+0x36>
c000b588:	e8 b3 2d 01 00       	call   c001e340 <sseDetect>
c000b58d:	88 c2                	mov    dl,al
c000b58f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b595:	c1 e2 07             	shl    edx,0x7
c000b598:	83 e0 7f             	and    eax,0x7f
c000b59b:	09 d0                	or     eax,edx
c000b59d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b5a3:	84 c0                	test   al,al
c000b5a5:	0f 89 d5 fe ff ff    	jns    c000b480 <Computer::detectFeatures()+0x74>
c000b5ab:	e8 80 2d 01 00       	call   c001e330 <avxDetect>
c000b5b0:	83 e0 01             	and    eax,0x1
c000b5b3:	c1 e0 05             	shl    eax,0x5
c000b5b6:	88 c2                	mov    dl,al
c000b5b8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b5be:	83 e0 df             	and    eax,0xffffffdf
c000b5c1:	09 d0                	or     eax,edx
c000b5c3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b5c9:	83 c4 1c             	add    esp,0x1c
c000b5cc:	5b                   	pop    ebx
c000b5cd:	5e                   	pop    esi
c000b5ce:	5f                   	pop    edi
c000b5cf:	5d                   	pop    ebp
c000b5d0:	c3                   	ret    
c000b5d1:	83 ec 0c             	sub    esp,0xc
c000b5d4:	68 00 02 00 00       	push   0x200
c000b5d9:	e8 b5 ba 00 00       	call   c0017093 <cpuidCheckEDX(unsigned int)>
c000b5de:	83 c4 10             	add    esp,0x10
c000b5e1:	e9 43 ff ff ff       	jmp    c000b529 <Computer::detectFeatures()+0x11d>

c000b5e6 <Computer::displayFeatures()>:
c000b5e6:	c3                   	ret    
c000b5e7:	90                   	nop

c000b5e8 <Computer::rdmsr(unsigned int)>:
c000b5e8:	83 ec 0c             	sub    esp,0xc
c000b5eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5ef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5f6:	74 0a                	je     c000b602 <Computer::rdmsr(unsigned int)+0x1a>
c000b5f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5fc:	0f 32                	rdmsr  
c000b5fe:	83 c4 0c             	add    esp,0xc
c000b601:	c3                   	ret    
c000b602:	83 ec 0c             	sub    esp,0xc
c000b605:	68 4e 88 03 c0       	push   0xc003884e
c000b60a:	e8 a3 19 00 00       	call   c000cfb2 <panic(char const*)>
c000b60f:	83 c4 10             	add    esp,0x10
c000b612:	eb e4                	jmp    c000b5f8 <Computer::rdmsr(unsigned int)+0x10>

c000b614 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b614:	57                   	push   edi
c000b615:	56                   	push   esi
c000b616:	52                   	push   edx
c000b617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b61b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b61f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b623:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b62a:	74 0e                	je     c000b63a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b62c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b630:	89 f0                	mov    eax,esi
c000b632:	89 fa                	mov    edx,edi
c000b634:	0f 30                	wrmsr  
c000b636:	58                   	pop    eax
c000b637:	5e                   	pop    esi
c000b638:	5f                   	pop    edi
c000b639:	c3                   	ret    
c000b63a:	83 ec 0c             	sub    esp,0xc
c000b63d:	68 54 88 03 c0       	push   0xc0038854
c000b642:	e8 6b 19 00 00       	call   c000cfb2 <panic(char const*)>
c000b647:	83 c4 10             	add    esp,0x10
c000b64a:	eb e0                	jmp    c000b62c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b64c <Computer::nmiEnabled()>:
c000b64c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b650:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b656:	c3                   	ret    
c000b657:	90                   	nop

c000b658 <Computer::readCMOS(unsigned char)>:
c000b658:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b663:	19 c0                	sbb    eax,eax
c000b665:	83 e0 80             	and    eax,0xffffff80
c000b668:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b66c:	e6 70                	out    0x70,al
c000b66e:	e4 71                	in     al,0x71
c000b670:	c3                   	ret    
c000b671:	90                   	nop

c000b672 <Computer::enableNMI(bool)>:
c000b672:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b67a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b680:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b688:	eb ce                	jmp    c000b658 <Computer::readCMOS(unsigned char)>

c000b68a <Computer::open(int, int, void*)>:
c000b68a:	56                   	push   esi
c000b68b:	53                   	push   ebx
c000b68c:	83 ec 10             	sub    esp,0x10
c000b68f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b693:	f6 05 74 bb 03 c0 04 	test   BYTE PTR ds:0xc003bb74,0x4
c000b69a:	68 68 22 00 00       	push   0x2268
c000b69f:	0f 94 05 00 ae 03 c0 	sete   BYTE PTR ds:0xc003ae00
c000b6a6:	e8 99 6d 00 00       	call   c0012444 <operator new(unsigned long)>
c000b6ab:	89 04 24             	mov    DWORD PTR [esp],eax
c000b6ae:	89 c6                	mov    esi,eax
c000b6b0:	e8 cd b0 00 00       	call   c0016782 <ACPI::ACPI()>
c000b6b5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b6bb:	58                   	pop    eax
c000b6bc:	5a                   	pop    edx
c000b6bd:	56                   	push   esi
c000b6be:	53                   	push   ebx
c000b6bf:	e8 8a 80 00 00       	call   c001374e <Device::addChild(Device*)>
c000b6c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b6c7:	e8 40 fd ff ff       	call   c000b40c <Computer::detectFeatures()>
c000b6cc:	59                   	pop    ecx
c000b6cd:	5e                   	pop    esi
c000b6ce:	6a 01                	push   0x1
c000b6d0:	53                   	push   ebx
c000b6d1:	e8 9c ff ff ff       	call   c000b672 <Computer::enableNMI(bool)>
c000b6d6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b6dd:	e8 62 6d 00 00       	call   c0012444 <operator new(unsigned long)>
c000b6e2:	89 04 24             	mov    DWORD PTR [esp],eax
c000b6e5:	89 c6                	mov    esi,eax
c000b6e7:	e8 72 ba 00 00       	call   c001715e <CPU::CPU()>
c000b6ec:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b6f2:	58                   	pop    eax
c000b6f3:	5a                   	pop    edx
c000b6f4:	56                   	push   esi
c000b6f5:	53                   	push   ebx
c000b6f6:	e8 53 80 00 00       	call   c001374e <Device::addChild(Device*)>
c000b6fb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b701:	8b 10                	mov    edx,DWORD PTR [eax]
c000b703:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b707:	6a 00                	push   0x0
c000b709:	6a 00                	push   0x0
c000b70b:	50                   	push   eax
c000b70c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b70f:	83 c4 20             	add    esp,0x20
c000b712:	e8 9f 85 00 00       	call   c0013cb6 <setupFPU()>
c000b717:	83 ec 08             	sub    esp,0x8
c000b71a:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b720:	50                   	push   eax
c000b721:	53                   	push   ebx
c000b722:	e8 27 80 00 00       	call   c001374e <Device::addChild(Device*)>
c000b727:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b72d:	8b 10                	mov    edx,DWORD PTR [eax]
c000b72f:	6a 00                	push   0x0
c000b731:	6a 00                	push   0x0
c000b733:	6a 00                	push   0x0
c000b735:	50                   	push   eax
c000b736:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b739:	83 c4 14             	add    esp,0x14
c000b73c:	68 fe b3 00 c0       	push   0xc000b3fe
c000b741:	e8 1a 2e 00 00       	call   c000e560 <setupMultitasking(void (*)())>
c000b746:	83 c4 14             	add    esp,0x14
c000b749:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b74e:	5b                   	pop    ebx
c000b74f:	5e                   	pop    esi
c000b750:	c3                   	ret    
c000b751:	90                   	nop

c000b752 <Computer::disableNMI()>:
c000b752:	6a 00                	push   0x0
c000b754:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b758:	e8 15 ff ff ff       	call   c000b672 <Computer::enableNMI(bool)>
c000b75d:	58                   	pop    eax
c000b75e:	5a                   	pop    edx
c000b75f:	c3                   	ret    

c000b760 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b760:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b764:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b76b:	19 c0                	sbb    eax,eax
c000b76d:	83 e0 80             	and    eax,0xffffff80
c000b770:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b774:	e6 70                	out    0x70,al
c000b776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b77a:	e6 71                	out    0x71,al
c000b77c:	c3                   	ret    
c000b77d:	90                   	nop

c000b77e <Computer::handleNMI()>:
c000b77e:	56                   	push   esi
c000b77f:	53                   	push   ebx
c000b780:	83 ec 10             	sub    esp,0x10
c000b783:	e4 92                	in     al,0x92
c000b785:	89 c6                	mov    esi,eax
c000b787:	e4 61                	in     al,0x61
c000b789:	68 5a 88 03 c0       	push   0xc003885a
c000b78e:	88 c3                	mov    bl,al
c000b790:	e8 ff 16 00 00       	call   c000ce94 <kprintf(char const*, ...)>
c000b795:	83 c4 10             	add    esp,0x10
c000b798:	83 e6 10             	and    esi,0x10
c000b79b:	75 0d                	jne    c000b7aa <Computer::handleNMI()+0x2c>
c000b79d:	f6 c3 40             	test   bl,0x40
c000b7a0:	75 1d                	jne    c000b7bf <Computer::handleNMI()+0x41>
c000b7a2:	84 db                	test   bl,bl
c000b7a4:	78 2d                	js     c000b7d3 <Computer::handleNMI()+0x55>
c000b7a6:	58                   	pop    eax
c000b7a7:	5b                   	pop    ebx
c000b7a8:	5e                   	pop    esi
c000b7a9:	c3                   	ret    
c000b7aa:	83 ec 0c             	sub    esp,0xc
c000b7ad:	68 6b 88 03 c0       	push   0xc003886b
c000b7b2:	e8 fb 17 00 00       	call   c000cfb2 <panic(char const*)>
c000b7b7:	83 c4 10             	add    esp,0x10
c000b7ba:	f6 c3 40             	test   bl,0x40
c000b7bd:	74 e3                	je     c000b7a2 <Computer::handleNMI()+0x24>
c000b7bf:	83 ec 0c             	sub    esp,0xc
c000b7c2:	68 78 88 03 c0       	push   0xc0038878
c000b7c7:	e8 e6 17 00 00       	call   c000cfb2 <panic(char const*)>
c000b7cc:	83 c4 10             	add    esp,0x10
c000b7cf:	84 db                	test   bl,bl
c000b7d1:	79 d3                	jns    c000b7a6 <Computer::handleNMI()+0x28>
c000b7d3:	c7 44 24 10 82 88 03 c0 	mov    DWORD PTR [esp+0x10],0xc0038882
c000b7db:	5a                   	pop    edx
c000b7dc:	5b                   	pop    ebx
c000b7dd:	5e                   	pop    esi
c000b7de:	e9 cf 17 00 00       	jmp    c000cfb2 <panic(char const*)>
c000b7e3:	90                   	nop

c000b7e4 <Computer::setDiskActivityLight(int, bool)>:
c000b7e4:	56                   	push   esi
c000b7e5:	53                   	push   ebx
c000b7e6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b7ea:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b7ef:	77 1b                	ja     c000b80c <Computer::setDiskActivityLight(int, bool)+0x28>
c000b7f1:	e4 92                	in     al,0x92
c000b7f3:	bb 40 00 00 00       	mov    ebx,0x40
c000b7f8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b7fc:	89 da                	mov    edx,ebx
c000b7fe:	d3 e2                	shl    edx,cl
c000b800:	89 f1                	mov    ecx,esi
c000b802:	f7 d2                	not    edx
c000b804:	d3 e3                	shl    ebx,cl
c000b806:	21 d0                	and    eax,edx
c000b808:	09 d8                	or     eax,ebx
c000b80a:	e6 92                	out    0x92,al
c000b80c:	5b                   	pop    ebx
c000b80d:	5e                   	pop    esi
c000b80e:	c3                   	ret    

c000b80f <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c000b80f:	55                   	push   ebp
c000b810:	89 e5                	mov    ebp,esp
c000b812:	57                   	push   edi
c000b813:	56                   	push   esi
c000b814:	53                   	push   ebx
c000b815:	81 ec 2c 10 00 00    	sub    esp,0x102c
c000b81b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c000b81e:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c000b821:	85 c0                	test   eax,eax
c000b823:	0f 95 c1             	setne  cl
c000b826:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000b82a:	0f 94 c2             	sete   dl
c000b82d:	84 d1                	test   cl,dl
c000b82f:	74 26                	je     c000b857 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c000b831:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c000b838:	74 1d                	je     c000b857 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c000b83a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c000b83d:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c000b843:	89 d6                	mov    esi,edx
c000b845:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b84b:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c000b851:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c000b854:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c000b857:	83 ec 0c             	sub    esp,0xc
c000b85a:	05 ff 0f 00 00       	add    eax,0xfff
c000b85f:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000b862:	6a 01                	push   0x1
c000b864:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c000b86a:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c000b870:	e8 3e 5a 00 00       	call   c00112b3 <Virt::allocateKernelVirtualPages(int)>
c000b875:	83 c4 10             	add    esp,0x10
c000b878:	89 c6                	mov    esi,eax
c000b87a:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c000b880:	0f 86 21 01 00 00    	jbe    c000b9a7 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c000b886:	c1 eb 0c             	shr    ebx,0xc
c000b889:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c000b893:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c000b899:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000b89c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000b89f:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c000b8a5:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c000b8a8:	29 d8                	sub    eax,ebx
c000b8aa:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c000b8b0:	0f 83 f4 00 00 00    	jae    c000b9aa <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c000b8b6:	83 ec 0c             	sub    esp,0xc
c000b8b9:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c000b8bf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000b8c2:	3d 00 10 00 00       	cmp    eax,0x1000
c000b8c7:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000b8c9:	52                   	push   edx
c000b8ca:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c000b8d0:	52                   	push   edx
c000b8d1:	76 05                	jbe    c000b8d8 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c000b8d3:	b8 00 10 00 00       	mov    eax,0x1000
c000b8d8:	31 d2                	xor    edx,edx
c000b8da:	52                   	push   edx
c000b8db:	50                   	push   eax
c000b8dc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000b8df:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b8e2:	83 c4 20             	add    esp,0x20
c000b8e5:	85 c0                	test   eax,eax
c000b8e7:	74 1f                	je     c000b908 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c000b8e9:	51                   	push   ecx
c000b8ea:	51                   	push   ecx
c000b8eb:	50                   	push   eax
c000b8ec:	68 bc 88 03 c0       	push   0xc00388bc
c000b8f1:	e8 9e 15 00 00       	call   c000ce94 <kprintf(char const*, ...)>
c000b8f6:	89 34 24             	mov    DWORD PTR [esp],esi
c000b8f9:	e8 eb 5c 00 00       	call   c00115e9 <Virt::freeKernelVirtualPages(unsigned long)>
c000b8fe:	83 c4 10             	add    esp,0x10
c000b901:	31 c0                	xor    eax,eax
c000b903:	e9 7c 01 00 00       	jmp    c000ba84 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c000b908:	e8 29 2a 00 00       	call   c000e336 <lockScheduler()>
c000b90d:	e8 27 21 00 00       	call   c000da39 <Phys::allocatePage()>
c000b912:	6a 07                	push   0x7
c000b914:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c000b91a:	56                   	push   esi
c000b91b:	50                   	push   eax
c000b91c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b922:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c000b925:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c000b92b:	e8 ba 5f 00 00       	call   c00118ea <VAS::mapPage(unsigned long, unsigned long, int)>
c000b930:	83 c4 0c             	add    esp,0xc
c000b933:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b939:	6a 00                	push   0x0
c000b93b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b941:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c000b944:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c000b94a:	e8 f9 5d 00 00       	call   c0011748 <VAS::mapOtherVASIn(bool, VAS*)>
c000b94f:	58                   	pop    eax
c000b950:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c000b956:	5a                   	pop    edx
c000b957:	68 07 04 00 00       	push   0x407
c000b95c:	53                   	push   ebx
c000b95d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000b963:	50                   	push   eax
c000b964:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b96a:	6a 00                	push   0x0
c000b96c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b971:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b974:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b97a:	e8 6b 66 00 00       	call   c0011fea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c000b97f:	83 c4 1c             	add    esp,0x1c
c000b982:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c000b988:	68 00 10 00 00       	push   0x1000
c000b98d:	50                   	push   eax
c000b98e:	56                   	push   esi
c000b98f:	e8 cd 4c ff ff       	call   c0000661 <memcpy>
c000b994:	e8 9f 29 00 00       	call   c000e338 <unlockScheduler()>
c000b999:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c000b99f:	83 c4 10             	add    esp,0x10
c000b9a2:	e9 f5 fe ff ff       	jmp    c000b89c <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c000b9a7:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000b9aa:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c000b9b4:	0f 86 bc 00 00 00    	jbe    c000ba76 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c000b9ba:	e8 77 29 00 00       	call   c000e336 <lockScheduler()>
c000b9bf:	51                   	push   ecx
c000b9c0:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b9c6:	6a 00                	push   0x0
c000b9c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b9cd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b9d0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b9d6:	e8 6d 5d 00 00       	call   c0011748 <VAS::mapOtherVASIn(bool, VAS*)>
c000b9db:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c000b9e1:	83 c4 10             	add    esp,0x10
c000b9e4:	c1 e8 0c             	shr    eax,0xc
c000b9e7:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c000b9f1:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c000b9f7:	e8 3d 20 00 00       	call   c000da39 <Phys::allocatePage()>
c000b9fc:	6a 07                	push   0x7
c000b9fe:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c000ba04:	56                   	push   esi
c000ba05:	50                   	push   eax
c000ba06:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000ba0c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000ba0f:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c000ba15:	e8 d0 5e 00 00       	call   c00118ea <VAS::mapPage(unsigned long, unsigned long, int)>
c000ba1a:	58                   	pop    eax
c000ba1b:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c000ba21:	5a                   	pop    edx
c000ba22:	68 07 04 00 00       	push   0x407
c000ba27:	53                   	push   ebx
c000ba28:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ba2e:	50                   	push   eax
c000ba2f:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000ba35:	6a 00                	push   0x0
c000ba37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ba3c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ba3f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ba45:	e8 a0 65 00 00       	call   c0011fea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c000ba4a:	83 c4 1c             	add    esp,0x1c
c000ba4d:	68 00 10 00 00       	push   0x1000
c000ba52:	6a 00                	push   0x0
c000ba54:	56                   	push   esi
c000ba55:	e8 7e 4c ff ff       	call   c00006d8 <memset>
c000ba5a:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c000ba60:	83 c4 10             	add    esp,0x10
c000ba63:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c000ba69:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c000ba6f:	77 86                	ja     c000b9f7 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c000ba71:	e8 c2 28 00 00       	call   c000e338 <unlockScheduler()>
c000ba76:	83 ec 0c             	sub    esp,0xc
c000ba79:	56                   	push   esi
c000ba7a:	e8 6a 5b 00 00       	call   c00115e9 <Virt::freeKernelVirtualPages(unsigned long)>
c000ba7f:	83 c4 10             	add    esp,0x10
c000ba82:	b0 01                	mov    al,0x1
c000ba84:	8d 65 f4             	lea    esp,[ebp-0xc]
c000ba87:	5b                   	pop    ebx
c000ba88:	5e                   	pop    esi
c000ba89:	5f                   	pop    edi
c000ba8a:	5d                   	pop    ebp
c000ba8b:	c3                   	ret    

c000ba8c <loadProgramIntoMemory(Process*, char const*)>:
c000ba8c:	55                   	push   ebp
c000ba8d:	57                   	push   edi
c000ba8e:	56                   	push   esi
c000ba8f:	53                   	push   ebx
c000ba90:	83 ec 48             	sub    esp,0x48
c000ba93:	68 14 01 00 00       	push   0x114
c000ba98:	e8 a7 69 00 00       	call   c0012444 <operator new(unsigned long)>
c000ba9d:	83 c4 0c             	add    esp,0xc
c000baa0:	89 c6                	mov    esi,eax
c000baa2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000baa6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000baaa:	50                   	push   eax
c000baab:	e8 c2 6d 00 00       	call   c0012872 <File::File(char const*, Process*)>
c000bab0:	58                   	pop    eax
c000bab1:	5a                   	pop    edx
c000bab2:	6a 01                	push   0x1
c000bab4:	56                   	push   esi
c000bab5:	e8 1c 6e 00 00       	call   c00128d6 <File::open(FileOpenMode)>
c000baba:	83 c4 10             	add    esp,0x10
c000babd:	85 c0                	test   eax,eax
c000babf:	0f 85 47 01 00 00    	jne    c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bac5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	6a 34                	push   0x34
c000bad2:	e8 b8 19 00 00       	call   c000d48f <malloc>
c000bad7:	89 c3                	mov    ebx,eax
c000bad9:	58                   	pop    eax
c000bada:	8b 06                	mov    eax,DWORD PTR [esi]
c000badc:	8d 7c 24 38          	lea    edi,[esp+0x38]
c000bae0:	57                   	push   edi
c000bae1:	53                   	push   ebx
c000bae2:	6a 00                	push   0x0
c000bae4:	6a 34                	push   0x34
c000bae6:	56                   	push   esi
c000bae7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000baea:	83 c4 20             	add    esp,0x20
c000baed:	85 c0                	test   eax,eax
c000baef:	0f 85 17 01 00 00    	jne    c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000baf5:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c000bafb:	0f 85 0b 01 00 00    	jne    c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb01:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000bb04:	85 c0                	test   eax,eax
c000bb06:	0f 84 00 01 00 00    	je     c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb0c:	31 d2                	xor    edx,edx
c000bb0e:	55                   	push   ebp
c000bb0f:	52                   	push   edx
c000bb10:	50                   	push   eax
c000bb11:	56                   	push   esi
c000bb12:	e8 7d 6e 00 00       	call   c0012994 <File::seek(unsigned long long)>
c000bb17:	83 c4 10             	add    esp,0x10
c000bb1a:	85 c0                	test   eax,eax
c000bb1c:	0f 85 ea 00 00 00    	jne    c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb22:	83 ec 0c             	sub    esp,0xc
c000bb25:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000bb28:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c000bb2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bb30:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c000bb34:	0f af c2             	imul   eax,edx
c000bb37:	50                   	push   eax
c000bb38:	e8 52 19 00 00       	call   c000d48f <malloc>
c000bb3d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bb40:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb44:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000bb46:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bb4a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c000bb4e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c000bb52:	0f af c2             	imul   eax,edx
c000bb55:	99                   	cdq    
c000bb56:	52                   	push   edx
c000bb57:	50                   	push   eax
c000bb58:	56                   	push   esi
c000bb59:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bb5c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000bb5f:	83 c4 20             	add    esp,0x20
c000bb62:	85 c0                	test   eax,eax
c000bb64:	0f 84 a2 00 00 00    	je     c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb6a:	31 d2                	xor    edx,edx
c000bb6c:	51                   	push   ecx
c000bb6d:	52                   	push   edx
c000bb6e:	50                   	push   eax
c000bb6f:	56                   	push   esi
c000bb70:	e8 1f 6e 00 00       	call   c0012994 <File::seek(unsigned long long)>
c000bb75:	83 c4 10             	add    esp,0x10
c000bb78:	85 c0                	test   eax,eax
c000bb7a:	0f 85 8c 00 00 00    	jne    c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb80:	83 ec 0c             	sub    esp,0xc
c000bb83:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c000bb87:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c000bb8b:	31 ed                	xor    ebp,ebp
c000bb8d:	0f af c2             	imul   eax,edx
c000bb90:	50                   	push   eax
c000bb91:	e8 f9 18 00 00       	call   c000d48f <malloc>
c000bb96:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bb99:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb9d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000bb9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba3:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c000bba7:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c000bbab:	0f af c2             	imul   eax,edx
c000bbae:	99                   	cdq    
c000bbaf:	52                   	push   edx
c000bbb0:	50                   	push   eax
c000bbb1:	56                   	push   esi
c000bbb2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bbb5:	83 c4 20             	add    esp,0x20
c000bbb8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000bbc0:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c000bbc4:	0f 86 80 00 00 00    	jbe    c000bc4a <loadProgramIntoMemory(Process*, char const*)+0x1be>
c000bbca:	0f b7 fd             	movzx  edi,bp
c000bbcd:	c1 e7 05             	shl    edi,0x5
c000bbd0:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c000bbd4:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c000bbd7:	75 6b                	jne    c000bc44 <loadProgramIntoMemory(Process*, char const*)+0x1b8>
c000bbd9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000bbdc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bbe0:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000bbe3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbe7:	52                   	push   edx
c000bbe8:	31 d2                	xor    edx,edx
c000bbea:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bbed:	52                   	push   edx
c000bbee:	50                   	push   eax
c000bbef:	56                   	push   esi
c000bbf0:	e8 9f 6d 00 00       	call   c0012994 <File::seek(unsigned long long)>
c000bbf5:	83 c4 10             	add    esp,0x10
c000bbf8:	85 c0                	test   eax,eax
c000bbfa:	74 17                	je     c000bc13 <loadProgramIntoMemory(Process*, char const*)+0x187>
c000bbfc:	83 ec 0c             	sub    esp,0xc
c000bbff:	68 e7 88 03 c0       	push   0xc00388e7
c000bc04:	e8 8b 12 00 00       	call   c000ce94 <kprintf(char const*, ...)>
c000bc09:	83 c4 10             	add    esp,0x10
c000bc0c:	31 c0                	xor    eax,eax
c000bc0e:	e9 87 00 00 00       	jmp    c000bc9a <loadProgramIntoMemory(Process*, char const*)+0x20e>
c000bc13:	83 ec 0c             	sub    esp,0xc
c000bc16:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c000bc19:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c000bc1c:	50                   	push   eax
c000bc1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc25:	56                   	push   esi
c000bc26:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000bc2a:	e8 e0 fb ff ff       	call   c000b80f <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c000bc2f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bc33:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c000bc37:	83 c4 20             	add    esp,0x20
c000bc3a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c000bc3e:	73 04                	jae    c000bc44 <loadProgramIntoMemory(Process*, char const*)+0x1b8>
c000bc40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc44:	45                   	inc    ebp
c000bc45:	e9 76 ff ff ff       	jmp    c000bbc0 <loadProgramIntoMemory(Process*, char const*)+0x134>
c000bc4a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000bc4e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bc52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bc56:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c000bc5c:	83 ec 0c             	sub    esp,0xc
c000bc5f:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c000bc65:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bc6a:	05 00 10 00 00       	add    eax,0x1000
c000bc6f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000bc72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc76:	e8 24 18 00 00       	call   c000d49f <free>
c000bc7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bc7e:	e8 1c 18 00 00       	call   c000d49f <free>
c000bc83:	58                   	pop    eax
c000bc84:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc88:	e8 12 18 00 00       	call   c000d49f <free>
c000bc8d:	89 34 24             	mov    DWORD PTR [esp],esi
c000bc90:	e8 9f 6c 00 00       	call   c0012934 <File::close()>
c000bc95:	83 c4 10             	add    esp,0x10
c000bc98:	b0 01                	mov    al,0x1
c000bc9a:	83 c4 3c             	add    esp,0x3c
c000bc9d:	5b                   	pop    ebx
c000bc9e:	5e                   	pop    esi
c000bc9f:	5f                   	pop    edi
c000bca0:	5d                   	pop    ebp
c000bca1:	c3                   	ret    

c000bca2 <runtimeReferenceHelper()>:
c000bca2:	83 ec 18             	sub    esp,0x18
c000bca5:	68 ef 88 03 c0       	push   0xc00388ef
c000bcaa:	e8 e5 11 00 00       	call   c000ce94 <kprintf(char const*, ...)>
c000bcaf:	fa                   	cli    
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	eb fe                	jmp    c000bcb3 <runtimeReferenceHelper()+0x11>

c000bcb5 <getAddressOfKernelSymbol(char const*)>:
c000bcb5:	57                   	push   edi
c000bcb6:	56                   	push   esi
c000bcb7:	53                   	push   ebx
c000bcb8:	31 db                	xor    ebx,ebx
c000bcba:	39 1d 60 bb 03 c0    	cmp    DWORD PTR ds:0xc003bb60,ebx
c000bcc0:	7e 3c                	jle    c000bcfe <getAddressOfKernelSymbol(char const*)+0x49>
c000bcc2:	8b 34 9d e0 ba 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffc4520]
c000bcc9:	31 ff                	xor    edi,edi
c000bccb:	39 3c 9d e0 b9 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffc4620],edi
c000bcd2:	7e 27                	jle    c000bcfb <getAddressOfKernelSymbol(char const*)+0x46>
c000bcd4:	50                   	push   eax
c000bcd5:	50                   	push   eax
c000bcd6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bcda:	8b 06                	mov    eax,DWORD PTR [esi]
c000bcdc:	03 04 9d 60 ba 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffc45a0]
c000bce3:	50                   	push   eax
c000bce4:	e8 91 4b ff ff       	call   c000087a <strcmp>
c000bce9:	83 c4 10             	add    esp,0x10
c000bcec:	85 c0                	test   eax,eax
c000bcee:	75 05                	jne    c000bcf5 <getAddressOfKernelSymbol(char const*)+0x40>
c000bcf0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000bcf3:	eb 0b                	jmp    c000bd00 <getAddressOfKernelSymbol(char const*)+0x4b>
c000bcf5:	83 c6 10             	add    esi,0x10
c000bcf8:	47                   	inc    edi
c000bcf9:	eb d0                	jmp    c000bccb <getAddressOfKernelSymbol(char const*)+0x16>
c000bcfb:	43                   	inc    ebx
c000bcfc:	eb bc                	jmp    c000bcba <getAddressOfKernelSymbol(char const*)+0x5>
c000bcfe:	31 c0                	xor    eax,eax
c000bd00:	5b                   	pop    ebx
c000bd01:	5e                   	pop    esi
c000bd02:	5f                   	pop    edi
c000bd03:	c3                   	ret    

c000bd04 <loadKernelSymbolTable(char const*)>:
c000bd04:	55                   	push   ebp
c000bd05:	57                   	push   edi
c000bd06:	56                   	push   esi
c000bd07:	53                   	push   ebx
c000bd08:	83 ec 68             	sub    esp,0x68
c000bd0b:	8b 35 1c bc 03 c0    	mov    esi,DWORD PTR ds:0xc003bc1c
c000bd11:	68 14 01 00 00       	push   0x114
c000bd16:	e8 29 67 00 00       	call   c0012444 <operator new(unsigned long)>
c000bd1b:	83 c4 0c             	add    esp,0xc
c000bd1e:	89 c3                	mov    ebx,eax
c000bd20:	56                   	push   esi
c000bd21:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c000bd25:	50                   	push   eax
c000bd26:	e8 47 6b 00 00       	call   c0012872 <File::File(char const*, Process*)>
c000bd2b:	5e                   	pop    esi
c000bd2c:	5f                   	pop    edi
c000bd2d:	6a 01                	push   0x1
c000bd2f:	53                   	push   ebx
c000bd30:	e8 a1 6b 00 00       	call   c00128d6 <File::open(FileOpenMode)>
c000bd35:	83 c4 10             	add    esp,0x10
c000bd38:	31 d2                	xor    edx,edx
c000bd3a:	85 c0                	test   eax,eax
c000bd3c:	0f 85 79 02 00 00    	jne    c000bfbb <loadKernelSymbolTable(char const*)+0x2b7>
c000bd42:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000bd4a:	83 ec 0c             	sub    esp,0xc
c000bd4d:	6a 34                	push   0x34
c000bd4f:	e8 3b 17 00 00       	call   c000d48f <malloc>
c000bd54:	59                   	pop    ecx
c000bd55:	89 c7                	mov    edi,eax
c000bd57:	8d 74 24 34          	lea    esi,[esp+0x34]
c000bd5b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd5d:	56                   	push   esi
c000bd5e:	57                   	push   edi
c000bd5f:	6a 00                	push   0x0
c000bd61:	6a 34                	push   0x34
c000bd63:	53                   	push   ebx
c000bd64:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bd67:	83 c4 20             	add    esp,0x20
c000bd6a:	85 c0                	test   eax,eax
c000bd6c:	74 17                	je     c000bd85 <loadKernelSymbolTable(char const*)+0x81>
c000bd6e:	83 ec 0c             	sub    esp,0xc
c000bd71:	68 11 89 03 c0       	push   0xc0038911
c000bd76:	e8 37 12 00 00       	call   c000cfb2 <panic(char const*)>
c000bd7b:	83 c4 10             	add    esp,0x10
c000bd7e:	31 d2                	xor    edx,edx
c000bd80:	e9 36 02 00 00       	jmp    c000bfbb <loadKernelSymbolTable(char const*)+0x2b7>
c000bd85:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c000bd8b:	75 e1                	jne    c000bd6e <loadKernelSymbolTable(char const*)+0x6a>
c000bd8d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c000bd90:	85 c0                	test   eax,eax
c000bd92:	74 da                	je     c000bd6e <loadKernelSymbolTable(char const*)+0x6a>
c000bd94:	52                   	push   edx
c000bd95:	31 d2                	xor    edx,edx
c000bd97:	52                   	push   edx
c000bd98:	50                   	push   eax
c000bd99:	53                   	push   ebx
c000bd9a:	e8 f5 6b 00 00       	call   c0012994 <File::seek(unsigned long long)>
c000bd9f:	83 c4 10             	add    esp,0x10
c000bda2:	85 c0                	test   eax,eax
c000bda4:	75 c8                	jne    c000bd6e <loadKernelSymbolTable(char const*)+0x6a>
c000bda6:	83 ec 0c             	sub    esp,0xc
c000bda9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000bdad:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000bdb1:	31 ed                	xor    ebp,ebp
c000bdb3:	0f af c2             	imul   eax,edx
c000bdb6:	50                   	push   eax
c000bdb7:	e8 d3 16 00 00       	call   c000d48f <malloc>
c000bdbc:	89 34 24             	mov    DWORD PTR [esp],esi
c000bdbf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000bdc5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bdc9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000bdcd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000bdd1:	0f af c2             	imul   eax,edx
c000bdd4:	99                   	cdq    
c000bdd5:	52                   	push   edx
c000bdd6:	50                   	push   eax
c000bdd7:	53                   	push   ebx
c000bdd8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bddb:	83 c4 20             	add    esp,0x20
c000bdde:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bde6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bdee:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000bdf6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000bdfe:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c000be02:	0f 86 aa 00 00 00    	jbe    c000beb2 <loadKernelSymbolTable(char const*)+0x1ae>
c000be08:	0f b7 f5             	movzx  esi,bp
c000be0b:	6b f6 28             	imul   esi,esi,0x28
c000be0e:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c000be12:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000be15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000be19:	50                   	push   eax
c000be1a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000be1e:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c000be22:	8b 16                	mov    edx,DWORD PTR [esi]
c000be24:	6b c0 28             	imul   eax,eax,0x28
c000be27:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c000be2b:	89 d0                	mov    eax,edx
c000be2d:	31 d2                	xor    edx,edx
c000be2f:	52                   	push   edx
c000be30:	50                   	push   eax
c000be31:	53                   	push   ebx
c000be32:	e8 5d 6b 00 00       	call   c0012994 <File::seek(unsigned long long)>
c000be37:	83 c4 0c             	add    esp,0xc
c000be3a:	6a 20                	push   0x20
c000be3c:	6a 00                	push   0x0
c000be3e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c000be42:	52                   	push   edx
c000be43:	e8 90 48 ff ff       	call   c00006d8 <memset>
c000be48:	58                   	pop    eax
c000be49:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be4b:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c000be4f:	51                   	push   ecx
c000be50:	8d 54 24 40          	lea    edx,[esp+0x40]
c000be54:	52                   	push   edx
c000be55:	6a 00                	push   0x0
c000be57:	6a 1f                	push   0x1f
c000be59:	53                   	push   ebx
c000be5a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000be5d:	83 c4 18             	add    esp,0x18
c000be60:	68 28 89 03 c0       	push   0xc0038928
c000be65:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c000be69:	52                   	push   edx
c000be6a:	e8 0b 4a ff ff       	call   c000087a <strcmp>
c000be6f:	83 c4 10             	add    esp,0x10
c000be72:	85 c0                	test   eax,eax
c000be74:	75 0f                	jne    c000be85 <loadKernelSymbolTable(char const*)+0x181>
c000be76:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be79:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000be7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000be81:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be85:	50                   	push   eax
c000be86:	50                   	push   eax
c000be87:	68 30 89 03 c0       	push   0xc0038930
c000be8c:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000be90:	50                   	push   eax
c000be91:	e8 e4 49 ff ff       	call   c000087a <strcmp>
c000be96:	83 c4 10             	add    esp,0x10
c000be99:	85 c0                	test   eax,eax
c000be9b:	75 0f                	jne    c000beac <loadKernelSymbolTable(char const*)+0x1a8>
c000be9d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bea0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bea8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000beac:	45                   	inc    ebp
c000bead:	e9 4c ff ff ff       	jmp    c000bdfe <loadKernelSymbolTable(char const*)+0xfa>
c000beb2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000beb7:	75 10                	jne    c000bec9 <loadKernelSymbolTable(char const*)+0x1c5>
c000beb9:	83 ec 0c             	sub    esp,0xc
c000bebc:	68 38 89 03 c0       	push   0xc0038938
c000bec1:	e8 ec 10 00 00       	call   c000cfb2 <panic(char const*)>
c000bec6:	83 c4 10             	add    esp,0x10
c000bec9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000bece:	75 10                	jne    c000bee0 <loadKernelSymbolTable(char const*)+0x1dc>
c000bed0:	83 ec 0c             	sub    esp,0xc
c000bed3:	68 38 89 03 c0       	push   0xc0038938
c000bed8:	e8 d5 10 00 00       	call   c000cfb2 <panic(char const*)>
c000bedd:	83 c4 10             	add    esp,0x10
c000bee0:	31 d2                	xor    edx,edx
c000bee2:	50                   	push   eax
c000bee3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bee7:	52                   	push   edx
c000bee8:	50                   	push   eax
c000bee9:	53                   	push   ebx
c000beea:	e8 a5 6a 00 00       	call   c0012994 <File::seek(unsigned long long)>
c000beef:	5a                   	pop    edx
c000bef0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bef4:	e8 96 15 00 00       	call   c000d48f <malloc>
c000bef9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bf01:	89 c1                	mov    ecx,eax
c000bf03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bf0b:	5e                   	pop    esi
c000bf0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf0e:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c000bf12:	55                   	push   ebp
c000bf13:	51                   	push   ecx
c000bf14:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c000bf18:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf20:	53                   	push   ebx
c000bf21:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf24:	83 c4 14             	add    esp,0x14
c000bf27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf2b:	e8 5f 15 00 00       	call   c000d48f <malloc>
c000bf30:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bf33:	89 c6                	mov    esi,eax
c000bf35:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf37:	56                   	push   esi
c000bf38:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf3c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf40:	53                   	push   ebx
c000bf41:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf44:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bf48:	8b 15 60 bb 03 c0    	mov    edx,DWORD PTR ds:0xc003bb60
c000bf4e:	83 c4 1c             	add    esp,0x1c
c000bf51:	c1 e8 04             	shr    eax,0x4
c000bf54:	89 04 95 e0 b9 03 c0 	mov    DWORD PTR [edx*4-0x3ffc4620],eax
c000bf5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf5f:	31 d2                	xor    edx,edx
c000bf61:	52                   	push   edx
c000bf62:	50                   	push   eax
c000bf63:	53                   	push   ebx
c000bf64:	e8 2b 6a 00 00       	call   c0012994 <File::seek(unsigned long long)>
c000bf69:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bf6c:	31 d2                	xor    edx,edx
c000bf6e:	56                   	push   esi
c000bf6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bf73:	52                   	push   edx
c000bf74:	50                   	push   eax
c000bf75:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf77:	53                   	push   ebx
c000bf78:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf7b:	83 c4 14             	add    esp,0x14
c000bf7e:	53                   	push   ebx
c000bf7f:	e8 b0 69 00 00       	call   c0012934 <File::close()>
c000bf84:	5d                   	pop    ebp
c000bf85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf89:	e8 11 15 00 00       	call   c000d49f <free>
c000bf8e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bf91:	e8 09 15 00 00       	call   c000d49f <free>
c000bf96:	a1 60 bb 03 c0       	mov    eax,ds:0xc003bb60
c000bf9b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bf9f:	8d 50 01             	lea    edx,[eax+0x1]
c000bfa2:	89 0c 85 e0 ba 03 c0 	mov    DWORD PTR [eax*4-0x3ffc4520],ecx
c000bfa9:	89 15 60 bb 03 c0    	mov    DWORD PTR ds:0xc003bb60,edx
c000bfaf:	89 34 85 60 ba 03 c0 	mov    DWORD PTR [eax*4-0x3ffc45a0],esi
c000bfb6:	83 c4 10             	add    esp,0x10
c000bfb9:	b2 01                	mov    dl,0x1
c000bfbb:	83 c4 5c             	add    esp,0x5c
c000bfbe:	88 d0                	mov    al,dl
c000bfc0:	5b                   	pop    ebx
c000bfc1:	5e                   	pop    esi
c000bfc2:	5f                   	pop    edi
c000bfc3:	5d                   	pop    ebp
c000bfc4:	c3                   	ret    

c000bfc5 <loadDriverIntoMemory(char const*, unsigned long)>:
c000bfc5:	55                   	push   ebp
c000bfc6:	57                   	push   edi
c000bfc7:	56                   	push   esi
c000bfc8:	53                   	push   ebx
c000bfc9:	81 ec 68 05 00 00    	sub    esp,0x568
c000bfcf:	8b 1d 1c bc 03 c0    	mov    ebx,DWORD PTR ds:0xc003bc1c
c000bfd5:	68 14 01 00 00       	push   0x114
c000bfda:	e8 65 64 00 00       	call   c0012444 <operator new(unsigned long)>
c000bfdf:	83 c4 0c             	add    esp,0xc
c000bfe2:	89 c5                	mov    ebp,eax
c000bfe4:	53                   	push   ebx
c000bfe5:	ff b4 24 78 05 00 00 	push   DWORD PTR [esp+0x578]
c000bfec:	50                   	push   eax
c000bfed:	e8 80 68 00 00       	call   c0012872 <File::File(char const*, Process*)>
c000bff2:	5e                   	pop    esi
c000bff3:	5f                   	pop    edi
c000bff4:	6a 01                	push   0x1
c000bff6:	55                   	push   ebp
c000bff7:	e8 da 68 00 00       	call   c00128d6 <File::open(FileOpenMode)>
c000bffc:	83 c4 10             	add    esp,0x10
c000bfff:	85 c0                	test   eax,eax
c000c001:	0f 85 5f 01 00 00    	jne    c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c007:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000c00f:	83 ec 0c             	sub    esp,0xc
c000c012:	6a 34                	push   0x34
c000c014:	e8 76 14 00 00       	call   c000d48f <malloc>
c000c019:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c01d:	5b                   	pop    ebx
c000c01e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c021:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c000c025:	53                   	push   ebx
c000c026:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c02a:	6a 00                	push   0x0
c000c02c:	6a 34                	push   0x34
c000c02e:	55                   	push   ebp
c000c02f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c032:	83 c4 20             	add    esp,0x20
c000c035:	85 c0                	test   eax,eax
c000c037:	0f 85 29 01 00 00    	jne    c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c03d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c041:	81 38 7f 45 4c 46    	cmp    DWORD PTR [eax],0x464c457f
c000c047:	0f 85 19 01 00 00    	jne    c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c04d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c050:	85 c0                	test   eax,eax
c000c052:	0f 84 0e 01 00 00    	je     c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c058:	31 d2                	xor    edx,edx
c000c05a:	51                   	push   ecx
c000c05b:	52                   	push   edx
c000c05c:	50                   	push   eax
c000c05d:	55                   	push   ebp
c000c05e:	e8 31 69 00 00       	call   c0012994 <File::seek(unsigned long long)>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	85 c0                	test   eax,eax
c000c068:	0f 85 f8 00 00 00    	jne    c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c06e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c072:	83 ec 0c             	sub    esp,0xc
c000c075:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000c078:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c07c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c080:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c084:	0f b7 51 2e          	movzx  edx,WORD PTR [ecx+0x2e]
c000c088:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
c000c08c:	0f af c2             	imul   eax,edx
c000c08f:	50                   	push   eax
c000c090:	e8 fa 13 00 00       	call   c000d48f <malloc>
c000c095:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c098:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c09c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c09f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c0a7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000c0ab:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
c000c0af:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000c0b3:	0f af c2             	imul   eax,edx
c000c0b6:	99                   	cdq    
c000c0b7:	52                   	push   edx
c000c0b8:	50                   	push   eax
c000c0b9:	55                   	push   ebp
c000c0ba:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c0bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c0c1:	83 c4 20             	add    esp,0x20
c000c0c4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000c0c7:	85 c0                	test   eax,eax
c000c0c9:	0f 84 97 00 00 00    	je     c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c0cf:	52                   	push   edx
c000c0d0:	31 d2                	xor    edx,edx
c000c0d2:	52                   	push   edx
c000c0d3:	50                   	push   eax
c000c0d4:	55                   	push   ebp
c000c0d5:	e8 ba 68 00 00       	call   c0012994 <File::seek(unsigned long long)>
c000c0da:	83 c4 10             	add    esp,0x10
c000c0dd:	85 c0                	test   eax,eax
c000c0df:	0f 85 81 00 00 00    	jne    c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c0e5:	83 ec 0c             	sub    esp,0xc
c000c0e8:	31 ff                	xor    edi,edi
c000c0ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c0ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c0f2:	0f b7 51 2a          	movzx  edx,WORD PTR [ecx+0x2a]
c000c0f6:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
c000c0fa:	0f af c2             	imul   eax,edx
c000c0fd:	50                   	push   eax
c000c0fe:	e8 8c 13 00 00       	call   c000d48f <malloc>
c000c103:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c106:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c10a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c10d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c111:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c115:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c119:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
c000c11d:	0f b7 52 2a          	movzx  edx,WORD PTR [edx+0x2a]
c000c121:	0f af c2             	imul   eax,edx
c000c124:	99                   	cdq    
c000c125:	52                   	push   edx
c000c126:	50                   	push   eax
c000c127:	55                   	push   ebp
c000c128:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c12b:	83 c4 20             	add    esp,0x20
c000c12e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c132:	66 39 78 2c          	cmp    WORD PTR [eax+0x2c],di
c000c136:	76 7c                	jbe    c000c1b4 <loadDriverIntoMemory(char const*, unsigned long)+0x1ef>
c000c138:	0f b7 df             	movzx  ebx,di
c000c13b:	c1 e3 05             	shl    ebx,0x5
c000c13e:	03 5c 24 34          	add    ebx,DWORD PTR [esp+0x34]
c000c142:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c000c145:	75 67                	jne    c000c1ae <loadDriverIntoMemory(char const*, unsigned long)+0x1e9>
c000c147:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c14a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c000c14d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c151:	31 d2                	xor    edx,edx
c000c153:	50                   	push   eax
c000c154:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c157:	52                   	push   edx
c000c158:	50                   	push   eax
c000c159:	55                   	push   ebp
c000c15a:	e8 35 68 00 00       	call   c0012994 <File::seek(unsigned long long)>
c000c15f:	83 c4 10             	add    esp,0x10
c000c162:	85 c0                	test   eax,eax
c000c164:	74 07                	je     c000c16d <loadDriverIntoMemory(char const*, unsigned long)+0x1a8>
c000c166:	31 c0                	xor    eax,eax
c000c168:	e9 fd 04 00 00       	jmp    c000c66a <loadDriverIntoMemory(char const*, unsigned long)+0x6a5>
c000c16d:	8b 84 24 74 05 00 00 	mov    eax,DWORD PTR [esp+0x574]
c000c174:	31 d2                	xor    edx,edx
c000c176:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c000c17a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c17d:	83 ec 0c             	sub    esp,0xc
c000c180:	01 c6                	add    esi,eax
c000c182:	8d 84 24 5c 03 00 00 	lea    eax,[esp+0x35c]
c000c189:	50                   	push   eax
c000c18a:	56                   	push   esi
c000c18b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c18f:	52                   	push   edx
c000c190:	50                   	push   eax
c000c191:	55                   	push   ebp
c000c192:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c195:	83 c4 1c             	add    esp,0x1c
c000c198:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c19b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c000c19e:	50                   	push   eax
c000c19f:	6a 00                	push   0x0
c000c1a1:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000c1a5:	56                   	push   esi
c000c1a6:	e8 2d 45 ff ff       	call   c00006d8 <memset>
c000c1ab:	83 c4 10             	add    esp,0x10
c000c1ae:	47                   	inc    edi
c000c1af:	e9 7a ff ff ff       	jmp    c000c12e <loadDriverIntoMemory(char const*, unsigned long)+0x169>
c000c1b4:	31 db                	xor    ebx,ebx
c000c1b6:	50                   	push   eax
c000c1b7:	68 00 02 00 00       	push   0x200
c000c1bc:	6a 00                	push   0x0
c000c1be:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c000c1c5:	50                   	push   eax
c000c1c6:	e8 0d 45 ff ff       	call   c00006d8 <memset>
c000c1cb:	83 c4 0c             	add    esp,0xc
c000c1ce:	68 00 02 00 00       	push   0x200
c000c1d3:	6a 00                	push   0x0
c000c1d5:	8d 84 24 5c 03 00 00 	lea    eax,[esp+0x35c]
c000c1dc:	50                   	push   eax
c000c1dd:	e8 f6 44 ff ff       	call   c00006d8 <memset>
c000c1e2:	83 c4 10             	add    esp,0x10
c000c1e5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c1ed:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000c1f5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000c1fd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c205:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c20d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c211:	66 39 58 30          	cmp    WORD PTR [eax+0x30],bx
c000c215:	0f 86 f1 00 00 00    	jbe    c000c30c <loadDriverIntoMemory(char const*, unsigned long)+0x347>
c000c21b:	0f b7 f3             	movzx  esi,bx
c000c21e:	6b f6 28             	imul   esi,esi,0x28
c000c221:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c000c225:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000c228:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c22c:	50                   	push   eax
c000c22d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c231:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c235:	0f b7 50 32          	movzx  edx,WORD PTR [eax+0x32]
c000c239:	8b 06                	mov    eax,DWORD PTR [esi]
c000c23b:	6b d2 28             	imul   edx,edx,0x28
c000c23e:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c000c242:	31 d2                	xor    edx,edx
c000c244:	52                   	push   edx
c000c245:	50                   	push   eax
c000c246:	55                   	push   ebp
c000c247:	e8 48 67 00 00       	call   c0012994 <File::seek(unsigned long long)>
c000c24c:	83 c4 0c             	add    esp,0xc
c000c24f:	6a 20                	push   0x20
c000c251:	6a 00                	push   0x0
c000c253:	8d 7c 24 5c          	lea    edi,[esp+0x5c]
c000c257:	57                   	push   edi
c000c258:	e8 7b 44 ff ff       	call   c00006d8 <memset>
c000c25d:	58                   	pop    eax
c000c25e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c261:	8d 54 24 58          	lea    edx,[esp+0x58]
c000c265:	52                   	push   edx
c000c266:	57                   	push   edi
c000c267:	6a 00                	push   0x0
c000c269:	6a 1f                	push   0x1f
c000c26b:	55                   	push   ebp
c000c26c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c26f:	83 c4 18             	add    esp,0x18
c000c272:	57                   	push   edi
c000c273:	68 52 89 03 c0       	push   0xc0038952
c000c278:	e8 17 0c 00 00       	call   c000ce94 <kprintf(char const*, ...)>
c000c27d:	83 c4 0c             	add    esp,0xc
c000c280:	6a 09                	push   0x9
c000c282:	68 5f 89 03 c0       	push   0xc003895f
c000c287:	57                   	push   edi
c000c288:	e8 0f 43 ff ff       	call   c000059c <memcmp>
c000c28d:	83 c4 10             	add    esp,0x10
c000c290:	85 c0                	test   eax,eax
c000c292:	75 24                	jne    c000c2b8 <loadDriverIntoMemory(char const*, unsigned long)+0x2f3>
c000c294:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c298:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c29c:	89 8c 84 50 01 00 00 	mov    DWORD PTR [esp+eax*4+0x150],ecx
c000c2a3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000c2a7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c2aa:	89 84 8c 50 03 00 00 	mov    DWORD PTR [esp+ecx*4+0x350],eax
c000c2b1:	89 c8                	mov    eax,ecx
c000c2b3:	40                   	inc    eax
c000c2b4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c2b8:	50                   	push   eax
c000c2b9:	50                   	push   eax
c000c2ba:	68 28 89 03 c0       	push   0xc0038928
c000c2bf:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000c2c3:	50                   	push   eax
c000c2c4:	e8 b1 45 ff ff       	call   c000087a <strcmp>
c000c2c9:	83 c4 10             	add    esp,0x10
c000c2cc:	85 c0                	test   eax,eax
c000c2ce:	75 0f                	jne    c000c2df <loadDriverIntoMemory(char const*, unsigned long)+0x31a>
c000c2d0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c2d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c2d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c2db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2df:	57                   	push   edi
c000c2e0:	57                   	push   edi
c000c2e1:	68 30 89 03 c0       	push   0xc0038930
c000c2e6:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000c2ea:	50                   	push   eax
c000c2eb:	e8 8a 45 ff ff       	call   c000087a <strcmp>
c000c2f0:	83 c4 10             	add    esp,0x10
c000c2f3:	85 c0                	test   eax,eax
c000c2f5:	75 0f                	jne    c000c306 <loadDriverIntoMemory(char const*, unsigned long)+0x341>
c000c2f7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c2fa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c2fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c302:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c306:	43                   	inc    ebx
c000c307:	e9 01 ff ff ff       	jmp    c000c20d <loadDriverIntoMemory(char const*, unsigned long)+0x248>
c000c30c:	52                   	push   edx
c000c30d:	31 d2                	xor    edx,edx
c000c30f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c313:	52                   	push   edx
c000c314:	50                   	push   eax
c000c315:	55                   	push   ebp
c000c316:	e8 79 66 00 00       	call   c0012994 <File::seek(unsigned long long)>
c000c31b:	59                   	pop    ecx
c000c31c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c320:	e8 6a 11 00 00       	call   c000d48f <malloc>
c000c325:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c328:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c32c:	31 d2                	xor    edx,edx
c000c32e:	5b                   	pop    ebx
c000c32f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c000c333:	53                   	push   ebx
c000c334:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c338:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c33c:	52                   	push   edx
c000c33d:	50                   	push   eax
c000c33e:	55                   	push   ebp
c000c33f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c342:	83 c4 14             	add    esp,0x14
c000c345:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c349:	e8 41 11 00 00       	call   c000d48f <malloc>
c000c34e:	31 d2                	xor    edx,edx
c000c350:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c354:	83 c4 0c             	add    esp,0xc
c000c357:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c35b:	52                   	push   edx
c000c35c:	50                   	push   eax
c000c35d:	55                   	push   ebp
c000c35e:	e8 31 66 00 00       	call   c0012994 <File::seek(unsigned long long)>
c000c363:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c366:	31 d2                	xor    edx,edx
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c36f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c373:	52                   	push   edx
c000c374:	50                   	push   eax
c000c375:	55                   	push   ebp
c000c376:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c379:	83 c4 20             	add    esp,0x20
c000c37c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c384:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000c388:	39 7c 24 1c          	cmp    DWORD PTR [esp+0x1c],edi
c000c38c:	0f 84 ac 02 00 00    	je     c000c63e <loadDriverIntoMemory(char const*, unsigned long)+0x679>
c000c392:	8b 84 bc 50 03 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x350]
c000c399:	31 d2                	xor    edx,edx
c000c39b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c39f:	c1 e8 03             	shr    eax,0x3
c000c3a2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c3a6:	50                   	push   eax
c000c3a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3ab:	8b 84 84 54 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x154]
c000c3b2:	52                   	push   edx
c000c3b3:	50                   	push   eax
c000c3b4:	55                   	push   ebp
c000c3b5:	e8 da 65 00 00       	call   c0012994 <File::seek(unsigned long long)>
c000c3ba:	58                   	pop    eax
c000c3bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c3bf:	ff b4 84 5c 03 00 00 	push   DWORD PTR [esp+eax*4+0x35c]
c000c3c6:	e8 c4 10 00 00       	call   c000d48f <malloc>
c000c3cb:	31 d2                	xor    edx,edx
c000c3cd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c3d1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c3d4:	58                   	pop    eax
c000c3d5:	8d 44 24 58          	lea    eax,[esp+0x58]
c000c3d9:	50                   	push   eax
c000c3da:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c3de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c3e2:	8b 84 84 64 03 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x364]
c000c3e9:	52                   	push   edx
c000c3ea:	50                   	push   eax
c000c3eb:	55                   	push   ebp
c000c3ec:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c3ef:	83 c4 20             	add    esp,0x20
c000c3f2:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000c3fa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c3fe:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000c402:	0f 8d 1e 02 00 00    	jge    c000c626 <loadDriverIntoMemory(char const*, unsigned long)+0x661>
c000c408:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c40c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c410:	83 ec 0c             	sub    esp,0xc
c000c413:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000c416:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c41a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c41e:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c000c422:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c426:	89 c6                	mov    esi,eax
c000c428:	c1 ee 08             	shr    esi,0x8
c000c42b:	c1 e6 04             	shl    esi,0x4
c000c42e:	03 74 24 44          	add    esi,DWORD PTR [esp+0x44]
c000c432:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c000c435:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c439:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c43d:	53                   	push   ebx
c000c43e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c442:	03 06                	add    eax,DWORD PTR [esi]
c000c444:	50                   	push   eax
c000c445:	68 69 89 03 c0       	push   0xc0038969
c000c44a:	e8 45 0a 00 00       	call   c000ce94 <kprintf(char const*, ...)>
c000c44f:	83 c4 20             	add    esp,0x20
c000c452:	85 db                	test   ebx,ebx
c000c454:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000c459:	0f 85 fb 00 00 00    	jne    c000c55a <loadDriverIntoMemory(char const*, unsigned long)+0x595>
c000c45f:	83 ec 0c             	sub    esp,0xc
c000c462:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c466:	03 06                	add    eax,DWORD PTR [esi]
c000c468:	50                   	push   eax
c000c469:	e8 47 f8 ff ff       	call   c000bcb5 <getAddressOfKernelSymbol(char const*)>
c000c46e:	83 c4 10             	add    esp,0x10
c000c471:	89 c3                	mov    ebx,eax
c000c473:	c6 44 24 2b 01       	mov    BYTE PTR [esp+0x2b],0x1
c000c478:	85 c0                	test   eax,eax
c000c47a:	0f 85 da 00 00 00    	jne    c000c55a <loadDriverIntoMemory(char const*, unsigned long)+0x595>
c000c480:	50                   	push   eax
c000c481:	50                   	push   eax
c000c482:	68 9b 89 03 c0       	push   0xc003899b
c000c487:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c48b:	03 06                	add    eax,DWORD PTR [esi]
c000c48d:	50                   	push   eax
c000c48e:	e8 e7 43 ff ff       	call   c000087a <strcmp>
c000c493:	83 c4 10             	add    esp,0x10
c000c496:	85 c0                	test   eax,eax
c000c498:	75 0a                	jne    c000c4a4 <loadDriverIntoMemory(char const*, unsigned long)+0x4df>
c000c49a:	bb bc e6 01 c0       	mov    ebx,0xc001e6bc
c000c49f:	e9 b1 00 00 00       	jmp    c000c555 <loadDriverIntoMemory(char const*, unsigned long)+0x590>
c000c4a4:	50                   	push   eax
c000c4a5:	50                   	push   eax
c000c4a6:	68 a5 89 03 c0       	push   0xc00389a5
c000c4ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c4af:	03 06                	add    eax,DWORD PTR [esi]
c000c4b1:	50                   	push   eax
c000c4b2:	e8 c3 43 ff ff       	call   c000087a <strcmp>
c000c4b7:	83 c4 10             	add    esp,0x10
c000c4ba:	85 c0                	test   eax,eax
c000c4bc:	75 0a                	jne    c000c4c8 <loadDriverIntoMemory(char const*, unsigned long)+0x503>
c000c4be:	bb f0 e3 01 c0       	mov    ebx,0xc001e3f0
c000c4c3:	e9 8d 00 00 00       	jmp    c000c555 <loadDriverIntoMemory(char const*, unsigned long)+0x590>
c000c4c8:	50                   	push   eax
c000c4c9:	50                   	push   eax
c000c4ca:	68 ae 89 03 c0       	push   0xc00389ae
c000c4cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c4d3:	03 06                	add    eax,DWORD PTR [esi]
c000c4d5:	50                   	push   eax
c000c4d6:	e8 9f 43 ff ff       	call   c000087a <strcmp>
c000c4db:	83 c4 10             	add    esp,0x10
c000c4de:	85 c0                	test   eax,eax
c000c4e0:	75 07                	jne    c000c4e9 <loadDriverIntoMemory(char const*, unsigned long)+0x524>
c000c4e2:	bb bc e7 01 c0       	mov    ebx,0xc001e7bc
c000c4e7:	eb 6c                	jmp    c000c555 <loadDriverIntoMemory(char const*, unsigned long)+0x590>
c000c4e9:	57                   	push   edi
c000c4ea:	57                   	push   edi
c000c4eb:	68 b8 89 03 c0       	push   0xc00389b8
c000c4f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c4f4:	03 06                	add    eax,DWORD PTR [esi]
c000c4f6:	50                   	push   eax
c000c4f7:	e8 7e 43 ff ff       	call   c000087a <strcmp>
c000c4fc:	83 c4 10             	add    esp,0x10
c000c4ff:	85 c0                	test   eax,eax
c000c501:	74 4d                	je     c000c550 <loadDriverIntoMemory(char const*, unsigned long)+0x58b>
c000c503:	51                   	push   ecx
c000c504:	51                   	push   ecx
c000c505:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c509:	03 06                	add    eax,DWORD PTR [esi]
c000c50b:	50                   	push   eax
c000c50c:	68 c1 89 03 c0       	push   0xc00389c1
c000c511:	e8 7e 09 00 00       	call   c000ce94 <kprintf(char const*, ...)>
c000c516:	5f                   	pop    edi
c000c517:	58                   	pop    eax
c000c518:	68 db 89 03 c0       	push   0xc00389db
c000c51d:	8d 7c 24 5c          	lea    edi,[esp+0x5c]
c000c521:	57                   	push   edi
c000c522:	e8 cd 42 ff ff       	call   c00007f4 <strcpy>
c000c527:	58                   	pop    eax
c000c528:	5a                   	pop    edx
c000c529:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c52d:	03 06                	add    eax,DWORD PTR [esi]
c000c52f:	50                   	push   eax
c000c530:	57                   	push   edi
c000c531:	e8 0b 44 ff ff       	call   c0000941 <strcat>
c000c536:	59                   	pop    ecx
c000c537:	5e                   	pop    esi
c000c538:	68 bb 8a 03 c0       	push   0xc0038abb
c000c53d:	57                   	push   edi
c000c53e:	e8 fe 43 ff ff       	call   c0000941 <strcat>
c000c543:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c546:	e8 67 0a 00 00       	call   c000cfb2 <panic(char const*)>
c000c54b:	83 c4 10             	add    esp,0x10
c000c54e:	eb 0a                	jmp    c000c55a <loadDriverIntoMemory(char const*, unsigned long)+0x595>
c000c550:	bb 3c e5 01 c0       	mov    ebx,0xc001e53c
c000c555:	c6 44 24 2b 01       	mov    BYTE PTR [esp+0x2b],0x1
c000c55a:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c000c55f:	75 5d                	jne    c000c5be <loadDriverIntoMemory(char const*, unsigned long)+0x5f9>
c000c561:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c565:	8b bc 24 74 05 00 00 	mov    edi,DWORD PTR [esp+0x574]
c000c56c:	2b 7c 24 20          	sub    edi,DWORD PTR [esp+0x20]
c000c570:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c000c575:	8d 34 38             	lea    esi,[eax+edi*1]
c000c578:	8b 06                	mov    eax,DWORD PTR [esi]
c000c57a:	8d 14 18             	lea    edx,[eax+ebx*1]
c000c57d:	75 3b                	jne    c000c5ba <loadDriverIntoMemory(char const*, unsigned long)+0x5f5>
c000c57f:	8d 14 38             	lea    edx,[eax+edi*1]
c000c582:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c000c58a:	74 2e                	je     c000c5ba <loadDriverIntoMemory(char const*, unsigned long)+0x5f5>
c000c58c:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c000c594:	75 24                	jne    c000c5ba <loadDriverIntoMemory(char const*, unsigned long)+0x5f5>
c000c596:	52                   	push   edx
c000c597:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c59b:	53                   	push   ebx
c000c59c:	ff b4 24 80 05 00 00 	push   DWORD PTR [esp+0x580]
c000c5a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c5a7:	50                   	push   eax
c000c5a8:	56                   	push   esi
c000c5a9:	68 f2 89 03 c0       	push   0xc00389f2
c000c5ae:	e8 e1 08 00 00       	call   c000ce94 <kprintf(char const*, ...)>
c000c5b3:	03 3e                	add    edi,DWORD PTR [esi]
c000c5b5:	83 c4 20             	add    esp,0x20
c000c5b8:	89 fa                	mov    edx,edi
c000c5ba:	89 16                	mov    DWORD PTR [esi],edx
c000c5bc:	eb 5f                	jmp    c000c61d <loadDriverIntoMemory(char const*, unsigned long)+0x658>
c000c5be:	80 7c 24 10 02       	cmp    BYTE PTR [esp+0x10],0x2
c000c5c3:	75 37                	jne    c000c5fc <loadDriverIntoMemory(char const*, unsigned long)+0x637>
c000c5c5:	8b 94 24 74 05 00 00 	mov    edx,DWORD PTR [esp+0x574]
c000c5cc:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c000c5d0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000c5d4:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c000c5d9:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000c5db:	74 13                	je     c000c5f0 <loadDriverIntoMemory(char const*, unsigned long)+0x62b>
c000c5dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c5e1:	2b 84 24 74 05 00 00 	sub    eax,DWORD PTR [esp+0x574]
c000c5e8:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000c5ec:	01 c8                	add    eax,ecx
c000c5ee:	eb 06                	jmp    c000c5f6 <loadDriverIntoMemory(char const*, unsigned long)+0x631>
c000c5f0:	89 c8                	mov    eax,ecx
c000c5f2:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000c5f6:	01 c3                	add    ebx,eax
c000c5f8:	89 1a                	mov    DWORD PTR [edx],ebx
c000c5fa:	eb 21                	jmp    c000c61d <loadDriverIntoMemory(char const*, unsigned long)+0x658>
c000c5fc:	53                   	push   ebx
c000c5fd:	53                   	push   ebx
c000c5fe:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000c603:	50                   	push   eax
c000c604:	68 74 8a 03 c0       	push   0xc0038a74
c000c609:	e8 86 08 00 00       	call   c000ce94 <kprintf(char const*, ...)>
c000c60e:	c7 04 24 7f 8a 03 c0 	mov    DWORD PTR [esp],0xc0038a7f
c000c615:	e8 98 09 00 00       	call   c000cfb2 <panic(char const*)>
c000c61a:	83 c4 10             	add    esp,0x10
c000c61d:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c000c621:	e9 d4 fd ff ff       	jmp    c000c3fa <loadDriverIntoMemory(char const*, unsigned long)+0x435>
c000c626:	83 ec 0c             	sub    esp,0xc
c000c629:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c62d:	e8 6d 0e 00 00       	call   c000d49f <free>
c000c632:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c000c636:	83 c4 10             	add    esp,0x10
c000c639:	e9 46 fd ff ff       	jmp    c000c384 <loadDriverIntoMemory(char const*, unsigned long)+0x3bf>
c000c63e:	83 ec 0c             	sub    esp,0xc
c000c641:	55                   	push   ebp
c000c642:	e8 ed 62 00 00       	call   c0012934 <File::close()>
c000c647:	58                   	pop    eax
c000c648:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c64c:	e8 4e 0e 00 00       	call   c000d49f <free>
c000c651:	5a                   	pop    edx
c000c652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c656:	e8 44 0e 00 00       	call   c000d49f <free>
c000c65b:	59                   	pop    ecx
c000c65c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c660:	e8 3a 0e 00 00       	call   c000d49f <free>
c000c665:	83 c4 10             	add    esp,0x10
c000c668:	b0 01                	mov    al,0x1
c000c66a:	81 c4 5c 05 00 00    	add    esp,0x55c
c000c670:	5b                   	pop    ebx
c000c671:	5e                   	pop    esi
c000c672:	5f                   	pop    edi
c000c673:	5d                   	pop    ebp
c000c674:	c3                   	ret    

c000c675 <loadDLL(char const*)>:
c000c675:	57                   	push   edi
c000c676:	56                   	push   esi
c000c677:	53                   	push   ebx
c000c678:	81 ec 18 01 00 00    	sub    esp,0x118
c000c67e:	8b 9c 24 28 01 00 00 	mov    ebx,DWORD PTR [esp+0x128]
c000c685:	53                   	push   ebx
c000c686:	68 97 8a 03 c0       	push   0xc0038a97
c000c68b:	e8 04 08 00 00       	call   c000ce94 <kprintf(char const*, ...)>
c000c690:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c697:	e8 a8 5d 00 00       	call   c0012444 <operator new(unsigned long)>
c000c69c:	83 c4 0c             	add    esp,0xc
c000c69f:	89 c6                	mov    esi,eax
c000c6a1:	ff 35 1c bc 03 c0    	push   DWORD PTR ds:0xc003bc1c
c000c6a7:	53                   	push   ebx
c000c6a8:	50                   	push   eax
c000c6a9:	e8 c4 61 00 00       	call   c0012872 <File::File(char const*, Process*)>
c000c6ae:	83 c4 0c             	add    esp,0xc
c000c6b1:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000c6b5:	50                   	push   eax
c000c6b6:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c6ba:	50                   	push   eax
c000c6bb:	56                   	push   esi
c000c6bc:	e8 c1 64 00 00       	call   c0012b82 <File::stat(unsigned long long*, bool*)>
c000c6c1:	83 c4 10             	add    esp,0x10
c000c6c4:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c6c9:	75 0a                	jne    c000c6d5 <loadDLL(char const*)+0x60>
c000c6cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6cf:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000c6d3:	75 32                	jne    c000c707 <loadDLL(char const*)+0x92>
c000c6d5:	50                   	push   eax
c000c6d6:	50                   	push   eax
c000c6d7:	68 a8 8a 03 c0       	push   0xc0038aa8
c000c6dc:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000c6e0:	57                   	push   edi
c000c6e1:	e8 0e 41 ff ff       	call   c00007f4 <strcpy>
c000c6e6:	58                   	pop    eax
c000c6e7:	5a                   	pop    edx
c000c6e8:	53                   	push   ebx
c000c6e9:	57                   	push   edi
c000c6ea:	e8 52 42 ff ff       	call   c0000941 <strcat>
c000c6ef:	59                   	pop    ecx
c000c6f0:	58                   	pop    eax
c000c6f1:	68 bb 8a 03 c0       	push   0xc0038abb
c000c6f6:	57                   	push   edi
c000c6f7:	e8 45 42 ff ff       	call   c0000941 <strcat>
c000c6fc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c6ff:	e8 ae 08 00 00       	call   c000cfb2 <panic(char const*)>
c000c704:	83 c4 10             	add    esp,0x10
c000c707:	83 ec 0c             	sub    esp,0xc
c000c70a:	8b 06                	mov    eax,DWORD PTR [esi]
c000c70c:	56                   	push   esi
c000c70d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c710:	58                   	pop    eax
c000c711:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c715:	e8 75 0d 00 00       	call   c000d48f <malloc>
c000c71a:	5a                   	pop    edx
c000c71b:	89 c6                	mov    esi,eax
c000c71d:	59                   	pop    ecx
c000c71e:	50                   	push   eax
c000c71f:	68 bd 8a 03 c0       	push   0xc0038abd
c000c724:	e8 6b 07 00 00       	call   c000ce94 <kprintf(char const*, ...)>
c000c729:	5f                   	pop    edi
c000c72a:	58                   	pop    eax
c000c72b:	56                   	push   esi
c000c72c:	53                   	push   ebx
c000c72d:	e8 93 f8 ff ff       	call   c000bfc5 <loadDriverIntoMemory(char const*, unsigned long)>
c000c732:	81 c4 20 01 00 00    	add    esp,0x120
c000c738:	89 f0                	mov    eax,esi
c000c73a:	5b                   	pop    ebx
c000c73b:	5e                   	pop    esi
c000c73c:	5f                   	pop    edi
c000c73d:	c3                   	ret    

c000c73e <executeDLL(unsigned long, void*)>:
c000c73e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c742:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c746:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c74a:	ff e0                	jmp    eax

c000c74c <GDTEntry::setBase(unsigned int)>:
c000c74c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c750:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c754:	89 c1                	mov    ecx,eax
c000c756:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000c75a:	c1 e9 10             	shr    ecx,0x10
c000c75d:	c1 e8 18             	shr    eax,0x18
c000c760:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000c763:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000c766:	c3                   	ret    
c000c767:	90                   	nop

c000c768 <GDTEntry::setLimit(unsigned int)>:
c000c768:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c76c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c770:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000c773:	66 89 01             	mov    WORD PTR [ecx],ax
c000c776:	83 e2 f0             	and    edx,0xfffffff0
c000c779:	c1 e8 10             	shr    eax,0x10
c000c77c:	83 e0 0f             	and    eax,0xf
c000c77f:	09 d0                	or     eax,edx
c000c781:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000c784:	c3                   	ret    
c000c785:	90                   	nop

c000c786 <GDT::GDT()>:
c000c786:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c78a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c790:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c794:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c79a:	90                   	nop
c000c79b:	c3                   	ret    

c000c79c <GDT::addEntry(GDTEntry)>:
c000c79c:	53                   	push   ebx
c000c79d:	83 ec 0c             	sub    esp,0xc
c000c7a0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c7a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7a6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000c7ad:	52                   	push   edx
c000c7ae:	50                   	push   eax
c000c7af:	68 dc 8a 03 c0       	push   0xc0038adc
c000c7b4:	e8 db 06 00 00       	call   c000ce94 <kprintf(char const*, ...)>
c000c7b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7bb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c7bf:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c7c3:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000c7c7:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000c7cb:	8d 50 01             	lea    edx,[eax+0x1]
c000c7ce:	c1 e0 03             	shl    eax,0x3
c000c7d1:	89 13                	mov    DWORD PTR [ebx],edx
c000c7d3:	83 c4 18             	add    esp,0x18
c000c7d6:	5b                   	pop    ebx
c000c7d7:	c3                   	ret    

c000c7d8 <GDT::getNumberOfEntries()>:
c000c7d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000c7de:	c3                   	ret    
c000c7df:	90                   	nop

c000c7e0 <GDT::flush()>:
c000c7e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7e4:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7e6:	83 c0 04             	add    eax,0x4
c000c7e9:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000c7f0:	a3 66 bb 03 c0       	mov    ds:0xc003bb66,eax
c000c7f5:	66 89 15 64 bb 03 c0 	mov    WORD PTR ds:0xc003bb64,dx
c000c7fc:	e9 5f 3b ff ff       	jmp    c0000360 <loadGDT>
c000c801:	90                   	nop

c000c802 <GDT::setup()>:
c000c802:	55                   	push   ebp
c000c803:	57                   	push   edi
c000c804:	56                   	push   esi
c000c805:	53                   	push   ebx
c000c806:	83 ec 3c             	sub    esp,0x3c
c000c809:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000c80d:	6a 00                	push   0x0
c000c80f:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000c813:	53                   	push   ebx
c000c814:	e8 33 ff ff ff       	call   c000c74c <GDTEntry::setBase(unsigned int)>
c000c819:	6a 00                	push   0x0
c000c81b:	53                   	push   ebx
c000c81c:	e8 47 ff ff ff       	call   c000c768 <GDTEntry::setLimit(unsigned int)>
c000c821:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000c829:	6a 00                	push   0x0
c000c82b:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000c82f:	53                   	push   ebx
c000c830:	e8 17 ff ff ff       	call   c000c74c <GDTEntry::setBase(unsigned int)>
c000c835:	68 ff ff ff 00       	push   0xffffff
c000c83a:	53                   	push   ebx
c000c83b:	e8 28 ff ff ff       	call   c000c768 <GDTEntry::setLimit(unsigned int)>
c000c840:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c844:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000c849:	0d 00 9a c0 00       	or     eax,0xc09a00
c000c84e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c852:	83 c4 20             	add    esp,0x20
c000c855:	6a 00                	push   0x0
c000c857:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000c85b:	53                   	push   ebx
c000c85c:	e8 eb fe ff ff       	call   c000c74c <GDTEntry::setBase(unsigned int)>
c000c861:	68 ff ff ff 00       	push   0xffffff
c000c866:	53                   	push   ebx
c000c867:	e8 fc fe ff ff       	call   c000c768 <GDTEntry::setLimit(unsigned int)>
c000c86c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c870:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c874:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000c878:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000c87c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c880:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000c885:	0d 00 92 c0 00       	or     eax,0xc09200
c000c88a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c88e:	89 d8                	mov    eax,ebx
c000c890:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000c894:	80 cc 60             	or     ah,0x60
c000c897:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c89b:	83 c4 0c             	add    esp,0xc
c000c89e:	89 f8                	mov    eax,edi
c000c8a0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c8a4:	80 cc 60             	or     ah,0x60
c000c8a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c8ab:	89 c7                	mov    edi,eax
c000c8ad:	55                   	push   ebp
c000c8ae:	e8 e9 fe ff ff       	call   c000c79c <GDT::addEntry(GDTEntry)>
c000c8b3:	83 c4 0c             	add    esp,0xc
c000c8b6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c8ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c8be:	55                   	push   ebp
c000c8bf:	e8 d8 fe ff ff       	call   c000c79c <GDT::addEntry(GDTEntry)>
c000c8c4:	83 c4 0c             	add    esp,0xc
c000c8c7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c8cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c8cf:	55                   	push   ebp
c000c8d0:	e8 c7 fe ff ff       	call   c000c79c <GDT::addEntry(GDTEntry)>
c000c8d5:	83 c4 0c             	add    esp,0xc
c000c8d8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c8dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c8e0:	53                   	push   ebx
c000c8e1:	51                   	push   ecx
c000c8e2:	55                   	push   ebp
c000c8e3:	e8 b4 fe ff ff       	call   c000c79c <GDT::addEntry(GDTEntry)>
c000c8e8:	83 c4 0c             	add    esp,0xc
c000c8eb:	57                   	push   edi
c000c8ec:	56                   	push   esi
c000c8ed:	55                   	push   ebp
c000c8ee:	e8 a9 fe ff ff       	call   c000c79c <GDT::addEntry(GDTEntry)>
c000c8f3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c8f6:	e8 e5 fe ff ff       	call   c000c7e0 <GDT::flush()>
c000c8fb:	83 c4 4c             	add    esp,0x4c
c000c8fe:	5b                   	pop    ebx
c000c8ff:	5e                   	pop    esi
c000c900:	5f                   	pop    edi
c000c901:	5d                   	pop    ebp
c000c902:	c3                   	ret    

c000c903 <idleFunction(void*)>:
c000c903:	53                   	push   ebx
c000c904:	83 ec 08             	sub    esp,0x8
c000c907:	e8 2c 1a 00 00       	call   c000e338 <unlockScheduler()>
c000c90c:	e8 39 a8 00 00       	call   c001714a <thisCPU()>
c000c911:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000c918:	74 41                	je     c000c95b <idleFunction(void*)+0x58>
c000c91a:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c000c91f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000c926:	74 33                	je     c000c95b <idleFunction(void*)+0x58>
c000c928:	31 db                	xor    ebx,ebx
c000c92a:	52                   	push   edx
c000c92b:	52                   	push   edx
c000c92c:	68 e1 00 00 00       	push   0xe1
c000c931:	50                   	push   eax
c000c932:	e8 b1 ec ff ff       	call   c000b5e8 <Computer::rdmsr(unsigned int)>
c000c937:	53                   	push   ebx
c000c938:	83 e0 02             	and    eax,0x2
c000c93b:	50                   	push   eax
c000c93c:	68 e1 00 00 00       	push   0xe1
c000c941:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c000c947:	e8 c8 ec ff ff       	call   c000b614 <Computer::wrmsr(unsigned int, unsigned long long)>
c000c94c:	83 c4 20             	add    esp,0x20
c000c94f:	e8 fc 37 ff ff       	call   c0000150 <doTPAUSE>
c000c954:	e8 27 20 01 00       	call   c001e980 <idleCommon()>
c000c959:	eb f4                	jmp    c000c94f <idleFunction(void*)+0x4c>
c000c95b:	fb                   	sti    
c000c95c:	f4                   	hlt    
c000c95d:	e8 1e 20 01 00       	call   c001e980 <idleCommon()>
c000c962:	eb f7                	jmp    c000c95b <idleFunction(void*)+0x58>

c000c964 <IDTEntry::IDTEntry(bool)>:
c000c964:	83 ec 04             	sub    esp,0x4
c000c967:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c96b:	88 04 24             	mov    BYTE PTR [esp],al
c000c96e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c972:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000c978:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c97c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000c980:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c984:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c987:	83 e2 f0             	and    edx,0xfffffff0
c000c98a:	83 ca 0e             	or     edx,0xe
c000c98d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c990:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c994:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c997:	83 e2 ef             	and    edx,0xffffffef
c000c99a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c99d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000c9a1:	74 04                	je     c000c9a7 <IDTEntry::IDTEntry(bool)+0x43>
c000c9a3:	b2 03                	mov    dl,0x3
c000c9a5:	eb 02                	jmp    c000c9a9 <IDTEntry::IDTEntry(bool)+0x45>
c000c9a7:	b2 00                	mov    dl,0x0
c000c9a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9ad:	83 e2 03             	and    edx,0x3
c000c9b0:	88 d1                	mov    cl,dl
c000c9b2:	c1 e1 05             	shl    ecx,0x5
c000c9b5:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c9b8:	83 e2 9f             	and    edx,0xffffff9f
c000c9bb:	09 ca                	or     edx,ecx
c000c9bd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c9c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9c4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c9c7:	83 ca 80             	or     edx,0xffffff80
c000c9ca:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c9cd:	90                   	nop
c000c9ce:	83 c4 04             	add    esp,0x4
c000c9d1:	c3                   	ret    

c000c9d2 <IDTEntry::setOffset(unsigned int)>:
c000c9d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c9d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9da:	66 89 02             	mov    WORD PTR [edx],ax
c000c9dd:	c1 e8 10             	shr    eax,0x10
c000c9e0:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000c9e4:	c3                   	ret    
c000c9e5:	90                   	nop

c000c9e6 <IDT::IDT()>:
c000c9e6:	90                   	nop
c000c9e7:	c3                   	ret    

c000c9e8 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000c9e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9ec:	83 c0 30             	add    eax,0x30
c000c9ef:	c3                   	ret    

c000c9f0 <IDT::addEntry(IDTEntry, int)>:
c000c9f0:	53                   	push   ebx
c000c9f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9f5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c9f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c9fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ca01:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ca04:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ca08:	5b                   	pop    ebx
c000ca09:	c3                   	ret    

c000ca0a <IDT::addEntry(int, void (*)(), bool)>:
c000ca0a:	53                   	push   ebx
c000ca0b:	83 ec 10             	sub    esp,0x10
c000ca0e:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ca13:	50                   	push   eax
c000ca14:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ca18:	53                   	push   ebx
c000ca19:	e8 46 ff ff ff       	call   c000c964 <IDTEntry::IDTEntry(bool)>
c000ca1e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ca22:	53                   	push   ebx
c000ca23:	e8 aa ff ff ff       	call   c000c9d2 <IDTEntry::setOffset(unsigned int)>
c000ca28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca2c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ca30:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ca34:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca38:	e8 b3 ff ff ff       	call   c000c9f0 <IDT::addEntry(IDTEntry, int)>
c000ca3d:	83 c4 30             	add    esp,0x30
c000ca40:	5b                   	pop    ebx
c000ca41:	c3                   	ret    

c000ca42 <IDT::flush()>:
c000ca42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca46:	66 c7 05 6c bb 03 c0 ff 07 	mov    WORD PTR ds:0xc003bb6c,0x7ff
c000ca4f:	a3 6e bb 03 c0       	mov    ds:0xc003bb6e,eax
c000ca54:	0f 01 1d 6c bb 03 c0 	lidtd  ds:0xc003bb6c
c000ca5b:	c3                   	ret    

c000ca5c <IDT::setup()>:
c000ca5c:	57                   	push   edi
c000ca5d:	56                   	push   esi
c000ca5e:	53                   	push   ebx
c000ca5f:	83 ec 10             	sub    esp,0x10
c000ca62:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ca66:	6a 00                	push   0x0
c000ca68:	68 80 03 00 c0       	push   0xc0000380
c000ca6d:	6a 00                	push   0x0
c000ca6f:	53                   	push   ebx
c000ca70:	e8 95 ff ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000ca75:	6a 00                	push   0x0
c000ca77:	68 90 03 00 c0       	push   0xc0000390
c000ca7c:	6a 01                	push   0x1
c000ca7e:	53                   	push   ebx
c000ca7f:	e8 86 ff ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000ca84:	83 c4 20             	add    esp,0x20
c000ca87:	6a 00                	push   0x0
c000ca89:	68 9a 03 00 c0       	push   0xc000039a
c000ca8e:	6a 02                	push   0x2
c000ca90:	53                   	push   ebx
c000ca91:	e8 74 ff ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000ca96:	6a 00                	push   0x0
c000ca98:	68 a4 03 00 c0       	push   0xc00003a4
c000ca9d:	6a 03                	push   0x3
c000ca9f:	53                   	push   ebx
c000caa0:	e8 65 ff ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000caa5:	83 c4 20             	add    esp,0x20
c000caa8:	6a 00                	push   0x0
c000caaa:	68 ae 03 00 c0       	push   0xc00003ae
c000caaf:	6a 04                	push   0x4
c000cab1:	53                   	push   ebx
c000cab2:	e8 53 ff ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cab7:	6a 00                	push   0x0
c000cab9:	68 b8 03 00 c0       	push   0xc00003b8
c000cabe:	6a 05                	push   0x5
c000cac0:	53                   	push   ebx
c000cac1:	e8 44 ff ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cac6:	83 c4 20             	add    esp,0x20
c000cac9:	6a 00                	push   0x0
c000cacb:	68 c2 03 00 c0       	push   0xc00003c2
c000cad0:	6a 06                	push   0x6
c000cad2:	53                   	push   ebx
c000cad3:	e8 32 ff ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cad8:	6a 00                	push   0x0
c000cada:	68 cc 03 00 c0       	push   0xc00003cc
c000cadf:	6a 07                	push   0x7
c000cae1:	53                   	push   ebx
c000cae2:	e8 23 ff ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cae7:	83 c4 20             	add    esp,0x20
c000caea:	6a 00                	push   0x0
c000caec:	68 d6 03 00 c0       	push   0xc00003d6
c000caf1:	6a 08                	push   0x8
c000caf3:	53                   	push   ebx
c000caf4:	e8 11 ff ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000caf9:	6a 00                	push   0x0
c000cafb:	68 de 03 00 c0       	push   0xc00003de
c000cb00:	6a 09                	push   0x9
c000cb02:	53                   	push   ebx
c000cb03:	e8 02 ff ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cb08:	83 c4 20             	add    esp,0x20
c000cb0b:	6a 00                	push   0x0
c000cb0d:	68 e8 03 00 c0       	push   0xc00003e8
c000cb12:	6a 0a                	push   0xa
c000cb14:	53                   	push   ebx
c000cb15:	e8 f0 fe ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cb1a:	6a 00                	push   0x0
c000cb1c:	68 f0 03 00 c0       	push   0xc00003f0
c000cb21:	6a 0b                	push   0xb
c000cb23:	53                   	push   ebx
c000cb24:	e8 e1 fe ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cb29:	83 c4 20             	add    esp,0x20
c000cb2c:	6a 00                	push   0x0
c000cb2e:	68 f8 03 00 c0       	push   0xc00003f8
c000cb33:	6a 0c                	push   0xc
c000cb35:	53                   	push   ebx
c000cb36:	e8 cf fe ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cb3b:	6a 00                	push   0x0
c000cb3d:	68 00 04 00 c0       	push   0xc0000400
c000cb42:	6a 0d                	push   0xd
c000cb44:	53                   	push   ebx
c000cb45:	e8 c0 fe ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cb4a:	83 c4 20             	add    esp,0x20
c000cb4d:	6a 00                	push   0x0
c000cb4f:	68 08 04 00 c0       	push   0xc0000408
c000cb54:	6a 0e                	push   0xe
c000cb56:	53                   	push   ebx
c000cb57:	e8 ae fe ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cb5c:	6a 00                	push   0x0
c000cb5e:	68 10 04 00 c0       	push   0xc0000410
c000cb63:	6a 0f                	push   0xf
c000cb65:	53                   	push   ebx
c000cb66:	e8 9f fe ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cb6b:	83 c4 20             	add    esp,0x20
c000cb6e:	6a 00                	push   0x0
c000cb70:	68 1a 04 00 c0       	push   0xc000041a
c000cb75:	6a 10                	push   0x10
c000cb77:	53                   	push   ebx
c000cb78:	e8 8d fe ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cb7d:	6a 00                	push   0x0
c000cb7f:	68 24 04 00 c0       	push   0xc0000424
c000cb84:	6a 11                	push   0x11
c000cb86:	53                   	push   ebx
c000cb87:	e8 7e fe ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cb8c:	83 c4 20             	add    esp,0x20
c000cb8f:	6a 00                	push   0x0
c000cb91:	68 2e 04 00 c0       	push   0xc000042e
c000cb96:	6a 12                	push   0x12
c000cb98:	53                   	push   ebx
c000cb99:	e8 6c fe ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cb9e:	6a 01                	push   0x1
c000cba0:	68 38 04 00 c0       	push   0xc0000438
c000cba5:	6a 60                	push   0x60
c000cba7:	53                   	push   ebx
c000cba8:	e8 5d fe ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cbad:	83 c4 20             	add    esp,0x20
c000cbb0:	6a 00                	push   0x0
c000cbb2:	68 42 04 00 c0       	push   0xc0000442
c000cbb7:	6a 20                	push   0x20
c000cbb9:	53                   	push   ebx
c000cbba:	e8 4b fe ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cbbf:	6a 00                	push   0x0
c000cbc1:	68 4c 04 00 c0       	push   0xc000044c
c000cbc6:	6a 21                	push   0x21
c000cbc8:	53                   	push   ebx
c000cbc9:	e8 3c fe ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cbce:	83 c4 20             	add    esp,0x20
c000cbd1:	6a 00                	push   0x0
c000cbd3:	68 56 04 00 c0       	push   0xc0000456
c000cbd8:	6a 22                	push   0x22
c000cbda:	53                   	push   ebx
c000cbdb:	e8 2a fe ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cbe0:	6a 00                	push   0x0
c000cbe2:	68 60 04 00 c0       	push   0xc0000460
c000cbe7:	6a 23                	push   0x23
c000cbe9:	53                   	push   ebx
c000cbea:	e8 1b fe ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cbef:	83 c4 20             	add    esp,0x20
c000cbf2:	6a 00                	push   0x0
c000cbf4:	68 6a 04 00 c0       	push   0xc000046a
c000cbf9:	6a 24                	push   0x24
c000cbfb:	53                   	push   ebx
c000cbfc:	e8 09 fe ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cc01:	6a 00                	push   0x0
c000cc03:	68 74 04 00 c0       	push   0xc0000474
c000cc08:	6a 25                	push   0x25
c000cc0a:	53                   	push   ebx
c000cc0b:	e8 fa fd ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cc10:	83 c4 20             	add    esp,0x20
c000cc13:	6a 00                	push   0x0
c000cc15:	68 7e 04 00 c0       	push   0xc000047e
c000cc1a:	6a 26                	push   0x26
c000cc1c:	53                   	push   ebx
c000cc1d:	e8 e8 fd ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cc22:	6a 00                	push   0x0
c000cc24:	68 88 04 00 c0       	push   0xc0000488
c000cc29:	6a 27                	push   0x27
c000cc2b:	53                   	push   ebx
c000cc2c:	e8 d9 fd ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cc31:	83 c4 20             	add    esp,0x20
c000cc34:	6a 00                	push   0x0
c000cc36:	68 92 04 00 c0       	push   0xc0000492
c000cc3b:	6a 28                	push   0x28
c000cc3d:	53                   	push   ebx
c000cc3e:	e8 c7 fd ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cc43:	6a 00                	push   0x0
c000cc45:	68 9c 04 00 c0       	push   0xc000049c
c000cc4a:	6a 29                	push   0x29
c000cc4c:	53                   	push   ebx
c000cc4d:	e8 b8 fd ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cc52:	83 c4 20             	add    esp,0x20
c000cc55:	6a 00                	push   0x0
c000cc57:	68 a6 04 00 c0       	push   0xc00004a6
c000cc5c:	6a 2a                	push   0x2a
c000cc5e:	53                   	push   ebx
c000cc5f:	e8 a6 fd ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cc64:	6a 00                	push   0x0
c000cc66:	68 b0 04 00 c0       	push   0xc00004b0
c000cc6b:	6a 2b                	push   0x2b
c000cc6d:	53                   	push   ebx
c000cc6e:	e8 97 fd ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cc73:	83 c4 20             	add    esp,0x20
c000cc76:	6a 00                	push   0x0
c000cc78:	68 ba 04 00 c0       	push   0xc00004ba
c000cc7d:	6a 2c                	push   0x2c
c000cc7f:	53                   	push   ebx
c000cc80:	e8 85 fd ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cc85:	6a 00                	push   0x0
c000cc87:	68 c4 04 00 c0       	push   0xc00004c4
c000cc8c:	6a 2d                	push   0x2d
c000cc8e:	53                   	push   ebx
c000cc8f:	e8 76 fd ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cc94:	83 c4 20             	add    esp,0x20
c000cc97:	6a 00                	push   0x0
c000cc99:	68 ce 04 00 c0       	push   0xc00004ce
c000cc9e:	6a 2e                	push   0x2e
c000cca0:	53                   	push   ebx
c000cca1:	e8 64 fd ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cca6:	6a 00                	push   0x0
c000cca8:	68 d8 04 00 c0       	push   0xc00004d8
c000ccad:	6a 2f                	push   0x2f
c000ccaf:	53                   	push   ebx
c000ccb0:	e8 55 fd ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000ccb5:	83 c4 20             	add    esp,0x20
c000ccb8:	6a 00                	push   0x0
c000ccba:	68 e2 04 00 c0       	push   0xc00004e2
c000ccbf:	6a 30                	push   0x30
c000ccc1:	53                   	push   ebx
c000ccc2:	e8 43 fd ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000ccc7:	6a 00                	push   0x0
c000ccc9:	68 ec 04 00 c0       	push   0xc00004ec
c000ccce:	6a 31                	push   0x31
c000ccd0:	53                   	push   ebx
c000ccd1:	e8 34 fd ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000ccd6:	83 c4 20             	add    esp,0x20
c000ccd9:	6a 00                	push   0x0
c000ccdb:	68 f6 04 00 c0       	push   0xc00004f6
c000cce0:	6a 32                	push   0x32
c000cce2:	53                   	push   ebx
c000cce3:	e8 22 fd ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cce8:	6a 00                	push   0x0
c000ccea:	68 00 05 00 c0       	push   0xc0000500
c000ccef:	6a 33                	push   0x33
c000ccf1:	53                   	push   ebx
c000ccf2:	e8 13 fd ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000ccf7:	83 c4 20             	add    esp,0x20
c000ccfa:	6a 00                	push   0x0
c000ccfc:	68 0a 05 00 c0       	push   0xc000050a
c000cd01:	6a 34                	push   0x34
c000cd03:	53                   	push   ebx
c000cd04:	e8 01 fd ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cd09:	6a 00                	push   0x0
c000cd0b:	68 14 05 00 c0       	push   0xc0000514
c000cd10:	6a 35                	push   0x35
c000cd12:	53                   	push   ebx
c000cd13:	e8 f2 fc ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cd18:	83 c4 20             	add    esp,0x20
c000cd1b:	6a 00                	push   0x0
c000cd1d:	68 1e 05 00 c0       	push   0xc000051e
c000cd22:	6a 36                	push   0x36
c000cd24:	53                   	push   ebx
c000cd25:	e8 e0 fc ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cd2a:	6a 00                	push   0x0
c000cd2c:	68 28 05 00 c0       	push   0xc0000528
c000cd31:	6a 37                	push   0x37
c000cd33:	53                   	push   ebx
c000cd34:	e8 d1 fc ff ff       	call   c000ca0a <IDT::addEntry(int, void (*)(), bool)>
c000cd39:	83 c4 20             	add    esp,0x20
c000cd3c:	e8 02 47 00 00       	call   c0011443 <Virt::getAKernelVAS()>
c000cd41:	52                   	push   edx
c000cd42:	6a 03                	push   0x3
c000cd44:	6a 02                	push   0x2
c000cd46:	50                   	push   eax
c000cd47:	e8 9e 4c 00 00       	call   c00119ea <VAS::allocatePages(int, int)>
c000cd4c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000cd53:	89 c6                	mov    esi,eax
c000cd55:	e8 ea 56 00 00       	call   c0012444 <operator new(unsigned long)>
c000cd5a:	81 c6 00 20 00 00    	add    esi,0x2000
c000cd60:	89 04 24             	mov    DWORD PTR [esp],eax
c000cd63:	89 c7                	mov    edi,eax
c000cd65:	e8 30 40 00 00       	call   c0010d9a <TSS::TSS()>
c000cd6a:	83 c4 0c             	add    esp,0xc
c000cd6d:	68 d6 03 00 c0       	push   0xc00003d6
c000cd72:	56                   	push   esi
c000cd73:	57                   	push   edi
c000cd74:	e8 61 40 00 00       	call   c0010dda <TSS::setup(unsigned long, unsigned long)>
c000cd79:	59                   	pop    ecx
c000cd7a:	89 c6                	mov    esi,eax
c000cd7c:	5f                   	pop    edi
c000cd7d:	6a 00                	push   0x0
c000cd7f:	8d 44 24 14          	lea    eax,[esp+0x14]
c000cd83:	50                   	push   eax
c000cd84:	e8 db fb ff ff       	call   c000c964 <IDTEntry::IDTEntry(bool)>
c000cd89:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd8d:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000cd92:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000cd99:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000cd9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cda3:	80 ce 05             	or     dh,0x5
c000cda6:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000cda9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cdb1:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000cdb4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cdb7:	e8 86 fc ff ff       	call   c000ca42 <IDT::flush()>
c000cdbc:	83 c4 20             	add    esp,0x20
c000cdbf:	5b                   	pop    ebx
c000cdc0:	5e                   	pop    esi
c000cdc1:	5f                   	pop    edi
c000cdc2:	c3                   	ret    

c000cdc3 <stringifyxWithBase(unsigned int, char*, int)>:
c000cdc3:	57                   	push   edi
c000cdc4:	b9 3f 00 00 00       	mov    ecx,0x3f
c000cdc9:	56                   	push   esi
c000cdca:	be f8 8a 03 c0       	mov    esi,0xc0038af8
c000cdcf:	53                   	push   ebx
c000cdd0:	83 ec 40             	sub    esp,0x40
c000cdd3:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000cdd7:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000cddb:	fc                   	cld    
c000cddc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cdde:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000cde2:	83 f9 3e             	cmp    ecx,0x3e
c000cde5:	7e 05                	jle    c000cdec <stringifyxWithBase(unsigned int, char*, int)+0x29>
c000cde7:	b9 3e 00 00 00       	mov    ecx,0x3e
c000cdec:	89 df                	mov    edi,ebx
c000cdee:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000cdf2:	eb 02                	jmp    c000cdf6 <stringifyxWithBase(unsigned int, char*, int)+0x33>
c000cdf4:	89 c7                	mov    edi,eax
c000cdf6:	31 d2                	xor    edx,edx
c000cdf8:	46                   	inc    esi
c000cdf9:	89 f8                	mov    eax,edi
c000cdfb:	f7 f1                	div    ecx
c000cdfd:	39 cf                	cmp    edi,ecx
c000cdff:	73 f3                	jae    c000cdf4 <stringifyxWithBase(unsigned int, char*, int)+0x31>
c000ce01:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ce04:	eb 02                	jmp    c000ce08 <stringifyxWithBase(unsigned int, char*, int)+0x45>
c000ce06:	89 c3                	mov    ebx,eax
c000ce08:	31 d2                	xor    edx,edx
c000ce0a:	4e                   	dec    esi
c000ce0b:	89 d8                	mov    eax,ebx
c000ce0d:	f7 f1                	div    ecx
c000ce0f:	39 cb                	cmp    ebx,ecx
c000ce11:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000ce15:	88 16                	mov    BYTE PTR [esi],dl
c000ce17:	73 ed                	jae    c000ce06 <stringifyxWithBase(unsigned int, char*, int)+0x43>
c000ce19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ce1d:	83 c4 40             	add    esp,0x40
c000ce20:	5b                   	pop    ebx
c000ce21:	5e                   	pop    esi
c000ce22:	5f                   	pop    edi
c000ce23:	c3                   	ret    

c000ce24 <logc(char)>:
c000ce24:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ce28:	ba fd 03 00 00       	mov    edx,0x3fd
c000ce2d:	ec                   	in     al,dx
c000ce2e:	a8 20                	test   al,0x20
c000ce30:	74 fb                	je     c000ce2d <logc(char)+0x9>
c000ce32:	ba f8 03 00 00       	mov    edx,0x3f8
c000ce37:	88 c8                	mov    al,cl
c000ce39:	ee                   	out    dx,al
c000ce3a:	c3                   	ret    

c000ce3b <logs(char*)>:
c000ce3b:	53                   	push   ebx
c000ce3c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ce40:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ce43:	84 c0                	test   al,al
c000ce45:	74 0f                	je     c000ce56 <logs(char*)+0x1b>
c000ce47:	50                   	push   eax
c000ce48:	43                   	inc    ebx
c000ce49:	e8 d6 ff ff ff       	call   c000ce24 <logc(char)>
c000ce4e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ce51:	5a                   	pop    edx
c000ce52:	84 c0                	test   al,al
c000ce54:	75 f1                	jne    c000ce47 <logs(char*)+0xc>
c000ce56:	5b                   	pop    ebx
c000ce57:	c3                   	ret    

c000ce58 <logWriteInt(unsigned int)>:
c000ce58:	83 ec 10             	sub    esp,0x10
c000ce5b:	6a 0a                	push   0xa
c000ce5d:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ce61:	50                   	push   eax
c000ce62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce66:	e8 58 ff ff ff       	call   c000cdc3 <stringifyxWithBase(unsigned int, char*, int)>
c000ce6b:	50                   	push   eax
c000ce6c:	e8 ca ff ff ff       	call   c000ce3b <logs(char*)>
c000ce71:	83 c4 20             	add    esp,0x20
c000ce74:	c3                   	ret    

c000ce75 <logWriteIntBase(unsigned int, int)>:
c000ce75:	83 ec 10             	sub    esp,0x10
c000ce78:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce7c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ce80:	50                   	push   eax
c000ce81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce85:	e8 39 ff ff ff       	call   c000cdc3 <stringifyxWithBase(unsigned int, char*, int)>
c000ce8a:	50                   	push   eax
c000ce8b:	e8 ab ff ff ff       	call   c000ce3b <logs(char*)>
c000ce90:	83 c4 20             	add    esp,0x20
c000ce93:	c3                   	ret    

c000ce94 <kprintf(char const*, ...)>:
c000ce94:	55                   	push   ebp
c000ce95:	57                   	push   edi
c000ce96:	56                   	push   esi
c000ce97:	53                   	push   ebx
c000ce98:	83 ec 0c             	sub    esp,0xc
c000ce9b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ce9f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cea3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cea7:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ceaa:	84 c0                	test   al,al
c000ceac:	74 4a                	je     c000cef8 <kprintf(char const*, ...)+0x64>
c000ceae:	31 db                	xor    ebx,ebx
c000ceb0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ceb3:	3c 25                	cmp    al,0x25
c000ceb5:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000ceb8:	0f 85 e4 00 00 00    	jne    c000cfa2 <kprintf(char const*, ...)+0x10e>
c000cebe:	83 c3 02             	add    ebx,0x2
c000cec1:	8a 07                	mov    al,BYTE PTR [edi]
c000cec3:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000cec6:	83 e8 25             	sub    eax,0x25
c000cec9:	3c 53                	cmp    al,0x53
c000cecb:	0f 87 ba 00 00 00    	ja     c000cf8b <kprintf(char const*, ...)+0xf7>
c000ced1:	0f b6 c0             	movzx  eax,al
c000ced4:	ff 24 85 4c 8c 03 c0 	jmp    DWORD PTR [eax*4-0x3ffc73b4]
c000cedb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cedf:	89 c8                	mov    eax,ecx
c000cee1:	83 c1 04             	add    ecx,0x4
c000cee4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cee8:	ff 30                	push   DWORD PTR [eax]
c000ceea:	e8 4c ff ff ff       	call   c000ce3b <logs(char*)>
c000ceef:	58                   	pop    eax
c000cef0:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cef4:	84 c0                	test   al,al
c000cef6:	75 b8                	jne    c000ceb0 <kprintf(char const*, ...)+0x1c>
c000cef8:	83 c4 0c             	add    esp,0xc
c000cefb:	5b                   	pop    ebx
c000cefc:	5e                   	pop    esi
c000cefd:	5f                   	pop    edi
c000cefe:	5d                   	pop    ebp
c000ceff:	c3                   	ret    
c000cf00:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cf04:	89 d0                	mov    eax,edx
c000cf06:	83 c2 04             	add    edx,0x4
c000cf09:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cf0d:	ff 30                	push   DWORD PTR [eax]
c000cf0f:	e8 44 ff ff ff       	call   c000ce58 <logWriteInt(unsigned int)>
c000cf14:	58                   	pop    eax
c000cf15:	eb d9                	jmp    c000cef0 <kprintf(char const*, ...)+0x5c>
c000cf17:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cf1b:	89 d0                	mov    eax,edx
c000cf1d:	83 c2 04             	add    edx,0x4
c000cf20:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cf23:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cf27:	50                   	push   eax
c000cf28:	e8 f7 fe ff ff       	call   c000ce24 <logc(char)>
c000cf2d:	58                   	pop    eax
c000cf2e:	eb c0                	jmp    c000cef0 <kprintf(char const*, ...)+0x5c>
c000cf30:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cf34:	89 c8                	mov    eax,ecx
c000cf36:	83 c1 04             	add    ecx,0x4
c000cf39:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cf3d:	ff 30                	push   DWORD PTR [eax]
c000cf3f:	e8 14 ff ff ff       	call   c000ce58 <logWriteInt(unsigned int)>
c000cf44:	5f                   	pop    edi
c000cf45:	eb a9                	jmp    c000cef0 <kprintf(char const*, ...)+0x5c>
c000cf47:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cf4b:	89 c8                	mov    eax,ecx
c000cf4d:	83 c1 04             	add    ecx,0x4
c000cf50:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cf54:	6a 10                	push   0x10
c000cf56:	ff 30                	push   DWORD PTR [eax]
c000cf58:	e8 18 ff ff ff       	call   c000ce75 <logWriteIntBase(unsigned int, int)>
c000cf5d:	59                   	pop    ecx
c000cf5e:	5f                   	pop    edi
c000cf5f:	eb 8f                	jmp    c000cef0 <kprintf(char const*, ...)+0x5c>
c000cf61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cf65:	89 d0                	mov    eax,edx
c000cf67:	83 c2 08             	add    edx,0x8
c000cf6a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cf6e:	6a 10                	push   0x10
c000cf70:	ff 30                	push   DWORD PTR [eax]
c000cf72:	e8 fe fe ff ff       	call   c000ce75 <logWriteIntBase(unsigned int, int)>
c000cf77:	58                   	pop    eax
c000cf78:	5a                   	pop    edx
c000cf79:	e9 72 ff ff ff       	jmp    c000cef0 <kprintf(char const*, ...)+0x5c>
c000cf7e:	6a 25                	push   0x25
c000cf80:	e8 9f fe ff ff       	call   c000ce24 <logc(char)>
c000cf85:	58                   	pop    eax
c000cf86:	e9 65 ff ff ff       	jmp    c000cef0 <kprintf(char const*, ...)+0x5c>
c000cf8b:	6a 25                	push   0x25
c000cf8d:	e8 92 fe ff ff       	call   c000ce24 <logc(char)>
c000cf92:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000cf95:	50                   	push   eax
c000cf96:	e8 89 fe ff ff       	call   c000ce24 <logc(char)>
c000cf9b:	5a                   	pop    edx
c000cf9c:	59                   	pop    ecx
c000cf9d:	e9 4e ff ff ff       	jmp    c000cef0 <kprintf(char const*, ...)+0x5c>
c000cfa2:	50                   	push   eax
c000cfa3:	89 eb                	mov    ebx,ebp
c000cfa5:	e8 7a fe ff ff       	call   c000ce24 <logc(char)>
c000cfaa:	89 fd                	mov    ebp,edi
c000cfac:	58                   	pop    eax
c000cfad:	e9 3e ff ff ff       	jmp    c000cef0 <kprintf(char const*, ...)+0x5c>

c000cfb2 <panic(char const*)>:
c000cfb2:	55                   	push   ebp
c000cfb3:	89 e5                	mov    ebp,esp
c000cfb5:	53                   	push   ebx
c000cfb6:	50                   	push   eax
c000cfb7:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000cfba:	fa                   	cli    
c000cfbb:	c6 05 72 bb 03 c0 01 	mov    BYTE PTR ds:0xc003bb72,0x1
c000cfc2:	53                   	push   ebx
c000cfc3:	c6 05 00 ae 03 c0 00 	mov    BYTE PTR ds:0xc003ae00,0x0
c000cfca:	68 9c 8d 03 c0       	push   0xc0038d9c
c000cfcf:	e8 c0 fe ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c000cfd4:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000cfd9:	52                   	push   edx
c000cfda:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cfe0:	e8 36 36 00 00       	call   c001061b <setActiveTerminal(VgaText*)>
c000cfe5:	83 c4 0c             	add    esp,0xc
c000cfe8:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000cfed:	6a 01                	push   0x1
c000cfef:	6a 0f                	push   0xf
c000cff1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cff7:	e8 5e 30 00 00       	call   c001005a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000cffc:	59                   	pop    ecx
c000cffd:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d002:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d008:	e8 af 38 00 00       	call   c00108bc <VgaText::clearScreen()>
c000d00d:	58                   	pop    eax
c000d00e:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d013:	5a                   	pop    edx
c000d014:	68 b5 8d 03 c0       	push   0xc0038db5
c000d019:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d01f:	e8 16 3a 00 00       	call   c0010a3a <VgaText::puts(char const*)>
c000d024:	59                   	pop    ecx
c000d025:	58                   	pop    eax
c000d026:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d02b:	68 38 8b 03 c0       	push   0xc0038b38
c000d030:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d036:	e8 ff 39 00 00       	call   c0010a3a <VgaText::puts(char const*)>
c000d03b:	58                   	pop    eax
c000d03c:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d041:	5a                   	pop    edx
c000d042:	68 d1 8d 03 c0       	push   0xc0038dd1
c000d047:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d04d:	e8 e8 39 00 00       	call   c0010a3a <VgaText::puts(char const*)>
c000d052:	59                   	pop    ecx
c000d053:	58                   	pop    eax
c000d054:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d059:	53                   	push   ebx
c000d05a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d060:	e8 d5 39 00 00       	call   c0010a3a <VgaText::puts(char const*)>
c000d065:	58                   	pop    eax
c000d066:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d06b:	5a                   	pop    edx
c000d06c:	68 f1 8d 03 c0       	push   0xc0038df1
c000d071:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d077:	e8 be 39 00 00       	call   c0010a3a <VgaText::puts(char const*)>
c000d07c:	59                   	pop    ecx
c000d07d:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d082:	5b                   	pop    ebx
c000d083:	68 74 8b 03 c0       	push   0xc0038b74
c000d088:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d08e:	e8 a7 39 00 00       	call   c0010a3a <VgaText::puts(char const*)>
c000d093:	58                   	pop    eax
c000d094:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d099:	5a                   	pop    edx
c000d09a:	68 d1 8d 03 c0       	push   0xc0038dd1
c000d09f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0a5:	e8 90 39 00 00       	call   c0010a3a <VgaText::puts(char const*)>
c000d0aa:	59                   	pop    ecx
c000d0ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d0b0:	5b                   	pop    ebx
c000d0b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d0b4:	83 c0 0c             	add    eax,0xc
c000d0b7:	50                   	push   eax
c000d0b8:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d0bd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0c3:	e8 72 39 00 00       	call   c0010a3a <VgaText::puts(char const*)>
c000d0c8:	58                   	pop    eax
c000d0c9:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d0ce:	5a                   	pop    edx
c000d0cf:	68 f0 8d 03 c0       	push   0xc0038df0
c000d0d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0da:	e8 5b 39 00 00       	call   c0010a3a <VgaText::puts(char const*)>
c000d0df:	59                   	pop    ecx
c000d0e0:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d0e5:	5b                   	pop    ebx
c000d0e6:	68 a0 8b 03 c0       	push   0xc0038ba0
c000d0eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0f1:	e8 44 39 00 00       	call   c0010a3a <VgaText::puts(char const*)>
c000d0f6:	58                   	pop    eax
c000d0f7:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d0fc:	5a                   	pop    edx
c000d0fd:	68 e0 8b 03 c0       	push   0xc0038be0
c000d102:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d108:	e8 2d 39 00 00       	call   c0010a3a <VgaText::puts(char const*)>
c000d10d:	59                   	pop    ecx
c000d10e:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d113:	5b                   	pop    ebx
c000d114:	68 dc 8d 03 c0       	push   0xc0038ddc
c000d119:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d11f:	e8 16 39 00 00       	call   c0010a3a <VgaText::puts(char const*)>
c000d124:	58                   	pop    eax
c000d125:	5a                   	pop    edx
c000d126:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d129:	68 f4 8d 03 c0       	push   0xc0038df4
c000d12e:	e8 61 fd ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c000d133:	59                   	pop    ecx
c000d134:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d137:	5b                   	pop    ebx
c000d138:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d13b:	68 fd 8d 03 c0       	push   0xc0038dfd
c000d140:	e8 4f fd ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c000d145:	5a                   	pop    edx
c000d146:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d149:	59                   	pop    ecx
c000d14a:	8b 00                	mov    eax,DWORD PTR [eax]
c000d14c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d14f:	68 99 9c 03 c0       	push   0xc0039c99
c000d154:	e8 3b fd ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c000d159:	5b                   	pop    ebx
c000d15a:	58                   	pop    eax
c000d15b:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d160:	68 24 8c 03 c0       	push   0xc0038c24
c000d165:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d16b:	e8 ca 38 00 00       	call   c0010a3a <VgaText::puts(char const*)>
c000d170:	58                   	pop    eax
c000d171:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d176:	5a                   	pop    edx
c000d177:	68 06 8e 03 c0       	push   0xc0038e06
c000d17c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d182:	e8 b3 38 00 00       	call   c0010a3a <VgaText::puts(char const*)>
c000d187:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d18c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d192:	e8 fe 17 01 00       	call   c001e995 <CPU::readCR0()>
c000d197:	59                   	pop    ecx
c000d198:	5a                   	pop    edx
c000d199:	50                   	push   eax
c000d19a:	53                   	push   ebx
c000d19b:	e8 c0 38 00 00       	call   c0010a60 <VgaText::putx(unsigned int)>
c000d1a0:	59                   	pop    ecx
c000d1a1:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d1a6:	5b                   	pop    ebx
c000d1a7:	68 10 8e 03 c0       	push   0xc0038e10
c000d1ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d1b2:	e8 83 38 00 00       	call   c0010a3a <VgaText::puts(char const*)>
c000d1b7:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d1bc:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d1c2:	e8 e0 17 01 00       	call   c001e9a7 <CPU::readCR2()>
c000d1c7:	5a                   	pop    edx
c000d1c8:	59                   	pop    ecx
c000d1c9:	50                   	push   eax
c000d1ca:	53                   	push   ebx
c000d1cb:	e8 90 38 00 00       	call   c0010a60 <VgaText::putx(unsigned int)>
c000d1d0:	5b                   	pop    ebx
c000d1d1:	58                   	pop    eax
c000d1d2:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d1d7:	68 1a 8e 03 c0       	push   0xc0038e1a
c000d1dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d1e2:	e8 53 38 00 00       	call   c0010a3a <VgaText::puts(char const*)>
c000d1e7:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d1ec:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d1f2:	e8 c2 17 01 00       	call   c001e9b9 <CPU::readCR3()>
c000d1f7:	5a                   	pop    edx
c000d1f8:	59                   	pop    ecx
c000d1f9:	50                   	push   eax
c000d1fa:	53                   	push   ebx
c000d1fb:	e8 60 38 00 00       	call   c0010a60 <VgaText::putx(unsigned int)>
c000d200:	5b                   	pop    ebx
c000d201:	58                   	pop    eax
c000d202:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d207:	68 2d 8e 03 c0       	push   0xc0038e2d
c000d20c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d212:	e8 23 38 00 00       	call   c0010a3a <VgaText::puts(char const*)>
c000d217:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d21c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d222:	e8 a4 17 01 00       	call   c001e9cb <CPU::readCR4()>
c000d227:	5a                   	pop    edx
c000d228:	59                   	pop    ecx
c000d229:	50                   	push   eax
c000d22a:	53                   	push   ebx
c000d22b:	e8 30 38 00 00       	call   c0010a60 <VgaText::putx(unsigned int)>
c000d230:	5b                   	pop    ebx
c000d231:	58                   	pop    eax
c000d232:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d237:	68 37 8e 03 c0       	push   0xc0038e37
c000d23c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d242:	e8 f3 37 00 00       	call   c0010a3a <VgaText::puts(char const*)>
c000d247:	5a                   	pop    edx
c000d248:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d24d:	59                   	pop    ecx
c000d24e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d254:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d257:	50                   	push   eax
c000d258:	e8 03 38 00 00       	call   c0010a60 <VgaText::putx(unsigned int)>
c000d25d:	5b                   	pop    ebx
c000d25e:	58                   	pop    eax
c000d25f:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d264:	68 4e 8e 03 c0       	push   0xc0038e4e
c000d269:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d26f:	e8 c6 37 00 00       	call   c0010a3a <VgaText::puts(char const*)>
c000d274:	5a                   	pop    edx
c000d275:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d27a:	59                   	pop    ecx
c000d27b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d281:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d284:	ff 72 04             	push   DWORD PTR [edx+0x4]
c000d287:	50                   	push   eax
c000d288:	e8 d3 37 00 00       	call   c0010a60 <VgaText::putx(unsigned int)>
c000d28d:	5b                   	pop    ebx
c000d28e:	58                   	pop    eax
c000d28f:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d294:	68 4e 8e 03 c0       	push   0xc0038e4e
c000d299:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d29f:	e8 96 37 00 00       	call   c0010a3a <VgaText::puts(char const*)>
c000d2a4:	59                   	pop    ecx
c000d2a5:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c000d2aa:	5b                   	pop    ebx
c000d2ab:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d2b1:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d2b4:	8b 12                	mov    edx,DWORD PTR [edx]
c000d2b6:	ff 72 04             	push   DWORD PTR [edx+0x4]
c000d2b9:	50                   	push   eax
c000d2ba:	e8 a1 37 00 00       	call   c0010a60 <VgaText::putx(unsigned int)>
c000d2bf:	83 c4 10             	add    esp,0x10
c000d2c2:	b2 fe                	mov    dl,0xfe
c000d2c4:	e4 60                	in     al,0x60
c000d2c6:	3c 1c                	cmp    al,0x1c
c000d2c8:	74 04                	je     c000d2ce <panic(char const*)+0x31c>
c000d2ca:	3c 5a                	cmp    al,0x5a
c000d2cc:	75 f6                	jne    c000d2c4 <panic(char const*)+0x312>
c000d2ce:	e4 64                	in     al,0x64
c000d2d0:	a8 02                	test   al,0x2
c000d2d2:	75 fa                	jne    c000d2ce <panic(char const*)+0x31c>
c000d2d4:	88 d0                	mov    al,dl
c000d2d6:	e6 64                	out    0x64,al
c000d2d8:	fa                   	cli    
c000d2d9:	f4                   	hlt    
c000d2da:	eb e8                	jmp    c000d2c4 <panic(char const*)+0x312>

c000d2dc <sbrk>:
c000d2dc:	55                   	push   ebp
c000d2dd:	57                   	push   edi
c000d2de:	56                   	push   esi
c000d2df:	53                   	push   ebx
c000d2e0:	83 ec 1c             	sub    esp,0x1c
c000d2e3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d2e7:	85 db                	test   ebx,ebx
c000d2e9:	74 37                	je     c000d322 <sbrk+0x46>
c000d2eb:	78 3f                	js     c000d32c <sbrk+0x50>
c000d2ed:	e8 58 9e 00 00       	call   c001714a <thisCPU()>
c000d2f2:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000d2f8:	83 e0 01             	and    eax,0x1
c000d2fb:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000d2ff:	a1 ec ad 03 c0       	mov    eax,ds:0xc003adec
c000d304:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d308:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000d30e:	89 d8                	mov    eax,ebx
c000d310:	78 35                	js     c000d347 <sbrk+0x6b>
c000d312:	c1 f8 0c             	sar    eax,0xc
c000d315:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d319:	89 c7                	mov    edi,eax
c000d31b:	be 00 00 00 00       	mov    esi,0x0
c000d320:	eb 3c                	jmp    c000d35e <sbrk+0x82>
c000d322:	a1 ec ad 03 c0       	mov    eax,ds:0xc003adec
c000d327:	e9 ad 00 00 00       	jmp    c000d3d9 <sbrk+0xfd>
c000d32c:	83 ec 08             	sub    esp,0x8
c000d32f:	53                   	push   ebx
c000d330:	68 54 8e 03 c0       	push   0xc0038e54
c000d335:	e8 5a fb ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c000d33a:	83 c4 10             	add    esp,0x10
c000d33d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d342:	e9 92 00 00 00       	jmp    c000d3d9 <sbrk+0xfd>
c000d347:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000d34d:	eb c3                	jmp    c000d312 <sbrk+0x36>
c000d34f:	81 05 ec ad 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc003adec,0x1000
c000d359:	46                   	inc    esi
c000d35a:	39 f7                	cmp    edi,esi
c000d35c:	74 34                	je     c000d392 <sbrk+0xb6>
c000d35e:	e8 e0 40 00 00       	call   c0011443 <Virt::getAKernelVAS()>
c000d363:	89 c3                	mov    ebx,eax
c000d365:	8b 2d ec ad 03 c0    	mov    ebp,DWORD PTR ds:0xc003adec
c000d36b:	e8 c9 06 00 00       	call   c000da39 <Phys::allocatePage()>
c000d370:	68 01 04 00 00       	push   0x401
c000d375:	55                   	push   ebp
c000d376:	50                   	push   eax
c000d377:	53                   	push   ebx
c000d378:	e8 6d 45 00 00       	call   c00118ea <VAS::mapPage(unsigned long, unsigned long, int)>
c000d37d:	83 c4 10             	add    esp,0x10
c000d380:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d385:	74 c8                	je     c000d34f <sbrk+0x73>
c000d387:	8b 1d ec ad 03 c0    	mov    ebx,DWORD PTR ds:0xc003adec
c000d38d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000d390:	eb bd                	jmp    c000d34f <sbrk+0x73>
c000d392:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d397:	74 48                	je     c000d3e1 <sbrk+0x105>
c000d399:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d39d:	89 d3                	mov    ebx,edx
c000d39f:	c1 eb 0a             	shr    ebx,0xa
c000d3a2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000d3a8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000d3ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3b2:	c1 e0 0c             	shl    eax,0xc
c000d3b5:	01 d0                	add    eax,edx
c000d3b7:	c1 e8 0a             	shr    eax,0xa
c000d3ba:	25 00 f0 ff ff       	and    eax,0xfffff000
c000d3bf:	2d 00 00 40 00       	sub    eax,0x400000
c000d3c4:	39 c3                	cmp    ebx,eax
c000d3c6:	77 0d                	ja     c000d3d5 <sbrk+0xf9>
c000d3c8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000d3cb:	81 c3 00 10 00 00    	add    ebx,0x1000
c000d3d1:	39 d8                	cmp    eax,ebx
c000d3d3:	73 f3                	jae    c000d3c8 <sbrk+0xec>
c000d3d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d3d9:	83 c4 1c             	add    esp,0x1c
c000d3dc:	5b                   	pop    ebx
c000d3dd:	5e                   	pop    esi
c000d3de:	5f                   	pop    edi
c000d3df:	5d                   	pop    ebp
c000d3e0:	c3                   	ret    
c000d3e1:	e8 d3 15 01 00       	call   c001e9b9 <CPU::readCR3()>
c000d3e6:	83 ec 0c             	sub    esp,0xc
c000d3e9:	50                   	push   eax
c000d3ea:	e8 ee 15 01 00       	call   c001e9dd <CPU::writeCR3(unsigned long)>
c000d3ef:	83 c4 10             	add    esp,0x10
c000d3f2:	eb e1                	jmp    c000d3d5 <sbrk+0xf9>

c000d3f4 <mmap>:
c000d3f4:	83 ec 18             	sub    esp,0x18
c000d3f7:	68 84 8e 03 c0       	push   0xc0038e84
c000d3fc:	e8 b1 fb ff ff       	call   c000cfb2 <panic(char const*)>
c000d401:	b8 00 00 00 00       	mov    eax,0x0
c000d406:	83 c4 1c             	add    esp,0x1c
c000d409:	c3                   	ret    

c000d40a <munmap>:
c000d40a:	83 ec 18             	sub    esp,0x18
c000d40d:	68 89 8e 03 c0       	push   0xc0038e89
c000d412:	e8 9b fb ff ff       	call   c000cfb2 <panic(char const*)>
c000d417:	b8 00 00 00 00       	mov    eax,0x0
c000d41c:	83 c4 1c             	add    esp,0x1c
c000d41f:	c3                   	ret    

c000d420 <liballoc_lock()>:
c000d420:	83 ec 0c             	sub    esp,0xc
c000d423:	e8 0e 0f 00 00       	call   c000e336 <lockScheduler()>
c000d428:	b8 00 00 00 00       	mov    eax,0x0
c000d42d:	83 c4 0c             	add    esp,0xc
c000d430:	c3                   	ret    

c000d431 <liballoc_unlock()>:
c000d431:	83 ec 0c             	sub    esp,0xc
c000d434:	e8 ff 0e 00 00       	call   c000e338 <unlockScheduler()>
c000d439:	b8 00 00 00 00       	mov    eax,0x0
c000d43e:	83 c4 0c             	add    esp,0xc
c000d441:	c3                   	ret    

c000d442 <liballoc_alloc(int)>:
c000d442:	83 ec 0c             	sub    esp,0xc
c000d445:	e8 f9 3f 00 00       	call   c0011443 <Virt::getAKernelVAS()>
c000d44a:	83 ec 04             	sub    esp,0x4
c000d44d:	6a 01                	push   0x1
c000d44f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d453:	50                   	push   eax
c000d454:	e8 91 45 00 00       	call   c00119ea <VAS::allocatePages(int, int)>
c000d459:	83 c4 1c             	add    esp,0x1c
c000d45c:	c3                   	ret    

c000d45d <liballoc_free(void*, int)>:
c000d45d:	83 ec 0c             	sub    esp,0xc
c000d460:	e8 de 3f 00 00       	call   c0011443 <Virt::getAKernelVAS()>
c000d465:	83 ec 08             	sub    esp,0x8
c000d468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d46c:	50                   	push   eax
c000d46d:	e8 9a 42 00 00       	call   c001170c <VAS::freeAllocatedPages(unsigned long)>
c000d472:	b8 00 00 00 00       	mov    eax,0x0
c000d477:	83 c4 1c             	add    esp,0x1c
c000d47a:	c3                   	ret    

c000d47b <realloc>:
c000d47b:	83 ec 14             	sub    esp,0x14
c000d47e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d486:	e8 13 42 ff ff       	call   c000169e <dlrealloc>
c000d48b:	83 c4 1c             	add    esp,0x1c
c000d48e:	c3                   	ret    

c000d48f <malloc>:
c000d48f:	83 ec 18             	sub    esp,0x18
c000d492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d496:	e8 c6 3c ff ff       	call   c0001161 <dlmalloc>
c000d49b:	83 c4 1c             	add    esp,0x1c
c000d49e:	c3                   	ret    

c000d49f <free>:
c000d49f:	83 ec 18             	sub    esp,0x18
c000d4a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a6:	e8 5b 39 ff ff       	call   c0000e06 <dlfree>
c000d4ab:	83 c4 1c             	add    esp,0x1c
c000d4ae:	c3                   	ret    

c000d4af <rfree>:
c000d4af:	83 ec 18             	sub    esp,0x18
c000d4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4b6:	e8 e4 ff ff ff       	call   c000d49f <free>
c000d4bb:	83 c4 1c             	add    esp,0x1c
c000d4be:	c3                   	ret    

c000d4bf <calloc>:
c000d4bf:	56                   	push   esi
c000d4c0:	53                   	push   ebx
c000d4c1:	83 ec 10             	sub    esp,0x10
c000d4c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d4c8:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000d4cd:	53                   	push   ebx
c000d4ce:	e8 bc ff ff ff       	call   c000d48f <malloc>
c000d4d3:	89 c6                	mov    esi,eax
c000d4d5:	83 c4 0c             	add    esp,0xc
c000d4d8:	53                   	push   ebx
c000d4d9:	6a 00                	push   0x0
c000d4db:	50                   	push   eax
c000d4dc:	e8 f7 31 ff ff       	call   c00006d8 <memset>
c000d4e1:	89 f0                	mov    eax,esi
c000d4e3:	83 c4 14             	add    esp,0x14
c000d4e6:	5b                   	pop    ebx
c000d4e7:	5e                   	pop    esi
c000d4e8:	c3                   	ret    

c000d4e9 <hwTextMode_loadInData(VgaText*)>:
c000d4e9:	57                   	push   edi
c000d4ea:	56                   	push   esi
c000d4eb:	53                   	push   ebx
c000d4ec:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d4f0:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000d4f6:	85 c0                	test   eax,eax
c000d4f8:	7e 30                	jle    c000d52a <hwTextMode_loadInData(VgaText*)+0x41>
c000d4fa:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000d4fd:	31 f6                	xor    esi,esi
c000d4ff:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000d502:	31 c0                	xor    eax,eax
c000d504:	c1 e1 05             	shl    ecx,0x5
c000d507:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000d50d:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000d511:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000d515:	40                   	inc    eax
c000d516:	83 f8 50             	cmp    eax,0x50
c000d519:	75 f2                	jne    c000d50d <hwTextMode_loadInData(VgaText*)+0x24>
c000d51b:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000d521:	46                   	inc    esi
c000d522:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000d528:	7f d5                	jg     c000d4ff <hwTextMode_loadInData(VgaText*)+0x16>
c000d52a:	5b                   	pop    ebx
c000d52b:	5e                   	pop    esi
c000d52c:	5f                   	pop    edi
c000d52d:	c3                   	ret    

c000d52e <hwTextMode_loadInTitle(VgaText*, char*)>:
c000d52e:	56                   	push   esi
c000d52f:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000d534:	53                   	push   ebx
c000d535:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d539:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d53d:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000d543:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000d549:	c1 e0 04             	shl    eax,0x4
c000d54c:	83 e6 0f             	and    esi,0xf
c000d54f:	0f b6 c0             	movzx  eax,al
c000d552:	41                   	inc    ecx
c000d553:	09 f0                	or     eax,esi
c000d555:	83 c2 02             	add    edx,0x2
c000d558:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000d55c:	c1 e0 08             	shl    eax,0x8
c000d55f:	09 f0                	or     eax,esi
c000d561:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000d565:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000d56b:	75 d0                	jne    c000d53d <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000d56d:	5b                   	pop    ebx
c000d56e:	5e                   	pop    esi
c000d56f:	c3                   	ret    

c000d570 <hwTextMode_showCursor(VgaText*, bool)>:
c000d570:	56                   	push   esi
c000d571:	53                   	push   ebx
c000d572:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000d577:	74 38                	je     c000d5b1 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000d579:	bb d4 03 00 00       	mov    ebx,0x3d4
c000d57e:	b0 0a                	mov    al,0xa
c000d580:	89 da                	mov    edx,ebx
c000d582:	ee                   	out    dx,al
c000d583:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000d588:	89 ca                	mov    edx,ecx
c000d58a:	ec                   	in     al,dx
c000d58b:	b2 0f                	mov    dl,0xf
c000d58d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d591:	83 e0 c0             	and    eax,0xffffffc0
c000d594:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000d59a:	09 d0                	or     eax,edx
c000d59c:	89 ca                	mov    edx,ecx
c000d59e:	ee                   	out    dx,al
c000d59f:	b0 0b                	mov    al,0xb
c000d5a1:	89 da                	mov    edx,ebx
c000d5a3:	ee                   	out    dx,al
c000d5a4:	89 ca                	mov    edx,ecx
c000d5a6:	ec                   	in     al,dx
c000d5a7:	83 e0 e0             	and    eax,0xffffffe0
c000d5aa:	83 c8 0f             	or     eax,0xf
c000d5ad:	ee                   	out    dx,al
c000d5ae:	5b                   	pop    ebx
c000d5af:	5e                   	pop    esi
c000d5b0:	c3                   	ret    
c000d5b1:	b0 0a                	mov    al,0xa
c000d5b3:	ba d4 03 00 00       	mov    edx,0x3d4
c000d5b8:	ee                   	out    dx,al
c000d5b9:	b0 20                	mov    al,0x20
c000d5bb:	ba d5 03 00 00       	mov    edx,0x3d5
c000d5c0:	ee                   	out    dx,al
c000d5c1:	5b                   	pop    ebx
c000d5c2:	5e                   	pop    esi
c000d5c3:	c3                   	ret    

c000d5c4 <hwTextMode_update(VgaText*)>:
c000d5c4:	c3                   	ret    

c000d5c5 <hwTextMode_updateCursor(VgaText*)>:
c000d5c5:	56                   	push   esi
c000d5c6:	b9 19 00 00 00       	mov    ecx,0x19
c000d5cb:	53                   	push   ebx
c000d5cc:	be d4 03 00 00       	mov    esi,0x3d4
c000d5d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5d5:	89 f2                	mov    edx,esi
c000d5d7:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000d5dd:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000d5e3:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000d5e6:	c1 e1 04             	shl    ecx,0x4
c000d5e9:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000d5ef:	b0 0f                	mov    al,0xf
c000d5f1:	ee                   	out    dx,al
c000d5f2:	bb d5 03 00 00       	mov    ebx,0x3d5
c000d5f7:	88 c8                	mov    al,cl
c000d5f9:	89 da                	mov    edx,ebx
c000d5fb:	ee                   	out    dx,al
c000d5fc:	b0 0e                	mov    al,0xe
c000d5fe:	89 f2                	mov    edx,esi
c000d600:	ee                   	out    dx,al
c000d601:	89 c8                	mov    eax,ecx
c000d603:	89 da                	mov    edx,ebx
c000d605:	66 c1 e8 08          	shr    ax,0x8
c000d609:	ee                   	out    dx,al
c000d60a:	5b                   	pop    ebx
c000d60b:	5e                   	pop    esi
c000d60c:	c3                   	ret    

c000d60d <hwTextMode_disableBlink(VgaText*, bool)>:
c000d60d:	ba da 03 00 00       	mov    edx,0x3da
c000d612:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000d617:	75 18                	jne    c000d631 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000d619:	ec                   	in     al,dx
c000d61a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000d61f:	b0 30                	mov    al,0x30
c000d621:	89 ca                	mov    edx,ecx
c000d623:	ee                   	out    dx,al
c000d624:	ba c1 03 00 00       	mov    edx,0x3c1
c000d629:	ec                   	in     al,dx
c000d62a:	83 c8 08             	or     eax,0x8
c000d62d:	89 ca                	mov    edx,ecx
c000d62f:	ee                   	out    dx,al
c000d630:	c3                   	ret    
c000d631:	ec                   	in     al,dx
c000d632:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000d637:	b0 30                	mov    al,0x30
c000d639:	89 ca                	mov    edx,ecx
c000d63b:	ee                   	out    dx,al
c000d63c:	ba c1 03 00 00       	mov    edx,0x3c1
c000d641:	ec                   	in     al,dx
c000d642:	83 e0 f7             	and    eax,0xfffffff7
c000d645:	89 ca                	mov    edx,ecx
c000d647:	ee                   	out    dx,al
c000d648:	c3                   	ret    

c000d649 <hwTextMode_scrollScreen(VgaText*)>:
c000d649:	55                   	push   ebp
c000d64a:	bd 02 00 00 00       	mov    ebp,0x2
c000d64f:	57                   	push   edi
c000d650:	56                   	push   esi
c000d651:	53                   	push   ebx
c000d652:	83 ec 1c             	sub    esp,0x1c
c000d655:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000d65d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d661:	31 c0                	xor    eax,eax
c000d663:	eb 0b                	jmp    c000d670 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000d665:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000d66b:	74 57                	je     c000d6c4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000d66d:	43                   	inc    ebx
c000d66e:	89 f0                	mov    eax,esi
c000d670:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000d676:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000d67c:	88 13                	mov    BYTE PTR [ebx],dl
c000d67e:	8d 70 01             	lea    esi,[eax+0x1]
c000d681:	83 fd 18             	cmp    ebp,0x18
c000d684:	75 df                	jne    c000d665 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000d686:	a8 01                	test   al,0x1
c000d688:	75 13                	jne    c000d69d <hwTextMode_scrollScreen(VgaText*)+0x54>
c000d68a:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000d68d:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000d693:	75 d8                	jne    c000d66d <hwTextMode_scrollScreen(VgaText*)+0x24>
c000d695:	83 c4 1c             	add    esp,0x1c
c000d698:	5b                   	pop    ebx
c000d699:	5e                   	pop    esi
c000d69a:	5f                   	pop    edi
c000d69b:	5d                   	pop    ebp
c000d69c:	c3                   	ret    
c000d69d:	83 ec 08             	sub    esp,0x8
c000d6a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d6a4:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000d6ab:	50                   	push   eax
c000d6ac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d6b0:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000d6b7:	50                   	push   eax
c000d6b8:	e8 bd 29 00 00       	call   c001007a <VgaText::combineColours(unsigned char, unsigned char)>
c000d6bd:	83 c4 10             	add    esp,0x10
c000d6c0:	88 07                	mov    BYTE PTR [edi],al
c000d6c2:	eb c9                	jmp    c000d68d <hwTextMode_scrollScreen(VgaText*)+0x44>
c000d6c4:	45                   	inc    ebp
c000d6c5:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000d6cd:	eb 8e                	jmp    c000d65d <hwTextMode_scrollScreen(VgaText*)+0x14>

c000d6cf <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000d6cf:	56                   	push   esi
c000d6d0:	53                   	push   ebx
c000d6d1:	83 ec 0c             	sub    esp,0xc
c000d6d4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d6d8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d6dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000d6e1:	50                   	push   eax
c000d6e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000d6e7:	50                   	push   eax
c000d6e8:	e8 8d 29 00 00       	call   c001007a <VgaText::combineColours(unsigned char, unsigned char)>
c000d6ed:	5a                   	pop    edx
c000d6ee:	0f b6 c0             	movzx  eax,al
c000d6f1:	59                   	pop    ecx
c000d6f2:	50                   	push   eax
c000d6f3:	89 f0                	mov    eax,esi
c000d6f5:	0f be f0             	movsx  esi,al
c000d6f8:	56                   	push   esi
c000d6f9:	e8 22 2a 00 00       	call   c0010120 <VgaText::combineCharAndColour(char, unsigned char)>
c000d6fe:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d702:	ba 19 00 00 00       	mov    edx,0x19
c000d707:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000d70d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000d710:	8d 14 92             	lea    edx,[edx+edx*4]
c000d713:	c1 e1 04             	shl    ecx,0x4
c000d716:	c1 e2 04             	shl    edx,0x4
c000d719:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000d71d:	01 ca                	add    edx,ecx
c000d71f:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000d727:	83 c4 14             	add    esp,0x14
c000d72a:	5b                   	pop    ebx
c000d72b:	5e                   	pop    esi
c000d72c:	c3                   	ret    

c000d72d <setupTextMode()>:
c000d72d:	c7 05 58 be 03 c0 0d d6 00 c0 	mov    DWORD PTR ds:0xc003be58,0xc000d60d
c000d737:	c7 05 44 be 03 c0 e9 d4 00 c0 	mov    DWORD PTR ds:0xc003be44,0xc000d4e9
c000d741:	c7 05 40 be 03 c0 2e d5 00 c0 	mov    DWORD PTR ds:0xc003be40,0xc000d52e
c000d74b:	c7 05 4c be 03 c0 49 d6 00 c0 	mov    DWORD PTR ds:0xc003be4c,0xc000d649
c000d755:	c7 05 54 be 03 c0 70 d5 00 c0 	mov    DWORD PTR ds:0xc003be54,0xc000d570
c000d75f:	c7 05 48 be 03 c0 c4 d5 00 c0 	mov    DWORD PTR ds:0xc003be48,0xc000d5c4
c000d769:	c7 05 50 be 03 c0 c5 d5 00 c0 	mov    DWORD PTR ds:0xc003be50,0xc000d5c5
c000d773:	c7 05 5c be 03 c0 cf d6 00 c0 	mov    DWORD PTR ds:0xc003be5c,0xc000d6cf
c000d77d:	c3                   	ret    

c000d77e <kernel_main>:
c000d77e:	57                   	push   edi
c000d77f:	bf f9 03 00 00       	mov    edi,0x3f9
c000d784:	56                   	push   esi
c000d785:	31 f6                	xor    esi,esi
c000d787:	53                   	push   ebx
c000d788:	83 ec 10             	sub    esp,0x10
c000d78b:	e8 44 27 00 00       	call   c000fed4 <installVgaTextImplementation()>
c000d790:	e8 98 ff ff ff       	call   c000d72d <setupTextMode()>
c000d795:	89 f0                	mov    eax,esi
c000d797:	89 fa                	mov    edx,edi
c000d799:	ee                   	out    dx,al
c000d79a:	bb fb 03 00 00       	mov    ebx,0x3fb
c000d79f:	b0 80                	mov    al,0x80
c000d7a1:	89 da                	mov    edx,ebx
c000d7a3:	ee                   	out    dx,al
c000d7a4:	b1 03                	mov    cl,0x3
c000d7a6:	ba f8 03 00 00       	mov    edx,0x3f8
c000d7ab:	88 c8                	mov    al,cl
c000d7ad:	ee                   	out    dx,al
c000d7ae:	89 f0                	mov    eax,esi
c000d7b0:	89 fa                	mov    edx,edi
c000d7b2:	ee                   	out    dx,al
c000d7b3:	88 c8                	mov    al,cl
c000d7b5:	89 da                	mov    edx,ebx
c000d7b7:	ee                   	out    dx,al
c000d7b8:	b0 c7                	mov    al,0xc7
c000d7ba:	ba fa 03 00 00       	mov    edx,0x3fa
c000d7bf:	ee                   	out    dx,al
c000d7c0:	b0 0b                	mov    al,0xb
c000d7c2:	ba fc 03 00 00       	mov    edx,0x3fc
c000d7c7:	ee                   	out    dx,al
c000d7c8:	a1 24 05 00 00       	mov    eax,ds:0x524
c000d7cd:	83 ec 0c             	sub    esp,0xc
c000d7d0:	05 ff 0f 00 00       	add    eax,0xfff
c000d7d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000d7da:	50                   	push   eax
c000d7db:	e8 4d 03 00 00       	call   c000db2d <Phys::physicalMemorySetup(unsigned int)>
c000d7e0:	e8 df 3b 00 00       	call   c00113c4 <Virt::virtualMemorySetup()>
c000d7e5:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000d7eb:	83 c4 10             	add    esp,0x10
c000d7ee:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000d7f4:	75 0e                	jne    c000d804 <kernel_main+0x86>
c000d7f6:	89 d8                	mov    eax,ebx
c000d7f8:	25 48 03 00 00       	and    eax,0x348
c000d7fd:	3d 00 03 00 00       	cmp    eax,0x300
c000d802:	74 10                	je     c000d814 <kernel_main+0x96>
c000d804:	83 ec 0c             	sub    esp,0xc
c000d807:	68 f3 8d 03 c0       	push   0xc0038df3
c000d80c:	e8 a1 f7 ff ff       	call   c000cfb2 <panic(char const*)>
c000d811:	83 c4 10             	add    esp,0x10
c000d814:	83 ec 0c             	sub    esp,0xc
c000d817:	89 1d 74 bb 03 c0    	mov    DWORD PTR ds:0xc003bb74,ebx
c000d81d:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d821:	53                   	push   ebx
c000d822:	e8 47 3d 00 00       	call   c001156e <VAS::VAS()>
c000d827:	89 1d 7c be 03 c0    	mov    DWORD PTR ds:0xc003be7c,ebx
c000d82d:	e8 ee 27 ff ff       	call   c0000020 <callGlobalConstructors>
c000d832:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000d839:	e8 06 4c 00 00       	call   c0012444 <operator new(unsigned long)>
c000d83e:	89 04 24             	mov    DWORD PTR [esp],eax
c000d841:	89 c6                	mov    esi,eax
c000d843:	e8 7e d9 ff ff       	call   c000b1c6 <Computer::Computer()>
c000d848:	6a 00                	push   0x0
c000d84a:	89 35 c8 b9 03 c0    	mov    DWORD PTR ds:0xc003b9c8,esi
c000d850:	6a 00                	push   0x0
c000d852:	6a 00                	push   0x0
c000d854:	56                   	push   esi
c000d855:	e8 30 de ff ff       	call   c000b68a <Computer::open(int, int, void*)>
c000d85a:	83 c4 14             	add    esp,0x14
c000d85d:	53                   	push   ebx
c000d85e:	e8 1b 3f 00 00       	call   c001177e <VAS::~VAS()>
c000d863:	c7 04 24 90 8e 03 c0 	mov    DWORD PTR [esp],0xc0038e90
c000d86a:	e8 43 f7 ff ff       	call   c000cfb2 <panic(char const*)>
c000d86f:	83 c4 20             	add    esp,0x20
c000d872:	5b                   	pop    ebx
c000d873:	5e                   	pop    esi
c000d874:	5f                   	pop    edi
c000d875:	c3                   	ret    

c000d876 <Phys::allocateDMA(unsigned long)>:
c000d876:	55                   	push   ebp
c000d877:	31 d2                	xor    edx,edx
c000d879:	57                   	push   edi
c000d87a:	31 ed                	xor    ebp,ebp
c000d87c:	56                   	push   esi
c000d87d:	31 c9                	xor    ecx,ecx
c000d87f:	53                   	push   ebx
c000d880:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d884:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000d88a:	31 c0                	xor    eax,eax
c000d88c:	c1 ee 0c             	shr    esi,0xc
c000d88f:	eb 17                	jmp    c000d8a8 <Phys::allocateDMA(unsigned long)+0x32>
c000d891:	85 c9                	test   ecx,ecx
c000d893:	75 04                	jne    c000d899 <Phys::allocateDMA(unsigned long)+0x23>
c000d895:	89 d5                	mov    ebp,edx
c000d897:	89 d0                	mov    eax,edx
c000d899:	8d 59 01             	lea    ebx,[ecx+0x1]
c000d89c:	39 de                	cmp    esi,ebx
c000d89e:	74 20                	je     c000d8c0 <Phys::allocateDMA(unsigned long)+0x4a>
c000d8a0:	42                   	inc    edx
c000d8a1:	89 d9                	mov    ecx,ebx
c000d8a3:	83 fa 2f             	cmp    edx,0x2f
c000d8a6:	7f 11                	jg     c000d8b9 <Phys::allocateDMA(unsigned long)+0x43>
c000d8a8:	80 ba a0 bb 03 c0 00 	cmp    BYTE PTR [edx-0x3ffc4460],0x0
c000d8af:	74 e0                	je     c000d891 <Phys::allocateDMA(unsigned long)+0x1b>
c000d8b1:	31 c9                	xor    ecx,ecx
c000d8b3:	42                   	inc    edx
c000d8b4:	83 fa 2f             	cmp    edx,0x2f
c000d8b7:	7e ef                	jle    c000d8a8 <Phys::allocateDMA(unsigned long)+0x32>
c000d8b9:	5b                   	pop    ebx
c000d8ba:	31 c0                	xor    eax,eax
c000d8bc:	5e                   	pop    esi
c000d8bd:	5f                   	pop    edi
c000d8be:	5d                   	pop    ebp
c000d8bf:	c3                   	ret    
c000d8c0:	8d 14 30             	lea    edx,[eax+esi*1]
c000d8c3:	89 d7                	mov    edi,edx
c000d8c5:	4f                   	dec    edi
c000d8c6:	79 03                	jns    c000d8cb <Phys::allocateDMA(unsigned long)+0x55>
c000d8c8:	8d 7a 0e             	lea    edi,[edx+0xe]
c000d8cb:	c1 ff 04             	sar    edi,0x4
c000d8ce:	89 c2                	mov    edx,eax
c000d8d0:	c1 fa 04             	sar    edx,0x4
c000d8d3:	39 fa                	cmp    edx,edi
c000d8d5:	75 2f                	jne    c000d906 <Phys::allocateDMA(unsigned long)+0x90>
c000d8d7:	85 db                	test   ebx,ebx
c000d8d9:	74 1a                	je     c000d8f5 <Phys::allocateDMA(unsigned long)+0x7f>
c000d8db:	be a0 bb 03 c0       	mov    esi,0xc003bba0
c000d8e0:	8d 90 a0 bb 03 c0    	lea    edx,[eax-0x3ffc4460]
c000d8e6:	f7 d6                	not    esi
c000d8e8:	29 c6                	sub    esi,eax
c000d8ea:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000d8ed:	42                   	inc    edx
c000d8ee:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000d8f1:	39 d9                	cmp    ecx,ebx
c000d8f3:	7f f5                	jg     c000d8ea <Phys::allocateDMA(unsigned long)+0x74>
c000d8f5:	85 ff                	test   edi,edi
c000d8f7:	74 13                	je     c000d90c <Phys::allocateDMA(unsigned long)+0x96>
c000d8f9:	5b                   	pop    ebx
c000d8fa:	05 50 20 0c 00       	add    eax,0xc2050
c000d8ff:	5e                   	pop    esi
c000d900:	c1 e0 0c             	shl    eax,0xc
c000d903:	5f                   	pop    edi
c000d904:	5d                   	pop    ebp
c000d905:	c3                   	ret    
c000d906:	89 ea                	mov    edx,ebp
c000d908:	31 c9                	xor    ecx,ecx
c000d90a:	eb a7                	jmp    c000d8b3 <Phys::allocateDMA(unsigned long)+0x3d>
c000d90c:	5b                   	pop    ebx
c000d90d:	c1 e0 0c             	shl    eax,0xc
c000d910:	5e                   	pop    esi
c000d911:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000d916:	5f                   	pop    edi
c000d917:	5d                   	pop    ebp
c000d918:	c3                   	ret    

c000d919 <Phys::freeDMA(unsigned long, unsigned long)>:
c000d919:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d91d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d921:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000d927:	c1 e9 0c             	shr    ecx,0xc
c000d92a:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000d92f:	76 25                	jbe    c000d956 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000d931:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000d936:	c1 e8 0c             	shr    eax,0xc
c000d939:	8d 50 10             	lea    edx,[eax+0x10]
c000d93c:	85 c9                	test   ecx,ecx
c000d93e:	74 15                	je     c000d955 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000d940:	8d 82 a0 bb 03 c0    	lea    eax,[edx-0x3ffc4460]
c000d946:	8d 94 11 a0 bb 03 c0 	lea    edx,[ecx+edx*1-0x3ffc4460]
c000d94d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000d950:	40                   	inc    eax
c000d951:	39 d0                	cmp    eax,edx
c000d953:	75 f8                	jne    c000d94d <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000d955:	c3                   	ret    
c000d956:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000d95c:	c1 ea 0c             	shr    edx,0xc
c000d95f:	eb db                	jmp    c000d93c <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000d961 <Phys::setPageState(unsigned long, bool)>:
c000d961:	56                   	push   esi
c000d962:	ba 01 00 00 00       	mov    edx,0x1
c000d967:	53                   	push   ebx
c000d968:	8b 35 f0 ad 03 c0    	mov    esi,DWORD PTR ds:0xc003adf0
c000d96e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d972:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d976:	89 c8                	mov    eax,ecx
c000d978:	83 e1 07             	and    ecx,0x7
c000d97b:	c1 e8 03             	shr    eax,0x3
c000d97e:	d3 e3                	shl    ebx,cl
c000d980:	01 c6                	add    esi,eax
c000d982:	d3 e2                	shl    edx,cl
c000d984:	f7 d2                	not    edx
c000d986:	20 16                	and    BYTE PTR [esi],dl
c000d988:	03 05 f0 ad 03 c0    	add    eax,DWORD PTR ds:0xc003adf0
c000d98e:	08 18                	or     BYTE PTR [eax],bl
c000d990:	5b                   	pop    ebx
c000d991:	5e                   	pop    esi
c000d992:	c3                   	ret    

c000d993 <Phys::getPageState(unsigned long)>:
c000d993:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d997:	8b 15 f0 ad 03 c0    	mov    edx,DWORD PTR ds:0xc003adf0
c000d99d:	89 c8                	mov    eax,ecx
c000d99f:	83 e1 07             	and    ecx,0x7
c000d9a2:	c1 e8 03             	shr    eax,0x3
c000d9a5:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000d9a9:	d3 f8                	sar    eax,cl
c000d9ab:	83 e0 01             	and    eax,0x1
c000d9ae:	c3                   	ret    

c000d9af <Phys::freePage(unsigned long)>:
c000d9af:	53                   	push   ebx
c000d9b0:	83 ec 08             	sub    esp,0x8
c000d9b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d9b7:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000d9bd:	76 57                	jbe    c000da16 <Phys::freePage(unsigned long)+0x67>
c000d9bf:	c1 eb 0c             	shr    ebx,0xc
c000d9c2:	53                   	push   ebx
c000d9c3:	e8 cb ff ff ff       	call   c000d993 <Phys::getPageState(unsigned long)>
c000d9c8:	5a                   	pop    edx
c000d9c9:	84 c0                	test   al,al
c000d9cb:	74 5b                	je     c000da28 <Phys::freePage(unsigned long)+0x79>
c000d9cd:	a1 8c bb 03 c0       	mov    eax,ds:0xc003bb8c
c000d9d2:	48                   	dec    eax
c000d9d3:	a3 8c bb 03 c0       	mov    ds:0xc003bb8c,eax
c000d9d8:	8d 04 80             	lea    eax,[eax+eax*4]
c000d9db:	8d 04 80             	lea    eax,[eax+eax*4]
c000d9de:	c1 e0 02             	shl    eax,0x2
c000d9e1:	99                   	cdq    
c000d9e2:	f7 3d 90 bb 03 c0    	idiv   DWORD PTR ds:0xc003bb90
c000d9e8:	39 05 88 bb 03 c0    	cmp    DWORD PTR ds:0xc003bb88,eax
c000d9ee:	75 13                	jne    c000da03 <Phys::freePage(unsigned long)+0x54>
c000d9f0:	83 ec 08             	sub    esp,0x8
c000d9f3:	6a 00                	push   0x0
c000d9f5:	53                   	push   ebx
c000d9f6:	e8 66 ff ff ff       	call   c000d961 <Phys::setPageState(unsigned long, bool)>
c000d9fb:	83 c4 10             	add    esp,0x10
c000d9fe:	83 c4 08             	add    esp,0x8
c000da01:	5b                   	pop    ebx
c000da02:	c3                   	ret    
c000da03:	83 ec 0c             	sub    esp,0xc
c000da06:	a3 88 bb 03 c0       	mov    ds:0xc003bb88,eax
c000da0b:	50                   	push   eax
c000da0c:	e8 57 28 00 00       	call   c0010268 <VgaText::updateRAMUsageDisplay(int)>
c000da11:	83 c4 10             	add    esp,0x10
c000da14:	eb da                	jmp    c000d9f0 <Phys::freePage(unsigned long)+0x41>
c000da16:	68 00 10 00 00       	push   0x1000
c000da1b:	53                   	push   ebx
c000da1c:	e8 f8 fe ff ff       	call   c000d919 <Phys::freeDMA(unsigned long, unsigned long)>
c000da21:	59                   	pop    ecx
c000da22:	5b                   	pop    ebx
c000da23:	83 c4 08             	add    esp,0x8
c000da26:	5b                   	pop    ebx
c000da27:	c3                   	ret    
c000da28:	c7 44 24 10 ab 8e 03 c0 	mov    DWORD PTR [esp+0x10],0xc0038eab
c000da30:	83 c4 08             	add    esp,0x8
c000da33:	5b                   	pop    ebx
c000da34:	e9 79 f5 ff ff       	jmp    c000cfb2 <panic(char const*)>

c000da39 <Phys::allocatePage()>:
c000da39:	56                   	push   esi
c000da3a:	53                   	push   ebx
c000da3b:	51                   	push   ecx
c000da3c:	8b 35 80 bb 03 c0    	mov    esi,DWORD PTR ds:0xc003bb80
c000da42:	89 f3                	mov    ebx,esi
c000da44:	eb 0a                	jmp    c000da50 <Phys::allocatePage()+0x17>
c000da46:	89 1d 80 bb 03 c0    	mov    DWORD PTR ds:0xc003bb80,ebx
c000da4c:	39 de                	cmp    esi,ebx
c000da4e:	74 24                	je     c000da74 <Phys::allocatePage()+0x3b>
c000da50:	53                   	push   ebx
c000da51:	e8 3d ff ff ff       	call   c000d993 <Phys::getPageState(unsigned long)>
c000da56:	5a                   	pop    edx
c000da57:	84 c0                	test   al,al
c000da59:	74 4e                	je     c000daa9 <Phys::allocatePage()+0x70>
c000da5b:	43                   	inc    ebx
c000da5c:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000da62:	75 e2                	jne    c000da46 <Phys::allocatePage()+0xd>
c000da64:	31 db                	xor    ebx,ebx
c000da66:	c7 05 80 bb 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003bb80,0x0
c000da70:	39 de                	cmp    esi,ebx
c000da72:	75 dc                	jne    c000da50 <Phys::allocatePage()+0x17>
c000da74:	83 ec 0c             	sub    esp,0xc
c000da77:	68 00 10 00 00       	push   0x1000
c000da7c:	e8 f5 fd ff ff       	call   c000d876 <Phys::allocateDMA(unsigned long)>
c000da81:	83 c4 10             	add    esp,0x10
c000da84:	85 c0                	test   eax,eax
c000da86:	75 56                	jne    c000dade <Phys::allocatePage()+0xa5>
c000da88:	83 ec 0c             	sub    esp,0xc
c000da8b:	68 c1 8e 03 c0       	push   0xc0038ec1
c000da90:	e8 1d f5 ff ff       	call   c000cfb2 <panic(char const*)>
c000da95:	83 c4 10             	add    esp,0x10
c000da98:	8b 1d 80 bb 03 c0    	mov    ebx,DWORD PTR ds:0xc003bb80
c000da9e:	53                   	push   ebx
c000da9f:	e8 ef fe ff ff       	call   c000d993 <Phys::getPageState(unsigned long)>
c000daa4:	5a                   	pop    edx
c000daa5:	84 c0                	test   al,al
c000daa7:	75 b2                	jne    c000da5b <Phys::allocatePage()+0x22>
c000daa9:	6a 01                	push   0x1
c000daab:	53                   	push   ebx
c000daac:	e8 b0 fe ff ff       	call   c000d961 <Phys::setPageState(unsigned long, bool)>
c000dab1:	a1 8c bb 03 c0       	mov    eax,ds:0xc003bb8c
c000dab6:	59                   	pop    ecx
c000dab7:	40                   	inc    eax
c000dab8:	5b                   	pop    ebx
c000dab9:	a3 8c bb 03 c0       	mov    ds:0xc003bb8c,eax
c000dabe:	8d 04 80             	lea    eax,[eax+eax*4]
c000dac1:	8d 04 80             	lea    eax,[eax+eax*4]
c000dac4:	c1 e0 02             	shl    eax,0x2
c000dac7:	99                   	cdq    
c000dac8:	f7 3d 90 bb 03 c0    	idiv   DWORD PTR ds:0xc003bb90
c000dace:	39 05 88 bb 03 c0    	cmp    DWORD PTR ds:0xc003bb88,eax
c000dad4:	75 0c                	jne    c000dae2 <Phys::allocatePage()+0xa9>
c000dad6:	a1 80 bb 03 c0       	mov    eax,ds:0xc003bb80
c000dadb:	c1 e0 0c             	shl    eax,0xc
c000dade:	5a                   	pop    edx
c000dadf:	5b                   	pop    ebx
c000dae0:	5e                   	pop    esi
c000dae1:	c3                   	ret    
c000dae2:	83 ec 0c             	sub    esp,0xc
c000dae5:	a3 88 bb 03 c0       	mov    ds:0xc003bb88,eax
c000daea:	50                   	push   eax
c000daeb:	e8 78 27 00 00       	call   c0010268 <VgaText::updateRAMUsageDisplay(int)>
c000daf0:	83 c4 10             	add    esp,0x10
c000daf3:	eb e1                	jmp    c000dad6 <Phys::allocatePage()+0x9d>

c000daf5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000daf5:	56                   	push   esi
c000daf6:	53                   	push   ebx
c000daf7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dafb:	39 1d 84 bb 03 c0    	cmp    DWORD PTR ds:0xc003bb84,ebx
c000db01:	73 06                	jae    c000db09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000db03:	89 1d 84 bb 03 c0    	mov    DWORD PTR ds:0xc003bb84,ebx
c000db09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db0d:	c1 eb 0c             	shr    ebx,0xc
c000db10:	c1 e8 0c             	shr    eax,0xc
c000db13:	39 d8                	cmp    eax,ebx
c000db15:	73 13                	jae    c000db2a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000db17:	6a 00                	push   0x0
c000db19:	8d 70 01             	lea    esi,[eax+0x1]
c000db1c:	50                   	push   eax
c000db1d:	e8 3f fe ff ff       	call   c000d961 <Phys::setPageState(unsigned long, bool)>
c000db22:	5a                   	pop    edx
c000db23:	89 f0                	mov    eax,esi
c000db25:	59                   	pop    ecx
c000db26:	39 f3                	cmp    ebx,esi
c000db28:	75 ed                	jne    c000db17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000db2a:	5b                   	pop    ebx
c000db2b:	5e                   	pop    esi
c000db2c:	c3                   	ret    

c000db2d <Phys::physicalMemorySetup(unsigned int)>:
c000db2d:	55                   	push   ebp
c000db2e:	57                   	push   edi
c000db2f:	56                   	push   esi
c000db30:	53                   	push   ebx
c000db31:	31 db                	xor    ebx,ebx
c000db33:	83 ec 30             	sub    esp,0x30
c000db36:	6a 30                	push   0x30
c000db38:	6a 00                	push   0x0
c000db3a:	68 a0 bb 03 c0       	push   0xc003bba0
c000db3f:	e8 94 2b ff ff       	call   c00006d8 <memset>
c000db44:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000db48:	25 00 f0 ff ff       	and    eax,0xfffff000
c000db4d:	05 00 10 00 00       	add    eax,0x1000
c000db52:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000db56:	83 c4 10             	add    esp,0x10
c000db59:	83 ec 08             	sub    esp,0x8
c000db5c:	6a 01                	push   0x1
c000db5e:	53                   	push   ebx
c000db5f:	43                   	inc    ebx
c000db60:	e8 fc fd ff ff       	call   c000d961 <Phys::setPageState(unsigned long, bool)>
c000db65:	83 c4 10             	add    esp,0x10
c000db68:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000db6e:	75 e9                	jne    c000db59 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000db70:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000db77:	66 85 c0             	test   ax,ax
c000db7a:	0f 84 28 01 00 00    	je     c000dca8 <Phys::physicalMemorySetup(unsigned int)+0x17b>
c000db80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db84:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000db8a:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000db8f:	8b 35 08 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000608
c000db95:	8b 3d 0c 06 00 c2    	mov    edi,DWORD PTR ds:0xc200060c
c000db9b:	89 f1                	mov    ecx,esi
c000db9d:	89 fb                	mov    ebx,edi
c000db9f:	01 c1                	add    ecx,eax
c000dba1:	89 d5                	mov    ebp,edx
c000dba3:	11 d3                	adc    ebx,edx
c000dba5:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000dba8:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000dbac:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000dbb0:	8b 0d 10 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000610
c000dbb6:	09 dd                	or     ebp,ebx
c000dbb8:	0f 85 fa 00 00 00    	jne    c000dcb8 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000dbbe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dbc2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dbca:	c7 44 24 0c 00 06 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000600
c000dbd2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dbd6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000dbde:	eb 45                	jmp    c000dc25 <Phys::physicalMemorySetup(unsigned int)+0xf8>
c000dbe0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000dbe4:	83 44 24 0c 18       	add    DWORD PTR [esp+0xc],0x18
c000dbe9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dbed:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000dbf1:	0f 84 c1 00 00 00    	je     c000dcb8 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000dbf7:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000dbfb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000dbfe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dc01:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c000dc04:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000dc07:	89 c1                	mov    ecx,eax
c000dc09:	89 d3                	mov    ebx,edx
c000dc0b:	01 f1                	add    ecx,esi
c000dc0d:	11 fb                	adc    ebx,edi
c000dc0f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000dc12:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000dc16:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000dc19:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000dc1d:	09 d3                	or     ebx,edx
c000dc1f:	0f 85 93 00 00 00    	jne    c000dcb8 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000dc25:	49                   	dec    ecx
c000dc26:	75 b8                	jne    c000dbe0 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000dc28:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000dc2b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000dc2f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000dc33:	39 e9                	cmp    ecx,ebp
c000dc35:	89 d9                	mov    ecx,ebx
c000dc37:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000dc3b:	72 a3                	jb     c000dbe0 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000dc3d:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000dc42:	39 f1                	cmp    ecx,esi
c000dc44:	b9 00 00 00 00       	mov    ecx,0x0
c000dc49:	19 f9                	sbb    ecx,edi
c000dc4b:	73 93                	jae    c000dbe0 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000dc4d:	39 e8                	cmp    eax,ebp
c000dc4f:	89 d1                	mov    ecx,edx
c000dc51:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000dc55:	73 13                	jae    c000dc6a <Phys::physicalMemorySetup(unsigned int)+0x13d>
c000dc57:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dc5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000dc5e:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000dc62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dc66:	1b 7c 24 1c          	sbb    edi,DWORD PTR [esp+0x1c]
c000dc6a:	83 ec 08             	sub    esp,0x8
c000dc6d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000dc71:	50                   	push   eax
c000dc72:	e8 7e fe ff ff       	call   c000daf5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000dc77:	83 c4 0c             	add    esp,0xc
c000dc7a:	89 fa                	mov    edx,edi
c000dc7c:	89 f0                	mov    eax,esi
c000dc7e:	0f ac d0 0c          	shrd   eax,edx,0xc
c000dc82:	03 05 90 bb 03 c0    	add    eax,DWORD PTR ds:0xc003bb90
c000dc88:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dc8f:	a3 90 bb 03 c0       	mov    ds:0xc003bb90,eax
c000dc94:	52                   	push   edx
c000dc95:	50                   	push   eax
c000dc96:	68 dd 8e 03 c0       	push   0xc0038edd
c000dc9b:	e8 f4 f1 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c000dca0:	83 c4 10             	add    esp,0x10
c000dca3:	e9 38 ff ff ff       	jmp    c000dbe0 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	68 cf 8e 03 c0       	push   0xc0038ecf
c000dcb0:	e8 fd f2 ff ff       	call   c000cfb2 <panic(char const*)>
c000dcb5:	83 c4 10             	add    esp,0x10
c000dcb8:	bb 40 01 00 00       	mov    ebx,0x140
c000dcbd:	83 ec 08             	sub    esp,0x8
c000dcc0:	6a 00                	push   0x0
c000dcc2:	53                   	push   ebx
c000dcc3:	43                   	inc    ebx
c000dcc4:	e8 98 fc ff ff       	call   c000d961 <Phys::setPageState(unsigned long, bool)>
c000dcc9:	ff 05 90 bb 03 c0    	inc    DWORD PTR ds:0xc003bb90
c000dccf:	83 c4 10             	add    esp,0x10
c000dcd2:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000dcd8:	75 e3                	jne    c000dcbd <Phys::physicalMemorySetup(unsigned int)+0x190>
c000dcda:	83 c4 2c             	add    esp,0x2c
c000dcdd:	5b                   	pop    ebx
c000dcde:	5e                   	pop    esi
c000dcdf:	5f                   	pop    edi
c000dce0:	5d                   	pop    ebp
c000dce1:	c3                   	ret    

c000dce2 <Pipe::isAtty()>:
c000dce2:	31 c0                	xor    eax,eax
c000dce4:	c3                   	ret    
c000dce5:	90                   	nop

c000dce6 <Pipe::~Pipe()>:
c000dce6:	83 ec 0c             	sub    esp,0xc
c000dce9:	ba 3c 8f 03 c0       	mov    edx,0xc0038f3c
c000dcee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcf2:	89 10                	mov    DWORD PTR [eax],edx
c000dcf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcf8:	83 ec 0c             	sub    esp,0xc
c000dcfb:	50                   	push   eax
c000dcfc:	e8 d3 33 00 00       	call   c00110d4 <UnixFile::~UnixFile()>
c000dd01:	83 c4 10             	add    esp,0x10
c000dd04:	90                   	nop
c000dd05:	83 c4 0c             	add    esp,0xc
c000dd08:	c3                   	ret    
c000dd09:	90                   	nop

c000dd0a <Pipe::~Pipe()>:
c000dd0a:	83 ec 0c             	sub    esp,0xc
c000dd0d:	83 ec 0c             	sub    esp,0xc
c000dd10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd14:	e8 cd ff ff ff       	call   c000dce6 <Pipe::~Pipe()>
c000dd19:	83 c4 10             	add    esp,0x10
c000dd1c:	83 ec 08             	sub    esp,0x8
c000dd1f:	6a 20                	push   0x20
c000dd21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd25:	e8 29 47 00 00       	call   c0012453 <operator delete(void*, unsigned long)>
c000dd2a:	83 c4 10             	add    esp,0x10
c000dd2d:	83 c4 0c             	add    esp,0xc
c000dd30:	c3                   	ret    
c000dd31:	90                   	nop

c000dd32 <Pipe::read(unsigned long long, void*, int*)>:
c000dd32:	55                   	push   ebp
c000dd33:	57                   	push   edi
c000dd34:	56                   	push   esi
c000dd35:	53                   	push   ebx
c000dd36:	83 ec 1c             	sub    esp,0x1c
c000dd39:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dd3d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dd41:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dd45:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000dd48:	89 c8                	mov    eax,ecx
c000dd4a:	99                   	cdq    
c000dd4b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000dd4f:	74 19                	je     c000dd6a <Pipe::read(unsigned long long, void*, int*)+0x38>
c000dd51:	39 f9                	cmp    ecx,edi
c000dd53:	89 d1                	mov    ecx,edx
c000dd55:	19 f1                	sbb    ecx,esi
c000dd57:	73 11                	jae    c000dd6a <Pipe::read(unsigned long long, void*, int*)+0x38>
c000dd59:	e8 d8 05 00 00       	call   c000e336 <lockScheduler()>
c000dd5e:	e8 07 09 00 00       	call   c000e66a <schedule()>
c000dd63:	e8 d0 05 00 00       	call   c000e338 <unlockScheduler()>
c000dd68:	eb db                	jmp    c000dd45 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000dd6a:	39 f8                	cmp    eax,edi
c000dd6c:	89 d1                	mov    ecx,edx
c000dd6e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dd72:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000dd76:	19 f1                	sbb    ecx,esi
c000dd78:	73 08                	jae    c000dd82 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000dd7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd82:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000dd85:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000dd88:	29 c6                	sub    esi,eax
c000dd8a:	89 f1                	mov    ecx,esi
c000dd8c:	c1 f9 1f             	sar    ecx,0x1f
c000dd8f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000dd93:	89 ca                	mov    edx,ecx
c000dd95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dd99:	19 d1                	sbb    ecx,edx
c000dd9b:	73 04                	jae    c000dda1 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000dd9d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dda1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000dda5:	89 fd                	mov    ebp,edi
c000dda7:	29 f5                	sub    ebp,esi
c000dda9:	85 f6                	test   esi,esi
c000ddab:	74 12                	je     c000ddbf <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000ddad:	52                   	push   edx
c000ddae:	56                   	push   esi
c000ddaf:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000ddb2:	50                   	push   eax
c000ddb3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ddb7:	e8 a5 28 ff ff       	call   c0000661 <memcpy>
c000ddbc:	83 c4 10             	add    esp,0x10
c000ddbf:	85 ed                	test   ebp,ebp
c000ddc1:	74 12                	je     c000ddd5 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000ddc3:	50                   	push   eax
c000ddc4:	55                   	push   ebp
c000ddc5:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000ddc8:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000ddcc:	56                   	push   esi
c000ddcd:	e8 8f 28 ff ff       	call   c0000661 <memcpy>
c000ddd2:	83 c4 10             	add    esp,0x10
c000ddd5:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000ddd8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000dddb:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ddde:	99                   	cdq    
c000dddf:	89 f7                	mov    edi,esi
c000dde1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dde5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000dde9:	c1 ff 1f             	sar    edi,0x1f
c000ddec:	57                   	push   edi
c000dded:	56                   	push   esi
c000ddee:	52                   	push   edx
c000ddef:	50                   	push   eax
c000ddf0:	e8 c7 09 01 00       	call   c001e7bc <__umoddi3>
c000ddf5:	83 c4 10             	add    esp,0x10
c000ddf8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ddfb:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000de00:	75 10                	jne    c000de12 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000de02:	83 ec 0c             	sub    esp,0xc
c000de05:	68 f9 8e 03 c0       	push   0xc0038ef9
c000de0a:	e8 a3 f1 ff ff       	call   c000cfb2 <panic(char const*)>
c000de0f:	83 c4 10             	add    esp,0x10
c000de12:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000de16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000de1a:	89 10                	mov    DWORD PTR [eax],edx
c000de1c:	83 c4 1c             	add    esp,0x1c
c000de1f:	31 c0                	xor    eax,eax
c000de21:	5b                   	pop    ebx
c000de22:	5e                   	pop    esi
c000de23:	5f                   	pop    edi
c000de24:	5d                   	pop    ebp
c000de25:	c3                   	ret    

c000de26 <Pipe::write(unsigned long long, void*, int*)>:
c000de26:	55                   	push   ebp
c000de27:	57                   	push   edi
c000de28:	56                   	push   esi
c000de29:	53                   	push   ebx
c000de2a:	83 ec 1c             	sub    esp,0x1c
c000de2d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de31:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000de35:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000de39:	89 04 24             	mov    DWORD PTR [esp],eax
c000de3c:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000de3f:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000de42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de46:	89 de                	mov    esi,ebx
c000de48:	89 df                	mov    edi,ebx
c000de4a:	c1 ff 1f             	sar    edi,0x1f
c000de4d:	01 c6                	add    esi,eax
c000de4f:	89 c8                	mov    eax,ecx
c000de51:	11 d7                	adc    edi,edx
c000de53:	99                   	cdq    
c000de54:	39 f1                	cmp    ecx,esi
c000de56:	89 d0                	mov    eax,edx
c000de58:	19 f8                	sbb    eax,edi
c000de5a:	b8 01 00 00 00       	mov    eax,0x1
c000de5f:	0f 82 80 00 00 00    	jb     c000dee5 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000de65:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000de68:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000de6b:	01 d8                	add    eax,ebx
c000de6d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000de71:	99                   	cdq    
c000de72:	f7 f9                	idiv   ecx
c000de74:	29 d1                	sub    ecx,edx
c000de76:	89 d7                	mov    edi,edx
c000de78:	89 c8                	mov    eax,ecx
c000de7a:	99                   	cdq    
c000de7b:	39 ce                	cmp    esi,ecx
c000de7d:	19 d3                	sbb    ebx,edx
c000de7f:	bb 00 00 00 00       	mov    ebx,0x0
c000de84:	72 04                	jb     c000de8a <Pipe::write(unsigned long long, void*, int*)+0x64>
c000de86:	89 f3                	mov    ebx,esi
c000de88:	29 cb                	sub    ebx,ecx
c000de8a:	89 f1                	mov    ecx,esi
c000de8c:	29 d9                	sub    ecx,ebx
c000de8e:	74 1a                	je     c000deaa <Pipe::write(unsigned long long, void*, int*)+0x84>
c000de90:	52                   	push   edx
c000de91:	51                   	push   ecx
c000de92:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de96:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de9a:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000de9d:	57                   	push   edi
c000de9e:	e8 be 27 ff ff       	call   c0000661 <memcpy>
c000dea3:	83 c4 10             	add    esp,0x10
c000dea6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000deaa:	85 db                	test   ebx,ebx
c000deac:	74 12                	je     c000dec0 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000deae:	50                   	push   eax
c000deaf:	53                   	push   ebx
c000deb0:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000deb4:	51                   	push   ecx
c000deb5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000deb8:	e8 a4 27 ff ff       	call   c0000661 <memcpy>
c000debd:	83 c4 10             	add    esp,0x10
c000dec0:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000dec3:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000dec8:	75 10                	jne    c000deda <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000deca:	83 ec 0c             	sub    esp,0xc
c000decd:	68 15 8f 03 c0       	push   0xc0038f15
c000ded2:	e8 db f0 ff ff       	call   c000cfb2 <panic(char const*)>
c000ded7:	83 c4 10             	add    esp,0x10
c000deda:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dede:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000dee1:	89 38                	mov    DWORD PTR [eax],edi
c000dee3:	31 c0                	xor    eax,eax
c000dee5:	83 c4 1c             	add    esp,0x1c
c000dee8:	5b                   	pop    ebx
c000dee9:	5e                   	pop    esi
c000deea:	5f                   	pop    edi
c000deeb:	5d                   	pop    ebp
c000deec:	c3                   	ret    
c000deed:	90                   	nop

c000deee <Pipe::Pipe(int)>:
c000deee:	83 ec 0c             	sub    esp,0xc
c000def1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def5:	83 ec 08             	sub    esp,0x8
c000def8:	6a 00                	push   0x0
c000defa:	50                   	push   eax
c000defb:	e8 70 31 00 00       	call   c0011070 <UnixFile::UnixFile(int)>
c000df00:	83 c4 10             	add    esp,0x10
c000df03:	ba 3c 8f 03 c0       	mov    edx,0xc0038f3c
c000df08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df0c:	89 10                	mov    DWORD PTR [eax],edx
c000df0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df12:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000df16:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000df19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df1d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000df24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df28:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000df2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000df33:	83 ec 0c             	sub    esp,0xc
c000df36:	50                   	push   eax
c000df37:	e8 53 f5 ff ff       	call   c000d48f <malloc>
c000df3c:	83 c4 10             	add    esp,0x10
c000df3f:	89 c2                	mov    edx,eax
c000df41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df45:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000df48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df4c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000df50:	90                   	nop
c000df51:	83 c4 0c             	add    esp,0xc
c000df54:	c3                   	ret    
c000df55:	90                   	nop

c000df56 <changeTSS>:
c000df56:	83 ec 0c             	sub    esp,0xc
c000df59:	e8 ec 91 00 00       	call   c001714a <thisCPU()>
c000df5e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000df64:	83 ec 08             	sub    esp,0x8
c000df67:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c000df6a:	05 7c 11 00 00       	add    eax,0x117c
c000df6f:	c1 e1 15             	shl    ecx,0x15
c000df72:	ba 00 00 e8 01       	mov    edx,0x1e80000
c000df77:	29 ca                	sub    edx,ecx
c000df79:	52                   	push   edx
c000df7a:	50                   	push   eax
c000df7b:	e8 28 2e 00 00       	call   c0010da8 <TSS::setESP(unsigned long)>
c000df80:	83 c4 1c             	add    esp,0x1c
c000df83:	c3                   	ret    

c000df84 <Process::addArgs(char**)>:
c000df84:	57                   	push   edi
c000df85:	56                   	push   esi
c000df86:	53                   	push   ebx
c000df87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df8b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000df8f:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c000df99:	85 ff                	test   edi,edi
c000df9b:	74 3d                	je     c000dfda <Process::addArgs(char**)+0x56>
c000df9d:	8b 07                	mov    eax,DWORD PTR [edi]
c000df9f:	85 c0                	test   eax,eax
c000dfa1:	74 37                	je     c000dfda <Process::addArgs(char**)+0x56>
c000dfa3:	31 db                	xor    ebx,ebx
c000dfa5:	83 ec 0c             	sub    esp,0xc
c000dfa8:	50                   	push   eax
c000dfa9:	e8 53 27 ff ff       	call   c0000701 <strlen>
c000dfae:	40                   	inc    eax
c000dfaf:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfb2:	e8 d8 f4 ff ff       	call   c000d48f <malloc>
c000dfb7:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c000dfbe:	5a                   	pop    edx
c000dfbf:	59                   	pop    ecx
c000dfc0:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c000dfc3:	43                   	inc    ebx
c000dfc4:	50                   	push   eax
c000dfc5:	e8 2a 28 ff ff       	call   c00007f4 <strcpy>
c000dfca:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c000dfd0:	83 c4 10             	add    esp,0x10
c000dfd3:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c000dfd6:	85 c0                	test   eax,eax
c000dfd8:	75 cb                	jne    c000dfa5 <Process::addArgs(char**)+0x21>
c000dfda:	5b                   	pop    ebx
c000dfdb:	5e                   	pop    esi
c000dfdc:	5f                   	pop    edi
c000dfdd:	c3                   	ret    

c000dfde <Process::Process(char const*, Process*, char**)>:
c000dfde:	56                   	push   esi
c000dfdf:	53                   	push   ebx
c000dfe0:	83 ec 14             	sub    esp,0x14
c000dfe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfe7:	05 0c 02 00 00       	add    eax,0x20c
c000dfec:	bb 07 00 00 00       	mov    ebx,0x7
c000dff1:	89 c6                	mov    esi,eax
c000dff3:	85 db                	test   ebx,ebx
c000dff5:	78 12                	js     c000e009 <Process::Process(char const*, Process*, char**)+0x2b>
c000dff7:	83 ec 0c             	sub    esp,0xc
c000dffa:	56                   	push   esi
c000dffb:	e8 e8 09 01 00       	call   c001e9e8 <ThreadControlBlock::ThreadControlBlock()>
c000e000:	83 c4 10             	add    esp,0x10
c000e003:	83 c6 63             	add    esi,0x63
c000e006:	4b                   	dec    ebx
c000e007:	eb ea                	jmp    c000dff3 <Process::Process(char const*, Process*, char**)+0x15>
c000e009:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e00d:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c000e014:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e018:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c000e021:	a1 f4 ad 03 c0       	mov    eax,ds:0xc003adf4
c000e026:	8d 50 01             	lea    edx,[eax+0x1]
c000e029:	89 15 f4 ad 03 c0    	mov    DWORD PTR ds:0xc003adf4,edx
c000e02f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e033:	89 02                	mov    DWORD PTR [edx],eax
c000e035:	83 ec 0c             	sub    esp,0xc
c000e038:	6a 10                	push   0x10
c000e03a:	e8 05 44 00 00       	call   c0012444 <operator new(unsigned long)>
c000e03f:	83 c4 10             	add    esp,0x10
c000e042:	89 c3                	mov    ebx,eax
c000e044:	83 ec 08             	sub    esp,0x8
c000e047:	6a 00                	push   0x0
c000e049:	53                   	push   ebx
c000e04a:	e8 89 40 00 00       	call   c00120d8 <VAS::VAS(bool)>
c000e04f:	83 c4 10             	add    esp,0x10
c000e052:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e056:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c000e05c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e060:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000e06a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e06e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e072:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c000e078:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e07c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e082:	85 c0                	test   eax,eax
c000e084:	74 42                	je     c000e0c8 <Process::Process(char const*, Process*, char**)+0xea>
c000e086:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e08a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e090:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000e096:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e09a:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c000e0a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0a4:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e0aa:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000e0b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0b4:	05 0c 01 00 00       	add    eax,0x10c
c000e0b9:	83 ec 08             	sub    esp,0x8
c000e0bc:	52                   	push   edx
c000e0bd:	50                   	push   eax
c000e0be:	e8 31 27 ff ff       	call   c00007f4 <strcpy>
c000e0c3:	83 c4 10             	add    esp,0x10
c000e0c6:	eb 5c                	jmp    c000e124 <Process::Process(char const*, Process*, char**)+0x146>
c000e0c8:	83 ec 0c             	sub    esp,0xc
c000e0cb:	68 60 12 00 00       	push   0x1260
c000e0d0:	e8 6f 43 00 00       	call   c0012444 <operator new(unsigned long)>
c000e0d5:	83 c4 10             	add    esp,0x10
c000e0d8:	89 c3                	mov    ebx,eax
c000e0da:	83 ec 08             	sub    esp,0x8
c000e0dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0e1:	53                   	push   ebx
c000e0e2:	e8 bf 29 00 00       	call   c0010aa6 <VgaText::VgaText(char const*)>
c000e0e7:	83 c4 10             	add    esp,0x10
c000e0ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0ee:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c000e0f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0f8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000e0fe:	83 ec 0c             	sub    esp,0xc
c000e101:	50                   	push   eax
c000e102:	e8 a0 1d 00 00       	call   c000fea7 <addToTerminalCycle(VgaText*)>
c000e107:	83 c4 10             	add    esp,0x10
c000e10a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e10e:	05 0c 01 00 00       	add    eax,0x10c
c000e113:	83 ec 08             	sub    esp,0x8
c000e116:	68 50 8f 03 c0       	push   0xc0038f50
c000e11b:	50                   	push   eax
c000e11c:	e8 d3 26 ff ff       	call   c00007f4 <strcpy>
c000e121:	83 c4 10             	add    esp,0x10
c000e124:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e128:	83 c0 0c             	add    eax,0xc
c000e12b:	83 ec 08             	sub    esp,0x8
c000e12e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e132:	50                   	push   eax
c000e133:	e8 bc 26 ff ff       	call   c00007f4 <strcpy>
c000e138:	83 c4 10             	add    esp,0x10
c000e13b:	83 ec 08             	sub    esp,0x8
c000e13e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e142:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e146:	e8 39 fe ff ff       	call   c000df84 <Process::addArgs(char**)>
c000e14b:	83 c4 10             	add    esp,0x10
c000e14e:	83 ec 08             	sub    esp,0x8
c000e151:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e155:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e159:	e8 2e d9 ff ff       	call   c000ba8c <loadProgramIntoMemory(Process*, char const*)>
c000e15e:	83 c4 10             	add    esp,0x10
c000e161:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e165:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e169:	83 f0 01             	xor    eax,0x1
c000e16c:	88 c2                	mov    dl,al
c000e16e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e172:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c000e178:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e17d:	83 ec 08             	sub    esp,0x8
c000e180:	50                   	push   eax
c000e181:	68 a4 8f 03 c0       	push   0xc0038fa4
c000e186:	e8 09 ed ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c000e18b:	83 c4 10             	add    esp,0x10
c000e18e:	90                   	nop
c000e18f:	83 c4 14             	add    esp,0x14
c000e192:	5b                   	pop    ebx
c000e193:	5e                   	pop    esi
c000e194:	c3                   	ret    
c000e195:	90                   	nop

c000e196 <Process::Process(bool, char const*, Process*, char**)>:
c000e196:	56                   	push   esi
c000e197:	53                   	push   ebx
c000e198:	83 ec 14             	sub    esp,0x14
c000e19b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e19f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000e1a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1a7:	05 0c 02 00 00       	add    eax,0x20c
c000e1ac:	bb 07 00 00 00       	mov    ebx,0x7
c000e1b1:	89 c6                	mov    esi,eax
c000e1b3:	85 db                	test   ebx,ebx
c000e1b5:	78 12                	js     c000e1c9 <Process::Process(bool, char const*, Process*, char**)+0x33>
c000e1b7:	83 ec 0c             	sub    esp,0xc
c000e1ba:	56                   	push   esi
c000e1bb:	e8 28 08 01 00       	call   c001e9e8 <ThreadControlBlock::ThreadControlBlock()>
c000e1c0:	83 c4 10             	add    esp,0x10
c000e1c3:	83 c6 63             	add    esi,0x63
c000e1c6:	4b                   	dec    ebx
c000e1c7:	eb ea                	jmp    c000e1b3 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c000e1c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1cd:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c000e1d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1d8:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c000e1e1:	a1 f4 ad 03 c0       	mov    eax,ds:0xc003adf4
c000e1e6:	8d 50 01             	lea    edx,[eax+0x1]
c000e1e9:	89 15 f4 ad 03 c0    	mov    DWORD PTR ds:0xc003adf4,edx
c000e1ef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e1f3:	89 02                	mov    DWORD PTR [edx],eax
c000e1f5:	83 ec 0c             	sub    esp,0xc
c000e1f8:	6a 10                	push   0x10
c000e1fa:	e8 45 42 00 00       	call   c0012444 <operator new(unsigned long)>
c000e1ff:	83 c4 10             	add    esp,0x10
c000e202:	89 c3                	mov    ebx,eax
c000e204:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000e209:	83 ec 08             	sub    esp,0x8
c000e20c:	50                   	push   eax
c000e20d:	53                   	push   ebx
c000e20e:	e8 c5 3e 00 00       	call   c00120d8 <VAS::VAS(bool)>
c000e213:	83 c4 10             	add    esp,0x10
c000e216:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e21a:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c000e220:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e224:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000e22e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e232:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e236:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c000e23c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e240:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e246:	85 c0                	test   eax,eax
c000e248:	74 42                	je     c000e28c <Process::Process(bool, char const*, Process*, char**)+0xf6>
c000e24a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e24e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e254:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000e25a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e25e:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c000e264:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e268:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e26e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000e274:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e278:	05 0c 01 00 00       	add    eax,0x10c
c000e27d:	83 ec 08             	sub    esp,0x8
c000e280:	52                   	push   edx
c000e281:	50                   	push   eax
c000e282:	e8 6d 25 ff ff       	call   c00007f4 <strcpy>
c000e287:	83 c4 10             	add    esp,0x10
c000e28a:	eb 5c                	jmp    c000e2e8 <Process::Process(bool, char const*, Process*, char**)+0x152>
c000e28c:	83 ec 0c             	sub    esp,0xc
c000e28f:	68 60 12 00 00       	push   0x1260
c000e294:	e8 ab 41 00 00       	call   c0012444 <operator new(unsigned long)>
c000e299:	83 c4 10             	add    esp,0x10
c000e29c:	89 c3                	mov    ebx,eax
c000e29e:	83 ec 08             	sub    esp,0x8
c000e2a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e2a5:	53                   	push   ebx
c000e2a6:	e8 fb 27 00 00       	call   c0010aa6 <VgaText::VgaText(char const*)>
c000e2ab:	83 c4 10             	add    esp,0x10
c000e2ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2b2:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c000e2b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2bc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000e2c2:	83 ec 0c             	sub    esp,0xc
c000e2c5:	50                   	push   eax
c000e2c6:	e8 dc 1b 00 00       	call   c000fea7 <addToTerminalCycle(VgaText*)>
c000e2cb:	83 c4 10             	add    esp,0x10
c000e2ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2d2:	05 0c 01 00 00       	add    eax,0x10c
c000e2d7:	83 ec 08             	sub    esp,0x8
c000e2da:	68 50 8f 03 c0       	push   0xc0038f50
c000e2df:	50                   	push   eax
c000e2e0:	e8 0f 25 ff ff       	call   c00007f4 <strcpy>
c000e2e5:	83 c4 10             	add    esp,0x10
c000e2e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2ec:	83 c0 0c             	add    eax,0xc
c000e2ef:	83 ec 08             	sub    esp,0x8
c000e2f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e2f6:	50                   	push   eax
c000e2f7:	e8 f8 24 ff ff       	call   c00007f4 <strcpy>
c000e2fc:	83 c4 10             	add    esp,0x10
c000e2ff:	83 ec 08             	sub    esp,0x8
c000e302:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000e306:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e30a:	e8 75 fc ff ff       	call   c000df84 <Process::addArgs(char**)>
c000e30f:	83 c4 10             	add    esp,0x10
c000e312:	90                   	nop
c000e313:	83 c4 14             	add    esp,0x14
c000e316:	5b                   	pop    ebx
c000e317:	5e                   	pop    esi
c000e318:	c3                   	ret    

c000e319 <disableIRQs()>:
c000e319:	fa                   	cli    
c000e31a:	ff 05 f4 bb 03 c0    	inc    DWORD PTR ds:0xc003bbf4
c000e320:	c3                   	ret    

c000e321 <getIRQNestingLevel()>:
c000e321:	a1 f4 bb 03 c0       	mov    eax,ds:0xc003bbf4
c000e326:	c3                   	ret    

c000e327 <enableIRQs()>:
c000e327:	a1 f4 bb 03 c0       	mov    eax,ds:0xc003bbf4
c000e32c:	48                   	dec    eax
c000e32d:	a3 f4 bb 03 c0       	mov    ds:0xc003bbf4,eax
c000e332:	75 01                	jne    c000e335 <enableIRQs()+0xe>
c000e334:	fb                   	sti    
c000e335:	c3                   	ret    

c000e336 <lockScheduler()>:
c000e336:	eb e1                	jmp    c000e319 <disableIRQs()>

c000e338 <unlockScheduler()>:
c000e338:	eb ed                	jmp    c000e327 <enableIRQs()>

c000e33a <userModeEntryPoint(void*)>:
c000e33a:	83 ec 0c             	sub    esp,0xc
c000e33d:	e8 f6 ff ff ff       	call   c000e338 <unlockScheduler()>
c000e342:	fb                   	sti    
c000e343:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e348:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e34b:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c000e351:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e355:	83 c4 0c             	add    esp,0xc
c000e358:	e9 b6 1e ff ff       	jmp    c0000213 <goToUsermode>

c000e35d <lockStuff()>:
c000e35d:	e8 b7 ff ff ff       	call   c000e319 <disableIRQs()>
c000e362:	ff 05 f0 bb 03 c0    	inc    DWORD PTR ds:0xc003bbf0
c000e368:	c3                   	ret    

c000e369 <taskStartupFunction>:
c000e369:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e36e:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c000e371:	c3                   	ret    

c000e372 <updateTimeUsed()>:
c000e372:	57                   	push   edi
c000e373:	56                   	push   esi
c000e374:	53                   	push   ebx
c000e375:	e8 d0 8d 00 00       	call   c001714a <thisCPU()>
c000e37a:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c000e381:	74 49                	je     c000e3cc <updateTimeUsed()+0x5a>
c000e383:	0f 31                	rdtsc  
c000e385:	89 c1                	mov    ecx,eax
c000e387:	a3 30 bc 03 c0       	mov    ds:0xc003bc30,eax
c000e38c:	2b 0d 20 bc 03 c0    	sub    ecx,DWORD PTR ds:0xc003bc20
c000e392:	89 d3                	mov    ebx,edx
c000e394:	89 0d 28 bc 03 c0    	mov    DWORD PTR ds:0xc003bc28,ecx
c000e39a:	1b 1d 24 bc 03 c0    	sbb    ebx,DWORD PTR ds:0xc003bc24
c000e3a0:	a3 20 bc 03 c0       	mov    ds:0xc003bc20,eax
c000e3a5:	89 1d 2c bc 03 c0    	mov    DWORD PTR ds:0xc003bc2c,ebx
c000e3ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e3b0:	89 15 34 bc 03 c0    	mov    DWORD PTR ds:0xc003bc34,edx
c000e3b6:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000e3b9:	89 15 24 bc 03 c0    	mov    DWORD PTR ds:0xc003bc24,edx
c000e3bf:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c000e3c2:	01 f1                	add    ecx,esi
c000e3c4:	11 fb                	adc    ebx,edi
c000e3c6:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c000e3c9:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c000e3cc:	5b                   	pop    ebx
c000e3cd:	5e                   	pop    esi
c000e3ce:	5f                   	pop    edi
c000e3cf:	c3                   	ret    

c000e3d0 <switchToThread(ThreadControlBlock*)>:
c000e3d0:	53                   	push   ebx
c000e3d1:	83 ec 08             	sub    esp,0x8
c000e3d4:	a1 f0 bb 03 c0       	mov    eax,ds:0xc003bbf0
c000e3d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e3dd:	85 c0                	test   eax,eax
c000e3df:	75 30                	jne    c000e411 <switchToThread(ThreadControlBlock*)+0x41>
c000e3e1:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c000e3e4:	3c ff                	cmp    al,0xff
c000e3e6:	74 25                	je     c000e40d <switchToThread(ThreadControlBlock*)+0x3d>
c000e3e8:	0f b6 d0             	movzx  edx,al
c000e3eb:	b8 84 03 00 00       	mov    eax,0x384
c000e3f0:	29 d0                	sub    eax,edx
c000e3f2:	c1 e0 10             	shl    eax,0x10
c000e3f5:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c000e3f8:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000e3fb:	e8 72 ff ff ff       	call   c000e372 <updateTimeUsed()>
c000e400:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e404:	83 c4 08             	add    esp,0x8
c000e407:	5b                   	pop    ebx
c000e408:	e9 3f 1e ff ff       	jmp    c000024c <switchToThreadASM>
c000e40d:	31 c0                	xor    eax,eax
c000e40f:	eb e7                	jmp    c000e3f8 <switchToThread(ThreadControlBlock*)+0x28>
c000e411:	c7 05 ec bb 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003bbec,0x1
c000e41b:	83 c4 08             	add    esp,0x8
c000e41e:	5b                   	pop    ebx
c000e41f:	c3                   	ret    

c000e420 <Semaphore::Semaphore(int)>:
c000e420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e424:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e428:	89 10                	mov    DWORD PTR [eax],edx
c000e42a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e42e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000e435:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e439:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e444:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000e44b:	90                   	nop
c000e44c:	c3                   	ret    
c000e44d:	90                   	nop

c000e44e <Mutex::Mutex()>:
c000e44e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e452:	6a 01                	push   0x1
c000e454:	50                   	push   eax
c000e455:	e8 c6 ff ff ff       	call   c000e420 <Semaphore::Semaphore(int)>
c000e45a:	83 c4 08             	add    esp,0x8
c000e45d:	90                   	nop
c000e45e:	c3                   	ret    
c000e45f:	90                   	nop

c000e460 <Process::createThread(void (*)(void*), void*, int)>:
c000e460:	55                   	push   ebp
c000e461:	31 c9                	xor    ecx,ecx
c000e463:	57                   	push   edi
c000e464:	56                   	push   esi
c000e465:	53                   	push   ebx
c000e466:	83 ec 1c             	sub    esp,0x1c
c000e469:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e46d:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c000e474:	89 f2                	mov    edx,esi
c000e476:	0f b7 c2             	movzx  eax,dx
c000e479:	83 e2 01             	and    edx,0x1
c000e47c:	74 14                	je     c000e492 <Process::createThread(void (*)(void*), void*, int)+0x32>
c000e47e:	d1 f8                	sar    eax,1
c000e480:	41                   	inc    ecx
c000e481:	89 c2                	mov    edx,eax
c000e483:	83 f9 10             	cmp    ecx,0x10
c000e486:	75 ee                	jne    c000e476 <Process::createThread(void (*)(void*), void*, int)+0x16>
c000e488:	83 c4 1c             	add    esp,0x1c
c000e48b:	31 c0                	xor    eax,eax
c000e48d:	5b                   	pop    ebx
c000e48e:	5e                   	pop    esi
c000e48f:	5f                   	pop    edi
c000e490:	5d                   	pop    ebp
c000e491:	c3                   	ret    
c000e492:	83 ec 08             	sub    esp,0x8
c000e495:	b8 01 00 00 00       	mov    eax,0x1
c000e49a:	d3 e0                	shl    eax,cl
c000e49c:	09 c6                	or     esi,eax
c000e49e:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c000e4a4:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c000e4ab:	8d 34 09             	lea    esi,[ecx+ecx*1]
c000e4ae:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e4b1:	01 ce                	add    esi,ecx
c000e4b3:	89 f0                	mov    eax,esi
c000e4b5:	c1 e0 05             	shl    eax,0x5
c000e4b8:	01 c6                	add    esi,eax
c000e4ba:	8d 04 33             	lea    eax,[ebx+esi*1]
c000e4bd:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c000e4c3:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c000e4c9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e4cd:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c000e4d3:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c000e4d9:	89 ca                	mov    edx,ecx
c000e4db:	f7 da                	neg    edx
c000e4dd:	c1 e2 15             	shl    edx,0x15
c000e4e0:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c000e4e6:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c000e4ec:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e4f0:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c000e4fa:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c000e500:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e504:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c000e50a:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c000e514:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c000e51e:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c000e525:	50                   	push   eax
c000e526:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e52a:	68 10 bc 03 c0       	push   0xc003bc10
c000e52f:	e8 4a 05 01 00       	call   c001ea7e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e534:	83 c4 10             	add    esp,0x10
c000e537:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e53b:	83 c4 1c             	add    esp,0x1c
c000e53e:	5b                   	pop    ebx
c000e53f:	5e                   	pop    esi
c000e540:	5f                   	pop    edi
c000e541:	5d                   	pop    ebp
c000e542:	c3                   	ret    
c000e543:	90                   	nop

c000e544 <Process::createUserThread()>:
c000e544:	83 ec 0c             	sub    esp,0xc
c000e547:	68 80 00 00 00       	push   0x80
c000e54c:	6a 00                	push   0x0
c000e54e:	68 3a e3 00 c0       	push   0xc000e33a
c000e553:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e557:	e8 04 ff ff ff       	call   c000e460 <Process::createThread(void (*)(void*), void*, int)>
c000e55c:	83 c4 1c             	add    esp,0x1c
c000e55f:	c3                   	ret    

c000e560 <setupMultitasking(void (*)())>:
c000e560:	56                   	push   esi
c000e561:	53                   	push   ebx
c000e562:	53                   	push   ebx
c000e563:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e567:	eb 10                	jmp    c000e579 <setupMultitasking(void (*)())+0x19>
c000e569:	83 ec 0c             	sub    esp,0xc
c000e56c:	68 10 bc 03 c0       	push   0xc003bc10
c000e571:	e8 f8 05 01 00       	call   c001eb6e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e576:	83 c4 10             	add    esp,0x10
c000e579:	83 ec 0c             	sub    esp,0xc
c000e57c:	68 10 bc 03 c0       	push   0xc003bc10
c000e581:	e8 cc 05 01 00       	call   c001eb52 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e586:	83 c4 10             	add    esp,0x10
c000e589:	84 c0                	test   al,al
c000e58b:	74 dc                	je     c000e569 <setupMultitasking(void (*)())+0x9>
c000e58d:	83 ec 0c             	sub    esp,0xc
c000e590:	68 3b 07 00 00       	push   0x73b
c000e595:	e8 aa 3e 00 00       	call   c0012444 <operator new(unsigned long)>
c000e59a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e5a1:	89 c3                	mov    ebx,eax
c000e5a3:	6a 00                	push   0x0
c000e5a5:	68 54 8f 03 c0       	push   0xc0038f54
c000e5aa:	6a 01                	push   0x1
c000e5ac:	50                   	push   eax
c000e5ad:	e8 e4 fb ff ff       	call   c000e196 <Process::Process(bool, char const*, Process*, char**)>
c000e5b2:	83 c4 18             	add    esp,0x18
c000e5b5:	89 1d 1c bc 03 c0    	mov    DWORD PTR ds:0xc003bc1c,ebx
c000e5bb:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c000e5c1:	68 cc 8f 03 c0       	push   0xc0038fcc
c000e5c6:	e8 c9 e8 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c000e5cb:	58                   	pop    eax
c000e5cc:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c000e5d2:	e8 44 20 00 00       	call   c001061b <setActiveTerminal(VgaText*)>
c000e5d7:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c000e5df:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c000e5e5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e5e8:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c000e5f2:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c000e5f8:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c000e5fe:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c000e608:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c000e612:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c000e61c:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c000e622:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c000e628:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c000e632:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c000e638:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c000e642:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000e648:	5a                   	pop    edx
c000e649:	59                   	pop    ecx
c000e64a:	68 50 8f 03 c0       	push   0xc0038f50
c000e64f:	50                   	push   eax
c000e650:	e8 9f 21 ff ff       	call   c00007f4 <strcpy>
c000e655:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c000e65c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e660:	83 c4 14             	add    esp,0x14
c000e663:	5b                   	pop    ebx
c000e664:	5e                   	pop    esi
c000e665:	e9 d4 1b ff ff       	jmp    c000023e <switchToThreadASMFirstTime>

c000e66a <schedule()>:
c000e66a:	a1 f0 bb 03 c0       	mov    eax,ds:0xc003bbf0
c000e66f:	85 c0                	test   eax,eax
c000e671:	74 0b                	je     c000e67e <schedule()+0x14>
c000e673:	c7 05 ec bb 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003bbec,0x1
c000e67d:	c3                   	ret    
c000e67e:	53                   	push   ebx
c000e67f:	83 ec 14             	sub    esp,0x14
c000e682:	68 10 bc 03 c0       	push   0xc003bc10
c000e687:	e8 c6 04 01 00       	call   c001eb52 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e68c:	83 c4 10             	add    esp,0x10
c000e68f:	84 c0                	test   al,al
c000e691:	75 38                	jne    c000e6cb <schedule()+0x61>
c000e693:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e698:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000e69b:	4a                   	dec    edx
c000e69c:	74 32                	je     c000e6d0 <schedule()+0x66>
c000e69e:	83 ec 0c             	sub    esp,0xc
c000e6a1:	68 10 bc 03 c0       	push   0xc003bc10
c000e6a6:	e8 71 05 01 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e6ab:	c7 04 24 10 bc 03 c0 	mov    DWORD PTR [esp],0xc003bc10
c000e6b2:	89 c3                	mov    ebx,eax
c000e6b4:	e8 b5 04 01 00       	call   c001eb6e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e6b9:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c000e6c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e6c3:	e8 08 fd ff ff       	call   c000e3d0 <switchToThread(ThreadControlBlock*)>
c000e6c8:	83 c4 10             	add    esp,0x10
c000e6cb:	83 c4 08             	add    esp,0x8
c000e6ce:	5b                   	pop    ebx
c000e6cf:	c3                   	ret    
c000e6d0:	83 ec 08             	sub    esp,0x8
c000e6d3:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e6da:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c000e6e0:	68 10 bc 03 c0       	push   0xc003bc10
c000e6e5:	e8 94 03 01 00       	call   c001ea7e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e6ea:	83 c4 10             	add    esp,0x10
c000e6ed:	eb af                	jmp    c000e69e <schedule()+0x34>

c000e6ef <unlockStuff()>:
c000e6ef:	a1 f0 bb 03 c0       	mov    eax,ds:0xc003bbf0
c000e6f4:	48                   	dec    eax
c000e6f5:	a3 f0 bb 03 c0       	mov    ds:0xc003bbf0,eax
c000e6fa:	75 09                	jne    c000e705 <unlockStuff()+0x16>
c000e6fc:	a1 ec bb 03 c0       	mov    eax,ds:0xc003bbec
c000e701:	85 c0                	test   eax,eax
c000e703:	75 05                	jne    c000e70a <unlockStuff()+0x1b>
c000e705:	e9 1d fc ff ff       	jmp    c000e327 <enableIRQs()>
c000e70a:	83 ec 0c             	sub    esp,0xc
c000e70d:	c7 05 ec bb 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003bbec,0x0
c000e717:	e8 4e ff ff ff       	call   c000e66a <schedule()>
c000e71c:	83 c4 0c             	add    esp,0xc
c000e71f:	e9 03 fc ff ff       	jmp    c000e327 <enableIRQs()>

c000e724 <forkProcess(regs*)>:
c000e724:	56                   	push   esi
c000e725:	53                   	push   ebx
c000e726:	50                   	push   eax
c000e727:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e72c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e72f:	66 83 b8 24 05 00 00 01 	cmp    WORD PTR [eax+0x524],0x1
c000e737:	0f 85 3e 01 00 00    	jne    c000e87b <forkProcess(regs*)+0x157>
c000e73d:	e8 1b fc ff ff       	call   c000e35d <lockStuff()>
c000e742:	83 ec 0c             	sub    esp,0xc
c000e745:	68 3b 07 00 00       	push   0x73b
c000e74a:	e8 f5 3c 00 00       	call   c0012444 <operator new(unsigned long)>
c000e74f:	89 c3                	mov    ebx,eax
c000e751:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e756:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e759:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e760:	50                   	push   eax
c000e761:	83 c0 0c             	add    eax,0xc
c000e764:	50                   	push   eax
c000e765:	6a 00                	push   0x0
c000e767:	53                   	push   ebx
c000e768:	e8 29 fa ff ff       	call   c000e196 <Process::Process(bool, char const*, Process*, char**)>
c000e76d:	8b b3 32 05 00 00    	mov    esi,DWORD PTR [ebx+0x532]
c000e773:	83 c4 20             	add    esp,0x20
c000e776:	85 f6                	test   esi,esi
c000e778:	74 16                	je     c000e790 <forkProcess(regs*)+0x6c>
c000e77a:	83 ec 0c             	sub    esp,0xc
c000e77d:	56                   	push   esi
c000e77e:	e8 fb 2f 00 00       	call   c001177e <VAS::~VAS()>
c000e783:	59                   	pop    ecx
c000e784:	58                   	pop    eax
c000e785:	6a 10                	push   0x10
c000e787:	56                   	push   esi
c000e788:	e8 c6 3c 00 00       	call   c0012453 <operator delete(void*, unsigned long)>
c000e78d:	83 c4 10             	add    esp,0x10
c000e790:	83 ec 0c             	sub    esp,0xc
c000e793:	66 c7 83 24 05 00 00 01 00 	mov    WORD PTR [ebx+0x524],0x1
c000e79c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e7a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e7a4:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c000e7aa:	89 83 2e 05 00 00    	mov    DWORD PTR [ebx+0x52e],eax
c000e7b0:	6a 10                	push   0x10
c000e7b2:	e8 8d 3c 00 00       	call   c0012444 <operator new(unsigned long)>
c000e7b7:	59                   	pop    ecx
c000e7b8:	89 c6                	mov    esi,eax
c000e7ba:	58                   	pop    eax
c000e7bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e7c0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e7c3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000e7c9:	56                   	push   esi
c000e7ca:	e8 d1 34 00 00       	call   c0011ca0 <VAS::VAS(VAS*)>
c000e7cf:	89 b3 32 05 00 00    	mov    DWORD PTR [ebx+0x532],esi
c000e7d5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000e7d8:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e7da:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c000e7e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e7e5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e7e8:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c000e7ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e7f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e7f6:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c000e7fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e801:	8a 40 44             	mov    al,BYTE PTR [eax+0x44]
c000e804:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c000e80e:	88 83 50 02 00 00    	mov    BYTE PTR [ebx+0x250],al
c000e814:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c000e81a:	81 c3 0c 02 00 00    	add    ebx,0x20c
c000e820:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e825:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000e828:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000e82f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000e832:	c7 43 0c 01 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1
c000e839:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000e840:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000e847:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e84c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000e84f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e852:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e857:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000e85a:	58                   	pop    eax
c000e85b:	5a                   	pop    edx
c000e85c:	53                   	push   ebx
c000e85d:	68 10 bc 03 c0       	push   0xc003bc10
c000e862:	e8 17 02 01 00       	call   c001ea7e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e867:	e8 83 fe ff ff       	call   c000e6ef <unlockStuff()>
c000e86c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e871:	83 c4 10             	add    esp,0x10
c000e874:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000e877:	5a                   	pop    edx
c000e878:	5b                   	pop    ebx
c000e879:	5e                   	pop    esi
c000e87a:	c3                   	ret    
c000e87b:	83 ec 0c             	sub    esp,0xc
c000e87e:	68 00 90 03 c0       	push   0xc0039000
c000e883:	e8 0c e6 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c000e888:	83 c4 10             	add    esp,0x10
c000e88b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e890:	eb e5                	jmp    c000e877 <forkProcess(regs*)+0x153>

c000e892 <Semaphore::tryAcquire()>:
c000e892:	83 ec 0c             	sub    esp,0xc
c000e895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e899:	e8 bf fa ff ff       	call   c000e35d <lockStuff()>
c000e89e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e8a1:	3b 10                	cmp    edx,DWORD PTR [eax]
c000e8a3:	7c 0b                	jl     c000e8b0 <Semaphore::tryAcquire()+0x1e>
c000e8a5:	e8 45 fe ff ff       	call   c000e6ef <unlockStuff()>
c000e8aa:	31 c0                	xor    eax,eax
c000e8ac:	83 c4 0c             	add    esp,0xc
c000e8af:	c3                   	ret    
c000e8b0:	42                   	inc    edx
c000e8b1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e8b4:	e8 36 fe ff ff       	call   c000e6ef <unlockStuff()>
c000e8b9:	b0 01                	mov    al,0x1
c000e8bb:	83 c4 0c             	add    esp,0xc
c000e8be:	c3                   	ret    
c000e8bf:	90                   	nop

c000e8c0 <Semaphore::assertLocked(char const*)>:
c000e8c0:	83 ec 0c             	sub    esp,0xc
c000e8c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e8cb:	e8 8d fa ff ff       	call   c000e35d <lockStuff()>
c000e8d0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e8d2:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c000e8d5:	7c 08                	jl     c000e8df <Semaphore::assertLocked(char const*)+0x1f>
c000e8d7:	83 c4 0c             	add    esp,0xc
c000e8da:	e9 10 fe ff ff       	jmp    c000e6ef <unlockStuff()>
c000e8df:	83 ec 0c             	sub    esp,0xc
c000e8e2:	52                   	push   edx
c000e8e3:	e8 ca e6 ff ff       	call   c000cfb2 <panic(char const*)>
c000e8e8:	83 c4 10             	add    esp,0x10
c000e8eb:	83 c4 0c             	add    esp,0xc
c000e8ee:	e9 fc fd ff ff       	jmp    c000e6ef <unlockStuff()>

c000e8f3 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c000e8f3:	83 ec 0c             	sub    esp,0xc
c000e8f6:	e8 26 fa ff ff       	call   c000e321 <getIRQNestingLevel()>
c000e8fb:	83 ec 08             	sub    esp,0x8
c000e8fe:	50                   	push   eax
c000e8ff:	68 2c 90 03 c0       	push   0xc003902c
c000e904:	e8 8b e5 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c000e909:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e90d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e912:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000e915:	e8 50 fd ff ff       	call   c000e66a <schedule()>
c000e91a:	e8 19 fa ff ff       	call   c000e338 <unlockScheduler()>
c000e91f:	e8 fd f9 ff ff       	call   c000e321 <getIRQNestingLevel()>
c000e924:	5a                   	pop    edx
c000e925:	59                   	pop    ecx
c000e926:	50                   	push   eax
c000e927:	68 60 90 03 c0       	push   0xc0039060
c000e92c:	e8 63 e5 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c000e931:	83 c4 1c             	add    esp,0x1c
c000e934:	c3                   	ret    

c000e935 <blockTask(TaskState)>:
c000e935:	83 ec 0c             	sub    esp,0xc
c000e938:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e93c:	e8 f5 f9 ff ff       	call   c000e336 <lockScheduler()>
c000e941:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e946:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000e949:	e8 1c fd ff ff       	call   c000e66a <schedule()>
c000e94e:	83 c4 0c             	add    esp,0xc
c000e951:	e9 e2 f9 ff ff       	jmp    c000e338 <unlockScheduler()>

c000e956 <waitTask(int, int*, int)>:
c000e956:	83 ec 18             	sub    esp,0x18
c000e959:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e95e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e962:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c000e965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e969:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e96e:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c000e971:	6a 07                	push   0x7
c000e973:	e8 bd ff ff ff       	call   c000e935 <blockTask(TaskState)>
c000e978:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e97d:	83 c4 10             	add    esp,0x10
c000e980:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c000e983:	85 d2                	test   edx,edx
c000e985:	74 0a                	je     c000e991 <waitTask(int, int*, int)+0x3b>
c000e987:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c000e98a:	89 02                	mov    DWORD PTR [edx],eax
c000e98c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e991:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c000e994:	83 c4 0c             	add    esp,0xc
c000e997:	c3                   	ret    

c000e998 <nanoSleepUntil(unsigned long long)>:
c000e998:	83 ec 0c             	sub    esp,0xc
c000e99b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e99f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e9a3:	3b 05 90 c3 03 c0    	cmp    eax,DWORD PTR ds:0xc003c390
c000e9a9:	89 d1                	mov    ecx,edx
c000e9ab:	1b 0d 94 c3 03 c0    	sbb    ecx,DWORD PTR ds:0xc003c394
c000e9b1:	73 04                	jae    c000e9b7 <nanoSleepUntil(unsigned long long)+0x1f>
c000e9b3:	83 c4 0c             	add    esp,0xc
c000e9b6:	c3                   	ret    
c000e9b7:	e8 a1 f9 ff ff       	call   c000e35d <lockStuff()>
c000e9bc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000e9c2:	83 ec 08             	sub    esp,0x8
c000e9c5:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c000e9c8:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c000e9cb:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c000e9d1:	68 04 bc 03 c0       	push   0xc003bc04
c000e9d6:	e8 a3 00 01 00       	call   c001ea7e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e9db:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e9e2:	e8 4e ff ff ff       	call   c000e935 <blockTask(TaskState)>
c000e9e7:	83 c4 1c             	add    esp,0x1c
c000e9ea:	e9 00 fd ff ff       	jmp    c000e6ef <unlockStuff()>

c000e9ef <nanoSleep(unsigned long long)>:
c000e9ef:	a1 90 c3 03 c0       	mov    eax,ds:0xc003c390
c000e9f4:	8b 15 94 c3 03 c0    	mov    edx,DWORD PTR ds:0xc003c394
c000e9fa:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c000e9fe:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c000ea02:	eb 94                	jmp    c000e998 <nanoSleepUntil(unsigned long long)>

c000ea04 <sleep(unsigned long long)>:
c000ea04:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c000ea0c:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c000ea11:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c000ea15:	01 ca                	add    edx,ecx
c000ea17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ea1b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ea1f:	eb ce                	jmp    c000e9ef <nanoSleep(unsigned long long)>
c000ea21:	90                   	nop

c000ea22 <Semaphore::acquire()>:
c000ea22:	83 ec 0c             	sub    esp,0xc
c000ea25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea29:	e8 2f f9 ff ff       	call   c000e35d <lockStuff()>
c000ea2e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ea31:	3b 10                	cmp    edx,DWORD PTR [eax]
c000ea33:	7d 0c                	jge    c000ea41 <Semaphore::acquire()+0x1f>
c000ea35:	42                   	inc    edx
c000ea36:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ea39:	83 c4 0c             	add    esp,0xc
c000ea3c:	e9 ae fc ff ff       	jmp    c000e6ef <unlockStuff()>
c000ea41:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000ea47:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c000ea4e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ea51:	85 d2                	test   edx,edx
c000ea53:	74 2a                	je     c000ea7f <Semaphore::acquire()+0x5d>
c000ea55:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ea58:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000ea5e:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c000ea61:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000ea67:	83 ec 0c             	sub    esp,0xc
c000ea6a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ea6d:	6a 05                	push   0x5
c000ea6f:	e8 c1 fe ff ff       	call   c000e935 <blockTask(TaskState)>
c000ea74:	83 c4 10             	add    esp,0x10
c000ea77:	83 c4 0c             	add    esp,0xc
c000ea7a:	e9 70 fc ff ff       	jmp    c000e6ef <unlockStuff()>
c000ea7f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000ea85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ea88:	eb d7                	jmp    c000ea61 <Semaphore::acquire()+0x3f>

c000ea8a <execveProcess(char const*, char* const*, char* const*)>:
c000ea8a:	56                   	push   esi
c000ea8b:	53                   	push   ebx
c000ea8c:	50                   	push   eax
c000ea8d:	e8 cb f8 ff ff       	call   c000e35d <lockStuff()>
c000ea92:	83 ec 0c             	sub    esp,0xc
c000ea95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ea9a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ea9d:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c000eaa3:	68 3b 07 00 00       	push   0x73b
c000eaa8:	e8 97 39 00 00       	call   c0012444 <operator new(unsigned long)>
c000eaad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eab1:	89 c3                	mov    ebx,eax
c000eab3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eab8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eabb:	ff b0 2a 05 00 00    	push   DWORD PTR [eax+0x52a]
c000eac1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eac5:	53                   	push   ebx
c000eac6:	e8 13 f5 ff ff       	call   c000dfde <Process::Process(char const*, Process*, char**)>
c000eacb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ead0:	83 c4 20             	add    esp,0x20
c000ead3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ead6:	85 f6                	test   esi,esi
c000ead8:	8b 00                	mov    eax,DWORD PTR [eax]
c000eada:	89 03                	mov    DWORD PTR [ebx],eax
c000eadc:	74 06                	je     c000eae4 <execveProcess(char const*, char* const*, char* const*)+0x5a>
c000eade:	89 b3 26 05 00 00    	mov    DWORD PTR [ebx+0x526],esi
c000eae4:	83 ec 0c             	sub    esp,0xc
c000eae7:	53                   	push   ebx
c000eae8:	e8 57 fa ff ff       	call   c000e544 <Process::createUserThread()>
c000eaed:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000eaf4:	e8 3c fe ff ff       	call   c000e935 <blockTask(TaskState)>
c000eaf9:	e8 f1 fb ff ff       	call   c000e6ef <unlockStuff()>
c000eafe:	e8 33 f8 ff ff       	call   c000e336 <lockScheduler()>
c000eb03:	e8 62 fb ff ff       	call   c000e66a <schedule()>
c000eb08:	e8 2b f8 ff ff       	call   c000e338 <unlockScheduler()>
c000eb0d:	83 c4 14             	add    esp,0x14
c000eb10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eb15:	5b                   	pop    ebx
c000eb16:	5e                   	pop    esi
c000eb17:	c3                   	ret    

c000eb18 <taskReturned>:
c000eb18:	83 ec 0c             	sub    esp,0xc
c000eb1b:	e8 18 f8 ff ff       	call   c000e338 <unlockScheduler()>
c000eb20:	83 ec 08             	sub    esp,0x8
c000eb23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eb28:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eb2b:	83 c0 0c             	add    eax,0xc
c000eb2e:	50                   	push   eax
c000eb2f:	68 5b 8f 03 c0       	push   0xc0038f5b
c000eb34:	e8 5b e3 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c000eb39:	83 c4 10             	add    esp,0x10
c000eb3c:	83 ec 0c             	sub    esp,0xc
c000eb3f:	6a 02                	push   0x2
c000eb41:	e8 ef fd ff ff       	call   c000e935 <blockTask(TaskState)>
c000eb46:	e8 eb f7 ff ff       	call   c000e336 <lockScheduler()>
c000eb4b:	e8 1a fb ff ff       	call   c000e66a <schedule()>
c000eb50:	e8 e3 f7 ff ff       	call   c000e338 <unlockScheduler()>
c000eb55:	83 c4 10             	add    esp,0x10
c000eb58:	eb e2                	jmp    c000eb3c <taskReturned+0x24>

c000eb5a <unblockTask(ThreadControlBlock*)>:
c000eb5a:	53                   	push   ebx
c000eb5b:	83 ec 08             	sub    esp,0x8
c000eb5e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eb62:	e8 cf f7 ff ff       	call   c000e336 <lockScheduler()>
c000eb67:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000eb6a:	85 c0                	test   eax,eax
c000eb6c:	74 5c                	je     c000ebca <unblockTask(ThreadControlBlock*)+0x70>
c000eb6e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000eb71:	48                   	dec    eax
c000eb72:	74 31                	je     c000eba5 <unblockTask(ThreadControlBlock*)+0x4b>
c000eb74:	83 ec 0c             	sub    esp,0xc
c000eb77:	68 10 bc 03 c0       	push   0xc003bc10
c000eb7c:	e8 9b 00 01 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000eb81:	83 c4 10             	add    esp,0x10
c000eb84:	85 c0                	test   eax,eax
c000eb86:	75 17                	jne    c000eb9f <unblockTask(ThreadControlBlock*)+0x45>
c000eb88:	eb 65                	jmp    c000ebef <unblockTask(ThreadControlBlock*)+0x95>
c000eb8a:	83 ec 08             	sub    esp,0x8
c000eb8d:	50                   	push   eax
c000eb8e:	68 10 bc 03 c0       	push   0xc003bc10
c000eb93:	e8 8c 00 01 00       	call   c001ec24 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c000eb98:	83 c4 10             	add    esp,0x10
c000eb9b:	85 c0                	test   eax,eax
c000eb9d:	74 50                	je     c000ebef <unblockTask(ThreadControlBlock*)+0x95>
c000eb9f:	39 c3                	cmp    ebx,eax
c000eba1:	75 e7                	jne    c000eb8a <unblockTask(ThreadControlBlock*)+0x30>
c000eba3:	eb 1c                	jmp    c000ebc1 <unblockTask(ThreadControlBlock*)+0x67>
c000eba5:	83 ec 0c             	sub    esp,0xc
c000eba8:	68 50 91 03 c0       	push   0xc0039150
c000ebad:	e8 e2 e2 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c000ebb2:	c7 04 24 dc 90 03 c0 	mov    DWORD PTR [esp],0xc00390dc
c000ebb9:	e8 d6 e2 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c000ebbe:	83 c4 10             	add    esp,0x10
c000ebc1:	83 c4 08             	add    esp,0x8
c000ebc4:	5b                   	pop    ebx
c000ebc5:	e9 6e f7 ff ff       	jmp    c000e338 <unlockScheduler()>
c000ebca:	83 ec 0c             	sub    esp,0xc
c000ebcd:	68 94 90 03 c0       	push   0xc0039094
c000ebd2:	e8 bd e2 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c000ebd7:	c7 04 24 dc 90 03 c0 	mov    DWORD PTR [esp],0xc00390dc
c000ebde:	e8 b1 e2 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c000ebe3:	83 c4 10             	add    esp,0x10
c000ebe6:	83 c4 08             	add    esp,0x8
c000ebe9:	5b                   	pop    ebx
c000ebea:	e9 49 f7 ff ff       	jmp    c000e338 <unlockScheduler()>
c000ebef:	83 ec 08             	sub    esp,0x8
c000ebf2:	53                   	push   ebx
c000ebf3:	68 10 bc 03 c0       	push   0xc003bc10
c000ebf8:	e8 81 fe 00 00       	call   c001ea7e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000ebfd:	83 c4 10             	add    esp,0x10
c000ec00:	83 c4 08             	add    esp,0x8
c000ec03:	5b                   	pop    ebx
c000ec04:	e9 2f f7 ff ff       	jmp    c000e338 <unlockScheduler()>

c000ec09 <cleanupTerminatedTask(ThreadControlBlock*)>:
c000ec09:	55                   	push   ebp
c000ec0a:	57                   	push   edi
c000ec0b:	56                   	push   esi
c000ec0c:	53                   	push   ebx
c000ec0d:	83 ec 1c             	sub    esp,0x1c
c000ec10:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ec14:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ec17:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c000ec1d:	85 c9                	test   ecx,ecx
c000ec1f:	7e 20                	jle    c000ec41 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c000ec21:	31 f6                	xor    esi,esi
c000ec23:	83 ec 0c             	sub    esp,0xc
c000ec26:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c000ec2d:	46                   	inc    esi
c000ec2e:	e8 6c e8 ff ff       	call   c000d49f <free>
c000ec33:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ec36:	83 c4 10             	add    esp,0x10
c000ec39:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c000ec3f:	7f e2                	jg     c000ec23 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c000ec41:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000ec4b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000ec50:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c000ec53:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c000ec56:	d3 c0                	rol    eax,cl
c000ec58:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c000ec5f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000ec62:	89 f7                	mov    edi,esi
c000ec64:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c000ec6c:	0f 85 4f 01 00 00    	jne    c000edc1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c000ec72:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000ec78:	85 c0                	test   eax,eax
c000ec7a:	0f 84 aa 00 00 00    	je     c000ed2a <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c000ec80:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c000ec83:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ec87:	31 c9                	xor    ecx,ecx
c000ec89:	eb 10                	jmp    c000ec9b <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c000ec8b:	41                   	inc    ecx
c000ec8c:	83 f9 10             	cmp    ecx,0x10
c000ec8f:	0f 84 95 00 00 00    	je     c000ed2a <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c000ec95:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000ec9b:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c000eca2:	d3 fa                	sar    edx,cl
c000eca4:	83 e2 01             	and    edx,0x1
c000eca7:	74 e2                	je     c000ec8b <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000eca9:	8d 14 09             	lea    edx,[ecx+ecx*1]
c000ecac:	01 ca                	add    edx,ecx
c000ecae:	89 d5                	mov    ebp,edx
c000ecb0:	c1 e5 05             	shl    ebp,0x5
c000ecb3:	01 ea                	add    edx,ebp
c000ecb5:	01 d0                	add    eax,edx
c000ecb7:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c000ecbd:	83 fd 07             	cmp    ebp,0x7
c000ecc0:	75 c9                	jne    c000ec8b <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ecc2:	05 40 02 00 00       	add    eax,0x240
c000ecc7:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c000ecca:	83 fd ff             	cmp    ebp,0xffffffff
c000eccd:	0f 8c 01 01 00 00    	jl     c000edd4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cb>
c000ecd3:	0f 84 b2 01 00 00    	je     c000ee8b <cleanupTerminatedTask(ThreadControlBlock*)+0x282>
c000ecd9:	85 ed                	test   ebp,ebp
c000ecdb:	0f 84 99 01 00 00    	je     c000ee7a <cleanupTerminatedTask(ThreadControlBlock*)+0x271>
c000ece1:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c000ece3:	75 a6                	jne    c000ec8b <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ece5:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000eceb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ecef:	01 d0                	add    eax,edx
c000ecf1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ecf5:	83 ec 0c             	sub    esp,0xc
c000ecf8:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c000ecfe:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ed01:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000ed07:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c000ed0e:	50                   	push   eax
c000ed0f:	e8 46 fe ff ff       	call   c000eb5a <unblockTask(ThreadControlBlock*)>
c000ed14:	83 c4 10             	add    esp,0x10
c000ed17:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000ed1a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ed1e:	89 f7                	mov    edi,esi
c000ed20:	41                   	inc    ecx
c000ed21:	83 f9 10             	cmp    ecx,0x10
c000ed24:	0f 85 6b ff ff ff    	jne    c000ec95 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c000ed2a:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c000ed30:	85 c0                	test   eax,eax
c000ed32:	74 5d                	je     c000ed91 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c000ed34:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c000ed3a:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c000ed40:	74 4f                	je     c000ed91 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c000ed42:	83 ec 0c             	sub    esp,0xc
c000ed45:	68 10 bc 03 c0       	push   0xc003bc10
c000ed4a:	e8 cd fe 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ed4f:	c7 04 24 10 bc 03 c0 	mov    DWORD PTR [esp],0xc003bc10
c000ed56:	89 c7                	mov    edi,eax
c000ed58:	e8 f5 fd 00 00       	call   c001eb52 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000ed5d:	83 c4 10             	add    esp,0x10
c000ed60:	84 c0                	test   al,al
c000ed62:	0f 84 dd 00 00 00    	je     c000ee45 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c000ed68:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ed6b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000ed71:	85 d2                	test   edx,edx
c000ed73:	74 0f                	je     c000ed84 <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c000ed75:	83 ec 0c             	sub    esp,0xc
c000ed78:	8b 02                	mov    eax,DWORD PTR [edx]
c000ed7a:	52                   	push   edx
c000ed7b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ed7e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ed81:	83 c4 10             	add    esp,0x10
c000ed84:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c000ed8e:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ed91:	8b b7 32 05 00 00    	mov    esi,DWORD PTR [edi+0x532]
c000ed97:	85 f6                	test   esi,esi
c000ed99:	74 16                	je     c000edb1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c000ed9b:	83 ec 0c             	sub    esp,0xc
c000ed9e:	56                   	push   esi
c000ed9f:	e8 da 29 00 00       	call   c001177e <VAS::~VAS()>
c000eda4:	58                   	pop    eax
c000eda5:	5a                   	pop    edx
c000eda6:	6a 10                	push   0x10
c000eda8:	56                   	push   esi
c000eda9:	e8 a5 36 00 00       	call   c0012453 <operator delete(void*, unsigned long)>
c000edae:	83 c4 10             	add    esp,0x10
c000edb1:	83 ec 0c             	sub    esp,0xc
c000edb4:	68 77 8f 03 c0       	push   0xc0038f77
c000edb9:	e8 d6 e0 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c000edbe:	83 c4 10             	add    esp,0x10
c000edc1:	83 ec 08             	sub    esp,0x8
c000edc4:	6a 63                	push   0x63
c000edc6:	53                   	push   ebx
c000edc7:	e8 87 36 00 00       	call   c0012453 <operator delete(void*, unsigned long)>
c000edcc:	83 c4 2c             	add    esp,0x2c
c000edcf:	5b                   	pop    ebx
c000edd0:	5e                   	pop    esi
c000edd1:	5f                   	pop    edi
c000edd2:	5d                   	pop    ebp
c000edd3:	c3                   	ret    
c000edd4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000edd8:	83 ec 0c             	sub    esp,0xc
c000eddb:	68 94 91 03 c0       	push   0xc0039194
c000ede0:	e8 cd e1 ff ff       	call   c000cfb2 <panic(char const*)>
c000ede5:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000ede8:	83 c4 10             	add    esp,0x10
c000edeb:	89 f7                	mov    edi,esi
c000eded:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edf1:	e9 95 fe ff ff       	jmp    c000ec8b <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000edf6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000edfc:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c000ee02:	75 1c                	jne    c000ee20 <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000ee04:	83 ec 0c             	sub    esp,0xc
c000ee07:	68 fc 91 03 c0       	push   0xc00391fc
c000ee0c:	e8 83 e0 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c000ee11:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000ee18:	e8 18 fb ff ff       	call   c000e935 <blockTask(TaskState)>
c000ee1d:	83 c4 10             	add    esp,0x10
c000ee20:	83 ec 08             	sub    esp,0x8
c000ee23:	56                   	push   esi
c000ee24:	68 10 bc 03 c0       	push   0xc003bc10
c000ee29:	e8 50 fc 00 00       	call   c001ea7e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000ee2e:	c7 04 24 10 bc 03 c0 	mov    DWORD PTR [esp],0xc003bc10
c000ee35:	e8 e2 fd 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ee3a:	83 c4 10             	add    esp,0x10
c000ee3d:	39 f8                	cmp    eax,edi
c000ee3f:	0f 84 23 ff ff ff    	je     c000ed68 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c000ee45:	83 ec 0c             	sub    esp,0xc
c000ee48:	68 10 bc 03 c0       	push   0xc003bc10
c000ee4d:	e8 ca fd 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ee52:	c7 04 24 10 bc 03 c0 	mov    DWORD PTR [esp],0xc003bc10
c000ee59:	89 c6                	mov    esi,eax
c000ee5b:	e8 0e fd 00 00       	call   c001eb6e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000ee60:	83 c4 10             	add    esp,0x10
c000ee63:	39 f3                	cmp    ebx,esi
c000ee65:	74 b9                	je     c000ee20 <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000ee67:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c000ee6a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ee6d:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c000ee73:	75 ab                	jne    c000ee20 <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000ee75:	e9 7c ff ff ff       	jmp    c000edf6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ed>
c000ee7a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ee7e:	83 ec 0c             	sub    esp,0xc
c000ee81:	68 c8 91 03 c0       	push   0xc00391c8
c000ee86:	e9 55 ff ff ff       	jmp    c000ede0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d7>
c000ee8b:	8b 36                	mov    esi,DWORD PTR [esi]
c000ee8d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ee91:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c000ee94:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ee97:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c000ee9d:	01 d7                	add    edi,edx
c000ee9f:	89 f8                	mov    eax,edi
c000eea1:	e9 4b fe ff ff       	jmp    c000ecf1 <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c000eea6 <cleanerTaskFunction(void*)>:
c000eea6:	53                   	push   ebx
c000eea7:	83 ec 08             	sub    esp,0x8
c000eeaa:	e8 89 f4 ff ff       	call   c000e338 <unlockScheduler()>
c000eeaf:	e8 82 f4 ff ff       	call   c000e336 <lockScheduler()>
c000eeb4:	80 3d d4 bb 03 c0 00 	cmp    BYTE PTR ds:0xc003bbd4,0x0
c000eebb:	75 72                	jne    c000ef2f <cleanerTaskFunction(void*)+0x89>
c000eebd:	83 ec 0c             	sub    esp,0xc
c000eec0:	6a 02                	push   0x2
c000eec2:	e8 2c fa ff ff       	call   c000e8f3 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c000eec7:	83 c4 10             	add    esp,0x10
c000eeca:	c6 05 d4 bb 03 c0 00 	mov    BYTE PTR ds:0xc003bbd4,0x0
c000eed1:	e8 87 f4 ff ff       	call   c000e35d <lockStuff()>
c000eed6:	e8 5b f4 ff ff       	call   c000e336 <lockScheduler()>
c000eedb:	83 ec 0c             	sub    esp,0xc
c000eede:	68 f8 bb 03 c0       	push   0xc003bbf8
c000eee3:	e8 6a fc 00 00       	call   c001eb52 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000eee8:	83 c4 10             	add    esp,0x10
c000eeeb:	84 c0                	test   al,al
c000eeed:	75 28                	jne    c000ef17 <cleanerTaskFunction(void*)+0x71>
c000eeef:	83 ec 0c             	sub    esp,0xc
c000eef2:	68 f8 bb 03 c0       	push   0xc003bbf8
c000eef7:	e8 20 fd 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000eefc:	c7 04 24 f8 bb 03 c0 	mov    DWORD PTR [esp],0xc003bbf8
c000ef03:	89 c3                	mov    ebx,eax
c000ef05:	e8 64 fc 00 00       	call   c001eb6e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000ef0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef0d:	e8 f7 fc ff ff       	call   c000ec09 <cleanupTerminatedTask(ThreadControlBlock*)>
c000ef12:	83 c4 10             	add    esp,0x10
c000ef15:	eb c4                	jmp    c000eedb <cleanerTaskFunction(void*)+0x35>
c000ef17:	e8 1c f4 ff ff       	call   c000e338 <unlockScheduler()>
c000ef1c:	e8 ce f7 ff ff       	call   c000e6ef <unlockStuff()>
c000ef21:	e8 10 f4 ff ff       	call   c000e336 <lockScheduler()>
c000ef26:	80 3d d4 bb 03 c0 00 	cmp    BYTE PTR ds:0xc003bbd4,0x0
c000ef2d:	74 8e                	je     c000eebd <cleanerTaskFunction(void*)+0x17>
c000ef2f:	e8 04 f4 ff ff       	call   c000e338 <unlockScheduler()>
c000ef34:	eb 94                	jmp    c000eeca <cleanerTaskFunction(void*)+0x24>

c000ef36 <terminateTask(int)>:
c000ef36:	83 ec 0c             	sub    esp,0xc
c000ef39:	e8 1f f4 ff ff       	call   c000e35d <lockStuff()>
c000ef3e:	e8 f3 f3 ff ff       	call   c000e336 <lockScheduler()>
c000ef43:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ef47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef4c:	83 ec 08             	sub    esp,0x8
c000ef4f:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c000ef52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef57:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000ef5a:	50                   	push   eax
c000ef5b:	68 f8 bb 03 c0       	push   0xc003bbf8
c000ef60:	e8 19 fb 00 00       	call   c001ea7e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000ef65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef6a:	83 c4 10             	add    esp,0x10
c000ef6d:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c000ef74:	a1 d0 bb 03 c0       	mov    eax,ds:0xc003bbd0
c000ef79:	85 c0                	test   eax,eax
c000ef7b:	74 2e                	je     c000efab <terminateTask(int)+0x75>
c000ef7d:	83 ec 0c             	sub    esp,0xc
c000ef80:	c6 05 d4 bb 03 c0 01 	mov    BYTE PTR ds:0xc003bbd4,0x1
c000ef87:	50                   	push   eax
c000ef88:	e8 cd fb ff ff       	call   c000eb5a <unblockTask(ThreadControlBlock*)>
c000ef8d:	83 c4 10             	add    esp,0x10
c000ef90:	e8 a3 f3 ff ff       	call   c000e338 <unlockScheduler()>
c000ef95:	e8 55 f7 ff ff       	call   c000e6ef <unlockStuff()>
c000ef9a:	e8 97 f3 ff ff       	call   c000e336 <lockScheduler()>
c000ef9f:	e8 c6 f6 ff ff       	call   c000e66a <schedule()>
c000efa4:	e8 8f f3 ff ff       	call   c000e338 <unlockScheduler()>
c000efa9:	eb ef                	jmp    c000ef9a <terminateTask(int)+0x64>
c000efab:	83 ec 0c             	sub    esp,0xc
c000efae:	68 85 8f 03 c0       	push   0xc0038f85
c000efb3:	e8 dc de ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c000efb8:	83 c4 10             	add    esp,0x10
c000efbb:	eb d3                	jmp    c000ef90 <terminateTask(int)+0x5a>
c000efbd:	90                   	nop

c000efbe <Semaphore::release()>:
c000efbe:	83 ec 0c             	sub    esp,0xc
c000efc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efc5:	e8 93 f3 ff ff       	call   c000e35d <lockStuff()>
c000efca:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000efcd:	85 d2                	test   edx,edx
c000efcf:	74 1a                	je     c000efeb <Semaphore::release()+0x2d>
c000efd1:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c000efd4:	83 ec 0c             	sub    esp,0xc
c000efd7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000efda:	52                   	push   edx
c000efdb:	e8 7a fb ff ff       	call   c000eb5a <unblockTask(ThreadControlBlock*)>
c000efe0:	83 c4 10             	add    esp,0x10
c000efe3:	83 c4 0c             	add    esp,0xc
c000efe6:	e9 04 f7 ff ff       	jmp    c000e6ef <unlockStuff()>
c000efeb:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c000efee:	83 c4 0c             	add    esp,0xc
c000eff1:	e9 f9 f6 ff ff       	jmp    c000e6ef <unlockStuff()>

c000eff6 <__static_initialization_and_destruction_0(int, int)>:
c000eff6:	83 ec 0c             	sub    esp,0xc
c000eff9:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effe:	0f 85 88 00 00 00    	jne    c000f08c <__static_initialization_and_destruction_0(int, int)+0x96>
c000f004:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000f00c:	75 7e                	jne    c000f08c <__static_initialization_and_destruction_0(int, int)+0x96>
c000f00e:	83 ec 0c             	sub    esp,0xc
c000f011:	68 10 bc 03 c0       	push   0xc003bc10
c000f016:	e8 0b fa 00 00       	call   c001ea26 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000f01b:	83 c4 10             	add    esp,0x10
c000f01e:	83 ec 04             	sub    esp,0x4
c000f021:	68 e8 ad 03 c0       	push   0xc003ade8
c000f026:	68 10 bc 03 c0       	push   0xc003bc10
c000f02b:	68 e6 e9 01 c0       	push   0xc001e9e6
c000f030:	e8 9a 33 00 00       	call   c00123cf <__cxa_atexit>
c000f035:	83 c4 10             	add    esp,0x10
c000f038:	83 ec 0c             	sub    esp,0xc
c000f03b:	68 04 bc 03 c0       	push   0xc003bc04
c000f040:	e8 e1 f9 00 00       	call   c001ea26 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000f045:	83 c4 10             	add    esp,0x10
c000f048:	83 ec 04             	sub    esp,0x4
c000f04b:	68 e8 ad 03 c0       	push   0xc003ade8
c000f050:	68 04 bc 03 c0       	push   0xc003bc04
c000f055:	68 e6 e9 01 c0       	push   0xc001e9e6
c000f05a:	e8 70 33 00 00       	call   c00123cf <__cxa_atexit>
c000f05f:	83 c4 10             	add    esp,0x10
c000f062:	83 ec 0c             	sub    esp,0xc
c000f065:	68 f8 bb 03 c0       	push   0xc003bbf8
c000f06a:	e8 b7 f9 00 00       	call   c001ea26 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000f06f:	83 c4 10             	add    esp,0x10
c000f072:	83 ec 04             	sub    esp,0x4
c000f075:	68 e8 ad 03 c0       	push   0xc003ade8
c000f07a:	68 f8 bb 03 c0       	push   0xc003bbf8
c000f07f:	68 e6 e9 01 c0       	push   0xc001e9e6
c000f084:	e8 46 33 00 00       	call   c00123cf <__cxa_atexit>
c000f089:	83 c4 10             	add    esp,0x10
c000f08c:	90                   	nop
c000f08d:	83 c4 0c             	add    esp,0xc
c000f090:	c3                   	ret    

c000f091 <_GLOBAL__sub_I_kernelProcess>:
c000f091:	83 ec 0c             	sub    esp,0xc
c000f094:	83 ec 08             	sub    esp,0x8
c000f097:	68 ff ff 00 00       	push   0xffff
c000f09c:	6a 01                	push   0x1
c000f09e:	e8 53 ff ff ff       	call   c000eff6 <__static_initialization_and_destruction_0(int, int)>
c000f0a3:	83 c4 10             	add    esp,0x10
c000f0a6:	83 c4 0c             	add    esp,0xc
c000f0a9:	c3                   	ret    

c000f0aa <sysCallGetPID(regs*)>:
c000f0aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f0af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f0b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b4:	99                   	cdq    
c000f0b5:	c3                   	ret    

c000f0b6 <sysCallSeekDir(regs*)>:
c000f0b6:	31 c0                	xor    eax,eax
c000f0b8:	31 d2                	xor    edx,edx
c000f0ba:	c3                   	ret    

c000f0bb <sysCallTellDir(regs*)>:
c000f0bb:	31 c0                	xor    eax,eax
c000f0bd:	31 d2                	xor    edx,edx
c000f0bf:	c3                   	ret    

c000f0c0 <sysCallVerify(regs*)>:
c000f0c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0c4:	31 d2                	xor    edx,edx
c000f0c6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f0c9:	c3                   	ret    

c000f0ca <sysCallGetArgc(regs*)>:
c000f0ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f0cf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f0d2:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c000f0d8:	99                   	cdq    
c000f0d9:	c3                   	ret    

c000f0da <sysFormatDisk(regs*)>:
c000f0da:	56                   	push   esi
c000f0db:	53                   	push   ebx
c000f0dc:	53                   	push   ebx
c000f0dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f0e1:	8b 1d 80 be 03 c0    	mov    ebx,DWORD PTR ds:0xc003be80
c000f0e7:	eb 25                	jmp    c000f10e <sysFormatDisk(regs*)+0x34>
c000f0e9:	83 ec 0c             	sub    esp,0xc
c000f0ec:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000f0ef:	8b 13                	mov    edx,DWORD PTR [ebx]
c000f0f1:	ff 76 28             	push   DWORD PTR [esi+0x28]
c000f0f4:	ff 76 24             	push   DWORD PTR [esi+0x24]
c000f0f7:	50                   	push   eax
c000f0f8:	ff 34 85 20 c3 03 c0 	push   DWORD PTR [eax*4-0x3ffc3ce0]
c000f0ff:	53                   	push   ebx
c000f100:	ff 52 48             	call   DWORD PTR [edx+0x48]
c000f103:	83 c4 20             	add    esp,0x20
c000f106:	83 f8 08             	cmp    eax,0x8
c000f109:	75 12                	jne    c000f11d <sysFormatDisk(regs*)+0x43>
c000f10b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000f10e:	85 db                	test   ebx,ebx
c000f110:	75 d7                	jne    c000f0e9 <sysFormatDisk(regs*)+0xf>
c000f112:	59                   	pop    ecx
c000f113:	b8 03 00 00 00       	mov    eax,0x3
c000f118:	31 d2                	xor    edx,edx
c000f11a:	5b                   	pop    ebx
c000f11b:	5e                   	pop    esi
c000f11c:	c3                   	ret    
c000f11d:	85 c0                	test   eax,eax
c000f11f:	74 1b                	je     c000f13c <sysFormatDisk(regs*)+0x62>
c000f121:	83 f8 09             	cmp    eax,0x9
c000f124:	74 0b                	je     c000f131 <sysFormatDisk(regs*)+0x57>
c000f126:	59                   	pop    ecx
c000f127:	b8 02 00 00 00       	mov    eax,0x2
c000f12c:	31 d2                	xor    edx,edx
c000f12e:	5b                   	pop    ebx
c000f12f:	5e                   	pop    esi
c000f130:	c3                   	ret    
c000f131:	59                   	pop    ecx
c000f132:	b8 01 00 00 00       	mov    eax,0x1
c000f137:	31 d2                	xor    edx,edx
c000f139:	5b                   	pop    ebx
c000f13a:	5e                   	pop    esi
c000f13b:	c3                   	ret    
c000f13c:	59                   	pop    ecx
c000f13d:	31 c0                	xor    eax,eax
c000f13f:	31 d2                	xor    edx,edx
c000f141:	5b                   	pop    ebx
c000f142:	5e                   	pop    esi
c000f143:	c3                   	ret    

c000f144 <sysSetDiskVolumeLabel(regs*)>:
c000f144:	56                   	push   esi
c000f145:	53                   	push   ebx
c000f146:	53                   	push   ebx
c000f147:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f14b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000f14e:	83 f8 19             	cmp    eax,0x19
c000f151:	77 29                	ja     c000f17c <sysSetDiskVolumeLabel(regs*)+0x38>
c000f153:	8b 0c 85 20 c3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc3ce0]
c000f15a:	85 c9                	test   ecx,ecx
c000f15c:	74 1e                	je     c000f17c <sysSetDiskVolumeLabel(regs*)+0x38>
c000f15e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000f161:	85 d2                	test   edx,edx
c000f163:	74 17                	je     c000f17c <sysSetDiskVolumeLabel(regs*)+0x38>
c000f165:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c000f16b:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f16d:	52                   	push   edx
c000f16e:	50                   	push   eax
c000f16f:	51                   	push   ecx
c000f170:	53                   	push   ebx
c000f171:	ff 56 58             	call   DWORD PTR [esi+0x58]
c000f174:	83 c4 10             	add    esp,0x10
c000f177:	99                   	cdq    
c000f178:	59                   	pop    ecx
c000f179:	5b                   	pop    ebx
c000f17a:	5e                   	pop    esi
c000f17b:	c3                   	ret    
c000f17c:	59                   	pop    ecx
c000f17d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000f182:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f187:	5b                   	pop    ebx
c000f188:	5e                   	pop    esi
c000f189:	c3                   	ret    

c000f18a <sysGetDiskVolumeLabel(regs*)>:
c000f18a:	57                   	push   edi
c000f18b:	56                   	push   esi
c000f18c:	53                   	push   ebx
c000f18d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f191:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000f194:	83 fa 19             	cmp    edx,0x19
c000f197:	77 34                	ja     c000f1cd <sysGetDiskVolumeLabel(regs*)+0x43>
c000f199:	8b 0c 95 20 c3 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffc3ce0]
c000f1a0:	85 c9                	test   ecx,ecx
c000f1a2:	74 29                	je     c000f1cd <sysGetDiskVolumeLabel(regs*)+0x43>
c000f1a4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c000f1a7:	85 db                	test   ebx,ebx
c000f1a9:	74 22                	je     c000f1cd <sysGetDiskVolumeLabel(regs*)+0x43>
c000f1ab:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f1ae:	85 c0                	test   eax,eax
c000f1b0:	74 1b                	je     c000f1cd <sysGetDiskVolumeLabel(regs*)+0x43>
c000f1b2:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c000f1b8:	83 ec 0c             	sub    esp,0xc
c000f1bb:	8b 3e                	mov    edi,DWORD PTR [esi]
c000f1bd:	50                   	push   eax
c000f1be:	53                   	push   ebx
c000f1bf:	52                   	push   edx
c000f1c0:	51                   	push   ecx
c000f1c1:	56                   	push   esi
c000f1c2:	ff 57 54             	call   DWORD PTR [edi+0x54]
c000f1c5:	83 c4 20             	add    esp,0x20
c000f1c8:	99                   	cdq    
c000f1c9:	5b                   	pop    ebx
c000f1ca:	5e                   	pop    esi
c000f1cb:	5f                   	pop    edi
c000f1cc:	c3                   	ret    
c000f1cd:	5b                   	pop    ebx
c000f1ce:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000f1d3:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f1d8:	5e                   	pop    esi
c000f1d9:	5f                   	pop    edi
c000f1da:	c3                   	ret    

c000f1db <sysShutdown(regs*)>:
c000f1db:	83 ec 0c             	sub    esp,0xc
c000f1de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1e2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f1e5:	85 c0                	test   eax,eax
c000f1e7:	74 24                	je     c000f20d <sysShutdown(regs*)+0x32>
c000f1e9:	48                   	dec    eax
c000f1ea:	74 0e                	je     c000f1fa <sysShutdown(regs*)+0x1f>
c000f1ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f1f1:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f1f6:	83 c4 0c             	add    esp,0xc
c000f1f9:	c3                   	ret    
c000f1fa:	a1 a0 c3 03 c0       	mov    eax,ds:0xc003c3a0
c000f1ff:	85 c0                	test   eax,eax
c000f201:	74 02                	je     c000f205 <sysShutdown(regs*)+0x2a>
c000f203:	ff d0                	call   eax
c000f205:	31 c0                	xor    eax,eax
c000f207:	31 d2                	xor    edx,edx
c000f209:	83 c4 0c             	add    esp,0xc
c000f20c:	c3                   	ret    
c000f20d:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c000f212:	8b 10                	mov    edx,DWORD PTR [eax]
c000f214:	6a 00                	push   0x0
c000f216:	6a 00                	push   0x0
c000f218:	6a 00                	push   0x0
c000f21a:	50                   	push   eax
c000f21b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000f21e:	83 c4 10             	add    esp,0x10
c000f221:	eb c9                	jmp    c000f1ec <sysShutdown(regs*)+0x11>

c000f223 <sysCallGetCwd(regs*)>:
c000f223:	83 ec 10             	sub    esp,0x10
c000f226:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f22a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000f22d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f230:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f235:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f238:	e8 a6 39 00 00       	call   c0012be3 <getcwd(Process*, char*, int)>
c000f23d:	83 c4 1c             	add    esp,0x1c
c000f240:	99                   	cdq    
c000f241:	c3                   	ret    

c000f242 <sysCallSetCwd(regs*)>:
c000f242:	83 ec 14             	sub    esp,0x14
c000f245:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f249:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f24c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f251:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f254:	e8 b4 39 00 00       	call   c0012c0d <setcwd(Process*, char*)>
c000f259:	83 c4 1c             	add    esp,0x1c
c000f25c:	99                   	cdq    
c000f25d:	c3                   	ret    

c000f25e <sysCallRealpath(regs*)>:
c000f25e:	83 ec 0c             	sub    esp,0xc
c000f261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f265:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000f268:	85 d2                	test   edx,edx
c000f26a:	74 07                	je     c000f273 <sysCallRealpath(regs*)+0x15>
c000f26c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f26f:	85 c0                	test   eax,eax
c000f271:	75 0b                	jne    c000f27e <sysCallRealpath(regs*)+0x20>
c000f273:	b8 01 00 00 00       	mov    eax,0x1
c000f278:	31 d2                	xor    edx,edx
c000f27a:	83 c4 0c             	add    esp,0xc
c000f27d:	c3                   	ret    
c000f27e:	51                   	push   ecx
c000f27f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000f285:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000f288:	81 c1 0c 01 00 00    	add    ecx,0x10c
c000f28e:	51                   	push   ecx
c000f28f:	52                   	push   edx
c000f290:	50                   	push   eax
c000f291:	e8 32 34 00 00       	call   c00126c8 <standardiseFiles(char*, char const*, char const*)>
c000f296:	83 c4 10             	add    esp,0x10
c000f299:	31 c0                	xor    eax,eax
c000f29b:	31 d2                	xor    edx,edx
c000f29d:	83 c4 0c             	add    esp,0xc
c000f2a0:	c3                   	ret    

c000f2a1 <sysCallOpen(regs*)>:
c000f2a1:	56                   	push   esi
c000f2a2:	53                   	push   ebx
c000f2a3:	81 ec 04 01 00 00    	sub    esp,0x104
c000f2a9:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c000f2b0:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f2b3:	85 d2                	test   edx,edx
c000f2b5:	0f 84 c3 00 00 00    	je     c000f37e <sysCallOpen(regs*)+0xdd>
c000f2bb:	50                   	push   eax
c000f2bc:	68 cb 92 03 c0       	push   0xc00392cb
c000f2c1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f2c4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f2c8:	56                   	push   esi
c000f2c9:	e8 fa 33 00 00       	call   c00126c8 <standardiseFiles(char*, char const*, char const*)>
c000f2ce:	89 34 24             	mov    DWORD PTR [esp],esi
c000f2d1:	e8 2b 14 ff ff       	call   c0000701 <strlen>
c000f2d6:	83 c4 10             	add    esp,0x10
c000f2d9:	48                   	dec    eax
c000f2da:	74 1d                	je     c000f2f9 <sysCallOpen(regs*)+0x58>
c000f2dc:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c000f2df:	eb 0f                	jmp    c000f2f0 <sysCallOpen(regs*)+0x4f>
c000f2e1:	80 fa 3a             	cmp    dl,0x3a
c000f2e4:	74 0f                	je     c000f2f5 <sysCallOpen(regs*)+0x54>
c000f2e6:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000f2ea:	48                   	dec    eax
c000f2eb:	74 0c                	je     c000f2f9 <sysCallOpen(regs*)+0x58>
c000f2ed:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c000f2f0:	80 fa 2e             	cmp    dl,0x2e
c000f2f3:	75 ec                	jne    c000f2e1 <sysCallOpen(regs*)+0x40>
c000f2f5:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c000f2f9:	83 ec 0c             	sub    esp,0xc
c000f2fc:	68 14 01 00 00       	push   0x114
c000f301:	e8 3e 31 00 00       	call   c0012444 <operator new(unsigned long)>
c000f306:	83 c4 0c             	add    esp,0xc
c000f309:	89 c6                	mov    esi,eax
c000f30b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f310:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f313:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f316:	56                   	push   esi
c000f317:	e8 56 35 00 00       	call   c0012872 <File::File(char const*, Process*)>
c000f31c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000f31f:	83 c4 10             	add    esp,0x10
c000f322:	0f b6 d0             	movzx  edx,al
c000f325:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c000f328:	89 c2                	mov    edx,eax
c000f32a:	83 e2 01             	and    edx,0x1
c000f32d:	a8 02                	test   al,0x2
c000f32f:	74 03                	je     c000f334 <sysCallOpen(regs*)+0x93>
c000f331:	83 ca 02             	or     edx,0x2
c000f334:	a8 04                	test   al,0x4
c000f336:	74 03                	je     c000f33b <sysCallOpen(regs*)+0x9a>
c000f338:	83 ca 04             	or     edx,0x4
c000f33b:	a8 08                	test   al,0x8
c000f33d:	74 03                	je     c000f342 <sysCallOpen(regs*)+0xa1>
c000f33f:	83 ca 0a             	or     edx,0xa
c000f342:	a8 10                	test   al,0x10
c000f344:	74 03                	je     c000f349 <sysCallOpen(regs*)+0xa8>
c000f346:	83 ca 12             	or     edx,0x12
c000f349:	83 ec 08             	sub    esp,0x8
c000f34c:	52                   	push   edx
c000f34d:	56                   	push   esi
c000f34e:	e8 83 35 00 00       	call   c00128d6 <File::open(FileOpenMode)>
c000f353:	83 c4 10             	add    esp,0x10
c000f356:	85 c0                	test   eax,eax
c000f358:	75 24                	jne    c000f37e <sysCallOpen(regs*)+0xdd>
c000f35a:	83 ec 0c             	sub    esp,0xc
c000f35d:	56                   	push   esi
c000f35e:	e8 05 1d 00 00       	call   c0011068 <UnixFile::getFileDescriptor()>
c000f363:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f366:	83 c4 10             	add    esp,0x10
c000f369:	89 02                	mov    DWORD PTR [edx],eax
c000f36b:	c1 f8 1f             	sar    eax,0x1f
c000f36e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000f371:	81 c4 04 01 00 00    	add    esp,0x104
c000f377:	31 c0                	xor    eax,eax
c000f379:	31 d2                	xor    edx,edx
c000f37b:	5b                   	pop    ebx
c000f37c:	5e                   	pop    esi
c000f37d:	c3                   	ret    
c000f37e:	81 c4 04 01 00 00    	add    esp,0x104
c000f384:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f389:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f38e:	5b                   	pop    ebx
c000f38f:	5e                   	pop    esi
c000f390:	c3                   	ret    

c000f391 <sysCallReadDir(regs*)>:
c000f391:	53                   	push   ebx
c000f392:	83 ec 18             	sub    esp,0x18
c000f395:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f399:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000f39c:	83 f8 02             	cmp    eax,0x2
c000f39f:	77 0c                	ja     c000f3ad <sysCallReadDir(regs*)+0x1c>
c000f3a1:	b8 01 00 00 00       	mov    eax,0x1
c000f3a6:	31 d2                	xor    edx,edx
c000f3a8:	83 c4 18             	add    esp,0x18
c000f3ab:	5b                   	pop    ebx
c000f3ac:	c3                   	ret    
c000f3ad:	83 ec 0c             	sub    esp,0xc
c000f3b0:	50                   	push   eax
c000f3b1:	e8 17 1e 00 00       	call   c00111cd <getFromFileDescriptor(int)>
c000f3b6:	83 c4 10             	add    esp,0x10
c000f3b9:	85 c0                	test   eax,eax
c000f3bb:	74 37                	je     c000f3f4 <sysCallReadDir(regs*)+0x63>
c000f3bd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f3c5:	83 ec 0c             	sub    esp,0xc
c000f3c8:	8b 10                	mov    edx,DWORD PTR [eax]
c000f3ca:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000f3ce:	51                   	push   ecx
c000f3cf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f3d2:	6a 00                	push   0x0
c000f3d4:	68 10 01 00 00       	push   0x110
c000f3d9:	50                   	push   eax
c000f3da:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000f3dd:	83 c4 20             	add    esp,0x20
c000f3e0:	85 c0                	test   eax,eax
c000f3e2:	74 0c                	je     c000f3f0 <sysCallReadDir(regs*)+0x5f>
c000f3e4:	83 f8 07             	cmp    eax,0x7
c000f3e7:	74 b8                	je     c000f3a1 <sysCallReadDir(regs*)+0x10>
c000f3e9:	b8 02 00 00 00       	mov    eax,0x2
c000f3ee:	eb b6                	jmp    c000f3a6 <sysCallReadDir(regs*)+0x15>
c000f3f0:	31 c0                	xor    eax,eax
c000f3f2:	eb b2                	jmp    c000f3a6 <sysCallReadDir(regs*)+0x15>
c000f3f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f3f9:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f3fe:	eb a8                	jmp    c000f3a8 <sysCallReadDir(regs*)+0x17>

c000f400 <sysCallIsATTY(regs*)>:
c000f400:	83 ec 0c             	sub    esp,0xc
c000f403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f407:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f40a:	83 f8 02             	cmp    eax,0x2
c000f40d:	77 26                	ja     c000f435 <sysCallIsATTY(regs*)+0x35>
c000f40f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f414:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f417:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000f41d:	85 c0                	test   eax,eax
c000f41f:	74 24                	je     c000f445 <sysCallIsATTY(regs*)+0x45>
c000f421:	83 ec 0c             	sub    esp,0xc
c000f424:	8b 10                	mov    edx,DWORD PTR [eax]
c000f426:	50                   	push   eax
c000f427:	ff 12                	call   DWORD PTR [edx]
c000f429:	31 d2                	xor    edx,edx
c000f42b:	0f b6 c0             	movzx  eax,al
c000f42e:	83 c4 10             	add    esp,0x10
c000f431:	83 c4 0c             	add    esp,0xc
c000f434:	c3                   	ret    
c000f435:	83 ec 0c             	sub    esp,0xc
c000f438:	50                   	push   eax
c000f439:	e8 8f 1d 00 00       	call   c00111cd <getFromFileDescriptor(int)>
c000f43e:	83 c4 10             	add    esp,0x10
c000f441:	85 c0                	test   eax,eax
c000f443:	75 dc                	jne    c000f421 <sysCallIsATTY(regs*)+0x21>
c000f445:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f44a:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f44f:	83 c4 0c             	add    esp,0xc
c000f452:	c3                   	ret    

c000f453 <sysCallSeek(regs*)>:
c000f453:	53                   	push   ebx
c000f454:	83 ec 08             	sub    esp,0x8
c000f457:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f45b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f45e:	83 f8 02             	cmp    eax,0x2
c000f461:	76 32                	jbe    c000f495 <sysCallSeek(regs*)+0x42>
c000f463:	83 ec 0c             	sub    esp,0xc
c000f466:	50                   	push   eax
c000f467:	e8 61 1d 00 00       	call   c00111cd <getFromFileDescriptor(int)>
c000f46c:	83 c4 0c             	add    esp,0xc
c000f46f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c000f472:	31 db                	xor    ebx,ebx
c000f474:	53                   	push   ebx
c000f475:	51                   	push   ecx
c000f476:	50                   	push   eax
c000f477:	e8 18 35 00 00       	call   c0012994 <File::seek(unsigned long long)>
c000f47c:	83 c4 10             	add    esp,0x10
c000f47f:	85 c0                	test   eax,eax
c000f481:	0f 95 c0             	setne  al
c000f484:	31 d2                	xor    edx,edx
c000f486:	0f b6 c0             	movzx  eax,al
c000f489:	f7 d8                	neg    eax
c000f48b:	83 d2 00             	adc    edx,0x0
c000f48e:	83 c4 08             	add    esp,0x8
c000f491:	f7 da                	neg    edx
c000f493:	5b                   	pop    ebx
c000f494:	c3                   	ret    
c000f495:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f49a:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f49f:	83 c4 08             	add    esp,0x8
c000f4a2:	5b                   	pop    ebx
c000f4a3:	c3                   	ret    

c000f4a4 <sysCallTell(regs*)>:
c000f4a4:	53                   	push   ebx
c000f4a5:	83 ec 08             	sub    esp,0x8
c000f4a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f4ac:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f4af:	83 f8 02             	cmp    eax,0x2
c000f4b2:	76 2d                	jbe    c000f4e1 <sysCallTell(regs*)+0x3d>
c000f4b4:	83 ec 0c             	sub    esp,0xc
c000f4b7:	50                   	push   eax
c000f4b8:	e8 10 1d 00 00       	call   c00111cd <getFromFileDescriptor(int)>
c000f4bd:	5a                   	pop    edx
c000f4be:	59                   	pop    ecx
c000f4bf:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f4c2:	50                   	push   eax
c000f4c3:	e8 22 35 00 00       	call   c00129ea <File::tell(unsigned long long*)>
c000f4c8:	83 c4 10             	add    esp,0x10
c000f4cb:	85 c0                	test   eax,eax
c000f4cd:	0f 95 c0             	setne  al
c000f4d0:	31 d2                	xor    edx,edx
c000f4d2:	0f b6 c0             	movzx  eax,al
c000f4d5:	f7 d8                	neg    eax
c000f4d7:	83 d2 00             	adc    edx,0x0
c000f4da:	83 c4 08             	add    esp,0x8
c000f4dd:	f7 da                	neg    edx
c000f4df:	5b                   	pop    ebx
c000f4e0:	c3                   	ret    
c000f4e1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f4e6:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f4eb:	83 c4 08             	add    esp,0x8
c000f4ee:	5b                   	pop    ebx
c000f4ef:	c3                   	ret    

c000f4f0 <sysCallSizeFromFilename(regs*)>:
c000f4f0:	57                   	push   edi
c000f4f1:	56                   	push   esi
c000f4f2:	53                   	push   ebx
c000f4f3:	83 ec 10             	sub    esp,0x10
c000f4f6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000f4fa:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c000f4fd:	83 ff 02             	cmp    edi,0x2
c000f500:	76 56                	jbe    c000f558 <sysCallSizeFromFilename(regs*)+0x68>
c000f502:	83 ec 0c             	sub    esp,0xc
c000f505:	68 14 01 00 00       	push   0x114
c000f50a:	e8 35 2f 00 00       	call   c0012444 <operator new(unsigned long)>
c000f50f:	83 c4 0c             	add    esp,0xc
c000f512:	89 c3                	mov    ebx,eax
c000f514:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f519:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f51c:	57                   	push   edi
c000f51d:	53                   	push   ebx
c000f51e:	e8 4f 33 00 00       	call   c0012872 <File::File(char const*, Process*)>
c000f523:	83 c4 0c             	add    esp,0xc
c000f526:	8d 44 24 13          	lea    eax,[esp+0x13]
c000f52a:	50                   	push   eax
c000f52b:	ff 76 28             	push   DWORD PTR [esi+0x28]
c000f52e:	53                   	push   ebx
c000f52f:	e8 4e 36 00 00       	call   c0012b82 <File::stat(unsigned long long*, bool*)>
c000f534:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f537:	89 c6                	mov    esi,eax
c000f539:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f53b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f53e:	83 c4 10             	add    esp,0x10
c000f541:	31 c0                	xor    eax,eax
c000f543:	85 f6                	test   esi,esi
c000f545:	0f 95 c0             	setne  al
c000f548:	31 d2                	xor    edx,edx
c000f54a:	f7 d8                	neg    eax
c000f54c:	83 d2 00             	adc    edx,0x0
c000f54f:	83 c4 10             	add    esp,0x10
c000f552:	f7 da                	neg    edx
c000f554:	5b                   	pop    ebx
c000f555:	5e                   	pop    esi
c000f556:	5f                   	pop    edi
c000f557:	c3                   	ret    
c000f558:	83 c4 10             	add    esp,0x10
c000f55b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f560:	5b                   	pop    ebx
c000f561:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f566:	5e                   	pop    esi
c000f567:	5f                   	pop    edi
c000f568:	c3                   	ret    

c000f569 <sysCallSize(regs*)>:
c000f569:	53                   	push   ebx
c000f56a:	83 ec 18             	sub    esp,0x18
c000f56d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f571:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f574:	83 f8 02             	cmp    eax,0x2
c000f577:	76 33                	jbe    c000f5ac <sysCallSize(regs*)+0x43>
c000f579:	83 ec 0c             	sub    esp,0xc
c000f57c:	50                   	push   eax
c000f57d:	e8 4b 1c 00 00       	call   c00111cd <getFromFileDescriptor(int)>
c000f582:	83 c4 0c             	add    esp,0xc
c000f585:	8d 54 24 13          	lea    edx,[esp+0x13]
c000f589:	52                   	push   edx
c000f58a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f58d:	50                   	push   eax
c000f58e:	e8 ef 35 00 00       	call   c0012b82 <File::stat(unsigned long long*, bool*)>
c000f593:	83 c4 10             	add    esp,0x10
c000f596:	85 c0                	test   eax,eax
c000f598:	0f 95 c0             	setne  al
c000f59b:	31 d2                	xor    edx,edx
c000f59d:	0f b6 c0             	movzx  eax,al
c000f5a0:	f7 d8                	neg    eax
c000f5a2:	83 d2 00             	adc    edx,0x0
c000f5a5:	83 c4 18             	add    esp,0x18
c000f5a8:	f7 da                	neg    edx
c000f5aa:	5b                   	pop    ebx
c000f5ab:	c3                   	ret    
c000f5ac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f5b1:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f5b6:	83 c4 18             	add    esp,0x18
c000f5b9:	5b                   	pop    ebx
c000f5ba:	c3                   	ret    

c000f5bb <sysCallClose(regs*)>:
c000f5bb:	53                   	push   ebx
c000f5bc:	83 ec 08             	sub    esp,0x8
c000f5bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f5c3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f5c6:	83 f8 02             	cmp    eax,0x2
c000f5c9:	76 2f                	jbe    c000f5fa <sysCallClose(regs*)+0x3f>
c000f5cb:	83 ec 0c             	sub    esp,0xc
c000f5ce:	50                   	push   eax
c000f5cf:	e8 f9 1b 00 00       	call   c00111cd <getFromFileDescriptor(int)>
c000f5d4:	89 c3                	mov    ebx,eax
c000f5d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000f5d9:	e8 56 33 00 00       	call   c0012934 <File::close()>
c000f5de:	83 c4 10             	add    esp,0x10
c000f5e1:	85 db                	test   ebx,ebx
c000f5e3:	74 0c                	je     c000f5f1 <sysCallClose(regs*)+0x36>
c000f5e5:	83 ec 0c             	sub    esp,0xc
c000f5e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f5ea:	53                   	push   ebx
c000f5eb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f5ee:	83 c4 10             	add    esp,0x10
c000f5f1:	31 c0                	xor    eax,eax
c000f5f3:	31 d2                	xor    edx,edx
c000f5f5:	83 c4 08             	add    esp,0x8
c000f5f8:	5b                   	pop    ebx
c000f5f9:	c3                   	ret    
c000f5fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f5ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f604:	83 c4 08             	add    esp,0x8
c000f607:	5b                   	pop    ebx
c000f608:	c3                   	ret    

c000f609 <sysCallOpenDir(regs*)>:
c000f609:	56                   	push   esi
c000f60a:	53                   	push   ebx
c000f60b:	53                   	push   ebx
c000f60c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f610:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c000f613:	85 f6                	test   esi,esi
c000f615:	74 51                	je     c000f668 <sysCallOpenDir(regs*)+0x5f>
c000f617:	83 ec 0c             	sub    esp,0xc
c000f61a:	68 14 01 00 00       	push   0x114
c000f61f:	e8 20 2e 00 00       	call   c0012444 <operator new(unsigned long)>
c000f624:	83 c4 0c             	add    esp,0xc
c000f627:	89 c6                	mov    esi,eax
c000f629:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f62e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f631:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f634:	56                   	push   esi
c000f635:	e8 fa 36 00 00       	call   c0012d34 <Directory::Directory(char const*, Process*)>
c000f63a:	89 34 24             	mov    DWORD PTR [esp],esi
c000f63d:	e8 56 37 00 00       	call   c0012d98 <Directory::open()>
c000f642:	83 c4 10             	add    esp,0x10
c000f645:	85 c0                	test   eax,eax
c000f647:	75 1f                	jne    c000f668 <sysCallOpenDir(regs*)+0x5f>
c000f649:	83 ec 0c             	sub    esp,0xc
c000f64c:	56                   	push   esi
c000f64d:	e8 16 1a 00 00       	call   c0011068 <UnixFile::getFileDescriptor()>
c000f652:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f655:	83 c4 10             	add    esp,0x10
c000f658:	89 02                	mov    DWORD PTR [edx],eax
c000f65a:	c1 f8 1f             	sar    eax,0x1f
c000f65d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000f660:	31 c0                	xor    eax,eax
c000f662:	59                   	pop    ecx
c000f663:	31 d2                	xor    edx,edx
c000f665:	5b                   	pop    ebx
c000f666:	5e                   	pop    esi
c000f667:	c3                   	ret    
c000f668:	59                   	pop    ecx
c000f669:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f66e:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f673:	5b                   	pop    ebx
c000f674:	5e                   	pop    esi
c000f675:	c3                   	ret    

c000f676 <sysCallMakeDir(regs*)>:
c000f676:	56                   	push   esi
c000f677:	53                   	push   ebx
c000f678:	83 ec 10             	sub    esp,0x10
c000f67b:	68 14 01 00 00       	push   0x114
c000f680:	e8 bf 2d 00 00       	call   c0012444 <operator new(unsigned long)>
c000f685:	83 c4 0c             	add    esp,0xc
c000f688:	89 c3                	mov    ebx,eax
c000f68a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f68f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f692:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f696:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000f699:	53                   	push   ebx
c000f69a:	e8 95 36 00 00       	call   c0012d34 <Directory::Directory(char const*, Process*)>
c000f69f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6a2:	e8 d1 38 00 00       	call   c0012f78 <Directory::create()>
c000f6a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6aa:	89 c6                	mov    esi,eax
c000f6ac:	e8 43 37 00 00       	call   c0012df4 <Directory::close()>
c000f6b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f6b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6b6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f6b9:	31 c0                	xor    eax,eax
c000f6bb:	85 f6                	test   esi,esi
c000f6bd:	0f 95 c0             	setne  al
c000f6c0:	31 d2                	xor    edx,edx
c000f6c2:	f7 d8                	neg    eax
c000f6c4:	83 d2 00             	adc    edx,0x0
c000f6c7:	83 c4 14             	add    esp,0x14
c000f6ca:	f7 da                	neg    edx
c000f6cc:	5b                   	pop    ebx
c000f6cd:	5e                   	pop    esi
c000f6ce:	c3                   	ret    

c000f6cf <sysCallCloseDir(regs*)>:
c000f6cf:	53                   	push   ebx
c000f6d0:	83 ec 08             	sub    esp,0x8
c000f6d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6d7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f6da:	83 f8 02             	cmp    eax,0x2
c000f6dd:	76 2f                	jbe    c000f70e <sysCallCloseDir(regs*)+0x3f>
c000f6df:	83 ec 0c             	sub    esp,0xc
c000f6e2:	50                   	push   eax
c000f6e3:	e8 e5 1a 00 00       	call   c00111cd <getFromFileDescriptor(int)>
c000f6e8:	89 c3                	mov    ebx,eax
c000f6ea:	89 04 24             	mov    DWORD PTR [esp],eax
c000f6ed:	e8 02 37 00 00       	call   c0012df4 <Directory::close()>
c000f6f2:	83 c4 10             	add    esp,0x10
c000f6f5:	85 db                	test   ebx,ebx
c000f6f7:	74 0c                	je     c000f705 <sysCallCloseDir(regs*)+0x36>
c000f6f9:	83 ec 0c             	sub    esp,0xc
c000f6fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f6fe:	53                   	push   ebx
c000f6ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f702:	83 c4 10             	add    esp,0x10
c000f705:	31 c0                	xor    eax,eax
c000f707:	31 d2                	xor    edx,edx
c000f709:	83 c4 08             	add    esp,0x8
c000f70c:	5b                   	pop    ebx
c000f70d:	c3                   	ret    
c000f70e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f713:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f718:	83 c4 08             	add    esp,0x8
c000f71b:	5b                   	pop    ebx
c000f71c:	c3                   	ret    

c000f71d <sysCallWait(regs*)>:
c000f71d:	83 ec 10             	sub    esp,0x10
c000f720:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f724:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000f727:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000f72a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f72d:	e8 24 f2 ff ff       	call   c000e956 <waitTask(int, int*, int)>
c000f732:	83 c4 1c             	add    esp,0x1c
c000f735:	99                   	cdq    
c000f736:	c3                   	ret    

c000f737 <sysCallFork(regs*)>:
c000f737:	83 ec 18             	sub    esp,0x18
c000f73a:	68 cf 92 03 c0       	push   0xc00392cf
c000f73f:	e8 50 d7 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c000f744:	58                   	pop    eax
c000f745:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f749:	e8 d6 ef ff ff       	call   c000e724 <forkProcess(regs*)>
c000f74e:	83 c4 1c             	add    esp,0x1c
c000f751:	99                   	cdq    
c000f752:	c3                   	ret    

c000f753 <sysCallExecve(regs*)>:
c000f753:	53                   	push   ebx
c000f754:	81 ec 24 01 00 00    	sub    esp,0x124
c000f75a:	8b 9c 24 2c 01 00 00 	mov    ebx,DWORD PTR [esp+0x12c]
c000f761:	68 dd 92 03 c0       	push   0xc00392dd
c000f766:	e8 29 d7 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c000f76b:	83 c4 0c             	add    esp,0xc
c000f76e:	68 00 01 00 00       	push   0x100
c000f773:	8d 44 24 17          	lea    eax,[esp+0x17]
c000f777:	50                   	push   eax
c000f778:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f77d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f780:	e8 5e 34 00 00       	call   c0012be3 <getcwd(Process*, char*, int)>
c000f785:	83 c4 0c             	add    esp,0xc
c000f788:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f78b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f78e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f791:	e8 f4 f2 ff ff       	call   c000ea8a <execveProcess(char const*, char* const*, char* const*)>
c000f796:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f79b:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f7a0:	81 c4 28 01 00 00    	add    esp,0x128
c000f7a6:	5b                   	pop    ebx
c000f7a7:	c3                   	ret    

c000f7a8 <sysCallRmdir(regs*)>:
c000f7a8:	56                   	push   esi
c000f7a9:	53                   	push   ebx
c000f7aa:	83 ec 10             	sub    esp,0x10
c000f7ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f7b1:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c000f7b4:	68 14 01 00 00       	push   0x114
c000f7b9:	e8 86 2c 00 00       	call   c0012444 <operator new(unsigned long)>
c000f7be:	83 c4 0c             	add    esp,0xc
c000f7c1:	89 c3                	mov    ebx,eax
c000f7c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f7c8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f7cb:	56                   	push   esi
c000f7cc:	53                   	push   ebx
c000f7cd:	e8 a0 30 00 00       	call   c0012872 <File::File(char const*, Process*)>
c000f7d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f7d5:	e8 74 32 00 00       	call   c0012a4e <File::unlink()>
c000f7da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f7dd:	89 c6                	mov    esi,eax
c000f7df:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f7e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f7e4:	31 c0                	xor    eax,eax
c000f7e6:	85 f6                	test   esi,esi
c000f7e8:	0f 95 c0             	setne  al
c000f7eb:	31 d2                	xor    edx,edx
c000f7ed:	f7 d8                	neg    eax
c000f7ef:	83 d2 00             	adc    edx,0x0
c000f7f2:	83 c4 14             	add    esp,0x14
c000f7f5:	f7 da                	neg    edx
c000f7f7:	5b                   	pop    ebx
c000f7f8:	5e                   	pop    esi
c000f7f9:	c3                   	ret    

c000f7fa <sysCallUnlink(regs*)>:
c000f7fa:	56                   	push   esi
c000f7fb:	53                   	push   ebx
c000f7fc:	83 ec 10             	sub    esp,0x10
c000f7ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f803:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c000f806:	68 14 01 00 00       	push   0x114
c000f80b:	e8 34 2c 00 00       	call   c0012444 <operator new(unsigned long)>
c000f810:	83 c4 0c             	add    esp,0xc
c000f813:	89 c3                	mov    ebx,eax
c000f815:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f81a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f81d:	56                   	push   esi
c000f81e:	53                   	push   ebx
c000f81f:	e8 4e 30 00 00       	call   c0012872 <File::File(char const*, Process*)>
c000f824:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f827:	e8 22 32 00 00       	call   c0012a4e <File::unlink()>
c000f82c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f82f:	89 c6                	mov    esi,eax
c000f831:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f833:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f836:	31 c0                	xor    eax,eax
c000f838:	85 f6                	test   esi,esi
c000f83a:	0f 95 c0             	setne  al
c000f83d:	31 d2                	xor    edx,edx
c000f83f:	f7 d8                	neg    eax
c000f841:	83 d2 00             	adc    edx,0x0
c000f844:	83 c4 14             	add    esp,0x14
c000f847:	f7 da                	neg    edx
c000f849:	5b                   	pop    ebx
c000f84a:	5e                   	pop    esi
c000f84b:	c3                   	ret    

c000f84c <sysCallGetArgv(regs*)>:
c000f84c:	83 ec 0c             	sub    esp,0xc
c000f84f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f853:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000f856:	85 c0                	test   eax,eax
c000f858:	78 2b                	js     c000f885 <sysCallGetArgv(regs*)+0x39>
c000f85a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000f860:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000f863:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c000f869:	7d 1a                	jge    c000f885 <sysCallGetArgv(regs*)+0x39>
c000f86b:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c000f872:	85 c0                	test   eax,eax
c000f874:	74 17                	je     c000f88d <sysCallGetArgv(regs*)+0x41>
c000f876:	83 ec 08             	sub    esp,0x8
c000f879:	50                   	push   eax
c000f87a:	ff 72 24             	push   DWORD PTR [edx+0x24]
c000f87d:	e8 72 0f ff ff       	call   c00007f4 <strcpy>
c000f882:	83 c4 10             	add    esp,0x10
c000f885:	31 c0                	xor    eax,eax
c000f887:	31 d2                	xor    edx,edx
c000f889:	83 c4 0c             	add    esp,0xc
c000f88c:	c3                   	ret    
c000f88d:	b8 01 00 00 00       	mov    eax,0x1
c000f892:	31 d2                	xor    edx,edx
c000f894:	83 c4 0c             	add    esp,0xc
c000f897:	c3                   	ret    

c000f898 <sysCallTTYName(regs*)>:
c000f898:	56                   	push   esi
c000f899:	53                   	push   ebx
c000f89a:	53                   	push   ebx
c000f89b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f89f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000f8a2:	85 c0                	test   eax,eax
c000f8a4:	74 58                	je     c000f8fe <sysCallTTYName(regs*)+0x66>
c000f8a6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000f8a9:	83 f8 02             	cmp    eax,0x2
c000f8ac:	77 3e                	ja     c000f8ec <sysCallTTYName(regs*)+0x54>
c000f8ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f8b3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f8b6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000f8bc:	85 db                	test   ebx,ebx
c000f8be:	74 3e                	je     c000f8fe <sysCallTTYName(regs*)+0x66>
c000f8c0:	83 ec 0c             	sub    esp,0xc
c000f8c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f8c5:	53                   	push   ebx
c000f8c6:	ff 10                	call   DWORD PTR [eax]
c000f8c8:	83 c4 10             	add    esp,0x10
c000f8cb:	84 c0                	test   al,al
c000f8cd:	74 3a                	je     c000f909 <sysCallTTYName(regs*)+0x71>
c000f8cf:	83 ec 08             	sub    esp,0x8
c000f8d2:	81 c3 1e 10 00 00    	add    ebx,0x101e
c000f8d8:	53                   	push   ebx
c000f8d9:	ff 76 24             	push   DWORD PTR [esi+0x24]
c000f8dc:	e8 13 0f ff ff       	call   c00007f4 <strcpy>
c000f8e1:	83 c4 10             	add    esp,0x10
c000f8e4:	31 c0                	xor    eax,eax
c000f8e6:	59                   	pop    ecx
c000f8e7:	31 d2                	xor    edx,edx
c000f8e9:	5b                   	pop    ebx
c000f8ea:	5e                   	pop    esi
c000f8eb:	c3                   	ret    
c000f8ec:	83 ec 0c             	sub    esp,0xc
c000f8ef:	50                   	push   eax
c000f8f0:	e8 d8 18 00 00       	call   c00111cd <getFromFileDescriptor(int)>
c000f8f5:	83 c4 10             	add    esp,0x10
c000f8f8:	89 c3                	mov    ebx,eax
c000f8fa:	85 db                	test   ebx,ebx
c000f8fc:	75 c2                	jne    c000f8c0 <sysCallTTYName(regs*)+0x28>
c000f8fe:	59                   	pop    ecx
c000f8ff:	b8 01 00 00 00       	mov    eax,0x1
c000f904:	31 d2                	xor    edx,edx
c000f906:	5b                   	pop    ebx
c000f907:	5e                   	pop    esi
c000f908:	c3                   	ret    
c000f909:	59                   	pop    ecx
c000f90a:	b8 02 00 00 00       	mov    eax,0x2
c000f90f:	31 d2                	xor    edx,edx
c000f911:	5b                   	pop    ebx
c000f912:	5e                   	pop    esi
c000f913:	c3                   	ret    

c000f914 <sysCallGetEnv(regs*)>:
c000f914:	83 ec 0c             	sub    esp,0xc
c000f917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f91b:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000f91e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000f921:	85 c9                	test   ecx,ecx
c000f923:	75 0c                	jne    c000f931 <sysCallGetEnv(regs*)+0x1d>
c000f925:	85 d2                	test   edx,edx
c000f927:	74 14                	je     c000f93d <sysCallGetEnv(regs*)+0x29>
c000f929:	31 c0                	xor    eax,eax
c000f92b:	31 d2                	xor    edx,edx
c000f92d:	83 c4 0c             	add    esp,0xc
c000f930:	c3                   	ret    
c000f931:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f934:	85 d2                	test   edx,edx
c000f936:	74 1b                	je     c000f953 <sysCallGetEnv(regs*)+0x3f>
c000f938:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f93b:	eb ec                	jmp    c000f929 <sysCallGetEnv(regs*)+0x15>
c000f93d:	83 ec 0c             	sub    esp,0xc
c000f940:	68 28 93 03 c0       	push   0xc0039328
c000f945:	e8 b7 0d ff ff       	call   c0000701 <strlen>
c000f94a:	83 c4 10             	add    esp,0x10
c000f94d:	31 d2                	xor    edx,edx
c000f94f:	83 c4 0c             	add    esp,0xc
c000f952:	c3                   	ret    
c000f953:	83 ec 08             	sub    esp,0x8
c000f956:	68 28 93 03 c0       	push   0xc0039328
c000f95b:	50                   	push   eax
c000f95c:	e8 93 0e ff ff       	call   c00007f4 <strcpy>
c000f961:	83 c4 10             	add    esp,0x10
c000f964:	eb c3                	jmp    c000f929 <sysCallGetEnv(regs*)+0x15>

c000f966 <sysCallUSleep(regs*)>:
c000f966:	83 ec 14             	sub    esp,0x14
c000f969:	b8 e8 03 00 00       	mov    eax,0x3e8
c000f96e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f972:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c000f979:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c000f97c:	01 ca                	add    edx,ecx
c000f97e:	52                   	push   edx
c000f97f:	50                   	push   eax
c000f980:	e8 6a f0 ff ff       	call   c000e9ef <nanoSleep(unsigned long long)>
c000f985:	31 c0                	xor    eax,eax
c000f987:	31 d2                	xor    edx,edx
c000f989:	83 c4 1c             	add    esp,0x1c
c000f98c:	c3                   	ret    

c000f98d <sysCallSpawn(regs*)>:
c000f98d:	56                   	push   esi
c000f98e:	53                   	push   ebx
c000f98f:	53                   	push   ebx
c000f990:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f994:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c000f997:	85 f6                	test   esi,esi
c000f999:	75 08                	jne    c000f9a3 <sysCallSpawn(regs*)+0x16>
c000f99b:	59                   	pop    ecx
c000f99c:	31 c0                	xor    eax,eax
c000f99e:	31 d2                	xor    edx,edx
c000f9a0:	5b                   	pop    ebx
c000f9a1:	5e                   	pop    esi
c000f9a2:	c3                   	ret    
c000f9a3:	83 ec 0c             	sub    esp,0xc
c000f9a6:	68 ed 92 03 c0       	push   0xc00392ed
c000f9ab:	e8 e4 d4 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c000f9b0:	c7 04 24 3b 07 00 00 	mov    DWORD PTR [esp],0x73b
c000f9b7:	e8 88 2a 00 00       	call   c0012444 <operator new(unsigned long)>
c000f9bc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f9bf:	89 c6                	mov    esi,eax
c000f9c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f9c6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f9c9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f9cc:	56                   	push   esi
c000f9cd:	e8 0c e6 ff ff       	call   c000dfde <Process::Process(char const*, Process*, char**)>
c000f9d2:	83 c4 20             	add    esp,0x20
c000f9d5:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c000f9dc:	75 bd                	jne    c000f99b <sysCallSpawn(regs*)+0xe>
c000f9de:	83 ec 0c             	sub    esp,0xc
c000f9e1:	68 f8 92 03 c0       	push   0xc00392f8
c000f9e6:	e8 a9 d4 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c000f9eb:	89 34 24             	mov    DWORD PTR [esp],esi
c000f9ee:	e8 51 eb ff ff       	call   c000e544 <Process::createUserThread()>
c000f9f3:	8b 06                	mov    eax,DWORD PTR [esi]
c000f9f5:	83 c4 10             	add    esp,0x10
c000f9f8:	99                   	cdq    
c000f9f9:	59                   	pop    ecx
c000f9fa:	5b                   	pop    ebx
c000f9fb:	5e                   	pop    esi
c000f9fc:	c3                   	ret    

c000f9fd <sysAppSettings(regs*)>:
c000f9fd:	53                   	push   ebx
c000f9fe:	83 ec 08             	sub    esp,0x8
c000fa01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa05:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c000fa08:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c000fa0e:	25 e0 1f 00 00       	and    eax,0x1fe0
c000fa13:	66 3d c0 09          	cmp    ax,0x9c0
c000fa17:	75 2f                	jne    c000fa48 <sysAppSettings(regs*)+0x4b>
c000fa19:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c000fa1f:	83 e0 1f             	and    eax,0x1f
c000fa22:	3c 01                	cmp    al,0x1
c000fa24:	74 2e                	je     c000fa54 <sysAppSettings(regs*)+0x57>
c000fa26:	3c 07                	cmp    al,0x7
c000fa28:	0f 84 bd 00 00 00    	je     c000faeb <sysAppSettings(regs*)+0xee>
c000fa2e:	84 c0                	test   al,al
c000fa30:	0f 84 dc 00 00 00    	je     c000fb12 <sysAppSettings(regs*)+0x115>
c000fa36:	3c 08                	cmp    al,0x8
c000fa38:	74 6d                	je     c000faa7 <sysAppSettings(regs*)+0xaa>
c000fa3a:	0f b6 c0             	movzx  eax,al
c000fa3d:	83 c4 08             	add    esp,0x8
c000fa40:	05 e8 03 00 00       	add    eax,0x3e8
c000fa45:	5b                   	pop    ebx
c000fa46:	99                   	cdq    
c000fa47:	c3                   	ret    
c000fa48:	b8 01 00 00 00       	mov    eax,0x1
c000fa4d:	31 d2                	xor    edx,edx
c000fa4f:	83 c4 08             	add    esp,0x8
c000fa52:	5b                   	pop    ebx
c000fa53:	c3                   	ret    
c000fa54:	51                   	push   ecx
c000fa55:	68 00 01 00 00       	push   0x100
c000fa5a:	6a 00                	push   0x0
c000fa5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fa61:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fa64:	83 c0 0c             	add    eax,0xc
c000fa67:	50                   	push   eax
c000fa68:	e8 6b 0c ff ff       	call   c00006d8 <memset>
c000fa6d:	83 c4 0c             	add    esp,0xc
c000fa70:	68 ff 00 00 00       	push   0xff
c000fa75:	53                   	push   ebx
c000fa76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fa7b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fa7e:	83 c0 0c             	add    eax,0xc
c000fa81:	50                   	push   eax
c000fa82:	e8 da 0b ff ff       	call   c0000661 <memcpy>
c000fa87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fa8c:	5b                   	pop    ebx
c000fa8d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fa90:	5a                   	pop    edx
c000fa91:	8d 50 0c             	lea    edx,[eax+0xc]
c000fa94:	52                   	push   edx
c000fa95:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000fa9b:	e8 ee 09 00 00       	call   c001048e <VgaText::setTitle(char*)>
c000faa0:	83 c4 10             	add    esp,0x10
c000faa3:	31 c0                	xor    eax,eax
c000faa5:	eb a6                	jmp    c000fa4d <sysAppSettings(regs*)+0x50>
c000faa7:	83 ec 08             	sub    esp,0x8
c000faaa:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c000fab0:	83 e0 0f             	and    eax,0xf
c000fab3:	50                   	push   eax
c000fab4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fab9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fabc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000fac2:	e8 b7 09 00 00       	call   c001047e <VgaText::setTitleColour(VgaColour)>
c000fac7:	58                   	pop    eax
c000fac8:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c000face:	5a                   	pop    edx
c000facf:	c1 e8 04             	shr    eax,0x4
c000fad2:	83 e0 0f             	and    eax,0xf
c000fad5:	50                   	push   eax
c000fad6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fadb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fade:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000fae4:	e8 85 09 00 00       	call   c001046e <VgaText::setTitleTextColour(VgaColour)>
c000fae9:	eb b5                	jmp    c000faa0 <sysAppSettings(regs*)+0xa3>
c000faeb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000faf0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000faf3:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000faf9:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c000faff:	c0 e8 06             	shr    al,0x6
c000fb02:	83 e0 01             	and    eax,0x1
c000fb05:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c000fb0b:	31 c0                	xor    eax,eax
c000fb0d:	e9 3b ff ff ff       	jmp    c000fa4d <sysAppSettings(regs*)+0x50>
c000fb12:	b8 02 00 00 00       	mov    eax,0x2
c000fb17:	e9 31 ff ff ff       	jmp    c000fa4d <sysAppSettings(regs*)+0x50>

c000fb1c <sysSetFatAttrib(regs*)>:
c000fb1c:	57                   	push   edi
c000fb1d:	56                   	push   esi
c000fb1e:	53                   	push   ebx
c000fb1f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fb23:	83 ec 0c             	sub    esp,0xc
c000fb26:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c000fb29:	68 14 01 00 00       	push   0x114
c000fb2e:	e8 11 29 00 00       	call   c0012444 <operator new(unsigned long)>
c000fb33:	83 c4 0c             	add    esp,0xc
c000fb36:	89 c3                	mov    ebx,eax
c000fb38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fb3d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000fb40:	57                   	push   edi
c000fb41:	53                   	push   ebx
c000fb42:	e8 2b 2d 00 00       	call   c0012872 <File::File(char const*, Process*)>
c000fb47:	83 c4 0c             	add    esp,0xc
c000fb4a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c000fb4d:	0f b6 d4             	movzx  edx,ah
c000fb50:	0f b6 c0             	movzx  eax,al
c000fb53:	52                   	push   edx
c000fb54:	50                   	push   eax
c000fb55:	53                   	push   ebx
c000fb56:	e8 8d 2f 00 00       	call   c0012ae8 <File::chfatattr(unsigned char, unsigned char)>
c000fb5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb5e:	89 c6                	mov    esi,eax
c000fb60:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fb62:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fb65:	83 c4 10             	add    esp,0x10
c000fb68:	31 c0                	xor    eax,eax
c000fb6a:	5b                   	pop    ebx
c000fb6b:	85 f6                	test   esi,esi
c000fb6d:	5e                   	pop    esi
c000fb6e:	0f 95 c0             	setne  al
c000fb71:	5f                   	pop    edi
c000fb72:	31 d2                	xor    edx,edx
c000fb74:	f7 d8                	neg    eax
c000fb76:	83 d2 00             	adc    edx,0x0
c000fb79:	f7 da                	neg    edx
c000fb7b:	c3                   	ret    

c000fb7c <sysPanic(regs*)>:
c000fb7c:	83 ec 18             	sub    esp,0x18
c000fb7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fb83:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000fb86:	e8 27 d4 ff ff       	call   c000cfb2 <panic(char const*)>
c000fb8b:	c7 04 24 05 93 03 c0 	mov    DWORD PTR [esp],0xc0039305
c000fb92:	e8 1b d4 ff ff       	call   c000cfb2 <panic(char const*)>
c000fb97:	b8 01 00 00 00       	mov    eax,0x1
c000fb9c:	31 d2                	xor    edx,edx
c000fb9e:	83 c4 1c             	add    esp,0x1c
c000fba1:	c3                   	ret    

c000fba2 <sysPipe(regs*)>:
c000fba2:	57                   	push   edi
c000fba3:	56                   	push   esi
c000fba4:	53                   	push   ebx
c000fba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fba9:	83 ec 0c             	sub    esp,0xc
c000fbac:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c000fbaf:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c000fbb2:	6a 20                	push   0x20
c000fbb4:	e8 8b 28 00 00       	call   c0012444 <operator new(unsigned long)>
c000fbb9:	89 c3                	mov    ebx,eax
c000fbbb:	58                   	pop    eax
c000fbbc:	5a                   	pop    edx
c000fbbd:	68 00 50 00 00       	push   0x5000
c000fbc2:	53                   	push   ebx
c000fbc3:	e8 26 e3 ff ff       	call   c000deee <Pipe::Pipe(int)>
c000fbc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbcb:	e8 98 14 00 00       	call   c0011068 <UnixFile::getFileDescriptor()>
c000fbd0:	89 07                	mov    DWORD PTR [edi],eax
c000fbd2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbd5:	e8 8e 14 00 00       	call   c0011068 <UnixFile::getFileDescriptor()>
c000fbda:	83 c4 10             	add    esp,0x10
c000fbdd:	89 06                	mov    DWORD PTR [esi],eax
c000fbdf:	31 d2                	xor    edx,edx
c000fbe1:	5b                   	pop    ebx
c000fbe2:	31 c0                	xor    eax,eax
c000fbe4:	5e                   	pop    esi
c000fbe5:	5f                   	pop    edi
c000fbe6:	c3                   	ret    

c000fbe7 <sysGetUnixTime(regs*)>:
c000fbe7:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c000fbec:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000fbf2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fbf6:	e9 3f 36 00 00       	jmp    c001323a <Clock::timeInSecondsLocal()>

c000fbfb <string_ends_with(char const*, char const*)>:
c000fbfb:	57                   	push   edi
c000fbfc:	56                   	push   esi
c000fbfd:	53                   	push   ebx
c000fbfe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc02:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fc06:	83 ec 0c             	sub    esp,0xc
c000fc09:	53                   	push   ebx
c000fc0a:	e8 f2 0a ff ff       	call   c0000701 <strlen>
c000fc0f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fc12:	89 c6                	mov    esi,eax
c000fc14:	e8 e8 0a ff ff       	call   c0000701 <strlen>
c000fc19:	83 c4 10             	add    esp,0x10
c000fc1c:	39 c6                	cmp    esi,eax
c000fc1e:	7d 06                	jge    c000fc26 <string_ends_with(char const*, char const*)+0x2b>
c000fc20:	5b                   	pop    ebx
c000fc21:	31 c0                	xor    eax,eax
c000fc23:	5e                   	pop    esi
c000fc24:	5f                   	pop    edi
c000fc25:	c3                   	ret    
c000fc26:	83 ec 08             	sub    esp,0x8
c000fc29:	29 c6                	sub    esi,eax
c000fc2b:	57                   	push   edi
c000fc2c:	01 f3                	add    ebx,esi
c000fc2e:	53                   	push   ebx
c000fc2f:	e8 46 0c ff ff       	call   c000087a <strcmp>
c000fc34:	83 c4 10             	add    esp,0x10
c000fc37:	85 c0                	test   eax,eax
c000fc39:	5b                   	pop    ebx
c000fc3a:	0f 94 c0             	sete   al
c000fc3d:	5e                   	pop    esi
c000fc3e:	0f b6 c0             	movzx  eax,al
c000fc41:	5f                   	pop    edi
c000fc42:	c3                   	ret    

c000fc43 <setupSystemCalls()>:
c000fc43:	c7 05 40 bc 03 c0 90 84 01 c0 	mov    DWORD PTR ds:0xc003bc40,0xc0018490
c000fc4d:	c7 05 44 bc 03 c0 53 83 01 c0 	mov    DWORD PTR ds:0xc003bc44,0xc0018353
c000fc57:	c7 05 48 bc 03 c0 d3 83 01 c0 	mov    DWORD PTR ds:0xc003bc48,0xc00183d3
c000fc61:	c7 05 4c bc 03 c0 28 84 01 c0 	mov    DWORD PTR ds:0xc003bc4c,0xc0018428
c000fc6b:	c7 05 50 bc 03 c0 6b 83 01 c0 	mov    DWORD PTR ds:0xc003bc50,0xc001836b
c000fc75:	c7 05 54 bc 03 c0 aa f0 00 c0 	mov    DWORD PTR ds:0xc003bc54,0xc000f0aa
c000fc7f:	c7 05 58 bc 03 c0 23 f2 00 c0 	mov    DWORD PTR ds:0xc003bc58,0xc000f223
c000fc89:	c7 05 5c bc 03 c0 42 f2 00 c0 	mov    DWORD PTR ds:0xc003bc5c,0xc000f242
c000fc93:	c7 05 64 bc 03 c0 bb f5 00 c0 	mov    DWORD PTR ds:0xc003bc64,0xc000f5bb
c000fc9d:	c7 05 60 bc 03 c0 a1 f2 00 c0 	mov    DWORD PTR ds:0xc003bc60,0xc000f2a1
c000fca7:	c7 05 68 bc 03 c0 09 f6 00 c0 	mov    DWORD PTR ds:0xc003bc68,0xc000f609
c000fcb1:	c7 05 6c bc 03 c0 91 f3 00 c0 	mov    DWORD PTR ds:0xc003bc6c,0xc000f391
c000fcbb:	c7 05 70 bc 03 c0 b6 f0 00 c0 	mov    DWORD PTR ds:0xc003bc70,0xc000f0b6
c000fcc5:	c7 05 74 bc 03 c0 bb f0 00 c0 	mov    DWORD PTR ds:0xc003bc74,0xc000f0bb
c000fccf:	c7 05 78 bc 03 c0 76 f6 00 c0 	mov    DWORD PTR ds:0xc003bc78,0xc000f676
c000fcd9:	c7 05 7c bc 03 c0 cf f6 00 c0 	mov    DWORD PTR ds:0xc003bc7c,0xc000f6cf
c000fce3:	c7 05 80 bc 03 c0 53 f4 00 c0 	mov    DWORD PTR ds:0xc003bc80,0xc000f453
c000fced:	c7 05 84 bc 03 c0 a4 f4 00 c0 	mov    DWORD PTR ds:0xc003bc84,0xc000f4a4
c000fcf7:	c7 05 88 bc 03 c0 69 f5 00 c0 	mov    DWORD PTR ds:0xc003bc88,0xc000f569
c000fd01:	c7 05 8c bc 03 c0 c0 f0 00 c0 	mov    DWORD PTR ds:0xc003bc8c,0xc000f0c0
c000fd0b:	c7 05 90 bc 03 c0 1d f7 00 c0 	mov    DWORD PTR ds:0xc003bc90,0xc000f71d
c000fd15:	c7 05 94 bc 03 c0 37 f7 00 c0 	mov    DWORD PTR ds:0xc003bc94,0xc000f737
c000fd1f:	c7 05 98 bc 03 c0 53 f7 00 c0 	mov    DWORD PTR ds:0xc003bc98,0xc000f753
c000fd29:	c7 05 9c bc 03 c0 a8 f7 00 c0 	mov    DWORD PTR ds:0xc003bc9c,0xc000f7a8
c000fd33:	c7 05 a0 bc 03 c0 fa f7 00 c0 	mov    DWORD PTR ds:0xc003bca0,0xc000f7fa
c000fd3d:	c7 05 a4 bc 03 c0 ca f0 00 c0 	mov    DWORD PTR ds:0xc003bca4,0xc000f0ca
c000fd47:	c7 05 a8 bc 03 c0 4c f8 00 c0 	mov    DWORD PTR ds:0xc003bca8,0xc000f84c
c000fd51:	c7 05 ac bc 03 c0 5e f2 00 c0 	mov    DWORD PTR ds:0xc003bcac,0xc000f25e
c000fd5b:	c7 05 b0 bc 03 c0 98 f8 00 c0 	mov    DWORD PTR ds:0xc003bcb0,0xc000f898
c000fd65:	c7 05 b4 bc 03 c0 00 f4 00 c0 	mov    DWORD PTR ds:0xc003bcb4,0xc000f400
c000fd6f:	c7 05 b8 bc 03 c0 66 f9 00 c0 	mov    DWORD PTR ds:0xc003bcb8,0xc000f966
c000fd79:	c7 05 bc bc 03 c0 f0 f4 00 c0 	mov    DWORD PTR ds:0xc003bcbc,0xc000f4f0
c000fd83:	c7 05 c0 bc 03 c0 8d f9 00 c0 	mov    DWORD PTR ds:0xc003bcc0,0xc000f98d
c000fd8d:	c7 05 c4 bc 03 c0 14 f9 00 c0 	mov    DWORD PTR ds:0xc003bcc4,0xc000f914
c000fd97:	c7 05 c8 bc 03 c0 fd f9 00 c0 	mov    DWORD PTR ds:0xc003bcc8,0xc000f9fd
c000fda1:	c7 05 cc bc 03 c0 da f0 00 c0 	mov    DWORD PTR ds:0xc003bccc,0xc000f0da
c000fdab:	c7 05 d0 bc 03 c0 44 f1 00 c0 	mov    DWORD PTR ds:0xc003bcd0,0xc000f144
c000fdb5:	c7 05 d4 bc 03 c0 8a f1 00 c0 	mov    DWORD PTR ds:0xc003bcd4,0xc000f18a
c000fdbf:	c7 05 d8 bc 03 c0 1c fb 00 c0 	mov    DWORD PTR ds:0xc003bcd8,0xc000fb1c
c000fdc9:	c7 05 dc bc 03 c0 7c fb 00 c0 	mov    DWORD PTR ds:0xc003bcdc,0xc000fb7c
c000fdd3:	c7 05 e0 bc 03 c0 db f1 00 c0 	mov    DWORD PTR ds:0xc003bce0,0xc000f1db
c000fddd:	c7 05 e4 bc 03 c0 a2 fb 00 c0 	mov    DWORD PTR ds:0xc003bce4,0xc000fba2
c000fde7:	c7 05 e8 bc 03 c0 e7 fb 00 c0 	mov    DWORD PTR ds:0xc003bce8,0xc000fbe7
c000fdf1:	c3                   	ret    

c000fdf2 <systemCall(regs*, void*)>:
c000fdf2:	53                   	push   ebx
c000fdf3:	83 ec 08             	sub    esp,0x8
c000fdf6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fdfa:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000fdfd:	83 f8 7f             	cmp    eax,0x7f
c000fe00:	77 16                	ja     c000fe18 <systemCall(regs*, void*)+0x26>
c000fe02:	8b 14 85 40 bc 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc43c0]
c000fe09:	85 d2                	test   edx,edx
c000fe0b:	74 0b                	je     c000fe18 <systemCall(regs*, void*)+0x26>
c000fe0d:	83 ec 0c             	sub    esp,0xc
c000fe10:	53                   	push   ebx
c000fe11:	ff d2                	call   edx
c000fe13:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000fe16:	eb 0d                	jmp    c000fe25 <systemCall(regs*, void*)+0x33>
c000fe18:	52                   	push   edx
c000fe19:	52                   	push   edx
c000fe1a:	50                   	push   eax
c000fe1b:	68 14 93 03 c0       	push   0xc0039314
c000fe20:	e8 6f d0 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c000fe25:	83 c4 10             	add    esp,0x10
c000fe28:	b8 ef be ad de       	mov    eax,0xdeadbeef
c000fe2d:	31 d2                	xor    edx,edx
c000fe2f:	83 c4 08             	add    esp,0x8
c000fe32:	5b                   	pop    ebx
c000fe33:	c3                   	ret    

c000fe34 <VgaText::isAtty()>:
c000fe34:	b0 01                	mov    al,0x1
c000fe36:	c3                   	ret    
c000fe37:	90                   	nop

c000fe38 <VgaText::~VgaText()>:
c000fe38:	83 ec 0c             	sub    esp,0xc
c000fe3b:	ba 1c 94 03 c0       	mov    edx,0xc003941c
c000fe40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe44:	89 10                	mov    DWORD PTR [eax],edx
c000fe46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe4a:	83 ec 0c             	sub    esp,0xc
c000fe4d:	50                   	push   eax
c000fe4e:	e8 81 12 00 00       	call   c00110d4 <UnixFile::~UnixFile()>
c000fe53:	83 c4 10             	add    esp,0x10
c000fe56:	90                   	nop
c000fe57:	83 c4 0c             	add    esp,0xc
c000fe5a:	c3                   	ret    
c000fe5b:	90                   	nop

c000fe5c <VgaText::~VgaText()>:
c000fe5c:	83 ec 0c             	sub    esp,0xc
c000fe5f:	83 ec 0c             	sub    esp,0xc
c000fe62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe66:	e8 cd ff ff ff       	call   c000fe38 <VgaText::~VgaText()>
c000fe6b:	83 c4 10             	add    esp,0x10
c000fe6e:	83 ec 08             	sub    esp,0x8
c000fe71:	68 60 12 00 00       	push   0x1260
c000fe76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe7a:	e8 d4 25 00 00       	call   c0012453 <operator delete(void*, unsigned long)>
c000fe7f:	83 c4 10             	add    esp,0x10
c000fe82:	83 c4 0c             	add    esp,0xc
c000fe85:	c3                   	ret    

c000fe86 <VgaText::read(unsigned long long, void*, int*)>:
c000fe86:	83 ec 10             	sub    esp,0x10
c000fe89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fe8d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe95:	e8 34 4f 00 00       	call   c0014dce <readKeyboard(VgaText*, char*, unsigned long)>
c000fe9a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fe9e:	89 02                	mov    DWORD PTR [edx],eax
c000fea0:	31 c0                	xor    eax,eax
c000fea2:	83 c4 1c             	add    esp,0x1c
c000fea5:	c3                   	ret    

c000fea6 <setTerminalScrollLock(bool)>:
c000fea6:	c3                   	ret    

c000fea7 <addToTerminalCycle(VgaText*)>:
c000fea7:	8b 15 60 be 03 c0    	mov    edx,DWORD PTR ds:0xc003be60
c000fead:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000feb1:	85 d2                	test   edx,edx
c000feb3:	75 0c                	jne    c000fec1 <addToTerminalCycle(VgaText*)+0x1a>
c000feb5:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000febb:	a3 60 be 03 c0       	mov    ds:0xc003be60,eax
c000fec0:	c3                   	ret    
c000fec1:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000fec7:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000fecd:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000fed3:	c3                   	ret    

c000fed4 <installVgaTextImplementation()>:
c000fed4:	83 ec 10             	sub    esp,0x10
c000fed7:	6a 20                	push   0x20
c000fed9:	6a 00                	push   0x0
c000fedb:	68 40 be 03 c0       	push   0xc003be40
c000fee0:	e8 f3 07 ff ff       	call   c00006d8 <memset>
c000fee5:	83 c4 1c             	add    esp,0x1c
c000fee8:	c3                   	ret    

c000fee9 <scrollTerminalScrollLock(int)>:
c000fee9:	c3                   	ret    

c000feea <VgaText::load()>:
c000feea:	53                   	push   ebx
c000feeb:	31 c0                	xor    eax,eax
c000feed:	83 ec 58             	sub    esp,0x58
c000fef0:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000fef4:	89 e2                	mov    edx,esp
c000fef6:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000fefa:	40                   	inc    eax
c000fefb:	83 f8 50             	cmp    eax,0x50
c000fefe:	75 f6                	jne    c000fef6 <VgaText::load()+0xc>
c000ff00:	31 c0                	xor    eax,eax
c000ff02:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000ff09:	84 c9                	test   cl,cl
c000ff0b:	74 06                	je     c000ff13 <VgaText::load()+0x29>
c000ff0d:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ff10:	40                   	inc    eax
c000ff11:	eb ef                	jmp    c000ff02 <VgaText::load()+0x18>
c000ff13:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000ff19:	85 c0                	test   eax,eax
c000ff1b:	74 09                	je     c000ff26 <VgaText::load()+0x3c>
c000ff1d:	51                   	push   ecx
c000ff1e:	51                   	push   ecx
c000ff1f:	52                   	push   edx
c000ff20:	53                   	push   ebx
c000ff21:	ff d0                	call   eax
c000ff23:	83 c4 10             	add    esp,0x10
c000ff26:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000ff2c:	85 c0                	test   eax,eax
c000ff2e:	74 09                	je     c000ff39 <VgaText::load()+0x4f>
c000ff30:	83 ec 0c             	sub    esp,0xc
c000ff33:	53                   	push   ebx
c000ff34:	ff d0                	call   eax
c000ff36:	83 c4 10             	add    esp,0x10
c000ff39:	83 c4 58             	add    esp,0x58
c000ff3c:	5b                   	pop    ebx
c000ff3d:	c3                   	ret    

c000ff3e <VgaText::updateCursor()>:
c000ff3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff42:	39 05 64 be 03 c0    	cmp    DWORD PTR ds:0xc003be64,eax
c000ff48:	75 0c                	jne    c000ff56 <VgaText::updateCursor()+0x18>
c000ff4a:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000ff50:	85 c0                	test   eax,eax
c000ff52:	74 02                	je     c000ff56 <VgaText::updateCursor()+0x18>
c000ff54:	ff e0                	jmp    eax
c000ff56:	c3                   	ret    
c000ff57:	90                   	nop

c000ff58 <VgaText::showCursor(bool)>:
c000ff58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff60:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000ff66:	c3                   	ret    
c000ff67:	90                   	nop

c000ff68 <VgaText::disableBlink(bool)>:
c000ff68:	56                   	push   esi
c000ff69:	53                   	push   ebx
c000ff6a:	51                   	push   ecx
c000ff6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff6f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ff73:	39 1d 64 be 03 c0    	cmp    DWORD PTR ds:0xc003be64,ebx
c000ff79:	75 18                	jne    c000ff93 <VgaText::disableBlink(bool)+0x2b>
c000ff7b:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000ff81:	85 c0                	test   eax,eax
c000ff83:	74 0e                	je     c000ff93 <VgaText::disableBlink(bool)+0x2b>
c000ff85:	89 f1                	mov    ecx,esi
c000ff87:	52                   	push   edx
c000ff88:	52                   	push   edx
c000ff89:	0f b6 d1             	movzx  edx,cl
c000ff8c:	52                   	push   edx
c000ff8d:	53                   	push   ebx
c000ff8e:	ff d0                	call   eax
c000ff90:	83 c4 10             	add    esp,0x10
c000ff93:	89 f0                	mov    eax,esi
c000ff95:	83 f0 01             	xor    eax,0x1
c000ff98:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000ff9e:	58                   	pop    eax
c000ff9f:	5b                   	pop    ebx
c000ffa0:	5e                   	pop    esi
c000ffa1:	c3                   	ret    

c000ffa2 <VgaText::doANSI_SGR(int)>:
c000ffa2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ffa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffaa:	85 d2                	test   edx,edx
c000ffac:	75 14                	jne    c000ffc2 <VgaText::doANSI_SGR(int)+0x20>
c000ffae:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000ffb4:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000ffba:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000ffc0:	eb 65                	jmp    c0010027 <VgaText::doANSI_SGR(int)+0x85>
c000ffc2:	83 fa 07             	cmp    edx,0x7
c000ffc5:	75 14                	jne    c000ffdb <VgaText::doANSI_SGR(int)+0x39>
c000ffc7:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000ffcd:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000ffd3:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000ffd9:	eb 4c                	jmp    c0010027 <VgaText::doANSI_SGR(int)+0x85>
c000ffdb:	83 fa 1b             	cmp    edx,0x1b
c000ffde:	74 ce                	je     c000ffae <VgaText::doANSI_SGR(int)+0xc>
c000ffe0:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000ffe3:	83 f9 07             	cmp    ecx,0x7
c000ffe6:	77 09                	ja     c000fff1 <VgaText::doANSI_SGR(int)+0x4f>
c000ffe8:	8b 14 8d 20 ae 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffc51e0]
c000ffef:	eb 20                	jmp    c0010011 <VgaText::doANSI_SGR(int)+0x6f>
c000fff1:	8d 4a d8             	lea    ecx,[edx-0x28]
c000fff4:	83 f9 07             	cmp    ecx,0x7
c000fff7:	77 09                	ja     c0010002 <VgaText::doANSI_SGR(int)+0x60>
c000fff9:	8b 14 8d 20 ae 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffc51e0]
c0010000:	eb 25                	jmp    c0010027 <VgaText::doANSI_SGR(int)+0x85>
c0010002:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010005:	83 f9 07             	cmp    ecx,0x7
c0010008:	77 0e                	ja     c0010018 <VgaText::doANSI_SGR(int)+0x76>
c001000a:	8b 14 95 d8 ac 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc5328]
c0010011:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010017:	c3                   	ret    
c0010018:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001001b:	83 f9 07             	cmp    ecx,0x7
c001001e:	77 0d                	ja     c001002d <VgaText::doANSI_SGR(int)+0x8b>
c0010020:	8b 14 95 b0 ac 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc5350]
c0010027:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001002d:	c3                   	ret    

c001002e <VgaText::setDefaultBgColour(VgaColour)>:
c001002e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010032:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010036:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c001003c:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010042:	c3                   	ret    
c0010043:	90                   	nop

c0010044 <VgaText::setDefaultFgColour(VgaColour)>:
c0010044:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010048:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001004c:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010052:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010058:	c3                   	ret    
c0010059:	90                   	nop

c001005a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001005a:	53                   	push   ebx
c001005b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001005f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010063:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010067:	51                   	push   ecx
c0010068:	e8 c1 ff ff ff       	call   c001002e <VgaText::setDefaultBgColour(VgaColour)>
c001006d:	58                   	pop    eax
c001006e:	5a                   	pop    edx
c001006f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010073:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010077:	5b                   	pop    ebx
c0010078:	eb ca                	jmp    c0010044 <VgaText::setDefaultFgColour(VgaColour)>

c001007a <VgaText::combineColours(unsigned char, unsigned char)>:
c001007a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001007e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010083:	83 e0 0f             	and    eax,0xf
c0010086:	c1 e2 04             	shl    edx,0x4
c0010089:	09 d0                	or     eax,edx
c001008b:	c3                   	ret    

c001008c <VgaText::scrollScreen()>:
c001008c:	57                   	push   edi
c001008d:	56                   	push   esi
c001008e:	be 01 00 00 00       	mov    esi,0x1
c0010093:	53                   	push   ebx
c0010094:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010098:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001009e:	31 ff                	xor    edi,edi
c00100a0:	01 d9                	add    ecx,ebx
c00100a2:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00100a5:	83 fe 17             	cmp    esi,0x17
c00100a8:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00100ae:	75 28                	jne    c00100d8 <VgaText::scrollScreen()+0x4c>
c00100b0:	f7 c7 01 00 00 00    	test   edi,0x1
c00100b6:	74 1c                	je     c00100d4 <VgaText::scrollScreen()+0x48>
c00100b8:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00100bf:	50                   	push   eax
c00100c0:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00100c7:	50                   	push   eax
c00100c8:	e8 ad ff ff ff       	call   c001007a <VgaText::combineColours(unsigned char, unsigned char)>
c00100cd:	5a                   	pop    edx
c00100ce:	5a                   	pop    edx
c00100cf:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00100d2:	eb 04                	jmp    c00100d8 <VgaText::scrollScreen()+0x4c>
c00100d4:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00100d8:	47                   	inc    edi
c00100d9:	41                   	inc    ecx
c00100da:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00100e0:	75 c0                	jne    c00100a2 <VgaText::scrollScreen()+0x16>
c00100e2:	46                   	inc    esi
c00100e3:	83 fe 18             	cmp    esi,0x18
c00100e6:	75 b0                	jne    c0010098 <VgaText::scrollScreen()+0xc>
c00100e8:	39 1d 64 be 03 c0    	cmp    DWORD PTR ds:0xc003be64,ebx
c00100ee:	75 24                	jne    c0010114 <VgaText::scrollScreen()+0x88>
c00100f0:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00100f7:	74 08                	je     c0010101 <VgaText::scrollScreen()+0x75>
c00100f9:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00100ff:	eb 13                	jmp    c0010114 <VgaText::scrollScreen()+0x88>
c0010101:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010107:	85 c0                	test   eax,eax
c0010109:	74 09                	je     c0010114 <VgaText::scrollScreen()+0x88>
c001010b:	83 ec 0c             	sub    esp,0xc
c001010e:	53                   	push   ebx
c001010f:	ff d0                	call   eax
c0010111:	83 c4 10             	add    esp,0x10
c0010114:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010118:	5b                   	pop    ebx
c0010119:	5e                   	pop    esi
c001011a:	5f                   	pop    edi
c001011b:	e9 1e fe ff ff       	jmp    c000ff3e <VgaText::updateCursor()>

c0010120 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010120:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010125:	c1 e0 08             	shl    eax,0x8
c0010128:	89 c2                	mov    edx,eax
c001012a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001012f:	09 d0                	or     eax,edx
c0010131:	c3                   	ret    

c0010132 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010132:	53                   	push   ebx
c0010133:	83 ec 08             	sub    esp,0x8
c0010136:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001013a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001013f:	50                   	push   eax
c0010140:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010145:	50                   	push   eax
c0010146:	e8 2f ff ff ff       	call   c001007a <VgaText::combineColours(unsigned char, unsigned char)>
c001014b:	5a                   	pop    edx
c001014c:	0f b6 c0             	movzx  eax,al
c001014f:	5b                   	pop    ebx
c0010150:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010155:	50                   	push   eax
c0010156:	53                   	push   ebx
c0010157:	e8 c4 ff ff ff       	call   c0010120 <VgaText::combineCharAndColour(char, unsigned char)>
c001015c:	5a                   	pop    edx
c001015d:	5a                   	pop    edx
c001015e:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010164:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010168:	0f b7 d2             	movzx  edx,dx
c001016b:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010170:	39 0d 64 be 03 c0    	cmp    DWORD PTR ds:0xc003be64,ecx
c0010176:	75 14                	jne    c001018c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010178:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c001017e:	85 c0                	test   eax,eax
c0010180:	74 0a                	je     c001018c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010182:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010186:	83 c4 08             	add    esp,0x8
c0010189:	5b                   	pop    ebx
c001018a:	ff e0                	jmp    eax
c001018c:	83 c4 08             	add    esp,0x8
c001018f:	5b                   	pop    ebx
c0010190:	c3                   	ret    
c0010191:	90                   	nop

c0010192 <VgaText::getCursorX()>:
c0010192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010196:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c001019c:	c3                   	ret    
c001019d:	90                   	nop

c001019e <VgaText::getCursorY()>:
c001019e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101a2:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00101a8:	c3                   	ret    
c00101a9:	90                   	nop

c00101aa <VgaText::setCursor(int, int)>:
c00101aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101b2:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00101b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00101bc:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00101c2:	e9 77 fd ff ff       	jmp    c000ff3e <VgaText::updateCursor()>
c00101c7:	90                   	nop

c00101c8 <VgaText::setCursorX(int)>:
c00101c8:	83 ec 10             	sub    esp,0x10
c00101cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101cf:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00101d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101d9:	50                   	push   eax
c00101da:	e8 cb ff ff ff       	call   c00101aa <VgaText::setCursor(int, int)>
c00101df:	83 c4 1c             	add    esp,0x1c
c00101e2:	c3                   	ret    
c00101e3:	90                   	nop

c00101e4 <VgaText::setCursorY(int)>:
c00101e4:	83 ec 10             	sub    esp,0x10
c00101e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101ef:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00101f5:	50                   	push   eax
c00101f6:	e8 af ff ff ff       	call   c00101aa <VgaText::setCursor(int, int)>
c00101fb:	83 c4 1c             	add    esp,0x1c
c00101fe:	c3                   	ret    
c00101ff:	90                   	nop

c0010200 <VgaText::incrementCursor(bool)>:
c0010200:	56                   	push   esi
c0010201:	53                   	push   ebx
c0010202:	51                   	push   ecx
c0010203:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010207:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001020b:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010211:	40                   	inc    eax
c0010212:	83 f8 50             	cmp    eax,0x50
c0010215:	74 08                	je     c001021f <VgaText::incrementCursor(bool)+0x1f>
c0010217:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c001021d:	eb 33                	jmp    c0010252 <VgaText::incrementCursor(bool)+0x52>
c001021f:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010225:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001022f:	8d 50 01             	lea    edx,[eax+0x1]
c0010232:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010238:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001023e:	75 12                	jne    c0010252 <VgaText::incrementCursor(bool)+0x52>
c0010240:	83 ec 0c             	sub    esp,0xc
c0010243:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010249:	53                   	push   ebx
c001024a:	e8 3d fe ff ff       	call   c001008c <VgaText::scrollScreen()>
c001024f:	83 c4 10             	add    esp,0x10
c0010252:	89 f0                	mov    eax,esi
c0010254:	84 c0                	test   al,al
c0010256:	74 0c                	je     c0010264 <VgaText::incrementCursor(bool)+0x64>
c0010258:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001025c:	5a                   	pop    edx
c001025d:	5b                   	pop    ebx
c001025e:	5e                   	pop    esi
c001025f:	e9 da fc ff ff       	jmp    c000ff3e <VgaText::updateCursor()>
c0010264:	58                   	pop    eax
c0010265:	5b                   	pop    ebx
c0010266:	5e                   	pop    esi
c0010267:	c3                   	ret    

c0010268 <VgaText::updateRAMUsageDisplay(int)>:
c0010268:	53                   	push   ebx
c0010269:	bb 0a 00 00 00       	mov    ebx,0xa
c001026e:	6a 0f                	push   0xf
c0010270:	6a 00                	push   0x0
c0010272:	e8 03 fe ff ff       	call   c001007a <VgaText::combineColours(unsigned char, unsigned char)>
c0010277:	5a                   	pop    edx
c0010278:	59                   	pop    ecx
c0010279:	0f b6 c8             	movzx  ecx,al
c001027c:	51                   	push   ecx
c001027d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010281:	99                   	cdq    
c0010282:	f7 fb                	idiv   ebx
c0010284:	89 d3                	mov    ebx,edx
c0010286:	83 c0 30             	add    eax,0x30
c0010289:	83 c3 30             	add    ebx,0x30
c001028c:	0f be c0             	movsx  eax,al
c001028f:	0f b6 db             	movzx  ebx,bl
c0010292:	50                   	push   eax
c0010293:	e8 88 fe ff ff       	call   c0010120 <VgaText::combineCharAndColour(char, unsigned char)>
c0010298:	5a                   	pop    edx
c0010299:	5a                   	pop    edx
c001029a:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c00102a0:	51                   	push   ecx
c00102a1:	53                   	push   ebx
c00102a2:	e8 79 fe ff ff       	call   c0010120 <VgaText::combineCharAndColour(char, unsigned char)>
c00102a7:	5b                   	pop    ebx
c00102a8:	5a                   	pop    edx
c00102a9:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c00102af:	51                   	push   ecx
c00102b0:	6a 25                	push   0x25
c00102b2:	e8 69 fe ff ff       	call   c0010120 <VgaText::combineCharAndColour(char, unsigned char)>
c00102b7:	59                   	pop    ecx
c00102b8:	5b                   	pop    ebx
c00102b9:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c00102bf:	5b                   	pop    ebx
c00102c0:	c3                   	ret    
c00102c1:	90                   	nop

c00102c2 <VgaText::updateDiskUsage()>:
c00102c2:	55                   	push   ebp
c00102c3:	bd 10 27 00 00       	mov    ebp,0x2710
c00102c8:	57                   	push   edi
c00102c9:	56                   	push   esi
c00102ca:	53                   	push   ebx
c00102cb:	6a 0f                	push   0xf
c00102cd:	6a 00                	push   0x0
c00102cf:	e8 a6 fd ff ff       	call   c001007a <VgaText::combineColours(unsigned char, unsigned char)>
c00102d4:	5a                   	pop    edx
c00102d5:	0f b6 d8             	movzx  ebx,al
c00102d8:	59                   	pop    ecx
c00102d9:	a1 a8 d0 03 c0       	mov    eax,ds:0xc003d0a8
c00102de:	53                   	push   ebx
c00102df:	b9 0a 00 00 00       	mov    ecx,0xa
c00102e4:	99                   	cdq    
c00102e5:	f7 fd                	idiv   ebp
c00102e7:	99                   	cdq    
c00102e8:	f7 f9                	idiv   ecx
c00102ea:	8d 42 30             	lea    eax,[edx+0x30]
c00102ed:	0f b6 c0             	movzx  eax,al
c00102f0:	50                   	push   eax
c00102f1:	e8 2a fe ff ff       	call   c0010120 <VgaText::combineCharAndColour(char, unsigned char)>
c00102f6:	5e                   	pop    esi
c00102f7:	5f                   	pop    edi
c00102f8:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c00102fe:	bf e8 03 00 00       	mov    edi,0x3e8
c0010303:	53                   	push   ebx
c0010304:	a1 a8 d0 03 c0       	mov    eax,ds:0xc003d0a8
c0010309:	99                   	cdq    
c001030a:	f7 ff                	idiv   edi
c001030c:	99                   	cdq    
c001030d:	f7 f9                	idiv   ecx
c001030f:	8d 42 30             	lea    eax,[edx+0x30]
c0010312:	0f b6 c0             	movzx  eax,al
c0010315:	50                   	push   eax
c0010316:	e8 05 fe ff ff       	call   c0010120 <VgaText::combineCharAndColour(char, unsigned char)>
c001031b:	5a                   	pop    edx
c001031c:	5e                   	pop    esi
c001031d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c0010323:	be 64 00 00 00       	mov    esi,0x64
c0010328:	53                   	push   ebx
c0010329:	a1 a8 d0 03 c0       	mov    eax,ds:0xc003d0a8
c001032e:	99                   	cdq    
c001032f:	f7 fe                	idiv   esi
c0010331:	99                   	cdq    
c0010332:	f7 f9                	idiv   ecx
c0010334:	8d 42 30             	lea    eax,[edx+0x30]
c0010337:	0f b6 c0             	movzx  eax,al
c001033a:	50                   	push   eax
c001033b:	e8 e0 fd ff ff       	call   c0010120 <VgaText::combineCharAndColour(char, unsigned char)>
c0010340:	5a                   	pop    edx
c0010341:	5a                   	pop    edx
c0010342:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c0010348:	53                   	push   ebx
c0010349:	a1 a8 d0 03 c0       	mov    eax,ds:0xc003d0a8
c001034e:	99                   	cdq    
c001034f:	f7 f9                	idiv   ecx
c0010351:	99                   	cdq    
c0010352:	f7 f9                	idiv   ecx
c0010354:	8d 42 30             	lea    eax,[edx+0x30]
c0010357:	0f b6 c0             	movzx  eax,al
c001035a:	50                   	push   eax
c001035b:	e8 c0 fd ff ff       	call   c0010120 <VgaText::combineCharAndColour(char, unsigned char)>
c0010360:	5a                   	pop    edx
c0010361:	5a                   	pop    edx
c0010362:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c0010368:	53                   	push   ebx
c0010369:	a1 a8 d0 03 c0       	mov    eax,ds:0xc003d0a8
c001036e:	99                   	cdq    
c001036f:	f7 f9                	idiv   ecx
c0010371:	8d 42 30             	lea    eax,[edx+0x30]
c0010374:	0f b6 c0             	movzx  eax,al
c0010377:	50                   	push   eax
c0010378:	e8 a3 fd ff ff       	call   c0010120 <VgaText::combineCharAndColour(char, unsigned char)>
c001037d:	5a                   	pop    edx
c001037e:	5a                   	pop    edx
c001037f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c0010385:	53                   	push   ebx
c0010386:	a1 a4 d0 03 c0       	mov    eax,ds:0xc003d0a4
c001038b:	99                   	cdq    
c001038c:	f7 fd                	idiv   ebp
c001038e:	99                   	cdq    
c001038f:	f7 f9                	idiv   ecx
c0010391:	8d 42 30             	lea    eax,[edx+0x30]
c0010394:	0f b6 c0             	movzx  eax,al
c0010397:	50                   	push   eax
c0010398:	e8 83 fd ff ff       	call   c0010120 <VgaText::combineCharAndColour(char, unsigned char)>
c001039d:	5d                   	pop    ebp
c001039e:	5a                   	pop    edx
c001039f:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c00103a5:	53                   	push   ebx
c00103a6:	a1 a4 d0 03 c0       	mov    eax,ds:0xc003d0a4
c00103ab:	99                   	cdq    
c00103ac:	f7 ff                	idiv   edi
c00103ae:	99                   	cdq    
c00103af:	f7 f9                	idiv   ecx
c00103b1:	8d 42 30             	lea    eax,[edx+0x30]
c00103b4:	0f b6 c0             	movzx  eax,al
c00103b7:	50                   	push   eax
c00103b8:	e8 63 fd ff ff       	call   c0010120 <VgaText::combineCharAndColour(char, unsigned char)>
c00103bd:	5f                   	pop    edi
c00103be:	5d                   	pop    ebp
c00103bf:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c00103c5:	53                   	push   ebx
c00103c6:	a1 a4 d0 03 c0       	mov    eax,ds:0xc003d0a4
c00103cb:	99                   	cdq    
c00103cc:	f7 fe                	idiv   esi
c00103ce:	99                   	cdq    
c00103cf:	f7 f9                	idiv   ecx
c00103d1:	8d 42 30             	lea    eax,[edx+0x30]
c00103d4:	0f b6 c0             	movzx  eax,al
c00103d7:	50                   	push   eax
c00103d8:	e8 43 fd ff ff       	call   c0010120 <VgaText::combineCharAndColour(char, unsigned char)>
c00103dd:	5a                   	pop    edx
c00103de:	5e                   	pop    esi
c00103df:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c00103e5:	53                   	push   ebx
c00103e6:	a1 a4 d0 03 c0       	mov    eax,ds:0xc003d0a4
c00103eb:	99                   	cdq    
c00103ec:	f7 f9                	idiv   ecx
c00103ee:	99                   	cdq    
c00103ef:	f7 f9                	idiv   ecx
c00103f1:	8d 42 30             	lea    eax,[edx+0x30]
c00103f4:	0f b6 c0             	movzx  eax,al
c00103f7:	50                   	push   eax
c00103f8:	e8 23 fd ff ff       	call   c0010120 <VgaText::combineCharAndColour(char, unsigned char)>
c00103fd:	5f                   	pop    edi
c00103fe:	5d                   	pop    ebp
c00103ff:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c0010405:	53                   	push   ebx
c0010406:	a1 a4 d0 03 c0       	mov    eax,ds:0xc003d0a4
c001040b:	99                   	cdq    
c001040c:	f7 f9                	idiv   ecx
c001040e:	83 c2 30             	add    edx,0x30
c0010411:	0f b6 d2             	movzx  edx,dl
c0010414:	52                   	push   edx
c0010415:	e8 06 fd ff ff       	call   c0010120 <VgaText::combineCharAndColour(char, unsigned char)>
c001041a:	5a                   	pop    edx
c001041b:	59                   	pop    ecx
c001041c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c0010422:	5b                   	pop    ebx
c0010423:	5e                   	pop    esi
c0010424:	5f                   	pop    edi
c0010425:	5d                   	pop    ebp
c0010426:	c3                   	ret    
c0010427:	90                   	nop

c0010428 <VgaText::updateTitle()>:
c0010428:	53                   	push   ebx
c0010429:	31 c0                	xor    eax,eax
c001042b:	83 ec 58             	sub    esp,0x58
c001042e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010432:	89 e1                	mov    ecx,esp
c0010434:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010438:	40                   	inc    eax
c0010439:	83 f8 50             	cmp    eax,0x50
c001043c:	75 f6                	jne    c0010434 <VgaText::updateTitle()+0xc>
c001043e:	31 c0                	xor    eax,eax
c0010440:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010447:	84 db                	test   bl,bl
c0010449:	74 06                	je     c0010451 <VgaText::updateTitle()+0x29>
c001044b:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c001044e:	40                   	inc    eax
c001044f:	eb ef                	jmp    c0010440 <VgaText::updateTitle()+0x18>
c0010451:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010457:	85 c0                	test   eax,eax
c0010459:	74 09                	je     c0010464 <VgaText::updateTitle()+0x3c>
c001045b:	53                   	push   ebx
c001045c:	53                   	push   ebx
c001045d:	51                   	push   ecx
c001045e:	52                   	push   edx
c001045f:	ff d0                	call   eax
c0010461:	83 c4 10             	add    esp,0x10
c0010464:	e8 59 fe ff ff       	call   c00102c2 <VgaText::updateDiskUsage()>
c0010469:	83 c4 58             	add    esp,0x58
c001046c:	5b                   	pop    ebx
c001046d:	c3                   	ret    

c001046e <VgaText::setTitleTextColour(VgaColour)>:
c001046e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010472:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010476:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c001047c:	eb aa                	jmp    c0010428 <VgaText::updateTitle()>

c001047e <VgaText::setTitleColour(VgaColour)>:
c001047e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010482:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010486:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c001048c:	eb 9a                	jmp    c0010428 <VgaText::updateTitle()>

c001048e <VgaText::setTitle(char*)>:
c001048e:	53                   	push   ebx
c001048f:	83 ec 10             	sub    esp,0x10
c0010492:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001049a:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c00104a0:	50                   	push   eax
c00104a1:	e8 4e 03 ff ff       	call   c00007f4 <strcpy>
c00104a6:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00104aa:	83 c4 18             	add    esp,0x18
c00104ad:	5b                   	pop    ebx
c00104ae:	e9 75 ff ff ff       	jmp    c0010428 <VgaText::updateTitle()>
c00104b3:	90                   	nop

c00104b4 <VgaText::decrementCursor(bool)>:
c00104b4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00104b8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00104bc:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c00104c2:	85 c0                	test   eax,eax
c00104c4:	74 07                	je     c00104cd <VgaText::decrementCursor(bool)+0x19>
c00104c6:	48                   	dec    eax
c00104c7:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c00104cd:	84 c9                	test   cl,cl
c00104cf:	74 09                	je     c00104da <VgaText::decrementCursor(bool)+0x26>
c00104d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00104d5:	e9 64 fa ff ff       	jmp    c000ff3e <VgaText::updateCursor()>
c00104da:	c3                   	ret    
c00104db:	90                   	nop

c00104dc <VgaText::putchar(char, VgaColour, VgaColour)>:
c00104dc:	53                   	push   ebx
c00104dd:	83 ec 08             	sub    esp,0x8
c00104e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00104e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00104ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00104f0:	3c 07                	cmp    al,0x7
c00104f2:	75 2a                	jne    c001051e <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c00104f4:	a1 84 be 03 c0       	mov    eax,ds:0xc003be84
c00104f9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010501:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010509:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010511:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010515:	83 c4 08             	add    esp,0x8
c0010518:	5b                   	pop    ebx
c0010519:	e9 10 2c 00 00       	jmp    c001312e <Buzzer::beep(int, int, bool)>
c001051e:	3c 0d                	cmp    al,0xd
c0010520:	75 0c                	jne    c001052e <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010522:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001052c:	eb 3b                	jmp    c0010569 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c001052e:	3c 0a                	cmp    al,0xa
c0010530:	75 40                	jne    c0010572 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010532:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010538:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010542:	8d 50 01             	lea    edx,[eax+0x1]
c0010545:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001054b:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010551:	75 12                	jne    c0010565 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010553:	83 ec 0c             	sub    esp,0xc
c0010556:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001055c:	53                   	push   ebx
c001055d:	e8 2a fb ff ff       	call   c001008c <VgaText::scrollScreen()>
c0010562:	83 c4 10             	add    esp,0x10
c0010565:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010569:	83 c4 08             	add    esp,0x8
c001056c:	5b                   	pop    ebx
c001056d:	e9 cc f9 ff ff       	jmp    c000ff3e <VgaText::updateCursor()>
c0010572:	3c 08                	cmp    al,0x8
c0010574:	75 31                	jne    c00105a7 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010576:	50                   	push   eax
c0010577:	50                   	push   eax
c0010578:	6a 01                	push   0x1
c001057a:	53                   	push   ebx
c001057b:	e8 34 ff ff ff       	call   c00104b4 <VgaText::decrementCursor(bool)>
c0010580:	5a                   	pop    edx
c0010581:	59                   	pop    ecx
c0010582:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010588:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c001058e:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010594:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001059a:	6a 20                	push   0x20
c001059c:	53                   	push   ebx
c001059d:	e8 90 fb ff ff       	call   c0010132 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00105a2:	83 c4 28             	add    esp,0x28
c00105a5:	5b                   	pop    ebx
c00105a6:	c3                   	ret    
c00105a7:	83 ec 08             	sub    esp,0x8
c00105aa:	0f be c0             	movsx  eax,al
c00105ad:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00105b3:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00105b9:	51                   	push   ecx
c00105ba:	52                   	push   edx
c00105bb:	50                   	push   eax
c00105bc:	53                   	push   ebx
c00105bd:	e8 70 fb ff ff       	call   c0010132 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00105c2:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00105c6:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00105ce:	83 c4 28             	add    esp,0x28
c00105d1:	5b                   	pop    ebx
c00105d2:	e9 29 fc ff ff       	jmp    c0010200 <VgaText::incrementCursor(bool)>
c00105d7:	90                   	nop

c00105d8 <VgaText::isShowingCursor()>:
c00105d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105dc:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c00105e2:	c3                   	ret    
c00105e3:	90                   	nop

c00105e4 <VgaText::isBlinkDisabled()>:
c00105e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105e8:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c00105ee:	83 f0 01             	xor    eax,0x1
c00105f1:	c3                   	ret    

c00105f2 <VgaText::setCursorHeight(int)>:
c00105f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105fa:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010600:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010607:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001060b:	e9 48 f9 ff ff       	jmp    c000ff58 <VgaText::showCursor(bool)>

c0010610 <VgaText::getCursorHeight()>:
c0010610:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010614:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c001061a:	c3                   	ret    

c001061b <setActiveTerminal(VgaText*)>:
c001061b:	53                   	push   ebx
c001061c:	83 ec 08             	sub    esp,0x8
c001061f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010623:	85 db                	test   ebx,ebx
c0010625:	75 11                	jne    c0010638 <setActiveTerminal(VgaText*)+0x1d>
c0010627:	c7 44 24 10 74 93 03 c0 	mov    DWORD PTR [esp+0x10],0xc0039374
c001062f:	83 c4 08             	add    esp,0x8
c0010632:	5b                   	pop    ebx
c0010633:	e9 7a c9 ff ff       	jmp    c000cfb2 <panic(char const*)>
c0010638:	50                   	push   eax
c0010639:	50                   	push   eax
c001063a:	53                   	push   ebx
c001063b:	68 82 93 03 c0       	push   0xc0039382
c0010640:	e8 4f c8 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0010645:	a1 64 be 03 c0       	mov    eax,ds:0xc003be64
c001064a:	83 c4 10             	add    esp,0x10
c001064d:	85 c0                	test   eax,eax
c001064f:	74 0c                	je     c001065d <setActiveTerminal(VgaText*)+0x42>
c0010651:	83 ec 0c             	sub    esp,0xc
c0010654:	50                   	push   eax
c0010655:	e8 e4 f8 ff ff       	call   c000ff3e <VgaText::updateCursor()>
c001065a:	83 c4 10             	add    esp,0x10
c001065d:	89 1d 64 be 03 c0    	mov    DWORD PTR ds:0xc003be64,ebx
c0010663:	51                   	push   ecx
c0010664:	51                   	push   ecx
c0010665:	53                   	push   ebx
c0010666:	68 9a 93 03 c0       	push   0xc003939a
c001066b:	e8 24 c8 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0010670:	83 c4 0c             	add    esp,0xc
c0010673:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010679:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c001067f:	53                   	push   ebx
c0010680:	e8 25 fb ff ff       	call   c00101aa <VgaText::setCursor(int, int)>
c0010685:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010688:	e8 57 ff ff ff       	call   c00105e4 <VgaText::isBlinkDisabled()>
c001068d:	5a                   	pop    edx
c001068e:	0f b6 c0             	movzx  eax,al
c0010691:	59                   	pop    ecx
c0010692:	50                   	push   eax
c0010693:	53                   	push   ebx
c0010694:	e8 cf f8 ff ff       	call   c000ff68 <VgaText::disableBlink(bool)>
c0010699:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001069c:	e8 6f ff ff ff       	call   c0010610 <VgaText::getCursorHeight()>
c00106a1:	5a                   	pop    edx
c00106a2:	59                   	pop    ecx
c00106a3:	50                   	push   eax
c00106a4:	53                   	push   ebx
c00106a5:	e8 48 ff ff ff       	call   c00105f2 <VgaText::setCursorHeight(int)>
c00106aa:	83 c4 10             	add    esp,0x10
c00106ad:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00106b4:	75 0a                	jne    c00106c0 <setActiveTerminal(VgaText*)+0xa5>
c00106b6:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c00106c0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00106c4:	83 c4 08             	add    esp,0x8
c00106c7:	5b                   	pop    ebx
c00106c8:	e9 1d f8 ff ff       	jmp    c000feea <VgaText::load()>

c00106cd <doTerminalCycle()>:
c00106cd:	83 ec 18             	sub    esp,0x18
c00106d0:	a1 60 be 03 c0       	mov    eax,ds:0xc003be60
c00106d5:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c00106db:	50                   	push   eax
c00106dc:	a3 60 be 03 c0       	mov    ds:0xc003be60,eax
c00106e1:	e8 35 ff ff ff       	call   c001061b <setActiveTerminal(VgaText*)>
c00106e6:	83 c4 1c             	add    esp,0x1c
c00106e9:	c3                   	ret    

c00106ea <VgaText::doUpdate()>:
c00106ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ee:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c00106f4:	85 c0                	test   eax,eax
c00106f6:	74 02                	je     c00106fa <VgaText::doUpdate()+0x10>
c00106f8:	ff e0                	jmp    eax
c00106fa:	c3                   	ret    
c00106fb:	90                   	nop

c00106fc <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00106fc:	55                   	push   ebp
c00106fd:	57                   	push   edi
c00106fe:	56                   	push   esi
c00106ff:	53                   	push   ebx
c0010700:	83 ec 1c             	sub    esp,0x1c
c0010703:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010707:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001070c:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010713:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010716:	50                   	push   eax
c0010717:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001071c:	50                   	push   eax
c001071d:	e8 58 f9 ff ff       	call   c001007a <VgaText::combineColours(unsigned char, unsigned char)>
c0010722:	59                   	pop    ecx
c0010723:	0f b6 c0             	movzx  eax,al
c0010726:	5b                   	pop    ebx
c0010727:	31 c9                	xor    ecx,ecx
c0010729:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010731:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010735:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c001073b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001073f:	0f b7 db             	movzx  ebx,bx
c0010742:	01 db                	add    ebx,ebx
c0010744:	01 fb                	add    ebx,edi
c0010746:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010749:	84 c0                	test   al,al
c001074b:	0f 84 38 01 00 00    	je     c0010889 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010751:	3c 0d                	cmp    al,0xd
c0010753:	75 0f                	jne    c0010764 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010755:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c001075f:	e9 1f 01 00 00       	jmp    c0010883 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010764:	3c 0a                	cmp    al,0xa
c0010766:	75 5b                	jne    c00107c3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010768:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c001076e:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010778:	8d 48 01             	lea    ecx,[eax+0x1]
c001077b:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010781:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010787:	75 12                	jne    c001079b <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010789:	83 ec 0c             	sub    esp,0xc
c001078c:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010792:	55                   	push   ebp
c0010793:	e8 f4 f8 ff ff       	call   c001008c <VgaText::scrollScreen()>
c0010798:	83 c4 10             	add    esp,0x10
c001079b:	83 ec 0c             	sub    esp,0xc
c001079e:	55                   	push   ebp
c001079f:	e8 9a f7 ff ff       	call   c000ff3e <VgaText::updateCursor()>
c00107a4:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00107ac:	83 c4 10             	add    esp,0x10
c00107af:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00107b5:	31 c9                	xor    ecx,ecx
c00107b7:	0f b7 db             	movzx  ebx,bx
c00107ba:	01 db                	add    ebx,ebx
c00107bc:	01 fb                	add    ebx,edi
c00107be:	e9 c0 00 00 00       	jmp    c0010883 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00107c3:	3c 08                	cmp    al,0x8
c00107c5:	75 4e                	jne    c0010815 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c00107c7:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00107cb:	53                   	push   ebx
c00107cc:	53                   	push   ebx
c00107cd:	6a 01                	push   0x1
c00107cf:	55                   	push   ebp
c00107d0:	e8 df fc ff ff       	call   c00104b4 <VgaText::decrementCursor(bool)>
c00107d5:	58                   	pop    eax
c00107d6:	5a                   	pop    edx
c00107d7:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c00107dd:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c00107e3:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c00107e9:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c00107ef:	6a 20                	push   0x20
c00107f1:	55                   	push   ebp
c00107f2:	e8 3b f9 ff ff       	call   c0010132 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00107f7:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00107ff:	83 c4 20             	add    esp,0x20
c0010802:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010808:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001080c:	0f b7 db             	movzx  ebx,bx
c001080f:	01 db                	add    ebx,ebx
c0010811:	01 fb                	add    ebx,edi
c0010813:	eb 6e                	jmp    c0010883 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010815:	51                   	push   ecx
c0010816:	51                   	push   ecx
c0010817:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001081b:	50                   	push   eax
c001081c:	e8 ff f8 ff ff       	call   c0010120 <VgaText::combineCharAndColour(char, unsigned char)>
c0010821:	83 c4 10             	add    esp,0x10
c0010824:	66 89 03             	mov    WORD PTR [ebx],ax
c0010827:	39 2d 64 be 03 c0    	cmp    DWORD PTR ds:0xc003be64,ebp
c001082d:	75 2a                	jne    c0010859 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c001082f:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010835:	85 c0                	test   eax,eax
c0010837:	74 20                	je     c0010859 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010839:	52                   	push   edx
c001083a:	52                   	push   edx
c001083b:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010841:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010847:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001084b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001084f:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010852:	51                   	push   ecx
c0010853:	55                   	push   ebp
c0010854:	ff d0                	call   eax
c0010856:	83 c4 20             	add    esp,0x20
c0010859:	83 c3 02             	add    ebx,0x2
c001085c:	50                   	push   eax
c001085d:	50                   	push   eax
c001085e:	6a 00                	push   0x0
c0010860:	55                   	push   ebp
c0010861:	e8 9a f9 ff ff       	call   c0010200 <VgaText::incrementCursor(bool)>
c0010866:	83 c4 10             	add    esp,0x10
c0010869:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010870:	75 0f                	jne    c0010881 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010872:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c001087a:	0f b7 db             	movzx  ebx,bx
c001087d:	01 db                	add    ebx,ebx
c001087f:	01 fb                	add    ebx,edi
c0010881:	b1 01                	mov    cl,0x1
c0010883:	46                   	inc    esi
c0010884:	e9 bd fe ff ff       	jmp    c0010746 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010889:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001088d:	83 ec 0c             	sub    esp,0xc
c0010890:	55                   	push   ebp
c0010891:	e8 a8 f6 ff ff       	call   c000ff3e <VgaText::updateCursor()>
c0010896:	83 c4 10             	add    esp,0x10
c0010899:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001089d:	84 c9                	test   cl,cl
c001089f:	74 0c                	je     c00108ad <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c00108a1:	83 ec 0c             	sub    esp,0xc
c00108a4:	55                   	push   ebp
c00108a5:	e8 40 fe ff ff       	call   c00106ea <VgaText::doUpdate()>
c00108aa:	83 c4 10             	add    esp,0x10
c00108ad:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c00108b4:	83 c4 1c             	add    esp,0x1c
c00108b7:	5b                   	pop    ebx
c00108b8:	5e                   	pop    esi
c00108b9:	5f                   	pop    edi
c00108ba:	5d                   	pop    ebp
c00108bb:	c3                   	ret    

c00108bc <VgaText::clearScreen()>:
c00108bc:	57                   	push   edi
c00108bd:	56                   	push   esi
c00108be:	31 f6                	xor    esi,esi
c00108c0:	53                   	push   ebx
c00108c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108c5:	52                   	push   edx
c00108c6:	6a 00                	push   0x0
c00108c8:	6a 00                	push   0x0
c00108ca:	53                   	push   ebx
c00108cb:	e8 da f8 ff ff       	call   c00101aa <VgaText::setCursor(int, int)>
c00108d0:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c00108d7:	83 c4 10             	add    esp,0x10
c00108da:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c00108e0:	7e 26                	jle    c0010908 <VgaText::clearScreen()+0x4c>
c00108e2:	31 ff                	xor    edi,edi
c00108e4:	50                   	push   eax
c00108e5:	50                   	push   eax
c00108e6:	56                   	push   esi
c00108e7:	57                   	push   edi
c00108e8:	47                   	inc    edi
c00108e9:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00108ef:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00108f5:	6a 20                	push   0x20
c00108f7:	53                   	push   ebx
c00108f8:	e8 35 f8 ff ff       	call   c0010132 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108fd:	83 c4 20             	add    esp,0x20
c0010900:	83 ff 50             	cmp    edi,0x50
c0010903:	75 df                	jne    c00108e4 <VgaText::clearScreen()+0x28>
c0010905:	46                   	inc    esi
c0010906:	eb d2                	jmp    c00108da <VgaText::clearScreen()+0x1e>
c0010908:	83 ec 0c             	sub    esp,0xc
c001090b:	53                   	push   ebx
c001090c:	e8 d9 fd ff ff       	call   c00106ea <VgaText::doUpdate()>
c0010911:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010918:	83 c4 10             	add    esp,0x10
c001091b:	5b                   	pop    ebx
c001091c:	5e                   	pop    esi
c001091d:	5f                   	pop    edi
c001091e:	c3                   	ret    
c001091f:	90                   	nop

c0010920 <VgaText::putchar(char)>:
c0010920:	56                   	push   esi
c0010921:	53                   	push   ebx
c0010922:	83 ec 14             	sub    esp,0x14
c0010925:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010929:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001092d:	3c 5b                	cmp    al,0x5b
c001092f:	75 21                	jne    c0010952 <VgaText::putchar(char)+0x32>
c0010931:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010938:	74 28                	je     c0010962 <VgaText::putchar(char)+0x42>
c001093a:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010943:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c001094d:	e9 e2 00 00 00       	jmp    c0010a34 <VgaText::putchar(char)+0x114>
c0010952:	3c 1b                	cmp    al,0x1b
c0010954:	75 0c                	jne    c0010962 <VgaText::putchar(char)+0x42>
c0010956:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c001095d:	e9 d2 00 00 00       	jmp    c0010a34 <VgaText::putchar(char)+0x114>
c0010962:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010968:	84 c9                	test   cl,cl
c001096a:	0f 84 ab 00 00 00    	je     c0010a1b <VgaText::putchar(char)+0xfb>
c0010970:	8d 50 c0             	lea    edx,[eax-0x40]
c0010973:	80 fa 3e             	cmp    dl,0x3e
c0010976:	0f 87 82 00 00 00    	ja     c00109fe <VgaText::putchar(char)+0xde>
c001097c:	3c 6d                	cmp    al,0x6d
c001097e:	75 4d                	jne    c00109cd <VgaText::putchar(char)+0xad>
c0010980:	31 f6                	xor    esi,esi
c0010982:	31 d2                	xor    edx,edx
c0010984:	31 c0                	xor    eax,eax
c0010986:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c001098c:	7e 30                	jle    c00109be <VgaText::putchar(char)+0x9e>
c001098e:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010996:	80 fa 3b             	cmp    dl,0x3b
c0010999:	75 17                	jne    c00109b2 <VgaText::putchar(char)+0x92>
c001099b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001099f:	50                   	push   eax
c00109a0:	53                   	push   ebx
c00109a1:	e8 fc f5 ff ff       	call   c000ffa2 <VgaText::doANSI_SGR(int)>
c00109a6:	59                   	pop    ecx
c00109a7:	31 d2                	xor    edx,edx
c00109a9:	58                   	pop    eax
c00109aa:	31 c0                	xor    eax,eax
c00109ac:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00109b0:	eb 09                	jmp    c00109bb <VgaText::putchar(char)+0x9b>
c00109b2:	6b c0 0a             	imul   eax,eax,0xa
c00109b5:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00109b9:	88 ca                	mov    dl,cl
c00109bb:	46                   	inc    esi
c00109bc:	eb c8                	jmp    c0010986 <VgaText::putchar(char)+0x66>
c00109be:	84 d2                	test   dl,dl
c00109c0:	74 31                	je     c00109f3 <VgaText::putchar(char)+0xd3>
c00109c2:	50                   	push   eax
c00109c3:	53                   	push   ebx
c00109c4:	e8 d9 f5 ff ff       	call   c000ffa2 <VgaText::doANSI_SGR(int)>
c00109c9:	58                   	pop    eax
c00109ca:	5a                   	pop    edx
c00109cb:	eb 26                	jmp    c00109f3 <VgaText::putchar(char)+0xd3>
c00109cd:	3c 4a                	cmp    al,0x4a
c00109cf:	75 22                	jne    c00109f3 <VgaText::putchar(char)+0xd3>
c00109d1:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00109d8:	75 19                	jne    c00109f3 <VgaText::putchar(char)+0xd3>
c00109da:	83 ec 0c             	sub    esp,0xc
c00109dd:	53                   	push   ebx
c00109de:	e8 d9 fe ff ff       	call   c00108bc <VgaText::clearScreen()>
c00109e3:	83 c4 0c             	add    esp,0xc
c00109e6:	6a 00                	push   0x0
c00109e8:	6a 00                	push   0x0
c00109ea:	53                   	push   ebx
c00109eb:	e8 ba f7 ff ff       	call   c00101aa <VgaText::setCursor(int, int)>
c00109f0:	83 c4 10             	add    esp,0x10
c00109f3:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c00109fc:	eb 36                	jmp    c0010a34 <VgaText::putchar(char)+0x114>
c00109fe:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010a04:	83 fa 0e             	cmp    edx,0xe
c0010a07:	7f 2b                	jg     c0010a34 <VgaText::putchar(char)+0x114>
c0010a09:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010a0c:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010a12:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010a19:	eb 19                	jmp    c0010a34 <VgaText::putchar(char)+0x114>
c0010a1b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010a21:	0f be c0             	movsx  eax,al
c0010a24:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010a2a:	50                   	push   eax
c0010a2b:	53                   	push   ebx
c0010a2c:	e8 ab fa ff ff       	call   c00104dc <VgaText::putchar(char, VgaColour, VgaColour)>
c0010a31:	83 c4 10             	add    esp,0x10
c0010a34:	83 c4 14             	add    esp,0x14
c0010a37:	5b                   	pop    ebx
c0010a38:	5e                   	pop    esi
c0010a39:	c3                   	ret    

c0010a3a <VgaText::puts(char const*)>:
c0010a3a:	53                   	push   ebx
c0010a3b:	83 ec 08             	sub    esp,0x8
c0010a3e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010a42:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010a45:	84 c0                	test   al,al
c0010a47:	74 12                	je     c0010a5b <VgaText::puts(char const*)+0x21>
c0010a49:	43                   	inc    ebx
c0010a4a:	51                   	push   ecx
c0010a4b:	51                   	push   ecx
c0010a4c:	50                   	push   eax
c0010a4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a51:	e8 ca fe ff ff       	call   c0010920 <VgaText::putchar(char)>
c0010a56:	83 c4 10             	add    esp,0x10
c0010a59:	eb e7                	jmp    c0010a42 <VgaText::puts(char const*)+0x8>
c0010a5b:	83 c4 08             	add    esp,0x8
c0010a5e:	5b                   	pop    ebx
c0010a5f:	c3                   	ret    

c0010a60 <VgaText::putx(unsigned int)>:
c0010a60:	57                   	push   edi
c0010a61:	b9 11 00 00 00       	mov    ecx,0x11
c0010a66:	56                   	push   esi
c0010a67:	be b6 93 03 c0       	mov    esi,0xc00393b6
c0010a6c:	53                   	push   ebx
c0010a6d:	83 ec 20             	sub    esp,0x20
c0010a70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a74:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010a78:	fc                   	cld    
c0010a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010a7b:	be 08 00 00 00       	mov    esi,0x8
c0010a80:	50                   	push   eax
c0010a81:	50                   	push   eax
c0010a82:	89 d8                	mov    eax,ebx
c0010a84:	c1 e3 04             	shl    ebx,0x4
c0010a87:	c1 e8 1c             	shr    eax,0x1c
c0010a8a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010a8f:	50                   	push   eax
c0010a90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010a94:	e8 87 fe ff ff       	call   c0010920 <VgaText::putchar(char)>
c0010a99:	83 c4 10             	add    esp,0x10
c0010a9c:	4e                   	dec    esi
c0010a9d:	75 e1                	jne    c0010a80 <VgaText::putx(unsigned int)+0x20>
c0010a9f:	83 c4 20             	add    esp,0x20
c0010aa2:	5b                   	pop    ebx
c0010aa3:	5e                   	pop    esi
c0010aa4:	5f                   	pop    edi
c0010aa5:	c3                   	ret    

c0010aa6 <VgaText::VgaText(char const*)>:
c0010aa6:	57                   	push   edi
c0010aa7:	56                   	push   esi
c0010aa8:	53                   	push   ebx
c0010aa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aad:	83 ec 08             	sub    esp,0x8
c0010ab0:	6a 00                	push   0x0
c0010ab2:	50                   	push   eax
c0010ab3:	e8 b8 05 00 00       	call   c0011070 <UnixFile::UnixFile(int)>
c0010ab8:	83 c4 10             	add    esp,0x10
c0010abb:	ba 1c 94 03 c0       	mov    edx,0xc003941c
c0010ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ac4:	89 10                	mov    DWORD PTR [eax],edx
c0010ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aca:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010ad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ad8:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ae6:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010af1:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010afc:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b0a:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b18:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010b1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b23:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b2e:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010b34:	bb 40 be 03 c0       	mov    ebx,0xc003be40
c0010b39:	b8 08 00 00 00       	mov    eax,0x8
c0010b3e:	fc                   	cld    
c0010b3f:	89 d7                	mov    edi,edx
c0010b41:	89 de                	mov    esi,ebx
c0010b43:	89 c1                	mov    ecx,eax
c0010b45:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010b47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b4b:	05 1e 10 00 00       	add    eax,0x101e
c0010b50:	83 ec 08             	sub    esp,0x8
c0010b53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b57:	50                   	push   eax
c0010b58:	e8 97 fc fe ff       	call   c00007f4 <strcpy>
c0010b5d:	83 c4 10             	add    esp,0x10
c0010b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b64:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010b6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b72:	83 c0 0c             	add    eax,0xc
c0010b75:	83 ec 04             	sub    esp,0x4
c0010b78:	68 00 0f 00 00       	push   0xf00
c0010b7d:	6a 00                	push   0x0
c0010b7f:	50                   	push   eax
c0010b80:	e8 53 fb fe ff       	call   c00006d8 <memset>
c0010b85:	83 c4 10             	add    esp,0x10
c0010b88:	83 ec 04             	sub    esp,0x4
c0010b8b:	6a 00                	push   0x0
c0010b8d:	6a 07                	push   0x7
c0010b8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b93:	e8 c2 f4 ff ff       	call   c001005a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010b98:	83 c4 10             	add    esp,0x10
c0010b9b:	83 ec 08             	sub    esp,0x8
c0010b9e:	6a 02                	push   0x2
c0010ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ba4:	e8 49 fa ff ff       	call   c00105f2 <VgaText::setCursorHeight(int)>
c0010ba9:	83 c4 10             	add    esp,0x10
c0010bac:	83 ec 04             	sub    esp,0x4
c0010baf:	6a 00                	push   0x0
c0010bb1:	6a 00                	push   0x0
c0010bb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bb7:	e8 ee f5 ff ff       	call   c00101aa <VgaText::setCursor(int, int)>
c0010bbc:	83 c4 10             	add    esp,0x10
c0010bbf:	83 ec 08             	sub    esp,0x8
c0010bc2:	6a 01                	push   0x1
c0010bc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bc8:	e8 8b f3 ff ff       	call   c000ff58 <VgaText::showCursor(bool)>
c0010bcd:	83 c4 10             	add    esp,0x10
c0010bd0:	83 ec 08             	sub    esp,0x8
c0010bd3:	6a 01                	push   0x1
c0010bd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bd9:	e8 8a f3 ff ff       	call   c000ff68 <VgaText::disableBlink(bool)>
c0010bde:	83 c4 10             	add    esp,0x10
c0010be1:	83 ec 0c             	sub    esp,0xc
c0010be4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010be8:	e8 cf fc ff ff       	call   c00108bc <VgaText::clearScreen()>
c0010bed:	83 c4 10             	add    esp,0x10
c0010bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bf4:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010bfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bff:	05 9e 10 00 00       	add    eax,0x109e
c0010c04:	83 ec 04             	sub    esp,0x4
c0010c07:	68 96 00 00 00       	push   0x96
c0010c0c:	6a 00                	push   0x0
c0010c0e:	50                   	push   eax
c0010c0f:	e8 c4 fa fe ff       	call   c00006d8 <memset>
c0010c14:	83 c4 10             	add    esp,0x10
c0010c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c1b:	05 34 11 00 00       	add    eax,0x1134
c0010c20:	83 ec 04             	sub    esp,0x4
c0010c23:	68 2c 01 00 00       	push   0x12c
c0010c28:	6a 00                	push   0x0
c0010c2a:	50                   	push   eax
c0010c2b:	e8 a8 fa fe ff       	call   c00006d8 <memset>
c0010c30:	83 c4 10             	add    esp,0x10
c0010c33:	90                   	nop
c0010c34:	5b                   	pop    ebx
c0010c35:	5e                   	pop    esi
c0010c36:	5f                   	pop    edi
c0010c37:	c3                   	ret    

c0010c38 <VgaText::receiveKey(unsigned char)>:
c0010c38:	55                   	push   ebp
c0010c39:	57                   	push   edi
c0010c3a:	56                   	push   esi
c0010c3b:	53                   	push   ebx
c0010c3c:	83 ec 1c             	sub    esp,0x1c
c0010c3f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010c43:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c47:	84 db                	test   bl,bl
c0010c49:	0f 84 c9 00 00 00    	je     c0010d18 <VgaText::receiveKey(unsigned char)+0xe0>
c0010c4f:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010c55:	80 fb 08             	cmp    bl,0x8
c0010c58:	75 2c                	jne    c0010c86 <VgaText::receiveKey(unsigned char)+0x4e>
c0010c5a:	83 ec 0c             	sub    esp,0xc
c0010c5d:	57                   	push   edi
c0010c5e:	e8 9e fa fe ff       	call   c0000701 <strlen>
c0010c63:	83 c4 10             	add    esp,0x10
c0010c66:	85 c0                	test   eax,eax
c0010c68:	74 41                	je     c0010cab <VgaText::receiveKey(unsigned char)+0x73>
c0010c6a:	50                   	push   eax
c0010c6b:	50                   	push   eax
c0010c6c:	6a 08                	push   0x8
c0010c6e:	56                   	push   esi
c0010c6f:	e8 ac fc ff ff       	call   c0010920 <VgaText::putchar(char)>
c0010c74:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010c77:	e8 85 fa fe ff       	call   c0000701 <strlen>
c0010c7c:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010c84:	eb 22                	jmp    c0010ca8 <VgaText::receiveKey(unsigned char)+0x70>
c0010c86:	0f be c3             	movsx  eax,bl
c0010c89:	52                   	push   edx
c0010c8a:	52                   	push   edx
c0010c8b:	50                   	push   eax
c0010c8c:	56                   	push   esi
c0010c8d:	e8 8e fc ff ff       	call   c0010920 <VgaText::putchar(char)>
c0010c92:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010c96:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010c9b:	59                   	pop    ecx
c0010c9c:	5d                   	pop    ebp
c0010c9d:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010ca1:	50                   	push   eax
c0010ca2:	57                   	push   edi
c0010ca3:	e8 99 fc fe ff       	call   c0000941 <strcat>
c0010ca8:	83 c4 10             	add    esp,0x10
c0010cab:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010cb2:	75 05                	jne    c0010cb9 <VgaText::receiveKey(unsigned char)+0x81>
c0010cb4:	80 fb 0a             	cmp    bl,0xa
c0010cb7:	75 53                	jne    c0010d0c <VgaText::receiveKey(unsigned char)+0xd4>
c0010cb9:	83 ec 0c             	sub    esp,0xc
c0010cbc:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010cc2:	53                   	push   ebx
c0010cc3:	e8 39 fa fe ff       	call   c0000701 <strlen>
c0010cc8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ccb:	89 c5                	mov    ebp,eax
c0010ccd:	e8 2f fa fe ff       	call   c0000701 <strlen>
c0010cd2:	83 c4 10             	add    esp,0x10
c0010cd5:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010cd9:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010cde:	76 10                	jbe    c0010cf0 <VgaText::receiveKey(unsigned char)+0xb8>
c0010ce0:	83 ec 0c             	sub    esp,0xc
c0010ce3:	68 c7 93 03 c0       	push   0xc00393c7
c0010ce8:	e8 c5 c2 ff ff       	call   c000cfb2 <panic(char const*)>
c0010ced:	83 c4 10             	add    esp,0x10
c0010cf0:	50                   	push   eax
c0010cf1:	50                   	push   eax
c0010cf2:	57                   	push   edi
c0010cf3:	53                   	push   ebx
c0010cf4:	e8 48 fc fe ff       	call   c0000941 <strcat>
c0010cf9:	83 c4 0c             	add    esp,0xc
c0010cfc:	68 96 00 00 00       	push   0x96
c0010d01:	6a 00                	push   0x0
c0010d03:	57                   	push   edi
c0010d04:	e8 cf f9 fe ff       	call   c00006d8 <memset>
c0010d09:	83 c4 10             	add    esp,0x10
c0010d0c:	83 ec 0c             	sub    esp,0xc
c0010d0f:	56                   	push   esi
c0010d10:	e8 d5 f9 ff ff       	call   c00106ea <VgaText::doUpdate()>
c0010d15:	83 c4 10             	add    esp,0x10
c0010d18:	83 c4 1c             	add    esp,0x1c
c0010d1b:	5b                   	pop    ebx
c0010d1c:	5e                   	pop    esi
c0010d1d:	5f                   	pop    edi
c0010d1e:	5d                   	pop    ebp
c0010d1f:	c3                   	ret    

c0010d20 <VgaText::write(unsigned long long, void*, int*)>:
c0010d20:	55                   	push   ebp
c0010d21:	57                   	push   edi
c0010d22:	56                   	push   esi
c0010d23:	53                   	push   ebx
c0010d24:	83 ec 0c             	sub    esp,0xc
c0010d27:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010d2b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010d2f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d33:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010d3a:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010d3d:	39 eb                	cmp    ebx,ebp
c0010d3f:	74 13                	je     c0010d54 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010d41:	43                   	inc    ebx
c0010d42:	50                   	push   eax
c0010d43:	50                   	push   eax
c0010d44:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010d48:	50                   	push   eax
c0010d49:	56                   	push   esi
c0010d4a:	e8 d1 fb ff ff       	call   c0010920 <VgaText::putchar(char)>
c0010d4f:	83 c4 10             	add    esp,0x10
c0010d52:	eb e9                	jmp    c0010d3d <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010d54:	83 ec 0c             	sub    esp,0xc
c0010d57:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010d5e:	56                   	push   esi
c0010d5f:	e8 86 f9 ff ff       	call   c00106ea <VgaText::doUpdate()>
c0010d64:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010d68:	89 38                	mov    DWORD PTR [eax],edi
c0010d6a:	83 c4 1c             	add    esp,0x1c
c0010d6d:	31 c0                	xor    eax,eax
c0010d6f:	5b                   	pop    ebx
c0010d70:	5e                   	pop    esi
c0010d71:	5f                   	pop    edi
c0010d72:	5d                   	pop    ebp
c0010d73:	c3                   	ret    

c0010d74 <newTerminal(char*)>:
c0010d74:	83 ec 28             	sub    esp,0x28
c0010d77:	68 60 12 00 00       	push   0x1260
c0010d7c:	e8 c3 16 00 00       	call   c0012444 <operator new(unsigned long)>
c0010d81:	5a                   	pop    edx
c0010d82:	59                   	pop    ecx
c0010d83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010d87:	50                   	push   eax
c0010d88:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010d8c:	e8 15 fd ff ff       	call   c0010aa6 <VgaText::VgaText(char const*)>
c0010d91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010d95:	83 c4 2c             	add    esp,0x2c
c0010d98:	c3                   	ret    
c0010d99:	90                   	nop

c0010d9a <TSS::TSS()>:
c0010d9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d9e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010da5:	90                   	nop
c0010da6:	c3                   	ret    
c0010da7:	90                   	nop

c0010da8 <TSS::setESP(unsigned long)>:
c0010da8:	55                   	push   ebp
c0010da9:	89 e5                	mov    ebp,esp
c0010dab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010dae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010db1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010db4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010db7:	90                   	nop
c0010db8:	5d                   	pop    ebp
c0010db9:	c3                   	ret    

c0010dba <TSS::flush()>:
c0010dba:	55                   	push   ebp
c0010dbb:	89 e5                	mov    ebp,esp
c0010dbd:	83 ec 10             	sub    esp,0x10
c0010dc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010dc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0010dc5:	83 c8 03             	or     eax,0x3
c0010dc8:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010dcc:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010dd0:	66 89 d0             	mov    ax,dx
c0010dd3:	0f 00 d8             	ltr    ax
c0010dd6:	90                   	nop
c0010dd7:	c9                   	leave  
c0010dd8:	c3                   	ret    
c0010dd9:	90                   	nop

c0010dda <TSS::setup(unsigned long, unsigned long)>:
c0010dda:	55                   	push   ebp
c0010ddb:	89 e5                	mov    ebp,esp
c0010ddd:	53                   	push   ebx
c0010dde:	83 ec 14             	sub    esp,0x14
c0010de1:	83 ec 0c             	sub    esp,0xc
c0010de4:	6a 68                	push   0x68
c0010de6:	e8 a4 c6 ff ff       	call   c000d48f <malloc>
c0010deb:	83 c4 10             	add    esp,0x10
c0010dee:	89 c2                	mov    edx,eax
c0010df0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010df3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010df6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010df9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dfc:	83 ec 04             	sub    esp,0x4
c0010dff:	6a 68                	push   0x68
c0010e01:	6a 00                	push   0x0
c0010e03:	50                   	push   eax
c0010e04:	e8 cf f8 fe ff       	call   c00006d8 <memset>
c0010e09:	83 c4 10             	add    esp,0x10
c0010e0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e12:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010e18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e1e:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010e24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e27:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e2a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e2d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e36:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010e3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e3f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e42:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010e48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e4e:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010e54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e5a:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010e60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e66:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010e69:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010e6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e6f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e72:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e75:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010e78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e7e:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010e85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e88:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c0010e8b:	e8 29 db 00 00       	call   c001e9b9 <CPU::readCR3()>
c0010e90:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0010e93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e99:	83 ec 08             	sub    esp,0x8
c0010e9c:	50                   	push   eax
c0010e9d:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010ea0:	50                   	push   eax
c0010ea1:	e8 a6 b8 ff ff       	call   c000c74c <GDTEntry::setBase(unsigned int)>
c0010ea6:	83 c4 10             	add    esp,0x10
c0010ea9:	83 ec 08             	sub    esp,0x8
c0010eac:	6a 68                	push   0x68
c0010eae:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010eb1:	50                   	push   eax
c0010eb2:	e8 b1 b8 ff ff       	call   c000c768 <GDTEntry::setLimit(unsigned int)>
c0010eb7:	83 c4 10             	add    esp,0x10
c0010eba:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c0010ebe:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010ec1:	83 e0 0f             	and    eax,0xf
c0010ec4:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010ec7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010eca:	83 c8 40             	or     eax,0x40
c0010ecd:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010ed0:	e8 75 62 00 00       	call   c001714a <thisCPU()>
c0010ed5:	05 78 01 00 00       	add    eax,0x178
c0010eda:	83 ec 04             	sub    esp,0x4
c0010edd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0010ee0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010ee3:	50                   	push   eax
c0010ee4:	e8 b3 b8 ff ff       	call   c000c79c <GDT::addEntry(GDTEntry)>
c0010ee9:	83 c4 10             	add    esp,0x10
c0010eec:	89 c2                	mov    edx,eax
c0010eee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ef1:	89 10                	mov    DWORD PTR [eax],edx
c0010ef3:	e8 52 62 00 00       	call   c001714a <thisCPU()>
c0010ef8:	05 78 01 00 00       	add    eax,0x178
c0010efd:	83 ec 0c             	sub    esp,0xc
c0010f00:	50                   	push   eax
c0010f01:	e8 da b8 ff ff       	call   c000c7e0 <GDT::flush()>
c0010f06:	83 c4 10             	add    esp,0x10
c0010f09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f0e:	83 ec 08             	sub    esp,0x8
c0010f11:	50                   	push   eax
c0010f12:	68 30 94 03 c0       	push   0xc0039430
c0010f17:	e8 78 bf ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0010f1c:	83 c4 10             	add    esp,0x10
c0010f1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f22:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f24:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010f27:	c9                   	leave  
c0010f28:	c3                   	ret    
c0010f29:	90                   	nop

c0010f2a <ReservedFilename::isAtty()>:
c0010f2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f2e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010f31:	31 c0                	xor    eax,eax
c0010f33:	83 fa 08             	cmp    edx,0x8
c0010f36:	74 06                	je     c0010f3e <ReservedFilename::isAtty()+0x14>
c0010f38:	83 fa 06             	cmp    edx,0x6
c0010f3b:	0f 94 c0             	sete   al
c0010f3e:	c3                   	ret    
c0010f3f:	90                   	nop

c0010f40 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010f40:	55                   	push   ebp
c0010f41:	57                   	push   edi
c0010f42:	56                   	push   esi
c0010f43:	53                   	push   ebx
c0010f44:	83 ec 0c             	sub    esp,0xc
c0010f47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f4b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010f4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f52:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010f56:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0010f5a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010f5e:	83 f8 08             	cmp    eax,0x8
c0010f61:	75 08                	jne    c0010f6b <ReservedFilename::read(unsigned long long, void*, int*)+0x2b>
c0010f63:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010f69:	eb 5c                	jmp    c0010fc7 <ReservedFilename::read(unsigned long long, void*, int*)+0x87>
c0010f6b:	83 f8 06             	cmp    eax,0x6
c0010f6e:	75 3d                	jne    c0010fad <ReservedFilename::read(unsigned long long, void*, int*)+0x6d>
c0010f70:	83 ec 0c             	sub    esp,0xc
c0010f73:	68 4e 94 03 c0       	push   0xc003944e
c0010f78:	e8 17 bf ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0010f7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f82:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010f85:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010f8b:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f8d:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0010f91:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c0010f95:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c0010f99:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0010f9d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010fa1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0010fa4:	83 c4 1c             	add    esp,0x1c
c0010fa7:	5b                   	pop    ebx
c0010fa8:	5e                   	pop    esi
c0010fa9:	5f                   	pop    edi
c0010faa:	5d                   	pop    ebp
c0010fab:	ff e0                	jmp    eax
c0010fad:	89 c2                	mov    edx,eax
c0010faf:	83 e2 fd             	and    edx,0xfffffffd
c0010fb2:	83 fa 05             	cmp    edx,0x5
c0010fb5:	74 ac                	je     c0010f63 <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010fb7:	8d 50 f5             	lea    edx,[eax-0xb]
c0010fba:	83 fa 08             	cmp    edx,0x8
c0010fbd:	76 a4                	jbe    c0010f63 <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010fbf:	83 e8 15             	sub    eax,0x15
c0010fc2:	83 f8 08             	cmp    eax,0x8
c0010fc5:	76 9c                	jbe    c0010f63 <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010fc7:	83 c4 0c             	add    esp,0xc
c0010fca:	31 c0                	xor    eax,eax
c0010fcc:	5b                   	pop    ebx
c0010fcd:	5e                   	pop    esi
c0010fce:	5f                   	pop    edi
c0010fcf:	5d                   	pop    ebp
c0010fd0:	c3                   	ret    
c0010fd1:	90                   	nop

c0010fd2 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010fd2:	55                   	push   ebp
c0010fd3:	57                   	push   edi
c0010fd4:	56                   	push   esi
c0010fd5:	53                   	push   ebx
c0010fd6:	83 ec 0c             	sub    esp,0xc
c0010fd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fdd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010fe1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fe4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010fe8:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0010fec:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010ff0:	83 f8 08             	cmp    eax,0x8
c0010ff3:	75 08                	jne    c0010ffd <ReservedFilename::write(unsigned long long, void*, int*)+0x2b>
c0010ff5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010ffb:	eb 60                	jmp    c001105d <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c0010ffd:	83 f8 06             	cmp    eax,0x6
c0011000:	75 3d                	jne    c001103f <ReservedFilename::write(unsigned long long, void*, int*)+0x6d>
c0011002:	83 ec 0c             	sub    esp,0xc
c0011005:	68 5b 94 03 c0       	push   0xc003945b
c001100a:	e8 85 be ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001100f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011014:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011017:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001101d:	8b 10                	mov    edx,DWORD PTR [eax]
c001101f:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0011023:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c0011027:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c001102b:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c001102f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011033:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0011036:	83 c4 1c             	add    esp,0x1c
c0011039:	5b                   	pop    ebx
c001103a:	5e                   	pop    esi
c001103b:	5f                   	pop    edi
c001103c:	5d                   	pop    ebp
c001103d:	ff e0                	jmp    eax
c001103f:	83 f8 05             	cmp    eax,0x5
c0011042:	75 04                	jne    c0011048 <ReservedFilename::write(unsigned long long, void*, int*)+0x76>
c0011044:	89 33                	mov    DWORD PTR [ebx],esi
c0011046:	eb 15                	jmp    c001105d <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c0011048:	83 f8 07             	cmp    eax,0x7
c001104b:	74 a8                	je     c0010ff5 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c001104d:	8d 50 f5             	lea    edx,[eax-0xb]
c0011050:	83 fa 08             	cmp    edx,0x8
c0011053:	76 a0                	jbe    c0010ff5 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c0011055:	83 e8 15             	sub    eax,0x15
c0011058:	83 f8 08             	cmp    eax,0x8
c001105b:	76 98                	jbe    c0010ff5 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c001105d:	83 c4 0c             	add    esp,0xc
c0011060:	31 c0                	xor    eax,eax
c0011062:	5b                   	pop    ebx
c0011063:	5e                   	pop    esi
c0011064:	5f                   	pop    edi
c0011065:	5d                   	pop    ebp
c0011066:	c3                   	ret    
c0011067:	90                   	nop

c0011068 <UnixFile::getFileDescriptor()>:
c0011068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001106c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001106f:	c3                   	ret    

c0011070 <UnixFile::UnixFile(int)>:
c0011070:	83 ec 0c             	sub    esp,0xc
c0011073:	ba c0 94 03 c0       	mov    edx,0xc00394c0
c0011078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001107c:	89 10                	mov    DWORD PTR [eax],edx
c001107e:	a1 60 ae 03 c0       	mov    eax,ds:0xc003ae60
c0011083:	8d 50 01             	lea    edx,[eax+0x1]
c0011086:	89 15 60 ae 03 c0    	mov    DWORD PTR ds:0xc003ae60,edx
c001108c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011090:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011093:	83 ec 08             	sub    esp,0x8
c0011096:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001109a:	68 70 be 03 c0       	push   0xc003be70
c001109f:	e8 94 dc 00 00       	call   c001ed38 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00110a4:	83 c4 10             	add    esp,0x10
c00110a7:	90                   	nop
c00110a8:	83 c4 0c             	add    esp,0xc
c00110ab:	c3                   	ret    

c00110ac <ReservedFilename::ReservedFilename(int)>:
c00110ac:	83 ec 0c             	sub    esp,0xc
c00110af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b3:	83 ec 08             	sub    esp,0x8
c00110b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110ba:	50                   	push   eax
c00110bb:	e8 b0 ff ff ff       	call   c0011070 <UnixFile::UnixFile(int)>
c00110c0:	83 c4 10             	add    esp,0x10
c00110c3:	ba dc 94 03 c0       	mov    edx,0xc00394dc
c00110c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110cc:	89 10                	mov    DWORD PTR [eax],edx
c00110ce:	90                   	nop
c00110cf:	83 c4 0c             	add    esp,0xc
c00110d2:	c3                   	ret    
c00110d3:	90                   	nop

c00110d4 <UnixFile::~UnixFile()>:
c00110d4:	83 ec 1c             	sub    esp,0x1c
c00110d7:	ba c0 94 03 c0       	mov    edx,0xc00394c0
c00110dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110e0:	89 10                	mov    DWORD PTR [eax],edx
c00110e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00110ea:	83 ec 0c             	sub    esp,0xc
c00110ed:	68 70 be 03 c0       	push   0xc003be70
c00110f2:	e8 8f db 00 00       	call   c001ec86 <LinkedList<UnixFile>::getFirstElement()>
c00110f7:	83 c4 10             	add    esp,0x10
c00110fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00110fe:	83 ec 0c             	sub    esp,0xc
c0011101:	68 70 be 03 c0       	push   0xc003be70
c0011106:	e8 83 db 00 00       	call   c001ec8e <LinkedList<UnixFile>::removeFirst()>
c001110b:	83 c4 10             	add    esp,0x10
c001110e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011112:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011116:	74 3d                	je     c0011155 <UnixFile::~UnixFile()+0x81>
c0011118:	83 ec 08             	sub    esp,0x8
c001111b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001111f:	68 70 be 03 c0       	push   0xc003be70
c0011124:	e8 0f dc 00 00       	call   c001ed38 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011129:	83 c4 10             	add    esp,0x10
c001112c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011130:	8d 50 01             	lea    edx,[eax+0x1]
c0011133:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011137:	3d 88 13 00 00       	cmp    eax,0x1388
c001113c:	0f 94 c0             	sete   al
c001113f:	84 c0                	test   al,al
c0011141:	74 a7                	je     c00110ea <UnixFile::~UnixFile()+0x16>
c0011143:	83 ec 0c             	sub    esp,0xc
c0011146:	68 98 94 03 c0       	push   0xc0039498
c001114b:	e8 62 be ff ff       	call   c000cfb2 <panic(char const*)>
c0011150:	83 c4 10             	add    esp,0x10
c0011153:	eb 95                	jmp    c00110ea <UnixFile::~UnixFile()+0x16>
c0011155:	90                   	nop
c0011156:	83 c4 1c             	add    esp,0x1c
c0011159:	c3                   	ret    

c001115a <UnixFile::~UnixFile()>:
c001115a:	83 ec 0c             	sub    esp,0xc
c001115d:	83 ec 0c             	sub    esp,0xc
c0011160:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011164:	e8 6b ff ff ff       	call   c00110d4 <UnixFile::~UnixFile()>
c0011169:	83 c4 10             	add    esp,0x10
c001116c:	83 ec 08             	sub    esp,0x8
c001116f:	6a 0c                	push   0xc
c0011171:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011175:	e8 d9 12 00 00       	call   c0012453 <operator delete(void*, unsigned long)>
c001117a:	83 c4 10             	add    esp,0x10
c001117d:	83 c4 0c             	add    esp,0xc
c0011180:	c3                   	ret    
c0011181:	90                   	nop

c0011182 <ReservedFilename::~ReservedFilename()>:
c0011182:	83 ec 0c             	sub    esp,0xc
c0011185:	ba dc 94 03 c0       	mov    edx,0xc00394dc
c001118a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001118e:	89 10                	mov    DWORD PTR [eax],edx
c0011190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011194:	83 ec 0c             	sub    esp,0xc
c0011197:	50                   	push   eax
c0011198:	e8 37 ff ff ff       	call   c00110d4 <UnixFile::~UnixFile()>
c001119d:	83 c4 10             	add    esp,0x10
c00111a0:	90                   	nop
c00111a1:	83 c4 0c             	add    esp,0xc
c00111a4:	c3                   	ret    
c00111a5:	90                   	nop

c00111a6 <ReservedFilename::~ReservedFilename()>:
c00111a6:	83 ec 0c             	sub    esp,0xc
c00111a9:	83 ec 0c             	sub    esp,0xc
c00111ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111b0:	e8 cd ff ff ff       	call   c0011182 <ReservedFilename::~ReservedFilename()>
c00111b5:	83 c4 10             	add    esp,0x10
c00111b8:	83 ec 08             	sub    esp,0x8
c00111bb:	6a 0c                	push   0xc
c00111bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111c1:	e8 8d 12 00 00       	call   c0012453 <operator delete(void*, unsigned long)>
c00111c6:	83 c4 10             	add    esp,0x10
c00111c9:	83 c4 0c             	add    esp,0xc
c00111cc:	c3                   	ret    

c00111cd <getFromFileDescriptor(int)>:
c00111cd:	83 ec 18             	sub    esp,0x18
c00111d0:	68 70 be 03 c0       	push   0xc003be70
c00111d5:	e8 ac da 00 00       	call   c001ec86 <LinkedList<UnixFile>::getFirstElement()>
c00111da:	83 c4 10             	add    esp,0x10
c00111dd:	85 c0                	test   eax,eax
c00111df:	74 18                	je     c00111f9 <getFromFileDescriptor(int)+0x2c>
c00111e1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00111e5:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
c00111e8:	74 0f                	je     c00111f9 <getFromFileDescriptor(int)+0x2c>
c00111ea:	52                   	push   edx
c00111eb:	52                   	push   edx
c00111ec:	50                   	push   eax
c00111ed:	68 70 be 03 c0       	push   0xc003be70
c00111f2:	e8 39 db 00 00       	call   c001ed30 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00111f7:	eb e1                	jmp    c00111da <getFromFileDescriptor(int)+0xd>
c00111f9:	83 c4 0c             	add    esp,0xc
c00111fc:	c3                   	ret    

c00111fd <__static_initialization_and_destruction_0(int, int)>:
c00111fd:	83 ec 0c             	sub    esp,0xc
c0011200:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011205:	75 34                	jne    c001123b <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011207:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001120f:	75 2a                	jne    c001123b <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011211:	83 ec 0c             	sub    esp,0xc
c0011214:	68 70 be 03 c0       	push   0xc003be70
c0011219:	e8 10 da 00 00       	call   c001ec2e <LinkedList<UnixFile>::LinkedList()>
c001121e:	83 c4 10             	add    esp,0x10
c0011221:	83 ec 04             	sub    esp,0x4
c0011224:	68 e8 ad 03 c0       	push   0xc003ade8
c0011229:	68 70 be 03 c0       	push   0xc003be70
c001122e:	68 2c ec 01 c0       	push   0xc001ec2c
c0011233:	e8 97 11 00 00       	call   c00123cf <__cxa_atexit>
c0011238:	83 c4 10             	add    esp,0x10
c001123b:	90                   	nop
c001123c:	83 c4 0c             	add    esp,0xc
c001123f:	c3                   	ret    

c0011240 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011240:	83 ec 0c             	sub    esp,0xc
c0011243:	83 ec 08             	sub    esp,0x8
c0011246:	68 ff ff 00 00       	push   0xffff
c001124b:	6a 01                	push   0x1
c001124d:	e8 ab ff ff ff       	call   c00111fd <__static_initialization_and_destruction_0(int, int)>
c0011252:	83 c4 10             	add    esp,0x10
c0011255:	83 c4 0c             	add    esp,0xc
c0011258:	c3                   	ret    
c0011259:	90                   	nop

c001125a <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001125a:	53                   	push   ebx
c001125b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001125f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011263:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011269:	89 c8                	mov    eax,ecx
c001126b:	d1 e8                	shr    eax,1
c001126d:	03 05 68 ae 03 c0    	add    eax,DWORD PTR ds:0xc003ae68
c0011273:	83 e1 01             	and    ecx,0x1
c0011276:	8a 10                	mov    dl,BYTE PTR [eax]
c0011278:	75 09                	jne    c0011283 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c001127a:	83 e2 f0             	and    edx,0xfffffff0
c001127d:	09 da                	or     edx,ebx
c001127f:	88 10                	mov    BYTE PTR [eax],dl
c0011281:	5b                   	pop    ebx
c0011282:	c3                   	ret    
c0011283:	c1 e3 04             	shl    ebx,0x4
c0011286:	83 e2 0f             	and    edx,0xf
c0011289:	09 da                	or     edx,ebx
c001128b:	88 10                	mov    BYTE PTR [eax],dl
c001128d:	5b                   	pop    ebx
c001128e:	c3                   	ret    

c001128f <Virt::getPageState(unsigned long)>:
c001128f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011293:	8b 0d 68 ae 03 c0    	mov    ecx,DWORD PTR ds:0xc003ae68
c0011299:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001129f:	89 d0                	mov    eax,edx
c00112a1:	d1 e8                	shr    eax,1
c00112a3:	83 e2 01             	and    edx,0x1
c00112a6:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00112a9:	75 04                	jne    c00112af <Virt::getPageState(unsigned long)+0x20>
c00112ab:	83 e0 0f             	and    eax,0xf
c00112ae:	c3                   	ret    
c00112af:	c0 e8 04             	shr    al,0x4
c00112b2:	c3                   	ret    

c00112b3 <Virt::allocateKernelVirtualPages(int)>:
c00112b3:	55                   	push   ebp
c00112b4:	31 ed                	xor    ebp,ebp
c00112b6:	57                   	push   edi
c00112b7:	56                   	push   esi
c00112b8:	53                   	push   ebx
c00112b9:	31 db                	xor    ebx,ebx
c00112bb:	83 ec 1c             	sub    esp,0x1c
c00112be:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00112c2:	8b 3d 64 ae 03 c0    	mov    edi,DWORD PTR ds:0xc003ae64
c00112c8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00112cd:	57                   	push   edi
c00112ce:	e8 bc ff ff ff       	call   c001128f <Virt::getPageState(unsigned long)>
c00112d3:	5a                   	pop    edx
c00112d4:	84 c0                	test   al,al
c00112d6:	75 3a                	jne    c0011312 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00112d8:	85 db                	test   ebx,ebx
c00112da:	75 02                	jne    c00112de <Virt::allocateKernelVirtualPages(int)+0x2b>
c00112dc:	89 fd                	mov    ebp,edi
c00112de:	43                   	inc    ebx
c00112df:	39 f3                	cmp    ebx,esi
c00112e1:	74 5a                	je     c001133d <Virt::allocateKernelVirtualPages(int)+0x8a>
c00112e3:	47                   	inc    edi
c00112e4:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00112ea:	76 31                	jbe    c001131d <Virt::allocateKernelVirtualPages(int)+0x6a>
c00112ec:	c7 05 64 ae 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc003ae64,0xc8000
c00112f6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00112fb:	75 28                	jne    c0011325 <Virt::allocateKernelVirtualPages(int)+0x72>
c00112fd:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011302:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011307:	57                   	push   edi
c0011308:	e8 82 ff ff ff       	call   c001128f <Virt::getPageState(unsigned long)>
c001130d:	5a                   	pop    edx
c001130e:	84 c0                	test   al,al
c0011310:	74 c6                	je     c00112d8 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011312:	31 db                	xor    ebx,ebx
c0011314:	47                   	inc    edi
c0011315:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001131b:	77 cf                	ja     c00112ec <Virt::allocateKernelVirtualPages(int)+0x39>
c001131d:	89 3d 64 ae 03 c0    	mov    DWORD PTR ds:0xc003ae64,edi
c0011323:	eb a8                	jmp    c00112cd <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011325:	83 ec 0c             	sub    esp,0xc
c0011328:	68 f0 94 03 c0       	push   0xc00394f0
c001132d:	e8 80 bc ff ff       	call   c000cfb2 <panic(char const*)>
c0011332:	8b 3d 64 ae 03 c0    	mov    edi,DWORD PTR ds:0xc003ae64
c0011338:	83 c4 10             	add    esp,0x10
c001133b:	eb 90                	jmp    c00112cd <Virt::allocateKernelVirtualPages(int)+0x1a>
c001133d:	89 2d 64 ae 03 c0    	mov    DWORD PTR ds:0xc003ae64,ebp
c0011343:	4b                   	dec    ebx
c0011344:	74 5f                	je     c00113a5 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011346:	85 f6                	test   esi,esi
c0011348:	74 3d                	je     c0011387 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001134a:	89 e8                	mov    eax,ebp
c001134c:	31 db                	xor    ebx,ebx
c001134e:	8d 7e ff             	lea    edi,[esi-0x1]
c0011351:	eb 14                	jmp    c0011367 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011353:	6a 01                	push   0x1
c0011355:	43                   	inc    ebx
c0011356:	50                   	push   eax
c0011357:	e8 fe fe ff ff       	call   c001125a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001135c:	58                   	pop    eax
c001135d:	39 f3                	cmp    ebx,esi
c001135f:	5a                   	pop    edx
c0011360:	74 25                	je     c0011387 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011362:	a1 64 ae 03 c0       	mov    eax,ds:0xc003ae64
c0011367:	8d 50 01             	lea    edx,[eax+0x1]
c001136a:	85 db                	test   ebx,ebx
c001136c:	89 15 64 ae 03 c0    	mov    DWORD PTR ds:0xc003ae64,edx
c0011372:	74 20                	je     c0011394 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011374:	39 df                	cmp    edi,ebx
c0011376:	75 db                	jne    c0011353 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011378:	6a 03                	push   0x3
c001137a:	43                   	inc    ebx
c001137b:	50                   	push   eax
c001137c:	e8 d9 fe ff ff       	call   c001125a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011381:	59                   	pop    ecx
c0011382:	39 f3                	cmp    ebx,esi
c0011384:	58                   	pop    eax
c0011385:	75 db                	jne    c0011362 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011387:	83 c4 1c             	add    esp,0x1c
c001138a:	89 e8                	mov    eax,ebp
c001138c:	5b                   	pop    ebx
c001138d:	c1 e0 0c             	shl    eax,0xc
c0011390:	5e                   	pop    esi
c0011391:	5f                   	pop    edi
c0011392:	5d                   	pop    ebp
c0011393:	c3                   	ret    
c0011394:	6a 02                	push   0x2
c0011396:	bb 01 00 00 00       	mov    ebx,0x1
c001139b:	50                   	push   eax
c001139c:	e8 b9 fe ff ff       	call   c001125a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113a1:	58                   	pop    eax
c00113a2:	5a                   	pop    edx
c00113a3:	eb bd                	jmp    c0011362 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00113a5:	6a 04                	push   0x4
c00113a7:	8d 45 01             	lea    eax,[ebp+0x1]
c00113aa:	55                   	push   ebp
c00113ab:	a3 64 ae 03 c0       	mov    ds:0xc003ae64,eax
c00113b0:	e8 a5 fe ff ff       	call   c001125a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113b5:	59                   	pop    ecx
c00113b6:	89 e8                	mov    eax,ebp
c00113b8:	5b                   	pop    ebx
c00113b9:	c1 e0 0c             	shl    eax,0xc
c00113bc:	83 c4 1c             	add    esp,0x1c
c00113bf:	5b                   	pop    ebx
c00113c0:	5e                   	pop    esi
c00113c1:	5f                   	pop    edi
c00113c2:	5d                   	pop    ebp
c00113c3:	c3                   	ret    

c00113c4 <Virt::virtualMemorySetup()>:
c00113c4:	53                   	push   ebx
c00113c5:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113ca:	83 ec 08             	sub    esp,0x8
c00113cd:	6a 0f                	push   0xf
c00113cf:	53                   	push   ebx
c00113d0:	43                   	inc    ebx
c00113d1:	e8 84 fe ff ff       	call   c001125a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113d6:	59                   	pop    ecx
c00113d7:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113dd:	58                   	pop    eax
c00113de:	75 ed                	jne    c00113cd <Virt::virtualMemorySetup()+0x9>
c00113e0:	83 ec 08             	sub    esp,0x8
c00113e3:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113e8:	68 00 00 00 c8       	push   0xc8000000
c00113ed:	68 9b 96 03 c0       	push   0xc003969b
c00113f2:	e8 9d ba ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c00113f7:	58                   	pop    eax
c00113f8:	5a                   	pop    edx
c00113f9:	68 00 f0 ff ef       	push   0xeffff000
c00113fe:	68 af 96 03 c0       	push   0xc00396af
c0011403:	e8 8c ba ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0011408:	83 c4 10             	add    esp,0x10
c001140b:	83 ec 08             	sub    esp,0x8
c001140e:	6a 00                	push   0x0
c0011410:	53                   	push   ebx
c0011411:	43                   	inc    ebx
c0011412:	e8 43 fe ff ff       	call   c001125a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011417:	83 c4 10             	add    esp,0x10
c001141a:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011420:	75 e9                	jne    c001140b <Virt::virtualMemorySetup()+0x47>
c0011422:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011427:	83 ec 08             	sub    esp,0x8
c001142a:	6a 0f                	push   0xf
c001142c:	53                   	push   ebx
c001142d:	43                   	inc    ebx
c001142e:	e8 27 fe ff ff       	call   c001125a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011433:	83 c4 10             	add    esp,0x10
c0011436:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001143c:	75 e9                	jne    c0011427 <Virt::virtualMemorySetup()+0x63>
c001143e:	83 c4 08             	add    esp,0x8
c0011441:	5b                   	pop    ebx
c0011442:	c3                   	ret    

c0011443 <Virt::getAKernelVAS()>:
c0011443:	a1 7c be 03 c0       	mov    eax,ds:0xc003be7c
c0011448:	c3                   	ret    

c0011449 <Virt::setupPageSwapping(int)>:
c0011449:	57                   	push   edi
c001144a:	56                   	push   esi
c001144b:	53                   	push   ebx
c001144c:	83 ec 1c             	sub    esp,0x1c
c001144f:	68 14 01 00 00       	push   0x114
c0011454:	e8 eb 0f 00 00       	call   c0012444 <operator new(unsigned long)>
c0011459:	83 c4 0c             	add    esp,0xc
c001145c:	89 c6                	mov    esi,eax
c001145e:	ff 35 1c bc 03 c0    	push   DWORD PTR ds:0xc003bc1c
c0011464:	68 c3 96 03 c0       	push   0xc00396c3
c0011469:	50                   	push   eax
c001146a:	e8 03 14 00 00       	call   c0012872 <File::File(char const*, Process*)>
c001146f:	89 34 24             	mov    DWORD PTR [esp],esi
c0011472:	e8 d7 15 00 00       	call   c0012a4e <File::unlink()>
c0011477:	58                   	pop    eax
c0011478:	5a                   	pop    edx
c0011479:	6a 12                	push   0x12
c001147b:	56                   	push   esi
c001147c:	e8 55 14 00 00       	call   c00128d6 <File::open(FileOpenMode)>
c0011481:	83 c4 10             	add    esp,0x10
c0011484:	85 c0                	test   eax,eax
c0011486:	0f 85 bf 00 00 00    	jne    c001154b <Virt::setupPageSwapping(int)+0x102>
c001148c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011490:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011498:	c1 e3 08             	shl    ebx,0x8
c001149b:	83 ec 0c             	sub    esp,0xc
c001149e:	68 00 00 01 00       	push   0x10000
c00114a3:	e8 e7 bf ff ff       	call   c000d48f <malloc>
c00114a8:	83 c4 0c             	add    esp,0xc
c00114ab:	89 c7                	mov    edi,eax
c00114ad:	68 00 00 01 00       	push   0x10000
c00114b2:	6a 00                	push   0x0
c00114b4:	50                   	push   eax
c00114b5:	e8 1e f2 fe ff       	call   c00006d8 <memset>
c00114ba:	83 c4 10             	add    esp,0x10
c00114bd:	85 db                	test   ebx,ebx
c00114bf:	79 03                	jns    c00114c4 <Virt::setupPageSwapping(int)+0x7b>
c00114c1:	83 c3 0f             	add    ebx,0xf
c00114c4:	c1 fb 04             	sar    ebx,0x4
c00114c7:	4b                   	dec    ebx
c00114c8:	83 fb ff             	cmp    ebx,0xffffffff
c00114cb:	74 4b                	je     c0011518 <Virt::setupPageSwapping(int)+0xcf>
c00114cd:	83 ec 0c             	sub    esp,0xc
c00114d0:	8b 06                	mov    eax,DWORD PTR [esi]
c00114d2:	8d 54 24 18          	lea    edx,[esp+0x18]
c00114d6:	52                   	push   edx
c00114d7:	57                   	push   edi
c00114d8:	6a 00                	push   0x0
c00114da:	68 00 00 01 00       	push   0x10000
c00114df:	56                   	push   esi
c00114e0:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00114e3:	83 c4 20             	add    esp,0x20
c00114e6:	85 c0                	test   eax,eax
c00114e8:	75 4e                	jne    c0011538 <Virt::setupPageSwapping(int)+0xef>
c00114ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114ee:	3d 00 00 01 00       	cmp    eax,0x10000
c00114f3:	74 d2                	je     c00114c7 <Virt::setupPageSwapping(int)+0x7e>
c00114f5:	83 ec 08             	sub    esp,0x8
c00114f8:	4b                   	dec    ebx
c00114f9:	50                   	push   eax
c00114fa:	68 16 97 03 c0       	push   0xc0039716
c00114ff:	e8 90 b9 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0011504:	c7 04 24 1f 97 03 c0 	mov    DWORD PTR [esp],0xc003971f
c001150b:	e8 a2 ba ff ff       	call   c000cfb2 <panic(char const*)>
c0011510:	83 c4 10             	add    esp,0x10
c0011513:	83 fb ff             	cmp    ebx,0xffffffff
c0011516:	75 b5                	jne    c00114cd <Virt::setupPageSwapping(int)+0x84>
c0011518:	83 ec 0c             	sub    esp,0xc
c001151b:	56                   	push   esi
c001151c:	e8 13 14 00 00       	call   c0012934 <File::close()>
c0011521:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011524:	e8 86 bf ff ff       	call   c000d4af <rfree>
c0011529:	89 34 24             	mov    DWORD PTR [esp],esi
c001152c:	8b 06                	mov    eax,DWORD PTR [esi]
c001152e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011531:	83 c4 20             	add    esp,0x20
c0011534:	5b                   	pop    ebx
c0011535:	5e                   	pop    esi
c0011536:	5f                   	pop    edi
c0011537:	c3                   	ret    
c0011538:	83 ec 08             	sub    esp,0x8
c001153b:	50                   	push   eax
c001153c:	68 fe 96 03 c0       	push   0xc00396fe
c0011541:	e8 4e b9 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0011546:	83 c4 10             	add    esp,0x10
c0011549:	eb 9f                	jmp    c00114ea <Virt::setupPageSwapping(int)+0xa1>
c001154b:	83 ec 08             	sub    esp,0x8
c001154e:	50                   	push   eax
c001154f:	68 da 96 03 c0       	push   0xc00396da
c0011554:	e8 3b b9 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0011559:	c7 04 24 e3 96 03 c0 	mov    DWORD PTR [esp],0xc00396e3
c0011560:	e8 4d ba ff ff       	call   c000cfb2 <panic(char const*)>
c0011565:	83 c4 10             	add    esp,0x10
c0011568:	e9 1f ff ff ff       	jmp    c001148c <Virt::setupPageSwapping(int)+0x43>
c001156d:	90                   	nop

c001156e <VAS::VAS()>:
c001156e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011572:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011579:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001157d:	a3 7c be 03 c0       	mov    ds:0xc003be7c,eax
c0011582:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011586:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001158a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001158e:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011591:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011595:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c001159c:	90                   	nop
c001159d:	c3                   	ret    

c001159e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001159e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115a2:	89 c2                	mov    edx,eax
c00115a4:	c1 e8 0a             	shr    eax,0xa
c00115a7:	c1 ea 16             	shr    edx,0x16
c00115aa:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00115af:	19 c9                	sbb    ecx,ecx
c00115b1:	c1 e2 0c             	shl    edx,0xc
c00115b4:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00115ba:	25 fc 0f 00 00       	and    eax,0xffc
c00115bf:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00115c6:	01 d0                	add    eax,edx
c00115c8:	c3                   	ret    
c00115c9:	90                   	nop

c00115ca <VAS::getPageTableEntry(unsigned long)>:
c00115ca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115ce:	89 ca                	mov    edx,ecx
c00115d0:	c1 e9 0a             	shr    ecx,0xa
c00115d3:	c1 ea 16             	shr    edx,0x16
c00115d6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00115dc:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00115e2:	c1 e0 0c             	shl    eax,0xc
c00115e5:	8d 04 08             	lea    eax,[eax+ecx*1]
c00115e8:	c3                   	ret    

c00115e9 <Virt::freeKernelVirtualPages(unsigned long)>:
c00115e9:	57                   	push   edi
c00115ea:	56                   	push   esi
c00115eb:	be 01 00 00 00       	mov    esi,0x1
c00115f0:	53                   	push   ebx
c00115f1:	83 ec 10             	sub    esp,0x10
c00115f4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00115f8:	c1 eb 0c             	shr    ebx,0xc
c00115fb:	eb 3f                	jmp    c001163c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00115fd:	e8 41 fe ff ff       	call   c0011443 <Virt::getAKernelVAS()>
c0011602:	83 ec 08             	sub    esp,0x8
c0011605:	57                   	push   edi
c0011606:	50                   	push   eax
c0011607:	e8 be ff ff ff       	call   c00115ca <VAS::getPageTableEntry(unsigned long)>
c001160c:	83 c4 10             	add    esp,0x10
c001160f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011611:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011615:	f6 c4 04             	test   ah,0x4
c0011618:	75 5f                	jne    c0011679 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c001161a:	80 fa 04             	cmp    dl,0x4
c001161d:	74 78                	je     c0011697 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001161f:	80 fa 02             	cmp    dl,0x2
c0011622:	0f 84 88 00 00 00    	je     c00116b0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011628:	80 fa 03             	cmp    dl,0x3
c001162b:	0f 84 ad 00 00 00    	je     c00116de <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011631:	fe ca                	dec    dl
c0011633:	0f 84 92 00 00 00    	je     c00116cb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011639:	43                   	inc    ebx
c001163a:	31 f6                	xor    esi,esi
c001163c:	53                   	push   ebx
c001163d:	e8 4d fc ff ff       	call   c001128f <Virt::getPageState(unsigned long)>
c0011642:	5f                   	pop    edi
c0011643:	89 df                	mov    edi,ebx
c0011645:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011649:	c1 e7 0c             	shl    edi,0xc
c001164c:	84 c0                	test   al,al
c001164e:	75 ad                	jne    c00115fd <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011650:	83 ec 0c             	sub    esp,0xc
c0011653:	68 25 97 03 c0       	push   0xc0039725
c0011658:	e8 55 b9 ff ff       	call   c000cfb2 <panic(char const*)>
c001165d:	e8 e1 fd ff ff       	call   c0011443 <Virt::getAKernelVAS()>
c0011662:	5a                   	pop    edx
c0011663:	59                   	pop    ecx
c0011664:	57                   	push   edi
c0011665:	50                   	push   eax
c0011666:	e8 5f ff ff ff       	call   c00115ca <VAS::getPageTableEntry(unsigned long)>
c001166b:	83 c4 10             	add    esp,0x10
c001166e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011670:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011674:	f6 c4 04             	test   ah,0x4
c0011677:	74 c0                	je     c0011639 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011679:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001167d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011682:	83 ec 0c             	sub    esp,0xc
c0011685:	50                   	push   eax
c0011686:	e8 24 c3 ff ff       	call   c000d9af <Phys::freePage(unsigned long)>
c001168b:	83 c4 10             	add    esp,0x10
c001168e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011692:	80 fa 04             	cmp    dl,0x4
c0011695:	75 88                	jne    c001161f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011697:	89 f0                	mov    eax,esi
c0011699:	84 c0                	test   al,al
c001169b:	75 47                	jne    c00116e4 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c001169d:	c7 44 24 20 10 95 03 c0 	mov    DWORD PTR [esp+0x20],0xc0039510
c00116a5:	83 c4 10             	add    esp,0x10
c00116a8:	5b                   	pop    ebx
c00116a9:	5e                   	pop    esi
c00116aa:	5f                   	pop    edi
c00116ab:	e9 02 b9 ff ff       	jmp    c000cfb2 <panic(char const*)>
c00116b0:	89 f0                	mov    eax,esi
c00116b2:	84 c0                	test   al,al
c00116b4:	75 15                	jne    c00116cb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116b6:	83 ec 0c             	sub    esp,0xc
c00116b9:	68 41 97 03 c0       	push   0xc0039741
c00116be:	e8 ef b8 ff ff       	call   c000cfb2 <panic(char const*)>
c00116c3:	83 c4 10             	add    esp,0x10
c00116c6:	e9 6e ff ff ff       	jmp    c0011639 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116cb:	83 ec 08             	sub    esp,0x8
c00116ce:	6a 00                	push   0x0
c00116d0:	53                   	push   ebx
c00116d1:	e8 84 fb ff ff       	call   c001125a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116d6:	83 c4 10             	add    esp,0x10
c00116d9:	e9 5b ff ff ff       	jmp    c0011639 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116de:	89 f0                	mov    eax,esi
c00116e0:	84 c0                	test   al,al
c00116e2:	75 15                	jne    c00116f9 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00116e4:	83 ec 08             	sub    esp,0x8
c00116e7:	6a 00                	push   0x0
c00116e9:	53                   	push   ebx
c00116ea:	e8 6b fb ff ff       	call   c001125a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116ef:	83 c4 10             	add    esp,0x10
c00116f2:	83 c4 10             	add    esp,0x10
c00116f5:	5b                   	pop    ebx
c00116f6:	5e                   	pop    esi
c00116f7:	5f                   	pop    edi
c00116f8:	c3                   	ret    
c00116f9:	c7 44 24 20 5d 97 03 c0 	mov    DWORD PTR [esp+0x20],0xc003975d
c0011701:	83 c4 10             	add    esp,0x10
c0011704:	5b                   	pop    ebx
c0011705:	5e                   	pop    esi
c0011706:	5f                   	pop    edi
c0011707:	e9 a6 b8 ff ff       	jmp    c000cfb2 <panic(char const*)>

c001170c <VAS::freeAllocatedPages(unsigned long)>:
c001170c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011710:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011714:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011718:	74 09                	je     c0011723 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001171a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001171e:	e9 c6 fe ff ff       	jmp    c00115e9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011723:	c7 44 24 04 34 95 03 c0 	mov    DWORD PTR [esp+0x4],0xc0039534
c001172b:	e9 64 b7 ff ff       	jmp    c000ce94 <kprintf(char const*, ...)>

c0011730 <VAS::virtualToPhysical(unsigned long)>:
c0011730:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011734:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011738:	e8 8d fe ff ff       	call   c00115ca <VAS::getPageTableEntry(unsigned long)>
c001173d:	5a                   	pop    edx
c001173e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011740:	59                   	pop    ecx
c0011741:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011746:	c3                   	ret    
c0011747:	90                   	nop

c0011748 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011748:	83 ec 0c             	sub    esp,0xc
c001174b:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0011750:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011754:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001175b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c001175e:	19 c0                	sbb    eax,eax
c0011760:	83 ca 03             	or     edx,0x3
c0011763:	83 e0 fc             	and    eax,0xfffffffc
c0011766:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c001176d:	e8 47 d2 00 00       	call   c001e9b9 <CPU::readCR3()>
c0011772:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011776:	83 c4 0c             	add    esp,0xc
c0011779:	e9 5f d2 00 00       	jmp    c001e9dd <CPU::writeCR3(unsigned long)>

c001177e <VAS::~VAS()>:
c001177e:	83 ec 2c             	sub    esp,0x2c
c0011781:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011789:	e8 a8 cb ff ff       	call   c000e336 <lockScheduler()>
c001178e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011793:	8b 00                	mov    eax,DWORD PTR [eax]
c0011795:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011798:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001179e:	83 ec 04             	sub    esp,0x4
c00117a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00117a5:	6a 01                	push   0x1
c00117a7:	50                   	push   eax
c00117a8:	e8 9b ff ff ff       	call   c0011748 <VAS::mapOtherVASIn(bool, VAS*)>
c00117ad:	83 c4 10             	add    esp,0x10
c00117b0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00117b8:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00117c0:	0f 8f d7 00 00 00    	jg     c001189d <VAS::~VAS()+0x11f>
c00117c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00117ca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00117cd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00117d1:	c1 e2 02             	shl    edx,0x2
c00117d4:	01 d0                	add    eax,edx
c00117d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00117d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00117dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117e0:	83 e0 01             	and    eax,0x1
c00117e3:	0f 84 ab 00 00 00    	je     c0011894 <VAS::~VAS()+0x116>
c00117e9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00117f1:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00117f9:	7f 75                	jg     c0011870 <VAS::~VAS()+0xf2>
c00117fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117ff:	c1 e0 0a             	shl    eax,0xa
c0011802:	89 c2                	mov    edx,eax
c0011804:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011808:	01 d0                	add    eax,edx
c001180a:	c1 e0 0c             	shl    eax,0xc
c001180d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011811:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011816:	8b 00                	mov    eax,DWORD PTR [eax]
c0011818:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001181b:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011821:	83 ec 04             	sub    esp,0x4
c0011824:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011828:	6a 01                	push   0x1
c001182a:	50                   	push   eax
c001182b:	e8 6e fd ff ff       	call   c001159e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011830:	83 c4 10             	add    esp,0x10
c0011833:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011837:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001183b:	8b 00                	mov    eax,DWORD PTR [eax]
c001183d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011841:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011845:	25 01 04 00 00       	and    eax,0x401
c001184a:	3d 01 04 00 00       	cmp    eax,0x401
c001184f:	75 19                	jne    c001186a <VAS::~VAS()+0xec>
c0011851:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011855:	25 00 f0 ff ff       	and    eax,0xfffff000
c001185a:	83 ec 0c             	sub    esp,0xc
c001185d:	50                   	push   eax
c001185e:	e8 4c c1 ff ff       	call   c000d9af <Phys::freePage(unsigned long)>
c0011863:	83 c4 10             	add    esp,0x10
c0011866:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001186a:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001186e:	eb 81                	jmp    c00117f1 <VAS::~VAS()+0x73>
c0011870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011874:	25 00 04 00 00       	and    eax,0x400
c0011879:	74 19                	je     c0011894 <VAS::~VAS()+0x116>
c001187b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001187f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011884:	83 ec 0c             	sub    esp,0xc
c0011887:	50                   	push   eax
c0011888:	e8 22 c1 ff ff       	call   c000d9af <Phys::freePage(unsigned long)>
c001188d:	83 c4 10             	add    esp,0x10
c0011890:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011894:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011898:	e9 1b ff ff ff       	jmp    c00117b8 <VAS::~VAS()+0x3a>
c001189d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118a1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00118a4:	83 ec 0c             	sub    esp,0xc
c00118a7:	50                   	push   eax
c00118a8:	e8 3c fd ff ff       	call   c00115e9 <Virt::freeKernelVirtualPages(unsigned long)>
c00118ad:	83 c4 10             	add    esp,0x10
c00118b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00118b7:	83 ec 0c             	sub    esp,0xc
c00118ba:	50                   	push   eax
c00118bb:	e8 ef c0 ff ff       	call   c000d9af <Phys::freePage(unsigned long)>
c00118c0:	83 c4 10             	add    esp,0x10
c00118c3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118cb:	c1 e0 02             	shl    eax,0x2
c00118ce:	83 ec 08             	sub    esp,0x8
c00118d1:	50                   	push   eax
c00118d2:	68 58 95 03 c0       	push   0xc0039558
c00118d7:	e8 b8 b5 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c00118dc:	83 c4 10             	add    esp,0x10
c00118df:	e8 54 ca ff ff       	call   c000e338 <unlockScheduler()>
c00118e4:	90                   	nop
c00118e5:	83 c4 2c             	add    esp,0x2c
c00118e8:	c3                   	ret    
c00118e9:	90                   	nop

c00118ea <VAS::mapPage(unsigned long, unsigned long, int)>:
c00118ea:	55                   	push   ebp
c00118eb:	57                   	push   edi
c00118ec:	56                   	push   esi
c00118ed:	53                   	push   ebx
c00118ee:	83 ec 1c             	sub    esp,0x1c
c00118f1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00118f5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00118f9:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00118ff:	77 08                	ja     c0011909 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011901:	0f 20 d8             	mov    eax,cr3
c0011904:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011907:	75 47                	jne    c0011950 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011909:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001190d:	09 d8                	or     eax,ebx
c001190f:	a9 ff 0f 00 00       	test   eax,0xfff
c0011914:	75 57                	jne    c001196d <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011916:	89 de                	mov    esi,ebx
c0011918:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001191b:	c1 ee 16             	shr    esi,0x16
c001191e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011925:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011929:	74 54                	je     c001197f <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c001192b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001192f:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011935:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011939:	c1 e6 0c             	shl    esi,0xc
c001193c:	c1 eb 0a             	shr    ebx,0xa
c001193f:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011945:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011948:	83 c4 1c             	add    esp,0x1c
c001194b:	5b                   	pop    ebx
c001194c:	5e                   	pop    esi
c001194d:	5f                   	pop    edi
c001194e:	5d                   	pop    ebp
c001194f:	c3                   	ret    
c0011950:	83 ec 0c             	sub    esp,0xc
c0011953:	68 78 95 03 c0       	push   0xc0039578
c0011958:	e8 37 b5 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001195d:	83 c4 10             	add    esp,0x10
c0011960:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011964:	09 d8                	or     eax,ebx
c0011966:	a9 ff 0f 00 00       	test   eax,0xfff
c001196b:	74 a9                	je     c0011916 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001196d:	83 ec 0c             	sub    esp,0xc
c0011970:	68 e0 95 03 c0       	push   0xc00395e0
c0011975:	e8 38 b6 ff ff       	call   c000cfb2 <panic(char const*)>
c001197a:	83 c4 10             	add    esp,0x10
c001197d:	eb 97                	jmp    c0011916 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001197f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011983:	e8 b1 c0 ff ff       	call   c000da39 <Phys::allocatePage()>
c0011988:	89 c5                	mov    ebp,eax
c001198a:	e8 b4 fa ff ff       	call   c0011443 <Virt::getAKernelVAS()>
c001198f:	83 ec 0c             	sub    esp,0xc
c0011992:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011996:	6a 01                	push   0x1
c0011998:	e8 16 f9 ff ff       	call   c00112b3 <Virt::allocateKernelVirtualPages(int)>
c001199d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00119a4:	6a 01                	push   0x1
c00119a6:	50                   	push   eax
c00119a7:	55                   	push   ebp
c00119a8:	81 cd 07 04 00 00    	or     ebp,0x407
c00119ae:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00119b2:	51                   	push   ecx
c00119b3:	e8 1e 02 00 00       	call   c0011bd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00119b8:	83 c4 1c             	add    esp,0x1c
c00119bb:	68 00 10 00 00       	push   0x1000
c00119c0:	6a 00                	push   0x0
c00119c2:	50                   	push   eax
c00119c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00119c7:	e8 0c ed fe ff       	call   c00006d8 <memset>
c00119cc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00119d0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00119d3:	e8 11 fc ff ff       	call   c00115e9 <Virt::freeKernelVirtualPages(unsigned long)>
c00119d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00119dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00119df:	83 c4 10             	add    esp,0x10
c00119e2:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00119e5:	e9 41 ff ff ff       	jmp    c001192b <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00119ea <VAS::allocatePages(int, int)>:
c00119ea:	55                   	push   ebp
c00119eb:	57                   	push   edi
c00119ec:	56                   	push   esi
c00119ed:	53                   	push   ebx
c00119ee:	83 ec 1c             	sub    esp,0x1c
c00119f1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00119f5:	e8 50 57 00 00       	call   c001714a <thisCPU()>
c00119fa:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011a00:	83 e0 01             	and    eax,0x1
c0011a03:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011a07:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011a0b:	0f 85 d7 00 00 00    	jne    c0011ae8 <VAS::allocatePages(int, int)+0xfe>
c0011a11:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011a14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a18:	85 c0                	test   eax,eax
c0011a1a:	0f 84 ac 00 00 00    	je     c0011acc <VAS::allocatePages(int, int)+0xe2>
c0011a20:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011a24:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a28:	c1 e6 0c             	shl    esi,0xc
c0011a2b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011a2f:	85 c0                	test   eax,eax
c0011a31:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011a34:	7e 33                	jle    c0011a69 <VAS::allocatePages(int, int)+0x7f>
c0011a36:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011a3a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011a3e:	81 cd 00 04 00 00    	or     ebp,0x400
c0011a44:	e8 f0 bf ff ff       	call   c000da39 <Phys::allocatePage()>
c0011a49:	55                   	push   ebp
c0011a4a:	53                   	push   ebx
c0011a4b:	50                   	push   eax
c0011a4c:	57                   	push   edi
c0011a4d:	e8 98 fe ff ff       	call   c00118ea <VAS::mapPage(unsigned long, unsigned long, int)>
c0011a52:	83 c4 10             	add    esp,0x10
c0011a55:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011a5a:	74 03                	je     c0011a5f <VAS::allocatePages(int, int)+0x75>
c0011a5c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011a5f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011a65:	39 de                	cmp    esi,ebx
c0011a67:	75 db                	jne    c0011a44 <VAS::allocatePages(int, int)+0x5a>
c0011a69:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011a6e:	74 3f                	je     c0011aaf <VAS::allocatePages(int, int)+0xc5>
c0011a70:	c1 ee 0a             	shr    esi,0xa
c0011a73:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011a77:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011a7d:	c1 eb 0a             	shr    ebx,0xa
c0011a80:	81 ee 00 00 40 00    	sub    esi,0x400000
c0011a86:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011a8c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011a92:	39 f3                	cmp    ebx,esi
c0011a94:	77 0d                	ja     c0011aa3 <VAS::allocatePages(int, int)+0xb9>
c0011a96:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011a99:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011a9f:	39 de                	cmp    esi,ebx
c0011aa1:	73 f3                	jae    c0011a96 <VAS::allocatePages(int, int)+0xac>
c0011aa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011aa7:	83 c4 1c             	add    esp,0x1c
c0011aaa:	5b                   	pop    ebx
c0011aab:	5e                   	pop    esi
c0011aac:	5f                   	pop    edi
c0011aad:	5d                   	pop    ebp
c0011aae:	c3                   	ret    
c0011aaf:	e8 05 cf 00 00       	call   c001e9b9 <CPU::readCR3()>
c0011ab4:	83 ec 0c             	sub    esp,0xc
c0011ab7:	50                   	push   eax
c0011ab8:	e8 20 cf 00 00       	call   c001e9dd <CPU::writeCR3(unsigned long)>
c0011abd:	83 c4 10             	add    esp,0x10
c0011ac0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ac4:	83 c4 1c             	add    esp,0x1c
c0011ac7:	5b                   	pop    ebx
c0011ac8:	5e                   	pop    esi
c0011ac9:	5f                   	pop    edi
c0011aca:	5d                   	pop    ebp
c0011acb:	c3                   	ret    
c0011acc:	83 ec 0c             	sub    esp,0xc
c0011acf:	68 04 96 03 c0       	push   0xc0039604
c0011ad4:	e8 d9 b4 ff ff       	call   c000cfb2 <panic(char const*)>
c0011ad9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011adc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011ae0:	83 c4 10             	add    esp,0x10
c0011ae3:	e9 38 ff ff ff       	jmp    c0011a20 <VAS::allocatePages(int, int)+0x36>
c0011ae8:	83 ec 0c             	sub    esp,0xc
c0011aeb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011aef:	e8 bf f7 ff ff       	call   c00112b3 <Virt::allocateKernelVirtualPages(int)>
c0011af4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011af8:	83 c4 10             	add    esp,0x10
c0011afb:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011b00:	0f 87 94 00 00 00    	ja     c0011b9a <VAS::allocatePages(int, int)+0x1b0>
c0011b06:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011b0a:	85 d2                	test   edx,edx
c0011b0c:	7e 3c                	jle    c0011b4a <VAS::allocatePages(int, int)+0x160>
c0011b0e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011b12:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011b16:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b1a:	c1 e5 0c             	shl    ebp,0xc
c0011b1d:	81 ce 00 04 00 00    	or     esi,0x400
c0011b23:	01 dd                	add    ebp,ebx
c0011b25:	e8 0f bf ff ff       	call   c000da39 <Phys::allocatePage()>
c0011b2a:	56                   	push   esi
c0011b2b:	53                   	push   ebx
c0011b2c:	50                   	push   eax
c0011b2d:	57                   	push   edi
c0011b2e:	e8 b7 fd ff ff       	call   c00118ea <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b33:	83 c4 10             	add    esp,0x10
c0011b36:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b3b:	74 03                	je     c0011b40 <VAS::allocatePages(int, int)+0x156>
c0011b3d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b40:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b46:	39 dd                	cmp    ebp,ebx
c0011b48:	75 db                	jne    c0011b25 <VAS::allocatePages(int, int)+0x13b>
c0011b4a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b4f:	0f 84 5a ff ff ff    	je     c0011aaf <VAS::allocatePages(int, int)+0xc5>
c0011b55:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011b59:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b5d:	89 d3                	mov    ebx,edx
c0011b5f:	c1 e0 0c             	shl    eax,0xc
c0011b62:	c1 eb 0a             	shr    ebx,0xa
c0011b65:	01 d0                	add    eax,edx
c0011b67:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011b6d:	c1 e8 0a             	shr    eax,0xa
c0011b70:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011b76:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011b7b:	2d 00 00 40 00       	sub    eax,0x400000
c0011b80:	39 c3                	cmp    ebx,eax
c0011b82:	0f 87 1b ff ff ff    	ja     c0011aa3 <VAS::allocatePages(int, int)+0xb9>
c0011b88:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b8b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b91:	39 d8                	cmp    eax,ebx
c0011b93:	73 f3                	jae    c0011b88 <VAS::allocatePages(int, int)+0x19e>
c0011b95:	e9 09 ff ff ff       	jmp    c0011aa3 <VAS::allocatePages(int, int)+0xb9>
c0011b9a:	e8 ab 55 00 00       	call   c001714a <thisCPU()>
c0011b9f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011ba6:	0f 84 5a ff ff ff    	je     c0011b06 <VAS::allocatePages(int, int)+0x11c>
c0011bac:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011bb4:	e9 4d ff ff ff       	jmp    c0011b06 <VAS::allocatePages(int, int)+0x11c>
c0011bb9:	90                   	nop

c0011bba <VAS::setCPUSpecific(unsigned long)>:
c0011bba:	83 ec 0c             	sub    esp,0xc
c0011bbd:	6a 05                	push   0x5
c0011bbf:	68 00 00 40 c2       	push   0xc2400000
c0011bc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011bc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011bcc:	e8 19 fd ff ff       	call   c00118ea <VAS::mapPage(unsigned long, unsigned long, int)>
c0011bd1:	83 c4 1c             	add    esp,0x1c
c0011bd4:	c3                   	ret    
c0011bd5:	90                   	nop

c0011bd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011bd6:	55                   	push   ebp
c0011bd7:	57                   	push   edi
c0011bd8:	56                   	push   esi
c0011bd9:	53                   	push   ebx
c0011bda:	83 ec 1c             	sub    esp,0x1c
c0011bdd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011be1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011be5:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011be9:	e8 5c 55 00 00       	call   c001714a <thisCPU()>
c0011bee:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011bf4:	83 e0 01             	and    eax,0x1
c0011bf7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011bfb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011bff:	85 c0                	test   eax,eax
c0011c01:	7e 39                	jle    c0011c3c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c0011c03:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c07:	89 f3                	mov    ebx,esi
c0011c09:	c1 e0 0c             	shl    eax,0xc
c0011c0c:	01 f0                	add    eax,esi
c0011c0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c12:	55                   	push   ebp
c0011c13:	53                   	push   ebx
c0011c14:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c18:	29 f0                	sub    eax,esi
c0011c1a:	01 d8                	add    eax,ebx
c0011c1c:	50                   	push   eax
c0011c1d:	57                   	push   edi
c0011c1e:	e8 c7 fc ff ff       	call   c00118ea <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c23:	83 c4 10             	add    esp,0x10
c0011c26:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c2b:	74 03                	je     c0011c30 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c0011c2d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c30:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c36:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011c3a:	75 d6                	jne    c0011c12 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c0011c3c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c41:	74 42                	je     c0011c85 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c0011c43:	89 f3                	mov    ebx,esi
c0011c45:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c49:	c1 eb 0a             	shr    ebx,0xa
c0011c4c:	c1 e0 0c             	shl    eax,0xc
c0011c4f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011c55:	01 f0                	add    eax,esi
c0011c57:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c5d:	c1 e8 0a             	shr    eax,0xa
c0011c60:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c65:	2d 00 00 40 00       	sub    eax,0x400000
c0011c6a:	39 c3                	cmp    ebx,eax
c0011c6c:	77 0d                	ja     c0011c7b <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c0011c6e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c71:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c77:	39 d8                	cmp    eax,ebx
c0011c79:	73 f3                	jae    c0011c6e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c0011c7b:	83 c4 1c             	add    esp,0x1c
c0011c7e:	89 f0                	mov    eax,esi
c0011c80:	5b                   	pop    ebx
c0011c81:	5e                   	pop    esi
c0011c82:	5f                   	pop    edi
c0011c83:	5d                   	pop    ebp
c0011c84:	c3                   	ret    
c0011c85:	e8 2f cd 00 00       	call   c001e9b9 <CPU::readCR3()>
c0011c8a:	83 ec 0c             	sub    esp,0xc
c0011c8d:	50                   	push   eax
c0011c8e:	e8 4a cd 00 00       	call   c001e9dd <CPU::writeCR3(unsigned long)>
c0011c93:	89 f0                	mov    eax,esi
c0011c95:	83 c4 10             	add    esp,0x10
c0011c98:	83 c4 1c             	add    esp,0x1c
c0011c9b:	5b                   	pop    ebx
c0011c9c:	5e                   	pop    esi
c0011c9d:	5f                   	pop    edi
c0011c9e:	5d                   	pop    ebp
c0011c9f:	c3                   	ret    

c0011ca0 <VAS::VAS(VAS*)>:
c0011ca0:	53                   	push   ebx
c0011ca1:	83 ec 38             	sub    esp,0x38
c0011ca4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011ca8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011caf:	e8 a9 c6 ff ff       	call   c000e35d <lockStuff()>
c0011cb4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011cb8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011cbb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011cbf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011cc2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011cc6:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c0011cc9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011ccd:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011cd0:	e8 64 bd ff ff       	call   c000da39 <Phys::allocatePage()>
c0011cd5:	89 c2                	mov    edx,eax
c0011cd7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011cdb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011cde:	e8 60 f7 ff ff       	call   c0011443 <Virt::getAKernelVAS()>
c0011ce3:	89 c3                	mov    ebx,eax
c0011ce5:	83 ec 0c             	sub    esp,0xc
c0011ce8:	6a 01                	push   0x1
c0011cea:	e8 c4 f5 ff ff       	call   c00112b3 <Virt::allocateKernelVirtualPages(int)>
c0011cef:	83 c4 10             	add    esp,0x10
c0011cf2:	89 c2                	mov    edx,eax
c0011cf4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011cf8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011cfb:	83 ec 0c             	sub    esp,0xc
c0011cfe:	6a 03                	push   0x3
c0011d00:	6a 01                	push   0x1
c0011d02:	52                   	push   edx
c0011d03:	50                   	push   eax
c0011d04:	53                   	push   ebx
c0011d05:	e8 cc fe ff ff       	call   c0011bd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011d0a:	83 c4 20             	add    esp,0x20
c0011d0d:	89 c2                	mov    edx,eax
c0011d0f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d13:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011d16:	83 ec 04             	sub    esp,0x4
c0011d19:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011d1d:	6a 01                	push   0x1
c0011d1f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011d23:	e8 20 fa ff ff       	call   c0011748 <VAS::mapOtherVASIn(bool, VAS*)>
c0011d28:	83 c4 10             	add    esp,0x10
c0011d2b:	83 ec 0c             	sub    esp,0xc
c0011d2e:	6a 01                	push   0x1
c0011d30:	e8 7e f5 ff ff       	call   c00112b3 <Virt::allocateKernelVirtualPages(int)>
c0011d35:	83 c4 10             	add    esp,0x10
c0011d38:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011d3c:	83 ec 0c             	sub    esp,0xc
c0011d3f:	6a 01                	push   0x1
c0011d41:	e8 6d f5 ff ff       	call   c00112b3 <Virt::allocateKernelVirtualPages(int)>
c0011d46:	83 c4 10             	add    esp,0x10
c0011d49:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011d4d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011d55:	81 7c 24 2c ff 03 00 00 	cmp    DWORD PTR [esp+0x2c],0x3ff
c0011d5d:	0f 8f 5e 02 00 00    	jg     c0011fc1 <VAS::VAS(VAS*)+0x321>
c0011d63:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011d68:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d6a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d6d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011d73:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011d76:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011d7a:	c1 e2 02             	shl    edx,0x2
c0011d7d:	01 d0                	add    eax,edx
c0011d7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d81:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d85:	83 ec 08             	sub    esp,0x8
c0011d88:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011d8c:	68 77 97 03 c0       	push   0xc0039777
c0011d91:	e8 fe b0 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0011d96:	83 c4 10             	add    esp,0x10
c0011d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d9d:	25 01 04 00 00       	and    eax,0x401
c0011da2:	3d 01 04 00 00       	cmp    eax,0x401
c0011da7:	0f 85 e5 01 00 00    	jne    c0011f92 <VAS::VAS(VAS*)+0x2f2>
c0011dad:	83 ec 0c             	sub    esp,0xc
c0011db0:	68 88 97 03 c0       	push   0xc0039788
c0011db5:	e8 da b0 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0011dba:	83 c4 10             	add    esp,0x10
c0011dbd:	e8 77 bc ff ff       	call   c000da39 <Phys::allocatePage()>
c0011dc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011dc6:	83 ec 08             	sub    esp,0x8
c0011dc9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011dcd:	68 9e 97 03 c0       	push   0xc003979e
c0011dd2:	e8 bd b0 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0011dd7:	83 c4 10             	add    esp,0x10
c0011dda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011dde:	25 ff 0f 00 00       	and    eax,0xfff
c0011de3:	89 c1                	mov    ecx,eax
c0011de5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011de9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011dec:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011df0:	c1 e2 02             	shl    edx,0x2
c0011df3:	01 c2                	add    edx,eax
c0011df5:	89 c8                	mov    eax,ecx
c0011df7:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0011dfb:	89 02                	mov    DWORD PTR [edx],eax
c0011dfd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011e05:	81 7c 24 28 ff 03 00 00 	cmp    DWORD PTR [esp+0x28],0x3ff
c0011e0d:	0f 8f a5 01 00 00    	jg     c0011fb8 <VAS::VAS(VAS*)+0x318>
c0011e13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e17:	c1 e0 0a             	shl    eax,0xa
c0011e1a:	89 c2                	mov    edx,eax
c0011e1c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e20:	01 d0                	add    eax,edx
c0011e22:	c1 e0 0c             	shl    eax,0xc
c0011e25:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011e29:	83 ec 08             	sub    esp,0x8
c0011e2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e30:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011e34:	e8 91 f7 ff ff       	call   c00115ca <VAS::getPageTableEntry(unsigned long)>
c0011e39:	83 c4 10             	add    esp,0x10
c0011e3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011e42:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011e47:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e49:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e4c:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011e52:	83 ec 04             	sub    esp,0x4
c0011e55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011e59:	6a 01                	push   0x1
c0011e5b:	50                   	push   eax
c0011e5c:	e8 3d f7 ff ff       	call   c001159e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011e61:	83 c4 10             	add    esp,0x10
c0011e64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e68:	83 ec 04             	sub    esp,0x4
c0011e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e73:	68 30 96 03 c0       	push   0xc0039630
c0011e78:	e8 17 b0 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0011e7d:	83 c4 10             	add    esp,0x10
c0011e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e84:	25 01 04 00 00       	and    eax,0x401
c0011e89:	3d 01 04 00 00       	cmp    eax,0x401
c0011e8e:	0f 85 db 00 00 00    	jne    c0011f6f <VAS::VAS(VAS*)+0x2cf>
c0011e94:	83 ec 0c             	sub    esp,0xc
c0011e97:	68 ad 97 03 c0       	push   0xc00397ad
c0011e9c:	e8 f3 af ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0011ea1:	83 c4 10             	add    esp,0x10
c0011ea4:	e8 90 bb ff ff       	call   c000da39 <Phys::allocatePage()>
c0011ea9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011ead:	83 ec 08             	sub    esp,0x8
c0011eb0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011eb4:	68 bc 97 03 c0       	push   0xc00397bc
c0011eb9:	e8 d6 af ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0011ebe:	83 c4 10             	add    esp,0x10
c0011ec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ec5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011eca:	83 ec 08             	sub    esp,0x8
c0011ecd:	50                   	push   eax
c0011ece:	68 d0 97 03 c0       	push   0xc00397d0
c0011ed3:	e8 bc af ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0011ed8:	83 c4 10             	add    esp,0x10
c0011edb:	e8 63 f5 ff ff       	call   c0011443 <Virt::getAKernelVAS()>
c0011ee0:	83 ec 0c             	sub    esp,0xc
c0011ee3:	6a 03                	push   0x3
c0011ee5:	6a 01                	push   0x1
c0011ee7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011eeb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011eef:	50                   	push   eax
c0011ef0:	e8 e1 fc ff ff       	call   c0011bd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011ef5:	83 c4 20             	add    esp,0x20
c0011ef8:	e8 46 f5 ff ff       	call   c0011443 <Virt::getAKernelVAS()>
c0011efd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011f01:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011f07:	83 ec 0c             	sub    esp,0xc
c0011f0a:	6a 03                	push   0x3
c0011f0c:	6a 01                	push   0x1
c0011f0e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011f12:	52                   	push   edx
c0011f13:	50                   	push   eax
c0011f14:	e8 bd fc ff ff       	call   c0011bd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f19:	83 c4 20             	add    esp,0x20
c0011f1c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011f20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f24:	83 ec 04             	sub    esp,0x4
c0011f27:	68 00 10 00 00       	push   0x1000
c0011f2c:	52                   	push   edx
c0011f2d:	50                   	push   eax
c0011f2e:	e8 2e e7 fe ff       	call   c0000661 <memcpy>
c0011f33:	83 c4 10             	add    esp,0x10
c0011f36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f3a:	25 ff 0f 00 00       	and    eax,0xfff
c0011f3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0011f43:	89 c2                	mov    edx,eax
c0011f45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f49:	89 10                	mov    DWORD PTR [eax],edx
c0011f4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f4f:	25 ff 0f 00 00       	and    eax,0xfff
c0011f54:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0011f58:	83 ec 04             	sub    esp,0x4
c0011f5b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011f5f:	50                   	push   eax
c0011f60:	68 54 96 03 c0       	push   0xc0039654
c0011f65:	e8 2a af ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0011f6a:	83 c4 10             	add    esp,0x10
c0011f6d:	eb 1a                	jmp    c0011f89 <VAS::VAS(VAS*)+0x2e9>
c0011f6f:	83 ec 0c             	sub    esp,0xc
c0011f72:	68 e4 97 03 c0       	push   0xc00397e4
c0011f77:	e8 18 af ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0011f7c:	83 c4 10             	add    esp,0x10
c0011f7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f83:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011f87:	89 10                	mov    DWORD PTR [eax],edx
c0011f89:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0011f8d:	e9 73 fe ff ff       	jmp    c0011e05 <VAS::VAS(VAS*)+0x165>
c0011f92:	83 ec 0c             	sub    esp,0xc
c0011f95:	68 e8 97 03 c0       	push   0xc00397e8
c0011f9a:	e8 f5 ae ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0011f9f:	83 c4 10             	add    esp,0x10
c0011fa2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011fa6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011fa9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011fad:	c1 e2 02             	shl    edx,0x2
c0011fb0:	01 c2                	add    edx,eax
c0011fb2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fb6:	89 02                	mov    DWORD PTR [edx],eax
c0011fb8:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011fbc:	e9 94 fd ff ff       	jmp    c0011d55 <VAS::VAS(VAS*)+0xb5>
c0011fc1:	83 ec 0c             	sub    esp,0xc
c0011fc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011fc8:	e8 1c f6 ff ff       	call   c00115e9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011fcd:	83 c4 10             	add    esp,0x10
c0011fd0:	83 ec 0c             	sub    esp,0xc
c0011fd3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011fd7:	e8 0d f6 ff ff       	call   c00115e9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011fdc:	83 c4 10             	add    esp,0x10
c0011fdf:	e8 0b c7 ff ff       	call   c000e6ef <unlockStuff()>
c0011fe4:	90                   	nop
c0011fe5:	83 c4 38             	add    esp,0x38
c0011fe8:	5b                   	pop    ebx
c0011fe9:	c3                   	ret    

c0011fea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011fea:	55                   	push   ebp
c0011feb:	57                   	push   edi
c0011fec:	56                   	push   esi
c0011fed:	53                   	push   ebx
c0011fee:	83 ec 1c             	sub    esp,0x1c
c0011ff1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011ff5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011ff9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011ffd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012001:	a9 ff 0f 00 00       	test   eax,0xfff
c0012006:	75 4a                	jne    c0012052 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012008:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001200c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001200f:	c1 eb 16             	shr    ebx,0x16
c0012012:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012019:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001201d:	74 4d                	je     c001206c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001201f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012023:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012027:	c1 e8 0a             	shr    eax,0xa
c001202a:	80 fa 01             	cmp    dl,0x1
c001202d:	19 d2                	sbb    edx,edx
c001202f:	c1 e3 0c             	shl    ebx,0xc
c0012032:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012036:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001203c:	25 fc 0f 00 00       	and    eax,0xffc
c0012041:	01 d8                	add    eax,ebx
c0012043:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001204a:	83 c4 1c             	add    esp,0x1c
c001204d:	5b                   	pop    ebx
c001204e:	5e                   	pop    esi
c001204f:	5f                   	pop    edi
c0012050:	5d                   	pop    ebp
c0012051:	c3                   	ret    
c0012052:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012056:	83 ec 0c             	sub    esp,0xc
c0012059:	68 78 96 03 c0       	push   0xc0039678
c001205e:	e8 4f af ff ff       	call   c000cfb2 <panic(char const*)>
c0012063:	83 c4 10             	add    esp,0x10
c0012066:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001206a:	eb 9c                	jmp    c0012008 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001206c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012070:	e8 c4 b9 ff ff       	call   c000da39 <Phys::allocatePage()>
c0012075:	89 c5                	mov    ebp,eax
c0012077:	e8 c7 f3 ff ff       	call   c0011443 <Virt::getAKernelVAS()>
c001207c:	83 ec 0c             	sub    esp,0xc
c001207f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012083:	6a 01                	push   0x1
c0012085:	e8 29 f2 ff ff       	call   c00112b3 <Virt::allocateKernelVirtualPages(int)>
c001208a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012091:	6a 01                	push   0x1
c0012093:	50                   	push   eax
c0012094:	55                   	push   ebp
c0012095:	81 cd 07 04 00 00    	or     ebp,0x407
c001209b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001209f:	51                   	push   ecx
c00120a0:	e8 31 fb ff ff       	call   c0011bd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00120a5:	83 c4 1c             	add    esp,0x1c
c00120a8:	68 00 10 00 00       	push   0x1000
c00120ad:	6a 00                	push   0x0
c00120af:	50                   	push   eax
c00120b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00120b4:	e8 1f e6 fe ff       	call   c00006d8 <memset>
c00120b9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00120bd:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00120c0:	e8 24 f5 ff ff       	call   c00115e9 <Virt::freeKernelVirtualPages(unsigned long)>
c00120c5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00120c8:	83 c4 10             	add    esp,0x10
c00120cb:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00120ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00120d2:	e9 48 ff ff ff       	jmp    c001201f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00120d7:	90                   	nop

c00120d8 <VAS::VAS(bool)>:
c00120d8:	53                   	push   ebx
c00120d9:	83 ec 28             	sub    esp,0x28
c00120dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00120e0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00120e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120f3:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00120f7:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00120fa:	e8 3a b9 ff ff       	call   c000da39 <Phys::allocatePage()>
c00120ff:	89 c2                	mov    edx,eax
c0012101:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012105:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012108:	e8 36 f3 ff ff       	call   c0011443 <Virt::getAKernelVAS()>
c001210d:	89 c3                	mov    ebx,eax
c001210f:	83 ec 0c             	sub    esp,0xc
c0012112:	6a 01                	push   0x1
c0012114:	e8 9a f1 ff ff       	call   c00112b3 <Virt::allocateKernelVirtualPages(int)>
c0012119:	83 c4 10             	add    esp,0x10
c001211c:	89 c2                	mov    edx,eax
c001211e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012122:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012125:	83 ec 0c             	sub    esp,0xc
c0012128:	6a 03                	push   0x3
c001212a:	6a 01                	push   0x1
c001212c:	52                   	push   edx
c001212d:	50                   	push   eax
c001212e:	53                   	push   ebx
c001212f:	e8 a2 fa ff ff       	call   c0011bd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012134:	83 c4 20             	add    esp,0x20
c0012137:	89 c2                	mov    edx,eax
c0012139:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001213d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012140:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012148:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012150:	7f 1c                	jg     c001216e <VAS::VAS(bool)+0x96>
c0012152:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012156:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012159:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001215d:	c1 e2 02             	shl    edx,0x2
c0012160:	01 d0                	add    eax,edx
c0012162:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012168:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001216c:	eb da                	jmp    c0012148 <VAS::VAS(bool)+0x70>
c001216e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012176:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001217e:	7f 71                	jg     c00121f1 <VAS::VAS(bool)+0x119>
c0012180:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012184:	2d 00 02 00 00       	sub    eax,0x200
c0012189:	c1 e0 0c             	shl    eax,0xc
c001218c:	83 c8 03             	or     eax,0x3
c001218f:	89 c3                	mov    ebx,eax
c0012191:	e8 b4 4f 00 00       	call   c001714a <thisCPU()>
c0012196:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001219c:	83 e0 10             	and    eax,0x10
c001219f:	84 c0                	test   al,al
c00121a1:	74 07                	je     c00121aa <VAS::VAS(bool)+0xd2>
c00121a3:	b8 00 01 00 00       	mov    eax,0x100
c00121a8:	eb 05                	jmp    c00121af <VAS::VAS(bool)+0xd7>
c00121aa:	b8 00 00 00 00       	mov    eax,0x0
c00121af:	09 d8                	or     eax,ebx
c00121b1:	89 c1                	mov    ecx,eax
c00121b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00121ba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00121be:	c1 e2 02             	shl    edx,0x2
c00121c1:	01 d0                	add    eax,edx
c00121c3:	89 ca                	mov    edx,ecx
c00121c5:	89 10                	mov    DWORD PTR [eax],edx
c00121c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121cb:	2d 40 03 00 00       	sub    eax,0x340
c00121d0:	83 f8 7f             	cmp    eax,0x7f
c00121d3:	77 16                	ja     c00121eb <VAS::VAS(bool)+0x113>
c00121d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121d9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00121dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00121e0:	c1 e2 02             	shl    edx,0x2
c00121e3:	01 d0                	add    eax,edx
c00121e5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00121eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00121ef:	eb 85                	jmp    c0012176 <VAS::VAS(bool)+0x9e>
c00121f1:	e8 54 4f 00 00       	call   c001714a <thisCPU()>
c00121f6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00121fc:	83 e0 10             	and    eax,0x10
c00121ff:	84 c0                	test   al,al
c0012201:	74 07                	je     c001220a <VAS::VAS(bool)+0x132>
c0012203:	b8 03 41 00 00       	mov    eax,0x4103
c0012208:	eb 05                	jmp    c001220f <VAS::VAS(bool)+0x137>
c001220a:	b8 03 40 00 00       	mov    eax,0x4003
c001220f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012213:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012216:	81 c2 20 0c 00 00    	add    edx,0xc20
c001221c:	89 02                	mov    DWORD PTR [edx],eax
c001221e:	e8 27 4f 00 00       	call   c001714a <thisCPU()>
c0012223:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012229:	83 ec 08             	sub    esp,0x8
c001222c:	50                   	push   eax
c001222d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012231:	e8 84 f9 ff ff       	call   c0011bba <VAS::setCPUSpecific(unsigned long)>
c0012236:	83 c4 10             	add    esp,0x10
c0012239:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001223d:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c0012240:	e8 05 4f 00 00       	call   c001714a <thisCPU()>
c0012245:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001224b:	83 e0 10             	and    eax,0x10
c001224e:	84 c0                	test   al,al
c0012250:	74 07                	je     c0012259 <VAS::VAS(bool)+0x181>
c0012252:	b8 00 01 00 00       	mov    eax,0x100
c0012257:	eb 05                	jmp    c001225e <VAS::VAS(bool)+0x186>
c0012259:	b8 00 00 00 00       	mov    eax,0x0
c001225e:	09 d8                	or     eax,ebx
c0012260:	89 c2                	mov    edx,eax
c0012262:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012266:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012269:	05 fc 0f 00 00       	add    eax,0xffc
c001226e:	83 ca 03             	or     edx,0x3
c0012271:	89 10                	mov    DWORD PTR [eax],edx
c0012273:	e8 d2 4e 00 00       	call   c001714a <thisCPU()>
c0012278:	83 ec 0c             	sub    esp,0xc
c001227b:	50                   	push   eax
c001227c:	e8 af 17 00 00       	call   c0013a30 <Device::getName()>
c0012281:	83 c4 10             	add    esp,0x10
c0012284:	83 ec 08             	sub    esp,0x8
c0012287:	68 f8 97 03 c0       	push   0xc00397f8
c001228c:	50                   	push   eax
c001228d:	e8 e8 e5 fe ff       	call   c000087a <strcmp>
c0012292:	83 c4 10             	add    esp,0x10
c0012295:	85 c0                	test   eax,eax
c0012297:	0f 94 c0             	sete   al
c001229a:	84 c0                	test   al,al
c001229c:	74 64                	je     c0012302 <VAS::VAS(bool)+0x22a>
c001229e:	e8 76 c0 ff ff       	call   c000e319 <disableIRQs()>
c00122a3:	e8 a2 4e 00 00       	call   c001714a <thisCPU()>
c00122a8:	05 7c 09 00 00       	add    eax,0x97c
c00122ad:	83 ec 0c             	sub    esp,0xc
c00122b0:	50                   	push   eax
c00122b1:	e8 32 a7 ff ff       	call   c000c9e8 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00122b6:	83 c4 10             	add    esp,0x10
c00122b9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122be:	89 c3                	mov    ebx,eax
c00122c0:	e8 85 4e 00 00       	call   c001714a <thisCPU()>
c00122c5:	05 7c 09 00 00       	add    eax,0x97c
c00122ca:	83 ec 0c             	sub    esp,0xc
c00122cd:	50                   	push   eax
c00122ce:	e8 15 a7 ff ff       	call   c000c9e8 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00122d3:	83 c4 10             	add    esp,0x10
c00122d6:	83 ec 08             	sub    esp,0x8
c00122d9:	50                   	push   eax
c00122da:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00122de:	e8 e7 f2 ff ff       	call   c00115ca <VAS::getPageTableEntry(unsigned long)>
c00122e3:	83 c4 10             	add    esp,0x10
c00122e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00122e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122ed:	6a 11                	push   0x11
c00122ef:	53                   	push   ebx
c00122f0:	50                   	push   eax
c00122f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00122f5:	e8 f0 f5 ff ff       	call   c00118ea <VAS::mapPage(unsigned long, unsigned long, int)>
c00122fa:	83 c4 10             	add    esp,0x10
c00122fd:	e8 25 c0 ff ff       	call   c000e327 <enableIRQs()>
c0012302:	90                   	nop
c0012303:	83 c4 28             	add    esp,0x28
c0012306:	5b                   	pop    ebx
c0012307:	c3                   	ret    

c0012308 <mapVASFirstTime>:
c0012308:	55                   	push   ebp
c0012309:	57                   	push   edi
c001230a:	56                   	push   esi
c001230b:	53                   	push   ebx
c001230c:	83 ec 0c             	sub    esp,0xc
c001230f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012314:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012317:	4a                   	dec    edx
c0012318:	0f 84 99 00 00 00    	je     c00123b7 <mapVASFirstTime+0xaf>
c001231e:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012321:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012324:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012329:	c1 e5 15             	shl    ebp,0x15
c001232c:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c0012331:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012337:	29 eb                	sub    ebx,ebp
c0012339:	29 ee                	sub    esi,ebp
c001233b:	e8 f9 b6 ff ff       	call   c000da39 <Phys::allocatePage()>
c0012340:	83 ec 0c             	sub    esp,0xc
c0012343:	68 03 04 00 00       	push   0x403
c0012348:	6a 01                	push   0x1
c001234a:	53                   	push   ebx
c001234b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012351:	50                   	push   eax
c0012352:	57                   	push   edi
c0012353:	e8 7e f8 ff ff       	call   c0011bd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012358:	83 c4 20             	add    esp,0x20
c001235b:	39 f3                	cmp    ebx,esi
c001235d:	75 dc                	jne    c001233b <mapVASFirstTime+0x33>
c001235f:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012364:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012369:	29 ee                	sub    esi,ebp
c001236b:	29 e8                	sub    eax,ebp
c001236d:	89 c5                	mov    ebp,eax
c001236f:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012373:	19 db                	sbb    ebx,ebx
c0012375:	e8 bf b6 ff ff       	call   c000da39 <Phys::allocatePage()>
c001237a:	83 e3 04             	and    ebx,0x4
c001237d:	83 ec 0c             	sub    esp,0xc
c0012380:	81 c3 03 04 00 00    	add    ebx,0x403
c0012386:	53                   	push   ebx
c0012387:	6a 01                	push   0x1
c0012389:	56                   	push   esi
c001238a:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012390:	50                   	push   eax
c0012391:	57                   	push   edi
c0012392:	e8 3f f8 ff ff       	call   c0011bd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012397:	83 c4 20             	add    esp,0x20
c001239a:	39 f5                	cmp    ebp,esi
c001239c:	75 d1                	jne    c001236f <mapVASFirstTime+0x67>
c001239e:	e8 16 c6 00 00       	call   c001e9b9 <CPU::readCR3()>
c00123a3:	83 ec 0c             	sub    esp,0xc
c00123a6:	50                   	push   eax
c00123a7:	e8 31 c6 00 00       	call   c001e9dd <CPU::writeCR3(unsigned long)>
c00123ac:	83 c4 10             	add    esp,0x10
c00123af:	83 c4 0c             	add    esp,0xc
c00123b2:	5b                   	pop    ebx
c00123b3:	5e                   	pop    esi
c00123b4:	5f                   	pop    edi
c00123b5:	5d                   	pop    ebp
c00123b6:	c3                   	ret    
c00123b7:	83 ec 0c             	sub    esp,0xc
c00123ba:	68 06 98 03 c0       	push   0xc0039806
c00123bf:	e8 d0 aa ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c00123c4:	83 c4 10             	add    esp,0x10
c00123c7:	83 c4 0c             	add    esp,0xc
c00123ca:	5b                   	pop    ebx
c00123cb:	5e                   	pop    esi
c00123cc:	5f                   	pop    edi
c00123cd:	5d                   	pop    ebp
c00123ce:	c3                   	ret    

c00123cf <__cxa_atexit>:
c00123cf:	31 c0                	xor    eax,eax
c00123d1:	c3                   	ret    

c00123d2 <__cxa_finalize>:
c00123d2:	c3                   	ret    

c00123d3 <__stack_chk_fail>:
c00123d3:	55                   	push   ebp
c00123d4:	89 e5                	mov    ebp,esp
c00123d6:	83 ec 10             	sub    esp,0x10
c00123d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00123dc:	68 1f 98 03 c0       	push   0xc003981f
c00123e1:	e8 ae aa ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c00123e6:	58                   	pop    eax
c00123e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00123ea:	5a                   	pop    edx
c00123eb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00123ee:	68 1f 98 03 c0       	push   0xc003981f
c00123f3:	e8 9c aa ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c00123f8:	59                   	pop    ecx
c00123f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00123fc:	5a                   	pop    edx
c00123fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00123ff:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012402:	68 1f 98 03 c0       	push   0xc003981f
c0012407:	e8 88 aa ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001240c:	59                   	pop    ecx
c001240d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012410:	5a                   	pop    edx
c0012411:	8b 00                	mov    eax,DWORD PTR [eax]
c0012413:	8b 00                	mov    eax,DWORD PTR [eax]
c0012415:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012418:	68 1f 98 03 c0       	push   0xc003981f
c001241d:	e8 72 aa ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0012422:	c7 04 24 27 98 03 c0 	mov    DWORD PTR [esp],0xc0039827
c0012429:	e8 84 ab ff ff       	call   c000cfb2 <panic(char const*)>
c001242e:	83 c4 10             	add    esp,0x10
c0012431:	c9                   	leave  
c0012432:	c3                   	ret    

c0012433 <__cxa_pure_virtual>:
c0012433:	83 ec 18             	sub    esp,0x18
c0012436:	68 3f 98 03 c0       	push   0xc003983f
c001243b:	e8 72 ab ff ff       	call   c000cfb2 <panic(char const*)>
c0012440:	83 c4 1c             	add    esp,0x1c
c0012443:	c3                   	ret    

c0012444 <operator new(unsigned long)>:
c0012444:	e9 46 b0 ff ff       	jmp    c000d48f <malloc>

c0012449 <operator new[](unsigned long)>:
c0012449:	e9 41 b0 ff ff       	jmp    c000d48f <malloc>

c001244e <operator delete(void*)>:
c001244e:	e9 5c b0 ff ff       	jmp    c000d4af <rfree>

c0012453 <operator delete(void*, unsigned long)>:
c0012453:	e9 57 b0 ff ff       	jmp    c000d4af <rfree>

c0012458 <operator delete[](void*)>:
c0012458:	e9 52 b0 ff ff       	jmp    c000d4af <rfree>

c001245d <operator delete[](void*, unsigned long)>:
c001245d:	e9 4d b0 ff ff       	jmp    c000d4af <rfree>

c0012462 <File::read(unsigned long long, void*, int*)>:
c0012462:	53                   	push   ebx
c0012463:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012467:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001246b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012472:	3c 19                	cmp    al,0x19
c0012474:	77 35                	ja     c00124ab <File::read(unsigned long long, void*, int*)+0x49>
c0012476:	8b 04 85 20 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3ce0]
c001247d:	85 c0                	test   eax,eax
c001247f:	74 2a                	je     c00124ab <File::read(unsigned long long, void*, int*)+0x49>
c0012481:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012487:	85 c0                	test   eax,eax
c0012489:	74 20                	je     c00124ab <File::read(unsigned long long, void*, int*)+0x49>
c001248b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001248f:	74 21                	je     c00124b2 <File::read(unsigned long long, void*, int*)+0x50>
c0012491:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012493:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012497:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001249d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00124a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00124a5:	5b                   	pop    ebx
c00124a6:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00124a9:	ff e0                	jmp    eax
c00124ab:	b8 0b 00 00 00       	mov    eax,0xb
c00124b0:	eb 05                	jmp    c00124b7 <File::read(unsigned long long, void*, int*)+0x55>
c00124b2:	b8 05 00 00 00       	mov    eax,0x5
c00124b7:	5b                   	pop    ebx
c00124b8:	c3                   	ret    
c00124b9:	90                   	nop

c00124ba <File::write(unsigned long long, void*, int*)>:
c00124ba:	53                   	push   ebx
c00124bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00124bf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124c3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00124ca:	3c 19                	cmp    al,0x19
c00124cc:	77 35                	ja     c0012503 <File::write(unsigned long long, void*, int*)+0x49>
c00124ce:	8b 04 85 20 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3ce0]
c00124d5:	85 c0                	test   eax,eax
c00124d7:	74 2a                	je     c0012503 <File::write(unsigned long long, void*, int*)+0x49>
c00124d9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00124df:	85 c0                	test   eax,eax
c00124e1:	74 20                	je     c0012503 <File::write(unsigned long long, void*, int*)+0x49>
c00124e3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00124e7:	74 21                	je     c001250a <File::write(unsigned long long, void*, int*)+0x50>
c00124e9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00124eb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00124ef:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00124f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00124f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00124fd:	5b                   	pop    ebx
c00124fe:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012501:	ff e0                	jmp    eax
c0012503:	b8 0b 00 00 00       	mov    eax,0xb
c0012508:	eb 05                	jmp    c001250f <File::write(unsigned long long, void*, int*)+0x55>
c001250a:	b8 05 00 00 00       	mov    eax,0x5
c001250f:	5b                   	pop    ebx
c0012510:	c3                   	ret    
c0012511:	90                   	nop

c0012512 <Directory::read(unsigned long long, void*, int*)>:
c0012512:	53                   	push   ebx
c0012513:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012517:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001251b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012522:	3c 19                	cmp    al,0x19
c0012524:	77 35                	ja     c001255b <Directory::read(unsigned long long, void*, int*)+0x49>
c0012526:	8b 04 85 20 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3ce0]
c001252d:	85 c0                	test   eax,eax
c001252f:	74 2a                	je     c001255b <Directory::read(unsigned long long, void*, int*)+0x49>
c0012531:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012537:	85 c0                	test   eax,eax
c0012539:	74 20                	je     c001255b <Directory::read(unsigned long long, void*, int*)+0x49>
c001253b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001253f:	74 21                	je     c0012562 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012541:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012543:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012547:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001254d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012551:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012555:	5b                   	pop    ebx
c0012556:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012559:	ff e0                	jmp    eax
c001255b:	b8 0b 00 00 00       	mov    eax,0xb
c0012560:	eb 05                	jmp    c0012567 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012562:	b8 05 00 00 00       	mov    eax,0x5
c0012567:	5b                   	pop    ebx
c0012568:	c3                   	ret    
c0012569:	90                   	nop

c001256a <Directory::write(unsigned long long, void*, int*)>:
c001256a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001256e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012575:	b8 0b 00 00 00       	mov    eax,0xb
c001257a:	80 fa 19             	cmp    dl,0x19
c001257d:	77 18                	ja     c0012597 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001257f:	8b 14 95 20 c3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3ce0]
c0012586:	85 d2                	test   edx,edx
c0012588:	74 0d                	je     c0012597 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001258a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012591:	19 c0                	sbb    eax,eax
c0012593:	83 e0 0a             	and    eax,0xa
c0012596:	40                   	inc    eax
c0012597:	c3                   	ret    

c0012598 <File::isAtty()>:
c0012598:	31 c0                	xor    eax,eax
c001259a:	c3                   	ret    
c001259b:	90                   	nop

c001259c <Directory::isAtty()>:
c001259c:	31 c0                	xor    eax,eax
c001259e:	c3                   	ret    
c001259f:	90                   	nop

c00125a0 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00125a0:	b8 0a 00 00 00       	mov    eax,0xa
c00125a5:	c3                   	ret    

c00125a6 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00125a6:	b8 0a 00 00 00       	mov    eax,0xa
c00125ab:	c3                   	ret    

c00125ac <File::~File()>:
c00125ac:	83 ec 0c             	sub    esp,0xc
c00125af:	ba c0 98 03 c0       	mov    edx,0xc00398c0
c00125b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125b8:	89 10                	mov    DWORD PTR [eax],edx
c00125ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125be:	83 ec 0c             	sub    esp,0xc
c00125c1:	50                   	push   eax
c00125c2:	e8 0d eb ff ff       	call   c00110d4 <UnixFile::~UnixFile()>
c00125c7:	83 c4 10             	add    esp,0x10
c00125ca:	90                   	nop
c00125cb:	83 c4 0c             	add    esp,0xc
c00125ce:	c3                   	ret    
c00125cf:	90                   	nop

c00125d0 <File::~File()>:
c00125d0:	83 ec 0c             	sub    esp,0xc
c00125d3:	83 ec 0c             	sub    esp,0xc
c00125d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125da:	e8 cd ff ff ff       	call   c00125ac <File::~File()>
c00125df:	83 c4 10             	add    esp,0x10
c00125e2:	83 ec 08             	sub    esp,0x8
c00125e5:	68 14 01 00 00       	push   0x114
c00125ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125ee:	e8 60 fe ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c00125f3:	83 c4 10             	add    esp,0x10
c00125f6:	83 c4 0c             	add    esp,0xc
c00125f9:	c3                   	ret    

c00125fa <Directory::~Directory()>:
c00125fa:	83 ec 0c             	sub    esp,0xc
c00125fd:	ba dc 98 03 c0       	mov    edx,0xc00398dc
c0012602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012606:	89 10                	mov    DWORD PTR [eax],edx
c0012608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001260c:	83 ec 0c             	sub    esp,0xc
c001260f:	50                   	push   eax
c0012610:	e8 bf ea ff ff       	call   c00110d4 <UnixFile::~UnixFile()>
c0012615:	83 c4 10             	add    esp,0x10
c0012618:	90                   	nop
c0012619:	83 c4 0c             	add    esp,0xc
c001261c:	c3                   	ret    
c001261d:	90                   	nop

c001261e <Directory::~Directory()>:
c001261e:	83 ec 0c             	sub    esp,0xc
c0012621:	83 ec 0c             	sub    esp,0xc
c0012624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012628:	e8 cd ff ff ff       	call   c00125fa <Directory::~Directory()>
c001262d:	83 c4 10             	add    esp,0x10
c0012630:	83 ec 08             	sub    esp,0x8
c0012633:	68 14 01 00 00       	push   0x114
c0012638:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001263c:	e8 12 fe ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c0012641:	83 c4 10             	add    esp,0x10
c0012644:	83 c4 0c             	add    esp,0xc
c0012647:	c3                   	ret    

c0012648 <Filesystem::Filesystem()>:
c0012648:	ba 5c 98 03 c0       	mov    edx,0xc003985c
c001264d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012651:	89 10                	mov    DWORD PTR [eax],edx
c0012653:	8b 15 80 be 03 c0    	mov    edx,DWORD PTR ds:0xc003be80
c0012659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001265d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012664:	a3 80 be 03 c0       	mov    ds:0xc003be80,eax
c0012669:	90                   	nop
c001266a:	c3                   	ret    
c001266b:	90                   	nop

c001266c <Filesystem::~Filesystem()>:
c001266c:	ba 5c 98 03 c0       	mov    edx,0xc003985c
c0012671:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012675:	89 10                	mov    DWORD PTR [eax],edx
c0012677:	90                   	nop
c0012678:	c3                   	ret    
c0012679:	90                   	nop

c001267a <Filesystem::~Filesystem()>:
c001267a:	83 ec 0c             	sub    esp,0xc
c001267d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012681:	e8 e6 ff ff ff       	call   c001266c <Filesystem::~Filesystem()>
c0012686:	83 c4 04             	add    esp,0x4
c0012689:	83 ec 08             	sub    esp,0x8
c001268c:	6a 08                	push   0x8
c001268e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012692:	e8 bc fd ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c0012697:	83 c4 10             	add    esp,0x10
c001269a:	83 c4 0c             	add    esp,0xc
c001269d:	c3                   	ret    

c001269e <initVFS()>:
c001269e:	83 ec 18             	sub    esp,0x18
c00126a1:	6a 08                	push   0x8
c00126a3:	e8 9c fd ff ff       	call   c0012444 <operator new(unsigned long)>
c00126a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00126ab:	e8 f4 70 00 00       	call   c00197a4 <FAT::FAT()>
c00126b0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00126b7:	e8 88 fd ff ff       	call   c0012444 <operator new(unsigned long)>
c00126bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00126bf:	e8 ea 82 00 00       	call   c001a9ae <ISO9660::ISO9660()>
c00126c4:	83 c4 1c             	add    esp,0x1c
c00126c7:	c3                   	ret    

c00126c8 <standardiseFiles(char*, char const*, char const*)>:
c00126c8:	55                   	push   ebp
c00126c9:	57                   	push   edi
c00126ca:	56                   	push   esi
c00126cb:	53                   	push   ebx
c00126cc:	81 ec 10 04 00 00    	sub    esp,0x410
c00126d2:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00126d9:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00126e0:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00126e7:	68 00 04 00 00       	push   0x400
c00126ec:	6a 00                	push   0x0
c00126ee:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00126f2:	56                   	push   esi
c00126f3:	e8 e0 df fe ff       	call   c00006d8 <memset>
c00126f8:	83 c4 10             	add    esp,0x10
c00126fb:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00126ff:	75 0b                	jne    c001270c <standardiseFiles(char*, char const*, char const*)+0x44>
c0012701:	50                   	push   eax
c0012702:	50                   	push   eax
c0012703:	57                   	push   edi
c0012704:	56                   	push   esi
c0012705:	e8 ea e0 fe ff       	call   c00007f4 <strcpy>
c001270a:	eb 41                	jmp    c001274d <standardiseFiles(char*, char const*, char const*)+0x85>
c001270c:	8a 07                	mov    al,BYTE PTR [edi]
c001270e:	3c 5c                	cmp    al,0x5c
c0012710:	74 04                	je     c0012716 <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012712:	3c 2f                	cmp    al,0x2f
c0012714:	75 18                	jne    c001272e <standardiseFiles(char*, char const*, char const*)+0x66>
c0012716:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012719:	3c 60                	cmp    al,0x60
c001271b:	7e 03                	jle    c0012720 <standardiseFiles(char*, char const*, char const*)+0x58>
c001271d:	83 e8 20             	sub    eax,0x20
c0012720:	88 04 24             	mov    BYTE PTR [esp],al
c0012723:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001272a:	50                   	push   eax
c001272b:	50                   	push   eax
c001272c:	eb 18                	jmp    c0012746 <standardiseFiles(char*, char const*, char const*)+0x7e>
c001272e:	50                   	push   eax
c001272f:	50                   	push   eax
c0012730:	55                   	push   ebp
c0012731:	56                   	push   esi
c0012732:	e8 bd e0 fe ff       	call   c00007f4 <strcpy>
c0012737:	5a                   	pop    edx
c0012738:	59                   	pop    ecx
c0012739:	68 52 8f 03 c0       	push   0xc0038f52
c001273e:	56                   	push   esi
c001273f:	e8 fd e1 fe ff       	call   c0000941 <strcat>
c0012744:	5d                   	pop    ebp
c0012745:	58                   	pop    eax
c0012746:	57                   	push   edi
c0012747:	56                   	push   esi
c0012748:	e8 f4 e1 fe ff       	call   c0000941 <strcat>
c001274d:	83 c4 10             	add    esp,0x10
c0012750:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012753:	3c 60                	cmp    al,0x60
c0012755:	7e 03                	jle    c001275a <standardiseFiles(char*, char const*, char const*)+0x92>
c0012757:	83 e8 20             	sub    eax,0x20
c001275a:	88 04 24             	mov    BYTE PTR [esp],al
c001275d:	88 03                	mov    BYTE PTR [ebx],al
c001275f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012766:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001276c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012770:	bf 03 00 00 00       	mov    edi,0x3
c0012775:	b8 03 00 00 00       	mov    eax,0x3
c001277a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c001277d:	84 d2                	test   dl,dl
c001277f:	0f 84 91 00 00 00    	je     c0012816 <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012785:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012788:	80 fa 5c             	cmp    dl,0x5c
c001278b:	74 05                	je     c0012792 <standardiseFiles(char*, char const*, char const*)+0xca>
c001278d:	80 fa 2f             	cmp    dl,0x2f
c0012790:	75 12                	jne    c00127a4 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012792:	89 c5                	mov    ebp,eax
c0012794:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012799:	74 09                	je     c00127a4 <standardiseFiles(char*, char const*, char const*)+0xdc>
c001279b:	40                   	inc    eax
c001279c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00127a0:	89 cf                	mov    edi,ecx
c00127a2:	eb d6                	jmp    c001277a <standardiseFiles(char*, char const*, char const*)+0xb2>
c00127a4:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00127a9:	75 5b                	jne    c0012806 <standardiseFiles(char*, char const*, char const*)+0x13e>
c00127ab:	80 fa 2e             	cmp    dl,0x2e
c00127ae:	75 56                	jne    c0012806 <standardiseFiles(char*, char const*, char const*)+0x13e>
c00127b0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00127b4:	74 19                	je     c00127cf <standardiseFiles(char*, char const*, char const*)+0x107>
c00127b6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00127bb:	74 53                	je     c0012810 <standardiseFiles(char*, char const*, char const*)+0x148>
c00127bd:	89 f9                	mov    ecx,edi
c00127bf:	41                   	inc    ecx
c00127c0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00127c3:	80 fa 2f             	cmp    dl,0x2f
c00127c6:	74 f7                	je     c00127bf <standardiseFiles(char*, char const*, char const*)+0xf7>
c00127c8:	80 fa 5c             	cmp    dl,0x5c
c00127cb:	74 f2                	je     c00127bf <standardiseFiles(char*, char const*, char const*)+0xf7>
c00127cd:	eb d1                	jmp    c00127a0 <standardiseFiles(char*, char const*, char const*)+0xd8>
c00127cf:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00127d4:	74 3a                	je     c0012810 <standardiseFiles(char*, char const*, char const*)+0x148>
c00127d6:	83 f8 03             	cmp    eax,0x3
c00127d9:	74 c5                	je     c00127a0 <standardiseFiles(char*, char const*, char const*)+0xd8>
c00127db:	41                   	inc    ecx
c00127dc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00127df:	80 fa 2f             	cmp    dl,0x2f
c00127e2:	74 f7                	je     c00127db <standardiseFiles(char*, char const*, char const*)+0x113>
c00127e4:	80 fa 5c             	cmp    dl,0x5c
c00127e7:	74 f2                	je     c00127db <standardiseFiles(char*, char const*, char const*)+0x113>
c00127e9:	48                   	dec    eax
c00127ea:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00127ee:	75 06                	jne    c00127f6 <standardiseFiles(char*, char const*, char const*)+0x12e>
c00127f0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00127f4:	eb f3                	jmp    c00127e9 <standardiseFiles(char*, char const*, char const*)+0x121>
c00127f6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00127fa:	74 07                	je     c0012803 <standardiseFiles(char*, char const*, char const*)+0x13b>
c00127fc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012800:	48                   	dec    eax
c0012801:	eb f3                	jmp    c00127f6 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012803:	40                   	inc    eax
c0012804:	eb 9a                	jmp    c00127a0 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012806:	80 fa 2f             	cmp    dl,0x2f
c0012809:	74 95                	je     c00127a0 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001280b:	80 fa 5c             	cmp    dl,0x5c
c001280e:	74 90                	je     c00127a0 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012810:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012813:	40                   	inc    eax
c0012814:	eb 8a                	jmp    c00127a0 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012816:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001281a:	83 ec 0c             	sub    esp,0xc
c001281d:	53                   	push   ebx
c001281e:	e8 de de fe ff       	call   c0000701 <strlen>
c0012823:	83 c4 10             	add    esp,0x10
c0012826:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001282b:	75 26                	jne    c0012853 <standardiseFiles(char*, char const*, char const*)+0x18b>
c001282d:	83 ec 0c             	sub    esp,0xc
c0012830:	53                   	push   ebx
c0012831:	e8 cb de fe ff       	call   c0000701 <strlen>
c0012836:	83 c4 10             	add    esp,0x10
c0012839:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001283e:	74 26                	je     c0012866 <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012840:	83 ec 0c             	sub    esp,0xc
c0012843:	53                   	push   ebx
c0012844:	e8 b8 de fe ff       	call   c0000701 <strlen>
c0012849:	83 c4 10             	add    esp,0x10
c001284c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012851:	eb c7                	jmp    c001281a <standardiseFiles(char*, char const*, char const*)+0x152>
c0012853:	83 ec 0c             	sub    esp,0xc
c0012856:	53                   	push   ebx
c0012857:	e8 a5 de fe ff       	call   c0000701 <strlen>
c001285c:	83 c4 10             	add    esp,0x10
c001285f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012864:	74 c7                	je     c001282d <standardiseFiles(char*, char const*, char const*)+0x165>
c0012866:	81 c4 0c 04 00 00    	add    esp,0x40c
c001286c:	5b                   	pop    ebx
c001286d:	5e                   	pop    esi
c001286e:	5f                   	pop    edi
c001286f:	5d                   	pop    ebp
c0012870:	c3                   	ret    
c0012871:	90                   	nop

c0012872 <File::File(char const*, Process*)>:
c0012872:	83 ec 0c             	sub    esp,0xc
c0012875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012879:	83 ec 08             	sub    esp,0x8
c001287c:	6a 00                	push   0x0
c001287e:	50                   	push   eax
c001287f:	e8 ec e7 ff ff       	call   c0011070 <UnixFile::UnixFile(int)>
c0012884:	83 c4 10             	add    esp,0x10
c0012887:	ba c0 98 03 c0       	mov    edx,0xc00398c0
c001288c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012890:	89 10                	mov    DWORD PTR [eax],edx
c0012892:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012896:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001289c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128a0:	83 c0 0d             	add    eax,0xd
c00128a3:	83 ec 04             	sub    esp,0x4
c00128a6:	52                   	push   edx
c00128a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128ab:	50                   	push   eax
c00128ac:	e8 17 fe ff ff       	call   c00126c8 <standardiseFiles(char*, char const*, char const*)>
c00128b1:	83 c4 10             	add    esp,0x10
c00128b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128b8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00128bb:	8d 50 bf             	lea    edx,[eax-0x41]
c00128be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128c2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00128c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128cc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00128d0:	90                   	nop
c00128d1:	83 c4 0c             	add    esp,0xc
c00128d4:	c3                   	ret    
c00128d5:	90                   	nop

c00128d6 <File::open(FileOpenMode)>:
c00128d6:	53                   	push   ebx
c00128d7:	b8 0b 00 00 00       	mov    eax,0xb
c00128dc:	83 ec 08             	sub    esp,0x8
c00128df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00128e3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00128ea:	80 fa 19             	cmp    dl,0x19
c00128ed:	77 40                	ja     c001292f <File::open(FileOpenMode)+0x59>
c00128ef:	8b 14 95 20 c3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3ce0]
c00128f6:	85 d2                	test   edx,edx
c00128f8:	74 35                	je     c001292f <File::open(FileOpenMode)+0x59>
c00128fa:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012900:	85 d2                	test   edx,edx
c0012902:	74 2b                	je     c001292f <File::open(FileOpenMode)+0x59>
c0012904:	b8 06 00 00 00       	mov    eax,0x6
c0012909:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001290d:	75 20                	jne    c001292f <File::open(FileOpenMode)+0x59>
c001290f:	8b 02                	mov    eax,DWORD PTR [edx]
c0012911:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001291b:	51                   	push   ecx
c001291c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001291f:	51                   	push   ecx
c0012920:	52                   	push   edx
c0012921:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012924:	83 c4 10             	add    esp,0x10
c0012927:	85 c0                	test   eax,eax
c0012929:	75 04                	jne    c001292f <File::open(FileOpenMode)+0x59>
c001292b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001292f:	83 c4 08             	add    esp,0x8
c0012932:	5b                   	pop    ebx
c0012933:	c3                   	ret    

c0012934 <File::close()>:
c0012934:	53                   	push   ebx
c0012935:	b8 0b 00 00 00       	mov    eax,0xb
c001293a:	83 ec 08             	sub    esp,0x8
c001293d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012941:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012948:	80 fa 19             	cmp    dl,0x19
c001294b:	77 41                	ja     c001298e <File::close()+0x5a>
c001294d:	8b 1c 95 20 c3 03 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffc3ce0]
c0012954:	85 db                	test   ebx,ebx
c0012956:	74 36                	je     c001298e <File::close()+0x5a>
c0012958:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001295f:	74 2d                	je     c001298e <File::close()+0x5a>
c0012961:	b8 05 00 00 00       	mov    eax,0x5
c0012966:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001296a:	74 22                	je     c001298e <File::close()+0x5a>
c001296c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012970:	8b 04 95 20 c3 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc3ce0]
c0012977:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001297d:	53                   	push   ebx
c001297e:	53                   	push   ebx
c001297f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012981:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012987:	50                   	push   eax
c0012988:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001298b:	83 c4 10             	add    esp,0x10
c001298e:	83 c4 08             	add    esp,0x8
c0012991:	5b                   	pop    ebx
c0012992:	c3                   	ret    
c0012993:	90                   	nop

c0012994 <File::seek(unsigned long long)>:
c0012994:	56                   	push   esi
c0012995:	53                   	push   ebx
c0012996:	b8 0b 00 00 00       	mov    eax,0xb
c001299b:	51                   	push   ecx
c001299c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00129a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00129a4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00129ab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00129af:	80 fa 19             	cmp    dl,0x19
c00129b2:	77 31                	ja     c00129e5 <File::seek(unsigned long long)+0x51>
c00129b4:	8b 14 95 20 c3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3ce0]
c00129bb:	85 d2                	test   edx,edx
c00129bd:	74 26                	je     c00129e5 <File::seek(unsigned long long)+0x51>
c00129bf:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00129c5:	85 d2                	test   edx,edx
c00129c7:	74 1c                	je     c00129e5 <File::seek(unsigned long long)+0x51>
c00129c9:	b8 05 00 00 00       	mov    eax,0x5
c00129ce:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00129d2:	74 11                	je     c00129e5 <File::seek(unsigned long long)+0x51>
c00129d4:	8b 02                	mov    eax,DWORD PTR [edx]
c00129d6:	53                   	push   ebx
c00129d7:	51                   	push   ecx
c00129d8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00129de:	52                   	push   edx
c00129df:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00129e2:	83 c4 10             	add    esp,0x10
c00129e5:	5a                   	pop    edx
c00129e6:	5b                   	pop    ebx
c00129e7:	5e                   	pop    esi
c00129e8:	c3                   	ret    
c00129e9:	90                   	nop

c00129ea <File::tell(unsigned long long*)>:
c00129ea:	83 ec 0c             	sub    esp,0xc
c00129ed:	b8 0b 00 00 00       	mov    eax,0xb
c00129f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00129f6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00129fd:	80 fa 19             	cmp    dl,0x19
c0012a00:	77 34                	ja     c0012a36 <File::tell(unsigned long long*)+0x4c>
c0012a02:	8b 14 95 20 c3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3ce0]
c0012a09:	85 d2                	test   edx,edx
c0012a0b:	74 29                	je     c0012a36 <File::tell(unsigned long long*)+0x4c>
c0012a0d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012a13:	85 d2                	test   edx,edx
c0012a15:	74 1f                	je     c0012a36 <File::tell(unsigned long long*)+0x4c>
c0012a17:	b8 05 00 00 00       	mov    eax,0x5
c0012a1c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012a20:	74 14                	je     c0012a36 <File::tell(unsigned long long*)+0x4c>
c0012a22:	50                   	push   eax
c0012a23:	8b 02                	mov    eax,DWORD PTR [edx]
c0012a25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a29:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012a2f:	52                   	push   edx
c0012a30:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012a33:	83 c4 10             	add    esp,0x10
c0012a36:	83 c4 0c             	add    esp,0xc
c0012a39:	c3                   	ret    

c0012a3a <File::rewind()>:
c0012a3a:	83 ec 10             	sub    esp,0x10
c0012a3d:	6a 00                	push   0x0
c0012a3f:	6a 00                	push   0x0
c0012a41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a45:	e8 4a ff ff ff       	call   c0012994 <File::seek(unsigned long long)>
c0012a4a:	83 c4 1c             	add    esp,0x1c
c0012a4d:	c3                   	ret    

c0012a4e <File::unlink()>:
c0012a4e:	83 ec 0c             	sub    esp,0xc
c0012a51:	b8 0b 00 00 00       	mov    eax,0xb
c0012a56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a5a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a61:	80 f9 19             	cmp    cl,0x19
c0012a64:	77 2f                	ja     c0012a95 <File::unlink()+0x47>
c0012a66:	8b 0c 8d 20 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3ce0]
c0012a6d:	85 c9                	test   ecx,ecx
c0012a6f:	74 24                	je     c0012a95 <File::unlink()+0x47>
c0012a71:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a77:	85 c9                	test   ecx,ecx
c0012a79:	74 1a                	je     c0012a95 <File::unlink()+0x47>
c0012a7b:	b8 06 00 00 00       	mov    eax,0x6
c0012a80:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a84:	75 0f                	jne    c0012a95 <File::unlink()+0x47>
c0012a86:	83 c2 0d             	add    edx,0xd
c0012a89:	50                   	push   eax
c0012a8a:	50                   	push   eax
c0012a8b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012a8d:	52                   	push   edx
c0012a8e:	51                   	push   ecx
c0012a8f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012a92:	83 c4 10             	add    esp,0x10
c0012a95:	83 c4 0c             	add    esp,0xc
c0012a98:	c3                   	ret    
c0012a99:	90                   	nop

c0012a9a <File::rename(char const*)>:
c0012a9a:	83 ec 0c             	sub    esp,0xc
c0012a9d:	b8 0b 00 00 00       	mov    eax,0xb
c0012aa2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012aa6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012aad:	80 f9 19             	cmp    cl,0x19
c0012ab0:	77 32                	ja     c0012ae4 <File::rename(char const*)+0x4a>
c0012ab2:	8b 0c 8d 20 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3ce0]
c0012ab9:	85 c9                	test   ecx,ecx
c0012abb:	74 27                	je     c0012ae4 <File::rename(char const*)+0x4a>
c0012abd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ac3:	85 c9                	test   ecx,ecx
c0012ac5:	74 1d                	je     c0012ae4 <File::rename(char const*)+0x4a>
c0012ac7:	b8 06 00 00 00       	mov    eax,0x6
c0012acc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ad0:	75 12                	jne    c0012ae4 <File::rename(char const*)+0x4a>
c0012ad2:	83 c2 0d             	add    edx,0xd
c0012ad5:	50                   	push   eax
c0012ad6:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ad8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012adc:	52                   	push   edx
c0012add:	51                   	push   ecx
c0012ade:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012ae1:	83 c4 10             	add    esp,0x10
c0012ae4:	83 c4 0c             	add    esp,0xc
c0012ae7:	c3                   	ret    

c0012ae8 <File::chfatattr(unsigned char, unsigned char)>:
c0012ae8:	57                   	push   edi
c0012ae9:	b8 0b 00 00 00       	mov    eax,0xb
c0012aee:	56                   	push   esi
c0012aef:	53                   	push   ebx
c0012af0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012af4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012af8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012aff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012b03:	80 f9 19             	cmp    cl,0x19
c0012b06:	77 37                	ja     c0012b3f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012b08:	8b 0c 8d 20 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3ce0]
c0012b0f:	85 c9                	test   ecx,ecx
c0012b11:	74 2c                	je     c0012b3f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012b13:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012b19:	85 c9                	test   ecx,ecx
c0012b1b:	74 22                	je     c0012b3f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012b1d:	b8 06 00 00 00       	mov    eax,0x6
c0012b22:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012b26:	75 17                	jne    c0012b3f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012b28:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012b2a:	89 f0                	mov    eax,esi
c0012b2c:	83 c2 0d             	add    edx,0xd
c0012b2f:	0f b6 f0             	movzx  esi,al
c0012b32:	0f b6 db             	movzx  ebx,bl
c0012b35:	56                   	push   esi
c0012b36:	53                   	push   ebx
c0012b37:	52                   	push   edx
c0012b38:	51                   	push   ecx
c0012b39:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012b3c:	83 c4 10             	add    esp,0x10
c0012b3f:	5b                   	pop    ebx
c0012b40:	5e                   	pop    esi
c0012b41:	5f                   	pop    edi
c0012b42:	c3                   	ret    
c0012b43:	90                   	nop

c0012b44 <File::exists()>:
c0012b44:	83 ec 0c             	sub    esp,0xc
c0012b47:	31 c0                	xor    eax,eax
c0012b49:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012b4d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012b54:	80 f9 19             	cmp    cl,0x19
c0012b57:	77 24                	ja     c0012b7d <File::exists()+0x39>
c0012b59:	8b 0c 8d 20 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3ce0]
c0012b60:	85 c9                	test   ecx,ecx
c0012b62:	74 19                	je     c0012b7d <File::exists()+0x39>
c0012b64:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012b6a:	85 c9                	test   ecx,ecx
c0012b6c:	74 0f                	je     c0012b7d <File::exists()+0x39>
c0012b6e:	83 c2 0d             	add    edx,0xd
c0012b71:	50                   	push   eax
c0012b72:	50                   	push   eax
c0012b73:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012b75:	52                   	push   edx
c0012b76:	51                   	push   ecx
c0012b77:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012b7a:	83 c4 10             	add    esp,0x10
c0012b7d:	83 c4 0c             	add    esp,0xc
c0012b80:	c3                   	ret    
c0012b81:	90                   	nop

c0012b82 <File::stat(unsigned long long*, bool*)>:
c0012b82:	56                   	push   esi
c0012b83:	53                   	push   ebx
c0012b84:	50                   	push   eax
c0012b85:	b8 0b 00 00 00       	mov    eax,0xb
c0012b8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012b8e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012b92:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012b99:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012b9d:	80 f9 19             	cmp    cl,0x19
c0012ba0:	77 3d                	ja     c0012bdf <File::stat(unsigned long long*, bool*)+0x5d>
c0012ba2:	8b 0c 8d 20 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3ce0]
c0012ba9:	85 c9                	test   ecx,ecx
c0012bab:	74 32                	je     c0012bdf <File::stat(unsigned long long*, bool*)+0x5d>
c0012bad:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012bb3:	85 c9                	test   ecx,ecx
c0012bb5:	74 28                	je     c0012bdf <File::stat(unsigned long long*, bool*)+0x5d>
c0012bb7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012bb9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012bbd:	74 13                	je     c0012bd2 <File::stat(unsigned long long*, bool*)+0x50>
c0012bbf:	83 ec 04             	sub    esp,0x4
c0012bc2:	56                   	push   esi
c0012bc3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012bc9:	51                   	push   ecx
c0012bca:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012bcd:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012bd0:	eb 0a                	jmp    c0012bdc <File::stat(unsigned long long*, bool*)+0x5a>
c0012bd2:	53                   	push   ebx
c0012bd3:	83 c2 0d             	add    edx,0xd
c0012bd6:	56                   	push   esi
c0012bd7:	52                   	push   edx
c0012bd8:	51                   	push   ecx
c0012bd9:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012bdc:	83 c4 10             	add    esp,0x10
c0012bdf:	5a                   	pop    edx
c0012be0:	5b                   	pop    ebx
c0012be1:	5e                   	pop    esi
c0012be2:	c3                   	ret    

c0012be3 <getcwd(Process*, char*, int)>:
c0012be3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012be7:	31 c0                	xor    eax,eax
c0012be9:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012bec:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012bf0:	7d 15                	jge    c0012c07 <getcwd(Process*, char*, int)+0x24>
c0012bf2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012bf6:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012bfd:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012c00:	84 c9                	test   cl,cl
c0012c02:	74 06                	je     c0012c0a <getcwd(Process*, char*, int)+0x27>
c0012c04:	40                   	inc    eax
c0012c05:	eb e2                	jmp    c0012be9 <getcwd(Process*, char*, int)+0x6>
c0012c07:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012c0a:	31 c0                	xor    eax,eax
c0012c0c:	c3                   	ret    

c0012c0d <setcwd(Process*, char*)>:
c0012c0d:	55                   	push   ebp
c0012c0e:	57                   	push   edi
c0012c0f:	56                   	push   esi
c0012c10:	53                   	push   ebx
c0012c11:	81 ec 20 02 00 00    	sub    esp,0x220
c0012c17:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012c1e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012c24:	57                   	push   edi
c0012c25:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012c2c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012c30:	56                   	push   esi
c0012c31:	e8 92 fa ff ff       	call   c00126c8 <standardiseFiles(char*, char const*, char const*)>
c0012c36:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c39:	e8 c3 da fe ff       	call   c0000701 <strlen>
c0012c3e:	83 c4 10             	add    esp,0x10
c0012c41:	83 f8 02             	cmp    eax,0x2
c0012c44:	77 17                	ja     c0012c5d <setcwd(Process*, char*)+0x50>
c0012c46:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012c4b:	83 e8 41             	sub    eax,0x41
c0012c4e:	83 f8 19             	cmp    eax,0x19
c0012c51:	76 24                	jbe    c0012c77 <setcwd(Process*, char*)+0x6a>
c0012c53:	b8 03 00 00 00       	mov    eax,0x3
c0012c58:	e9 cb 00 00 00       	jmp    c0012d28 <setcwd(Process*, char*)+0x11b>
c0012c5d:	83 ec 0c             	sub    esp,0xc
c0012c60:	56                   	push   esi
c0012c61:	e8 9b da fe ff       	call   c0000701 <strlen>
c0012c66:	83 c4 10             	add    esp,0x10
c0012c69:	83 f8 03             	cmp    eax,0x3
c0012c6c:	75 33                	jne    c0012ca1 <setcwd(Process*, char*)+0x94>
c0012c6e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012c73:	75 2c                	jne    c0012ca1 <setcwd(Process*, char*)+0x94>
c0012c75:	eb cf                	jmp    c0012c46 <setcwd(Process*, char*)+0x39>
c0012c77:	8b 14 85 20 c3 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc3ce0]
c0012c7e:	b8 05 00 00 00       	mov    eax,0x5
c0012c83:	85 d2                	test   edx,edx
c0012c85:	0f 84 9d 00 00 00    	je     c0012d28 <setcwd(Process*, char*)+0x11b>
c0012c8b:	b8 06 00 00 00       	mov    eax,0x6
c0012c90:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012c97:	0f 84 8b 00 00 00    	je     c0012d28 <setcwd(Process*, char*)+0x11b>
c0012c9d:	51                   	push   ecx
c0012c9e:	51                   	push   ecx
c0012c9f:	eb 7b                	jmp    c0012d1c <setcwd(Process*, char*)+0x10f>
c0012ca1:	83 ec 0c             	sub    esp,0xc
c0012ca4:	68 14 01 00 00       	push   0x114
c0012ca9:	e8 96 f7 ff ff       	call   c0012444 <operator new(unsigned long)>
c0012cae:	83 c4 0c             	add    esp,0xc
c0012cb1:	89 c3                	mov    ebx,eax
c0012cb3:	55                   	push   ebp
c0012cb4:	56                   	push   esi
c0012cb5:	50                   	push   eax
c0012cb6:	e8 b7 fb ff ff       	call   c0012872 <File::File(char const*, Process*)>
c0012cbb:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012cc0:	83 c4 0c             	add    esp,0xc
c0012cc3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012cc7:	50                   	push   eax
c0012cc8:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012ccc:	50                   	push   eax
c0012ccd:	53                   	push   ebx
c0012cce:	e8 af fe ff ff       	call   c0012b82 <File::stat(unsigned long long*, bool*)>
c0012cd3:	83 c4 10             	add    esp,0x10
c0012cd6:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012cd8:	83 f8 02             	cmp    eax,0x2
c0012cdb:	75 09                	jne    c0012ce6 <setcwd(Process*, char*)+0xd9>
c0012cdd:	83 ec 0c             	sub    esp,0xc
c0012ce0:	53                   	push   ebx
c0012ce1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012ce4:	eb 0d                	jmp    c0012cf3 <setcwd(Process*, char*)+0xe6>
c0012ce6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012ce9:	85 c0                	test   eax,eax
c0012ceb:	74 10                	je     c0012cfd <setcwd(Process*, char*)+0xf0>
c0012ced:	83 ec 0c             	sub    esp,0xc
c0012cf0:	53                   	push   ebx
c0012cf1:	ff d2                	call   edx
c0012cf3:	83 c4 10             	add    esp,0x10
c0012cf6:	b8 01 00 00 00       	mov    eax,0x1
c0012cfb:	eb 2b                	jmp    c0012d28 <setcwd(Process*, char*)+0x11b>
c0012cfd:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012d02:	75 10                	jne    c0012d14 <setcwd(Process*, char*)+0x107>
c0012d04:	83 ec 0c             	sub    esp,0xc
c0012d07:	53                   	push   ebx
c0012d08:	ff d2                	call   edx
c0012d0a:	83 c4 10             	add    esp,0x10
c0012d0d:	b8 02 00 00 00       	mov    eax,0x2
c0012d12:	eb 14                	jmp    c0012d28 <setcwd(Process*, char*)+0x11b>
c0012d14:	83 ec 0c             	sub    esp,0xc
c0012d17:	53                   	push   ebx
c0012d18:	ff d2                	call   edx
c0012d1a:	58                   	pop    eax
c0012d1b:	5a                   	pop    edx
c0012d1c:	56                   	push   esi
c0012d1d:	57                   	push   edi
c0012d1e:	e8 d1 da fe ff       	call   c00007f4 <strcpy>
c0012d23:	83 c4 10             	add    esp,0x10
c0012d26:	31 c0                	xor    eax,eax
c0012d28:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012d2e:	5b                   	pop    ebx
c0012d2f:	5e                   	pop    esi
c0012d30:	5f                   	pop    edi
c0012d31:	5d                   	pop    ebp
c0012d32:	c3                   	ret    
c0012d33:	90                   	nop

c0012d34 <Directory::Directory(char const*, Process*)>:
c0012d34:	83 ec 0c             	sub    esp,0xc
c0012d37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d3b:	83 ec 08             	sub    esp,0x8
c0012d3e:	6a 00                	push   0x0
c0012d40:	50                   	push   eax
c0012d41:	e8 2a e3 ff ff       	call   c0011070 <UnixFile::UnixFile(int)>
c0012d46:	83 c4 10             	add    esp,0x10
c0012d49:	ba dc 98 03 c0       	mov    edx,0xc00398dc
c0012d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d52:	89 10                	mov    DWORD PTR [eax],edx
c0012d54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d58:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d62:	83 c0 0d             	add    eax,0xd
c0012d65:	83 ec 04             	sub    esp,0x4
c0012d68:	52                   	push   edx
c0012d69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d6d:	50                   	push   eax
c0012d6e:	e8 55 f9 ff ff       	call   c00126c8 <standardiseFiles(char*, char const*, char const*)>
c0012d73:	83 c4 10             	add    esp,0x10
c0012d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d7a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012d7d:	8d 50 bf             	lea    edx,[eax-0x41]
c0012d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d84:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d8e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012d92:	90                   	nop
c0012d93:	83 c4 0c             	add    esp,0xc
c0012d96:	c3                   	ret    
c0012d97:	90                   	nop

c0012d98 <Directory::open()>:
c0012d98:	53                   	push   ebx
c0012d99:	b8 0b 00 00 00       	mov    eax,0xb
c0012d9e:	83 ec 08             	sub    esp,0x8
c0012da1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012da5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012dac:	80 fa 19             	cmp    dl,0x19
c0012daf:	77 3d                	ja     c0012dee <Directory::open()+0x56>
c0012db1:	8b 14 95 20 c3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3ce0]
c0012db8:	85 d2                	test   edx,edx
c0012dba:	74 32                	je     c0012dee <Directory::open()+0x56>
c0012dbc:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012dc2:	85 d2                	test   edx,edx
c0012dc4:	74 28                	je     c0012dee <Directory::open()+0x56>
c0012dc6:	b8 06 00 00 00       	mov    eax,0x6
c0012dcb:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012dcf:	75 1d                	jne    c0012dee <Directory::open()+0x56>
c0012dd1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012dd7:	50                   	push   eax
c0012dd8:	8b 02                	mov    eax,DWORD PTR [edx]
c0012dda:	51                   	push   ecx
c0012ddb:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012dde:	51                   	push   ecx
c0012ddf:	52                   	push   edx
c0012de0:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012de3:	83 c4 10             	add    esp,0x10
c0012de6:	85 c0                	test   eax,eax
c0012de8:	75 04                	jne    c0012dee <Directory::open()+0x56>
c0012dea:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012dee:	83 c4 08             	add    esp,0x8
c0012df1:	5b                   	pop    ebx
c0012df2:	c3                   	ret    
c0012df3:	90                   	nop

c0012df4 <Directory::close()>:
c0012df4:	53                   	push   ebx
c0012df5:	b8 0b 00 00 00       	mov    eax,0xb
c0012dfa:	83 ec 08             	sub    esp,0x8
c0012dfd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012e01:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e08:	80 fa 19             	cmp    dl,0x19
c0012e0b:	77 41                	ja     c0012e4e <Directory::close()+0x5a>
c0012e0d:	8b 1c 95 20 c3 03 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffc3ce0]
c0012e14:	85 db                	test   ebx,ebx
c0012e16:	74 36                	je     c0012e4e <Directory::close()+0x5a>
c0012e18:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012e1f:	74 2d                	je     c0012e4e <Directory::close()+0x5a>
c0012e21:	b8 05 00 00 00       	mov    eax,0x5
c0012e26:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012e2a:	74 22                	je     c0012e4e <Directory::close()+0x5a>
c0012e2c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012e30:	8b 04 95 20 c3 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc3ce0]
c0012e37:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012e3d:	53                   	push   ebx
c0012e3e:	53                   	push   ebx
c0012e3f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e41:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012e47:	50                   	push   eax
c0012e48:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0012e4b:	83 c4 10             	add    esp,0x10
c0012e4e:	83 c4 08             	add    esp,0x8
c0012e51:	5b                   	pop    ebx
c0012e52:	c3                   	ret    
c0012e53:	90                   	nop

c0012e54 <Directory::unlink()>:
c0012e54:	83 ec 0c             	sub    esp,0xc
c0012e57:	b8 0b 00 00 00       	mov    eax,0xb
c0012e5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e60:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e67:	80 f9 19             	cmp    cl,0x19
c0012e6a:	77 2f                	ja     c0012e9b <Directory::unlink()+0x47>
c0012e6c:	8b 0c 8d 20 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3ce0]
c0012e73:	85 c9                	test   ecx,ecx
c0012e75:	74 24                	je     c0012e9b <Directory::unlink()+0x47>
c0012e77:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e7d:	85 c9                	test   ecx,ecx
c0012e7f:	74 1a                	je     c0012e9b <Directory::unlink()+0x47>
c0012e81:	b8 06 00 00 00       	mov    eax,0x6
c0012e86:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e8a:	75 0f                	jne    c0012e9b <Directory::unlink()+0x47>
c0012e8c:	83 c2 0d             	add    edx,0xd
c0012e8f:	50                   	push   eax
c0012e90:	50                   	push   eax
c0012e91:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e93:	52                   	push   edx
c0012e94:	51                   	push   ecx
c0012e95:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012e98:	83 c4 10             	add    esp,0x10
c0012e9b:	83 c4 0c             	add    esp,0xc
c0012e9e:	c3                   	ret    
c0012e9f:	90                   	nop

c0012ea0 <Directory::rename(char const*)>:
c0012ea0:	83 ec 0c             	sub    esp,0xc
c0012ea3:	b8 0b 00 00 00       	mov    eax,0xb
c0012ea8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012eac:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012eb3:	80 f9 19             	cmp    cl,0x19
c0012eb6:	77 32                	ja     c0012eea <Directory::rename(char const*)+0x4a>
c0012eb8:	8b 0c 8d 20 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3ce0]
c0012ebf:	85 c9                	test   ecx,ecx
c0012ec1:	74 27                	je     c0012eea <Directory::rename(char const*)+0x4a>
c0012ec3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ec9:	85 c9                	test   ecx,ecx
c0012ecb:	74 1d                	je     c0012eea <Directory::rename(char const*)+0x4a>
c0012ecd:	b8 06 00 00 00       	mov    eax,0x6
c0012ed2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ed6:	75 12                	jne    c0012eea <Directory::rename(char const*)+0x4a>
c0012ed8:	83 c2 0d             	add    edx,0xd
c0012edb:	50                   	push   eax
c0012edc:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ede:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ee2:	52                   	push   edx
c0012ee3:	51                   	push   ecx
c0012ee4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012ee7:	83 c4 10             	add    esp,0x10
c0012eea:	83 c4 0c             	add    esp,0xc
c0012eed:	c3                   	ret    

c0012eee <Directory::exists()>:
c0012eee:	83 ec 0c             	sub    esp,0xc
c0012ef1:	31 c0                	xor    eax,eax
c0012ef3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ef7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012efe:	80 f9 19             	cmp    cl,0x19
c0012f01:	77 24                	ja     c0012f27 <Directory::exists()+0x39>
c0012f03:	8b 0c 8d 20 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3ce0]
c0012f0a:	85 c9                	test   ecx,ecx
c0012f0c:	74 19                	je     c0012f27 <Directory::exists()+0x39>
c0012f0e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f14:	85 c9                	test   ecx,ecx
c0012f16:	74 0f                	je     c0012f27 <Directory::exists()+0x39>
c0012f18:	83 c2 0d             	add    edx,0xd
c0012f1b:	50                   	push   eax
c0012f1c:	50                   	push   eax
c0012f1d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f1f:	52                   	push   edx
c0012f20:	51                   	push   ecx
c0012f21:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012f24:	83 c4 10             	add    esp,0x10
c0012f27:	83 c4 0c             	add    esp,0xc
c0012f2a:	c3                   	ret    
c0012f2b:	90                   	nop

c0012f2c <Directory::read(dirent*)>:
c0012f2c:	83 ec 1c             	sub    esp,0x1c
c0012f2f:	b8 0b 00 00 00       	mov    eax,0xb
c0012f34:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012f38:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f3f:	80 fa 19             	cmp    dl,0x19
c0012f42:	77 30                	ja     c0012f74 <Directory::read(dirent*)+0x48>
c0012f44:	8b 14 95 20 c3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3ce0]
c0012f4b:	85 d2                	test   edx,edx
c0012f4d:	74 25                	je     c0012f74 <Directory::read(dirent*)+0x48>
c0012f4f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012f56:	74 1c                	je     c0012f74 <Directory::read(dirent*)+0x48>
c0012f58:	83 ec 0c             	sub    esp,0xc
c0012f5b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f5d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012f61:	52                   	push   edx
c0012f62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012f66:	6a 00                	push   0x0
c0012f68:	68 10 01 00 00       	push   0x110
c0012f6d:	51                   	push   ecx
c0012f6e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012f71:	83 c4 20             	add    esp,0x20
c0012f74:	83 c4 1c             	add    esp,0x1c
c0012f77:	c3                   	ret    

c0012f78 <Directory::create()>:
c0012f78:	83 ec 0c             	sub    esp,0xc
c0012f7b:	b8 0b 00 00 00       	mov    eax,0xb
c0012f80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f84:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f8b:	80 f9 19             	cmp    cl,0x19
c0012f8e:	77 2f                	ja     c0012fbf <Directory::create()+0x47>
c0012f90:	8b 0c 8d 20 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3ce0]
c0012f97:	85 c9                	test   ecx,ecx
c0012f99:	74 24                	je     c0012fbf <Directory::create()+0x47>
c0012f9b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fa1:	85 c9                	test   ecx,ecx
c0012fa3:	74 1a                	je     c0012fbf <Directory::create()+0x47>
c0012fa5:	b8 06 00 00 00       	mov    eax,0x6
c0012faa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fae:	75 0f                	jne    c0012fbf <Directory::create()+0x47>
c0012fb0:	83 c2 0d             	add    edx,0xd
c0012fb3:	50                   	push   eax
c0012fb4:	50                   	push   eax
c0012fb5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012fb7:	52                   	push   edx
c0012fb8:	51                   	push   ecx
c0012fb9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0012fbc:	83 c4 10             	add    esp,0x10
c0012fbf:	83 c4 0c             	add    esp,0xc
c0012fc2:	c3                   	ret    
c0012fc3:	90                   	nop

c0012fc4 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0012fc4:	b8 0a 00 00 00       	mov    eax,0xa
c0012fc9:	c3                   	ret    

c0012fca <Bus::Bus(char const*)>:
c0012fca:	83 ec 0c             	sub    esp,0xc
c0012fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fd1:	83 ec 08             	sub    esp,0x8
c0012fd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fd8:	50                   	push   eax
c0012fd9:	e8 60 09 00 00       	call   c001393e <Device::Device(char const*)>
c0012fde:	83 c4 10             	add    esp,0x10
c0012fe1:	ba f8 98 03 c0       	mov    edx,0xc00398f8
c0012fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fea:	89 10                	mov    DWORD PTR [eax],edx
c0012fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ff0:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0012ffa:	90                   	nop
c0012ffb:	83 c4 0c             	add    esp,0xc
c0012ffe:	c3                   	ret    
c0012fff:	90                   	nop

c0013000 <Bus::~Bus()>:
c0013000:	83 ec 0c             	sub    esp,0xc
c0013003:	ba f8 98 03 c0       	mov    edx,0xc00398f8
c0013008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001300c:	89 10                	mov    DWORD PTR [eax],edx
c001300e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013012:	83 ec 0c             	sub    esp,0xc
c0013015:	50                   	push   eax
c0013016:	e8 d5 05 00 00       	call   c00135f0 <Device::~Device()>
c001301b:	83 c4 10             	add    esp,0x10
c001301e:	90                   	nop
c001301f:	83 c4 0c             	add    esp,0xc
c0013022:	c3                   	ret    
c0013023:	90                   	nop

c0013024 <Bus::~Bus()>:
c0013024:	83 ec 0c             	sub    esp,0xc
c0013027:	83 ec 0c             	sub    esp,0xc
c001302a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001302e:	e8 cd ff ff ff       	call   c0013000 <Bus::~Bus()>
c0013033:	83 c4 10             	add    esp,0x10
c0013036:	83 ec 08             	sub    esp,0x8
c0013039:	68 58 01 00 00       	push   0x158
c001303e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013042:	e8 0c f4 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c0013047:	83 c4 10             	add    esp,0x10
c001304a:	83 c4 0c             	add    esp,0xc
c001304d:	c3                   	ret    

c001304e <Buzzer::Buzzer(char const*)>:
c001304e:	83 ec 0c             	sub    esp,0xc
c0013051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013055:	83 ec 08             	sub    esp,0x8
c0013058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001305c:	50                   	push   eax
c001305d:	e8 dc 08 00 00       	call   c001393e <Device::Device(char const*)>
c0013062:	83 c4 10             	add    esp,0x10
c0013065:	ba 24 99 03 c0       	mov    edx,0xc0039924
c001306a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001306e:	89 10                	mov    DWORD PTR [eax],edx
c0013070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013074:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001307e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013082:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c001308c:	90                   	nop
c001308d:	83 c4 0c             	add    esp,0xc
c0013090:	c3                   	ret    
c0013091:	90                   	nop

c0013092 <Buzzer::~Buzzer()>:
c0013092:	83 ec 0c             	sub    esp,0xc
c0013095:	ba 24 99 03 c0       	mov    edx,0xc0039924
c001309a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001309e:	89 10                	mov    DWORD PTR [eax],edx
c00130a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130a4:	83 ec 0c             	sub    esp,0xc
c00130a7:	50                   	push   eax
c00130a8:	e8 43 05 00 00       	call   c00135f0 <Device::~Device()>
c00130ad:	83 c4 10             	add    esp,0x10
c00130b0:	90                   	nop
c00130b1:	83 c4 0c             	add    esp,0xc
c00130b4:	c3                   	ret    
c00130b5:	90                   	nop

c00130b6 <Buzzer::~Buzzer()>:
c00130b6:	83 ec 0c             	sub    esp,0xc
c00130b9:	83 ec 0c             	sub    esp,0xc
c00130bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130c0:	e8 cd ff ff ff       	call   c0013092 <Buzzer::~Buzzer()>
c00130c5:	83 c4 10             	add    esp,0x10
c00130c8:	83 ec 08             	sub    esp,0x8
c00130cb:	68 5c 01 00 00       	push   0x15c
c00130d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130d4:	e8 7a f3 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c00130d9:	83 c4 10             	add    esp,0x10
c00130dc:	83 c4 0c             	add    esp,0xc
c00130df:	c3                   	ret    

c00130e0 <Buzzer::stop()>:
c00130e0:	83 ec 14             	sub    esp,0x14
c00130e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130e7:	8b 10                	mov    edx,DWORD PTR [eax]
c00130e9:	6a 00                	push   0x0
c00130eb:	50                   	push   eax
c00130ec:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00130ef:	83 c4 1c             	add    esp,0x1c
c00130f2:	c3                   	ret    

c00130f3 <beepThread(void*)>:
c00130f3:	53                   	push   ebx
c00130f4:	83 ec 08             	sub    esp,0x8
c00130f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130fb:	e8 38 b2 ff ff       	call   c000e338 <unlockScheduler()>
c0013100:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013105:	52                   	push   edx
c0013106:	52                   	push   edx
c0013107:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001310d:	52                   	push   edx
c001310e:	50                   	push   eax
c001310f:	e8 db b8 ff ff       	call   c000e9ef <nanoSleep(unsigned long long)>
c0013114:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013117:	e8 c4 ff ff ff       	call   c00130e0 <Buzzer::stop()>
c001311c:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013124:	83 c4 18             	add    esp,0x18
c0013127:	5b                   	pop    ebx
c0013128:	e9 08 b8 ff ff       	jmp    c000e935 <blockTask(TaskState)>
c001312d:	90                   	nop

c001312e <Buzzer::beep(int, int, bool)>:
c001312e:	57                   	push   edi
c001312f:	56                   	push   esi
c0013130:	53                   	push   ebx
c0013131:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013135:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013139:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001313d:	52                   	push   edx
c001313e:	52                   	push   edx
c001313f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013141:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013145:	56                   	push   esi
c0013146:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013149:	83 c4 10             	add    esp,0x10
c001314c:	89 f8                	mov    eax,edi
c001314e:	84 c0                	test   al,al
c0013150:	74 1f                	je     c0013171 <Buzzer::beep(int, int, bool)+0x43>
c0013152:	50                   	push   eax
c0013153:	50                   	push   eax
c0013154:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001315a:	99                   	cdq    
c001315b:	52                   	push   edx
c001315c:	50                   	push   eax
c001315d:	e8 8d b8 ff ff       	call   c000e9ef <nanoSleep(unsigned long long)>
c0013162:	83 c4 10             	add    esp,0x10
c0013165:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013169:	5b                   	pop    ebx
c001316a:	5e                   	pop    esi
c001316b:	5f                   	pop    edi
c001316c:	e9 6f ff ff ff       	jmp    c00130e0 <Buzzer::stop()>
c0013171:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013177:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c001317c:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013184:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013188:	c7 44 24 14 f3 30 01 c0 	mov    DWORD PTR [esp+0x14],0xc00130f3
c0013190:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013194:	5b                   	pop    ebx
c0013195:	5e                   	pop    esi
c0013196:	5f                   	pop    edi
c0013197:	e9 c4 b2 ff ff       	jmp    c000e460 <Process::createThread(void (*)(void*), void*, int)>

c001319c <loadClockSettings()>:
c001319c:	c7 05 8c be 03 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc003be8c,0xa
c00131a6:	c6 05 89 be 03 c0 00 	mov    BYTE PTR ds:0xc003be89,0x0
c00131ad:	c6 05 88 be 03 c0 01 	mov    BYTE PTR ds:0xc003be88,0x1
c00131b4:	c3                   	ret    
c00131b5:	90                   	nop

c00131b6 <Clock::Clock(char const*)>:
c00131b6:	83 ec 0c             	sub    esp,0xc
c00131b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131bd:	83 ec 08             	sub    esp,0x8
c00131c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131c4:	50                   	push   eax
c00131c5:	e8 74 07 00 00       	call   c001393e <Device::Device(char const*)>
c00131ca:	83 c4 10             	add    esp,0x10
c00131cd:	ba 54 99 03 c0       	mov    edx,0xc0039954
c00131d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131d6:	89 10                	mov    DWORD PTR [eax],edx
c00131d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131dc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00131e6:	90                   	nop
c00131e7:	83 c4 0c             	add    esp,0xc
c00131ea:	c3                   	ret    
c00131eb:	90                   	nop

c00131ec <Clock::~Clock()>:
c00131ec:	83 ec 0c             	sub    esp,0xc
c00131ef:	ba 54 99 03 c0       	mov    edx,0xc0039954
c00131f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131f8:	89 10                	mov    DWORD PTR [eax],edx
c00131fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131fe:	83 ec 0c             	sub    esp,0xc
c0013201:	50                   	push   eax
c0013202:	e8 e9 03 00 00       	call   c00135f0 <Device::~Device()>
c0013207:	83 c4 10             	add    esp,0x10
c001320a:	90                   	nop
c001320b:	83 c4 0c             	add    esp,0xc
c001320e:	c3                   	ret    
c001320f:	90                   	nop

c0013210 <Clock::~Clock()>:
c0013210:	83 ec 0c             	sub    esp,0xc
c0013213:	83 ec 0c             	sub    esp,0xc
c0013216:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001321a:	e8 cd ff ff ff       	call   c00131ec <Clock::~Clock()>
c001321f:	83 c4 10             	add    esp,0x10
c0013222:	83 ec 08             	sub    esp,0x8
c0013225:	68 58 01 00 00       	push   0x158
c001322a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001322e:	e8 20 f2 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c0013233:	83 c4 10             	add    esp,0x10
c0013236:	83 c4 0c             	add    esp,0xc
c0013239:	c3                   	ret    

c001323a <Clock::timeInSecondsLocal()>:
c001323a:	53                   	push   ebx
c001323b:	83 ec 14             	sub    esp,0x14
c001323e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013242:	8b 10                	mov    edx,DWORD PTR [eax]
c0013244:	50                   	push   eax
c0013245:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013248:	0f b6 0d 88 be 03 c0 	movzx  ecx,BYTE PTR ds:0xc003be88
c001324f:	03 0d 8c be 03 c0    	add    ecx,DWORD PTR ds:0xc003be8c
c0013255:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001325b:	89 cb                	mov    ebx,ecx
c001325d:	c1 fb 1f             	sar    ebx,0x1f
c0013260:	01 c8                	add    eax,ecx
c0013262:	11 da                	adc    edx,ebx
c0013264:	83 c4 10             	add    esp,0x10
c0013267:	31 c9                	xor    ecx,ecx
c0013269:	80 3d 89 be 03 c0 00 	cmp    BYTE PTR ds:0xc003be89,0x0
c0013270:	74 05                	je     c0013277 <Clock::timeInSecondsLocal()+0x3d>
c0013272:	b9 08 07 00 00       	mov    ecx,0x708
c0013277:	31 db                	xor    ebx,ebx
c0013279:	01 c8                	add    eax,ecx
c001327b:	11 da                	adc    edx,ebx
c001327d:	83 c4 08             	add    esp,0x8
c0013280:	5b                   	pop    ebx
c0013281:	c3                   	ret    

c0013282 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013282:	57                   	push   edi
c0013283:	56                   	push   esi
c0013284:	53                   	push   ebx
c0013285:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013289:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001328d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001328f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013293:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013296:	0f b6 05 88 be 03 c0 	movzx  eax,BYTE PTR ds:0xc003be88
c001329d:	03 05 8c be 03 c0    	add    eax,DWORD PTR ds:0xc003be8c
c00132a3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00132a9:	99                   	cdq    
c00132aa:	29 c6                	sub    esi,eax
c00132ac:	19 d7                	sbb    edi,edx
c00132ae:	89 f0                	mov    eax,esi
c00132b0:	89 fa                	mov    edx,edi
c00132b2:	31 f6                	xor    esi,esi
c00132b4:	80 3d 89 be 03 c0 00 	cmp    BYTE PTR ds:0xc003be89,0x0
c00132bb:	74 05                	je     c00132c2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00132bd:	be 08 07 00 00       	mov    esi,0x708
c00132c2:	31 ff                	xor    edi,edi
c00132c4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00132c8:	29 f0                	sub    eax,esi
c00132ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00132ce:	19 fa                	sbb    edx,edi
c00132d0:	89 d8                	mov    eax,ebx
c00132d2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00132d6:	5b                   	pop    ebx
c00132d7:	5e                   	pop    esi
c00132d8:	5f                   	pop    edi
c00132d9:	ff e0                	jmp    eax

c00132db <datetimeToSeconds(datetime_t)>:
c00132db:	55                   	push   ebp
c00132dc:	57                   	push   edi
c00132dd:	56                   	push   esi
c00132de:	53                   	push   ebx
c00132df:	83 ec 14             	sub    esp,0x14
c00132e2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00132e6:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00132ea:	89 d3                	mov    ebx,edx
c00132ec:	0f b6 c6             	movzx  eax,dh
c00132ef:	c1 eb 10             	shr    ebx,0x10
c00132f2:	48                   	dec    eax
c00132f3:	66 81 eb 6c 07       	sub    bx,0x76c
c00132f8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00132fc:	0f b6 f5             	movzx  esi,ch
c00132ff:	89 cf                	mov    edi,ecx
c0013301:	6b f6 3c             	imul   esi,esi,0x3c
c0013304:	c1 ef 10             	shr    edi,0x10
c0013307:	0f b6 c9             	movzx  ecx,cl
c001330a:	89 f8                	mov    eax,edi
c001330c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013312:	0f b6 f8             	movzx  edi,al
c0013315:	0f b6 d2             	movzx  edx,dl
c0013318:	01 fe                	add    esi,edi
c001331a:	01 f1                	add    ecx,esi
c001331c:	0f b7 f3             	movzx  esi,bx
c001331f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013323:	c1 f9 1f             	sar    ecx,0x1f
c0013326:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001332b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001332f:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013334:	8b 0c 8d a0 99 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc6660]
c001333b:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001333f:	76 29                	jbe    c001336a <datetimeToSeconds(datetime_t)+0x8f>
c0013341:	f6 c3 03             	test   bl,0x3
c0013344:	75 24                	jne    c001336a <datetimeToSeconds(datetime_t)+0x8f>
c0013346:	31 d2                	xor    edx,edx
c0013348:	bf 64 00 00 00       	mov    edi,0x64
c001334d:	89 d8                	mov    eax,ebx
c001334f:	66 f7 f7             	div    di
c0013352:	66 85 d2             	test   dx,dx
c0013355:	75 12                	jne    c0013369 <datetimeToSeconds(datetime_t)+0x8e>
c0013357:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001335d:	bf 90 01 00 00       	mov    edi,0x190
c0013362:	99                   	cdq    
c0013363:	f7 ff                	idiv   edi
c0013365:	85 d2                	test   edx,edx
c0013367:	75 01                	jne    c001336a <datetimeToSeconds(datetime_t)+0x8f>
c0013369:	41                   	inc    ecx
c001336a:	66 83 fb 46          	cmp    bx,0x46
c001336e:	76 45                	jbe    c00133b5 <datetimeToSeconds(datetime_t)+0xda>
c0013370:	bb 46 00 00 00       	mov    ebx,0x46
c0013375:	bf 64 00 00 00       	mov    edi,0x64
c001337a:	bd 90 01 00 00       	mov    ebp,0x190
c001337f:	b8 6d 01 00 00       	mov    eax,0x16d
c0013384:	f6 c3 03             	test   bl,0x3
c0013387:	75 23                	jne    c00133ac <datetimeToSeconds(datetime_t)+0xd1>
c0013389:	89 d8                	mov    eax,ebx
c001338b:	99                   	cdq    
c001338c:	f7 ff                	idiv   edi
c001338e:	b8 6e 01 00 00       	mov    eax,0x16e
c0013393:	85 d2                	test   edx,edx
c0013395:	75 15                	jne    c00133ac <datetimeToSeconds(datetime_t)+0xd1>
c0013397:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001339d:	99                   	cdq    
c001339e:	f7 fd                	idiv   ebp
c00133a0:	83 fa 01             	cmp    edx,0x1
c00133a3:	19 c0                	sbb    eax,eax
c00133a5:	f7 d0                	not    eax
c00133a7:	05 6e 01 00 00       	add    eax,0x16e
c00133ac:	01 c1                	add    ecx,eax
c00133ae:	43                   	inc    ebx
c00133af:	39 f3                	cmp    ebx,esi
c00133b1:	7c cc                	jl     c001337f <datetimeToSeconds(datetime_t)+0xa4>
c00133b3:	eb 35                	jmp    c00133ea <datetimeToSeconds(datetime_t)+0x10f>
c00133b5:	74 33                	je     c00133ea <datetimeToSeconds(datetime_t)+0x10f>
c00133b7:	b8 45 00 00 00       	mov    eax,0x45
c00133bc:	89 c2                	mov    edx,eax
c00133be:	83 e2 03             	and    edx,0x3
c00133c1:	39 f0                	cmp    eax,esi
c00133c3:	7e 0f                	jle    c00133d4 <datetimeToSeconds(datetime_t)+0xf9>
c00133c5:	83 fa 01             	cmp    edx,0x1
c00133c8:	19 d2                	sbb    edx,edx
c00133ca:	48                   	dec    eax
c00133cb:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00133d2:	eb e8                	jmp    c00133bc <datetimeToSeconds(datetime_t)+0xe1>
c00133d4:	b8 6d 01 00 00       	mov    eax,0x16d
c00133d9:	85 d2                	test   edx,edx
c00133db:	75 0b                	jne    c00133e8 <datetimeToSeconds(datetime_t)+0x10d>
c00133dd:	66 83 fb 01          	cmp    bx,0x1
c00133e1:	19 c0                	sbb    eax,eax
c00133e3:	05 6e 01 00 00       	add    eax,0x16e
c00133e8:	29 c1                	sub    ecx,eax
c00133ea:	b8 80 51 01 00       	mov    eax,0x15180
c00133ef:	f7 e9                	imul   ecx
c00133f1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00133f5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00133f9:	83 c4 14             	add    esp,0x14
c00133fc:	5b                   	pop    ebx
c00133fd:	5e                   	pop    esi
c00133fe:	5f                   	pop    edi
c00133ff:	5d                   	pop    ebp
c0013400:	c3                   	ret    
c0013401:	90                   	nop

c0013402 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013402:	57                   	push   edi
c0013403:	56                   	push   esi
c0013404:	53                   	push   ebx
c0013405:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013409:	8b 06                	mov    eax,DWORD PTR [esi]
c001340b:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001340e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013416:	e8 c0 fe ff ff       	call   c00132db <datetimeToSeconds(datetime_t)>
c001341b:	59                   	pop    ecx
c001341c:	0f b6 0d 88 be 03 c0 	movzx  ecx,BYTE PTR ds:0xc003be88
c0013423:	5b                   	pop    ebx
c0013424:	03 0d 8c be 03 c0    	add    ecx,DWORD PTR ds:0xc003be8c
c001342a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013430:	89 cb                	mov    ebx,ecx
c0013432:	c1 fb 1f             	sar    ebx,0x1f
c0013435:	29 c8                	sub    eax,ecx
c0013437:	19 da                	sbb    edx,ebx
c0013439:	31 c9                	xor    ecx,ecx
c001343b:	80 3d 89 be 03 c0 00 	cmp    BYTE PTR ds:0xc003be89,0x0
c0013442:	74 05                	je     c0013449 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013444:	b9 08 07 00 00       	mov    ecx,0x708
c0013449:	31 db                	xor    ebx,ebx
c001344b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001344f:	29 c8                	sub    eax,ecx
c0013451:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013455:	19 da                	sbb    edx,ebx
c0013457:	89 f8                	mov    eax,edi
c0013459:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001345d:	5b                   	pop    ebx
c001345e:	5e                   	pop    esi
c001345f:	5f                   	pop    edi
c0013460:	ff e0                	jmp    eax

c0013462 <secondsToDatetime(unsigned long long)>:
c0013462:	55                   	push   ebp
c0013463:	57                   	push   edi
c0013464:	56                   	push   esi
c0013465:	53                   	push   ebx
c0013466:	83 ec 1c             	sub    esp,0x1c
c0013469:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001346d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013471:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013475:	6a 00                	push   0x0
c0013477:	68 80 51 01 00       	push   0x15180
c001347c:	55                   	push   ebp
c001347d:	57                   	push   edi
c001347e:	e8 39 b2 00 00       	call   c001e6bc <__udivdi3>
c0013483:	83 c4 10             	add    esp,0x10
c0013486:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001348c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013490:	6a 00                	push   0x0
c0013492:	68 80 51 01 00       	push   0x15180
c0013497:	55                   	push   ebp
c0013498:	57                   	push   edi
c0013499:	bf 10 0e 00 00       	mov    edi,0xe10
c001349e:	e8 19 b3 00 00       	call   c001e7bc <__umoddi3>
c00134a3:	83 c4 10             	add    esp,0x10
c00134a6:	99                   	cdq    
c00134a7:	f7 ff                	idiv   edi
c00134a9:	bf 3c 00 00 00       	mov    edi,0x3c
c00134ae:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00134b1:	89 d0                	mov    eax,edx
c00134b3:	99                   	cdq    
c00134b4:	f7 ff                	idiv   edi
c00134b6:	85 db                	test   ebx,ebx
c00134b8:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00134bb:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00134be:	79 11                	jns    c00134d1 <secondsToDatetime(unsigned long long)+0x6f>
c00134c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00134c4:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00134ca:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00134cf:	eb 07                	jmp    c00134d8 <secondsToDatetime(unsigned long long)+0x76>
c00134d1:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00134d6:	89 d8                	mov    eax,ebx
c00134d8:	bf b4 05 00 00       	mov    edi,0x5b4
c00134dd:	99                   	cdq    
c00134de:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00134e3:	f7 f9                	idiv   ecx
c00134e5:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00134ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00134ee:	31 d2                	xor    edx,edx
c00134f0:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00134f8:	01 c3                	add    ebx,eax
c00134fa:	89 d8                	mov    eax,ebx
c00134fc:	f7 f1                	div    ecx
c00134fe:	31 d2                	xor    edx,edx
c0013500:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013503:	89 d8                	mov    eax,ebx
c0013505:	f7 f7                	div    edi
c0013507:	31 d2                	xor    edx,edx
c0013509:	29 c1                	sub    ecx,eax
c001350b:	89 d8                	mov    eax,ebx
c001350d:	f7 f5                	div    ebp
c001350f:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013514:	29 c1                	sub    ecx,eax
c0013516:	31 d2                	xor    edx,edx
c0013518:	89 c8                	mov    eax,ecx
c001351a:	f7 f5                	div    ebp
c001351c:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013521:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013525:	31 d2                	xor    edx,edx
c0013527:	89 c8                	mov    eax,ecx
c0013529:	f7 f5                	div    ebp
c001352b:	31 d2                	xor    edx,edx
c001352d:	01 c3                	add    ebx,eax
c001352f:	89 c8                	mov    eax,ecx
c0013531:	f7 f7                	div    edi
c0013533:	bf 99 00 00 00       	mov    edi,0x99
c0013538:	29 c3                	sub    ebx,eax
c001353a:	31 d2                	xor    edx,edx
c001353c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013544:	29 c3                	sub    ebx,eax
c0013546:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013549:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001354c:	bb 05 00 00 00       	mov    ebx,0x5
c0013551:	83 c1 02             	add    ecx,0x2
c0013554:	89 c8                	mov    eax,ecx
c0013556:	f7 f7                	div    edi
c0013558:	31 d2                	xor    edx,edx
c001355a:	89 c7                	mov    edi,eax
c001355c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013562:	83 c0 02             	add    eax,0x2
c0013565:	f7 f3                	div    ebx
c0013567:	89 eb                	mov    ebx,ebp
c0013569:	29 c3                	sub    ebx,eax
c001356b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013571:	88 1e                	mov    BYTE PTR [esi],bl
c0013573:	19 c0                	sbb    eax,eax
c0013575:	31 d2                	xor    edx,edx
c0013577:	83 e0 0c             	and    eax,0xc
c001357a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001357e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013586:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001358a:	83 f9 01             	cmp    ecx,0x1
c001358d:	0f 96 c2             	setbe  dl
c0013590:	41                   	inc    ecx
c0013591:	01 d0                	add    eax,edx
c0013593:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013596:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001359a:	83 c4 1c             	add    esp,0x1c
c001359d:	89 f0                	mov    eax,esi
c001359f:	5b                   	pop    ebx
c00135a0:	5e                   	pop    esi
c00135a1:	5f                   	pop    edi
c00135a2:	5d                   	pop    ebp
c00135a3:	c2 04 00             	ret    0x4

c00135a6 <Clock::timeInDatetimeLocal()>:
c00135a6:	53                   	push   ebx
c00135a7:	83 ec 14             	sub    esp,0x14
c00135aa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00135ae:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00135b2:	e8 83 fc ff ff       	call   c001323a <Clock::timeInSecondsLocal()>
c00135b7:	83 c4 0c             	add    esp,0xc
c00135ba:	52                   	push   edx
c00135bb:	50                   	push   eax
c00135bc:	53                   	push   ebx
c00135bd:	e8 a0 fe ff ff       	call   c0013462 <secondsToDatetime(unsigned long long)>
c00135c2:	89 d8                	mov    eax,ebx
c00135c4:	83 c4 14             	add    esp,0x14
c00135c7:	5b                   	pop    ebx
c00135c8:	c2 04 00             	ret    0x4
c00135cb:	90                   	nop

c00135cc <Device::hibernate()>:
c00135cc:	c3                   	ret    
c00135cd:	90                   	nop

c00135ce <Device::wake()>:
c00135ce:	c3                   	ret    
c00135cf:	90                   	nop

c00135d0 <Device::detect()>:
c00135d0:	c3                   	ret    
c00135d1:	90                   	nop

c00135d2 <Device::disableLegacy()>:
c00135d2:	c3                   	ret    
c00135d3:	90                   	nop

c00135d4 <Device::powerSaving(PowerSavingLevel)>:
c00135d4:	c3                   	ret    
c00135d5:	90                   	nop

c00135d6 <DriverlessDevice::close(int, int, void*)>:
c00135d6:	31 c0                	xor    eax,eax
c00135d8:	c3                   	ret    
c00135d9:	90                   	nop

c00135da <DriverlessDevice::detect()>:
c00135da:	c3                   	ret    
c00135db:	90                   	nop

c00135dc <DriverlessDevice::open(int, int, void*)>:
c00135dc:	83 ec 18             	sub    esp,0x18
c00135df:	68 d0 99 03 c0       	push   0xc00399d0
c00135e4:	e8 c9 99 ff ff       	call   c000cfb2 <panic(char const*)>
c00135e9:	83 c8 ff             	or     eax,0xffffffff
c00135ec:	83 c4 1c             	add    esp,0x1c
c00135ef:	c3                   	ret    

c00135f0 <Device::~Device()>:
c00135f0:	ba f8 99 03 c0       	mov    edx,0xc00399f8
c00135f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135f9:	89 10                	mov    DWORD PTR [eax],edx
c00135fb:	90                   	nop
c00135fc:	c3                   	ret    
c00135fd:	90                   	nop

c00135fe <Device::~Device()>:
c00135fe:	83 ec 0c             	sub    esp,0xc
c0013601:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013605:	e8 e6 ff ff ff       	call   c00135f0 <Device::~Device()>
c001360a:	83 c4 04             	add    esp,0x4
c001360d:	83 ec 08             	sub    esp,0x8
c0013610:	68 58 01 00 00       	push   0x158
c0013615:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013619:	e8 35 ee ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c001361e:	83 c4 10             	add    esp,0x10
c0013621:	83 c4 0c             	add    esp,0xc
c0013624:	c3                   	ret    
c0013625:	90                   	nop

c0013626 <Device::findAndLoadDriver()>:
c0013626:	c3                   	ret    
c0013627:	90                   	nop

c0013628 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013628:	57                   	push   edi
c0013629:	b9 09 00 00 00       	mov    ecx,0x9
c001362e:	56                   	push   esi
c001362f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013633:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013637:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013641:	81 c7 18 01 00 00    	add    edi,0x118
c0013647:	fc                   	cld    
c0013648:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001364a:	5e                   	pop    esi
c001364b:	5f                   	pop    edi
c001364c:	c3                   	ret    
c001364d:	90                   	nop

c001364e <Device::preOpenACPI(void*, char*, char*)>:
c001364e:	56                   	push   esi
c001364f:	53                   	push   ebx
c0013650:	83 ec 08             	sub    esp,0x8
c0013653:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013657:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001365b:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013665:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013669:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001366f:	6a 1e                	push   0x1e
c0013671:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013677:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001367b:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013681:	50                   	push   eax
c0013682:	e8 da cf fe ff       	call   c0000661 <memcpy>
c0013687:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001368b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001368f:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013697:	83 c4 14             	add    esp,0x14
c001369a:	5b                   	pop    ebx
c001369b:	5e                   	pop    esi
c001369c:	e9 c0 cf fe ff       	jmp    c0000661 <memcpy>
c00136a1:	90                   	nop

c00136a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00136a2:	55                   	push   ebp
c00136a3:	57                   	push   edi
c00136a4:	56                   	push   esi
c00136a5:	53                   	push   ebx
c00136a6:	83 ec 0c             	sub    esp,0xc
c00136a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136ad:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00136b1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00136b5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00136b9:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00136be:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00136c5:	75 0b                	jne    c00136d2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00136c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00136c9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00136cd:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00136d0:	eb 24                	jmp    c00136f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00136d2:	e8 73 3a 00 00       	call   c001714a <thisCPU()>
c00136d7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00136dd:	8b 10                	mov    edx,DWORD PTR [eax]
c00136df:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00136e3:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00136e7:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00136eb:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00136ef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00136f3:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00136f6:	83 c4 0c             	add    esp,0xc
c00136f9:	5b                   	pop    ebx
c00136fa:	5e                   	pop    esi
c00136fb:	5f                   	pop    edi
c00136fc:	5d                   	pop    ebp
c00136fd:	ff e0                	jmp    eax
c00136ff:	90                   	nop

c0013700 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013700:	57                   	push   edi
c0013701:	56                   	push   esi
c0013702:	53                   	push   ebx
c0013703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013707:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001370b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001370f:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0013714:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001371b:	75 0b                	jne    c0013728 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c001371d:	8b 00                	mov    eax,DWORD PTR [eax]
c001371f:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0013723:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013726:	eb 20                	jmp    c0013748 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0013728:	e8 1d 3a 00 00       	call   c001714a <thisCPU()>
c001372d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013733:	8b 10                	mov    edx,DWORD PTR [eax]
c0013735:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0013739:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001373d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0013741:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013745:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0013748:	5b                   	pop    ebx
c0013749:	5e                   	pop    esi
c001374a:	5f                   	pop    edi
c001374b:	ff e0                	jmp    eax
c001374d:	90                   	nop

c001374e <Device::addChild(Device*)>:
c001374e:	53                   	push   ebx
c001374f:	83 ec 08             	sub    esp,0x8
c0013752:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013756:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001375a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013760:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013766:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013768:	85 d2                	test   edx,edx
c001376a:	74 04                	je     c0013770 <Device::addChild(Device*)+0x22>
c001376c:	89 d3                	mov    ebx,edx
c001376e:	eb f6                	jmp    c0013766 <Device::addChild(Device*)+0x18>
c0013770:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013773:	83 ec 0c             	sub    esp,0xc
c0013776:	6a 08                	push   0x8
c0013778:	e8 c7 ec ff ff       	call   c0012444 <operator new(unsigned long)>
c001377d:	89 03                	mov    DWORD PTR [ebx],eax
c001377f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013785:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001378c:	83 c4 18             	add    esp,0x18
c001378f:	5b                   	pop    ebx
c0013790:	c3                   	ret    
c0013791:	90                   	nop

c0013792 <Device::removeAllChildren()>:
c0013792:	56                   	push   esi
c0013793:	53                   	push   ebx
c0013794:	52                   	push   edx
c0013795:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013799:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001379f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00137a2:	74 17                	je     c00137bb <Device::removeAllChildren()+0x29>
c00137a4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00137a7:	85 c0                	test   eax,eax
c00137a9:	74 0c                	je     c00137b7 <Device::removeAllChildren()+0x25>
c00137ab:	83 ec 0c             	sub    esp,0xc
c00137ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00137b0:	50                   	push   eax
c00137b1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00137b4:	83 c4 10             	add    esp,0x10
c00137b7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00137b9:	eb e4                	jmp    c001379f <Device::removeAllChildren()+0xd>
c00137bb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00137c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00137c7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00137cd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00137d4:	58                   	pop    eax
c00137d5:	5b                   	pop    ebx
c00137d6:	5e                   	pop    esi
c00137d7:	c3                   	ret    

c00137d8 <Device::hibernateAll()>:
c00137d8:	53                   	push   ebx
c00137d9:	83 ec 14             	sub    esp,0x14
c00137dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00137e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137e2:	53                   	push   ebx
c00137e3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00137e6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00137ec:	83 c4 10             	add    esp,0x10
c00137ef:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00137f2:	74 0f                	je     c0013803 <Device::hibernateAll()+0x2b>
c00137f4:	83 ec 0c             	sub    esp,0xc
c00137f7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00137fa:	e8 d9 ff ff ff       	call   c00137d8 <Device::hibernateAll()>
c00137ff:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013801:	eb e9                	jmp    c00137ec <Device::hibernateAll()+0x14>
c0013803:	83 c4 08             	add    esp,0x8
c0013806:	5b                   	pop    ebx
c0013807:	c3                   	ret    

c0013808 <Device::wakeAll()>:
c0013808:	53                   	push   ebx
c0013809:	83 ec 14             	sub    esp,0x14
c001380c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013810:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013812:	53                   	push   ebx
c0013813:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013816:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001381c:	83 c4 10             	add    esp,0x10
c001381f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013822:	74 0f                	je     c0013833 <Device::wakeAll()+0x2b>
c0013824:	83 ec 0c             	sub    esp,0xc
c0013827:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001382a:	e8 d9 ff ff ff       	call   c0013808 <Device::wakeAll()>
c001382f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013831:	eb e9                	jmp    c001381c <Device::wakeAll()+0x14>
c0013833:	83 c4 08             	add    esp,0x8
c0013836:	5b                   	pop    ebx
c0013837:	c3                   	ret    

c0013838 <Device::detectAll()>:
c0013838:	53                   	push   ebx
c0013839:	83 ec 14             	sub    esp,0x14
c001383c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013840:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013842:	53                   	push   ebx
c0013843:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013846:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001384c:	83 c4 10             	add    esp,0x10
c001384f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013852:	74 0f                	je     c0013863 <Device::detectAll()+0x2b>
c0013854:	83 ec 0c             	sub    esp,0xc
c0013857:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001385a:	e8 d9 ff ff ff       	call   c0013838 <Device::detectAll()>
c001385f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013861:	eb e9                	jmp    c001384c <Device::detectAll()+0x14>
c0013863:	83 c4 08             	add    esp,0x8
c0013866:	5b                   	pop    ebx
c0013867:	c3                   	ret    

c0013868 <Device::disableLegacyAll()>:
c0013868:	53                   	push   ebx
c0013869:	83 ec 14             	sub    esp,0x14
c001386c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013870:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013872:	53                   	push   ebx
c0013873:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013876:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001387c:	83 c4 10             	add    esp,0x10
c001387f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013882:	74 0f                	je     c0013893 <Device::disableLegacyAll()+0x2b>
c0013884:	83 ec 0c             	sub    esp,0xc
c0013887:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001388a:	e8 d9 ff ff ff       	call   c0013868 <Device::disableLegacyAll()>
c001388f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013891:	eb e9                	jmp    c001387c <Device::disableLegacyAll()+0x14>
c0013893:	83 c4 08             	add    esp,0x8
c0013896:	5b                   	pop    ebx
c0013897:	c3                   	ret    

c0013898 <Device::loadDriversForAll()>:
c0013898:	53                   	push   ebx
c0013899:	83 ec 08             	sub    esp,0x8
c001389c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138a0:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00138a6:	8b 18                	mov    ebx,DWORD PTR [eax]
c00138a8:	85 db                	test   ebx,ebx
c00138aa:	74 12                	je     c00138be <Device::loadDriversForAll()+0x26>
c00138ac:	83 ec 0c             	sub    esp,0xc
c00138af:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00138b2:	e8 e1 ff ff ff       	call   c0013898 <Device::loadDriversForAll()>
c00138b7:	83 c4 10             	add    esp,0x10
c00138ba:	89 d8                	mov    eax,ebx
c00138bc:	eb e8                	jmp    c00138a6 <Device::loadDriversForAll()+0xe>
c00138be:	83 c4 08             	add    esp,0x8
c00138c1:	5b                   	pop    ebx
c00138c2:	c3                   	ret    
c00138c3:	90                   	nop

c00138c4 <Device::closeAll()>:
c00138c4:	53                   	push   ebx
c00138c5:	83 ec 08             	sub    esp,0x8
c00138c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138ce:	6a 00                	push   0x0
c00138d0:	6a 00                	push   0x0
c00138d2:	6a 00                	push   0x0
c00138d4:	53                   	push   ebx
c00138d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00138d8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00138de:	83 c4 10             	add    esp,0x10
c00138e1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00138e4:	74 0f                	je     c00138f5 <Device::closeAll()+0x31>
c00138e6:	83 ec 0c             	sub    esp,0xc
c00138e9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00138ec:	e8 d3 ff ff ff       	call   c00138c4 <Device::closeAll()>
c00138f1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00138f3:	eb e9                	jmp    c00138de <Device::closeAll()+0x1a>
c00138f5:	83 c4 08             	add    esp,0x8
c00138f8:	5b                   	pop    ebx
c00138f9:	c3                   	ret    

c00138fa <Device::powerSavingAll(PowerSavingLevel)>:
c00138fa:	56                   	push   esi
c00138fb:	53                   	push   ebx
c00138fc:	83 ec 0c             	sub    esp,0xc
c00138ff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013903:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013907:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013909:	56                   	push   esi
c001390a:	53                   	push   ebx
c001390b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001390e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013914:	83 c4 10             	add    esp,0x10
c0013917:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001391a:	74 0f                	je     c001392b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001391c:	52                   	push   edx
c001391d:	52                   	push   edx
c001391e:	56                   	push   esi
c001391f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013922:	e8 d3 ff ff ff       	call   c00138fa <Device::powerSavingAll(PowerSavingLevel)>
c0013927:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013929:	eb e9                	jmp    c0013914 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001392b:	58                   	pop    eax
c001392c:	5b                   	pop    ebx
c001392d:	5e                   	pop    esi
c001392e:	c3                   	ret    
c001392f:	90                   	nop

c0013930 <Device::setName(char const*)>:
c0013930:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013938:	e9 b7 ce fe ff       	jmp    c00007f4 <strcpy>
c001393d:	90                   	nop

c001393e <Device::Device(char const*)>:
c001393e:	83 ec 0c             	sub    esp,0xc
c0013941:	ba f8 99 03 c0       	mov    edx,0xc00399f8
c0013946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001394a:	89 10                	mov    DWORD PTR [eax],edx
c001394c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013950:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001395a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001395e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001396c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001397a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013984:	83 ec 08             	sub    esp,0x8
c0013987:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001398b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001398f:	e8 9c ff ff ff       	call   c0013930 <Device::setName(char const*)>
c0013994:	83 c4 10             	add    esp,0x10
c0013997:	83 ec 0c             	sub    esp,0xc
c001399a:	6a 08                	push   0x8
c001399c:	e8 a3 ea ff ff       	call   c0012444 <operator new(unsigned long)>
c00139a1:	83 c4 10             	add    esp,0x10
c00139a4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00139aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00139b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139b5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00139bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139bf:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00139c5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00139cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139cf:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00139d5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00139dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139e0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00139e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139eb:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00139f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139f6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a04:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a12:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a20:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013a2a:	90                   	nop
c0013a2b:	83 c4 0c             	add    esp,0xc
c0013a2e:	c3                   	ret    
c0013a2f:	90                   	nop

c0013a30 <Device::getName()>:
c0013a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a34:	05 d0 00 00 00       	add    eax,0xd0
c0013a39:	c3                   	ret    

c0013a3a <DriverlessDevice::DriverlessDevice(char const*)>:
c0013a3a:	83 ec 0c             	sub    esp,0xc
c0013a3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a41:	83 ec 08             	sub    esp,0x8
c0013a44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a48:	50                   	push   eax
c0013a49:	e8 f0 fe ff ff       	call   c001393e <Device::Device(char const*)>
c0013a4e:	83 c4 10             	add    esp,0x10
c0013a51:	ba 24 9a 03 c0       	mov    edx,0xc0039a24
c0013a56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a5a:	89 10                	mov    DWORD PTR [eax],edx
c0013a5c:	90                   	nop
c0013a5d:	83 c4 0c             	add    esp,0xc
c0013a60:	c3                   	ret    
c0013a61:	90                   	nop

c0013a62 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013a62:	57                   	push   edi
c0013a63:	56                   	push   esi
c0013a64:	53                   	push   ebx
c0013a65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a69:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013a6d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a71:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013a77:	75 0c                	jne    c0013a85 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013a79:	52                   	push   edx
c0013a7a:	52                   	push   edx
c0013a7b:	53                   	push   ebx
c0013a7c:	56                   	push   esi
c0013a7d:	e8 2a b4 00 00       	call   c001eeac <LinkedList<Device>::addElement(Device*)>
c0013a82:	83 c4 10             	add    esp,0x10
c0013a85:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013a8b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a8e:	74 12                	je     c0013aa2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013a90:	50                   	push   eax
c0013a91:	57                   	push   edi
c0013a92:	56                   	push   esi
c0013a93:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013a96:	e8 c7 ff ff ff       	call   c0013a62 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013a9b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013a9d:	83 c4 10             	add    esp,0x10
c0013aa0:	eb e9                	jmp    c0013a8b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013aa2:	5b                   	pop    ebx
c0013aa3:	5e                   	pop    esi
c0013aa4:	5f                   	pop    edi
c0013aa5:	c3                   	ret    

c0013aa6 <getDevicesOfType(DeviceType)>:
c0013aa6:	53                   	push   ebx
c0013aa7:	83 ec 14             	sub    esp,0x14
c0013aaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013aae:	53                   	push   ebx
c0013aaf:	e8 d4 b4 00 00       	call   c001ef88 <LinkedList<Device>::LinkedList()>
c0013ab4:	83 c4 0c             	add    esp,0xc
c0013ab7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013abb:	53                   	push   ebx
c0013abc:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c0013ac2:	e8 9b ff ff ff       	call   c0013a62 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013ac7:	89 d8                	mov    eax,ebx
c0013ac9:	83 c4 18             	add    esp,0x18
c0013acc:	5b                   	pop    ebx
c0013acd:	c2 04 00             	ret    0x4

c0013ad0 <HardDiskController::HardDiskController(char const*)>:
c0013ad0:	83 ec 0c             	sub    esp,0xc
c0013ad3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ad7:	83 ec 08             	sub    esp,0x8
c0013ada:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ade:	50                   	push   eax
c0013adf:	e8 5a fe ff ff       	call   c001393e <Device::Device(char const*)>
c0013ae4:	83 c4 10             	add    esp,0x10
c0013ae7:	ba 50 9a 03 c0       	mov    edx,0xc0039a50
c0013aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013af0:	89 10                	mov    DWORD PTR [eax],edx
c0013af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013af6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013b00:	90                   	nop
c0013b01:	83 c4 0c             	add    esp,0xc
c0013b04:	c3                   	ret    
c0013b05:	90                   	nop

c0013b06 <HardDiskController::~HardDiskController()>:
c0013b06:	83 ec 0c             	sub    esp,0xc
c0013b09:	ba 50 9a 03 c0       	mov    edx,0xc0039a50
c0013b0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b12:	89 10                	mov    DWORD PTR [eax],edx
c0013b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b18:	83 ec 0c             	sub    esp,0xc
c0013b1b:	50                   	push   eax
c0013b1c:	e8 cf fa ff ff       	call   c00135f0 <Device::~Device()>
c0013b21:	83 c4 10             	add    esp,0x10
c0013b24:	90                   	nop
c0013b25:	83 c4 0c             	add    esp,0xc
c0013b28:	c3                   	ret    
c0013b29:	90                   	nop

c0013b2a <HardDiskController::~HardDiskController()>:
c0013b2a:	83 ec 0c             	sub    esp,0xc
c0013b2d:	83 ec 0c             	sub    esp,0xc
c0013b30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b34:	e8 cd ff ff ff       	call   c0013b06 <HardDiskController::~HardDiskController()>
c0013b39:	83 c4 10             	add    esp,0x10
c0013b3c:	83 ec 08             	sub    esp,0x8
c0013b3f:	68 58 01 00 00       	push   0x158
c0013b44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b48:	e8 06 e9 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c0013b4d:	83 c4 10             	add    esp,0x10
c0013b50:	83 c4 0c             	add    esp,0xc
c0013b53:	c3                   	ret    

c0013b54 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013b54:	83 ec 0c             	sub    esp,0xc
c0013b57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b5b:	83 ec 08             	sub    esp,0x8
c0013b5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b62:	50                   	push   eax
c0013b63:	e8 d6 fd ff ff       	call   c001393e <Device::Device(char const*)>
c0013b68:	83 c4 10             	add    esp,0x10
c0013b6b:	ba 7c 9a 03 c0       	mov    edx,0xc0039a7c
c0013b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b74:	89 10                	mov    DWORD PTR [eax],edx
c0013b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b7a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013b81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b85:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b90:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b9e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ba2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013ba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bac:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013bb6:	90                   	nop
c0013bb7:	83 c4 0c             	add    esp,0xc
c0013bba:	c3                   	ret    
c0013bbb:	90                   	nop

c0013bbc <PhysicalDisk::startCache()>:
c0013bbc:	56                   	push   esi
c0013bbd:	53                   	push   ebx
c0013bbe:	83 ec 10             	sub    esp,0x10
c0013bc1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bc5:	6a 30                	push   0x30
c0013bc7:	e8 78 e8 ff ff       	call   c0012444 <operator new(unsigned long)>
c0013bcc:	89 c6                	mov    esi,eax
c0013bce:	58                   	pop    eax
c0013bcf:	5a                   	pop    edx
c0013bd0:	53                   	push   ebx
c0013bd1:	56                   	push   esi
c0013bd2:	e8 b7 1d 00 00       	call   c001598e <VCache::VCache(PhysicalDisk*)>
c0013bd7:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013bdd:	83 c4 14             	add    esp,0x14
c0013be0:	5b                   	pop    ebx
c0013be1:	5e                   	pop    esi
c0013be2:	c3                   	ret    
c0013be3:	90                   	nop

c0013be4 <PhysicalDisk::~PhysicalDisk()>:
c0013be4:	83 ec 0c             	sub    esp,0xc
c0013be7:	ba 7c 9a 03 c0       	mov    edx,0xc0039a7c
c0013bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bf0:	89 10                	mov    DWORD PTR [eax],edx
c0013bf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bf6:	83 ec 0c             	sub    esp,0xc
c0013bf9:	50                   	push   eax
c0013bfa:	e8 f1 f9 ff ff       	call   c00135f0 <Device::~Device()>
c0013bff:	83 c4 10             	add    esp,0x10
c0013c02:	90                   	nop
c0013c03:	83 c4 0c             	add    esp,0xc
c0013c06:	c3                   	ret    
c0013c07:	90                   	nop

c0013c08 <PhysicalDisk::~PhysicalDisk()>:
c0013c08:	83 ec 0c             	sub    esp,0xc
c0013c0b:	83 ec 0c             	sub    esp,0xc
c0013c0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c12:	e8 cd ff ff ff       	call   c0013be4 <PhysicalDisk::~PhysicalDisk()>
c0013c17:	83 c4 10             	add    esp,0x10
c0013c1a:	83 ec 08             	sub    esp,0x8
c0013c1d:	68 6c 01 00 00       	push   0x16c
c0013c22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c26:	e8 28 e8 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c0013c2b:	83 c4 10             	add    esp,0x10
c0013c2e:	83 c4 0c             	add    esp,0xc
c0013c31:	c3                   	ret    

c0013c32 <FPU::FPU(char const*)>:
c0013c32:	83 ec 0c             	sub    esp,0xc
c0013c35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c39:	83 ec 08             	sub    esp,0x8
c0013c3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c40:	50                   	push   eax
c0013c41:	e8 f8 fc ff ff       	call   c001393e <Device::Device(char const*)>
c0013c46:	83 c4 10             	add    esp,0x10
c0013c49:	ba b8 9a 03 c0       	mov    edx,0xc0039ab8
c0013c4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c52:	89 10                	mov    DWORD PTR [eax],edx
c0013c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c58:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013c62:	90                   	nop
c0013c63:	83 c4 0c             	add    esp,0xc
c0013c66:	c3                   	ret    
c0013c67:	90                   	nop

c0013c68 <FPU::~FPU()>:
c0013c68:	83 ec 0c             	sub    esp,0xc
c0013c6b:	ba b8 9a 03 c0       	mov    edx,0xc0039ab8
c0013c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c74:	89 10                	mov    DWORD PTR [eax],edx
c0013c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c7a:	83 ec 0c             	sub    esp,0xc
c0013c7d:	50                   	push   eax
c0013c7e:	e8 6d f9 ff ff       	call   c00135f0 <Device::~Device()>
c0013c83:	83 c4 10             	add    esp,0x10
c0013c86:	90                   	nop
c0013c87:	83 c4 0c             	add    esp,0xc
c0013c8a:	c3                   	ret    
c0013c8b:	90                   	nop

c0013c8c <FPU::~FPU()>:
c0013c8c:	83 ec 0c             	sub    esp,0xc
c0013c8f:	83 ec 0c             	sub    esp,0xc
c0013c92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c96:	e8 cd ff ff ff       	call   c0013c68 <FPU::~FPU()>
c0013c9b:	83 c4 10             	add    esp,0x10
c0013c9e:	83 ec 08             	sub    esp,0x8
c0013ca1:	68 58 01 00 00       	push   0x158
c0013ca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013caa:	e8 a4 e7 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c0013caf:	83 c4 10             	add    esp,0x10
c0013cb2:	83 c4 0c             	add    esp,0xc
c0013cb5:	c3                   	ret    

c0013cb6 <setupFPU()>:
c0013cb6:	53                   	push   ebx
c0013cb7:	83 ec 08             	sub    esp,0x8
c0013cba:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c0013cbf:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0013cc6:	74 19                	je     c0013ce1 <setupFPU()+0x2b>
c0013cc8:	83 ec 0c             	sub    esp,0xc
c0013ccb:	68 58 01 00 00       	push   0x158
c0013cd0:	e8 6f e7 ff ff       	call   c0012444 <operator new(unsigned long)>
c0013cd5:	89 c3                	mov    ebx,eax
c0013cd7:	89 04 24             	mov    DWORD PTR [esp],eax
c0013cda:	e8 a5 96 00 00       	call   c001d384 <AVX::AVX()>
c0013cdf:	eb 5b                	jmp    c0013d3c <setupFPU()+0x86>
c0013ce1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013ce7:	84 c0                	test   al,al
c0013ce9:	79 19                	jns    c0013d04 <setupFPU()+0x4e>
c0013ceb:	83 ec 0c             	sub    esp,0xc
c0013cee:	68 58 01 00 00       	push   0x158
c0013cf3:	e8 4c e7 ff ff       	call   c0012444 <operator new(unsigned long)>
c0013cf8:	89 c3                	mov    ebx,eax
c0013cfa:	89 04 24             	mov    DWORD PTR [esp],eax
c0013cfd:	e8 a8 97 00 00       	call   c001d4aa <SSE::SSE()>
c0013d02:	eb 38                	jmp    c0013d3c <setupFPU()+0x86>
c0013d04:	a8 20                	test   al,0x20
c0013d06:	74 19                	je     c0013d21 <setupFPU()+0x6b>
c0013d08:	83 ec 0c             	sub    esp,0xc
c0013d0b:	68 58 01 00 00       	push   0x158
c0013d10:	e8 2f e7 ff ff       	call   c0012444 <operator new(unsigned long)>
c0013d15:	89 c3                	mov    ebx,eax
c0013d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0013d1a:	e8 f5 96 00 00       	call   c001d414 <MMX::MMX()>
c0013d1f:	eb 1b                	jmp    c0013d3c <setupFPU()+0x86>
c0013d21:	a8 10                	test   al,0x10
c0013d23:	74 1c                	je     c0013d41 <setupFPU()+0x8b>
c0013d25:	83 ec 0c             	sub    esp,0xc
c0013d28:	68 58 01 00 00       	push   0x158
c0013d2d:	e8 12 e7 ff ff       	call   c0012444 <operator new(unsigned long)>
c0013d32:	89 c3                	mov    ebx,eax
c0013d34:	89 04 24             	mov    DWORD PTR [esp],eax
c0013d37:	e8 fc 97 00 00       	call   c001d538 <x87::x87()>
c0013d3c:	83 c4 10             	add    esp,0x10
c0013d3f:	eb 12                	jmp    c0013d53 <setupFPU()+0x9d>
c0013d41:	83 ec 0c             	sub    esp,0xc
c0013d44:	31 db                	xor    ebx,ebx
c0013d46:	68 a8 9a 03 c0       	push   0xc0039aa8
c0013d4b:	e8 62 92 ff ff       	call   c000cfb2 <panic(char const*)>
c0013d50:	83 c4 10             	add    esp,0x10
c0013d53:	89 d8                	mov    eax,ebx
c0013d55:	83 c4 08             	add    esp,0x8
c0013d58:	5b                   	pop    ebx
c0013d59:	c3                   	ret    

c0013d5a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013d5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013d5e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013d62:	c1 e0 04             	shl    eax,0x4
c0013d65:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013d69:	8d 50 10             	lea    edx,[eax+0x10]
c0013d6c:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0013d72:	74 08                	je     c0013d7c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0013d74:	83 c0 04             	add    eax,0x4
c0013d77:	39 d0                	cmp    eax,edx
c0013d79:	75 f1                	jne    c0013d6c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0013d7b:	c3                   	ret    
c0013d7c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013d86:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013d90:	eb e2                	jmp    c0013d74 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0013d92 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0013d92:	57                   	push   edi
c0013d93:	31 c0                	xor    eax,eax
c0013d95:	56                   	push   esi
c0013d96:	53                   	push   ebx
c0013d97:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013d9b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013d9f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013da3:	89 da                	mov    edx,ebx
c0013da5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013da9:	c1 e2 04             	shl    edx,0x4
c0013dac:	01 ca                	add    edx,ecx
c0013dae:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0013db6:	74 16                	je     c0013dce <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0013db8:	40                   	inc    eax
c0013db9:	83 f8 04             	cmp    eax,0x4
c0013dbc:	75 f0                	jne    c0013dae <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0013dbe:	c7 44 24 10 e8 9a 03 c0 	mov    DWORD PTR [esp+0x10],0xc0039ae8
c0013dc6:	5b                   	pop    ebx
c0013dc7:	5e                   	pop    esi
c0013dc8:	5f                   	pop    edi
c0013dc9:	e9 e4 91 ff ff       	jmp    c000cfb2 <panic(char const*)>
c0013dce:	8d 04 98             	lea    eax,[eax+ebx*4]
c0013dd1:	8d 04 81             	lea    eax,[ecx+eax*4]
c0013dd4:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0013dda:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0013de0:	5b                   	pop    ebx
c0013de1:	5e                   	pop    esi
c0013de2:	5f                   	pop    edi
c0013de3:	c3                   	ret    

c0013de4 <doubleFault(regs*, void*)>:
c0013de4:	c7 44 24 04 18 9c 03 c0 	mov    DWORD PTR [esp+0x4],0xc0039c18
c0013dec:	e9 c1 91 ff ff       	jmp    c000cfb2 <panic(char const*)>
c0013df1:	90                   	nop

c0013df2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013df2:	56                   	push   esi
c0013df3:	53                   	push   ebx
c0013df4:	50                   	push   eax
c0013df5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013df9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013dfd:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013e02:	75 35                	jne    c0013e39 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0013e04:	8d 43 20             	lea    eax,[ebx+0x20]
c0013e07:	31 d2                	xor    edx,edx
c0013e09:	89 c1                	mov    ecx,eax
c0013e0b:	c1 e1 04             	shl    ecx,0x4
c0013e0e:	01 f1                	add    ecx,esi
c0013e10:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0013e18:	74 3e                	je     c0013e58 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0013e1a:	42                   	inc    edx
c0013e1b:	83 fa 04             	cmp    edx,0x4
c0013e1e:	75 f0                	jne    c0013e10 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0013e20:	83 ec 0c             	sub    esp,0xc
c0013e23:	68 5c 9b 03 c0       	push   0xc0039b5c
c0013e28:	e8 85 91 ff ff       	call   c000cfb2 <panic(char const*)>
c0013e2d:	83 c4 10             	add    esp,0x10
c0013e30:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013e35:	5a                   	pop    edx
c0013e36:	5b                   	pop    ebx
c0013e37:	5e                   	pop    esi
c0013e38:	c3                   	ret    
c0013e39:	83 ec 0c             	sub    esp,0xc
c0013e3c:	56                   	push   esi
c0013e3d:	e8 ee fb ff ff       	call   c0013a30 <Device::getName()>
c0013e42:	83 c4 10             	add    esp,0x10
c0013e45:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013e48:	75 ba                	jne    c0013e04 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013e4a:	83 fb 0f             	cmp    ebx,0xf
c0013e4d:	7f 29                	jg     c0013e78 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0013e4f:	0f b6 9b 20 b1 03 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffc4ee0]
c0013e56:	eb ac                	jmp    c0013e04 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013e58:	8d 04 82             	lea    eax,[edx+eax*4]
c0013e5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e5f:	8d 04 86             	lea    eax,[esi+eax*4]
c0013e62:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0013e68:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013e6c:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0013e72:	89 d8                	mov    eax,ebx
c0013e74:	5a                   	pop    edx
c0013e75:	5b                   	pop    ebx
c0013e76:	5e                   	pop    esi
c0013e77:	c3                   	ret    
c0013e78:	83 ec 0c             	sub    esp,0xc
c0013e7b:	68 24 9b 03 c0       	push   0xc0039b24
c0013e80:	e8 2d 91 ff ff       	call   c000cfb2 <panic(char const*)>
c0013e85:	83 c4 10             	add    esp,0x10
c0013e88:	e9 77 ff ff ff       	jmp    c0013e04 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013e8d:	90                   	nop

c0013e8e <InterruptController::clearAllHandlers(int, bool)>:
c0013e8e:	56                   	push   esi
c0013e8f:	53                   	push   ebx
c0013e90:	52                   	push   edx
c0013e91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e95:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e99:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013e9e:	75 61                	jne    c0013f01 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0013ea0:	8d 46 20             	lea    eax,[esi+0x20]
c0013ea3:	c1 e6 04             	shl    esi,0x4
c0013ea6:	c1 e0 04             	shl    eax,0x4
c0013ea9:	01 de                	add    esi,ebx
c0013eab:	01 d8                	add    eax,ebx
c0013ead:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0013eb7:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0013ec1:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0013ecb:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0013ed5:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0013edf:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0013ee9:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0013ef3:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0013efd:	58                   	pop    eax
c0013efe:	5b                   	pop    ebx
c0013eff:	5e                   	pop    esi
c0013f00:	c3                   	ret    
c0013f01:	83 ec 0c             	sub    esp,0xc
c0013f04:	53                   	push   ebx
c0013f05:	e8 26 fb ff ff       	call   c0013a30 <Device::getName()>
c0013f0a:	83 c4 10             	add    esp,0x10
c0013f0d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013f10:	75 8e                	jne    c0013ea0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013f12:	83 fe 0f             	cmp    esi,0xf
c0013f15:	7f 09                	jg     c0013f20 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0013f17:	0f b6 b6 20 b1 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffc4ee0]
c0013f1e:	eb 80                	jmp    c0013ea0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013f20:	83 ec 0c             	sub    esp,0xc
c0013f23:	68 98 9b 03 c0       	push   0xc0039b98
c0013f28:	e8 85 90 ff ff       	call   c000cfb2 <panic(char const*)>
c0013f2d:	83 c4 10             	add    esp,0x10
c0013f30:	e9 6b ff ff ff       	jmp    c0013ea0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013f35:	90                   	nop

c0013f36 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013f36:	56                   	push   esi
c0013f37:	53                   	push   ebx
c0013f38:	52                   	push   edx
c0013f39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f3d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013f41:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013f46:	75 3a                	jne    c0013f82 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0013f48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f4c:	8d 50 20             	lea    edx,[eax+0x20]
c0013f4f:	c1 e2 04             	shl    edx,0x4
c0013f52:	8d 04 16             	lea    eax,[esi+edx*1]
c0013f55:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0013f59:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0013f5f:	74 0b                	je     c0013f6c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0013f61:	83 c0 04             	add    eax,0x4
c0013f64:	39 d0                	cmp    eax,edx
c0013f66:	75 f1                	jne    c0013f59 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0013f68:	58                   	pop    eax
c0013f69:	5b                   	pop    ebx
c0013f6a:	5e                   	pop    esi
c0013f6b:	c3                   	ret    
c0013f6c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013f76:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013f80:	eb df                	jmp    c0013f61 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0013f82:	83 ec 0c             	sub    esp,0xc
c0013f85:	56                   	push   esi
c0013f86:	e8 a5 fa ff ff       	call   c0013a30 <Device::getName()>
c0013f8b:	83 c4 10             	add    esp,0x10
c0013f8e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013f91:	75 b5                	jne    c0013f48 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013f93:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0013f98:	7f 11                	jg     c0013fab <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0013f9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f9e:	0f b6 80 20 b1 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffc4ee0]
c0013fa5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013fa9:	eb 9d                	jmp    c0013f48 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013fab:	83 ec 0c             	sub    esp,0xc
c0013fae:	68 98 9b 03 c0       	push   0xc0039b98
c0013fb3:	e8 fa 8f ff ff       	call   c000cfb2 <panic(char const*)>
c0013fb8:	83 c4 10             	add    esp,0x10
c0013fbb:	eb 8b                	jmp    c0013f48 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0013fbd <nmiHandler(regs*, void*)>:
c0013fbd:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c0013fc2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013fc6:	e9 b3 77 ff ff       	jmp    c000b77e <Computer::handleNMI()>

c0013fcb <int_handler>:
c0013fcb:	55                   	push   ebp
c0013fcc:	57                   	push   edi
c0013fcd:	56                   	push   esi
c0013fce:	53                   	push   ebx
c0013fcf:	83 ec 0c             	sub    esp,0xc
c0013fd2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013fd6:	80 3d 72 bb 03 c0 00 	cmp    BYTE PTR ds:0xc003bb72,0x0
c0013fdd:	74 0b                	je     c0013fea <int_handler+0x1f>
c0013fdf:	fa                   	cli    
c0013fe0:	f4                   	hlt    
c0013fe1:	80 3d 72 bb 03 c0 00 	cmp    BYTE PTR ds:0xc003bb72,0x0
c0013fe8:	75 f5                	jne    c0013fdf <int_handler+0x14>
c0013fea:	e8 5b 31 00 00       	call   c001714a <thisCPU()>
c0013fef:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0013ff2:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0013ff8:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013ffb:	83 f8 17             	cmp    eax,0x17
c0013ffe:	77 13                	ja     c0014013 <int_handler+0x48>
c0014000:	83 ec 08             	sub    esp,0x8
c0014003:	8b 17                	mov    edx,DWORD PTR [edi]
c0014005:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014008:	0f b6 c0             	movzx  eax,al
c001400b:	50                   	push   eax
c001400c:	57                   	push   edi
c001400d:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014010:	83 c4 10             	add    esp,0x10
c0014013:	83 c3 15             	add    ebx,0x15
c0014016:	c1 e3 04             	shl    ebx,0x4
c0014019:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001401d:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014024:	31 db                	xor    ebx,ebx
c0014026:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001402a:	85 c0                	test   eax,eax
c001402c:	74 13                	je     c0014041 <int_handler+0x76>
c001402e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014031:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014035:	74 1c                	je     c0014053 <int_handler+0x88>
c0014037:	83 ec 08             	sub    esp,0x8
c001403a:	52                   	push   edx
c001403b:	56                   	push   esi
c001403c:	ff d0                	call   eax
c001403e:	83 c4 10             	add    esp,0x10
c0014041:	43                   	inc    ebx
c0014042:	83 fb 04             	cmp    ebx,0x4
c0014045:	75 df                	jne    c0014026 <int_handler+0x5b>
c0014047:	83 c4 0c             	add    esp,0xc
c001404a:	31 c0                	xor    eax,eax
c001404c:	5b                   	pop    ebx
c001404d:	31 d2                	xor    edx,edx
c001404f:	5e                   	pop    esi
c0014050:	5f                   	pop    edi
c0014051:	5d                   	pop    ebp
c0014052:	c3                   	ret    
c0014053:	83 ec 08             	sub    esp,0x8
c0014056:	52                   	push   edx
c0014057:	56                   	push   esi
c0014058:	ff d0                	call   eax
c001405a:	83 c4 10             	add    esp,0x10
c001405d:	83 c4 0c             	add    esp,0xc
c0014060:	5b                   	pop    ebx
c0014061:	5e                   	pop    esi
c0014062:	5f                   	pop    edi
c0014063:	5d                   	pop    ebp
c0014064:	c3                   	ret    
c0014065:	90                   	nop

c0014066 <InterruptController::InterruptController(char const*)>:
c0014066:	83 ec 1c             	sub    esp,0x1c
c0014069:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001406d:	83 ec 08             	sub    esp,0x8
c0014070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014074:	50                   	push   eax
c0014075:	e8 c4 f8 ff ff       	call   c001393e <Device::Device(char const*)>
c001407a:	83 c4 10             	add    esp,0x10
c001407d:	ba 90 9d 03 c0       	mov    edx,0xc0039d90
c0014082:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014086:	89 10                	mov    DWORD PTR [eax],edx
c0014088:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001408c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014096:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001409e:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00140a6:	7f 5e                	jg     c0014106 <InterruptController::InterruptController(char const*)+0xa0>
c00140a8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00140b0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00140b5:	7f 49                	jg     c0014100 <InterruptController::InterruptController(char const*)+0x9a>
c00140b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00140bf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00140c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00140ca:	01 ca                	add    edx,ecx
c00140cc:	83 c2 54             	add    edx,0x54
c00140cf:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00140d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00140df:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00140e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00140ea:	01 ca                	add    edx,ecx
c00140ec:	81 c2 54 04 00 00    	add    edx,0x454
c00140f2:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00140fa:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00140fe:	eb b0                	jmp    c00140b0 <InterruptController::InterruptController(char const*)+0x4a>
c0014100:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014104:	eb 98                	jmp    c001409e <InterruptController::InterruptController(char const*)+0x38>
c0014106:	90                   	nop
c0014107:	83 c4 1c             	add    esp,0x1c
c001410a:	c3                   	ret    
c001410b:	90                   	nop

c001410c <InterruptController::~InterruptController()>:
c001410c:	83 ec 0c             	sub    esp,0xc
c001410f:	ba 90 9d 03 c0       	mov    edx,0xc0039d90
c0014114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014118:	89 10                	mov    DWORD PTR [eax],edx
c001411a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001411e:	83 ec 0c             	sub    esp,0xc
c0014121:	50                   	push   eax
c0014122:	e8 c9 f4 ff ff       	call   c00135f0 <Device::~Device()>
c0014127:	83 c4 10             	add    esp,0x10
c001412a:	90                   	nop
c001412b:	83 c4 0c             	add    esp,0xc
c001412e:	c3                   	ret    
c001412f:	90                   	nop

c0014130 <InterruptController::~InterruptController()>:
c0014130:	83 ec 0c             	sub    esp,0xc
c0014133:	83 ec 0c             	sub    esp,0xc
c0014136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001413a:	e8 cd ff ff ff       	call   c001410c <InterruptController::~InterruptController()>
c001413f:	83 c4 10             	add    esp,0x10
c0014142:	83 ec 08             	sub    esp,0x8
c0014145:	68 58 21 00 00       	push   0x2158
c001414a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001414e:	e8 00 e3 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c0014153:	83 c4 10             	add    esp,0x10
c0014156:	83 c4 0c             	add    esp,0xc
c0014159:	c3                   	ret    

c001415a <displayDebugInfo(regs*)>:
c001415a:	55                   	push   ebp
c001415b:	57                   	push   edi
c001415c:	56                   	push   esi
c001415d:	53                   	push   ebx
c001415e:	83 ec 24             	sub    esp,0x24
c0014161:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014165:	0f 20 c2             	mov    edx,cr0
c0014168:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001416c:	0f 20 d7             	mov    edi,cr2
c001416f:	0f 20 de             	mov    esi,cr3
c0014172:	0f 20 e5             	mov    ebp,cr4
c0014175:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014178:	68 25 9c 03 c0       	push   0xc0039c25
c001417d:	e8 12 8d ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0014182:	58                   	pop    eax
c0014183:	5a                   	pop    edx
c0014184:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014187:	68 30 9c 03 c0       	push   0xc0039c30
c001418c:	e8 03 8d ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0014191:	59                   	pop    ecx
c0014192:	58                   	pop    eax
c0014193:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014196:	68 3b 9c 03 c0       	push   0xc0039c3b
c001419b:	e8 f4 8c ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c00141a0:	58                   	pop    eax
c00141a1:	5a                   	pop    edx
c00141a2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141a5:	68 46 9c 03 c0       	push   0xc0039c46
c00141aa:	e8 e5 8c ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c00141af:	59                   	pop    ecx
c00141b0:	58                   	pop    eax
c00141b1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00141b4:	68 51 9c 03 c0       	push   0xc0039c51
c00141b9:	e8 d6 8c ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c00141be:	58                   	pop    eax
c00141bf:	5a                   	pop    edx
c00141c0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00141c3:	68 5c 9c 03 c0       	push   0xc0039c5c
c00141c8:	e8 c7 8c ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c00141cd:	59                   	pop    ecx
c00141ce:	58                   	pop    eax
c00141cf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00141d2:	68 76 9c 03 c0       	push   0xc0039c76
c00141d7:	e8 b8 8c ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c00141dc:	58                   	pop    eax
c00141dd:	5a                   	pop    edx
c00141de:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00141e1:	68 67 9c 03 c0       	push   0xc0039c67
c00141e6:	e8 a9 8c ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c00141eb:	59                   	pop    ecx
c00141ec:	58                   	pop    eax
c00141ed:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00141f0:	68 72 9c 03 c0       	push   0xc0039c72
c00141f5:	e8 9a 8c ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c00141fa:	58                   	pop    eax
c00141fb:	5a                   	pop    edx
c00141fc:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00141ff:	68 81 9c 03 c0       	push   0xc0039c81
c0014204:	e8 8b 8c ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0014209:	59                   	pop    ecx
c001420a:	58                   	pop    eax
c001420b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001420e:	68 8c 9c 03 c0       	push   0xc0039c8c
c0014213:	e8 7c 8c ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0014218:	58                   	pop    eax
c0014219:	5a                   	pop    edx
c001421a:	57                   	push   edi
c001421b:	68 97 9c 03 c0       	push   0xc0039c97
c0014220:	e8 6f 8c ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0014225:	59                   	pop    ecx
c0014226:	58                   	pop    eax
c0014227:	56                   	push   esi
c0014228:	68 a2 9c 03 c0       	push   0xc0039ca2
c001422d:	e8 62 8c ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0014232:	58                   	pop    eax
c0014233:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014238:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001423e:	e8 d8 c3 ff ff       	call   c001061b <setActiveTerminal(VgaText*)>
c0014243:	58                   	pop    eax
c0014244:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014247:	5a                   	pop    edx
c0014248:	c1 e0 05             	shl    eax,0x5
c001424b:	05 80 ae 03 c0       	add    eax,0xc003ae80
c0014250:	50                   	push   eax
c0014251:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014256:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001425c:	e8 d9 c7 ff ff       	call   c0010a3a <VgaText::puts(char const*)>
c0014261:	59                   	pop    ecx
c0014262:	58                   	pop    eax
c0014263:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014268:	68 ad 9c 03 c0       	push   0xc0039cad
c001426d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014273:	e8 c2 c7 ff ff       	call   c0010a3a <VgaText::puts(char const*)>
c0014278:	58                   	pop    eax
c0014279:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c001427e:	5a                   	pop    edx
c001427f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014282:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014288:	e8 d3 c7 ff ff       	call   c0010a60 <VgaText::putx(unsigned int)>
c001428d:	59                   	pop    ecx
c001428e:	58                   	pop    eax
c001428f:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014294:	68 b5 9c 03 c0       	push   0xc0039cb5
c0014299:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001429f:	e8 96 c7 ff ff       	call   c0010a3a <VgaText::puts(char const*)>
c00142a4:	58                   	pop    eax
c00142a5:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c00142aa:	5a                   	pop    edx
c00142ab:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00142ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142b4:	e8 a7 c7 ff ff       	call   c0010a60 <VgaText::putx(unsigned int)>
c00142b9:	59                   	pop    ecx
c00142ba:	58                   	pop    eax
c00142bb:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c00142c0:	68 bd 9c 03 c0       	push   0xc0039cbd
c00142c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142cb:	e8 6a c7 ff ff       	call   c0010a3a <VgaText::puts(char const*)>
c00142d0:	58                   	pop    eax
c00142d1:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c00142d6:	5a                   	pop    edx
c00142d7:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00142da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142e0:	e8 7b c7 ff ff       	call   c0010a60 <VgaText::putx(unsigned int)>
c00142e5:	59                   	pop    ecx
c00142e6:	58                   	pop    eax
c00142e7:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c00142ec:	68 c5 9c 03 c0       	push   0xc0039cc5
c00142f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142f7:	e8 3e c7 ff ff       	call   c0010a3a <VgaText::puts(char const*)>
c00142fc:	58                   	pop    eax
c00142fd:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014302:	5a                   	pop    edx
c0014303:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014306:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001430c:	e8 4f c7 ff ff       	call   c0010a60 <VgaText::putx(unsigned int)>
c0014311:	59                   	pop    ecx
c0014312:	58                   	pop    eax
c0014313:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014318:	68 cd 9c 03 c0       	push   0xc0039ccd
c001431d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014323:	e8 12 c7 ff ff       	call   c0010a3a <VgaText::puts(char const*)>
c0014328:	58                   	pop    eax
c0014329:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c001432e:	5a                   	pop    edx
c001432f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014332:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014338:	e8 23 c7 ff ff       	call   c0010a60 <VgaText::putx(unsigned int)>
c001433d:	59                   	pop    ecx
c001433e:	58                   	pop    eax
c001433f:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014344:	68 d5 9c 03 c0       	push   0xc0039cd5
c0014349:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001434f:	e8 e6 c6 ff ff       	call   c0010a3a <VgaText::puts(char const*)>
c0014354:	58                   	pop    eax
c0014355:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c001435a:	5a                   	pop    edx
c001435b:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001435e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014364:	e8 f7 c6 ff ff       	call   c0010a60 <VgaText::putx(unsigned int)>
c0014369:	59                   	pop    ecx
c001436a:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c001436f:	5b                   	pop    ebx
c0014370:	68 dd 9c 03 c0       	push   0xc0039cdd
c0014375:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001437b:	e8 ba c6 ff ff       	call   c0010a3a <VgaText::puts(char const*)>
c0014380:	58                   	pop    eax
c0014381:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014386:	5a                   	pop    edx
c0014387:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001438b:	52                   	push   edx
c001438c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014392:	e8 c9 c6 ff ff       	call   c0010a60 <VgaText::putx(unsigned int)>
c0014397:	59                   	pop    ecx
c0014398:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c001439d:	5b                   	pop    ebx
c001439e:	68 e6 9c 03 c0       	push   0xc0039ce6
c00143a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143a9:	e8 8c c6 ff ff       	call   c0010a3a <VgaText::puts(char const*)>
c00143ae:	58                   	pop    eax
c00143af:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c00143b4:	5a                   	pop    edx
c00143b5:	57                   	push   edi
c00143b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143bc:	e8 9f c6 ff ff       	call   c0010a60 <VgaText::putx(unsigned int)>
c00143c1:	59                   	pop    ecx
c00143c2:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c00143c7:	5b                   	pop    ebx
c00143c8:	68 ee 9c 03 c0       	push   0xc0039cee
c00143cd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143d3:	e8 62 c6 ff ff       	call   c0010a3a <VgaText::puts(char const*)>
c00143d8:	5f                   	pop    edi
c00143d9:	58                   	pop    eax
c00143da:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c00143df:	56                   	push   esi
c00143e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143e6:	e8 75 c6 ff ff       	call   c0010a60 <VgaText::putx(unsigned int)>
c00143eb:	58                   	pop    eax
c00143ec:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c00143f1:	5a                   	pop    edx
c00143f2:	68 f6 9c 03 c0       	push   0xc0039cf6
c00143f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143fd:	e8 38 c6 ff ff       	call   c0010a3a <VgaText::puts(char const*)>
c0014402:	59                   	pop    ecx
c0014403:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014408:	5b                   	pop    ebx
c0014409:	55                   	push   ebp
c001440a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014410:	e8 4b c6 ff ff       	call   c0010a60 <VgaText::putx(unsigned int)>
c0014415:	5e                   	pop    esi
c0014416:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c001441b:	5f                   	pop    edi
c001441c:	68 fe 9c 03 c0       	push   0xc0039cfe
c0014421:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014427:	e8 0e c6 ff ff       	call   c0010a3a <VgaText::puts(char const*)>
c001442c:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014431:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014437:	e8 a4 ab 00 00       	call   c001efe0 <CPU::readDR0()>
c001443c:	5d                   	pop    ebp
c001443d:	5a                   	pop    edx
c001443e:	50                   	push   eax
c001443f:	53                   	push   ebx
c0014440:	e8 1b c6 ff ff       	call   c0010a60 <VgaText::putx(unsigned int)>
c0014445:	59                   	pop    ecx
c0014446:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c001444b:	5b                   	pop    ebx
c001444c:	68 07 9d 03 c0       	push   0xc0039d07
c0014451:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014457:	e8 de c5 ff ff       	call   c0010a3a <VgaText::puts(char const*)>
c001445c:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014461:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014467:	e8 86 ab 00 00       	call   c001eff2 <CPU::readDR1()>
c001446c:	5e                   	pop    esi
c001446d:	5f                   	pop    edi
c001446e:	50                   	push   eax
c001446f:	53                   	push   ebx
c0014470:	e8 eb c5 ff ff       	call   c0010a60 <VgaText::putx(unsigned int)>
c0014475:	5d                   	pop    ebp
c0014476:	58                   	pop    eax
c0014477:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c001447c:	68 0f 9d 03 c0       	push   0xc0039d0f
c0014481:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014487:	e8 ae c5 ff ff       	call   c0010a3a <VgaText::puts(char const*)>
c001448c:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014491:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014497:	e8 68 ab 00 00       	call   c001f004 <CPU::readDR2()>
c001449c:	5a                   	pop    edx
c001449d:	59                   	pop    ecx
c001449e:	50                   	push   eax
c001449f:	53                   	push   ebx
c00144a0:	e8 bb c5 ff ff       	call   c0010a60 <VgaText::putx(unsigned int)>
c00144a5:	5b                   	pop    ebx
c00144a6:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c00144ab:	5e                   	pop    esi
c00144ac:	68 17 9d 03 c0       	push   0xc0039d17
c00144b1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144b7:	e8 7e c5 ff ff       	call   c0010a3a <VgaText::puts(char const*)>
c00144bc:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c00144c1:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00144c7:	e8 4a ab 00 00       	call   c001f016 <CPU::readDR3()>
c00144cc:	5f                   	pop    edi
c00144cd:	5d                   	pop    ebp
c00144ce:	50                   	push   eax
c00144cf:	53                   	push   ebx
c00144d0:	e8 8b c5 ff ff       	call   c0010a60 <VgaText::putx(unsigned int)>
c00144d5:	58                   	pop    eax
c00144d6:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c00144db:	5a                   	pop    edx
c00144dc:	68 1f 9d 03 c0       	push   0xc0039d1f
c00144e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144e7:	e8 4e c5 ff ff       	call   c0010a3a <VgaText::puts(char const*)>
c00144ec:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c00144f1:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00144f7:	e8 2c ab 00 00       	call   c001f028 <CPU::readDR6()>
c00144fc:	59                   	pop    ecx
c00144fd:	5e                   	pop    esi
c00144fe:	50                   	push   eax
c00144ff:	53                   	push   ebx
c0014500:	e8 5b c5 ff ff       	call   c0010a60 <VgaText::putx(unsigned int)>
c0014505:	5f                   	pop    edi
c0014506:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c001450b:	5d                   	pop    ebp
c001450c:	68 27 9d 03 c0       	push   0xc0039d27
c0014511:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014517:	e8 1e c5 ff ff       	call   c0010a3a <VgaText::puts(char const*)>
c001451c:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014521:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014527:	e8 0e ab 00 00       	call   c001f03a <CPU::readDR7()>
c001452c:	5a                   	pop    edx
c001452d:	59                   	pop    ecx
c001452e:	50                   	push   eax
c001452f:	53                   	push   ebx
c0014530:	e8 2b c5 ff ff       	call   c0010a60 <VgaText::putx(unsigned int)>
c0014535:	fa                   	cli    
c0014536:	f4                   	hlt    
c0014537:	83 c4 10             	add    esp,0x10
c001453a:	eb fe                	jmp    c001453a <displayDebugInfo(regs*)+0x3e0>

c001453c <gpFault(regs*, void*)>:
c001453c:	53                   	push   ebx
c001453d:	83 ec 14             	sub    esp,0x14
c0014540:	c7 05 a8 be 03 c0 2f 87 01 c0 	mov    DWORD PTR ds:0xc003bea8,0xc001872f
c001454a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001454e:	53                   	push   ebx
c001454f:	e8 db 41 00 00       	call   c001872f <vm8086FaultHandler(regs*)>
c0014554:	83 c4 10             	add    esp,0x10
c0014557:	84 c0                	test   al,al
c0014559:	74 05                	je     c0014560 <gpFault(regs*, void*)+0x24>
c001455b:	83 c4 08             	add    esp,0x8
c001455e:	5b                   	pop    ebx
c001455f:	c3                   	ret    
c0014560:	83 ec 0c             	sub    esp,0xc
c0014563:	68 2f 9d 03 c0       	push   0xc0039d2f
c0014568:	e8 27 89 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001456d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014570:	e8 e5 fb ff ff       	call   c001415a <displayDebugInfo(regs*)>

c0014575 <pgFault(regs*, void*)>:
c0014575:	83 ec 18             	sub    esp,0x18
c0014578:	68 4a 9d 03 c0       	push   0xc0039d4a
c001457d:	e8 12 89 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0014582:	58                   	pop    eax
c0014583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014587:	e8 ce fb ff ff       	call   c001415a <displayDebugInfo(regs*)>

c001458c <otherISRHandler(regs*, void*)>:
c001458c:	53                   	push   ebx
c001458d:	83 ec 0c             	sub    esp,0xc
c0014590:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014594:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014597:	50                   	push   eax
c0014598:	50                   	push   eax
c0014599:	68 57 9d 03 c0       	push   0xc0039d57
c001459e:	e8 f1 88 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c00145a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145a6:	e8 af fb ff ff       	call   c001415a <displayDebugInfo(regs*)>

c00145ab <opcodeFault(regs*, void*)>:
c00145ab:	53                   	push   ebx
c00145ac:	83 ec 08             	sub    esp,0x8
c00145af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145b3:	e8 92 2b 00 00       	call   c001714a <thisCPU()>
c00145b8:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c00145bf:	74 16                	je     c00145d7 <opcodeFault(regs*, void*)+0x2c>
c00145c1:	83 ec 0c             	sub    esp,0xc
c00145c4:	68 d4 9b 03 c0       	push   0xc0039bd4
c00145c9:	e8 c6 88 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c00145ce:	83 43 38 40          	add    DWORD PTR [ebx+0x38],0x40
c00145d2:	83 c4 18             	add    esp,0x18
c00145d5:	5b                   	pop    ebx
c00145d6:	c3                   	ret    
c00145d7:	83 ec 0c             	sub    esp,0xc
c00145da:	68 74 9d 03 c0       	push   0xc0039d74
c00145df:	e8 b0 88 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c00145e4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00145e7:	c1 e0 04             	shl    eax,0x4
c00145ea:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00145ed:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00145f1:	89 14 24             	mov    DWORD PTR [esp],edx
c00145f4:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00145f8:	52                   	push   edx
c00145f9:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00145fd:	52                   	push   edx
c00145fe:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0014601:	50                   	push   eax
c0014602:	68 f8 9b 03 c0       	push   0xc0039bf8
c0014607:	e8 88 88 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001460c:	83 c4 14             	add    esp,0x14
c001460f:	53                   	push   ebx
c0014610:	e8 45 fb ff ff       	call   c001415a <displayDebugInfo(regs*)>

c0014615 <displayProgramFault(char const*)>:
c0014615:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001461a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001461d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014623:	85 c0                	test   eax,eax
c0014625:	74 15                	je     c001463c <displayProgramFault(char const*)+0x27>
c0014627:	83 ec 0c             	sub    esp,0xc
c001462a:	6a 04                	push   0x4
c001462c:	6a 0f                	push   0xf
c001462e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014632:	50                   	push   eax
c0014633:	e8 c4 c0 ff ff       	call   c00106fc <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014638:	83 c4 1c             	add    esp,0x1c
c001463b:	c3                   	ret    
c001463c:	c3                   	ret    
c001463d:	90                   	nop

c001463e <InterruptController::convertLegacyIRQNumber(int)>:
c001463e:	53                   	push   ebx
c001463f:	83 ec 14             	sub    esp,0x14
c0014642:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001464a:	e8 e1 f3 ff ff       	call   c0013a30 <Device::getName()>
c001464f:	83 c4 10             	add    esp,0x10
c0014652:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014655:	74 07                	je     c001465e <InterruptController::convertLegacyIRQNumber(int)+0x20>
c0014657:	89 d8                	mov    eax,ebx
c0014659:	83 c4 08             	add    esp,0x8
c001465c:	5b                   	pop    ebx
c001465d:	c3                   	ret    
c001465e:	83 fb 0f             	cmp    ebx,0xf
c0014661:	7f 0e                	jg     c0014671 <InterruptController::convertLegacyIRQNumber(int)+0x33>
c0014663:	0f b6 9b 20 b1 03 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffc4ee0]
c001466a:	83 c4 08             	add    esp,0x8
c001466d:	89 d8                	mov    eax,ebx
c001466f:	5b                   	pop    ebx
c0014670:	c3                   	ret    
c0014671:	83 ec 0c             	sub    esp,0xc
c0014674:	68 24 9b 03 c0       	push   0xc0039b24
c0014679:	e8 34 89 ff ff       	call   c000cfb2 <panic(char const*)>
c001467e:	89 d8                	mov    eax,ebx
c0014680:	83 c4 10             	add    esp,0x10
c0014683:	83 c4 08             	add    esp,0x8
c0014686:	5b                   	pop    ebx
c0014687:	c3                   	ret    

c0014688 <setupInterruptController()>:
c0014688:	56                   	push   esi
c0014689:	53                   	push   ebx
c001468a:	51                   	push   ecx
c001468b:	e8 b7 2a 00 00       	call   c0017147 <getCPUNumber()>
c0014690:	85 c0                	test   eax,eax
c0014692:	0f 85 10 02 00 00    	jne    c00148a8 <setupInterruptController()+0x220>
c0014698:	83 ec 0c             	sub    esp,0xc
c001469b:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c00146a0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00146a6:	68 58 21 00 00       	push   0x2158
c00146ab:	83 e0 01             	and    eax,0x1
c00146ae:	89 c6                	mov    esi,eax
c00146b0:	e8 8f dd ff ff       	call   c0012444 <operator new(unsigned long)>
c00146b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00146b8:	89 c3                	mov    ebx,eax
c00146ba:	e8 e5 94 00 00       	call   c001dba4 <PIC::PIC()>
c00146bf:	6a 00                	push   0x0
c00146c1:	6a 00                	push   0x0
c00146c3:	6a 00                	push   0x0
c00146c5:	53                   	push   ebx
c00146c6:	e8 1d 98 00 00       	call   c001dee8 <PIC::open(int, int, void*)>
c00146cb:	83 c4 20             	add    esp,0x20
c00146ce:	89 f0                	mov    eax,esi
c00146d0:	84 c0                	test   al,al
c00146d2:	0f 85 92 01 00 00    	jne    c001486a <setupInterruptController()+0x1e2>
c00146d8:	83 ec 08             	sub    esp,0x8
c00146db:	53                   	push   ebx
c00146dc:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c00146e2:	e8 67 f0 ff ff       	call   c001374e <Device::addChild(Device*)>
c00146e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146e9:	6a 00                	push   0x0
c00146eb:	68 8c 45 01 c0       	push   0xc001458c
c00146f0:	6a 00                	push   0x0
c00146f2:	53                   	push   ebx
c00146f3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00146f6:	83 c4 20             	add    esp,0x20
c00146f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146fb:	6a 00                	push   0x0
c00146fd:	68 8c 45 01 c0       	push   0xc001458c
c0014702:	6a 01                	push   0x1
c0014704:	53                   	push   ebx
c0014705:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014708:	8b 03                	mov    eax,DWORD PTR [ebx]
c001470a:	6a 00                	push   0x0
c001470c:	68 bd 3f 01 c0       	push   0xc0013fbd
c0014711:	6a 02                	push   0x2
c0014713:	53                   	push   ebx
c0014714:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014717:	83 c4 20             	add    esp,0x20
c001471a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001471c:	6a 00                	push   0x0
c001471e:	68 8c 45 01 c0       	push   0xc001458c
c0014723:	6a 03                	push   0x3
c0014725:	53                   	push   ebx
c0014726:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014729:	8b 03                	mov    eax,DWORD PTR [ebx]
c001472b:	6a 00                	push   0x0
c001472d:	68 8c 45 01 c0       	push   0xc001458c
c0014732:	6a 04                	push   0x4
c0014734:	53                   	push   ebx
c0014735:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014738:	83 c4 20             	add    esp,0x20
c001473b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001473d:	6a 00                	push   0x0
c001473f:	68 8c 45 01 c0       	push   0xc001458c
c0014744:	6a 05                	push   0x5
c0014746:	53                   	push   ebx
c0014747:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001474a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001474c:	6a 00                	push   0x0
c001474e:	68 ab 45 01 c0       	push   0xc00145ab
c0014753:	6a 06                	push   0x6
c0014755:	53                   	push   ebx
c0014756:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014759:	83 c4 20             	add    esp,0x20
c001475c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001475e:	6a 00                	push   0x0
c0014760:	68 8c 45 01 c0       	push   0xc001458c
c0014765:	6a 07                	push   0x7
c0014767:	53                   	push   ebx
c0014768:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001476b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001476d:	6a 00                	push   0x0
c001476f:	68 e4 3d 01 c0       	push   0xc0013de4
c0014774:	6a 08                	push   0x8
c0014776:	53                   	push   ebx
c0014777:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001477a:	83 c4 20             	add    esp,0x20
c001477d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001477f:	6a 00                	push   0x0
c0014781:	68 8c 45 01 c0       	push   0xc001458c
c0014786:	6a 09                	push   0x9
c0014788:	53                   	push   ebx
c0014789:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001478c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001478e:	6a 00                	push   0x0
c0014790:	68 8c 45 01 c0       	push   0xc001458c
c0014795:	6a 0a                	push   0xa
c0014797:	53                   	push   ebx
c0014798:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001479b:	83 c4 20             	add    esp,0x20
c001479e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147a0:	6a 00                	push   0x0
c00147a2:	68 8c 45 01 c0       	push   0xc001458c
c00147a7:	6a 0b                	push   0xb
c00147a9:	53                   	push   ebx
c00147aa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147af:	6a 00                	push   0x0
c00147b1:	68 8c 45 01 c0       	push   0xc001458c
c00147b6:	6a 0c                	push   0xc
c00147b8:	53                   	push   ebx
c00147b9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147bc:	83 c4 20             	add    esp,0x20
c00147bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147c1:	6a 00                	push   0x0
c00147c3:	68 3c 45 01 c0       	push   0xc001453c
c00147c8:	6a 0d                	push   0xd
c00147ca:	53                   	push   ebx
c00147cb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147d0:	6a 00                	push   0x0
c00147d2:	68 75 45 01 c0       	push   0xc0014575
c00147d7:	6a 0e                	push   0xe
c00147d9:	53                   	push   ebx
c00147da:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147dd:	83 c4 20             	add    esp,0x20
c00147e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147e2:	6a 00                	push   0x0
c00147e4:	68 8c 45 01 c0       	push   0xc001458c
c00147e9:	6a 0f                	push   0xf
c00147eb:	53                   	push   ebx
c00147ec:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147f1:	6a 00                	push   0x0
c00147f3:	68 8c 45 01 c0       	push   0xc001458c
c00147f8:	6a 10                	push   0x10
c00147fa:	53                   	push   ebx
c00147fb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147fe:	83 c4 20             	add    esp,0x20
c0014801:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014803:	6a 00                	push   0x0
c0014805:	68 8c 45 01 c0       	push   0xc001458c
c001480a:	6a 11                	push   0x11
c001480c:	53                   	push   ebx
c001480d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014810:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014812:	6a 00                	push   0x0
c0014814:	68 8c 45 01 c0       	push   0xc001458c
c0014819:	6a 12                	push   0x12
c001481b:	53                   	push   ebx
c001481c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001481f:	83 c4 20             	add    esp,0x20
c0014822:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014824:	6a 00                	push   0x0
c0014826:	68 8c 45 01 c0       	push   0xc001458c
c001482b:	6a 13                	push   0x13
c001482d:	53                   	push   ebx
c001482e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014831:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014833:	6a 00                	push   0x0
c0014835:	68 8c 45 01 c0       	push   0xc001458c
c001483a:	6a 14                	push   0x14
c001483c:	53                   	push   ebx
c001483d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014840:	83 c4 20             	add    esp,0x20
c0014843:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014845:	6a 00                	push   0x0
c0014847:	68 8c 45 01 c0       	push   0xc001458c
c001484c:	6a 1e                	push   0x1e
c001484e:	53                   	push   ebx
c001484f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014852:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014854:	6a 00                	push   0x0
c0014856:	68 f2 fd 00 c0       	push   0xc000fdf2
c001485b:	6a 60                	push   0x60
c001485d:	53                   	push   ebx
c001485e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014861:	83 c4 20             	add    esp,0x20
c0014864:	89 d8                	mov    eax,ebx
c0014866:	5a                   	pop    edx
c0014867:	5b                   	pop    ebx
c0014868:	5e                   	pop    esi
c0014869:	c3                   	ret    
c001486a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001486c:	6a 00                	push   0x0
c001486e:	6a 00                	push   0x0
c0014870:	6a 00                	push   0x0
c0014872:	53                   	push   ebx
c0014873:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014876:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014878:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001487b:	ff 50 04             	call   DWORD PTR [eax+0x4]
c001487e:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c0014885:	e8 ba db ff ff       	call   c0012444 <operator new(unsigned long)>
c001488a:	89 04 24             	mov    DWORD PTR [esp],eax
c001488d:	89 c3                	mov    ebx,eax
c001488f:	e8 4e 8e 00 00       	call   c001d6e2 <APIC::APIC()>
c0014894:	6a 00                	push   0x0
c0014896:	6a 00                	push   0x0
c0014898:	6a 00                	push   0x0
c001489a:	53                   	push   ebx
c001489b:	e8 60 8d 00 00       	call   c001d600 <APIC::open(int, int, void*)>
c00148a0:	83 c4 20             	add    esp,0x20
c00148a3:	e9 30 fe ff ff       	jmp    c00146d8 <setupInterruptController()+0x50>
c00148a8:	83 ec 0c             	sub    esp,0xc
c00148ab:	68 58 21 00 00       	push   0x2158
c00148b0:	e8 8f db ff ff       	call   c0012444 <operator new(unsigned long)>
c00148b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00148b8:	89 c3                	mov    ebx,eax
c00148ba:	e8 23 8e 00 00       	call   c001d6e2 <APIC::APIC()>
c00148bf:	6a 00                	push   0x0
c00148c1:	6a 00                	push   0x0
c00148c3:	6a 00                	push   0x0
c00148c5:	53                   	push   ebx
c00148c6:	e8 35 8d 00 00       	call   c001d600 <APIC::open(int, int, void*)>
c00148cb:	83 c4 18             	add    esp,0x18
c00148ce:	53                   	push   ebx
c00148cf:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c00148d5:	e8 74 ee ff ff       	call   c001374e <Device::addChild(Device*)>
c00148da:	83 c4 10             	add    esp,0x10
c00148dd:	89 d8                	mov    eax,ebx
c00148df:	5a                   	pop    edx
c00148e0:	5b                   	pop    ebx
c00148e1:	5e                   	pop    esi
c00148e2:	c3                   	ret    
c00148e3:	90                   	nop

c00148e4 <startGUI(void*)>:
c00148e4:	55                   	push   ebp
c00148e5:	89 e5                	mov    ebp,esp
c00148e7:	53                   	push   ebx
c00148e8:	83 ec 04             	sub    esp,0x4
c00148eb:	e8 48 9a ff ff       	call   c000e338 <unlockScheduler()>
c00148f0:	e8 2c 9a ff ff       	call   c000e321 <getIRQNestingLevel()>
c00148f5:	83 ec 08             	sub    esp,0x8
c00148f8:	50                   	push   eax
c00148f9:	68 d0 9d 03 c0       	push   0xc0039dd0
c00148fe:	e8 91 85 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0014903:	83 c4 10             	add    esp,0x10
c0014906:	8b 1d c8 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9c8
c001490c:	83 ec 0c             	sub    esp,0xc
c001490f:	68 ea 9d 03 c0       	push   0xc0039dea
c0014914:	e8 5c 7d ff ff       	call   c000c675 <loadDLL(char const*)>
c0014919:	83 c4 10             	add    esp,0x10
c001491c:	83 ec 08             	sub    esp,0x8
c001491f:	53                   	push   ebx
c0014920:	50                   	push   eax
c0014921:	e8 18 7e ff ff       	call   c000c73e <executeDLL(unsigned long, void*)>
c0014926:	83 c4 10             	add    esp,0x10
c0014929:	8b 1d c8 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9c8
c001492f:	83 ec 0c             	sub    esp,0xc
c0014932:	68 04 9e 03 c0       	push   0xc0039e04
c0014937:	e8 39 7d ff ff       	call   c000c675 <loadDLL(char const*)>
c001493c:	83 c4 10             	add    esp,0x10
c001493f:	83 ec 08             	sub    esp,0x8
c0014942:	53                   	push   ebx
c0014943:	50                   	push   eax
c0014944:	e8 f5 7d ff ff       	call   c000c73e <executeDLL(unsigned long, void*)>
c0014949:	83 c4 10             	add    esp,0x10
c001494c:	90                   	nop
c001494d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014950:	c9                   	leave  
c0014951:	c3                   	ret    

c0014952 <sendKeyToTerminal(unsigned char)>:
c0014952:	55                   	push   ebp
c0014953:	89 e5                	mov    ebp,esp
c0014955:	83 ec 28             	sub    esp,0x28
c0014958:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001495b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001495e:	a1 64 be 03 c0       	mov    eax,ds:0xc003be64
c0014963:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0014967:	83 ec 08             	sub    esp,0x8
c001496a:	52                   	push   edx
c001496b:	50                   	push   eax
c001496c:	e8 c7 c2 ff ff       	call   c0010c38 <VgaText::receiveKey(unsigned char)>
c0014971:	83 c4 10             	add    esp,0x10
c0014974:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0014978:	75 41                	jne    c00149bb <sendKeyToTerminal(unsigned char)+0x69>
c001497a:	e8 de 99 ff ff       	call   c000e35d <lockStuff()>
c001497f:	a1 c0 be 03 c0       	mov    eax,ds:0xc003bec0
c0014984:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014987:	c7 05 c0 be 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003bec0,0x0
c0014991:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014995:	74 1f                	je     c00149b6 <sendKeyToTerminal(unsigned char)+0x64>
c0014997:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001499a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001499d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00149a0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00149a3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00149a6:	83 ec 0c             	sub    esp,0xc
c00149a9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00149ac:	e8 a9 a1 ff ff       	call   c000eb5a <unblockTask(ThreadControlBlock*)>
c00149b1:	83 c4 10             	add    esp,0x10
c00149b4:	eb db                	jmp    c0014991 <sendKeyToTerminal(unsigned char)+0x3f>
c00149b6:	e8 34 9d ff ff       	call   c000e6ef <unlockStuff()>
c00149bb:	90                   	nop
c00149bc:	c9                   	leave  
c00149bd:	c3                   	ret    

c00149be <sendKeyboardToken(KeyboardToken)>:
c00149be:	55                   	push   ebp
c00149bf:	89 e5                	mov    ebp,esp
c00149c1:	83 ec 18             	sub    esp,0x18
c00149c4:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00149c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149ca:	0f b7 c0             	movzx  eax,ax
c00149cd:	83 f2 01             	xor    edx,0x1
c00149d0:	88 90 e0 be 03 c0    	mov    BYTE PTR [eax-0x3ffc4120],dl
c00149d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149d9:	66 3d 03 02          	cmp    ax,0x203
c00149dd:	75 07                	jne    c00149e6 <sendKeyboardToken(KeyboardToken)+0x28>
c00149df:	a0 e0 bf 03 c0       	mov    al,ds:0xc003bfe0
c00149e4:	84 c0                	test   al,al
c00149e6:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00149ea:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00149ed:	a0 e8 c2 03 c0       	mov    al,ds:0xc003c2e8
c00149f2:	38 c2                	cmp    dl,al
c00149f4:	74 1c                	je     c0014a12 <sendKeyboardToken(KeyboardToken)+0x54>
c00149f6:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00149f9:	a2 e8 c2 03 c0       	mov    ds:0xc003c2e8,al
c00149fe:	a0 e8 c2 03 c0       	mov    al,ds:0xc003c2e8
c0014a03:	0f b6 c0             	movzx  eax,al
c0014a06:	83 ec 0c             	sub    esp,0xc
c0014a09:	50                   	push   eax
c0014a0a:	e8 97 b4 ff ff       	call   c000fea6 <setTerminalScrollLock(bool)>
c0014a0f:	83 c4 10             	add    esp,0x10
c0014a12:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0014a15:	84 c0                	test   al,al
c0014a17:	0f 84 ae 00 00 00    	je     c0014acb <sendKeyboardToken(KeyboardToken)+0x10d>
c0014a1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a20:	66 3d 10 03          	cmp    ax,0x310
c0014a24:	75 06                	jne    c0014a2c <sendKeyboardToken(KeyboardToken)+0x6e>
c0014a26:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0014a2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a2f:	66 3d 11 03          	cmp    ax,0x311
c0014a33:	75 06                	jne    c0014a3b <sendKeyboardToken(KeyboardToken)+0x7d>
c0014a35:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0014a3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a3e:	66 3d 12 03          	cmp    ax,0x312
c0014a42:	75 06                	jne    c0014a4a <sendKeyboardToken(KeyboardToken)+0x8c>
c0014a44:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0014a4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a4d:	66 3d 13 03          	cmp    ax,0x313
c0014a51:	75 06                	jne    c0014a59 <sendKeyboardToken(KeyboardToken)+0x9b>
c0014a53:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0014a59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a5c:	66 3d 14 03          	cmp    ax,0x314
c0014a60:	75 06                	jne    c0014a68 <sendKeyboardToken(KeyboardToken)+0xaa>
c0014a62:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0014a68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a6b:	66 3d 15 03          	cmp    ax,0x315
c0014a6f:	75 06                	jne    c0014a77 <sendKeyboardToken(KeyboardToken)+0xb9>
c0014a71:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0014a77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a7a:	66 3d 16 03          	cmp    ax,0x316
c0014a7e:	75 06                	jne    c0014a86 <sendKeyboardToken(KeyboardToken)+0xc8>
c0014a80:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0014a86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a89:	66 3d 17 03          	cmp    ax,0x317
c0014a8d:	75 06                	jne    c0014a95 <sendKeyboardToken(KeyboardToken)+0xd7>
c0014a8f:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0014a95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a98:	66 3d 18 03          	cmp    ax,0x318
c0014a9c:	75 06                	jne    c0014aa4 <sendKeyboardToken(KeyboardToken)+0xe6>
c0014a9e:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0014aa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa7:	66 3d 19 03          	cmp    ax,0x319
c0014aab:	75 06                	jne    c0014ab3 <sendKeyboardToken(KeyboardToken)+0xf5>
c0014aad:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0014ab3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ab6:	66 3d 1a 03          	cmp    ax,0x31a
c0014aba:	0f 85 c9 00 00 00    	jne    c0014b89 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0014ac0:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0014ac6:	e9 be 00 00 00       	jmp    c0014b89 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0014acb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ace:	66 3d 10 03          	cmp    ax,0x310
c0014ad2:	75 0a                	jne    c0014ade <sendKeyboardToken(KeyboardToken)+0x120>
c0014ad4:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0014ada:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014ade:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae1:	66 3d 11 03          	cmp    ax,0x311
c0014ae5:	75 0a                	jne    c0014af1 <sendKeyboardToken(KeyboardToken)+0x133>
c0014ae7:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0014aed:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014af1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af4:	66 3d 12 03          	cmp    ax,0x312
c0014af8:	75 0a                	jne    c0014b04 <sendKeyboardToken(KeyboardToken)+0x146>
c0014afa:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0014b00:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b07:	66 3d 13 03          	cmp    ax,0x313
c0014b0b:	75 0a                	jne    c0014b17 <sendKeyboardToken(KeyboardToken)+0x159>
c0014b0d:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0014b13:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b1a:	66 3d 14 03          	cmp    ax,0x314
c0014b1e:	75 0a                	jne    c0014b2a <sendKeyboardToken(KeyboardToken)+0x16c>
c0014b20:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0014b26:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b2d:	66 3d 15 03          	cmp    ax,0x315
c0014b31:	75 0a                	jne    c0014b3d <sendKeyboardToken(KeyboardToken)+0x17f>
c0014b33:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0014b39:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b40:	66 3d 16 03          	cmp    ax,0x316
c0014b44:	75 0a                	jne    c0014b50 <sendKeyboardToken(KeyboardToken)+0x192>
c0014b46:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0014b4c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b53:	66 3d 17 03          	cmp    ax,0x317
c0014b57:	75 0a                	jne    c0014b63 <sendKeyboardToken(KeyboardToken)+0x1a5>
c0014b59:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0014b5f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b66:	66 3d 18 03          	cmp    ax,0x318
c0014b6a:	75 0a                	jne    c0014b76 <sendKeyboardToken(KeyboardToken)+0x1b8>
c0014b6c:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0014b72:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b79:	66 3d 19 03          	cmp    ax,0x319
c0014b7d:	75 0a                	jne    c0014b89 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0014b7f:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0014b85:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b8c:	66 3d 00 02          	cmp    ax,0x200
c0014b90:	75 2a                	jne    c0014bbc <sendKeyboardToken(KeyboardToken)+0x1fe>
c0014b92:	a0 e0 c2 03 c0       	mov    al,ds:0xc003c2e0
c0014b97:	83 f0 01             	xor    eax,0x1
c0014b9a:	84 c0                	test   al,al
c0014b9c:	74 1e                	je     c0014bbc <sendKeyboardToken(KeyboardToken)+0x1fe>
c0014b9e:	a1 1c bc 03 c0       	mov    eax,ds:0xc003bc1c
c0014ba3:	6a 01                	push   0x1
c0014ba5:	6a 00                	push   0x0
c0014ba7:	68 e4 48 01 c0       	push   0xc00148e4
c0014bac:	50                   	push   eax
c0014bad:	e8 ae 98 ff ff       	call   c000e460 <Process::createThread(void (*)(void*), void*, int)>
c0014bb2:	83 c4 10             	add    esp,0x10
c0014bb5:	c6 05 e0 c2 03 c0 01 	mov    BYTE PTR ds:0xc003c2e0,0x1
c0014bbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bbf:	66 3d 1d 03          	cmp    ax,0x31d
c0014bc3:	75 06                	jne    c0014bcb <sendKeyboardToken(KeyboardToken)+0x20d>
c0014bc5:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0014bcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bce:	66 3d 1c 03          	cmp    ax,0x31c
c0014bd2:	75 06                	jne    c0014bda <sendKeyboardToken(KeyboardToken)+0x21c>
c0014bd4:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0014bda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bdd:	66 3d 1b 03          	cmp    ax,0x31b
c0014be1:	75 06                	jne    c0014be9 <sendKeyboardToken(KeyboardToken)+0x22b>
c0014be3:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0014be9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bec:	66 3d 1e 03          	cmp    ax,0x31e
c0014bf0:	75 06                	jne    c0014bf8 <sendKeyboardToken(KeyboardToken)+0x23a>
c0014bf2:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0014bf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bfb:	66 3d 1f 03          	cmp    ax,0x31f
c0014bff:	75 06                	jne    c0014c07 <sendKeyboardToken(KeyboardToken)+0x249>
c0014c01:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0014c07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c0a:	66 3d 1a 03          	cmp    ax,0x31a
c0014c0e:	75 06                	jne    c0014c16 <sendKeyboardToken(KeyboardToken)+0x258>
c0014c10:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0014c16:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0014c1a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014c1d:	83 f0 01             	xor    eax,0x1
c0014c20:	84 c0                	test   al,al
c0014c22:	74 77                	je     c0014c9b <sendKeyboardToken(KeyboardToken)+0x2dd>
c0014c24:	a0 e1 bf 03 c0       	mov    al,ds:0xc003bfe1
c0014c29:	84 c0                	test   al,al
c0014c2b:	74 41                	je     c0014c6e <sendKeyboardToken(KeyboardToken)+0x2b0>
c0014c2d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014c31:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0014c35:	74 2b                	je     c0014c62 <sendKeyboardToken(KeyboardToken)+0x2a4>
c0014c37:	8b 15 e4 c2 03 c0    	mov    edx,DWORD PTR ds:0xc003c2e4
c0014c3d:	89 d0                	mov    eax,edx
c0014c3f:	c1 e0 02             	shl    eax,0x2
c0014c42:	01 d0                	add    eax,edx
c0014c44:	01 c0                	add    eax,eax
c0014c46:	a3 e4 c2 03 c0       	mov    ds:0xc003c2e4,eax
c0014c4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c4e:	0f b7 c0             	movzx  eax,ax
c0014c51:	8d 50 d0             	lea    edx,[eax-0x30]
c0014c54:	a1 e4 c2 03 c0       	mov    eax,ds:0xc003c2e4
c0014c59:	01 d0                	add    eax,edx
c0014c5b:	a3 e4 c2 03 c0       	mov    ds:0xc003c2e4,eax
c0014c60:	eb 6d                	jmp    c0014ccf <sendKeyboardToken(KeyboardToken)+0x311>
c0014c62:	c7 05 e4 c2 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c2e4,0x0
c0014c6c:	eb 61                	jmp    c0014ccf <sendKeyboardToken(KeyboardToken)+0x311>
c0014c6e:	a1 e4 c2 03 c0       	mov    eax,ds:0xc003c2e4
c0014c73:	85 c0                	test   eax,eax
c0014c75:	74 18                	je     c0014c8f <sendKeyboardToken(KeyboardToken)+0x2d1>
c0014c77:	a1 e4 c2 03 c0       	mov    eax,ds:0xc003c2e4
c0014c7c:	0f b6 c0             	movzx  eax,al
c0014c7f:	83 ec 0c             	sub    esp,0xc
c0014c82:	50                   	push   eax
c0014c83:	e8 ca fc ff ff       	call   c0014952 <sendKeyToTerminal(unsigned char)>
c0014c88:	83 c4 10             	add    esp,0x10
c0014c8b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014c8f:	c7 05 e4 c2 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c2e4,0x0
c0014c99:	eb 34                	jmp    c0014ccf <sendKeyboardToken(KeyboardToken)+0x311>
c0014c9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c9e:	66 3d 01 01          	cmp    ax,0x101
c0014ca2:	75 2b                	jne    c0014ccf <sendKeyboardToken(KeyboardToken)+0x311>
c0014ca4:	a1 e4 c2 03 c0       	mov    eax,ds:0xc003c2e4
c0014ca9:	85 c0                	test   eax,eax
c0014cab:	74 18                	je     c0014cc5 <sendKeyboardToken(KeyboardToken)+0x307>
c0014cad:	a1 e4 c2 03 c0       	mov    eax,ds:0xc003c2e4
c0014cb2:	0f b6 c0             	movzx  eax,al
c0014cb5:	83 ec 0c             	sub    esp,0xc
c0014cb8:	50                   	push   eax
c0014cb9:	e8 94 fc ff ff       	call   c0014952 <sendKeyToTerminal(unsigned char)>
c0014cbe:	83 c4 10             	add    esp,0x10
c0014cc1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014cc5:	c7 05 e4 c2 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c2e4,0x0
c0014ccf:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0014cd2:	83 f0 01             	xor    eax,0x1
c0014cd5:	84 c0                	test   al,al
c0014cd7:	74 4c                	je     c0014d25 <sendKeyboardToken(KeyboardToken)+0x367>
c0014cd9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014cdc:	83 f0 01             	xor    eax,0x1
c0014cdf:	84 c0                	test   al,al
c0014ce1:	74 42                	je     c0014d25 <sendKeyboardToken(KeyboardToken)+0x367>
c0014ce3:	a0 e0 bf 03 c0       	mov    al,ds:0xc003bfe0
c0014ce8:	83 f0 01             	xor    eax,0x1
c0014ceb:	84 c0                	test   al,al
c0014ced:	74 36                	je     c0014d25 <sendKeyboardToken(KeyboardToken)+0x367>
c0014cef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf2:	66 83 f8 1f          	cmp    ax,0x1f
c0014cf6:	76 09                	jbe    c0014d01 <sendKeyboardToken(KeyboardToken)+0x343>
c0014cf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cfb:	66 83 f8 7e          	cmp    ax,0x7e
c0014cff:	76 12                	jbe    c0014d13 <sendKeyboardToken(KeyboardToken)+0x355>
c0014d01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d04:	66 83 f8 0a          	cmp    ax,0xa
c0014d08:	74 09                	je     c0014d13 <sendKeyboardToken(KeyboardToken)+0x355>
c0014d0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d0d:	66 83 f8 08          	cmp    ax,0x8
c0014d11:	75 12                	jne    c0014d25 <sendKeyboardToken(KeyboardToken)+0x367>
c0014d13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d16:	0f b6 c0             	movzx  eax,al
c0014d19:	83 ec 0c             	sub    esp,0xc
c0014d1c:	50                   	push   eax
c0014d1d:	e8 30 fc ff ff       	call   c0014952 <sendKeyToTerminal(unsigned char)>
c0014d22:	83 c4 10             	add    esp,0x10
c0014d25:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0014d28:	83 f0 01             	xor    eax,0x1
c0014d2b:	84 c0                	test   al,al
c0014d2d:	74 4f                	je     c0014d7e <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014d2f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014d32:	83 f0 01             	xor    eax,0x1
c0014d35:	84 c0                	test   al,al
c0014d37:	74 45                	je     c0014d7e <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014d39:	a0 e0 bf 03 c0       	mov    al,ds:0xc003bfe0
c0014d3e:	84 c0                	test   al,al
c0014d40:	74 3c                	je     c0014d7e <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014d42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d45:	66 83 f8 3f          	cmp    ax,0x3f
c0014d49:	76 33                	jbe    c0014d7e <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014d4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d4e:	66 83 f8 7f          	cmp    ax,0x7f
c0014d52:	77 2a                	ja     c0014d7e <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014d54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d57:	88 c2                	mov    dl,al
c0014d59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d5c:	66 83 f8 5f          	cmp    ax,0x5f
c0014d60:	76 04                	jbe    c0014d66 <sendKeyboardToken(KeyboardToken)+0x3a8>
c0014d62:	b0 20                	mov    al,0x20
c0014d64:	eb 02                	jmp    c0014d68 <sendKeyboardToken(KeyboardToken)+0x3aa>
c0014d66:	b0 00                	mov    al,0x0
c0014d68:	29 c2                	sub    edx,eax
c0014d6a:	88 d0                	mov    al,dl
c0014d6c:	83 e8 40             	sub    eax,0x40
c0014d6f:	0f b6 c0             	movzx  eax,al
c0014d72:	83 ec 0c             	sub    esp,0xc
c0014d75:	50                   	push   eax
c0014d76:	e8 d7 fb ff ff       	call   c0014952 <sendKeyToTerminal(unsigned char)>
c0014d7b:	83 c4 10             	add    esp,0x10
c0014d7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d81:	66 3d 00 03          	cmp    ax,0x300
c0014d85:	75 0f                	jne    c0014d96 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0014d87:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014d8a:	83 f0 01             	xor    eax,0x1
c0014d8d:	84 c0                	test   al,al
c0014d8f:	74 05                	je     c0014d96 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0014d91:	e8 37 b9 ff ff       	call   c00106cd <doTerminalCycle()>
c0014d96:	90                   	nop
c0014d97:	c9                   	leave  
c0014d98:	c3                   	ret    

c0014d99 <clearInternalKeybuffer(VgaText*)>:
c0014d99:	55                   	push   ebp
c0014d9a:	89 e5                	mov    ebp,esp
c0014d9c:	83 ec 08             	sub    esp,0x8
c0014d9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da2:	05 34 11 00 00       	add    eax,0x1134
c0014da7:	83 ec 0c             	sub    esp,0xc
c0014daa:	50                   	push   eax
c0014dab:	e8 51 b9 fe ff       	call   c0000701 <strlen>
c0014db0:	83 c4 10             	add    esp,0x10
c0014db3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014db6:	81 c2 34 11 00 00    	add    edx,0x1134
c0014dbc:	83 ec 04             	sub    esp,0x4
c0014dbf:	50                   	push   eax
c0014dc0:	6a 00                	push   0x0
c0014dc2:	52                   	push   edx
c0014dc3:	e8 10 b9 fe ff       	call   c00006d8 <memset>
c0014dc8:	83 c4 10             	add    esp,0x10
c0014dcb:	90                   	nop
c0014dcc:	c9                   	leave  
c0014dcd:	c3                   	ret    

c0014dce <readKeyboard(VgaText*, char*, unsigned long)>:
c0014dce:	55                   	push   ebp
c0014dcf:	89 e5                	mov    ebp,esp
c0014dd1:	83 ec 18             	sub    esp,0x18
c0014dd4:	fb                   	sti    
c0014dd5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0014ddc:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0014de0:	74 77                	je     c0014e59 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0014de2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de5:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0014deb:	84 c0                	test   al,al
c0014ded:	75 02                	jne    c0014df1 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0014def:	eb f1                	jmp    c0014de2 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0014df1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014df4:	8d 50 01             	lea    edx,[eax+0x1]
c0014df7:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0014dfa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014dfd:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0014e03:	88 10                	mov    BYTE PTR [eax],dl
c0014e05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e08:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0014e0e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0014e11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e14:	05 34 11 00 00       	add    eax,0x1134
c0014e19:	83 ec 0c             	sub    esp,0xc
c0014e1c:	50                   	push   eax
c0014e1d:	e8 df b8 fe ff       	call   c0000701 <strlen>
c0014e22:	83 c4 10             	add    esp,0x10
c0014e25:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014e28:	81 c2 34 11 00 00    	add    edx,0x1134
c0014e2e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0014e31:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014e34:	81 c2 34 11 00 00    	add    edx,0x1134
c0014e3a:	83 ec 04             	sub    esp,0x4
c0014e3d:	50                   	push   eax
c0014e3e:	51                   	push   ecx
c0014e3f:	52                   	push   edx
c0014e40:	e8 af b7 fe ff       	call   c00005f4 <memmove>
c0014e45:	83 c4 10             	add    esp,0x10
c0014e48:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0014e4b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e4e:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0014e52:	75 88                	jne    c0014ddc <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0014e54:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e57:	eb 03                	jmp    c0014e5c <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c0014e59:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e5c:	c9                   	leave  
c0014e5d:	c3                   	ret    

c0014e5e <Keyboard::Keyboard(char const*)>:
c0014e5e:	83 ec 0c             	sub    esp,0xc
c0014e61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e65:	83 ec 08             	sub    esp,0x8
c0014e68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e6c:	50                   	push   eax
c0014e6d:	e8 cc ea ff ff       	call   c001393e <Device::Device(char const*)>
c0014e72:	83 c4 10             	add    esp,0x10
c0014e75:	ba 28 9e 03 c0       	mov    edx,0xc0039e28
c0014e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e7e:	89 10                	mov    DWORD PTR [eax],edx
c0014e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e84:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0014e8e:	c6 05 c4 be 03 c0 01 	mov    BYTE PTR ds:0xc003bec4,0x1
c0014e95:	90                   	nop
c0014e96:	83 c4 0c             	add    esp,0xc
c0014e99:	c3                   	ret    

c0014e9a <Keyboard::~Keyboard()>:
c0014e9a:	83 ec 0c             	sub    esp,0xc
c0014e9d:	ba 28 9e 03 c0       	mov    edx,0xc0039e28
c0014ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ea6:	89 10                	mov    DWORD PTR [eax],edx
c0014ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014eac:	83 ec 0c             	sub    esp,0xc
c0014eaf:	50                   	push   eax
c0014eb0:	e8 3b e7 ff ff       	call   c00135f0 <Device::~Device()>
c0014eb5:	83 c4 10             	add    esp,0x10
c0014eb8:	90                   	nop
c0014eb9:	83 c4 0c             	add    esp,0xc
c0014ebc:	c3                   	ret    
c0014ebd:	90                   	nop

c0014ebe <Keyboard::~Keyboard()>:
c0014ebe:	83 ec 0c             	sub    esp,0xc
c0014ec1:	83 ec 0c             	sub    esp,0xc
c0014ec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ec8:	e8 cd ff ff ff       	call   c0014e9a <Keyboard::~Keyboard()>
c0014ecd:	83 c4 10             	add    esp,0x10
c0014ed0:	83 ec 08             	sub    esp,0x8
c0014ed3:	68 5c 01 00 00       	push   0x15c
c0014ed8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014edc:	e8 72 d5 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c0014ee1:	83 c4 10             	add    esp,0x10
c0014ee4:	83 c4 0c             	add    esp,0xc
c0014ee7:	c3                   	ret    

c0014ee8 <LogicalDisk::close(int, int, void*)>:
c0014ee8:	83 c8 ff             	or     eax,0xffffffff
c0014eeb:	c3                   	ret    

c0014eec <LogicalDisk::~LogicalDisk()>:
c0014eec:	83 ec 0c             	sub    esp,0xc
c0014eef:	ba d8 9e 03 c0       	mov    edx,0xc0039ed8
c0014ef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ef8:	89 10                	mov    DWORD PTR [eax],edx
c0014efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014efe:	83 ec 0c             	sub    esp,0xc
c0014f01:	50                   	push   eax
c0014f02:	e8 e9 e6 ff ff       	call   c00135f0 <Device::~Device()>
c0014f07:	83 c4 10             	add    esp,0x10
c0014f0a:	90                   	nop
c0014f0b:	83 c4 0c             	add    esp,0xc
c0014f0e:	c3                   	ret    
c0014f0f:	90                   	nop

c0014f10 <LogicalDisk::~LogicalDisk()>:
c0014f10:	83 ec 0c             	sub    esp,0xc
c0014f13:	83 ec 0c             	sub    esp,0xc
c0014f16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f1a:	e8 cd ff ff ff       	call   c0014eec <LogicalDisk::~LogicalDisk()>
c0014f1f:	83 c4 10             	add    esp,0x10
c0014f22:	83 ec 08             	sub    esp,0x8
c0014f25:	68 74 01 00 00       	push   0x174
c0014f2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f2e:	e8 20 d5 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c0014f33:	83 c4 10             	add    esp,0x10
c0014f36:	83 c4 0c             	add    esp,0xc
c0014f39:	c3                   	ret    

c0014f3a <LogicalDisk::open(int, int, void*)>:
c0014f3a:	83 ec 18             	sub    esp,0x18
c0014f3d:	68 54 9e 03 c0       	push   0xc0039e54
c0014f42:	e8 6b 80 ff ff       	call   c000cfb2 <panic(char const*)>
c0014f47:	83 c8 ff             	or     eax,0xffffffff
c0014f4a:	83 c4 1c             	add    esp,0x1c
c0014f4d:	c3                   	ret    

c0014f4e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0014f4e:	53                   	push   ebx
c0014f4f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014f53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014f57:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014f5b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0014f61:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0014f67:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0014f6d:	77 10                	ja     c0014f7f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0014f6f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0014f75:	89 d3                	mov    ebx,edx
c0014f77:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0014f7d:	72 05                	jb     c0014f84 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0014f7f:	83 c8 ff             	or     eax,0xffffffff
c0014f82:	89 c2                	mov    edx,eax
c0014f84:	5b                   	pop    ebx
c0014f85:	c3                   	ret    

c0014f86 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0014f86:	56                   	push   esi
c0014f87:	83 c8 ff             	or     eax,0xffffffff
c0014f8a:	53                   	push   ebx
c0014f8b:	89 c2                	mov    edx,eax
c0014f8d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014f91:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0014f95:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014f99:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0014f9f:	77 27                	ja     c0014fc8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0014fa1:	89 d8                	mov    eax,ebx
c0014fa3:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0014fa9:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0014faf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014fb4:	89 c2                	mov    edx,eax
c0014fb6:	73 10                	jae    c0014fc8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0014fb8:	89 c8                	mov    eax,ecx
c0014fba:	89 da                	mov    edx,ebx
c0014fbc:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0014fc2:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0014fc8:	5b                   	pop    ebx
c0014fc9:	5e                   	pop    esi
c0014fca:	c3                   	ret    
c0014fcb:	90                   	nop

c0014fcc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0014fcc:	83 ec 1c             	sub    esp,0x1c
c0014fcf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014fd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014fd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014fdf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014fe3:	89 04 24             	mov    DWORD PTR [esp],eax
c0014fe6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014fea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ff2:	83 ec 08             	sub    esp,0x8
c0014ff5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ff9:	50                   	push   eax
c0014ffa:	e8 3f e9 ff ff       	call   c001393e <Device::Device(char const*)>
c0014fff:	83 c4 10             	add    esp,0x10
c0015002:	ba d8 9e 03 c0       	mov    edx,0xc0039ed8
c0015007:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001500b:	89 10                	mov    DWORD PTR [eax],edx
c001500d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015011:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015018:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001501c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015023:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015027:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015031:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015035:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015039:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001503d:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015043:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015049:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001504d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015050:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015054:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001505a:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015060:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015064:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015068:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001506e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015072:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001507c:	90                   	nop
c001507d:	83 c4 1c             	add    esp,0x1c
c0015080:	c3                   	ret    
c0015081:	90                   	nop

c0015082 <LogicalDisk::assignDriveLetter()>:
c0015082:	55                   	push   ebp
c0015083:	57                   	push   edi
c0015084:	56                   	push   esi
c0015085:	53                   	push   ebx
c0015086:	83 ec 14             	sub    esp,0x14
c0015089:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001508d:	8b 3d 00 c3 03 c0    	mov    edi,DWORD PTR ds:0xc003c300
c0015093:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015099:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001509d:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00150a3:	8b 3d 04 c3 03 c0    	mov    edi,DWORD PTR ds:0xc003c304
c00150a9:	3c 01                	cmp    al,0x1
c00150ab:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00150af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00150b3:	19 c0                	sbb    eax,eax
c00150b5:	83 e0 02             	and    eax,0x2
c00150b8:	83 c0 41             	add    eax,0x41
c00150bb:	0f be e8             	movsx  ebp,al
c00150be:	3c 43                	cmp    al,0x43
c00150c0:	75 10                	jne    c00150d2 <LogicalDisk::assignDriveLetter()+0x50>
c00150c2:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00150c9:	75 5d                	jne    c0015128 <LogicalDisk::assignDriveLetter()+0xa6>
c00150cb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00150d0:	75 56                	jne    c0015128 <LogicalDisk::assignDriveLetter()+0xa6>
c00150d2:	8d 75 bf             	lea    esi,[ebp-0x41]
c00150d5:	ba 01 00 00 00       	mov    edx,0x1
c00150da:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00150de:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00150e2:	d3 e2                	shl    edx,cl
c00150e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00150e8:	89 d7                	mov    edi,edx
c00150ea:	89 d6                	mov    esi,edx
c00150ec:	c1 ff 1f             	sar    edi,0x1f
c00150ef:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00150f3:	21 f9                	and    ecx,edi
c00150f5:	09 d1                	or     ecx,edx
c00150f7:	75 2f                	jne    c0015128 <LogicalDisk::assignDriveLetter()+0xa6>
c00150f9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00150fd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015101:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015107:	09 f2                	or     edx,esi
c0015109:	89 15 00 c3 03 c0    	mov    DWORD PTR ds:0xc003c300,edx
c001510f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015113:	09 fa                	or     edx,edi
c0015115:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015119:	89 15 04 c3 03 c0    	mov    DWORD PTR ds:0xc003c304,edx
c001511f:	89 1c bd 20 c3 03 c0 	mov    DWORD PTR [edi*4-0x3ffc3ce0],ebx
c0015126:	eb 08                	jmp    c0015130 <LogicalDisk::assignDriveLetter()+0xae>
c0015128:	45                   	inc    ebp
c0015129:	40                   	inc    eax
c001512a:	3c 5b                	cmp    al,0x5b
c001512c:	75 90                	jne    c00150be <LogicalDisk::assignDriveLetter()+0x3c>
c001512e:	31 c0                	xor    eax,eax
c0015130:	83 c4 14             	add    esp,0x14
c0015133:	5b                   	pop    ebx
c0015134:	5e                   	pop    esi
c0015135:	5f                   	pop    edi
c0015136:	5d                   	pop    ebp
c0015137:	c3                   	ret    

c0015138 <LogicalDisk::mount()>:
c0015138:	56                   	push   esi
c0015139:	53                   	push   ebx
c001513a:	51                   	push   ecx
c001513b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001513f:	8b 1d 80 be 03 c0    	mov    ebx,DWORD PTR ds:0xc003be80
c0015145:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001514f:	85 db                	test   ebx,ebx
c0015151:	74 50                	je     c00151a3 <LogicalDisk::mount()+0x6b>
c0015153:	e8 c9 91 ff ff       	call   c000e321 <getIRQNestingLevel()>
c0015158:	52                   	push   edx
c0015159:	52                   	push   edx
c001515a:	50                   	push   eax
c001515b:	68 78 9e 03 c0       	push   0xc0039e78
c0015160:	e8 2f 7d ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0015165:	83 c4 0c             	add    esp,0xc
c0015168:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001516f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015171:	83 e8 41             	sub    eax,0x41
c0015174:	50                   	push   eax
c0015175:	56                   	push   esi
c0015176:	53                   	push   ebx
c0015177:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001517a:	83 c4 10             	add    esp,0x10
c001517d:	84 c0                	test   al,al
c001517f:	74 08                	je     c0015189 <LogicalDisk::mount()+0x51>
c0015181:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015187:	eb 1c                	jmp    c00151a5 <LogicalDisk::mount()+0x6d>
c0015189:	e8 93 91 ff ff       	call   c000e321 <getIRQNestingLevel()>
c001518e:	51                   	push   ecx
c001518f:	51                   	push   ecx
c0015190:	50                   	push   eax
c0015191:	68 93 9e 03 c0       	push   0xc0039e93
c0015196:	e8 f9 7c ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001519b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001519e:	83 c4 10             	add    esp,0x10
c00151a1:	eb ac                	jmp    c001514f <LogicalDisk::mount()+0x17>
c00151a3:	31 c0                	xor    eax,eax
c00151a5:	5a                   	pop    edx
c00151a6:	5b                   	pop    ebx
c00151a7:	5e                   	pop    esi
c00151a8:	c3                   	ret    
c00151a9:	90                   	nop

c00151aa <LogicalDisk::unmount()>:
c00151aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00151ae:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00151b8:	c3                   	ret    
c00151b9:	90                   	nop

c00151ba <LogicalDisk::unassignDriveLetter()>:
c00151ba:	57                   	push   edi
c00151bb:	56                   	push   esi
c00151bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00151c0:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00151c7:	84 c9                	test   cl,cl
c00151c9:	75 0f                	jne    c00151da <LogicalDisk::unassignDriveLetter()+0x20>
c00151cb:	c7 44 24 0c ae 9e 03 c0 	mov    DWORD PTR [esp+0xc],0xc0039eae
c00151d3:	5e                   	pop    esi
c00151d4:	5f                   	pop    edi
c00151d5:	e9 d8 7d ff ff       	jmp    c000cfb2 <panic(char const*)>
c00151da:	83 e9 41             	sub    ecx,0x41
c00151dd:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00151e4:	b8 01 00 00 00       	mov    eax,0x1
c00151e9:	c7 04 8d 20 c3 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffc3ce0],0x0
c00151f4:	d3 e0                	shl    eax,cl
c00151f6:	89 c7                	mov    edi,eax
c00151f8:	f7 d0                	not    eax
c00151fa:	c1 ff 1f             	sar    edi,0x1f
c00151fd:	21 05 00 c3 03 c0    	and    DWORD PTR ds:0xc003c300,eax
c0015203:	89 fe                	mov    esi,edi
c0015205:	f7 d6                	not    esi
c0015207:	21 35 04 c3 03 c0    	and    DWORD PTR ds:0xc003c304,esi
c001520d:	5e                   	pop    esi
c001520e:	5f                   	pop    edi
c001520f:	c3                   	ret    

c0015210 <LogicalDisk::read(unsigned long long, int, void*)>:
c0015210:	57                   	push   edi
c0015211:	56                   	push   esi
c0015212:	53                   	push   ebx
c0015213:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015217:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001521b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001521f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015223:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015229:	77 41                	ja     c001526c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001522b:	99                   	cdq    
c001522c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015232:	01 c8                	add    eax,ecx
c0015234:	11 da                	adc    edx,ebx
c0015236:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001523c:	19 d7                	sbb    edi,edx
c001523e:	72 33                	jb     c0015273 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015240:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015246:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001524c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015250:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015254:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001525a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015260:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015264:	5b                   	pop    ebx
c0015265:	5e                   	pop    esi
c0015266:	5f                   	pop    edi
c0015267:	e9 9a 09 00 00       	jmp    c0015c06 <VCache::read(unsigned long long, int, void*)>
c001526c:	b8 05 00 00 00       	mov    eax,0x5
c0015271:	eb 05                	jmp    c0015278 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015273:	b8 07 00 00 00       	mov    eax,0x7
c0015278:	5b                   	pop    ebx
c0015279:	5e                   	pop    esi
c001527a:	5f                   	pop    edi
c001527b:	c3                   	ret    

c001527c <LogicalDisk::write(unsigned long long, int, void*)>:
c001527c:	57                   	push   edi
c001527d:	56                   	push   esi
c001527e:	53                   	push   ebx
c001527f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015283:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015287:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001528b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001528f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015295:	77 41                	ja     c00152d8 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015297:	99                   	cdq    
c0015298:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001529e:	01 c8                	add    eax,ecx
c00152a0:	11 da                	adc    edx,ebx
c00152a2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00152a8:	19 d7                	sbb    edi,edx
c00152aa:	72 33                	jb     c00152df <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00152ac:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00152b2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00152b8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00152bc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00152c0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00152c6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00152cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00152d0:	5b                   	pop    ebx
c00152d1:	5e                   	pop    esi
c00152d2:	5f                   	pop    edi
c00152d3:	e9 4a 08 00 00       	jmp    c0015b22 <VCache::write(unsigned long long, int, void*)>
c00152d8:	b8 05 00 00 00       	mov    eax,0x5
c00152dd:	eb 05                	jmp    c00152e4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00152df:	b8 07 00 00 00       	mov    eax,0x7
c00152e4:	5b                   	pop    ebx
c00152e5:	5e                   	pop    esi
c00152e6:	5f                   	pop    edi
c00152e7:	c3                   	ret    

c00152e8 <Mouse::Mouse(char const*)>:
c00152e8:	83 ec 0c             	sub    esp,0xc
c00152eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152ef:	83 ec 08             	sub    esp,0x8
c00152f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152f6:	50                   	push   eax
c00152f7:	e8 42 e6 ff ff       	call   c001393e <Device::Device(char const*)>
c00152fc:	83 c4 10             	add    esp,0x10
c00152ff:	ba 04 9f 03 c0       	mov    edx,0xc0039f04
c0015304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015308:	89 10                	mov    DWORD PTR [eax],edx
c001530a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001530e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015318:	90                   	nop
c0015319:	83 c4 0c             	add    esp,0xc
c001531c:	c3                   	ret    
c001531d:	90                   	nop

c001531e <Mouse::~Mouse()>:
c001531e:	83 ec 0c             	sub    esp,0xc
c0015321:	ba 04 9f 03 c0       	mov    edx,0xc0039f04
c0015326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001532a:	89 10                	mov    DWORD PTR [eax],edx
c001532c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015330:	83 ec 0c             	sub    esp,0xc
c0015333:	50                   	push   eax
c0015334:	e8 b7 e2 ff ff       	call   c00135f0 <Device::~Device()>
c0015339:	83 c4 10             	add    esp,0x10
c001533c:	90                   	nop
c001533d:	83 c4 0c             	add    esp,0xc
c0015340:	c3                   	ret    
c0015341:	90                   	nop

c0015342 <Mouse::~Mouse()>:
c0015342:	83 ec 0c             	sub    esp,0xc
c0015345:	83 ec 0c             	sub    esp,0xc
c0015348:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001534c:	e8 cd ff ff ff       	call   c001531e <Mouse::~Mouse()>
c0015351:	83 c4 10             	add    esp,0x10
c0015354:	83 ec 08             	sub    esp,0x8
c0015357:	68 58 01 00 00       	push   0x158
c001535c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015360:	e8 ee d0 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c0015365:	83 c4 10             	add    esp,0x10
c0015368:	83 c4 0c             	add    esp,0xc
c001536b:	c3                   	ret    

c001536c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001536c:	55                   	push   ebp
c001536d:	57                   	push   edi
c001536e:	56                   	push   esi
c001536f:	53                   	push   ebx
c0015370:	81 ec 28 01 00 00    	sub    esp,0x128
c0015376:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001537d:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015384:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001538b:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015392:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015396:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001539a:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00153a1:	e8 8a e6 ff ff       	call   c0013a30 <Device::getName()>
c00153a6:	5a                   	pop    edx
c00153a7:	59                   	pop    ecx
c00153a8:	50                   	push   eax
c00153a9:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00153ad:	55                   	push   ebp
c00153ae:	e8 41 b4 fe ff       	call   c00007f4 <strcpy>
c00153b3:	5b                   	pop    ebx
c00153b4:	58                   	pop    eax
c00153b5:	68 28 9f 03 c0       	push   0xc0039f28
c00153ba:	55                   	push   ebp
c00153bb:	e8 81 b5 fe ff       	call   c0000941 <strcat>
c00153c0:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00153c7:	e8 78 d0 ff ff       	call   c0012444 <operator new(unsigned long)>
c00153cc:	83 c4 0c             	add    esp,0xc
c00153cf:	89 c3                	mov    ebx,eax
c00153d1:	57                   	push   edi
c00153d2:	56                   	push   esi
c00153d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00153d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00153db:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00153e2:	55                   	push   ebp
c00153e3:	50                   	push   eax
c00153e4:	e8 e3 fb ff ff       	call   c0014fcc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00153e9:	83 c4 14             	add    esp,0x14
c00153ec:	53                   	push   ebx
c00153ed:	e8 90 fc ff ff       	call   c0015082 <LogicalDisk::assignDriveLetter()>
c00153f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00153f5:	e8 3e fd ff ff       	call   c0015138 <LogicalDisk::mount()>
c00153fa:	58                   	pop    eax
c00153fb:	5a                   	pop    edx
c00153fc:	53                   	push   ebx
c00153fd:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015404:	e8 45 e3 ff ff       	call   c001374e <Device::addChild(Device*)>
c0015409:	81 c4 2c 01 00 00    	add    esp,0x12c
c001540f:	5b                   	pop    ebx
c0015410:	5e                   	pop    esi
c0015411:	5f                   	pop    edi
c0015412:	5d                   	pop    ebp
c0015413:	c3                   	ret    

c0015414 <createPartitionsForDisk(PhysicalDisk*)>:
c0015414:	55                   	push   ebp
c0015415:	57                   	push   edi
c0015416:	56                   	push   esi
c0015417:	53                   	push   ebx
c0015418:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001541e:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015425:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001542b:	3d 00 02 00 00       	cmp    eax,0x200
c0015430:	74 27                	je     c0015459 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015432:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015438:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001543e:	83 ec 10             	sub    esp,0x10
c0015441:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015445:	99                   	cdq    
c0015446:	c1 e6 0a             	shl    esi,0xa
c0015449:	52                   	push   edx
c001544a:	89 fd                	mov    ebp,edi
c001544c:	50                   	push   eax
c001544d:	55                   	push   ebp
c001544e:	56                   	push   esi
c001544f:	e8 68 92 00 00       	call   c001e6bc <__udivdi3>
c0015454:	e9 b1 00 00 00       	jmp    c001550a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015459:	83 ec 0c             	sub    esp,0xc
c001545c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001545e:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0015462:	56                   	push   esi
c0015463:	6a 01                	push   0x1
c0015465:	6a 00                	push   0x0
c0015467:	6a 00                	push   0x0
c0015469:	53                   	push   ebx
c001546a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001546d:	83 c4 20             	add    esp,0x20
c0015470:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015478:	75 0a                	jne    c0015484 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001547a:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0015482:	74 2c                	je     c00154b0 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0015484:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001548a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015490:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015496:	83 ec 10             	sub    esp,0x10
c0015499:	0f a4 c2 0a          	shld   edx,eax,0xa
c001549d:	89 f7                	mov    edi,esi
c001549f:	c1 e0 0a             	shl    eax,0xa
c00154a2:	c1 ff 1f             	sar    edi,0x1f
c00154a5:	57                   	push   edi
c00154a6:	56                   	push   esi
c00154a7:	52                   	push   edx
c00154a8:	50                   	push   eax
c00154a9:	e8 0e 92 00 00       	call   c001e6bc <__udivdi3>
c00154ae:	eb 5a                	jmp    c001550a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00154b0:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00154b7:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00154be:	83 e1 7f             	and    ecx,0x7f
c00154c1:	83 e0 7f             	and    eax,0x7f
c00154c4:	01 c1                	add    ecx,eax
c00154c6:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00154cd:	83 e0 7f             	and    eax,0x7f
c00154d0:	01 c1                	add    ecx,eax
c00154d2:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00154d9:	83 e0 7f             	and    eax,0x7f
c00154dc:	00 c1                	add    cl,al
c00154de:	74 41                	je     c0015521 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00154e0:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00154e6:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00154ec:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00154f2:	83 ec 10             	sub    esp,0x10
c00154f5:	0f a4 c2 0a          	shld   edx,eax,0xa
c00154f9:	89 f7                	mov    edi,esi
c00154fb:	c1 e0 0a             	shl    eax,0xa
c00154fe:	c1 ff 1f             	sar    edi,0x1f
c0015501:	57                   	push   edi
c0015502:	56                   	push   esi
c0015503:	52                   	push   edx
c0015504:	50                   	push   eax
c0015505:	e8 b2 91 00 00       	call   c001e6bc <__udivdi3>
c001550a:	83 c4 14             	add    esp,0x14
c001550d:	52                   	push   edx
c001550e:	50                   	push   eax
c001550f:	6a 00                	push   0x0
c0015511:	6a 00                	push   0x0
c0015513:	53                   	push   ebx
c0015514:	e8 53 fe ff ff       	call   c001536c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015519:	83 c4 20             	add    esp,0x20
c001551c:	e9 79 01 00 00       	jmp    c001569a <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0015521:	89 f0                	mov    eax,esi
c0015523:	31 f6                	xor    esi,esi
c0015525:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001552c:	75 02                	jne    c0015530 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001552e:	89 f1                	mov    ecx,esi
c0015530:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0015537:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001553e:	c1 e2 08             	shl    edx,0x8
c0015541:	c1 e7 10             	shl    edi,0x10
c0015544:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001554c:	09 fa                	or     edx,edi
c001554e:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0015556:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001555d:	83 c0 10             	add    eax,0x10
c0015560:	09 fa                	or     edx,edi
c0015562:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0015569:	c1 e7 18             	shl    edi,0x18
c001556c:	09 fa                	or     edx,edi
c001556e:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0015575:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0015579:	c1 e7 10             	shl    edi,0x10
c001557c:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0015583:	c1 e2 08             	shl    edx,0x8
c0015586:	09 fa                	or     edx,edi
c0015588:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001558f:	09 fa                	or     edx,edi
c0015591:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0015598:	c1 e7 18             	shl    edi,0x18
c001559b:	09 fa                	or     edx,edi
c001559d:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00155a1:	46                   	inc    esi
c00155a2:	83 fe 04             	cmp    esi,0x4
c00155a5:	0f 85 7a ff ff ff    	jne    c0015525 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00155ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00155af:	83 f0 01             	xor    eax,0x1
c00155b2:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00155b6:	75 57                	jne    c001560f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00155b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00155bc:	83 f0 01             	xor    eax,0x1
c00155bf:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00155c3:	75 4a                	jne    c001560f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00155c5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00155c9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00155d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00155d9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00155df:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00155e5:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00155eb:	0f a4 c2 0a          	shld   edx,eax,0xa
c00155ef:	89 f7                	mov    edi,esi
c00155f1:	c1 e0 0a             	shl    eax,0xa
c00155f4:	c1 ff 1f             	sar    edi,0x1f
c00155f7:	57                   	push   edi
c00155f8:	56                   	push   esi
c00155f9:	52                   	push   edx
c00155fa:	50                   	push   eax
c00155fb:	e8 bc 90 00 00       	call   c001e6bc <__udivdi3>
c0015600:	83 c4 10             	add    esp,0x10
c0015603:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015607:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001560b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001560f:	84 c9                	test   cl,cl
c0015611:	74 53                	je     c0015666 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0015613:	0f b6 c9             	movzx  ecx,cl
c0015616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001561a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001561e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015622:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0015626:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001562a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001562e:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0015632:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0015636:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001563a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001563e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015642:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015646:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001564a:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001564e:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0015652:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0015656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001565a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001565e:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0015662:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0015666:	31 ed                	xor    ebp,ebp
c0015668:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001566c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0015670:	89 f8                	mov    eax,edi
c0015672:	09 f0                	or     eax,esi
c0015674:	74 1e                	je     c0015694 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015676:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001567a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001567e:	89 d1                	mov    ecx,edx
c0015680:	09 c1                	or     ecx,eax
c0015682:	74 10                	je     c0015694 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015684:	83 ec 0c             	sub    esp,0xc
c0015687:	57                   	push   edi
c0015688:	56                   	push   esi
c0015689:	52                   	push   edx
c001568a:	50                   	push   eax
c001568b:	53                   	push   ebx
c001568c:	e8 db fc ff ff       	call   c001536c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015691:	83 c4 20             	add    esp,0x20
c0015694:	45                   	inc    ebp
c0015695:	83 fd 04             	cmp    ebp,0x4
c0015698:	75 ce                	jne    c0015668 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001569a:	81 c4 5c 02 00 00    	add    esp,0x25c
c00156a0:	5b                   	pop    ebx
c00156a1:	5e                   	pop    esi
c00156a2:	5f                   	pop    edi
c00156a3:	5d                   	pop    ebp
c00156a4:	c3                   	ret    
c00156a5:	90                   	nop

c00156a6 <Timer::Timer(char const*)>:
c00156a6:	83 ec 0c             	sub    esp,0xc
c00156a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156ad:	83 ec 08             	sub    esp,0x8
c00156b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00156b4:	50                   	push   eax
c00156b5:	e8 84 e2 ff ff       	call   c001393e <Device::Device(char const*)>
c00156ba:	83 c4 10             	add    esp,0x10
c00156bd:	ba 3c 9f 03 c0       	mov    edx,0xc0039f3c
c00156c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156c6:	89 10                	mov    DWORD PTR [eax],edx
c00156c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156cc:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00156d6:	90                   	nop
c00156d7:	83 c4 0c             	add    esp,0xc
c00156da:	c3                   	ret    
c00156db:	90                   	nop

c00156dc <Timer::~Timer()>:
c00156dc:	83 ec 0c             	sub    esp,0xc
c00156df:	ba 3c 9f 03 c0       	mov    edx,0xc0039f3c
c00156e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156e8:	89 10                	mov    DWORD PTR [eax],edx
c00156ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156ee:	83 ec 0c             	sub    esp,0xc
c00156f1:	50                   	push   eax
c00156f2:	e8 f9 de ff ff       	call   c00135f0 <Device::~Device()>
c00156f7:	83 c4 10             	add    esp,0x10
c00156fa:	90                   	nop
c00156fb:	83 c4 0c             	add    esp,0xc
c00156fe:	c3                   	ret    
c00156ff:	90                   	nop

c0015700 <Timer::~Timer()>:
c0015700:	83 ec 0c             	sub    esp,0xc
c0015703:	83 ec 0c             	sub    esp,0xc
c0015706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001570a:	e8 cd ff ff ff       	call   c00156dc <Timer::~Timer()>
c001570f:	83 c4 10             	add    esp,0x10
c0015712:	83 ec 08             	sub    esp,0x8
c0015715:	68 5c 01 00 00       	push   0x15c
c001571a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001571e:	e8 30 cd ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c0015723:	83 c4 10             	add    esp,0x10
c0015726:	83 c4 0c             	add    esp,0xc
c0015729:	c3                   	ret    

c001572a <Timer::read()>:
c001572a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001572e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015734:	c3                   	ret    

c0015735 <timerHandler(unsigned long long)>:
c0015735:	55                   	push   ebp
c0015736:	57                   	push   edi
c0015737:	56                   	push   esi
c0015738:	53                   	push   ebx
c0015739:	83 ec 0c             	sub    esp,0xc
c001573c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015740:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0015744:	01 35 90 c3 03 c0    	add    DWORD PTR ds:0xc003c390,esi
c001574a:	11 3d 94 c3 03 c0    	adc    DWORD PTR ds:0xc003c394,edi
c0015750:	80 3d cd b9 03 c0 00 	cmp    BYTE PTR ds:0xc003b9cd,0x0
c0015757:	0f 84 07 01 00 00    	je     c0015864 <timerHandler(unsigned long long)+0x12f>
c001575d:	e8 fb 8b ff ff       	call   c000e35d <lockStuff()>
c0015762:	83 ec 0c             	sub    esp,0xc
c0015765:	68 04 bc 03 c0       	push   0xc003bc04
c001576a:	e8 ad 94 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001576f:	c7 04 24 04 bc 03 c0 	mov    DWORD PTR [esp],0xc003bc04
c0015776:	89 c3                	mov    ebx,eax
c0015778:	e8 d5 93 00 00       	call   c001eb52 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001577d:	83 c4 10             	add    esp,0x10
c0015780:	84 c0                	test   al,al
c0015782:	74 60                	je     c00157e4 <timerHandler(unsigned long long)+0xaf>
c0015784:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001578a:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c001578d:	85 c0                	test   eax,eax
c001578f:	0f 85 91 00 00 00    	jne    c0015826 <timerHandler(unsigned long long)+0xf1>
c0015795:	e9 be 00 00 00       	jmp    c0015858 <timerHandler(unsigned long long)+0x123>
c001579a:	83 ec 0c             	sub    esp,0xc
c001579d:	55                   	push   ebp
c001579e:	e8 b7 93 ff ff       	call   c000eb5a <unblockTask(ThreadControlBlock*)>
c00157a3:	83 c4 10             	add    esp,0x10
c00157a6:	39 eb                	cmp    ebx,ebp
c00157a8:	75 12                	jne    c00157bc <timerHandler(unsigned long long)+0x87>
c00157aa:	83 ec 0c             	sub    esp,0xc
c00157ad:	68 04 bc 03 c0       	push   0xc003bc04
c00157b2:	e8 65 94 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157b7:	89 c3                	mov    ebx,eax
c00157b9:	83 c4 10             	add    esp,0x10
c00157bc:	83 ec 0c             	sub    esp,0xc
c00157bf:	68 04 bc 03 c0       	push   0xc003bc04
c00157c4:	e8 89 93 00 00       	call   c001eb52 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00157c9:	83 c4 10             	add    esp,0x10
c00157cc:	84 c0                	test   al,al
c00157ce:	75 b4                	jne    c0015784 <timerHandler(unsigned long long)+0x4f>
c00157d0:	83 ec 0c             	sub    esp,0xc
c00157d3:	68 04 bc 03 c0       	push   0xc003bc04
c00157d8:	e8 3f 94 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157dd:	83 c4 10             	add    esp,0x10
c00157e0:	39 d8                	cmp    eax,ebx
c00157e2:	74 a0                	je     c0015784 <timerHandler(unsigned long long)+0x4f>
c00157e4:	83 ec 0c             	sub    esp,0xc
c00157e7:	68 04 bc 03 c0       	push   0xc003bc04
c00157ec:	e8 2b 94 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157f1:	c7 04 24 04 bc 03 c0 	mov    DWORD PTR [esp],0xc003bc04
c00157f8:	89 c5                	mov    ebp,eax
c00157fa:	e8 6f 93 00 00       	call   c001eb6e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00157ff:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0015802:	83 c4 10             	add    esp,0x10
c0015805:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0015808:	39 15 90 c3 03 c0    	cmp    DWORD PTR ds:0xc003c390,edx
c001580e:	a1 94 c3 03 c0       	mov    eax,ds:0xc003c394
c0015813:	19 c8                	sbb    eax,ecx
c0015815:	73 83                	jae    c001579a <timerHandler(unsigned long long)+0x65>
c0015817:	50                   	push   eax
c0015818:	50                   	push   eax
c0015819:	55                   	push   ebp
c001581a:	68 04 bc 03 c0       	push   0xc003bc04
c001581f:	e8 5a 92 00 00       	call   c001ea7e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015824:	eb 93                	jmp    c00157b9 <timerHandler(unsigned long long)+0x84>
c0015826:	80 3d cc b9 03 c0 00 	cmp    BYTE PTR ds:0xc003b9cc,0x0
c001582d:	74 29                	je     c0015858 <timerHandler(unsigned long long)+0x123>
c001582f:	39 c6                	cmp    esi,eax
c0015831:	bb 00 00 00 00       	mov    ebx,0x0
c0015836:	19 df                	sbb    edi,ebx
c0015838:	72 19                	jb     c0015853 <timerHandler(unsigned long long)+0x11e>
c001583a:	e8 f7 8a ff ff       	call   c000e336 <lockScheduler()>
c001583f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015844:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0015847:	e8 1e 8e ff ff       	call   c000e66a <schedule()>
c001584c:	e8 e7 8a ff ff       	call   c000e338 <unlockScheduler()>
c0015851:	eb 05                	jmp    c0015858 <timerHandler(unsigned long long)+0x123>
c0015853:	29 f0                	sub    eax,esi
c0015855:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0015858:	83 c4 0c             	add    esp,0xc
c001585b:	5b                   	pop    ebx
c001585c:	5e                   	pop    esi
c001585d:	5f                   	pop    edi
c001585e:	5d                   	pop    ebp
c001585f:	e9 8b 8e ff ff       	jmp    c000e6ef <unlockStuff()>
c0015864:	83 c4 0c             	add    esp,0xc
c0015867:	5b                   	pop    ebx
c0015868:	5e                   	pop    esi
c0015869:	5f                   	pop    edi
c001586a:	5d                   	pop    ebp
c001586b:	c3                   	ret    

c001586c <setupTimer(int)>:
c001586c:	57                   	push   edi
c001586d:	56                   	push   esi
c001586e:	53                   	push   ebx
c001586f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015873:	e8 cf 18 00 00       	call   c0017147 <getCPUNumber()>
c0015878:	85 c0                	test   eax,eax
c001587a:	74 32                	je     c00158ae <setupTimer(int)+0x42>
c001587c:	83 ec 0c             	sub    esp,0xc
c001587f:	68 60 01 00 00       	push   0x160
c0015884:	e8 bb cb ff ff       	call   c0012444 <operator new(unsigned long)>
c0015889:	89 04 24             	mov    DWORD PTR [esp],eax
c001588c:	89 c3                	mov    ebx,eax
c001588e:	e8 bf 88 00 00       	call   c001e152 <APICTimer::APICTimer()>
c0015893:	6a 00                	push   0x0
c0015895:	6a 00                	push   0x0
c0015897:	56                   	push   esi
c0015898:	53                   	push   ebx
c0015899:	e8 bc 87 00 00       	call   c001e05a <APICTimer::open(int, int, void*)>
c001589e:	83 c4 20             	add    esp,0x20
c00158a1:	e8 a4 18 00 00       	call   c001714a <thisCPU()>
c00158a6:	56                   	push   esi
c00158a7:	56                   	push   esi
c00158a8:	53                   	push   ebx
c00158a9:	e9 96 00 00 00       	jmp    c0015944 <setupTimer(int)+0xd8>
c00158ae:	e8 97 18 00 00       	call   c001714a <thisCPU()>
c00158b3:	83 ec 0c             	sub    esp,0xc
c00158b6:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00158bc:	e8 6f e1 ff ff       	call   c0013a30 <Device::getName()>
c00158c1:	83 c4 10             	add    esp,0x10
c00158c4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00158c7:	0f 85 87 00 00 00    	jne    c0015954 <setupTimer(int)+0xe8>
c00158cd:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c00158d2:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00158d9:	74 79                	je     c0015954 <setupTimer(int)+0xe8>
c00158db:	83 ec 0c             	sub    esp,0xc
c00158de:	68 5c 01 00 00       	push   0x15c
c00158e3:	e8 5c cb ff ff       	call   c0012444 <operator new(unsigned long)>
c00158e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00158eb:	89 c3                	mov    ebx,eax
c00158ed:	e8 b0 89 00 00       	call   c001e2a2 <PIT::PIT()>
c00158f2:	59                   	pop    ecx
c00158f3:	5f                   	pop    edi
c00158f4:	53                   	push   ebx
c00158f5:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c00158fb:	e8 4e de ff ff       	call   c001374e <Device::addChild(Device*)>
c0015900:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015902:	6a 00                	push   0x0
c0015904:	6a 00                	push   0x0
c0015906:	56                   	push   esi
c0015907:	53                   	push   ebx
c0015908:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001590b:	83 c4 14             	add    esp,0x14
c001590e:	68 60 01 00 00       	push   0x160
c0015913:	e8 2c cb ff ff       	call   c0012444 <operator new(unsigned long)>
c0015918:	89 04 24             	mov    DWORD PTR [esp],eax
c001591b:	89 c7                	mov    edi,eax
c001591d:	e8 30 88 00 00       	call   c001e152 <APICTimer::APICTimer()>
c0015922:	6a 00                	push   0x0
c0015924:	6a 00                	push   0x0
c0015926:	56                   	push   esi
c0015927:	57                   	push   edi
c0015928:	e8 2d 87 00 00       	call   c001e05a <APICTimer::open(int, int, void*)>
c001592d:	83 c4 20             	add    esp,0x20
c0015930:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015932:	6a 00                	push   0x0
c0015934:	6a 00                	push   0x0
c0015936:	6a 00                	push   0x0
c0015938:	53                   	push   ebx
c0015939:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001593c:	e8 09 18 00 00       	call   c001714a <thisCPU()>
c0015941:	5a                   	pop    edx
c0015942:	59                   	pop    ecx
c0015943:	57                   	push   edi
c0015944:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001594a:	e8 ff dd ff ff       	call   c001374e <Device::addChild(Device*)>
c001594f:	83 c4 10             	add    esp,0x10
c0015952:	eb 33                	jmp    c0015987 <setupTimer(int)+0x11b>
c0015954:	83 ec 0c             	sub    esp,0xc
c0015957:	68 5c 01 00 00       	push   0x15c
c001595c:	e8 e3 ca ff ff       	call   c0012444 <operator new(unsigned long)>
c0015961:	89 04 24             	mov    DWORD PTR [esp],eax
c0015964:	89 c3                	mov    ebx,eax
c0015966:	e8 37 89 00 00       	call   c001e2a2 <PIT::PIT()>
c001596b:	58                   	pop    eax
c001596c:	5a                   	pop    edx
c001596d:	53                   	push   ebx
c001596e:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c0015974:	e8 d5 dd ff ff       	call   c001374e <Device::addChild(Device*)>
c0015979:	8b 03                	mov    eax,DWORD PTR [ebx]
c001597b:	6a 00                	push   0x0
c001597d:	6a 00                	push   0x0
c001597f:	56                   	push   esi
c0015980:	53                   	push   ebx
c0015981:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015984:	83 c4 20             	add    esp,0x20
c0015987:	89 d8                	mov    eax,ebx
c0015989:	5b                   	pop    ebx
c001598a:	5e                   	pop    esi
c001598b:	5f                   	pop    edi
c001598c:	c3                   	ret    
c001598d:	90                   	nop

c001598e <VCache::VCache(PhysicalDisk*)>:
c001598e:	53                   	push   ebx
c001598f:	83 ec 08             	sub    esp,0x8
c0015992:	ba 6c 9f 03 c0       	mov    edx,0xc0039f6c
c0015997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001599b:	89 10                	mov    DWORD PTR [eax],edx
c001599d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159a1:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00159a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159ac:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00159b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159b7:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00159be:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00159c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159c9:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00159d0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00159d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159db:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00159e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159e6:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00159ea:	83 ec 0c             	sub    esp,0xc
c00159ed:	6a 10                	push   0x10
c00159ef:	e8 50 ca ff ff       	call   c0012444 <operator new(unsigned long)>
c00159f4:	83 c4 10             	add    esp,0x10
c00159f7:	89 c3                	mov    ebx,eax
c00159f9:	83 ec 0c             	sub    esp,0xc
c00159fc:	53                   	push   ebx
c00159fd:	e8 4c 8a ff ff       	call   c000e44e <Mutex::Mutex()>
c0015a02:	83 c4 10             	add    esp,0x10
c0015a05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a09:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0015a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015a14:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0015a17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a1b:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0015a22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a26:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015a2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a30:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0015a33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a37:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0015a3d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015a43:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015a47:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0015a4a:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0015a4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a51:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0015a55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a59:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015a5f:	c1 e0 06             	shl    eax,0x6
c0015a62:	83 ec 0c             	sub    esp,0xc
c0015a65:	50                   	push   eax
c0015a66:	e8 24 7a ff ff       	call   c000d48f <malloc>
c0015a6b:	83 c4 10             	add    esp,0x10
c0015a6e:	89 c2                	mov    edx,eax
c0015a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a74:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015a77:	90                   	nop
c0015a78:	83 c4 08             	add    esp,0x8
c0015a7b:	5b                   	pop    ebx
c0015a7c:	c3                   	ret    
c0015a7d:	90                   	nop

c0015a7e <VCache::writeWriteBuffer()>:
c0015a7e:	53                   	push   ebx
c0015a7f:	83 ec 14             	sub    esp,0x14
c0015a82:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015a86:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015a89:	8b 10                	mov    edx,DWORD PTR [eax]
c0015a8b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015a8e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015a91:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015a94:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0015a97:	50                   	push   eax
c0015a98:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0015a9b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0015aa2:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0015aa9:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0015aad:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0015ab4:	83 c4 28             	add    esp,0x28
c0015ab7:	5b                   	pop    ebx
c0015ab8:	c3                   	ret    
c0015ab9:	90                   	nop

c0015aba <VCache::~VCache()>:
c0015aba:	83 ec 0c             	sub    esp,0xc
c0015abd:	ba 6c 9f 03 c0       	mov    edx,0xc0039f6c
c0015ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ac6:	89 10                	mov    DWORD PTR [eax],edx
c0015ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015acc:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0015acf:	84 c0                	test   al,al
c0015ad1:	74 0f                	je     c0015ae2 <VCache::~VCache()+0x28>
c0015ad3:	83 ec 0c             	sub    esp,0xc
c0015ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ada:	e8 9f ff ff ff       	call   c0015a7e <VCache::writeWriteBuffer()>
c0015adf:	83 c4 10             	add    esp,0x10
c0015ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ae6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015ae9:	83 ec 0c             	sub    esp,0xc
c0015aec:	50                   	push   eax
c0015aed:	e8 ad 79 ff ff       	call   c000d49f <free>
c0015af2:	83 c4 10             	add    esp,0x10
c0015af5:	90                   	nop
c0015af6:	83 c4 0c             	add    esp,0xc
c0015af9:	c3                   	ret    

c0015afa <VCache::~VCache()>:
c0015afa:	83 ec 0c             	sub    esp,0xc
c0015afd:	83 ec 0c             	sub    esp,0xc
c0015b00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b04:	e8 b1 ff ff ff       	call   c0015aba <VCache::~VCache()>
c0015b09:	83 c4 10             	add    esp,0x10
c0015b0c:	83 ec 08             	sub    esp,0x8
c0015b0f:	6a 30                	push   0x30
c0015b11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b15:	e8 39 c9 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c0015b1a:	83 c4 10             	add    esp,0x10
c0015b1d:	83 c4 0c             	add    esp,0xc
c0015b20:	c3                   	ret    
c0015b21:	90                   	nop

c0015b22 <VCache::write(unsigned long long, int, void*)>:
c0015b22:	55                   	push   ebp
c0015b23:	57                   	push   edi
c0015b24:	56                   	push   esi
c0015b25:	53                   	push   ebx
c0015b26:	83 ec 28             	sub    esp,0x28
c0015b29:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015b2d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0015b31:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015b35:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0015b39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015b3c:	e8 e1 8e ff ff       	call   c000ea22 <Semaphore::acquire()>
c0015b41:	83 c4 10             	add    esp,0x10
c0015b44:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0015b48:	74 66                	je     c0015bb0 <VCache::write(unsigned long long, int, void*)+0x8e>
c0015b4a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015b4d:	99                   	cdq    
c0015b4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015b52:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0015b55:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0015b58:	89 c1                	mov    ecx,eax
c0015b5a:	89 d0                	mov    eax,edx
c0015b5c:	31 f1                	xor    ecx,esi
c0015b5e:	31 f8                	xor    eax,edi
c0015b60:	89 ca                	mov    edx,ecx
c0015b62:	09 c2                	or     edx,eax
c0015b64:	75 3e                	jne    c0015ba4 <VCache::write(unsigned long long, int, void*)+0x82>
c0015b66:	83 fd 01             	cmp    ebp,0x1
c0015b69:	75 39                	jne    c0015ba4 <VCache::write(unsigned long long, int, void*)+0x82>
c0015b6b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015b6e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015b74:	51                   	push   ecx
c0015b75:	50                   	push   eax
c0015b76:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015b7a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015b7e:	0f af c8             	imul   ecx,eax
c0015b81:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0015b84:	51                   	push   ecx
c0015b85:	e8 d7 aa fe ff       	call   c0000661 <memcpy>
c0015b8a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015b8d:	83 c4 10             	add    esp,0x10
c0015b90:	40                   	inc    eax
c0015b91:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0015b94:	83 f8 40             	cmp    eax,0x40
c0015b97:	75 57                	jne    c0015bf0 <VCache::write(unsigned long long, int, void*)+0xce>
c0015b99:	83 ec 0c             	sub    esp,0xc
c0015b9c:	53                   	push   ebx
c0015b9d:	e8 dc fe ff ff       	call   c0015a7e <VCache::writeWriteBuffer()>
c0015ba2:	eb 34                	jmp    c0015bd8 <VCache::write(unsigned long long, int, void*)+0xb6>
c0015ba4:	83 ec 0c             	sub    esp,0xc
c0015ba7:	53                   	push   ebx
c0015ba8:	e8 d1 fe ff ff       	call   c0015a7e <VCache::writeWriteBuffer()>
c0015bad:	83 c4 10             	add    esp,0x10
c0015bb0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015bb3:	83 fd 3f             	cmp    ebp,0x3f
c0015bb6:	7f 25                	jg     c0015bdd <VCache::write(unsigned long long, int, void*)+0xbb>
c0015bb8:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0015bbb:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0015bbe:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0015bc1:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0015bc5:	52                   	push   edx
c0015bc6:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0015bcc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015bd0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015bd3:	e8 89 aa fe ff       	call   c0000661 <memcpy>
c0015bd8:	83 c4 10             	add    esp,0x10
c0015bdb:	eb 13                	jmp    c0015bf0 <VCache::write(unsigned long long, int, void*)+0xce>
c0015bdd:	83 ec 0c             	sub    esp,0xc
c0015be0:	8b 10                	mov    edx,DWORD PTR [eax]
c0015be2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015be6:	55                   	push   ebp
c0015be7:	57                   	push   edi
c0015be8:	56                   	push   esi
c0015be9:	50                   	push   eax
c0015bea:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0015bed:	83 c4 20             	add    esp,0x20
c0015bf0:	83 ec 0c             	sub    esp,0xc
c0015bf3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015bf6:	e8 c3 93 ff ff       	call   c000efbe <Semaphore::release()>
c0015bfb:	83 c4 2c             	add    esp,0x2c
c0015bfe:	31 c0                	xor    eax,eax
c0015c00:	5b                   	pop    ebx
c0015c01:	5e                   	pop    esi
c0015c02:	5f                   	pop    edi
c0015c03:	5d                   	pop    ebp
c0015c04:	c3                   	ret    
c0015c05:	90                   	nop

c0015c06 <VCache::read(unsigned long long, int, void*)>:
c0015c06:	57                   	push   edi
c0015c07:	56                   	push   esi
c0015c08:	53                   	push   ebx
c0015c09:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c0d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015c11:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015c15:	83 ec 0c             	sub    esp,0xc
c0015c18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015c1b:	e8 02 8e ff ff       	call   c000ea22 <Semaphore::acquire()>
c0015c20:	83 c4 10             	add    esp,0x10
c0015c23:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0015c27:	74 0c                	je     c0015c35 <VCache::read(unsigned long long, int, void*)+0x2f>
c0015c29:	83 ec 0c             	sub    esp,0xc
c0015c2c:	53                   	push   ebx
c0015c2d:	e8 4c fe ff ff       	call   c0015a7e <VCache::writeWriteBuffer()>
c0015c32:	83 c4 10             	add    esp,0x10
c0015c35:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015c38:	83 ec 0c             	sub    esp,0xc
c0015c3b:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c45:	57                   	push   edi
c0015c46:	56                   	push   esi
c0015c47:	50                   	push   eax
c0015c48:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015c4b:	83 c4 14             	add    esp,0x14
c0015c4e:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015c51:	e8 68 93 ff ff       	call   c000efbe <Semaphore::release()>
c0015c56:	83 c4 10             	add    esp,0x10
c0015c59:	31 c0                	xor    eax,eax
c0015c5b:	5b                   	pop    ebx
c0015c5c:	5e                   	pop    esi
c0015c5d:	5f                   	pop    edi
c0015c5e:	c3                   	ret    
c0015c5f:	90                   	nop

c0015c60 <Video::putrect(int, int, int, int, unsigned int)>:
c0015c60:	55                   	push   ebp
c0015c61:	57                   	push   edi
c0015c62:	56                   	push   esi
c0015c63:	53                   	push   ebx
c0015c64:	83 ec 1c             	sub    esp,0x1c
c0015c67:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0015c6b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0015c6f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015c73:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0015c77:	01 e8                	add    eax,ebp
c0015c79:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015c7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c81:	01 df                	add    edi,ebx
c0015c83:	39 fb                	cmp    ebx,edi
c0015c85:	7d 1b                	jge    c0015ca2 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0015c87:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0015c8b:	7d 12                	jge    c0015c9f <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c0015c8d:	8b 16                	mov    edx,DWORD PTR [esi]
c0015c8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0015c93:	53                   	push   ebx
c0015c94:	55                   	push   ebp
c0015c95:	45                   	inc    ebp
c0015c96:	56                   	push   esi
c0015c97:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015c9a:	83 c4 10             	add    esp,0x10
c0015c9d:	eb e8                	jmp    c0015c87 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0015c9f:	43                   	inc    ebx
c0015ca0:	eb e1                	jmp    c0015c83 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0015ca2:	83 c4 1c             	add    esp,0x1c
c0015ca5:	5b                   	pop    ebx
c0015ca6:	5e                   	pop    esi
c0015ca7:	5f                   	pop    edi
c0015ca8:	5d                   	pop    ebp
c0015ca9:	c3                   	ret    

c0015caa <Video::blit(unsigned int*, int, int, int, int)>:
c0015caa:	55                   	push   ebp
c0015cab:	57                   	push   edi
c0015cac:	56                   	push   esi
c0015cad:	53                   	push   ebx
c0015cae:	83 ec 1c             	sub    esp,0x1c
c0015cb1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015cb5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015cb9:	85 c0                	test   eax,eax
c0015cbb:	79 02                	jns    c0015cbf <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0015cbd:	31 c0                	xor    eax,eax
c0015cbf:	c1 e0 02             	shl    eax,0x2
c0015cc2:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015cc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015cca:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015cce:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0015cd2:	39 d8                	cmp    eax,ebx
c0015cd4:	7e 49                	jle    c0015d1f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0015cd6:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0015cdc:	7c 41                	jl     c0015d1f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0015cde:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0015ce2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0015ce6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0015cea:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0015cee:	39 f9                	cmp    ecx,edi
c0015cf0:	7e 22                	jle    c0015d14 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0015cf2:	83 c5 04             	add    ebp,0x4
c0015cf5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0015cfb:	7c 14                	jl     c0015d11 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0015cfd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015cff:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0015d02:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d06:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d0a:	56                   	push   esi
c0015d0b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0015d0e:	83 c4 10             	add    esp,0x10
c0015d11:	47                   	inc    edi
c0015d12:	eb d2                	jmp    c0015ce6 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0015d14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d18:	43                   	inc    ebx
c0015d19:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0015d1d:	eb ab                	jmp    c0015cca <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0015d1f:	83 c4 1c             	add    esp,0x1c
c0015d22:	5b                   	pop    ebx
c0015d23:	5e                   	pop    esi
c0015d24:	5f                   	pop    edi
c0015d25:	5d                   	pop    ebp
c0015d26:	c3                   	ret    
c0015d27:	90                   	nop

c0015d28 <Video::clearScreen(unsigned int)>:
c0015d28:	57                   	push   edi
c0015d29:	56                   	push   esi
c0015d2a:	53                   	push   ebx
c0015d2b:	31 db                	xor    ebx,ebx
c0015d2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d31:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0015d37:	7e 1f                	jle    c0015d58 <Video::clearScreen(unsigned int)+0x30>
c0015d39:	31 ff                	xor    edi,edi
c0015d3b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0015d41:	7e 12                	jle    c0015d55 <Video::clearScreen(unsigned int)+0x2d>
c0015d43:	8b 06                	mov    eax,DWORD PTR [esi]
c0015d45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015d49:	53                   	push   ebx
c0015d4a:	57                   	push   edi
c0015d4b:	47                   	inc    edi
c0015d4c:	56                   	push   esi
c0015d4d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015d50:	83 c4 10             	add    esp,0x10
c0015d53:	eb e6                	jmp    c0015d3b <Video::clearScreen(unsigned int)+0x13>
c0015d55:	43                   	inc    ebx
c0015d56:	eb d9                	jmp    c0015d31 <Video::clearScreen(unsigned int)+0x9>
c0015d58:	5b                   	pop    ebx
c0015d59:	5e                   	pop    esi
c0015d5a:	5f                   	pop    edi
c0015d5b:	c3                   	ret    

c0015d5c <Video::putpixel(int, int, unsigned int)>:
c0015d5c:	c7 44 24 04 74 9f 03 c0 	mov    DWORD PTR [esp+0x4],0xc0039f74
c0015d64:	e9 2b 71 ff ff       	jmp    c000ce94 <kprintf(char const*, ...)>
c0015d69:	90                   	nop

c0015d6a <Video::Video(char const*)>:
c0015d6a:	83 ec 0c             	sub    esp,0xc
c0015d6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d71:	83 ec 08             	sub    esp,0x8
c0015d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d78:	50                   	push   eax
c0015d79:	e8 c0 db ff ff       	call   c001393e <Device::Device(char const*)>
c0015d7e:	83 c4 10             	add    esp,0x10
c0015d81:	ba 8c 9f 03 c0       	mov    edx,0xc0039f8c
c0015d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d8a:	89 10                	mov    DWORD PTR [eax],edx
c0015d8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d90:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0015d9a:	90                   	nop
c0015d9b:	83 c4 0c             	add    esp,0xc
c0015d9e:	c3                   	ret    
c0015d9f:	90                   	nop

c0015da0 <Video::~Video()>:
c0015da0:	83 ec 0c             	sub    esp,0xc
c0015da3:	ba 8c 9f 03 c0       	mov    edx,0xc0039f8c
c0015da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dac:	89 10                	mov    DWORD PTR [eax],edx
c0015dae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015db2:	83 ec 0c             	sub    esp,0xc
c0015db5:	50                   	push   eax
c0015db6:	e8 35 d8 ff ff       	call   c00135f0 <Device::~Device()>
c0015dbb:	83 c4 10             	add    esp,0x10
c0015dbe:	90                   	nop
c0015dbf:	83 c4 0c             	add    esp,0xc
c0015dc2:	c3                   	ret    
c0015dc3:	90                   	nop

c0015dc4 <Video::~Video()>:
c0015dc4:	83 ec 0c             	sub    esp,0xc
c0015dc7:	83 ec 0c             	sub    esp,0xc
c0015dca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015dce:	e8 cd ff ff ff       	call   c0015da0 <Video::~Video()>
c0015dd3:	83 c4 10             	add    esp,0x10
c0015dd6:	83 ec 08             	sub    esp,0x8
c0015dd9:	68 64 01 00 00       	push   0x164
c0015dde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015de2:	e8 6c c6 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c0015de7:	83 c4 10             	add    esp,0x10
c0015dea:	83 c4 0c             	add    esp,0xc
c0015ded:	c3                   	ret    

c0015dee <Video::isMonochrome()>:
c0015dee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015df2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0015df8:	c3                   	ret    
c0015df9:	90                   	nop

c0015dfa <Video::getWidth()>:
c0015dfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dfe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015e04:	c3                   	ret    
c0015e05:	90                   	nop

c0015e06 <Video::getHeight()>:
c0015e06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e0a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015e10:	c3                   	ret    
c0015e11:	90                   	nop

c0015e12 <Video::drawCursor(int, int, unsigned char*, int)>:
c0015e12:	55                   	push   ebp
c0015e13:	57                   	push   edi
c0015e14:	56                   	push   esi
c0015e15:	53                   	push   ebx
c0015e16:	83 ec 2c             	sub    esp,0x2c
c0015e19:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015e1d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0015e21:	83 f8 01             	cmp    eax,0x1
c0015e24:	19 c9                	sbb    ecx,ecx
c0015e26:	31 db                	xor    ebx,ebx
c0015e28:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0015e2c:	89 cd                	mov    ebp,ecx
c0015e2e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0015e36:	f7 d5                	not    ebp
c0015e38:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0015e3e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015e42:	01 d8                	add    eax,ebx
c0015e44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e48:	56                   	push   esi
c0015e49:	e8 b8 ff ff ff       	call   c0015e06 <Video::getHeight()>
c0015e4e:	59                   	pop    ecx
c0015e4f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0015e53:	7e 70                	jle    c0015ec5 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0015e55:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015e59:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015e5d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0015e60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015e64:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015e68:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0015e6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015e73:	89 f8                	mov    eax,edi
c0015e75:	83 c0 20             	add    eax,0x20
c0015e78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015e7c:	56                   	push   esi
c0015e7d:	e8 78 ff ff ff       	call   c0015dfa <Video::getWidth()>
c0015e82:	5a                   	pop    edx
c0015e83:	39 c7                	cmp    edi,eax
c0015e85:	7d 34                	jge    c0015ebb <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0015e87:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0015e8c:	74 05                	je     c0015e93 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0015e8e:	8b 06                	mov    eax,DWORD PTR [esi]
c0015e90:	55                   	push   ebp
c0015e91:	eb 0d                	jmp    c0015ea0 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0015e93:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0015e98:	74 12                	je     c0015eac <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0015e9a:	8b 06                	mov    eax,DWORD PTR [esi]
c0015e9c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ea0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015ea4:	57                   	push   edi
c0015ea5:	56                   	push   esi
c0015ea6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015ea9:	83 c4 10             	add    esp,0x10
c0015eac:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0015eb0:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0015eb4:	47                   	inc    edi
c0015eb5:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015eb9:	75 c1                	jne    c0015e7c <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0015ebb:	43                   	inc    ebx
c0015ebc:	83 fb 20             	cmp    ebx,0x20
c0015ebf:	0f 85 79 ff ff ff    	jne    c0015e3e <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0015ec5:	83 c4 2c             	add    esp,0x2c
c0015ec8:	5b                   	pop    ebx
c0015ec9:	5e                   	pop    esi
c0015eca:	5f                   	pop    edi
c0015ecb:	5d                   	pop    ebp
c0015ecc:	c3                   	ret    
c0015ecd:	90                   	nop

c0015ece <ACPI::close(int, int, void*)>:
c0015ece:	83 ec 1c             	sub    esp,0x1c
c0015ed1:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0015ed9:	74 0a                	je     c0015ee5 <ACPI::close(int, int, void*)+0x17>
c0015edb:	b8 00 00 00 00       	mov    eax,0x0
c0015ee0:	e9 9a 00 00 00       	jmp    c0015f7f <ACPI::close(int, int, void*)+0xb1>
c0015ee5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015eea:	75 37                	jne    c0015f23 <ACPI::close(int, int, void*)+0x55>
c0015eec:	83 ec 0c             	sub    esp,0xc
c0015eef:	68 c4 9f 03 c0       	push   0xc0039fc4
c0015ef4:	e8 9b 6f ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0015ef9:	83 c4 10             	add    esp,0x10
c0015efc:	a1 a8 c3 03 c0       	mov    eax,ds:0xc003c3a8
c0015f01:	85 c0                	test   eax,eax
c0015f03:	74 07                	je     c0015f0c <ACPI::close(int, int, void*)+0x3e>
c0015f05:	a1 a8 c3 03 c0       	mov    eax,ds:0xc003c3a8
c0015f0a:	ff d0                	call   eax
c0015f0c:	83 ec 0c             	sub    esp,0xc
c0015f0f:	68 78 a0 03 c0       	push   0xc003a078
c0015f14:	e8 99 70 ff ff       	call   c000cfb2 <panic(char const*)>
c0015f19:	83 c4 10             	add    esp,0x10
c0015f1c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f21:	eb 5c                	jmp    c0015f7f <ACPI::close(int, int, void*)+0xb1>
c0015f23:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0015f28:	75 50                	jne    c0015f7a <ACPI::close(int, int, void*)+0xac>
c0015f2a:	a1 a4 c3 03 c0       	mov    eax,ds:0xc003c3a4
c0015f2f:	85 c0                	test   eax,eax
c0015f31:	74 07                	je     c0015f3a <ACPI::close(int, int, void*)+0x6c>
c0015f33:	a1 a4 c3 03 c0       	mov    eax,ds:0xc003c3a4
c0015f38:	ff d0                	call   eax
c0015f3a:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0015f3f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015f44:	83 e0 02             	and    eax,0x2
c0015f47:	74 1c                	je     c0015f65 <ACPI::close(int, int, void*)+0x97>
c0015f49:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0015f50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f54:	89 c2                	mov    edx,eax
c0015f56:	ec                   	in     al,dx
c0015f57:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0015f5b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0015f5f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015f63:	eb da                	jmp    c0015f3f <ACPI::close(int, int, void*)+0x71>
c0015f65:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0015f6c:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0015f71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0015f75:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015f79:	ee                   	out    dx,al
c0015f7a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f7f:	83 c4 1c             	add    esp,0x1c
c0015f82:	c3                   	ret    

c0015f83 <findRSDP()>:
c0015f83:	83 ec 1c             	sub    esp,0x1c
c0015f86:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c0015f8b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015f91:	83 e0 04             	and    eax,0x4
c0015f94:	84 c0                	test   al,al
c0015f96:	75 07                	jne    c0015f9f <findRSDP()+0x1c>
c0015f98:	b8 00 00 00 00       	mov    eax,0x0
c0015f9d:	eb 6a                	jmp    c0016009 <findRSDP()+0x86>
c0015f9f:	a1 90 bb 03 c0       	mov    eax,ds:0xc003bb90
c0015fa4:	3d ff 07 00 00       	cmp    eax,0x7ff
c0015fa9:	7f 1b                	jg     c0015fc6 <findRSDP()+0x43>
c0015fab:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c0015fb0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015fb6:	83 e2 fb             	and    edx,0xfffffffb
c0015fb9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015fbf:	b8 00 00 00 00       	mov    eax,0x0
c0015fc4:	eb 43                	jmp    c0016009 <findRSDP()+0x86>
c0015fc6:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0015fce:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0015fd6:	77 2c                	ja     c0016004 <findRSDP()+0x81>
c0015fd8:	83 ec 04             	sub    esp,0x4
c0015fdb:	6a 08                	push   0x8
c0015fdd:	68 d1 9f 03 c0       	push   0xc0039fd1
c0015fe2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015fe6:	e8 b1 a5 fe ff       	call   c000059c <memcmp>
c0015feb:	83 c4 10             	add    esp,0x10
c0015fee:	85 c0                	test   eax,eax
c0015ff0:	0f 94 c0             	sete   al
c0015ff3:	84 c0                	test   al,al
c0015ff5:	74 06                	je     c0015ffd <findRSDP()+0x7a>
c0015ff7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015ffb:	eb 0c                	jmp    c0016009 <findRSDP()+0x86>
c0015ffd:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016002:	eb ca                	jmp    c0015fce <findRSDP()+0x4b>
c0016004:	b8 00 00 00 00       	mov    eax,0x0
c0016009:	83 c4 1c             	add    esp,0x1c
c001600c:	c3                   	ret    

c001600d <loadACPITables(unsigned char*)>:
c001600d:	56                   	push   esi
c001600e:	53                   	push   ebx
c001600f:	83 ec 44             	sub    esp,0x44
c0016012:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c0016017:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001601d:	83 e0 04             	and    eax,0x4
c0016020:	84 c0                	test   al,al
c0016022:	0f 84 05 02 00 00    	je     c001622d <loadACPITables(unsigned char*)+0x220>
c0016028:	a0 c0 c5 03 c0       	mov    al,ds:0xc003c5c0
c001602d:	84 c0                	test   al,al
c001602f:	74 75                	je     c00160a6 <loadACPITables(unsigned char*)+0x99>
c0016031:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016035:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016039:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001603d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016040:	83 e8 24             	sub    eax,0x24
c0016043:	c1 e8 03             	shr    eax,0x3
c0016046:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001604a:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016052:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016056:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001605a:	0f 8d b2 00 00 00    	jge    c0016112 <loadACPITables(unsigned char*)+0x105>
c0016060:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016064:	83 c0 24             	add    eax,0x24
c0016067:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001606b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001606f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016073:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016077:	c1 e0 03             	shl    eax,0x3
c001607a:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c001607e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016082:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0016085:	8b 00                	mov    eax,DWORD PTR [eax]
c0016087:	89 c1                	mov    ecx,eax
c0016089:	a1 ac c3 03 c0       	mov    eax,ds:0xc003c3ac
c001608e:	8d 50 01             	lea    edx,[eax+0x1]
c0016091:	89 15 ac c3 03 c0    	mov    DWORD PTR ds:0xc003c3ac,edx
c0016097:	89 ca                	mov    edx,ecx
c0016099:	89 14 c5 c4 c3 03 c0 	mov    DWORD PTR [eax*8-0x3ffc3c3c],edx
c00160a0:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00160a4:	eb ac                	jmp    c0016052 <loadACPITables(unsigned char*)+0x45>
c00160a6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00160aa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00160ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00160b5:	83 e8 24             	sub    eax,0x24
c00160b8:	c1 e8 02             	shr    eax,0x2
c00160bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00160bf:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00160c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00160cb:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00160cf:	7d 41                	jge    c0016112 <loadACPITables(unsigned char*)+0x105>
c00160d1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00160d5:	83 c0 24             	add    eax,0x24
c00160d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00160dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00160e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00160e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00160e8:	c1 e0 02             	shl    eax,0x2
c00160eb:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00160ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160f3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00160f5:	a1 ac c3 03 c0       	mov    eax,ds:0xc003c3ac
c00160fa:	8d 50 01             	lea    edx,[eax+0x1]
c00160fd:	89 15 ac c3 03 c0    	mov    DWORD PTR ds:0xc003c3ac,edx
c0016103:	89 ca                	mov    edx,ecx
c0016105:	89 14 c5 c4 c3 03 c0 	mov    DWORD PTR [eax*8-0x3ffc3c3c],edx
c001610c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0016110:	eb b5                	jmp    c00160c7 <loadACPITables(unsigned char*)+0xba>
c0016112:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c001611a:	a1 ac c3 03 c0       	mov    eax,ds:0xc003c3ac
c001611f:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0016123:	0f 8d 05 01 00 00    	jge    c001622e <loadACPITables(unsigned char*)+0x221>
c0016129:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001612d:	8b 04 c5 c4 c3 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc3c3c]
c0016134:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001613c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016144:	25 ff 0f 00 00       	and    eax,0xfff
c0016149:	89 c6                	mov    esi,eax
c001614b:	e8 f3 b2 ff ff       	call   c0011443 <Virt::getAKernelVAS()>
c0016150:	89 c3                	mov    ebx,eax
c0016152:	83 ec 0c             	sub    esp,0xc
c0016155:	6a 01                	push   0x1
c0016157:	e8 57 b1 ff ff       	call   c00112b3 <Virt::allocateKernelVirtualPages(int)>
c001615c:	83 c4 10             	add    esp,0x10
c001615f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016163:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016169:	83 ec 0c             	sub    esp,0xc
c001616c:	6a 01                	push   0x1
c001616e:	6a 01                	push   0x1
c0016170:	50                   	push   eax
c0016171:	52                   	push   edx
c0016172:	53                   	push   ebx
c0016173:	e8 5e ba ff ff       	call   c0011bd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016178:	83 c4 20             	add    esp,0x20
c001617b:	09 f0                	or     eax,esi
c001617d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016181:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016185:	c1 e0 03             	shl    eax,0x3
c0016188:	05 c0 c3 03 c0       	add    eax,0xc003c3c0
c001618d:	83 ec 04             	sub    esp,0x4
c0016190:	6a 04                	push   0x4
c0016192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016196:	50                   	push   eax
c0016197:	e8 c5 a4 fe ff       	call   c0000661 <memcpy>
c001619c:	83 c4 10             	add    esp,0x10
c001619f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00161a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00161aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00161ae:	05 00 10 00 00       	add    eax,0x1000
c00161b3:	c1 e8 0c             	shr    eax,0xc
c00161b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00161ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161be:	89 04 24             	mov    DWORD PTR [esp],eax
c00161c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161c5:	25 ff 0f 00 00       	and    eax,0xfff
c00161ca:	89 c6                	mov    esi,eax
c00161cc:	e8 72 b2 ff ff       	call   c0011443 <Virt::getAKernelVAS()>
c00161d1:	89 c3                	mov    ebx,eax
c00161d3:	83 ec 0c             	sub    esp,0xc
c00161d6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00161da:	e8 d4 b0 ff ff       	call   c00112b3 <Virt::allocateKernelVirtualPages(int)>
c00161df:	83 c4 10             	add    esp,0x10
c00161e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00161e6:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00161ec:	83 ec 0c             	sub    esp,0xc
c00161ef:	6a 01                	push   0x1
c00161f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00161f5:	50                   	push   eax
c00161f6:	52                   	push   edx
c00161f7:	53                   	push   ebx
c00161f8:	e8 d9 b9 ff ff       	call   c0011bd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00161fd:	83 c4 20             	add    esp,0x20
c0016200:	09 f0                	or     eax,esi
c0016202:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016206:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016209:	83 ec 0c             	sub    esp,0xc
c001620c:	50                   	push   eax
c001620d:	e8 d7 b3 ff ff       	call   c00115e9 <Virt::freeKernelVirtualPages(unsigned long)>
c0016212:	83 c4 10             	add    esp,0x10
c0016215:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016219:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001621d:	89 14 c5 c4 c3 03 c0 	mov    DWORD PTR [eax*8-0x3ffc3c3c],edx
c0016224:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0016228:	e9 ed fe ff ff       	jmp    c001611a <loadACPITables(unsigned char*)+0x10d>
c001622d:	90                   	nop
c001622e:	83 c4 44             	add    esp,0x44
c0016231:	5b                   	pop    ebx
c0016232:	5e                   	pop    esi
c0016233:	c3                   	ret    

c0016234 <findRSDT(unsigned char*)>:
c0016234:	56                   	push   esi
c0016235:	53                   	push   ebx
c0016236:	83 ec 44             	sub    esp,0x44
c0016239:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c001623e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016244:	83 e0 04             	and    eax,0x4
c0016247:	84 c0                	test   al,al
c0016249:	75 0a                	jne    c0016255 <findRSDT(unsigned char*)+0x21>
c001624b:	b8 00 00 00 00       	mov    eax,0x0
c0016250:	e9 f7 00 00 00       	jmp    c001634c <findRSDT(unsigned char*)+0x118>
c0016255:	83 ec 04             	sub    esp,0x4
c0016258:	6a 24                	push   0x24
c001625a:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001625e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016262:	50                   	push   eax
c0016263:	e8 f9 a3 fe ff       	call   c0000661 <memcpy>
c0016268:	83 c4 10             	add    esp,0x10
c001626b:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001626f:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0016273:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001627b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001627f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016283:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016287:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001628b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001628f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016293:	25 ff 0f 00 00       	and    eax,0xfff
c0016298:	89 c6                	mov    esi,eax
c001629a:	e8 a4 b1 ff ff       	call   c0011443 <Virt::getAKernelVAS()>
c001629f:	89 c3                	mov    ebx,eax
c00162a1:	83 ec 0c             	sub    esp,0xc
c00162a4:	6a 02                	push   0x2
c00162a6:	e8 08 b0 ff ff       	call   c00112b3 <Virt::allocateKernelVirtualPages(int)>
c00162ab:	83 c4 10             	add    esp,0x10
c00162ae:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00162b2:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00162b8:	83 ec 0c             	sub    esp,0xc
c00162bb:	6a 01                	push   0x1
c00162bd:	6a 02                	push   0x2
c00162bf:	50                   	push   eax
c00162c0:	52                   	push   edx
c00162c1:	53                   	push   ebx
c00162c2:	e8 0f b9 ff ff       	call   c0011bd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00162c7:	83 c4 20             	add    esp,0x20
c00162ca:	09 f0                	or     eax,esi
c00162cc:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00162d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00162d4:	25 ff 0f 00 00       	and    eax,0xfff
c00162d9:	89 c6                	mov    esi,eax
c00162db:	e8 63 b1 ff ff       	call   c0011443 <Virt::getAKernelVAS()>
c00162e0:	89 c3                	mov    ebx,eax
c00162e2:	83 ec 0c             	sub    esp,0xc
c00162e5:	6a 02                	push   0x2
c00162e7:	e8 c7 af ff ff       	call   c00112b3 <Virt::allocateKernelVirtualPages(int)>
c00162ec:	83 c4 10             	add    esp,0x10
c00162ef:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00162f3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00162f9:	83 ec 0c             	sub    esp,0xc
c00162fc:	6a 01                	push   0x1
c00162fe:	6a 02                	push   0x2
c0016300:	50                   	push   eax
c0016301:	52                   	push   edx
c0016302:	53                   	push   ebx
c0016303:	e8 ce b8 ff ff       	call   c0011bd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016308:	83 c4 20             	add    esp,0x20
c001630b:	09 f0                	or     eax,esi
c001630d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016311:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0016316:	75 11                	jne    c0016329 <findRSDT(unsigned char*)+0xf5>
c0016318:	c6 05 c0 c5 03 c0 00 	mov    BYTE PTR ds:0xc003c5c0,0x0
c001631f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016323:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016327:	eb 1f                	jmp    c0016348 <findRSDT(unsigned char*)+0x114>
c0016329:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c001632e:	75 11                	jne    c0016341 <findRSDT(unsigned char*)+0x10d>
c0016330:	c6 05 c0 c5 03 c0 01 	mov    BYTE PTR ds:0xc003c5c0,0x1
c0016337:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001633b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001633f:	eb 07                	jmp    c0016348 <findRSDT(unsigned char*)+0x114>
c0016341:	b8 00 00 00 00       	mov    eax,0x0
c0016346:	eb 04                	jmp    c001634c <findRSDT(unsigned char*)+0x118>
c0016348:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001634c:	83 c4 44             	add    esp,0x44
c001634f:	5b                   	pop    ebx
c0016350:	5e                   	pop    esi
c0016351:	c3                   	ret    

c0016352 <findDataTable(unsigned char*, char*)>:
c0016352:	83 ec 1c             	sub    esp,0x1c
c0016355:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c001635a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016360:	83 e0 04             	and    eax,0x4
c0016363:	84 c0                	test   al,al
c0016365:	75 07                	jne    c001636e <findDataTable(unsigned char*, char*)+0x1c>
c0016367:	b8 00 00 00 00       	mov    eax,0x0
c001636c:	eb 7c                	jmp    c00163ea <findDataTable(unsigned char*, char*)+0x98>
c001636e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016376:	a1 ac c3 03 c0       	mov    eax,ds:0xc003c3ac
c001637b:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001637f:	7d 3a                	jge    c00163bb <findDataTable(unsigned char*, char*)+0x69>
c0016381:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016385:	c1 e0 03             	shl    eax,0x3
c0016388:	05 c0 c3 03 c0       	add    eax,0xc003c3c0
c001638d:	83 ec 04             	sub    esp,0x4
c0016390:	6a 04                	push   0x4
c0016392:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016396:	50                   	push   eax
c0016397:	e8 00 a2 fe ff       	call   c000059c <memcmp>
c001639c:	83 c4 10             	add    esp,0x10
c001639f:	85 c0                	test   eax,eax
c00163a1:	0f 94 c0             	sete   al
c00163a4:	84 c0                	test   al,al
c00163a6:	74 0d                	je     c00163b5 <findDataTable(unsigned char*, char*)+0x63>
c00163a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00163ac:	8b 04 c5 c4 c3 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc3c3c]
c00163b3:	eb 35                	jmp    c00163ea <findDataTable(unsigned char*, char*)+0x98>
c00163b5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00163b9:	eb bb                	jmp    c0016376 <findDataTable(unsigned char*, char*)+0x24>
c00163bb:	a0 c0 c5 03 c0       	mov    al,ds:0xc003c5c0
c00163c0:	84 c0                	test   al,al
c00163c2:	74 07                	je     c00163cb <findDataTable(unsigned char*, char*)+0x79>
c00163c4:	b8 58 00 00 00       	mov    eax,0x58
c00163c9:	eb 05                	jmp    c00163d0 <findDataTable(unsigned char*, char*)+0x7e>
c00163cb:	b8 52 00 00 00       	mov    eax,0x52
c00163d0:	83 ec 04             	sub    esp,0x4
c00163d3:	50                   	push   eax
c00163d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00163d8:	68 9c a0 03 c0       	push   0xc003a09c
c00163dd:	e8 b2 6a ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c00163e2:	83 c4 10             	add    esp,0x10
c00163e5:	b8 00 00 00 00       	mov    eax,0x0
c00163ea:	83 c4 1c             	add    esp,0x1c
c00163ed:	c3                   	ret    

c00163ee <scanMADT()>:
c00163ee:	83 ec 2c             	sub    esp,0x2c
c00163f1:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c00163f6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00163fc:	83 e0 04             	and    eax,0x4
c00163ff:	84 c0                	test   al,al
c0016401:	0f 84 73 03 00 00    	je     c001677a <scanMADT()+0x38c>
c0016407:	e8 77 fb ff ff       	call   c0015f83 <findRSDP()>
c001640c:	a3 cc c5 03 c0       	mov    ds:0xc003c5cc,eax
c0016411:	a1 cc c5 03 c0       	mov    eax,ds:0xc003c5cc
c0016416:	85 c0                	test   eax,eax
c0016418:	75 19                	jne    c0016433 <scanMADT()+0x45>
c001641a:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c001641f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016425:	83 e2 fb             	and    edx,0xfffffffb
c0016428:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001642e:	e9 4b 03 00 00       	jmp    c001677e <scanMADT()+0x390>
c0016433:	a1 cc c5 03 c0       	mov    eax,ds:0xc003c5cc
c0016438:	83 ec 0c             	sub    esp,0xc
c001643b:	50                   	push   eax
c001643c:	e8 f3 fd ff ff       	call   c0016234 <findRSDT(unsigned char*)>
c0016441:	83 c4 10             	add    esp,0x10
c0016444:	a3 c8 c5 03 c0       	mov    ds:0xc003c5c8,eax
c0016449:	a1 c8 c5 03 c0       	mov    eax,ds:0xc003c5c8
c001644e:	85 c0                	test   eax,eax
c0016450:	75 19                	jne    c001646b <scanMADT()+0x7d>
c0016452:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c0016457:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001645d:	83 e2 fb             	and    edx,0xfffffffb
c0016460:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016466:	e9 13 03 00 00       	jmp    c001677e <scanMADT()+0x390>
c001646b:	a1 c8 c5 03 c0       	mov    eax,ds:0xc003c5c8
c0016470:	83 ec 0c             	sub    esp,0xc
c0016473:	50                   	push   eax
c0016474:	e8 94 fb ff ff       	call   c001600d <loadACPITables(unsigned char*)>
c0016479:	83 c4 10             	add    esp,0x10
c001647c:	a1 c8 c5 03 c0       	mov    eax,ds:0xc003c5c8
c0016481:	83 ec 08             	sub    esp,0x8
c0016484:	68 da 9f 03 c0       	push   0xc0039fda
c0016489:	50                   	push   eax
c001648a:	e8 c3 fe ff ff       	call   c0016352 <findDataTable(unsigned char*, char*)>
c001648f:	83 c4 10             	add    esp,0x10
c0016492:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016496:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001649b:	75 19                	jne    c00164b6 <scanMADT()+0xc8>
c001649d:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c00164a2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00164a8:	83 e2 fe             	and    edx,0xfffffffe
c00164ab:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00164b1:	e9 c8 02 00 00       	jmp    c001677e <scanMADT()+0x390>
c00164b6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00164be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00164c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00164c5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00164c9:	0f 87 af 02 00 00    	ja     c001677e <scanMADT()+0x390>
c00164cf:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c00164d7:	0f 87 a1 02 00 00    	ja     c001677e <scanMADT()+0x390>
c00164dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164e1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00164e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164e9:	8d 50 01             	lea    edx,[eax+0x1]
c00164ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00164f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00164f4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00164f8:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00164fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016500:	8d 50 01             	lea    edx,[eax+0x1]
c0016503:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016507:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001650b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001650f:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0016513:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0016518:	0f 86 5f 02 00 00    	jbe    c001677d <scanMADT()+0x38f>
c001651e:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0016523:	75 57                	jne    c001657c <scanMADT()+0x18e>
c0016525:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016529:	8d 50 01             	lea    edx,[eax+0x1]
c001652c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016530:	8a 15 00 c7 03 c0    	mov    dl,BYTE PTR ds:0xc003c700
c0016536:	0f b6 d2             	movzx  edx,dl
c0016539:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001653d:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016541:	88 82 40 c7 03 c0    	mov    BYTE PTR [edx-0x3ffc38c0],al
c0016547:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001654b:	8d 50 01             	lea    edx,[eax+0x1]
c001654e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016552:	8a 15 00 c7 03 c0    	mov    dl,BYTE PTR ds:0xc003c700
c0016558:	8d 4a 01             	lea    ecx,[edx+0x1]
c001655b:	88 0d 00 c7 03 c0    	mov    BYTE PTR ds:0xc003c700,cl
c0016561:	0f b6 d2             	movzx  edx,dl
c0016564:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016568:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001656c:	88 82 20 c7 03 c0    	mov    BYTE PTR [edx-0x3ffc38e0],al
c0016572:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016577:	e9 ea 01 00 00       	jmp    c0016766 <scanMADT()+0x378>
c001657c:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0016581:	0f 85 14 01 00 00    	jne    c001669b <scanMADT()+0x2ad>
c0016587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001658b:	8d 50 01             	lea    edx,[eax+0x1]
c001658e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016592:	8a 15 d0 c5 03 c0    	mov    dl,BYTE PTR ds:0xc003c5d0
c0016598:	0f b6 d2             	movzx  edx,dl
c001659b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001659f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00165a3:	88 82 e0 c5 03 c0    	mov    BYTE PTR [edx-0x3ffc3a20],al
c00165a9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00165ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00165b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165b5:	01 d0                	add    eax,edx
c00165b7:	83 c0 2c             	add    eax,0x2c
c00165ba:	8a 00                	mov    al,BYTE PTR [eax]
c00165bc:	0f b6 d0             	movzx  edx,al
c00165bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165c3:	8d 48 01             	lea    ecx,[eax+0x1]
c00165c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00165ca:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00165ce:	0f b6 c0             	movzx  eax,al
c00165d1:	c1 e0 08             	shl    eax,0x8
c00165d4:	89 d1                	mov    ecx,edx
c00165d6:	09 c1                	or     ecx,eax
c00165d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165dc:	8d 50 02             	lea    edx,[eax+0x2]
c00165df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00165e3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00165e7:	0f b6 c0             	movzx  eax,al
c00165ea:	c1 e0 10             	shl    eax,0x10
c00165ed:	09 c1                	or     ecx,eax
c00165ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165f3:	8d 50 03             	lea    edx,[eax+0x3]
c00165f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00165fa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00165fe:	0f b6 c0             	movzx  eax,al
c0016601:	c1 e0 18             	shl    eax,0x18
c0016604:	09 c1                	or     ecx,eax
c0016606:	89 ca                	mov    edx,ecx
c0016608:	a0 d0 c5 03 c0       	mov    al,ds:0xc003c5d0
c001660d:	0f b6 c0             	movzx  eax,al
c0016610:	89 14 85 00 c6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3a00],edx
c0016617:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001661c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016620:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016624:	01 d0                	add    eax,edx
c0016626:	83 c0 2c             	add    eax,0x2c
c0016629:	8a 00                	mov    al,BYTE PTR [eax]
c001662b:	0f b6 d0             	movzx  edx,al
c001662e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016632:	8d 48 01             	lea    ecx,[eax+0x1]
c0016635:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016639:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001663d:	0f b6 c0             	movzx  eax,al
c0016640:	c1 e0 08             	shl    eax,0x8
c0016643:	89 d1                	mov    ecx,edx
c0016645:	09 c1                	or     ecx,eax
c0016647:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001664b:	8d 50 02             	lea    edx,[eax+0x2]
c001664e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016652:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016656:	0f b6 c0             	movzx  eax,al
c0016659:	c1 e0 10             	shl    eax,0x10
c001665c:	09 c1                	or     ecx,eax
c001665e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016662:	8d 50 03             	lea    edx,[eax+0x3]
c0016665:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016669:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001666d:	0f b6 c0             	movzx  eax,al
c0016670:	c1 e0 18             	shl    eax,0x18
c0016673:	09 c1                	or     ecx,eax
c0016675:	89 ca                	mov    edx,ecx
c0016677:	a0 d0 c5 03 c0       	mov    al,ds:0xc003c5d0
c001667c:	0f b6 c0             	movzx  eax,al
c001667f:	89 14 85 80 c6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3980],edx
c0016686:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001668b:	a0 d0 c5 03 c0       	mov    al,ds:0xc003c5d0
c0016690:	40                   	inc    eax
c0016691:	a2 d0 c5 03 c0       	mov    ds:0xc003c5d0,al
c0016696:	e9 cb 00 00 00       	jmp    c0016766 <scanMADT()+0x378>
c001669b:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c00166a0:	0f 85 a6 00 00 00    	jne    c001674c <scanMADT()+0x35e>
c00166a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166aa:	8d 50 01             	lea    edx,[eax+0x1]
c00166ad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00166b1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00166b5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00166b9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00166bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166c1:	8d 50 01             	lea    edx,[eax+0x1]
c00166c4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00166c8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00166cc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00166d0:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00166d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00166d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166dc:	01 d0                	add    eax,edx
c00166de:	83 c0 2c             	add    eax,0x2c
c00166e1:	8a 00                	mov    al,BYTE PTR [eax]
c00166e3:	0f b6 d0             	movzx  edx,al
c00166e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166ea:	8d 48 01             	lea    ecx,[eax+0x1]
c00166ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00166f1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00166f5:	0f b6 c0             	movzx  eax,al
c00166f8:	c1 e0 08             	shl    eax,0x8
c00166fb:	89 d1                	mov    ecx,edx
c00166fd:	09 c1                	or     ecx,eax
c00166ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016703:	8d 50 02             	lea    edx,[eax+0x2]
c0016706:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001670a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001670e:	0f b6 c0             	movzx  eax,al
c0016711:	c1 e0 10             	shl    eax,0x10
c0016714:	09 c1                	or     ecx,eax
c0016716:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001671a:	8d 50 03             	lea    edx,[eax+0x3]
c001671d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016721:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016725:	0f b6 c0             	movzx  eax,al
c0016728:	c1 e0 18             	shl    eax,0x18
c001672b:	09 c8                	or     eax,ecx
c001672d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016731:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016736:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c001673b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016740:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016744:	88 90 20 b1 03 c0    	mov    BYTE PTR [eax-0x3ffc4ee0],dl
c001674a:	eb 1a                	jmp    c0016766 <scanMADT()+0x378>
c001674c:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0016751:	75 07                	jne    c001675a <scanMADT()+0x36c>
c0016753:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016758:	eb 0c                	jmp    c0016766 <scanMADT()+0x378>
c001675a:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c001675f:	75 05                	jne    c0016766 <scanMADT()+0x378>
c0016761:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0016766:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c001676b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001676f:	01 d0                	add    eax,edx
c0016771:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016775:	e9 44 fd ff ff       	jmp    c00164be <scanMADT()+0xd0>
c001677a:	90                   	nop
c001677b:	eb 01                	jmp    c001677e <scanMADT()+0x390>
c001677d:	90                   	nop
c001677e:	83 c4 2c             	add    esp,0x2c
c0016781:	c3                   	ret    

c0016782 <ACPI::ACPI()>:
c0016782:	83 ec 0c             	sub    esp,0xc
c0016785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016789:	83 ec 08             	sub    esp,0x8
c001678c:	68 df 9f 03 c0       	push   0xc0039fdf
c0016791:	50                   	push   eax
c0016792:	e8 a7 d1 ff ff       	call   c001393e <Device::Device(char const*)>
c0016797:	83 c4 10             	add    esp,0x10
c001679a:	ba 04 a1 03 c0       	mov    edx,0xc003a104
c001679f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167a3:	89 10                	mov    DWORD PTR [eax],edx
c00167a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167a9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00167b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167b4:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c00167be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167c2:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c00167cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167d0:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c00167d7:	e8 12 fc ff ff       	call   c00163ee <scanMADT()>
c00167dc:	90                   	nop
c00167dd:	83 c4 0c             	add    esp,0xc
c00167e0:	c3                   	ret    
c00167e1:	90                   	nop

c00167e2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00167e2:	83 ec 2c             	sub    esp,0x2c
c00167e5:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00167e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00167ed:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00167f1:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00167f5:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00167fa:	88 d0                	mov    al,dl
c00167fc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016800:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0016805:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001680d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016811:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016817:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001681b:	0f 8d 97 00 00 00    	jge    c00168b8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0016821:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016825:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016829:	83 c2 2a             	add    edx,0x2a
c001682c:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0016830:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0016835:	75 78                	jne    c00168af <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016837:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001683b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001683f:	83 c2 2a             	add    edx,0x2a
c0016842:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0016846:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001684a:	75 63                	jne    c00168af <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001684c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016851:	74 3a                	je     c001688d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0016853:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016857:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001685b:	83 c2 2a             	add    edx,0x2a
c001685e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0016862:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016866:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016869:	39 c2                	cmp    edx,eax
c001686b:	74 10                	je     c001687d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001686d:	83 ec 0c             	sub    esp,0xc
c0016870:	68 cc a0 03 c0       	push   0xc003a0cc
c0016875:	e8 38 67 ff ff       	call   c000cfb2 <panic(char const*)>
c001687a:	83 c4 10             	add    esp,0x10
c001687d:	83 ec 0c             	sub    esp,0xc
c0016880:	68 e4 9f 03 c0       	push   0xc0039fe4
c0016885:	e8 28 67 ff ff       	call   c000cfb2 <panic(char const*)>
c001688a:	83 c4 10             	add    esp,0x10
c001688d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016891:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016895:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016899:	83 c2 2a             	add    edx,0x2a
c001689c:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00168a0:	8b 02                	mov    eax,DWORD PTR [edx]
c00168a2:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00168a5:	89 01                	mov    DWORD PTR [ecx],eax
c00168a7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00168aa:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00168af:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00168b3:	e9 55 ff ff ff       	jmp    c001680d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00168b8:	90                   	nop
c00168b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168bd:	83 c4 2c             	add    esp,0x2c
c00168c0:	c2 04 00             	ret    0x4
c00168c3:	90                   	nop

c00168c4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00168c4:	83 ec 1c             	sub    esp,0x1c
c00168c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00168cb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00168cf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00168d3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00168d8:	88 c8                	mov    al,cl
c00168da:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00168de:	88 d0                	mov    al,dl
c00168e0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00168e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168e8:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00168ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168f2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00168f5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00168f9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00168fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016901:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016907:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001690b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001690e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016912:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0016917:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001691b:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016921:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0016925:	8d 48 01             	lea    ecx,[eax+0x1]
c0016928:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001692c:	83 c2 2a             	add    edx,0x2a
c001692f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0016933:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016937:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001693d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016941:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0016944:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016948:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001694c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016950:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016956:	8d 50 01             	lea    edx,[eax+0x1]
c0016959:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001695d:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0016963:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016967:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001696d:	3d 00 08 00 00       	cmp    eax,0x800
c0016972:	75 10                	jne    c0016984 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0016974:	83 ec 0c             	sub    esp,0xc
c0016977:	68 f3 9f 03 c0       	push   0xc0039ff3
c001697c:	e8 31 66 ff ff       	call   c000cfb2 <panic(char const*)>
c0016981:	83 c4 10             	add    esp,0x10
c0016984:	90                   	nop
c0016985:	83 c4 1c             	add    esp,0x1c
c0016988:	c3                   	ret    
c0016989:	90                   	nop

c001698a <ACPI::setScreenBrightnessLevel(void*, int)>:
c001698a:	b8 00 00 00 00       	mov    eax,0x0
c001698f:	c3                   	ret    

c0016990 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0016990:	83 ec 1c             	sub    esp,0x1c
c0016993:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016997:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001699a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001699e:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c00169a3:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00169a8:	83 ec 08             	sub    esp,0x8
c00169ab:	52                   	push   edx
c00169ac:	50                   	push   eax
c00169ad:	e8 a6 4c ff ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c00169b2:	83 c4 10             	add    esp,0x10
c00169b5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00169b9:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c00169be:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00169c3:	83 ec 04             	sub    esp,0x4
c00169c6:	6a 01                	push   0x1
c00169c8:	52                   	push   edx
c00169c9:	50                   	push   eax
c00169ca:	e8 91 4d ff ff       	call   c000b760 <Computer::writeCMOS(unsigned char, unsigned char)>
c00169cf:	83 c4 10             	add    esp,0x10
c00169d2:	90                   	nop
c00169d3:	83 c4 1c             	add    esp,0x1c
c00169d6:	c3                   	ret    
c00169d7:	90                   	nop

c00169d8 <ACPI::open(int, int, void*)>:
c00169d8:	53                   	push   ebx
c00169d9:	83 ec 18             	sub    esp,0x18
c00169dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169e0:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00169e6:	83 f0 01             	xor    eax,0x1
c00169e9:	84 c0                	test   al,al
c00169eb:	74 0b                	je     c00169f8 <ACPI::open(int, int, void*)+0x20>
c00169ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169f1:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00169f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169fc:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0016a02:	84 c0                	test   al,al
c0016a04:	74 60                	je     c0016a66 <ACPI::open(int, int, void*)+0x8e>
c0016a06:	83 ec 0c             	sub    esp,0xc
c0016a09:	68 58 01 00 00       	push   0x158
c0016a0e:	e8 31 ba ff ff       	call   c0012444 <operator new(unsigned long)>
c0016a13:	83 c4 10             	add    esp,0x10
c0016a16:	89 c3                	mov    ebx,eax
c0016a18:	83 ec 0c             	sub    esp,0xc
c0016a1b:	53                   	push   ebx
c0016a1c:	e8 25 45 00 00       	call   c001af46 <PCI::PCI()>
c0016a21:	83 c4 10             	add    esp,0x10
c0016a24:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0016a28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a2c:	83 ec 08             	sub    esp,0x8
c0016a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016a33:	50                   	push   eax
c0016a34:	e8 15 cd ff ff       	call   c001374e <Device::addChild(Device*)>
c0016a39:	83 c4 10             	add    esp,0x10
c0016a3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a40:	8b 00                	mov    eax,DWORD PTR [eax]
c0016a42:	83 c0 08             	add    eax,0x8
c0016a45:	8b 00                	mov    eax,DWORD PTR [eax]
c0016a47:	6a 00                	push   0x0
c0016a49:	6a 00                	push   0x0
c0016a4b:	6a 00                	push   0x0
c0016a4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a51:	ff d0                	call   eax
c0016a53:	83 c4 10             	add    esp,0x10
c0016a56:	83 ec 0c             	sub    esp,0xc
c0016a59:	68 10 a0 03 c0       	push   0xc003a010
c0016a5e:	e8 31 64 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0016a63:	83 c4 10             	add    esp,0x10
c0016a66:	83 ec 0c             	sub    esp,0xc
c0016a69:	68 1b a0 03 c0       	push   0xc003a01b
c0016a6e:	e8 91 52 ff ff       	call   c000bd04 <loadKernelSymbolTable(char const*)>
c0016a73:	83 c4 10             	add    esp,0x10
c0016a76:	8b 1d c8 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9c8
c0016a7c:	83 ec 0c             	sub    esp,0xc
c0016a7f:	68 39 a0 03 c0       	push   0xc003a039
c0016a84:	e8 ec 5b ff ff       	call   c000c675 <loadDLL(char const*)>
c0016a89:	83 c4 10             	add    esp,0x10
c0016a8c:	83 ec 08             	sub    esp,0x8
c0016a8f:	53                   	push   ebx
c0016a90:	50                   	push   eax
c0016a91:	e8 a8 5c ff ff       	call   c000c73e <executeDLL(unsigned long, void*)>
c0016a96:	83 c4 10             	add    esp,0x10
c0016a99:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c0016a9e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016aa4:	83 e0 04             	and    eax,0x4
c0016aa7:	84 c0                	test   al,al
c0016aa9:	74 23                	je     c0016ace <ACPI::open(int, int, void*)+0xf6>
c0016aab:	8b 1d c8 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9c8
c0016ab1:	83 ec 0c             	sub    esp,0xc
c0016ab4:	68 56 a0 03 c0       	push   0xc003a056
c0016ab9:	e8 b7 5b ff ff       	call   c000c675 <loadDLL(char const*)>
c0016abe:	83 c4 10             	add    esp,0x10
c0016ac1:	83 ec 08             	sub    esp,0x8
c0016ac4:	53                   	push   ebx
c0016ac5:	50                   	push   eax
c0016ac6:	e8 73 5c ff ff       	call   c000c73e <executeDLL(unsigned long, void*)>
c0016acb:	83 c4 10             	add    esp,0x10
c0016ace:	a1 c8 c5 03 c0       	mov    eax,ds:0xc003c5c8
c0016ad3:	83 ec 08             	sub    esp,0x8
c0016ad6:	68 73 a0 03 c0       	push   0xc003a073
c0016adb:	50                   	push   eax
c0016adc:	e8 71 f8 ff ff       	call   c0016352 <findDataTable(unsigned char*, char*)>
c0016ae1:	83 c4 10             	add    esp,0x10
c0016ae4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ae8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016aed:	74 13                	je     c0016b02 <ACPI::open(int, int, void*)+0x12a>
c0016aef:	83 ec 08             	sub    esp,0x8
c0016af2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016af6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016afa:	e8 91 fe ff ff       	call   c0016990 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0016aff:	83 c4 10             	add    esp,0x10
c0016b02:	b8 00 00 00 00       	mov    eax,0x0
c0016b07:	83 c4 18             	add    esp,0x18
c0016b0a:	5b                   	pop    ebx
c0016b0b:	c3                   	ret    

c0016b0c <ACPI::sleep()>:
c0016b0c:	83 ec 0c             	sub    esp,0xc
c0016b0f:	a1 a0 c3 03 c0       	mov    eax,ds:0xc003c3a0
c0016b14:	85 c0                	test   eax,eax
c0016b16:	74 07                	je     c0016b1f <ACPI::sleep()+0x13>
c0016b18:	a1 a0 c3 03 c0       	mov    eax,ds:0xc003c3a0
c0016b1d:	ff d0                	call   eax
c0016b1f:	90                   	nop
c0016b20:	83 c4 0c             	add    esp,0xc
c0016b23:	c3                   	ret    

c0016b24 <CPU::close(int, int, void*)>:
c0016b24:	31 c0                	xor    eax,eax
c0016b26:	c3                   	ret    

c0016b27 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0016b27:	55                   	push   ebp
c0016b28:	57                   	push   edi
c0016b29:	56                   	push   esi
c0016b2a:	53                   	push   ebx
c0016b2b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016b2f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016b33:	89 ce                	mov    esi,ecx
c0016b35:	89 d5                	mov    ebp,edx
c0016b37:	80 f9 04             	cmp    cl,0x4
c0016b3a:	75 28                	jne    c0016b64 <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c0016b3c:	8d 42 f9             	lea    eax,[edx-0x7]
c0016b3f:	3c 03                	cmp    al,0x3
c0016b41:	0f 86 63 01 00 00    	jbe    c0016caa <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0016b47:	80 fa 03             	cmp    dl,0x3
c0016b4a:	0f 84 5a 01 00 00    	je     c0016caa <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0016b50:	8d 7a f2             	lea    edi,[edx-0xe]
c0016b53:	b8 f0 b2 03 c0       	mov    eax,0xc003b2f0
c0016b58:	89 fb                	mov    ebx,edi
c0016b5a:	80 fb 01             	cmp    bl,0x1
c0016b5d:	77 4e                	ja     c0016bad <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c0016b5f:	e9 52 01 00 00       	jmp    c0016cb6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016b64:	80 f9 05             	cmp    cl,0x5
c0016b67:	75 4d                	jne    c0016bb6 <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c0016b69:	b8 00 b3 03 c0       	mov    eax,0xc003b300
c0016b6e:	80 fa 03             	cmp    dl,0x3
c0016b71:	0f 86 3f 01 00 00    	jbe    c0016cb6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016b77:	8d 7a fa             	lea    edi,[edx-0x6]
c0016b7a:	b8 10 b3 03 c0       	mov    eax,0xc003b310
c0016b7f:	89 fb                	mov    ebx,edi
c0016b81:	80 fb 01             	cmp    bl,0x1
c0016b84:	0f 86 2c 01 00 00    	jbe    c0016cb6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016b8a:	b8 20 b3 03 c0       	mov    eax,0xc003b320
c0016b8f:	80 fa 08             	cmp    dl,0x8
c0016b92:	0f 84 1e 01 00 00    	je     c0016cb6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016b98:	89 d7                	mov    edi,edx
c0016b9a:	b8 30 b3 03 c0       	mov    eax,0xc003b330
c0016b9f:	83 e7 fb             	and    edi,0xfffffffb
c0016ba2:	89 fb                	mov    ebx,edi
c0016ba4:	80 fb 09             	cmp    bl,0x9
c0016ba7:	0f 84 09 01 00 00    	je     c0016cb6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016bad:	31 c0                	xor    eax,eax
c0016baf:	89 eb                	mov    ebx,ebp
c0016bb1:	0f b6 fb             	movzx  edi,bl
c0016bb4:	eb 30                	jmp    c0016be6 <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c0016bb6:	31 c0                	xor    eax,eax
c0016bb8:	80 f9 06             	cmp    cl,0x6
c0016bbb:	75 f2                	jne    c0016baf <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016bbd:	80 fa 0a             	cmp    dl,0xa
c0016bc0:	77 ed                	ja     c0016baf <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016bc2:	bf de 05 00 00       	mov    edi,0x5de
c0016bc7:	0f a3 d7             	bt     edi,edx
c0016bca:	73 e3                	jae    c0016baf <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016bcc:	b8 40 b3 03 c0       	mov    eax,0xc003b340
c0016bd1:	e9 e0 00 00 00       	jmp    c0016cb6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016bd6:	39 c7                	cmp    edi,eax
c0016bd8:	0f 84 d3 00 00 00    	je     c0016cb1 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0016bde:	40                   	inc    eax
c0016bdf:	3d d0 00 00 00       	cmp    eax,0xd0
c0016be4:	74 09                	je     c0016bef <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c0016be6:	89 f3                	mov    ebx,esi
c0016be8:	80 fb 0f             	cmp    bl,0xf
c0016beb:	75 f1                	jne    c0016bde <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c0016bed:	eb e7                	jmp    c0016bd6 <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c0016bef:	80 f9 10             	cmp    cl,0x10
c0016bf2:	75 14                	jne    c0016c08 <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c0016bf4:	8d 42 fc             	lea    eax,[edx-0x4]
c0016bf7:	83 e0 fb             	and    eax,0xfffffffb
c0016bfa:	3c 02                	cmp    al,0x2
c0016bfc:	76 34                	jbe    c0016c32 <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c0016bfe:	b8 7d a2 03 c0       	mov    eax,0xc003a27d
c0016c03:	80 fa 02             	cmp    dl,0x2
c0016c06:	eb 24                	jmp    c0016c2c <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c0016c08:	80 f9 11             	cmp    cl,0x11
c0016c0b:	75 13                	jne    c0016c20 <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0016c0d:	b8 7d a2 03 c0       	mov    eax,0xc003a27d
c0016c12:	80 fa 03             	cmp    dl,0x3
c0016c15:	0f 85 9b 00 00 00    	jne    c0016cb6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c1b:	e9 91 00 00 00       	jmp    c0016cb1 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0016c20:	80 f9 12             	cmp    cl,0x12
c0016c23:	75 14                	jne    c0016c39 <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c0016c25:	b8 7d a2 03 c0       	mov    eax,0xc003a27d
c0016c2a:	fe ca                	dec    dl
c0016c2c:	0f 85 84 00 00 00    	jne    c0016cb6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c32:	b8 60 b3 03 c0       	mov    eax,0xc003b360
c0016c37:	eb 7d                	jmp    c0016cb6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c39:	80 f9 14             	cmp    cl,0x14
c0016c3c:	75 12                	jne    c0016c50 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0016c3e:	4a                   	dec    edx
c0016c3f:	b8 7d a2 03 c0       	mov    eax,0xc003a27d
c0016c44:	80 fa 01             	cmp    dl,0x1
c0016c47:	77 6d                	ja     c0016cb6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c49:	b8 70 b3 03 c0       	mov    eax,0xc003b370
c0016c4e:	eb 66                	jmp    c0016cb6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c50:	80 f9 15             	cmp    cl,0x15
c0016c53:	75 31                	jne    c0016c86 <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c0016c55:	b8 80 b3 03 c0       	mov    eax,0xc003b380
c0016c5a:	80 fa 01             	cmp    dl,0x1
c0016c5d:	74 57                	je     c0016cb6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c5f:	b8 7d a2 03 c0       	mov    eax,0xc003a27d
c0016c64:	80 fa 13             	cmp    dl,0x13
c0016c67:	76 0c                	jbe    c0016c75 <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c0016c69:	80 fa 30             	cmp    dl,0x30
c0016c6c:	75 48                	jne    c0016cb6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c6e:	b8 a0 b3 03 c0       	mov    eax,0xc003b3a0
c0016c73:	eb 41                	jmp    c0016cb6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c75:	b9 04 00 09 00       	mov    ecx,0x90004
c0016c7a:	0f a3 d1             	bt     ecx,edx
c0016c7d:	73 37                	jae    c0016cb6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c7f:	b8 90 b3 03 c0       	mov    eax,0xc003b390
c0016c84:	eb 30                	jmp    c0016cb6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c86:	b8 7d a2 03 c0       	mov    eax,0xc003a27d
c0016c8b:	80 f9 16             	cmp    cl,0x16
c0016c8e:	75 26                	jne    c0016cb6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c90:	b8 b0 b3 03 c0       	mov    eax,0xc003b3b0
c0016c95:	84 d2                	test   dl,dl
c0016c97:	74 1d                	je     c0016cb6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c99:	b8 7d a2 03 c0       	mov    eax,0xc003a27d
c0016c9e:	80 fa 30             	cmp    dl,0x30
c0016ca1:	75 13                	jne    c0016cb6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016ca3:	b8 c0 b3 03 c0       	mov    eax,0xc003b3c0
c0016ca8:	eb 0c                	jmp    c0016cb6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016caa:	b8 e0 b2 03 c0       	mov    eax,0xc003b2e0
c0016caf:	eb 05                	jmp    c0016cb6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016cb1:	b8 50 b3 03 c0       	mov    eax,0xc003b350
c0016cb6:	5b                   	pop    ebx
c0016cb7:	5e                   	pop    esi
c0016cb8:	5f                   	pop    edi
c0016cb9:	5d                   	pop    ebp
c0016cba:	c3                   	ret    

c0016cbb <lookupIntelCPUName(unsigned char, unsigned char)>:
c0016cbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016cbf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016cc3:	80 f9 04             	cmp    cl,0x4
c0016cc6:	75 6b                	jne    c0016d33 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0016cc8:	b8 40 b1 03 c0       	mov    eax,0xc003b140
c0016ccd:	80 fa 01             	cmp    dl,0x1
c0016cd0:	0f 86 92 02 00 00    	jbe    c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016cd6:	b8 50 b1 03 c0       	mov    eax,0xc003b150
c0016cdb:	80 fa 02             	cmp    dl,0x2
c0016cde:	0f 84 84 02 00 00    	je     c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ce4:	b8 60 b1 03 c0       	mov    eax,0xc003b160
c0016ce9:	80 fa 03             	cmp    dl,0x3
c0016cec:	0f 84 76 02 00 00    	je     c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016cf2:	b8 70 b1 03 c0       	mov    eax,0xc003b170
c0016cf7:	80 fa 04             	cmp    dl,0x4
c0016cfa:	0f 84 68 02 00 00    	je     c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d00:	b8 80 b1 03 c0       	mov    eax,0xc003b180
c0016d05:	80 fa 05             	cmp    dl,0x5
c0016d08:	0f 84 5a 02 00 00    	je     c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d0e:	b8 60 b1 03 c0       	mov    eax,0xc003b160
c0016d13:	80 fa 07             	cmp    dl,0x7
c0016d16:	0f 84 4c 02 00 00    	je     c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d1c:	83 ea 08             	sub    edx,0x8
c0016d1f:	b8 7d a2 03 c0       	mov    eax,0xc003a27d
c0016d24:	80 fa 01             	cmp    dl,0x1
c0016d27:	0f 87 3b 02 00 00    	ja     c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d2d:	b8 90 b1 03 c0       	mov    eax,0xc003b190
c0016d32:	c3                   	ret    
c0016d33:	80 f9 05             	cmp    cl,0x5
c0016d36:	75 45                	jne    c0016d7d <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0016d38:	8d 4a ff             	lea    ecx,[edx-0x1]
c0016d3b:	b8 a0 b1 03 c0       	mov    eax,0xc003b1a0
c0016d40:	80 f9 02             	cmp    cl,0x2
c0016d43:	0f 86 1f 02 00 00    	jbe    c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d49:	80 fa 04             	cmp    dl,0x4
c0016d4c:	0f 84 f3 01 00 00    	je     c0016f45 <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c0016d52:	80 fa 07             	cmp    dl,0x7
c0016d55:	0f 84 0d 02 00 00    	je     c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d5b:	b8 b0 b1 03 c0       	mov    eax,0xc003b1b0
c0016d60:	80 fa 08             	cmp    dl,0x8
c0016d63:	0f 84 ff 01 00 00    	je     c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d69:	b8 7d a2 03 c0       	mov    eax,0xc003a27d
c0016d6e:	80 fa 09             	cmp    dl,0x9
c0016d71:	0f 85 f1 01 00 00    	jne    c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d77:	b8 c0 b1 03 c0       	mov    eax,0xc003b1c0
c0016d7c:	c3                   	ret    
c0016d7d:	80 f9 06             	cmp    cl,0x6
c0016d80:	0f 85 85 01 00 00    	jne    c0016f0b <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c0016d86:	b8 d0 b1 03 c0       	mov    eax,0xc003b1d0
c0016d8b:	80 fa 01             	cmp    dl,0x1
c0016d8e:	0f 84 d4 01 00 00    	je     c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d94:	8d 42 fb             	lea    eax,[edx-0x5]
c0016d97:	3c 01                	cmp    al,0x1
c0016d99:	0f 86 ac 01 00 00    	jbe    c0016f4b <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0016d9f:	80 fa 03             	cmp    dl,0x3
c0016da2:	0f 84 a3 01 00 00    	je     c0016f4b <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0016da8:	8d 4a f9             	lea    ecx,[edx-0x7]
c0016dab:	b8 f0 b1 03 c0       	mov    eax,0xc003b1f0
c0016db0:	80 f9 01             	cmp    cl,0x1
c0016db3:	0f 86 af 01 00 00    	jbe    c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016db9:	80 fa 09             	cmp    dl,0x9
c0016dbc:	0f 84 8f 01 00 00    	je     c0016f51 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0016dc2:	8d 4a f6             	lea    ecx,[edx-0xa]
c0016dc5:	80 f9 01             	cmp    cl,0x1
c0016dc8:	0f 86 9a 01 00 00    	jbe    c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016dce:	b8 00 b2 03 c0       	mov    eax,0xc003b200
c0016dd3:	80 fa 0d             	cmp    dl,0xd
c0016dd6:	0f 84 8c 01 00 00    	je     c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ddc:	b8 10 b2 03 c0       	mov    eax,0xc003b210
c0016de1:	80 fa 0e             	cmp    dl,0xe
c0016de4:	0f 84 7e 01 00 00    	je     c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016dea:	b8 20 b2 03 c0       	mov    eax,0xc003b220
c0016def:	80 fa 0f             	cmp    dl,0xf
c0016df2:	0f 84 70 01 00 00    	je     c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016df8:	b8 00 b2 03 c0       	mov    eax,0xc003b200
c0016dfd:	80 fa 15             	cmp    dl,0x15
c0016e00:	0f 84 62 01 00 00    	je     c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e06:	8d 4a ea             	lea    ecx,[edx-0x16]
c0016e09:	b8 20 b2 03 c0       	mov    eax,0xc003b220
c0016e0e:	80 f9 01             	cmp    cl,0x1
c0016e11:	0f 86 51 01 00 00    	jbe    c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e17:	80 fa 1a             	cmp    dl,0x1a
c0016e1a:	0f 84 37 01 00 00    	je     c0016f57 <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0016e20:	80 fa 1c             	cmp    dl,0x1c
c0016e23:	0f 84 34 01 00 00    	je     c0016f5d <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0016e29:	80 fa 1d             	cmp    dl,0x1d
c0016e2c:	0f 84 36 01 00 00    	je     c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e32:	b8 50 b2 03 c0       	mov    eax,0xc003b250
c0016e37:	80 fa 25             	cmp    dl,0x25
c0016e3a:	0f 84 28 01 00 00    	je     c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e40:	8d 4a da             	lea    ecx,[edx-0x26]
c0016e43:	b8 40 b2 03 c0       	mov    eax,0xc003b240
c0016e48:	80 f9 01             	cmp    cl,0x1
c0016e4b:	0f 86 17 01 00 00    	jbe    c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e51:	b8 60 b2 03 c0       	mov    eax,0xc003b260
c0016e56:	80 fa 2a             	cmp    dl,0x2a
c0016e59:	0f 84 09 01 00 00    	je     c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e5f:	b8 50 b2 03 c0       	mov    eax,0xc003b250
c0016e64:	80 fa 2c             	cmp    dl,0x2c
c0016e67:	0f 84 fb 00 00 00    	je     c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e6d:	b8 60 b2 03 c0       	mov    eax,0xc003b260
c0016e72:	80 fa 2d             	cmp    dl,0x2d
c0016e75:	0f 84 ed 00 00 00    	je     c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e7b:	b8 30 b2 03 c0       	mov    eax,0xc003b230
c0016e80:	80 fa 2e             	cmp    dl,0x2e
c0016e83:	0f 84 df 00 00 00    	je     c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e89:	b8 50 b2 03 c0       	mov    eax,0xc003b250
c0016e8e:	80 fa 2f             	cmp    dl,0x2f
c0016e91:	0f 84 d1 00 00 00    	je     c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e97:	8d 4a cb             	lea    ecx,[edx-0x35]
c0016e9a:	b8 40 b2 03 c0       	mov    eax,0xc003b240
c0016e9f:	80 f9 01             	cmp    cl,0x1
c0016ea2:	0f 86 c0 00 00 00    	jbe    c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ea8:	b8 70 b2 03 c0       	mov    eax,0xc003b270
c0016ead:	80 fa 37             	cmp    dl,0x37
c0016eb0:	0f 84 b2 00 00 00    	je     c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016eb6:	b8 80 b2 03 c0       	mov    eax,0xc003b280
c0016ebb:	80 fa 3a             	cmp    dl,0x3a
c0016ebe:	0f 84 a4 00 00 00    	je     c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ec4:	b8 90 b2 03 c0       	mov    eax,0xc003b290
c0016ec9:	80 fa 3c             	cmp    dl,0x3c
c0016ecc:	0f 84 96 00 00 00    	je     c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ed2:	b8 a0 b2 03 c0       	mov    eax,0xc003b2a0
c0016ed7:	80 fa 3d             	cmp    dl,0x3d
c0016eda:	0f 84 88 00 00 00    	je     c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ee0:	b8 80 b2 03 c0       	mov    eax,0xc003b280
c0016ee5:	80 fa 3e             	cmp    dl,0x3e
c0016ee8:	74 7e                	je     c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016eea:	8d 42 bb             	lea    eax,[edx-0x45]
c0016eed:	3c 01                	cmp    al,0x1
c0016eef:	76 72                	jbe    c0016f63 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0016ef1:	80 fa 3f             	cmp    dl,0x3f
c0016ef4:	74 6d                	je     c0016f63 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0016ef6:	80 fa 4a             	cmp    dl,0x4a
c0016ef9:	74 0a                	je     c0016f05 <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0016efb:	b8 7d a2 03 c0       	mov    eax,0xc003a27d
c0016f00:	80 fa 4d             	cmp    dl,0x4d
c0016f03:	75 63                	jne    c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f05:	b8 70 b2 03 c0       	mov    eax,0xc003b270
c0016f0a:	c3                   	ret    
c0016f0b:	b8 7d a2 03 c0       	mov    eax,0xc003a27d
c0016f10:	80 f9 0b             	cmp    cl,0xb
c0016f13:	75 0a                	jne    c0016f1f <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0016f15:	fe ca                	dec    dl
c0016f17:	75 4f                	jne    c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f19:	b8 b0 b2 03 c0       	mov    eax,0xc003b2b0
c0016f1e:	c3                   	ret    
c0016f1f:	80 f9 0f             	cmp    cl,0xf
c0016f22:	75 44                	jne    c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f24:	b8 c0 b2 03 c0       	mov    eax,0xc003b2c0
c0016f29:	80 fa 02             	cmp    dl,0x2
c0016f2c:	76 3a                	jbe    c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f2e:	8d 42 fd             	lea    eax,[edx-0x3]
c0016f31:	3c 01                	cmp    al,0x1
c0016f33:	76 0a                	jbe    c0016f3f <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0016f35:	b8 7d a2 03 c0       	mov    eax,0xc003a27d
c0016f3a:	80 fa 06             	cmp    dl,0x6
c0016f3d:	75 29                	jne    c0016f68 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f3f:	b8 d0 b2 03 c0       	mov    eax,0xc003b2d0
c0016f44:	c3                   	ret    
c0016f45:	b8 b0 b1 03 c0       	mov    eax,0xc003b1b0
c0016f4a:	c3                   	ret    
c0016f4b:	b8 e0 b1 03 c0       	mov    eax,0xc003b1e0
c0016f50:	c3                   	ret    
c0016f51:	b8 00 b2 03 c0       	mov    eax,0xc003b200
c0016f56:	c3                   	ret    
c0016f57:	b8 30 b2 03 c0       	mov    eax,0xc003b230
c0016f5c:	c3                   	ret    
c0016f5d:	b8 40 b2 03 c0       	mov    eax,0xc003b240
c0016f62:	c3                   	ret    
c0016f63:	b8 90 b2 03 c0       	mov    eax,0xc003b290
c0016f68:	c3                   	ret    

c0016f69 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0016f69:	60                   	pusha  
c0016f6a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016f6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f76:	9c                   	pushf  
c0016f77:	fa                   	cli    
c0016f78:	0f 09                	wbinvd 
c0016f7a:	0f 30                	wrmsr  
c0016f7c:	9d                   	popf   
c0016f7d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016f81:	89 02                	mov    DWORD PTR [edx],eax
c0016f83:	61                   	popa   
c0016f84:	c3                   	ret    

c0016f85 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0016f85:	60                   	pusha  
c0016f86:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016f8a:	9c                   	pushf  
c0016f8b:	fa                   	cli    
c0016f8c:	0f 09                	wbinvd 
c0016f8e:	31 c0                	xor    eax,eax
c0016f90:	31 d2                	xor    edx,edx
c0016f92:	0f 32                	rdmsr  
c0016f94:	9d                   	popf   
c0016f95:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016f99:	89 02                	mov    DWORD PTR [edx],eax
c0016f9b:	61                   	popa   
c0016f9c:	c3                   	ret    

c0016f9d <AMD_K6_writeback(int, int, int)>:
c0016f9d:	56                   	push   esi
c0016f9e:	53                   	push   ebx
c0016f9f:	83 ec 10             	sub    esp,0x10
c0016fa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fa6:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0016fab:	75 5d                	jne    c001700a <AMD_K6_writeback(int, int, int)+0x6d>
c0016fad:	83 f8 08             	cmp    eax,0x8
c0016fb0:	75 09                	jne    c0016fbb <AMD_K6_writeback(int, int, int)+0x1e>
c0016fb2:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0016fb7:	7e 13                	jle    c0016fcc <AMD_K6_writeback(int, int, int)+0x2f>
c0016fb9:	eb 30                	jmp    c0016feb <AMD_K6_writeback(int, int, int)+0x4e>
c0016fbb:	83 f8 06             	cmp    eax,0x6
c0016fbe:	7c 4a                	jl     c001700a <AMD_K6_writeback(int, int, int)+0x6d>
c0016fc0:	83 f8 07             	cmp    eax,0x7
c0016fc3:	7e 07                	jle    c0016fcc <AMD_K6_writeback(int, int, int)+0x2f>
c0016fc5:	83 f8 09             	cmp    eax,0x9
c0016fc8:	74 21                	je     c0016feb <AMD_K6_writeback(int, int, int)+0x4e>
c0016fca:	eb 3e                	jmp    c001700a <AMD_K6_writeback(int, int, int)+0x6d>
c0016fcc:	89 e6                	mov    esi,esp
c0016fce:	8b 1d 84 bb 03 c0    	mov    ebx,DWORD PTR ds:0xc003bb84
c0016fd4:	56                   	push   esi
c0016fd5:	c1 eb 15             	shr    ebx,0x15
c0016fd8:	68 82 00 00 c0       	push   0xc0000082
c0016fdd:	83 e3 7e             	and    ebx,0x7e
c0016fe0:	e8 a0 ff ff ff       	call   c0016f85 <AMD_K6_read_msr(unsigned int, REGS*)>
c0016fe5:	56                   	push   esi
c0016fe6:	6a 00                	push   0x0
c0016fe8:	53                   	push   ebx
c0016fe9:	eb 12                	jmp    c0016ffd <AMD_K6_writeback(int, int, int)+0x60>
c0016feb:	89 e3                	mov    ebx,esp
c0016fed:	53                   	push   ebx
c0016fee:	68 82 00 00 c0       	push   0xc0000082
c0016ff3:	e8 8d ff ff ff       	call   c0016f85 <AMD_K6_read_msr(unsigned int, REGS*)>
c0016ff8:	53                   	push   ebx
c0016ff9:	6a 00                	push   0x0
c0016ffb:	6a 00                	push   0x0
c0016ffd:	68 82 00 00 c0       	push   0xc0000082
c0017002:	e8 62 ff ff ff       	call   c0016f69 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0017007:	83 c4 18             	add    esp,0x18
c001700a:	83 c4 10             	add    esp,0x10
c001700d:	5b                   	pop    ebx
c001700e:	5e                   	pop    esi
c001700f:	c3                   	ret    

c0017010 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0017010:	55                   	push   ebp
c0017011:	57                   	push   edi
c0017012:	56                   	push   esi
c0017013:	53                   	push   ebx
c0017014:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017018:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001701c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017020:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0017024:	39 05 e0 b3 03 c0    	cmp    DWORD PTR ds:0xc003b3e0,eax
c001702a:	75 23                	jne    c001704f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001702c:	a1 6c c7 03 c0       	mov    eax,ds:0xc003c76c
c0017031:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017035:	89 06                	mov    DWORD PTR [esi],eax
c0017037:	a1 68 c7 03 c0       	mov    eax,ds:0xc003c768
c001703c:	89 07                	mov    DWORD PTR [edi],eax
c001703e:	a1 64 c7 03 c0       	mov    eax,ds:0xc003c764
c0017043:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0017046:	a1 60 c7 03 c0       	mov    eax,ds:0xc003c760
c001704b:	89 02                	mov    DWORD PTR [edx],eax
c001704d:	eb 3f                	jmp    c001708e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001704f:	31 c9                	xor    ecx,ecx
c0017051:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017055:	0f a2                	cpuid  
c0017057:	89 06                	mov    DWORD PTR [esi],eax
c0017059:	89 1f                	mov    DWORD PTR [edi],ebx
c001705b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001705f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0017062:	89 10                	mov    DWORD PTR [eax],edx
c0017064:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017068:	a3 e0 b3 03 c0       	mov    ds:0xc003b3e0,eax
c001706d:	8b 06                	mov    eax,DWORD PTR [esi]
c001706f:	a3 6c c7 03 c0       	mov    ds:0xc003c76c,eax
c0017074:	8b 07                	mov    eax,DWORD PTR [edi]
c0017076:	a3 68 c7 03 c0       	mov    ds:0xc003c768,eax
c001707b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001707e:	a3 64 c7 03 c0       	mov    ds:0xc003c764,eax
c0017083:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017087:	8b 00                	mov    eax,DWORD PTR [eax]
c0017089:	a3 60 c7 03 c0       	mov    ds:0xc003c760,eax
c001708e:	5b                   	pop    ebx
c001708f:	5e                   	pop    esi
c0017090:	5f                   	pop    edi
c0017091:	5d                   	pop    ebp
c0017092:	c3                   	ret    

c0017093 <cpuidCheckEDX(unsigned int)>:
c0017093:	83 ec 10             	sub    esp,0x10
c0017096:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001709a:	50                   	push   eax
c001709b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001709f:	50                   	push   eax
c00170a0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170a4:	50                   	push   eax
c00170a5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170a9:	50                   	push   eax
c00170aa:	6a 01                	push   0x1
c00170ac:	e8 5f ff ff ff       	call   c0017010 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00170b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170b5:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00170b9:	0f 95 c0             	setne  al
c00170bc:	83 c4 24             	add    esp,0x24
c00170bf:	c3                   	ret    

c00170c0 <cpuidCheckECX(unsigned int)>:
c00170c0:	83 ec 10             	sub    esp,0x10
c00170c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170c7:	50                   	push   eax
c00170c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170cc:	50                   	push   eax
c00170cd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170d1:	50                   	push   eax
c00170d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170d6:	50                   	push   eax
c00170d7:	6a 01                	push   0x1
c00170d9:	e8 32 ff ff ff       	call   c0017010 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00170de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170e2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00170e6:	0f 95 c0             	setne  al
c00170e9:	83 c4 24             	add    esp,0x24
c00170ec:	c3                   	ret    

c00170ed <cpuidCheckExtendedEBX(unsigned int)>:
c00170ed:	83 ec 10             	sub    esp,0x10
c00170f0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170f4:	50                   	push   eax
c00170f5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170f9:	50                   	push   eax
c00170fa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170fe:	50                   	push   eax
c00170ff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017103:	50                   	push   eax
c0017104:	6a 07                	push   0x7
c0017106:	e8 05 ff ff ff       	call   c0017010 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001710b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001710f:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0017113:	0f 95 c0             	setne  al
c0017116:	83 c4 24             	add    esp,0x24
c0017119:	c3                   	ret    

c001711a <cpuidCheckExtendedECX(unsigned int)>:
c001711a:	83 ec 10             	sub    esp,0x10
c001711d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017121:	50                   	push   eax
c0017122:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017126:	50                   	push   eax
c0017127:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001712b:	50                   	push   eax
c001712c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017130:	50                   	push   eax
c0017131:	6a 07                	push   0x7
c0017133:	e8 d8 fe ff ff       	call   c0017010 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017138:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001713c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0017140:	0f 95 c0             	setne  al
c0017143:	83 c4 24             	add    esp,0x24
c0017146:	c3                   	ret    

c0017147 <getCPUNumber()>:
c0017147:	31 c0                	xor    eax,eax
c0017149:	c3                   	ret    

c001714a <thisCPU()>:
c001714a:	e8 f8 ff ff ff       	call   c0017147 <getCPUNumber()>
c001714f:	8b 15 c8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9c8
c0017155:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c001715c:	c3                   	ret    
c001715d:	90                   	nop

c001715e <CPU::CPU()>:
c001715e:	83 ec 0c             	sub    esp,0xc
c0017161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017165:	83 ec 08             	sub    esp,0x8
c0017168:	68 7d a2 03 c0       	push   0xc003a27d
c001716d:	50                   	push   eax
c001716e:	e8 cb c7 ff ff       	call   c001393e <Device::Device(char const*)>
c0017173:	83 c4 10             	add    esp,0x10
c0017176:	ba 54 a3 03 c0       	mov    edx,0xc003a354
c001717b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001717f:	89 10                	mov    DWORD PTR [eax],edx
c0017181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017185:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001718f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017193:	05 78 01 00 00       	add    eax,0x178
c0017198:	83 ec 0c             	sub    esp,0xc
c001719b:	50                   	push   eax
c001719c:	e8 e5 55 ff ff       	call   c000c786 <GDT::GDT()>
c00171a1:	83 c4 10             	add    esp,0x10
c00171a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171a8:	05 7c 09 00 00       	add    eax,0x97c
c00171ad:	83 ec 0c             	sub    esp,0xc
c00171b0:	50                   	push   eax
c00171b1:	e8 30 58 ff ff       	call   c000c9e6 <IDT::IDT()>
c00171b6:	83 c4 10             	add    esp,0x10
c00171b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171bd:	05 7c 11 00 00       	add    eax,0x117c
c00171c2:	83 ec 0c             	sub    esp,0xc
c00171c5:	50                   	push   eax
c00171c6:	e8 cf 9b ff ff       	call   c0010d9a <TSS::TSS()>
c00171cb:	83 c4 10             	add    esp,0x10
c00171ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171d2:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00171d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171dd:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00171e7:	90                   	nop
c00171e8:	83 c4 0c             	add    esp,0xc
c00171eb:	c3                   	ret    

c00171ec <CPU::displayFeatures()>:
c00171ec:	c3                   	ret    
c00171ed:	90                   	nop

c00171ee <CPU::detectFeatures()>:
c00171ee:	55                   	push   ebp
c00171ef:	57                   	push   edi
c00171f0:	56                   	push   esi
c00171f1:	53                   	push   ebx
c00171f2:	83 ec 50             	sub    esp,0x50
c00171f5:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00171f9:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0017203:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001720a:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0017210:	6a 0d                	push   0xd
c0017212:	6a 00                	push   0x0
c0017214:	57                   	push   edi
c0017215:	e8 be 94 fe ff       	call   c00006d8 <memset>
c001721a:	83 c4 10             	add    esp,0x10
c001721d:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c0017222:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0017229:	0f 84 20 09 00 00    	je     c0017b4f <CPU::detectFeatures()+0x961>
c001722f:	83 ec 0c             	sub    esp,0xc
c0017232:	6a 10                	push   0x10
c0017234:	e8 5a fe ff ff       	call   c0017093 <cpuidCheckEDX(unsigned int)>
c0017239:	83 e0 01             	and    eax,0x1
c001723c:	8d 14 00             	lea    edx,[eax+eax*1]
c001723f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017245:	83 e0 fd             	and    eax,0xfffffffd
c0017248:	09 d0                	or     eax,edx
c001724a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017250:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0017257:	e8 37 fe ff ff       	call   c0017093 <cpuidCheckEDX(unsigned int)>
c001725c:	83 e0 01             	and    eax,0x1
c001725f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0017266:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001726c:	83 e0 fb             	and    eax,0xfffffffb
c001726f:	09 d0                	or     eax,edx
c0017271:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017277:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001727e:	e8 10 fe ff ff       	call   c0017093 <cpuidCheckEDX(unsigned int)>
c0017283:	83 e0 01             	and    eax,0x1
c0017286:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001728d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017293:	83 e0 f7             	and    eax,0xfffffff7
c0017296:	09 d0                	or     eax,edx
c0017298:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001729e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00172a5:	e8 e9 fd ff ff       	call   c0017093 <cpuidCheckEDX(unsigned int)>
c00172aa:	83 e0 01             	and    eax,0x1
c00172ad:	c1 e0 04             	shl    eax,0x4
c00172b0:	88 c2                	mov    dl,al
c00172b2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00172b8:	83 e0 ef             	and    eax,0xffffffef
c00172bb:	09 d0                	or     eax,edx
c00172bd:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00172c3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00172ca:	e8 c4 fd ff ff       	call   c0017093 <cpuidCheckEDX(unsigned int)>
c00172cf:	83 e0 01             	and    eax,0x1
c00172d2:	c1 e0 05             	shl    eax,0x5
c00172d5:	88 c2                	mov    dl,al
c00172d7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00172dd:	83 e0 df             	and    eax,0xffffffdf
c00172e0:	09 d0                	or     eax,edx
c00172e2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00172e8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00172ef:	e8 9f fd ff ff       	call   c0017093 <cpuidCheckEDX(unsigned int)>
c00172f4:	83 e0 01             	and    eax,0x1
c00172f7:	8d 14 00             	lea    edx,[eax+eax*1]
c00172fa:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017300:	83 e0 fd             	and    eax,0xfffffffd
c0017303:	09 d0                	or     eax,edx
c0017305:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001730b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0017312:	e8 7c fd ff ff       	call   c0017093 <cpuidCheckEDX(unsigned int)>
c0017317:	83 e0 01             	and    eax,0x1
c001731a:	c1 e0 06             	shl    eax,0x6
c001731d:	88 c2                	mov    dl,al
c001731f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017325:	83 e0 bf             	and    eax,0xffffffbf
c0017328:	09 d0                	or     eax,edx
c001732a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017330:	58                   	pop    eax
c0017331:	8d 74 24 28          	lea    esi,[esp+0x28]
c0017335:	56                   	push   esi
c0017336:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001733a:	55                   	push   ebp
c001733b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001733f:	50                   	push   eax
c0017340:	8d 54 24 28          	lea    edx,[esp+0x28]
c0017344:	52                   	push   edx
c0017345:	6a 00                	push   0x0
c0017347:	e8 c4 fc ff ff       	call   c0017010 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001734c:	83 c4 1c             	add    esp,0x1c
c001734f:	6a 04                	push   0x4
c0017351:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017355:	50                   	push   eax
c0017356:	57                   	push   edi
c0017357:	e8 05 93 fe ff       	call   c0000661 <memcpy>
c001735c:	83 c4 0c             	add    esp,0xc
c001735f:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0017365:	6a 04                	push   0x4
c0017367:	56                   	push   esi
c0017368:	50                   	push   eax
c0017369:	e8 f3 92 fe ff       	call   c0000661 <memcpy>
c001736e:	83 c4 0c             	add    esp,0xc
c0017371:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0017377:	6a 04                	push   0x4
c0017379:	55                   	push   ebp
c001737a:	50                   	push   eax
c001737b:	e8 e1 92 fe ff       	call   c0000661 <memcpy>
c0017380:	58                   	pop    eax
c0017381:	5a                   	pop    edx
c0017382:	68 28 a1 03 c0       	push   0xc003a128
c0017387:	57                   	push   edi
c0017388:	e8 ed 94 fe ff       	call   c000087a <strcmp>
c001738d:	83 c4 10             	add    esp,0x10
c0017390:	85 c0                	test   eax,eax
c0017392:	75 0f                	jne    c00173a3 <CPU::detectFeatures()+0x1b5>
c0017394:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001739e:	e9 22 02 00 00       	jmp    c00175c5 <CPU::detectFeatures()+0x3d7>
c00173a3:	50                   	push   eax
c00173a4:	50                   	push   eax
c00173a5:	68 35 a1 03 c0       	push   0xc003a135
c00173aa:	57                   	push   edi
c00173ab:	e8 ca 94 fe ff       	call   c000087a <strcmp>
c00173b0:	83 c4 10             	add    esp,0x10
c00173b3:	85 c0                	test   eax,eax
c00173b5:	74 dd                	je     c0017394 <CPU::detectFeatures()+0x1a6>
c00173b7:	51                   	push   ecx
c00173b8:	51                   	push   ecx
c00173b9:	68 42 a1 03 c0       	push   0xc003a142
c00173be:	57                   	push   edi
c00173bf:	e8 b6 94 fe ff       	call   c000087a <strcmp>
c00173c4:	83 c4 10             	add    esp,0x10
c00173c7:	85 c0                	test   eax,eax
c00173c9:	74 2a                	je     c00173f5 <CPU::detectFeatures()+0x207>
c00173cb:	52                   	push   edx
c00173cc:	52                   	push   edx
c00173cd:	68 4f a1 03 c0       	push   0xc003a14f
c00173d2:	57                   	push   edi
c00173d3:	e8 a2 94 fe ff       	call   c000087a <strcmp>
c00173d8:	83 c4 10             	add    esp,0x10
c00173db:	85 c0                	test   eax,eax
c00173dd:	74 16                	je     c00173f5 <CPU::detectFeatures()+0x207>
c00173df:	50                   	push   eax
c00173e0:	50                   	push   eax
c00173e1:	68 5c a1 03 c0       	push   0xc003a15c
c00173e6:	57                   	push   edi
c00173e7:	e8 8e 94 fe ff       	call   c000087a <strcmp>
c00173ec:	83 c4 10             	add    esp,0x10
c00173ef:	85 c0                	test   eax,eax
c00173f1:	74 48                	je     c001743b <CPU::detectFeatures()+0x24d>
c00173f3:	eb 0f                	jmp    c0017404 <CPU::detectFeatures()+0x216>
c00173f5:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00173ff:	e9 c1 01 00 00       	jmp    c00175c5 <CPU::detectFeatures()+0x3d7>
c0017404:	50                   	push   eax
c0017405:	50                   	push   eax
c0017406:	68 69 a1 03 c0       	push   0xc003a169
c001740b:	57                   	push   edi
c001740c:	e8 69 94 fe ff       	call   c000087a <strcmp>
c0017411:	83 c4 10             	add    esp,0x10
c0017414:	85 c0                	test   eax,eax
c0017416:	74 23                	je     c001743b <CPU::detectFeatures()+0x24d>
c0017418:	50                   	push   eax
c0017419:	50                   	push   eax
c001741a:	68 76 a1 03 c0       	push   0xc003a176
c001741f:	57                   	push   edi
c0017420:	e8 55 94 fe ff       	call   c000087a <strcmp>
c0017425:	83 c4 10             	add    esp,0x10
c0017428:	85 c0                	test   eax,eax
c001742a:	75 1e                	jne    c001744a <CPU::detectFeatures()+0x25c>
c001742c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0017436:	e9 8a 01 00 00       	jmp    c00175c5 <CPU::detectFeatures()+0x3d7>
c001743b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0017445:	e9 7b 01 00 00       	jmp    c00175c5 <CPU::detectFeatures()+0x3d7>
c001744a:	50                   	push   eax
c001744b:	50                   	push   eax
c001744c:	68 83 a1 03 c0       	push   0xc003a183
c0017451:	57                   	push   edi
c0017452:	e8 23 94 fe ff       	call   c000087a <strcmp>
c0017457:	83 c4 10             	add    esp,0x10
c001745a:	85 c0                	test   eax,eax
c001745c:	75 0f                	jne    c001746d <CPU::detectFeatures()+0x27f>
c001745e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0017468:	e9 58 01 00 00       	jmp    c00175c5 <CPU::detectFeatures()+0x3d7>
c001746d:	50                   	push   eax
c001746e:	50                   	push   eax
c001746f:	68 42 a1 03 c0       	push   0xc003a142
c0017474:	57                   	push   edi
c0017475:	e8 00 94 fe ff       	call   c000087a <strcmp>
c001747a:	83 c4 10             	add    esp,0x10
c001747d:	85 c0                	test   eax,eax
c001747f:	75 0f                	jne    c0017490 <CPU::detectFeatures()+0x2a2>
c0017481:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001748b:	e9 35 01 00 00       	jmp    c00175c5 <CPU::detectFeatures()+0x3d7>
c0017490:	50                   	push   eax
c0017491:	50                   	push   eax
c0017492:	68 90 a1 03 c0       	push   0xc003a190
c0017497:	57                   	push   edi
c0017498:	e8 dd 93 fe ff       	call   c000087a <strcmp>
c001749d:	83 c4 10             	add    esp,0x10
c00174a0:	85 c0                	test   eax,eax
c00174a2:	75 0f                	jne    c00174b3 <CPU::detectFeatures()+0x2c5>
c00174a4:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00174ae:	e9 12 01 00 00       	jmp    c00175c5 <CPU::detectFeatures()+0x3d7>
c00174b3:	51                   	push   ecx
c00174b4:	51                   	push   ecx
c00174b5:	68 9d a1 03 c0       	push   0xc003a19d
c00174ba:	57                   	push   edi
c00174bb:	e8 ba 93 fe ff       	call   c000087a <strcmp>
c00174c0:	83 c4 10             	add    esp,0x10
c00174c3:	85 c0                	test   eax,eax
c00174c5:	75 0f                	jne    c00174d6 <CPU::detectFeatures()+0x2e8>
c00174c7:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00174d1:	e9 ef 00 00 00       	jmp    c00175c5 <CPU::detectFeatures()+0x3d7>
c00174d6:	52                   	push   edx
c00174d7:	52                   	push   edx
c00174d8:	68 aa a1 03 c0       	push   0xc003a1aa
c00174dd:	57                   	push   edi
c00174de:	e8 97 93 fe ff       	call   c000087a <strcmp>
c00174e3:	83 c4 10             	add    esp,0x10
c00174e6:	85 c0                	test   eax,eax
c00174e8:	75 0f                	jne    c00174f9 <CPU::detectFeatures()+0x30b>
c00174ea:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00174f4:	e9 cc 00 00 00       	jmp    c00175c5 <CPU::detectFeatures()+0x3d7>
c00174f9:	50                   	push   eax
c00174fa:	50                   	push   eax
c00174fb:	68 b7 a1 03 c0       	push   0xc003a1b7
c0017500:	57                   	push   edi
c0017501:	e8 74 93 fe ff       	call   c000087a <strcmp>
c0017506:	83 c4 10             	add    esp,0x10
c0017509:	85 c0                	test   eax,eax
c001750b:	75 0f                	jne    c001751c <CPU::detectFeatures()+0x32e>
c001750d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0017517:	e9 a9 00 00 00       	jmp    c00175c5 <CPU::detectFeatures()+0x3d7>
c001751c:	50                   	push   eax
c001751d:	50                   	push   eax
c001751e:	68 c4 a1 03 c0       	push   0xc003a1c4
c0017523:	57                   	push   edi
c0017524:	e8 51 93 fe ff       	call   c000087a <strcmp>
c0017529:	83 c4 10             	add    esp,0x10
c001752c:	85 c0                	test   eax,eax
c001752e:	75 0f                	jne    c001753f <CPU::detectFeatures()+0x351>
c0017530:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001753a:	e9 86 00 00 00       	jmp    c00175c5 <CPU::detectFeatures()+0x3d7>
c001753f:	50                   	push   eax
c0017540:	50                   	push   eax
c0017541:	68 d1 a1 03 c0       	push   0xc003a1d1
c0017546:	57                   	push   edi
c0017547:	e8 2e 93 fe ff       	call   c000087a <strcmp>
c001754c:	83 c4 10             	add    esp,0x10
c001754f:	85 c0                	test   eax,eax
c0017551:	75 0c                	jne    c001755f <CPU::detectFeatures()+0x371>
c0017553:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001755d:	eb 66                	jmp    c00175c5 <CPU::detectFeatures()+0x3d7>
c001755f:	50                   	push   eax
c0017560:	50                   	push   eax
c0017561:	68 de a1 03 c0       	push   0xc003a1de
c0017566:	57                   	push   edi
c0017567:	e8 0e 93 fe ff       	call   c000087a <strcmp>
c001756c:	83 c4 10             	add    esp,0x10
c001756f:	85 c0                	test   eax,eax
c0017571:	75 0c                	jne    c001757f <CPU::detectFeatures()+0x391>
c0017573:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001757d:	eb 46                	jmp    c00175c5 <CPU::detectFeatures()+0x3d7>
c001757f:	50                   	push   eax
c0017580:	50                   	push   eax
c0017581:	68 eb a1 03 c0       	push   0xc003a1eb
c0017586:	57                   	push   edi
c0017587:	e8 ee 92 fe ff       	call   c000087a <strcmp>
c001758c:	83 c4 10             	add    esp,0x10
c001758f:	85 c0                	test   eax,eax
c0017591:	74 e0                	je     c0017573 <CPU::detectFeatures()+0x385>
c0017593:	50                   	push   eax
c0017594:	50                   	push   eax
c0017595:	68 f8 a1 03 c0       	push   0xc003a1f8
c001759a:	57                   	push   edi
c001759b:	e8 da 92 fe ff       	call   c000087a <strcmp>
c00175a0:	83 c4 10             	add    esp,0x10
c00175a3:	85 c0                	test   eax,eax
c00175a5:	74 cc                	je     c0017573 <CPU::detectFeatures()+0x385>
c00175a7:	51                   	push   ecx
c00175a8:	51                   	push   ecx
c00175a9:	68 05 a2 03 c0       	push   0xc003a205
c00175ae:	57                   	push   edi
c00175af:	e8 c6 92 fe ff       	call   c000087a <strcmp>
c00175b4:	83 c4 10             	add    esp,0x10
c00175b7:	85 c0                	test   eax,eax
c00175b9:	74 b8                	je     c0017573 <CPU::detectFeatures()+0x385>
c00175bb:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00175c5:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00175ca:	0f 86 be 00 00 00    	jbe    c001768e <CPU::detectFeatures()+0x4a0>
c00175d0:	83 ec 0c             	sub    esp,0xc
c00175d3:	68 80 00 00 00       	push   0x80
c00175d8:	e8 10 fb ff ff       	call   c00170ed <cpuidCheckExtendedEBX(unsigned int)>
c00175dd:	83 e0 01             	and    eax,0x1
c00175e0:	c1 e0 06             	shl    eax,0x6
c00175e3:	88 c2                	mov    dl,al
c00175e5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00175eb:	83 e0 bf             	and    eax,0xffffffbf
c00175ee:	09 d0                	or     eax,edx
c00175f0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00175f6:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00175fd:	e8 eb fa ff ff       	call   c00170ed <cpuidCheckExtendedEBX(unsigned int)>
c0017602:	83 e0 01             	and    eax,0x1
c0017605:	c1 e0 04             	shl    eax,0x4
c0017608:	88 c2                	mov    dl,al
c001760a:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017610:	83 e0 ef             	and    eax,0xffffffef
c0017613:	09 d0                	or     eax,edx
c0017615:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001761b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0017622:	e8 c6 fa ff ff       	call   c00170ed <cpuidCheckExtendedEBX(unsigned int)>
c0017627:	c1 e0 07             	shl    eax,0x7
c001762a:	88 c2                	mov    dl,al
c001762c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017632:	83 e0 7f             	and    eax,0x7f
c0017635:	09 d0                	or     eax,edx
c0017637:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001763d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0017644:	e8 d1 fa ff ff       	call   c001711a <cpuidCheckExtendedECX(unsigned int)>
c0017649:	83 e0 01             	and    eax,0x1
c001764c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017653:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017659:	83 e0 f7             	and    eax,0xfffffff7
c001765c:	09 d0                	or     eax,edx
c001765e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017664:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001766b:	e8 aa fa ff ff       	call   c001711a <cpuidCheckExtendedECX(unsigned int)>
c0017670:	83 c4 10             	add    esp,0x10
c0017673:	83 e0 01             	and    eax,0x1
c0017676:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001767d:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017683:	83 e0 fb             	and    eax,0xfffffffb
c0017686:	09 d0                	or     eax,edx
c0017688:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001768e:	83 ec 0c             	sub    esp,0xc
c0017691:	56                   	push   esi
c0017692:	55                   	push   ebp
c0017693:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0017697:	57                   	push   edi
c0017698:	8d 44 24 28          	lea    eax,[esp+0x28]
c001769c:	50                   	push   eax
c001769d:	6a 01                	push   0x1
c001769f:	e8 6c f9 ff ff       	call   c0017010 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00176a4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00176a8:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00176ae:	88 ca                	mov    dl,cl
c00176b0:	83 e0 f0             	and    eax,0xfffffff0
c00176b3:	83 e2 0f             	and    edx,0xf
c00176b6:	09 d0                	or     eax,edx
c00176b8:	88 ca                	mov    dl,cl
c00176ba:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00176c0:	c0 ea 04             	shr    dl,0x4
c00176c3:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00176c7:	0f b6 c2             	movzx  eax,dl
c00176ca:	83 c4 20             	add    esp,0x20
c00176cd:	c1 e0 06             	shl    eax,0x6
c00176d0:	89 c5                	mov    ebp,eax
c00176d2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00176d8:	66 25 3f c0          	and    ax,0xc03f
c00176dc:	09 e8                	or     eax,ebp
c00176de:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00176e5:	89 c8                	mov    eax,ecx
c00176e7:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00176ed:	c1 e8 08             	shr    eax,0x8
c00176f0:	83 e2 3f             	and    edx,0x3f
c00176f3:	83 e0 0f             	and    eax,0xf
c00176f6:	89 c5                	mov    ebp,eax
c00176f8:	c1 e5 06             	shl    ebp,0x6
c00176fb:	09 d5                	or     ebp,edx
c00176fd:	89 ea                	mov    edx,ebp
c00176ff:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0017705:	88 c2                	mov    dl,al
c0017707:	c0 ea 02             	shr    dl,0x2
c001770a:	89 d5                	mov    ebp,edx
c001770c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0017712:	83 e2 c0             	and    edx,0xffffffc0
c0017715:	09 d5                	or     ebp,edx
c0017717:	89 ea                	mov    edx,ebp
c0017719:	89 cd                	mov    ebp,ecx
c001771b:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0017721:	c1 ed 0c             	shr    ebp,0xc
c0017724:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001772a:	83 e5 03             	and    ebp,0x3
c001772d:	83 e2 cf             	and    edx,0xffffffcf
c0017730:	c1 e5 04             	shl    ebp,0x4
c0017733:	09 d5                	or     ebp,edx
c0017735:	3c 06                	cmp    al,0x6
c0017737:	89 ea                	mov    edx,ebp
c0017739:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001773f:	74 04                	je     c0017745 <CPU::detectFeatures()+0x557>
c0017741:	3c 0f                	cmp    al,0xf
c0017743:	75 5c                	jne    c00177a1 <CPU::detectFeatures()+0x5b3>
c0017745:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017749:	89 cd                	mov    ebp,ecx
c001774b:	c1 ed 10             	shr    ebp,0x10
c001774e:	c1 e5 04             	shl    ebp,0x4
c0017751:	09 ea                	or     edx,ebp
c0017753:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0017759:	0f b6 d2             	movzx  edx,dl
c001775c:	66 81 e5 3f c0       	and    bp,0xc03f
c0017761:	c1 e2 06             	shl    edx,0x6
c0017764:	09 ea                	or     edx,ebp
c0017766:	3c 0f                	cmp    al,0xf
c0017768:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001776f:	75 30                	jne    c00177a1 <CPU::detectFeatures()+0x5b3>
c0017771:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0017777:	c1 e9 14             	shr    ecx,0x14
c001777a:	83 e0 3f             	and    eax,0x3f
c001777d:	83 c1 0f             	add    ecx,0xf
c0017780:	88 ca                	mov    dl,cl
c0017782:	c0 e9 02             	shr    cl,0x2
c0017785:	c1 e2 06             	shl    edx,0x6
c0017788:	09 d0                	or     eax,edx
c001778a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0017790:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0017796:	83 e0 c0             	and    eax,0xffffffc0
c0017799:	09 c1                	or     ecx,eax
c001779b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00177a1:	83 ec 0c             	sub    esp,0xc
c00177a4:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00177ab:	56                   	push   esi
c00177ac:	8d 44 24 28          	lea    eax,[esp+0x28]
c00177b0:	50                   	push   eax
c00177b1:	57                   	push   edi
c00177b2:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00177b6:	55                   	push   ebp
c00177b7:	68 00 00 00 80       	push   0x80000000
c00177bc:	e8 4f f8 ff ff       	call   c0017010 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00177c1:	83 c4 20             	add    esp,0x20
c00177c4:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00177cc:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177d0:	76 1e                	jbe    c00177f0 <CPU::detectFeatures()+0x602>
c00177d2:	83 ec 0c             	sub    esp,0xc
c00177d5:	56                   	push   esi
c00177d6:	50                   	push   eax
c00177d7:	57                   	push   edi
c00177d8:	55                   	push   ebp
c00177d9:	68 01 00 00 80       	push   0x80000001
c00177de:	e8 2d f8 ff ff       	call   c0017010 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00177e3:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00177ed:	83 c4 20             	add    esp,0x20
c00177f0:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00177f6:	83 f8 01             	cmp    eax,0x1
c00177f9:	75 6f                	jne    c001786a <CPU::detectFeatures()+0x67c>
c00177fb:	51                   	push   ecx
c00177fc:	51                   	push   ecx
c00177fd:	68 11 a2 03 c0       	push   0xc003a211
c0017802:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0017806:	56                   	push   esi
c0017807:	e8 e8 8f fe ff       	call   c00007f4 <strcpy>
c001780c:	5f                   	pop    edi
c001780d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017813:	5d                   	pop    ebp
c0017814:	66 c1 e8 06          	shr    ax,0x6
c0017818:	0f b6 c0             	movzx  eax,al
c001781b:	50                   	push   eax
c001781c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017822:	c1 e8 0e             	shr    eax,0xe
c0017825:	0f b6 c0             	movzx  eax,al
c0017828:	50                   	push   eax
c0017829:	e8 8d f4 ff ff       	call   c0016cbb <lookupIntelCPUName(unsigned char, unsigned char)>
c001782e:	5a                   	pop    edx
c001782f:	59                   	pop    ecx
c0017830:	50                   	push   eax
c0017831:	56                   	push   esi
c0017832:	e8 0a 91 fe ff       	call   c0000941 <strcat>
c0017837:	5f                   	pop    edi
c0017838:	5d                   	pop    ebp
c0017839:	56                   	push   esi
c001783a:	53                   	push   ebx
c001783b:	e8 f0 c0 ff ff       	call   c0013930 <Device::setName(char const*)>
c0017840:	58                   	pop    eax
c0017841:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0017847:	5a                   	pop    edx
c0017848:	68 18 a2 03 c0       	push   0xc003a218
c001784d:	50                   	push   eax
c001784e:	e8 27 90 fe ff       	call   c000087a <strcmp>
c0017853:	83 c4 10             	add    esp,0x10
c0017856:	85 c0                	test   eax,eax
c0017858:	0f 85 73 03 00 00    	jne    c0017bd1 <CPU::detectFeatures()+0x9e3>
c001785e:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0017865:	e9 67 03 00 00       	jmp    c0017bd1 <CPU::detectFeatures()+0x9e3>
c001786a:	83 f8 02             	cmp    eax,0x2
c001786d:	0f 85 b5 00 00 00    	jne    c0017928 <CPU::detectFeatures()+0x73a>
c0017873:	57                   	push   edi
c0017874:	57                   	push   edi
c0017875:	68 2a a2 03 c0       	push   0xc003a22a
c001787a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001787e:	56                   	push   esi
c001787f:	e8 70 8f fe ff       	call   c00007f4 <strcpy>
c0017884:	5d                   	pop    ebp
c0017885:	58                   	pop    eax
c0017886:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001788c:	66 c1 e8 06          	shr    ax,0x6
c0017890:	0f b6 c0             	movzx  eax,al
c0017893:	50                   	push   eax
c0017894:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001789a:	c1 e8 0e             	shr    eax,0xe
c001789d:	0f b6 c0             	movzx  eax,al
c00178a0:	50                   	push   eax
c00178a1:	e8 81 f2 ff ff       	call   c0016b27 <lookupAMDCPUName(unsigned char, unsigned char)>
c00178a6:	5a                   	pop    edx
c00178a7:	59                   	pop    ecx
c00178a8:	50                   	push   eax
c00178a9:	56                   	push   esi
c00178aa:	e8 92 90 fe ff       	call   c0000941 <strcat>
c00178af:	5f                   	pop    edi
c00178b0:	5d                   	pop    ebp
c00178b1:	56                   	push   esi
c00178b2:	53                   	push   ebx
c00178b3:	e8 78 c0 ff ff       	call   c0013930 <Device::setName(char const*)>
c00178b8:	58                   	pop    eax
c00178b9:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00178bf:	5a                   	pop    edx
c00178c0:	68 2f a2 03 c0       	push   0xc003a22f
c00178c5:	50                   	push   eax
c00178c6:	e8 af 8f fe ff       	call   c000087a <strcmp>
c00178cb:	83 c4 10             	add    esp,0x10
c00178ce:	85 c0                	test   eax,eax
c00178d0:	75 20                	jne    c00178f2 <CPU::detectFeatures()+0x704>
c00178d2:	8b 15 c8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9c8
c00178d8:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00178de:	a8 01                	test   al,0x1
c00178e0:	74 10                	je     c00178f2 <CPU::detectFeatures()+0x704>
c00178e2:	83 e0 fe             	and    eax,0xfffffffe
c00178e5:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00178eb:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00178f2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00178f8:	c1 e8 0e             	shr    eax,0xe
c00178fb:	3c 05                	cmp    al,0x5
c00178fd:	0f 85 ce 02 00 00    	jne    c0017bd1 <CPU::detectFeatures()+0x9e3>
c0017903:	56                   	push   esi
c0017904:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001790a:	83 e0 0f             	and    eax,0xf
c001790d:	50                   	push   eax
c001790e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017914:	66 c1 e8 06          	shr    ax,0x6
c0017918:	0f b6 c0             	movzx  eax,al
c001791b:	50                   	push   eax
c001791c:	6a 05                	push   0x5
c001791e:	e8 7a f6 ff ff       	call   c0016f9d <AMD_K6_writeback(int, int, int)>
c0017923:	e9 1f 02 00 00       	jmp    c0017b47 <CPU::detectFeatures()+0x959>
c0017928:	8d 50 fd             	lea    edx,[eax-0x3]
c001792b:	83 fa 01             	cmp    edx,0x1
c001792e:	76 09                	jbe    c0017939 <CPU::detectFeatures()+0x74b>
c0017930:	83 f8 06             	cmp    eax,0x6
c0017933:	0f 85 91 01 00 00    	jne    c0017aca <CPU::detectFeatures()+0x8dc>
c0017939:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001793f:	c1 ea 0e             	shr    edx,0xe
c0017942:	80 fa 05             	cmp    dl,0x5
c0017945:	75 7b                	jne    c00179c2 <CPU::detectFeatures()+0x7d4>
c0017947:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001794d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0017952:	66 81 fa 00 01       	cmp    dx,0x100
c0017957:	75 0c                	jne    c0017965 <CPU::detectFeatures()+0x777>
c0017959:	51                   	push   ecx
c001795a:	51                   	push   ecx
c001795b:	68 36 a2 03 c0       	push   0xc003a236
c0017960:	e9 dc 01 00 00       	jmp    c0017b41 <CPU::detectFeatures()+0x953>
c0017965:	66 81 fa 00 02       	cmp    dx,0x200
c001796a:	75 0c                	jne    c0017978 <CPU::detectFeatures()+0x78a>
c001796c:	52                   	push   edx
c001796d:	52                   	push   edx
c001796e:	68 49 a2 03 c0       	push   0xc003a249
c0017973:	e9 c9 01 00 00       	jmp    c0017b41 <CPU::detectFeatures()+0x953>
c0017978:	66 81 fa 40 02       	cmp    dx,0x240
c001797d:	75 0c                	jne    c001798b <CPU::detectFeatures()+0x79d>
c001797f:	50                   	push   eax
c0017980:	50                   	push   eax
c0017981:	68 5b a2 03 c0       	push   0xc003a25b
c0017986:	e9 b6 01 00 00       	jmp    c0017b41 <CPU::detectFeatures()+0x953>
c001798b:	83 f8 06             	cmp    eax,0x6
c001798e:	75 0c                	jne    c001799c <CPU::detectFeatures()+0x7ae>
c0017990:	50                   	push   eax
c0017991:	50                   	push   eax
c0017992:	68 6d a2 03 c0       	push   0xc003a26d
c0017997:	e9 a5 01 00 00       	jmp    c0017b41 <CPU::detectFeatures()+0x953>
c001799c:	83 f8 04             	cmp    eax,0x4
c001799f:	75 0c                	jne    c00179ad <CPU::detectFeatures()+0x7bf>
c00179a1:	50                   	push   eax
c00179a2:	50                   	push   eax
c00179a3:	68 79 a2 03 c0       	push   0xc003a279
c00179a8:	e9 94 01 00 00       	jmp    c0017b41 <CPU::detectFeatures()+0x953>
c00179ad:	83 f8 03             	cmp    eax,0x3
c00179b0:	0f 85 1b 02 00 00    	jne    c0017bd1 <CPU::detectFeatures()+0x9e3>
c00179b6:	50                   	push   eax
c00179b7:	50                   	push   eax
c00179b8:	68 81 a2 03 c0       	push   0xc003a281
c00179bd:	e9 7f 01 00 00       	jmp    c0017b41 <CPU::detectFeatures()+0x953>
c00179c2:	80 fa 06             	cmp    dl,0x6
c00179c5:	0f 85 db 00 00 00    	jne    c0017aa6 <CPU::detectFeatures()+0x8b8>
c00179cb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00179d1:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00179d6:	66 81 fa 80 01       	cmp    dx,0x180
c00179db:	75 0c                	jne    c00179e9 <CPU::detectFeatures()+0x7fb>
c00179dd:	50                   	push   eax
c00179de:	50                   	push   eax
c00179df:	68 8c a2 03 c0       	push   0xc003a28c
c00179e4:	e9 58 01 00 00       	jmp    c0017b41 <CPU::detectFeatures()+0x953>
c00179e9:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00179ef:	66 f7 c1 80 ff       	test   cx,0xff80
c00179f4:	75 0c                	jne    c0017a02 <CPU::detectFeatures()+0x814>
c00179f6:	50                   	push   eax
c00179f7:	50                   	push   eax
c00179f8:	68 9c a2 03 c0       	push   0xc003a29c
c00179fd:	e9 3f 01 00 00       	jmp    c0017b41 <CPU::detectFeatures()+0x953>
c0017a02:	66 81 fa 40 02       	cmp    dx,0x240
c0017a07:	75 0c                	jne    c0017a15 <CPU::detectFeatures()+0x827>
c0017a09:	55                   	push   ebp
c0017a0a:	55                   	push   ebp
c0017a0b:	68 a3 a2 03 c0       	push   0xc003a2a3
c0017a10:	e9 2c 01 00 00       	jmp    c0017b41 <CPU::detectFeatures()+0x953>
c0017a15:	66 81 fa 80 02       	cmp    dx,0x280
c0017a1a:	75 0c                	jne    c0017a28 <CPU::detectFeatures()+0x83a>
c0017a1c:	57                   	push   edi
c0017a1d:	57                   	push   edi
c0017a1e:	68 ac a2 03 c0       	push   0xc003a2ac
c0017a23:	e9 19 01 00 00       	jmp    c0017b41 <CPU::detectFeatures()+0x953>
c0017a28:	66 81 fa 40 03       	cmp    dx,0x340
c0017a2d:	74 ed                	je     c0017a1c <CPU::detectFeatures()+0x82e>
c0017a2f:	66 81 fa c0 03       	cmp    dx,0x3c0
c0017a34:	75 0c                	jne    c0017a42 <CPU::detectFeatures()+0x854>
c0017a36:	56                   	push   esi
c0017a37:	56                   	push   esi
c0017a38:	68 b3 a2 03 c0       	push   0xc003a2b3
c0017a3d:	e9 ff 00 00 00       	jmp    c0017b41 <CPU::detectFeatures()+0x953>
c0017a42:	83 f8 06             	cmp    eax,0x6
c0017a45:	0f 84 45 ff ff ff    	je     c0017990 <CPU::detectFeatures()+0x7a2>
c0017a4b:	83 f8 04             	cmp    eax,0x4
c0017a4e:	0f 84 4d ff ff ff    	je     c00179a1 <CPU::detectFeatures()+0x7b3>
c0017a54:	83 f8 03             	cmp    eax,0x3
c0017a57:	0f 85 74 01 00 00    	jne    c0017bd1 <CPU::detectFeatures()+0x9e3>
c0017a5d:	51                   	push   ecx
c0017a5e:	51                   	push   ecx
c0017a5f:	68 bc a2 03 c0       	push   0xc003a2bc
c0017a64:	53                   	push   ebx
c0017a65:	e8 c6 be ff ff       	call   c0013930 <Device::setName(char const*)>
c0017a6a:	b1 c1                	mov    cl,0xc1
c0017a6c:	88 c8                	mov    al,cl
c0017a6e:	e6 22                	out    0x22,al
c0017a70:	e4 23                	in     al,0x23
c0017a72:	88 c2                	mov    dl,al
c0017a74:	88 c8                	mov    al,cl
c0017a76:	e6 22                	out    0x22,al
c0017a78:	88 d0                	mov    al,dl
c0017a7a:	83 c8 10             	or     eax,0x10
c0017a7d:	e6 23                	out    0x23,al
c0017a7f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0017a86:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0017a89:	89 d0                	mov    eax,edx
c0017a8b:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0017a91:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0017a95:	40                   	inc    eax
c0017a96:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0017a9c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0017aa1:	e9 a1 00 00 00       	jmp    c0017b47 <CPU::detectFeatures()+0x959>
c0017aa6:	83 f8 06             	cmp    eax,0x6
c0017aa9:	0f 84 e1 fe ff ff    	je     c0017990 <CPU::detectFeatures()+0x7a2>
c0017aaf:	83 f8 04             	cmp    eax,0x4
c0017ab2:	0f 84 e9 fe ff ff    	je     c00179a1 <CPU::detectFeatures()+0x7b3>
c0017ab8:	83 f8 03             	cmp    eax,0x3
c0017abb:	0f 85 10 01 00 00    	jne    c0017bd1 <CPU::detectFeatures()+0x9e3>
c0017ac1:	52                   	push   edx
c0017ac2:	52                   	push   edx
c0017ac3:	68 c7 a2 03 c0       	push   0xc003a2c7
c0017ac8:	eb 77                	jmp    c0017b41 <CPU::detectFeatures()+0x953>
c0017aca:	83 f8 07             	cmp    eax,0x7
c0017acd:	75 09                	jne    c0017ad8 <CPU::detectFeatures()+0x8ea>
c0017acf:	50                   	push   eax
c0017ad0:	50                   	push   eax
c0017ad1:	68 d1 a2 03 c0       	push   0xc003a2d1
c0017ad6:	eb 69                	jmp    c0017b41 <CPU::detectFeatures()+0x953>
c0017ad8:	83 f8 0a             	cmp    eax,0xa
c0017adb:	75 09                	jne    c0017ae6 <CPU::detectFeatures()+0x8f8>
c0017add:	50                   	push   eax
c0017ade:	50                   	push   eax
c0017adf:	68 dc a2 03 c0       	push   0xc003a2dc
c0017ae4:	eb 5b                	jmp    c0017b41 <CPU::detectFeatures()+0x953>
c0017ae6:	83 f8 0b             	cmp    eax,0xb
c0017ae9:	75 09                	jne    c0017af4 <CPU::detectFeatures()+0x906>
c0017aeb:	50                   	push   eax
c0017aec:	50                   	push   eax
c0017aed:	68 e4 a2 03 c0       	push   0xc003a2e4
c0017af2:	eb 4d                	jmp    c0017b41 <CPU::detectFeatures()+0x953>
c0017af4:	83 f8 08             	cmp    eax,0x8
c0017af7:	75 09                	jne    c0017b02 <CPU::detectFeatures()+0x914>
c0017af9:	50                   	push   eax
c0017afa:	50                   	push   eax
c0017afb:	68 ed a2 03 c0       	push   0xc003a2ed
c0017b00:	eb 3f                	jmp    c0017b41 <CPU::detectFeatures()+0x953>
c0017b02:	83 f8 09             	cmp    eax,0x9
c0017b05:	75 09                	jne    c0017b10 <CPU::detectFeatures()+0x922>
c0017b07:	50                   	push   eax
c0017b08:	50                   	push   eax
c0017b09:	68 f5 a2 03 c0       	push   0xc003a2f5
c0017b0e:	eb 31                	jmp    c0017b41 <CPU::detectFeatures()+0x953>
c0017b10:	83 f8 05             	cmp    eax,0x5
c0017b13:	75 09                	jne    c0017b1e <CPU::detectFeatures()+0x930>
c0017b15:	50                   	push   eax
c0017b16:	50                   	push   eax
c0017b17:	68 fd a2 03 c0       	push   0xc003a2fd
c0017b1c:	eb 23                	jmp    c0017b41 <CPU::detectFeatures()+0x953>
c0017b1e:	83 f8 0c             	cmp    eax,0xc
c0017b21:	75 09                	jne    c0017b2c <CPU::detectFeatures()+0x93e>
c0017b23:	55                   	push   ebp
c0017b24:	55                   	push   ebp
c0017b25:	68 0b a3 03 c0       	push   0xc003a30b
c0017b2a:	eb 15                	jmp    c0017b41 <CPU::detectFeatures()+0x953>
c0017b2c:	83 f8 0d             	cmp    eax,0xd
c0017b2f:	75 09                	jne    c0017b3a <CPU::detectFeatures()+0x94c>
c0017b31:	57                   	push   edi
c0017b32:	57                   	push   edi
c0017b33:	68 16 a3 03 c0       	push   0xc003a316
c0017b38:	eb 07                	jmp    c0017b41 <CPU::detectFeatures()+0x953>
c0017b3a:	56                   	push   esi
c0017b3b:	56                   	push   esi
c0017b3c:	68 2a a3 03 c0       	push   0xc003a32a
c0017b41:	53                   	push   ebx
c0017b42:	e8 e9 bd ff ff       	call   c0013930 <Device::setName(char const*)>
c0017b47:	83 c4 10             	add    esp,0x10
c0017b4a:	e9 82 00 00 00       	jmp    c0017bd1 <CPU::detectFeatures()+0x9e3>
c0017b4f:	51                   	push   ecx
c0017b50:	51                   	push   ecx
c0017b51:	68 76 a1 03 c0       	push   0xc003a176
c0017b56:	57                   	push   edi
c0017b57:	e8 98 8c fe ff       	call   c00007f4 <strcpy>
c0017b5c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0017b66:	e8 14 86 fe ff       	call   c000017f <is486>
c0017b6b:	83 c4 10             	add    esp,0x10
c0017b6e:	85 c0                	test   eax,eax
c0017b70:	74 2d                	je     c0017b9f <CPU::detectFeatures()+0x9b1>
c0017b72:	52                   	push   edx
c0017b73:	52                   	push   edx
c0017b74:	68 36 a3 03 c0       	push   0xc003a336
c0017b79:	53                   	push   ebx
c0017b7a:	e8 b1 bd ff ff       	call   c0013930 <Device::setName(char const*)>
c0017b7f:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0017b86:	e8 0a 6e 00 00       	call   c001e995 <CPU::readCR0()>
c0017b8b:	83 c4 10             	add    esp,0x10
c0017b8e:	83 e0 14             	and    eax,0x14
c0017b91:	83 f8 04             	cmp    eax,0x4
c0017b94:	75 1f                	jne    c0017bb5 <CPU::detectFeatures()+0x9c7>
c0017b96:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0017b9d:	eb 32                	jmp    c0017bd1 <CPU::detectFeatures()+0x9e3>
c0017b9f:	50                   	push   eax
c0017ba0:	50                   	push   eax
c0017ba1:	68 41 a3 03 c0       	push   0xc003a341
c0017ba6:	53                   	push   ebx
c0017ba7:	e8 84 bd ff ff       	call   c0013930 <Device::setName(char const*)>
c0017bac:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0017bb3:	eb d1                	jmp    c0017b86 <CPU::detectFeatures()+0x998>
c0017bb5:	e8 a0 85 fe ff       	call   c000015a <hasLegacyFPU>
c0017bba:	83 e0 01             	and    eax,0x1
c0017bbd:	8d 14 00             	lea    edx,[eax+eax*1]
c0017bc0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017bc6:	83 e0 fd             	and    eax,0xfffffffd
c0017bc9:	09 d0                	or     eax,edx
c0017bcb:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017bd1:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0017bd8:	83 c4 4c             	add    esp,0x4c
c0017bdb:	5b                   	pop    ebx
c0017bdc:	5e                   	pop    esi
c0017bdd:	5f                   	pop    edi
c0017bde:	5d                   	pop    ebp
c0017bdf:	c3                   	ret    

c0017be0 <CPU::setupSMEP()>:
c0017be0:	83 ec 0c             	sub    esp,0xc
c0017be3:	e8 e3 6d 00 00       	call   c001e9cb <CPU::readCR4()>
c0017be8:	0d 00 00 10 00       	or     eax,0x100000
c0017bed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bf1:	83 c4 0c             	add    esp,0xc
c0017bf4:	e9 f8 74 00 00       	jmp    c001f0f1 <CPU::writeCR4(unsigned long)>
c0017bf9:	90                   	nop

c0017bfa <CPU::setupUMIP()>:
c0017bfa:	83 ec 0c             	sub    esp,0xc
c0017bfd:	e8 c9 6d 00 00       	call   c001e9cb <CPU::readCR4()>
c0017c02:	80 cc 08             	or     ah,0x8
c0017c05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c09:	83 c4 0c             	add    esp,0xc
c0017c0c:	e9 e0 74 00 00       	jmp    c001f0f1 <CPU::writeCR4(unsigned long)>
c0017c11:	90                   	nop

c0017c12 <CPU::setupTSC()>:
c0017c12:	83 ec 0c             	sub    esp,0xc
c0017c15:	e8 b1 6d 00 00       	call   c001e9cb <CPU::readCR4()>
c0017c1a:	83 c8 04             	or     eax,0x4
c0017c1d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c21:	83 c4 0c             	add    esp,0xc
c0017c24:	e9 c8 74 00 00       	jmp    c001f0f1 <CPU::writeCR4(unsigned long)>
c0017c29:	90                   	nop

c0017c2a <CPU::setupLargePages()>:
c0017c2a:	83 ec 0c             	sub    esp,0xc
c0017c2d:	e8 99 6d 00 00       	call   c001e9cb <CPU::readCR4()>
c0017c32:	83 c8 10             	or     eax,0x10
c0017c35:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c39:	83 c4 0c             	add    esp,0xc
c0017c3c:	e9 b0 74 00 00       	jmp    c001f0f1 <CPU::writeCR4(unsigned long)>
c0017c41:	90                   	nop

c0017c42 <CPU::setupPAT()>:
c0017c42:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c0017c47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0017c4e:	74 2c                	je     c0017c7c <CPU::setupPAT()+0x3a>
c0017c50:	53                   	push   ebx
c0017c51:	83 ec 10             	sub    esp,0x10
c0017c54:	68 77 02 00 00       	push   0x277
c0017c59:	50                   	push   eax
c0017c5a:	e8 89 39 ff ff       	call   c000b5e8 <Computer::rdmsr(unsigned int)>
c0017c5f:	83 e2 f8             	and    edx,0xfffffff8
c0017c62:	83 ca 01             	or     edx,0x1
c0017c65:	52                   	push   edx
c0017c66:	50                   	push   eax
c0017c67:	68 77 02 00 00       	push   0x277
c0017c6c:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c0017c72:	e8 9d 39 ff ff       	call   c000b614 <Computer::wrmsr(unsigned int, unsigned long long)>
c0017c77:	83 c4 28             	add    esp,0x28
c0017c7a:	5b                   	pop    ebx
c0017c7b:	c3                   	ret    
c0017c7c:	c3                   	ret    
c0017c7d:	90                   	nop

c0017c7e <CPU::setupMTRR()>:
c0017c7e:	c3                   	ret    
c0017c7f:	90                   	nop

c0017c80 <CPU::setupGlobalPages()>:
c0017c80:	83 ec 0c             	sub    esp,0xc
c0017c83:	e8 43 6d 00 00       	call   c001e9cb <CPU::readCR4()>
c0017c88:	0c 80                	or     al,0x80
c0017c8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c8e:	83 c4 0c             	add    esp,0xc
c0017c91:	e9 5b 74 00 00       	jmp    c001f0f1 <CPU::writeCR4(unsigned long)>

c0017c96 <CPU::allowUsermodeDataAccess()>:
c0017c96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c9a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0017ca1:	74 03                	je     c0017ca6 <CPU::allowUsermodeDataAccess()+0x10>
c0017ca3:	0f 01 cb             	stac   
c0017ca6:	c3                   	ret    
c0017ca7:	90                   	nop

c0017ca8 <CPU::prohibitUsermodeDataAccess()>:
c0017ca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cac:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0017cb3:	74 03                	je     c0017cb8 <CPU::prohibitUsermodeDataAccess()+0x10>
c0017cb5:	0f 01 ca             	clac   
c0017cb8:	c3                   	ret    
c0017cb9:	90                   	nop

c0017cba <CPU::setupSMAP()>:
c0017cba:	53                   	push   ebx
c0017cbb:	83 ec 08             	sub    esp,0x8
c0017cbe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017cc2:	e8 04 6d 00 00       	call   c001e9cb <CPU::readCR4()>
c0017cc7:	83 ec 0c             	sub    esp,0xc
c0017cca:	0d 00 00 20 00       	or     eax,0x200000
c0017ccf:	50                   	push   eax
c0017cd0:	e8 1c 74 00 00       	call   c001f0f1 <CPU::writeCR4(unsigned long)>
c0017cd5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0017cd9:	83 c4 18             	add    esp,0x18
c0017cdc:	5b                   	pop    ebx
c0017cdd:	eb c9                	jmp    c0017ca8 <CPU::prohibitUsermodeDataAccess()>
c0017cdf:	90                   	nop

c0017ce0 <CPU::setupFeatures()>:
c0017ce0:	53                   	push   ebx
c0017ce1:	83 ec 08             	sub    esp,0x8
c0017ce4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017ce8:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0017cef:	74 0c                	je     c0017cfd <CPU::setupFeatures()+0x1d>
c0017cf1:	83 ec 0c             	sub    esp,0xc
c0017cf4:	53                   	push   ebx
c0017cf5:	e8 e6 fe ff ff       	call   c0017be0 <CPU::setupSMEP()>
c0017cfa:	83 c4 10             	add    esp,0x10
c0017cfd:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0017d04:	74 0c                	je     c0017d12 <CPU::setupFeatures()+0x32>
c0017d06:	83 ec 0c             	sub    esp,0xc
c0017d09:	53                   	push   ebx
c0017d0a:	e8 ab ff ff ff       	call   c0017cba <CPU::setupSMAP()>
c0017d0f:	83 c4 10             	add    esp,0x10
c0017d12:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0017d19:	74 0c                	je     c0017d27 <CPU::setupFeatures()+0x47>
c0017d1b:	83 ec 0c             	sub    esp,0xc
c0017d1e:	53                   	push   ebx
c0017d1f:	e8 d6 fe ff ff       	call   c0017bfa <CPU::setupUMIP()>
c0017d24:	83 c4 10             	add    esp,0x10
c0017d27:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0017d2e:	74 0c                	je     c0017d3c <CPU::setupFeatures()+0x5c>
c0017d30:	83 ec 0c             	sub    esp,0xc
c0017d33:	53                   	push   ebx
c0017d34:	e8 d9 fe ff ff       	call   c0017c12 <CPU::setupTSC()>
c0017d39:	83 c4 10             	add    esp,0x10
c0017d3c:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0017d43:	74 0c                	je     c0017d51 <CPU::setupFeatures()+0x71>
c0017d45:	83 ec 0c             	sub    esp,0xc
c0017d48:	53                   	push   ebx
c0017d49:	e8 dc fe ff ff       	call   c0017c2a <CPU::setupLargePages()>
c0017d4e:	83 c4 10             	add    esp,0x10
c0017d51:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0017d58:	74 0c                	je     c0017d66 <CPU::setupFeatures()+0x86>
c0017d5a:	83 ec 0c             	sub    esp,0xc
c0017d5d:	53                   	push   ebx
c0017d5e:	e8 1d ff ff ff       	call   c0017c80 <CPU::setupGlobalPages()>
c0017d63:	83 c4 10             	add    esp,0x10
c0017d66:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0017d6d:	74 0d                	je     c0017d7c <CPU::setupFeatures()+0x9c>
c0017d6f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017d73:	83 c4 08             	add    esp,0x8
c0017d76:	5b                   	pop    ebx
c0017d77:	e9 c6 fe ff ff       	jmp    c0017c42 <CPU::setupPAT()>
c0017d7c:	83 c4 08             	add    esp,0x8
c0017d7f:	5b                   	pop    ebx
c0017d80:	c3                   	ret    
c0017d81:	90                   	nop

c0017d82 <CPU::open(int, int, void*)>:
c0017d82:	57                   	push   edi
c0017d83:	56                   	push   esi
c0017d84:	53                   	push   ebx
c0017d85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017d89:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017d8d:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0017d93:	83 ec 0c             	sub    esp,0xc
c0017d96:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0017d9c:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0017da2:	50                   	push   eax
c0017da3:	e8 5a 4a ff ff       	call   c000c802 <GDT::setup()>
c0017da8:	83 c4 0c             	add    esp,0xc
c0017dab:	6a 00                	push   0x0
c0017dad:	68 ef be ad de       	push   0xdeadbeef
c0017db2:	57                   	push   edi
c0017db3:	e8 22 90 ff ff       	call   c0010dda <TSS::setup(unsigned long, unsigned long)>
c0017db8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017dbb:	e8 fa 8f ff ff       	call   c0010dba <TSS::flush()>
c0017dc0:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0017dc6:	89 04 24             	mov    DWORD PTR [esp],eax
c0017dc9:	e8 8e 4c ff ff       	call   c000ca5c <IDT::setup()>
c0017dce:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0017dd5:	e8 0e 73 00 00       	call   c001f0e8 <CPU::writeDR7(unsigned long)>
c0017dda:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0017de4:	e8 50 5c ff ff       	call   c000da39 <Phys::allocatePage()>
c0017de9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0017def:	89 30                	mov    DWORD PTR [eax],esi
c0017df1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0017df7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017dfa:	58                   	pop    eax
c0017dfb:	5a                   	pop    edx
c0017dfc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0017e02:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017e06:	e8 af 9d ff ff       	call   c0011bba <VAS::setCPUSpecific(unsigned long)>
c0017e0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e0e:	e8 db f3 ff ff       	call   c00171ee <CPU::detectFeatures()>
c0017e13:	e8 70 c8 ff ff       	call   c0014688 <setupInterruptController()>
c0017e18:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0017e1e:	a1 74 bb 03 c0       	mov    eax,ds:0xc003bb74
c0017e23:	83 e0 10             	and    eax,0x10
c0017e26:	83 f8 01             	cmp    eax,0x1
c0017e29:	19 c0                	sbb    eax,eax
c0017e2b:	83 e0 46             	and    eax,0x46
c0017e2e:	83 c0 1e             	add    eax,0x1e
c0017e31:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e34:	e8 33 da ff ff       	call   c001586c <setupTimer(int)>
c0017e39:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0017e3f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e42:	e8 99 fe ff ff       	call   c0017ce0 <CPU::setupFeatures()>
c0017e47:	83 c4 10             	add    esp,0x10
c0017e4a:	31 c0                	xor    eax,eax
c0017e4c:	5b                   	pop    ebx
c0017e4d:	5e                   	pop    esi
c0017e4e:	5f                   	pop    edi
c0017e4f:	c3                   	ret    

c0017e50 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0017e50:	55                   	push   ebp
c0017e51:	57                   	push   edi
c0017e52:	56                   	push   esi
c0017e53:	53                   	push   ebx
c0017e54:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017e5a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0017e61:	8a 1e                	mov    bl,BYTE PTR [esi]
c0017e63:	8d 6e 01             	lea    ebp,[esi+0x1]
c0017e66:	80 fb 40             	cmp    bl,0x40
c0017e69:	75 1b                	jne    c0017e86 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0017e6b:	8a 16                	mov    dl,BYTE PTR [esi]
c0017e6d:	84 d2                	test   dl,dl
c0017e6f:	0f 84 f1 00 00 00    	je     c0017f66 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017e75:	8d 46 01             	lea    eax,[esi+0x1]
c0017e78:	80 fa 3a             	cmp    dl,0x3a
c0017e7b:	74 04                	je     c0017e81 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0017e7d:	89 c6                	mov    esi,eax
c0017e7f:	eb ea                	jmp    c0017e6b <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0017e81:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0017e84:	89 c6                	mov    esi,eax
c0017e86:	50                   	push   eax
c0017e87:	6a 40                	push   0x40
c0017e89:	6a 00                	push   0x0
c0017e8b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017e8f:	50                   	push   eax
c0017e90:	e8 43 88 fe ff       	call   c00006d8 <memset>
c0017e95:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0017e9c:	31 c0                	xor    eax,eax
c0017e9e:	83 c4 10             	add    esp,0x10
c0017ea1:	8a 0f                	mov    cl,BYTE PTR [edi]
c0017ea3:	84 c9                	test   cl,cl
c0017ea5:	0f 84 bb 00 00 00    	je     c0017f66 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017eab:	3d c7 00 00 00       	cmp    eax,0xc7
c0017eb0:	0f 8f b0 00 00 00    	jg     c0017f66 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017eb6:	80 f9 0a             	cmp    cl,0xa
c0017eb9:	0f 85 98 00 00 00    	jne    c0017f57 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0017ebf:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0017ec4:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0017ec8:	a8 df                	test   al,0xdf
c0017eca:	0f 94 c1             	sete   cl
c0017ecd:	3c 23                	cmp    al,0x23
c0017ecf:	0f 94 c2             	sete   dl
c0017ed2:	08 d1                	or     cl,dl
c0017ed4:	75 4a                	jne    c0017f20 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017ed6:	8d 50 f7             	lea    edx,[eax-0x9]
c0017ed9:	80 fa 01             	cmp    dl,0x1
c0017edc:	76 42                	jbe    c0017f20 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017ede:	3c 5b                	cmp    al,0x5b
c0017ee0:	75 42                	jne    c0017f24 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0017ee2:	80 fb 40             	cmp    bl,0x40
c0017ee5:	75 39                	jne    c0017f20 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017ee7:	83 ec 0c             	sub    esp,0xc
c0017eea:	8d 54 24 65          	lea    edx,[esp+0x65]
c0017eee:	52                   	push   edx
c0017eef:	e8 0d 88 fe ff       	call   c0000701 <strlen>
c0017ef4:	83 c4 10             	add    esp,0x10
c0017ef7:	83 f8 3f             	cmp    eax,0x3f
c0017efa:	77 6a                	ja     c0017f66 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017efc:	50                   	push   eax
c0017efd:	50                   	push   eax
c0017efe:	8d 54 24 61          	lea    edx,[esp+0x61]
c0017f02:	52                   	push   edx
c0017f03:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017f07:	52                   	push   edx
c0017f08:	e8 e7 88 fe ff       	call   c00007f4 <strcpy>
c0017f0d:	58                   	pop    eax
c0017f0e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017f12:	52                   	push   edx
c0017f13:	e8 e9 87 fe ff       	call   c0000701 <strlen>
c0017f18:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0017f1d:	83 c4 10             	add    esp,0x10
c0017f20:	31 d2                	xor    edx,edx
c0017f22:	eb 3a                	jmp    c0017f5e <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0017f24:	80 fb 40             	cmp    bl,0x40
c0017f27:	74 06                	je     c0017f2f <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0017f29:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017f2d:	eb 20                	jmp    c0017f4f <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0017f2f:	50                   	push   eax
c0017f30:	50                   	push   eax
c0017f31:	55                   	push   ebp
c0017f32:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017f36:	50                   	push   eax
c0017f37:	e8 3e 89 fe ff       	call   c000087a <strcmp>
c0017f3c:	83 c4 10             	add    esp,0x10
c0017f3f:	85 c0                	test   eax,eax
c0017f41:	75 dd                	jne    c0017f20 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017f43:	eb e4                	jmp    c0017f29 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0017f45:	8d 50 01             	lea    edx,[eax+0x1]
c0017f48:	80 f9 3d             	cmp    cl,0x3d
c0017f4b:	74 1d                	je     c0017f6a <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0017f4d:	89 d0                	mov    eax,edx
c0017f4f:	8a 08                	mov    cl,BYTE PTR [eax]
c0017f51:	84 c9                	test   cl,cl
c0017f53:	75 f0                	jne    c0017f45 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0017f55:	eb 0f                	jmp    c0017f66 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017f57:	8d 50 01             	lea    edx,[eax+0x1]
c0017f5a:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0017f5e:	47                   	inc    edi
c0017f5f:	89 d0                	mov    eax,edx
c0017f61:	e9 3b ff ff ff       	jmp    c0017ea1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0017f66:	31 c0                	xor    eax,eax
c0017f68:	eb 33                	jmp    c0017f9d <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0017f6a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017f6e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0017f71:	50                   	push   eax
c0017f72:	50                   	push   eax
c0017f73:	8d 44 24 60          	lea    eax,[esp+0x60]
c0017f77:	50                   	push   eax
c0017f78:	56                   	push   esi
c0017f79:	e8 fc 88 fe ff       	call   c000087a <strcmp>
c0017f7e:	83 c4 10             	add    esp,0x10
c0017f81:	85 c0                	test   eax,eax
c0017f83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017f87:	75 97                	jne    c0017f20 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017f89:	51                   	push   ecx
c0017f8a:	51                   	push   ecx
c0017f8b:	52                   	push   edx
c0017f8c:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0017f93:	e8 5c 88 fe ff       	call   c00007f4 <strcpy>
c0017f98:	83 c4 10             	add    esp,0x10
c0017f9b:	b0 01                	mov    al,0x1
c0017f9d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017fa3:	5b                   	pop    ebx
c0017fa4:	5e                   	pop    esi
c0017fa5:	5f                   	pop    edi
c0017fa6:	5d                   	pop    ebp
c0017fa7:	c3                   	ret    

c0017fa8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0017fa8:	57                   	push   edi
c0017fa9:	56                   	push   esi
c0017faa:	53                   	push   ebx
c0017fab:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017fb1:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0017fb8:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0017fbf:	53                   	push   ebx
c0017fc0:	e8 3c 87 fe ff       	call   c0000701 <strlen>
c0017fc5:	89 34 24             	mov    DWORD PTR [esp],esi
c0017fc8:	89 c7                	mov    edi,eax
c0017fca:	e8 32 87 fe ff       	call   c0000701 <strlen>
c0017fcf:	83 c4 10             	add    esp,0x10
c0017fd2:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0017fd6:	31 ff                	xor    edi,edi
c0017fd8:	3d ff 00 00 00       	cmp    eax,0xff
c0017fdd:	0f 87 18 01 00 00    	ja     c00180fb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0017fe3:	51                   	push   ecx
c0017fe4:	51                   	push   ecx
c0017fe5:	56                   	push   esi
c0017fe6:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0017fea:	56                   	push   esi
c0017feb:	e8 04 88 fe ff       	call   c00007f4 <strcpy>
c0017ff0:	58                   	pop    eax
c0017ff1:	5a                   	pop    edx
c0017ff2:	68 52 8f 03 c0       	push   0xc0038f52
c0017ff7:	56                   	push   esi
c0017ff8:	e8 44 89 fe ff       	call   c0000941 <strcat>
c0017ffd:	59                   	pop    ecx
c0017ffe:	58                   	pop    eax
c0017fff:	53                   	push   ebx
c0018000:	56                   	push   esi
c0018001:	e8 3b 89 fe ff       	call   c0000941 <strcat>
c0018006:	58                   	pop    eax
c0018007:	5a                   	pop    edx
c0018008:	68 78 a3 03 c0       	push   0xc003a378
c001800d:	56                   	push   esi
c001800e:	e8 2e 89 fe ff       	call   c0000941 <strcat>
c0018013:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001801a:	e8 25 a4 ff ff       	call   c0012444 <operator new(unsigned long)>
c001801f:	83 c4 0c             	add    esp,0xc
c0018022:	89 c3                	mov    ebx,eax
c0018024:	ff 35 1c bc 03 c0    	push   DWORD PTR ds:0xc003bc1c
c001802a:	56                   	push   esi
c001802b:	50                   	push   eax
c001802c:	e8 41 a8 ff ff       	call   c0012872 <File::File(char const*, Process*)>
c0018031:	59                   	pop    ecx
c0018032:	5e                   	pop    esi
c0018033:	6a 01                	push   0x1
c0018035:	53                   	push   ebx
c0018036:	e8 9b a8 ff ff       	call   c00128d6 <File::open(FileOpenMode)>
c001803b:	83 c4 10             	add    esp,0x10
c001803e:	85 c0                	test   eax,eax
c0018040:	74 08                	je     c001804a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0018042:	83 ec 0c             	sub    esp,0xc
c0018045:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018047:	53                   	push   ebx
c0018048:	eb 2e                	jmp    c0018078 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c001804a:	52                   	push   edx
c001804b:	8d 44 24 07          	lea    eax,[esp+0x7]
c001804f:	50                   	push   eax
c0018050:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018054:	50                   	push   eax
c0018055:	53                   	push   ebx
c0018056:	e8 27 ab ff ff       	call   c0012b82 <File::stat(unsigned long long*, bool*)>
c001805b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001805f:	83 c4 10             	add    esp,0x10
c0018062:	89 c1                	mov    ecx,eax
c0018064:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0018068:	75 13                	jne    c001807d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c001806a:	83 ec 0c             	sub    esp,0xc
c001806d:	53                   	push   ebx
c001806e:	e8 c1 a8 ff ff       	call   c0012934 <File::close()>
c0018073:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018075:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018078:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001807b:	eb 7b                	jmp    c00180f8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c001807d:	83 ec 0c             	sub    esp,0xc
c0018080:	50                   	push   eax
c0018081:	e8 09 54 ff ff       	call   c000d48f <malloc>
c0018086:	89 c6                	mov    esi,eax
c0018088:	58                   	pop    eax
c0018089:	8b 03                	mov    eax,DWORD PTR [ebx]
c001808b:	8d 54 24 10          	lea    edx,[esp+0x10]
c001808f:	52                   	push   edx
c0018090:	56                   	push   esi
c0018091:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018095:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018099:	53                   	push   ebx
c001809a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001809d:	83 c4 20             	add    esp,0x20
c00180a0:	85 c0                	test   eax,eax
c00180a2:	75 0a                	jne    c00180ae <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00180a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180a8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00180ac:	74 18                	je     c00180c6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c00180ae:	83 ec 0c             	sub    esp,0xc
c00180b1:	31 ff                	xor    edi,edi
c00180b3:	53                   	push   ebx
c00180b4:	e8 7b a8 ff ff       	call   c0012934 <File::close()>
c00180b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00180be:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00180c1:	83 c4 10             	add    esp,0x10
c00180c4:	eb 35                	jmp    c00180fb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c00180c6:	83 ec 0c             	sub    esp,0xc
c00180c9:	53                   	push   ebx
c00180ca:	e8 65 a8 ff ff       	call   c0012934 <File::close()>
c00180cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00180d4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00180d7:	83 c4 0c             	add    esp,0xc
c00180da:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c00180e1:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c00180e8:	56                   	push   esi
c00180e9:	e8 62 fd ff ff       	call   c0017e50 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00180ee:	89 34 24             	mov    DWORD PTR [esp],esi
c00180f1:	89 c7                	mov    edi,eax
c00180f3:	e8 a7 53 ff ff       	call   c000d49f <free>
c00180f8:	83 c4 10             	add    esp,0x10
c00180fb:	81 c4 10 01 00 00    	add    esp,0x110
c0018101:	89 f8                	mov    eax,edi
c0018103:	5b                   	pop    ebx
c0018104:	5e                   	pop    esi
c0018105:	5f                   	pop    edi
c0018106:	c3                   	ret    

c0018107 <Reg::getLine(char*, char*, char*)>:
c0018107:	57                   	push   edi
c0018108:	56                   	push   esi
c0018109:	53                   	push   ebx
c001810a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001810e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018112:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0018116:	57                   	push   edi
c0018117:	56                   	push   esi
c0018118:	53                   	push   ebx
c0018119:	68 7d a3 03 c0       	push   0xc003a37d
c001811e:	e8 85 fe ff ff       	call   c0017fa8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0018123:	83 c4 10             	add    esp,0x10
c0018126:	84 c0                	test   al,al
c0018128:	75 10                	jne    c001813a <Reg::getLine(char*, char*, char*)+0x33>
c001812a:	57                   	push   edi
c001812b:	56                   	push   esi
c001812c:	53                   	push   ebx
c001812d:	68 a2 a3 03 c0       	push   0xc003a3a2
c0018132:	e8 71 fe ff ff       	call   c0017fa8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0018137:	83 c4 10             	add    esp,0x10
c001813a:	5b                   	pop    ebx
c001813b:	5e                   	pop    esi
c001813c:	5f                   	pop    edi
c001813d:	c3                   	ret    

c001813e <Reg::readInt(char*, char*, int*)>:
c001813e:	55                   	push   ebp
c001813f:	57                   	push   edi
c0018140:	56                   	push   esi
c0018141:	53                   	push   ebx
c0018142:	81 ec f0 00 00 00    	sub    esp,0xf0
c0018148:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001814c:	57                   	push   edi
c001814d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0018154:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001815b:	e8 a7 ff ff ff       	call   c0018107 <Reg::getLine(char*, char*, char*)>
c0018160:	83 c4 10             	add    esp,0x10
c0018163:	84 c0                	test   al,al
c0018165:	0f 84 b3 00 00 00    	je     c001821e <Reg::readInt(char*, char*, int*)+0xe0>
c001816b:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001816f:	80 fa 2b             	cmp    dl,0x2b
c0018172:	74 0c                	je     c0018180 <Reg::readInt(char*, char*, int*)+0x42>
c0018174:	80 fa 2d             	cmp    dl,0x2d
c0018177:	75 0e                	jne    c0018187 <Reg::readInt(char*, char*, int*)+0x49>
c0018179:	ba 01 00 00 00       	mov    edx,0x1
c001817e:	eb 0b                	jmp    c001818b <Reg::readInt(char*, char*, int*)+0x4d>
c0018180:	ba 01 00 00 00       	mov    edx,0x1
c0018185:	eb 02                	jmp    c0018189 <Reg::readInt(char*, char*, int*)+0x4b>
c0018187:	31 d2                	xor    edx,edx
c0018189:	31 c0                	xor    eax,eax
c001818b:	be 0a 00 00 00       	mov    esi,0xa
c0018190:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0018195:	75 20                	jne    c00181b7 <Reg::readInt(char*, char*, int*)+0x79>
c0018197:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001819b:	80 f9 78             	cmp    cl,0x78
c001819e:	75 0a                	jne    c00181aa <Reg::readInt(char*, char*, int*)+0x6c>
c00181a0:	83 c2 02             	add    edx,0x2
c00181a3:	be 10 00 00 00       	mov    esi,0x10
c00181a8:	eb 0d                	jmp    c00181b7 <Reg::readInt(char*, char*, int*)+0x79>
c00181aa:	80 f9 62             	cmp    cl,0x62
c00181ad:	75 08                	jne    c00181b7 <Reg::readInt(char*, char*, int*)+0x79>
c00181af:	83 c2 02             	add    edx,0x2
c00181b2:	be 02 00 00 00       	mov    esi,0x2
c00181b7:	01 d7                	add    edi,edx
c00181b9:	31 d2                	xor    edx,edx
c00181bb:	8a 1f                	mov    bl,BYTE PTR [edi]
c00181bd:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00181c1:	80 fb 0d             	cmp    bl,0xd
c00181c4:	0f 94 c3             	sete   bl
c00181c7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00181cc:	0f 94 c1             	sete   cl
c00181cf:	08 cb                	or     bl,cl
c00181d1:	75 3a                	jne    c001820d <Reg::readInt(char*, char*, int*)+0xcf>
c00181d3:	0f af d6             	imul   edx,esi
c00181d6:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00181db:	83 fe 10             	cmp    esi,0x10
c00181de:	75 26                	jne    c0018206 <Reg::readInt(char*, char*, int*)+0xc8>
c00181e0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00181e4:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00181e7:	89 e9                	mov    ecx,ebp
c00181e9:	80 f9 05             	cmp    cl,0x5
c00181ec:	77 06                	ja     c00181f4 <Reg::readInt(char*, char*, int*)+0xb6>
c00181ee:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00181f2:	eb 16                	jmp    c001820a <Reg::readInt(char*, char*, int*)+0xcc>
c00181f4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00181f8:	83 e9 61             	sub    ecx,0x61
c00181fb:	80 f9 05             	cmp    cl,0x5
c00181fe:	77 06                	ja     c0018206 <Reg::readInt(char*, char*, int*)+0xc8>
c0018200:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0018204:	eb 04                	jmp    c001820a <Reg::readInt(char*, char*, int*)+0xcc>
c0018206:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001820a:	47                   	inc    edi
c001820b:	eb ae                	jmp    c00181bb <Reg::readInt(char*, char*, int*)+0x7d>
c001820d:	84 c0                	test   al,al
c001820f:	74 02                	je     c0018213 <Reg::readInt(char*, char*, int*)+0xd5>
c0018211:	f7 da                	neg    edx
c0018213:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001821a:	89 10                	mov    DWORD PTR [eax],edx
c001821c:	88 d8                	mov    al,bl
c001821e:	81 c4 ec 00 00 00    	add    esp,0xec
c0018224:	5b                   	pop    ebx
c0018225:	5e                   	pop    esi
c0018226:	5f                   	pop    edi
c0018227:	5d                   	pop    ebp
c0018228:	c3                   	ret    

c0018229 <Reg::readString(char*, char*, char*, int)>:
c0018229:	57                   	push   edi
c001822a:	56                   	push   esi
c001822b:	53                   	push   ebx
c001822c:	81 ec d4 00 00 00    	sub    esp,0xd4
c0018232:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0018239:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001823d:	57                   	push   edi
c001823e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0018245:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001824c:	e8 b6 fe ff ff       	call   c0018107 <Reg::getLine(char*, char*, char*)>
c0018251:	83 c4 10             	add    esp,0x10
c0018254:	89 c6                	mov    esi,eax
c0018256:	84 c0                	test   al,al
c0018258:	74 44                	je     c001829e <Reg::readString(char*, char*, char*, int)+0x75>
c001825a:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0018261:	31 c0                	xor    eax,eax
c0018263:	4a                   	dec    edx
c0018264:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0018267:	84 c9                	test   cl,cl
c0018269:	74 0f                	je     c001827a <Reg::readString(char*, char*, char*, int)+0x51>
c001826b:	39 c2                	cmp    edx,eax
c001826d:	7e 0b                	jle    c001827a <Reg::readString(char*, char*, char*, int)+0x51>
c001826f:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0018272:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0018277:	40                   	inc    eax
c0018278:	eb ea                	jmp    c0018264 <Reg::readString(char*, char*, char*, int)+0x3b>
c001827a:	83 ec 0c             	sub    esp,0xc
c001827d:	53                   	push   ebx
c001827e:	e8 7e 84 fe ff       	call   c0000701 <strlen>
c0018283:	83 c4 10             	add    esp,0x10
c0018286:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001828b:	75 11                	jne    c001829e <Reg::readString(char*, char*, char*, int)+0x75>
c001828d:	83 ec 0c             	sub    esp,0xc
c0018290:	53                   	push   ebx
c0018291:	e8 6b 84 fe ff       	call   c0000701 <strlen>
c0018296:	83 c4 10             	add    esp,0x10
c0018299:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001829e:	81 c4 d0 00 00 00    	add    esp,0xd0
c00182a4:	89 f0                	mov    eax,esi
c00182a6:	5b                   	pop    ebx
c00182a7:	5e                   	pop    esi
c00182a8:	5f                   	pop    edi
c00182a9:	c3                   	ret    

c00182aa <Reg::readBool(char*, char*, bool*)>:
c00182aa:	83 ec 20             	sub    esp,0x20
c00182ad:	8d 44 24 10          	lea    eax,[esp+0x10]
c00182b1:	50                   	push   eax
c00182b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182ba:	e8 7f fe ff ff       	call   c001813e <Reg::readInt(char*, char*, int*)>
c00182bf:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00182c4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00182c8:	0f 95 02             	setne  BYTE PTR [edx]
c00182cb:	83 c4 2c             	add    esp,0x2c
c00182ce:	c3                   	ret    

c00182cf <Reg::readBoolWithDefault(char*, char*, bool)>:
c00182cf:	53                   	push   ebx
c00182d0:	83 ec 1c             	sub    esp,0x1c
c00182d3:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00182d7:	8d 44 24 13          	lea    eax,[esp+0x13]
c00182db:	50                   	push   eax
c00182dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182e4:	e8 c1 ff ff ff       	call   c00182aa <Reg::readBool(char*, char*, bool*)>
c00182e9:	83 c4 10             	add    esp,0x10
c00182ec:	84 c0                	test   al,al
c00182ee:	74 04                	je     c00182f4 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00182f0:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00182f4:	88 d8                	mov    al,bl
c00182f6:	83 c4 18             	add    esp,0x18
c00182f9:	5b                   	pop    ebx
c00182fa:	c3                   	ret    

c00182fb <Reg::readIntWithDefault(char*, char*, int)>:
c00182fb:	53                   	push   ebx
c00182fc:	83 ec 1c             	sub    esp,0x1c
c00182ff:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018303:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018307:	50                   	push   eax
c0018308:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001830c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018310:	e8 29 fe ff ff       	call   c001813e <Reg::readInt(char*, char*, int*)>
c0018315:	83 c4 10             	add    esp,0x10
c0018318:	84 c0                	test   al,al
c001831a:	74 04                	je     c0018320 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001831c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0018320:	89 d8                	mov    eax,ebx
c0018322:	83 c4 18             	add    esp,0x18
c0018325:	5b                   	pop    ebx
c0018326:	c3                   	ret    

c0018327 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0018327:	56                   	push   esi
c0018328:	53                   	push   ebx
c0018329:	51                   	push   ecx
c001832a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001832e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018336:	56                   	push   esi
c0018337:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001833b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001833f:	e8 e5 fe ff ff       	call   c0018229 <Reg::readString(char*, char*, char*, int)>
c0018344:	83 c4 10             	add    esp,0x10
c0018347:	84 c0                	test   al,al
c0018349:	74 02                	je     c001834d <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c001834b:	89 f3                	mov    ebx,esi
c001834d:	89 d8                	mov    eax,ebx
c001834f:	5a                   	pop    edx
c0018350:	5b                   	pop    ebx
c0018351:	5e                   	pop    esi
c0018352:	c3                   	ret    

c0018353 <Sys::exit(regs*)>:
c0018353:	83 ec 18             	sub    esp,0x18
c0018356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001835a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001835d:	e8 d4 6b ff ff       	call   c000ef36 <terminateTask(int)>
c0018362:	83 c8 ff             	or     eax,0xffffffff
c0018365:	83 c4 1c             	add    esp,0x1c
c0018368:	89 c2                	mov    edx,eax
c001836a:	c3                   	ret    

c001836b <Sys::read(regs*)>:
c001836b:	57                   	push   edi
c001836c:	56                   	push   esi
c001836d:	53                   	push   ebx
c001836e:	83 ec 10             	sub    esp,0x10
c0018371:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018375:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0018378:	83 f8 02             	cmp    eax,0x2
c001837b:	77 10                	ja     c001838d <Sys::read(regs*)+0x22>
c001837d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018382:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018385:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001838b:	eb 0e                	jmp    c001839b <Sys::read(regs*)+0x30>
c001838d:	83 ec 0c             	sub    esp,0xc
c0018390:	50                   	push   eax
c0018391:	e8 37 8e ff ff       	call   c00111cd <getFromFileDescriptor(int)>
c0018396:	83 c4 10             	add    esp,0x10
c0018399:	89 c1                	mov    ecx,eax
c001839b:	83 c8 ff             	or     eax,0xffffffff
c001839e:	85 c9                	test   ecx,ecx
c00183a0:	89 c2                	mov    edx,eax
c00183a2:	74 28                	je     c00183cc <Sys::read(regs*)+0x61>
c00183a4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00183ac:	31 ff                	xor    edi,edi
c00183ae:	83 ec 0c             	sub    esp,0xc
c00183b1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00183b3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00183b7:	52                   	push   edx
c00183b8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00183bb:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00183be:	57                   	push   edi
c00183bf:	56                   	push   esi
c00183c0:	51                   	push   ecx
c00183c1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00183c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00183c8:	83 c4 20             	add    esp,0x20
c00183cb:	99                   	cdq    
c00183cc:	83 c4 10             	add    esp,0x10
c00183cf:	5b                   	pop    ebx
c00183d0:	5e                   	pop    esi
c00183d1:	5f                   	pop    edi
c00183d2:	c3                   	ret    

c00183d3 <Sys::sbrk(regs*)>:
c00183d3:	56                   	push   esi
c00183d4:	53                   	push   ebx
c00183d5:	50                   	push   eax
c00183d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00183db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00183df:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00183e2:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00183e5:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c00183eb:	85 db                	test   ebx,ebx
c00183ed:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00183f0:	74 02                	je     c00183f4 <Sys::sbrk(regs*)+0x21>
c00183f2:	79 06                	jns    c00183fa <Sys::sbrk(regs*)+0x27>
c00183f4:	89 f0                	mov    eax,esi
c00183f6:	31 d2                	xor    edx,edx
c00183f8:	eb 2a                	jmp    c0018424 <Sys::sbrk(regs*)+0x51>
c00183fa:	83 c8 ff             	or     eax,0xffffffff
c00183fd:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0018403:	89 c2                	mov    edx,eax
c0018405:	77 1d                	ja     c0018424 <Sys::sbrk(regs*)+0x51>
c0018407:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001840d:	50                   	push   eax
c001840e:	c1 ea 0c             	shr    edx,0xc
c0018411:	68 07 04 00 00       	push   0x407
c0018416:	52                   	push   edx
c0018417:	51                   	push   ecx
c0018418:	e8 cd 95 ff ff       	call   c00119ea <VAS::allocatePages(int, int)>
c001841d:	89 f0                	mov    eax,esi
c001841f:	31 d2                	xor    edx,edx
c0018421:	83 c4 10             	add    esp,0x10
c0018424:	59                   	pop    ecx
c0018425:	5b                   	pop    ebx
c0018426:	5e                   	pop    esi
c0018427:	c3                   	ret    

c0018428 <Sys::write(regs*)>:
c0018428:	57                   	push   edi
c0018429:	56                   	push   esi
c001842a:	53                   	push   ebx
c001842b:	83 ec 10             	sub    esp,0x10
c001842e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018432:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0018435:	83 f8 02             	cmp    eax,0x2
c0018438:	77 10                	ja     c001844a <Sys::write(regs*)+0x22>
c001843a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001843f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018442:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0018448:	eb 0e                	jmp    c0018458 <Sys::write(regs*)+0x30>
c001844a:	83 ec 0c             	sub    esp,0xc
c001844d:	50                   	push   eax
c001844e:	e8 7a 8d ff ff       	call   c00111cd <getFromFileDescriptor(int)>
c0018453:	83 c4 10             	add    esp,0x10
c0018456:	89 c1                	mov    ecx,eax
c0018458:	83 c8 ff             	or     eax,0xffffffff
c001845b:	85 c9                	test   ecx,ecx
c001845d:	89 c2                	mov    edx,eax
c001845f:	74 28                	je     c0018489 <Sys::write(regs*)+0x61>
c0018461:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018469:	31 ff                	xor    edi,edi
c001846b:	83 ec 0c             	sub    esp,0xc
c001846e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0018470:	8d 54 24 18          	lea    edx,[esp+0x18]
c0018474:	52                   	push   edx
c0018475:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0018478:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001847b:	57                   	push   edi
c001847c:	56                   	push   esi
c001847d:	51                   	push   ecx
c001847e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0018481:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018485:	83 c4 20             	add    esp,0x20
c0018488:	99                   	cdq    
c0018489:	83 c4 10             	add    esp,0x10
c001848c:	5b                   	pop    ebx
c001848d:	5e                   	pop    esi
c001848e:	5f                   	pop    edi
c001848f:	c3                   	ret    

c0018490 <Sys::yield(regs*)>:
c0018490:	83 ec 0c             	sub    esp,0xc
c0018493:	e8 9e 5e ff ff       	call   c000e336 <lockScheduler()>
c0018498:	e8 cd 61 ff ff       	call   c000e66a <schedule()>
c001849d:	e8 96 5e ff ff       	call   c000e338 <unlockScheduler()>
c00184a2:	31 c0                	xor    eax,eax
c00184a4:	31 d2                	xor    edx,edx
c00184a6:	83 c4 0c             	add    esp,0xc
c00184a9:	c3                   	ret    

c00184aa <vm8086EntryPoint(void*)>:
c00184aa:	83 ec 0c             	sub    esp,0xc
c00184ad:	e8 86 5e ff ff       	call   c000e338 <unlockScheduler()>
c00184b2:	fb                   	sti    
c00184b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00184b8:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c00184bc:	52                   	push   edx
c00184bd:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c00184c1:	52                   	push   edx
c00184c2:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00184c6:	52                   	push   edx
c00184c7:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c00184cb:	50                   	push   eax
c00184cc:	e8 11 7d fe ff       	call   c00001e2 <goToVM86>
c00184d1:	83 c4 1c             	add    esp,0x1c
c00184d4:	c3                   	ret    

c00184d5 <inbv(unsigned short)>:
c00184d5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00184d9:	ec                   	in     al,dx
c00184da:	c3                   	ret    

c00184db <outbv(unsigned short, unsigned char)>:
c00184db:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00184df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00184e3:	ee                   	out    dx,al
c00184e4:	c3                   	ret    

c00184e5 <realToLinear(unsigned short, unsigned short)>:
c00184e5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00184ea:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00184ef:	c1 e0 04             	shl    eax,0x4
c00184f2:	01 d0                	add    eax,edx
c00184f4:	c3                   	ret    

c00184f5 <getSegment(unsigned int)>:
c00184f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184f9:	c1 e8 10             	shr    eax,0x10
c00184fc:	c3                   	ret    

c00184fd <getOffset(unsigned int)>:
c00184fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018501:	c3                   	ret    

c0018502 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018502:	55                   	push   ebp
c0018503:	57                   	push   edi
c0018504:	56                   	push   esi
c0018505:	53                   	push   ebx
c0018506:	83 ec 2c             	sub    esp,0x2c
c0018509:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001850d:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0018511:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018515:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0018519:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001851d:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0018521:	e8 10 5e ff ff       	call   c000e336 <lockScheduler()>
c0018526:	68 80 00 00 00       	push   0x80
c001852b:	6a 00                	push   0x0
c001852d:	68 aa 84 01 c0       	push   0xc00184aa
c0018532:	55                   	push   ebp
c0018533:	e8 28 5f ff ff       	call   c000e460 <Process::createThread(void (*)(void*), void*, int)>
c0018538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001853c:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c0018540:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0018544:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c0018548:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c001854c:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0018550:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018557:	e8 e8 9e ff ff       	call   c0012444 <operator new(unsigned long)>
c001855c:	83 c4 0c             	add    esp,0xc
c001855f:	89 c3                	mov    ebx,eax
c0018561:	55                   	push   ebp
c0018562:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018566:	50                   	push   eax
c0018567:	e8 06 a3 ff ff       	call   c0012872 <File::File(char const*, Process*)>
c001856c:	83 c4 0c             	add    esp,0xc
c001856f:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018573:	50                   	push   eax
c0018574:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018578:	50                   	push   eax
c0018579:	53                   	push   ebx
c001857a:	e8 03 a6 ff ff       	call   c0012b82 <File::stat(unsigned long long*, bool*)>
c001857f:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c0018583:	83 c4 10             	add    esp,0x10
c0018586:	84 d2                	test   dl,dl
c0018588:	74 1c                	je     c00185a6 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c001858a:	83 ec 0c             	sub    esp,0xc
c001858d:	68 bd a3 03 c0       	push   0xc003a3bd
c0018592:	e8 1b 4a ff ff       	call   c000cfb2 <panic(char const*)>
c0018597:	e8 9c 5d ff ff       	call   c000e338 <unlockScheduler()>
c001859c:	83 c4 10             	add    esp,0x10
c001859f:	31 d2                	xor    edx,edx
c00185a1:	e9 81 00 00 00       	jmp    c0018627 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c00185a6:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00185aa:	51                   	push   ecx
c00185ab:	51                   	push   ecx
c00185ac:	6a 01                	push   0x1
c00185ae:	53                   	push   ebx
c00185af:	e8 22 a3 ff ff       	call   c00128d6 <File::open(FileOpenMode)>
c00185b4:	83 c4 10             	add    esp,0x10
c00185b7:	85 c0                	test   eax,eax
c00185b9:	74 1b                	je     c00185d6 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c00185bb:	83 ec 0c             	sub    esp,0xc
c00185be:	68 d6 a3 03 c0       	push   0xc003a3d6
c00185c3:	e8 ea 49 ff ff       	call   c000cfb2 <panic(char const*)>
c00185c8:	e8 6b 5d ff ff       	call   c000e338 <unlockScheduler()>
c00185cd:	83 c4 10             	add    esp,0x10
c00185d0:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00185d4:	eb 51                	jmp    c0018627 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c00185d6:	83 ec 0c             	sub    esp,0xc
c00185d9:	0f b7 ff             	movzx  edi,di
c00185dc:	6a 07                	push   0x7
c00185de:	0f b7 f6             	movzx  esi,si
c00185e1:	68 00 01 00 00       	push   0x100
c00185e6:	6a 00                	push   0x0
c00185e8:	6a 00                	push   0x0
c00185ea:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c00185f0:	e8 e1 95 ff ff       	call   c0011bd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00185f5:	83 c4 18             	add    esp,0x18
c00185f8:	57                   	push   edi
c00185f9:	56                   	push   esi
c00185fa:	e8 e6 fe ff ff       	call   c00184e5 <realToLinear(unsigned short, unsigned short)>
c00185ff:	5a                   	pop    edx
c0018600:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018602:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018606:	51                   	push   ecx
c0018607:	50                   	push   eax
c0018608:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001860c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018610:	53                   	push   ebx
c0018611:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018614:	83 c4 14             	add    esp,0x14
c0018617:	53                   	push   ebx
c0018618:	e8 17 a3 ff ff       	call   c0012934 <File::close()>
c001861d:	e8 16 5d ff ff       	call   c000e338 <unlockScheduler()>
c0018622:	83 c4 10             	add    esp,0x10
c0018625:	b2 01                	mov    dl,0x1
c0018627:	83 c4 2c             	add    esp,0x2c
c001862a:	88 d0                	mov    al,dl
c001862c:	5b                   	pop    ebx
c001862d:	5e                   	pop    esi
c001862e:	5f                   	pop    edi
c001862f:	5d                   	pop    ebp
c0018630:	c3                   	ret    

c0018631 <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018631:	57                   	push   edi
c0018632:	56                   	push   esi
c0018633:	53                   	push   ebx
c0018634:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018638:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001863c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018640:	83 e8 06             	sub    eax,0x6
c0018643:	0f b7 c0             	movzx  eax,ax
c0018646:	50                   	push   eax
c0018647:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001864c:	50                   	push   eax
c001864d:	e8 93 fe ff ff       	call   c00184e5 <realToLinear(unsigned short, unsigned short)>
c0018652:	5a                   	pop    edx
c0018653:	5e                   	pop    esi
c0018654:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018657:	8d 56 fa             	lea    edx,[esi-0x6]
c001865a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018660:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018663:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018666:	83 c2 02             	add    edx,0x2
c0018669:	66 89 10             	mov    WORD PTR [eax],dx
c001866c:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001866f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018673:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018676:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001867a:	89 d6                	mov    esi,edx
c001867c:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018682:	66 81 e6 ff fd       	and    si,0xfdff
c0018687:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001868b:	74 07                	je     c0018694 <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001868d:	89 d6                	mov    esi,edx
c001868f:	66 81 ce 00 02       	or     si,0x200
c0018694:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018698:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001869d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00186a1:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00186a9:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00186ac:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00186b4:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00186b7:	5b                   	pop    ebx
c00186b8:	5e                   	pop    esi
c00186b9:	5f                   	pop    edi
c00186ba:	c3                   	ret    

c00186bb <readByteFromReal(unsigned short, unsigned short)>:
c00186bb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00186c0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00186c5:	c1 e0 04             	shl    eax,0x4
c00186c8:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00186cb:	c3                   	ret    

c00186cc <readWordFromReal(unsigned short, unsigned short)>:
c00186cc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00186d1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00186d6:	c1 e0 04             	shl    eax,0x4
c00186d9:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00186dd:	c3                   	ret    

c00186de <readDwordFromReal(unsigned short, unsigned short)>:
c00186de:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00186e3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00186e8:	c1 e0 04             	shl    eax,0x4
c00186eb:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00186ee:	c3                   	ret    

c00186ef <writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00186ef:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00186f4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00186f9:	c1 e0 04             	shl    eax,0x4
c00186fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018700:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018703:	c3                   	ret    

c0018704 <writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018704:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018709:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001870e:	c1 e0 04             	shl    eax,0x4
c0018711:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018715:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018719:	c3                   	ret    

c001871a <writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001871a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001871f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018724:	c1 e0 04             	shl    eax,0x4
c0018727:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001872b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001872e:	c3                   	ret    

c001872f <vm8086FaultHandler(regs*)>:
c001872f:	55                   	push   ebp
c0018730:	57                   	push   edi
c0018731:	56                   	push   esi
c0018732:	53                   	push   ebx
c0018733:	83 ec 1c             	sub    esp,0x1c
c0018736:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001873a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001873d:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018741:	0f b7 f0             	movzx  esi,ax
c0018744:	52                   	push   edx
c0018745:	0f b7 c0             	movzx  eax,ax
c0018748:	50                   	push   eax
c0018749:	e8 97 fd ff ff       	call   c00184e5 <realToLinear(unsigned short, unsigned short)>
c001874e:	5a                   	pop    edx
c001874f:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018752:	59                   	pop    ecx
c0018753:	89 c7                	mov    edi,eax
c0018755:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018758:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001875c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018765:	0f b7 c5             	movzx  eax,bp
c0018768:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001876c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018770:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018774:	e8 6c fd ff ff       	call   c00184e5 <realToLinear(unsigned short, unsigned short)>
c0018779:	5a                   	pop    edx
c001877a:	59                   	pop    ecx
c001877b:	b1 06                	mov    cl,0x6
c001877d:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018782:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018787:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001878a:	80 fa 9d             	cmp    dl,0x9d
c001878d:	0f 84 1d 02 00 00    	je     c00189b0 <vm8086FaultHandler(regs*)+0x281>
c0018793:	0f 87 8e 00 00 00    	ja     c0018827 <vm8086FaultHandler(regs*)+0xf8>
c0018799:	80 fa 66             	cmp    dl,0x66
c001879c:	0f 84 89 01 00 00    	je     c001892b <vm8086FaultHandler(regs*)+0x1fc>
c00187a2:	77 44                	ja     c00187e8 <vm8086FaultHandler(regs*)+0xb9>
c00187a4:	80 fa 36             	cmp    dl,0x36
c00187a7:	0f 84 74 01 00 00    	je     c0018921 <vm8086FaultHandler(regs*)+0x1f2>
c00187ad:	77 1a                	ja     c00187c9 <vm8086FaultHandler(regs*)+0x9a>
c00187af:	80 fa 26             	cmp    dl,0x26
c00187b2:	0f 84 4b 01 00 00    	je     c0018903 <vm8086FaultHandler(regs*)+0x1d4>
c00187b8:	80 fa 2e             	cmp    dl,0x2e
c00187bb:	0f 85 4a 05 00 00    	jne    c0018d0b <vm8086FaultHandler(regs*)+0x5dc>
c00187c1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00187c4:	31 c9                	xor    ecx,ecx
c00187c6:	47                   	inc    edi
c00187c7:	eb be                	jmp    c0018787 <vm8086FaultHandler(regs*)+0x58>
c00187c9:	80 fa 64             	cmp    dl,0x64
c00187cc:	0f 84 3b 01 00 00    	je     c001890d <vm8086FaultHandler(regs*)+0x1de>
c00187d2:	0f 87 3f 01 00 00    	ja     c0018917 <vm8086FaultHandler(regs*)+0x1e8>
c00187d8:	80 fa 3e             	cmp    dl,0x3e
c00187db:	0f 85 2a 05 00 00    	jne    c0018d0b <vm8086FaultHandler(regs*)+0x5dc>
c00187e1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00187e4:	b1 01                	mov    cl,0x1
c00187e6:	eb de                	jmp    c00187c6 <vm8086FaultHandler(regs*)+0x97>
c00187e8:	80 fa 6d             	cmp    dl,0x6d
c00187eb:	0f 84 bf 02 00 00    	je     c0018ab0 <vm8086FaultHandler(regs*)+0x381>
c00187f1:	77 17                	ja     c001880a <vm8086FaultHandler(regs*)+0xdb>
c00187f3:	80 fa 67             	cmp    dl,0x67
c00187f6:	0f 84 3c 01 00 00    	je     c0018938 <vm8086FaultHandler(regs*)+0x209>
c00187fc:	80 fa 6c             	cmp    dl,0x6c
c00187ff:	0f 84 5d 02 00 00    	je     c0018a62 <vm8086FaultHandler(regs*)+0x333>
c0018805:	e9 01 05 00 00       	jmp    c0018d0b <vm8086FaultHandler(regs*)+0x5dc>
c001880a:	80 fa 6f             	cmp    dl,0x6f
c001880d:	0f 84 8b 03 00 00    	je     c0018b9e <vm8086FaultHandler(regs*)+0x46f>
c0018813:	0f 82 0f 03 00 00    	jb     c0018b28 <vm8086FaultHandler(regs*)+0x3f9>
c0018819:	80 fa 9c             	cmp    dl,0x9c
c001881c:	0f 84 23 01 00 00    	je     c0018945 <vm8086FaultHandler(regs*)+0x216>
c0018822:	e9 e4 04 00 00       	jmp    c0018d0b <vm8086FaultHandler(regs*)+0x5dc>
c0018827:	80 fa ec             	cmp    dl,0xec
c001882a:	0f 84 7f 04 00 00    	je     c0018caf <vm8086FaultHandler(regs*)+0x580>
c0018830:	77 7b                	ja     c00188ad <vm8086FaultHandler(regs*)+0x17e>
c0018832:	80 fa e4             	cmp    dl,0xe4
c0018835:	0f 84 fe 03 00 00    	je     c0018c39 <vm8086FaultHandler(regs*)+0x50a>
c001883b:	77 53                	ja     c0018890 <vm8086FaultHandler(regs*)+0x161>
c001883d:	80 fa cd             	cmp    dl,0xcd
c0018840:	0f 84 cd 01 00 00    	je     c0018a13 <vm8086FaultHandler(regs*)+0x2e4>
c0018846:	80 fa cf             	cmp    dl,0xcf
c0018849:	0f 85 bc 04 00 00    	jne    c0018d0b <vm8086FaultHandler(regs*)+0x5dc>
c001884f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018852:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018855:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0018859:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001885c:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018860:	81 ca 00 02 02 00    	or     edx,0x20200
c0018866:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018869:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001886d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018873:	66 c1 e8 09          	shr    ax,0x9
c0018877:	83 e0 01             	and    eax,0x1
c001887a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001887d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018880:	83 c0 06             	add    eax,0x6
c0018883:	25 ff ff 00 00       	and    eax,0xffff
c0018888:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001888b:	e9 77 04 00 00       	jmp    c0018d07 <vm8086FaultHandler(regs*)+0x5d8>
c0018890:	80 fa e6             	cmp    dl,0xe6
c0018893:	0f 84 ea 03 00 00    	je     c0018c83 <vm8086FaultHandler(regs*)+0x554>
c0018899:	0f 82 b6 03 00 00    	jb     c0018c55 <vm8086FaultHandler(regs*)+0x526>
c001889f:	80 fa e7             	cmp    dl,0xe7
c00188a2:	0f 84 f2 03 00 00    	je     c0018c9a <vm8086FaultHandler(regs*)+0x56b>
c00188a8:	e9 5e 04 00 00       	jmp    c0018d0b <vm8086FaultHandler(regs*)+0x5dc>
c00188ad:	80 fa ef             	cmp    dl,0xef
c00188b0:	0f 84 3c 04 00 00    	je     c0018cf2 <vm8086FaultHandler(regs*)+0x5c3>
c00188b6:	77 28                	ja     c00188e0 <vm8086FaultHandler(regs*)+0x1b1>
c00188b8:	80 fa ed             	cmp    dl,0xed
c00188bb:	0f 84 0a 04 00 00    	je     c0018ccb <vm8086FaultHandler(regs*)+0x59c>
c00188c1:	80 fa ee             	cmp    dl,0xee
c00188c4:	0f 85 41 04 00 00    	jne    c0018d0b <vm8086FaultHandler(regs*)+0x5dc>
c00188ca:	50                   	push   eax
c00188cb:	50                   	push   eax
c00188cc:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00188d0:	50                   	push   eax
c00188d1:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00188d5:	50                   	push   eax
c00188d6:	e8 00 fc ff ff       	call   c00184db <outbv(unsigned short, unsigned char)>
c00188db:	e9 0a 04 00 00       	jmp    c0018cea <vm8086FaultHandler(regs*)+0x5bb>
c00188e0:	80 fa fa             	cmp    dl,0xfa
c00188e3:	0f 84 5d 01 00 00    	je     c0018a46 <vm8086FaultHandler(regs*)+0x317>
c00188e9:	80 fa fb             	cmp    dl,0xfb
c00188ec:	0f 84 62 01 00 00    	je     c0018a54 <vm8086FaultHandler(regs*)+0x325>
c00188f2:	80 fa f3             	cmp    dl,0xf3
c00188f5:	0f 85 10 04 00 00    	jne    c0018d0b <vm8086FaultHandler(regs*)+0x5dc>
c00188fb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00188fe:	e9 c3 fe ff ff       	jmp    c00187c6 <vm8086FaultHandler(regs*)+0x97>
c0018903:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018906:	b1 02                	mov    cl,0x2
c0018908:	e9 b9 fe ff ff       	jmp    c00187c6 <vm8086FaultHandler(regs*)+0x97>
c001890d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018910:	b1 03                	mov    cl,0x3
c0018912:	e9 af fe ff ff       	jmp    c00187c6 <vm8086FaultHandler(regs*)+0x97>
c0018917:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001891a:	b1 04                	mov    cl,0x4
c001891c:	e9 a5 fe ff ff       	jmp    c00187c6 <vm8086FaultHandler(regs*)+0x97>
c0018921:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018924:	b1 05                	mov    cl,0x5
c0018926:	e9 9b fe ff ff       	jmp    c00187c6 <vm8086FaultHandler(regs*)+0x97>
c001892b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001892e:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0018933:	e9 8e fe ff ff       	jmp    c00187c6 <vm8086FaultHandler(regs*)+0x97>
c0018938:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001893b:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0018940:	e9 81 fe ff ff       	jmp    c00187c6 <vm8086FaultHandler(regs*)+0x97>
c0018945:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018948:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001894c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018951:	74 30                	je     c0018983 <vm8086FaultHandler(regs*)+0x254>
c0018953:	83 e9 04             	sub    ecx,0x4
c0018956:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001895c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018962:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018965:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018968:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001896e:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018972:	0f 84 8c 03 00 00    	je     c0018d04 <vm8086FaultHandler(regs*)+0x5d5>
c0018978:	80 ce 02             	or     dh,0x2
c001897b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001897e:	e9 81 03 00 00       	jmp    c0018d04 <vm8086FaultHandler(regs*)+0x5d5>
c0018983:	83 e9 02             	sub    ecx,0x2
c0018986:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001898c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001898f:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018993:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018999:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001899d:	74 05                	je     c00189a4 <vm8086FaultHandler(regs*)+0x275>
c001899f:	80 ce 02             	or     dh,0x2
c00189a2:	eb 03                	jmp    c00189a7 <vm8086FaultHandler(regs*)+0x278>
c00189a4:	80 e6 fd             	and    dh,0xfd
c00189a7:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00189ab:	e9 54 03 00 00       	jmp    c0018d04 <vm8086FaultHandler(regs*)+0x5d5>
c00189b0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00189b5:	74 2a                	je     c00189e1 <vm8086FaultHandler(regs*)+0x2b2>
c00189b7:	8b 10                	mov    edx,DWORD PTR [eax]
c00189b9:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00189bf:	81 ca 00 02 02 00    	or     edx,0x20200
c00189c5:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00189c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00189ca:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00189d0:	c1 e8 09             	shr    eax,0x9
c00189d3:	83 e0 01             	and    eax,0x1
c00189d6:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00189d9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00189dc:	83 c0 04             	add    eax,0x4
c00189df:	eb 25                	jmp    c0018a06 <vm8086FaultHandler(regs*)+0x2d7>
c00189e1:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00189e4:	81 ca 00 02 02 00    	or     edx,0x20200
c00189ea:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00189ed:	66 8b 00             	mov    ax,WORD PTR [eax]
c00189f0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00189f6:	66 c1 e8 09          	shr    ax,0x9
c00189fa:	83 e0 01             	and    eax,0x1
c00189fd:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018a00:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018a03:	83 c0 02             	add    eax,0x2
c0018a06:	25 ff ff 00 00       	and    eax,0xffff
c0018a0b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018a0e:	e9 f1 02 00 00       	jmp    c0018d04 <vm8086FaultHandler(regs*)+0x5d5>
c0018a13:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018a17:	3c ff                	cmp    al,0xff
c0018a19:	75 10                	jne    c0018a2b <vm8086FaultHandler(regs*)+0x2fc>
c0018a1b:	83 ec 0c             	sub    esp,0xc
c0018a1e:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0018a21:	e8 10 65 ff ff       	call   c000ef36 <terminateTask(int)>
c0018a26:	e9 c2 02 00 00       	jmp    c0018ced <vm8086FaultHandler(regs*)+0x5be>
c0018a2b:	83 ec 0c             	sub    esp,0xc
c0018a2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018a32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018a36:	57                   	push   edi
c0018a37:	50                   	push   eax
c0018a38:	53                   	push   ebx
c0018a39:	e8 f3 fb ff ff       	call   c0018631 <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018a3e:	83 c4 20             	add    esp,0x20
c0018a41:	e9 c1 02 00 00       	jmp    c0018d07 <vm8086FaultHandler(regs*)+0x5d8>
c0018a46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a4b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018a4f:	e9 b0 02 00 00       	jmp    c0018d04 <vm8086FaultHandler(regs*)+0x5d5>
c0018a54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a59:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018a5d:	e9 a2 02 00 00       	jmp    c0018d04 <vm8086FaultHandler(regs*)+0x5d5>
c0018a62:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018a67:	74 0d                	je     c0018a76 <vm8086FaultHandler(regs*)+0x347>
c0018a69:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0018a70:	0f 87 e9 02 00 00    	ja     c0018d5f <vm8086FaultHandler(regs*)+0x630>
c0018a76:	83 ec 0c             	sub    esp,0xc
c0018a79:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0018a7c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018a80:	50                   	push   eax
c0018a81:	e8 4f fa ff ff       	call   c00184d5 <inbv(unsigned short)>
c0018a86:	83 c4 0c             	add    esp,0xc
c0018a89:	0f b6 c0             	movzx  eax,al
c0018a8c:	0f b7 c9             	movzx  ecx,cx
c0018a8f:	50                   	push   eax
c0018a90:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0018a94:	50                   	push   eax
c0018a95:	51                   	push   ecx
c0018a96:	e8 54 fc ff ff       	call   c00186ef <writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018a9b:	83 c4 10             	add    esp,0x10
c0018a9e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018aa1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018aa5:	74 03                	je     c0018aaa <vm8086FaultHandler(regs*)+0x37b>
c0018aa7:	48                   	dec    eax
c0018aa8:	eb 01                	jmp    c0018aab <vm8086FaultHandler(regs*)+0x37c>
c0018aaa:	40                   	inc    eax
c0018aab:	0f b7 c0             	movzx  eax,ax
c0018aae:	eb 70                	jmp    c0018b20 <vm8086FaultHandler(regs*)+0x3f1>
c0018ab0:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018ab3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0018ab6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018abb:	74 0c                	je     c0018ac9 <vm8086FaultHandler(regs*)+0x39a>
c0018abd:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018ac3:	0f 87 96 02 00 00    	ja     c0018d5f <vm8086FaultHandler(regs*)+0x630>
c0018ac9:	0f b7 c9             	movzx  ecx,cx
c0018acc:	0f b7 f6             	movzx  esi,si
c0018acf:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018ad2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018ad7:	74 20                	je     c0018af9 <vm8086FaultHandler(regs*)+0x3ca>
c0018ad9:	ed                   	in     eax,dx
c0018ada:	55                   	push   ebp
c0018adb:	50                   	push   eax
c0018adc:	51                   	push   ecx
c0018add:	56                   	push   esi
c0018ade:	e8 37 fc ff ff       	call   c001871a <writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018ae3:	83 c4 10             	add    esp,0x10
c0018ae6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018ae9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018aed:	74 05                	je     c0018af4 <vm8086FaultHandler(regs*)+0x3c5>
c0018aef:	83 e8 04             	sub    eax,0x4
c0018af2:	eb 27                	jmp    c0018b1b <vm8086FaultHandler(regs*)+0x3ec>
c0018af4:	83 c0 04             	add    eax,0x4
c0018af7:	eb 22                	jmp    c0018b1b <vm8086FaultHandler(regs*)+0x3ec>
c0018af9:	66 ed                	in     ax,dx
c0018afb:	0f b7 c0             	movzx  eax,ax
c0018afe:	57                   	push   edi
c0018aff:	50                   	push   eax
c0018b00:	51                   	push   ecx
c0018b01:	56                   	push   esi
c0018b02:	e8 fd fb ff ff       	call   c0018704 <writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018b07:	83 c4 10             	add    esp,0x10
c0018b0a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018b0d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018b11:	74 05                	je     c0018b18 <vm8086FaultHandler(regs*)+0x3e9>
c0018b13:	83 e8 02             	sub    eax,0x2
c0018b16:	eb 03                	jmp    c0018b1b <vm8086FaultHandler(regs*)+0x3ec>
c0018b18:	83 c0 02             	add    eax,0x2
c0018b1b:	25 ff ff 00 00       	and    eax,0xffff
c0018b20:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018b23:	e9 dc 01 00 00       	jmp    c0018d04 <vm8086FaultHandler(regs*)+0x5d5>
c0018b28:	49                   	dec    ecx
c0018b29:	80 f9 05             	cmp    cl,0x5
c0018b2c:	77 24                	ja     c0018b52 <vm8086FaultHandler(regs*)+0x423>
c0018b2e:	0f b6 c9             	movzx  ecx,cl
c0018b31:	ff 24 8d 1c a4 03 c0 	jmp    DWORD PTR [ecx*4-0x3ffc5be4]
c0018b38:	0f b7 f5             	movzx  esi,bp
c0018b3b:	eb 15                	jmp    c0018b52 <vm8086FaultHandler(regs*)+0x423>
c0018b3d:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0018b41:	eb 0f                	jmp    c0018b52 <vm8086FaultHandler(regs*)+0x423>
c0018b43:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0018b47:	eb 09                	jmp    c0018b52 <vm8086FaultHandler(regs*)+0x423>
c0018b49:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0018b4d:	eb 03                	jmp    c0018b52 <vm8086FaultHandler(regs*)+0x423>
c0018b4f:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0018b52:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018b55:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018b5a:	74 0b                	je     c0018b67 <vm8086FaultHandler(regs*)+0x438>
c0018b5c:	3d ff ff 00 00       	cmp    eax,0xffff
c0018b61:	0f 87 f8 01 00 00    	ja     c0018d5f <vm8086FaultHandler(regs*)+0x630>
c0018b67:	0f b7 c0             	movzx  eax,ax
c0018b6a:	52                   	push   edx
c0018b6b:	52                   	push   edx
c0018b6c:	50                   	push   eax
c0018b6d:	56                   	push   esi
c0018b6e:	e8 48 fb ff ff       	call   c00186bb <readByteFromReal(unsigned short, unsigned short)>
c0018b73:	59                   	pop    ecx
c0018b74:	0f b6 c0             	movzx  eax,al
c0018b77:	5e                   	pop    esi
c0018b78:	50                   	push   eax
c0018b79:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018b7d:	50                   	push   eax
c0018b7e:	e8 58 f9 ff ff       	call   c00184db <outbv(unsigned short, unsigned char)>
c0018b83:	83 c4 10             	add    esp,0x10
c0018b86:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018b89:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018b8d:	74 03                	je     c0018b92 <vm8086FaultHandler(regs*)+0x463>
c0018b8f:	48                   	dec    eax
c0018b90:	eb 01                	jmp    c0018b93 <vm8086FaultHandler(regs*)+0x464>
c0018b92:	40                   	inc    eax
c0018b93:	0f b7 c0             	movzx  eax,ax
c0018b96:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018b99:	e9 66 01 00 00       	jmp    c0018d04 <vm8086FaultHandler(regs*)+0x5d5>
c0018b9e:	49                   	dec    ecx
c0018b9f:	80 f9 05             	cmp    cl,0x5
c0018ba2:	77 1f                	ja     c0018bc3 <vm8086FaultHandler(regs*)+0x494>
c0018ba4:	0f b6 c9             	movzx  ecx,cl
c0018ba7:	ff 24 8d 34 a4 03 c0 	jmp    DWORD PTR [ecx*4-0x3ffc5bcc]
c0018bae:	89 ee                	mov    esi,ebp
c0018bb0:	eb 11                	jmp    c0018bc3 <vm8086FaultHandler(regs*)+0x494>
c0018bb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0018bb5:	eb 0c                	jmp    c0018bc3 <vm8086FaultHandler(regs*)+0x494>
c0018bb7:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018bba:	eb 07                	jmp    c0018bc3 <vm8086FaultHandler(regs*)+0x494>
c0018bbc:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0018bbf:	eb 02                	jmp    c0018bc3 <vm8086FaultHandler(regs*)+0x494>
c0018bc1:	8b 33                	mov    esi,DWORD PTR [ebx]
c0018bc3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0018bc6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018bcb:	74 0c                	je     c0018bd9 <vm8086FaultHandler(regs*)+0x4aa>
c0018bcd:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018bd3:	0f 87 86 01 00 00    	ja     c0018d5f <vm8086FaultHandler(regs*)+0x630>
c0018bd9:	0f b7 d6             	movzx  edx,si
c0018bdc:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0018bdf:	0f b7 c1             	movzx  eax,cx
c0018be2:	81 e7 00 04 00 00    	and    edi,0x400
c0018be8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0018beb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018bf0:	74 1d                	je     c0018c0f <vm8086FaultHandler(regs*)+0x4e0>
c0018bf2:	55                   	push   ebp
c0018bf3:	55                   	push   ebp
c0018bf4:	50                   	push   eax
c0018bf5:	52                   	push   edx
c0018bf6:	e8 e3 fa ff ff       	call   c00186de <readDwordFromReal(unsigned short, unsigned short)>
c0018bfb:	83 c4 10             	add    esp,0x10
c0018bfe:	89 f2                	mov    edx,esi
c0018c00:	ef                   	out    dx,eax
c0018c01:	85 ff                	test   edi,edi
c0018c03:	74 05                	je     c0018c0a <vm8086FaultHandler(regs*)+0x4db>
c0018c05:	83 e9 04             	sub    ecx,0x4
c0018c08:	eb 21                	jmp    c0018c2b <vm8086FaultHandler(regs*)+0x4fc>
c0018c0a:	83 c1 04             	add    ecx,0x4
c0018c0d:	eb 1c                	jmp    c0018c2b <vm8086FaultHandler(regs*)+0x4fc>
c0018c0f:	55                   	push   ebp
c0018c10:	55                   	push   ebp
c0018c11:	50                   	push   eax
c0018c12:	52                   	push   edx
c0018c13:	e8 b4 fa ff ff       	call   c00186cc <readWordFromReal(unsigned short, unsigned short)>
c0018c18:	83 c4 10             	add    esp,0x10
c0018c1b:	89 f2                	mov    edx,esi
c0018c1d:	66 ef                	out    dx,ax
c0018c1f:	85 ff                	test   edi,edi
c0018c21:	74 05                	je     c0018c28 <vm8086FaultHandler(regs*)+0x4f9>
c0018c23:	83 e9 02             	sub    ecx,0x2
c0018c26:	eb 03                	jmp    c0018c2b <vm8086FaultHandler(regs*)+0x4fc>
c0018c28:	83 c1 02             	add    ecx,0x2
c0018c2b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018c31:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0018c34:	e9 cb 00 00 00       	jmp    c0018d04 <vm8086FaultHandler(regs*)+0x5d5>
c0018c39:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018c40:	83 ec 0c             	sub    esp,0xc
c0018c43:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018c47:	50                   	push   eax
c0018c48:	e8 88 f8 ff ff       	call   c00184d5 <inbv(unsigned short)>
c0018c4d:	0f b6 c0             	movzx  eax,al
c0018c50:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018c53:	eb 3f                	jmp    c0018c94 <vm8086FaultHandler(regs*)+0x565>
c0018c55:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018c5a:	74 07                	je     c0018c63 <vm8086FaultHandler(regs*)+0x534>
c0018c5c:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018c60:	ed                   	in     eax,dx
c0018c61:	eb 14                	jmp    c0018c77 <vm8086FaultHandler(regs*)+0x548>
c0018c63:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0018c66:	66 31 c9             	xor    cx,cx
c0018c69:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0018c6c:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018c70:	66 ed                	in     ax,dx
c0018c72:	0f b7 c0             	movzx  eax,ax
c0018c75:	09 c8                	or     eax,ecx
c0018c77:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018c7a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018c7e:	e9 84 00 00 00       	jmp    c0018d07 <vm8086FaultHandler(regs*)+0x5d8>
c0018c83:	52                   	push   edx
c0018c84:	52                   	push   edx
c0018c85:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018c89:	50                   	push   eax
c0018c8a:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018c8e:	50                   	push   eax
c0018c8f:	e8 47 f8 ff ff       	call   c00184db <outbv(unsigned short, unsigned char)>
c0018c94:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018c98:	eb 53                	jmp    c0018ced <vm8086FaultHandler(regs*)+0x5be>
c0018c9a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018c9d:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018ca1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018ca6:	74 03                	je     c0018cab <vm8086FaultHandler(regs*)+0x57c>
c0018ca8:	ef                   	out    dx,eax
c0018ca9:	eb cf                	jmp    c0018c7a <vm8086FaultHandler(regs*)+0x54b>
c0018cab:	66 ef                	out    dx,ax
c0018cad:	eb cb                	jmp    c0018c7a <vm8086FaultHandler(regs*)+0x54b>
c0018caf:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018cb6:	83 ec 0c             	sub    esp,0xc
c0018cb9:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018cbd:	50                   	push   eax
c0018cbe:	e8 12 f8 ff ff       	call   c00184d5 <inbv(unsigned short)>
c0018cc3:	0f b6 c0             	movzx  eax,al
c0018cc6:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018cc9:	eb 1f                	jmp    c0018cea <vm8086FaultHandler(regs*)+0x5bb>
c0018ccb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018cce:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018cd3:	74 03                	je     c0018cd8 <vm8086FaultHandler(regs*)+0x5a9>
c0018cd5:	ed                   	in     eax,dx
c0018cd6:	eb 0d                	jmp    c0018ce5 <vm8086FaultHandler(regs*)+0x5b6>
c0018cd8:	66 ed                	in     ax,dx
c0018cda:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018cdd:	0f b7 c0             	movzx  eax,ax
c0018ce0:	66 31 d2             	xor    dx,dx
c0018ce3:	09 d0                	or     eax,edx
c0018ce5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018ce8:	eb 1a                	jmp    c0018d04 <vm8086FaultHandler(regs*)+0x5d5>
c0018cea:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018ced:	83 c4 10             	add    esp,0x10
c0018cf0:	eb 15                	jmp    c0018d07 <vm8086FaultHandler(regs*)+0x5d8>
c0018cf2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018cf5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018cf8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018cfd:	74 03                	je     c0018d02 <vm8086FaultHandler(regs*)+0x5d3>
c0018cff:	ef                   	out    dx,eax
c0018d00:	eb 02                	jmp    c0018d04 <vm8086FaultHandler(regs*)+0x5d5>
c0018d02:	66 ef                	out    dx,ax
c0018d04:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018d07:	b0 01                	mov    al,0x1
c0018d09:	eb 56                	jmp    c0018d61 <vm8086FaultHandler(regs*)+0x632>
c0018d0b:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0018d0f:	50                   	push   eax
c0018d10:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0018d14:	50                   	push   eax
c0018d15:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0018d19:	50                   	push   eax
c0018d1a:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0018d1e:	50                   	push   eax
c0018d1f:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018d23:	50                   	push   eax
c0018d24:	52                   	push   edx
c0018d25:	52                   	push   edx
c0018d26:	68 ef a3 03 c0       	push   0xc003a3ef
c0018d2b:	e8 64 41 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0018d30:	83 c4 20             	add    esp,0x20
c0018d33:	83 ec 0c             	sub    esp,0xc
c0018d36:	6a 60                	push   0x60
c0018d38:	e8 98 f7 ff ff       	call   c00184d5 <inbv(unsigned short)>
c0018d3d:	83 c4 10             	add    esp,0x10
c0018d40:	3c 1c                	cmp    al,0x1c
c0018d42:	74 04                	je     c0018d48 <vm8086FaultHandler(regs*)+0x619>
c0018d44:	3c 5a                	cmp    al,0x5a
c0018d46:	75 eb                	jne    c0018d33 <vm8086FaultHandler(regs*)+0x604>
c0018d48:	3c 5a                	cmp    al,0x5a
c0018d4a:	74 04                	je     c0018d50 <vm8086FaultHandler(regs*)+0x621>
c0018d4c:	3c 1c                	cmp    al,0x1c
c0018d4e:	75 0f                	jne    c0018d5f <vm8086FaultHandler(regs*)+0x630>
c0018d50:	83 ec 0c             	sub    esp,0xc
c0018d53:	6a 60                	push   0x60
c0018d55:	e8 7b f7 ff ff       	call   c00184d5 <inbv(unsigned short)>
c0018d5a:	83 c4 10             	add    esp,0x10
c0018d5d:	eb e9                	jmp    c0018d48 <vm8086FaultHandler(regs*)+0x619>
c0018d5f:	31 c0                	xor    eax,eax
c0018d61:	83 c4 1c             	add    esp,0x1c
c0018d64:	5b                   	pop    ebx
c0018d65:	5e                   	pop    esi
c0018d66:	5f                   	pop    edi
c0018d67:	5d                   	pop    ebp
c0018d68:	c3                   	ret    
c0018d69:	90                   	nop

c0018d6a <FAT::getName()>:
c0018d6a:	b8 4c a4 03 c0       	mov    eax,0xc003a44c
c0018d6f:	c3                   	ret    

c0018d70 <FAT::tell(void*, unsigned long long*)>:
c0018d70:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018d75:	75 06                	jne    c0018d7d <FAT::tell(void*, unsigned long long*)+0xd>
c0018d77:	b8 04 00 00 00       	mov    eax,0x4
c0018d7c:	c3                   	ret    
c0018d7d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018d82:	75 06                	jne    c0018d8a <FAT::tell(void*, unsigned long long*)+0x1a>
c0018d84:	b8 04 00 00 00       	mov    eax,0x4
c0018d89:	c3                   	ret    
c0018d8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d8e:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0018d91:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018d94:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018d98:	89 01                	mov    DWORD PTR [ecx],eax
c0018d9a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018d9d:	b8 00 00 00 00       	mov    eax,0x0
c0018da2:	c3                   	ret    
c0018da3:	90                   	nop

c0018da4 <FAT::stat(void*, unsigned long long*)>:
c0018da4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018da9:	75 06                	jne    c0018db1 <FAT::stat(void*, unsigned long long*)+0xd>
c0018dab:	b8 04 00 00 00       	mov    eax,0x4
c0018db0:	c3                   	ret    
c0018db1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018db6:	75 06                	jne    c0018dbe <FAT::stat(void*, unsigned long long*)+0x1a>
c0018db8:	b8 04 00 00 00       	mov    eax,0x4
c0018dbd:	c3                   	ret    
c0018dbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018dc2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018dc5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018dc8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018dcc:	89 01                	mov    DWORD PTR [ecx],eax
c0018dce:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018dd1:	b8 00 00 00 00       	mov    eax,0x0
c0018dd6:	c3                   	ret    
c0018dd7:	90                   	nop

c0018dd8 <FAT::exists(char const*)>:
c0018dd8:	b0 00                	mov    al,0x0
c0018dda:	c3                   	ret    
c0018ddb:	90                   	nop

c0018ddc <FAT::~FAT()>:
c0018ddc:	83 ec 0c             	sub    esp,0xc
c0018ddf:	ba d0 a4 03 c0       	mov    edx,0xc003a4d0
c0018de4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018de8:	89 10                	mov    DWORD PTR [eax],edx
c0018dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dee:	83 ec 0c             	sub    esp,0xc
c0018df1:	50                   	push   eax
c0018df2:	e8 75 98 ff ff       	call   c001266c <Filesystem::~Filesystem()>
c0018df7:	83 c4 10             	add    esp,0x10
c0018dfa:	90                   	nop
c0018dfb:	83 c4 0c             	add    esp,0xc
c0018dfe:	c3                   	ret    
c0018dff:	90                   	nop

c0018e00 <FAT::~FAT()>:
c0018e00:	83 ec 0c             	sub    esp,0xc
c0018e03:	83 ec 0c             	sub    esp,0xc
c0018e06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e0a:	e8 cd ff ff ff       	call   c0018ddc <FAT::~FAT()>
c0018e0f:	83 c4 10             	add    esp,0x10
c0018e12:	83 ec 08             	sub    esp,0x8
c0018e15:	6a 08                	push   0x8
c0018e17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e1b:	e8 33 96 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c0018e20:	83 c4 10             	add    esp,0x10
c0018e23:	83 c4 0c             	add    esp,0xc
c0018e26:	c3                   	ret    
c0018e27:	90                   	nop

c0018e28 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018e28:	83 ec 1c             	sub    esp,0x1c
c0018e2b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018e32:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018e37:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e3b:	8b 04 85 a0 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3860]
c0018e42:	83 f8 ff             	cmp    eax,0xffffffff
c0018e45:	75 34                	jne    c0018e7b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0018e47:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018e4b:	88 c2                	mov    dl,al
c0018e4d:	a1 80 c7 03 c0       	mov    eax,ds:0xc003c780
c0018e52:	01 d0                	add    eax,edx
c0018e54:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018e58:	8b 15 80 c7 03 c0    	mov    edx,DWORD PTR ds:0xc003c780
c0018e5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e62:	89 14 85 a0 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3860],edx
c0018e69:	a1 80 c7 03 c0       	mov    eax,ds:0xc003c780
c0018e6e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018e72:	89 14 85 20 c8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc37e0],edx
c0018e79:	eb 17                	jmp    c0018e92 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0018e7b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018e7f:	88 c2                	mov    dl,al
c0018e81:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e85:	8b 04 85 a0 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3860]
c0018e8c:	01 d0                	add    eax,edx
c0018e8e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018e92:	83 ec 04             	sub    esp,0x4
c0018e95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018e99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018e9d:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018ea1:	50                   	push   eax
c0018ea2:	e8 db de fe ff       	call   c0006d82 <f_getlabel>
c0018ea7:	83 c4 10             	add    esp,0x10
c0018eaa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018eae:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018eb3:	75 07                	jne    c0018ebc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0018eb5:	b8 00 00 00 00       	mov    eax,0x0
c0018eba:	eb 05                	jmp    c0018ec1 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0018ebc:	b8 01 00 00 00       	mov    eax,0x1
c0018ec1:	83 c4 1c             	add    esp,0x1c
c0018ec4:	c3                   	ret    
c0018ec5:	90                   	nop

c0018ec6 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018ec6:	57                   	push   edi
c0018ec7:	83 ec 58             	sub    esp,0x58
c0018eca:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018ed2:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018ed6:	b9 0f 00 00 00       	mov    ecx,0xf
c0018edb:	b8 00 00 00 00       	mov    eax,0x0
c0018ee0:	fc                   	cld    
c0018ee1:	89 d7                	mov    edi,edx
c0018ee3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018ee5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018ee9:	8b 04 85 a0 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3860]
c0018ef0:	83 f8 ff             	cmp    eax,0xffffffff
c0018ef3:	75 34                	jne    c0018f29 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0018ef5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018ef9:	88 c2                	mov    dl,al
c0018efb:	a1 80 c7 03 c0       	mov    eax,ds:0xc003c780
c0018f00:	01 d0                	add    eax,edx
c0018f02:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018f06:	8b 15 80 c7 03 c0    	mov    edx,DWORD PTR ds:0xc003c780
c0018f0c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018f10:	89 14 85 a0 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3860],edx
c0018f17:	a1 80 c7 03 c0       	mov    eax,ds:0xc003c780
c0018f1c:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018f20:	89 14 85 20 c8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc37e0],edx
c0018f27:	eb 17                	jmp    c0018f40 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0018f29:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018f2d:	88 c2                	mov    dl,al
c0018f2f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018f33:	8b 04 85 a0 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3860]
c0018f3a:	01 d0                	add    eax,edx
c0018f3c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018f40:	83 ec 08             	sub    esp,0x8
c0018f43:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018f47:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f4b:	50                   	push   eax
c0018f4c:	e8 f0 79 fe ff       	call   c0000941 <strcat>
c0018f51:	83 c4 10             	add    esp,0x10
c0018f54:	83 ec 0c             	sub    esp,0xc
c0018f57:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f5b:	50                   	push   eax
c0018f5c:	e8 0f e0 fe ff       	call   c0006f70 <f_setlabel>
c0018f61:	83 c4 10             	add    esp,0x10
c0018f64:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018f68:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018f6d:	75 07                	jne    c0018f76 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0018f6f:	b8 00 00 00 00       	mov    eax,0x0
c0018f74:	eb 05                	jmp    c0018f7b <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0018f76:	b8 01 00 00 00       	mov    eax,0x1
c0018f7b:	83 c4 58             	add    esp,0x58
c0018f7e:	5f                   	pop    edi
c0018f7f:	c3                   	ret    

c0018f80 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018f80:	83 ec 2c             	sub    esp,0x2c
c0018f83:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018f8b:	83 ec 08             	sub    esp,0x8
c0018f8e:	68 70 a4 03 c0       	push   0xc003a470
c0018f93:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018f97:	e8 de 78 fe ff       	call   c000087a <strcmp>
c0018f9c:	83 c4 10             	add    esp,0x10
c0018f9f:	85 c0                	test   eax,eax
c0018fa1:	0f 94 c0             	sete   al
c0018fa4:	84 c0                	test   al,al
c0018fa6:	74 0d                	je     c0018fb5 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0018fa8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018fb0:	e9 a6 00 00 00       	jmp    c001905b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018fb5:	83 ec 08             	sub    esp,0x8
c0018fb8:	68 62 a4 03 c0       	push   0xc003a462
c0018fbd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018fc1:	e8 b4 78 fe ff       	call   c000087a <strcmp>
c0018fc6:	83 c4 10             	add    esp,0x10
c0018fc9:	85 c0                	test   eax,eax
c0018fcb:	0f 94 c0             	sete   al
c0018fce:	84 c0                	test   al,al
c0018fd0:	74 0a                	je     c0018fdc <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0018fd2:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018fda:	eb 7f                	jmp    c001905b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018fdc:	83 ec 08             	sub    esp,0x8
c0018fdf:	68 68 a4 03 c0       	push   0xc003a468
c0018fe4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018fe8:	e8 8d 78 fe ff       	call   c000087a <strcmp>
c0018fed:	83 c4 10             	add    esp,0x10
c0018ff0:	85 c0                	test   eax,eax
c0018ff2:	0f 94 c0             	sete   al
c0018ff5:	84 c0                	test   al,al
c0018ff7:	74 0a                	je     c0019003 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0018ff9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019001:	eb 58                	jmp    c001905b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019003:	83 ec 08             	sub    esp,0x8
c0019006:	68 6c f7 01 c0       	push   0xc001f76c
c001900b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001900f:	e8 66 78 fe ff       	call   c000087a <strcmp>
c0019014:	83 c4 10             	add    esp,0x10
c0019017:	85 c0                	test   eax,eax
c0019019:	0f 94 c0             	sete   al
c001901c:	84 c0                	test   al,al
c001901e:	74 0a                	je     c001902a <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0019020:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019028:	eb 31                	jmp    c001905b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001902a:	83 ec 08             	sub    esp,0x8
c001902d:	68 6e a4 03 c0       	push   0xc003a46e
c0019032:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019036:	e8 3f 78 fe ff       	call   c000087a <strcmp>
c001903b:	83 c4 10             	add    esp,0x10
c001903e:	85 c0                	test   eax,eax
c0019040:	0f 94 c0             	sete   al
c0019043:	84 c0                	test   al,al
c0019045:	74 0a                	je     c0019051 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0019047:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001904f:	eb 0a                	jmp    c001905b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019051:	b8 08 00 00 00       	mov    eax,0x8
c0019056:	e9 04 01 00 00       	jmp    c001915f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001905b:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019062:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019067:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001906b:	8b 04 85 a0 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3860]
c0019072:	83 f8 ff             	cmp    eax,0xffffffff
c0019075:	75 34                	jne    c00190ab <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0019077:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001907b:	88 c2                	mov    dl,al
c001907d:	a1 80 c7 03 c0       	mov    eax,ds:0xc003c780
c0019082:	01 d0                	add    eax,edx
c0019084:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019088:	8b 15 80 c7 03 c0    	mov    edx,DWORD PTR ds:0xc003c780
c001908e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019092:	89 14 85 a0 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3860],edx
c0019099:	a1 80 c7 03 c0       	mov    eax,ds:0xc003c780
c001909e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00190a2:	89 14 85 20 c8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc37e0],edx
c00190a9:	eb 17                	jmp    c00190c2 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00190ab:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00190af:	88 c2                	mov    dl,al
c00190b1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00190b5:	8b 04 85 a0 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3860]
c00190bc:	01 d0                	add    eax,edx
c00190be:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00190c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00190c6:	88 04 24             	mov    BYTE PTR [esp],al
c00190c9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00190cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00190d1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00190d9:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00190de:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00190e6:	83 ec 0c             	sub    esp,0xc
c00190e9:	68 00 20 00 00       	push   0x2000
c00190ee:	e8 9c 43 ff ff       	call   c000d48f <malloc>
c00190f3:	83 c4 10             	add    esp,0x10
c00190f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00190fa:	68 00 20 00 00       	push   0x2000
c00190ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019103:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019107:	50                   	push   eax
c0019108:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001910c:	50                   	push   eax
c001910d:	e8 a9 e2 fe ff       	call   c00073bb <f_mkfs>
c0019112:	83 c4 10             	add    esp,0x10
c0019115:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019119:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001911e:	75 07                	jne    c0019127 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0019120:	b8 00 00 00 00       	mov    eax,0x0
c0019125:	eb 38                	jmp    c001915f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019127:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001912c:	75 17                	jne    c0019145 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001912e:	83 ec 0c             	sub    esp,0xc
c0019131:	68 a0 a4 03 c0       	push   0xc003a4a0
c0019136:	e8 59 3d ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001913b:	83 c4 10             	add    esp,0x10
c001913e:	b8 09 00 00 00       	mov    eax,0x9
c0019143:	eb 1a                	jmp    c001915f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019145:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019149:	83 ec 08             	sub    esp,0x8
c001914c:	50                   	push   eax
c001914d:	68 74 a4 03 c0       	push   0xc003a474
c0019152:	e8 3d 3d ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c0019157:	83 c4 10             	add    esp,0x10
c001915a:	b8 01 00 00 00       	mov    eax,0x1
c001915f:	83 c4 2c             	add    esp,0x2c
c0019162:	c3                   	ret    
c0019163:	90                   	nop

c0019164 <FAT::tryMount(LogicalDisk*, int)>:
c0019164:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001916a:	a1 80 c7 03 c0       	mov    eax,ds:0xc003c780
c001916f:	83 f8 14             	cmp    eax,0x14
c0019172:	75 17                	jne    c001918b <FAT::tryMount(LogicalDisk*, int)+0x27>
c0019174:	83 ec 0c             	sub    esp,0xc
c0019177:	68 86 a4 03 c0       	push   0xc003a486
c001917c:	e8 31 3e ff ff       	call   c000cfb2 <panic(char const*)>
c0019181:	83 c4 10             	add    esp,0x10
c0019184:	b0 00                	mov    al,0x0
c0019186:	e9 d7 01 00 00       	jmp    c0019362 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001918b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0019192:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019198:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001919e:	3d 00 02 00 00       	cmp    eax,0x200
c00191a3:	74 07                	je     c00191ac <FAT::tryMount(LogicalDisk*, int)+0x48>
c00191a5:	b0 00                	mov    al,0x0
c00191a7:	e9 b6 01 00 00       	jmp    c0019362 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00191ac:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00191b4:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00191bb:	8b 04 85 a0 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3860]
c00191c2:	83 f8 ff             	cmp    eax,0xffffffff
c00191c5:	74 07                	je     c00191ce <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00191c7:	b0 01                	mov    al,0x1
c00191c9:	e9 94 01 00 00       	jmp    c0019362 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00191ce:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00191d8:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00191e0:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00191e7:	88 c2                	mov    dl,al
c00191e9:	a1 80 c7 03 c0       	mov    eax,ds:0xc003c780
c00191ee:	01 d0                	add    eax,edx
c00191f0:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00191f7:	8b 15 80 c7 03 c0    	mov    edx,DWORD PTR ds:0xc003c780
c00191fd:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0019204:	89 14 85 a0 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3860],edx
c001920b:	a1 80 c7 03 c0       	mov    eax,ds:0xc003c780
c0019210:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0019217:	89 14 85 20 c8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc37e0],edx
c001921e:	83 ec 0c             	sub    esp,0xc
c0019221:	68 54 02 00 00       	push   0x254
c0019226:	e8 64 42 ff ff       	call   c000d48f <malloc>
c001922b:	83 c4 10             	add    esp,0x10
c001922e:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0019235:	83 ec 04             	sub    esp,0x4
c0019238:	6a 00                	push   0x0
c001923a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019241:	50                   	push   eax
c0019242:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019249:	e8 2b bd fe ff       	call   c0004f79 <f_mount>
c001924e:	83 c4 10             	add    esp,0x10
c0019251:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019258:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0019260:	74 19                	je     c001927b <FAT::tryMount(LogicalDisk*, int)+0x117>
c0019262:	83 ec 0c             	sub    esp,0xc
c0019265:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001926c:	e8 3e 42 ff ff       	call   c000d4af <rfree>
c0019271:	83 c4 10             	add    esp,0x10
c0019274:	b0 00                	mov    al,0x0
c0019276:	e9 e7 00 00 00       	jmp    c0019362 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001927b:	83 ec 04             	sub    esp,0x4
c001927e:	68 00 01 00 00       	push   0x100
c0019283:	6a 00                	push   0x0
c0019285:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001928c:	50                   	push   eax
c001928d:	e8 46 74 fe ff       	call   c00006d8 <memset>
c0019292:	83 c4 10             	add    esp,0x10
c0019295:	83 ec 08             	sub    esp,0x8
c0019298:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001929f:	50                   	push   eax
c00192a0:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00192a7:	50                   	push   eax
c00192a8:	e8 94 76 fe ff       	call   c0000941 <strcat>
c00192ad:	83 c4 10             	add    esp,0x10
c00192b0:	83 ec 08             	sub    esp,0x8
c00192b3:	68 94 a4 03 c0       	push   0xc003a494
c00192b8:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00192bf:	50                   	push   eax
c00192c0:	e8 7c 76 fe ff       	call   c0000941 <strcat>
c00192c5:	83 c4 10             	add    esp,0x10
c00192c8:	83 ec 04             	sub    esp,0x4
c00192cb:	6a 01                	push   0x1
c00192cd:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00192d4:	50                   	push   eax
c00192d5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00192d9:	50                   	push   eax
c00192da:	e8 fc bc fe ff       	call   c0004fdb <f_open>
c00192df:	83 c4 10             	add    esp,0x10
c00192e2:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00192e9:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00192f0:	85 c0                	test   eax,eax
c00192f2:	74 0a                	je     c00192fe <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00192f4:	78 2d                	js     c0019323 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00192f6:	83 e8 04             	sub    eax,0x4
c00192f9:	83 f8 01             	cmp    eax,0x1
c00192fc:	77 25                	ja     c0019323 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00192fe:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0019306:	83 ec 0c             	sub    esp,0xc
c0019309:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001930d:	50                   	push   eax
c001930e:	e8 1a c8 fe ff       	call   c0005b2d <f_close>
c0019313:	83 c4 10             	add    esp,0x10
c0019316:	90                   	nop
c0019317:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001931f:	74 3a                	je     c001935b <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0019321:	eb 2d                	jmp    c0019350 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0019323:	83 ec 0c             	sub    esp,0xc
c0019326:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001932d:	e8 7d 41 ff ff       	call   c000d4af <rfree>
c0019332:	83 c4 10             	add    esp,0x10
c0019335:	83 ec 04             	sub    esp,0x4
c0019338:	6a 00                	push   0x0
c001933a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019341:	50                   	push   eax
c0019342:	6a 00                	push   0x0
c0019344:	e8 30 bc fe ff       	call   c0004f79 <f_mount>
c0019349:	83 c4 10             	add    esp,0x10
c001934c:	b0 00                	mov    al,0x0
c001934e:	eb 12                	jmp    c0019362 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019350:	a1 80 c7 03 c0       	mov    eax,ds:0xc003c780
c0019355:	40                   	inc    eax
c0019356:	a3 80 c7 03 c0       	mov    ds:0xc003c780,eax
c001935b:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0019362:	81 c4 6c 03 00 00    	add    esp,0x36c
c0019368:	c3                   	ret    
c0019369:	90                   	nop

c001936a <FAT::readDir(void*, unsigned long, void*, int*)>:
c001936a:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0019370:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0019378:	74 0a                	je     c0019384 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001937a:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0019382:	75 0a                	jne    c001938e <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0019384:	b8 04 00 00 00       	mov    eax,0x4
c0019389:	e9 dc 00 00 00       	jmp    c001946a <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c001938e:	83 ec 08             	sub    esp,0x8
c0019391:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019398:	50                   	push   eax
c0019399:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c00193a0:	e8 92 cd fe ff       	call   c0006137 <f_readdir>
c00193a5:	83 c4 10             	add    esp,0x10
c00193a8:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c00193af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00193b6:	83 ec 0c             	sub    esp,0xc
c00193b9:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00193c0:	83 c0 1a             	add    eax,0x1a
c00193c3:	50                   	push   eax
c00193c4:	e8 38 73 fe ff       	call   c0000701 <strlen>
c00193c9:	83 c4 10             	add    esp,0x10
c00193cc:	ba 00 00 00 00       	mov    edx,0x0
c00193d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00193d5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00193d9:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c00193e0:	0f b6 c0             	movzx  eax,al
c00193e3:	83 e0 10             	and    eax,0x10
c00193e6:	74 07                	je     c00193ef <FAT::readDir(void*, unsigned long, void*, int*)+0x85>
c00193e8:	b8 02 00 00 00       	mov    eax,0x2
c00193ed:	eb 05                	jmp    c00193f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x8a>
c00193ef:	b8 01 00 00 00       	mov    eax,0x1
c00193f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193f8:	83 ec 08             	sub    esp,0x8
c00193fb:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019402:	83 c0 1a             	add    eax,0x1a
c0019405:	50                   	push   eax
c0019406:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001940a:	83 c0 10             	add    eax,0x10
c001940d:	50                   	push   eax
c001940e:	e8 e1 73 fe ff       	call   c00007f4 <strcpy>
c0019413:	83 c4 10             	add    esp,0x10
c0019416:	83 ec 04             	sub    esp,0x4
c0019419:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0019420:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019424:	50                   	push   eax
c0019425:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001942c:	e8 30 72 fe ff       	call   c0000661 <memcpy>
c0019431:	83 c4 10             	add    esp,0x10
c0019434:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001943b:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019441:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0019448:	84 c0                	test   al,al
c001944a:	75 07                	jne    c0019453 <FAT::readDir(void*, unsigned long, void*, int*)+0xe9>
c001944c:	b8 07 00 00 00       	mov    eax,0x7
c0019451:	eb 17                	jmp    c001946a <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c0019453:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001945a:	85 c0                	test   eax,eax
c001945c:	75 07                	jne    c0019465 <FAT::readDir(void*, unsigned long, void*, int*)+0xfb>
c001945e:	b8 00 00 00 00       	mov    eax,0x0
c0019463:	eb 05                	jmp    c001946a <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c0019465:	b8 01 00 00 00       	mov    eax,0x1
c001946a:	81 c4 3c 02 00 00    	add    esp,0x23c
c0019470:	c3                   	ret    
c0019471:	90                   	nop

c0019472 <FAT::read(void*, unsigned long, void*, int*)>:
c0019472:	83 ec 1c             	sub    esp,0x1c
c0019475:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001947a:	74 07                	je     c0019483 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001947c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019481:	75 07                	jne    c001948a <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0019483:	b8 04 00 00 00       	mov    eax,0x4
c0019488:	eb 3d                	jmp    c00194c7 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001948a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001948e:	50                   	push   eax
c001948f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019493:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019497:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001949b:	e8 77 bf fe ff       	call   c0005417 <f_read>
c00194a0:	83 c4 10             	add    esp,0x10
c00194a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00194a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194ab:	89 c2                	mov    edx,eax
c00194ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00194b1:	89 10                	mov    DWORD PTR [eax],edx
c00194b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194b7:	85 c0                	test   eax,eax
c00194b9:	75 07                	jne    c00194c2 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00194bb:	b8 00 00 00 00       	mov    eax,0x0
c00194c0:	eb 05                	jmp    c00194c7 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00194c2:	b8 01 00 00 00       	mov    eax,0x1
c00194c7:	83 c4 1c             	add    esp,0x1c
c00194ca:	c3                   	ret    
c00194cb:	90                   	nop

c00194cc <FAT::write(void*, unsigned long, void*, int*)>:
c00194cc:	83 ec 1c             	sub    esp,0x1c
c00194cf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00194d4:	74 07                	je     c00194dd <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00194d6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00194db:	75 07                	jne    c00194e4 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00194dd:	b8 04 00 00 00       	mov    eax,0x4
c00194e2:	eb 3d                	jmp    c0019521 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00194e4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00194e8:	50                   	push   eax
c00194e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00194ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00194f1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194f5:	e8 9d c1 fe ff       	call   c0005697 <f_write>
c00194fa:	83 c4 10             	add    esp,0x10
c00194fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019501:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019505:	89 c2                	mov    edx,eax
c0019507:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001950b:	89 10                	mov    DWORD PTR [eax],edx
c001950d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019511:	85 c0                	test   eax,eax
c0019513:	75 07                	jne    c001951c <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0019515:	b8 00 00 00 00       	mov    eax,0x0
c001951a:	eb 05                	jmp    c0019521 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001951c:	b8 01 00 00 00       	mov    eax,0x1
c0019521:	83 c4 1c             	add    esp,0x1c
c0019524:	c3                   	ret    
c0019525:	90                   	nop

c0019526 <FAT::close(void*)>:
c0019526:	83 ec 1c             	sub    esp,0x1c
c0019529:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001952e:	75 07                	jne    c0019537 <FAT::close(void*)+0x11>
c0019530:	b8 04 00 00 00       	mov    eax,0x4
c0019535:	eb 36                	jmp    c001956d <FAT::close(void*)+0x47>
c0019537:	83 ec 0c             	sub    esp,0xc
c001953a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001953e:	e8 ea c5 fe ff       	call   c0005b2d <f_close>
c0019543:	83 c4 10             	add    esp,0x10
c0019546:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001954a:	83 ec 0c             	sub    esp,0xc
c001954d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019551:	e8 49 3f ff ff       	call   c000d49f <free>
c0019556:	83 c4 10             	add    esp,0x10
c0019559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001955d:	85 c0                	test   eax,eax
c001955f:	75 07                	jne    c0019568 <FAT::close(void*)+0x42>
c0019561:	b8 00 00 00 00       	mov    eax,0x0
c0019566:	eb 05                	jmp    c001956d <FAT::close(void*)+0x47>
c0019568:	b8 01 00 00 00       	mov    eax,0x1
c001956d:	83 c4 1c             	add    esp,0x1c
c0019570:	c3                   	ret    
c0019571:	90                   	nop

c0019572 <FAT::closeDir(void*)>:
c0019572:	83 ec 1c             	sub    esp,0x1c
c0019575:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001957a:	75 07                	jne    c0019583 <FAT::closeDir(void*)+0x11>
c001957c:	b8 04 00 00 00       	mov    eax,0x4
c0019581:	eb 36                	jmp    c00195b9 <FAT::closeDir(void*)+0x47>
c0019583:	83 ec 0c             	sub    esp,0xc
c0019586:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001958a:	e8 86 cb fe ff       	call   c0006115 <f_closedir>
c001958f:	83 c4 10             	add    esp,0x10
c0019592:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019596:	83 ec 0c             	sub    esp,0xc
c0019599:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001959d:	e8 fd 3e ff ff       	call   c000d49f <free>
c00195a2:	83 c4 10             	add    esp,0x10
c00195a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195a9:	85 c0                	test   eax,eax
c00195ab:	75 07                	jne    c00195b4 <FAT::closeDir(void*)+0x42>
c00195ad:	b8 00 00 00 00       	mov    eax,0x0
c00195b2:	eb 05                	jmp    c00195b9 <FAT::closeDir(void*)+0x47>
c00195b4:	b8 01 00 00 00       	mov    eax,0x1
c00195b9:	83 c4 1c             	add    esp,0x1c
c00195bc:	c3                   	ret    
c00195bd:	90                   	nop

c00195be <FAT::seek(void*, unsigned long long)>:
c00195be:	83 ec 2c             	sub    esp,0x2c
c00195c1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00195c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00195cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195d1:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00195d6:	75 07                	jne    c00195df <FAT::seek(void*, unsigned long long)+0x21>
c00195d8:	b8 04 00 00 00       	mov    eax,0x4
c00195dd:	eb 2f                	jmp    c001960e <FAT::seek(void*, unsigned long long)+0x50>
c00195df:	83 ec 04             	sub    esp,0x4
c00195e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00195e6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00195ea:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00195ee:	e8 69 c5 fe ff       	call   c0005b5c <f_lseek>
c00195f3:	83 c4 10             	add    esp,0x10
c00195f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00195fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00195fe:	85 c0                	test   eax,eax
c0019600:	75 07                	jne    c0019609 <FAT::seek(void*, unsigned long long)+0x4b>
c0019602:	b8 00 00 00 00       	mov    eax,0x0
c0019607:	eb 05                	jmp    c001960e <FAT::seek(void*, unsigned long long)+0x50>
c0019609:	b8 01 00 00 00       	mov    eax,0x1
c001960e:	83 c4 2c             	add    esp,0x2c
c0019611:	c3                   	ret    

c0019612 <fatWrapperReadDisk>:
c0019612:	83 ec 1c             	sub    esp,0x1c
c0019615:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019619:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001961d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019621:	89 04 24             	mov    DWORD PTR [esp],eax
c0019624:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019628:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001962c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019631:	8b 04 85 20 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3ce0]
c0019638:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001963c:	83 ec 0c             	sub    esp,0xc
c001963f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019643:	52                   	push   edx
c0019644:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019648:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001964c:	50                   	push   eax
c001964d:	e8 be bb ff ff       	call   c0015210 <LogicalDisk::read(unsigned long long, int, void*)>
c0019652:	83 c4 20             	add    esp,0x20
c0019655:	83 c4 1c             	add    esp,0x1c
c0019658:	c3                   	ret    

c0019659 <fatWrapperWriteDisk>:
c0019659:	83 ec 1c             	sub    esp,0x1c
c001965c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019660:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019664:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019668:	89 04 24             	mov    DWORD PTR [esp],eax
c001966b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001966f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019673:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019678:	8b 04 85 20 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3ce0]
c001967f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019683:	83 ec 0c             	sub    esp,0xc
c0019686:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001968a:	52                   	push   edx
c001968b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001968f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019693:	50                   	push   eax
c0019694:	e8 e3 bb ff ff       	call   c001527c <LogicalDisk::write(unsigned long long, int, void*)>
c0019699:	83 c4 20             	add    esp,0x20
c001969c:	83 c4 1c             	add    esp,0x1c
c001969f:	c3                   	ret    

c00196a0 <fatWrapperIoctl>:
c00196a0:	53                   	push   ebx
c00196a1:	83 ec 28             	sub    esp,0x28
c00196a4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00196a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00196ac:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00196b0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00196b4:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00196b9:	75 31                	jne    c00196ec <fatWrapperIoctl+0x4c>
c00196bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00196bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00196c3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00196c8:	8b 04 85 20 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3ce0]
c00196cf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00196d5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00196db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00196df:	66 89 02             	mov    WORD PTR [edx],ax
c00196e2:	b8 00 00 00 00       	mov    eax,0x0
c00196e7:	e9 b2 00 00 00       	jmp    c001979e <fatWrapperIoctl+0xfe>
c00196ec:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00196f1:	75 6a                	jne    c001975d <fatWrapperIoctl+0xbd>
c00196f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00196f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00196fb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019700:	8b 04 85 20 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3ce0]
c0019707:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001970d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019713:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019719:	89 c8                	mov    eax,ecx
c001971b:	89 da                	mov    edx,ebx
c001971d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019721:	c1 e0 0a             	shl    eax,0xa
c0019724:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019729:	8b 0c 8d 20 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3ce0]
c0019730:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019736:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001973c:	89 cb                	mov    ebx,ecx
c001973e:	c1 fb 1f             	sar    ebx,0x1f
c0019741:	53                   	push   ebx
c0019742:	51                   	push   ecx
c0019743:	52                   	push   edx
c0019744:	50                   	push   eax
c0019745:	e8 72 4f 00 00       	call   c001e6bc <__udivdi3>
c001974a:	83 c4 10             	add    esp,0x10
c001974d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019751:	89 01                	mov    DWORD PTR [ecx],eax
c0019753:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019756:	b8 00 00 00 00       	mov    eax,0x0
c001975b:	eb 41                	jmp    c001979e <fatWrapperIoctl+0xfe>
c001975d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0019762:	75 07                	jne    c001976b <fatWrapperIoctl+0xcb>
c0019764:	b8 00 00 00 00       	mov    eax,0x0
c0019769:	eb 33                	jmp    c001979e <fatWrapperIoctl+0xfe>
c001976b:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0019770:	75 19                	jne    c001978b <fatWrapperIoctl+0xeb>
c0019772:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019776:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001977a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001977e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019784:	b8 00 00 00 00       	mov    eax,0x0
c0019789:	eb 13                	jmp    c001979e <fatWrapperIoctl+0xfe>
c001978b:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0019790:	75 07                	jne    c0019799 <fatWrapperIoctl+0xf9>
c0019792:	b8 00 00 00 00       	mov    eax,0x0
c0019797:	eb 05                	jmp    c001979e <fatWrapperIoctl+0xfe>
c0019799:	b8 04 00 00 00       	mov    eax,0x4
c001979e:	83 c4 28             	add    esp,0x28
c00197a1:	5b                   	pop    ebx
c00197a2:	c3                   	ret    
c00197a3:	90                   	nop

c00197a4 <FAT::FAT()>:
c00197a4:	83 ec 1c             	sub    esp,0x1c
c00197a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197ab:	83 ec 0c             	sub    esp,0xc
c00197ae:	50                   	push   eax
c00197af:	e8 94 8e ff ff       	call   c0012648 <Filesystem::Filesystem()>
c00197b4:	83 c4 10             	add    esp,0x10
c00197b7:	ba d0 a4 03 c0       	mov    edx,0xc003a4d0
c00197bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197c0:	89 10                	mov    DWORD PTR [eax],edx
c00197c2:	c7 05 80 c7 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c780,0x0
c00197cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00197d4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00197d9:	7f 15                	jg     c00197f0 <FAT::FAT()+0x4c>
c00197db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00197df:	c7 04 85 a0 c7 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffc3860],0xffffffff
c00197ea:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00197ee:	eb e4                	jmp    c00197d4 <FAT::FAT()+0x30>
c00197f0:	90                   	nop
c00197f1:	83 c4 1c             	add    esp,0x1c
c00197f4:	c3                   	ret    
c00197f5:	90                   	nop

c00197f6 <FAT::fixFilepath(char*)>:
c00197f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197fa:	8a 00                	mov    al,BYTE PTR [eax]
c00197fc:	3c 40                	cmp    al,0x40
c00197fe:	7e 2c                	jle    c001982c <FAT::fixFilepath(char*)+0x36>
c0019800:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019804:	8a 00                	mov    al,BYTE PTR [eax]
c0019806:	83 e8 41             	sub    eax,0x41
c0019809:	88 c2                	mov    dl,al
c001980b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001980f:	88 10                	mov    BYTE PTR [eax],dl
c0019811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019815:	8a 00                	mov    al,BYTE PTR [eax]
c0019817:	0f be c0             	movsx  eax,al
c001981a:	8b 04 85 a0 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3860]
c0019821:	83 c0 30             	add    eax,0x30
c0019824:	88 c2                	mov    dl,al
c0019826:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001982a:	88 10                	mov    BYTE PTR [eax],dl
c001982c:	90                   	nop
c001982d:	c3                   	ret    

c001982e <FAT::open(char const*, void**, FileOpenMode)>:
c001982e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019834:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001983c:	74 0a                	je     c0019848 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001983e:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019846:	75 0a                	jne    c0019852 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0019848:	b8 04 00 00 00       	mov    eax,0x4
c001984d:	e9 fd 00 00 00       	jmp    c001994f <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0019852:	83 ec 08             	sub    esp,0x8
c0019855:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001985c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019860:	50                   	push   eax
c0019861:	e8 8e 6f fe ff       	call   c00007f4 <strcpy>
c0019866:	83 c4 10             	add    esp,0x10
c0019869:	83 ec 08             	sub    esp,0x8
c001986c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019870:	50                   	push   eax
c0019871:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019878:	e8 79 ff ff ff       	call   c00197f6 <FAT::fixFilepath(char*)>
c001987d:	83 c4 10             	add    esp,0x10
c0019880:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019888:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001988f:	83 e0 01             	and    eax,0x1
c0019892:	74 08                	je     c001989c <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0019894:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001989c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198a3:	83 e0 04             	and    eax,0x4
c00198a6:	74 10                	je     c00198b8 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00198a8:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00198b0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00198b8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198bf:	83 e0 02             	and    eax,0x2
c00198c2:	74 08                	je     c00198cc <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00198c4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00198cc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198d3:	83 e0 08             	and    eax,0x8
c00198d6:	74 08                	je     c00198e0 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00198d8:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00198e0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198e7:	83 e0 10             	and    eax,0x10
c00198ea:	74 08                	je     c00198f4 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00198ec:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00198f4:	83 ec 0c             	sub    esp,0xc
c00198f7:	68 50 02 00 00       	push   0x250
c00198fc:	e8 8e 3b ff ff       	call   c000d48f <malloc>
c0019901:	83 c4 10             	add    esp,0x10
c0019904:	89 c2                	mov    edx,eax
c0019906:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001990d:	89 10                	mov    DWORD PTR [eax],edx
c001990f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019917:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001991e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019920:	83 ec 04             	sub    esp,0x4
c0019923:	52                   	push   edx
c0019924:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019928:	52                   	push   edx
c0019929:	50                   	push   eax
c001992a:	e8 ac b6 fe ff       	call   c0004fdb <f_open>
c001992f:	83 c4 10             	add    esp,0x10
c0019932:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019939:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019941:	74 07                	je     c001994a <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0019943:	b8 01 00 00 00       	mov    eax,0x1
c0019948:	eb 05                	jmp    c001994f <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001994a:	b8 00 00 00 00       	mov    eax,0x0
c001994f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019955:	c3                   	ret    

c0019956 <FAT::openDir(char const*, void**)>:
c0019956:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001995c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019964:	74 0a                	je     c0019970 <FAT::openDir(char const*, void**)+0x1a>
c0019966:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001996e:	75 07                	jne    c0019977 <FAT::openDir(char const*, void**)+0x21>
c0019970:	b8 04 00 00 00       	mov    eax,0x4
c0019975:	eb 7d                	jmp    c00199f4 <FAT::openDir(char const*, void**)+0x9e>
c0019977:	83 ec 08             	sub    esp,0x8
c001997a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019981:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019985:	50                   	push   eax
c0019986:	e8 69 6e fe ff       	call   c00007f4 <strcpy>
c001998b:	83 c4 10             	add    esp,0x10
c001998e:	83 ec 08             	sub    esp,0x8
c0019991:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019995:	50                   	push   eax
c0019996:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001999d:	e8 54 fe ff ff       	call   c00197f6 <FAT::fixFilepath(char*)>
c00199a2:	83 c4 10             	add    esp,0x10
c00199a5:	83 ec 0c             	sub    esp,0xc
c00199a8:	6a 4c                	push   0x4c
c00199aa:	e8 e0 3a ff ff       	call   c000d48f <malloc>
c00199af:	83 c4 10             	add    esp,0x10
c00199b2:	89 c2                	mov    edx,eax
c00199b4:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00199bb:	89 10                	mov    DWORD PTR [eax],edx
c00199bd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00199c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00199c6:	83 ec 08             	sub    esp,0x8
c00199c9:	8d 54 24 14          	lea    edx,[esp+0x14]
c00199cd:	52                   	push   edx
c00199ce:	50                   	push   eax
c00199cf:	e8 3f c6 fe ff       	call   c0006013 <f_opendir>
c00199d4:	83 c4 10             	add    esp,0x10
c00199d7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00199de:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00199e6:	74 07                	je     c00199ef <FAT::openDir(char const*, void**)+0x99>
c00199e8:	b8 01 00 00 00       	mov    eax,0x1
c00199ed:	eb 05                	jmp    c00199f4 <FAT::openDir(char const*, void**)+0x9e>
c00199ef:	b8 00 00 00 00       	mov    eax,0x0
c00199f4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00199fa:	c3                   	ret    
c00199fb:	90                   	nop

c00199fc <FAT::stat(char const*, unsigned long long*, bool*)>:
c00199fc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019a02:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019a0a:	75 0a                	jne    c0019a16 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0019a0c:	b8 04 00 00 00       	mov    eax,0x4
c0019a11:	e9 c9 00 00 00       	jmp    c0019adf <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019a16:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019a1e:	75 0a                	jne    c0019a2a <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0019a20:	b8 04 00 00 00       	mov    eax,0x4
c0019a25:	e9 b5 00 00 00       	jmp    c0019adf <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019a2a:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019a32:	75 0a                	jne    c0019a3e <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0019a34:	b8 04 00 00 00       	mov    eax,0x4
c0019a39:	e9 a1 00 00 00       	jmp    c0019adf <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019a3e:	83 ec 08             	sub    esp,0x8
c0019a41:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019a48:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019a4f:	50                   	push   eax
c0019a50:	e8 9f 6d fe ff       	call   c00007f4 <strcpy>
c0019a55:	83 c4 10             	add    esp,0x10
c0019a58:	83 ec 08             	sub    esp,0x8
c0019a5b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019a62:	50                   	push   eax
c0019a63:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019a6a:	e8 87 fd ff ff       	call   c00197f6 <FAT::fixFilepath(char*)>
c0019a6f:	83 c4 10             	add    esp,0x10
c0019a72:	83 ec 08             	sub    esp,0x8
c0019a75:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a79:	50                   	push   eax
c0019a7a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019a81:	50                   	push   eax
c0019a82:	e8 4b c7 fe ff       	call   c00061d2 <f_stat>
c0019a87:	83 c4 10             	add    esp,0x10
c0019a8a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019a91:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019a98:	85 c0                	test   eax,eax
c0019a9a:	74 07                	je     c0019aa3 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0019a9c:	83 f8 04             	cmp    eax,0x4
c0019a9f:	74 32                	je     c0019ad3 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0019aa1:	eb 37                	jmp    c0019ada <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0019aa3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019aa7:	0f b6 c0             	movzx  eax,al
c0019aaa:	83 e0 10             	and    eax,0x10
c0019aad:	0f 95 c2             	setne  dl
c0019ab0:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019ab7:	88 10                	mov    BYTE PTR [eax],dl
c0019ab9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019abc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019ac0:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019ac7:	89 01                	mov    DWORD PTR [ecx],eax
c0019ac9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019acc:	b8 00 00 00 00       	mov    eax,0x0
c0019ad1:	eb 0c                	jmp    c0019adf <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019ad3:	b8 02 00 00 00       	mov    eax,0x2
c0019ad8:	eb 05                	jmp    c0019adf <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019ada:	b8 01 00 00 00       	mov    eax,0x1
c0019adf:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019ae5:	c3                   	ret    

c0019ae6 <FAT::unlink(char const*)>:
c0019ae6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019aec:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019af4:	75 07                	jne    c0019afd <FAT::unlink(char const*)+0x17>
c0019af6:	b8 04 00 00 00       	mov    eax,0x4
c0019afb:	eb 5c                	jmp    c0019b59 <FAT::unlink(char const*)+0x73>
c0019afd:	83 ec 08             	sub    esp,0x8
c0019b00:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b07:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b0b:	50                   	push   eax
c0019b0c:	e8 e3 6c fe ff       	call   c00007f4 <strcpy>
c0019b11:	83 c4 10             	add    esp,0x10
c0019b14:	83 ec 08             	sub    esp,0x8
c0019b17:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019b1b:	50                   	push   eax
c0019b1c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b23:	e8 ce fc ff ff       	call   c00197f6 <FAT::fixFilepath(char*)>
c0019b28:	83 c4 10             	add    esp,0x10
c0019b2b:	83 ec 0c             	sub    esp,0xc
c0019b2e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b32:	50                   	push   eax
c0019b33:	e8 ec c9 fe ff       	call   c0006524 <f_unlink>
c0019b38:	83 c4 10             	add    esp,0x10
c0019b3b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019b42:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019b49:	85 c0                	test   eax,eax
c0019b4b:	75 07                	jne    c0019b54 <FAT::unlink(char const*)+0x6e>
c0019b4d:	b8 00 00 00 00       	mov    eax,0x0
c0019b52:	eb 05                	jmp    c0019b59 <FAT::unlink(char const*)+0x73>
c0019b54:	b8 01 00 00 00       	mov    eax,0x1
c0019b59:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019b5f:	c3                   	ret    

c0019b60 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019b60:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019b66:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019b6d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019b74:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019b78:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019b7c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019b84:	75 0a                	jne    c0019b90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019b86:	b8 04 00 00 00       	mov    eax,0x4
c0019b8b:	e9 1c 01 00 00       	jmp    c0019cac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019b90:	83 ec 08             	sub    esp,0x8
c0019b93:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019b9a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019b9e:	50                   	push   eax
c0019b9f:	e8 50 6c fe ff       	call   c00007f4 <strcpy>
c0019ba4:	83 c4 10             	add    esp,0x10
c0019ba7:	83 ec 08             	sub    esp,0x8
c0019baa:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019bae:	50                   	push   eax
c0019baf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019bb6:	e8 3b fc ff ff       	call   c00197f6 <FAT::fixFilepath(char*)>
c0019bbb:	83 c4 10             	add    esp,0x10
c0019bbe:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019bc6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019bce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bd3:	83 e0 01             	and    eax,0x1
c0019bd6:	74 08                	je     c0019be0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0019bd8:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0019be0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019be5:	83 e0 02             	and    eax,0x2
c0019be8:	74 08                	je     c0019bf2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0019bea:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0019bf2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bf7:	83 e0 04             	and    eax,0x4
c0019bfa:	74 08                	je     c0019c04 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0019bfc:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0019c04:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c09:	83 e0 08             	and    eax,0x8
c0019c0c:	74 08                	je     c0019c16 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0019c0e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0019c16:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c1b:	83 e0 01             	and    eax,0x1
c0019c1e:	74 08                	je     c0019c28 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019c20:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0019c28:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c2d:	83 e0 02             	and    eax,0x2
c0019c30:	74 08                	je     c0019c3a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0019c32:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0019c3a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c3f:	83 e0 04             	and    eax,0x4
c0019c42:	74 08                	je     c0019c4c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0019c44:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0019c4c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c51:	83 e0 08             	and    eax,0x8
c0019c54:	74 08                	je     c0019c5e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0019c56:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0019c5e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c65:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0019c6c:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019c74:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019c7c:	83 ec 04             	sub    esp,0x4
c0019c7f:	52                   	push   edx
c0019c80:	50                   	push   eax
c0019c81:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019c85:	50                   	push   eax
c0019c86:	e8 3b cf fe ff       	call   c0006bc6 <f_chmod>
c0019c8b:	83 c4 10             	add    esp,0x10
c0019c8e:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019c95:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019c9c:	85 c0                	test   eax,eax
c0019c9e:	75 07                	jne    c0019ca7 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0019ca0:	b8 00 00 00 00       	mov    eax,0x0
c0019ca5:	eb 05                	jmp    c0019cac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019ca7:	b8 01 00 00 00       	mov    eax,0x1
c0019cac:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019cb2:	c3                   	ret    
c0019cb3:	90                   	nop

c0019cb4 <FAT::rename(char const*, char const*)>:
c0019cb4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019cba:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019cc2:	74 0a                	je     c0019cce <FAT::rename(char const*, char const*)+0x1a>
c0019cc4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019ccc:	75 0a                	jne    c0019cd8 <FAT::rename(char const*, char const*)+0x24>
c0019cce:	b8 04 00 00 00       	mov    eax,0x4
c0019cd3:	e9 98 00 00 00       	jmp    c0019d70 <FAT::rename(char const*, char const*)+0xbc>
c0019cd8:	83 ec 08             	sub    esp,0x8
c0019cdb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019ce2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019ce9:	50                   	push   eax
c0019cea:	e8 05 6b fe ff       	call   c00007f4 <strcpy>
c0019cef:	83 c4 10             	add    esp,0x10
c0019cf2:	83 ec 08             	sub    esp,0x8
c0019cf5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019cfc:	50                   	push   eax
c0019cfd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d04:	e8 ed fa ff ff       	call   c00197f6 <FAT::fixFilepath(char*)>
c0019d09:	83 c4 10             	add    esp,0x10
c0019d0c:	83 ec 08             	sub    esp,0x8
c0019d0f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019d16:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d1a:	50                   	push   eax
c0019d1b:	e8 d4 6a fe ff       	call   c00007f4 <strcpy>
c0019d20:	83 c4 10             	add    esp,0x10
c0019d23:	83 ec 08             	sub    esp,0x8
c0019d26:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d2a:	50                   	push   eax
c0019d2b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d32:	e8 bf fa ff ff       	call   c00197f6 <FAT::fixFilepath(char*)>
c0019d37:	83 c4 10             	add    esp,0x10
c0019d3a:	83 ec 08             	sub    esp,0x8
c0019d3d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d41:	50                   	push   eax
c0019d42:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019d49:	50                   	push   eax
c0019d4a:	e8 84 cb fe ff       	call   c00068d3 <f_rename>
c0019d4f:	83 c4 10             	add    esp,0x10
c0019d52:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019d59:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019d60:	85 c0                	test   eax,eax
c0019d62:	75 07                	jne    c0019d6b <FAT::rename(char const*, char const*)+0xb7>
c0019d64:	b8 00 00 00 00       	mov    eax,0x0
c0019d69:	eb 05                	jmp    c0019d70 <FAT::rename(char const*, char const*)+0xbc>
c0019d6b:	b8 01 00 00 00       	mov    eax,0x1
c0019d70:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019d76:	c3                   	ret    
c0019d77:	90                   	nop

c0019d78 <FAT::mkdir(char const*)>:
c0019d78:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d7e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d86:	75 07                	jne    c0019d8f <FAT::mkdir(char const*)+0x17>
c0019d88:	b8 04 00 00 00       	mov    eax,0x4
c0019d8d:	eb 5c                	jmp    c0019deb <FAT::mkdir(char const*)+0x73>
c0019d8f:	83 ec 08             	sub    esp,0x8
c0019d92:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d99:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d9d:	50                   	push   eax
c0019d9e:	e8 51 6a fe ff       	call   c00007f4 <strcpy>
c0019da3:	83 c4 10             	add    esp,0x10
c0019da6:	83 ec 08             	sub    esp,0x8
c0019da9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019dad:	50                   	push   eax
c0019dae:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019db5:	e8 3c fa ff ff       	call   c00197f6 <FAT::fixFilepath(char*)>
c0019dba:	83 c4 10             	add    esp,0x10
c0019dbd:	83 ec 0c             	sub    esp,0xc
c0019dc0:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019dc4:	50                   	push   eax
c0019dc5:	e8 dd c8 fe ff       	call   c00066a7 <f_mkdir>
c0019dca:	83 c4 10             	add    esp,0x10
c0019dcd:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019dd4:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019ddb:	85 c0                	test   eax,eax
c0019ddd:	75 07                	jne    c0019de6 <FAT::mkdir(char const*)+0x6e>
c0019ddf:	b8 00 00 00 00       	mov    eax,0x0
c0019de4:	eb 05                	jmp    c0019deb <FAT::mkdir(char const*)+0x73>
c0019de6:	b8 01 00 00 00       	mov    eax,0x1
c0019deb:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019df1:	c3                   	ret    

c0019df2 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019df2:	b8 08 00 00 00       	mov    eax,0x8
c0019df7:	c3                   	ret    

c0019df8 <ISO9660::seek(void*, unsigned long long)>:
c0019df8:	53                   	push   ebx
c0019df9:	b8 04 00 00 00       	mov    eax,0x4
c0019dfe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019e02:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e06:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019e0a:	85 d2                	test   edx,edx
c0019e0c:	74 17                	je     c0019e25 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019e0e:	89 c8                	mov    eax,ecx
c0019e10:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0019e13:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0019e16:	b8 01 00 00 00       	mov    eax,0x1
c0019e1b:	73 08                	jae    c0019e25 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019e1d:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0019e20:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0019e23:	31 c0                	xor    eax,eax
c0019e25:	5b                   	pop    ebx
c0019e26:	c3                   	ret    
c0019e27:	90                   	nop

c0019e28 <ISO9660::tell(void*, unsigned long long*)>:
c0019e28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019e2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e30:	85 d2                	test   edx,edx
c0019e32:	74 12                	je     c0019e46 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019e34:	85 c0                	test   eax,eax
c0019e36:	74 0e                	je     c0019e46 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019e38:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e3b:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0019e3e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019e41:	89 10                	mov    DWORD PTR [eax],edx
c0019e43:	31 c0                	xor    eax,eax
c0019e45:	c3                   	ret    
c0019e46:	b8 04 00 00 00       	mov    eax,0x4
c0019e4b:	c3                   	ret    

c0019e4c <ISO9660::getName()>:
c0019e4c:	b8 2c a5 03 c0       	mov    eax,0xc003a52c
c0019e51:	c3                   	ret    

c0019e52 <ISO9660::stat(void*, unsigned long long*)>:
c0019e52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019e56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e5a:	85 d2                	test   edx,edx
c0019e5c:	74 12                	je     c0019e70 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019e5e:	85 c0                	test   eax,eax
c0019e60:	74 0e                	je     c0019e70 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019e62:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0019e65:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0019e68:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019e6b:	89 10                	mov    DWORD PTR [eax],edx
c0019e6d:	31 c0                	xor    eax,eax
c0019e6f:	c3                   	ret    
c0019e70:	b8 04 00 00 00       	mov    eax,0x4
c0019e75:	c3                   	ret    

c0019e76 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019e76:	b8 01 00 00 00       	mov    eax,0x1
c0019e7b:	c3                   	ret    

c0019e7c <ISO9660::unlink(char const*)>:
c0019e7c:	b8 01 00 00 00       	mov    eax,0x1
c0019e81:	c3                   	ret    

c0019e82 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019e82:	b8 01 00 00 00       	mov    eax,0x1
c0019e87:	c3                   	ret    

c0019e88 <ISO9660::rename(char const*, char const*)>:
c0019e88:	b8 01 00 00 00       	mov    eax,0x1
c0019e8d:	c3                   	ret    

c0019e8e <ISO9660::mkdir(char const*)>:
c0019e8e:	b8 01 00 00 00       	mov    eax,0x1
c0019e93:	c3                   	ret    

c0019e94 <ISO9660::close(void*)>:
c0019e94:	83 ec 0c             	sub    esp,0xc
c0019e97:	b8 04 00 00 00       	mov    eax,0x4
c0019e9c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019ea0:	85 d2                	test   edx,edx
c0019ea2:	74 0e                	je     c0019eb2 <ISO9660::close(void*)+0x1e>
c0019ea4:	83 ec 0c             	sub    esp,0xc
c0019ea7:	52                   	push   edx
c0019ea8:	e8 f2 35 ff ff       	call   c000d49f <free>
c0019ead:	83 c4 10             	add    esp,0x10
c0019eb0:	31 c0                	xor    eax,eax
c0019eb2:	83 c4 0c             	add    esp,0xc
c0019eb5:	c3                   	ret    

c0019eb6 <ISO9660::closeDir(void*)>:
c0019eb6:	83 ec 0c             	sub    esp,0xc
c0019eb9:	b8 04 00 00 00       	mov    eax,0x4
c0019ebe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019ec2:	85 d2                	test   edx,edx
c0019ec4:	74 0e                	je     c0019ed4 <ISO9660::closeDir(void*)+0x1e>
c0019ec6:	83 ec 0c             	sub    esp,0xc
c0019ec9:	52                   	push   edx
c0019eca:	e8 d0 35 ff ff       	call   c000d49f <free>
c0019ecf:	83 c4 10             	add    esp,0x10
c0019ed2:	31 c0                	xor    eax,eax
c0019ed4:	83 c4 0c             	add    esp,0xc
c0019ed7:	c3                   	ret    

c0019ed8 <ISO9660::~ISO9660()>:
c0019ed8:	83 ec 0c             	sub    esp,0xc
c0019edb:	ba 80 a5 03 c0       	mov    edx,0xc003a580
c0019ee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ee4:	89 10                	mov    DWORD PTR [eax],edx
c0019ee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019eea:	83 ec 0c             	sub    esp,0xc
c0019eed:	50                   	push   eax
c0019eee:	e8 79 87 ff ff       	call   c001266c <Filesystem::~Filesystem()>
c0019ef3:	83 c4 10             	add    esp,0x10
c0019ef6:	90                   	nop
c0019ef7:	83 c4 0c             	add    esp,0xc
c0019efa:	c3                   	ret    
c0019efb:	90                   	nop

c0019efc <ISO9660::~ISO9660()>:
c0019efc:	83 ec 0c             	sub    esp,0xc
c0019eff:	83 ec 0c             	sub    esp,0xc
c0019f02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f06:	e8 cd ff ff ff       	call   c0019ed8 <ISO9660::~ISO9660()>
c0019f0b:	83 c4 10             	add    esp,0x10
c0019f0e:	83 ec 08             	sub    esp,0x8
c0019f11:	6a 08                	push   0x8
c0019f13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f17:	e8 37 85 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c0019f1c:	83 c4 10             	add    esp,0x10
c0019f1f:	83 c4 0c             	add    esp,0xc
c0019f22:	c3                   	ret    

c0019f23 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0019f23:	55                   	push   ebp
c0019f24:	31 c9                	xor    ecx,ecx
c0019f26:	57                   	push   edi
c0019f27:	56                   	push   esi
c0019f28:	53                   	push   ebx
c0019f29:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0019f2d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019f31:	89 eb                	mov    ebx,ebp
c0019f33:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0019f37:	39 ce                	cmp    esi,ecx
c0019f39:	7e 17                	jle    c0019f52 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0019f3b:	31 d2                	xor    edx,edx
c0019f3d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0019f41:	7d 13                	jge    c0019f56 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0019f43:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019f47:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0019f4a:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0019f4d:	75 0d                	jne    c0019f5c <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0019f4f:	42                   	inc    edx
c0019f50:	eb eb                	jmp    c0019f3d <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0019f52:	31 c0                	xor    eax,eax
c0019f54:	eb 0a                	jmp    c0019f60 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019f56:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0019f5a:	eb 04                	jmp    c0019f60 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019f5c:	41                   	inc    ecx
c0019f5d:	43                   	inc    ebx
c0019f5e:	eb d7                	jmp    c0019f37 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0019f60:	5b                   	pop    ebx
c0019f61:	5e                   	pop    esi
c0019f62:	5f                   	pop    edi
c0019f63:	5d                   	pop    ebp
c0019f64:	c3                   	ret    

c0019f65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019f65:	56                   	push   esi
c0019f66:	53                   	push   ebx
c0019f67:	52                   	push   edx
c0019f68:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019f6c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019f70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019f74:	39 0d 80 c8 03 c0    	cmp    DWORD PTR ds:0xc003c880,ecx
c0019f7a:	75 08                	jne    c0019f84 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0019f7c:	38 05 e4 b3 03 c0    	cmp    BYTE PTR ds:0xc003b3e4,al
c0019f82:	74 2b                	je     c0019faf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0019f84:	83 ec 0c             	sub    esp,0xc
c0019f87:	a2 e4 b3 03 c0       	mov    ds:0xc003b3e4,al
c0019f8c:	68 a0 c8 03 c0       	push   0xc003c8a0
c0019f91:	0f be c0             	movsx  eax,al
c0019f94:	6a 01                	push   0x1
c0019f96:	89 0d 80 c8 03 c0    	mov    DWORD PTR ds:0xc003c880,ecx
c0019f9c:	31 db                	xor    ebx,ebx
c0019f9e:	53                   	push   ebx
c0019f9f:	51                   	push   ecx
c0019fa0:	ff 34 85 1c c2 03 c0 	push   DWORD PTR [eax*4-0x3ffc3de4]
c0019fa7:	e8 64 b2 ff ff       	call   c0015210 <LogicalDisk::read(unsigned long long, int, void*)>
c0019fac:	83 c4 20             	add    esp,0x20
c0019faf:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0019fb7:	c7 44 24 14 a0 c8 03 c0 	mov    DWORD PTR [esp+0x14],0xc003c8a0
c0019fbf:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0019fc3:	58                   	pop    eax
c0019fc4:	5b                   	pop    ebx
c0019fc5:	5e                   	pop    esi
c0019fc6:	e9 96 66 fe ff       	jmp    c0000661 <memcpy>
c0019fcb:	90                   	nop

c0019fcc <ISO9660::tryMount(LogicalDisk*, int)>:
c0019fcc:	81 ec 10 08 00 00    	sub    esp,0x810
c0019fd2:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0019fd9:	83 c0 41             	add    eax,0x41
c0019fdc:	0f be c0             	movsx  eax,al
c0019fdf:	50                   	push   eax
c0019fe0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019fe4:	50                   	push   eax
c0019fe5:	6a 10                	push   0x10
c0019fe7:	e8 79 ff ff ff       	call   c0019f65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019fec:	83 c4 10             	add    esp,0x10
c0019fef:	31 c0                	xor    eax,eax
c0019ff1:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019ff6:	75 1d                	jne    c001a015 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019ff8:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019ffd:	75 16                	jne    c001a015 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019fff:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a004:	75 0f                	jne    c001a015 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a006:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a00b:	75 08                	jne    c001a015 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a00d:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a012:	0f 94 c0             	sete   al
c001a015:	81 c4 0c 08 00 00    	add    esp,0x80c
c001a01b:	c3                   	ret    

c001a01c <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a01c:	55                   	push   ebp
c001a01d:	57                   	push   edi
c001a01e:	56                   	push   esi
c001a01f:	53                   	push   ebx
c001a020:	81 ec 34 08 00 00    	sub    esp,0x834
c001a026:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001a02d:	55                   	push   ebp
c001a02e:	68 47 a5 03 c0       	push   0xc003a547
c001a033:	e8 5c 2e ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001a038:	83 c4 10             	add    esp,0x10
c001a03b:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001a043:	0f 84 06 02 00 00    	je     c001a24f <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a049:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001a051:	0f 84 f8 01 00 00    	je     c001a24f <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a057:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a05e:	b8 01 00 00 00       	mov    eax,0x1
c001a063:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001a067:	0f 85 e7 01 00 00    	jne    c001a254 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a06d:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001a070:	31 d2                	xor    edx,edx
c001a072:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001a075:	89 e9                	mov    ecx,ebp
c001a077:	89 d3                	mov    ebx,edx
c001a079:	01 f1                	add    ecx,esi
c001a07b:	11 fb                	adc    ebx,edi
c001a07d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a081:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a085:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001a08c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001a08f:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001a092:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001a096:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a09a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a09e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a0a2:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001a0a6:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001a0aa:	72 19                	jb     c001a0c5 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001a0ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a0b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a0b8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a0bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a0bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a0c3:	eb 13                	jmp    c001a0d8 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001a0c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a0cd:	29 f0                	sub    eax,esi
c001a0cf:	19 fa                	sbb    edx,edi
c001a0d1:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0d4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a0d8:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001a0df:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a0e2:	8b 00                	mov    eax,DWORD PTR [eax]
c001a0e4:	53                   	push   ebx
c001a0e5:	0f a4 c2 0b          	shld   edx,eax,0xb
c001a0e9:	c1 e0 0b             	shl    eax,0xb
c001a0ec:	01 c6                	add    esi,eax
c001a0ee:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a0f5:	11 d7                	adc    edi,edx
c001a0f7:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a0fb:	89 fa                	mov    edx,edi
c001a0fd:	50                   	push   eax
c001a0fe:	8d 44 24 28          	lea    eax,[esp+0x28]
c001a102:	50                   	push   eax
c001a103:	89 f0                	mov    eax,esi
c001a105:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a109:	50                   	push   eax
c001a10a:	e8 56 fe ff ff       	call   c0019f65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a10f:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a116:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a11a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a11d:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001a121:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001a127:	83 c4 10             	add    esp,0x10
c001a12a:	b8 00 08 00 00       	mov    eax,0x800
c001a12f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001a133:	29 d0                	sub    eax,edx
c001a135:	39 c1                	cmp    ecx,eax
c001a137:	83 db 00             	sbb    ebx,0x0
c001a13a:	7d 19                	jge    c001a155 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001a13c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a141:	75 16                	jne    c001a159 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001a143:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a14a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a150:	e9 f6 00 00 00       	jmp    c001a24b <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001a155:	89 c5                	mov    ebp,eax
c001a157:	eb 03                	jmp    c001a15c <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001a159:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001a15c:	51                   	push   ecx
c001a15d:	55                   	push   ebp
c001a15e:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001a162:	50                   	push   eax
c001a163:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001a16a:	e8 f2 64 fe ff       	call   c0000661 <memcpy>
c001a16f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a173:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a177:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001a17e:	01 e8                	add    eax,ebp
c001a180:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a184:	89 e8                	mov    eax,ebp
c001a186:	99                   	cdq    
c001a187:	01 ee                	add    esi,ebp
c001a189:	11 d7                	adc    edi,edx
c001a18b:	29 e9                	sub    ecx,ebp
c001a18d:	19 d3                	sbb    ebx,edx
c001a18f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a193:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a197:	83 c4 10             	add    esp,0x10
c001a19a:	b8 ff 07 00 00       	mov    eax,0x7ff
c001a19f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001a1a2:	b8 00 00 00 00       	mov    eax,0x0
c001a1a7:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a1ab:	7d 3f                	jge    c001a1ec <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001a1ad:	52                   	push   edx
c001a1ae:	89 fa                	mov    edx,edi
c001a1b0:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a1b7:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a1bb:	50                   	push   eax
c001a1bc:	89 f0                	mov    eax,esi
c001a1be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1c2:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a1c6:	50                   	push   eax
c001a1c7:	e8 99 fd ff ff       	call   c0019f65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a1cc:	81 c6 00 08 00 00    	add    esi,0x800
c001a1d2:	83 d7 00             	adc    edi,0x0
c001a1d5:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001a1dd:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001a1e5:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001a1ea:	eb ab                	jmp    c001a197 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001a1ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1f0:	0b 04 24             	or     eax,DWORD PTR [esp]
c001a1f3:	74 34                	je     c001a229 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001a1f5:	89 fa                	mov    edx,edi
c001a1f7:	50                   	push   eax
c001a1f8:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a1ff:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a203:	50                   	push   eax
c001a204:	89 f0                	mov    eax,esi
c001a206:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a20a:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a20e:	55                   	push   ebp
c001a20f:	50                   	push   eax
c001a210:	e8 50 fd ff ff       	call   c0019f65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a215:	83 c4 0c             	add    esp,0xc
c001a218:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001a21c:	55                   	push   ebp
c001a21d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a221:	e8 3b 64 fe ff       	call   c0000661 <memcpy>
c001a226:	83 c4 10             	add    esp,0x10
c001a229:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a230:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a234:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a238:	89 38                	mov    DWORD PTR [eax],edi
c001a23a:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a241:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a245:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001a248:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001a24b:	31 c0                	xor    eax,eax
c001a24d:	eb 05                	jmp    c001a254 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a24f:	b8 04 00 00 00       	mov    eax,0x4
c001a254:	81 c4 2c 08 00 00    	add    esp,0x82c
c001a25a:	5b                   	pop    ebx
c001a25b:	5e                   	pop    esi
c001a25c:	5f                   	pop    edi
c001a25d:	5d                   	pop    ebp
c001a25e:	c3                   	ret    
c001a25f:	90                   	nop

c001a260 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a260:	55                   	push   ebp
c001a261:	57                   	push   edi
c001a262:	56                   	push   esi
c001a263:	53                   	push   ebx
c001a264:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001a26a:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001a271:	85 f6                	test   esi,esi
c001a273:	0f 84 65 02 00 00    	je     c001a4de <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27e>
c001a279:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001a281:	0f 84 57 02 00 00    	je     c001a4de <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27e>
c001a287:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001a28a:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001a28d:	75 0a                	jne    c001a299 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001a28f:	b8 07 00 00 00       	mov    eax,0x7
c001a294:	e9 4a 02 00 00       	jmp    c001a4e3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x283>
c001a299:	50                   	push   eax
c001a29a:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a29e:	50                   	push   eax
c001a29f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a2a6:	53                   	push   ebx
c001a2a7:	8b 06                	mov    eax,DWORD PTR [esi]
c001a2a9:	c1 e0 0b             	shl    eax,0xb
c001a2ac:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001a2af:	c1 e8 0b             	shr    eax,0xb
c001a2b2:	50                   	push   eax
c001a2b3:	e8 ad fc ff ff       	call   c0019f65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a2b8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a2bb:	83 c4 10             	add    esp,0x10
c001a2be:	89 c1                	mov    ecx,eax
c001a2c0:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001a2c3:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a2c9:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001a2cc:	84 db                	test   bl,bl
c001a2ce:	0f 85 90 00 00 00    	jne    c001a364 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001a2d4:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001a2da:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a2e0:	29 c7                	sub    edi,eax
c001a2e2:	89 fb                	mov    ebx,edi
c001a2e4:	c1 fb 1f             	sar    ebx,0x1f
c001a2e7:	01 f8                	add    eax,edi
c001a2e9:	11 da                	adc    edx,ebx
c001a2eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a2ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a2f3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001a2f6:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001a2f9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a2fc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a2ff:	89 04 24             	mov    DWORD PTR [esp],eax
c001a302:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a306:	89 d8                	mov    eax,ebx
c001a308:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001a30b:	ba 00 00 00 00       	mov    edx,0x0
c001a310:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a314:	b8 00 00 00 00       	mov    eax,0x0
c001a319:	73 0b                	jae    c001a326 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a31b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a31e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a322:	29 f8                	sub    eax,edi
c001a324:	19 da                	sbb    edx,ebx
c001a326:	89 d3                	mov    ebx,edx
c001a328:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a32b:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a32e:	09 c3                	or     ebx,eax
c001a330:	0f 84 59 ff ff ff    	je     c001a28f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001a336:	55                   	push   ebp
c001a337:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a33b:	50                   	push   eax
c001a33c:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a343:	53                   	push   ebx
c001a344:	8b 06                	mov    eax,DWORD PTR [esi]
c001a346:	c1 e0 0b             	shl    eax,0xb
c001a349:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001a34d:	c1 e8 0b             	shr    eax,0xb
c001a350:	50                   	push   eax
c001a351:	e8 0f fc ff ff       	call   c0019f65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a356:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a359:	83 c4 10             	add    esp,0x10
c001a35c:	25 ff 07 00 00       	and    eax,0x7ff
c001a361:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001a364:	57                   	push   edi
c001a365:	6a 28                	push   0x28
c001a367:	6a 00                	push   0x0
c001a369:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a36d:	50                   	push   eax
c001a36e:	e8 65 63 fe ff       	call   c00006d8 <memset>
c001a373:	31 d2                	xor    edx,edx
c001a375:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a378:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a37e:	89 f8                	mov    eax,edi
c001a380:	83 c0 21             	add    eax,0x21
c001a383:	83 d2 00             	adc    edx,0x0
c001a386:	89 c7                	mov    edi,eax
c001a388:	89 d5                	mov    ebp,edx
c001a38a:	83 c4 10             	add    esp,0x10
c001a38d:	31 c9                	xor    ecx,ecx
c001a38f:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001a396:	83 f9 28             	cmp    ecx,0x28
c001a399:	88 04 24             	mov    BYTE PTR [esp],al
c001a39c:	0f 94 c2             	sete   dl
c001a39f:	88 d0                	mov    al,dl
c001a3a1:	ba ff 07 00 00       	mov    edx,0x7ff
c001a3a6:	39 fa                	cmp    edx,edi
c001a3a8:	ba 00 00 00 00       	mov    edx,0x0
c001a3ad:	19 ea                	sbb    edx,ebp
c001a3af:	0f 92 c2             	setb   dl
c001a3b2:	09 c2                	or     edx,eax
c001a3b4:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001a3b8:	0f 94 c0             	sete   al
c001a3bb:	08 d0                	or     al,dl
c001a3bd:	75 16                	jne    c001a3d5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a3bf:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001a3c3:	74 10                	je     c001a3d5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a3c5:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a3c8:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001a3cc:	41                   	inc    ecx
c001a3cd:	83 c7 01             	add    edi,0x1
c001a3d0:	83 d5 00             	adc    ebp,0x0
c001a3d3:	eb ba                	jmp    c001a38f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001a3d5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c001a3dd:	83 ec 0c             	sub    esp,0xc
c001a3e0:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001a3e4:	57                   	push   edi
c001a3e5:	e8 17 63 fe ff       	call   c0000701 <strlen>
c001a3ea:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001a3f2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a3f6:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001a3fd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a400:	5a                   	pop    edx
c001a401:	25 ff 07 00 00       	and    eax,0x7ff
c001a406:	01 c8                	add    eax,ecx
c001a408:	59                   	pop    ecx
c001a409:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001a40f:	83 e0 02             	and    eax,0x2
c001a412:	3c 01                	cmp    al,0x1
c001a414:	19 c0                	sbb    eax,eax
c001a416:	83 c0 02             	add    eax,0x2
c001a419:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a41d:	57                   	push   edi
c001a41e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001a422:	50                   	push   eax
c001a423:	e8 cc 63 fe ff       	call   c00007f4 <strcpy>
c001a428:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001a42c:	83 c4 10             	add    esp,0x10
c001a42f:	84 c0                	test   al,al
c001a431:	75 21                	jne    c001a454 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f4>
c001a433:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001a43b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a443:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a44b:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001a452:	eb 28                	jmp    c001a47c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21c>
c001a454:	fe c8                	dec    al
c001a456:	75 24                	jne    c001a47c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21c>
c001a458:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001a460:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a468:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a470:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001a477:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001a47c:	0f b6 fb             	movzx  edi,bl
c001a47f:	31 db                	xor    ebx,ebx
c001a481:	50                   	push   eax
c001a482:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001a489:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a48d:	50                   	push   eax
c001a48e:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001a495:	e8 c7 61 fe ff       	call   c0000661 <memcpy>
c001a49a:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001a4a1:	89 f9                	mov    ecx,edi
c001a4a3:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a4a9:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001a4ac:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a4af:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001a4b2:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a4b5:	83 c4 10             	add    esp,0x10
c001a4b8:	39 c7                	cmp    edi,eax
c001a4ba:	89 df                	mov    edi,ebx
c001a4bc:	19 d7                	sbb    edi,edx
c001a4be:	72 10                	jb     c001a4d0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x270>
c001a4c0:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001a4c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001a4ce:	eb 0a                	jmp    c001a4da <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27a>
c001a4d0:	29 c8                	sub    eax,ecx
c001a4d2:	19 da                	sbb    edx,ebx
c001a4d4:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a4d7:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a4da:	31 c0                	xor    eax,eax
c001a4dc:	eb 05                	jmp    c001a4e3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x283>
c001a4de:	b8 04 00 00 00       	mov    eax,0x4
c001a4e3:	81 c4 5c 09 00 00    	add    esp,0x95c
c001a4e9:	5b                   	pop    ebx
c001a4ea:	5e                   	pop    esi
c001a4eb:	5f                   	pop    edi
c001a4ec:	5d                   	pop    ebp
c001a4ed:	c3                   	ret    

c001a4ee <readRoot(unsigned int*, unsigned int*, char)>:
c001a4ee:	81 ec 40 08 00 00    	sub    esp,0x840
c001a4f4:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001a4fc:	50                   	push   eax
c001a4fd:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a501:	50                   	push   eax
c001a502:	6a 10                	push   0x10
c001a504:	e8 5c fa ff ff       	call   c0019f65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a509:	83 c4 0c             	add    esp,0xc
c001a50c:	6a 22                	push   0x22
c001a50e:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001a515:	50                   	push   eax
c001a516:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a51a:	50                   	push   eax
c001a51b:	e8 41 61 fe ff       	call   c0000661 <memcpy>
c001a520:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a527:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a52b:	89 10                	mov    DWORD PTR [eax],edx
c001a52d:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a534:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a538:	89 10                	mov    DWORD PTR [eax],edx
c001a53a:	b0 01                	mov    al,0x1
c001a53c:	81 c4 4c 08 00 00    	add    esp,0x84c
c001a542:	c3                   	ret    

c001a543 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001a543:	55                   	push   ebp
c001a544:	57                   	push   edi
c001a545:	56                   	push   esi
c001a546:	53                   	push   ebx
c001a547:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a54d:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a554:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001a55b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a55f:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001a563:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a567:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a56b:	75 03                	jne    c001a570 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a56d:	83 c3 02             	add    ebx,0x2
c001a570:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001a573:	75 03                	jne    c001a578 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001a575:	43                   	inc    ebx
c001a576:	eb f8                	jmp    c001a570 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a578:	51                   	push   ecx
c001a579:	68 00 01 00 00       	push   0x100
c001a57e:	6a 00                	push   0x0
c001a580:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a584:	50                   	push   eax
c001a585:	e8 4e 61 fe ff       	call   c00006d8 <memset>
c001a58a:	83 c4 10             	add    esp,0x10
c001a58d:	31 d2                	xor    edx,edx
c001a58f:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a592:	84 c0                	test   al,al
c001a594:	74 21                	je     c001a5b7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001a596:	3c 2f                	cmp    al,0x2f
c001a598:	75 0b                	jne    c001a5a5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001a59a:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001a59e:	bd 01 00 00 00       	mov    ebp,0x1
c001a5a3:	eb 14                	jmp    c001a5b9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001a5a5:	8d 48 9f             	lea    ecx,[eax-0x61]
c001a5a8:	80 f9 19             	cmp    cl,0x19
c001a5ab:	77 03                	ja     c001a5b0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a5ad:	83 e8 20             	sub    eax,0x20
c001a5b0:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001a5b4:	42                   	inc    edx
c001a5b5:	eb d8                	jmp    c001a58f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001a5b7:	31 ed                	xor    ebp,ebp
c001a5b9:	83 ec 0c             	sub    esp,0xc
c001a5bc:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001a5c3:	e8 c7 2e ff ff       	call   c000d48f <malloc>
c001a5c8:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a5cf:	89 c6                	mov    esi,eax
c001a5d1:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001a5d7:	c1 ef 0b             	shr    edi,0xb
c001a5da:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001a5e1:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001a5e5:	83 c4 10             	add    esp,0x10
c001a5e8:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001a5ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a5f1:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001a5f8:	74 28                	je     c001a622 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001a5fa:	52                   	push   edx
c001a5fb:	57                   	push   edi
c001a5fc:	50                   	push   eax
c001a5fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a601:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a608:	e8 58 f9 ff ff       	call   c0019f65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a60d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a611:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001a618:	05 00 08 00 00       	add    eax,0x800
c001a61d:	83 c4 10             	add    esp,0x10
c001a620:	eb cb                	jmp    c001a5ed <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001a622:	83 ec 0c             	sub    esp,0xc
c001a625:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a629:	57                   	push   edi
c001a62a:	e8 d2 60 fe ff       	call   c0000701 <strlen>
c001a62f:	50                   	push   eax
c001a630:	57                   	push   edi
c001a631:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001a638:	56                   	push   esi
c001a639:	e8 e5 f8 ff ff       	call   c0019f23 <__memmem(unsigned char*, int, unsigned char*, int)>
c001a63e:	83 c4 20             	add    esp,0x20
c001a641:	85 c0                	test   eax,eax
c001a643:	75 13                	jne    c001a658 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001a645:	83 ec 0c             	sub    esp,0xc
c001a648:	56                   	push   esi
c001a649:	e8 51 2e ff ff       	call   c000d49f <free>
c001a64e:	83 c4 10             	add    esp,0x10
c001a651:	31 c0                	xor    eax,eax
c001a653:	e9 b3 00 00 00       	jmp    c001a70b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a658:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001a65c:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001a660:	c1 e7 08             	shl    edi,0x8
c001a663:	c1 e2 10             	shl    edx,0x10
c001a666:	09 d7                	or     edi,edx
c001a668:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001a66c:	09 d7                	or     edi,edx
c001a66e:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001a672:	c1 e2 18             	shl    edx,0x18
c001a675:	09 d7                	or     edi,edx
c001a677:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001a67b:	89 d1                	mov    ecx,edx
c001a67d:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001a681:	c1 e1 08             	shl    ecx,0x8
c001a684:	c1 e2 10             	shl    edx,0x10
c001a687:	09 ca                	or     edx,ecx
c001a689:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001a68d:	09 ca                	or     edx,ecx
c001a68f:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001a693:	c1 e1 18             	shl    ecx,0x18
c001a696:	09 ca                	or     edx,ecx
c001a698:	89 e9                	mov    ecx,ebp
c001a69a:	84 c9                	test   cl,cl
c001a69c:	74 3c                	je     c001a6da <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001a69e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a6a2:	83 ec 0c             	sub    esp,0xc
c001a6a5:	56                   	push   esi
c001a6a6:	e8 f4 2d ff ff       	call   c000d49f <free>
c001a6ab:	83 c4 0c             	add    esp,0xc
c001a6ae:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a6b5:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a6ba:	50                   	push   eax
c001a6bb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a6c2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a6c9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a6cd:	52                   	push   edx
c001a6ce:	57                   	push   edi
c001a6cf:	53                   	push   ebx
c001a6d0:	e8 6e fe ff ff       	call   c001a543 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a6d5:	83 c4 20             	add    esp,0x20
c001a6d8:	eb 31                	jmp    c001a70b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a6da:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001a6dd:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001a6e4:	d0 e8                	shr    al,1
c001a6e6:	89 3b                	mov    DWORD PTR [ebx],edi
c001a6e8:	83 e0 01             	and    eax,0x1
c001a6eb:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a6f2:	83 ec 0c             	sub    esp,0xc
c001a6f5:	89 13                	mov    DWORD PTR [ebx],edx
c001a6f7:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001a6fe:	89 03                	mov    DWORD PTR [ebx],eax
c001a700:	56                   	push   esi
c001a701:	e8 99 2d ff ff       	call   c000d49f <free>
c001a706:	83 c4 10             	add    esp,0x10
c001a709:	b0 01                	mov    al,0x1
c001a70b:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a711:	5b                   	pop    ebx
c001a712:	5e                   	pop    esi
c001a713:	5f                   	pop    edi
c001a714:	5d                   	pop    ebp
c001a715:	c3                   	ret    

c001a716 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001a716:	55                   	push   ebp
c001a717:	57                   	push   edi
c001a718:	56                   	push   esi
c001a719:	53                   	push   ebx
c001a71a:	83 ec 20             	sub    esp,0x20
c001a71d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a721:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001a725:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a729:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a731:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001a739:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001a73e:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001a744:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001a74a:	57                   	push   edi
c001a74b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a74f:	50                   	push   eax
c001a750:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a754:	50                   	push   eax
c001a755:	e8 94 fd ff ff       	call   c001a4ee <readRoot(unsigned int*, unsigned int*, char)>
c001a75a:	5a                   	pop    edx
c001a75b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a75f:	e8 9d 5f fe ff       	call   c0000701 <strlen>
c001a764:	83 c4 10             	add    esp,0x10
c001a767:	83 f8 03             	cmp    eax,0x3
c001a76a:	77 17                	ja     c001a783 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a76c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a770:	89 03                	mov    DWORD PTR [ebx],eax
c001a772:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a776:	89 06                	mov    DWORD PTR [esi],eax
c001a778:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001a77f:	b0 01                	mov    al,0x1
c001a781:	eb 19                	jmp    c001a79c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001a783:	50                   	push   eax
c001a784:	55                   	push   ebp
c001a785:	57                   	push   edi
c001a786:	56                   	push   esi
c001a787:	53                   	push   ebx
c001a788:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a78c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a790:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a794:	e8 aa fd ff ff       	call   c001a543 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a799:	83 c4 20             	add    esp,0x20
c001a79c:	83 c4 1c             	add    esp,0x1c
c001a79f:	5b                   	pop    ebx
c001a7a0:	5e                   	pop    esi
c001a7a1:	5f                   	pop    edi
c001a7a2:	5d                   	pop    ebp
c001a7a3:	c3                   	ret    

c001a7a4 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a7a4:	57                   	push   edi
c001a7a5:	56                   	push   esi
c001a7a6:	53                   	push   ebx
c001a7a7:	83 ec 10             	sub    esp,0x10
c001a7aa:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a7ae:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a7b2:	85 ff                	test   edi,edi
c001a7b4:	74 7b                	je     c001a831 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a7b6:	85 f6                	test   esi,esi
c001a7b8:	74 77                	je     c001a831 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a7ba:	83 ec 0c             	sub    esp,0xc
c001a7bd:	6a 1c                	push   0x1c
c001a7bf:	e8 cb 2c ff ff       	call   c000d48f <malloc>
c001a7c4:	89 07                	mov    DWORD PTR [edi],eax
c001a7c6:	89 c3                	mov    ebx,eax
c001a7c8:	58                   	pop    eax
c001a7c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a7cd:	50                   	push   eax
c001a7ce:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a7d1:	50                   	push   eax
c001a7d2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a7d6:	50                   	push   eax
c001a7d7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a7db:	50                   	push   eax
c001a7dc:	56                   	push   esi
c001a7dd:	e8 34 ff ff ff       	call   c001a716 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a7e2:	83 c4 20             	add    esp,0x20
c001a7e5:	84 c0                	test   al,al
c001a7e7:	74 07                	je     c001a7f0 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001a7e9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a7ee:	74 0b                	je     c001a7fb <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a7f0:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a7f4:	b8 01 00 00 00       	mov    eax,0x1
c001a7f9:	eb 3b                	jmp    c001a836 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a7fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7ff:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a803:	89 03                	mov    DWORD PTR [ebx],eax
c001a805:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a80c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a810:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a817:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a81e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a821:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a828:	8a 06                	mov    al,BYTE PTR [esi]
c001a82a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a82d:	31 c0                	xor    eax,eax
c001a82f:	eb 05                	jmp    c001a836 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a831:	b8 04 00 00 00       	mov    eax,0x4
c001a836:	83 c4 10             	add    esp,0x10
c001a839:	5b                   	pop    ebx
c001a83a:	5e                   	pop    esi
c001a83b:	5f                   	pop    edi
c001a83c:	c3                   	ret    
c001a83d:	90                   	nop

c001a83e <ISO9660::exists(char const*)>:
c001a83e:	83 ec 28             	sub    esp,0x28
c001a841:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a845:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a849:	52                   	push   edx
c001a84a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001a84d:	52                   	push   edx
c001a84e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a852:	52                   	push   edx
c001a853:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a857:	52                   	push   edx
c001a858:	50                   	push   eax
c001a859:	e8 b8 fe ff ff       	call   c001a716 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a85e:	83 c4 3c             	add    esp,0x3c
c001a861:	c3                   	ret    

c001a862 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a862:	56                   	push   esi
c001a863:	53                   	push   ebx
c001a864:	83 ec 14             	sub    esp,0x14
c001a867:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a86b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a86f:	85 db                	test   ebx,ebx
c001a871:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001a875:	0f 94 c2             	sete   dl
c001a878:	85 f6                	test   esi,esi
c001a87a:	0f 94 c0             	sete   al
c001a87d:	08 c2                	or     dl,al
c001a87f:	75 68                	jne    c001a8e9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a881:	85 c9                	test   ecx,ecx
c001a883:	74 64                	je     c001a8e9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a885:	83 ec 0c             	sub    esp,0xc
c001a888:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a88b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a88f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a895:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a89c:	50                   	push   eax
c001a89d:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001a8a0:	50                   	push   eax
c001a8a1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a8a5:	50                   	push   eax
c001a8a6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a8aa:	50                   	push   eax
c001a8ab:	51                   	push   ecx
c001a8ac:	e8 65 fe ff ff       	call   c001a716 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a8b1:	83 c4 20             	add    esp,0x20
c001a8b4:	ba 01 00 00 00       	mov    edx,0x1
c001a8b9:	84 c0                	test   al,al
c001a8bb:	74 31                	je     c001a8ee <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a8bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8c1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a8c8:	89 03                	mov    DWORD PTR [ebx],eax
c001a8ca:	ba 00 00 00 00       	mov    edx,0x0
c001a8cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a8d3:	85 c0                	test   eax,eax
c001a8d5:	0f 95 06             	setne  BYTE PTR [esi]
c001a8d8:	74 14                	je     c001a8ee <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a8da:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a8e0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a8e7:	eb 05                	jmp    c001a8ee <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a8e9:	ba 04 00 00 00       	mov    edx,0x4
c001a8ee:	83 c4 14             	add    esp,0x14
c001a8f1:	89 d0                	mov    eax,edx
c001a8f3:	5b                   	pop    ebx
c001a8f4:	5e                   	pop    esi
c001a8f5:	c3                   	ret    

c001a8f6 <ISO9660::openDir(char const*, void**)>:
c001a8f6:	57                   	push   edi
c001a8f7:	56                   	push   esi
c001a8f8:	53                   	push   ebx
c001a8f9:	83 ec 10             	sub    esp,0x10
c001a8fc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a900:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a904:	85 ff                	test   edi,edi
c001a906:	0f 84 95 00 00 00    	je     c001a9a1 <ISO9660::openDir(char const*, void**)+0xab>
c001a90c:	85 f6                	test   esi,esi
c001a90e:	0f 84 8d 00 00 00    	je     c001a9a1 <ISO9660::openDir(char const*, void**)+0xab>
c001a914:	83 ec 0c             	sub    esp,0xc
c001a917:	6a 1c                	push   0x1c
c001a919:	e8 71 2b ff ff       	call   c000d48f <malloc>
c001a91e:	89 07                	mov    DWORD PTR [edi],eax
c001a920:	89 c3                	mov    ebx,eax
c001a922:	59                   	pop    ecx
c001a923:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a927:	50                   	push   eax
c001a928:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a92b:	50                   	push   eax
c001a92c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a930:	50                   	push   eax
c001a931:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a935:	50                   	push   eax
c001a936:	56                   	push   esi
c001a937:	e8 da fd ff ff       	call   c001a716 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a93c:	83 c4 20             	add    esp,0x20
c001a93f:	84 c0                	test   al,al
c001a941:	74 07                	je     c001a94a <ISO9660::openDir(char const*, void**)+0x54>
c001a943:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a948:	75 21                	jne    c001a96b <ISO9660::openDir(char const*, void**)+0x75>
c001a94a:	0f b6 c0             	movzx  eax,al
c001a94d:	52                   	push   edx
c001a94e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a952:	50                   	push   eax
c001a953:	68 5a a5 03 c0       	push   0xc003a55a
c001a958:	e8 37 25 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001a95d:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a961:	83 c4 10             	add    esp,0x10
c001a964:	b8 01 00 00 00       	mov    eax,0x1
c001a969:	eb 3b                	jmp    c001a9a6 <ISO9660::openDir(char const*, void**)+0xb0>
c001a96b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a96f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a973:	89 03                	mov    DWORD PTR [ebx],eax
c001a975:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a97c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a980:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a987:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a98e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a991:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a998:	8a 06                	mov    al,BYTE PTR [esi]
c001a99a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a99d:	31 c0                	xor    eax,eax
c001a99f:	eb 05                	jmp    c001a9a6 <ISO9660::openDir(char const*, void**)+0xb0>
c001a9a1:	b8 04 00 00 00       	mov    eax,0x4
c001a9a6:	83 c4 10             	add    esp,0x10
c001a9a9:	5b                   	pop    ebx
c001a9aa:	5e                   	pop    esi
c001a9ab:	5f                   	pop    edi
c001a9ac:	c3                   	ret    
c001a9ad:	90                   	nop

c001a9ae <ISO9660::ISO9660()>:
c001a9ae:	83 ec 0c             	sub    esp,0xc
c001a9b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9b5:	83 ec 0c             	sub    esp,0xc
c001a9b8:	50                   	push   eax
c001a9b9:	e8 8a 7c ff ff       	call   c0012648 <Filesystem::Filesystem()>
c001a9be:	83 c4 10             	add    esp,0x10
c001a9c1:	ba 80 a5 03 c0       	mov    edx,0xc003a580
c001a9c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9ca:	89 10                	mov    DWORD PTR [eax],edx
c001a9cc:	90                   	nop
c001a9cd:	83 c4 0c             	add    esp,0xc
c001a9d0:	c3                   	ret    
c001a9d1:	90                   	nop

c001a9d2 <SoundChannel::~SoundChannel()>:
c001a9d2:	83 ec 0c             	sub    esp,0xc
c001a9d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9d9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a9dc:	83 ec 0c             	sub    esp,0xc
c001a9df:	50                   	push   eax
c001a9e0:	e8 ba 2a ff ff       	call   c000d49f <free>
c001a9e5:	83 c4 10             	add    esp,0x10
c001a9e8:	90                   	nop
c001a9e9:	83 c4 0c             	add    esp,0xc
c001a9ec:	c3                   	ret    
c001a9ed:	90                   	nop

c001a9ee <SoundChannel::setSpeed(float)>:
c001a9ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9f2:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001a9f6:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001a9f9:	c3                   	ret    

c001a9fa <SoundChannel::getSpeed()>:
c001a9fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9fe:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001aa01:	c3                   	ret    

c001aa02 <SoundChannel::setVolume(int)>:
c001aa02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa06:	83 f8 64             	cmp    eax,0x64
c001aa09:	7e 05                	jle    c001aa10 <SoundChannel::setVolume(int)+0xe>
c001aa0b:	b8 64 00 00 00       	mov    eax,0x64
c001aa10:	85 c0                	test   eax,eax
c001aa12:	79 02                	jns    c001aa16 <SoundChannel::setVolume(int)+0x14>
c001aa14:	31 c0                	xor    eax,eax
c001aa16:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aa1a:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001aa1d:	c3                   	ret    

c001aa1e <SoundChannel::getVolume()>:
c001aa1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa22:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001aa25:	c3                   	ret    

c001aa26 <SoundChannel::pause()>:
c001aa26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa2a:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001aa2e:	c3                   	ret    
c001aa2f:	90                   	nop

c001aa30 <SoundChannel::SoundChannel(int, int, int, int)>:
c001aa30:	83 ec 1c             	sub    esp,0x1c
c001aa33:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aa37:	e8 ea ff ff ff       	call   c001aa26 <SoundChannel::pause()>
c001aa3c:	83 c4 04             	add    esp,0x4
c001aa3f:	6a 50                	push   0x50
c001aa41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001aa45:	e8 b8 ff ff ff       	call   c001aa02 <SoundChannel::setVolume(int)>
c001aa4a:	83 c4 08             	add    esp,0x8
c001aa4d:	d9 e8                	fld1   
c001aa4f:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001aa53:	d9 1c 24             	fstp   DWORD PTR [esp]
c001aa56:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001aa5a:	e8 8f ff ff ff       	call   c001a9ee <SoundChannel::setSpeed(float)>
c001aa5f:	83 c4 08             	add    esp,0x8
c001aa62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa66:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aa6a:	89 10                	mov    DWORD PTR [eax],edx
c001aa6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa70:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001aa74:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001aa77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa7b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001aa7f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001aa82:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001aa87:	75 23                	jne    c001aaac <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001aa89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa8d:	8b 10                	mov    edx,DWORD PTR [eax]
c001aa8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001aa96:	0f af c2             	imul   eax,edx
c001aa99:	85 c0                	test   eax,eax
c001aa9b:	79 03                	jns    c001aaa0 <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001aa9d:	83 c0 03             	add    eax,0x3
c001aaa0:	c1 f8 02             	sar    eax,0x2
c001aaa3:	05 a0 0f 00 00       	add    eax,0xfa0
c001aaa8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aaac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aab0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001aab4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001aab7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aabb:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001aac2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aac6:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001aacd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aad1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aad4:	c1 e0 02             	shl    eax,0x2
c001aad7:	83 ec 0c             	sub    esp,0xc
c001aada:	50                   	push   eax
c001aadb:	e8 af 29 ff ff       	call   c000d48f <malloc>
c001aae0:	83 c4 10             	add    esp,0x10
c001aae3:	89 c2                	mov    edx,eax
c001aae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aae9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001aaec:	83 ec 04             	sub    esp,0x4
c001aaef:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aaf3:	50                   	push   eax
c001aaf4:	6a 01                	push   0x1
c001aaf6:	6a 04                	push   0x4
c001aaf8:	e8 6b e0 fe ff       	call   c0008b68 <src_new>
c001aafd:	83 c4 10             	add    esp,0x10
c001ab00:	89 c2                	mov    edx,eax
c001ab02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab06:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ab09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab0d:	85 c0                	test   eax,eax
c001ab0f:	74 10                	je     c001ab21 <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001ab11:	83 ec 0c             	sub    esp,0xc
c001ab14:	68 dc a5 03 c0       	push   0xc003a5dc
c001ab19:	e8 94 24 ff ff       	call   c000cfb2 <panic(char const*)>
c001ab1e:	83 c4 10             	add    esp,0x10
c001ab21:	90                   	nop
c001ab22:	83 c4 1c             	add    esp,0x1c
c001ab25:	c3                   	ret    

c001ab26 <SoundChannel::play()>:
c001ab26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab2a:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001ab2e:	c3                   	ret    
c001ab2f:	90                   	nop

c001ab30 <SoundChannel::paused()>:
c001ab30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab34:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001ab37:	c3                   	ret    

c001ab38 <SoundChannel::getSampleRate()>:
c001ab38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab3c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab3e:	c3                   	ret    
c001ab3f:	90                   	nop

c001ab40 <SoundChannel::getBits()>:
c001ab40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ab47:	c3                   	ret    

c001ab48 <SoundChannel::getBufferUsed()>:
c001ab48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab4c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001ab4f:	c3                   	ret    

c001ab50 <SoundChannel::getBufferSize()>:
c001ab50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab54:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab57:	c3                   	ret    

c001ab58 <SoundChannel::unbuffer(float*, int, int)>:
c001ab58:	53                   	push   ebx
c001ab59:	83 ec 40             	sub    esp,0x40
c001ab5c:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ab60:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ab68:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ab6b:	db 03                	fild   DWORD PTR [ebx]
c001ab6d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ab71:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001ab75:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ab78:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001ab7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ab7f:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001ab83:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ab87:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ab8b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ab8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ab93:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ab97:	50                   	push   eax
c001ab98:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001ab9b:	e8 82 dc fe ff       	call   c0008822 <src_process>
c001aba0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001aba4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001aba7:	83 c4 0c             	add    esp,0xc
c001abaa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001abad:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001abb0:	29 d0                	sub    eax,edx
c001abb2:	c1 e0 02             	shl    eax,0x2
c001abb5:	50                   	push   eax
c001abb6:	8d 04 91             	lea    eax,[ecx+edx*4]
c001abb9:	50                   	push   eax
c001abba:	51                   	push   ecx
c001abbb:	e8 34 5a fe ff       	call   c00005f4 <memmove>
c001abc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abc4:	83 c4 48             	add    esp,0x48
c001abc7:	5b                   	pop    ebx
c001abc8:	c3                   	ret    
c001abc9:	90                   	nop

c001abca <SoundChannel::buffer8(unsigned char*, int)>:
c001abca:	53                   	push   ebx
c001abcb:	31 c0                	xor    eax,eax
c001abcd:	83 ec 08             	sub    esp,0x8
c001abd0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001abd4:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001abd7:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001abda:	74 35                	je     c001ac11 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001abdc:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001abe0:	7d 2f                	jge    c001ac11 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001abe2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001abe6:	d9 05 f8 a5 03 c0    	fld    DWORD PTR ds:0xc003a5f8
c001abec:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001abf0:	40                   	inc    eax
c001abf1:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001abf6:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001abf9:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001abfd:	8d 59 01             	lea    ebx,[ecx+0x1]
c001ac00:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001ac03:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001ac06:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001ac09:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ac0c:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001ac0f:	eb c9                	jmp    c001abda <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001ac11:	83 c4 08             	add    esp,0x8
c001ac14:	5b                   	pop    ebx
c001ac15:	c3                   	ret    

c001ac16 <SoundDevice::SoundDevice(char const*)>:
c001ac16:	83 ec 1c             	sub    esp,0x1c
c001ac19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac1d:	83 ec 08             	sub    esp,0x8
c001ac20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac24:	50                   	push   eax
c001ac25:	e8 14 8d ff ff       	call   c001393e <Device::Device(char const*)>
c001ac2a:	83 c4 10             	add    esp,0x10
c001ac2d:	ba 04 a6 03 c0       	mov    edx,0xc003a604
c001ac32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac36:	89 10                	mov    DWORD PTR [eax],edx
c001ac38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac3c:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ac46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac4a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001ac54:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac5c:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ac61:	7f 19                	jg     c001ac7c <SoundDevice::SoundDevice(char const*)+0x66>
c001ac63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ac6b:	83 c2 54             	add    edx,0x54
c001ac6e:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001ac76:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ac7a:	eb e0                	jmp    c001ac5c <SoundDevice::SoundDevice(char const*)+0x46>
c001ac7c:	90                   	nop
c001ac7d:	83 c4 1c             	add    esp,0x1c
c001ac80:	c3                   	ret    
c001ac81:	90                   	nop

c001ac82 <SoundDevice::~SoundDevice()>:
c001ac82:	53                   	push   ebx
c001ac83:	83 ec 18             	sub    esp,0x18
c001ac86:	ba 04 a6 03 c0       	mov    edx,0xc003a604
c001ac8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac8f:	89 10                	mov    DWORD PTR [eax],edx
c001ac91:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac99:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ac9e:	7f 46                	jg     c001ace6 <SoundDevice::~SoundDevice()+0x64>
c001aca0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aca4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aca8:	83 c2 54             	add    edx,0x54
c001acab:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001acaf:	85 c0                	test   eax,eax
c001acb1:	74 2d                	je     c001ace0 <SoundDevice::~SoundDevice()+0x5e>
c001acb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acb7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001acbb:	83 c2 54             	add    edx,0x54
c001acbe:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001acc2:	85 db                	test   ebx,ebx
c001acc4:	74 1a                	je     c001ace0 <SoundDevice::~SoundDevice()+0x5e>
c001acc6:	83 ec 0c             	sub    esp,0xc
c001acc9:	53                   	push   ebx
c001acca:	e8 03 fd ff ff       	call   c001a9d2 <SoundChannel::~SoundChannel()>
c001accf:	83 c4 10             	add    esp,0x10
c001acd2:	83 ec 08             	sub    esp,0x8
c001acd5:	6a 2c                	push   0x2c
c001acd7:	53                   	push   ebx
c001acd8:	e8 76 77 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c001acdd:	83 c4 10             	add    esp,0x10
c001ace0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ace4:	eb b3                	jmp    c001ac99 <SoundDevice::~SoundDevice()+0x17>
c001ace6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acea:	83 ec 0c             	sub    esp,0xc
c001aced:	50                   	push   eax
c001acee:	e8 fd 88 ff ff       	call   c00135f0 <Device::~Device()>
c001acf3:	83 c4 10             	add    esp,0x10
c001acf6:	90                   	nop
c001acf7:	83 c4 18             	add    esp,0x18
c001acfa:	5b                   	pop    ebx
c001acfb:	c3                   	ret    

c001acfc <SoundDevice::~SoundDevice()>:
c001acfc:	83 ec 0c             	sub    esp,0xc
c001acff:	83 ec 0c             	sub    esp,0xc
c001ad02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad06:	e8 77 ff ff ff       	call   c001ac82 <SoundDevice::~SoundDevice()>
c001ad0b:	83 c4 10             	add    esp,0x10
c001ad0e:	83 ec 08             	sub    esp,0x8
c001ad11:	68 e4 01 00 00       	push   0x1e4
c001ad16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad1a:	e8 34 77 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c001ad1f:	83 c4 10             	add    esp,0x10
c001ad22:	83 c4 0c             	add    esp,0xc
c001ad25:	c3                   	ret    

c001ad26 <SoundDevice::getFreeChannelNum()>:
c001ad26:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ad2a:	31 c0                	xor    eax,eax
c001ad2c:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001ad34:	74 09                	je     c001ad3f <SoundDevice::getFreeChannelNum()+0x19>
c001ad36:	40                   	inc    eax
c001ad37:	83 f8 20             	cmp    eax,0x20
c001ad3a:	75 f0                	jne    c001ad2c <SoundDevice::getFreeChannelNum()+0x6>
c001ad3c:	83 c8 ff             	or     eax,0xffffffff
c001ad3f:	c3                   	ret    

c001ad40 <SoundDevice::addChannel(SoundChannel*)>:
c001ad40:	56                   	push   esi
c001ad41:	53                   	push   ebx
c001ad42:	51                   	push   ecx
c001ad43:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ad47:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ad4b:	53                   	push   ebx
c001ad4c:	e8 d5 ff ff ff       	call   c001ad26 <SoundDevice::getFreeChannelNum()>
c001ad51:	5a                   	pop    edx
c001ad52:	83 f8 ff             	cmp    eax,0xffffffff
c001ad55:	74 51                	je     c001ada8 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001ad57:	85 f6                	test   esi,esi
c001ad59:	74 4d                	je     c001ada8 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001ad5b:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001ad62:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001ad69:	75 30                	jne    c001ad9b <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001ad6b:	83 ec 0c             	sub    esp,0xc
c001ad6e:	56                   	push   esi
c001ad6f:	e8 c4 fd ff ff       	call   c001ab38 <SoundChannel::getSampleRate()>
c001ad74:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001ad7a:	89 34 24             	mov    DWORD PTR [esp],esi
c001ad7d:	e8 be fd ff ff       	call   c001ab40 <SoundChannel::getBits()>
c001ad82:	83 c4 0c             	add    esp,0xc
c001ad85:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001ad8b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ad8d:	50                   	push   eax
c001ad8e:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001ad94:	53                   	push   ebx
c001ad95:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001ad98:	83 c4 10             	add    esp,0x10
c001ad9b:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001ada1:	b8 01 00 00 00       	mov    eax,0x1
c001ada6:	eb 03                	jmp    c001adab <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001ada8:	83 c8 ff             	or     eax,0xffffffff
c001adab:	5a                   	pop    edx
c001adac:	5b                   	pop    ebx
c001adad:	5e                   	pop    esi
c001adae:	c3                   	ret    
c001adaf:	90                   	nop

c001adb0 <SoundDevice::removeChannel(int)>:
c001adb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001adb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001adb8:	83 fa 1f             	cmp    edx,0x1f
c001adbb:	77 23                	ja     c001ade0 <SoundDevice::removeChannel(int)+0x30>
c001adbd:	8d 14 90             	lea    edx,[eax+edx*4]
c001adc0:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001adc7:	74 17                	je     c001ade0 <SoundDevice::removeChannel(int)+0x30>
c001adc9:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001add3:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001add9:	75 05                	jne    c001ade0 <SoundDevice::removeChannel(int)+0x30>
c001addb:	8b 00                	mov    eax,DWORD PTR [eax]
c001addd:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001ade0:	c3                   	ret    
c001ade1:	90                   	nop

c001ade2 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001ade2:	56                   	push   esi
c001ade3:	53                   	push   ebx
c001ade4:	31 db                	xor    ebx,ebx
c001ade6:	83 ec 14             	sub    esp,0x14
c001ade9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001aded:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001adf1:	7d 55                	jge    c001ae48 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001adf3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001adf7:	d9 e8                	fld1   
c001adf9:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001adfc:	d8 0d 34 a6 03 c0    	fmul   DWORD PTR ds:0xc003a634
c001ae02:	d8 0d 38 a6 03 c0    	fmul   DWORD PTR ds:0xc003a638
c001ae08:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001ae0c:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001ae10:	d8 15 3c a6 03 c0    	fcom   DWORD PTR ds:0xc003a63c
c001ae16:	df e0                	fnstsw ax
c001ae18:	9e                   	sahf   
c001ae19:	72 08                	jb     c001ae23 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001ae1b:	dd d8                	fstp   st(0)
c001ae1d:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001ae21:	eb 22                	jmp    c001ae45 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001ae23:	d9 ee                	fldz   
c001ae25:	d8 d9                	fcomp  st(1)
c001ae27:	df e0                	fnstsw ax
c001ae29:	9e                   	sahf   
c001ae2a:	72 08                	jb     c001ae34 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001ae2c:	dd d8                	fstp   st(0)
c001ae2e:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001ae32:	eb 11                	jmp    c001ae45 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001ae34:	83 ec 10             	sub    esp,0x10
c001ae37:	d9 1c 24             	fstp   DWORD PTR [esp]
c001ae3a:	e8 cd 3a 00 00       	call   c001e90c <lrintf>
c001ae3f:	83 c4 10             	add    esp,0x10
c001ae42:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001ae45:	43                   	inc    ebx
c001ae46:	eb a5                	jmp    c001aded <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001ae48:	83 c4 14             	add    esp,0x14
c001ae4b:	5b                   	pop    ebx
c001ae4c:	5e                   	pop    esi
c001ae4d:	c3                   	ret    

c001ae4e <SoundDevice::getAudio(int, float*, float*)>:
c001ae4e:	55                   	push   ebp
c001ae4f:	57                   	push   edi
c001ae50:	56                   	push   esi
c001ae51:	53                   	push   ebx
c001ae52:	31 db                	xor    ebx,ebx
c001ae54:	83 ec 20             	sub    esp,0x20
c001ae57:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ae5b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ae5f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ae63:	c1 e0 02             	shl    eax,0x2
c001ae66:	50                   	push   eax
c001ae67:	6a 00                	push   0x0
c001ae69:	55                   	push   ebp
c001ae6a:	e8 69 58 fe ff       	call   c00006d8 <memset>
c001ae6f:	83 c4 10             	add    esp,0x10
c001ae72:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ae76:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001ae7d:	85 c0                	test   eax,eax
c001ae7f:	0f 84 94 00 00 00    	je     c001af19 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ae85:	83 ec 0c             	sub    esp,0xc
c001ae88:	50                   	push   eax
c001ae89:	e8 a2 fc ff ff       	call   c001ab30 <SoundChannel::paused()>
c001ae8e:	83 c4 10             	add    esp,0x10
c001ae91:	84 c0                	test   al,al
c001ae93:	0f 85 80 00 00 00    	jne    c001af19 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ae99:	83 ec 0c             	sub    esp,0xc
c001ae9c:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001aea3:	e8 76 fb ff ff       	call   c001aa1e <SoundChannel::getVolume()>
c001aea8:	83 c4 10             	add    esp,0x10
c001aeab:	85 c0                	test   eax,eax
c001aead:	74 6a                	je     c001af19 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001aeaf:	83 ec 0c             	sub    esp,0xc
c001aeb2:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001aeb9:	e8 60 fb ff ff       	call   c001aa1e <SoundChannel::getVolume()>
c001aebe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aec2:	d9 05 40 a6 03 c0    	fld    DWORD PTR ds:0xc003a640
c001aec8:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001aecc:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001aed0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aed4:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001aeda:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001aede:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001aee5:	e8 6e fc ff ff       	call   c001ab58 <SoundChannel::unbuffer(float*, int, int)>
c001aeea:	83 c4 20             	add    esp,0x20
c001aeed:	31 d2                	xor    edx,edx
c001aeef:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001aef3:	39 c2                	cmp    edx,eax
c001aef5:	7d 1a                	jge    c001af11 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001aef7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001aefb:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001aefe:	d8 c9                	fmul   st,st(1)
c001af00:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001af06:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001af0a:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001af0e:	42                   	inc    edx
c001af0f:	eb e2                	jmp    c001aef3 <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001af11:	dd d8                	fstp   st(0)
c001af13:	39 c7                	cmp    edi,eax
c001af15:	7e 02                	jle    c001af19 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001af17:	89 c7                	mov    edi,eax
c001af19:	43                   	inc    ebx
c001af1a:	83 fb 20             	cmp    ebx,0x20
c001af1d:	0f 85 53 ff ff ff    	jne    c001ae76 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001af23:	83 c4 1c             	add    esp,0x1c
c001af26:	89 f8                	mov    eax,edi
c001af28:	5b                   	pop    ebx
c001af29:	5e                   	pop    esi
c001af2a:	5f                   	pop    edi
c001af2b:	5d                   	pop    ebp
c001af2c:	c3                   	ret    
c001af2d:	90                   	nop

c001af2e <PCI::open(int, int, void*)>:
c001af2e:	83 ec 18             	sub    esp,0x18
c001af31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af35:	8b 10                	mov    edx,DWORD PTR [eax]
c001af37:	50                   	push   eax
c001af38:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001af3b:	31 c0                	xor    eax,eax
c001af3d:	83 c4 1c             	add    esp,0x1c
c001af40:	c3                   	ret    
c001af41:	90                   	nop

c001af42 <PCI::close(int, int, void*)>:
c001af42:	31 c0                	xor    eax,eax
c001af44:	c3                   	ret    
c001af45:	90                   	nop

c001af46 <PCI::PCI()>:
c001af46:	83 ec 0c             	sub    esp,0xc
c001af49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af4d:	83 ec 08             	sub    esp,0x8
c001af50:	68 44 a6 03 c0       	push   0xc003a644
c001af55:	50                   	push   eax
c001af56:	e8 6f 80 ff ff       	call   c0012fca <Bus::Bus(char const*)>
c001af5b:	83 c4 10             	add    esp,0x10
c001af5e:	ba f0 a6 03 c0       	mov    edx,0xc003a6f0
c001af63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af67:	89 10                	mov    DWORD PTR [eax],edx
c001af69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af6d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001af73:	0f b6 d0             	movzx  edx,al
c001af76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af7a:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001af81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af85:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001af8b:	0f b6 d0             	movzx  edx,al
c001af8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af92:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001af97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af9b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001afa1:	8d 50 01             	lea    edx,[eax+0x1]
c001afa4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001afa8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001afae:	0f b6 d0             	movzx  edx,al
c001afb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afb5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001afb9:	83 c9 c0             	or     ecx,0xffffffc0
c001afbc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001afc0:	90                   	nop
c001afc1:	83 c4 0c             	add    esp,0xc
c001afc4:	c3                   	ret    
c001afc5:	90                   	nop

c001afc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001afc6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001afca:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001afcf:	89 ca                	mov    edx,ecx
c001afd1:	c1 e0 10             	shl    eax,0x10
c001afd4:	81 e2 fc 00 00 00    	and    edx,0xfc
c001afda:	09 d0                	or     eax,edx
c001afdc:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001afe1:	c1 e2 08             	shl    edx,0x8
c001afe4:	09 d0                	or     eax,edx
c001afe6:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001afeb:	c1 e2 0b             	shl    edx,0xb
c001afee:	09 d0                	or     eax,edx
c001aff0:	ba f8 0c 00 00       	mov    edx,0xcf8
c001aff5:	0d 00 00 00 80       	or     eax,0x80000000
c001affa:	ef                   	out    dx,eax
c001affb:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b000:	ed                   	in     eax,dx
c001b001:	83 e1 02             	and    ecx,0x2
c001b004:	0f b6 c9             	movzx  ecx,cl
c001b007:	c1 e1 03             	shl    ecx,0x3
c001b00a:	d3 e8                	shr    eax,cl
c001b00c:	c3                   	ret    
c001b00d:	90                   	nop

c001b00e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b00e:	6a 00                	push   0x0
c001b010:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b015:	50                   	push   eax
c001b016:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b01b:	50                   	push   eax
c001b01c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b021:	50                   	push   eax
c001b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b026:	e8 9b ff ff ff       	call   c001afc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b02b:	83 c4 14             	add    esp,0x14
c001b02e:	c3                   	ret    
c001b02f:	90                   	nop

c001b030 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b030:	6a 0e                	push   0xe
c001b032:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b037:	50                   	push   eax
c001b038:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b03d:	50                   	push   eax
c001b03e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b043:	50                   	push   eax
c001b044:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b048:	e8 79 ff ff ff       	call   c001afc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b04d:	83 c4 14             	add    esp,0x14
c001b050:	0f b6 c0             	movzx  eax,al
c001b053:	c3                   	ret    

c001b054 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b054:	55                   	push   ebp
c001b055:	57                   	push   edi
c001b056:	56                   	push   esi
c001b057:	53                   	push   ebx
c001b058:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b05d:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b062:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001b067:	6a 0a                	push   0xa
c001b069:	56                   	push   esi
c001b06a:	55                   	push   ebp
c001b06b:	57                   	push   edi
c001b06c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b070:	e8 51 ff ff ff       	call   c001afc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b075:	6a 0a                	push   0xa
c001b077:	89 c3                	mov    ebx,eax
c001b079:	56                   	push   esi
c001b07a:	0f b6 db             	movzx  ebx,bl
c001b07d:	55                   	push   ebp
c001b07e:	57                   	push   edi
c001b07f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b083:	e8 3e ff ff ff       	call   c001afc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b088:	83 c4 28             	add    esp,0x28
c001b08b:	25 00 ff 00 00       	and    eax,0xff00
c001b090:	09 d8                	or     eax,ebx
c001b092:	5b                   	pop    ebx
c001b093:	5e                   	pop    esi
c001b094:	5f                   	pop    edi
c001b095:	5d                   	pop    ebp
c001b096:	c3                   	ret    
c001b097:	90                   	nop

c001b098 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b098:	6a 08                	push   0x8
c001b09a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b09f:	50                   	push   eax
c001b0a0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0a5:	50                   	push   eax
c001b0a6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0ab:	50                   	push   eax
c001b0ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b0b0:	e8 11 ff ff ff       	call   c001afc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0b5:	83 c4 14             	add    esp,0x14
c001b0b8:	0f b6 c4             	movzx  eax,ah
c001b0bb:	c3                   	ret    

c001b0bc <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b0bc:	6a 08                	push   0x8
c001b0be:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0c3:	50                   	push   eax
c001b0c4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0c9:	50                   	push   eax
c001b0ca:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0cf:	50                   	push   eax
c001b0d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b0d4:	e8 ed fe ff ff       	call   c001afc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0d9:	83 c4 14             	add    esp,0x14
c001b0dc:	c3                   	ret    
c001b0dd:	90                   	nop

c001b0de <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b0de:	6a 3c                	push   0x3c
c001b0e0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0e5:	50                   	push   eax
c001b0e6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0eb:	50                   	push   eax
c001b0ec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0f1:	50                   	push   eax
c001b0f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b0f6:	e8 cb fe ff ff       	call   c001afc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0fb:	83 c4 14             	add    esp,0x14
c001b0fe:	c3                   	ret    
c001b0ff:	90                   	nop

c001b100 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b100:	6a 18                	push   0x18
c001b102:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b107:	50                   	push   eax
c001b108:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b10d:	50                   	push   eax
c001b10e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b113:	50                   	push   eax
c001b114:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b118:	e8 a9 fe ff ff       	call   c001afc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b11d:	83 c4 14             	add    esp,0x14
c001b120:	0f b6 c4             	movzx  eax,ah
c001b123:	c3                   	ret    

c001b124 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b124:	55                   	push   ebp
c001b125:	57                   	push   edi
c001b126:	56                   	push   esi
c001b127:	53                   	push   ebx
c001b128:	50                   	push   eax
c001b129:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b12d:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001b132:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b137:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001b13c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b143:	8d 43 12             	lea    eax,[ebx+0x12]
c001b146:	83 c3 10             	add    ebx,0x10
c001b149:	0f b6 c0             	movzx  eax,al
c001b14c:	0f b6 db             	movzx  ebx,bl
c001b14f:	50                   	push   eax
c001b150:	51                   	push   ecx
c001b151:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b155:	57                   	push   edi
c001b156:	55                   	push   ebp
c001b157:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b15b:	e8 66 fe ff ff       	call   c001afc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b160:	53                   	push   ebx
c001b161:	89 c6                	mov    esi,eax
c001b163:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b167:	c1 e6 10             	shl    esi,0x10
c001b16a:	51                   	push   ecx
c001b16b:	57                   	push   edi
c001b16c:	55                   	push   ebp
c001b16d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b171:	e8 50 fe ff ff       	call   c001afc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b176:	83 c4 2c             	add    esp,0x2c
c001b179:	0f b7 c0             	movzx  eax,ax
c001b17c:	5b                   	pop    ebx
c001b17d:	09 f0                	or     eax,esi
c001b17f:	5e                   	pop    esi
c001b180:	5f                   	pop    edi
c001b181:	5d                   	pop    ebp
c001b182:	c3                   	ret    
c001b183:	90                   	nop

c001b184 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b184:	53                   	push   ebx
c001b185:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b18a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b18f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b193:	c1 e1 10             	shl    ecx,0x10
c001b196:	25 fc 00 00 00       	and    eax,0xfc
c001b19b:	09 c1                	or     ecx,eax
c001b19d:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b1a2:	c1 e0 08             	shl    eax,0x8
c001b1a5:	09 c1                	or     ecx,eax
c001b1a7:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b1ac:	c1 e0 0b             	shl    eax,0xb
c001b1af:	09 c1                	or     ecx,eax
c001b1b1:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b1b7:	89 c8                	mov    eax,ecx
c001b1b9:	ef                   	out    dx,eax
c001b1ba:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b1bf:	ed                   	in     eax,dx
c001b1c0:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001b1c5:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001b1ca:	74 0a                	je     c001b1d6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001b1cc:	0f b7 d8             	movzx  ebx,ax
c001b1cf:	89 d0                	mov    eax,edx
c001b1d1:	c1 e0 10             	shl    eax,0x10
c001b1d4:	eb 05                	jmp    c001b1db <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001b1d6:	66 31 c0             	xor    ax,ax
c001b1d9:	89 d3                	mov    ebx,edx
c001b1db:	09 c3                	or     ebx,eax
c001b1dd:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b1e2:	89 c8                	mov    eax,ecx
c001b1e4:	ef                   	out    dx,eax
c001b1e5:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b1ea:	89 d8                	mov    eax,ebx
c001b1ec:	ef                   	out    dx,eax
c001b1ed:	5b                   	pop    ebx
c001b1ee:	c3                   	ret    
c001b1ef:	90                   	nop

c001b1f0 <PCI::checkBus(unsigned char)>:
c001b1f0:	56                   	push   esi
c001b1f1:	53                   	push   ebx
c001b1f2:	31 db                	xor    ebx,ebx
c001b1f4:	51                   	push   ecx
c001b1f5:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b1fa:	52                   	push   edx
c001b1fb:	53                   	push   ebx
c001b1fc:	43                   	inc    ebx
c001b1fd:	56                   	push   esi
c001b1fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b202:	e8 4d 03 00 00       	call   c001b554 <PCI::checkDevice(unsigned char, unsigned char)>
c001b207:	83 c4 10             	add    esp,0x10
c001b20a:	83 fb 20             	cmp    ebx,0x20
c001b20d:	75 eb                	jne    c001b1fa <PCI::checkBus(unsigned char)+0xa>
c001b20f:	58                   	pop    eax
c001b210:	5b                   	pop    ebx
c001b211:	5e                   	pop    esi
c001b212:	c3                   	ret    
c001b213:	90                   	nop

c001b214 <PCI::foundDevice(PCIDeviceInfo)>:
c001b214:	55                   	push   ebp
c001b215:	57                   	push   edi
c001b216:	56                   	push   esi
c001b217:	53                   	push   ebx
c001b218:	83 ec 1c             	sub    esp,0x1c
c001b21b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b21f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001b225:	0f 84 51 01 00 00    	je     c001b37c <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b22b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b22f:	66 81 f9 06 04       	cmp    cx,0x406
c001b234:	75 2c                	jne    c001b262 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001b236:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b23b:	50                   	push   eax
c001b23c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b241:	50                   	push   eax
c001b242:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b247:	50                   	push   eax
c001b248:	56                   	push   esi
c001b249:	e8 b2 fe ff ff       	call   c001b100 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b24e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b252:	0f b6 c0             	movzx  eax,al
c001b255:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b259:	83 c4 2c             	add    esp,0x2c
c001b25c:	5b                   	pop    ebx
c001b25d:	5e                   	pop    esi
c001b25e:	5f                   	pop    edi
c001b25f:	5d                   	pop    ebp
c001b260:	eb 8e                	jmp    c001b1f0 <PCI::checkBus(unsigned char)>
c001b262:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b266:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b26c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b270:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b274:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001b278:	88 d3                	mov    bl,dl
c001b27a:	85 c0                	test   eax,eax
c001b27c:	74 33                	je     c001b2b1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b27e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b281:	85 d2                	test   edx,edx
c001b283:	74 28                	je     c001b2ad <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b285:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001b28b:	31 ef                	xor    edi,ebp
c001b28d:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001b293:	75 18                	jne    c001b2ad <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b295:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b299:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001b29f:	75 0c                	jne    c001b2ad <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b2a1:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001b2a7:	0f 84 cf 00 00 00    	je     c001b37c <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b2ad:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2af:	eb c9                	jmp    c001b27a <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001b2b1:	66 81 f9 01 06       	cmp    cx,0x601
c001b2b6:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001b2ba:	75 18                	jne    c001b2d4 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001b2bc:	83 ec 0c             	sub    esp,0xc
c001b2bf:	68 58 01 00 00       	push   0x158
c001b2c4:	e8 7b 71 ff ff       	call   c0012444 <operator new(unsigned long)>
c001b2c9:	59                   	pop    ecx
c001b2ca:	89 c5                	mov    ebp,eax
c001b2cc:	5f                   	pop    edi
c001b2cd:	68 4c a6 03 c0       	push   0xc003a64c
c001b2d2:	eb 7d                	jmp    c001b351 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001b2d4:	66 81 f9 01 01       	cmp    cx,0x101
c001b2d9:	75 60                	jne    c001b33b <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001b2db:	83 ec 0c             	sub    esp,0xc
c001b2de:	68 70 02 00 00       	push   0x270
c001b2e3:	e8 5c 71 ff ff       	call   c0012444 <operator new(unsigned long)>
c001b2e8:	89 04 24             	mov    DWORD PTR [esp],eax
c001b2eb:	89 c5                	mov    ebp,eax
c001b2ed:	e8 e0 07 00 00       	call   c001bad2 <IDE::IDE()>
c001b2f2:	58                   	pop    eax
c001b2f3:	5a                   	pop    edx
c001b2f4:	55                   	push   ebp
c001b2f5:	56                   	push   esi
c001b2f6:	e8 53 84 ff ff       	call   c001374e <Device::addChild(Device*)>
c001b2fb:	83 ec 1c             	sub    esp,0x1c
c001b2fe:	b9 09 00 00 00       	mov    ecx,0x9
c001b303:	fc                   	cld    
c001b304:	89 e7                	mov    edi,esp
c001b306:	89 de                	mov    esi,ebx
c001b308:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b30a:	55                   	push   ebp
c001b30b:	e8 18 83 ff ff       	call   c0013628 <Device::preOpenPCI(PCIDeviceInfo)>
c001b310:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b313:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b317:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b31f:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b327:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b32f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b332:	83 c4 4c             	add    esp,0x4c
c001b335:	5b                   	pop    ebx
c001b336:	5e                   	pop    esi
c001b337:	5f                   	pop    edi
c001b338:	5d                   	pop    ebp
c001b339:	ff e0                	jmp    eax
c001b33b:	83 ec 0c             	sub    esp,0xc
c001b33e:	68 58 01 00 00       	push   0x158
c001b343:	e8 fc 70 ff ff       	call   c0012444 <operator new(unsigned long)>
c001b348:	59                   	pop    ecx
c001b349:	89 c5                	mov    ebp,eax
c001b34b:	5f                   	pop    edi
c001b34c:	68 6b a6 03 c0       	push   0xc003a66b
c001b351:	55                   	push   ebp
c001b352:	e8 e3 86 ff ff       	call   c0013a3a <DriverlessDevice::DriverlessDevice(char const*)>
c001b357:	58                   	pop    eax
c001b358:	5a                   	pop    edx
c001b359:	55                   	push   ebp
c001b35a:	56                   	push   esi
c001b35b:	e8 ee 83 ff ff       	call   c001374e <Device::addChild(Device*)>
c001b360:	b9 09 00 00 00       	mov    ecx,0x9
c001b365:	fc                   	cld    
c001b366:	89 df                	mov    edi,ebx
c001b368:	89 de                	mov    esi,ebx
c001b36a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b36c:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001b370:	83 c4 2c             	add    esp,0x2c
c001b373:	5b                   	pop    ebx
c001b374:	5e                   	pop    esi
c001b375:	5f                   	pop    edi
c001b376:	5d                   	pop    ebp
c001b377:	e9 ac 82 ff ff       	jmp    c0013628 <Device::preOpenPCI(PCIDeviceInfo)>
c001b37c:	83 c4 1c             	add    esp,0x1c
c001b37f:	5b                   	pop    ebx
c001b380:	5e                   	pop    esi
c001b381:	5f                   	pop    edi
c001b382:	5d                   	pop    ebp
c001b383:	c3                   	ret    

c001b384 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b384:	55                   	push   ebp
c001b385:	57                   	push   edi
c001b386:	56                   	push   esi
c001b387:	53                   	push   ebx
c001b388:	83 ec 5c             	sub    esp,0x5c
c001b38b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001b38f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b393:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001b397:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001b39c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b3a0:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001b3a4:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001b3a9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b3ad:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001b3b2:	6a 0c                	push   0xc
c001b3b4:	55                   	push   ebp
c001b3b5:	53                   	push   ebx
c001b3b6:	57                   	push   edi
c001b3b7:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001b3be:	e8 03 fc ff ff       	call   c001afc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3c3:	83 c4 0c             	add    esp,0xc
c001b3c6:	6a 00                	push   0x0
c001b3c8:	68 85 a6 03 c0       	push   0xc003a685
c001b3cd:	e8 c2 1a ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001b3d2:	55                   	push   ebp
c001b3d3:	53                   	push   ebx
c001b3d4:	57                   	push   edi
c001b3d5:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b3dc:	e8 73 fc ff ff       	call   c001b054 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b3e1:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001b3e6:	83 c4 20             	add    esp,0x20
c001b3e9:	55                   	push   ebp
c001b3ea:	53                   	push   ebx
c001b3eb:	57                   	push   edi
c001b3ec:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b3f0:	e8 e9 fc ff ff       	call   c001b0de <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b3f5:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001b3fc:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b400:	55                   	push   ebp
c001b401:	53                   	push   ebx
c001b402:	57                   	push   edi
c001b403:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b40a:	e8 b7 fb ff ff       	call   c001afc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b40f:	0f b6 c4             	movzx  eax,ah
c001b412:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b416:	83 c4 18             	add    esp,0x18
c001b419:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b41d:	68 99 a6 03 c0       	push   0xc003a699
c001b422:	e8 6d 1a ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001b427:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b42b:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001b42f:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c001b434:	83 c4 10             	add    esp,0x10
c001b437:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001b43d:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001b444:	74 6c                	je     c001b4b2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b446:	31 f6                	xor    esi,esi
c001b448:	8b 15 c8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9c8
c001b44e:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b454:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001b45a:	7e 56                	jle    c001b4b2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b45c:	8d 14 f2             	lea    edx,[edx+esi*8]
c001b45f:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001b466:	39 cb                	cmp    ebx,ecx
c001b468:	75 45                	jne    c001b4af <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b46a:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001b471:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001b475:	75 38                	jne    c001b4af <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b477:	83 ec 0c             	sub    esp,0xc
c001b47a:	68 a8 a6 03 c0       	push   0xc003a6a8
c001b47f:	e8 10 1a ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001b484:	8b 15 c8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9c8
c001b48a:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b490:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001b498:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001b49c:	52                   	push   edx
c001b49d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b4a1:	53                   	push   ebx
c001b4a2:	68 cd a6 03 c0       	push   0xc003a6cd
c001b4a7:	e8 e8 19 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001b4ac:	83 c4 20             	add    esp,0x20
c001b4af:	46                   	inc    esi
c001b4b0:	eb 96                	jmp    c001b448 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001b4b2:	31 d2                	xor    edx,edx
c001b4b4:	83 ec 0c             	sub    esp,0xc
c001b4b7:	55                   	push   ebp
c001b4b8:	53                   	push   ebx
c001b4b9:	57                   	push   edi
c001b4ba:	52                   	push   edx
c001b4bb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b4bf:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b4c6:	e8 59 fc ff ff       	call   c001b124 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4cb:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001b4cf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b4d3:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b4d7:	42                   	inc    edx
c001b4d8:	83 c4 20             	add    esp,0x20
c001b4db:	83 fa 06             	cmp    edx,0x6
c001b4de:	75 d4                	jne    c001b4b4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001b4e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b4e4:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001b4e8:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001b4ec:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001b4f0:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001b4f4:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b4f8:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b4fd:	86 e0                	xchg   al,ah
c001b4ff:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001b504:	55                   	push   ebp
c001b505:	53                   	push   ebx
c001b506:	57                   	push   edi
c001b507:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b50b:	e8 88 fb ff ff       	call   c001b098 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b510:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b514:	55                   	push   ebp
c001b515:	53                   	push   ebx
c001b516:	57                   	push   edi
c001b517:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b51e:	e8 eb fa ff ff       	call   c001b00e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b523:	83 ec 0c             	sub    esp,0xc
c001b526:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001b52b:	b9 09 00 00 00       	mov    ecx,0x9
c001b530:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001b534:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001b538:	fc                   	cld    
c001b539:	89 e7                	mov    edi,esp
c001b53b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b53d:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001b544:	e8 cb fc ff ff       	call   c001b214 <PCI::foundDevice(PCIDeviceInfo)>
c001b549:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b54f:	5b                   	pop    ebx
c001b550:	5e                   	pop    esi
c001b551:	5f                   	pop    edi
c001b552:	5d                   	pop    ebp
c001b553:	c3                   	ret    

c001b554 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b554:	55                   	push   ebp
c001b555:	57                   	push   edi
c001b556:	56                   	push   esi
c001b557:	53                   	push   ebx
c001b558:	83 ec 0c             	sub    esp,0xc
c001b55b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b55f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b564:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b569:	6a 00                	push   0x0
c001b56b:	56                   	push   esi
c001b56c:	57                   	push   edi
c001b56d:	55                   	push   ebp
c001b56e:	e8 9b fa ff ff       	call   c001b00e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b573:	6a 00                	push   0x0
c001b575:	56                   	push   esi
c001b576:	57                   	push   edi
c001b577:	55                   	push   ebp
c001b578:	e8 07 fe ff ff       	call   c001b384 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b57d:	83 c4 20             	add    esp,0x20
c001b580:	6a 00                	push   0x0
c001b582:	56                   	push   esi
c001b583:	57                   	push   edi
c001b584:	55                   	push   ebp
c001b585:	e8 a6 fa ff ff       	call   c001b030 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b58a:	83 c4 10             	add    esp,0x10
c001b58d:	84 c0                	test   al,al
c001b58f:	79 27                	jns    c001b5b8 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b591:	bb 01 00 00 00       	mov    ebx,0x1
c001b596:	53                   	push   ebx
c001b597:	56                   	push   esi
c001b598:	57                   	push   edi
c001b599:	55                   	push   ebp
c001b59a:	e8 6f fa ff ff       	call   c001b00e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b59f:	83 c4 10             	add    esp,0x10
c001b5a2:	66 40                	inc    ax
c001b5a4:	74 0c                	je     c001b5b2 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001b5a6:	53                   	push   ebx
c001b5a7:	56                   	push   esi
c001b5a8:	57                   	push   edi
c001b5a9:	55                   	push   ebp
c001b5aa:	e8 d5 fd ff ff       	call   c001b384 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b5af:	83 c4 10             	add    esp,0x10
c001b5b2:	43                   	inc    ebx
c001b5b3:	83 fb 08             	cmp    ebx,0x8
c001b5b6:	75 de                	jne    c001b596 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b5b8:	83 c4 0c             	add    esp,0xc
c001b5bb:	5b                   	pop    ebx
c001b5bc:	5e                   	pop    esi
c001b5bd:	5f                   	pop    edi
c001b5be:	5d                   	pop    ebp
c001b5bf:	c3                   	ret    

c001b5c0 <PCI::detect()>:
c001b5c0:	56                   	push   esi
c001b5c1:	53                   	push   ebx
c001b5c2:	53                   	push   ebx
c001b5c3:	31 db                	xor    ebx,ebx
c001b5c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b5c9:	6a 00                	push   0x0
c001b5cb:	6a 00                	push   0x0
c001b5cd:	6a 00                	push   0x0
c001b5cf:	56                   	push   esi
c001b5d0:	e8 5b fa ff ff       	call   c001b030 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b5d5:	83 c4 10             	add    esp,0x10
c001b5d8:	a8 80                	test   al,0x80
c001b5da:	75 21                	jne    c001b5fd <PCI::detect()+0x3d>
c001b5dc:	51                   	push   ecx
c001b5dd:	51                   	push   ecx
c001b5de:	6a 00                	push   0x0
c001b5e0:	56                   	push   esi
c001b5e1:	e8 0a fc ff ff       	call   c001b1f0 <PCI::checkBus(unsigned char)>
c001b5e6:	83 c4 10             	add    esp,0x10
c001b5e9:	eb 24                	jmp    c001b60f <PCI::detect()+0x4f>
c001b5eb:	52                   	push   edx
c001b5ec:	52                   	push   edx
c001b5ed:	53                   	push   ebx
c001b5ee:	43                   	inc    ebx
c001b5ef:	56                   	push   esi
c001b5f0:	e8 fb fb ff ff       	call   c001b1f0 <PCI::checkBus(unsigned char)>
c001b5f5:	83 c4 10             	add    esp,0x10
c001b5f8:	83 fb 08             	cmp    ebx,0x8
c001b5fb:	74 12                	je     c001b60f <PCI::detect()+0x4f>
c001b5fd:	53                   	push   ebx
c001b5fe:	6a 00                	push   0x0
c001b600:	6a 00                	push   0x0
c001b602:	56                   	push   esi
c001b603:	e8 06 fa ff ff       	call   c001b00e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b608:	83 c4 10             	add    esp,0x10
c001b60b:	66 40                	inc    ax
c001b60d:	74 dc                	je     c001b5eb <PCI::detect()+0x2b>
c001b60f:	58                   	pop    eax
c001b610:	5b                   	pop    ebx
c001b611:	5e                   	pop    esi
c001b612:	c3                   	ret    
c001b613:	90                   	nop

c001b614 <RTC::open(int, int, void*)>:
c001b614:	31 c0                	xor    eax,eax
c001b616:	c3                   	ret    
c001b617:	90                   	nop

c001b618 <RTC::close(int, int, void*)>:
c001b618:	31 c0                	xor    eax,eax
c001b61a:	c3                   	ret    
c001b61b:	90                   	nop

c001b61c <RTC::timeInSecondsUTC()>:
c001b61c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b620:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b626:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b62c:	c3                   	ret    
c001b62d:	90                   	nop

c001b62e <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001b62e:	31 c0                	xor    eax,eax
c001b630:	c3                   	ret    
c001b631:	90                   	nop

c001b632 <RTC::timeInDatetimeUTC()>:
c001b632:	53                   	push   ebx
c001b633:	83 ec 14             	sub    esp,0x14
c001b636:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b63a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b63e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b640:	50                   	push   eax
c001b641:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b644:	83 c4 0c             	add    esp,0xc
c001b647:	52                   	push   edx
c001b648:	50                   	push   eax
c001b649:	53                   	push   ebx
c001b64a:	e8 13 7e ff ff       	call   c0013462 <secondsToDatetime(unsigned long long)>
c001b64f:	89 d8                	mov    eax,ebx
c001b651:	83 c4 14             	add    esp,0x14
c001b654:	5b                   	pop    ebx
c001b655:	c2 04 00             	ret    0x4

c001b658 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001b658:	56                   	push   esi
c001b659:	53                   	push   ebx
c001b65a:	83 ec 14             	sub    esp,0x14
c001b65d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b661:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b663:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001b666:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b66a:	52                   	push   edx
c001b66b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b66f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b673:	50                   	push   eax
c001b674:	e8 e9 7d ff ff       	call   c0013462 <secondsToDatetime(unsigned long long)>
c001b679:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b67d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b681:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b685:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001b689:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b68d:	89 f0                	mov    eax,esi
c001b68f:	83 c4 20             	add    esp,0x20
c001b692:	5b                   	pop    ebx
c001b693:	5e                   	pop    esi
c001b694:	ff e0                	jmp    eax

c001b696 <RTC::~RTC()>:
c001b696:	83 ec 0c             	sub    esp,0xc
c001b699:	ba 48 a7 03 c0       	mov    edx,0xc003a748
c001b69e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6a2:	89 10                	mov    DWORD PTR [eax],edx
c001b6a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6a8:	83 ec 0c             	sub    esp,0xc
c001b6ab:	50                   	push   eax
c001b6ac:	e8 3b 7b ff ff       	call   c00131ec <Clock::~Clock()>
c001b6b1:	83 c4 10             	add    esp,0x10
c001b6b4:	90                   	nop
c001b6b5:	83 c4 0c             	add    esp,0xc
c001b6b8:	c3                   	ret    
c001b6b9:	90                   	nop

c001b6ba <RTC::~RTC()>:
c001b6ba:	83 ec 0c             	sub    esp,0xc
c001b6bd:	83 ec 0c             	sub    esp,0xc
c001b6c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6c4:	e8 cd ff ff ff       	call   c001b696 <RTC::~RTC()>
c001b6c9:	83 c4 10             	add    esp,0x10
c001b6cc:	83 ec 08             	sub    esp,0x8
c001b6cf:	68 60 01 00 00       	push   0x160
c001b6d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6d8:	e8 76 6d ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c001b6dd:	83 c4 10             	add    esp,0x10
c001b6e0:	83 c4 0c             	add    esp,0xc
c001b6e3:	c3                   	ret    

c001b6e4 <RTC::get_update_in_progress_flag()>:
c001b6e4:	83 ec 14             	sub    esp,0x14
c001b6e7:	6a 0a                	push   0xa
c001b6e9:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b6ef:	e8 64 ff fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b6f4:	83 c4 1c             	add    esp,0x1c
c001b6f7:	c0 e8 07             	shr    al,0x7
c001b6fa:	c3                   	ret    
c001b6fb:	90                   	nop

c001b6fc <RTC::completeRTCRefresh()>:
c001b6fc:	55                   	push   ebp
c001b6fd:	57                   	push   edi
c001b6fe:	56                   	push   esi
c001b6ff:	53                   	push   ebx
c001b700:	83 ec 2c             	sub    esp,0x2c
c001b703:	8b 35 90 c3 03 c0    	mov    esi,DWORD PTR ds:0xc003c390
c001b709:	8b 3d 94 c3 03 c0    	mov    edi,DWORD PTR ds:0xc003c394
c001b70f:	81 c6 00 94 35 77    	add    esi,0x77359400
c001b715:	83 d7 00             	adc    edi,0x0
c001b718:	83 ec 0c             	sub    esp,0xc
c001b71b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b71f:	e8 c0 ff ff ff       	call   c001b6e4 <RTC::get_update_in_progress_flag()>
c001b724:	83 c4 10             	add    esp,0x10
c001b727:	84 c0                	test   al,al
c001b729:	74 10                	je     c001b73b <RTC::completeRTCRefresh()+0x3f>
c001b72b:	3b 35 90 c3 03 c0    	cmp    esi,DWORD PTR ds:0xc003c390
c001b731:	89 f8                	mov    eax,edi
c001b733:	1b 05 94 c3 03 c0    	sbb    eax,DWORD PTR ds:0xc003c394
c001b739:	73 dd                	jae    c001b718 <RTC::completeRTCRefresh()+0x1c>
c001b73b:	55                   	push   ebp
c001b73c:	55                   	push   ebp
c001b73d:	6a 00                	push   0x0
c001b73f:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b745:	e8 0e ff fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b74a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b74e:	58                   	pop    eax
c001b74f:	5a                   	pop    edx
c001b750:	6a 02                	push   0x2
c001b752:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b758:	e8 fb fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b75d:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001b761:	59                   	pop    ecx
c001b762:	5b                   	pop    ebx
c001b763:	6a 04                	push   0x4
c001b765:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b76b:	e8 e8 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b770:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b774:	5e                   	pop    esi
c001b775:	5f                   	pop    edi
c001b776:	6a 07                	push   0x7
c001b778:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b77e:	e8 d5 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b783:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c001b787:	5d                   	pop    ebp
c001b788:	58                   	pop    eax
c001b789:	6a 08                	push   0x8
c001b78b:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b791:	e8 c2 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b796:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001b79a:	58                   	pop    eax
c001b79b:	5a                   	pop    edx
c001b79c:	6a 09                	push   0x9
c001b79e:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b7a4:	e8 af fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b7a9:	83 c4 10             	add    esp,0x10
c001b7ac:	0f b6 e8             	movzx  ebp,al
c001b7af:	8b 35 90 c3 03 c0    	mov    esi,DWORD PTR ds:0xc003c390
c001b7b5:	8b 3d 94 c3 03 c0    	mov    edi,DWORD PTR ds:0xc003c394
c001b7bb:	81 c6 00 94 35 77    	add    esi,0x77359400
c001b7c1:	83 d7 00             	adc    edi,0x0
c001b7c4:	83 ec 0c             	sub    esp,0xc
c001b7c7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b7cb:	e8 14 ff ff ff       	call   c001b6e4 <RTC::get_update_in_progress_flag()>
c001b7d0:	83 c4 10             	add    esp,0x10
c001b7d3:	84 c0                	test   al,al
c001b7d5:	74 10                	je     c001b7e7 <RTC::completeRTCRefresh()+0xeb>
c001b7d7:	3b 35 90 c3 03 c0    	cmp    esi,DWORD PTR ds:0xc003c390
c001b7dd:	89 f8                	mov    eax,edi
c001b7df:	1b 05 94 c3 03 c0    	sbb    eax,DWORD PTR ds:0xc003c394
c001b7e5:	73 dd                	jae    c001b7c4 <RTC::completeRTCRefresh()+0xc8>
c001b7e7:	50                   	push   eax
c001b7e8:	50                   	push   eax
c001b7e9:	6a 00                	push   0x0
c001b7eb:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b7f1:	e8 62 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b7f6:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001b7fa:	58                   	pop    eax
c001b7fb:	5a                   	pop    edx
c001b7fc:	6a 02                	push   0x2
c001b7fe:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b804:	e8 4f fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b809:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b80d:	59                   	pop    ecx
c001b80e:	5b                   	pop    ebx
c001b80f:	6a 04                	push   0x4
c001b811:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b817:	e8 3c fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b81c:	5e                   	pop    esi
c001b81d:	88 c3                	mov    bl,al
c001b81f:	5f                   	pop    edi
c001b820:	6a 07                	push   0x7
c001b822:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b828:	e8 2b fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b82d:	89 c6                	mov    esi,eax
c001b82f:	58                   	pop    eax
c001b830:	5a                   	pop    edx
c001b831:	6a 08                	push   0x8
c001b833:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b839:	e8 1a fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b83e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b842:	59                   	pop    ecx
c001b843:	5f                   	pop    edi
c001b844:	6a 09                	push   0x9
c001b846:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b84c:	e8 07 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b851:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b855:	0f b6 f8             	movzx  edi,al
c001b858:	83 c4 10             	add    esp,0x10
c001b85b:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001b85e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001b862:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c001b866:	89 f1                	mov    ecx,esi
c001b868:	0f 94 c0             	sete   al
c001b86b:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c001b86f:	0f 94 c2             	sete   dl
c001b872:	21 d0                	and    eax,edx
c001b874:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c001b878:	0f 94 c2             	sete   dl
c001b87b:	21 c2                	and    edx,eax
c001b87d:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c001b881:	0f 94 c0             	sete   al
c001b884:	21 d0                	and    eax,edx
c001b886:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001b88a:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c001b88e:	0f 94 c1             	sete   cl
c001b891:	84 c8                	test   al,cl
c001b893:	75 28                	jne    c001b8bd <RTC::completeRTCRefresh()+0x1c1>
c001b895:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b899:	89 fd                	mov    ebp,edi
c001b89b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b89f:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c001b8a3:	89 f0                	mov    eax,esi
c001b8a5:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001b8a9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b8ad:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b8b1:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b8b4:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b8b8:	e9 f2 fe ff ff       	jmp    c001b7af <RTC::completeRTCRefresh()+0xb3>
c001b8bd:	39 fd                	cmp    ebp,edi
c001b8bf:	75 d4                	jne    c001b895 <RTC::completeRTCRefresh()+0x199>
c001b8c1:	55                   	push   ebp
c001b8c2:	55                   	push   ebp
c001b8c3:	6a 0b                	push   0xb
c001b8c5:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b8cb:	e8 88 fd fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b8d0:	83 c4 10             	add    esp,0x10
c001b8d3:	89 c5                	mov    ebp,eax
c001b8d5:	a8 04                	test   al,0x4
c001b8d7:	75 75                	jne    c001b94e <RTC::completeRTCRefresh()+0x252>
c001b8d9:	b1 0a                	mov    cl,0xa
c001b8db:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001b8de:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b8e1:	83 e2 0f             	and    edx,0xf
c001b8e4:	c0 e8 04             	shr    al,0x4
c001b8e7:	c1 ef 04             	shr    edi,0x4
c001b8ea:	f6 e1                	mul    cl
c001b8ec:	6b ff 0a             	imul   edi,edi,0xa
c001b8ef:	01 d0                	add    eax,edx
c001b8f1:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001b8f5:	88 04 24             	mov    BYTE PTR [esp],al
c001b8f8:	83 e2 0f             	and    edx,0xf
c001b8fb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b8ff:	c0 e8 04             	shr    al,0x4
c001b902:	f6 e1                	mul    cl
c001b904:	01 d0                	add    eax,edx
c001b906:	88 da                	mov    dl,bl
c001b908:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b90c:	83 e2 0f             	and    edx,0xf
c001b90f:	88 d8                	mov    al,bl
c001b911:	83 e3 80             	and    ebx,0xffffff80
c001b914:	c0 e8 04             	shr    al,0x4
c001b917:	83 e0 07             	and    eax,0x7
c001b91a:	f6 e1                	mul    cl
c001b91c:	01 d0                	add    eax,edx
c001b91e:	89 f2                	mov    edx,esi
c001b920:	09 c3                	or     ebx,eax
c001b922:	83 e2 0f             	and    edx,0xf
c001b925:	89 f0                	mov    eax,esi
c001b927:	c0 e8 04             	shr    al,0x4
c001b92a:	f6 e1                	mul    cl
c001b92c:	8d 34 02             	lea    esi,[edx+eax*1]
c001b92f:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001b933:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b937:	83 e2 0f             	and    edx,0xf
c001b93a:	c0 e8 04             	shr    al,0x4
c001b93d:	f6 e1                	mul    cl
c001b93f:	01 d0                	add    eax,edx
c001b941:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001b945:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b949:	83 e0 0f             	and    eax,0xf
c001b94c:	01 c7                	add    edi,eax
c001b94e:	83 e5 02             	and    ebp,0x2
c001b951:	75 14                	jne    c001b967 <RTC::completeRTCRefresh()+0x26b>
c001b953:	84 db                	test   bl,bl
c001b955:	79 10                	jns    c001b967 <RTC::completeRTCRefresh()+0x26b>
c001b957:	83 e3 7f             	and    ebx,0x7f
c001b95a:	b9 18 00 00 00       	mov    ecx,0x18
c001b95f:	8d 43 0c             	lea    eax,[ebx+0xc]
c001b962:	99                   	cdq    
c001b963:	f7 f9                	idiv   ecx
c001b965:	88 d3                	mov    bl,dl
c001b967:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001b96d:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c001b973:	77 06                	ja     c001b97b <RTC::completeRTCRefresh()+0x27f>
c001b975:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c001b97b:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001b97f:	31 d2                	xor    edx,edx
c001b981:	c1 e1 10             	shl    ecx,0x10
c001b984:	89 d7                	mov    edi,edx
c001b986:	c1 e5 10             	shl    ebp,0x10
c001b989:	31 c0                	xor    eax,eax
c001b98b:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001b991:	09 cf                	or     edi,ecx
c001b993:	89 f1                	mov    ecx,esi
c001b995:	89 fa                	mov    edx,edi
c001b997:	88 c8                	mov    al,cl
c001b999:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c001b99d:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c001b9a1:	88 da                	mov    dl,bl
c001b9a3:	0f b7 c8             	movzx  ecx,ax
c001b9a6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b9aa:	09 e9                	or     ecx,ebp
c001b9ac:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b9af:	0f b6 db             	movzx  ebx,bl
c001b9b2:	50                   	push   eax
c001b9b3:	50                   	push   eax
c001b9b4:	53                   	push   ebx
c001b9b5:	68 14 a7 03 c0       	push   0xc003a714
c001b9ba:	e8 d5 14 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001b9bf:	5a                   	pop    edx
c001b9c0:	59                   	pop    ecx
c001b9c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b9c9:	52                   	push   edx
c001b9ca:	50                   	push   eax
c001b9cb:	e8 0b 79 ff ff       	call   c00132db <datetimeToSeconds(datetime_t)>
c001b9d0:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001b9d4:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001b9da:	89 93 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],edx
c001b9e0:	83 c4 3c             	add    esp,0x3c
c001b9e3:	5b                   	pop    ebx
c001b9e4:	5e                   	pop    esi
c001b9e5:	5f                   	pop    edi
c001b9e6:	5d                   	pop    ebp
c001b9e7:	c3                   	ret    

c001b9e8 <rtcIRQHandler(regs*, void*)>:
c001b9e8:	53                   	push   ebx
c001b9e9:	83 ec 10             	sub    esp,0x10
c001b9ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b9f0:	6a 0c                	push   0xc
c001b9f2:	ff 35 c8 b9 03 c0    	push   DWORD PTR ds:0xc003b9c8
c001b9f8:	e8 5b fc fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b9fd:	83 c4 10             	add    esp,0x10
c001ba00:	84 c0                	test   al,al
c001ba02:	79 24                	jns    c001ba28 <rtcIRQHandler(regs*, void*)+0x40>
c001ba04:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001ba0b:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001ba12:	66 ff 05 a0 d0 03 c0 	inc    WORD PTR ds:0xc003d0a0
c001ba19:	75 0d                	jne    c001ba28 <rtcIRQHandler(regs*, void*)+0x40>
c001ba1b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ba1f:	83 c4 08             	add    esp,0x8
c001ba22:	5b                   	pop    ebx
c001ba23:	e9 d4 fc ff ff       	jmp    c001b6fc <RTC::completeRTCRefresh()>
c001ba28:	83 c4 08             	add    esp,0x8
c001ba2b:	5b                   	pop    ebx
c001ba2c:	c3                   	ret    
c001ba2d:	90                   	nop

c001ba2e <RTC::RTC()>:
c001ba2e:	83 ec 1c             	sub    esp,0x1c
c001ba31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba35:	83 ec 08             	sub    esp,0x8
c001ba38:	68 2a a7 03 c0       	push   0xc003a72a
c001ba3d:	50                   	push   eax
c001ba3e:	e8 73 77 ff ff       	call   c00131b6 <Clock::Clock(char const*)>
c001ba43:	83 c4 10             	add    esp,0x10
c001ba46:	ba 48 a7 03 c0       	mov    edx,0xc003a748
c001ba4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba4f:	89 10                	mov    DWORD PTR [eax],edx
c001ba51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba55:	83 ec 0c             	sub    esp,0xc
c001ba58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ba5c:	6a 01                	push   0x1
c001ba5e:	68 e8 b9 01 c0       	push   0xc001b9e8
c001ba63:	6a 08                	push   0x8
c001ba65:	50                   	push   eax
c001ba66:	e8 37 7c ff ff       	call   c00136a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ba6b:	83 c4 20             	add    esp,0x20
c001ba6e:	89 c2                	mov    edx,eax
c001ba70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba74:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ba7a:	e8 9a 28 ff ff       	call   c000e319 <disableIRQs()>
c001ba7f:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c001ba84:	83 ec 08             	sub    esp,0x8
c001ba87:	6a 0b                	push   0xb
c001ba89:	50                   	push   eax
c001ba8a:	e8 c9 fb fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001ba8f:	83 c4 10             	add    esp,0x10
c001ba92:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ba96:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c001ba9b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001ba9f:	83 ca 10             	or     edx,0x10
c001baa2:	0f b6 d2             	movzx  edx,dl
c001baa5:	83 ec 04             	sub    esp,0x4
c001baa8:	52                   	push   edx
c001baa9:	6a 0b                	push   0xb
c001baab:	50                   	push   eax
c001baac:	e8 af fc fe ff       	call   c000b760 <Computer::writeCMOS(unsigned char, unsigned char)>
c001bab1:	83 c4 10             	add    esp,0x10
c001bab4:	83 ec 0c             	sub    esp,0xc
c001bab7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001babb:	e8 3c fc ff ff       	call   c001b6fc <RTC::completeRTCRefresh()>
c001bac0:	83 c4 10             	add    esp,0x10
c001bac3:	e8 5f 28 ff ff       	call   c000e327 <enableIRQs()>
c001bac8:	90                   	nop
c001bac9:	83 c4 1c             	add    esp,0x1c
c001bacc:	c3                   	ret    
c001bacd:	90                   	nop

c001bace <IDE::close(int, int, void*)>:
c001bace:	83 c8 ff             	or     eax,0xffffffff
c001bad1:	c3                   	ret    

c001bad2 <IDE::IDE()>:
c001bad2:	83 ec 0c             	sub    esp,0xc
c001bad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bad9:	83 ec 08             	sub    esp,0x8
c001badc:	68 7c a7 03 c0       	push   0xc003a77c
c001bae1:	50                   	push   eax
c001bae2:	e8 e9 7f ff ff       	call   c0013ad0 <HardDiskController::HardDiskController(char const*)>
c001bae7:	83 c4 10             	add    esp,0x10
c001baea:	ba bc a9 03 c0       	mov    edx,0xc003a9bc
c001baef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baf3:	89 10                	mov    DWORD PTR [eax],edx
c001baf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baf9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bb00:	90                   	nop
c001bb01:	83 c4 0c             	add    esp,0xc
c001bb04:	c3                   	ret    
c001bb05:	90                   	nop

c001bb06 <IDE::prepareInterrupt(unsigned char)>:
c001bb06:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bb0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bb0f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bb17:	c3                   	ret    

c001bb18 <selectDrive(unsigned char, unsigned char)>:
c001bb18:	c3                   	ret    
c001bb19:	90                   	nop

c001bb1a <IDE::getBase(unsigned char)>:
c001bb1a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bb1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb23:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bb2b:	c3                   	ret    

c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bb2c:	55                   	push   ebp
c001bb2d:	57                   	push   edi
c001bb2e:	56                   	push   esi
c001bb2f:	53                   	push   ebx
c001bb30:	83 ec 1c             	sub    esp,0x1c
c001bb33:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bb37:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb3b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bb3e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bb42:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bb46:	80 f9 03             	cmp    cl,0x3
c001bb49:	77 51                	ja     c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001bb4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb4f:	0f b6 f2             	movzx  esi,dl
c001bb52:	0f b6 db             	movzx  ebx,bl
c001bb55:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bb58:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001bb5c:	83 ca 80             	or     edx,0xffffff80
c001bb5f:	0f b6 d2             	movzx  edx,dl
c001bb62:	52                   	push   edx
c001bb63:	6a 0c                	push   0xc
c001bb65:	56                   	push   esi
c001bb66:	57                   	push   edi
c001bb67:	e8 c0 ff ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb6c:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001bb71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bb75:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bb79:	ee                   	out    dx,al
c001bb7a:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001bb7f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001bb83:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001bb87:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bb8b:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bb93:	83 c4 2c             	add    esp,0x2c
c001bb96:	5b                   	pop    ebx
c001bb97:	5e                   	pop    esi
c001bb98:	5f                   	pop    edi
c001bb99:	5d                   	pop    ebp
c001bb9a:	eb 90                	jmp    c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb9c:	80 fb 07             	cmp    bl,0x7
c001bb9f:	77 12                	ja     c001bbb3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001bba1:	0f b6 d2             	movzx  edx,dl
c001bba4:	0f b6 db             	movzx  ebx,bl
c001bba7:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001bbaf:	89 da                	mov    edx,ebx
c001bbb1:	eb 2f                	jmp    c001bbe2 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bbb3:	80 fb 0d             	cmp    bl,0xd
c001bbb6:	77 13                	ja     c001bbcb <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001bbb8:	0f b6 d2             	movzx  edx,dl
c001bbbb:	0f b6 db             	movzx  ebx,bl
c001bbbe:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001bbc5:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bbc9:	eb 17                	jmp    c001bbe2 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bbcb:	80 fb 15             	cmp    bl,0x15
c001bbce:	77 13                	ja     c001bbe3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bbd0:	0f b6 d2             	movzx  edx,dl
c001bbd3:	0f b6 db             	movzx  ebx,bl
c001bbd6:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001bbde:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bbe2:	ee                   	out    dx,al
c001bbe3:	83 c4 1c             	add    esp,0x1c
c001bbe6:	5b                   	pop    ebx
c001bbe7:	5e                   	pop    esi
c001bbe8:	5f                   	pop    edi
c001bbe9:	5d                   	pop    ebp
c001bbea:	c3                   	ret    
c001bbeb:	90                   	nop

c001bbec <IDE::read(unsigned char, unsigned char)>:
c001bbec:	55                   	push   ebp
c001bbed:	57                   	push   edi
c001bbee:	56                   	push   esi
c001bbef:	53                   	push   ebx
c001bbf0:	83 ec 1c             	sub    esp,0x1c
c001bbf3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bbf7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bbfb:	8d 43 f8             	lea    eax,[ebx-0x8]
c001bbfe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bc02:	3c 03                	cmp    al,0x3
c001bc04:	77 43                	ja     c001bc49 <IDE::read(unsigned char, unsigned char)+0x5d>
c001bc06:	0f b6 f2             	movzx  esi,dl
c001bc09:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bc0c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001bc10:	83 c8 80             	or     eax,0xffffff80
c001bc13:	0f b6 c0             	movzx  eax,al
c001bc16:	50                   	push   eax
c001bc17:	6a 0c                	push   0xc
c001bc19:	56                   	push   esi
c001bc1a:	57                   	push   edi
c001bc1b:	e8 0c ff ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc20:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001bc25:	0f b6 c3             	movzx  eax,bl
c001bc28:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001bc2c:	ec                   	in     al,dx
c001bc2d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bc31:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001bc36:	52                   	push   edx
c001bc37:	6a 0c                	push   0xc
c001bc39:	56                   	push   esi
c001bc3a:	57                   	push   edi
c001bc3b:	e8 ec fe ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc40:	83 c4 20             	add    esp,0x20
c001bc43:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bc47:	eb 49                	jmp    c001bc92 <IDE::read(unsigned char, unsigned char)+0xa6>
c001bc49:	80 fb 07             	cmp    bl,0x7
c001bc4c:	77 12                	ja     c001bc60 <IDE::read(unsigned char, unsigned char)+0x74>
c001bc4e:	0f b6 d2             	movzx  edx,dl
c001bc51:	0f b6 c3             	movzx  eax,bl
c001bc54:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001bc5c:	89 c2                	mov    edx,eax
c001bc5e:	eb 31                	jmp    c001bc91 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bc60:	80 fb 0d             	cmp    bl,0xd
c001bc63:	77 13                	ja     c001bc78 <IDE::read(unsigned char, unsigned char)+0x8c>
c001bc65:	0f b6 d2             	movzx  edx,dl
c001bc68:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001bc6f:	0f b6 d3             	movzx  edx,bl
c001bc72:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bc76:	eb 19                	jmp    c001bc91 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bc78:	31 c0                	xor    eax,eax
c001bc7a:	80 fb 15             	cmp    bl,0x15
c001bc7d:	77 13                	ja     c001bc92 <IDE::read(unsigned char, unsigned char)+0xa6>
c001bc7f:	0f b6 d2             	movzx  edx,dl
c001bc82:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001bc8a:	0f b6 d3             	movzx  edx,bl
c001bc8d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bc91:	ec                   	in     al,dx
c001bc92:	83 c4 1c             	add    esp,0x1c
c001bc95:	5b                   	pop    ebx
c001bc96:	5e                   	pop    esi
c001bc97:	5f                   	pop    edi
c001bc98:	5d                   	pop    ebp
c001bc99:	c3                   	ret    

c001bc9a <IDE::waitInterrupt(unsigned char)>:
c001bc9a:	55                   	push   ebp
c001bc9b:	57                   	push   edi
c001bc9c:	56                   	push   esi
c001bc9d:	53                   	push   ebx
c001bc9e:	31 db                	xor    ebx,ebx
c001bca0:	83 ec 0c             	sub    esp,0xc
c001bca3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bca7:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bcac:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bcb4:	89 e8                	mov    eax,ebp
c001bcb6:	84 c0                	test   al,al
c001bcb8:	75 34                	jne    c001bcee <IDE::waitInterrupt(unsigned char)+0x54>
c001bcba:	52                   	push   edx
c001bcbb:	6a 0c                	push   0xc
c001bcbd:	56                   	push   esi
c001bcbe:	57                   	push   edi
c001bcbf:	e8 28 ff ff ff       	call   c001bbec <IDE::read(unsigned char, unsigned char)>
c001bcc4:	83 c4 10             	add    esp,0x10
c001bcc7:	a8 01                	test   al,0x1
c001bcc9:	75 2b                	jne    c001bcf6 <IDE::waitInterrupt(unsigned char)+0x5c>
c001bccb:	f6 c3 04             	test   bl,0x4
c001bcce:	75 16                	jne    c001bce6 <IDE::waitInterrupt(unsigned char)+0x4c>
c001bcd0:	83 fb 32             	cmp    ebx,0x32
c001bcd3:	7e 11                	jle    c001bce6 <IDE::waitInterrupt(unsigned char)+0x4c>
c001bcd5:	50                   	push   eax
c001bcd6:	50                   	push   eax
c001bcd7:	6a 00                	push   0x0
c001bcd9:	68 80 96 98 00       	push   0x989680
c001bcde:	e8 0c 2d ff ff       	call   c000e9ef <nanoSleep(unsigned long long)>
c001bce3:	83 c4 10             	add    esp,0x10
c001bce6:	83 fb 3c             	cmp    ebx,0x3c
c001bce9:	74 0b                	je     c001bcf6 <IDE::waitInterrupt(unsigned char)+0x5c>
c001bceb:	43                   	inc    ebx
c001bcec:	eb be                	jmp    c001bcac <IDE::waitInterrupt(unsigned char)+0x12>
c001bcee:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bcf6:	83 c4 0c             	add    esp,0xc
c001bcf9:	89 e8                	mov    eax,ebp
c001bcfb:	5b                   	pop    ebx
c001bcfc:	5e                   	pop    esi
c001bcfd:	5f                   	pop    edi
c001bcfe:	5d                   	pop    ebp
c001bcff:	c3                   	ret    

c001bd00 <ideChannel0IRQHandler(regs*, void*)>:
c001bd00:	83 ec 10             	sub    esp,0x10
c001bd03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd07:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bd0e:	6a 07                	push   0x7
c001bd10:	6a 00                	push   0x0
c001bd12:	50                   	push   eax
c001bd13:	e8 d4 fe ff ff       	call   c001bbec <IDE::read(unsigned char, unsigned char)>
c001bd18:	83 c4 1c             	add    esp,0x1c
c001bd1b:	c3                   	ret    

c001bd1c <ideChannel1IRQHandler(regs*, void*)>:
c001bd1c:	83 ec 10             	sub    esp,0x10
c001bd1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd23:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bd2a:	6a 07                	push   0x7
c001bd2c:	6a 01                	push   0x1
c001bd2e:	50                   	push   eax
c001bd2f:	e8 b8 fe ff ff       	call   c001bbec <IDE::read(unsigned char, unsigned char)>
c001bd34:	83 c4 1c             	add    esp,0x1c
c001bd37:	c3                   	ret    

c001bd38 <IDE::enableIRQs(unsigned char, bool)>:
c001bd38:	57                   	push   edi
c001bd39:	56                   	push   esi
c001bd3a:	be 04 00 00 00       	mov    esi,0x4
c001bd3f:	53                   	push   ebx
c001bd40:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bd45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd49:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001bd4e:	0f 94 c0             	sete   al
c001bd51:	d1 e0                	shl    eax,1
c001bd53:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001bd5a:	0f b6 c0             	movzx  eax,al
c001bd5d:	50                   	push   eax
c001bd5e:	6a 0c                	push   0xc
c001bd60:	57                   	push   edi
c001bd61:	53                   	push   ebx
c001bd62:	e8 c5 fd ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd67:	83 c4 10             	add    esp,0x10
c001bd6a:	50                   	push   eax
c001bd6b:	6a 0c                	push   0xc
c001bd6d:	57                   	push   edi
c001bd6e:	53                   	push   ebx
c001bd6f:	e8 78 fe ff ff       	call   c001bbec <IDE::read(unsigned char, unsigned char)>
c001bd74:	83 c4 10             	add    esp,0x10
c001bd77:	4e                   	dec    esi
c001bd78:	75 f0                	jne    c001bd6a <IDE::enableIRQs(unsigned char, bool)+0x32>
c001bd7a:	5b                   	pop    ebx
c001bd7b:	5e                   	pop    esi
c001bd7c:	5f                   	pop    edi
c001bd7d:	c3                   	ret    

c001bd7e <IDE::open(int, int, void*)>:
c001bd7e:	55                   	push   ebp
c001bd7f:	57                   	push   edi
c001bd80:	56                   	push   esi
c001bd81:	53                   	push   ebx
c001bd82:	83 ec 1c             	sub    esp,0x1c
c001bd85:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bd89:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bd92:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bd9b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bda2:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bda9:	0f 85 b0 02 00 00    	jne    c001c05f <IDE::open(int, int, void*)+0x2e1>
c001bdaf:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bdb5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001bdb9:	83 e0 7f             	and    eax,0x7f
c001bdbc:	3c 05                	cmp    al,0x5
c001bdbe:	74 04                	je     c001bdc4 <IDE::open(int, int, void*)+0x46>
c001bdc0:	3c 0f                	cmp    al,0xf
c001bdc2:	75 32                	jne    c001bdf6 <IDE::open(int, int, void*)+0x78>
c001bdc4:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bdca:	83 e0 fc             	and    eax,0xfffffffc
c001bdcd:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bdd4:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bdda:	83 e0 fc             	and    eax,0xfffffffc
c001bddd:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bde4:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bdea:	83 e0 fc             	and    eax,0xfffffffc
c001bded:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bdf4:	eb 14                	jmp    c001be0a <IDE::open(int, int, void*)+0x8c>
c001bdf6:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001be00:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001be0a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001be11:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001be18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001be1c:	89 c6                	mov    esi,eax
c001be1e:	bf f8 0c 00 00       	mov    edi,0xcf8
c001be23:	c1 e6 10             	shl    esi,0x10
c001be26:	89 e8                	mov    eax,ebp
c001be28:	89 fa                	mov    edx,edi
c001be2a:	c1 e0 0b             	shl    eax,0xb
c001be2d:	09 f0                	or     eax,esi
c001be2f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001be36:	c1 e6 08             	shl    esi,0x8
c001be39:	09 c6                	or     esi,eax
c001be3b:	89 f0                	mov    eax,esi
c001be3d:	0d 08 00 00 80       	or     eax,0x80000008
c001be42:	ef                   	out    dx,eax
c001be43:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001be48:	89 ca                	mov    edx,ecx
c001be4a:	ed                   	in     eax,dx
c001be4b:	c1 e8 10             	shr    eax,0x10
c001be4e:	3d ff ff 00 00       	cmp    eax,0xffff
c001be53:	0f 84 f5 00 00 00    	je     c001bf4e <IDE::open(int, int, void*)+0x1d0>
c001be59:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001be5f:	89 fa                	mov    edx,edi
c001be61:	89 f0                	mov    eax,esi
c001be63:	ef                   	out    dx,eax
c001be64:	b0 fe                	mov    al,0xfe
c001be66:	89 ca                	mov    edx,ecx
c001be68:	ee                   	out    dx,al
c001be69:	89 f0                	mov    eax,esi
c001be6b:	89 fa                	mov    edx,edi
c001be6d:	ef                   	out    dx,eax
c001be6e:	89 ca                	mov    edx,ecx
c001be70:	ed                   	in     eax,dx
c001be71:	3c fe                	cmp    al,0xfe
c001be73:	0f 85 a9 00 00 00    	jne    c001bf22 <IDE::open(int, int, void*)+0x1a4>
c001be79:	8b 15 c8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9c8
c001be7f:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001be86:	74 33                	je     c001bebb <IDE::open(int, int, void*)+0x13d>
c001be88:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001be8e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001be92:	40                   	inc    eax
c001be93:	83 ec 0c             	sub    esp,0xc
c001be96:	0f b6 c0             	movzx  eax,al
c001be99:	50                   	push   eax
c001be9a:	55                   	push   ebp
c001be9b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001be9f:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001bea5:	51                   	push   ecx
c001bea6:	e8 37 a9 ff ff       	call   c00167e2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001beab:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001beb0:	83 c4 1c             	add    esp,0x1c
c001beb3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001beb9:	eb 0a                	jmp    c001bec5 <IDE::open(int, int, void*)+0x147>
c001bebb:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bec5:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001becc:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bed3:	c1 e1 10             	shl    ecx,0x10
c001bed6:	c1 e0 08             	shl    eax,0x8
c001bed9:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bede:	09 c1                	or     ecx,eax
c001bee0:	89 fa                	mov    edx,edi
c001bee2:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bee9:	c1 e0 0b             	shl    eax,0xb
c001beec:	09 c1                	or     ecx,eax
c001beee:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bef4:	89 c8                	mov    eax,ecx
c001bef6:	ef                   	out    dx,eax
c001bef7:	be fc 0c 00 00       	mov    esi,0xcfc
c001befc:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bf02:	89 f2                	mov    edx,esi
c001bf04:	ee                   	out    dx,al
c001bf05:	89 c8                	mov    eax,ecx
c001bf07:	89 fa                	mov    edx,edi
c001bf09:	ef                   	out    dx,eax
c001bf0a:	89 f2                	mov    edx,esi
c001bf0c:	ed                   	in     eax,dx
c001bf0d:	0f b6 c0             	movzx  eax,al
c001bf10:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bf16:	74 46                	je     c001bf5e <IDE::open(int, int, void*)+0x1e0>
c001bf18:	83 ec 0c             	sub    esp,0xc
c001bf1b:	68 94 a7 03 c0       	push   0xc003a794
c001bf20:	eb 34                	jmp    c001bf56 <IDE::open(int, int, void*)+0x1d8>
c001bf22:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bf2b:	75 17                	jne    c001bf44 <IDE::open(int, int, void*)+0x1c6>
c001bf2d:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001bf32:	74 07                	je     c001bf3b <IDE::open(int, int, void*)+0x1bd>
c001bf34:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001bf39:	75 09                	jne    c001bf44 <IDE::open(int, int, void*)+0x1c6>
c001bf3b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bf42:	eb 1a                	jmp    c001bf5e <IDE::open(int, int, void*)+0x1e0>
c001bf44:	83 ec 0c             	sub    esp,0xc
c001bf47:	68 9c a7 03 c0       	push   0xc003a79c
c001bf4c:	eb 08                	jmp    c001bf56 <IDE::open(int, int, void*)+0x1d8>
c001bf4e:	83 ec 0c             	sub    esp,0xc
c001bf51:	68 cd a7 03 c0       	push   0xc003a7cd
c001bf56:	e8 57 10 ff ff       	call   c000cfb2 <panic(char const*)>
c001bf5b:	83 c4 10             	add    esp,0x10
c001bf5e:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001bf65:	79 1a                	jns    c001bf81 <IDE::open(int, int, void*)+0x203>
c001bf67:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bf6d:	83 e0 fc             	and    eax,0xfffffffc
c001bf70:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bf77:	83 c0 08             	add    eax,0x8
c001bf7a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bf81:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bf87:	89 c2                	mov    edx,eax
c001bf89:	83 e2 0f             	and    edx,0xf
c001bf8c:	66 83 fa 08          	cmp    dx,0x8
c001bf90:	75 0a                	jne    c001bf9c <IDE::open(int, int, void*)+0x21e>
c001bf92:	83 e8 02             	sub    eax,0x2
c001bf95:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bf9c:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bfa2:	89 c2                	mov    edx,eax
c001bfa4:	83 e2 0f             	and    edx,0xf
c001bfa7:	66 83 fa 08          	cmp    dx,0x8
c001bfab:	75 0a                	jne    c001bfb7 <IDE::open(int, int, void*)+0x239>
c001bfad:	83 e8 02             	sub    eax,0x2
c001bfb0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bfb7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bfbe:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bfc5:	89 d0                	mov    eax,edx
c001bfc7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bfca:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bfce:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bfd2:	8d 4a 01             	lea    ecx,[edx+0x1]
c001bfd5:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bfda:	0f b6 c9             	movzx  ecx,cl
c001bfdd:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bfe4:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bfe7:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bfeb:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bfef:	8d 50 02             	lea    edx,[eax+0x2]
c001bff2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001bff7:	0f b6 d2             	movzx  edx,dl
c001bffa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c000:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c003:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c007:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c00b:	8d 48 03             	lea    ecx,[eax+0x3]
c001c00e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c013:	0f b6 c9             	movzx  ecx,cl
c001c016:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c01c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c01f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c023:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c027:	8d 50 04             	lea    edx,[eax+0x4]
c001c02a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c030:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c035:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c03c:	66 85 f6             	test   si,si
c001c03f:	74 3e                	je     c001c07f <IDE::open(int, int, void*)+0x301>
c001c041:	0f b6 d2             	movzx  edx,dl
c001c044:	83 c0 05             	add    eax,0x5
c001c047:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c04a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c04e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c052:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c058:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c05d:	eb 20                	jmp    c001c07f <IDE::open(int, int, void*)+0x301>
c001c05f:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c069:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c073:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c07a:	e9 02 ff ff ff       	jmp    c001bf81 <IDE::open(int, int, void*)+0x203>
c001c07f:	52                   	push   edx
c001c080:	52                   	push   edx
c001c081:	6a 00                	push   0x0
c001c083:	53                   	push   ebx
c001c084:	e8 7d fa ff ff       	call   c001bb06 <IDE::prepareInterrupt(unsigned char)>
c001c089:	59                   	pop    ecx
c001c08a:	5e                   	pop    esi
c001c08b:	6a 01                	push   0x1
c001c08d:	53                   	push   ebx
c001c08e:	e8 73 fa ff ff       	call   c001bb06 <IDE::prepareInterrupt(unsigned char)>
c001c093:	83 c4 0c             	add    esp,0xc
c001c096:	6a 00                	push   0x0
c001c098:	6a 00                	push   0x0
c001c09a:	53                   	push   ebx
c001c09b:	e8 98 fc ff ff       	call   c001bd38 <IDE::enableIRQs(unsigned char, bool)>
c001c0a0:	83 c4 0c             	add    esp,0xc
c001c0a3:	6a 00                	push   0x0
c001c0a5:	6a 01                	push   0x1
c001c0a7:	53                   	push   ebx
c001c0a8:	e8 8b fc ff ff       	call   c001bd38 <IDE::enableIRQs(unsigned char, bool)>
c001c0ad:	83 c4 10             	add    esp,0x10
c001c0b0:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c0b7:	74 40                	je     c001c0f9 <IDE::open(int, int, void*)+0x37b>
c001c0b9:	83 ec 0c             	sub    esp,0xc
c001c0bc:	68 f7 a7 03 c0       	push   0xc003a7f7
c001c0c1:	e8 ce 0d ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001c0c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0c9:	6a 01                	push   0x1
c001c0cb:	68 00 bd 01 c0       	push   0xc001bd00
c001c0d0:	6a 0e                	push   0xe
c001c0d2:	53                   	push   ebx
c001c0d3:	e8 ca 75 ff ff       	call   c00136a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c0d8:	83 c4 14             	add    esp,0x14
c001c0db:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c0e1:	53                   	push   ebx
c001c0e2:	6a 01                	push   0x1
c001c0e4:	68 1c bd 01 c0       	push   0xc001bd1c
c001c0e9:	6a 0f                	push   0xf
c001c0eb:	53                   	push   ebx
c001c0ec:	e8 b1 75 ff ff       	call   c00136a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c0f1:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c0f7:	eb 4a                	jmp    c001c143 <IDE::open(int, int, void*)+0x3c5>
c001c0f9:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c103:	50                   	push   eax
c001c104:	6a 0f                	push   0xf
c001c106:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c10c:	68 13 a8 03 c0       	push   0xc003a813
c001c111:	e8 7e 0d ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001c116:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c119:	6a 00                	push   0x0
c001c11b:	68 00 bd 01 c0       	push   0xc001bd00
c001c120:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c126:	53                   	push   ebx
c001c127:	e8 76 75 ff ff       	call   c00136a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c12c:	83 c4 14             	add    esp,0x14
c001c12f:	53                   	push   ebx
c001c130:	6a 00                	push   0x0
c001c132:	68 1c bd 01 c0       	push   0xc001bd1c
c001c137:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c13d:	53                   	push   ebx
c001c13e:	e8 5f 75 ff ff       	call   c00136a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c143:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c145:	83 c4 20             	add    esp,0x20
c001c148:	83 ec 0c             	sub    esp,0xc
c001c14b:	53                   	push   ebx
c001c14c:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c14f:	83 c4 0c             	add    esp,0xc
c001c152:	6a 07                	push   0x7
c001c154:	6a 00                	push   0x0
c001c156:	53                   	push   ebx
c001c157:	e8 90 fa ff ff       	call   c001bbec <IDE::read(unsigned char, unsigned char)>
c001c15c:	83 c4 0c             	add    esp,0xc
c001c15f:	6a 07                	push   0x7
c001c161:	6a 01                	push   0x1
c001c163:	53                   	push   ebx
c001c164:	e8 83 fa ff ff       	call   c001bbec <IDE::read(unsigned char, unsigned char)>
c001c169:	83 c4 0c             	add    esp,0xc
c001c16c:	6a 01                	push   0x1
c001c16e:	6a 00                	push   0x0
c001c170:	53                   	push   ebx
c001c171:	e8 c2 fb ff ff       	call   c001bd38 <IDE::enableIRQs(unsigned char, bool)>
c001c176:	83 c4 0c             	add    esp,0xc
c001c179:	6a 01                	push   0x1
c001c17b:	6a 01                	push   0x1
c001c17d:	53                   	push   ebx
c001c17e:	e8 b5 fb ff ff       	call   c001bd38 <IDE::enableIRQs(unsigned char, bool)>
c001c183:	83 c4 2c             	add    esp,0x2c
c001c186:	31 c0                	xor    eax,eax
c001c188:	5b                   	pop    ebx
c001c189:	5e                   	pop    esi
c001c18a:	5f                   	pop    edi
c001c18b:	5d                   	pop    ebp
c001c18c:	c3                   	ret    
c001c18d:	90                   	nop

c001c18e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c18e:	55                   	push   ebp
c001c18f:	57                   	push   edi
c001c190:	56                   	push   esi
c001c191:	53                   	push   ebx
c001c192:	83 ec 1c             	sub    esp,0x1c
c001c195:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c199:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c19d:	8d 50 f8             	lea    edx,[eax-0x8]
c001c1a0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c1a4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c1a8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c1ac:	80 fa 03             	cmp    dl,0x3
c001c1af:	77 5d                	ja     c001c20e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001c1b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c1b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c1b9:	0f b6 db             	movzx  ebx,bl
c001c1bc:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c1bf:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001c1c3:	83 ca 80             	or     edx,0xffffff80
c001c1c6:	0f b6 d2             	movzx  edx,dl
c001c1c9:	52                   	push   edx
c001c1ca:	6a 0c                	push   0xc
c001c1cc:	53                   	push   ebx
c001c1cd:	56                   	push   esi
c001c1ce:	e8 59 f9 ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1d3:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001c1d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c1dc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c1e0:	0f b6 c0             	movzx  eax,al
c001c1e3:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001c1e7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c1e9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c1ee:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c1f2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c1f6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c1fa:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c202:	83 c4 2c             	add    esp,0x2c
c001c205:	5b                   	pop    ebx
c001c206:	5e                   	pop    esi
c001c207:	5f                   	pop    edi
c001c208:	5d                   	pop    ebp
c001c209:	e9 1e f9 ff ff       	jmp    c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c20e:	3c 07                	cmp    al,0x7
c001c210:	77 10                	ja     c001c222 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001c212:	0f b6 db             	movzx  ebx,bl
c001c215:	0f b6 d0             	movzx  edx,al
c001c218:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001c220:	eb 2d                	jmp    c001c24f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c222:	3c 0d                	cmp    al,0xd
c001c224:	77 13                	ja     c001c239 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001c226:	0f b6 db             	movzx  ebx,bl
c001c229:	0f b6 c0             	movzx  eax,al
c001c22c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001c233:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001c237:	eb 16                	jmp    c001c24f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c239:	3c 15                	cmp    al,0x15
c001c23b:	77 14                	ja     c001c251 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001c23d:	0f b6 db             	movzx  ebx,bl
c001c240:	0f b6 c0             	movzx  eax,al
c001c243:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001c24b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001c24f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c251:	83 c4 1c             	add    esp,0x1c
c001c254:	5b                   	pop    ebx
c001c255:	5e                   	pop    esi
c001c256:	5f                   	pop    edi
c001c257:	5d                   	pop    ebp
c001c258:	c3                   	ret    
c001c259:	90                   	nop

c001c25a <IDE::detect()>:
c001c25a:	55                   	push   ebp
c001c25b:	57                   	push   edi
c001c25c:	56                   	push   esi
c001c25d:	53                   	push   ebx
c001c25e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c264:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c26b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c272:	0f 85 be 02 00 00    	jne    c001c536 <IDE::detect()+0x2dc>
c001c278:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c27f:	31 f6                	xor    esi,esi
c001c281:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c289:	31 ed                	xor    ebp,ebp
c001c28b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c28f:	c1 e0 06             	shl    eax,0x6
c001c292:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c29a:	89 e8                	mov    eax,ebp
c001c29c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c2a0:	c1 e0 04             	shl    eax,0x4
c001c2a3:	83 c8 a0             	or     eax,0xffffffa0
c001c2a6:	0f b6 c0             	movzx  eax,al
c001c2a9:	50                   	push   eax
c001c2aa:	6a 06                	push   0x6
c001c2ac:	56                   	push   esi
c001c2ad:	53                   	push   ebx
c001c2ae:	e8 79 f8 ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2b3:	83 c4 0c             	add    esp,0xc
c001c2b6:	6a 0c                	push   0xc
c001c2b8:	56                   	push   esi
c001c2b9:	53                   	push   ebx
c001c2ba:	e8 2d f9 ff ff       	call   c001bbec <IDE::read(unsigned char, unsigned char)>
c001c2bf:	83 c4 0c             	add    esp,0xc
c001c2c2:	6a 0c                	push   0xc
c001c2c4:	56                   	push   esi
c001c2c5:	53                   	push   ebx
c001c2c6:	e8 21 f9 ff ff       	call   c001bbec <IDE::read(unsigned char, unsigned char)>
c001c2cb:	83 c4 0c             	add    esp,0xc
c001c2ce:	6a 0c                	push   0xc
c001c2d0:	56                   	push   esi
c001c2d1:	53                   	push   ebx
c001c2d2:	e8 15 f9 ff ff       	call   c001bbec <IDE::read(unsigned char, unsigned char)>
c001c2d7:	83 c4 0c             	add    esp,0xc
c001c2da:	6a 0c                	push   0xc
c001c2dc:	56                   	push   esi
c001c2dd:	53                   	push   ebx
c001c2de:	e8 09 f9 ff ff       	call   c001bbec <IDE::read(unsigned char, unsigned char)>
c001c2e3:	68 ec 00 00 00       	push   0xec
c001c2e8:	6a 07                	push   0x7
c001c2ea:	56                   	push   esi
c001c2eb:	53                   	push   ebx
c001c2ec:	e8 3b f8 ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2f1:	83 c4 1c             	add    esp,0x1c
c001c2f4:	6a 0c                	push   0xc
c001c2f6:	56                   	push   esi
c001c2f7:	53                   	push   ebx
c001c2f8:	e8 ef f8 ff ff       	call   c001bbec <IDE::read(unsigned char, unsigned char)>
c001c2fd:	83 c4 0c             	add    esp,0xc
c001c300:	6a 0c                	push   0xc
c001c302:	56                   	push   esi
c001c303:	53                   	push   ebx
c001c304:	e8 e3 f8 ff ff       	call   c001bbec <IDE::read(unsigned char, unsigned char)>
c001c309:	83 c4 0c             	add    esp,0xc
c001c30c:	6a 0c                	push   0xc
c001c30e:	56                   	push   esi
c001c30f:	53                   	push   ebx
c001c310:	e8 d7 f8 ff ff       	call   c001bbec <IDE::read(unsigned char, unsigned char)>
c001c315:	83 c4 0c             	add    esp,0xc
c001c318:	6a 0c                	push   0xc
c001c31a:	56                   	push   esi
c001c31b:	53                   	push   ebx
c001c31c:	e8 cb f8 ff ff       	call   c001bbec <IDE::read(unsigned char, unsigned char)>
c001c321:	83 c4 0c             	add    esp,0xc
c001c324:	6a 0c                	push   0xc
c001c326:	56                   	push   esi
c001c327:	53                   	push   ebx
c001c328:	e8 bf f8 ff ff       	call   c001bbec <IDE::read(unsigned char, unsigned char)>
c001c32d:	83 c4 10             	add    esp,0x10
c001c330:	84 c0                	test   al,al
c001c332:	0f 84 8b 01 00 00    	je     c001c4c3 <IDE::detect()+0x269>
c001c338:	31 ff                	xor    edi,edi
c001c33a:	50                   	push   eax
c001c33b:	6a 0c                	push   0xc
c001c33d:	56                   	push   esi
c001c33e:	53                   	push   ebx
c001c33f:	e8 a8 f8 ff ff       	call   c001bbec <IDE::read(unsigned char, unsigned char)>
c001c344:	83 c4 10             	add    esp,0x10
c001c347:	a8 01                	test   al,0x1
c001c349:	0f 85 8e 01 00 00    	jne    c001c4dd <IDE::detect()+0x283>
c001c34f:	84 c0                	test   al,al
c001c351:	78 04                	js     c001c357 <IDE::detect()+0xfd>
c001c353:	a8 08                	test   al,0x8
c001c355:	75 27                	jne    c001c37e <IDE::detect()+0x124>
c001c357:	47                   	inc    edi
c001c358:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c35e:	7e da                	jle    c001c33a <IDE::detect()+0xe0>
c001c360:	50                   	push   eax
c001c361:	50                   	push   eax
c001c362:	6a 00                	push   0x0
c001c364:	68 40 4b 4c 00       	push   0x4c4b40
c001c369:	e8 81 26 ff ff       	call   c000e9ef <nanoSleep(unsigned long long)>
c001c36e:	83 c4 10             	add    esp,0x10
c001c371:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c377:	75 c1                	jne    c001c33a <IDE::detect()+0xe0>
c001c379:	e9 5f 01 00 00       	jmp    c001c4dd <IDE::detect()+0x283>
c001c37e:	31 c9                	xor    ecx,ecx
c001c380:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c384:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c388:	83 ec 0c             	sub    esp,0xc
c001c38b:	68 80 00 00 00       	push   0x80
c001c390:	57                   	push   edi
c001c391:	6a 00                	push   0x0
c001c393:	56                   	push   esi
c001c394:	53                   	push   ebx
c001c395:	e8 f4 fd ff ff       	call   c001c18e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c39a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c39f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c3a3:	89 d1                	mov    ecx,edx
c001c3a5:	c1 e0 06             	shl    eax,0x6
c001c3a8:	01 d8                	add    eax,ebx
c001c3aa:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c3b1:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c3b8:	89 f2                	mov    edx,esi
c001c3ba:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c3c0:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c3c4:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c3ca:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c3ce:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c3d5:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c3dd:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c3e4:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c3ec:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c3f2:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c3f9:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c3ff:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c403:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c407:	83 c4 20             	add    esp,0x20
c001c40a:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c40d:	83 c0 02             	add    eax,0x2
c001c410:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c416:	83 c7 02             	add    edi,0x2
c001c419:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c41c:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c422:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c426:	75 e2                	jne    c001c40a <IDE::detect()+0x1b0>
c001c428:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c42c:	c1 e0 06             	shl    eax,0x6
c001c42f:	01 d8                	add    eax,ebx
c001c431:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001c437:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c43e:	66 c1 ea 09          	shr    dx,0x9
c001c442:	83 e2 01             	and    edx,0x1
c001c445:	84 c9                	test   cl,cl
c001c447:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c44d:	75 2f                	jne    c001c47e <IDE::detect()+0x224>
c001c44f:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001c455:	85 c0                	test   eax,eax
c001c457:	74 66                	je     c001c4bf <IDE::detect()+0x265>
c001c459:	50                   	push   eax
c001c45a:	55                   	push   ebp
c001c45b:	56                   	push   esi
c001c45c:	68 2f a8 03 c0       	push   0xc003a82f
c001c461:	e8 2e 0a ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001c466:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c46d:	e8 d2 5f ff ff       	call   c0012444 <operator new(unsigned long)>
c001c472:	89 c7                	mov    edi,eax
c001c474:	89 04 24             	mov    DWORD PTR [esp],eax
c001c477:	e8 e8 02 00 00       	call   c001c764 <ATA::ATA()>
c001c47c:	eb 28                	jmp    c001c4a6 <IDE::detect()+0x24c>
c001c47e:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001c484:	55                   	push   ebp
c001c485:	56                   	push   esi
c001c486:	68 5e a8 03 c0       	push   0xc003a85e
c001c48b:	e8 04 0a ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001c490:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001c497:	e8 a8 5f ff ff       	call   c0012444 <operator new(unsigned long)>
c001c49c:	89 c7                	mov    edi,eax
c001c49e:	89 04 24             	mov    DWORD PTR [esp],eax
c001c4a1:	e8 ee 08 00 00       	call   c001cd94 <ATAPI::ATAPI()>
c001c4a6:	5a                   	pop    edx
c001c4a7:	59                   	pop    ecx
c001c4a8:	57                   	push   edi
c001c4a9:	53                   	push   ebx
c001c4aa:	e8 9f 72 ff ff       	call   c001374e <Device::addChild(Device*)>
c001c4af:	8b 07                	mov    eax,DWORD PTR [edi]
c001c4b1:	53                   	push   ebx
c001c4b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c4b6:	6a 00                	push   0x0
c001c4b8:	57                   	push   edi
c001c4b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c4bc:	83 c4 20             	add    esp,0x20
c001c4bf:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001c4c3:	4d                   	dec    ebp
c001c4c4:	74 0a                	je     c001c4d0 <IDE::detect()+0x276>
c001c4c6:	bd 01 00 00 00       	mov    ebp,0x1
c001c4cb:	e9 bb fd ff ff       	jmp    c001c28b <IDE::detect()+0x31>
c001c4d0:	4e                   	dec    esi
c001c4d1:	74 63                	je     c001c536 <IDE::detect()+0x2dc>
c001c4d3:	be 01 00 00 00       	mov    esi,0x1
c001c4d8:	e9 ac fd ff ff       	jmp    c001c289 <IDE::detect()+0x2f>
c001c4dd:	50                   	push   eax
c001c4de:	6a 04                	push   0x4
c001c4e0:	56                   	push   esi
c001c4e1:	53                   	push   ebx
c001c4e2:	e8 05 f7 ff ff       	call   c001bbec <IDE::read(unsigned char, unsigned char)>
c001c4e7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c4eb:	83 c4 0c             	add    esp,0xc
c001c4ee:	6a 05                	push   0x5
c001c4f0:	56                   	push   esi
c001c4f1:	53                   	push   ebx
c001c4f2:	e8 f5 f6 ff ff       	call   c001bbec <IDE::read(unsigned char, unsigned char)>
c001c4f7:	83 c4 10             	add    esp,0x10
c001c4fa:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001c4fe:	80 fa 14             	cmp    dl,0x14
c001c501:	75 04                	jne    c001c507 <IDE::detect()+0x2ad>
c001c503:	3c eb                	cmp    al,0xeb
c001c505:	eb 07                	jmp    c001c50e <IDE::detect()+0x2b4>
c001c507:	3c 96                	cmp    al,0x96
c001c509:	75 b8                	jne    c001c4c3 <IDE::detect()+0x269>
c001c50b:	80 fa 69             	cmp    dl,0x69
c001c50e:	75 b3                	jne    c001c4c3 <IDE::detect()+0x269>
c001c510:	68 a1 00 00 00       	push   0xa1
c001c515:	6a 07                	push   0x7
c001c517:	56                   	push   esi
c001c518:	53                   	push   ebx
c001c519:	e8 0e f6 ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c51e:	5f                   	pop    edi
c001c51f:	58                   	pop    eax
c001c520:	6a 00                	push   0x0
c001c522:	68 40 42 0f 00       	push   0xf4240
c001c527:	e8 c3 24 ff ff       	call   c000e9ef <nanoSleep(unsigned long long)>
c001c52c:	83 c4 10             	add    esp,0x10
c001c52f:	b1 01                	mov    cl,0x1
c001c531:	e9 4a fe ff ff       	jmp    c001c380 <IDE::detect()+0x126>
c001c536:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c53c:	5b                   	pop    ebx
c001c53d:	5e                   	pop    esi
c001c53e:	5f                   	pop    edi
c001c53f:	5d                   	pop    ebp
c001c540:	c3                   	ret    
c001c541:	90                   	nop

c001c542 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c542:	55                   	push   ebp
c001c543:	57                   	push   edi
c001c544:	56                   	push   esi
c001c545:	53                   	push   ebx
c001c546:	83 ec 1c             	sub    esp,0x1c
c001c549:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c54d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c551:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c555:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001c559:	88 c3                	mov    bl,al
c001c55b:	84 c0                	test   al,al
c001c55d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c561:	0f 84 67 01 00 00    	je     c001c6ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001c567:	83 ec 0c             	sub    esp,0xc
c001c56a:	68 8f a8 03 c0       	push   0xc003a88f
c001c56f:	e8 20 09 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001c574:	83 c4 10             	add    esp,0x10
c001c577:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c57b:	3c 01                	cmp    al,0x1
c001c57d:	75 17                	jne    c001c596 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001c57f:	83 ec 0c             	sub    esp,0xc
c001c582:	b3 13                	mov    bl,0x13
c001c584:	68 9b a8 03 c0       	push   0xc003a89b
c001c589:	e8 06 09 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001c58e:	83 c4 10             	add    esp,0x10
c001c591:	e9 25 01 00 00       	jmp    c001c6bb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c596:	3c 02                	cmp    al,0x2
c001c598:	0f 85 ef 00 00 00    	jne    c001c68d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001c59e:	d1 e6                	shl    esi,1
c001c5a0:	09 ee                	or     esi,ebp
c001c5a2:	52                   	push   edx
c001c5a3:	89 f0                	mov    eax,esi
c001c5a5:	6a 01                	push   0x1
c001c5a7:	0f b6 f0             	movzx  esi,al
c001c5aa:	c1 e6 06             	shl    esi,0x6
c001c5ad:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001c5b5:	50                   	push   eax
c001c5b6:	57                   	push   edi
c001c5b7:	e8 30 f6 ff ff       	call   c001bbec <IDE::read(unsigned char, unsigned char)>
c001c5bc:	83 c4 10             	add    esp,0x10
c001c5bf:	89 c6                	mov    esi,eax
c001c5c1:	a8 01                	test   al,0x1
c001c5c3:	74 12                	je     c001c5d7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001c5c5:	83 ec 0c             	sub    esp,0xc
c001c5c8:	b3 07                	mov    bl,0x7
c001c5ca:	68 b0 a8 03 c0       	push   0xc003a8b0
c001c5cf:	e8 c0 08 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001c5d4:	83 c4 10             	add    esp,0x10
c001c5d7:	f7 c6 02 00 00 00    	test   esi,0x2
c001c5dd:	74 12                	je     c001c5f1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001c5df:	83 ec 0c             	sub    esp,0xc
c001c5e2:	b3 03                	mov    bl,0x3
c001c5e4:	68 ce a8 03 c0       	push   0xc003a8ce
c001c5e9:	e8 a6 08 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001c5ee:	83 c4 10             	add    esp,0x10
c001c5f1:	f7 c6 04 00 00 00    	test   esi,0x4
c001c5f7:	74 12                	je     c001c60b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001c5f9:	83 ec 0c             	sub    esp,0xc
c001c5fc:	b3 14                	mov    bl,0x14
c001c5fe:	68 ee a8 03 c0       	push   0xc003a8ee
c001c603:	e8 8c 08 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001c608:	83 c4 10             	add    esp,0x10
c001c60b:	f7 c6 08 00 00 00    	test   esi,0x8
c001c611:	74 12                	je     c001c625 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001c613:	83 ec 0c             	sub    esp,0xc
c001c616:	b3 03                	mov    bl,0x3
c001c618:	68 ce a8 03 c0       	push   0xc003a8ce
c001c61d:	e8 72 08 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001c622:	83 c4 10             	add    esp,0x10
c001c625:	f7 c6 10 00 00 00    	test   esi,0x10
c001c62b:	74 12                	je     c001c63f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001c62d:	83 ec 0c             	sub    esp,0xc
c001c630:	b3 15                	mov    bl,0x15
c001c632:	68 06 a9 03 c0       	push   0xc003a906
c001c637:	e8 58 08 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001c63c:	83 c4 10             	add    esp,0x10
c001c63f:	f7 c6 20 00 00 00    	test   esi,0x20
c001c645:	74 12                	je     c001c659 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001c647:	83 ec 0c             	sub    esp,0xc
c001c64a:	b3 03                	mov    bl,0x3
c001c64c:	68 ce a8 03 c0       	push   0xc003a8ce
c001c651:	e8 3e 08 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001c656:	83 c4 10             	add    esp,0x10
c001c659:	f7 c6 40 00 00 00    	test   esi,0x40
c001c65f:	74 12                	je     c001c673 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001c661:	83 ec 0c             	sub    esp,0xc
c001c664:	b3 16                	mov    bl,0x16
c001c666:	68 20 a9 03 c0       	push   0xc003a920
c001c66b:	e8 24 08 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001c670:	83 c4 10             	add    esp,0x10
c001c673:	89 f0                	mov    eax,esi
c001c675:	84 c0                	test   al,al
c001c677:	79 42                	jns    c001c6bb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c679:	83 ec 0c             	sub    esp,0xc
c001c67c:	b3 0d                	mov    bl,0xd
c001c67e:	68 41 a9 03 c0       	push   0xc003a941
c001c683:	e8 0c 08 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001c688:	83 c4 10             	add    esp,0x10
c001c68b:	eb 2e                	jmp    c001c6bb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c68d:	3c 03                	cmp    al,0x3
c001c68f:	75 14                	jne    c001c6a5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001c691:	83 ec 0c             	sub    esp,0xc
c001c694:	b3 17                	mov    bl,0x17
c001c696:	68 55 a9 03 c0       	push   0xc003a955
c001c69b:	e8 f4 07 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001c6a0:	83 c4 10             	add    esp,0x10
c001c6a3:	eb 16                	jmp    c001c6bb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c6a5:	3c 04                	cmp    al,0x4
c001c6a7:	75 12                	jne    c001c6bb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c6a9:	83 ec 0c             	sub    esp,0xc
c001c6ac:	b3 08                	mov    bl,0x8
c001c6ae:	68 6b a9 03 c0       	push   0xc003a96b
c001c6b3:	e8 dc 07 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001c6b8:	83 c4 10             	add    esp,0x10
c001c6bb:	50                   	push   eax
c001c6bc:	50                   	push   eax
c001c6bd:	0f b6 c3             	movzx  eax,bl
c001c6c0:	50                   	push   eax
c001c6c1:	68 83 a9 03 c0       	push   0xc003a983
c001c6c6:	e8 c9 07 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001c6cb:	83 c4 10             	add    esp,0x10
c001c6ce:	83 c4 1c             	add    esp,0x1c
c001c6d1:	88 d8                	mov    al,bl
c001c6d3:	5b                   	pop    ebx
c001c6d4:	5e                   	pop    esi
c001c6d5:	5f                   	pop    edi
c001c6d6:	5d                   	pop    ebp
c001c6d7:	c3                   	ret    

c001c6d8 <IDE::polling(unsigned char, unsigned int)>:
c001c6d8:	57                   	push   edi
c001c6d9:	56                   	push   esi
c001c6da:	53                   	push   ebx
c001c6db:	bb 04 00 00 00       	mov    ebx,0x4
c001c6e0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c6e4:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c6e9:	52                   	push   edx
c001c6ea:	6a 0c                	push   0xc
c001c6ec:	56                   	push   esi
c001c6ed:	57                   	push   edi
c001c6ee:	e8 f9 f4 ff ff       	call   c001bbec <IDE::read(unsigned char, unsigned char)>
c001c6f3:	83 c4 10             	add    esp,0x10
c001c6f6:	4b                   	dec    ebx
c001c6f7:	75 f0                	jne    c001c6e9 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c6f9:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c6fe:	50                   	push   eax
c001c6ff:	6a 0c                	push   0xc
c001c701:	56                   	push   esi
c001c702:	57                   	push   edi
c001c703:	e8 e4 f4 ff ff       	call   c001bbec <IDE::read(unsigned char, unsigned char)>
c001c708:	83 c4 10             	add    esp,0x10
c001c70b:	a8 01                	test   al,0x1
c001c70d:	74 12                	je     c001c721 <IDE::polling(unsigned char, unsigned int)+0x49>
c001c70f:	83 ec 0c             	sub    esp,0xc
c001c712:	68 9d a9 03 c0       	push   0xc003a99d
c001c717:	e8 78 07 ff ff       	call   c000ce94 <kprintf(char const*, ...)>
c001c71c:	83 c4 10             	add    esp,0x10
c001c71f:	eb 17                	jmp    c001c738 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c721:	a8 20                	test   al,0x20
c001c723:	75 0f                	jne    c001c734 <IDE::polling(unsigned char, unsigned int)+0x5c>
c001c725:	4b                   	dec    ebx
c001c726:	74 10                	je     c001c738 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c728:	84 c0                	test   al,al
c001c72a:	78 d2                	js     c001c6fe <IDE::polling(unsigned char, unsigned int)+0x26>
c001c72c:	a8 08                	test   al,0x8
c001c72e:	74 ce                	je     c001c6fe <IDE::polling(unsigned char, unsigned int)+0x26>
c001c730:	31 c0                	xor    eax,eax
c001c732:	eb 06                	jmp    c001c73a <IDE::polling(unsigned char, unsigned int)+0x62>
c001c734:	b0 01                	mov    al,0x1
c001c736:	eb 02                	jmp    c001c73a <IDE::polling(unsigned char, unsigned int)+0x62>
c001c738:	b0 02                	mov    al,0x2
c001c73a:	5b                   	pop    ebx
c001c73b:	5e                   	pop    esi
c001c73c:	5f                   	pop    edi
c001c73d:	c3                   	ret    

c001c73e <ATA::close(int, int, void*)>:
c001c73e:	83 ec 0c             	sub    esp,0xc
c001c741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c745:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c74b:	85 c0                	test   eax,eax
c001c74d:	74 0c                	je     c001c75b <ATA::close(int, int, void*)+0x1d>
c001c74f:	83 ec 0c             	sub    esp,0xc
c001c752:	8b 10                	mov    edx,DWORD PTR [eax]
c001c754:	50                   	push   eax
c001c755:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c758:	83 c4 10             	add    esp,0x10
c001c75b:	31 c0                	xor    eax,eax
c001c75d:	83 c4 0c             	add    esp,0xc
c001c760:	c3                   	ret    
c001c761:	90                   	nop

c001c762 <ATA::powerSaving(PowerSavingLevel)>:
c001c762:	c3                   	ret    
c001c763:	90                   	nop

c001c764 <ATA::ATA()>:
c001c764:	83 ec 0c             	sub    esp,0xc
c001c767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c76b:	83 ec 04             	sub    esp,0x4
c001c76e:	68 00 02 00 00       	push   0x200
c001c773:	68 e0 a9 03 c0       	push   0xc003a9e0
c001c778:	50                   	push   eax
c001c779:	e8 d6 73 ff ff       	call   c0013b54 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c77e:	83 c4 10             	add    esp,0x10
c001c781:	ba 0c aa 03 c0       	mov    edx,0xc003aa0c
c001c786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c78a:	89 10                	mov    DWORD PTR [eax],edx
c001c78c:	90                   	nop
c001c78d:	83 c4 0c             	add    esp,0xc
c001c790:	c3                   	ret    
c001c791:	90                   	nop

c001c792 <ATA::flush(bool)>:
c001c792:	53                   	push   ebx
c001c793:	83 ec 08             	sub    esp,0x8
c001c796:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001c79b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c79f:	19 c0                	sbb    eax,eax
c001c7a1:	83 e0 fd             	and    eax,0xfffffffd
c001c7a4:	05 ea 00 00 00       	add    eax,0xea
c001c7a9:	50                   	push   eax
c001c7aa:	6a 07                	push   0x7
c001c7ac:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c7b3:	50                   	push   eax
c001c7b4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c7ba:	e8 6d f3 ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c7bf:	83 c4 0c             	add    esp,0xc
c001c7c2:	6a 00                	push   0x0
c001c7c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c7cb:	50                   	push   eax
c001c7cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c7d2:	e8 01 ff ff ff       	call   c001c6d8 <IDE::polling(unsigned char, unsigned int)>
c001c7d7:	83 c4 18             	add    esp,0x18
c001c7da:	5b                   	pop    ebx
c001c7db:	c3                   	ret    

c001c7dc <ATA::readyForCommand()>:
c001c7dc:	56                   	push   esi
c001c7dd:	53                   	push   ebx
c001c7de:	31 db                	xor    ebx,ebx
c001c7e0:	50                   	push   eax
c001c7e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c7e5:	50                   	push   eax
c001c7e6:	6a 0c                	push   0xc
c001c7e8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c7ef:	50                   	push   eax
c001c7f0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c7f6:	e8 f1 f3 ff ff       	call   c001bbec <IDE::read(unsigned char, unsigned char)>
c001c7fb:	83 c4 10             	add    esp,0x10
c001c7fe:	a8 88                	test   al,0x88
c001c800:	74 23                	je     c001c825 <ATA::readyForCommand()+0x49>
c001c802:	43                   	inc    ebx
c001c803:	83 fb 63             	cmp    ebx,0x63
c001c806:	7e dd                	jle    c001c7e5 <ATA::readyForCommand()+0x9>
c001c808:	51                   	push   ecx
c001c809:	51                   	push   ecx
c001c80a:	6a 00                	push   0x0
c001c80c:	68 40 42 0f 00       	push   0xf4240
c001c811:	e8 d9 21 ff ff       	call   c000e9ef <nanoSleep(unsigned long long)>
c001c816:	83 c4 10             	add    esp,0x10
c001c819:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c81f:	75 c4                	jne    c001c7e5 <ATA::readyForCommand()+0x9>
c001c821:	31 c0                	xor    eax,eax
c001c823:	eb 02                	jmp    c001c827 <ATA::readyForCommand()+0x4b>
c001c825:	b0 01                	mov    al,0x1
c001c827:	5a                   	pop    edx
c001c828:	5b                   	pop    ebx
c001c829:	5e                   	pop    esi
c001c82a:	c3                   	ret    
c001c82b:	90                   	nop

c001c82c <ATA::access(unsigned long long, int, void*, bool)>:
c001c82c:	55                   	push   ebp
c001c82d:	57                   	push   edi
c001c82e:	56                   	push   esi
c001c82f:	53                   	push   ebx
c001c830:	83 ec 2c             	sub    esp,0x2c
c001c833:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c837:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c83b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c83f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c843:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c847:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c84b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c84f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c855:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c859:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c85f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c863:	c1 e0 06             	shl    eax,0x6
c001c866:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c86e:	74 5d                	je     c001c8cd <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c870:	89 fa                	mov    edx,edi
c001c872:	89 f0                	mov    eax,esi
c001c874:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c878:	c1 ea 1c             	shr    edx,0x1c
c001c87b:	89 d1                	mov    ecx,edx
c001c87d:	09 c1                	or     ecx,eax
c001c87f:	74 25                	je     c001c8a6 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c881:	31 ed                	xor    ebp,ebp
c001c883:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c88a:	89 fa                	mov    edx,edi
c001c88c:	89 f0                	mov    eax,esi
c001c88e:	0f ad d0             	shrd   eax,edx,cl
c001c891:	d3 ea                	shr    edx,cl
c001c893:	f6 c1 20             	test   cl,0x20
c001c896:	74 02                	je     c001c89a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c898:	89 d0                	mov    eax,edx
c001c89a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c89e:	45                   	inc    ebp
c001c89f:	83 fd 06             	cmp    ebp,0x6
c001c8a2:	75 df                	jne    c001c883 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c8a4:	eb 76                	jmp    c001c91c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c8a6:	89 f0                	mov    eax,esi
c001c8a8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c8ad:	89 fa                	mov    edx,edi
c001c8af:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c8b6:	0f ac d0 10          	shrd   eax,edx,0x10
c001c8ba:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c8bf:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c8c3:	c1 ee 18             	shr    esi,0x18
c001c8c6:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c8cb:	eb 56                	jmp    c001c923 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c8cd:	6a 00                	push   0x0
c001c8cf:	6a 3f                	push   0x3f
c001c8d1:	57                   	push   edi
c001c8d2:	56                   	push   esi
c001c8d3:	e8 e4 1e 00 00       	call   c001e7bc <__umoddi3>
c001c8d8:	83 c4 10             	add    esp,0x10
c001c8db:	40                   	inc    eax
c001c8dc:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c8e0:	6a 00                	push   0x0
c001c8e2:	68 f0 03 00 00       	push   0x3f0
c001c8e7:	57                   	push   edi
c001c8e8:	56                   	push   esi
c001c8e9:	e8 ce 1d 00 00       	call   c001e6bc <__udivdi3>
c001c8ee:	83 c4 10             	add    esp,0x10
c001c8f1:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c8f6:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c8fd:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c902:	6a 00                	push   0x0
c001c904:	6a 3f                	push   0x3f
c001c906:	57                   	push   edi
c001c907:	56                   	push   esi
c001c908:	e8 af 1d 00 00       	call   c001e6bc <__udivdi3>
c001c90d:	83 c4 10             	add    esp,0x10
c001c910:	89 c6                	mov    esi,eax
c001c912:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c917:	83 e6 0f             	and    esi,0xf
c001c91a:	eb 07                	jmp    c001c923 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c91c:	31 f6                	xor    esi,esi
c001c91e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c923:	bf 01 00 00 00       	mov    edi,0x1
c001c928:	50                   	push   eax
c001c929:	6a 00                	push   0x0
c001c92b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c932:	50                   	push   eax
c001c933:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c937:	e8 fc f3 ff ff       	call   c001bd38 <IDE::enableIRQs(unsigned char, bool)>
c001c93c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c93f:	e8 98 fe ff ff       	call   c001c7dc <ATA::readyForCommand()>
c001c944:	83 c4 10             	add    esp,0x10
c001c947:	84 c0                	test   al,al
c001c949:	0f 84 50 02 00 00    	je     c001cb9f <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c94f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c955:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c95b:	c1 e0 04             	shl    eax,0x4
c001c95e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c965:	09 c6                	or     esi,eax
c001c967:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001c96c:	75 05                	jne    c001c973 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c96e:	83 ce a0             	or     esi,0xffffffa0
c001c971:	eb 03                	jmp    c001c976 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c973:	83 ce e0             	or     esi,0xffffffe0
c001c976:	89 f0                	mov    eax,esi
c001c978:	0f b6 f0             	movzx  esi,al
c001c97b:	56                   	push   esi
c001c97c:	6a 06                	push   0x6
c001c97e:	51                   	push   ecx
c001c97f:	52                   	push   edx
c001c980:	e8 a7 f1 ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c985:	83 c4 10             	add    esp,0x10
c001c988:	6a 00                	push   0x0
c001c98a:	6a 01                	push   0x1
c001c98c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c993:	50                   	push   eax
c001c994:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c99a:	e8 8d f1 ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c99f:	83 c4 10             	add    esp,0x10
c001c9a2:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c9a7:	75 6e                	jne    c001ca17 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c9a9:	6a 00                	push   0x0
c001c9ab:	6a 08                	push   0x8
c001c9ad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9b4:	50                   	push   eax
c001c9b5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9bb:	e8 6c f1 ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9c0:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c9c5:	50                   	push   eax
c001c9c6:	6a 09                	push   0x9
c001c9c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9cf:	50                   	push   eax
c001c9d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9d6:	e8 51 f1 ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9db:	83 c4 20             	add    esp,0x20
c001c9de:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c9e3:	50                   	push   eax
c001c9e4:	6a 0a                	push   0xa
c001c9e6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9ed:	50                   	push   eax
c001c9ee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9f4:	e8 33 f1 ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9f9:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c9fe:	50                   	push   eax
c001c9ff:	6a 0b                	push   0xb
c001ca01:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca08:	50                   	push   eax
c001ca09:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca0f:	e8 18 f1 ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca14:	83 c4 20             	add    esp,0x20
c001ca17:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ca1c:	50                   	push   eax
c001ca1d:	6a 02                	push   0x2
c001ca1f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca26:	50                   	push   eax
c001ca27:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca2d:	e8 fa f0 ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca32:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ca37:	50                   	push   eax
c001ca38:	6a 03                	push   0x3
c001ca3a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca41:	50                   	push   eax
c001ca42:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca48:	e8 df f0 ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca4d:	83 c4 20             	add    esp,0x20
c001ca50:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001ca55:	50                   	push   eax
c001ca56:	6a 04                	push   0x4
c001ca58:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca5f:	50                   	push   eax
c001ca60:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca66:	e8 c1 f0 ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca6b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ca70:	50                   	push   eax
c001ca71:	6a 05                	push   0x5
c001ca73:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca7a:	50                   	push   eax
c001ca7b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca81:	e8 a6 f0 ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca86:	83 c4 20             	add    esp,0x20
c001ca89:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001ca8e:	0f 94 c0             	sete   al
c001ca91:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ca96:	74 09                	je     c001caa1 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001ca98:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001ca9f:	eb 07                	jmp    c001caa8 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001caa1:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001caa8:	0f b6 c0             	movzx  eax,al
c001caab:	50                   	push   eax
c001caac:	6a 07                	push   0x7
c001caae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cab5:	50                   	push   eax
c001cab6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cabc:	e8 6b f0 ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cac1:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cac5:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cac9:	83 c4 10             	add    esp,0x10
c001cacc:	85 f6                	test   esi,esi
c001cace:	0f 84 ac 00 00 00    	je     c001cb80 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001cad4:	50                   	push   eax
c001cad5:	6a 01                	push   0x1
c001cad7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cade:	50                   	push   eax
c001cadf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cae5:	e8 ee fb ff ff       	call   c001c6d8 <IDE::polling(unsigned char, unsigned int)>
c001caea:	83 c4 10             	add    esp,0x10
c001caed:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001caf3:	84 c0                	test   al,al
c001caf5:	74 20                	je     c001cb17 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001caf7:	0f b6 f8             	movzx  edi,al
c001cafa:	0f b6 d2             	movzx  edx,dl
c001cafd:	57                   	push   edi
c001cafe:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cb05:	50                   	push   eax
c001cb06:	52                   	push   edx
c001cb07:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb0d:	e8 30 fa ff ff       	call   c001c542 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cb12:	e9 85 00 00 00       	jmp    c001cb9c <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001cb17:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001cb1c:	74 41                	je     c001cb5f <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001cb1e:	31 c9                	xor    ecx,ecx
c001cb20:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001cb24:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cb28:	50                   	push   eax
c001cb29:	50                   	push   eax
c001cb2a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb31:	50                   	push   eax
c001cb32:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb38:	e8 dd ef ff ff       	call   c001bb1a <IDE::getBase(unsigned char)>
c001cb3d:	89 c2                	mov    edx,eax
c001cb3f:	89 e8                	mov    eax,ebp
c001cb41:	66 ef                	out    dx,ax
c001cb43:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cb47:	83 c4 10             	add    esp,0x10
c001cb4a:	41                   	inc    ecx
c001cb4b:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001cb51:	75 cd                	jne    c001cb20 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001cb53:	4e                   	dec    esi
c001cb54:	81 c7 00 02 00 00    	add    edi,0x200
c001cb5a:	e9 6d ff ff ff       	jmp    c001cacc <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001cb5f:	0f b6 d2             	movzx  edx,dl
c001cb62:	51                   	push   ecx
c001cb63:	51                   	push   ecx
c001cb64:	52                   	push   edx
c001cb65:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb6b:	e8 aa ef ff ff       	call   c001bb1a <IDE::getBase(unsigned char)>
c001cb70:	b9 00 01 00 00       	mov    ecx,0x100
c001cb75:	89 c2                	mov    edx,eax
c001cb77:	fc                   	cld    
c001cb78:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cb7b:	83 c4 10             	add    esp,0x10
c001cb7e:	eb d3                	jmp    c001cb53 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001cb80:	31 ff                	xor    edi,edi
c001cb82:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cb87:	74 16                	je     c001cb9f <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001cb89:	50                   	push   eax
c001cb8a:	50                   	push   eax
c001cb8b:	31 c0                	xor    eax,eax
c001cb8d:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001cb92:	0f 94 c0             	sete   al
c001cb95:	50                   	push   eax
c001cb96:	53                   	push   ebx
c001cb97:	e8 f6 fb ff ff       	call   c001c792 <ATA::flush(bool)>
c001cb9c:	83 c4 10             	add    esp,0x10
c001cb9f:	83 c4 2c             	add    esp,0x2c
c001cba2:	89 f8                	mov    eax,edi
c001cba4:	5b                   	pop    ebx
c001cba5:	5e                   	pop    esi
c001cba6:	5f                   	pop    edi
c001cba7:	5d                   	pop    ebp
c001cba8:	c3                   	ret    
c001cba9:	90                   	nop

c001cbaa <ATA::read(unsigned long long, int, void*)>:
c001cbaa:	57                   	push   edi
c001cbab:	b8 04 00 00 00       	mov    eax,0x4
c001cbb0:	56                   	push   esi
c001cbb1:	53                   	push   ebx
c001cbb2:	83 ec 10             	sub    esp,0x10
c001cbb5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cbb9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cbbd:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001cbc0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cbc4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cbc8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001cbce:	77 3b                	ja     c001cc0b <ATA::read(unsigned long long, int, void*)+0x61>
c001cbd0:	b8 06 00 00 00       	mov    eax,0x6
c001cbd5:	85 d2                	test   edx,edx
c001cbd7:	74 32                	je     c001cc0b <ATA::read(unsigned long long, int, void*)+0x61>
c001cbd9:	50                   	push   eax
c001cbda:	50                   	push   eax
c001cbdb:	6a 00                	push   0x0
c001cbdd:	52                   	push   edx
c001cbde:	53                   	push   ebx
c001cbdf:	57                   	push   edi
c001cbe0:	56                   	push   esi
c001cbe1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cbe5:	e8 42 fc ff ff       	call   c001c82c <ATA::access(unsigned long long, int, void*, bool)>
c001cbea:	83 c4 20             	add    esp,0x20
c001cbed:	85 c0                	test   eax,eax
c001cbef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cbf3:	75 11                	jne    c001cc06 <ATA::read(unsigned long long, int, void*)+0x5c>
c001cbf5:	01 1d a8 d0 03 c0    	add    DWORD PTR ds:0xc003d0a8,ebx
c001cbfb:	e8 c2 36 ff ff       	call   c00102c2 <VgaText::updateDiskUsage()>
c001cc00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc04:	eb 05                	jmp    c001cc0b <ATA::read(unsigned long long, int, void*)+0x61>
c001cc06:	b8 01 00 00 00       	mov    eax,0x1
c001cc0b:	83 c4 10             	add    esp,0x10
c001cc0e:	5b                   	pop    ebx
c001cc0f:	5e                   	pop    esi
c001cc10:	5f                   	pop    edi
c001cc11:	c3                   	ret    

c001cc12 <ATA::write(unsigned long long, int, void*)>:
c001cc12:	57                   	push   edi
c001cc13:	b8 04 00 00 00       	mov    eax,0x4
c001cc18:	56                   	push   esi
c001cc19:	53                   	push   ebx
c001cc1a:	83 ec 10             	sub    esp,0x10
c001cc1d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cc21:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cc25:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001cc28:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cc2c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cc30:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001cc36:	77 3b                	ja     c001cc73 <ATA::write(unsigned long long, int, void*)+0x61>
c001cc38:	b8 06 00 00 00       	mov    eax,0x6
c001cc3d:	85 d2                	test   edx,edx
c001cc3f:	74 32                	je     c001cc73 <ATA::write(unsigned long long, int, void*)+0x61>
c001cc41:	50                   	push   eax
c001cc42:	50                   	push   eax
c001cc43:	6a 01                	push   0x1
c001cc45:	52                   	push   edx
c001cc46:	53                   	push   ebx
c001cc47:	57                   	push   edi
c001cc48:	56                   	push   esi
c001cc49:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc4d:	e8 da fb ff ff       	call   c001c82c <ATA::access(unsigned long long, int, void*, bool)>
c001cc52:	83 c4 20             	add    esp,0x20
c001cc55:	85 c0                	test   eax,eax
c001cc57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc5b:	75 11                	jne    c001cc6e <ATA::write(unsigned long long, int, void*)+0x5c>
c001cc5d:	01 1d a4 d0 03 c0    	add    DWORD PTR ds:0xc003d0a4,ebx
c001cc63:	e8 5a 36 ff ff       	call   c00102c2 <VgaText::updateDiskUsage()>
c001cc68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc6c:	eb 05                	jmp    c001cc73 <ATA::write(unsigned long long, int, void*)+0x61>
c001cc6e:	b8 01 00 00 00       	mov    eax,0x1
c001cc73:	83 c4 10             	add    esp,0x10
c001cc76:	5b                   	pop    ebx
c001cc77:	5e                   	pop    esi
c001cc78:	5f                   	pop    edi
c001cc79:	c3                   	ret    

c001cc7a <ATA::detectCHS()>:
c001cc7a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cc7e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cc84:	c1 e0 06             	shl    eax,0x6
c001cc87:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cc8d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cc97:	c7 44 24 04 ef a9 03 c0 	mov    DWORD PTR [esp+0x4],0xc003a9ef
c001cc9f:	e9 0e 03 ff ff       	jmp    c000cfb2 <panic(char const*)>

c001cca4 <ATA::open(int, int, void*)>:
c001cca4:	53                   	push   ebx
c001cca5:	83 ec 08             	sub    esp,0x8
c001cca8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ccac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ccb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccb4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ccba:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ccc0:	c1 e0 06             	shl    eax,0x6
c001ccc3:	01 d0                	add    eax,edx
c001ccc5:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cccc:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001ccd2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001ccd9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cce3:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cce9:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001ccf0:	75 0c                	jne    c001ccfe <ATA::open(int, int, void*)+0x5a>
c001ccf2:	83 ec 0c             	sub    esp,0xc
c001ccf5:	53                   	push   ebx
c001ccf6:	e8 7f ff ff ff       	call   c001cc7a <ATA::detectCHS()>
c001ccfb:	83 c4 10             	add    esp,0x10
c001ccfe:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cd04:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cd0a:	c1 e0 06             	shl    eax,0x6
c001cd0d:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cd14:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cd1e:	d1 e8                	shr    eax,1
c001cd20:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cd26:	6a 04                	push   0x4
c001cd28:	6a 0c                	push   0xc
c001cd2a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd31:	50                   	push   eax
c001cd32:	52                   	push   edx
c001cd33:	e8 f4 ed ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd38:	90                   	nop
c001cd39:	90                   	nop
c001cd3a:	6a 00                	push   0x0
c001cd3c:	6a 0c                	push   0xc
c001cd3e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd45:	50                   	push   eax
c001cd46:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd4c:	e8 db ed ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd51:	83 c4 14             	add    esp,0x14
c001cd54:	53                   	push   ebx
c001cd55:	e8 62 6e ff ff       	call   c0013bbc <PhysicalDisk::startCache()>
c001cd5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd5d:	e8 b2 86 ff ff       	call   c0015414 <createPartitionsForDisk(PhysicalDisk*)>
c001cd62:	31 c0                	xor    eax,eax
c001cd64:	83 c4 18             	add    esp,0x18
c001cd67:	5b                   	pop    ebx
c001cd68:	c3                   	ret    
c001cd69:	90                   	nop

c001cd6a <ATAPI::write(unsigned long long, int, void*)>:
c001cd6a:	b8 03 00 00 00       	mov    eax,0x3
c001cd6f:	c3                   	ret    

c001cd70 <ATAPI::close(int, int, void*)>:
c001cd70:	83 ec 0c             	sub    esp,0xc
c001cd73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd77:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cd7d:	85 c0                	test   eax,eax
c001cd7f:	74 0c                	je     c001cd8d <ATAPI::close(int, int, void*)+0x1d>
c001cd81:	83 ec 0c             	sub    esp,0xc
c001cd84:	8b 10                	mov    edx,DWORD PTR [eax]
c001cd86:	50                   	push   eax
c001cd87:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cd8a:	83 c4 10             	add    esp,0x10
c001cd8d:	31 c0                	xor    eax,eax
c001cd8f:	83 c4 0c             	add    esp,0xc
c001cd92:	c3                   	ret    
c001cd93:	90                   	nop

c001cd94 <ATAPI::ATAPI()>:
c001cd94:	83 ec 0c             	sub    esp,0xc
c001cd97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd9b:	83 ec 04             	sub    esp,0x4
c001cd9e:	68 00 08 00 00       	push   0x800
c001cda3:	68 38 aa 03 c0       	push   0xc003aa38
c001cda8:	50                   	push   eax
c001cda9:	e8 a6 6d ff ff       	call   c0013b54 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cdae:	83 c4 10             	add    esp,0x10
c001cdb1:	ba 78 aa 03 c0       	mov    edx,0xc003aa78
c001cdb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdba:	89 10                	mov    DWORD PTR [eax],edx
c001cdbc:	90                   	nop
c001cdbd:	83 c4 0c             	add    esp,0xc
c001cdc0:	c3                   	ret    
c001cdc1:	90                   	nop

c001cdc2 <ATAPI::readyForCommand()>:
c001cdc2:	56                   	push   esi
c001cdc3:	53                   	push   ebx
c001cdc4:	31 db                	xor    ebx,ebx
c001cdc6:	50                   	push   eax
c001cdc7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cdcb:	50                   	push   eax
c001cdcc:	6a 0c                	push   0xc
c001cdce:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cdd5:	50                   	push   eax
c001cdd6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cddc:	e8 0b ee ff ff       	call   c001bbec <IDE::read(unsigned char, unsigned char)>
c001cde1:	83 c4 10             	add    esp,0x10
c001cde4:	a8 88                	test   al,0x88
c001cde6:	74 23                	je     c001ce0b <ATAPI::readyForCommand()+0x49>
c001cde8:	43                   	inc    ebx
c001cde9:	83 fb 63             	cmp    ebx,0x63
c001cdec:	7e dd                	jle    c001cdcb <ATAPI::readyForCommand()+0x9>
c001cdee:	51                   	push   ecx
c001cdef:	51                   	push   ecx
c001cdf0:	6a 00                	push   0x0
c001cdf2:	68 40 42 0f 00       	push   0xf4240
c001cdf7:	e8 f3 1b ff ff       	call   c000e9ef <nanoSleep(unsigned long long)>
c001cdfc:	83 c4 10             	add    esp,0x10
c001cdff:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ce05:	75 c4                	jne    c001cdcb <ATAPI::readyForCommand()+0x9>
c001ce07:	31 c0                	xor    eax,eax
c001ce09:	eb 02                	jmp    c001ce0d <ATAPI::readyForCommand()+0x4b>
c001ce0b:	b0 01                	mov    al,0x1
c001ce0d:	5a                   	pop    edx
c001ce0e:	5b                   	pop    ebx
c001ce0f:	5e                   	pop    esi
c001ce10:	c3                   	ret    
c001ce11:	90                   	nop

c001ce12 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ce12:	55                   	push   ebp
c001ce13:	57                   	push   edi
c001ce14:	56                   	push   esi
c001ce15:	53                   	push   ebx
c001ce16:	83 ec 20             	sub    esp,0x20
c001ce19:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ce1d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ce21:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ce25:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ce29:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ce2d:	6a 01                	push   0x1
c001ce2f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ce36:	50                   	push   eax
c001ce37:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ce3d:	e8 f6 ee ff ff       	call   c001bd38 <IDE::enableIRQs(unsigned char, bool)>
c001ce42:	5e                   	pop    esi
c001ce43:	58                   	pop    eax
c001ce44:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ce4b:	50                   	push   eax
c001ce4c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ce52:	e8 af ec ff ff       	call   c001bb06 <IDE::prepareInterrupt(unsigned char)>
c001ce57:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce5a:	e8 63 ff ff ff       	call   c001cdc2 <ATAPI::readyForCommand()>
c001ce5f:	83 c4 10             	add    esp,0x10
c001ce62:	84 c0                	test   al,al
c001ce64:	75 0a                	jne    c001ce70 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001ce66:	bb 01 00 00 00       	mov    ebx,0x1
c001ce6b:	e9 57 02 00 00       	jmp    c001d0c7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ce70:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001ce76:	c1 e0 04             	shl    eax,0x4
c001ce79:	0f b6 c0             	movzx  eax,al
c001ce7c:	50                   	push   eax
c001ce7d:	6a 06                	push   0x6
c001ce7f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ce86:	50                   	push   eax
c001ce87:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ce8d:	e8 9a ec ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce92:	6a 00                	push   0x0
c001ce94:	6a 01                	push   0x1
c001ce96:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ce9d:	50                   	push   eax
c001ce9e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cea4:	e8 83 ec ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cea9:	83 c4 20             	add    esp,0x20
c001ceac:	0f b6 c3             	movzx  eax,bl
c001ceaf:	0f b6 df             	movzx  ebx,bh
c001ceb2:	50                   	push   eax
c001ceb3:	6a 04                	push   0x4
c001ceb5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cebc:	50                   	push   eax
c001cebd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cec3:	e8 64 ec ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cec8:	53                   	push   ebx
c001cec9:	6a 05                	push   0x5
c001cecb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ced2:	50                   	push   eax
c001ced3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ced9:	e8 4e ec ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cede:	83 c4 20             	add    esp,0x20
c001cee1:	68 a0 00 00 00       	push   0xa0
c001cee6:	6a 07                	push   0x7
c001cee8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ceef:	50                   	push   eax
c001cef0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cef6:	e8 31 ec ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cefb:	83 c4 0c             	add    esp,0xc
c001cefe:	6a 01                	push   0x1
c001cf00:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf07:	50                   	push   eax
c001cf08:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf0e:	e8 c5 f7 ff ff       	call   c001c6d8 <IDE::polling(unsigned char, unsigned int)>
c001cf13:	83 c4 10             	add    esp,0x10
c001cf16:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001cf1c:	84 c0                	test   al,al
c001cf1e:	74 23                	je     c001cf43 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001cf20:	0f b6 d8             	movzx  ebx,al
c001cf23:	0f b6 d2             	movzx  edx,dl
c001cf26:	53                   	push   ebx
c001cf27:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001cf2e:	50                   	push   eax
c001cf2f:	52                   	push   edx
c001cf30:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf36:	e8 07 f6 ff ff       	call   c001c542 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cf3b:	83 c4 10             	add    esp,0x10
c001cf3e:	e9 84 01 00 00       	jmp    c001d0c7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cf43:	0f b6 d2             	movzx  edx,dl
c001cf46:	53                   	push   ebx
c001cf47:	53                   	push   ebx
c001cf48:	52                   	push   edx
c001cf49:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf4f:	e8 c6 eb ff ff       	call   c001bb1a <IDE::getBase(unsigned char)>
c001cf54:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cf58:	b9 06 00 00 00       	mov    ecx,0x6
c001cf5d:	89 c2                	mov    edx,eax
c001cf5f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001cf62:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001cf66:	83 c4 10             	add    esp,0x10
c001cf69:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cf6f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cf76:	85 db                	test   ebx,ebx
c001cf78:	0f 84 ec 00 00 00    	je     c001d06a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001cf7e:	51                   	push   ecx
c001cf7f:	51                   	push   ecx
c001cf80:	52                   	push   edx
c001cf81:	50                   	push   eax
c001cf82:	e8 13 ed ff ff       	call   c001bc9a <IDE::waitInterrupt(unsigned char)>
c001cf87:	83 c4 10             	add    esp,0x10
c001cf8a:	84 c0                	test   al,al
c001cf8c:	0f 84 d4 fe ff ff    	je     c001ce66 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001cf92:	56                   	push   esi
c001cf93:	56                   	push   esi
c001cf94:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf9b:	50                   	push   eax
c001cf9c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfa2:	e8 5f eb ff ff       	call   c001bb06 <IDE::prepareInterrupt(unsigned char)>
c001cfa7:	83 c4 0c             	add    esp,0xc
c001cfaa:	6a 04                	push   0x4
c001cfac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cfb3:	50                   	push   eax
c001cfb4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfba:	e8 2d ec ff ff       	call   c001bbec <IDE::read(unsigned char, unsigned char)>
c001cfbf:	83 c4 0c             	add    esp,0xc
c001cfc2:	89 c6                	mov    esi,eax
c001cfc4:	6a 05                	push   0x5
c001cfc6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cfcd:	50                   	push   eax
c001cfce:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfd4:	e8 13 ec ff ff       	call   c001bbec <IDE::read(unsigned char, unsigned char)>
c001cfd9:	89 f1                	mov    ecx,esi
c001cfdb:	0f b6 c0             	movzx  eax,al
c001cfde:	0f b6 f1             	movzx  esi,cl
c001cfe1:	c1 e0 08             	shl    eax,0x8
c001cfe4:	09 c6                	or     esi,eax
c001cfe6:	d1 fe                	sar    esi,1
c001cfe8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001cfec:	83 c4 10             	add    esp,0x10
c001cfef:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001cff4:	74 41                	je     c001d037 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001cff6:	31 c9                	xor    ecx,ecx
c001cff8:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cffe:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d005:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d009:	75 0a                	jne    c001d015 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001d00b:	01 c9                	add    ecx,ecx
c001d00d:	01 cd                	add    ebp,ecx
c001d00f:	4b                   	dec    ebx
c001d010:	e9 54 ff ff ff       	jmp    c001cf69 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001d015:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d01a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d01e:	51                   	push   ecx
c001d01f:	51                   	push   ecx
c001d020:	52                   	push   edx
c001d021:	50                   	push   eax
c001d022:	e8 f3 ea ff ff       	call   c001bb1a <IDE::getBase(unsigned char)>
c001d027:	89 c2                	mov    edx,eax
c001d029:	89 f0                	mov    eax,esi
c001d02b:	66 ef                	out    dx,ax
c001d02d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d031:	83 c4 10             	add    esp,0x10
c001d034:	41                   	inc    ecx
c001d035:	eb c1                	jmp    c001cff8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001d037:	31 f6                	xor    esi,esi
c001d039:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d03f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d046:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d04a:	75 06                	jne    c001d052 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001d04c:	01 f6                	add    esi,esi
c001d04e:	01 f5                	add    ebp,esi
c001d050:	eb bd                	jmp    c001d00f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001d052:	51                   	push   ecx
c001d053:	51                   	push   ecx
c001d054:	52                   	push   edx
c001d055:	50                   	push   eax
c001d056:	e8 bf ea ff ff       	call   c001bb1a <IDE::getBase(unsigned char)>
c001d05b:	89 c2                	mov    edx,eax
c001d05d:	66 ed                	in     ax,dx
c001d05f:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d064:	83 c4 10             	add    esp,0x10
c001d067:	46                   	inc    esi
c001d068:	eb cf                	jmp    c001d039 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001d06a:	51                   	push   ecx
c001d06b:	51                   	push   ecx
c001d06c:	52                   	push   edx
c001d06d:	50                   	push   eax
c001d06e:	e8 27 ec ff ff       	call   c001bc9a <IDE::waitInterrupt(unsigned char)>
c001d073:	83 c4 10             	add    esp,0x10
c001d076:	84 c0                	test   al,al
c001d078:	0f 84 e8 fd ff ff    	je     c001ce66 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d07e:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d083:	52                   	push   edx
c001d084:	52                   	push   edx
c001d085:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d08c:	50                   	push   eax
c001d08d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d093:	e8 6e ea ff ff       	call   c001bb06 <IDE::prepareInterrupt(unsigned char)>
c001d098:	83 c4 10             	add    esp,0x10
c001d09b:	50                   	push   eax
c001d09c:	50                   	push   eax
c001d09d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0a4:	50                   	push   eax
c001d0a5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0ab:	e8 6a ea ff ff       	call   c001bb1a <IDE::getBase(unsigned char)>
c001d0b0:	8d 50 07             	lea    edx,[eax+0x7]
c001d0b3:	ec                   	in     al,dx
c001d0b4:	83 c4 10             	add    esp,0x10
c001d0b7:	a8 88                	test   al,0x88
c001d0b9:	74 0a                	je     c001d0c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d0bb:	4b                   	dec    ebx
c001d0bc:	75 dd                	jne    c001d09b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d0be:	bb 02 00 00 00       	mov    ebx,0x2
c001d0c3:	eb 02                	jmp    c001d0c7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d0c5:	31 db                	xor    ebx,ebx
c001d0c7:	83 c4 1c             	add    esp,0x1c
c001d0ca:	89 d8                	mov    eax,ebx
c001d0cc:	5b                   	pop    ebx
c001d0cd:	5e                   	pop    esi
c001d0ce:	5f                   	pop    edi
c001d0cf:	5d                   	pop    ebp
c001d0d0:	c3                   	ret    
c001d0d1:	90                   	nop

c001d0d2 <ATAPI::diskRemoved()>:
c001d0d2:	83 ec 18             	sub    esp,0x18
c001d0d5:	68 43 aa 03 c0       	push   0xc003aa43
c001d0da:	e8 b5 fd fe ff       	call   c000ce94 <kprintf(char const*, ...)>
c001d0df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0e3:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001d0ea:	83 c4 1c             	add    esp,0x1c
c001d0ed:	c3                   	ret    

c001d0ee <ATAPI::eject()>:
c001d0ee:	57                   	push   edi
c001d0ef:	b9 03 00 00 00       	mov    ecx,0x3
c001d0f4:	53                   	push   ebx
c001d0f5:	83 ec 14             	sub    esp,0x14
c001d0f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d0fc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d100:	fc                   	cld    
c001d101:	31 c0                	xor    eax,eax
c001d103:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d105:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d10a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d10f:	50                   	push   eax
c001d110:	50                   	push   eax
c001d111:	6a 00                	push   0x0
c001d113:	6a 00                	push   0x0
c001d115:	6a 00                	push   0x0
c001d117:	6a 02                	push   0x2
c001d119:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d11d:	50                   	push   eax
c001d11e:	53                   	push   ebx
c001d11f:	e8 ee fc ff ff       	call   c001ce12 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d124:	83 c4 14             	add    esp,0x14
c001d127:	53                   	push   ebx
c001d128:	e8 a5 ff ff ff       	call   c001d0d2 <ATAPI::diskRemoved()>
c001d12d:	83 c4 24             	add    esp,0x24
c001d130:	5b                   	pop    ebx
c001d131:	5f                   	pop    edi
c001d132:	c3                   	ret    
c001d133:	90                   	nop

c001d134 <ATAPI::diskInserted()>:
c001d134:	53                   	push   ebx
c001d135:	83 ec 14             	sub    esp,0x14
c001d138:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d13c:	68 59 aa 03 c0       	push   0xc003aa59
c001d141:	e8 4e fd fe ff       	call   c000ce94 <kprintf(char const*, ...)>
c001d146:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001d14d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d150:	e8 67 6a ff ff       	call   c0013bbc <PhysicalDisk::startCache()>
c001d155:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001d159:	83 c4 18             	add    esp,0x18
c001d15c:	5b                   	pop    ebx
c001d15d:	e9 b2 82 ff ff       	jmp    c0015414 <createPartitionsForDisk(PhysicalDisk*)>

c001d162 <ATAPI::detectMedia()>:
c001d162:	56                   	push   esi
c001d163:	53                   	push   ebx
c001d164:	83 ec 28             	sub    esp,0x28
c001d167:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d16b:	6a 0c                	push   0xc
c001d16d:	6a 00                	push   0x0
c001d16f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d173:	56                   	push   esi
c001d174:	e8 5f 35 fe ff       	call   c00006d8 <memset>
c001d179:	58                   	pop    eax
c001d17a:	5a                   	pop    edx
c001d17b:	6a 00                	push   0x0
c001d17d:	6a 00                	push   0x0
c001d17f:	6a 00                	push   0x0
c001d181:	6a 00                	push   0x0
c001d183:	56                   	push   esi
c001d184:	53                   	push   ebx
c001d185:	e8 88 fc ff ff       	call   c001ce12 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d18a:	83 c4 1c             	add    esp,0x1c
c001d18d:	6a 0c                	push   0xc
c001d18f:	6a 00                	push   0x0
c001d191:	56                   	push   esi
c001d192:	e8 41 35 fe ff       	call   c00006d8 <memset>
c001d197:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d19c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d1a1:	59                   	pop    ecx
c001d1a2:	58                   	pop    eax
c001d1a3:	6a 01                	push   0x1
c001d1a5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d1a9:	50                   	push   eax
c001d1aa:	6a 00                	push   0x0
c001d1ac:	6a 12                	push   0x12
c001d1ae:	56                   	push   esi
c001d1af:	53                   	push   ebx
c001d1b0:	e8 5d fc ff ff       	call   c001ce12 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d1b5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d1b9:	83 c4 20             	add    esp,0x20
c001d1bc:	83 e0 7f             	and    eax,0x7f
c001d1bf:	3c 70                	cmp    al,0x70
c001d1c1:	74 15                	je     c001d1d8 <ATAPI::detectMedia()+0x76>
c001d1c3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d1ca:	75 0c                	jne    c001d1d8 <ATAPI::detectMedia()+0x76>
c001d1cc:	83 ec 0c             	sub    esp,0xc
c001d1cf:	53                   	push   ebx
c001d1d0:	e8 5f ff ff ff       	call   c001d134 <ATAPI::diskInserted()>
c001d1d5:	83 c4 10             	add    esp,0x10
c001d1d8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d1dc:	83 e0 0f             	and    eax,0xf
c001d1df:	3c 02                	cmp    al,0x2
c001d1e1:	75 1b                	jne    c001d1fe <ATAPI::detectMedia()+0x9c>
c001d1e3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d1e8:	75 2d                	jne    c001d217 <ATAPI::detectMedia()+0xb5>
c001d1ea:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d1f1:	74 24                	je     c001d217 <ATAPI::detectMedia()+0xb5>
c001d1f3:	83 ec 0c             	sub    esp,0xc
c001d1f6:	53                   	push   ebx
c001d1f7:	e8 d6 fe ff ff       	call   c001d0d2 <ATAPI::diskRemoved()>
c001d1fc:	eb 16                	jmp    c001d214 <ATAPI::detectMedia()+0xb2>
c001d1fe:	84 c0                	test   al,al
c001d200:	75 15                	jne    c001d217 <ATAPI::detectMedia()+0xb5>
c001d202:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d209:	75 0c                	jne    c001d217 <ATAPI::detectMedia()+0xb5>
c001d20b:	83 ec 0c             	sub    esp,0xc
c001d20e:	53                   	push   ebx
c001d20f:	e8 20 ff ff ff       	call   c001d134 <ATAPI::diskInserted()>
c001d214:	83 c4 10             	add    esp,0x10
c001d217:	83 c4 24             	add    esp,0x24
c001d21a:	5b                   	pop    ebx
c001d21b:	5e                   	pop    esi
c001d21c:	c3                   	ret    
c001d21d:	90                   	nop

c001d21e <ATAPI::open(int, int, void*)>:
c001d21e:	53                   	push   ebx
c001d21f:	83 ec 08             	sub    esp,0x8
c001d222:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d226:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d22a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d22e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d234:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d23a:	c1 e0 06             	shl    eax,0x6
c001d23d:	01 d0                	add    eax,edx
c001d23f:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d246:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d24c:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d253:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d25d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d263:	6a 04                	push   0x4
c001d265:	6a 0c                	push   0xc
c001d267:	51                   	push   ecx
c001d268:	52                   	push   edx
c001d269:	e8 be e8 ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d26e:	90                   	nop
c001d26f:	90                   	nop
c001d270:	6a 00                	push   0x0
c001d272:	6a 0c                	push   0xc
c001d274:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d27b:	50                   	push   eax
c001d27c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d282:	e8 a5 e8 ff ff       	call   c001bb2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d287:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d28e:	83 c4 14             	add    esp,0x14
c001d291:	53                   	push   ebx
c001d292:	e8 cb fe ff ff       	call   c001d162 <ATAPI::detectMedia()>
c001d297:	31 c0                	xor    eax,eax
c001d299:	83 c4 18             	add    esp,0x18
c001d29c:	5b                   	pop    ebx
c001d29d:	c3                   	ret    

c001d29e <ATAPI::read(unsigned long long, int, void*)>:
c001d29e:	55                   	push   ebp
c001d29f:	57                   	push   edi
c001d2a0:	56                   	push   esi
c001d2a1:	53                   	push   ebx
c001d2a2:	83 ec 1c             	sub    esp,0x1c
c001d2a5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d2a9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d2ad:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d2b1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d2b8:	74 41                	je     c001d2fb <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001d2ba:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d2be:	b9 03 00 00 00       	mov    ecx,0x3
c001d2c3:	fc                   	cld    
c001d2c4:	31 c0                	xor    eax,eax
c001d2c6:	86 fb                	xchg   bl,bh
c001d2c8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d2ca:	c1 c3 10             	rol    ebx,0x10
c001d2cd:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d2d2:	89 e8                	mov    eax,ebp
c001d2d4:	86 fb                	xchg   bl,bh
c001d2d6:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d2da:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001d2de:	50                   	push   eax
c001d2df:	50                   	push   eax
c001d2e0:	55                   	push   ebp
c001d2e1:	c1 e5 0b             	shl    ebp,0xb
c001d2e4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d2e8:	6a 00                	push   0x0
c001d2ea:	55                   	push   ebp
c001d2eb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d2ef:	50                   	push   eax
c001d2f0:	56                   	push   esi
c001d2f1:	e8 1c fb ff ff       	call   c001ce12 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d2f6:	83 c4 20             	add    esp,0x20
c001d2f9:	eb 1a                	jmp    c001d315 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001d2fb:	83 ec 0c             	sub    esp,0xc
c001d2fe:	56                   	push   esi
c001d2ff:	e8 5e fe ff ff       	call   c001d162 <ATAPI::detectMedia()>
c001d304:	83 c4 10             	add    esp,0x10
c001d307:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d30e:	75 aa                	jne    c001d2ba <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d310:	b8 02 00 00 00       	mov    eax,0x2
c001d315:	83 c4 1c             	add    esp,0x1c
c001d318:	5b                   	pop    ebx
c001d319:	5e                   	pop    esi
c001d31a:	5f                   	pop    edi
c001d31b:	5d                   	pop    ebp
c001d31c:	c3                   	ret    
c001d31d:	90                   	nop

c001d31e <AVX::open(int, int, void*)>:
c001d31e:	83 ec 0c             	sub    esp,0xc
c001d321:	e8 12 10 00 00       	call   c001e338 <avxInit>
c001d326:	b8 00 00 00 00       	mov    eax,0x0
c001d32b:	83 c4 0c             	add    esp,0xc
c001d32e:	c3                   	ret    
c001d32f:	90                   	nop

c001d330 <AVX::close(int, int, void*)>:
c001d330:	83 ec 0c             	sub    esp,0xc
c001d333:	e8 01 10 00 00       	call   c001e339 <avxClose>
c001d338:	b8 00 00 00 00       	mov    eax,0x0
c001d33d:	83 c4 0c             	add    esp,0xc
c001d340:	c3                   	ret    
c001d341:	90                   	nop

c001d342 <AVX::available()>:
c001d342:	83 ec 0c             	sub    esp,0xc
c001d345:	e8 e6 0f 00 00       	call   c001e330 <avxDetect>
c001d34a:	85 c0                	test   eax,eax
c001d34c:	0f 95 c0             	setne  al
c001d34f:	83 c4 0c             	add    esp,0xc
c001d352:	c3                   	ret    
c001d353:	90                   	nop

c001d354 <AVX::save(void*)>:
c001d354:	83 ec 0c             	sub    esp,0xc
c001d357:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d35b:	83 ec 0c             	sub    esp,0xc
c001d35e:	50                   	push   eax
c001d35f:	e8 d2 0f 00 00       	call   c001e336 <avxSave>
c001d364:	83 c4 10             	add    esp,0x10
c001d367:	90                   	nop
c001d368:	83 c4 0c             	add    esp,0xc
c001d36b:	c3                   	ret    

c001d36c <AVX::load(void*)>:
c001d36c:	83 ec 0c             	sub    esp,0xc
c001d36f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d373:	83 ec 0c             	sub    esp,0xc
c001d376:	50                   	push   eax
c001d377:	e8 bb 0f 00 00       	call   c001e337 <avxLoad>
c001d37c:	83 c4 10             	add    esp,0x10
c001d37f:	90                   	nop
c001d380:	83 c4 0c             	add    esp,0xc
c001d383:	c3                   	ret    

c001d384 <AVX::AVX()>:
c001d384:	83 ec 0c             	sub    esp,0xc
c001d387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d38b:	83 ec 08             	sub    esp,0x8
c001d38e:	68 a4 aa 03 c0       	push   0xc003aaa4
c001d393:	50                   	push   eax
c001d394:	e8 99 68 ff ff       	call   c0013c32 <FPU::FPU(char const*)>
c001d399:	83 c4 10             	add    esp,0x10
c001d39c:	ba b4 aa 03 c0       	mov    edx,0xc003aab4
c001d3a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3a5:	89 10                	mov    DWORD PTR [eax],edx
c001d3a7:	90                   	nop
c001d3a8:	83 c4 0c             	add    esp,0xc
c001d3ab:	c3                   	ret    

c001d3ac <MMX::available()>:
c001d3ac:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c001d3b1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d3b7:	83 e0 20             	and    eax,0x20
c001d3ba:	84 c0                	test   al,al
c001d3bc:	0f 95 c0             	setne  al
c001d3bf:	c3                   	ret    

c001d3c0 <MMX::open(int, int, void*)>:
c001d3c0:	83 ec 0c             	sub    esp,0xc
c001d3c3:	e8 e4 0f 00 00       	call   c001e3ac <x87Init>
c001d3c8:	b8 00 00 00 00       	mov    eax,0x0
c001d3cd:	83 c4 0c             	add    esp,0xc
c001d3d0:	c3                   	ret    
c001d3d1:	90                   	nop

c001d3d2 <MMX::close(int, int, void*)>:
c001d3d2:	83 ec 0c             	sub    esp,0xc
c001d3d5:	e8 ec 0f 00 00       	call   c001e3c6 <x87Close>
c001d3da:	b8 00 00 00 00       	mov    eax,0x0
c001d3df:	83 c4 0c             	add    esp,0xc
c001d3e2:	c3                   	ret    
c001d3e3:	90                   	nop

c001d3e4 <MMX::save(void*)>:
c001d3e4:	83 ec 0c             	sub    esp,0xc
c001d3e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d3eb:	83 ec 0c             	sub    esp,0xc
c001d3ee:	50                   	push   eax
c001d3ef:	e8 ad 0f 00 00       	call   c001e3a1 <x87Save>
c001d3f4:	83 c4 10             	add    esp,0x10
c001d3f7:	90                   	nop
c001d3f8:	83 c4 0c             	add    esp,0xc
c001d3fb:	c3                   	ret    

c001d3fc <MMX::load(void*)>:
c001d3fc:	83 ec 0c             	sub    esp,0xc
c001d3ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d403:	83 ec 0c             	sub    esp,0xc
c001d406:	50                   	push   eax
c001d407:	e8 9b 0f 00 00       	call   c001e3a7 <x87Load>
c001d40c:	83 c4 10             	add    esp,0x10
c001d40f:	90                   	nop
c001d410:	83 c4 0c             	add    esp,0xc
c001d413:	c3                   	ret    

c001d414 <MMX::MMX()>:
c001d414:	83 ec 0c             	sub    esp,0xc
c001d417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d41b:	83 ec 08             	sub    esp,0x8
c001d41e:	68 e4 aa 03 c0       	push   0xc003aae4
c001d423:	50                   	push   eax
c001d424:	e8 09 68 ff ff       	call   c0013c32 <FPU::FPU(char const*)>
c001d429:	83 c4 10             	add    esp,0x10
c001d42c:	ba f4 aa 03 c0       	mov    edx,0xc003aaf4
c001d431:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d435:	89 10                	mov    DWORD PTR [eax],edx
c001d437:	90                   	nop
c001d438:	83 c4 0c             	add    esp,0xc
c001d43b:	c3                   	ret    

c001d43c <SSE::open(int, int, void*)>:
c001d43c:	83 ec 0c             	sub    esp,0xc
c001d43f:	e8 23 0f 00 00       	call   c001e367 <sseInit>
c001d444:	b8 00 00 00 00       	mov    eax,0x0
c001d449:	83 c4 0c             	add    esp,0xc
c001d44c:	c3                   	ret    
c001d44d:	90                   	nop

c001d44e <SSE::close(int, int, void*)>:
c001d44e:	83 ec 0c             	sub    esp,0xc
c001d451:	e8 21 0f 00 00       	call   c001e377 <sseClose>
c001d456:	b8 00 00 00 00       	mov    eax,0x0
c001d45b:	83 c4 0c             	add    esp,0xc
c001d45e:	c3                   	ret    
c001d45f:	90                   	nop

c001d460 <SSE::available()>:
c001d460:	83 ec 1c             	sub    esp,0x1c
c001d463:	e8 d8 0e 00 00       	call   c001e340 <sseDetect>
c001d468:	85 c0                	test   eax,eax
c001d46a:	0f 95 c0             	setne  al
c001d46d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d471:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d475:	83 c4 1c             	add    esp,0x1c
c001d478:	c3                   	ret    
c001d479:	90                   	nop

c001d47a <SSE::save(void*)>:
c001d47a:	83 ec 0c             	sub    esp,0xc
c001d47d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d481:	83 ec 0c             	sub    esp,0xc
c001d484:	50                   	push   eax
c001d485:	e8 d1 0e 00 00       	call   c001e35b <sseSave>
c001d48a:	83 c4 10             	add    esp,0x10
c001d48d:	90                   	nop
c001d48e:	83 c4 0c             	add    esp,0xc
c001d491:	c3                   	ret    

c001d492 <SSE::load(void*)>:
c001d492:	83 ec 0c             	sub    esp,0xc
c001d495:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d499:	83 ec 0c             	sub    esp,0xc
c001d49c:	50                   	push   eax
c001d49d:	e8 bf 0e 00 00       	call   c001e361 <sseLoad>
c001d4a2:	83 c4 10             	add    esp,0x10
c001d4a5:	90                   	nop
c001d4a6:	83 c4 0c             	add    esp,0xc
c001d4a9:	c3                   	ret    

c001d4aa <SSE::SSE()>:
c001d4aa:	83 ec 0c             	sub    esp,0xc
c001d4ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4b1:	83 ec 08             	sub    esp,0x8
c001d4b4:	68 24 ab 03 c0       	push   0xc003ab24
c001d4b9:	50                   	push   eax
c001d4ba:	e8 73 67 ff ff       	call   c0013c32 <FPU::FPU(char const*)>
c001d4bf:	83 c4 10             	add    esp,0x10
c001d4c2:	ba 34 ab 03 c0       	mov    edx,0xc003ab34
c001d4c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4cb:	89 10                	mov    DWORD PTR [eax],edx
c001d4cd:	90                   	nop
c001d4ce:	83 c4 0c             	add    esp,0xc
c001d4d1:	c3                   	ret    

c001d4d2 <x87::open(int, int, void*)>:
c001d4d2:	83 ec 0c             	sub    esp,0xc
c001d4d5:	e8 d2 0e 00 00       	call   c001e3ac <x87Init>
c001d4da:	b8 00 00 00 00       	mov    eax,0x0
c001d4df:	83 c4 0c             	add    esp,0xc
c001d4e2:	c3                   	ret    
c001d4e3:	90                   	nop

c001d4e4 <x87::close(int, int, void*)>:
c001d4e4:	83 ec 0c             	sub    esp,0xc
c001d4e7:	e8 da 0e 00 00       	call   c001e3c6 <x87Close>
c001d4ec:	b8 00 00 00 00       	mov    eax,0x0
c001d4f1:	83 c4 0c             	add    esp,0xc
c001d4f4:	c3                   	ret    
c001d4f5:	90                   	nop

c001d4f6 <x87::available()>:
c001d4f6:	83 ec 0c             	sub    esp,0xc
c001d4f9:	e8 88 0e 00 00       	call   c001e386 <x87Detect>
c001d4fe:	85 c0                	test   eax,eax
c001d500:	0f 95 c0             	setne  al
c001d503:	83 c4 0c             	add    esp,0xc
c001d506:	c3                   	ret    
c001d507:	90                   	nop

c001d508 <x87::save(void*)>:
c001d508:	83 ec 0c             	sub    esp,0xc
c001d50b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d50f:	83 ec 0c             	sub    esp,0xc
c001d512:	50                   	push   eax
c001d513:	e8 89 0e 00 00       	call   c001e3a1 <x87Save>
c001d518:	83 c4 10             	add    esp,0x10
c001d51b:	90                   	nop
c001d51c:	83 c4 0c             	add    esp,0xc
c001d51f:	c3                   	ret    

c001d520 <x87::load(void*)>:
c001d520:	83 ec 0c             	sub    esp,0xc
c001d523:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d527:	83 ec 0c             	sub    esp,0xc
c001d52a:	50                   	push   eax
c001d52b:	e8 77 0e 00 00       	call   c001e3a7 <x87Load>
c001d530:	83 c4 10             	add    esp,0x10
c001d533:	90                   	nop
c001d534:	83 c4 0c             	add    esp,0xc
c001d537:	c3                   	ret    

c001d538 <x87::x87()>:
c001d538:	83 ec 0c             	sub    esp,0xc
c001d53b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d53f:	83 ec 08             	sub    esp,0x8
c001d542:	68 64 ab 03 c0       	push   0xc003ab64
c001d547:	50                   	push   eax
c001d548:	e8 e5 66 ff ff       	call   c0013c32 <FPU::FPU(char const*)>
c001d54d:	83 c4 10             	add    esp,0x10
c001d550:	ba 74 ab 03 c0       	mov    edx,0xc003ab74
c001d555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d559:	89 10                	mov    DWORD PTR [eax],edx
c001d55b:	90                   	nop
c001d55c:	83 c4 0c             	add    esp,0xc
c001d55f:	c3                   	ret    

c001d560 <APIC::disable()>:
c001d560:	90                   	nop
c001d561:	c3                   	ret    

c001d562 <APIC::close(int, int, void*)>:
c001d562:	55                   	push   ebp
c001d563:	89 e5                	mov    ebp,esp
c001d565:	83 ec 08             	sub    esp,0x8
c001d568:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d56b:	8b 00                	mov    eax,DWORD PTR [eax]
c001d56d:	83 c0 3c             	add    eax,0x3c
c001d570:	8b 00                	mov    eax,DWORD PTR [eax]
c001d572:	83 ec 0c             	sub    esp,0xc
c001d575:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d578:	ff d0                	call   eax
c001d57a:	83 c4 10             	add    esp,0x10
c001d57d:	b8 00 00 00 00       	mov    eax,0x0
c001d582:	c9                   	leave  
c001d583:	c3                   	ret    

c001d584 <IOAPIC::close(int, int, void*)>:
c001d584:	b8 00 00 00 00       	mov    eax,0x0
c001d589:	c3                   	ret    

c001d58a <APIC::io_wait()>:
c001d58a:	eb 00                	jmp    c001d58c <APIC::io_wait()+0x2>
c001d58c:	eb 00                	jmp    c001d58e <APIC::io_wait()+0x4>
c001d58e:	90                   	nop
c001d58f:	c3                   	ret    

c001d590 <APIC::getBase()>:
c001d590:	55                   	push   ebp
c001d591:	89 e5                	mov    ebp,esp
c001d593:	83 ec 18             	sub    esp,0x18
c001d596:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c001d59b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d5a1:	83 e0 08             	and    eax,0x8
c001d5a4:	84 c0                	test   al,al
c001d5a6:	75 07                	jne    c001d5af <APIC::getBase()+0x1f>
c001d5a8:	b8 00 00 00 00       	mov    eax,0x0
c001d5ad:	eb 21                	jmp    c001d5d0 <APIC::getBase()+0x40>
c001d5af:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c001d5b4:	83 ec 08             	sub    esp,0x8
c001d5b7:	6a 1b                	push   0x1b
c001d5b9:	50                   	push   eax
c001d5ba:	e8 29 e0 fe ff       	call   c000b5e8 <Computer::rdmsr(unsigned int)>
c001d5bf:	83 c4 10             	add    esp,0x10
c001d5c2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d5c5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d5c8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d5cb:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d5d0:	c9                   	leave  
c001d5d1:	c3                   	ret    

c001d5d2 <APIC::eoi(unsigned char)>:
c001d5d2:	55                   	push   ebp
c001d5d3:	89 e5                	mov    ebp,esp
c001d5d5:	83 ec 28             	sub    esp,0x28
c001d5d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d5db:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d5de:	83 ec 0c             	sub    esp,0xc
c001d5e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d5e4:	e8 a7 ff ff ff       	call   c001d590 <APIC::getBase()>
c001d5e9:	83 c4 10             	add    esp,0x10
c001d5ec:	05 b0 00 00 00       	add    eax,0xb0
c001d5f1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d5f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d5f7:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001d5fd:	90                   	nop
c001d5fe:	c9                   	leave  
c001d5ff:	c3                   	ret    

c001d600 <APIC::open(int, int, void*)>:
c001d600:	55                   	push   ebp
c001d601:	89 e5                	mov    ebp,esp
c001d603:	57                   	push   edi
c001d604:	56                   	push   esi
c001d605:	53                   	push   ebx
c001d606:	83 ec 1c             	sub    esp,0x1c
c001d609:	83 ec 0c             	sub    esp,0xc
c001d60c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d60f:	e8 7c ff ff ff       	call   c001d590 <APIC::getBase()>
c001d614:	83 c4 10             	add    esp,0x10
c001d617:	05 f0 00 00 00       	add    eax,0xf0
c001d61c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d61f:	83 ec 0c             	sub    esp,0xc
c001d622:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d625:	e8 66 ff ff ff       	call   c001d590 <APIC::getBase()>
c001d62a:	83 c4 10             	add    esp,0x10
c001d62d:	89 c2                	mov    edx,eax
c001d62f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d632:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d638:	0f b6 f8             	movzx  edi,al
c001d63b:	89 d0                	mov    eax,edx
c001d63d:	ba 00 00 00 00       	mov    edx,0x0
c001d642:	89 c1                	mov    ecx,eax
c001d644:	80 e5 ff             	and    ch,0xff
c001d647:	89 cb                	mov    ebx,ecx
c001d649:	0f b6 f2             	movzx  esi,dl
c001d64c:	89 d8                	mov    eax,ebx
c001d64e:	89 f2                	mov    edx,esi
c001d650:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d653:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d656:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d65a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d65e:	83 e0 00             	and    eax,0x0
c001d661:	09 d0                	or     eax,edx
c001d663:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d667:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d66a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d670:	8d 50 01             	lea    edx,[eax+0x1]
c001d673:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d676:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d67c:	0f b6 d0             	movzx  edx,al
c001d67f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d682:	83 c2 08             	add    edx,0x8
c001d685:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d689:	0f b6 c9             	movzx  ecx,cl
c001d68c:	81 c9 00 00 01 00    	or     ecx,0x10000
c001d692:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d696:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d699:	8b 00                	mov    eax,DWORD PTR [eax]
c001d69b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d69e:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001d6a5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d6a8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d6ab:	89 10                	mov    DWORD PTR [eax],edx
c001d6ad:	b8 00 00 00 00       	mov    eax,0x0
c001d6b2:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d6b5:	5b                   	pop    ebx
c001d6b6:	5e                   	pop    esi
c001d6b7:	5f                   	pop    edi
c001d6b8:	5d                   	pop    ebp
c001d6b9:	c3                   	ret    

c001d6ba <IOAPIC::IOAPIC()>:
c001d6ba:	83 ec 0c             	sub    esp,0xc
c001d6bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6c1:	83 ec 08             	sub    esp,0x8
c001d6c4:	68 a4 ab 03 c0       	push   0xc003aba4
c001d6c9:	50                   	push   eax
c001d6ca:	e8 6f 62 ff ff       	call   c001393e <Device::Device(char const*)>
c001d6cf:	83 c4 10             	add    esp,0x10
c001d6d2:	ba cc ac 03 c0       	mov    edx,0xc003accc
c001d6d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6db:	89 10                	mov    DWORD PTR [eax],edx
c001d6dd:	90                   	nop
c001d6de:	83 c4 0c             	add    esp,0xc
c001d6e1:	c3                   	ret    

c001d6e2 <APIC::APIC()>:
c001d6e2:	53                   	push   ebx
c001d6e3:	83 ec 18             	sub    esp,0x18
c001d6e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6ea:	83 ec 08             	sub    esp,0x8
c001d6ed:	68 ac ab 03 c0       	push   0xc003abac
c001d6f2:	50                   	push   eax
c001d6f3:	e8 6e 69 ff ff       	call   c0014066 <InterruptController::InterruptController(char const*)>
c001d6f8:	83 c4 10             	add    esp,0x10
c001d6fb:	ba 84 ac 03 c0       	mov    edx,0xc003ac84
c001d700:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d704:	89 10                	mov    DWORD PTR [eax],edx
c001d706:	a0 00 d1 03 c0       	mov    al,ds:0xc003d100
c001d70b:	83 f0 01             	xor    eax,0x1
c001d70e:	84 c0                	test   al,al
c001d710:	0f 84 96 00 00 00    	je     c001d7ac <APIC::APIC()+0xca>
c001d716:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001d71b:	a0 d0 c5 03 c0       	mov    al,ds:0xc003c5d0
c001d720:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001d724:	73 7f                	jae    c001d7a5 <APIC::APIC()+0xc3>
c001d726:	83 ec 0c             	sub    esp,0xc
c001d729:	68 68 01 00 00       	push   0x168
c001d72e:	e8 11 4d ff ff       	call   c0012444 <operator new(unsigned long)>
c001d733:	83 c4 10             	add    esp,0x10
c001d736:	89 c3                	mov    ebx,eax
c001d738:	83 ec 0c             	sub    esp,0xc
c001d73b:	53                   	push   ebx
c001d73c:	e8 79 ff ff ff       	call   c001d6ba <IOAPIC::IOAPIC()>
c001d741:	83 c4 10             	add    esp,0x10
c001d744:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d748:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d74d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d751:	89 14 85 e0 d0 03 c0 	mov    DWORD PTR [eax*4-0x3ffc2f20],edx
c001d758:	a1 c0 d0 03 c0       	mov    eax,ds:0xc003d0c0
c001d75d:	40                   	inc    eax
c001d75e:	a3 c0 d0 03 c0       	mov    ds:0xc003d0c0,eax
c001d763:	a1 c8 b9 03 c0       	mov    eax,ds:0xc003b9c8
c001d768:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d76e:	83 ec 08             	sub    esp,0x8
c001d771:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d775:	50                   	push   eax
c001d776:	e8 d3 5f ff ff       	call   c001374e <Device::addChild(Device*)>
c001d77b:	83 c4 10             	add    esp,0x10
c001d77e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d782:	8b 00                	mov    eax,DWORD PTR [eax]
c001d784:	83 c0 08             	add    eax,0x8
c001d787:	8b 00                	mov    eax,DWORD PTR [eax]
c001d789:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001d78e:	6a 00                	push   0x0
c001d790:	6a 00                	push   0x0
c001d792:	52                   	push   edx
c001d793:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d797:	ff d0                	call   eax
c001d799:	83 c4 10             	add    esp,0x10
c001d79c:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001d7a0:	e9 76 ff ff ff       	jmp    c001d71b <APIC::APIC()+0x39>
c001d7a5:	c6 05 00 d1 03 c0 01 	mov    BYTE PTR ds:0xc003d100,0x1
c001d7ac:	90                   	nop
c001d7ad:	83 c4 18             	add    esp,0x18
c001d7b0:	5b                   	pop    ebx
c001d7b1:	c3                   	ret    

c001d7b2 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d7b2:	55                   	push   ebp
c001d7b3:	89 e5                	mov    ebp,esp
c001d7b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7b8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d7be:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d7c1:	72 1d                	jb     c001d7e0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d7c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7c6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d7cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7cf:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d7d5:	01 d0                	add    eax,edx
c001d7d7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d7da:	73 04                	jae    c001d7e0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d7dc:	b0 01                	mov    al,0x1
c001d7de:	eb 02                	jmp    c001d7e2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d7e0:	b0 00                	mov    al,0x0
c001d7e2:	5d                   	pop    ebp
c001d7e3:	c3                   	ret    

c001d7e4 <IOAPIC::read(int)>:
c001d7e4:	55                   	push   ebp
c001d7e5:	89 e5                	mov    ebp,esp
c001d7e7:	83 ec 10             	sub    esp,0x10
c001d7ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7ed:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d7f3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d7f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d7f9:	0f b6 d0             	movzx  edx,al
c001d7fc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d7ff:	89 10                	mov    DWORD PTR [eax],edx
c001d801:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d804:	83 c0 10             	add    eax,0x10
c001d807:	8b 00                	mov    eax,DWORD PTR [eax]
c001d809:	c9                   	leave  
c001d80a:	c3                   	ret    
c001d80b:	90                   	nop

c001d80c <IOAPIC::open(int, int, void*)>:
c001d80c:	55                   	push   ebp
c001d80d:	89 e5                	mov    ebp,esp
c001d80f:	57                   	push   edi
c001d810:	56                   	push   esi
c001d811:	53                   	push   ebx
c001d812:	83 ec 0c             	sub    esp,0xc
c001d815:	83 ec 0c             	sub    esp,0xc
c001d818:	68 d7 ab 03 c0       	push   0xc003abd7
c001d81d:	e8 72 f6 fe ff       	call   c000ce94 <kprintf(char const*, ...)>
c001d822:	83 c4 10             	add    esp,0x10
c001d825:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d828:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d82b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d831:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d834:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d83a:	8b 14 85 00 c6 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc3a00]
c001d841:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d844:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d84a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d84d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d853:	8b 14 85 80 c6 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc3980]
c001d85a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d85d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d863:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d866:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d86c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d86f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d875:	0f b6 f8             	movzx  edi,al
c001d878:	89 d0                	mov    eax,edx
c001d87a:	ba 00 00 00 00       	mov    edx,0x0
c001d87f:	89 c1                	mov    ecx,eax
c001d881:	80 e5 ff             	and    ch,0xff
c001d884:	89 cb                	mov    ebx,ecx
c001d886:	0f b6 f2             	movzx  esi,dl
c001d889:	89 d8                	mov    eax,ebx
c001d88b:	89 f2                	mov    edx,esi
c001d88d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d890:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d893:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d897:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d89b:	83 e0 00             	and    eax,0x0
c001d89e:	09 d0                	or     eax,edx
c001d8a0:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d8a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8a7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d8ad:	8d 50 01             	lea    edx,[eax+0x1]
c001d8b0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d8b3:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d8b9:	0f b6 d0             	movzx  edx,al
c001d8bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8bf:	83 c2 08             	add    edx,0x8
c001d8c2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d8c6:	0f b6 c9             	movzx  ecx,cl
c001d8c9:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d8cf:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d8d3:	83 ec 08             	sub    esp,0x8
c001d8d6:	6a 01                	push   0x1
c001d8d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d8db:	e8 04 ff ff ff       	call   c001d7e4 <IOAPIC::read(int)>
c001d8e0:	83 c4 10             	add    esp,0x10
c001d8e3:	c1 f8 10             	sar    eax,0x10
c001d8e6:	0f b6 c0             	movzx  eax,al
c001d8e9:	8d 50 01             	lea    edx,[eax+0x1]
c001d8ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8ef:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d8f5:	b8 00 00 00 00       	mov    eax,0x0
c001d8fa:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d8fd:	5b                   	pop    ebx
c001d8fe:	5e                   	pop    esi
c001d8ff:	5f                   	pop    edi
c001d900:	5d                   	pop    ebp
c001d901:	c3                   	ret    

c001d902 <IOAPIC::write(int, int)>:
c001d902:	55                   	push   ebp
c001d903:	89 e5                	mov    ebp,esp
c001d905:	83 ec 10             	sub    esp,0x10
c001d908:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d90b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d911:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d914:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d917:	0f b6 d0             	movzx  edx,al
c001d91a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d91d:	89 10                	mov    DWORD PTR [eax],edx
c001d91f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d922:	8d 50 10             	lea    edx,[eax+0x10]
c001d925:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d928:	89 02                	mov    DWORD PTR [edx],eax
c001d92a:	90                   	nop
c001d92b:	c9                   	leave  
c001d92c:	c3                   	ret    
c001d92d:	90                   	nop

c001d92e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001d92e:	55                   	push   ebp
c001d92f:	89 e5                	mov    ebp,esp
c001d931:	83 ec 20             	sub    esp,0x20
c001d934:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d937:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d93a:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d93d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d940:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d943:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d946:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d949:	88 d0                	mov    al,dl
c001d94b:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001d94e:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d952:	83 c0 08             	add    eax,0x8
c001d955:	01 c0                	add    eax,eax
c001d957:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d95a:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d95e:	83 c0 08             	add    eax,0x8
c001d961:	01 c0                	add    eax,eax
c001d963:	40                   	inc    eax
c001d964:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001d967:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d96a:	50                   	push   eax
c001d96b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d96e:	e8 71 fe ff ff       	call   c001d7e4 <IOAPIC::read(int)>
c001d973:	83 c4 08             	add    esp,0x8
c001d976:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d979:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001d980:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001d983:	c1 e0 18             	shl    eax,0x18
c001d986:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d989:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d98c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d98f:	52                   	push   edx
c001d990:	50                   	push   eax
c001d991:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d994:	e8 69 ff ff ff       	call   c001d902 <IOAPIC::write(int, int)>
c001d999:	83 c4 0c             	add    esp,0xc
c001d99c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d99f:	50                   	push   eax
c001d9a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d9a3:	e8 3c fe ff ff       	call   c001d7e4 <IOAPIC::read(int)>
c001d9a8:	83 c4 08             	add    esp,0x8
c001d9ab:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d9ae:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001d9b5:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001d9bc:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001d9c3:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001d9ca:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001d9ce:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001d9d1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001d9d4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d9d7:	52                   	push   edx
c001d9d8:	50                   	push   eax
c001d9d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d9dc:	e8 21 ff ff ff       	call   c001d902 <IOAPIC::write(int, int)>
c001d9e1:	83 c4 0c             	add    esp,0xc
c001d9e4:	90                   	nop
c001d9e5:	c9                   	leave  
c001d9e6:	c3                   	ret    
c001d9e7:	90                   	nop

c001d9e8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001d9e8:	55                   	push   ebp
c001d9e9:	89 e5                	mov    ebp,esp
c001d9eb:	56                   	push   esi
c001d9ec:	53                   	push   ebx
c001d9ed:	83 ec 20             	sub    esp,0x20
c001d9f0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d9f3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d9f6:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001d9fa:	74 28                	je     c001da24 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d9fc:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001da00:	7f 12                	jg     c001da14 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001da02:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da05:	05 20 b1 03 c0       	add    eax,0xc003b120
c001da0a:	8a 00                	mov    al,BYTE PTR [eax]
c001da0c:	0f b6 c0             	movzx  eax,al
c001da0f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001da12:	eb 10                	jmp    c001da24 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001da14:	83 ec 0c             	sub    esp,0xc
c001da17:	68 e8 ab 03 c0       	push   0xc003abe8
c001da1c:	e8 91 f5 fe ff       	call   c000cfb2 <panic(char const*)>
c001da21:	83 c4 10             	add    esp,0x10
c001da24:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001da28:	a1 c0 d0 03 c0       	mov    eax,ds:0xc003d0c0
c001da2d:	83 ec 08             	sub    esp,0x8
c001da30:	50                   	push   eax
c001da31:	68 20 ac 03 c0       	push   0xc003ac20
c001da36:	e8 59 f4 fe ff       	call   c000ce94 <kprintf(char const*, ...)>
c001da3b:	83 c4 10             	add    esp,0x10
c001da3e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001da45:	a1 c0 d0 03 c0       	mov    eax,ds:0xc003d0c0
c001da4a:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001da4d:	7d 58                	jge    c001daa7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001da4f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001da52:	8b 04 85 e0 d0 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc2f20]
c001da59:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001da5c:	83 ec 08             	sub    esp,0x8
c001da5f:	52                   	push   edx
c001da60:	50                   	push   eax
c001da61:	e8 4c fd ff ff       	call   c001d7b2 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001da66:	83 c4 10             	add    esp,0x10
c001da69:	84 c0                	test   al,al
c001da6b:	74 35                	je     c001daa2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001da6d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001da70:	8b 1c 85 e0 d0 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffc2f20]
c001da77:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da7a:	83 c0 20             	add    eax,0x20
c001da7d:	0f b6 f0             	movzx  esi,al
c001da80:	e8 c2 96 ff ff       	call   c0017147 <getCPUNumber()>
c001da85:	99                   	cdq    
c001da86:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001da89:	0f b6 c9             	movzx  ecx,cl
c001da8c:	83 ec 0c             	sub    esp,0xc
c001da8f:	56                   	push   esi
c001da90:	52                   	push   edx
c001da91:	50                   	push   eax
c001da92:	51                   	push   ecx
c001da93:	53                   	push   ebx
c001da94:	e8 95 fe ff ff       	call   c001d92e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001da99:	83 c4 20             	add    esp,0x20
c001da9c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001daa0:	eb 05                	jmp    c001daa7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001daa2:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001daa5:	eb 9e                	jmp    c001da45 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001daa7:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001daaa:	83 f0 01             	xor    eax,0x1
c001daad:	84 c0                	test   al,al
c001daaf:	74 10                	je     c001dac1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001dab1:	83 ec 0c             	sub    esp,0xc
c001dab4:	68 37 ac 03 c0       	push   0xc003ac37
c001dab9:	e8 f4 f4 fe ff       	call   c000cfb2 <panic(char const*)>
c001dabe:	83 c4 10             	add    esp,0x10
c001dac1:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001dac5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001dacc:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001dad0:	7f 65                	jg     c001db37 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001dad2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dad5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001dad8:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001dadf:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dae2:	01 ca                	add    edx,ecx
c001dae4:	83 c2 54             	add    edx,0x54
c001dae7:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001daeb:	85 c0                	test   eax,eax
c001daed:	75 43                	jne    c001db32 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001daef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001daf2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001daf5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001dafc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001daff:	01 ca                	add    edx,ecx
c001db01:	8d 4a 54             	lea    ecx,[edx+0x54]
c001db04:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001db07:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001db0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db0e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001db11:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001db18:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001db1b:	01 ca                	add    edx,ecx
c001db1d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001db23:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001db26:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001db2a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db2d:	83 e8 20             	sub    eax,0x20
c001db30:	eb 1a                	jmp    c001db4c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001db32:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001db35:	eb 95                	jmp    c001dacc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001db37:	83 ec 0c             	sub    esp,0xc
c001db3a:	68 44 ac 03 c0       	push   0xc003ac44
c001db3f:	e8 6e f4 fe ff       	call   c000cfb2 <panic(char const*)>
c001db44:	83 c4 10             	add    esp,0x10
c001db47:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001db4c:	8d 65 f8             	lea    esp,[ebp-0x8]
c001db4f:	5b                   	pop    ebx
c001db50:	5e                   	pop    esi
c001db51:	5d                   	pop    ebp
c001db52:	c3                   	ret    
c001db53:	90                   	nop

c001db54 <PIC::disable()>:
c001db54:	55                   	push   ebp
c001db55:	89 e5                	mov    ebp,esp
c001db57:	83 ec 10             	sub    esp,0x10
c001db5a:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001db60:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001db64:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001db67:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001db6b:	ee                   	out    dx,al
c001db6c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001db72:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001db76:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001db79:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001db7d:	ee                   	out    dx,al
c001db7e:	90                   	nop
c001db7f:	c9                   	leave  
c001db80:	c3                   	ret    
c001db81:	90                   	nop

c001db82 <PIC::close(int, int, void*)>:
c001db82:	55                   	push   ebp
c001db83:	89 e5                	mov    ebp,esp
c001db85:	83 ec 08             	sub    esp,0x8
c001db88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db8b:	8b 00                	mov    eax,DWORD PTR [eax]
c001db8d:	83 c0 3c             	add    eax,0x3c
c001db90:	8b 00                	mov    eax,DWORD PTR [eax]
c001db92:	83 ec 0c             	sub    esp,0xc
c001db95:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db98:	ff d0                	call   eax
c001db9a:	83 c4 10             	add    esp,0x10
c001db9d:	b8 00 00 00 00       	mov    eax,0x0
c001dba2:	c9                   	leave  
c001dba3:	c3                   	ret    

c001dba4 <PIC::PIC()>:
c001dba4:	83 ec 0c             	sub    esp,0xc
c001dba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbab:	83 ec 08             	sub    esp,0x8
c001dbae:	68 f0 ac 03 c0       	push   0xc003acf0
c001dbb3:	50                   	push   eax
c001dbb4:	e8 ad 64 ff ff       	call   c0014066 <InterruptController::InterruptController(char const*)>
c001dbb9:	83 c4 10             	add    esp,0x10
c001dbbc:	ba 1c ad 03 c0       	mov    edx,0xc003ad1c
c001dbc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbc5:	89 10                	mov    DWORD PTR [eax],edx
c001dbc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbcb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dbd1:	0f b6 d0             	movzx  edx,al
c001dbd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbd8:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001dbdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbe3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dbe9:	0f b6 d0             	movzx  edx,al
c001dbec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbf0:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001dbf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbf9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dbff:	8d 50 01             	lea    edx,[eax+0x1]
c001dc02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc06:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dc0c:	0f b6 d0             	movzx  edx,al
c001dc0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc13:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dc17:	83 e1 3f             	and    ecx,0x3f
c001dc1a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dc1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc22:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc28:	0f b6 d0             	movzx  edx,al
c001dc2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc2f:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001dc36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc3a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc40:	0f b6 d0             	movzx  edx,al
c001dc43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc47:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001dc4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc50:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc56:	8d 50 01             	lea    edx,[eax+0x1]
c001dc59:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc5d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dc63:	0f b6 d0             	movzx  edx,al
c001dc66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc6a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dc6e:	83 e1 3f             	and    ecx,0x3f
c001dc71:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dc75:	90                   	nop
c001dc76:	83 c4 0c             	add    esp,0xc
c001dc79:	c3                   	ret    

c001dc7a <PIC::ioWait()>:
c001dc7a:	eb 00                	jmp    c001dc7c <PIC::ioWait()+0x2>
c001dc7c:	eb 00                	jmp    c001dc7e <PIC::ioWait()+0x4>
c001dc7e:	90                   	nop
c001dc7f:	c3                   	ret    

c001dc80 <PIC::getIRQReg(int)>:
c001dc80:	55                   	push   ebp
c001dc81:	89 e5                	mov    ebp,esp
c001dc83:	83 ec 10             	sub    esp,0x10
c001dc86:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dc89:	0f b6 c0             	movzx  eax,al
c001dc8c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001dc92:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001dc95:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dc98:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dc9c:	ee                   	out    dx,al
c001dc9d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dca0:	0f b6 c0             	movzx  eax,al
c001dca3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001dca9:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001dcac:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dcaf:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dcb3:	ee                   	out    dx,al
c001dcb4:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001dcba:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001dcbe:	89 c2                	mov    edx,eax
c001dcc0:	ec                   	in     al,dx
c001dcc1:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001dcc4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dcc7:	0f b6 c0             	movzx  eax,al
c001dcca:	c1 e0 08             	shl    eax,0x8
c001dccd:	89 c1                	mov    ecx,eax
c001dccf:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001dcd5:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001dcd9:	89 c2                	mov    edx,eax
c001dcdb:	ec                   	in     al,dx
c001dcdc:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001dcdf:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001dce2:	0f b6 c0             	movzx  eax,al
c001dce5:	09 c8                	or     eax,ecx
c001dce7:	c9                   	leave  
c001dce8:	c3                   	ret    
c001dce9:	90                   	nop

c001dcea <PIC::eoi(unsigned char)>:
c001dcea:	55                   	push   ebp
c001dceb:	89 e5                	mov    ebp,esp
c001dced:	83 ec 14             	sub    esp,0x14
c001dcf0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dcf3:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001dcf6:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001dcfa:	75 1e                	jne    c001dd1a <PIC::eoi(unsigned char)+0x30>
c001dcfc:	6a 0b                	push   0xb
c001dcfe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dd01:	e8 7a ff ff ff       	call   c001dc80 <PIC::getIRQReg(int)>
c001dd06:	83 c4 08             	add    esp,0x8
c001dd09:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001dd0d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001dd11:	25 80 00 00 00       	and    eax,0x80
c001dd16:	85 c0                	test   eax,eax
c001dd18:	74 5f                	je     c001dd79 <PIC::eoi(unsigned char)+0x8f>
c001dd1a:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001dd1e:	75 2d                	jne    c001dd4d <PIC::eoi(unsigned char)+0x63>
c001dd20:	6a 0b                	push   0xb
c001dd22:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dd25:	e8 56 ff ff ff       	call   c001dc80 <PIC::getIRQReg(int)>
c001dd2a:	83 c4 08             	add    esp,0x8
c001dd2d:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001dd31:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dd34:	66 85 c0             	test   ax,ax
c001dd37:	78 14                	js     c001dd4d <PIC::eoi(unsigned char)+0x63>
c001dd39:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001dd3f:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001dd43:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dd46:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001dd4a:	ee                   	out    dx,al
c001dd4b:	eb 2d                	jmp    c001dd7a <PIC::eoi(unsigned char)+0x90>
c001dd4d:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001dd51:	76 12                	jbe    c001dd65 <PIC::eoi(unsigned char)+0x7b>
c001dd53:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001dd59:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001dd5d:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dd60:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dd64:	ee                   	out    dx,al
c001dd65:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001dd6b:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001dd6f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dd72:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dd76:	ee                   	out    dx,al
c001dd77:	eb 01                	jmp    c001dd7a <PIC::eoi(unsigned char)+0x90>
c001dd79:	90                   	nop
c001dd7a:	c9                   	leave  
c001dd7b:	c3                   	ret    

c001dd7c <PIC::remap()>:
c001dd7c:	55                   	push   ebp
c001dd7d:	89 e5                	mov    ebp,esp
c001dd7f:	83 ec 48             	sub    esp,0x48
c001dd82:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001dd89:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001dd90:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001dd96:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001dd99:	89 c2                	mov    edx,eax
c001dd9b:	ec                   	in     al,dx
c001dd9c:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001dd9f:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001dda2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001dda5:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001ddab:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001ddae:	89 c2                	mov    edx,eax
c001ddb0:	ec                   	in     al,dx
c001ddb1:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001ddb4:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001ddb7:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001ddba:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001ddc0:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001ddc4:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001ddc7:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001ddca:	ee                   	out    dx,al
c001ddcb:	83 ec 0c             	sub    esp,0xc
c001ddce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ddd1:	e8 a4 fe ff ff       	call   c001dc7a <PIC::ioWait()>
c001ddd6:	83 c4 10             	add    esp,0x10
c001ddd9:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001dddf:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001dde3:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001dde6:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001dde9:	ee                   	out    dx,al
c001ddea:	83 ec 0c             	sub    esp,0xc
c001dded:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ddf0:	e8 85 fe ff ff       	call   c001dc7a <PIC::ioWait()>
c001ddf5:	83 c4 10             	add    esp,0x10
c001ddf8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001ddfb:	0f b6 c0             	movzx  eax,al
c001ddfe:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001de04:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001de07:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001de0a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001de0d:	ee                   	out    dx,al
c001de0e:	83 ec 0c             	sub    esp,0xc
c001de11:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de14:	e8 61 fe ff ff       	call   c001dc7a <PIC::ioWait()>
c001de19:	83 c4 10             	add    esp,0x10
c001de1c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001de1f:	0f b6 c0             	movzx  eax,al
c001de22:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001de28:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001de2b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001de2e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001de31:	ee                   	out    dx,al
c001de32:	83 ec 0c             	sub    esp,0xc
c001de35:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de38:	e8 3d fe ff ff       	call   c001dc7a <PIC::ioWait()>
c001de3d:	83 c4 10             	add    esp,0x10
c001de40:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001de46:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001de4a:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001de4d:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001de50:	ee                   	out    dx,al
c001de51:	83 ec 0c             	sub    esp,0xc
c001de54:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de57:	e8 1e fe ff ff       	call   c001dc7a <PIC::ioWait()>
c001de5c:	83 c4 10             	add    esp,0x10
c001de5f:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001de65:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001de69:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001de6c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001de6f:	ee                   	out    dx,al
c001de70:	83 ec 0c             	sub    esp,0xc
c001de73:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de76:	e8 ff fd ff ff       	call   c001dc7a <PIC::ioWait()>
c001de7b:	83 c4 10             	add    esp,0x10
c001de7e:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001de84:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001de88:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001de8b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001de8e:	ee                   	out    dx,al
c001de8f:	83 ec 0c             	sub    esp,0xc
c001de92:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de95:	e8 e0 fd ff ff       	call   c001dc7a <PIC::ioWait()>
c001de9a:	83 c4 10             	add    esp,0x10
c001de9d:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001dea3:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001dea7:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001deaa:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001dead:	ee                   	out    dx,al
c001deae:	83 ec 0c             	sub    esp,0xc
c001deb1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001deb4:	e8 c1 fd ff ff       	call   c001dc7a <PIC::ioWait()>
c001deb9:	83 c4 10             	add    esp,0x10
c001debc:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001dec0:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001dec6:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001dec9:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001decc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001decf:	ee                   	out    dx,al
c001ded0:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001ded4:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001deda:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001dedd:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001dee0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dee3:	ee                   	out    dx,al
c001dee4:	90                   	nop
c001dee5:	c9                   	leave  
c001dee6:	c3                   	ret    
c001dee7:	90                   	nop

c001dee8 <PIC::open(int, int, void*)>:
c001dee8:	55                   	push   ebp
c001dee9:	89 e5                	mov    ebp,esp
c001deeb:	83 ec 18             	sub    esp,0x18
c001deee:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001def4:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001def8:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001defb:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001deff:	ee                   	out    dx,al
c001df00:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001df06:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001df0a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001df0d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001df11:	ee                   	out    dx,al
c001df12:	83 ec 0c             	sub    esp,0xc
c001df15:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df18:	e8 5f fe ff ff       	call   c001dd7c <PIC::remap()>
c001df1d:	83 c4 10             	add    esp,0x10
c001df20:	b8 00 00 00 00       	mov    eax,0x0
c001df25:	c9                   	leave  
c001df26:	c3                   	ret    
c001df27:	90                   	nop

c001df28 <APICTimer::close(int, int, void*)>:
c001df28:	b8 00 00 00 00       	mov    eax,0x0
c001df2d:	c3                   	ret    

c001df2e <apicTimerHandler(regs*, void*)>:
c001df2e:	83 ec 0c             	sub    esp,0xc
c001df31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df35:	8b 00                	mov    eax,DWORD PTR [eax]
c001df37:	99                   	cdq    
c001df38:	52                   	push   edx
c001df39:	50                   	push   eax
c001df3a:	6a 00                	push   0x0
c001df3c:	68 00 ca 9a 3b       	push   0x3b9aca00
c001df41:	e8 76 07 00 00       	call   c001e6bc <__udivdi3>
c001df46:	83 c4 10             	add    esp,0x10
c001df49:	83 ec 08             	sub    esp,0x8
c001df4c:	52                   	push   edx
c001df4d:	50                   	push   eax
c001df4e:	e8 e2 77 ff ff       	call   c0015735 <timerHandler(unsigned long long)>
c001df53:	83 c4 10             	add    esp,0x10
c001df56:	90                   	nop
c001df57:	83 c4 0c             	add    esp,0xc
c001df5a:	c3                   	ret    
c001df5b:	90                   	nop

c001df5c <APICTimer::write(int)>:
c001df5c:	53                   	push   ebx
c001df5d:	83 ec 28             	sub    esp,0x28
c001df60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df64:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001df68:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001df6e:	e8 d7 91 ff ff       	call   c001714a <thisCPU()>
c001df73:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001df79:	83 ec 0c             	sub    esp,0xc
c001df7c:	50                   	push   eax
c001df7d:	e8 0e f6 ff ff       	call   c001d590 <APIC::getBase()>
c001df82:	83 c4 10             	add    esp,0x10
c001df85:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001df89:	a1 90 c3 03 c0       	mov    eax,ds:0xc003c390
c001df8e:	8b 15 94 c3 03 c0    	mov    edx,DWORD PTR ds:0xc003c394
c001df94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001df98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001df9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dfa0:	05 e0 03 00 00       	add    eax,0x3e0
c001dfa5:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001dfab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dfaf:	05 80 03 00 00       	add    eax,0x380
c001dfb4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001dfba:	fb                   	sti    
c001dfbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfbf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dfc3:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001dfc8:	83 d2 00             	adc    edx,0x0
c001dfcb:	89 c1                	mov    ecx,eax
c001dfcd:	89 d3                	mov    ebx,edx
c001dfcf:	a1 90 c3 03 c0       	mov    eax,ds:0xc003c390
c001dfd4:	8b 15 94 c3 03 c0    	mov    edx,DWORD PTR ds:0xc003c394
c001dfda:	39 c8                	cmp    eax,ecx
c001dfdc:	89 d0                	mov    eax,edx
c001dfde:	19 d8                	sbb    eax,ebx
c001dfe0:	73 02                	jae    c001dfe4 <APICTimer::write(int)+0x88>
c001dfe2:	eb d7                	jmp    c001dfbb <APICTimer::write(int)+0x5f>
c001dfe4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dfe8:	05 20 03 00 00       	add    eax,0x320
c001dfed:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001dff3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dff7:	05 90 03 00 00       	add    eax,0x390
c001dffc:	8b 00                	mov    eax,DWORD PTR [eax]
c001dffe:	f7 d0                	not    eax
c001e000:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e004:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e008:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e00c:	ba 00 00 00 00       	mov    edx,0x0
c001e011:	f7 f3                	div    ebx
c001e013:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e017:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e01b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e021:	0d 00 00 02 00       	or     eax,0x20000
c001e026:	89 c2                	mov    edx,eax
c001e028:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e02c:	05 20 03 00 00       	add    eax,0x320
c001e031:	89 10                	mov    DWORD PTR [eax],edx
c001e033:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e037:	05 e0 03 00 00       	add    eax,0x3e0
c001e03c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e042:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e046:	05 80 03 00 00       	add    eax,0x380
c001e04b:	89 c2                	mov    edx,eax
c001e04d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e051:	89 02                	mov    DWORD PTR [edx],eax
c001e053:	90                   	nop
c001e054:	83 c4 28             	add    esp,0x28
c001e057:	5b                   	pop    ebx
c001e058:	c3                   	ret    
c001e059:	90                   	nop

c001e05a <APICTimer::open(int, int, void*)>:
c001e05a:	57                   	push   edi
c001e05b:	56                   	push   esi
c001e05c:	53                   	push   ebx
c001e05d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e061:	8b 00                	mov    eax,DWORD PTR [eax]
c001e063:	83 c0 24             	add    eax,0x24
c001e066:	8b 00                	mov    eax,DWORD PTR [eax]
c001e068:	83 ec 08             	sub    esp,0x8
c001e06b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e06f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e073:	ff d0                	call   eax
c001e075:	83 c4 10             	add    esp,0x10
c001e078:	e8 cd 90 ff ff       	call   c001714a <thisCPU()>
c001e07d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001e083:	83 ec 0c             	sub    esp,0xc
c001e086:	50                   	push   eax
c001e087:	e8 04 f5 ff ff       	call   c001d590 <APIC::getBase()>
c001e08c:	83 c4 10             	add    esp,0x10
c001e08f:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001e095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e099:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e09f:	0f b6 f8             	movzx  edi,al
c001e0a2:	89 d0                	mov    eax,edx
c001e0a4:	ba 00 00 00 00       	mov    edx,0x0
c001e0a9:	89 c1                	mov    ecx,eax
c001e0ab:	80 e5 ff             	and    ch,0xff
c001e0ae:	89 cb                	mov    ebx,ecx
c001e0b0:	0f b6 f2             	movzx  esi,dl
c001e0b3:	89 d8                	mov    eax,ebx
c001e0b5:	89 f2                	mov    edx,esi
c001e0b7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e0bb:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e0be:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e0c2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e0c6:	83 e0 00             	and    eax,0x0
c001e0c9:	09 d0                	or     eax,edx
c001e0cb:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e0cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0d3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e0d9:	8d 50 01             	lea    edx,[eax+0x1]
c001e0dc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e0e0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e0e6:	0f b6 d0             	movzx  edx,al
c001e0e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0ed:	83 c2 08             	add    edx,0x8
c001e0f0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e0f4:	0f b6 c9             	movzx  ecx,cl
c001e0f7:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e0fd:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e105:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e109:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e10f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e113:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e117:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e11d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e121:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e127:	83 ec 0c             	sub    esp,0xc
c001e12a:	51                   	push   ecx
c001e12b:	6a 01                	push   0x1
c001e12d:	68 2e df 01 c0       	push   0xc001df2e
c001e132:	52                   	push   edx
c001e133:	50                   	push   eax
c001e134:	e8 69 55 ff ff       	call   c00136a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e139:	83 c4 20             	add    esp,0x20
c001e13c:	89 c2                	mov    edx,eax
c001e13e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e142:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e148:	b8 00 00 00 00       	mov    eax,0x0
c001e14d:	5b                   	pop    ebx
c001e14e:	5e                   	pop    esi
c001e14f:	5f                   	pop    edi
c001e150:	c3                   	ret    
c001e151:	90                   	nop

c001e152 <APICTimer::APICTimer()>:
c001e152:	83 ec 0c             	sub    esp,0xc
c001e155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e159:	83 ec 08             	sub    esp,0x8
c001e15c:	68 5c ad 03 c0       	push   0xc003ad5c
c001e161:	50                   	push   eax
c001e162:	e8 3f 75 ff ff       	call   c00156a6 <Timer::Timer(char const*)>
c001e167:	83 c4 10             	add    esp,0x10
c001e16a:	ba 70 ad 03 c0       	mov    edx,0xc003ad70
c001e16f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e173:	89 10                	mov    DWORD PTR [eax],edx
c001e175:	90                   	nop
c001e176:	83 c4 0c             	add    esp,0xc
c001e179:	c3                   	ret    

c001e17a <PIT::write(int)>:
c001e17a:	83 ec 10             	sub    esp,0x10
c001e17d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e181:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e185:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e18b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e18f:	a3 04 d1 03 c0       	mov    ds:0xc003d104,eax
c001e194:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e199:	99                   	cdq    
c001e19a:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e19e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e1a2:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e1a9:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e1ae:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e1b2:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e1b7:	ee                   	out    dx,al
c001e1b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e1bc:	0f b6 c0             	movzx  eax,al
c001e1bf:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e1c6:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e1ca:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e1ce:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e1d3:	ee                   	out    dx,al
c001e1d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e1d8:	c1 f8 08             	sar    eax,0x8
c001e1db:	0f b6 c0             	movzx  eax,al
c001e1de:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e1e5:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e1e9:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e1ed:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e1f2:	ee                   	out    dx,al
c001e1f3:	90                   	nop
c001e1f4:	83 c4 10             	add    esp,0x10
c001e1f7:	c3                   	ret    

c001e1f8 <pitHandler(regs*, void*)>:
c001e1f8:	83 ec 0c             	sub    esp,0xc
c001e1fb:	a1 04 d1 03 c0       	mov    eax,ds:0xc003d104
c001e200:	99                   	cdq    
c001e201:	52                   	push   edx
c001e202:	50                   	push   eax
c001e203:	6a 00                	push   0x0
c001e205:	68 00 ca 9a 3b       	push   0x3b9aca00
c001e20a:	e8 ad 04 00 00       	call   c001e6bc <__udivdi3>
c001e20f:	83 c4 10             	add    esp,0x10
c001e212:	83 ec 08             	sub    esp,0x8
c001e215:	52                   	push   edx
c001e216:	50                   	push   eax
c001e217:	e8 19 75 ff ff       	call   c0015735 <timerHandler(unsigned long long)>
c001e21c:	83 c4 10             	add    esp,0x10
c001e21f:	90                   	nop
c001e220:	83 c4 0c             	add    esp,0xc
c001e223:	c3                   	ret    

c001e224 <PIT::open(int, int, void*)>:
c001e224:	83 ec 0c             	sub    esp,0xc
c001e227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e22b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e22d:	83 c0 24             	add    eax,0x24
c001e230:	8b 00                	mov    eax,DWORD PTR [eax]
c001e232:	83 ec 08             	sub    esp,0x8
c001e235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e239:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e23d:	ff d0                	call   eax
c001e23f:	83 c4 10             	add    esp,0x10
c001e242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e246:	83 ec 0c             	sub    esp,0xc
c001e249:	6a 00                	push   0x0
c001e24b:	6a 01                	push   0x1
c001e24d:	68 f8 e1 01 c0       	push   0xc001e1f8
c001e252:	6a 00                	push   0x0
c001e254:	50                   	push   eax
c001e255:	e8 48 54 ff ff       	call   c00136a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e25a:	83 c4 20             	add    esp,0x20
c001e25d:	89 c2                	mov    edx,eax
c001e25f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e263:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e269:	b8 00 00 00 00       	mov    eax,0x0
c001e26e:	83 c4 0c             	add    esp,0xc
c001e271:	c3                   	ret    

c001e272 <PIT::close(int, int, void*)>:
c001e272:	83 ec 0c             	sub    esp,0xc
c001e275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e279:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e287:	6a 01                	push   0x1
c001e289:	68 f8 e1 01 c0       	push   0xc001e1f8
c001e28e:	6a 00                	push   0x0
c001e290:	50                   	push   eax
c001e291:	e8 6a 54 ff ff       	call   c0013700 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e296:	83 c4 10             	add    esp,0x10
c001e299:	b8 00 00 00 00       	mov    eax,0x0
c001e29e:	83 c4 0c             	add    esp,0xc
c001e2a1:	c3                   	ret    

c001e2a2 <PIT::PIT()>:
c001e2a2:	83 ec 0c             	sub    esp,0xc
c001e2a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2a9:	83 ec 08             	sub    esp,0x8
c001e2ac:	68 98 ad 03 c0       	push   0xc003ad98
c001e2b1:	50                   	push   eax
c001e2b2:	e8 ef 73 ff ff       	call   c00156a6 <Timer::Timer(char const*)>
c001e2b7:	83 c4 10             	add    esp,0x10
c001e2ba:	ba c0 ad 03 c0       	mov    edx,0xc003adc0
c001e2bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2c3:	89 10                	mov    DWORD PTR [eax],edx
c001e2c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2c9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e2cf:	0f b6 d0             	movzx  edx,al
c001e2d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2d6:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e2dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2e1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e2e7:	0f b6 d0             	movzx  edx,al
c001e2ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2ee:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e2f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2f7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e2fd:	8d 50 01             	lea    edx,[eax+0x1]
c001e300:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e304:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e30a:	0f b6 d0             	movzx  edx,al
c001e30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e311:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e315:	83 e1 3f             	and    ecx,0x3f
c001e318:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e31c:	90                   	nop
c001e31d:	83 c4 0c             	add    esp,0xc
c001e320:	c3                   	ret    
c001e321:	66 90                	xchg   ax,ax
c001e323:	66 90                	xchg   ax,ax
c001e325:	66 90                	xchg   ax,ax
c001e327:	66 90                	xchg   ax,ax
c001e329:	66 90                	xchg   ax,ax
c001e32b:	66 90                	xchg   ax,ax
c001e32d:	66 90                	xchg   ax,ax
c001e32f:	90                   	nop

c001e330 <avxDetect>:
c001e330:	b8 00 00 00 00       	mov    eax,0x0
c001e335:	c3                   	ret    

c001e336 <avxSave>:
c001e336:	c3                   	ret    

c001e337 <avxLoad>:
c001e337:	c3                   	ret    

c001e338 <avxInit>:
c001e338:	c3                   	ret    

c001e339 <avxClose>:
c001e339:	c3                   	ret    
c001e33a:	66 90                	xchg   ax,ax
c001e33c:	66 90                	xchg   ax,ax
c001e33e:	66 90                	xchg   ax,ax

c001e340 <sseDetect>:
c001e340:	b8 01 00 00 00       	mov    eax,0x1
c001e345:	0f a2                	cpuid  
c001e347:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e34d:	74 06                	je     c001e355 <sseDetect.noSSE>
c001e34f:	b8 01 00 00 00       	mov    eax,0x1
c001e354:	c3                   	ret    

c001e355 <sseDetect.noSSE>:
c001e355:	b8 00 00 00 00       	mov    eax,0x0
c001e35a:	c3                   	ret    

c001e35b <sseSave>:
c001e35b:	0f ae 44 24 08       	fxsave [esp+0x8]
c001e360:	c3                   	ret    

c001e361 <sseLoad>:
c001e361:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001e366:	c3                   	ret    

c001e367 <sseInit>:
c001e367:	e8 40 00 00 00       	call   c001e3ac <x87Init>
c001e36c:	0f 20 e0             	mov    eax,cr4
c001e36f:	66 0d 00 06          	or     ax,0x600
c001e373:	0f 22 e0             	mov    cr4,eax
c001e376:	c3                   	ret    

c001e377 <sseClose>:
c001e377:	c3                   	ret    
c001e378:	66 90                	xchg   ax,ax
c001e37a:	66 90                	xchg   ax,ax
c001e37c:	66 90                	xchg   ax,ax
c001e37e:	66 90                	xchg   ax,ax

c001e380 <value_37F>:
c001e380:	7f 03                	jg     c001e385 <value_37A+0x1>

c001e382 <value_37E>:
c001e382:	7e 03                	jle    c001e387 <x87Detect+0x1>

c001e384 <value_37A>:
c001e384:	7a 03                	jp     c001e389 <x87Detect+0x3>

c001e386 <x87Detect>:
c001e386:	b8 01 00 00 00       	mov    eax,0x1
c001e38b:	0f a2                	cpuid  
c001e38d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e393:	74 06                	je     c001e39b <x87Detect.nox87>
c001e395:	b8 01 00 00 00       	mov    eax,0x1
c001e39a:	c3                   	ret    

c001e39b <x87Detect.nox87>:
c001e39b:	b8 00 00 00 00       	mov    eax,0x0
c001e3a0:	c3                   	ret    

c001e3a1 <x87Save>:
c001e3a1:	9b dd 74 24 08       	fsave  [esp+0x8]
c001e3a6:	c3                   	ret    

c001e3a7 <x87Load>:
c001e3a7:	dd 64 24 08          	frstor [esp+0x8]
c001e3ab:	c3                   	ret    

c001e3ac <x87Init>:
c001e3ac:	9b db e3             	finit  
c001e3af:	0f 20 c0             	mov    eax,cr0
c001e3b2:	66 25 fb ff          	and    ax,0xfffb
c001e3b6:	66 0d 22 00          	or     ax,0x22
c001e3ba:	0f 22 c0             	mov    cr0,eax
c001e3bd:	0f 06                	clts   
c001e3bf:	d9 2d 84 e3 01 c0    	fldcw  WORD PTR ds:0xc001e384
c001e3c5:	c3                   	ret    

c001e3c6 <x87Close>:
c001e3c6:	c3                   	ret    
c001e3c7:	90                   	nop

c001e3c8 <__do_global_ctors_aux>:
c001e3c8:	a1 f8 f4 01 c0       	mov    eax,ds:0xc001f4f8
c001e3cd:	83 f8 ff             	cmp    eax,0xffffffff
c001e3d0:	74 1a                	je     c001e3ec <__do_global_ctors_aux+0x24>
c001e3d2:	55                   	push   ebp
c001e3d3:	89 e5                	mov    ebp,esp
c001e3d5:	53                   	push   ebx
c001e3d6:	52                   	push   edx
c001e3d7:	bb f8 f4 01 c0       	mov    ebx,0xc001f4f8
c001e3dc:	ff d0                	call   eax
c001e3de:	83 eb 04             	sub    ebx,0x4
c001e3e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e3e3:	83 f8 ff             	cmp    eax,0xffffffff
c001e3e6:	75 f4                	jne    c001e3dc <__do_global_ctors_aux+0x14>
c001e3e8:	58                   	pop    eax
c001e3e9:	5b                   	pop    ebx
c001e3ea:	5d                   	pop    ebp
c001e3eb:	c3                   	ret    
c001e3ec:	c3                   	ret    
c001e3ed:	66 90                	xchg   ax,ax
c001e3ef:	90                   	nop

c001e3f0 <__divdi3>:
c001e3f0:	55                   	push   ebp
c001e3f1:	57                   	push   edi
c001e3f2:	56                   	push   esi
c001e3f3:	53                   	push   ebx
c001e3f4:	83 ec 1c             	sub    esp,0x1c
c001e3f7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e3fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e3ff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e402:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e406:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e40a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e40e:	85 db                	test   ebx,ebx
c001e410:	0f 88 8e 00 00 00    	js     c001e4a4 <__divdi3+0xb4>
c001e416:	89 dd                	mov    ebp,ebx
c001e418:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e420:	89 d3                	mov    ebx,edx
c001e422:	85 d2                	test   edx,edx
c001e424:	79 0d                	jns    c001e433 <__divdi3+0x43>
c001e426:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e42a:	f7 d8                	neg    eax
c001e42c:	83 d2 00             	adc    edx,0x0
c001e42f:	f7 da                	neg    edx
c001e431:	89 d3                	mov    ebx,edx
c001e433:	89 c7                	mov    edi,eax
c001e435:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e438:	85 db                	test   ebx,ebx
c001e43a:	75 48                	jne    c001e484 <__divdi3+0x94>
c001e43c:	39 ef                	cmp    edi,ebp
c001e43e:	76 24                	jbe    c001e464 <__divdi3+0x74>
c001e440:	89 ea                	mov    edx,ebp
c001e442:	f7 f7                	div    edi
c001e444:	89 c1                	mov    ecx,eax
c001e446:	31 f6                	xor    esi,esi
c001e448:	89 c8                	mov    eax,ecx
c001e44a:	89 f2                	mov    edx,esi
c001e44c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e450:	85 c9                	test   ecx,ecx
c001e452:	74 07                	je     c001e45b <__divdi3+0x6b>
c001e454:	f7 d8                	neg    eax
c001e456:	83 d2 00             	adc    edx,0x0
c001e459:	f7 da                	neg    edx
c001e45b:	83 c4 1c             	add    esp,0x1c
c001e45e:	5b                   	pop    ebx
c001e45f:	5e                   	pop    esi
c001e460:	5f                   	pop    edi
c001e461:	5d                   	pop    ebp
c001e462:	c3                   	ret    
c001e463:	90                   	nop
c001e464:	85 ff                	test   edi,edi
c001e466:	75 0b                	jne    c001e473 <__divdi3+0x83>
c001e468:	b8 01 00 00 00       	mov    eax,0x1
c001e46d:	31 d2                	xor    edx,edx
c001e46f:	f7 f3                	div    ebx
c001e471:	89 c7                	mov    edi,eax
c001e473:	31 d2                	xor    edx,edx
c001e475:	89 e8                	mov    eax,ebp
c001e477:	f7 f7                	div    edi
c001e479:	89 c6                	mov    esi,eax
c001e47b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e47e:	f7 f7                	div    edi
c001e480:	89 c1                	mov    ecx,eax
c001e482:	eb c4                	jmp    c001e448 <__divdi3+0x58>
c001e484:	39 eb                	cmp    ebx,ebp
c001e486:	77 3c                	ja     c001e4c4 <__divdi3+0xd4>
c001e488:	0f bd f3             	bsr    esi,ebx
c001e48b:	83 f6 1f             	xor    esi,0x1f
c001e48e:	75 40                	jne    c001e4d0 <__divdi3+0xe0>
c001e490:	39 eb                	cmp    ebx,ebp
c001e492:	72 09                	jb     c001e49d <__divdi3+0xad>
c001e494:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e497:	0f 87 97 00 00 00    	ja     c001e534 <__divdi3+0x144>
c001e49d:	b9 01 00 00 00       	mov    ecx,0x1
c001e4a2:	eb a4                	jmp    c001e448 <__divdi3+0x58>
c001e4a4:	f7 d9                	neg    ecx
c001e4a6:	83 d3 00             	adc    ebx,0x0
c001e4a9:	f7 db                	neg    ebx
c001e4ab:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e4ae:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e4b2:	89 dd                	mov    ebp,ebx
c001e4b4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e4bc:	e9 5f ff ff ff       	jmp    c001e420 <__divdi3+0x30>
c001e4c1:	8d 76 00             	lea    esi,[esi+0x0]
c001e4c4:	31 f6                	xor    esi,esi
c001e4c6:	31 c9                	xor    ecx,ecx
c001e4c8:	e9 7b ff ff ff       	jmp    c001e448 <__divdi3+0x58>
c001e4cd:	8d 76 00             	lea    esi,[esi+0x0]
c001e4d0:	b8 20 00 00 00       	mov    eax,0x20
c001e4d5:	29 f0                	sub    eax,esi
c001e4d7:	89 f1                	mov    ecx,esi
c001e4d9:	d3 e3                	shl    ebx,cl
c001e4db:	89 fa                	mov    edx,edi
c001e4dd:	88 c1                	mov    cl,al
c001e4df:	d3 ea                	shr    edx,cl
c001e4e1:	09 da                	or     edx,ebx
c001e4e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e4e7:	89 f1                	mov    ecx,esi
c001e4e9:	d3 e7                	shl    edi,cl
c001e4eb:	89 eb                	mov    ebx,ebp
c001e4ed:	88 c1                	mov    cl,al
c001e4ef:	d3 eb                	shr    ebx,cl
c001e4f1:	89 f1                	mov    ecx,esi
c001e4f3:	d3 e5                	shl    ebp,cl
c001e4f5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e4f8:	88 c1                	mov    cl,al
c001e4fa:	d3 ea                	shr    edx,cl
c001e4fc:	09 d5                	or     ebp,edx
c001e4fe:	89 e8                	mov    eax,ebp
c001e500:	89 da                	mov    edx,ebx
c001e502:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e506:	89 d3                	mov    ebx,edx
c001e508:	89 c5                	mov    ebp,eax
c001e50a:	f7 e7                	mul    edi
c001e50c:	39 d3                	cmp    ebx,edx
c001e50e:	72 18                	jb     c001e528 <__divdi3+0x138>
c001e510:	74 0a                	je     c001e51c <__divdi3+0x12c>
c001e512:	89 e9                	mov    ecx,ebp
c001e514:	31 f6                	xor    esi,esi
c001e516:	e9 2d ff ff ff       	jmp    c001e448 <__divdi3+0x58>
c001e51b:	90                   	nop
c001e51c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e51f:	89 f1                	mov    ecx,esi
c001e521:	d3 e7                	shl    edi,cl
c001e523:	39 c7                	cmp    edi,eax
c001e525:	73 eb                	jae    c001e512 <__divdi3+0x122>
c001e527:	90                   	nop
c001e528:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e52b:	31 f6                	xor    esi,esi
c001e52d:	e9 16 ff ff ff       	jmp    c001e448 <__divdi3+0x58>
c001e532:	66 90                	xchg   ax,ax
c001e534:	31 c9                	xor    ecx,ecx
c001e536:	e9 0d ff ff ff       	jmp    c001e448 <__divdi3+0x58>
c001e53b:	90                   	nop

c001e53c <__moddi3>:
c001e53c:	55                   	push   ebp
c001e53d:	57                   	push   edi
c001e53e:	56                   	push   esi
c001e53f:	53                   	push   ebx
c001e540:	83 ec 2c             	sub    esp,0x2c
c001e543:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e547:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e54b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e54f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e553:	85 db                	test   ebx,ebx
c001e555:	0f 88 85 00 00 00    	js     c001e5e0 <__moddi3+0xa4>
c001e55b:	89 de                	mov    esi,ebx
c001e55d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e565:	89 d7                	mov    edi,edx
c001e567:	85 d2                	test   edx,edx
c001e569:	79 09                	jns    c001e574 <__moddi3+0x38>
c001e56b:	f7 d8                	neg    eax
c001e56d:	83 d2 00             	adc    edx,0x0
c001e570:	f7 da                	neg    edx
c001e572:	89 d7                	mov    edi,edx
c001e574:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e578:	89 cd                	mov    ebp,ecx
c001e57a:	85 ff                	test   edi,edi
c001e57c:	75 52                	jne    c001e5d0 <__moddi3+0x94>
c001e57e:	89 c3                	mov    ebx,eax
c001e580:	39 f0                	cmp    eax,esi
c001e582:	76 24                	jbe    c001e5a8 <__moddi3+0x6c>
c001e584:	89 c8                	mov    eax,ecx
c001e586:	89 f2                	mov    edx,esi
c001e588:	f7 f3                	div    ebx
c001e58a:	89 d6                	mov    esi,edx
c001e58c:	89 f0                	mov    eax,esi
c001e58e:	31 d2                	xor    edx,edx
c001e590:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e594:	85 c9                	test   ecx,ecx
c001e596:	74 07                	je     c001e59f <__moddi3+0x63>
c001e598:	f7 d8                	neg    eax
c001e59a:	83 d2 00             	adc    edx,0x0
c001e59d:	f7 da                	neg    edx
c001e59f:	83 c4 2c             	add    esp,0x2c
c001e5a2:	5b                   	pop    ebx
c001e5a3:	5e                   	pop    esi
c001e5a4:	5f                   	pop    edi
c001e5a5:	5d                   	pop    ebp
c001e5a6:	c3                   	ret    
c001e5a7:	90                   	nop
c001e5a8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e5ac:	85 db                	test   ebx,ebx
c001e5ae:	75 0d                	jne    c001e5bd <__moddi3+0x81>
c001e5b0:	b8 01 00 00 00       	mov    eax,0x1
c001e5b5:	31 d2                	xor    edx,edx
c001e5b7:	f7 f7                	div    edi
c001e5b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e5bd:	89 f0                	mov    eax,esi
c001e5bf:	31 d2                	xor    edx,edx
c001e5c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e5c5:	f7 f7                	div    edi
c001e5c7:	89 e8                	mov    eax,ebp
c001e5c9:	f7 f7                	div    edi
c001e5cb:	89 d6                	mov    esi,edx
c001e5cd:	eb bd                	jmp    c001e58c <__moddi3+0x50>
c001e5cf:	90                   	nop
c001e5d0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e5d4:	39 f7                	cmp    edi,esi
c001e5d6:	76 20                	jbe    c001e5f8 <__moddi3+0xbc>
c001e5d8:	89 c8                	mov    eax,ecx
c001e5da:	89 f2                	mov    edx,esi
c001e5dc:	eb b2                	jmp    c001e590 <__moddi3+0x54>
c001e5de:	66 90                	xchg   ax,ax
c001e5e0:	f7 d9                	neg    ecx
c001e5e2:	83 d3 00             	adc    ebx,0x0
c001e5e5:	f7 db                	neg    ebx
c001e5e7:	89 de                	mov    esi,ebx
c001e5e9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e5f1:	e9 6f ff ff ff       	jmp    c001e565 <__moddi3+0x29>
c001e5f6:	66 90                	xchg   ax,ax
c001e5f8:	0f bd c7             	bsr    eax,edi
c001e5fb:	83 f0 1f             	xor    eax,0x1f
c001e5fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e602:	75 24                	jne    c001e628 <__moddi3+0xec>
c001e604:	39 f7                	cmp    edi,esi
c001e606:	72 06                	jb     c001e60e <__moddi3+0xd2>
c001e608:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e60c:	77 0c                	ja     c001e61a <__moddi3+0xde>
c001e60e:	89 e9                	mov    ecx,ebp
c001e610:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e614:	19 fe                	sbb    esi,edi
c001e616:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e61a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e61e:	89 f2                	mov    edx,esi
c001e620:	e9 6b ff ff ff       	jmp    c001e590 <__moddi3+0x54>
c001e625:	8d 76 00             	lea    esi,[esi+0x0]
c001e628:	b8 20 00 00 00       	mov    eax,0x20
c001e62d:	89 c2                	mov    edx,eax
c001e62f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e633:	29 da                	sub    edx,ebx
c001e635:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e639:	88 d9                	mov    cl,bl
c001e63b:	d3 e7                	shl    edi,cl
c001e63d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e641:	88 d1                	mov    cl,dl
c001e643:	d3 e8                	shr    eax,cl
c001e645:	09 c7                	or     edi,eax
c001e647:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e64b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e64f:	89 d8                	mov    eax,ebx
c001e651:	88 d9                	mov    cl,bl
c001e653:	d3 e7                	shl    edi,cl
c001e655:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e659:	89 f3                	mov    ebx,esi
c001e65b:	88 d1                	mov    cl,dl
c001e65d:	d3 eb                	shr    ebx,cl
c001e65f:	89 c7                	mov    edi,eax
c001e661:	88 c1                	mov    cl,al
c001e663:	d3 e6                	shl    esi,cl
c001e665:	89 e8                	mov    eax,ebp
c001e667:	88 d1                	mov    cl,dl
c001e669:	d3 e8                	shr    eax,cl
c001e66b:	09 f0                	or     eax,esi
c001e66d:	89 f9                	mov    ecx,edi
c001e66f:	d3 e5                	shl    ebp,cl
c001e671:	89 da                	mov    edx,ebx
c001e673:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e677:	89 d3                	mov    ebx,edx
c001e679:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e67d:	89 c6                	mov    esi,eax
c001e67f:	89 d1                	mov    ecx,edx
c001e681:	39 d3                	cmp    ebx,edx
c001e683:	72 27                	jb     c001e6ac <__moddi3+0x170>
c001e685:	74 21                	je     c001e6a8 <__moddi3+0x16c>
c001e687:	29 f5                	sub    ebp,esi
c001e689:	19 cb                	sbb    ebx,ecx
c001e68b:	89 de                	mov    esi,ebx
c001e68d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e691:	d3 e6                	shl    esi,cl
c001e693:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e697:	89 f9                	mov    ecx,edi
c001e699:	d3 ed                	shr    ebp,cl
c001e69b:	09 ee                	or     esi,ebp
c001e69d:	89 f0                	mov    eax,esi
c001e69f:	d3 eb                	shr    ebx,cl
c001e6a1:	89 da                	mov    edx,ebx
c001e6a3:	e9 e8 fe ff ff       	jmp    c001e590 <__moddi3+0x54>
c001e6a8:	39 c5                	cmp    ebp,eax
c001e6aa:	73 db                	jae    c001e687 <__moddi3+0x14b>
c001e6ac:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e6b0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e6b4:	89 d1                	mov    ecx,edx
c001e6b6:	89 c6                	mov    esi,eax
c001e6b8:	eb cd                	jmp    c001e687 <__moddi3+0x14b>
c001e6ba:	66 90                	xchg   ax,ax

c001e6bc <__udivdi3>:
c001e6bc:	55                   	push   ebp
c001e6bd:	57                   	push   edi
c001e6be:	56                   	push   esi
c001e6bf:	53                   	push   ebx
c001e6c0:	83 ec 1c             	sub    esp,0x1c
c001e6c3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e6c7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e6cb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e6cf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e6d3:	85 d2                	test   edx,edx
c001e6d5:	75 41                	jne    c001e718 <__udivdi3+0x5c>
c001e6d7:	39 f7                	cmp    edi,esi
c001e6d9:	76 15                	jbe    c001e6f0 <__udivdi3+0x34>
c001e6db:	89 e8                	mov    eax,ebp
c001e6dd:	89 f2                	mov    edx,esi
c001e6df:	f7 f7                	div    edi
c001e6e1:	31 db                	xor    ebx,ebx
c001e6e3:	89 da                	mov    edx,ebx
c001e6e5:	83 c4 1c             	add    esp,0x1c
c001e6e8:	5b                   	pop    ebx
c001e6e9:	5e                   	pop    esi
c001e6ea:	5f                   	pop    edi
c001e6eb:	5d                   	pop    ebp
c001e6ec:	c3                   	ret    
c001e6ed:	8d 76 00             	lea    esi,[esi+0x0]
c001e6f0:	89 f9                	mov    ecx,edi
c001e6f2:	85 ff                	test   edi,edi
c001e6f4:	75 0b                	jne    c001e701 <__udivdi3+0x45>
c001e6f6:	b8 01 00 00 00       	mov    eax,0x1
c001e6fb:	31 d2                	xor    edx,edx
c001e6fd:	f7 f7                	div    edi
c001e6ff:	89 c1                	mov    ecx,eax
c001e701:	31 d2                	xor    edx,edx
c001e703:	89 f0                	mov    eax,esi
c001e705:	f7 f1                	div    ecx
c001e707:	89 c3                	mov    ebx,eax
c001e709:	89 e8                	mov    eax,ebp
c001e70b:	f7 f1                	div    ecx
c001e70d:	89 da                	mov    edx,ebx
c001e70f:	83 c4 1c             	add    esp,0x1c
c001e712:	5b                   	pop    ebx
c001e713:	5e                   	pop    esi
c001e714:	5f                   	pop    edi
c001e715:	5d                   	pop    ebp
c001e716:	c3                   	ret    
c001e717:	90                   	nop
c001e718:	39 f2                	cmp    edx,esi
c001e71a:	77 1c                	ja     c001e738 <__udivdi3+0x7c>
c001e71c:	0f bd da             	bsr    ebx,edx
c001e71f:	83 f3 1f             	xor    ebx,0x1f
c001e722:	75 24                	jne    c001e748 <__udivdi3+0x8c>
c001e724:	39 f2                	cmp    edx,esi
c001e726:	72 08                	jb     c001e730 <__udivdi3+0x74>
c001e728:	39 ef                	cmp    edi,ebp
c001e72a:	0f 87 84 00 00 00    	ja     c001e7b4 <__udivdi3+0xf8>
c001e730:	b8 01 00 00 00       	mov    eax,0x1
c001e735:	eb ac                	jmp    c001e6e3 <__udivdi3+0x27>
c001e737:	90                   	nop
c001e738:	31 db                	xor    ebx,ebx
c001e73a:	31 c0                	xor    eax,eax
c001e73c:	89 da                	mov    edx,ebx
c001e73e:	83 c4 1c             	add    esp,0x1c
c001e741:	5b                   	pop    ebx
c001e742:	5e                   	pop    esi
c001e743:	5f                   	pop    edi
c001e744:	5d                   	pop    ebp
c001e745:	c3                   	ret    
c001e746:	66 90                	xchg   ax,ax
c001e748:	b8 20 00 00 00       	mov    eax,0x20
c001e74d:	29 d8                	sub    eax,ebx
c001e74f:	88 d9                	mov    cl,bl
c001e751:	d3 e2                	shl    edx,cl
c001e753:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e757:	89 fa                	mov    edx,edi
c001e759:	88 c1                	mov    cl,al
c001e75b:	d3 ea                	shr    edx,cl
c001e75d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e761:	09 d1                	or     ecx,edx
c001e763:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e767:	88 d9                	mov    cl,bl
c001e769:	d3 e7                	shl    edi,cl
c001e76b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e76f:	89 f7                	mov    edi,esi
c001e771:	88 c1                	mov    cl,al
c001e773:	d3 ef                	shr    edi,cl
c001e775:	88 d9                	mov    cl,bl
c001e777:	d3 e6                	shl    esi,cl
c001e779:	89 ea                	mov    edx,ebp
c001e77b:	88 c1                	mov    cl,al
c001e77d:	d3 ea                	shr    edx,cl
c001e77f:	09 d6                	or     esi,edx
c001e781:	89 f0                	mov    eax,esi
c001e783:	89 fa                	mov    edx,edi
c001e785:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e789:	89 d7                	mov    edi,edx
c001e78b:	89 c6                	mov    esi,eax
c001e78d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e791:	39 d7                	cmp    edi,edx
c001e793:	72 13                	jb     c001e7a8 <__udivdi3+0xec>
c001e795:	74 09                	je     c001e7a0 <__udivdi3+0xe4>
c001e797:	89 f0                	mov    eax,esi
c001e799:	31 db                	xor    ebx,ebx
c001e79b:	e9 43 ff ff ff       	jmp    c001e6e3 <__udivdi3+0x27>
c001e7a0:	88 d9                	mov    cl,bl
c001e7a2:	d3 e5                	shl    ebp,cl
c001e7a4:	39 c5                	cmp    ebp,eax
c001e7a6:	73 ef                	jae    c001e797 <__udivdi3+0xdb>
c001e7a8:	8d 46 ff             	lea    eax,[esi-0x1]
c001e7ab:	31 db                	xor    ebx,ebx
c001e7ad:	e9 31 ff ff ff       	jmp    c001e6e3 <__udivdi3+0x27>
c001e7b2:	66 90                	xchg   ax,ax
c001e7b4:	31 c0                	xor    eax,eax
c001e7b6:	e9 28 ff ff ff       	jmp    c001e6e3 <__udivdi3+0x27>
c001e7bb:	90                   	nop

c001e7bc <__umoddi3>:
c001e7bc:	55                   	push   ebp
c001e7bd:	57                   	push   edi
c001e7be:	56                   	push   esi
c001e7bf:	53                   	push   ebx
c001e7c0:	83 ec 1c             	sub    esp,0x1c
c001e7c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e7c7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e7cb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e7cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e7d3:	89 da                	mov    edx,ebx
c001e7d5:	85 c0                	test   eax,eax
c001e7d7:	75 37                	jne    c001e810 <__umoddi3+0x54>
c001e7d9:	39 df                	cmp    edi,ebx
c001e7db:	76 13                	jbe    c001e7f0 <__umoddi3+0x34>
c001e7dd:	89 f0                	mov    eax,esi
c001e7df:	f7 f7                	div    edi
c001e7e1:	89 d0                	mov    eax,edx
c001e7e3:	31 d2                	xor    edx,edx
c001e7e5:	83 c4 1c             	add    esp,0x1c
c001e7e8:	5b                   	pop    ebx
c001e7e9:	5e                   	pop    esi
c001e7ea:	5f                   	pop    edi
c001e7eb:	5d                   	pop    ebp
c001e7ec:	c3                   	ret    
c001e7ed:	8d 76 00             	lea    esi,[esi+0x0]
c001e7f0:	89 fd                	mov    ebp,edi
c001e7f2:	85 ff                	test   edi,edi
c001e7f4:	75 0b                	jne    c001e801 <__umoddi3+0x45>
c001e7f6:	b8 01 00 00 00       	mov    eax,0x1
c001e7fb:	31 d2                	xor    edx,edx
c001e7fd:	f7 f7                	div    edi
c001e7ff:	89 c5                	mov    ebp,eax
c001e801:	89 d8                	mov    eax,ebx
c001e803:	31 d2                	xor    edx,edx
c001e805:	f7 f5                	div    ebp
c001e807:	89 f0                	mov    eax,esi
c001e809:	f7 f5                	div    ebp
c001e80b:	89 d0                	mov    eax,edx
c001e80d:	eb d4                	jmp    c001e7e3 <__umoddi3+0x27>
c001e80f:	90                   	nop
c001e810:	89 f1                	mov    ecx,esi
c001e812:	39 d8                	cmp    eax,ebx
c001e814:	76 0a                	jbe    c001e820 <__umoddi3+0x64>
c001e816:	89 f0                	mov    eax,esi
c001e818:	83 c4 1c             	add    esp,0x1c
c001e81b:	5b                   	pop    ebx
c001e81c:	5e                   	pop    esi
c001e81d:	5f                   	pop    edi
c001e81e:	5d                   	pop    ebp
c001e81f:	c3                   	ret    
c001e820:	0f bd e8             	bsr    ebp,eax
c001e823:	83 f5 1f             	xor    ebp,0x1f
c001e826:	75 1c                	jne    c001e844 <__umoddi3+0x88>
c001e828:	39 d8                	cmp    eax,ebx
c001e82a:	72 04                	jb     c001e830 <__umoddi3+0x74>
c001e82c:	39 f7                	cmp    edi,esi
c001e82e:	77 08                	ja     c001e838 <__umoddi3+0x7c>
c001e830:	89 da                	mov    edx,ebx
c001e832:	29 fe                	sub    esi,edi
c001e834:	19 c2                	sbb    edx,eax
c001e836:	89 f1                	mov    ecx,esi
c001e838:	89 c8                	mov    eax,ecx
c001e83a:	83 c4 1c             	add    esp,0x1c
c001e83d:	5b                   	pop    ebx
c001e83e:	5e                   	pop    esi
c001e83f:	5f                   	pop    edi
c001e840:	5d                   	pop    ebp
c001e841:	c3                   	ret    
c001e842:	66 90                	xchg   ax,ax
c001e844:	ba 20 00 00 00       	mov    edx,0x20
c001e849:	29 ea                	sub    edx,ebp
c001e84b:	89 e9                	mov    ecx,ebp
c001e84d:	d3 e0                	shl    eax,cl
c001e84f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e853:	89 f8                	mov    eax,edi
c001e855:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e859:	88 d1                	mov    cl,dl
c001e85b:	d3 e8                	shr    eax,cl
c001e85d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e861:	09 c1                	or     ecx,eax
c001e863:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e867:	89 e9                	mov    ecx,ebp
c001e869:	d3 e7                	shl    edi,cl
c001e86b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e86f:	89 d8                	mov    eax,ebx
c001e871:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e875:	88 d1                	mov    cl,dl
c001e877:	d3 e8                	shr    eax,cl
c001e879:	89 c7                	mov    edi,eax
c001e87b:	89 e9                	mov    ecx,ebp
c001e87d:	d3 e3                	shl    ebx,cl
c001e87f:	89 f0                	mov    eax,esi
c001e881:	88 d1                	mov    cl,dl
c001e883:	d3 e8                	shr    eax,cl
c001e885:	09 d8                	or     eax,ebx
c001e887:	89 e9                	mov    ecx,ebp
c001e889:	d3 e6                	shl    esi,cl
c001e88b:	89 f3                	mov    ebx,esi
c001e88d:	89 fa                	mov    edx,edi
c001e88f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e893:	89 d1                	mov    ecx,edx
c001e895:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e899:	89 c6                	mov    esi,eax
c001e89b:	89 d7                	mov    edi,edx
c001e89d:	39 d1                	cmp    ecx,edx
c001e89f:	72 27                	jb     c001e8c8 <__umoddi3+0x10c>
c001e8a1:	74 21                	je     c001e8c4 <__umoddi3+0x108>
c001e8a3:	89 ca                	mov    edx,ecx
c001e8a5:	29 f3                	sub    ebx,esi
c001e8a7:	19 fa                	sbb    edx,edi
c001e8a9:	89 d0                	mov    eax,edx
c001e8ab:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e8af:	d3 e0                	shl    eax,cl
c001e8b1:	89 e9                	mov    ecx,ebp
c001e8b3:	d3 eb                	shr    ebx,cl
c001e8b5:	09 d8                	or     eax,ebx
c001e8b7:	d3 ea                	shr    edx,cl
c001e8b9:	83 c4 1c             	add    esp,0x1c
c001e8bc:	5b                   	pop    ebx
c001e8bd:	5e                   	pop    esi
c001e8be:	5f                   	pop    edi
c001e8bf:	5d                   	pop    ebp
c001e8c0:	c3                   	ret    
c001e8c1:	8d 76 00             	lea    esi,[esi+0x0]
c001e8c4:	39 c3                	cmp    ebx,eax
c001e8c6:	73 db                	jae    c001e8a3 <__umoddi3+0xe7>
c001e8c8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e8cc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e8d0:	89 d7                	mov    edi,edx
c001e8d2:	89 c6                	mov    esi,eax
c001e8d4:	eb cd                	jmp    c001e8a3 <__umoddi3+0xe7>
c001e8d6:	66 90                	xchg   ax,ax
c001e8d8:	66 90                	xchg   ax,ax
c001e8da:	66 90                	xchg   ax,ax
c001e8dc:	66 90                	xchg   ax,ax
c001e8de:	66 90                	xchg   ax,ax

c001e8e0 <fabs>:
c001e8e0:	83 ec 0c             	sub    esp,0xc
c001e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8e7:	89 04 24             	mov    DWORD PTR [esp],eax
c001e8ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e8ee:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001e8f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e8f7:	dd 04 24             	fld    QWORD PTR [esp]
c001e8fa:	83 c4 0c             	add    esp,0xc
c001e8fd:	c3                   	ret    
c001e8fe:	66 90                	xchg   ax,ax

c001e900 <lrint>:
c001e900:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001e904:	83 ec 04             	sub    esp,0x4
c001e907:	db 1c 24             	fistp  DWORD PTR [esp]
c001e90a:	58                   	pop    eax
c001e90b:	c3                   	ret    

c001e90c <lrintf>:
c001e90c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001e910:	83 ec 04             	sub    esp,0x4
c001e913:	db 1c 24             	fistp  DWORD PTR [esp]
c001e916:	58                   	pop    eax
c001e917:	c3                   	ret    

Disassembly of section .init:

c001e918 <_init>:
c001e918:	55                   	push   ebp
c001e919:	89 e5                	mov    ebp,esp
c001e91b:	e8 f8 17 fe ff       	call   c0000118 <frame_dummy>
c001e920:	e8 a3 fa ff ff       	call   c001e3c8 <__do_global_ctors_aux>
c001e925:	5d                   	pop    ebp
c001e926:	c3                   	ret    

Disassembly of section .fini:

c001e927 <_fini>:
c001e927:	55                   	push   ebp
c001e928:	89 e5                	mov    ebp,esp
c001e92a:	e8 79 17 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001e92f:	5d                   	pop    ebp
c001e930:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e932 <Computer::~Computer()>:
c001e932:	83 ec 0c             	sub    esp,0xc
c001e935:	ba 98 88 03 c0       	mov    edx,0xc0038898
c001e93a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e93e:	89 10                	mov    DWORD PTR [eax],edx
c001e940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e944:	83 ec 0c             	sub    esp,0xc
c001e947:	50                   	push   eax
c001e948:	e8 a3 4c ff ff       	call   c00135f0 <Device::~Device()>
c001e94d:	83 c4 10             	add    esp,0x10
c001e950:	90                   	nop
c001e951:	83 c4 0c             	add    esp,0xc
c001e954:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e956 <Computer::~Computer()>:
c001e956:	83 ec 0c             	sub    esp,0xc
c001e959:	83 ec 0c             	sub    esp,0xc
c001e95c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e960:	e8 cd ff ff ff       	call   c001e932 <Computer::~Computer()>
c001e965:	83 c4 10             	add    esp,0x10
c001e968:	83 ec 08             	sub    esp,0x8
c001e96b:	68 ec 01 00 00       	push   0x1ec
c001e970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e974:	e8 da 3a ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c001e979:	83 c4 10             	add    esp,0x10
c001e97c:	83 c4 0c             	add    esp,0xc
c001e97f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e980 <idleCommon()>:
c001e980:	83 ec 0c             	sub    esp,0xc
c001e983:	e8 ae f9 fe ff       	call   c000e336 <lockScheduler()>
c001e988:	e8 dd fc fe ff       	call   c000e66a <schedule()>
c001e98d:	83 c4 0c             	add    esp,0xc
c001e990:	e9 a3 f9 fe ff       	jmp    c000e338 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001e995 <CPU::readCR0()>:
c001e995:	83 ec 10             	sub    esp,0x10
c001e998:	0f 20 c0             	mov    eax,cr0
c001e99b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e99f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9a3:	83 c4 10             	add    esp,0x10
c001e9a6:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001e9a7 <CPU::readCR2()>:
c001e9a7:	83 ec 10             	sub    esp,0x10
c001e9aa:	0f 20 d0             	mov    eax,cr2
c001e9ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9b5:	83 c4 10             	add    esp,0x10
c001e9b8:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001e9b9 <CPU::readCR3()>:
c001e9b9:	83 ec 10             	sub    esp,0x10
c001e9bc:	0f 20 d8             	mov    eax,cr3
c001e9bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9c7:	83 c4 10             	add    esp,0x10
c001e9ca:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001e9cb <CPU::readCR4()>:
c001e9cb:	83 ec 10             	sub    esp,0x10
c001e9ce:	0f 20 e0             	mov    eax,cr4
c001e9d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9d9:	83 c4 10             	add    esp,0x10
c001e9dc:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001e9dd <CPU::writeCR3(unsigned long)>:
c001e9dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9e1:	0f 22 d8             	mov    cr3,eax
c001e9e4:	90                   	nop
c001e9e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001e9e6 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001e9e6:	90                   	nop
c001e9e7:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001e9e8 <ThreadControlBlock::ThreadControlBlock()>:
c001e9e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9ec:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e9f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9f7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001e9fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea02:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ea09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea0d:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001ea14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea18:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ea1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea20:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001ea24:	90                   	nop
c001ea25:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ea26 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ea26:	83 ec 0c             	sub    esp,0xc
c001ea29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea2d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea37:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea42:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ea49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea4d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea62:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ea69:	83 ec 0c             	sub    esp,0xc
c001ea6c:	68 24 92 03 c0       	push   0xc0039224
c001ea71:	e8 1e e4 fe ff       	call   c000ce94 <kprintf(char const*, ...)>
c001ea76:	83 c4 10             	add    esp,0x10
c001ea79:	90                   	nop
c001ea7a:	83 c4 0c             	add    esp,0xc
c001ea7d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ea7e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ea7e:	83 ec 0c             	sub    esp,0xc
c001ea81:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ea86:	75 10                	jne    c001ea98 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001ea88:	83 ec 0c             	sub    esp,0xc
c001ea8b:	68 40 92 03 c0       	push   0xc0039240
c001ea90:	e8 1d e5 fe ff       	call   c000cfb2 <panic(char const*)>
c001ea95:	83 c4 10             	add    esp,0x10
c001ea98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea9c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea9e:	85 c0                	test   eax,eax
c001eaa0:	74 34                	je     c001ead6 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001eaa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eaa9:	85 c0                	test   eax,eax
c001eaab:	74 29                	je     c001ead6 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001eaad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eab4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eab8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001eabb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eabf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eac3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eacd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ead4:	eb 65                	jmp    c001eb3b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001ead6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eada:	8b 00                	mov    eax,DWORD PTR [eax]
c001eadc:	85 c0                	test   eax,eax
c001eade:	75 4b                	jne    c001eb2b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001eae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eae4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eae7:	85 c0                	test   eax,eax
c001eae9:	75 40                	jne    c001eb2b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001eaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eaf3:	89 10                	mov    DWORD PTR [eax],edx
c001eaf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaf9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eafd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb07:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eb0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb12:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb15:	85 c0                	test   eax,eax
c001eb17:	74 22                	je     c001eb3b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001eb19:	83 ec 0c             	sub    esp,0xc
c001eb1c:	68 62 92 03 c0       	push   0xc0039262
c001eb21:	e8 8c e4 fe ff       	call   c000cfb2 <panic(char const*)>
c001eb26:	83 c4 10             	add    esp,0x10
c001eb29:	eb 10                	jmp    c001eb3b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001eb2b:	83 ec 0c             	sub    esp,0xc
c001eb2e:	68 6c 92 03 c0       	push   0xc003926c
c001eb33:	e8 7a e4 fe ff       	call   c000cfb2 <panic(char const*)>
c001eb38:	83 c4 10             	add    esp,0x10
c001eb3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb3f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb42:	8d 50 01             	lea    edx,[eax+0x1]
c001eb45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb49:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb4c:	90                   	nop
c001eb4d:	83 c4 0c             	add    esp,0xc
c001eb50:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001eb52 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001eb52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb56:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb58:	85 c0                	test   eax,eax
c001eb5a:	75 0e                	jne    c001eb6a <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001eb5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb63:	85 c0                	test   eax,eax
c001eb65:	75 03                	jne    c001eb6a <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001eb67:	b0 01                	mov    al,0x1
c001eb69:	c3                   	ret    
c001eb6a:	b0 00                	mov    al,0x0
c001eb6c:	90                   	nop
c001eb6d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001eb6e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001eb6e:	83 ec 0c             	sub    esp,0xc
c001eb71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb75:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb77:	85 c0                	test   eax,eax
c001eb79:	75 15                	jne    c001eb90 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001eb7b:	83 ec 0c             	sub    esp,0xc
c001eb7e:	68 78 92 03 c0       	push   0xc0039278
c001eb83:	e8 2a e4 fe ff       	call   c000cfb2 <panic(char const*)>
c001eb88:	83 c4 10             	add    esp,0x10
c001eb8b:	e9 88 00 00 00       	jmp    c001ec18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001eb90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb97:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eb9a:	85 c0                	test   eax,eax
c001eb9c:	0f 95 c0             	setne  al
c001eb9f:	84 c0                	test   al,al
c001eba1:	74 10                	je     c001ebb3 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001eba3:	83 ec 0c             	sub    esp,0xc
c001eba6:	68 c3 92 03 c0       	push   0xc00392c3
c001ebab:	e8 02 e4 fe ff       	call   c000cfb2 <panic(char const*)>
c001ebb0:	83 c4 10             	add    esp,0x10
c001ebb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebb7:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebb9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ebbc:	85 c0                	test   eax,eax
c001ebbe:	0f 94 c0             	sete   al
c001ebc1:	84 c0                	test   al,al
c001ebc3:	74 33                	je     c001ebf8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001ebc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebd3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ebda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebde:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebe1:	83 f8 01             	cmp    eax,0x1
c001ebe4:	74 21                	je     c001ec07 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001ebe6:	83 ec 0c             	sub    esp,0xc
c001ebe9:	68 9c 92 03 c0       	push   0xc003929c
c001ebee:	e8 bf e3 fe ff       	call   c000cfb2 <panic(char const*)>
c001ebf3:	83 c4 10             	add    esp,0x10
c001ebf6:	eb 0f                	jmp    c001ec07 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001ebf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebfc:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebfe:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ec01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec05:	89 10                	mov    DWORD PTR [eax],edx
c001ec07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec0b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec0e:	8d 50 ff             	lea    edx,[eax-0x1]
c001ec11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec15:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ec18:	83 c4 0c             	add    esp,0xc
c001ec1b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ec1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec20:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec22:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ec24 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ec24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec28:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001ec2c <LinkedList<UnixFile>::~LinkedList()>:
c001ec2c:	90                   	nop
c001ec2d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001ec2e <LinkedList<UnixFile>::LinkedList()>:
c001ec2e:	83 ec 0c             	sub    esp,0xc
c001ec31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec35:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec3f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec4a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec55:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec5f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec6a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec71:	83 ec 0c             	sub    esp,0xc
c001ec74:	68 24 92 03 c0       	push   0xc0039224
c001ec79:	e8 16 e2 fe ff       	call   c000ce94 <kprintf(char const*, ...)>
c001ec7e:	83 c4 10             	add    esp,0x10
c001ec81:	90                   	nop
c001ec82:	83 c4 0c             	add    esp,0xc
c001ec85:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001ec86 <LinkedList<UnixFile>::getFirstElement()>:
c001ec86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec8a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec8c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001ec8e <LinkedList<UnixFile>::removeFirst()>:
c001ec8e:	83 ec 0c             	sub    esp,0xc
c001ec91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec95:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec97:	85 c0                	test   eax,eax
c001ec99:	75 12                	jne    c001ecad <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ec9b:	83 ec 0c             	sub    esp,0xc
c001ec9e:	68 78 92 03 c0       	push   0xc0039278
c001eca3:	e8 0a e3 fe ff       	call   c000cfb2 <panic(char const*)>
c001eca8:	83 c4 10             	add    esp,0x10
c001ecab:	eb 7e                	jmp    c001ed2b <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ecad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecb4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ecb7:	85 c0                	test   eax,eax
c001ecb9:	74 10                	je     c001eccb <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ecbb:	83 ec 0c             	sub    esp,0xc
c001ecbe:	68 c3 92 03 c0       	push   0xc00392c3
c001ecc3:	e8 ea e2 fe ff       	call   c000cfb2 <panic(char const*)>
c001ecc8:	83 c4 10             	add    esp,0x10
c001eccb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eccf:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecd1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ecd4:	85 c0                	test   eax,eax
c001ecd6:	75 33                	jne    c001ed0b <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ecd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecdc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ece2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ecf4:	83 f8 01             	cmp    eax,0x1
c001ecf7:	74 21                	je     c001ed1a <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ecf9:	83 ec 0c             	sub    esp,0xc
c001ecfc:	68 9c 92 03 c0       	push   0xc003929c
c001ed01:	e8 ac e2 fe ff       	call   c000cfb2 <panic(char const*)>
c001ed06:	83 c4 10             	add    esp,0x10
c001ed09:	eb 0f                	jmp    c001ed1a <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ed0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed0f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed11:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ed14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed18:	89 10                	mov    DWORD PTR [eax],edx
c001ed1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed1e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed21:	8d 50 ff             	lea    edx,[eax-0x1]
c001ed24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed28:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed2b:	83 c4 0c             	add    esp,0xc
c001ed2e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ed30 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ed30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed37:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001ed38 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001ed38:	83 ec 1c             	sub    esp,0x1c
c001ed3b:	83 ec 0c             	sub    esp,0xc
c001ed3e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ed42:	e8 3f ff ff ff       	call   c001ec86 <LinkedList<UnixFile>::getFirstElement()>
c001ed47:	83 c4 10             	add    esp,0x10
c001ed4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed4e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ed53:	74 43                	je     c001ed98 <LinkedList<UnixFile>::addElement(UnixFile*)+0x60>
c001ed55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed59:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c001ed5d:	75 20                	jne    c001ed7f <LinkedList<UnixFile>::addElement(UnixFile*)+0x47>
c001ed5f:	83 ec 0c             	sub    esp,0xc
c001ed62:	68 68 94 03 c0       	push   0xc0039468
c001ed67:	e8 28 e1 fe ff       	call   c000ce94 <kprintf(char const*, ...)>
c001ed6c:	83 c4 10             	add    esp,0x10
c001ed6f:	83 ec 0c             	sub    esp,0xc
c001ed72:	68 7f 94 03 c0       	push   0xc003947f
c001ed77:	e8 36 e2 fe ff       	call   c000cfb2 <panic(char const*)>
c001ed7c:	83 c4 10             	add    esp,0x10
c001ed7f:	83 ec 08             	sub    esp,0x8
c001ed82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ed86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ed8a:	e8 a1 ff ff ff       	call   c001ed30 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001ed8f:	83 c4 10             	add    esp,0x10
c001ed92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed96:	eb b6                	jmp    c001ed4e <LinkedList<UnixFile>::addElement(UnixFile*)+0x16>
c001ed98:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ed9d:	75 10                	jne    c001edaf <LinkedList<UnixFile>::addElement(UnixFile*)+0x77>
c001ed9f:	83 ec 0c             	sub    esp,0xc
c001eda2:	68 40 92 03 c0       	push   0xc0039240
c001eda7:	e8 06 e2 fe ff       	call   c000cfb2 <panic(char const*)>
c001edac:	83 c4 10             	add    esp,0x10
c001edaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edb3:	8b 00                	mov    eax,DWORD PTR [eax]
c001edb5:	85 c0                	test   eax,eax
c001edb7:	74 34                	je     c001eded <LinkedList<UnixFile>::addElement(UnixFile*)+0xb5>
c001edb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edbd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001edc0:	85 c0                	test   eax,eax
c001edc2:	74 29                	je     c001eded <LinkedList<UnixFile>::addElement(UnixFile*)+0xb5>
c001edc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001edcb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001edcf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001edd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edd6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001edda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eddd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ede1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ede4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001edeb:	eb 65                	jmp    c001ee52 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001eded:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edf1:	8b 00                	mov    eax,DWORD PTR [eax]
c001edf3:	85 c0                	test   eax,eax
c001edf5:	75 4b                	jne    c001ee42 <LinkedList<UnixFile>::addElement(UnixFile*)+0x10a>
c001edf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edfb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001edfe:	85 c0                	test   eax,eax
c001ee00:	75 40                	jne    c001ee42 <LinkedList<UnixFile>::addElement(UnixFile*)+0x10a>
c001ee02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ee0a:	89 10                	mov    DWORD PTR [eax],edx
c001ee0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee10:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ee14:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ee17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee1e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ee25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee29:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee2c:	85 c0                	test   eax,eax
c001ee2e:	74 22                	je     c001ee52 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001ee30:	83 ec 0c             	sub    esp,0xc
c001ee33:	68 62 92 03 c0       	push   0xc0039262
c001ee38:	e8 75 e1 fe ff       	call   c000cfb2 <panic(char const*)>
c001ee3d:	83 c4 10             	add    esp,0x10
c001ee40:	eb 10                	jmp    c001ee52 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001ee42:	83 ec 0c             	sub    esp,0xc
c001ee45:	68 6c 92 03 c0       	push   0xc003926c
c001ee4a:	e8 63 e1 fe ff       	call   c000cfb2 <panic(char const*)>
c001ee4f:	83 c4 10             	add    esp,0x10
c001ee52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee56:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee59:	8d 50 01             	lea    edx,[eax+0x1]
c001ee5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee60:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ee63:	90                   	nop
c001ee64:	83 c4 1c             	add    esp,0x1c
c001ee67:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ee68 <DriverlessDevice::~DriverlessDevice()>:
c001ee68:	ba 24 9a 03 c0       	mov    edx,0xc0039a24
c001ee6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee71:	89 10                	mov    DWORD PTR [eax],edx
c001ee73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee77:	50                   	push   eax
c001ee78:	e8 73 47 ff ff       	call   c00135f0 <Device::~Device()>
c001ee7d:	83 c4 04             	add    esp,0x4
c001ee80:	90                   	nop
c001ee81:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ee82 <DriverlessDevice::~DriverlessDevice()>:
c001ee82:	83 ec 0c             	sub    esp,0xc
c001ee85:	83 ec 0c             	sub    esp,0xc
c001ee88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee8c:	e8 d7 ff ff ff       	call   c001ee68 <DriverlessDevice::~DriverlessDevice()>
c001ee91:	83 c4 10             	add    esp,0x10
c001ee94:	83 ec 08             	sub    esp,0x8
c001ee97:	68 58 01 00 00       	push   0x158
c001ee9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eea0:	e8 ae 35 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c001eea5:	83 c4 10             	add    esp,0x10
c001eea8:	83 c4 0c             	add    esp,0xc
c001eeab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001eeac <LinkedList<Device>::addElement(Device*)>:
c001eeac:	83 ec 0c             	sub    esp,0xc
c001eeaf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eeb4:	75 10                	jne    c001eec6 <LinkedList<Device>::addElement(Device*)+0x1a>
c001eeb6:	83 ec 0c             	sub    esp,0xc
c001eeb9:	68 40 92 03 c0       	push   0xc0039240
c001eebe:	e8 ef e0 fe ff       	call   c000cfb2 <panic(char const*)>
c001eec3:	83 c4 10             	add    esp,0x10
c001eec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeca:	8b 00                	mov    eax,DWORD PTR [eax]
c001eecc:	85 c0                	test   eax,eax
c001eece:	74 3a                	je     c001ef0a <LinkedList<Device>::addElement(Device*)+0x5e>
c001eed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eed7:	85 c0                	test   eax,eax
c001eed9:	74 2f                	je     c001ef0a <LinkedList<Device>::addElement(Device*)+0x5e>
c001eedb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eedf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eee2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eee6:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001eeec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eef4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eefb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eefe:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ef08:	eb 68                	jmp    c001ef72 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ef0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef0e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef10:	85 c0                	test   eax,eax
c001ef12:	75 4e                	jne    c001ef62 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ef14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef1b:	85 c0                	test   eax,eax
c001ef1d:	75 43                	jne    c001ef62 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ef1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef27:	89 10                	mov    DWORD PTR [eax],edx
c001ef29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef2d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef31:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ef34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef3b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ef45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef49:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef4c:	85 c0                	test   eax,eax
c001ef4e:	74 22                	je     c001ef72 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ef50:	83 ec 0c             	sub    esp,0xc
c001ef53:	68 62 92 03 c0       	push   0xc0039262
c001ef58:	e8 55 e0 fe ff       	call   c000cfb2 <panic(char const*)>
c001ef5d:	83 c4 10             	add    esp,0x10
c001ef60:	eb 10                	jmp    c001ef72 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ef62:	83 ec 0c             	sub    esp,0xc
c001ef65:	68 6c 92 03 c0       	push   0xc003926c
c001ef6a:	e8 43 e0 fe ff       	call   c000cfb2 <panic(char const*)>
c001ef6f:	83 c4 10             	add    esp,0x10
c001ef72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef76:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef79:	8d 50 01             	lea    edx,[eax+0x1]
c001ef7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef80:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ef83:	90                   	nop
c001ef84:	83 c4 0c             	add    esp,0xc
c001ef87:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ef88 <LinkedList<Device>::LinkedList()>:
c001ef88:	83 ec 0c             	sub    esp,0xc
c001ef8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef8f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef99:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001efa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001efab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efaf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001efb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001efc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001efcb:	83 ec 0c             	sub    esp,0xc
c001efce:	68 24 92 03 c0       	push   0xc0039224
c001efd3:	e8 bc de fe ff       	call   c000ce94 <kprintf(char const*, ...)>
c001efd8:	83 c4 10             	add    esp,0x10
c001efdb:	90                   	nop
c001efdc:	83 c4 0c             	add    esp,0xc
c001efdf:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001efe0 <CPU::readDR0()>:
c001efe0:	83 ec 10             	sub    esp,0x10
c001efe3:	0f 21 c0             	mov    eax,db0
c001efe6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001efea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efee:	83 c4 10             	add    esp,0x10
c001eff1:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001eff2 <CPU::readDR1()>:
c001eff2:	83 ec 10             	sub    esp,0x10
c001eff5:	0f 21 c8             	mov    eax,db1
c001eff8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001effc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f000:	83 c4 10             	add    esp,0x10
c001f003:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001f004 <CPU::readDR2()>:
c001f004:	83 ec 10             	sub    esp,0x10
c001f007:	0f 21 d0             	mov    eax,db2
c001f00a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f00e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f012:	83 c4 10             	add    esp,0x10
c001f015:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001f016 <CPU::readDR3()>:
c001f016:	83 ec 10             	sub    esp,0x10
c001f019:	0f 21 d8             	mov    eax,db3
c001f01c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f020:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f024:	83 c4 10             	add    esp,0x10
c001f027:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001f028 <CPU::readDR6()>:
c001f028:	83 ec 10             	sub    esp,0x10
c001f02b:	0f 21 f0             	mov    eax,db6
c001f02e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f032:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f036:	83 c4 10             	add    esp,0x10
c001f039:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001f03a <CPU::readDR7()>:
c001f03a:	83 ec 10             	sub    esp,0x10
c001f03d:	0f 21 f8             	mov    eax,db7
c001f040:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f044:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f048:	83 c4 10             	add    esp,0x10
c001f04b:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f04c <ACPI::~ACPI()>:
c001f04c:	83 ec 0c             	sub    esp,0xc
c001f04f:	ba 04 a1 03 c0       	mov    edx,0xc003a104
c001f054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f058:	89 10                	mov    DWORD PTR [eax],edx
c001f05a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f05e:	83 ec 0c             	sub    esp,0xc
c001f061:	50                   	push   eax
c001f062:	e8 89 45 ff ff       	call   c00135f0 <Device::~Device()>
c001f067:	83 c4 10             	add    esp,0x10
c001f06a:	90                   	nop
c001f06b:	83 c4 0c             	add    esp,0xc
c001f06e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f070 <ACPI::~ACPI()>:
c001f070:	83 ec 0c             	sub    esp,0xc
c001f073:	83 ec 0c             	sub    esp,0xc
c001f076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f07a:	e8 cd ff ff ff       	call   c001f04c <ACPI::~ACPI()>
c001f07f:	83 c4 10             	add    esp,0x10
c001f082:	83 ec 08             	sub    esp,0x8
c001f085:	68 68 22 00 00       	push   0x2268
c001f08a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f08e:	e8 c0 33 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c001f093:	83 c4 10             	add    esp,0x10
c001f096:	83 c4 0c             	add    esp,0xc
c001f099:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f09a <CPU::~CPU()>:
c001f09a:	83 ec 0c             	sub    esp,0xc
c001f09d:	ba 54 a3 03 c0       	mov    edx,0xc003a354
c001f0a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0a6:	89 10                	mov    DWORD PTR [eax],edx
c001f0a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ac:	83 ec 0c             	sub    esp,0xc
c001f0af:	50                   	push   eax
c001f0b0:	e8 3b 45 ff ff       	call   c00135f0 <Device::~Device()>
c001f0b5:	83 c4 10             	add    esp,0x10
c001f0b8:	90                   	nop
c001f0b9:	83 c4 0c             	add    esp,0xc
c001f0bc:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001f0be <CPU::~CPU()>:
c001f0be:	83 ec 0c             	sub    esp,0xc
c001f0c1:	83 ec 0c             	sub    esp,0xc
c001f0c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0c8:	e8 cd ff ff ff       	call   c001f09a <CPU::~CPU()>
c001f0cd:	83 c4 10             	add    esp,0x10
c001f0d0:	83 ec 08             	sub    esp,0x8
c001f0d3:	68 98 11 00 00       	push   0x1198
c001f0d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0dc:	e8 72 33 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c001f0e1:	83 c4 10             	add    esp,0x10
c001f0e4:	83 c4 0c             	add    esp,0xc
c001f0e7:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001f0e8 <CPU::writeDR7(unsigned long)>:
c001f0e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0ec:	0f 23 f8             	mov    db7,eax
c001f0ef:	90                   	nop
c001f0f0:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001f0f1 <CPU::writeCR4(unsigned long)>:
c001f0f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0f5:	0f 22 e0             	mov    cr4,eax
c001f0f8:	90                   	nop
c001f0f9:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f0fa <PCI::~PCI()>:
c001f0fa:	83 ec 0c             	sub    esp,0xc
c001f0fd:	ba f0 a6 03 c0       	mov    edx,0xc003a6f0
c001f102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f106:	89 10                	mov    DWORD PTR [eax],edx
c001f108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f10c:	83 ec 0c             	sub    esp,0xc
c001f10f:	50                   	push   eax
c001f110:	e8 eb 3e ff ff       	call   c0013000 <Bus::~Bus()>
c001f115:	83 c4 10             	add    esp,0x10
c001f118:	90                   	nop
c001f119:	83 c4 0c             	add    esp,0xc
c001f11c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f11e <PCI::~PCI()>:
c001f11e:	83 ec 0c             	sub    esp,0xc
c001f121:	83 ec 0c             	sub    esp,0xc
c001f124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f128:	e8 cd ff ff ff       	call   c001f0fa <PCI::~PCI()>
c001f12d:	83 c4 10             	add    esp,0x10
c001f130:	83 ec 08             	sub    esp,0x8
c001f133:	68 58 01 00 00       	push   0x158
c001f138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f13c:	e8 12 33 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c001f141:	83 c4 10             	add    esp,0x10
c001f144:	83 c4 0c             	add    esp,0xc
c001f147:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f148 <IDE::~IDE()>:
c001f148:	83 ec 0c             	sub    esp,0xc
c001f14b:	ba bc a9 03 c0       	mov    edx,0xc003a9bc
c001f150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f154:	89 10                	mov    DWORD PTR [eax],edx
c001f156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f15a:	83 ec 0c             	sub    esp,0xc
c001f15d:	50                   	push   eax
c001f15e:	e8 a3 49 ff ff       	call   c0013b06 <HardDiskController::~HardDiskController()>
c001f163:	83 c4 10             	add    esp,0x10
c001f166:	90                   	nop
c001f167:	83 c4 0c             	add    esp,0xc
c001f16a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f16c <IDE::~IDE()>:
c001f16c:	83 ec 0c             	sub    esp,0xc
c001f16f:	83 ec 0c             	sub    esp,0xc
c001f172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f176:	e8 cd ff ff ff       	call   c001f148 <IDE::~IDE()>
c001f17b:	83 c4 10             	add    esp,0x10
c001f17e:	83 ec 08             	sub    esp,0x8
c001f181:	68 70 02 00 00       	push   0x270
c001f186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f18a:	e8 c4 32 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c001f18f:	83 c4 10             	add    esp,0x10
c001f192:	83 c4 0c             	add    esp,0xc
c001f195:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f196 <ATA::~ATA()>:
c001f196:	83 ec 0c             	sub    esp,0xc
c001f199:	ba 0c aa 03 c0       	mov    edx,0xc003aa0c
c001f19e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1a2:	89 10                	mov    DWORD PTR [eax],edx
c001f1a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1a8:	83 ec 0c             	sub    esp,0xc
c001f1ab:	50                   	push   eax
c001f1ac:	e8 33 4a ff ff       	call   c0013be4 <PhysicalDisk::~PhysicalDisk()>
c001f1b1:	83 c4 10             	add    esp,0x10
c001f1b4:	90                   	nop
c001f1b5:	83 c4 0c             	add    esp,0xc
c001f1b8:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f1ba <ATA::~ATA()>:
c001f1ba:	83 ec 0c             	sub    esp,0xc
c001f1bd:	83 ec 0c             	sub    esp,0xc
c001f1c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1c4:	e8 cd ff ff ff       	call   c001f196 <ATA::~ATA()>
c001f1c9:	83 c4 10             	add    esp,0x10
c001f1cc:	83 ec 08             	sub    esp,0x8
c001f1cf:	68 7c 01 00 00       	push   0x17c
c001f1d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1d8:	e8 76 32 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c001f1dd:	83 c4 10             	add    esp,0x10
c001f1e0:	83 c4 0c             	add    esp,0xc
c001f1e3:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f1e4 <ATAPI::~ATAPI()>:
c001f1e4:	83 ec 0c             	sub    esp,0xc
c001f1e7:	ba 78 aa 03 c0       	mov    edx,0xc003aa78
c001f1ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1f0:	89 10                	mov    DWORD PTR [eax],edx
c001f1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1f6:	83 ec 0c             	sub    esp,0xc
c001f1f9:	50                   	push   eax
c001f1fa:	e8 e5 49 ff ff       	call   c0013be4 <PhysicalDisk::~PhysicalDisk()>
c001f1ff:	83 c4 10             	add    esp,0x10
c001f202:	90                   	nop
c001f203:	83 c4 0c             	add    esp,0xc
c001f206:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f208 <ATAPI::~ATAPI()>:
c001f208:	83 ec 0c             	sub    esp,0xc
c001f20b:	83 ec 0c             	sub    esp,0xc
c001f20e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f212:	e8 cd ff ff ff       	call   c001f1e4 <ATAPI::~ATAPI()>
c001f217:	83 c4 10             	add    esp,0x10
c001f21a:	83 ec 08             	sub    esp,0x8
c001f21d:	68 80 01 00 00       	push   0x180
c001f222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f226:	e8 28 32 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c001f22b:	83 c4 10             	add    esp,0x10
c001f22e:	83 c4 0c             	add    esp,0xc
c001f231:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001f232 <AVX::~AVX()>:
c001f232:	83 ec 0c             	sub    esp,0xc
c001f235:	ba b4 aa 03 c0       	mov    edx,0xc003aab4
c001f23a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f23e:	89 10                	mov    DWORD PTR [eax],edx
c001f240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f244:	83 ec 0c             	sub    esp,0xc
c001f247:	50                   	push   eax
c001f248:	e8 1b 4a ff ff       	call   c0013c68 <FPU::~FPU()>
c001f24d:	83 c4 10             	add    esp,0x10
c001f250:	90                   	nop
c001f251:	83 c4 0c             	add    esp,0xc
c001f254:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001f256 <AVX::~AVX()>:
c001f256:	83 ec 0c             	sub    esp,0xc
c001f259:	83 ec 0c             	sub    esp,0xc
c001f25c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f260:	e8 cd ff ff ff       	call   c001f232 <AVX::~AVX()>
c001f265:	83 c4 10             	add    esp,0x10
c001f268:	83 ec 08             	sub    esp,0x8
c001f26b:	68 58 01 00 00       	push   0x158
c001f270:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f274:	e8 da 31 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c001f279:	83 c4 10             	add    esp,0x10
c001f27c:	83 c4 0c             	add    esp,0xc
c001f27f:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001f280 <MMX::~MMX()>:
c001f280:	83 ec 0c             	sub    esp,0xc
c001f283:	ba f4 aa 03 c0       	mov    edx,0xc003aaf4
c001f288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f28c:	89 10                	mov    DWORD PTR [eax],edx
c001f28e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f292:	83 ec 0c             	sub    esp,0xc
c001f295:	50                   	push   eax
c001f296:	e8 cd 49 ff ff       	call   c0013c68 <FPU::~FPU()>
c001f29b:	83 c4 10             	add    esp,0x10
c001f29e:	90                   	nop
c001f29f:	83 c4 0c             	add    esp,0xc
c001f2a2:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001f2a4 <MMX::~MMX()>:
c001f2a4:	83 ec 0c             	sub    esp,0xc
c001f2a7:	83 ec 0c             	sub    esp,0xc
c001f2aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2ae:	e8 cd ff ff ff       	call   c001f280 <MMX::~MMX()>
c001f2b3:	83 c4 10             	add    esp,0x10
c001f2b6:	83 ec 08             	sub    esp,0x8
c001f2b9:	68 58 01 00 00       	push   0x158
c001f2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2c2:	e8 8c 31 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c001f2c7:	83 c4 10             	add    esp,0x10
c001f2ca:	83 c4 0c             	add    esp,0xc
c001f2cd:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001f2ce <SSE::~SSE()>:
c001f2ce:	83 ec 0c             	sub    esp,0xc
c001f2d1:	ba 34 ab 03 c0       	mov    edx,0xc003ab34
c001f2d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2da:	89 10                	mov    DWORD PTR [eax],edx
c001f2dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2e0:	83 ec 0c             	sub    esp,0xc
c001f2e3:	50                   	push   eax
c001f2e4:	e8 7f 49 ff ff       	call   c0013c68 <FPU::~FPU()>
c001f2e9:	83 c4 10             	add    esp,0x10
c001f2ec:	90                   	nop
c001f2ed:	83 c4 0c             	add    esp,0xc
c001f2f0:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001f2f2 <SSE::~SSE()>:
c001f2f2:	83 ec 0c             	sub    esp,0xc
c001f2f5:	83 ec 0c             	sub    esp,0xc
c001f2f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2fc:	e8 cd ff ff ff       	call   c001f2ce <SSE::~SSE()>
c001f301:	83 c4 10             	add    esp,0x10
c001f304:	83 ec 08             	sub    esp,0x8
c001f307:	68 58 01 00 00       	push   0x158
c001f30c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f310:	e8 3e 31 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c001f315:	83 c4 10             	add    esp,0x10
c001f318:	83 c4 0c             	add    esp,0xc
c001f31b:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001f31c <x87::~x87()>:
c001f31c:	83 ec 0c             	sub    esp,0xc
c001f31f:	ba 74 ab 03 c0       	mov    edx,0xc003ab74
c001f324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f328:	89 10                	mov    DWORD PTR [eax],edx
c001f32a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f32e:	83 ec 0c             	sub    esp,0xc
c001f331:	50                   	push   eax
c001f332:	e8 31 49 ff ff       	call   c0013c68 <FPU::~FPU()>
c001f337:	83 c4 10             	add    esp,0x10
c001f33a:	90                   	nop
c001f33b:	83 c4 0c             	add    esp,0xc
c001f33e:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001f340 <x87::~x87()>:
c001f340:	83 ec 0c             	sub    esp,0xc
c001f343:	83 ec 0c             	sub    esp,0xc
c001f346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f34a:	e8 cd ff ff ff       	call   c001f31c <x87::~x87()>
c001f34f:	83 c4 10             	add    esp,0x10
c001f352:	83 ec 08             	sub    esp,0x8
c001f355:	68 58 01 00 00       	push   0x158
c001f35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f35e:	e8 f0 30 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c001f363:	83 c4 10             	add    esp,0x10
c001f366:	83 c4 0c             	add    esp,0xc
c001f369:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f36a <IOAPIC::~IOAPIC()>:
c001f36a:	83 ec 0c             	sub    esp,0xc
c001f36d:	ba cc ac 03 c0       	mov    edx,0xc003accc
c001f372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f376:	89 10                	mov    DWORD PTR [eax],edx
c001f378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f37c:	83 ec 0c             	sub    esp,0xc
c001f37f:	50                   	push   eax
c001f380:	e8 6b 42 ff ff       	call   c00135f0 <Device::~Device()>
c001f385:	83 c4 10             	add    esp,0x10
c001f388:	90                   	nop
c001f389:	83 c4 0c             	add    esp,0xc
c001f38c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f38e <IOAPIC::~IOAPIC()>:
c001f38e:	83 ec 0c             	sub    esp,0xc
c001f391:	83 ec 0c             	sub    esp,0xc
c001f394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f398:	e8 cd ff ff ff       	call   c001f36a <IOAPIC::~IOAPIC()>
c001f39d:	83 c4 10             	add    esp,0x10
c001f3a0:	83 ec 08             	sub    esp,0x8
c001f3a3:	68 68 01 00 00       	push   0x168
c001f3a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3ac:	e8 a2 30 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c001f3b1:	83 c4 10             	add    esp,0x10
c001f3b4:	83 c4 0c             	add    esp,0xc
c001f3b7:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001f3b8 <APIC::~APIC()>:
c001f3b8:	83 ec 0c             	sub    esp,0xc
c001f3bb:	ba 84 ac 03 c0       	mov    edx,0xc003ac84
c001f3c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3c4:	89 10                	mov    DWORD PTR [eax],edx
c001f3c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3ca:	83 ec 0c             	sub    esp,0xc
c001f3cd:	50                   	push   eax
c001f3ce:	e8 39 4d ff ff       	call   c001410c <InterruptController::~InterruptController()>
c001f3d3:	83 c4 10             	add    esp,0x10
c001f3d6:	90                   	nop
c001f3d7:	83 c4 0c             	add    esp,0xc
c001f3da:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001f3dc <APIC::~APIC()>:
c001f3dc:	83 ec 0c             	sub    esp,0xc
c001f3df:	83 ec 0c             	sub    esp,0xc
c001f3e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3e6:	e8 cd ff ff ff       	call   c001f3b8 <APIC::~APIC()>
c001f3eb:	83 c4 10             	add    esp,0x10
c001f3ee:	83 ec 08             	sub    esp,0x8
c001f3f1:	68 58 21 00 00       	push   0x2158
c001f3f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3fa:	e8 54 30 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c001f3ff:	83 c4 10             	add    esp,0x10
c001f402:	83 c4 0c             	add    esp,0xc
c001f405:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001f406 <PIC::~PIC()>:
c001f406:	83 ec 0c             	sub    esp,0xc
c001f409:	ba 1c ad 03 c0       	mov    edx,0xc003ad1c
c001f40e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f412:	89 10                	mov    DWORD PTR [eax],edx
c001f414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f418:	83 ec 0c             	sub    esp,0xc
c001f41b:	50                   	push   eax
c001f41c:	e8 eb 4c ff ff       	call   c001410c <InterruptController::~InterruptController()>
c001f421:	83 c4 10             	add    esp,0x10
c001f424:	90                   	nop
c001f425:	83 c4 0c             	add    esp,0xc
c001f428:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001f42a <PIC::~PIC()>:
c001f42a:	83 ec 0c             	sub    esp,0xc
c001f42d:	83 ec 0c             	sub    esp,0xc
c001f430:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f434:	e8 cd ff ff ff       	call   c001f406 <PIC::~PIC()>
c001f439:	83 c4 10             	add    esp,0x10
c001f43c:	83 ec 08             	sub    esp,0x8
c001f43f:	68 58 21 00 00       	push   0x2158
c001f444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f448:	e8 06 30 ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c001f44d:	83 c4 10             	add    esp,0x10
c001f450:	83 c4 0c             	add    esp,0xc
c001f453:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f454 <APICTimer::~APICTimer()>:
c001f454:	83 ec 0c             	sub    esp,0xc
c001f457:	ba 70 ad 03 c0       	mov    edx,0xc003ad70
c001f45c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f460:	89 10                	mov    DWORD PTR [eax],edx
c001f462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f466:	83 ec 0c             	sub    esp,0xc
c001f469:	50                   	push   eax
c001f46a:	e8 6d 62 ff ff       	call   c00156dc <Timer::~Timer()>
c001f46f:	83 c4 10             	add    esp,0x10
c001f472:	90                   	nop
c001f473:	83 c4 0c             	add    esp,0xc
c001f476:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f478 <APICTimer::~APICTimer()>:
c001f478:	83 ec 0c             	sub    esp,0xc
c001f47b:	83 ec 0c             	sub    esp,0xc
c001f47e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f482:	e8 cd ff ff ff       	call   c001f454 <APICTimer::~APICTimer()>
c001f487:	83 c4 10             	add    esp,0x10
c001f48a:	83 ec 08             	sub    esp,0x8
c001f48d:	68 60 01 00 00       	push   0x160
c001f492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f496:	e8 b8 2f ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c001f49b:	83 c4 10             	add    esp,0x10
c001f49e:	83 c4 0c             	add    esp,0xc
c001f4a1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f4a2 <PIT::~PIT()>:
c001f4a2:	83 ec 0c             	sub    esp,0xc
c001f4a5:	ba c0 ad 03 c0       	mov    edx,0xc003adc0
c001f4aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4ae:	89 10                	mov    DWORD PTR [eax],edx
c001f4b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4b4:	83 ec 0c             	sub    esp,0xc
c001f4b7:	50                   	push   eax
c001f4b8:	e8 1f 62 ff ff       	call   c00156dc <Timer::~Timer()>
c001f4bd:	83 c4 10             	add    esp,0x10
c001f4c0:	90                   	nop
c001f4c1:	83 c4 0c             	add    esp,0xc
c001f4c4:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f4c6 <PIT::~PIT()>:
c001f4c6:	83 ec 0c             	sub    esp,0xc
c001f4c9:	83 ec 0c             	sub    esp,0xc
c001f4cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4d0:	e8 cd ff ff ff       	call   c001f4a2 <PIT::~PIT()>
c001f4d5:	83 c4 10             	add    esp,0x10
c001f4d8:	83 ec 08             	sub    esp,0x8
c001f4db:	68 5c 01 00 00       	push   0x15c
c001f4e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4e4:	e8 6a 2f ff ff       	call   c0012453 <operator delete(void*, unsigned long)>
c001f4e9:	83 c4 10             	add    esp,0x10
c001f4ec:	83 c4 0c             	add    esp,0xc
c001f4ef:	c3                   	ret    
