
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 ed be 00 00       	call   c000bf0d <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 03 e8 01 00       	call   c001e828 <_init>
c0000025:	c3                   	ret    
c0000026:	bb b2 f3 01 c0       	mov    ebx,0xc001f3b2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb bc f3 01 c0    	cmp    ebx,0xc001f3bc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 2c 2f 02 c0       	mov    eax,0xc0022f2c
c0000049:	3d 2c 2f 02 c0       	cmp    eax,0xc0022f2c
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 2c 2f 02 c0       	push   0xc0022f2c
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 2c 2f 02 c0       	mov    eax,0xc0022f2c
c0000075:	2d 2c 2f 02 c0       	sub    eax,0xc0022f2c
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 2c 2f 02 c0       	push   0xc0022f2c
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d cc 30 02 c0 00 	cmp    BYTE PTR ds:0xc00230cc,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb c4 f3 01 c0       	mov    ebx,0xc001f3c4
c00000bb:	81 eb c0 f3 01 c0    	sub    ebx,0xc001f3c0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be c0 f3 01 c0       	mov    esi,0xc001f3c0
c00000ca:	a1 d0 30 02 c0       	mov    eax,ds:0xc00230d0
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 d0 30 02 c0       	mov    ds:0xc00230d0,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 d0 30 02 c0       	mov    eax,ds:0xc00230d0
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 2c 2f 02 c0       	push   0xc0022f2c
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 cc 30 02 c0 01 	mov    BYTE PTR ds:0xc00230cc,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d4 30 02 c0       	push   0xc00230d4
c000012c:	68 2c 2f 02 c0       	push   0xc0022f2c
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	c3                   	ret    

c00001b5 <goToVM86>:
c00001b5:	fa                   	cli    
c00001b6:	55                   	push   ebp
c00001b7:	89 e5                	mov    ebp,esp
c00001b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bc:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001bf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001c2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001c5:	25 ff ff 00 00       	and    eax,0xffff
c00001ca:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001d0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00001d6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00001dc:	52                   	push   edx
c00001dd:	51                   	push   ecx
c00001de:	68 02 02 02 00       	push   0x20202
c00001e3:	53                   	push   ebx
c00001e4:	50                   	push   eax
c00001e5:	cf                   	iret   

c00001e6 <goToUsermode>:
c00001e6:	fa                   	cli    
c00001e7:	55                   	push   ebp
c00001e8:	89 e5                	mov    ebp,esp
c00001ea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00001ed:	66 b8 23 00          	mov    ax,0x23
c00001f1:	66 8e d8             	mov    ds,ax
c00001f4:	66 8e c0             	mov    es,ax
c00001f7:	66 8e e0             	mov    fs,ax
c00001fa:	66 8e e8             	mov    gs,ax
c00001fd:	89 e0                	mov    eax,esp
c00001ff:	68 23 00 00 00       	push   0x23
c0000204:	50                   	push   eax
c0000205:	68 02 02 00 00       	push   0x202
c000020a:	68 1b 00 00 00       	push   0x1b
c000020f:	53                   	push   ebx
c0000210:	cf                   	iret   

c0000211 <switchToThreadASMFirstTime>:
c0000211:	9c                   	pushf  
c0000212:	fa                   	cli    
c0000213:	50                   	push   eax
c0000214:	53                   	push   ebx
c0000215:	51                   	push   ecx
c0000216:	52                   	push   edx
c0000217:	56                   	push   esi
c0000218:	57                   	push   edi
c0000219:	55                   	push   ebp
c000021a:	e9 11 00 00 00       	jmp    c0000230 <commonThreadSwitch>

c000021f <switchToThreadASM>:
c000021f:	9c                   	pushf  
c0000220:	50                   	push   eax
c0000221:	53                   	push   ebx
c0000222:	51                   	push   ecx
c0000223:	52                   	push   edx
c0000224:	56                   	push   esi
c0000225:	57                   	push   edi
c0000226:	55                   	push   ebp
c0000227:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000022d:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000230 <commonThreadSwitch>:
c0000230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000234:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000023a:	8b 06                	mov    eax,DWORD PTR [esi]
c000023c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000023f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000242:	0f 20 d9             	mov    ecx,cr3
c0000245:	39 c8                	cmp    eax,ecx
c0000247:	74 03                	je     c000024c <commonThreadSwitch.doneVAS>
c0000249:	0f 22 d8             	mov    cr3,eax

c000024c <commonThreadSwitch.doneVAS>:
c000024c:	85 d2                	test   edx,edx
c000024e:	74 4e                	je     c000029e <commonThreadSwitch.notFirstTime>
c0000250:	fa                   	cli    
c0000251:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000254:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000259:	60                   	pusha  
c000025a:	e8 55 ea 00 00       	call   c000ecb4 <mapVASFirstTime>
c000025f:	61                   	popa   
c0000260:	89 c4                	mov    esp,eax
c0000262:	56                   	push   esi
c0000263:	52                   	push   edx
c0000264:	e8 eb 73 01 00       	call   c0017654 <changeTSS>
c0000269:	5a                   	pop    edx
c000026a:	5e                   	pop    esi
c000026b:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000272:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000278:	74 39                	je     c00002b3 <commonThreadSwitch.cameOffAFork>
c000027a:	5d                   	pop    ebp
c000027b:	5f                   	pop    edi
c000027c:	5e                   	pop    esi
c000027d:	59                   	pop    ecx
c000027e:	59                   	pop    ecx
c000027f:	5b                   	pop    ebx
c0000280:	58                   	pop    eax
c0000281:	81 c4 04 00 00 00    	add    esp,0x4
c0000287:	6a 02                	push   0x2
c0000289:	9d                   	popf   
c000028a:	52                   	push   edx
c000028b:	e8 d7 77 01 00       	call   c0017a67 <taskStartupFunction>
c0000290:	5a                   	pop    edx
c0000291:	50                   	push   eax
c0000292:	ff d2                	call   edx
c0000294:	e8 7d 7f 01 00       	call   c0018216 <taskReturned>
c0000299:	e9 fb ff ff ff       	jmp    c0000299 <commonThreadSwitch.doneVAS+0x4d>

c000029e <commonThreadSwitch.notFirstTime>:
c000029e:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a1:	56                   	push   esi
c00002a2:	52                   	push   edx
c00002a3:	e8 ac 73 01 00       	call   c0017654 <changeTSS>
c00002a8:	5a                   	pop    edx
c00002a9:	5e                   	pop    esi
c00002aa:	5d                   	pop    ebp
c00002ab:	5f                   	pop    edi
c00002ac:	5e                   	pop    esi
c00002ad:	5a                   	pop    edx
c00002ae:	59                   	pop    ecx
c00002af:	5b                   	pop    ebx
c00002b0:	58                   	pop    eax
c00002b1:	9d                   	popf   
c00002b2:	c3                   	ret    

c00002b3 <commonThreadSwitch.cameOffAFork>:
c00002b3:	31 c0                	xor    eax,eax
c00002b5:	31 d2                	xor    edx,edx
c00002b7:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002ba:	e9 a2 02 00 00       	jmp    c0000561 <offAForkJumpThingy>

c00002bf <detectCPUID>:
c00002bf:	9c                   	pushf  
c00002c0:	9c                   	pushf  
c00002c1:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002c8:	9d                   	popf   
c00002c9:	9c                   	pushf  
c00002ca:	58                   	pop    eax
c00002cb:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002ce:	9d                   	popf   
c00002cf:	25 00 00 20 00       	and    eax,0x200000
c00002d4:	c3                   	ret    

c00002d5 <asmQuickAcquireLock>:
c00002d5:	55                   	push   ebp
c00002d6:	89 e5                	mov    ebp,esp
c00002d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00002db <asmQuickAcquireLock.retry>:
c00002db:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00002e0:	72 02                	jb     c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002e2:	fa                   	cli    
c00002e3:	c3                   	ret    

c00002e4 <asmQuickAcquireLock.spin_with_pause>:
c00002e4:	f3 90                	pause  
c00002e6:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00002ec:	75 f6                	jne    c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002ee:	e9 e8 ff ff ff       	jmp    c00002db <asmQuickAcquireLock.retry>

c00002f3 <asmQuickReleaseLock>:
c00002f3:	55                   	push   ebp
c00002f4:	89 e5                	mov    ebp,esp
c00002f6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00002fd:	5d                   	pop    ebp
c00002fe:	c3                   	ret    

c00002ff <asmAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 05                	jb     c0000311 <asmAcquireLock.spin_with_pause>
c000030c:	9c                   	pushf  
c000030d:	58                   	pop    eax
c000030e:	fa                   	cli    
c000030f:	5d                   	pop    ebp
c0000310:	c3                   	ret    

c0000311 <asmAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmAcquireLock.spin_with_pause>
c000031b:	e9 e5 ff ff ff       	jmp    c0000305 <asmAcquireLock.retry>

c0000320 <asmReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000329:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000032f:	52                   	push   edx
c0000330:	9d                   	popf   
c0000331:	5d                   	pop    ebp
c0000332:	c3                   	ret    

c0000333 <loadGDT>:
c0000333:	0f 01 15 10 35 02 c0 	lgdtd  ds:0xc0023510
c000033a:	66 b8 10 00          	mov    ax,0x10
c000033e:	66 8e d8             	mov    ds,ax
c0000341:	66 8e c0             	mov    es,ax
c0000344:	66 8e e0             	mov    fs,ax
c0000347:	66 8e e8             	mov    gs,ax
c000034a:	66 8e d0             	mov    ss,ax
c000034d:	e9 00 00 00 00       	jmp    c0000352 <flush2>

c0000352 <flush2>:
c0000352:	c3                   	ret    

c0000353 <isr0>:
c0000353:	fa                   	cli    
c0000354:	68 00 00 00 00       	push   0x0
c0000359:	68 00 00 00 00       	push   0x0
c000035e:	e9 a2 01 00 00       	jmp    c0000505 <int_common_stub>

c0000363 <isr1>:
c0000363:	fa                   	cli    
c0000364:	6a 00                	push   0x0
c0000366:	6a 01                	push   0x1
c0000368:	e9 98 01 00 00       	jmp    c0000505 <int_common_stub>

c000036d <isr2>:
c000036d:	fa                   	cli    
c000036e:	6a 00                	push   0x0
c0000370:	6a 02                	push   0x2
c0000372:	e9 8e 01 00 00       	jmp    c0000505 <int_common_stub>

c0000377 <isr3>:
c0000377:	fa                   	cli    
c0000378:	6a 00                	push   0x0
c000037a:	6a 03                	push   0x3
c000037c:	e9 84 01 00 00       	jmp    c0000505 <int_common_stub>

c0000381 <isr4>:
c0000381:	fa                   	cli    
c0000382:	6a 00                	push   0x0
c0000384:	6a 04                	push   0x4
c0000386:	e9 7a 01 00 00       	jmp    c0000505 <int_common_stub>

c000038b <isr5>:
c000038b:	fa                   	cli    
c000038c:	6a 00                	push   0x0
c000038e:	6a 05                	push   0x5
c0000390:	e9 70 01 00 00       	jmp    c0000505 <int_common_stub>

c0000395 <isr6>:
c0000395:	fa                   	cli    
c0000396:	6a 00                	push   0x0
c0000398:	6a 06                	push   0x6
c000039a:	e9 66 01 00 00       	jmp    c0000505 <int_common_stub>

c000039f <isr7>:
c000039f:	fa                   	cli    
c00003a0:	6a 00                	push   0x0
c00003a2:	6a 07                	push   0x7
c00003a4:	e9 5c 01 00 00       	jmp    c0000505 <int_common_stub>

c00003a9 <isr8>:
c00003a9:	fa                   	cli    
c00003aa:	6a 08                	push   0x8
c00003ac:	e9 54 01 00 00       	jmp    c0000505 <int_common_stub>

c00003b1 <isr9>:
c00003b1:	fa                   	cli    
c00003b2:	6a 00                	push   0x0
c00003b4:	6a 09                	push   0x9
c00003b6:	e9 4a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003bb <isr10>:
c00003bb:	fa                   	cli    
c00003bc:	6a 0a                	push   0xa
c00003be:	e9 42 01 00 00       	jmp    c0000505 <int_common_stub>

c00003c3 <isr11>:
c00003c3:	fa                   	cli    
c00003c4:	6a 0b                	push   0xb
c00003c6:	e9 3a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003cb <isr12>:
c00003cb:	fa                   	cli    
c00003cc:	6a 0c                	push   0xc
c00003ce:	e9 32 01 00 00       	jmp    c0000505 <int_common_stub>

c00003d3 <isr13>:
c00003d3:	fa                   	cli    
c00003d4:	6a 0d                	push   0xd
c00003d6:	e9 2a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003db <isr14>:
c00003db:	fa                   	cli    
c00003dc:	6a 0e                	push   0xe
c00003de:	e9 22 01 00 00       	jmp    c0000505 <int_common_stub>

c00003e3 <isr15>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 0f                	push   0xf
c00003e8:	e9 18 01 00 00       	jmp    c0000505 <int_common_stub>

c00003ed <isr16>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 10                	push   0x10
c00003f2:	e9 0e 01 00 00       	jmp    c0000505 <int_common_stub>

c00003f7 <isr17>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 11                	push   0x11
c00003fc:	e9 04 01 00 00       	jmp    c0000505 <int_common_stub>

c0000401 <isr18>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 12                	push   0x12
c0000406:	e9 fa 00 00 00       	jmp    c0000505 <int_common_stub>

c000040b <isr96>:
c000040b:	fa                   	cli    
c000040c:	6a 00                	push   0x0
c000040e:	6a 60                	push   0x60
c0000410:	e9 20 01 00 00       	jmp    c0000535 <syscall_common_stub>

c0000415 <irq0>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 20                	push   0x20
c000041a:	e9 e6 00 00 00       	jmp    c0000505 <int_common_stub>

c000041f <irq1>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 21                	push   0x21
c0000424:	e9 dc 00 00 00       	jmp    c0000505 <int_common_stub>

c0000429 <irq2>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 22                	push   0x22
c000042e:	e9 d2 00 00 00       	jmp    c0000505 <int_common_stub>

c0000433 <irq3>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 23                	push   0x23
c0000438:	e9 c8 00 00 00       	jmp    c0000505 <int_common_stub>

c000043d <irq4>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 24                	push   0x24
c0000442:	e9 be 00 00 00       	jmp    c0000505 <int_common_stub>

c0000447 <irq5>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 25                	push   0x25
c000044c:	e9 b4 00 00 00       	jmp    c0000505 <int_common_stub>

c0000451 <irq6>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 26                	push   0x26
c0000456:	e9 aa 00 00 00       	jmp    c0000505 <int_common_stub>

c000045b <irq7>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 27                	push   0x27
c0000460:	e9 a0 00 00 00       	jmp    c0000505 <int_common_stub>

c0000465 <irq8>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 28                	push   0x28
c000046a:	e9 96 00 00 00       	jmp    c0000505 <int_common_stub>

c000046f <irq9>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 29                	push   0x29
c0000474:	e9 8c 00 00 00       	jmp    c0000505 <int_common_stub>

c0000479 <irq10>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 2a                	push   0x2a
c000047e:	e9 82 00 00 00       	jmp    c0000505 <int_common_stub>

c0000483 <irq11>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 2b                	push   0x2b
c0000488:	e9 78 00 00 00       	jmp    c0000505 <int_common_stub>

c000048d <irq12>:
c000048d:	fa                   	cli    
c000048e:	6a 00                	push   0x0
c0000490:	6a 2c                	push   0x2c
c0000492:	e9 6e 00 00 00       	jmp    c0000505 <int_common_stub>

c0000497 <irq13>:
c0000497:	fa                   	cli    
c0000498:	6a 00                	push   0x0
c000049a:	6a 2d                	push   0x2d
c000049c:	e9 64 00 00 00       	jmp    c0000505 <int_common_stub>

c00004a1 <irq14>:
c00004a1:	fa                   	cli    
c00004a2:	6a 00                	push   0x0
c00004a4:	6a 2e                	push   0x2e
c00004a6:	e9 5a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004ab <irq15>:
c00004ab:	fa                   	cli    
c00004ac:	6a 00                	push   0x0
c00004ae:	6a 2f                	push   0x2f
c00004b0:	e9 50 00 00 00       	jmp    c0000505 <int_common_stub>

c00004b5 <irq16>:
c00004b5:	fa                   	cli    
c00004b6:	6a 00                	push   0x0
c00004b8:	6a 30                	push   0x30
c00004ba:	e9 46 00 00 00       	jmp    c0000505 <int_common_stub>

c00004bf <irq17>:
c00004bf:	fa                   	cli    
c00004c0:	6a 00                	push   0x0
c00004c2:	6a 31                	push   0x31
c00004c4:	e9 3c 00 00 00       	jmp    c0000505 <int_common_stub>

c00004c9 <irq18>:
c00004c9:	fa                   	cli    
c00004ca:	6a 00                	push   0x0
c00004cc:	6a 32                	push   0x32
c00004ce:	e9 32 00 00 00       	jmp    c0000505 <int_common_stub>

c00004d3 <irq19>:
c00004d3:	fa                   	cli    
c00004d4:	6a 00                	push   0x0
c00004d6:	6a 33                	push   0x33
c00004d8:	e9 28 00 00 00       	jmp    c0000505 <int_common_stub>

c00004dd <irq20>:
c00004dd:	fa                   	cli    
c00004de:	6a 00                	push   0x0
c00004e0:	6a 34                	push   0x34
c00004e2:	e9 1e 00 00 00       	jmp    c0000505 <int_common_stub>

c00004e7 <irq21>:
c00004e7:	fa                   	cli    
c00004e8:	6a 00                	push   0x0
c00004ea:	6a 35                	push   0x35
c00004ec:	e9 14 00 00 00       	jmp    c0000505 <int_common_stub>

c00004f1 <irq22>:
c00004f1:	fa                   	cli    
c00004f2:	6a 00                	push   0x0
c00004f4:	6a 36                	push   0x36
c00004f6:	e9 0a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004fb <irq23>:
c00004fb:	fa                   	cli    
c00004fc:	6a 00                	push   0x0
c00004fe:	6a 37                	push   0x37
c0000500:	e9 00 00 00 00       	jmp    c0000505 <int_common_stub>

c0000505 <int_common_stub>:
c0000505:	60                   	pusha  
c0000506:	1e                   	push   ds
c0000507:	06                   	push   es
c0000508:	0f a0                	push   fs
c000050a:	0f a8                	push   gs
c000050c:	66 b8 10 00          	mov    ax,0x10
c0000510:	66 8e d8             	mov    ds,ax
c0000513:	66 8e c0             	mov    es,ax
c0000516:	66 8e e0             	mov    fs,ax
c0000519:	66 8e e8             	mov    gs,ax
c000051c:	89 e1                	mov    ecx,esp
c000051e:	51                   	push   ecx
c000051f:	b9 81 0b 01 c0       	mov    ecx,0xc0010b81
c0000524:	ff d1                	call   ecx
c0000526:	59                   	pop    ecx
c0000527:	0f a9                	pop    gs
c0000529:	0f a1                	pop    fs
c000052b:	07                   	pop    es
c000052c:	1f                   	pop    ds
c000052d:	61                   	popa   
c000052e:	81 c4 08 00 00 00    	add    esp,0x8
c0000534:	cf                   	iret   

c0000535 <syscall_common_stub>:
c0000535:	60                   	pusha  
c0000536:	1e                   	push   ds
c0000537:	06                   	push   es
c0000538:	0f a0                	push   fs
c000053a:	0f a8                	push   gs
c000053c:	66 b8 10 00          	mov    ax,0x10
c0000540:	66 8e d8             	mov    ds,ax
c0000543:	66 8e c0             	mov    es,ax
c0000546:	66 8e e0             	mov    fs,ax
c0000549:	66 8e e8             	mov    gs,ax
c000054c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000552:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000555:	89 e1                	mov    ecx,esp
c0000557:	51                   	push   ecx
c0000558:	fb                   	sti    
c0000559:	b9 81 0b 01 c0       	mov    ecx,0xc0010b81
c000055e:	ff d1                	call   ecx
c0000560:	59                   	pop    ecx

c0000561 <offAForkJumpThingy>:
c0000561:	0f a9                	pop    gs
c0000563:	0f a1                	pop    fs
c0000565:	07                   	pop    es
c0000566:	1f                   	pop    ds
c0000567:	61                   	popa   
c0000568:	81 c4 08 00 00 00    	add    esp,0x8
c000056e:	cf                   	iret   

c000056f <memcmp>:
c000056f:	56                   	push   esi
c0000570:	53                   	push   ebx
c0000571:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000575:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000057d:	01 d6                	add    esi,edx
c000057f:	39 f2                	cmp    edx,esi
c0000581:	74 0e                	je     c0000591 <memcmp+0x22>
c0000583:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000586:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000589:	38 c8                	cmp    al,cl
c000058b:	75 08                	jne    c0000595 <memcmp+0x26>
c000058d:	42                   	inc    edx
c000058e:	43                   	inc    ebx
c000058f:	eb ee                	jmp    c000057f <memcmp+0x10>
c0000591:	31 c0                	xor    eax,eax
c0000593:	eb 02                	jmp    c0000597 <memcmp+0x28>
c0000595:	29 c8                	sub    eax,ecx
c0000597:	5b                   	pop    ebx
c0000598:	5e                   	pop    esi
c0000599:	c3                   	ret    

c000059a <memmove>:
c000059a:	56                   	push   esi
c000059b:	53                   	push   ebx
c000059c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00005a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00005a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00005a8:	39 c8                	cmp    eax,ecx
c00005aa:	73 12                	jae    c00005be <memmove+0x24>
c00005ac:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00005af:	89 c3                	mov    ebx,eax
c00005b1:	39 f1                	cmp    ecx,esi
c00005b3:	74 1a                	je     c00005cf <memmove+0x35>
c00005b5:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005b7:	43                   	inc    ebx
c00005b8:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00005bb:	41                   	inc    ecx
c00005bc:	eb f3                	jmp    c00005b1 <memmove+0x17>
c00005be:	76 0f                	jbe    c00005cf <memmove+0x35>
c00005c0:	85 d2                	test   edx,edx
c00005c2:	74 0b                	je     c00005cf <memmove+0x35>
c00005c4:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c00005c8:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c00005cc:	4a                   	dec    edx
c00005cd:	eb f1                	jmp    c00005c0 <memmove+0x26>
c00005cf:	5b                   	pop    ebx
c00005d0:	5e                   	pop    esi
c00005d1:	c3                   	ret    

c00005d2 <memcpy>:
c00005d2:	57                   	push   edi
c00005d3:	56                   	push   esi
c00005d4:	53                   	push   ebx
c00005d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005dd:	89 da                	mov    edx,ebx
c00005df:	89 d9                	mov    ecx,ebx
c00005e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005e5:	83 e2 fc             	and    edx,0xfffffffc
c00005e8:	c1 e9 02             	shr    ecx,0x2
c00005eb:	89 c7                	mov    edi,eax
c00005ed:	fc                   	cld    
c00005ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00005f0:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00005f3:	01 c2                	add    edx,eax
c00005f5:	01 de                	add    esi,ebx
c00005f7:	39 f1                	cmp    ecx,esi
c00005f9:	74 09                	je     c0000604 <memcpy+0x32>
c00005fb:	8a 19                	mov    bl,BYTE PTR [ecx]
c00005fd:	42                   	inc    edx
c00005fe:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000601:	41                   	inc    ecx
c0000602:	eb f3                	jmp    c00005f7 <memcpy+0x25>
c0000604:	5b                   	pop    ebx
c0000605:	5e                   	pop    esi
c0000606:	5f                   	pop    edi
c0000607:	c3                   	ret    

c0000608 <memset>:
c0000608:	53                   	push   ebx
c0000609:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000060d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000611:	89 c2                	mov    edx,eax
c0000613:	01 c1                	add    ecx,eax
c0000615:	39 ca                	cmp    edx,ecx
c0000617:	74 0a                	je     c0000623 <memset+0x1b>
c0000619:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c000061d:	42                   	inc    edx
c000061e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000621:	eb f2                	jmp    c0000615 <memset+0xd>
c0000623:	5b                   	pop    ebx
c0000624:	c3                   	ret    

c0000625 <strlen>:
c0000625:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000629:	31 c0                	xor    eax,eax
c000062b:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000062f:	74 03                	je     c0000634 <strlen+0xf>
c0000631:	40                   	inc    eax
c0000632:	eb f7                	jmp    c000062b <strlen+0x6>
c0000634:	c3                   	ret    

c0000635 <strpbrk>:
c0000635:	53                   	push   ebx
c0000636:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000063a:	8a 08                	mov    cl,BYTE PTR [eax]
c000063c:	84 c9                	test   cl,cl
c000063e:	74 14                	je     c0000654 <strpbrk+0x1f>
c0000640:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000644:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000646:	84 db                	test   bl,bl
c0000648:	74 07                	je     c0000651 <strpbrk+0x1c>
c000064a:	38 cb                	cmp    bl,cl
c000064c:	74 08                	je     c0000656 <strpbrk+0x21>
c000064e:	42                   	inc    edx
c000064f:	eb f3                	jmp    c0000644 <strpbrk+0xf>
c0000651:	40                   	inc    eax
c0000652:	eb e6                	jmp    c000063a <strpbrk+0x5>
c0000654:	31 c0                	xor    eax,eax
c0000656:	5b                   	pop    ebx
c0000657:	c3                   	ret    

c0000658 <strtok>:
c0000658:	56                   	push   esi
c0000659:	53                   	push   ebx
c000065a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000065e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000662:	85 db                	test   ebx,ebx
c0000664:	75 0e                	jne    c0000674 <strtok+0x1c>
c0000666:	8b 1d ec 30 02 c0    	mov    ebx,DWORD PTR ds:0xc00230ec
c000066c:	85 db                	test   ebx,ebx
c000066e:	75 04                	jne    c0000674 <strtok+0x1c>
c0000670:	31 db                	xor    ebx,ebx
c0000672:	eb 2e                	jmp    c00006a2 <strtok+0x4a>
c0000674:	56                   	push   esi
c0000675:	53                   	push   ebx
c0000676:	e8 ba ff ff ff       	call   c0000635 <strpbrk>
c000067b:	5a                   	pop    edx
c000067c:	a3 ec 30 02 c0       	mov    ds:0xc00230ec,eax
c0000681:	59                   	pop    ecx
c0000682:	a1 ec 30 02 c0       	mov    eax,ds:0xc00230ec
c0000687:	39 d8                	cmp    eax,ebx
c0000689:	75 07                	jne    c0000692 <strtok+0x3a>
c000068b:	43                   	inc    ebx
c000068c:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000690:	eb e2                	jmp    c0000674 <strtok+0x1c>
c0000692:	85 c0                	test   eax,eax
c0000694:	74 da                	je     c0000670 <strtok+0x18>
c0000696:	8d 50 01             	lea    edx,[eax+0x1]
c0000699:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000069c:	89 15 ec 30 02 c0    	mov    DWORD PTR ds:0xc00230ec,edx
c00006a2:	89 d8                	mov    eax,ebx
c00006a4:	5b                   	pop    ebx
c00006a5:	5e                   	pop    esi
c00006a6:	c3                   	ret    

c00006a7 <strcpy>:
c00006a7:	53                   	push   ebx
c00006a8:	31 d2                	xor    edx,edx
c00006aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00006b2:	8d 1c 10             	lea    ebx,[eax+edx*1]
c00006b5:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00006b8:	84 c9                	test   cl,cl
c00006ba:	74 06                	je     c00006c2 <strcpy+0x1b>
c00006bc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00006bf:	42                   	inc    edx
c00006c0:	eb ec                	jmp    c00006ae <strcpy+0x7>
c00006c2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00006c5:	5b                   	pop    ebx
c00006c6:	c3                   	ret    

c00006c7 <strncpy>:
c00006c7:	56                   	push   esi
c00006c8:	53                   	push   ebx
c00006c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00006d5:	89 c3                	mov    ebx,eax
c00006d7:	85 c9                	test   ecx,ecx
c00006d9:	74 1a                	je     c00006f5 <strncpy+0x2e>
c00006db:	46                   	inc    esi
c00006dc:	43                   	inc    ebx
c00006dd:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00006e0:	49                   	dec    ecx
c00006e1:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00006e4:	84 d2                	test   dl,dl
c00006e6:	75 ef                	jne    c00006d7 <strncpy+0x10>
c00006e8:	31 d2                	xor    edx,edx
c00006ea:	39 d1                	cmp    ecx,edx
c00006ec:	74 07                	je     c00006f5 <strncpy+0x2e>
c00006ee:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00006f2:	42                   	inc    edx
c00006f3:	eb f5                	jmp    c00006ea <strncpy+0x23>
c00006f5:	5b                   	pop    ebx
c00006f6:	5e                   	pop    esi
c00006f7:	c3                   	ret    

c00006f8 <strcmp>:
c00006f8:	31 c9                	xor    ecx,ecx
c00006fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00006fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000702:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000706:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000070a:	38 d0                	cmp    al,dl
c000070c:	75 08                	jne    c0000716 <strcmp+0x1e>
c000070e:	41                   	inc    ecx
c000070f:	84 c0                	test   al,al
c0000711:	75 e7                	jne    c00006fa <strcmp+0x2>
c0000713:	31 c0                	xor    eax,eax
c0000715:	c3                   	ret    
c0000716:	29 d0                	sub    eax,edx
c0000718:	c3                   	ret    

c0000719 <strchr>:
c0000719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000071d:	8a 10                	mov    dl,BYTE PTR [eax]
c000071f:	84 d2                	test   dl,dl
c0000721:	74 09                	je     c000072c <strchr+0x13>
c0000723:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c0000727:	74 05                	je     c000072e <strchr+0x15>
c0000729:	40                   	inc    eax
c000072a:	eb f1                	jmp    c000071d <strchr+0x4>
c000072c:	31 c0                	xor    eax,eax
c000072e:	c3                   	ret    

c000072f <strncmp>:
c000072f:	56                   	push   esi
c0000730:	53                   	push   ebx
c0000731:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000735:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000073d:	01 d6                	add    esi,edx
c000073f:	39 f2                	cmp    edx,esi
c0000741:	74 12                	je     c0000755 <strncmp+0x26>
c0000743:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000746:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000749:	38 c8                	cmp    al,cl
c000074b:	75 0c                	jne    c0000759 <strncmp+0x2a>
c000074d:	42                   	inc    edx
c000074e:	84 c0                	test   al,al
c0000750:	74 03                	je     c0000755 <strncmp+0x26>
c0000752:	43                   	inc    ebx
c0000753:	eb ea                	jmp    c000073f <strncmp+0x10>
c0000755:	31 c0                	xor    eax,eax
c0000757:	eb 02                	jmp    c000075b <strncmp+0x2c>
c0000759:	29 c8                	sub    eax,ecx
c000075b:	5b                   	pop    ebx
c000075c:	5e                   	pop    esi
c000075d:	c3                   	ret    

c000075e <strcat>:
c000075e:	53                   	push   ebx
c000075f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000763:	89 c1                	mov    ecx,eax
c0000765:	8d 51 01             	lea    edx,[ecx+0x1]
c0000768:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000076c:	74 04                	je     c0000772 <strcat+0x14>
c000076e:	89 d1                	mov    ecx,edx
c0000770:	eb f3                	jmp    c0000765 <strcat+0x7>
c0000772:	31 d2                	xor    edx,edx
c0000774:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000778:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000077b:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000077e:	42                   	inc    edx
c000077f:	84 db                	test   bl,bl
c0000781:	75 f1                	jne    c0000774 <strcat+0x16>
c0000783:	5b                   	pop    ebx
c0000784:	c3                   	ret    

c0000785 <strncat>:
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000793:	89 c2                	mov    edx,eax
c0000795:	85 db                	test   ebx,ebx
c0000797:	74 23                	je     c00007bc <strncat+0x37>
c0000799:	8d 72 01             	lea    esi,[edx+0x1]
c000079c:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c00007a0:	74 04                	je     c00007a6 <strncat+0x21>
c00007a2:	89 f2                	mov    edx,esi
c00007a4:	eb f3                	jmp    c0000799 <strncat+0x14>
c00007a6:	8d 34 19             	lea    esi,[ecx+ebx*1]
c00007a9:	41                   	inc    ecx
c00007aa:	42                   	inc    edx
c00007ab:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00007ae:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007b1:	84 db                	test   bl,bl
c00007b3:	74 07                	je     c00007bc <strncat+0x37>
c00007b5:	39 f1                	cmp    ecx,esi
c00007b7:	75 f0                	jne    c00007a9 <strncat+0x24>
c00007b9:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00007bc:	5b                   	pop    ebx
c00007bd:	5e                   	pop    esi
c00007be:	c3                   	ret    

c00007bf <strstr>:
c00007bf:	57                   	push   edi
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ca:	57                   	push   edi
c00007cb:	e8 55 fe ff ff       	call   c0000625 <strlen>
c00007d0:	59                   	pop    ecx
c00007d1:	89 c6                	mov    esi,eax
c00007d3:	85 c0                	test   eax,eax
c00007d5:	74 1f                	je     c00007f6 <strstr+0x37>
c00007d7:	53                   	push   ebx
c00007d8:	e8 48 fe ff ff       	call   c0000625 <strlen>
c00007dd:	5a                   	pop    edx
c00007de:	39 f0                	cmp    eax,esi
c00007e0:	72 12                	jb     c00007f4 <strstr+0x35>
c00007e2:	56                   	push   esi
c00007e3:	57                   	push   edi
c00007e4:	53                   	push   ebx
c00007e5:	e8 85 fd ff ff       	call   c000056f <memcmp>
c00007ea:	83 c4 0c             	add    esp,0xc
c00007ed:	85 c0                	test   eax,eax
c00007ef:	74 05                	je     c00007f6 <strstr+0x37>
c00007f1:	43                   	inc    ebx
c00007f2:	eb e3                	jmp    c00007d7 <strstr+0x18>
c00007f4:	31 db                	xor    ebx,ebx
c00007f6:	89 d8                	mov    eax,ebx
c00007f8:	5b                   	pop    ebx
c00007f9:	5e                   	pop    esi
c00007fa:	5f                   	pop    edi
c00007fb:	c3                   	ret    

c00007fc <toupper>:
c00007fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000800:	0f b6 d0             	movzx  edx,al
c0000803:	f6 82 e0 f3 01 c0 02 	test   BYTE PTR [edx-0x3ffe0c20],0x2
c000080a:	74 03                	je     c000080f <toupper+0x13>
c000080c:	83 e8 20             	sub    eax,0x20
c000080f:	c3                   	ret    

c0000810 <tolower>:
c0000810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000814:	0f b6 d0             	movzx  edx,al
c0000817:	f6 82 e0 f3 01 c0 01 	test   BYTE PTR [edx-0x3ffe0c20],0x1
c000081e:	74 03                	je     c0000823 <tolower+0x13>
c0000820:	83 c0 20             	add    eax,0x20
c0000823:	c3                   	ret    

c0000824 <simple_strtoul>:
c0000824:	55                   	push   ebp
c0000825:	57                   	push   edi
c0000826:	56                   	push   esi
c0000827:	53                   	push   ebx
c0000828:	83 ec 08             	sub    esp,0x8
c000082b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000082f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000833:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000836:	f6 82 e0 f3 01 c0 08 	test   BYTE PTR [edx-0x3ffe0c20],0x8
c000083d:	74 03                	je     c0000842 <simple_strtoul+0x1e>
c000083f:	41                   	inc    ecx
c0000840:	eb f1                	jmp    c0000833 <simple_strtoul+0xf>
c0000842:	80 fa 09             	cmp    dl,0x9
c0000845:	74 f8                	je     c000083f <simple_strtoul+0x1b>
c0000847:	80 fa 2d             	cmp    dl,0x2d
c000084a:	75 0b                	jne    c0000857 <simple_strtoul+0x33>
c000084c:	41                   	inc    ecx
c000084d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000855:	eb 0e                	jmp    c0000865 <simple_strtoul+0x41>
c0000857:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000085f:	80 fa 2b             	cmp    dl,0x2b
c0000862:	75 01                	jne    c0000865 <simple_strtoul+0x41>
c0000864:	41                   	inc    ecx
c0000865:	85 f6                	test   esi,esi
c0000867:	75 22                	jne    c000088b <simple_strtoul+0x67>
c0000869:	be 0a 00 00 00       	mov    esi,0xa
c000086e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000871:	75 5a                	jne    c00008cd <simple_strtoul+0xa9>
c0000873:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000877:	50                   	push   eax
c0000878:	e8 93 ff ff ff       	call   c0000810 <tolower>
c000087d:	5a                   	pop    edx
c000087e:	83 f8 78             	cmp    eax,0x78
c0000881:	74 03                	je     c0000886 <simple_strtoul+0x62>
c0000883:	41                   	inc    ecx
c0000884:	eb 16                	jmp    c000089c <simple_strtoul+0x78>
c0000886:	83 c1 02             	add    ecx,0x2
c0000889:	eb 22                	jmp    c00008ad <simple_strtoul+0x89>
c000088b:	8d 46 fe             	lea    eax,[esi-0x2]
c000088e:	83 f8 22             	cmp    eax,0x22
c0000891:	0f 87 b7 00 00 00    	ja     c000094e <simple_strtoul+0x12a>
c0000897:	83 fe 08             	cmp    esi,0x8
c000089a:	75 0c                	jne    c00008a8 <simple_strtoul+0x84>
c000089c:	be 08 00 00 00       	mov    esi,0x8
c00008a1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008a4:	75 27                	jne    c00008cd <simple_strtoul+0xa9>
c00008a6:	eb 1f                	jmp    c00008c7 <simple_strtoul+0xa3>
c00008a8:	83 fe 10             	cmp    esi,0x10
c00008ab:	75 20                	jne    c00008cd <simple_strtoul+0xa9>
c00008ad:	be 10 00 00 00       	mov    esi,0x10
c00008b2:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008b5:	75 16                	jne    c00008cd <simple_strtoul+0xa9>
c00008b7:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008bb:	50                   	push   eax
c00008bc:	e8 4f ff ff ff       	call   c0000810 <tolower>
c00008c1:	5d                   	pop    ebp
c00008c2:	83 f8 78             	cmp    eax,0x78
c00008c5:	74 03                	je     c00008ca <simple_strtoul+0xa6>
c00008c7:	41                   	inc    ecx
c00008c8:	eb 03                	jmp    c00008cd <simple_strtoul+0xa9>
c00008ca:	83 c1 02             	add    ecx,0x2
c00008cd:	31 ed                	xor    ebp,ebp
c00008cf:	31 db                	xor    ebx,ebx
c00008d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00008d8:	8a 11                	mov    dl,BYTE PTR [ecx]
c00008da:	84 d2                	test   dl,dl
c00008dc:	74 27                	je     c0000905 <simple_strtoul+0xe1>
c00008de:	0f b6 fa             	movzx  edi,dl
c00008e1:	f6 87 e0 f3 01 c0 04 	test   BYTE PTR [edi-0x3ffe0c20],0x4
c00008e8:	74 05                	je     c00008ef <simple_strtoul+0xcb>
c00008ea:	83 ef 30             	sub    edi,0x30
c00008ed:	eb 22                	jmp    c0000911 <simple_strtoul+0xed>
c00008ef:	0f be d2             	movsx  edx,dl
c00008f2:	52                   	push   edx
c00008f3:	e8 04 ff ff ff       	call   c00007fc <toupper>
c00008f8:	5f                   	pop    edi
c00008f9:	0f b6 d0             	movzx  edx,al
c00008fc:	f6 82 e0 f3 01 c0 01 	test   BYTE PTR [edx-0x3ffe0c20],0x1
c0000903:	75 09                	jne    c000090e <simple_strtoul+0xea>
c0000905:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000090a:	75 2d                	jne    c0000939 <simple_strtoul+0x115>
c000090c:	eb 57                	jmp    c0000965 <simple_strtoul+0x141>
c000090e:	8d 78 c9             	lea    edi,[eax-0x37]
c0000911:	39 f7                	cmp    edi,esi
c0000913:	73 f0                	jae    c0000905 <simple_strtoul+0xe1>
c0000915:	31 d2                	xor    edx,edx
c0000917:	89 f8                	mov    eax,edi
c0000919:	f7 d0                	not    eax
c000091b:	f7 f6                	div    esi
c000091d:	39 d8                	cmp    eax,ebx
c000091f:	72 0e                	jb     c000092f <simple_strtoul+0x10b>
c0000921:	0f af de             	imul   ebx,esi
c0000924:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000092b:	01 fb                	add    ebx,edi
c000092d:	eb 07                	jmp    c0000936 <simple_strtoul+0x112>
c000092f:	bd 01 00 00 00       	mov    ebp,0x1
c0000934:	31 db                	xor    ebx,ebx
c0000936:	41                   	inc    ecx
c0000937:	eb 9f                	jmp    c00008d8 <simple_strtoul+0xb4>
c0000939:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000093c:	09 d8                	or     eax,ebx
c000093e:	75 1f                	jne    c000095f <simple_strtoul+0x13b>
c0000940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000944:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000948:	31 db                	xor    ebx,ebx
c000094a:	89 38                	mov    DWORD PTR [eax],edi
c000094c:	eb 17                	jmp    c0000965 <simple_strtoul+0x141>
c000094e:	31 db                	xor    ebx,ebx
c0000950:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000955:	74 14                	je     c000096b <simple_strtoul+0x147>
c0000957:	31 ed                	xor    ebp,ebp
c0000959:	85 c9                	test   ecx,ecx
c000095b:	75 e3                	jne    c0000940 <simple_strtoul+0x11c>
c000095d:	31 db                	xor    ebx,ebx
c000095f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000963:	89 08                	mov    DWORD PTR [eax],ecx
c0000965:	4d                   	dec    ebp
c0000966:	75 03                	jne    c000096b <simple_strtoul+0x147>
c0000968:	83 cb ff             	or     ebx,0xffffffff
c000096b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000970:	75 02                	jne    c0000974 <simple_strtoul+0x150>
c0000972:	f7 db                	neg    ebx
c0000974:	83 c4 08             	add    esp,0x8
c0000977:	89 d8                	mov    eax,ebx
c0000979:	5b                   	pop    ebx
c000097a:	5e                   	pop    esi
c000097b:	5f                   	pop    edi
c000097c:	5d                   	pop    ebp
c000097d:	c3                   	ret    

c000097e <largebin_index>:
c000097e:	89 c2                	mov    edx,eax
c0000980:	c1 ea 08             	shr    edx,0x8
c0000983:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000989:	77 10                	ja     c000099b <largebin_index+0x1d>
c000098b:	0f bd d2             	bsr    edx,edx
c000098e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000991:	d3 e8                	shr    eax,cl
c0000993:	83 e0 03             	and    eax,0x3
c0000996:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099a:	c3                   	ret    
c000099b:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a0:	c3                   	ret    

c00009a1 <malloc_init_state>:
c00009a1:	53                   	push   ebx
c00009a2:	8d 50 34             	lea    edx,[eax+0x34]
c00009a5:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009ab:	89 d1                	mov    ecx,edx
c00009ad:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b0:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b3:	83 c2 08             	add    edx,0x8
c00009b6:	39 da                	cmp    edx,ebx
c00009b8:	75 f3                	jne    c00009ad <malloc_init_state+0xc>
c00009ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00009bc:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c6:	83 e2 03             	and    edx,0x3
c00009c9:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d3:	83 ca 48             	or     edx,0x48
c00009d6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ea:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f1:	89 10                	mov    DWORD PTR [eax],edx
c00009f3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a00:	5b                   	pop    ebx
c0000a01:	c3                   	ret    

c0000a02 <malloc_consolidate>:
c0000a02:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a04:	85 d2                	test   edx,edx
c0000a06:	0f 84 d8 00 00 00    	je     c0000ae4 <malloc_consolidate+0xe2>
c0000a0c:	55                   	push   ebp
c0000a0d:	83 e2 fd             	and    edx,0xfffffffd
c0000a10:	57                   	push   edi
c0000a11:	89 c5                	mov    ebp,eax
c0000a13:	56                   	push   esi
c0000a14:	8d 78 34             	lea    edi,[eax+0x34]
c0000a17:	53                   	push   ebx
c0000a18:	83 ec 10             	sub    esp,0x10
c0000a1b:	89 10                	mov    DWORD PTR [eax],edx
c0000a1d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a21:	c1 ea 03             	shr    edx,0x3
c0000a24:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a28:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a2f:	85 d2                	test   edx,edx
c0000a31:	0f 84 98 00 00 00    	je     c0000acf <malloc_consolidate+0xcd>
c0000a37:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a3e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a41:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a44:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a48:	89 f9                	mov    ecx,edi
c0000a4a:	83 e1 fe             	and    ecx,0xfffffffe
c0000a4d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a50:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a53:	83 e3 fc             	and    ebx,0xfffffffc
c0000a56:	83 e7 01             	and    edi,0x1
c0000a59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5c:	75 14                	jne    c0000a72 <malloc_consolidate+0x70>
c0000a5e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a60:	29 fa                	sub    edx,edi
c0000a62:	01 f9                	add    ecx,edi
c0000a64:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a67:	89 fb                	mov    ebx,edi
c0000a69:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a6f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a72:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a75:	74 40                	je     c0000ab7 <malloc_consolidate+0xb5>
c0000a77:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a7d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a81:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a84:	83 e7 01             	and    edi,0x1
c0000a87:	75 0e                	jne    c0000a97 <malloc_consolidate+0x95>
c0000a89:	01 d9                	add    ecx,ebx
c0000a8b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a8e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a91:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a94:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a97:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9a:	89 ce                	mov    esi,ecx
c0000a9c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000a9f:	83 ce 01             	or     esi,0x1
c0000aa2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aa8:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000aab:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000aaf:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab2:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab5:	eb 0c                	jmp    c0000ac3 <malloc_consolidate+0xc1>
c0000ab7:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000aba:	83 c9 01             	or     ecx,0x1
c0000abd:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ac7:	85 d2                	test   edx,edx
c0000ac9:	0f 85 6f ff ff ff    	jne    c0000a3e <malloc_consolidate+0x3c>
c0000acf:	83 c5 04             	add    ebp,0x4
c0000ad2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad6:	0f 85 50 ff ff ff    	jne    c0000a2c <malloc_consolidate+0x2a>
c0000adc:	83 c4 10             	add    esp,0x10
c0000adf:	5b                   	pop    ebx
c0000ae0:	5e                   	pop    esi
c0000ae1:	5f                   	pop    edi
c0000ae2:	5d                   	pop    ebp
c0000ae3:	c3                   	ret    
c0000ae4:	e9 b8 fe ff ff       	jmp    c00009a1 <malloc_init_state>

c0000ae9 <dlfree>:
c0000ae9:	57                   	push   edi
c0000aea:	56                   	push   esi
c0000aeb:	53                   	push   ebx
c0000aec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af0:	85 db                	test   ebx,ebx
c0000af2:	0f 84 e2 00 00 00    	je     c0000bda <dlfree+0xf1>
c0000af8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afb:	8b 0d 00 31 02 c0    	mov    ecx,DWORD PTR ds:0xc0023100
c0000b01:	89 f0                	mov    eax,esi
c0000b03:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b06:	83 e0 fc             	and    eax,0xfffffffc
c0000b09:	39 c1                	cmp    ecx,eax
c0000b0b:	72 24                	jb     c0000b31 <dlfree+0x48>
c0000b0d:	83 c9 03             	or     ecx,0x3
c0000b10:	c1 e8 03             	shr    eax,0x3
c0000b13:	89 0d 00 31 02 c0    	mov    DWORD PTR ds:0xc0023100,ecx
c0000b19:	83 e8 02             	sub    eax,0x2
c0000b1c:	8b 0c 85 04 31 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcefc]
c0000b23:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b25:	89 14 85 04 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcefc],edx
c0000b2c:	e9 a9 00 00 00       	jmp    c0000bda <dlfree+0xf1>
c0000b31:	83 e6 02             	and    esi,0x2
c0000b34:	0f 85 a0 00 00 00    	jne    c0000bda <dlfree+0xf1>
c0000b3a:	83 c9 01             	or     ecx,0x1
c0000b3d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b40:	89 0d 00 31 02 c0    	mov    DWORD PTR ds:0xc0023100,ecx
c0000b46:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b49:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b50:	75 13                	jne    c0000b65 <dlfree+0x7c>
c0000b52:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b55:	29 da                	sub    edx,ebx
c0000b57:	01 d8                	add    eax,ebx
c0000b59:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b5f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b62:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b65:	39 35 2c 31 02 c0    	cmp    DWORD PTR ds:0xc002312c,esi
c0000b6b:	74 40                	je     c0000bad <dlfree+0xc4>
c0000b6d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b71:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b74:	80 e3 01             	and    bl,0x1
c0000b77:	75 0e                	jne    c0000b87 <dlfree+0x9e>
c0000b79:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b7f:	01 c8                	add    eax,ecx
c0000b81:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b84:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b87:	8b 0d 3c 31 02 c0    	mov    ecx,DWORD PTR ds:0xc002313c
c0000b8d:	c7 42 0c 34 31 02 c0 	mov    DWORD PTR [edx+0xc],0xc0023134
c0000b94:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b97:	89 15 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,edx
c0000b9d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba0:	89 c1                	mov    ecx,eax
c0000ba2:	83 c9 01             	or     ecx,0x1
c0000ba5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ba8:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bab:	eb 10                	jmp    c0000bbd <dlfree+0xd4>
c0000bad:	01 c8                	add    eax,ecx
c0000baf:	89 c1                	mov    ecx,eax
c0000bb1:	83 c9 01             	or     ecx,0x1
c0000bb4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bb7:	89 15 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,edx
c0000bbd:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc2:	76 16                	jbe    c0000bda <dlfree+0xf1>
c0000bc4:	f6 05 00 31 02 c0 02 	test   BYTE PTR ds:0xc0023100,0x2
c0000bcb:	74 0d                	je     c0000bda <dlfree+0xf1>
c0000bcd:	5b                   	pop    ebx
c0000bce:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0000bd3:	5e                   	pop    esi
c0000bd4:	5f                   	pop    edi
c0000bd5:	e9 28 fe ff ff       	jmp    c0000a02 <malloc_consolidate>
c0000bda:	5b                   	pop    ebx
c0000bdb:	5e                   	pop    esi
c0000bdc:	5f                   	pop    edi
c0000bdd:	c3                   	ret    

c0000bde <sYSMALLOc>:
c0000bde:	55                   	push   ebp
c0000bdf:	57                   	push   edi
c0000be0:	56                   	push   esi
c0000be1:	53                   	push   ebx
c0000be2:	89 d3                	mov    ebx,edx
c0000be4:	83 ec 2c             	sub    esp,0x2c
c0000be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000beb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000bf1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000bf4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000bf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bfb:	74 1f                	je     c0000c1c <sYSMALLOc+0x3e>
c0000bfd:	89 d8                	mov    eax,ebx
c0000bff:	e8 fe fd ff ff       	call   c0000a02 <malloc_consolidate>
c0000c04:	83 ec 0c             	sub    esp,0xc
c0000c07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c0b:	83 e8 07             	sub    eax,0x7
c0000c0e:	50                   	push   eax
c0000c0f:	e8 30 02 00 00       	call   c0000e44 <dlmalloc>
c0000c14:	83 c4 10             	add    esp,0x10
c0000c17:	e9 20 02 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c1c:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c1f:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c25:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c28:	83 e0 fc             	and    eax,0xfffffffc
c0000c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000c2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c33:	83 c0 10             	add    eax,0x10
c0000c36:	01 c1                	add    ecx,eax
c0000c38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000c3c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c43:	74 04                	je     c0000c49 <sYSMALLOc+0x6b>
c0000c45:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000c49:	f7 da                	neg    edx
c0000c4b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000c4f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000c53:	21 d1                	and    ecx,edx
c0000c55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000c59:	7f 07                	jg     c0000c62 <sYSMALLOc+0x84>
c0000c5b:	31 c0                	xor    eax,eax
c0000c5d:	e9 da 01 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c62:	83 ec 0c             	sub    esp,0xc
c0000c65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c69:	e8 fd ad 00 00       	call   c000ba6b <sbrk>
c0000c6e:	83 c4 10             	add    esp,0x10
c0000c71:	89 c6                	mov    esi,eax
c0000c73:	83 f8 ff             	cmp    eax,0xffffffff
c0000c76:	74 e3                	je     c0000c5b <sYSMALLOc+0x7d>
c0000c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c7c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000c80:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000c83:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000c89:	39 f1                	cmp    ecx,esi
c0000c8b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000c91:	75 13                	jne    c0000ca6 <sYSMALLOc+0xc8>
c0000c93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c97:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000c9b:	83 c8 01             	or     eax,0x1
c0000c9e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ca1:	e9 3e 01 00 00       	jmp    c0000de4 <sYSMALLOc+0x206>
c0000ca6:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000cac:	88 d0                	mov    al,dl
c0000cae:	83 e0 01             	and    eax,0x1
c0000cb1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000cb6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000cba:	0f 95 c0             	setne  al
c0000cbd:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000cc1:	39 f1                	cmp    ecx,esi
c0000cc3:	76 12                	jbe    c0000cd7 <sYSMALLOc+0xf9>
c0000cc5:	84 c0                	test   al,al
c0000cc7:	74 0e                	je     c0000cd7 <sYSMALLOc+0xf9>
c0000cc9:	83 e2 fe             	and    edx,0xfffffffe
c0000ccc:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000cd2:	e9 83 00 00 00       	jmp    c0000d5a <sYSMALLOc+0x17c>
c0000cd7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000cdc:	74 7c                	je     c0000d5a <sYSMALLOc+0x17c>
c0000cde:	84 c0                	test   al,al
c0000ce0:	74 0c                	je     c0000cee <sYSMALLOc+0x110>
c0000ce2:	89 f0                	mov    eax,esi
c0000ce4:	29 c8                	sub    eax,ecx
c0000ce6:	01 e8                	add    eax,ebp
c0000ce8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000cee:	89 f2                	mov    edx,esi
c0000cf0:	83 e2 07             	and    edx,0x7
c0000cf3:	74 0c                	je     c0000d01 <sYSMALLOc+0x123>
c0000cf5:	b8 08 00 00 00       	mov    eax,0x8
c0000cfa:	29 d0                	sub    eax,edx
c0000cfc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000cff:	eb 04                	jmp    c0000d05 <sYSMALLOc+0x127>
c0000d01:	89 f5                	mov    ebp,esi
c0000d03:	31 c0                	xor    eax,eax
c0000d05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d11:	01 c1                	add    ecx,eax
c0000d13:	83 ec 0c             	sub    esp,0xc
c0000d16:	01 f1                	add    ecx,esi
c0000d18:	01 ca                	add    edx,ecx
c0000d1a:	29 c8                	sub    eax,ecx
c0000d1c:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d20:	01 c2                	add    edx,eax
c0000d22:	52                   	push   edx
c0000d23:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d27:	e8 3f ad 00 00       	call   c000ba6b <sbrk>
c0000d2c:	83 c4 10             	add    esp,0x10
c0000d2f:	83 f8 ff             	cmp    eax,0xffffffff
c0000d32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d36:	75 0f                	jne    c0000d47 <sYSMALLOc+0x169>
c0000d38:	83 ec 0c             	sub    esp,0xc
c0000d3b:	6a 00                	push   0x0
c0000d3d:	e8 29 ad 00 00       	call   c000ba6b <sbrk>
c0000d42:	83 c4 10             	add    esp,0x10
c0000d45:	eb 30                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d47:	39 c6                	cmp    esi,eax
c0000d49:	76 33                	jbe    c0000d7e <sYSMALLOc+0x1a0>
c0000d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d4f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000d56:	01 f0                	add    eax,esi
c0000d58:	eb 1d                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d5a:	83 ec 0c             	sub    esp,0xc
c0000d5d:	89 f5                	mov    ebp,esi
c0000d5f:	6a 00                	push   0x0
c0000d61:	e8 05 ad 00 00       	call   c000ba6b <sbrk>
c0000d66:	89 c2                	mov    edx,eax
c0000d68:	29 f2                	sub    edx,esi
c0000d6a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000d6e:	83 c4 10             	add    esp,0x10
c0000d71:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d77:	31 d2                	xor    edx,edx
c0000d79:	83 f8 ff             	cmp    eax,0xffffffff
c0000d7c:	74 66                	je     c0000de4 <sYSMALLOc+0x206>
c0000d7e:	29 e8                	sub    eax,ebp
c0000d80:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000d83:	01 d0                	add    eax,edx
c0000d85:	83 c8 01             	or     eax,0x1
c0000d88:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000d8b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d91:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d96:	74 4c                	je     c0000de4 <sYSMALLOc+0x206>
c0000d98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d9c:	83 e8 0c             	sub    eax,0xc
c0000d9f:	83 e0 f8             	and    eax,0xfffffff8
c0000da2:	89 c2                	mov    edx,eax
c0000da4:	83 ca 01             	or     edx,0x1
c0000da7:	83 f8 0f             	cmp    eax,0xf
c0000daa:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000dad:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000db5:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000dbd:	76 25                	jbe    c0000de4 <sYSMALLOc+0x206>
c0000dbf:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dc5:	83 ec 0c             	sub    esp,0xc
c0000dc8:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000dd2:	83 c7 08             	add    edi,0x8
c0000dd5:	57                   	push   edi
c0000dd6:	e8 0e fd ff ff       	call   c0000ae9 <dlfree>
c0000ddb:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000de1:	83 c4 10             	add    esp,0x10
c0000de4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000dea:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df0:	73 06                	jae    c0000df8 <sYSMALLOc+0x21a>
c0000df2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000df8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000dfe:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e04:	73 06                	jae    c0000e0c <sYSMALLOc+0x22e>
c0000e06:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e0c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e0f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e12:	83 e2 fc             	and    edx,0xfffffffc
c0000e15:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e19:	0f 82 3c fe ff ff    	jb     c0000c5b <sYSMALLOc+0x7d>
c0000e1f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e23:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e26:	29 fa                	sub    edx,edi
c0000e28:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2b:	83 ca 01             	or     edx,0x1
c0000e2e:	89 fb                	mov    ebx,edi
c0000e30:	83 c0 08             	add    eax,0x8
c0000e33:	83 cb 01             	or     ebx,0x1
c0000e36:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e39:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e3c:	83 c4 2c             	add    esp,0x2c
c0000e3f:	5b                   	pop    ebx
c0000e40:	5e                   	pop    esi
c0000e41:	5f                   	pop    edi
c0000e42:	5d                   	pop    ebp
c0000e43:	c3                   	ret    

c0000e44 <dlmalloc>:
c0000e44:	55                   	push   ebp
c0000e45:	57                   	push   edi
c0000e46:	56                   	push   esi
c0000e47:	53                   	push   ebx
c0000e48:	83 ec 1c             	sub    esp,0x1c
c0000e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e4f:	83 f8 df             	cmp    eax,0xffffffdf
c0000e52:	0f 87 70 03 00 00    	ja     c00011c8 <dlmalloc+0x384>
c0000e58:	83 c0 0b             	add    eax,0xb
c0000e5b:	be 10 00 00 00       	mov    esi,0x10
c0000e60:	83 f8 0f             	cmp    eax,0xf
c0000e63:	76 05                	jbe    c0000e6a <dlmalloc+0x26>
c0000e65:	83 e0 f8             	and    eax,0xfffffff8
c0000e68:	89 c6                	mov    esi,eax
c0000e6a:	8b 3d 00 31 02 c0    	mov    edi,DWORD PTR ds:0xc0023100
c0000e70:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e76:	75 17                	jne    c0000e8f <dlmalloc+0x4b>
c0000e78:	85 ff                	test   edi,edi
c0000e7a:	0f 85 05 03 00 00    	jne    c0001185 <dlmalloc+0x341>
c0000e80:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0000e85:	e8 78 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000e8a:	e9 f6 02 00 00       	jmp    c0001185 <dlmalloc+0x341>
c0000e8f:	39 f7                	cmp    edi,esi
c0000e91:	72 1f                	jb     c0000eb2 <dlmalloc+0x6e>
c0000e93:	89 f2                	mov    edx,esi
c0000e95:	c1 ea 03             	shr    edx,0x3
c0000e98:	83 ea 02             	sub    edx,0x2
c0000e9b:	8b 04 95 04 31 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcefc]
c0000ea2:	85 c0                	test   eax,eax
c0000ea4:	74 0c                	je     c0000eb2 <dlmalloc+0x6e>
c0000ea6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000ea9:	89 0c 95 04 31 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcefc],ecx
c0000eb0:	eb 30                	jmp    c0000ee2 <dlmalloc+0x9e>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000eba:	77 2e                	ja     c0000eea <dlmalloc+0xa6>
c0000ebc:	c1 e8 03             	shr    eax,0x3
c0000ebf:	8d 14 c5 34 31 02 c0 	lea    edx,[eax*8-0x3ffdcecc]
c0000ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eca:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ecd:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed0:	39 c3                	cmp    ebx,eax
c0000ed2:	74 2e                	je     c0000f02 <dlmalloc+0xbe>
c0000ed4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000ed7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000edc:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000edf:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee2:	83 c0 08             	add    eax,0x8
c0000ee5:	e9 e0 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000eea:	e8 8f fa ff ff       	call   c000097e <largebin_index>
c0000eef:	83 e7 02             	and    edi,0x2
c0000ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef6:	74 0a                	je     c0000f02 <dlmalloc+0xbe>
c0000ef8:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0000efd:	e8 00 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000f02:	8d 46 10             	lea    eax,[esi+0x10]
c0000f05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f09:	8b 1d 40 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023140
c0000f0f:	81 fb 34 31 02 c0    	cmp    ebx,0xc0023134
c0000f15:	0f 84 13 01 00 00    	je     c000102e <dlmalloc+0x1ea>
c0000f1b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f1e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f21:	83 e7 fc             	and    edi,0xfffffffc
c0000f24:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2a:	77 4c                	ja     c0000f78 <dlmalloc+0x134>
c0000f2c:	3d 34 31 02 c0       	cmp    eax,0xc0023134
c0000f31:	75 45                	jne    c0000f78 <dlmalloc+0x134>
c0000f33:	39 1d 30 31 02 c0    	cmp    DWORD PTR ds:0xc0023130,ebx
c0000f39:	75 3d                	jne    c0000f78 <dlmalloc+0x134>
c0000f3b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f3f:	73 37                	jae    c0000f78 <dlmalloc+0x134>
c0000f41:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f44:	89 fa                	mov    edx,edi
c0000f46:	a3 3c 31 02 c0       	mov    ds:0xc002313c,eax
c0000f4b:	a3 40 31 02 c0       	mov    ds:0xc0023140,eax
c0000f50:	a3 30 31 02 c0       	mov    ds:0xc0023130,eax
c0000f55:	29 f2                	sub    edx,esi
c0000f57:	c7 40 08 34 31 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023134
c0000f5e:	c7 40 0c 34 31 02 c0 	mov    DWORD PTR [eax+0xc],0xc0023134
c0000f65:	83 ce 01             	or     esi,0x1
c0000f68:	89 d1                	mov    ecx,edx
c0000f6a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f6d:	83 c9 01             	or     ecx,0x1
c0000f70:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f73:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f76:	eb 15                	jmp    c0000f8d <dlmalloc+0x149>
c0000f78:	a3 40 31 02 c0       	mov    ds:0xc0023140,eax
c0000f7d:	39 fe                	cmp    esi,edi
c0000f7f:	c7 40 08 34 31 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023134
c0000f86:	75 0d                	jne    c0000f95 <dlmalloc+0x151>
c0000f88:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f8d:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f90:	e9 35 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000f95:	89 f8                	mov    eax,edi
c0000f97:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000f9d:	77 19                	ja     c0000fb8 <dlmalloc+0x174>
c0000f9f:	c1 e8 03             	shr    eax,0x3
c0000fa2:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fa5:	83 c2 0d             	add    edx,0xd
c0000fa8:	8d 2c 95 f8 30 02 c0 	lea    ebp,[edx*4-0x3ffdcf08]
c0000faf:	8b 14 95 00 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf00]
c0000fb6:	eb 46                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000fb8:	e8 c1 f9 ff ff       	call   c000097e <largebin_index>
c0000fbd:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc0:	83 c2 0d             	add    edx,0xd
c0000fc3:	8d 0c 95 00 31 02 c0 	lea    ecx,[edx*4-0x3ffdcf00]
c0000fca:	8b 14 95 00 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf00]
c0000fd1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fd8:	89 d5                	mov    ebp,edx
c0000fda:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fde:	74 1e                	je     c0000ffe <dlmalloc+0x1ba>
c0000fe0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000fe6:	77 12                	ja     c0000ffa <dlmalloc+0x1b6>
c0000fe8:	83 cf 01             	or     edi,0x1
c0000feb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000fee:	76 05                	jbe    c0000ff5 <dlmalloc+0x1b1>
c0000ff0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff3:	eb f6                	jmp    c0000feb <dlmalloc+0x1a7>
c0000ff5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ff8:	eb 04                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000ffa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000ffe:	89 c7                	mov    edi,eax
c0001000:	88 c1                	mov    cl,al
c0001002:	c1 ff 05             	sar    edi,0x5
c0001005:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001009:	bf 01 00 00 00       	mov    edi,0x1
c000100e:	d3 e7                	shl    edi,cl
c0001010:	89 f8                	mov    eax,edi
c0001012:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001016:	09 04 bd 34 34 02 c0 	or     DWORD PTR [edi*4-0x3ffdcbcc],eax
c000101d:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001020:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001023:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001026:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001029:	e9 db fe ff ff       	jmp    c0000f09 <dlmalloc+0xc5>
c000102e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001034:	76 78                	jbe    c00010ae <dlmalloc+0x26a>
c0001036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103a:	8d 04 c5 34 31 02 c0 	lea    eax,[eax*8-0x3ffdcecc]
c0001041:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001047:	39 ca                	cmp    edx,ecx
c0001049:	74 63                	je     c00010ae <dlmalloc+0x26a>
c000104b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000104e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001051:	83 e3 fc             	and    ebx,0xfffffffc
c0001054:	39 de                	cmp    esi,ebx
c0001056:	77 52                	ja     c00010aa <dlmalloc+0x266>
c0001058:	89 df                	mov    edi,ebx
c000105a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000105d:	29 f7                	sub    edi,esi
c000105f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001062:	01 d3                	add    ebx,edx
c0001064:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001067:	83 ff 0f             	cmp    edi,0xf
c000106a:	8d 42 08             	lea    eax,[edx+0x8]
c000106d:	77 09                	ja     c0001078 <dlmalloc+0x234>
c000106f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001073:	e9 52 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001078:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000107b:	83 ce 01             	or     esi,0x1
c000107e:	89 0d 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,ecx
c0001084:	89 0d 40 31 02 c0    	mov    DWORD PTR ds:0xc0023140,ecx
c000108a:	c7 41 08 34 31 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0023134
c0001091:	c7 41 0c 34 31 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0023134
c0001098:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000109b:	89 fa                	mov    edx,edi
c000109d:	83 ca 01             	or     edx,0x1
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	89 3b                	mov    DWORD PTR [ebx],edi
c00010a5:	e9 20 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c00010aa:	89 c2                	mov    edx,eax
c00010ac:	eb 99                	jmp    c0001047 <dlmalloc+0x203>
c00010ae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b2:	b8 01 00 00 00       	mov    eax,0x1
c00010b7:	41                   	inc    ecx
c00010b8:	89 cb                	mov    ebx,ecx
c00010ba:	8d 14 cd 2c 31 02 c0 	lea    edx,[ecx*8-0x3ffdced4]
c00010c1:	c1 eb 05             	shr    ebx,0x5
c00010c4:	d3 e0                	shl    eax,cl
c00010c6:	8b 3c 9d 34 34 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcbcc]
c00010cd:	39 f8                	cmp    eax,edi
c00010cf:	77 04                	ja     c00010d5 <dlmalloc+0x291>
c00010d1:	85 c0                	test   eax,eax
c00010d3:	75 26                	jne    c00010fb <dlmalloc+0x2b7>
c00010d5:	43                   	inc    ebx
c00010d6:	83 fb 02             	cmp    ebx,0x2
c00010d9:	0f 87 a6 00 00 00    	ja     c0001185 <dlmalloc+0x341>
c00010df:	8b 3c 9d 34 34 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcbcc]
c00010e6:	85 ff                	test   edi,edi
c00010e8:	74 eb                	je     c00010d5 <dlmalloc+0x291>
c00010ea:	89 d8                	mov    eax,ebx
c00010ec:	c1 e0 06             	shl    eax,0x6
c00010ef:	8d 14 85 2c 31 02 c0 	lea    edx,[eax*4-0x3ffdced4]
c00010f6:	b8 01 00 00 00       	mov    eax,0x1
c00010fb:	85 f8                	test   eax,edi
c00010fd:	75 07                	jne    c0001106 <dlmalloc+0x2c2>
c00010ff:	83 c2 08             	add    edx,0x8
c0001102:	01 c0                	add    eax,eax
c0001104:	eb f5                	jmp    c00010fb <dlmalloc+0x2b7>
c0001106:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001109:	39 ca                	cmp    edx,ecx
c000110b:	75 14                	jne    c0001121 <dlmalloc+0x2dd>
c000110d:	89 c1                	mov    ecx,eax
c000110f:	83 c2 08             	add    edx,0x8
c0001112:	f7 d1                	not    ecx
c0001114:	01 c0                	add    eax,eax
c0001116:	21 cf                	and    edi,ecx
c0001118:	89 3c 9d 34 34 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcbcc],edi
c000111f:	eb ac                	jmp    c00010cd <dlmalloc+0x289>
c0001121:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001124:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001127:	83 e0 fc             	and    eax,0xfffffffc
c000112a:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000112d:	89 c3                	mov    ebx,eax
c000112f:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001132:	29 f3                	sub    ebx,esi
c0001134:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001137:	83 fb 0f             	cmp    ebx,0xf
c000113a:	8d 41 08             	lea    eax,[ecx+0x8]
c000113d:	77 09                	ja     c0001148 <dlmalloc+0x304>
c000113f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001143:	e9 82 00 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001148:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000114b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001151:	89 3d 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,edi
c0001157:	89 3d 40 31 02 c0    	mov    DWORD PTR ds:0xc0023140,edi
c000115d:	c7 47 08 34 31 02 c0 	mov    DWORD PTR [edi+0x8],0xc0023134
c0001164:	c7 47 0c 34 31 02 c0 	mov    DWORD PTR [edi+0xc],0xc0023134
c000116b:	77 06                	ja     c0001173 <dlmalloc+0x32f>
c000116d:	89 3d 30 31 02 c0    	mov    DWORD PTR ds:0xc0023130,edi
c0001173:	83 ce 01             	or     esi,0x1
c0001176:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001179:	89 d9                	mov    ecx,ebx
c000117b:	83 c9 01             	or     ecx,0x1
c000117e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001181:	89 1a                	mov    DWORD PTR [edx],ebx
c0001183:	eb 45                	jmp    c00011ca <dlmalloc+0x386>
c0001185:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c000118a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000118d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001190:	83 e2 fc             	and    edx,0xfffffffc
c0001193:	39 d1                	cmp    ecx,edx
c0001195:	77 1e                	ja     c00011b5 <dlmalloc+0x371>
c0001197:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119a:	89 f3                	mov    ebx,esi
c000119c:	89 0d 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,ecx
c00011a2:	83 cb 01             	or     ebx,0x1
c00011a5:	29 f2                	sub    edx,esi
c00011a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011aa:	83 ca 01             	or     edx,0x1
c00011ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b0:	e9 2d fd ff ff       	jmp    c0000ee2 <dlmalloc+0x9e>
c00011b5:	83 c4 1c             	add    esp,0x1c
c00011b8:	89 f0                	mov    eax,esi
c00011ba:	5b                   	pop    ebx
c00011bb:	ba 00 31 02 c0       	mov    edx,0xc0023100
c00011c0:	5e                   	pop    esi
c00011c1:	5f                   	pop    edi
c00011c2:	5d                   	pop    ebp
c00011c3:	e9 16 fa ff ff       	jmp    c0000bde <sYSMALLOc>
c00011c8:	31 c0                	xor    eax,eax
c00011ca:	83 c4 1c             	add    esp,0x1c
c00011cd:	5b                   	pop    ebx
c00011ce:	5e                   	pop    esi
c00011cf:	5f                   	pop    edi
c00011d0:	5d                   	pop    ebp
c00011d1:	c3                   	ret    

c00011d2 <iALLOc>:
c00011d2:	55                   	push   ebp
c00011d3:	89 c5                	mov    ebp,eax
c00011d5:	57                   	push   edi
c00011d6:	56                   	push   esi
c00011d7:	53                   	push   ebx
c00011d8:	83 ec 2c             	sub    esp,0x2c
c00011db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011e7:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c00011ee:	75 12                	jne    c0001202 <iALLOc+0x30>
c00011f0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011f4:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00011f9:	e8 04 f8 ff ff       	call   c0000a02 <malloc_consolidate>
c00011fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001202:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001207:	74 12                	je     c000121b <iALLOc+0x49>
c0001209:	85 ed                	test   ebp,ebp
c000120b:	0f 84 64 01 00 00    	je     c0001375 <iALLOc+0x1a3>
c0001211:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001219:	eb 33                	jmp    c000124e <iALLOc+0x7c>
c000121b:	85 ed                	test   ebp,ebp
c000121d:	75 14                	jne    c0001233 <iALLOc+0x61>
c000121f:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001227:	83 c4 2c             	add    esp,0x2c
c000122a:	5b                   	pop    ebx
c000122b:	5e                   	pop    esi
c000122c:	5f                   	pop    edi
c000122d:	5d                   	pop    ebp
c000122e:	e9 11 fc ff ff       	jmp    c0000e44 <dlmalloc>
c0001233:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001242:	83 f8 0f             	cmp    eax,0xf
c0001245:	76 07                	jbe    c000124e <iALLOc+0x7c>
c0001247:	83 e0 f8             	and    eax,0xfffffff8
c000124a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000124e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001253:	75 09                	jne    c000125e <iALLOc+0x8c>
c0001255:	89 d0                	mov    eax,edx
c0001257:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125a:	31 f6                	xor    esi,esi
c000125c:	eb 3b                	jmp    c0001299 <iALLOc+0xc7>
c000125e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001260:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001268:	83 c0 0b             	add    eax,0xb
c000126b:	83 f8 0f             	cmp    eax,0xf
c000126e:	76 07                	jbe    c0001277 <iALLOc+0xa5>
c0001270:	83 e0 f8             	and    eax,0xfffffff8
c0001273:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001277:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000127b:	0f af f5             	imul   esi,ebp
c000127e:	eb 25                	jmp    c00012a5 <iALLOc+0xd3>
c0001280:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001282:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001285:	bb 10 00 00 00       	mov    ebx,0x10
c000128a:	83 f9 0f             	cmp    ecx,0xf
c000128d:	76 05                	jbe    c0001294 <iALLOc+0xc2>
c000128f:	83 e1 f8             	and    ecx,0xfffffff8
c0001292:	89 cb                	mov    ebx,ecx
c0001294:	01 de                	add    esi,ebx
c0001296:	83 c0 04             	add    eax,0x4
c0001299:	39 c7                	cmp    edi,eax
c000129b:	75 e3                	jne    c0001280 <iALLOc+0xae>
c000129d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012a9:	8b 1d 54 34 02 c0    	mov    ebx,DWORD PTR ds:0xc0023454
c00012af:	83 ec 0c             	sub    esp,0xc
c00012b2:	c7 05 54 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023454,0x0
c00012bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c0:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c4:	50                   	push   eax
c00012c5:	e8 7a fb ff ff       	call   c0000e44 <dlmalloc>
c00012ca:	83 c4 10             	add    esp,0x10
c00012cd:	89 1d 54 34 02 c0    	mov    DWORD PTR ds:0xc0023454,ebx
c00012d3:	85 c0                	test   eax,eax
c00012d5:	0f 84 92 00 00 00    	je     c000136d <iALLOc+0x19b>
c00012db:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012de:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e1:	83 e3 fc             	and    ebx,0xfffffffc
c00012e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012e8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012ed:	74 1e                	je     c000130d <iALLOc+0x13b>
c00012ef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f3:	89 d9                	mov    ecx,ebx
c00012f5:	52                   	push   edx
c00012f6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012fa:	83 e9 04             	sub    ecx,0x4
c00012fd:	51                   	push   ecx
c00012fe:	6a 00                	push   0x0
c0001300:	50                   	push   eax
c0001301:	e8 02 f3 ff ff       	call   c0000608 <memset>
c0001306:	83 c4 10             	add    esp,0x10
c0001309:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000130d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001312:	75 14                	jne    c0001328 <iALLOc+0x156>
c0001314:	8d 04 37             	lea    eax,[edi+esi*1]
c0001317:	29 f3                	sub    ebx,esi
c0001319:	8d 48 08             	lea    ecx,[eax+0x8]
c000131c:	83 cb 01             	or     ebx,0x1
c000131f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001323:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001326:	89 f3                	mov    ebx,esi
c0001328:	31 c0                	xor    eax,eax
c000132a:	4d                   	dec    ebp
c000132b:	8d 4f 08             	lea    ecx,[edi+0x8]
c000132e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001332:	39 c5                	cmp    ebp,eax
c0001334:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001337:	74 2c                	je     c0001365 <iALLOc+0x193>
c0001339:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000133d:	85 c9                	test   ecx,ecx
c000133f:	75 15                	jne    c0001356 <iALLOc+0x184>
c0001341:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001344:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001347:	b9 10 00 00 00       	mov    ecx,0x10
c000134c:	83 fe 0f             	cmp    esi,0xf
c000134f:	76 05                	jbe    c0001356 <iALLOc+0x184>
c0001351:	83 e6 f8             	and    esi,0xfffffff8
c0001354:	89 f1                	mov    ecx,esi
c0001356:	89 ce                	mov    esi,ecx
c0001358:	29 cb                	sub    ebx,ecx
c000135a:	83 ce 01             	or     esi,0x1
c000135d:	40                   	inc    eax
c000135e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001361:	01 cf                	add    edi,ecx
c0001363:	eb c6                	jmp    c000132b <iALLOc+0x159>
c0001365:	83 cb 01             	or     ebx,0x1
c0001368:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000136b:	eb 08                	jmp    c0001375 <iALLOc+0x1a3>
c000136d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001375:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001379:	83 c4 2c             	add    esp,0x2c
c000137c:	5b                   	pop    ebx
c000137d:	5e                   	pop    esi
c000137e:	5f                   	pop    edi
c000137f:	5d                   	pop    ebp
c0001380:	c3                   	ret    

c0001381 <dlrealloc>:
c0001381:	55                   	push   ebp
c0001382:	57                   	push   edi
c0001383:	56                   	push   esi
c0001384:	53                   	push   ebx
c0001385:	83 ec 1c             	sub    esp,0x1c
c0001388:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000138c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001390:	85 db                	test   ebx,ebx
c0001392:	75 10                	jne    c00013a4 <dlrealloc+0x23>
c0001394:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001398:	83 c4 1c             	add    esp,0x1c
c000139b:	5b                   	pop    ebx
c000139c:	5e                   	pop    esi
c000139d:	5f                   	pop    edi
c000139e:	5d                   	pop    ebp
c000139f:	e9 a0 fa ff ff       	jmp    c0000e44 <dlmalloc>
c00013a4:	83 f8 df             	cmp    eax,0xffffffdf
c00013a7:	76 07                	jbe    c00013b0 <dlrealloc+0x2f>
c00013a9:	31 db                	xor    ebx,ebx
c00013ab:	e9 7c 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c00013b0:	83 c0 0b             	add    eax,0xb
c00013b3:	bf 10 00 00 00       	mov    edi,0x10
c00013b8:	83 f8 0f             	cmp    eax,0xf
c00013bb:	76 05                	jbe    c00013c2 <dlrealloc+0x41>
c00013bd:	83 e0 f8             	and    eax,0xfffffff8
c00013c0:	89 c7                	mov    edi,eax
c00013c2:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013c5:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00013c8:	89 c6                	mov    esi,eax
c00013ca:	83 e6 fc             	and    esi,0xfffffffc
c00013cd:	a8 02                	test   al,0x2
c00013cf:	75 d8                	jne    c00013a9 <dlrealloc+0x28>
c00013d1:	39 f7                	cmp    edi,esi
c00013d3:	0f 86 15 01 00 00    	jbe    c00014ee <dlrealloc+0x16d>
c00013d9:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00013dd:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013e0:	39 15 2c 31 02 c0    	cmp    DWORD PTR ds:0xc002312c,edx
c00013e6:	75 33                	jne    c000141b <dlrealloc+0x9a>
c00013e8:	83 e1 fc             	and    ecx,0xfffffffc
c00013eb:	01 f1                	add    ecx,esi
c00013ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f1:	8d 4f 10             	lea    ecx,[edi+0x10]
c00013f4:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013f8:	77 49                	ja     c0001443 <dlrealloc+0xc2>
c00013fa:	01 fd                	add    ebp,edi
c00013fc:	83 e0 01             	and    eax,0x1
c00013ff:	09 f8                	or     eax,edi
c0001401:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001404:	89 2d 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,ebp
c000140a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000140e:	29 f8                	sub    eax,edi
c0001410:	83 c8 01             	or     eax,0x1
c0001413:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001416:	e9 11 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c000141b:	89 c8                	mov    eax,ecx
c000141d:	83 e0 fe             	and    eax,0xfffffffe
c0001420:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001425:	75 1c                	jne    c0001443 <dlrealloc+0xc2>
c0001427:	83 e1 fc             	and    ecx,0xfffffffc
c000142a:	01 f1                	add    ecx,esi
c000142c:	39 cf                	cmp    edi,ecx
c000142e:	77 13                	ja     c0001443 <dlrealloc+0xc2>
c0001430:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001433:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001436:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001439:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000143c:	89 ce                	mov    esi,ecx
c000143e:	e9 ab 00 00 00       	jmp    c00014ee <dlrealloc+0x16d>
c0001443:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001447:	8d 47 f9             	lea    eax,[edi-0x7]
c000144a:	83 ec 0c             	sub    esp,0xc
c000144d:	50                   	push   eax
c000144e:	e8 f1 f9 ff ff       	call   c0000e44 <dlmalloc>
c0001453:	83 c4 10             	add    esp,0x10
c0001456:	89 c1                	mov    ecx,eax
c0001458:	85 c0                	test   eax,eax
c000145a:	0f 84 49 ff ff ff    	je     c00013a9 <dlrealloc+0x28>
c0001460:	8d 40 f8             	lea    eax,[eax-0x8]
c0001463:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001467:	39 c2                	cmp    edx,eax
c0001469:	75 0a                	jne    c0001475 <dlrealloc+0xf4>
c000146b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000146e:	83 e0 fc             	and    eax,0xfffffffc
c0001471:	01 c6                	add    esi,eax
c0001473:	eb 79                	jmp    c00014ee <dlrealloc+0x16d>
c0001475:	83 ee 04             	sub    esi,0x4
c0001478:	83 fe 27             	cmp    esi,0x27
c000147b:	76 16                	jbe    c0001493 <dlrealloc+0x112>
c000147d:	50                   	push   eax
c000147e:	56                   	push   esi
c000147f:	53                   	push   ebx
c0001480:	51                   	push   ecx
c0001481:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001485:	e8 48 f1 ff ff       	call   c00005d2 <memcpy>
c000148a:	83 c4 10             	add    esp,0x10
c000148d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001491:	eb 43                	jmp    c00014d6 <dlrealloc+0x155>
c0001493:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001495:	83 fe 13             	cmp    esi,0x13
c0001498:	89 01                	mov    DWORD PTR [ecx],eax
c000149a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000149d:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00014a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00014a3:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00014a6:	76 2e                	jbe    c00014d6 <dlrealloc+0x155>
c00014a8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014ab:	83 fe 1b             	cmp    esi,0x1b
c00014ae:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00014b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00014b4:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00014b7:	76 1d                	jbe    c00014d6 <dlrealloc+0x155>
c00014b9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00014bc:	83 fe 23             	cmp    esi,0x23
c00014bf:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00014c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00014c5:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00014c8:	76 0c                	jbe    c00014d6 <dlrealloc+0x155>
c00014ca:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00014cd:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00014d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00014d3:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00014d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014da:	83 ec 0c             	sub    esp,0xc
c00014dd:	53                   	push   ebx
c00014de:	e8 06 f6 ff ff       	call   c0000ae9 <dlfree>
c00014e3:	83 c4 10             	add    esp,0x10
c00014e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00014ea:	89 cb                	mov    ebx,ecx
c00014ec:	eb 3e                	jmp    c000152c <dlrealloc+0x1ab>
c00014ee:	89 f2                	mov    edx,esi
c00014f0:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014f3:	29 fa                	sub    edx,edi
c00014f5:	83 e1 01             	and    ecx,0x1
c00014f8:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00014fc:	83 fa 0f             	cmp    edx,0xf
c00014ff:	77 0b                	ja     c000150c <dlrealloc+0x18b>
c0001501:	09 ce                	or     esi,ecx
c0001503:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001506:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000150a:	eb 20                	jmp    c000152c <dlrealloc+0x1ab>
c000150c:	01 fd                	add    ebp,edi
c000150e:	83 ec 0c             	sub    esp,0xc
c0001511:	09 cf                	or     edi,ecx
c0001513:	83 ca 01             	or     edx,0x1
c0001516:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001519:	83 c5 08             	add    ebp,0x8
c000151c:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000151f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001523:	55                   	push   ebp
c0001524:	e8 c0 f5 ff ff       	call   c0000ae9 <dlfree>
c0001529:	83 c4 10             	add    esp,0x10
c000152c:	83 c4 1c             	add    esp,0x1c
c000152f:	89 d8                	mov    eax,ebx
c0001531:	5b                   	pop    ebx
c0001532:	5e                   	pop    esi
c0001533:	5f                   	pop    edi
c0001534:	5d                   	pop    ebp
c0001535:	c3                   	ret    

c0001536 <dlmemalign>:
c0001536:	55                   	push   ebp
c0001537:	57                   	push   edi
c0001538:	56                   	push   esi
c0001539:	53                   	push   ebx
c000153a:	83 ec 0c             	sub    esp,0xc
c000153d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001541:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001545:	83 fa 08             	cmp    edx,0x8
c0001548:	77 10                	ja     c000155a <dlmemalign+0x24>
c000154a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000154e:	83 c4 0c             	add    esp,0xc
c0001551:	5b                   	pop    ebx
c0001552:	5e                   	pop    esi
c0001553:	5f                   	pop    edi
c0001554:	5d                   	pop    ebp
c0001555:	e9 ea f8 ff ff       	jmp    c0000e44 <dlmalloc>
c000155a:	bf 10 00 00 00       	mov    edi,0x10
c000155f:	83 fa 0f             	cmp    edx,0xf
c0001562:	76 13                	jbe    c0001577 <dlmemalign+0x41>
c0001564:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001567:	85 d1                	test   ecx,edx
c0001569:	75 04                	jne    c000156f <dlmemalign+0x39>
c000156b:	89 d7                	mov    edi,edx
c000156d:	eb 08                	jmp    c0001577 <dlmemalign+0x41>
c000156f:	39 d7                	cmp    edi,edx
c0001571:	73 04                	jae    c0001577 <dlmemalign+0x41>
c0001573:	01 ff                	add    edi,edi
c0001575:	eb f8                	jmp    c000156f <dlmemalign+0x39>
c0001577:	83 f8 df             	cmp    eax,0xffffffdf
c000157a:	76 07                	jbe    c0001583 <dlmemalign+0x4d>
c000157c:	31 c0                	xor    eax,eax
c000157e:	e9 ce 00 00 00       	jmp    c0001651 <dlmemalign+0x11b>
c0001583:	83 c0 0b             	add    eax,0xb
c0001586:	bd 10 00 00 00       	mov    ebp,0x10
c000158b:	83 f8 0f             	cmp    eax,0xf
c000158e:	76 05                	jbe    c0001595 <dlmemalign+0x5f>
c0001590:	83 e0 f8             	and    eax,0xfffffff8
c0001593:	89 c5                	mov    ebp,eax
c0001595:	83 ec 0c             	sub    esp,0xc
c0001598:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000159c:	50                   	push   eax
c000159d:	e8 a2 f8 ff ff       	call   c0000e44 <dlmalloc>
c00015a2:	83 c4 10             	add    esp,0x10
c00015a5:	89 c1                	mov    ecx,eax
c00015a7:	85 c0                	test   eax,eax
c00015a9:	74 d1                	je     c000157c <dlmemalign+0x46>
c00015ab:	31 d2                	xor    edx,edx
c00015ad:	8d 70 f8             	lea    esi,[eax-0x8]
c00015b0:	f7 f7                	div    edi
c00015b2:	85 d2                	test   edx,edx
c00015b4:	74 62                	je     c0001618 <dlmemalign+0xe2>
c00015b6:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015ba:	89 f8                	mov    eax,edi
c00015bc:	f7 d8                	neg    eax
c00015be:	21 c3                	and    ebx,eax
c00015c0:	83 eb 08             	sub    ebx,0x8
c00015c3:	89 d8                	mov    eax,ebx
c00015c5:	29 f0                	sub    eax,esi
c00015c7:	83 f8 0f             	cmp    eax,0xf
c00015ca:	77 02                	ja     c00015ce <dlmemalign+0x98>
c00015cc:	01 fb                	add    ebx,edi
c00015ce:	89 d8                	mov    eax,ebx
c00015d0:	29 f0                	sub    eax,esi
c00015d2:	89 c6                	mov    esi,eax
c00015d4:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015d7:	89 c2                	mov    edx,eax
c00015d9:	83 e2 fc             	and    edx,0xfffffffc
c00015dc:	29 f2                	sub    edx,esi
c00015de:	a8 02                	test   al,0x2
c00015e0:	74 10                	je     c00015f2 <dlmemalign+0xbc>
c00015e2:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015e5:	83 ca 02             	or     edx,0x2
c00015e8:	8d 43 08             	lea    eax,[ebx+0x8]
c00015eb:	89 33                	mov    DWORD PTR [ebx],esi
c00015ed:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015f0:	eb 5f                	jmp    c0001651 <dlmemalign+0x11b>
c00015f2:	83 ec 0c             	sub    esp,0xc
c00015f5:	89 d0                	mov    eax,edx
c00015f7:	83 c8 01             	or     eax,0x1
c00015fa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00015fd:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001602:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001605:	83 e0 01             	and    eax,0x1
c0001608:	09 f0                	or     eax,esi
c000160a:	89 de                	mov    esi,ebx
c000160c:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000160f:	51                   	push   ecx
c0001610:	e8 d4 f4 ff ff       	call   c0000ae9 <dlfree>
c0001615:	83 c4 10             	add    esp,0x10
c0001618:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000161b:	a8 02                	test   al,0x2
c000161d:	75 2f                	jne    c000164e <dlmemalign+0x118>
c000161f:	83 e0 fc             	and    eax,0xfffffffc
c0001622:	8d 55 10             	lea    edx,[ebp+0x10]
c0001625:	39 c2                	cmp    edx,eax
c0001627:	73 25                	jae    c000164e <dlmemalign+0x118>
c0001629:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000162c:	83 ec 0c             	sub    esp,0xc
c000162f:	29 e8                	sub    eax,ebp
c0001631:	83 c2 08             	add    edx,0x8
c0001634:	83 c8 01             	or     eax,0x1
c0001637:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000163a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000163d:	83 e0 01             	and    eax,0x1
c0001640:	09 c5                	or     ebp,eax
c0001642:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001645:	52                   	push   edx
c0001646:	e8 9e f4 ff ff       	call   c0000ae9 <dlfree>
c000164b:	83 c4 10             	add    esp,0x10
c000164e:	8d 46 08             	lea    eax,[esi+0x8]
c0001651:	83 c4 0c             	add    esp,0xc
c0001654:	5b                   	pop    ebx
c0001655:	5e                   	pop    esi
c0001656:	5f                   	pop    edi
c0001657:	5d                   	pop    ebp
c0001658:	c3                   	ret    

c0001659 <dlcalloc>:
c0001659:	53                   	push   ebx
c000165a:	83 ec 14             	sub    esp,0x14
c000165d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001661:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001666:	50                   	push   eax
c0001667:	e8 d8 f7 ff ff       	call   c0000e44 <dlmalloc>
c000166c:	83 c4 10             	add    esp,0x10
c000166f:	89 c3                	mov    ebx,eax
c0001671:	85 c0                	test   eax,eax
c0001673:	74 77                	je     c00016ec <dlcalloc+0x93>
c0001675:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 e0 fc             	and    eax,0xfffffffc
c000167d:	80 e2 02             	and    dl,0x2
c0001680:	75 5a                	jne    c00016dc <dlcalloc+0x83>
c0001682:	83 e8 04             	sub    eax,0x4
c0001685:	83 f8 27             	cmp    eax,0x27
c0001688:	76 03                	jbe    c000168d <dlcalloc+0x34>
c000168a:	51                   	push   ecx
c000168b:	eb 53                	jmp    c00016e0 <dlcalloc+0x87>
c000168d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001693:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000169a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00016a1:	83 f8 13             	cmp    eax,0x13
c00016a4:	76 46                	jbe    c00016ec <dlcalloc+0x93>
c00016a6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00016ad:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016b4:	83 f8 1b             	cmp    eax,0x1b
c00016b7:	76 33                	jbe    c00016ec <dlcalloc+0x93>
c00016b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016c0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016c7:	83 f8 23             	cmp    eax,0x23
c00016ca:	76 20                	jbe    c00016ec <dlcalloc+0x93>
c00016cc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016d3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016da:	eb 10                	jmp    c00016ec <dlcalloc+0x93>
c00016dc:	83 e8 08             	sub    eax,0x8
c00016df:	52                   	push   edx
c00016e0:	50                   	push   eax
c00016e1:	6a 00                	push   0x0
c00016e3:	53                   	push   ebx
c00016e4:	e8 1f ef ff ff       	call   c0000608 <memset>
c00016e9:	83 c4 10             	add    esp,0x10
c00016ec:	89 d8                	mov    eax,ebx
c00016ee:	83 c4 08             	add    esp,0x8
c00016f1:	5b                   	pop    ebx
c00016f2:	c3                   	ret    

c00016f3 <dlcfree>:
c00016f3:	e9 f1 f3 ff ff       	jmp    c0000ae9 <dlfree>

c00016f8 <dlindependent_calloc>:
c00016f8:	83 ec 28             	sub    esp,0x28
c00016fb:	b9 03 00 00 00       	mov    ecx,0x3
c0001700:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001704:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001708:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000170c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001710:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001714:	e8 b9 fa ff ff       	call   c00011d2 <iALLOc>
c0001719:	83 c4 2c             	add    esp,0x2c
c000171c:	c3                   	ret    

c000171d <dlindependent_comalloc>:
c000171d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001721:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001725:	31 c9                	xor    ecx,ecx
c0001727:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000172b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000172f:	e9 9e fa ff ff       	jmp    c00011d2 <iALLOc>

c0001734 <dlvalloc>:
c0001734:	83 ec 0c             	sub    esp,0xc
c0001737:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c000173e:	75 0a                	jne    c000174a <dlvalloc+0x16>
c0001740:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001745:	e8 b8 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000174a:	50                   	push   eax
c000174b:	50                   	push   eax
c000174c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001750:	ff 35 5c 34 02 c0    	push   DWORD PTR ds:0xc002345c
c0001756:	e8 db fd ff ff       	call   c0001536 <dlmemalign>
c000175b:	83 c4 1c             	add    esp,0x1c
c000175e:	c3                   	ret    

c000175f <dlpvalloc>:
c000175f:	83 ec 0c             	sub    esp,0xc
c0001762:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c0001769:	75 0a                	jne    c0001775 <dlpvalloc+0x16>
c000176b:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001770:	e8 8d f2 ff ff       	call   c0000a02 <malloc_consolidate>
c0001775:	a1 5c 34 02 c0       	mov    eax,ds:0xc002345c
c000177a:	89 c1                	mov    ecx,eax
c000177c:	52                   	push   edx
c000177d:	f7 d9                	neg    ecx
c000177f:	52                   	push   edx
c0001780:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001784:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001788:	21 ca                	and    edx,ecx
c000178a:	52                   	push   edx
c000178b:	50                   	push   eax
c000178c:	e8 a5 fd ff ff       	call   c0001536 <dlmemalign>
c0001791:	83 c4 1c             	add    esp,0x1c
c0001794:	c3                   	ret    

c0001795 <dlmalloc_trim>:
c0001795:	b8 00 31 02 c0       	mov    eax,0xc0023100
c000179a:	e8 63 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000179f:	31 c0                	xor    eax,eax
c00017a1:	c3                   	ret    

c00017a2 <dlmalloc_usable_size>:
c00017a2:	53                   	push   ebx
c00017a3:	31 c0                	xor    eax,eax
c00017a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00017a9:	85 c9                	test   ecx,ecx
c00017ab:	74 24                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017ad:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017b0:	f6 c2 02             	test   dl,0x2
c00017b3:	74 08                	je     c00017bd <dlmalloc_usable_size+0x1b>
c00017b5:	83 e2 fc             	and    edx,0xfffffffc
c00017b8:	8d 42 f8             	lea    eax,[edx-0x8]
c00017bb:	eb 14                	jmp    c00017d1 <dlmalloc_usable_size+0x2f>
c00017bd:	89 d3                	mov    ebx,edx
c00017bf:	31 c0                	xor    eax,eax
c00017c1:	83 e3 fe             	and    ebx,0xfffffffe
c00017c4:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017c9:	74 06                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017cb:	83 e2 fc             	and    edx,0xfffffffc
c00017ce:	8d 42 fc             	lea    eax,[edx-0x4]
c00017d1:	5b                   	pop    ebx
c00017d2:	c3                   	ret    

c00017d3 <dlmallinfo>:
c00017d3:	55                   	push   ebp
c00017d4:	57                   	push   edi
c00017d5:	56                   	push   esi
c00017d6:	53                   	push   ebx
c00017d7:	83 ec 08             	sub    esp,0x8
c00017da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017de:	83 3d 2c 31 02 c0 00 	cmp    DWORD PTR ds:0xc002312c,0x0
c00017e5:	75 0a                	jne    c00017f1 <dlmallinfo+0x1e>
c00017e7:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00017ec:	e8 11 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c00017f1:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c00017f6:	31 ed                	xor    ebp,ebp
c00017f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00017fb:	31 c9                	xor    ecx,ecx
c00017fd:	83 e0 fc             	and    eax,0xfffffffc
c0001800:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001804:	31 c0                	xor    eax,eax
c0001806:	8b 14 85 04 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcefc]
c000180d:	85 d2                	test   edx,edx
c000180f:	74 0e                	je     c000181f <dlmallinfo+0x4c>
c0001811:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001814:	45                   	inc    ebp
c0001815:	83 e6 fc             	and    esi,0xfffffffc
c0001818:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000181b:	01 f1                	add    ecx,esi
c000181d:	eb ee                	jmp    c000180d <dlmallinfo+0x3a>
c000181f:	40                   	inc    eax
c0001820:	83 f8 0a             	cmp    eax,0xa
c0001823:	75 e1                	jne    c0001806 <dlmallinfo+0x33>
c0001825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001829:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001830:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001833:	b8 34 31 02 c0       	mov    eax,0xc0023134
c0001838:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000183b:	39 f0                	cmp    eax,esi
c000183d:	74 10                	je     c000184f <dlmallinfo+0x7c>
c000183f:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001842:	ff 04 24             	inc    DWORD PTR [esp]
c0001845:	83 e7 fc             	and    edi,0xfffffffc
c0001848:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000184b:	01 fa                	add    edx,edi
c000184d:	eb ec                	jmp    c000183b <dlmallinfo+0x68>
c000184f:	83 c0 08             	add    eax,0x8
c0001852:	3d 2c 34 02 c0       	cmp    eax,0xc002342c
c0001857:	75 df                	jne    c0001838 <dlmallinfo+0x65>
c0001859:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000185c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000185f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001862:	a1 68 34 02 c0       	mov    eax,ds:0xc0023468
c0001867:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000186a:	89 03                	mov    DWORD PTR [ebx],eax
c000186c:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000186f:	8b 35 50 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023450
c0001875:	29 d0                	sub    eax,edx
c0001877:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000187a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000187d:	8b 35 64 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023464
c0001883:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001887:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000188a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000188d:	8b 35 74 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023474
c0001893:	89 d8                	mov    eax,ebx
c0001895:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001898:	83 c4 08             	add    esp,0x8
c000189b:	5b                   	pop    ebx
c000189c:	5e                   	pop    esi
c000189d:	5f                   	pop    edi
c000189e:	5d                   	pop    ebp
c000189f:	c2 04 00             	ret    0x4

c00018a2 <dlmalloc_stats>:
c00018a2:	83 ec 30             	sub    esp,0x30
c00018a5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00018a9:	50                   	push   eax
c00018aa:	e8 24 ff ff ff       	call   c00017d3 <dlmallinfo>
c00018af:	83 c4 30             	add    esp,0x30
c00018b2:	c3                   	ret    

c00018b3 <dlmallopt>:
c00018b3:	56                   	push   esi
c00018b4:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00018b9:	53                   	push   ebx
c00018ba:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018c2:	e8 3b f1 ff ff       	call   c0000a02 <malloc_consolidate>
c00018c7:	8d 46 04             	lea    eax,[esi+0x4]
c00018ca:	83 f8 05             	cmp    eax,0x5
c00018cd:	77 67                	ja     c0001936 <dlmallopt+0x83>
c00018cf:	ff 24 85 e4 f4 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0b1c]
c00018d6:	83 fb 50             	cmp    ebx,0x50
c00018d9:	77 5b                	ja     c0001936 <dlmallopt+0x83>
c00018db:	ba 08 00 00 00       	mov    edx,0x8
c00018e0:	85 db                	test   ebx,ebx
c00018e2:	74 12                	je     c00018f6 <dlmallopt+0x43>
c00018e4:	83 c3 0b             	add    ebx,0xb
c00018e7:	ba 10 00 00 00       	mov    edx,0x10
c00018ec:	83 fb 0f             	cmp    ebx,0xf
c00018ef:	76 05                	jbe    c00018f6 <dlmallopt+0x43>
c00018f1:	89 da                	mov    edx,ebx
c00018f3:	83 e2 f8             	and    edx,0xfffffff8
c00018f6:	a1 00 31 02 c0       	mov    eax,ds:0xc0023100
c00018fb:	83 e0 03             	and    eax,0x3
c00018fe:	09 d0                	or     eax,edx
c0001900:	a3 00 31 02 c0       	mov    ds:0xc0023100,eax
c0001905:	eb 31                	jmp    c0001938 <dlmallopt+0x85>
c0001907:	89 1d 44 34 02 c0    	mov    DWORD PTR ds:0xc0023444,ebx
c000190d:	eb 06                	jmp    c0001915 <dlmallopt+0x62>
c000190f:	89 1d 48 34 02 c0    	mov    DWORD PTR ds:0xc0023448,ebx
c0001915:	be 01 00 00 00       	mov    esi,0x1
c000191a:	eb 1c                	jmp    c0001938 <dlmallopt+0x85>
c000191c:	89 1d 4c 34 02 c0    	mov    DWORD PTR ds:0xc002344c,ebx
c0001922:	eb f1                	jmp    c0001915 <dlmallopt+0x62>
c0001924:	31 f6                	xor    esi,esi
c0001926:	85 db                	test   ebx,ebx
c0001928:	75 0e                	jne    c0001938 <dlmallopt+0x85>
c000192a:	c7 05 54 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023454,0x0
c0001934:	eb df                	jmp    c0001915 <dlmallopt+0x62>
c0001936:	31 f6                	xor    esi,esi
c0001938:	89 f0                	mov    eax,esi
c000193a:	5b                   	pop    ebx
c000193b:	5e                   	pop    esi
c000193c:	c3                   	ret    

c000193d <disk_status>:
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <disk_initialize>:
c0001940:	31 c0                	xor    eax,eax
c0001942:	c3                   	ret    

c0001943 <disk_read>:
c0001943:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001948:	0f b6 04 85 a0 49 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb660]
c0001950:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001954:	e9 1f 80 01 00       	jmp    c0019978 <fatWrapperReadDisk>

c0001959 <disk_write>:
c0001959:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000195e:	0f b6 04 85 a0 49 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb660]
c0001966:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000196a:	e9 50 80 01 00       	jmp    c00199bf <fatWrapperWriteDisk>

c000196f <disk_ioctl>:
c000196f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001978:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000197d:	0f b6 04 85 a0 49 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb660]
c0001985:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001989:	e9 78 80 01 00       	jmp    c0019a06 <fatWrapperIoctl>

c000198e <ld_word>:
c000198e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001992:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001995:	c1 e2 08             	shl    edx,0x8
c0001998:	09 d0                	or     eax,edx
c000199a:	c3                   	ret    

c000199b <ld_dword>:
c000199b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c000199f:	89 d1                	mov    ecx,edx
c00019a1:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019a5:	c1 e1 08             	shl    ecx,0x8
c00019a8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019ab:	09 ca                	or     edx,ecx
c00019ad:	c1 e2 08             	shl    edx,0x8
c00019b0:	09 d0                	or     eax,edx
c00019b2:	c3                   	ret    

c00019b3 <ld_qword>:
c00019b3:	57                   	push   edi
c00019b4:	56                   	push   esi
c00019b5:	53                   	push   ebx
c00019b6:	31 db                	xor    ebx,ebx
c00019b8:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00019bb:	89 df                	mov    edi,ebx
c00019bd:	89 ce                	mov    esi,ecx
c00019bf:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00019c3:	0f a4 f7 08          	shld   edi,esi,0x8
c00019c7:	c1 e6 08             	shl    esi,0x8
c00019ca:	09 f2                	or     edx,esi
c00019cc:	89 d6                	mov    esi,edx
c00019ce:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00019d2:	0f a4 f7 08          	shld   edi,esi,0x8
c00019d6:	c1 e6 08             	shl    esi,0x8
c00019d9:	09 f2                	or     edx,esi
c00019db:	89 d6                	mov    esi,edx
c00019dd:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019e1:	0f a4 f7 08          	shld   edi,esi,0x8
c00019e5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019e8:	c1 e6 08             	shl    esi,0x8
c00019eb:	89 fb                	mov    ebx,edi
c00019ed:	09 f2                	or     edx,esi
c00019ef:	89 d1                	mov    ecx,edx
c00019f1:	0f a4 cb 08          	shld   ebx,ecx,0x8
c00019f5:	c1 e1 08             	shl    ecx,0x8
c00019f8:	89 da                	mov    edx,ebx
c00019fa:	09 c8                	or     eax,ecx
c00019fc:	5b                   	pop    ebx
c00019fd:	5e                   	pop    esi
c00019fe:	5f                   	pop    edi
c00019ff:	c3                   	ret    

c0001a00 <st_word>:
c0001a00:	66 89 10             	mov    WORD PTR [eax],dx
c0001a03:	c3                   	ret    

c0001a04 <st_dword>:
c0001a04:	89 10                	mov    DWORD PTR [eax],edx
c0001a06:	c3                   	ret    

c0001a07 <st_qword>:
c0001a07:	89 10                	mov    DWORD PTR [eax],edx
c0001a09:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a0c:	c3                   	ret    

c0001a0d <mem_cpy>:
c0001a0d:	85 c9                	test   ecx,ecx
c0001a0f:	74 10                	je     c0001a21 <mem_cpy+0x14>
c0001a11:	57                   	push   edi
c0001a12:	01 c1                	add    ecx,eax
c0001a14:	56                   	push   esi
c0001a15:	89 c7                	mov    edi,eax
c0001a17:	89 d6                	mov    esi,edx
c0001a19:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a1a:	39 f9                	cmp    ecx,edi
c0001a1c:	75 fb                	jne    c0001a19 <mem_cpy+0xc>
c0001a1e:	5e                   	pop    esi
c0001a1f:	5f                   	pop    edi
c0001a20:	c3                   	ret    
c0001a21:	c3                   	ret    

c0001a22 <mem_set>:
c0001a22:	01 c1                	add    ecx,eax
c0001a24:	40                   	inc    eax
c0001a25:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a28:	39 c8                	cmp    eax,ecx
c0001a2a:	75 f8                	jne    c0001a24 <mem_set+0x2>
c0001a2c:	c3                   	ret    

c0001a2d <mem_cmp>:
c0001a2d:	57                   	push   edi
c0001a2e:	56                   	push   esi
c0001a2f:	89 c6                	mov    esi,eax
c0001a31:	53                   	push   ebx
c0001a32:	46                   	inc    esi
c0001a33:	42                   	inc    edx
c0001a34:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001a38:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001a3c:	29 fb                	sub    ebx,edi
c0001a3e:	89 cf                	mov    edi,ecx
c0001a40:	29 f7                	sub    edi,esi
c0001a42:	01 c7                	add    edi,eax
c0001a44:	74 04                	je     c0001a4a <mem_cmp+0x1d>
c0001a46:	85 db                	test   ebx,ebx
c0001a48:	74 e8                	je     c0001a32 <mem_cmp+0x5>
c0001a4a:	89 d8                	mov    eax,ebx
c0001a4c:	5b                   	pop    ebx
c0001a4d:	5e                   	pop    esi
c0001a4e:	5f                   	pop    edi
c0001a4f:	c3                   	ret    

c0001a50 <chk_chr>:
c0001a50:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001a53:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001a56:	74 07                	je     c0001a5f <chk_chr+0xf>
c0001a58:	39 d1                	cmp    ecx,edx
c0001a5a:	74 03                	je     c0001a5f <chk_chr+0xf>
c0001a5c:	40                   	inc    eax
c0001a5d:	eb f1                	jmp    c0001a50 <chk_chr>
c0001a5f:	89 c8                	mov    eax,ecx
c0001a61:	c3                   	ret    

c0001a62 <dbc_1st>:
c0001a62:	31 c0                	xor    eax,eax
c0001a64:	c3                   	ret    

c0001a65 <dbc_2nd>:
c0001a65:	31 c0                	xor    eax,eax
c0001a67:	c3                   	ret    

c0001a68 <tchar2uni>:
c0001a68:	57                   	push   edi
c0001a69:	89 c7                	mov    edi,eax
c0001a6b:	56                   	push   esi
c0001a6c:	53                   	push   ebx
c0001a6d:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a6f:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a71:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a74:	84 c9                	test   cl,cl
c0001a76:	78 0a                	js     c0001a82 <tchar2uni+0x1a>
c0001a78:	0f b6 d1             	movzx  edx,cl
c0001a7b:	89 f3                	mov    ebx,esi
c0001a7d:	e9 9f 00 00 00       	jmp    c0001b21 <tchar2uni+0xb9>
c0001a82:	88 ca                	mov    dl,cl
c0001a84:	83 e2 e0             	and    edx,0xffffffe0
c0001a87:	80 fa c0             	cmp    dl,0xc0
c0001a8a:	75 0c                	jne    c0001a98 <tchar2uni+0x30>
c0001a8c:	89 ca                	mov    edx,ecx
c0001a8e:	b9 01 00 00 00       	mov    ecx,0x1
c0001a93:	83 e2 1f             	and    edx,0x1f
c0001a96:	eb 2e                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001a98:	88 ca                	mov    dl,cl
c0001a9a:	83 e2 f0             	and    edx,0xfffffff0
c0001a9d:	80 fa e0             	cmp    dl,0xe0
c0001aa0:	75 0c                	jne    c0001aae <tchar2uni+0x46>
c0001aa2:	89 ca                	mov    edx,ecx
c0001aa4:	b9 02 00 00 00       	mov    ecx,0x2
c0001aa9:	83 e2 0f             	and    edx,0xf
c0001aac:	eb 18                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001aae:	88 ca                	mov    dl,cl
c0001ab0:	83 e2 f8             	and    edx,0xfffffff8
c0001ab3:	88 d0                	mov    al,dl
c0001ab5:	83 ca ff             	or     edx,0xffffffff
c0001ab8:	3c f0                	cmp    al,0xf0
c0001aba:	75 6c                	jne    c0001b28 <tchar2uni+0xc0>
c0001abc:	89 ca                	mov    edx,ecx
c0001abe:	b9 03 00 00 00       	mov    ecx,0x3
c0001ac3:	83 e2 07             	and    edx,0x7
c0001ac6:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001aca:	46                   	inc    esi
c0001acb:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ace:	88 c8                	mov    al,cl
c0001ad0:	83 e0 c0             	and    eax,0xffffffc0
c0001ad3:	3c 80                	cmp    al,0x80
c0001ad5:	75 4e                	jne    c0001b25 <tchar2uni+0xbd>
c0001ad7:	c1 e2 06             	shl    edx,0x6
c0001ada:	83 e1 3f             	and    ecx,0x3f
c0001add:	09 ca                	or     edx,ecx
c0001adf:	39 de                	cmp    esi,ebx
c0001ae1:	75 e7                	jne    c0001aca <tchar2uni+0x62>
c0001ae3:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ae6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001aec:	77 37                	ja     c0001b25 <tchar2uni+0xbd>
c0001aee:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001af4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001afa:	76 29                	jbe    c0001b25 <tchar2uni+0xbd>
c0001afc:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b02:	76 1d                	jbe    c0001b21 <tchar2uni+0xb9>
c0001b04:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b0a:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b10:	c1 e1 06             	shl    ecx,0x6
c0001b13:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b19:	09 ca                	or     edx,ecx
c0001b1b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b21:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b23:	eb 03                	jmp    c0001b28 <tchar2uni+0xc0>
c0001b25:	83 ca ff             	or     edx,0xffffffff
c0001b28:	5b                   	pop    ebx
c0001b29:	89 d0                	mov    eax,edx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	c3                   	ret    

c0001b2e <put_utf>:
c0001b2e:	53                   	push   ebx
c0001b2f:	83 f8 7f             	cmp    eax,0x7f
c0001b32:	89 c3                	mov    ebx,eax
c0001b34:	b0 00                	mov    al,0x0
c0001b36:	77 11                	ja     c0001b49 <put_utf+0x1b>
c0001b38:	85 c9                	test   ecx,ecx
c0001b3a:	0f 84 e5 00 00 00    	je     c0001c25 <put_utf+0xf7>
c0001b40:	88 1a                	mov    BYTE PTR [edx],bl
c0001b42:	b0 01                	mov    al,0x1
c0001b44:	e9 dc 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b49:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001b4f:	77 23                	ja     c0001b74 <put_utf+0x46>
c0001b51:	83 f9 01             	cmp    ecx,0x1
c0001b54:	0f 86 cb 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b5a:	89 d8                	mov    eax,ebx
c0001b5c:	83 e3 3f             	and    ebx,0x3f
c0001b5f:	c1 e8 06             	shr    eax,0x6
c0001b62:	83 cb 80             	or     ebx,0xffffff80
c0001b65:	83 c8 c0             	or     eax,0xffffffc0
c0001b68:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b6b:	88 02                	mov    BYTE PTR [edx],al
c0001b6d:	b0 02                	mov    al,0x2
c0001b6f:	e9 b1 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b74:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b7a:	77 40                	ja     c0001bbc <put_utf+0x8e>
c0001b7c:	83 f9 02             	cmp    ecx,0x2
c0001b7f:	0f 86 a0 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b85:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b8b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b91:	0f 86 8e 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b97:	89 d8                	mov    eax,ebx
c0001b99:	c1 e8 0c             	shr    eax,0xc
c0001b9c:	83 c8 e0             	or     eax,0xffffffe0
c0001b9f:	88 02                	mov    BYTE PTR [edx],al
c0001ba1:	89 d8                	mov    eax,ebx
c0001ba3:	83 e3 3f             	and    ebx,0x3f
c0001ba6:	c1 e8 06             	shr    eax,0x6
c0001ba9:	83 cb 80             	or     ebx,0xffffff80
c0001bac:	83 e0 3f             	and    eax,0x3f
c0001baf:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001bb2:	83 c8 80             	or     eax,0xffffff80
c0001bb5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001bb8:	b0 03                	mov    al,0x3
c0001bba:	eb 69                	jmp    c0001c25 <put_utf+0xf7>
c0001bbc:	83 f9 03             	cmp    ecx,0x3
c0001bbf:	76 64                	jbe    c0001c25 <put_utf+0xf7>
c0001bc1:	89 d9                	mov    ecx,ebx
c0001bc3:	0f b7 c3             	movzx  eax,bx
c0001bc6:	66 31 c9             	xor    cx,cx
c0001bc9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001bcf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001bd5:	c1 e9 06             	shr    ecx,0x6
c0001bd8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001bde:	77 43                	ja     c0001c23 <put_utf+0xf5>
c0001be0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001be6:	77 3b                	ja     c0001c23 <put_utf+0xf5>
c0001be8:	09 cb                	or     ebx,ecx
c0001bea:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001bf0:	89 d8                	mov    eax,ebx
c0001bf2:	c1 e8 12             	shr    eax,0x12
c0001bf5:	83 c8 f0             	or     eax,0xfffffff0
c0001bf8:	88 02                	mov    BYTE PTR [edx],al
c0001bfa:	89 d8                	mov    eax,ebx
c0001bfc:	c1 e8 0c             	shr    eax,0xc
c0001bff:	83 e0 3f             	and    eax,0x3f
c0001c02:	83 c8 80             	or     eax,0xffffff80
c0001c05:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c08:	89 d8                	mov    eax,ebx
c0001c0a:	83 e3 3f             	and    ebx,0x3f
c0001c0d:	c1 e8 06             	shr    eax,0x6
c0001c10:	83 cb 80             	or     ebx,0xffffff80
c0001c13:	83 e0 3f             	and    eax,0x3f
c0001c16:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c19:	83 c8 80             	or     eax,0xffffff80
c0001c1c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c1f:	b0 04                	mov    al,0x4
c0001c21:	eb 02                	jmp    c0001c25 <put_utf+0xf7>
c0001c23:	31 c0                	xor    eax,eax
c0001c25:	5b                   	pop    ebx
c0001c26:	c3                   	ret    

c0001c27 <clst2sect>:
c0001c27:	89 c1                	mov    ecx,eax
c0001c29:	83 ea 02             	sub    edx,0x2
c0001c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001c2f:	83 e8 02             	sub    eax,0x2
c0001c32:	39 d0                	cmp    eax,edx
c0001c34:	76 0d                	jbe    c0001c43 <clst2sect+0x1c>
c0001c36:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001c3a:	f7 e2                	mul    edx
c0001c3c:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001c3f:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001c42:	c3                   	ret    
c0001c43:	31 c0                	xor    eax,eax
c0001c45:	31 d2                	xor    edx,edx
c0001c47:	c3                   	ret    

c0001c48 <clmt_clust>:
c0001c48:	57                   	push   edi
c0001c49:	89 cf                	mov    edi,ecx
c0001c4b:	56                   	push   esi
c0001c4c:	89 d6                	mov    esi,edx
c0001c4e:	53                   	push   ebx
c0001c4f:	0f ac fe 09          	shrd   esi,edi,0x9
c0001c53:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001c56:	89 f2                	mov    edx,esi
c0001c58:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c5a:	c1 ef 09             	shr    edi,0x9
c0001c5d:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001c61:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001c64:	89 f9                	mov    ecx,edi
c0001c66:	31 ff                	xor    edi,edi
c0001c68:	57                   	push   edi
c0001c69:	56                   	push   esi
c0001c6a:	51                   	push   ecx
c0001c6b:	52                   	push   edx
c0001c6c:	e8 5b c9 01 00       	call   c001e5cc <__udivdi3>
c0001c71:	83 c4 10             	add    esp,0x10
c0001c74:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001c76:	85 d2                	test   edx,edx
c0001c78:	74 10                	je     c0001c8a <clmt_clust+0x42>
c0001c7a:	39 d0                	cmp    eax,edx
c0001c7c:	72 07                	jb     c0001c85 <clmt_clust+0x3d>
c0001c7e:	29 d0                	sub    eax,edx
c0001c80:	83 c3 08             	add    ebx,0x8
c0001c83:	eb ef                	jmp    c0001c74 <clmt_clust+0x2c>
c0001c85:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001c88:	89 c2                	mov    edx,eax
c0001c8a:	5b                   	pop    ebx
c0001c8b:	89 d0                	mov    eax,edx
c0001c8d:	5e                   	pop    esi
c0001c8e:	5f                   	pop    edi
c0001c8f:	c3                   	ret    

c0001c90 <pick_lfn>:
c0001c90:	55                   	push   ebp
c0001c91:	57                   	push   edi
c0001c92:	56                   	push   esi
c0001c93:	89 d6                	mov    esi,edx
c0001c95:	53                   	push   ebx
c0001c96:	89 c3                	mov    ebx,eax
c0001c98:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001c9b:	e8 ee fc ff ff       	call   c000198e <ld_word>
c0001ca0:	66 85 c0             	test   ax,ax
c0001ca3:	74 04                	je     c0001ca9 <pick_lfn+0x19>
c0001ca5:	31 c0                	xor    eax,eax
c0001ca7:	eb 5c                	jmp    c0001d05 <pick_lfn+0x75>
c0001ca9:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001cac:	bd 01 00 00 00       	mov    ebp,0x1
c0001cb1:	83 e1 bf             	and    ecx,0xffffffbf
c0001cb4:	31 ff                	xor    edi,edi
c0001cb6:	49                   	dec    ecx
c0001cb7:	6b c9 0d             	imul   ecx,ecx,0xd
c0001cba:	0f b6 87 00 f6 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe0a00]
c0001cc1:	01 f0                	add    eax,esi
c0001cc3:	e8 c6 fc ff ff       	call   c000198e <ld_word>
c0001cc8:	66 85 ed             	test   bp,bp
c0001ccb:	74 11                	je     c0001cde <pick_lfn+0x4e>
c0001ccd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cd3:	77 d0                	ja     c0001ca5 <pick_lfn+0x15>
c0001cd5:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001cd9:	89 c5                	mov    ebp,eax
c0001cdb:	41                   	inc    ecx
c0001cdc:	eb 04                	jmp    c0001ce2 <pick_lfn+0x52>
c0001cde:	66 40                	inc    ax
c0001ce0:	75 c3                	jne    c0001ca5 <pick_lfn+0x15>
c0001ce2:	47                   	inc    edi
c0001ce3:	83 ff 0d             	cmp    edi,0xd
c0001ce6:	75 d2                	jne    c0001cba <pick_lfn+0x2a>
c0001ce8:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ceb:	74 13                	je     c0001d00 <pick_lfn+0x70>
c0001ced:	66 85 ed             	test   bp,bp
c0001cf0:	74 0e                	je     c0001d00 <pick_lfn+0x70>
c0001cf2:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cf8:	77 ab                	ja     c0001ca5 <pick_lfn+0x15>
c0001cfa:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d00:	b8 01 00 00 00       	mov    eax,0x1
c0001d05:	5b                   	pop    ebx
c0001d06:	5e                   	pop    esi
c0001d07:	5f                   	pop    edi
c0001d08:	5d                   	pop    ebp
c0001d09:	c3                   	ret    

c0001d0a <put_lfn>:
c0001d0a:	55                   	push   ebp
c0001d0b:	31 ed                	xor    ebp,ebp
c0001d0d:	57                   	push   edi
c0001d0e:	89 d7                	mov    edi,edx
c0001d10:	56                   	push   esi
c0001d11:	31 f6                	xor    esi,esi
c0001d13:	53                   	push   ebx
c0001d14:	83 ec 08             	sub    esp,0x8
c0001d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d1a:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d22:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d28:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d2b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d2e:	31 d2                	xor    edx,edx
c0001d30:	e8 cb fc ff ff       	call   c0001a00 <st_word>
c0001d35:	0f b6 d9             	movzx  ebx,cl
c0001d38:	4b                   	dec    ebx
c0001d39:	6b db 0d             	imul   ebx,ebx,0xd
c0001d3c:	66 83 fe ff          	cmp    si,0xffff
c0001d40:	74 08                	je     c0001d4a <put_lfn+0x40>
c0001d42:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d45:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001d49:	43                   	inc    ebx
c0001d4a:	0f b6 85 00 f6 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0a00]
c0001d51:	0f b7 d6             	movzx  edx,si
c0001d54:	01 f8                	add    eax,edi
c0001d56:	e8 a5 fc ff ff       	call   c0001a00 <st_word>
c0001d5b:	66 85 f6             	test   si,si
c0001d5e:	75 03                	jne    c0001d63 <put_lfn+0x59>
c0001d60:	83 ce ff             	or     esi,0xffffffff
c0001d63:	45                   	inc    ebp
c0001d64:	83 fd 0d             	cmp    ebp,0xd
c0001d67:	75 d3                	jne    c0001d3c <put_lfn+0x32>
c0001d69:	66 46                	inc    si
c0001d6b:	74 0a                	je     c0001d77 <put_lfn+0x6d>
c0001d6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001d75:	75 09                	jne    c0001d80 <put_lfn+0x76>
c0001d77:	88 c8                	mov    al,cl
c0001d79:	83 c8 40             	or     eax,0x40
c0001d7c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d80:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d84:	88 07                	mov    BYTE PTR [edi],al
c0001d86:	83 c4 08             	add    esp,0x8
c0001d89:	5b                   	pop    ebx
c0001d8a:	5e                   	pop    esi
c0001d8b:	5f                   	pop    edi
c0001d8c:	5d                   	pop    ebp
c0001d8d:	c3                   	ret    

c0001d8e <gen_numname>:
c0001d8e:	57                   	push   edi
c0001d8f:	89 cf                	mov    edi,ecx
c0001d91:	56                   	push   esi
c0001d92:	b9 0b 00 00 00       	mov    ecx,0xb
c0001d97:	53                   	push   ebx
c0001d98:	89 c6                	mov    esi,eax
c0001d9a:	83 ec 10             	sub    esp,0x10
c0001d9d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001da1:	e8 67 fc ff ff       	call   c0001a0d <mem_cpy>
c0001da6:	83 fb 05             	cmp    ebx,0x5
c0001da9:	76 2d                	jbe    c0001dd8 <gen_numname+0x4a>
c0001dab:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001dae:	66 85 c0             	test   ax,ax
c0001db1:	74 25                	je     c0001dd8 <gen_numname+0x4a>
c0001db3:	83 c7 02             	add    edi,0x2
c0001db6:	ba 10 00 00 00       	mov    edx,0x10
c0001dbb:	01 db                	add    ebx,ebx
c0001dbd:	89 c1                	mov    ecx,eax
c0001dbf:	66 d1 e8             	shr    ax,1
c0001dc2:	83 e1 01             	and    ecx,0x1
c0001dc5:	01 cb                	add    ebx,ecx
c0001dc7:	0f ba e3 10          	bt     ebx,0x10
c0001dcb:	73 06                	jae    c0001dd3 <gen_numname+0x45>
c0001dcd:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001dd3:	4a                   	dec    edx
c0001dd4:	75 e5                	jne    c0001dbb <gen_numname+0x2d>
c0001dd6:	eb d3                	jmp    c0001dab <gen_numname+0x1d>
c0001dd8:	b8 07 00 00 00       	mov    eax,0x7
c0001ddd:	88 d9                	mov    cl,bl
c0001ddf:	83 e1 0f             	and    ecx,0xf
c0001de2:	8d 51 30             	lea    edx,[ecx+0x30]
c0001de5:	80 fa 39             	cmp    dl,0x39
c0001de8:	76 03                	jbe    c0001ded <gen_numname+0x5f>
c0001dea:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ded:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001df0:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001df4:	89 da                	mov    edx,ebx
c0001df6:	c1 ea 04             	shr    edx,0x4
c0001df9:	83 fb 0f             	cmp    ebx,0xf
c0001dfc:	76 06                	jbe    c0001e04 <gen_numname+0x76>
c0001dfe:	89 c8                	mov    eax,ecx
c0001e00:	89 d3                	mov    ebx,edx
c0001e02:	eb d9                	jmp    c0001ddd <gen_numname+0x4f>
c0001e04:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e09:	31 d2                	xor    edx,edx
c0001e0b:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e0e:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e11:	39 ca                	cmp    edx,ecx
c0001e13:	73 18                	jae    c0001e2d <gen_numname+0x9f>
c0001e15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e18:	3c 20                	cmp    al,0x20
c0001e1a:	74 11                	je     c0001e2d <gen_numname+0x9f>
c0001e1c:	e8 41 fc ff ff       	call   c0001a62 <dbc_1st>
c0001e21:	85 c0                	test   eax,eax
c0001e23:	74 05                	je     c0001e2a <gen_numname+0x9c>
c0001e25:	39 d3                	cmp    ebx,edx
c0001e27:	74 04                	je     c0001e2d <gen_numname+0x9f>
c0001e29:	42                   	inc    edx
c0001e2a:	42                   	inc    edx
c0001e2b:	eb e1                	jmp    c0001e0e <gen_numname+0x80>
c0001e2d:	b0 20                	mov    al,0x20
c0001e2f:	83 f9 07             	cmp    ecx,0x7
c0001e32:	77 05                	ja     c0001e39 <gen_numname+0xab>
c0001e34:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001e38:	41                   	inc    ecx
c0001e39:	42                   	inc    edx
c0001e3a:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001e3e:	83 fa 07             	cmp    edx,0x7
c0001e41:	76 ea                	jbe    c0001e2d <gen_numname+0x9f>
c0001e43:	83 c4 10             	add    esp,0x10
c0001e46:	5b                   	pop    ebx
c0001e47:	5e                   	pop    esi
c0001e48:	5f                   	pop    edi
c0001e49:	c3                   	ret    

c0001e4a <sum_sfn>:
c0001e4a:	31 c9                	xor    ecx,ecx
c0001e4c:	31 d2                	xor    edx,edx
c0001e4e:	d0 ca                	ror    dl,1
c0001e50:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001e53:	41                   	inc    ecx
c0001e54:	83 f9 0b             	cmp    ecx,0xb
c0001e57:	75 f5                	jne    c0001e4e <sum_sfn+0x4>
c0001e59:	88 d0                	mov    al,dl
c0001e5b:	c3                   	ret    

c0001e5c <xdir_sum>:
c0001e5c:	56                   	push   esi
c0001e5d:	31 c9                	xor    ecx,ecx
c0001e5f:	53                   	push   ebx
c0001e60:	31 d2                	xor    edx,edx
c0001e62:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001e66:	43                   	inc    ebx
c0001e67:	c1 e3 05             	shl    ebx,0x5
c0001e6a:	83 fa 02             	cmp    edx,0x2
c0001e6d:	74 0b                	je     c0001e7a <xdir_sum+0x1e>
c0001e6f:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001e73:	66 d1 c9             	ror    cx,1
c0001e76:	01 f1                	add    ecx,esi
c0001e78:	eb 05                	jmp    c0001e7f <xdir_sum+0x23>
c0001e7a:	ba 03 00 00 00       	mov    edx,0x3
c0001e7f:	42                   	inc    edx
c0001e80:	39 d3                	cmp    ebx,edx
c0001e82:	77 e6                	ja     c0001e6a <xdir_sum+0xe>
c0001e84:	89 c8                	mov    eax,ecx
c0001e86:	5b                   	pop    ebx
c0001e87:	5e                   	pop    esi
c0001e88:	c3                   	ret    

c0001e89 <xsum32>:
c0001e89:	d1 ca                	ror    edx,1
c0001e8b:	0f b6 c0             	movzx  eax,al
c0001e8e:	01 d0                	add    eax,edx
c0001e90:	c3                   	ret    

c0001e91 <get_xfileinfo>:
c0001e91:	55                   	push   ebp
c0001e92:	31 c9                	xor    ecx,ecx
c0001e94:	57                   	push   edi
c0001e95:	bd 40 00 00 00       	mov    ebp,0x40
c0001e9a:	56                   	push   esi
c0001e9b:	31 ff                	xor    edi,edi
c0001e9d:	53                   	push   ebx
c0001e9e:	89 c6                	mov    esi,eax
c0001ea0:	83 ec 0c             	sub    esp,0xc
c0001ea3:	89 d3                	mov    ebx,edx
c0001ea5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001eac:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001eb0:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001eb3:	76 6d                	jbe    c0001f22 <get_xfileinfo+0x91>
c0001eb5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001ebb:	76 0b                	jbe    c0001ec8 <get_xfileinfo+0x37>
c0001ebd:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001ec1:	bf 01 00 00 00       	mov    edi,0x1
c0001ec6:	eb 63                	jmp    c0001f2b <get_xfileinfo+0x9a>
c0001ec8:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001ece:	75 03                	jne    c0001ed3 <get_xfileinfo+0x42>
c0001ed0:	83 c5 02             	add    ebp,0x2
c0001ed3:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001ed6:	83 c5 02             	add    ebp,0x2
c0001ed9:	e8 b0 fa ff ff       	call   c000198e <ld_word>
c0001ede:	ff 04 24             	inc    DWORD PTR [esp]
c0001ee1:	66 85 c9             	test   cx,cx
c0001ee4:	75 0d                	jne    c0001ef3 <get_xfileinfo+0x62>
c0001ee6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001eec:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001ef1:	76 2b                	jbe    c0001f1e <get_xfileinfo+0x8d>
c0001ef3:	c1 e1 10             	shl    ecx,0x10
c0001ef6:	ba ff 00 00 00       	mov    edx,0xff
c0001efb:	0f b7 c0             	movzx  eax,ax
c0001efe:	29 fa                	sub    edx,edi
c0001f00:	09 c8                	or     eax,ecx
c0001f02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f06:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f0a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f0e:	e8 1b fc ff ff       	call   c0001b2e <put_utf>
c0001f13:	84 c0                	test   al,al
c0001f15:	74 a6                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f17:	0f b6 c0             	movzx  eax,al
c0001f1a:	01 c7                	add    edi,eax
c0001f1c:	31 c0                	xor    eax,eax
c0001f1e:	89 c1                	mov    ecx,eax
c0001f20:	eb 8a                	jmp    c0001eac <get_xfileinfo+0x1b>
c0001f22:	85 ff                	test   edi,edi
c0001f24:	74 97                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f26:	66 85 c9             	test   cx,cx
c0001f29:	75 92                	jne    c0001ebd <get_xfileinfo+0x2c>
c0001f2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001f30:	31 c0                	xor    eax,eax
c0001f32:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001f36:	31 d2                	xor    edx,edx
c0001f38:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001f3b:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001f3e:	80 e1 10             	and    cl,0x10
c0001f41:	75 08                	jne    c0001f4b <get_xfileinfo+0xba>
c0001f43:	8d 46 38             	lea    eax,[esi+0x38]
c0001f46:	e8 68 fa ff ff       	call   c00019b3 <ld_qword>
c0001f4b:	89 03                	mov    DWORD PTR [ebx],eax
c0001f4d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001f50:	8d 46 0c             	lea    eax,[esi+0xc]
c0001f53:	e8 36 fa ff ff       	call   c000198e <ld_word>
c0001f58:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001f5c:	8d 46 0e             	lea    eax,[esi+0xe]
c0001f5f:	e8 2a fa ff ff       	call   c000198e <ld_word>
c0001f64:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001f68:	83 c4 0c             	add    esp,0xc
c0001f6b:	5b                   	pop    ebx
c0001f6c:	5e                   	pop    esi
c0001f6d:	5f                   	pop    edi
c0001f6e:	5d                   	pop    ebp
c0001f6f:	c3                   	ret    

c0001f70 <get_ldnumber>:
c0001f70:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f72:	85 d2                	test   edx,edx
c0001f74:	74 14                	je     c0001f8a <get_ldnumber+0x1a>
c0001f76:	56                   	push   esi
c0001f77:	53                   	push   ebx
c0001f78:	89 d3                	mov    ebx,edx
c0001f7a:	43                   	inc    ebx
c0001f7b:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f7e:	80 f9 1f             	cmp    cl,0x1f
c0001f81:	76 0d                	jbe    c0001f90 <get_ldnumber+0x20>
c0001f83:	80 f9 3a             	cmp    cl,0x3a
c0001f86:	75 f2                	jne    c0001f7a <get_ldnumber+0xa>
c0001f88:	eb 0a                	jmp    c0001f94 <get_ldnumber+0x24>
c0001f8a:	83 c9 ff             	or     ecx,0xffffffff
c0001f8d:	89 c8                	mov    eax,ecx
c0001f8f:	c3                   	ret    
c0001f90:	31 c9                	xor    ecx,ecx
c0001f92:	eb 24                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001f94:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001f97:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001f9a:	80 f9 09             	cmp    cl,0x9
c0001f9d:	77 16                	ja     c0001fb5 <get_ldnumber+0x45>
c0001f9f:	83 c2 02             	add    edx,0x2
c0001fa2:	83 c9 ff             	or     ecx,0xffffffff
c0001fa5:	39 d3                	cmp    ebx,edx
c0001fa7:	75 0f                	jne    c0001fb8 <get_ldnumber+0x48>
c0001fa9:	89 f2                	mov    edx,esi
c0001fab:	89 18                	mov    DWORD PTR [eax],ebx
c0001fad:	0f be ca             	movsx  ecx,dl
c0001fb0:	83 e9 30             	sub    ecx,0x30
c0001fb3:	eb 03                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001fb5:	83 c9 ff             	or     ecx,0xffffffff
c0001fb8:	89 c8                	mov    eax,ecx
c0001fba:	5b                   	pop    ebx
c0001fbb:	5e                   	pop    esi
c0001fbc:	c3                   	ret    

c0001fbd <crc32>:
c0001fbd:	56                   	push   esi
c0001fbe:	89 d6                	mov    esi,edx
c0001fc0:	53                   	push   ebx
c0001fc1:	b2 01                	mov    dl,0x1
c0001fc3:	bb 08 00 00 00       	mov    ebx,0x8
c0001fc8:	89 f1                	mov    ecx,esi
c0001fca:	84 d1                	test   cl,dl
c0001fcc:	0f 95 c1             	setne  cl
c0001fcf:	0f b6 c9             	movzx  ecx,cl
c0001fd2:	31 c1                	xor    ecx,eax
c0001fd4:	89 c8                	mov    eax,ecx
c0001fd6:	d1 e8                	shr    eax,1
c0001fd8:	80 e1 01             	and    cl,0x1
c0001fdb:	74 05                	je     c0001fe2 <crc32+0x25>
c0001fdd:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0001fe2:	d1 e2                	shl    edx,1
c0001fe4:	4b                   	dec    ebx
c0001fe5:	75 e1                	jne    c0001fc8 <crc32+0xb>
c0001fe7:	5b                   	pop    ebx
c0001fe8:	5e                   	pop    esi
c0001fe9:	c3                   	ret    

c0001fea <test_gpt_header>:
c0001fea:	55                   	push   ebp
c0001feb:	b9 10 00 00 00       	mov    ecx,0x10
c0001ff0:	57                   	push   edi
c0001ff1:	ba 00 f5 01 c0       	mov    edx,0xc001f500
c0001ff6:	56                   	push   esi
c0001ff7:	31 ff                	xor    edi,edi
c0001ff9:	53                   	push   ebx
c0001ffa:	89 c3                	mov    ebx,eax
c0001ffc:	e8 2c fa ff ff       	call   c0001a2d <mem_cmp>
c0002001:	85 c0                	test   eax,eax
c0002003:	75 55                	jne    c000205a <test_gpt_header+0x70>
c0002005:	89 c7                	mov    edi,eax
c0002007:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000200c:	83 ce ff             	or     esi,0xffffffff
c000200f:	31 d2                	xor    edx,edx
c0002011:	83 fd 03             	cmp    ebp,0x3
c0002014:	76 05                	jbe    c000201b <test_gpt_header+0x31>
c0002016:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000201b:	89 f0                	mov    eax,esi
c000201d:	45                   	inc    ebp
c000201e:	e8 9a ff ff ff       	call   c0001fbd <crc32>
c0002023:	83 fd 4c             	cmp    ebp,0x4c
c0002026:	89 c6                	mov    esi,eax
c0002028:	75 e5                	jne    c000200f <test_gpt_header+0x25>
c000202a:	8d 43 10             	lea    eax,[ebx+0x10]
c000202d:	f7 d6                	not    esi
c000202f:	e8 67 f9 ff ff       	call   c000199b <ld_dword>
c0002034:	39 c6                	cmp    esi,eax
c0002036:	75 22                	jne    c000205a <test_gpt_header+0x70>
c0002038:	8d 43 54             	lea    eax,[ebx+0x54]
c000203b:	e8 5b f9 ff ff       	call   c000199b <ld_dword>
c0002040:	83 c0 80             	add    eax,0xffffff80
c0002043:	75 15                	jne    c000205a <test_gpt_header+0x70>
c0002045:	8d 43 50             	lea    eax,[ebx+0x50]
c0002048:	e8 4e f9 ff ff       	call   c000199b <ld_dword>
c000204d:	3d 80 00 00 00       	cmp    eax,0x80
c0002052:	0f 96 c0             	setbe  al
c0002055:	0f b6 c0             	movzx  eax,al
c0002058:	89 c7                	mov    edi,eax
c000205a:	5b                   	pop    ebx
c000205b:	89 f8                	mov    eax,edi
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <make_rand>:
c0002061:	56                   	push   esi
c0002062:	85 c0                	test   eax,eax
c0002064:	53                   	push   ebx
c0002065:	75 05                	jne    c000206c <make_rand+0xb>
c0002067:	b8 01 00 00 00       	mov    eax,0x1
c000206c:	01 d1                	add    ecx,edx
c000206e:	bb 08 00 00 00       	mov    ebx,0x8
c0002073:	89 c6                	mov    esi,eax
c0002075:	d1 e8                	shr    eax,1
c0002077:	83 e6 01             	and    esi,0x1
c000207a:	85 f6                	test   esi,esi
c000207c:	74 05                	je     c0002083 <make_rand+0x22>
c000207e:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002083:	4b                   	dec    ebx
c0002084:	75 ed                	jne    c0002073 <make_rand+0x12>
c0002086:	42                   	inc    edx
c0002087:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000208a:	39 ca                	cmp    edx,ecx
c000208c:	75 e0                	jne    c000206e <make_rand+0xd>
c000208e:	5b                   	pop    ebx
c000208f:	5e                   	pop    esi
c0002090:	c3                   	ret    

c0002091 <validate>:
c0002091:	56                   	push   esi
c0002092:	53                   	push   ebx
c0002093:	89 d6                	mov    esi,edx
c0002095:	51                   	push   ecx
c0002096:	85 c0                	test   eax,eax
c0002098:	75 09                	jne    c00020a3 <validate+0x12>
c000209a:	b8 09 00 00 00       	mov    eax,0x9
c000209f:	31 c9                	xor    ecx,ecx
c00020a1:	eb 2f                	jmp    c00020d2 <validate+0x41>
c00020a3:	89 c3                	mov    ebx,eax
c00020a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00020a7:	85 c0                	test   eax,eax
c00020a9:	74 ef                	je     c000209a <validate+0x9>
c00020ab:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00020ae:	74 ea                	je     c000209a <validate+0x9>
c00020b0:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00020b4:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00020b8:	75 e0                	jne    c000209a <validate+0x9>
c00020ba:	83 ec 0c             	sub    esp,0xc
c00020bd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020c1:	50                   	push   eax
c00020c2:	e8 76 f8 ff ff       	call   c000193d <disk_status>
c00020c7:	83 c4 10             	add    esp,0x10
c00020ca:	a8 01                	test   al,0x1
c00020cc:	75 cc                	jne    c000209a <validate+0x9>
c00020ce:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00020d0:	31 c0                	xor    eax,eax
c00020d2:	89 0e                	mov    DWORD PTR [esi],ecx
c00020d4:	5a                   	pop    edx
c00020d5:	5b                   	pop    ebx
c00020d6:	5e                   	pop    esi
c00020d7:	c3                   	ret    

c00020d8 <sync_window>:
c00020d8:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00020dc:	0f 84 85 00 00 00    	je     c0002167 <sync_window+0x8f>
c00020e2:	55                   	push   ebp
c00020e3:	8d 68 54             	lea    ebp,[eax+0x54]
c00020e6:	57                   	push   edi
c00020e7:	56                   	push   esi
c00020e8:	53                   	push   ebx
c00020e9:	89 c3                	mov    ebx,eax
c00020eb:	83 ec 28             	sub    esp,0x28
c00020ee:	6a 01                	push   0x1
c00020f0:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00020f3:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00020f6:	55                   	push   ebp
c00020f7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020fb:	50                   	push   eax
c00020fc:	e8 58 f8 ff ff       	call   c0001959 <disk_write>
c0002101:	83 c4 20             	add    esp,0x20
c0002104:	ba 01 00 00 00       	mov    edx,0x1
c0002109:	85 c0                	test   eax,eax
c000210b:	75 50                	jne    c000215d <sync_window+0x85>
c000210d:	31 ff                	xor    edi,edi
c000210f:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002112:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002116:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000211a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000211d:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002120:	89 c6                	mov    esi,eax
c0002122:	89 d7                	mov    edi,edx
c0002124:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002127:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000212b:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000212e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002132:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002136:	73 23                	jae    c000215b <sync_window+0x83>
c0002138:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000213c:	75 1d                	jne    c000215b <sync_window+0x83>
c000213e:	83 ec 0c             	sub    esp,0xc
c0002141:	6a 01                	push   0x1
c0002143:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002147:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000214b:	52                   	push   edx
c000214c:	50                   	push   eax
c000214d:	55                   	push   ebp
c000214e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002152:	50                   	push   eax
c0002153:	e8 01 f8 ff ff       	call   c0001959 <disk_write>
c0002158:	83 c4 20             	add    esp,0x20
c000215b:	31 d2                	xor    edx,edx
c000215d:	83 c4 1c             	add    esp,0x1c
c0002160:	89 d0                	mov    eax,edx
c0002162:	5b                   	pop    ebx
c0002163:	5e                   	pop    esi
c0002164:	5f                   	pop    edi
c0002165:	5d                   	pop    ebp
c0002166:	c3                   	ret    
c0002167:	31 d2                	xor    edx,edx
c0002169:	89 d0                	mov    eax,edx
c000216b:	c3                   	ret    

c000216c <move_window>:
c000216c:	56                   	push   esi
c000216d:	53                   	push   ebx
c000216e:	89 c3                	mov    ebx,eax
c0002170:	83 ec 14             	sub    esp,0x14
c0002173:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002176:	75 07                	jne    c000217f <move_window+0x13>
c0002178:	31 f6                	xor    esi,esi
c000217a:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000217d:	74 59                	je     c00021d8 <move_window+0x6c>
c000217f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002183:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002187:	89 d8                	mov    eax,ebx
c0002189:	e8 4a ff ff ff       	call   c00020d8 <sync_window>
c000218e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002192:	89 c6                	mov    esi,eax
c0002194:	85 c0                	test   eax,eax
c0002196:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000219a:	75 3c                	jne    c00021d8 <move_window+0x6c>
c000219c:	83 ec 0c             	sub    esp,0xc
c000219f:	8d 43 54             	lea    eax,[ebx+0x54]
c00021a2:	6a 01                	push   0x1
c00021a4:	51                   	push   ecx
c00021a5:	52                   	push   edx
c00021a6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00021aa:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00021ae:	50                   	push   eax
c00021af:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021b3:	50                   	push   eax
c00021b4:	e8 8a f7 ff ff       	call   c0001943 <disk_read>
c00021b9:	83 c4 20             	add    esp,0x20
c00021bc:	85 c0                	test   eax,eax
c00021be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00021c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021c6:	74 0a                	je     c00021d2 <move_window+0x66>
c00021c8:	83 ca ff             	or     edx,0xffffffff
c00021cb:	be 01 00 00 00       	mov    esi,0x1
c00021d0:	89 d1                	mov    ecx,edx
c00021d2:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00021d5:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00021d8:	89 f0                	mov    eax,esi
c00021da:	83 c4 14             	add    esp,0x14
c00021dd:	5b                   	pop    ebx
c00021de:	5e                   	pop    esi
c00021df:	c3                   	ret    

c00021e0 <check_fs>:
c00021e0:	53                   	push   ebx
c00021e1:	89 c3                	mov    ebx,eax
c00021e3:	83 ec 08             	sub    esp,0x8
c00021e6:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00021ea:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00021f1:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00021f8:	e8 6f ff ff ff       	call   c000216c <move_window>
c00021fd:	ba 04 00 00 00       	mov    edx,0x4
c0002202:	85 c0                	test   eax,eax
c0002204:	0f 85 89 00 00 00    	jne    c0002293 <check_fs+0xb3>
c000220a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002210:	e8 79 f7 ff ff       	call   c000198e <ld_word>
c0002215:	ba 03 00 00 00       	mov    edx,0x3
c000221a:	66 3d 55 aa          	cmp    ax,0xaa55
c000221e:	75 73                	jne    c0002293 <check_fs+0xb3>
c0002220:	ba 20 f6 01 c0       	mov    edx,0xc001f620
c0002225:	8d 43 54             	lea    eax,[ebx+0x54]
c0002228:	b9 0b 00 00 00       	mov    ecx,0xb
c000222d:	e8 fb f7 ff ff       	call   c0001a2d <mem_cmp>
c0002232:	ba 01 00 00 00       	mov    edx,0x1
c0002237:	85 c0                	test   eax,eax
c0002239:	74 58                	je     c0002293 <check_fs+0xb3>
c000223b:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000223e:	8d 50 18             	lea    edx,[eax+0x18]
c0002241:	80 fa 01             	cmp    dl,0x1
c0002244:	76 09                	jbe    c000224f <check_fs+0x6f>
c0002246:	ba 02 00 00 00       	mov    edx,0x2
c000224b:	3c eb                	cmp    al,0xeb
c000224d:	75 44                	jne    c0002293 <check_fs+0xb3>
c000224f:	ba 20 20 02 c0       	mov    edx,0xc0022020
c0002254:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000225a:	b9 03 00 00 00       	mov    ecx,0x3
c000225f:	e8 c9 f7 ff ff       	call   c0001a2d <mem_cmp>
c0002264:	31 d2                	xor    edx,edx
c0002266:	85 c0                	test   eax,eax
c0002268:	74 29                	je     c0002293 <check_fs+0xb3>
c000226a:	ba 2c f6 01 c0       	mov    edx,0xc001f62c
c000226f:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002275:	b9 05 00 00 00       	mov    ecx,0x5
c000227a:	e8 ae f7 ff ff       	call   c0001a2d <mem_cmp>
c000227f:	31 d2                	xor    edx,edx
c0002281:	85 c0                	test   eax,eax
c0002283:	74 0e                	je     c0002293 <check_fs+0xb3>
c0002285:	31 d2                	xor    edx,edx
c0002287:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000228e:	0f 95 c2             	setne  dl
c0002291:	01 d2                	add    edx,edx
c0002293:	89 d0                	mov    eax,edx
c0002295:	83 c4 08             	add    esp,0x8
c0002298:	5b                   	pop    ebx
c0002299:	c3                   	ret    

c000229a <find_volume>:
c000229a:	55                   	push   ebp
c000229b:	31 c9                	xor    ecx,ecx
c000229d:	57                   	push   edi
c000229e:	56                   	push   esi
c000229f:	89 d6                	mov    esi,edx
c00022a1:	53                   	push   ebx
c00022a2:	31 d2                	xor    edx,edx
c00022a4:	83 ec 3c             	sub    esp,0x3c
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	e8 32 ff ff ff       	call   c00021e0 <check_fs>
c00022ae:	83 f8 02             	cmp    eax,0x2
c00022b1:	74 0e                	je     c00022c1 <find_volume+0x27>
c00022b3:	0f 87 5d 01 00 00    	ja     c0002416 <find_volume+0x17c>
c00022b9:	85 f6                	test   esi,esi
c00022bb:	0f 84 55 01 00 00    	je     c0002416 <find_volume+0x17c>
c00022c1:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00022c8:	0f 85 dd 00 00 00    	jne    c00023ab <find_volume+0x111>
c00022ce:	31 c9                	xor    ecx,ecx
c00022d0:	ba 01 00 00 00       	mov    edx,0x1
c00022d5:	89 d8                	mov    eax,ebx
c00022d7:	e8 90 fe ff ff       	call   c000216c <move_window>
c00022dc:	85 c0                	test   eax,eax
c00022de:	74 0a                	je     c00022ea <find_volume+0x50>
c00022e0:	b8 04 00 00 00       	mov    eax,0x4
c00022e5:	e9 2c 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c00022ea:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00022ed:	89 e8                	mov    eax,ebp
c00022ef:	e8 f6 fc ff ff       	call   c0001fea <test_gpt_header>
c00022f4:	85 c0                	test   eax,eax
c00022f6:	75 0a                	jne    c0002302 <find_volume+0x68>
c00022f8:	b8 03 00 00 00       	mov    eax,0x3
c00022fd:	e9 14 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c0002302:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002308:	e8 8e f6 ff ff       	call   c000199b <ld_dword>
c000230d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002311:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002317:	e8 97 f6 ff ff       	call   c00019b3 <ld_qword>
c000231c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002324:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000232c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002334:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002338:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000233c:	74 ba                	je     c00022f8 <find_volume+0x5e>
c000233e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002342:	31 c9                	xor    ecx,ecx
c0002344:	c1 e7 07             	shl    edi,0x7
c0002347:	89 d8                	mov    eax,ebx
c0002349:	89 fa                	mov    edx,edi
c000234b:	c1 ea 09             	shr    edx,0x9
c000234e:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002352:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002356:	e8 11 fe ff ff       	call   c000216c <move_window>
c000235b:	85 c0                	test   eax,eax
c000235d:	75 81                	jne    c00022e0 <find_volume+0x46>
c000235f:	81 e7 80 01 00 00    	and    edi,0x180
c0002365:	b9 10 00 00 00       	mov    ecx,0x10
c000236a:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000236e:	ba 10 f6 01 c0       	mov    edx,0xc001f610
c0002373:	e8 b5 f6 ff ff       	call   c0001a2d <mem_cmp>
c0002378:	85 c0                	test   eax,eax
c000237a:	75 29                	jne    c00023a5 <find_volume+0x10b>
c000237c:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002380:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002384:	e8 2a f6 ff ff       	call   c00019b3 <ld_qword>
c0002389:	89 d1                	mov    ecx,edx
c000238b:	89 c2                	mov    edx,eax
c000238d:	89 d8                	mov    eax,ebx
c000238f:	e8 4c fe ff ff       	call   c00021e0 <check_fs>
c0002394:	85 f6                	test   esi,esi
c0002396:	75 07                	jne    c000239f <find_volume+0x105>
c0002398:	83 f8 01             	cmp    eax,0x1
c000239b:	77 08                	ja     c00023a5 <find_volume+0x10b>
c000239d:	eb 77                	jmp    c0002416 <find_volume+0x17c>
c000239f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00023a3:	74 71                	je     c0002416 <find_volume+0x17c>
c00023a5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00023a9:	eb 89                	jmp    c0002334 <find_volume+0x9a>
c00023ab:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00023af:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00023b5:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00023bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023bf:	89 cd                	mov    ebp,ecx
c00023c1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00023c5:	89 f8                	mov    eax,edi
c00023c7:	83 c7 10             	add    edi,0x10
c00023ca:	e8 cc f5 ff ff       	call   c000199b <ld_dword>
c00023cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00023d3:	89 01                	mov    DWORD PTR [ecx],eax
c00023d5:	83 c1 04             	add    ecx,0x4
c00023d8:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023dc:	75 e3                	jne    c00023c1 <find_volume+0x127>
c00023de:	31 ff                	xor    edi,edi
c00023e0:	85 f6                	test   esi,esi
c00023e2:	74 03                	je     c00023e7 <find_volume+0x14d>
c00023e4:	8d 7e ff             	lea    edi,[esi-0x1]
c00023e7:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00023eb:	85 d2                	test   edx,edx
c00023ed:	74 14                	je     c0002403 <find_volume+0x169>
c00023ef:	31 c9                	xor    ecx,ecx
c00023f1:	89 d8                	mov    eax,ebx
c00023f3:	e8 e8 fd ff ff       	call   c00021e0 <check_fs>
c00023f8:	83 f8 01             	cmp    eax,0x1
c00023fb:	76 19                	jbe    c0002416 <find_volume+0x17c>
c00023fd:	85 f6                	test   esi,esi
c00023ff:	74 0f                	je     c0002410 <find_volume+0x176>
c0002401:	eb 13                	jmp    c0002416 <find_volume+0x17c>
c0002403:	85 f6                	test   esi,esi
c0002405:	0f 85 ed fe ff ff    	jne    c00022f8 <find_volume+0x5e>
c000240b:	b8 03 00 00 00       	mov    eax,0x3
c0002410:	47                   	inc    edi
c0002411:	83 ff 03             	cmp    edi,0x3
c0002414:	76 d1                	jbe    c00023e7 <find_volume+0x14d>
c0002416:	83 c4 3c             	add    esp,0x3c
c0002419:	5b                   	pop    ebx
c000241a:	5e                   	pop    esi
c000241b:	5f                   	pop    edi
c000241c:	5d                   	pop    ebp
c000241d:	c3                   	ret    

c000241e <mount_volume>:
c000241e:	55                   	push   ebp
c000241f:	57                   	push   edi
c0002420:	89 cf                	mov    edi,ecx
c0002422:	56                   	push   esi
c0002423:	53                   	push   ebx
c0002424:	bb 0b 00 00 00       	mov    ebx,0xb
c0002429:	83 ec 3c             	sub    esp,0x3c
c000242c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002432:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002436:	e8 35 fb ff ff       	call   c0001f70 <get_ldnumber>
c000243b:	85 c0                	test   eax,eax
c000243d:	0f 88 3a 05 00 00    	js     c000297d <mount_volume+0x55f>
c0002443:	8b 2c 85 a0 34 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdcb60]
c000244a:	89 c6                	mov    esi,eax
c000244c:	bb 0c 00 00 00       	mov    ebx,0xc
c0002451:	85 ed                	test   ebp,ebp
c0002453:	0f 84 24 05 00 00    	je     c000297d <mount_volume+0x55f>
c0002459:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245d:	83 e7 fe             	and    edi,0xfffffffe
c0002460:	89 2a                	mov    DWORD PTR [edx],ebp
c0002462:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002466:	74 32                	je     c000249a <mount_volume+0x7c>
c0002468:	83 ec 0c             	sub    esp,0xc
c000246b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000246f:	50                   	push   eax
c0002470:	e8 c8 f4 ff ff       	call   c000193d <disk_status>
c0002475:	83 c4 10             	add    esp,0x10
c0002478:	a8 01                	test   al,0x1
c000247a:	75 1e                	jne    c000249a <mount_volume+0x7c>
c000247c:	31 db                	xor    ebx,ebx
c000247e:	89 f9                	mov    ecx,edi
c0002480:	84 c9                	test   cl,cl
c0002482:	0f 84 f5 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002488:	a8 04                	test   al,0x4
c000248a:	0f 84 ed 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002490:	bb 0a 00 00 00       	mov    ebx,0xa
c0002495:	e9 e3 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c000249a:	83 ec 0c             	sub    esp,0xc
c000249d:	89 f0                	mov    eax,esi
c000249f:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00024a3:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c00024a6:	0f b6 f0             	movzx  esi,al
c00024a9:	bb 03 00 00 00       	mov    ebx,0x3
c00024ae:	56                   	push   esi
c00024af:	e8 8c f4 ff ff       	call   c0001940 <disk_initialize>
c00024b4:	83 c4 10             	add    esp,0x10
c00024b7:	a8 01                	test   al,0x1
c00024b9:	0f 85 be 04 00 00    	jne    c000297d <mount_volume+0x55f>
c00024bf:	89 f9                	mov    ecx,edi
c00024c1:	84 c9                	test   cl,cl
c00024c3:	74 04                	je     c00024c9 <mount_volume+0xab>
c00024c5:	a8 04                	test   al,0x4
c00024c7:	75 c7                	jne    c0002490 <mount_volume+0x72>
c00024c9:	31 d2                	xor    edx,edx
c00024cb:	89 e8                	mov    eax,ebp
c00024cd:	e8 c8 fd ff ff       	call   c000229a <find_volume>
c00024d2:	83 f8 04             	cmp    eax,0x4
c00024d5:	75 0a                	jne    c00024e1 <mount_volume+0xc3>
c00024d7:	bb 01 00 00 00       	mov    ebx,0x1
c00024dc:	e9 9c 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024e1:	83 f8 01             	cmp    eax,0x1
c00024e4:	76 0a                	jbe    c00024f0 <mount_volume+0xd2>
c00024e6:	bb 0d 00 00 00       	mov    ebx,0xd
c00024eb:	e9 8d 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024f0:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00024f3:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00024f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00024fe:	75 17                	jne    c0002517 <mount_volume+0xf9>
c0002500:	b8 0b 00 00 00       	mov    eax,0xb
c0002505:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000250a:	75 da                	jne    c00024e6 <mount_volume+0xc8>
c000250c:	40                   	inc    eax
c000250d:	83 f8 40             	cmp    eax,0x40
c0002510:	75 f3                	jne    c0002505 <mount_volume+0xe7>
c0002512:	e9 5a 02 00 00       	jmp    c0002771 <mount_volume+0x353>
c0002517:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000251a:	e8 6f f4 ff ff       	call   c000198e <ld_word>
c000251f:	66 3d 00 02          	cmp    ax,0x200
c0002523:	75 c1                	jne    c00024e6 <mount_volume+0xc8>
c0002525:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002528:	e8 61 f4 ff ff       	call   c000198e <ld_word>
c000252d:	0f b7 c0             	movzx  eax,ax
c0002530:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002534:	85 c0                	test   eax,eax
c0002536:	75 0c                	jne    c0002544 <mount_volume+0x126>
c0002538:	8d 45 78             	lea    eax,[ebp+0x78]
c000253b:	e8 5b f4 ff ff       	call   c000199b <ld_dword>
c0002540:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002548:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000254b:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000254e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002552:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002555:	48                   	dec    eax
c0002556:	3c 01                	cmp    al,0x1
c0002558:	77 8c                	ja     c00024e6 <mount_volume+0xc8>
c000255a:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000255e:	89 c3                	mov    ebx,eax
c0002560:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002564:	66 85 c0             	test   ax,ax
c0002567:	0f 84 79 ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c000256d:	8d 40 ff             	lea    eax,[eax-0x1]
c0002570:	85 d8                	test   eax,ebx
c0002572:	0f 85 6e ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002578:	8d 45 65             	lea    eax,[ebp+0x65]
c000257b:	e8 0e f4 ff ff       	call   c000198e <ld_word>
c0002580:	89 c7                	mov    edi,eax
c0002582:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002586:	a8 0f                	test   al,0xf
c0002588:	0f 85 58 ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c000258e:	8d 45 67             	lea    eax,[ebp+0x67]
c0002591:	e8 f8 f3 ff ff       	call   c000198e <ld_word>
c0002596:	0f b7 f0             	movzx  esi,ax
c0002599:	85 f6                	test   esi,esi
c000259b:	75 0a                	jne    c00025a7 <mount_volume+0x189>
c000259d:	8d 45 74             	lea    eax,[ebp+0x74]
c00025a0:	e8 f6 f3 ff ff       	call   c000199b <ld_dword>
c00025a5:	89 c6                	mov    esi,eax
c00025a7:	8d 45 62             	lea    eax,[ebp+0x62]
c00025aa:	e8 df f3 ff ff       	call   c000198e <ld_word>
c00025af:	66 85 c0             	test   ax,ax
c00025b2:	0f 84 2e ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c00025b8:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00025bd:	0f b7 c8             	movzx  ecx,ax
c00025c0:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00025c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00025c9:	89 fa                	mov    edx,edi
c00025cb:	66 c1 ea 04          	shr    dx,0x4
c00025cf:	0f b7 d2             	movzx  edx,dx
c00025d2:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00025d6:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00025d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025dd:	39 c6                	cmp    esi,eax
c00025df:	0f 82 01 ff ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025e5:	29 c6                	sub    esi,eax
c00025e7:	31 d2                	xor    edx,edx
c00025e9:	89 f0                	mov    eax,esi
c00025eb:	f7 f3                	div    ebx
c00025ed:	39 de                	cmp    esi,ebx
c00025ef:	0f 82 f1 fe ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025f5:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00025fa:	0f 87 e6 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c0002600:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002605:	0f 86 63 03 00 00    	jbe    c000296e <mount_volume+0x550>
c000260b:	bb 03 00 00 00       	mov    ebx,0x3
c0002610:	8d 70 02             	lea    esi,[eax+0x2]
c0002613:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000261b:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000261e:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002621:	31 d2                	xor    edx,edx
c0002623:	89 c8                	mov    eax,ecx
c0002625:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002628:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000262c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002630:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002634:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002638:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000263b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000263e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002642:	31 d2                	xor    edx,edx
c0002644:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002648:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000264c:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000264f:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002652:	83 fb 03             	cmp    ebx,0x3
c0002655:	75 2b                	jne    c0002682 <mount_volume+0x264>
c0002657:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000265a:	e8 2f f3 ff ff       	call   c000198e <ld_word>
c000265f:	66 09 c7             	or     di,ax
c0002662:	0f 85 7e fe ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002668:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000266e:	c1 e6 02             	shl    esi,0x2
c0002671:	e8 25 f3 ff ff       	call   c000199b <ld_dword>
c0002676:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000267d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002680:	eb 30                	jmp    c00026b2 <mount_volume+0x294>
c0002682:	66 85 ff             	test   di,di
c0002685:	0f 84 5b fe ff ff    	je     c00024e6 <mount_volume+0xc8>
c000268b:	31 d2                	xor    edx,edx
c000268d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002691:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002695:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002699:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000269c:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000269f:	83 fb 02             	cmp    ebx,0x2
c00026a2:	75 04                	jne    c00026a8 <mount_volume+0x28a>
c00026a4:	01 f6                	add    esi,esi
c00026a6:	eb 0a                	jmp    c00026b2 <mount_volume+0x294>
c00026a8:	8d 04 76             	lea    eax,[esi+esi*2]
c00026ab:	83 e6 01             	and    esi,0x1
c00026ae:	d1 e8                	shr    eax,1
c00026b0:	01 c6                	add    esi,eax
c00026b2:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00026b8:	c1 ee 09             	shr    esi,0x9
c00026bb:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026bf:	0f 87 21 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00026c5:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00026cc:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00026d3:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00026d7:	83 fb 03             	cmp    ebx,0x3
c00026da:	75 7a                	jne    c0002756 <mount_volume+0x338>
c00026dc:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00026e2:	e8 a7 f2 ff ff       	call   c000198e <ld_word>
c00026e7:	66 48                	dec    ax
c00026e9:	75 6b                	jne    c0002756 <mount_volume+0x338>
c00026eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026f3:	83 c2 01             	add    edx,0x1
c00026f6:	89 e8                	mov    eax,ebp
c00026f8:	83 d1 00             	adc    ecx,0x0
c00026fb:	e8 6c fa ff ff       	call   c000216c <move_window>
c0002700:	85 c0                	test   eax,eax
c0002702:	75 52                	jne    c0002756 <mount_volume+0x338>
c0002704:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c0002708:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c000270e:	e8 7b f2 ff ff       	call   c000198e <ld_word>
c0002713:	66 3d 55 aa          	cmp    ax,0xaa55
c0002717:	75 3d                	jne    c0002756 <mount_volume+0x338>
c0002719:	8d 45 54             	lea    eax,[ebp+0x54]
c000271c:	e8 7a f2 ff ff       	call   c000199b <ld_dword>
c0002721:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002726:	75 2e                	jne    c0002756 <mount_volume+0x338>
c0002728:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000272e:	e8 68 f2 ff ff       	call   c000199b <ld_dword>
c0002733:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002738:	75 1c                	jne    c0002756 <mount_volume+0x338>
c000273a:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002740:	e8 56 f2 ff ff       	call   c000199b <ld_dword>
c0002745:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002748:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000274e:	e8 48 f2 ff ff       	call   c000199b <ld_dword>
c0002753:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002756:	66 a1 80 34 02 c0    	mov    ax,ds:0xc0023480
c000275c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000275f:	40                   	inc    eax
c0002760:	31 db                	xor    ebx,ebx
c0002762:	66 a3 80 34 02 c0    	mov    ds:0xc0023480,ax
c0002768:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000276c:	e9 0c 02 00 00       	jmp    c000297d <mount_volume+0x55f>
c0002771:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002777:	e8 12 f2 ff ff       	call   c000198e <ld_word>
c000277c:	66 3d 00 01          	cmp    ax,0x100
c0002780:	0f 85 60 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002786:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000278d:	0f 85 53 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002793:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002799:	e8 15 f2 ff ff       	call   c00019b3 <ld_qword>
c000279e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00027a6:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c00027ac:	e8 ea f1 ff ff       	call   c000199b <ld_dword>
c00027b1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027b4:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00027ba:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027bd:	fe c8                	dec    al
c00027bf:	0f 85 21 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c00027c5:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00027cc:	bb 01 00 00 00       	mov    ebx,0x1
c00027d1:	d3 e3                	shl    ebx,cl
c00027d3:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00027d7:	66 85 db             	test   bx,bx
c00027da:	0f 84 06 fd ff ff    	je     c00024e6 <mount_volume+0xc8>
c00027e0:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00027e6:	e8 b0 f1 ff ff       	call   c000199b <ld_dword>
c00027eb:	89 c6                	mov    esi,eax
c00027ed:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00027f2:	0f 87 ee fc ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00027f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027fc:	8d 40 02             	lea    eax,[eax+0x2]
c00027ff:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002802:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002805:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002809:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000280c:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002812:	e8 84 f1 ff ff       	call   c000199b <ld_dword>
c0002817:	31 d2                	xor    edx,edx
c0002819:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000281d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002821:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002825:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002829:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000282c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000282f:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002835:	e8 61 f1 ff ff       	call   c000199b <ld_dword>
c000283a:	31 d2                	xor    edx,edx
c000283c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002840:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002844:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002848:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000284b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000284e:	0f b7 c3             	movzx  eax,bx
c0002851:	31 d2                	xor    edx,edx
c0002853:	0f af f0             	imul   esi,eax
c0002856:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000285a:	89 f0                	mov    eax,esi
c000285c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002860:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002864:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002868:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000286c:	39 c1                	cmp    ecx,eax
c000286e:	89 df                	mov    edi,ebx
c0002870:	19 d7                	sbb    edi,edx
c0002872:	0f 82 6e fc ff ff    	jb     c00024e6 <mount_volume+0xc8>
c0002878:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000287e:	31 db                	xor    ebx,ebx
c0002880:	e8 16 f1 ff ff       	call   c000199b <ld_dword>
c0002885:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000288c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000288f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002897:	85 db                	test   ebx,ebx
c0002899:	75 39                	jne    c00028d4 <mount_volume+0x4b6>
c000289b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000289f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00028a3:	0f 86 3d fc ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028a9:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c00028ac:	31 ff                	xor    edi,edi
c00028ae:	89 e8                	mov    eax,ebp
c00028b0:	e8 72 f3 ff ff       	call   c0001c27 <clst2sect>
c00028b5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028b9:	01 c6                	add    esi,eax
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	11 d7                	adc    edi,edx
c00028bf:	89 f2                	mov    edx,esi
c00028c1:	89 f9                	mov    ecx,edi
c00028c3:	e8 a4 f8 ff ff       	call   c000216c <move_window>
c00028c8:	85 c0                	test   eax,eax
c00028ca:	0f 85 07 fc ff ff    	jne    c00024d7 <mount_volume+0xb9>
c00028d0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00028d4:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00028d9:	74 0b                	je     c00028e6 <mount_volume+0x4c8>
c00028db:	83 c3 20             	add    ebx,0x20
c00028de:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00028e4:	eb b1                	jmp    c0002897 <mount_volume+0x479>
c00028e6:	8d 75 54             	lea    esi,[ebp+0x54]
c00028e9:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00028ed:	e8 a9 f0 ff ff       	call   c000199b <ld_dword>
c00028f2:	89 c3                	mov    ebx,eax
c00028f4:	83 f8 01             	cmp    eax,0x1
c00028f7:	0f 86 e9 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028fd:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002900:	0f 86 e0 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c0002906:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002909:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000290d:	0f af c2             	imul   eax,edx
c0002910:	31 d2                	xor    edx,edx
c0002912:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002915:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002918:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000291b:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c000291e:	31 c9                	xor    ecx,ecx
c0002920:	89 da                	mov    edx,ebx
c0002922:	89 e8                	mov    eax,ebp
c0002924:	c1 ea 07             	shr    edx,0x7
c0002927:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000292a:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c000292d:	e8 3a f8 ff ff       	call   c000216c <move_window>
c0002932:	85 c0                	test   eax,eax
c0002934:	0f 85 9d fb ff ff    	jne    c00024d7 <mount_volume+0xb9>
c000293a:	89 d8                	mov    eax,ebx
c000293c:	83 e0 7f             	and    eax,0x7f
c000293f:	8d 04 86             	lea    eax,[esi+eax*4]
c0002942:	e8 54 f0 ff ff       	call   c000199b <ld_dword>
c0002947:	83 f8 ff             	cmp    eax,0xffffffff
c000294a:	74 0a                	je     c0002956 <mount_volume+0x538>
c000294c:	43                   	inc    ebx
c000294d:	39 d8                	cmp    eax,ebx
c000294f:	74 cd                	je     c000291e <mount_volume+0x500>
c0002951:	e9 90 fb ff ff       	jmp    c00024e6 <mount_volume+0xc8>
c0002956:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000295d:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002964:	bb 04 00 00 00       	mov    ebx,0x4
c0002969:	e9 e8 fd ff ff       	jmp    c0002756 <mount_volume+0x338>
c000296e:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002973:	19 db                	sbb    ebx,ebx
c0002975:	83 c3 02             	add    ebx,0x2
c0002978:	e9 93 fc ff ff       	jmp    c0002610 <mount_volume+0x1f2>
c000297d:	83 c4 3c             	add    esp,0x3c
c0002980:	89 d8                	mov    eax,ebx
c0002982:	5b                   	pop    ebx
c0002983:	5e                   	pop    esi
c0002984:	5f                   	pop    edi
c0002985:	5d                   	pop    ebp
c0002986:	c3                   	ret    

c0002987 <find_bitmap>:
c0002987:	55                   	push   ebp
c0002988:	57                   	push   edi
c0002989:	89 c7                	mov    edi,eax
c000298b:	56                   	push   esi
c000298c:	8d 72 fe             	lea    esi,[edx-0x2]
c000298f:	53                   	push   ebx
c0002990:	83 ec 1c             	sub    esp,0x1c
c0002993:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002996:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000299a:	83 e8 02             	sub    eax,0x2
c000299d:	39 f0                	cmp    eax,esi
c000299f:	77 02                	ja     c00029a3 <find_bitmap+0x1c>
c00029a1:	31 f6                	xor    esi,esi
c00029a3:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00029a7:	89 f3                	mov    ebx,esi
c00029a9:	31 ed                	xor    ebp,ebp
c00029ab:	31 c9                	xor    ecx,ecx
c00029ad:	89 da                	mov    edx,ebx
c00029af:	89 f8                	mov    eax,edi
c00029b1:	c1 ea 0c             	shr    edx,0xc
c00029b4:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c00029b7:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c00029ba:	e8 ad f7 ff ff       	call   c000216c <move_window>
c00029bf:	85 c0                	test   eax,eax
c00029c1:	75 68                	jne    c0002a2b <find_bitmap+0xa4>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	89 d9                	mov    ecx,ebx
c00029c7:	c1 ea 03             	shr    edx,0x3
c00029ca:	83 e1 07             	and    ecx,0x7
c00029cd:	b8 01 00 00 00       	mov    eax,0x1
c00029d2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00029d8:	d3 e0                	shl    eax,cl
c00029da:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c00029dd:	83 e9 02             	sub    ecx,0x2
c00029e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00029e4:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c00029e8:	43                   	inc    ebx
c00029e9:	21 c1                	and    ecx,eax
c00029eb:	d1 e0                	shl    eax,1
c00029ed:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c00029f1:	77 09                	ja     c00029fc <find_bitmap+0x75>
c00029f3:	31 db                	xor    ebx,ebx
c00029f5:	ba 00 02 00 00       	mov    edx,0x200
c00029fa:	31 c0                	xor    eax,eax
c00029fc:	84 c9                	test   cl,cl
c00029fe:	75 10                	jne    c0002a10 <find_bitmap+0x89>
c0002a00:	45                   	inc    ebp
c0002a01:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a05:	75 0f                	jne    c0002a16 <find_bitmap+0x8f>
c0002a07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a0b:	83 c0 02             	add    eax,0x2
c0002a0e:	eb 22                	jmp    c0002a32 <find_bitmap+0xab>
c0002a10:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a14:	31 ed                	xor    ebp,ebp
c0002a16:	39 de                	cmp    esi,ebx
c0002a18:	74 16                	je     c0002a30 <find_bitmap+0xa9>
c0002a1a:	84 c0                	test   al,al
c0002a1c:	75 c6                	jne    c00029e4 <find_bitmap+0x5d>
c0002a1e:	42                   	inc    edx
c0002a1f:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a25:	77 84                	ja     c00029ab <find_bitmap+0x24>
c0002a27:	b0 01                	mov    al,0x1
c0002a29:	eb b9                	jmp    c00029e4 <find_bitmap+0x5d>
c0002a2b:	83 c8 ff             	or     eax,0xffffffff
c0002a2e:	eb 02                	jmp    c0002a32 <find_bitmap+0xab>
c0002a30:	31 c0                	xor    eax,eax
c0002a32:	83 c4 1c             	add    esp,0x1c
c0002a35:	5b                   	pop    ebx
c0002a36:	5e                   	pop    esi
c0002a37:	5f                   	pop    edi
c0002a38:	5d                   	pop    ebp
c0002a39:	c3                   	ret    

c0002a3a <change_bitmap>:
c0002a3a:	55                   	push   ebp
c0002a3b:	89 cd                	mov    ebp,ecx
c0002a3d:	57                   	push   edi
c0002a3e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002a41:	56                   	push   esi
c0002a42:	89 c7                	mov    edi,eax
c0002a44:	53                   	push   ebx
c0002a45:	89 c8                	mov    eax,ecx
c0002a47:	83 ec 1c             	sub    esp,0x1c
c0002a4a:	31 d2                	xor    edx,edx
c0002a4c:	89 ce                	mov    esi,ecx
c0002a4e:	c1 e8 0c             	shr    eax,0xc
c0002a51:	bb 01 00 00 00       	mov    ebx,0x1
c0002a56:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002a59:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002a5c:	c1 ee 03             	shr    esi,0x3
c0002a5f:	83 e1 07             	and    ecx,0x7
c0002a62:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002a68:	d3 e3                	shl    ebx,cl
c0002a6a:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002a6e:	89 c1                	mov    ecx,eax
c0002a70:	89 d3                	mov    ebx,edx
c0002a72:	83 c1 01             	add    ecx,0x1
c0002a75:	83 d3 00             	adc    ebx,0x0
c0002a78:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a7c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002a80:	89 d1                	mov    ecx,edx
c0002a82:	89 c2                	mov    edx,eax
c0002a84:	89 f8                	mov    eax,edi
c0002a86:	e8 e1 f6 ff ff       	call   c000216c <move_window>
c0002a8b:	89 c1                	mov    ecx,eax
c0002a8d:	85 c0                	test   eax,eax
c0002a8f:	75 48                	jne    c0002ad9 <change_bitmap+0x9f>
c0002a91:	31 d2                	xor    edx,edx
c0002a93:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002a97:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002a9b:	0f 95 c2             	setne  dl
c0002a9e:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002aa2:	74 3c                	je     c0002ae0 <change_bitmap+0xa6>
c0002aa4:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002aa8:	4d                   	dec    ebp
c0002aa9:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002ab1:	74 32                	je     c0002ae5 <change_bitmap+0xab>
c0002ab3:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002ab7:	75 d8                	jne    c0002a91 <change_bitmap+0x57>
c0002ab9:	8d 46 01             	lea    eax,[esi+0x1]
c0002abc:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ac1:	89 c3                	mov    ebx,eax
c0002ac3:	31 f6                	xor    esi,esi
c0002ac5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ac9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acd:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ad3:	74 99                	je     c0002a6e <change_bitmap+0x34>
c0002ad5:	89 de                	mov    esi,ebx
c0002ad7:	eb b8                	jmp    c0002a91 <change_bitmap+0x57>
c0002ad9:	b9 01 00 00 00       	mov    ecx,0x1
c0002ade:	eb 05                	jmp    c0002ae5 <change_bitmap+0xab>
c0002ae0:	b9 02 00 00 00       	mov    ecx,0x2
c0002ae5:	83 c4 1c             	add    esp,0x1c
c0002ae8:	89 c8                	mov    eax,ecx
c0002aea:	5b                   	pop    ebx
c0002aeb:	5e                   	pop    esi
c0002aec:	5f                   	pop    edi
c0002aed:	5d                   	pop    ebp
c0002aee:	c3                   	ret    

c0002aef <put_fat>:
c0002aef:	83 fa 01             	cmp    edx,0x1
c0002af2:	0f 86 7b 01 00 00    	jbe    c0002c73 <put_fat+0x184>
c0002af8:	55                   	push   ebp
c0002af9:	57                   	push   edi
c0002afa:	89 cf                	mov    edi,ecx
c0002afc:	56                   	push   esi
c0002afd:	b9 02 00 00 00       	mov    ecx,0x2
c0002b02:	53                   	push   ebx
c0002b03:	89 c6                	mov    esi,eax
c0002b05:	83 ec 1c             	sub    esp,0x1c
c0002b08:	89 d3                	mov    ebx,edx
c0002b0a:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b0d:	0f 86 68 01 00 00    	jbe    c0002c7b <put_fat+0x18c>
c0002b13:	8a 00                	mov    al,BYTE PTR [eax]
c0002b15:	3c 02                	cmp    al,0x2
c0002b17:	0f 84 c7 00 00 00    	je     c0002be4 <put_fat+0xf5>
c0002b1d:	77 09                	ja     c0002b28 <put_fat+0x39>
c0002b1f:	fe c8                	dec    al
c0002b21:	74 17                	je     c0002b3a <put_fat+0x4b>
c0002b23:	e9 53 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b28:	b9 02 00 00 00       	mov    ecx,0x2
c0002b2d:	3c 04                	cmp    al,0x4
c0002b2f:	0f 86 e1 00 00 00    	jbe    c0002c16 <put_fat+0x127>
c0002b35:	e9 41 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b3a:	89 d5                	mov    ebp,edx
c0002b3c:	31 c9                	xor    ecx,ecx
c0002b3e:	d1 ed                	shr    ebp,1
c0002b40:	89 f0                	mov    eax,esi
c0002b42:	01 d5                	add    ebp,edx
c0002b44:	89 ea                	mov    edx,ebp
c0002b46:	c1 ea 09             	shr    edx,0x9
c0002b49:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b4c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b4f:	e8 18 f6 ff ff       	call   c000216c <move_window>
c0002b54:	89 c1                	mov    ecx,eax
c0002b56:	85 c0                	test   eax,eax
c0002b58:	0f 85 1d 01 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002b5e:	8d 46 54             	lea    eax,[esi+0x54]
c0002b61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b65:	8d 45 01             	lea    eax,[ebp+0x1]
c0002b68:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002b6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b72:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002b76:	89 f8                	mov    eax,edi
c0002b78:	83 e3 01             	and    ebx,0x1
c0002b7b:	74 0d                	je     c0002b8a <put_fat+0x9b>
c0002b7d:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002b80:	89 fa                	mov    edx,edi
c0002b82:	83 e0 0f             	and    eax,0xf
c0002b85:	c1 e2 04             	shl    edx,0x4
c0002b88:	09 d0                	or     eax,edx
c0002b8a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002b8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b91:	31 c9                	xor    ecx,ecx
c0002b93:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b97:	c1 ea 09             	shr    edx,0x9
c0002b9a:	89 f0                	mov    eax,esi
c0002b9c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b9f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ba2:	e8 c5 f5 ff ff       	call   c000216c <move_window>
c0002ba7:	89 c1                	mov    ecx,eax
c0002ba9:	85 c0                	test   eax,eax
c0002bab:	0f 85 ca 00 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002bb1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002bb5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bbb:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bbf:	85 db                	test   ebx,ebx
c0002bc1:	74 07                	je     c0002bca <put_fat+0xdb>
c0002bc3:	c1 ef 04             	shr    edi,0x4
c0002bc6:	89 fa                	mov    edx,edi
c0002bc8:	eb 0e                	jmp    c0002bd8 <put_fat+0xe9>
c0002bca:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002bcd:	c1 ef 08             	shr    edi,0x8
c0002bd0:	83 e2 f0             	and    edx,0xfffffff0
c0002bd3:	83 e7 0f             	and    edi,0xf
c0002bd6:	09 fa                	or     edx,edi
c0002bd8:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002bdb:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bdf:	e9 97 00 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002be4:	31 c9                	xor    ecx,ecx
c0002be6:	c1 ea 08             	shr    edx,0x8
c0002be9:	89 f0                	mov    eax,esi
c0002beb:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bee:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bf1:	e8 76 f5 ff ff       	call   c000216c <move_window>
c0002bf6:	89 c1                	mov    ecx,eax
c0002bf8:	85 c0                	test   eax,eax
c0002bfa:	75 7f                	jne    c0002c7b <put_fat+0x18c>
c0002bfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c00:	01 db                	add    ebx,ebx
c0002c02:	0f b7 d7             	movzx  edx,di
c0002c05:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c0b:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c0f:	e8 ec ed ff ff       	call   c0001a00 <st_word>
c0002c14:	eb 53                	jmp    c0002c69 <put_fat+0x17a>
c0002c16:	31 c9                	xor    ecx,ecx
c0002c18:	c1 ea 07             	shr    edx,0x7
c0002c1b:	89 f0                	mov    eax,esi
c0002c1d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c20:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c23:	e8 44 f5 ff ff       	call   c000216c <move_window>
c0002c28:	89 c1                	mov    ecx,eax
c0002c2a:	85 c0                	test   eax,eax
c0002c2c:	75 4d                	jne    c0002c7b <put_fat+0x18c>
c0002c2e:	c1 e3 02             	shl    ebx,0x2
c0002c31:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c37:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002c3a:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002c3e:	74 1c                	je     c0002c5c <put_fat+0x16d>
c0002c40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c44:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c4a:	89 d8                	mov    eax,ebx
c0002c4c:	e8 4a ed ff ff       	call   c000199b <ld_dword>
c0002c51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c55:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c5a:	09 c7                	or     edi,eax
c0002c5c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c60:	89 fa                	mov    edx,edi
c0002c62:	89 d8                	mov    eax,ebx
c0002c64:	e8 9b ed ff ff       	call   c0001a04 <st_dword>
c0002c69:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c71:	eb 08                	jmp    c0002c7b <put_fat+0x18c>
c0002c73:	b9 02 00 00 00       	mov    ecx,0x2
c0002c78:	89 c8                	mov    eax,ecx
c0002c7a:	c3                   	ret    
c0002c7b:	83 c4 1c             	add    esp,0x1c
c0002c7e:	89 c8                	mov    eax,ecx
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <fill_last_frag>:
c0002c85:	57                   	push   edi
c0002c86:	89 cf                	mov    edi,ecx
c0002c88:	56                   	push   esi
c0002c89:	89 d6                	mov    esi,edx
c0002c8b:	53                   	push   ebx
c0002c8c:	89 c3                	mov    ebx,eax
c0002c8e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002c91:	85 c0                	test   eax,eax
c0002c93:	74 21                	je     c0002cb6 <fill_last_frag+0x31>
c0002c95:	89 f9                	mov    ecx,edi
c0002c97:	83 f8 01             	cmp    eax,0x1
c0002c9a:	76 05                	jbe    c0002ca1 <fill_last_frag+0x1c>
c0002c9c:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002c9f:	29 c1                	sub    ecx,eax
c0002ca1:	8d 56 01             	lea    edx,[esi+0x1]
c0002ca4:	29 c2                	sub    edx,eax
c0002ca6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ca8:	e8 42 fe ff ff       	call   c0002aef <put_fat>
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 05                	jne    c0002cb6 <fill_last_frag+0x31>
c0002cb1:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002cb4:	eb d8                	jmp    c0002c8e <fill_last_frag+0x9>
c0002cb6:	5b                   	pop    ebx
c0002cb7:	5e                   	pop    esi
c0002cb8:	5f                   	pop    edi
c0002cb9:	c3                   	ret    

c0002cba <fill_first_frag>:
c0002cba:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002cbe:	75 2d                	jne    c0002ced <fill_first_frag+0x33>
c0002cc0:	57                   	push   edi
c0002cc1:	56                   	push   esi
c0002cc2:	53                   	push   ebx
c0002cc3:	89 c3                	mov    ebx,eax
c0002cc5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002cc8:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002ccb:	01 d7                	add    edi,edx
c0002ccd:	39 fa                	cmp    edx,edi
c0002ccf:	74 14                	je     c0002ce5 <fill_first_frag+0x2b>
c0002cd1:	8d 72 01             	lea    esi,[edx+0x1]
c0002cd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002cd6:	89 f1                	mov    ecx,esi
c0002cd8:	e8 12 fe ff ff       	call   c0002aef <put_fat>
c0002cdd:	89 f2                	mov    edx,esi
c0002cdf:	85 c0                	test   eax,eax
c0002ce1:	74 ea                	je     c0002ccd <fill_first_frag+0x13>
c0002ce3:	eb 0b                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ce5:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ce9:	31 c0                	xor    eax,eax
c0002ceb:	eb 03                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ced:	31 c0                	xor    eax,eax
c0002cef:	c3                   	ret    
c0002cf0:	5b                   	pop    ebx
c0002cf1:	5e                   	pop    esi
c0002cf2:	5f                   	pop    edi
c0002cf3:	c3                   	ret    

c0002cf4 <get_fat>:
c0002cf4:	83 fa 01             	cmp    edx,0x1
c0002cf7:	0f 86 db 01 00 00    	jbe    c0002ed8 <get_fat+0x1e4>
c0002cfd:	55                   	push   ebp
c0002cfe:	b9 01 00 00 00       	mov    ecx,0x1
c0002d03:	57                   	push   edi
c0002d04:	56                   	push   esi
c0002d05:	53                   	push   ebx
c0002d06:	83 ec 1c             	sub    esp,0x1c
c0002d09:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d0b:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d0e:	0f 86 cc 01 00 00    	jbe    c0002ee0 <get_fat+0x1ec>
c0002d14:	89 c3                	mov    ebx,eax
c0002d16:	89 d6                	mov    esi,edx
c0002d18:	8a 07                	mov    al,BYTE PTR [edi]
c0002d1a:	3c 02                	cmp    al,0x2
c0002d1c:	0f 84 99 00 00 00    	je     c0002dbb <get_fat+0xc7>
c0002d22:	77 09                	ja     c0002d2d <get_fat+0x39>
c0002d24:	fe c8                	dec    al
c0002d26:	74 1a                	je     c0002d42 <get_fat+0x4e>
c0002d28:	e9 b3 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d2d:	3c 03                	cmp    al,0x3
c0002d2f:	0f 84 b5 00 00 00    	je     c0002dea <get_fat+0xf6>
c0002d35:	3c 04                	cmp    al,0x4
c0002d37:	0f 84 e3 00 00 00    	je     c0002e20 <get_fat+0x12c>
c0002d3d:	e9 9e 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d42:	89 d3                	mov    ebx,edx
c0002d44:	31 c9                	xor    ecx,ecx
c0002d46:	d1 eb                	shr    ebx,1
c0002d48:	89 f8                	mov    eax,edi
c0002d4a:	01 d3                	add    ebx,edx
c0002d4c:	89 da                	mov    edx,ebx
c0002d4e:	c1 ea 09             	shr    edx,0x9
c0002d51:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d54:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d57:	e8 10 f4 ff ff       	call   c000216c <move_window>
c0002d5c:	85 c0                	test   eax,eax
c0002d5e:	74 08                	je     c0002d68 <get_fat+0x74>
c0002d60:	83 c9 ff             	or     ecx,0xffffffff
c0002d63:	e9 78 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d68:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002d6b:	31 c9                	xor    ecx,ecx
c0002d6d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d73:	89 ea                	mov    edx,ebp
c0002d75:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002d79:	c1 ea 09             	shr    edx,0x9
c0002d7c:	89 f8                	mov    eax,edi
c0002d7e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d81:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d84:	e8 e3 f3 ff ff       	call   c000216c <move_window>
c0002d89:	85 c0                	test   eax,eax
c0002d8b:	75 d3                	jne    c0002d60 <get_fat+0x6c>
c0002d8d:	0f b6 c3             	movzx  eax,bl
c0002d90:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d96:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002d9b:	c1 e3 08             	shl    ebx,0x8
c0002d9e:	09 c3                	or     ebx,eax
c0002da0:	89 d9                	mov    ecx,ebx
c0002da2:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002da8:	83 e6 01             	and    esi,0x1
c0002dab:	0f 84 2f 01 00 00    	je     c0002ee0 <get_fat+0x1ec>
c0002db1:	89 d9                	mov    ecx,ebx
c0002db3:	c1 e9 04             	shr    ecx,0x4
c0002db6:	e9 25 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dbb:	31 c9                	xor    ecx,ecx
c0002dbd:	c1 ea 08             	shr    edx,0x8
c0002dc0:	89 f8                	mov    eax,edi
c0002dc2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dc5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dc8:	e8 9f f3 ff ff       	call   c000216c <move_window>
c0002dcd:	85 c0                	test   eax,eax
c0002dcf:	75 8f                	jne    c0002d60 <get_fat+0x6c>
c0002dd1:	01 f6                	add    esi,esi
c0002dd3:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002dd9:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ddd:	e8 ac eb ff ff       	call   c000198e <ld_word>
c0002de2:	0f b7 c8             	movzx  ecx,ax
c0002de5:	e9 f6 00 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dea:	31 c9                	xor    ecx,ecx
c0002dec:	c1 ea 07             	shr    edx,0x7
c0002def:	89 f8                	mov    eax,edi
c0002df1:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002df4:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002df7:	e8 70 f3 ff ff       	call   c000216c <move_window>
c0002dfc:	85 c0                	test   eax,eax
c0002dfe:	0f 85 5c ff ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002e04:	c1 e6 02             	shl    esi,0x2
c0002e07:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e0d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e11:	e8 85 eb ff ff       	call   c000199b <ld_dword>
c0002e16:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e1b:	e9 b4 00 00 00       	jmp    c0002ed4 <get_fat+0x1e0>
c0002e20:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e23:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e26:	89 d1                	mov    ecx,edx
c0002e28:	09 c1                	or     ecx,eax
c0002e2a:	74 06                	je     c0002e32 <get_fat+0x13e>
c0002e2c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002e30:	75 0f                	jne    c0002e41 <get_fat+0x14d>
c0002e32:	b9 01 00 00 00       	mov    ecx,0x1
c0002e37:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002e3b:	0f 85 9f 00 00 00    	jne    c0002ee0 <get_fat+0x1ec>
c0002e41:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002e45:	89 f5                	mov    ebp,esi
c0002e47:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002e4c:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002e4f:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002e52:	80 f9 02             	cmp    cl,0x2
c0002e55:	75 35                	jne    c0002e8c <get_fat+0x198>
c0002e57:	83 c0 ff             	add    eax,0xffffffff
c0002e5a:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002e5f:	83 d2 ff             	adc    edx,0xffffffff
c0002e62:	31 db                	xor    ebx,ebx
c0002e64:	0f ac d0 09          	shrd   eax,edx,0x9
c0002e68:	53                   	push   ebx
c0002e69:	c1 ea 09             	shr    edx,0x9
c0002e6c:	51                   	push   ecx
c0002e6d:	52                   	push   edx
c0002e6e:	50                   	push   eax
c0002e6f:	e8 58 b7 01 00       	call   c001e5cc <__udivdi3>
c0002e74:	83 c4 10             	add    esp,0x10
c0002e77:	b9 01 00 00 00       	mov    ecx,0x1
c0002e7c:	39 c5                	cmp    ebp,eax
c0002e7e:	77 60                	ja     c0002ee0 <get_fat+0x1ec>
c0002e80:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e85:	74 59                	je     c0002ee0 <get_fat+0x1ec>
c0002e87:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002e8a:	eb 54                	jmp    c0002ee0 <get_fat+0x1ec>
c0002e8c:	80 f9 03             	cmp    cl,0x3
c0002e8f:	75 05                	jne    c0002e96 <get_fat+0x1a2>
c0002e91:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002e94:	77 f1                	ja     c0002e87 <get_fat+0x193>
c0002e96:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e9b:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002e9f:	75 3f                	jne    c0002ee0 <get_fat+0x1ec>
c0002ea1:	31 c9                	xor    ecx,ecx
c0002ea3:	89 f2                	mov    edx,esi
c0002ea5:	89 f8                	mov    eax,edi
c0002ea7:	c1 ea 07             	shr    edx,0x7
c0002eaa:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ead:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb0:	e8 b7 f2 ff ff       	call   c000216c <move_window>
c0002eb5:	85 c0                	test   eax,eax
c0002eb7:	0f 85 a3 fe ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002ebd:	c1 e6 02             	shl    esi,0x2
c0002ec0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ec6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002eca:	e8 cc ea ff ff       	call   c000199b <ld_dword>
c0002ecf:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002ed4:	89 c1                	mov    ecx,eax
c0002ed6:	eb 08                	jmp    c0002ee0 <get_fat+0x1ec>
c0002ed8:	b9 01 00 00 00       	mov    ecx,0x1
c0002edd:	89 c8                	mov    eax,ecx
c0002edf:	c3                   	ret    
c0002ee0:	83 c4 1c             	add    esp,0x1c
c0002ee3:	89 c8                	mov    eax,ecx
c0002ee5:	5b                   	pop    ebx
c0002ee6:	5e                   	pop    esi
c0002ee7:	5f                   	pop    edi
c0002ee8:	5d                   	pop    ebp
c0002ee9:	c3                   	ret    

c0002eea <dir_sdi>:
c0002eea:	55                   	push   ebp
c0002eeb:	57                   	push   edi
c0002eec:	56                   	push   esi
c0002eed:	53                   	push   ebx
c0002eee:	89 c3                	mov    ebx,eax
c0002ef0:	83 ec 1c             	sub    esp,0x1c
c0002ef3:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ef5:	31 c0                	xor    eax,eax
c0002ef7:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002efa:	0f 94 c0             	sete   al
c0002efd:	48                   	dec    eax
c0002efe:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f03:	05 00 00 00 10       	add    eax,0x10000000
c0002f08:	39 d0                	cmp    eax,edx
c0002f0a:	77 0a                	ja     c0002f16 <dir_sdi+0x2c>
c0002f0c:	b8 02 00 00 00       	mov    eax,0x2
c0002f11:	e9 c4 00 00 00       	jmp    c0002fda <dir_sdi+0xf0>
c0002f16:	89 d6                	mov    esi,edx
c0002f18:	f6 c2 1f             	test   dl,0x1f
c0002f1b:	75 ef                	jne    c0002f0c <dir_sdi+0x22>
c0002f1d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f20:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f23:	85 c9                	test   ecx,ecx
c0002f25:	75 2d                	jne    c0002f54 <dir_sdi+0x6a>
c0002f27:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f2a:	77 1b                	ja     c0002f47 <dir_sdi+0x5d>
c0002f2c:	89 f2                	mov    edx,esi
c0002f2e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002f32:	c1 ea 05             	shr    edx,0x5
c0002f35:	39 c2                	cmp    edx,eax
c0002f37:	73 d3                	jae    c0002f0c <dir_sdi+0x22>
c0002f39:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f3c:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002f3f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f42:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f45:	eb 4b                	jmp    c0002f92 <dir_sdi+0xa8>
c0002f47:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f4a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f4e:	85 c0                	test   eax,eax
c0002f50:	74 da                	je     c0002f2c <dir_sdi+0x42>
c0002f52:	89 c1                	mov    ecx,eax
c0002f54:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002f58:	c1 e5 09             	shl    ebp,0x9
c0002f5b:	89 ca                	mov    edx,ecx
c0002f5d:	39 ee                	cmp    esi,ebp
c0002f5f:	72 1c                	jb     c0002f7d <dir_sdi+0x93>
c0002f61:	89 d8                	mov    eax,ebx
c0002f63:	e8 8c fd ff ff       	call   c0002cf4 <get_fat>
c0002f68:	89 c1                	mov    ecx,eax
c0002f6a:	83 f8 ff             	cmp    eax,0xffffffff
c0002f6d:	74 66                	je     c0002fd5 <dir_sdi+0xeb>
c0002f6f:	83 f8 01             	cmp    eax,0x1
c0002f72:	76 98                	jbe    c0002f0c <dir_sdi+0x22>
c0002f74:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002f77:	76 93                	jbe    c0002f0c <dir_sdi+0x22>
c0002f79:	29 ee                	sub    esi,ebp
c0002f7b:	eb de                	jmp    c0002f5b <dir_sdi+0x71>
c0002f7d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f81:	89 f8                	mov    eax,edi
c0002f83:	e8 9f ec ff ff       	call   c0001c27 <clst2sect>
c0002f88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f8c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f8f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f92:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002f95:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002f98:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002f9b:	89 d1                	mov    ecx,edx
c0002f9d:	09 c1                	or     ecx,eax
c0002f9f:	0f 84 67 ff ff ff    	je     c0002f0c <dir_sdi+0x22>
c0002fa5:	89 f1                	mov    ecx,esi
c0002fa7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002faf:	c1 e9 09             	shr    ecx,0x9
c0002fb2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002fb6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002fba:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002fbe:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002fc7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fca:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fce:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002fd1:	31 c0                	xor    eax,eax
c0002fd3:	eb 05                	jmp    c0002fda <dir_sdi+0xf0>
c0002fd5:	b8 01 00 00 00       	mov    eax,0x1
c0002fda:	83 c4 1c             	add    esp,0x1c
c0002fdd:	5b                   	pop    ebx
c0002fde:	5e                   	pop    esi
c0002fdf:	5f                   	pop    edi
c0002fe0:	5d                   	pop    ebp
c0002fe1:	c3                   	ret    

c0002fe2 <create_chain>:
c0002fe2:	55                   	push   ebp
c0002fe3:	89 c5                	mov    ebp,eax
c0002fe5:	57                   	push   edi
c0002fe6:	56                   	push   esi
c0002fe7:	53                   	push   ebx
c0002fe8:	83 ec 1c             	sub    esp,0x1c
c0002feb:	85 d2                	test   edx,edx
c0002fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002ff1:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ff3:	75 0e                	jne    c0003003 <create_chain+0x21>
c0002ff5:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0002ff8:	85 ff                	test   edi,edi
c0002ffa:	74 39                	je     c0003035 <create_chain+0x53>
c0002ffc:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0002fff:	77 39                	ja     c000303a <create_chain+0x58>
c0003001:	eb 32                	jmp    c0003035 <create_chain+0x53>
c0003003:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003007:	e8 e8 fc ff ff       	call   c0002cf4 <get_fat>
c000300c:	89 c3                	mov    ebx,eax
c000300e:	83 f8 01             	cmp    eax,0x1
c0003011:	77 0a                	ja     c000301d <create_chain+0x3b>
c0003013:	bb 01 00 00 00       	mov    ebx,0x1
c0003018:	e9 ba 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c000301d:	83 f8 ff             	cmp    eax,0xffffffff
c0003020:	0f 84 62 01 00 00    	je     c0003188 <create_chain+0x1a6>
c0003026:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003029:	0f 87 a8 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c000302f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003033:	eb 05                	jmp    c000303a <create_chain+0x58>
c0003035:	bf 01 00 00 00       	mov    edi,0x1
c000303a:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000303e:	75 07                	jne    c0003047 <create_chain+0x65>
c0003040:	31 db                	xor    ebx,ebx
c0003042:	e9 90 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c0003047:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000304a:	75 74                	jne    c00030c0 <create_chain+0xde>
c000304c:	b9 01 00 00 00       	mov    ecx,0x1
c0003051:	89 fa                	mov    edx,edi
c0003053:	89 f0                	mov    eax,esi
c0003055:	e8 2d f9 ff ff       	call   c0002987 <find_bitmap>
c000305a:	89 c3                	mov    ebx,eax
c000305c:	8d 40 ff             	lea    eax,[eax-0x1]
c000305f:	83 f8 fd             	cmp    eax,0xfffffffd
c0003062:	0f 87 6f 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c0003068:	83 ec 0c             	sub    esp,0xc
c000306b:	b9 01 00 00 00       	mov    ecx,0x1
c0003070:	6a 01                	push   0x1
c0003072:	89 da                	mov    edx,ebx
c0003074:	89 f0                	mov    eax,esi
c0003076:	e8 bf f9 ff ff       	call   c0002a3a <change_bitmap>
c000307b:	83 c4 10             	add    esp,0x10
c000307e:	83 f8 02             	cmp    eax,0x2
c0003081:	74 90                	je     c0003013 <create_chain+0x31>
c0003083:	83 f8 01             	cmp    eax,0x1
c0003086:	0f 84 fc 00 00 00    	je     c0003188 <create_chain+0x1a6>
c000308c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003091:	75 09                	jne    c000309c <create_chain+0xba>
c0003093:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003097:	e9 0c 01 00 00       	jmp    c00031a8 <create_chain+0x1c6>
c000309c:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c00030a0:	0f 85 e7 00 00 00    	jne    c000318d <create_chain+0x1ab>
c00030a6:	8d 57 01             	lea    edx,[edi+0x1]
c00030a9:	39 da                	cmp    edx,ebx
c00030ab:	0f 84 f7 00 00 00    	je     c00031a8 <create_chain+0x1c6>
c00030b1:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00030b4:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00030b8:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00030bb:	e9 cd 00 00 00       	jmp    c000318d <create_chain+0x1ab>
c00030c0:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00030c4:	75 41                	jne    c0003107 <create_chain+0x125>
c00030c6:	8d 5f 01             	lea    ebx,[edi+0x1]
c00030c9:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030cc:	77 05                	ja     c00030d3 <create_chain+0xf1>
c00030ce:	bb 02 00 00 00       	mov    ebx,0x2
c00030d3:	89 da                	mov    edx,ebx
c00030d5:	89 e8                	mov    eax,ebp
c00030d7:	e8 18 fc ff ff       	call   c0002cf4 <get_fat>
c00030dc:	83 f8 01             	cmp    eax,0x1
c00030df:	0f 84 2e ff ff ff    	je     c0003013 <create_chain+0x31>
c00030e5:	83 f8 ff             	cmp    eax,0xffffffff
c00030e8:	0f 84 9a 00 00 00    	je     c0003188 <create_chain+0x1a6>
c00030ee:	85 c0                	test   eax,eax
c00030f0:	74 11                	je     c0003103 <create_chain+0x121>
c00030f2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00030f5:	83 f8 01             	cmp    eax,0x1
c00030f8:	76 0d                	jbe    c0003107 <create_chain+0x125>
c00030fa:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030fd:	76 08                	jbe    c0003107 <create_chain+0x125>
c00030ff:	89 c7                	mov    edi,eax
c0003101:	eb 04                	jmp    c0003107 <create_chain+0x125>
c0003103:	85 db                	test   ebx,ebx
c0003105:	75 38                	jne    c000313f <create_chain+0x15d>
c0003107:	89 fb                	mov    ebx,edi
c0003109:	43                   	inc    ebx
c000310a:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000310d:	77 0e                	ja     c000311d <create_chain+0x13b>
c000310f:	83 ff 01             	cmp    edi,0x1
c0003112:	0f 86 28 ff ff ff    	jbe    c0003040 <create_chain+0x5e>
c0003118:	bb 02 00 00 00       	mov    ebx,0x2
c000311d:	89 da                	mov    edx,ebx
c000311f:	89 e8                	mov    eax,ebp
c0003121:	e8 ce fb ff ff       	call   c0002cf4 <get_fat>
c0003126:	85 c0                	test   eax,eax
c0003128:	74 15                	je     c000313f <create_chain+0x15d>
c000312a:	83 f8 01             	cmp    eax,0x1
c000312d:	0f 84 e0 fe ff ff    	je     c0003013 <create_chain+0x31>
c0003133:	40                   	inc    eax
c0003134:	74 52                	je     c0003188 <create_chain+0x1a6>
c0003136:	39 fb                	cmp    ebx,edi
c0003138:	75 cf                	jne    c0003109 <create_chain+0x127>
c000313a:	e9 01 ff ff ff       	jmp    c0003040 <create_chain+0x5e>
c000313f:	83 c9 ff             	or     ecx,0xffffffff
c0003142:	89 da                	mov    edx,ebx
c0003144:	89 f0                	mov    eax,esi
c0003146:	e8 a4 f9 ff ff       	call   c0002aef <put_fat>
c000314b:	85 c0                	test   eax,eax
c000314d:	75 32                	jne    c0003181 <create_chain+0x19f>
c000314f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003154:	74 11                	je     c0003167 <create_chain+0x185>
c0003156:	89 d9                	mov    ecx,ebx
c0003158:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000315c:	89 f0                	mov    eax,esi
c000315e:	e8 8c f9 ff ff       	call   c0002aef <put_fat>
c0003163:	85 c0                	test   eax,eax
c0003165:	75 1a                	jne    c0003181 <create_chain+0x19f>
c0003167:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000316a:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000316d:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003170:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003173:	39 d0                	cmp    eax,edx
c0003175:	77 04                	ja     c000317b <create_chain+0x199>
c0003177:	48                   	dec    eax
c0003178:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000317b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000317f:	eb 56                	jmp    c00031d7 <create_chain+0x1f5>
c0003181:	48                   	dec    eax
c0003182:	0f 85 8b fe ff ff    	jne    c0003013 <create_chain+0x31>
c0003188:	83 cb ff             	or     ebx,0xffffffff
c000318b:	eb 4a                	jmp    c00031d7 <create_chain+0x1f5>
c000318d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003191:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003194:	41                   	inc    ecx
c0003195:	39 d9                	cmp    ecx,ebx
c0003197:	75 19                	jne    c00031b2 <create_chain+0x1d0>
c0003199:	b9 02 00 00 00       	mov    ecx,0x2
c000319e:	85 d2                	test   edx,edx
c00031a0:	74 03                	je     c00031a5 <create_chain+0x1c3>
c00031a2:	8d 4a 01             	lea    ecx,[edx+0x1]
c00031a5:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00031a8:	85 c0                	test   eax,eax
c00031aa:	0f 85 63 fe ff ff    	jne    c0003013 <create_chain+0x31>
c00031b0:	eb b5                	jmp    c0003167 <create_chain+0x185>
c00031b2:	85 d2                	test   edx,edx
c00031b4:	75 07                	jne    c00031bd <create_chain+0x1db>
c00031b6:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031c3:	89 e8                	mov    eax,ebp
c00031c5:	e8 bb fa ff ff       	call   c0002c85 <fill_last_frag>
c00031ca:	85 c0                	test   eax,eax
c00031cc:	75 b3                	jne    c0003181 <create_chain+0x19f>
c00031ce:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031d5:	eb 90                	jmp    c0003167 <create_chain+0x185>
c00031d7:	83 c4 1c             	add    esp,0x1c
c00031da:	89 d8                	mov    eax,ebx
c00031dc:	5b                   	pop    ebx
c00031dd:	5e                   	pop    esi
c00031de:	5f                   	pop    edi
c00031df:	5d                   	pop    ebp
c00031e0:	c3                   	ret    

c00031e1 <remove_chain>:
c00031e1:	55                   	push   ebp
c00031e2:	57                   	push   edi
c00031e3:	56                   	push   esi
c00031e4:	53                   	push   ebx
c00031e5:	83 ec 1c             	sub    esp,0x1c
c00031e8:	83 fa 01             	cmp    edx,0x1
c00031eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031ef:	8b 18                	mov    ebx,DWORD PTR [eax]
c00031f1:	77 0a                	ja     c00031fd <remove_chain+0x1c>
c00031f3:	b8 02 00 00 00       	mov    eax,0x2
c00031f8:	e9 24 01 00 00       	jmp    c0003321 <remove_chain+0x140>
c00031fd:	89 d6                	mov    esi,edx
c00031ff:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003202:	76 ef                	jbe    c00031f3 <remove_chain+0x12>
c0003204:	89 c7                	mov    edi,eax
c0003206:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000320b:	75 06                	jne    c0003213 <remove_chain+0x32>
c000320d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003211:	eb 54                	jmp    c0003267 <remove_chain+0x86>
c0003213:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003216:	75 06                	jne    c000321e <remove_chain+0x3d>
c0003218:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000321c:	74 ef                	je     c000320d <remove_chain+0x2c>
c000321e:	83 c9 ff             	or     ecx,0xffffffff
c0003221:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003225:	89 d8                	mov    eax,ebx
c0003227:	e8 c3 f8 ff ff       	call   c0002aef <put_fat>
c000322c:	85 c0                	test   eax,eax
c000322e:	74 dd                	je     c000320d <remove_chain+0x2c>
c0003230:	e9 ec 00 00 00       	jmp    c0003321 <remove_chain+0x140>
c0003235:	83 f8 01             	cmp    eax,0x1
c0003238:	74 b9                	je     c00031f3 <remove_chain+0x12>
c000323a:	83 f8 ff             	cmp    eax,0xffffffff
c000323d:	74 6d                	je     c00032ac <remove_chain+0xcb>
c000323f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003242:	75 6f                	jne    c00032b3 <remove_chain+0xd2>
c0003244:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003247:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000324a:	8d 51 fe             	lea    edx,[ecx-0x2]
c000324d:	39 d0                	cmp    eax,edx
c000324f:	73 08                	jae    c0003259 <remove_chain+0x78>
c0003251:	40                   	inc    eax
c0003252:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003256:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003259:	8d 4e 01             	lea    ecx,[esi+0x1]
c000325c:	39 e9                	cmp    ecx,ebp
c000325e:	75 64                	jne    c00032c4 <remove_chain+0xe3>
c0003260:	89 ee                	mov    esi,ebp
c0003262:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003265:	76 0f                	jbe    c0003276 <remove_chain+0x95>
c0003267:	89 f2                	mov    edx,esi
c0003269:	89 f8                	mov    eax,edi
c000326b:	e8 84 fa ff ff       	call   c0002cf4 <get_fat>
c0003270:	89 c5                	mov    ebp,eax
c0003272:	85 c0                	test   eax,eax
c0003274:	75 bf                	jne    c0003235 <remove_chain+0x54>
c0003276:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003279:	0f 85 a0 00 00 00    	jne    c000331f <remove_chain+0x13e>
c000327f:	eb 6c                	jmp    c00032ed <remove_chain+0x10c>
c0003281:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003284:	84 c0                	test   al,al
c0003286:	75 7d                	jne    c0003305 <remove_chain+0x124>
c0003288:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000328b:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000328f:	0f 84 86 00 00 00    	je     c000331b <remove_chain+0x13a>
c0003295:	89 da                	mov    edx,ebx
c0003297:	89 f8                	mov    eax,edi
c0003299:	e8 56 fa ff ff       	call   c0002cf4 <get_fat>
c000329e:	83 f8 01             	cmp    eax,0x1
c00032a1:	0f 86 4c ff ff ff    	jbe    c00031f3 <remove_chain+0x12>
c00032a7:	83 f8 ff             	cmp    eax,0xffffffff
c00032aa:	75 4e                	jne    c00032fa <remove_chain+0x119>
c00032ac:	b8 01 00 00 00       	mov    eax,0x1
c00032b1:	eb 6e                	jmp    c0003321 <remove_chain+0x140>
c00032b3:	31 c9                	xor    ecx,ecx
c00032b5:	89 f2                	mov    edx,esi
c00032b7:	89 d8                	mov    eax,ebx
c00032b9:	e8 31 f8 ff ff       	call   c0002aef <put_fat>
c00032be:	85 c0                	test   eax,eax
c00032c0:	74 82                	je     c0003244 <remove_chain+0x63>
c00032c2:	eb 5d                	jmp    c0003321 <remove_chain+0x140>
c00032c4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c7:	75 1b                	jne    c00032e4 <remove_chain+0x103>
c00032c9:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	83 ec 0c             	sub    esp,0xc
c00032d2:	6a 00                	push   0x0
c00032d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00032d8:	e8 5d f7 ff ff       	call   c0002a3a <change_bitmap>
c00032dd:	83 c4 10             	add    esp,0x10
c00032e0:	85 c0                	test   eax,eax
c00032e2:	75 3d                	jne    c0003321 <remove_chain+0x140>
c00032e4:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00032e8:	e9 73 ff ff ff       	jmp    c0003260 <remove_chain+0x7f>
c00032ed:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032f2:	75 8d                	jne    c0003281 <remove_chain+0xa0>
c00032f4:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00032f8:	eb 25                	jmp    c000331f <remove_chain+0x13e>
c00032fa:	8d 53 01             	lea    edx,[ebx+0x1]
c00032fd:	89 c3                	mov    ebx,eax
c00032ff:	39 c2                	cmp    edx,eax
c0003301:	74 88                	je     c000328b <remove_chain+0xaa>
c0003303:	eb 1a                	jmp    c000331f <remove_chain+0x13e>
c0003305:	3c 03                	cmp    al,0x3
c0003307:	75 16                	jne    c000331f <remove_chain+0x13e>
c0003309:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000330c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003310:	77 0d                	ja     c000331f <remove_chain+0x13e>
c0003312:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003315:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003319:	72 04                	jb     c000331f <remove_chain+0x13e>
c000331b:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c000331f:	31 c0                	xor    eax,eax
c0003321:	83 c4 1c             	add    esp,0x1c
c0003324:	5b                   	pop    ebx
c0003325:	5e                   	pop    esi
c0003326:	5f                   	pop    edi
c0003327:	5d                   	pop    ebp
c0003328:	c3                   	ret    

c0003329 <dir_clear>:
c0003329:	55                   	push   ebp
c000332a:	57                   	push   edi
c000332b:	56                   	push   esi
c000332c:	89 c6                	mov    esi,eax
c000332e:	53                   	push   ebx
c000332f:	83 ec 1c             	sub    esp,0x1c
c0003332:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003336:	e8 9d ed ff ff       	call   c00020d8 <sync_window>
c000333b:	85 c0                	test   eax,eax
c000333d:	0f 85 de 00 00 00    	jne    c0003421 <dir_clear+0xf8>
c0003343:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003347:	89 f0                	mov    eax,esi
c0003349:	8d 6e 54             	lea    ebp,[esi+0x54]
c000334c:	e8 d6 e8 ff ff       	call   c0001c27 <clst2sect>
c0003351:	b9 00 02 00 00       	mov    ecx,0x200
c0003356:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000335a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000335e:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003361:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003364:	89 e8                	mov    eax,ebp
c0003366:	31 d2                	xor    edx,edx
c0003368:	e8 b5 e6 ff ff       	call   c0001a22 <mem_set>
c000336d:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003371:	c1 e3 09             	shl    ebx,0x9
c0003374:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000337a:	76 1f                	jbe    c000339b <dir_clear+0x72>
c000337c:	bb 00 80 00 00       	mov    ebx,0x8000
c0003381:	eb 18                	jmp    c000339b <dir_clear+0x72>
c0003383:	83 ec 0c             	sub    esp,0xc
c0003386:	53                   	push   ebx
c0003387:	e8 35 4e 00 00       	call   c00081c1 <ff_memalloc>
c000338c:	83 c4 10             	add    esp,0x10
c000338f:	89 c7                	mov    edi,eax
c0003391:	85 c0                	test   eax,eax
c0003393:	0f 85 8f 00 00 00    	jne    c0003428 <dir_clear+0xff>
c0003399:	d1 eb                	shr    ebx,1
c000339b:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00033a1:	77 e0                	ja     c0003383 <dir_clear+0x5a>
c00033a3:	31 db                	xor    ebx,ebx
c00033a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033a9:	39 d8                	cmp    eax,ebx
c00033ab:	76 66                	jbe    c0003413 <dir_clear+0xea>
c00033ad:	83 ec 0c             	sub    esp,0xc
c00033b0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033b4:	6a 01                	push   0x1
c00033b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033be:	55                   	push   ebp
c00033bf:	50                   	push   eax
c00033c0:	e8 94 e5 ff ff       	call   c0001959 <disk_write>
c00033c5:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00033ca:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00033cf:	83 c4 20             	add    esp,0x20
c00033d2:	85 c0                	test   eax,eax
c00033d4:	75 3d                	jne    c0003413 <dir_clear+0xea>
c00033d6:	43                   	inc    ebx
c00033d7:	eb cc                	jmp    c00033a5 <dir_clear+0x7c>
c00033d9:	83 ec 0c             	sub    esp,0xc
c00033dc:	31 d2                	xor    edx,edx
c00033de:	55                   	push   ebp
c00033df:	89 d8                	mov    eax,ebx
c00033e1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00033e5:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00033e9:	52                   	push   edx
c00033ea:	50                   	push   eax
c00033eb:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033ef:	57                   	push   edi
c00033f0:	50                   	push   eax
c00033f1:	e8 63 e5 ff ff       	call   c0001959 <disk_write>
c00033f6:	83 c4 20             	add    esp,0x20
c00033f9:	85 c0                	test   eax,eax
c00033fb:	75 0a                	jne    c0003407 <dir_clear+0xde>
c00033fd:	01 eb                	add    ebx,ebp
c00033ff:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003403:	39 d8                	cmp    eax,ebx
c0003405:	77 d2                	ja     c00033d9 <dir_clear+0xb0>
c0003407:	83 ec 0c             	sub    esp,0xc
c000340a:	57                   	push   edi
c000340b:	e8 c7 4d 00 00       	call   c00081d7 <ff_memfree>
c0003410:	83 c4 10             	add    esp,0x10
c0003413:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003417:	39 d8                	cmp    eax,ebx
c0003419:	0f 95 c0             	setne  al
c000341c:	0f b6 c0             	movzx  eax,al
c000341f:	eb 19                	jmp    c000343a <dir_clear+0x111>
c0003421:	b8 01 00 00 00       	mov    eax,0x1
c0003426:	eb 12                	jmp    c000343a <dir_clear+0x111>
c0003428:	89 d9                	mov    ecx,ebx
c000342a:	31 d2                	xor    edx,edx
c000342c:	c1 eb 09             	shr    ebx,0x9
c000342f:	e8 ee e5 ff ff       	call   c0001a22 <mem_set>
c0003434:	89 dd                	mov    ebp,ebx
c0003436:	31 db                	xor    ebx,ebx
c0003438:	eb c5                	jmp    c00033ff <dir_clear+0xd6>
c000343a:	83 c4 1c             	add    esp,0x1c
c000343d:	5b                   	pop    ebx
c000343e:	5e                   	pop    esi
c000343f:	5f                   	pop    edi
c0003440:	5d                   	pop    ebp
c0003441:	c3                   	ret    

c0003442 <dir_next>:
c0003442:	55                   	push   ebp
c0003443:	57                   	push   edi
c0003444:	56                   	push   esi
c0003445:	53                   	push   ebx
c0003446:	89 c3                	mov    ebx,eax
c0003448:	83 ec 1c             	sub    esp,0x1c
c000344b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000344d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003451:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003454:	8d 78 20             	lea    edi,[eax+0x20]
c0003457:	31 c0                	xor    eax,eax
c0003459:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000345d:	0f 94 c0             	sete   al
c0003460:	48                   	dec    eax
c0003461:	25 00 00 20 f0       	and    eax,0xf0200000
c0003466:	05 00 00 00 10       	add    eax,0x10000000
c000346b:	39 f8                	cmp    eax,edi
c000346d:	77 0e                	ja     c000347d <dir_next+0x3b>
c000346f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003476:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000347d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003480:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003483:	b8 04 00 00 00       	mov    eax,0x4
c0003488:	89 ce                	mov    esi,ecx
c000348a:	09 d6                	or     esi,edx
c000348c:	0f 84 da 00 00 00    	je     c000356c <dir_next+0x12a>
c0003492:	89 f8                	mov    eax,edi
c0003494:	25 ff 01 00 00       	and    eax,0x1ff
c0003499:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000349d:	0f 85 b9 00 00 00    	jne    c000355c <dir_next+0x11a>
c00034a3:	83 c2 01             	add    edx,0x1
c00034a6:	83 d1 00             	adc    ecx,0x0
c00034a9:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00034ac:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00034af:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00034b2:	85 d2                	test   edx,edx
c00034b4:	75 29                	jne    c00034df <dir_next+0x9d>
c00034b6:	89 fa                	mov    edx,edi
c00034b8:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034bc:	c1 ea 05             	shr    edx,0x5
c00034bf:	39 c2                	cmp    edx,eax
c00034c1:	0f 82 95 00 00 00    	jb     c000355c <dir_next+0x11a>
c00034c7:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034ce:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034d5:	b8 04 00 00 00       	mov    eax,0x4
c00034da:	e9 8d 00 00 00       	jmp    c000356c <dir_next+0x12a>
c00034df:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00034e3:	89 f9                	mov    ecx,edi
c00034e5:	48                   	dec    eax
c00034e6:	c1 e9 09             	shr    ecx,0x9
c00034e9:	85 c8                	test   eax,ecx
c00034eb:	75 6f                	jne    c000355c <dir_next+0x11a>
c00034ed:	89 d8                	mov    eax,ebx
c00034ef:	e8 00 f8 ff ff       	call   c0002cf4 <get_fat>
c00034f4:	89 c6                	mov    esi,eax
c00034f6:	83 f8 01             	cmp    eax,0x1
c00034f9:	77 07                	ja     c0003502 <dir_next+0xc0>
c00034fb:	b8 02 00 00 00       	mov    eax,0x2
c0003500:	eb 6a                	jmp    c000356c <dir_next+0x12a>
c0003502:	83 f8 ff             	cmp    eax,0xffffffff
c0003505:	75 07                	jne    c000350e <dir_next+0xcc>
c0003507:	b8 01 00 00 00       	mov    eax,0x1
c000350c:	eb 5e                	jmp    c000356c <dir_next+0x12a>
c000350e:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003511:	77 37                	ja     c000354a <dir_next+0x108>
c0003513:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003518:	74 ad                	je     c00034c7 <dir_next+0x85>
c000351a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000351d:	89 d8                	mov    eax,ebx
c000351f:	e8 be fa ff ff       	call   c0002fe2 <create_chain>
c0003524:	89 c6                	mov    esi,eax
c0003526:	b8 07 00 00 00       	mov    eax,0x7
c000352b:	85 f6                	test   esi,esi
c000352d:	74 3d                	je     c000356c <dir_next+0x12a>
c000352f:	83 fe 01             	cmp    esi,0x1
c0003532:	74 c7                	je     c00034fb <dir_next+0xb9>
c0003534:	83 fe ff             	cmp    esi,0xffffffff
c0003537:	74 ce                	je     c0003507 <dir_next+0xc5>
c0003539:	89 f2                	mov    edx,esi
c000353b:	89 e8                	mov    eax,ebp
c000353d:	e8 e7 fd ff ff       	call   c0003329 <dir_clear>
c0003542:	85 c0                	test   eax,eax
c0003544:	75 c1                	jne    c0003507 <dir_next+0xc5>
c0003546:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000354a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000354d:	89 f2                	mov    edx,esi
c000354f:	89 e8                	mov    eax,ebp
c0003551:	e8 d1 e6 ff ff       	call   c0001c27 <clst2sect>
c0003556:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003559:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000355c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003560:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003563:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003567:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000356a:	31 c0                	xor    eax,eax
c000356c:	83 c4 1c             	add    esp,0x1c
c000356f:	5b                   	pop    ebx
c0003570:	5e                   	pop    esi
c0003571:	5f                   	pop    edi
c0003572:	5d                   	pop    ebp
c0003573:	c3                   	ret    

c0003574 <load_xdir>:
c0003574:	55                   	push   ebp
c0003575:	57                   	push   edi
c0003576:	56                   	push   esi
c0003577:	89 c6                	mov    esi,eax
c0003579:	53                   	push   ebx
c000357a:	83 ec 1c             	sub    esp,0x1c
c000357d:	8b 00                	mov    eax,DWORD PTR [eax]
c000357f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003582:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003585:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003588:	e8 df eb ff ff       	call   c000216c <move_window>
c000358d:	89 c3                	mov    ebx,eax
c000358f:	85 c0                	test   eax,eax
c0003591:	0f 85 0c 01 00 00    	jne    c00036a3 <load_xdir+0x12f>
c0003597:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000359a:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000359d:	0f 85 fb 00 00 00    	jne    c000369e <load_xdir+0x12a>
c00035a3:	89 f8                	mov    eax,edi
c00035a5:	b9 20 00 00 00       	mov    ecx,0x20
c00035aa:	e8 5e e4 ff ff       	call   c0001a0d <mem_cpy>
c00035af:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00035b3:	40                   	inc    eax
c00035b4:	c1 e0 05             	shl    eax,0x5
c00035b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035bb:	83 e8 60             	sub    eax,0x60
c00035be:	3d 00 02 00 00       	cmp    eax,0x200
c00035c3:	0f 87 d5 00 00 00    	ja     c000369e <load_xdir+0x12a>
c00035c9:	31 d2                	xor    edx,edx
c00035cb:	89 f0                	mov    eax,esi
c00035cd:	e8 70 fe ff ff       	call   c0003442 <dir_next>
c00035d2:	89 c3                	mov    ebx,eax
c00035d4:	83 f8 04             	cmp    eax,0x4
c00035d7:	0f 84 c1 00 00 00    	je     c000369e <load_xdir+0x12a>
c00035dd:	85 c0                	test   eax,eax
c00035df:	0f 85 be 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035e5:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035e8:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00035ed:	e8 7a eb ff ff       	call   c000216c <move_window>
c00035f2:	89 c3                	mov    ebx,eax
c00035f4:	85 c0                	test   eax,eax
c00035f6:	0f 85 a7 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035fc:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00035ff:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003602:	0f 85 96 00 00 00    	jne    c000369e <load_xdir+0x12a>
c0003608:	8d 47 20             	lea    eax,[edi+0x20]
c000360b:	b9 20 00 00 00       	mov    ecx,0x20
c0003610:	e8 f8 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003615:	31 d2                	xor    edx,edx
c0003617:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000361b:	b9 0f 00 00 00       	mov    ecx,0xf
c0003620:	83 c0 2c             	add    eax,0x2c
c0003623:	f7 f1                	div    ecx
c0003625:	c1 e0 05             	shl    eax,0x5
c0003628:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000362c:	77 70                	ja     c000369e <load_xdir+0x12a>
c000362e:	bd 40 00 00 00       	mov    ebp,0x40
c0003633:	31 d2                	xor    edx,edx
c0003635:	89 f0                	mov    eax,esi
c0003637:	e8 06 fe ff ff       	call   c0003442 <dir_next>
c000363c:	89 c3                	mov    ebx,eax
c000363e:	83 f8 04             	cmp    eax,0x4
c0003641:	74 5b                	je     c000369e <load_xdir+0x12a>
c0003643:	85 c0                	test   eax,eax
c0003645:	75 5c                	jne    c00036a3 <load_xdir+0x12f>
c0003647:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000364a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000364d:	8b 06                	mov    eax,DWORD PTR [esi]
c000364f:	e8 18 eb ff ff       	call   c000216c <move_window>
c0003654:	89 c3                	mov    ebx,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	75 49                	jne    c00036a3 <load_xdir+0x12f>
c000365a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000365d:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003660:	75 3c                	jne    c000369e <load_xdir+0x12a>
c0003662:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003668:	77 0d                	ja     c0003677 <load_xdir+0x103>
c000366a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000366d:	b9 20 00 00 00       	mov    ecx,0x20
c0003672:	e8 96 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003677:	83 c5 20             	add    ebp,0x20
c000367a:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000367e:	77 b3                	ja     c0003633 <load_xdir+0xbf>
c0003680:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003686:	77 1b                	ja     c00036a3 <load_xdir+0x12f>
c0003688:	89 f8                	mov    eax,edi
c000368a:	e8 cd e7 ff ff       	call   c0001e5c <xdir_sum>
c000368f:	89 c1                	mov    ecx,eax
c0003691:	8d 47 02             	lea    eax,[edi+0x2]
c0003694:	e8 f5 e2 ff ff       	call   c000198e <ld_word>
c0003699:	66 39 c1             	cmp    cx,ax
c000369c:	74 05                	je     c00036a3 <load_xdir+0x12f>
c000369e:	bb 02 00 00 00       	mov    ebx,0x2
c00036a3:	83 c4 1c             	add    esp,0x1c
c00036a6:	89 d8                	mov    eax,ebx
c00036a8:	5b                   	pop    ebx
c00036a9:	5e                   	pop    esi
c00036aa:	5f                   	pop    edi
c00036ab:	5d                   	pop    ebp
c00036ac:	c3                   	ret    

c00036ad <load_obj_xdir>:
c00036ad:	53                   	push   ebx
c00036ae:	89 c3                	mov    ebx,eax
c00036b0:	83 ec 08             	sub    esp,0x8
c00036b3:	8b 02                	mov    eax,DWORD PTR [edx]
c00036b5:	89 03                	mov    DWORD PTR [ebx],eax
c00036b7:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00036ba:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00036bd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c0:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00036c3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00036cd:	30 c0                	xor    al,al
c00036cf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036d6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00036d9:	89 d8                	mov    eax,ebx
c00036db:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00036de:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00036e1:	e8 04 f8 ff ff       	call   c0002eea <dir_sdi>
c00036e6:	85 c0                	test   eax,eax
c00036e8:	75 0b                	jne    c00036f5 <load_obj_xdir+0x48>
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	83 c4 08             	add    esp,0x8
c00036ef:	5b                   	pop    ebx
c00036f0:	e9 7f fe ff ff       	jmp    c0003574 <load_xdir>
c00036f5:	83 c4 08             	add    esp,0x8
c00036f8:	5b                   	pop    ebx
c00036f9:	c3                   	ret    

c00036fa <dir_read>:
c00036fa:	55                   	push   ebp
c00036fb:	bd 04 00 00 00       	mov    ebp,0x4
c0003700:	57                   	push   edi
c0003701:	56                   	push   esi
c0003702:	be ff ff ff ff       	mov    esi,0xffffffff
c0003707:	53                   	push   ebx
c0003708:	89 c3                	mov    ebx,eax
c000370a:	83 ec 1c             	sub    esp,0x1c
c000370d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003711:	8b 38                	mov    edi,DWORD PTR [eax]
c0003713:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003718:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000371b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371e:	89 c8                	mov    eax,ecx
c0003720:	09 d0                	or     eax,edx
c0003722:	0f 84 25 01 00 00    	je     c000384d <dir_read+0x153>
c0003728:	89 f8                	mov    eax,edi
c000372a:	e8 3d ea ff ff       	call   c000216c <move_window>
c000372f:	89 c5                	mov    ebp,eax
c0003731:	85 c0                	test   eax,eax
c0003733:	0f 85 23 01 00 00    	jne    c000385c <dir_read+0x162>
c0003739:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000373c:	8a 0a                	mov    cl,BYTE PTR [edx]
c000373e:	84 c9                	test   cl,cl
c0003740:	0f 84 11 01 00 00    	je     c0003857 <dir_read+0x15d>
c0003746:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003749:	75 48                	jne    c0003793 <dir_read+0x99>
c000374b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003750:	74 10                	je     c0003762 <dir_read+0x68>
c0003752:	80 f9 83             	cmp    cl,0x83
c0003755:	0f 85 dd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000375b:	31 ed                	xor    ebp,ebp
c000375d:	e9 08 01 00 00       	jmp    c000386a <dir_read+0x170>
c0003762:	80 f9 85             	cmp    cl,0x85
c0003765:	0f 85 cd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000376b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000376e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003771:	89 d8                	mov    eax,ebx
c0003773:	e8 fc fd ff ff       	call   c0003574 <load_xdir>
c0003778:	89 c5                	mov    ebp,eax
c000377a:	85 c0                	test   eax,eax
c000377c:	0f 85 da 00 00 00    	jne    c000385c <dir_read+0x162>
c0003782:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003785:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003788:	83 e0 3f             	and    eax,0x3f
c000378b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000378e:	e9 d7 00 00 00       	jmp    c000386a <dir_read+0x170>
c0003793:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003796:	83 e0 3f             	and    eax,0x3f
c0003799:	80 f9 2e             	cmp    cl,0x2e
c000379c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00037a0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037a3:	0f 84 8a 00 00 00    	je     c0003833 <dir_read+0x139>
c00037a9:	80 f9 e5             	cmp    cl,0xe5
c00037ac:	0f 84 81 00 00 00    	je     c0003833 <dir_read+0x139>
c00037b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037b6:	83 e0 1f             	and    eax,0x1f
c00037b9:	83 f8 08             	cmp    eax,0x8
c00037bc:	0f 94 c0             	sete   al
c00037bf:	0f b6 c0             	movzx  eax,al
c00037c2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037c6:	75 6b                	jne    c0003833 <dir_read+0x139>
c00037c8:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00037cd:	75 44                	jne    c0003813 <dir_read+0x119>
c00037cf:	f6 c1 40             	test   cl,0x40
c00037d2:	74 12                	je     c00037e6 <dir_read+0xec>
c00037d4:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037d7:	83 e1 bf             	and    ecx,0xffffffbf
c00037da:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037de:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037e1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037e4:	eb 06                	jmp    c00037ec <dir_read+0xf2>
c00037e6:	89 f0                	mov    eax,esi
c00037e8:	38 c8                	cmp    al,cl
c00037ea:	75 47                	jne    c0003833 <dir_read+0x139>
c00037ec:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037f0:	be ff ff ff ff       	mov    esi,0xffffffff
c00037f5:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00037f8:	75 3e                	jne    c0003838 <dir_read+0x13e>
c00037fa:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00037fe:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003801:	e8 8a e4 ff ff       	call   c0001c90 <pick_lfn>
c0003806:	85 c0                	test   eax,eax
c0003808:	74 2e                	je     c0003838 <dir_read+0x13e>
c000380a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000380e:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003811:	eb 25                	jmp    c0003838 <dir_read+0x13e>
c0003813:	89 f0                	mov    eax,esi
c0003815:	84 c0                	test   al,al
c0003817:	75 11                	jne    c000382a <dir_read+0x130>
c0003819:	89 d0                	mov    eax,edx
c000381b:	e8 2a e6 ff ff       	call   c0001e4a <sum_sfn>
c0003820:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003824:	0f 84 31 ff ff ff    	je     c000375b <dir_read+0x61>
c000382a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003831:	eb 37                	jmp    c000386a <dir_read+0x170>
c0003833:	be ff ff ff ff       	mov    esi,0xffffffff
c0003838:	31 d2                	xor    edx,edx
c000383a:	89 d8                	mov    eax,ebx
c000383c:	e8 01 fc ff ff       	call   c0003442 <dir_next>
c0003841:	89 c5                	mov    ebp,eax
c0003843:	85 c0                	test   eax,eax
c0003845:	0f 84 cd fe ff ff    	je     c0003718 <dir_read+0x1e>
c000384b:	eb 0f                	jmp    c000385c <dir_read+0x162>
c000384d:	85 ed                	test   ebp,ebp
c000384f:	0f 84 06 ff ff ff    	je     c000375b <dir_read+0x61>
c0003855:	eb 05                	jmp    c000385c <dir_read+0x162>
c0003857:	bd 04 00 00 00       	mov    ebp,0x4
c000385c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003863:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000386a:	83 c4 1c             	add    esp,0x1c
c000386d:	89 e8                	mov    eax,ebp
c000386f:	5b                   	pop    ebx
c0003870:	5e                   	pop    esi
c0003871:	5f                   	pop    edi
c0003872:	5d                   	pop    ebp
c0003873:	c3                   	ret    

c0003874 <dir_alloc>:
c0003874:	55                   	push   ebp
c0003875:	89 d5                	mov    ebp,edx
c0003877:	57                   	push   edi
c0003878:	31 d2                	xor    edx,edx
c000387a:	56                   	push   esi
c000387b:	53                   	push   ebx
c000387c:	89 c3                	mov    ebx,eax
c000387e:	83 ec 0c             	sub    esp,0xc
c0003881:	8b 38                	mov    edi,DWORD PTR [eax]
c0003883:	e8 62 f6 ff ff       	call   c0002eea <dir_sdi>
c0003888:	85 c0                	test   eax,eax
c000388a:	75 4e                	jne    c00038da <dir_alloc+0x66>
c000388c:	31 f6                	xor    esi,esi
c000388e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003891:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003894:	89 f8                	mov    eax,edi
c0003896:	e8 d1 e8 ff ff       	call   c000216c <move_window>
c000389b:	85 c0                	test   eax,eax
c000389d:	75 3b                	jne    c00038da <dir_alloc+0x66>
c000389f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00038a2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00038a5:	8a 12                	mov    dl,BYTE PTR [edx]
c00038a7:	75 07                	jne    c00038b0 <dir_alloc+0x3c>
c00038a9:	f7 d2                	not    edx
c00038ab:	c0 ea 07             	shr    dl,0x7
c00038ae:	eb 0d                	jmp    c00038bd <dir_alloc+0x49>
c00038b0:	84 d2                	test   dl,dl
c00038b2:	0f 94 c1             	sete   cl
c00038b5:	80 fa e5             	cmp    dl,0xe5
c00038b8:	0f 94 c2             	sete   dl
c00038bb:	09 ca                	or     edx,ecx
c00038bd:	84 d2                	test   dl,dl
c00038bf:	74 07                	je     c00038c8 <dir_alloc+0x54>
c00038c1:	46                   	inc    esi
c00038c2:	39 ee                	cmp    esi,ebp
c00038c4:	75 04                	jne    c00038ca <dir_alloc+0x56>
c00038c6:	eb 1c                	jmp    c00038e4 <dir_alloc+0x70>
c00038c8:	31 f6                	xor    esi,esi
c00038ca:	ba 01 00 00 00       	mov    edx,0x1
c00038cf:	89 d8                	mov    eax,ebx
c00038d1:	e8 6c fb ff ff       	call   c0003442 <dir_next>
c00038d6:	85 c0                	test   eax,eax
c00038d8:	74 b4                	je     c000388e <dir_alloc+0x1a>
c00038da:	83 f8 04             	cmp    eax,0x4
c00038dd:	75 05                	jne    c00038e4 <dir_alloc+0x70>
c00038df:	b8 07 00 00 00       	mov    eax,0x7
c00038e4:	83 c4 0c             	add    esp,0xc
c00038e7:	5b                   	pop    ebx
c00038e8:	5e                   	pop    esi
c00038e9:	5f                   	pop    edi
c00038ea:	5d                   	pop    ebp
c00038eb:	c3                   	ret    

c00038ec <store_xdir>:
c00038ec:	55                   	push   ebp
c00038ed:	57                   	push   edi
c00038ee:	89 c7                	mov    edi,eax
c00038f0:	56                   	push   esi
c00038f1:	53                   	push   ebx
c00038f2:	83 ec 0c             	sub    esp,0xc
c00038f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00038f7:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00038fa:	89 e8                	mov    eax,ebp
c00038fc:	e8 5b e5 ff ff       	call   c0001e5c <xdir_sum>
c0003901:	0f b7 d0             	movzx  edx,ax
c0003904:	8d 45 02             	lea    eax,[ebp+0x2]
c0003907:	e8 f4 e0 ff ff       	call   c0001a00 <st_word>
c000390c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003910:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003913:	89 f8                	mov    eax,edi
c0003915:	e8 d0 f5 ff ff       	call   c0002eea <dir_sdi>
c000391a:	89 c6                	mov    esi,eax
c000391c:	85 f6                	test   esi,esi
c000391e:	75 3d                	jne    c000395d <store_xdir+0x71>
c0003920:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003923:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003926:	8b 07                	mov    eax,DWORD PTR [edi]
c0003928:	e8 3f e8 ff ff       	call   c000216c <move_window>
c000392d:	89 c6                	mov    esi,eax
c000392f:	85 c0                	test   eax,eax
c0003931:	75 2a                	jne    c000395d <store_xdir+0x71>
c0003933:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003936:	b9 20 00 00 00       	mov    ecx,0x20
c000393b:	89 ea                	mov    edx,ebp
c000393d:	e8 cb e0 ff ff       	call   c0001a0d <mem_cpy>
c0003942:	8b 07                	mov    eax,DWORD PTR [edi]
c0003944:	85 db                	test   ebx,ebx
c0003946:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000394a:	74 11                	je     c000395d <store_xdir+0x71>
c000394c:	31 d2                	xor    edx,edx
c000394e:	89 f8                	mov    eax,edi
c0003950:	83 c5 20             	add    ebp,0x20
c0003953:	e8 ea fa ff ff       	call   c0003442 <dir_next>
c0003958:	4b                   	dec    ebx
c0003959:	89 c6                	mov    esi,eax
c000395b:	eb bf                	jmp    c000391c <store_xdir+0x30>
c000395d:	89 f0                	mov    eax,esi
c000395f:	83 fe 02             	cmp    esi,0x2
c0003962:	76 05                	jbe    c0003969 <store_xdir+0x7d>
c0003964:	b8 02 00 00 00       	mov    eax,0x2
c0003969:	83 c4 0c             	add    esp,0xc
c000396c:	5b                   	pop    ebx
c000396d:	5e                   	pop    esi
c000396e:	5f                   	pop    edi
c000396f:	5d                   	pop    ebp
c0003970:	c3                   	ret    

c0003971 <dir_remove>:
c0003971:	57                   	push   edi
c0003972:	56                   	push   esi
c0003973:	53                   	push   ebx
c0003974:	89 c3                	mov    ebx,eax
c0003976:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003979:	8b 30                	mov    esi,DWORD PTR [eax]
c000397b:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c000397e:	83 fa ff             	cmp    edx,0xffffffff
c0003981:	74 09                	je     c000398c <dir_remove+0x1b>
c0003983:	e8 62 f5 ff ff       	call   c0002eea <dir_sdi>
c0003988:	85 c0                	test   eax,eax
c000398a:	75 41                	jne    c00039cd <dir_remove+0x5c>
c000398c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000398f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003992:	89 f0                	mov    eax,esi
c0003994:	e8 d3 e7 ff ff       	call   c000216c <move_window>
c0003999:	85 c0                	test   eax,eax
c000399b:	75 26                	jne    c00039c3 <dir_remove+0x52>
c000399d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039a0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00039a3:	75 05                	jne    c00039aa <dir_remove+0x39>
c00039a5:	80 22 7f             	and    BYTE PTR [edx],0x7f
c00039a8:	eb 03                	jmp    c00039ad <dir_remove+0x3c>
c00039aa:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00039ad:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039b1:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c00039b4:	73 17                	jae    c00039cd <dir_remove+0x5c>
c00039b6:	31 d2                	xor    edx,edx
c00039b8:	89 d8                	mov    eax,ebx
c00039ba:	e8 83 fa ff ff       	call   c0003442 <dir_next>
c00039bf:	85 c0                	test   eax,eax
c00039c1:	74 c9                	je     c000398c <dir_remove+0x1b>
c00039c3:	83 f8 04             	cmp    eax,0x4
c00039c6:	75 05                	jne    c00039cd <dir_remove+0x5c>
c00039c8:	b8 02 00 00 00       	mov    eax,0x2
c00039cd:	5b                   	pop    ebx
c00039ce:	5e                   	pop    esi
c00039cf:	5f                   	pop    edi
c00039d0:	c3                   	ret    

c00039d1 <create_name>:
c00039d1:	55                   	push   ebp
c00039d2:	89 d5                	mov    ebp,edx
c00039d4:	57                   	push   edi
c00039d5:	89 c7                	mov    edi,eax
c00039d7:	56                   	push   esi
c00039d8:	31 f6                	xor    esi,esi
c00039da:	53                   	push   ebx
c00039db:	83 ec 3c             	sub    esp,0x3c
c00039de:	8b 02                	mov    eax,DWORD PTR [edx]
c00039e0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00039e4:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00039ed:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00039f1:	e8 72 e0 ff ff       	call   c0001a68 <tchar2uni>
c00039f6:	89 c3                	mov    ebx,eax
c00039f8:	83 f8 ff             	cmp    eax,0xffffffff
c00039fb:	75 0a                	jne    c0003a07 <create_name+0x36>
c00039fd:	b8 06 00 00 00       	mov    eax,0x6
c0003a02:	e9 9e 02 00 00       	jmp    c0003ca5 <create_name+0x2d4>
c0003a07:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a0c:	76 0c                	jbe    c0003a1a <create_name+0x49>
c0003a0e:	c1 e8 10             	shr    eax,0x10
c0003a11:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a15:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a19:	46                   	inc    esi
c0003a1a:	66 83 fb 1f          	cmp    bx,0x1f
c0003a1e:	76 4f                	jbe    c0003a6f <create_name+0x9e>
c0003a20:	66 83 fb 5c          	cmp    bx,0x5c
c0003a24:	74 35                	je     c0003a5b <create_name+0x8a>
c0003a26:	66 83 fb 2f          	cmp    bx,0x2f
c0003a2a:	74 2f                	je     c0003a5b <create_name+0x8a>
c0003a2c:	66 83 fb 7f          	cmp    bx,0x7f
c0003a30:	77 11                	ja     c0003a43 <create_name+0x72>
c0003a32:	0f b7 d3             	movzx  edx,bx
c0003a35:	b8 32 f6 01 c0       	mov    eax,0xc001f632
c0003a3a:	e8 11 e0 ff ff       	call   c0001a50 <chk_chr>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 ba                	jne    c00039fd <create_name+0x2c>
c0003a43:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003a49:	77 b2                	ja     c00039fd <create_name+0x2c>
c0003a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a4f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003a53:	46                   	inc    esi
c0003a54:	eb 97                	jmp    c00039ed <create_name+0x1c>
c0003a56:	40                   	inc    eax
c0003a57:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a5f:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a61:	80 fa 2f             	cmp    dl,0x2f
c0003a64:	74 f0                	je     c0003a56 <create_name+0x85>
c0003a66:	80 fa 5c             	cmp    dl,0x5c
c0003a69:	74 eb                	je     c0003a56 <create_name+0x85>
c0003a6b:	31 db                	xor    ebx,ebx
c0003a6d:	eb 02                	jmp    c0003a71 <create_name+0xa0>
c0003a6f:	b3 04                	mov    bl,0x4
c0003a71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a75:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003a78:	85 f6                	test   esi,esi
c0003a7a:	74 18                	je     c0003a94 <create_name+0xc3>
c0003a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a80:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003a85:	66 83 f8 20          	cmp    ax,0x20
c0003a89:	74 06                	je     c0003a91 <create_name+0xc0>
c0003a8b:	66 83 f8 2e          	cmp    ax,0x2e
c0003a8f:	75 03                	jne    c0003a94 <create_name+0xc3>
c0003a91:	4e                   	dec    esi
c0003a92:	eb e4                	jmp    c0003a78 <create_name+0xa7>
c0003a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a98:	31 ed                	xor    ebp,ebp
c0003a9a:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003aa0:	85 f6                	test   esi,esi
c0003aa2:	0f 84 55 ff ff ff    	je     c00039fd <create_name+0x2c>
c0003aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003aac:	8d 55 01             	lea    edx,[ebp+0x1]
c0003aaf:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003ab3:	66 83 f8 20          	cmp    ax,0x20
c0003ab7:	75 04                	jne    c0003abd <create_name+0xec>
c0003ab9:	89 d5                	mov    ebp,edx
c0003abb:	eb eb                	jmp    c0003aa8 <create_name+0xd7>
c0003abd:	85 ed                	test   ebp,ebp
c0003abf:	75 06                	jne    c0003ac7 <create_name+0xf6>
c0003ac1:	66 83 f8 2e          	cmp    ax,0x2e
c0003ac5:	75 08                	jne    c0003acf <create_name+0xfe>
c0003ac7:	83 cb 03             	or     ebx,0x3
c0003aca:	eb 03                	jmp    c0003acf <create_name+0xfe>
c0003acc:	4e                   	dec    esi
c0003acd:	74 0c                	je     c0003adb <create_name+0x10a>
c0003acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad3:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ad9:	75 f1                	jne    c0003acc <create_name+0xfb>
c0003adb:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ae0:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ae3:	ba 20 00 00 00       	mov    edx,0x20
c0003ae8:	e8 35 df ff ff       	call   c0001a22 <mem_set>
c0003aed:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003af5:	31 c9                	xor    ecx,ecx
c0003af7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003afc:	8d 45 01             	lea    eax,[ebp+0x1]
c0003aff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b07:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b0b:	66 85 ed             	test   bp,bp
c0003b0e:	0f 84 30 01 00 00    	je     c0003c44 <create_name+0x273>
c0003b14:	66 83 fd 20          	cmp    bp,0x20
c0003b18:	74 10                	je     c0003b2a <create_name+0x159>
c0003b1a:	66 83 fd 2e          	cmp    bp,0x2e
c0003b1e:	75 13                	jne    c0003b33 <create_name+0x162>
c0003b20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b24:	0f 84 6b 01 00 00    	je     c0003c95 <create_name+0x2c4>
c0003b2a:	83 cb 03             	or     ebx,0x3
c0003b2d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003b31:	eb c9                	jmp    c0003afc <create_name+0x12b>
c0003b33:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003b37:	73 0b                	jae    c0003b44 <create_name+0x173>
c0003b39:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b3d:	75 47                	jne    c0003b86 <create_name+0x1b5>
c0003b3f:	e9 51 01 00 00       	jmp    c0003c95 <create_name+0x2c4>
c0003b44:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003b49:	75 10                	jne    c0003b5b <create_name+0x18a>
c0003b4b:	83 cb 03             	or     ebx,0x3
c0003b4e:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b56:	e9 e9 00 00 00       	jmp    c0003c44 <create_name+0x273>
c0003b5b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b5f:	74 0d                	je     c0003b6e <create_name+0x19d>
c0003b61:	83 cb 03             	or     ebx,0x3
c0003b64:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b68:	0f 87 d6 00 00 00    	ja     c0003c44 <create_name+0x273>
c0003b6e:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003b73:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003b77:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b7f:	b9 08 00 00 00       	mov    ecx,0x8
c0003b84:	eb a7                	jmp    c0003b2d <create_name+0x15c>
c0003b86:	66 83 fd 7f          	cmp    bp,0x7f
c0003b8a:	76 68                	jbe    c0003bf4 <create_name+0x223>
c0003b8c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003b90:	88 da                	mov    dl,bl
c0003b92:	83 ca 02             	or     edx,0x2
c0003b95:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003b99:	50                   	push   eax
c0003b9a:	50                   	push   eax
c0003b9b:	68 b5 01 00 00       	push   0x1b5
c0003ba0:	55                   	push   ebp
c0003ba1:	e8 48 46 00 00       	call   c00081ee <ff_uni2oem>
c0003ba6:	83 c4 10             	add    esp,0x10
c0003ba9:	89 c5                	mov    ebp,eax
c0003bab:	a8 80                	test   al,0x80
c0003bad:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003bb1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003bb5:	74 0c                	je     c0003bc3 <create_name+0x1f2>
c0003bb7:	83 e5 7f             	and    ebp,0x7f
c0003bba:	0f b6 ad 80 f5 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe0a80]
c0003bc1:	eb 2a                	jmp    c0003bed <create_name+0x21c>
c0003bc3:	66 3d ff 00          	cmp    ax,0xff
c0003bc7:	76 24                	jbe    c0003bed <create_name+0x21c>
c0003bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bcd:	48                   	dec    eax
c0003bce:	39 c8                	cmp    eax,ecx
c0003bd0:	77 0c                	ja     c0003bde <create_name+0x20d>
c0003bd2:	83 cb 03             	or     ebx,0x3
c0003bd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003bd9:	e9 4f ff ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003bde:	89 e8                	mov    eax,ebp
c0003be0:	88 d3                	mov    bl,dl
c0003be2:	66 c1 e8 08          	shr    ax,0x8
c0003be6:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003bea:	41                   	inc    ecx
c0003beb:	eb 4b                	jmp    c0003c38 <create_name+0x267>
c0003bed:	88 d3                	mov    bl,dl
c0003bef:	66 85 ed             	test   bp,bp
c0003bf2:	74 19                	je     c0003c0d <create_name+0x23c>
c0003bf4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003bf8:	0f b7 d5             	movzx  edx,bp
c0003bfb:	b8 3b f6 01 c0       	mov    eax,0xc001f63b
c0003c00:	e8 4b de ff ff       	call   c0001a50 <chk_chr>
c0003c05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c09:	85 c0                	test   eax,eax
c0003c0b:	74 0a                	je     c0003c17 <create_name+0x246>
c0003c0d:	83 cb 03             	or     ebx,0x3
c0003c10:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c15:	eb 21                	jmp    c0003c38 <create_name+0x267>
c0003c17:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c1a:	66 83 f8 19          	cmp    ax,0x19
c0003c1e:	77 07                	ja     c0003c27 <create_name+0x256>
c0003c20:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c25:	eb 11                	jmp    c0003c38 <create_name+0x267>
c0003c27:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c2a:	66 83 f8 19          	cmp    ax,0x19
c0003c2e:	77 08                	ja     c0003c38 <create_name+0x267>
c0003c30:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003c35:	83 ed 20             	sub    ebp,0x20
c0003c38:	89 e8                	mov    eax,ebp
c0003c3a:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c3e:	41                   	inc    ecx
c0003c3f:	e9 e9 fe ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003c44:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003c48:	75 04                	jne    c0003c4e <create_name+0x27d>
c0003c4a:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003c4e:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003c53:	75 05                	jne    c0003c5a <create_name+0x289>
c0003c55:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c5a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c5e:	83 e0 0c             	and    eax,0xc
c0003c61:	3c 0c                	cmp    al,0xc
c0003c63:	74 0b                	je     c0003c70 <create_name+0x29f>
c0003c65:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c69:	83 e0 03             	and    eax,0x3
c0003c6c:	3c 03                	cmp    al,0x3
c0003c6e:	75 05                	jne    c0003c75 <create_name+0x2a4>
c0003c70:	83 cb 02             	or     ebx,0x2
c0003c73:	eb 19                	jmp    c0003c8e <create_name+0x2bd>
c0003c75:	f6 c3 02             	test   bl,0x2
c0003c78:	75 14                	jne    c0003c8e <create_name+0x2bd>
c0003c7a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003c7f:	74 03                	je     c0003c84 <create_name+0x2b3>
c0003c81:	83 cb 10             	or     ebx,0x10
c0003c84:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003c89:	74 03                	je     c0003c8e <create_name+0x2bd>
c0003c8b:	83 cb 08             	or     ebx,0x8
c0003c8e:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003c91:	31 c0                	xor    eax,eax
c0003c93:	eb 10                	jmp    c0003ca5 <create_name+0x2d4>
c0003c95:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c9a:	0f 85 ce fe ff ff    	jne    c0003b6e <create_name+0x19d>
c0003ca0:	e9 a6 fe ff ff       	jmp    c0003b4b <create_name+0x17a>
c0003ca5:	83 c4 3c             	add    esp,0x3c
c0003ca8:	5b                   	pop    ebx
c0003ca9:	5e                   	pop    esi
c0003caa:	5f                   	pop    edi
c0003cab:	5d                   	pop    ebp
c0003cac:	c3                   	ret    

c0003cad <xname_sum>:
c0003cad:	56                   	push   esi
c0003cae:	53                   	push   ebx
c0003caf:	89 c6                	mov    esi,eax
c0003cb1:	51                   	push   ecx
c0003cb2:	31 db                	xor    ebx,ebx
c0003cb4:	83 c6 02             	add    esi,0x2
c0003cb7:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003cbb:	66 85 c0             	test   ax,ax
c0003cbe:	74 1f                	je     c0003cdf <xname_sum+0x32>
c0003cc0:	83 ec 0c             	sub    esp,0xc
c0003cc3:	66 d1 cb             	ror    bx,1
c0003cc6:	50                   	push   eax
c0003cc7:	e8 1e 46 00 00       	call   c00082ea <ff_wtoupper>
c0003ccc:	83 c4 10             	add    esp,0x10
c0003ccf:	0f b6 d0             	movzx  edx,al
c0003cd2:	66 c1 e8 08          	shr    ax,0x8
c0003cd6:	01 d3                	add    ebx,edx
c0003cd8:	66 d1 cb             	ror    bx,1
c0003cdb:	01 c3                	add    ebx,eax
c0003cdd:	eb d5                	jmp    c0003cb4 <xname_sum+0x7>
c0003cdf:	89 d8                	mov    eax,ebx
c0003ce1:	5a                   	pop    edx
c0003ce2:	5b                   	pop    ebx
c0003ce3:	5e                   	pop    esi
c0003ce4:	c3                   	ret    

c0003ce5 <create_xdir>:
c0003ce5:	55                   	push   ebp
c0003ce6:	b9 40 00 00 00       	mov    ecx,0x40
c0003ceb:	57                   	push   edi
c0003cec:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf1:	56                   	push   esi
c0003cf2:	31 ff                	xor    edi,edi
c0003cf4:	53                   	push   ebx
c0003cf5:	be 40 00 00 00       	mov    esi,0x40
c0003cfa:	89 c3                	mov    ebx,eax
c0003cfc:	83 ec 1c             	sub    esp,0x1c
c0003cff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d03:	31 d2                	xor    edx,edx
c0003d05:	e8 18 dd ff ff       	call   c0001a22 <mem_set>
c0003d0a:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d0d:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d11:	31 c9                	xor    ecx,ecx
c0003d13:	8d 46 01             	lea    eax,[esi+0x1]
c0003d16:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d1a:	83 c6 02             	add    esi,0x2
c0003d1d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d21:	66 85 ed             	test   bp,bp
c0003d24:	74 12                	je     c0003d38 <create_xdir+0x53>
c0003d26:	0f b6 c1             	movzx  eax,cl
c0003d29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d2d:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003d31:	66 83 fd 01          	cmp    bp,0x1
c0003d35:	80 d9 ff             	sbb    cl,0xff
c0003d38:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003d3b:	0f b7 d5             	movzx  edx,bp
c0003d3e:	83 c6 02             	add    esi,0x2
c0003d41:	e8 ba dc ff ff       	call   c0001a00 <st_word>
c0003d46:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003d4c:	75 d3                	jne    c0003d21 <create_xdir+0x3c>
c0003d4e:	8d 47 01             	lea    eax,[edi+0x1]
c0003d51:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d55:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003d59:	0f b6 c1             	movzx  eax,cl
c0003d5c:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003d61:	74 07                	je     c0003d6a <create_xdir+0x85>
c0003d63:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003d68:	eb a9                	jmp    c0003d13 <create_xdir+0x2e>
c0003d6a:	8d 47 02             	lea    eax,[edi+0x2]
c0003d6d:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003d70:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003d73:	89 d0                	mov    eax,edx
c0003d75:	e8 33 ff ff ff       	call   c0003cad <xname_sum>
c0003d7a:	83 c4 1c             	add    esp,0x1c
c0003d7d:	0f b7 d0             	movzx  edx,ax
c0003d80:	8d 43 24             	lea    eax,[ebx+0x24]
c0003d83:	5b                   	pop    ebx
c0003d84:	5e                   	pop    esi
c0003d85:	5f                   	pop    edi
c0003d86:	5d                   	pop    ebp
c0003d87:	e9 74 dc ff ff       	jmp    c0001a00 <st_word>

c0003d8c <cmp_lfn>:
c0003d8c:	55                   	push   ebp
c0003d8d:	57                   	push   edi
c0003d8e:	89 d7                	mov    edi,edx
c0003d90:	56                   	push   esi
c0003d91:	53                   	push   ebx
c0003d92:	83 ec 1c             	sub    esp,0x1c
c0003d95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003d99:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003d9c:	e8 ed db ff ff       	call   c000198e <ld_word>
c0003da1:	66 85 c0             	test   ax,ax
c0003da4:	74 07                	je     c0003dad <cmp_lfn+0x21>
c0003da6:	31 c0                	xor    eax,eax
c0003da8:	e9 9a 00 00 00       	jmp    c0003e47 <cmp_lfn+0xbb>
c0003dad:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003daf:	bd 01 00 00 00       	mov    ebp,0x1
c0003db4:	83 e3 3f             	and    ebx,0x3f
c0003db7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003dbf:	4b                   	dec    ebx
c0003dc0:	6b db 0d             	imul   ebx,ebx,0xd
c0003dc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003dc7:	0f b6 80 00 f6 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0a00]
c0003dce:	01 f8                	add    eax,edi
c0003dd0:	e8 b9 db ff ff       	call   c000198e <ld_word>
c0003dd5:	66 85 ed             	test   bp,bp
c0003dd8:	89 c6                	mov    esi,eax
c0003dda:	74 3c                	je     c0003e18 <cmp_lfn+0x8c>
c0003ddc:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003de2:	77 c2                	ja     c0003da6 <cmp_lfn+0x1a>
c0003de4:	83 ec 0c             	sub    esp,0xc
c0003de7:	0f b7 c0             	movzx  eax,ax
c0003dea:	50                   	push   eax
c0003deb:	e8 fa 44 00 00       	call   c00082ea <ff_wtoupper>
c0003df0:	89 c5                	mov    ebp,eax
c0003df2:	8d 43 01             	lea    eax,[ebx+0x1]
c0003df5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003df9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003dfd:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e01:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e04:	e8 e1 44 00 00       	call   c00082ea <ff_wtoupper>
c0003e09:	83 c4 10             	add    esp,0x10
c0003e0c:	39 c5                	cmp    ebp,eax
c0003e0e:	75 96                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e10:	89 f5                	mov    ebp,esi
c0003e12:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e16:	eb 04                	jmp    c0003e1c <cmp_lfn+0x90>
c0003e18:	66 46                	inc    si
c0003e1a:	75 8a                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e1c:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e20:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e25:	75 9c                	jne    c0003dc3 <cmp_lfn+0x37>
c0003e27:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e2a:	74 16                	je     c0003e42 <cmp_lfn+0xb6>
c0003e2c:	66 85 ed             	test   bp,bp
c0003e2f:	74 11                	je     c0003e42 <cmp_lfn+0xb6>
c0003e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e35:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003e3a:	0f 94 c0             	sete   al
c0003e3d:	0f b6 c0             	movzx  eax,al
c0003e40:	eb 05                	jmp    c0003e47 <cmp_lfn+0xbb>
c0003e42:	b8 01 00 00 00       	mov    eax,0x1
c0003e47:	83 c4 1c             	add    esp,0x1c
c0003e4a:	5b                   	pop    ebx
c0003e4b:	5e                   	pop    esi
c0003e4c:	5f                   	pop    edi
c0003e4d:	5d                   	pop    ebp
c0003e4e:	c3                   	ret    

c0003e4f <dir_find>:
c0003e4f:	55                   	push   ebp
c0003e50:	31 d2                	xor    edx,edx
c0003e52:	57                   	push   edi
c0003e53:	56                   	push   esi
c0003e54:	53                   	push   ebx
c0003e55:	89 c3                	mov    ebx,eax
c0003e57:	83 ec 1c             	sub    esp,0x1c
c0003e5a:	8b 30                	mov    esi,DWORD PTR [eax]
c0003e5c:	e8 89 f0 ff ff       	call   c0002eea <dir_sdi>
c0003e61:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e64:	85 c0                	test   eax,eax
c0003e66:	0f 85 9e 01 00 00    	jne    c000400a <dir_find+0x1bb>
c0003e6c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003e6f:	0f 85 8d 00 00 00    	jne    c0003f02 <dir_find+0xb3>
c0003e75:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003e78:	e8 30 fe ff ff       	call   c0003cad <xname_sum>
c0003e7d:	89 c7                	mov    edi,eax
c0003e7f:	31 d2                	xor    edx,edx
c0003e81:	89 d8                	mov    eax,ebx
c0003e83:	e8 72 f8 ff ff       	call   c00036fa <dir_read>
c0003e88:	85 c0                	test   eax,eax
c0003e8a:	0f 85 5e 01 00 00    	jne    c0003fee <dir_find+0x19f>
c0003e90:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003e93:	8d 41 24             	lea    eax,[ecx+0x24]
c0003e96:	e8 f3 da ff ff       	call   c000198e <ld_word>
c0003e9b:	66 39 f8             	cmp    ax,di
c0003e9e:	75 df                	jne    c0003e7f <dir_find+0x30>
c0003ea0:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003ea3:	31 ed                	xor    ebp,ebp
c0003ea5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003ea9:	ba 40 00 00 00       	mov    edx,0x40
c0003eae:	89 e9                	mov    ecx,ebp
c0003eb0:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003eb4:	0f 84 42 01 00 00    	je     c0003ffc <dir_find+0x1ad>
c0003eba:	f6 c2 1f             	test   dl,0x1f
c0003ebd:	75 03                	jne    c0003ec2 <dir_find+0x73>
c0003ebf:	83 c2 02             	add    edx,0x2
c0003ec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003ec6:	89 d0                	mov    eax,edx
c0003ec8:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003ecb:	e8 be da ff ff       	call   c000198e <ld_word>
c0003ed0:	83 ec 0c             	sub    esp,0xc
c0003ed3:	0f b7 c0             	movzx  eax,ax
c0003ed6:	50                   	push   eax
c0003ed7:	e8 0e 44 00 00       	call   c00082ea <ff_wtoupper>
c0003edc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ee0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ee3:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003ee7:	89 04 24             	mov    DWORD PTR [esp],eax
c0003eea:	e8 fb 43 00 00       	call   c00082ea <ff_wtoupper>
c0003eef:	83 c4 10             	add    esp,0x10
c0003ef2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003ef6:	75 87                	jne    c0003e7f <dir_find+0x30>
c0003ef8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003efc:	45                   	inc    ebp
c0003efd:	83 c2 02             	add    edx,0x2
c0003f00:	eb ac                	jmp    c0003eae <dir_find+0x5f>
c0003f02:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f09:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f0e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f13:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f16:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f19:	89 f0                	mov    eax,esi
c0003f1b:	e8 4c e2 ff ff       	call   c000216c <move_window>
c0003f20:	85 c0                	test   eax,eax
c0003f22:	0f 85 c6 00 00 00    	jne    c0003fee <dir_find+0x19f>
c0003f28:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f2b:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003f2e:	84 c9                	test   cl,cl
c0003f30:	0f 84 bd 00 00 00    	je     c0003ff3 <dir_find+0x1a4>
c0003f36:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003f39:	88 d0                	mov    al,dl
c0003f3b:	83 e0 3f             	and    eax,0x3f
c0003f3e:	80 f9 e5             	cmp    cl,0xe5
c0003f41:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003f44:	0f 84 87 00 00 00    	je     c0003fd1 <dir_find+0x182>
c0003f4a:	80 e2 08             	and    dl,0x8
c0003f4d:	74 06                	je     c0003f55 <dir_find+0x106>
c0003f4f:	3c 0f                	cmp    al,0xf
c0003f51:	75 7e                	jne    c0003fd1 <dir_find+0x182>
c0003f53:	eb 04                	jmp    c0003f59 <dir_find+0x10a>
c0003f55:	3c 0f                	cmp    al,0xf
c0003f57:	75 4c                	jne    c0003fa5 <dir_find+0x156>
c0003f59:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003f5d:	75 7e                	jne    c0003fdd <dir_find+0x18e>
c0003f5f:	f6 c1 40             	test   cl,0x40
c0003f62:	74 12                	je     c0003f76 <dir_find+0x127>
c0003f64:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003f67:	83 e1 bf             	and    ecx,0xffffffbf
c0003f6a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003f6e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003f71:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003f74:	eb 06                	jmp    c0003f7c <dir_find+0x12d>
c0003f76:	89 f8                	mov    eax,edi
c0003f78:	38 c8                	cmp    al,cl
c0003f7a:	75 5c                	jne    c0003fd8 <dir_find+0x189>
c0003f7c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003f80:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f85:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003f88:	75 53                	jne    c0003fdd <dir_find+0x18e>
c0003f8a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0003f8e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f91:	89 ea                	mov    edx,ebp
c0003f93:	e8 f4 fd ff ff       	call   c0003d8c <cmp_lfn>
c0003f98:	85 c0                	test   eax,eax
c0003f9a:	74 41                	je     c0003fdd <dir_find+0x18e>
c0003f9c:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0003fa0:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003fa3:	eb 38                	jmp    c0003fdd <dir_find+0x18e>
c0003fa5:	89 f8                	mov    eax,edi
c0003fa7:	84 c0                	test   al,al
c0003fa9:	75 0d                	jne    c0003fb8 <dir_find+0x169>
c0003fab:	89 e8                	mov    eax,ebp
c0003fad:	e8 98 de ff ff       	call   c0001e4a <sum_sfn>
c0003fb2:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0003fb6:	74 52                	je     c000400a <dir_find+0x1bb>
c0003fb8:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003fbc:	75 13                	jne    c0003fd1 <dir_find+0x182>
c0003fbe:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0003fc1:	b9 0b 00 00 00       	mov    ecx,0xb
c0003fc6:	89 e8                	mov    eax,ebp
c0003fc8:	e8 60 da ff ff       	call   c0001a2d <mem_cmp>
c0003fcd:	85 c0                	test   eax,eax
c0003fcf:	74 39                	je     c000400a <dir_find+0x1bb>
c0003fd1:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fd8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fdd:	31 d2                	xor    edx,edx
c0003fdf:	89 d8                	mov    eax,ebx
c0003fe1:	e8 5c f4 ff ff       	call   c0003442 <dir_next>
c0003fe6:	85 c0                	test   eax,eax
c0003fe8:	0f 84 25 ff ff ff    	je     c0003f13 <dir_find+0xc4>
c0003fee:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ff1:	eb 17                	jmp    c000400a <dir_find+0x1bb>
c0003ff3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0003ffa:	eb 0e                	jmp    c000400a <dir_find+0x1bb>
c0003ffc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fff:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004004:	0f 85 75 fe ff ff    	jne    c0003e7f <dir_find+0x30>
c000400a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000400d:	83 c4 1c             	add    esp,0x1c
c0004010:	5b                   	pop    ebx
c0004011:	5e                   	pop    esi
c0004012:	5f                   	pop    edi
c0004013:	5d                   	pop    ebp
c0004014:	c3                   	ret    

c0004015 <dir_register>:
c0004015:	55                   	push   ebp
c0004016:	57                   	push   edi
c0004017:	56                   	push   esi
c0004018:	be 06 00 00 00       	mov    esi,0x6
c000401d:	53                   	push   ebx
c000401e:	83 ec 6c             	sub    esp,0x6c
c0004021:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004025:	0f 85 62 02 00 00    	jne    c000428d <dir_register+0x278>
c000402b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000402d:	31 ff                	xor    edi,edi
c000402f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004032:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004037:	74 03                	je     c000403c <dir_register+0x27>
c0004039:	47                   	inc    edi
c000403a:	eb f6                	jmp    c0004032 <dir_register+0x1d>
c000403c:	89 c3                	mov    ebx,eax
c000403e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004042:	0f 85 e1 00 00 00    	jne    c0004129 <dir_register+0x114>
c0004048:	83 c7 0e             	add    edi,0xe
c000404b:	b9 0f 00 00 00       	mov    ecx,0xf
c0004050:	89 f8                	mov    eax,edi
c0004052:	31 d2                	xor    edx,edx
c0004054:	f7 f1                	div    ecx
c0004056:	8d 50 02             	lea    edx,[eax+0x2]
c0004059:	89 c7                	mov    edi,eax
c000405b:	89 d8                	mov    eax,ebx
c000405d:	e8 12 f8 ff ff       	call   c0003874 <dir_alloc>
c0004062:	89 c6                	mov    esi,eax
c0004064:	85 c0                	test   eax,eax
c0004066:	0f 85 21 02 00 00    	jne    c000428d <dir_register+0x278>
c000406c:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004072:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004075:	c1 e7 05             	shl    edi,0x5
c0004078:	29 f8                	sub    eax,edi
c000407a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000407d:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004080:	a8 04                	test   al,0x4
c0004082:	0f 84 91 00 00 00    	je     c0004119 <dir_register+0x104>
c0004088:	83 e0 fb             	and    eax,0xfffffffb
c000408b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000408e:	89 d8                	mov    eax,ebx
c0004090:	e8 25 ec ff ff       	call   c0002cba <fill_first_frag>
c0004095:	85 c0                	test   eax,eax
c0004097:	0f 85 ee 01 00 00    	jne    c000428b <dir_register+0x276>
c000409d:	83 c9 ff             	or     ecx,0xffffffff
c00040a0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00040a3:	89 d8                	mov    eax,ebx
c00040a5:	e8 db eb ff ff       	call   c0002c85 <fill_last_frag>
c00040aa:	85 c0                	test   eax,eax
c00040ac:	0f 85 d9 01 00 00    	jne    c000428b <dir_register+0x276>
c00040b2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00040b6:	74 61                	je     c0004119 <dir_register+0x104>
c00040b8:	89 da                	mov    edx,ebx
c00040ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040be:	e8 ea f5 ff ff       	call   c00036ad <load_obj_xdir>
c00040c3:	85 c0                	test   eax,eax
c00040c5:	0f 85 c0 01 00 00    	jne    c000428b <dir_register+0x276>
c00040cb:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00040cf:	31 c9                	xor    ecx,ecx
c00040d1:	c1 e2 09             	shl    edx,0x9
c00040d4:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00040d7:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00040da:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00040dd:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00040e0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040e3:	83 c0 38             	add    eax,0x38
c00040e6:	e8 1c d9 ff ff       	call   c0001a07 <st_qword>
c00040eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040ee:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040f1:	83 c0 28             	add    eax,0x28
c00040f4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00040f7:	e8 0b d9 ff ff       	call   c0001a07 <st_qword>
c00040fc:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040ff:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004102:	83 c8 01             	or     eax,0x1
c0004105:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c0004108:	8d 44 24 14          	lea    eax,[esp+0x14]
c000410c:	e8 db f7 ff ff       	call   c00038ec <store_xdir>
c0004111:	85 c0                	test   eax,eax
c0004113:	0f 85 72 01 00 00    	jne    c000428b <dir_register+0x276>
c0004119:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000411c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000411f:	e8 c1 fb ff ff       	call   c0003ce5 <create_xdir>
c0004124:	e9 64 01 00 00       	jmp    c000428d <dir_register+0x278>
c0004129:	8d 40 3c             	lea    eax,[eax+0x3c]
c000412c:	b9 0c 00 00 00       	mov    ecx,0xc
c0004131:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004135:	89 c2                	mov    edx,eax
c0004137:	8d 44 24 14          	lea    eax,[esp+0x14]
c000413b:	e8 cd d8 ff ff       	call   c0001a0d <mem_cpy>
c0004140:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004145:	74 58                	je     c000419f <dir_register+0x18a>
c0004147:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000414b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004153:	83 ec 0c             	sub    esp,0xc
c0004156:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004159:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000415d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004161:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004165:	e8 24 dc ff ff       	call   c0001d8e <gen_numname>
c000416a:	89 d8                	mov    eax,ebx
c000416c:	e8 de fc ff ff       	call   c0003e4f <dir_find>
c0004171:	83 c4 10             	add    esp,0x10
c0004174:	89 c6                	mov    esi,eax
c0004176:	85 c0                	test   eax,eax
c0004178:	75 15                	jne    c000418f <dir_register+0x17a>
c000417a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000417e:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004183:	75 ce                	jne    c0004153 <dir_register+0x13e>
c0004185:	be 07 00 00 00       	mov    esi,0x7
c000418a:	e9 fe 00 00 00       	jmp    c000428d <dir_register+0x278>
c000418f:	83 f8 04             	cmp    eax,0x4
c0004192:	0f 85 f5 00 00 00    	jne    c000428d <dir_register+0x278>
c0004198:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000419c:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000419f:	b9 01 00 00 00       	mov    ecx,0x1
c00041a4:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00041a9:	74 0f                	je     c00041ba <dir_register+0x1a5>
c00041ab:	b9 0d 00 00 00       	mov    ecx,0xd
c00041b0:	8d 47 0c             	lea    eax,[edi+0xc]
c00041b3:	31 d2                	xor    edx,edx
c00041b5:	f7 f1                	div    ecx
c00041b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00041ba:	89 ca                	mov    edx,ecx
c00041bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041c0:	89 d8                	mov    eax,ebx
c00041c2:	e8 ad f6 ff ff       	call   c0003874 <dir_alloc>
c00041c7:	89 c6                	mov    esi,eax
c00041c9:	85 c0                	test   eax,eax
c00041cb:	0f 85 bc 00 00 00    	jne    c000428d <dir_register+0x278>
c00041d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041d5:	49                   	dec    ecx
c00041d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041da:	74 6a                	je     c0004246 <dir_register+0x231>
c00041dc:	89 c8                	mov    eax,ecx
c00041de:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00041e1:	c1 e0 05             	shl    eax,0x5
c00041e4:	29 c2                	sub    edx,eax
c00041e6:	89 d8                	mov    eax,ebx
c00041e8:	e8 fd ec ff ff       	call   c0002eea <dir_sdi>
c00041ed:	89 c6                	mov    esi,eax
c00041ef:	85 c0                	test   eax,eax
c00041f1:	0f 85 96 00 00 00    	jne    c000428d <dir_register+0x278>
c00041f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00041fb:	e8 4a dc ff ff       	call   c0001e4a <sum_sfn>
c0004200:	0f b6 f8             	movzx  edi,al
c0004203:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004206:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004209:	89 e8                	mov    eax,ebp
c000420b:	e8 5c df ff ff       	call   c000216c <move_window>
c0004210:	89 c6                	mov    esi,eax
c0004212:	85 c0                	test   eax,eax
c0004214:	75 77                	jne    c000428d <dir_register+0x278>
c0004216:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000421b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000421e:	83 ec 0c             	sub    esp,0xc
c0004221:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004224:	57                   	push   edi
c0004225:	e8 e0 da ff ff       	call   c0001d0a <put_lfn>
c000422a:	31 d2                	xor    edx,edx
c000422c:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004230:	89 d8                	mov    eax,ebx
c0004232:	e8 0b f2 ff ff       	call   c0003442 <dir_next>
c0004237:	83 c4 10             	add    esp,0x10
c000423a:	89 c6                	mov    esi,eax
c000423c:	85 c0                	test   eax,eax
c000423e:	75 4d                	jne    c000428d <dir_register+0x278>
c0004240:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004244:	75 bd                	jne    c0004203 <dir_register+0x1ee>
c0004246:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004249:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000424c:	89 e8                	mov    eax,ebp
c000424e:	e8 19 df ff ff       	call   c000216c <move_window>
c0004253:	89 c6                	mov    esi,eax
c0004255:	85 c0                	test   eax,eax
c0004257:	75 34                	jne    c000428d <dir_register+0x278>
c0004259:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000425c:	b9 20 00 00 00       	mov    ecx,0x20
c0004261:	31 d2                	xor    edx,edx
c0004263:	e8 ba d7 ff ff       	call   c0001a22 <mem_set>
c0004268:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000426b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000426f:	b9 0b 00 00 00       	mov    ecx,0xb
c0004274:	e8 94 d7 ff ff       	call   c0001a0d <mem_cpy>
c0004279:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000427c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000427f:	83 e0 18             	and    eax,0x18
c0004282:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004285:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004289:	eb 02                	jmp    c000428d <dir_register+0x278>
c000428b:	89 c6                	mov    esi,eax
c000428d:	83 c4 6c             	add    esp,0x6c
c0004290:	89 f0                	mov    eax,esi
c0004292:	5b                   	pop    ebx
c0004293:	5e                   	pop    esi
c0004294:	5f                   	pop    edi
c0004295:	5d                   	pop    ebp
c0004296:	c3                   	ret    

c0004297 <sync_fs>:
c0004297:	56                   	push   esi
c0004298:	53                   	push   ebx
c0004299:	53                   	push   ebx
c000429a:	89 c3                	mov    ebx,eax
c000429c:	e8 37 de ff ff       	call   c00020d8 <sync_window>
c00042a1:	85 c0                	test   eax,eax
c00042a3:	0f 85 b1 00 00 00    	jne    c000435a <sync_fs+0xc3>
c00042a9:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00042ac:	0f 85 8e 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042b2:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00042b6:	0f 85 84 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042bc:	b9 00 02 00 00       	mov    ecx,0x200
c00042c1:	8d 73 54             	lea    esi,[ebx+0x54]
c00042c4:	31 d2                	xor    edx,edx
c00042c6:	89 f0                	mov    eax,esi
c00042c8:	e8 55 d7 ff ff       	call   c0001a22 <mem_set>
c00042cd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00042d3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00042d8:	e8 23 d7 ff ff       	call   c0001a00 <st_word>
c00042dd:	ba 52 52 61 41       	mov    edx,0x41615252
c00042e2:	89 f0                	mov    eax,esi
c00042e4:	e8 1b d7 ff ff       	call   c0001a04 <st_dword>
c00042e9:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00042ef:	ba 72 72 41 61       	mov    edx,0x61417272
c00042f4:	e8 0b d7 ff ff       	call   c0001a04 <st_dword>
c00042f9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042fc:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004302:	e8 fd d6 ff ff       	call   c0001a04 <st_dword>
c0004307:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000430a:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004310:	e8 ef d6 ff ff       	call   c0001a04 <st_dword>
c0004315:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004318:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000431b:	83 c0 01             	add    eax,0x1
c000431e:	83 d2 00             	adc    edx,0x0
c0004321:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004324:	83 ec 0c             	sub    esp,0xc
c0004327:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000432a:	6a 01                	push   0x1
c000432c:	52                   	push   edx
c000432d:	50                   	push   eax
c000432e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004332:	56                   	push   esi
c0004333:	50                   	push   eax
c0004334:	e8 20 d6 ff ff       	call   c0001959 <disk_write>
c0004339:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000433d:	83 c4 20             	add    esp,0x20
c0004340:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004344:	51                   	push   ecx
c0004345:	6a 00                	push   0x0
c0004347:	6a 00                	push   0x0
c0004349:	50                   	push   eax
c000434a:	e8 20 d6 ff ff       	call   c000196f <disk_ioctl>
c000434f:	83 c4 10             	add    esp,0x10
c0004352:	85 c0                	test   eax,eax
c0004354:	0f 95 c0             	setne  al
c0004357:	0f b6 c0             	movzx  eax,al
c000435a:	5a                   	pop    edx
c000435b:	5b                   	pop    ebx
c000435c:	5e                   	pop    esi
c000435d:	c3                   	ret    

c000435e <create_partition>:
c000435e:	55                   	push   ebp
c000435f:	0f b6 c0             	movzx  eax,al
c0004362:	57                   	push   edi
c0004363:	56                   	push   esi
c0004364:	53                   	push   ebx
c0004365:	83 ec 60             	sub    esp,0x60
c0004368:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000436c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004370:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004374:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004378:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000437c:	50                   	push   eax
c000437d:	6a 01                	push   0x1
c000437f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004383:	e8 e7 d5 ff ff       	call   c000196f <disk_ioctl>
c0004388:	83 c4 10             	add    esp,0x10
c000438b:	85 c0                	test   eax,eax
c000438d:	74 0a                	je     c0004399 <create_partition+0x3b>
c000438f:	b8 01 00 00 00       	mov    eax,0x1
c0004394:	e9 67 05 00 00       	jmp    c0004900 <create_partition+0x5a2>
c0004399:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000439d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00043a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00043a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00043a9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00043ae:	0f 86 ed 03 00 00    	jbe    c00047a1 <create_partition+0x443>
c00043b4:	83 c0 df             	add    eax,0xffffffdf
c00043b7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00043bf:	83 d2 ff             	adc    edx,0xffffffff
c00043c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00043ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043d2:	83 c0 bd             	add    eax,0xffffffbd
c00043d5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00043dc:	83 d2 ff             	adc    edx,0xffffffff
c00043df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00043e3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00043e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00043ef:	be 22 00 00 00       	mov    esi,0x22
c00043f4:	31 ff                	xor    edi,edi
c00043f6:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00043fe:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004406:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000440e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004412:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004418:	75 0e                	jne    c0004428 <create_partition+0xca>
c000441a:	b9 00 02 00 00       	mov    ecx,0x200
c000441f:	31 d2                	xor    edx,edx
c0004421:	89 d8                	mov    eax,ebx
c0004423:	e8 fa d5 ff ff       	call   c0001a22 <mem_set>
c0004428:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000442c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004434:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004437:	0f 84 23 01 00 00    	je     c0004560 <create_partition+0x202>
c000443d:	89 f0                	mov    eax,esi
c000443f:	89 fa                	mov    edx,edi
c0004441:	05 ff 07 00 00       	add    eax,0x7ff
c0004446:	83 d2 00             	adc    edx,0x0
c0004449:	89 c1                	mov    ecx,eax
c000444b:	89 d7                	mov    edi,edx
c000444d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004453:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004457:	89 ce                	mov    esi,ecx
c0004459:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000445d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004461:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004465:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004468:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000446c:	89 04 24             	mov    DWORD PTR [esp],eax
c000446f:	b8 64 00 00 00       	mov    eax,0x64
c0004474:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004477:	b8 00 00 00 00       	mov    eax,0x0
c000447c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004480:	72 41                	jb     c00044c3 <create_partition+0x165>
c0004482:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000448a:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000448e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004493:	01 c1                	add    ecx,eax
c0004495:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004499:	f7 24 24             	mul    DWORD PTR [esp]
c000449c:	6a 00                	push   0x0
c000449e:	01 ca                	add    edx,ecx
c00044a0:	6a 64                	push   0x64
c00044a2:	52                   	push   edx
c00044a3:	50                   	push   eax
c00044a4:	e8 23 a1 01 00       	call   c001e5cc <__udivdi3>
c00044a9:	83 c4 10             	add    esp,0x10
c00044ac:	05 ff 07 00 00       	add    eax,0x7ff
c00044b1:	83 d2 00             	adc    edx,0x0
c00044b4:	89 c1                	mov    ecx,eax
c00044b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ba:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044c0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00044c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00044c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00044ca:	01 f0                	add    eax,esi
c00044cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00044d0:	11 fa                	adc    edx,edi
c00044d2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00044d6:	19 d1                	sbb    ecx,edx
c00044d8:	73 2e                	jae    c0004508 <create_partition+0x1aa>
c00044da:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00044de:	89 f8                	mov    eax,edi
c00044e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00044e7:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00044eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044f3:	73 6b                	jae    c0004560 <create_partition+0x202>
c00044f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00044f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00044fd:	29 f0                	sub    eax,esi
c00044ff:	19 fa                	sbb    edx,edi
c0004501:	89 04 24             	mov    DWORD PTR [esp],eax
c0004504:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450c:	0b 04 24             	or     eax,DWORD PTR [esp]
c000450f:	74 4f                	je     c0004560 <create_partition+0x202>
c0004511:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004514:	b9 10 00 00 00       	mov    ecx,0x10
c0004519:	ba 10 f6 01 c0       	mov    edx,0xc001f610
c000451e:	e8 ea d4 ff ff       	call   c0001a0d <mem_cpy>
c0004523:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004527:	b9 10 00 00 00       	mov    ecx,0x10
c000452c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004530:	e8 2c db ff ff       	call   c0002061 <make_rand>
c0004535:	89 f2                	mov    edx,esi
c0004537:	89 f9                	mov    ecx,edi
c0004539:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000453d:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004541:	e8 c1 d4 ff ff       	call   c0001a07 <st_qword>
c0004546:	03 34 24             	add    esi,DWORD PTR [esp]
c0004549:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000454d:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004551:	89 f2                	mov    edx,esi
c0004553:	89 f9                	mov    ecx,edi
c0004555:	83 c2 ff             	add    edx,0xffffffff
c0004558:	83 d1 ff             	adc    ecx,0xffffffff
c000455b:	e8 a7 d4 ff ff       	call   c0001a07 <st_qword>
c0004560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004564:	83 e8 80             	sub    eax,0xffffff80
c0004567:	89 c5                	mov    ebp,eax
c0004569:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000456d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004573:	75 6b                	jne    c00045e0 <create_partition+0x282>
c0004575:	45                   	inc    ebp
c0004576:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000457a:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000457f:	e8 39 da ff ff       	call   c0001fbd <crc32>
c0004584:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000458a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000458e:	75 e5                	jne    c0004575 <create_partition+0x217>
c0004590:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004594:	31 d2                	xor    edx,edx
c0004596:	83 ec 0c             	sub    esp,0xc
c0004599:	c1 ed 09             	shr    ebp,0x9
c000459c:	6a 01                	push   0x1
c000459e:	8d 45 02             	lea    eax,[ebp+0x2]
c00045a1:	52                   	push   edx
c00045a2:	50                   	push   eax
c00045a3:	53                   	push   ebx
c00045a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045a8:	e8 ac d3 ff ff       	call   c0001959 <disk_write>
c00045ad:	83 c4 20             	add    esp,0x20
c00045b0:	85 c0                	test   eax,eax
c00045b2:	0f 85 d7 fd ff ff    	jne    c000438f <create_partition+0x31>
c00045b8:	83 ec 0c             	sub    esp,0xc
c00045bb:	31 d2                	xor    edx,edx
c00045bd:	6a 01                	push   0x1
c00045bf:	89 e8                	mov    eax,ebp
c00045c1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00045c5:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00045c9:	52                   	push   edx
c00045ca:	50                   	push   eax
c00045cb:	53                   	push   ebx
c00045cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045d0:	e8 84 d3 ff ff       	call   c0001959 <disk_write>
c00045d5:	83 c4 20             	add    esp,0x20
c00045d8:	85 c0                	test   eax,eax
c00045da:	0f 85 af fd ff ff    	jne    c000438f <create_partition+0x31>
c00045e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00045e8:	3d 00 40 00 00       	cmp    eax,0x4000
c00045ed:	74 0d                	je     c00045fc <create_partition+0x29e>
c00045ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00045f3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f7:	e9 12 fe ff ff       	jmp    c000440e <create_partition+0xb0>
c00045fc:	31 d2                	xor    edx,edx
c00045fe:	b9 00 02 00 00       	mov    ecx,0x200
c0004603:	89 d8                	mov    eax,ebx
c0004605:	8d 6b 20             	lea    ebp,[ebx+0x20]
c0004608:	e8 15 d4 ff ff       	call   c0001a22 <mem_set>
c000460d:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004610:	b9 10 00 00 00       	mov    ecx,0x10
c0004615:	ba 00 f5 01 c0       	mov    edx,0xc001f500
c000461a:	89 d8                	mov    eax,ebx
c000461c:	e8 ec d3 ff ff       	call   c0001a0d <mem_cpy>
c0004621:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004625:	8d 43 58             	lea    eax,[ebx+0x58]
c0004628:	f7 d2                	not    edx
c000462a:	e8 d5 d3 ff ff       	call   c0001a04 <st_dword>
c000462f:	8d 43 18             	lea    eax,[ebx+0x18]
c0004632:	31 c9                	xor    ecx,ecx
c0004634:	89 04 24             	mov    DWORD PTR [esp],eax
c0004637:	ba 01 00 00 00       	mov    edx,0x1
c000463c:	e8 c6 d3 ff ff       	call   c0001a07 <st_qword>
c0004641:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004645:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004649:	83 c2 ff             	add    edx,0xffffffff
c000464c:	89 e8                	mov    eax,ebp
c000464e:	83 d1 ff             	adc    ecx,0xffffffff
c0004651:	e8 b1 d3 ff ff       	call   c0001a07 <st_qword>
c0004656:	31 c9                	xor    ecx,ecx
c0004658:	8d 43 28             	lea    eax,[ebx+0x28]
c000465b:	ba 22 00 00 00       	mov    edx,0x22
c0004660:	e8 a2 d3 ff ff       	call   c0001a07 <st_qword>
c0004665:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004669:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000466d:	83 c2 de             	add    edx,0xffffffde
c0004670:	8d 43 30             	lea    eax,[ebx+0x30]
c0004673:	83 d1 ff             	adc    ecx,0xffffffff
c0004676:	31 f6                	xor    esi,esi
c0004678:	e8 8a d3 ff ff       	call   c0001a07 <st_qword>
c000467d:	8d 43 54             	lea    eax,[ebx+0x54]
c0004680:	ba 80 00 00 00       	mov    edx,0x80
c0004685:	e8 7a d3 ff ff       	call   c0001a04 <st_dword>
c000468a:	8d 43 50             	lea    eax,[ebx+0x50]
c000468d:	ba 80 00 00 00       	mov    edx,0x80
c0004692:	e8 6d d3 ff ff       	call   c0001a04 <st_dword>
c0004697:	ba 02 00 00 00       	mov    edx,0x2
c000469c:	89 f8                	mov    eax,edi
c000469e:	e8 61 d3 ff ff       	call   c0001a04 <st_dword>
c00046a3:	8d 53 38             	lea    edx,[ebx+0x38]
c00046a6:	b9 10 00 00 00       	mov    ecx,0x10
c00046ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046af:	e8 ad d9 ff ff       	call   c0002061 <make_rand>
c00046b4:	83 c8 ff             	or     eax,0xffffffff
c00046b7:	46                   	inc    esi
c00046b8:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00046bd:	e8 fb d8 ff ff       	call   c0001fbd <crc32>
c00046c2:	83 fe 5c             	cmp    esi,0x5c
c00046c5:	75 f0                	jne    c00046b7 <create_partition+0x359>
c00046c7:	f7 d0                	not    eax
c00046c9:	8d 73 10             	lea    esi,[ebx+0x10]
c00046cc:	89 c2                	mov    edx,eax
c00046ce:	89 f0                	mov    eax,esi
c00046d0:	e8 2f d3 ff ff       	call   c0001a04 <st_dword>
c00046d5:	83 ec 0c             	sub    esp,0xc
c00046d8:	6a 01                	push   0x1
c00046da:	6a 00                	push   0x0
c00046dc:	6a 01                	push   0x1
c00046de:	53                   	push   ebx
c00046df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046e3:	e8 71 d2 ff ff       	call   c0001959 <disk_write>
c00046e8:	83 c4 20             	add    esp,0x20
c00046eb:	85 c0                	test   eax,eax
c00046ed:	0f 85 9c fc ff ff    	jne    c000438f <create_partition+0x31>
c00046f3:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046f7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046fb:	83 c2 ff             	add    edx,0xffffffff
c00046fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004701:	83 d1 ff             	adc    ecx,0xffffffff
c0004704:	e8 fe d2 ff ff       	call   c0001a07 <st_qword>
c0004709:	ba 01 00 00 00       	mov    edx,0x1
c000470e:	31 c9                	xor    ecx,ecx
c0004710:	89 e8                	mov    eax,ebp
c0004712:	e8 f0 d2 ff ff       	call   c0001a07 <st_qword>
c0004717:	89 f8                	mov    eax,edi
c0004719:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000471d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004721:	31 ff                	xor    edi,edi
c0004723:	e8 df d2 ff ff       	call   c0001a07 <st_qword>
c0004728:	89 f0                	mov    eax,esi
c000472a:	31 d2                	xor    edx,edx
c000472c:	e8 d3 d2 ff ff       	call   c0001a04 <st_dword>
c0004731:	83 c8 ff             	or     eax,0xffffffff
c0004734:	47                   	inc    edi
c0004735:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c000473a:	e8 7e d8 ff ff       	call   c0001fbd <crc32>
c000473f:	83 ff 5c             	cmp    edi,0x5c
c0004742:	75 f0                	jne    c0004734 <create_partition+0x3d6>
c0004744:	f7 d0                	not    eax
c0004746:	89 c2                	mov    edx,eax
c0004748:	89 f0                	mov    eax,esi
c000474a:	e8 b5 d2 ff ff       	call   c0001a04 <st_dword>
c000474f:	83 ec 0c             	sub    esp,0xc
c0004752:	6a 01                	push   0x1
c0004754:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004758:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000475c:	83 c0 ff             	add    eax,0xffffffff
c000475f:	83 d2 ff             	adc    edx,0xffffffff
c0004762:	52                   	push   edx
c0004763:	50                   	push   eax
c0004764:	53                   	push   ebx
c0004765:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004769:	e8 eb d1 ff ff       	call   c0001959 <disk_write>
c000476e:	83 c4 20             	add    esp,0x20
c0004771:	85 c0                	test   eax,eax
c0004773:	0f 85 16 fc ff ff    	jne    c000438f <create_partition+0x31>
c0004779:	31 d2                	xor    edx,edx
c000477b:	89 d8                	mov    eax,ebx
c000477d:	b9 00 02 00 00       	mov    ecx,0x200
c0004782:	e8 9b d2 ff ff       	call   c0001a22 <mem_set>
c0004787:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000478d:	b9 10 00 00 00       	mov    ecx,0x10
c0004792:	ba 10 f5 01 c0       	mov    edx,0xc001f510
c0004797:	e8 71 d2 ff ff       	call   c0001a0d <mem_cpy>
c000479c:	e9 21 01 00 00       	jmp    c00048c2 <create_partition+0x564>
c00047a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00047a5:	b9 05 00 00 00       	mov    ecx,0x5
c00047aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00047ad:	bf 08 00 00 00       	mov    edi,0x8
c00047b2:	89 f8                	mov    eax,edi
c00047b4:	31 d2                	xor    edx,edx
c00047b6:	0f b6 f0             	movzx  esi,al
c00047b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047bc:	f7 f6                	div    esi
c00047be:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00047c3:	76 0a                	jbe    c00047cf <create_partition+0x471>
c00047c5:	d1 e7                	shl    edi,1
c00047c7:	49                   	dec    ecx
c00047c8:	75 e8                	jne    c00047b2 <create_partition+0x454>
c00047ca:	bf ff ff ff ff       	mov    edi,0xffffffff
c00047cf:	b9 00 02 00 00       	mov    ecx,0x200
c00047d4:	31 d2                	xor    edx,edx
c00047d6:	89 d8                	mov    eax,ebx
c00047d8:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00047de:	e8 3f d2 ff ff       	call   c0001a22 <mem_set>
c00047e3:	b9 64 00 00 00       	mov    ecx,0x64
c00047e8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047eb:	31 d2                	xor    edx,edx
c00047ed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00047f5:	f7 f1                	div    ecx
c00047f7:	b9 3f 00 00 00       	mov    ecx,0x3f
c00047fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004800:	89 f8                	mov    eax,edi
c0004802:	0f b6 c0             	movzx  eax,al
c0004805:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004809:	e9 80 00 00 00       	jmp    c000488e <create_partition+0x530>
c000480e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004811:	29 cf                	sub    edi,ecx
c0004813:	89 ca                	mov    edx,ecx
c0004815:	89 f0                	mov    eax,esi
c0004817:	bd 3f 00 00 00       	mov    ebp,0x3f
c000481c:	e8 e3 d1 ff ff       	call   c0001a04 <st_dword>
c0004821:	8d 46 04             	lea    eax,[esi+0x4]
c0004824:	89 fa                	mov    edx,edi
c0004826:	83 c6 10             	add    esi,0x10
c0004829:	e8 d6 d1 ff ff       	call   c0001a04 <st_dword>
c000482e:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004832:	31 d2                	xor    edx,edx
c0004834:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004837:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000483b:	89 c8                	mov    eax,ecx
c000483d:	01 f9                	add    ecx,edi
c000483f:	f7 f5                	div    ebp
c0004841:	89 d5                	mov    ebp,edx
c0004843:	31 d2                	xor    edx,edx
c0004845:	45                   	inc    ebp
c0004846:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000484a:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000484d:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004850:	89 c2                	mov    edx,eax
c0004852:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004855:	c1 ea 02             	shr    edx,0x2
c0004858:	83 e2 c0             	and    edx,0xffffffc0
c000485b:	09 ea                	or     edx,ebp
c000485d:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004862:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004865:	31 d2                	xor    edx,edx
c0004867:	f7 f5                	div    ebp
c0004869:	89 d7                	mov    edi,edx
c000486b:	31 d2                	xor    edx,edx
c000486d:	47                   	inc    edi
c000486e:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004872:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004875:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004878:	89 c5                	mov    ebp,eax
c000487a:	c1 ed 02             	shr    ebp,0x2
c000487d:	83 e5 c0             	and    ebp,0xffffffc0
c0004880:	09 ef                	or     edi,ebp
c0004882:	89 fa                	mov    edx,edi
c0004884:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004887:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000488c:	74 34                	je     c00048c2 <create_partition+0x564>
c000488e:	85 c9                	test   ecx,ecx
c0004890:	74 30                	je     c00048c2 <create_partition+0x564>
c0004892:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004895:	76 2b                	jbe    c00048c2 <create_partition+0x564>
c0004897:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000489b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000489f:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c00048a2:	83 ff 64             	cmp    edi,0x64
c00048a5:	76 4b                	jbe    c00048f2 <create_partition+0x594>
c00048a7:	89 f8                	mov    eax,edi
c00048a9:	01 c8                	add    eax,ecx
c00048ab:	0f 82 5d ff ff ff    	jb     c000480e <create_partition+0x4b0>
c00048b1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048b4:	0f 87 54 ff ff ff    	ja     c000480e <create_partition+0x4b0>
c00048ba:	85 ff                	test   edi,edi
c00048bc:	0f 85 51 ff ff ff    	jne    c0004813 <create_partition+0x4b5>
c00048c2:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00048c8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00048cd:	e8 2e d1 ff ff       	call   c0001a00 <st_word>
c00048d2:	83 ec 0c             	sub    esp,0xc
c00048d5:	6a 01                	push   0x1
c00048d7:	6a 00                	push   0x0
c00048d9:	6a 00                	push   0x0
c00048db:	53                   	push   ebx
c00048dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048e0:	e8 74 d0 ff ff       	call   c0001959 <disk_write>
c00048e5:	83 c4 20             	add    esp,0x20
c00048e8:	85 c0                	test   eax,eax
c00048ea:	0f 95 c0             	setne  al
c00048ed:	0f b6 c0             	movzx  eax,al
c00048f0:	eb 0e                	jmp    c0004900 <create_partition+0x5a2>
c00048f2:	74 07                	je     c00048fb <create_partition+0x59d>
c00048f4:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00048f9:	eb ac                	jmp    c00048a7 <create_partition+0x549>
c00048fb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048fe:	eb a7                	jmp    c00048a7 <create_partition+0x549>
c0004900:	83 c4 5c             	add    esp,0x5c
c0004903:	5b                   	pop    ebx
c0004904:	5e                   	pop    esi
c0004905:	5f                   	pop    edi
c0004906:	5d                   	pop    ebp
c0004907:	c3                   	ret    

c0004908 <get_fileinfo>:
c0004908:	55                   	push   ebp
c0004909:	57                   	push   edi
c000490a:	56                   	push   esi
c000490b:	53                   	push   ebx
c000490c:	83 ec 1c             	sub    esp,0x1c
c000490f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004911:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004915:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004919:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000491c:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c000491f:	0f 84 dc 01 00 00    	je     c0004b01 <get_fileinfo+0x1f9>
c0004925:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004928:	75 0f                	jne    c0004939 <get_fileinfo+0x31>
c000492a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000492d:	83 c4 1c             	add    esp,0x1c
c0004930:	5b                   	pop    ebx
c0004931:	5e                   	pop    esi
c0004932:	5f                   	pop    edi
c0004933:	5d                   	pop    ebp
c0004934:	e9 58 d5 ff ff       	jmp    c0001e91 <get_xfileinfo>
c0004939:	89 d3                	mov    ebx,edx
c000493b:	89 c6                	mov    esi,eax
c000493d:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004941:	74 6a                	je     c00049ad <get_fileinfo+0xa5>
c0004943:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000494b:	31 ed                	xor    ebp,ebp
c000494d:	31 ff                	xor    edi,edi
c000494f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004953:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004957:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000495a:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c000495e:	66 85 d2             	test   dx,dx
c0004961:	74 3e                	je     c00049a1 <get_fileinfo+0x99>
c0004963:	66 85 ed             	test   bp,bp
c0004966:	75 0c                	jne    c0004974 <get_fileinfo+0x6c>
c0004968:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c000496e:	66 3d ff 07          	cmp    ax,0x7ff
c0004972:	76 22                	jbe    c0004996 <get_fileinfo+0x8e>
c0004974:	b9 ff 00 00 00       	mov    ecx,0xff
c0004979:	89 e8                	mov    eax,ebp
c000497b:	29 f9                	sub    ecx,edi
c000497d:	c1 e0 10             	shl    eax,0x10
c0004980:	09 d0                	or     eax,edx
c0004982:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004986:	e8 a3 d1 ff ff       	call   c0001b2e <put_utf>
c000498b:	84 c0                	test   al,al
c000498d:	74 10                	je     c000499f <get_fileinfo+0x97>
c000498f:	0f b6 c0             	movzx  eax,al
c0004992:	31 d2                	xor    edx,edx
c0004994:	01 c7                	add    edi,eax
c0004996:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c000499b:	89 d5                	mov    ebp,edx
c000499d:	eb b0                	jmp    c000494f <get_fileinfo+0x47>
c000499f:	31 ff                	xor    edi,edi
c00049a1:	66 85 ed             	test   bp,bp
c00049a4:	74 02                	je     c00049a8 <get_fileinfo+0xa0>
c00049a6:	31 ff                	xor    edi,edi
c00049a8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00049ad:	31 ff                	xor    edi,edi
c00049af:	31 c9                	xor    ecx,ecx
c00049b1:	83 f9 0a             	cmp    ecx,0xa
c00049b4:	0f 87 ad 00 00 00    	ja     c0004a67 <get_fileinfo+0x15f>
c00049ba:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049bd:	8d 69 01             	lea    ebp,[ecx+0x1]
c00049c0:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c00049c4:	66 83 fa 20          	cmp    dx,0x20
c00049c8:	0f 84 92 00 00 00    	je     c0004a60 <get_fileinfo+0x158>
c00049ce:	66 83 fa 05          	cmp    dx,0x5
c00049d2:	75 05                	jne    c00049d9 <get_fileinfo+0xd1>
c00049d4:	ba e5 00 00 00       	mov    edx,0xe5
c00049d9:	83 ff 0b             	cmp    edi,0xb
c00049dc:	77 0b                	ja     c00049e9 <get_fileinfo+0xe1>
c00049de:	83 fd 09             	cmp    ebp,0x9
c00049e1:	75 06                	jne    c00049e9 <get_fileinfo+0xe1>
c00049e3:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c00049e8:	47                   	inc    edi
c00049e9:	0f b7 c2             	movzx  eax,dx
c00049ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049f0:	e8 6d d0 ff ff       	call   c0001a62 <dbc_1st>
c00049f5:	85 c0                	test   eax,eax
c00049f7:	74 2f                	je     c0004a28 <get_fileinfo+0x120>
c00049f9:	83 fd 08             	cmp    ebp,0x8
c00049fc:	74 2a                	je     c0004a28 <get_fileinfo+0x120>
c00049fe:	83 fd 0b             	cmp    ebp,0xb
c0004a01:	74 25                	je     c0004a28 <get_fileinfo+0x120>
c0004a03:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a06:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a0a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a0e:	e8 52 d0 ff ff       	call   c0001a65 <dbc_2nd>
c0004a13:	85 c0                	test   eax,eax
c0004a15:	74 11                	je     c0004a28 <get_fileinfo+0x120>
c0004a17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a1b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a20:	c1 e2 08             	shl    edx,0x8
c0004a23:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a26:	09 c2                	or     edx,eax
c0004a28:	0f b7 d2             	movzx  edx,dx
c0004a2b:	50                   	push   eax
c0004a2c:	50                   	push   eax
c0004a2d:	68 b5 01 00 00       	push   0x1b5
c0004a32:	52                   	push   edx
c0004a33:	e8 46 38 00 00       	call   c000827e <ff_oem2uni>
c0004a38:	83 c4 10             	add    esp,0x10
c0004a3b:	66 85 c0             	test   ax,ax
c0004a3e:	75 04                	jne    c0004a44 <get_fileinfo+0x13c>
c0004a40:	31 ff                	xor    edi,edi
c0004a42:	eb 23                	jmp    c0004a67 <get_fileinfo+0x15f>
c0004a44:	b9 0c 00 00 00       	mov    ecx,0xc
c0004a49:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004a4d:	29 f9                	sub    ecx,edi
c0004a4f:	0f b7 c0             	movzx  eax,ax
c0004a52:	e8 d7 d0 ff ff       	call   c0001b2e <put_utf>
c0004a57:	84 c0                	test   al,al
c0004a59:	74 e5                	je     c0004a40 <get_fileinfo+0x138>
c0004a5b:	0f b6 c0             	movzx  eax,al
c0004a5e:	01 c7                	add    edi,eax
c0004a60:	89 e9                	mov    ecx,ebp
c0004a62:	e9 4a ff ff ff       	jmp    c00049b1 <get_fileinfo+0xa9>
c0004a67:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004a6c:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004a70:	75 54                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004a72:	85 ff                	test   edi,edi
c0004a74:	75 0b                	jne    c0004a81 <get_fileinfo+0x179>
c0004a76:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004a7a:	ba 01 00 00 00       	mov    edx,0x1
c0004a7f:	eb 33                	jmp    c0004ab4 <get_fileinfo+0x1ac>
c0004a81:	b1 08                	mov    cl,0x8
c0004a83:	31 d2                	xor    edx,edx
c0004a85:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004a8b:	84 c0                	test   al,al
c0004a8d:	74 25                	je     c0004ab4 <get_fileinfo+0x1ac>
c0004a8f:	66 83 f8 2e          	cmp    ax,0x2e
c0004a93:	74 16                	je     c0004aab <get_fileinfo+0x1a3>
c0004a95:	8d 78 bf             	lea    edi,[eax-0x41]
c0004a98:	66 83 ff 19          	cmp    di,0x19
c0004a9c:	77 0f                	ja     c0004aad <get_fileinfo+0x1a5>
c0004a9e:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004aa1:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004aa4:	74 07                	je     c0004aad <get_fileinfo+0x1a5>
c0004aa6:	83 c0 20             	add    eax,0x20
c0004aa9:	eb 02                	jmp    c0004aad <get_fileinfo+0x1a5>
c0004aab:	b1 10                	mov    cl,0x10
c0004aad:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004ab1:	42                   	inc    edx
c0004ab2:	eb d1                	jmp    c0004a85 <get_fileinfo+0x17d>
c0004ab4:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004ab9:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004abc:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ac0:	75 04                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004ac2:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ac6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac9:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004acc:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004acf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad2:	83 c0 1c             	add    eax,0x1c
c0004ad5:	e8 c1 ce ff ff       	call   c000199b <ld_dword>
c0004ada:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ae1:	89 03                	mov    DWORD PTR [ebx],eax
c0004ae3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae6:	83 c0 16             	add    eax,0x16
c0004ae9:	e8 a0 ce ff ff       	call   c000198e <ld_word>
c0004aee:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004af2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004af5:	83 c0 18             	add    eax,0x18
c0004af8:	e8 91 ce ff ff       	call   c000198e <ld_word>
c0004afd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b01:	83 c4 1c             	add    esp,0x1c
c0004b04:	5b                   	pop    ebx
c0004b05:	5e                   	pop    esi
c0004b06:	5f                   	pop    edi
c0004b07:	5d                   	pop    ebp
c0004b08:	c3                   	ret    

c0004b09 <ld_clust.isra.0>:
c0004b09:	56                   	push   esi
c0004b0a:	89 c6                	mov    esi,eax
c0004b0c:	53                   	push   ebx
c0004b0d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b10:	89 d3                	mov    ebx,edx
c0004b12:	e8 77 ce ff ff       	call   c000198e <ld_word>
c0004b17:	0f b7 c8             	movzx  ecx,ax
c0004b1a:	89 f0                	mov    eax,esi
c0004b1c:	3c 03                	cmp    al,0x3
c0004b1e:	75 0d                	jne    c0004b2d <ld_clust.isra.0+0x24>
c0004b20:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b23:	e8 66 ce ff ff       	call   c000198e <ld_word>
c0004b28:	c1 e0 10             	shl    eax,0x10
c0004b2b:	09 c1                	or     ecx,eax
c0004b2d:	89 c8                	mov    eax,ecx
c0004b2f:	5b                   	pop    ebx
c0004b30:	5e                   	pop    esi
c0004b31:	c3                   	ret    

c0004b32 <st_clust.isra.1>:
c0004b32:	56                   	push   esi
c0004b33:	89 c6                	mov    esi,eax
c0004b35:	53                   	push   ebx
c0004b36:	89 d3                	mov    ebx,edx
c0004b38:	0f b7 d1             	movzx  edx,cx
c0004b3b:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004b3e:	e8 bd ce ff ff       	call   c0001a00 <st_word>
c0004b43:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004b46:	75 0f                	jne    c0004b57 <st_clust.isra.1+0x25>
c0004b48:	c1 e9 10             	shr    ecx,0x10
c0004b4b:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b4e:	89 ca                	mov    edx,ecx
c0004b50:	5b                   	pop    ebx
c0004b51:	5e                   	pop    esi
c0004b52:	e9 a9 ce ff ff       	jmp    c0001a00 <st_word>
c0004b57:	5b                   	pop    ebx
c0004b58:	5e                   	pop    esi
c0004b59:	c3                   	ret    

c0004b5a <init_alloc_info.isra.2>:
c0004b5a:	56                   	push   esi
c0004b5b:	53                   	push   ebx
c0004b5c:	89 c6                	mov    esi,eax
c0004b5e:	89 d3                	mov    ebx,edx
c0004b60:	51                   	push   ecx
c0004b61:	8b 00                	mov    eax,DWORD PTR [eax]
c0004b63:	83 c0 34             	add    eax,0x34
c0004b66:	e8 30 ce ff ff       	call   c000199b <ld_dword>
c0004b6b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004b6e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b70:	83 c0 38             	add    eax,0x38
c0004b73:	e8 3b ce ff ff       	call   c00019b3 <ld_qword>
c0004b78:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004b7b:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004b7e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b80:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004b83:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004b8a:	83 e0 02             	and    eax,0x2
c0004b8d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004b90:	5b                   	pop    ebx
c0004b91:	5b                   	pop    ebx
c0004b92:	5e                   	pop    esi
c0004b93:	c3                   	ret    

c0004b94 <follow_path>:
c0004b94:	56                   	push   esi
c0004b95:	53                   	push   ebx
c0004b96:	89 c3                	mov    ebx,eax
c0004b98:	83 ec 14             	sub    esp,0x14
c0004b9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004b9f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ba1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ba5:	8a 10                	mov    dl,BYTE PTR [eax]
c0004ba7:	80 fa 5c             	cmp    dl,0x5c
c0004baa:	75 07                	jne    c0004bb3 <follow_path+0x1f>
c0004bac:	40                   	inc    eax
c0004bad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bb1:	eb ee                	jmp    c0004ba1 <follow_path+0xd>
c0004bb3:	80 fa 2f             	cmp    dl,0x2f
c0004bb6:	74 f4                	je     c0004bac <follow_path+0x18>
c0004bb8:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004bbf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bc6:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004bc9:	77 52                	ja     c0004c1d <follow_path+0x89>
c0004bcb:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004bcf:	31 d2                	xor    edx,edx
c0004bd1:	89 d8                	mov    eax,ebx
c0004bd3:	e8 12 e3 ff ff       	call   c0002eea <dir_sdi>
c0004bd8:	eb 7c                	jmp    c0004c56 <follow_path+0xc2>
c0004bda:	89 d8                	mov    eax,ebx
c0004bdc:	e8 6e f2 ff ff       	call   c0003e4f <dir_find>
c0004be1:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004be4:	85 c0                	test   eax,eax
c0004be6:	75 46                	jne    c0004c2e <follow_path+0x9a>
c0004be8:	80 e2 04             	and    dl,0x4
c0004beb:	75 69                	jne    c0004c56 <follow_path+0xc2>
c0004bed:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004bf1:	74 5e                	je     c0004c51 <follow_path+0xbd>
c0004bf3:	8a 06                	mov    al,BYTE PTR [esi]
c0004bf5:	3c 04                	cmp    al,0x4
c0004bf7:	75 41                	jne    c0004c3a <follow_path+0xa6>
c0004bf9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004bfc:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c00:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c03:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c06:	30 c0                	xor    al,al
c0004c08:	09 d0                	or     eax,edx
c0004c0a:	89 da                	mov    edx,ebx
c0004c0c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c0f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c12:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c15:	8d 46 10             	lea    eax,[esi+0x10]
c0004c18:	e8 3d ff ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004c1d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c21:	89 d8                	mov    eax,ebx
c0004c23:	e8 a9 ed ff ff       	call   c00039d1 <create_name>
c0004c28:	85 c0                	test   eax,eax
c0004c2a:	74 ae                	je     c0004bda <follow_path+0x46>
c0004c2c:	eb 28                	jmp    c0004c56 <follow_path+0xc2>
c0004c2e:	83 f8 04             	cmp    eax,0x4
c0004c31:	75 23                	jne    c0004c56 <follow_path+0xc2>
c0004c33:	80 e2 04             	and    dl,0x4
c0004c36:	74 19                	je     c0004c51 <follow_path+0xbd>
c0004c38:	eb 1c                	jmp    c0004c56 <follow_path+0xc2>
c0004c3a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004c3d:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004c43:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004c47:	e8 bd fe ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004c4c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c4f:	eb cc                	jmp    c0004c1d <follow_path+0x89>
c0004c51:	b8 05 00 00 00       	mov    eax,0x5
c0004c56:	83 c4 14             	add    esp,0x14
c0004c59:	5b                   	pop    ebx
c0004c5a:	5e                   	pop    esi
c0004c5b:	c3                   	ret    

c0004c5c <f_mount>:
c0004c5c:	53                   	push   ebx
c0004c5d:	83 ec 18             	sub    esp,0x18
c0004c60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c64:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c70:	e8 fb d2 ff ff       	call   c0001f70 <get_ldnumber>
c0004c75:	89 c2                	mov    edx,eax
c0004c77:	b8 0b 00 00 00       	mov    eax,0xb
c0004c7c:	85 d2                	test   edx,edx
c0004c7e:	78 39                	js     c0004cb9 <f_mount+0x5d>
c0004c80:	8b 04 95 a0 34 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcb60]
c0004c87:	85 c0                	test   eax,eax
c0004c89:	74 03                	je     c0004c8e <f_mount+0x32>
c0004c8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c92:	85 c0                	test   eax,eax
c0004c94:	74 03                	je     c0004c99 <f_mount+0x3d>
c0004c96:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c9d:	89 04 95 a0 34 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcb60],eax
c0004ca4:	31 c0                	xor    eax,eax
c0004ca6:	84 db                	test   bl,bl
c0004ca8:	74 0f                	je     c0004cb9 <f_mount+0x5d>
c0004caa:	31 c9                	xor    ecx,ecx
c0004cac:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cb0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004cb4:	e8 65 d7 ff ff       	call   c000241e <mount_volume>
c0004cb9:	83 c4 18             	add    esp,0x18
c0004cbc:	5b                   	pop    ebx
c0004cbd:	c3                   	ret    

c0004cbe <f_open>:
c0004cbe:	55                   	push   ebp
c0004cbf:	bd 09 00 00 00       	mov    ebp,0x9
c0004cc4:	57                   	push   edi
c0004cc5:	56                   	push   esi
c0004cc6:	53                   	push   ebx
c0004cc7:	83 ec 7c             	sub    esp,0x7c
c0004cca:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004cd1:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004cd8:	85 db                	test   ebx,ebx
c0004cda:	0f 84 10 04 00 00    	je     c00050f0 <f_open+0x432>
c0004ce0:	89 fe                	mov    esi,edi
c0004ce2:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ce6:	83 e6 3f             	and    esi,0x3f
c0004ce9:	89 f0                	mov    eax,esi
c0004ceb:	0f b6 c8             	movzx  ecx,al
c0004cee:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004cf5:	e8 24 d7 ff ff       	call   c000241e <mount_volume>
c0004cfa:	89 c5                	mov    ebp,eax
c0004cfc:	85 c0                	test   eax,eax
c0004cfe:	0f 85 e6 03 00 00    	jne    c00050ea <f_open+0x42c>
c0004d04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d08:	bd 11 00 00 00       	mov    ebp,0x11
c0004d0d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	68 60 04 00 00       	push   0x460
c0004d19:	e8 a3 34 00 00       	call   c00081c1 <ff_memalloc>
c0004d1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d2a:	0f 84 c0 03 00 00    	je     c00050f0 <f_open+0x432>
c0004d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004d38:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004d3e:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004d41:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d44:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004d4b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d4f:	e8 40 fe ff ff       	call   c0004b94 <follow_path>
c0004d54:	89 c5                	mov    ebp,eax
c0004d56:	85 c0                	test   eax,eax
c0004d58:	75 0c                	jne    c0004d66 <f_open+0xa8>
c0004d5a:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d5f:	79 05                	jns    c0004d66 <f_open+0xa8>
c0004d61:	bd 06 00 00 00       	mov    ebp,0x6
c0004d66:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004d6c:	0f 84 84 01 00 00    	je     c0004ef6 <f_open+0x238>
c0004d72:	85 ed                	test   ebp,ebp
c0004d74:	74 20                	je     c0004d96 <f_open+0xd8>
c0004d76:	83 fd 04             	cmp    ebp,0x4
c0004d79:	0f 85 58 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004d7f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d83:	83 ce 08             	or     esi,0x8
c0004d86:	e8 8a f2 ff ff       	call   c0004015 <dir_register>
c0004d8b:	89 c5                	mov    ebp,eax
c0004d8d:	85 c0                	test   eax,eax
c0004d8f:	74 2f                	je     c0004dc0 <f_open+0x102>
c0004d91:	e9 41 03 00 00       	jmp    c00050d7 <f_open+0x419>
c0004d96:	bd 07 00 00 00       	mov    ebp,0x7
c0004d9b:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004da0:	0f 85 31 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004da6:	bd 08 00 00 00       	mov    ebp,0x8
c0004dab:	f7 c7 04 00 00 00    	test   edi,0x4
c0004db1:	0f 85 20 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004db7:	83 e7 08             	and    edi,0x8
c0004dba:	0f 84 65 01 00 00    	je     c0004f25 <f_open+0x267>
c0004dc0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004dc4:	8a 02                	mov    al,BYTE PTR [edx]
c0004dc6:	3c 04                	cmp    al,0x4
c0004dc8:	0f 85 97 00 00 00    	jne    c0004e65 <f_open+0x1a7>
c0004dce:	8d 42 10             	lea    eax,[edx+0x10]
c0004dd1:	89 13                	mov    DWORD PTR [ebx],edx
c0004dd3:	89 da                	mov    edx,ebx
c0004dd5:	e8 80 fd ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004dda:	31 d2                	xor    edx,edx
c0004ddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de0:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004de5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004de8:	83 c0 02             	add    eax,0x2
c0004deb:	e8 32 cc ff ff       	call   c0001a22 <mem_set>
c0004df0:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004df5:	31 d2                	xor    edx,edx
c0004df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dfb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004dfe:	83 c0 26             	add    eax,0x26
c0004e01:	e8 1c cc ff ff       	call   c0001a22 <mem_set>
c0004e06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e0a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e0d:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e11:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e19:	83 c0 08             	add    eax,0x8
c0004e1c:	e8 e3 cb ff ff       	call   c0001a04 <st_dword>
c0004e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e28:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e2c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e30:	e8 b7 ea ff ff       	call   c00038ec <store_xdir>
c0004e35:	89 c5                	mov    ebp,eax
c0004e37:	85 c0                	test   eax,eax
c0004e39:	0f 85 98 02 00 00    	jne    c00050d7 <f_open+0x419>
c0004e3f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004e42:	85 d2                	test   edx,edx
c0004e44:	0f 84 db 00 00 00    	je     c0004f25 <f_open+0x267>
c0004e4a:	31 c9                	xor    ecx,ecx
c0004e4c:	89 d8                	mov    eax,ebx
c0004e4e:	e8 8e e3 ff ff       	call   c00031e1 <remove_chain>
c0004e53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e57:	89 c5                	mov    ebp,eax
c0004e59:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e5c:	48                   	dec    eax
c0004e5d:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004e60:	e9 b8 00 00 00       	jmp    c0004f1d <f_open+0x25f>
c0004e65:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004e69:	89 ea                	mov    edx,ebp
c0004e6b:	e8 99 fc ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004e70:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e75:	89 c7                	mov    edi,eax
c0004e77:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004e7a:	e8 85 cb ff ff       	call   c0001a04 <st_dword>
c0004e7f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e83:	31 c9                	xor    ecx,ecx
c0004e85:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e91:	e8 9c fc ff ff       	call   c0004b32 <st_clust.isra.1>
c0004e96:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e9a:	31 d2                	xor    edx,edx
c0004e9c:	83 c0 1c             	add    eax,0x1c
c0004e9f:	e8 60 cb ff ff       	call   c0001a04 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	85 ff                	test   edi,edi
c0004eaa:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004eae:	74 75                	je     c0004f25 <f_open+0x267>
c0004eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb4:	31 c9                	xor    ecx,ecx
c0004eb6:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004eb9:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ec4:	89 fa                	mov    edx,edi
c0004ec6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eca:	e8 12 e3 ff ff       	call   c00031e1 <remove_chain>
c0004ecf:	89 c5                	mov    ebp,eax
c0004ed1:	85 c0                	test   eax,eax
c0004ed3:	0f 85 fe 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004ed9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004edd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee5:	4f                   	dec    edi
c0004ee6:	e8 81 d2 ff ff       	call   c000216c <move_window>
c0004eeb:	89 c5                	mov    ebp,eax
c0004eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef1:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004ef4:	eb 27                	jmp    c0004f1d <f_open+0x25f>
c0004ef6:	85 ed                	test   ebp,ebp
c0004ef8:	0f 85 d9 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004efe:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f02:	bd 04 00 00 00       	mov    ebp,0x4
c0004f07:	a8 10                	test   al,0x10
c0004f09:	0f 85 c8 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f0f:	83 e7 02             	and    edi,0x2
c0004f12:	74 11                	je     c0004f25 <f_open+0x267>
c0004f14:	bd 07 00 00 00       	mov    ebp,0x7
c0004f19:	a8 01                	test   al,0x1
c0004f1b:	eb 02                	jmp    c0004f1f <f_open+0x261>
c0004f1d:	85 ed                	test   ebp,ebp
c0004f1f:	0f 85 b2 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f25:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f2b:	74 03                	je     c0004f30 <f_open+0x272>
c0004f2d:	83 ce 40             	or     esi,0x40
c0004f30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f34:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004f37:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004f3a:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004f3d:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004f40:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004f44:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004f47:	8a 02                	mov    al,BYTE PTR [edx]
c0004f49:	3c 04                	cmp    al,0x4
c0004f4b:	75 2a                	jne    c0004f77 <f_open+0x2b9>
c0004f4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f51:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004f56:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f5d:	30 c0                	xor    al,al
c0004f5f:	09 c8                	or     eax,ecx
c0004f61:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f64:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f68:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f6b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f6e:	89 da                	mov    edx,ebx
c0004f70:	e8 e5 fb ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004f75:	eb 1c                	jmp    c0004f93 <f_open+0x2d5>
c0004f77:	89 fa                	mov    edx,edi
c0004f79:	e8 8b fb ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004f7e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f81:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004f84:	e8 12 ca ff ff       	call   c000199b <ld_dword>
c0004f89:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0004f90:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004f93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f97:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0004f9e:	89 03                	mov    DWORD PTR [ebx],eax
c0004fa0:	31 d2                	xor    edx,edx
c0004fa2:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004fa6:	b9 00 02 00 00       	mov    ecx,0x200
c0004fab:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004faf:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0004fb3:	89 f0                	mov    eax,esi
c0004fb5:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0004fbc:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0004fbf:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0004fc6:	8d 43 50             	lea    eax,[ebx+0x50]
c0004fc9:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0004fd0:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0004fd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004fdb:	e8 42 ca ff ff       	call   c0001a22 <mem_set>
c0004fe0:	83 e6 20             	and    esi,0x20
c0004fe3:	75 07                	jne    c0004fec <f_open+0x32e>
c0004fe5:	31 ed                	xor    ebp,ebp
c0004fe7:	e9 eb 00 00 00       	jmp    c00050d7 <f_open+0x419>
c0004fec:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004fef:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0004ff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ff6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ffe:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005002:	74 e1                	je     c0004fe5 <f_open+0x327>
c0005004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005008:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000500c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000500f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005012:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005016:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005019:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000501d:	31 ff                	xor    edi,edi
c000501f:	c1 e5 09             	shl    ebp,0x9
c0005022:	89 ee                	mov    esi,ebp
c0005024:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005028:	89 f8                	mov    eax,edi
c000502a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000502e:	73 22                	jae    c0005052 <f_open+0x394>
c0005030:	89 d8                	mov    eax,ebx
c0005032:	e8 bd dc ff ff       	call   c0002cf4 <get_fat>
c0005037:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000503b:	89 c2                	mov    edx,eax
c000503d:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005041:	83 f8 01             	cmp    eax,0x1
c0005044:	76 10                	jbe    c0005056 <f_open+0x398>
c0005046:	83 f8 ff             	cmp    eax,0xffffffff
c0005049:	75 d9                	jne    c0005024 <f_open+0x366>
c000504b:	bd 01 00 00 00       	mov    ebp,0x1
c0005050:	eb 09                	jmp    c000505b <f_open+0x39d>
c0005052:	31 ed                	xor    ebp,ebp
c0005054:	eb 05                	jmp    c000505b <f_open+0x39d>
c0005056:	bd 02 00 00 00       	mov    ebp,0x2
c000505b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000505e:	85 ed                	test   ebp,ebp
c0005060:	75 75                	jne    c00050d7 <f_open+0x419>
c0005062:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005066:	25 ff 01 00 00       	and    eax,0x1ff
c000506b:	0f 84 74 ff ff ff    	je     c0004fe5 <f_open+0x327>
c0005071:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005075:	bd 02 00 00 00       	mov    ebp,0x2
c000507a:	89 c8                	mov    eax,ecx
c000507c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005080:	e8 a2 cb ff ff       	call   c0001c27 <clst2sect>
c0005085:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005089:	89 d7                	mov    edi,edx
c000508b:	09 c7                	or     edi,eax
c000508d:	74 48                	je     c00050d7 <f_open+0x419>
c000508f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005093:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005097:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000509f:	0f ac fe 09          	shrd   esi,edi,0x9
c00050a3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00050a7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00050ab:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00050ae:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00050b2:	83 ec 0c             	sub    esp,0xc
c00050b5:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00050b8:	6a 01                	push   0x1
c00050ba:	52                   	push   edx
c00050bb:	50                   	push   eax
c00050bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00050c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00050c4:	50                   	push   eax
c00050c5:	e8 79 c8 ff ff       	call   c0001943 <disk_read>
c00050ca:	83 c4 20             	add    esp,0x20
c00050cd:	85 c0                	test   eax,eax
c00050cf:	0f 95 c0             	setne  al
c00050d2:	0f b6 c0             	movzx  eax,al
c00050d5:	89 c5                	mov    ebp,eax
c00050d7:	83 ec 0c             	sub    esp,0xc
c00050da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00050de:	e8 f4 30 00 00       	call   c00081d7 <ff_memfree>
c00050e3:	83 c4 10             	add    esp,0x10
c00050e6:	85 ed                	test   ebp,ebp
c00050e8:	74 06                	je     c00050f0 <f_open+0x432>
c00050ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00050f0:	83 c4 7c             	add    esp,0x7c
c00050f3:	89 e8                	mov    eax,ebp
c00050f5:	5b                   	pop    ebx
c00050f6:	5e                   	pop    esi
c00050f7:	5f                   	pop    edi
c00050f8:	5d                   	pop    ebp
c00050f9:	c3                   	ret    

c00050fa <f_read>:
c00050fa:	55                   	push   ebp
c00050fb:	57                   	push   edi
c00050fc:	56                   	push   esi
c00050fd:	53                   	push   ebx
c00050fe:	83 ec 2c             	sub    esp,0x2c
c0005101:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005105:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005109:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000510f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005113:	89 d8                	mov    eax,ebx
c0005115:	e8 77 cf ff ff       	call   c0002091 <validate>
c000511a:	89 c5                	mov    ebp,eax
c000511c:	85 c0                	test   eax,eax
c000511e:	0f 85 4c 02 00 00    	jne    c0005370 <f_read+0x276>
c0005124:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005128:	85 ed                	test   ebp,ebp
c000512a:	0f 85 40 02 00 00    	jne    c0005370 <f_read+0x276>
c0005130:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005134:	0f 84 31 02 00 00    	je     c000536b <f_read+0x271>
c000513a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000513d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005140:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005143:	bf 00 00 00 00       	mov    edi,0x0
c0005148:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000514b:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000514f:	89 d1                	mov    ecx,edx
c0005151:	19 f9                	sbb    ecx,edi
c0005153:	0f 83 cf 00 00 00    	jae    c0005228 <f_read+0x12e>
c0005159:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000515d:	e9 c6 00 00 00       	jmp    c0005228 <f_read+0x12e>
c0005162:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005165:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005168:	89 d0                	mov    eax,edx
c000516a:	25 ff 01 00 00       	and    eax,0x1ff
c000516f:	0f 85 c9 01 00 00    	jne    c000533e <f_read+0x244>
c0005175:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005179:	89 d6                	mov    esi,edx
c000517b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000517f:	89 cf                	mov    edi,ecx
c0005181:	48                   	dec    eax
c0005182:	0f ac fe 09          	shrd   esi,edi,0x9
c0005186:	21 f0                	and    eax,esi
c0005188:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000518c:	0f 84 a6 00 00 00    	je     c0005238 <f_read+0x13e>
c0005192:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005196:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005199:	89 c8                	mov    eax,ecx
c000519b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000519e:	e8 84 ca ff ff       	call   c0001c27 <clst2sect>
c00051a3:	89 d7                	mov    edi,edx
c00051a5:	09 c7                	or     edi,eax
c00051a7:	0f 84 b4 00 00 00    	je     c0005261 <f_read+0x167>
c00051ad:	31 ff                	xor    edi,edi
c00051af:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00051b3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00051b6:	01 c6                	add    esi,eax
c00051b8:	11 d7                	adc    edi,edx
c00051ba:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00051c2:	0f 86 fd 00 00 00    	jbe    c00052c5 <f_read+0x1cb>
c00051c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00051cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d0:	c1 e8 09             	shr    eax,0x9
c00051d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00051d6:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00051da:	03 14 24             	add    edx,DWORD PTR [esp]
c00051dd:	39 c2                	cmp    edx,eax
c00051df:	76 07                	jbe    c00051e8 <f_read+0xee>
c00051e1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00051e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00051e8:	83 ec 0c             	sub    esp,0xc
c00051eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051ef:	57                   	push   edi
c00051f0:	56                   	push   esi
c00051f1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00051f5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051f9:	50                   	push   eax
c00051fa:	e8 44 c7 ff ff       	call   c0001943 <disk_read>
c00051ff:	83 c4 20             	add    esp,0x20
c0005202:	85 c0                	test   eax,eax
c0005204:	75 6e                	jne    c0005274 <f_read+0x17a>
c0005206:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000520a:	78 7e                	js     c000528a <f_read+0x190>
c000520c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000520f:	c1 e6 09             	shl    esi,0x9
c0005212:	31 ff                	xor    edi,edi
c0005214:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005218:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000521c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005220:	01 30                	add    DWORD PTR [eax],esi
c0005222:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005225:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005228:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000522d:	0f 85 2f ff ff ff    	jne    c0005162 <f_read+0x68>
c0005233:	e9 38 01 00 00       	jmp    c0005370 <f_read+0x276>
c0005238:	89 c8                	mov    eax,ecx
c000523a:	09 d0                	or     eax,edx
c000523c:	75 05                	jne    c0005243 <f_read+0x149>
c000523e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005241:	eb 19                	jmp    c000525c <f_read+0x162>
c0005243:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005247:	74 09                	je     c0005252 <f_read+0x158>
c0005249:	89 d8                	mov    eax,ebx
c000524b:	e8 f8 c9 ff ff       	call   c0001c48 <clmt_clust>
c0005250:	eb 0a                	jmp    c000525c <f_read+0x162>
c0005252:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005255:	89 d8                	mov    eax,ebx
c0005257:	e8 98 da ff ff       	call   c0002cf4 <get_fat>
c000525c:	83 f8 01             	cmp    eax,0x1
c000525f:	77 0e                	ja     c000526f <f_read+0x175>
c0005261:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005265:	bd 02 00 00 00       	mov    ebp,0x2
c000526a:	e9 01 01 00 00       	jmp    c0005370 <f_read+0x276>
c000526f:	83 f8 ff             	cmp    eax,0xffffffff
c0005272:	75 0e                	jne    c0005282 <f_read+0x188>
c0005274:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005278:	bd 01 00 00 00       	mov    ebp,0x1
c000527d:	e9 ee 00 00 00       	jmp    c0005370 <f_read+0x276>
c0005282:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005285:	e9 08 ff ff ff       	jmp    c0005192 <f_read+0x98>
c000528a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000528d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005290:	29 f0                	sub    eax,esi
c0005292:	19 fa                	sbb    edx,edi
c0005294:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005297:	89 d7                	mov    edi,edx
c0005299:	ba 00 00 00 00       	mov    edx,0x0
c000529e:	89 f9                	mov    ecx,edi
c00052a0:	19 d1                	sbb    ecx,edx
c00052a2:	0f 83 64 ff ff ff    	jae    c000520c <f_read+0x112>
c00052a8:	89 c7                	mov    edi,eax
c00052aa:	8d 53 50             	lea    edx,[ebx+0x50]
c00052ad:	c1 e7 09             	shl    edi,0x9
c00052b0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00052b4:	b9 00 02 00 00       	mov    ecx,0x200
c00052b9:	01 f8                	add    eax,edi
c00052bb:	e8 4d c7 ff ff       	call   c0001a0d <mem_cpy>
c00052c0:	e9 47 ff ff ff       	jmp    c000520c <f_read+0x112>
c00052c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052c8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00052cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00052ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00052d2:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00052d6:	75 05                	jne    c00052dd <f_read+0x1e3>
c00052d8:	39 34 24             	cmp    DWORD PTR [esp],esi
c00052db:	74 5b                	je     c0005338 <f_read+0x23e>
c00052dd:	8d 43 50             	lea    eax,[ebx+0x50]
c00052e0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052e8:	79 2a                	jns    c0005314 <f_read+0x21a>
c00052ea:	83 ec 0c             	sub    esp,0xc
c00052ed:	6a 01                	push   0x1
c00052ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00052fb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052ff:	50                   	push   eax
c0005300:	e8 54 c6 ff ff       	call   c0001959 <disk_write>
c0005305:	83 c4 20             	add    esp,0x20
c0005308:	85 c0                	test   eax,eax
c000530a:	0f 85 64 ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005310:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005314:	83 ec 0c             	sub    esp,0xc
c0005317:	6a 01                	push   0x1
c0005319:	57                   	push   edi
c000531a:	56                   	push   esi
c000531b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000531f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005323:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005327:	50                   	push   eax
c0005328:	e8 16 c6 ff ff       	call   c0001943 <disk_read>
c000532d:	83 c4 20             	add    esp,0x20
c0005330:	85 c0                	test   eax,eax
c0005332:	0f 85 3c ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005338:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000533b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000533e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005341:	ba 00 02 00 00       	mov    edx,0x200
c0005346:	25 ff 01 00 00       	and    eax,0x1ff
c000534b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000534f:	29 c2                	sub    edx,eax
c0005351:	39 d6                	cmp    esi,edx
c0005353:	76 02                	jbe    c0005357 <f_read+0x25d>
c0005355:	89 d6                	mov    esi,edx
c0005357:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000535b:	89 f1                	mov    ecx,esi
c000535d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005361:	e8 a7 c6 ff ff       	call   c0001a0d <mem_cpy>
c0005366:	e9 a7 fe ff ff       	jmp    c0005212 <f_read+0x118>
c000536b:	bd 07 00 00 00       	mov    ebp,0x7
c0005370:	83 c4 2c             	add    esp,0x2c
c0005373:	89 e8                	mov    eax,ebp
c0005375:	5b                   	pop    ebx
c0005376:	5e                   	pop    esi
c0005377:	5f                   	pop    edi
c0005378:	5d                   	pop    ebp
c0005379:	c3                   	ret    

c000537a <f_write>:
c000537a:	55                   	push   ebp
c000537b:	57                   	push   edi
c000537c:	56                   	push   esi
c000537d:	53                   	push   ebx
c000537e:	83 ec 2c             	sub    esp,0x2c
c0005381:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005385:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005389:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000538f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005393:	89 d8                	mov    eax,ebx
c0005395:	e8 f7 cc ff ff       	call   c0002091 <validate>
c000539a:	89 c5                	mov    ebp,eax
c000539c:	85 c0                	test   eax,eax
c000539e:	0f 85 86 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053a4:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053a8:	85 ed                	test   ebp,ebp
c00053aa:	0f 85 7a 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053b0:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00053b4:	0f 84 6b 02 00 00    	je     c0005625 <f_write+0x2ab>
c00053ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053be:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00053c1:	0f 84 43 01 00 00    	je     c000550a <f_write+0x190>
c00053c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053ca:	89 c1                	mov    ecx,eax
c00053cc:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00053d0:	0f 83 34 01 00 00    	jae    c000550a <f_write+0x190>
c00053d6:	f7 d0                	not    eax
c00053d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053dc:	e9 29 01 00 00       	jmp    c000550a <f_write+0x190>
c00053e1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053e4:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00053e7:	89 d0                	mov    eax,edx
c00053e9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ee:	0f 85 00 02 00 00    	jne    c00055f4 <f_write+0x27a>
c00053f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053f8:	89 d6                	mov    esi,edx
c00053fa:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00053fe:	89 cf                	mov    edi,ecx
c0005400:	48                   	dec    eax
c0005401:	0f ac fe 09          	shrd   esi,edi,0x9
c0005405:	21 f0                	and    eax,esi
c0005407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000540b:	0f 84 06 01 00 00    	je     c0005517 <f_write+0x19d>
c0005411:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005415:	0f 88 6e 01 00 00    	js     c0005589 <f_write+0x20f>
c000541b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 c8                	mov    eax,ecx
c0005424:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005428:	e8 fa c7 ff ff       	call   c0001c27 <clst2sect>
c000542d:	89 d1                	mov    ecx,edx
c000542f:	09 c1                	or     ecx,eax
c0005431:	0f 84 1c 01 00 00    	je     c0005553 <f_write+0x1d9>
c0005437:	31 ff                	xor    edi,edi
c0005439:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000543d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005441:	01 c6                	add    esi,eax
c0005443:	11 d7                	adc    edi,edx
c0005445:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000544d:	0f 86 63 01 00 00    	jbe    c00055b6 <f_write+0x23c>
c0005453:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000545b:	c1 e8 09             	shr    eax,0x9
c000545e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005462:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005466:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000546a:	39 c2                	cmp    edx,eax
c000546c:	76 08                	jbe    c0005476 <f_write+0xfc>
c000546e:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005472:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005476:	83 ec 0c             	sub    esp,0xc
c0005479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000547d:	57                   	push   edi
c000547e:	56                   	push   esi
c000547f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005483:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005487:	50                   	push   eax
c0005488:	e8 cc c4 ff ff       	call   c0001959 <disk_write>
c000548d:	83 c4 20             	add    esp,0x20
c0005490:	85 c0                	test   eax,eax
c0005492:	0f 85 ce 00 00 00    	jne    c0005566 <f_write+0x1ec>
c0005498:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000549b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000549e:	29 f0                	sub    eax,esi
c00054a0:	19 fa                	sbb    edx,edi
c00054a2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00054a6:	89 d7                	mov    edi,edx
c00054a8:	ba 00 00 00 00       	mov    edx,0x0
c00054ad:	89 f9                	mov    ecx,edi
c00054af:	19 d1                	sbb    ecx,edx
c00054b1:	73 1c                	jae    c00054cf <f_write+0x155>
c00054b3:	89 c7                	mov    edi,eax
c00054b5:	b9 00 02 00 00       	mov    ecx,0x200
c00054ba:	c1 e7 09             	shl    edi,0x9
c00054bd:	8d 43 50             	lea    eax,[ebx+0x50]
c00054c0:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00054c4:	89 fa                	mov    edx,edi
c00054c6:	e8 42 c5 ff ff       	call   c0001a0d <mem_cpy>
c00054cb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054cf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00054d3:	c1 e6 09             	shl    esi,0x9
c00054d6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054da:	31 ff                	xor    edi,edi
c00054dc:	01 30                	add    DWORD PTR [eax],esi
c00054de:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054e2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054e6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00054e9:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00054ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00054ef:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00054f2:	89 c1                	mov    ecx,eax
c00054f4:	39 f2                	cmp    edx,esi
c00054f6:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00054f9:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00054fc:	19 f9                	sbb    ecx,edi
c00054fe:	73 04                	jae    c0005504 <f_write+0x18a>
c0005500:	89 f2                	mov    edx,esi
c0005502:	89 f8                	mov    eax,edi
c0005504:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0005507:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000550a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000550f:	0f 85 cc fe ff ff    	jne    c00053e1 <f_write+0x67>
c0005515:	eb 2e                	jmp    c0005545 <f_write+0x1cb>
c0005517:	89 c8                	mov    eax,ecx
c0005519:	09 d0                	or     eax,edx
c000551b:	75 0b                	jne    c0005528 <f_write+0x1ae>
c000551d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005520:	31 d2                	xor    edx,edx
c0005522:	85 c0                	test   eax,eax
c0005524:	75 28                	jne    c000554e <f_write+0x1d4>
c0005526:	eb 12                	jmp    c000553a <f_write+0x1c0>
c0005528:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000552c:	74 09                	je     c0005537 <f_write+0x1bd>
c000552e:	89 d8                	mov    eax,ebx
c0005530:	e8 13 c7 ff ff       	call   c0001c48 <clmt_clust>
c0005535:	eb 0a                	jmp    c0005541 <f_write+0x1c7>
c0005537:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000553a:	89 d8                	mov    eax,ebx
c000553c:	e8 a1 da ff ff       	call   c0002fe2 <create_chain>
c0005541:	85 c0                	test   eax,eax
c0005543:	75 09                	jne    c000554e <f_write+0x1d4>
c0005545:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005549:	e9 dc 00 00 00       	jmp    c000562a <f_write+0x2b0>
c000554e:	83 f8 01             	cmp    eax,0x1
c0005551:	75 0e                	jne    c0005561 <f_write+0x1e7>
c0005553:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005557:	bd 02 00 00 00       	mov    ebp,0x2
c000555c:	e9 c9 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005561:	83 f8 ff             	cmp    eax,0xffffffff
c0005564:	75 0e                	jne    c0005574 <f_write+0x1fa>
c0005566:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000556a:	bd 01 00 00 00       	mov    ebp,0x1
c000556f:	e9 b6 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005574:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005577:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000557b:	0f 85 90 fe ff ff    	jne    c0005411 <f_write+0x97>
c0005581:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005584:	e9 88 fe ff ff       	jmp    c0005411 <f_write+0x97>
c0005589:	83 ec 0c             	sub    esp,0xc
c000558c:	8d 43 50             	lea    eax,[ebx+0x50]
c000558f:	6a 01                	push   0x1
c0005591:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005594:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005597:	50                   	push   eax
c0005598:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000559c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055a0:	50                   	push   eax
c00055a1:	e8 b3 c3 ff ff       	call   c0001959 <disk_write>
c00055a6:	83 c4 20             	add    esp,0x20
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 b9                	jne    c0005566 <f_write+0x1ec>
c00055ad:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055b1:	e9 65 fe ff ff       	jmp    c000541b <f_write+0xa1>
c00055b6:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00055b9:	75 05                	jne    c00055c0 <f_write+0x246>
c00055bb:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00055be:	74 2e                	je     c00055ee <f_write+0x274>
c00055c0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00055c3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055c6:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00055c9:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00055cc:	73 20                	jae    c00055ee <f_write+0x274>
c00055ce:	83 ec 0c             	sub    esp,0xc
c00055d1:	8d 43 50             	lea    eax,[ebx+0x50]
c00055d4:	6a 01                	push   0x1
c00055d6:	57                   	push   edi
c00055d7:	56                   	push   esi
c00055d8:	50                   	push   eax
c00055d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055dd:	50                   	push   eax
c00055de:	e8 60 c3 ff ff       	call   c0001943 <disk_read>
c00055e3:	83 c4 20             	add    esp,0x20
c00055e6:	85 c0                	test   eax,eax
c00055e8:	0f 85 78 ff ff ff    	jne    c0005566 <f_write+0x1ec>
c00055ee:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055f1:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055f4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055f7:	ba 00 02 00 00       	mov    edx,0x200
c00055fc:	25 ff 01 00 00       	and    eax,0x1ff
c0005601:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005605:	29 c2                	sub    edx,eax
c0005607:	39 d6                	cmp    esi,edx
c0005609:	76 02                	jbe    c000560d <f_write+0x293>
c000560b:	89 d6                	mov    esi,edx
c000560d:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005611:	89 f1                	mov    ecx,esi
c0005613:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005617:	e8 f1 c3 ff ff       	call   c0001a0d <mem_cpy>
c000561c:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005620:	e9 b1 fe ff ff       	jmp    c00054d6 <f_write+0x15c>
c0005625:	bd 07 00 00 00       	mov    ebp,0x7
c000562a:	83 c4 2c             	add    esp,0x2c
c000562d:	89 e8                	mov    eax,ebp
c000562f:	5b                   	pop    ebx
c0005630:	5e                   	pop    esi
c0005631:	5f                   	pop    edi
c0005632:	5d                   	pop    ebp
c0005633:	c3                   	ret    

c0005634 <f_sync>:
c0005634:	56                   	push   esi
c0005635:	53                   	push   ebx
c0005636:	83 ec 64             	sub    esp,0x64
c0005639:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000563d:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005641:	89 d8                	mov    eax,ebx
c0005643:	e8 49 ca ff ff       	call   c0002091 <validate>
c0005648:	85 c0                	test   eax,eax
c000564a:	0f 85 ba 01 00 00    	jne    c000580a <f_sync+0x1d6>
c0005650:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005653:	f6 c2 40             	test   dl,0x40
c0005656:	0f 84 ae 01 00 00    	je     c000580a <f_sync+0x1d6>
c000565c:	84 d2                	test   dl,dl
c000565e:	79 33                	jns    c0005693 <f_sync+0x5f>
c0005660:	83 ec 0c             	sub    esp,0xc
c0005663:	8d 43 50             	lea    eax,[ebx+0x50]
c0005666:	6a 01                	push   0x1
c0005668:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000566b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000566e:	50                   	push   eax
c000566f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005673:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005677:	50                   	push   eax
c0005678:	e8 dc c2 ff ff       	call   c0001959 <disk_write>
c000567d:	83 c4 20             	add    esp,0x20
c0005680:	89 c2                	mov    edx,eax
c0005682:	b8 01 00 00 00       	mov    eax,0x1
c0005687:	85 d2                	test   edx,edx
c0005689:	0f 85 7b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c000568f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005697:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000569a:	0f 85 11 01 00 00    	jne    c00057b1 <f_sync+0x17d>
c00056a0:	89 d8                	mov    eax,ebx
c00056a2:	e8 13 d6 ff ff       	call   c0002cba <fill_first_frag>
c00056a7:	85 c0                	test   eax,eax
c00056a9:	0f 85 5b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056af:	83 c9 ff             	or     ecx,0xffffffff
c00056b2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056b5:	89 d8                	mov    eax,ebx
c00056b7:	e8 c9 d5 ff ff       	call   c0002c85 <fill_last_frag>
c00056bc:	85 c0                	test   eax,eax
c00056be:	0f 85 46 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056c4:	83 ec 0c             	sub    esp,0xc
c00056c7:	68 60 04 00 00       	push   0x460
c00056cc:	e8 f0 2a 00 00       	call   c00081c1 <ff_memalloc>
c00056d1:	83 c4 10             	add    esp,0x10
c00056d4:	89 c6                	mov    esi,eax
c00056d6:	b8 11 00 00 00       	mov    eax,0x11
c00056db:	85 f6                	test   esi,esi
c00056dd:	0f 84 27 01 00 00    	je     c000580a <f_sync+0x1d6>
c00056e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056e7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00056ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00056f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00056f3:	89 da                	mov    edx,ebx
c00056f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00056f9:	e8 af df ff ff       	call   c00036ad <load_obj_xdir>
c00056fe:	85 c0                	test   eax,eax
c0005700:	0f 85 95 00 00 00    	jne    c000579b <f_sync+0x167>
c0005706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000570a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000570d:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005711:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005714:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005717:	83 ca 01             	or     edx,0x1
c000571a:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c000571d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005720:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005723:	83 c0 34             	add    eax,0x34
c0005726:	e8 d9 c2 ff ff       	call   c0001a04 <st_dword>
c000572b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000572f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005732:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005735:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005738:	83 c0 38             	add    eax,0x38
c000573b:	e8 c7 c2 ff ff       	call   c0001a07 <st_qword>
c0005740:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005747:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000574a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000574d:	83 c0 28             	add    eax,0x28
c0005750:	e8 b2 c2 ff ff       	call   c0001a07 <st_qword>
c0005755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005759:	ba 00 00 21 50       	mov    edx,0x50210000
c000575e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005761:	83 c0 0c             	add    eax,0xc
c0005764:	e8 9b c2 ff ff       	call   c0001a04 <st_dword>
c0005769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005770:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005774:	31 d2                	xor    edx,edx
c0005776:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005779:	83 c0 10             	add    eax,0x10
c000577c:	e8 83 c2 ff ff       	call   c0001a04 <st_dword>
c0005781:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005785:	e8 62 e1 ff ff       	call   c00038ec <store_xdir>
c000578a:	85 c0                	test   eax,eax
c000578c:	75 0d                	jne    c000579b <f_sync+0x167>
c000578e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005792:	e8 00 eb ff ff       	call   c0004297 <sync_fs>
c0005797:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000579b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000579f:	83 ec 0c             	sub    esp,0xc
c00057a2:	56                   	push   esi
c00057a3:	e8 2f 2a 00 00       	call   c00081d7 <ff_memfree>
c00057a8:	83 c4 10             	add    esp,0x10
c00057ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057af:	eb 59                	jmp    c000580a <f_sync+0x1d6>
c00057b1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00057b4:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00057b7:	e8 b0 c9 ff ff       	call   c000216c <move_window>
c00057bc:	85 c0                	test   eax,eax
c00057be:	75 4a                	jne    c000580a <f_sync+0x1d6>
c00057c0:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00057c3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00057c7:	89 f2                	mov    edx,esi
c00057c9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00057cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00057ce:	e8 5f f3 ff ff       	call   c0004b32 <st_clust.isra.1>
c00057d3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057d6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00057d9:	e8 26 c2 ff ff       	call   c0001a04 <st_dword>
c00057de:	8d 46 16             	lea    eax,[esi+0x16]
c00057e1:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e6:	e8 19 c2 ff ff       	call   c0001a04 <st_dword>
c00057eb:	8d 46 12             	lea    eax,[esi+0x12]
c00057ee:	31 d2                	xor    edx,edx
c00057f0:	e8 0b c2 ff ff       	call   c0001a00 <st_word>
c00057f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00057fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005801:	e8 91 ea ff ff       	call   c0004297 <sync_fs>
c0005806:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000580a:	83 c4 64             	add    esp,0x64
c000580d:	5b                   	pop    ebx
c000580e:	5e                   	pop    esi
c000580f:	c3                   	ret    

c0005810 <f_close>:
c0005810:	53                   	push   ebx
c0005811:	83 ec 24             	sub    esp,0x24
c0005814:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005818:	53                   	push   ebx
c0005819:	e8 16 fe ff ff       	call   c0005634 <f_sync>
c000581e:	83 c4 10             	add    esp,0x10
c0005821:	85 c0                	test   eax,eax
c0005823:	75 15                	jne    c000583a <f_close+0x2a>
c0005825:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005829:	89 d8                	mov    eax,ebx
c000582b:	e8 61 c8 ff ff       	call   c0002091 <validate>
c0005830:	85 c0                	test   eax,eax
c0005832:	75 06                	jne    c000583a <f_close+0x2a>
c0005834:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000583a:	83 c4 18             	add    esp,0x18
c000583d:	5b                   	pop    ebx
c000583e:	c3                   	ret    

c000583f <f_lseek>:
c000583f:	55                   	push   ebp
c0005840:	57                   	push   edi
c0005841:	56                   	push   esi
c0005842:	53                   	push   ebx
c0005843:	83 ec 3c             	sub    esp,0x3c
c0005846:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000584a:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000584e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005852:	89 04 24             	mov    DWORD PTR [esp],eax
c0005855:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005859:	89 d8                	mov    eax,ebx
c000585b:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000585f:	e8 2d c8 ff ff       	call   c0002091 <validate>
c0005864:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005868:	85 c0                	test   eax,eax
c000586a:	0f 85 7a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005870:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005874:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005878:	85 c0                	test   eax,eax
c000587a:	0f 85 6a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005880:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005884:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005887:	74 0c                	je     c0005895 <f_lseek+0x56>
c0005889:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000588c:	85 c0                	test   eax,eax
c000588e:	75 1f                	jne    c00058af <f_lseek+0x70>
c0005890:	e9 b5 01 00 00       	jmp    c0005a4a <f_lseek+0x20b>
c0005895:	83 c9 ff             	or     ecx,0xffffffff
c0005898:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000589b:	89 d8                	mov    eax,ebx
c000589d:	e8 e3 d3 ff ff       	call   c0002c85 <fill_last_frag>
c00058a2:	85 c0                	test   eax,eax
c00058a4:	74 e3                	je     c0005889 <f_lseek+0x4a>
c00058a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058aa:	e9 3b 04 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c00058af:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00058b4:	0f 85 ac 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058ba:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00058be:	0f 85 a2 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058c4:	8d 78 04             	lea    edi,[eax+0x4]
c00058c7:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00058ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00058cc:	be 02 00 00 00       	mov    esi,0x2
c00058d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058d5:	85 ed                	test   ebp,ebp
c00058d7:	74 73                	je     c000594c <f_lseek+0x10d>
c00058d9:	89 e9                	mov    ecx,ebp
c00058db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00058e2:	ff 04 24             	inc    DWORD PTR [esp]
c00058e5:	89 ca                	mov    edx,ecx
c00058e7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00058eb:	89 d8                	mov    eax,ebx
c00058ed:	e8 02 d4 ff ff       	call   c0002cf4 <get_fat>
c00058f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00058f6:	83 f8 01             	cmp    eax,0x1
c00058f9:	77 11                	ja     c000590c <f_lseek+0xcd>
c00058fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00058ff:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005907:	e9 de 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c000590c:	83 f8 ff             	cmp    eax,0xffffffff
c000590f:	75 11                	jne    c0005922 <f_lseek+0xe3>
c0005911:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005915:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000591d:	e9 c8 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005922:	8d 51 01             	lea    edx,[ecx+0x1]
c0005925:	89 c1                	mov    ecx,eax
c0005927:	39 c2                	cmp    edx,eax
c0005929:	74 b7                	je     c00058e2 <f_lseek+0xa3>
c000592b:	83 c6 02             	add    esi,0x2
c000592e:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005932:	72 0b                	jb     c000593f <f_lseek+0x100>
c0005934:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005937:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c000593a:	89 0f                	mov    DWORD PTR [edi],ecx
c000593c:	83 c7 08             	add    edi,0x8
c000593f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005943:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005946:	76 04                	jbe    c000594c <f_lseek+0x10d>
c0005948:	89 c5                	mov    ebp,eax
c000594a:	eb 8d                	jmp    c00058d9 <f_lseek+0x9a>
c000594c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000594f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005953:	89 30                	mov    DWORD PTR [eax],esi
c0005955:	0f 87 87 03 00 00    	ja     c0005ce2 <f_lseek+0x4a3>
c000595b:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005961:	e9 84 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005966:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005969:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000596c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005970:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005974:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005978:	39 04 24             	cmp    DWORD PTR [esp],eax
c000597b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000597f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005983:	73 0f                	jae    c0005994 <f_lseek+0x155>
c0005985:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005988:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000598c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005990:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005998:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000599c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000599f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00059a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00059a6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00059aa:	0f 84 3a 03 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00059b4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00059b8:	83 c6 ff             	add    esi,0xffffffff
c00059bb:	89 d8                	mov    eax,ebx
c00059bd:	83 d7 ff             	adc    edi,0xffffffff
c00059c0:	89 f2                	mov    edx,esi
c00059c2:	89 f9                	mov    ecx,edi
c00059c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00059c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00059cb:	e8 78 c2 ff ff       	call   c0001c48 <clmt_clust>
c00059d0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00059d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00059d7:	89 c2                	mov    edx,eax
c00059d9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059dd:	89 c8                	mov    eax,ecx
c00059df:	e8 43 c2 ff ff       	call   c0001c27 <clst2sect>
c00059e4:	89 d7                	mov    edi,edx
c00059e6:	09 c7                	or     edi,eax
c00059e8:	0f 84 0d ff ff ff    	je     c00058fb <f_lseek+0xbc>
c00059ee:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00059f2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00059f8:	0f 84 ec 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059fe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a06:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a09:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a0d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a11:	4d                   	dec    ebp
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	21 ee                	and    esi,ebp
c0005a16:	01 c6                	add    esi,eax
c0005a18:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a1b:	11 d7                	adc    edi,edx
c0005a1d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a20:	39 fa                	cmp    edx,edi
c0005a22:	75 08                	jne    c0005a2c <f_lseek+0x1ed>
c0005a24:	39 f0                	cmp    eax,esi
c0005a26:	0f 84 be 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c0005a2c:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005a2f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005a33:	0f 89 80 02 00 00    	jns    c0005cb9 <f_lseek+0x47a>
c0005a39:	83 ec 0c             	sub    esp,0xc
c0005a3c:	6a 01                	push   0x1
c0005a3e:	52                   	push   edx
c0005a3f:	50                   	push   eax
c0005a40:	55                   	push   ebp
c0005a41:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005a45:	e9 5a 02 00 00       	jmp    c0005ca4 <f_lseek+0x465>
c0005a4a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a4e:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005a51:	74 16                	je     c0005a69 <f_lseek+0x22a>
c0005a53:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005a58:	76 0f                	jbe    c0005a69 <f_lseek+0x22a>
c0005a5a:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005a61:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005a69:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005a6f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005a72:	89 c7                	mov    edi,eax
c0005a74:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005a78:	73 0d                	jae    c0005a87 <f_lseek+0x248>
c0005a7a:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005a7e:	75 07                	jne    c0005a87 <f_lseek+0x248>
c0005a80:	89 14 24             	mov    DWORD PTR [esp],edx
c0005a83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a87:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005a8a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005a8d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a91:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005a98:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005a9f:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005aa2:	75 09                	jne    c0005aad <f_lseek+0x26e>
c0005aa4:	31 f6                	xor    esi,esi
c0005aa6:	31 ff                	xor    edi,edi
c0005aa8:	e9 af 01 00 00       	jmp    c0005c5c <f_lseek+0x41d>
c0005aad:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005ab1:	89 d7                	mov    edi,edx
c0005ab3:	c1 e1 09             	shl    ecx,0x9
c0005ab6:	09 c7                	or     edi,eax
c0005ab8:	89 cd                	mov    ebp,ecx
c0005aba:	74 6d                	je     c0005b29 <f_lseek+0x2ea>
c0005abc:	83 c0 ff             	add    eax,0xffffffff
c0005abf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ac3:	83 d2 ff             	adc    edx,0xffffffff
c0005ac6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ac9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005acd:	83 c0 ff             	add    eax,0xffffffff
c0005ad0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ad4:	83 d2 ff             	adc    edx,0xffffffff
c0005ad7:	31 ff                	xor    edi,edi
c0005ad9:	57                   	push   edi
c0005ada:	51                   	push   ecx
c0005adb:	52                   	push   edx
c0005adc:	50                   	push   eax
c0005add:	e8 ea 8a 01 00       	call   c001e5cc <__udivdi3>
c0005ae2:	83 c4 10             	add    esp,0x10
c0005ae5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ae9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005aed:	57                   	push   edi
c0005aee:	55                   	push   ebp
c0005aef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af7:	e8 d0 8a 01 00       	call   c001e5cc <__udivdi3>
c0005afc:	83 c4 10             	add    esp,0x10
c0005aff:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b03:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b07:	19 d1                	sbb    ecx,edx
c0005b09:	72 1e                	jb     c0005b29 <f_lseek+0x2ea>
c0005b0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b0f:	89 e9                	mov    ecx,ebp
c0005b11:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b14:	f7 d9                	neg    ecx
c0005b16:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b19:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b1d:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b20:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b23:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b27:	eb 28                	jmp    c0005b51 <f_lseek+0x312>
c0005b29:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005b2c:	85 c0                	test   eax,eax
c0005b2e:	75 1e                	jne    c0005b4e <f_lseek+0x30f>
c0005b30:	31 d2                	xor    edx,edx
c0005b32:	89 d8                	mov    eax,ebx
c0005b34:	e8 a9 d4 ff ff       	call   c0002fe2 <create_chain>
c0005b39:	83 f8 01             	cmp    eax,0x1
c0005b3c:	0f 84 b9 fd ff ff    	je     c00058fb <f_lseek+0xbc>
c0005b42:	83 f8 ff             	cmp    eax,0xffffffff
c0005b45:	0f 84 c6 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005b4b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005b4e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b51:	85 c0                	test   eax,eax
c0005b53:	0f 84 4b ff ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005b59:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005b5d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005b65:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005b68:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b6c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005b6f:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005b72:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b76:	0f 83 9d 00 00 00    	jae    c0005c19 <f_lseek+0x3da>
c0005b7c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b80:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b84:	29 34 24             	sub    DWORD PTR [esp],esi
c0005b87:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005b8b:	01 f2                	add    edx,esi
c0005b8d:	11 f9                	adc    ecx,edi
c0005b8f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005b93:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005b97:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005b9a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005b9d:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005ba0:	f6 c1 02             	test   cl,0x2
c0005ba3:	74 35                	je     c0005bda <f_lseek+0x39b>
c0005ba5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005ba9:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005bac:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005baf:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005bb3:	73 16                	jae    c0005bcb <f_lseek+0x38c>
c0005bb5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005bb9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005bbd:	88 ca                	mov    dl,cl
c0005bbf:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005bc2:	83 ca 40             	or     edx,0x40
c0005bc5:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005bc8:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005bcb:	89 c2                	mov    edx,eax
c0005bcd:	89 d8                	mov    eax,ebx
c0005bcf:	e8 0e d4 ff ff       	call   c0002fe2 <create_chain>
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	75 0b                	jne    c0005be3 <f_lseek+0x3a4>
c0005bd8:	eb 30                	jmp    c0005c0a <f_lseek+0x3cb>
c0005bda:	89 c2                	mov    edx,eax
c0005bdc:	89 d8                	mov    eax,ebx
c0005bde:	e8 11 d1 ff ff       	call   c0002cf4 <get_fat>
c0005be3:	83 f8 ff             	cmp    eax,0xffffffff
c0005be6:	0f 84 25 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005bec:	83 f8 01             	cmp    eax,0x1
c0005bef:	0f 86 06 fd ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005bf5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bf9:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bfc:	0f 86 f9 fc ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005c02:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c05:	e9 5b ff ff ff       	jmp    c0005b65 <f_lseek+0x326>
c0005c0a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c19:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c1c:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c20:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c23:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c26:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c29:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c2f:	0f 84 6f fe ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005c35:	89 c2                	mov    edx,eax
c0005c37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c3b:	e8 e7 bf ff ff       	call   c0001c27 <clst2sect>
c0005c40:	89 d7                	mov    edi,edx
c0005c42:	09 c7                	or     edi,eax
c0005c44:	0f 84 b1 fc ff ff    	je     c00058fb <f_lseek+0xbc>
c0005c4a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c4e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c51:	0f ac fe 09          	shrd   esi,edi,0x9
c0005c55:	c1 ef 09             	shr    edi,0x9
c0005c58:	01 c6                	add    esi,eax
c0005c5a:	11 d7                	adc    edi,edx
c0005c5c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c62:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c65:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005c68:	19 d1                	sbb    ecx,edx
c0005c6a:	73 0a                	jae    c0005c76 <f_lseek+0x437>
c0005c6c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005c6f:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005c72:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005c76:	a9 ff 01 00 00       	test   eax,0x1ff
c0005c7b:	74 6d                	je     c0005cea <f_lseek+0x4ab>
c0005c7d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c80:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c83:	39 fa                	cmp    edx,edi
c0005c85:	75 04                	jne    c0005c8b <f_lseek+0x44c>
c0005c87:	39 f0                	cmp    eax,esi
c0005c89:	74 5f                	je     c0005cea <f_lseek+0x4ab>
c0005c8b:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c8e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c92:	79 25                	jns    c0005cb9 <f_lseek+0x47a>
c0005c94:	83 ec 0c             	sub    esp,0xc
c0005c97:	6a 01                	push   0x1
c0005c99:	52                   	push   edx
c0005c9a:	50                   	push   eax
c0005c9b:	55                   	push   ebp
c0005c9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ca0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005ca4:	50                   	push   eax
c0005ca5:	e8 af bc ff ff       	call   c0001959 <disk_write>
c0005caa:	83 c4 20             	add    esp,0x20
c0005cad:	85 c0                	test   eax,eax
c0005caf:	0f 85 5c fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cb5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005cb9:	83 ec 0c             	sub    esp,0xc
c0005cbc:	6a 01                	push   0x1
c0005cbe:	57                   	push   edi
c0005cbf:	56                   	push   esi
c0005cc0:	55                   	push   ebp
c0005cc1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cc5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cc9:	50                   	push   eax
c0005cca:	e8 74 bc ff ff       	call   c0001943 <disk_read>
c0005ccf:	83 c4 20             	add    esp,0x20
c0005cd2:	85 c0                	test   eax,eax
c0005cd4:	0f 85 37 fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cda:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005cdd:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ce0:	eb 08                	jmp    c0005cea <f_lseek+0x4ab>
c0005ce2:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005cea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005cee:	83 c4 3c             	add    esp,0x3c
c0005cf1:	5b                   	pop    ebx
c0005cf2:	5e                   	pop    esi
c0005cf3:	5f                   	pop    edi
c0005cf4:	5d                   	pop    ebp
c0005cf5:	c3                   	ret    

c0005cf6 <f_opendir>:
c0005cf6:	56                   	push   esi
c0005cf7:	b8 09 00 00 00       	mov    eax,0x9
c0005cfc:	53                   	push   ebx
c0005cfd:	83 ec 24             	sub    esp,0x24
c0005d00:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d04:	85 db                	test   ebx,ebx
c0005d06:	0f 84 e6 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d0c:	31 c9                	xor    ecx,ecx
c0005d0e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d12:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d16:	e8 03 c7 ff ff       	call   c000241e <mount_volume>
c0005d1b:	85 c0                	test   eax,eax
c0005d1d:	0f 85 c9 00 00 00    	jne    c0005dec <f_opendir+0xf6>
c0005d23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d27:	83 ec 0c             	sub    esp,0xc
c0005d2a:	89 03                	mov    DWORD PTR [ebx],eax
c0005d2c:	68 60 04 00 00       	push   0x460
c0005d31:	e8 8b 24 00 00       	call   c00081c1 <ff_memalloc>
c0005d36:	83 c4 10             	add    esp,0x10
c0005d39:	89 c6                	mov    esi,eax
c0005d3b:	b8 11 00 00 00       	mov    eax,0x11
c0005d40:	85 f6                	test   esi,esi
c0005d42:	0f 84 aa 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d4c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d52:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005d55:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005d58:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005d5c:	89 d8                	mov    eax,ebx
c0005d5e:	e8 31 ee ff ff       	call   c0004b94 <follow_path>
c0005d63:	85 c0                	test   eax,eax
c0005d65:	75 61                	jne    c0005dc8 <f_opendir+0xd2>
c0005d67:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005d6b:	78 46                	js     c0005db3 <f_opendir+0xbd>
c0005d6d:	b8 05 00 00 00       	mov    eax,0x5
c0005d72:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005d76:	74 50                	je     c0005dc8 <f_opendir+0xd2>
c0005d78:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d7c:	8a 01                	mov    al,BYTE PTR [ecx]
c0005d7e:	3c 04                	cmp    al,0x4
c0005d80:	75 26                	jne    c0005da8 <f_opendir+0xb2>
c0005d82:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d85:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d88:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005d8b:	30 d2                	xor    dl,dl
c0005d8d:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005d91:	09 c2                	or     edx,eax
c0005d93:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005d96:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005d99:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005d9c:	89 da                	mov    edx,ebx
c0005d9e:	8d 41 10             	lea    eax,[ecx+0x10]
c0005da1:	e8 b4 ed ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0005da6:	eb 0b                	jmp    c0005db3 <f_opendir+0xbd>
c0005da8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005dab:	e8 59 ed ff ff       	call   c0004b09 <ld_clust.isra.0>
c0005db0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005db3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005db7:	31 d2                	xor    edx,edx
c0005db9:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005dbd:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005dc1:	89 d8                	mov    eax,ebx
c0005dc3:	e8 22 d1 ff ff       	call   c0002eea <dir_sdi>
c0005dc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dcc:	83 ec 0c             	sub    esp,0xc
c0005dcf:	56                   	push   esi
c0005dd0:	e8 02 24 00 00       	call   c00081d7 <ff_memfree>
c0005dd5:	83 c4 10             	add    esp,0x10
c0005dd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ddc:	83 f8 04             	cmp    eax,0x4
c0005ddf:	74 06                	je     c0005de7 <f_opendir+0xf1>
c0005de1:	85 c0                	test   eax,eax
c0005de3:	74 0d                	je     c0005df2 <f_opendir+0xfc>
c0005de5:	eb 05                	jmp    c0005dec <f_opendir+0xf6>
c0005de7:	b8 05 00 00 00       	mov    eax,0x5
c0005dec:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005df2:	83 c4 24             	add    esp,0x24
c0005df5:	5b                   	pop    ebx
c0005df6:	5e                   	pop    esi
c0005df7:	c3                   	ret    

c0005df8 <f_closedir>:
c0005df8:	53                   	push   ebx
c0005df9:	83 ec 18             	sub    esp,0x18
c0005dfc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e04:	89 d8                	mov    eax,ebx
c0005e06:	e8 86 c2 ff ff       	call   c0002091 <validate>
c0005e0b:	85 c0                	test   eax,eax
c0005e0d:	75 06                	jne    c0005e15 <f_closedir+0x1d>
c0005e0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e15:	83 c4 18             	add    esp,0x18
c0005e18:	5b                   	pop    ebx
c0005e19:	c3                   	ret    

c0005e1a <f_readdir>:
c0005e1a:	57                   	push   edi
c0005e1b:	56                   	push   esi
c0005e1c:	53                   	push   ebx
c0005e1d:	83 ec 20             	sub    esp,0x20
c0005e20:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e24:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e28:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e2c:	89 d8                	mov    eax,ebx
c0005e2e:	e8 5e c2 ff ff       	call   c0002091 <validate>
c0005e33:	85 c0                	test   eax,eax
c0005e35:	75 77                	jne    c0005eae <f_readdir+0x94>
c0005e37:	85 ff                	test   edi,edi
c0005e39:	75 0b                	jne    c0005e46 <f_readdir+0x2c>
c0005e3b:	31 d2                	xor    edx,edx
c0005e3d:	89 d8                	mov    eax,ebx
c0005e3f:	e8 a6 d0 ff ff       	call   c0002eea <dir_sdi>
c0005e44:	eb 68                	jmp    c0005eae <f_readdir+0x94>
c0005e46:	83 ec 0c             	sub    esp,0xc
c0005e49:	68 60 04 00 00       	push   0x460
c0005e4e:	e8 6e 23 00 00       	call   c00081c1 <ff_memalloc>
c0005e53:	83 c4 10             	add    esp,0x10
c0005e56:	89 c6                	mov    esi,eax
c0005e58:	b8 11 00 00 00       	mov    eax,0x11
c0005e5d:	85 f6                	test   esi,esi
c0005e5f:	74 4d                	je     c0005eae <f_readdir+0x94>
c0005e61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e65:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e6b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e71:	31 d2                	xor    edx,edx
c0005e73:	89 d8                	mov    eax,ebx
c0005e75:	e8 80 d8 ff ff       	call   c00036fa <dir_read>
c0005e7a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005e7f:	75 19                	jne    c0005e9a <f_readdir+0x80>
c0005e81:	89 fa                	mov    edx,edi
c0005e83:	89 d8                	mov    eax,ebx
c0005e85:	e8 7e ea ff ff       	call   c0004908 <get_fileinfo>
c0005e8a:	31 d2                	xor    edx,edx
c0005e8c:	89 d8                	mov    eax,ebx
c0005e8e:	e8 af d5 ff ff       	call   c0003442 <dir_next>
c0005e93:	83 f8 04             	cmp    eax,0x4
c0005e96:	75 02                	jne    c0005e9a <f_readdir+0x80>
c0005e98:	31 c0                	xor    eax,eax
c0005e9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e9e:	83 ec 0c             	sub    esp,0xc
c0005ea1:	56                   	push   esi
c0005ea2:	e8 30 23 00 00       	call   c00081d7 <ff_memfree>
c0005ea7:	83 c4 10             	add    esp,0x10
c0005eaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eae:	83 c4 20             	add    esp,0x20
c0005eb1:	5b                   	pop    ebx
c0005eb2:	5e                   	pop    esi
c0005eb3:	5f                   	pop    edi
c0005eb4:	c3                   	ret    

c0005eb5 <f_stat>:
c0005eb5:	57                   	push   edi
c0005eb6:	31 c9                	xor    ecx,ecx
c0005eb8:	56                   	push   esi
c0005eb9:	53                   	push   ebx
c0005eba:	83 ec 50             	sub    esp,0x50
c0005ebd:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005ec1:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005ec5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005ec9:	e8 50 c5 ff ff       	call   c000241e <mount_volume>
c0005ece:	89 c3                	mov    ebx,eax
c0005ed0:	85 c0                	test   eax,eax
c0005ed2:	75 67                	jne    c0005f3b <f_stat+0x86>
c0005ed4:	83 ec 0c             	sub    esp,0xc
c0005ed7:	bb 11 00 00 00       	mov    ebx,0x11
c0005edc:	68 60 04 00 00       	push   0x460
c0005ee1:	e8 db 22 00 00       	call   c00081c1 <ff_memalloc>
c0005ee6:	83 c4 10             	add    esp,0x10
c0005ee9:	89 c6                	mov    esi,eax
c0005eeb:	85 c0                	test   eax,eax
c0005eed:	74 4c                	je     c0005f3b <f_stat+0x86>
c0005eef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ef3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ef9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005efc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005eff:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f03:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f07:	e8 88 ec ff ff       	call   c0004b94 <follow_path>
c0005f0c:	89 c3                	mov    ebx,eax
c0005f0e:	85 c0                	test   eax,eax
c0005f10:	75 1d                	jne    c0005f2f <f_stat+0x7a>
c0005f12:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f17:	78 11                	js     c0005f2a <f_stat+0x75>
c0005f19:	85 ff                	test   edi,edi
c0005f1b:	74 12                	je     c0005f2f <f_stat+0x7a>
c0005f1d:	89 fa                	mov    edx,edi
c0005f1f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f23:	e8 e0 e9 ff ff       	call   c0004908 <get_fileinfo>
c0005f28:	eb 05                	jmp    c0005f2f <f_stat+0x7a>
c0005f2a:	bb 06 00 00 00       	mov    ebx,0x6
c0005f2f:	83 ec 0c             	sub    esp,0xc
c0005f32:	56                   	push   esi
c0005f33:	e8 9f 22 00 00       	call   c00081d7 <ff_memfree>
c0005f38:	83 c4 10             	add    esp,0x10
c0005f3b:	83 c4 50             	add    esp,0x50
c0005f3e:	89 d8                	mov    eax,ebx
c0005f40:	5b                   	pop    ebx
c0005f41:	5e                   	pop    esi
c0005f42:	5f                   	pop    edi
c0005f43:	c3                   	ret    

c0005f44 <f_getfree>:
c0005f44:	55                   	push   ebp
c0005f45:	31 c9                	xor    ecx,ecx
c0005f47:	57                   	push   edi
c0005f48:	56                   	push   esi
c0005f49:	53                   	push   ebx
c0005f4a:	83 ec 5c             	sub    esp,0x5c
c0005f4d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f51:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005f55:	e8 c4 c4 ff ff       	call   c000241e <mount_volume>
c0005f5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f5e:	85 c0                	test   eax,eax
c0005f60:	0f 85 9d 01 00 00    	jne    c0006103 <f_getfree+0x1bf>
c0005f66:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f6a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005f6e:	89 02                	mov    DWORD PTR [edx],eax
c0005f70:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005f73:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005f76:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005f79:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005f7d:	39 f2                	cmp    edx,esi
c0005f7f:	77 0b                	ja     c0005f8c <f_getfree+0x48>
c0005f81:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005f85:	89 10                	mov    DWORD PTR [eax],edx
c0005f87:	e9 77 01 00 00       	jmp    c0006103 <f_getfree+0x1bf>
c0005f8c:	8a 10                	mov    dl,BYTE PTR [eax]
c0005f8e:	80 fa 01             	cmp    dl,0x1
c0005f91:	75 3a                	jne    c0005fcd <f_getfree+0x89>
c0005f93:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005f97:	be 02 00 00 00       	mov    esi,0x2
c0005f9c:	31 db                	xor    ebx,ebx
c0005f9e:	89 f2                	mov    edx,esi
c0005fa0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005fa4:	e8 4b cd ff ff       	call   c0002cf4 <get_fat>
c0005fa9:	83 f8 ff             	cmp    eax,0xffffffff
c0005fac:	0f 84 28 01 00 00    	je     c00060da <f_getfree+0x196>
c0005fb2:	83 f8 01             	cmp    eax,0x1
c0005fb5:	0f 84 29 01 00 00    	je     c00060e4 <f_getfree+0x1a0>
c0005fbb:	83 d3 00             	adc    ebx,0x0
c0005fbe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fc2:	46                   	inc    esi
c0005fc3:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0005fc6:	77 d6                	ja     c0005f9e <f_getfree+0x5a>
c0005fc8:	e9 25 01 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c0005fcd:	80 fa 04             	cmp    dl,0x4
c0005fd0:	0f 85 88 00 00 00    	jne    c000605e <f_getfree+0x11a>
c0005fd6:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0005fd9:	31 ed                	xor    ebp,ebp
c0005fdb:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0005fde:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005fe2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005fe6:	31 db                	xor    ebx,ebx
c0005fe8:	85 ed                	test   ebp,ebp
c0005fea:	75 3f                	jne    c000602b <f_getfree+0xe7>
c0005fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ff0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ff4:	83 c0 01             	add    eax,0x1
c0005ff7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005ffb:	83 d2 00             	adc    edx,0x0
c0005ffe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006002:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006006:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000600a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000600e:	e8 59 c1 ff ff       	call   c000216c <move_window>
c0006013:	85 c0                	test   eax,eax
c0006015:	0f 85 d3 00 00 00    	jne    c00060ee <f_getfree+0x1aa>
c000601b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000601f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006023:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006027:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000602b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000602f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006032:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006036:	89 cf                	mov    edi,ecx
c0006038:	85 f6                	test   esi,esi
c000603a:	74 12                	je     c000604e <f_getfree+0x10a>
c000603c:	88 c1                	mov    cl,al
c000603e:	83 e1 01             	and    ecx,0x1
c0006041:	80 f9 01             	cmp    cl,0x1
c0006044:	83 d3 00             	adc    ebx,0x0
c0006047:	d0 e8                	shr    al,1
c0006049:	4e                   	dec    esi
c000604a:	39 fe                	cmp    esi,edi
c000604c:	75 ea                	jne    c0006038 <f_getfree+0xf4>
c000604e:	45                   	inc    ebp
c000604f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006055:	85 f6                	test   esi,esi
c0006057:	75 8f                	jne    c0005fe8 <f_getfree+0xa4>
c0006059:	e9 94 00 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c000605e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006061:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006064:	31 f6                	xor    esi,esi
c0006066:	31 db                	xor    ebx,ebx
c0006068:	85 f6                	test   esi,esi
c000606a:	75 1b                	jne    c0006087 <f_getfree+0x143>
c000606c:	89 d7                	mov    edi,edx
c000606e:	89 cd                	mov    ebp,ecx
c0006070:	83 c7 01             	add    edi,0x1
c0006073:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006077:	83 d5 00             	adc    ebp,0x0
c000607a:	e8 ed c0 ff ff       	call   c000216c <move_window>
c000607f:	85 c0                	test   eax,eax
c0006081:	75 6b                	jne    c00060ee <f_getfree+0x1aa>
c0006083:	89 fa                	mov    edx,edi
c0006085:	89 e9                	mov    ecx,ebp
c0006087:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000608f:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006093:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006096:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000609a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000609e:	75 11                	jne    c00060b1 <f_getfree+0x16d>
c00060a0:	e8 e9 b8 ff ff       	call   c000198e <ld_word>
c00060a5:	66 83 f8 01          	cmp    ax,0x1
c00060a9:	83 d3 00             	adc    ebx,0x0
c00060ac:	83 c6 02             	add    esi,0x2
c00060af:	eb 13                	jmp    c00060c4 <f_getfree+0x180>
c00060b1:	e8 e5 b8 ff ff       	call   c000199b <ld_dword>
c00060b6:	25 ff ff ff 0f       	and    eax,0xfffffff
c00060bb:	83 f8 01             	cmp    eax,0x1
c00060be:	83 d3 00             	adc    ebx,0x0
c00060c1:	83 c6 04             	add    esi,0x4
c00060c4:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00060ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00060ce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00060d2:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00060d6:	75 90                	jne    c0006068 <f_getfree+0x124>
c00060d8:	eb 18                	jmp    c00060f2 <f_getfree+0x1ae>
c00060da:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00060e2:	eb 0e                	jmp    c00060f2 <f_getfree+0x1ae>
c00060e4:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00060ec:	eb 04                	jmp    c00060f2 <f_getfree+0x1ae>
c00060ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060f2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00060f6:	89 18                	mov    DWORD PTR [eax],ebx
c00060f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fc:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00060ff:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006103:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006107:	83 c4 5c             	add    esp,0x5c
c000610a:	5b                   	pop    ebx
c000610b:	5e                   	pop    esi
c000610c:	5f                   	pop    edi
c000610d:	5d                   	pop    ebp
c000610e:	c3                   	ret    

c000610f <f_truncate>:
c000610f:	56                   	push   esi
c0006110:	53                   	push   ebx
c0006111:	83 ec 14             	sub    esp,0x14
c0006114:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006118:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 6e bf ff ff       	call   c0002091 <validate>
c0006123:	89 c6                	mov    esi,eax
c0006125:	85 c0                	test   eax,eax
c0006127:	0f 85 d2 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c000612d:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006131:	85 f6                	test   esi,esi
c0006133:	0f 85 c6 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c0006139:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000613d:	0f 84 b7 00 00 00    	je     c00061fa <f_truncate+0xeb>
c0006143:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006146:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006149:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000614c:	89 d1                	mov    ecx,edx
c000614e:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006151:	0f 83 a8 00 00 00    	jae    c00061ff <f_truncate+0xf0>
c0006157:	09 c2                	or     edx,eax
c0006159:	75 15                	jne    c0006170 <f_truncate+0x61>
c000615b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000615e:	31 c9                	xor    ecx,ecx
c0006160:	89 d8                	mov    eax,ebx
c0006162:	e8 7a d0 ff ff       	call   c00031e1 <remove_chain>
c0006167:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000616e:	eb 35                	jmp    c00061a5 <f_truncate+0x96>
c0006170:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006173:	89 d8                	mov    eax,ebx
c0006175:	e8 7a cb ff ff       	call   c0002cf4 <get_fat>
c000617a:	89 c2                	mov    edx,eax
c000617c:	b8 01 00 00 00       	mov    eax,0x1
c0006181:	83 fa ff             	cmp    edx,0xffffffff
c0006184:	74 1f                	je     c00061a5 <f_truncate+0x96>
c0006186:	b8 02 00 00 00       	mov    eax,0x2
c000618b:	83 fa 01             	cmp    edx,0x1
c000618e:	74 15                	je     c00061a5 <f_truncate+0x96>
c0006190:	31 c0                	xor    eax,eax
c0006192:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006196:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006199:	76 0a                	jbe    c00061a5 <f_truncate+0x96>
c000619b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000619e:	89 d8                	mov    eax,ebx
c00061a0:	e8 3c d0 ff ff       	call   c00031e1 <remove_chain>
c00061a5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00061a8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00061ab:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00061ae:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00061b1:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00061b4:	83 ca 40             	or     edx,0x40
c00061b7:	85 c0                	test   eax,eax
c00061b9:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00061bc:	75 35                	jne    c00061f3 <f_truncate+0xe4>
c00061be:	84 d2                	test   dl,dl
c00061c0:	79 3d                	jns    c00061ff <f_truncate+0xf0>
c00061c2:	83 ec 0c             	sub    esp,0xc
c00061c5:	8d 43 50             	lea    eax,[ebx+0x50]
c00061c8:	6a 01                	push   0x1
c00061ca:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00061cd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00061d0:	50                   	push   eax
c00061d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00061d5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00061d9:	50                   	push   eax
c00061da:	e8 7a b7 ff ff       	call   c0001959 <disk_write>
c00061df:	83 c4 20             	add    esp,0x20
c00061e2:	85 c0                	test   eax,eax
c00061e4:	75 08                	jne    c00061ee <f_truncate+0xdf>
c00061e6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00061ea:	31 f6                	xor    esi,esi
c00061ec:	eb 11                	jmp    c00061ff <f_truncate+0xf0>
c00061ee:	b8 01 00 00 00       	mov    eax,0x1
c00061f3:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00061f6:	89 c6                	mov    esi,eax
c00061f8:	eb 05                	jmp    c00061ff <f_truncate+0xf0>
c00061fa:	be 07 00 00 00       	mov    esi,0x7
c00061ff:	89 f0                	mov    eax,esi
c0006201:	83 c4 14             	add    esp,0x14
c0006204:	5b                   	pop    ebx
c0006205:	5e                   	pop    esi
c0006206:	c3                   	ret    

c0006207 <f_unlink>:
c0006207:	56                   	push   esi
c0006208:	b9 02 00 00 00       	mov    ecx,0x2
c000620d:	53                   	push   ebx
c000620e:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006214:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006218:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000621f:	e8 fa c1 ff ff       	call   c000241e <mount_volume>
c0006224:	85 c0                	test   eax,eax
c0006226:	0f 85 55 01 00 00    	jne    c0006381 <f_unlink+0x17a>
c000622c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006230:	83 ec 0c             	sub    esp,0xc
c0006233:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006237:	68 60 04 00 00       	push   0x460
c000623c:	e8 80 1f 00 00       	call   c00081c1 <ff_memalloc>
c0006241:	83 c4 10             	add    esp,0x10
c0006244:	89 c3                	mov    ebx,eax
c0006246:	b8 11 00 00 00       	mov    eax,0x11
c000624b:	85 db                	test   ebx,ebx
c000624d:	0f 84 2e 01 00 00    	je     c0006381 <f_unlink+0x17a>
c0006253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006257:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000625d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006260:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006263:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000626a:	8d 44 24 48          	lea    eax,[esp+0x48]
c000626e:	e8 21 e9 ff ff       	call   c0004b94 <follow_path>
c0006273:	85 c0                	test   eax,eax
c0006275:	0f 85 f2 00 00 00    	jne    c000636d <f_unlink+0x166>
c000627b:	b8 06 00 00 00       	mov    eax,0x6
c0006280:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006288:	0f 88 df 00 00 00    	js     c000636d <f_unlink+0x166>
c000628e:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006293:	74 0a                	je     c000629f <f_unlink+0x98>
c0006295:	b8 07 00 00 00       	mov    eax,0x7
c000629a:	e9 ce 00 00 00       	jmp    c000636d <f_unlink+0x166>
c000629f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062a3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00062a7:	8a 02                	mov    al,BYTE PTR [edx]
c00062a9:	3c 04                	cmp    al,0x4
c00062ab:	75 12                	jne    c00062bf <f_unlink+0xb8>
c00062ad:	8d 42 10             	lea    eax,[edx+0x10]
c00062b0:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062b4:	e8 a1 e8 ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c00062b9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00062bd:	eb 0e                	jmp    c00062cd <f_unlink+0xc6>
c00062bf:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00062c6:	e8 3e e8 ff ff       	call   c0004b09 <ld_clust.isra.0>
c00062cb:	89 c6                	mov    esi,eax
c00062cd:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00062d2:	75 12                	jne    c00062e6 <f_unlink+0xdf>
c00062d4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062d8:	e8 94 d6 ff ff       	call   c0003971 <dir_remove>
c00062dd:	85 c0                	test   eax,eax
c00062df:	74 6c                	je     c000634d <f_unlink+0x146>
c00062e1:	e9 87 00 00 00       	jmp    c000636d <f_unlink+0x166>
c00062e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ea:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00062f1:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00062f8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00062fb:	75 21                	jne    c000631e <f_unlink+0x117>
c00062fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006301:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006305:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000630c:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006313:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006317:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000631e:	31 d2                	xor    edx,edx
c0006320:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006327:	e8 be cb ff ff       	call   c0002eea <dir_sdi>
c000632c:	85 c0                	test   eax,eax
c000632e:	75 3d                	jne    c000636d <f_unlink+0x166>
c0006330:	31 d2                	xor    edx,edx
c0006332:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006339:	e8 bc d3 ff ff       	call   c00036fa <dir_read>
c000633e:	85 c0                	test   eax,eax
c0006340:	0f 84 4f ff ff ff    	je     c0006295 <f_unlink+0x8e>
c0006346:	83 f8 04             	cmp    eax,0x4
c0006349:	75 22                	jne    c000636d <f_unlink+0x166>
c000634b:	eb 87                	jmp    c00062d4 <f_unlink+0xcd>
c000634d:	85 f6                	test   esi,esi
c000634f:	75 0b                	jne    c000635c <f_unlink+0x155>
c0006351:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006355:	e8 3d df ff ff       	call   c0004297 <sync_fs>
c000635a:	eb 11                	jmp    c000636d <f_unlink+0x166>
c000635c:	31 c9                	xor    ecx,ecx
c000635e:	89 f2                	mov    edx,esi
c0006360:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006364:	e8 78 ce ff ff       	call   c00031e1 <remove_chain>
c0006369:	85 c0                	test   eax,eax
c000636b:	74 e4                	je     c0006351 <f_unlink+0x14a>
c000636d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006371:	83 ec 0c             	sub    esp,0xc
c0006374:	53                   	push   ebx
c0006375:	e8 5d 1e 00 00       	call   c00081d7 <ff_memfree>
c000637a:	83 c4 10             	add    esp,0x10
c000637d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006381:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006387:	5b                   	pop    ebx
c0006388:	5e                   	pop    esi
c0006389:	c3                   	ret    

c000638a <f_mkdir>:
c000638a:	57                   	push   edi
c000638b:	b9 02 00 00 00       	mov    ecx,0x2
c0006390:	56                   	push   esi
c0006391:	53                   	push   ebx
c0006392:	83 c4 80             	add    esp,0xffffff80
c0006395:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006399:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c00063a0:	e8 79 c0 ff ff       	call   c000241e <mount_volume>
c00063a5:	89 c3                	mov    ebx,eax
c00063a7:	85 c0                	test   eax,eax
c00063a9:	0f 85 fe 01 00 00    	jne    c00065ad <f_mkdir+0x223>
c00063af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063b3:	bb 11 00 00 00       	mov    ebx,0x11
c00063b8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00063bc:	83 ec 0c             	sub    esp,0xc
c00063bf:	68 60 04 00 00       	push   0x460
c00063c4:	e8 f8 1d 00 00       	call   c00081c1 <ff_memalloc>
c00063c9:	83 c4 10             	add    esp,0x10
c00063cc:	89 c7                	mov    edi,eax
c00063ce:	85 c0                	test   eax,eax
c00063d0:	0f 84 d7 01 00 00    	je     c00065ad <f_mkdir+0x223>
c00063d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063da:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00063e0:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00063e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00063e6:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00063ed:	8d 44 24 34          	lea    eax,[esp+0x34]
c00063f1:	e8 9e e7 ff ff       	call   c0004b94 <follow_path>
c00063f6:	89 c3                	mov    ebx,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	74 3e                	je     c000643a <f_mkdir+0xb0>
c00063fc:	83 f8 04             	cmp    eax,0x4
c00063ff:	75 3e                	jne    c000643f <f_mkdir+0xb5>
c0006401:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006405:	31 d2                	xor    edx,edx
c0006407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000640b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000640f:	e8 ce cb ff ff       	call   c0002fe2 <create_chain>
c0006414:	89 c6                	mov    esi,eax
c0006416:	85 c0                	test   eax,eax
c0006418:	74 0c                	je     c0006426 <f_mkdir+0x9c>
c000641a:	bb 02 00 00 00       	mov    ebx,0x2
c000641f:	83 f8 01             	cmp    eax,0x1
c0006422:	74 07                	je     c000642b <f_mkdir+0xa1>
c0006424:	eb 2a                	jmp    c0006450 <f_mkdir+0xc6>
c0006426:	bb 07 00 00 00       	mov    ebx,0x7
c000642b:	31 c9                	xor    ecx,ecx
c000642d:	89 f2                	mov    edx,esi
c000642f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006433:	e8 a9 cd ff ff       	call   c00031e1 <remove_chain>
c0006438:	eb 05                	jmp    c000643f <f_mkdir+0xb5>
c000643a:	bb 08 00 00 00       	mov    ebx,0x8
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	57                   	push   edi
c0006443:	e8 8f 1d 00 00       	call   c00081d7 <ff_memfree>
c0006448:	83 c4 10             	add    esp,0x10
c000644b:	e9 5d 01 00 00       	jmp    c00065ad <f_mkdir+0x223>
c0006450:	bb 01 00 00 00       	mov    ebx,0x1
c0006455:	83 f8 ff             	cmp    eax,0xffffffff
c0006458:	74 d1                	je     c000642b <f_mkdir+0xa1>
c000645a:	89 f2                	mov    edx,esi
c000645c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006460:	e8 c4 ce ff ff       	call   c0003329 <dir_clear>
c0006465:	89 c3                	mov    ebx,eax
c0006467:	85 c0                	test   eax,eax
c0006469:	75 c0                	jne    c000642b <f_mkdir+0xa1>
c000646b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006472:	74 69                	je     c00064dd <f_mkdir+0x153>
c0006474:	b9 0b 00 00 00       	mov    ecx,0xb
c0006479:	83 c0 54             	add    eax,0x54
c000647c:	ba 20 00 00 00       	mov    edx,0x20
c0006481:	e8 9c b5 ff ff       	call   c0001a22 <mem_set>
c0006486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000648a:	ba 00 00 21 50       	mov    edx,0x50210000
c000648f:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006493:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006497:	83 c0 6a             	add    eax,0x6a
c000649a:	e8 65 b5 ff ff       	call   c0001a04 <st_dword>
c000649f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064a3:	89 f1                	mov    ecx,esi
c00064a5:	8d 50 54             	lea    edx,[eax+0x54]
c00064a8:	e8 85 e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b1:	b9 20 00 00 00       	mov    ecx,0x20
c00064b6:	8d 50 54             	lea    edx,[eax+0x54]
c00064b9:	83 c0 74             	add    eax,0x74
c00064bc:	e8 4c b5 ff ff       	call   c0001a0d <mem_cpy>
c00064c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c5:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00064c9:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00064cd:	8d 50 74             	lea    edx,[eax+0x74]
c00064d0:	e8 5d e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00064dd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064e1:	e8 2f db ff ff       	call   c0004015 <dir_register>
c00064e6:	89 c3                	mov    ebx,eax
c00064e8:	85 c0                	test   eax,eax
c00064ea:	0f 85 3b ff ff ff    	jne    c000642b <f_mkdir+0xa1>
c00064f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f7:	75 74                	jne    c000656d <f_mkdir+0x1e3>
c00064f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064fc:	ba 00 00 21 50       	mov    edx,0x50210000
c0006501:	83 c0 0c             	add    eax,0xc
c0006504:	e8 fb b4 ff ff       	call   c0001a04 <st_dword>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	89 f2                	mov    edx,esi
c000650f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006512:	83 c0 34             	add    eax,0x34
c0006515:	e8 ea b4 ff ff       	call   c0001a04 <st_dword>
c000651a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651e:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006522:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006525:	c1 e2 09             	shl    edx,0x9
c0006528:	83 c0 38             	add    eax,0x38
c000652b:	e8 d4 b4 ff ff       	call   c0001a04 <st_dword>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006538:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000653b:	c1 e2 09             	shl    edx,0x9
c000653e:	83 c0 28             	add    eax,0x28
c0006541:	e8 be b4 ff ff       	call   c0001a04 <st_dword>
c0006546:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000654d:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006551:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006554:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006558:	8d 44 24 34          	lea    eax,[esp+0x34]
c000655c:	e8 8b d3 ff ff       	call   c00038ec <store_xdir>
c0006561:	89 c3                	mov    ebx,eax
c0006563:	85 c0                	test   eax,eax
c0006565:	0f 85 d4 fe ff ff    	jne    c000643f <f_mkdir+0xb5>
c000656b:	eb 30                	jmp    c000659d <f_mkdir+0x213>
c000656d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006571:	ba 00 00 21 50       	mov    edx,0x50210000
c0006576:	83 c0 16             	add    eax,0x16
c0006579:	e8 86 b4 ff ff       	call   c0001a04 <st_dword>
c000657e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006582:	89 f1                	mov    ecx,esi
c0006584:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006588:	e8 a5 e5 ff ff       	call   c0004b32 <st_clust.isra.1>
c000658d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006591:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006595:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006599:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	e8 f1 dc ff ff       	call   c0004297 <sync_fs>
c00065a6:	89 c3                	mov    ebx,eax
c00065a8:	e9 92 fe ff ff       	jmp    c000643f <f_mkdir+0xb5>
c00065ad:	83 ec 80             	sub    esp,0xffffff80
c00065b0:	89 d8                	mov    eax,ebx
c00065b2:	5b                   	pop    ebx
c00065b3:	5e                   	pop    esi
c00065b4:	5f                   	pop    edi
c00065b5:	c3                   	ret    

c00065b6 <f_rename>:
c00065b6:	55                   	push   ebp
c00065b7:	57                   	push   edi
c00065b8:	56                   	push   esi
c00065b9:	53                   	push   ebx
c00065ba:	81 ec fc 00 00 00    	sub    esp,0xfc
c00065c0:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00065c7:	e8 a4 b9 ff ff       	call   c0001f70 <get_ldnumber>
c00065cc:	b9 02 00 00 00       	mov    ecx,0x2
c00065d1:	8d 54 24 14          	lea    edx,[esp+0x14]
c00065d5:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00065dc:	e8 3d be ff ff       	call   c000241e <mount_volume>
c00065e1:	85 c0                	test   eax,eax
c00065e3:	0f 85 b5 02 00 00    	jne    c000689e <f_rename+0x2e8>
c00065e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065ed:	83 ec 0c             	sub    esp,0xc
c00065f0:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00065f4:	68 60 04 00 00       	push   0x460
c00065f9:	e8 c3 1b 00 00       	call   c00081c1 <ff_memalloc>
c00065fe:	83 c4 10             	add    esp,0x10
c0006601:	89 c3                	mov    ebx,eax
c0006603:	b8 11 00 00 00       	mov    eax,0x11
c0006608:	85 db                	test   ebx,ebx
c000660a:	0f 84 8e 02 00 00    	je     c000689e <f_rename+0x2e8>
c0006610:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006614:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000661a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000661d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006620:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006627:	8d 44 24 58          	lea    eax,[esp+0x58]
c000662b:	e8 64 e5 ff ff       	call   c0004b94 <follow_path>
c0006630:	85 c0                	test   eax,eax
c0006632:	0f 85 52 02 00 00    	jne    c000688a <f_rename+0x2d4>
c0006638:	b8 06 00 00 00       	mov    eax,0x6
c000663d:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006645:	0f 85 3f 02 00 00    	jne    c000688a <f_rename+0x2d4>
c000664b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000664f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006652:	0f 85 05 01 00 00    	jne    c000675d <f_rename+0x1a7>
c0006658:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000665b:	b9 40 00 00 00       	mov    ecx,0x40
c0006660:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006664:	e8 a4 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006669:	b9 4c 00 00 00       	mov    ecx,0x4c
c000666e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006672:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006679:	e8 8f b3 ff ff       	call   c0001a0d <mem_cpy>
c000667e:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006685:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000668c:	e8 03 e5 ff ff       	call   c0004b94 <follow_path>
c0006691:	85 c0                	test   eax,eax
c0006693:	75 29                	jne    c00066be <f_rename+0x108>
c0006695:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006699:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00066a0:	74 0a                	je     c00066ac <f_rename+0xf6>
c00066a2:	b8 08 00 00 00       	mov    eax,0x8
c00066a7:	e9 de 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c00066ac:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00066b3:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00066ba:	75 e6                	jne    c00066a2 <f_rename+0xec>
c00066bc:	eb 09                	jmp    c00066c7 <f_rename+0x111>
c00066be:	83 f8 04             	cmp    eax,0x4
c00066c1:	0f 85 c3 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ce:	e8 42 d9 ff ff       	call   c0004015 <dir_register>
c00066d3:	85 c0                	test   eax,eax
c00066d5:	0f 85 af 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066df:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00066e2:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00066e5:	89 c5                	mov    ebp,eax
c00066e7:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00066ea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00066ee:	8d 46 24             	lea    eax,[esi+0x24]
c00066f1:	e8 98 b2 ff ff       	call   c000198e <ld_word>
c00066f6:	b9 40 00 00 00       	mov    ecx,0x40
c00066fb:	89 c7                	mov    edi,eax
c00066fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006701:	89 f0                	mov    eax,esi
c0006703:	e8 05 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006708:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670c:	89 e9                	mov    ecx,ebp
c000670e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006711:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006714:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006718:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000671c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671f:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006722:	0f b7 d7             	movzx  edx,di
c0006725:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006728:	83 c0 24             	add    eax,0x24
c000672b:	e8 d0 b2 ff ff       	call   c0001a00 <st_word>
c0006730:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006734:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006737:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c000673a:	a8 10                	test   al,0x10
c000673c:	75 06                	jne    c0006744 <f_rename+0x18e>
c000673e:	83 c8 20             	or     eax,0x20
c0006741:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006744:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000674b:	e8 9c d1 ff ff       	call   c00038ec <store_xdir>
c0006750:	85 c0                	test   eax,eax
c0006752:	0f 84 1c 01 00 00    	je     c0006874 <f_rename+0x2be>
c0006758:	e9 2d 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c000675d:	b9 20 00 00 00       	mov    ecx,0x20
c0006762:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006769:	8d 44 24 18          	lea    eax,[esp+0x18]
c000676d:	e8 9b b2 ff ff       	call   c0001a0d <mem_cpy>
c0006772:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006777:	8d 54 24 58          	lea    edx,[esp+0x58]
c000677b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006782:	e8 86 b2 ff ff       	call   c0001a0d <mem_cpy>
c0006787:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000678e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006795:	e8 fa e3 ff ff       	call   c0004b94 <follow_path>
c000679a:	85 c0                	test   eax,eax
c000679c:	75 27                	jne    c00067c5 <f_rename+0x20f>
c000679e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00067a2:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00067a9:	0f 85 f3 fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067af:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00067b6:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00067bd:	0f 85 df fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067c3:	eb 09                	jmp    c00067ce <f_rename+0x218>
c00067c5:	83 f8 04             	cmp    eax,0x4
c00067c8:	0f 85 bc 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067ce:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067d5:	e8 3b d8 ff ff       	call   c0004015 <dir_register>
c00067da:	85 c0                	test   eax,eax
c00067dc:	0f 85 a8 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067e2:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00067e9:	b9 13 00 00 00       	mov    ecx,0x13
c00067ee:	8d 46 0d             	lea    eax,[esi+0xd]
c00067f1:	8d 54 24 25          	lea    edx,[esp+0x25]
c00067f5:	e8 13 b2 ff ff       	call   c0001a0d <mem_cpy>
c00067fa:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00067fe:	a8 10                	test   al,0x10
c0006800:	75 03                	jne    c0006805 <f_rename+0x24f>
c0006802:	83 c8 20             	or     eax,0x20
c0006805:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006808:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000680c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006810:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006814:	74 5e                	je     c0006874 <f_rename+0x2be>
c0006816:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000681d:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006821:	74 51                	je     c0006874 <f_rename+0x2be>
c0006823:	89 f2                	mov    edx,esi
c0006825:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006829:	8a 07                	mov    al,BYTE PTR [edi]
c000682b:	e8 d9 e2 ff ff       	call   c0004b09 <ld_clust.isra.0>
c0006830:	89 c2                	mov    edx,eax
c0006832:	89 f8                	mov    eax,edi
c0006834:	e8 ee b3 ff ff       	call   c0001c27 <clst2sect>
c0006839:	89 c6                	mov    esi,eax
c000683b:	89 d1                	mov    ecx,edx
c000683d:	b8 02 00 00 00       	mov    eax,0x2
c0006842:	09 f2                	or     edx,esi
c0006844:	74 44                	je     c000688a <f_rename+0x2d4>
c0006846:	89 f2                	mov    edx,esi
c0006848:	89 f8                	mov    eax,edi
c000684a:	e8 1d b9 ff ff       	call   c000216c <move_window>
c000684f:	85 c0                	test   eax,eax
c0006851:	75 37                	jne    c000688a <f_rename+0x2d4>
c0006853:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006857:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000685b:	75 17                	jne    c0006874 <f_rename+0x2be>
c000685d:	8d 50 74             	lea    edx,[eax+0x74]
c0006860:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006867:	e8 c6 e2 ff ff       	call   c0004b32 <st_clust.isra.1>
c000686c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006870:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006874:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006878:	e8 f4 d0 ff ff       	call   c0003971 <dir_remove>
c000687d:	85 c0                	test   eax,eax
c000687f:	75 09                	jne    c000688a <f_rename+0x2d4>
c0006881:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006885:	e8 0d da ff ff       	call   c0004297 <sync_fs>
c000688a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000688e:	83 ec 0c             	sub    esp,0xc
c0006891:	53                   	push   ebx
c0006892:	e8 40 19 00 00       	call   c00081d7 <ff_memfree>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000689e:	81 c4 fc 00 00 00    	add    esp,0xfc
c00068a4:	5b                   	pop    ebx
c00068a5:	5e                   	pop    esi
c00068a6:	5f                   	pop    edi
c00068a7:	5d                   	pop    ebp
c00068a8:	c3                   	ret    

c00068a9 <f_chmod>:
c00068a9:	57                   	push   edi
c00068aa:	b9 02 00 00 00       	mov    ecx,0x2
c00068af:	56                   	push   esi
c00068b0:	53                   	push   ebx
c00068b1:	83 ec 60             	sub    esp,0x60
c00068b4:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00068b8:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00068bc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00068c0:	8d 44 24 70          	lea    eax,[esp+0x70]
c00068c4:	e8 55 bb ff ff       	call   c000241e <mount_volume>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 af 00 00 00    	jne    c0006980 <f_chmod+0xd7>
c00068d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068d5:	83 ec 0c             	sub    esp,0xc
c00068d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00068dc:	68 60 04 00 00       	push   0x460
c00068e1:	e8 db 18 00 00       	call   c00081c1 <ff_memalloc>
c00068e6:	83 c4 10             	add    esp,0x10
c00068e9:	89 c6                	mov    esi,eax
c00068eb:	b8 11 00 00 00       	mov    eax,0x11
c00068f0:	85 f6                	test   esi,esi
c00068f2:	0f 84 88 00 00 00    	je     c0006980 <f_chmod+0xd7>
c00068f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068fc:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006902:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006905:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006908:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000690c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006910:	e8 7f e2 ff ff       	call   c0004b94 <follow_path>
c0006915:	85 c0                	test   eax,eax
c0006917:	75 53                	jne    c000696c <f_chmod+0xc3>
c0006919:	b8 06 00 00 00       	mov    eax,0x6
c000691e:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006923:	75 47                	jne    c000696c <f_chmod+0xc3>
c0006925:	89 f9                	mov    ecx,edi
c0006927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000692b:	83 e1 27             	and    ecx,0x27
c000692e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006931:	75 1d                	jne    c0006950 <f_chmod+0xa7>
c0006933:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006936:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006939:	21 cb                	and    ebx,ecx
c000693b:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000693e:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006941:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006945:	e8 a2 cf ff ff       	call   c00038ec <store_xdir>
c000694a:	85 c0                	test   eax,eax
c000694c:	75 1e                	jne    c000696c <f_chmod+0xc3>
c000694e:	eb 13                	jmp    c0006963 <f_chmod+0xba>
c0006950:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006954:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006957:	21 cb                	and    ebx,ecx
c0006959:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c000695c:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c000695f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006967:	e8 2b d9 ff ff       	call   c0004297 <sync_fs>
c000696c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006970:	83 ec 0c             	sub    esp,0xc
c0006973:	56                   	push   esi
c0006974:	e8 5e 18 00 00       	call   c00081d7 <ff_memfree>
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006980:	83 c4 60             	add    esp,0x60
c0006983:	5b                   	pop    ebx
c0006984:	5e                   	pop    esi
c0006985:	5f                   	pop    edi
c0006986:	c3                   	ret    

c0006987 <f_utime>:
c0006987:	56                   	push   esi
c0006988:	b9 02 00 00 00       	mov    ecx,0x2
c000698d:	53                   	push   ebx
c000698e:	83 ec 64             	sub    esp,0x64
c0006991:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006995:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006999:	8d 44 24 70          	lea    eax,[esp+0x70]
c000699d:	e8 7c ba ff ff       	call   c000241e <mount_volume>
c00069a2:	85 c0                	test   eax,eax
c00069a4:	0f 85 b5 00 00 00    	jne    c0006a5f <f_utime+0xd8>
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 ec 0c             	sub    esp,0xc
c00069b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069b5:	68 60 04 00 00       	push   0x460
c00069ba:	e8 02 18 00 00       	call   c00081c1 <ff_memalloc>
c00069bf:	83 c4 10             	add    esp,0x10
c00069c2:	89 c3                	mov    ebx,eax
c00069c4:	b8 11 00 00 00       	mov    eax,0x11
c00069c9:	85 db                	test   ebx,ebx
c00069cb:	0f 84 8e 00 00 00    	je     c0006a5f <f_utime+0xd8>
c00069d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069d5:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00069db:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00069de:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069e1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069e9:	e8 a6 e1 ff ff       	call   c0004b94 <follow_path>
c00069ee:	85 c0                	test   eax,eax
c00069f0:	75 59                	jne    c0006a4b <f_utime+0xc4>
c00069f2:	b8 06 00 00 00       	mov    eax,0x6
c00069f7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069fc:	75 4d                	jne    c0006a4b <f_utime+0xc4>
c00069fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a02:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a06:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a0a:	c1 e2 10             	shl    edx,0x10
c0006a0d:	09 ca                	or     edx,ecx
c0006a0f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a12:	75 1a                	jne    c0006a2e <f_utime+0xa7>
c0006a14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a17:	83 c0 0c             	add    eax,0xc
c0006a1a:	e8 e5 af ff ff       	call   c0001a04 <st_dword>
c0006a1f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a23:	e8 c4 ce ff ff       	call   c00038ec <store_xdir>
c0006a28:	85 c0                	test   eax,eax
c0006a2a:	75 1f                	jne    c0006a4b <f_utime+0xc4>
c0006a2c:	eb 14                	jmp    c0006a42 <f_utime+0xbb>
c0006a2e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a32:	83 c0 16             	add    eax,0x16
c0006a35:	e8 ca af ff ff       	call   c0001a04 <st_dword>
c0006a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a3e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a46:	e8 4c d8 ff ff       	call   c0004297 <sync_fs>
c0006a4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a4f:	83 ec 0c             	sub    esp,0xc
c0006a52:	53                   	push   ebx
c0006a53:	e8 7f 17 00 00       	call   c00081d7 <ff_memfree>
c0006a58:	83 c4 10             	add    esp,0x10
c0006a5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a5f:	83 c4 64             	add    esp,0x64
c0006a62:	5b                   	pop    ebx
c0006a63:	5e                   	pop    esi
c0006a64:	c3                   	ret    

c0006a65 <f_getlabel>:
c0006a65:	55                   	push   ebp
c0006a66:	31 c9                	xor    ecx,ecx
c0006a68:	57                   	push   edi
c0006a69:	56                   	push   esi
c0006a6a:	53                   	push   ebx
c0006a6b:	83 ec 6c             	sub    esp,0x6c
c0006a6e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a72:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006a79:	e8 a0 b9 ff ff       	call   c000241e <mount_volume>
c0006a7e:	89 c6                	mov    esi,eax
c0006a80:	85 c0                	test   eax,eax
c0006a82:	0f 85 c1 01 00 00    	jne    c0006c49 <f_getlabel+0x1e4>
c0006a88:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006a90:	0f 84 5f 01 00 00    	je     c0006bf5 <f_getlabel+0x190>
c0006a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a9a:	31 d2                	xor    edx,edx
c0006a9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006aa0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006aa8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aac:	e8 39 c4 ff ff       	call   c0002eea <dir_sdi>
c0006ab1:	85 c0                	test   eax,eax
c0006ab3:	0f 85 2d 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006ab9:	ba 01 00 00 00       	mov    edx,0x1
c0006abe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ac2:	e8 33 cc ff ff       	call   c00036fa <dir_read>
c0006ac7:	85 c0                	test   eax,eax
c0006ac9:	0f 85 17 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ad3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ad6:	74 09                	je     c0006ae1 <f_getlabel+0x7c>
c0006ad8:	31 db                	xor    ebx,ebx
c0006ada:	31 c9                	xor    ecx,ecx
c0006adc:	e9 c8 00 00 00       	jmp    c0006ba9 <f_getlabel+0x144>
c0006ae1:	31 ed                	xor    ebp,ebp
c0006ae3:	31 db                	xor    ebx,ebx
c0006ae5:	31 ff                	xor    edi,edi
c0006ae7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aeb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006aef:	39 fa                	cmp    edx,edi
c0006af1:	76 4b                	jbe    c0006b3e <f_getlabel+0xd9>
c0006af3:	47                   	inc    edi
c0006af4:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006af7:	01 d0                	add    eax,edx
c0006af9:	e8 90 ae ff ff       	call   c000198e <ld_word>
c0006afe:	66 85 ed             	test   bp,bp
c0006b01:	75 0d                	jne    c0006b10 <f_getlabel+0xab>
c0006b03:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b09:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b0e:	76 28                	jbe    c0006b38 <f_getlabel+0xd3>
c0006b10:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b17:	89 e9                	mov    ecx,ebp
c0006b19:	01 da                	add    edx,ebx
c0006b1b:	c1 e1 10             	shl    ecx,0x10
c0006b1e:	0f b7 c0             	movzx  eax,ax
c0006b21:	09 c8                	or     eax,ecx
c0006b23:	b9 04 00 00 00       	mov    ecx,0x4
c0006b28:	e8 01 b0 ff ff       	call   c0001b2e <put_utf>
c0006b2d:	84 c0                	test   al,al
c0006b2f:	74 0b                	je     c0006b3c <f_getlabel+0xd7>
c0006b31:	0f b6 c0             	movzx  eax,al
c0006b34:	01 c3                	add    ebx,eax
c0006b36:	31 c0                	xor    eax,eax
c0006b38:	89 c5                	mov    ebp,eax
c0006b3a:	eb ab                	jmp    c0006ae7 <f_getlabel+0x82>
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	66 85 ed             	test   bp,bp
c0006b41:	74 02                	je     c0006b45 <f_getlabel+0xe0>
c0006b43:	31 db                	xor    ebx,ebx
c0006b45:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006b4c:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006b50:	e9 a0 00 00 00       	jmp    c0006bf5 <f_getlabel+0x190>
c0006b55:	83 ff 0b             	cmp    edi,0xb
c0006b58:	74 11                	je     c0006b6b <f_getlabel+0x106>
c0006b5a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b63:	8d 79 02             	lea    edi,[ecx+0x2]
c0006b66:	c1 e0 08             	shl    eax,0x8
c0006b69:	09 c2                	or     edx,eax
c0006b6b:	0f b7 d2             	movzx  edx,dx
c0006b6e:	50                   	push   eax
c0006b6f:	50                   	push   eax
c0006b70:	68 b5 01 00 00       	push   0x1b5
c0006b75:	52                   	push   edx
c0006b76:	e8 03 17 00 00       	call   c000827e <ff_oem2uni>
c0006b7b:	83 c4 10             	add    esp,0x10
c0006b7e:	66 85 c0             	test   ax,ax
c0006b81:	74 46                	je     c0006bc9 <f_getlabel+0x164>
c0006b83:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8a:	0f b7 c0             	movzx  eax,ax
c0006b8d:	01 da                	add    edx,ebx
c0006b8f:	b9 04 00 00 00       	mov    ecx,0x4
c0006b94:	e8 95 af ff ff       	call   c0001b2e <put_utf>
c0006b99:	84 c0                	test   al,al
c0006b9b:	74 2c                	je     c0006bc9 <f_getlabel+0x164>
c0006b9d:	0f b6 c0             	movzx  eax,al
c0006ba0:	01 c3                	add    ebx,eax
c0006ba2:	83 ff 0b             	cmp    edi,0xb
c0006ba5:	74 24                	je     c0006bcb <f_getlabel+0x166>
c0006ba7:	89 f9                	mov    ecx,edi
c0006ba9:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006bad:	8d 79 01             	lea    edi,[ecx+0x1]
c0006bb0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006bb5:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006bba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bbe:	e8 9f ae ff ff       	call   c0001a62 <dbc_1st>
c0006bc3:	85 c0                	test   eax,eax
c0006bc5:	74 a4                	je     c0006b6b <f_getlabel+0x106>
c0006bc7:	eb 8c                	jmp    c0006b55 <f_getlabel+0xf0>
c0006bc9:	31 db                	xor    ebx,ebx
c0006bcb:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006bd2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006bd5:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006bdc:	74 17                	je     c0006bf5 <f_getlabel+0x190>
c0006bde:	4b                   	dec    ebx
c0006bdf:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006be2:	74 ee                	je     c0006bd2 <f_getlabel+0x16d>
c0006be4:	eb 0f                	jmp    c0006bf5 <f_getlabel+0x190>
c0006be6:	83 f8 04             	cmp    eax,0x4
c0006be9:	75 5c                	jne    c0006c47 <f_getlabel+0x1e2>
c0006beb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bf2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006bf5:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006bfd:	74 4a                	je     c0006c49 <f_getlabel+0x1e4>
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c06:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c09:	e8 5e b5 ff ff       	call   c000216c <move_window>
c0006c0e:	89 c6                	mov    esi,eax
c0006c10:	85 c0                	test   eax,eax
c0006c12:	75 35                	jne    c0006c49 <f_getlabel+0x1e4>
c0006c14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c18:	b8 43 00 00 00       	mov    eax,0x43
c0006c1d:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c1f:	80 f9 03             	cmp    cl,0x3
c0006c22:	74 0f                	je     c0006c33 <f_getlabel+0x1ce>
c0006c24:	31 c0                	xor    eax,eax
c0006c26:	80 f9 04             	cmp    cl,0x4
c0006c29:	0f 94 c0             	sete   al
c0006c2c:	48                   	dec    eax
c0006c2d:	83 e0 c3             	and    eax,0xffffffc3
c0006c30:	83 c0 64             	add    eax,0x64
c0006c33:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006c37:	e8 5f ad ff ff       	call   c000199b <ld_dword>
c0006c3c:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006c43:	89 07                	mov    DWORD PTR [edi],eax
c0006c45:	eb 02                	jmp    c0006c49 <f_getlabel+0x1e4>
c0006c47:	89 c6                	mov    esi,eax
c0006c49:	83 c4 6c             	add    esp,0x6c
c0006c4c:	89 f0                	mov    eax,esi
c0006c4e:	5b                   	pop    ebx
c0006c4f:	5e                   	pop    esi
c0006c50:	5f                   	pop    edi
c0006c51:	5d                   	pop    ebp
c0006c52:	c3                   	ret    

c0006c53 <f_setlabel>:
c0006c53:	56                   	push   esi
c0006c54:	b9 02 00 00 00       	mov    ecx,0x2
c0006c59:	53                   	push   ebx
c0006c5a:	83 ec 74             	sub    esp,0x74
c0006c5d:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006c61:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c68:	e8 b1 b7 ff ff       	call   c000241e <mount_volume>
c0006c6d:	89 c6                	mov    esi,eax
c0006c6f:	85 c0                	test   eax,eax
c0006c71:	0f 85 41 02 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006c77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c7b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c7e:	0f 85 8e 00 00 00    	jne    c0006d12 <f_setlabel+0xbf>
c0006c84:	b9 16 00 00 00       	mov    ecx,0x16
c0006c89:	31 d2                	xor    edx,edx
c0006c8b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006c8f:	31 db                	xor    ebx,ebx
c0006c91:	e8 8c ad ff ff       	call   c0001a22 <mem_set>
c0006c96:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006c9d:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ca0:	0f 86 0a 01 00 00    	jbe    c0006db0 <f_setlabel+0x15d>
c0006ca6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cad:	e8 b6 ad ff ff       	call   c0001a68 <tchar2uni>
c0006cb2:	89 c6                	mov    esi,eax
c0006cb4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006cb9:	76 2a                	jbe    c0006ce5 <f_setlabel+0x92>
c0006cbb:	83 f8 ff             	cmp    eax,0xffffffff
c0006cbe:	74 05                	je     c0006cc5 <f_setlabel+0x72>
c0006cc0:	83 fb 09             	cmp    ebx,0x9
c0006cc3:	76 0a                	jbe    c0006ccf <f_setlabel+0x7c>
c0006cc5:	be 06 00 00 00       	mov    esi,0x6
c0006cca:	e9 e9 01 00 00       	jmp    c0006eb8 <f_setlabel+0x265>
c0006ccf:	89 c2                	mov    edx,eax
c0006cd1:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cd5:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cd8:	c1 ea 10             	shr    edx,0x10
c0006cdb:	01 c8                	add    eax,ecx
c0006cdd:	43                   	inc    ebx
c0006cde:	e8 1d ad ff ff       	call   c0001a00 <st_word>
c0006ce3:	eb 04                	jmp    c0006ce9 <f_setlabel+0x96>
c0006ce5:	85 c0                	test   eax,eax
c0006ce7:	74 dc                	je     c0006cc5 <f_setlabel+0x72>
c0006ce9:	89 f2                	mov    edx,esi
c0006ceb:	b8 57 f5 01 c0       	mov    eax,0xc001f557
c0006cf0:	e8 5b ad ff ff       	call   c0001a50 <chk_chr>
c0006cf5:	85 c0                	test   eax,eax
c0006cf7:	75 cc                	jne    c0006cc5 <f_setlabel+0x72>
c0006cf9:	83 fb 0a             	cmp    ebx,0xa
c0006cfc:	77 c7                	ja     c0006cc5 <f_setlabel+0x72>
c0006cfe:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d01:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d05:	0f b7 d6             	movzx  edx,si
c0006d08:	01 c8                	add    eax,ecx
c0006d0a:	43                   	inc    ebx
c0006d0b:	e8 f0 ac ff ff       	call   c0001a00 <st_word>
c0006d10:	eb 84                	jmp    c0006c96 <f_setlabel+0x43>
c0006d12:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d17:	ba 20 00 00 00       	mov    edx,0x20
c0006d1c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d20:	31 db                	xor    ebx,ebx
c0006d22:	e8 fb ac ff ff       	call   c0001a22 <mem_set>
c0006d27:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d2e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d31:	76 60                	jbe    c0006d93 <f_setlabel+0x140>
c0006d33:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d3a:	e8 29 ad ff ff       	call   c0001a68 <tchar2uni>
c0006d3f:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d44:	0f 87 7b ff ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006d4a:	83 ec 0c             	sub    esp,0xc
c0006d4d:	50                   	push   eax
c0006d4e:	e8 97 15 00 00       	call   c00082ea <ff_wtoupper>
c0006d53:	5a                   	pop    edx
c0006d54:	59                   	pop    ecx
c0006d55:	68 b5 01 00 00       	push   0x1b5
c0006d5a:	50                   	push   eax
c0006d5b:	e8 8e 14 00 00       	call   c00081ee <ff_uni2oem>
c0006d60:	83 c4 10             	add    esp,0x10
c0006d63:	89 c6                	mov    esi,eax
c0006d65:	66 85 c0             	test   ax,ax
c0006d68:	0f 84 57 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d6e:	0f b7 d0             	movzx  edx,ax
c0006d71:	b8 50 f5 01 c0       	mov    eax,0xc001f550
c0006d76:	e8 d5 ac ff ff       	call   c0001a50 <chk_chr>
c0006d7b:	85 c0                	test   eax,eax
c0006d7d:	0f 85 42 ff ff ff    	jne    c0006cc5 <f_setlabel+0x72>
c0006d83:	66 81 fe ff 00       	cmp    si,0xff
c0006d88:	0f 87 14 01 00 00    	ja     c0006ea2 <f_setlabel+0x24f>
c0006d8e:	e9 fa 00 00 00       	jmp    c0006e8d <f_setlabel+0x23a>
c0006d93:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006d98:	0f 84 27 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d9e:	85 db                	test   ebx,ebx
c0006da0:	74 0e                	je     c0006db0 <f_setlabel+0x15d>
c0006da2:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006da5:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006daa:	75 04                	jne    c0006db0 <f_setlabel+0x15d>
c0006dac:	89 c3                	mov    ebx,eax
c0006dae:	eb ee                	jmp    c0006d9e <f_setlabel+0x14b>
c0006db0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006db4:	31 d2                	xor    edx,edx
c0006db6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006dba:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006dc2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dc6:	e8 1f c1 ff ff       	call   c0002eea <dir_sdi>
c0006dcb:	89 c6                	mov    esi,eax
c0006dcd:	85 c0                	test   eax,eax
c0006dcf:	0f 85 e3 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006dd5:	ba 01 00 00 00       	mov    edx,0x1
c0006dda:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dde:	e8 17 c9 ff ff       	call   c00036fa <dir_read>
c0006de3:	85 c0                	test   eax,eax
c0006de5:	75 21                	jne    c0006e08 <f_setlabel+0x1b5>
c0006de7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006deb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006def:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006df2:	74 5d                	je     c0006e51 <f_setlabel+0x1fe>
c0006df4:	85 db                	test   ebx,ebx
c0006df6:	74 0b                	je     c0006e03 <f_setlabel+0x1b0>
c0006df8:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dfd:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e01:	eb 70                	jmp    c0006e73 <f_setlabel+0x220>
c0006e03:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e06:	eb 70                	jmp    c0006e78 <f_setlabel+0x225>
c0006e08:	83 f8 04             	cmp    eax,0x4
c0006e0b:	75 7c                	jne    c0006e89 <f_setlabel+0x236>
c0006e0d:	85 db                	test   ebx,ebx
c0006e0f:	0f 84 a3 00 00 00    	je     c0006eb8 <f_setlabel+0x265>
c0006e15:	ba 01 00 00 00       	mov    edx,0x1
c0006e1a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e1e:	e8 51 ca ff ff       	call   c0003874 <dir_alloc>
c0006e23:	89 c6                	mov    esi,eax
c0006e25:	85 c0                	test   eax,eax
c0006e27:	0f 85 8b 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006e2d:	31 d2                	xor    edx,edx
c0006e2f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e33:	b9 20 00 00 00       	mov    ecx,0x20
c0006e38:	e8 e5 ab ff ff       	call   c0001a22 <mem_set>
c0006e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e41:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e44:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e48:	75 18                	jne    c0006e62 <f_setlabel+0x20f>
c0006e4a:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006e4d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e51:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006e54:	b9 16 00 00 00       	mov    ecx,0x16
c0006e59:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e5d:	83 c0 02             	add    eax,0x2
c0006e60:	eb 9b                	jmp    c0006dfd <f_setlabel+0x1aa>
c0006e62:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006e66:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e6b:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e6f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e73:	e8 95 ab ff ff       	call   c0001a0d <mem_cpy>
c0006e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006e80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e84:	e8 0e d4 ff ff       	call   c0004297 <sync_fs>
c0006e89:	89 c6                	mov    esi,eax
c0006e8b:	eb 2b                	jmp    c0006eb8 <f_setlabel+0x265>
c0006e8d:	83 fb 0a             	cmp    ebx,0xa
c0006e90:	0f 87 2f fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006e96:	89 f0                	mov    eax,esi
c0006e98:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e9c:	43                   	inc    ebx
c0006e9d:	e9 85 fe ff ff       	jmp    c0006d27 <f_setlabel+0xd4>
c0006ea2:	83 fb 09             	cmp    ebx,0x9
c0006ea5:	0f 87 1a fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006eab:	89 f0                	mov    eax,esi
c0006ead:	66 c1 e8 08          	shr    ax,0x8
c0006eb1:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006eb5:	43                   	inc    ebx
c0006eb6:	eb de                	jmp    c0006e96 <f_setlabel+0x243>
c0006eb8:	89 f0                	mov    eax,esi
c0006eba:	83 c4 74             	add    esp,0x74
c0006ebd:	5b                   	pop    ebx
c0006ebe:	5e                   	pop    esi
c0006ebf:	c3                   	ret    

c0006ec0 <f_forward>:
c0006ec0:	55                   	push   ebp
c0006ec1:	57                   	push   edi
c0006ec2:	56                   	push   esi
c0006ec3:	53                   	push   ebx
c0006ec4:	83 ec 2c             	sub    esp,0x2c
c0006ec7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ecb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006ecf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006ed5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006ed9:	89 d8                	mov    eax,ebx
c0006edb:	e8 b1 b1 ff ff       	call   c0002091 <validate>
c0006ee0:	89 c5                	mov    ebp,eax
c0006ee2:	85 c0                	test   eax,eax
c0006ee4:	0f 85 aa 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006eea:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006eee:	85 ed                	test   ebp,ebp
c0006ef0:	0f 85 9e 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006ef6:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006efa:	0f 84 8f 01 00 00    	je     c000708f <f_forward+0x1cf>
c0006f00:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f03:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f06:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f09:	bf 00 00 00 00       	mov    edi,0x0
c0006f0e:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f11:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f15:	89 d1                	mov    ecx,edx
c0006f17:	19 f9                	sbb    ecx,edi
c0006f19:	0f 83 cf 00 00 00    	jae    c0006fee <f_forward+0x12e>
c0006f1f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f23:	e9 c6 00 00 00       	jmp    c0006fee <f_forward+0x12e>
c0006f28:	50                   	push   eax
c0006f29:	50                   	push   eax
c0006f2a:	6a 00                	push   0x0
c0006f2c:	6a 00                	push   0x0
c0006f2e:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006f32:	83 c4 10             	add    esp,0x10
c0006f35:	85 c0                	test   eax,eax
c0006f37:	0f 84 57 01 00 00    	je     c0007094 <f_forward+0x1d4>
c0006f3d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006f40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f44:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006f47:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006f4b:	89 d7                	mov    edi,edx
c0006f4d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006f50:	89 c6                	mov    esi,eax
c0006f52:	0f ac fe 09          	shrd   esi,edi,0x9
c0006f56:	21 ce                	and    esi,ecx
c0006f58:	89 c1                	mov    ecx,eax
c0006f5a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006f60:	0f 84 98 00 00 00    	je     c0006ffe <f_forward+0x13e>
c0006f66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f6a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006f6d:	89 c8                	mov    eax,ecx
c0006f6f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006f73:	e8 af ac ff ff       	call   c0001c27 <clst2sect>
c0006f78:	89 d7                	mov    edi,edx
c0006f7a:	09 c7                	or     edi,eax
c0006f7c:	0f 84 9e 00 00 00    	je     c0007020 <f_forward+0x160>
c0006f82:	31 ff                	xor    edi,edi
c0006f84:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006f87:	01 c6                	add    esi,eax
c0006f89:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0006f8d:	11 d7                	adc    edi,edx
c0006f8f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0006f92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006f95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006f99:	39 fa                	cmp    edx,edi
c0006f9b:	0f 85 a2 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa1:	39 f0                	cmp    eax,esi
c0006fa3:	0f 85 9a 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fac:	ba 00 02 00 00       	mov    edx,0x200
c0006fb1:	25 ff 01 00 00       	and    eax,0x1ff
c0006fb6:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0006fba:	29 c2                	sub    edx,eax
c0006fbc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0006fbf:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0006fc2:	39 d1                	cmp    ecx,edx
c0006fc4:	76 02                	jbe    c0006fc8 <f_forward+0x108>
c0006fc6:	89 d1                	mov    ecx,edx
c0006fc8:	8d 73 50             	lea    esi,[ebx+0x50]
c0006fcb:	52                   	push   edx
c0006fcc:	01 c6                	add    esi,eax
c0006fce:	52                   	push   edx
c0006fcf:	51                   	push   ecx
c0006fd0:	56                   	push   esi
c0006fd1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fd5:	83 c4 10             	add    esp,0x10
c0006fd8:	85 c0                	test   eax,eax
c0006fda:	74 44                	je     c0007020 <f_forward+0x160>
c0006fdc:	31 ff                	xor    edi,edi
c0006fde:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0006fe1:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0006fe4:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0006fe8:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0006fec:	01 07                	add    DWORD PTR [edi],eax
c0006fee:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0006ff3:	0f 85 2f ff ff ff    	jne    c0006f28 <f_forward+0x68>
c0006ff9:	e9 96 00 00 00       	jmp    c0007094 <f_forward+0x1d4>
c0006ffe:	85 f6                	test   esi,esi
c0007000:	0f 85 60 ff ff ff    	jne    c0006f66 <f_forward+0xa6>
c0007006:	89 d7                	mov    edi,edx
c0007008:	09 c7                	or     edi,eax
c000700a:	75 05                	jne    c0007011 <f_forward+0x151>
c000700c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000700f:	eb 0a                	jmp    c000701b <f_forward+0x15b>
c0007011:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007014:	89 d8                	mov    eax,ebx
c0007016:	e8 d9 bc ff ff       	call   c0002cf4 <get_fat>
c000701b:	83 f8 01             	cmp    eax,0x1
c000701e:	77 0b                	ja     c000702b <f_forward+0x16b>
c0007020:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007024:	bd 02 00 00 00       	mov    ebp,0x2
c0007029:	eb 69                	jmp    c0007094 <f_forward+0x1d4>
c000702b:	83 f8 ff             	cmp    eax,0xffffffff
c000702e:	75 0b                	jne    c000703b <f_forward+0x17b>
c0007030:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007034:	bd 01 00 00 00       	mov    ebp,0x1
c0007039:	eb 59                	jmp    c0007094 <f_forward+0x1d4>
c000703b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000703e:	e9 23 ff ff ff       	jmp    c0006f66 <f_forward+0xa6>
c0007043:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007047:	79 20                	jns    c0007069 <f_forward+0x1a9>
c0007049:	83 ec 0c             	sub    esp,0xc
c000704c:	6a 01                	push   0x1
c000704e:	52                   	push   edx
c000704f:	50                   	push   eax
c0007050:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007054:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007058:	50                   	push   eax
c0007059:	e8 fb a8 ff ff       	call   c0001959 <disk_write>
c000705e:	83 c4 20             	add    esp,0x20
c0007061:	85 c0                	test   eax,eax
c0007063:	75 cb                	jne    c0007030 <f_forward+0x170>
c0007065:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007069:	83 ec 0c             	sub    esp,0xc
c000706c:	6a 01                	push   0x1
c000706e:	57                   	push   edi
c000706f:	56                   	push   esi
c0007070:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007074:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007078:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000707c:	50                   	push   eax
c000707d:	e8 c1 a8 ff ff       	call   c0001943 <disk_read>
c0007082:	83 c4 20             	add    esp,0x20
c0007085:	85 c0                	test   eax,eax
c0007087:	0f 84 1c ff ff ff    	je     c0006fa9 <f_forward+0xe9>
c000708d:	eb a1                	jmp    c0007030 <f_forward+0x170>
c000708f:	bd 07 00 00 00       	mov    ebp,0x7
c0007094:	83 c4 2c             	add    esp,0x2c
c0007097:	89 e8                	mov    eax,ebp
c0007099:	5b                   	pop    ebx
c000709a:	5e                   	pop    esi
c000709b:	5f                   	pop    edi
c000709c:	5d                   	pop    ebp
c000709d:	c3                   	ret    

c000709e <f_mkfs>:
c000709e:	55                   	push   ebp
c000709f:	57                   	push   edi
c00070a0:	56                   	push   esi
c00070a1:	53                   	push   ebx
c00070a2:	bb 0b 00 00 00       	mov    ebx,0xb
c00070a7:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00070ad:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00070b4:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00070bb:	e8 b0 ae ff ff       	call   c0001f70 <get_ldnumber>
c00070c0:	85 c0                	test   eax,eax
c00070c2:	0f 88 ec 10 00 00    	js     c00081b4 <f_mkfs+0x1116>
c00070c8:	8b 14 85 a0 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcb60]
c00070cf:	85 d2                	test   edx,edx
c00070d1:	74 03                	je     c00070d6 <f_mkfs+0x38>
c00070d3:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00070d6:	85 f6                	test   esi,esi
c00070d8:	75 05                	jne    c00070df <f_mkfs+0x41>
c00070da:	be 40 f5 01 c0       	mov    esi,0xc001f540
c00070df:	83 ec 0c             	sub    esp,0xc
c00070e2:	0f b6 c0             	movzx  eax,al
c00070e5:	bb 03 00 00 00       	mov    ebx,0x3
c00070ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070f2:	e8 49 a8 ff ff       	call   c0001940 <disk_initialize>
c00070f7:	83 c4 10             	add    esp,0x10
c00070fa:	a8 01                	test   al,0x1
c00070fc:	0f 85 b2 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c0007102:	bb 0a 00 00 00       	mov    ebx,0xa
c0007107:	a8 04                	test   al,0x4
c0007109:	0f 85 a5 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c000710f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007112:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007116:	85 c0                	test   eax,eax
c0007118:	75 20                	jne    c000713a <f_mkfs+0x9c>
c000711a:	51                   	push   ecx
c000711b:	8d 44 24 78          	lea    eax,[esp+0x78]
c000711f:	50                   	push   eax
c0007120:	6a 03                	push   0x3
c0007122:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007126:	e8 44 a8 ff ff       	call   c000196f <disk_ioctl>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	85 c0                	test   eax,eax
c0007130:	74 08                	je     c000713a <f_mkfs+0x9c>
c0007132:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000713a:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000713e:	8d 42 ff             	lea    eax,[edx-0x1]
c0007141:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007146:	77 04                	ja     c000714c <f_mkfs+0xae>
c0007148:	85 c2                	test   edx,eax
c000714a:	74 08                	je     c0007154 <f_mkfs+0xb6>
c000714c:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007154:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007157:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000715b:	48                   	dec    eax
c000715c:	3c 01                	cmp    al,0x1
c000715e:	76 05                	jbe    c0007165 <f_mkfs+0xc7>
c0007160:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007165:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007168:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000716c:	48                   	dec    eax
c000716d:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007172:	77 07                	ja     c000717b <f_mkfs+0xdd>
c0007174:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007179:	74 08                	je     c0007183 <f_mkfs+0xe5>
c000717b:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007183:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007186:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000718c:	77 07                	ja     c0007195 <f_mkfs+0xf7>
c000718e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007191:	85 d8                	test   eax,ebx
c0007193:	74 02                	je     c0007197 <f_mkfs+0xf9>
c0007195:	31 db                	xor    ebx,ebx
c0007197:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00071a2:	77 0a                	ja     c00071ae <f_mkfs+0x110>
c00071a4:	bb 11 00 00 00       	mov    ebx,0x11
c00071a9:	e9 06 10 00 00       	jmp    c00081b4 <f_mkfs+0x1116>
c00071ae:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00071b5:	8b 36                	mov    esi,DWORD PTR [esi]
c00071b7:	85 ed                	test   ebp,ebp
c00071b9:	75 1e                	jne    c00071d9 <f_mkfs+0x13b>
c00071bb:	83 ec 0c             	sub    esp,0xc
c00071be:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00071c5:	25 00 fe ff ff       	and    eax,0xfffffe00
c00071ca:	50                   	push   eax
c00071cb:	e8 f1 0f 00 00       	call   c00081c1 <ff_memalloc>
c00071d0:	83 c4 10             	add    esp,0x10
c00071d3:	89 c5                	mov    ebp,eax
c00071d5:	85 c0                	test   eax,eax
c00071d7:	74 cb                	je     c00071a4 <f_mkfs+0x106>
c00071d9:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00071e1:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00071e9:	52                   	push   edx
c00071ea:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00071ee:	50                   	push   eax
c00071ef:	6a 01                	push   0x1
c00071f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071f5:	e8 75 a7 ff ff       	call   c000196f <disk_ioctl>
c00071fa:	83 c4 10             	add    esp,0x10
c00071fd:	85 c0                	test   eax,eax
c00071ff:	0f 85 4a 0f 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007205:	89 f1                	mov    ecx,esi
c0007207:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000720f:	83 e1 0f             	and    ecx,0xf
c0007212:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000721a:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000721e:	83 e6 08             	and    esi,0x8
c0007221:	75 56                	jne    c0007279 <f_mkfs+0x1db>
c0007223:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007227:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000722b:	83 ff 00             	cmp    edi,0x0
c000722e:	76 20                	jbe    c0007250 <f_mkfs+0x1b2>
c0007230:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007235:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000723d:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007243:	83 d7 ff             	adc    edi,0xffffffff
c0007246:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000724a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000724e:	eb 21                	jmp    c0007271 <f_mkfs+0x1d3>
c0007250:	ba 3f 00 00 00       	mov    edx,0x3f
c0007255:	39 f2                	cmp    edx,esi
c0007257:	19 f8                	sbb    eax,edi
c0007259:	73 1e                	jae    c0007279 <f_mkfs+0x1db>
c000725b:	83 c6 c1             	add    esi,0xffffffc1
c000725e:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007266:	83 d7 ff             	adc    edi,0xffffffff
c0007269:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000726d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007271:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007279:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000727d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007281:	89 04 24             	mov    DWORD PTR [esp],eax
c0007284:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007288:	31 c0                	xor    eax,eax
c000728a:	ba 7f 00 00 00       	mov    edx,0x7f
c000728f:	89 c7                	mov    edi,eax
c0007291:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007294:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007298:	0f 83 c5 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c000729e:	89 df                	mov    edi,ebx
c00072a0:	c1 ef 09             	shr    edi,0x9
c00072a3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00072a7:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00072ae:	c1 ef 09             	shr    edi,0x9
c00072b1:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00072b6:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00072ba:	74 29                	je     c00072e5 <f_mkfs+0x247>
c00072bc:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072c2:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00072c7:	0f 97 c2             	seta   dl
c00072ca:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00072cd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00072d1:	0f 92 c0             	setb   al
c00072d4:	08 c2                	or     dl,al
c00072d6:	75 5b                	jne    c0007333 <f_mkfs+0x295>
c00072d8:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00072dc:	83 e0 07             	and    eax,0x7
c00072df:	3c 04                	cmp    al,0x4
c00072e1:	74 50                	je     c0007333 <f_mkfs+0x295>
c00072e3:	eb 1b                	jmp    c0007300 <f_mkfs+0x262>
c00072e5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00072ea:	0f 87 73 0a 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c00072f0:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072f6:	76 08                	jbe    c0007300 <f_mkfs+0x262>
c00072f8:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007300:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007304:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007308:	83 e0 01             	and    eax,0x1
c000730b:	80 e1 02             	and    cl,0x2
c000730e:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007312:	74 0d                	je     c0007321 <f_mkfs+0x283>
c0007314:	84 c0                	test   al,al
c0007316:	0f 84 53 09 00 00    	je     c0007c6f <f_mkfs+0xbd1>
c000731c:	e9 12 08 00 00       	jmp    c0007b33 <f_mkfs+0xa95>
c0007321:	bb 13 00 00 00       	mov    ebx,0x13
c0007326:	84 c0                	test   al,al
c0007328:	0f 85 05 08 00 00    	jne    c0007b33 <f_mkfs+0xa95>
c000732e:	e9 39 0e 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007333:	31 c0                	xor    eax,eax
c0007335:	ba ff 0f 00 00       	mov    edx,0xfff
c000733a:	89 c7                	mov    edi,eax
c000733c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000733f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007343:	0f 83 1a 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007349:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000734f:	77 39                	ja     c000738a <f_mkfs+0x2ec>
c0007351:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007356:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000735e:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007361:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007365:	73 08                	jae    c000736f <f_mkfs+0x2d1>
c0007367:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000736f:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007374:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007377:	b8 00 00 00 00       	mov    eax,0x0
c000737c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007380:	73 08                	jae    c000738a <f_mkfs+0x2ec>
c0007382:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000738a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000738e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007392:	83 c0 20             	add    eax,0x20
c0007395:	83 d2 00             	adc    edx,0x0
c0007398:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000739c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00073a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00073a4:	31 d2                	xor    edx,edx
c00073a6:	31 ff                	xor    edi,edi
c00073a8:	52                   	push   edx
c00073a9:	89 fb                	mov    ebx,edi
c00073ab:	50                   	push   eax
c00073ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b4:	e8 13 72 01 00       	call   c001e5cc <__udivdi3>
c00073b9:	83 c4 10             	add    esp,0x10
c00073bc:	c1 e0 02             	shl    eax,0x2
c00073bf:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00073c3:	05 07 02 00 00       	add    eax,0x207
c00073c8:	89 f1                	mov    ecx,esi
c00073ca:	c1 e8 09             	shr    eax,0x9
c00073cd:	83 c1 ff             	add    ecx,0xffffffff
c00073d0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00073d4:	83 d3 ff             	adc    ebx,0xffffffff
c00073d7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00073db:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00073df:	31 d2                	xor    edx,edx
c00073e1:	01 c8                	add    eax,ecx
c00073e3:	11 da                	adc    edx,ebx
c00073e5:	89 c1                	mov    ecx,eax
c00073e7:	f7 de                	neg    esi
c00073e9:	89 d0                	mov    eax,edx
c00073eb:	83 d7 00             	adc    edi,0x0
c00073ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00073f2:	f7 df                	neg    edi
c00073f4:	21 f1                	and    ecx,esi
c00073f6:	21 f8                	and    eax,edi
c00073f8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00073fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007400:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007404:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007408:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000740c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000740f:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007413:	0f ac d0 01          	shrd   eax,edx,0x1
c0007417:	89 df                	mov    edi,ebx
c0007419:	d1 ea                	shr    edx,1
c000741b:	39 c1                	cmp    ecx,eax
c000741d:	19 d7                	sbb    edi,edx
c000741f:	0f 83 3e 09 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007429:	31 d2                	xor    edx,edx
c000742b:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000742f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007433:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007437:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000743a:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000743e:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007442:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007446:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000744a:	83 f8 0f             	cmp    eax,0xf
c000744d:	0f 86 10 09 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007453:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000745b:	0f 87 02 09 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007461:	31 d2                	xor    edx,edx
c0007463:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007467:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000746f:	83 c0 07             	add    eax,0x7
c0007472:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000747a:	c1 e8 03             	shr    eax,0x3
c000747d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007484:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000748c:	c1 e0 09             	shl    eax,0x9
c000748f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007493:	48                   	dec    eax
c0007494:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007498:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000749c:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00074a0:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00074a4:	31 d2                	xor    edx,edx
c00074a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00074aa:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00074b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074b5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00074ba:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00074be:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00074c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00074c6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00074ca:	31 ff                	xor    edi,edi
c00074cc:	31 f6                	xor    esi,esi
c00074ce:	31 db                	xor    ebx,ebx
c00074d0:	85 ff                	test   edi,edi
c00074d2:	74 05                	je     c00074d9 <f_mkfs+0x43b>
c00074d4:	4f                   	dec    edi
c00074d5:	74 44                	je     c000751b <f_mkfs+0x47d>
c00074d7:	eb 4f                	jmp    c0007528 <f_mkfs+0x48a>
c00074d9:	83 ec 0c             	sub    esp,0xc
c00074dc:	0f b7 c3             	movzx  eax,bx
c00074df:	50                   	push   eax
c00074e0:	e8 05 0e 00 00       	call   c00082ea <ff_wtoupper>
c00074e5:	83 c4 10             	add    esp,0x10
c00074e8:	89 c1                	mov    ecx,eax
c00074ea:	8d 53 01             	lea    edx,[ebx+0x1]
c00074ed:	66 39 c3             	cmp    bx,ax
c00074f0:	75 3e                	jne    c0007530 <f_mkfs+0x492>
c00074f2:	be 01 00 00 00       	mov    esi,0x1
c00074f7:	89 df                	mov    edi,ebx
c00074f9:	66 01 f7             	add    di,si
c00074fc:	75 07                	jne    c0007505 <f_mkfs+0x467>
c00074fe:	83 fe 7f             	cmp    esi,0x7f
c0007501:	77 31                	ja     c0007534 <f_mkfs+0x496>
c0007503:	eb 16                	jmp    c000751b <f_mkfs+0x47d>
c0007505:	83 ec 0c             	sub    esp,0xc
c0007508:	0f b7 ff             	movzx  edi,di
c000750b:	57                   	push   edi
c000750c:	e8 d9 0d 00 00       	call   c00082ea <ff_wtoupper>
c0007511:	83 c4 10             	add    esp,0x10
c0007514:	39 c7                	cmp    edi,eax
c0007516:	75 e6                	jne    c00074fe <f_mkfs+0x460>
c0007518:	46                   	inc    esi
c0007519:	eb dc                	jmp    c00074f7 <f_mkfs+0x459>
c000751b:	31 c0                	xor    eax,eax
c000751d:	89 d9                	mov    ecx,ebx
c000751f:	4e                   	dec    esi
c0007520:	0f 95 c0             	setne  al
c0007523:	43                   	inc    ebx
c0007524:	89 c7                	mov    edi,eax
c0007526:	eb 14                	jmp    c000753c <f_mkfs+0x49e>
c0007528:	89 f1                	mov    ecx,esi
c000752a:	01 f3                	add    ebx,esi
c000752c:	31 ff                	xor    edi,edi
c000752e:	eb 0c                	jmp    c000753c <f_mkfs+0x49e>
c0007530:	89 d3                	mov    ebx,edx
c0007532:	eb 08                	jmp    c000753c <f_mkfs+0x49e>
c0007534:	bf 02 00 00 00       	mov    edi,0x2
c0007539:	83 c9 ff             	or     ecx,0xffffffff
c000753c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007540:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007543:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007547:	0f b6 c1             	movzx  eax,cl
c000754a:	e8 3a a9 ff ff       	call   c0001e89 <xsum32>
c000754f:	66 c1 e9 08          	shr    cx,0x8
c0007553:	89 c2                	mov    edx,eax
c0007555:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007558:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000755c:	0f b7 c1             	movzx  eax,cx
c000755f:	e8 25 a9 ff ff       	call   c0001e89 <xsum32>
c0007564:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007569:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000756d:	66 85 db             	test   bx,bx
c0007570:	74 1f                	je     c0007591 <f_mkfs+0x4f3>
c0007572:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007575:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000757c:	83 c0 02             	add    eax,0x2
c000757f:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007585:	39 c2                	cmp    edx,eax
c0007587:	74 08                	je     c0007591 <f_mkfs+0x4f3>
c0007589:	89 04 24             	mov    DWORD PTR [esp],eax
c000758c:	e9 3f ff ff ff       	jmp    c00074d0 <f_mkfs+0x432>
c0007591:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007594:	83 ec 0c             	sub    esp,0xc
c0007597:	05 01 02 00 00       	add    eax,0x201
c000759c:	c1 e8 09             	shr    eax,0x9
c000759f:	50                   	push   eax
c00075a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00075a4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075a8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075ac:	55                   	push   ebp
c00075ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075b1:	e8 a3 a3 ff ff       	call   c0001959 <disk_write>
c00075b6:	83 c4 20             	add    esp,0x20
c00075b9:	85 c0                	test   eax,eax
c00075bb:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00075be:	0f 85 8b 0b 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00075c4:	89 d0                	mov    eax,edx
c00075c6:	31 d2                	xor    edx,edx
c00075c8:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00075cc:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00075d0:	66 85 db             	test   bx,bx
c00075d3:	74 04                	je     c00075d9 <f_mkfs+0x53b>
c00075d5:	31 c0                	xor    eax,eax
c00075d7:	eb b0                	jmp    c0007589 <f_mkfs+0x4eb>
c00075d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00075dd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00075e1:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00075e5:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00075eb:	31 d2                	xor    edx,edx
c00075ed:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00075f8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00075fc:	c1 eb 09             	shr    ebx,0x9
c00075ff:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007606:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000760a:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000760e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007612:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007616:	8d 70 01             	lea    esi,[eax+0x1]
c0007619:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000761d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007621:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007628:	31 d2                	xor    edx,edx
c000762a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000762f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007632:	89 c1                	mov    ecx,eax
c0007634:	89 e8                	mov    eax,ebp
c0007636:	e8 e7 a3 ff ff       	call   c0001a22 <mem_set>
c000763b:	31 c0                	xor    eax,eax
c000763d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007640:	76 10                	jbe    c0007652 <f_mkfs+0x5b4>
c0007642:	83 fe 07             	cmp    esi,0x7
c0007645:	76 0b                	jbe    c0007652 <f_mkfs+0x5b4>
c0007647:	40                   	inc    eax
c0007648:	83 ee 08             	sub    esi,0x8
c000764b:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007650:	eb eb                	jmp    c000763d <f_mkfs+0x59f>
c0007652:	b2 01                	mov    dl,0x1
c0007654:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007658:	85 f6                	test   esi,esi
c000765a:	74 0c                	je     c0007668 <f_mkfs+0x5ca>
c000765c:	39 04 24             	cmp    DWORD PTR [esp],eax
c000765f:	76 07                	jbe    c0007668 <f_mkfs+0x5ca>
c0007661:	08 11                	or     BYTE PTR [ecx],dl
c0007663:	4e                   	dec    esi
c0007664:	d1 e2                	shl    edx,1
c0007666:	eb f0                	jmp    c0007658 <f_mkfs+0x5ba>
c0007668:	89 df                	mov    edi,ebx
c000766a:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000766e:	76 04                	jbe    c0007674 <f_mkfs+0x5d6>
c0007670:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007674:	83 ec 0c             	sub    esp,0xc
c0007677:	57                   	push   edi
c0007678:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000767c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007680:	55                   	push   ebp
c0007681:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007685:	e8 cf a2 ff ff       	call   c0001959 <disk_write>
c000768a:	83 c4 20             	add    esp,0x20
c000768d:	85 c0                	test   eax,eax
c000768f:	0f 85 ba 0a 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007695:	31 d2                	xor    edx,edx
c0007697:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000769b:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000769f:	29 fb                	sub    ebx,edi
c00076a1:	0f 85 7a ff ff ff    	jne    c0007621 <f_mkfs+0x583>
c00076a7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00076ab:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00076b3:	31 f6                	xor    esi,esi
c00076b5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00076b9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00076bc:	31 d2                	xor    edx,edx
c00076be:	89 e8                	mov    eax,ebp
c00076c0:	e8 5d a3 ff ff       	call   c0001a22 <mem_set>
c00076c5:	31 c9                	xor    ecx,ecx
c00076c7:	85 db                	test   ebx,ebx
c00076c9:	75 40                	jne    c000770b <f_mkfs+0x66d>
c00076cb:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00076d0:	89 e8                	mov    eax,ebp
c00076d2:	bb 02 00 00 00       	mov    ebx,0x2
c00076d7:	e8 28 a3 ff ff       	call   c0001a04 <st_dword>
c00076dc:	8d 45 04             	lea    eax,[ebp+0x4]
c00076df:	83 ca ff             	or     edx,0xffffffff
c00076e2:	e8 1d a3 ff ff       	call   c0001a04 <st_dword>
c00076e7:	b9 08 00 00 00       	mov    ecx,0x8
c00076ec:	eb 1d                	jmp    c000770b <f_mkfs+0x66d>
c00076ee:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00076f1:	76 3b                	jbe    c000772e <f_mkfs+0x690>
c00076f3:	43                   	inc    ebx
c00076f4:	83 fe 01             	cmp    esi,0x1
c00076f7:	89 da                	mov    edx,ebx
c00076f9:	77 03                	ja     c00076fe <f_mkfs+0x660>
c00076fb:	83 ca ff             	or     edx,0xffffffff
c00076fe:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007702:	4e                   	dec    esi
c0007703:	e8 fc a2 ff ff       	call   c0001a04 <st_dword>
c0007708:	83 c1 04             	add    ecx,0x4
c000770b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000770f:	85 f6                	test   esi,esi
c0007711:	75 db                	jne    c00076ee <f_mkfs+0x650>
c0007713:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007718:	77 14                	ja     c000772e <f_mkfs+0x690>
c000771a:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000771e:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007725:	85 f6                	test   esi,esi
c0007727:	74 05                	je     c000772e <f_mkfs+0x690>
c0007729:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000772c:	77 dd                	ja     c000770b <f_mkfs+0x66d>
c000772e:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007732:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007736:	39 cf                	cmp    edi,ecx
c0007738:	76 02                	jbe    c000773c <f_mkfs+0x69e>
c000773a:	89 cf                	mov    edi,ecx
c000773c:	83 ec 0c             	sub    esp,0xc
c000773f:	57                   	push   edi
c0007740:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007744:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007748:	55                   	push   ebp
c0007749:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000774d:	e8 07 a2 ff ff       	call   c0001959 <disk_write>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	85 c0                	test   eax,eax
c0007757:	0f 85 f2 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c000775d:	31 d2                	xor    edx,edx
c000775f:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007763:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007767:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c000776b:	0f 85 48 ff ff ff    	jne    c00076b9 <f_mkfs+0x61b>
c0007771:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007774:	31 d2                	xor    edx,edx
c0007776:	89 e8                	mov    eax,ebp
c0007778:	31 ff                	xor    edi,edi
c000777a:	e8 a3 a2 ff ff       	call   c0001a22 <mem_set>
c000777f:	8d 45 34             	lea    eax,[ebp+0x34]
c0007782:	ba 02 00 00 00       	mov    edx,0x2
c0007787:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000778b:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000778f:	e8 70 a2 ff ff       	call   c0001a04 <st_dword>
c0007794:	8d 45 38             	lea    eax,[ebp+0x38]
c0007797:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000779b:	e8 64 a2 ff ff       	call   c0001a04 <st_dword>
c00077a0:	8d 45 44             	lea    eax,[ebp+0x44]
c00077a3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077a7:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c00077ab:	e8 54 a2 ff ff       	call   c0001a04 <st_dword>
c00077b0:	8d 45 54             	lea    eax,[ebp+0x54]
c00077b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00077b7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077bb:	83 c2 02             	add    edx,0x2
c00077be:	e8 41 a2 ff ff       	call   c0001a04 <st_dword>
c00077c3:	8d 45 58             	lea    eax,[ebp+0x58]
c00077c6:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00077ca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00077ce:	e8 31 a2 ff ff       	call   c0001a04 <st_dword>
c00077d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077d7:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00077dc:	89 c6                	mov    esi,eax
c00077de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077e2:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00077e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00077e9:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00077ed:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00077f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077f4:	39 cb                	cmp    ebx,ecx
c00077f6:	76 02                	jbe    c00077fa <f_mkfs+0x75c>
c00077f8:	89 cb                	mov    ebx,ecx
c00077fa:	83 ec 0c             	sub    esp,0xc
c00077fd:	53                   	push   ebx
c00077fe:	57                   	push   edi
c00077ff:	56                   	push   esi
c0007800:	55                   	push   ebp
c0007801:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007805:	e8 4f a1 ff ff       	call   c0001959 <disk_write>
c000780a:	83 c4 20             	add    esp,0x20
c000780d:	85 c0                	test   eax,eax
c000780f:	0f 85 3a 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007815:	31 d2                	xor    edx,edx
c0007817:	b9 00 02 00 00       	mov    ecx,0x200
c000781c:	89 e8                	mov    eax,ebp
c000781e:	e8 ff a1 ff ff       	call   c0001a22 <mem_set>
c0007823:	31 d2                	xor    edx,edx
c0007825:	01 de                	add    esi,ebx
c0007827:	11 d7                	adc    edi,edx
c0007829:	29 1c 24             	sub    DWORD PTR [esp],ebx
c000782c:	75 bf                	jne    c00077ed <f_mkfs+0x74f>
c000782e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007832:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007836:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c000783e:	b9 00 02 00 00       	mov    ecx,0x200
c0007843:	31 d2                	xor    edx,edx
c0007845:	89 e8                	mov    eax,ebp
c0007847:	e8 d6 a1 ff ff       	call   c0001a22 <mem_set>
c000784c:	b9 0b 00 00 00       	mov    ecx,0xb
c0007851:	ba 20 f6 01 c0       	mov    edx,0xc001f620
c0007856:	89 e8                	mov    eax,ebp
c0007858:	e8 b0 a1 ff ff       	call   c0001a0d <mem_cpy>
c000785d:	8d 45 40             	lea    eax,[ebp+0x40]
c0007860:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007864:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007868:	e8 9a a1 ff ff       	call   c0001a07 <st_qword>
c000786d:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007871:	8d 45 48             	lea    eax,[ebp+0x48]
c0007874:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007878:	e8 8a a1 ff ff       	call   c0001a07 <st_qword>
c000787d:	8d 45 50             	lea    eax,[ebp+0x50]
c0007880:	ba 20 00 00 00       	mov    edx,0x20
c0007885:	e8 7a a1 ff ff       	call   c0001a04 <st_dword>
c000788a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000788e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007892:	e8 6d a1 ff ff       	call   c0001a04 <st_dword>
c0007897:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000789b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000789f:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c00078a3:	e8 5c a1 ff ff       	call   c0001a04 <st_dword>
c00078a8:	8d 45 5c             	lea    eax,[ebp+0x5c]
c00078ab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00078af:	e8 50 a1 ff ff       	call   c0001a04 <st_dword>
c00078b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b8:	8d 50 02             	lea    edx,[eax+0x2]
c00078bb:	8d 45 60             	lea    eax,[ebp+0x60]
c00078be:	e8 41 a1 ff ff       	call   c0001a04 <st_dword>
c00078c3:	8d 45 64             	lea    eax,[ebp+0x64]
c00078c6:	ba 00 00 21 50       	mov    edx,0x50210000
c00078cb:	e8 34 a1 ff ff       	call   c0001a04 <st_dword>
c00078d0:	8d 45 68             	lea    eax,[ebp+0x68]
c00078d3:	ba 00 01 00 00       	mov    edx,0x100
c00078d8:	e8 23 a1 ff ff       	call   c0001a00 <st_word>
c00078dd:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00078e1:	b8 0a 00 00 00       	mov    eax,0xa
c00078e6:	48                   	dec    eax
c00078e7:	74 05                	je     c00078ee <f_mkfs+0x850>
c00078e9:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00078ec:	eb f8                	jmp    c00078e6 <f_mkfs+0x848>
c00078ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078f2:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00078f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00078fa:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00078fe:	74 05                	je     c0007905 <f_mkfs+0x867>
c0007900:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007903:	eb f5                	jmp    c00078fa <f_mkfs+0x85c>
c0007905:	8d 45 78             	lea    eax,[ebp+0x78]
c0007908:	ba eb fe 00 00       	mov    edx,0xfeeb
c000790d:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007913:	31 db                	xor    ebx,ebx
c0007915:	e8 e6 a0 ff ff       	call   c0001a00 <st_word>
c000791a:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007920:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	e8 d3 a0 ff ff       	call   c0001a00 <st_word>
c000792d:	31 c9                	xor    ecx,ecx
c000792f:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007932:	83 f8 01             	cmp    eax,0x1
c0007935:	76 13                	jbe    c000794a <f_mkfs+0x8ac>
c0007937:	83 f9 70             	cmp    ecx,0x70
c000793a:	74 0e                	je     c000794a <f_mkfs+0x8ac>
c000793c:	89 da                	mov    edx,ebx
c000793e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007943:	e8 41 a5 ff ff       	call   c0001e89 <xsum32>
c0007948:	89 c3                	mov    ebx,eax
c000794a:	41                   	inc    ecx
c000794b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007951:	75 dc                	jne    c000792f <f_mkfs+0x891>
c0007953:	89 f0                	mov    eax,esi
c0007955:	89 fa                	mov    edx,edi
c0007957:	83 c0 01             	add    eax,0x1
c000795a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000795e:	83 d2 00             	adc    edx,0x0
c0007961:	83 ec 0c             	sub    esp,0xc
c0007964:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007968:	6a 01                	push   0x1
c000796a:	57                   	push   edi
c000796b:	56                   	push   esi
c000796c:	55                   	push   ebp
c000796d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007971:	e8 e3 9f ff ff       	call   c0001959 <disk_write>
c0007976:	83 c4 20             	add    esp,0x20
c0007979:	85 c0                	test   eax,eax
c000797b:	0f 85 ce 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007981:	31 d2                	xor    edx,edx
c0007983:	b9 00 02 00 00       	mov    ecx,0x200
c0007988:	89 e8                	mov    eax,ebp
c000798a:	e8 93 a0 ff ff       	call   c0001a22 <mem_set>
c000798f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	e8 64 a0 ff ff       	call   c0001a00 <st_word>
c000799c:	89 f0                	mov    eax,esi
c000799e:	89 fa                	mov    edx,edi
c00079a0:	83 c0 09             	add    eax,0x9
c00079a3:	83 d2 00             	adc    edx,0x0
c00079a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00079a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00079ad:	31 c9                	xor    ecx,ecx
c00079af:	41                   	inc    ecx
c00079b0:	89 da                	mov    edx,ebx
c00079b2:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c00079b7:	e8 cd a4 ff ff       	call   c0001e89 <xsum32>
c00079bc:	89 c3                	mov    ebx,eax
c00079be:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c4:	75 e9                	jne    c00079af <f_mkfs+0x911>
c00079c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00079ce:	83 c0 01             	add    eax,0x1
c00079d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00079d5:	83 d2 00             	adc    edx,0x0
c00079d8:	83 ec 0c             	sub    esp,0xc
c00079db:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00079df:	6a 01                	push   0x1
c00079e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e9:	55                   	push   ebp
c00079ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079ee:	e8 66 9f ff ff       	call   c0001959 <disk_write>
c00079f3:	83 c4 20             	add    esp,0x20
c00079f6:	85 c0                	test   eax,eax
c00079f8:	0f 85 51 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00079fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a02:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a06:	75 09                	jne    c0007a11 <f_mkfs+0x973>
c0007a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a0f:	74 12                	je     c0007a23 <f_mkfs+0x985>
c0007a11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a15:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a21:	eb 8a                	jmp    c00079ad <f_mkfs+0x90f>
c0007a23:	31 d2                	xor    edx,edx
c0007a25:	b9 00 02 00 00       	mov    ecx,0x200
c0007a2a:	89 e8                	mov    eax,ebp
c0007a2c:	e8 f1 9f ff ff       	call   c0001a22 <mem_set>
c0007a31:	83 c6 0b             	add    esi,0xb
c0007a34:	83 d7 00             	adc    edi,0x0
c0007a37:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007a3b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007a3f:	31 c9                	xor    ecx,ecx
c0007a41:	41                   	inc    ecx
c0007a42:	89 da                	mov    edx,ebx
c0007a44:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a49:	e8 3b a4 ff ff       	call   c0001e89 <xsum32>
c0007a4e:	89 c3                	mov    ebx,eax
c0007a50:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a56:	75 e9                	jne    c0007a41 <f_mkfs+0x9a3>
c0007a58:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007a5b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007a5f:	83 c6 01             	add    esi,0x1
c0007a62:	83 d7 00             	adc    edi,0x0
c0007a65:	83 ec 0c             	sub    esp,0xc
c0007a68:	6a 01                	push   0x1
c0007a6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a72:	55                   	push   ebp
c0007a73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a77:	e8 dd 9e ff ff       	call   c0001959 <disk_write>
c0007a7c:	83 c4 20             	add    esp,0x20
c0007a7f:	85 c0                	test   eax,eax
c0007a81:	0f 85 c8 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007a87:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007a8b:	75 06                	jne    c0007a93 <f_mkfs+0x9f5>
c0007a8d:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007a91:	74 09                	je     c0007a9c <f_mkfs+0x9fe>
c0007a93:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a96:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007a9a:	eb a3                	jmp    c0007a3f <f_mkfs+0x9a1>
c0007a9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aa0:	89 da                	mov    edx,ebx
c0007aa2:	01 e8                	add    eax,ebp
c0007aa4:	e8 5b 9f ff ff       	call   c0001a04 <st_dword>
c0007aa9:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007aae:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007ab6:	75 e4                	jne    c0007a9c <f_mkfs+0x9fe>
c0007ab8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007abb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007abf:	83 c6 02             	add    esi,0x2
c0007ac2:	83 d7 00             	adc    edi,0x0
c0007ac5:	83 ec 0c             	sub    esp,0xc
c0007ac8:	6a 01                	push   0x1
c0007aca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ace:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ad2:	55                   	push   ebp
c0007ad3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad7:	e8 7d 9e ff ff       	call   c0001959 <disk_write>
c0007adc:	83 c4 20             	add    esp,0x20
c0007adf:	85 c0                	test   eax,eax
c0007ae1:	0f 85 68 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ae7:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007aec:	74 0d                	je     c0007afb <f_mkfs+0xa5d>
c0007aee:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007af6:	e9 43 fd ff ff       	jmp    c000783e <f_mkfs+0x7a0>
c0007afb:	b1 07                	mov    cl,0x7
c0007afd:	e9 e3 05 00 00       	jmp    c00080e5 <f_mkfs+0x1047>
c0007b02:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b07:	0f 85 4f 02 00 00    	jne    c0007d5c <f_mkfs+0xcbe>
c0007b0d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b12:	0f 86 22 02 00 00    	jbe    c0007d3a <f_mkfs+0xc9c>
c0007b18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b1d:	0f 85 81 06 00 00    	jne    c00081a4 <f_mkfs+0x1106>
c0007b23:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b2a:	83 f8 40             	cmp    eax,0x40
c0007b2d:	0f 87 51 06 00 00    	ja     c0008184 <f_mkfs+0x10e6>
c0007b33:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007b37:	85 ff                	test   edi,edi
c0007b39:	75 1c                	jne    c0007b57 <f_mkfs+0xab9>
c0007b3b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b3e:	ba 20 f5 01 c0       	mov    edx,0xc001f520
c0007b43:	c1 e9 0c             	shr    ecx,0xc
c0007b46:	bf 01 00 00 00       	mov    edi,0x1
c0007b4b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007b4e:	66 85 c0             	test   ax,ax
c0007b51:	0f 85 95 01 00 00    	jne    c0007cec <f_mkfs+0xc4e>
c0007b57:	31 d2                	xor    edx,edx
c0007b59:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007b5c:	f7 f7                	div    edi
c0007b5e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007b63:	0f 86 95 01 00 00    	jbe    c0007cfe <f_mkfs+0xc60>
c0007b69:	83 c0 02             	add    eax,0x2
c0007b6c:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007b71:	01 c0                	add    eax,eax
c0007b73:	05 ff 01 00 00       	add    eax,0x1ff
c0007b78:	be 01 00 00 00       	mov    esi,0x1
c0007b7d:	c1 e8 09             	shr    eax,0x9
c0007b80:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007b84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b88:	c1 e0 05             	shl    eax,0x5
c0007b8b:	c1 e8 09             	shr    eax,0x9
c0007b8e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007b92:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007b97:	31 d2                	xor    edx,edx
c0007b99:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b9d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007ba1:	89 f0                	mov    eax,esi
c0007ba3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007ba7:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007bab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007baf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007bb3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007bb7:	31 d2                	xor    edx,edx
c0007bb9:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007bbe:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007bc2:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007bc6:	31 db                	xor    ebx,ebx
c0007bc8:	01 c8                	add    eax,ecx
c0007bca:	11 da                	adc    edx,ebx
c0007bcc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007bd0:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007bd4:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007bd8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007bdc:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007be0:	f7 da                	neg    edx
c0007be2:	21 d1                	and    ecx,edx
c0007be4:	29 d9                	sub    ecx,ebx
c0007be6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007beb:	0f 85 20 01 00 00    	jne    c0007d11 <f_mkfs+0xc73>
c0007bf1:	31 db                	xor    ebx,ebx
c0007bf3:	01 ce                	add    esi,ecx
c0007bf5:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007bf9:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007bfd:	31 d2                	xor    edx,edx
c0007bff:	89 f8                	mov    eax,edi
c0007c01:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c05:	c1 e0 04             	shl    eax,0x4
c0007c08:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c0c:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c10:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c14:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c18:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c1b:	19 d3                	sbb    ebx,edx
c0007c1d:	0f 82 40 01 00 00    	jb     c0007d63 <f_mkfs+0xcc5>
c0007c23:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c26:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c2a:	89 c8                	mov    eax,ecx
c0007c2c:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007c31:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007c35:	29 f0                	sub    eax,esi
c0007c37:	29 d0                	sub    eax,edx
c0007c39:	31 d2                	xor    edx,edx
c0007c3b:	f7 f7                	div    edi
c0007c3d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c42:	89 c3                	mov    ebx,eax
c0007c44:	0f 85 b8 fe ff ff    	jne    c0007b02 <f_mkfs+0xa64>
c0007c4a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007c4f:	0f 87 1d 01 00 00    	ja     c0007d72 <f_mkfs+0xcd4>
c0007c55:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c5a:	0f 85 03 01 00 00    	jne    c0007d63 <f_mkfs+0xcc5>
c0007c60:	83 ff 01             	cmp    edi,0x1
c0007c63:	0f 86 fa 00 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007c69:	d1 ef                	shr    edi,1
c0007c6b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007c6f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c73:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c76:	85 db                	test   ebx,ebx
c0007c78:	75 2d                	jne    c0007ca7 <f_mkfs+0xc09>
c0007c7a:	89 cb                	mov    ebx,ecx
c0007c7c:	ba 30 f5 01 c0       	mov    edx,0xc001f530
c0007c81:	c1 eb 11             	shr    ebx,0x11
c0007c84:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007c8c:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c8f:	66 85 c0             	test   ax,ax
c0007c92:	74 11                	je     c0007ca5 <f_mkfs+0xc07>
c0007c94:	83 c2 02             	add    edx,0x2
c0007c97:	39 d8                	cmp    eax,ebx
c0007c99:	77 0a                	ja     c0007ca5 <f_mkfs+0xc07>
c0007c9b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007c9f:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007ca3:	eb e7                	jmp    c0007c8c <f_mkfs+0xbee>
c0007ca5:	31 db                	xor    ebx,ebx
c0007ca7:	31 d2                	xor    edx,edx
c0007ca9:	89 c8                	mov    eax,ecx
c0007cab:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007caf:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007cb6:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007cbb:	c1 ea 09             	shr    edx,0x9
c0007cbe:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007cc3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007cc7:	0f 87 96 00 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007ccd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cd1:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007cd9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007cdd:	be 20 00 00 00       	mov    esi,0x20
c0007ce2:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007ce7:	e9 a6 fe ff ff       	jmp    c0007b92 <f_mkfs+0xaf4>
c0007cec:	83 c2 02             	add    edx,0x2
c0007cef:	39 c8                	cmp    eax,ecx
c0007cf1:	0f 87 60 fe ff ff    	ja     c0007b57 <f_mkfs+0xab9>
c0007cf7:	01 ff                	add    edi,edi
c0007cf9:	e9 4d fe ff ff       	jmp    c0007b4b <f_mkfs+0xaad>
c0007cfe:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d01:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d06:	40                   	inc    eax
c0007d07:	d1 e8                	shr    eax,1
c0007d09:	83 c0 03             	add    eax,0x3
c0007d0c:	e9 62 fe ff ff       	jmp    c0007b73 <f_mkfs+0xad5>
c0007d11:	31 d2                	xor    edx,edx
c0007d13:	89 c8                	mov    eax,ecx
c0007d15:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d19:	85 d2                	test   edx,edx
c0007d1b:	74 0c                	je     c0007d29 <f_mkfs+0xc8b>
c0007d1d:	49                   	dec    ecx
c0007d1e:	46                   	inc    esi
c0007d1f:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d24:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d29:	89 c8                	mov    eax,ecx
c0007d2b:	31 d2                	xor    edx,edx
c0007d2d:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d31:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007d35:	e9 c3 fe ff ff       	jmp    c0007bfd <f_mkfs+0xb5f>
c0007d3a:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d3f:	77 31                	ja     c0007d72 <f_mkfs+0xcd4>
c0007d41:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d46:	75 1b                	jne    c0007d63 <f_mkfs+0xcc5>
c0007d48:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d4f:	3d 80 00 00 00       	cmp    eax,0x80
c0007d54:	0f 86 d9 fd ff ff    	jbe    c0007b33 <f_mkfs+0xa95>
c0007d5a:	eb 07                	jmp    c0007d63 <f_mkfs+0xcc5>
c0007d5c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d61:	76 0a                	jbe    c0007d6d <f_mkfs+0xccf>
c0007d63:	bb 0e 00 00 00       	mov    ebx,0xe
c0007d68:	e9 ff 03 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007d6d:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d72:	31 d2                	xor    edx,edx
c0007d74:	b9 00 02 00 00       	mov    ecx,0x200
c0007d79:	89 e8                	mov    eax,ebp
c0007d7b:	e8 a2 9c ff ff       	call   c0001a22 <mem_set>
c0007d80:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d85:	ba 42 f6 01 c0       	mov    edx,0xc001f642
c0007d8a:	89 e8                	mov    eax,ebp
c0007d8c:	e8 7c 9c ff ff       	call   c0001a0d <mem_cpy>
c0007d91:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007d94:	ba 00 02 00 00       	mov    edx,0x200
c0007d99:	e8 62 9c ff ff       	call   c0001a00 <st_word>
c0007d9e:	89 f8                	mov    eax,edi
c0007da0:	0f b7 d6             	movzx  edx,si
c0007da3:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007da6:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007da9:	e8 52 9c ff ff       	call   c0001a00 <st_word>
c0007dae:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007db2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007db7:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007dba:	75 08                	jne    c0007dc4 <f_mkfs+0xd26>
c0007dbc:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007dc4:	8d 45 11             	lea    eax,[ebp+0x11]
c0007dc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007dcb:	e8 30 9c ff ff       	call   c0001a00 <st_word>
c0007dd0:	b8 ff ff 00 00       	mov    eax,0xffff
c0007dd5:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007dd9:	39 d0                	cmp    eax,edx
c0007ddb:	b8 00 00 00 00       	mov    eax,0x0
c0007de0:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007de4:	72 0a                	jb     c0007df0 <f_mkfs+0xd52>
c0007de6:	8d 45 13             	lea    eax,[ebp+0x13]
c0007de9:	e8 12 9c ff ff       	call   c0001a00 <st_word>
c0007dee:	eb 08                	jmp    c0007df8 <f_mkfs+0xd5a>
c0007df0:	8d 45 20             	lea    eax,[ebp+0x20]
c0007df3:	e8 0c 9c ff ff       	call   c0001a04 <st_dword>
c0007df8:	8d 45 18             	lea    eax,[ebp+0x18]
c0007dfb:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e00:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e04:	e8 f7 9b ff ff       	call   c0001a00 <st_word>
c0007e09:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e0c:	ba ff 00 00 00       	mov    edx,0xff
c0007e11:	e8 ea 9b ff ff       	call   c0001a00 <st_word>
c0007e16:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e1d:	e8 e2 9b ff ff       	call   c0001a04 <st_dword>
c0007e22:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e27:	75 57                	jne    c0007e80 <f_mkfs+0xde2>
c0007e29:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e31:	e8 ce 9b ff ff       	call   c0001a04 <st_dword>
c0007e36:	8d 45 24             	lea    eax,[ebp+0x24]
c0007e39:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007e3d:	e8 c2 9b ff ff       	call   c0001a04 <st_dword>
c0007e42:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007e45:	ba 02 00 00 00       	mov    edx,0x2
c0007e4a:	e8 b5 9b ff ff       	call   c0001a04 <st_dword>
c0007e4f:	8d 45 30             	lea    eax,[ebp+0x30]
c0007e52:	ba 01 00 00 00       	mov    edx,0x1
c0007e57:	e8 a4 9b ff ff       	call   c0001a00 <st_word>
c0007e5c:	8d 45 32             	lea    eax,[ebp+0x32]
c0007e5f:	ba 06 00 00 00       	mov    edx,0x6
c0007e64:	e8 97 9b ff ff       	call   c0001a00 <st_word>
c0007e69:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007e6d:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007e71:	8d 45 47             	lea    eax,[ebp+0x47]
c0007e74:	b9 13 00 00 00       	mov    ecx,0x13
c0007e79:	ba 4e f6 01 c0       	mov    edx,0xc001f64e
c0007e7e:	eb 2f                	jmp    c0007eaf <f_mkfs+0xe11>
c0007e80:	8d 45 27             	lea    eax,[ebp+0x27]
c0007e83:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e88:	e8 77 9b ff ff       	call   c0001a04 <st_dword>
c0007e8d:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007e92:	8d 45 16             	lea    eax,[ebp+0x16]
c0007e95:	e8 66 9b ff ff       	call   c0001a00 <st_word>
c0007e9a:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007e9e:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007ea2:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007ea5:	b9 13 00 00 00       	mov    ecx,0x13
c0007eaa:	ba 62 f6 01 c0       	mov    edx,0xc001f662
c0007eaf:	e8 59 9b ff ff       	call   c0001a0d <mem_cpy>
c0007eb4:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007eba:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007ebf:	89 f0                	mov    eax,esi
c0007ec1:	e8 3a 9b ff ff       	call   c0001a00 <st_word>
c0007ec6:	83 ec 0c             	sub    esp,0xc
c0007ec9:	6a 01                	push   0x1
c0007ecb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ecf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ed3:	55                   	push   ebp
c0007ed4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ed8:	e8 7c 9a ff ff       	call   c0001959 <disk_write>
c0007edd:	83 c4 20             	add    esp,0x20
c0007ee0:	85 c0                	test   eax,eax
c0007ee2:	0f 85 67 02 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ee8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eed:	0f 85 b7 00 00 00    	jne    c0007faa <f_mkfs+0xf0c>
c0007ef3:	83 ec 0c             	sub    esp,0xc
c0007ef6:	6a 01                	push   0x1
c0007ef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007efc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f00:	83 c0 06             	add    eax,0x6
c0007f03:	83 d2 00             	adc    edx,0x0
c0007f06:	52                   	push   edx
c0007f07:	50                   	push   eax
c0007f08:	55                   	push   ebp
c0007f09:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f0d:	e8 47 9a ff ff       	call   c0001959 <disk_write>
c0007f12:	83 c4 20             	add    esp,0x20
c0007f15:	b9 00 02 00 00       	mov    ecx,0x200
c0007f1a:	31 d2                	xor    edx,edx
c0007f1c:	89 e8                	mov    eax,ebp
c0007f1e:	e8 ff 9a ff ff       	call   c0001a22 <mem_set>
c0007f23:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f28:	89 e8                	mov    eax,ebp
c0007f2a:	e8 d5 9a ff ff       	call   c0001a04 <st_dword>
c0007f2f:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007f35:	ba 72 72 41 61       	mov    edx,0x61417272
c0007f3a:	e8 c5 9a ff ff       	call   c0001a04 <st_dword>
c0007f3f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007f42:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007f48:	e8 b7 9a ff ff       	call   c0001a04 <st_dword>
c0007f4d:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007f53:	ba 02 00 00 00       	mov    edx,0x2
c0007f58:	e8 a7 9a ff ff       	call   c0001a04 <st_dword>
c0007f5d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f62:	89 f0                	mov    eax,esi
c0007f64:	e8 97 9a ff ff       	call   c0001a00 <st_word>
c0007f69:	83 ec 0c             	sub    esp,0xc
c0007f6c:	6a 01                	push   0x1
c0007f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f76:	83 c0 07             	add    eax,0x7
c0007f79:	83 d2 00             	adc    edx,0x0
c0007f7c:	52                   	push   edx
c0007f7d:	50                   	push   eax
c0007f7e:	55                   	push   ebp
c0007f7f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f83:	e8 d1 99 ff ff       	call   c0001959 <disk_write>
c0007f88:	83 c4 14             	add    esp,0x14
c0007f8b:	6a 01                	push   0x1
c0007f8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f91:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f95:	83 c0 01             	add    eax,0x1
c0007f98:	83 d2 00             	adc    edx,0x0
c0007f9b:	52                   	push   edx
c0007f9c:	50                   	push   eax
c0007f9d:	55                   	push   ebp
c0007f9e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa2:	e8 b2 99 ff ff       	call   c0001959 <disk_write>
c0007fa7:	83 c4 20             	add    esp,0x20
c0007faa:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0007fb1:	31 d2                	xor    edx,edx
c0007fb3:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0007fb9:	31 db                	xor    ebx,ebx
c0007fbb:	89 e8                	mov    eax,ebp
c0007fbd:	e8 60 9a ff ff       	call   c0001a22 <mem_set>
c0007fc2:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0007fc7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007fce:	0f 94 c3             	sete   bl
c0007fd1:	4b                   	dec    ebx
c0007fd2:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0007fd8:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0007fde:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fe3:	75 21                	jne    c0008006 <f_mkfs+0xf68>
c0007fe5:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007fea:	89 e8                	mov    eax,ebp
c0007fec:	e8 13 9a ff ff       	call   c0001a04 <st_dword>
c0007ff1:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ff4:	83 ca ff             	or     edx,0xffffffff
c0007ff7:	e8 08 9a ff ff       	call   c0001a04 <st_dword>
c0007ffc:	8d 45 08             	lea    eax,[ebp+0x8]
c0007fff:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008004:	eb 04                	jmp    c000800a <f_mkfs+0xf6c>
c0008006:	89 da                	mov    edx,ebx
c0008008:	89 e8                	mov    eax,ebp
c000800a:	e8 f5 99 ff ff       	call   c0001a04 <st_dword>
c000800f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008013:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008017:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000801b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000801f:	39 ce                	cmp    esi,ecx
c0008021:	76 02                	jbe    c0008025 <f_mkfs+0xf87>
c0008023:	89 ce                	mov    esi,ecx
c0008025:	83 ec 0c             	sub    esp,0xc
c0008028:	56                   	push   esi
c0008029:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000802d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008031:	55                   	push   ebp
c0008032:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008036:	e8 1e 99 ff ff       	call   c0001959 <disk_write>
c000803b:	83 c4 20             	add    esp,0x20
c000803e:	85 c0                	test   eax,eax
c0008040:	0f 85 09 01 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0008046:	31 d2                	xor    edx,edx
c0008048:	b9 00 02 00 00       	mov    ecx,0x200
c000804d:	89 e8                	mov    eax,ebp
c000804f:	e8 ce 99 ff ff       	call   c0001a22 <mem_set>
c0008054:	31 d2                	xor    edx,edx
c0008056:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000805a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000805e:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008062:	75 b3                	jne    c0008017 <f_mkfs+0xf79>
c0008064:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008067:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000806e:	40                   	inc    eax
c000806f:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008073:	0f 87 65 ff ff ff    	ja     c0007fde <f_mkfs+0xf40>
c0008079:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000807e:	74 04                	je     c0008084 <f_mkfs+0xfe6>
c0008080:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008084:	89 fb                	mov    ebx,edi
c0008086:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000808a:	76 04                	jbe    c0008090 <f_mkfs+0xff2>
c000808c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008090:	83 ec 0c             	sub    esp,0xc
c0008093:	53                   	push   ebx
c0008094:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008098:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000809c:	55                   	push   ebp
c000809d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a1:	e8 b3 98 ff ff       	call   c0001959 <disk_write>
c00080a6:	83 c4 20             	add    esp,0x20
c00080a9:	85 c0                	test   eax,eax
c00080ab:	0f 85 9e 00 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00080b1:	31 d2                	xor    edx,edx
c00080b3:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00080b7:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080bb:	29 df                	sub    edi,ebx
c00080bd:	75 c5                	jne    c0008084 <f_mkfs+0xfe6>
c00080bf:	b1 0c                	mov    cl,0xc
c00080c1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c6:	74 1d                	je     c00080e5 <f_mkfs+0x1047>
c00080c8:	b8 ff ff 00 00       	mov    eax,0xffff
c00080cd:	b1 06                	mov    cl,0x6
c00080cf:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00080d3:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00080d7:	72 0c                	jb     c00080e5 <f_mkfs+0x1047>
c00080d9:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00080de:	0f 94 c1             	sete   cl
c00080e1:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00080e5:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00080ea:	75 4c                	jne    c0008138 <f_mkfs+0x109a>
c00080ec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00080f0:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00080f4:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00080fb:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008102:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000810d:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008118:	0f b6 c9             	movzx  ecx,cl
c000811b:	83 ec 0c             	sub    esp,0xc
c000811e:	55                   	push   ebp
c000811f:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000812a:	e8 2f c2 ff ff       	call   c000435e <create_partition>
c000812f:	83 c4 10             	add    esp,0x10
c0008132:	89 c3                	mov    ebx,eax
c0008134:	85 c0                	test   eax,eax
c0008136:	75 34                	jne    c000816c <f_mkfs+0x10ce>
c0008138:	31 db                	xor    ebx,ebx
c000813a:	50                   	push   eax
c000813b:	6a 00                	push   0x0
c000813d:	6a 00                	push   0x0
c000813f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008143:	e8 27 98 ff ff       	call   c000196f <disk_ioctl>
c0008148:	83 c4 10             	add    esp,0x10
c000814b:	85 c0                	test   eax,eax
c000814d:	74 1d                	je     c000816c <f_mkfs+0x10ce>
c000814f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008157:	75 0c                	jne    c0008165 <f_mkfs+0x10c7>
c0008159:	83 ec 0c             	sub    esp,0xc
c000815c:	55                   	push   ebp
c000815d:	e8 75 00 00 00       	call   c00081d7 <ff_memfree>
c0008162:	83 c4 10             	add    esp,0x10
c0008165:	bb 01 00 00 00       	mov    ebx,0x1
c000816a:	eb 48                	jmp    c00081b4 <f_mkfs+0x1116>
c000816c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008174:	75 3e                	jne    c00081b4 <f_mkfs+0x1116>
c0008176:	83 ec 0c             	sub    esp,0xc
c0008179:	55                   	push   ebp
c000817a:	e8 58 00 00 00       	call   c00081d7 <ff_memfree>
c000817f:	83 c4 10             	add    esp,0x10
c0008182:	eb 30                	jmp    c00081b4 <f_mkfs+0x1116>
c0008184:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008189:	0f 85 eb fa ff ff    	jne    c0007c7a <f_mkfs+0xbdc>
c000818f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008193:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008199:	0f 86 b8 f9 ff ff    	jbe    c0007b57 <f_mkfs+0xab9>
c000819f:	e9 bf fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081a4:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081a9:	0f 85 c0 fa ff ff    	jne    c0007c6f <f_mkfs+0xbd1>
c00081af:	e9 af fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081b4:	81 c4 9c 00 00 00    	add    esp,0x9c
c00081ba:	89 d8                	mov    eax,ebx
c00081bc:	5b                   	pop    ebx
c00081bd:	5e                   	pop    esi
c00081be:	5f                   	pop    edi
c00081bf:	5d                   	pop    ebp
c00081c0:	c3                   	ret    

c00081c1 <ff_memalloc>:
c00081c1:	83 ec 0c             	sub    esp,0xc
c00081c4:	83 ec 0c             	sub    esp,0xc
c00081c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081cb:	e8 4e 3a 00 00       	call   c000bc1e <malloc>
c00081d0:	83 c4 10             	add    esp,0x10
c00081d3:	83 c4 0c             	add    esp,0xc
c00081d6:	c3                   	ret    

c00081d7 <ff_memfree>:
c00081d7:	83 ec 0c             	sub    esp,0xc
c00081da:	83 ec 0c             	sub    esp,0xc
c00081dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081e1:	e8 48 3a 00 00       	call   c000bc2e <free>
c00081e6:	83 c4 10             	add    esp,0x10
c00081e9:	90                   	nop
c00081ea:	83 c4 0c             	add    esp,0xc
c00081ed:	c3                   	ret    

c00081ee <ff_uni2oem>:
c00081ee:	83 ec 14             	sub    esp,0x14
c00081f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081f5:	66 89 04 24          	mov    WORD PTR [esp],ax
c00081f9:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008200:	c7 44 24 0c 80 f9 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f980
c0008208:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000820d:	77 0b                	ja     c000821a <ff_uni2oem+0x2c>
c000820f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008213:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008218:	eb 5b                	jmp    c0008275 <ff_uni2oem+0x87>
c000821a:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008222:	77 51                	ja     c0008275 <ff_uni2oem+0x87>
c0008224:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000822a:	75 49                	jne    c0008275 <ff_uni2oem+0x87>
c000822c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008233:	eb 0b                	jmp    c0008240 <ff_uni2oem+0x52>
c0008235:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000823a:	40                   	inc    eax
c000823b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008240:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008246:	77 1b                	ja     c0008263 <ff_uni2oem+0x75>
c0008248:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000824d:	01 c0                	add    eax,eax
c000824f:	89 c2                	mov    edx,eax
c0008251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008255:	01 d0                	add    eax,edx
c0008257:	66 8b 00             	mov    ax,WORD PTR [eax]
c000825a:	0f b7 c0             	movzx  eax,ax
c000825d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008261:	75 d2                	jne    c0008235 <ff_uni2oem+0x47>
c0008263:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008268:	83 e8 80             	sub    eax,0xffffff80
c000826b:	25 ff 00 00 00       	and    eax,0xff
c0008270:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008275:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000827a:	83 c4 14             	add    esp,0x14
c000827d:	c3                   	ret    

c000827e <ff_oem2uni>:
c000827e:	83 ec 18             	sub    esp,0x18
c0008281:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008289:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000828e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008292:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008299:	c7 44 24 10 80 f9 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f980
c00082a1:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00082a7:	77 0b                	ja     c00082b4 <ff_oem2uni+0x36>
c00082a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ad:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082b2:	eb 2d                	jmp    c00082e1 <ff_oem2uni+0x63>
c00082b4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ba:	75 25                	jne    c00082e1 <ff_oem2uni+0x63>
c00082bc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00082c3:	77 1c                	ja     c00082e1 <ff_oem2uni+0x63>
c00082c5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00082ca:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00082cf:	01 c0                	add    eax,eax
c00082d1:	89 c2                	mov    edx,eax
c00082d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00082d7:	01 d0                	add    eax,edx
c00082d9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082e1:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00082e6:	83 c4 18             	add    esp,0x18
c00082e9:	c3                   	ret    

c00082ea <ff_wtoupper>:
c00082ea:	83 ec 10             	sub    esp,0x10
c00082ed:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00082f5:	0f 87 3e 01 00 00    	ja     c0008439 <ff_wtoupper+0x14f>
c00082fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00082ff:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008304:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000830b:	77 07                	ja     c0008314 <ff_wtoupper+0x2a>
c000830d:	b8 80 f7 01 c0       	mov    eax,0xc001f780
c0008312:	eb 05                	jmp    c0008319 <ff_wtoupper+0x2f>
c0008314:	b8 c0 f6 01 c0       	mov    eax,0xc001f6c0
c0008319:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000831d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008321:	8d 50 02             	lea    edx,[eax+0x2]
c0008324:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008328:	66 8b 00             	mov    ax,WORD PTR [eax]
c000832b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008330:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008336:	0f 84 f4 00 00 00    	je     c0008430 <ff_wtoupper+0x146>
c000833c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008341:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008346:	0f 82 e4 00 00 00    	jb     c0008430 <ff_wtoupper+0x146>
c000834c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008350:	8d 50 02             	lea    edx,[eax+0x2]
c0008353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008357:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000835f:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008364:	66 c1 e8 08          	shr    ax,0x8
c0008368:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000836d:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008374:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008379:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000837e:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008383:	01 ca                	add    edx,ecx
c0008385:	39 d0                	cmp    eax,edx
c0008387:	0f 8d 86 00 00 00    	jge    c0008413 <ff_wtoupper+0x129>
c000838d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008392:	83 f8 08             	cmp    eax,0x8
c0008395:	0f 87 94 00 00 00    	ja     c000842f <ff_wtoupper+0x145>
c000839b:	8b 04 85 80 f6 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0980]
c00083a2:	ff e0                	jmp    eax
c00083a4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00083a9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00083ae:	29 c2                	sub    edx,eax
c00083b0:	89 d0                	mov    eax,edx
c00083b2:	01 c0                	add    eax,eax
c00083b4:	89 c2                	mov    edx,eax
c00083b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083ba:	01 d0                	add    eax,edx
c00083bc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083bf:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083c4:	eb 4b                	jmp    c0008411 <ff_wtoupper+0x127>
c00083c6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083cb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00083cf:	83 e0 01             	and    eax,0x1
c00083d2:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00083d7:	eb 38                	jmp    c0008411 <ff_wtoupper+0x127>
c00083d9:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00083df:	eb 30                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e1:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00083e7:	eb 28                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e9:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00083ef:	eb 20                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f1:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00083f7:	eb 18                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f9:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00083ff:	eb 10                	jmp    c0008411 <ff_wtoupper+0x127>
c0008401:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008407:	eb 08                	jmp    c0008411 <ff_wtoupper+0x127>
c0008409:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008410:	90                   	nop
c0008411:	eb 1c                	jmp    c000842f <ff_wtoupper+0x145>
c0008413:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008419:	0f 85 fe fe ff ff    	jne    c000831d <ff_wtoupper+0x33>
c000841f:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008424:	01 c0                	add    eax,eax
c0008426:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000842a:	e9 ee fe ff ff       	jmp    c000831d <ff_wtoupper+0x33>
c000842f:	90                   	nop
c0008430:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008435:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008439:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	c3                   	ret    

c0008441 <is_bad_src_ratio>:
c0008441:	83 ec 0c             	sub    esp,0xc
c0008444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008448:	89 04 24             	mov    DWORD PTR [esp],eax
c000844b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000844f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008453:	dd 04 24             	fld    QWORD PTR [esp]
c0008456:	dd 05 40 ff 01 c0    	fld    QWORD PTR ds:0xc001ff40
c000845c:	de d9                	fcompp 
c000845e:	df e0                	fnstsw ax
c0008460:	f6 c4 45             	test   ah,0x45
c0008463:	74 10                	je     c0008475 <is_bad_src_ratio+0x34>
c0008465:	dd 04 24             	fld    QWORD PTR [esp]
c0008468:	dc 1d 48 ff 01 c0    	fcomp  QWORD PTR ds:0xc001ff48
c000846e:	df e0                	fnstsw ax
c0008470:	f6 c4 45             	test   ah,0x45
c0008473:	75 07                	jne    c000847c <is_bad_src_ratio+0x3b>
c0008475:	b8 01 00 00 00       	mov    eax,0x1
c000847a:	eb 05                	jmp    c0008481 <is_bad_src_ratio+0x40>
c000847c:	b8 00 00 00 00       	mov    eax,0x0
c0008481:	83 c4 0c             	add    esp,0xc
c0008484:	c3                   	ret    

c0008485 <psrc_set_converter>:
c0008485:	56                   	push   esi
c0008486:	89 d6                	mov    esi,edx
c0008488:	53                   	push   ebx
c0008489:	89 c3                	mov    ebx,eax
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	52                   	push   edx
c000848f:	50                   	push   eax
c0008490:	e8 33 24 00 00       	call   c000a8c8 <sinc_set_converter>
c0008495:	83 c4 10             	add    esp,0x10
c0008498:	85 c0                	test   eax,eax
c000849a:	74 25                	je     c00084c1 <psrc_set_converter+0x3c>
c000849c:	50                   	push   eax
c000849d:	50                   	push   eax
c000849e:	56                   	push   esi
c000849f:	53                   	push   ebx
c00084a0:	e8 32 28 00 00       	call   c000acd7 <zoh_set_converter>
c00084a5:	83 c4 10             	add    esp,0x10
c00084a8:	85 c0                	test   eax,eax
c00084aa:	74 15                	je     c00084c1 <psrc_set_converter+0x3c>
c00084ac:	51                   	push   ecx
c00084ad:	51                   	push   ecx
c00084ae:	56                   	push   esi
c00084af:	53                   	push   ebx
c00084b0:	e8 10 0a 00 00       	call   c0008ec5 <linear_set_converter>
c00084b5:	83 c4 10             	add    esp,0x10
c00084b8:	ba 0a 00 00 00       	mov    edx,0xa
c00084bd:	85 c0                	test   eax,eax
c00084bf:	75 02                	jne    c00084c3 <psrc_set_converter+0x3e>
c00084c1:	31 d2                	xor    edx,edx
c00084c3:	89 d0                	mov    eax,edx
c00084c5:	5a                   	pop    edx
c00084c6:	5b                   	pop    ebx
c00084c7:	5e                   	pop    esi
c00084c8:	c3                   	ret    

c00084c9 <src_delete>:
c00084c9:	53                   	push   ebx
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084d1:	85 db                	test   ebx,ebx
c00084d3:	74 29                	je     c00084fe <src_delete+0x35>
c00084d5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00084d8:	85 c0                	test   eax,eax
c00084da:	74 0c                	je     c00084e8 <src_delete+0x1f>
c00084dc:	83 ec 0c             	sub    esp,0xc
c00084df:	50                   	push   eax
c00084e0:	e8 49 37 00 00       	call   c000bc2e <free>
c00084e5:	83 c4 10             	add    esp,0x10
c00084e8:	50                   	push   eax
c00084e9:	6a 3c                	push   0x3c
c00084eb:	6a 00                	push   0x0
c00084ed:	53                   	push   ebx
c00084ee:	e8 15 81 ff ff       	call   c0000608 <memset>
c00084f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00084f6:	e8 33 37 00 00       	call   c000bc2e <free>
c00084fb:	83 c4 10             	add    esp,0x10
c00084fe:	31 c0                	xor    eax,eax
c0008500:	83 c4 08             	add    esp,0x8
c0008503:	5b                   	pop    ebx
c0008504:	c3                   	ret    

c0008505 <src_process>:
c0008505:	56                   	push   esi
c0008506:	53                   	push   ebx
c0008507:	53                   	push   ebx
c0008508:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000850c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008510:	85 f6                	test   esi,esi
c0008512:	0f 84 e2 00 00 00    	je     c00085fa <src_process+0xf5>
c0008518:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000851c:	0f 84 df 00 00 00    	je     c0008601 <src_process+0xfc>
c0008522:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008526:	0f 84 d5 00 00 00    	je     c0008601 <src_process+0xfc>
c000852c:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008533:	0f 85 cf 00 00 00    	jne    c0008608 <src_process+0x103>
c0008539:	85 db                	test   ebx,ebx
c000853b:	0f 84 ce 00 00 00    	je     c000860f <src_process+0x10a>
c0008541:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008544:	0f 84 cc 00 00 00    	je     c0008616 <src_process+0x111>
c000854a:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000854e:	0f 84 c2 00 00 00    	je     c0008616 <src_process+0x111>
c0008554:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008557:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000855a:	e8 e2 fe ff ff       	call   c0008441 <is_bad_src_ratio>
c000855f:	5a                   	pop    edx
c0008560:	85 c0                	test   eax,eax
c0008562:	59                   	pop    ecx
c0008563:	0f 85 b4 00 00 00    	jne    c000861d <src_process+0x118>
c0008569:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000856d:	79 07                	jns    c0008576 <src_process+0x71>
c000856f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008576:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000857a:	79 07                	jns    c0008583 <src_process+0x7e>
c000857c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008583:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008585:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008588:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000858b:	39 ca                	cmp    edx,ecx
c000858d:	73 0b                	jae    c000859a <src_process+0x95>
c000858f:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008593:	8d 04 82             	lea    eax,[edx+eax*4]
c0008596:	39 c1                	cmp    ecx,eax
c0008598:	eb 09                	jmp    c00085a3 <src_process+0x9e>
c000859a:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c000859e:	8d 04 81             	lea    eax,[ecx+eax*4]
c00085a1:	39 c2                	cmp    edx,eax
c00085a3:	72 7f                	jb     c0008624 <src_process+0x11f>
c00085a5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00085ac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085b3:	d9 05 60 ff 01 c0    	fld    DWORD PTR ds:0xc001ff60
c00085b9:	dc 1e                	fcomp  QWORD PTR [esi]
c00085bb:	df e0                	fnstsw ax
c00085bd:	9e                   	sahf   
c00085be:	76 05                	jbe    c00085c5 <src_process+0xc0>
c00085c0:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00085c3:	dd 1e                	fstp   QWORD PTR [esi]
c00085c5:	83 ec 10             	sub    esp,0x10
c00085c8:	dd 06                	fld    QWORD PTR [esi]
c00085ca:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00085cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00085d0:	e8 1b 62 01 00       	call   c001e7f0 <fabs>
c00085d5:	83 c4 10             	add    esp,0x10
c00085d8:	dd 05 50 ff 01 c0    	fld    QWORD PTR ds:0xc001ff50
c00085de:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00085e2:	de d9                	fcompp 
c00085e4:	df e0                	fnstsw ax
c00085e6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00085ea:	9e                   	sahf   
c00085eb:	76 05                	jbe    c00085f2 <src_process+0xed>
c00085ed:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00085f0:	eb 03                	jmp    c00085f5 <src_process+0xf0>
c00085f2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00085f5:	59                   	pop    ecx
c00085f6:	5b                   	pop    ebx
c00085f7:	5e                   	pop    esi
c00085f8:	ff e0                	jmp    eax
c00085fa:	b8 02 00 00 00       	mov    eax,0x2
c00085ff:	eb 28                	jmp    c0008629 <src_process+0x124>
c0008601:	b8 07 00 00 00       	mov    eax,0x7
c0008606:	eb 21                	jmp    c0008629 <src_process+0x124>
c0008608:	b8 12 00 00 00       	mov    eax,0x12
c000860d:	eb 1a                	jmp    c0008629 <src_process+0x124>
c000860f:	b8 03 00 00 00       	mov    eax,0x3
c0008614:	eb 13                	jmp    c0008629 <src_process+0x124>
c0008616:	b8 04 00 00 00       	mov    eax,0x4
c000861b:	eb 0c                	jmp    c0008629 <src_process+0x124>
c000861d:	b8 06 00 00 00       	mov    eax,0x6
c0008622:	eb 05                	jmp    c0008629 <src_process+0x124>
c0008624:	b8 10 00 00 00       	mov    eax,0x10
c0008629:	5a                   	pop    edx
c000862a:	5b                   	pop    ebx
c000862b:	5e                   	pop    esi
c000862c:	c3                   	ret    

c000862d <src_callback_read>:
c000862d:	55                   	push   ebp
c000862e:	57                   	push   edi
c000862f:	56                   	push   esi
c0008630:	53                   	push   ebx
c0008631:	83 ec 4c             	sub    esp,0x4c
c0008634:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008638:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c000863c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0008640:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008644:	85 ff                	test   edi,edi
c0008646:	0f 8e 36 01 00 00    	jle    c0008782 <src_callback_read+0x155>
c000864c:	85 db                	test   ebx,ebx
c000864e:	0f 84 2e 01 00 00    	je     c0008782 <src_callback_read+0x155>
c0008654:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000865b:	74 0c                	je     c0008669 <src_callback_read+0x3c>
c000865d:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008664:	e9 19 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c0008669:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000866d:	75 0c                	jne    c000867b <src_callback_read+0x4e>
c000866f:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008676:	e9 07 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c000867b:	51                   	push   ecx
c000867c:	6a 24                	push   0x24
c000867e:	6a 00                	push   0x0
c0008680:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008684:	50                   	push   eax
c0008685:	e8 7e 7f ff ff       	call   c0000608 <memset>
c000868a:	5e                   	pop    esi
c000868b:	5d                   	pop    ebp
c000868c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008694:	e8 a8 fd ff ff       	call   c0008441 <is_bad_src_ratio>
c0008699:	83 c4 10             	add    esp,0x10
c000869c:	85 c0                	test   eax,eax
c000869e:	74 0c                	je     c00086ac <src_callback_read+0x7f>
c00086a0:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00086a7:	e9 d6 00 00 00       	jmp    c0008782 <src_callback_read+0x155>
c00086ac:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00086b0:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00086b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086b8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00086bc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00086bf:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00086c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00086c7:	31 f6                	xor    esi,esi
c00086c9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00086cc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00086d0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00086d5:	75 30                	jne    c0008707 <src_callback_read+0xda>
c00086d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00086db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086df:	52                   	push   edx
c00086e0:	52                   	push   edx
c00086e1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00086e5:	50                   	push   eax
c00086e6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086e9:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00086ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00086f0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00086f8:	83 c4 10             	add    esp,0x10
c00086fb:	85 c0                	test   eax,eax
c00086fd:	75 08                	jne    c0008707 <src_callback_read+0xda>
c00086ff:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008707:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c000870e:	50                   	push   eax
c000870f:	50                   	push   eax
c0008710:	8d 44 24 24          	lea    eax,[esp+0x24]
c0008714:	50                   	push   eax
c0008715:	53                   	push   ebx
c0008716:	e8 ea fd ff ff       	call   c0008505 <src_process>
c000871b:	83 c4 10             	add    esp,0x10
c000871e:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008725:	85 c0                	test   eax,eax
c0008727:	75 42                	jne    c000876b <src_callback_read+0x13e>
c0008729:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000872d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008730:	89 e9                	mov    ecx,ebp
c0008732:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008736:	0f af ca             	imul   ecx,edx
c0008739:	c1 e1 02             	shl    ecx,0x2
c000873c:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0008740:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008744:	0f af d1             	imul   edx,ecx
c0008747:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c000874b:	c1 e2 02             	shl    edx,0x2
c000874e:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008752:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008755:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000875a:	75 04                	jne    c0008760 <src_callback_read+0x133>
c000875c:	85 c9                	test   ecx,ecx
c000875e:	74 0b                	je     c000876b <src_callback_read+0x13e>
c0008760:	39 d7                	cmp    edi,edx
c0008762:	7e 09                	jle    c000876d <src_callback_read+0x140>
c0008764:	89 d6                	mov    esi,edx
c0008766:	e9 65 ff ff ff       	jmp    c00086d0 <src_callback_read+0xa3>
c000876b:	89 f2                	mov    edx,esi
c000876d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008771:	85 c0                	test   eax,eax
c0008773:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008776:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000877a:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000877d:	74 05                	je     c0008784 <src_callback_read+0x157>
c000877f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008782:	31 d2                	xor    edx,edx
c0008784:	83 c4 4c             	add    esp,0x4c
c0008787:	89 d0                	mov    eax,edx
c0008789:	5b                   	pop    ebx
c000878a:	5e                   	pop    esi
c000878b:	5f                   	pop    edi
c000878c:	5d                   	pop    ebp
c000878d:	c3                   	ret    

c000878e <src_set_ratio>:
c000878e:	53                   	push   ebx
c000878f:	b8 02 00 00 00       	mov    eax,0x2
c0008794:	83 ec 08             	sub    esp,0x8
c0008797:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000879b:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c000879f:	85 db                	test   ebx,ebx
c00087a1:	74 33                	je     c00087d6 <src_set_ratio+0x48>
c00087a3:	b8 07 00 00 00       	mov    eax,0x7
c00087a8:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00087ac:	74 2c                	je     c00087da <src_set_ratio+0x4c>
c00087ae:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00087b2:	74 2a                	je     c00087de <src_set_ratio+0x50>
c00087b4:	50                   	push   eax
c00087b5:	50                   	push   eax
c00087b6:	dd 14 24             	fst    QWORD PTR [esp]
c00087b9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00087bd:	e8 7f fc ff ff       	call   c0008441 <is_bad_src_ratio>
c00087c2:	5a                   	pop    edx
c00087c3:	85 c0                	test   eax,eax
c00087c5:	59                   	pop    ecx
c00087c6:	75 07                	jne    c00087cf <src_set_ratio+0x41>
c00087c8:	dd 04 24             	fld    QWORD PTR [esp]
c00087cb:	dd 1b                	fstp   QWORD PTR [ebx]
c00087cd:	eb 11                	jmp    c00087e0 <src_set_ratio+0x52>
c00087cf:	b8 06 00 00 00       	mov    eax,0x6
c00087d4:	eb 0a                	jmp    c00087e0 <src_set_ratio+0x52>
c00087d6:	dd d8                	fstp   st(0)
c00087d8:	eb 06                	jmp    c00087e0 <src_set_ratio+0x52>
c00087da:	dd d8                	fstp   st(0)
c00087dc:	eb 02                	jmp    c00087e0 <src_set_ratio+0x52>
c00087de:	dd d8                	fstp   st(0)
c00087e0:	83 c4 08             	add    esp,0x8
c00087e3:	5b                   	pop    ebx
c00087e4:	c3                   	ret    

c00087e5 <src_get_channels>:
c00087e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00087e9:	b8 02 00 00 00       	mov    eax,0x2
c00087ee:	85 d2                	test   edx,edx
c00087f0:	74 14                	je     c0008806 <src_get_channels+0x21>
c00087f2:	b8 07 00 00 00       	mov    eax,0x7
c00087f7:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00087fb:	74 09                	je     c0008806 <src_get_channels+0x21>
c00087fd:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008801:	74 03                	je     c0008806 <src_get_channels+0x21>
c0008803:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008806:	c3                   	ret    

c0008807 <src_reset>:
c0008807:	53                   	push   ebx
c0008808:	b8 02 00 00 00       	mov    eax,0x2
c000880d:	83 ec 08             	sub    esp,0x8
c0008810:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008814:	85 db                	test   ebx,ebx
c0008816:	74 2e                	je     c0008846 <src_reset+0x3f>
c0008818:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000881b:	85 c0                	test   eax,eax
c000881d:	74 09                	je     c0008828 <src_reset+0x21>
c000881f:	83 ec 0c             	sub    esp,0xc
c0008822:	53                   	push   ebx
c0008823:	ff d0                	call   eax
c0008825:	83 c4 10             	add    esp,0x10
c0008828:	d9 ee                	fldz   
c000882a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008831:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008834:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000883b:	dd 1b                	fstp   QWORD PTR [ebx]
c000883d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008844:	31 c0                	xor    eax,eax
c0008846:	83 c4 08             	add    esp,0x8
c0008849:	5b                   	pop    ebx
c000884a:	c3                   	ret    

c000884b <src_new>:
c000884b:	57                   	push   edi
c000884c:	56                   	push   esi
c000884d:	53                   	push   ebx
c000884e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008852:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008856:	85 f6                	test   esi,esi
c0008858:	74 73                	je     c00088cd <src_new+0x82>
c000885a:	85 ff                	test   edi,edi
c000885c:	7f 08                	jg     c0008866 <src_new+0x1b>
c000885e:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008864:	eb 1e                	jmp    c0008884 <src_new+0x39>
c0008866:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c000886c:	50                   	push   eax
c000886d:	50                   	push   eax
c000886e:	6a 3c                	push   0x3c
c0008870:	6a 01                	push   0x1
c0008872:	e8 d7 33 00 00       	call   c000bc4e <calloc>
c0008877:	83 c4 10             	add    esp,0x10
c000887a:	89 c3                	mov    ebx,eax
c000887c:	85 c0                	test   eax,eax
c000887e:	75 10                	jne    c0008890 <src_new+0x45>
c0008880:	85 f6                	test   esi,esi
c0008882:	75 04                	jne    c0008888 <src_new+0x3d>
c0008884:	31 db                	xor    ebx,ebx
c0008886:	eb 4b                	jmp    c00088d3 <src_new+0x88>
c0008888:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c000888e:	eb 43                	jmp    c00088d3 <src_new+0x88>
c0008890:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008893:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000889a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000889e:	e8 e2 fb ff ff       	call   c0008485 <psrc_set_converter>
c00088a3:	85 c0                	test   eax,eax
c00088a5:	74 18                	je     c00088bf <src_new+0x74>
c00088a7:	85 f6                	test   esi,esi
c00088a9:	74 06                	je     c00088b1 <src_new+0x66>
c00088ab:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00088b1:	83 ec 0c             	sub    esp,0xc
c00088b4:	53                   	push   ebx
c00088b5:	31 db                	xor    ebx,ebx
c00088b7:	e8 72 33 00 00       	call   c000bc2e <free>
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	83 ec 0c             	sub    esp,0xc
c00088c2:	53                   	push   ebx
c00088c3:	e8 3f ff ff ff       	call   c0008807 <src_reset>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	eb 06                	jmp    c00088d3 <src_new+0x88>
c00088cd:	85 ff                	test   edi,edi
c00088cf:	7f 9b                	jg     c000886c <src_new+0x21>
c00088d1:	eb b1                	jmp    c0008884 <src_new+0x39>
c00088d3:	89 d8                	mov    eax,ebx
c00088d5:	5b                   	pop    ebx
c00088d6:	5e                   	pop    esi
c00088d7:	5f                   	pop    edi
c00088d8:	c3                   	ret    

c00088d9 <src_callback_new>:
c00088d9:	56                   	push   esi
c00088da:	53                   	push   ebx
c00088db:	53                   	push   ebx
c00088dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088e4:	85 f6                	test   esi,esi
c00088e6:	75 0e                	jne    c00088f6 <src_callback_new+0x1d>
c00088e8:	31 db                	xor    ebx,ebx
c00088ea:	85 c0                	test   eax,eax
c00088ec:	74 47                	je     c0008935 <src_callback_new+0x5c>
c00088ee:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00088f4:	eb 3f                	jmp    c0008935 <src_callback_new+0x5c>
c00088f6:	85 c0                	test   eax,eax
c00088f8:	74 06                	je     c0008900 <src_callback_new+0x27>
c00088fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008900:	51                   	push   ecx
c0008901:	50                   	push   eax
c0008902:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008906:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000890a:	e8 3c ff ff ff       	call   c000884b <src_new>
c000890f:	83 c4 10             	add    esp,0x10
c0008912:	89 c3                	mov    ebx,eax
c0008914:	85 c0                	test   eax,eax
c0008916:	74 1d                	je     c0008935 <src_callback_new+0x5c>
c0008918:	83 ec 0c             	sub    esp,0xc
c000891b:	50                   	push   eax
c000891c:	e8 e6 fe ff ff       	call   c0008807 <src_reset>
c0008921:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008925:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c000892c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000892f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008932:	83 c4 10             	add    esp,0x10
c0008935:	89 d8                	mov    eax,ebx
c0008937:	5a                   	pop    edx
c0008938:	5b                   	pop    ebx
c0008939:	5e                   	pop    esi
c000893a:	c3                   	ret    

c000893b <src_get_name>:
c000893b:	53                   	push   ebx
c000893c:	83 ec 14             	sub    esp,0x14
c000893f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008943:	53                   	push   ebx
c0008944:	e8 59 1f 00 00       	call   c000a8a2 <sinc_get_name>
c0008949:	83 c4 10             	add    esp,0x10
c000894c:	85 c0                	test   eax,eax
c000894e:	75 1d                	jne    c000896d <src_get_name+0x32>
c0008950:	83 ec 0c             	sub    esp,0xc
c0008953:	53                   	push   ebx
c0008954:	e8 60 23 00 00       	call   c000acb9 <zoh_get_name>
c0008959:	83 c4 10             	add    esp,0x10
c000895c:	85 c0                	test   eax,eax
c000895e:	75 0d                	jne    c000896d <src_get_name+0x32>
c0008960:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008964:	83 c4 08             	add    esp,0x8
c0008967:	5b                   	pop    ebx
c0008968:	e9 3a 05 00 00       	jmp    c0008ea7 <linear_get_name>
c000896d:	83 c4 08             	add    esp,0x8
c0008970:	5b                   	pop    ebx
c0008971:	c3                   	ret    

c0008972 <src_get_description>:
c0008972:	53                   	push   ebx
c0008973:	83 ec 14             	sub    esp,0x14
c0008976:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000897a:	53                   	push   ebx
c000897b:	e8 35 1f 00 00       	call   c000a8b5 <sinc_get_description>
c0008980:	83 c4 10             	add    esp,0x10
c0008983:	85 c0                	test   eax,eax
c0008985:	75 1d                	jne    c00089a4 <src_get_description+0x32>
c0008987:	83 ec 0c             	sub    esp,0xc
c000898a:	53                   	push   ebx
c000898b:	e8 38 23 00 00       	call   c000acc8 <zoh_get_description>
c0008990:	83 c4 10             	add    esp,0x10
c0008993:	85 c0                	test   eax,eax
c0008995:	75 0d                	jne    c00089a4 <src_get_description+0x32>
c0008997:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000899b:	83 c4 08             	add    esp,0x8
c000899e:	5b                   	pop    ebx
c000899f:	e9 12 05 00 00       	jmp    c0008eb6 <linear_get_description>
c00089a4:	83 c4 08             	add    esp,0x8
c00089a7:	5b                   	pop    ebx
c00089a8:	c3                   	ret    

c00089a9 <src_get_version>:
c00089a9:	b8 80 fa 01 c0       	mov    eax,0xc001fa80
c00089ae:	c3                   	ret    

c00089af <src_is_valid_ratio>:
c00089af:	50                   	push   eax
c00089b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b8:	e8 84 fa ff ff       	call   c0008441 <is_bad_src_ratio>
c00089bd:	85 c0                	test   eax,eax
c00089bf:	0f 94 c0             	sete   al
c00089c2:	83 c4 0c             	add    esp,0xc
c00089c5:	0f b6 c0             	movzx  eax,al
c00089c8:	c3                   	ret    

c00089c9 <src_error>:
c00089c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089cd:	31 c0                	xor    eax,eax
c00089cf:	85 d2                	test   edx,edx
c00089d1:	74 03                	je     c00089d6 <src_error+0xd>
c00089d3:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00089d6:	c3                   	ret    

c00089d7 <src_strerror>:
c00089d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089db:	31 c0                	xor    eax,eax
c00089dd:	83 fa 17             	cmp    edx,0x17
c00089e0:	77 07                	ja     c00089e9 <src_strerror+0x12>
c00089e2:	8b 04 95 e0 fe 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0120]
c00089e9:	c3                   	ret    

c00089ea <src_simple>:
c00089ea:	56                   	push   esi
c00089eb:	53                   	push   ebx
c00089ec:	83 ec 18             	sub    esp,0x18
c00089ef:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089f3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089f7:	50                   	push   eax
c00089f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00089fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a00:	e8 46 fe ff ff       	call   c000884b <src_new>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	85 c0                	test   eax,eax
c0008a0a:	75 06                	jne    c0008a12 <src_simple+0x28>
c0008a0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a10:	eb 25                	jmp    c0008a37 <src_simple+0x4d>
c0008a12:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008a19:	89 c3                	mov    ebx,eax
c0008a1b:	50                   	push   eax
c0008a1c:	50                   	push   eax
c0008a1d:	56                   	push   esi
c0008a1e:	53                   	push   ebx
c0008a1f:	e8 e1 fa ff ff       	call   c0008505 <src_process>
c0008a24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008a27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a2b:	e8 99 fa ff ff       	call   c00084c9 <src_delete>
c0008a30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a34:	83 c4 10             	add    esp,0x10
c0008a37:	83 c4 14             	add    esp,0x14
c0008a3a:	5b                   	pop    ebx
c0008a3b:	5e                   	pop    esi
c0008a3c:	c3                   	ret    

c0008a3d <src_short_to_float_array>:
c0008a3d:	83 ec 0c             	sub    esp,0xc
c0008a40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008a44:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008a4c:	85 c0                	test   eax,eax
c0008a4e:	74 0f                	je     c0008a5f <src_short_to_float_array+0x22>
c0008a50:	48                   	dec    eax
c0008a51:	d9 05 64 ff 01 c0    	fld    DWORD PTR ds:0xc001ff64
c0008a57:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008a5a:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008a5d:	eb ed                	jmp    c0008a4c <src_short_to_float_array+0xf>
c0008a5f:	83 c4 0c             	add    esp,0xc
c0008a62:	c3                   	ret    

c0008a63 <src_float_to_short_array>:
c0008a63:	56                   	push   esi
c0008a64:	53                   	push   ebx
c0008a65:	52                   	push   edx
c0008a66:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a6a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008a6e:	85 db                	test   ebx,ebx
c0008a70:	74 51                	je     c0008ac3 <src_float_to_short_array+0x60>
c0008a72:	4b                   	dec    ebx
c0008a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a77:	d9 05 68 ff 01 c0    	fld    DWORD PTR ds:0xc001ff68
c0008a7d:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008a80:	dc 15 58 ff 01 c0    	fcom   QWORD PTR ds:0xc001ff58
c0008a86:	df e0                	fnstsw ax
c0008a88:	9e                   	sahf   
c0008a89:	72 0a                	jb     c0008a95 <src_float_to_short_array+0x32>
c0008a8b:	dd d8                	fstp   st(0)
c0008a8d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008a93:	eb d9                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008a95:	d9 05 6c ff 01 c0    	fld    DWORD PTR ds:0xc001ff6c
c0008a9b:	d8 d9                	fcomp  st(1)
c0008a9d:	df e0                	fnstsw ax
c0008a9f:	9e                   	sahf   
c0008aa0:	72 0a                	jb     c0008aac <src_float_to_short_array+0x49>
c0008aa2:	dd d8                	fstp   st(0)
c0008aa4:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008aaa:	eb c2                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008aac:	83 ec 10             	sub    esp,0x10
c0008aaf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008ab2:	e8 59 5d 01 00       	call   c001e810 <lrint>
c0008ab7:	83 c4 10             	add    esp,0x10
c0008aba:	c1 f8 10             	sar    eax,0x10
c0008abd:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ac1:	eb ab                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008ac3:	58                   	pop    eax
c0008ac4:	5b                   	pop    ebx
c0008ac5:	5e                   	pop    esi
c0008ac6:	c3                   	ret    

c0008ac7 <src_int_to_float_array>:
c0008ac7:	83 ec 0c             	sub    esp,0xc
c0008aca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ace:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ad2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ad6:	85 c0                	test   eax,eax
c0008ad8:	74 0f                	je     c0008ae9 <src_int_to_float_array+0x22>
c0008ada:	48                   	dec    eax
c0008adb:	d9 05 70 ff 01 c0    	fld    DWORD PTR ds:0xc001ff70
c0008ae1:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008ae4:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008ae7:	eb ed                	jmp    c0008ad6 <src_int_to_float_array+0xf>
c0008ae9:	83 c4 0c             	add    esp,0xc
c0008aec:	c3                   	ret    

c0008aed <src_float_to_int_array>:
c0008aed:	56                   	push   esi
c0008aee:	53                   	push   ebx
c0008aef:	52                   	push   edx
c0008af0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008af4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008af8:	85 db                	test   ebx,ebx
c0008afa:	74 4f                	je     c0008b4b <src_float_to_int_array+0x5e>
c0008afc:	4b                   	dec    ebx
c0008afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b01:	d9 05 68 ff 01 c0    	fld    DWORD PTR ds:0xc001ff68
c0008b07:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b0a:	dc 15 58 ff 01 c0    	fcom   QWORD PTR ds:0xc001ff58
c0008b10:	df e0                	fnstsw ax
c0008b12:	9e                   	sahf   
c0008b13:	72 0b                	jb     c0008b20 <src_float_to_int_array+0x33>
c0008b15:	dd d8                	fstp   st(0)
c0008b17:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008b1e:	eb d8                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b20:	d9 05 6c ff 01 c0    	fld    DWORD PTR ds:0xc001ff6c
c0008b26:	d8 d9                	fcomp  st(1)
c0008b28:	df e0                	fnstsw ax
c0008b2a:	9e                   	sahf   
c0008b2b:	72 0b                	jb     c0008b38 <src_float_to_int_array+0x4b>
c0008b2d:	dd d8                	fstp   st(0)
c0008b2f:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008b36:	eb c0                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b38:	83 ec 10             	sub    esp,0x10
c0008b3b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b3e:	e8 cd 5c 01 00       	call   c001e810 <lrint>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008b49:	eb ad                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b4b:	58                   	pop    eax
c0008b4c:	5b                   	pop    ebx
c0008b4d:	5e                   	pop    esi
c0008b4e:	c3                   	ret    

c0008b4f <is_bad_src_ratio>:
c0008b4f:	83 ec 0c             	sub    esp,0xc
c0008b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b56:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008b61:	dd 04 24             	fld    QWORD PTR [esp]
c0008b64:	dd 05 40 ff 01 c0    	fld    QWORD PTR ds:0xc001ff40
c0008b6a:	de d9                	fcompp 
c0008b6c:	df e0                	fnstsw ax
c0008b6e:	f6 c4 45             	test   ah,0x45
c0008b71:	74 10                	je     c0008b83 <is_bad_src_ratio+0x34>
c0008b73:	dd 04 24             	fld    QWORD PTR [esp]
c0008b76:	dc 1d 48 ff 01 c0    	fcomp  QWORD PTR ds:0xc001ff48
c0008b7c:	df e0                	fnstsw ax
c0008b7e:	f6 c4 45             	test   ah,0x45
c0008b81:	75 07                	jne    c0008b8a <is_bad_src_ratio+0x3b>
c0008b83:	b8 01 00 00 00       	mov    eax,0x1
c0008b88:	eb 05                	jmp    c0008b8f <is_bad_src_ratio+0x40>
c0008b8a:	b8 00 00 00 00       	mov    eax,0x0
c0008b8f:	83 c4 0c             	add    esp,0xc
c0008b92:	c3                   	ret    

c0008b93 <fmod_one>:
c0008b93:	83 ec 2c             	sub    esp,0x2c
c0008b96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008ba2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ba6:	83 ec 08             	sub    esp,0x8
c0008ba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb1:	e8 5a 5c 01 00       	call   c001e810 <lrint>
c0008bb6:	83 c4 10             	add    esp,0x10
c0008bb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bbd:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008bc1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008bc5:	de e1                	fsubrp st(1),st
c0008bc7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008bcb:	d9 ee                	fldz   
c0008bcd:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008bd1:	df e0                	fnstsw ax
c0008bd3:	f6 c4 45             	test   ah,0x45
c0008bd6:	75 0a                	jne    c0008be2 <fmod_one+0x4f>
c0008bd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008bdc:	d9 e8                	fld1   
c0008bde:	de c1                	faddp  st(1),st
c0008be0:	eb 04                	jmp    c0008be6 <fmod_one+0x53>
c0008be2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008be6:	83 c4 2c             	add    esp,0x2c
c0008be9:	c3                   	ret    

c0008bea <linear_vari_process>:
c0008bea:	55                   	push   ebp
c0008beb:	57                   	push   edi
c0008bec:	56                   	push   esi
c0008bed:	53                   	push   ebx
c0008bee:	83 ec 2c             	sub    esp,0x2c
c0008bf1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008bf5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008bf9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c01:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008c05:	0f 8e 5e 02 00 00    	jle    c0008e69 <linear_vari_process+0x27f>
c0008c0b:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008c0e:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008c16:	85 db                	test   ebx,ebx
c0008c18:	0f 84 4b 02 00 00    	je     c0008e69 <linear_vari_process+0x27f>
c0008c1e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008c21:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008c25:	74 19                	je     c0008c40 <linear_vari_process+0x56>
c0008c27:	31 d2                	xor    edx,edx
c0008c29:	39 c2                	cmp    edx,eax
c0008c2b:	7d 0c                	jge    c0008c39 <linear_vari_process+0x4f>
c0008c2d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008c2f:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008c32:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008c36:	42                   	inc    edx
c0008c37:	eb f0                	jmp    c0008c29 <linear_vari_process+0x3f>
c0008c39:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008c40:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008c43:	0f af d0             	imul   edx,eax
c0008c46:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008c49:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008c4d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008c54:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008c5e:	dd 07                	fld    QWORD PTR [edi]
c0008c60:	dd 14 24             	fst    QWORD PTR [esp]
c0008c63:	50                   	push   eax
c0008c64:	50                   	push   eax
c0008c65:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008c68:	e8 e2 fe ff ff       	call   c0008b4f <is_bad_src_ratio>
c0008c6d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008c71:	5a                   	pop    edx
c0008c72:	59                   	pop    ecx
c0008c73:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008c78:	0f 85 e3 01 00 00    	jne    c0008e61 <linear_vari_process+0x277>
c0008c7e:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008c81:	d9 e8                	fld1   
c0008c83:	d8 d1                	fcom   st(1)
c0008c85:	df e0                	fnstsw ax
c0008c87:	9e                   	sahf   
c0008c88:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008c8c:	0f 86 99 00 00 00    	jbe    c0008d2b <linear_vari_process+0x141>
c0008c92:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c95:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008c98:	0f 8d 8d 00 00 00    	jge    c0008d2b <linear_vari_process+0x141>
c0008c9e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008ca2:	d8 c1                	fadd   st,st(1)
c0008ca4:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008ca7:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008caa:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008cad:	df e0                	fnstsw ax
c0008caf:	9e                   	sahf   
c0008cb0:	73 79                	jae    c0008d2b <linear_vari_process+0x141>
c0008cb2:	85 d2                	test   edx,edx
c0008cb4:	7e 38                	jle    c0008cee <linear_vari_process+0x104>
c0008cb6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008cba:	83 ec 10             	sub    esp,0x10
c0008cbd:	dd 07                	fld    QWORD PTR [edi]
c0008cbf:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cc5:	e8 26 5b 01 00       	call   c001e7f0 <fabs>
c0008cca:	83 c4 10             	add    esp,0x10
c0008ccd:	dc 1d b8 ff 01 c0    	fcomp  QWORD PTR ds:0xc001ffb8
c0008cd3:	df e0                	fnstsw ax
c0008cd5:	9e                   	sahf   
c0008cd6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008cda:	76 12                	jbe    c0008cee <linear_vari_process+0x104>
c0008cdc:	dd 07                	fld    QWORD PTR [edi]
c0008cde:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008ce1:	d8 e1                	fsub   st,st(1)
c0008ce3:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008ce6:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008ce9:	de c1                	faddp  st(1),st
c0008ceb:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cee:	31 c0                	xor    eax,eax
c0008cf0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008cf3:	7e 1f                	jle    c0008d14 <linear_vari_process+0x12a>
c0008cf5:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008cf9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008cfb:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008cfe:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d02:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008d05:	d8 e1                	fsub   st,st(1)
c0008d07:	40                   	inc    eax
c0008d08:	d8 ca                	fmul   st,st(2)
c0008d0a:	de c1                	faddp  st(1),st
c0008d0c:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008d0f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008d12:	eb dc                	jmp    c0008cf0 <linear_vari_process+0x106>
c0008d14:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d18:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d1b:	de c1                	faddp  st(1),st
c0008d1d:	e9 5f ff ff ff       	jmp    c0008c81 <linear_vari_process+0x97>
c0008d22:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d26:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d29:	de c1                	faddp  st(1),st
c0008d2b:	83 ec 10             	sub    esp,0x10
c0008d2e:	dd 14 24             	fst    QWORD PTR [esp]
c0008d31:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d35:	e8 59 fe ff ff       	call   c0008b93 <fmod_one>
c0008d3a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008d3d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008d41:	d8 e1                	fsub   st,st(1)
c0008d43:	d9 c9                	fxch   st(1)
c0008d45:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d49:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d4c:	e8 bf 5a 01 00       	call   c001e810 <lrint>
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	0f af e8             	imul   ebp,eax
c0008d57:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d5b:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008d5e:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008d61:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008d64:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008d67:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008d6a:	0f 8d 97 00 00 00    	jge    c0008e07 <linear_vari_process+0x21d>
c0008d70:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008d74:	d9 c0                	fld    st(0)
c0008d76:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d79:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008d7d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008d81:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008d85:	de d9                	fcompp 
c0008d87:	df e0                	fnstsw ax
c0008d89:	9e                   	sahf   
c0008d8a:	76 7b                	jbe    c0008e07 <linear_vari_process+0x21d>
c0008d8c:	85 ed                	test   ebp,ebp
c0008d8e:	7e 38                	jle    c0008dc8 <linear_vari_process+0x1de>
c0008d90:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d94:	83 ec 10             	sub    esp,0x10
c0008d97:	dd 07                	fld    QWORD PTR [edi]
c0008d99:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d9c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d9f:	e8 4c 5a 01 00       	call   c001e7f0 <fabs>
c0008da4:	83 c4 10             	add    esp,0x10
c0008da7:	dc 1d b8 ff 01 c0    	fcomp  QWORD PTR ds:0xc001ffb8
c0008dad:	df e0                	fnstsw ax
c0008daf:	9e                   	sahf   
c0008db0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008db4:	76 12                	jbe    c0008dc8 <linear_vari_process+0x1de>
c0008db6:	dd 07                	fld    QWORD PTR [edi]
c0008db8:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008dbb:	d8 e1                	fsub   st,st(1)
c0008dbd:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008dc0:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008dc3:	de c1                	faddp  st(1),st
c0008dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dc8:	31 c0                	xor    eax,eax
c0008dca:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008dcd:	39 c2                	cmp    edx,eax
c0008dcf:	0f 8e 4d ff ff ff    	jle    c0008d22 <linear_vari_process+0x138>
c0008dd5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dd7:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008dda:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008dde:	89 e9                	mov    ecx,ebp
c0008de0:	01 c5                	add    ebp,eax
c0008de2:	29 d1                	sub    ecx,edx
c0008de4:	89 ca                	mov    edx,ecx
c0008de6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008dea:	01 c2                	add    edx,eax
c0008dec:	40                   	inc    eax
c0008ded:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008df0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008df3:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008df6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008df9:	d8 e1                	fsub   st,st(1)
c0008dfb:	d8 ca                	fmul   st,st(2)
c0008dfd:	de c1                	faddp  st(1),st
c0008dff:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e02:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e05:	eb c3                	jmp    c0008dca <linear_vari_process+0x1e0>
c0008e07:	39 d1                	cmp    ecx,edx
c0008e09:	7d 13                	jge    c0008e1e <linear_vari_process+0x234>
c0008e0b:	89 d0                	mov    eax,edx
c0008e0d:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008e10:	29 c8                	sub    eax,ecx
c0008e12:	99                   	cdq    
c0008e13:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e1a:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008e1e:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008e21:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e24:	85 c0                	test   eax,eax
c0008e26:	7f 1b                	jg     c0008e43 <linear_vari_process+0x259>
c0008e28:	dd 04 24             	fld    QWORD PTR [esp]
c0008e2b:	dd 1f                	fstp   QWORD PTR [edi]
c0008e2d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e30:	99                   	cdq    
c0008e31:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e34:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008e37:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008e3a:	99                   	cdq    
c0008e3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e3e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008e41:	eb 26                	jmp    c0008e69 <linear_vari_process+0x27f>
c0008e43:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008e46:	31 d2                	xor    edx,edx
c0008e48:	29 c8                	sub    eax,ecx
c0008e4a:	c1 e0 02             	shl    eax,0x2
c0008e4d:	39 d1                	cmp    ecx,edx
c0008e4f:	7e d7                	jle    c0008e28 <linear_vari_process+0x23e>
c0008e51:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008e53:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008e57:	83 c0 04             	add    eax,0x4
c0008e5a:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008e5e:	42                   	inc    edx
c0008e5f:	eb ec                	jmp    c0008e4d <linear_vari_process+0x263>
c0008e61:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008e69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e6d:	83 c4 2c             	add    esp,0x2c
c0008e70:	5b                   	pop    ebx
c0008e71:	5e                   	pop    esi
c0008e72:	5f                   	pop    edi
c0008e73:	5d                   	pop    ebp
c0008e74:	c3                   	ret    

c0008e75 <linear_reset>:
c0008e75:	83 ec 0c             	sub    esp,0xc
c0008e78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008e7c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008e7f:	85 c0                	test   eax,eax
c0008e81:	74 20                	je     c0008ea3 <linear_reset+0x2e>
c0008e83:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008e86:	83 c0 1c             	add    eax,0x1c
c0008e89:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0008e8c:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0008e93:	c1 e2 02             	shl    edx,0x2
c0008e96:	51                   	push   ecx
c0008e97:	52                   	push   edx
c0008e98:	6a 00                	push   0x0
c0008e9a:	50                   	push   eax
c0008e9b:	e8 68 77 ff ff       	call   c0000608 <memset>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	83 c4 0c             	add    esp,0xc
c0008ea6:	c3                   	ret    

c0008ea7 <linear_get_name>:
c0008ea7:	31 c0                	xor    eax,eax
c0008ea9:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008eae:	75 05                	jne    c0008eb5 <linear_get_name+0xe>
c0008eb0:	b8 74 ff 01 c0       	mov    eax,0xc001ff74
c0008eb5:	c3                   	ret    

c0008eb6 <linear_get_description>:
c0008eb6:	31 c0                	xor    eax,eax
c0008eb8:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008ebd:	75 05                	jne    c0008ec4 <linear_get_description+0xe>
c0008ebf:	b8 88 ff 01 c0       	mov    eax,0xc001ff88
c0008ec4:	c3                   	ret    

c0008ec5 <linear_set_converter>:
c0008ec5:	53                   	push   ebx
c0008ec6:	b8 0a 00 00 00       	mov    eax,0xa
c0008ecb:	83 ec 08             	sub    esp,0x8
c0008ece:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ed2:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008ed7:	75 6e                	jne    c0008f47 <linear_set_converter+0x82>
c0008ed9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008edc:	85 c0                	test   eax,eax
c0008ede:	74 13                	je     c0008ef3 <linear_set_converter+0x2e>
c0008ee0:	83 ec 0c             	sub    esp,0xc
c0008ee3:	50                   	push   eax
c0008ee4:	e8 45 2d 00 00       	call   c000bc2e <free>
c0008ee9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008ef0:	83 c4 10             	add    esp,0x10
c0008ef3:	50                   	push   eax
c0008ef4:	50                   	push   eax
c0008ef5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008ef8:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008eff:	50                   	push   eax
c0008f00:	6a 01                	push   0x1
c0008f02:	e8 47 2d 00 00       	call   c000bc4e <calloc>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	89 c2                	mov    edx,eax
c0008f0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008f0f:	85 d2                	test   edx,edx
c0008f11:	b8 01 00 00 00       	mov    eax,0x1
c0008f16:	74 2f                	je     c0008f47 <linear_set_converter+0x82>
c0008f18:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f1b:	83 ec 0c             	sub    esp,0xc
c0008f1e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f21:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008f27:	c7 43 24 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008bea
c0008f2e:	c7 43 20 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008bea
c0008f35:	c7 43 28 75 8e 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008e75
c0008f3c:	53                   	push   ebx
c0008f3d:	e8 33 ff ff ff       	call   c0008e75 <linear_reset>
c0008f42:	83 c4 10             	add    esp,0x10
c0008f45:	31 c0                	xor    eax,eax
c0008f47:	83 c4 08             	add    esp,0x8
c0008f4a:	5b                   	pop    ebx
c0008f4b:	c3                   	ret    

c0008f4c <is_bad_src_ratio>:
c0008f4c:	83 ec 0c             	sub    esp,0xc
c0008f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f53:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008f5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008f5e:	dd 04 24             	fld    QWORD PTR [esp]
c0008f61:	dd 05 40 ff 01 c0    	fld    QWORD PTR ds:0xc001ff40
c0008f67:	de d9                	fcompp 
c0008f69:	df e0                	fnstsw ax
c0008f6b:	f6 c4 45             	test   ah,0x45
c0008f6e:	74 10                	je     c0008f80 <is_bad_src_ratio+0x34>
c0008f70:	dd 04 24             	fld    QWORD PTR [esp]
c0008f73:	dc 1d 48 ff 01 c0    	fcomp  QWORD PTR ds:0xc001ff48
c0008f79:	df e0                	fnstsw ax
c0008f7b:	f6 c4 45             	test   ah,0x45
c0008f7e:	75 07                	jne    c0008f87 <is_bad_src_ratio+0x3b>
c0008f80:	b8 01 00 00 00       	mov    eax,0x1
c0008f85:	eb 05                	jmp    c0008f8c <is_bad_src_ratio+0x40>
c0008f87:	b8 00 00 00 00       	mov    eax,0x0
c0008f8c:	83 c4 0c             	add    esp,0xc
c0008f8f:	c3                   	ret    

c0008f90 <int_to_fp>:
c0008f90:	c1 e0 0c             	shl    eax,0xc
c0008f93:	c3                   	ret    

c0008f94 <fp_to_int>:
c0008f94:	c1 f8 0c             	sar    eax,0xc
c0008f97:	c3                   	ret    

c0008f98 <fp_fraction_part>:
c0008f98:	25 ff 0f 00 00       	and    eax,0xfff
c0008f9d:	c3                   	ret    

c0008f9e <fp_to_double>:
c0008f9e:	83 ec 0c             	sub    esp,0xc
c0008fa1:	e8 f2 ff ff ff       	call   c0008f98 <fp_fraction_part>
c0008fa6:	d9 05 48 01 02 c0    	fld    DWORD PTR ds:0xc0020148
c0008fac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fb0:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0008fb4:	83 c4 0c             	add    esp,0xc
c0008fb7:	c3                   	ret    

c0008fb8 <calc_output_single>:
c0008fb8:	55                   	push   ebp
c0008fb9:	57                   	push   edi
c0008fba:	89 c7                	mov    edi,eax
c0008fbc:	56                   	push   esi
c0008fbd:	53                   	push   ebx
c0008fbe:	89 d3                	mov    ebx,edx
c0008fc0:	83 ec 24             	sub    esp,0x24
c0008fc3:	89 de                	mov    esi,ebx
c0008fc5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008fc8:	e8 c3 ff ff ff       	call   c0008f90 <int_to_fp>
c0008fcd:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0008fd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fd4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008fdb:	29 c8                	sub    eax,ecx
c0008fdd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008fe5:	99                   	cdq    
c0008fe6:	f7 fb                	idiv   ebx
c0008fe8:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0008feb:	0f af f0             	imul   esi,eax
c0008fee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008ff2:	01 ce                	add    esi,ecx
c0008ff4:	29 c2                	sub    edx,eax
c0008ff6:	8d 14 97             	lea    edx,[edi+edx*4]
c0008ff9:	89 f0                	mov    eax,esi
c0008ffb:	e8 9e ff ff ff       	call   c0008f9e <fp_to_double>
c0009000:	89 f0                	mov    eax,esi
c0009002:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009006:	e8 89 ff ff ff       	call   c0008f94 <fp_to_int>
c000900b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000900f:	83 c2 04             	add    edx,0x4
c0009012:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009016:	d8 e1                	fsub   st,st(1)
c0009018:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000901c:	de c9                	fmulp  st(1),st
c000901e:	de c1                	faddp  st(1),st
c0009020:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009026:	29 de                	sub    esi,ebx
c0009028:	dc 04 24             	fadd   QWORD PTR [esp]
c000902b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000902e:	79 c9                	jns    c0008ff9 <calc_output_single+0x41>
c0009030:	89 d8                	mov    eax,ebx
c0009032:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009036:	29 c8                	sub    eax,ecx
c0009038:	d9 ee                	fldz   
c000903a:	89 c1                	mov    ecx,eax
c000903c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009040:	29 c8                	sub    eax,ecx
c0009042:	99                   	cdq    
c0009043:	f7 fb                	idiv   ebx
c0009045:	89 da                	mov    edx,ebx
c0009047:	0f af d0             	imul   edx,eax
c000904a:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000904e:	01 d1                	add    ecx,edx
c0009050:	8d 14 87             	lea    edx,[edi+eax*4]
c0009053:	89 c8                	mov    eax,ecx
c0009055:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009059:	e8 40 ff ff ff       	call   c0008f9e <fp_to_double>
c000905e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009062:	89 c8                	mov    eax,ecx
c0009064:	e8 2b ff ff ff       	call   c0008f94 <fp_to_int>
c0009069:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000906d:	29 d9                	sub    ecx,ebx
c000906f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009073:	83 ea 04             	sub    edx,0x4
c0009076:	d8 e1                	fsub   st,st(1)
c0009078:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000907c:	de c9                	fmulp  st(1),st
c000907e:	de c1                	faddp  st(1),st
c0009080:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009086:	85 c9                	test   ecx,ecx
c0009088:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000908c:	de c1                	faddp  st(1),st
c000908e:	7f c3                	jg     c0009053 <calc_output_single+0x9b>
c0009090:	dd 04 24             	fld    QWORD PTR [esp]
c0009093:	83 c4 24             	add    esp,0x24
c0009096:	de c1                	faddp  st(1),st
c0009098:	5b                   	pop    ebx
c0009099:	5e                   	pop    esi
c000909a:	5f                   	pop    edi
c000909b:	5d                   	pop    ebp
c000909c:	c3                   	ret    

c000909d <calc_output_stereo>:
c000909d:	55                   	push   ebp
c000909e:	57                   	push   edi
c000909f:	89 c7                	mov    edi,eax
c00090a1:	56                   	push   esi
c00090a2:	53                   	push   ebx
c00090a3:	89 d3                	mov    ebx,edx
c00090a5:	83 ec 44             	sub    esp,0x44
c00090a8:	89 de                	mov    esi,ebx
c00090aa:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00090ae:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00090b1:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00090b5:	e8 d6 fe ff ff       	call   c0008f90 <int_to_fp>
c00090ba:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00090bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090c1:	d9 ee                	fldz   
c00090c3:	29 c8                	sub    eax,ecx
c00090c5:	dd 14 24             	fst    QWORD PTR [esp]
c00090c8:	99                   	cdq    
c00090c9:	f7 fb                	idiv   ebx
c00090cb:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00090ce:	0f af f0             	imul   esi,eax
c00090d1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00090d5:	01 ce                	add    esi,ecx
c00090d7:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00090da:	0f af c2             	imul   eax,edx
c00090dd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00090e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00090e5:	29 c2                	sub    edx,eax
c00090e7:	8d 14 97             	lea    edx,[edi+edx*4]
c00090ea:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00090ee:	89 f0                	mov    eax,esi
c00090f0:	e8 a9 fe ff ff       	call   c0008f9e <fp_to_double>
c00090f5:	89 f0                	mov    eax,esi
c00090f7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00090fb:	e8 94 fe ff ff       	call   c0008f94 <fp_to_int>
c0009100:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009104:	83 c2 08             	add    edx,0x8
c0009107:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000910b:	d8 e1                	fsub   st,st(1)
c000910d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009111:	de c9                	fmulp  st(1),st
c0009113:	de c1                	faddp  st(1),st
c0009115:	d9 c0                	fld    st(0)
c0009117:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000911d:	dc 04 24             	fadd   QWORD PTR [esp]
c0009120:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009123:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009129:	29 de                	sub    esi,ebx
c000912b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000912f:	de c1                	faddp  st(1),st
c0009131:	79 b7                	jns    c00090ea <calc_output_stereo+0x4d>
c0009133:	89 d8                	mov    eax,ebx
c0009135:	d9 ee                	fldz   
c0009137:	d9 ee                	fldz   
c0009139:	29 c8                	sub    eax,ecx
c000913b:	89 c1                	mov    ecx,eax
c000913d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009141:	29 c8                	sub    eax,ecx
c0009143:	99                   	cdq    
c0009144:	f7 fb                	idiv   ebx
c0009146:	89 da                	mov    edx,ebx
c0009148:	0f af d0             	imul   edx,eax
c000914b:	40                   	inc    eax
c000914c:	01 d1                	add    ecx,edx
c000914e:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009153:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009157:	8d 14 87             	lea    edx,[edi+eax*4]
c000915a:	eb 04                	jmp    c0009160 <calc_output_stereo+0xc3>
c000915c:	d9 ca                	fxch   st(2)
c000915e:	d9 c9                	fxch   st(1)
c0009160:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009164:	d9 c9                	fxch   st(1)
c0009166:	89 c8                	mov    eax,ecx
c0009168:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000916c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009170:	e8 29 fe ff ff       	call   c0008f9e <fp_to_double>
c0009175:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009179:	89 c8                	mov    eax,ecx
c000917b:	e8 14 fe ff ff       	call   c0008f94 <fp_to_int>
c0009180:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009184:	29 d9                	sub    ecx,ebx
c0009186:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000918a:	83 ea 08             	sub    edx,0x8
c000918d:	d8 e1                	fsub   st,st(1)
c000918f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009193:	de c9                	fmulp  st(1),st
c0009195:	de c1                	faddp  st(1),st
c0009197:	d9 c0                	fld    st(0)
c0009199:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c000919f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00091a3:	de c1                	faddp  st(1),st
c00091a5:	d9 c9                	fxch   st(1)
c00091a7:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c00091ad:	85 c9                	test   ecx,ecx
c00091af:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00091b3:	de c1                	faddp  st(1),st
c00091b5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00091b9:	7f a1                	jg     c000915c <calc_output_stereo+0xbf>
c00091bb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00091bf:	dd 04 24             	fld    QWORD PTR [esp]
c00091c2:	de c3                	faddp  st(3),st
c00091c4:	d9 ca                	fxch   st(2)
c00091c6:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091ca:	d9 18                	fstp   DWORD PTR [eax]
c00091cc:	de c1                	faddp  st(1),st
c00091ce:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091d2:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00091d5:	83 c4 44             	add    esp,0x44
c00091d8:	5b                   	pop    ebx
c00091d9:	5e                   	pop    esi
c00091da:	5f                   	pop    edi
c00091db:	5d                   	pop    ebp
c00091dc:	c3                   	ret    

c00091dd <calc_output_quad>:
c00091dd:	55                   	push   ebp
c00091de:	57                   	push   edi
c00091df:	56                   	push   esi
c00091e0:	89 c6                	mov    esi,eax
c00091e2:	53                   	push   ebx
c00091e3:	89 d3                	mov    ebx,edx
c00091e5:	83 ec 5c             	sub    esp,0x5c
c00091e8:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c00091ec:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00091ef:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091f2:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00091f6:	e8 95 fd ff ff       	call   c0008f90 <int_to_fp>
c00091fb:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00091fe:	d9 ee                	fldz   
c0009200:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009204:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009208:	29 c8                	sub    eax,ecx
c000920a:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c000920e:	99                   	cdq    
c000920f:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009213:	f7 fb                	idiv   ebx
c0009215:	89 da                	mov    edx,ebx
c0009217:	0f af d0             	imul   edx,eax
c000921a:	01 ca                	add    edx,ecx
c000921c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009220:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c0009223:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009227:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000922a:	0f af c2             	imul   eax,edx
c000922d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009231:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009235:	29 c2                	sub    edx,eax
c0009237:	8d 14 96             	lea    edx,[esi+edx*4]
c000923a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000923e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009242:	e8 57 fd ff ff       	call   c0008f9e <fp_to_double>
c0009247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000924b:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000924f:	e8 40 fd ff ff       	call   c0008f94 <fp_to_int>
c0009254:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009258:	83 c2 10             	add    edx,0x10
c000925b:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000925f:	d8 e1                	fsub   st,st(1)
c0009261:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009265:	de c9                	fmulp  st(1),st
c0009267:	de c1                	faddp  st(1),st
c0009269:	d9 c0                	fld    st(0)
c000926b:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009271:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009275:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009279:	d9 c0                	fld    st(0)
c000927b:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009281:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009285:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009289:	d9 c0                	fld    st(0)
c000928b:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009291:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009295:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009299:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000929f:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c00092a3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00092a7:	de c1                	faddp  st(1),st
c00092a9:	79 8f                	jns    c000923a <calc_output_quad+0x5d>
c00092ab:	89 d8                	mov    eax,ebx
c00092ad:	d9 ee                	fldz   
c00092af:	29 c8                	sub    eax,ecx
c00092b1:	d9 ee                	fldz   
c00092b3:	89 c1                	mov    ecx,eax
c00092b5:	d9 ee                	fldz   
c00092b7:	d9 ee                	fldz   
c00092b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00092bd:	29 c8                	sub    eax,ecx
c00092bf:	99                   	cdq    
c00092c0:	f7 fb                	idiv   ebx
c00092c2:	89 da                	mov    edx,ebx
c00092c4:	0f af d0             	imul   edx,eax
c00092c7:	40                   	inc    eax
c00092c8:	01 d1                	add    ecx,edx
c00092ca:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00092cf:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00092d3:	8d 14 86             	lea    edx,[esi+eax*4]
c00092d6:	eb 0a                	jmp    c00092e2 <calc_output_quad+0x105>
c00092d8:	d9 cc                	fxch   st(4)
c00092da:	d9 ca                	fxch   st(2)
c00092dc:	d9 c9                	fxch   st(1)
c00092de:	d9 cb                	fxch   st(3)
c00092e0:	d9 c9                	fxch   st(1)
c00092e2:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092e6:	d9 c9                	fxch   st(1)
c00092e8:	89 c8                	mov    eax,ecx
c00092ea:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092ee:	d9 c9                	fxch   st(1)
c00092f0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00092f4:	d9 c9                	fxch   st(1)
c00092f6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00092fa:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00092fe:	e8 9b fc ff ff       	call   c0008f9e <fp_to_double>
c0009303:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009307:	89 c8                	mov    eax,ecx
c0009309:	e8 86 fc ff ff       	call   c0008f94 <fp_to_int>
c000930e:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009312:	29 d9                	sub    ecx,ebx
c0009314:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009318:	83 ea 10             	sub    edx,0x10
c000931b:	d8 e1                	fsub   st,st(1)
c000931d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009321:	de c9                	fmulp  st(1),st
c0009323:	de c1                	faddp  st(1),st
c0009325:	d9 c0                	fld    st(0)
c0009327:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c000932d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009331:	de c1                	faddp  st(1),st
c0009333:	d9 c1                	fld    st(1)
c0009335:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c000933b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000933f:	de c1                	faddp  st(1),st
c0009341:	d9 c2                	fld    st(2)
c0009343:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009349:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000934d:	de c1                	faddp  st(1),st
c000934f:	d9 cb                	fxch   st(3)
c0009351:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009357:	85 c9                	test   ecx,ecx
c0009359:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000935d:	de c1                	faddp  st(1),st
c000935f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009363:	0f 8f 6f ff ff ff    	jg     c00092d8 <calc_output_quad+0xfb>
c0009369:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000936d:	de c4                	faddp  st(4),st
c000936f:	d9 cb                	fxch   st(3)
c0009371:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009374:	d9 1f                	fstp   DWORD PTR [edi]
c0009376:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000937a:	de c2                	faddp  st(2),st
c000937c:	d9 c9                	fxch   st(1)
c000937e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009381:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009384:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009388:	de c3                	faddp  st(3),st
c000938a:	d9 ca                	fxch   st(2)
c000938c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000938f:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009392:	de c1                	faddp  st(1),st
c0009394:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009397:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000939a:	83 c4 5c             	add    esp,0x5c
c000939d:	5b                   	pop    ebx
c000939e:	5e                   	pop    esi
c000939f:	5f                   	pop    edi
c00093a0:	5d                   	pop    ebp
c00093a1:	c3                   	ret    

c00093a2 <calc_output_hex>:
c00093a2:	55                   	push   ebp
c00093a3:	57                   	push   edi
c00093a4:	89 c7                	mov    edi,eax
c00093a6:	56                   	push   esi
c00093a7:	53                   	push   ebx
c00093a8:	89 d3                	mov    ebx,edx
c00093aa:	83 ec 7c             	sub    esp,0x7c
c00093ad:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c00093b4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00093b7:	dd 1c 24             	fstp   QWORD PTR [esp]
c00093ba:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00093c1:	e8 ca fb ff ff       	call   c0008f90 <int_to_fp>
c00093c6:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093c9:	d9 ee                	fldz   
c00093cb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00093cf:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00093d3:	29 c8                	sub    eax,ecx
c00093d5:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00093d9:	99                   	cdq    
c00093da:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00093de:	f7 fb                	idiv   ebx
c00093e0:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00093e4:	89 da                	mov    edx,ebx
c00093e6:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00093ea:	0f af d0             	imul   edx,eax
c00093ed:	01 ca                	add    edx,ecx
c00093ef:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00093f3:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00093f6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00093fa:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00093fd:	0f af c2             	imul   eax,edx
c0009400:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009404:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009408:	29 c2                	sub    edx,eax
c000940a:	8d 14 97             	lea    edx,[edi+edx*4]
c000940d:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009411:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009415:	e8 84 fb ff ff       	call   c0008f9e <fp_to_double>
c000941a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000941e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009422:	e8 6d fb ff ff       	call   c0008f94 <fp_to_int>
c0009427:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000942b:	83 c2 18             	add    edx,0x18
c000942e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009432:	d8 e1                	fsub   st,st(1)
c0009434:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009438:	de c9                	fmulp  st(1),st
c000943a:	de c1                	faddp  st(1),st
c000943c:	d9 c0                	fld    st(0)
c000943e:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009444:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009448:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000944c:	d9 c0                	fld    st(0)
c000944e:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009454:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009458:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000945c:	d9 c0                	fld    st(0)
c000945e:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009464:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009468:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000946c:	d9 c0                	fld    st(0)
c000946e:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009474:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009478:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000947c:	d9 c0                	fld    st(0)
c000947e:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009484:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009488:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000948c:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009492:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009496:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000949a:	de c1                	faddp  st(1),st
c000949c:	0f 89 6b ff ff ff    	jns    c000940d <calc_output_hex+0x6b>
c00094a2:	d9 ee                	fldz   
c00094a4:	d9 ee                	fldz   
c00094a6:	89 d8                	mov    eax,ebx
c00094a8:	29 c8                	sub    eax,ecx
c00094aa:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00094ae:	89 c1                	mov    ecx,eax
c00094b0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00094b4:	29 c8                	sub    eax,ecx
c00094b6:	99                   	cdq    
c00094b7:	f7 fb                	idiv   ebx
c00094b9:	89 da                	mov    edx,ebx
c00094bb:	0f af d0             	imul   edx,eax
c00094be:	40                   	inc    eax
c00094bf:	01 d1                	add    ecx,edx
c00094c1:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c00094c6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00094ca:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c00094ce:	8d 14 87             	lea    edx,[edi+eax*4]
c00094d1:	d9 ee                	fldz   
c00094d3:	d9 ee                	fldz   
c00094d5:	d9 ca                	fxch   st(2)
c00094d7:	eb 08                	jmp    c00094e1 <calc_output_hex+0x13f>
c00094d9:	d9 cc                	fxch   st(4)
c00094db:	d9 cb                	fxch   st(3)
c00094dd:	d9 ca                	fxch   st(2)
c00094df:	d9 c9                	fxch   st(1)
c00094e1:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c00094e5:	89 c8                	mov    eax,ecx
c00094e7:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00094eb:	d9 ca                	fxch   st(2)
c00094ed:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094f1:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00094f5:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00094f9:	e8 a0 fa ff ff       	call   c0008f9e <fp_to_double>
c00094fe:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009502:	89 c8                	mov    eax,ecx
c0009504:	e8 8b fa ff ff       	call   c0008f94 <fp_to_int>
c0009509:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000950d:	29 d9                	sub    ecx,ebx
c000950f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009513:	83 ea 18             	sub    edx,0x18
c0009516:	d8 e1                	fsub   st,st(1)
c0009518:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000951c:	de c9                	fmulp  st(1),st
c000951e:	de c1                	faddp  st(1),st
c0009520:	d9 c0                	fld    st(0)
c0009522:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009528:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000952c:	de c1                	faddp  st(1),st
c000952e:	d9 c1                	fld    st(1)
c0009530:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009536:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c000953a:	de c1                	faddp  st(1),st
c000953c:	d9 c2                	fld    st(2)
c000953e:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009544:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009548:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000954c:	d9 c2                	fld    st(2)
c000954e:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009554:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009558:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000955c:	d9 c2                	fld    st(2)
c000955e:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009564:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009568:	de c1                	faddp  st(1),st
c000956a:	d9 cb                	fxch   st(3)
c000956c:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009572:	85 c9                	test   ecx,ecx
c0009574:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009578:	de c1                	faddp  st(1),st
c000957a:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000957e:	0f 8f 55 ff ff ff    	jg     c00094d9 <calc_output_hex+0x137>
c0009584:	d9 cb                	fxch   st(3)
c0009586:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000958a:	dc 0c 24             	fmul   QWORD PTR [esp]
c000958d:	d9 1e                	fstp   DWORD PTR [esi]
c000958f:	d9 c9                	fxch   st(1)
c0009591:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009595:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009598:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000959b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000959f:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00095a3:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095a6:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c00095a9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00095ad:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095b1:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095b4:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00095b7:	d9 ca                	fxch   st(2)
c00095b9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00095bd:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c0:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00095c3:	de c1                	faddp  st(1),st
c00095c5:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c8:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00095cb:	83 c4 7c             	add    esp,0x7c
c00095ce:	5b                   	pop    ebx
c00095cf:	5e                   	pop    esi
c00095d0:	5f                   	pop    edi
c00095d1:	5d                   	pop    ebp
c00095d2:	c3                   	ret    

c00095d3 <sinc_reset>:
c00095d3:	56                   	push   esi
c00095d4:	53                   	push   ebx
c00095d5:	51                   	push   ecx
c00095d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095da:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00095dd:	85 db                	test   ebx,ebx
c00095df:	74 51                	je     c0009632 <sinc_reset+0x5f>
c00095e1:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00095e8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00095ef:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00095f6:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00095fc:	d9 ee                	fldz   
c00095fe:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009601:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c0009604:	52                   	push   edx
c0009605:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009608:	c1 e0 02             	shl    eax,0x2
c000960b:	50                   	push   eax
c000960c:	6a 00                	push   0x0
c000960e:	56                   	push   esi
c000960f:	e8 f4 6f ff ff       	call   c0000608 <memset>
c0009614:	83 c4 0c             	add    esp,0xc
c0009617:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000961a:	c1 e0 02             	shl    eax,0x2
c000961d:	50                   	push   eax
c000961e:	68 aa 00 00 00       	push   0xaa
c0009623:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009626:	8d 04 86             	lea    eax,[esi+eax*4]
c0009629:	50                   	push   eax
c000962a:	e8 d9 6f ff ff       	call   c0000608 <memset>
c000962f:	83 c4 10             	add    esp,0x10
c0009632:	58                   	pop    eax
c0009633:	5b                   	pop    ebx
c0009634:	5e                   	pop    esi
c0009635:	c3                   	ret    

c0009636 <calc_output_multi>:
c0009636:	55                   	push   ebp
c0009637:	57                   	push   edi
c0009638:	8d 78 44             	lea    edi,[eax+0x44]
c000963b:	56                   	push   esi
c000963c:	89 c6                	mov    esi,eax
c000963e:	53                   	push   ebx
c000963f:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c0009645:	83 ec 4c             	sub    esp,0x4c
c0009648:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000964c:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0009650:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009654:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009658:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000965c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009660:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009663:	e8 28 f9 ff ff       	call   c0008f90 <int_to_fp>
c0009668:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c000966b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000966f:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009673:	99                   	cdq    
c0009674:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009678:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000967c:	0f af d0             	imul   edx,eax
c000967f:	0f af c3             	imul   eax,ebx
c0009682:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009686:	29 c5                	sub    ebp,eax
c0009688:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000968c:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0009690:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009697:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000969b:	52                   	push   edx
c000969c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096a0:	6a 00                	push   0x0
c00096a2:	57                   	push   edi
c00096a3:	e8 60 6f ff ff       	call   c0000608 <memset>
c00096a8:	83 c4 10             	add    esp,0x10
c00096ab:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096af:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00096b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096b7:	e8 e2 f8 ff ff       	call   c0008f9e <fp_to_double>
c00096bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096c0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00096c4:	e8 cb f8 ff ff       	call   c0008f94 <fp_to_int>
c00096c9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00096cc:	89 d9                	mov    ecx,ebx
c00096ce:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00096d1:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00096d5:	d8 e1                	fsub   st,st(1)
c00096d7:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096db:	de c9                	fmulp  st(1),st
c00096dd:	de c1                	faddp  st(1),st
c00096df:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00096e3:	89 c8                	mov    eax,ecx
c00096e5:	bd 08 00 00 00       	mov    ebp,0x8
c00096ea:	99                   	cdq    
c00096eb:	f7 fd                	idiv   ebp
c00096ed:	4a                   	dec    edx
c00096ee:	83 fa 06             	cmp    edx,0x6
c00096f1:	77 07                	ja     c00096fa <calc_output_multi+0xc4>
c00096f3:	ff 24 95 c0 ff 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0040]
c00096fa:	49                   	dec    ecx
c00096fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00096ff:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009702:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009709:	d9 c1                	fld    st(1)
c000970b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000970f:	dc 00                	fadd   QWORD PTR [eax]
c0009711:	dd 18                	fstp   QWORD PTR [eax]
c0009713:	49                   	dec    ecx
c0009714:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009718:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000971b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009722:	d9 c1                	fld    st(1)
c0009724:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009728:	dc 00                	fadd   QWORD PTR [eax]
c000972a:	dd 18                	fstp   QWORD PTR [eax]
c000972c:	49                   	dec    ecx
c000972d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009731:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009734:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000973b:	d9 c1                	fld    st(1)
c000973d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009741:	dc 00                	fadd   QWORD PTR [eax]
c0009743:	dd 18                	fstp   QWORD PTR [eax]
c0009745:	49                   	dec    ecx
c0009746:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000974a:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000974d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009754:	d9 c1                	fld    st(1)
c0009756:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000975a:	dc 00                	fadd   QWORD PTR [eax]
c000975c:	dd 18                	fstp   QWORD PTR [eax]
c000975e:	49                   	dec    ecx
c000975f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009763:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009766:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000976d:	d9 c1                	fld    st(1)
c000976f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009773:	dc 00                	fadd   QWORD PTR [eax]
c0009775:	dd 18                	fstp   QWORD PTR [eax]
c0009777:	49                   	dec    ecx
c0009778:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000977c:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000977f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009786:	d9 c1                	fld    st(1)
c0009788:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000978c:	dc 00                	fadd   QWORD PTR [eax]
c000978e:	dd 18                	fstp   QWORD PTR [eax]
c0009790:	49                   	dec    ecx
c0009791:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009795:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009798:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000979f:	d9 c1                	fld    st(1)
c00097a1:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097a5:	dc 00                	fadd   QWORD PTR [eax]
c00097a7:	dd 18                	fstp   QWORD PTR [eax]
c00097a9:	49                   	dec    ecx
c00097aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097ae:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097b1:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097b8:	d9 c1                	fld    st(1)
c00097ba:	85 c9                	test   ecx,ecx
c00097bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097c0:	dc 00                	fadd   QWORD PTR [eax]
c00097c2:	dd 18                	fstp   QWORD PTR [eax]
c00097c4:	0f 8f 19 ff ff ff    	jg     c00096e3 <calc_output_multi+0xad>
c00097ca:	dd d9                	fstp   st(1)
c00097cc:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c00097d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d4:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c00097d8:	0f 89 d1 fe ff ff    	jns    c00096af <calc_output_multi+0x79>
c00097de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097e2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00097e6:	89 d1                	mov    ecx,edx
c00097e8:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00097ec:	29 c8                	sub    eax,ecx
c00097ee:	99                   	cdq    
c00097ef:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c00097f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097f7:	0f af d0             	imul   edx,eax
c00097fa:	40                   	inc    eax
c00097fb:	01 d1                	add    ecx,edx
c00097fd:	0f af c3             	imul   eax,ebx
c0009800:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009804:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009807:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000980b:	50                   	push   eax
c000980c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009810:	6a 00                	push   0x0
c0009812:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009816:	e8 ed 6d ff ff       	call   c0000608 <memset>
c000981b:	83 c4 10             	add    esp,0x10
c000981e:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009822:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009826:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000982a:	e8 6f f7 ff ff       	call   c0008f9e <fp_to_double>
c000982f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009833:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009837:	e8 58 f7 ff ff       	call   c0008f94 <fp_to_int>
c000983c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000983f:	89 d9                	mov    ecx,ebx
c0009841:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009844:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009848:	d8 e1                	fsub   st,st(1)
c000984a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000984e:	de c9                	fmulp  st(1),st
c0009850:	de c1                	faddp  st(1),st
c0009852:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009856:	89 c8                	mov    eax,ecx
c0009858:	bd 08 00 00 00       	mov    ebp,0x8
c000985d:	99                   	cdq    
c000985e:	f7 fd                	idiv   ebp
c0009860:	4a                   	dec    edx
c0009861:	83 fa 06             	cmp    edx,0x6
c0009864:	77 07                	ja     c000986d <calc_output_multi+0x237>
c0009866:	ff 24 95 dc ff 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0024]
c000986d:	49                   	dec    ecx
c000986e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009872:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009876:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009879:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009880:	d9 c1                	fld    st(1)
c0009882:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009886:	dc 00                	fadd   QWORD PTR [eax]
c0009888:	dd 18                	fstp   QWORD PTR [eax]
c000988a:	49                   	dec    ecx
c000988b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000988f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009893:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009896:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000989d:	d9 c1                	fld    st(1)
c000989f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098a3:	dc 00                	fadd   QWORD PTR [eax]
c00098a5:	dd 18                	fstp   QWORD PTR [eax]
c00098a7:	49                   	dec    ecx
c00098a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098b0:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098b3:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098ba:	d9 c1                	fld    st(1)
c00098bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098c0:	dc 00                	fadd   QWORD PTR [eax]
c00098c2:	dd 18                	fstp   QWORD PTR [eax]
c00098c4:	49                   	dec    ecx
c00098c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098cd:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098d0:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098d7:	d9 c1                	fld    st(1)
c00098d9:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098dd:	dc 00                	fadd   QWORD PTR [eax]
c00098df:	dd 18                	fstp   QWORD PTR [eax]
c00098e1:	49                   	dec    ecx
c00098e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098ea:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098ed:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098f4:	d9 c1                	fld    st(1)
c00098f6:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098fa:	dc 00                	fadd   QWORD PTR [eax]
c00098fc:	dd 18                	fstp   QWORD PTR [eax]
c00098fe:	49                   	dec    ecx
c00098ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009903:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009907:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000990a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009911:	d9 c1                	fld    st(1)
c0009913:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009917:	dc 00                	fadd   QWORD PTR [eax]
c0009919:	dd 18                	fstp   QWORD PTR [eax]
c000991b:	49                   	dec    ecx
c000991c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009920:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009924:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009927:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000992e:	d9 c1                	fld    st(1)
c0009930:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009934:	dc 00                	fadd   QWORD PTR [eax]
c0009936:	dd 18                	fstp   QWORD PTR [eax]
c0009938:	49                   	dec    ecx
c0009939:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000993d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009941:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009944:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000994b:	d9 c1                	fld    st(1)
c000994d:	85 c9                	test   ecx,ecx
c000994f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009953:	dc 00                	fadd   QWORD PTR [eax]
c0009955:	dd 18                	fstp   QWORD PTR [eax]
c0009957:	0f 8f f9 fe ff ff    	jg     c0009856 <calc_output_multi+0x220>
c000995d:	dd d9                	fstp   st(1)
c000995f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009963:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009967:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c000996b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0009970:	0f 8f ac fe ff ff    	jg     c0009822 <calc_output_multi+0x1ec>
c0009976:	b9 08 00 00 00       	mov    ecx,0x8
c000997b:	89 d8                	mov    eax,ebx
c000997d:	99                   	cdq    
c000997e:	f7 f9                	idiv   ecx
c0009980:	4a                   	dec    edx
c0009981:	83 fa 06             	cmp    edx,0x6
c0009984:	77 07                	ja     c000998d <calc_output_multi+0x357>
c0009986:	ff 24 95 f8 ff 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0008]
c000998d:	4b                   	dec    ebx
c000998e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009992:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009995:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009998:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000999c:	d8 c9                	fmul   st,st(1)
c000999e:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099a1:	4b                   	dec    ebx
c00099a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099a6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099a9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099b0:	d8 c9                	fmul   st,st(1)
c00099b2:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099b5:	4b                   	dec    ebx
c00099b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ba:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099bd:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099c0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099c4:	d8 c9                	fmul   st,st(1)
c00099c6:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099c9:	4b                   	dec    ebx
c00099ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ce:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099d1:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099d4:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099d8:	d8 c9                	fmul   st,st(1)
c00099da:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099dd:	4b                   	dec    ebx
c00099de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099e2:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099e5:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099e8:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099ec:	d8 c9                	fmul   st,st(1)
c00099ee:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099f1:	4b                   	dec    ebx
c00099f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099f6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099f9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099fc:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a00:	d8 c9                	fmul   st,st(1)
c0009a02:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a05:	4b                   	dec    ebx
c0009a06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a0a:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a0d:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a10:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a14:	d8 c9                	fmul   st,st(1)
c0009a16:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a19:	4b                   	dec    ebx
c0009a1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a1e:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a21:	85 db                	test   ebx,ebx
c0009a23:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a26:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a2a:	d8 c9                	fmul   st,st(1)
c0009a2c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a2f:	0f 8f 46 ff ff ff    	jg     c000997b <calc_output_multi+0x345>
c0009a35:	dd d8                	fstp   st(0)
c0009a37:	83 c4 4c             	add    esp,0x4c
c0009a3a:	5b                   	pop    ebx
c0009a3b:	5e                   	pop    esi
c0009a3c:	5f                   	pop    edi
c0009a3d:	5d                   	pop    ebp
c0009a3e:	c3                   	ret    

c0009a3f <double_to_fp>:
c0009a3f:	d9 05 4c 01 02 c0    	fld    DWORD PTR ds:0xc002014c
c0009a45:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009a49:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009a4d:	e9 be 4d 01 00       	jmp    c001e810 <lrint>

c0009a52 <fmod_one>:
c0009a52:	83 ec 2c             	sub    esp,0x2c
c0009a55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a65:	83 ec 08             	sub    esp,0x8
c0009a68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a70:	e8 9b 4d 01 00       	call   c001e810 <lrint>
c0009a75:	83 c4 10             	add    esp,0x10
c0009a78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a7c:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009a80:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009a84:	de e1                	fsubrp st(1),st
c0009a86:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009a8a:	d9 ee                	fldz   
c0009a8c:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009a90:	df e0                	fnstsw ax
c0009a92:	f6 c4 45             	test   ah,0x45
c0009a95:	75 0a                	jne    c0009aa1 <fmod_one+0x4f>
c0009a97:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009a9b:	d9 e8                	fld1   
c0009a9d:	de c1                	faddp  st(1),st
c0009a9f:	eb 04                	jmp    c0009aa5 <fmod_one+0x53>
c0009aa1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009aa5:	83 c4 2c             	add    esp,0x2c
c0009aa8:	c3                   	ret    

c0009aa9 <prepare_data>:
c0009aa9:	55                   	push   ebp
c0009aaa:	57                   	push   edi
c0009aab:	56                   	push   esi
c0009aac:	53                   	push   ebx
c0009aad:	83 ec 1c             	sub    esp,0x1c
c0009ab0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009ab4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009ab8:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009abc:	0f 89 57 01 00 00    	jns    c0009c19 <prepare_data+0x170>
c0009ac2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009ac5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ac8:	85 d2                	test   edx,edx
c0009aca:	75 0d                	jne    c0009ad9 <prepare_data+0x30>
c0009acc:	8d 14 36             	lea    edx,[esi+esi*1]
c0009acf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009ad2:	29 d0                	sub    eax,edx
c0009ad4:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ad7:	eb 44                	jmp    c0009b1d <prepare_data+0x74>
c0009ad9:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009adc:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009adf:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009ae2:	39 c1                	cmp    ecx,eax
c0009ae4:	7d 04                	jge    c0009aea <prepare_data+0x41>
c0009ae6:	29 d0                	sub    eax,edx
c0009ae8:	eb 2d                	jmp    c0009b17 <prepare_data+0x6e>
c0009aea:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009af0:	29 d7                	sub    edi,edx
c0009af2:	01 f7                	add    edi,esi
c0009af4:	51                   	push   ecx
c0009af5:	29 f2                	sub    edx,esi
c0009af7:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009afe:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b01:	51                   	push   ecx
c0009b02:	52                   	push   edx
c0009b03:	50                   	push   eax
c0009b04:	e8 91 6a ff ff       	call   c000059a <memmove>
c0009b09:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b0c:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b0f:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009b12:	29 f0                	sub    eax,esi
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	29 f0                	sub    eax,esi
c0009b19:	79 02                	jns    c0009b1d <prepare_data+0x74>
c0009b1b:	31 c0                	xor    eax,eax
c0009b1d:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009b20:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009b23:	29 ef                	sub    edi,ebp
c0009b25:	39 c7                	cmp    edi,eax
c0009b27:	7e 02                	jle    c0009b2b <prepare_data+0x82>
c0009b29:	89 c7                	mov    edi,eax
c0009b2b:	89 f8                	mov    eax,edi
c0009b2d:	99                   	cdq    
c0009b2e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009b31:	b8 15 00 00 00       	mov    eax,0x15
c0009b36:	29 d7                	sub    edi,edx
c0009b38:	0f 88 dd 00 00 00    	js     c0009c1b <prepare_data+0x172>
c0009b3e:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009b41:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009b44:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009b47:	0f 8f ce 00 00 00    	jg     c0009c1b <prepare_data+0x172>
c0009b4d:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009b53:	50                   	push   eax
c0009b54:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009b5b:	50                   	push   eax
c0009b5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b62:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009b65:	50                   	push   eax
c0009b66:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009b69:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009b6d:	50                   	push   eax
c0009b6e:	e8 5f 6a ff ff       	call   c00005d2 <memcpy>
c0009b73:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009b76:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009b79:	01 fd                	add    ebp,edi
c0009b7b:	01 f9                	add    ecx,edi
c0009b7d:	83 c4 10             	add    esp,0x10
c0009b80:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009b83:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009b86:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009b89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b8d:	0f 85 86 00 00 00    	jne    c0009c19 <prepare_data+0x170>
c0009b93:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009b96:	89 e8                	mov    eax,ebp
c0009b98:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009b9b:	29 c8                	sub    eax,ecx
c0009b9d:	39 f8                	cmp    eax,edi
c0009b9f:	7d 78                	jge    c0009c19 <prepare_data+0x170>
c0009ba1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009ba5:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009ba9:	74 6e                	je     c0009c19 <prepare_data+0x170>
c0009bab:	8d 7e 04             	lea    edi,[esi+0x4]
c0009bae:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009bb2:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009bb5:	29 ef                	sub    edi,ebp
c0009bb7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009bbb:	7c 29                	jl     c0009be6 <prepare_data+0x13d>
c0009bbd:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bc0:	29 f1                	sub    ecx,esi
c0009bc2:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009bc9:	55                   	push   ebp
c0009bca:	50                   	push   eax
c0009bcb:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bce:	50                   	push   eax
c0009bcf:	52                   	push   edx
c0009bd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009bd4:	e8 c1 69 ff ff       	call   c000059a <memmove>
c0009bd9:	83 c4 10             	add    esp,0x10
c0009bdc:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bdf:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009be2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009be6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009be9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009bec:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009bef:	83 c6 05             	add    esi,0x5
c0009bf2:	78 07                	js     c0009bfb <prepare_data+0x152>
c0009bf4:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bf7:	39 cf                	cmp    edi,ecx
c0009bf9:	7e 04                	jle    c0009bff <prepare_data+0x156>
c0009bfb:	89 ce                	mov    esi,ecx
c0009bfd:	29 c6                	sub    esi,eax
c0009bff:	8d 04 82             	lea    eax,[edx+eax*4]
c0009c02:	51                   	push   ecx
c0009c03:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c0a:	51                   	push   ecx
c0009c0b:	6a 00                	push   0x0
c0009c0d:	50                   	push   eax
c0009c0e:	e8 f5 69 ff ff       	call   c0000608 <memset>
c0009c13:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009c16:	83 c4 10             	add    esp,0x10
c0009c19:	31 c0                	xor    eax,eax
c0009c1b:	83 c4 1c             	add    esp,0x1c
c0009c1e:	5b                   	pop    ebx
c0009c1f:	5e                   	pop    esi
c0009c20:	5f                   	pop    edi
c0009c21:	5d                   	pop    ebp
c0009c22:	c3                   	ret    

c0009c23 <sinc_multichan_vari_process>:
c0009c23:	55                   	push   ebp
c0009c24:	b8 05 00 00 00       	mov    eax,0x5
c0009c29:	57                   	push   edi
c0009c2a:	56                   	push   esi
c0009c2b:	53                   	push   ebx
c0009c2c:	83 ec 3c             	sub    esp,0x3c
c0009c2f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009c33:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009c37:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009c3a:	85 db                	test   ebx,ebx
c0009c3c:	0f 84 5d 02 00 00    	je     c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c42:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009c45:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009c48:	0f af d0             	imul   edx,eax
c0009c4b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009c4e:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009c52:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009c59:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009c5c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009c63:	dd 06                	fld    QWORD PTR [esi]
c0009c65:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009c69:	55                   	push   ebp
c0009c6a:	55                   	push   ebp
c0009c6b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009c6e:	e8 d9 f2 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009c73:	89 c2                	mov    edx,eax
c0009c75:	58                   	pop    eax
c0009c76:	85 d2                	test   edx,edx
c0009c78:	59                   	pop    ecx
c0009c79:	b8 16 00 00 00       	mov    eax,0x16
c0009c7e:	0f 85 1b 02 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c84:	d9 05 50 01 02 c0    	fld    DWORD PTR ds:0xc0020150
c0009c8a:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009c8d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009c90:	dd 06                	fld    QWORD PTR [esi]
c0009c92:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009c95:	d8 d1                	fcom   st(1)
c0009c97:	df e0                	fnstsw ax
c0009c99:	9e                   	sahf   
c0009c9a:	76 0f                	jbe    c0009cab <sinc_multichan_vari_process+0x88>
c0009c9c:	dd d8                	fstp   st(0)
c0009c9e:	d9 e8                	fld1   
c0009ca0:	d8 d9                	fcomp  st(1)
c0009ca2:	df e0                	fnstsw ax
c0009ca4:	9e                   	sahf   
c0009ca5:	77 0f                	ja     c0009cb6 <sinc_multichan_vari_process+0x93>
c0009ca7:	dd d8                	fstp   st(0)
c0009ca9:	eb 11                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cab:	dd d9                	fstp   st(1)
c0009cad:	d9 e8                	fld1   
c0009caf:	d8 d9                	fcomp  st(1)
c0009cb1:	df e0                	fnstsw ax
c0009cb3:	9e                   	sahf   
c0009cb4:	76 04                	jbe    c0009cba <sinc_multichan_vari_process+0x97>
c0009cb6:	de f9                	fdivp  st(1),st
c0009cb8:	eb 02                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cba:	dd d8                	fstp   st(0)
c0009cbc:	83 ec 10             	sub    esp,0x10
c0009cbf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cc5:	e8 46 4b 01 00       	call   c001e810 <lrint>
c0009cca:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009ccd:	40                   	inc    eax
c0009cce:	dd 14 24             	fst    QWORD PTR [esp]
c0009cd1:	0f af c5             	imul   eax,ebp
c0009cd4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009cd8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009cdc:	e8 71 fd ff ff       	call   c0009a52 <fmod_one>
c0009ce1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ce4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009ce8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ceb:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009cef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cf3:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009cf7:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cfa:	e8 11 4b 01 00       	call   c001e810 <lrint>
c0009cff:	0f af e8             	imul   ebp,eax
c0009d02:	d9 e8                	fld1   
c0009d04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009d08:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d0c:	01 e8                	add    eax,ebp
c0009d0e:	dc 05 b8 ff 01 c0    	fadd   QWORD PTR ds:0xc001ffb8
c0009d14:	99                   	cdq    
c0009d15:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d19:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009d1c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009d1f:	83 c4 10             	add    esp,0x10
c0009d22:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009d25:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009d28:	7d 4b                	jge    c0009d75 <sinc_multichan_vari_process+0x152>
c0009d2a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d2d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d30:	01 c8                	add    eax,ecx
c0009d32:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d35:	99                   	cdq    
c0009d36:	f7 f9                	idiv   ecx
c0009d38:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d3c:	7d 09                	jge    c0009d47 <sinc_multichan_vari_process+0x124>
c0009d3e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009d41:	85 c0                	test   eax,eax
c0009d43:	79 57                	jns    c0009d9c <sinc_multichan_vari_process+0x179>
c0009d45:	eb 70                	jmp    c0009db7 <sinc_multichan_vari_process+0x194>
c0009d47:	51                   	push   ecx
c0009d48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d4c:	57                   	push   edi
c0009d4d:	53                   	push   ebx
c0009d4e:	e8 56 fd ff ff       	call   c0009aa9 <prepare_data>
c0009d53:	83 c4 10             	add    esp,0x10
c0009d56:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009d59:	85 c0                	test   eax,eax
c0009d5b:	0f 85 3e 01 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d61:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d64:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d67:	01 c8                	add    eax,ecx
c0009d69:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d6c:	99                   	cdq    
c0009d6d:	f7 f9                	idiv   ecx
c0009d6f:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d73:	7c c9                	jl     c0009d3e <sinc_multichan_vari_process+0x11b>
c0009d75:	dd 04 24             	fld    QWORD PTR [esp]
c0009d78:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009d7b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009d7f:	dd 1e                	fstp   QWORD PTR [esi]
c0009d81:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009d84:	99                   	cdq    
c0009d85:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d88:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009d8b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009d8e:	99                   	cdq    
c0009d8f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d92:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009d95:	31 c0                	xor    eax,eax
c0009d97:	e9 03 01 00 00       	jmp    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da0:	dd 04 24             	fld    QWORD PTR [esp]
c0009da3:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009da6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009daa:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009dae:	d9 c9                	fxch   st(1)
c0009db0:	de d9                	fcompp 
c0009db2:	df e0                	fnstsw ax
c0009db4:	9e                   	sahf   
c0009db5:	73 be                	jae    c0009d75 <sinc_multichan_vari_process+0x152>
c0009db7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009dbb:	7e 31                	jle    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009dbd:	83 ec 10             	sub    esp,0x10
c0009dc0:	dd 06                	fld    QWORD PTR [esi]
c0009dc2:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009dc8:	e8 23 4a 01 00       	call   c001e7f0 <fabs>
c0009dcd:	83 c4 10             	add    esp,0x10
c0009dd0:	dc 1d 40 01 02 c0    	fcomp  QWORD PTR ds:0xc0020140
c0009dd6:	df e0                	fnstsw ax
c0009dd8:	9e                   	sahf   
c0009dd9:	76 13                	jbe    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009ddb:	dd 06                	fld    QWORD PTR [esi]
c0009ddd:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009de0:	d8 e1                	fsub   st,st(1)
c0009de2:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009de5:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009de8:	de c1                	faddp  st(1),st
c0009dea:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009dee:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009df1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009df5:	d9 e8                	fld1   
c0009df7:	d8 d9                	fcomp  st(1)
c0009df9:	df e0                	fnstsw ax
c0009dfb:	9e                   	sahf   
c0009dfc:	77 04                	ja     c0009e02 <sinc_multichan_vari_process+0x1df>
c0009dfe:	dd d8                	fstp   st(0)
c0009e00:	d9 e8                	fld1   
c0009e02:	de c9                	fmulp  st(1),st
c0009e04:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e08:	50                   	push   eax
c0009e09:	50                   	push   eax
c0009e0a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e12:	e8 28 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e17:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009e1b:	89 c5                	mov    ebp,eax
c0009e1d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009e21:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e24:	e8 16 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e29:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009e2c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009e2f:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009e32:	89 c1                	mov    ecx,eax
c0009e34:	52                   	push   edx
c0009e35:	89 d8                	mov    eax,ebx
c0009e37:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009e3b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009e3e:	52                   	push   edx
c0009e3f:	52                   	push   edx
c0009e40:	89 ea                	mov    edx,ebp
c0009e42:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009e48:	e8 e9 f7 ff ff       	call   c0009636 <calc_output_multi>
c0009e4d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009e50:	d9 e8                	fld1   
c0009e52:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009e55:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009e59:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e5d:	83 c4 10             	add    esp,0x10
c0009e60:	dd 14 24             	fst    QWORD PTR [esp]
c0009e63:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009e67:	e8 e6 fb ff ff       	call   c0009a52 <fmod_one>
c0009e6c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009e6f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009e73:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009e76:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009e7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e7e:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009e82:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e85:	e8 86 49 01 00       	call   c001e810 <lrint>
c0009e8a:	0f af e8             	imul   ebp,eax
c0009e8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009e91:	01 e8                	add    eax,ebp
c0009e93:	99                   	cdq    
c0009e94:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009e97:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009e9a:	e9 80 fe ff ff       	jmp    c0009d1f <sinc_multichan_vari_process+0xfc>
c0009e9f:	83 c4 3c             	add    esp,0x3c
c0009ea2:	5b                   	pop    ebx
c0009ea3:	5e                   	pop    esi
c0009ea4:	5f                   	pop    edi
c0009ea5:	5d                   	pop    ebp
c0009ea6:	c3                   	ret    

c0009ea7 <sinc_hex_vari_process>:
c0009ea7:	55                   	push   ebp
c0009ea8:	b8 05 00 00 00       	mov    eax,0x5
c0009ead:	57                   	push   edi
c0009eae:	56                   	push   esi
c0009eaf:	53                   	push   ebx
c0009eb0:	83 ec 3c             	sub    esp,0x3c
c0009eb3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009eb7:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009ebb:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009ebe:	85 db                	test   ebx,ebx
c0009ec0:	0f 84 58 02 00 00    	je     c000a11e <sinc_hex_vari_process+0x277>
c0009ec6:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009ec9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009ecc:	0f af d0             	imul   edx,eax
c0009ecf:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009ed2:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ed6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009edd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009ee0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009ee7:	dd 06                	fld    QWORD PTR [esi]
c0009ee9:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009eed:	55                   	push   ebp
c0009eee:	55                   	push   ebp
c0009eef:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ef2:	e8 55 f0 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009ef7:	89 c2                	mov    edx,eax
c0009ef9:	58                   	pop    eax
c0009efa:	85 d2                	test   edx,edx
c0009efc:	59                   	pop    ecx
c0009efd:	b8 16 00 00 00       	mov    eax,0x16
c0009f02:	0f 85 16 02 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009f08:	d9 05 50 01 02 c0    	fld    DWORD PTR ds:0xc0020150
c0009f0e:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009f11:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009f14:	dd 06                	fld    QWORD PTR [esi]
c0009f16:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009f19:	d8 d1                	fcom   st(1)
c0009f1b:	df e0                	fnstsw ax
c0009f1d:	9e                   	sahf   
c0009f1e:	76 0f                	jbe    c0009f2f <sinc_hex_vari_process+0x88>
c0009f20:	dd d8                	fstp   st(0)
c0009f22:	d9 e8                	fld1   
c0009f24:	d8 d9                	fcomp  st(1)
c0009f26:	df e0                	fnstsw ax
c0009f28:	9e                   	sahf   
c0009f29:	77 0f                	ja     c0009f3a <sinc_hex_vari_process+0x93>
c0009f2b:	dd d8                	fstp   st(0)
c0009f2d:	eb 11                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f2f:	dd d9                	fstp   st(1)
c0009f31:	d9 e8                	fld1   
c0009f33:	d8 d9                	fcomp  st(1)
c0009f35:	df e0                	fnstsw ax
c0009f37:	9e                   	sahf   
c0009f38:	76 04                	jbe    c0009f3e <sinc_hex_vari_process+0x97>
c0009f3a:	de f9                	fdivp  st(1),st
c0009f3c:	eb 02                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f3e:	dd d8                	fstp   st(0)
c0009f40:	83 ec 10             	sub    esp,0x10
c0009f43:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f46:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f49:	e8 c2 48 01 00       	call   c001e810 <lrint>
c0009f4e:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009f51:	40                   	inc    eax
c0009f52:	dd 14 24             	fst    QWORD PTR [esp]
c0009f55:	0f af c5             	imul   eax,ebp
c0009f58:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f5c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009f60:	e8 ed fa ff ff       	call   c0009a52 <fmod_one>
c0009f65:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f68:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f6c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f6f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009f73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f77:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f7b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f7e:	e8 8d 48 01 00       	call   c001e810 <lrint>
c0009f83:	0f af e8             	imul   ebp,eax
c0009f86:	d9 e8                	fld1   
c0009f88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f8c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009f90:	01 e8                	add    eax,ebp
c0009f92:	dc 05 b8 ff 01 c0    	fadd   QWORD PTR ds:0xc001ffb8
c0009f98:	99                   	cdq    
c0009f99:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f9d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009fa0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009fa3:	83 c4 10             	add    esp,0x10
c0009fa6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009fa9:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009fac:	7d 4b                	jge    c0009ff9 <sinc_hex_vari_process+0x152>
c0009fae:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009fb4:	01 c8                	add    eax,ecx
c0009fb6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009fb9:	99                   	cdq    
c0009fba:	f7 f9                	idiv   ecx
c0009fbc:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009fc0:	7d 09                	jge    c0009fcb <sinc_hex_vari_process+0x124>
c0009fc2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009fc5:	85 c0                	test   eax,eax
c0009fc7:	79 57                	jns    c000a020 <sinc_hex_vari_process+0x179>
c0009fc9:	eb 70                	jmp    c000a03b <sinc_hex_vari_process+0x194>
c0009fcb:	51                   	push   ecx
c0009fcc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009fd0:	57                   	push   edi
c0009fd1:	53                   	push   ebx
c0009fd2:	e8 d2 fa ff ff       	call   c0009aa9 <prepare_data>
c0009fd7:	83 c4 10             	add    esp,0x10
c0009fda:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009fdd:	85 c0                	test   eax,eax
c0009fdf:	0f 85 39 01 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009fe5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fe8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009feb:	01 c8                	add    eax,ecx
c0009fed:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009ff0:	99                   	cdq    
c0009ff1:	f7 f9                	idiv   ecx
c0009ff3:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009ff7:	7c c9                	jl     c0009fc2 <sinc_hex_vari_process+0x11b>
c0009ff9:	dd 04 24             	fld    QWORD PTR [esp]
c0009ffc:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009fff:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a003:	dd 1e                	fstp   QWORD PTR [esi]
c000a005:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a008:	99                   	cdq    
c000a009:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a00c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a00f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a012:	99                   	cdq    
c000a013:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a016:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a019:	31 c0                	xor    eax,eax
c000a01b:	e9 fe 00 00 00       	jmp    c000a11e <sinc_hex_vari_process+0x277>
c000a020:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a024:	dd 04 24             	fld    QWORD PTR [esp]
c000a027:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a02a:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a02e:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a032:	d9 c9                	fxch   st(1)
c000a034:	de d9                	fcompp 
c000a036:	df e0                	fnstsw ax
c000a038:	9e                   	sahf   
c000a039:	73 be                	jae    c0009ff9 <sinc_hex_vari_process+0x152>
c000a03b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a03f:	7e 31                	jle    c000a072 <sinc_hex_vari_process+0x1cb>
c000a041:	83 ec 10             	sub    esp,0x10
c000a044:	dd 06                	fld    QWORD PTR [esi]
c000a046:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a049:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a04c:	e8 9f 47 01 00       	call   c001e7f0 <fabs>
c000a051:	83 c4 10             	add    esp,0x10
c000a054:	dc 1d 40 01 02 c0    	fcomp  QWORD PTR ds:0xc0020140
c000a05a:	df e0                	fnstsw ax
c000a05c:	9e                   	sahf   
c000a05d:	76 13                	jbe    c000a072 <sinc_hex_vari_process+0x1cb>
c000a05f:	dd 06                	fld    QWORD PTR [esi]
c000a061:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a064:	d8 e1                	fsub   st,st(1)
c000a066:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a069:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a06c:	de c1                	faddp  st(1),st
c000a06e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a072:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a075:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a079:	d9 e8                	fld1   
c000a07b:	d8 d9                	fcomp  st(1)
c000a07d:	df e0                	fnstsw ax
c000a07f:	9e                   	sahf   
c000a080:	77 04                	ja     c000a086 <sinc_hex_vari_process+0x1df>
c000a082:	dd d8                	fstp   st(0)
c000a084:	d9 e8                	fld1   
c000a086:	de c9                	fmulp  st(1),st
c000a088:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a08c:	50                   	push   eax
c000a08d:	50                   	push   eax
c000a08e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a092:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a096:	e8 a4 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a09b:	89 c5                	mov    ebp,eax
c000a09d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a0a1:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a0a5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0a8:	e8 92 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a0ad:	83 c4 0c             	add    esp,0xc
c000a0b0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a0b3:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a0b6:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a0b9:	89 c1                	mov    ecx,eax
c000a0bb:	52                   	push   edx
c000a0bc:	89 d8                	mov    eax,ebx
c000a0be:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a0c2:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a0c5:	52                   	push   edx
c000a0c6:	52                   	push   edx
c000a0c7:	89 ea                	mov    edx,ebp
c000a0c9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0cc:	e8 d1 f2 ff ff       	call   c00093a2 <calc_output_hex>
c000a0d1:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a0d5:	d9 e8                	fld1   
c000a0d7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a0db:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a0df:	dd 14 24             	fst    QWORD PTR [esp]
c000a0e2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a0e6:	e8 67 f9 ff ff       	call   c0009a52 <fmod_one>
c000a0eb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a0ee:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a0f2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a0f5:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a0f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a0fd:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a101:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a104:	e8 07 47 01 00       	call   c001e810 <lrint>
c000a109:	0f af e8             	imul   ebp,eax
c000a10c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a110:	01 e8                	add    eax,ebp
c000a112:	99                   	cdq    
c000a113:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a116:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a119:	e9 85 fe ff ff       	jmp    c0009fa3 <sinc_hex_vari_process+0xfc>
c000a11e:	83 c4 3c             	add    esp,0x3c
c000a121:	5b                   	pop    ebx
c000a122:	5e                   	pop    esi
c000a123:	5f                   	pop    edi
c000a124:	5d                   	pop    ebp
c000a125:	c3                   	ret    

c000a126 <sinc_quad_vari_process>:
c000a126:	55                   	push   ebp
c000a127:	b8 05 00 00 00       	mov    eax,0x5
c000a12c:	57                   	push   edi
c000a12d:	56                   	push   esi
c000a12e:	53                   	push   ebx
c000a12f:	83 ec 3c             	sub    esp,0x3c
c000a132:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a136:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a13a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a13d:	85 db                	test   ebx,ebx
c000a13f:	0f 84 58 02 00 00    	je     c000a39d <sinc_quad_vari_process+0x277>
c000a145:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a148:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a14b:	0f af d0             	imul   edx,eax
c000a14e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a151:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a155:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a15c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a15f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a166:	dd 06                	fld    QWORD PTR [esi]
c000a168:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a16c:	55                   	push   ebp
c000a16d:	55                   	push   ebp
c000a16e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a171:	e8 d6 ed ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a176:	89 c2                	mov    edx,eax
c000a178:	58                   	pop    eax
c000a179:	85 d2                	test   edx,edx
c000a17b:	59                   	pop    ecx
c000a17c:	b8 16 00 00 00       	mov    eax,0x16
c000a181:	0f 85 16 02 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a187:	d9 05 50 01 02 c0    	fld    DWORD PTR ds:0xc0020150
c000a18d:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a190:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a193:	dd 06                	fld    QWORD PTR [esi]
c000a195:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a198:	d8 d1                	fcom   st(1)
c000a19a:	df e0                	fnstsw ax
c000a19c:	9e                   	sahf   
c000a19d:	76 0f                	jbe    c000a1ae <sinc_quad_vari_process+0x88>
c000a19f:	dd d8                	fstp   st(0)
c000a1a1:	d9 e8                	fld1   
c000a1a3:	d8 d9                	fcomp  st(1)
c000a1a5:	df e0                	fnstsw ax
c000a1a7:	9e                   	sahf   
c000a1a8:	77 0f                	ja     c000a1b9 <sinc_quad_vari_process+0x93>
c000a1aa:	dd d8                	fstp   st(0)
c000a1ac:	eb 11                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1ae:	dd d9                	fstp   st(1)
c000a1b0:	d9 e8                	fld1   
c000a1b2:	d8 d9                	fcomp  st(1)
c000a1b4:	df e0                	fnstsw ax
c000a1b6:	9e                   	sahf   
c000a1b7:	76 04                	jbe    c000a1bd <sinc_quad_vari_process+0x97>
c000a1b9:	de f9                	fdivp  st(1),st
c000a1bb:	eb 02                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1bd:	dd d8                	fstp   st(0)
c000a1bf:	83 ec 10             	sub    esp,0x10
c000a1c2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1c5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1c8:	e8 43 46 01 00       	call   c001e810 <lrint>
c000a1cd:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a1d0:	40                   	inc    eax
c000a1d1:	dd 14 24             	fst    QWORD PTR [esp]
c000a1d4:	0f af c5             	imul   eax,ebp
c000a1d7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a1db:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a1df:	e8 6e f8 ff ff       	call   c0009a52 <fmod_one>
c000a1e4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a1e7:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a1eb:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1ee:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a1f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1f6:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a1fa:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1fd:	e8 0e 46 01 00       	call   c001e810 <lrint>
c000a202:	0f af e8             	imul   ebp,eax
c000a205:	d9 e8                	fld1   
c000a207:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a20b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a20f:	01 e8                	add    eax,ebp
c000a211:	dc 05 b8 ff 01 c0    	fadd   QWORD PTR ds:0xc001ffb8
c000a217:	99                   	cdq    
c000a218:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a21c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a21f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a222:	83 c4 10             	add    esp,0x10
c000a225:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a228:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a22b:	7d 4b                	jge    c000a278 <sinc_quad_vari_process+0x152>
c000a22d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a230:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a233:	01 c8                	add    eax,ecx
c000a235:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a238:	99                   	cdq    
c000a239:	f7 f9                	idiv   ecx
c000a23b:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a23f:	7d 09                	jge    c000a24a <sinc_quad_vari_process+0x124>
c000a241:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a244:	85 c0                	test   eax,eax
c000a246:	79 57                	jns    c000a29f <sinc_quad_vari_process+0x179>
c000a248:	eb 70                	jmp    c000a2ba <sinc_quad_vari_process+0x194>
c000a24a:	51                   	push   ecx
c000a24b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a24f:	57                   	push   edi
c000a250:	53                   	push   ebx
c000a251:	e8 53 f8 ff ff       	call   c0009aa9 <prepare_data>
c000a256:	83 c4 10             	add    esp,0x10
c000a259:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a25c:	85 c0                	test   eax,eax
c000a25e:	0f 85 39 01 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a264:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a267:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a26a:	01 c8                	add    eax,ecx
c000a26c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a26f:	99                   	cdq    
c000a270:	f7 f9                	idiv   ecx
c000a272:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a276:	7c c9                	jl     c000a241 <sinc_quad_vari_process+0x11b>
c000a278:	dd 04 24             	fld    QWORD PTR [esp]
c000a27b:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a27e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a282:	dd 1e                	fstp   QWORD PTR [esi]
c000a284:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a287:	99                   	cdq    
c000a288:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a28b:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a28e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a291:	99                   	cdq    
c000a292:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a295:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a298:	31 c0                	xor    eax,eax
c000a29a:	e9 fe 00 00 00       	jmp    c000a39d <sinc_quad_vari_process+0x277>
c000a29f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a2a3:	dd 04 24             	fld    QWORD PTR [esp]
c000a2a6:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a2a9:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a2ad:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a2b1:	d9 c9                	fxch   st(1)
c000a2b3:	de d9                	fcompp 
c000a2b5:	df e0                	fnstsw ax
c000a2b7:	9e                   	sahf   
c000a2b8:	73 be                	jae    c000a278 <sinc_quad_vari_process+0x152>
c000a2ba:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a2be:	7e 31                	jle    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2c0:	83 ec 10             	sub    esp,0x10
c000a2c3:	dd 06                	fld    QWORD PTR [esi]
c000a2c5:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a2c8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2cb:	e8 20 45 01 00       	call   c001e7f0 <fabs>
c000a2d0:	83 c4 10             	add    esp,0x10
c000a2d3:	dc 1d 40 01 02 c0    	fcomp  QWORD PTR ds:0xc0020140
c000a2d9:	df e0                	fnstsw ax
c000a2db:	9e                   	sahf   
c000a2dc:	76 13                	jbe    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2de:	dd 06                	fld    QWORD PTR [esi]
c000a2e0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a2e3:	d8 e1                	fsub   st,st(1)
c000a2e5:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a2e8:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a2eb:	de c1                	faddp  st(1),st
c000a2ed:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a2f1:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a2f4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a2f8:	d9 e8                	fld1   
c000a2fa:	d8 d9                	fcomp  st(1)
c000a2fc:	df e0                	fnstsw ax
c000a2fe:	9e                   	sahf   
c000a2ff:	77 04                	ja     c000a305 <sinc_quad_vari_process+0x1df>
c000a301:	dd d8                	fstp   st(0)
c000a303:	d9 e8                	fld1   
c000a305:	de c9                	fmulp  st(1),st
c000a307:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a30b:	50                   	push   eax
c000a30c:	50                   	push   eax
c000a30d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a311:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a315:	e8 25 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a31a:	89 c5                	mov    ebp,eax
c000a31c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a320:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a324:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a327:	e8 13 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a32c:	83 c4 0c             	add    esp,0xc
c000a32f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a332:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a335:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a338:	89 c1                	mov    ecx,eax
c000a33a:	52                   	push   edx
c000a33b:	89 d8                	mov    eax,ebx
c000a33d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a341:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a344:	52                   	push   edx
c000a345:	52                   	push   edx
c000a346:	89 ea                	mov    edx,ebp
c000a348:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a34b:	e8 8d ee ff ff       	call   c00091dd <calc_output_quad>
c000a350:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a354:	d9 e8                	fld1   
c000a356:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a35a:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a35e:	dd 14 24             	fst    QWORD PTR [esp]
c000a361:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a365:	e8 e8 f6 ff ff       	call   c0009a52 <fmod_one>
c000a36a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a36d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a371:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a374:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a37c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a380:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a383:	e8 88 44 01 00       	call   c001e810 <lrint>
c000a388:	0f af e8             	imul   ebp,eax
c000a38b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a38f:	01 e8                	add    eax,ebp
c000a391:	99                   	cdq    
c000a392:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a395:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a398:	e9 85 fe ff ff       	jmp    c000a222 <sinc_quad_vari_process+0xfc>
c000a39d:	83 c4 3c             	add    esp,0x3c
c000a3a0:	5b                   	pop    ebx
c000a3a1:	5e                   	pop    esi
c000a3a2:	5f                   	pop    edi
c000a3a3:	5d                   	pop    ebp
c000a3a4:	c3                   	ret    

c000a3a5 <sinc_stereo_vari_process>:
c000a3a5:	55                   	push   ebp
c000a3a6:	b8 05 00 00 00       	mov    eax,0x5
c000a3ab:	57                   	push   edi
c000a3ac:	56                   	push   esi
c000a3ad:	53                   	push   ebx
c000a3ae:	83 ec 3c             	sub    esp,0x3c
c000a3b1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a3b5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a3b9:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a3bc:	85 db                	test   ebx,ebx
c000a3be:	0f 84 58 02 00 00    	je     c000a61c <sinc_stereo_vari_process+0x277>
c000a3c4:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a3c7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a3ca:	0f af d0             	imul   edx,eax
c000a3cd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a3d0:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a3d4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a3db:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a3de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a3e5:	dd 06                	fld    QWORD PTR [esi]
c000a3e7:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a3eb:	55                   	push   ebp
c000a3ec:	55                   	push   ebp
c000a3ed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3f0:	e8 57 eb ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a3f5:	89 c2                	mov    edx,eax
c000a3f7:	58                   	pop    eax
c000a3f8:	85 d2                	test   edx,edx
c000a3fa:	59                   	pop    ecx
c000a3fb:	b8 16 00 00 00       	mov    eax,0x16
c000a400:	0f 85 16 02 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a406:	d9 05 50 01 02 c0    	fld    DWORD PTR ds:0xc0020150
c000a40c:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a40f:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a412:	dd 06                	fld    QWORD PTR [esi]
c000a414:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a417:	d8 d1                	fcom   st(1)
c000a419:	df e0                	fnstsw ax
c000a41b:	9e                   	sahf   
c000a41c:	76 0f                	jbe    c000a42d <sinc_stereo_vari_process+0x88>
c000a41e:	dd d8                	fstp   st(0)
c000a420:	d9 e8                	fld1   
c000a422:	d8 d9                	fcomp  st(1)
c000a424:	df e0                	fnstsw ax
c000a426:	9e                   	sahf   
c000a427:	77 0f                	ja     c000a438 <sinc_stereo_vari_process+0x93>
c000a429:	dd d8                	fstp   st(0)
c000a42b:	eb 11                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a42d:	dd d9                	fstp   st(1)
c000a42f:	d9 e8                	fld1   
c000a431:	d8 d9                	fcomp  st(1)
c000a433:	df e0                	fnstsw ax
c000a435:	9e                   	sahf   
c000a436:	76 04                	jbe    c000a43c <sinc_stereo_vari_process+0x97>
c000a438:	de f9                	fdivp  st(1),st
c000a43a:	eb 02                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a43c:	dd d8                	fstp   st(0)
c000a43e:	83 ec 10             	sub    esp,0x10
c000a441:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a444:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a447:	e8 c4 43 01 00       	call   c001e810 <lrint>
c000a44c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a44f:	40                   	inc    eax
c000a450:	dd 14 24             	fst    QWORD PTR [esp]
c000a453:	0f af c5             	imul   eax,ebp
c000a456:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a45a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a45e:	e8 ef f5 ff ff       	call   c0009a52 <fmod_one>
c000a463:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a466:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a46a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a46d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a471:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a475:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a479:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a47c:	e8 8f 43 01 00       	call   c001e810 <lrint>
c000a481:	0f af e8             	imul   ebp,eax
c000a484:	d9 e8                	fld1   
c000a486:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a48a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a48e:	01 e8                	add    eax,ebp
c000a490:	dc 05 b8 ff 01 c0    	fadd   QWORD PTR ds:0xc001ffb8
c000a496:	99                   	cdq    
c000a497:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a49b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a49e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a4a1:	83 c4 10             	add    esp,0x10
c000a4a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a4a7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a4aa:	7d 4b                	jge    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a4ac:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4af:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4b2:	01 c8                	add    eax,ecx
c000a4b4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4b7:	99                   	cdq    
c000a4b8:	f7 f9                	idiv   ecx
c000a4ba:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4be:	7d 09                	jge    c000a4c9 <sinc_stereo_vari_process+0x124>
c000a4c0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a4c3:	85 c0                	test   eax,eax
c000a4c5:	79 57                	jns    c000a51e <sinc_stereo_vari_process+0x179>
c000a4c7:	eb 70                	jmp    c000a539 <sinc_stereo_vari_process+0x194>
c000a4c9:	51                   	push   ecx
c000a4ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a4ce:	57                   	push   edi
c000a4cf:	53                   	push   ebx
c000a4d0:	e8 d4 f5 ff ff       	call   c0009aa9 <prepare_data>
c000a4d5:	83 c4 10             	add    esp,0x10
c000a4d8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a4db:	85 c0                	test   eax,eax
c000a4dd:	0f 85 39 01 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a4e3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4e6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4e9:	01 c8                	add    eax,ecx
c000a4eb:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4ee:	99                   	cdq    
c000a4ef:	f7 f9                	idiv   ecx
c000a4f1:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4f5:	7c c9                	jl     c000a4c0 <sinc_stereo_vari_process+0x11b>
c000a4f7:	dd 04 24             	fld    QWORD PTR [esp]
c000a4fa:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a4fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a501:	dd 1e                	fstp   QWORD PTR [esi]
c000a503:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a506:	99                   	cdq    
c000a507:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a50a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a50d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a510:	99                   	cdq    
c000a511:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a514:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a517:	31 c0                	xor    eax,eax
c000a519:	e9 fe 00 00 00       	jmp    c000a61c <sinc_stereo_vari_process+0x277>
c000a51e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a522:	dd 04 24             	fld    QWORD PTR [esp]
c000a525:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a528:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a52c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a530:	d9 c9                	fxch   st(1)
c000a532:	de d9                	fcompp 
c000a534:	df e0                	fnstsw ax
c000a536:	9e                   	sahf   
c000a537:	73 be                	jae    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a539:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a53d:	7e 31                	jle    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a53f:	83 ec 10             	sub    esp,0x10
c000a542:	dd 06                	fld    QWORD PTR [esi]
c000a544:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a547:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a54a:	e8 a1 42 01 00       	call   c001e7f0 <fabs>
c000a54f:	83 c4 10             	add    esp,0x10
c000a552:	dc 1d 40 01 02 c0    	fcomp  QWORD PTR ds:0xc0020140
c000a558:	df e0                	fnstsw ax
c000a55a:	9e                   	sahf   
c000a55b:	76 13                	jbe    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a55d:	dd 06                	fld    QWORD PTR [esi]
c000a55f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a562:	d8 e1                	fsub   st,st(1)
c000a564:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a567:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a56a:	de c1                	faddp  st(1),st
c000a56c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a570:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a573:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a577:	d9 e8                	fld1   
c000a579:	d8 d9                	fcomp  st(1)
c000a57b:	df e0                	fnstsw ax
c000a57d:	9e                   	sahf   
c000a57e:	77 04                	ja     c000a584 <sinc_stereo_vari_process+0x1df>
c000a580:	dd d8                	fstp   st(0)
c000a582:	d9 e8                	fld1   
c000a584:	de c9                	fmulp  st(1),st
c000a586:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a58a:	50                   	push   eax
c000a58b:	50                   	push   eax
c000a58c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a594:	e8 a6 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a599:	89 c5                	mov    ebp,eax
c000a59b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a59f:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a5a3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5a6:	e8 94 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a5ab:	83 c4 0c             	add    esp,0xc
c000a5ae:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a5b1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a5b4:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a5b7:	89 c1                	mov    ecx,eax
c000a5b9:	52                   	push   edx
c000a5ba:	89 d8                	mov    eax,ebx
c000a5bc:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a5c0:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a5c3:	52                   	push   edx
c000a5c4:	52                   	push   edx
c000a5c5:	89 ea                	mov    edx,ebp
c000a5c7:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5ca:	e8 ce ea ff ff       	call   c000909d <calc_output_stereo>
c000a5cf:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a5d3:	d9 e8                	fld1   
c000a5d5:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a5d9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a5dd:	dd 14 24             	fst    QWORD PTR [esp]
c000a5e0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a5e4:	e8 69 f4 ff ff       	call   c0009a52 <fmod_one>
c000a5e9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a5ec:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a5f0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a5f3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a5f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5fb:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a5ff:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a602:	e8 09 42 01 00       	call   c001e810 <lrint>
c000a607:	0f af e8             	imul   ebp,eax
c000a60a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a60e:	01 e8                	add    eax,ebp
c000a610:	99                   	cdq    
c000a611:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a614:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a617:	e9 85 fe ff ff       	jmp    c000a4a1 <sinc_stereo_vari_process+0xfc>
c000a61c:	83 c4 3c             	add    esp,0x3c
c000a61f:	5b                   	pop    ebx
c000a620:	5e                   	pop    esi
c000a621:	5f                   	pop    edi
c000a622:	5d                   	pop    ebp
c000a623:	c3                   	ret    

c000a624 <sinc_mono_vari_process>:
c000a624:	55                   	push   ebp
c000a625:	b8 05 00 00 00       	mov    eax,0x5
c000a62a:	57                   	push   edi
c000a62b:	56                   	push   esi
c000a62c:	53                   	push   ebx
c000a62d:	83 ec 3c             	sub    esp,0x3c
c000a630:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a634:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a638:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a63b:	85 db                	test   ebx,ebx
c000a63d:	0f 84 57 02 00 00    	je     c000a89a <sinc_mono_vari_process+0x276>
c000a643:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a646:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a649:	0f af d0             	imul   edx,eax
c000a64c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a64f:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a653:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a65a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a65d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a664:	dd 06                	fld    QWORD PTR [esi]
c000a666:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a66a:	51                   	push   ecx
c000a66b:	51                   	push   ecx
c000a66c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a66f:	e8 d8 e8 ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a674:	5d                   	pop    ebp
c000a675:	89 c2                	mov    edx,eax
c000a677:	58                   	pop    eax
c000a678:	85 d2                	test   edx,edx
c000a67a:	b8 16 00 00 00       	mov    eax,0x16
c000a67f:	0f 85 15 02 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a685:	d9 05 50 01 02 c0    	fld    DWORD PTR ds:0xc0020150
c000a68b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a68e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a691:	dd 06                	fld    QWORD PTR [esi]
c000a693:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a696:	d8 d1                	fcom   st(1)
c000a698:	df e0                	fnstsw ax
c000a69a:	9e                   	sahf   
c000a69b:	76 0f                	jbe    c000a6ac <sinc_mono_vari_process+0x88>
c000a69d:	dd d8                	fstp   st(0)
c000a69f:	d9 e8                	fld1   
c000a6a1:	d8 d9                	fcomp  st(1)
c000a6a3:	df e0                	fnstsw ax
c000a6a5:	9e                   	sahf   
c000a6a6:	77 0f                	ja     c000a6b7 <sinc_mono_vari_process+0x93>
c000a6a8:	dd d8                	fstp   st(0)
c000a6aa:	eb 11                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6ac:	dd d9                	fstp   st(1)
c000a6ae:	d9 e8                	fld1   
c000a6b0:	d8 d9                	fcomp  st(1)
c000a6b2:	df e0                	fnstsw ax
c000a6b4:	9e                   	sahf   
c000a6b5:	76 04                	jbe    c000a6bb <sinc_mono_vari_process+0x97>
c000a6b7:	de f9                	fdivp  st(1),st
c000a6b9:	eb 02                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6bb:	dd d8                	fstp   st(0)
c000a6bd:	83 ec 10             	sub    esp,0x10
c000a6c0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a6c3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6c6:	e8 45 41 01 00       	call   c001e810 <lrint>
c000a6cb:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a6ce:	40                   	inc    eax
c000a6cf:	dd 14 24             	fst    QWORD PTR [esp]
c000a6d2:	0f af e8             	imul   ebp,eax
c000a6d5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a6d9:	e8 74 f3 ff ff       	call   c0009a52 <fmod_one>
c000a6de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a6e1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a6e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6e9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a6ed:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6f0:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a6f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a6f8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6fb:	e8 10 41 01 00       	call   c001e810 <lrint>
c000a700:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a705:	d9 e8                	fld1   
c000a707:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a70b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a70f:	99                   	cdq    
c000a710:	dc 05 b8 ff 01 c0    	fadd   QWORD PTR ds:0xc001ffb8
c000a716:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a719:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a71d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a720:	83 c4 10             	add    esp,0x10
c000a723:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a726:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a729:	7d 44                	jge    c000a76f <sinc_mono_vari_process+0x14b>
c000a72b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a72e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a731:	01 c8                	add    eax,ecx
c000a733:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a736:	99                   	cdq    
c000a737:	f7 f9                	idiv   ecx
c000a739:	39 d5                	cmp    ebp,edx
c000a73b:	7d 09                	jge    c000a746 <sinc_mono_vari_process+0x122>
c000a73d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a740:	85 c0                	test   eax,eax
c000a742:	79 52                	jns    c000a796 <sinc_mono_vari_process+0x172>
c000a744:	eb 6b                	jmp    c000a7b1 <sinc_mono_vari_process+0x18d>
c000a746:	52                   	push   edx
c000a747:	55                   	push   ebp
c000a748:	57                   	push   edi
c000a749:	53                   	push   ebx
c000a74a:	e8 5a f3 ff ff       	call   c0009aa9 <prepare_data>
c000a74f:	83 c4 10             	add    esp,0x10
c000a752:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a755:	85 c0                	test   eax,eax
c000a757:	0f 85 3d 01 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a75d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a760:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a763:	01 c8                	add    eax,ecx
c000a765:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a768:	99                   	cdq    
c000a769:	f7 f9                	idiv   ecx
c000a76b:	39 d5                	cmp    ebp,edx
c000a76d:	7c ce                	jl     c000a73d <sinc_mono_vari_process+0x119>
c000a76f:	dd 04 24             	fld    QWORD PTR [esp]
c000a772:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a775:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a779:	dd 1e                	fstp   QWORD PTR [esi]
c000a77b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a77e:	99                   	cdq    
c000a77f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a782:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a785:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a788:	99                   	cdq    
c000a789:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a78c:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a78f:	31 c0                	xor    eax,eax
c000a791:	e9 04 01 00 00       	jmp    c000a89a <sinc_mono_vari_process+0x276>
c000a796:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a79a:	dd 04 24             	fld    QWORD PTR [esp]
c000a79d:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a7a0:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a7a4:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a7a8:	d9 c9                	fxch   st(1)
c000a7aa:	de d9                	fcompp 
c000a7ac:	df e0                	fnstsw ax
c000a7ae:	9e                   	sahf   
c000a7af:	77 be                	ja     c000a76f <sinc_mono_vari_process+0x14b>
c000a7b1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a7b5:	7e 31                	jle    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7b7:	83 ec 10             	sub    esp,0x10
c000a7ba:	dd 06                	fld    QWORD PTR [esi]
c000a7bc:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a7bf:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7c2:	e8 29 40 01 00       	call   c001e7f0 <fabs>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	dc 1d 40 01 02 c0    	fcomp  QWORD PTR ds:0xc0020140
c000a7d0:	df e0                	fnstsw ax
c000a7d2:	9e                   	sahf   
c000a7d3:	76 13                	jbe    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7d5:	dd 06                	fld    QWORD PTR [esi]
c000a7d7:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a7da:	d8 e1                	fsub   st,st(1)
c000a7dc:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a7df:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a7e2:	de c1                	faddp  st(1),st
c000a7e4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a7e8:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a7eb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a7ef:	d9 e8                	fld1   
c000a7f1:	d8 d9                	fcomp  st(1)
c000a7f3:	df e0                	fnstsw ax
c000a7f5:	9e                   	sahf   
c000a7f6:	77 04                	ja     c000a7fc <sinc_mono_vari_process+0x1d8>
c000a7f8:	dd d8                	fstp   st(0)
c000a7fa:	d9 e8                	fld1   
c000a7fc:	de c9                	fmulp  st(1),st
c000a7fe:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a802:	50                   	push   eax
c000a803:	50                   	push   eax
c000a804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a80c:	e8 2e f2 ff ff       	call   c0009a3f <double_to_fp>
c000a811:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a815:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a819:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a81d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a820:	e8 1a f2 ff ff       	call   c0009a3f <double_to_fp>
c000a825:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a829:	89 c1                	mov    ecx,eax
c000a82b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a82f:	89 d8                	mov    eax,ebx
c000a831:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a834:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a838:	e8 7b e7 ff ff       	call   c0008fb8 <calc_output_single>
c000a83d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a840:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a843:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a847:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a84a:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a84d:	d9 e8                	fld1   
c000a84f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a853:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a857:	dd 14 24             	fst    QWORD PTR [esp]
c000a85a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a85e:	e8 ef f1 ff ff       	call   c0009a52 <fmod_one>
c000a863:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a866:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a86a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a86e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a872:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a875:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a879:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a87d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a880:	e8 8b 3f 01 00       	call   c001e810 <lrint>
c000a885:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a88a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88e:	99                   	cdq    
c000a88f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a892:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a895:	e9 86 fe ff ff       	jmp    c000a720 <sinc_mono_vari_process+0xfc>
c000a89a:	83 c4 3c             	add    esp,0x3c
c000a89d:	5b                   	pop    ebx
c000a89e:	5e                   	pop    esi
c000a89f:	5f                   	pop    edi
c000a8a0:	5d                   	pop    ebp
c000a8a1:	c3                   	ret    

c000a8a2 <sinc_get_name>:
c000a8a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8a6:	31 c0                	xor    eax,eax
c000a8a8:	83 fa 02             	cmp    edx,0x2
c000a8ab:	77 07                	ja     c000a8b4 <sinc_get_name+0x12>
c000a8ad:	8b 04 95 20 00 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdffe0]
c000a8b4:	c3                   	ret    

c000a8b5 <sinc_get_description>:
c000a8b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8b9:	31 c0                	xor    eax,eax
c000a8bb:	83 fa 02             	cmp    edx,0x2
c000a8be:	77 07                	ja     c000a8c7 <sinc_get_description+0x12>
c000a8c0:	8b 04 95 14 00 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdffec]
c000a8c7:	c3                   	ret    

c000a8c8 <sinc_set_converter>:
c000a8c8:	53                   	push   ebx
c000a8c9:	81 ec 58 08 00 00    	sub    esp,0x858
c000a8cf:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a8d6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a8d9:	85 c0                	test   eax,eax
c000a8db:	74 13                	je     c000a8f0 <sinc_set_converter+0x28>
c000a8dd:	83 ec 0c             	sub    esp,0xc
c000a8e0:	50                   	push   eax
c000a8e1:	e8 48 13 00 00       	call   c000bc2e <free>
c000a8e6:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a8ed:	83 c4 10             	add    esp,0x10
c000a8f0:	50                   	push   eax
c000a8f1:	68 44 08 00 00       	push   0x844
c000a8f6:	6a 00                	push   0x0
c000a8f8:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a8fc:	50                   	push   eax
c000a8fd:	e8 06 5d ff ff       	call   c0000608 <memset>
c000a902:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a905:	83 c4 10             	add    esp,0x10
c000a908:	b8 0b 00 00 00       	mov    eax,0xb
c000a90d:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a913:	7f 6e                	jg     c000a983 <sinc_set_converter+0xbb>
c000a915:	83 fa 01             	cmp    edx,0x1
c000a918:	75 10                	jne    c000a92a <sinc_set_converter+0x62>
c000a91a:	c7 43 24 24 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a624
c000a921:	c7 43 20 24 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a624
c000a928:	eb 4d                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a92a:	83 fa 02             	cmp    edx,0x2
c000a92d:	75 10                	jne    c000a93f <sinc_set_converter+0x77>
c000a92f:	c7 43 24 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a3a5
c000a936:	c7 43 20 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a3a5
c000a93d:	eb 38                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a93f:	83 fa 04             	cmp    edx,0x4
c000a942:	75 10                	jne    c000a954 <sinc_set_converter+0x8c>
c000a944:	c7 43 24 26 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a126
c000a94b:	c7 43 20 26 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a126
c000a952:	eb 23                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a954:	83 fa 06             	cmp    edx,0x6
c000a957:	75 10                	jne    c000a969 <sinc_set_converter+0xa1>
c000a959:	c7 43 24 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009ea7
c000a960:	c7 43 20 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009ea7
c000a967:	eb 0e                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a969:	c7 43 24 23 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009c23
c000a970:	c7 43 20 23 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009c23
c000a977:	c7 43 28 d3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095d3
c000a97e:	b8 0a 00 00 00       	mov    eax,0xa
c000a983:	81 c4 58 08 00 00    	add    esp,0x858
c000a989:	5b                   	pop    ebx
c000a98a:	c3                   	ret    

c000a98b <is_bad_src_ratio>:
c000a98b:	83 ec 0c             	sub    esp,0xc
c000a98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a992:	89 04 24             	mov    DWORD PTR [esp],eax
c000a995:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a999:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a99d:	dd 04 24             	fld    QWORD PTR [esp]
c000a9a0:	dd 05 40 ff 01 c0    	fld    QWORD PTR ds:0xc001ff40
c000a9a6:	de d9                	fcompp 
c000a9a8:	df e0                	fnstsw ax
c000a9aa:	f6 c4 45             	test   ah,0x45
c000a9ad:	74 10                	je     c000a9bf <is_bad_src_ratio+0x34>
c000a9af:	dd 04 24             	fld    QWORD PTR [esp]
c000a9b2:	dc 1d 48 ff 01 c0    	fcomp  QWORD PTR ds:0xc001ff48
c000a9b8:	df e0                	fnstsw ax
c000a9ba:	f6 c4 45             	test   ah,0x45
c000a9bd:	75 07                	jne    c000a9c6 <is_bad_src_ratio+0x3b>
c000a9bf:	b8 01 00 00 00       	mov    eax,0x1
c000a9c4:	eb 05                	jmp    c000a9cb <is_bad_src_ratio+0x40>
c000a9c6:	b8 00 00 00 00       	mov    eax,0x0
c000a9cb:	83 c4 0c             	add    esp,0xc
c000a9ce:	c3                   	ret    

c000a9cf <fmod_one>:
c000a9cf:	83 ec 2c             	sub    esp,0x2c
c000a9d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a9d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9e2:	83 ec 08             	sub    esp,0x8
c000a9e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ed:	e8 1e 3e 01 00       	call   c001e810 <lrint>
c000a9f2:	83 c4 10             	add    esp,0x10
c000a9f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9f9:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000a9fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa01:	de e1                	fsubrp st(1),st
c000aa03:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa07:	d9 ee                	fldz   
c000aa09:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa0d:	df e0                	fnstsw ax
c000aa0f:	f6 c4 45             	test   ah,0x45
c000aa12:	75 0a                	jne    c000aa1e <fmod_one+0x4f>
c000aa14:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa18:	d9 e8                	fld1   
c000aa1a:	de c1                	faddp  st(1),st
c000aa1c:	eb 04                	jmp    c000aa22 <fmod_one+0x53>
c000aa1e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa22:	83 c4 2c             	add    esp,0x2c
c000aa25:	c3                   	ret    

c000aa26 <zoh_vari_process>:
c000aa26:	55                   	push   ebp
c000aa27:	57                   	push   edi
c000aa28:	56                   	push   esi
c000aa29:	53                   	push   ebx
c000aa2a:	83 ec 2c             	sub    esp,0x2c
c000aa2d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aa31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aa35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aa3d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aa41:	0f 8e 34 02 00 00    	jle    c000ac7b <zoh_vari_process+0x255>
c000aa47:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aa4a:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aa52:	85 db                	test   ebx,ebx
c000aa54:	0f 84 21 02 00 00    	je     c000ac7b <zoh_vari_process+0x255>
c000aa5a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aa5d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aa61:	74 19                	je     c000aa7c <zoh_vari_process+0x56>
c000aa63:	31 d2                	xor    edx,edx
c000aa65:	39 c2                	cmp    edx,eax
c000aa67:	7d 0c                	jge    c000aa75 <zoh_vari_process+0x4f>
c000aa69:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aa6b:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aa6e:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aa72:	42                   	inc    edx
c000aa73:	eb f0                	jmp    c000aa65 <zoh_vari_process+0x3f>
c000aa75:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000aa7c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000aa7f:	0f af d0             	imul   edx,eax
c000aa82:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000aa85:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000aa89:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000aa90:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aa93:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000aa9a:	dd 07                	fld    QWORD PTR [edi]
c000aa9c:	dd 14 24             	fst    QWORD PTR [esp]
c000aa9f:	50                   	push   eax
c000aaa0:	50                   	push   eax
c000aaa1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaa4:	e8 e2 fe ff ff       	call   c000a98b <is_bad_src_ratio>
c000aaa9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aaad:	5a                   	pop    edx
c000aaae:	59                   	pop    ecx
c000aaaf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aab4:	0f 85 b9 01 00 00    	jne    c000ac73 <zoh_vari_process+0x24d>
c000aaba:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000aabd:	d9 e8                	fld1   
c000aabf:	d8 d1                	fcom   st(1)
c000aac1:	df e0                	fnstsw ax
c000aac3:	9e                   	sahf   
c000aac4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aac8:	0f 86 85 00 00 00    	jbe    c000ab53 <zoh_vari_process+0x12d>
c000aace:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aad1:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aad4:	7d 7d                	jge    c000ab53 <zoh_vari_process+0x12d>
c000aad6:	d9 c0                	fld    st(0)
c000aad8:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aadb:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000aade:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000aae1:	df e0                	fnstsw ax
c000aae3:	9e                   	sahf   
c000aae4:	73 6d                	jae    c000ab53 <zoh_vari_process+0x12d>
c000aae6:	85 d2                	test   edx,edx
c000aae8:	7e 38                	jle    c000ab22 <zoh_vari_process+0xfc>
c000aaea:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aaee:	83 ec 10             	sub    esp,0x10
c000aaf1:	dd 07                	fld    QWORD PTR [edi]
c000aaf3:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000aaf6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaf9:	e8 f2 3c 01 00       	call   c001e7f0 <fabs>
c000aafe:	83 c4 10             	add    esp,0x10
c000ab01:	dc 1d b8 ff 01 c0    	fcomp  QWORD PTR ds:0xc001ffb8
c000ab07:	df e0                	fnstsw ax
c000ab09:	9e                   	sahf   
c000ab0a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab0e:	76 12                	jbe    c000ab22 <zoh_vari_process+0xfc>
c000ab10:	dd 07                	fld    QWORD PTR [edi]
c000ab12:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ab15:	d8 e1                	fsub   st,st(1)
c000ab17:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ab1a:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ab1d:	de c1                	faddp  st(1),st
c000ab1f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab22:	31 c0                	xor    eax,eax
c000ab24:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ab27:	7e 13                	jle    c000ab3c <zoh_vari_process+0x116>
c000ab29:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000ab2d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ab30:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ab33:	40                   	inc    eax
c000ab34:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000ab37:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ab3a:	eb e8                	jmp    c000ab24 <zoh_vari_process+0xfe>
c000ab3c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab40:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab43:	de c1                	faddp  st(1),st
c000ab45:	e9 73 ff ff ff       	jmp    c000aabd <zoh_vari_process+0x97>
c000ab4a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab4e:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab51:	de c1                	faddp  st(1),st
c000ab53:	83 ec 10             	sub    esp,0x10
c000ab56:	dd 14 24             	fst    QWORD PTR [esp]
c000ab59:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab5d:	e8 6d fe ff ff       	call   c000a9cf <fmod_one>
c000ab62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ab65:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ab69:	d8 e1                	fsub   st,st(1)
c000ab6b:	d9 c9                	fxch   st(1)
c000ab6d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab71:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab74:	e8 97 3c 01 00       	call   c001e810 <lrint>
c000ab79:	83 c4 10             	add    esp,0x10
c000ab7c:	0f af e8             	imul   ebp,eax
c000ab7f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab82:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ab85:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ab8c:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ab8f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab92:	0f 8d 82 00 00 00    	jge    c000ac1a <zoh_vari_process+0x1f4>
c000ab98:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ab9c:	d9 c0                	fld    st(0)
c000ab9e:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aba1:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000aba5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000aba9:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000abad:	de d9                	fcompp 
c000abaf:	df e0                	fnstsw ax
c000abb1:	9e                   	sahf   
c000abb2:	72 66                	jb     c000ac1a <zoh_vari_process+0x1f4>
c000abb4:	85 d2                	test   edx,edx
c000abb6:	7e 38                	jle    c000abf0 <zoh_vari_process+0x1ca>
c000abb8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000abbc:	83 ec 10             	sub    esp,0x10
c000abbf:	dd 07                	fld    QWORD PTR [edi]
c000abc1:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000abc4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abc7:	e8 24 3c 01 00       	call   c001e7f0 <fabs>
c000abcc:	83 c4 10             	add    esp,0x10
c000abcf:	dc 1d b8 ff 01 c0    	fcomp  QWORD PTR ds:0xc001ffb8
c000abd5:	df e0                	fnstsw ax
c000abd7:	9e                   	sahf   
c000abd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000abdc:	76 12                	jbe    c000abf0 <zoh_vari_process+0x1ca>
c000abde:	dd 07                	fld    QWORD PTR [edi]
c000abe0:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abe3:	d8 e1                	fsub   st,st(1)
c000abe5:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abe8:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abeb:	de c1                	faddp  st(1),st
c000abed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abf0:	31 d2                	xor    edx,edx
c000abf2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000abf5:	39 d0                	cmp    eax,edx
c000abf7:	0f 8e 4d ff ff ff    	jle    c000ab4a <zoh_vari_process+0x124>
c000abfd:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac00:	29 c1                	sub    ecx,eax
c000ac02:	89 c8                	mov    eax,ecx
c000ac04:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac06:	01 d0                	add    eax,edx
c000ac08:	42                   	inc    edx
c000ac09:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac0c:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac0f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac12:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac15:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac18:	eb d8                	jmp    c000abf2 <zoh_vari_process+0x1cc>
c000ac1a:	39 e9                	cmp    ecx,ebp
c000ac1c:	7d 13                	jge    c000ac31 <zoh_vari_process+0x20b>
c000ac1e:	89 e8                	mov    eax,ebp
c000ac20:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000ac23:	29 c8                	sub    eax,ecx
c000ac25:	99                   	cdq    
c000ac26:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac2d:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000ac31:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000ac34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac37:	85 c0                	test   eax,eax
c000ac39:	7f 1b                	jg     c000ac56 <zoh_vari_process+0x230>
c000ac3b:	dd 04 24             	fld    QWORD PTR [esp]
c000ac3e:	dd 1f                	fstp   QWORD PTR [edi]
c000ac40:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac43:	99                   	cdq    
c000ac44:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac47:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ac4a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac4d:	99                   	cdq    
c000ac4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac51:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000ac54:	eb 25                	jmp    c000ac7b <zoh_vari_process+0x255>
c000ac56:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac59:	31 d2                	xor    edx,edx
c000ac5b:	29 e8                	sub    eax,ebp
c000ac5d:	c1 e0 02             	shl    eax,0x2
c000ac60:	39 d5                	cmp    ebp,edx
c000ac62:	7e d7                	jle    c000ac3b <zoh_vari_process+0x215>
c000ac64:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac66:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ac69:	83 c0 04             	add    eax,0x4
c000ac6c:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ac70:	42                   	inc    edx
c000ac71:	eb ed                	jmp    c000ac60 <zoh_vari_process+0x23a>
c000ac73:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ac7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ac7f:	83 c4 2c             	add    esp,0x2c
c000ac82:	5b                   	pop    ebx
c000ac83:	5e                   	pop    esi
c000ac84:	5f                   	pop    edi
c000ac85:	5d                   	pop    ebp
c000ac86:	c3                   	ret    

c000ac87 <zoh_reset>:
c000ac87:	83 ec 0c             	sub    esp,0xc
c000ac8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac8e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ac91:	85 c0                	test   eax,eax
c000ac93:	74 20                	je     c000acb5 <zoh_reset+0x2e>
c000ac95:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ac98:	83 c0 1c             	add    eax,0x1c
c000ac9b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000ac9e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000aca5:	c1 e2 02             	shl    edx,0x2
c000aca8:	51                   	push   ecx
c000aca9:	52                   	push   edx
c000acaa:	6a 00                	push   0x0
c000acac:	50                   	push   eax
c000acad:	e8 56 59 ff ff       	call   c0000608 <memset>
c000acb2:	83 c4 10             	add    esp,0x10
c000acb5:	83 c4 0c             	add    esp,0xc
c000acb8:	c3                   	ret    

c000acb9 <zoh_get_name>:
c000acb9:	31 c0                	xor    eax,eax
c000acbb:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000acc0:	75 05                	jne    c000acc7 <zoh_get_name+0xe>
c000acc2:	b8 54 01 02 c0       	mov    eax,0xc0020154
c000acc7:	c3                   	ret    

c000acc8 <zoh_get_description>:
c000acc8:	31 c0                	xor    eax,eax
c000acca:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000accf:	75 05                	jne    c000acd6 <zoh_get_description+0xe>
c000acd1:	b8 65 01 02 c0       	mov    eax,0xc0020165
c000acd6:	c3                   	ret    

c000acd7 <zoh_set_converter>:
c000acd7:	53                   	push   ebx
c000acd8:	b8 0a 00 00 00       	mov    eax,0xa
c000acdd:	83 ec 08             	sub    esp,0x8
c000ace0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ace4:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ace9:	75 6e                	jne    c000ad59 <zoh_set_converter+0x82>
c000aceb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000acee:	85 c0                	test   eax,eax
c000acf0:	74 13                	je     c000ad05 <zoh_set_converter+0x2e>
c000acf2:	83 ec 0c             	sub    esp,0xc
c000acf5:	50                   	push   eax
c000acf6:	e8 33 0f 00 00       	call   c000bc2e <free>
c000acfb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad02:	83 c4 10             	add    esp,0x10
c000ad05:	50                   	push   eax
c000ad06:	50                   	push   eax
c000ad07:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad0a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad11:	50                   	push   eax
c000ad12:	6a 01                	push   0x1
c000ad14:	e8 35 0f 00 00       	call   c000bc4e <calloc>
c000ad19:	83 c4 10             	add    esp,0x10
c000ad1c:	89 c2                	mov    edx,eax
c000ad1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ad21:	85 d2                	test   edx,edx
c000ad23:	b8 01 00 00 00       	mov    eax,0x1
c000ad28:	74 2f                	je     c000ad59 <zoh_set_converter+0x82>
c000ad2a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad2d:	83 ec 0c             	sub    esp,0xc
c000ad30:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ad33:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000ad39:	c7 43 24 26 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aa26
c000ad40:	c7 43 20 26 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aa26
c000ad47:	c7 43 28 87 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ac87
c000ad4e:	53                   	push   ebx
c000ad4f:	e8 33 ff ff ff       	call   c000ac87 <zoh_reset>
c000ad54:	83 c4 10             	add    esp,0x10
c000ad57:	31 c0                	xor    eax,eax
c000ad59:	83 c4 08             	add    esp,0x8
c000ad5c:	5b                   	pop    ebx
c000ad5d:	c3                   	ret    

c000ad5e <Computer::close(int, int, void*)>:
c000ad5e:	57                   	push   edi
c000ad5f:	56                   	push   esi
c000ad60:	53                   	push   ebx
c000ad61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ad69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ad6d:	83 ec 0c             	sub    esp,0xc
c000ad70:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000ad76:	e8 e5 56 00 00       	call   c0010460 <Device::closeAll()>
c000ad7b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ad81:	83 c4 10             	add    esp,0x10
c000ad84:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad86:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ad8a:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ad92:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ad96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ad9a:	5b                   	pop    ebx
c000ad9b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ad9e:	5e                   	pop    esi
c000ad9f:	5f                   	pop    edi
c000ada0:	ff e0                	jmp    eax

c000ada2 <Computer::Computer()>:
c000ada2:	83 ec 0c             	sub    esp,0xc
c000ada5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ada9:	83 ec 08             	sub    esp,0x8
c000adac:	68 9c 01 02 c0       	push   0xc002019c
c000adb1:	50                   	push   eax
c000adb2:	e8 23 57 00 00       	call   c00104da <Device::Device(char const*)>
c000adb7:	83 c4 10             	add    esp,0x10
c000adba:	ba 18 02 02 c0       	mov    edx,0xc0020218
c000adbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc3:	89 10                	mov    DWORD PTR [eax],edx
c000adc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc9:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000add3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add7:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ade1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000adeb:	83 ca 04             	or     edx,0x4
c000adee:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000adf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000adfe:	0f b6 d0             	movzx  edx,al
c000ae01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae05:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae16:	0f b6 d0             	movzx  edx,al
c000ae19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae1d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ae22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae2c:	8d 50 01             	lea    edx,[eax+0x1]
c000ae2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae33:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae39:	0f b6 d0             	movzx  edx,al
c000ae3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae40:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae44:	83 e1 3f             	and    ecx,0x3f
c000ae47:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000ae4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae55:	0f b6 d0             	movzx  edx,al
c000ae58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5c:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ae63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae6d:	0f b6 d0             	movzx  edx,al
c000ae70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae74:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000ae79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae83:	8d 50 01             	lea    edx,[eax+0x1]
c000ae86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae8a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae90:	0f b6 d0             	movzx  edx,al
c000ae93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae97:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae9b:	83 e1 3f             	and    ecx,0x3f
c000ae9e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeac:	0f b6 d0             	movzx  edx,al
c000aeaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb3:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000aeba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aebe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aec4:	0f b6 d0             	movzx  edx,al
c000aec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aecb:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000aed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeda:	8d 50 01             	lea    edx,[eax+0x1]
c000aedd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aee1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aee7:	0f b6 d0             	movzx  edx,al
c000aeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeee:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aef2:	83 e1 3f             	and    ecx,0x3f
c000aef5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aef9:	90                   	nop
c000aefa:	83 c4 0c             	add    esp,0xc
c000aefd:	c3                   	ret    

c000aefe <Computer::setBootMessage(char const*)>:
c000aefe:	c3                   	ret    
c000aeff:	90                   	nop

c000af00 <Computer::start()>:
c000af00:	56                   	push   esi
c000af01:	53                   	push   ebx
c000af02:	50                   	push   eax
c000af03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af07:	e8 28 cb 00 00       	call   c0017a34 <lockScheduler()>
c000af0c:	e8 57 ce 00 00       	call   c0017d68 <schedule()>
c000af11:	e8 20 cb 00 00       	call   c0017a36 <unlockScheduler()>
c000af16:	fb                   	sti    
c000af17:	83 ec 0c             	sub    esp,0xc
c000af1a:	68 3b 07 00 00       	push   0x73b
c000af1f:	e8 cc 3e 00 00       	call   c000edf0 <operator new(unsigned long)>
c000af24:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000af2b:	89 c6                	mov    esi,eax
c000af2d:	ff 35 d4 48 02 c0    	push   DWORD PTR ds:0xc00248d4
c000af33:	68 a5 01 02 c0       	push   0xc00201a5
c000af38:	6a 01                	push   0x1
c000af3a:	50                   	push   eax
c000af3b:	e8 54 c9 00 00       	call   c0017894 <Process::Process(bool, char const*, Process*, char**)>
c000af40:	83 c4 20             	add    esp,0x20
c000af43:	68 ff 00 00 00       	push   0xff
c000af48:	6a 00                	push   0x0
c000af4a:	68 ab b5 00 c0       	push   0xc000b5ab
c000af4f:	56                   	push   esi
c000af50:	e8 09 cc 00 00       	call   c0017b5e <Process::createThread(void (*)(void*), void*, int)>
c000af55:	6a 7a                	push   0x7a
c000af57:	6a 00                	push   0x0
c000af59:	68 97 85 01 c0       	push   0xc0018597
c000af5e:	ff 35 d4 48 02 c0    	push   DWORD PTR ds:0xc00248d4
c000af64:	e8 f5 cb 00 00       	call   c0017b5e <Process::createThread(void (*)(void*), void*, int)>
c000af69:	83 c4 20             	add    esp,0x20
c000af6c:	a3 88 48 02 c0       	mov    ds:0xc0024888,eax
c000af71:	c6 05 0d 35 02 c0 01 	mov    BYTE PTR ds:0xc002350d,0x1
c000af78:	e8 bd 42 00 00       	call   c000f23a <initVFS()>
c000af7d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000af83:	8b 10                	mov    edx,DWORD PTR [eax]
c000af85:	6a 00                	push   0x0
c000af87:	6a 00                	push   0x0
c000af89:	6a 00                	push   0x0
c000af8b:	50                   	push   eax
c000af8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000af8f:	e8 8d b3 00 00       	call   c0016321 <setupSystemCalls()>
c000af94:	e8 9f 4d 00 00       	call   c000fd38 <loadClockSettings()>
c000af99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000af9c:	e8 93 54 00 00       	call   c0010434 <Device::loadDriversForAll()>
c000afa1:	5a                   	pop    edx
c000afa2:	8b 1d 08 35 02 c0    	mov    ebx,DWORD PTR ds:0xc0023508
c000afa8:	59                   	pop    ecx
c000afa9:	6a 01                	push   0x1
c000afab:	68 b2 01 02 c0       	push   0xc00201b2
c000afb0:	e8 21 c5 00 00       	call   c00174d6 <Thr::loadDLL(char const*, bool)>
c000afb5:	5e                   	pop    esi
c000afb6:	5a                   	pop    edx
c000afb7:	53                   	push   ebx
c000afb8:	50                   	push   eax
c000afb9:	e8 6b c6 00 00       	call   c0017629 <Thr::executeDLL(unsigned long, void*)>
c000afbe:	c7 04 24 1c 12 02 c0 	mov    DWORD PTR [esp],0xc002121c
c000afc5:	e8 15 3f 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000afca:	83 c4 10             	add    esp,0x10
c000afcd:	83 ec 0c             	sub    esp,0xc
c000afd0:	6a 02                	push   0x2
c000afd2:	e8 5c d0 00 00       	call   c0018033 <blockTask(TaskState)>
c000afd7:	83 c4 10             	add    esp,0x10
c000afda:	eb f1                	jmp    c000afcd <Computer::start()+0xcd>

c000afdc <firstTask()>:
c000afdc:	83 ec 18             	sub    esp,0x18
c000afdf:	ff 35 08 35 02 c0    	push   DWORD PTR ds:0xc0023508
c000afe5:	e8 16 ff ff ff       	call   c000af00 <Computer::start()>

c000afea <Computer::detectFeatures()>:
c000afea:	55                   	push   ebp
c000afeb:	57                   	push   edi
c000afec:	56                   	push   esi
c000afed:	53                   	push   ebx
c000afee:	83 ec 1c             	sub    esp,0x1c
c000aff1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000aff5:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000afff:	e8 bb 52 ff ff       	call   c00002bf <detectCPUID>
c000b004:	85 c0                	test   eax,eax
c000b006:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b00c:	0f 95 c2             	setne  dl
c000b00f:	83 e0 fd             	and    eax,0xfffffffd
c000b012:	d1 e2                	shl    edx,1
c000b014:	09 d0                	or     eax,edx
c000b016:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b01c:	a8 02                	test   al,0x2
c000b01e:	75 46                	jne    c000b066 <Computer::detectFeatures()+0x7c>
c000b020:	f6 05 21 35 02 c0 04 	test   BYTE PTR ds:0xc0023521,0x4
c000b027:	74 07                	je     c000b030 <Computer::detectFeatures()+0x46>
c000b029:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b030:	e8 61 32 01 00       	call   c001e296 <x87Detect>
c000b035:	83 e0 01             	and    eax,0x1
c000b038:	c1 e0 04             	shl    eax,0x4
c000b03b:	88 c2                	mov    dl,al
c000b03d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b043:	83 e0 ef             	and    eax,0xffffffef
c000b046:	09 d0                	or     eax,edx
c000b048:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b04e:	a8 10                	test   al,0x10
c000b050:	0f 85 10 01 00 00    	jne    c000b166 <Computer::detectFeatures()+0x17c>
c000b056:	84 c0                	test   al,al
c000b058:	0f 88 2b 01 00 00    	js     c000b189 <Computer::detectFeatures()+0x19f>
c000b05e:	83 c4 1c             	add    esp,0x1c
c000b061:	5b                   	pop    ebx
c000b062:	5e                   	pop    esi
c000b063:	5f                   	pop    edi
c000b064:	5d                   	pop    ebp
c000b065:	c3                   	ret    
c000b066:	83 ec 0c             	sub    esp,0xc
c000b069:	6a 20                	push   0x20
c000b06b:	e8 47 8d 00 00       	call   c0013db7 <cpuidCheckEDX(unsigned int)>
c000b070:	83 e0 01             	and    eax,0x1
c000b073:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b07a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b080:	83 e0 f7             	and    eax,0xfffffff7
c000b083:	09 d0                	or     eax,edx
c000b085:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b08b:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b092:	e8 20 8d 00 00       	call   c0013db7 <cpuidCheckEDX(unsigned int)>
c000b097:	83 e0 01             	and    eax,0x1
c000b09a:	88 c2                	mov    dl,al
c000b09c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0a2:	83 e0 fe             	and    eax,0xfffffffe
c000b0a5:	09 d0                	or     eax,edx
c000b0a7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0ad:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b0b4:	e8 fe 8c 00 00       	call   c0013db7 <cpuidCheckEDX(unsigned int)>
c000b0b9:	c1 e0 07             	shl    eax,0x7
c000b0bc:	88 c2                	mov    dl,al
c000b0be:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0c4:	83 e0 7f             	and    eax,0x7f
c000b0c7:	09 d0                	or     eax,edx
c000b0c9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0cf:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b0d6:	e8 dc 8c 00 00       	call   c0013db7 <cpuidCheckEDX(unsigned int)>
c000b0db:	83 c4 10             	add    esp,0x10
c000b0de:	83 e0 01             	and    eax,0x1
c000b0e1:	c1 e0 05             	shl    eax,0x5
c000b0e4:	88 c2                	mov    dl,al
c000b0e6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0ec:	83 e0 df             	and    eax,0xffffffdf
c000b0ef:	09 d0                	or     eax,edx
c000b0f1:	f7 05 20 35 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0023520,0x401
c000b0fb:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b101:	0f 84 a8 00 00 00    	je     c000b1af <Computer::detectFeatures()+0x1c5>
c000b107:	83 ec 0c             	sub    esp,0xc
c000b10a:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b111:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b115:	50                   	push   eax
c000b116:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b11a:	55                   	push   ebp
c000b11b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b11f:	57                   	push   edi
c000b120:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b124:	56                   	push   esi
c000b125:	68 00 00 00 80       	push   0x80000000
c000b12a:	e8 05 8c 00 00       	call   c0013d34 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b12f:	83 c4 20             	add    esp,0x20
c000b132:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b139:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b13d:	0f 86 dd fe ff ff    	jbe    c000b020 <Computer::detectFeatures()+0x36>
c000b143:	83 ec 0c             	sub    esp,0xc
c000b146:	50                   	push   eax
c000b147:	55                   	push   ebp
c000b148:	57                   	push   edi
c000b149:	56                   	push   esi
c000b14a:	68 01 00 00 80       	push   0x80000001
c000b14f:	e8 e0 8b 00 00       	call   c0013d34 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b154:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b15e:	83 c4 20             	add    esp,0x20
c000b161:	e9 ba fe ff ff       	jmp    c000b020 <Computer::detectFeatures()+0x36>
c000b166:	e8 e5 30 01 00       	call   c001e250 <sseDetect>
c000b16b:	88 c2                	mov    dl,al
c000b16d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b173:	c1 e2 07             	shl    edx,0x7
c000b176:	83 e0 7f             	and    eax,0x7f
c000b179:	09 d0                	or     eax,edx
c000b17b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b181:	84 c0                	test   al,al
c000b183:	0f 89 d5 fe ff ff    	jns    c000b05e <Computer::detectFeatures()+0x74>
c000b189:	e8 b2 30 01 00       	call   c001e240 <avxDetect>
c000b18e:	83 e0 01             	and    eax,0x1
c000b191:	c1 e0 05             	shl    eax,0x5
c000b194:	88 c2                	mov    dl,al
c000b196:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b19c:	83 e0 df             	and    eax,0xffffffdf
c000b19f:	09 d0                	or     eax,edx
c000b1a1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b1a7:	83 c4 1c             	add    esp,0x1c
c000b1aa:	5b                   	pop    ebx
c000b1ab:	5e                   	pop    esi
c000b1ac:	5f                   	pop    edi
c000b1ad:	5d                   	pop    ebp
c000b1ae:	c3                   	ret    
c000b1af:	83 ec 0c             	sub    esp,0xc
c000b1b2:	68 00 02 00 00       	push   0x200
c000b1b7:	e8 fb 8b 00 00       	call   c0013db7 <cpuidCheckEDX(unsigned int)>
c000b1bc:	83 c4 10             	add    esp,0x10
c000b1bf:	e9 43 ff ff ff       	jmp    c000b107 <Computer::detectFeatures()+0x11d>

c000b1c4 <Computer::displayFeatures()>:
c000b1c4:	c3                   	ret    
c000b1c5:	90                   	nop

c000b1c6 <Computer::rdmsr(unsigned int)>:
c000b1c6:	83 ec 0c             	sub    esp,0xc
c000b1c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1cd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b1d4:	74 0a                	je     c000b1e0 <Computer::rdmsr(unsigned int)+0x1a>
c000b1d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b1da:	0f 32                	rdmsr  
c000b1dc:	83 c4 0c             	add    esp,0xc
c000b1df:	c3                   	ret    
c000b1e0:	83 ec 0c             	sub    esp,0xc
c000b1e3:	68 ce 01 02 c0       	push   0xc00201ce
c000b1e8:	e8 87 99 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c000b1ed:	83 c4 10             	add    esp,0x10
c000b1f0:	eb e4                	jmp    c000b1d6 <Computer::rdmsr(unsigned int)+0x10>

c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b1f2:	57                   	push   edi
c000b1f3:	56                   	push   esi
c000b1f4:	52                   	push   edx
c000b1f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b1fd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b201:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b208:	74 0e                	je     c000b218 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b20a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b20e:	89 f0                	mov    eax,esi
c000b210:	89 fa                	mov    edx,edi
c000b212:	0f 30                	wrmsr  
c000b214:	58                   	pop    eax
c000b215:	5e                   	pop    esi
c000b216:	5f                   	pop    edi
c000b217:	c3                   	ret    
c000b218:	83 ec 0c             	sub    esp,0xc
c000b21b:	68 d4 01 02 c0       	push   0xc00201d4
c000b220:	e8 4f 99 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c000b225:	83 c4 10             	add    esp,0x10
c000b228:	eb e0                	jmp    c000b20a <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b22a <Computer::nmiEnabled()>:
c000b22a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b22e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b234:	c3                   	ret    
c000b235:	90                   	nop

c000b236 <Computer::readCMOS(unsigned char)>:
c000b236:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b23a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b241:	19 c0                	sbb    eax,eax
c000b243:	83 e0 80             	and    eax,0xffffff80
c000b246:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b24a:	e6 70                	out    0x70,al
c000b24c:	e4 71                	in     al,0x71
c000b24e:	c3                   	ret    
c000b24f:	90                   	nop

c000b250 <Computer::enableNMI(bool)>:
c000b250:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b258:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b25e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b266:	eb ce                	jmp    c000b236 <Computer::readCMOS(unsigned char)>

c000b268 <Computer::open(int, int, void*)>:
c000b268:	56                   	push   esi
c000b269:	53                   	push   ebx
c000b26a:	83 ec 10             	sub    esp,0x10
c000b26d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b271:	f6 05 20 35 02 c0 04 	test   BYTE PTR ds:0xc0023520,0x4
c000b278:	68 68 22 00 00       	push   0x2268
c000b27d:	0f 94 05 40 29 02 c0 	sete   BYTE PTR ds:0xc0022940
c000b284:	e8 67 3b 00 00       	call   c000edf0 <operator new(unsigned long)>
c000b289:	89 04 24             	mov    DWORD PTR [esp],eax
c000b28c:	89 c6                	mov    esi,eax
c000b28e:	e8 41 81 00 00       	call   c00133d4 <ACPI::ACPI()>
c000b293:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b299:	58                   	pop    eax
c000b29a:	5a                   	pop    edx
c000b29b:	56                   	push   esi
c000b29c:	53                   	push   ebx
c000b29d:	e8 48 50 00 00       	call   c00102ea <Device::addChild(Device*)>
c000b2a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2a5:	e8 40 fd ff ff       	call   c000afea <Computer::detectFeatures()>
c000b2aa:	59                   	pop    ecx
c000b2ab:	5e                   	pop    esi
c000b2ac:	6a 01                	push   0x1
c000b2ae:	53                   	push   ebx
c000b2af:	e8 9c ff ff ff       	call   c000b250 <Computer::enableNMI(bool)>
c000b2b4:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b2bb:	e8 30 3b 00 00       	call   c000edf0 <operator new(unsigned long)>
c000b2c0:	89 04 24             	mov    DWORD PTR [esp],eax
c000b2c3:	89 c6                	mov    esi,eax
c000b2c5:	e8 b8 8b 00 00       	call   c0013e82 <CPU::CPU()>
c000b2ca:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b2d0:	58                   	pop    eax
c000b2d1:	5a                   	pop    edx
c000b2d2:	56                   	push   esi
c000b2d3:	53                   	push   ebx
c000b2d4:	e8 11 50 00 00       	call   c00102ea <Device::addChild(Device*)>
c000b2d9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b2df:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b2e5:	6a 00                	push   0x0
c000b2e7:	6a 00                	push   0x0
c000b2e9:	50                   	push   eax
c000b2ea:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b2ed:	83 c4 20             	add    esp,0x20
c000b2f0:	e8 5d 55 00 00       	call   c0010852 <setupFPU()>
c000b2f5:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b2fb:	85 c0                	test   eax,eax
c000b2fd:	74 1f                	je     c000b31e <Computer::open(int, int, void*)+0xb6>
c000b2ff:	83 ec 08             	sub    esp,0x8
c000b302:	50                   	push   eax
c000b303:	53                   	push   ebx
c000b304:	e8 e1 4f 00 00       	call   c00102ea <Device::addChild(Device*)>
c000b309:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b30f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b311:	6a 00                	push   0x0
c000b313:	6a 00                	push   0x0
c000b315:	6a 00                	push   0x0
c000b317:	50                   	push   eax
c000b318:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b31b:	83 c4 20             	add    esp,0x20
c000b31e:	83 ec 0c             	sub    esp,0xc
c000b321:	68 dc af 00 c0       	push   0xc000afdc
c000b326:	e8 33 c9 00 00       	call   c0017c5e <setupMultitasking(void (*)())>
c000b32b:	83 c4 14             	add    esp,0x14
c000b32e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b333:	5b                   	pop    ebx
c000b334:	5e                   	pop    esi
c000b335:	c3                   	ret    

c000b336 <Computer::disableNMI()>:
c000b336:	6a 00                	push   0x0
c000b338:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b33c:	e8 0f ff ff ff       	call   c000b250 <Computer::enableNMI(bool)>
c000b341:	58                   	pop    eax
c000b342:	5a                   	pop    edx
c000b343:	c3                   	ret    

c000b344 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b344:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b348:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b34f:	19 c0                	sbb    eax,eax
c000b351:	83 e0 80             	and    eax,0xffffff80
c000b354:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b358:	e6 70                	out    0x70,al
c000b35a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b35e:	e6 71                	out    0x71,al
c000b360:	c3                   	ret    
c000b361:	90                   	nop

c000b362 <Computer::handleNMI()>:
c000b362:	56                   	push   esi
c000b363:	53                   	push   ebx
c000b364:	83 ec 10             	sub    esp,0x10
c000b367:	e4 92                	in     al,0x92
c000b369:	89 c6                	mov    esi,eax
c000b36b:	e4 61                	in     al,0x61
c000b36d:	68 da 01 02 c0       	push   0xc00201da
c000b372:	88 c3                	mov    bl,al
c000b374:	e8 66 3b 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000b379:	83 c4 10             	add    esp,0x10
c000b37c:	83 e6 10             	and    esi,0x10
c000b37f:	75 0d                	jne    c000b38e <Computer::handleNMI()+0x2c>
c000b381:	f6 c3 40             	test   bl,0x40
c000b384:	75 1d                	jne    c000b3a3 <Computer::handleNMI()+0x41>
c000b386:	84 db                	test   bl,bl
c000b388:	78 2d                	js     c000b3b7 <Computer::handleNMI()+0x55>
c000b38a:	58                   	pop    eax
c000b38b:	5b                   	pop    ebx
c000b38c:	5e                   	pop    esi
c000b38d:	c3                   	ret    
c000b38e:	83 ec 0c             	sub    esp,0xc
c000b391:	68 eb 01 02 c0       	push   0xc00201eb
c000b396:	e8 d9 97 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c000b39b:	83 c4 10             	add    esp,0x10
c000b39e:	f6 c3 40             	test   bl,0x40
c000b3a1:	74 e3                	je     c000b386 <Computer::handleNMI()+0x24>
c000b3a3:	83 ec 0c             	sub    esp,0xc
c000b3a6:	68 f8 01 02 c0       	push   0xc00201f8
c000b3ab:	e8 c4 97 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c000b3b0:	83 c4 10             	add    esp,0x10
c000b3b3:	84 db                	test   bl,bl
c000b3b5:	79 d3                	jns    c000b38a <Computer::handleNMI()+0x28>
c000b3b7:	c7 44 24 10 02 02 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020202
c000b3bf:	5a                   	pop    edx
c000b3c0:	5b                   	pop    ebx
c000b3c1:	5e                   	pop    esi
c000b3c2:	e9 ad 97 00 00       	jmp    c0014b74 <Krnl::panic(char const*)>
c000b3c7:	90                   	nop

c000b3c8 <Computer::setDiskActivityLight(int, bool)>:
c000b3c8:	56                   	push   esi
c000b3c9:	53                   	push   ebx
c000b3ca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b3ce:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b3d3:	77 1b                	ja     c000b3f0 <Computer::setDiskActivityLight(int, bool)+0x28>
c000b3d5:	e4 92                	in     al,0x92
c000b3d7:	bb 40 00 00 00       	mov    ebx,0x40
c000b3dc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b3e0:	89 da                	mov    edx,ebx
c000b3e2:	d3 e2                	shl    edx,cl
c000b3e4:	89 f1                	mov    ecx,esi
c000b3e6:	f7 d2                	not    edx
c000b3e8:	d3 e3                	shl    ebx,cl
c000b3ea:	21 d0                	and    eax,edx
c000b3ec:	09 d8                	or     eax,ebx
c000b3ee:	e6 92                	out    0x92,al
c000b3f0:	5b                   	pop    ebx
c000b3f1:	5e                   	pop    esi
c000b3f2:	c3                   	ret    
c000b3f3:	90                   	nop

c000b3f4 <GDTEntry::setBase(unsigned int)>:
c000b3f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b3fc:	89 c1                	mov    ecx,eax
c000b3fe:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b402:	c1 e9 10             	shr    ecx,0x10
c000b405:	c1 e8 18             	shr    eax,0x18
c000b408:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b40b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b40e:	c3                   	ret    
c000b40f:	90                   	nop

c000b410 <GDTEntry::setLimit(unsigned int)>:
c000b410:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b414:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b418:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b41b:	66 89 01             	mov    WORD PTR [ecx],ax
c000b41e:	83 e2 f0             	and    edx,0xfffffff0
c000b421:	c1 e8 10             	shr    eax,0x10
c000b424:	83 e0 0f             	and    eax,0xf
c000b427:	09 d0                	or     eax,edx
c000b429:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b42c:	c3                   	ret    
c000b42d:	90                   	nop

c000b42e <GDT::GDT()>:
c000b42e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b432:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b43c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b442:	90                   	nop
c000b443:	c3                   	ret    

c000b444 <GDT::addEntry(GDTEntry)>:
c000b444:	53                   	push   ebx
c000b445:	83 ec 0c             	sub    esp,0xc
c000b448:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b44c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b44e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b455:	52                   	push   edx
c000b456:	50                   	push   eax
c000b457:	68 3c 02 02 c0       	push   0xc002023c
c000b45c:	e8 7e 3a 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000b461:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b463:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b467:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b46b:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b46f:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b473:	8d 50 01             	lea    edx,[eax+0x1]
c000b476:	c1 e0 03             	shl    eax,0x3
c000b479:	89 13                	mov    DWORD PTR [ebx],edx
c000b47b:	83 c4 18             	add    esp,0x18
c000b47e:	5b                   	pop    ebx
c000b47f:	c3                   	ret    

c000b480 <GDT::getNumberOfEntries()>:
c000b480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b484:	8b 00                	mov    eax,DWORD PTR [eax]
c000b486:	c3                   	ret    
c000b487:	90                   	nop

c000b488 <GDT::flush()>:
c000b488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b48c:	8b 10                	mov    edx,DWORD PTR [eax]
c000b48e:	83 c0 04             	add    eax,0x4
c000b491:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b498:	a3 12 35 02 c0       	mov    ds:0xc0023512,eax
c000b49d:	66 89 15 10 35 02 c0 	mov    WORD PTR ds:0xc0023510,dx
c000b4a4:	e9 8a 4e ff ff       	jmp    c0000333 <loadGDT>
c000b4a9:	90                   	nop

c000b4aa <GDT::setup()>:
c000b4aa:	55                   	push   ebp
c000b4ab:	57                   	push   edi
c000b4ac:	56                   	push   esi
c000b4ad:	53                   	push   ebx
c000b4ae:	83 ec 3c             	sub    esp,0x3c
c000b4b1:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b4b5:	6a 00                	push   0x0
c000b4b7:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b4bb:	53                   	push   ebx
c000b4bc:	e8 33 ff ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000b4c1:	6a 00                	push   0x0
c000b4c3:	53                   	push   ebx
c000b4c4:	e8 47 ff ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000b4c9:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b4d1:	6a 00                	push   0x0
c000b4d3:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b4d7:	53                   	push   ebx
c000b4d8:	e8 17 ff ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000b4dd:	68 ff ff ff 00       	push   0xffffff
c000b4e2:	53                   	push   ebx
c000b4e3:	e8 28 ff ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000b4e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b4ec:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b4f1:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b4f6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b4fa:	83 c4 20             	add    esp,0x20
c000b4fd:	6a 00                	push   0x0
c000b4ff:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b503:	53                   	push   ebx
c000b504:	e8 eb fe ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000b509:	68 ff ff ff 00       	push   0xffffff
c000b50e:	53                   	push   ebx
c000b50f:	e8 fc fe ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000b514:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b518:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b51c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b520:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b524:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b528:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b52d:	0d 00 92 c0 00       	or     eax,0xc09200
c000b532:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b536:	89 d8                	mov    eax,ebx
c000b538:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b53c:	80 cc 60             	or     ah,0x60
c000b53f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b543:	83 c4 0c             	add    esp,0xc
c000b546:	89 f8                	mov    eax,edi
c000b548:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b54c:	80 cc 60             	or     ah,0x60
c000b54f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b553:	89 c7                	mov    edi,eax
c000b555:	55                   	push   ebp
c000b556:	e8 e9 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b55b:	83 c4 0c             	add    esp,0xc
c000b55e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b562:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b566:	55                   	push   ebp
c000b567:	e8 d8 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b56c:	83 c4 0c             	add    esp,0xc
c000b56f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b573:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b577:	55                   	push   ebp
c000b578:	e8 c7 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b57d:	83 c4 0c             	add    esp,0xc
c000b580:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b584:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b588:	53                   	push   ebx
c000b589:	51                   	push   ecx
c000b58a:	55                   	push   ebp
c000b58b:	e8 b4 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b590:	83 c4 0c             	add    esp,0xc
c000b593:	57                   	push   edi
c000b594:	56                   	push   esi
c000b595:	55                   	push   ebp
c000b596:	e8 a9 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b59b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b59e:	e8 e5 fe ff ff       	call   c000b488 <GDT::flush()>
c000b5a3:	83 c4 4c             	add    esp,0x4c
c000b5a6:	5b                   	pop    ebx
c000b5a7:	5e                   	pop    esi
c000b5a8:	5f                   	pop    edi
c000b5a9:	5d                   	pop    ebp
c000b5aa:	c3                   	ret    

c000b5ab <idleFunction(void*)>:
c000b5ab:	53                   	push   ebx
c000b5ac:	83 ec 08             	sub    esp,0x8
c000b5af:	e8 82 c4 00 00       	call   c0017a36 <unlockScheduler()>
c000b5b4:	e8 b5 88 00 00       	call   c0013e6e <thisCPU()>
c000b5b9:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b5c0:	74 41                	je     c000b603 <idleFunction(void*)+0x58>
c000b5c2:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c000b5c7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5ce:	74 33                	je     c000b603 <idleFunction(void*)+0x58>
c000b5d0:	31 db                	xor    ebx,ebx
c000b5d2:	52                   	push   edx
c000b5d3:	52                   	push   edx
c000b5d4:	68 e1 00 00 00       	push   0xe1
c000b5d9:	50                   	push   eax
c000b5da:	e8 e7 fb ff ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c000b5df:	53                   	push   ebx
c000b5e0:	83 e0 02             	and    eax,0x2
c000b5e3:	50                   	push   eax
c000b5e4:	68 e1 00 00 00       	push   0xe1
c000b5e9:	ff 35 08 35 02 c0    	push   DWORD PTR ds:0xc0023508
c000b5ef:	e8 fe fb ff ff       	call   c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b5f4:	83 c4 20             	add    esp,0x20
c000b5f7:	e8 54 4b ff ff       	call   c0000150 <doTPAUSE>
c000b5fc:	e8 8f 32 01 00       	call   c001e890 <idleCommon()>
c000b601:	eb f4                	jmp    c000b5f7 <idleFunction(void*)+0x4c>
c000b603:	fb                   	sti    
c000b604:	f4                   	hlt    
c000b605:	e8 86 32 01 00       	call   c001e890 <idleCommon()>
c000b60a:	eb f7                	jmp    c000b603 <idleFunction(void*)+0x58>

c000b60c <IDTEntry::IDTEntry(bool)>:
c000b60c:	83 ec 04             	sub    esp,0x4
c000b60f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b613:	88 04 24             	mov    BYTE PTR [esp],al
c000b616:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b61a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b624:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b628:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b62c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b62f:	83 e2 f0             	and    edx,0xfffffff0
c000b632:	83 ca 0e             	or     edx,0xe
c000b635:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b63c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b63f:	83 e2 ef             	and    edx,0xffffffef
c000b642:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b645:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000b649:	74 04                	je     c000b64f <IDTEntry::IDTEntry(bool)+0x43>
c000b64b:	b2 03                	mov    dl,0x3
c000b64d:	eb 02                	jmp    c000b651 <IDTEntry::IDTEntry(bool)+0x45>
c000b64f:	b2 00                	mov    dl,0x0
c000b651:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b655:	83 e2 03             	and    edx,0x3
c000b658:	88 d1                	mov    cl,dl
c000b65a:	c1 e1 05             	shl    ecx,0x5
c000b65d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b660:	83 e2 9f             	and    edx,0xffffff9f
c000b663:	09 ca                	or     edx,ecx
c000b665:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b668:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b66c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b66f:	83 ca 80             	or     edx,0xffffff80
c000b672:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b675:	90                   	nop
c000b676:	83 c4 04             	add    esp,0x4
c000b679:	c3                   	ret    

c000b67a <IDTEntry::setOffset(unsigned int)>:
c000b67a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b67e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b682:	66 89 02             	mov    WORD PTR [edx],ax
c000b685:	c1 e8 10             	shr    eax,0x10
c000b688:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000b68c:	c3                   	ret    
c000b68d:	90                   	nop

c000b68e <IDT::IDT()>:
c000b68e:	90                   	nop
c000b68f:	c3                   	ret    

c000b690 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000b690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b694:	83 c0 30             	add    eax,0x30
c000b697:	c3                   	ret    

c000b698 <IDT::addEntry(IDTEntry, int)>:
c000b698:	53                   	push   ebx
c000b699:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b69d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b6a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b6a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b6a9:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000b6ac:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000b6b0:	5b                   	pop    ebx
c000b6b1:	c3                   	ret    

c000b6b2 <IDT::addEntry(int, void (*)(), bool)>:
c000b6b2:	53                   	push   ebx
c000b6b3:	83 ec 10             	sub    esp,0x10
c000b6b6:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000b6bb:	50                   	push   eax
c000b6bc:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000b6c0:	53                   	push   ebx
c000b6c1:	e8 46 ff ff ff       	call   c000b60c <IDTEntry::IDTEntry(bool)>
c000b6c6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b6ca:	53                   	push   ebx
c000b6cb:	e8 aa ff ff ff       	call   c000b67a <IDTEntry::setOffset(unsigned int)>
c000b6d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b6d4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b6d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b6dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6e0:	e8 b3 ff ff ff       	call   c000b698 <IDT::addEntry(IDTEntry, int)>
c000b6e5:	83 c4 30             	add    esp,0x30
c000b6e8:	5b                   	pop    ebx
c000b6e9:	c3                   	ret    

c000b6ea <IDT::flush()>:
c000b6ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6ee:	66 c7 05 18 35 02 c0 ff 07 	mov    WORD PTR ds:0xc0023518,0x7ff
c000b6f7:	a3 1a 35 02 c0       	mov    ds:0xc002351a,eax
c000b6fc:	0f 01 1d 18 35 02 c0 	lidtd  ds:0xc0023518
c000b703:	c3                   	ret    

c000b704 <IDT::setup()>:
c000b704:	57                   	push   edi
c000b705:	56                   	push   esi
c000b706:	53                   	push   ebx
c000b707:	83 ec 10             	sub    esp,0x10
c000b70a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b70e:	6a 00                	push   0x0
c000b710:	68 53 03 00 c0       	push   0xc0000353
c000b715:	6a 00                	push   0x0
c000b717:	53                   	push   ebx
c000b718:	e8 95 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b71d:	6a 00                	push   0x0
c000b71f:	68 63 03 00 c0       	push   0xc0000363
c000b724:	6a 01                	push   0x1
c000b726:	53                   	push   ebx
c000b727:	e8 86 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b72c:	83 c4 20             	add    esp,0x20
c000b72f:	6a 00                	push   0x0
c000b731:	68 6d 03 00 c0       	push   0xc000036d
c000b736:	6a 02                	push   0x2
c000b738:	53                   	push   ebx
c000b739:	e8 74 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b73e:	6a 00                	push   0x0
c000b740:	68 77 03 00 c0       	push   0xc0000377
c000b745:	6a 03                	push   0x3
c000b747:	53                   	push   ebx
c000b748:	e8 65 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b74d:	83 c4 20             	add    esp,0x20
c000b750:	6a 00                	push   0x0
c000b752:	68 81 03 00 c0       	push   0xc0000381
c000b757:	6a 04                	push   0x4
c000b759:	53                   	push   ebx
c000b75a:	e8 53 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b75f:	6a 00                	push   0x0
c000b761:	68 8b 03 00 c0       	push   0xc000038b
c000b766:	6a 05                	push   0x5
c000b768:	53                   	push   ebx
c000b769:	e8 44 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b76e:	83 c4 20             	add    esp,0x20
c000b771:	6a 00                	push   0x0
c000b773:	68 95 03 00 c0       	push   0xc0000395
c000b778:	6a 06                	push   0x6
c000b77a:	53                   	push   ebx
c000b77b:	e8 32 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b780:	6a 00                	push   0x0
c000b782:	68 9f 03 00 c0       	push   0xc000039f
c000b787:	6a 07                	push   0x7
c000b789:	53                   	push   ebx
c000b78a:	e8 23 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b78f:	83 c4 20             	add    esp,0x20
c000b792:	6a 00                	push   0x0
c000b794:	68 a9 03 00 c0       	push   0xc00003a9
c000b799:	6a 08                	push   0x8
c000b79b:	53                   	push   ebx
c000b79c:	e8 11 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7a1:	6a 00                	push   0x0
c000b7a3:	68 b1 03 00 c0       	push   0xc00003b1
c000b7a8:	6a 09                	push   0x9
c000b7aa:	53                   	push   ebx
c000b7ab:	e8 02 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7b0:	83 c4 20             	add    esp,0x20
c000b7b3:	6a 00                	push   0x0
c000b7b5:	68 bb 03 00 c0       	push   0xc00003bb
c000b7ba:	6a 0a                	push   0xa
c000b7bc:	53                   	push   ebx
c000b7bd:	e8 f0 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7c2:	6a 00                	push   0x0
c000b7c4:	68 c3 03 00 c0       	push   0xc00003c3
c000b7c9:	6a 0b                	push   0xb
c000b7cb:	53                   	push   ebx
c000b7cc:	e8 e1 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7d1:	83 c4 20             	add    esp,0x20
c000b7d4:	6a 00                	push   0x0
c000b7d6:	68 cb 03 00 c0       	push   0xc00003cb
c000b7db:	6a 0c                	push   0xc
c000b7dd:	53                   	push   ebx
c000b7de:	e8 cf fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7e3:	6a 00                	push   0x0
c000b7e5:	68 d3 03 00 c0       	push   0xc00003d3
c000b7ea:	6a 0d                	push   0xd
c000b7ec:	53                   	push   ebx
c000b7ed:	e8 c0 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7f2:	83 c4 20             	add    esp,0x20
c000b7f5:	6a 00                	push   0x0
c000b7f7:	68 db 03 00 c0       	push   0xc00003db
c000b7fc:	6a 0e                	push   0xe
c000b7fe:	53                   	push   ebx
c000b7ff:	e8 ae fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b804:	6a 00                	push   0x0
c000b806:	68 e3 03 00 c0       	push   0xc00003e3
c000b80b:	6a 0f                	push   0xf
c000b80d:	53                   	push   ebx
c000b80e:	e8 9f fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b813:	83 c4 20             	add    esp,0x20
c000b816:	6a 00                	push   0x0
c000b818:	68 ed 03 00 c0       	push   0xc00003ed
c000b81d:	6a 10                	push   0x10
c000b81f:	53                   	push   ebx
c000b820:	e8 8d fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b825:	6a 00                	push   0x0
c000b827:	68 f7 03 00 c0       	push   0xc00003f7
c000b82c:	6a 11                	push   0x11
c000b82e:	53                   	push   ebx
c000b82f:	e8 7e fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b834:	83 c4 20             	add    esp,0x20
c000b837:	6a 00                	push   0x0
c000b839:	68 01 04 00 c0       	push   0xc0000401
c000b83e:	6a 12                	push   0x12
c000b840:	53                   	push   ebx
c000b841:	e8 6c fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b846:	6a 01                	push   0x1
c000b848:	68 0b 04 00 c0       	push   0xc000040b
c000b84d:	6a 60                	push   0x60
c000b84f:	53                   	push   ebx
c000b850:	e8 5d fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b855:	83 c4 20             	add    esp,0x20
c000b858:	6a 00                	push   0x0
c000b85a:	68 15 04 00 c0       	push   0xc0000415
c000b85f:	6a 20                	push   0x20
c000b861:	53                   	push   ebx
c000b862:	e8 4b fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b867:	6a 00                	push   0x0
c000b869:	68 1f 04 00 c0       	push   0xc000041f
c000b86e:	6a 21                	push   0x21
c000b870:	53                   	push   ebx
c000b871:	e8 3c fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b876:	83 c4 20             	add    esp,0x20
c000b879:	6a 00                	push   0x0
c000b87b:	68 29 04 00 c0       	push   0xc0000429
c000b880:	6a 22                	push   0x22
c000b882:	53                   	push   ebx
c000b883:	e8 2a fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b888:	6a 00                	push   0x0
c000b88a:	68 33 04 00 c0       	push   0xc0000433
c000b88f:	6a 23                	push   0x23
c000b891:	53                   	push   ebx
c000b892:	e8 1b fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b897:	83 c4 20             	add    esp,0x20
c000b89a:	6a 00                	push   0x0
c000b89c:	68 3d 04 00 c0       	push   0xc000043d
c000b8a1:	6a 24                	push   0x24
c000b8a3:	53                   	push   ebx
c000b8a4:	e8 09 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8a9:	6a 00                	push   0x0
c000b8ab:	68 47 04 00 c0       	push   0xc0000447
c000b8b0:	6a 25                	push   0x25
c000b8b2:	53                   	push   ebx
c000b8b3:	e8 fa fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8b8:	83 c4 20             	add    esp,0x20
c000b8bb:	6a 00                	push   0x0
c000b8bd:	68 51 04 00 c0       	push   0xc0000451
c000b8c2:	6a 26                	push   0x26
c000b8c4:	53                   	push   ebx
c000b8c5:	e8 e8 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8ca:	6a 00                	push   0x0
c000b8cc:	68 5b 04 00 c0       	push   0xc000045b
c000b8d1:	6a 27                	push   0x27
c000b8d3:	53                   	push   ebx
c000b8d4:	e8 d9 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8d9:	83 c4 20             	add    esp,0x20
c000b8dc:	6a 00                	push   0x0
c000b8de:	68 65 04 00 c0       	push   0xc0000465
c000b8e3:	6a 28                	push   0x28
c000b8e5:	53                   	push   ebx
c000b8e6:	e8 c7 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8eb:	6a 00                	push   0x0
c000b8ed:	68 6f 04 00 c0       	push   0xc000046f
c000b8f2:	6a 29                	push   0x29
c000b8f4:	53                   	push   ebx
c000b8f5:	e8 b8 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8fa:	83 c4 20             	add    esp,0x20
c000b8fd:	6a 00                	push   0x0
c000b8ff:	68 79 04 00 c0       	push   0xc0000479
c000b904:	6a 2a                	push   0x2a
c000b906:	53                   	push   ebx
c000b907:	e8 a6 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b90c:	6a 00                	push   0x0
c000b90e:	68 83 04 00 c0       	push   0xc0000483
c000b913:	6a 2b                	push   0x2b
c000b915:	53                   	push   ebx
c000b916:	e8 97 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b91b:	83 c4 20             	add    esp,0x20
c000b91e:	6a 00                	push   0x0
c000b920:	68 8d 04 00 c0       	push   0xc000048d
c000b925:	6a 2c                	push   0x2c
c000b927:	53                   	push   ebx
c000b928:	e8 85 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b92d:	6a 00                	push   0x0
c000b92f:	68 97 04 00 c0       	push   0xc0000497
c000b934:	6a 2d                	push   0x2d
c000b936:	53                   	push   ebx
c000b937:	e8 76 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b93c:	83 c4 20             	add    esp,0x20
c000b93f:	6a 00                	push   0x0
c000b941:	68 a1 04 00 c0       	push   0xc00004a1
c000b946:	6a 2e                	push   0x2e
c000b948:	53                   	push   ebx
c000b949:	e8 64 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b94e:	6a 00                	push   0x0
c000b950:	68 ab 04 00 c0       	push   0xc00004ab
c000b955:	6a 2f                	push   0x2f
c000b957:	53                   	push   ebx
c000b958:	e8 55 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b95d:	83 c4 20             	add    esp,0x20
c000b960:	6a 00                	push   0x0
c000b962:	68 b5 04 00 c0       	push   0xc00004b5
c000b967:	6a 30                	push   0x30
c000b969:	53                   	push   ebx
c000b96a:	e8 43 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b96f:	6a 00                	push   0x0
c000b971:	68 bf 04 00 c0       	push   0xc00004bf
c000b976:	6a 31                	push   0x31
c000b978:	53                   	push   ebx
c000b979:	e8 34 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b97e:	83 c4 20             	add    esp,0x20
c000b981:	6a 00                	push   0x0
c000b983:	68 c9 04 00 c0       	push   0xc00004c9
c000b988:	6a 32                	push   0x32
c000b98a:	53                   	push   ebx
c000b98b:	e8 22 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b990:	6a 00                	push   0x0
c000b992:	68 d3 04 00 c0       	push   0xc00004d3
c000b997:	6a 33                	push   0x33
c000b999:	53                   	push   ebx
c000b99a:	e8 13 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b99f:	83 c4 20             	add    esp,0x20
c000b9a2:	6a 00                	push   0x0
c000b9a4:	68 dd 04 00 c0       	push   0xc00004dd
c000b9a9:	6a 34                	push   0x34
c000b9ab:	53                   	push   ebx
c000b9ac:	e8 01 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9b1:	6a 00                	push   0x0
c000b9b3:	68 e7 04 00 c0       	push   0xc00004e7
c000b9b8:	6a 35                	push   0x35
c000b9ba:	53                   	push   ebx
c000b9bb:	e8 f2 fc ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9c0:	83 c4 20             	add    esp,0x20
c000b9c3:	6a 00                	push   0x0
c000b9c5:	68 f1 04 00 c0       	push   0xc00004f1
c000b9ca:	6a 36                	push   0x36
c000b9cc:	53                   	push   ebx
c000b9cd:	e8 e0 fc ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9d2:	6a 00                	push   0x0
c000b9d4:	68 fb 04 00 c0       	push   0xc00004fb
c000b9d9:	6a 37                	push   0x37
c000b9db:	53                   	push   ebx
c000b9dc:	e8 d1 fc ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9e1:	83 c4 20             	add    esp,0x20
c000b9e4:	e8 06 24 00 00       	call   c000ddef <Virt::getAKernelVAS()>
c000b9e9:	52                   	push   edx
c000b9ea:	6a 03                	push   0x3
c000b9ec:	6a 02                	push   0x2
c000b9ee:	50                   	push   eax
c000b9ef:	e8 a2 29 00 00       	call   c000e396 <VAS::allocatePages(int, int)>
c000b9f4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b9fb:	89 c6                	mov    esi,eax
c000b9fd:	e8 ee 33 00 00       	call   c000edf0 <operator new(unsigned long)>
c000ba02:	81 c6 00 20 00 00    	add    esi,0x2000
c000ba08:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba0b:	89 c7                	mov    edi,eax
c000ba0d:	e8 3a 1c 00 00       	call   c000d64c <TSS::TSS()>
c000ba12:	83 c4 0c             	add    esp,0xc
c000ba15:	68 a9 03 00 c0       	push   0xc00003a9
c000ba1a:	56                   	push   esi
c000ba1b:	57                   	push   edi
c000ba1c:	e8 6b 1c 00 00       	call   c000d68c <TSS::setup(unsigned long, unsigned long)>
c000ba21:	59                   	pop    ecx
c000ba22:	89 c6                	mov    esi,eax
c000ba24:	5f                   	pop    edi
c000ba25:	6a 00                	push   0x0
c000ba27:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ba2b:	50                   	push   eax
c000ba2c:	e8 db fb ff ff       	call   c000b60c <IDTEntry::IDTEntry(bool)>
c000ba31:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ba35:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ba3a:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ba41:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ba47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ba4b:	80 ce 05             	or     dh,0x5
c000ba4e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ba51:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba55:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ba59:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ba5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ba5f:	e8 86 fc ff ff       	call   c000b6ea <IDT::flush()>
c000ba64:	83 c4 20             	add    esp,0x20
c000ba67:	5b                   	pop    ebx
c000ba68:	5e                   	pop    esi
c000ba69:	5f                   	pop    edi
c000ba6a:	c3                   	ret    

c000ba6b <sbrk>:
c000ba6b:	55                   	push   ebp
c000ba6c:	57                   	push   edi
c000ba6d:	56                   	push   esi
c000ba6e:	53                   	push   ebx
c000ba6f:	83 ec 1c             	sub    esp,0x1c
c000ba72:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ba76:	85 db                	test   ebx,ebx
c000ba78:	74 37                	je     c000bab1 <sbrk+0x46>
c000ba7a:	78 3f                	js     c000babb <sbrk+0x50>
c000ba7c:	e8 ed 83 00 00       	call   c0013e6e <thisCPU()>
c000ba81:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000ba87:	83 e0 01             	and    eax,0x1
c000ba8a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000ba8e:	a1 34 29 02 c0       	mov    eax,ds:0xc0022934
c000ba93:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba97:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000ba9d:	89 d8                	mov    eax,ebx
c000ba9f:	78 35                	js     c000bad6 <sbrk+0x6b>
c000baa1:	c1 f8 0c             	sar    eax,0xc
c000baa4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000baa8:	89 c7                	mov    edi,eax
c000baaa:	be 00 00 00 00       	mov    esi,0x0
c000baaf:	eb 3c                	jmp    c000baed <sbrk+0x82>
c000bab1:	a1 34 29 02 c0       	mov    eax,ds:0xc0022934
c000bab6:	e9 ad 00 00 00       	jmp    c000bb68 <sbrk+0xfd>
c000babb:	83 ec 08             	sub    esp,0x8
c000babe:	53                   	push   ebx
c000babf:	68 58 02 02 c0       	push   0xc0020258
c000bac4:	e8 16 34 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000bac9:	83 c4 10             	add    esp,0x10
c000bacc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bad1:	e9 92 00 00 00       	jmp    c000bb68 <sbrk+0xfd>
c000bad6:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000badc:	eb c3                	jmp    c000baa1 <sbrk+0x36>
c000bade:	81 05 34 29 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0022934,0x1000
c000bae8:	46                   	inc    esi
c000bae9:	39 f7                	cmp    edi,esi
c000baeb:	74 34                	je     c000bb21 <sbrk+0xb6>
c000baed:	e8 fd 22 00 00       	call   c000ddef <Virt::getAKernelVAS()>
c000baf2:	89 c3                	mov    ebx,eax
c000baf4:	8b 2d 34 29 02 c0    	mov    ebp,DWORD PTR ds:0xc0022934
c000bafa:	e8 c9 06 00 00       	call   c000c1c8 <Phys::allocatePage()>
c000baff:	68 01 04 00 00       	push   0x401
c000bb04:	55                   	push   ebp
c000bb05:	50                   	push   eax
c000bb06:	53                   	push   ebx
c000bb07:	e8 8a 27 00 00       	call   c000e296 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bb0c:	83 c4 10             	add    esp,0x10
c000bb0f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bb14:	74 c8                	je     c000bade <sbrk+0x73>
c000bb16:	8b 1d 34 29 02 c0    	mov    ebx,DWORD PTR ds:0xc0022934
c000bb1c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb1f:	eb bd                	jmp    c000bade <sbrk+0x73>
c000bb21:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bb26:	74 48                	je     c000bb70 <sbrk+0x105>
c000bb28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bb2c:	89 d3                	mov    ebx,edx
c000bb2e:	c1 eb 0a             	shr    ebx,0xa
c000bb31:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bb37:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bb3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb41:	c1 e0 0c             	shl    eax,0xc
c000bb44:	01 d0                	add    eax,edx
c000bb46:	c1 e8 0a             	shr    eax,0xa
c000bb49:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bb4e:	2d 00 00 40 00       	sub    eax,0x400000
c000bb53:	39 c3                	cmp    ebx,eax
c000bb55:	77 0d                	ja     c000bb64 <sbrk+0xf9>
c000bb57:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb5a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bb60:	39 d8                	cmp    eax,ebx
c000bb62:	73 f3                	jae    c000bb57 <sbrk+0xec>
c000bb64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb68:	83 c4 1c             	add    esp,0x1c
c000bb6b:	5b                   	pop    ebx
c000bb6c:	5e                   	pop    esi
c000bb6d:	5f                   	pop    edi
c000bb6e:	5d                   	pop    ebp
c000bb6f:	c3                   	ret    
c000bb70:	e8 30 2d 01 00       	call   c001e8a5 <CPU::readCR3()>
c000bb75:	83 ec 0c             	sub    esp,0xc
c000bb78:	50                   	push   eax
c000bb79:	e8 39 2d 01 00       	call   c001e8b7 <CPU::writeCR3(unsigned long)>
c000bb7e:	83 c4 10             	add    esp,0x10
c000bb81:	eb e1                	jmp    c000bb64 <sbrk+0xf9>

c000bb83 <mmap>:
c000bb83:	83 ec 18             	sub    esp,0x18
c000bb86:	68 88 02 02 c0       	push   0xc0020288
c000bb8b:	e8 e4 8f 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c000bb90:	b8 00 00 00 00       	mov    eax,0x0
c000bb95:	83 c4 1c             	add    esp,0x1c
c000bb98:	c3                   	ret    

c000bb99 <munmap>:
c000bb99:	83 ec 18             	sub    esp,0x18
c000bb9c:	68 8d 02 02 c0       	push   0xc002028d
c000bba1:	e8 ce 8f 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c000bba6:	b8 00 00 00 00       	mov    eax,0x0
c000bbab:	83 c4 1c             	add    esp,0x1c
c000bbae:	c3                   	ret    

c000bbaf <liballoc_lock()>:
c000bbaf:	83 ec 0c             	sub    esp,0xc
c000bbb2:	e8 7d be 00 00       	call   c0017a34 <lockScheduler()>
c000bbb7:	b8 00 00 00 00       	mov    eax,0x0
c000bbbc:	83 c4 0c             	add    esp,0xc
c000bbbf:	c3                   	ret    

c000bbc0 <liballoc_unlock()>:
c000bbc0:	83 ec 0c             	sub    esp,0xc
c000bbc3:	e8 6e be 00 00       	call   c0017a36 <unlockScheduler()>
c000bbc8:	b8 00 00 00 00       	mov    eax,0x0
c000bbcd:	83 c4 0c             	add    esp,0xc
c000bbd0:	c3                   	ret    

c000bbd1 <liballoc_alloc(int)>:
c000bbd1:	83 ec 0c             	sub    esp,0xc
c000bbd4:	e8 16 22 00 00       	call   c000ddef <Virt::getAKernelVAS()>
c000bbd9:	83 ec 04             	sub    esp,0x4
c000bbdc:	6a 01                	push   0x1
c000bbde:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbe2:	50                   	push   eax
c000bbe3:	e8 ae 27 00 00       	call   c000e396 <VAS::allocatePages(int, int)>
c000bbe8:	83 c4 1c             	add    esp,0x1c
c000bbeb:	c3                   	ret    

c000bbec <liballoc_free(void*, int)>:
c000bbec:	83 ec 0c             	sub    esp,0xc
c000bbef:	e8 fb 21 00 00       	call   c000ddef <Virt::getAKernelVAS()>
c000bbf4:	83 ec 08             	sub    esp,0x8
c000bbf7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbfb:	50                   	push   eax
c000bbfc:	e8 b7 24 00 00       	call   c000e0b8 <VAS::freeAllocatedPages(unsigned long)>
c000bc01:	b8 00 00 00 00       	mov    eax,0x0
c000bc06:	83 c4 1c             	add    esp,0x1c
c000bc09:	c3                   	ret    

c000bc0a <realloc>:
c000bc0a:	83 ec 14             	sub    esp,0x14
c000bc0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc15:	e8 67 57 ff ff       	call   c0001381 <dlrealloc>
c000bc1a:	83 c4 1c             	add    esp,0x1c
c000bc1d:	c3                   	ret    

c000bc1e <malloc>:
c000bc1e:	83 ec 18             	sub    esp,0x18
c000bc21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc25:	e8 1a 52 ff ff       	call   c0000e44 <dlmalloc>
c000bc2a:	83 c4 1c             	add    esp,0x1c
c000bc2d:	c3                   	ret    

c000bc2e <free>:
c000bc2e:	83 ec 18             	sub    esp,0x18
c000bc31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc35:	e8 af 4e ff ff       	call   c0000ae9 <dlfree>
c000bc3a:	83 c4 1c             	add    esp,0x1c
c000bc3d:	c3                   	ret    

c000bc3e <rfree>:
c000bc3e:	83 ec 18             	sub    esp,0x18
c000bc41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc45:	e8 e4 ff ff ff       	call   c000bc2e <free>
c000bc4a:	83 c4 1c             	add    esp,0x1c
c000bc4d:	c3                   	ret    

c000bc4e <calloc>:
c000bc4e:	56                   	push   esi
c000bc4f:	53                   	push   ebx
c000bc50:	83 ec 10             	sub    esp,0x10
c000bc53:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bc57:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000bc5c:	53                   	push   ebx
c000bc5d:	e8 bc ff ff ff       	call   c000bc1e <malloc>
c000bc62:	89 c6                	mov    esi,eax
c000bc64:	83 c4 0c             	add    esp,0xc
c000bc67:	53                   	push   ebx
c000bc68:	6a 00                	push   0x0
c000bc6a:	50                   	push   eax
c000bc6b:	e8 98 49 ff ff       	call   c0000608 <memset>
c000bc70:	89 f0                	mov    eax,esi
c000bc72:	83 c4 14             	add    esp,0x14
c000bc75:	5b                   	pop    ebx
c000bc76:	5e                   	pop    esi
c000bc77:	c3                   	ret    

c000bc78 <hwTextMode_loadInData(VgaText*)>:
c000bc78:	57                   	push   edi
c000bc79:	56                   	push   esi
c000bc7a:	53                   	push   ebx
c000bc7b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bc7f:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000bc85:	85 c0                	test   eax,eax
c000bc87:	7e 30                	jle    c000bcb9 <hwTextMode_loadInData(VgaText*)+0x41>
c000bc89:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000bc8c:	31 f6                	xor    esi,esi
c000bc8e:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000bc91:	31 c0                	xor    eax,eax
c000bc93:	c1 e1 05             	shl    ecx,0x5
c000bc96:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000bc9c:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000bca0:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000bca4:	40                   	inc    eax
c000bca5:	83 f8 50             	cmp    eax,0x50
c000bca8:	75 f2                	jne    c000bc9c <hwTextMode_loadInData(VgaText*)+0x24>
c000bcaa:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000bcb0:	46                   	inc    esi
c000bcb1:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000bcb7:	7f d5                	jg     c000bc8e <hwTextMode_loadInData(VgaText*)+0x16>
c000bcb9:	5b                   	pop    ebx
c000bcba:	5e                   	pop    esi
c000bcbb:	5f                   	pop    edi
c000bcbc:	c3                   	ret    

c000bcbd <hwTextMode_loadInTitle(VgaText*, char*)>:
c000bcbd:	56                   	push   esi
c000bcbe:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000bcc3:	53                   	push   ebx
c000bcc4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bcc8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bccc:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000bcd2:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000bcd8:	c1 e0 04             	shl    eax,0x4
c000bcdb:	83 e6 0f             	and    esi,0xf
c000bcde:	0f b6 c0             	movzx  eax,al
c000bce1:	41                   	inc    ecx
c000bce2:	09 f0                	or     eax,esi
c000bce4:	83 c2 02             	add    edx,0x2
c000bce7:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000bceb:	c1 e0 08             	shl    eax,0x8
c000bcee:	09 f0                	or     eax,esi
c000bcf0:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000bcf4:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000bcfa:	75 d0                	jne    c000bccc <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000bcfc:	5b                   	pop    ebx
c000bcfd:	5e                   	pop    esi
c000bcfe:	c3                   	ret    

c000bcff <hwTextMode_showCursor(VgaText*, bool)>:
c000bcff:	56                   	push   esi
c000bd00:	53                   	push   ebx
c000bd01:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000bd06:	74 38                	je     c000bd40 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000bd08:	bb d4 03 00 00       	mov    ebx,0x3d4
c000bd0d:	b0 0a                	mov    al,0xa
c000bd0f:	89 da                	mov    edx,ebx
c000bd11:	ee                   	out    dx,al
c000bd12:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000bd17:	89 ca                	mov    edx,ecx
c000bd19:	ec                   	in     al,dx
c000bd1a:	b2 0f                	mov    dl,0xf
c000bd1c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bd20:	83 e0 c0             	and    eax,0xffffffc0
c000bd23:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000bd29:	09 d0                	or     eax,edx
c000bd2b:	89 ca                	mov    edx,ecx
c000bd2d:	ee                   	out    dx,al
c000bd2e:	b0 0b                	mov    al,0xb
c000bd30:	89 da                	mov    edx,ebx
c000bd32:	ee                   	out    dx,al
c000bd33:	89 ca                	mov    edx,ecx
c000bd35:	ec                   	in     al,dx
c000bd36:	83 e0 e0             	and    eax,0xffffffe0
c000bd39:	83 c8 0f             	or     eax,0xf
c000bd3c:	ee                   	out    dx,al
c000bd3d:	5b                   	pop    ebx
c000bd3e:	5e                   	pop    esi
c000bd3f:	c3                   	ret    
c000bd40:	b0 0a                	mov    al,0xa
c000bd42:	ba d4 03 00 00       	mov    edx,0x3d4
c000bd47:	ee                   	out    dx,al
c000bd48:	b0 20                	mov    al,0x20
c000bd4a:	ba d5 03 00 00       	mov    edx,0x3d5
c000bd4f:	ee                   	out    dx,al
c000bd50:	5b                   	pop    ebx
c000bd51:	5e                   	pop    esi
c000bd52:	c3                   	ret    

c000bd53 <hwTextMode_update(VgaText*)>:
c000bd53:	c3                   	ret    

c000bd54 <hwTextMode_updateCursor(VgaText*)>:
c000bd54:	56                   	push   esi
c000bd55:	b9 19 00 00 00       	mov    ecx,0x19
c000bd5a:	53                   	push   ebx
c000bd5b:	be d4 03 00 00       	mov    esi,0x3d4
c000bd60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd64:	89 f2                	mov    edx,esi
c000bd66:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000bd6c:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000bd72:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000bd75:	c1 e1 04             	shl    ecx,0x4
c000bd78:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000bd7e:	b0 0f                	mov    al,0xf
c000bd80:	ee                   	out    dx,al
c000bd81:	bb d5 03 00 00       	mov    ebx,0x3d5
c000bd86:	88 c8                	mov    al,cl
c000bd88:	89 da                	mov    edx,ebx
c000bd8a:	ee                   	out    dx,al
c000bd8b:	b0 0e                	mov    al,0xe
c000bd8d:	89 f2                	mov    edx,esi
c000bd8f:	ee                   	out    dx,al
c000bd90:	89 c8                	mov    eax,ecx
c000bd92:	89 da                	mov    edx,ebx
c000bd94:	66 c1 e8 08          	shr    ax,0x8
c000bd98:	ee                   	out    dx,al
c000bd99:	5b                   	pop    ebx
c000bd9a:	5e                   	pop    esi
c000bd9b:	c3                   	ret    

c000bd9c <hwTextMode_disableBlink(VgaText*, bool)>:
c000bd9c:	ba da 03 00 00       	mov    edx,0x3da
c000bda1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000bda6:	75 18                	jne    c000bdc0 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000bda8:	ec                   	in     al,dx
c000bda9:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000bdae:	b0 30                	mov    al,0x30
c000bdb0:	89 ca                	mov    edx,ecx
c000bdb2:	ee                   	out    dx,al
c000bdb3:	ba c1 03 00 00       	mov    edx,0x3c1
c000bdb8:	ec                   	in     al,dx
c000bdb9:	83 c8 08             	or     eax,0x8
c000bdbc:	89 ca                	mov    edx,ecx
c000bdbe:	ee                   	out    dx,al
c000bdbf:	c3                   	ret    
c000bdc0:	ec                   	in     al,dx
c000bdc1:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000bdc6:	b0 30                	mov    al,0x30
c000bdc8:	89 ca                	mov    edx,ecx
c000bdca:	ee                   	out    dx,al
c000bdcb:	ba c1 03 00 00       	mov    edx,0x3c1
c000bdd0:	ec                   	in     al,dx
c000bdd1:	83 e0 f7             	and    eax,0xfffffff7
c000bdd4:	89 ca                	mov    edx,ecx
c000bdd6:	ee                   	out    dx,al
c000bdd7:	c3                   	ret    

c000bdd8 <hwTextMode_scrollScreen(VgaText*)>:
c000bdd8:	55                   	push   ebp
c000bdd9:	bd 02 00 00 00       	mov    ebp,0x2
c000bdde:	57                   	push   edi
c000bddf:	56                   	push   esi
c000bde0:	53                   	push   ebx
c000bde1:	83 ec 1c             	sub    esp,0x1c
c000bde4:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000bdec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bdf0:	31 c0                	xor    eax,eax
c000bdf2:	eb 0b                	jmp    c000bdff <hwTextMode_scrollScreen(VgaText*)+0x27>
c000bdf4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000bdfa:	74 57                	je     c000be53 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000bdfc:	43                   	inc    ebx
c000bdfd:	89 f0                	mov    eax,esi
c000bdff:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000be05:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000be0b:	88 13                	mov    BYTE PTR [ebx],dl
c000be0d:	8d 70 01             	lea    esi,[eax+0x1]
c000be10:	83 fd 18             	cmp    ebp,0x18
c000be13:	75 df                	jne    c000bdf4 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000be15:	a8 01                	test   al,0x1
c000be17:	75 13                	jne    c000be2c <hwTextMode_scrollScreen(VgaText*)+0x54>
c000be19:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000be1c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000be22:	75 d8                	jne    c000bdfc <hwTextMode_scrollScreen(VgaText*)+0x24>
c000be24:	83 c4 1c             	add    esp,0x1c
c000be27:	5b                   	pop    ebx
c000be28:	5e                   	pop    esi
c000be29:	5f                   	pop    edi
c000be2a:	5d                   	pop    ebp
c000be2b:	c3                   	ret    
c000be2c:	83 ec 08             	sub    esp,0x8
c000be2f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000be33:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000be3a:	50                   	push   eax
c000be3b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000be3f:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000be46:	50                   	push   eax
c000be47:	e8 e0 0a 00 00       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	88 07                	mov    BYTE PTR [edi],al
c000be51:	eb c9                	jmp    c000be1c <hwTextMode_scrollScreen(VgaText*)+0x44>
c000be53:	45                   	inc    ebp
c000be54:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000be5c:	eb 8e                	jmp    c000bdec <hwTextMode_scrollScreen(VgaText*)+0x14>

c000be5e <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000be5e:	56                   	push   esi
c000be5f:	53                   	push   ebx
c000be60:	83 ec 0c             	sub    esp,0xc
c000be63:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000be67:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000be6b:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000be70:	50                   	push   eax
c000be71:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000be76:	50                   	push   eax
c000be77:	e8 b0 0a 00 00       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000be7c:	5a                   	pop    edx
c000be7d:	0f b6 c0             	movzx  eax,al
c000be80:	59                   	pop    ecx
c000be81:	50                   	push   eax
c000be82:	89 f0                	mov    eax,esi
c000be84:	0f be f0             	movsx  esi,al
c000be87:	56                   	push   esi
c000be88:	e8 45 0b 00 00       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000be8d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000be91:	ba 19 00 00 00       	mov    edx,0x19
c000be96:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000be9c:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000be9f:	8d 14 92             	lea    edx,[edx+edx*4]
c000bea2:	c1 e1 04             	shl    ecx,0x4
c000bea5:	c1 e2 04             	shl    edx,0x4
c000bea8:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000beac:	01 ca                	add    edx,ecx
c000beae:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000beb6:	83 c4 14             	add    esp,0x14
c000beb9:	5b                   	pop    ebx
c000beba:	5e                   	pop    esi
c000bebb:	c3                   	ret    

c000bebc <setupTextMode()>:
c000bebc:	c7 05 b8 35 02 c0 9c bd 00 c0 	mov    DWORD PTR ds:0xc00235b8,0xc000bd9c
c000bec6:	c7 05 a4 35 02 c0 78 bc 00 c0 	mov    DWORD PTR ds:0xc00235a4,0xc000bc78
c000bed0:	c7 05 a0 35 02 c0 bd bc 00 c0 	mov    DWORD PTR ds:0xc00235a0,0xc000bcbd
c000beda:	c7 05 ac 35 02 c0 d8 bd 00 c0 	mov    DWORD PTR ds:0xc00235ac,0xc000bdd8
c000bee4:	c7 05 b4 35 02 c0 ff bc 00 c0 	mov    DWORD PTR ds:0xc00235b4,0xc000bcff
c000beee:	c7 05 a8 35 02 c0 53 bd 00 c0 	mov    DWORD PTR ds:0xc00235a8,0xc000bd53
c000bef8:	c7 05 b0 35 02 c0 54 bd 00 c0 	mov    DWORD PTR ds:0xc00235b0,0xc000bd54
c000bf02:	c7 05 bc 35 02 c0 5e be 00 c0 	mov    DWORD PTR ds:0xc00235bc,0xc000be5e
c000bf0c:	c3                   	ret    

c000bf0d <kernel_main>:
c000bf0d:	57                   	push   edi
c000bf0e:	bf f9 03 00 00       	mov    edi,0x3f9
c000bf13:	56                   	push   esi
c000bf14:	31 f6                	xor    esi,esi
c000bf16:	53                   	push   ebx
c000bf17:	83 ec 10             	sub    esp,0x10
c000bf1a:	e8 67 08 00 00       	call   c000c786 <installVgaTextImplementation()>
c000bf1f:	e8 98 ff ff ff       	call   c000bebc <setupTextMode()>
c000bf24:	89 f0                	mov    eax,esi
c000bf26:	89 fa                	mov    edx,edi
c000bf28:	ee                   	out    dx,al
c000bf29:	bb fb 03 00 00       	mov    ebx,0x3fb
c000bf2e:	b0 80                	mov    al,0x80
c000bf30:	89 da                	mov    edx,ebx
c000bf32:	ee                   	out    dx,al
c000bf33:	b1 03                	mov    cl,0x3
c000bf35:	ba f8 03 00 00       	mov    edx,0x3f8
c000bf3a:	88 c8                	mov    al,cl
c000bf3c:	ee                   	out    dx,al
c000bf3d:	89 f0                	mov    eax,esi
c000bf3f:	89 fa                	mov    edx,edi
c000bf41:	ee                   	out    dx,al
c000bf42:	88 c8                	mov    al,cl
c000bf44:	89 da                	mov    edx,ebx
c000bf46:	ee                   	out    dx,al
c000bf47:	b0 c7                	mov    al,0xc7
c000bf49:	ba fa 03 00 00       	mov    edx,0x3fa
c000bf4e:	ee                   	out    dx,al
c000bf4f:	b0 0b                	mov    al,0xb
c000bf51:	ba fc 03 00 00       	mov    edx,0x3fc
c000bf56:	ee                   	out    dx,al
c000bf57:	a1 24 05 00 00       	mov    eax,ds:0x524
c000bf5c:	83 ec 0c             	sub    esp,0xc
c000bf5f:	05 ff 0f 00 00       	add    eax,0xfff
c000bf64:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf69:	50                   	push   eax
c000bf6a:	e8 4d 03 00 00       	call   c000c2bc <Phys::physicalMemorySetup(unsigned int)>
c000bf6f:	e8 fc 1d 00 00       	call   c000dd70 <Virt::virtualMemorySetup()>
c000bf74:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000bf7a:	83 c4 10             	add    esp,0x10
c000bf7d:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000bf83:	75 0e                	jne    c000bf93 <kernel_main+0x86>
c000bf85:	89 d8                	mov    eax,ebx
c000bf87:	25 48 03 00 00       	and    eax,0x348
c000bf8c:	3d 00 03 00 00       	cmp    eax,0x300
c000bf91:	74 10                	je     c000bfa3 <kernel_main+0x96>
c000bf93:	83 ec 0c             	sub    esp,0xc
c000bf96:	68 5b 16 02 c0       	push   0xc002165b
c000bf9b:	e8 d4 8b 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c000bfa0:	83 c4 10             	add    esp,0x10
c000bfa3:	83 ec 0c             	sub    esp,0xc
c000bfa6:	89 1d 20 35 02 c0    	mov    DWORD PTR ds:0xc0023520,ebx
c000bfac:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000bfb0:	53                   	push   ebx
c000bfb1:	e8 64 1f 00 00       	call   c000df1a <VAS::VAS()>
c000bfb6:	89 1d dc 35 02 c0    	mov    DWORD PTR ds:0xc00235dc,ebx
c000bfbc:	e8 5f 40 ff ff       	call   c0000020 <callGlobalConstructors>
c000bfc1:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000bfc8:	e8 23 2e 00 00       	call   c000edf0 <operator new(unsigned long)>
c000bfcd:	89 04 24             	mov    DWORD PTR [esp],eax
c000bfd0:	89 c6                	mov    esi,eax
c000bfd2:	e8 cb ed ff ff       	call   c000ada2 <Computer::Computer()>
c000bfd7:	6a 00                	push   0x0
c000bfd9:	89 35 08 35 02 c0    	mov    DWORD PTR ds:0xc0023508,esi
c000bfdf:	6a 00                	push   0x0
c000bfe1:	6a 00                	push   0x0
c000bfe3:	56                   	push   esi
c000bfe4:	e8 7f f2 ff ff       	call   c000b268 <Computer::open(int, int, void*)>
c000bfe9:	83 c4 14             	add    esp,0x14
c000bfec:	53                   	push   ebx
c000bfed:	e8 38 21 00 00       	call   c000e12a <VAS::~VAS()>
c000bff2:	c7 04 24 94 02 02 c0 	mov    DWORD PTR [esp],0xc0020294
c000bff9:	e8 76 8b 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c000bffe:	83 c4 20             	add    esp,0x20
c000c001:	5b                   	pop    ebx
c000c002:	5e                   	pop    esi
c000c003:	5f                   	pop    edi
c000c004:	c3                   	ret    

c000c005 <Phys::allocateDMA(unsigned long)>:
c000c005:	55                   	push   ebp
c000c006:	31 d2                	xor    edx,edx
c000c008:	57                   	push   edi
c000c009:	31 ed                	xor    ebp,ebp
c000c00b:	56                   	push   esi
c000c00c:	31 c9                	xor    ecx,ecx
c000c00e:	53                   	push   ebx
c000c00f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c013:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000c019:	31 c0                	xor    eax,eax
c000c01b:	c1 ee 0c             	shr    esi,0xc
c000c01e:	eb 17                	jmp    c000c037 <Phys::allocateDMA(unsigned long)+0x32>
c000c020:	85 c9                	test   ecx,ecx
c000c022:	75 04                	jne    c000c028 <Phys::allocateDMA(unsigned long)+0x23>
c000c024:	89 d5                	mov    ebp,edx
c000c026:	89 d0                	mov    eax,edx
c000c028:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c02b:	39 de                	cmp    esi,ebx
c000c02d:	74 20                	je     c000c04f <Phys::allocateDMA(unsigned long)+0x4a>
c000c02f:	42                   	inc    edx
c000c030:	89 d9                	mov    ecx,ebx
c000c032:	83 fa 2f             	cmp    edx,0x2f
c000c035:	7f 11                	jg     c000c048 <Phys::allocateDMA(unsigned long)+0x43>
c000c037:	80 ba 60 35 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdcaa0],0x0
c000c03e:	74 e0                	je     c000c020 <Phys::allocateDMA(unsigned long)+0x1b>
c000c040:	31 c9                	xor    ecx,ecx
c000c042:	42                   	inc    edx
c000c043:	83 fa 2f             	cmp    edx,0x2f
c000c046:	7e ef                	jle    c000c037 <Phys::allocateDMA(unsigned long)+0x32>
c000c048:	5b                   	pop    ebx
c000c049:	31 c0                	xor    eax,eax
c000c04b:	5e                   	pop    esi
c000c04c:	5f                   	pop    edi
c000c04d:	5d                   	pop    ebp
c000c04e:	c3                   	ret    
c000c04f:	8d 14 30             	lea    edx,[eax+esi*1]
c000c052:	89 d7                	mov    edi,edx
c000c054:	4f                   	dec    edi
c000c055:	79 03                	jns    c000c05a <Phys::allocateDMA(unsigned long)+0x55>
c000c057:	8d 7a 0e             	lea    edi,[edx+0xe]
c000c05a:	c1 ff 04             	sar    edi,0x4
c000c05d:	89 c2                	mov    edx,eax
c000c05f:	c1 fa 04             	sar    edx,0x4
c000c062:	39 fa                	cmp    edx,edi
c000c064:	75 2f                	jne    c000c095 <Phys::allocateDMA(unsigned long)+0x90>
c000c066:	85 db                	test   ebx,ebx
c000c068:	74 1a                	je     c000c084 <Phys::allocateDMA(unsigned long)+0x7f>
c000c06a:	be 60 35 02 c0       	mov    esi,0xc0023560
c000c06f:	8d 90 60 35 02 c0    	lea    edx,[eax-0x3ffdcaa0]
c000c075:	f7 d6                	not    esi
c000c077:	29 c6                	sub    esi,eax
c000c079:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c07c:	42                   	inc    edx
c000c07d:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000c080:	39 d9                	cmp    ecx,ebx
c000c082:	7f f5                	jg     c000c079 <Phys::allocateDMA(unsigned long)+0x74>
c000c084:	85 ff                	test   edi,edi
c000c086:	74 13                	je     c000c09b <Phys::allocateDMA(unsigned long)+0x96>
c000c088:	5b                   	pop    ebx
c000c089:	05 50 20 0c 00       	add    eax,0xc2050
c000c08e:	5e                   	pop    esi
c000c08f:	c1 e0 0c             	shl    eax,0xc
c000c092:	5f                   	pop    edi
c000c093:	5d                   	pop    ebp
c000c094:	c3                   	ret    
c000c095:	89 ea                	mov    edx,ebp
c000c097:	31 c9                	xor    ecx,ecx
c000c099:	eb a7                	jmp    c000c042 <Phys::allocateDMA(unsigned long)+0x3d>
c000c09b:	5b                   	pop    ebx
c000c09c:	c1 e0 0c             	shl    eax,0xc
c000c09f:	5e                   	pop    esi
c000c0a0:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000c0a5:	5f                   	pop    edi
c000c0a6:	5d                   	pop    ebp
c000c0a7:	c3                   	ret    

c000c0a8 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c0a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c0ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c0b0:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c0b6:	c1 e9 0c             	shr    ecx,0xc
c000c0b9:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c0be:	76 25                	jbe    c000c0e5 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c0c0:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c0c5:	c1 e8 0c             	shr    eax,0xc
c000c0c8:	8d 50 10             	lea    edx,[eax+0x10]
c000c0cb:	85 c9                	test   ecx,ecx
c000c0cd:	74 15                	je     c000c0e4 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c0cf:	8d 82 60 35 02 c0    	lea    eax,[edx-0x3ffdcaa0]
c000c0d5:	8d 94 11 60 35 02 c0 	lea    edx,[ecx+edx*1-0x3ffdcaa0]
c000c0dc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c0df:	40                   	inc    eax
c000c0e0:	39 d0                	cmp    eax,edx
c000c0e2:	75 f8                	jne    c000c0dc <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c0e4:	c3                   	ret    
c000c0e5:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c0eb:	c1 ea 0c             	shr    edx,0xc
c000c0ee:	eb db                	jmp    c000c0cb <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c0f0 <Phys::setPageState(unsigned long, bool)>:
c000c0f0:	56                   	push   esi
c000c0f1:	ba 01 00 00 00       	mov    edx,0x1
c000c0f6:	53                   	push   ebx
c000c0f7:	8b 35 38 29 02 c0    	mov    esi,DWORD PTR ds:0xc0022938
c000c0fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c101:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c105:	89 c8                	mov    eax,ecx
c000c107:	83 e1 07             	and    ecx,0x7
c000c10a:	c1 e8 03             	shr    eax,0x3
c000c10d:	d3 e3                	shl    ebx,cl
c000c10f:	01 c6                	add    esi,eax
c000c111:	d3 e2                	shl    edx,cl
c000c113:	f7 d2                	not    edx
c000c115:	20 16                	and    BYTE PTR [esi],dl
c000c117:	03 05 38 29 02 c0    	add    eax,DWORD PTR ds:0xc0022938
c000c11d:	08 18                	or     BYTE PTR [eax],bl
c000c11f:	5b                   	pop    ebx
c000c120:	5e                   	pop    esi
c000c121:	c3                   	ret    

c000c122 <Phys::getPageState(unsigned long)>:
c000c122:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c126:	8b 15 38 29 02 c0    	mov    edx,DWORD PTR ds:0xc0022938
c000c12c:	89 c8                	mov    eax,ecx
c000c12e:	83 e1 07             	and    ecx,0x7
c000c131:	c1 e8 03             	shr    eax,0x3
c000c134:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000c138:	d3 f8                	sar    eax,cl
c000c13a:	83 e0 01             	and    eax,0x1
c000c13d:	c3                   	ret    

c000c13e <Phys::freePage(unsigned long)>:
c000c13e:	53                   	push   ebx
c000c13f:	83 ec 08             	sub    esp,0x8
c000c142:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c146:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c14c:	76 57                	jbe    c000c1a5 <Phys::freePage(unsigned long)+0x67>
c000c14e:	c1 eb 0c             	shr    ebx,0xc
c000c151:	53                   	push   ebx
c000c152:	e8 cb ff ff ff       	call   c000c122 <Phys::getPageState(unsigned long)>
c000c157:	5a                   	pop    edx
c000c158:	84 c0                	test   al,al
c000c15a:	74 5b                	je     c000c1b7 <Phys::freePage(unsigned long)+0x79>
c000c15c:	a1 4c 35 02 c0       	mov    eax,ds:0xc002354c
c000c161:	48                   	dec    eax
c000c162:	a3 4c 35 02 c0       	mov    ds:0xc002354c,eax
c000c167:	8d 04 80             	lea    eax,[eax+eax*4]
c000c16a:	8d 04 80             	lea    eax,[eax+eax*4]
c000c16d:	c1 e0 02             	shl    eax,0x2
c000c170:	99                   	cdq    
c000c171:	f7 3d 50 35 02 c0    	idiv   DWORD PTR ds:0xc0023550
c000c177:	39 05 48 35 02 c0    	cmp    DWORD PTR ds:0xc0023548,eax
c000c17d:	75 13                	jne    c000c192 <Phys::freePage(unsigned long)+0x54>
c000c17f:	83 ec 08             	sub    esp,0x8
c000c182:	6a 00                	push   0x0
c000c184:	53                   	push   ebx
c000c185:	e8 66 ff ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c18a:	83 c4 10             	add    esp,0x10
c000c18d:	83 c4 08             	add    esp,0x8
c000c190:	5b                   	pop    ebx
c000c191:	c3                   	ret    
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	a3 48 35 02 c0       	mov    ds:0xc0023548,eax
c000c19a:	50                   	push   eax
c000c19b:	e8 7a 09 00 00       	call   c000cb1a <VgaText::updateRAMUsageDisplay(int)>
c000c1a0:	83 c4 10             	add    esp,0x10
c000c1a3:	eb da                	jmp    c000c17f <Phys::freePage(unsigned long)+0x41>
c000c1a5:	68 00 10 00 00       	push   0x1000
c000c1aa:	53                   	push   ebx
c000c1ab:	e8 f8 fe ff ff       	call   c000c0a8 <Phys::freeDMA(unsigned long, unsigned long)>
c000c1b0:	59                   	pop    ecx
c000c1b1:	5b                   	pop    ebx
c000c1b2:	83 c4 08             	add    esp,0x8
c000c1b5:	5b                   	pop    ebx
c000c1b6:	c3                   	ret    
c000c1b7:	c7 44 24 10 af 02 02 c0 	mov    DWORD PTR [esp+0x10],0xc00202af
c000c1bf:	83 c4 08             	add    esp,0x8
c000c1c2:	5b                   	pop    ebx
c000c1c3:	e9 ac 89 00 00       	jmp    c0014b74 <Krnl::panic(char const*)>

c000c1c8 <Phys::allocatePage()>:
c000c1c8:	56                   	push   esi
c000c1c9:	53                   	push   ebx
c000c1ca:	51                   	push   ecx
c000c1cb:	8b 35 40 35 02 c0    	mov    esi,DWORD PTR ds:0xc0023540
c000c1d1:	89 f3                	mov    ebx,esi
c000c1d3:	eb 0a                	jmp    c000c1df <Phys::allocatePage()+0x17>
c000c1d5:	89 1d 40 35 02 c0    	mov    DWORD PTR ds:0xc0023540,ebx
c000c1db:	39 de                	cmp    esi,ebx
c000c1dd:	74 24                	je     c000c203 <Phys::allocatePage()+0x3b>
c000c1df:	53                   	push   ebx
c000c1e0:	e8 3d ff ff ff       	call   c000c122 <Phys::getPageState(unsigned long)>
c000c1e5:	5a                   	pop    edx
c000c1e6:	84 c0                	test   al,al
c000c1e8:	74 4e                	je     c000c238 <Phys::allocatePage()+0x70>
c000c1ea:	43                   	inc    ebx
c000c1eb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c1f1:	75 e2                	jne    c000c1d5 <Phys::allocatePage()+0xd>
c000c1f3:	31 db                	xor    ebx,ebx
c000c1f5:	c7 05 40 35 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023540,0x0
c000c1ff:	39 de                	cmp    esi,ebx
c000c201:	75 dc                	jne    c000c1df <Phys::allocatePage()+0x17>
c000c203:	83 ec 0c             	sub    esp,0xc
c000c206:	68 00 10 00 00       	push   0x1000
c000c20b:	e8 f5 fd ff ff       	call   c000c005 <Phys::allocateDMA(unsigned long)>
c000c210:	83 c4 10             	add    esp,0x10
c000c213:	85 c0                	test   eax,eax
c000c215:	75 56                	jne    c000c26d <Phys::allocatePage()+0xa5>
c000c217:	83 ec 0c             	sub    esp,0xc
c000c21a:	68 c5 02 02 c0       	push   0xc00202c5
c000c21f:	e8 50 89 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c000c224:	83 c4 10             	add    esp,0x10
c000c227:	8b 1d 40 35 02 c0    	mov    ebx,DWORD PTR ds:0xc0023540
c000c22d:	53                   	push   ebx
c000c22e:	e8 ef fe ff ff       	call   c000c122 <Phys::getPageState(unsigned long)>
c000c233:	5a                   	pop    edx
c000c234:	84 c0                	test   al,al
c000c236:	75 b2                	jne    c000c1ea <Phys::allocatePage()+0x22>
c000c238:	6a 01                	push   0x1
c000c23a:	53                   	push   ebx
c000c23b:	e8 b0 fe ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c240:	a1 4c 35 02 c0       	mov    eax,ds:0xc002354c
c000c245:	59                   	pop    ecx
c000c246:	40                   	inc    eax
c000c247:	5b                   	pop    ebx
c000c248:	a3 4c 35 02 c0       	mov    ds:0xc002354c,eax
c000c24d:	8d 04 80             	lea    eax,[eax+eax*4]
c000c250:	8d 04 80             	lea    eax,[eax+eax*4]
c000c253:	c1 e0 02             	shl    eax,0x2
c000c256:	99                   	cdq    
c000c257:	f7 3d 50 35 02 c0    	idiv   DWORD PTR ds:0xc0023550
c000c25d:	39 05 48 35 02 c0    	cmp    DWORD PTR ds:0xc0023548,eax
c000c263:	75 0c                	jne    c000c271 <Phys::allocatePage()+0xa9>
c000c265:	a1 40 35 02 c0       	mov    eax,ds:0xc0023540
c000c26a:	c1 e0 0c             	shl    eax,0xc
c000c26d:	5a                   	pop    edx
c000c26e:	5b                   	pop    ebx
c000c26f:	5e                   	pop    esi
c000c270:	c3                   	ret    
c000c271:	83 ec 0c             	sub    esp,0xc
c000c274:	a3 48 35 02 c0       	mov    ds:0xc0023548,eax
c000c279:	50                   	push   eax
c000c27a:	e8 9b 08 00 00       	call   c000cb1a <VgaText::updateRAMUsageDisplay(int)>
c000c27f:	83 c4 10             	add    esp,0x10
c000c282:	eb e1                	jmp    c000c265 <Phys::allocatePage()+0x9d>

c000c284 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c284:	56                   	push   esi
c000c285:	53                   	push   ebx
c000c286:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c28a:	39 1d 44 35 02 c0    	cmp    DWORD PTR ds:0xc0023544,ebx
c000c290:	73 06                	jae    c000c298 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c292:	89 1d 44 35 02 c0    	mov    DWORD PTR ds:0xc0023544,ebx
c000c298:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c29c:	c1 eb 0c             	shr    ebx,0xc
c000c29f:	c1 e8 0c             	shr    eax,0xc
c000c2a2:	39 d8                	cmp    eax,ebx
c000c2a4:	73 13                	jae    c000c2b9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c2a6:	6a 00                	push   0x0
c000c2a8:	8d 70 01             	lea    esi,[eax+0x1]
c000c2ab:	50                   	push   eax
c000c2ac:	e8 3f fe ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c2b1:	5a                   	pop    edx
c000c2b2:	89 f0                	mov    eax,esi
c000c2b4:	59                   	pop    ecx
c000c2b5:	39 f3                	cmp    ebx,esi
c000c2b7:	75 ed                	jne    c000c2a6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c2b9:	5b                   	pop    ebx
c000c2ba:	5e                   	pop    esi
c000c2bb:	c3                   	ret    

c000c2bc <Phys::physicalMemorySetup(unsigned int)>:
c000c2bc:	55                   	push   ebp
c000c2bd:	57                   	push   edi
c000c2be:	56                   	push   esi
c000c2bf:	53                   	push   ebx
c000c2c0:	31 db                	xor    ebx,ebx
c000c2c2:	83 ec 30             	sub    esp,0x30
c000c2c5:	6a 30                	push   0x30
c000c2c7:	6a 00                	push   0x0
c000c2c9:	68 60 35 02 c0       	push   0xc0023560
c000c2ce:	e8 35 43 ff ff       	call   c0000608 <memset>
c000c2d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c2d7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c2dc:	05 00 10 00 00       	add    eax,0x1000
c000c2e1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c2e5:	83 c4 10             	add    esp,0x10
c000c2e8:	83 ec 08             	sub    esp,0x8
c000c2eb:	6a 01                	push   0x1
c000c2ed:	53                   	push   ebx
c000c2ee:	43                   	inc    ebx
c000c2ef:	e8 fc fd ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c2f4:	83 c4 10             	add    esp,0x10
c000c2f7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c2fd:	75 e9                	jne    c000c2e8 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c2ff:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000c306:	66 85 c0             	test   ax,ax
c000c309:	0f 84 28 01 00 00    	je     c000c437 <Phys::physicalMemorySetup(unsigned int)+0x17b>
c000c30f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c313:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000c319:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000c31e:	8b 35 08 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000608
c000c324:	8b 3d 0c 06 00 c2    	mov    edi,DWORD PTR ds:0xc200060c
c000c32a:	89 f1                	mov    ecx,esi
c000c32c:	89 fb                	mov    ebx,edi
c000c32e:	01 c1                	add    ecx,eax
c000c330:	89 d5                	mov    ebp,edx
c000c332:	11 d3                	adc    ebx,edx
c000c334:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c337:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c33b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c33f:	8b 0d 10 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000610
c000c345:	09 dd                	or     ebp,ebx
c000c347:	0f 85 fa 00 00 00    	jne    c000c447 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c34d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c351:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000c359:	c7 44 24 0c 00 06 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000600
c000c361:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000c365:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c36d:	eb 45                	jmp    c000c3b4 <Phys::physicalMemorySetup(unsigned int)+0xf8>
c000c36f:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000c373:	83 44 24 0c 18       	add    DWORD PTR [esp+0xc],0x18
c000c378:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c37c:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000c380:	0f 84 c1 00 00 00    	je     c000c447 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c386:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c38a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c38d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c390:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c000c393:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000c396:	89 c1                	mov    ecx,eax
c000c398:	89 d3                	mov    ebx,edx
c000c39a:	01 f1                	add    ecx,esi
c000c39c:	11 fb                	adc    ebx,edi
c000c39e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c3a1:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c3a5:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000c3a8:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c3ac:	09 d3                	or     ebx,edx
c000c3ae:	0f 85 93 00 00 00    	jne    c000c447 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c3b4:	49                   	dec    ecx
c000c3b5:	75 b8                	jne    c000c36f <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c3b7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000c3ba:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c3be:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c3c2:	39 e9                	cmp    ecx,ebp
c000c3c4:	89 d9                	mov    ecx,ebx
c000c3c6:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c3ca:	72 a3                	jb     c000c36f <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c3cc:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c3d1:	39 f1                	cmp    ecx,esi
c000c3d3:	b9 00 00 00 00       	mov    ecx,0x0
c000c3d8:	19 f9                	sbb    ecx,edi
c000c3da:	73 93                	jae    c000c36f <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c3dc:	39 e8                	cmp    eax,ebp
c000c3de:	89 d1                	mov    ecx,edx
c000c3e0:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c3e4:	73 13                	jae    c000c3f9 <Phys::physicalMemorySetup(unsigned int)+0x13d>
c000c3e6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000c3e9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000c3ed:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000c3f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c3f5:	1b 7c 24 1c          	sbb    edi,DWORD PTR [esp+0x1c]
c000c3f9:	83 ec 08             	sub    esp,0x8
c000c3fc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c400:	50                   	push   eax
c000c401:	e8 7e fe ff ff       	call   c000c284 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c406:	83 c4 0c             	add    esp,0xc
c000c409:	89 fa                	mov    edx,edi
c000c40b:	89 f0                	mov    eax,esi
c000c40d:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c411:	03 05 50 35 02 c0    	add    eax,DWORD PTR ds:0xc0023550
c000c417:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c41e:	a3 50 35 02 c0       	mov    ds:0xc0023550,eax
c000c423:	52                   	push   edx
c000c424:	50                   	push   eax
c000c425:	68 e1 02 02 c0       	push   0xc00202e1
c000c42a:	e8 b0 2a 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000c42f:	83 c4 10             	add    esp,0x10
c000c432:	e9 38 ff ff ff       	jmp    c000c36f <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c437:	83 ec 0c             	sub    esp,0xc
c000c43a:	68 d3 02 02 c0       	push   0xc00202d3
c000c43f:	e8 30 87 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c000c444:	83 c4 10             	add    esp,0x10
c000c447:	bb 40 01 00 00       	mov    ebx,0x140
c000c44c:	83 ec 08             	sub    esp,0x8
c000c44f:	6a 00                	push   0x0
c000c451:	53                   	push   ebx
c000c452:	43                   	inc    ebx
c000c453:	e8 98 fc ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c458:	ff 05 50 35 02 c0    	inc    DWORD PTR ds:0xc0023550
c000c45e:	83 c4 10             	add    esp,0x10
c000c461:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c467:	75 e3                	jne    c000c44c <Phys::physicalMemorySetup(unsigned int)+0x190>
c000c469:	83 c4 2c             	add    esp,0x2c
c000c46c:	5b                   	pop    ebx
c000c46d:	5e                   	pop    esi
c000c46e:	5f                   	pop    edi
c000c46f:	5d                   	pop    ebp
c000c470:	c3                   	ret    
c000c471:	90                   	nop

c000c472 <Pipe::isAtty()>:
c000c472:	31 c0                	xor    eax,eax
c000c474:	c3                   	ret    
c000c475:	90                   	nop

c000c476 <Pipe::~Pipe()>:
c000c476:	83 ec 0c             	sub    esp,0xc
c000c479:	ba 40 03 02 c0       	mov    edx,0xc0020340
c000c47e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c482:	89 10                	mov    DWORD PTR [eax],edx
c000c484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c488:	83 ec 0c             	sub    esp,0xc
c000c48b:	50                   	push   eax
c000c48c:	e8 ef 15 00 00       	call   c000da80 <UnixFile::~UnixFile()>
c000c491:	83 c4 10             	add    esp,0x10
c000c494:	90                   	nop
c000c495:	83 c4 0c             	add    esp,0xc
c000c498:	c3                   	ret    
c000c499:	90                   	nop

c000c49a <Pipe::~Pipe()>:
c000c49a:	83 ec 0c             	sub    esp,0xc
c000c49d:	83 ec 0c             	sub    esp,0xc
c000c4a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4a4:	e8 cd ff ff ff       	call   c000c476 <Pipe::~Pipe()>
c000c4a9:	83 c4 10             	add    esp,0x10
c000c4ac:	83 ec 08             	sub    esp,0x8
c000c4af:	6a 20                	push   0x20
c000c4b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4b5:	e8 45 29 00 00       	call   c000edff <operator delete(void*, unsigned long)>
c000c4ba:	83 c4 10             	add    esp,0x10
c000c4bd:	83 c4 0c             	add    esp,0xc
c000c4c0:	c3                   	ret    
c000c4c1:	90                   	nop

c000c4c2 <Pipe::read(unsigned long long, void*, int*)>:
c000c4c2:	55                   	push   ebp
c000c4c3:	57                   	push   edi
c000c4c4:	56                   	push   esi
c000c4c5:	53                   	push   ebx
c000c4c6:	83 ec 1c             	sub    esp,0x1c
c000c4c9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c4cd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c4d1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c4d5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c4d8:	89 c8                	mov    eax,ecx
c000c4da:	99                   	cdq    
c000c4db:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c4df:	74 19                	je     c000c4fa <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c4e1:	39 f9                	cmp    ecx,edi
c000c4e3:	89 d1                	mov    ecx,edx
c000c4e5:	19 f1                	sbb    ecx,esi
c000c4e7:	73 11                	jae    c000c4fa <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c4e9:	e8 46 b5 00 00       	call   c0017a34 <lockScheduler()>
c000c4ee:	e8 75 b8 00 00       	call   c0017d68 <schedule()>
c000c4f3:	e8 3e b5 00 00       	call   c0017a36 <unlockScheduler()>
c000c4f8:	eb db                	jmp    c000c4d5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c4fa:	39 f8                	cmp    eax,edi
c000c4fc:	89 d1                	mov    ecx,edx
c000c4fe:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c502:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c506:	19 f1                	sbb    ecx,esi
c000c508:	73 08                	jae    c000c512 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c50a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c50e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c512:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c515:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c518:	29 c6                	sub    esi,eax
c000c51a:	89 f1                	mov    ecx,esi
c000c51c:	c1 f9 1f             	sar    ecx,0x1f
c000c51f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c523:	89 ca                	mov    edx,ecx
c000c525:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c529:	19 d1                	sbb    ecx,edx
c000c52b:	73 04                	jae    c000c531 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c52d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c531:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c535:	89 fd                	mov    ebp,edi
c000c537:	29 f5                	sub    ebp,esi
c000c539:	85 f6                	test   esi,esi
c000c53b:	74 12                	je     c000c54f <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c53d:	52                   	push   edx
c000c53e:	56                   	push   esi
c000c53f:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c542:	50                   	push   eax
c000c543:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c547:	e8 86 40 ff ff       	call   c00005d2 <memcpy>
c000c54c:	83 c4 10             	add    esp,0x10
c000c54f:	85 ed                	test   ebp,ebp
c000c551:	74 12                	je     c000c565 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c553:	50                   	push   eax
c000c554:	55                   	push   ebp
c000c555:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c558:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c55c:	56                   	push   esi
c000c55d:	e8 70 40 ff ff       	call   c00005d2 <memcpy>
c000c562:	83 c4 10             	add    esp,0x10
c000c565:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c568:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c56b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c56e:	99                   	cdq    
c000c56f:	89 f7                	mov    edi,esi
c000c571:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c575:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c579:	c1 ff 1f             	sar    edi,0x1f
c000c57c:	57                   	push   edi
c000c57d:	56                   	push   esi
c000c57e:	52                   	push   edx
c000c57f:	50                   	push   eax
c000c580:	e8 47 21 01 00       	call   c001e6cc <__umoddi3>
c000c585:	83 c4 10             	add    esp,0x10
c000c588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c58b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c590:	75 10                	jne    c000c5a2 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000c592:	83 ec 0c             	sub    esp,0xc
c000c595:	68 fd 02 02 c0       	push   0xc00202fd
c000c59a:	e8 d5 85 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c000c59f:	83 c4 10             	add    esp,0x10
c000c5a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c5a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c5aa:	89 10                	mov    DWORD PTR [eax],edx
c000c5ac:	83 c4 1c             	add    esp,0x1c
c000c5af:	31 c0                	xor    eax,eax
c000c5b1:	5b                   	pop    ebx
c000c5b2:	5e                   	pop    esi
c000c5b3:	5f                   	pop    edi
c000c5b4:	5d                   	pop    ebp
c000c5b5:	c3                   	ret    

c000c5b6 <Pipe::write(unsigned long long, void*, int*)>:
c000c5b6:	55                   	push   ebp
c000c5b7:	57                   	push   edi
c000c5b8:	56                   	push   esi
c000c5b9:	53                   	push   ebx
c000c5ba:	83 ec 1c             	sub    esp,0x1c
c000c5bd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c5c1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c5c5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000c5c9:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5cc:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000c5cf:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000c5d2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c5d6:	89 de                	mov    esi,ebx
c000c5d8:	89 df                	mov    edi,ebx
c000c5da:	c1 ff 1f             	sar    edi,0x1f
c000c5dd:	01 c6                	add    esi,eax
c000c5df:	89 c8                	mov    eax,ecx
c000c5e1:	11 d7                	adc    edi,edx
c000c5e3:	99                   	cdq    
c000c5e4:	39 f1                	cmp    ecx,esi
c000c5e6:	89 d0                	mov    eax,edx
c000c5e8:	19 f8                	sbb    eax,edi
c000c5ea:	b8 01 00 00 00       	mov    eax,0x1
c000c5ef:	0f 82 80 00 00 00    	jb     c000c675 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000c5f5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000c5f8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000c5fb:	01 d8                	add    eax,ebx
c000c5fd:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c601:	99                   	cdq    
c000c602:	f7 f9                	idiv   ecx
c000c604:	29 d1                	sub    ecx,edx
c000c606:	89 d7                	mov    edi,edx
c000c608:	89 c8                	mov    eax,ecx
c000c60a:	99                   	cdq    
c000c60b:	39 ce                	cmp    esi,ecx
c000c60d:	19 d3                	sbb    ebx,edx
c000c60f:	bb 00 00 00 00       	mov    ebx,0x0
c000c614:	72 04                	jb     c000c61a <Pipe::write(unsigned long long, void*, int*)+0x64>
c000c616:	89 f3                	mov    ebx,esi
c000c618:	29 cb                	sub    ebx,ecx
c000c61a:	89 f1                	mov    ecx,esi
c000c61c:	29 d9                	sub    ecx,ebx
c000c61e:	74 1a                	je     c000c63a <Pipe::write(unsigned long long, void*, int*)+0x84>
c000c620:	52                   	push   edx
c000c621:	51                   	push   ecx
c000c622:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c626:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c62a:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000c62d:	57                   	push   edi
c000c62e:	e8 9f 3f ff ff       	call   c00005d2 <memcpy>
c000c633:	83 c4 10             	add    esp,0x10
c000c636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c63a:	85 db                	test   ebx,ebx
c000c63c:	74 12                	je     c000c650 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000c63e:	50                   	push   eax
c000c63f:	53                   	push   ebx
c000c640:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000c644:	51                   	push   ecx
c000c645:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000c648:	e8 85 3f ff ff       	call   c00005d2 <memcpy>
c000c64d:	83 c4 10             	add    esp,0x10
c000c650:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000c653:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c658:	75 10                	jne    c000c66a <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000c65a:	83 ec 0c             	sub    esp,0xc
c000c65d:	68 19 03 02 c0       	push   0xc0020319
c000c662:	e8 0d 85 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c000c667:	83 c4 10             	add    esp,0x10
c000c66a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c66e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000c671:	89 38                	mov    DWORD PTR [eax],edi
c000c673:	31 c0                	xor    eax,eax
c000c675:	83 c4 1c             	add    esp,0x1c
c000c678:	5b                   	pop    ebx
c000c679:	5e                   	pop    esi
c000c67a:	5f                   	pop    edi
c000c67b:	5d                   	pop    ebp
c000c67c:	c3                   	ret    
c000c67d:	90                   	nop

c000c67e <Pipe::Pipe(int)>:
c000c67e:	83 ec 0c             	sub    esp,0xc
c000c681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c685:	83 ec 08             	sub    esp,0x8
c000c688:	6a 00                	push   0x0
c000c68a:	50                   	push   eax
c000c68b:	e8 a0 12 00 00       	call   c000d930 <UnixFile::UnixFile(int)>
c000c690:	83 c4 10             	add    esp,0x10
c000c693:	ba 40 03 02 c0       	mov    edx,0xc0020340
c000c698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c69c:	89 10                	mov    DWORD PTR [eax],edx
c000c69e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6a6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000c6a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6ad:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000c6b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6b8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000c6bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c6c3:	83 ec 0c             	sub    esp,0xc
c000c6c6:	50                   	push   eax
c000c6c7:	e8 52 f5 ff ff       	call   c000bc1e <malloc>
c000c6cc:	83 c4 10             	add    esp,0x10
c000c6cf:	89 c2                	mov    edx,eax
c000c6d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6d5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6dc:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000c6e0:	90                   	nop
c000c6e1:	83 c4 0c             	add    esp,0xc
c000c6e4:	c3                   	ret    
c000c6e5:	90                   	nop

c000c6e6 <VgaText::isAtty()>:
c000c6e6:	b0 01                	mov    al,0x1
c000c6e8:	c3                   	ret    
c000c6e9:	90                   	nop

c000c6ea <VgaText::~VgaText()>:
c000c6ea:	83 ec 0c             	sub    esp,0xc
c000c6ed:	ba fc 03 02 c0       	mov    edx,0xc00203fc
c000c6f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6f6:	89 10                	mov    DWORD PTR [eax],edx
c000c6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6fc:	83 ec 0c             	sub    esp,0xc
c000c6ff:	50                   	push   eax
c000c700:	e8 7b 13 00 00       	call   c000da80 <UnixFile::~UnixFile()>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	90                   	nop
c000c709:	83 c4 0c             	add    esp,0xc
c000c70c:	c3                   	ret    
c000c70d:	90                   	nop

c000c70e <VgaText::~VgaText()>:
c000c70e:	83 ec 0c             	sub    esp,0xc
c000c711:	83 ec 0c             	sub    esp,0xc
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	e8 cd ff ff ff       	call   c000c6ea <VgaText::~VgaText()>
c000c71d:	83 c4 10             	add    esp,0x10
c000c720:	83 ec 08             	sub    esp,0x8
c000c723:	68 60 12 00 00       	push   0x1260
c000c728:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c72c:	e8 ce 26 00 00       	call   c000edff <operator delete(void*, unsigned long)>
c000c731:	83 c4 10             	add    esp,0x10
c000c734:	83 c4 0c             	add    esp,0xc
c000c737:	c3                   	ret    

c000c738 <VgaText::read(unsigned long long, void*, int*)>:
c000c738:	83 ec 10             	sub    esp,0x10
c000c73b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c743:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c747:	e8 d4 52 00 00       	call   c0011a20 <readKeyboard(VgaText*, char*, unsigned long)>
c000c74c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c750:	89 02                	mov    DWORD PTR [edx],eax
c000c752:	31 c0                	xor    eax,eax
c000c754:	83 c4 1c             	add    esp,0x1c
c000c757:	c3                   	ret    

c000c758 <setTerminalScrollLock(bool)>:
c000c758:	c3                   	ret    

c000c759 <addToTerminalCycle(VgaText*)>:
c000c759:	8b 15 c0 35 02 c0    	mov    edx,DWORD PTR ds:0xc00235c0
c000c75f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c763:	85 d2                	test   edx,edx
c000c765:	75 0c                	jne    c000c773 <addToTerminalCycle(VgaText*)+0x1a>
c000c767:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000c76d:	a3 c0 35 02 c0       	mov    ds:0xc00235c0,eax
c000c772:	c3                   	ret    
c000c773:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000c779:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000c77f:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000c785:	c3                   	ret    

c000c786 <installVgaTextImplementation()>:
c000c786:	83 ec 10             	sub    esp,0x10
c000c789:	6a 20                	push   0x20
c000c78b:	6a 00                	push   0x0
c000c78d:	68 a0 35 02 c0       	push   0xc00235a0
c000c792:	e8 71 3e ff ff       	call   c0000608 <memset>
c000c797:	83 c4 1c             	add    esp,0x1c
c000c79a:	c3                   	ret    

c000c79b <scrollTerminalScrollLock(int)>:
c000c79b:	c3                   	ret    

c000c79c <VgaText::load()>:
c000c79c:	53                   	push   ebx
c000c79d:	31 c0                	xor    eax,eax
c000c79f:	83 ec 58             	sub    esp,0x58
c000c7a2:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000c7a6:	89 e2                	mov    edx,esp
c000c7a8:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000c7ac:	40                   	inc    eax
c000c7ad:	83 f8 50             	cmp    eax,0x50
c000c7b0:	75 f6                	jne    c000c7a8 <VgaText::load()+0xc>
c000c7b2:	31 c0                	xor    eax,eax
c000c7b4:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000c7bb:	84 c9                	test   cl,cl
c000c7bd:	74 06                	je     c000c7c5 <VgaText::load()+0x29>
c000c7bf:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000c7c2:	40                   	inc    eax
c000c7c3:	eb ef                	jmp    c000c7b4 <VgaText::load()+0x18>
c000c7c5:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000c7cb:	85 c0                	test   eax,eax
c000c7cd:	74 09                	je     c000c7d8 <VgaText::load()+0x3c>
c000c7cf:	51                   	push   ecx
c000c7d0:	51                   	push   ecx
c000c7d1:	52                   	push   edx
c000c7d2:	53                   	push   ebx
c000c7d3:	ff d0                	call   eax
c000c7d5:	83 c4 10             	add    esp,0x10
c000c7d8:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000c7de:	85 c0                	test   eax,eax
c000c7e0:	74 09                	je     c000c7eb <VgaText::load()+0x4f>
c000c7e2:	83 ec 0c             	sub    esp,0xc
c000c7e5:	53                   	push   ebx
c000c7e6:	ff d0                	call   eax
c000c7e8:	83 c4 10             	add    esp,0x10
c000c7eb:	83 c4 58             	add    esp,0x58
c000c7ee:	5b                   	pop    ebx
c000c7ef:	c3                   	ret    

c000c7f0 <VgaText::updateCursor()>:
c000c7f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7f4:	39 05 c4 35 02 c0    	cmp    DWORD PTR ds:0xc00235c4,eax
c000c7fa:	75 0c                	jne    c000c808 <VgaText::updateCursor()+0x18>
c000c7fc:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000c802:	85 c0                	test   eax,eax
c000c804:	74 02                	je     c000c808 <VgaText::updateCursor()+0x18>
c000c806:	ff e0                	jmp    eax
c000c808:	c3                   	ret    
c000c809:	90                   	nop

c000c80a <VgaText::showCursor(bool)>:
c000c80a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c80e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c812:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000c818:	c3                   	ret    
c000c819:	90                   	nop

c000c81a <VgaText::disableBlink(bool)>:
c000c81a:	56                   	push   esi
c000c81b:	53                   	push   ebx
c000c81c:	51                   	push   ecx
c000c81d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c821:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c825:	39 1d c4 35 02 c0    	cmp    DWORD PTR ds:0xc00235c4,ebx
c000c82b:	75 18                	jne    c000c845 <VgaText::disableBlink(bool)+0x2b>
c000c82d:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000c833:	85 c0                	test   eax,eax
c000c835:	74 0e                	je     c000c845 <VgaText::disableBlink(bool)+0x2b>
c000c837:	89 f1                	mov    ecx,esi
c000c839:	52                   	push   edx
c000c83a:	52                   	push   edx
c000c83b:	0f b6 d1             	movzx  edx,cl
c000c83e:	52                   	push   edx
c000c83f:	53                   	push   ebx
c000c840:	ff d0                	call   eax
c000c842:	83 c4 10             	add    esp,0x10
c000c845:	89 f0                	mov    eax,esi
c000c847:	83 f0 01             	xor    eax,0x1
c000c84a:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000c850:	58                   	pop    eax
c000c851:	5b                   	pop    ebx
c000c852:	5e                   	pop    esi
c000c853:	c3                   	ret    

c000c854 <VgaText::doANSI_SGR(int)>:
c000c854:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c85c:	85 d2                	test   edx,edx
c000c85e:	75 14                	jne    c000c874 <VgaText::doANSI_SGR(int)+0x20>
c000c860:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000c866:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c86c:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000c872:	eb 65                	jmp    c000c8d9 <VgaText::doANSI_SGR(int)+0x85>
c000c874:	83 fa 07             	cmp    edx,0x7
c000c877:	75 14                	jne    c000c88d <VgaText::doANSI_SGR(int)+0x39>
c000c879:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000c87f:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000c885:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000c88b:	eb 4c                	jmp    c000c8d9 <VgaText::doANSI_SGR(int)+0x85>
c000c88d:	83 fa 1b             	cmp    edx,0x1b
c000c890:	74 ce                	je     c000c860 <VgaText::doANSI_SGR(int)+0xc>
c000c892:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000c895:	83 f9 07             	cmp    ecx,0x7
c000c898:	77 09                	ja     c000c8a3 <VgaText::doANSI_SGR(int)+0x4f>
c000c89a:	8b 14 8d 60 29 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd6a0]
c000c8a1:	eb 20                	jmp    c000c8c3 <VgaText::doANSI_SGR(int)+0x6f>
c000c8a3:	8d 4a d8             	lea    ecx,[edx-0x28]
c000c8a6:	83 f9 07             	cmp    ecx,0x7
c000c8a9:	77 09                	ja     c000c8b4 <VgaText::doANSI_SGR(int)+0x60>
c000c8ab:	8b 14 8d 60 29 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd6a0]
c000c8b2:	eb 25                	jmp    c000c8d9 <VgaText::doANSI_SGR(int)+0x85>
c000c8b4:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000c8b7:	83 f9 07             	cmp    ecx,0x7
c000c8ba:	77 0e                	ja     c000c8ca <VgaText::doANSI_SGR(int)+0x76>
c000c8bc:	8b 14 95 18 28 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd7e8]
c000c8c3:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c8c9:	c3                   	ret    
c000c8ca:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000c8cd:	83 f9 07             	cmp    ecx,0x7
c000c8d0:	77 0d                	ja     c000c8df <VgaText::doANSI_SGR(int)+0x8b>
c000c8d2:	8b 14 95 f0 27 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd810]
c000c8d9:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000c8df:	c3                   	ret    

c000c8e0 <VgaText::setDefaultBgColour(VgaColour)>:
c000c8e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c8e8:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000c8ee:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000c8f4:	c3                   	ret    
c000c8f5:	90                   	nop

c000c8f6 <VgaText::setDefaultFgColour(VgaColour)>:
c000c8f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c8fe:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000c904:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c90a:	c3                   	ret    
c000c90b:	90                   	nop

c000c90c <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000c90c:	53                   	push   ebx
c000c90d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c911:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c915:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c919:	51                   	push   ecx
c000c91a:	e8 c1 ff ff ff       	call   c000c8e0 <VgaText::setDefaultBgColour(VgaColour)>
c000c91f:	58                   	pop    eax
c000c920:	5a                   	pop    edx
c000c921:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c925:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000c929:	5b                   	pop    ebx
c000c92a:	eb ca                	jmp    c000c8f6 <VgaText::setDefaultFgColour(VgaColour)>

c000c92c <VgaText::combineColours(unsigned char, unsigned char)>:
c000c92c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000c930:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000c935:	83 e0 0f             	and    eax,0xf
c000c938:	c1 e2 04             	shl    edx,0x4
c000c93b:	09 d0                	or     eax,edx
c000c93d:	c3                   	ret    

c000c93e <VgaText::scrollScreen()>:
c000c93e:	57                   	push   edi
c000c93f:	56                   	push   esi
c000c940:	be 01 00 00 00       	mov    esi,0x1
c000c945:	53                   	push   ebx
c000c946:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c94a:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000c950:	31 ff                	xor    edi,edi
c000c952:	01 d9                	add    ecx,ebx
c000c954:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000c957:	83 fe 17             	cmp    esi,0x17
c000c95a:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000c960:	75 28                	jne    c000c98a <VgaText::scrollScreen()+0x4c>
c000c962:	f7 c7 01 00 00 00    	test   edi,0x1
c000c968:	74 1c                	je     c000c986 <VgaText::scrollScreen()+0x48>
c000c96a:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000c971:	50                   	push   eax
c000c972:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000c979:	50                   	push   eax
c000c97a:	e8 ad ff ff ff       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000c97f:	5a                   	pop    edx
c000c980:	5a                   	pop    edx
c000c981:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000c984:	eb 04                	jmp    c000c98a <VgaText::scrollScreen()+0x4c>
c000c986:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000c98a:	47                   	inc    edi
c000c98b:	41                   	inc    ecx
c000c98c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000c992:	75 c0                	jne    c000c954 <VgaText::scrollScreen()+0x16>
c000c994:	46                   	inc    esi
c000c995:	83 fe 18             	cmp    esi,0x18
c000c998:	75 b0                	jne    c000c94a <VgaText::scrollScreen()+0xc>
c000c99a:	39 1d c4 35 02 c0    	cmp    DWORD PTR ds:0xc00235c4,ebx
c000c9a0:	75 24                	jne    c000c9c6 <VgaText::scrollScreen()+0x88>
c000c9a2:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000c9a9:	74 08                	je     c000c9b3 <VgaText::scrollScreen()+0x75>
c000c9ab:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000c9b1:	eb 13                	jmp    c000c9c6 <VgaText::scrollScreen()+0x88>
c000c9b3:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000c9b9:	85 c0                	test   eax,eax
c000c9bb:	74 09                	je     c000c9c6 <VgaText::scrollScreen()+0x88>
c000c9bd:	83 ec 0c             	sub    esp,0xc
c000c9c0:	53                   	push   ebx
c000c9c1:	ff d0                	call   eax
c000c9c3:	83 c4 10             	add    esp,0x10
c000c9c6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c9ca:	5b                   	pop    ebx
c000c9cb:	5e                   	pop    esi
c000c9cc:	5f                   	pop    edi
c000c9cd:	e9 1e fe ff ff       	jmp    c000c7f0 <VgaText::updateCursor()>

c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>:
c000c9d2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000c9d7:	c1 e0 08             	shl    eax,0x8
c000c9da:	89 c2                	mov    edx,eax
c000c9dc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000c9e1:	09 d0                	or     eax,edx
c000c9e3:	c3                   	ret    

c000c9e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000c9e4:	53                   	push   ebx
c000c9e5:	83 ec 08             	sub    esp,0x8
c000c9e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c9ec:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c9f1:	50                   	push   eax
c000c9f2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c9f7:	50                   	push   eax
c000c9f8:	e8 2f ff ff ff       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000c9fd:	5a                   	pop    edx
c000c9fe:	0f b6 c0             	movzx  eax,al
c000ca01:	5b                   	pop    ebx
c000ca02:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ca07:	50                   	push   eax
c000ca08:	53                   	push   ebx
c000ca09:	e8 c4 ff ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000ca0e:	5a                   	pop    edx
c000ca0f:	5a                   	pop    edx
c000ca10:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ca16:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ca1a:	0f b7 d2             	movzx  edx,dx
c000ca1d:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ca22:	39 0d c4 35 02 c0    	cmp    DWORD PTR ds:0xc00235c4,ecx
c000ca28:	75 14                	jne    c000ca3e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ca2a:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ca30:	85 c0                	test   eax,eax
c000ca32:	74 0a                	je     c000ca3e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ca34:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ca38:	83 c4 08             	add    esp,0x8
c000ca3b:	5b                   	pop    ebx
c000ca3c:	ff e0                	jmp    eax
c000ca3e:	83 c4 08             	add    esp,0x8
c000ca41:	5b                   	pop    ebx
c000ca42:	c3                   	ret    
c000ca43:	90                   	nop

c000ca44 <VgaText::getCursorX()>:
c000ca44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca48:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000ca4e:	c3                   	ret    
c000ca4f:	90                   	nop

c000ca50 <VgaText::getCursorY()>:
c000ca50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca54:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000ca5a:	c3                   	ret    
c000ca5b:	90                   	nop

c000ca5c <VgaText::setCursor(int, int)>:
c000ca5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca64:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000ca6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca6e:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000ca74:	e9 77 fd ff ff       	jmp    c000c7f0 <VgaText::updateCursor()>
c000ca79:	90                   	nop

c000ca7a <VgaText::setCursorX(int)>:
c000ca7a:	83 ec 10             	sub    esp,0x10
c000ca7d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca81:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000ca87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8b:	50                   	push   eax
c000ca8c:	e8 cb ff ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000ca91:	83 c4 1c             	add    esp,0x1c
c000ca94:	c3                   	ret    
c000ca95:	90                   	nop

c000ca96 <VgaText::setCursorY(int)>:
c000ca96:	83 ec 10             	sub    esp,0x10
c000ca99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000caa1:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000caa7:	50                   	push   eax
c000caa8:	e8 af ff ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000caad:	83 c4 1c             	add    esp,0x1c
c000cab0:	c3                   	ret    
c000cab1:	90                   	nop

c000cab2 <VgaText::incrementCursor(bool)>:
c000cab2:	56                   	push   esi
c000cab3:	53                   	push   ebx
c000cab4:	51                   	push   ecx
c000cab5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cab9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cabd:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cac3:	40                   	inc    eax
c000cac4:	83 f8 50             	cmp    eax,0x50
c000cac7:	74 08                	je     c000cad1 <VgaText::incrementCursor(bool)+0x1f>
c000cac9:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cacf:	eb 33                	jmp    c000cb04 <VgaText::incrementCursor(bool)+0x52>
c000cad1:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cad7:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cae1:	8d 50 01             	lea    edx,[eax+0x1]
c000cae4:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000caea:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000caf0:	75 12                	jne    c000cb04 <VgaText::incrementCursor(bool)+0x52>
c000caf2:	83 ec 0c             	sub    esp,0xc
c000caf5:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cafb:	53                   	push   ebx
c000cafc:	e8 3d fe ff ff       	call   c000c93e <VgaText::scrollScreen()>
c000cb01:	83 c4 10             	add    esp,0x10
c000cb04:	89 f0                	mov    eax,esi
c000cb06:	84 c0                	test   al,al
c000cb08:	74 0c                	je     c000cb16 <VgaText::incrementCursor(bool)+0x64>
c000cb0a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cb0e:	5a                   	pop    edx
c000cb0f:	5b                   	pop    ebx
c000cb10:	5e                   	pop    esi
c000cb11:	e9 da fc ff ff       	jmp    c000c7f0 <VgaText::updateCursor()>
c000cb16:	58                   	pop    eax
c000cb17:	5b                   	pop    ebx
c000cb18:	5e                   	pop    esi
c000cb19:	c3                   	ret    

c000cb1a <VgaText::updateRAMUsageDisplay(int)>:
c000cb1a:	53                   	push   ebx
c000cb1b:	bb 0a 00 00 00       	mov    ebx,0xa
c000cb20:	6a 0f                	push   0xf
c000cb22:	6a 00                	push   0x0
c000cb24:	e8 03 fe ff ff       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000cb29:	5a                   	pop    edx
c000cb2a:	59                   	pop    ecx
c000cb2b:	0f b6 c8             	movzx  ecx,al
c000cb2e:	51                   	push   ecx
c000cb2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb33:	99                   	cdq    
c000cb34:	f7 fb                	idiv   ebx
c000cb36:	89 d3                	mov    ebx,edx
c000cb38:	83 c0 30             	add    eax,0x30
c000cb3b:	83 c3 30             	add    ebx,0x30
c000cb3e:	0f be c0             	movsx  eax,al
c000cb41:	0f b6 db             	movzx  ebx,bl
c000cb44:	50                   	push   eax
c000cb45:	e8 88 fe ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cb4a:	5a                   	pop    edx
c000cb4b:	5a                   	pop    edx
c000cb4c:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cb52:	51                   	push   ecx
c000cb53:	53                   	push   ebx
c000cb54:	e8 79 fe ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cb59:	5b                   	pop    ebx
c000cb5a:	5a                   	pop    edx
c000cb5b:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cb61:	51                   	push   ecx
c000cb62:	6a 25                	push   0x25
c000cb64:	e8 69 fe ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cb69:	59                   	pop    ecx
c000cb6a:	5b                   	pop    ebx
c000cb6b:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cb71:	5b                   	pop    ebx
c000cb72:	c3                   	ret    
c000cb73:	90                   	nop

c000cb74 <VgaText::updateDiskUsage()>:
c000cb74:	55                   	push   ebp
c000cb75:	bd 10 27 00 00       	mov    ebp,0x2710
c000cb7a:	57                   	push   edi
c000cb7b:	56                   	push   esi
c000cb7c:	53                   	push   ebx
c000cb7d:	6a 0f                	push   0xf
c000cb7f:	6a 00                	push   0x0
c000cb81:	e8 a6 fd ff ff       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000cb86:	5a                   	pop    edx
c000cb87:	0f b6 d8             	movzx  ebx,al
c000cb8a:	59                   	pop    ecx
c000cb8b:	a1 24 52 02 c0       	mov    eax,ds:0xc0025224
c000cb90:	53                   	push   ebx
c000cb91:	b9 0a 00 00 00       	mov    ecx,0xa
c000cb96:	99                   	cdq    
c000cb97:	f7 fd                	idiv   ebp
c000cb99:	99                   	cdq    
c000cb9a:	f7 f9                	idiv   ecx
c000cb9c:	8d 42 30             	lea    eax,[edx+0x30]
c000cb9f:	0f b6 c0             	movzx  eax,al
c000cba2:	50                   	push   eax
c000cba3:	e8 2a fe ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cba8:	5e                   	pop    esi
c000cba9:	5f                   	pop    edi
c000cbaa:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000cbb0:	bf e8 03 00 00       	mov    edi,0x3e8
c000cbb5:	53                   	push   ebx
c000cbb6:	a1 24 52 02 c0       	mov    eax,ds:0xc0025224
c000cbbb:	99                   	cdq    
c000cbbc:	f7 ff                	idiv   edi
c000cbbe:	99                   	cdq    
c000cbbf:	f7 f9                	idiv   ecx
c000cbc1:	8d 42 30             	lea    eax,[edx+0x30]
c000cbc4:	0f b6 c0             	movzx  eax,al
c000cbc7:	50                   	push   eax
c000cbc8:	e8 05 fe ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cbcd:	5a                   	pop    edx
c000cbce:	5e                   	pop    esi
c000cbcf:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000cbd5:	be 64 00 00 00       	mov    esi,0x64
c000cbda:	53                   	push   ebx
c000cbdb:	a1 24 52 02 c0       	mov    eax,ds:0xc0025224
c000cbe0:	99                   	cdq    
c000cbe1:	f7 fe                	idiv   esi
c000cbe3:	99                   	cdq    
c000cbe4:	f7 f9                	idiv   ecx
c000cbe6:	8d 42 30             	lea    eax,[edx+0x30]
c000cbe9:	0f b6 c0             	movzx  eax,al
c000cbec:	50                   	push   eax
c000cbed:	e8 e0 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cbf2:	5a                   	pop    edx
c000cbf3:	5a                   	pop    edx
c000cbf4:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000cbfa:	53                   	push   ebx
c000cbfb:	a1 24 52 02 c0       	mov    eax,ds:0xc0025224
c000cc00:	99                   	cdq    
c000cc01:	f7 f9                	idiv   ecx
c000cc03:	99                   	cdq    
c000cc04:	f7 f9                	idiv   ecx
c000cc06:	8d 42 30             	lea    eax,[edx+0x30]
c000cc09:	0f b6 c0             	movzx  eax,al
c000cc0c:	50                   	push   eax
c000cc0d:	e8 c0 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc12:	5a                   	pop    edx
c000cc13:	5a                   	pop    edx
c000cc14:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000cc1a:	53                   	push   ebx
c000cc1b:	a1 24 52 02 c0       	mov    eax,ds:0xc0025224
c000cc20:	99                   	cdq    
c000cc21:	f7 f9                	idiv   ecx
c000cc23:	8d 42 30             	lea    eax,[edx+0x30]
c000cc26:	0f b6 c0             	movzx  eax,al
c000cc29:	50                   	push   eax
c000cc2a:	e8 a3 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc2f:	5a                   	pop    edx
c000cc30:	5a                   	pop    edx
c000cc31:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000cc37:	53                   	push   ebx
c000cc38:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c000cc3d:	99                   	cdq    
c000cc3e:	f7 fd                	idiv   ebp
c000cc40:	99                   	cdq    
c000cc41:	f7 f9                	idiv   ecx
c000cc43:	8d 42 30             	lea    eax,[edx+0x30]
c000cc46:	0f b6 c0             	movzx  eax,al
c000cc49:	50                   	push   eax
c000cc4a:	e8 83 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc4f:	5d                   	pop    ebp
c000cc50:	5a                   	pop    edx
c000cc51:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000cc57:	53                   	push   ebx
c000cc58:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c000cc5d:	99                   	cdq    
c000cc5e:	f7 ff                	idiv   edi
c000cc60:	99                   	cdq    
c000cc61:	f7 f9                	idiv   ecx
c000cc63:	8d 42 30             	lea    eax,[edx+0x30]
c000cc66:	0f b6 c0             	movzx  eax,al
c000cc69:	50                   	push   eax
c000cc6a:	e8 63 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc6f:	5f                   	pop    edi
c000cc70:	5d                   	pop    ebp
c000cc71:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000cc77:	53                   	push   ebx
c000cc78:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c000cc7d:	99                   	cdq    
c000cc7e:	f7 fe                	idiv   esi
c000cc80:	99                   	cdq    
c000cc81:	f7 f9                	idiv   ecx
c000cc83:	8d 42 30             	lea    eax,[edx+0x30]
c000cc86:	0f b6 c0             	movzx  eax,al
c000cc89:	50                   	push   eax
c000cc8a:	e8 43 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc8f:	5a                   	pop    edx
c000cc90:	5e                   	pop    esi
c000cc91:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000cc97:	53                   	push   ebx
c000cc98:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c000cc9d:	99                   	cdq    
c000cc9e:	f7 f9                	idiv   ecx
c000cca0:	99                   	cdq    
c000cca1:	f7 f9                	idiv   ecx
c000cca3:	8d 42 30             	lea    eax,[edx+0x30]
c000cca6:	0f b6 c0             	movzx  eax,al
c000cca9:	50                   	push   eax
c000ccaa:	e8 23 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000ccaf:	5f                   	pop    edi
c000ccb0:	5d                   	pop    ebp
c000ccb1:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000ccb7:	53                   	push   ebx
c000ccb8:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c000ccbd:	99                   	cdq    
c000ccbe:	f7 f9                	idiv   ecx
c000ccc0:	83 c2 30             	add    edx,0x30
c000ccc3:	0f b6 d2             	movzx  edx,dl
c000ccc6:	52                   	push   edx
c000ccc7:	e8 06 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cccc:	5a                   	pop    edx
c000cccd:	59                   	pop    ecx
c000ccce:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000ccd4:	5b                   	pop    ebx
c000ccd5:	5e                   	pop    esi
c000ccd6:	5f                   	pop    edi
c000ccd7:	5d                   	pop    ebp
c000ccd8:	c3                   	ret    
c000ccd9:	90                   	nop

c000ccda <VgaText::updateTitle()>:
c000ccda:	53                   	push   ebx
c000ccdb:	31 c0                	xor    eax,eax
c000ccdd:	83 ec 58             	sub    esp,0x58
c000cce0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000cce4:	89 e1                	mov    ecx,esp
c000cce6:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000ccea:	40                   	inc    eax
c000cceb:	83 f8 50             	cmp    eax,0x50
c000ccee:	75 f6                	jne    c000cce6 <VgaText::updateTitle()+0xc>
c000ccf0:	31 c0                	xor    eax,eax
c000ccf2:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000ccf9:	84 db                	test   bl,bl
c000ccfb:	74 06                	je     c000cd03 <VgaText::updateTitle()+0x29>
c000ccfd:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000cd00:	40                   	inc    eax
c000cd01:	eb ef                	jmp    c000ccf2 <VgaText::updateTitle()+0x18>
c000cd03:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000cd09:	85 c0                	test   eax,eax
c000cd0b:	74 09                	je     c000cd16 <VgaText::updateTitle()+0x3c>
c000cd0d:	53                   	push   ebx
c000cd0e:	53                   	push   ebx
c000cd0f:	51                   	push   ecx
c000cd10:	52                   	push   edx
c000cd11:	ff d0                	call   eax
c000cd13:	83 c4 10             	add    esp,0x10
c000cd16:	e8 59 fe ff ff       	call   c000cb74 <VgaText::updateDiskUsage()>
c000cd1b:	83 c4 58             	add    esp,0x58
c000cd1e:	5b                   	pop    ebx
c000cd1f:	c3                   	ret    

c000cd20 <VgaText::setTitleTextColour(VgaColour)>:
c000cd20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd28:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000cd2e:	eb aa                	jmp    c000ccda <VgaText::updateTitle()>

c000cd30 <VgaText::setTitleColour(VgaColour)>:
c000cd30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd38:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000cd3e:	eb 9a                	jmp    c000ccda <VgaText::updateTitle()>

c000cd40 <VgaText::setTitle(char*)>:
c000cd40:	53                   	push   ebx
c000cd41:	83 ec 10             	sub    esp,0x10
c000cd44:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd4c:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000cd52:	50                   	push   eax
c000cd53:	e8 4f 39 ff ff       	call   c00006a7 <strcpy>
c000cd58:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000cd5c:	83 c4 18             	add    esp,0x18
c000cd5f:	5b                   	pop    ebx
c000cd60:	e9 75 ff ff ff       	jmp    c000ccda <VgaText::updateTitle()>
c000cd65:	90                   	nop

c000cd66 <VgaText::decrementCursor(bool)>:
c000cd66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd6a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd6e:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000cd74:	85 c0                	test   eax,eax
c000cd76:	74 07                	je     c000cd7f <VgaText::decrementCursor(bool)+0x19>
c000cd78:	48                   	dec    eax
c000cd79:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000cd7f:	84 c9                	test   cl,cl
c000cd81:	74 09                	je     c000cd8c <VgaText::decrementCursor(bool)+0x26>
c000cd83:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cd87:	e9 64 fa ff ff       	jmp    c000c7f0 <VgaText::updateCursor()>
c000cd8c:	c3                   	ret    
c000cd8d:	90                   	nop

c000cd8e <VgaText::putchar(char, VgaColour, VgaColour)>:
c000cd8e:	53                   	push   ebx
c000cd8f:	83 ec 08             	sub    esp,0x8
c000cd92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cd96:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd9a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cd9e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000cda2:	3c 07                	cmp    al,0x7
c000cda4:	75 2a                	jne    c000cdd0 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000cda6:	a1 e4 35 02 c0       	mov    eax,ds:0xc00235e4
c000cdab:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000cdb3:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000cdbb:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000cdc3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cdc7:	83 c4 08             	add    esp,0x8
c000cdca:	5b                   	pop    ebx
c000cdcb:	e9 fa 2e 00 00       	jmp    c000fcca <Buzzer::beep(int, int, bool)>
c000cdd0:	3c 0d                	cmp    al,0xd
c000cdd2:	75 0c                	jne    c000cde0 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000cdd4:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cdde:	eb 3b                	jmp    c000ce1b <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000cde0:	3c 0a                	cmp    al,0xa
c000cde2:	75 40                	jne    c000ce24 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000cde4:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cdea:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cdf4:	8d 50 01             	lea    edx,[eax+0x1]
c000cdf7:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cdfd:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000ce03:	75 12                	jne    c000ce17 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000ce05:	83 ec 0c             	sub    esp,0xc
c000ce08:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000ce0e:	53                   	push   ebx
c000ce0f:	e8 2a fb ff ff       	call   c000c93e <VgaText::scrollScreen()>
c000ce14:	83 c4 10             	add    esp,0x10
c000ce17:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce1b:	83 c4 08             	add    esp,0x8
c000ce1e:	5b                   	pop    ebx
c000ce1f:	e9 cc f9 ff ff       	jmp    c000c7f0 <VgaText::updateCursor()>
c000ce24:	3c 08                	cmp    al,0x8
c000ce26:	75 31                	jne    c000ce59 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000ce28:	50                   	push   eax
c000ce29:	50                   	push   eax
c000ce2a:	6a 01                	push   0x1
c000ce2c:	53                   	push   ebx
c000ce2d:	e8 34 ff ff ff       	call   c000cd66 <VgaText::decrementCursor(bool)>
c000ce32:	5a                   	pop    edx
c000ce33:	59                   	pop    ecx
c000ce34:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000ce3a:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000ce40:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000ce46:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000ce4c:	6a 20                	push   0x20
c000ce4e:	53                   	push   ebx
c000ce4f:	e8 90 fb ff ff       	call   c000c9e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ce54:	83 c4 28             	add    esp,0x28
c000ce57:	5b                   	pop    ebx
c000ce58:	c3                   	ret    
c000ce59:	83 ec 08             	sub    esp,0x8
c000ce5c:	0f be c0             	movsx  eax,al
c000ce5f:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000ce65:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000ce6b:	51                   	push   ecx
c000ce6c:	52                   	push   edx
c000ce6d:	50                   	push   eax
c000ce6e:	53                   	push   ebx
c000ce6f:	e8 70 fb ff ff       	call   c000c9e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ce74:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000ce78:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000ce80:	83 c4 28             	add    esp,0x28
c000ce83:	5b                   	pop    ebx
c000ce84:	e9 29 fc ff ff       	jmp    c000cab2 <VgaText::incrementCursor(bool)>
c000ce89:	90                   	nop

c000ce8a <VgaText::isShowingCursor()>:
c000ce8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce8e:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000ce94:	c3                   	ret    
c000ce95:	90                   	nop

c000ce96 <VgaText::isBlinkDisabled()>:
c000ce96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce9a:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000cea0:	83 f0 01             	xor    eax,0x1
c000cea3:	c3                   	ret    

c000cea4 <VgaText::setCursorHeight(int)>:
c000cea4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cea8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ceac:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000ceb2:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000ceb9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cebd:	e9 48 f9 ff ff       	jmp    c000c80a <VgaText::showCursor(bool)>

c000cec2 <VgaText::getCursorHeight()>:
c000cec2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cec6:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000cecc:	c3                   	ret    

c000cecd <setActiveTerminal(VgaText*)>:
c000cecd:	53                   	push   ebx
c000cece:	83 ec 08             	sub    esp,0x8
c000ced1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	75 11                	jne    c000ceea <setActiveTerminal(VgaText*)+0x1d>
c000ced9:	c7 44 24 10 54 03 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020354
c000cee1:	83 c4 08             	add    esp,0x8
c000cee4:	5b                   	pop    ebx
c000cee5:	e9 8a 7c 00 00       	jmp    c0014b74 <Krnl::panic(char const*)>
c000ceea:	50                   	push   eax
c000ceeb:	50                   	push   eax
c000ceec:	53                   	push   ebx
c000ceed:	68 62 03 02 c0       	push   0xc0020362
c000cef2:	e8 e8 1f 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000cef7:	a1 c4 35 02 c0       	mov    eax,ds:0xc00235c4
c000cefc:	83 c4 10             	add    esp,0x10
c000ceff:	85 c0                	test   eax,eax
c000cf01:	74 0c                	je     c000cf0f <setActiveTerminal(VgaText*)+0x42>
c000cf03:	83 ec 0c             	sub    esp,0xc
c000cf06:	50                   	push   eax
c000cf07:	e8 e4 f8 ff ff       	call   c000c7f0 <VgaText::updateCursor()>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	89 1d c4 35 02 c0    	mov    DWORD PTR ds:0xc00235c4,ebx
c000cf15:	51                   	push   ecx
c000cf16:	51                   	push   ecx
c000cf17:	53                   	push   ebx
c000cf18:	68 7a 03 02 c0       	push   0xc002037a
c000cf1d:	e8 bd 1f 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000cf22:	83 c4 0c             	add    esp,0xc
c000cf25:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000cf2b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000cf31:	53                   	push   ebx
c000cf32:	e8 25 fb ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000cf37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf3a:	e8 57 ff ff ff       	call   c000ce96 <VgaText::isBlinkDisabled()>
c000cf3f:	5a                   	pop    edx
c000cf40:	0f b6 c0             	movzx  eax,al
c000cf43:	59                   	pop    ecx
c000cf44:	50                   	push   eax
c000cf45:	53                   	push   ebx
c000cf46:	e8 cf f8 ff ff       	call   c000c81a <VgaText::disableBlink(bool)>
c000cf4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf4e:	e8 6f ff ff ff       	call   c000cec2 <VgaText::getCursorHeight()>
c000cf53:	5a                   	pop    edx
c000cf54:	59                   	pop    ecx
c000cf55:	50                   	push   eax
c000cf56:	53                   	push   ebx
c000cf57:	e8 48 ff ff ff       	call   c000cea4 <VgaText::setCursorHeight(int)>
c000cf5c:	83 c4 10             	add    esp,0x10
c000cf5f:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000cf66:	75 0a                	jne    c000cf72 <setActiveTerminal(VgaText*)+0xa5>
c000cf68:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000cf72:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf76:	83 c4 08             	add    esp,0x8
c000cf79:	5b                   	pop    ebx
c000cf7a:	e9 1d f8 ff ff       	jmp    c000c79c <VgaText::load()>

c000cf7f <doTerminalCycle()>:
c000cf7f:	83 ec 18             	sub    esp,0x18
c000cf82:	a1 c0 35 02 c0       	mov    eax,ds:0xc00235c0
c000cf87:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000cf8d:	50                   	push   eax
c000cf8e:	a3 c0 35 02 c0       	mov    ds:0xc00235c0,eax
c000cf93:	e8 35 ff ff ff       	call   c000cecd <setActiveTerminal(VgaText*)>
c000cf98:	83 c4 1c             	add    esp,0x1c
c000cf9b:	c3                   	ret    

c000cf9c <VgaText::doUpdate()>:
c000cf9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cfa0:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000cfa6:	85 c0                	test   eax,eax
c000cfa8:	74 02                	je     c000cfac <VgaText::doUpdate()+0x10>
c000cfaa:	ff e0                	jmp    eax
c000cfac:	c3                   	ret    
c000cfad:	90                   	nop

c000cfae <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000cfae:	55                   	push   ebp
c000cfaf:	57                   	push   edi
c000cfb0:	56                   	push   esi
c000cfb1:	53                   	push   ebx
c000cfb2:	83 ec 1c             	sub    esp,0x1c
c000cfb5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000cfb9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000cfbe:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000cfc5:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000cfc8:	50                   	push   eax
c000cfc9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000cfce:	50                   	push   eax
c000cfcf:	e8 58 f9 ff ff       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000cfd4:	59                   	pop    ecx
c000cfd5:	0f b6 c0             	movzx  eax,al
c000cfd8:	5b                   	pop    ebx
c000cfd9:	31 c9                	xor    ecx,ecx
c000cfdb:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000cfe3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000cfe7:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000cfed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cff1:	0f b7 db             	movzx  ebx,bx
c000cff4:	01 db                	add    ebx,ebx
c000cff6:	01 fb                	add    ebx,edi
c000cff8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cffb:	84 c0                	test   al,al
c000cffd:	0f 84 38 01 00 00    	je     c000d13b <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c000d003:	3c 0d                	cmp    al,0xd
c000d005:	75 0f                	jne    c000d016 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c000d007:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d011:	e9 1f 01 00 00       	jmp    c000d135 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d016:	3c 0a                	cmp    al,0xa
c000d018:	75 5b                	jne    c000d075 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c000d01a:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d020:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d02a:	8d 48 01             	lea    ecx,[eax+0x1]
c000d02d:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d033:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d039:	75 12                	jne    c000d04d <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c000d03b:	83 ec 0c             	sub    esp,0xc
c000d03e:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d044:	55                   	push   ebp
c000d045:	e8 f4 f8 ff ff       	call   c000c93e <VgaText::scrollScreen()>
c000d04a:	83 c4 10             	add    esp,0x10
c000d04d:	83 ec 0c             	sub    esp,0xc
c000d050:	55                   	push   ebp
c000d051:	e8 9a f7 ff ff       	call   c000c7f0 <VgaText::updateCursor()>
c000d056:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d05e:	83 c4 10             	add    esp,0x10
c000d061:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d067:	31 c9                	xor    ecx,ecx
c000d069:	0f b7 db             	movzx  ebx,bx
c000d06c:	01 db                	add    ebx,ebx
c000d06e:	01 fb                	add    ebx,edi
c000d070:	e9 c0 00 00 00       	jmp    c000d135 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d075:	3c 08                	cmp    al,0x8
c000d077:	75 4e                	jne    c000d0c7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d079:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d07d:	53                   	push   ebx
c000d07e:	53                   	push   ebx
c000d07f:	6a 01                	push   0x1
c000d081:	55                   	push   ebp
c000d082:	e8 df fc ff ff       	call   c000cd66 <VgaText::decrementCursor(bool)>
c000d087:	58                   	pop    eax
c000d088:	5a                   	pop    edx
c000d089:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d08f:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d095:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d09b:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d0a1:	6a 20                	push   0x20
c000d0a3:	55                   	push   ebp
c000d0a4:	e8 3b f9 ff ff       	call   c000c9e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d0a9:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d0b1:	83 c4 20             	add    esp,0x20
c000d0b4:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d0ba:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d0be:	0f b7 db             	movzx  ebx,bx
c000d0c1:	01 db                	add    ebx,ebx
c000d0c3:	01 fb                	add    ebx,edi
c000d0c5:	eb 6e                	jmp    c000d135 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d0c7:	51                   	push   ecx
c000d0c8:	51                   	push   ecx
c000d0c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d0cd:	50                   	push   eax
c000d0ce:	e8 ff f8 ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0d3:	83 c4 10             	add    esp,0x10
c000d0d6:	66 89 03             	mov    WORD PTR [ebx],ax
c000d0d9:	39 2d c4 35 02 c0    	cmp    DWORD PTR ds:0xc00235c4,ebp
c000d0df:	75 2a                	jne    c000d10b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d0e1:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d0e7:	85 c0                	test   eax,eax
c000d0e9:	74 20                	je     c000d10b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d0eb:	52                   	push   edx
c000d0ec:	52                   	push   edx
c000d0ed:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d0f3:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d0f9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d0fd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d101:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d104:	51                   	push   ecx
c000d105:	55                   	push   ebp
c000d106:	ff d0                	call   eax
c000d108:	83 c4 20             	add    esp,0x20
c000d10b:	83 c3 02             	add    ebx,0x2
c000d10e:	50                   	push   eax
c000d10f:	50                   	push   eax
c000d110:	6a 00                	push   0x0
c000d112:	55                   	push   ebp
c000d113:	e8 9a f9 ff ff       	call   c000cab2 <VgaText::incrementCursor(bool)>
c000d118:	83 c4 10             	add    esp,0x10
c000d11b:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d122:	75 0f                	jne    c000d133 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c000d124:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d12c:	0f b7 db             	movzx  ebx,bx
c000d12f:	01 db                	add    ebx,ebx
c000d131:	01 fb                	add    ebx,edi
c000d133:	b1 01                	mov    cl,0x1
c000d135:	46                   	inc    esi
c000d136:	e9 bd fe ff ff       	jmp    c000cff8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c000d13b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d13f:	83 ec 0c             	sub    esp,0xc
c000d142:	55                   	push   ebp
c000d143:	e8 a8 f6 ff ff       	call   c000c7f0 <VgaText::updateCursor()>
c000d148:	83 c4 10             	add    esp,0x10
c000d14b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d14f:	84 c9                	test   cl,cl
c000d151:	74 0c                	je     c000d15f <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c000d153:	83 ec 0c             	sub    esp,0xc
c000d156:	55                   	push   ebp
c000d157:	e8 40 fe ff ff       	call   c000cf9c <VgaText::doUpdate()>
c000d15c:	83 c4 10             	add    esp,0x10
c000d15f:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d166:	83 c4 1c             	add    esp,0x1c
c000d169:	5b                   	pop    ebx
c000d16a:	5e                   	pop    esi
c000d16b:	5f                   	pop    edi
c000d16c:	5d                   	pop    ebp
c000d16d:	c3                   	ret    

c000d16e <VgaText::clearScreen()>:
c000d16e:	57                   	push   edi
c000d16f:	56                   	push   esi
c000d170:	31 f6                	xor    esi,esi
c000d172:	53                   	push   ebx
c000d173:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d177:	52                   	push   edx
c000d178:	6a 00                	push   0x0
c000d17a:	6a 00                	push   0x0
c000d17c:	53                   	push   ebx
c000d17d:	e8 da f8 ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000d182:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d189:	83 c4 10             	add    esp,0x10
c000d18c:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d192:	7e 26                	jle    c000d1ba <VgaText::clearScreen()+0x4c>
c000d194:	31 ff                	xor    edi,edi
c000d196:	50                   	push   eax
c000d197:	50                   	push   eax
c000d198:	56                   	push   esi
c000d199:	57                   	push   edi
c000d19a:	47                   	inc    edi
c000d19b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d1a1:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d1a7:	6a 20                	push   0x20
c000d1a9:	53                   	push   ebx
c000d1aa:	e8 35 f8 ff ff       	call   c000c9e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d1af:	83 c4 20             	add    esp,0x20
c000d1b2:	83 ff 50             	cmp    edi,0x50
c000d1b5:	75 df                	jne    c000d196 <VgaText::clearScreen()+0x28>
c000d1b7:	46                   	inc    esi
c000d1b8:	eb d2                	jmp    c000d18c <VgaText::clearScreen()+0x1e>
c000d1ba:	83 ec 0c             	sub    esp,0xc
c000d1bd:	53                   	push   ebx
c000d1be:	e8 d9 fd ff ff       	call   c000cf9c <VgaText::doUpdate()>
c000d1c3:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d1ca:	83 c4 10             	add    esp,0x10
c000d1cd:	5b                   	pop    ebx
c000d1ce:	5e                   	pop    esi
c000d1cf:	5f                   	pop    edi
c000d1d0:	c3                   	ret    
c000d1d1:	90                   	nop

c000d1d2 <VgaText::putchar(char)>:
c000d1d2:	56                   	push   esi
c000d1d3:	53                   	push   ebx
c000d1d4:	83 ec 14             	sub    esp,0x14
c000d1d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d1db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d1df:	3c 5b                	cmp    al,0x5b
c000d1e1:	75 21                	jne    c000d204 <VgaText::putchar(char)+0x32>
c000d1e3:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d1ea:	74 28                	je     c000d214 <VgaText::putchar(char)+0x42>
c000d1ec:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d1f5:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d1ff:	e9 e2 00 00 00       	jmp    c000d2e6 <VgaText::putchar(char)+0x114>
c000d204:	3c 1b                	cmp    al,0x1b
c000d206:	75 0c                	jne    c000d214 <VgaText::putchar(char)+0x42>
c000d208:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d20f:	e9 d2 00 00 00       	jmp    c000d2e6 <VgaText::putchar(char)+0x114>
c000d214:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d21a:	84 c9                	test   cl,cl
c000d21c:	0f 84 ab 00 00 00    	je     c000d2cd <VgaText::putchar(char)+0xfb>
c000d222:	8d 50 c0             	lea    edx,[eax-0x40]
c000d225:	80 fa 3e             	cmp    dl,0x3e
c000d228:	0f 87 82 00 00 00    	ja     c000d2b0 <VgaText::putchar(char)+0xde>
c000d22e:	3c 6d                	cmp    al,0x6d
c000d230:	75 4d                	jne    c000d27f <VgaText::putchar(char)+0xad>
c000d232:	31 f6                	xor    esi,esi
c000d234:	31 d2                	xor    edx,edx
c000d236:	31 c0                	xor    eax,eax
c000d238:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d23e:	7e 30                	jle    c000d270 <VgaText::putchar(char)+0x9e>
c000d240:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d248:	80 fa 3b             	cmp    dl,0x3b
c000d24b:	75 17                	jne    c000d264 <VgaText::putchar(char)+0x92>
c000d24d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d251:	50                   	push   eax
c000d252:	53                   	push   ebx
c000d253:	e8 fc f5 ff ff       	call   c000c854 <VgaText::doANSI_SGR(int)>
c000d258:	59                   	pop    ecx
c000d259:	31 d2                	xor    edx,edx
c000d25b:	58                   	pop    eax
c000d25c:	31 c0                	xor    eax,eax
c000d25e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d262:	eb 09                	jmp    c000d26d <VgaText::putchar(char)+0x9b>
c000d264:	6b c0 0a             	imul   eax,eax,0xa
c000d267:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d26b:	88 ca                	mov    dl,cl
c000d26d:	46                   	inc    esi
c000d26e:	eb c8                	jmp    c000d238 <VgaText::putchar(char)+0x66>
c000d270:	84 d2                	test   dl,dl
c000d272:	74 31                	je     c000d2a5 <VgaText::putchar(char)+0xd3>
c000d274:	50                   	push   eax
c000d275:	53                   	push   ebx
c000d276:	e8 d9 f5 ff ff       	call   c000c854 <VgaText::doANSI_SGR(int)>
c000d27b:	58                   	pop    eax
c000d27c:	5a                   	pop    edx
c000d27d:	eb 26                	jmp    c000d2a5 <VgaText::putchar(char)+0xd3>
c000d27f:	3c 4a                	cmp    al,0x4a
c000d281:	75 22                	jne    c000d2a5 <VgaText::putchar(char)+0xd3>
c000d283:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d28a:	75 19                	jne    c000d2a5 <VgaText::putchar(char)+0xd3>
c000d28c:	83 ec 0c             	sub    esp,0xc
c000d28f:	53                   	push   ebx
c000d290:	e8 d9 fe ff ff       	call   c000d16e <VgaText::clearScreen()>
c000d295:	83 c4 0c             	add    esp,0xc
c000d298:	6a 00                	push   0x0
c000d29a:	6a 00                	push   0x0
c000d29c:	53                   	push   ebx
c000d29d:	e8 ba f7 ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000d2a2:	83 c4 10             	add    esp,0x10
c000d2a5:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d2ae:	eb 36                	jmp    c000d2e6 <VgaText::putchar(char)+0x114>
c000d2b0:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d2b6:	83 fa 0e             	cmp    edx,0xe
c000d2b9:	7f 2b                	jg     c000d2e6 <VgaText::putchar(char)+0x114>
c000d2bb:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d2be:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d2c4:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d2cb:	eb 19                	jmp    c000d2e6 <VgaText::putchar(char)+0x114>
c000d2cd:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d2d3:	0f be c0             	movsx  eax,al
c000d2d6:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d2dc:	50                   	push   eax
c000d2dd:	53                   	push   ebx
c000d2de:	e8 ab fa ff ff       	call   c000cd8e <VgaText::putchar(char, VgaColour, VgaColour)>
c000d2e3:	83 c4 10             	add    esp,0x10
c000d2e6:	83 c4 14             	add    esp,0x14
c000d2e9:	5b                   	pop    ebx
c000d2ea:	5e                   	pop    esi
c000d2eb:	c3                   	ret    

c000d2ec <VgaText::puts(char const*)>:
c000d2ec:	53                   	push   ebx
c000d2ed:	83 ec 08             	sub    esp,0x8
c000d2f0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d2f4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d2f7:	84 c0                	test   al,al
c000d2f9:	74 12                	je     c000d30d <VgaText::puts(char const*)+0x21>
c000d2fb:	43                   	inc    ebx
c000d2fc:	51                   	push   ecx
c000d2fd:	51                   	push   ecx
c000d2fe:	50                   	push   eax
c000d2ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d303:	e8 ca fe ff ff       	call   c000d1d2 <VgaText::putchar(char)>
c000d308:	83 c4 10             	add    esp,0x10
c000d30b:	eb e7                	jmp    c000d2f4 <VgaText::puts(char const*)+0x8>
c000d30d:	83 c4 08             	add    esp,0x8
c000d310:	5b                   	pop    ebx
c000d311:	c3                   	ret    

c000d312 <VgaText::putx(unsigned int)>:
c000d312:	57                   	push   edi
c000d313:	b9 11 00 00 00       	mov    ecx,0x11
c000d318:	56                   	push   esi
c000d319:	be 96 03 02 c0       	mov    esi,0xc0020396
c000d31e:	53                   	push   ebx
c000d31f:	83 ec 20             	sub    esp,0x20
c000d322:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d326:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d32a:	fc                   	cld    
c000d32b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d32d:	be 08 00 00 00       	mov    esi,0x8
c000d332:	50                   	push   eax
c000d333:	50                   	push   eax
c000d334:	89 d8                	mov    eax,ebx
c000d336:	c1 e3 04             	shl    ebx,0x4
c000d339:	c1 e8 1c             	shr    eax,0x1c
c000d33c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d341:	50                   	push   eax
c000d342:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d346:	e8 87 fe ff ff       	call   c000d1d2 <VgaText::putchar(char)>
c000d34b:	83 c4 10             	add    esp,0x10
c000d34e:	4e                   	dec    esi
c000d34f:	75 e1                	jne    c000d332 <VgaText::putx(unsigned int)+0x20>
c000d351:	83 c4 20             	add    esp,0x20
c000d354:	5b                   	pop    ebx
c000d355:	5e                   	pop    esi
c000d356:	5f                   	pop    edi
c000d357:	c3                   	ret    

c000d358 <VgaText::VgaText(char const*)>:
c000d358:	57                   	push   edi
c000d359:	56                   	push   esi
c000d35a:	53                   	push   ebx
c000d35b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d35f:	83 ec 08             	sub    esp,0x8
c000d362:	6a 00                	push   0x0
c000d364:	50                   	push   eax
c000d365:	e8 c6 05 00 00       	call   c000d930 <UnixFile::UnixFile(int)>
c000d36a:	83 c4 10             	add    esp,0x10
c000d36d:	ba fc 03 02 c0       	mov    edx,0xc00203fc
c000d372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d376:	89 10                	mov    DWORD PTR [eax],edx
c000d378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d37c:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d38a:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d398:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d39f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3a3:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ae:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3bc:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d3c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ca:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d3d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3d5:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3e0:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d3e6:	bb a0 35 02 c0       	mov    ebx,0xc00235a0
c000d3eb:	b8 08 00 00 00       	mov    eax,0x8
c000d3f0:	fc                   	cld    
c000d3f1:	89 d7                	mov    edi,edx
c000d3f3:	89 de                	mov    esi,ebx
c000d3f5:	89 c1                	mov    ecx,eax
c000d3f7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d3f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3fd:	05 1e 10 00 00       	add    eax,0x101e
c000d402:	83 ec 08             	sub    esp,0x8
c000d405:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d409:	50                   	push   eax
c000d40a:	e8 98 32 ff ff       	call   c00006a7 <strcpy>
c000d40f:	83 c4 10             	add    esp,0x10
c000d412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d416:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d424:	83 c0 0c             	add    eax,0xc
c000d427:	83 ec 04             	sub    esp,0x4
c000d42a:	68 00 0f 00 00       	push   0xf00
c000d42f:	6a 00                	push   0x0
c000d431:	50                   	push   eax
c000d432:	e8 d1 31 ff ff       	call   c0000608 <memset>
c000d437:	83 c4 10             	add    esp,0x10
c000d43a:	83 ec 04             	sub    esp,0x4
c000d43d:	6a 00                	push   0x0
c000d43f:	6a 07                	push   0x7
c000d441:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d445:	e8 c2 f4 ff ff       	call   c000c90c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d44a:	83 c4 10             	add    esp,0x10
c000d44d:	83 ec 08             	sub    esp,0x8
c000d450:	6a 02                	push   0x2
c000d452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d456:	e8 49 fa ff ff       	call   c000cea4 <VgaText::setCursorHeight(int)>
c000d45b:	83 c4 10             	add    esp,0x10
c000d45e:	83 ec 04             	sub    esp,0x4
c000d461:	6a 00                	push   0x0
c000d463:	6a 00                	push   0x0
c000d465:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d469:	e8 ee f5 ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000d46e:	83 c4 10             	add    esp,0x10
c000d471:	83 ec 08             	sub    esp,0x8
c000d474:	6a 01                	push   0x1
c000d476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d47a:	e8 8b f3 ff ff       	call   c000c80a <VgaText::showCursor(bool)>
c000d47f:	83 c4 10             	add    esp,0x10
c000d482:	83 ec 08             	sub    esp,0x8
c000d485:	6a 01                	push   0x1
c000d487:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d48b:	e8 8a f3 ff ff       	call   c000c81a <VgaText::disableBlink(bool)>
c000d490:	83 c4 10             	add    esp,0x10
c000d493:	83 ec 0c             	sub    esp,0xc
c000d496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49a:	e8 cf fc ff ff       	call   c000d16e <VgaText::clearScreen()>
c000d49f:	83 c4 10             	add    esp,0x10
c000d4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4a6:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d4ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4b1:	05 9e 10 00 00       	add    eax,0x109e
c000d4b6:	83 ec 04             	sub    esp,0x4
c000d4b9:	68 96 00 00 00       	push   0x96
c000d4be:	6a 00                	push   0x0
c000d4c0:	50                   	push   eax
c000d4c1:	e8 42 31 ff ff       	call   c0000608 <memset>
c000d4c6:	83 c4 10             	add    esp,0x10
c000d4c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4cd:	05 34 11 00 00       	add    eax,0x1134
c000d4d2:	83 ec 04             	sub    esp,0x4
c000d4d5:	68 2c 01 00 00       	push   0x12c
c000d4da:	6a 00                	push   0x0
c000d4dc:	50                   	push   eax
c000d4dd:	e8 26 31 ff ff       	call   c0000608 <memset>
c000d4e2:	83 c4 10             	add    esp,0x10
c000d4e5:	90                   	nop
c000d4e6:	5b                   	pop    ebx
c000d4e7:	5e                   	pop    esi
c000d4e8:	5f                   	pop    edi
c000d4e9:	c3                   	ret    

c000d4ea <VgaText::receiveKey(unsigned char)>:
c000d4ea:	55                   	push   ebp
c000d4eb:	57                   	push   edi
c000d4ec:	56                   	push   esi
c000d4ed:	53                   	push   ebx
c000d4ee:	83 ec 1c             	sub    esp,0x1c
c000d4f1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d4f5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d4f9:	84 db                	test   bl,bl
c000d4fb:	0f 84 c9 00 00 00    	je     c000d5ca <VgaText::receiveKey(unsigned char)+0xe0>
c000d501:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d507:	80 fb 08             	cmp    bl,0x8
c000d50a:	75 2c                	jne    c000d538 <VgaText::receiveKey(unsigned char)+0x4e>
c000d50c:	83 ec 0c             	sub    esp,0xc
c000d50f:	57                   	push   edi
c000d510:	e8 10 31 ff ff       	call   c0000625 <strlen>
c000d515:	83 c4 10             	add    esp,0x10
c000d518:	85 c0                	test   eax,eax
c000d51a:	74 41                	je     c000d55d <VgaText::receiveKey(unsigned char)+0x73>
c000d51c:	50                   	push   eax
c000d51d:	50                   	push   eax
c000d51e:	6a 08                	push   0x8
c000d520:	56                   	push   esi
c000d521:	e8 ac fc ff ff       	call   c000d1d2 <VgaText::putchar(char)>
c000d526:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d529:	e8 f7 30 ff ff       	call   c0000625 <strlen>
c000d52e:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d536:	eb 22                	jmp    c000d55a <VgaText::receiveKey(unsigned char)+0x70>
c000d538:	0f be c3             	movsx  eax,bl
c000d53b:	52                   	push   edx
c000d53c:	52                   	push   edx
c000d53d:	50                   	push   eax
c000d53e:	56                   	push   esi
c000d53f:	e8 8e fc ff ff       	call   c000d1d2 <VgaText::putchar(char)>
c000d544:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d548:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d54d:	59                   	pop    ecx
c000d54e:	5d                   	pop    ebp
c000d54f:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d553:	50                   	push   eax
c000d554:	57                   	push   edi
c000d555:	e8 04 32 ff ff       	call   c000075e <strcat>
c000d55a:	83 c4 10             	add    esp,0x10
c000d55d:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d564:	75 05                	jne    c000d56b <VgaText::receiveKey(unsigned char)+0x81>
c000d566:	80 fb 0a             	cmp    bl,0xa
c000d569:	75 53                	jne    c000d5be <VgaText::receiveKey(unsigned char)+0xd4>
c000d56b:	83 ec 0c             	sub    esp,0xc
c000d56e:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d574:	53                   	push   ebx
c000d575:	e8 ab 30 ff ff       	call   c0000625 <strlen>
c000d57a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d57d:	89 c5                	mov    ebp,eax
c000d57f:	e8 a1 30 ff ff       	call   c0000625 <strlen>
c000d584:	83 c4 10             	add    esp,0x10
c000d587:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000d58b:	3d 2c 01 00 00       	cmp    eax,0x12c
c000d590:	76 10                	jbe    c000d5a2 <VgaText::receiveKey(unsigned char)+0xb8>
c000d592:	83 ec 0c             	sub    esp,0xc
c000d595:	68 a7 03 02 c0       	push   0xc00203a7
c000d59a:	e8 d5 75 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c000d59f:	83 c4 10             	add    esp,0x10
c000d5a2:	50                   	push   eax
c000d5a3:	50                   	push   eax
c000d5a4:	57                   	push   edi
c000d5a5:	53                   	push   ebx
c000d5a6:	e8 b3 31 ff ff       	call   c000075e <strcat>
c000d5ab:	83 c4 0c             	add    esp,0xc
c000d5ae:	68 96 00 00 00       	push   0x96
c000d5b3:	6a 00                	push   0x0
c000d5b5:	57                   	push   edi
c000d5b6:	e8 4d 30 ff ff       	call   c0000608 <memset>
c000d5bb:	83 c4 10             	add    esp,0x10
c000d5be:	83 ec 0c             	sub    esp,0xc
c000d5c1:	56                   	push   esi
c000d5c2:	e8 d5 f9 ff ff       	call   c000cf9c <VgaText::doUpdate()>
c000d5c7:	83 c4 10             	add    esp,0x10
c000d5ca:	83 c4 1c             	add    esp,0x1c
c000d5cd:	5b                   	pop    ebx
c000d5ce:	5e                   	pop    esi
c000d5cf:	5f                   	pop    edi
c000d5d0:	5d                   	pop    ebp
c000d5d1:	c3                   	ret    

c000d5d2 <VgaText::write(unsigned long long, void*, int*)>:
c000d5d2:	55                   	push   ebp
c000d5d3:	57                   	push   edi
c000d5d4:	56                   	push   esi
c000d5d5:	53                   	push   ebx
c000d5d6:	83 ec 0c             	sub    esp,0xc
c000d5d9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d5dd:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000d5e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d5e5:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000d5ec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000d5ef:	39 eb                	cmp    ebx,ebp
c000d5f1:	74 13                	je     c000d606 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000d5f3:	43                   	inc    ebx
c000d5f4:	50                   	push   eax
c000d5f5:	50                   	push   eax
c000d5f6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000d5fa:	50                   	push   eax
c000d5fb:	56                   	push   esi
c000d5fc:	e8 d1 fb ff ff       	call   c000d1d2 <VgaText::putchar(char)>
c000d601:	83 c4 10             	add    esp,0x10
c000d604:	eb e9                	jmp    c000d5ef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000d606:	83 ec 0c             	sub    esp,0xc
c000d609:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000d610:	56                   	push   esi
c000d611:	e8 86 f9 ff ff       	call   c000cf9c <VgaText::doUpdate()>
c000d616:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d61a:	89 38                	mov    DWORD PTR [eax],edi
c000d61c:	83 c4 1c             	add    esp,0x1c
c000d61f:	31 c0                	xor    eax,eax
c000d621:	5b                   	pop    ebx
c000d622:	5e                   	pop    esi
c000d623:	5f                   	pop    edi
c000d624:	5d                   	pop    ebp
c000d625:	c3                   	ret    

c000d626 <newTerminal(char*)>:
c000d626:	83 ec 28             	sub    esp,0x28
c000d629:	68 60 12 00 00       	push   0x1260
c000d62e:	e8 bd 17 00 00       	call   c000edf0 <operator new(unsigned long)>
c000d633:	5a                   	pop    edx
c000d634:	59                   	pop    ecx
c000d635:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d639:	50                   	push   eax
c000d63a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d63e:	e8 15 fd ff ff       	call   c000d358 <VgaText::VgaText(char const*)>
c000d643:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d647:	83 c4 2c             	add    esp,0x2c
c000d64a:	c3                   	ret    
c000d64b:	90                   	nop

c000d64c <TSS::TSS()>:
c000d64c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d650:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000d657:	90                   	nop
c000d658:	c3                   	ret    
c000d659:	90                   	nop

c000d65a <TSS::setESP(unsigned long)>:
c000d65a:	55                   	push   ebp
c000d65b:	89 e5                	mov    ebp,esp
c000d65d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d660:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d663:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d666:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d669:	90                   	nop
c000d66a:	5d                   	pop    ebp
c000d66b:	c3                   	ret    

c000d66c <TSS::flush()>:
c000d66c:	55                   	push   ebp
c000d66d:	89 e5                	mov    ebp,esp
c000d66f:	83 ec 10             	sub    esp,0x10
c000d672:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d675:	8b 00                	mov    eax,DWORD PTR [eax]
c000d677:	83 c8 03             	or     eax,0x3
c000d67a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000d67e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000d682:	66 89 d0             	mov    ax,dx
c000d685:	0f 00 d8             	ltr    ax
c000d688:	90                   	nop
c000d689:	c9                   	leave  
c000d68a:	c3                   	ret    
c000d68b:	90                   	nop

c000d68c <TSS::setup(unsigned long, unsigned long)>:
c000d68c:	55                   	push   ebp
c000d68d:	89 e5                	mov    ebp,esp
c000d68f:	53                   	push   ebx
c000d690:	83 ec 14             	sub    esp,0x14
c000d693:	83 ec 0c             	sub    esp,0xc
c000d696:	6a 68                	push   0x68
c000d698:	e8 81 e5 ff ff       	call   c000bc1e <malloc>
c000d69d:	83 c4 10             	add    esp,0x10
c000d6a0:	89 c2                	mov    edx,eax
c000d6a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d6a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6ae:	83 ec 04             	sub    esp,0x4
c000d6b1:	6a 68                	push   0x68
c000d6b3:	6a 00                	push   0x0
c000d6b5:	50                   	push   eax
c000d6b6:	e8 4d 2f ff ff       	call   c0000608 <memset>
c000d6bb:	83 c4 10             	add    esp,0x10
c000d6be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6c4:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000d6ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6d0:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000d6d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6dc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d6df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d6e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6e8:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000d6ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6f4:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000d6fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6fd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d700:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000d706:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d709:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d70c:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000d712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d715:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d718:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000d71b:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000d71e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d721:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d724:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d727:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d72a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d72d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d730:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000d737:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d73a:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000d73d:	e8 63 11 01 00       	call   c001e8a5 <CPU::readCR3()>
c000d742:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000d745:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d748:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d74b:	83 ec 08             	sub    esp,0x8
c000d74e:	50                   	push   eax
c000d74f:	8d 45 f0             	lea    eax,[ebp-0x10]
c000d752:	50                   	push   eax
c000d753:	e8 9c dc ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000d758:	83 c4 10             	add    esp,0x10
c000d75b:	83 ec 08             	sub    esp,0x8
c000d75e:	6a 68                	push   0x68
c000d760:	8d 45 f0             	lea    eax,[ebp-0x10]
c000d763:	50                   	push   eax
c000d764:	e8 a7 dc ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000d769:	83 c4 10             	add    esp,0x10
c000d76c:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000d770:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d773:	83 e0 0f             	and    eax,0xf
c000d776:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d779:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d77c:	83 c8 40             	or     eax,0x40
c000d77f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d782:	e8 e7 66 00 00       	call   c0013e6e <thisCPU()>
c000d787:	05 78 01 00 00       	add    eax,0x178
c000d78c:	83 ec 04             	sub    esp,0x4
c000d78f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000d792:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d795:	50                   	push   eax
c000d796:	e8 a9 dc ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000d79b:	83 c4 10             	add    esp,0x10
c000d79e:	89 c2                	mov    edx,eax
c000d7a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7a3:	89 10                	mov    DWORD PTR [eax],edx
c000d7a5:	e8 c4 66 00 00       	call   c0013e6e <thisCPU()>
c000d7aa:	05 78 01 00 00       	add    eax,0x178
c000d7af:	83 ec 0c             	sub    esp,0xc
c000d7b2:	50                   	push   eax
c000d7b3:	e8 d0 dc ff ff       	call   c000b488 <GDT::flush()>
c000d7b8:	83 c4 10             	add    esp,0x10
c000d7bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7be:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7c0:	83 ec 08             	sub    esp,0x8
c000d7c3:	50                   	push   eax
c000d7c4:	68 10 04 02 c0       	push   0xc0020410
c000d7c9:	e8 11 17 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000d7ce:	83 c4 10             	add    esp,0x10
c000d7d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7d6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d7d9:	c9                   	leave  
c000d7da:	c3                   	ret    
c000d7db:	90                   	nop

c000d7dc <ReservedFilename::isAtty()>:
c000d7dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d7e0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d7e3:	31 c0                	xor    eax,eax
c000d7e5:	81 fa 03 ff ff 7f    	cmp    edx,0x7fffff03
c000d7eb:	74 09                	je     c000d7f6 <ReservedFilename::isAtty()+0x1a>
c000d7ed:	81 fa 01 ff ff 7f    	cmp    edx,0x7fffff01
c000d7f3:	0f 94 c0             	sete   al
c000d7f6:	c3                   	ret    
c000d7f7:	90                   	nop

c000d7f8 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000d7f8:	55                   	push   ebp
c000d7f9:	57                   	push   edi
c000d7fa:	56                   	push   esi
c000d7fb:	53                   	push   ebx
c000d7fc:	83 ec 0c             	sub    esp,0xc
c000d7ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d803:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d807:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d80a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d80e:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000d812:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d816:	3d 03 ff ff 7f       	cmp    eax,0x7fffff03
c000d81b:	75 08                	jne    c000d825 <ReservedFilename::read(unsigned long long, void*, int*)+0x2d>
c000d81d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000d823:	eb 5e                	jmp    c000d883 <ReservedFilename::read(unsigned long long, void*, int*)+0x8b>
c000d825:	3d 01 ff ff 7f       	cmp    eax,0x7fffff01
c000d82a:	75 3d                	jne    c000d869 <ReservedFilename::read(unsigned long long, void*, int*)+0x71>
c000d82c:	83 ec 0c             	sub    esp,0xc
c000d82f:	68 2e 04 02 c0       	push   0xc002042e
c000d834:	e8 a6 16 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000d839:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d83e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d841:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d847:	8b 10                	mov    edx,DWORD PTR [eax]
c000d849:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000d84d:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d851:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d855:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000d859:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d85d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000d860:	83 c4 1c             	add    esp,0x1c
c000d863:	5b                   	pop    ebx
c000d864:	5e                   	pop    esi
c000d865:	5f                   	pop    edi
c000d866:	5d                   	pop    ebp
c000d867:	ff e0                	jmp    eax
c000d869:	89 c2                	mov    edx,eax
c000d86b:	83 e2 fd             	and    edx,0xfffffffd
c000d86e:	81 fa 00 ff ff 7f    	cmp    edx,0x7fffff00
c000d874:	74 a7                	je     c000d81d <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000d876:	2d 10 ff ff 7f       	sub    eax,0x7fffff10
c000d87b:	83 e0 ef             	and    eax,0xffffffef
c000d87e:	83 f8 08             	cmp    eax,0x8
c000d881:	76 9a                	jbe    c000d81d <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000d883:	83 c4 0c             	add    esp,0xc
c000d886:	31 c0                	xor    eax,eax
c000d888:	5b                   	pop    ebx
c000d889:	5e                   	pop    esi
c000d88a:	5f                   	pop    edi
c000d88b:	5d                   	pop    ebp
c000d88c:	c3                   	ret    
c000d88d:	90                   	nop

c000d88e <ReservedFilename::write(unsigned long long, void*, int*)>:
c000d88e:	55                   	push   ebp
c000d88f:	57                   	push   edi
c000d890:	56                   	push   esi
c000d891:	53                   	push   ebx
c000d892:	83 ec 0c             	sub    esp,0xc
c000d895:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d899:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d89d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d8a0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d8a4:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000d8a8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d8ac:	3d 03 ff ff 7f       	cmp    eax,0x7fffff03
c000d8b1:	75 08                	jne    c000d8bb <ReservedFilename::write(unsigned long long, void*, int*)+0x2d>
c000d8b3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000d8b9:	eb 63                	jmp    c000d91e <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000d8bb:	3d 01 ff ff 7f       	cmp    eax,0x7fffff01
c000d8c0:	75 3d                	jne    c000d8ff <ReservedFilename::write(unsigned long long, void*, int*)+0x71>
c000d8c2:	83 ec 0c             	sub    esp,0xc
c000d8c5:	68 3b 04 02 c0       	push   0xc002043b
c000d8ca:	e8 10 16 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000d8cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d8d4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d8d7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d8dd:	8b 10                	mov    edx,DWORD PTR [eax]
c000d8df:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000d8e3:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d8e7:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d8eb:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000d8f6:	83 c4 1c             	add    esp,0x1c
c000d8f9:	5b                   	pop    ebx
c000d8fa:	5e                   	pop    esi
c000d8fb:	5f                   	pop    edi
c000d8fc:	5d                   	pop    ebp
c000d8fd:	ff e0                	jmp    eax
c000d8ff:	3d 00 ff ff 7f       	cmp    eax,0x7fffff00
c000d904:	75 04                	jne    c000d90a <ReservedFilename::write(unsigned long long, void*, int*)+0x7c>
c000d906:	89 33                	mov    DWORD PTR [ebx],esi
c000d908:	eb 14                	jmp    c000d91e <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000d90a:	3d 02 ff ff 7f       	cmp    eax,0x7fffff02
c000d90f:	74 a2                	je     c000d8b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000d911:	2d 10 ff ff 7f       	sub    eax,0x7fffff10
c000d916:	83 e0 ef             	and    eax,0xffffffef
c000d919:	83 f8 08             	cmp    eax,0x8
c000d91c:	76 95                	jbe    c000d8b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000d91e:	83 c4 0c             	add    esp,0xc
c000d921:	31 c0                	xor    eax,eax
c000d923:	5b                   	pop    ebx
c000d924:	5e                   	pop    esi
c000d925:	5f                   	pop    edi
c000d926:	5d                   	pop    ebp
c000d927:	c3                   	ret    

c000d928 <UnixFile::getFileDescriptor()>:
c000d928:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d92c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d92f:	c3                   	ret    

c000d930 <UnixFile::UnixFile(int)>:
c000d930:	83 ec 1c             	sub    esp,0x1c
c000d933:	ba 18 05 02 c0       	mov    edx,0xc0020518
c000d938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d93c:	89 10                	mov    DWORD PTR [eax],edx
c000d93e:	a1 a0 29 02 c0       	mov    eax,ds:0xc00229a0
c000d943:	8d 50 01             	lea    edx,[eax+0x1]
c000d946:	89 15 a0 29 02 c0    	mov    DWORD PTR ds:0xc00229a0,edx
c000d94c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d950:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000d953:	83 ec 08             	sub    esp,0x8
c000d956:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d95a:	68 d0 35 02 c0       	push   0xc00235d0
c000d95f:	e8 b6 0f 01 00       	call   c001e91a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000d964:	83 c4 10             	add    esp,0x10
c000d967:	a0 cc 35 02 c0       	mov    al,ds:0xc00235cc
c000d96c:	83 f0 01             	xor    eax,0x1
c000d96f:	84 c0                	test   al,al
c000d971:	0f 84 dc 00 00 00    	je     c000da53 <UnixFile::UnixFile(int)+0x123>
c000d977:	c6 05 cc 35 02 c0 01 	mov    BYTE PTR ds:0xc00235cc,0x1
c000d97e:	83 ec 0c             	sub    esp,0xc
c000d981:	6a 0c                	push   0xc
c000d983:	e8 68 14 00 00       	call   c000edf0 <operator new(unsigned long)>
c000d988:	83 c4 10             	add    esp,0x10
c000d98b:	83 ec 08             	sub    esp,0x8
c000d98e:	68 03 ff ff 7f       	push   0x7fffff03
c000d993:	50                   	push   eax
c000d994:	e8 bf 00 00 00       	call   c000da58 <ReservedFilename::ReservedFilename(int)>
c000d999:	83 c4 10             	add    esp,0x10
c000d99c:	83 ec 0c             	sub    esp,0xc
c000d99f:	6a 0c                	push   0xc
c000d9a1:	e8 4a 14 00 00       	call   c000edf0 <operator new(unsigned long)>
c000d9a6:	83 c4 10             	add    esp,0x10
c000d9a9:	83 ec 08             	sub    esp,0x8
c000d9ac:	68 01 ff ff 7f       	push   0x7fffff01
c000d9b1:	50                   	push   eax
c000d9b2:	e8 a1 00 00 00       	call   c000da58 <ReservedFilename::ReservedFilename(int)>
c000d9b7:	83 c4 10             	add    esp,0x10
c000d9ba:	83 ec 0c             	sub    esp,0xc
c000d9bd:	6a 0c                	push   0xc
c000d9bf:	e8 2c 14 00 00       	call   c000edf0 <operator new(unsigned long)>
c000d9c4:	83 c4 10             	add    esp,0x10
c000d9c7:	83 ec 08             	sub    esp,0x8
c000d9ca:	68 00 ff ff 7f       	push   0x7fffff00
c000d9cf:	50                   	push   eax
c000d9d0:	e8 83 00 00 00       	call   c000da58 <ReservedFilename::ReservedFilename(int)>
c000d9d5:	83 c4 10             	add    esp,0x10
c000d9d8:	83 ec 0c             	sub    esp,0xc
c000d9db:	6a 0c                	push   0xc
c000d9dd:	e8 0e 14 00 00       	call   c000edf0 <operator new(unsigned long)>
c000d9e2:	83 c4 10             	add    esp,0x10
c000d9e5:	83 ec 08             	sub    esp,0x8
c000d9e8:	68 02 ff ff 7f       	push   0x7fffff02
c000d9ed:	50                   	push   eax
c000d9ee:	e8 65 00 00 00       	call   c000da58 <ReservedFilename::ReservedFilename(int)>
c000d9f3:	83 c4 10             	add    esp,0x10
c000d9f6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000d9fe:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000da03:	7f 4e                	jg     c000da53 <UnixFile::UnixFile(int)+0x123>
c000da05:	83 ec 0c             	sub    esp,0xc
c000da08:	6a 0c                	push   0xc
c000da0a:	e8 e1 13 00 00       	call   c000edf0 <operator new(unsigned long)>
c000da0f:	83 c4 10             	add    esp,0x10
c000da12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000da16:	81 c2 10 ff ff 7f    	add    edx,0x7fffff10
c000da1c:	83 ec 08             	sub    esp,0x8
c000da1f:	52                   	push   edx
c000da20:	50                   	push   eax
c000da21:	e8 32 00 00 00       	call   c000da58 <ReservedFilename::ReservedFilename(int)>
c000da26:	83 c4 10             	add    esp,0x10
c000da29:	83 ec 0c             	sub    esp,0xc
c000da2c:	6a 0c                	push   0xc
c000da2e:	e8 bd 13 00 00       	call   c000edf0 <operator new(unsigned long)>
c000da33:	83 c4 10             	add    esp,0x10
c000da36:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000da3a:	81 c2 20 ff ff 7f    	add    edx,0x7fffff20
c000da40:	83 ec 08             	sub    esp,0x8
c000da43:	52                   	push   edx
c000da44:	50                   	push   eax
c000da45:	e8 0e 00 00 00       	call   c000da58 <ReservedFilename::ReservedFilename(int)>
c000da4a:	83 c4 10             	add    esp,0x10
c000da4d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000da51:	eb ab                	jmp    c000d9fe <UnixFile::UnixFile(int)+0xce>
c000da53:	90                   	nop
c000da54:	83 c4 1c             	add    esp,0x1c
c000da57:	c3                   	ret    

c000da58 <ReservedFilename::ReservedFilename(int)>:
c000da58:	83 ec 0c             	sub    esp,0xc
c000da5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da5f:	83 ec 08             	sub    esp,0x8
c000da62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da66:	50                   	push   eax
c000da67:	e8 c4 fe ff ff       	call   c000d930 <UnixFile::UnixFile(int)>
c000da6c:	83 c4 10             	add    esp,0x10
c000da6f:	ba 34 05 02 c0       	mov    edx,0xc0020534
c000da74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da78:	89 10                	mov    DWORD PTR [eax],edx
c000da7a:	90                   	nop
c000da7b:	83 c4 0c             	add    esp,0xc
c000da7e:	c3                   	ret    
c000da7f:	90                   	nop

c000da80 <UnixFile::~UnixFile()>:
c000da80:	83 ec 1c             	sub    esp,0x1c
c000da83:	ba 18 05 02 c0       	mov    edx,0xc0020518
c000da88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da8c:	89 10                	mov    DWORD PTR [eax],edx
c000da8e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000da96:	83 ec 0c             	sub    esp,0xc
c000da99:	68 d0 35 02 c0       	push   0xc00235d0
c000da9e:	e8 4b 0f 01 00       	call   c001e9ee <LinkedList<UnixFile>::getFirstElement()>
c000daa3:	83 c4 10             	add    esp,0x10
c000daa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000daaa:	83 ec 0c             	sub    esp,0xc
c000daad:	68 d0 35 02 c0       	push   0xc00235d0
c000dab2:	e8 3f 0f 01 00       	call   c001e9f6 <LinkedList<UnixFile>::removeFirst()>
c000dab7:	83 c4 10             	add    esp,0x10
c000daba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dabe:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000dac2:	74 3d                	je     c000db01 <UnixFile::~UnixFile()+0x81>
c000dac4:	83 ec 08             	sub    esp,0x8
c000dac7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dacb:	68 d0 35 02 c0       	push   0xc00235d0
c000dad0:	e8 45 0e 01 00       	call   c001e91a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000dad5:	83 c4 10             	add    esp,0x10
c000dad8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dadc:	8d 50 01             	lea    edx,[eax+0x1]
c000dadf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dae3:	3d 88 13 00 00       	cmp    eax,0x1388
c000dae8:	0f 94 c0             	sete   al
c000daeb:	84 c0                	test   al,al
c000daed:	74 a7                	je     c000da96 <UnixFile::~UnixFile()+0x16>
c000daef:	83 ec 0c             	sub    esp,0xc
c000daf2:	68 f0 04 02 c0       	push   0xc00204f0
c000daf7:	e8 78 70 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c000dafc:	83 c4 10             	add    esp,0x10
c000daff:	eb 95                	jmp    c000da96 <UnixFile::~UnixFile()+0x16>
c000db01:	90                   	nop
c000db02:	83 c4 1c             	add    esp,0x1c
c000db05:	c3                   	ret    

c000db06 <UnixFile::~UnixFile()>:
c000db06:	83 ec 0c             	sub    esp,0xc
c000db09:	83 ec 0c             	sub    esp,0xc
c000db0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db10:	e8 6b ff ff ff       	call   c000da80 <UnixFile::~UnixFile()>
c000db15:	83 c4 10             	add    esp,0x10
c000db18:	83 ec 08             	sub    esp,0x8
c000db1b:	6a 0c                	push   0xc
c000db1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db21:	e8 d9 12 00 00       	call   c000edff <operator delete(void*, unsigned long)>
c000db26:	83 c4 10             	add    esp,0x10
c000db29:	83 c4 0c             	add    esp,0xc
c000db2c:	c3                   	ret    
c000db2d:	90                   	nop

c000db2e <ReservedFilename::~ReservedFilename()>:
c000db2e:	83 ec 0c             	sub    esp,0xc
c000db31:	ba 34 05 02 c0       	mov    edx,0xc0020534
c000db36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db3a:	89 10                	mov    DWORD PTR [eax],edx
c000db3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db40:	83 ec 0c             	sub    esp,0xc
c000db43:	50                   	push   eax
c000db44:	e8 37 ff ff ff       	call   c000da80 <UnixFile::~UnixFile()>
c000db49:	83 c4 10             	add    esp,0x10
c000db4c:	90                   	nop
c000db4d:	83 c4 0c             	add    esp,0xc
c000db50:	c3                   	ret    
c000db51:	90                   	nop

c000db52 <ReservedFilename::~ReservedFilename()>:
c000db52:	83 ec 0c             	sub    esp,0xc
c000db55:	83 ec 0c             	sub    esp,0xc
c000db58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db5c:	e8 cd ff ff ff       	call   c000db2e <ReservedFilename::~ReservedFilename()>
c000db61:	83 c4 10             	add    esp,0x10
c000db64:	83 ec 08             	sub    esp,0x8
c000db67:	6a 0c                	push   0xc
c000db69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db6d:	e8 8d 12 00 00       	call   c000edff <operator delete(void*, unsigned long)>
c000db72:	83 c4 10             	add    esp,0x10
c000db75:	83 c4 0c             	add    esp,0xc
c000db78:	c3                   	ret    

c000db79 <getFromFileDescriptor(int)>:
c000db79:	83 ec 18             	sub    esp,0x18
c000db7c:	68 d0 35 02 c0       	push   0xc00235d0
c000db81:	e8 68 0e 01 00       	call   c001e9ee <LinkedList<UnixFile>::getFirstElement()>
c000db86:	83 c4 10             	add    esp,0x10
c000db89:	85 c0                	test   eax,eax
c000db8b:	74 18                	je     c000dba5 <getFromFileDescriptor(int)+0x2c>
c000db8d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000db91:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
c000db94:	74 0f                	je     c000dba5 <getFromFileDescriptor(int)+0x2c>
c000db96:	52                   	push   edx
c000db97:	52                   	push   edx
c000db98:	50                   	push   eax
c000db99:	68 d0 35 02 c0       	push   0xc00235d0
c000db9e:	e8 f5 0e 01 00       	call   c001ea98 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000dba3:	eb e1                	jmp    c000db86 <getFromFileDescriptor(int)+0xd>
c000dba5:	83 c4 0c             	add    esp,0xc
c000dba8:	c3                   	ret    

c000dba9 <__static_initialization_and_destruction_0(int, int)>:
c000dba9:	83 ec 0c             	sub    esp,0xc
c000dbac:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000dbb1:	75 34                	jne    c000dbe7 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000dbb3:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000dbbb:	75 2a                	jne    c000dbe7 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000dbbd:	83 ec 0c             	sub    esp,0xc
c000dbc0:	68 d0 35 02 c0       	push   0xc00235d0
c000dbc5:	e8 f8 0c 01 00       	call   c001e8c2 <LinkedList<UnixFile>::LinkedList()>
c000dbca:	83 c4 10             	add    esp,0x10
c000dbcd:	83 ec 04             	sub    esp,0x4
c000dbd0:	68 30 29 02 c0       	push   0xc0022930
c000dbd5:	68 d0 35 02 c0       	push   0xc00235d0
c000dbda:	68 c0 e8 01 c0       	push   0xc001e8c0
c000dbdf:	e8 97 11 00 00       	call   c000ed7b <__cxa_atexit>
c000dbe4:	83 c4 10             	add    esp,0x10
c000dbe7:	90                   	nop
c000dbe8:	83 c4 0c             	add    esp,0xc
c000dbeb:	c3                   	ret    

c000dbec <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000dbec:	83 ec 0c             	sub    esp,0xc
c000dbef:	83 ec 08             	sub    esp,0x8
c000dbf2:	68 ff ff 00 00       	push   0xffff
c000dbf7:	6a 01                	push   0x1
c000dbf9:	e8 ab ff ff ff       	call   c000dba9 <__static_initialization_and_destruction_0(int, int)>
c000dbfe:	83 c4 10             	add    esp,0x10
c000dc01:	83 c4 0c             	add    esp,0xc
c000dc04:	c3                   	ret    
c000dc05:	90                   	nop

c000dc06 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000dc06:	53                   	push   ebx
c000dc07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dc0b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000dc0f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000dc15:	89 c8                	mov    eax,ecx
c000dc17:	d1 e8                	shr    eax,1
c000dc19:	03 05 a8 29 02 c0    	add    eax,DWORD PTR ds:0xc00229a8
c000dc1f:	83 e1 01             	and    ecx,0x1
c000dc22:	8a 10                	mov    dl,BYTE PTR [eax]
c000dc24:	75 09                	jne    c000dc2f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000dc26:	83 e2 f0             	and    edx,0xfffffff0
c000dc29:	09 da                	or     edx,ebx
c000dc2b:	88 10                	mov    BYTE PTR [eax],dl
c000dc2d:	5b                   	pop    ebx
c000dc2e:	c3                   	ret    
c000dc2f:	c1 e3 04             	shl    ebx,0x4
c000dc32:	83 e2 0f             	and    edx,0xf
c000dc35:	09 da                	or     edx,ebx
c000dc37:	88 10                	mov    BYTE PTR [eax],dl
c000dc39:	5b                   	pop    ebx
c000dc3a:	c3                   	ret    

c000dc3b <Virt::getPageState(unsigned long)>:
c000dc3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc3f:	8b 0d a8 29 02 c0    	mov    ecx,DWORD PTR ds:0xc00229a8
c000dc45:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000dc4b:	89 d0                	mov    eax,edx
c000dc4d:	d1 e8                	shr    eax,1
c000dc4f:	83 e2 01             	and    edx,0x1
c000dc52:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000dc55:	75 04                	jne    c000dc5b <Virt::getPageState(unsigned long)+0x20>
c000dc57:	83 e0 0f             	and    eax,0xf
c000dc5a:	c3                   	ret    
c000dc5b:	c0 e8 04             	shr    al,0x4
c000dc5e:	c3                   	ret    

c000dc5f <Virt::allocateKernelVirtualPages(int)>:
c000dc5f:	55                   	push   ebp
c000dc60:	31 ed                	xor    ebp,ebp
c000dc62:	57                   	push   edi
c000dc63:	56                   	push   esi
c000dc64:	53                   	push   ebx
c000dc65:	31 db                	xor    ebx,ebx
c000dc67:	83 ec 1c             	sub    esp,0x1c
c000dc6a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dc6e:	8b 3d a4 29 02 c0    	mov    edi,DWORD PTR ds:0xc00229a4
c000dc74:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000dc79:	57                   	push   edi
c000dc7a:	e8 bc ff ff ff       	call   c000dc3b <Virt::getPageState(unsigned long)>
c000dc7f:	5a                   	pop    edx
c000dc80:	84 c0                	test   al,al
c000dc82:	75 3a                	jne    c000dcbe <Virt::allocateKernelVirtualPages(int)+0x5f>
c000dc84:	85 db                	test   ebx,ebx
c000dc86:	75 02                	jne    c000dc8a <Virt::allocateKernelVirtualPages(int)+0x2b>
c000dc88:	89 fd                	mov    ebp,edi
c000dc8a:	43                   	inc    ebx
c000dc8b:	39 f3                	cmp    ebx,esi
c000dc8d:	74 5a                	je     c000dce9 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000dc8f:	47                   	inc    edi
c000dc90:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000dc96:	76 31                	jbe    c000dcc9 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000dc98:	c7 05 a4 29 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00229a4,0xc8000
c000dca2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dca7:	75 28                	jne    c000dcd1 <Virt::allocateKernelVirtualPages(int)+0x72>
c000dca9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000dcae:	bf 00 80 0c 00       	mov    edi,0xc8000
c000dcb3:	57                   	push   edi
c000dcb4:	e8 82 ff ff ff       	call   c000dc3b <Virt::getPageState(unsigned long)>
c000dcb9:	5a                   	pop    edx
c000dcba:	84 c0                	test   al,al
c000dcbc:	74 c6                	je     c000dc84 <Virt::allocateKernelVirtualPages(int)+0x25>
c000dcbe:	31 db                	xor    ebx,ebx
c000dcc0:	47                   	inc    edi
c000dcc1:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000dcc7:	77 cf                	ja     c000dc98 <Virt::allocateKernelVirtualPages(int)+0x39>
c000dcc9:	89 3d a4 29 02 c0    	mov    DWORD PTR ds:0xc00229a4,edi
c000dccf:	eb a8                	jmp    c000dc79 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000dcd1:	83 ec 0c             	sub    esp,0xc
c000dcd4:	68 48 05 02 c0       	push   0xc0020548
c000dcd9:	e8 96 6e 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c000dcde:	8b 3d a4 29 02 c0    	mov    edi,DWORD PTR ds:0xc00229a4
c000dce4:	83 c4 10             	add    esp,0x10
c000dce7:	eb 90                	jmp    c000dc79 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000dce9:	89 2d a4 29 02 c0    	mov    DWORD PTR ds:0xc00229a4,ebp
c000dcef:	4b                   	dec    ebx
c000dcf0:	74 5f                	je     c000dd51 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000dcf2:	85 f6                	test   esi,esi
c000dcf4:	74 3d                	je     c000dd33 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000dcf6:	89 e8                	mov    eax,ebp
c000dcf8:	31 db                	xor    ebx,ebx
c000dcfa:	8d 7e ff             	lea    edi,[esi-0x1]
c000dcfd:	eb 14                	jmp    c000dd13 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000dcff:	6a 01                	push   0x1
c000dd01:	43                   	inc    ebx
c000dd02:	50                   	push   eax
c000dd03:	e8 fe fe ff ff       	call   c000dc06 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dd08:	58                   	pop    eax
c000dd09:	39 f3                	cmp    ebx,esi
c000dd0b:	5a                   	pop    edx
c000dd0c:	74 25                	je     c000dd33 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000dd0e:	a1 a4 29 02 c0       	mov    eax,ds:0xc00229a4
c000dd13:	8d 50 01             	lea    edx,[eax+0x1]
c000dd16:	85 db                	test   ebx,ebx
c000dd18:	89 15 a4 29 02 c0    	mov    DWORD PTR ds:0xc00229a4,edx
c000dd1e:	74 20                	je     c000dd40 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000dd20:	39 df                	cmp    edi,ebx
c000dd22:	75 db                	jne    c000dcff <Virt::allocateKernelVirtualPages(int)+0xa0>
c000dd24:	6a 03                	push   0x3
c000dd26:	43                   	inc    ebx
c000dd27:	50                   	push   eax
c000dd28:	e8 d9 fe ff ff       	call   c000dc06 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dd2d:	59                   	pop    ecx
c000dd2e:	39 f3                	cmp    ebx,esi
c000dd30:	58                   	pop    eax
c000dd31:	75 db                	jne    c000dd0e <Virt::allocateKernelVirtualPages(int)+0xaf>
c000dd33:	83 c4 1c             	add    esp,0x1c
c000dd36:	89 e8                	mov    eax,ebp
c000dd38:	5b                   	pop    ebx
c000dd39:	c1 e0 0c             	shl    eax,0xc
c000dd3c:	5e                   	pop    esi
c000dd3d:	5f                   	pop    edi
c000dd3e:	5d                   	pop    ebp
c000dd3f:	c3                   	ret    
c000dd40:	6a 02                	push   0x2
c000dd42:	bb 01 00 00 00       	mov    ebx,0x1
c000dd47:	50                   	push   eax
c000dd48:	e8 b9 fe ff ff       	call   c000dc06 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dd4d:	58                   	pop    eax
c000dd4e:	5a                   	pop    edx
c000dd4f:	eb bd                	jmp    c000dd0e <Virt::allocateKernelVirtualPages(int)+0xaf>
c000dd51:	6a 04                	push   0x4
c000dd53:	8d 45 01             	lea    eax,[ebp+0x1]
c000dd56:	55                   	push   ebp
c000dd57:	a3 a4 29 02 c0       	mov    ds:0xc00229a4,eax
c000dd5c:	e8 a5 fe ff ff       	call   c000dc06 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dd61:	59                   	pop    ecx
c000dd62:	89 e8                	mov    eax,ebp
c000dd64:	5b                   	pop    ebx
c000dd65:	c1 e0 0c             	shl    eax,0xc
c000dd68:	83 c4 1c             	add    esp,0x1c
c000dd6b:	5b                   	pop    ebx
c000dd6c:	5e                   	pop    esi
c000dd6d:	5f                   	pop    edi
c000dd6e:	5d                   	pop    ebp
c000dd6f:	c3                   	ret    

c000dd70 <Virt::virtualMemorySetup()>:
c000dd70:	53                   	push   ebx
c000dd71:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000dd76:	83 ec 08             	sub    esp,0x8
c000dd79:	6a 0f                	push   0xf
c000dd7b:	53                   	push   ebx
c000dd7c:	43                   	inc    ebx
c000dd7d:	e8 84 fe ff ff       	call   c000dc06 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dd82:	59                   	pop    ecx
c000dd83:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000dd89:	58                   	pop    eax
c000dd8a:	75 ed                	jne    c000dd79 <Virt::virtualMemorySetup()+0x9>
c000dd8c:	83 ec 08             	sub    esp,0x8
c000dd8f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000dd94:	68 00 00 00 c8       	push   0xc8000000
c000dd99:	68 f3 06 02 c0       	push   0xc00206f3
c000dd9e:	e8 3c 11 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000dda3:	58                   	pop    eax
c000dda4:	5a                   	pop    edx
c000dda5:	68 00 f0 ff ef       	push   0xeffff000
c000ddaa:	68 07 07 02 c0       	push   0xc0020707
c000ddaf:	e8 2b 11 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000ddb4:	83 c4 10             	add    esp,0x10
c000ddb7:	83 ec 08             	sub    esp,0x8
c000ddba:	6a 00                	push   0x0
c000ddbc:	53                   	push   ebx
c000ddbd:	43                   	inc    ebx
c000ddbe:	e8 43 fe ff ff       	call   c000dc06 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ddc3:	83 c4 10             	add    esp,0x10
c000ddc6:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000ddcc:	75 e9                	jne    c000ddb7 <Virt::virtualMemorySetup()+0x47>
c000ddce:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000ddd3:	83 ec 08             	sub    esp,0x8
c000ddd6:	6a 0f                	push   0xf
c000ddd8:	53                   	push   ebx
c000ddd9:	43                   	inc    ebx
c000ddda:	e8 27 fe ff ff       	call   c000dc06 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dddf:	83 c4 10             	add    esp,0x10
c000dde2:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000dde8:	75 e9                	jne    c000ddd3 <Virt::virtualMemorySetup()+0x63>
c000ddea:	83 c4 08             	add    esp,0x8
c000dded:	5b                   	pop    ebx
c000ddee:	c3                   	ret    

c000ddef <Virt::getAKernelVAS()>:
c000ddef:	a1 dc 35 02 c0       	mov    eax,ds:0xc00235dc
c000ddf4:	c3                   	ret    

c000ddf5 <Virt::setupPageSwapping(int)>:
c000ddf5:	57                   	push   edi
c000ddf6:	56                   	push   esi
c000ddf7:	53                   	push   ebx
c000ddf8:	83 ec 1c             	sub    esp,0x1c
c000ddfb:	68 14 01 00 00       	push   0x114
c000de00:	e8 eb 0f 00 00       	call   c000edf0 <operator new(unsigned long)>
c000de05:	83 c4 0c             	add    esp,0xc
c000de08:	89 c6                	mov    esi,eax
c000de0a:	ff 35 d4 48 02 c0    	push   DWORD PTR ds:0xc00248d4
c000de10:	68 1b 07 02 c0       	push   0xc002071b
c000de15:	50                   	push   eax
c000de16:	e8 f3 15 00 00       	call   c000f40e <File::File(char const*, Process*)>
c000de1b:	89 34 24             	mov    DWORD PTR [esp],esi
c000de1e:	e8 c7 17 00 00       	call   c000f5ea <File::unlink()>
c000de23:	58                   	pop    eax
c000de24:	5a                   	pop    edx
c000de25:	6a 12                	push   0x12
c000de27:	56                   	push   esi
c000de28:	e8 45 16 00 00       	call   c000f472 <File::open(FileOpenMode)>
c000de2d:	83 c4 10             	add    esp,0x10
c000de30:	85 c0                	test   eax,eax
c000de32:	0f 85 bf 00 00 00    	jne    c000def7 <Virt::setupPageSwapping(int)+0x102>
c000de38:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000de3c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000de44:	c1 e3 08             	shl    ebx,0x8
c000de47:	83 ec 0c             	sub    esp,0xc
c000de4a:	68 00 00 01 00       	push   0x10000
c000de4f:	e8 ca dd ff ff       	call   c000bc1e <malloc>
c000de54:	83 c4 0c             	add    esp,0xc
c000de57:	89 c7                	mov    edi,eax
c000de59:	68 00 00 01 00       	push   0x10000
c000de5e:	6a 00                	push   0x0
c000de60:	50                   	push   eax
c000de61:	e8 a2 27 ff ff       	call   c0000608 <memset>
c000de66:	83 c4 10             	add    esp,0x10
c000de69:	85 db                	test   ebx,ebx
c000de6b:	79 03                	jns    c000de70 <Virt::setupPageSwapping(int)+0x7b>
c000de6d:	83 c3 0f             	add    ebx,0xf
c000de70:	c1 fb 04             	sar    ebx,0x4
c000de73:	4b                   	dec    ebx
c000de74:	83 fb ff             	cmp    ebx,0xffffffff
c000de77:	74 4b                	je     c000dec4 <Virt::setupPageSwapping(int)+0xcf>
c000de79:	83 ec 0c             	sub    esp,0xc
c000de7c:	8b 06                	mov    eax,DWORD PTR [esi]
c000de7e:	8d 54 24 18          	lea    edx,[esp+0x18]
c000de82:	52                   	push   edx
c000de83:	57                   	push   edi
c000de84:	6a 00                	push   0x0
c000de86:	68 00 00 01 00       	push   0x10000
c000de8b:	56                   	push   esi
c000de8c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000de8f:	83 c4 20             	add    esp,0x20
c000de92:	85 c0                	test   eax,eax
c000de94:	75 4e                	jne    c000dee4 <Virt::setupPageSwapping(int)+0xef>
c000de96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de9a:	3d 00 00 01 00       	cmp    eax,0x10000
c000de9f:	74 d2                	je     c000de73 <Virt::setupPageSwapping(int)+0x7e>
c000dea1:	83 ec 08             	sub    esp,0x8
c000dea4:	4b                   	dec    ebx
c000dea5:	50                   	push   eax
c000dea6:	68 6e 07 02 c0       	push   0xc002076e
c000deab:	e8 2f 10 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000deb0:	c7 04 24 77 07 02 c0 	mov    DWORD PTR [esp],0xc0020777
c000deb7:	e8 b8 6c 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c000debc:	83 c4 10             	add    esp,0x10
c000debf:	83 fb ff             	cmp    ebx,0xffffffff
c000dec2:	75 b5                	jne    c000de79 <Virt::setupPageSwapping(int)+0x84>
c000dec4:	83 ec 0c             	sub    esp,0xc
c000dec7:	56                   	push   esi
c000dec8:	e8 03 16 00 00       	call   c000f4d0 <File::close()>
c000decd:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ded0:	e8 69 dd ff ff       	call   c000bc3e <rfree>
c000ded5:	89 34 24             	mov    DWORD PTR [esp],esi
c000ded8:	8b 06                	mov    eax,DWORD PTR [esi]
c000deda:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dedd:	83 c4 20             	add    esp,0x20
c000dee0:	5b                   	pop    ebx
c000dee1:	5e                   	pop    esi
c000dee2:	5f                   	pop    edi
c000dee3:	c3                   	ret    
c000dee4:	83 ec 08             	sub    esp,0x8
c000dee7:	50                   	push   eax
c000dee8:	68 56 07 02 c0       	push   0xc0020756
c000deed:	e8 ed 0f 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000def2:	83 c4 10             	add    esp,0x10
c000def5:	eb 9f                	jmp    c000de96 <Virt::setupPageSwapping(int)+0xa1>
c000def7:	83 ec 08             	sub    esp,0x8
c000defa:	50                   	push   eax
c000defb:	68 32 07 02 c0       	push   0xc0020732
c000df00:	e8 da 0f 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000df05:	c7 04 24 3b 07 02 c0 	mov    DWORD PTR [esp],0xc002073b
c000df0c:	e8 63 6c 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c000df11:	83 c4 10             	add    esp,0x10
c000df14:	e9 1f ff ff ff       	jmp    c000de38 <Virt::setupPageSwapping(int)+0x43>
c000df19:	90                   	nop

c000df1a <VAS::VAS()>:
c000df1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df1e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000df25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df29:	a3 dc 35 02 c0       	mov    ds:0xc00235dc,eax
c000df2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df32:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000df36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df3a:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000df3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df41:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000df48:	90                   	nop
c000df49:	c3                   	ret    

c000df4a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000df4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df4e:	89 c2                	mov    edx,eax
c000df50:	c1 e8 0a             	shr    eax,0xa
c000df53:	c1 ea 16             	shr    edx,0x16
c000df56:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000df5b:	19 c9                	sbb    ecx,ecx
c000df5d:	c1 e2 0c             	shl    edx,0xc
c000df60:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000df66:	25 fc 0f 00 00       	and    eax,0xffc
c000df6b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000df72:	01 d0                	add    eax,edx
c000df74:	c3                   	ret    
c000df75:	90                   	nop

c000df76 <VAS::getPageTableEntry(unsigned long)>:
c000df76:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000df7a:	89 ca                	mov    edx,ecx
c000df7c:	c1 e9 0a             	shr    ecx,0xa
c000df7f:	c1 ea 16             	shr    edx,0x16
c000df82:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000df88:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000df8e:	c1 e0 0c             	shl    eax,0xc
c000df91:	8d 04 08             	lea    eax,[eax+ecx*1]
c000df94:	c3                   	ret    

c000df95 <Virt::freeKernelVirtualPages(unsigned long)>:
c000df95:	57                   	push   edi
c000df96:	56                   	push   esi
c000df97:	be 01 00 00 00       	mov    esi,0x1
c000df9c:	53                   	push   ebx
c000df9d:	83 ec 10             	sub    esp,0x10
c000dfa0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000dfa4:	c1 eb 0c             	shr    ebx,0xc
c000dfa7:	eb 3f                	jmp    c000dfe8 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000dfa9:	e8 41 fe ff ff       	call   c000ddef <Virt::getAKernelVAS()>
c000dfae:	83 ec 08             	sub    esp,0x8
c000dfb1:	57                   	push   edi
c000dfb2:	50                   	push   eax
c000dfb3:	e8 be ff ff ff       	call   c000df76 <VAS::getPageTableEntry(unsigned long)>
c000dfb8:	83 c4 10             	add    esp,0x10
c000dfbb:	8b 00                	mov    eax,DWORD PTR [eax]
c000dfbd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000dfc1:	f6 c4 04             	test   ah,0x4
c000dfc4:	75 5f                	jne    c000e025 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000dfc6:	80 fa 04             	cmp    dl,0x4
c000dfc9:	74 78                	je     c000e043 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000dfcb:	80 fa 02             	cmp    dl,0x2
c000dfce:	0f 84 88 00 00 00    	je     c000e05c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000dfd4:	80 fa 03             	cmp    dl,0x3
c000dfd7:	0f 84 ad 00 00 00    	je     c000e08a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000dfdd:	fe ca                	dec    dl
c000dfdf:	0f 84 92 00 00 00    	je     c000e077 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000dfe5:	43                   	inc    ebx
c000dfe6:	31 f6                	xor    esi,esi
c000dfe8:	53                   	push   ebx
c000dfe9:	e8 4d fc ff ff       	call   c000dc3b <Virt::getPageState(unsigned long)>
c000dfee:	5f                   	pop    edi
c000dfef:	89 df                	mov    edi,ebx
c000dff1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dff5:	c1 e7 0c             	shl    edi,0xc
c000dff8:	84 c0                	test   al,al
c000dffa:	75 ad                	jne    c000dfa9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000dffc:	83 ec 0c             	sub    esp,0xc
c000dfff:	68 7d 07 02 c0       	push   0xc002077d
c000e004:	e8 6b 6b 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c000e009:	e8 e1 fd ff ff       	call   c000ddef <Virt::getAKernelVAS()>
c000e00e:	5a                   	pop    edx
c000e00f:	59                   	pop    ecx
c000e010:	57                   	push   edi
c000e011:	50                   	push   eax
c000e012:	e8 5f ff ff ff       	call   c000df76 <VAS::getPageTableEntry(unsigned long)>
c000e017:	83 c4 10             	add    esp,0x10
c000e01a:	8b 00                	mov    eax,DWORD PTR [eax]
c000e01c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e020:	f6 c4 04             	test   ah,0x4
c000e023:	74 c0                	je     c000dfe5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e025:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e029:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e02e:	83 ec 0c             	sub    esp,0xc
c000e031:	50                   	push   eax
c000e032:	e8 07 e1 ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e037:	83 c4 10             	add    esp,0x10
c000e03a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e03e:	80 fa 04             	cmp    dl,0x4
c000e041:	75 88                	jne    c000dfcb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000e043:	89 f0                	mov    eax,esi
c000e045:	84 c0                	test   al,al
c000e047:	75 47                	jne    c000e090 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000e049:	c7 44 24 20 68 05 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020568
c000e051:	83 c4 10             	add    esp,0x10
c000e054:	5b                   	pop    ebx
c000e055:	5e                   	pop    esi
c000e056:	5f                   	pop    edi
c000e057:	e9 18 6b 00 00       	jmp    c0014b74 <Krnl::panic(char const*)>
c000e05c:	89 f0                	mov    eax,esi
c000e05e:	84 c0                	test   al,al
c000e060:	75 15                	jne    c000e077 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e062:	83 ec 0c             	sub    esp,0xc
c000e065:	68 99 07 02 c0       	push   0xc0020799
c000e06a:	e8 05 6b 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c000e06f:	83 c4 10             	add    esp,0x10
c000e072:	e9 6e ff ff ff       	jmp    c000dfe5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e077:	83 ec 08             	sub    esp,0x8
c000e07a:	6a 00                	push   0x0
c000e07c:	53                   	push   ebx
c000e07d:	e8 84 fb ff ff       	call   c000dc06 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e082:	83 c4 10             	add    esp,0x10
c000e085:	e9 5b ff ff ff       	jmp    c000dfe5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e08a:	89 f0                	mov    eax,esi
c000e08c:	84 c0                	test   al,al
c000e08e:	75 15                	jne    c000e0a5 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000e090:	83 ec 08             	sub    esp,0x8
c000e093:	6a 00                	push   0x0
c000e095:	53                   	push   ebx
c000e096:	e8 6b fb ff ff       	call   c000dc06 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e09b:	83 c4 10             	add    esp,0x10
c000e09e:	83 c4 10             	add    esp,0x10
c000e0a1:	5b                   	pop    ebx
c000e0a2:	5e                   	pop    esi
c000e0a3:	5f                   	pop    edi
c000e0a4:	c3                   	ret    
c000e0a5:	c7 44 24 20 b5 07 02 c0 	mov    DWORD PTR [esp+0x20],0xc00207b5
c000e0ad:	83 c4 10             	add    esp,0x10
c000e0b0:	5b                   	pop    ebx
c000e0b1:	5e                   	pop    esi
c000e0b2:	5f                   	pop    edi
c000e0b3:	e9 bc 6a 00 00       	jmp    c0014b74 <Krnl::panic(char const*)>

c000e0b8 <VAS::freeAllocatedPages(unsigned long)>:
c000e0b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e0c0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e0c4:	74 09                	je     c000e0cf <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e0c6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e0ca:	e9 c6 fe ff ff       	jmp    c000df95 <Virt::freeKernelVirtualPages(unsigned long)>
c000e0cf:	c7 44 24 04 8c 05 02 c0 	mov    DWORD PTR [esp+0x4],0xc002058c
c000e0d7:	e9 03 0e 00 00       	jmp    c000eedf <Dbg::kprintf(char const*, ...)>

c000e0dc <VAS::virtualToPhysical(unsigned long)>:
c000e0dc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e0e0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e0e4:	e8 8d fe ff ff       	call   c000df76 <VAS::getPageTableEntry(unsigned long)>
c000e0e9:	5a                   	pop    edx
c000e0ea:	8b 00                	mov    eax,DWORD PTR [eax]
c000e0ec:	59                   	pop    ecx
c000e0ed:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e0f2:	c3                   	ret    
c000e0f3:	90                   	nop

c000e0f4 <VAS::mapOtherVASIn(bool, VAS*)>:
c000e0f4:	83 ec 0c             	sub    esp,0xc
c000e0f7:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e0fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e100:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e107:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e10a:	19 c0                	sbb    eax,eax
c000e10c:	83 ca 03             	or     edx,0x3
c000e10f:	83 e0 fc             	and    eax,0xfffffffc
c000e112:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e119:	e8 87 07 01 00       	call   c001e8a5 <CPU::readCR3()>
c000e11e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e122:	83 c4 0c             	add    esp,0xc
c000e125:	e9 8d 07 01 00       	jmp    c001e8b7 <CPU::writeCR3(unsigned long)>

c000e12a <VAS::~VAS()>:
c000e12a:	83 ec 2c             	sub    esp,0x2c
c000e12d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e135:	e8 fa 98 00 00       	call   c0017a34 <lockScheduler()>
c000e13a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e13f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e141:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e144:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e14a:	83 ec 04             	sub    esp,0x4
c000e14d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e151:	6a 01                	push   0x1
c000e153:	50                   	push   eax
c000e154:	e8 9b ff ff ff       	call   c000e0f4 <VAS::mapOtherVASIn(bool, VAS*)>
c000e159:	83 c4 10             	add    esp,0x10
c000e15c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e164:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e16c:	0f 8f d7 00 00 00    	jg     c000e249 <VAS::~VAS()+0x11f>
c000e172:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e176:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e179:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e17d:	c1 e2 02             	shl    edx,0x2
c000e180:	01 d0                	add    eax,edx
c000e182:	8b 00                	mov    eax,DWORD PTR [eax]
c000e184:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e18c:	83 e0 01             	and    eax,0x1
c000e18f:	0f 84 ab 00 00 00    	je     c000e240 <VAS::~VAS()+0x116>
c000e195:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e19d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e1a5:	7f 75                	jg     c000e21c <VAS::~VAS()+0xf2>
c000e1a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e1ab:	c1 e0 0a             	shl    eax,0xa
c000e1ae:	89 c2                	mov    edx,eax
c000e1b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e1b4:	01 d0                	add    eax,edx
c000e1b6:	c1 e0 0c             	shl    eax,0xc
c000e1b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e1bd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e1c2:	8b 00                	mov    eax,DWORD PTR [eax]
c000e1c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e1c7:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e1cd:	83 ec 04             	sub    esp,0x4
c000e1d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e1d4:	6a 01                	push   0x1
c000e1d6:	50                   	push   eax
c000e1d7:	e8 6e fd ff ff       	call   c000df4a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e1dc:	83 c4 10             	add    esp,0x10
c000e1df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e1e7:	8b 00                	mov    eax,DWORD PTR [eax]
c000e1e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e1ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1f1:	25 01 04 00 00       	and    eax,0x401
c000e1f6:	3d 01 04 00 00       	cmp    eax,0x401
c000e1fb:	75 19                	jne    c000e216 <VAS::~VAS()+0xec>
c000e1fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e201:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e206:	83 ec 0c             	sub    esp,0xc
c000e209:	50                   	push   eax
c000e20a:	e8 2f df ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e20f:	83 c4 10             	add    esp,0x10
c000e212:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e216:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e21a:	eb 81                	jmp    c000e19d <VAS::~VAS()+0x73>
c000e21c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e220:	25 00 04 00 00       	and    eax,0x400
c000e225:	74 19                	je     c000e240 <VAS::~VAS()+0x116>
c000e227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e22b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e230:	83 ec 0c             	sub    esp,0xc
c000e233:	50                   	push   eax
c000e234:	e8 05 df ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e239:	83 c4 10             	add    esp,0x10
c000e23c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e240:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e244:	e9 1b ff ff ff       	jmp    c000e164 <VAS::~VAS()+0x3a>
c000e249:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e24d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e250:	83 ec 0c             	sub    esp,0xc
c000e253:	50                   	push   eax
c000e254:	e8 3c fd ff ff       	call   c000df95 <Virt::freeKernelVirtualPages(unsigned long)>
c000e259:	83 c4 10             	add    esp,0x10
c000e25c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e260:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e263:	83 ec 0c             	sub    esp,0xc
c000e266:	50                   	push   eax
c000e267:	e8 d2 de ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e26c:	83 c4 10             	add    esp,0x10
c000e26f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e273:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e277:	c1 e0 02             	shl    eax,0x2
c000e27a:	83 ec 08             	sub    esp,0x8
c000e27d:	50                   	push   eax
c000e27e:	68 b0 05 02 c0       	push   0xc00205b0
c000e283:	e8 57 0c 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000e288:	83 c4 10             	add    esp,0x10
c000e28b:	e8 a6 97 00 00       	call   c0017a36 <unlockScheduler()>
c000e290:	90                   	nop
c000e291:	83 c4 2c             	add    esp,0x2c
c000e294:	c3                   	ret    
c000e295:	90                   	nop

c000e296 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e296:	55                   	push   ebp
c000e297:	57                   	push   edi
c000e298:	56                   	push   esi
c000e299:	53                   	push   ebx
c000e29a:	83 ec 1c             	sub    esp,0x1c
c000e29d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e2a1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e2a5:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e2ab:	77 08                	ja     c000e2b5 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e2ad:	0f 20 d8             	mov    eax,cr3
c000e2b0:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e2b3:	75 47                	jne    c000e2fc <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000e2b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e2b9:	09 d8                	or     eax,ebx
c000e2bb:	a9 ff 0f 00 00       	test   eax,0xfff
c000e2c0:	75 57                	jne    c000e319 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000e2c2:	89 de                	mov    esi,ebx
c000e2c4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e2c7:	c1 ee 16             	shr    esi,0x16
c000e2ca:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e2d1:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e2d5:	74 54                	je     c000e32b <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000e2d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e2db:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e2e1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e2e5:	c1 e6 0c             	shl    esi,0xc
c000e2e8:	c1 eb 0a             	shr    ebx,0xa
c000e2eb:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e2f1:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e2f4:	83 c4 1c             	add    esp,0x1c
c000e2f7:	5b                   	pop    ebx
c000e2f8:	5e                   	pop    esi
c000e2f9:	5f                   	pop    edi
c000e2fa:	5d                   	pop    ebp
c000e2fb:	c3                   	ret    
c000e2fc:	83 ec 0c             	sub    esp,0xc
c000e2ff:	68 d0 05 02 c0       	push   0xc00205d0
c000e304:	e8 d6 0b 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000e309:	83 c4 10             	add    esp,0x10
c000e30c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e310:	09 d8                	or     eax,ebx
c000e312:	a9 ff 0f 00 00       	test   eax,0xfff
c000e317:	74 a9                	je     c000e2c2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e319:	83 ec 0c             	sub    esp,0xc
c000e31c:	68 38 06 02 c0       	push   0xc0020638
c000e321:	e8 4e 68 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c000e326:	83 c4 10             	add    esp,0x10
c000e329:	eb 97                	jmp    c000e2c2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e32b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e32f:	e8 94 de ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e334:	89 c5                	mov    ebp,eax
c000e336:	e8 b4 fa ff ff       	call   c000ddef <Virt::getAKernelVAS()>
c000e33b:	83 ec 0c             	sub    esp,0xc
c000e33e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e342:	6a 01                	push   0x1
c000e344:	e8 16 f9 ff ff       	call   c000dc5f <Virt::allocateKernelVirtualPages(int)>
c000e349:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e350:	6a 01                	push   0x1
c000e352:	50                   	push   eax
c000e353:	55                   	push   ebp
c000e354:	81 cd 07 04 00 00    	or     ebp,0x407
c000e35a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e35e:	51                   	push   ecx
c000e35f:	e8 1e 02 00 00       	call   c000e582 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e364:	83 c4 1c             	add    esp,0x1c
c000e367:	68 00 10 00 00       	push   0x1000
c000e36c:	6a 00                	push   0x0
c000e36e:	50                   	push   eax
c000e36f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e373:	e8 90 22 ff ff       	call   c0000608 <memset>
c000e378:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e37c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e37f:	e8 11 fc ff ff       	call   c000df95 <Virt::freeKernelVirtualPages(unsigned long)>
c000e384:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e388:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e38b:	83 c4 10             	add    esp,0x10
c000e38e:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e391:	e9 41 ff ff ff       	jmp    c000e2d7 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e396 <VAS::allocatePages(int, int)>:
c000e396:	55                   	push   ebp
c000e397:	57                   	push   edi
c000e398:	56                   	push   esi
c000e399:	53                   	push   ebx
c000e39a:	83 ec 1c             	sub    esp,0x1c
c000e39d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e3a1:	e8 c8 5a 00 00       	call   c0013e6e <thisCPU()>
c000e3a6:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e3ac:	83 e0 01             	and    eax,0x1
c000e3af:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e3b3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e3b7:	0f 85 d7 00 00 00    	jne    c000e494 <VAS::allocatePages(int, int)+0xfe>
c000e3bd:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e3c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e3c4:	85 c0                	test   eax,eax
c000e3c6:	0f 84 ac 00 00 00    	je     c000e478 <VAS::allocatePages(int, int)+0xe2>
c000e3cc:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e3d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e3d4:	c1 e6 0c             	shl    esi,0xc
c000e3d7:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000e3db:	85 c0                	test   eax,eax
c000e3dd:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000e3e0:	7e 33                	jle    c000e415 <VAS::allocatePages(int, int)+0x7f>
c000e3e2:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e3e6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e3ea:	81 cd 00 04 00 00    	or     ebp,0x400
c000e3f0:	e8 d3 dd ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e3f5:	55                   	push   ebp
c000e3f6:	53                   	push   ebx
c000e3f7:	50                   	push   eax
c000e3f8:	57                   	push   edi
c000e3f9:	e8 98 fe ff ff       	call   c000e296 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e3fe:	83 c4 10             	add    esp,0x10
c000e401:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e406:	74 03                	je     c000e40b <VAS::allocatePages(int, int)+0x75>
c000e408:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e40b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e411:	39 de                	cmp    esi,ebx
c000e413:	75 db                	jne    c000e3f0 <VAS::allocatePages(int, int)+0x5a>
c000e415:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e41a:	74 3f                	je     c000e45b <VAS::allocatePages(int, int)+0xc5>
c000e41c:	c1 ee 0a             	shr    esi,0xa
c000e41f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e423:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000e429:	c1 eb 0a             	shr    ebx,0xa
c000e42c:	81 ee 00 00 40 00    	sub    esi,0x400000
c000e432:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e438:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e43e:	39 f3                	cmp    ebx,esi
c000e440:	77 0d                	ja     c000e44f <VAS::allocatePages(int, int)+0xb9>
c000e442:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e445:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e44b:	39 de                	cmp    esi,ebx
c000e44d:	73 f3                	jae    c000e442 <VAS::allocatePages(int, int)+0xac>
c000e44f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e453:	83 c4 1c             	add    esp,0x1c
c000e456:	5b                   	pop    ebx
c000e457:	5e                   	pop    esi
c000e458:	5f                   	pop    edi
c000e459:	5d                   	pop    ebp
c000e45a:	c3                   	ret    
c000e45b:	e8 45 04 01 00       	call   c001e8a5 <CPU::readCR3()>
c000e460:	83 ec 0c             	sub    esp,0xc
c000e463:	50                   	push   eax
c000e464:	e8 4e 04 01 00       	call   c001e8b7 <CPU::writeCR3(unsigned long)>
c000e469:	83 c4 10             	add    esp,0x10
c000e46c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e470:	83 c4 1c             	add    esp,0x1c
c000e473:	5b                   	pop    ebx
c000e474:	5e                   	pop    esi
c000e475:	5f                   	pop    edi
c000e476:	5d                   	pop    ebp
c000e477:	c3                   	ret    
c000e478:	83 ec 0c             	sub    esp,0xc
c000e47b:	68 5c 06 02 c0       	push   0xc002065c
c000e480:	e8 ef 66 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c000e485:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e488:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e48c:	83 c4 10             	add    esp,0x10
c000e48f:	e9 38 ff ff ff       	jmp    c000e3cc <VAS::allocatePages(int, int)+0x36>
c000e494:	83 ec 0c             	sub    esp,0xc
c000e497:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e49b:	e8 bf f7 ff ff       	call   c000dc5f <Virt::allocateKernelVirtualPages(int)>
c000e4a0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e4a4:	83 c4 10             	add    esp,0x10
c000e4a7:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000e4ac:	0f 87 94 00 00 00    	ja     c000e546 <VAS::allocatePages(int, int)+0x1b0>
c000e4b2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e4b6:	85 d2                	test   edx,edx
c000e4b8:	7e 3c                	jle    c000e4f6 <VAS::allocatePages(int, int)+0x160>
c000e4ba:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e4be:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e4c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e4c6:	c1 e5 0c             	shl    ebp,0xc
c000e4c9:	81 ce 00 04 00 00    	or     esi,0x400
c000e4cf:	01 dd                	add    ebp,ebx
c000e4d1:	e8 f2 dc ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e4d6:	56                   	push   esi
c000e4d7:	53                   	push   ebx
c000e4d8:	50                   	push   eax
c000e4d9:	57                   	push   edi
c000e4da:	e8 b7 fd ff ff       	call   c000e296 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e4df:	83 c4 10             	add    esp,0x10
c000e4e2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e4e7:	74 03                	je     c000e4ec <VAS::allocatePages(int, int)+0x156>
c000e4e9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e4ec:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e4f2:	39 dd                	cmp    ebp,ebx
c000e4f4:	75 db                	jne    c000e4d1 <VAS::allocatePages(int, int)+0x13b>
c000e4f6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e4fb:	0f 84 5a ff ff ff    	je     c000e45b <VAS::allocatePages(int, int)+0xc5>
c000e501:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e505:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e509:	89 d3                	mov    ebx,edx
c000e50b:	c1 e0 0c             	shl    eax,0xc
c000e50e:	c1 eb 0a             	shr    ebx,0xa
c000e511:	01 d0                	add    eax,edx
c000e513:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e519:	c1 e8 0a             	shr    eax,0xa
c000e51c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e522:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e527:	2d 00 00 40 00       	sub    eax,0x400000
c000e52c:	39 c3                	cmp    ebx,eax
c000e52e:	0f 87 1b ff ff ff    	ja     c000e44f <VAS::allocatePages(int, int)+0xb9>
c000e534:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e537:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e53d:	39 d8                	cmp    eax,ebx
c000e53f:	73 f3                	jae    c000e534 <VAS::allocatePages(int, int)+0x19e>
c000e541:	e9 09 ff ff ff       	jmp    c000e44f <VAS::allocatePages(int, int)+0xb9>
c000e546:	e8 23 59 00 00       	call   c0013e6e <thisCPU()>
c000e54b:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000e552:	0f 84 5a ff ff ff    	je     c000e4b2 <VAS::allocatePages(int, int)+0x11c>
c000e558:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000e560:	e9 4d ff ff ff       	jmp    c000e4b2 <VAS::allocatePages(int, int)+0x11c>
c000e565:	90                   	nop

c000e566 <VAS::setCPUSpecific(unsigned long)>:
c000e566:	83 ec 0c             	sub    esp,0xc
c000e569:	6a 05                	push   0x5
c000e56b:	68 00 00 40 c2       	push   0xc2400000
c000e570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e578:	e8 19 fd ff ff       	call   c000e296 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e57d:	83 c4 1c             	add    esp,0x1c
c000e580:	c3                   	ret    
c000e581:	90                   	nop

c000e582 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000e582:	55                   	push   ebp
c000e583:	57                   	push   edi
c000e584:	56                   	push   esi
c000e585:	53                   	push   ebx
c000e586:	83 ec 1c             	sub    esp,0x1c
c000e589:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e58d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e591:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000e595:	e8 d4 58 00 00       	call   c0013e6e <thisCPU()>
c000e59a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e5a0:	83 e0 01             	and    eax,0x1
c000e5a3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e5a7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e5ab:	85 c0                	test   eax,eax
c000e5ad:	7e 39                	jle    c000e5e8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000e5af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e5b3:	89 f3                	mov    ebx,esi
c000e5b5:	c1 e0 0c             	shl    eax,0xc
c000e5b8:	01 f0                	add    eax,esi
c000e5ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5be:	55                   	push   ebp
c000e5bf:	53                   	push   ebx
c000e5c0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e5c4:	29 f0                	sub    eax,esi
c000e5c6:	01 d8                	add    eax,ebx
c000e5c8:	50                   	push   eax
c000e5c9:	57                   	push   edi
c000e5ca:	e8 c7 fc ff ff       	call   c000e296 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e5cf:	83 c4 10             	add    esp,0x10
c000e5d2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e5d7:	74 03                	je     c000e5dc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000e5d9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e5dc:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e5e2:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000e5e6:	75 d6                	jne    c000e5be <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000e5e8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e5ed:	74 42                	je     c000e631 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000e5ef:	89 f3                	mov    ebx,esi
c000e5f1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e5f5:	c1 eb 0a             	shr    ebx,0xa
c000e5f8:	c1 e0 0c             	shl    eax,0xc
c000e5fb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e601:	01 f0                	add    eax,esi
c000e603:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e609:	c1 e8 0a             	shr    eax,0xa
c000e60c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e611:	2d 00 00 40 00       	sub    eax,0x400000
c000e616:	39 c3                	cmp    ebx,eax
c000e618:	77 0d                	ja     c000e627 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000e61a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e61d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e623:	39 d8                	cmp    eax,ebx
c000e625:	73 f3                	jae    c000e61a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000e627:	83 c4 1c             	add    esp,0x1c
c000e62a:	89 f0                	mov    eax,esi
c000e62c:	5b                   	pop    ebx
c000e62d:	5e                   	pop    esi
c000e62e:	5f                   	pop    edi
c000e62f:	5d                   	pop    ebp
c000e630:	c3                   	ret    
c000e631:	e8 6f 02 01 00       	call   c001e8a5 <CPU::readCR3()>
c000e636:	83 ec 0c             	sub    esp,0xc
c000e639:	50                   	push   eax
c000e63a:	e8 78 02 01 00       	call   c001e8b7 <CPU::writeCR3(unsigned long)>
c000e63f:	89 f0                	mov    eax,esi
c000e641:	83 c4 10             	add    esp,0x10
c000e644:	83 c4 1c             	add    esp,0x1c
c000e647:	5b                   	pop    ebx
c000e648:	5e                   	pop    esi
c000e649:	5f                   	pop    edi
c000e64a:	5d                   	pop    ebp
c000e64b:	c3                   	ret    

c000e64c <VAS::VAS(VAS*)>:
c000e64c:	53                   	push   ebx
c000e64d:	83 ec 38             	sub    esp,0x38
c000e650:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e654:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e65b:	e8 fb 93 00 00       	call   c0017a5b <lockStuff()>
c000e660:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e664:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e667:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e66b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e66e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e672:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c000e675:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e679:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000e67c:	e8 47 db ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e681:	89 c2                	mov    edx,eax
c000e683:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e687:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e68a:	e8 60 f7 ff ff       	call   c000ddef <Virt::getAKernelVAS()>
c000e68f:	89 c3                	mov    ebx,eax
c000e691:	83 ec 0c             	sub    esp,0xc
c000e694:	6a 01                	push   0x1
c000e696:	e8 c4 f5 ff ff       	call   c000dc5f <Virt::allocateKernelVirtualPages(int)>
c000e69b:	83 c4 10             	add    esp,0x10
c000e69e:	89 c2                	mov    edx,eax
c000e6a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e6a4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e6a7:	83 ec 0c             	sub    esp,0xc
c000e6aa:	6a 03                	push   0x3
c000e6ac:	6a 01                	push   0x1
c000e6ae:	52                   	push   edx
c000e6af:	50                   	push   eax
c000e6b0:	53                   	push   ebx
c000e6b1:	e8 cc fe ff ff       	call   c000e582 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e6b6:	83 c4 20             	add    esp,0x20
c000e6b9:	89 c2                	mov    edx,eax
c000e6bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e6bf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e6c2:	83 ec 04             	sub    esp,0x4
c000e6c5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e6c9:	6a 01                	push   0x1
c000e6cb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e6cf:	e8 20 fa ff ff       	call   c000e0f4 <VAS::mapOtherVASIn(bool, VAS*)>
c000e6d4:	83 c4 10             	add    esp,0x10
c000e6d7:	83 ec 0c             	sub    esp,0xc
c000e6da:	6a 01                	push   0x1
c000e6dc:	e8 7e f5 ff ff       	call   c000dc5f <Virt::allocateKernelVirtualPages(int)>
c000e6e1:	83 c4 10             	add    esp,0x10
c000e6e4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e6e8:	83 ec 0c             	sub    esp,0xc
c000e6eb:	6a 01                	push   0x1
c000e6ed:	e8 6d f5 ff ff       	call   c000dc5f <Virt::allocateKernelVirtualPages(int)>
c000e6f2:	83 c4 10             	add    esp,0x10
c000e6f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e6f9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e701:	81 7c 24 2c ff 03 00 00 	cmp    DWORD PTR [esp+0x2c],0x3ff
c000e709:	0f 8f 5e 02 00 00    	jg     c000e96d <VAS::VAS(VAS*)+0x321>
c000e70f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e714:	8b 00                	mov    eax,DWORD PTR [eax]
c000e716:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e719:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e71f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e722:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e726:	c1 e2 02             	shl    edx,0x2
c000e729:	01 d0                	add    eax,edx
c000e72b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e72d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e731:	83 ec 08             	sub    esp,0x8
c000e734:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e738:	68 cf 07 02 c0       	push   0xc00207cf
c000e73d:	e8 9d 07 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000e742:	83 c4 10             	add    esp,0x10
c000e745:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e749:	25 01 04 00 00       	and    eax,0x401
c000e74e:	3d 01 04 00 00       	cmp    eax,0x401
c000e753:	0f 85 e5 01 00 00    	jne    c000e93e <VAS::VAS(VAS*)+0x2f2>
c000e759:	83 ec 0c             	sub    esp,0xc
c000e75c:	68 e0 07 02 c0       	push   0xc00207e0
c000e761:	e8 79 07 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000e766:	83 c4 10             	add    esp,0x10
c000e769:	e8 5a da ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e76e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e772:	83 ec 08             	sub    esp,0x8
c000e775:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e779:	68 f6 07 02 c0       	push   0xc00207f6
c000e77e:	e8 5c 07 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000e783:	83 c4 10             	add    esp,0x10
c000e786:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e78a:	25 ff 0f 00 00       	and    eax,0xfff
c000e78f:	89 c1                	mov    ecx,eax
c000e791:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e795:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e798:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e79c:	c1 e2 02             	shl    edx,0x2
c000e79f:	01 c2                	add    edx,eax
c000e7a1:	89 c8                	mov    eax,ecx
c000e7a3:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c000e7a7:	89 02                	mov    DWORD PTR [edx],eax
c000e7a9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000e7b1:	81 7c 24 28 ff 03 00 00 	cmp    DWORD PTR [esp+0x28],0x3ff
c000e7b9:	0f 8f a5 01 00 00    	jg     c000e964 <VAS::VAS(VAS*)+0x318>
c000e7bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7c3:	c1 e0 0a             	shl    eax,0xa
c000e7c6:	89 c2                	mov    edx,eax
c000e7c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e7cc:	01 d0                	add    eax,edx
c000e7ce:	c1 e0 0c             	shl    eax,0xc
c000e7d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e7d5:	83 ec 08             	sub    esp,0x8
c000e7d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7dc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e7e0:	e8 91 f7 ff ff       	call   c000df76 <VAS::getPageTableEntry(unsigned long)>
c000e7e5:	83 c4 10             	add    esp,0x10
c000e7e8:	8b 00                	mov    eax,DWORD PTR [eax]
c000e7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e7ee:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e7f3:	8b 00                	mov    eax,DWORD PTR [eax]
c000e7f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e7f8:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e7fe:	83 ec 04             	sub    esp,0x4
c000e801:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e805:	6a 01                	push   0x1
c000e807:	50                   	push   eax
c000e808:	e8 3d f7 ff ff       	call   c000df4a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e80d:	83 c4 10             	add    esp,0x10
c000e810:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e814:	83 ec 04             	sub    esp,0x4
c000e817:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e81b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e81f:	68 88 06 02 c0       	push   0xc0020688
c000e824:	e8 b6 06 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000e829:	83 c4 10             	add    esp,0x10
c000e82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e830:	25 01 04 00 00       	and    eax,0x401
c000e835:	3d 01 04 00 00       	cmp    eax,0x401
c000e83a:	0f 85 db 00 00 00    	jne    c000e91b <VAS::VAS(VAS*)+0x2cf>
c000e840:	83 ec 0c             	sub    esp,0xc
c000e843:	68 05 08 02 c0       	push   0xc0020805
c000e848:	e8 92 06 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000e84d:	83 c4 10             	add    esp,0x10
c000e850:	e8 73 d9 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e855:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e859:	83 ec 08             	sub    esp,0x8
c000e85c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e860:	68 14 08 02 c0       	push   0xc0020814
c000e865:	e8 75 06 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000e86a:	83 c4 10             	add    esp,0x10
c000e86d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e871:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e876:	83 ec 08             	sub    esp,0x8
c000e879:	50                   	push   eax
c000e87a:	68 28 08 02 c0       	push   0xc0020828
c000e87f:	e8 5b 06 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000e884:	83 c4 10             	add    esp,0x10
c000e887:	e8 63 f5 ff ff       	call   c000ddef <Virt::getAKernelVAS()>
c000e88c:	83 ec 0c             	sub    esp,0xc
c000e88f:	6a 03                	push   0x3
c000e891:	6a 01                	push   0x1
c000e893:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e897:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e89b:	50                   	push   eax
c000e89c:	e8 e1 fc ff ff       	call   c000e582 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e8a1:	83 c4 20             	add    esp,0x20
c000e8a4:	e8 46 f5 ff ff       	call   c000ddef <Virt::getAKernelVAS()>
c000e8a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e8ad:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e8b3:	83 ec 0c             	sub    esp,0xc
c000e8b6:	6a 03                	push   0x3
c000e8b8:	6a 01                	push   0x1
c000e8ba:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000e8be:	52                   	push   edx
c000e8bf:	50                   	push   eax
c000e8c0:	e8 bd fc ff ff       	call   c000e582 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e8c5:	83 c4 20             	add    esp,0x20
c000e8c8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e8cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8d0:	83 ec 04             	sub    esp,0x4
c000e8d3:	68 00 10 00 00       	push   0x1000
c000e8d8:	52                   	push   edx
c000e8d9:	50                   	push   eax
c000e8da:	e8 f3 1c ff ff       	call   c00005d2 <memcpy>
c000e8df:	83 c4 10             	add    esp,0x10
c000e8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e6:	25 ff 0f 00 00       	and    eax,0xfff
c000e8eb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e8ef:	89 c2                	mov    edx,eax
c000e8f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8f5:	89 10                	mov    DWORD PTR [eax],edx
c000e8f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8fb:	25 ff 0f 00 00       	and    eax,0xfff
c000e900:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e904:	83 ec 04             	sub    esp,0x4
c000e907:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e90b:	50                   	push   eax
c000e90c:	68 ac 06 02 c0       	push   0xc00206ac
c000e911:	e8 c9 05 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000e916:	83 c4 10             	add    esp,0x10
c000e919:	eb 1a                	jmp    c000e935 <VAS::VAS(VAS*)+0x2e9>
c000e91b:	83 ec 0c             	sub    esp,0xc
c000e91e:	68 3c 08 02 c0       	push   0xc002083c
c000e923:	e8 b7 05 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000e928:	83 c4 10             	add    esp,0x10
c000e92b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e92f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e933:	89 10                	mov    DWORD PTR [eax],edx
c000e935:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000e939:	e9 73 fe ff ff       	jmp    c000e7b1 <VAS::VAS(VAS*)+0x165>
c000e93e:	83 ec 0c             	sub    esp,0xc
c000e941:	68 40 08 02 c0       	push   0xc0020840
c000e946:	e8 94 05 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000e94b:	83 c4 10             	add    esp,0x10
c000e94e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e952:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e955:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e959:	c1 e2 02             	shl    edx,0x2
c000e95c:	01 c2                	add    edx,eax
c000e95e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e962:	89 02                	mov    DWORD PTR [edx],eax
c000e964:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e968:	e9 94 fd ff ff       	jmp    c000e701 <VAS::VAS(VAS*)+0xb5>
c000e96d:	83 ec 0c             	sub    esp,0xc
c000e970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e974:	e8 1c f6 ff ff       	call   c000df95 <Virt::freeKernelVirtualPages(unsigned long)>
c000e979:	83 c4 10             	add    esp,0x10
c000e97c:	83 ec 0c             	sub    esp,0xc
c000e97f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e983:	e8 0d f6 ff ff       	call   c000df95 <Virt::freeKernelVirtualPages(unsigned long)>
c000e988:	83 c4 10             	add    esp,0x10
c000e98b:	e8 5d 94 00 00       	call   c0017ded <unlockStuff()>
c000e990:	90                   	nop
c000e991:	83 c4 38             	add    esp,0x38
c000e994:	5b                   	pop    ebx
c000e995:	c3                   	ret    

c000e996 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000e996:	55                   	push   ebp
c000e997:	57                   	push   edi
c000e998:	56                   	push   esi
c000e999:	53                   	push   ebx
c000e99a:	83 ec 1c             	sub    esp,0x1c
c000e99d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e9a1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e9a5:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000e9a9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e9ad:	a9 ff 0f 00 00       	test   eax,0xfff
c000e9b2:	75 4a                	jne    c000e9fe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000e9b4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e9b8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9bb:	c1 eb 16             	shr    ebx,0x16
c000e9be:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000e9c5:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000e9c9:	74 4d                	je     c000ea18 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000e9cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e9cf:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000e9d3:	c1 e8 0a             	shr    eax,0xa
c000e9d6:	80 fa 01             	cmp    dl,0x1
c000e9d9:	19 d2                	sbb    edx,edx
c000e9db:	c1 e3 0c             	shl    ebx,0xc
c000e9de:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000e9e2:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000e9e8:	25 fc 0f 00 00       	and    eax,0xffc
c000e9ed:	01 d8                	add    eax,ebx
c000e9ef:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000e9f6:	83 c4 1c             	add    esp,0x1c
c000e9f9:	5b                   	pop    ebx
c000e9fa:	5e                   	pop    esi
c000e9fb:	5f                   	pop    edi
c000e9fc:	5d                   	pop    ebp
c000e9fd:	c3                   	ret    
c000e9fe:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ea02:	83 ec 0c             	sub    esp,0xc
c000ea05:	68 d0 06 02 c0       	push   0xc00206d0
c000ea0a:	e8 65 61 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c000ea0f:	83 c4 10             	add    esp,0x10
c000ea12:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ea16:	eb 9c                	jmp    c000e9b4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000ea18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ea1c:	e8 a7 d7 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000ea21:	89 c5                	mov    ebp,eax
c000ea23:	e8 c7 f3 ff ff       	call   c000ddef <Virt::getAKernelVAS()>
c000ea28:	83 ec 0c             	sub    esp,0xc
c000ea2b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ea2f:	6a 01                	push   0x1
c000ea31:	e8 29 f2 ff ff       	call   c000dc5f <Virt::allocateKernelVirtualPages(int)>
c000ea36:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ea3d:	6a 01                	push   0x1
c000ea3f:	50                   	push   eax
c000ea40:	55                   	push   ebp
c000ea41:	81 cd 07 04 00 00    	or     ebp,0x407
c000ea47:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ea4b:	51                   	push   ecx
c000ea4c:	e8 31 fb ff ff       	call   c000e582 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ea51:	83 c4 1c             	add    esp,0x1c
c000ea54:	68 00 10 00 00       	push   0x1000
c000ea59:	6a 00                	push   0x0
c000ea5b:	50                   	push   eax
c000ea5c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ea60:	e8 a3 1b ff ff       	call   c0000608 <memset>
c000ea65:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ea69:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ea6c:	e8 24 f5 ff ff       	call   c000df95 <Virt::freeKernelVirtualPages(unsigned long)>
c000ea71:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ea74:	83 c4 10             	add    esp,0x10
c000ea77:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000ea7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea7e:	e9 48 ff ff ff       	jmp    c000e9cb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c000ea83:	90                   	nop

c000ea84 <VAS::VAS(bool)>:
c000ea84:	53                   	push   ebx
c000ea85:	83 ec 28             	sub    esp,0x28
c000ea88:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea8c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ea90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea94:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ea9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea9f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000eaa3:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000eaa6:	e8 1d d7 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000eaab:	89 c2                	mov    edx,eax
c000eaad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eab1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000eab4:	e8 36 f3 ff ff       	call   c000ddef <Virt::getAKernelVAS()>
c000eab9:	89 c3                	mov    ebx,eax
c000eabb:	83 ec 0c             	sub    esp,0xc
c000eabe:	6a 01                	push   0x1
c000eac0:	e8 9a f1 ff ff       	call   c000dc5f <Virt::allocateKernelVirtualPages(int)>
c000eac5:	83 c4 10             	add    esp,0x10
c000eac8:	89 c2                	mov    edx,eax
c000eaca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eace:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ead1:	83 ec 0c             	sub    esp,0xc
c000ead4:	6a 03                	push   0x3
c000ead6:	6a 01                	push   0x1
c000ead8:	52                   	push   edx
c000ead9:	50                   	push   eax
c000eada:	53                   	push   ebx
c000eadb:	e8 a2 fa ff ff       	call   c000e582 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eae0:	83 c4 20             	add    esp,0x20
c000eae3:	89 c2                	mov    edx,eax
c000eae5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eae9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000eaec:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000eaf4:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000eafc:	7f 1c                	jg     c000eb1a <VAS::VAS(bool)+0x96>
c000eafe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb02:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000eb05:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eb09:	c1 e2 02             	shl    edx,0x2
c000eb0c:	01 d0                	add    eax,edx
c000eb0e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000eb14:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000eb18:	eb da                	jmp    c000eaf4 <VAS::VAS(bool)+0x70>
c000eb1a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000eb22:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000eb2a:	7f 71                	jg     c000eb9d <VAS::VAS(bool)+0x119>
c000eb2c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb30:	2d 00 02 00 00       	sub    eax,0x200
c000eb35:	c1 e0 0c             	shl    eax,0xc
c000eb38:	83 c8 03             	or     eax,0x3
c000eb3b:	89 c3                	mov    ebx,eax
c000eb3d:	e8 2c 53 00 00       	call   c0013e6e <thisCPU()>
c000eb42:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000eb48:	83 e0 10             	and    eax,0x10
c000eb4b:	84 c0                	test   al,al
c000eb4d:	74 07                	je     c000eb56 <VAS::VAS(bool)+0xd2>
c000eb4f:	b8 00 01 00 00       	mov    eax,0x100
c000eb54:	eb 05                	jmp    c000eb5b <VAS::VAS(bool)+0xd7>
c000eb56:	b8 00 00 00 00       	mov    eax,0x0
c000eb5b:	09 d8                	or     eax,ebx
c000eb5d:	89 c1                	mov    ecx,eax
c000eb5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb63:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000eb66:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eb6a:	c1 e2 02             	shl    edx,0x2
c000eb6d:	01 d0                	add    eax,edx
c000eb6f:	89 ca                	mov    edx,ecx
c000eb71:	89 10                	mov    DWORD PTR [eax],edx
c000eb73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb77:	2d 40 03 00 00       	sub    eax,0x340
c000eb7c:	83 f8 7f             	cmp    eax,0x7f
c000eb7f:	77 16                	ja     c000eb97 <VAS::VAS(bool)+0x113>
c000eb81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb85:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000eb88:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eb8c:	c1 e2 02             	shl    edx,0x2
c000eb8f:	01 d0                	add    eax,edx
c000eb91:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000eb97:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000eb9b:	eb 85                	jmp    c000eb22 <VAS::VAS(bool)+0x9e>
c000eb9d:	e8 cc 52 00 00       	call   c0013e6e <thisCPU()>
c000eba2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000eba8:	83 e0 10             	and    eax,0x10
c000ebab:	84 c0                	test   al,al
c000ebad:	74 07                	je     c000ebb6 <VAS::VAS(bool)+0x132>
c000ebaf:	b8 03 41 00 00       	mov    eax,0x4103
c000ebb4:	eb 05                	jmp    c000ebbb <VAS::VAS(bool)+0x137>
c000ebb6:	b8 03 40 00 00       	mov    eax,0x4003
c000ebbb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ebbf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000ebc2:	81 c2 20 0c 00 00    	add    edx,0xc20
c000ebc8:	89 02                	mov    DWORD PTR [edx],eax
c000ebca:	e8 9f 52 00 00       	call   c0013e6e <thisCPU()>
c000ebcf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ebd5:	83 ec 08             	sub    esp,0x8
c000ebd8:	50                   	push   eax
c000ebd9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ebdd:	e8 84 f9 ff ff       	call   c000e566 <VAS::setCPUSpecific(unsigned long)>
c000ebe2:	83 c4 10             	add    esp,0x10
c000ebe5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebe9:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ebec:	e8 7d 52 00 00       	call   c0013e6e <thisCPU()>
c000ebf1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ebf7:	83 e0 10             	and    eax,0x10
c000ebfa:	84 c0                	test   al,al
c000ebfc:	74 07                	je     c000ec05 <VAS::VAS(bool)+0x181>
c000ebfe:	b8 00 01 00 00       	mov    eax,0x100
c000ec03:	eb 05                	jmp    c000ec0a <VAS::VAS(bool)+0x186>
c000ec05:	b8 00 00 00 00       	mov    eax,0x0
c000ec0a:	09 d8                	or     eax,ebx
c000ec0c:	89 c2                	mov    edx,eax
c000ec0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec12:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ec15:	05 fc 0f 00 00       	add    eax,0xffc
c000ec1a:	83 ca 03             	or     edx,0x3
c000ec1d:	89 10                	mov    DWORD PTR [eax],edx
c000ec1f:	e8 4a 52 00 00       	call   c0013e6e <thisCPU()>
c000ec24:	83 ec 0c             	sub    esp,0xc
c000ec27:	50                   	push   eax
c000ec28:	e8 9f 19 00 00       	call   c00105cc <Device::getName()>
c000ec2d:	83 c4 10             	add    esp,0x10
c000ec30:	83 ec 08             	sub    esp,0x8
c000ec33:	68 50 08 02 c0       	push   0xc0020850
c000ec38:	50                   	push   eax
c000ec39:	e8 ba 1a ff ff       	call   c00006f8 <strcmp>
c000ec3e:	83 c4 10             	add    esp,0x10
c000ec41:	85 c0                	test   eax,eax
c000ec43:	0f 94 c0             	sete   al
c000ec46:	84 c0                	test   al,al
c000ec48:	74 64                	je     c000ecae <VAS::VAS(bool)+0x22a>
c000ec4a:	e8 c8 8d 00 00       	call   c0017a17 <disableIRQs()>
c000ec4f:	e8 1a 52 00 00       	call   c0013e6e <thisCPU()>
c000ec54:	05 7c 09 00 00       	add    eax,0x97c
c000ec59:	83 ec 0c             	sub    esp,0xc
c000ec5c:	50                   	push   eax
c000ec5d:	e8 2e ca ff ff       	call   c000b690 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ec62:	83 c4 10             	add    esp,0x10
c000ec65:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ec6a:	89 c3                	mov    ebx,eax
c000ec6c:	e8 fd 51 00 00       	call   c0013e6e <thisCPU()>
c000ec71:	05 7c 09 00 00       	add    eax,0x97c
c000ec76:	83 ec 0c             	sub    esp,0xc
c000ec79:	50                   	push   eax
c000ec7a:	e8 11 ca ff ff       	call   c000b690 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ec7f:	83 c4 10             	add    esp,0x10
c000ec82:	83 ec 08             	sub    esp,0x8
c000ec85:	50                   	push   eax
c000ec86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ec8a:	e8 e7 f2 ff ff       	call   c000df76 <VAS::getPageTableEntry(unsigned long)>
c000ec8f:	83 c4 10             	add    esp,0x10
c000ec92:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec94:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ec99:	6a 11                	push   0x11
c000ec9b:	53                   	push   ebx
c000ec9c:	50                   	push   eax
c000ec9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eca1:	e8 f0 f5 ff ff       	call   c000e296 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eca6:	83 c4 10             	add    esp,0x10
c000eca9:	e8 77 8d 00 00       	call   c0017a25 <enableIRQs()>
c000ecae:	90                   	nop
c000ecaf:	83 c4 28             	add    esp,0x28
c000ecb2:	5b                   	pop    ebx
c000ecb3:	c3                   	ret    

c000ecb4 <mapVASFirstTime>:
c000ecb4:	55                   	push   ebp
c000ecb5:	57                   	push   edi
c000ecb6:	56                   	push   esi
c000ecb7:	53                   	push   ebx
c000ecb8:	83 ec 0c             	sub    esp,0xc
c000ecbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ecc0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ecc3:	4a                   	dec    edx
c000ecc4:	0f 84 99 00 00 00    	je     c000ed63 <mapVASFirstTime+0xaf>
c000ecca:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000eccd:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000ecd0:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ecd5:	c1 e5 15             	shl    ebp,0x15
c000ecd8:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000ecdd:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000ece3:	29 eb                	sub    ebx,ebp
c000ece5:	29 ee                	sub    esi,ebp
c000ece7:	e8 dc d4 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000ecec:	83 ec 0c             	sub    esp,0xc
c000ecef:	68 03 04 00 00       	push   0x403
c000ecf4:	6a 01                	push   0x1
c000ecf6:	53                   	push   ebx
c000ecf7:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ecfd:	50                   	push   eax
c000ecfe:	57                   	push   edi
c000ecff:	e8 7e f8 ff ff       	call   c000e582 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ed04:	83 c4 20             	add    esp,0x20
c000ed07:	39 f3                	cmp    ebx,esi
c000ed09:	75 dc                	jne    c000ece7 <mapVASFirstTime+0x33>
c000ed0b:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000ed10:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000ed15:	29 ee                	sub    esi,ebp
c000ed17:	29 e8                	sub    eax,ebp
c000ed19:	89 c5                	mov    ebp,eax
c000ed1b:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000ed1f:	19 db                	sbb    ebx,ebx
c000ed21:	e8 a2 d4 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000ed26:	83 e3 04             	and    ebx,0x4
c000ed29:	83 ec 0c             	sub    esp,0xc
c000ed2c:	81 c3 03 04 00 00    	add    ebx,0x403
c000ed32:	53                   	push   ebx
c000ed33:	6a 01                	push   0x1
c000ed35:	56                   	push   esi
c000ed36:	81 ee 00 10 00 00    	sub    esi,0x1000
c000ed3c:	50                   	push   eax
c000ed3d:	57                   	push   edi
c000ed3e:	e8 3f f8 ff ff       	call   c000e582 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ed43:	83 c4 20             	add    esp,0x20
c000ed46:	39 f5                	cmp    ebp,esi
c000ed48:	75 d1                	jne    c000ed1b <mapVASFirstTime+0x67>
c000ed4a:	e8 56 fb 00 00       	call   c001e8a5 <CPU::readCR3()>
c000ed4f:	83 ec 0c             	sub    esp,0xc
c000ed52:	50                   	push   eax
c000ed53:	e8 5f fb 00 00       	call   c001e8b7 <CPU::writeCR3(unsigned long)>
c000ed58:	83 c4 10             	add    esp,0x10
c000ed5b:	83 c4 0c             	add    esp,0xc
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	5f                   	pop    edi
c000ed61:	5d                   	pop    ebp
c000ed62:	c3                   	ret    
c000ed63:	83 ec 0c             	sub    esp,0xc
c000ed66:	68 5e 08 02 c0       	push   0xc002085e
c000ed6b:	e8 6f 01 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000ed70:	83 c4 10             	add    esp,0x10
c000ed73:	83 c4 0c             	add    esp,0xc
c000ed76:	5b                   	pop    ebx
c000ed77:	5e                   	pop    esi
c000ed78:	5f                   	pop    edi
c000ed79:	5d                   	pop    ebp
c000ed7a:	c3                   	ret    

c000ed7b <__cxa_atexit>:
c000ed7b:	31 c0                	xor    eax,eax
c000ed7d:	c3                   	ret    

c000ed7e <__cxa_finalize>:
c000ed7e:	c3                   	ret    

c000ed7f <__stack_chk_fail>:
c000ed7f:	55                   	push   ebp
c000ed80:	89 e5                	mov    ebp,esp
c000ed82:	83 ec 10             	sub    esp,0x10
c000ed85:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ed88:	68 77 08 02 c0       	push   0xc0020877
c000ed8d:	e8 4d 01 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000ed92:	58                   	pop    eax
c000ed93:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ed96:	5a                   	pop    edx
c000ed97:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ed9a:	68 77 08 02 c0       	push   0xc0020877
c000ed9f:	e8 3b 01 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000eda4:	59                   	pop    ecx
c000eda5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eda8:	5a                   	pop    edx
c000eda9:	8b 00                	mov    eax,DWORD PTR [eax]
c000edab:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000edae:	68 77 08 02 c0       	push   0xc0020877
c000edb3:	e8 27 01 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000edb8:	59                   	pop    ecx
c000edb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000edbc:	5a                   	pop    edx
c000edbd:	8b 00                	mov    eax,DWORD PTR [eax]
c000edbf:	8b 00                	mov    eax,DWORD PTR [eax]
c000edc1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000edc4:	68 77 08 02 c0       	push   0xc0020877
c000edc9:	e8 11 01 00 00       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c000edce:	c7 04 24 7f 08 02 c0 	mov    DWORD PTR [esp],0xc002087f
c000edd5:	e8 9a 5d 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c000edda:	83 c4 10             	add    esp,0x10
c000eddd:	c9                   	leave  
c000edde:	c3                   	ret    

c000eddf <__cxa_pure_virtual>:
c000eddf:	83 ec 18             	sub    esp,0x18
c000ede2:	68 97 08 02 c0       	push   0xc0020897
c000ede7:	e8 88 5d 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c000edec:	83 c4 1c             	add    esp,0x1c
c000edef:	c3                   	ret    

c000edf0 <operator new(unsigned long)>:
c000edf0:	e9 29 ce ff ff       	jmp    c000bc1e <malloc>

c000edf5 <operator new[](unsigned long)>:
c000edf5:	e9 24 ce ff ff       	jmp    c000bc1e <malloc>

c000edfa <operator delete(void*)>:
c000edfa:	e9 3f ce ff ff       	jmp    c000bc3e <rfree>

c000edff <operator delete(void*, unsigned long)>:
c000edff:	e9 3a ce ff ff       	jmp    c000bc3e <rfree>

c000ee04 <operator delete[](void*)>:
c000ee04:	e9 35 ce ff ff       	jmp    c000bc3e <rfree>

c000ee09 <operator delete[](void*, unsigned long)>:
c000ee09:	e9 30 ce ff ff       	jmp    c000bc3e <rfree>

c000ee0e <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000ee0e:	57                   	push   edi
c000ee0f:	b9 3f 00 00 00       	mov    ecx,0x3f
c000ee14:	56                   	push   esi
c000ee15:	be ac 08 02 c0       	mov    esi,0xc00208ac
c000ee1a:	53                   	push   ebx
c000ee1b:	83 ec 40             	sub    esp,0x40
c000ee1e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000ee22:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000ee26:	fc                   	cld    
c000ee27:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ee29:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000ee2d:	83 f9 3e             	cmp    ecx,0x3e
c000ee30:	7e 05                	jle    c000ee37 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c000ee32:	b9 3e 00 00 00       	mov    ecx,0x3e
c000ee37:	89 df                	mov    edi,ebx
c000ee39:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000ee3d:	eb 02                	jmp    c000ee41 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c000ee3f:	89 c7                	mov    edi,eax
c000ee41:	31 d2                	xor    edx,edx
c000ee43:	46                   	inc    esi
c000ee44:	89 f8                	mov    eax,edi
c000ee46:	f7 f1                	div    ecx
c000ee48:	39 cf                	cmp    edi,ecx
c000ee4a:	73 f3                	jae    c000ee3f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c000ee4c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ee4f:	eb 02                	jmp    c000ee53 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c000ee51:	89 c3                	mov    ebx,eax
c000ee53:	31 d2                	xor    edx,edx
c000ee55:	4e                   	dec    esi
c000ee56:	89 d8                	mov    eax,ebx
c000ee58:	f7 f1                	div    ecx
c000ee5a:	39 cb                	cmp    ebx,ecx
c000ee5c:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000ee60:	88 16                	mov    BYTE PTR [esi],dl
c000ee62:	73 ed                	jae    c000ee51 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c000ee64:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ee68:	83 c4 40             	add    esp,0x40
c000ee6b:	5b                   	pop    ebx
c000ee6c:	5e                   	pop    esi
c000ee6d:	5f                   	pop    edi
c000ee6e:	c3                   	ret    

c000ee6f <Dbg::logc(char)>:
c000ee6f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee73:	ba fd 03 00 00       	mov    edx,0x3fd
c000ee78:	ec                   	in     al,dx
c000ee79:	a8 20                	test   al,0x20
c000ee7b:	74 fb                	je     c000ee78 <Dbg::logc(char)+0x9>
c000ee7d:	ba f8 03 00 00       	mov    edx,0x3f8
c000ee82:	88 c8                	mov    al,cl
c000ee84:	ee                   	out    dx,al
c000ee85:	c3                   	ret    

c000ee86 <Dbg::logs(char*)>:
c000ee86:	53                   	push   ebx
c000ee87:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ee8b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ee8e:	84 c0                	test   al,al
c000ee90:	74 0f                	je     c000eea1 <Dbg::logs(char*)+0x1b>
c000ee92:	50                   	push   eax
c000ee93:	43                   	inc    ebx
c000ee94:	e8 d6 ff ff ff       	call   c000ee6f <Dbg::logc(char)>
c000ee99:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ee9c:	5a                   	pop    edx
c000ee9d:	84 c0                	test   al,al
c000ee9f:	75 f1                	jne    c000ee92 <Dbg::logs(char*)+0xc>
c000eea1:	5b                   	pop    ebx
c000eea2:	c3                   	ret    

c000eea3 <Dbg::logWriteInt(unsigned int)>:
c000eea3:	83 ec 10             	sub    esp,0x10
c000eea6:	6a 0a                	push   0xa
c000eea8:	8d 44 24 08          	lea    eax,[esp+0x8]
c000eeac:	50                   	push   eax
c000eead:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eeb1:	e8 58 ff ff ff       	call   c000ee0e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000eeb6:	50                   	push   eax
c000eeb7:	e8 ca ff ff ff       	call   c000ee86 <Dbg::logs(char*)>
c000eebc:	83 c4 20             	add    esp,0x20
c000eebf:	c3                   	ret    

c000eec0 <Dbg::logWriteIntBase(unsigned int, int)>:
c000eec0:	83 ec 10             	sub    esp,0x10
c000eec3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eec7:	8d 44 24 08          	lea    eax,[esp+0x8]
c000eecb:	50                   	push   eax
c000eecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eed0:	e8 39 ff ff ff       	call   c000ee0e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000eed5:	50                   	push   eax
c000eed6:	e8 ab ff ff ff       	call   c000ee86 <Dbg::logs(char*)>
c000eedb:	83 c4 20             	add    esp,0x20
c000eede:	c3                   	ret    

c000eedf <Dbg::kprintf(char const*, ...)>:
c000eedf:	55                   	push   ebp
c000eee0:	57                   	push   edi
c000eee1:	56                   	push   esi
c000eee2:	53                   	push   ebx
c000eee3:	83 ec 0c             	sub    esp,0xc
c000eee6:	8d 44 24 24          	lea    eax,[esp+0x24]
c000eeea:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000eeee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000eef2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000eef5:	84 c0                	test   al,al
c000eef7:	74 4a                	je     c000ef43 <Dbg::kprintf(char const*, ...)+0x64>
c000eef9:	31 db                	xor    ebx,ebx
c000eefb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000eefe:	3c 25                	cmp    al,0x25
c000ef00:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000ef03:	0f 85 e4 00 00 00    	jne    c000efed <Dbg::kprintf(char const*, ...)+0x10e>
c000ef09:	83 c3 02             	add    ebx,0x2
c000ef0c:	8a 07                	mov    al,BYTE PTR [edi]
c000ef0e:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000ef11:	83 e8 25             	sub    eax,0x25
c000ef14:	3c 53                	cmp    al,0x53
c000ef16:	0f 87 ba 00 00 00    	ja     c000efd6 <Dbg::kprintf(char const*, ...)+0xf7>
c000ef1c:	0f b6 c0             	movzx  eax,al
c000ef1f:	ff 24 85 ec 08 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf714]
c000ef26:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef2a:	89 c8                	mov    eax,ecx
c000ef2c:	83 c1 04             	add    ecx,0x4
c000ef2f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ef33:	ff 30                	push   DWORD PTR [eax]
c000ef35:	e8 4c ff ff ff       	call   c000ee86 <Dbg::logs(char*)>
c000ef3a:	58                   	pop    eax
c000ef3b:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000ef3f:	84 c0                	test   al,al
c000ef41:	75 b8                	jne    c000eefb <Dbg::kprintf(char const*, ...)+0x1c>
c000ef43:	83 c4 0c             	add    esp,0xc
c000ef46:	5b                   	pop    ebx
c000ef47:	5e                   	pop    esi
c000ef48:	5f                   	pop    edi
c000ef49:	5d                   	pop    ebp
c000ef4a:	c3                   	ret    
c000ef4b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef4f:	89 d0                	mov    eax,edx
c000ef51:	83 c2 04             	add    edx,0x4
c000ef54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ef58:	ff 30                	push   DWORD PTR [eax]
c000ef5a:	e8 44 ff ff ff       	call   c000eea3 <Dbg::logWriteInt(unsigned int)>
c000ef5f:	58                   	pop    eax
c000ef60:	eb d9                	jmp    c000ef3b <Dbg::kprintf(char const*, ...)+0x5c>
c000ef62:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef66:	89 d0                	mov    eax,edx
c000ef68:	83 c2 04             	add    edx,0x4
c000ef6b:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000ef6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ef72:	50                   	push   eax
c000ef73:	e8 f7 fe ff ff       	call   c000ee6f <Dbg::logc(char)>
c000ef78:	58                   	pop    eax
c000ef79:	eb c0                	jmp    c000ef3b <Dbg::kprintf(char const*, ...)+0x5c>
c000ef7b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef7f:	89 c8                	mov    eax,ecx
c000ef81:	83 c1 04             	add    ecx,0x4
c000ef84:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ef88:	ff 30                	push   DWORD PTR [eax]
c000ef8a:	e8 14 ff ff ff       	call   c000eea3 <Dbg::logWriteInt(unsigned int)>
c000ef8f:	5f                   	pop    edi
c000ef90:	eb a9                	jmp    c000ef3b <Dbg::kprintf(char const*, ...)+0x5c>
c000ef92:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef96:	89 c8                	mov    eax,ecx
c000ef98:	83 c1 04             	add    ecx,0x4
c000ef9b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ef9f:	6a 10                	push   0x10
c000efa1:	ff 30                	push   DWORD PTR [eax]
c000efa3:	e8 18 ff ff ff       	call   c000eec0 <Dbg::logWriteIntBase(unsigned int, int)>
c000efa8:	59                   	pop    ecx
c000efa9:	5f                   	pop    edi
c000efaa:	eb 8f                	jmp    c000ef3b <Dbg::kprintf(char const*, ...)+0x5c>
c000efac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000efb0:	89 d0                	mov    eax,edx
c000efb2:	83 c2 08             	add    edx,0x8
c000efb5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000efb9:	6a 10                	push   0x10
c000efbb:	ff 30                	push   DWORD PTR [eax]
c000efbd:	e8 fe fe ff ff       	call   c000eec0 <Dbg::logWriteIntBase(unsigned int, int)>
c000efc2:	58                   	pop    eax
c000efc3:	5a                   	pop    edx
c000efc4:	e9 72 ff ff ff       	jmp    c000ef3b <Dbg::kprintf(char const*, ...)+0x5c>
c000efc9:	6a 25                	push   0x25
c000efcb:	e8 9f fe ff ff       	call   c000ee6f <Dbg::logc(char)>
c000efd0:	58                   	pop    eax
c000efd1:	e9 65 ff ff ff       	jmp    c000ef3b <Dbg::kprintf(char const*, ...)+0x5c>
c000efd6:	6a 25                	push   0x25
c000efd8:	e8 92 fe ff ff       	call   c000ee6f <Dbg::logc(char)>
c000efdd:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000efe0:	50                   	push   eax
c000efe1:	e8 89 fe ff ff       	call   c000ee6f <Dbg::logc(char)>
c000efe6:	5a                   	pop    edx
c000efe7:	59                   	pop    ecx
c000efe8:	e9 4e ff ff ff       	jmp    c000ef3b <Dbg::kprintf(char const*, ...)+0x5c>
c000efed:	50                   	push   eax
c000efee:	89 eb                	mov    ebx,ebp
c000eff0:	e8 7a fe ff ff       	call   c000ee6f <Dbg::logc(char)>
c000eff5:	89 fd                	mov    ebp,edi
c000eff7:	58                   	pop    eax
c000eff8:	e9 3e ff ff ff       	jmp    c000ef3b <Dbg::kprintf(char const*, ...)+0x5c>
c000effd:	90                   	nop

c000effe <File::read(unsigned long long, void*, int*)>:
c000effe:	53                   	push   ebx
c000efff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f003:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f007:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f00e:	3c 19                	cmp    al,0x19
c000f010:	77 35                	ja     c000f047 <File::read(unsigned long long, void*, int*)+0x49>
c000f012:	8b 04 85 80 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc580]
c000f019:	85 c0                	test   eax,eax
c000f01b:	74 2a                	je     c000f047 <File::read(unsigned long long, void*, int*)+0x49>
c000f01d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f023:	85 c0                	test   eax,eax
c000f025:	74 20                	je     c000f047 <File::read(unsigned long long, void*, int*)+0x49>
c000f027:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f02b:	74 21                	je     c000f04e <File::read(unsigned long long, void*, int*)+0x50>
c000f02d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f02f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f033:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f039:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f03d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f041:	5b                   	pop    ebx
c000f042:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f045:	ff e0                	jmp    eax
c000f047:	b8 0b 00 00 00       	mov    eax,0xb
c000f04c:	eb 05                	jmp    c000f053 <File::read(unsigned long long, void*, int*)+0x55>
c000f04e:	b8 05 00 00 00       	mov    eax,0x5
c000f053:	5b                   	pop    ebx
c000f054:	c3                   	ret    
c000f055:	90                   	nop

c000f056 <File::write(unsigned long long, void*, int*)>:
c000f056:	53                   	push   ebx
c000f057:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f05b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f05f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f066:	3c 19                	cmp    al,0x19
c000f068:	77 35                	ja     c000f09f <File::write(unsigned long long, void*, int*)+0x49>
c000f06a:	8b 04 85 80 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc580]
c000f071:	85 c0                	test   eax,eax
c000f073:	74 2a                	je     c000f09f <File::write(unsigned long long, void*, int*)+0x49>
c000f075:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f07b:	85 c0                	test   eax,eax
c000f07d:	74 20                	je     c000f09f <File::write(unsigned long long, void*, int*)+0x49>
c000f07f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f083:	74 21                	je     c000f0a6 <File::write(unsigned long long, void*, int*)+0x50>
c000f085:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f087:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f08b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f091:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f095:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f099:	5b                   	pop    ebx
c000f09a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f09d:	ff e0                	jmp    eax
c000f09f:	b8 0b 00 00 00       	mov    eax,0xb
c000f0a4:	eb 05                	jmp    c000f0ab <File::write(unsigned long long, void*, int*)+0x55>
c000f0a6:	b8 05 00 00 00       	mov    eax,0x5
c000f0ab:	5b                   	pop    ebx
c000f0ac:	c3                   	ret    
c000f0ad:	90                   	nop

c000f0ae <Directory::read(unsigned long long, void*, int*)>:
c000f0ae:	53                   	push   ebx
c000f0af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f0b3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f0b7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f0be:	3c 19                	cmp    al,0x19
c000f0c0:	77 35                	ja     c000f0f7 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f0c2:	8b 04 85 80 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc580]
c000f0c9:	85 c0                	test   eax,eax
c000f0cb:	74 2a                	je     c000f0f7 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f0cd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f0d3:	85 c0                	test   eax,eax
c000f0d5:	74 20                	je     c000f0f7 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f0d7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f0db:	74 21                	je     c000f0fe <Directory::read(unsigned long long, void*, int*)+0x50>
c000f0dd:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f0df:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f0e3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f0e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f0ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f0f1:	5b                   	pop    ebx
c000f0f2:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f0f5:	ff e0                	jmp    eax
c000f0f7:	b8 0b 00 00 00       	mov    eax,0xb
c000f0fc:	eb 05                	jmp    c000f103 <Directory::read(unsigned long long, void*, int*)+0x55>
c000f0fe:	b8 05 00 00 00       	mov    eax,0x5
c000f103:	5b                   	pop    ebx
c000f104:	c3                   	ret    
c000f105:	90                   	nop

c000f106 <Directory::write(unsigned long long, void*, int*)>:
c000f106:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f10a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f111:	b8 0b 00 00 00       	mov    eax,0xb
c000f116:	80 fa 19             	cmp    dl,0x19
c000f119:	77 18                	ja     c000f133 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f11b:	8b 14 95 80 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc580]
c000f122:	85 d2                	test   edx,edx
c000f124:	74 0d                	je     c000f133 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f126:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f12d:	19 c0                	sbb    eax,eax
c000f12f:	83 e0 0a             	and    eax,0xa
c000f132:	40                   	inc    eax
c000f133:	c3                   	ret    

c000f134 <File::isAtty()>:
c000f134:	31 c0                	xor    eax,eax
c000f136:	c3                   	ret    
c000f137:	90                   	nop

c000f138 <Directory::isAtty()>:
c000f138:	31 c0                	xor    eax,eax
c000f13a:	c3                   	ret    
c000f13b:	90                   	nop

c000f13c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f13c:	b8 0a 00 00 00       	mov    eax,0xa
c000f141:	c3                   	ret    

c000f142 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f142:	b8 0a 00 00 00       	mov    eax,0xa
c000f147:	c3                   	ret    

c000f148 <File::~File()>:
c000f148:	83 ec 0c             	sub    esp,0xc
c000f14b:	ba a8 0a 02 c0       	mov    edx,0xc0020aa8
c000f150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f154:	89 10                	mov    DWORD PTR [eax],edx
c000f156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f15a:	83 ec 0c             	sub    esp,0xc
c000f15d:	50                   	push   eax
c000f15e:	e8 1d e9 ff ff       	call   c000da80 <UnixFile::~UnixFile()>
c000f163:	83 c4 10             	add    esp,0x10
c000f166:	90                   	nop
c000f167:	83 c4 0c             	add    esp,0xc
c000f16a:	c3                   	ret    
c000f16b:	90                   	nop

c000f16c <File::~File()>:
c000f16c:	83 ec 0c             	sub    esp,0xc
c000f16f:	83 ec 0c             	sub    esp,0xc
c000f172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f176:	e8 cd ff ff ff       	call   c000f148 <File::~File()>
c000f17b:	83 c4 10             	add    esp,0x10
c000f17e:	83 ec 08             	sub    esp,0x8
c000f181:	68 14 01 00 00       	push   0x114
c000f186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f18a:	e8 70 fc ff ff       	call   c000edff <operator delete(void*, unsigned long)>
c000f18f:	83 c4 10             	add    esp,0x10
c000f192:	83 c4 0c             	add    esp,0xc
c000f195:	c3                   	ret    

c000f196 <Directory::~Directory()>:
c000f196:	83 ec 0c             	sub    esp,0xc
c000f199:	ba c4 0a 02 c0       	mov    edx,0xc0020ac4
c000f19e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1a2:	89 10                	mov    DWORD PTR [eax],edx
c000f1a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1a8:	83 ec 0c             	sub    esp,0xc
c000f1ab:	50                   	push   eax
c000f1ac:	e8 cf e8 ff ff       	call   c000da80 <UnixFile::~UnixFile()>
c000f1b1:	83 c4 10             	add    esp,0x10
c000f1b4:	90                   	nop
c000f1b5:	83 c4 0c             	add    esp,0xc
c000f1b8:	c3                   	ret    
c000f1b9:	90                   	nop

c000f1ba <Directory::~Directory()>:
c000f1ba:	83 ec 0c             	sub    esp,0xc
c000f1bd:	83 ec 0c             	sub    esp,0xc
c000f1c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f1c4:	e8 cd ff ff ff       	call   c000f196 <Directory::~Directory()>
c000f1c9:	83 c4 10             	add    esp,0x10
c000f1cc:	83 ec 08             	sub    esp,0x8
c000f1cf:	68 14 01 00 00       	push   0x114
c000f1d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f1d8:	e8 22 fc ff ff       	call   c000edff <operator delete(void*, unsigned long)>
c000f1dd:	83 c4 10             	add    esp,0x10
c000f1e0:	83 c4 0c             	add    esp,0xc
c000f1e3:	c3                   	ret    

c000f1e4 <Filesystem::Filesystem()>:
c000f1e4:	ba 44 0a 02 c0       	mov    edx,0xc0020a44
c000f1e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f1ed:	89 10                	mov    DWORD PTR [eax],edx
c000f1ef:	8b 15 e0 35 02 c0    	mov    edx,DWORD PTR ds:0xc00235e0
c000f1f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f1f9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f1fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f200:	a3 e0 35 02 c0       	mov    ds:0xc00235e0,eax
c000f205:	90                   	nop
c000f206:	c3                   	ret    
c000f207:	90                   	nop

c000f208 <Filesystem::~Filesystem()>:
c000f208:	ba 44 0a 02 c0       	mov    edx,0xc0020a44
c000f20d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f211:	89 10                	mov    DWORD PTR [eax],edx
c000f213:	90                   	nop
c000f214:	c3                   	ret    
c000f215:	90                   	nop

c000f216 <Filesystem::~Filesystem()>:
c000f216:	83 ec 0c             	sub    esp,0xc
c000f219:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f21d:	e8 e6 ff ff ff       	call   c000f208 <Filesystem::~Filesystem()>
c000f222:	83 c4 04             	add    esp,0x4
c000f225:	83 ec 08             	sub    esp,0x8
c000f228:	6a 08                	push   0x8
c000f22a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f22e:	e8 cc fb ff ff       	call   c000edff <operator delete(void*, unsigned long)>
c000f233:	83 c4 10             	add    esp,0x10
c000f236:	83 c4 0c             	add    esp,0xc
c000f239:	c3                   	ret    

c000f23a <initVFS()>:
c000f23a:	83 ec 18             	sub    esp,0x18
c000f23d:	6a 08                	push   0x8
c000f23f:	e8 ac fb ff ff       	call   c000edf0 <operator new(unsigned long)>
c000f244:	89 04 24             	mov    DWORD PTR [esp],eax
c000f247:	e8 be a8 00 00       	call   c0019b0a <FAT::FAT()>
c000f24c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f253:	e8 98 fb ff ff       	call   c000edf0 <operator new(unsigned long)>
c000f258:	89 04 24             	mov    DWORD PTR [esp],eax
c000f25b:	e8 20 bb 00 00       	call   c001ad80 <ISO9660::ISO9660()>
c000f260:	83 c4 1c             	add    esp,0x1c
c000f263:	c3                   	ret    

c000f264 <standardiseFiles(char*, char const*, char const*)>:
c000f264:	55                   	push   ebp
c000f265:	57                   	push   edi
c000f266:	56                   	push   esi
c000f267:	53                   	push   ebx
c000f268:	81 ec 10 04 00 00    	sub    esp,0x410
c000f26e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f275:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f27c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f283:	68 00 04 00 00       	push   0x400
c000f288:	6a 00                	push   0x0
c000f28a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f28e:	56                   	push   esi
c000f28f:	e8 74 13 ff ff       	call   c0000608 <memset>
c000f294:	83 c4 10             	add    esp,0x10
c000f297:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f29b:	75 0b                	jne    c000f2a8 <standardiseFiles(char*, char const*, char const*)+0x44>
c000f29d:	50                   	push   eax
c000f29e:	50                   	push   eax
c000f29f:	57                   	push   edi
c000f2a0:	56                   	push   esi
c000f2a1:	e8 01 14 ff ff       	call   c00006a7 <strcpy>
c000f2a6:	eb 41                	jmp    c000f2e9 <standardiseFiles(char*, char const*, char const*)+0x85>
c000f2a8:	8a 07                	mov    al,BYTE PTR [edi]
c000f2aa:	3c 5c                	cmp    al,0x5c
c000f2ac:	74 04                	je     c000f2b2 <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f2ae:	3c 2f                	cmp    al,0x2f
c000f2b0:	75 18                	jne    c000f2ca <standardiseFiles(char*, char const*, char const*)+0x66>
c000f2b2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f2b5:	3c 60                	cmp    al,0x60
c000f2b7:	7e 03                	jle    c000f2bc <standardiseFiles(char*, char const*, char const*)+0x58>
c000f2b9:	83 e8 20             	sub    eax,0x20
c000f2bc:	88 04 24             	mov    BYTE PTR [esp],al
c000f2bf:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f2c6:	50                   	push   eax
c000f2c7:	50                   	push   eax
c000f2c8:	eb 18                	jmp    c000f2e2 <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f2ca:	50                   	push   eax
c000f2cb:	50                   	push   eax
c000f2cc:	55                   	push   ebp
c000f2cd:	56                   	push   esi
c000f2ce:	e8 d4 13 ff ff       	call   c00006a7 <strcpy>
c000f2d3:	5a                   	pop    edx
c000f2d4:	59                   	pop    ecx
c000f2d5:	68 a5 1b 02 c0       	push   0xc0021ba5
c000f2da:	56                   	push   esi
c000f2db:	e8 7e 14 ff ff       	call   c000075e <strcat>
c000f2e0:	5d                   	pop    ebp
c000f2e1:	58                   	pop    eax
c000f2e2:	57                   	push   edi
c000f2e3:	56                   	push   esi
c000f2e4:	e8 75 14 ff ff       	call   c000075e <strcat>
c000f2e9:	83 c4 10             	add    esp,0x10
c000f2ec:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f2ef:	3c 60                	cmp    al,0x60
c000f2f1:	7e 03                	jle    c000f2f6 <standardiseFiles(char*, char const*, char const*)+0x92>
c000f2f3:	83 e8 20             	sub    eax,0x20
c000f2f6:	88 04 24             	mov    BYTE PTR [esp],al
c000f2f9:	88 03                	mov    BYTE PTR [ebx],al
c000f2fb:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f302:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f308:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f30c:	bf 03 00 00 00       	mov    edi,0x3
c000f311:	b8 03 00 00 00       	mov    eax,0x3
c000f316:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f319:	84 d2                	test   dl,dl
c000f31b:	0f 84 91 00 00 00    	je     c000f3b2 <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f321:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f324:	80 fa 5c             	cmp    dl,0x5c
c000f327:	74 05                	je     c000f32e <standardiseFiles(char*, char const*, char const*)+0xca>
c000f329:	80 fa 2f             	cmp    dl,0x2f
c000f32c:	75 12                	jne    c000f340 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f32e:	89 c5                	mov    ebp,eax
c000f330:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f335:	74 09                	je     c000f340 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f337:	40                   	inc    eax
c000f338:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f33c:	89 cf                	mov    edi,ecx
c000f33e:	eb d6                	jmp    c000f316 <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f340:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f345:	75 5b                	jne    c000f3a2 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f347:	80 fa 2e             	cmp    dl,0x2e
c000f34a:	75 56                	jne    c000f3a2 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f34c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f350:	74 19                	je     c000f36b <standardiseFiles(char*, char const*, char const*)+0x107>
c000f352:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f357:	74 53                	je     c000f3ac <standardiseFiles(char*, char const*, char const*)+0x148>
c000f359:	89 f9                	mov    ecx,edi
c000f35b:	41                   	inc    ecx
c000f35c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f35f:	80 fa 2f             	cmp    dl,0x2f
c000f362:	74 f7                	je     c000f35b <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f364:	80 fa 5c             	cmp    dl,0x5c
c000f367:	74 f2                	je     c000f35b <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f369:	eb d1                	jmp    c000f33c <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f36b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f370:	74 3a                	je     c000f3ac <standardiseFiles(char*, char const*, char const*)+0x148>
c000f372:	83 f8 03             	cmp    eax,0x3
c000f375:	74 c5                	je     c000f33c <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f377:	41                   	inc    ecx
c000f378:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f37b:	80 fa 2f             	cmp    dl,0x2f
c000f37e:	74 f7                	je     c000f377 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f380:	80 fa 5c             	cmp    dl,0x5c
c000f383:	74 f2                	je     c000f377 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f385:	48                   	dec    eax
c000f386:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f38a:	75 06                	jne    c000f392 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f38c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f390:	eb f3                	jmp    c000f385 <standardiseFiles(char*, char const*, char const*)+0x121>
c000f392:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f396:	74 07                	je     c000f39f <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f398:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f39c:	48                   	dec    eax
c000f39d:	eb f3                	jmp    c000f392 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f39f:	40                   	inc    eax
c000f3a0:	eb 9a                	jmp    c000f33c <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f3a2:	80 fa 2f             	cmp    dl,0x2f
c000f3a5:	74 95                	je     c000f33c <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f3a7:	80 fa 5c             	cmp    dl,0x5c
c000f3aa:	74 90                	je     c000f33c <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f3ac:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f3af:	40                   	inc    eax
c000f3b0:	eb 8a                	jmp    c000f33c <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f3b2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f3b6:	83 ec 0c             	sub    esp,0xc
c000f3b9:	53                   	push   ebx
c000f3ba:	e8 66 12 ff ff       	call   c0000625 <strlen>
c000f3bf:	83 c4 10             	add    esp,0x10
c000f3c2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f3c7:	75 26                	jne    c000f3ef <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f3c9:	83 ec 0c             	sub    esp,0xc
c000f3cc:	53                   	push   ebx
c000f3cd:	e8 53 12 ff ff       	call   c0000625 <strlen>
c000f3d2:	83 c4 10             	add    esp,0x10
c000f3d5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f3da:	74 26                	je     c000f402 <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f3dc:	83 ec 0c             	sub    esp,0xc
c000f3df:	53                   	push   ebx
c000f3e0:	e8 40 12 ff ff       	call   c0000625 <strlen>
c000f3e5:	83 c4 10             	add    esp,0x10
c000f3e8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f3ed:	eb c7                	jmp    c000f3b6 <standardiseFiles(char*, char const*, char const*)+0x152>
c000f3ef:	83 ec 0c             	sub    esp,0xc
c000f3f2:	53                   	push   ebx
c000f3f3:	e8 2d 12 ff ff       	call   c0000625 <strlen>
c000f3f8:	83 c4 10             	add    esp,0x10
c000f3fb:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f400:	74 c7                	je     c000f3c9 <standardiseFiles(char*, char const*, char const*)+0x165>
c000f402:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f408:	5b                   	pop    ebx
c000f409:	5e                   	pop    esi
c000f40a:	5f                   	pop    edi
c000f40b:	5d                   	pop    ebp
c000f40c:	c3                   	ret    
c000f40d:	90                   	nop

c000f40e <File::File(char const*, Process*)>:
c000f40e:	83 ec 0c             	sub    esp,0xc
c000f411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f415:	83 ec 08             	sub    esp,0x8
c000f418:	6a 00                	push   0x0
c000f41a:	50                   	push   eax
c000f41b:	e8 10 e5 ff ff       	call   c000d930 <UnixFile::UnixFile(int)>
c000f420:	83 c4 10             	add    esp,0x10
c000f423:	ba a8 0a 02 c0       	mov    edx,0xc0020aa8
c000f428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f42c:	89 10                	mov    DWORD PTR [eax],edx
c000f42e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f432:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f43c:	83 c0 0d             	add    eax,0xd
c000f43f:	83 ec 04             	sub    esp,0x4
c000f442:	52                   	push   edx
c000f443:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f447:	50                   	push   eax
c000f448:	e8 17 fe ff ff       	call   c000f264 <standardiseFiles(char*, char const*, char const*)>
c000f44d:	83 c4 10             	add    esp,0x10
c000f450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f454:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f457:	8d 50 bf             	lea    edx,[eax-0x41]
c000f45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f45e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f468:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f46c:	90                   	nop
c000f46d:	83 c4 0c             	add    esp,0xc
c000f470:	c3                   	ret    
c000f471:	90                   	nop

c000f472 <File::open(FileOpenMode)>:
c000f472:	53                   	push   ebx
c000f473:	b8 0b 00 00 00       	mov    eax,0xb
c000f478:	83 ec 08             	sub    esp,0x8
c000f47b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f47f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f486:	80 fa 19             	cmp    dl,0x19
c000f489:	77 40                	ja     c000f4cb <File::open(FileOpenMode)+0x59>
c000f48b:	8b 14 95 80 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc580]
c000f492:	85 d2                	test   edx,edx
c000f494:	74 35                	je     c000f4cb <File::open(FileOpenMode)+0x59>
c000f496:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f49c:	85 d2                	test   edx,edx
c000f49e:	74 2b                	je     c000f4cb <File::open(FileOpenMode)+0x59>
c000f4a0:	b8 06 00 00 00       	mov    eax,0x6
c000f4a5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f4a9:	75 20                	jne    c000f4cb <File::open(FileOpenMode)+0x59>
c000f4ab:	8b 02                	mov    eax,DWORD PTR [edx]
c000f4ad:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f4b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f4b7:	51                   	push   ecx
c000f4b8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f4bb:	51                   	push   ecx
c000f4bc:	52                   	push   edx
c000f4bd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f4c0:	83 c4 10             	add    esp,0x10
c000f4c3:	85 c0                	test   eax,eax
c000f4c5:	75 04                	jne    c000f4cb <File::open(FileOpenMode)+0x59>
c000f4c7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f4cb:	83 c4 08             	add    esp,0x8
c000f4ce:	5b                   	pop    ebx
c000f4cf:	c3                   	ret    

c000f4d0 <File::close()>:
c000f4d0:	53                   	push   ebx
c000f4d1:	b8 0b 00 00 00       	mov    eax,0xb
c000f4d6:	83 ec 08             	sub    esp,0x8
c000f4d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f4dd:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f4e4:	80 fa 19             	cmp    dl,0x19
c000f4e7:	77 41                	ja     c000f52a <File::close()+0x5a>
c000f4e9:	8b 1c 95 80 3a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc580]
c000f4f0:	85 db                	test   ebx,ebx
c000f4f2:	74 36                	je     c000f52a <File::close()+0x5a>
c000f4f4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f4fb:	74 2d                	je     c000f52a <File::close()+0x5a>
c000f4fd:	b8 05 00 00 00       	mov    eax,0x5
c000f502:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f506:	74 22                	je     c000f52a <File::close()+0x5a>
c000f508:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f50c:	8b 04 95 80 3a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc580]
c000f513:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f519:	53                   	push   ebx
c000f51a:	53                   	push   ebx
c000f51b:	8b 10                	mov    edx,DWORD PTR [eax]
c000f51d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f523:	50                   	push   eax
c000f524:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f527:	83 c4 10             	add    esp,0x10
c000f52a:	83 c4 08             	add    esp,0x8
c000f52d:	5b                   	pop    ebx
c000f52e:	c3                   	ret    
c000f52f:	90                   	nop

c000f530 <File::seek(unsigned long long)>:
c000f530:	56                   	push   esi
c000f531:	53                   	push   ebx
c000f532:	b8 0b 00 00 00       	mov    eax,0xb
c000f537:	51                   	push   ecx
c000f538:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f53c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f540:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f547:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f54b:	80 fa 19             	cmp    dl,0x19
c000f54e:	77 31                	ja     c000f581 <File::seek(unsigned long long)+0x51>
c000f550:	8b 14 95 80 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc580]
c000f557:	85 d2                	test   edx,edx
c000f559:	74 26                	je     c000f581 <File::seek(unsigned long long)+0x51>
c000f55b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f561:	85 d2                	test   edx,edx
c000f563:	74 1c                	je     c000f581 <File::seek(unsigned long long)+0x51>
c000f565:	b8 05 00 00 00       	mov    eax,0x5
c000f56a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f56e:	74 11                	je     c000f581 <File::seek(unsigned long long)+0x51>
c000f570:	8b 02                	mov    eax,DWORD PTR [edx]
c000f572:	53                   	push   ebx
c000f573:	51                   	push   ecx
c000f574:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f57a:	52                   	push   edx
c000f57b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f57e:	83 c4 10             	add    esp,0x10
c000f581:	5a                   	pop    edx
c000f582:	5b                   	pop    ebx
c000f583:	5e                   	pop    esi
c000f584:	c3                   	ret    
c000f585:	90                   	nop

c000f586 <File::tell(unsigned long long*)>:
c000f586:	83 ec 0c             	sub    esp,0xc
c000f589:	b8 0b 00 00 00       	mov    eax,0xb
c000f58e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f592:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f599:	80 fa 19             	cmp    dl,0x19
c000f59c:	77 34                	ja     c000f5d2 <File::tell(unsigned long long*)+0x4c>
c000f59e:	8b 14 95 80 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc580]
c000f5a5:	85 d2                	test   edx,edx
c000f5a7:	74 29                	je     c000f5d2 <File::tell(unsigned long long*)+0x4c>
c000f5a9:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f5af:	85 d2                	test   edx,edx
c000f5b1:	74 1f                	je     c000f5d2 <File::tell(unsigned long long*)+0x4c>
c000f5b3:	b8 05 00 00 00       	mov    eax,0x5
c000f5b8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f5bc:	74 14                	je     c000f5d2 <File::tell(unsigned long long*)+0x4c>
c000f5be:	50                   	push   eax
c000f5bf:	8b 02                	mov    eax,DWORD PTR [edx]
c000f5c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f5c5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f5cb:	52                   	push   edx
c000f5cc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f5cf:	83 c4 10             	add    esp,0x10
c000f5d2:	83 c4 0c             	add    esp,0xc
c000f5d5:	c3                   	ret    

c000f5d6 <File::rewind()>:
c000f5d6:	83 ec 10             	sub    esp,0x10
c000f5d9:	6a 00                	push   0x0
c000f5db:	6a 00                	push   0x0
c000f5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5e1:	e8 4a ff ff ff       	call   c000f530 <File::seek(unsigned long long)>
c000f5e6:	83 c4 1c             	add    esp,0x1c
c000f5e9:	c3                   	ret    

c000f5ea <File::unlink()>:
c000f5ea:	83 ec 0c             	sub    esp,0xc
c000f5ed:	b8 0b 00 00 00       	mov    eax,0xb
c000f5f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f5f6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f5fd:	80 f9 19             	cmp    cl,0x19
c000f600:	77 2f                	ja     c000f631 <File::unlink()+0x47>
c000f602:	8b 0c 8d 80 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc580]
c000f609:	85 c9                	test   ecx,ecx
c000f60b:	74 24                	je     c000f631 <File::unlink()+0x47>
c000f60d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f613:	85 c9                	test   ecx,ecx
c000f615:	74 1a                	je     c000f631 <File::unlink()+0x47>
c000f617:	b8 06 00 00 00       	mov    eax,0x6
c000f61c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f620:	75 0f                	jne    c000f631 <File::unlink()+0x47>
c000f622:	83 c2 0d             	add    edx,0xd
c000f625:	50                   	push   eax
c000f626:	50                   	push   eax
c000f627:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f629:	52                   	push   edx
c000f62a:	51                   	push   ecx
c000f62b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f62e:	83 c4 10             	add    esp,0x10
c000f631:	83 c4 0c             	add    esp,0xc
c000f634:	c3                   	ret    
c000f635:	90                   	nop

c000f636 <File::rename(char const*)>:
c000f636:	83 ec 0c             	sub    esp,0xc
c000f639:	b8 0b 00 00 00       	mov    eax,0xb
c000f63e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f642:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f649:	80 f9 19             	cmp    cl,0x19
c000f64c:	77 32                	ja     c000f680 <File::rename(char const*)+0x4a>
c000f64e:	8b 0c 8d 80 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc580]
c000f655:	85 c9                	test   ecx,ecx
c000f657:	74 27                	je     c000f680 <File::rename(char const*)+0x4a>
c000f659:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f65f:	85 c9                	test   ecx,ecx
c000f661:	74 1d                	je     c000f680 <File::rename(char const*)+0x4a>
c000f663:	b8 06 00 00 00       	mov    eax,0x6
c000f668:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f66c:	75 12                	jne    c000f680 <File::rename(char const*)+0x4a>
c000f66e:	83 c2 0d             	add    edx,0xd
c000f671:	50                   	push   eax
c000f672:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f674:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f678:	52                   	push   edx
c000f679:	51                   	push   ecx
c000f67a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f67d:	83 c4 10             	add    esp,0x10
c000f680:	83 c4 0c             	add    esp,0xc
c000f683:	c3                   	ret    

c000f684 <File::chfatattr(unsigned char, unsigned char)>:
c000f684:	57                   	push   edi
c000f685:	b8 0b 00 00 00       	mov    eax,0xb
c000f68a:	56                   	push   esi
c000f68b:	53                   	push   ebx
c000f68c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f690:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f694:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f69b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f69f:	80 f9 19             	cmp    cl,0x19
c000f6a2:	77 37                	ja     c000f6db <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f6a4:	8b 0c 8d 80 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc580]
c000f6ab:	85 c9                	test   ecx,ecx
c000f6ad:	74 2c                	je     c000f6db <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f6af:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f6b5:	85 c9                	test   ecx,ecx
c000f6b7:	74 22                	je     c000f6db <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f6b9:	b8 06 00 00 00       	mov    eax,0x6
c000f6be:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f6c2:	75 17                	jne    c000f6db <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f6c4:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f6c6:	89 f0                	mov    eax,esi
c000f6c8:	83 c2 0d             	add    edx,0xd
c000f6cb:	0f b6 f0             	movzx  esi,al
c000f6ce:	0f b6 db             	movzx  ebx,bl
c000f6d1:	56                   	push   esi
c000f6d2:	53                   	push   ebx
c000f6d3:	52                   	push   edx
c000f6d4:	51                   	push   ecx
c000f6d5:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000f6d8:	83 c4 10             	add    esp,0x10
c000f6db:	5b                   	pop    ebx
c000f6dc:	5e                   	pop    esi
c000f6dd:	5f                   	pop    edi
c000f6de:	c3                   	ret    
c000f6df:	90                   	nop

c000f6e0 <File::exists()>:
c000f6e0:	83 ec 0c             	sub    esp,0xc
c000f6e3:	31 c0                	xor    eax,eax
c000f6e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f6e9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f6f0:	80 f9 19             	cmp    cl,0x19
c000f6f3:	77 24                	ja     c000f719 <File::exists()+0x39>
c000f6f5:	8b 0c 8d 80 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc580]
c000f6fc:	85 c9                	test   ecx,ecx
c000f6fe:	74 19                	je     c000f719 <File::exists()+0x39>
c000f700:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f706:	85 c9                	test   ecx,ecx
c000f708:	74 0f                	je     c000f719 <File::exists()+0x39>
c000f70a:	83 c2 0d             	add    edx,0xd
c000f70d:	50                   	push   eax
c000f70e:	50                   	push   eax
c000f70f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f711:	52                   	push   edx
c000f712:	51                   	push   ecx
c000f713:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f716:	83 c4 10             	add    esp,0x10
c000f719:	83 c4 0c             	add    esp,0xc
c000f71c:	c3                   	ret    
c000f71d:	90                   	nop

c000f71e <File::stat(unsigned long long*, bool*)>:
c000f71e:	56                   	push   esi
c000f71f:	53                   	push   ebx
c000f720:	50                   	push   eax
c000f721:	b8 0b 00 00 00       	mov    eax,0xb
c000f726:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f72a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f72e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f735:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f739:	80 f9 19             	cmp    cl,0x19
c000f73c:	77 3d                	ja     c000f77b <File::stat(unsigned long long*, bool*)+0x5d>
c000f73e:	8b 0c 8d 80 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc580]
c000f745:	85 c9                	test   ecx,ecx
c000f747:	74 32                	je     c000f77b <File::stat(unsigned long long*, bool*)+0x5d>
c000f749:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f74f:	85 c9                	test   ecx,ecx
c000f751:	74 28                	je     c000f77b <File::stat(unsigned long long*, bool*)+0x5d>
c000f753:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f755:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f759:	74 13                	je     c000f76e <File::stat(unsigned long long*, bool*)+0x50>
c000f75b:	83 ec 04             	sub    esp,0x4
c000f75e:	56                   	push   esi
c000f75f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000f765:	51                   	push   ecx
c000f766:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000f769:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000f76c:	eb 0a                	jmp    c000f778 <File::stat(unsigned long long*, bool*)+0x5a>
c000f76e:	53                   	push   ebx
c000f76f:	83 c2 0d             	add    edx,0xd
c000f772:	56                   	push   esi
c000f773:	52                   	push   edx
c000f774:	51                   	push   ecx
c000f775:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000f778:	83 c4 10             	add    esp,0x10
c000f77b:	5a                   	pop    edx
c000f77c:	5b                   	pop    ebx
c000f77d:	5e                   	pop    esi
c000f77e:	c3                   	ret    

c000f77f <getcwd(Process*, char*, int)>:
c000f77f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f783:	31 c0                	xor    eax,eax
c000f785:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000f788:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000f78c:	7d 15                	jge    c000f7a3 <getcwd(Process*, char*, int)+0x24>
c000f78e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f792:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000f799:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000f79c:	84 c9                	test   cl,cl
c000f79e:	74 06                	je     c000f7a6 <getcwd(Process*, char*, int)+0x27>
c000f7a0:	40                   	inc    eax
c000f7a1:	eb e2                	jmp    c000f785 <getcwd(Process*, char*, int)+0x6>
c000f7a3:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000f7a6:	31 c0                	xor    eax,eax
c000f7a8:	c3                   	ret    

c000f7a9 <setcwd(Process*, char*)>:
c000f7a9:	55                   	push   ebp
c000f7aa:	57                   	push   edi
c000f7ab:	56                   	push   esi
c000f7ac:	53                   	push   ebx
c000f7ad:	81 ec 20 02 00 00    	sub    esp,0x220
c000f7b3:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000f7ba:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000f7c0:	57                   	push   edi
c000f7c1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000f7c8:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000f7cc:	56                   	push   esi
c000f7cd:	e8 92 fa ff ff       	call   c000f264 <standardiseFiles(char*, char const*, char const*)>
c000f7d2:	89 34 24             	mov    DWORD PTR [esp],esi
c000f7d5:	e8 4b 0e ff ff       	call   c0000625 <strlen>
c000f7da:	83 c4 10             	add    esp,0x10
c000f7dd:	83 f8 02             	cmp    eax,0x2
c000f7e0:	77 17                	ja     c000f7f9 <setcwd(Process*, char*)+0x50>
c000f7e2:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000f7e7:	83 e8 41             	sub    eax,0x41
c000f7ea:	83 f8 19             	cmp    eax,0x19
c000f7ed:	76 24                	jbe    c000f813 <setcwd(Process*, char*)+0x6a>
c000f7ef:	b8 03 00 00 00       	mov    eax,0x3
c000f7f4:	e9 cb 00 00 00       	jmp    c000f8c4 <setcwd(Process*, char*)+0x11b>
c000f7f9:	83 ec 0c             	sub    esp,0xc
c000f7fc:	56                   	push   esi
c000f7fd:	e8 23 0e ff ff       	call   c0000625 <strlen>
c000f802:	83 c4 10             	add    esp,0x10
c000f805:	83 f8 03             	cmp    eax,0x3
c000f808:	75 33                	jne    c000f83d <setcwd(Process*, char*)+0x94>
c000f80a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000f80f:	75 2c                	jne    c000f83d <setcwd(Process*, char*)+0x94>
c000f811:	eb cf                	jmp    c000f7e2 <setcwd(Process*, char*)+0x39>
c000f813:	8b 14 85 80 3a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc580]
c000f81a:	b8 05 00 00 00       	mov    eax,0x5
c000f81f:	85 d2                	test   edx,edx
c000f821:	0f 84 9d 00 00 00    	je     c000f8c4 <setcwd(Process*, char*)+0x11b>
c000f827:	b8 06 00 00 00       	mov    eax,0x6
c000f82c:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000f833:	0f 84 8b 00 00 00    	je     c000f8c4 <setcwd(Process*, char*)+0x11b>
c000f839:	51                   	push   ecx
c000f83a:	51                   	push   ecx
c000f83b:	eb 7b                	jmp    c000f8b8 <setcwd(Process*, char*)+0x10f>
c000f83d:	83 ec 0c             	sub    esp,0xc
c000f840:	68 14 01 00 00       	push   0x114
c000f845:	e8 a6 f5 ff ff       	call   c000edf0 <operator new(unsigned long)>
c000f84a:	83 c4 0c             	add    esp,0xc
c000f84d:	89 c3                	mov    ebx,eax
c000f84f:	55                   	push   ebp
c000f850:	56                   	push   esi
c000f851:	50                   	push   eax
c000f852:	e8 b7 fb ff ff       	call   c000f40e <File::File(char const*, Process*)>
c000f857:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000f85c:	83 c4 0c             	add    esp,0xc
c000f85f:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000f863:	50                   	push   eax
c000f864:	8d 44 24 10          	lea    eax,[esp+0x10]
c000f868:	50                   	push   eax
c000f869:	53                   	push   ebx
c000f86a:	e8 af fe ff ff       	call   c000f71e <File::stat(unsigned long long*, bool*)>
c000f86f:	83 c4 10             	add    esp,0x10
c000f872:	8b 13                	mov    edx,DWORD PTR [ebx]
c000f874:	83 f8 02             	cmp    eax,0x2
c000f877:	75 09                	jne    c000f882 <setcwd(Process*, char*)+0xd9>
c000f879:	83 ec 0c             	sub    esp,0xc
c000f87c:	53                   	push   ebx
c000f87d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f880:	eb 0d                	jmp    c000f88f <setcwd(Process*, char*)+0xe6>
c000f882:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000f885:	85 c0                	test   eax,eax
c000f887:	74 10                	je     c000f899 <setcwd(Process*, char*)+0xf0>
c000f889:	83 ec 0c             	sub    esp,0xc
c000f88c:	53                   	push   ebx
c000f88d:	ff d2                	call   edx
c000f88f:	83 c4 10             	add    esp,0x10
c000f892:	b8 01 00 00 00       	mov    eax,0x1
c000f897:	eb 2b                	jmp    c000f8c4 <setcwd(Process*, char*)+0x11b>
c000f899:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f89e:	75 10                	jne    c000f8b0 <setcwd(Process*, char*)+0x107>
c000f8a0:	83 ec 0c             	sub    esp,0xc
c000f8a3:	53                   	push   ebx
c000f8a4:	ff d2                	call   edx
c000f8a6:	83 c4 10             	add    esp,0x10
c000f8a9:	b8 02 00 00 00       	mov    eax,0x2
c000f8ae:	eb 14                	jmp    c000f8c4 <setcwd(Process*, char*)+0x11b>
c000f8b0:	83 ec 0c             	sub    esp,0xc
c000f8b3:	53                   	push   ebx
c000f8b4:	ff d2                	call   edx
c000f8b6:	58                   	pop    eax
c000f8b7:	5a                   	pop    edx
c000f8b8:	56                   	push   esi
c000f8b9:	57                   	push   edi
c000f8ba:	e8 e8 0d ff ff       	call   c00006a7 <strcpy>
c000f8bf:	83 c4 10             	add    esp,0x10
c000f8c2:	31 c0                	xor    eax,eax
c000f8c4:	81 c4 1c 02 00 00    	add    esp,0x21c
c000f8ca:	5b                   	pop    ebx
c000f8cb:	5e                   	pop    esi
c000f8cc:	5f                   	pop    edi
c000f8cd:	5d                   	pop    ebp
c000f8ce:	c3                   	ret    
c000f8cf:	90                   	nop

c000f8d0 <Directory::Directory(char const*, Process*)>:
c000f8d0:	83 ec 0c             	sub    esp,0xc
c000f8d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8d7:	83 ec 08             	sub    esp,0x8
c000f8da:	6a 00                	push   0x0
c000f8dc:	50                   	push   eax
c000f8dd:	e8 4e e0 ff ff       	call   c000d930 <UnixFile::UnixFile(int)>
c000f8e2:	83 c4 10             	add    esp,0x10
c000f8e5:	ba c4 0a 02 c0       	mov    edx,0xc0020ac4
c000f8ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8ee:	89 10                	mov    DWORD PTR [eax],edx
c000f8f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f8f4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f8fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8fe:	83 c0 0d             	add    eax,0xd
c000f901:	83 ec 04             	sub    esp,0x4
c000f904:	52                   	push   edx
c000f905:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f909:	50                   	push   eax
c000f90a:	e8 55 f9 ff ff       	call   c000f264 <standardiseFiles(char*, char const*, char const*)>
c000f90f:	83 c4 10             	add    esp,0x10
c000f912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f916:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f919:	8d 50 bf             	lea    edx,[eax-0x41]
c000f91c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f920:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f92a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f92e:	90                   	nop
c000f92f:	83 c4 0c             	add    esp,0xc
c000f932:	c3                   	ret    
c000f933:	90                   	nop

c000f934 <Directory::open()>:
c000f934:	53                   	push   ebx
c000f935:	b8 0b 00 00 00       	mov    eax,0xb
c000f93a:	83 ec 08             	sub    esp,0x8
c000f93d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f941:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f948:	80 fa 19             	cmp    dl,0x19
c000f94b:	77 3d                	ja     c000f98a <Directory::open()+0x56>
c000f94d:	8b 14 95 80 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc580]
c000f954:	85 d2                	test   edx,edx
c000f956:	74 32                	je     c000f98a <Directory::open()+0x56>
c000f958:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f95e:	85 d2                	test   edx,edx
c000f960:	74 28                	je     c000f98a <Directory::open()+0x56>
c000f962:	b8 06 00 00 00       	mov    eax,0x6
c000f967:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f96b:	75 1d                	jne    c000f98a <Directory::open()+0x56>
c000f96d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f973:	50                   	push   eax
c000f974:	8b 02                	mov    eax,DWORD PTR [edx]
c000f976:	51                   	push   ecx
c000f977:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f97a:	51                   	push   ecx
c000f97b:	52                   	push   edx
c000f97c:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000f97f:	83 c4 10             	add    esp,0x10
c000f982:	85 c0                	test   eax,eax
c000f984:	75 04                	jne    c000f98a <Directory::open()+0x56>
c000f986:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f98a:	83 c4 08             	add    esp,0x8
c000f98d:	5b                   	pop    ebx
c000f98e:	c3                   	ret    
c000f98f:	90                   	nop

c000f990 <Directory::close()>:
c000f990:	53                   	push   ebx
c000f991:	b8 0b 00 00 00       	mov    eax,0xb
c000f996:	83 ec 08             	sub    esp,0x8
c000f999:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f99d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f9a4:	80 fa 19             	cmp    dl,0x19
c000f9a7:	77 41                	ja     c000f9ea <Directory::close()+0x5a>
c000f9a9:	8b 1c 95 80 3a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc580]
c000f9b0:	85 db                	test   ebx,ebx
c000f9b2:	74 36                	je     c000f9ea <Directory::close()+0x5a>
c000f9b4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f9bb:	74 2d                	je     c000f9ea <Directory::close()+0x5a>
c000f9bd:	b8 05 00 00 00       	mov    eax,0x5
c000f9c2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f9c6:	74 22                	je     c000f9ea <Directory::close()+0x5a>
c000f9c8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f9cc:	8b 04 95 80 3a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc580]
c000f9d3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f9d9:	53                   	push   ebx
c000f9da:	53                   	push   ebx
c000f9db:	8b 10                	mov    edx,DWORD PTR [eax]
c000f9dd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f9e3:	50                   	push   eax
c000f9e4:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000f9e7:	83 c4 10             	add    esp,0x10
c000f9ea:	83 c4 08             	add    esp,0x8
c000f9ed:	5b                   	pop    ebx
c000f9ee:	c3                   	ret    
c000f9ef:	90                   	nop

c000f9f0 <Directory::unlink()>:
c000f9f0:	83 ec 0c             	sub    esp,0xc
c000f9f3:	b8 0b 00 00 00       	mov    eax,0xb
c000f9f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f9fc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fa03:	80 f9 19             	cmp    cl,0x19
c000fa06:	77 2f                	ja     c000fa37 <Directory::unlink()+0x47>
c000fa08:	8b 0c 8d 80 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc580]
c000fa0f:	85 c9                	test   ecx,ecx
c000fa11:	74 24                	je     c000fa37 <Directory::unlink()+0x47>
c000fa13:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fa19:	85 c9                	test   ecx,ecx
c000fa1b:	74 1a                	je     c000fa37 <Directory::unlink()+0x47>
c000fa1d:	b8 06 00 00 00       	mov    eax,0x6
c000fa22:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fa26:	75 0f                	jne    c000fa37 <Directory::unlink()+0x47>
c000fa28:	83 c2 0d             	add    edx,0xd
c000fa2b:	50                   	push   eax
c000fa2c:	50                   	push   eax
c000fa2d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fa2f:	52                   	push   edx
c000fa30:	51                   	push   ecx
c000fa31:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fa34:	83 c4 10             	add    esp,0x10
c000fa37:	83 c4 0c             	add    esp,0xc
c000fa3a:	c3                   	ret    
c000fa3b:	90                   	nop

c000fa3c <Directory::rename(char const*)>:
c000fa3c:	83 ec 0c             	sub    esp,0xc
c000fa3f:	b8 0b 00 00 00       	mov    eax,0xb
c000fa44:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fa48:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fa4f:	80 f9 19             	cmp    cl,0x19
c000fa52:	77 32                	ja     c000fa86 <Directory::rename(char const*)+0x4a>
c000fa54:	8b 0c 8d 80 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc580]
c000fa5b:	85 c9                	test   ecx,ecx
c000fa5d:	74 27                	je     c000fa86 <Directory::rename(char const*)+0x4a>
c000fa5f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fa65:	85 c9                	test   ecx,ecx
c000fa67:	74 1d                	je     c000fa86 <Directory::rename(char const*)+0x4a>
c000fa69:	b8 06 00 00 00       	mov    eax,0x6
c000fa6e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fa72:	75 12                	jne    c000fa86 <Directory::rename(char const*)+0x4a>
c000fa74:	83 c2 0d             	add    edx,0xd
c000fa77:	50                   	push   eax
c000fa78:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fa7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fa7e:	52                   	push   edx
c000fa7f:	51                   	push   ecx
c000fa80:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fa83:	83 c4 10             	add    esp,0x10
c000fa86:	83 c4 0c             	add    esp,0xc
c000fa89:	c3                   	ret    

c000fa8a <Directory::exists()>:
c000fa8a:	83 ec 0c             	sub    esp,0xc
c000fa8d:	31 c0                	xor    eax,eax
c000fa8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fa93:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fa9a:	80 f9 19             	cmp    cl,0x19
c000fa9d:	77 24                	ja     c000fac3 <Directory::exists()+0x39>
c000fa9f:	8b 0c 8d 80 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc580]
c000faa6:	85 c9                	test   ecx,ecx
c000faa8:	74 19                	je     c000fac3 <Directory::exists()+0x39>
c000faaa:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fab0:	85 c9                	test   ecx,ecx
c000fab2:	74 0f                	je     c000fac3 <Directory::exists()+0x39>
c000fab4:	83 c2 0d             	add    edx,0xd
c000fab7:	50                   	push   eax
c000fab8:	50                   	push   eax
c000fab9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fabb:	52                   	push   edx
c000fabc:	51                   	push   ecx
c000fabd:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fac0:	83 c4 10             	add    esp,0x10
c000fac3:	83 c4 0c             	add    esp,0xc
c000fac6:	c3                   	ret    
c000fac7:	90                   	nop

c000fac8 <Directory::read(dirent*)>:
c000fac8:	83 ec 1c             	sub    esp,0x1c
c000facb:	b8 0b 00 00 00       	mov    eax,0xb
c000fad0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fad4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fadb:	80 fa 19             	cmp    dl,0x19
c000fade:	77 30                	ja     c000fb10 <Directory::read(dirent*)+0x48>
c000fae0:	8b 14 95 80 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc580]
c000fae7:	85 d2                	test   edx,edx
c000fae9:	74 25                	je     c000fb10 <Directory::read(dirent*)+0x48>
c000faeb:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000faf2:	74 1c                	je     c000fb10 <Directory::read(dirent*)+0x48>
c000faf4:	83 ec 0c             	sub    esp,0xc
c000faf7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000faf9:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fafd:	52                   	push   edx
c000fafe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fb02:	6a 00                	push   0x0
c000fb04:	68 10 01 00 00       	push   0x110
c000fb09:	51                   	push   ecx
c000fb0a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fb0d:	83 c4 20             	add    esp,0x20
c000fb10:	83 c4 1c             	add    esp,0x1c
c000fb13:	c3                   	ret    

c000fb14 <Directory::create()>:
c000fb14:	83 ec 0c             	sub    esp,0xc
c000fb17:	b8 0b 00 00 00       	mov    eax,0xb
c000fb1c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fb20:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fb27:	80 f9 19             	cmp    cl,0x19
c000fb2a:	77 2f                	ja     c000fb5b <Directory::create()+0x47>
c000fb2c:	8b 0c 8d 80 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc580]
c000fb33:	85 c9                	test   ecx,ecx
c000fb35:	74 24                	je     c000fb5b <Directory::create()+0x47>
c000fb37:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fb3d:	85 c9                	test   ecx,ecx
c000fb3f:	74 1a                	je     c000fb5b <Directory::create()+0x47>
c000fb41:	b8 06 00 00 00       	mov    eax,0x6
c000fb46:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fb4a:	75 0f                	jne    c000fb5b <Directory::create()+0x47>
c000fb4c:	83 c2 0d             	add    edx,0xd
c000fb4f:	50                   	push   eax
c000fb50:	50                   	push   eax
c000fb51:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fb53:	52                   	push   edx
c000fb54:	51                   	push   ecx
c000fb55:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fb58:	83 c4 10             	add    esp,0x10
c000fb5b:	83 c4 0c             	add    esp,0xc
c000fb5e:	c3                   	ret    
c000fb5f:	90                   	nop

c000fb60 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fb60:	b8 0a 00 00 00       	mov    eax,0xa
c000fb65:	c3                   	ret    

c000fb66 <Bus::Bus(char const*)>:
c000fb66:	83 ec 0c             	sub    esp,0xc
c000fb69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb6d:	83 ec 08             	sub    esp,0x8
c000fb70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb74:	50                   	push   eax
c000fb75:	e8 60 09 00 00       	call   c00104da <Device::Device(char const*)>
c000fb7a:	83 c4 10             	add    esp,0x10
c000fb7d:	ba e0 0a 02 c0       	mov    edx,0xc0020ae0
c000fb82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb86:	89 10                	mov    DWORD PTR [eax],edx
c000fb88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb8c:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fb96:	90                   	nop
c000fb97:	83 c4 0c             	add    esp,0xc
c000fb9a:	c3                   	ret    
c000fb9b:	90                   	nop

c000fb9c <Bus::~Bus()>:
c000fb9c:	83 ec 0c             	sub    esp,0xc
c000fb9f:	ba e0 0a 02 c0       	mov    edx,0xc0020ae0
c000fba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fba8:	89 10                	mov    DWORD PTR [eax],edx
c000fbaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbae:	83 ec 0c             	sub    esp,0xc
c000fbb1:	50                   	push   eax
c000fbb2:	e8 d5 05 00 00       	call   c001018c <Device::~Device()>
c000fbb7:	83 c4 10             	add    esp,0x10
c000fbba:	90                   	nop
c000fbbb:	83 c4 0c             	add    esp,0xc
c000fbbe:	c3                   	ret    
c000fbbf:	90                   	nop

c000fbc0 <Bus::~Bus()>:
c000fbc0:	83 ec 0c             	sub    esp,0xc
c000fbc3:	83 ec 0c             	sub    esp,0xc
c000fbc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fbca:	e8 cd ff ff ff       	call   c000fb9c <Bus::~Bus()>
c000fbcf:	83 c4 10             	add    esp,0x10
c000fbd2:	83 ec 08             	sub    esp,0x8
c000fbd5:	68 58 01 00 00       	push   0x158
c000fbda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fbde:	e8 1c f2 ff ff       	call   c000edff <operator delete(void*, unsigned long)>
c000fbe3:	83 c4 10             	add    esp,0x10
c000fbe6:	83 c4 0c             	add    esp,0xc
c000fbe9:	c3                   	ret    

c000fbea <Buzzer::Buzzer(char const*)>:
c000fbea:	83 ec 0c             	sub    esp,0xc
c000fbed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbf1:	83 ec 08             	sub    esp,0x8
c000fbf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fbf8:	50                   	push   eax
c000fbf9:	e8 dc 08 00 00       	call   c00104da <Device::Device(char const*)>
c000fbfe:	83 c4 10             	add    esp,0x10
c000fc01:	ba 0c 0b 02 c0       	mov    edx,0xc0020b0c
c000fc06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc0a:	89 10                	mov    DWORD PTR [eax],edx
c000fc0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc10:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000fc1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc1e:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000fc28:	90                   	nop
c000fc29:	83 c4 0c             	add    esp,0xc
c000fc2c:	c3                   	ret    
c000fc2d:	90                   	nop

c000fc2e <Buzzer::~Buzzer()>:
c000fc2e:	83 ec 0c             	sub    esp,0xc
c000fc31:	ba 0c 0b 02 c0       	mov    edx,0xc0020b0c
c000fc36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc3a:	89 10                	mov    DWORD PTR [eax],edx
c000fc3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc40:	83 ec 0c             	sub    esp,0xc
c000fc43:	50                   	push   eax
c000fc44:	e8 43 05 00 00       	call   c001018c <Device::~Device()>
c000fc49:	83 c4 10             	add    esp,0x10
c000fc4c:	90                   	nop
c000fc4d:	83 c4 0c             	add    esp,0xc
c000fc50:	c3                   	ret    
c000fc51:	90                   	nop

c000fc52 <Buzzer::~Buzzer()>:
c000fc52:	83 ec 0c             	sub    esp,0xc
c000fc55:	83 ec 0c             	sub    esp,0xc
c000fc58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc5c:	e8 cd ff ff ff       	call   c000fc2e <Buzzer::~Buzzer()>
c000fc61:	83 c4 10             	add    esp,0x10
c000fc64:	83 ec 08             	sub    esp,0x8
c000fc67:	68 5c 01 00 00       	push   0x15c
c000fc6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc70:	e8 8a f1 ff ff       	call   c000edff <operator delete(void*, unsigned long)>
c000fc75:	83 c4 10             	add    esp,0x10
c000fc78:	83 c4 0c             	add    esp,0xc
c000fc7b:	c3                   	ret    

c000fc7c <Buzzer::stop()>:
c000fc7c:	83 ec 14             	sub    esp,0x14
c000fc7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fc83:	8b 10                	mov    edx,DWORD PTR [eax]
c000fc85:	6a 00                	push   0x0
c000fc87:	50                   	push   eax
c000fc88:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fc8b:	83 c4 1c             	add    esp,0x1c
c000fc8e:	c3                   	ret    

c000fc8f <beepThread(void*)>:
c000fc8f:	53                   	push   ebx
c000fc90:	83 ec 08             	sub    esp,0x8
c000fc93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc97:	e8 9a 7d 00 00       	call   c0017a36 <unlockScheduler()>
c000fc9c:	b8 40 42 0f 00       	mov    eax,0xf4240
c000fca1:	52                   	push   edx
c000fca2:	52                   	push   edx
c000fca3:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000fca9:	52                   	push   edx
c000fcaa:	50                   	push   eax
c000fcab:	e8 3d 84 00 00       	call   c00180ed <nanoSleep(unsigned long long)>
c000fcb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fcb3:	e8 c4 ff ff ff       	call   c000fc7c <Buzzer::stop()>
c000fcb8:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000fcc0:	83 c4 18             	add    esp,0x18
c000fcc3:	5b                   	pop    ebx
c000fcc4:	e9 6a 83 00 00       	jmp    c0018033 <blockTask(TaskState)>
c000fcc9:	90                   	nop

c000fcca <Buzzer::beep(int, int, bool)>:
c000fcca:	57                   	push   edi
c000fccb:	56                   	push   esi
c000fccc:	53                   	push   ebx
c000fccd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fcd1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fcd5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fcd9:	52                   	push   edx
c000fcda:	52                   	push   edx
c000fcdb:	8b 06                	mov    eax,DWORD PTR [esi]
c000fcdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fce1:	56                   	push   esi
c000fce2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000fce5:	83 c4 10             	add    esp,0x10
c000fce8:	89 f8                	mov    eax,edi
c000fcea:	84 c0                	test   al,al
c000fcec:	74 1f                	je     c000fd0d <Buzzer::beep(int, int, bool)+0x43>
c000fcee:	50                   	push   eax
c000fcef:	50                   	push   eax
c000fcf0:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000fcf6:	99                   	cdq    
c000fcf7:	52                   	push   edx
c000fcf8:	50                   	push   eax
c000fcf9:	e8 ef 83 00 00       	call   c00180ed <nanoSleep(unsigned long long)>
c000fcfe:	83 c4 10             	add    esp,0x10
c000fd01:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fd05:	5b                   	pop    ebx
c000fd06:	5e                   	pop    esi
c000fd07:	5f                   	pop    edi
c000fd08:	e9 6f ff ff ff       	jmp    c000fc7c <Buzzer::stop()>
c000fd0d:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000fd13:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c000fd18:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000fd20:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fd24:	c7 44 24 14 8f fc 00 c0 	mov    DWORD PTR [esp+0x14],0xc000fc8f
c000fd2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fd30:	5b                   	pop    ebx
c000fd31:	5e                   	pop    esi
c000fd32:	5f                   	pop    edi
c000fd33:	e9 26 7e 00 00       	jmp    c0017b5e <Process::createThread(void (*)(void*), void*, int)>

c000fd38 <loadClockSettings()>:
c000fd38:	c7 05 ec 35 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc00235ec,0xa
c000fd42:	c6 05 e9 35 02 c0 00 	mov    BYTE PTR ds:0xc00235e9,0x0
c000fd49:	c6 05 e8 35 02 c0 01 	mov    BYTE PTR ds:0xc00235e8,0x1
c000fd50:	c3                   	ret    
c000fd51:	90                   	nop

c000fd52 <Clock::Clock(char const*)>:
c000fd52:	83 ec 0c             	sub    esp,0xc
c000fd55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd59:	83 ec 08             	sub    esp,0x8
c000fd5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd60:	50                   	push   eax
c000fd61:	e8 74 07 00 00       	call   c00104da <Device::Device(char const*)>
c000fd66:	83 c4 10             	add    esp,0x10
c000fd69:	ba 3c 0b 02 c0       	mov    edx,0xc0020b3c
c000fd6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd72:	89 10                	mov    DWORD PTR [eax],edx
c000fd74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd78:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000fd82:	90                   	nop
c000fd83:	83 c4 0c             	add    esp,0xc
c000fd86:	c3                   	ret    
c000fd87:	90                   	nop

c000fd88 <Clock::~Clock()>:
c000fd88:	83 ec 0c             	sub    esp,0xc
c000fd8b:	ba 3c 0b 02 c0       	mov    edx,0xc0020b3c
c000fd90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd94:	89 10                	mov    DWORD PTR [eax],edx
c000fd96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd9a:	83 ec 0c             	sub    esp,0xc
c000fd9d:	50                   	push   eax
c000fd9e:	e8 e9 03 00 00       	call   c001018c <Device::~Device()>
c000fda3:	83 c4 10             	add    esp,0x10
c000fda6:	90                   	nop
c000fda7:	83 c4 0c             	add    esp,0xc
c000fdaa:	c3                   	ret    
c000fdab:	90                   	nop

c000fdac <Clock::~Clock()>:
c000fdac:	83 ec 0c             	sub    esp,0xc
c000fdaf:	83 ec 0c             	sub    esp,0xc
c000fdb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdb6:	e8 cd ff ff ff       	call   c000fd88 <Clock::~Clock()>
c000fdbb:	83 c4 10             	add    esp,0x10
c000fdbe:	83 ec 08             	sub    esp,0x8
c000fdc1:	68 58 01 00 00       	push   0x158
c000fdc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdca:	e8 30 f0 ff ff       	call   c000edff <operator delete(void*, unsigned long)>
c000fdcf:	83 c4 10             	add    esp,0x10
c000fdd2:	83 c4 0c             	add    esp,0xc
c000fdd5:	c3                   	ret    

c000fdd6 <Clock::timeInSecondsLocal()>:
c000fdd6:	53                   	push   ebx
c000fdd7:	83 ec 14             	sub    esp,0x14
c000fdda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fdde:	8b 10                	mov    edx,DWORD PTR [eax]
c000fde0:	50                   	push   eax
c000fde1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fde4:	0f b6 0d e8 35 02 c0 	movzx  ecx,BYTE PTR ds:0xc00235e8
c000fdeb:	03 0d ec 35 02 c0    	add    ecx,DWORD PTR ds:0xc00235ec
c000fdf1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000fdf7:	89 cb                	mov    ebx,ecx
c000fdf9:	c1 fb 1f             	sar    ebx,0x1f
c000fdfc:	01 c8                	add    eax,ecx
c000fdfe:	11 da                	adc    edx,ebx
c000fe00:	83 c4 10             	add    esp,0x10
c000fe03:	31 c9                	xor    ecx,ecx
c000fe05:	80 3d e9 35 02 c0 00 	cmp    BYTE PTR ds:0xc00235e9,0x0
c000fe0c:	74 05                	je     c000fe13 <Clock::timeInSecondsLocal()+0x3d>
c000fe0e:	b9 08 07 00 00       	mov    ecx,0x708
c000fe13:	31 db                	xor    ebx,ebx
c000fe15:	01 c8                	add    eax,ecx
c000fe17:	11 da                	adc    edx,ebx
c000fe19:	83 c4 08             	add    esp,0x8
c000fe1c:	5b                   	pop    ebx
c000fe1d:	c3                   	ret    

c000fe1e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000fe1e:	57                   	push   edi
c000fe1f:	56                   	push   esi
c000fe20:	53                   	push   ebx
c000fe21:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fe25:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fe29:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fe2b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fe2f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000fe32:	0f b6 05 e8 35 02 c0 	movzx  eax,BYTE PTR ds:0xc00235e8
c000fe39:	03 05 ec 35 02 c0    	add    eax,DWORD PTR ds:0xc00235ec
c000fe3f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000fe45:	99                   	cdq    
c000fe46:	29 c6                	sub    esi,eax
c000fe48:	19 d7                	sbb    edi,edx
c000fe4a:	89 f0                	mov    eax,esi
c000fe4c:	89 fa                	mov    edx,edi
c000fe4e:	31 f6                	xor    esi,esi
c000fe50:	80 3d e9 35 02 c0 00 	cmp    BYTE PTR ds:0xc00235e9,0x0
c000fe57:	74 05                	je     c000fe5e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000fe59:	be 08 07 00 00       	mov    esi,0x708
c000fe5e:	31 ff                	xor    edi,edi
c000fe60:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000fe64:	29 f0                	sub    eax,esi
c000fe66:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000fe6a:	19 fa                	sbb    edx,edi
c000fe6c:	89 d8                	mov    eax,ebx
c000fe6e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000fe72:	5b                   	pop    ebx
c000fe73:	5e                   	pop    esi
c000fe74:	5f                   	pop    edi
c000fe75:	ff e0                	jmp    eax

c000fe77 <datetimeToSeconds(datetime_t)>:
c000fe77:	55                   	push   ebp
c000fe78:	57                   	push   edi
c000fe79:	56                   	push   esi
c000fe7a:	53                   	push   ebx
c000fe7b:	83 ec 14             	sub    esp,0x14
c000fe7e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000fe82:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fe86:	89 d3                	mov    ebx,edx
c000fe88:	0f b6 c6             	movzx  eax,dh
c000fe8b:	c1 eb 10             	shr    ebx,0x10
c000fe8e:	48                   	dec    eax
c000fe8f:	66 81 eb 6c 07       	sub    bx,0x76c
c000fe94:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000fe98:	0f b6 f5             	movzx  esi,ch
c000fe9b:	89 cf                	mov    edi,ecx
c000fe9d:	6b f6 3c             	imul   esi,esi,0x3c
c000fea0:	c1 ef 10             	shr    edi,0x10
c000fea3:	0f b6 c9             	movzx  ecx,cl
c000fea6:	89 f8                	mov    eax,edi
c000fea8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000feae:	0f b6 f8             	movzx  edi,al
c000feb1:	0f b6 d2             	movzx  edx,dl
c000feb4:	01 fe                	add    esi,edi
c000feb6:	01 f1                	add    ecx,esi
c000feb8:	0f b7 f3             	movzx  esi,bx
c000febb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000febf:	c1 f9 1f             	sar    ecx,0x1f
c000fec2:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000fec7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000fecb:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000fed0:	8b 0c 8d 80 0b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdf480]
c000fed7:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000fedb:	76 29                	jbe    c000ff06 <datetimeToSeconds(datetime_t)+0x8f>
c000fedd:	f6 c3 03             	test   bl,0x3
c000fee0:	75 24                	jne    c000ff06 <datetimeToSeconds(datetime_t)+0x8f>
c000fee2:	31 d2                	xor    edx,edx
c000fee4:	bf 64 00 00 00       	mov    edi,0x64
c000fee9:	89 d8                	mov    eax,ebx
c000feeb:	66 f7 f7             	div    di
c000feee:	66 85 d2             	test   dx,dx
c000fef1:	75 12                	jne    c000ff05 <datetimeToSeconds(datetime_t)+0x8e>
c000fef3:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000fef9:	bf 90 01 00 00       	mov    edi,0x190
c000fefe:	99                   	cdq    
c000feff:	f7 ff                	idiv   edi
c000ff01:	85 d2                	test   edx,edx
c000ff03:	75 01                	jne    c000ff06 <datetimeToSeconds(datetime_t)+0x8f>
c000ff05:	41                   	inc    ecx
c000ff06:	66 83 fb 46          	cmp    bx,0x46
c000ff0a:	76 45                	jbe    c000ff51 <datetimeToSeconds(datetime_t)+0xda>
c000ff0c:	bb 46 00 00 00       	mov    ebx,0x46
c000ff11:	bf 64 00 00 00       	mov    edi,0x64
c000ff16:	bd 90 01 00 00       	mov    ebp,0x190
c000ff1b:	b8 6d 01 00 00       	mov    eax,0x16d
c000ff20:	f6 c3 03             	test   bl,0x3
c000ff23:	75 23                	jne    c000ff48 <datetimeToSeconds(datetime_t)+0xd1>
c000ff25:	89 d8                	mov    eax,ebx
c000ff27:	99                   	cdq    
c000ff28:	f7 ff                	idiv   edi
c000ff2a:	b8 6e 01 00 00       	mov    eax,0x16e
c000ff2f:	85 d2                	test   edx,edx
c000ff31:	75 15                	jne    c000ff48 <datetimeToSeconds(datetime_t)+0xd1>
c000ff33:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000ff39:	99                   	cdq    
c000ff3a:	f7 fd                	idiv   ebp
c000ff3c:	83 fa 01             	cmp    edx,0x1
c000ff3f:	19 c0                	sbb    eax,eax
c000ff41:	f7 d0                	not    eax
c000ff43:	05 6e 01 00 00       	add    eax,0x16e
c000ff48:	01 c1                	add    ecx,eax
c000ff4a:	43                   	inc    ebx
c000ff4b:	39 f3                	cmp    ebx,esi
c000ff4d:	7c cc                	jl     c000ff1b <datetimeToSeconds(datetime_t)+0xa4>
c000ff4f:	eb 35                	jmp    c000ff86 <datetimeToSeconds(datetime_t)+0x10f>
c000ff51:	74 33                	je     c000ff86 <datetimeToSeconds(datetime_t)+0x10f>
c000ff53:	b8 45 00 00 00       	mov    eax,0x45
c000ff58:	89 c2                	mov    edx,eax
c000ff5a:	83 e2 03             	and    edx,0x3
c000ff5d:	39 f0                	cmp    eax,esi
c000ff5f:	7e 0f                	jle    c000ff70 <datetimeToSeconds(datetime_t)+0xf9>
c000ff61:	83 fa 01             	cmp    edx,0x1
c000ff64:	19 d2                	sbb    edx,edx
c000ff66:	48                   	dec    eax
c000ff67:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000ff6e:	eb e8                	jmp    c000ff58 <datetimeToSeconds(datetime_t)+0xe1>
c000ff70:	b8 6d 01 00 00       	mov    eax,0x16d
c000ff75:	85 d2                	test   edx,edx
c000ff77:	75 0b                	jne    c000ff84 <datetimeToSeconds(datetime_t)+0x10d>
c000ff79:	66 83 fb 01          	cmp    bx,0x1
c000ff7d:	19 c0                	sbb    eax,eax
c000ff7f:	05 6e 01 00 00       	add    eax,0x16e
c000ff84:	29 c1                	sub    ecx,eax
c000ff86:	b8 80 51 01 00       	mov    eax,0x15180
c000ff8b:	f7 e9                	imul   ecx
c000ff8d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ff91:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ff95:	83 c4 14             	add    esp,0x14
c000ff98:	5b                   	pop    ebx
c000ff99:	5e                   	pop    esi
c000ff9a:	5f                   	pop    edi
c000ff9b:	5d                   	pop    ebp
c000ff9c:	c3                   	ret    
c000ff9d:	90                   	nop

c000ff9e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000ff9e:	57                   	push   edi
c000ff9f:	56                   	push   esi
c000ffa0:	53                   	push   ebx
c000ffa1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ffa5:	8b 06                	mov    eax,DWORD PTR [esi]
c000ffa7:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000ffaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ffae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ffb2:	e8 c0 fe ff ff       	call   c000fe77 <datetimeToSeconds(datetime_t)>
c000ffb7:	59                   	pop    ecx
c000ffb8:	0f b6 0d e8 35 02 c0 	movzx  ecx,BYTE PTR ds:0xc00235e8
c000ffbf:	5b                   	pop    ebx
c000ffc0:	03 0d ec 35 02 c0    	add    ecx,DWORD PTR ds:0xc00235ec
c000ffc6:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000ffcc:	89 cb                	mov    ebx,ecx
c000ffce:	c1 fb 1f             	sar    ebx,0x1f
c000ffd1:	29 c8                	sub    eax,ecx
c000ffd3:	19 da                	sbb    edx,ebx
c000ffd5:	31 c9                	xor    ecx,ecx
c000ffd7:	80 3d e9 35 02 c0 00 	cmp    BYTE PTR ds:0xc00235e9,0x0
c000ffde:	74 05                	je     c000ffe5 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000ffe0:	b9 08 07 00 00       	mov    ecx,0x708
c000ffe5:	31 db                	xor    ebx,ebx
c000ffe7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000ffeb:	29 c8                	sub    eax,ecx
c000ffed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000fff1:	19 da                	sbb    edx,ebx
c000fff3:	89 f8                	mov    eax,edi
c000fff5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000fff9:	5b                   	pop    ebx
c000fffa:	5e                   	pop    esi
c000fffb:	5f                   	pop    edi
c000fffc:	ff e0                	jmp    eax

c000fffe <secondsToDatetime(unsigned long long)>:
c000fffe:	55                   	push   ebp
c000ffff:	57                   	push   edi
c0010000:	56                   	push   esi
c0010001:	53                   	push   ebx
c0010002:	83 ec 1c             	sub    esp,0x1c
c0010005:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010009:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001000d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0010011:	6a 00                	push   0x0
c0010013:	68 80 51 01 00       	push   0x15180
c0010018:	55                   	push   ebp
c0010019:	57                   	push   edi
c001001a:	e8 ad e5 00 00       	call   c001e5cc <__udivdi3>
c001001f:	83 c4 10             	add    esp,0x10
c0010022:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0010028:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001002c:	6a 00                	push   0x0
c001002e:	68 80 51 01 00       	push   0x15180
c0010033:	55                   	push   ebp
c0010034:	57                   	push   edi
c0010035:	bf 10 0e 00 00       	mov    edi,0xe10
c001003a:	e8 8d e6 00 00       	call   c001e6cc <__umoddi3>
c001003f:	83 c4 10             	add    esp,0x10
c0010042:	99                   	cdq    
c0010043:	f7 ff                	idiv   edi
c0010045:	bf 3c 00 00 00       	mov    edi,0x3c
c001004a:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001004d:	89 d0                	mov    eax,edx
c001004f:	99                   	cdq    
c0010050:	f7 ff                	idiv   edi
c0010052:	85 db                	test   ebx,ebx
c0010054:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0010057:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001005a:	79 11                	jns    c001006d <secondsToDatetime(unsigned long long)+0x6f>
c001005c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010060:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0010066:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001006b:	eb 07                	jmp    c0010074 <secondsToDatetime(unsigned long long)+0x76>
c001006d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0010072:	89 d8                	mov    eax,ebx
c0010074:	bf b4 05 00 00       	mov    edi,0x5b4
c0010079:	99                   	cdq    
c001007a:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001007f:	f7 f9                	idiv   ecx
c0010081:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0010086:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001008a:	31 d2                	xor    edx,edx
c001008c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0010094:	01 c3                	add    ebx,eax
c0010096:	89 d8                	mov    eax,ebx
c0010098:	f7 f1                	div    ecx
c001009a:	31 d2                	xor    edx,edx
c001009c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001009f:	89 d8                	mov    eax,ebx
c00100a1:	f7 f7                	div    edi
c00100a3:	31 d2                	xor    edx,edx
c00100a5:	29 c1                	sub    ecx,eax
c00100a7:	89 d8                	mov    eax,ebx
c00100a9:	f7 f5                	div    ebp
c00100ab:	bd 6d 01 00 00       	mov    ebp,0x16d
c00100b0:	29 c1                	sub    ecx,eax
c00100b2:	31 d2                	xor    edx,edx
c00100b4:	89 c8                	mov    eax,ecx
c00100b6:	f7 f5                	div    ebp
c00100b8:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00100bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100c1:	31 d2                	xor    edx,edx
c00100c3:	89 c8                	mov    eax,ecx
c00100c5:	f7 f5                	div    ebp
c00100c7:	31 d2                	xor    edx,edx
c00100c9:	01 c3                	add    ebx,eax
c00100cb:	89 c8                	mov    eax,ecx
c00100cd:	f7 f7                	div    edi
c00100cf:	bf 99 00 00 00       	mov    edi,0x99
c00100d4:	29 c3                	sub    ebx,eax
c00100d6:	31 d2                	xor    edx,edx
c00100d8:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00100e0:	29 c3                	sub    ebx,eax
c00100e2:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00100e5:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00100e8:	bb 05 00 00 00       	mov    ebx,0x5
c00100ed:	83 c1 02             	add    ecx,0x2
c00100f0:	89 c8                	mov    eax,ecx
c00100f2:	f7 f7                	div    edi
c00100f4:	31 d2                	xor    edx,edx
c00100f6:	89 c7                	mov    edi,eax
c00100f8:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00100fe:	83 c0 02             	add    eax,0x2
c0010101:	f7 f3                	div    ebx
c0010103:	89 eb                	mov    ebx,ebp
c0010105:	29 c3                	sub    ebx,eax
c0010107:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001010d:	88 1e                	mov    BYTE PTR [esi],bl
c001010f:	19 c0                	sbb    eax,eax
c0010111:	31 d2                	xor    edx,edx
c0010113:	83 e0 0c             	and    eax,0xc
c0010116:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001011a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0010122:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0010126:	83 f9 01             	cmp    ecx,0x1
c0010129:	0f 96 c2             	setbe  dl
c001012c:	41                   	inc    ecx
c001012d:	01 d0                	add    eax,edx
c001012f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0010132:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0010136:	83 c4 1c             	add    esp,0x1c
c0010139:	89 f0                	mov    eax,esi
c001013b:	5b                   	pop    ebx
c001013c:	5e                   	pop    esi
c001013d:	5f                   	pop    edi
c001013e:	5d                   	pop    ebp
c001013f:	c2 04 00             	ret    0x4

c0010142 <Clock::timeInDatetimeLocal()>:
c0010142:	53                   	push   ebx
c0010143:	83 ec 14             	sub    esp,0x14
c0010146:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001014a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001014e:	e8 83 fc ff ff       	call   c000fdd6 <Clock::timeInSecondsLocal()>
c0010153:	83 c4 0c             	add    esp,0xc
c0010156:	52                   	push   edx
c0010157:	50                   	push   eax
c0010158:	53                   	push   ebx
c0010159:	e8 a0 fe ff ff       	call   c000fffe <secondsToDatetime(unsigned long long)>
c001015e:	89 d8                	mov    eax,ebx
c0010160:	83 c4 14             	add    esp,0x14
c0010163:	5b                   	pop    ebx
c0010164:	c2 04 00             	ret    0x4
c0010167:	90                   	nop

c0010168 <Device::hibernate()>:
c0010168:	c3                   	ret    
c0010169:	90                   	nop

c001016a <Device::wake()>:
c001016a:	c3                   	ret    
c001016b:	90                   	nop

c001016c <Device::detect()>:
c001016c:	c3                   	ret    
c001016d:	90                   	nop

c001016e <Device::disableLegacy()>:
c001016e:	c3                   	ret    
c001016f:	90                   	nop

c0010170 <Device::powerSaving(PowerSavingLevel)>:
c0010170:	c3                   	ret    
c0010171:	90                   	nop

c0010172 <DriverlessDevice::close(int, int, void*)>:
c0010172:	31 c0                	xor    eax,eax
c0010174:	c3                   	ret    
c0010175:	90                   	nop

c0010176 <DriverlessDevice::detect()>:
c0010176:	c3                   	ret    
c0010177:	90                   	nop

c0010178 <DriverlessDevice::open(int, int, void*)>:
c0010178:	83 ec 18             	sub    esp,0x18
c001017b:	68 b0 0b 02 c0       	push   0xc0020bb0
c0010180:	e8 ef 49 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c0010185:	83 c8 ff             	or     eax,0xffffffff
c0010188:	83 c4 1c             	add    esp,0x1c
c001018b:	c3                   	ret    

c001018c <Device::~Device()>:
c001018c:	ba d8 0b 02 c0       	mov    edx,0xc0020bd8
c0010191:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010195:	89 10                	mov    DWORD PTR [eax],edx
c0010197:	90                   	nop
c0010198:	c3                   	ret    
c0010199:	90                   	nop

c001019a <Device::~Device()>:
c001019a:	83 ec 0c             	sub    esp,0xc
c001019d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00101a1:	e8 e6 ff ff ff       	call   c001018c <Device::~Device()>
c00101a6:	83 c4 04             	add    esp,0x4
c00101a9:	83 ec 08             	sub    esp,0x8
c00101ac:	68 58 01 00 00       	push   0x158
c00101b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101b5:	e8 45 ec ff ff       	call   c000edff <operator delete(void*, unsigned long)>
c00101ba:	83 c4 10             	add    esp,0x10
c00101bd:	83 c4 0c             	add    esp,0xc
c00101c0:	c3                   	ret    
c00101c1:	90                   	nop

c00101c2 <Device::findAndLoadDriver()>:
c00101c2:	c3                   	ret    
c00101c3:	90                   	nop

c00101c4 <Device::preOpenPCI(PCIDeviceInfo)>:
c00101c4:	57                   	push   edi
c00101c5:	b9 09 00 00 00       	mov    ecx,0x9
c00101ca:	56                   	push   esi
c00101cb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101cf:	8d 74 24 10          	lea    esi,[esp+0x10]
c00101d3:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00101dd:	81 c7 18 01 00 00    	add    edi,0x118
c00101e3:	fc                   	cld    
c00101e4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00101e6:	5e                   	pop    esi
c00101e7:	5f                   	pop    edi
c00101e8:	c3                   	ret    
c00101e9:	90                   	nop

c00101ea <Device::preOpenACPI(void*, char*, char*)>:
c00101ea:	56                   	push   esi
c00101eb:	53                   	push   ebx
c00101ec:	83 ec 08             	sub    esp,0x8
c00101ef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00101f3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00101f7:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0010201:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010205:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001020b:	6a 1e                	push   0x1e
c001020d:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0010213:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010217:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001021d:	50                   	push   eax
c001021e:	e8 af 03 ff ff       	call   c00005d2 <memcpy>
c0010223:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010227:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001022b:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0010233:	83 c4 14             	add    esp,0x14
c0010236:	5b                   	pop    ebx
c0010237:	5e                   	pop    esi
c0010238:	e9 95 03 ff ff       	jmp    c00005d2 <memcpy>
c001023d:	90                   	nop

c001023e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001023e:	55                   	push   ebp
c001023f:	57                   	push   edi
c0010240:	56                   	push   esi
c0010241:	53                   	push   ebx
c0010242:	83 ec 0c             	sub    esp,0xc
c0010245:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010249:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001024d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010251:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010255:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c001025a:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0010261:	75 0b                	jne    c001026e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c0010263:	8b 00                	mov    eax,DWORD PTR [eax]
c0010265:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0010269:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001026c:	eb 24                	jmp    c0010292 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c001026e:	e8 fb 3b 00 00       	call   c0013e6e <thisCPU()>
c0010273:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0010279:	8b 10                	mov    edx,DWORD PTR [eax]
c001027b:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001027f:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0010283:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0010287:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001028b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001028f:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0010292:	83 c4 0c             	add    esp,0xc
c0010295:	5b                   	pop    ebx
c0010296:	5e                   	pop    esi
c0010297:	5f                   	pop    edi
c0010298:	5d                   	pop    ebp
c0010299:	ff e0                	jmp    eax
c001029b:	90                   	nop

c001029c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001029c:	57                   	push   edi
c001029d:	56                   	push   esi
c001029e:	53                   	push   ebx
c001029f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102a3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00102a7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00102ab:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00102b0:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00102b7:	75 0b                	jne    c00102c4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c00102b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00102bb:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00102bf:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00102c2:	eb 20                	jmp    c00102e4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c00102c4:	e8 a5 3b 00 00       	call   c0013e6e <thisCPU()>
c00102c9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00102cf:	8b 10                	mov    edx,DWORD PTR [eax]
c00102d1:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00102d5:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00102d9:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00102dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00102e1:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c00102e4:	5b                   	pop    ebx
c00102e5:	5e                   	pop    esi
c00102e6:	5f                   	pop    edi
c00102e7:	ff e0                	jmp    eax
c00102e9:	90                   	nop

c00102ea <Device::addChild(Device*)>:
c00102ea:	53                   	push   ebx
c00102eb:	83 ec 08             	sub    esp,0x8
c00102ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00102f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102f6:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00102fc:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0010302:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010304:	85 d2                	test   edx,edx
c0010306:	74 04                	je     c001030c <Device::addChild(Device*)+0x22>
c0010308:	89 d3                	mov    ebx,edx
c001030a:	eb f6                	jmp    c0010302 <Device::addChild(Device*)+0x18>
c001030c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001030f:	83 ec 0c             	sub    esp,0xc
c0010312:	6a 08                	push   0x8
c0010314:	e8 d7 ea ff ff       	call   c000edf0 <operator new(unsigned long)>
c0010319:	89 03                	mov    DWORD PTR [ebx],eax
c001031b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010321:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010328:	83 c4 18             	add    esp,0x18
c001032b:	5b                   	pop    ebx
c001032c:	c3                   	ret    
c001032d:	90                   	nop

c001032e <Device::removeAllChildren()>:
c001032e:	56                   	push   esi
c001032f:	53                   	push   ebx
c0010330:	52                   	push   edx
c0010331:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010335:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001033b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001033e:	74 17                	je     c0010357 <Device::removeAllChildren()+0x29>
c0010340:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0010343:	85 c0                	test   eax,eax
c0010345:	74 0c                	je     c0010353 <Device::removeAllChildren()+0x25>
c0010347:	83 ec 0c             	sub    esp,0xc
c001034a:	8b 10                	mov    edx,DWORD PTR [eax]
c001034c:	50                   	push   eax
c001034d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0010350:	83 c4 10             	add    esp,0x10
c0010353:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010355:	eb e4                	jmp    c001033b <Device::removeAllChildren()+0xd>
c0010357:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001035d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010363:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0010369:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010370:	58                   	pop    eax
c0010371:	5b                   	pop    ebx
c0010372:	5e                   	pop    esi
c0010373:	c3                   	ret    

c0010374 <Device::hibernateAll()>:
c0010374:	53                   	push   ebx
c0010375:	83 ec 14             	sub    esp,0x14
c0010378:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001037c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001037e:	53                   	push   ebx
c001037f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0010382:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010388:	83 c4 10             	add    esp,0x10
c001038b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001038e:	74 0f                	je     c001039f <Device::hibernateAll()+0x2b>
c0010390:	83 ec 0c             	sub    esp,0xc
c0010393:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010396:	e8 d9 ff ff ff       	call   c0010374 <Device::hibernateAll()>
c001039b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001039d:	eb e9                	jmp    c0010388 <Device::hibernateAll()+0x14>
c001039f:	83 c4 08             	add    esp,0x8
c00103a2:	5b                   	pop    ebx
c00103a3:	c3                   	ret    

c00103a4 <Device::wakeAll()>:
c00103a4:	53                   	push   ebx
c00103a5:	83 ec 14             	sub    esp,0x14
c00103a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00103ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00103ae:	53                   	push   ebx
c00103af:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00103b2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00103b8:	83 c4 10             	add    esp,0x10
c00103bb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00103be:	74 0f                	je     c00103cf <Device::wakeAll()+0x2b>
c00103c0:	83 ec 0c             	sub    esp,0xc
c00103c3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00103c6:	e8 d9 ff ff ff       	call   c00103a4 <Device::wakeAll()>
c00103cb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00103cd:	eb e9                	jmp    c00103b8 <Device::wakeAll()+0x14>
c00103cf:	83 c4 08             	add    esp,0x8
c00103d2:	5b                   	pop    ebx
c00103d3:	c3                   	ret    

c00103d4 <Device::detectAll()>:
c00103d4:	53                   	push   ebx
c00103d5:	83 ec 14             	sub    esp,0x14
c00103d8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00103dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00103de:	53                   	push   ebx
c00103df:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00103e2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00103e8:	83 c4 10             	add    esp,0x10
c00103eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00103ee:	74 0f                	je     c00103ff <Device::detectAll()+0x2b>
c00103f0:	83 ec 0c             	sub    esp,0xc
c00103f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00103f6:	e8 d9 ff ff ff       	call   c00103d4 <Device::detectAll()>
c00103fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00103fd:	eb e9                	jmp    c00103e8 <Device::detectAll()+0x14>
c00103ff:	83 c4 08             	add    esp,0x8
c0010402:	5b                   	pop    ebx
c0010403:	c3                   	ret    

c0010404 <Device::disableLegacyAll()>:
c0010404:	53                   	push   ebx
c0010405:	83 ec 14             	sub    esp,0x14
c0010408:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001040c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001040e:	53                   	push   ebx
c001040f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0010412:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010418:	83 c4 10             	add    esp,0x10
c001041b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001041e:	74 0f                	je     c001042f <Device::disableLegacyAll()+0x2b>
c0010420:	83 ec 0c             	sub    esp,0xc
c0010423:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010426:	e8 d9 ff ff ff       	call   c0010404 <Device::disableLegacyAll()>
c001042b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001042d:	eb e9                	jmp    c0010418 <Device::disableLegacyAll()+0x14>
c001042f:	83 c4 08             	add    esp,0x8
c0010432:	5b                   	pop    ebx
c0010433:	c3                   	ret    

c0010434 <Device::loadDriversForAll()>:
c0010434:	53                   	push   ebx
c0010435:	83 ec 08             	sub    esp,0x8
c0010438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001043c:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010442:	8b 18                	mov    ebx,DWORD PTR [eax]
c0010444:	85 db                	test   ebx,ebx
c0010446:	74 12                	je     c001045a <Device::loadDriversForAll()+0x26>
c0010448:	83 ec 0c             	sub    esp,0xc
c001044b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001044e:	e8 e1 ff ff ff       	call   c0010434 <Device::loadDriversForAll()>
c0010453:	83 c4 10             	add    esp,0x10
c0010456:	89 d8                	mov    eax,ebx
c0010458:	eb e8                	jmp    c0010442 <Device::loadDriversForAll()+0xe>
c001045a:	83 c4 08             	add    esp,0x8
c001045d:	5b                   	pop    ebx
c001045e:	c3                   	ret    
c001045f:	90                   	nop

c0010460 <Device::closeAll()>:
c0010460:	53                   	push   ebx
c0010461:	83 ec 08             	sub    esp,0x8
c0010464:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010468:	8b 03                	mov    eax,DWORD PTR [ebx]
c001046a:	6a 00                	push   0x0
c001046c:	6a 00                	push   0x0
c001046e:	6a 00                	push   0x0
c0010470:	53                   	push   ebx
c0010471:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010474:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001047a:	83 c4 10             	add    esp,0x10
c001047d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010480:	74 0f                	je     c0010491 <Device::closeAll()+0x31>
c0010482:	83 ec 0c             	sub    esp,0xc
c0010485:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010488:	e8 d3 ff ff ff       	call   c0010460 <Device::closeAll()>
c001048d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001048f:	eb e9                	jmp    c001047a <Device::closeAll()+0x1a>
c0010491:	83 c4 08             	add    esp,0x8
c0010494:	5b                   	pop    ebx
c0010495:	c3                   	ret    

c0010496 <Device::powerSavingAll(PowerSavingLevel)>:
c0010496:	56                   	push   esi
c0010497:	53                   	push   ebx
c0010498:	83 ec 0c             	sub    esp,0xc
c001049b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001049f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00104a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00104a5:	56                   	push   esi
c00104a6:	53                   	push   ebx
c00104a7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00104aa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00104b0:	83 c4 10             	add    esp,0x10
c00104b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00104b6:	74 0f                	je     c00104c7 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00104b8:	52                   	push   edx
c00104b9:	52                   	push   edx
c00104ba:	56                   	push   esi
c00104bb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00104be:	e8 d3 ff ff ff       	call   c0010496 <Device::powerSavingAll(PowerSavingLevel)>
c00104c3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00104c5:	eb e9                	jmp    c00104b0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00104c7:	58                   	pop    eax
c00104c8:	5b                   	pop    ebx
c00104c9:	5e                   	pop    esi
c00104ca:	c3                   	ret    
c00104cb:	90                   	nop

c00104cc <Device::setName(char const*)>:
c00104cc:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00104d4:	e9 ce 01 ff ff       	jmp    c00006a7 <strcpy>
c00104d9:	90                   	nop

c00104da <Device::Device(char const*)>:
c00104da:	83 ec 0c             	sub    esp,0xc
c00104dd:	ba d8 0b 02 c0       	mov    edx,0xc0020bd8
c00104e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e6:	89 10                	mov    DWORD PTR [eax],edx
c00104e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ec:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00104f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fa:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010508:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010516:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0010520:	83 ec 08             	sub    esp,0x8
c0010523:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001052b:	e8 9c ff ff ff       	call   c00104cc <Device::setName(char const*)>
c0010530:	83 c4 10             	add    esp,0x10
c0010533:	83 ec 0c             	sub    esp,0xc
c0010536:	6a 08                	push   0x8
c0010538:	e8 b3 e8 ff ff       	call   c000edf0 <operator new(unsigned long)>
c001053d:	83 c4 10             	add    esp,0x10
c0010540:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010546:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001054d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010551:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0010557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001055b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010561:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001056b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010571:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001057c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0010583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010587:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001058e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010592:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001059c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105a0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00105aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105ae:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00105b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105bc:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00105c6:	90                   	nop
c00105c7:	83 c4 0c             	add    esp,0xc
c00105ca:	c3                   	ret    
c00105cb:	90                   	nop

c00105cc <Device::getName()>:
c00105cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105d0:	05 d0 00 00 00       	add    eax,0xd0
c00105d5:	c3                   	ret    

c00105d6 <DriverlessDevice::DriverlessDevice(char const*)>:
c00105d6:	83 ec 0c             	sub    esp,0xc
c00105d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105dd:	83 ec 08             	sub    esp,0x8
c00105e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105e4:	50                   	push   eax
c00105e5:	e8 f0 fe ff ff       	call   c00104da <Device::Device(char const*)>
c00105ea:	83 c4 10             	add    esp,0x10
c00105ed:	ba 04 0c 02 c0       	mov    edx,0xc0020c04
c00105f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105f6:	89 10                	mov    DWORD PTR [eax],edx
c00105f8:	90                   	nop
c00105f9:	83 c4 0c             	add    esp,0xc
c00105fc:	c3                   	ret    
c00105fd:	90                   	nop

c00105fe <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00105fe:	57                   	push   edi
c00105ff:	56                   	push   esi
c0010600:	53                   	push   ebx
c0010601:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010605:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010609:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001060d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0010613:	75 0c                	jne    c0010621 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0010615:	52                   	push   edx
c0010616:	52                   	push   edx
c0010617:	53                   	push   ebx
c0010618:	56                   	push   esi
c0010619:	e8 c6 e4 00 00       	call   c001eae4 <LinkedList<Device>::addElement(Device*)>
c001061e:	83 c4 10             	add    esp,0x10
c0010621:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010627:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001062a:	74 12                	je     c001063e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001062c:	50                   	push   eax
c001062d:	57                   	push   edi
c001062e:	56                   	push   esi
c001062f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010632:	e8 c7 ff ff ff       	call   c00105fe <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0010637:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010639:	83 c4 10             	add    esp,0x10
c001063c:	eb e9                	jmp    c0010627 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001063e:	5b                   	pop    ebx
c001063f:	5e                   	pop    esi
c0010640:	5f                   	pop    edi
c0010641:	c3                   	ret    

c0010642 <getDevicesOfType(DeviceType)>:
c0010642:	53                   	push   ebx
c0010643:	83 ec 14             	sub    esp,0x14
c0010646:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001064a:	53                   	push   ebx
c001064b:	e8 70 e5 00 00       	call   c001ebc0 <LinkedList<Device>::LinkedList()>
c0010650:	83 c4 0c             	add    esp,0xc
c0010653:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010657:	53                   	push   ebx
c0010658:	ff 35 08 35 02 c0    	push   DWORD PTR ds:0xc0023508
c001065e:	e8 9b ff ff ff       	call   c00105fe <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0010663:	89 d8                	mov    eax,ebx
c0010665:	83 c4 18             	add    esp,0x18
c0010668:	5b                   	pop    ebx
c0010669:	c2 04 00             	ret    0x4

c001066c <HardDiskController::HardDiskController(char const*)>:
c001066c:	83 ec 0c             	sub    esp,0xc
c001066f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010673:	83 ec 08             	sub    esp,0x8
c0010676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001067a:	50                   	push   eax
c001067b:	e8 5a fe ff ff       	call   c00104da <Device::Device(char const*)>
c0010680:	83 c4 10             	add    esp,0x10
c0010683:	ba 30 0c 02 c0       	mov    edx,0xc0020c30
c0010688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001068c:	89 10                	mov    DWORD PTR [eax],edx
c001068e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010692:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001069c:	90                   	nop
c001069d:	83 c4 0c             	add    esp,0xc
c00106a0:	c3                   	ret    
c00106a1:	90                   	nop

c00106a2 <HardDiskController::~HardDiskController()>:
c00106a2:	83 ec 0c             	sub    esp,0xc
c00106a5:	ba 30 0c 02 c0       	mov    edx,0xc0020c30
c00106aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ae:	89 10                	mov    DWORD PTR [eax],edx
c00106b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106b4:	83 ec 0c             	sub    esp,0xc
c00106b7:	50                   	push   eax
c00106b8:	e8 cf fa ff ff       	call   c001018c <Device::~Device()>
c00106bd:	83 c4 10             	add    esp,0x10
c00106c0:	90                   	nop
c00106c1:	83 c4 0c             	add    esp,0xc
c00106c4:	c3                   	ret    
c00106c5:	90                   	nop

c00106c6 <HardDiskController::~HardDiskController()>:
c00106c6:	83 ec 0c             	sub    esp,0xc
c00106c9:	83 ec 0c             	sub    esp,0xc
c00106cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106d0:	e8 cd ff ff ff       	call   c00106a2 <HardDiskController::~HardDiskController()>
c00106d5:	83 c4 10             	add    esp,0x10
c00106d8:	83 ec 08             	sub    esp,0x8
c00106db:	68 58 01 00 00       	push   0x158
c00106e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106e4:	e8 16 e7 ff ff       	call   c000edff <operator delete(void*, unsigned long)>
c00106e9:	83 c4 10             	add    esp,0x10
c00106ec:	83 c4 0c             	add    esp,0xc
c00106ef:	c3                   	ret    

c00106f0 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00106f0:	83 ec 0c             	sub    esp,0xc
c00106f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106f7:	83 ec 08             	sub    esp,0x8
c00106fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106fe:	50                   	push   eax
c00106ff:	e8 d6 fd ff ff       	call   c00104da <Device::Device(char const*)>
c0010704:	83 c4 10             	add    esp,0x10
c0010707:	ba 5c 0c 02 c0       	mov    edx,0xc0020c5c
c001070c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010710:	89 10                	mov    DWORD PTR [eax],edx
c0010712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010716:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001071d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010721:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0010728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001072c:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0010736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001073a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001073e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0010744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010748:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010752:	90                   	nop
c0010753:	83 c4 0c             	add    esp,0xc
c0010756:	c3                   	ret    
c0010757:	90                   	nop

c0010758 <PhysicalDisk::startCache()>:
c0010758:	56                   	push   esi
c0010759:	53                   	push   ebx
c001075a:	83 ec 10             	sub    esp,0x10
c001075d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010761:	6a 30                	push   0x30
c0010763:	e8 88 e6 ff ff       	call   c000edf0 <operator new(unsigned long)>
c0010768:	89 c6                	mov    esi,eax
c001076a:	58                   	pop    eax
c001076b:	5a                   	pop    edx
c001076c:	53                   	push   ebx
c001076d:	56                   	push   esi
c001076e:	e8 6d 1e 00 00       	call   c00125e0 <VCache::VCache(PhysicalDisk*)>
c0010773:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0010779:	83 c4 14             	add    esp,0x14
c001077c:	5b                   	pop    ebx
c001077d:	5e                   	pop    esi
c001077e:	c3                   	ret    
c001077f:	90                   	nop

c0010780 <PhysicalDisk::~PhysicalDisk()>:
c0010780:	83 ec 0c             	sub    esp,0xc
c0010783:	ba 5c 0c 02 c0       	mov    edx,0xc0020c5c
c0010788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001078c:	89 10                	mov    DWORD PTR [eax],edx
c001078e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010792:	83 ec 0c             	sub    esp,0xc
c0010795:	50                   	push   eax
c0010796:	e8 f1 f9 ff ff       	call   c001018c <Device::~Device()>
c001079b:	83 c4 10             	add    esp,0x10
c001079e:	90                   	nop
c001079f:	83 c4 0c             	add    esp,0xc
c00107a2:	c3                   	ret    
c00107a3:	90                   	nop

c00107a4 <PhysicalDisk::~PhysicalDisk()>:
c00107a4:	83 ec 0c             	sub    esp,0xc
c00107a7:	83 ec 0c             	sub    esp,0xc
c00107aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107ae:	e8 cd ff ff ff       	call   c0010780 <PhysicalDisk::~PhysicalDisk()>
c00107b3:	83 c4 10             	add    esp,0x10
c00107b6:	83 ec 08             	sub    esp,0x8
c00107b9:	68 6c 01 00 00       	push   0x16c
c00107be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107c2:	e8 38 e6 ff ff       	call   c000edff <operator delete(void*, unsigned long)>
c00107c7:	83 c4 10             	add    esp,0x10
c00107ca:	83 c4 0c             	add    esp,0xc
c00107cd:	c3                   	ret    

c00107ce <FPU::FPU(char const*)>:
c00107ce:	83 ec 0c             	sub    esp,0xc
c00107d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107d5:	83 ec 08             	sub    esp,0x8
c00107d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107dc:	50                   	push   eax
c00107dd:	e8 f8 fc ff ff       	call   c00104da <Device::Device(char const*)>
c00107e2:	83 c4 10             	add    esp,0x10
c00107e5:	ba 9c 0c 02 c0       	mov    edx,0xc0020c9c
c00107ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107ee:	89 10                	mov    DWORD PTR [eax],edx
c00107f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107f4:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00107fe:	90                   	nop
c00107ff:	83 c4 0c             	add    esp,0xc
c0010802:	c3                   	ret    
c0010803:	90                   	nop

c0010804 <FPU::~FPU()>:
c0010804:	83 ec 0c             	sub    esp,0xc
c0010807:	ba 9c 0c 02 c0       	mov    edx,0xc0020c9c
c001080c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010810:	89 10                	mov    DWORD PTR [eax],edx
c0010812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010816:	83 ec 0c             	sub    esp,0xc
c0010819:	50                   	push   eax
c001081a:	e8 6d f9 ff ff       	call   c001018c <Device::~Device()>
c001081f:	83 c4 10             	add    esp,0x10
c0010822:	90                   	nop
c0010823:	83 c4 0c             	add    esp,0xc
c0010826:	c3                   	ret    
c0010827:	90                   	nop

c0010828 <FPU::~FPU()>:
c0010828:	83 ec 0c             	sub    esp,0xc
c001082b:	83 ec 0c             	sub    esp,0xc
c001082e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010832:	e8 cd ff ff ff       	call   c0010804 <FPU::~FPU()>
c0010837:	83 c4 10             	add    esp,0x10
c001083a:	83 ec 08             	sub    esp,0x8
c001083d:	68 58 01 00 00       	push   0x158
c0010842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010846:	e8 b4 e5 ff ff       	call   c000edff <operator delete(void*, unsigned long)>
c001084b:	83 c4 10             	add    esp,0x10
c001084e:	83 c4 0c             	add    esp,0xc
c0010851:	c3                   	ret    

c0010852 <setupFPU()>:
c0010852:	53                   	push   ebx
c0010853:	83 ec 08             	sub    esp,0x8
c0010856:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c001085b:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010862:	74 19                	je     c001087d <setupFPU()+0x2b>
c0010864:	83 ec 0c             	sub    esp,0xc
c0010867:	68 58 01 00 00       	push   0x158
c001086c:	e8 7f e5 ff ff       	call   c000edf0 <operator new(unsigned long)>
c0010871:	89 c3                	mov    ebx,eax
c0010873:	89 04 24             	mov    DWORD PTR [esp],eax
c0010876:	e8 21 ca 00 00       	call   c001d29c <AVX::AVX()>
c001087b:	eb 5b                	jmp    c00108d8 <setupFPU()+0x86>
c001087d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010883:	84 c0                	test   al,al
c0010885:	79 19                	jns    c00108a0 <setupFPU()+0x4e>
c0010887:	83 ec 0c             	sub    esp,0xc
c001088a:	68 58 01 00 00       	push   0x158
c001088f:	e8 5c e5 ff ff       	call   c000edf0 <operator new(unsigned long)>
c0010894:	89 c3                	mov    ebx,eax
c0010896:	89 04 24             	mov    DWORD PTR [esp],eax
c0010899:	e8 24 cb 00 00       	call   c001d3c2 <SSE::SSE()>
c001089e:	eb 38                	jmp    c00108d8 <setupFPU()+0x86>
c00108a0:	a8 20                	test   al,0x20
c00108a2:	74 19                	je     c00108bd <setupFPU()+0x6b>
c00108a4:	83 ec 0c             	sub    esp,0xc
c00108a7:	68 58 01 00 00       	push   0x158
c00108ac:	e8 3f e5 ff ff       	call   c000edf0 <operator new(unsigned long)>
c00108b1:	89 c3                	mov    ebx,eax
c00108b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00108b6:	e8 71 ca 00 00       	call   c001d32c <MMX::MMX()>
c00108bb:	eb 1b                	jmp    c00108d8 <setupFPU()+0x86>
c00108bd:	a8 10                	test   al,0x10
c00108bf:	74 1c                	je     c00108dd <setupFPU()+0x8b>
c00108c1:	83 ec 0c             	sub    esp,0xc
c00108c4:	68 58 01 00 00       	push   0x158
c00108c9:	e8 22 e5 ff ff       	call   c000edf0 <operator new(unsigned long)>
c00108ce:	89 c3                	mov    ebx,eax
c00108d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00108d3:	e8 78 cb 00 00       	call   c001d450 <x87::x87()>
c00108d8:	83 c4 10             	add    esp,0x10
c00108db:	eb 2c                	jmp    c0010909 <setupFPU()+0xb7>
c00108dd:	83 ec 0c             	sub    esp,0xc
c00108e0:	31 db                	xor    ebx,ebx
c00108e2:	68 88 0c 02 c0       	push   0xc0020c88
c00108e7:	e8 f3 e5 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c00108ec:	e8 7d 35 00 00       	call   c0013e6e <thisCPU()>
c00108f1:	e8 78 35 00 00       	call   c0013e6e <thisCPU()>
c00108f6:	e8 1d e3 00 00       	call   c001ec18 <CPU::readCR0()>
c00108fb:	83 c8 04             	or     eax,0x4
c00108fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0010901:	e8 24 e3 00 00       	call   c001ec2a <CPU::writeCR0(unsigned long)>
c0010906:	83 c4 10             	add    esp,0x10
c0010909:	89 d8                	mov    eax,ebx
c001090b:	83 c4 08             	add    esp,0x8
c001090e:	5b                   	pop    ebx
c001090f:	c3                   	ret    

c0010910 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010914:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010918:	c1 e0 04             	shl    eax,0x4
c001091b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001091f:	8d 50 10             	lea    edx,[eax+0x10]
c0010922:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010928:	74 08                	je     c0010932 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001092a:	83 c0 04             	add    eax,0x4
c001092d:	39 d0                	cmp    eax,edx
c001092f:	75 f1                	jne    c0010922 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010931:	c3                   	ret    
c0010932:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001093c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010946:	eb e2                	jmp    c001092a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010948 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010948:	57                   	push   edi
c0010949:	31 c0                	xor    eax,eax
c001094b:	56                   	push   esi
c001094c:	53                   	push   ebx
c001094d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010951:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010955:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010959:	89 da                	mov    edx,ebx
c001095b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001095f:	c1 e2 04             	shl    edx,0x4
c0010962:	01 ca                	add    edx,ecx
c0010964:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001096c:	74 16                	je     c0010984 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001096e:	40                   	inc    eax
c001096f:	83 f8 04             	cmp    eax,0x4
c0010972:	75 f0                	jne    c0010964 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010974:	c7 44 24 10 cc 0c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020ccc
c001097c:	5b                   	pop    ebx
c001097d:	5e                   	pop    esi
c001097e:	5f                   	pop    edi
c001097f:	e9 f0 41 00 00       	jmp    c0014b74 <Krnl::panic(char const*)>
c0010984:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010987:	8d 04 81             	lea    eax,[ecx+eax*4]
c001098a:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010990:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010996:	5b                   	pop    ebx
c0010997:	5e                   	pop    esi
c0010998:	5f                   	pop    edi
c0010999:	c3                   	ret    

c001099a <doubleFault(regs*, void*)>:
c001099a:	c7 44 24 04 fc 0d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020dfc
c00109a2:	e9 cd 41 00 00       	jmp    c0014b74 <Krnl::panic(char const*)>
c00109a7:	90                   	nop

c00109a8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00109a8:	56                   	push   esi
c00109a9:	53                   	push   ebx
c00109aa:	50                   	push   eax
c00109ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00109af:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00109b3:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00109b8:	75 35                	jne    c00109ef <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00109ba:	8d 43 20             	lea    eax,[ebx+0x20]
c00109bd:	31 d2                	xor    edx,edx
c00109bf:	89 c1                	mov    ecx,eax
c00109c1:	c1 e1 04             	shl    ecx,0x4
c00109c4:	01 f1                	add    ecx,esi
c00109c6:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00109ce:	74 3e                	je     c0010a0e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00109d0:	42                   	inc    edx
c00109d1:	83 fa 04             	cmp    edx,0x4
c00109d4:	75 f0                	jne    c00109c6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00109d6:	83 ec 0c             	sub    esp,0xc
c00109d9:	68 40 0d 02 c0       	push   0xc0020d40
c00109de:	e8 91 41 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c00109e3:	83 c4 10             	add    esp,0x10
c00109e6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109eb:	5a                   	pop    edx
c00109ec:	5b                   	pop    ebx
c00109ed:	5e                   	pop    esi
c00109ee:	c3                   	ret    
c00109ef:	83 ec 0c             	sub    esp,0xc
c00109f2:	56                   	push   esi
c00109f3:	e8 d4 fb ff ff       	call   c00105cc <Device::getName()>
c00109f8:	83 c4 10             	add    esp,0x10
c00109fb:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00109fe:	75 ba                	jne    c00109ba <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010a00:	83 fb 0f             	cmp    ebx,0xf
c0010a03:	7f 29                	jg     c0010a2e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010a05:	0f b6 9b 60 2c 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd3a0]
c0010a0c:	eb ac                	jmp    c00109ba <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010a0e:	8d 04 82             	lea    eax,[edx+eax*4]
c0010a11:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010a15:	8d 04 86             	lea    eax,[esi+eax*4]
c0010a18:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010a1e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010a22:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010a28:	89 d8                	mov    eax,ebx
c0010a2a:	5a                   	pop    edx
c0010a2b:	5b                   	pop    ebx
c0010a2c:	5e                   	pop    esi
c0010a2d:	c3                   	ret    
c0010a2e:	83 ec 0c             	sub    esp,0xc
c0010a31:	68 08 0d 02 c0       	push   0xc0020d08
c0010a36:	e8 39 41 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c0010a3b:	83 c4 10             	add    esp,0x10
c0010a3e:	e9 77 ff ff ff       	jmp    c00109ba <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010a43:	90                   	nop

c0010a44 <InterruptController::clearAllHandlers(int, bool)>:
c0010a44:	56                   	push   esi
c0010a45:	53                   	push   ebx
c0010a46:	52                   	push   edx
c0010a47:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a4b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010a4f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010a54:	75 61                	jne    c0010ab7 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010a56:	8d 46 20             	lea    eax,[esi+0x20]
c0010a59:	c1 e6 04             	shl    esi,0x4
c0010a5c:	c1 e0 04             	shl    eax,0x4
c0010a5f:	01 de                	add    esi,ebx
c0010a61:	01 d8                	add    eax,ebx
c0010a63:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010a6d:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010a77:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010a81:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010a8b:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010a95:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010a9f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010aa9:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010ab3:	58                   	pop    eax
c0010ab4:	5b                   	pop    ebx
c0010ab5:	5e                   	pop    esi
c0010ab6:	c3                   	ret    
c0010ab7:	83 ec 0c             	sub    esp,0xc
c0010aba:	53                   	push   ebx
c0010abb:	e8 0c fb ff ff       	call   c00105cc <Device::getName()>
c0010ac0:	83 c4 10             	add    esp,0x10
c0010ac3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010ac6:	75 8e                	jne    c0010a56 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010ac8:	83 fe 0f             	cmp    esi,0xf
c0010acb:	7f 09                	jg     c0010ad6 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010acd:	0f b6 b6 60 2c 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd3a0]
c0010ad4:	eb 80                	jmp    c0010a56 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010ad6:	83 ec 0c             	sub    esp,0xc
c0010ad9:	68 7c 0d 02 c0       	push   0xc0020d7c
c0010ade:	e8 91 40 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c0010ae3:	83 c4 10             	add    esp,0x10
c0010ae6:	e9 6b ff ff ff       	jmp    c0010a56 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010aeb:	90                   	nop

c0010aec <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010aec:	56                   	push   esi
c0010aed:	53                   	push   ebx
c0010aee:	52                   	push   edx
c0010aef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010af3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010af7:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010afc:	75 3a                	jne    c0010b38 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010afe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b02:	8d 50 20             	lea    edx,[eax+0x20]
c0010b05:	c1 e2 04             	shl    edx,0x4
c0010b08:	8d 04 16             	lea    eax,[esi+edx*1]
c0010b0b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010b0f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010b15:	74 0b                	je     c0010b22 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010b17:	83 c0 04             	add    eax,0x4
c0010b1a:	39 d0                	cmp    eax,edx
c0010b1c:	75 f1                	jne    c0010b0f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010b1e:	58                   	pop    eax
c0010b1f:	5b                   	pop    ebx
c0010b20:	5e                   	pop    esi
c0010b21:	c3                   	ret    
c0010b22:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010b2c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010b36:	eb df                	jmp    c0010b17 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010b38:	83 ec 0c             	sub    esp,0xc
c0010b3b:	56                   	push   esi
c0010b3c:	e8 8b fa ff ff       	call   c00105cc <Device::getName()>
c0010b41:	83 c4 10             	add    esp,0x10
c0010b44:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010b47:	75 b5                	jne    c0010afe <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010b49:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010b4e:	7f 11                	jg     c0010b61 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010b50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b54:	0f b6 80 60 2c 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd3a0]
c0010b5b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010b5f:	eb 9d                	jmp    c0010afe <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010b61:	83 ec 0c             	sub    esp,0xc
c0010b64:	68 7c 0d 02 c0       	push   0xc0020d7c
c0010b69:	e8 06 40 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c0010b6e:	83 c4 10             	add    esp,0x10
c0010b71:	eb 8b                	jmp    c0010afe <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010b73 <nmiHandler(regs*, void*)>:
c0010b73:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c0010b78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010b7c:	e9 e1 a7 ff ff       	jmp    c000b362 <Computer::handleNMI()>

c0010b81 <int_handler>:
c0010b81:	55                   	push   ebp
c0010b82:	57                   	push   edi
c0010b83:	56                   	push   esi
c0010b84:	53                   	push   ebx
c0010b85:	83 ec 0c             	sub    esp,0xc
c0010b88:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010b8c:	80 3d d0 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ed0,0x0
c0010b93:	74 0b                	je     c0010ba0 <int_handler+0x1f>
c0010b95:	fa                   	cli    
c0010b96:	f4                   	hlt    
c0010b97:	80 3d d0 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ed0,0x0
c0010b9e:	75 f5                	jne    c0010b95 <int_handler+0x14>
c0010ba0:	e8 c9 32 00 00       	call   c0013e6e <thisCPU()>
c0010ba5:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010ba8:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010bae:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010bb1:	83 f8 17             	cmp    eax,0x17
c0010bb4:	77 13                	ja     c0010bc9 <int_handler+0x48>
c0010bb6:	83 ec 08             	sub    esp,0x8
c0010bb9:	8b 17                	mov    edx,DWORD PTR [edi]
c0010bbb:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010bbe:	0f b6 c0             	movzx  eax,al
c0010bc1:	50                   	push   eax
c0010bc2:	57                   	push   edi
c0010bc3:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010bc6:	83 c4 10             	add    esp,0x10
c0010bc9:	83 c3 15             	add    ebx,0x15
c0010bcc:	c1 e3 04             	shl    ebx,0x4
c0010bcf:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010bd3:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010bda:	31 db                	xor    ebx,ebx
c0010bdc:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010be0:	85 c0                	test   eax,eax
c0010be2:	74 13                	je     c0010bf7 <int_handler+0x76>
c0010be4:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010be7:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010beb:	74 1c                	je     c0010c09 <int_handler+0x88>
c0010bed:	83 ec 08             	sub    esp,0x8
c0010bf0:	52                   	push   edx
c0010bf1:	56                   	push   esi
c0010bf2:	ff d0                	call   eax
c0010bf4:	83 c4 10             	add    esp,0x10
c0010bf7:	43                   	inc    ebx
c0010bf8:	83 fb 04             	cmp    ebx,0x4
c0010bfb:	75 df                	jne    c0010bdc <int_handler+0x5b>
c0010bfd:	83 c4 0c             	add    esp,0xc
c0010c00:	31 c0                	xor    eax,eax
c0010c02:	5b                   	pop    ebx
c0010c03:	31 d2                	xor    edx,edx
c0010c05:	5e                   	pop    esi
c0010c06:	5f                   	pop    edi
c0010c07:	5d                   	pop    ebp
c0010c08:	c3                   	ret    
c0010c09:	83 ec 08             	sub    esp,0x8
c0010c0c:	52                   	push   edx
c0010c0d:	56                   	push   esi
c0010c0e:	ff d0                	call   eax
c0010c10:	83 c4 10             	add    esp,0x10
c0010c13:	83 c4 0c             	add    esp,0xc
c0010c16:	5b                   	pop    ebx
c0010c17:	5e                   	pop    esi
c0010c18:	5f                   	pop    edi
c0010c19:	5d                   	pop    ebp
c0010c1a:	c3                   	ret    
c0010c1b:	90                   	nop

c0010c1c <InterruptController::InterruptController(char const*)>:
c0010c1c:	83 ec 1c             	sub    esp,0x1c
c0010c1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c23:	83 ec 08             	sub    esp,0x8
c0010c26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010c2a:	50                   	push   eax
c0010c2b:	e8 aa f8 ff ff       	call   c00104da <Device::Device(char const*)>
c0010c30:	83 c4 10             	add    esp,0x10
c0010c33:	ba 98 0f 02 c0       	mov    edx,0xc0020f98
c0010c38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c3c:	89 10                	mov    DWORD PTR [eax],edx
c0010c3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c42:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010c4c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010c54:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010c5c:	7f 5e                	jg     c0010cbc <InterruptController::InterruptController(char const*)+0xa0>
c0010c5e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010c66:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010c6b:	7f 49                	jg     c0010cb6 <InterruptController::InterruptController(char const*)+0x9a>
c0010c6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010c75:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010c7c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c80:	01 ca                	add    edx,ecx
c0010c82:	83 c2 54             	add    edx,0x54
c0010c85:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010c8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010c95:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010c9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ca0:	01 ca                	add    edx,ecx
c0010ca2:	81 c2 54 04 00 00    	add    edx,0x454
c0010ca8:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010cb0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010cb4:	eb b0                	jmp    c0010c66 <InterruptController::InterruptController(char const*)+0x4a>
c0010cb6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010cba:	eb 98                	jmp    c0010c54 <InterruptController::InterruptController(char const*)+0x38>
c0010cbc:	90                   	nop
c0010cbd:	83 c4 1c             	add    esp,0x1c
c0010cc0:	c3                   	ret    
c0010cc1:	90                   	nop

c0010cc2 <InterruptController::~InterruptController()>:
c0010cc2:	83 ec 0c             	sub    esp,0xc
c0010cc5:	ba 98 0f 02 c0       	mov    edx,0xc0020f98
c0010cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cce:	89 10                	mov    DWORD PTR [eax],edx
c0010cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cd4:	83 ec 0c             	sub    esp,0xc
c0010cd7:	50                   	push   eax
c0010cd8:	e8 af f4 ff ff       	call   c001018c <Device::~Device()>
c0010cdd:	83 c4 10             	add    esp,0x10
c0010ce0:	90                   	nop
c0010ce1:	83 c4 0c             	add    esp,0xc
c0010ce4:	c3                   	ret    
c0010ce5:	90                   	nop

c0010ce6 <InterruptController::~InterruptController()>:
c0010ce6:	83 ec 0c             	sub    esp,0xc
c0010ce9:	83 ec 0c             	sub    esp,0xc
c0010cec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010cf0:	e8 cd ff ff ff       	call   c0010cc2 <InterruptController::~InterruptController()>
c0010cf5:	83 c4 10             	add    esp,0x10
c0010cf8:	83 ec 08             	sub    esp,0x8
c0010cfb:	68 58 21 00 00       	push   0x2158
c0010d00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d04:	e8 f6 e0 ff ff       	call   c000edff <operator delete(void*, unsigned long)>
c0010d09:	83 c4 10             	add    esp,0x10
c0010d0c:	83 c4 0c             	add    esp,0xc
c0010d0f:	c3                   	ret    

c0010d10 <displayDebugInfo(regs*)>:
c0010d10:	55                   	push   ebp
c0010d11:	57                   	push   edi
c0010d12:	56                   	push   esi
c0010d13:	53                   	push   ebx
c0010d14:	83 ec 24             	sub    esp,0x24
c0010d17:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010d1b:	0f 20 c2             	mov    edx,cr0
c0010d1e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010d22:	0f 20 d7             	mov    edi,cr2
c0010d25:	0f 20 de             	mov    esi,cr3
c0010d28:	0f 20 e5             	mov    ebp,cr4
c0010d2b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0010d2e:	68 09 0e 02 c0       	push   0xc0020e09
c0010d33:	e8 a7 e1 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0010d38:	58                   	pop    eax
c0010d39:	5a                   	pop    edx
c0010d3a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010d3d:	68 14 0e 02 c0       	push   0xc0020e14
c0010d42:	e8 98 e1 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0010d47:	59                   	pop    ecx
c0010d48:	58                   	pop    eax
c0010d49:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010d4c:	68 1f 0e 02 c0       	push   0xc0020e1f
c0010d51:	e8 89 e1 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0010d56:	58                   	pop    eax
c0010d57:	5a                   	pop    edx
c0010d58:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010d5b:	68 2a 0e 02 c0       	push   0xc0020e2a
c0010d60:	e8 7a e1 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0010d65:	59                   	pop    ecx
c0010d66:	58                   	pop    eax
c0010d67:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010d6a:	68 35 0e 02 c0       	push   0xc0020e35
c0010d6f:	e8 6b e1 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0010d74:	58                   	pop    eax
c0010d75:	5a                   	pop    edx
c0010d76:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0010d79:	68 40 0e 02 c0       	push   0xc0020e40
c0010d7e:	e8 5c e1 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0010d83:	59                   	pop    ecx
c0010d84:	58                   	pop    eax
c0010d85:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010d88:	68 5a 0e 02 c0       	push   0xc0020e5a
c0010d8d:	e8 4d e1 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0010d92:	58                   	pop    eax
c0010d93:	5a                   	pop    edx
c0010d94:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010d97:	68 4b 0e 02 c0       	push   0xc0020e4b
c0010d9c:	e8 3e e1 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0010da1:	59                   	pop    ecx
c0010da2:	58                   	pop    eax
c0010da3:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010da6:	68 56 0e 02 c0       	push   0xc0020e56
c0010dab:	e8 2f e1 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0010db0:	58                   	pop    eax
c0010db1:	5a                   	pop    edx
c0010db2:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010db5:	68 65 0e 02 c0       	push   0xc0020e65
c0010dba:	e8 20 e1 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0010dbf:	59                   	pop    ecx
c0010dc0:	58                   	pop    eax
c0010dc1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010dc4:	68 70 0e 02 c0       	push   0xc0020e70
c0010dc9:	e8 11 e1 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0010dce:	58                   	pop    eax
c0010dcf:	5a                   	pop    edx
c0010dd0:	57                   	push   edi
c0010dd1:	68 7b 0e 02 c0       	push   0xc0020e7b
c0010dd6:	e8 04 e1 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0010ddb:	59                   	pop    ecx
c0010ddc:	58                   	pop    eax
c0010ddd:	56                   	push   esi
c0010dde:	68 86 0e 02 c0       	push   0xc0020e86
c0010de3:	e8 f7 e0 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0010de8:	58                   	pop    eax
c0010de9:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0010dee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010df4:	e8 d4 c0 ff ff       	call   c000cecd <setActiveTerminal(VgaText*)>
c0010df9:	58                   	pop    eax
c0010dfa:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0010dfd:	5a                   	pop    edx
c0010dfe:	c1 e0 05             	shl    eax,0x5
c0010e01:	05 c0 29 02 c0       	add    eax,0xc00229c0
c0010e06:	50                   	push   eax
c0010e07:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0010e0c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e12:	e8 d5 c4 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010e17:	59                   	pop    ecx
c0010e18:	58                   	pop    eax
c0010e19:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0010e1e:	68 91 0e 02 c0       	push   0xc0020e91
c0010e23:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e29:	e8 be c4 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010e2e:	58                   	pop    eax
c0010e2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e34:	5a                   	pop    edx
c0010e35:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010e38:	83 c0 0c             	add    eax,0xc
c0010e3b:	50                   	push   eax
c0010e3c:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0010e41:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e47:	e8 a0 c4 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010e4c:	59                   	pop    ecx
c0010e4d:	58                   	pop    eax
c0010e4e:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0010e53:	68 9a 0e 02 c0       	push   0xc0020e9a
c0010e58:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e5e:	e8 89 c4 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010e63:	58                   	pop    eax
c0010e64:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0010e69:	5a                   	pop    edx
c0010e6a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010e6d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e73:	e8 9a c4 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010e78:	59                   	pop    ecx
c0010e79:	58                   	pop    eax
c0010e7a:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0010e7f:	68 a2 0e 02 c0       	push   0xc0020ea2
c0010e84:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e8a:	e8 5d c4 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010e8f:	58                   	pop    eax
c0010e90:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0010e95:	5a                   	pop    edx
c0010e96:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010e99:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e9f:	e8 6e c4 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010ea4:	59                   	pop    ecx
c0010ea5:	58                   	pop    eax
c0010ea6:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0010eab:	68 aa 0e 02 c0       	push   0xc0020eaa
c0010eb0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010eb6:	e8 31 c4 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010ebb:	58                   	pop    eax
c0010ebc:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0010ec1:	5a                   	pop    edx
c0010ec2:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010ec5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010ecb:	e8 42 c4 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010ed0:	59                   	pop    ecx
c0010ed1:	58                   	pop    eax
c0010ed2:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0010ed7:	68 b2 0e 02 c0       	push   0xc0020eb2
c0010edc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010ee2:	e8 05 c4 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010ee7:	58                   	pop    eax
c0010ee8:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0010eed:	5a                   	pop    edx
c0010eee:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0010ef1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010ef7:	e8 16 c4 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010efc:	59                   	pop    ecx
c0010efd:	58                   	pop    eax
c0010efe:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0010f03:	68 ba 0e 02 c0       	push   0xc0020eba
c0010f08:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f0e:	e8 d9 c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010f13:	58                   	pop    eax
c0010f14:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0010f19:	5a                   	pop    edx
c0010f1a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010f1d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f23:	e8 ea c3 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010f28:	59                   	pop    ecx
c0010f29:	58                   	pop    eax
c0010f2a:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0010f2f:	68 c2 0e 02 c0       	push   0xc0020ec2
c0010f34:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f3a:	e8 ad c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010f3f:	58                   	pop    eax
c0010f40:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0010f45:	5a                   	pop    edx
c0010f46:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0010f49:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f4f:	e8 be c3 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010f54:	59                   	pop    ecx
c0010f55:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0010f5a:	5b                   	pop    ebx
c0010f5b:	68 ca 0e 02 c0       	push   0xc0020eca
c0010f60:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f66:	e8 81 c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010f6b:	58                   	pop    eax
c0010f6c:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0010f71:	5a                   	pop    edx
c0010f72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010f76:	52                   	push   edx
c0010f77:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f7d:	e8 90 c3 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010f82:	59                   	pop    ecx
c0010f83:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0010f88:	5b                   	pop    ebx
c0010f89:	68 d3 0e 02 c0       	push   0xc0020ed3
c0010f8e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f94:	e8 53 c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010f99:	58                   	pop    eax
c0010f9a:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0010f9f:	5a                   	pop    edx
c0010fa0:	57                   	push   edi
c0010fa1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fa7:	e8 66 c3 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010fac:	59                   	pop    ecx
c0010fad:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0010fb2:	5b                   	pop    ebx
c0010fb3:	68 db 0e 02 c0       	push   0xc0020edb
c0010fb8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fbe:	e8 29 c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010fc3:	5f                   	pop    edi
c0010fc4:	58                   	pop    eax
c0010fc5:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0010fca:	56                   	push   esi
c0010fcb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fd1:	e8 3c c3 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010fd6:	58                   	pop    eax
c0010fd7:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0010fdc:	5a                   	pop    edx
c0010fdd:	68 e3 0e 02 c0       	push   0xc0020ee3
c0010fe2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fe8:	e8 ff c2 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010fed:	59                   	pop    ecx
c0010fee:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0010ff3:	5b                   	pop    ebx
c0010ff4:	55                   	push   ebp
c0010ff5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010ffb:	e8 12 c3 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0011000:	5e                   	pop    esi
c0011001:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0011006:	5f                   	pop    edi
c0011007:	68 eb 0e 02 c0       	push   0xc0020eeb
c001100c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011012:	e8 d5 c2 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0011017:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c001101c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011022:	e8 0c dc 00 00       	call   c001ec33 <CPU::readDR0()>
c0011027:	5d                   	pop    ebp
c0011028:	5a                   	pop    edx
c0011029:	50                   	push   eax
c001102a:	53                   	push   ebx
c001102b:	e8 e2 c2 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0011030:	59                   	pop    ecx
c0011031:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0011036:	5b                   	pop    ebx
c0011037:	68 f4 0e 02 c0       	push   0xc0020ef4
c001103c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011042:	e8 a5 c2 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0011047:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c001104c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011052:	e8 ee db 00 00       	call   c001ec45 <CPU::readDR1()>
c0011057:	5e                   	pop    esi
c0011058:	5f                   	pop    edi
c0011059:	50                   	push   eax
c001105a:	53                   	push   ebx
c001105b:	e8 b2 c2 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0011060:	5d                   	pop    ebp
c0011061:	58                   	pop    eax
c0011062:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0011067:	68 fc 0e 02 c0       	push   0xc0020efc
c001106c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011072:	e8 75 c2 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0011077:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c001107c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011082:	e8 d0 db 00 00       	call   c001ec57 <CPU::readDR2()>
c0011087:	5a                   	pop    edx
c0011088:	59                   	pop    ecx
c0011089:	50                   	push   eax
c001108a:	53                   	push   ebx
c001108b:	e8 82 c2 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0011090:	5b                   	pop    ebx
c0011091:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0011096:	5e                   	pop    esi
c0011097:	68 04 0f 02 c0       	push   0xc0020f04
c001109c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110a2:	e8 45 c2 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c00110a7:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c00110ac:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00110b2:	e8 b2 db 00 00       	call   c001ec69 <CPU::readDR3()>
c00110b7:	5f                   	pop    edi
c00110b8:	5d                   	pop    ebp
c00110b9:	50                   	push   eax
c00110ba:	53                   	push   ebx
c00110bb:	e8 52 c2 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c00110c0:	58                   	pop    eax
c00110c1:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c00110c6:	5a                   	pop    edx
c00110c7:	68 0c 0f 02 c0       	push   0xc0020f0c
c00110cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110d2:	e8 15 c2 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c00110d7:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c00110dc:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00110e2:	e8 94 db 00 00       	call   c001ec7b <CPU::readDR6()>
c00110e7:	59                   	pop    ecx
c00110e8:	5e                   	pop    esi
c00110e9:	50                   	push   eax
c00110ea:	53                   	push   ebx
c00110eb:	e8 22 c2 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c00110f0:	5f                   	pop    edi
c00110f1:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c00110f6:	5d                   	pop    ebp
c00110f7:	68 14 0f 02 c0       	push   0xc0020f14
c00110fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011102:	e8 e5 c1 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0011107:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c001110c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011112:	e8 76 db 00 00       	call   c001ec8d <CPU::readDR7()>
c0011117:	5a                   	pop    edx
c0011118:	59                   	pop    ecx
c0011119:	50                   	push   eax
c001111a:	53                   	push   ebx
c001111b:	e8 f2 c1 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0011120:	fa                   	cli    
c0011121:	f4                   	hlt    
c0011122:	83 c4 10             	add    esp,0x10
c0011125:	eb fe                	jmp    c0011125 <displayDebugInfo(regs*)+0x415>

c0011127 <x87EmulHandler(regs*, void*)>:
c0011127:	53                   	push   ebx
c0011128:	83 ec 08             	sub    esp,0x8
c001112b:	a1 0c 36 02 c0       	mov    eax,ds:0xc002360c
c0011130:	85 c0                	test   eax,eax
c0011132:	74 15                	je     c0011149 <x87EmulHandler(regs*, void*)+0x22>
c0011134:	83 ec 0c             	sub    esp,0xc
c0011137:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001113b:	ff d0                	call   eax
c001113d:	83 c4 10             	add    esp,0x10
c0011140:	84 c0                	test   al,al
c0011142:	74 2f                	je     c0011173 <x87EmulHandler(regs*, void*)+0x4c>
c0011144:	83 c4 08             	add    esp,0x8
c0011147:	5b                   	pop    ebx
c0011148:	c3                   	ret    
c0011149:	83 ec 08             	sub    esp,0x8
c001114c:	8b 1d 08 35 02 c0    	mov    ebx,DWORD PTR ds:0xc0023508
c0011152:	6a 01                	push   0x1
c0011154:	68 1c 0f 02 c0       	push   0xc0020f1c
c0011159:	e8 78 63 00 00       	call   c00174d6 <Thr::loadDLL(char const*, bool)>
c001115e:	5a                   	pop    edx
c001115f:	59                   	pop    ecx
c0011160:	53                   	push   ebx
c0011161:	50                   	push   eax
c0011162:	e8 c2 64 00 00       	call   c0017629 <Thr::executeDLL(unsigned long, void*)>
c0011167:	a1 0c 36 02 c0       	mov    eax,ds:0xc002360c
c001116c:	83 c4 10             	add    esp,0x10
c001116f:	85 c0                	test   eax,eax
c0011171:	75 c1                	jne    c0011134 <x87EmulHandler(regs*, void*)+0xd>
c0011173:	83 ec 0c             	sub    esp,0xc
c0011176:	68 39 0f 02 c0       	push   0xc0020f39
c001117b:	e8 5f dd ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0011180:	58                   	pop    eax
c0011181:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011185:	e8 86 fb ff ff       	call   c0010d10 <displayDebugInfo(regs*)>

c001118a <gpFault(regs*, void*)>:
c001118a:	53                   	push   ebx
c001118b:	83 ec 14             	sub    esp,0x14
c001118e:	c7 05 08 36 02 c0 9b 8a 01 c0 	mov    DWORD PTR ds:0xc0023608,0xc0018a9b
c0011198:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001119c:	53                   	push   ebx
c001119d:	e8 f9 78 00 00       	call   c0018a9b <Vm::faultHandler(regs*)>
c00111a2:	83 c4 10             	add    esp,0x10
c00111a5:	84 c0                	test   al,al
c00111a7:	74 05                	je     c00111ae <gpFault(regs*, void*)+0x24>
c00111a9:	83 c4 08             	add    esp,0x8
c00111ac:	5b                   	pop    ebx
c00111ad:	c3                   	ret    
c00111ae:	83 ec 0c             	sub    esp,0xc
c00111b1:	68 39 0f 02 c0       	push   0xc0020f39
c00111b6:	e8 24 dd ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c00111bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111be:	e8 4d fb ff ff       	call   c0010d10 <displayDebugInfo(regs*)>

c00111c3 <pgFault(regs*, void*)>:
c00111c3:	83 ec 18             	sub    esp,0x18
c00111c6:	68 54 0f 02 c0       	push   0xc0020f54
c00111cb:	e8 0f dd ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c00111d0:	58                   	pop    eax
c00111d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111d5:	e8 36 fb ff ff       	call   c0010d10 <displayDebugInfo(regs*)>

c00111da <otherISRHandler(regs*, void*)>:
c00111da:	53                   	push   ebx
c00111db:	83 ec 0c             	sub    esp,0xc
c00111de:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00111e2:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00111e5:	50                   	push   eax
c00111e6:	50                   	push   eax
c00111e7:	68 61 0f 02 c0       	push   0xc0020f61
c00111ec:	e8 ee dc ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c00111f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111f4:	e8 17 fb ff ff       	call   c0010d10 <displayDebugInfo(regs*)>

c00111f9 <opcodeFault(regs*, void*)>:
c00111f9:	53                   	push   ebx
c00111fa:	83 ec 08             	sub    esp,0x8
c00111fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011201:	e8 68 2c 00 00       	call   c0013e6e <thisCPU()>
c0011206:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c001120d:	74 16                	je     c0011225 <opcodeFault(regs*, void*)+0x2c>
c001120f:	83 ec 0c             	sub    esp,0xc
c0011212:	68 b8 0d 02 c0       	push   0xc0020db8
c0011217:	e8 c3 dc ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001121c:	83 43 38 19          	add    DWORD PTR [ebx+0x38],0x19
c0011220:	83 c4 18             	add    esp,0x18
c0011223:	5b                   	pop    ebx
c0011224:	c3                   	ret    
c0011225:	83 ec 0c             	sub    esp,0xc
c0011228:	68 7e 0f 02 c0       	push   0xc0020f7e
c001122d:	e8 ad dc ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0011232:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0011235:	c1 e0 04             	shl    eax,0x4
c0011238:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001123b:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001123f:	89 14 24             	mov    DWORD PTR [esp],edx
c0011242:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0011246:	52                   	push   edx
c0011247:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001124b:	52                   	push   edx
c001124c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c001124f:	50                   	push   eax
c0011250:	68 dc 0d 02 c0       	push   0xc0020ddc
c0011255:	e8 85 dc ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001125a:	83 c4 14             	add    esp,0x14
c001125d:	53                   	push   ebx
c001125e:	e8 ad fa ff ff       	call   c0010d10 <displayDebugInfo(regs*)>

c0011263 <displayProgramFault(char const*)>:
c0011263:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011268:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001126b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011271:	85 c0                	test   eax,eax
c0011273:	74 15                	je     c001128a <displayProgramFault(char const*)+0x27>
c0011275:	83 ec 0c             	sub    esp,0xc
c0011278:	6a 04                	push   0x4
c001127a:	6a 0f                	push   0xf
c001127c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011280:	50                   	push   eax
c0011281:	e8 28 bd ff ff       	call   c000cfae <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011286:	83 c4 1c             	add    esp,0x1c
c0011289:	c3                   	ret    
c001128a:	c3                   	ret    
c001128b:	90                   	nop

c001128c <InterruptController::convertLegacyIRQNumber(int)>:
c001128c:	53                   	push   ebx
c001128d:	83 ec 14             	sub    esp,0x14
c0011290:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011294:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011298:	e8 2f f3 ff ff       	call   c00105cc <Device::getName()>
c001129d:	83 c4 10             	add    esp,0x10
c00112a0:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00112a3:	74 07                	je     c00112ac <InterruptController::convertLegacyIRQNumber(int)+0x20>
c00112a5:	89 d8                	mov    eax,ebx
c00112a7:	83 c4 08             	add    esp,0x8
c00112aa:	5b                   	pop    ebx
c00112ab:	c3                   	ret    
c00112ac:	83 fb 0f             	cmp    ebx,0xf
c00112af:	7f 0e                	jg     c00112bf <InterruptController::convertLegacyIRQNumber(int)+0x33>
c00112b1:	0f b6 9b 60 2c 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd3a0]
c00112b8:	83 c4 08             	add    esp,0x8
c00112bb:	89 d8                	mov    eax,ebx
c00112bd:	5b                   	pop    ebx
c00112be:	c3                   	ret    
c00112bf:	83 ec 0c             	sub    esp,0xc
c00112c2:	68 08 0d 02 c0       	push   0xc0020d08
c00112c7:	e8 a8 38 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c00112cc:	89 d8                	mov    eax,ebx
c00112ce:	83 c4 10             	add    esp,0x10
c00112d1:	83 c4 08             	add    esp,0x8
c00112d4:	5b                   	pop    ebx
c00112d5:	c3                   	ret    

c00112d6 <setupInterruptController()>:
c00112d6:	56                   	push   esi
c00112d7:	53                   	push   ebx
c00112d8:	51                   	push   ecx
c00112d9:	e8 8d 2b 00 00       	call   c0013e6b <getCPUNumber()>
c00112de:	85 c0                	test   eax,eax
c00112e0:	0f 85 10 02 00 00    	jne    c00114f6 <setupInterruptController()+0x220>
c00112e6:	83 ec 0c             	sub    esp,0xc
c00112e9:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c00112ee:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00112f4:	68 58 21 00 00       	push   0x2158
c00112f9:	83 e0 01             	and    eax,0x1
c00112fc:	89 c6                	mov    esi,eax
c00112fe:	e8 ed da ff ff       	call   c000edf0 <operator new(unsigned long)>
c0011303:	89 04 24             	mov    DWORD PTR [esp],eax
c0011306:	89 c3                	mov    ebx,eax
c0011308:	e8 af c7 00 00       	call   c001dabc <PIC::PIC()>
c001130d:	6a 00                	push   0x0
c001130f:	6a 00                	push   0x0
c0011311:	6a 00                	push   0x0
c0011313:	53                   	push   ebx
c0011314:	e8 e7 ca 00 00       	call   c001de00 <PIC::open(int, int, void*)>
c0011319:	83 c4 20             	add    esp,0x20
c001131c:	89 f0                	mov    eax,esi
c001131e:	84 c0                	test   al,al
c0011320:	0f 85 92 01 00 00    	jne    c00114b8 <setupInterruptController()+0x1e2>
c0011326:	83 ec 08             	sub    esp,0x8
c0011329:	53                   	push   ebx
c001132a:	ff 35 08 35 02 c0    	push   DWORD PTR ds:0xc0023508
c0011330:	e8 b5 ef ff ff       	call   c00102ea <Device::addChild(Device*)>
c0011335:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011337:	6a 00                	push   0x0
c0011339:	68 da 11 01 c0       	push   0xc00111da
c001133e:	6a 00                	push   0x0
c0011340:	53                   	push   ebx
c0011341:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011344:	83 c4 20             	add    esp,0x20
c0011347:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011349:	6a 00                	push   0x0
c001134b:	68 da 11 01 c0       	push   0xc00111da
c0011350:	6a 01                	push   0x1
c0011352:	53                   	push   ebx
c0011353:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011356:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011358:	6a 00                	push   0x0
c001135a:	68 73 0b 01 c0       	push   0xc0010b73
c001135f:	6a 02                	push   0x2
c0011361:	53                   	push   ebx
c0011362:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011365:	83 c4 20             	add    esp,0x20
c0011368:	8b 03                	mov    eax,DWORD PTR [ebx]
c001136a:	6a 00                	push   0x0
c001136c:	68 da 11 01 c0       	push   0xc00111da
c0011371:	6a 03                	push   0x3
c0011373:	53                   	push   ebx
c0011374:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011377:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011379:	6a 00                	push   0x0
c001137b:	68 da 11 01 c0       	push   0xc00111da
c0011380:	6a 04                	push   0x4
c0011382:	53                   	push   ebx
c0011383:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011386:	83 c4 20             	add    esp,0x20
c0011389:	8b 03                	mov    eax,DWORD PTR [ebx]
c001138b:	6a 00                	push   0x0
c001138d:	68 da 11 01 c0       	push   0xc00111da
c0011392:	6a 05                	push   0x5
c0011394:	53                   	push   ebx
c0011395:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011398:	8b 03                	mov    eax,DWORD PTR [ebx]
c001139a:	6a 00                	push   0x0
c001139c:	68 f9 11 01 c0       	push   0xc00111f9
c00113a1:	6a 06                	push   0x6
c00113a3:	53                   	push   ebx
c00113a4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00113a7:	83 c4 20             	add    esp,0x20
c00113aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00113ac:	6a 00                	push   0x0
c00113ae:	68 27 11 01 c0       	push   0xc0011127
c00113b3:	6a 07                	push   0x7
c00113b5:	53                   	push   ebx
c00113b6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00113b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00113bb:	6a 00                	push   0x0
c00113bd:	68 9a 09 01 c0       	push   0xc001099a
c00113c2:	6a 08                	push   0x8
c00113c4:	53                   	push   ebx
c00113c5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00113c8:	83 c4 20             	add    esp,0x20
c00113cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00113cd:	6a 00                	push   0x0
c00113cf:	68 da 11 01 c0       	push   0xc00111da
c00113d4:	6a 09                	push   0x9
c00113d6:	53                   	push   ebx
c00113d7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00113da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00113dc:	6a 00                	push   0x0
c00113de:	68 da 11 01 c0       	push   0xc00111da
c00113e3:	6a 0a                	push   0xa
c00113e5:	53                   	push   ebx
c00113e6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00113e9:	83 c4 20             	add    esp,0x20
c00113ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00113ee:	6a 00                	push   0x0
c00113f0:	68 da 11 01 c0       	push   0xc00111da
c00113f5:	6a 0b                	push   0xb
c00113f7:	53                   	push   ebx
c00113f8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00113fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00113fd:	6a 00                	push   0x0
c00113ff:	68 da 11 01 c0       	push   0xc00111da
c0011404:	6a 0c                	push   0xc
c0011406:	53                   	push   ebx
c0011407:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001140a:	83 c4 20             	add    esp,0x20
c001140d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001140f:	6a 00                	push   0x0
c0011411:	68 8a 11 01 c0       	push   0xc001118a
c0011416:	6a 0d                	push   0xd
c0011418:	53                   	push   ebx
c0011419:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001141c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001141e:	6a 00                	push   0x0
c0011420:	68 c3 11 01 c0       	push   0xc00111c3
c0011425:	6a 0e                	push   0xe
c0011427:	53                   	push   ebx
c0011428:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001142b:	83 c4 20             	add    esp,0x20
c001142e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011430:	6a 00                	push   0x0
c0011432:	68 da 11 01 c0       	push   0xc00111da
c0011437:	6a 0f                	push   0xf
c0011439:	53                   	push   ebx
c001143a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001143d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001143f:	6a 00                	push   0x0
c0011441:	68 da 11 01 c0       	push   0xc00111da
c0011446:	6a 10                	push   0x10
c0011448:	53                   	push   ebx
c0011449:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001144c:	83 c4 20             	add    esp,0x20
c001144f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011451:	6a 00                	push   0x0
c0011453:	68 da 11 01 c0       	push   0xc00111da
c0011458:	6a 11                	push   0x11
c001145a:	53                   	push   ebx
c001145b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001145e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011460:	6a 00                	push   0x0
c0011462:	68 da 11 01 c0       	push   0xc00111da
c0011467:	6a 12                	push   0x12
c0011469:	53                   	push   ebx
c001146a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001146d:	83 c4 20             	add    esp,0x20
c0011470:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011472:	6a 00                	push   0x0
c0011474:	68 da 11 01 c0       	push   0xc00111da
c0011479:	6a 13                	push   0x13
c001147b:	53                   	push   ebx
c001147c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001147f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011481:	6a 00                	push   0x0
c0011483:	68 da 11 01 c0       	push   0xc00111da
c0011488:	6a 14                	push   0x14
c001148a:	53                   	push   ebx
c001148b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001148e:	83 c4 20             	add    esp,0x20
c0011491:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011493:	6a 00                	push   0x0
c0011495:	68 da 11 01 c0       	push   0xc00111da
c001149a:	6a 1e                	push   0x1e
c001149c:	53                   	push   ebx
c001149d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114a2:	6a 00                	push   0x0
c00114a4:	68 da 64 01 c0       	push   0xc00164da
c00114a9:	6a 60                	push   0x60
c00114ab:	53                   	push   ebx
c00114ac:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114af:	83 c4 20             	add    esp,0x20
c00114b2:	89 d8                	mov    eax,ebx
c00114b4:	5a                   	pop    edx
c00114b5:	5b                   	pop    ebx
c00114b6:	5e                   	pop    esi
c00114b7:	c3                   	ret    
c00114b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114ba:	6a 00                	push   0x0
c00114bc:	6a 00                	push   0x0
c00114be:	6a 00                	push   0x0
c00114c0:	53                   	push   ebx
c00114c1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00114c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00114c9:	ff 50 04             	call   DWORD PTR [eax+0x4]
c00114cc:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c00114d3:	e8 18 d9 ff ff       	call   c000edf0 <operator new(unsigned long)>
c00114d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00114db:	89 c3                	mov    ebx,eax
c00114dd:	e8 18 c1 00 00       	call   c001d5fa <APIC::APIC()>
c00114e2:	6a 00                	push   0x0
c00114e4:	6a 00                	push   0x0
c00114e6:	6a 00                	push   0x0
c00114e8:	53                   	push   ebx
c00114e9:	e8 2a c0 00 00       	call   c001d518 <APIC::open(int, int, void*)>
c00114ee:	83 c4 20             	add    esp,0x20
c00114f1:	e9 30 fe ff ff       	jmp    c0011326 <setupInterruptController()+0x50>
c00114f6:	83 ec 0c             	sub    esp,0xc
c00114f9:	68 58 21 00 00       	push   0x2158
c00114fe:	e8 ed d8 ff ff       	call   c000edf0 <operator new(unsigned long)>
c0011503:	89 04 24             	mov    DWORD PTR [esp],eax
c0011506:	89 c3                	mov    ebx,eax
c0011508:	e8 ed c0 00 00       	call   c001d5fa <APIC::APIC()>
c001150d:	6a 00                	push   0x0
c001150f:	6a 00                	push   0x0
c0011511:	6a 00                	push   0x0
c0011513:	53                   	push   ebx
c0011514:	e8 ff bf 00 00       	call   c001d518 <APIC::open(int, int, void*)>
c0011519:	83 c4 18             	add    esp,0x18
c001151c:	53                   	push   ebx
c001151d:	ff 35 08 35 02 c0    	push   DWORD PTR ds:0xc0023508
c0011523:	e8 c2 ed ff ff       	call   c00102ea <Device::addChild(Device*)>
c0011528:	83 c4 10             	add    esp,0x10
c001152b:	89 d8                	mov    eax,ebx
c001152d:	5a                   	pop    edx
c001152e:	5b                   	pop    ebx
c001152f:	5e                   	pop    esi
c0011530:	c3                   	ret    
c0011531:	90                   	nop

c0011532 <startGUI(void*)>:
c0011532:	55                   	push   ebp
c0011533:	89 e5                	mov    ebp,esp
c0011535:	53                   	push   ebx
c0011536:	83 ec 04             	sub    esp,0x4
c0011539:	e8 f8 64 00 00       	call   c0017a36 <unlockScheduler()>
c001153e:	e8 dc 64 00 00       	call   c0017a1f <getIRQNestingLevel()>
c0011543:	83 ec 08             	sub    esp,0x8
c0011546:	50                   	push   eax
c0011547:	68 d8 0f 02 c0       	push   0xc0020fd8
c001154c:	e8 8e d9 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0011551:	83 c4 10             	add    esp,0x10
c0011554:	8b 1d 08 35 02 c0    	mov    ebx,DWORD PTR ds:0xc0023508
c001155a:	83 ec 08             	sub    esp,0x8
c001155d:	6a 01                	push   0x1
c001155f:	68 f2 0f 02 c0       	push   0xc0020ff2
c0011564:	e8 6d 5f 00 00       	call   c00174d6 <Thr::loadDLL(char const*, bool)>
c0011569:	83 c4 10             	add    esp,0x10
c001156c:	83 ec 08             	sub    esp,0x8
c001156f:	53                   	push   ebx
c0011570:	50                   	push   eax
c0011571:	e8 b3 60 00 00       	call   c0017629 <Thr::executeDLL(unsigned long, void*)>
c0011576:	83 c4 10             	add    esp,0x10
c0011579:	8b 1d 08 35 02 c0    	mov    ebx,DWORD PTR ds:0xc0023508
c001157f:	83 ec 08             	sub    esp,0x8
c0011582:	6a 01                	push   0x1
c0011584:	68 0c 10 02 c0       	push   0xc002100c
c0011589:	e8 48 5f 00 00       	call   c00174d6 <Thr::loadDLL(char const*, bool)>
c001158e:	83 c4 10             	add    esp,0x10
c0011591:	83 ec 08             	sub    esp,0x8
c0011594:	53                   	push   ebx
c0011595:	50                   	push   eax
c0011596:	e8 8e 60 00 00       	call   c0017629 <Thr::executeDLL(unsigned long, void*)>
c001159b:	83 c4 10             	add    esp,0x10
c001159e:	90                   	nop
c001159f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00115a2:	c9                   	leave  
c00115a3:	c3                   	ret    

c00115a4 <sendKeyToTerminal(unsigned char)>:
c00115a4:	55                   	push   ebp
c00115a5:	89 e5                	mov    ebp,esp
c00115a7:	83 ec 28             	sub    esp,0x28
c00115aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ad:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00115b0:	a1 c4 35 02 c0       	mov    eax,ds:0xc00235c4
c00115b5:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00115b9:	83 ec 08             	sub    esp,0x8
c00115bc:	52                   	push   edx
c00115bd:	50                   	push   eax
c00115be:	e8 27 bf ff ff       	call   c000d4ea <VgaText::receiveKey(unsigned char)>
c00115c3:	83 c4 10             	add    esp,0x10
c00115c6:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00115ca:	75 41                	jne    c001160d <sendKeyToTerminal(unsigned char)+0x69>
c00115cc:	e8 8a 64 00 00       	call   c0017a5b <lockStuff()>
c00115d1:	a1 20 36 02 c0       	mov    eax,ds:0xc0023620
c00115d6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00115d9:	c7 05 20 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023620,0x0
c00115e3:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00115e7:	74 1f                	je     c0011608 <sendKeyToTerminal(unsigned char)+0x64>
c00115e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115ec:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00115ef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00115f2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00115f5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00115f8:	83 ec 0c             	sub    esp,0xc
c00115fb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00115fe:	e8 41 6c 00 00       	call   c0018244 <unblockTask(ThreadControlBlock*)>
c0011603:	83 c4 10             	add    esp,0x10
c0011606:	eb db                	jmp    c00115e3 <sendKeyToTerminal(unsigned char)+0x3f>
c0011608:	e8 e0 67 00 00       	call   c0017ded <unlockStuff()>
c001160d:	90                   	nop
c001160e:	c9                   	leave  
c001160f:	c3                   	ret    

c0011610 <sendKeyboardToken(KeyboardToken)>:
c0011610:	55                   	push   ebp
c0011611:	89 e5                	mov    ebp,esp
c0011613:	83 ec 18             	sub    esp,0x18
c0011616:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0011619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001161c:	0f b7 c0             	movzx  eax,ax
c001161f:	83 f2 01             	xor    edx,0x1
c0011622:	88 90 40 36 02 c0    	mov    BYTE PTR [eax-0x3ffdc9c0],dl
c0011628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001162b:	66 3d 03 02          	cmp    ax,0x203
c001162f:	75 07                	jne    c0011638 <sendKeyboardToken(KeyboardToken)+0x28>
c0011631:	a0 40 37 02 c0       	mov    al,ds:0xc0023740
c0011636:	84 c0                	test   al,al
c0011638:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001163c:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001163f:	a0 48 3a 02 c0       	mov    al,ds:0xc0023a48
c0011644:	38 c2                	cmp    dl,al
c0011646:	74 1c                	je     c0011664 <sendKeyboardToken(KeyboardToken)+0x54>
c0011648:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001164b:	a2 48 3a 02 c0       	mov    ds:0xc0023a48,al
c0011650:	a0 48 3a 02 c0       	mov    al,ds:0xc0023a48
c0011655:	0f b6 c0             	movzx  eax,al
c0011658:	83 ec 0c             	sub    esp,0xc
c001165b:	50                   	push   eax
c001165c:	e8 f7 b0 ff ff       	call   c000c758 <setTerminalScrollLock(bool)>
c0011661:	83 c4 10             	add    esp,0x10
c0011664:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0011667:	84 c0                	test   al,al
c0011669:	0f 84 ae 00 00 00    	je     c001171d <sendKeyboardToken(KeyboardToken)+0x10d>
c001166f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011672:	66 3d 10 03          	cmp    ax,0x310
c0011676:	75 06                	jne    c001167e <sendKeyboardToken(KeyboardToken)+0x6e>
c0011678:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001167e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011681:	66 3d 11 03          	cmp    ax,0x311
c0011685:	75 06                	jne    c001168d <sendKeyboardToken(KeyboardToken)+0x7d>
c0011687:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001168d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011690:	66 3d 12 03          	cmp    ax,0x312
c0011694:	75 06                	jne    c001169c <sendKeyboardToken(KeyboardToken)+0x8c>
c0011696:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001169c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001169f:	66 3d 13 03          	cmp    ax,0x313
c00116a3:	75 06                	jne    c00116ab <sendKeyboardToken(KeyboardToken)+0x9b>
c00116a5:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00116ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116ae:	66 3d 14 03          	cmp    ax,0x314
c00116b2:	75 06                	jne    c00116ba <sendKeyboardToken(KeyboardToken)+0xaa>
c00116b4:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00116ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116bd:	66 3d 15 03          	cmp    ax,0x315
c00116c1:	75 06                	jne    c00116c9 <sendKeyboardToken(KeyboardToken)+0xb9>
c00116c3:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00116c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116cc:	66 3d 16 03          	cmp    ax,0x316
c00116d0:	75 06                	jne    c00116d8 <sendKeyboardToken(KeyboardToken)+0xc8>
c00116d2:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00116d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116db:	66 3d 17 03          	cmp    ax,0x317
c00116df:	75 06                	jne    c00116e7 <sendKeyboardToken(KeyboardToken)+0xd7>
c00116e1:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00116e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116ea:	66 3d 18 03          	cmp    ax,0x318
c00116ee:	75 06                	jne    c00116f6 <sendKeyboardToken(KeyboardToken)+0xe6>
c00116f0:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00116f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116f9:	66 3d 19 03          	cmp    ax,0x319
c00116fd:	75 06                	jne    c0011705 <sendKeyboardToken(KeyboardToken)+0xf5>
c00116ff:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0011705:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011708:	66 3d 1a 03          	cmp    ax,0x31a
c001170c:	0f 85 c9 00 00 00    	jne    c00117db <sendKeyboardToken(KeyboardToken)+0x1cb>
c0011712:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0011718:	e9 be 00 00 00       	jmp    c00117db <sendKeyboardToken(KeyboardToken)+0x1cb>
c001171d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011720:	66 3d 10 03          	cmp    ax,0x310
c0011724:	75 0a                	jne    c0011730 <sendKeyboardToken(KeyboardToken)+0x120>
c0011726:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001172c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011730:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011733:	66 3d 11 03          	cmp    ax,0x311
c0011737:	75 0a                	jne    c0011743 <sendKeyboardToken(KeyboardToken)+0x133>
c0011739:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001173f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011743:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011746:	66 3d 12 03          	cmp    ax,0x312
c001174a:	75 0a                	jne    c0011756 <sendKeyboardToken(KeyboardToken)+0x146>
c001174c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0011752:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011756:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011759:	66 3d 13 03          	cmp    ax,0x313
c001175d:	75 0a                	jne    c0011769 <sendKeyboardToken(KeyboardToken)+0x159>
c001175f:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0011765:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001176c:	66 3d 14 03          	cmp    ax,0x314
c0011770:	75 0a                	jne    c001177c <sendKeyboardToken(KeyboardToken)+0x16c>
c0011772:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0011778:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001177c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001177f:	66 3d 15 03          	cmp    ax,0x315
c0011783:	75 0a                	jne    c001178f <sendKeyboardToken(KeyboardToken)+0x17f>
c0011785:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001178b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001178f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011792:	66 3d 16 03          	cmp    ax,0x316
c0011796:	75 0a                	jne    c00117a2 <sendKeyboardToken(KeyboardToken)+0x192>
c0011798:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001179e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00117a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117a5:	66 3d 17 03          	cmp    ax,0x317
c00117a9:	75 0a                	jne    c00117b5 <sendKeyboardToken(KeyboardToken)+0x1a5>
c00117ab:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00117b1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00117b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117b8:	66 3d 18 03          	cmp    ax,0x318
c00117bc:	75 0a                	jne    c00117c8 <sendKeyboardToken(KeyboardToken)+0x1b8>
c00117be:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00117c4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00117c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117cb:	66 3d 19 03          	cmp    ax,0x319
c00117cf:	75 0a                	jne    c00117db <sendKeyboardToken(KeyboardToken)+0x1cb>
c00117d1:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00117d7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00117db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117de:	66 3d 00 02          	cmp    ax,0x200
c00117e2:	75 2a                	jne    c001180e <sendKeyboardToken(KeyboardToken)+0x1fe>
c00117e4:	a0 40 3a 02 c0       	mov    al,ds:0xc0023a40
c00117e9:	83 f0 01             	xor    eax,0x1
c00117ec:	84 c0                	test   al,al
c00117ee:	74 1e                	je     c001180e <sendKeyboardToken(KeyboardToken)+0x1fe>
c00117f0:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c00117f5:	6a 01                	push   0x1
c00117f7:	6a 00                	push   0x0
c00117f9:	68 32 15 01 c0       	push   0xc0011532
c00117fe:	50                   	push   eax
c00117ff:	e8 5a 63 00 00       	call   c0017b5e <Process::createThread(void (*)(void*), void*, int)>
c0011804:	83 c4 10             	add    esp,0x10
c0011807:	c6 05 40 3a 02 c0 01 	mov    BYTE PTR ds:0xc0023a40,0x1
c001180e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011811:	66 3d 1d 03          	cmp    ax,0x31d
c0011815:	75 06                	jne    c001181d <sendKeyboardToken(KeyboardToken)+0x20d>
c0011817:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001181d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011820:	66 3d 1c 03          	cmp    ax,0x31c
c0011824:	75 06                	jne    c001182c <sendKeyboardToken(KeyboardToken)+0x21c>
c0011826:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001182c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001182f:	66 3d 1b 03          	cmp    ax,0x31b
c0011833:	75 06                	jne    c001183b <sendKeyboardToken(KeyboardToken)+0x22b>
c0011835:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001183b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001183e:	66 3d 1e 03          	cmp    ax,0x31e
c0011842:	75 06                	jne    c001184a <sendKeyboardToken(KeyboardToken)+0x23a>
c0011844:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001184a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001184d:	66 3d 1f 03          	cmp    ax,0x31f
c0011851:	75 06                	jne    c0011859 <sendKeyboardToken(KeyboardToken)+0x249>
c0011853:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0011859:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001185c:	66 3d 1a 03          	cmp    ax,0x31a
c0011860:	75 06                	jne    c0011868 <sendKeyboardToken(KeyboardToken)+0x258>
c0011862:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0011868:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001186c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001186f:	83 f0 01             	xor    eax,0x1
c0011872:	84 c0                	test   al,al
c0011874:	74 77                	je     c00118ed <sendKeyboardToken(KeyboardToken)+0x2dd>
c0011876:	a0 41 37 02 c0       	mov    al,ds:0xc0023741
c001187b:	84 c0                	test   al,al
c001187d:	74 41                	je     c00118c0 <sendKeyboardToken(KeyboardToken)+0x2b0>
c001187f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011883:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0011887:	74 2b                	je     c00118b4 <sendKeyboardToken(KeyboardToken)+0x2a4>
c0011889:	8b 15 44 3a 02 c0    	mov    edx,DWORD PTR ds:0xc0023a44
c001188f:	89 d0                	mov    eax,edx
c0011891:	c1 e0 02             	shl    eax,0x2
c0011894:	01 d0                	add    eax,edx
c0011896:	01 c0                	add    eax,eax
c0011898:	a3 44 3a 02 c0       	mov    ds:0xc0023a44,eax
c001189d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118a0:	0f b7 c0             	movzx  eax,ax
c00118a3:	8d 50 d0             	lea    edx,[eax-0x30]
c00118a6:	a1 44 3a 02 c0       	mov    eax,ds:0xc0023a44
c00118ab:	01 d0                	add    eax,edx
c00118ad:	a3 44 3a 02 c0       	mov    ds:0xc0023a44,eax
c00118b2:	eb 6d                	jmp    c0011921 <sendKeyboardToken(KeyboardToken)+0x311>
c00118b4:	c7 05 44 3a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023a44,0x0
c00118be:	eb 61                	jmp    c0011921 <sendKeyboardToken(KeyboardToken)+0x311>
c00118c0:	a1 44 3a 02 c0       	mov    eax,ds:0xc0023a44
c00118c5:	85 c0                	test   eax,eax
c00118c7:	74 18                	je     c00118e1 <sendKeyboardToken(KeyboardToken)+0x2d1>
c00118c9:	a1 44 3a 02 c0       	mov    eax,ds:0xc0023a44
c00118ce:	0f b6 c0             	movzx  eax,al
c00118d1:	83 ec 0c             	sub    esp,0xc
c00118d4:	50                   	push   eax
c00118d5:	e8 ca fc ff ff       	call   c00115a4 <sendKeyToTerminal(unsigned char)>
c00118da:	83 c4 10             	add    esp,0x10
c00118dd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00118e1:	c7 05 44 3a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023a44,0x0
c00118eb:	eb 34                	jmp    c0011921 <sendKeyboardToken(KeyboardToken)+0x311>
c00118ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118f0:	66 3d 01 01          	cmp    ax,0x101
c00118f4:	75 2b                	jne    c0011921 <sendKeyboardToken(KeyboardToken)+0x311>
c00118f6:	a1 44 3a 02 c0       	mov    eax,ds:0xc0023a44
c00118fb:	85 c0                	test   eax,eax
c00118fd:	74 18                	je     c0011917 <sendKeyboardToken(KeyboardToken)+0x307>
c00118ff:	a1 44 3a 02 c0       	mov    eax,ds:0xc0023a44
c0011904:	0f b6 c0             	movzx  eax,al
c0011907:	83 ec 0c             	sub    esp,0xc
c001190a:	50                   	push   eax
c001190b:	e8 94 fc ff ff       	call   c00115a4 <sendKeyToTerminal(unsigned char)>
c0011910:	83 c4 10             	add    esp,0x10
c0011913:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011917:	c7 05 44 3a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023a44,0x0
c0011921:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0011924:	83 f0 01             	xor    eax,0x1
c0011927:	84 c0                	test   al,al
c0011929:	74 4c                	je     c0011977 <sendKeyboardToken(KeyboardToken)+0x367>
c001192b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001192e:	83 f0 01             	xor    eax,0x1
c0011931:	84 c0                	test   al,al
c0011933:	74 42                	je     c0011977 <sendKeyboardToken(KeyboardToken)+0x367>
c0011935:	a0 40 37 02 c0       	mov    al,ds:0xc0023740
c001193a:	83 f0 01             	xor    eax,0x1
c001193d:	84 c0                	test   al,al
c001193f:	74 36                	je     c0011977 <sendKeyboardToken(KeyboardToken)+0x367>
c0011941:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011944:	66 83 f8 1f          	cmp    ax,0x1f
c0011948:	76 09                	jbe    c0011953 <sendKeyboardToken(KeyboardToken)+0x343>
c001194a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001194d:	66 83 f8 7e          	cmp    ax,0x7e
c0011951:	76 12                	jbe    c0011965 <sendKeyboardToken(KeyboardToken)+0x355>
c0011953:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011956:	66 83 f8 0a          	cmp    ax,0xa
c001195a:	74 09                	je     c0011965 <sendKeyboardToken(KeyboardToken)+0x355>
c001195c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001195f:	66 83 f8 08          	cmp    ax,0x8
c0011963:	75 12                	jne    c0011977 <sendKeyboardToken(KeyboardToken)+0x367>
c0011965:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011968:	0f b6 c0             	movzx  eax,al
c001196b:	83 ec 0c             	sub    esp,0xc
c001196e:	50                   	push   eax
c001196f:	e8 30 fc ff ff       	call   c00115a4 <sendKeyToTerminal(unsigned char)>
c0011974:	83 c4 10             	add    esp,0x10
c0011977:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001197a:	83 f0 01             	xor    eax,0x1
c001197d:	84 c0                	test   al,al
c001197f:	74 4f                	je     c00119d0 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011981:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011984:	83 f0 01             	xor    eax,0x1
c0011987:	84 c0                	test   al,al
c0011989:	74 45                	je     c00119d0 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001198b:	a0 40 37 02 c0       	mov    al,ds:0xc0023740
c0011990:	84 c0                	test   al,al
c0011992:	74 3c                	je     c00119d0 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011994:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011997:	66 83 f8 3f          	cmp    ax,0x3f
c001199b:	76 33                	jbe    c00119d0 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001199d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119a0:	66 83 f8 7f          	cmp    ax,0x7f
c00119a4:	77 2a                	ja     c00119d0 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00119a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119a9:	88 c2                	mov    dl,al
c00119ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119ae:	66 83 f8 5f          	cmp    ax,0x5f
c00119b2:	76 04                	jbe    c00119b8 <sendKeyboardToken(KeyboardToken)+0x3a8>
c00119b4:	b0 20                	mov    al,0x20
c00119b6:	eb 02                	jmp    c00119ba <sendKeyboardToken(KeyboardToken)+0x3aa>
c00119b8:	b0 00                	mov    al,0x0
c00119ba:	29 c2                	sub    edx,eax
c00119bc:	88 d0                	mov    al,dl
c00119be:	83 e8 40             	sub    eax,0x40
c00119c1:	0f b6 c0             	movzx  eax,al
c00119c4:	83 ec 0c             	sub    esp,0xc
c00119c7:	50                   	push   eax
c00119c8:	e8 d7 fb ff ff       	call   c00115a4 <sendKeyToTerminal(unsigned char)>
c00119cd:	83 c4 10             	add    esp,0x10
c00119d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119d3:	66 3d 00 03          	cmp    ax,0x300
c00119d7:	75 0f                	jne    c00119e8 <sendKeyboardToken(KeyboardToken)+0x3d8>
c00119d9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00119dc:	83 f0 01             	xor    eax,0x1
c00119df:	84 c0                	test   al,al
c00119e1:	74 05                	je     c00119e8 <sendKeyboardToken(KeyboardToken)+0x3d8>
c00119e3:	e8 97 b5 ff ff       	call   c000cf7f <doTerminalCycle()>
c00119e8:	90                   	nop
c00119e9:	c9                   	leave  
c00119ea:	c3                   	ret    

c00119eb <clearInternalKeybuffer(VgaText*)>:
c00119eb:	55                   	push   ebp
c00119ec:	89 e5                	mov    ebp,esp
c00119ee:	83 ec 08             	sub    esp,0x8
c00119f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119f4:	05 34 11 00 00       	add    eax,0x1134
c00119f9:	83 ec 0c             	sub    esp,0xc
c00119fc:	50                   	push   eax
c00119fd:	e8 23 ec fe ff       	call   c0000625 <strlen>
c0011a02:	83 c4 10             	add    esp,0x10
c0011a05:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011a08:	81 c2 34 11 00 00    	add    edx,0x1134
c0011a0e:	83 ec 04             	sub    esp,0x4
c0011a11:	50                   	push   eax
c0011a12:	6a 00                	push   0x0
c0011a14:	52                   	push   edx
c0011a15:	e8 ee eb fe ff       	call   c0000608 <memset>
c0011a1a:	83 c4 10             	add    esp,0x10
c0011a1d:	90                   	nop
c0011a1e:	c9                   	leave  
c0011a1f:	c3                   	ret    

c0011a20 <readKeyboard(VgaText*, char*, unsigned long)>:
c0011a20:	55                   	push   ebp
c0011a21:	89 e5                	mov    ebp,esp
c0011a23:	83 ec 18             	sub    esp,0x18
c0011a26:	fb                   	sti    
c0011a27:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0011a2e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0011a32:	74 77                	je     c0011aab <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0011a34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a37:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011a3d:	84 c0                	test   al,al
c0011a3f:	75 02                	jne    c0011a43 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0011a41:	eb f1                	jmp    c0011a34 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0011a43:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011a46:	8d 50 01             	lea    edx,[eax+0x1]
c0011a49:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0011a4c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011a4f:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0011a55:	88 10                	mov    BYTE PTR [eax],dl
c0011a57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a5a:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011a60:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0011a63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a66:	05 34 11 00 00       	add    eax,0x1134
c0011a6b:	83 ec 0c             	sub    esp,0xc
c0011a6e:	50                   	push   eax
c0011a6f:	e8 b1 eb fe ff       	call   c0000625 <strlen>
c0011a74:	83 c4 10             	add    esp,0x10
c0011a77:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011a7a:	81 c2 34 11 00 00    	add    edx,0x1134
c0011a80:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011a83:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011a86:	81 c2 34 11 00 00    	add    edx,0x1134
c0011a8c:	83 ec 04             	sub    esp,0x4
c0011a8f:	50                   	push   eax
c0011a90:	51                   	push   ecx
c0011a91:	52                   	push   edx
c0011a92:	e8 03 eb fe ff       	call   c000059a <memmove>
c0011a97:	83 c4 10             	add    esp,0x10
c0011a9a:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0011a9d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011aa0:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0011aa4:	75 88                	jne    c0011a2e <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0011aa6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011aa9:	eb 03                	jmp    c0011aae <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c0011aab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011aae:	c9                   	leave  
c0011aaf:	c3                   	ret    

c0011ab0 <Keyboard::Keyboard(char const*)>:
c0011ab0:	83 ec 0c             	sub    esp,0xc
c0011ab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ab7:	83 ec 08             	sub    esp,0x8
c0011aba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011abe:	50                   	push   eax
c0011abf:	e8 16 ea ff ff       	call   c00104da <Device::Device(char const*)>
c0011ac4:	83 c4 10             	add    esp,0x10
c0011ac7:	ba 30 10 02 c0       	mov    edx,0xc0021030
c0011acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ad0:	89 10                	mov    DWORD PTR [eax],edx
c0011ad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ad6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0011ae0:	c6 05 24 36 02 c0 01 	mov    BYTE PTR ds:0xc0023624,0x1
c0011ae7:	90                   	nop
c0011ae8:	83 c4 0c             	add    esp,0xc
c0011aeb:	c3                   	ret    

c0011aec <Keyboard::~Keyboard()>:
c0011aec:	83 ec 0c             	sub    esp,0xc
c0011aef:	ba 30 10 02 c0       	mov    edx,0xc0021030
c0011af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011af8:	89 10                	mov    DWORD PTR [eax],edx
c0011afa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011afe:	83 ec 0c             	sub    esp,0xc
c0011b01:	50                   	push   eax
c0011b02:	e8 85 e6 ff ff       	call   c001018c <Device::~Device()>
c0011b07:	83 c4 10             	add    esp,0x10
c0011b0a:	90                   	nop
c0011b0b:	83 c4 0c             	add    esp,0xc
c0011b0e:	c3                   	ret    
c0011b0f:	90                   	nop

c0011b10 <Keyboard::~Keyboard()>:
c0011b10:	83 ec 0c             	sub    esp,0xc
c0011b13:	83 ec 0c             	sub    esp,0xc
c0011b16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011b1a:	e8 cd ff ff ff       	call   c0011aec <Keyboard::~Keyboard()>
c0011b1f:	83 c4 10             	add    esp,0x10
c0011b22:	83 ec 08             	sub    esp,0x8
c0011b25:	68 5c 01 00 00       	push   0x15c
c0011b2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011b2e:	e8 cc d2 ff ff       	call   c000edff <operator delete(void*, unsigned long)>
c0011b33:	83 c4 10             	add    esp,0x10
c0011b36:	83 c4 0c             	add    esp,0xc
c0011b39:	c3                   	ret    

c0011b3a <LogicalDisk::close(int, int, void*)>:
c0011b3a:	83 c8 ff             	or     eax,0xffffffff
c0011b3d:	c3                   	ret    

c0011b3e <LogicalDisk::~LogicalDisk()>:
c0011b3e:	83 ec 0c             	sub    esp,0xc
c0011b41:	ba e0 10 02 c0       	mov    edx,0xc00210e0
c0011b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b4a:	89 10                	mov    DWORD PTR [eax],edx
c0011b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b50:	83 ec 0c             	sub    esp,0xc
c0011b53:	50                   	push   eax
c0011b54:	e8 33 e6 ff ff       	call   c001018c <Device::~Device()>
c0011b59:	83 c4 10             	add    esp,0x10
c0011b5c:	90                   	nop
c0011b5d:	83 c4 0c             	add    esp,0xc
c0011b60:	c3                   	ret    
c0011b61:	90                   	nop

c0011b62 <LogicalDisk::~LogicalDisk()>:
c0011b62:	83 ec 0c             	sub    esp,0xc
c0011b65:	83 ec 0c             	sub    esp,0xc
c0011b68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011b6c:	e8 cd ff ff ff       	call   c0011b3e <LogicalDisk::~LogicalDisk()>
c0011b71:	83 c4 10             	add    esp,0x10
c0011b74:	83 ec 08             	sub    esp,0x8
c0011b77:	68 74 01 00 00       	push   0x174
c0011b7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011b80:	e8 7a d2 ff ff       	call   c000edff <operator delete(void*, unsigned long)>
c0011b85:	83 c4 10             	add    esp,0x10
c0011b88:	83 c4 0c             	add    esp,0xc
c0011b8b:	c3                   	ret    

c0011b8c <LogicalDisk::open(int, int, void*)>:
c0011b8c:	83 ec 18             	sub    esp,0x18
c0011b8f:	68 5c 10 02 c0       	push   0xc002105c
c0011b94:	e8 db 2f 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c0011b99:	83 c8 ff             	or     eax,0xffffffff
c0011b9c:	83 c4 1c             	add    esp,0x1c
c0011b9f:	c3                   	ret    

c0011ba0 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0011ba0:	53                   	push   ebx
c0011ba1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ba5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ba9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011bad:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0011bb3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0011bb9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0011bbf:	77 10                	ja     c0011bd1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0011bc1:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0011bc7:	89 d3                	mov    ebx,edx
c0011bc9:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0011bcf:	72 05                	jb     c0011bd6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0011bd1:	83 c8 ff             	or     eax,0xffffffff
c0011bd4:	89 c2                	mov    edx,eax
c0011bd6:	5b                   	pop    ebx
c0011bd7:	c3                   	ret    

c0011bd8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0011bd8:	56                   	push   esi
c0011bd9:	83 c8 ff             	or     eax,0xffffffff
c0011bdc:	53                   	push   ebx
c0011bdd:	89 c2                	mov    edx,eax
c0011bdf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011be3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0011be7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011beb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011bf1:	77 27                	ja     c0011c1a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011bf3:	89 d8                	mov    eax,ebx
c0011bf5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0011bfb:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0011c01:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c06:	89 c2                	mov    edx,eax
c0011c08:	73 10                	jae    c0011c1a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011c0a:	89 c8                	mov    eax,ecx
c0011c0c:	89 da                	mov    edx,ebx
c0011c0e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0011c14:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0011c1a:	5b                   	pop    ebx
c0011c1b:	5e                   	pop    esi
c0011c1c:	c3                   	ret    
c0011c1d:	90                   	nop

c0011c1e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0011c1e:	83 ec 1c             	sub    esp,0x1c
c0011c21:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011c29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c31:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c35:	89 04 24             	mov    DWORD PTR [esp],eax
c0011c38:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011c3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011c44:	83 ec 08             	sub    esp,0x8
c0011c47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011c4b:	50                   	push   eax
c0011c4c:	e8 89 e8 ff ff       	call   c00104da <Device::Device(char const*)>
c0011c51:	83 c4 10             	add    esp,0x10
c0011c54:	ba e0 10 02 c0       	mov    edx,0xc00210e0
c0011c59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011c5d:	89 10                	mov    DWORD PTR [eax],edx
c0011c5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011c63:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011c6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011c6e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011c75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011c79:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0011c83:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011c87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c8f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0011c95:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0011c9b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011c9f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011ca2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011ca6:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0011cac:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0011cb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011cb6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011cba:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0011cc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011cc4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011cce:	90                   	nop
c0011ccf:	83 c4 1c             	add    esp,0x1c
c0011cd2:	c3                   	ret    
c0011cd3:	90                   	nop

c0011cd4 <LogicalDisk::assignDriveLetter()>:
c0011cd4:	55                   	push   ebp
c0011cd5:	57                   	push   edi
c0011cd6:	56                   	push   esi
c0011cd7:	53                   	push   ebx
c0011cd8:	83 ec 14             	sub    esp,0x14
c0011cdb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011cdf:	8b 3d 60 3a 02 c0    	mov    edi,DWORD PTR ds:0xc0023a60
c0011ce5:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0011ceb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0011cef:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0011cf5:	8b 3d 64 3a 02 c0    	mov    edi,DWORD PTR ds:0xc0023a64
c0011cfb:	3c 01                	cmp    al,0x1
c0011cfd:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0011d01:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0011d05:	19 c0                	sbb    eax,eax
c0011d07:	83 e0 02             	and    eax,0x2
c0011d0a:	83 c0 41             	add    eax,0x41
c0011d0d:	0f be e8             	movsx  ebp,al
c0011d10:	3c 43                	cmp    al,0x43
c0011d12:	75 10                	jne    c0011d24 <LogicalDisk::assignDriveLetter()+0x50>
c0011d14:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0011d1b:	75 5d                	jne    c0011d7a <LogicalDisk::assignDriveLetter()+0xa6>
c0011d1d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0011d22:	75 56                	jne    c0011d7a <LogicalDisk::assignDriveLetter()+0xa6>
c0011d24:	8d 75 bf             	lea    esi,[ebp-0x41]
c0011d27:	ba 01 00 00 00       	mov    edx,0x1
c0011d2c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0011d30:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0011d34:	d3 e2                	shl    edx,cl
c0011d36:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011d3a:	89 d7                	mov    edi,edx
c0011d3c:	89 d6                	mov    esi,edx
c0011d3e:	c1 ff 1f             	sar    edi,0x1f
c0011d41:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0011d45:	21 f9                	and    ecx,edi
c0011d47:	09 d1                	or     ecx,edx
c0011d49:	75 2f                	jne    c0011d7a <LogicalDisk::assignDriveLetter()+0xa6>
c0011d4b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0011d4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d53:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0011d59:	09 f2                	or     edx,esi
c0011d5b:	89 15 60 3a 02 c0    	mov    DWORD PTR ds:0xc0023a60,edx
c0011d61:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011d65:	09 fa                	or     edx,edi
c0011d67:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0011d6b:	89 15 64 3a 02 c0    	mov    DWORD PTR ds:0xc0023a64,edx
c0011d71:	89 1c bd 80 3a 02 c0 	mov    DWORD PTR [edi*4-0x3ffdc580],ebx
c0011d78:	eb 08                	jmp    c0011d82 <LogicalDisk::assignDriveLetter()+0xae>
c0011d7a:	45                   	inc    ebp
c0011d7b:	40                   	inc    eax
c0011d7c:	3c 5b                	cmp    al,0x5b
c0011d7e:	75 90                	jne    c0011d10 <LogicalDisk::assignDriveLetter()+0x3c>
c0011d80:	31 c0                	xor    eax,eax
c0011d82:	83 c4 14             	add    esp,0x14
c0011d85:	5b                   	pop    ebx
c0011d86:	5e                   	pop    esi
c0011d87:	5f                   	pop    edi
c0011d88:	5d                   	pop    ebp
c0011d89:	c3                   	ret    

c0011d8a <LogicalDisk::mount()>:
c0011d8a:	56                   	push   esi
c0011d8b:	53                   	push   ebx
c0011d8c:	51                   	push   ecx
c0011d8d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011d91:	8b 1d e0 35 02 c0    	mov    ebx,DWORD PTR ds:0xc00235e0
c0011d97:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0011da1:	85 db                	test   ebx,ebx
c0011da3:	74 50                	je     c0011df5 <LogicalDisk::mount()+0x6b>
c0011da5:	e8 75 5c 00 00       	call   c0017a1f <getIRQNestingLevel()>
c0011daa:	52                   	push   edx
c0011dab:	52                   	push   edx
c0011dac:	50                   	push   eax
c0011dad:	68 80 10 02 c0       	push   0xc0021080
c0011db2:	e8 28 d1 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0011db7:	83 c4 0c             	add    esp,0xc
c0011dba:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0011dc1:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011dc3:	83 e8 41             	sub    eax,0x41
c0011dc6:	50                   	push   eax
c0011dc7:	56                   	push   esi
c0011dc8:	53                   	push   ebx
c0011dc9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011dcc:	83 c4 10             	add    esp,0x10
c0011dcf:	84 c0                	test   al,al
c0011dd1:	74 08                	je     c0011ddb <LogicalDisk::mount()+0x51>
c0011dd3:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0011dd9:	eb 1c                	jmp    c0011df7 <LogicalDisk::mount()+0x6d>
c0011ddb:	e8 3f 5c 00 00       	call   c0017a1f <getIRQNestingLevel()>
c0011de0:	51                   	push   ecx
c0011de1:	51                   	push   ecx
c0011de2:	50                   	push   eax
c0011de3:	68 9b 10 02 c0       	push   0xc002109b
c0011de8:	e8 f2 d0 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0011ded:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011df0:	83 c4 10             	add    esp,0x10
c0011df3:	eb ac                	jmp    c0011da1 <LogicalDisk::mount()+0x17>
c0011df5:	31 c0                	xor    eax,eax
c0011df7:	5a                   	pop    edx
c0011df8:	5b                   	pop    ebx
c0011df9:	5e                   	pop    esi
c0011dfa:	c3                   	ret    
c0011dfb:	90                   	nop

c0011dfc <LogicalDisk::unmount()>:
c0011dfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e00:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011e0a:	c3                   	ret    
c0011e0b:	90                   	nop

c0011e0c <LogicalDisk::unassignDriveLetter()>:
c0011e0c:	57                   	push   edi
c0011e0d:	56                   	push   esi
c0011e0e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e12:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0011e19:	84 c9                	test   cl,cl
c0011e1b:	75 0f                	jne    c0011e2c <LogicalDisk::unassignDriveLetter()+0x20>
c0011e1d:	c7 44 24 0c b6 10 02 c0 	mov    DWORD PTR [esp+0xc],0xc00210b6
c0011e25:	5e                   	pop    esi
c0011e26:	5f                   	pop    edi
c0011e27:	e9 48 2d 00 00       	jmp    c0014b74 <Krnl::panic(char const*)>
c0011e2c:	83 e9 41             	sub    ecx,0x41
c0011e2f:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0011e36:	b8 01 00 00 00       	mov    eax,0x1
c0011e3b:	c7 04 8d 80 3a 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdc580],0x0
c0011e46:	d3 e0                	shl    eax,cl
c0011e48:	89 c7                	mov    edi,eax
c0011e4a:	f7 d0                	not    eax
c0011e4c:	c1 ff 1f             	sar    edi,0x1f
c0011e4f:	21 05 60 3a 02 c0    	and    DWORD PTR ds:0xc0023a60,eax
c0011e55:	89 fe                	mov    esi,edi
c0011e57:	f7 d6                	not    esi
c0011e59:	21 35 64 3a 02 c0    	and    DWORD PTR ds:0xc0023a64,esi
c0011e5f:	5e                   	pop    esi
c0011e60:	5f                   	pop    edi
c0011e61:	c3                   	ret    

c0011e62 <LogicalDisk::read(unsigned long long, int, void*)>:
c0011e62:	57                   	push   edi
c0011e63:	56                   	push   esi
c0011e64:	53                   	push   ebx
c0011e65:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011e69:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011e6d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011e71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011e75:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011e7b:	77 41                	ja     c0011ebe <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0011e7d:	99                   	cdq    
c0011e7e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0011e84:	01 c8                	add    eax,ecx
c0011e86:	11 da                	adc    edx,ebx
c0011e88:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0011e8e:	19 d7                	sbb    edi,edx
c0011e90:	72 33                	jb     c0011ec5 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0011e92:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0011e98:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0011e9e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011ea2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0011ea6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0011eac:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011eb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011eb6:	5b                   	pop    ebx
c0011eb7:	5e                   	pop    esi
c0011eb8:	5f                   	pop    edi
c0011eb9:	e9 9a 09 00 00       	jmp    c0012858 <VCache::read(unsigned long long, int, void*)>
c0011ebe:	b8 05 00 00 00       	mov    eax,0x5
c0011ec3:	eb 05                	jmp    c0011eca <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0011ec5:	b8 07 00 00 00       	mov    eax,0x7
c0011eca:	5b                   	pop    ebx
c0011ecb:	5e                   	pop    esi
c0011ecc:	5f                   	pop    edi
c0011ecd:	c3                   	ret    

c0011ece <LogicalDisk::write(unsigned long long, int, void*)>:
c0011ece:	57                   	push   edi
c0011ecf:	56                   	push   esi
c0011ed0:	53                   	push   ebx
c0011ed1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011ed5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011ed9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011edd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ee1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011ee7:	77 41                	ja     c0011f2a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0011ee9:	99                   	cdq    
c0011eea:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0011ef0:	01 c8                	add    eax,ecx
c0011ef2:	11 da                	adc    edx,ebx
c0011ef4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0011efa:	19 d7                	sbb    edi,edx
c0011efc:	72 33                	jb     c0011f31 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0011efe:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0011f04:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0011f0a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011f0e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0011f12:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0011f18:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011f1e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011f22:	5b                   	pop    ebx
c0011f23:	5e                   	pop    esi
c0011f24:	5f                   	pop    edi
c0011f25:	e9 4a 08 00 00       	jmp    c0012774 <VCache::write(unsigned long long, int, void*)>
c0011f2a:	b8 05 00 00 00       	mov    eax,0x5
c0011f2f:	eb 05                	jmp    c0011f36 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0011f31:	b8 07 00 00 00       	mov    eax,0x7
c0011f36:	5b                   	pop    ebx
c0011f37:	5e                   	pop    esi
c0011f38:	5f                   	pop    edi
c0011f39:	c3                   	ret    

c0011f3a <Mouse::Mouse(char const*)>:
c0011f3a:	83 ec 0c             	sub    esp,0xc
c0011f3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f41:	83 ec 08             	sub    esp,0x8
c0011f44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f48:	50                   	push   eax
c0011f49:	e8 8c e5 ff ff       	call   c00104da <Device::Device(char const*)>
c0011f4e:	83 c4 10             	add    esp,0x10
c0011f51:	ba 0c 11 02 c0       	mov    edx,0xc002110c
c0011f56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f5a:	89 10                	mov    DWORD PTR [eax],edx
c0011f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f60:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0011f6a:	90                   	nop
c0011f6b:	83 c4 0c             	add    esp,0xc
c0011f6e:	c3                   	ret    
c0011f6f:	90                   	nop

c0011f70 <Mouse::~Mouse()>:
c0011f70:	83 ec 0c             	sub    esp,0xc
c0011f73:	ba 0c 11 02 c0       	mov    edx,0xc002110c
c0011f78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f7c:	89 10                	mov    DWORD PTR [eax],edx
c0011f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f82:	83 ec 0c             	sub    esp,0xc
c0011f85:	50                   	push   eax
c0011f86:	e8 01 e2 ff ff       	call   c001018c <Device::~Device()>
c0011f8b:	83 c4 10             	add    esp,0x10
c0011f8e:	90                   	nop
c0011f8f:	83 c4 0c             	add    esp,0xc
c0011f92:	c3                   	ret    
c0011f93:	90                   	nop

c0011f94 <Mouse::~Mouse()>:
c0011f94:	83 ec 0c             	sub    esp,0xc
c0011f97:	83 ec 0c             	sub    esp,0xc
c0011f9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f9e:	e8 cd ff ff ff       	call   c0011f70 <Mouse::~Mouse()>
c0011fa3:	83 c4 10             	add    esp,0x10
c0011fa6:	83 ec 08             	sub    esp,0x8
c0011fa9:	68 58 01 00 00       	push   0x158
c0011fae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011fb2:	e8 48 ce ff ff       	call   c000edff <operator delete(void*, unsigned long)>
c0011fb7:	83 c4 10             	add    esp,0x10
c0011fba:	83 c4 0c             	add    esp,0xc
c0011fbd:	c3                   	ret    

c0011fbe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0011fbe:	55                   	push   ebp
c0011fbf:	57                   	push   edi
c0011fc0:	56                   	push   esi
c0011fc1:	53                   	push   ebx
c0011fc2:	81 ec 28 01 00 00    	sub    esp,0x128
c0011fc8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0011fcf:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0011fd6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0011fdd:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0011fe4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011fe8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0011fec:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0011ff3:	e8 d4 e5 ff ff       	call   c00105cc <Device::getName()>
c0011ff8:	5a                   	pop    edx
c0011ff9:	59                   	pop    ecx
c0011ffa:	50                   	push   eax
c0011ffb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0011fff:	55                   	push   ebp
c0012000:	e8 a2 e6 fe ff       	call   c00006a7 <strcpy>
c0012005:	5b                   	pop    ebx
c0012006:	58                   	pop    eax
c0012007:	68 30 11 02 c0       	push   0xc0021130
c001200c:	55                   	push   ebp
c001200d:	e8 4c e7 fe ff       	call   c000075e <strcat>
c0012012:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0012019:	e8 d2 cd ff ff       	call   c000edf0 <operator new(unsigned long)>
c001201e:	83 c4 0c             	add    esp,0xc
c0012021:	89 c3                	mov    ebx,eax
c0012023:	57                   	push   edi
c0012024:	56                   	push   esi
c0012025:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012029:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001202d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0012034:	55                   	push   ebp
c0012035:	50                   	push   eax
c0012036:	e8 e3 fb ff ff       	call   c0011c1e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001203b:	83 c4 14             	add    esp,0x14
c001203e:	53                   	push   ebx
c001203f:	e8 90 fc ff ff       	call   c0011cd4 <LogicalDisk::assignDriveLetter()>
c0012044:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012047:	e8 3e fd ff ff       	call   c0011d8a <LogicalDisk::mount()>
c001204c:	58                   	pop    eax
c001204d:	5a                   	pop    edx
c001204e:	53                   	push   ebx
c001204f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012056:	e8 8f e2 ff ff       	call   c00102ea <Device::addChild(Device*)>
c001205b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012061:	5b                   	pop    ebx
c0012062:	5e                   	pop    esi
c0012063:	5f                   	pop    edi
c0012064:	5d                   	pop    ebp
c0012065:	c3                   	ret    

c0012066 <createPartitionsForDisk(PhysicalDisk*)>:
c0012066:	55                   	push   ebp
c0012067:	57                   	push   edi
c0012068:	56                   	push   esi
c0012069:	53                   	push   ebx
c001206a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0012070:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0012077:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001207d:	3d 00 02 00 00       	cmp    eax,0x200
c0012082:	74 27                	je     c00120ab <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0012084:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001208a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0012090:	83 ec 10             	sub    esp,0x10
c0012093:	0f a4 f7 0a          	shld   edi,esi,0xa
c0012097:	99                   	cdq    
c0012098:	c1 e6 0a             	shl    esi,0xa
c001209b:	52                   	push   edx
c001209c:	89 fd                	mov    ebp,edi
c001209e:	50                   	push   eax
c001209f:	55                   	push   ebp
c00120a0:	56                   	push   esi
c00120a1:	e8 26 c5 00 00       	call   c001e5cc <__udivdi3>
c00120a6:	e9 b1 00 00 00       	jmp    c001215c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00120ab:	83 ec 0c             	sub    esp,0xc
c00120ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120b0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00120b4:	56                   	push   esi
c00120b5:	6a 01                	push   0x1
c00120b7:	6a 00                	push   0x0
c00120b9:	6a 00                	push   0x0
c00120bb:	53                   	push   ebx
c00120bc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00120bf:	83 c4 20             	add    esp,0x20
c00120c2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00120ca:	75 0a                	jne    c00120d6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00120cc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00120d4:	74 2c                	je     c0012102 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00120d6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00120dc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00120e2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00120e8:	83 ec 10             	sub    esp,0x10
c00120eb:	0f a4 c2 0a          	shld   edx,eax,0xa
c00120ef:	89 f7                	mov    edi,esi
c00120f1:	c1 e0 0a             	shl    eax,0xa
c00120f4:	c1 ff 1f             	sar    edi,0x1f
c00120f7:	57                   	push   edi
c00120f8:	56                   	push   esi
c00120f9:	52                   	push   edx
c00120fa:	50                   	push   eax
c00120fb:	e8 cc c4 00 00       	call   c001e5cc <__udivdi3>
c0012100:	eb 5a                	jmp    c001215c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012102:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0012109:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0012110:	83 e1 7f             	and    ecx,0x7f
c0012113:	83 e0 7f             	and    eax,0x7f
c0012116:	01 c1                	add    ecx,eax
c0012118:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001211f:	83 e0 7f             	and    eax,0x7f
c0012122:	01 c1                	add    ecx,eax
c0012124:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001212b:	83 e0 7f             	and    eax,0x7f
c001212e:	00 c1                	add    cl,al
c0012130:	74 41                	je     c0012173 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0012132:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012138:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001213e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012144:	83 ec 10             	sub    esp,0x10
c0012147:	0f a4 c2 0a          	shld   edx,eax,0xa
c001214b:	89 f7                	mov    edi,esi
c001214d:	c1 e0 0a             	shl    eax,0xa
c0012150:	c1 ff 1f             	sar    edi,0x1f
c0012153:	57                   	push   edi
c0012154:	56                   	push   esi
c0012155:	52                   	push   edx
c0012156:	50                   	push   eax
c0012157:	e8 70 c4 00 00       	call   c001e5cc <__udivdi3>
c001215c:	83 c4 14             	add    esp,0x14
c001215f:	52                   	push   edx
c0012160:	50                   	push   eax
c0012161:	6a 00                	push   0x0
c0012163:	6a 00                	push   0x0
c0012165:	53                   	push   ebx
c0012166:	e8 53 fe ff ff       	call   c0011fbe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001216b:	83 c4 20             	add    esp,0x20
c001216e:	e9 79 01 00 00       	jmp    c00122ec <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0012173:	89 f0                	mov    eax,esi
c0012175:	31 f6                	xor    esi,esi
c0012177:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001217e:	75 02                	jne    c0012182 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0012180:	89 f1                	mov    ecx,esi
c0012182:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0012189:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0012190:	c1 e2 08             	shl    edx,0x8
c0012193:	c1 e7 10             	shl    edi,0x10
c0012196:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001219e:	09 fa                	or     edx,edi
c00121a0:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00121a8:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00121af:	83 c0 10             	add    eax,0x10
c00121b2:	09 fa                	or     edx,edi
c00121b4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00121bb:	c1 e7 18             	shl    edi,0x18
c00121be:	09 fa                	or     edx,edi
c00121c0:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00121c7:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00121cb:	c1 e7 10             	shl    edi,0x10
c00121ce:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00121d5:	c1 e2 08             	shl    edx,0x8
c00121d8:	09 fa                	or     edx,edi
c00121da:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00121e1:	09 fa                	or     edx,edi
c00121e3:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00121ea:	c1 e7 18             	shl    edi,0x18
c00121ed:	09 fa                	or     edx,edi
c00121ef:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00121f3:	46                   	inc    esi
c00121f4:	83 fe 04             	cmp    esi,0x4
c00121f7:	0f 85 7a ff ff ff    	jne    c0012177 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00121fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012201:	83 f0 01             	xor    eax,0x1
c0012204:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012208:	75 57                	jne    c0012261 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001220a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001220e:	83 f0 01             	xor    eax,0x1
c0012211:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012215:	75 4a                	jne    c0012261 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012217:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001221b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012223:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001222b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012231:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012237:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001223d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012241:	89 f7                	mov    edi,esi
c0012243:	c1 e0 0a             	shl    eax,0xa
c0012246:	c1 ff 1f             	sar    edi,0x1f
c0012249:	57                   	push   edi
c001224a:	56                   	push   esi
c001224b:	52                   	push   edx
c001224c:	50                   	push   eax
c001224d:	e8 7a c3 00 00       	call   c001e5cc <__udivdi3>
c0012252:	83 c4 10             	add    esp,0x10
c0012255:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012259:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001225d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0012261:	84 c9                	test   cl,cl
c0012263:	74 53                	je     c00122b8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0012265:	0f b6 c9             	movzx  ecx,cl
c0012268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001226c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012270:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012274:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012278:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001227c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012280:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0012284:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0012288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001228c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0012290:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012294:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012298:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001229c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00122a0:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00122a4:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00122a8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00122ac:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00122b0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00122b4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00122b8:	31 ed                	xor    ebp,ebp
c00122ba:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00122be:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00122c2:	89 f8                	mov    eax,edi
c00122c4:	09 f0                	or     eax,esi
c00122c6:	74 1e                	je     c00122e6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00122c8:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00122cc:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00122d0:	89 d1                	mov    ecx,edx
c00122d2:	09 c1                	or     ecx,eax
c00122d4:	74 10                	je     c00122e6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00122d6:	83 ec 0c             	sub    esp,0xc
c00122d9:	57                   	push   edi
c00122da:	56                   	push   esi
c00122db:	52                   	push   edx
c00122dc:	50                   	push   eax
c00122dd:	53                   	push   ebx
c00122de:	e8 db fc ff ff       	call   c0011fbe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00122e3:	83 c4 20             	add    esp,0x20
c00122e6:	45                   	inc    ebp
c00122e7:	83 fd 04             	cmp    ebp,0x4
c00122ea:	75 ce                	jne    c00122ba <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00122ec:	81 c4 5c 02 00 00    	add    esp,0x25c
c00122f2:	5b                   	pop    ebx
c00122f3:	5e                   	pop    esi
c00122f4:	5f                   	pop    edi
c00122f5:	5d                   	pop    ebp
c00122f6:	c3                   	ret    
c00122f7:	90                   	nop

c00122f8 <Timer::Timer(char const*)>:
c00122f8:	83 ec 0c             	sub    esp,0xc
c00122fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122ff:	83 ec 08             	sub    esp,0x8
c0012302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012306:	50                   	push   eax
c0012307:	e8 ce e1 ff ff       	call   c00104da <Device::Device(char const*)>
c001230c:	83 c4 10             	add    esp,0x10
c001230f:	ba 44 11 02 c0       	mov    edx,0xc0021144
c0012314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012318:	89 10                	mov    DWORD PTR [eax],edx
c001231a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001231e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0012328:	90                   	nop
c0012329:	83 c4 0c             	add    esp,0xc
c001232c:	c3                   	ret    
c001232d:	90                   	nop

c001232e <Timer::~Timer()>:
c001232e:	83 ec 0c             	sub    esp,0xc
c0012331:	ba 44 11 02 c0       	mov    edx,0xc0021144
c0012336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001233a:	89 10                	mov    DWORD PTR [eax],edx
c001233c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012340:	83 ec 0c             	sub    esp,0xc
c0012343:	50                   	push   eax
c0012344:	e8 43 de ff ff       	call   c001018c <Device::~Device()>
c0012349:	83 c4 10             	add    esp,0x10
c001234c:	90                   	nop
c001234d:	83 c4 0c             	add    esp,0xc
c0012350:	c3                   	ret    
c0012351:	90                   	nop

c0012352 <Timer::~Timer()>:
c0012352:	83 ec 0c             	sub    esp,0xc
c0012355:	83 ec 0c             	sub    esp,0xc
c0012358:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001235c:	e8 cd ff ff ff       	call   c001232e <Timer::~Timer()>
c0012361:	83 c4 10             	add    esp,0x10
c0012364:	83 ec 08             	sub    esp,0x8
c0012367:	68 5c 01 00 00       	push   0x15c
c001236c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012370:	e8 8a ca ff ff       	call   c000edff <operator delete(void*, unsigned long)>
c0012375:	83 c4 10             	add    esp,0x10
c0012378:	83 c4 0c             	add    esp,0xc
c001237b:	c3                   	ret    

c001237c <Timer::read()>:
c001237c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012380:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012386:	c3                   	ret    

c0012387 <timerHandler(unsigned long long)>:
c0012387:	55                   	push   ebp
c0012388:	57                   	push   edi
c0012389:	56                   	push   esi
c001238a:	53                   	push   ebx
c001238b:	83 ec 0c             	sub    esp,0xc
c001238e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012392:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012396:	01 35 f0 3a 02 c0    	add    DWORD PTR ds:0xc0023af0,esi
c001239c:	11 3d f4 3a 02 c0    	adc    DWORD PTR ds:0xc0023af4,edi
c00123a2:	80 3d 0d 35 02 c0 00 	cmp    BYTE PTR ds:0xc002350d,0x0
c00123a9:	0f 84 07 01 00 00    	je     c00124b6 <timerHandler(unsigned long long)+0x12f>
c00123af:	e8 a7 56 00 00       	call   c0017a5b <lockStuff()>
c00123b4:	83 ec 0c             	sub    esp,0xc
c00123b7:	68 bc 48 02 c0       	push   0xc00248bc
c00123bc:	e8 df c8 00 00       	call   c001eca0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00123c1:	c7 04 24 bc 48 02 c0 	mov    DWORD PTR [esp],0xc00248bc
c00123c8:	89 c3                	mov    ebx,eax
c00123ca:	e8 d9 c8 00 00       	call   c001eca8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00123cf:	83 c4 10             	add    esp,0x10
c00123d2:	84 c0                	test   al,al
c00123d4:	74 60                	je     c0012436 <timerHandler(unsigned long long)+0xaf>
c00123d6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00123dc:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00123df:	85 c0                	test   eax,eax
c00123e1:	0f 85 91 00 00 00    	jne    c0012478 <timerHandler(unsigned long long)+0xf1>
c00123e7:	e9 be 00 00 00       	jmp    c00124aa <timerHandler(unsigned long long)+0x123>
c00123ec:	83 ec 0c             	sub    esp,0xc
c00123ef:	55                   	push   ebp
c00123f0:	e8 4f 5e 00 00       	call   c0018244 <unblockTask(ThreadControlBlock*)>
c00123f5:	83 c4 10             	add    esp,0x10
c00123f8:	39 eb                	cmp    ebx,ebp
c00123fa:	75 12                	jne    c001240e <timerHandler(unsigned long long)+0x87>
c00123fc:	83 ec 0c             	sub    esp,0xc
c00123ff:	68 bc 48 02 c0       	push   0xc00248bc
c0012404:	e8 97 c8 00 00       	call   c001eca0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012409:	89 c3                	mov    ebx,eax
c001240b:	83 c4 10             	add    esp,0x10
c001240e:	83 ec 0c             	sub    esp,0xc
c0012411:	68 bc 48 02 c0       	push   0xc00248bc
c0012416:	e8 8d c8 00 00       	call   c001eca8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001241b:	83 c4 10             	add    esp,0x10
c001241e:	84 c0                	test   al,al
c0012420:	75 b4                	jne    c00123d6 <timerHandler(unsigned long long)+0x4f>
c0012422:	83 ec 0c             	sub    esp,0xc
c0012425:	68 bc 48 02 c0       	push   0xc00248bc
c001242a:	e8 71 c8 00 00       	call   c001eca0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001242f:	83 c4 10             	add    esp,0x10
c0012432:	39 d8                	cmp    eax,ebx
c0012434:	74 a0                	je     c00123d6 <timerHandler(unsigned long long)+0x4f>
c0012436:	83 ec 0c             	sub    esp,0xc
c0012439:	68 bc 48 02 c0       	push   0xc00248bc
c001243e:	e8 5d c8 00 00       	call   c001eca0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012443:	c7 04 24 bc 48 02 c0 	mov    DWORD PTR [esp],0xc00248bc
c001244a:	89 c5                	mov    ebp,eax
c001244c:	e8 73 c8 00 00       	call   c001ecc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012451:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0012454:	83 c4 10             	add    esp,0x10
c0012457:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001245a:	39 15 f0 3a 02 c0    	cmp    DWORD PTR ds:0xc0023af0,edx
c0012460:	a1 f4 3a 02 c0       	mov    eax,ds:0xc0023af4
c0012465:	19 c8                	sbb    eax,ecx
c0012467:	73 83                	jae    c00123ec <timerHandler(unsigned long long)+0x65>
c0012469:	50                   	push   eax
c001246a:	50                   	push   eax
c001246b:	55                   	push   ebp
c001246c:	68 bc 48 02 c0       	push   0xc00248bc
c0012471:	e8 fc c8 00 00       	call   c001ed72 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012476:	eb 93                	jmp    c001240b <timerHandler(unsigned long long)+0x84>
c0012478:	80 3d 0c 35 02 c0 00 	cmp    BYTE PTR ds:0xc002350c,0x0
c001247f:	74 29                	je     c00124aa <timerHandler(unsigned long long)+0x123>
c0012481:	39 c6                	cmp    esi,eax
c0012483:	bb 00 00 00 00       	mov    ebx,0x0
c0012488:	19 df                	sbb    edi,ebx
c001248a:	72 19                	jb     c00124a5 <timerHandler(unsigned long long)+0x11e>
c001248c:	e8 a3 55 00 00       	call   c0017a34 <lockScheduler()>
c0012491:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012496:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0012499:	e8 ca 58 00 00       	call   c0017d68 <schedule()>
c001249e:	e8 93 55 00 00       	call   c0017a36 <unlockScheduler()>
c00124a3:	eb 05                	jmp    c00124aa <timerHandler(unsigned long long)+0x123>
c00124a5:	29 f0                	sub    eax,esi
c00124a7:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00124aa:	83 c4 0c             	add    esp,0xc
c00124ad:	5b                   	pop    ebx
c00124ae:	5e                   	pop    esi
c00124af:	5f                   	pop    edi
c00124b0:	5d                   	pop    ebp
c00124b1:	e9 37 59 00 00       	jmp    c0017ded <unlockStuff()>
c00124b6:	83 c4 0c             	add    esp,0xc
c00124b9:	5b                   	pop    ebx
c00124ba:	5e                   	pop    esi
c00124bb:	5f                   	pop    edi
c00124bc:	5d                   	pop    ebp
c00124bd:	c3                   	ret    

c00124be <setupTimer(int)>:
c00124be:	57                   	push   edi
c00124bf:	56                   	push   esi
c00124c0:	53                   	push   ebx
c00124c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00124c5:	e8 a1 19 00 00       	call   c0013e6b <getCPUNumber()>
c00124ca:	85 c0                	test   eax,eax
c00124cc:	74 32                	je     c0012500 <setupTimer(int)+0x42>
c00124ce:	83 ec 0c             	sub    esp,0xc
c00124d1:	68 60 01 00 00       	push   0x160
c00124d6:	e8 15 c9 ff ff       	call   c000edf0 <operator new(unsigned long)>
c00124db:	89 04 24             	mov    DWORD PTR [esp],eax
c00124de:	89 c3                	mov    ebx,eax
c00124e0:	e8 85 bb 00 00       	call   c001e06a <APICTimer::APICTimer()>
c00124e5:	6a 00                	push   0x0
c00124e7:	6a 00                	push   0x0
c00124e9:	56                   	push   esi
c00124ea:	53                   	push   ebx
c00124eb:	e8 82 ba 00 00       	call   c001df72 <APICTimer::open(int, int, void*)>
c00124f0:	83 c4 20             	add    esp,0x20
c00124f3:	e8 76 19 00 00       	call   c0013e6e <thisCPU()>
c00124f8:	56                   	push   esi
c00124f9:	56                   	push   esi
c00124fa:	53                   	push   ebx
c00124fb:	e9 96 00 00 00       	jmp    c0012596 <setupTimer(int)+0xd8>
c0012500:	e8 69 19 00 00       	call   c0013e6e <thisCPU()>
c0012505:	83 ec 0c             	sub    esp,0xc
c0012508:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001250e:	e8 b9 e0 ff ff       	call   c00105cc <Device::getName()>
c0012513:	83 c4 10             	add    esp,0x10
c0012516:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012519:	0f 85 87 00 00 00    	jne    c00125a6 <setupTimer(int)+0xe8>
c001251f:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c0012524:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001252b:	74 79                	je     c00125a6 <setupTimer(int)+0xe8>
c001252d:	83 ec 0c             	sub    esp,0xc
c0012530:	68 5c 01 00 00       	push   0x15c
c0012535:	e8 b6 c8 ff ff       	call   c000edf0 <operator new(unsigned long)>
c001253a:	89 04 24             	mov    DWORD PTR [esp],eax
c001253d:	89 c3                	mov    ebx,eax
c001253f:	e8 76 bc 00 00       	call   c001e1ba <PIT::PIT()>
c0012544:	59                   	pop    ecx
c0012545:	5f                   	pop    edi
c0012546:	53                   	push   ebx
c0012547:	ff 35 08 35 02 c0    	push   DWORD PTR ds:0xc0023508
c001254d:	e8 98 dd ff ff       	call   c00102ea <Device::addChild(Device*)>
c0012552:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012554:	6a 00                	push   0x0
c0012556:	6a 00                	push   0x0
c0012558:	56                   	push   esi
c0012559:	53                   	push   ebx
c001255a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001255d:	83 c4 14             	add    esp,0x14
c0012560:	68 60 01 00 00       	push   0x160
c0012565:	e8 86 c8 ff ff       	call   c000edf0 <operator new(unsigned long)>
c001256a:	89 04 24             	mov    DWORD PTR [esp],eax
c001256d:	89 c7                	mov    edi,eax
c001256f:	e8 f6 ba 00 00       	call   c001e06a <APICTimer::APICTimer()>
c0012574:	6a 00                	push   0x0
c0012576:	6a 00                	push   0x0
c0012578:	56                   	push   esi
c0012579:	57                   	push   edi
c001257a:	e8 f3 b9 00 00       	call   c001df72 <APICTimer::open(int, int, void*)>
c001257f:	83 c4 20             	add    esp,0x20
c0012582:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012584:	6a 00                	push   0x0
c0012586:	6a 00                	push   0x0
c0012588:	6a 00                	push   0x0
c001258a:	53                   	push   ebx
c001258b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001258e:	e8 db 18 00 00       	call   c0013e6e <thisCPU()>
c0012593:	5a                   	pop    edx
c0012594:	59                   	pop    ecx
c0012595:	57                   	push   edi
c0012596:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001259c:	e8 49 dd ff ff       	call   c00102ea <Device::addChild(Device*)>
c00125a1:	83 c4 10             	add    esp,0x10
c00125a4:	eb 33                	jmp    c00125d9 <setupTimer(int)+0x11b>
c00125a6:	83 ec 0c             	sub    esp,0xc
c00125a9:	68 5c 01 00 00       	push   0x15c
c00125ae:	e8 3d c8 ff ff       	call   c000edf0 <operator new(unsigned long)>
c00125b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00125b6:	89 c3                	mov    ebx,eax
c00125b8:	e8 fd bb 00 00       	call   c001e1ba <PIT::PIT()>
c00125bd:	58                   	pop    eax
c00125be:	5a                   	pop    edx
c00125bf:	53                   	push   ebx
c00125c0:	ff 35 08 35 02 c0    	push   DWORD PTR ds:0xc0023508
c00125c6:	e8 1f dd ff ff       	call   c00102ea <Device::addChild(Device*)>
c00125cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00125cd:	6a 00                	push   0x0
c00125cf:	6a 00                	push   0x0
c00125d1:	56                   	push   esi
c00125d2:	53                   	push   ebx
c00125d3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00125d6:	83 c4 20             	add    esp,0x20
c00125d9:	89 d8                	mov    eax,ebx
c00125db:	5b                   	pop    ebx
c00125dc:	5e                   	pop    esi
c00125dd:	5f                   	pop    edi
c00125de:	c3                   	ret    
c00125df:	90                   	nop

c00125e0 <VCache::VCache(PhysicalDisk*)>:
c00125e0:	53                   	push   ebx
c00125e1:	83 ec 08             	sub    esp,0x8
c00125e4:	ba 74 11 02 c0       	mov    edx,0xc0021174
c00125e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125ed:	89 10                	mov    DWORD PTR [eax],edx
c00125ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125f3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00125fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125fe:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0012605:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012609:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0012610:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0012617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001261b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0012622:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001262d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0012634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012638:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001263c:	83 ec 0c             	sub    esp,0xc
c001263f:	6a 10                	push   0x10
c0012641:	e8 aa c7 ff ff       	call   c000edf0 <operator new(unsigned long)>
c0012646:	83 c4 10             	add    esp,0x10
c0012649:	89 c3                	mov    ebx,eax
c001264b:	83 ec 0c             	sub    esp,0xc
c001264e:	53                   	push   ebx
c001264f:	e8 f8 54 00 00       	call   c0017b4c <Mutex::Mutex()>
c0012654:	83 c4 10             	add    esp,0x10
c0012657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001265b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001265e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012662:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012666:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012669:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001266d:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0012674:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012678:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001267e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012682:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012685:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012689:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001268f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012695:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012699:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001269c:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126a3:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00126a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00126ab:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00126b1:	c1 e0 06             	shl    eax,0x6
c00126b4:	83 ec 0c             	sub    esp,0xc
c00126b7:	50                   	push   eax
c00126b8:	e8 61 95 ff ff       	call   c000bc1e <malloc>
c00126bd:	83 c4 10             	add    esp,0x10
c00126c0:	89 c2                	mov    edx,eax
c00126c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126c6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00126c9:	90                   	nop
c00126ca:	83 c4 08             	add    esp,0x8
c00126cd:	5b                   	pop    ebx
c00126ce:	c3                   	ret    
c00126cf:	90                   	nop

c00126d0 <VCache::writeWriteBuffer()>:
c00126d0:	53                   	push   ebx
c00126d1:	83 ec 14             	sub    esp,0x14
c00126d4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00126d8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00126db:	8b 10                	mov    edx,DWORD PTR [eax]
c00126dd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00126e0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00126e3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00126e6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00126e9:	50                   	push   eax
c00126ea:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00126ed:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00126f4:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00126fb:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00126ff:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0012706:	83 c4 28             	add    esp,0x28
c0012709:	5b                   	pop    ebx
c001270a:	c3                   	ret    
c001270b:	90                   	nop

c001270c <VCache::~VCache()>:
c001270c:	83 ec 0c             	sub    esp,0xc
c001270f:	ba 74 11 02 c0       	mov    edx,0xc0021174
c0012714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012718:	89 10                	mov    DWORD PTR [eax],edx
c001271a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001271e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0012721:	84 c0                	test   al,al
c0012723:	74 0f                	je     c0012734 <VCache::~VCache()+0x28>
c0012725:	83 ec 0c             	sub    esp,0xc
c0012728:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001272c:	e8 9f ff ff ff       	call   c00126d0 <VCache::writeWriteBuffer()>
c0012731:	83 c4 10             	add    esp,0x10
c0012734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012738:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001273b:	83 ec 0c             	sub    esp,0xc
c001273e:	50                   	push   eax
c001273f:	e8 ea 94 ff ff       	call   c000bc2e <free>
c0012744:	83 c4 10             	add    esp,0x10
c0012747:	90                   	nop
c0012748:	83 c4 0c             	add    esp,0xc
c001274b:	c3                   	ret    

c001274c <VCache::~VCache()>:
c001274c:	83 ec 0c             	sub    esp,0xc
c001274f:	83 ec 0c             	sub    esp,0xc
c0012752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012756:	e8 b1 ff ff ff       	call   c001270c <VCache::~VCache()>
c001275b:	83 c4 10             	add    esp,0x10
c001275e:	83 ec 08             	sub    esp,0x8
c0012761:	6a 30                	push   0x30
c0012763:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012767:	e8 93 c6 ff ff       	call   c000edff <operator delete(void*, unsigned long)>
c001276c:	83 c4 10             	add    esp,0x10
c001276f:	83 c4 0c             	add    esp,0xc
c0012772:	c3                   	ret    
c0012773:	90                   	nop

c0012774 <VCache::write(unsigned long long, int, void*)>:
c0012774:	55                   	push   ebp
c0012775:	57                   	push   edi
c0012776:	56                   	push   esi
c0012777:	53                   	push   ebx
c0012778:	83 ec 28             	sub    esp,0x28
c001277b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001277f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012783:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012787:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001278b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001278e:	e8 8d 59 00 00       	call   c0018120 <Semaphore::acquire()>
c0012793:	83 c4 10             	add    esp,0x10
c0012796:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001279a:	74 66                	je     c0012802 <VCache::write(unsigned long long, int, void*)+0x8e>
c001279c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001279f:	99                   	cdq    
c00127a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127a4:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00127a7:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00127aa:	89 c1                	mov    ecx,eax
c00127ac:	89 d0                	mov    eax,edx
c00127ae:	31 f1                	xor    ecx,esi
c00127b0:	31 f8                	xor    eax,edi
c00127b2:	89 ca                	mov    edx,ecx
c00127b4:	09 c2                	or     edx,eax
c00127b6:	75 3e                	jne    c00127f6 <VCache::write(unsigned long long, int, void*)+0x82>
c00127b8:	83 fd 01             	cmp    ebp,0x1
c00127bb:	75 39                	jne    c00127f6 <VCache::write(unsigned long long, int, void*)+0x82>
c00127bd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00127c0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00127c6:	51                   	push   ecx
c00127c7:	50                   	push   eax
c00127c8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00127cc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00127d0:	0f af c8             	imul   ecx,eax
c00127d3:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00127d6:	51                   	push   ecx
c00127d7:	e8 f6 dd fe ff       	call   c00005d2 <memcpy>
c00127dc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00127df:	83 c4 10             	add    esp,0x10
c00127e2:	40                   	inc    eax
c00127e3:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00127e6:	83 f8 40             	cmp    eax,0x40
c00127e9:	75 57                	jne    c0012842 <VCache::write(unsigned long long, int, void*)+0xce>
c00127eb:	83 ec 0c             	sub    esp,0xc
c00127ee:	53                   	push   ebx
c00127ef:	e8 dc fe ff ff       	call   c00126d0 <VCache::writeWriteBuffer()>
c00127f4:	eb 34                	jmp    c001282a <VCache::write(unsigned long long, int, void*)+0xb6>
c00127f6:	83 ec 0c             	sub    esp,0xc
c00127f9:	53                   	push   ebx
c00127fa:	e8 d1 fe ff ff       	call   c00126d0 <VCache::writeWriteBuffer()>
c00127ff:	83 c4 10             	add    esp,0x10
c0012802:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012805:	83 fd 3f             	cmp    ebp,0x3f
c0012808:	7f 25                	jg     c001282f <VCache::write(unsigned long long, int, void*)+0xbb>
c001280a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001280d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0012810:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0012813:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0012817:	52                   	push   edx
c0012818:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001281e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012822:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012825:	e8 a8 dd fe ff       	call   c00005d2 <memcpy>
c001282a:	83 c4 10             	add    esp,0x10
c001282d:	eb 13                	jmp    c0012842 <VCache::write(unsigned long long, int, void*)+0xce>
c001282f:	83 ec 0c             	sub    esp,0xc
c0012832:	8b 10                	mov    edx,DWORD PTR [eax]
c0012834:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012838:	55                   	push   ebp
c0012839:	57                   	push   edi
c001283a:	56                   	push   esi
c001283b:	50                   	push   eax
c001283c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001283f:	83 c4 20             	add    esp,0x20
c0012842:	83 ec 0c             	sub    esp,0xc
c0012845:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012848:	e8 dd 5e 00 00       	call   c001872a <Semaphore::release()>
c001284d:	83 c4 2c             	add    esp,0x2c
c0012850:	31 c0                	xor    eax,eax
c0012852:	5b                   	pop    ebx
c0012853:	5e                   	pop    esi
c0012854:	5f                   	pop    edi
c0012855:	5d                   	pop    ebp
c0012856:	c3                   	ret    
c0012857:	90                   	nop

c0012858 <VCache::read(unsigned long long, int, void*)>:
c0012858:	57                   	push   edi
c0012859:	56                   	push   esi
c001285a:	53                   	push   ebx
c001285b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001285f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012863:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012867:	83 ec 0c             	sub    esp,0xc
c001286a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001286d:	e8 ae 58 00 00       	call   c0018120 <Semaphore::acquire()>
c0012872:	83 c4 10             	add    esp,0x10
c0012875:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0012879:	74 0c                	je     c0012887 <VCache::read(unsigned long long, int, void*)+0x2f>
c001287b:	83 ec 0c             	sub    esp,0xc
c001287e:	53                   	push   ebx
c001287f:	e8 4c fe ff ff       	call   c00126d0 <VCache::writeWriteBuffer()>
c0012884:	83 c4 10             	add    esp,0x10
c0012887:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001288a:	83 ec 0c             	sub    esp,0xc
c001288d:	8b 10                	mov    edx,DWORD PTR [eax]
c001288f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012893:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012897:	57                   	push   edi
c0012898:	56                   	push   esi
c0012899:	50                   	push   eax
c001289a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001289d:	83 c4 14             	add    esp,0x14
c00128a0:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00128a3:	e8 82 5e 00 00       	call   c001872a <Semaphore::release()>
c00128a8:	83 c4 10             	add    esp,0x10
c00128ab:	31 c0                	xor    eax,eax
c00128ad:	5b                   	pop    ebx
c00128ae:	5e                   	pop    esi
c00128af:	5f                   	pop    edi
c00128b0:	c3                   	ret    
c00128b1:	90                   	nop

c00128b2 <Video::putrect(int, int, int, int, unsigned int)>:
c00128b2:	55                   	push   ebp
c00128b3:	57                   	push   edi
c00128b4:	56                   	push   esi
c00128b5:	53                   	push   ebx
c00128b6:	83 ec 1c             	sub    esp,0x1c
c00128b9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00128bd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00128c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00128c5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00128c9:	01 e8                	add    eax,ebp
c00128cb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00128cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00128d3:	01 df                	add    edi,ebx
c00128d5:	39 fb                	cmp    ebx,edi
c00128d7:	7d 1b                	jge    c00128f4 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00128d9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00128dd:	7d 12                	jge    c00128f1 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00128df:	8b 16                	mov    edx,DWORD PTR [esi]
c00128e1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00128e5:	53                   	push   ebx
c00128e6:	55                   	push   ebp
c00128e7:	45                   	inc    ebp
c00128e8:	56                   	push   esi
c00128e9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00128ec:	83 c4 10             	add    esp,0x10
c00128ef:	eb e8                	jmp    c00128d9 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c00128f1:	43                   	inc    ebx
c00128f2:	eb e1                	jmp    c00128d5 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c00128f4:	83 c4 1c             	add    esp,0x1c
c00128f7:	5b                   	pop    ebx
c00128f8:	5e                   	pop    esi
c00128f9:	5f                   	pop    edi
c00128fa:	5d                   	pop    ebp
c00128fb:	c3                   	ret    

c00128fc <Video::blit(unsigned int*, int, int, int, int)>:
c00128fc:	55                   	push   ebp
c00128fd:	57                   	push   edi
c00128fe:	56                   	push   esi
c00128ff:	53                   	push   ebx
c0012900:	83 ec 1c             	sub    esp,0x1c
c0012903:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012907:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001290b:	85 c0                	test   eax,eax
c001290d:	79 02                	jns    c0012911 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001290f:	31 c0                	xor    eax,eax
c0012911:	c1 e0 02             	shl    eax,0x2
c0012914:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012918:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001291c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012920:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0012924:	39 d8                	cmp    eax,ebx
c0012926:	7e 49                	jle    c0012971 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0012928:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001292e:	7c 41                	jl     c0012971 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0012930:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012934:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012938:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001293c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0012940:	39 f9                	cmp    ecx,edi
c0012942:	7e 22                	jle    c0012966 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0012944:	83 c5 04             	add    ebp,0x4
c0012947:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001294d:	7c 14                	jl     c0012963 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001294f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012951:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0012954:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012958:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001295c:	56                   	push   esi
c001295d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0012960:	83 c4 10             	add    esp,0x10
c0012963:	47                   	inc    edi
c0012964:	eb d2                	jmp    c0012938 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0012966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001296a:	43                   	inc    ebx
c001296b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001296f:	eb ab                	jmp    c001291c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0012971:	83 c4 1c             	add    esp,0x1c
c0012974:	5b                   	pop    ebx
c0012975:	5e                   	pop    esi
c0012976:	5f                   	pop    edi
c0012977:	5d                   	pop    ebp
c0012978:	c3                   	ret    
c0012979:	90                   	nop

c001297a <Video::clearScreen(unsigned int)>:
c001297a:	57                   	push   edi
c001297b:	56                   	push   esi
c001297c:	53                   	push   ebx
c001297d:	31 db                	xor    ebx,ebx
c001297f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012983:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0012989:	7e 1f                	jle    c00129aa <Video::clearScreen(unsigned int)+0x30>
c001298b:	31 ff                	xor    edi,edi
c001298d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012993:	7e 12                	jle    c00129a7 <Video::clearScreen(unsigned int)+0x2d>
c0012995:	8b 06                	mov    eax,DWORD PTR [esi]
c0012997:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001299b:	53                   	push   ebx
c001299c:	57                   	push   edi
c001299d:	47                   	inc    edi
c001299e:	56                   	push   esi
c001299f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00129a2:	83 c4 10             	add    esp,0x10
c00129a5:	eb e6                	jmp    c001298d <Video::clearScreen(unsigned int)+0x13>
c00129a7:	43                   	inc    ebx
c00129a8:	eb d9                	jmp    c0012983 <Video::clearScreen(unsigned int)+0x9>
c00129aa:	5b                   	pop    ebx
c00129ab:	5e                   	pop    esi
c00129ac:	5f                   	pop    edi
c00129ad:	c3                   	ret    

c00129ae <Video::putpixel(int, int, unsigned int)>:
c00129ae:	c7 44 24 04 7c 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc002117c
c00129b6:	e9 24 c5 ff ff       	jmp    c000eedf <Dbg::kprintf(char const*, ...)>
c00129bb:	90                   	nop

c00129bc <Video::Video(char const*)>:
c00129bc:	83 ec 0c             	sub    esp,0xc
c00129bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129c3:	83 ec 08             	sub    esp,0x8
c00129c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129ca:	50                   	push   eax
c00129cb:	e8 0a db ff ff       	call   c00104da <Device::Device(char const*)>
c00129d0:	83 c4 10             	add    esp,0x10
c00129d3:	ba 94 11 02 c0       	mov    edx,0xc0021194
c00129d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129dc:	89 10                	mov    DWORD PTR [eax],edx
c00129de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129e2:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00129ec:	90                   	nop
c00129ed:	83 c4 0c             	add    esp,0xc
c00129f0:	c3                   	ret    
c00129f1:	90                   	nop

c00129f2 <Video::~Video()>:
c00129f2:	83 ec 0c             	sub    esp,0xc
c00129f5:	ba 94 11 02 c0       	mov    edx,0xc0021194
c00129fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129fe:	89 10                	mov    DWORD PTR [eax],edx
c0012a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a04:	83 ec 0c             	sub    esp,0xc
c0012a07:	50                   	push   eax
c0012a08:	e8 7f d7 ff ff       	call   c001018c <Device::~Device()>
c0012a0d:	83 c4 10             	add    esp,0x10
c0012a10:	90                   	nop
c0012a11:	83 c4 0c             	add    esp,0xc
c0012a14:	c3                   	ret    
c0012a15:	90                   	nop

c0012a16 <Video::~Video()>:
c0012a16:	83 ec 0c             	sub    esp,0xc
c0012a19:	83 ec 0c             	sub    esp,0xc
c0012a1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a20:	e8 cd ff ff ff       	call   c00129f2 <Video::~Video()>
c0012a25:	83 c4 10             	add    esp,0x10
c0012a28:	83 ec 08             	sub    esp,0x8
c0012a2b:	68 64 01 00 00       	push   0x164
c0012a30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a34:	e8 c6 c3 ff ff       	call   c000edff <operator delete(void*, unsigned long)>
c0012a39:	83 c4 10             	add    esp,0x10
c0012a3c:	83 c4 0c             	add    esp,0xc
c0012a3f:	c3                   	ret    

c0012a40 <Video::isMonochrome()>:
c0012a40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a44:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0012a4a:	c3                   	ret    
c0012a4b:	90                   	nop

c0012a4c <Video::getWidth()>:
c0012a4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a50:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012a56:	c3                   	ret    
c0012a57:	90                   	nop

c0012a58 <Video::getHeight()>:
c0012a58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a5c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012a62:	c3                   	ret    
c0012a63:	90                   	nop

c0012a64 <Video::drawCursor(int, int, unsigned char*, int)>:
c0012a64:	55                   	push   ebp
c0012a65:	57                   	push   edi
c0012a66:	56                   	push   esi
c0012a67:	53                   	push   ebx
c0012a68:	83 ec 2c             	sub    esp,0x2c
c0012a6b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012a6f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012a73:	83 f8 01             	cmp    eax,0x1
c0012a76:	19 c9                	sbb    ecx,ecx
c0012a78:	31 db                	xor    ebx,ebx
c0012a7a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0012a7e:	89 cd                	mov    ebp,ecx
c0012a80:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0012a88:	f7 d5                	not    ebp
c0012a8a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0012a90:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012a94:	01 d8                	add    eax,ebx
c0012a96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a9a:	56                   	push   esi
c0012a9b:	e8 b8 ff ff ff       	call   c0012a58 <Video::getHeight()>
c0012aa0:	59                   	pop    ecx
c0012aa1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012aa5:	7e 70                	jle    c0012b17 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0012aa7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012aab:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012aaf:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0012ab2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012ab6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012aba:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0012ac1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012ac5:	89 f8                	mov    eax,edi
c0012ac7:	83 c0 20             	add    eax,0x20
c0012aca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012ace:	56                   	push   esi
c0012acf:	e8 78 ff ff ff       	call   c0012a4c <Video::getWidth()>
c0012ad4:	5a                   	pop    edx
c0012ad5:	39 c7                	cmp    edi,eax
c0012ad7:	7d 34                	jge    c0012b0d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0012ad9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0012ade:	74 05                	je     c0012ae5 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0012ae0:	8b 06                	mov    eax,DWORD PTR [esi]
c0012ae2:	55                   	push   ebp
c0012ae3:	eb 0d                	jmp    c0012af2 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0012ae5:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0012aea:	74 12                	je     c0012afe <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0012aec:	8b 06                	mov    eax,DWORD PTR [esi]
c0012aee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012af2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012af6:	57                   	push   edi
c0012af7:	56                   	push   esi
c0012af8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012afb:	83 c4 10             	add    esp,0x10
c0012afe:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0012b02:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0012b06:	47                   	inc    edi
c0012b07:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0012b0b:	75 c1                	jne    c0012ace <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0012b0d:	43                   	inc    ebx
c0012b0e:	83 fb 20             	cmp    ebx,0x20
c0012b11:	0f 85 79 ff ff ff    	jne    c0012a90 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0012b17:	83 c4 2c             	add    esp,0x2c
c0012b1a:	5b                   	pop    ebx
c0012b1b:	5e                   	pop    esi
c0012b1c:	5f                   	pop    edi
c0012b1d:	5d                   	pop    ebp
c0012b1e:	c3                   	ret    
c0012b1f:	90                   	nop

c0012b20 <ACPI::close(int, int, void*)>:
c0012b20:	83 ec 1c             	sub    esp,0x1c
c0012b23:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0012b2b:	74 0a                	je     c0012b37 <ACPI::close(int, int, void*)+0x17>
c0012b2d:	b8 00 00 00 00       	mov    eax,0x0
c0012b32:	e9 9a 00 00 00       	jmp    c0012bd1 <ACPI::close(int, int, void*)+0xb1>
c0012b37:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0012b3c:	75 37                	jne    c0012b75 <ACPI::close(int, int, void*)+0x55>
c0012b3e:	83 ec 0c             	sub    esp,0xc
c0012b41:	68 cc 11 02 c0       	push   0xc00211cc
c0012b46:	e8 94 c3 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0012b4b:	83 c4 10             	add    esp,0x10
c0012b4e:	a1 08 3b 02 c0       	mov    eax,ds:0xc0023b08
c0012b53:	85 c0                	test   eax,eax
c0012b55:	74 07                	je     c0012b5e <ACPI::close(int, int, void*)+0x3e>
c0012b57:	a1 08 3b 02 c0       	mov    eax,ds:0xc0023b08
c0012b5c:	ff d0                	call   eax
c0012b5e:	83 ec 0c             	sub    esp,0xc
c0012b61:	68 a0 12 02 c0       	push   0xc00212a0
c0012b66:	e8 09 20 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c0012b6b:	83 c4 10             	add    esp,0x10
c0012b6e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012b73:	eb 5c                	jmp    c0012bd1 <ACPI::close(int, int, void*)+0xb1>
c0012b75:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0012b7a:	75 50                	jne    c0012bcc <ACPI::close(int, int, void*)+0xac>
c0012b7c:	a1 04 3b 02 c0       	mov    eax,ds:0xc0023b04
c0012b81:	85 c0                	test   eax,eax
c0012b83:	74 07                	je     c0012b8c <ACPI::close(int, int, void*)+0x6c>
c0012b85:	a1 04 3b 02 c0       	mov    eax,ds:0xc0023b04
c0012b8a:	ff d0                	call   eax
c0012b8c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0012b91:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0012b96:	83 e0 02             	and    eax,0x2
c0012b99:	74 1c                	je     c0012bb7 <ACPI::close(int, int, void*)+0x97>
c0012b9b:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0012ba2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012ba6:	89 c2                	mov    edx,eax
c0012ba8:	ec                   	in     al,dx
c0012ba9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012bad:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012bb1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012bb5:	eb da                	jmp    c0012b91 <ACPI::close(int, int, void*)+0x71>
c0012bb7:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0012bbe:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0012bc3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0012bc7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012bcb:	ee                   	out    dx,al
c0012bcc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012bd1:	83 c4 1c             	add    esp,0x1c
c0012bd4:	c3                   	ret    

c0012bd5 <findRSDP()>:
c0012bd5:	83 ec 1c             	sub    esp,0x1c
c0012bd8:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c0012bdd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012be3:	83 e0 04             	and    eax,0x4
c0012be6:	84 c0                	test   al,al
c0012be8:	75 07                	jne    c0012bf1 <findRSDP()+0x1c>
c0012bea:	b8 00 00 00 00       	mov    eax,0x0
c0012bef:	eb 6a                	jmp    c0012c5b <findRSDP()+0x86>
c0012bf1:	a1 50 35 02 c0       	mov    eax,ds:0xc0023550
c0012bf6:	3d ff 07 00 00       	cmp    eax,0x7ff
c0012bfb:	7f 1b                	jg     c0012c18 <findRSDP()+0x43>
c0012bfd:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c0012c02:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012c08:	83 e2 fb             	and    edx,0xfffffffb
c0012c0b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012c11:	b8 00 00 00 00       	mov    eax,0x0
c0012c16:	eb 43                	jmp    c0012c5b <findRSDP()+0x86>
c0012c18:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0012c20:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0012c28:	77 2c                	ja     c0012c56 <findRSDP()+0x81>
c0012c2a:	83 ec 04             	sub    esp,0x4
c0012c2d:	6a 08                	push   0x8
c0012c2f:	68 d9 11 02 c0       	push   0xc00211d9
c0012c34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c38:	e8 32 d9 fe ff       	call   c000056f <memcmp>
c0012c3d:	83 c4 10             	add    esp,0x10
c0012c40:	85 c0                	test   eax,eax
c0012c42:	0f 94 c0             	sete   al
c0012c45:	84 c0                	test   al,al
c0012c47:	74 06                	je     c0012c4f <findRSDP()+0x7a>
c0012c49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012c4d:	eb 0c                	jmp    c0012c5b <findRSDP()+0x86>
c0012c4f:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0012c54:	eb ca                	jmp    c0012c20 <findRSDP()+0x4b>
c0012c56:	b8 00 00 00 00       	mov    eax,0x0
c0012c5b:	83 c4 1c             	add    esp,0x1c
c0012c5e:	c3                   	ret    

c0012c5f <loadACPITables(unsigned char*)>:
c0012c5f:	56                   	push   esi
c0012c60:	53                   	push   ebx
c0012c61:	83 ec 44             	sub    esp,0x44
c0012c64:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c0012c69:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012c6f:	83 e0 04             	and    eax,0x4
c0012c72:	84 c0                	test   al,al
c0012c74:	0f 84 05 02 00 00    	je     c0012e7f <loadACPITables(unsigned char*)+0x220>
c0012c7a:	a0 20 3d 02 c0       	mov    al,ds:0xc0023d20
c0012c7f:	84 c0                	test   al,al
c0012c81:	74 75                	je     c0012cf8 <loadACPITables(unsigned char*)+0x99>
c0012c83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012c87:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012c8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c8f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c92:	83 e8 24             	sub    eax,0x24
c0012c95:	c1 e8 03             	shr    eax,0x3
c0012c98:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012c9c:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0012ca4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012ca8:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0012cac:	0f 8d b2 00 00 00    	jge    c0012d64 <loadACPITables(unsigned char*)+0x105>
c0012cb2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012cb6:	83 c0 24             	add    eax,0x24
c0012cb9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012cbd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012cc1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012cc5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012cc9:	c1 e0 03             	shl    eax,0x3
c0012ccc:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0012cd0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012cd4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012cd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cd9:	89 c1                	mov    ecx,eax
c0012cdb:	a1 0c 3b 02 c0       	mov    eax,ds:0xc0023b0c
c0012ce0:	8d 50 01             	lea    edx,[eax+0x1]
c0012ce3:	89 15 0c 3b 02 c0    	mov    DWORD PTR ds:0xc0023b0c,edx
c0012ce9:	89 ca                	mov    edx,ecx
c0012ceb:	89 14 c5 24 3b 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc4dc],edx
c0012cf2:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0012cf6:	eb ac                	jmp    c0012ca4 <loadACPITables(unsigned char*)+0x45>
c0012cf8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012cfc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012d00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d07:	83 e8 24             	sub    eax,0x24
c0012d0a:	c1 e8 02             	shr    eax,0x2
c0012d0d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012d11:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0012d19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012d1d:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0012d21:	7d 41                	jge    c0012d64 <loadACPITables(unsigned char*)+0x105>
c0012d23:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012d27:	83 c0 24             	add    eax,0x24
c0012d2a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012d2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012d3a:	c1 e0 02             	shl    eax,0x2
c0012d3d:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0012d41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012d45:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012d47:	a1 0c 3b 02 c0       	mov    eax,ds:0xc0023b0c
c0012d4c:	8d 50 01             	lea    edx,[eax+0x1]
c0012d4f:	89 15 0c 3b 02 c0    	mov    DWORD PTR ds:0xc0023b0c,edx
c0012d55:	89 ca                	mov    edx,ecx
c0012d57:	89 14 c5 24 3b 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc4dc],edx
c0012d5e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0012d62:	eb b5                	jmp    c0012d19 <loadACPITables(unsigned char*)+0xba>
c0012d64:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0012d6c:	a1 0c 3b 02 c0       	mov    eax,ds:0xc0023b0c
c0012d71:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0012d75:	0f 8d 05 01 00 00    	jge    c0012e80 <loadACPITables(unsigned char*)+0x221>
c0012d7b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012d7f:	8b 04 c5 24 3b 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc4dc]
c0012d86:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d96:	25 ff 0f 00 00       	and    eax,0xfff
c0012d9b:	89 c6                	mov    esi,eax
c0012d9d:	e8 4d b0 ff ff       	call   c000ddef <Virt::getAKernelVAS()>
c0012da2:	89 c3                	mov    ebx,eax
c0012da4:	83 ec 0c             	sub    esp,0xc
c0012da7:	6a 01                	push   0x1
c0012da9:	e8 b1 ae ff ff       	call   c000dc5f <Virt::allocateKernelVirtualPages(int)>
c0012dae:	83 c4 10             	add    esp,0x10
c0012db1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012db5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012dbb:	83 ec 0c             	sub    esp,0xc
c0012dbe:	6a 01                	push   0x1
c0012dc0:	6a 01                	push   0x1
c0012dc2:	50                   	push   eax
c0012dc3:	52                   	push   edx
c0012dc4:	53                   	push   ebx
c0012dc5:	e8 b8 b7 ff ff       	call   c000e582 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012dca:	83 c4 20             	add    esp,0x20
c0012dcd:	09 f0                	or     eax,esi
c0012dcf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012dd3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012dd7:	c1 e0 03             	shl    eax,0x3
c0012dda:	05 20 3b 02 c0       	add    eax,0xc0023b20
c0012ddf:	83 ec 04             	sub    esp,0x4
c0012de2:	6a 04                	push   0x4
c0012de4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012de8:	50                   	push   eax
c0012de9:	e8 e4 d7 fe ff       	call   c00005d2 <memcpy>
c0012dee:	83 c4 10             	add    esp,0x10
c0012df1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012df5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012df8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012dfc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012e00:	05 00 10 00 00       	add    eax,0x1000
c0012e05:	c1 e8 0c             	shr    eax,0xc
c0012e08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e10:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e17:	25 ff 0f 00 00       	and    eax,0xfff
c0012e1c:	89 c6                	mov    esi,eax
c0012e1e:	e8 cc af ff ff       	call   c000ddef <Virt::getAKernelVAS()>
c0012e23:	89 c3                	mov    ebx,eax
c0012e25:	83 ec 0c             	sub    esp,0xc
c0012e28:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012e2c:	e8 2e ae ff ff       	call   c000dc5f <Virt::allocateKernelVirtualPages(int)>
c0012e31:	83 c4 10             	add    esp,0x10
c0012e34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012e38:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012e3e:	83 ec 0c             	sub    esp,0xc
c0012e41:	6a 01                	push   0x1
c0012e43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012e47:	50                   	push   eax
c0012e48:	52                   	push   edx
c0012e49:	53                   	push   ebx
c0012e4a:	e8 33 b7 ff ff       	call   c000e582 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012e4f:	83 c4 20             	add    esp,0x20
c0012e52:	09 f0                	or     eax,esi
c0012e54:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012e58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0012e5b:	83 ec 0c             	sub    esp,0xc
c0012e5e:	50                   	push   eax
c0012e5f:	e8 31 b1 ff ff       	call   c000df95 <Virt::freeKernelVirtualPages(unsigned long)>
c0012e64:	83 c4 10             	add    esp,0x10
c0012e67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012e6b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e6f:	89 14 c5 24 3b 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc4dc],edx
c0012e76:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0012e7a:	e9 ed fe ff ff       	jmp    c0012d6c <loadACPITables(unsigned char*)+0x10d>
c0012e7f:	90                   	nop
c0012e80:	83 c4 44             	add    esp,0x44
c0012e83:	5b                   	pop    ebx
c0012e84:	5e                   	pop    esi
c0012e85:	c3                   	ret    

c0012e86 <findRSDT(unsigned char*)>:
c0012e86:	56                   	push   esi
c0012e87:	53                   	push   ebx
c0012e88:	83 ec 44             	sub    esp,0x44
c0012e8b:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c0012e90:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012e96:	83 e0 04             	and    eax,0x4
c0012e99:	84 c0                	test   al,al
c0012e9b:	75 0a                	jne    c0012ea7 <findRSDT(unsigned char*)+0x21>
c0012e9d:	b8 00 00 00 00       	mov    eax,0x0
c0012ea2:	e9 f7 00 00 00       	jmp    c0012f9e <findRSDT(unsigned char*)+0x118>
c0012ea7:	83 ec 04             	sub    esp,0x4
c0012eaa:	6a 24                	push   0x24
c0012eac:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0012eb0:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012eb4:	50                   	push   eax
c0012eb5:	e8 18 d7 fe ff       	call   c00005d2 <memcpy>
c0012eba:	83 c4 10             	add    esp,0x10
c0012ebd:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0012ec1:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012ec5:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0012ecd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012ed1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012ed5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012ed9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012edd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012ee1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012ee5:	25 ff 0f 00 00       	and    eax,0xfff
c0012eea:	89 c6                	mov    esi,eax
c0012eec:	e8 fe ae ff ff       	call   c000ddef <Virt::getAKernelVAS()>
c0012ef1:	89 c3                	mov    ebx,eax
c0012ef3:	83 ec 0c             	sub    esp,0xc
c0012ef6:	6a 02                	push   0x2
c0012ef8:	e8 62 ad ff ff       	call   c000dc5f <Virt::allocateKernelVirtualPages(int)>
c0012efd:	83 c4 10             	add    esp,0x10
c0012f00:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012f04:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012f0a:	83 ec 0c             	sub    esp,0xc
c0012f0d:	6a 01                	push   0x1
c0012f0f:	6a 02                	push   0x2
c0012f11:	50                   	push   eax
c0012f12:	52                   	push   edx
c0012f13:	53                   	push   ebx
c0012f14:	e8 69 b6 ff ff       	call   c000e582 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012f19:	83 c4 20             	add    esp,0x20
c0012f1c:	09 f0                	or     eax,esi
c0012f1e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012f22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f26:	25 ff 0f 00 00       	and    eax,0xfff
c0012f2b:	89 c6                	mov    esi,eax
c0012f2d:	e8 bd ae ff ff       	call   c000ddef <Virt::getAKernelVAS()>
c0012f32:	89 c3                	mov    ebx,eax
c0012f34:	83 ec 0c             	sub    esp,0xc
c0012f37:	6a 02                	push   0x2
c0012f39:	e8 21 ad ff ff       	call   c000dc5f <Virt::allocateKernelVirtualPages(int)>
c0012f3e:	83 c4 10             	add    esp,0x10
c0012f41:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012f45:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012f4b:	83 ec 0c             	sub    esp,0xc
c0012f4e:	6a 01                	push   0x1
c0012f50:	6a 02                	push   0x2
c0012f52:	50                   	push   eax
c0012f53:	52                   	push   edx
c0012f54:	53                   	push   ebx
c0012f55:	e8 28 b6 ff ff       	call   c000e582 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012f5a:	83 c4 20             	add    esp,0x20
c0012f5d:	09 f0                	or     eax,esi
c0012f5f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012f63:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0012f68:	75 11                	jne    c0012f7b <findRSDT(unsigned char*)+0xf5>
c0012f6a:	c6 05 20 3d 02 c0 00 	mov    BYTE PTR ds:0xc0023d20,0x0
c0012f71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012f79:	eb 1f                	jmp    c0012f9a <findRSDT(unsigned char*)+0x114>
c0012f7b:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0012f80:	75 11                	jne    c0012f93 <findRSDT(unsigned char*)+0x10d>
c0012f82:	c6 05 20 3d 02 c0 01 	mov    BYTE PTR ds:0xc0023d20,0x1
c0012f89:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012f8d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012f91:	eb 07                	jmp    c0012f9a <findRSDT(unsigned char*)+0x114>
c0012f93:	b8 00 00 00 00       	mov    eax,0x0
c0012f98:	eb 04                	jmp    c0012f9e <findRSDT(unsigned char*)+0x118>
c0012f9a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012f9e:	83 c4 44             	add    esp,0x44
c0012fa1:	5b                   	pop    ebx
c0012fa2:	5e                   	pop    esi
c0012fa3:	c3                   	ret    

c0012fa4 <findDataTable(unsigned char*, char*)>:
c0012fa4:	83 ec 1c             	sub    esp,0x1c
c0012fa7:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c0012fac:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012fb2:	83 e0 04             	and    eax,0x4
c0012fb5:	84 c0                	test   al,al
c0012fb7:	75 07                	jne    c0012fc0 <findDataTable(unsigned char*, char*)+0x1c>
c0012fb9:	b8 00 00 00 00       	mov    eax,0x0
c0012fbe:	eb 7c                	jmp    c001303c <findDataTable(unsigned char*, char*)+0x98>
c0012fc0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012fc8:	a1 0c 3b 02 c0       	mov    eax,ds:0xc0023b0c
c0012fcd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0012fd1:	7d 3a                	jge    c001300d <findDataTable(unsigned char*, char*)+0x69>
c0012fd3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012fd7:	c1 e0 03             	shl    eax,0x3
c0012fda:	05 20 3b 02 c0       	add    eax,0xc0023b20
c0012fdf:	83 ec 04             	sub    esp,0x4
c0012fe2:	6a 04                	push   0x4
c0012fe4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012fe8:	50                   	push   eax
c0012fe9:	e8 81 d5 fe ff       	call   c000056f <memcmp>
c0012fee:	83 c4 10             	add    esp,0x10
c0012ff1:	85 c0                	test   eax,eax
c0012ff3:	0f 94 c0             	sete   al
c0012ff6:	84 c0                	test   al,al
c0012ff8:	74 0d                	je     c0013007 <findDataTable(unsigned char*, char*)+0x63>
c0012ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012ffe:	8b 04 c5 24 3b 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc4dc]
c0013005:	eb 35                	jmp    c001303c <findDataTable(unsigned char*, char*)+0x98>
c0013007:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001300b:	eb bb                	jmp    c0012fc8 <findDataTable(unsigned char*, char*)+0x24>
c001300d:	a0 20 3d 02 c0       	mov    al,ds:0xc0023d20
c0013012:	84 c0                	test   al,al
c0013014:	74 07                	je     c001301d <findDataTable(unsigned char*, char*)+0x79>
c0013016:	b8 58 00 00 00       	mov    eax,0x58
c001301b:	eb 05                	jmp    c0013022 <findDataTable(unsigned char*, char*)+0x7e>
c001301d:	b8 52 00 00 00       	mov    eax,0x52
c0013022:	83 ec 04             	sub    esp,0x4
c0013025:	50                   	push   eax
c0013026:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001302a:	68 c4 12 02 c0       	push   0xc00212c4
c001302f:	e8 ab be ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0013034:	83 c4 10             	add    esp,0x10
c0013037:	b8 00 00 00 00       	mov    eax,0x0
c001303c:	83 c4 1c             	add    esp,0x1c
c001303f:	c3                   	ret    

c0013040 <scanMADT()>:
c0013040:	83 ec 2c             	sub    esp,0x2c
c0013043:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c0013048:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001304e:	83 e0 04             	and    eax,0x4
c0013051:	84 c0                	test   al,al
c0013053:	0f 84 73 03 00 00    	je     c00133cc <scanMADT()+0x38c>
c0013059:	e8 77 fb ff ff       	call   c0012bd5 <findRSDP()>
c001305e:	a3 2c 3d 02 c0       	mov    ds:0xc0023d2c,eax
c0013063:	a1 2c 3d 02 c0       	mov    eax,ds:0xc0023d2c
c0013068:	85 c0                	test   eax,eax
c001306a:	75 19                	jne    c0013085 <scanMADT()+0x45>
c001306c:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c0013071:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013077:	83 e2 fb             	and    edx,0xfffffffb
c001307a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013080:	e9 4b 03 00 00       	jmp    c00133d0 <scanMADT()+0x390>
c0013085:	a1 2c 3d 02 c0       	mov    eax,ds:0xc0023d2c
c001308a:	83 ec 0c             	sub    esp,0xc
c001308d:	50                   	push   eax
c001308e:	e8 f3 fd ff ff       	call   c0012e86 <findRSDT(unsigned char*)>
c0013093:	83 c4 10             	add    esp,0x10
c0013096:	a3 28 3d 02 c0       	mov    ds:0xc0023d28,eax
c001309b:	a1 28 3d 02 c0       	mov    eax,ds:0xc0023d28
c00130a0:	85 c0                	test   eax,eax
c00130a2:	75 19                	jne    c00130bd <scanMADT()+0x7d>
c00130a4:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c00130a9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00130af:	83 e2 fb             	and    edx,0xfffffffb
c00130b2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00130b8:	e9 13 03 00 00       	jmp    c00133d0 <scanMADT()+0x390>
c00130bd:	a1 28 3d 02 c0       	mov    eax,ds:0xc0023d28
c00130c2:	83 ec 0c             	sub    esp,0xc
c00130c5:	50                   	push   eax
c00130c6:	e8 94 fb ff ff       	call   c0012c5f <loadACPITables(unsigned char*)>
c00130cb:	83 c4 10             	add    esp,0x10
c00130ce:	a1 28 3d 02 c0       	mov    eax,ds:0xc0023d28
c00130d3:	83 ec 08             	sub    esp,0x8
c00130d6:	68 e2 11 02 c0       	push   0xc00211e2
c00130db:	50                   	push   eax
c00130dc:	e8 c3 fe ff ff       	call   c0012fa4 <findDataTable(unsigned char*, char*)>
c00130e1:	83 c4 10             	add    esp,0x10
c00130e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00130e8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00130ed:	75 19                	jne    c0013108 <scanMADT()+0xc8>
c00130ef:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c00130f4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00130fa:	83 e2 fe             	and    edx,0xfffffffe
c00130fd:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013103:	e9 c8 02 00 00       	jmp    c00133d0 <scanMADT()+0x390>
c0013108:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013110:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013114:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013117:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001311b:	0f 87 af 02 00 00    	ja     c00133d0 <scanMADT()+0x390>
c0013121:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0013129:	0f 87 a1 02 00 00    	ja     c00133d0 <scanMADT()+0x390>
c001312f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013133:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013137:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001313b:	8d 50 01             	lea    edx,[eax+0x1]
c001313e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013142:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013146:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001314a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001314e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013152:	8d 50 01             	lea    edx,[eax+0x1]
c0013155:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013159:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001315d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013161:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0013165:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c001316a:	0f 86 5f 02 00 00    	jbe    c00133cf <scanMADT()+0x38f>
c0013170:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013175:	75 57                	jne    c00131ce <scanMADT()+0x18e>
c0013177:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001317b:	8d 50 01             	lea    edx,[eax+0x1]
c001317e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013182:	8a 15 60 3e 02 c0    	mov    dl,BYTE PTR ds:0xc0023e60
c0013188:	0f b6 d2             	movzx  edx,dl
c001318b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001318f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013193:	88 82 a0 3e 02 c0    	mov    BYTE PTR [edx-0x3ffdc160],al
c0013199:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001319d:	8d 50 01             	lea    edx,[eax+0x1]
c00131a0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00131a4:	8a 15 60 3e 02 c0    	mov    dl,BYTE PTR ds:0xc0023e60
c00131aa:	8d 4a 01             	lea    ecx,[edx+0x1]
c00131ad:	88 0d 60 3e 02 c0    	mov    BYTE PTR ds:0xc0023e60,cl
c00131b3:	0f b6 d2             	movzx  edx,dl
c00131b6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00131ba:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00131be:	88 82 80 3e 02 c0    	mov    BYTE PTR [edx-0x3ffdc180],al
c00131c4:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00131c9:	e9 ea 01 00 00       	jmp    c00133b8 <scanMADT()+0x378>
c00131ce:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c00131d3:	0f 85 14 01 00 00    	jne    c00132ed <scanMADT()+0x2ad>
c00131d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131dd:	8d 50 01             	lea    edx,[eax+0x1]
c00131e0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00131e4:	8a 15 30 3d 02 c0    	mov    dl,BYTE PTR ds:0xc0023d30
c00131ea:	0f b6 d2             	movzx  edx,dl
c00131ed:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00131f1:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00131f5:	88 82 40 3d 02 c0    	mov    BYTE PTR [edx-0x3ffdc2c0],al
c00131fb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00131ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013203:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013207:	01 d0                	add    eax,edx
c0013209:	83 c0 2c             	add    eax,0x2c
c001320c:	8a 00                	mov    al,BYTE PTR [eax]
c001320e:	0f b6 d0             	movzx  edx,al
c0013211:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013215:	8d 48 01             	lea    ecx,[eax+0x1]
c0013218:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001321c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013220:	0f b6 c0             	movzx  eax,al
c0013223:	c1 e0 08             	shl    eax,0x8
c0013226:	89 d1                	mov    ecx,edx
c0013228:	09 c1                	or     ecx,eax
c001322a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001322e:	8d 50 02             	lea    edx,[eax+0x2]
c0013231:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013235:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013239:	0f b6 c0             	movzx  eax,al
c001323c:	c1 e0 10             	shl    eax,0x10
c001323f:	09 c1                	or     ecx,eax
c0013241:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013245:	8d 50 03             	lea    edx,[eax+0x3]
c0013248:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001324c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013250:	0f b6 c0             	movzx  eax,al
c0013253:	c1 e0 18             	shl    eax,0x18
c0013256:	09 c1                	or     ecx,eax
c0013258:	89 ca                	mov    edx,ecx
c001325a:	a0 30 3d 02 c0       	mov    al,ds:0xc0023d30
c001325f:	0f b6 c0             	movzx  eax,al
c0013262:	89 14 85 60 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc2a0],edx
c0013269:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001326e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013272:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013276:	01 d0                	add    eax,edx
c0013278:	83 c0 2c             	add    eax,0x2c
c001327b:	8a 00                	mov    al,BYTE PTR [eax]
c001327d:	0f b6 d0             	movzx  edx,al
c0013280:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013284:	8d 48 01             	lea    ecx,[eax+0x1]
c0013287:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001328b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001328f:	0f b6 c0             	movzx  eax,al
c0013292:	c1 e0 08             	shl    eax,0x8
c0013295:	89 d1                	mov    ecx,edx
c0013297:	09 c1                	or     ecx,eax
c0013299:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001329d:	8d 50 02             	lea    edx,[eax+0x2]
c00132a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132a4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00132a8:	0f b6 c0             	movzx  eax,al
c00132ab:	c1 e0 10             	shl    eax,0x10
c00132ae:	09 c1                	or     ecx,eax
c00132b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132b4:	8d 50 03             	lea    edx,[eax+0x3]
c00132b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132bb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00132bf:	0f b6 c0             	movzx  eax,al
c00132c2:	c1 e0 18             	shl    eax,0x18
c00132c5:	09 c1                	or     ecx,eax
c00132c7:	89 ca                	mov    edx,ecx
c00132c9:	a0 30 3d 02 c0       	mov    al,ds:0xc0023d30
c00132ce:	0f b6 c0             	movzx  eax,al
c00132d1:	89 14 85 e0 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc220],edx
c00132d8:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00132dd:	a0 30 3d 02 c0       	mov    al,ds:0xc0023d30
c00132e2:	40                   	inc    eax
c00132e3:	a2 30 3d 02 c0       	mov    ds:0xc0023d30,al
c00132e8:	e9 cb 00 00 00       	jmp    c00133b8 <scanMADT()+0x378>
c00132ed:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c00132f2:	0f 85 a6 00 00 00    	jne    c001339e <scanMADT()+0x35e>
c00132f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132fc:	8d 50 01             	lea    edx,[eax+0x1]
c00132ff:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013303:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013307:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001330b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001330f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013313:	8d 50 01             	lea    edx,[eax+0x1]
c0013316:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001331a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001331e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013322:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013326:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001332a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001332e:	01 d0                	add    eax,edx
c0013330:	83 c0 2c             	add    eax,0x2c
c0013333:	8a 00                	mov    al,BYTE PTR [eax]
c0013335:	0f b6 d0             	movzx  edx,al
c0013338:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001333c:	8d 48 01             	lea    ecx,[eax+0x1]
c001333f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013343:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013347:	0f b6 c0             	movzx  eax,al
c001334a:	c1 e0 08             	shl    eax,0x8
c001334d:	89 d1                	mov    ecx,edx
c001334f:	09 c1                	or     ecx,eax
c0013351:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013355:	8d 50 02             	lea    edx,[eax+0x2]
c0013358:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001335c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013360:	0f b6 c0             	movzx  eax,al
c0013363:	c1 e0 10             	shl    eax,0x10
c0013366:	09 c1                	or     ecx,eax
c0013368:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001336c:	8d 50 03             	lea    edx,[eax+0x3]
c001336f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013373:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013377:	0f b6 c0             	movzx  eax,al
c001337a:	c1 e0 18             	shl    eax,0x18
c001337d:	09 c8                	or     eax,ecx
c001337f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013383:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013388:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c001338d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0013392:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013396:	88 90 60 2c 02 c0    	mov    BYTE PTR [eax-0x3ffdd3a0],dl
c001339c:	eb 1a                	jmp    c00133b8 <scanMADT()+0x378>
c001339e:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c00133a3:	75 07                	jne    c00133ac <scanMADT()+0x36c>
c00133a5:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00133aa:	eb 0c                	jmp    c00133b8 <scanMADT()+0x378>
c00133ac:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c00133b1:	75 05                	jne    c00133b8 <scanMADT()+0x378>
c00133b3:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c00133b8:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c00133bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00133c1:	01 d0                	add    eax,edx
c00133c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133c7:	e9 44 fd ff ff       	jmp    c0013110 <scanMADT()+0xd0>
c00133cc:	90                   	nop
c00133cd:	eb 01                	jmp    c00133d0 <scanMADT()+0x390>
c00133cf:	90                   	nop
c00133d0:	83 c4 2c             	add    esp,0x2c
c00133d3:	c3                   	ret    

c00133d4 <ACPI::ACPI()>:
c00133d4:	83 ec 0c             	sub    esp,0xc
c00133d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133db:	83 ec 08             	sub    esp,0x8
c00133de:	68 e7 11 02 c0       	push   0xc00211e7
c00133e3:	50                   	push   eax
c00133e4:	e8 f1 d0 ff ff       	call   c00104da <Device::Device(char const*)>
c00133e9:	83 c4 10             	add    esp,0x10
c00133ec:	ba 90 13 02 c0       	mov    edx,0xc0021390
c00133f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f5:	89 10                	mov    DWORD PTR [eax],edx
c00133f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133fb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013406:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0013410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013414:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c001341e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013422:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0013429:	e8 12 fc ff ff       	call   c0013040 <scanMADT()>
c001342e:	90                   	nop
c001342f:	83 c4 0c             	add    esp,0xc
c0013432:	c3                   	ret    
c0013433:	90                   	nop

c0013434 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013434:	83 ec 2c             	sub    esp,0x2c
c0013437:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001343b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001343f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013443:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013447:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001344c:	88 d0                	mov    al,dl
c001344e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013452:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0013457:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001345f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013463:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013469:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001346d:	0f 8d 97 00 00 00    	jge    c001350a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0013473:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013477:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001347b:	83 c2 2a             	add    edx,0x2a
c001347e:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0013482:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0013487:	75 78                	jne    c0013501 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013489:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001348d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013491:	83 c2 2a             	add    edx,0x2a
c0013494:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0013498:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001349c:	75 63                	jne    c0013501 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001349e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00134a3:	74 3a                	je     c00134df <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00134a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00134a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00134ad:	83 c2 2a             	add    edx,0x2a
c00134b0:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00134b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00134bb:	39 c2                	cmp    edx,eax
c00134bd:	74 10                	je     c00134cf <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00134bf:	83 ec 0c             	sub    esp,0xc
c00134c2:	68 f4 12 02 c0       	push   0xc00212f4
c00134c7:	e8 a8 16 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c00134cc:	83 c4 10             	add    esp,0x10
c00134cf:	83 ec 0c             	sub    esp,0xc
c00134d2:	68 ec 11 02 c0       	push   0xc00211ec
c00134d7:	e8 98 16 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c00134dc:	83 c4 10             	add    esp,0x10
c00134df:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00134e3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00134e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00134eb:	83 c2 2a             	add    edx,0x2a
c00134ee:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00134f2:	8b 02                	mov    eax,DWORD PTR [edx]
c00134f4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00134f7:	89 01                	mov    DWORD PTR [ecx],eax
c00134f9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00134fc:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0013501:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013505:	e9 55 ff ff ff       	jmp    c001345f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001350a:	90                   	nop
c001350b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001350f:	83 c4 2c             	add    esp,0x2c
c0013512:	c2 04 00             	ret    0x4
c0013515:	90                   	nop

c0013516 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013516:	56                   	push   esi
c0013517:	53                   	push   ebx
c0013518:	83 ec 14             	sub    esp,0x14
c001351b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001351f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013523:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013527:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001352c:	88 c8                	mov    al,cl
c001352e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013532:	88 d0                	mov    al,dl
c0013534:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013538:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001353c:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013542:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013546:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c001354c:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013551:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013556:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001355b:	83 ec 04             	sub    esp,0x4
c001355e:	56                   	push   esi
c001355f:	53                   	push   ebx
c0013560:	51                   	push   ecx
c0013561:	52                   	push   edx
c0013562:	50                   	push   eax
c0013563:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013567:	68 24 13 02 c0       	push   0xc0021324
c001356c:	e8 6e b9 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0013571:	83 c4 20             	add    esp,0x20
c0013574:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013578:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001357e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013582:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013585:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013589:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001358d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013591:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013597:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001359b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001359e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135a2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00135a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135ab:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00135b1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00135b5:	8d 48 01             	lea    ecx,[eax+0x1]
c00135b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135bc:	83 c2 2a             	add    edx,0x2a
c00135bf:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00135c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135c7:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00135cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135d1:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00135d4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00135d8:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00135dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135e0:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00135e6:	8d 50 01             	lea    edx,[eax+0x1]
c00135e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135ed:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c00135f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135f7:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00135fd:	3d 00 08 00 00       	cmp    eax,0x800
c0013602:	75 10                	jne    c0013614 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0013604:	83 ec 0c             	sub    esp,0xc
c0013607:	68 fb 11 02 c0       	push   0xc00211fb
c001360c:	e8 63 15 00 00       	call   c0014b74 <Krnl::panic(char const*)>
c0013611:	83 c4 10             	add    esp,0x10
c0013614:	90                   	nop
c0013615:	83 c4 14             	add    esp,0x14
c0013618:	5b                   	pop    ebx
c0013619:	5e                   	pop    esi
c001361a:	c3                   	ret    
c001361b:	90                   	nop

c001361c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001361c:	b8 00 00 00 00       	mov    eax,0x0
c0013621:	c3                   	ret    

c0013622 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0013622:	83 ec 1c             	sub    esp,0x1c
c0013625:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013629:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001362c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013630:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c0013635:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001363a:	83 ec 08             	sub    esp,0x8
c001363d:	52                   	push   edx
c001363e:	50                   	push   eax
c001363f:	e8 f2 7b ff ff       	call   c000b236 <Computer::readCMOS(unsigned char)>
c0013644:	83 c4 10             	add    esp,0x10
c0013647:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001364b:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c0013650:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0013655:	83 ec 04             	sub    esp,0x4
c0013658:	6a 01                	push   0x1
c001365a:	52                   	push   edx
c001365b:	50                   	push   eax
c001365c:	e8 e3 7c ff ff       	call   c000b344 <Computer::writeCMOS(unsigned char, unsigned char)>
c0013661:	83 c4 10             	add    esp,0x10
c0013664:	90                   	nop
c0013665:	83 c4 1c             	add    esp,0x1c
c0013668:	c3                   	ret    
c0013669:	90                   	nop

c001366a <ACPI::open(int, int, void*)>:
c001366a:	53                   	push   ebx
c001366b:	83 ec 18             	sub    esp,0x18
c001366e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013672:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0013679:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001367d:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0013683:	84 c0                	test   al,al
c0013685:	74 60                	je     c00136e7 <ACPI::open(int, int, void*)+0x7d>
c0013687:	83 ec 0c             	sub    esp,0xc
c001368a:	68 58 01 00 00       	push   0x158
c001368f:	e8 5c b7 ff ff       	call   c000edf0 <operator new(unsigned long)>
c0013694:	83 c4 10             	add    esp,0x10
c0013697:	89 c3                	mov    ebx,eax
c0013699:	83 ec 0c             	sub    esp,0xc
c001369c:	53                   	push   ebx
c001369d:	e8 76 7c 00 00       	call   c001b318 <PCI::PCI()>
c00136a2:	83 c4 10             	add    esp,0x10
c00136a5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00136a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136ad:	83 ec 08             	sub    esp,0x8
c00136b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00136b4:	50                   	push   eax
c00136b5:	e8 30 cc ff ff       	call   c00102ea <Device::addChild(Device*)>
c00136ba:	83 c4 10             	add    esp,0x10
c00136bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00136c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00136c3:	83 c0 08             	add    eax,0x8
c00136c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00136c8:	6a 00                	push   0x0
c00136ca:	6a 00                	push   0x0
c00136cc:	6a 00                	push   0x0
c00136ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136d2:	ff d0                	call   eax
c00136d4:	83 c4 10             	add    esp,0x10
c00136d7:	83 ec 0c             	sub    esp,0xc
c00136da:	68 18 12 02 c0       	push   0xc0021218
c00136df:	e8 fb b7 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c00136e4:	83 c4 10             	add    esp,0x10
c00136e7:	83 ec 0c             	sub    esp,0xc
c00136ea:	68 23 12 02 c0       	push   0xc0021223
c00136ef:	e8 1d 33 00 00       	call   c0016a11 <Thr::loadKernelSymbolTable(char const*)>
c00136f4:	83 c4 10             	add    esp,0x10
c00136f7:	8b 1d 08 35 02 c0    	mov    ebx,DWORD PTR ds:0xc0023508
c00136fd:	83 ec 08             	sub    esp,0x8
c0013700:	6a 01                	push   0x1
c0013702:	68 41 12 02 c0       	push   0xc0021241
c0013707:	e8 ca 3d 00 00       	call   c00174d6 <Thr::loadDLL(char const*, bool)>
c001370c:	83 c4 10             	add    esp,0x10
c001370f:	83 ec 08             	sub    esp,0x8
c0013712:	53                   	push   ebx
c0013713:	50                   	push   eax
c0013714:	e8 10 3f 00 00       	call   c0017629 <Thr::executeDLL(unsigned long, void*)>
c0013719:	83 c4 10             	add    esp,0x10
c001371c:	8b 1d 08 35 02 c0    	mov    ebx,DWORD PTR ds:0xc0023508
c0013722:	83 ec 08             	sub    esp,0x8
c0013725:	6a 01                	push   0x1
c0013727:	68 5e 12 02 c0       	push   0xc002125e
c001372c:	e8 a5 3d 00 00       	call   c00174d6 <Thr::loadDLL(char const*, bool)>
c0013731:	83 c4 10             	add    esp,0x10
c0013734:	83 ec 08             	sub    esp,0x8
c0013737:	53                   	push   ebx
c0013738:	50                   	push   eax
c0013739:	e8 eb 3e 00 00       	call   c0017629 <Thr::executeDLL(unsigned long, void*)>
c001373e:	83 c4 10             	add    esp,0x10
c0013741:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c0013746:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001374c:	83 e0 04             	and    eax,0x4
c001374f:	84 c0                	test   al,al
c0013751:	0f 84 cf 00 00 00    	je     c0013826 <ACPI::open(int, int, void*)+0x1bc>
c0013757:	83 ec 0c             	sub    esp,0xc
c001375a:	68 14 01 00 00       	push   0x114
c001375f:	e8 8c b6 ff ff       	call   c000edf0 <operator new(unsigned long)>
c0013764:	83 c4 10             	add    esp,0x10
c0013767:	89 c3                	mov    ebx,eax
c0013769:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c001376e:	83 ec 04             	sub    esp,0x4
c0013771:	50                   	push   eax
c0013772:	68 7b 12 02 c0       	push   0xc002127b
c0013777:	53                   	push   ebx
c0013778:	e8 91 bc ff ff       	call   c000f40e <File::File(char const*, Process*)>
c001377d:	83 c4 10             	add    esp,0x10
c0013780:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0013784:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013789:	74 17                	je     c00137a2 <ACPI::open(int, int, void*)+0x138>
c001378b:	83 ec 0c             	sub    esp,0xc
c001378e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013792:	e8 49 bf ff ff       	call   c000f6e0 <File::exists()>
c0013797:	83 c4 10             	add    esp,0x10
c001379a:	84 c0                	test   al,al
c001379c:	74 04                	je     c00137a2 <ACPI::open(int, int, void*)+0x138>
c001379e:	b0 01                	mov    al,0x1
c00137a0:	eb 02                	jmp    c00137a4 <ACPI::open(int, int, void*)+0x13a>
c00137a2:	b0 00                	mov    al,0x0
c00137a4:	84 c0                	test   al,al
c00137a6:	74 25                	je     c00137cd <ACPI::open(int, int, void*)+0x163>
c00137a8:	8b 1d 08 35 02 c0    	mov    ebx,DWORD PTR ds:0xc0023508
c00137ae:	83 ec 08             	sub    esp,0x8
c00137b1:	6a 01                	push   0x1
c00137b3:	68 7b 12 02 c0       	push   0xc002127b
c00137b8:	e8 19 3d 00 00       	call   c00174d6 <Thr::loadDLL(char const*, bool)>
c00137bd:	83 c4 10             	add    esp,0x10
c00137c0:	83 ec 08             	sub    esp,0x8
c00137c3:	53                   	push   ebx
c00137c4:	50                   	push   eax
c00137c5:	e8 5f 3e 00 00       	call   c0017629 <Thr::executeDLL(unsigned long, void*)>
c00137ca:	83 c4 10             	add    esp,0x10
c00137cd:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00137d2:	74 1e                	je     c00137f2 <ACPI::open(int, int, void*)+0x188>
c00137d4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00137d9:	74 17                	je     c00137f2 <ACPI::open(int, int, void*)+0x188>
c00137db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00137df:	8b 00                	mov    eax,DWORD PTR [eax]
c00137e1:	83 c0 08             	add    eax,0x8
c00137e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00137e6:	83 ec 0c             	sub    esp,0xc
c00137e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00137ed:	ff d0                	call   eax
c00137ef:	83 c4 10             	add    esp,0x10
c00137f2:	a1 28 3d 02 c0       	mov    eax,ds:0xc0023d28
c00137f7:	83 ec 08             	sub    esp,0x8
c00137fa:	68 98 12 02 c0       	push   0xc0021298
c00137ff:	50                   	push   eax
c0013800:	e8 9f f7 ff ff       	call   c0012fa4 <findDataTable(unsigned char*, char*)>
c0013805:	83 c4 10             	add    esp,0x10
c0013808:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001380c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0013811:	74 13                	je     c0013826 <ACPI::open(int, int, void*)+0x1bc>
c0013813:	83 ec 08             	sub    esp,0x8
c0013816:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001381a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001381e:	e8 ff fd ff ff       	call   c0013622 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0013823:	83 c4 10             	add    esp,0x10
c0013826:	b8 00 00 00 00       	mov    eax,0x0
c001382b:	83 c4 18             	add    esp,0x18
c001382e:	5b                   	pop    ebx
c001382f:	c3                   	ret    

c0013830 <ACPI::sleep()>:
c0013830:	83 ec 0c             	sub    esp,0xc
c0013833:	a1 00 3b 02 c0       	mov    eax,ds:0xc0023b00
c0013838:	85 c0                	test   eax,eax
c001383a:	74 07                	je     c0013843 <ACPI::sleep()+0x13>
c001383c:	a1 00 3b 02 c0       	mov    eax,ds:0xc0023b00
c0013841:	ff d0                	call   eax
c0013843:	90                   	nop
c0013844:	83 c4 0c             	add    esp,0xc
c0013847:	c3                   	ret    

c0013848 <CPU::close(int, int, void*)>:
c0013848:	31 c0                	xor    eax,eax
c001384a:	c3                   	ret    

c001384b <lookupAMDCPUName(unsigned char, unsigned char)>:
c001384b:	55                   	push   ebp
c001384c:	57                   	push   edi
c001384d:	56                   	push   esi
c001384e:	53                   	push   ebx
c001384f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013853:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013857:	89 ce                	mov    esi,ecx
c0013859:	89 d5                	mov    ebp,edx
c001385b:	80 f9 04             	cmp    cl,0x4
c001385e:	75 28                	jne    c0013888 <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c0013860:	8d 42 f9             	lea    eax,[edx-0x7]
c0013863:	3c 03                	cmp    al,0x3
c0013865:	0f 86 63 01 00 00    	jbe    c00139ce <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c001386b:	80 fa 03             	cmp    dl,0x3
c001386e:	0f 84 5a 01 00 00    	je     c00139ce <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0013874:	8d 7a f2             	lea    edi,[edx-0xe]
c0013877:	b8 30 2e 02 c0       	mov    eax,0xc0022e30
c001387c:	89 fb                	mov    ebx,edi
c001387e:	80 fb 01             	cmp    bl,0x1
c0013881:	77 4e                	ja     c00138d1 <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c0013883:	e9 52 01 00 00       	jmp    c00139da <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013888:	80 f9 05             	cmp    cl,0x5
c001388b:	75 4d                	jne    c00138da <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c001388d:	b8 40 2e 02 c0       	mov    eax,0xc0022e40
c0013892:	80 fa 03             	cmp    dl,0x3
c0013895:	0f 86 3f 01 00 00    	jbe    c00139da <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001389b:	8d 7a fa             	lea    edi,[edx-0x6]
c001389e:	b8 50 2e 02 c0       	mov    eax,0xc0022e50
c00138a3:	89 fb                	mov    ebx,edi
c00138a5:	80 fb 01             	cmp    bl,0x1
c00138a8:	0f 86 2c 01 00 00    	jbe    c00139da <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00138ae:	b8 60 2e 02 c0       	mov    eax,0xc0022e60
c00138b3:	80 fa 08             	cmp    dl,0x8
c00138b6:	0f 84 1e 01 00 00    	je     c00139da <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00138bc:	89 d7                	mov    edi,edx
c00138be:	b8 70 2e 02 c0       	mov    eax,0xc0022e70
c00138c3:	83 e7 fb             	and    edi,0xfffffffb
c00138c6:	89 fb                	mov    ebx,edi
c00138c8:	80 fb 09             	cmp    bl,0x9
c00138cb:	0f 84 09 01 00 00    	je     c00139da <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00138d1:	31 c0                	xor    eax,eax
c00138d3:	89 eb                	mov    ebx,ebp
c00138d5:	0f b6 fb             	movzx  edi,bl
c00138d8:	eb 30                	jmp    c001390a <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c00138da:	31 c0                	xor    eax,eax
c00138dc:	80 f9 06             	cmp    cl,0x6
c00138df:	75 f2                	jne    c00138d3 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00138e1:	80 fa 0a             	cmp    dl,0xa
c00138e4:	77 ed                	ja     c00138d3 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00138e6:	bf de 05 00 00       	mov    edi,0x5de
c00138eb:	0f a3 d7             	bt     edi,edx
c00138ee:	73 e3                	jae    c00138d3 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00138f0:	b8 80 2e 02 c0       	mov    eax,0xc0022e80
c00138f5:	e9 e0 00 00 00       	jmp    c00139da <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00138fa:	39 c7                	cmp    edi,eax
c00138fc:	0f 84 d3 00 00 00    	je     c00139d5 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0013902:	40                   	inc    eax
c0013903:	3d d0 00 00 00       	cmp    eax,0xd0
c0013908:	74 09                	je     c0013913 <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c001390a:	89 f3                	mov    ebx,esi
c001390c:	80 fb 0f             	cmp    bl,0xf
c001390f:	75 f1                	jne    c0013902 <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c0013911:	eb e7                	jmp    c00138fa <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c0013913:	80 f9 10             	cmp    cl,0x10
c0013916:	75 14                	jne    c001392c <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c0013918:	8d 42 fc             	lea    eax,[edx-0x4]
c001391b:	83 e0 fb             	and    eax,0xfffffffb
c001391e:	3c 02                	cmp    al,0x2
c0013920:	76 34                	jbe    c0013956 <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c0013922:	b8 09 15 02 c0       	mov    eax,0xc0021509
c0013927:	80 fa 02             	cmp    dl,0x2
c001392a:	eb 24                	jmp    c0013950 <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c001392c:	80 f9 11             	cmp    cl,0x11
c001392f:	75 13                	jne    c0013944 <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0013931:	b8 09 15 02 c0       	mov    eax,0xc0021509
c0013936:	80 fa 03             	cmp    dl,0x3
c0013939:	0f 85 9b 00 00 00    	jne    c00139da <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001393f:	e9 91 00 00 00       	jmp    c00139d5 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0013944:	80 f9 12             	cmp    cl,0x12
c0013947:	75 14                	jne    c001395d <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c0013949:	b8 09 15 02 c0       	mov    eax,0xc0021509
c001394e:	fe ca                	dec    dl
c0013950:	0f 85 84 00 00 00    	jne    c00139da <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013956:	b8 a0 2e 02 c0       	mov    eax,0xc0022ea0
c001395b:	eb 7d                	jmp    c00139da <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001395d:	80 f9 14             	cmp    cl,0x14
c0013960:	75 12                	jne    c0013974 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0013962:	4a                   	dec    edx
c0013963:	b8 09 15 02 c0       	mov    eax,0xc0021509
c0013968:	80 fa 01             	cmp    dl,0x1
c001396b:	77 6d                	ja     c00139da <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001396d:	b8 b0 2e 02 c0       	mov    eax,0xc0022eb0
c0013972:	eb 66                	jmp    c00139da <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013974:	80 f9 15             	cmp    cl,0x15
c0013977:	75 31                	jne    c00139aa <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c0013979:	b8 c0 2e 02 c0       	mov    eax,0xc0022ec0
c001397e:	80 fa 01             	cmp    dl,0x1
c0013981:	74 57                	je     c00139da <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013983:	b8 09 15 02 c0       	mov    eax,0xc0021509
c0013988:	80 fa 13             	cmp    dl,0x13
c001398b:	76 0c                	jbe    c0013999 <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c001398d:	80 fa 30             	cmp    dl,0x30
c0013990:	75 48                	jne    c00139da <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013992:	b8 e0 2e 02 c0       	mov    eax,0xc0022ee0
c0013997:	eb 41                	jmp    c00139da <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013999:	b9 04 00 09 00       	mov    ecx,0x90004
c001399e:	0f a3 d1             	bt     ecx,edx
c00139a1:	73 37                	jae    c00139da <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139a3:	b8 d0 2e 02 c0       	mov    eax,0xc0022ed0
c00139a8:	eb 30                	jmp    c00139da <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139aa:	b8 09 15 02 c0       	mov    eax,0xc0021509
c00139af:	80 f9 16             	cmp    cl,0x16
c00139b2:	75 26                	jne    c00139da <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139b4:	b8 f0 2e 02 c0       	mov    eax,0xc0022ef0
c00139b9:	84 d2                	test   dl,dl
c00139bb:	74 1d                	je     c00139da <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139bd:	b8 09 15 02 c0       	mov    eax,0xc0021509
c00139c2:	80 fa 30             	cmp    dl,0x30
c00139c5:	75 13                	jne    c00139da <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139c7:	b8 00 2f 02 c0       	mov    eax,0xc0022f00
c00139cc:	eb 0c                	jmp    c00139da <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139ce:	b8 20 2e 02 c0       	mov    eax,0xc0022e20
c00139d3:	eb 05                	jmp    c00139da <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139d5:	b8 90 2e 02 c0       	mov    eax,0xc0022e90
c00139da:	5b                   	pop    ebx
c00139db:	5e                   	pop    esi
c00139dc:	5f                   	pop    edi
c00139dd:	5d                   	pop    ebp
c00139de:	c3                   	ret    

c00139df <lookupIntelCPUName(unsigned char, unsigned char)>:
c00139df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00139e3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00139e7:	80 f9 04             	cmp    cl,0x4
c00139ea:	75 6b                	jne    c0013a57 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c00139ec:	b8 80 2c 02 c0       	mov    eax,0xc0022c80
c00139f1:	80 fa 01             	cmp    dl,0x1
c00139f4:	0f 86 92 02 00 00    	jbe    c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139fa:	b8 90 2c 02 c0       	mov    eax,0xc0022c90
c00139ff:	80 fa 02             	cmp    dl,0x2
c0013a02:	0f 84 84 02 00 00    	je     c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a08:	b8 a0 2c 02 c0       	mov    eax,0xc0022ca0
c0013a0d:	80 fa 03             	cmp    dl,0x3
c0013a10:	0f 84 76 02 00 00    	je     c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a16:	b8 b0 2c 02 c0       	mov    eax,0xc0022cb0
c0013a1b:	80 fa 04             	cmp    dl,0x4
c0013a1e:	0f 84 68 02 00 00    	je     c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a24:	b8 c0 2c 02 c0       	mov    eax,0xc0022cc0
c0013a29:	80 fa 05             	cmp    dl,0x5
c0013a2c:	0f 84 5a 02 00 00    	je     c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a32:	b8 a0 2c 02 c0       	mov    eax,0xc0022ca0
c0013a37:	80 fa 07             	cmp    dl,0x7
c0013a3a:	0f 84 4c 02 00 00    	je     c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a40:	83 ea 08             	sub    edx,0x8
c0013a43:	b8 09 15 02 c0       	mov    eax,0xc0021509
c0013a48:	80 fa 01             	cmp    dl,0x1
c0013a4b:	0f 87 3b 02 00 00    	ja     c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a51:	b8 d0 2c 02 c0       	mov    eax,0xc0022cd0
c0013a56:	c3                   	ret    
c0013a57:	80 f9 05             	cmp    cl,0x5
c0013a5a:	75 45                	jne    c0013aa1 <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0013a5c:	8d 4a ff             	lea    ecx,[edx-0x1]
c0013a5f:	b8 e0 2c 02 c0       	mov    eax,0xc0022ce0
c0013a64:	80 f9 02             	cmp    cl,0x2
c0013a67:	0f 86 1f 02 00 00    	jbe    c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a6d:	80 fa 04             	cmp    dl,0x4
c0013a70:	0f 84 f3 01 00 00    	je     c0013c69 <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c0013a76:	80 fa 07             	cmp    dl,0x7
c0013a79:	0f 84 0d 02 00 00    	je     c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a7f:	b8 f0 2c 02 c0       	mov    eax,0xc0022cf0
c0013a84:	80 fa 08             	cmp    dl,0x8
c0013a87:	0f 84 ff 01 00 00    	je     c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a8d:	b8 09 15 02 c0       	mov    eax,0xc0021509
c0013a92:	80 fa 09             	cmp    dl,0x9
c0013a95:	0f 85 f1 01 00 00    	jne    c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a9b:	b8 00 2d 02 c0       	mov    eax,0xc0022d00
c0013aa0:	c3                   	ret    
c0013aa1:	80 f9 06             	cmp    cl,0x6
c0013aa4:	0f 85 85 01 00 00    	jne    c0013c2f <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c0013aaa:	b8 10 2d 02 c0       	mov    eax,0xc0022d10
c0013aaf:	80 fa 01             	cmp    dl,0x1
c0013ab2:	0f 84 d4 01 00 00    	je     c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ab8:	8d 42 fb             	lea    eax,[edx-0x5]
c0013abb:	3c 01                	cmp    al,0x1
c0013abd:	0f 86 ac 01 00 00    	jbe    c0013c6f <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0013ac3:	80 fa 03             	cmp    dl,0x3
c0013ac6:	0f 84 a3 01 00 00    	je     c0013c6f <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0013acc:	8d 4a f9             	lea    ecx,[edx-0x7]
c0013acf:	b8 30 2d 02 c0       	mov    eax,0xc0022d30
c0013ad4:	80 f9 01             	cmp    cl,0x1
c0013ad7:	0f 86 af 01 00 00    	jbe    c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013add:	80 fa 09             	cmp    dl,0x9
c0013ae0:	0f 84 8f 01 00 00    	je     c0013c75 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0013ae6:	8d 4a f6             	lea    ecx,[edx-0xa]
c0013ae9:	80 f9 01             	cmp    cl,0x1
c0013aec:	0f 86 9a 01 00 00    	jbe    c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013af2:	b8 40 2d 02 c0       	mov    eax,0xc0022d40
c0013af7:	80 fa 0d             	cmp    dl,0xd
c0013afa:	0f 84 8c 01 00 00    	je     c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b00:	b8 50 2d 02 c0       	mov    eax,0xc0022d50
c0013b05:	80 fa 0e             	cmp    dl,0xe
c0013b08:	0f 84 7e 01 00 00    	je     c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b0e:	b8 60 2d 02 c0       	mov    eax,0xc0022d60
c0013b13:	80 fa 0f             	cmp    dl,0xf
c0013b16:	0f 84 70 01 00 00    	je     c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b1c:	b8 40 2d 02 c0       	mov    eax,0xc0022d40
c0013b21:	80 fa 15             	cmp    dl,0x15
c0013b24:	0f 84 62 01 00 00    	je     c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b2a:	8d 4a ea             	lea    ecx,[edx-0x16]
c0013b2d:	b8 60 2d 02 c0       	mov    eax,0xc0022d60
c0013b32:	80 f9 01             	cmp    cl,0x1
c0013b35:	0f 86 51 01 00 00    	jbe    c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b3b:	80 fa 1a             	cmp    dl,0x1a
c0013b3e:	0f 84 37 01 00 00    	je     c0013c7b <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0013b44:	80 fa 1c             	cmp    dl,0x1c
c0013b47:	0f 84 34 01 00 00    	je     c0013c81 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0013b4d:	80 fa 1d             	cmp    dl,0x1d
c0013b50:	0f 84 36 01 00 00    	je     c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b56:	b8 90 2d 02 c0       	mov    eax,0xc0022d90
c0013b5b:	80 fa 25             	cmp    dl,0x25
c0013b5e:	0f 84 28 01 00 00    	je     c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b64:	8d 4a da             	lea    ecx,[edx-0x26]
c0013b67:	b8 80 2d 02 c0       	mov    eax,0xc0022d80
c0013b6c:	80 f9 01             	cmp    cl,0x1
c0013b6f:	0f 86 17 01 00 00    	jbe    c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b75:	b8 a0 2d 02 c0       	mov    eax,0xc0022da0
c0013b7a:	80 fa 2a             	cmp    dl,0x2a
c0013b7d:	0f 84 09 01 00 00    	je     c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b83:	b8 90 2d 02 c0       	mov    eax,0xc0022d90
c0013b88:	80 fa 2c             	cmp    dl,0x2c
c0013b8b:	0f 84 fb 00 00 00    	je     c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b91:	b8 a0 2d 02 c0       	mov    eax,0xc0022da0
c0013b96:	80 fa 2d             	cmp    dl,0x2d
c0013b99:	0f 84 ed 00 00 00    	je     c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b9f:	b8 70 2d 02 c0       	mov    eax,0xc0022d70
c0013ba4:	80 fa 2e             	cmp    dl,0x2e
c0013ba7:	0f 84 df 00 00 00    	je     c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bad:	b8 90 2d 02 c0       	mov    eax,0xc0022d90
c0013bb2:	80 fa 2f             	cmp    dl,0x2f
c0013bb5:	0f 84 d1 00 00 00    	je     c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bbb:	8d 4a cb             	lea    ecx,[edx-0x35]
c0013bbe:	b8 80 2d 02 c0       	mov    eax,0xc0022d80
c0013bc3:	80 f9 01             	cmp    cl,0x1
c0013bc6:	0f 86 c0 00 00 00    	jbe    c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bcc:	b8 b0 2d 02 c0       	mov    eax,0xc0022db0
c0013bd1:	80 fa 37             	cmp    dl,0x37
c0013bd4:	0f 84 b2 00 00 00    	je     c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bda:	b8 c0 2d 02 c0       	mov    eax,0xc0022dc0
c0013bdf:	80 fa 3a             	cmp    dl,0x3a
c0013be2:	0f 84 a4 00 00 00    	je     c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013be8:	b8 d0 2d 02 c0       	mov    eax,0xc0022dd0
c0013bed:	80 fa 3c             	cmp    dl,0x3c
c0013bf0:	0f 84 96 00 00 00    	je     c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bf6:	b8 e0 2d 02 c0       	mov    eax,0xc0022de0
c0013bfb:	80 fa 3d             	cmp    dl,0x3d
c0013bfe:	0f 84 88 00 00 00    	je     c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c04:	b8 c0 2d 02 c0       	mov    eax,0xc0022dc0
c0013c09:	80 fa 3e             	cmp    dl,0x3e
c0013c0c:	74 7e                	je     c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c0e:	8d 42 bb             	lea    eax,[edx-0x45]
c0013c11:	3c 01                	cmp    al,0x1
c0013c13:	76 72                	jbe    c0013c87 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0013c15:	80 fa 3f             	cmp    dl,0x3f
c0013c18:	74 6d                	je     c0013c87 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0013c1a:	80 fa 4a             	cmp    dl,0x4a
c0013c1d:	74 0a                	je     c0013c29 <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0013c1f:	b8 09 15 02 c0       	mov    eax,0xc0021509
c0013c24:	80 fa 4d             	cmp    dl,0x4d
c0013c27:	75 63                	jne    c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c29:	b8 b0 2d 02 c0       	mov    eax,0xc0022db0
c0013c2e:	c3                   	ret    
c0013c2f:	b8 09 15 02 c0       	mov    eax,0xc0021509
c0013c34:	80 f9 0b             	cmp    cl,0xb
c0013c37:	75 0a                	jne    c0013c43 <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0013c39:	fe ca                	dec    dl
c0013c3b:	75 4f                	jne    c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c3d:	b8 f0 2d 02 c0       	mov    eax,0xc0022df0
c0013c42:	c3                   	ret    
c0013c43:	80 f9 0f             	cmp    cl,0xf
c0013c46:	75 44                	jne    c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c48:	b8 00 2e 02 c0       	mov    eax,0xc0022e00
c0013c4d:	80 fa 02             	cmp    dl,0x2
c0013c50:	76 3a                	jbe    c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c52:	8d 42 fd             	lea    eax,[edx-0x3]
c0013c55:	3c 01                	cmp    al,0x1
c0013c57:	76 0a                	jbe    c0013c63 <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0013c59:	b8 09 15 02 c0       	mov    eax,0xc0021509
c0013c5e:	80 fa 06             	cmp    dl,0x6
c0013c61:	75 29                	jne    c0013c8c <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c63:	b8 10 2e 02 c0       	mov    eax,0xc0022e10
c0013c68:	c3                   	ret    
c0013c69:	b8 f0 2c 02 c0       	mov    eax,0xc0022cf0
c0013c6e:	c3                   	ret    
c0013c6f:	b8 20 2d 02 c0       	mov    eax,0xc0022d20
c0013c74:	c3                   	ret    
c0013c75:	b8 40 2d 02 c0       	mov    eax,0xc0022d40
c0013c7a:	c3                   	ret    
c0013c7b:	b8 70 2d 02 c0       	mov    eax,0xc0022d70
c0013c80:	c3                   	ret    
c0013c81:	b8 80 2d 02 c0       	mov    eax,0xc0022d80
c0013c86:	c3                   	ret    
c0013c87:	b8 d0 2d 02 c0       	mov    eax,0xc0022dd0
c0013c8c:	c3                   	ret    

c0013c8d <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0013c8d:	60                   	pusha  
c0013c8e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013c9a:	9c                   	pushf  
c0013c9b:	fa                   	cli    
c0013c9c:	0f 09                	wbinvd 
c0013c9e:	0f 30                	wrmsr  
c0013ca0:	9d                   	popf   
c0013ca1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ca5:	89 02                	mov    DWORD PTR [edx],eax
c0013ca7:	61                   	popa   
c0013ca8:	c3                   	ret    

c0013ca9 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0013ca9:	60                   	pusha  
c0013caa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013cae:	9c                   	pushf  
c0013caf:	fa                   	cli    
c0013cb0:	0f 09                	wbinvd 
c0013cb2:	31 c0                	xor    eax,eax
c0013cb4:	31 d2                	xor    edx,edx
c0013cb6:	0f 32                	rdmsr  
c0013cb8:	9d                   	popf   
c0013cb9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013cbd:	89 02                	mov    DWORD PTR [edx],eax
c0013cbf:	61                   	popa   
c0013cc0:	c3                   	ret    

c0013cc1 <AMD_K6_writeback(int, int, int)>:
c0013cc1:	56                   	push   esi
c0013cc2:	53                   	push   ebx
c0013cc3:	83 ec 10             	sub    esp,0x10
c0013cc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cca:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013ccf:	75 5d                	jne    c0013d2e <AMD_K6_writeback(int, int, int)+0x6d>
c0013cd1:	83 f8 08             	cmp    eax,0x8
c0013cd4:	75 09                	jne    c0013cdf <AMD_K6_writeback(int, int, int)+0x1e>
c0013cd6:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0013cdb:	7e 13                	jle    c0013cf0 <AMD_K6_writeback(int, int, int)+0x2f>
c0013cdd:	eb 30                	jmp    c0013d0f <AMD_K6_writeback(int, int, int)+0x4e>
c0013cdf:	83 f8 06             	cmp    eax,0x6
c0013ce2:	7c 4a                	jl     c0013d2e <AMD_K6_writeback(int, int, int)+0x6d>
c0013ce4:	83 f8 07             	cmp    eax,0x7
c0013ce7:	7e 07                	jle    c0013cf0 <AMD_K6_writeback(int, int, int)+0x2f>
c0013ce9:	83 f8 09             	cmp    eax,0x9
c0013cec:	74 21                	je     c0013d0f <AMD_K6_writeback(int, int, int)+0x4e>
c0013cee:	eb 3e                	jmp    c0013d2e <AMD_K6_writeback(int, int, int)+0x6d>
c0013cf0:	89 e6                	mov    esi,esp
c0013cf2:	8b 1d 44 35 02 c0    	mov    ebx,DWORD PTR ds:0xc0023544
c0013cf8:	56                   	push   esi
c0013cf9:	c1 eb 15             	shr    ebx,0x15
c0013cfc:	68 82 00 00 c0       	push   0xc0000082
c0013d01:	83 e3 7e             	and    ebx,0x7e
c0013d04:	e8 a0 ff ff ff       	call   c0013ca9 <AMD_K6_read_msr(unsigned int, REGS*)>
c0013d09:	56                   	push   esi
c0013d0a:	6a 00                	push   0x0
c0013d0c:	53                   	push   ebx
c0013d0d:	eb 12                	jmp    c0013d21 <AMD_K6_writeback(int, int, int)+0x60>
c0013d0f:	89 e3                	mov    ebx,esp
c0013d11:	53                   	push   ebx
c0013d12:	68 82 00 00 c0       	push   0xc0000082
c0013d17:	e8 8d ff ff ff       	call   c0013ca9 <AMD_K6_read_msr(unsigned int, REGS*)>
c0013d1c:	53                   	push   ebx
c0013d1d:	6a 00                	push   0x0
c0013d1f:	6a 00                	push   0x0
c0013d21:	68 82 00 00 c0       	push   0xc0000082
c0013d26:	e8 62 ff ff ff       	call   c0013c8d <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0013d2b:	83 c4 18             	add    esp,0x18
c0013d2e:	83 c4 10             	add    esp,0x10
c0013d31:	5b                   	pop    ebx
c0013d32:	5e                   	pop    esi
c0013d33:	c3                   	ret    

c0013d34 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0013d34:	55                   	push   ebp
c0013d35:	57                   	push   edi
c0013d36:	56                   	push   esi
c0013d37:	53                   	push   ebx
c0013d38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d3c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013d40:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013d44:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013d48:	39 05 20 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f20,eax
c0013d4e:	75 23                	jne    c0013d73 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0013d50:	a1 cc 3e 02 c0       	mov    eax,ds:0xc0023ecc
c0013d55:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013d59:	89 06                	mov    DWORD PTR [esi],eax
c0013d5b:	a1 c8 3e 02 c0       	mov    eax,ds:0xc0023ec8
c0013d60:	89 07                	mov    DWORD PTR [edi],eax
c0013d62:	a1 c4 3e 02 c0       	mov    eax,ds:0xc0023ec4
c0013d67:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013d6a:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c0013d6f:	89 02                	mov    DWORD PTR [edx],eax
c0013d71:	eb 3f                	jmp    c0013db2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013d73:	31 c9                	xor    ecx,ecx
c0013d75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d79:	0f a2                	cpuid  
c0013d7b:	89 06                	mov    DWORD PTR [esi],eax
c0013d7d:	89 1f                	mov    DWORD PTR [edi],ebx
c0013d7f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013d83:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013d86:	89 10                	mov    DWORD PTR [eax],edx
c0013d88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d8c:	a3 20 2f 02 c0       	mov    ds:0xc0022f20,eax
c0013d91:	8b 06                	mov    eax,DWORD PTR [esi]
c0013d93:	a3 cc 3e 02 c0       	mov    ds:0xc0023ecc,eax
c0013d98:	8b 07                	mov    eax,DWORD PTR [edi]
c0013d9a:	a3 c8 3e 02 c0       	mov    ds:0xc0023ec8,eax
c0013d9f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013da2:	a3 c4 3e 02 c0       	mov    ds:0xc0023ec4,eax
c0013da7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013dab:	8b 00                	mov    eax,DWORD PTR [eax]
c0013dad:	a3 c0 3e 02 c0       	mov    ds:0xc0023ec0,eax
c0013db2:	5b                   	pop    ebx
c0013db3:	5e                   	pop    esi
c0013db4:	5f                   	pop    edi
c0013db5:	5d                   	pop    ebp
c0013db6:	c3                   	ret    

c0013db7 <cpuidCheckEDX(unsigned int)>:
c0013db7:	83 ec 10             	sub    esp,0x10
c0013dba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013dbe:	50                   	push   eax
c0013dbf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013dc3:	50                   	push   eax
c0013dc4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013dc8:	50                   	push   eax
c0013dc9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013dcd:	50                   	push   eax
c0013dce:	6a 01                	push   0x1
c0013dd0:	e8 5f ff ff ff       	call   c0013d34 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013dd5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013dd9:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0013ddd:	0f 95 c0             	setne  al
c0013de0:	83 c4 24             	add    esp,0x24
c0013de3:	c3                   	ret    

c0013de4 <cpuidCheckECX(unsigned int)>:
c0013de4:	83 ec 10             	sub    esp,0x10
c0013de7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013deb:	50                   	push   eax
c0013dec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013df0:	50                   	push   eax
c0013df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013df5:	50                   	push   eax
c0013df6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013dfa:	50                   	push   eax
c0013dfb:	6a 01                	push   0x1
c0013dfd:	e8 32 ff ff ff       	call   c0013d34 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013e02:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013e06:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013e0a:	0f 95 c0             	setne  al
c0013e0d:	83 c4 24             	add    esp,0x24
c0013e10:	c3                   	ret    

c0013e11 <cpuidCheckExtendedEBX(unsigned int)>:
c0013e11:	83 ec 10             	sub    esp,0x10
c0013e14:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013e18:	50                   	push   eax
c0013e19:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013e1d:	50                   	push   eax
c0013e1e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013e22:	50                   	push   eax
c0013e23:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013e27:	50                   	push   eax
c0013e28:	6a 07                	push   0x7
c0013e2a:	e8 05 ff ff ff       	call   c0013d34 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013e2f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013e33:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0013e37:	0f 95 c0             	setne  al
c0013e3a:	83 c4 24             	add    esp,0x24
c0013e3d:	c3                   	ret    

c0013e3e <cpuidCheckExtendedECX(unsigned int)>:
c0013e3e:	83 ec 10             	sub    esp,0x10
c0013e41:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013e45:	50                   	push   eax
c0013e46:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013e4a:	50                   	push   eax
c0013e4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013e4f:	50                   	push   eax
c0013e50:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013e54:	50                   	push   eax
c0013e55:	6a 07                	push   0x7
c0013e57:	e8 d8 fe ff ff       	call   c0013d34 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013e5c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013e60:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013e64:	0f 95 c0             	setne  al
c0013e67:	83 c4 24             	add    esp,0x24
c0013e6a:	c3                   	ret    

c0013e6b <getCPUNumber()>:
c0013e6b:	31 c0                	xor    eax,eax
c0013e6d:	c3                   	ret    

c0013e6e <thisCPU()>:
c0013e6e:	e8 f8 ff ff ff       	call   c0013e6b <getCPUNumber()>
c0013e73:	8b 15 08 35 02 c0    	mov    edx,DWORD PTR ds:0xc0023508
c0013e79:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0013e80:	c3                   	ret    
c0013e81:	90                   	nop

c0013e82 <CPU::CPU()>:
c0013e82:	83 ec 0c             	sub    esp,0xc
c0013e85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e89:	83 ec 08             	sub    esp,0x8
c0013e8c:	68 09 15 02 c0       	push   0xc0021509
c0013e91:	50                   	push   eax
c0013e92:	e8 43 c6 ff ff       	call   c00104da <Device::Device(char const*)>
c0013e97:	83 c4 10             	add    esp,0x10
c0013e9a:	ba e0 15 02 c0       	mov    edx,0xc00215e0
c0013e9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ea3:	89 10                	mov    DWORD PTR [eax],edx
c0013ea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ea9:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0013eb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eb7:	05 78 01 00 00       	add    eax,0x178
c0013ebc:	83 ec 0c             	sub    esp,0xc
c0013ebf:	50                   	push   eax
c0013ec0:	e8 69 75 ff ff       	call   c000b42e <GDT::GDT()>
c0013ec5:	83 c4 10             	add    esp,0x10
c0013ec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ecc:	05 7c 09 00 00       	add    eax,0x97c
c0013ed1:	83 ec 0c             	sub    esp,0xc
c0013ed4:	50                   	push   eax
c0013ed5:	e8 b4 77 ff ff       	call   c000b68e <IDT::IDT()>
c0013eda:	83 c4 10             	add    esp,0x10
c0013edd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ee1:	05 7c 11 00 00       	add    eax,0x117c
c0013ee6:	83 ec 0c             	sub    esp,0xc
c0013ee9:	50                   	push   eax
c0013eea:	e8 5d 97 ff ff       	call   c000d64c <TSS::TSS()>
c0013eef:	83 c4 10             	add    esp,0x10
c0013ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef6:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0013efd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f01:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0013f0b:	90                   	nop
c0013f0c:	83 c4 0c             	add    esp,0xc
c0013f0f:	c3                   	ret    

c0013f10 <CPU::displayFeatures()>:
c0013f10:	c3                   	ret    
c0013f11:	90                   	nop

c0013f12 <CPU::detectFeatures()>:
c0013f12:	55                   	push   ebp
c0013f13:	57                   	push   edi
c0013f14:	56                   	push   esi
c0013f15:	53                   	push   ebx
c0013f16:	83 ec 50             	sub    esp,0x50
c0013f19:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0013f1d:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013f27:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0013f2e:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0013f34:	6a 0d                	push   0xd
c0013f36:	6a 00                	push   0x0
c0013f38:	57                   	push   edi
c0013f39:	e8 ca c6 fe ff       	call   c0000608 <memset>
c0013f3e:	83 c4 10             	add    esp,0x10
c0013f41:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c0013f46:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0013f4d:	0f 84 20 09 00 00    	je     c0014873 <CPU::detectFeatures()+0x961>
c0013f53:	83 ec 0c             	sub    esp,0xc
c0013f56:	6a 10                	push   0x10
c0013f58:	e8 5a fe ff ff       	call   c0013db7 <cpuidCheckEDX(unsigned int)>
c0013f5d:	83 e0 01             	and    eax,0x1
c0013f60:	8d 14 00             	lea    edx,[eax+eax*1]
c0013f63:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013f69:	83 e0 fd             	and    eax,0xfffffffd
c0013f6c:	09 d0                	or     eax,edx
c0013f6e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013f74:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0013f7b:	e8 37 fe ff ff       	call   c0013db7 <cpuidCheckEDX(unsigned int)>
c0013f80:	83 e0 01             	and    eax,0x1
c0013f83:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013f8a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013f90:	83 e0 fb             	and    eax,0xfffffffb
c0013f93:	09 d0                	or     eax,edx
c0013f95:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013f9b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013fa2:	e8 10 fe ff ff       	call   c0013db7 <cpuidCheckEDX(unsigned int)>
c0013fa7:	83 e0 01             	and    eax,0x1
c0013faa:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013fb1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013fb7:	83 e0 f7             	and    eax,0xfffffff7
c0013fba:	09 d0                	or     eax,edx
c0013fbc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013fc2:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0013fc9:	e8 e9 fd ff ff       	call   c0013db7 <cpuidCheckEDX(unsigned int)>
c0013fce:	83 e0 01             	and    eax,0x1
c0013fd1:	c1 e0 04             	shl    eax,0x4
c0013fd4:	88 c2                	mov    dl,al
c0013fd6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013fdc:	83 e0 ef             	and    eax,0xffffffef
c0013fdf:	09 d0                	or     eax,edx
c0013fe1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013fe7:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0013fee:	e8 c4 fd ff ff       	call   c0013db7 <cpuidCheckEDX(unsigned int)>
c0013ff3:	83 e0 01             	and    eax,0x1
c0013ff6:	c1 e0 05             	shl    eax,0x5
c0013ff9:	88 c2                	mov    dl,al
c0013ffb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014001:	83 e0 df             	and    eax,0xffffffdf
c0014004:	09 d0                	or     eax,edx
c0014006:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001400c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0014013:	e8 9f fd ff ff       	call   c0013db7 <cpuidCheckEDX(unsigned int)>
c0014018:	83 e0 01             	and    eax,0x1
c001401b:	8d 14 00             	lea    edx,[eax+eax*1]
c001401e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014024:	83 e0 fd             	and    eax,0xfffffffd
c0014027:	09 d0                	or     eax,edx
c0014029:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001402f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0014036:	e8 7c fd ff ff       	call   c0013db7 <cpuidCheckEDX(unsigned int)>
c001403b:	83 e0 01             	and    eax,0x1
c001403e:	c1 e0 06             	shl    eax,0x6
c0014041:	88 c2                	mov    dl,al
c0014043:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014049:	83 e0 bf             	and    eax,0xffffffbf
c001404c:	09 d0                	or     eax,edx
c001404e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014054:	58                   	pop    eax
c0014055:	8d 74 24 28          	lea    esi,[esp+0x28]
c0014059:	56                   	push   esi
c001405a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001405e:	55                   	push   ebp
c001405f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014063:	50                   	push   eax
c0014064:	8d 54 24 28          	lea    edx,[esp+0x28]
c0014068:	52                   	push   edx
c0014069:	6a 00                	push   0x0
c001406b:	e8 c4 fc ff ff       	call   c0013d34 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014070:	83 c4 1c             	add    esp,0x1c
c0014073:	6a 04                	push   0x4
c0014075:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0014079:	50                   	push   eax
c001407a:	57                   	push   edi
c001407b:	e8 52 c5 fe ff       	call   c00005d2 <memcpy>
c0014080:	83 c4 0c             	add    esp,0xc
c0014083:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0014089:	6a 04                	push   0x4
c001408b:	56                   	push   esi
c001408c:	50                   	push   eax
c001408d:	e8 40 c5 fe ff       	call   c00005d2 <memcpy>
c0014092:	83 c4 0c             	add    esp,0xc
c0014095:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c001409b:	6a 04                	push   0x4
c001409d:	55                   	push   ebp
c001409e:	50                   	push   eax
c001409f:	e8 2e c5 fe ff       	call   c00005d2 <memcpy>
c00140a4:	58                   	pop    eax
c00140a5:	5a                   	pop    edx
c00140a6:	68 b4 13 02 c0       	push   0xc00213b4
c00140ab:	57                   	push   edi
c00140ac:	e8 47 c6 fe ff       	call   c00006f8 <strcmp>
c00140b1:	83 c4 10             	add    esp,0x10
c00140b4:	85 c0                	test   eax,eax
c00140b6:	75 0f                	jne    c00140c7 <CPU::detectFeatures()+0x1b5>
c00140b8:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00140c2:	e9 22 02 00 00       	jmp    c00142e9 <CPU::detectFeatures()+0x3d7>
c00140c7:	50                   	push   eax
c00140c8:	50                   	push   eax
c00140c9:	68 c1 13 02 c0       	push   0xc00213c1
c00140ce:	57                   	push   edi
c00140cf:	e8 24 c6 fe ff       	call   c00006f8 <strcmp>
c00140d4:	83 c4 10             	add    esp,0x10
c00140d7:	85 c0                	test   eax,eax
c00140d9:	74 dd                	je     c00140b8 <CPU::detectFeatures()+0x1a6>
c00140db:	51                   	push   ecx
c00140dc:	51                   	push   ecx
c00140dd:	68 ce 13 02 c0       	push   0xc00213ce
c00140e2:	57                   	push   edi
c00140e3:	e8 10 c6 fe ff       	call   c00006f8 <strcmp>
c00140e8:	83 c4 10             	add    esp,0x10
c00140eb:	85 c0                	test   eax,eax
c00140ed:	74 2a                	je     c0014119 <CPU::detectFeatures()+0x207>
c00140ef:	52                   	push   edx
c00140f0:	52                   	push   edx
c00140f1:	68 db 13 02 c0       	push   0xc00213db
c00140f6:	57                   	push   edi
c00140f7:	e8 fc c5 fe ff       	call   c00006f8 <strcmp>
c00140fc:	83 c4 10             	add    esp,0x10
c00140ff:	85 c0                	test   eax,eax
c0014101:	74 16                	je     c0014119 <CPU::detectFeatures()+0x207>
c0014103:	50                   	push   eax
c0014104:	50                   	push   eax
c0014105:	68 e8 13 02 c0       	push   0xc00213e8
c001410a:	57                   	push   edi
c001410b:	e8 e8 c5 fe ff       	call   c00006f8 <strcmp>
c0014110:	83 c4 10             	add    esp,0x10
c0014113:	85 c0                	test   eax,eax
c0014115:	74 48                	je     c001415f <CPU::detectFeatures()+0x24d>
c0014117:	eb 0f                	jmp    c0014128 <CPU::detectFeatures()+0x216>
c0014119:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0014123:	e9 c1 01 00 00       	jmp    c00142e9 <CPU::detectFeatures()+0x3d7>
c0014128:	50                   	push   eax
c0014129:	50                   	push   eax
c001412a:	68 f5 13 02 c0       	push   0xc00213f5
c001412f:	57                   	push   edi
c0014130:	e8 c3 c5 fe ff       	call   c00006f8 <strcmp>
c0014135:	83 c4 10             	add    esp,0x10
c0014138:	85 c0                	test   eax,eax
c001413a:	74 23                	je     c001415f <CPU::detectFeatures()+0x24d>
c001413c:	50                   	push   eax
c001413d:	50                   	push   eax
c001413e:	68 02 14 02 c0       	push   0xc0021402
c0014143:	57                   	push   edi
c0014144:	e8 af c5 fe ff       	call   c00006f8 <strcmp>
c0014149:	83 c4 10             	add    esp,0x10
c001414c:	85 c0                	test   eax,eax
c001414e:	75 1e                	jne    c001416e <CPU::detectFeatures()+0x25c>
c0014150:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001415a:	e9 8a 01 00 00       	jmp    c00142e9 <CPU::detectFeatures()+0x3d7>
c001415f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0014169:	e9 7b 01 00 00       	jmp    c00142e9 <CPU::detectFeatures()+0x3d7>
c001416e:	50                   	push   eax
c001416f:	50                   	push   eax
c0014170:	68 0f 14 02 c0       	push   0xc002140f
c0014175:	57                   	push   edi
c0014176:	e8 7d c5 fe ff       	call   c00006f8 <strcmp>
c001417b:	83 c4 10             	add    esp,0x10
c001417e:	85 c0                	test   eax,eax
c0014180:	75 0f                	jne    c0014191 <CPU::detectFeatures()+0x27f>
c0014182:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001418c:	e9 58 01 00 00       	jmp    c00142e9 <CPU::detectFeatures()+0x3d7>
c0014191:	50                   	push   eax
c0014192:	50                   	push   eax
c0014193:	68 ce 13 02 c0       	push   0xc00213ce
c0014198:	57                   	push   edi
c0014199:	e8 5a c5 fe ff       	call   c00006f8 <strcmp>
c001419e:	83 c4 10             	add    esp,0x10
c00141a1:	85 c0                	test   eax,eax
c00141a3:	75 0f                	jne    c00141b4 <CPU::detectFeatures()+0x2a2>
c00141a5:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00141af:	e9 35 01 00 00       	jmp    c00142e9 <CPU::detectFeatures()+0x3d7>
c00141b4:	50                   	push   eax
c00141b5:	50                   	push   eax
c00141b6:	68 1c 14 02 c0       	push   0xc002141c
c00141bb:	57                   	push   edi
c00141bc:	e8 37 c5 fe ff       	call   c00006f8 <strcmp>
c00141c1:	83 c4 10             	add    esp,0x10
c00141c4:	85 c0                	test   eax,eax
c00141c6:	75 0f                	jne    c00141d7 <CPU::detectFeatures()+0x2c5>
c00141c8:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00141d2:	e9 12 01 00 00       	jmp    c00142e9 <CPU::detectFeatures()+0x3d7>
c00141d7:	51                   	push   ecx
c00141d8:	51                   	push   ecx
c00141d9:	68 29 14 02 c0       	push   0xc0021429
c00141de:	57                   	push   edi
c00141df:	e8 14 c5 fe ff       	call   c00006f8 <strcmp>
c00141e4:	83 c4 10             	add    esp,0x10
c00141e7:	85 c0                	test   eax,eax
c00141e9:	75 0f                	jne    c00141fa <CPU::detectFeatures()+0x2e8>
c00141eb:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00141f5:	e9 ef 00 00 00       	jmp    c00142e9 <CPU::detectFeatures()+0x3d7>
c00141fa:	52                   	push   edx
c00141fb:	52                   	push   edx
c00141fc:	68 36 14 02 c0       	push   0xc0021436
c0014201:	57                   	push   edi
c0014202:	e8 f1 c4 fe ff       	call   c00006f8 <strcmp>
c0014207:	83 c4 10             	add    esp,0x10
c001420a:	85 c0                	test   eax,eax
c001420c:	75 0f                	jne    c001421d <CPU::detectFeatures()+0x30b>
c001420e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0014218:	e9 cc 00 00 00       	jmp    c00142e9 <CPU::detectFeatures()+0x3d7>
c001421d:	50                   	push   eax
c001421e:	50                   	push   eax
c001421f:	68 43 14 02 c0       	push   0xc0021443
c0014224:	57                   	push   edi
c0014225:	e8 ce c4 fe ff       	call   c00006f8 <strcmp>
c001422a:	83 c4 10             	add    esp,0x10
c001422d:	85 c0                	test   eax,eax
c001422f:	75 0f                	jne    c0014240 <CPU::detectFeatures()+0x32e>
c0014231:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001423b:	e9 a9 00 00 00       	jmp    c00142e9 <CPU::detectFeatures()+0x3d7>
c0014240:	50                   	push   eax
c0014241:	50                   	push   eax
c0014242:	68 50 14 02 c0       	push   0xc0021450
c0014247:	57                   	push   edi
c0014248:	e8 ab c4 fe ff       	call   c00006f8 <strcmp>
c001424d:	83 c4 10             	add    esp,0x10
c0014250:	85 c0                	test   eax,eax
c0014252:	75 0f                	jne    c0014263 <CPU::detectFeatures()+0x351>
c0014254:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001425e:	e9 86 00 00 00       	jmp    c00142e9 <CPU::detectFeatures()+0x3d7>
c0014263:	50                   	push   eax
c0014264:	50                   	push   eax
c0014265:	68 5d 14 02 c0       	push   0xc002145d
c001426a:	57                   	push   edi
c001426b:	e8 88 c4 fe ff       	call   c00006f8 <strcmp>
c0014270:	83 c4 10             	add    esp,0x10
c0014273:	85 c0                	test   eax,eax
c0014275:	75 0c                	jne    c0014283 <CPU::detectFeatures()+0x371>
c0014277:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0014281:	eb 66                	jmp    c00142e9 <CPU::detectFeatures()+0x3d7>
c0014283:	50                   	push   eax
c0014284:	50                   	push   eax
c0014285:	68 6a 14 02 c0       	push   0xc002146a
c001428a:	57                   	push   edi
c001428b:	e8 68 c4 fe ff       	call   c00006f8 <strcmp>
c0014290:	83 c4 10             	add    esp,0x10
c0014293:	85 c0                	test   eax,eax
c0014295:	75 0c                	jne    c00142a3 <CPU::detectFeatures()+0x391>
c0014297:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00142a1:	eb 46                	jmp    c00142e9 <CPU::detectFeatures()+0x3d7>
c00142a3:	50                   	push   eax
c00142a4:	50                   	push   eax
c00142a5:	68 77 14 02 c0       	push   0xc0021477
c00142aa:	57                   	push   edi
c00142ab:	e8 48 c4 fe ff       	call   c00006f8 <strcmp>
c00142b0:	83 c4 10             	add    esp,0x10
c00142b3:	85 c0                	test   eax,eax
c00142b5:	74 e0                	je     c0014297 <CPU::detectFeatures()+0x385>
c00142b7:	50                   	push   eax
c00142b8:	50                   	push   eax
c00142b9:	68 84 14 02 c0       	push   0xc0021484
c00142be:	57                   	push   edi
c00142bf:	e8 34 c4 fe ff       	call   c00006f8 <strcmp>
c00142c4:	83 c4 10             	add    esp,0x10
c00142c7:	85 c0                	test   eax,eax
c00142c9:	74 cc                	je     c0014297 <CPU::detectFeatures()+0x385>
c00142cb:	51                   	push   ecx
c00142cc:	51                   	push   ecx
c00142cd:	68 91 14 02 c0       	push   0xc0021491
c00142d2:	57                   	push   edi
c00142d3:	e8 20 c4 fe ff       	call   c00006f8 <strcmp>
c00142d8:	83 c4 10             	add    esp,0x10
c00142db:	85 c0                	test   eax,eax
c00142dd:	74 b8                	je     c0014297 <CPU::detectFeatures()+0x385>
c00142df:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00142e9:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00142ee:	0f 86 be 00 00 00    	jbe    c00143b2 <CPU::detectFeatures()+0x4a0>
c00142f4:	83 ec 0c             	sub    esp,0xc
c00142f7:	68 80 00 00 00       	push   0x80
c00142fc:	e8 10 fb ff ff       	call   c0013e11 <cpuidCheckExtendedEBX(unsigned int)>
c0014301:	83 e0 01             	and    eax,0x1
c0014304:	c1 e0 06             	shl    eax,0x6
c0014307:	88 c2                	mov    dl,al
c0014309:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001430f:	83 e0 bf             	and    eax,0xffffffbf
c0014312:	09 d0                	or     eax,edx
c0014314:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001431a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0014321:	e8 eb fa ff ff       	call   c0013e11 <cpuidCheckExtendedEBX(unsigned int)>
c0014326:	83 e0 01             	and    eax,0x1
c0014329:	c1 e0 04             	shl    eax,0x4
c001432c:	88 c2                	mov    dl,al
c001432e:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014334:	83 e0 ef             	and    eax,0xffffffef
c0014337:	09 d0                	or     eax,edx
c0014339:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001433f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0014346:	e8 c6 fa ff ff       	call   c0013e11 <cpuidCheckExtendedEBX(unsigned int)>
c001434b:	c1 e0 07             	shl    eax,0x7
c001434e:	88 c2                	mov    dl,al
c0014350:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014356:	83 e0 7f             	and    eax,0x7f
c0014359:	09 d0                	or     eax,edx
c001435b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014361:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0014368:	e8 d1 fa ff ff       	call   c0013e3e <cpuidCheckExtendedECX(unsigned int)>
c001436d:	83 e0 01             	and    eax,0x1
c0014370:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014377:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001437d:	83 e0 f7             	and    eax,0xfffffff7
c0014380:	09 d0                	or     eax,edx
c0014382:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014388:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001438f:	e8 aa fa ff ff       	call   c0013e3e <cpuidCheckExtendedECX(unsigned int)>
c0014394:	83 c4 10             	add    esp,0x10
c0014397:	83 e0 01             	and    eax,0x1
c001439a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00143a1:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00143a7:	83 e0 fb             	and    eax,0xfffffffb
c00143aa:	09 d0                	or     eax,edx
c00143ac:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00143b2:	83 ec 0c             	sub    esp,0xc
c00143b5:	56                   	push   esi
c00143b6:	55                   	push   ebp
c00143b7:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00143bb:	57                   	push   edi
c00143bc:	8d 44 24 28          	lea    eax,[esp+0x28]
c00143c0:	50                   	push   eax
c00143c1:	6a 01                	push   0x1
c00143c3:	e8 6c f9 ff ff       	call   c0013d34 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00143c8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00143cc:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00143d2:	88 ca                	mov    dl,cl
c00143d4:	83 e0 f0             	and    eax,0xfffffff0
c00143d7:	83 e2 0f             	and    edx,0xf
c00143da:	09 d0                	or     eax,edx
c00143dc:	88 ca                	mov    dl,cl
c00143de:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00143e4:	c0 ea 04             	shr    dl,0x4
c00143e7:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00143eb:	0f b6 c2             	movzx  eax,dl
c00143ee:	83 c4 20             	add    esp,0x20
c00143f1:	c1 e0 06             	shl    eax,0x6
c00143f4:	89 c5                	mov    ebp,eax
c00143f6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00143fc:	66 25 3f c0          	and    ax,0xc03f
c0014400:	09 e8                	or     eax,ebp
c0014402:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0014409:	89 c8                	mov    eax,ecx
c001440b:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0014411:	c1 e8 08             	shr    eax,0x8
c0014414:	83 e2 3f             	and    edx,0x3f
c0014417:	83 e0 0f             	and    eax,0xf
c001441a:	89 c5                	mov    ebp,eax
c001441c:	c1 e5 06             	shl    ebp,0x6
c001441f:	09 d5                	or     ebp,edx
c0014421:	89 ea                	mov    edx,ebp
c0014423:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0014429:	88 c2                	mov    dl,al
c001442b:	c0 ea 02             	shr    dl,0x2
c001442e:	89 d5                	mov    ebp,edx
c0014430:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0014436:	83 e2 c0             	and    edx,0xffffffc0
c0014439:	09 d5                	or     ebp,edx
c001443b:	89 ea                	mov    edx,ebp
c001443d:	89 cd                	mov    ebp,ecx
c001443f:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0014445:	c1 ed 0c             	shr    ebp,0xc
c0014448:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001444e:	83 e5 03             	and    ebp,0x3
c0014451:	83 e2 cf             	and    edx,0xffffffcf
c0014454:	c1 e5 04             	shl    ebp,0x4
c0014457:	09 d5                	or     ebp,edx
c0014459:	3c 06                	cmp    al,0x6
c001445b:	89 ea                	mov    edx,ebp
c001445d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0014463:	74 04                	je     c0014469 <CPU::detectFeatures()+0x557>
c0014465:	3c 0f                	cmp    al,0xf
c0014467:	75 5c                	jne    c00144c5 <CPU::detectFeatures()+0x5b3>
c0014469:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001446d:	89 cd                	mov    ebp,ecx
c001446f:	c1 ed 10             	shr    ebp,0x10
c0014472:	c1 e5 04             	shl    ebp,0x4
c0014475:	09 ea                	or     edx,ebp
c0014477:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001447d:	0f b6 d2             	movzx  edx,dl
c0014480:	66 81 e5 3f c0       	and    bp,0xc03f
c0014485:	c1 e2 06             	shl    edx,0x6
c0014488:	09 ea                	or     edx,ebp
c001448a:	3c 0f                	cmp    al,0xf
c001448c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0014493:	75 30                	jne    c00144c5 <CPU::detectFeatures()+0x5b3>
c0014495:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001449b:	c1 e9 14             	shr    ecx,0x14
c001449e:	83 e0 3f             	and    eax,0x3f
c00144a1:	83 c1 0f             	add    ecx,0xf
c00144a4:	88 ca                	mov    dl,cl
c00144a6:	c0 e9 02             	shr    cl,0x2
c00144a9:	c1 e2 06             	shl    edx,0x6
c00144ac:	09 d0                	or     eax,edx
c00144ae:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00144b4:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00144ba:	83 e0 c0             	and    eax,0xffffffc0
c00144bd:	09 c1                	or     ecx,eax
c00144bf:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00144c5:	83 ec 0c             	sub    esp,0xc
c00144c8:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00144cf:	56                   	push   esi
c00144d0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00144d4:	50                   	push   eax
c00144d5:	57                   	push   edi
c00144d6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00144da:	55                   	push   ebp
c00144db:	68 00 00 00 80       	push   0x80000000
c00144e0:	e8 4f f8 ff ff       	call   c0013d34 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00144e5:	83 c4 20             	add    esp,0x20
c00144e8:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00144f0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00144f4:	76 1e                	jbe    c0014514 <CPU::detectFeatures()+0x602>
c00144f6:	83 ec 0c             	sub    esp,0xc
c00144f9:	56                   	push   esi
c00144fa:	50                   	push   eax
c00144fb:	57                   	push   edi
c00144fc:	55                   	push   ebp
c00144fd:	68 01 00 00 80       	push   0x80000001
c0014502:	e8 2d f8 ff ff       	call   c0013d34 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014507:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0014511:	83 c4 20             	add    esp,0x20
c0014514:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001451a:	83 f8 01             	cmp    eax,0x1
c001451d:	75 6f                	jne    c001458e <CPU::detectFeatures()+0x67c>
c001451f:	51                   	push   ecx
c0014520:	51                   	push   ecx
c0014521:	68 9d 14 02 c0       	push   0xc002149d
c0014526:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001452a:	56                   	push   esi
c001452b:	e8 77 c1 fe ff       	call   c00006a7 <strcpy>
c0014530:	5f                   	pop    edi
c0014531:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014537:	5d                   	pop    ebp
c0014538:	66 c1 e8 06          	shr    ax,0x6
c001453c:	0f b6 c0             	movzx  eax,al
c001453f:	50                   	push   eax
c0014540:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014546:	c1 e8 0e             	shr    eax,0xe
c0014549:	0f b6 c0             	movzx  eax,al
c001454c:	50                   	push   eax
c001454d:	e8 8d f4 ff ff       	call   c00139df <lookupIntelCPUName(unsigned char, unsigned char)>
c0014552:	5a                   	pop    edx
c0014553:	59                   	pop    ecx
c0014554:	50                   	push   eax
c0014555:	56                   	push   esi
c0014556:	e8 03 c2 fe ff       	call   c000075e <strcat>
c001455b:	5f                   	pop    edi
c001455c:	5d                   	pop    ebp
c001455d:	56                   	push   esi
c001455e:	53                   	push   ebx
c001455f:	e8 68 bf ff ff       	call   c00104cc <Device::setName(char const*)>
c0014564:	58                   	pop    eax
c0014565:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001456b:	5a                   	pop    edx
c001456c:	68 a4 14 02 c0       	push   0xc00214a4
c0014571:	50                   	push   eax
c0014572:	e8 81 c1 fe ff       	call   c00006f8 <strcmp>
c0014577:	83 c4 10             	add    esp,0x10
c001457a:	85 c0                	test   eax,eax
c001457c:	0f 85 73 03 00 00    	jne    c00148f5 <CPU::detectFeatures()+0x9e3>
c0014582:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0014589:	e9 67 03 00 00       	jmp    c00148f5 <CPU::detectFeatures()+0x9e3>
c001458e:	83 f8 02             	cmp    eax,0x2
c0014591:	0f 85 b5 00 00 00    	jne    c001464c <CPU::detectFeatures()+0x73a>
c0014597:	57                   	push   edi
c0014598:	57                   	push   edi
c0014599:	68 b6 14 02 c0       	push   0xc00214b6
c001459e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00145a2:	56                   	push   esi
c00145a3:	e8 ff c0 fe ff       	call   c00006a7 <strcpy>
c00145a8:	5d                   	pop    ebp
c00145a9:	58                   	pop    eax
c00145aa:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00145b0:	66 c1 e8 06          	shr    ax,0x6
c00145b4:	0f b6 c0             	movzx  eax,al
c00145b7:	50                   	push   eax
c00145b8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00145be:	c1 e8 0e             	shr    eax,0xe
c00145c1:	0f b6 c0             	movzx  eax,al
c00145c4:	50                   	push   eax
c00145c5:	e8 81 f2 ff ff       	call   c001384b <lookupAMDCPUName(unsigned char, unsigned char)>
c00145ca:	5a                   	pop    edx
c00145cb:	59                   	pop    ecx
c00145cc:	50                   	push   eax
c00145cd:	56                   	push   esi
c00145ce:	e8 8b c1 fe ff       	call   c000075e <strcat>
c00145d3:	5f                   	pop    edi
c00145d4:	5d                   	pop    ebp
c00145d5:	56                   	push   esi
c00145d6:	53                   	push   ebx
c00145d7:	e8 f0 be ff ff       	call   c00104cc <Device::setName(char const*)>
c00145dc:	58                   	pop    eax
c00145dd:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00145e3:	5a                   	pop    edx
c00145e4:	68 bb 14 02 c0       	push   0xc00214bb
c00145e9:	50                   	push   eax
c00145ea:	e8 09 c1 fe ff       	call   c00006f8 <strcmp>
c00145ef:	83 c4 10             	add    esp,0x10
c00145f2:	85 c0                	test   eax,eax
c00145f4:	75 20                	jne    c0014616 <CPU::detectFeatures()+0x704>
c00145f6:	8b 15 08 35 02 c0    	mov    edx,DWORD PTR ds:0xc0023508
c00145fc:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014602:	a8 01                	test   al,0x1
c0014604:	74 10                	je     c0014616 <CPU::detectFeatures()+0x704>
c0014606:	83 e0 fe             	and    eax,0xfffffffe
c0014609:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001460f:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0014616:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001461c:	c1 e8 0e             	shr    eax,0xe
c001461f:	3c 05                	cmp    al,0x5
c0014621:	0f 85 ce 02 00 00    	jne    c00148f5 <CPU::detectFeatures()+0x9e3>
c0014627:	56                   	push   esi
c0014628:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001462e:	83 e0 0f             	and    eax,0xf
c0014631:	50                   	push   eax
c0014632:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014638:	66 c1 e8 06          	shr    ax,0x6
c001463c:	0f b6 c0             	movzx  eax,al
c001463f:	50                   	push   eax
c0014640:	6a 05                	push   0x5
c0014642:	e8 7a f6 ff ff       	call   c0013cc1 <AMD_K6_writeback(int, int, int)>
c0014647:	e9 1f 02 00 00       	jmp    c001486b <CPU::detectFeatures()+0x959>
c001464c:	8d 50 fd             	lea    edx,[eax-0x3]
c001464f:	83 fa 01             	cmp    edx,0x1
c0014652:	76 09                	jbe    c001465d <CPU::detectFeatures()+0x74b>
c0014654:	83 f8 06             	cmp    eax,0x6
c0014657:	0f 85 91 01 00 00    	jne    c00147ee <CPU::detectFeatures()+0x8dc>
c001465d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014663:	c1 ea 0e             	shr    edx,0xe
c0014666:	80 fa 05             	cmp    dl,0x5
c0014669:	75 7b                	jne    c00146e6 <CPU::detectFeatures()+0x7d4>
c001466b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014671:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0014676:	66 81 fa 00 01       	cmp    dx,0x100
c001467b:	75 0c                	jne    c0014689 <CPU::detectFeatures()+0x777>
c001467d:	51                   	push   ecx
c001467e:	51                   	push   ecx
c001467f:	68 c2 14 02 c0       	push   0xc00214c2
c0014684:	e9 dc 01 00 00       	jmp    c0014865 <CPU::detectFeatures()+0x953>
c0014689:	66 81 fa 00 02       	cmp    dx,0x200
c001468e:	75 0c                	jne    c001469c <CPU::detectFeatures()+0x78a>
c0014690:	52                   	push   edx
c0014691:	52                   	push   edx
c0014692:	68 d5 14 02 c0       	push   0xc00214d5
c0014697:	e9 c9 01 00 00       	jmp    c0014865 <CPU::detectFeatures()+0x953>
c001469c:	66 81 fa 40 02       	cmp    dx,0x240
c00146a1:	75 0c                	jne    c00146af <CPU::detectFeatures()+0x79d>
c00146a3:	50                   	push   eax
c00146a4:	50                   	push   eax
c00146a5:	68 e7 14 02 c0       	push   0xc00214e7
c00146aa:	e9 b6 01 00 00       	jmp    c0014865 <CPU::detectFeatures()+0x953>
c00146af:	83 f8 06             	cmp    eax,0x6
c00146b2:	75 0c                	jne    c00146c0 <CPU::detectFeatures()+0x7ae>
c00146b4:	50                   	push   eax
c00146b5:	50                   	push   eax
c00146b6:	68 f9 14 02 c0       	push   0xc00214f9
c00146bb:	e9 a5 01 00 00       	jmp    c0014865 <CPU::detectFeatures()+0x953>
c00146c0:	83 f8 04             	cmp    eax,0x4
c00146c3:	75 0c                	jne    c00146d1 <CPU::detectFeatures()+0x7bf>
c00146c5:	50                   	push   eax
c00146c6:	50                   	push   eax
c00146c7:	68 05 15 02 c0       	push   0xc0021505
c00146cc:	e9 94 01 00 00       	jmp    c0014865 <CPU::detectFeatures()+0x953>
c00146d1:	83 f8 03             	cmp    eax,0x3
c00146d4:	0f 85 1b 02 00 00    	jne    c00148f5 <CPU::detectFeatures()+0x9e3>
c00146da:	50                   	push   eax
c00146db:	50                   	push   eax
c00146dc:	68 0d 15 02 c0       	push   0xc002150d
c00146e1:	e9 7f 01 00 00       	jmp    c0014865 <CPU::detectFeatures()+0x953>
c00146e6:	80 fa 06             	cmp    dl,0x6
c00146e9:	0f 85 db 00 00 00    	jne    c00147ca <CPU::detectFeatures()+0x8b8>
c00146ef:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00146f5:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00146fa:	66 81 fa 80 01       	cmp    dx,0x180
c00146ff:	75 0c                	jne    c001470d <CPU::detectFeatures()+0x7fb>
c0014701:	50                   	push   eax
c0014702:	50                   	push   eax
c0014703:	68 18 15 02 c0       	push   0xc0021518
c0014708:	e9 58 01 00 00       	jmp    c0014865 <CPU::detectFeatures()+0x953>
c001470d:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0014713:	66 f7 c1 80 ff       	test   cx,0xff80
c0014718:	75 0c                	jne    c0014726 <CPU::detectFeatures()+0x814>
c001471a:	50                   	push   eax
c001471b:	50                   	push   eax
c001471c:	68 28 15 02 c0       	push   0xc0021528
c0014721:	e9 3f 01 00 00       	jmp    c0014865 <CPU::detectFeatures()+0x953>
c0014726:	66 81 fa 40 02       	cmp    dx,0x240
c001472b:	75 0c                	jne    c0014739 <CPU::detectFeatures()+0x827>
c001472d:	55                   	push   ebp
c001472e:	55                   	push   ebp
c001472f:	68 2f 15 02 c0       	push   0xc002152f
c0014734:	e9 2c 01 00 00       	jmp    c0014865 <CPU::detectFeatures()+0x953>
c0014739:	66 81 fa 80 02       	cmp    dx,0x280
c001473e:	75 0c                	jne    c001474c <CPU::detectFeatures()+0x83a>
c0014740:	57                   	push   edi
c0014741:	57                   	push   edi
c0014742:	68 38 15 02 c0       	push   0xc0021538
c0014747:	e9 19 01 00 00       	jmp    c0014865 <CPU::detectFeatures()+0x953>
c001474c:	66 81 fa 40 03       	cmp    dx,0x340
c0014751:	74 ed                	je     c0014740 <CPU::detectFeatures()+0x82e>
c0014753:	66 81 fa c0 03       	cmp    dx,0x3c0
c0014758:	75 0c                	jne    c0014766 <CPU::detectFeatures()+0x854>
c001475a:	56                   	push   esi
c001475b:	56                   	push   esi
c001475c:	68 3f 15 02 c0       	push   0xc002153f
c0014761:	e9 ff 00 00 00       	jmp    c0014865 <CPU::detectFeatures()+0x953>
c0014766:	83 f8 06             	cmp    eax,0x6
c0014769:	0f 84 45 ff ff ff    	je     c00146b4 <CPU::detectFeatures()+0x7a2>
c001476f:	83 f8 04             	cmp    eax,0x4
c0014772:	0f 84 4d ff ff ff    	je     c00146c5 <CPU::detectFeatures()+0x7b3>
c0014778:	83 f8 03             	cmp    eax,0x3
c001477b:	0f 85 74 01 00 00    	jne    c00148f5 <CPU::detectFeatures()+0x9e3>
c0014781:	51                   	push   ecx
c0014782:	51                   	push   ecx
c0014783:	68 48 15 02 c0       	push   0xc0021548
c0014788:	53                   	push   ebx
c0014789:	e8 3e bd ff ff       	call   c00104cc <Device::setName(char const*)>
c001478e:	b1 c1                	mov    cl,0xc1
c0014790:	88 c8                	mov    al,cl
c0014792:	e6 22                	out    0x22,al
c0014794:	e4 23                	in     al,0x23
c0014796:	88 c2                	mov    dl,al
c0014798:	88 c8                	mov    al,cl
c001479a:	e6 22                	out    0x22,al
c001479c:	88 d0                	mov    al,dl
c001479e:	83 c8 10             	or     eax,0x10
c00147a1:	e6 23                	out    0x23,al
c00147a3:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00147aa:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00147ad:	89 d0                	mov    eax,edx
c00147af:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00147b5:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00147b9:	40                   	inc    eax
c00147ba:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00147c0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00147c5:	e9 a1 00 00 00       	jmp    c001486b <CPU::detectFeatures()+0x959>
c00147ca:	83 f8 06             	cmp    eax,0x6
c00147cd:	0f 84 e1 fe ff ff    	je     c00146b4 <CPU::detectFeatures()+0x7a2>
c00147d3:	83 f8 04             	cmp    eax,0x4
c00147d6:	0f 84 e9 fe ff ff    	je     c00146c5 <CPU::detectFeatures()+0x7b3>
c00147dc:	83 f8 03             	cmp    eax,0x3
c00147df:	0f 85 10 01 00 00    	jne    c00148f5 <CPU::detectFeatures()+0x9e3>
c00147e5:	52                   	push   edx
c00147e6:	52                   	push   edx
c00147e7:	68 53 15 02 c0       	push   0xc0021553
c00147ec:	eb 77                	jmp    c0014865 <CPU::detectFeatures()+0x953>
c00147ee:	83 f8 07             	cmp    eax,0x7
c00147f1:	75 09                	jne    c00147fc <CPU::detectFeatures()+0x8ea>
c00147f3:	50                   	push   eax
c00147f4:	50                   	push   eax
c00147f5:	68 5d 15 02 c0       	push   0xc002155d
c00147fa:	eb 69                	jmp    c0014865 <CPU::detectFeatures()+0x953>
c00147fc:	83 f8 0a             	cmp    eax,0xa
c00147ff:	75 09                	jne    c001480a <CPU::detectFeatures()+0x8f8>
c0014801:	50                   	push   eax
c0014802:	50                   	push   eax
c0014803:	68 68 15 02 c0       	push   0xc0021568
c0014808:	eb 5b                	jmp    c0014865 <CPU::detectFeatures()+0x953>
c001480a:	83 f8 0b             	cmp    eax,0xb
c001480d:	75 09                	jne    c0014818 <CPU::detectFeatures()+0x906>
c001480f:	50                   	push   eax
c0014810:	50                   	push   eax
c0014811:	68 70 15 02 c0       	push   0xc0021570
c0014816:	eb 4d                	jmp    c0014865 <CPU::detectFeatures()+0x953>
c0014818:	83 f8 08             	cmp    eax,0x8
c001481b:	75 09                	jne    c0014826 <CPU::detectFeatures()+0x914>
c001481d:	50                   	push   eax
c001481e:	50                   	push   eax
c001481f:	68 79 15 02 c0       	push   0xc0021579
c0014824:	eb 3f                	jmp    c0014865 <CPU::detectFeatures()+0x953>
c0014826:	83 f8 09             	cmp    eax,0x9
c0014829:	75 09                	jne    c0014834 <CPU::detectFeatures()+0x922>
c001482b:	50                   	push   eax
c001482c:	50                   	push   eax
c001482d:	68 81 15 02 c0       	push   0xc0021581
c0014832:	eb 31                	jmp    c0014865 <CPU::detectFeatures()+0x953>
c0014834:	83 f8 05             	cmp    eax,0x5
c0014837:	75 09                	jne    c0014842 <CPU::detectFeatures()+0x930>
c0014839:	50                   	push   eax
c001483a:	50                   	push   eax
c001483b:	68 89 15 02 c0       	push   0xc0021589
c0014840:	eb 23                	jmp    c0014865 <CPU::detectFeatures()+0x953>
c0014842:	83 f8 0c             	cmp    eax,0xc
c0014845:	75 09                	jne    c0014850 <CPU::detectFeatures()+0x93e>
c0014847:	55                   	push   ebp
c0014848:	55                   	push   ebp
c0014849:	68 97 15 02 c0       	push   0xc0021597
c001484e:	eb 15                	jmp    c0014865 <CPU::detectFeatures()+0x953>
c0014850:	83 f8 0d             	cmp    eax,0xd
c0014853:	75 09                	jne    c001485e <CPU::detectFeatures()+0x94c>
c0014855:	57                   	push   edi
c0014856:	57                   	push   edi
c0014857:	68 a2 15 02 c0       	push   0xc00215a2
c001485c:	eb 07                	jmp    c0014865 <CPU::detectFeatures()+0x953>
c001485e:	56                   	push   esi
c001485f:	56                   	push   esi
c0014860:	68 b6 15 02 c0       	push   0xc00215b6
c0014865:	53                   	push   ebx
c0014866:	e8 61 bc ff ff       	call   c00104cc <Device::setName(char const*)>
c001486b:	83 c4 10             	add    esp,0x10
c001486e:	e9 82 00 00 00       	jmp    c00148f5 <CPU::detectFeatures()+0x9e3>
c0014873:	51                   	push   ecx
c0014874:	51                   	push   ecx
c0014875:	68 02 14 02 c0       	push   0xc0021402
c001487a:	57                   	push   edi
c001487b:	e8 27 be fe ff       	call   c00006a7 <strcpy>
c0014880:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001488a:	e8 f0 b8 fe ff       	call   c000017f <is486>
c001488f:	83 c4 10             	add    esp,0x10
c0014892:	85 c0                	test   eax,eax
c0014894:	74 2d                	je     c00148c3 <CPU::detectFeatures()+0x9b1>
c0014896:	52                   	push   edx
c0014897:	52                   	push   edx
c0014898:	68 c2 15 02 c0       	push   0xc00215c2
c001489d:	53                   	push   ebx
c001489e:	e8 29 bc ff ff       	call   c00104cc <Device::setName(char const*)>
c00148a3:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00148aa:	e8 69 a3 00 00       	call   c001ec18 <CPU::readCR0()>
c00148af:	83 c4 10             	add    esp,0x10
c00148b2:	83 e0 14             	and    eax,0x14
c00148b5:	83 f8 04             	cmp    eax,0x4
c00148b8:	75 1f                	jne    c00148d9 <CPU::detectFeatures()+0x9c7>
c00148ba:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00148c1:	eb 32                	jmp    c00148f5 <CPU::detectFeatures()+0x9e3>
c00148c3:	50                   	push   eax
c00148c4:	50                   	push   eax
c00148c5:	68 cd 15 02 c0       	push   0xc00215cd
c00148ca:	53                   	push   ebx
c00148cb:	e8 fc bb ff ff       	call   c00104cc <Device::setName(char const*)>
c00148d0:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00148d7:	eb d1                	jmp    c00148aa <CPU::detectFeatures()+0x998>
c00148d9:	e8 7c b8 fe ff       	call   c000015a <hasLegacyFPU>
c00148de:	83 e0 01             	and    eax,0x1
c00148e1:	8d 14 00             	lea    edx,[eax+eax*1]
c00148e4:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00148ea:	83 e0 fd             	and    eax,0xfffffffd
c00148ed:	09 d0                	or     eax,edx
c00148ef:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00148f5:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00148fc:	83 c4 4c             	add    esp,0x4c
c00148ff:	5b                   	pop    ebx
c0014900:	5e                   	pop    esi
c0014901:	5f                   	pop    edi
c0014902:	5d                   	pop    ebp
c0014903:	c3                   	ret    

c0014904 <CPU::setupSMEP()>:
c0014904:	83 ec 0c             	sub    esp,0xc
c0014907:	e8 d6 a5 00 00       	call   c001eee2 <CPU::readCR4()>
c001490c:	0d 00 00 10 00       	or     eax,0x100000
c0014911:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014915:	83 c4 0c             	add    esp,0xc
c0014918:	e9 e0 a5 00 00       	jmp    c001eefd <CPU::writeCR4(unsigned long)>
c001491d:	90                   	nop

c001491e <CPU::setupUMIP()>:
c001491e:	83 ec 0c             	sub    esp,0xc
c0014921:	e8 bc a5 00 00       	call   c001eee2 <CPU::readCR4()>
c0014926:	80 cc 08             	or     ah,0x8
c0014929:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001492d:	83 c4 0c             	add    esp,0xc
c0014930:	e9 c8 a5 00 00       	jmp    c001eefd <CPU::writeCR4(unsigned long)>
c0014935:	90                   	nop

c0014936 <CPU::setupTSC()>:
c0014936:	83 ec 0c             	sub    esp,0xc
c0014939:	e8 a4 a5 00 00       	call   c001eee2 <CPU::readCR4()>
c001493e:	83 c8 04             	or     eax,0x4
c0014941:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014945:	83 c4 0c             	add    esp,0xc
c0014948:	e9 b0 a5 00 00       	jmp    c001eefd <CPU::writeCR4(unsigned long)>
c001494d:	90                   	nop

c001494e <CPU::setupLargePages()>:
c001494e:	83 ec 0c             	sub    esp,0xc
c0014951:	e8 8c a5 00 00       	call   c001eee2 <CPU::readCR4()>
c0014956:	83 c8 10             	or     eax,0x10
c0014959:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001495d:	83 c4 0c             	add    esp,0xc
c0014960:	e9 98 a5 00 00       	jmp    c001eefd <CPU::writeCR4(unsigned long)>
c0014965:	90                   	nop

c0014966 <CPU::setupPAT()>:
c0014966:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c001496b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014972:	74 2c                	je     c00149a0 <CPU::setupPAT()+0x3a>
c0014974:	53                   	push   ebx
c0014975:	83 ec 10             	sub    esp,0x10
c0014978:	68 77 02 00 00       	push   0x277
c001497d:	50                   	push   eax
c001497e:	e8 43 68 ff ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c0014983:	83 e2 f8             	and    edx,0xfffffff8
c0014986:	83 ca 01             	or     edx,0x1
c0014989:	52                   	push   edx
c001498a:	50                   	push   eax
c001498b:	68 77 02 00 00       	push   0x277
c0014990:	ff 35 08 35 02 c0    	push   DWORD PTR ds:0xc0023508
c0014996:	e8 57 68 ff ff       	call   c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>
c001499b:	83 c4 28             	add    esp,0x28
c001499e:	5b                   	pop    ebx
c001499f:	c3                   	ret    
c00149a0:	c3                   	ret    
c00149a1:	90                   	nop

c00149a2 <CPU::setupMTRR()>:
c00149a2:	c3                   	ret    
c00149a3:	90                   	nop

c00149a4 <CPU::setupGlobalPages()>:
c00149a4:	83 ec 0c             	sub    esp,0xc
c00149a7:	e8 36 a5 00 00       	call   c001eee2 <CPU::readCR4()>
c00149ac:	0c 80                	or     al,0x80
c00149ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00149b2:	83 c4 0c             	add    esp,0xc
c00149b5:	e9 43 a5 00 00       	jmp    c001eefd <CPU::writeCR4(unsigned long)>

c00149ba <CPU::allowUsermodeDataAccess()>:
c00149ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00149be:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00149c5:	74 03                	je     c00149ca <CPU::allowUsermodeDataAccess()+0x10>
c00149c7:	0f 01 cb             	stac   
c00149ca:	c3                   	ret    
c00149cb:	90                   	nop

c00149cc <CPU::prohibitUsermodeDataAccess()>:
c00149cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00149d0:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00149d7:	74 03                	je     c00149dc <CPU::prohibitUsermodeDataAccess()+0x10>
c00149d9:	0f 01 ca             	clac   
c00149dc:	c3                   	ret    
c00149dd:	90                   	nop

c00149de <CPU::setupSMAP()>:
c00149de:	53                   	push   ebx
c00149df:	83 ec 08             	sub    esp,0x8
c00149e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00149e6:	e8 f7 a4 00 00       	call   c001eee2 <CPU::readCR4()>
c00149eb:	83 ec 0c             	sub    esp,0xc
c00149ee:	0d 00 00 20 00       	or     eax,0x200000
c00149f3:	50                   	push   eax
c00149f4:	e8 04 a5 00 00       	call   c001eefd <CPU::writeCR4(unsigned long)>
c00149f9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00149fd:	83 c4 18             	add    esp,0x18
c0014a00:	5b                   	pop    ebx
c0014a01:	eb c9                	jmp    c00149cc <CPU::prohibitUsermodeDataAccess()>
c0014a03:	90                   	nop

c0014a04 <CPU::setupFeatures()>:
c0014a04:	53                   	push   ebx
c0014a05:	83 ec 08             	sub    esp,0x8
c0014a08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a0c:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014a13:	74 0c                	je     c0014a21 <CPU::setupFeatures()+0x1d>
c0014a15:	83 ec 0c             	sub    esp,0xc
c0014a18:	53                   	push   ebx
c0014a19:	e8 e6 fe ff ff       	call   c0014904 <CPU::setupSMEP()>
c0014a1e:	83 c4 10             	add    esp,0x10
c0014a21:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0014a28:	74 0c                	je     c0014a36 <CPU::setupFeatures()+0x32>
c0014a2a:	83 ec 0c             	sub    esp,0xc
c0014a2d:	53                   	push   ebx
c0014a2e:	e8 ab ff ff ff       	call   c00149de <CPU::setupSMAP()>
c0014a33:	83 c4 10             	add    esp,0x10
c0014a36:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014a3d:	74 0c                	je     c0014a4b <CPU::setupFeatures()+0x47>
c0014a3f:	83 ec 0c             	sub    esp,0xc
c0014a42:	53                   	push   ebx
c0014a43:	e8 d6 fe ff ff       	call   c001491e <CPU::setupUMIP()>
c0014a48:	83 c4 10             	add    esp,0x10
c0014a4b:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014a52:	74 0c                	je     c0014a60 <CPU::setupFeatures()+0x5c>
c0014a54:	83 ec 0c             	sub    esp,0xc
c0014a57:	53                   	push   ebx
c0014a58:	e8 d9 fe ff ff       	call   c0014936 <CPU::setupTSC()>
c0014a5d:	83 c4 10             	add    esp,0x10
c0014a60:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014a67:	74 0c                	je     c0014a75 <CPU::setupFeatures()+0x71>
c0014a69:	83 ec 0c             	sub    esp,0xc
c0014a6c:	53                   	push   ebx
c0014a6d:	e8 dc fe ff ff       	call   c001494e <CPU::setupLargePages()>
c0014a72:	83 c4 10             	add    esp,0x10
c0014a75:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014a7c:	74 0c                	je     c0014a8a <CPU::setupFeatures()+0x86>
c0014a7e:	83 ec 0c             	sub    esp,0xc
c0014a81:	53                   	push   ebx
c0014a82:	e8 1d ff ff ff       	call   c00149a4 <CPU::setupGlobalPages()>
c0014a87:	83 c4 10             	add    esp,0x10
c0014a8a:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014a91:	74 0d                	je     c0014aa0 <CPU::setupFeatures()+0x9c>
c0014a93:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0014a97:	83 c4 08             	add    esp,0x8
c0014a9a:	5b                   	pop    ebx
c0014a9b:	e9 c6 fe ff ff       	jmp    c0014966 <CPU::setupPAT()>
c0014aa0:	83 c4 08             	add    esp,0x8
c0014aa3:	5b                   	pop    ebx
c0014aa4:	c3                   	ret    
c0014aa5:	90                   	nop

c0014aa6 <CPU::open(int, int, void*)>:
c0014aa6:	57                   	push   edi
c0014aa7:	56                   	push   esi
c0014aa8:	53                   	push   ebx
c0014aa9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014aad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014ab1:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0014ab7:	83 ec 0c             	sub    esp,0xc
c0014aba:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0014ac0:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0014ac6:	50                   	push   eax
c0014ac7:	e8 de 69 ff ff       	call   c000b4aa <GDT::setup()>
c0014acc:	83 c4 0c             	add    esp,0xc
c0014acf:	6a 00                	push   0x0
c0014ad1:	68 ef be ad de       	push   0xdeadbeef
c0014ad6:	57                   	push   edi
c0014ad7:	e8 b0 8b ff ff       	call   c000d68c <TSS::setup(unsigned long, unsigned long)>
c0014adc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014adf:	e8 88 8b ff ff       	call   c000d66c <TSS::flush()>
c0014ae4:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0014aea:	89 04 24             	mov    DWORD PTR [esp],eax
c0014aed:	e8 12 6c ff ff       	call   c000b704 <IDT::setup()>
c0014af2:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0014af9:	e8 f6 a3 00 00       	call   c001eef4 <CPU::writeDR7(unsigned long)>
c0014afe:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0014b08:	e8 bb 76 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c0014b0d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0014b13:	89 30                	mov    DWORD PTR [eax],esi
c0014b15:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0014b1b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0014b1e:	58                   	pop    eax
c0014b1f:	5a                   	pop    edx
c0014b20:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0014b26:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014b2a:	e8 37 9a ff ff       	call   c000e566 <VAS::setCPUSpecific(unsigned long)>
c0014b2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b32:	e8 db f3 ff ff       	call   c0013f12 <CPU::detectFeatures()>
c0014b37:	e8 9a c7 ff ff       	call   c00112d6 <setupInterruptController()>
c0014b3c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0014b42:	a1 20 35 02 c0       	mov    eax,ds:0xc0023520
c0014b47:	83 e0 10             	and    eax,0x10
c0014b4a:	83 f8 01             	cmp    eax,0x1
c0014b4d:	19 c0                	sbb    eax,eax
c0014b4f:	83 e0 46             	and    eax,0x46
c0014b52:	83 c0 1e             	add    eax,0x1e
c0014b55:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b58:	e8 61 d9 ff ff       	call   c00124be <setupTimer(int)>
c0014b5d:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0014b63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b66:	e8 99 fe ff ff       	call   c0014a04 <CPU::setupFeatures()>
c0014b6b:	83 c4 10             	add    esp,0x10
c0014b6e:	31 c0                	xor    eax,eax
c0014b70:	5b                   	pop    ebx
c0014b71:	5e                   	pop    esi
c0014b72:	5f                   	pop    edi
c0014b73:	c3                   	ret    

c0014b74 <Krnl::panic(char const*)>:
c0014b74:	55                   	push   ebp
c0014b75:	89 e5                	mov    ebp,esp
c0014b77:	53                   	push   ebx
c0014b78:	83 ec 0c             	sub    esp,0xc
c0014b7b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0014b7e:	fa                   	cli    
c0014b7f:	c6 05 d0 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023ed0,0x1
c0014b86:	53                   	push   ebx
c0014b87:	c6 05 40 29 02 c0 00 	mov    BYTE PTR ds:0xc0022940,0x0
c0014b8e:	68 04 16 02 c0       	push   0xc0021604
c0014b93:	e8 47 a3 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0014b98:	58                   	pop    eax
c0014b99:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014b9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ba4:	e8 24 83 ff ff       	call   c000cecd <setActiveTerminal(VgaText*)>
c0014ba9:	83 c4 0c             	add    esp,0xc
c0014bac:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014bb1:	6a 01                	push   0x1
c0014bb3:	6a 0f                	push   0xf
c0014bb5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bbb:	e8 4c 7d ff ff       	call   c000c90c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014bc0:	5a                   	pop    edx
c0014bc1:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014bc6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bcc:	e8 9d 85 ff ff       	call   c000d16e <VgaText::clearScreen()>
c0014bd1:	59                   	pop    ecx
c0014bd2:	58                   	pop    eax
c0014bd3:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014bd8:	68 1d 16 02 c0       	push   0xc002161d
c0014bdd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014be3:	e8 04 87 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014be8:	58                   	pop    eax
c0014be9:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014bee:	5a                   	pop    edx
c0014bef:	68 bc 16 02 c0       	push   0xc00216bc
c0014bf4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bfa:	e8 ed 86 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014bff:	59                   	pop    ecx
c0014c00:	58                   	pop    eax
c0014c01:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014c06:	68 39 16 02 c0       	push   0xc0021639
c0014c0b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c11:	e8 d6 86 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014c16:	58                   	pop    eax
c0014c17:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014c1c:	5a                   	pop    edx
c0014c1d:	53                   	push   ebx
c0014c1e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c24:	e8 c3 86 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014c29:	59                   	pop    ecx
c0014c2a:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014c2f:	5b                   	pop    ebx
c0014c30:	68 59 16 02 c0       	push   0xc0021659
c0014c35:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c3b:	e8 ac 86 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014c40:	58                   	pop    eax
c0014c41:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014c46:	5a                   	pop    edx
c0014c47:	68 f8 16 02 c0       	push   0xc00216f8
c0014c4c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c52:	e8 95 86 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014c57:	59                   	pop    ecx
c0014c58:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014c5d:	5b                   	pop    ebx
c0014c5e:	68 39 16 02 c0       	push   0xc0021639
c0014c63:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c69:	e8 7e 86 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014c6e:	58                   	pop    eax
c0014c6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c74:	5a                   	pop    edx
c0014c75:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c78:	83 c0 0c             	add    eax,0xc
c0014c7b:	50                   	push   eax
c0014c7c:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014c81:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c87:	e8 60 86 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014c8c:	59                   	pop    ecx
c0014c8d:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014c92:	5b                   	pop    ebx
c0014c93:	68 58 16 02 c0       	push   0xc0021658
c0014c98:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c9e:	e8 49 86 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014ca3:	58                   	pop    eax
c0014ca4:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014ca9:	5a                   	pop    edx
c0014caa:	68 24 17 02 c0       	push   0xc0021724
c0014caf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cb5:	e8 32 86 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014cba:	59                   	pop    ecx
c0014cbb:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014cc0:	5b                   	pop    ebx
c0014cc1:	68 64 17 02 c0       	push   0xc0021764
c0014cc6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ccc:	e8 1b 86 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014cd1:	58                   	pop    eax
c0014cd2:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014cd7:	5a                   	pop    edx
c0014cd8:	68 44 16 02 c0       	push   0xc0021644
c0014cdd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ce3:	e8 04 86 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014ce8:	59                   	pop    ecx
c0014ce9:	5b                   	pop    ebx
c0014cea:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014ced:	68 5c 16 02 c0       	push   0xc002165c
c0014cf2:	e8 e8 a1 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0014cf7:	58                   	pop    eax
c0014cf8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014cfb:	5a                   	pop    edx
c0014cfc:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014cff:	68 65 16 02 c0       	push   0xc0021665
c0014d04:	e8 d6 a1 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0014d09:	59                   	pop    ecx
c0014d0a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014d0d:	5b                   	pop    ebx
c0014d0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d10:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014d13:	68 7d 0e 02 c0       	push   0xc0020e7d
c0014d18:	e8 c2 a1 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0014d1d:	58                   	pop    eax
c0014d1e:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014d23:	5a                   	pop    edx
c0014d24:	68 a8 17 02 c0       	push   0xc00217a8
c0014d29:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d2f:	e8 b8 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d34:	59                   	pop    ecx
c0014d35:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014d3a:	5b                   	pop    ebx
c0014d3b:	68 6e 16 02 c0       	push   0xc002166e
c0014d40:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d46:	e8 a1 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d4b:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014d50:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014d56:	e8 bd 9e 00 00       	call   c001ec18 <CPU::readCR0()>
c0014d5b:	5a                   	pop    edx
c0014d5c:	59                   	pop    ecx
c0014d5d:	50                   	push   eax
c0014d5e:	53                   	push   ebx
c0014d5f:	e8 ae 85 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014d64:	5b                   	pop    ebx
c0014d65:	58                   	pop    eax
c0014d66:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014d6b:	68 78 16 02 c0       	push   0xc0021678
c0014d70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d76:	e8 71 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d7b:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014d80:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014d86:	e8 7b a1 00 00       	call   c001ef06 <CPU::readCR2()>
c0014d8b:	5a                   	pop    edx
c0014d8c:	59                   	pop    ecx
c0014d8d:	50                   	push   eax
c0014d8e:	53                   	push   ebx
c0014d8f:	e8 7e 85 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014d94:	5b                   	pop    ebx
c0014d95:	58                   	pop    eax
c0014d96:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014d9b:	68 82 16 02 c0       	push   0xc0021682
c0014da0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014da6:	e8 41 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014dab:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014db0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014db6:	e8 ea 9a 00 00       	call   c001e8a5 <CPU::readCR3()>
c0014dbb:	5a                   	pop    edx
c0014dbc:	59                   	pop    ecx
c0014dbd:	50                   	push   eax
c0014dbe:	53                   	push   ebx
c0014dbf:	e8 4e 85 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014dc4:	5b                   	pop    ebx
c0014dc5:	58                   	pop    eax
c0014dc6:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014dcb:	68 95 16 02 c0       	push   0xc0021695
c0014dd0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dd6:	e8 11 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014ddb:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014de0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014de6:	e8 f7 a0 00 00       	call   c001eee2 <CPU::readCR4()>
c0014deb:	5a                   	pop    edx
c0014dec:	59                   	pop    ecx
c0014ded:	50                   	push   eax
c0014dee:	53                   	push   ebx
c0014def:	e8 1e 85 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014df4:	5b                   	pop    ebx
c0014df5:	58                   	pop    eax
c0014df6:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014dfb:	68 9f 16 02 c0       	push   0xc002169f
c0014e00:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e06:	e8 e1 84 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014e0b:	5a                   	pop    edx
c0014e0c:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014e11:	59                   	pop    ecx
c0014e12:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014e18:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014e1b:	50                   	push   eax
c0014e1c:	e8 f1 84 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014e21:	5b                   	pop    ebx
c0014e22:	58                   	pop    eax
c0014e23:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014e28:	68 b6 16 02 c0       	push   0xc00216b6
c0014e2d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e33:	e8 b4 84 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014e38:	5a                   	pop    edx
c0014e39:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014e3e:	59                   	pop    ecx
c0014e3f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014e45:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014e48:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014e4b:	50                   	push   eax
c0014e4c:	e8 c1 84 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014e51:	5b                   	pop    ebx
c0014e52:	58                   	pop    eax
c0014e53:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014e58:	68 b6 16 02 c0       	push   0xc00216b6
c0014e5d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e63:	e8 84 84 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014e68:	59                   	pop    ecx
c0014e69:	a1 d4 48 02 c0       	mov    eax,ds:0xc00248d4
c0014e6e:	5b                   	pop    ebx
c0014e6f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014e75:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014e78:	8b 12                	mov    edx,DWORD PTR [edx]
c0014e7a:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014e7d:	50                   	push   eax
c0014e7e:	e8 8f 84 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014e83:	83 c4 10             	add    esp,0x10
c0014e86:	b2 fe                	mov    dl,0xfe
c0014e88:	e4 60                	in     al,0x60
c0014e8a:	3c 1c                	cmp    al,0x1c
c0014e8c:	74 04                	je     c0014e92 <Krnl::panic(char const*)+0x31e>
c0014e8e:	3c 5a                	cmp    al,0x5a
c0014e90:	75 f6                	jne    c0014e88 <Krnl::panic(char const*)+0x314>
c0014e92:	e4 64                	in     al,0x64
c0014e94:	a8 02                	test   al,0x2
c0014e96:	75 fa                	jne    c0014e92 <Krnl::panic(char const*)+0x31e>
c0014e98:	88 d0                	mov    al,dl
c0014e9a:	e6 64                	out    0x64,al
c0014e9c:	fa                   	cli    
c0014e9d:	f4                   	hlt    
c0014e9e:	eb e8                	jmp    c0014e88 <Krnl::panic(char const*)+0x314>

c0014ea0 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014ea0:	55                   	push   ebp
c0014ea1:	57                   	push   edi
c0014ea2:	56                   	push   esi
c0014ea3:	53                   	push   ebx
c0014ea4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014eaa:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014eb1:	8a 1e                	mov    bl,BYTE PTR [esi]
c0014eb3:	8d 6e 01             	lea    ebp,[esi+0x1]
c0014eb6:	80 fb 40             	cmp    bl,0x40
c0014eb9:	75 1b                	jne    c0014ed6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0014ebb:	8a 16                	mov    dl,BYTE PTR [esi]
c0014ebd:	84 d2                	test   dl,dl
c0014ebf:	0f 84 f1 00 00 00    	je     c0014fb6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014ec5:	8d 46 01             	lea    eax,[esi+0x1]
c0014ec8:	80 fa 3a             	cmp    dl,0x3a
c0014ecb:	74 04                	je     c0014ed1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0014ecd:	89 c6                	mov    esi,eax
c0014ecf:	eb ea                	jmp    c0014ebb <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0014ed1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014ed4:	89 c6                	mov    esi,eax
c0014ed6:	50                   	push   eax
c0014ed7:	6a 40                	push   0x40
c0014ed9:	6a 00                	push   0x0
c0014edb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014edf:	50                   	push   eax
c0014ee0:	e8 23 b7 fe ff       	call   c0000608 <memset>
c0014ee5:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0014eec:	31 c0                	xor    eax,eax
c0014eee:	83 c4 10             	add    esp,0x10
c0014ef1:	8a 0f                	mov    cl,BYTE PTR [edi]
c0014ef3:	84 c9                	test   cl,cl
c0014ef5:	0f 84 bb 00 00 00    	je     c0014fb6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014efb:	3d c7 00 00 00       	cmp    eax,0xc7
c0014f00:	0f 8f b0 00 00 00    	jg     c0014fb6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014f06:	80 f9 0a             	cmp    cl,0xa
c0014f09:	0f 85 98 00 00 00    	jne    c0014fa7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0014f0f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0014f14:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0014f18:	a8 df                	test   al,0xdf
c0014f1a:	0f 94 c1             	sete   cl
c0014f1d:	3c 23                	cmp    al,0x23
c0014f1f:	0f 94 c2             	sete   dl
c0014f22:	08 d1                	or     cl,dl
c0014f24:	75 4a                	jne    c0014f70 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014f26:	8d 50 f7             	lea    edx,[eax-0x9]
c0014f29:	80 fa 01             	cmp    dl,0x1
c0014f2c:	76 42                	jbe    c0014f70 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014f2e:	3c 5b                	cmp    al,0x5b
c0014f30:	75 42                	jne    c0014f74 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0014f32:	80 fb 40             	cmp    bl,0x40
c0014f35:	75 39                	jne    c0014f70 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014f37:	83 ec 0c             	sub    esp,0xc
c0014f3a:	8d 54 24 65          	lea    edx,[esp+0x65]
c0014f3e:	52                   	push   edx
c0014f3f:	e8 e1 b6 fe ff       	call   c0000625 <strlen>
c0014f44:	83 c4 10             	add    esp,0x10
c0014f47:	83 f8 3f             	cmp    eax,0x3f
c0014f4a:	77 6a                	ja     c0014fb6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014f4c:	50                   	push   eax
c0014f4d:	50                   	push   eax
c0014f4e:	8d 54 24 61          	lea    edx,[esp+0x61]
c0014f52:	52                   	push   edx
c0014f53:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014f57:	52                   	push   edx
c0014f58:	e8 4a b7 fe ff       	call   c00006a7 <strcpy>
c0014f5d:	58                   	pop    eax
c0014f5e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014f62:	52                   	push   edx
c0014f63:	e8 bd b6 fe ff       	call   c0000625 <strlen>
c0014f68:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0014f6d:	83 c4 10             	add    esp,0x10
c0014f70:	31 d2                	xor    edx,edx
c0014f72:	eb 3a                	jmp    c0014fae <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0014f74:	80 fb 40             	cmp    bl,0x40
c0014f77:	74 06                	je     c0014f7f <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0014f79:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014f7d:	eb 20                	jmp    c0014f9f <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0014f7f:	50                   	push   eax
c0014f80:	50                   	push   eax
c0014f81:	55                   	push   ebp
c0014f82:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014f86:	50                   	push   eax
c0014f87:	e8 6c b7 fe ff       	call   c00006f8 <strcmp>
c0014f8c:	83 c4 10             	add    esp,0x10
c0014f8f:	85 c0                	test   eax,eax
c0014f91:	75 dd                	jne    c0014f70 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014f93:	eb e4                	jmp    c0014f79 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0014f95:	8d 50 01             	lea    edx,[eax+0x1]
c0014f98:	80 f9 3d             	cmp    cl,0x3d
c0014f9b:	74 1d                	je     c0014fba <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0014f9d:	89 d0                	mov    eax,edx
c0014f9f:	8a 08                	mov    cl,BYTE PTR [eax]
c0014fa1:	84 c9                	test   cl,cl
c0014fa3:	75 f0                	jne    c0014f95 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0014fa5:	eb 0f                	jmp    c0014fb6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014fa7:	8d 50 01             	lea    edx,[eax+0x1]
c0014faa:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0014fae:	47                   	inc    edi
c0014faf:	89 d0                	mov    eax,edx
c0014fb1:	e9 3b ff ff ff       	jmp    c0014ef1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0014fb6:	31 c0                	xor    eax,eax
c0014fb8:	eb 33                	jmp    c0014fed <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0014fba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014fbe:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014fc1:	50                   	push   eax
c0014fc2:	50                   	push   eax
c0014fc3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0014fc7:	50                   	push   eax
c0014fc8:	56                   	push   esi
c0014fc9:	e8 2a b7 fe ff       	call   c00006f8 <strcmp>
c0014fce:	83 c4 10             	add    esp,0x10
c0014fd1:	85 c0                	test   eax,eax
c0014fd3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014fd7:	75 97                	jne    c0014f70 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014fd9:	51                   	push   ecx
c0014fda:	51                   	push   ecx
c0014fdb:	52                   	push   edx
c0014fdc:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0014fe3:	e8 bf b6 fe ff       	call   c00006a7 <strcpy>
c0014fe8:	83 c4 10             	add    esp,0x10
c0014feb:	b0 01                	mov    al,0x1
c0014fed:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014ff3:	5b                   	pop    ebx
c0014ff4:	5e                   	pop    esi
c0014ff5:	5f                   	pop    edi
c0014ff6:	5d                   	pop    ebp
c0014ff7:	c3                   	ret    

c0014ff8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0014ff8:	57                   	push   edi
c0014ff9:	56                   	push   esi
c0014ffa:	53                   	push   ebx
c0014ffb:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0015001:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0015008:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001500f:	53                   	push   ebx
c0015010:	e8 10 b6 fe ff       	call   c0000625 <strlen>
c0015015:	89 34 24             	mov    DWORD PTR [esp],esi
c0015018:	89 c7                	mov    edi,eax
c001501a:	e8 06 b6 fe ff       	call   c0000625 <strlen>
c001501f:	83 c4 10             	add    esp,0x10
c0015022:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015026:	31 ff                	xor    edi,edi
c0015028:	3d ff 00 00 00       	cmp    eax,0xff
c001502d:	0f 87 18 01 00 00    	ja     c001514b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015033:	51                   	push   ecx
c0015034:	51                   	push   ecx
c0015035:	56                   	push   esi
c0015036:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001503a:	56                   	push   esi
c001503b:	e8 67 b6 fe ff       	call   c00006a7 <strcpy>
c0015040:	58                   	pop    eax
c0015041:	5a                   	pop    edx
c0015042:	68 a5 1b 02 c0       	push   0xc0021ba5
c0015047:	56                   	push   esi
c0015048:	e8 11 b7 fe ff       	call   c000075e <strcat>
c001504d:	59                   	pop    ecx
c001504e:	58                   	pop    eax
c001504f:	53                   	push   ebx
c0015050:	56                   	push   esi
c0015051:	e8 08 b7 fe ff       	call   c000075e <strcat>
c0015056:	58                   	pop    eax
c0015057:	5a                   	pop    edx
c0015058:	68 ce 17 02 c0       	push   0xc00217ce
c001505d:	56                   	push   esi
c001505e:	e8 fb b6 fe ff       	call   c000075e <strcat>
c0015063:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001506a:	e8 81 9d ff ff       	call   c000edf0 <operator new(unsigned long)>
c001506f:	83 c4 0c             	add    esp,0xc
c0015072:	89 c3                	mov    ebx,eax
c0015074:	ff 35 d4 48 02 c0    	push   DWORD PTR ds:0xc00248d4
c001507a:	56                   	push   esi
c001507b:	50                   	push   eax
c001507c:	e8 8d a3 ff ff       	call   c000f40e <File::File(char const*, Process*)>
c0015081:	59                   	pop    ecx
c0015082:	5e                   	pop    esi
c0015083:	6a 01                	push   0x1
c0015085:	53                   	push   ebx
c0015086:	e8 e7 a3 ff ff       	call   c000f472 <File::open(FileOpenMode)>
c001508b:	83 c4 10             	add    esp,0x10
c001508e:	85 c0                	test   eax,eax
c0015090:	74 08                	je     c001509a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0015092:	83 ec 0c             	sub    esp,0xc
c0015095:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015097:	53                   	push   ebx
c0015098:	eb 2e                	jmp    c00150c8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c001509a:	52                   	push   edx
c001509b:	8d 44 24 07          	lea    eax,[esp+0x7]
c001509f:	50                   	push   eax
c00150a0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00150a4:	50                   	push   eax
c00150a5:	53                   	push   ebx
c00150a6:	e8 73 a6 ff ff       	call   c000f71e <File::stat(unsigned long long*, bool*)>
c00150ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150af:	83 c4 10             	add    esp,0x10
c00150b2:	89 c1                	mov    ecx,eax
c00150b4:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00150b8:	75 13                	jne    c00150cd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c00150ba:	83 ec 0c             	sub    esp,0xc
c00150bd:	53                   	push   ebx
c00150be:	e8 0d a4 ff ff       	call   c000f4d0 <File::close()>
c00150c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00150c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00150cb:	eb 7b                	jmp    c0015148 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c00150cd:	83 ec 0c             	sub    esp,0xc
c00150d0:	50                   	push   eax
c00150d1:	e8 48 6b ff ff       	call   c000bc1e <malloc>
c00150d6:	89 c6                	mov    esi,eax
c00150d8:	58                   	pop    eax
c00150d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00150db:	8d 54 24 10          	lea    edx,[esp+0x10]
c00150df:	52                   	push   edx
c00150e0:	56                   	push   esi
c00150e1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00150e5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00150e9:	53                   	push   ebx
c00150ea:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00150ed:	83 c4 20             	add    esp,0x20
c00150f0:	85 c0                	test   eax,eax
c00150f2:	75 0a                	jne    c00150fe <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00150f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00150f8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00150fc:	74 18                	je     c0015116 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c00150fe:	83 ec 0c             	sub    esp,0xc
c0015101:	31 ff                	xor    edi,edi
c0015103:	53                   	push   ebx
c0015104:	e8 c7 a3 ff ff       	call   c000f4d0 <File::close()>
c0015109:	8b 03                	mov    eax,DWORD PTR [ebx]
c001510b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001510e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015111:	83 c4 10             	add    esp,0x10
c0015114:	eb 35                	jmp    c001514b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015116:	83 ec 0c             	sub    esp,0xc
c0015119:	53                   	push   ebx
c001511a:	e8 b1 a3 ff ff       	call   c000f4d0 <File::close()>
c001511f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015121:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015124:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015127:	83 c4 0c             	add    esp,0xc
c001512a:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015131:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015138:	56                   	push   esi
c0015139:	e8 62 fd ff ff       	call   c0014ea0 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001513e:	89 34 24             	mov    DWORD PTR [esp],esi
c0015141:	89 c7                	mov    edi,eax
c0015143:	e8 e6 6a ff ff       	call   c000bc2e <free>
c0015148:	83 c4 10             	add    esp,0x10
c001514b:	81 c4 10 01 00 00    	add    esp,0x110
c0015151:	89 f8                	mov    eax,edi
c0015153:	5b                   	pop    ebx
c0015154:	5e                   	pop    esi
c0015155:	5f                   	pop    edi
c0015156:	c3                   	ret    

c0015157 <Reg::getLine(char*, char*, char*)>:
c0015157:	57                   	push   edi
c0015158:	56                   	push   esi
c0015159:	53                   	push   ebx
c001515a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001515e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015162:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015166:	57                   	push   edi
c0015167:	56                   	push   esi
c0015168:	53                   	push   ebx
c0015169:	68 d3 17 02 c0       	push   0xc00217d3
c001516e:	e8 85 fe ff ff       	call   c0014ff8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015173:	83 c4 10             	add    esp,0x10
c0015176:	84 c0                	test   al,al
c0015178:	75 10                	jne    c001518a <Reg::getLine(char*, char*, char*)+0x33>
c001517a:	57                   	push   edi
c001517b:	56                   	push   esi
c001517c:	53                   	push   ebx
c001517d:	68 f8 17 02 c0       	push   0xc00217f8
c0015182:	e8 71 fe ff ff       	call   c0014ff8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015187:	83 c4 10             	add    esp,0x10
c001518a:	5b                   	pop    ebx
c001518b:	5e                   	pop    esi
c001518c:	5f                   	pop    edi
c001518d:	c3                   	ret    

c001518e <Reg::readInt(char*, char*, int*)>:
c001518e:	55                   	push   ebp
c001518f:	57                   	push   edi
c0015190:	56                   	push   esi
c0015191:	53                   	push   ebx
c0015192:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015198:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001519c:	57                   	push   edi
c001519d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00151a4:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00151ab:	e8 a7 ff ff ff       	call   c0015157 <Reg::getLine(char*, char*, char*)>
c00151b0:	83 c4 10             	add    esp,0x10
c00151b3:	84 c0                	test   al,al
c00151b5:	0f 84 b3 00 00 00    	je     c001526e <Reg::readInt(char*, char*, int*)+0xe0>
c00151bb:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00151bf:	80 fa 2b             	cmp    dl,0x2b
c00151c2:	74 0c                	je     c00151d0 <Reg::readInt(char*, char*, int*)+0x42>
c00151c4:	80 fa 2d             	cmp    dl,0x2d
c00151c7:	75 0e                	jne    c00151d7 <Reg::readInt(char*, char*, int*)+0x49>
c00151c9:	ba 01 00 00 00       	mov    edx,0x1
c00151ce:	eb 0b                	jmp    c00151db <Reg::readInt(char*, char*, int*)+0x4d>
c00151d0:	ba 01 00 00 00       	mov    edx,0x1
c00151d5:	eb 02                	jmp    c00151d9 <Reg::readInt(char*, char*, int*)+0x4b>
c00151d7:	31 d2                	xor    edx,edx
c00151d9:	31 c0                	xor    eax,eax
c00151db:	be 0a 00 00 00       	mov    esi,0xa
c00151e0:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00151e5:	75 20                	jne    c0015207 <Reg::readInt(char*, char*, int*)+0x79>
c00151e7:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00151eb:	80 f9 78             	cmp    cl,0x78
c00151ee:	75 0a                	jne    c00151fa <Reg::readInt(char*, char*, int*)+0x6c>
c00151f0:	83 c2 02             	add    edx,0x2
c00151f3:	be 10 00 00 00       	mov    esi,0x10
c00151f8:	eb 0d                	jmp    c0015207 <Reg::readInt(char*, char*, int*)+0x79>
c00151fa:	80 f9 62             	cmp    cl,0x62
c00151fd:	75 08                	jne    c0015207 <Reg::readInt(char*, char*, int*)+0x79>
c00151ff:	83 c2 02             	add    edx,0x2
c0015202:	be 02 00 00 00       	mov    esi,0x2
c0015207:	01 d7                	add    edi,edx
c0015209:	31 d2                	xor    edx,edx
c001520b:	8a 1f                	mov    bl,BYTE PTR [edi]
c001520d:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015211:	80 fb 0d             	cmp    bl,0xd
c0015214:	0f 94 c3             	sete   bl
c0015217:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001521c:	0f 94 c1             	sete   cl
c001521f:	08 cb                	or     bl,cl
c0015221:	75 3a                	jne    c001525d <Reg::readInt(char*, char*, int*)+0xcf>
c0015223:	0f af d6             	imul   edx,esi
c0015226:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001522b:	83 fe 10             	cmp    esi,0x10
c001522e:	75 26                	jne    c0015256 <Reg::readInt(char*, char*, int*)+0xc8>
c0015230:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015234:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015237:	89 e9                	mov    ecx,ebp
c0015239:	80 f9 05             	cmp    cl,0x5
c001523c:	77 06                	ja     c0015244 <Reg::readInt(char*, char*, int*)+0xb6>
c001523e:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015242:	eb 16                	jmp    c001525a <Reg::readInt(char*, char*, int*)+0xcc>
c0015244:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015248:	83 e9 61             	sub    ecx,0x61
c001524b:	80 f9 05             	cmp    cl,0x5
c001524e:	77 06                	ja     c0015256 <Reg::readInt(char*, char*, int*)+0xc8>
c0015250:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0015254:	eb 04                	jmp    c001525a <Reg::readInt(char*, char*, int*)+0xcc>
c0015256:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001525a:	47                   	inc    edi
c001525b:	eb ae                	jmp    c001520b <Reg::readInt(char*, char*, int*)+0x7d>
c001525d:	84 c0                	test   al,al
c001525f:	74 02                	je     c0015263 <Reg::readInt(char*, char*, int*)+0xd5>
c0015261:	f7 da                	neg    edx
c0015263:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001526a:	89 10                	mov    DWORD PTR [eax],edx
c001526c:	88 d8                	mov    al,bl
c001526e:	81 c4 ec 00 00 00    	add    esp,0xec
c0015274:	5b                   	pop    ebx
c0015275:	5e                   	pop    esi
c0015276:	5f                   	pop    edi
c0015277:	5d                   	pop    ebp
c0015278:	c3                   	ret    

c0015279 <Reg::readString(char*, char*, char*, int)>:
c0015279:	57                   	push   edi
c001527a:	56                   	push   esi
c001527b:	53                   	push   ebx
c001527c:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015282:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015289:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001528d:	57                   	push   edi
c001528e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015295:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001529c:	e8 b6 fe ff ff       	call   c0015157 <Reg::getLine(char*, char*, char*)>
c00152a1:	83 c4 10             	add    esp,0x10
c00152a4:	89 c6                	mov    esi,eax
c00152a6:	84 c0                	test   al,al
c00152a8:	74 44                	je     c00152ee <Reg::readString(char*, char*, char*, int)+0x75>
c00152aa:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00152b1:	31 c0                	xor    eax,eax
c00152b3:	4a                   	dec    edx
c00152b4:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00152b7:	84 c9                	test   cl,cl
c00152b9:	74 0f                	je     c00152ca <Reg::readString(char*, char*, char*, int)+0x51>
c00152bb:	39 c2                	cmp    edx,eax
c00152bd:	7e 0b                	jle    c00152ca <Reg::readString(char*, char*, char*, int)+0x51>
c00152bf:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00152c2:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00152c7:	40                   	inc    eax
c00152c8:	eb ea                	jmp    c00152b4 <Reg::readString(char*, char*, char*, int)+0x3b>
c00152ca:	83 ec 0c             	sub    esp,0xc
c00152cd:	53                   	push   ebx
c00152ce:	e8 52 b3 fe ff       	call   c0000625 <strlen>
c00152d3:	83 c4 10             	add    esp,0x10
c00152d6:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00152db:	75 11                	jne    c00152ee <Reg::readString(char*, char*, char*, int)+0x75>
c00152dd:	83 ec 0c             	sub    esp,0xc
c00152e0:	53                   	push   ebx
c00152e1:	e8 3f b3 fe ff       	call   c0000625 <strlen>
c00152e6:	83 c4 10             	add    esp,0x10
c00152e9:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00152ee:	81 c4 d0 00 00 00    	add    esp,0xd0
c00152f4:	89 f0                	mov    eax,esi
c00152f6:	5b                   	pop    ebx
c00152f7:	5e                   	pop    esi
c00152f8:	5f                   	pop    edi
c00152f9:	c3                   	ret    

c00152fa <Reg::readBool(char*, char*, bool*)>:
c00152fa:	83 ec 20             	sub    esp,0x20
c00152fd:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015301:	50                   	push   eax
c0015302:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015306:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001530a:	e8 7f fe ff ff       	call   c001518e <Reg::readInt(char*, char*, int*)>
c001530f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015314:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015318:	0f 95 02             	setne  BYTE PTR [edx]
c001531b:	83 c4 2c             	add    esp,0x2c
c001531e:	c3                   	ret    

c001531f <Reg::readBoolWithDefault(char*, char*, bool)>:
c001531f:	53                   	push   ebx
c0015320:	83 ec 1c             	sub    esp,0x1c
c0015323:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0015327:	8d 44 24 13          	lea    eax,[esp+0x13]
c001532b:	50                   	push   eax
c001532c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015334:	e8 c1 ff ff ff       	call   c00152fa <Reg::readBool(char*, char*, bool*)>
c0015339:	83 c4 10             	add    esp,0x10
c001533c:	84 c0                	test   al,al
c001533e:	74 04                	je     c0015344 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0015340:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0015344:	88 d8                	mov    al,bl
c0015346:	83 c4 18             	add    esp,0x18
c0015349:	5b                   	pop    ebx
c001534a:	c3                   	ret    

c001534b <Reg::readIntWithDefault(char*, char*, int)>:
c001534b:	53                   	push   ebx
c001534c:	83 ec 1c             	sub    esp,0x1c
c001534f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015353:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015357:	50                   	push   eax
c0015358:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001535c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015360:	e8 29 fe ff ff       	call   c001518e <Reg::readInt(char*, char*, int*)>
c0015365:	83 c4 10             	add    esp,0x10
c0015368:	84 c0                	test   al,al
c001536a:	74 04                	je     c0015370 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001536c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0015370:	89 d8                	mov    eax,ebx
c0015372:	83 c4 18             	add    esp,0x18
c0015375:	5b                   	pop    ebx
c0015376:	c3                   	ret    

c0015377 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015377:	56                   	push   esi
c0015378:	53                   	push   ebx
c0015379:	51                   	push   ecx
c001537a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001537e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015386:	56                   	push   esi
c0015387:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001538b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001538f:	e8 e5 fe ff ff       	call   c0015279 <Reg::readString(char*, char*, char*, int)>
c0015394:	83 c4 10             	add    esp,0x10
c0015397:	84 c0                	test   al,al
c0015399:	74 02                	je     c001539d <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c001539b:	89 f3                	mov    ebx,esi
c001539d:	89 d8                	mov    eax,ebx
c001539f:	5a                   	pop    edx
c00153a0:	5b                   	pop    ebx
c00153a1:	5e                   	pop    esi
c00153a2:	c3                   	ret    

c00153a3 <Sys::exit(regs*)>:
c00153a3:	83 ec 18             	sub    esp,0x18
c00153a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00153aa:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00153ad:	e8 98 32 00 00       	call   c001864a <terminateTask(int)>
c00153b2:	83 c8 ff             	or     eax,0xffffffff
c00153b5:	83 c4 1c             	add    esp,0x1c
c00153b8:	89 c2                	mov    edx,eax
c00153ba:	c3                   	ret    

c00153bb <Sys::loadDLL(regs*)>:
c00153bb:	56                   	push   esi
c00153bc:	53                   	push   ebx
c00153bd:	31 d2                	xor    edx,edx
c00153bf:	51                   	push   ecx
c00153c0:	b8 01 00 00 00       	mov    eax,0x1
c00153c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00153c9:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00153cd:	74 7d                	je     c001544c <Sys::loadDLL(regs*)+0x91>
c00153cf:	83 ec 0c             	sub    esp,0xc
c00153d2:	68 14 01 00 00       	push   0x114
c00153d7:	e8 14 9a ff ff       	call   c000edf0 <operator new(unsigned long)>
c00153dc:	83 c4 0c             	add    esp,0xc
c00153df:	89 c3                	mov    ebx,eax
c00153e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153e6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00153e9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00153ec:	53                   	push   ebx
c00153ed:	e8 1c a0 ff ff       	call   c000f40e <File::File(char const*, Process*)>
c00153f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00153f5:	e8 e6 a2 ff ff       	call   c000f6e0 <File::exists()>
c00153fa:	83 c4 10             	add    esp,0x10
c00153fd:	84 c0                	test   al,al
c00153ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015401:	75 11                	jne    c0015414 <Sys::loadDLL(regs*)+0x59>
c0015403:	83 ec 0c             	sub    esp,0xc
c0015406:	53                   	push   ebx
c0015407:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001540a:	83 c4 10             	add    esp,0x10
c001540d:	b8 03 00 00 00       	mov    eax,0x3
c0015412:	eb 36                	jmp    c001544a <Sys::loadDLL(regs*)+0x8f>
c0015414:	83 ec 0c             	sub    esp,0xc
c0015417:	53                   	push   ebx
c0015418:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001541b:	58                   	pop    eax
c001541c:	5a                   	pop    edx
c001541d:	6a 00                	push   0x0
c001541f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015422:	e8 af 20 00 00       	call   c00174d6 <Thr::loadDLL(char const*, bool)>
c0015427:	83 c4 10             	add    esp,0x10
c001542a:	89 c1                	mov    ecx,eax
c001542c:	31 d2                	xor    edx,edx
c001542e:	b8 04 00 00 00       	mov    eax,0x4
c0015433:	85 c9                	test   ecx,ecx
c0015435:	74 15                	je     c001544c <Sys::loadDLL(regs*)+0x91>
c0015437:	53                   	push   ebx
c0015438:	53                   	push   ebx
c0015439:	ff 35 08 35 02 c0    	push   DWORD PTR ds:0xc0023508
c001543f:	51                   	push   ecx
c0015440:	e8 e4 21 00 00       	call   c0017629 <Thr::executeDLL(unsigned long, void*)>
c0015445:	83 c4 10             	add    esp,0x10
c0015448:	31 c0                	xor    eax,eax
c001544a:	31 d2                	xor    edx,edx
c001544c:	59                   	pop    ecx
c001544d:	5b                   	pop    ebx
c001544e:	5e                   	pop    esi
c001544f:	c3                   	ret    

c0015450 <Sys::read(regs*)>:
c0015450:	57                   	push   edi
c0015451:	56                   	push   esi
c0015452:	53                   	push   ebx
c0015453:	83 ec 10             	sub    esp,0x10
c0015456:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001545a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001545d:	83 f8 02             	cmp    eax,0x2
c0015460:	77 10                	ja     c0015472 <Sys::read(regs*)+0x22>
c0015462:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015467:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001546a:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015470:	eb 0e                	jmp    c0015480 <Sys::read(regs*)+0x30>
c0015472:	83 ec 0c             	sub    esp,0xc
c0015475:	50                   	push   eax
c0015476:	e8 fe 86 ff ff       	call   c000db79 <getFromFileDescriptor(int)>
c001547b:	83 c4 10             	add    esp,0x10
c001547e:	89 c1                	mov    ecx,eax
c0015480:	83 c8 ff             	or     eax,0xffffffff
c0015483:	85 c9                	test   ecx,ecx
c0015485:	89 c2                	mov    edx,eax
c0015487:	74 28                	je     c00154b1 <Sys::read(regs*)+0x61>
c0015489:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015491:	31 ff                	xor    edi,edi
c0015493:	83 ec 0c             	sub    esp,0xc
c0015496:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015498:	8d 54 24 18          	lea    edx,[esp+0x18]
c001549c:	52                   	push   edx
c001549d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00154a0:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00154a3:	57                   	push   edi
c00154a4:	56                   	push   esi
c00154a5:	51                   	push   ecx
c00154a6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00154a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00154ad:	83 c4 20             	add    esp,0x20
c00154b0:	99                   	cdq    
c00154b1:	83 c4 10             	add    esp,0x10
c00154b4:	5b                   	pop    ebx
c00154b5:	5e                   	pop    esi
c00154b6:	5f                   	pop    edi
c00154b7:	c3                   	ret    

c00154b8 <Sys::sbrk(regs*)>:
c00154b8:	56                   	push   esi
c00154b9:	53                   	push   ebx
c00154ba:	50                   	push   eax
c00154bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00154c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00154c7:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00154ca:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c00154d0:	85 db                	test   ebx,ebx
c00154d2:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00154d5:	74 02                	je     c00154d9 <Sys::sbrk(regs*)+0x21>
c00154d7:	79 06                	jns    c00154df <Sys::sbrk(regs*)+0x27>
c00154d9:	89 f0                	mov    eax,esi
c00154db:	31 d2                	xor    edx,edx
c00154dd:	eb 2a                	jmp    c0015509 <Sys::sbrk(regs*)+0x51>
c00154df:	83 c8 ff             	or     eax,0xffffffff
c00154e2:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00154e8:	89 c2                	mov    edx,eax
c00154ea:	77 1d                	ja     c0015509 <Sys::sbrk(regs*)+0x51>
c00154ec:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00154f2:	50                   	push   eax
c00154f3:	c1 ea 0c             	shr    edx,0xc
c00154f6:	68 07 04 00 00       	push   0x407
c00154fb:	52                   	push   edx
c00154fc:	51                   	push   ecx
c00154fd:	e8 94 8e ff ff       	call   c000e396 <VAS::allocatePages(int, int)>
c0015502:	89 f0                	mov    eax,esi
c0015504:	31 d2                	xor    edx,edx
c0015506:	83 c4 10             	add    esp,0x10
c0015509:	59                   	pop    ecx
c001550a:	5b                   	pop    ebx
c001550b:	5e                   	pop    esi
c001550c:	c3                   	ret    

c001550d <Sys::write(regs*)>:
c001550d:	57                   	push   edi
c001550e:	56                   	push   esi
c001550f:	53                   	push   ebx
c0015510:	83 ec 10             	sub    esp,0x10
c0015513:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015517:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001551a:	83 f8 02             	cmp    eax,0x2
c001551d:	77 10                	ja     c001552f <Sys::write(regs*)+0x22>
c001551f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015524:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015527:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001552d:	eb 0e                	jmp    c001553d <Sys::write(regs*)+0x30>
c001552f:	83 ec 0c             	sub    esp,0xc
c0015532:	50                   	push   eax
c0015533:	e8 41 86 ff ff       	call   c000db79 <getFromFileDescriptor(int)>
c0015538:	83 c4 10             	add    esp,0x10
c001553b:	89 c1                	mov    ecx,eax
c001553d:	83 c8 ff             	or     eax,0xffffffff
c0015540:	85 c9                	test   ecx,ecx
c0015542:	89 c2                	mov    edx,eax
c0015544:	74 28                	je     c001556e <Sys::write(regs*)+0x61>
c0015546:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001554e:	31 ff                	xor    edi,edi
c0015550:	83 ec 0c             	sub    esp,0xc
c0015553:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015555:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015559:	52                   	push   edx
c001555a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001555d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015560:	57                   	push   edi
c0015561:	56                   	push   esi
c0015562:	51                   	push   ecx
c0015563:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015566:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001556a:	83 c4 20             	add    esp,0x20
c001556d:	99                   	cdq    
c001556e:	83 c4 10             	add    esp,0x10
c0015571:	5b                   	pop    ebx
c0015572:	5e                   	pop    esi
c0015573:	5f                   	pop    edi
c0015574:	c3                   	ret    

c0015575 <Sys::yield(regs*)>:
c0015575:	83 ec 0c             	sub    esp,0xc
c0015578:	e8 b7 24 00 00       	call   c0017a34 <lockScheduler()>
c001557d:	e8 e6 27 00 00       	call   c0017d68 <schedule()>
c0015582:	e8 af 24 00 00       	call   c0017a36 <unlockScheduler()>
c0015587:	31 c0                	xor    eax,eax
c0015589:	31 d2                	xor    edx,edx
c001558b:	83 c4 0c             	add    esp,0xc
c001558e:	c3                   	ret    

c001558f <sysCallGetPID(regs*)>:
c001558f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015594:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015597:	8b 00                	mov    eax,DWORD PTR [eax]
c0015599:	99                   	cdq    
c001559a:	c3                   	ret    

c001559b <sysCallSeekDir(regs*)>:
c001559b:	31 c0                	xor    eax,eax
c001559d:	31 d2                	xor    edx,edx
c001559f:	c3                   	ret    

c00155a0 <sysCallTellDir(regs*)>:
c00155a0:	31 c0                	xor    eax,eax
c00155a2:	31 d2                	xor    edx,edx
c00155a4:	c3                   	ret    

c00155a5 <sysCallVerify(regs*)>:
c00155a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00155a9:	31 d2                	xor    edx,edx
c00155ab:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00155ae:	c3                   	ret    

c00155af <sysCallGetArgc(regs*)>:
c00155af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155b4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00155b7:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c00155bd:	99                   	cdq    
c00155be:	c3                   	ret    

c00155bf <sysFormatDisk(regs*)>:
c00155bf:	56                   	push   esi
c00155c0:	53                   	push   ebx
c00155c1:	53                   	push   ebx
c00155c2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00155c6:	8b 1d e0 35 02 c0    	mov    ebx,DWORD PTR ds:0xc00235e0
c00155cc:	eb 25                	jmp    c00155f3 <sysFormatDisk(regs*)+0x34>
c00155ce:	83 ec 0c             	sub    esp,0xc
c00155d1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00155d4:	8b 13                	mov    edx,DWORD PTR [ebx]
c00155d6:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00155d9:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00155dc:	50                   	push   eax
c00155dd:	ff 34 85 80 3a 02 c0 	push   DWORD PTR [eax*4-0x3ffdc580]
c00155e4:	53                   	push   ebx
c00155e5:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00155e8:	83 c4 20             	add    esp,0x20
c00155eb:	83 f8 08             	cmp    eax,0x8
c00155ee:	75 12                	jne    c0015602 <sysFormatDisk(regs*)+0x43>
c00155f0:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00155f3:	85 db                	test   ebx,ebx
c00155f5:	75 d7                	jne    c00155ce <sysFormatDisk(regs*)+0xf>
c00155f7:	59                   	pop    ecx
c00155f8:	b8 03 00 00 00       	mov    eax,0x3
c00155fd:	31 d2                	xor    edx,edx
c00155ff:	5b                   	pop    ebx
c0015600:	5e                   	pop    esi
c0015601:	c3                   	ret    
c0015602:	85 c0                	test   eax,eax
c0015604:	74 1b                	je     c0015621 <sysFormatDisk(regs*)+0x62>
c0015606:	83 f8 09             	cmp    eax,0x9
c0015609:	74 0b                	je     c0015616 <sysFormatDisk(regs*)+0x57>
c001560b:	59                   	pop    ecx
c001560c:	b8 02 00 00 00       	mov    eax,0x2
c0015611:	31 d2                	xor    edx,edx
c0015613:	5b                   	pop    ebx
c0015614:	5e                   	pop    esi
c0015615:	c3                   	ret    
c0015616:	59                   	pop    ecx
c0015617:	b8 01 00 00 00       	mov    eax,0x1
c001561c:	31 d2                	xor    edx,edx
c001561e:	5b                   	pop    ebx
c001561f:	5e                   	pop    esi
c0015620:	c3                   	ret    
c0015621:	59                   	pop    ecx
c0015622:	31 c0                	xor    eax,eax
c0015624:	31 d2                	xor    edx,edx
c0015626:	5b                   	pop    ebx
c0015627:	5e                   	pop    esi
c0015628:	c3                   	ret    

c0015629 <sysSetDiskVolumeLabel(regs*)>:
c0015629:	56                   	push   esi
c001562a:	53                   	push   ebx
c001562b:	53                   	push   ebx
c001562c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015630:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015633:	83 f8 19             	cmp    eax,0x19
c0015636:	77 29                	ja     c0015661 <sysSetDiskVolumeLabel(regs*)+0x38>
c0015638:	8b 0c 85 80 3a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdc580]
c001563f:	85 c9                	test   ecx,ecx
c0015641:	74 1e                	je     c0015661 <sysSetDiskVolumeLabel(regs*)+0x38>
c0015643:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0015646:	85 d2                	test   edx,edx
c0015648:	74 17                	je     c0015661 <sysSetDiskVolumeLabel(regs*)+0x38>
c001564a:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c0015650:	8b 33                	mov    esi,DWORD PTR [ebx]
c0015652:	52                   	push   edx
c0015653:	50                   	push   eax
c0015654:	51                   	push   ecx
c0015655:	53                   	push   ebx
c0015656:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015659:	83 c4 10             	add    esp,0x10
c001565c:	99                   	cdq    
c001565d:	59                   	pop    ecx
c001565e:	5b                   	pop    ebx
c001565f:	5e                   	pop    esi
c0015660:	c3                   	ret    
c0015661:	59                   	pop    ecx
c0015662:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015667:	ba ff ff ff ff       	mov    edx,0xffffffff
c001566c:	5b                   	pop    ebx
c001566d:	5e                   	pop    esi
c001566e:	c3                   	ret    

c001566f <sysGetDiskVolumeLabel(regs*)>:
c001566f:	57                   	push   edi
c0015670:	56                   	push   esi
c0015671:	53                   	push   ebx
c0015672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015676:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015679:	83 fa 19             	cmp    edx,0x19
c001567c:	77 34                	ja     c00156b2 <sysGetDiskVolumeLabel(regs*)+0x43>
c001567e:	8b 0c 95 80 3a 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdc580]
c0015685:	85 c9                	test   ecx,ecx
c0015687:	74 29                	je     c00156b2 <sysGetDiskVolumeLabel(regs*)+0x43>
c0015689:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001568c:	85 db                	test   ebx,ebx
c001568e:	74 22                	je     c00156b2 <sysGetDiskVolumeLabel(regs*)+0x43>
c0015690:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015693:	85 c0                	test   eax,eax
c0015695:	74 1b                	je     c00156b2 <sysGetDiskVolumeLabel(regs*)+0x43>
c0015697:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001569d:	83 ec 0c             	sub    esp,0xc
c00156a0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00156a2:	50                   	push   eax
c00156a3:	53                   	push   ebx
c00156a4:	52                   	push   edx
c00156a5:	51                   	push   ecx
c00156a6:	56                   	push   esi
c00156a7:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00156aa:	83 c4 20             	add    esp,0x20
c00156ad:	99                   	cdq    
c00156ae:	5b                   	pop    ebx
c00156af:	5e                   	pop    esi
c00156b0:	5f                   	pop    edi
c00156b1:	c3                   	ret    
c00156b2:	5b                   	pop    ebx
c00156b3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00156b8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00156bd:	5e                   	pop    esi
c00156be:	5f                   	pop    edi
c00156bf:	c3                   	ret    

c00156c0 <sysShutdown(regs*)>:
c00156c0:	83 ec 0c             	sub    esp,0xc
c00156c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156c7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156ca:	85 c0                	test   eax,eax
c00156cc:	74 18                	je     c00156e6 <sysShutdown(regs*)+0x26>
c00156ce:	83 f8 01             	cmp    eax,0x1
c00156d1:	74 38                	je     c001570b <sysShutdown(regs*)+0x4b>
c00156d3:	83 f8 02             	cmp    eax,0x2
c00156d6:	74 24                	je     c00156fc <sysShutdown(regs*)+0x3c>
c00156d8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00156dd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00156e2:	83 c4 0c             	add    esp,0xc
c00156e5:	c3                   	ret    
c00156e6:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c00156eb:	8b 10                	mov    edx,DWORD PTR [eax]
c00156ed:	6a 00                	push   0x0
c00156ef:	6a 00                	push   0x0
c00156f1:	6a 00                	push   0x0
c00156f3:	50                   	push   eax
c00156f4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00156f7:	83 c4 10             	add    esp,0x10
c00156fa:	eb dc                	jmp    c00156d8 <sysShutdown(regs*)+0x18>
c00156fc:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c0015701:	8b 10                	mov    edx,DWORD PTR [eax]
c0015703:	6a 00                	push   0x0
c0015705:	6a 00                	push   0x0
c0015707:	6a 01                	push   0x1
c0015709:	eb e8                	jmp    c00156f3 <sysShutdown(regs*)+0x33>
c001570b:	a1 00 3b 02 c0       	mov    eax,ds:0xc0023b00
c0015710:	85 c0                	test   eax,eax
c0015712:	74 02                	je     c0015716 <sysShutdown(regs*)+0x56>
c0015714:	ff d0                	call   eax
c0015716:	31 c0                	xor    eax,eax
c0015718:	31 d2                	xor    edx,edx
c001571a:	83 c4 0c             	add    esp,0xc
c001571d:	c3                   	ret    

c001571e <sysCallGetCwd(regs*)>:
c001571e:	83 ec 10             	sub    esp,0x10
c0015721:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015725:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015728:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001572b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015730:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015733:	e8 47 a0 ff ff       	call   c000f77f <getcwd(Process*, char*, int)>
c0015738:	83 c4 1c             	add    esp,0x1c
c001573b:	99                   	cdq    
c001573c:	c3                   	ret    

c001573d <sysCallSetCwd(regs*)>:
c001573d:	83 ec 14             	sub    esp,0x14
c0015740:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015744:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015747:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001574c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001574f:	e8 55 a0 ff ff       	call   c000f7a9 <setcwd(Process*, char*)>
c0015754:	83 c4 1c             	add    esp,0x1c
c0015757:	99                   	cdq    
c0015758:	c3                   	ret    

c0015759 <sysCallRealpath(regs*)>:
c0015759:	83 ec 0c             	sub    esp,0xc
c001575c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015760:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015763:	85 d2                	test   edx,edx
c0015765:	74 07                	je     c001576e <sysCallRealpath(regs*)+0x15>
c0015767:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001576a:	85 c0                	test   eax,eax
c001576c:	75 0b                	jne    c0015779 <sysCallRealpath(regs*)+0x20>
c001576e:	b8 01 00 00 00       	mov    eax,0x1
c0015773:	31 d2                	xor    edx,edx
c0015775:	83 c4 0c             	add    esp,0xc
c0015778:	c3                   	ret    
c0015779:	51                   	push   ecx
c001577a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015780:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0015783:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0015789:	51                   	push   ecx
c001578a:	52                   	push   edx
c001578b:	50                   	push   eax
c001578c:	e8 d3 9a ff ff       	call   c000f264 <standardiseFiles(char*, char const*, char const*)>
c0015791:	83 c4 10             	add    esp,0x10
c0015794:	31 c0                	xor    eax,eax
c0015796:	31 d2                	xor    edx,edx
c0015798:	83 c4 0c             	add    esp,0xc
c001579b:	c3                   	ret    

c001579c <sysCallReadDir(regs*)>:
c001579c:	53                   	push   ebx
c001579d:	83 ec 18             	sub    esp,0x18
c00157a0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00157a4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00157a7:	83 f8 02             	cmp    eax,0x2
c00157aa:	76 53                	jbe    c00157ff <sysCallReadDir(regs*)+0x63>
c00157ac:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00157af:	81 fa 00 ff ff 7f    	cmp    edx,0x7fffff00
c00157b5:	77 4f                	ja     c0015806 <sysCallReadDir(regs*)+0x6a>
c00157b7:	83 ec 0c             	sub    esp,0xc
c00157ba:	50                   	push   eax
c00157bb:	e8 b9 83 ff ff       	call   c000db79 <getFromFileDescriptor(int)>
c00157c0:	83 c4 10             	add    esp,0x10
c00157c3:	85 c0                	test   eax,eax
c00157c5:	74 50                	je     c0015817 <sysCallReadDir(regs*)+0x7b>
c00157c7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00157cf:	83 ec 0c             	sub    esp,0xc
c00157d2:	8b 10                	mov    edx,DWORD PTR [eax]
c00157d4:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00157d8:	51                   	push   ecx
c00157d9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00157dc:	6a 00                	push   0x0
c00157de:	68 10 01 00 00       	push   0x110
c00157e3:	50                   	push   eax
c00157e4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00157e7:	83 c4 20             	add    esp,0x20
c00157ea:	85 c0                	test   eax,eax
c00157ec:	74 38                	je     c0015826 <sysCallReadDir(regs*)+0x8a>
c00157ee:	83 f8 07             	cmp    eax,0x7
c00157f1:	74 0c                	je     c00157ff <sysCallReadDir(regs*)+0x63>
c00157f3:	b8 02 00 00 00       	mov    eax,0x2
c00157f8:	31 d2                	xor    edx,edx
c00157fa:	83 c4 18             	add    esp,0x18
c00157fd:	5b                   	pop    ebx
c00157fe:	c3                   	ret    
c00157ff:	b8 01 00 00 00       	mov    eax,0x1
c0015804:	eb f2                	jmp    c00157f8 <sysCallReadDir(regs*)+0x5c>
c0015806:	83 ec 08             	sub    esp,0x8
c0015809:	52                   	push   edx
c001580a:	68 14 18 02 c0       	push   0xc0021814
c001580f:	e8 cb 96 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0015814:	83 c4 10             	add    esp,0x10
c0015817:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001581c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015821:	83 c4 18             	add    esp,0x18
c0015824:	5b                   	pop    ebx
c0015825:	c3                   	ret    
c0015826:	31 c0                	xor    eax,eax
c0015828:	eb ce                	jmp    c00157f8 <sysCallReadDir(regs*)+0x5c>

c001582a <sysCallIsATTY(regs*)>:
c001582a:	83 ec 0c             	sub    esp,0xc
c001582d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015831:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015834:	83 f8 02             	cmp    eax,0x2
c0015837:	76 07                	jbe    c0015840 <sysCallIsATTY(regs*)+0x16>
c0015839:	3d 01 ff ff 7f       	cmp    eax,0x7fffff01
c001583e:	75 26                	jne    c0015866 <sysCallIsATTY(regs*)+0x3c>
c0015840:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015845:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015848:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001584e:	85 c0                	test   eax,eax
c0015850:	74 24                	je     c0015876 <sysCallIsATTY(regs*)+0x4c>
c0015852:	83 ec 0c             	sub    esp,0xc
c0015855:	8b 10                	mov    edx,DWORD PTR [eax]
c0015857:	50                   	push   eax
c0015858:	ff 12                	call   DWORD PTR [edx]
c001585a:	31 d2                	xor    edx,edx
c001585c:	0f b6 c0             	movzx  eax,al
c001585f:	83 c4 10             	add    esp,0x10
c0015862:	83 c4 0c             	add    esp,0xc
c0015865:	c3                   	ret    
c0015866:	83 ec 0c             	sub    esp,0xc
c0015869:	50                   	push   eax
c001586a:	e8 0a 83 ff ff       	call   c000db79 <getFromFileDescriptor(int)>
c001586f:	83 c4 10             	add    esp,0x10
c0015872:	85 c0                	test   eax,eax
c0015874:	75 dc                	jne    c0015852 <sysCallIsATTY(regs*)+0x28>
c0015876:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001587b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015880:	83 c4 0c             	add    esp,0xc
c0015883:	c3                   	ret    

c0015884 <sysCallSeek(regs*)>:
c0015884:	53                   	push   ebx
c0015885:	83 ec 08             	sub    esp,0x8
c0015888:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001588c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001588f:	83 f8 02             	cmp    eax,0x2
c0015892:	76 4a                	jbe    c00158de <sysCallSeek(regs*)+0x5a>
c0015894:	3d 00 ff ff 7f       	cmp    eax,0x7fffff00
c0015899:	77 32                	ja     c00158cd <sysCallSeek(regs*)+0x49>
c001589b:	83 ec 0c             	sub    esp,0xc
c001589e:	50                   	push   eax
c001589f:	e8 d5 82 ff ff       	call   c000db79 <getFromFileDescriptor(int)>
c00158a4:	83 c4 0c             	add    esp,0xc
c00158a7:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00158aa:	31 db                	xor    ebx,ebx
c00158ac:	53                   	push   ebx
c00158ad:	51                   	push   ecx
c00158ae:	50                   	push   eax
c00158af:	e8 7c 9c ff ff       	call   c000f530 <File::seek(unsigned long long)>
c00158b4:	83 c4 10             	add    esp,0x10
c00158b7:	85 c0                	test   eax,eax
c00158b9:	0f 95 c0             	setne  al
c00158bc:	31 d2                	xor    edx,edx
c00158be:	0f b6 c0             	movzx  eax,al
c00158c1:	f7 d8                	neg    eax
c00158c3:	83 d2 00             	adc    edx,0x0
c00158c6:	83 c4 08             	add    esp,0x8
c00158c9:	f7 da                	neg    edx
c00158cb:	5b                   	pop    ebx
c00158cc:	c3                   	ret    
c00158cd:	83 ec 08             	sub    esp,0x8
c00158d0:	50                   	push   eax
c00158d1:	68 d0 18 02 c0       	push   0xc00218d0
c00158d6:	e8 04 96 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c00158db:	83 c4 10             	add    esp,0x10
c00158de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00158e3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00158e8:	83 c4 08             	add    esp,0x8
c00158eb:	5b                   	pop    ebx
c00158ec:	c3                   	ret    

c00158ed <sysCallTell(regs*)>:
c00158ed:	53                   	push   ebx
c00158ee:	83 ec 08             	sub    esp,0x8
c00158f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158f5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00158f8:	83 f8 02             	cmp    eax,0x2
c00158fb:	76 45                	jbe    c0015942 <sysCallTell(regs*)+0x55>
c00158fd:	3d 00 ff ff 7f       	cmp    eax,0x7fffff00
c0015902:	77 2d                	ja     c0015931 <sysCallTell(regs*)+0x44>
c0015904:	83 ec 0c             	sub    esp,0xc
c0015907:	50                   	push   eax
c0015908:	e8 6c 82 ff ff       	call   c000db79 <getFromFileDescriptor(int)>
c001590d:	5a                   	pop    edx
c001590e:	59                   	pop    ecx
c001590f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015912:	50                   	push   eax
c0015913:	e8 6e 9c ff ff       	call   c000f586 <File::tell(unsigned long long*)>
c0015918:	83 c4 10             	add    esp,0x10
c001591b:	85 c0                	test   eax,eax
c001591d:	0f 95 c0             	setne  al
c0015920:	31 d2                	xor    edx,edx
c0015922:	0f b6 c0             	movzx  eax,al
c0015925:	f7 d8                	neg    eax
c0015927:	83 d2 00             	adc    edx,0x0
c001592a:	83 c4 08             	add    esp,0x8
c001592d:	f7 da                	neg    edx
c001592f:	5b                   	pop    ebx
c0015930:	c3                   	ret    
c0015931:	83 ec 08             	sub    esp,0x8
c0015934:	50                   	push   eax
c0015935:	68 ea 18 02 c0       	push   0xc00218ea
c001593a:	e8 a0 95 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001593f:	83 c4 10             	add    esp,0x10
c0015942:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015947:	ba ff ff ff ff       	mov    edx,0xffffffff
c001594c:	83 c4 08             	add    esp,0x8
c001594f:	5b                   	pop    ebx
c0015950:	c3                   	ret    

c0015951 <sysCallSizeFromFilename(regs*)>:
c0015951:	57                   	push   edi
c0015952:	56                   	push   esi
c0015953:	53                   	push   ebx
c0015954:	83 ec 10             	sub    esp,0x10
c0015957:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001595b:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001595e:	83 fb 02             	cmp    ebx,0x2
c0015961:	76 6f                	jbe    c00159d2 <sysCallSizeFromFilename(regs*)+0x81>
c0015963:	81 fb 00 ff ff 7f    	cmp    ebx,0x7fffff00
c0015969:	77 56                	ja     c00159c1 <sysCallSizeFromFilename(regs*)+0x70>
c001596b:	83 ec 0c             	sub    esp,0xc
c001596e:	68 14 01 00 00       	push   0x114
c0015973:	e8 78 94 ff ff       	call   c000edf0 <operator new(unsigned long)>
c0015978:	83 c4 0c             	add    esp,0xc
c001597b:	89 c6                	mov    esi,eax
c001597d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015982:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015985:	53                   	push   ebx
c0015986:	56                   	push   esi
c0015987:	e8 82 9a ff ff       	call   c000f40e <File::File(char const*, Process*)>
c001598c:	83 c4 0c             	add    esp,0xc
c001598f:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015993:	50                   	push   eax
c0015994:	ff 77 28             	push   DWORD PTR [edi+0x28]
c0015997:	56                   	push   esi
c0015998:	e8 81 9d ff ff       	call   c000f71e <File::stat(unsigned long long*, bool*)>
c001599d:	89 34 24             	mov    DWORD PTR [esp],esi
c00159a0:	89 c3                	mov    ebx,eax
c00159a2:	8b 06                	mov    eax,DWORD PTR [esi]
c00159a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159a7:	83 c4 10             	add    esp,0x10
c00159aa:	31 c0                	xor    eax,eax
c00159ac:	85 db                	test   ebx,ebx
c00159ae:	0f 95 c0             	setne  al
c00159b1:	31 d2                	xor    edx,edx
c00159b3:	f7 d8                	neg    eax
c00159b5:	83 d2 00             	adc    edx,0x0
c00159b8:	83 c4 10             	add    esp,0x10
c00159bb:	f7 da                	neg    edx
c00159bd:	5b                   	pop    ebx
c00159be:	5e                   	pop    esi
c00159bf:	5f                   	pop    edi
c00159c0:	c3                   	ret    
c00159c1:	83 ec 08             	sub    esp,0x8
c00159c4:	53                   	push   ebx
c00159c5:	68 04 19 02 c0       	push   0xc0021904
c00159ca:	e8 10 95 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c00159cf:	83 c4 10             	add    esp,0x10
c00159d2:	83 c4 10             	add    esp,0x10
c00159d5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159da:	5b                   	pop    ebx
c00159db:	ba ff ff ff ff       	mov    edx,0xffffffff
c00159e0:	5e                   	pop    esi
c00159e1:	5f                   	pop    edi
c00159e2:	c3                   	ret    

c00159e3 <sysCallSize(regs*)>:
c00159e3:	53                   	push   ebx
c00159e4:	83 ec 18             	sub    esp,0x18
c00159e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00159eb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00159ee:	83 f8 02             	cmp    eax,0x2
c00159f1:	76 4b                	jbe    c0015a3e <sysCallSize(regs*)+0x5b>
c00159f3:	3d 00 ff ff 7f       	cmp    eax,0x7fffff00
c00159f8:	77 33                	ja     c0015a2d <sysCallSize(regs*)+0x4a>
c00159fa:	83 ec 0c             	sub    esp,0xc
c00159fd:	50                   	push   eax
c00159fe:	e8 76 81 ff ff       	call   c000db79 <getFromFileDescriptor(int)>
c0015a03:	83 c4 0c             	add    esp,0xc
c0015a06:	8d 54 24 13          	lea    edx,[esp+0x13]
c0015a0a:	52                   	push   edx
c0015a0b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015a0e:	50                   	push   eax
c0015a0f:	e8 0a 9d ff ff       	call   c000f71e <File::stat(unsigned long long*, bool*)>
c0015a14:	83 c4 10             	add    esp,0x10
c0015a17:	85 c0                	test   eax,eax
c0015a19:	0f 95 c0             	setne  al
c0015a1c:	31 d2                	xor    edx,edx
c0015a1e:	0f b6 c0             	movzx  eax,al
c0015a21:	f7 d8                	neg    eax
c0015a23:	83 d2 00             	adc    edx,0x0
c0015a26:	83 c4 18             	add    esp,0x18
c0015a29:	f7 da                	neg    edx
c0015a2b:	5b                   	pop    ebx
c0015a2c:	c3                   	ret    
c0015a2d:	83 ec 08             	sub    esp,0x8
c0015a30:	50                   	push   eax
c0015a31:	68 04 19 02 c0       	push   0xc0021904
c0015a36:	e8 a4 94 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0015a3b:	83 c4 10             	add    esp,0x10
c0015a3e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a43:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a48:	83 c4 18             	add    esp,0x18
c0015a4b:	5b                   	pop    ebx
c0015a4c:	c3                   	ret    

c0015a4d <sysCallClose(regs*)>:
c0015a4d:	53                   	push   ebx
c0015a4e:	83 ec 08             	sub    esp,0x8
c0015a51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a55:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015a58:	83 f8 02             	cmp    eax,0x2
c0015a5b:	76 50                	jbe    c0015aad <sysCallClose(regs*)+0x60>
c0015a5d:	3d 01 ff ff 7f       	cmp    eax,0x7fffff01
c0015a62:	74 58                	je     c0015abc <sysCallClose(regs*)+0x6f>
c0015a64:	3d 00 ff ff 7f       	cmp    eax,0x7fffff00
c0015a69:	74 60                	je     c0015acb <sysCallClose(regs*)+0x7e>
c0015a6b:	77 2f                	ja     c0015a9c <sysCallClose(regs*)+0x4f>
c0015a6d:	83 ec 0c             	sub    esp,0xc
c0015a70:	50                   	push   eax
c0015a71:	e8 03 81 ff ff       	call   c000db79 <getFromFileDescriptor(int)>
c0015a76:	89 c3                	mov    ebx,eax
c0015a78:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a7b:	e8 50 9a ff ff       	call   c000f4d0 <File::close()>
c0015a80:	83 c4 10             	add    esp,0x10
c0015a83:	85 db                	test   ebx,ebx
c0015a85:	74 0c                	je     c0015a93 <sysCallClose(regs*)+0x46>
c0015a87:	83 ec 0c             	sub    esp,0xc
c0015a8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015a8c:	53                   	push   ebx
c0015a8d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015a90:	83 c4 10             	add    esp,0x10
c0015a93:	31 c0                	xor    eax,eax
c0015a95:	31 d2                	xor    edx,edx
c0015a97:	83 c4 08             	add    esp,0x8
c0015a9a:	5b                   	pop    ebx
c0015a9b:	c3                   	ret    
c0015a9c:	83 ec 08             	sub    esp,0x8
c0015a9f:	50                   	push   eax
c0015aa0:	68 38 18 02 c0       	push   0xc0021838
c0015aa5:	e8 35 94 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0015aaa:	83 c4 10             	add    esp,0x10
c0015aad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ab2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ab7:	83 c4 08             	add    esp,0x8
c0015aba:	5b                   	pop    ebx
c0015abb:	c3                   	ret    
c0015abc:	83 ec 0c             	sub    esp,0xc
c0015abf:	68 1f 19 02 c0       	push   0xc002191f
c0015ac4:	e8 16 94 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0015ac9:	eb c5                	jmp    c0015a90 <sysCallClose(regs*)+0x43>
c0015acb:	83 ec 0c             	sub    esp,0xc
c0015ace:	68 2d 19 02 c0       	push   0xc002192d
c0015ad3:	eb ef                	jmp    c0015ac4 <sysCallClose(regs*)+0x77>

c0015ad5 <sysCallOpenDir(regs*)>:
c0015ad5:	56                   	push   esi
c0015ad6:	53                   	push   ebx
c0015ad7:	53                   	push   ebx
c0015ad8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015adc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015adf:	85 f6                	test   esi,esi
c0015ae1:	74 51                	je     c0015b34 <sysCallOpenDir(regs*)+0x5f>
c0015ae3:	83 ec 0c             	sub    esp,0xc
c0015ae6:	68 14 01 00 00       	push   0x114
c0015aeb:	e8 00 93 ff ff       	call   c000edf0 <operator new(unsigned long)>
c0015af0:	83 c4 0c             	add    esp,0xc
c0015af3:	89 c6                	mov    esi,eax
c0015af5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015afa:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015afd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015b00:	56                   	push   esi
c0015b01:	e8 ca 9d ff ff       	call   c000f8d0 <Directory::Directory(char const*, Process*)>
c0015b06:	89 34 24             	mov    DWORD PTR [esp],esi
c0015b09:	e8 26 9e ff ff       	call   c000f934 <Directory::open()>
c0015b0e:	83 c4 10             	add    esp,0x10
c0015b11:	85 c0                	test   eax,eax
c0015b13:	75 1f                	jne    c0015b34 <sysCallOpenDir(regs*)+0x5f>
c0015b15:	83 ec 0c             	sub    esp,0xc
c0015b18:	56                   	push   esi
c0015b19:	e8 0a 7e ff ff       	call   c000d928 <UnixFile::getFileDescriptor()>
c0015b1e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015b21:	83 c4 10             	add    esp,0x10
c0015b24:	89 02                	mov    DWORD PTR [edx],eax
c0015b26:	c1 f8 1f             	sar    eax,0x1f
c0015b29:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015b2c:	31 c0                	xor    eax,eax
c0015b2e:	59                   	pop    ecx
c0015b2f:	31 d2                	xor    edx,edx
c0015b31:	5b                   	pop    ebx
c0015b32:	5e                   	pop    esi
c0015b33:	c3                   	ret    
c0015b34:	59                   	pop    ecx
c0015b35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b3a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b3f:	5b                   	pop    ebx
c0015b40:	5e                   	pop    esi
c0015b41:	c3                   	ret    

c0015b42 <sysCallMakeDir(regs*)>:
c0015b42:	56                   	push   esi
c0015b43:	53                   	push   ebx
c0015b44:	83 ec 10             	sub    esp,0x10
c0015b47:	68 14 01 00 00       	push   0x114
c0015b4c:	e8 9f 92 ff ff       	call   c000edf0 <operator new(unsigned long)>
c0015b51:	83 c4 0c             	add    esp,0xc
c0015b54:	89 c3                	mov    ebx,eax
c0015b56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b5b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015b5e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b62:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015b65:	53                   	push   ebx
c0015b66:	e8 65 9d ff ff       	call   c000f8d0 <Directory::Directory(char const*, Process*)>
c0015b6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b6e:	e8 a1 9f ff ff       	call   c000fb14 <Directory::create()>
c0015b73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b76:	89 c6                	mov    esi,eax
c0015b78:	e8 13 9e ff ff       	call   c000f990 <Directory::close()>
c0015b7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b82:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b85:	31 c0                	xor    eax,eax
c0015b87:	85 f6                	test   esi,esi
c0015b89:	0f 95 c0             	setne  al
c0015b8c:	31 d2                	xor    edx,edx
c0015b8e:	f7 d8                	neg    eax
c0015b90:	83 d2 00             	adc    edx,0x0
c0015b93:	83 c4 14             	add    esp,0x14
c0015b96:	f7 da                	neg    edx
c0015b98:	5b                   	pop    ebx
c0015b99:	5e                   	pop    esi
c0015b9a:	c3                   	ret    

c0015b9b <sysCallCloseDir(regs*)>:
c0015b9b:	53                   	push   ebx
c0015b9c:	83 ec 08             	sub    esp,0x8
c0015b9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ba3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015ba6:	83 f8 02             	cmp    eax,0x2
c0015ba9:	76 47                	jbe    c0015bf2 <sysCallCloseDir(regs*)+0x57>
c0015bab:	3d 00 ff ff 7f       	cmp    eax,0x7fffff00
c0015bb0:	77 2f                	ja     c0015be1 <sysCallCloseDir(regs*)+0x46>
c0015bb2:	83 ec 0c             	sub    esp,0xc
c0015bb5:	50                   	push   eax
c0015bb6:	e8 be 7f ff ff       	call   c000db79 <getFromFileDescriptor(int)>
c0015bbb:	89 c3                	mov    ebx,eax
c0015bbd:	89 04 24             	mov    DWORD PTR [esp],eax
c0015bc0:	e8 cb 9d ff ff       	call   c000f990 <Directory::close()>
c0015bc5:	83 c4 10             	add    esp,0x10
c0015bc8:	85 db                	test   ebx,ebx
c0015bca:	74 0c                	je     c0015bd8 <sysCallCloseDir(regs*)+0x3d>
c0015bcc:	83 ec 0c             	sub    esp,0xc
c0015bcf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015bd1:	53                   	push   ebx
c0015bd2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015bd5:	83 c4 10             	add    esp,0x10
c0015bd8:	31 c0                	xor    eax,eax
c0015bda:	31 d2                	xor    edx,edx
c0015bdc:	83 c4 08             	add    esp,0x8
c0015bdf:	5b                   	pop    ebx
c0015be0:	c3                   	ret    
c0015be1:	83 ec 08             	sub    esp,0x8
c0015be4:	50                   	push   eax
c0015be5:	68 60 18 02 c0       	push   0xc0021860
c0015bea:	e8 f0 92 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0015bef:	83 c4 10             	add    esp,0x10
c0015bf2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015bf7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015bfc:	83 c4 08             	add    esp,0x8
c0015bff:	5b                   	pop    ebx
c0015c00:	c3                   	ret    

c0015c01 <sysCallWait(regs*)>:
c0015c01:	83 ec 10             	sub    esp,0x10
c0015c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c08:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015c0b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015c0e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015c11:	e8 3e 24 00 00       	call   c0018054 <waitTask(int, int*, int)>
c0015c16:	83 c4 1c             	add    esp,0x1c
c0015c19:	99                   	cdq    
c0015c1a:	c3                   	ret    

c0015c1b <sysCallFork(regs*)>:
c0015c1b:	83 ec 18             	sub    esp,0x18
c0015c1e:	68 3b 19 02 c0       	push   0xc002193b
c0015c23:	e8 b7 92 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0015c28:	58                   	pop    eax
c0015c29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c2d:	e8 f0 21 00 00       	call   c0017e22 <forkProcess(regs*)>
c0015c32:	83 c4 1c             	add    esp,0x1c
c0015c35:	99                   	cdq    
c0015c36:	c3                   	ret    

c0015c37 <sysCallExecve(regs*)>:
c0015c37:	53                   	push   ebx
c0015c38:	81 ec 24 01 00 00    	sub    esp,0x124
c0015c3e:	8b 9c 24 2c 01 00 00 	mov    ebx,DWORD PTR [esp+0x12c]
c0015c45:	68 49 19 02 c0       	push   0xc0021949
c0015c4a:	e8 90 92 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0015c4f:	83 c4 0c             	add    esp,0xc
c0015c52:	68 00 01 00 00       	push   0x100
c0015c57:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015c5b:	50                   	push   eax
c0015c5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c61:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015c64:	e8 16 9b ff ff       	call   c000f77f <getcwd(Process*, char*, int)>
c0015c69:	83 c4 0c             	add    esp,0xc
c0015c6c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015c6f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015c72:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015c75:	e8 0e 25 00 00       	call   c0018188 <execveProcess(char const*, char* const*, char* const*)>
c0015c7a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c7f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c84:	81 c4 28 01 00 00    	add    esp,0x128
c0015c8a:	5b                   	pop    ebx
c0015c8b:	c3                   	ret    

c0015c8c <sysCallRmdir(regs*)>:
c0015c8c:	56                   	push   esi
c0015c8d:	53                   	push   ebx
c0015c8e:	83 ec 10             	sub    esp,0x10
c0015c91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c95:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015c98:	68 14 01 00 00       	push   0x114
c0015c9d:	e8 4e 91 ff ff       	call   c000edf0 <operator new(unsigned long)>
c0015ca2:	83 c4 0c             	add    esp,0xc
c0015ca5:	89 c3                	mov    ebx,eax
c0015ca7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cac:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015caf:	56                   	push   esi
c0015cb0:	53                   	push   ebx
c0015cb1:	e8 58 97 ff ff       	call   c000f40e <File::File(char const*, Process*)>
c0015cb6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015cb9:	e8 2c 99 ff ff       	call   c000f5ea <File::unlink()>
c0015cbe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015cc1:	89 c6                	mov    esi,eax
c0015cc3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015cc5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015cc8:	31 c0                	xor    eax,eax
c0015cca:	85 f6                	test   esi,esi
c0015ccc:	0f 95 c0             	setne  al
c0015ccf:	31 d2                	xor    edx,edx
c0015cd1:	f7 d8                	neg    eax
c0015cd3:	83 d2 00             	adc    edx,0x0
c0015cd6:	83 c4 14             	add    esp,0x14
c0015cd9:	f7 da                	neg    edx
c0015cdb:	5b                   	pop    ebx
c0015cdc:	5e                   	pop    esi
c0015cdd:	c3                   	ret    

c0015cde <sysCallUnlink(regs*)>:
c0015cde:	56                   	push   esi
c0015cdf:	53                   	push   ebx
c0015ce0:	83 ec 10             	sub    esp,0x10
c0015ce3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ce7:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015cea:	68 14 01 00 00       	push   0x114
c0015cef:	e8 fc 90 ff ff       	call   c000edf0 <operator new(unsigned long)>
c0015cf4:	83 c4 0c             	add    esp,0xc
c0015cf7:	89 c3                	mov    ebx,eax
c0015cf9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cfe:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015d01:	56                   	push   esi
c0015d02:	53                   	push   ebx
c0015d03:	e8 06 97 ff ff       	call   c000f40e <File::File(char const*, Process*)>
c0015d08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d0b:	e8 da 98 ff ff       	call   c000f5ea <File::unlink()>
c0015d10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d13:	89 c6                	mov    esi,eax
c0015d15:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d17:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015d1a:	31 c0                	xor    eax,eax
c0015d1c:	85 f6                	test   esi,esi
c0015d1e:	0f 95 c0             	setne  al
c0015d21:	31 d2                	xor    edx,edx
c0015d23:	f7 d8                	neg    eax
c0015d25:	83 d2 00             	adc    edx,0x0
c0015d28:	83 c4 14             	add    esp,0x14
c0015d2b:	f7 da                	neg    edx
c0015d2d:	5b                   	pop    ebx
c0015d2e:	5e                   	pop    esi
c0015d2f:	c3                   	ret    

c0015d30 <sysCallGetArgv(regs*)>:
c0015d30:	83 ec 0c             	sub    esp,0xc
c0015d33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d37:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015d3a:	85 c0                	test   eax,eax
c0015d3c:	78 2b                	js     c0015d69 <sysCallGetArgv(regs*)+0x39>
c0015d3e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015d44:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0015d47:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0015d4d:	7d 1a                	jge    c0015d69 <sysCallGetArgv(regs*)+0x39>
c0015d4f:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0015d56:	85 c0                	test   eax,eax
c0015d58:	74 17                	je     c0015d71 <sysCallGetArgv(regs*)+0x41>
c0015d5a:	83 ec 08             	sub    esp,0x8
c0015d5d:	50                   	push   eax
c0015d5e:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015d61:	e8 41 a9 fe ff       	call   c00006a7 <strcpy>
c0015d66:	83 c4 10             	add    esp,0x10
c0015d69:	31 c0                	xor    eax,eax
c0015d6b:	31 d2                	xor    edx,edx
c0015d6d:	83 c4 0c             	add    esp,0xc
c0015d70:	c3                   	ret    
c0015d71:	b8 01 00 00 00       	mov    eax,0x1
c0015d76:	31 d2                	xor    edx,edx
c0015d78:	83 c4 0c             	add    esp,0xc
c0015d7b:	c3                   	ret    

c0015d7c <sysCallTTYName(regs*)>:
c0015d7c:	56                   	push   esi
c0015d7d:	53                   	push   ebx
c0015d7e:	53                   	push   ebx
c0015d7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d83:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015d86:	85 c0                	test   eax,eax
c0015d88:	74 5f                	je     c0015de9 <sysCallTTYName(regs*)+0x6d>
c0015d8a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015d8d:	83 f8 02             	cmp    eax,0x2
c0015d90:	77 3e                	ja     c0015dd0 <sysCallTTYName(regs*)+0x54>
c0015d92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d97:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015d9a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015da0:	85 db                	test   ebx,ebx
c0015da2:	74 45                	je     c0015de9 <sysCallTTYName(regs*)+0x6d>
c0015da4:	83 ec 0c             	sub    esp,0xc
c0015da7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015da9:	53                   	push   ebx
c0015daa:	ff 10                	call   DWORD PTR [eax]
c0015dac:	83 c4 10             	add    esp,0x10
c0015daf:	84 c0                	test   al,al
c0015db1:	74 41                	je     c0015df4 <sysCallTTYName(regs*)+0x78>
c0015db3:	83 ec 08             	sub    esp,0x8
c0015db6:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0015dbc:	53                   	push   ebx
c0015dbd:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015dc0:	e8 e2 a8 fe ff       	call   c00006a7 <strcpy>
c0015dc5:	83 c4 10             	add    esp,0x10
c0015dc8:	31 c0                	xor    eax,eax
c0015dca:	59                   	pop    ecx
c0015dcb:	31 d2                	xor    edx,edx
c0015dcd:	5b                   	pop    ebx
c0015dce:	5e                   	pop    esi
c0015dcf:	c3                   	ret    
c0015dd0:	3d 01 ff ff 7f       	cmp    eax,0x7fffff01
c0015dd5:	74 bb                	je     c0015d92 <sysCallTTYName(regs*)+0x16>
c0015dd7:	83 ec 0c             	sub    esp,0xc
c0015dda:	50                   	push   eax
c0015ddb:	e8 99 7d ff ff       	call   c000db79 <getFromFileDescriptor(int)>
c0015de0:	83 c4 10             	add    esp,0x10
c0015de3:	89 c3                	mov    ebx,eax
c0015de5:	85 db                	test   ebx,ebx
c0015de7:	75 bb                	jne    c0015da4 <sysCallTTYName(regs*)+0x28>
c0015de9:	59                   	pop    ecx
c0015dea:	b8 01 00 00 00       	mov    eax,0x1
c0015def:	31 d2                	xor    edx,edx
c0015df1:	5b                   	pop    ebx
c0015df2:	5e                   	pop    esi
c0015df3:	c3                   	ret    
c0015df4:	59                   	pop    ecx
c0015df5:	b8 02 00 00 00       	mov    eax,0x2
c0015dfa:	31 d2                	xor    edx,edx
c0015dfc:	5b                   	pop    ebx
c0015dfd:	5e                   	pop    esi
c0015dfe:	c3                   	ret    

c0015dff <sysCallGetEnv(regs*)>:
c0015dff:	83 ec 0c             	sub    esp,0xc
c0015e02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e06:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0015e09:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015e0c:	85 c9                	test   ecx,ecx
c0015e0e:	75 0c                	jne    c0015e1c <sysCallGetEnv(regs*)+0x1d>
c0015e10:	85 d2                	test   edx,edx
c0015e12:	74 14                	je     c0015e28 <sysCallGetEnv(regs*)+0x29>
c0015e14:	31 c0                	xor    eax,eax
c0015e16:	31 d2                	xor    edx,edx
c0015e18:	83 c4 0c             	add    esp,0xc
c0015e1b:	c3                   	ret    
c0015e1c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015e1f:	85 d2                	test   edx,edx
c0015e21:	74 1b                	je     c0015e3e <sysCallGetEnv(regs*)+0x3f>
c0015e23:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015e26:	eb ec                	jmp    c0015e14 <sysCallGetEnv(regs*)+0x15>
c0015e28:	83 ec 0c             	sub    esp,0xc
c0015e2b:	68 84 18 02 c0       	push   0xc0021884
c0015e30:	e8 f0 a7 fe ff       	call   c0000625 <strlen>
c0015e35:	83 c4 10             	add    esp,0x10
c0015e38:	31 d2                	xor    edx,edx
c0015e3a:	83 c4 0c             	add    esp,0xc
c0015e3d:	c3                   	ret    
c0015e3e:	83 ec 08             	sub    esp,0x8
c0015e41:	68 84 18 02 c0       	push   0xc0021884
c0015e46:	50                   	push   eax
c0015e47:	e8 5b a8 fe ff       	call   c00006a7 <strcpy>
c0015e4c:	83 c4 10             	add    esp,0x10
c0015e4f:	eb c3                	jmp    c0015e14 <sysCallGetEnv(regs*)+0x15>

c0015e51 <sysCallUSleep(regs*)>:
c0015e51:	83 ec 14             	sub    esp,0x14
c0015e54:	b8 e8 03 00 00       	mov    eax,0x3e8
c0015e59:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015e5d:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0015e64:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0015e67:	01 ca                	add    edx,ecx
c0015e69:	52                   	push   edx
c0015e6a:	50                   	push   eax
c0015e6b:	e8 7d 22 00 00       	call   c00180ed <nanoSleep(unsigned long long)>
c0015e70:	31 c0                	xor    eax,eax
c0015e72:	31 d2                	xor    edx,edx
c0015e74:	83 c4 1c             	add    esp,0x1c
c0015e77:	c3                   	ret    

c0015e78 <sysCallSpawn(regs*)>:
c0015e78:	56                   	push   esi
c0015e79:	53                   	push   ebx
c0015e7a:	53                   	push   ebx
c0015e7b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e7f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0015e82:	85 f6                	test   esi,esi
c0015e84:	75 08                	jne    c0015e8e <sysCallSpawn(regs*)+0x16>
c0015e86:	59                   	pop    ecx
c0015e87:	31 c0                	xor    eax,eax
c0015e89:	31 d2                	xor    edx,edx
c0015e8b:	5b                   	pop    ebx
c0015e8c:	5e                   	pop    esi
c0015e8d:	c3                   	ret    
c0015e8e:	83 ec 0c             	sub    esp,0xc
c0015e91:	68 59 19 02 c0       	push   0xc0021959
c0015e96:	e8 44 90 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0015e9b:	c7 04 24 3b 07 00 00 	mov    DWORD PTR [esp],0x73b
c0015ea2:	e8 49 8f ff ff       	call   c000edf0 <operator new(unsigned long)>
c0015ea7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015eaa:	89 c6                	mov    esi,eax
c0015eac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eb1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015eb4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015eb7:	56                   	push   esi
c0015eb8:	e8 1f 18 00 00       	call   c00176dc <Process::Process(char const*, Process*, char**)>
c0015ebd:	83 c4 20             	add    esp,0x20
c0015ec0:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0015ec7:	75 bd                	jne    c0015e86 <sysCallSpawn(regs*)+0xe>
c0015ec9:	83 ec 0c             	sub    esp,0xc
c0015ecc:	68 64 19 02 c0       	push   0xc0021964
c0015ed1:	e8 09 90 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0015ed6:	89 34 24             	mov    DWORD PTR [esp],esi
c0015ed9:	e8 64 1d 00 00       	call   c0017c42 <Process::createUserThread()>
c0015ede:	8b 06                	mov    eax,DWORD PTR [esi]
c0015ee0:	83 c4 10             	add    esp,0x10
c0015ee3:	99                   	cdq    
c0015ee4:	59                   	pop    ecx
c0015ee5:	5b                   	pop    ebx
c0015ee6:	5e                   	pop    esi
c0015ee7:	c3                   	ret    

c0015ee8 <sysAppSettings(regs*)>:
c0015ee8:	53                   	push   ebx
c0015ee9:	83 ec 08             	sub    esp,0x8
c0015eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ef0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015ef3:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c0015ef9:	25 e0 1f 00 00       	and    eax,0x1fe0
c0015efe:	66 3d c0 09          	cmp    ax,0x9c0
c0015f02:	75 2f                	jne    c0015f33 <sysAppSettings(regs*)+0x4b>
c0015f04:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0015f0a:	83 e0 1f             	and    eax,0x1f
c0015f0d:	3c 01                	cmp    al,0x1
c0015f0f:	74 2e                	je     c0015f3f <sysAppSettings(regs*)+0x57>
c0015f11:	3c 07                	cmp    al,0x7
c0015f13:	0f 84 bd 00 00 00    	je     c0015fd6 <sysAppSettings(regs*)+0xee>
c0015f19:	84 c0                	test   al,al
c0015f1b:	0f 84 dc 00 00 00    	je     c0015ffd <sysAppSettings(regs*)+0x115>
c0015f21:	3c 08                	cmp    al,0x8
c0015f23:	74 6d                	je     c0015f92 <sysAppSettings(regs*)+0xaa>
c0015f25:	0f b6 c0             	movzx  eax,al
c0015f28:	83 c4 08             	add    esp,0x8
c0015f2b:	05 e8 03 00 00       	add    eax,0x3e8
c0015f30:	5b                   	pop    ebx
c0015f31:	99                   	cdq    
c0015f32:	c3                   	ret    
c0015f33:	b8 01 00 00 00       	mov    eax,0x1
c0015f38:	31 d2                	xor    edx,edx
c0015f3a:	83 c4 08             	add    esp,0x8
c0015f3d:	5b                   	pop    ebx
c0015f3e:	c3                   	ret    
c0015f3f:	51                   	push   ecx
c0015f40:	68 00 01 00 00       	push   0x100
c0015f45:	6a 00                	push   0x0
c0015f47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f4c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015f4f:	83 c0 0c             	add    eax,0xc
c0015f52:	50                   	push   eax
c0015f53:	e8 b0 a6 fe ff       	call   c0000608 <memset>
c0015f58:	83 c4 0c             	add    esp,0xc
c0015f5b:	68 ff 00 00 00       	push   0xff
c0015f60:	53                   	push   ebx
c0015f61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f66:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015f69:	83 c0 0c             	add    eax,0xc
c0015f6c:	50                   	push   eax
c0015f6d:	e8 60 a6 fe ff       	call   c00005d2 <memcpy>
c0015f72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f77:	5b                   	pop    ebx
c0015f78:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015f7b:	5a                   	pop    edx
c0015f7c:	8d 50 0c             	lea    edx,[eax+0xc]
c0015f7f:	52                   	push   edx
c0015f80:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015f86:	e8 b5 6d ff ff       	call   c000cd40 <VgaText::setTitle(char*)>
c0015f8b:	83 c4 10             	add    esp,0x10
c0015f8e:	31 c0                	xor    eax,eax
c0015f90:	eb a6                	jmp    c0015f38 <sysAppSettings(regs*)+0x50>
c0015f92:	83 ec 08             	sub    esp,0x8
c0015f95:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0015f9b:	83 e0 0f             	and    eax,0xf
c0015f9e:	50                   	push   eax
c0015f9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fa4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015fa7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015fad:	e8 7e 6d ff ff       	call   c000cd30 <VgaText::setTitleColour(VgaColour)>
c0015fb2:	58                   	pop    eax
c0015fb3:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0015fb9:	5a                   	pop    edx
c0015fba:	c1 e8 04             	shr    eax,0x4
c0015fbd:	83 e0 0f             	and    eax,0xf
c0015fc0:	50                   	push   eax
c0015fc1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fc6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015fc9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015fcf:	e8 4c 6d ff ff       	call   c000cd20 <VgaText::setTitleTextColour(VgaColour)>
c0015fd4:	eb b5                	jmp    c0015f8b <sysAppSettings(regs*)+0xa3>
c0015fd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fdb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015fde:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0015fe4:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0015fea:	c0 e8 06             	shr    al,0x6
c0015fed:	83 e0 01             	and    eax,0x1
c0015ff0:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0015ff6:	31 c0                	xor    eax,eax
c0015ff8:	e9 3b ff ff ff       	jmp    c0015f38 <sysAppSettings(regs*)+0x50>
c0015ffd:	b8 02 00 00 00       	mov    eax,0x2
c0016002:	e9 31 ff ff ff       	jmp    c0015f38 <sysAppSettings(regs*)+0x50>

c0016007 <sysSetFatAttrib(regs*)>:
c0016007:	57                   	push   edi
c0016008:	56                   	push   esi
c0016009:	53                   	push   ebx
c001600a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001600e:	83 ec 0c             	sub    esp,0xc
c0016011:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016014:	68 14 01 00 00       	push   0x114
c0016019:	e8 d2 8d ff ff       	call   c000edf0 <operator new(unsigned long)>
c001601e:	83 c4 0c             	add    esp,0xc
c0016021:	89 c3                	mov    ebx,eax
c0016023:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016028:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001602b:	57                   	push   edi
c001602c:	53                   	push   ebx
c001602d:	e8 dc 93 ff ff       	call   c000f40e <File::File(char const*, Process*)>
c0016032:	83 c4 0c             	add    esp,0xc
c0016035:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016038:	0f b6 d4             	movzx  edx,ah
c001603b:	0f b6 c0             	movzx  eax,al
c001603e:	52                   	push   edx
c001603f:	50                   	push   eax
c0016040:	53                   	push   ebx
c0016041:	e8 3e 96 ff ff       	call   c000f684 <File::chfatattr(unsigned char, unsigned char)>
c0016046:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016049:	89 c6                	mov    esi,eax
c001604b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001604d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016050:	83 c4 10             	add    esp,0x10
c0016053:	31 c0                	xor    eax,eax
c0016055:	5b                   	pop    ebx
c0016056:	85 f6                	test   esi,esi
c0016058:	5e                   	pop    esi
c0016059:	0f 95 c0             	setne  al
c001605c:	5f                   	pop    edi
c001605d:	31 d2                	xor    edx,edx
c001605f:	f7 d8                	neg    eax
c0016061:	83 d2 00             	adc    edx,0x0
c0016064:	f7 da                	neg    edx
c0016066:	c3                   	ret    

c0016067 <sysPanic(regs*)>:
c0016067:	83 ec 18             	sub    esp,0x18
c001606a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001606e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016071:	e8 fe ea ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c0016076:	c7 04 24 71 19 02 c0 	mov    DWORD PTR [esp],0xc0021971
c001607d:	e8 f2 ea ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c0016082:	b8 01 00 00 00       	mov    eax,0x1
c0016087:	31 d2                	xor    edx,edx
c0016089:	83 c4 1c             	add    esp,0x1c
c001608c:	c3                   	ret    

c001608d <sysPipe(regs*)>:
c001608d:	57                   	push   edi
c001608e:	56                   	push   esi
c001608f:	53                   	push   ebx
c0016090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016094:	83 ec 0c             	sub    esp,0xc
c0016097:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001609a:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001609d:	6a 20                	push   0x20
c001609f:	e8 4c 8d ff ff       	call   c000edf0 <operator new(unsigned long)>
c00160a4:	89 c3                	mov    ebx,eax
c00160a6:	58                   	pop    eax
c00160a7:	5a                   	pop    edx
c00160a8:	68 00 50 00 00       	push   0x5000
c00160ad:	53                   	push   ebx
c00160ae:	e8 cb 65 ff ff       	call   c000c67e <Pipe::Pipe(int)>
c00160b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160b6:	e8 6d 78 ff ff       	call   c000d928 <UnixFile::getFileDescriptor()>
c00160bb:	89 07                	mov    DWORD PTR [edi],eax
c00160bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160c0:	e8 63 78 ff ff       	call   c000d928 <UnixFile::getFileDescriptor()>
c00160c5:	83 c4 10             	add    esp,0x10
c00160c8:	89 06                	mov    DWORD PTR [esi],eax
c00160ca:	31 d2                	xor    edx,edx
c00160cc:	5b                   	pop    ebx
c00160cd:	31 c0                	xor    eax,eax
c00160cf:	5e                   	pop    esi
c00160d0:	5f                   	pop    edi
c00160d1:	c3                   	ret    

c00160d2 <sysGetUnixTime(regs*)>:
c00160d2:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c00160d7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00160dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00160e1:	e9 f0 9c ff ff       	jmp    c000fdd6 <Clock::timeInSecondsLocal()>

c00160e6 <string_ends_with(char const*, char const*)>:
c00160e6:	57                   	push   edi
c00160e7:	56                   	push   esi
c00160e8:	53                   	push   ebx
c00160e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00160ed:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00160f1:	83 ec 0c             	sub    esp,0xc
c00160f4:	53                   	push   ebx
c00160f5:	e8 2b a5 fe ff       	call   c0000625 <strlen>
c00160fa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00160fd:	89 c6                	mov    esi,eax
c00160ff:	e8 21 a5 fe ff       	call   c0000625 <strlen>
c0016104:	83 c4 10             	add    esp,0x10
c0016107:	39 c6                	cmp    esi,eax
c0016109:	7d 06                	jge    c0016111 <string_ends_with(char const*, char const*)+0x2b>
c001610b:	5b                   	pop    ebx
c001610c:	31 c0                	xor    eax,eax
c001610e:	5e                   	pop    esi
c001610f:	5f                   	pop    edi
c0016110:	c3                   	ret    
c0016111:	83 ec 08             	sub    esp,0x8
c0016114:	29 c6                	sub    esi,eax
c0016116:	57                   	push   edi
c0016117:	01 f3                	add    ebx,esi
c0016119:	53                   	push   ebx
c001611a:	e8 d9 a5 fe ff       	call   c00006f8 <strcmp>
c001611f:	83 c4 10             	add    esp,0x10
c0016122:	85 c0                	test   eax,eax
c0016124:	5b                   	pop    ebx
c0016125:	0f 94 c0             	sete   al
c0016128:	5e                   	pop    esi
c0016129:	0f b6 c0             	movzx  eax,al
c001612c:	5f                   	pop    edi
c001612d:	c3                   	ret    

c001612e <sysCallOpen(regs*)>:
c001612e:	56                   	push   esi
c001612f:	53                   	push   ebx
c0016130:	81 ec 04 01 00 00    	sub    esp,0x104
c0016136:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001613d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016140:	85 d2                	test   edx,edx
c0016142:	0f 84 b0 00 00 00    	je     c00161f8 <sysCallOpen(regs*)+0xca>
c0016148:	50                   	push   eax
c0016149:	68 80 19 02 c0       	push   0xc0021980
c001614e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016151:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016155:	56                   	push   esi
c0016156:	e8 09 91 ff ff       	call   c000f264 <standardiseFiles(char*, char const*, char const*)>
c001615b:	89 34 24             	mov    DWORD PTR [esp],esi
c001615e:	e8 c2 a4 fe ff       	call   c0000625 <strlen>
c0016163:	83 c4 10             	add    esp,0x10
c0016166:	48                   	dec    eax
c0016167:	74 1d                	je     c0016186 <sysCallOpen(regs*)+0x58>
c0016169:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001616c:	eb 0f                	jmp    c001617d <sysCallOpen(regs*)+0x4f>
c001616e:	80 fa 3a             	cmp    dl,0x3a
c0016171:	74 0f                	je     c0016182 <sysCallOpen(regs*)+0x54>
c0016173:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016177:	48                   	dec    eax
c0016178:	74 0c                	je     c0016186 <sysCallOpen(regs*)+0x58>
c001617a:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001617d:	80 fa 2e             	cmp    dl,0x2e
c0016180:	75 ec                	jne    c001616e <sysCallOpen(regs*)+0x40>
c0016182:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0016186:	83 ec 08             	sub    esp,0x8
c0016189:	68 84 19 02 c0       	push   0xc0021984
c001618e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016191:	e8 50 ff ff ff       	call   c00160e6 <string_ends_with(char const*, char const*)>
c0016196:	83 c4 10             	add    esp,0x10
c0016199:	85 c0                	test   eax,eax
c001619b:	75 2e                	jne    c00161cb <sysCallOpen(regs*)+0x9d>
c001619d:	83 ec 08             	sub    esp,0x8
c00161a0:	68 96 19 02 c0       	push   0xc0021996
c00161a5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00161a8:	e8 39 ff ff ff       	call   c00160e6 <string_ends_with(char const*, char const*)>
c00161ad:	83 c4 10             	add    esp,0x10
c00161b0:	85 c0                	test   eax,eax
c00161b2:	75 17                	jne    c00161cb <sysCallOpen(regs*)+0x9d>
c00161b4:	83 ec 08             	sub    esp,0x8
c00161b7:	68 85 19 02 c0       	push   0xc0021985
c00161bc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00161bf:	e8 34 a5 fe ff       	call   c00006f8 <strcmp>
c00161c4:	83 c4 10             	add    esp,0x10
c00161c7:	85 c0                	test   eax,eax
c00161c9:	75 40                	jne    c001620b <sysCallOpen(regs*)+0xdd>
c00161cb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00161ce:	83 ec 0c             	sub    esp,0xc
c00161d1:	c7 00 01 ff ff 7f    	mov    DWORD PTR [eax],0x7fffff01
c00161d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00161de:	68 89 19 02 c0       	push   0xc0021989
c00161e3:	e8 f7 8c ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c00161e8:	83 c4 10             	add    esp,0x10
c00161eb:	81 c4 04 01 00 00    	add    esp,0x104
c00161f1:	31 c0                	xor    eax,eax
c00161f3:	31 d2                	xor    edx,edx
c00161f5:	5b                   	pop    ebx
c00161f6:	5e                   	pop    esi
c00161f7:	c3                   	ret    
c00161f8:	81 c4 04 01 00 00    	add    esp,0x104
c00161fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016203:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016208:	5b                   	pop    ebx
c0016209:	5e                   	pop    esi
c001620a:	c3                   	ret    
c001620b:	83 ec 08             	sub    esp,0x8
c001620e:	68 84 19 02 c0       	push   0xc0021984
c0016213:	56                   	push   esi
c0016214:	e8 cd fe ff ff       	call   c00160e6 <string_ends_with(char const*, char const*)>
c0016219:	83 c4 10             	add    esp,0x10
c001621c:	85 c0                	test   eax,eax
c001621e:	75 ab                	jne    c00161cb <sysCallOpen(regs*)+0x9d>
c0016220:	83 ec 08             	sub    esp,0x8
c0016223:	68 9b 19 02 c0       	push   0xc002199b
c0016228:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001622b:	e8 b6 fe ff ff       	call   c00160e6 <string_ends_with(char const*, char const*)>
c0016230:	83 c4 10             	add    esp,0x10
c0016233:	85 c0                	test   eax,eax
c0016235:	0f 85 d1 00 00 00    	jne    c001630c <sysCallOpen(regs*)+0x1de>
c001623b:	83 ec 08             	sub    esp,0x8
c001623e:	68 a0 19 02 c0       	push   0xc00219a0
c0016243:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016246:	e8 9b fe ff ff       	call   c00160e6 <string_ends_with(char const*, char const*)>
c001624b:	83 c4 10             	add    esp,0x10
c001624e:	85 c0                	test   eax,eax
c0016250:	0f 85 b6 00 00 00    	jne    c001630c <sysCallOpen(regs*)+0x1de>
c0016256:	83 ec 08             	sub    esp,0x8
c0016259:	68 9c 19 02 c0       	push   0xc002199c
c001625e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016261:	e8 92 a4 fe ff       	call   c00006f8 <strcmp>
c0016266:	83 c4 10             	add    esp,0x10
c0016269:	85 c0                	test   eax,eax
c001626b:	0f 84 9b 00 00 00    	je     c001630c <sysCallOpen(regs*)+0x1de>
c0016271:	83 ec 08             	sub    esp,0x8
c0016274:	68 9b 19 02 c0       	push   0xc002199b
c0016279:	56                   	push   esi
c001627a:	e8 67 fe ff ff       	call   c00160e6 <string_ends_with(char const*, char const*)>
c001627f:	83 c4 10             	add    esp,0x10
c0016282:	85 c0                	test   eax,eax
c0016284:	0f 85 82 00 00 00    	jne    c001630c <sysCallOpen(regs*)+0x1de>
c001628a:	83 ec 0c             	sub    esp,0xc
c001628d:	68 14 01 00 00       	push   0x114
c0016292:	e8 59 8b ff ff       	call   c000edf0 <operator new(unsigned long)>
c0016297:	83 c4 0c             	add    esp,0xc
c001629a:	89 c6                	mov    esi,eax
c001629c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162a1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00162a4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162a7:	56                   	push   esi
c00162a8:	e8 61 91 ff ff       	call   c000f40e <File::File(char const*, Process*)>
c00162ad:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00162b0:	83 c4 10             	add    esp,0x10
c00162b3:	0f b6 c2             	movzx  eax,dl
c00162b6:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00162b9:	89 d0                	mov    eax,edx
c00162bb:	83 e0 01             	and    eax,0x1
c00162be:	f6 c2 02             	test   dl,0x2
c00162c1:	74 03                	je     c00162c6 <sysCallOpen(regs*)+0x198>
c00162c3:	83 c8 02             	or     eax,0x2
c00162c6:	f6 c2 04             	test   dl,0x4
c00162c9:	74 03                	je     c00162ce <sysCallOpen(regs*)+0x1a0>
c00162cb:	83 c8 04             	or     eax,0x4
c00162ce:	f6 c2 08             	test   dl,0x8
c00162d1:	74 03                	je     c00162d6 <sysCallOpen(regs*)+0x1a8>
c00162d3:	83 c8 0a             	or     eax,0xa
c00162d6:	83 e2 10             	and    edx,0x10
c00162d9:	74 03                	je     c00162de <sysCallOpen(regs*)+0x1b0>
c00162db:	83 c8 12             	or     eax,0x12
c00162de:	83 ec 08             	sub    esp,0x8
c00162e1:	50                   	push   eax
c00162e2:	56                   	push   esi
c00162e3:	e8 8a 91 ff ff       	call   c000f472 <File::open(FileOpenMode)>
c00162e8:	83 c4 10             	add    esp,0x10
c00162eb:	85 c0                	test   eax,eax
c00162ed:	0f 85 05 ff ff ff    	jne    c00161f8 <sysCallOpen(regs*)+0xca>
c00162f3:	83 ec 0c             	sub    esp,0xc
c00162f6:	56                   	push   esi
c00162f7:	e8 2c 76 ff ff       	call   c000d928 <UnixFile::getFileDescriptor()>
c00162fc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00162ff:	89 02                	mov    DWORD PTR [edx],eax
c0016301:	c1 f8 1f             	sar    eax,0x1f
c0016304:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016307:	e9 dc fe ff ff       	jmp    c00161e8 <sysCallOpen(regs*)+0xba>
c001630c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001630f:	c7 00 00 ff ff 7f    	mov    DWORD PTR [eax],0x7fffff00
c0016315:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001631c:	e9 ca fe ff ff       	jmp    c00161eb <sysCallOpen(regs*)+0xbd>

c0016321 <setupSystemCalls()>:
c0016321:	c7 05 e0 3e 02 c0 75 55 01 c0 	mov    DWORD PTR ds:0xc0023ee0,0xc0015575
c001632b:	c7 05 e4 3e 02 c0 a3 53 01 c0 	mov    DWORD PTR ds:0xc0023ee4,0xc00153a3
c0016335:	c7 05 e8 3e 02 c0 b8 54 01 c0 	mov    DWORD PTR ds:0xc0023ee8,0xc00154b8
c001633f:	c7 05 ec 3e 02 c0 0d 55 01 c0 	mov    DWORD PTR ds:0xc0023eec,0xc001550d
c0016349:	c7 05 f0 3e 02 c0 50 54 01 c0 	mov    DWORD PTR ds:0xc0023ef0,0xc0015450
c0016353:	c7 05 f4 3e 02 c0 8f 55 01 c0 	mov    DWORD PTR ds:0xc0023ef4,0xc001558f
c001635d:	c7 05 f8 3e 02 c0 1e 57 01 c0 	mov    DWORD PTR ds:0xc0023ef8,0xc001571e
c0016367:	c7 05 fc 3e 02 c0 3d 57 01 c0 	mov    DWORD PTR ds:0xc0023efc,0xc001573d
c0016371:	c7 05 04 3f 02 c0 4d 5a 01 c0 	mov    DWORD PTR ds:0xc0023f04,0xc0015a4d
c001637b:	c7 05 00 3f 02 c0 2e 61 01 c0 	mov    DWORD PTR ds:0xc0023f00,0xc001612e
c0016385:	c7 05 08 3f 02 c0 d5 5a 01 c0 	mov    DWORD PTR ds:0xc0023f08,0xc0015ad5
c001638f:	c7 05 0c 3f 02 c0 9c 57 01 c0 	mov    DWORD PTR ds:0xc0023f0c,0xc001579c
c0016399:	c7 05 10 3f 02 c0 9b 55 01 c0 	mov    DWORD PTR ds:0xc0023f10,0xc001559b
c00163a3:	c7 05 14 3f 02 c0 a0 55 01 c0 	mov    DWORD PTR ds:0xc0023f14,0xc00155a0
c00163ad:	c7 05 18 3f 02 c0 42 5b 01 c0 	mov    DWORD PTR ds:0xc0023f18,0xc0015b42
c00163b7:	c7 05 1c 3f 02 c0 9b 5b 01 c0 	mov    DWORD PTR ds:0xc0023f1c,0xc0015b9b
c00163c1:	c7 05 20 3f 02 c0 84 58 01 c0 	mov    DWORD PTR ds:0xc0023f20,0xc0015884
c00163cb:	c7 05 24 3f 02 c0 ed 58 01 c0 	mov    DWORD PTR ds:0xc0023f24,0xc00158ed
c00163d5:	c7 05 28 3f 02 c0 e3 59 01 c0 	mov    DWORD PTR ds:0xc0023f28,0xc00159e3
c00163df:	c7 05 2c 3f 02 c0 a5 55 01 c0 	mov    DWORD PTR ds:0xc0023f2c,0xc00155a5
c00163e9:	c7 05 30 3f 02 c0 01 5c 01 c0 	mov    DWORD PTR ds:0xc0023f30,0xc0015c01
c00163f3:	c7 05 34 3f 02 c0 1b 5c 01 c0 	mov    DWORD PTR ds:0xc0023f34,0xc0015c1b
c00163fd:	c7 05 38 3f 02 c0 37 5c 01 c0 	mov    DWORD PTR ds:0xc0023f38,0xc0015c37
c0016407:	c7 05 3c 3f 02 c0 8c 5c 01 c0 	mov    DWORD PTR ds:0xc0023f3c,0xc0015c8c
c0016411:	c7 05 40 3f 02 c0 de 5c 01 c0 	mov    DWORD PTR ds:0xc0023f40,0xc0015cde
c001641b:	c7 05 44 3f 02 c0 af 55 01 c0 	mov    DWORD PTR ds:0xc0023f44,0xc00155af
c0016425:	c7 05 48 3f 02 c0 30 5d 01 c0 	mov    DWORD PTR ds:0xc0023f48,0xc0015d30
c001642f:	c7 05 4c 3f 02 c0 59 57 01 c0 	mov    DWORD PTR ds:0xc0023f4c,0xc0015759
c0016439:	c7 05 50 3f 02 c0 7c 5d 01 c0 	mov    DWORD PTR ds:0xc0023f50,0xc0015d7c
c0016443:	c7 05 54 3f 02 c0 2a 58 01 c0 	mov    DWORD PTR ds:0xc0023f54,0xc001582a
c001644d:	c7 05 58 3f 02 c0 51 5e 01 c0 	mov    DWORD PTR ds:0xc0023f58,0xc0015e51
c0016457:	c7 05 5c 3f 02 c0 51 59 01 c0 	mov    DWORD PTR ds:0xc0023f5c,0xc0015951
c0016461:	c7 05 60 3f 02 c0 78 5e 01 c0 	mov    DWORD PTR ds:0xc0023f60,0xc0015e78
c001646b:	c7 05 64 3f 02 c0 ff 5d 01 c0 	mov    DWORD PTR ds:0xc0023f64,0xc0015dff
c0016475:	c7 05 68 3f 02 c0 e8 5e 01 c0 	mov    DWORD PTR ds:0xc0023f68,0xc0015ee8
c001647f:	c7 05 6c 3f 02 c0 bf 55 01 c0 	mov    DWORD PTR ds:0xc0023f6c,0xc00155bf
c0016489:	c7 05 70 3f 02 c0 29 56 01 c0 	mov    DWORD PTR ds:0xc0023f70,0xc0015629
c0016493:	c7 05 74 3f 02 c0 6f 56 01 c0 	mov    DWORD PTR ds:0xc0023f74,0xc001566f
c001649d:	c7 05 78 3f 02 c0 07 60 01 c0 	mov    DWORD PTR ds:0xc0023f78,0xc0016007
c00164a7:	c7 05 7c 3f 02 c0 67 60 01 c0 	mov    DWORD PTR ds:0xc0023f7c,0xc0016067
c00164b1:	c7 05 80 3f 02 c0 c0 56 01 c0 	mov    DWORD PTR ds:0xc0023f80,0xc00156c0
c00164bb:	c7 05 84 3f 02 c0 8d 60 01 c0 	mov    DWORD PTR ds:0xc0023f84,0xc001608d
c00164c5:	c7 05 88 3f 02 c0 d2 60 01 c0 	mov    DWORD PTR ds:0xc0023f88,0xc00160d2
c00164cf:	c7 05 8c 3f 02 c0 bb 53 01 c0 	mov    DWORD PTR ds:0xc0023f8c,0xc00153bb
c00164d9:	c3                   	ret    

c00164da <systemCall(regs*, void*)>:
c00164da:	53                   	push   ebx
c00164db:	83 ec 08             	sub    esp,0x8
c00164de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00164e2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00164e5:	83 f8 7f             	cmp    eax,0x7f
c00164e8:	77 16                	ja     c0016500 <systemCall(regs*, void*)+0x26>
c00164ea:	8b 14 85 e0 3e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc120]
c00164f1:	85 d2                	test   edx,edx
c00164f3:	74 0b                	je     c0016500 <systemCall(regs*, void*)+0x26>
c00164f5:	83 ec 0c             	sub    esp,0xc
c00164f8:	53                   	push   ebx
c00164f9:	ff d2                	call   edx
c00164fb:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00164fe:	eb 0d                	jmp    c001650d <systemCall(regs*, void*)+0x33>
c0016500:	52                   	push   edx
c0016501:	52                   	push   edx
c0016502:	50                   	push   eax
c0016503:	68 a5 19 02 c0       	push   0xc00219a5
c0016508:	e8 d2 89 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001650d:	83 c4 10             	add    esp,0x10
c0016510:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016515:	31 d2                	xor    edx,edx
c0016517:	83 c4 08             	add    esp,0x8
c001651a:	5b                   	pop    ebx
c001651b:	c3                   	ret    

c001651c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001651c:	55                   	push   ebp
c001651d:	89 e5                	mov    ebp,esp
c001651f:	57                   	push   edi
c0016520:	56                   	push   esi
c0016521:	53                   	push   ebx
c0016522:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016528:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001652b:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001652e:	85 c0                	test   eax,eax
c0016530:	0f 95 c1             	setne  cl
c0016533:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016537:	0f 94 c2             	sete   dl
c001653a:	84 d1                	test   cl,dl
c001653c:	74 26                	je     c0016564 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001653e:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c0016545:	74 1d                	je     c0016564 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c0016547:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001654a:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c0016550:	89 d6                	mov    esi,edx
c0016552:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016558:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001655e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0016561:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c0016564:	83 ec 0c             	sub    esp,0xc
c0016567:	05 ff 0f 00 00       	add    eax,0xfff
c001656c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001656f:	6a 01                	push   0x1
c0016571:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c0016577:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001657d:	e8 dd 76 ff ff       	call   c000dc5f <Virt::allocateKernelVirtualPages(int)>
c0016582:	83 c4 10             	add    esp,0x10
c0016585:	89 c6                	mov    esi,eax
c0016587:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001658d:	0f 86 21 01 00 00    	jbe    c00166b4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0016593:	c1 eb 0c             	shr    ebx,0xc
c0016596:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c00165a0:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c00165a6:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00165a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00165ac:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c00165b2:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c00165b5:	29 d8                	sub    eax,ebx
c00165b7:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c00165bd:	0f 83 f4 00 00 00    	jae    c00166b7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c00165c3:	83 ec 0c             	sub    esp,0xc
c00165c6:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c00165cc:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00165cf:	3d 00 10 00 00       	cmp    eax,0x1000
c00165d4:	8b 09                	mov    ecx,DWORD PTR [ecx]
c00165d6:	52                   	push   edx
c00165d7:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c00165dd:	52                   	push   edx
c00165de:	76 05                	jbe    c00165e5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c00165e0:	b8 00 10 00 00       	mov    eax,0x1000
c00165e5:	31 d2                	xor    edx,edx
c00165e7:	52                   	push   edx
c00165e8:	50                   	push   eax
c00165e9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00165ec:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00165ef:	83 c4 20             	add    esp,0x20
c00165f2:	85 c0                	test   eax,eax
c00165f4:	74 1f                	je     c0016615 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c00165f6:	51                   	push   ecx
c00165f7:	51                   	push   ecx
c00165f8:	50                   	push   eax
c00165f9:	68 b9 19 02 c0       	push   0xc00219b9
c00165fe:	e8 dc 88 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0016603:	89 34 24             	mov    DWORD PTR [esp],esi
c0016606:	e8 8a 79 ff ff       	call   c000df95 <Virt::freeKernelVirtualPages(unsigned long)>
c001660b:	83 c4 10             	add    esp,0x10
c001660e:	31 c0                	xor    eax,eax
c0016610:	e9 7c 01 00 00       	jmp    c0016791 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0016615:	e8 1a 14 00 00       	call   c0017a34 <lockScheduler()>
c001661a:	e8 a9 5b ff ff       	call   c000c1c8 <Phys::allocatePage()>
c001661f:	6a 07                	push   0x7
c0016621:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c0016627:	56                   	push   esi
c0016628:	50                   	push   eax
c0016629:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001662f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016632:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c0016638:	e8 59 7c ff ff       	call   c000e296 <VAS::mapPage(unsigned long, unsigned long, int)>
c001663d:	83 c4 0c             	add    esp,0xc
c0016640:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016646:	6a 00                	push   0x0
c0016648:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001664e:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016651:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c0016657:	e8 98 7a ff ff       	call   c000e0f4 <VAS::mapOtherVASIn(bool, VAS*)>
c001665c:	58                   	pop    eax
c001665d:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c0016663:	5a                   	pop    edx
c0016664:	68 07 04 00 00       	push   0x407
c0016669:	53                   	push   ebx
c001666a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016670:	50                   	push   eax
c0016671:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016677:	6a 00                	push   0x0
c0016679:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001667e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016681:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016687:	e8 0a 83 ff ff       	call   c000e996 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001668c:	83 c4 1c             	add    esp,0x1c
c001668f:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c0016695:	68 00 10 00 00       	push   0x1000
c001669a:	50                   	push   eax
c001669b:	56                   	push   esi
c001669c:	e8 31 9f fe ff       	call   c00005d2 <memcpy>
c00166a1:	e8 90 13 00 00       	call   c0017a36 <unlockScheduler()>
c00166a6:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c00166ac:	83 c4 10             	add    esp,0x10
c00166af:	e9 f5 fe ff ff       	jmp    c00165a9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c00166b4:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00166b7:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c00166c1:	0f 86 bc 00 00 00    	jbe    c0016783 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c00166c7:	e8 68 13 00 00       	call   c0017a34 <lockScheduler()>
c00166cc:	51                   	push   ecx
c00166cd:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00166d3:	6a 00                	push   0x0
c00166d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166da:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00166dd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00166e3:	e8 0c 7a ff ff       	call   c000e0f4 <VAS::mapOtherVASIn(bool, VAS*)>
c00166e8:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c00166ee:	83 c4 10             	add    esp,0x10
c00166f1:	c1 e8 0c             	shr    eax,0xc
c00166f4:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c00166fe:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c0016704:	e8 bf 5a ff ff       	call   c000c1c8 <Phys::allocatePage()>
c0016709:	6a 07                	push   0x7
c001670b:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c0016711:	56                   	push   esi
c0016712:	50                   	push   eax
c0016713:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016719:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001671c:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c0016722:	e8 6f 7b ff ff       	call   c000e296 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016727:	58                   	pop    eax
c0016728:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001672e:	5a                   	pop    edx
c001672f:	68 07 04 00 00       	push   0x407
c0016734:	53                   	push   ebx
c0016735:	81 c3 00 10 00 00    	add    ebx,0x1000
c001673b:	50                   	push   eax
c001673c:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016742:	6a 00                	push   0x0
c0016744:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016749:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001674c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016752:	e8 3f 82 ff ff       	call   c000e996 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016757:	83 c4 1c             	add    esp,0x1c
c001675a:	68 00 10 00 00       	push   0x1000
c001675f:	6a 00                	push   0x0
c0016761:	56                   	push   esi
c0016762:	e8 a1 9e fe ff       	call   c0000608 <memset>
c0016767:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001676d:	83 c4 10             	add    esp,0x10
c0016770:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c0016776:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001677c:	77 86                	ja     c0016704 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001677e:	e8 b3 12 00 00       	call   c0017a36 <unlockScheduler()>
c0016783:	83 ec 0c             	sub    esp,0xc
c0016786:	56                   	push   esi
c0016787:	e8 09 78 ff ff       	call   c000df95 <Virt::freeKernelVirtualPages(unsigned long)>
c001678c:	83 c4 10             	add    esp,0x10
c001678f:	b0 01                	mov    al,0x1
c0016791:	8d 65 f4             	lea    esp,[ebp-0xc]
c0016794:	5b                   	pop    ebx
c0016795:	5e                   	pop    esi
c0016796:	5f                   	pop    edi
c0016797:	5d                   	pop    ebp
c0016798:	c3                   	ret    

c0016799 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016799:	55                   	push   ebp
c001679a:	57                   	push   edi
c001679b:	56                   	push   esi
c001679c:	53                   	push   ebx
c001679d:	83 ec 48             	sub    esp,0x48
c00167a0:	68 14 01 00 00       	push   0x114
c00167a5:	e8 46 86 ff ff       	call   c000edf0 <operator new(unsigned long)>
c00167aa:	83 c4 0c             	add    esp,0xc
c00167ad:	89 c6                	mov    esi,eax
c00167af:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00167b3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00167b7:	50                   	push   eax
c00167b8:	e8 51 8c ff ff       	call   c000f40e <File::File(char const*, Process*)>
c00167bd:	58                   	pop    eax
c00167be:	5a                   	pop    edx
c00167bf:	6a 01                	push   0x1
c00167c1:	56                   	push   esi
c00167c2:	e8 ab 8c ff ff       	call   c000f472 <File::open(FileOpenMode)>
c00167c7:	83 c4 10             	add    esp,0x10
c00167ca:	85 c0                	test   eax,eax
c00167cc:	0f 85 47 01 00 00    	jne    c0016919 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00167d2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00167da:	83 ec 0c             	sub    esp,0xc
c00167dd:	6a 34                	push   0x34
c00167df:	e8 3a 54 ff ff       	call   c000bc1e <malloc>
c00167e4:	89 c3                	mov    ebx,eax
c00167e6:	58                   	pop    eax
c00167e7:	8b 06                	mov    eax,DWORD PTR [esi]
c00167e9:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00167ed:	57                   	push   edi
c00167ee:	53                   	push   ebx
c00167ef:	6a 00                	push   0x0
c00167f1:	6a 34                	push   0x34
c00167f3:	56                   	push   esi
c00167f4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00167f7:	83 c4 20             	add    esp,0x20
c00167fa:	85 c0                	test   eax,eax
c00167fc:	0f 85 17 01 00 00    	jne    c0016919 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016802:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0016808:	0f 85 0b 01 00 00    	jne    c0016919 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001680e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016811:	85 c0                	test   eax,eax
c0016813:	0f 84 00 01 00 00    	je     c0016919 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016819:	31 d2                	xor    edx,edx
c001681b:	55                   	push   ebp
c001681c:	52                   	push   edx
c001681d:	50                   	push   eax
c001681e:	56                   	push   esi
c001681f:	e8 0c 8d ff ff       	call   c000f530 <File::seek(unsigned long long)>
c0016824:	83 c4 10             	add    esp,0x10
c0016827:	85 c0                	test   eax,eax
c0016829:	0f 85 ea 00 00 00    	jne    c0016919 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001682f:	83 ec 0c             	sub    esp,0xc
c0016832:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016835:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016839:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001683d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016841:	0f af c2             	imul   eax,edx
c0016844:	50                   	push   eax
c0016845:	e8 d4 53 ff ff       	call   c000bc1e <malloc>
c001684a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001684d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016851:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016853:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016857:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001685b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001685f:	0f af c2             	imul   eax,edx
c0016862:	99                   	cdq    
c0016863:	52                   	push   edx
c0016864:	50                   	push   eax
c0016865:	56                   	push   esi
c0016866:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016869:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001686c:	83 c4 20             	add    esp,0x20
c001686f:	85 c0                	test   eax,eax
c0016871:	0f 84 a2 00 00 00    	je     c0016919 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016877:	31 d2                	xor    edx,edx
c0016879:	51                   	push   ecx
c001687a:	52                   	push   edx
c001687b:	50                   	push   eax
c001687c:	56                   	push   esi
c001687d:	e8 ae 8c ff ff       	call   c000f530 <File::seek(unsigned long long)>
c0016882:	83 c4 10             	add    esp,0x10
c0016885:	85 c0                	test   eax,eax
c0016887:	0f 85 8c 00 00 00    	jne    c0016919 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001688d:	83 ec 0c             	sub    esp,0xc
c0016890:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016894:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016898:	31 ed                	xor    ebp,ebp
c001689a:	0f af c2             	imul   eax,edx
c001689d:	50                   	push   eax
c001689e:	e8 7b 53 ff ff       	call   c000bc1e <malloc>
c00168a3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00168a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00168aa:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00168ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168b0:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00168b4:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00168b8:	0f af c2             	imul   eax,edx
c00168bb:	99                   	cdq    
c00168bc:	52                   	push   edx
c00168bd:	50                   	push   eax
c00168be:	56                   	push   esi
c00168bf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00168c2:	83 c4 20             	add    esp,0x20
c00168c5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00168cd:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00168d1:	0f 86 80 00 00 00    	jbe    c0016957 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00168d7:	0f b7 fd             	movzx  edi,bp
c00168da:	c1 e7 05             	shl    edi,0x5
c00168dd:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00168e1:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00168e4:	75 6b                	jne    c0016951 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00168e6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00168e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00168ed:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00168f0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00168f4:	52                   	push   edx
c00168f5:	31 d2                	xor    edx,edx
c00168f7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00168fa:	52                   	push   edx
c00168fb:	50                   	push   eax
c00168fc:	56                   	push   esi
c00168fd:	e8 2e 8c ff ff       	call   c000f530 <File::seek(unsigned long long)>
c0016902:	83 c4 10             	add    esp,0x10
c0016905:	85 c0                	test   eax,eax
c0016907:	74 17                	je     c0016920 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016909:	83 ec 0c             	sub    esp,0xc
c001690c:	68 e4 19 02 c0       	push   0xc00219e4
c0016911:	e8 c9 85 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0016916:	83 c4 10             	add    esp,0x10
c0016919:	31 c0                	xor    eax,eax
c001691b:	e9 87 00 00 00       	jmp    c00169a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0016920:	83 ec 0c             	sub    esp,0xc
c0016923:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016926:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016929:	50                   	push   eax
c001692a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001692e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016932:	56                   	push   esi
c0016933:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0016937:	e8 e0 fb ff ff       	call   c001651c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001693c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016940:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0016944:	83 c4 20             	add    esp,0x20
c0016947:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001694b:	73 04                	jae    c0016951 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001694d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016951:	45                   	inc    ebp
c0016952:	e9 76 ff ff ff       	jmp    c00168cd <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0016957:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001695b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001695f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016963:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c0016969:	83 ec 0c             	sub    esp,0xc
c001696c:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c0016972:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016977:	05 00 10 00 00       	add    eax,0x1000
c001697c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001697f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016983:	e8 a6 52 ff ff       	call   c000bc2e <free>
c0016988:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001698b:	e8 9e 52 ff ff       	call   c000bc2e <free>
c0016990:	58                   	pop    eax
c0016991:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016995:	e8 94 52 ff ff       	call   c000bc2e <free>
c001699a:	89 34 24             	mov    DWORD PTR [esp],esi
c001699d:	e8 2e 8b ff ff       	call   c000f4d0 <File::close()>
c00169a2:	83 c4 10             	add    esp,0x10
c00169a5:	b0 01                	mov    al,0x1
c00169a7:	83 c4 3c             	add    esp,0x3c
c00169aa:	5b                   	pop    ebx
c00169ab:	5e                   	pop    esi
c00169ac:	5f                   	pop    edi
c00169ad:	5d                   	pop    ebp
c00169ae:	c3                   	ret    

c00169af <Thr::runtimeReferenceHelper()>:
c00169af:	83 ec 18             	sub    esp,0x18
c00169b2:	68 ec 19 02 c0       	push   0xc00219ec
c00169b7:	e8 23 85 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c00169bc:	fa                   	cli    
c00169bd:	83 c4 10             	add    esp,0x10
c00169c0:	eb fe                	jmp    c00169c0 <Thr::runtimeReferenceHelper()+0x11>

c00169c2 <Thr::getAddressOfKernelSymbol(char const*)>:
c00169c2:	57                   	push   edi
c00169c3:	56                   	push   esi
c00169c4:	53                   	push   ebx
c00169c5:	31 db                	xor    ebx,ebx
c00169c7:	39 1d 80 48 02 c0    	cmp    DWORD PTR ds:0xc0024880,ebx
c00169cd:	7e 3c                	jle    c0016a0b <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00169cf:	8b 34 9d 00 48 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdb800]
c00169d6:	31 ff                	xor    edi,edi
c00169d8:	39 3c 9d 00 47 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdb900],edi
c00169df:	7e 27                	jle    c0016a08 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00169e1:	50                   	push   eax
c00169e2:	50                   	push   eax
c00169e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169e7:	8b 06                	mov    eax,DWORD PTR [esi]
c00169e9:	03 04 9d 80 47 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdb880]
c00169f0:	50                   	push   eax
c00169f1:	e8 02 9d fe ff       	call   c00006f8 <strcmp>
c00169f6:	83 c4 10             	add    esp,0x10
c00169f9:	85 c0                	test   eax,eax
c00169fb:	75 05                	jne    c0016a02 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00169fd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016a00:	eb 0b                	jmp    c0016a0d <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016a02:	83 c6 10             	add    esi,0x10
c0016a05:	47                   	inc    edi
c0016a06:	eb d0                	jmp    c00169d8 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016a08:	43                   	inc    ebx
c0016a09:	eb bc                	jmp    c00169c7 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016a0b:	31 c0                	xor    eax,eax
c0016a0d:	5b                   	pop    ebx
c0016a0e:	5e                   	pop    esi
c0016a0f:	5f                   	pop    edi
c0016a10:	c3                   	ret    

c0016a11 <Thr::loadKernelSymbolTable(char const*)>:
c0016a11:	55                   	push   ebp
c0016a12:	57                   	push   edi
c0016a13:	56                   	push   esi
c0016a14:	53                   	push   ebx
c0016a15:	83 ec 68             	sub    esp,0x68
c0016a18:	8b 35 d4 48 02 c0    	mov    esi,DWORD PTR ds:0xc00248d4
c0016a1e:	68 14 01 00 00       	push   0x114
c0016a23:	e8 c8 83 ff ff       	call   c000edf0 <operator new(unsigned long)>
c0016a28:	83 c4 0c             	add    esp,0xc
c0016a2b:	89 c3                	mov    ebx,eax
c0016a2d:	56                   	push   esi
c0016a2e:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016a32:	50                   	push   eax
c0016a33:	e8 d6 89 ff ff       	call   c000f40e <File::File(char const*, Process*)>
c0016a38:	5e                   	pop    esi
c0016a39:	5f                   	pop    edi
c0016a3a:	6a 01                	push   0x1
c0016a3c:	53                   	push   ebx
c0016a3d:	e8 30 8a ff ff       	call   c000f472 <File::open(FileOpenMode)>
c0016a42:	83 c4 10             	add    esp,0x10
c0016a45:	31 d2                	xor    edx,edx
c0016a47:	85 c0                	test   eax,eax
c0016a49:	0f 85 79 02 00 00    	jne    c0016cc8 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0016a4f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016a57:	83 ec 0c             	sub    esp,0xc
c0016a5a:	6a 34                	push   0x34
c0016a5c:	e8 bd 51 ff ff       	call   c000bc1e <malloc>
c0016a61:	59                   	pop    ecx
c0016a62:	89 c7                	mov    edi,eax
c0016a64:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016a68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a6a:	56                   	push   esi
c0016a6b:	57                   	push   edi
c0016a6c:	6a 00                	push   0x0
c0016a6e:	6a 34                	push   0x34
c0016a70:	53                   	push   ebx
c0016a71:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016a74:	83 c4 20             	add    esp,0x20
c0016a77:	85 c0                	test   eax,eax
c0016a79:	74 17                	je     c0016a92 <Thr::loadKernelSymbolTable(char const*)+0x81>
c0016a7b:	83 ec 0c             	sub    esp,0xc
c0016a7e:	68 0e 1a 02 c0       	push   0xc0021a0e
c0016a83:	e8 ec e0 ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c0016a88:	83 c4 10             	add    esp,0x10
c0016a8b:	31 d2                	xor    edx,edx
c0016a8d:	e9 36 02 00 00       	jmp    c0016cc8 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0016a92:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016a98:	75 e1                	jne    c0016a7b <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0016a9a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016a9d:	85 c0                	test   eax,eax
c0016a9f:	74 da                	je     c0016a7b <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0016aa1:	52                   	push   edx
c0016aa2:	31 d2                	xor    edx,edx
c0016aa4:	52                   	push   edx
c0016aa5:	50                   	push   eax
c0016aa6:	53                   	push   ebx
c0016aa7:	e8 84 8a ff ff       	call   c000f530 <File::seek(unsigned long long)>
c0016aac:	83 c4 10             	add    esp,0x10
c0016aaf:	85 c0                	test   eax,eax
c0016ab1:	75 c8                	jne    c0016a7b <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0016ab3:	83 ec 0c             	sub    esp,0xc
c0016ab6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016aba:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016abe:	31 ed                	xor    ebp,ebp
c0016ac0:	0f af c2             	imul   eax,edx
c0016ac3:	50                   	push   eax
c0016ac4:	e8 55 51 ff ff       	call   c000bc1e <malloc>
c0016ac9:	89 34 24             	mov    DWORD PTR [esp],esi
c0016acc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016ad0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016ad2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016ad6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016ada:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016ade:	0f af c2             	imul   eax,edx
c0016ae1:	99                   	cdq    
c0016ae2:	52                   	push   edx
c0016ae3:	50                   	push   eax
c0016ae4:	53                   	push   ebx
c0016ae5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016ae8:	83 c4 20             	add    esp,0x20
c0016aeb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016af3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016afb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016b03:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016b0b:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0016b0f:	0f 86 aa 00 00 00    	jbe    c0016bbf <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c0016b15:	0f b7 f5             	movzx  esi,bp
c0016b18:	6b f6 28             	imul   esi,esi,0x28
c0016b1b:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0016b1f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016b22:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016b26:	50                   	push   eax
c0016b27:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016b2b:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016b2f:	8b 16                	mov    edx,DWORD PTR [esi]
c0016b31:	6b c0 28             	imul   eax,eax,0x28
c0016b34:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016b38:	89 d0                	mov    eax,edx
c0016b3a:	31 d2                	xor    edx,edx
c0016b3c:	52                   	push   edx
c0016b3d:	50                   	push   eax
c0016b3e:	53                   	push   ebx
c0016b3f:	e8 ec 89 ff ff       	call   c000f530 <File::seek(unsigned long long)>
c0016b44:	83 c4 0c             	add    esp,0xc
c0016b47:	6a 20                	push   0x20
c0016b49:	6a 00                	push   0x0
c0016b4b:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016b4f:	52                   	push   edx
c0016b50:	e8 b3 9a fe ff       	call   c0000608 <memset>
c0016b55:	58                   	pop    eax
c0016b56:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b58:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016b5c:	51                   	push   ecx
c0016b5d:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016b61:	52                   	push   edx
c0016b62:	6a 00                	push   0x0
c0016b64:	6a 1f                	push   0x1f
c0016b66:	53                   	push   ebx
c0016b67:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016b6a:	83 c4 18             	add    esp,0x18
c0016b6d:	68 25 1a 02 c0       	push   0xc0021a25
c0016b72:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016b76:	52                   	push   edx
c0016b77:	e8 7c 9b fe ff       	call   c00006f8 <strcmp>
c0016b7c:	83 c4 10             	add    esp,0x10
c0016b7f:	85 c0                	test   eax,eax
c0016b81:	75 0f                	jne    c0016b92 <Thr::loadKernelSymbolTable(char const*)+0x181>
c0016b83:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016b86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016b8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b92:	50                   	push   eax
c0016b93:	50                   	push   eax
c0016b94:	68 2d 1a 02 c0       	push   0xc0021a2d
c0016b99:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016b9d:	50                   	push   eax
c0016b9e:	e8 55 9b fe ff       	call   c00006f8 <strcmp>
c0016ba3:	83 c4 10             	add    esp,0x10
c0016ba6:	85 c0                	test   eax,eax
c0016ba8:	75 0f                	jne    c0016bb9 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0016baa:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016bad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016bb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bb5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016bb9:	45                   	inc    ebp
c0016bba:	e9 4c ff ff ff       	jmp    c0016b0b <Thr::loadKernelSymbolTable(char const*)+0xfa>
c0016bbf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016bc4:	75 10                	jne    c0016bd6 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c0016bc6:	83 ec 0c             	sub    esp,0xc
c0016bc9:	68 35 1a 02 c0       	push   0xc0021a35
c0016bce:	e8 a1 df ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c0016bd3:	83 c4 10             	add    esp,0x10
c0016bd6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016bdb:	75 10                	jne    c0016bed <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c0016bdd:	83 ec 0c             	sub    esp,0xc
c0016be0:	68 35 1a 02 c0       	push   0xc0021a35
c0016be5:	e8 8a df ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c0016bea:	83 c4 10             	add    esp,0x10
c0016bed:	31 d2                	xor    edx,edx
c0016bef:	50                   	push   eax
c0016bf0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016bf4:	52                   	push   edx
c0016bf5:	50                   	push   eax
c0016bf6:	53                   	push   ebx
c0016bf7:	e8 34 89 ff ff       	call   c000f530 <File::seek(unsigned long long)>
c0016bfc:	5a                   	pop    edx
c0016bfd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016c01:	e8 18 50 ff ff       	call   c000bc1e <malloc>
c0016c06:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016c0e:	89 c1                	mov    ecx,eax
c0016c10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c14:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016c18:	5e                   	pop    esi
c0016c19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c1b:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0016c1f:	55                   	push   ebp
c0016c20:	51                   	push   ecx
c0016c21:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0016c25:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016c29:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016c2d:	53                   	push   ebx
c0016c2e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016c31:	83 c4 14             	add    esp,0x14
c0016c34:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016c38:	e8 e1 4f ff ff       	call   c000bc1e <malloc>
c0016c3d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016c40:	89 c6                	mov    esi,eax
c0016c42:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c44:	56                   	push   esi
c0016c45:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016c49:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016c4d:	53                   	push   ebx
c0016c4e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016c51:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c55:	8b 15 80 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024880
c0016c5b:	83 c4 1c             	add    esp,0x1c
c0016c5e:	c1 e8 04             	shr    eax,0x4
c0016c61:	89 04 95 00 47 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb900],eax
c0016c68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c6c:	31 d2                	xor    edx,edx
c0016c6e:	52                   	push   edx
c0016c6f:	50                   	push   eax
c0016c70:	53                   	push   ebx
c0016c71:	e8 ba 88 ff ff       	call   c000f530 <File::seek(unsigned long long)>
c0016c76:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016c79:	31 d2                	xor    edx,edx
c0016c7b:	56                   	push   esi
c0016c7c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016c80:	52                   	push   edx
c0016c81:	50                   	push   eax
c0016c82:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c84:	53                   	push   ebx
c0016c85:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016c88:	83 c4 14             	add    esp,0x14
c0016c8b:	53                   	push   ebx
c0016c8c:	e8 3f 88 ff ff       	call   c000f4d0 <File::close()>
c0016c91:	5d                   	pop    ebp
c0016c92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c96:	e8 93 4f ff ff       	call   c000bc2e <free>
c0016c9b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016c9e:	e8 8b 4f ff ff       	call   c000bc2e <free>
c0016ca3:	a1 80 48 02 c0       	mov    eax,ds:0xc0024880
c0016ca8:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016cac:	8d 50 01             	lea    edx,[eax+0x1]
c0016caf:	89 0c 85 00 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb800],ecx
c0016cb6:	89 15 80 48 02 c0    	mov    DWORD PTR ds:0xc0024880,edx
c0016cbc:	89 34 85 80 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb880],esi
c0016cc3:	83 c4 10             	add    esp,0x10
c0016cc6:	b2 01                	mov    dl,0x1
c0016cc8:	83 c4 5c             	add    esp,0x5c
c0016ccb:	88 d0                	mov    al,dl
c0016ccd:	5b                   	pop    ebx
c0016cce:	5e                   	pop    esi
c0016ccf:	5f                   	pop    edi
c0016cd0:	5d                   	pop    ebp
c0016cd1:	c3                   	ret    

c0016cd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0016cd2:	55                   	push   ebp
c0016cd3:	57                   	push   edi
c0016cd4:	56                   	push   esi
c0016cd5:	53                   	push   ebx
c0016cd6:	81 ec 68 03 00 00    	sub    esp,0x368
c0016cdc:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0016ce3:	8b 1d d4 48 02 c0    	mov    ebx,DWORD PTR ds:0xc00248d4
c0016ce9:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0016ced:	68 14 01 00 00       	push   0x114
c0016cf2:	e8 f9 80 ff ff       	call   c000edf0 <operator new(unsigned long)>
c0016cf7:	83 c4 0c             	add    esp,0xc
c0016cfa:	89 c5                	mov    ebp,eax
c0016cfc:	53                   	push   ebx
c0016cfd:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0016d04:	50                   	push   eax
c0016d05:	e8 04 87 ff ff       	call   c000f40e <File::File(char const*, Process*)>
c0016d0a:	58                   	pop    eax
c0016d0b:	5a                   	pop    edx
c0016d0c:	6a 01                	push   0x1
c0016d0e:	55                   	push   ebp
c0016d0f:	e8 5e 87 ff ff       	call   c000f472 <File::open(FileOpenMode)>
c0016d14:	83 c4 10             	add    esp,0x10
c0016d17:	85 c0                	test   eax,eax
c0016d19:	0f 85 f2 06 00 00    	jne    c0017411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016d1f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016d27:	83 ec 0c             	sub    esp,0xc
c0016d2a:	6a 34                	push   0x34
c0016d2c:	e8 ed 4e ff ff       	call   c000bc1e <malloc>
c0016d31:	89 c7                	mov    edi,eax
c0016d33:	58                   	pop    eax
c0016d34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016d37:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016d3b:	53                   	push   ebx
c0016d3c:	57                   	push   edi
c0016d3d:	6a 00                	push   0x0
c0016d3f:	6a 34                	push   0x34
c0016d41:	55                   	push   ebp
c0016d42:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016d45:	83 c4 20             	add    esp,0x20
c0016d48:	85 c0                	test   eax,eax
c0016d4a:	0f 85 c1 06 00 00    	jne    c0017411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016d50:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016d56:	0f 85 b5 06 00 00    	jne    c0017411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016d5c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016d5f:	85 c0                	test   eax,eax
c0016d61:	0f 84 aa 06 00 00    	je     c0017411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016d67:	31 d2                	xor    edx,edx
c0016d69:	56                   	push   esi
c0016d6a:	52                   	push   edx
c0016d6b:	50                   	push   eax
c0016d6c:	55                   	push   ebp
c0016d6d:	e8 be 87 ff ff       	call   c000f530 <File::seek(unsigned long long)>
c0016d72:	83 c4 10             	add    esp,0x10
c0016d75:	85 c0                	test   eax,eax
c0016d77:	0f 85 94 06 00 00    	jne    c0017411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016d7d:	83 ec 0c             	sub    esp,0xc
c0016d80:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016d83:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016d87:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0016d8b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016d8f:	0f af c2             	imul   eax,edx
c0016d92:	50                   	push   eax
c0016d93:	e8 86 4e ff ff       	call   c000bc1e <malloc>
c0016d98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016d9b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016d9f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016da2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016da6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016daa:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016dae:	0f af c2             	imul   eax,edx
c0016db1:	99                   	cdq    
c0016db2:	52                   	push   edx
c0016db3:	50                   	push   eax
c0016db4:	55                   	push   ebp
c0016db5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016db8:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016dbb:	83 c4 20             	add    esp,0x20
c0016dbe:	85 c0                	test   eax,eax
c0016dc0:	0f 84 4b 06 00 00    	je     c0017411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016dc6:	31 d2                	xor    edx,edx
c0016dc8:	51                   	push   ecx
c0016dc9:	52                   	push   edx
c0016dca:	50                   	push   eax
c0016dcb:	55                   	push   ebp
c0016dcc:	e8 5f 87 ff ff       	call   c000f530 <File::seek(unsigned long long)>
c0016dd1:	83 c4 10             	add    esp,0x10
c0016dd4:	85 c0                	test   eax,eax
c0016dd6:	0f 85 35 06 00 00    	jne    c0017411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016ddc:	83 ec 0c             	sub    esp,0xc
c0016ddf:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016de3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016de7:	31 f6                	xor    esi,esi
c0016de9:	0f af c2             	imul   eax,edx
c0016dec:	50                   	push   eax
c0016ded:	e8 2c 4e ff ff       	call   c000bc1e <malloc>
c0016df2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016df5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016df9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016dfc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016e00:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016e04:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016e08:	0f af c2             	imul   eax,edx
c0016e0b:	99                   	cdq    
c0016e0c:	52                   	push   edx
c0016e0d:	50                   	push   eax
c0016e0e:	55                   	push   ebp
c0016e0f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e12:	83 c4 20             	add    esp,0x20
c0016e15:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0016e19:	0f 86 8a 00 00 00    	jbe    c0016ea9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0016e1f:	0f b7 de             	movzx  ebx,si
c0016e22:	c1 e3 05             	shl    ebx,0x5
c0016e25:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0016e29:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016e2c:	75 75                	jne    c0016ea3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016e2e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e31:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e35:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016e38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016e3c:	52                   	push   edx
c0016e3d:	31 d2                	xor    edx,edx
c0016e3f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016e42:	52                   	push   edx
c0016e43:	50                   	push   eax
c0016e44:	55                   	push   ebp
c0016e45:	e8 e6 86 ff ff       	call   c000f530 <File::seek(unsigned long long)>
c0016e4a:	83 c4 10             	add    esp,0x10
c0016e4d:	85 c0                	test   eax,eax
c0016e4f:	0f 85 bc 05 00 00    	jne    c0017411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016e55:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0016e5c:	31 d2                	xor    edx,edx
c0016e5e:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0016e62:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016e65:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0016e69:	83 ec 0c             	sub    esp,0xc
c0016e6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016e70:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016e77:	50                   	push   eax
c0016e78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016e7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016e80:	52                   	push   edx
c0016e81:	50                   	push   eax
c0016e82:	55                   	push   ebp
c0016e83:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e86:	83 c4 1c             	add    esp,0x1c
c0016e89:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016e8c:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0016e8f:	50                   	push   eax
c0016e90:	6a 00                	push   0x0
c0016e92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e96:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0016e9a:	50                   	push   eax
c0016e9b:	e8 68 97 fe ff       	call   c0000608 <memset>
c0016ea0:	83 c4 10             	add    esp,0x10
c0016ea3:	46                   	inc    esi
c0016ea4:	e9 6c ff ff ff       	jmp    c0016e15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0016ea9:	31 db                	xor    ebx,ebx
c0016eab:	50                   	push   eax
c0016eac:	68 00 01 00 00       	push   0x100
c0016eb1:	6a 00                	push   0x0
c0016eb3:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016eb7:	50                   	push   eax
c0016eb8:	e8 4b 97 fe ff       	call   c0000608 <memset>
c0016ebd:	83 c4 0c             	add    esp,0xc
c0016ec0:	68 00 01 00 00       	push   0x100
c0016ec5:	6a 00                	push   0x0
c0016ec7:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0016ece:	50                   	push   eax
c0016ecf:	e8 34 97 fe ff       	call   c0000608 <memset>
c0016ed4:	83 c4 10             	add    esp,0x10
c0016ed7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016edf:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016ee7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016eef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016ef7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016eff:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0016f03:	0f 86 30 01 00 00    	jbe    c0017039 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0016f09:	0f b7 f3             	movzx  esi,bx
c0016f0c:	6b f6 28             	imul   esi,esi,0x28
c0016f0f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0016f13:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016f16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f1a:	50                   	push   eax
c0016f1b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016f1f:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0016f23:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f25:	6b d2 28             	imul   edx,edx,0x28
c0016f28:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0016f2c:	31 d2                	xor    edx,edx
c0016f2e:	52                   	push   edx
c0016f2f:	50                   	push   eax
c0016f30:	55                   	push   ebp
c0016f31:	e8 fa 85 ff ff       	call   c000f530 <File::seek(unsigned long long)>
c0016f36:	83 c4 0c             	add    esp,0xc
c0016f39:	6a 20                	push   0x20
c0016f3b:	6a 00                	push   0x0
c0016f3d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016f44:	51                   	push   ecx
c0016f45:	e8 be 96 fe ff       	call   c0000608 <memset>
c0016f4a:	58                   	pop    eax
c0016f4b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016f4e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0016f52:	52                   	push   edx
c0016f53:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0016f5a:	51                   	push   ecx
c0016f5b:	6a 00                	push   0x0
c0016f5d:	6a 1f                	push   0x1f
c0016f5f:	55                   	push   ebp
c0016f60:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f63:	83 c4 1c             	add    esp,0x1c
c0016f66:	6a 09                	push   0x9
c0016f68:	68 4f 1a 02 c0       	push   0xc0021a4f
c0016f6d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016f74:	51                   	push   ecx
c0016f75:	e8 f5 95 fe ff       	call   c000056f <memcmp>
c0016f7a:	83 c4 10             	add    esp,0x10
c0016f7d:	85 c0                	test   eax,eax
c0016f7f:	75 21                	jne    c0016fa2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0016f81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f85:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016f89:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016f8d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0016f91:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016f94:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0016f9b:	89 c8                	mov    eax,ecx
c0016f9d:	40                   	inc    eax
c0016f9e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016fa2:	50                   	push   eax
c0016fa3:	6a 09                	push   0x9
c0016fa5:	68 59 1a 02 c0       	push   0xc0021a59
c0016faa:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016fb1:	50                   	push   eax
c0016fb2:	e8 b8 95 fe ff       	call   c000056f <memcmp>
c0016fb7:	83 c4 10             	add    esp,0x10
c0016fba:	85 c0                	test   eax,eax
c0016fbc:	75 21                	jne    c0016fdf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0016fbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016fc2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016fc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016fca:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0016fce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016fd1:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0016fd8:	89 c8                	mov    eax,ecx
c0016fda:	40                   	inc    eax
c0016fdb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016fdf:	50                   	push   eax
c0016fe0:	50                   	push   eax
c0016fe1:	68 25 1a 02 c0       	push   0xc0021a25
c0016fe6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016fed:	50                   	push   eax
c0016fee:	e8 05 97 fe ff       	call   c00006f8 <strcmp>
c0016ff3:	83 c4 10             	add    esp,0x10
c0016ff6:	85 c0                	test   eax,eax
c0016ff8:	75 0f                	jne    c0017009 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0016ffa:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016ffd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017001:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017005:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017009:	50                   	push   eax
c001700a:	50                   	push   eax
c001700b:	68 2d 1a 02 c0       	push   0xc0021a2d
c0017010:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017017:	50                   	push   eax
c0017018:	e8 db 96 fe ff       	call   c00006f8 <strcmp>
c001701d:	83 c4 10             	add    esp,0x10
c0017020:	85 c0                	test   eax,eax
c0017022:	75 0f                	jne    c0017033 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0017024:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017027:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001702b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001702f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017033:	43                   	inc    ebx
c0017034:	e9 c6 fe ff ff       	jmp    c0016eff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0017039:	31 d2                	xor    edx,edx
c001703b:	50                   	push   eax
c001703c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017040:	52                   	push   edx
c0017041:	50                   	push   eax
c0017042:	55                   	push   ebp
c0017043:	e8 e8 84 ff ff       	call   c000f530 <File::seek(unsigned long long)>
c0017048:	5a                   	pop    edx
c0017049:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001704d:	e8 cc 4b ff ff       	call   c000bc1e <malloc>
c0017052:	31 d2                	xor    edx,edx
c0017054:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017058:	59                   	pop    ecx
c0017059:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001705c:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017060:	53                   	push   ebx
c0017061:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017065:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017069:	52                   	push   edx
c001706a:	50                   	push   eax
c001706b:	55                   	push   ebp
c001706c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001706f:	83 c4 14             	add    esp,0x14
c0017072:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017076:	e8 a3 4b ff ff       	call   c000bc1e <malloc>
c001707b:	31 d2                	xor    edx,edx
c001707d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017081:	83 c4 0c             	add    esp,0xc
c0017084:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017088:	52                   	push   edx
c0017089:	50                   	push   eax
c001708a:	55                   	push   ebp
c001708b:	e8 a0 84 ff ff       	call   c000f530 <File::seek(unsigned long long)>
c0017090:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017093:	31 d2                	xor    edx,edx
c0017095:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017099:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001709c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170a0:	52                   	push   edx
c00170a1:	50                   	push   eax
c00170a2:	55                   	push   ebp
c00170a3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00170a6:	83 c4 20             	add    esp,0x20
c00170a9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00170b1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00170b5:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c00170b9:	0f 84 56 03 00 00    	je     c0017415 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c00170bf:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c00170c6:	31 d2                	xor    edx,edx
c00170c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00170cc:	c1 e8 03             	shr    eax,0x3
c00170cf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00170d3:	50                   	push   eax
c00170d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170d8:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00170dc:	52                   	push   edx
c00170dd:	50                   	push   eax
c00170de:	55                   	push   ebp
c00170df:	e8 4c 84 ff ff       	call   c000f530 <File::seek(unsigned long long)>
c00170e4:	58                   	pop    eax
c00170e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00170e9:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00170f0:	e8 29 4b ff ff       	call   c000bc1e <malloc>
c00170f5:	31 d2                	xor    edx,edx
c00170f7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00170fb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00170fe:	58                   	pop    eax
c00170ff:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017103:	50                   	push   eax
c0017104:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017108:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001710c:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017113:	52                   	push   edx
c0017114:	50                   	push   eax
c0017115:	55                   	push   ebp
c0017116:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017119:	83 c4 20             	add    esp,0x20
c001711c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017124:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0017128:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001712c:	0f 8d c7 02 00 00    	jge    c00173f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c0017132:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017136:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001713a:	31 db                	xor    ebx,ebx
c001713c:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001713f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017143:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017147:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001714b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001714f:	c1 e8 08             	shr    eax,0x8
c0017152:	89 c6                	mov    esi,eax
c0017154:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017158:	c1 e6 04             	shl    esi,0x4
c001715b:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001715f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017162:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017166:	85 c0                	test   eax,eax
c0017168:	0f 85 17 01 00 00    	jne    c0017285 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001716e:	83 ec 0c             	sub    esp,0xc
c0017171:	b3 01                	mov    bl,0x1
c0017173:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017177:	03 06                	add    eax,DWORD PTR [esi]
c0017179:	50                   	push   eax
c001717a:	e8 43 f8 ff ff       	call   c00169c2 <Thr::getAddressOfKernelSymbol(char const*)>
c001717f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017183:	83 c4 10             	add    esp,0x10
c0017186:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001718b:	0f 85 f4 00 00 00    	jne    c0017285 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0017191:	50                   	push   eax
c0017192:	50                   	push   eax
c0017193:	68 63 1a 02 c0       	push   0xc0021a63
c0017198:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001719c:	03 06                	add    eax,DWORD PTR [esi]
c001719e:	50                   	push   eax
c001719f:	e8 54 95 fe ff       	call   c00006f8 <strcmp>
c00171a4:	83 c4 10             	add    esp,0x10
c00171a7:	85 c0                	test   eax,eax
c00171a9:	75 0a                	jne    c00171b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c00171ab:	b8 cc e5 01 c0       	mov    eax,0xc001e5cc
c00171b0:	e9 ca 00 00 00       	jmp    c001727f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00171b5:	50                   	push   eax
c00171b6:	50                   	push   eax
c00171b7:	68 6d 1a 02 c0       	push   0xc0021a6d
c00171bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00171c0:	03 06                	add    eax,DWORD PTR [esi]
c00171c2:	50                   	push   eax
c00171c3:	e8 30 95 fe ff       	call   c00006f8 <strcmp>
c00171c8:	83 c4 10             	add    esp,0x10
c00171cb:	85 c0                	test   eax,eax
c00171cd:	75 0a                	jne    c00171d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c00171cf:	b8 00 e3 01 c0       	mov    eax,0xc001e300
c00171d4:	e9 a6 00 00 00       	jmp    c001727f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00171d9:	53                   	push   ebx
c00171da:	53                   	push   ebx
c00171db:	68 76 1a 02 c0       	push   0xc0021a76
c00171e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00171e4:	03 06                	add    eax,DWORD PTR [esi]
c00171e6:	50                   	push   eax
c00171e7:	e8 0c 95 fe ff       	call   c00006f8 <strcmp>
c00171ec:	83 c4 10             	add    esp,0x10
c00171ef:	85 c0                	test   eax,eax
c00171f1:	75 0a                	jne    c00171fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c00171f3:	b8 cc e6 01 c0       	mov    eax,0xc001e6cc
c00171f8:	e9 82 00 00 00       	jmp    c001727f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00171fd:	51                   	push   ecx
c00171fe:	51                   	push   ecx
c00171ff:	68 80 1a 02 c0       	push   0xc0021a80
c0017204:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017208:	03 06                	add    eax,DWORD PTR [esi]
c001720a:	50                   	push   eax
c001720b:	e8 e8 94 fe ff       	call   c00006f8 <strcmp>
c0017210:	83 c4 10             	add    esp,0x10
c0017213:	85 c0                	test   eax,eax
c0017215:	74 63                	je     c001727a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c0017217:	50                   	push   eax
c0017218:	50                   	push   eax
c0017219:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001721d:	03 06                	add    eax,DWORD PTR [esi]
c001721f:	50                   	push   eax
c0017220:	68 89 1a 02 c0       	push   0xc0021a89
c0017225:	e8 b5 7c ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001722a:	58                   	pop    eax
c001722b:	5a                   	pop    edx
c001722c:	68 a3 1a 02 c0       	push   0xc0021aa3
c0017231:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c0017238:	53                   	push   ebx
c0017239:	e8 69 94 fe ff       	call   c00006a7 <strcpy>
c001723e:	59                   	pop    ecx
c001723f:	58                   	pop    eax
c0017240:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017244:	03 06                	add    eax,DWORD PTR [esi]
c0017246:	50                   	push   eax
c0017247:	53                   	push   ebx
c0017248:	e8 11 95 fe ff       	call   c000075e <strcat>
c001724d:	58                   	pop    eax
c001724e:	5a                   	pop    edx
c001724f:	68 39 1b 02 c0       	push   0xc0021b39
c0017254:	53                   	push   ebx
c0017255:	e8 04 95 fe ff       	call   c000075e <strcat>
c001725a:	83 c4 10             	add    esp,0x10
c001725d:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017262:	0f 84 4b 01 00 00    	je     c00173b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c0017268:	83 ec 0c             	sub    esp,0xc
c001726b:	53                   	push   ebx
c001726c:	e8 03 d9 ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c0017271:	83 c4 10             	add    esp,0x10
c0017274:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c0017278:	eb 0b                	jmp    c0017285 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001727a:	b8 4c e4 01 c0       	mov    eax,0xc001e44c
c001727f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017283:	b3 01                	mov    bl,0x1
c0017285:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001728a:	0f 85 80 00 00 00    	jne    c0017310 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c0017290:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0017297:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001729b:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001729f:	01 ce                	add    esi,ecx
c00172a1:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00172a9:	8b 06                	mov    eax,DWORD PTR [esi]
c00172ab:	0f 94 c2             	sete   dl
c00172ae:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00172b6:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c00172bb:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c00172bf:	84 db                	test   bl,bl
c00172c1:	74 31                	je     c00172f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c00172c3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00172c7:	01 c3                	add    ebx,eax
c00172c9:	84 d2                	test   dl,dl
c00172cb:	75 0a                	jne    c00172d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c00172cd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00172d1:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00172d5:	76 32                	jbe    c0017309 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c00172d7:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00172dc:	0f 84 d1 00 00 00    	je     c00173b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c00172e2:	83 ec 0c             	sub    esp,0xc
c00172e5:	68 ba 1a 02 c0       	push   0xc0021aba
c00172ea:	e8 85 d8 ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c00172ef:	83 c4 10             	add    esp,0x10
c00172f2:	eb 15                	jmp    c0017309 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c00172f4:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c00172f7:	84 d2                	test   dl,dl
c00172f9:	75 0e                	jne    c0017309 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c00172fb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00172ff:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0017303:	77 04                	ja     c0017309 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c0017305:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017309:	89 1e                	mov    DWORD PTR [esi],ebx
c001730b:	e9 e0 00 00 00       	jmp    c00173f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c0017310:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0017315:	75 6e                	jne    c0017385 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c0017317:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001731e:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c0017322:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c0017326:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001732e:	74 17                	je     c0017347 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0017330:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0017338:	74 0d                	je     c0017347 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001733a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001733e:	83 e8 04             	sub    eax,0x4
c0017341:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0017345:	76 17                	jbe    c001735e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c0017347:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001734c:	74 65                	je     c00173b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001734e:	83 ec 0c             	sub    esp,0xc
c0017351:	68 d6 1a 02 c0       	push   0xc0021ad6
c0017356:	e8 19 d8 ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c001735b:	83 c4 10             	add    esp,0x10
c001735e:	8b 16                	mov    edx,DWORD PTR [esi]
c0017360:	84 db                	test   bl,bl
c0017362:	74 13                	je     c0017377 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c0017364:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017368:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001736f:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0017373:	01 d0                	add    eax,edx
c0017375:	eb 06                	jmp    c001737d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c0017377:	89 d0                	mov    eax,edx
c0017379:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001737d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017381:	89 06                	mov    DWORD PTR [esi],eax
c0017383:	eb 6b                	jmp    c00173f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c0017385:	50                   	push   eax
c0017386:	50                   	push   eax
c0017387:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001738c:	50                   	push   eax
c001738d:	68 f2 1a 02 c0       	push   0xc0021af2
c0017392:	e8 48 7b ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0017397:	83 c4 10             	add    esp,0x10
c001739a:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001739f:	74 12                	je     c00173b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c00173a1:	83 ec 0c             	sub    esp,0xc
c00173a4:	68 fd 1a 02 c0       	push   0xc0021afd
c00173a9:	e8 c6 d7 ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c00173ae:	83 c4 10             	add    esp,0x10
c00173b1:	eb 3d                	jmp    c00173f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c00173b3:	83 ec 0c             	sub    esp,0xc
c00173b6:	55                   	push   ebp
c00173b7:	e8 14 81 ff ff       	call   c000f4d0 <File::close()>
c00173bc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00173bf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00173c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00173c5:	59                   	pop    ecx
c00173c6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00173ca:	e8 5f 48 ff ff       	call   c000bc2e <free>
c00173cf:	5b                   	pop    ebx
c00173d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173d4:	e8 55 48 ff ff       	call   c000bc2e <free>
c00173d9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00173dc:	e8 4d 48 ff ff       	call   c000bc2e <free>
c00173e1:	5e                   	pop    esi
c00173e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00173e6:	e8 43 48 ff ff       	call   c000bc2e <free>
c00173eb:	83 c4 10             	add    esp,0x10
c00173ee:	eb 21                	jmp    c0017411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c00173f0:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00173f4:	e9 2b fd ff ff       	jmp    c0017124 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c00173f9:	83 ec 0c             	sub    esp,0xc
c00173fc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017400:	e8 29 48 ff ff       	call   c000bc2e <free>
c0017405:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c0017409:	83 c4 10             	add    esp,0x10
c001740c:	e9 a0 fc ff ff       	jmp    c00170b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0017411:	31 c0                	xor    eax,eax
c0017413:	eb 33                	jmp    c0017448 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c0017415:	83 ec 0c             	sub    esp,0xc
c0017418:	55                   	push   ebp
c0017419:	e8 b2 80 ff ff       	call   c000f4d0 <File::close()>
c001741e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017421:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017424:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017427:	58                   	pop    eax
c0017428:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001742c:	e8 fd 47 ff ff       	call   c000bc2e <free>
c0017431:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017434:	e8 f5 47 ff ff       	call   c000bc2e <free>
c0017439:	5a                   	pop    edx
c001743a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001743e:	e8 eb 47 ff ff       	call   c000bc2e <free>
c0017443:	83 c4 10             	add    esp,0x10
c0017446:	b0 01                	mov    al,0x1
c0017448:	81 c4 5c 03 00 00    	add    esp,0x35c
c001744e:	5b                   	pop    ebx
c001744f:	5e                   	pop    esi
c0017450:	5f                   	pop    edi
c0017451:	5d                   	pop    ebp
c0017452:	c3                   	ret    

c0017453 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017453:	56                   	push   esi
c0017454:	31 d2                	xor    edx,edx
c0017456:	53                   	push   ebx
c0017457:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c001745d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017461:	39 d3                	cmp    ebx,edx
c0017463:	7e 1b                	jle    c0017480 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017465:	8b 04 95 00 43 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbd00]
c001746c:	39 c8                	cmp    eax,ecx
c001746e:	77 0d                	ja     c001747d <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017470:	8b 34 95 00 41 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdbf00]
c0017477:	01 c6                	add    esi,eax
c0017479:	39 ce                	cmp    esi,ecx
c001747b:	77 05                	ja     c0017482 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001747d:	42                   	inc    edx
c001747e:	eb e1                	jmp    c0017461 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0017480:	31 c0                	xor    eax,eax
c0017482:	5b                   	pop    ebx
c0017483:	5e                   	pop    esi
c0017484:	c3                   	ret    

c0017485 <Thr::getDriverNameFromAddress(unsigned long)>:
c0017485:	53                   	push   ebx
c0017486:	31 c0                	xor    eax,eax
c0017488:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001748c:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c0017492:	39 c3                	cmp    ebx,eax
c0017494:	7e 22                	jle    c00174b8 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0017496:	8b 14 85 00 43 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbd00]
c001749d:	39 ca                	cmp    edx,ecx
c001749f:	77 14                	ja     c00174b5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00174a1:	03 14 85 00 41 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdbf00]
c00174a8:	39 ca                	cmp    edx,ecx
c00174aa:	76 09                	jbe    c00174b5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00174ac:	8b 04 85 00 45 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbb00]
c00174b3:	eb 05                	jmp    c00174ba <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00174b5:	40                   	inc    eax
c00174b6:	eb da                	jmp    c0017492 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00174b8:	31 c0                	xor    eax,eax
c00174ba:	5b                   	pop    ebx
c00174bb:	c3                   	ret    

c00174bc <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00174bc:	53                   	push   ebx
c00174bd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00174c1:	53                   	push   ebx
c00174c2:	e8 8c ff ff ff       	call   c0017453 <Thr::getDriverBaseFromAddress(unsigned long)>
c00174c7:	5a                   	pop    edx
c00174c8:	31 d2                	xor    edx,edx
c00174ca:	85 c0                	test   eax,eax
c00174cc:	74 04                	je     c00174d2 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00174ce:	89 da                	mov    edx,ebx
c00174d0:	29 c2                	sub    edx,eax
c00174d2:	89 d0                	mov    eax,edx
c00174d4:	5b                   	pop    ebx
c00174d5:	c3                   	ret    

c00174d6 <Thr::loadDLL(char const*, bool)>:
c00174d6:	55                   	push   ebp
c00174d7:	57                   	push   edi
c00174d8:	56                   	push   esi
c00174d9:	53                   	push   ebx
c00174da:	81 ec 24 01 00 00    	sub    esp,0x124
c00174e0:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c00174e7:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00174ee:	56                   	push   esi
c00174ef:	68 15 1b 02 c0       	push   0xc0021b15
c00174f4:	e8 e6 79 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c00174f9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017500:	e8 eb 78 ff ff       	call   c000edf0 <operator new(unsigned long)>
c0017505:	83 c4 0c             	add    esp,0xc
c0017508:	89 c3                	mov    ebx,eax
c001750a:	ff 35 d4 48 02 c0    	push   DWORD PTR ds:0xc00248d4
c0017510:	56                   	push   esi
c0017511:	50                   	push   eax
c0017512:	e8 f7 7e ff ff       	call   c000f40e <File::File(char const*, Process*)>
c0017517:	83 c4 0c             	add    esp,0xc
c001751a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001751e:	50                   	push   eax
c001751f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017523:	50                   	push   eax
c0017524:	53                   	push   ebx
c0017525:	e8 f4 81 ff ff       	call   c000f71e <File::stat(unsigned long long*, bool*)>
c001752a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001752c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001752f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017532:	83 c4 10             	add    esp,0x10
c0017535:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001753a:	75 0a                	jne    c0017546 <Thr::loadDLL(char const*, bool)+0x70>
c001753c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017540:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0017544:	75 3e                	jne    c0017584 <Thr::loadDLL(char const*, bool)+0xae>
c0017546:	89 f8                	mov    eax,edi
c0017548:	31 db                	xor    ebx,ebx
c001754a:	84 c0                	test   al,al
c001754c:	0f 84 ca 00 00 00    	je     c001761c <Thr::loadDLL(char const*, bool)+0x146>
c0017552:	50                   	push   eax
c0017553:	50                   	push   eax
c0017554:	68 26 1b 02 c0       	push   0xc0021b26
c0017559:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c001755d:	53                   	push   ebx
c001755e:	e8 44 91 fe ff       	call   c00006a7 <strcpy>
c0017563:	58                   	pop    eax
c0017564:	5a                   	pop    edx
c0017565:	56                   	push   esi
c0017566:	53                   	push   ebx
c0017567:	e8 f2 91 fe ff       	call   c000075e <strcat>
c001756c:	59                   	pop    ecx
c001756d:	5d                   	pop    ebp
c001756e:	68 39 1b 02 c0       	push   0xc0021b39
c0017573:	53                   	push   ebx
c0017574:	e8 e5 91 fe ff       	call   c000075e <strcat>
c0017579:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001757c:	e8 f3 d5 ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c0017581:	83 c4 10             	add    esp,0x10
c0017584:	83 ec 0c             	sub    esp,0xc
c0017587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001758b:	e8 8e 46 ff ff       	call   c000bc1e <malloc>
c0017590:	89 34 24             	mov    DWORD PTR [esp],esi
c0017593:	89 c3                	mov    ebx,eax
c0017595:	e8 8b 90 fe ff       	call   c0000625 <strlen>
c001759a:	8b 2d e0 40 02 c0    	mov    ebp,DWORD PTR ds:0xc00240e0
c00175a0:	40                   	inc    eax
c00175a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00175a4:	e8 75 46 ff ff       	call   c000bc1e <malloc>
c00175a9:	89 04 ad 00 45 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdbb00],eax
c00175b0:	58                   	pop    eax
c00175b1:	a1 e0 40 02 c0       	mov    eax,ds:0xc00240e0
c00175b6:	5a                   	pop    edx
c00175b7:	56                   	push   esi
c00175b8:	ff 34 85 00 45 02 c0 	push   DWORD PTR [eax*4-0x3ffdbb00]
c00175bf:	e8 e3 90 fe ff       	call   c00006a7 <strcpy>
c00175c4:	a1 e0 40 02 c0       	mov    eax,ds:0xc00240e0
c00175c9:	8d 50 01             	lea    edx,[eax+0x1]
c00175cc:	89 1c 85 00 43 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbd00],ebx
c00175d3:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c00175d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00175dd:	59                   	pop    ecx
c00175de:	89 14 85 00 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf00],edx
c00175e5:	5d                   	pop    ebp
c00175e6:	53                   	push   ebx
c00175e7:	68 3b 1b 02 c0       	push   0xc0021b3b
c00175ec:	e8 ee 78 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c00175f1:	83 c4 0c             	add    esp,0xc
c00175f4:	6a 01                	push   0x1
c00175f6:	53                   	push   ebx
c00175f7:	56                   	push   esi
c00175f8:	e8 d5 f6 ff ff       	call   c0016cd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00175fd:	83 c4 10             	add    esp,0x10
c0017600:	84 c0                	test   al,al
c0017602:	75 18                	jne    c001761c <Thr::loadDLL(char const*, bool)+0x146>
c0017604:	31 db                	xor    ebx,ebx
c0017606:	89 f8                	mov    eax,edi
c0017608:	84 c0                	test   al,al
c001760a:	74 10                	je     c001761c <Thr::loadDLL(char const*, bool)+0x146>
c001760c:	83 ec 0c             	sub    esp,0xc
c001760f:	68 5a 1b 02 c0       	push   0xc0021b5a
c0017614:	e8 5b d5 ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c0017619:	83 c4 10             	add    esp,0x10
c001761c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017622:	89 d8                	mov    eax,ebx
c0017624:	5b                   	pop    ebx
c0017625:	5e                   	pop    esi
c0017626:	5f                   	pop    edi
c0017627:	5d                   	pop    ebp
c0017628:	c3                   	ret    

c0017629 <Thr::executeDLL(unsigned long, void*)>:
c0017629:	56                   	push   esi
c001762a:	53                   	push   ebx
c001762b:	51                   	push   ecx
c001762c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017630:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017634:	85 db                	test   ebx,ebx
c0017636:	75 10                	jne    c0017648 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017638:	83 ec 0c             	sub    esp,0xc
c001763b:	68 79 1b 02 c0       	push   0xc0021b79
c0017640:	e8 2f d5 ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c0017645:	83 c4 10             	add    esp,0x10
c0017648:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001764c:	89 d8                	mov    eax,ebx
c001764e:	5a                   	pop    edx
c001764f:	5b                   	pop    ebx
c0017650:	5e                   	pop    esi
c0017651:	ff e0                	jmp    eax
c0017653:	90                   	nop

c0017654 <changeTSS>:
c0017654:	83 ec 0c             	sub    esp,0xc
c0017657:	e8 12 c8 ff ff       	call   c0013e6e <thisCPU()>
c001765c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017662:	83 ec 08             	sub    esp,0x8
c0017665:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0017668:	05 7c 11 00 00       	add    eax,0x117c
c001766d:	c1 e1 15             	shl    ecx,0x15
c0017670:	ba 00 00 e8 01       	mov    edx,0x1e80000
c0017675:	29 ca                	sub    edx,ecx
c0017677:	52                   	push   edx
c0017678:	50                   	push   eax
c0017679:	e8 dc 5f ff ff       	call   c000d65a <TSS::setESP(unsigned long)>
c001767e:	83 c4 1c             	add    esp,0x1c
c0017681:	c3                   	ret    

c0017682 <Process::addArgs(char**)>:
c0017682:	57                   	push   edi
c0017683:	56                   	push   esi
c0017684:	53                   	push   ebx
c0017685:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017689:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001768d:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c0017697:	85 ff                	test   edi,edi
c0017699:	74 3d                	je     c00176d8 <Process::addArgs(char**)+0x56>
c001769b:	8b 07                	mov    eax,DWORD PTR [edi]
c001769d:	85 c0                	test   eax,eax
c001769f:	74 37                	je     c00176d8 <Process::addArgs(char**)+0x56>
c00176a1:	31 db                	xor    ebx,ebx
c00176a3:	83 ec 0c             	sub    esp,0xc
c00176a6:	50                   	push   eax
c00176a7:	e8 79 8f fe ff       	call   c0000625 <strlen>
c00176ac:	40                   	inc    eax
c00176ad:	89 04 24             	mov    DWORD PTR [esp],eax
c00176b0:	e8 69 45 ff ff       	call   c000bc1e <malloc>
c00176b5:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c00176bc:	5a                   	pop    edx
c00176bd:	59                   	pop    ecx
c00176be:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00176c1:	43                   	inc    ebx
c00176c2:	50                   	push   eax
c00176c3:	e8 df 8f fe ff       	call   c00006a7 <strcpy>
c00176c8:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c00176ce:	83 c4 10             	add    esp,0x10
c00176d1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00176d4:	85 c0                	test   eax,eax
c00176d6:	75 cb                	jne    c00176a3 <Process::addArgs(char**)+0x21>
c00176d8:	5b                   	pop    ebx
c00176d9:	5e                   	pop    esi
c00176da:	5f                   	pop    edi
c00176db:	c3                   	ret    

c00176dc <Process::Process(char const*, Process*, char**)>:
c00176dc:	56                   	push   esi
c00176dd:	53                   	push   ebx
c00176de:	83 ec 14             	sub    esp,0x14
c00176e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176e5:	05 0c 02 00 00       	add    eax,0x20c
c00176ea:	bb 07 00 00 00       	mov    ebx,0x7
c00176ef:	89 c6                	mov    esi,eax
c00176f1:	85 db                	test   ebx,ebx
c00176f3:	78 12                	js     c0017707 <Process::Process(char const*, Process*, char**)+0x2b>
c00176f5:	83 ec 0c             	sub    esp,0xc
c00176f8:	56                   	push   esi
c00176f9:	e8 1c 78 00 00       	call   c001ef1a <ThreadControlBlock::ThreadControlBlock()>
c00176fe:	83 c4 10             	add    esp,0x10
c0017701:	83 c6 63             	add    esi,0x63
c0017704:	4b                   	dec    ebx
c0017705:	eb ea                	jmp    c00176f1 <Process::Process(char const*, Process*, char**)+0x15>
c0017707:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001770b:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c0017712:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017716:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001771f:	a1 24 2f 02 c0       	mov    eax,ds:0xc0022f24
c0017724:	8d 50 01             	lea    edx,[eax+0x1]
c0017727:	89 15 24 2f 02 c0    	mov    DWORD PTR ds:0xc0022f24,edx
c001772d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017731:	89 02                	mov    DWORD PTR [edx],eax
c0017733:	83 ec 0c             	sub    esp,0xc
c0017736:	6a 10                	push   0x10
c0017738:	e8 b3 76 ff ff       	call   c000edf0 <operator new(unsigned long)>
c001773d:	83 c4 10             	add    esp,0x10
c0017740:	89 c3                	mov    ebx,eax
c0017742:	83 ec 08             	sub    esp,0x8
c0017745:	6a 00                	push   0x0
c0017747:	53                   	push   ebx
c0017748:	e8 37 73 ff ff       	call   c000ea84 <VAS::VAS(bool)>
c001774d:	83 c4 10             	add    esp,0x10
c0017750:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017754:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001775a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001775e:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0017768:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001776c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017770:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0017776:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001777a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017780:	85 c0                	test   eax,eax
c0017782:	74 42                	je     c00177c6 <Process::Process(char const*, Process*, char**)+0xea>
c0017784:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017788:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001778e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0017794:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017798:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001779e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177a2:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00177a8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00177ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177b2:	05 0c 01 00 00       	add    eax,0x10c
c00177b7:	83 ec 08             	sub    esp,0x8
c00177ba:	52                   	push   edx
c00177bb:	50                   	push   eax
c00177bc:	e8 e6 8e fe ff       	call   c00006a7 <strcpy>
c00177c1:	83 c4 10             	add    esp,0x10
c00177c4:	eb 5c                	jmp    c0017822 <Process::Process(char const*, Process*, char**)+0x146>
c00177c6:	83 ec 0c             	sub    esp,0xc
c00177c9:	68 60 12 00 00       	push   0x1260
c00177ce:	e8 1d 76 ff ff       	call   c000edf0 <operator new(unsigned long)>
c00177d3:	83 c4 10             	add    esp,0x10
c00177d6:	89 c3                	mov    ebx,eax
c00177d8:	83 ec 08             	sub    esp,0x8
c00177db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00177df:	53                   	push   ebx
c00177e0:	e8 73 5b ff ff       	call   c000d358 <VgaText::VgaText(char const*)>
c00177e5:	83 c4 10             	add    esp,0x10
c00177e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177ec:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00177f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177f6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00177fc:	83 ec 0c             	sub    esp,0xc
c00177ff:	50                   	push   eax
c0017800:	e8 54 4f ff ff       	call   c000c759 <addToTerminalCycle(VgaText*)>
c0017805:	83 c4 10             	add    esp,0x10
c0017808:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001780c:	05 0c 01 00 00       	add    eax,0x10c
c0017811:	83 ec 08             	sub    esp,0x8
c0017814:	68 a3 1b 02 c0       	push   0xc0021ba3
c0017819:	50                   	push   eax
c001781a:	e8 88 8e fe ff       	call   c00006a7 <strcpy>
c001781f:	83 c4 10             	add    esp,0x10
c0017822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017826:	83 c0 0c             	add    eax,0xc
c0017829:	83 ec 08             	sub    esp,0x8
c001782c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017830:	50                   	push   eax
c0017831:	e8 71 8e fe ff       	call   c00006a7 <strcpy>
c0017836:	83 c4 10             	add    esp,0x10
c0017839:	83 ec 08             	sub    esp,0x8
c001783c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017840:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017844:	e8 39 fe ff ff       	call   c0017682 <Process::addArgs(char**)>
c0017849:	83 c4 10             	add    esp,0x10
c001784c:	83 ec 08             	sub    esp,0x8
c001784f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017853:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017857:	e8 3d ef ff ff       	call   c0016799 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001785c:	83 c4 10             	add    esp,0x10
c001785f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017863:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017867:	83 f0 01             	xor    eax,0x1
c001786a:	88 c2                	mov    dl,al
c001786c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017870:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c0017876:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001787b:	83 ec 08             	sub    esp,0x8
c001787e:	50                   	push   eax
c001787f:	68 b8 1c 02 c0       	push   0xc0021cb8
c0017884:	e8 56 76 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0017889:	83 c4 10             	add    esp,0x10
c001788c:	90                   	nop
c001788d:	83 c4 14             	add    esp,0x14
c0017890:	5b                   	pop    ebx
c0017891:	5e                   	pop    esi
c0017892:	c3                   	ret    
c0017893:	90                   	nop

c0017894 <Process::Process(bool, char const*, Process*, char**)>:
c0017894:	56                   	push   esi
c0017895:	53                   	push   ebx
c0017896:	83 ec 14             	sub    esp,0x14
c0017899:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001789d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00178a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178a5:	05 0c 02 00 00       	add    eax,0x20c
c00178aa:	bb 07 00 00 00       	mov    ebx,0x7
c00178af:	89 c6                	mov    esi,eax
c00178b1:	85 db                	test   ebx,ebx
c00178b3:	78 12                	js     c00178c7 <Process::Process(bool, char const*, Process*, char**)+0x33>
c00178b5:	83 ec 0c             	sub    esp,0xc
c00178b8:	56                   	push   esi
c00178b9:	e8 5c 76 00 00       	call   c001ef1a <ThreadControlBlock::ThreadControlBlock()>
c00178be:	83 c4 10             	add    esp,0x10
c00178c1:	83 c6 63             	add    esi,0x63
c00178c4:	4b                   	dec    ebx
c00178c5:	eb ea                	jmp    c00178b1 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c00178c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178cb:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00178d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178d6:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00178df:	a1 24 2f 02 c0       	mov    eax,ds:0xc0022f24
c00178e4:	8d 50 01             	lea    edx,[eax+0x1]
c00178e7:	89 15 24 2f 02 c0    	mov    DWORD PTR ds:0xc0022f24,edx
c00178ed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00178f1:	89 02                	mov    DWORD PTR [edx],eax
c00178f3:	83 ec 0c             	sub    esp,0xc
c00178f6:	6a 10                	push   0x10
c00178f8:	e8 f3 74 ff ff       	call   c000edf0 <operator new(unsigned long)>
c00178fd:	83 c4 10             	add    esp,0x10
c0017900:	89 c3                	mov    ebx,eax
c0017902:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017907:	83 ec 08             	sub    esp,0x8
c001790a:	50                   	push   eax
c001790b:	53                   	push   ebx
c001790c:	e8 73 71 ff ff       	call   c000ea84 <VAS::VAS(bool)>
c0017911:	83 c4 10             	add    esp,0x10
c0017914:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017918:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001791e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017922:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001792c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017930:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017934:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001793a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001793e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017944:	85 c0                	test   eax,eax
c0017946:	74 42                	je     c001798a <Process::Process(bool, char const*, Process*, char**)+0xf6>
c0017948:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001794c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017952:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0017958:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001795c:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0017962:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017966:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001796c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017972:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017976:	05 0c 01 00 00       	add    eax,0x10c
c001797b:	83 ec 08             	sub    esp,0x8
c001797e:	52                   	push   edx
c001797f:	50                   	push   eax
c0017980:	e8 22 8d fe ff       	call   c00006a7 <strcpy>
c0017985:	83 c4 10             	add    esp,0x10
c0017988:	eb 5c                	jmp    c00179e6 <Process::Process(bool, char const*, Process*, char**)+0x152>
c001798a:	83 ec 0c             	sub    esp,0xc
c001798d:	68 60 12 00 00       	push   0x1260
c0017992:	e8 59 74 ff ff       	call   c000edf0 <operator new(unsigned long)>
c0017997:	83 c4 10             	add    esp,0x10
c001799a:	89 c3                	mov    ebx,eax
c001799c:	83 ec 08             	sub    esp,0x8
c001799f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00179a3:	53                   	push   ebx
c00179a4:	e8 af 59 ff ff       	call   c000d358 <VgaText::VgaText(char const*)>
c00179a9:	83 c4 10             	add    esp,0x10
c00179ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179b0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00179b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179ba:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00179c0:	83 ec 0c             	sub    esp,0xc
c00179c3:	50                   	push   eax
c00179c4:	e8 90 4d ff ff       	call   c000c759 <addToTerminalCycle(VgaText*)>
c00179c9:	83 c4 10             	add    esp,0x10
c00179cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179d0:	05 0c 01 00 00       	add    eax,0x10c
c00179d5:	83 ec 08             	sub    esp,0x8
c00179d8:	68 a3 1b 02 c0       	push   0xc0021ba3
c00179dd:	50                   	push   eax
c00179de:	e8 c4 8c fe ff       	call   c00006a7 <strcpy>
c00179e3:	83 c4 10             	add    esp,0x10
c00179e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179ea:	83 c0 0c             	add    eax,0xc
c00179ed:	83 ec 08             	sub    esp,0x8
c00179f0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00179f4:	50                   	push   eax
c00179f5:	e8 ad 8c fe ff       	call   c00006a7 <strcpy>
c00179fa:	83 c4 10             	add    esp,0x10
c00179fd:	83 ec 08             	sub    esp,0x8
c0017a00:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017a04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a08:	e8 75 fc ff ff       	call   c0017682 <Process::addArgs(char**)>
c0017a0d:	83 c4 10             	add    esp,0x10
c0017a10:	90                   	nop
c0017a11:	83 c4 14             	add    esp,0x14
c0017a14:	5b                   	pop    ebx
c0017a15:	5e                   	pop    esi
c0017a16:	c3                   	ret    

c0017a17 <disableIRQs()>:
c0017a17:	fa                   	cli    
c0017a18:	ff 05 ac 48 02 c0    	inc    DWORD PTR ds:0xc00248ac
c0017a1e:	c3                   	ret    

c0017a1f <getIRQNestingLevel()>:
c0017a1f:	a1 ac 48 02 c0       	mov    eax,ds:0xc00248ac
c0017a24:	c3                   	ret    

c0017a25 <enableIRQs()>:
c0017a25:	a1 ac 48 02 c0       	mov    eax,ds:0xc00248ac
c0017a2a:	48                   	dec    eax
c0017a2b:	a3 ac 48 02 c0       	mov    ds:0xc00248ac,eax
c0017a30:	75 01                	jne    c0017a33 <enableIRQs()+0xe>
c0017a32:	fb                   	sti    
c0017a33:	c3                   	ret    

c0017a34 <lockScheduler()>:
c0017a34:	eb e1                	jmp    c0017a17 <disableIRQs()>

c0017a36 <unlockScheduler()>:
c0017a36:	eb ed                	jmp    c0017a25 <enableIRQs()>

c0017a38 <userModeEntryPoint(void*)>:
c0017a38:	83 ec 0c             	sub    esp,0xc
c0017a3b:	e8 f6 ff ff ff       	call   c0017a36 <unlockScheduler()>
c0017a40:	fb                   	sti    
c0017a41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a46:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017a49:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0017a4f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a53:	83 c4 0c             	add    esp,0xc
c0017a56:	e9 8b 87 fe ff       	jmp    c00001e6 <goToUsermode>

c0017a5b <lockStuff()>:
c0017a5b:	e8 b7 ff ff ff       	call   c0017a17 <disableIRQs()>
c0017a60:	ff 05 a8 48 02 c0    	inc    DWORD PTR ds:0xc00248a8
c0017a66:	c3                   	ret    

c0017a67 <taskStartupFunction>:
c0017a67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a6c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0017a6f:	c3                   	ret    

c0017a70 <updateTimeUsed()>:
c0017a70:	57                   	push   edi
c0017a71:	56                   	push   esi
c0017a72:	53                   	push   ebx
c0017a73:	e8 f6 c3 ff ff       	call   c0013e6e <thisCPU()>
c0017a78:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017a7f:	74 49                	je     c0017aca <updateTimeUsed()+0x5a>
c0017a81:	0f 31                	rdtsc  
c0017a83:	89 c1                	mov    ecx,eax
c0017a85:	a3 e8 48 02 c0       	mov    ds:0xc00248e8,eax
c0017a8a:	2b 0d d8 48 02 c0    	sub    ecx,DWORD PTR ds:0xc00248d8
c0017a90:	89 d3                	mov    ebx,edx
c0017a92:	89 0d e0 48 02 c0    	mov    DWORD PTR ds:0xc00248e0,ecx
c0017a98:	1b 1d dc 48 02 c0    	sbb    ebx,DWORD PTR ds:0xc00248dc
c0017a9e:	a3 d8 48 02 c0       	mov    ds:0xc00248d8,eax
c0017aa3:	89 1d e4 48 02 c0    	mov    DWORD PTR ds:0xc00248e4,ebx
c0017aa9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017aae:	89 15 ec 48 02 c0    	mov    DWORD PTR ds:0xc00248ec,edx
c0017ab4:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0017ab7:	89 15 dc 48 02 c0    	mov    DWORD PTR ds:0xc00248dc,edx
c0017abd:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0017ac0:	01 f1                	add    ecx,esi
c0017ac2:	11 fb                	adc    ebx,edi
c0017ac4:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c0017ac7:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0017aca:	5b                   	pop    ebx
c0017acb:	5e                   	pop    esi
c0017acc:	5f                   	pop    edi
c0017acd:	c3                   	ret    

c0017ace <switchToThread(ThreadControlBlock*)>:
c0017ace:	53                   	push   ebx
c0017acf:	83 ec 08             	sub    esp,0x8
c0017ad2:	a1 a8 48 02 c0       	mov    eax,ds:0xc00248a8
c0017ad7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017adb:	85 c0                	test   eax,eax
c0017add:	75 30                	jne    c0017b0f <switchToThread(ThreadControlBlock*)+0x41>
c0017adf:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c0017ae2:	3c ff                	cmp    al,0xff
c0017ae4:	74 25                	je     c0017b0b <switchToThread(ThreadControlBlock*)+0x3d>
c0017ae6:	0f b6 d0             	movzx  edx,al
c0017ae9:	b8 84 03 00 00       	mov    eax,0x384
c0017aee:	29 d0                	sub    eax,edx
c0017af0:	c1 e0 10             	shl    eax,0x10
c0017af3:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017af6:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017af9:	e8 72 ff ff ff       	call   c0017a70 <updateTimeUsed()>
c0017afe:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017b02:	83 c4 08             	add    esp,0x8
c0017b05:	5b                   	pop    ebx
c0017b06:	e9 14 87 fe ff       	jmp    c000021f <switchToThreadASM>
c0017b0b:	31 c0                	xor    eax,eax
c0017b0d:	eb e7                	jmp    c0017af6 <switchToThread(ThreadControlBlock*)+0x28>
c0017b0f:	c7 05 a4 48 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00248a4,0x1
c0017b19:	83 c4 08             	add    esp,0x8
c0017b1c:	5b                   	pop    ebx
c0017b1d:	c3                   	ret    

c0017b1e <Semaphore::Semaphore(int)>:
c0017b1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017b26:	89 10                	mov    DWORD PTR [eax],edx
c0017b28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b2c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017b33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b37:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017b3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b42:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0017b49:	90                   	nop
c0017b4a:	c3                   	ret    
c0017b4b:	90                   	nop

c0017b4c <Mutex::Mutex()>:
c0017b4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b50:	6a 01                	push   0x1
c0017b52:	50                   	push   eax
c0017b53:	e8 c6 ff ff ff       	call   c0017b1e <Semaphore::Semaphore(int)>
c0017b58:	83 c4 08             	add    esp,0x8
c0017b5b:	90                   	nop
c0017b5c:	c3                   	ret    
c0017b5d:	90                   	nop

c0017b5e <Process::createThread(void (*)(void*), void*, int)>:
c0017b5e:	55                   	push   ebp
c0017b5f:	31 c9                	xor    ecx,ecx
c0017b61:	57                   	push   edi
c0017b62:	56                   	push   esi
c0017b63:	53                   	push   ebx
c0017b64:	83 ec 1c             	sub    esp,0x1c
c0017b67:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017b6b:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0017b72:	89 f2                	mov    edx,esi
c0017b74:	0f b7 c2             	movzx  eax,dx
c0017b77:	83 e2 01             	and    edx,0x1
c0017b7a:	74 14                	je     c0017b90 <Process::createThread(void (*)(void*), void*, int)+0x32>
c0017b7c:	d1 f8                	sar    eax,1
c0017b7e:	41                   	inc    ecx
c0017b7f:	89 c2                	mov    edx,eax
c0017b81:	83 f9 10             	cmp    ecx,0x10
c0017b84:	75 ee                	jne    c0017b74 <Process::createThread(void (*)(void*), void*, int)+0x16>
c0017b86:	83 c4 1c             	add    esp,0x1c
c0017b89:	31 c0                	xor    eax,eax
c0017b8b:	5b                   	pop    ebx
c0017b8c:	5e                   	pop    esi
c0017b8d:	5f                   	pop    edi
c0017b8e:	5d                   	pop    ebp
c0017b8f:	c3                   	ret    
c0017b90:	83 ec 08             	sub    esp,0x8
c0017b93:	b8 01 00 00 00       	mov    eax,0x1
c0017b98:	d3 e0                	shl    eax,cl
c0017b9a:	09 c6                	or     esi,eax
c0017b9c:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0017ba2:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0017ba9:	8d 34 09             	lea    esi,[ecx+ecx*1]
c0017bac:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0017baf:	01 ce                	add    esi,ecx
c0017bb1:	89 f0                	mov    eax,esi
c0017bb3:	c1 e0 05             	shl    eax,0x5
c0017bb6:	01 c6                	add    esi,eax
c0017bb8:	8d 04 33             	lea    eax,[ebx+esi*1]
c0017bbb:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0017bc1:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0017bc7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017bcb:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0017bd1:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0017bd7:	89 ca                	mov    edx,ecx
c0017bd9:	f7 da                	neg    edx
c0017bdb:	c1 e2 15             	shl    edx,0x15
c0017bde:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0017be4:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017bea:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017bee:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017bf8:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0017bfe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017c02:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0017c08:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017c12:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017c1c:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0017c23:	50                   	push   eax
c0017c24:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017c28:	68 c8 48 02 c0       	push   0xc00248c8
c0017c2d:	e8 40 71 00 00       	call   c001ed72 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017c32:	83 c4 10             	add    esp,0x10
c0017c35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c39:	83 c4 1c             	add    esp,0x1c
c0017c3c:	5b                   	pop    ebx
c0017c3d:	5e                   	pop    esi
c0017c3e:	5f                   	pop    edi
c0017c3f:	5d                   	pop    ebp
c0017c40:	c3                   	ret    
c0017c41:	90                   	nop

c0017c42 <Process::createUserThread()>:
c0017c42:	83 ec 0c             	sub    esp,0xc
c0017c45:	68 80 00 00 00       	push   0x80
c0017c4a:	6a 00                	push   0x0
c0017c4c:	68 38 7a 01 c0       	push   0xc0017a38
c0017c51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c55:	e8 04 ff ff ff       	call   c0017b5e <Process::createThread(void (*)(void*), void*, int)>
c0017c5a:	83 c4 1c             	add    esp,0x1c
c0017c5d:	c3                   	ret    

c0017c5e <setupMultitasking(void (*)())>:
c0017c5e:	56                   	push   esi
c0017c5f:	53                   	push   ebx
c0017c60:	53                   	push   ebx
c0017c61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017c65:	eb 10                	jmp    c0017c77 <setupMultitasking(void (*)())+0x19>
c0017c67:	83 ec 0c             	sub    esp,0xc
c0017c6a:	68 c8 48 02 c0       	push   0xc00248c8
c0017c6f:	e8 50 70 00 00       	call   c001ecc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017c74:	83 c4 10             	add    esp,0x10
c0017c77:	83 ec 0c             	sub    esp,0xc
c0017c7a:	68 c8 48 02 c0       	push   0xc00248c8
c0017c7f:	e8 24 70 00 00       	call   c001eca8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017c84:	83 c4 10             	add    esp,0x10
c0017c87:	84 c0                	test   al,al
c0017c89:	74 dc                	je     c0017c67 <setupMultitasking(void (*)())+0x9>
c0017c8b:	83 ec 0c             	sub    esp,0xc
c0017c8e:	68 3b 07 00 00       	push   0x73b
c0017c93:	e8 58 71 ff ff       	call   c000edf0 <operator new(unsigned long)>
c0017c98:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017c9f:	89 c3                	mov    ebx,eax
c0017ca1:	6a 00                	push   0x0
c0017ca3:	68 a7 1b 02 c0       	push   0xc0021ba7
c0017ca8:	6a 01                	push   0x1
c0017caa:	50                   	push   eax
c0017cab:	e8 e4 fb ff ff       	call   c0017894 <Process::Process(bool, char const*, Process*, char**)>
c0017cb0:	83 c4 18             	add    esp,0x18
c0017cb3:	89 1d d4 48 02 c0    	mov    DWORD PTR ds:0xc00248d4,ebx
c0017cb9:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0017cbf:	68 e0 1c 02 c0       	push   0xc0021ce0
c0017cc4:	e8 16 72 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0017cc9:	58                   	pop    eax
c0017cca:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0017cd0:	e8 f8 51 ff ff       	call   c000cecd <setActiveTerminal(VgaText*)>
c0017cd5:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c0017cdd:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0017ce3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017ce6:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0017cf0:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017cf6:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0017cfc:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017d06:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0017d10:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017d1a:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017d20:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017d26:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017d30:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017d36:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017d40:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017d46:	5a                   	pop    edx
c0017d47:	59                   	pop    ecx
c0017d48:	68 a3 1b 02 c0       	push   0xc0021ba3
c0017d4d:	50                   	push   eax
c0017d4e:	e8 54 89 fe ff       	call   c00006a7 <strcpy>
c0017d53:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0017d5a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017d5e:	83 c4 14             	add    esp,0x14
c0017d61:	5b                   	pop    ebx
c0017d62:	5e                   	pop    esi
c0017d63:	e9 a9 84 fe ff       	jmp    c0000211 <switchToThreadASMFirstTime>

c0017d68 <schedule()>:
c0017d68:	a1 a8 48 02 c0       	mov    eax,ds:0xc00248a8
c0017d6d:	85 c0                	test   eax,eax
c0017d6f:	74 0b                	je     c0017d7c <schedule()+0x14>
c0017d71:	c7 05 a4 48 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00248a4,0x1
c0017d7b:	c3                   	ret    
c0017d7c:	53                   	push   ebx
c0017d7d:	83 ec 14             	sub    esp,0x14
c0017d80:	68 c8 48 02 c0       	push   0xc00248c8
c0017d85:	e8 1e 6f 00 00       	call   c001eca8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017d8a:	83 c4 10             	add    esp,0x10
c0017d8d:	84 c0                	test   al,al
c0017d8f:	75 38                	jne    c0017dc9 <schedule()+0x61>
c0017d91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d96:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017d99:	4a                   	dec    edx
c0017d9a:	74 32                	je     c0017dce <schedule()+0x66>
c0017d9c:	83 ec 0c             	sub    esp,0xc
c0017d9f:	68 c8 48 02 c0       	push   0xc00248c8
c0017da4:	e8 f7 6e 00 00       	call   c001eca0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017da9:	c7 04 24 c8 48 02 c0 	mov    DWORD PTR [esp],0xc00248c8
c0017db0:	89 c3                	mov    ebx,eax
c0017db2:	e8 0d 6f 00 00       	call   c001ecc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017db7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017dbe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017dc1:	e8 08 fd ff ff       	call   c0017ace <switchToThread(ThreadControlBlock*)>
c0017dc6:	83 c4 10             	add    esp,0x10
c0017dc9:	83 c4 08             	add    esp,0x8
c0017dcc:	5b                   	pop    ebx
c0017dcd:	c3                   	ret    
c0017dce:	83 ec 08             	sub    esp,0x8
c0017dd1:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017dd8:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017dde:	68 c8 48 02 c0       	push   0xc00248c8
c0017de3:	e8 8a 6f 00 00       	call   c001ed72 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017de8:	83 c4 10             	add    esp,0x10
c0017deb:	eb af                	jmp    c0017d9c <schedule()+0x34>

c0017ded <unlockStuff()>:
c0017ded:	a1 a8 48 02 c0       	mov    eax,ds:0xc00248a8
c0017df2:	48                   	dec    eax
c0017df3:	a3 a8 48 02 c0       	mov    ds:0xc00248a8,eax
c0017df8:	75 09                	jne    c0017e03 <unlockStuff()+0x16>
c0017dfa:	a1 a4 48 02 c0       	mov    eax,ds:0xc00248a4
c0017dff:	85 c0                	test   eax,eax
c0017e01:	75 05                	jne    c0017e08 <unlockStuff()+0x1b>
c0017e03:	e9 1d fc ff ff       	jmp    c0017a25 <enableIRQs()>
c0017e08:	83 ec 0c             	sub    esp,0xc
c0017e0b:	c7 05 a4 48 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00248a4,0x0
c0017e15:	e8 4e ff ff ff       	call   c0017d68 <schedule()>
c0017e1a:	83 c4 0c             	add    esp,0xc
c0017e1d:	e9 03 fc ff ff       	jmp    c0017a25 <enableIRQs()>

c0017e22 <forkProcess(regs*)>:
c0017e22:	56                   	push   esi
c0017e23:	53                   	push   ebx
c0017e24:	50                   	push   eax
c0017e25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017e2a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017e2d:	66 83 b8 24 05 00 00 01 	cmp    WORD PTR [eax+0x524],0x1
c0017e35:	0f 85 3e 01 00 00    	jne    c0017f79 <forkProcess(regs*)+0x157>
c0017e3b:	e8 1b fc ff ff       	call   c0017a5b <lockStuff()>
c0017e40:	83 ec 0c             	sub    esp,0xc
c0017e43:	68 3b 07 00 00       	push   0x73b
c0017e48:	e8 a3 6f ff ff       	call   c000edf0 <operator new(unsigned long)>
c0017e4d:	89 c3                	mov    ebx,eax
c0017e4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017e54:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017e57:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017e5e:	50                   	push   eax
c0017e5f:	83 c0 0c             	add    eax,0xc
c0017e62:	50                   	push   eax
c0017e63:	6a 00                	push   0x0
c0017e65:	53                   	push   ebx
c0017e66:	e8 29 fa ff ff       	call   c0017894 <Process::Process(bool, char const*, Process*, char**)>
c0017e6b:	8b b3 32 05 00 00    	mov    esi,DWORD PTR [ebx+0x532]
c0017e71:	83 c4 20             	add    esp,0x20
c0017e74:	85 f6                	test   esi,esi
c0017e76:	74 16                	je     c0017e8e <forkProcess(regs*)+0x6c>
c0017e78:	83 ec 0c             	sub    esp,0xc
c0017e7b:	56                   	push   esi
c0017e7c:	e8 a9 62 ff ff       	call   c000e12a <VAS::~VAS()>
c0017e81:	59                   	pop    ecx
c0017e82:	58                   	pop    eax
c0017e83:	6a 10                	push   0x10
c0017e85:	56                   	push   esi
c0017e86:	e8 74 6f ff ff       	call   c000edff <operator delete(void*, unsigned long)>
c0017e8b:	83 c4 10             	add    esp,0x10
c0017e8e:	83 ec 0c             	sub    esp,0xc
c0017e91:	66 c7 83 24 05 00 00 01 00 	mov    WORD PTR [ebx+0x524],0x1
c0017e9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017e9f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017ea2:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0017ea8:	89 83 2e 05 00 00    	mov    DWORD PTR [ebx+0x52e],eax
c0017eae:	6a 10                	push   0x10
c0017eb0:	e8 3b 6f ff ff       	call   c000edf0 <operator new(unsigned long)>
c0017eb5:	59                   	pop    ecx
c0017eb6:	89 c6                	mov    esi,eax
c0017eb8:	58                   	pop    eax
c0017eb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ebe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017ec1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017ec7:	56                   	push   esi
c0017ec8:	e8 7f 67 ff ff       	call   c000e64c <VAS::VAS(VAS*)>
c0017ecd:	89 b3 32 05 00 00    	mov    DWORD PTR [ebx+0x532],esi
c0017ed3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0017ed6:	8b 13                	mov    edx,DWORD PTR [ebx]
c0017ed8:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017ede:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ee3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017ee6:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c0017eec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ef1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ef4:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c0017efa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017eff:	8a 40 44             	mov    al,BYTE PTR [eax+0x44]
c0017f02:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0017f0c:	88 83 50 02 00 00    	mov    BYTE PTR [ebx+0x250],al
c0017f12:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0017f18:	81 c3 0c 02 00 00    	add    ebx,0x20c
c0017f1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f23:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017f26:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0017f2d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017f30:	c7 43 0c 01 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1
c0017f37:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0017f3e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017f45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f4a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017f4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0017f50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f55:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0017f58:	58                   	pop    eax
c0017f59:	5a                   	pop    edx
c0017f5a:	53                   	push   ebx
c0017f5b:	68 c8 48 02 c0       	push   0xc00248c8
c0017f60:	e8 0d 6e 00 00       	call   c001ed72 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017f65:	e8 83 fe ff ff       	call   c0017ded <unlockStuff()>
c0017f6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f6f:	83 c4 10             	add    esp,0x10
c0017f72:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017f75:	5a                   	pop    edx
c0017f76:	5b                   	pop    ebx
c0017f77:	5e                   	pop    esi
c0017f78:	c3                   	ret    
c0017f79:	83 ec 0c             	sub    esp,0xc
c0017f7c:	68 14 1d 02 c0       	push   0xc0021d14
c0017f81:	e8 59 6f ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0017f86:	83 c4 10             	add    esp,0x10
c0017f89:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017f8e:	eb e5                	jmp    c0017f75 <forkProcess(regs*)+0x153>

c0017f90 <Semaphore::tryAcquire()>:
c0017f90:	83 ec 0c             	sub    esp,0xc
c0017f93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f97:	e8 bf fa ff ff       	call   c0017a5b <lockStuff()>
c0017f9c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0017f9f:	3b 10                	cmp    edx,DWORD PTR [eax]
c0017fa1:	7c 0b                	jl     c0017fae <Semaphore::tryAcquire()+0x1e>
c0017fa3:	e8 45 fe ff ff       	call   c0017ded <unlockStuff()>
c0017fa8:	31 c0                	xor    eax,eax
c0017faa:	83 c4 0c             	add    esp,0xc
c0017fad:	c3                   	ret    
c0017fae:	42                   	inc    edx
c0017faf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017fb2:	e8 36 fe ff ff       	call   c0017ded <unlockStuff()>
c0017fb7:	b0 01                	mov    al,0x1
c0017fb9:	83 c4 0c             	add    esp,0xc
c0017fbc:	c3                   	ret    
c0017fbd:	90                   	nop

c0017fbe <Semaphore::assertLocked(char const*)>:
c0017fbe:	83 ec 0c             	sub    esp,0xc
c0017fc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017fc9:	e8 8d fa ff ff       	call   c0017a5b <lockStuff()>
c0017fce:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017fd0:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c0017fd3:	7c 08                	jl     c0017fdd <Semaphore::assertLocked(char const*)+0x1f>
c0017fd5:	83 c4 0c             	add    esp,0xc
c0017fd8:	e9 10 fe ff ff       	jmp    c0017ded <unlockStuff()>
c0017fdd:	83 ec 0c             	sub    esp,0xc
c0017fe0:	52                   	push   edx
c0017fe1:	e8 8e cb ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c0017fe6:	83 c4 10             	add    esp,0x10
c0017fe9:	83 c4 0c             	add    esp,0xc
c0017fec:	e9 fc fd ff ff       	jmp    c0017ded <unlockStuff()>

c0017ff1 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0017ff1:	83 ec 0c             	sub    esp,0xc
c0017ff4:	e8 26 fa ff ff       	call   c0017a1f <getIRQNestingLevel()>
c0017ff9:	83 ec 08             	sub    esp,0x8
c0017ffc:	50                   	push   eax
c0017ffd:	68 40 1d 02 c0       	push   0xc0021d40
c0018002:	e8 d8 6e ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0018007:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001800b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018010:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018013:	e8 50 fd ff ff       	call   c0017d68 <schedule()>
c0018018:	e8 19 fa ff ff       	call   c0017a36 <unlockScheduler()>
c001801d:	e8 fd f9 ff ff       	call   c0017a1f <getIRQNestingLevel()>
c0018022:	5a                   	pop    edx
c0018023:	59                   	pop    ecx
c0018024:	50                   	push   eax
c0018025:	68 74 1d 02 c0       	push   0xc0021d74
c001802a:	e8 b0 6e ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001802f:	83 c4 1c             	add    esp,0x1c
c0018032:	c3                   	ret    

c0018033 <blockTask(TaskState)>:
c0018033:	83 ec 0c             	sub    esp,0xc
c0018036:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001803a:	e8 f5 f9 ff ff       	call   c0017a34 <lockScheduler()>
c001803f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018044:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018047:	e8 1c fd ff ff       	call   c0017d68 <schedule()>
c001804c:	83 c4 0c             	add    esp,0xc
c001804f:	e9 e2 f9 ff ff       	jmp    c0017a36 <unlockScheduler()>

c0018054 <waitTask(int, int*, int)>:
c0018054:	83 ec 18             	sub    esp,0x18
c0018057:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001805c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018060:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018063:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018067:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001806c:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001806f:	6a 07                	push   0x7
c0018071:	e8 bd ff ff ff       	call   c0018033 <blockTask(TaskState)>
c0018076:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001807b:	83 c4 10             	add    esp,0x10
c001807e:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0018081:	85 d2                	test   edx,edx
c0018083:	74 0a                	je     c001808f <waitTask(int, int*, int)+0x3b>
c0018085:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0018088:	89 02                	mov    DWORD PTR [edx],eax
c001808a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001808f:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0018092:	83 c4 0c             	add    esp,0xc
c0018095:	c3                   	ret    

c0018096 <nanoSleepUntil(unsigned long long)>:
c0018096:	83 ec 0c             	sub    esp,0xc
c0018099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001809d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00180a1:	3b 05 f0 3a 02 c0    	cmp    eax,DWORD PTR ds:0xc0023af0
c00180a7:	89 d1                	mov    ecx,edx
c00180a9:	1b 0d f4 3a 02 c0    	sbb    ecx,DWORD PTR ds:0xc0023af4
c00180af:	73 04                	jae    c00180b5 <nanoSleepUntil(unsigned long long)+0x1f>
c00180b1:	83 c4 0c             	add    esp,0xc
c00180b4:	c3                   	ret    
c00180b5:	e8 a1 f9 ff ff       	call   c0017a5b <lockStuff()>
c00180ba:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00180c0:	83 ec 08             	sub    esp,0x8
c00180c3:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c00180c6:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c00180c9:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00180cf:	68 bc 48 02 c0       	push   0xc00248bc
c00180d4:	e8 99 6c 00 00       	call   c001ed72 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00180d9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00180e0:	e8 4e ff ff ff       	call   c0018033 <blockTask(TaskState)>
c00180e5:	83 c4 1c             	add    esp,0x1c
c00180e8:	e9 00 fd ff ff       	jmp    c0017ded <unlockStuff()>

c00180ed <nanoSleep(unsigned long long)>:
c00180ed:	a1 f0 3a 02 c0       	mov    eax,ds:0xc0023af0
c00180f2:	8b 15 f4 3a 02 c0    	mov    edx,DWORD PTR ds:0xc0023af4
c00180f8:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00180fc:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0018100:	eb 94                	jmp    c0018096 <nanoSleepUntil(unsigned long long)>

c0018102 <sleep(unsigned long long)>:
c0018102:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001810a:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001810f:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0018113:	01 ca                	add    edx,ecx
c0018115:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018119:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001811d:	eb ce                	jmp    c00180ed <nanoSleep(unsigned long long)>
c001811f:	90                   	nop

c0018120 <Semaphore::acquire()>:
c0018120:	83 ec 0c             	sub    esp,0xc
c0018123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018127:	e8 2f f9 ff ff       	call   c0017a5b <lockStuff()>
c001812c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001812f:	3b 10                	cmp    edx,DWORD PTR [eax]
c0018131:	7d 0c                	jge    c001813f <Semaphore::acquire()+0x1f>
c0018133:	42                   	inc    edx
c0018134:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018137:	83 c4 0c             	add    esp,0xc
c001813a:	e9 ae fc ff ff       	jmp    c0017ded <unlockStuff()>
c001813f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018145:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001814c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001814f:	85 d2                	test   edx,edx
c0018151:	74 2a                	je     c001817d <Semaphore::acquire()+0x5d>
c0018153:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0018156:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001815c:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001815f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018165:	83 ec 0c             	sub    esp,0xc
c0018168:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001816b:	6a 05                	push   0x5
c001816d:	e8 c1 fe ff ff       	call   c0018033 <blockTask(TaskState)>
c0018172:	83 c4 10             	add    esp,0x10
c0018175:	83 c4 0c             	add    esp,0xc
c0018178:	e9 70 fc ff ff       	jmp    c0017ded <unlockStuff()>
c001817d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018183:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0018186:	eb d7                	jmp    c001815f <Semaphore::acquire()+0x3f>

c0018188 <execveProcess(char const*, char* const*, char* const*)>:
c0018188:	56                   	push   esi
c0018189:	53                   	push   ebx
c001818a:	50                   	push   eax
c001818b:	e8 cb f8 ff ff       	call   c0017a5b <lockStuff()>
c0018190:	83 ec 0c             	sub    esp,0xc
c0018193:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018198:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001819b:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c00181a1:	68 3b 07 00 00       	push   0x73b
c00181a6:	e8 45 6c ff ff       	call   c000edf0 <operator new(unsigned long)>
c00181ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00181af:	89 c3                	mov    ebx,eax
c00181b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00181b9:	ff b0 2a 05 00 00    	push   DWORD PTR [eax+0x52a]
c00181bf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00181c3:	53                   	push   ebx
c00181c4:	e8 13 f5 ff ff       	call   c00176dc <Process::Process(char const*, Process*, char**)>
c00181c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181ce:	83 c4 20             	add    esp,0x20
c00181d1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00181d4:	85 f6                	test   esi,esi
c00181d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00181d8:	89 03                	mov    DWORD PTR [ebx],eax
c00181da:	74 06                	je     c00181e2 <execveProcess(char const*, char* const*, char* const*)+0x5a>
c00181dc:	89 b3 26 05 00 00    	mov    DWORD PTR [ebx+0x526],esi
c00181e2:	83 ec 0c             	sub    esp,0xc
c00181e5:	53                   	push   ebx
c00181e6:	e8 57 fa ff ff       	call   c0017c42 <Process::createUserThread()>
c00181eb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00181f2:	e8 3c fe ff ff       	call   c0018033 <blockTask(TaskState)>
c00181f7:	e8 f1 fb ff ff       	call   c0017ded <unlockStuff()>
c00181fc:	e8 33 f8 ff ff       	call   c0017a34 <lockScheduler()>
c0018201:	e8 62 fb ff ff       	call   c0017d68 <schedule()>
c0018206:	e8 2b f8 ff ff       	call   c0017a36 <unlockScheduler()>
c001820b:	83 c4 14             	add    esp,0x14
c001820e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0018213:	5b                   	pop    ebx
c0018214:	5e                   	pop    esi
c0018215:	c3                   	ret    

c0018216 <taskReturned>:
c0018216:	83 ec 18             	sub    esp,0x18
c0018219:	68 a8 1d 02 c0       	push   0xc0021da8
c001821e:	e8 51 c9 ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c0018223:	83 c4 10             	add    esp,0x10
c0018226:	83 ec 0c             	sub    esp,0xc
c0018229:	6a 02                	push   0x2
c001822b:	e8 03 fe ff ff       	call   c0018033 <blockTask(TaskState)>
c0018230:	e8 ff f7 ff ff       	call   c0017a34 <lockScheduler()>
c0018235:	e8 2e fb ff ff       	call   c0017d68 <schedule()>
c001823a:	e8 f7 f7 ff ff       	call   c0017a36 <unlockScheduler()>
c001823f:	83 c4 10             	add    esp,0x10
c0018242:	eb e2                	jmp    c0018226 <taskReturned+0x10>

c0018244 <unblockTask(ThreadControlBlock*)>:
c0018244:	53                   	push   ebx
c0018245:	83 ec 08             	sub    esp,0x8
c0018248:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001824c:	e8 e3 f7 ff ff       	call   c0017a34 <lockScheduler()>
c0018251:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018254:	85 c0                	test   eax,eax
c0018256:	74 5c                	je     c00182b4 <unblockTask(ThreadControlBlock*)+0x70>
c0018258:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001825b:	48                   	dec    eax
c001825c:	74 31                	je     c001828f <unblockTask(ThreadControlBlock*)+0x4b>
c001825e:	83 ec 0c             	sub    esp,0xc
c0018261:	68 c8 48 02 c0       	push   0xc00248c8
c0018266:	e8 35 6a 00 00       	call   c001eca0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001826b:	83 c4 10             	add    esp,0x10
c001826e:	85 c0                	test   eax,eax
c0018270:	75 17                	jne    c0018289 <unblockTask(ThreadControlBlock*)+0x45>
c0018272:	eb 65                	jmp    c00182d9 <unblockTask(ThreadControlBlock*)+0x95>
c0018274:	83 ec 08             	sub    esp,0x8
c0018277:	50                   	push   eax
c0018278:	68 c8 48 02 c0       	push   0xc00248c8
c001827d:	e8 2e 6d 00 00       	call   c001efb0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018282:	83 c4 10             	add    esp,0x10
c0018285:	85 c0                	test   eax,eax
c0018287:	74 50                	je     c00182d9 <unblockTask(ThreadControlBlock*)+0x95>
c0018289:	39 c3                	cmp    ebx,eax
c001828b:	75 e7                	jne    c0018274 <unblockTask(ThreadControlBlock*)+0x30>
c001828d:	eb 1c                	jmp    c00182ab <unblockTask(ThreadControlBlock*)+0x67>
c001828f:	83 ec 0c             	sub    esp,0xc
c0018292:	68 98 1e 02 c0       	push   0xc0021e98
c0018297:	e8 43 6c ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001829c:	c7 04 24 24 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e24
c00182a3:	e8 37 6c ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c00182a8:	83 c4 10             	add    esp,0x10
c00182ab:	83 c4 08             	add    esp,0x8
c00182ae:	5b                   	pop    ebx
c00182af:	e9 82 f7 ff ff       	jmp    c0017a36 <unlockScheduler()>
c00182b4:	83 ec 0c             	sub    esp,0xc
c00182b7:	68 dc 1d 02 c0       	push   0xc0021ddc
c00182bc:	e8 1e 6c ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c00182c1:	c7 04 24 24 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e24
c00182c8:	e8 12 6c ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c00182cd:	83 c4 10             	add    esp,0x10
c00182d0:	83 c4 08             	add    esp,0x8
c00182d3:	5b                   	pop    ebx
c00182d4:	e9 5d f7 ff ff       	jmp    c0017a36 <unlockScheduler()>
c00182d9:	83 ec 08             	sub    esp,0x8
c00182dc:	53                   	push   ebx
c00182dd:	68 c8 48 02 c0       	push   0xc00248c8
c00182e2:	e8 8b 6a 00 00       	call   c001ed72 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00182e7:	83 c4 10             	add    esp,0x10
c00182ea:	83 c4 08             	add    esp,0x8
c00182ed:	5b                   	pop    ebx
c00182ee:	e9 43 f7 ff ff       	jmp    c0017a36 <unlockScheduler()>

c00182f3 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00182f3:	55                   	push   ebp
c00182f4:	57                   	push   edi
c00182f5:	56                   	push   esi
c00182f6:	53                   	push   ebx
c00182f7:	83 ec 1c             	sub    esp,0x1c
c00182fa:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00182fe:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018301:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c0018307:	85 c9                	test   ecx,ecx
c0018309:	7e 20                	jle    c001832b <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001830b:	31 f6                	xor    esi,esi
c001830d:	83 ec 0c             	sub    esp,0xc
c0018310:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c0018317:	46                   	inc    esi
c0018318:	e8 11 39 ff ff       	call   c000bc2e <free>
c001831d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018320:	83 c4 10             	add    esp,0x10
c0018323:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c0018329:	7f e2                	jg     c001830d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001832b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018335:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001833a:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001833d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018340:	d3 c0                	rol    eax,cl
c0018342:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c0018349:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001834c:	89 f7                	mov    edi,esi
c001834e:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c0018356:	0f 85 4f 01 00 00    	jne    c00184ab <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c001835c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018362:	85 c0                	test   eax,eax
c0018364:	0f 84 aa 00 00 00    	je     c0018414 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001836a:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001836d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018371:	31 c9                	xor    ecx,ecx
c0018373:	eb 10                	jmp    c0018385 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c0018375:	41                   	inc    ecx
c0018376:	83 f9 10             	cmp    ecx,0x10
c0018379:	0f 84 95 00 00 00    	je     c0018414 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001837f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018385:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001838c:	d3 fa                	sar    edx,cl
c001838e:	83 e2 01             	and    edx,0x1
c0018391:	74 e2                	je     c0018375 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018393:	8d 14 09             	lea    edx,[ecx+ecx*1]
c0018396:	01 ca                	add    edx,ecx
c0018398:	89 d5                	mov    ebp,edx
c001839a:	c1 e5 05             	shl    ebp,0x5
c001839d:	01 ea                	add    edx,ebp
c001839f:	01 d0                	add    eax,edx
c00183a1:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00183a7:	83 fd 07             	cmp    ebp,0x7
c00183aa:	75 c9                	jne    c0018375 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c00183ac:	05 40 02 00 00       	add    eax,0x240
c00183b1:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c00183b4:	83 fd ff             	cmp    ebp,0xffffffff
c00183b7:	0f 8c 08 01 00 00    	jl     c00184c5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c00183bd:	0f 84 b9 01 00 00    	je     c001857c <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c00183c3:	85 ed                	test   ebp,ebp
c00183c5:	0f 84 a0 01 00 00    	je     c001856b <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c00183cb:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00183cd:	75 a6                	jne    c0018375 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c00183cf:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00183d5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00183d9:	01 d0                	add    eax,edx
c00183db:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00183df:	83 ec 0c             	sub    esp,0xc
c00183e2:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c00183e8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00183eb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00183f1:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00183f8:	50                   	push   eax
c00183f9:	e8 46 fe ff ff       	call   c0018244 <unblockTask(ThreadControlBlock*)>
c00183fe:	83 c4 10             	add    esp,0x10
c0018401:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018404:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018408:	89 f7                	mov    edi,esi
c001840a:	41                   	inc    ecx
c001840b:	83 f9 10             	cmp    ecx,0x10
c001840e:	0f 85 6b ff ff ff    	jne    c001837f <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0018414:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001841a:	85 c0                	test   eax,eax
c001841c:	74 5d                	je     c001847b <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001841e:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c0018424:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001842a:	74 4f                	je     c001847b <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001842c:	83 ec 0c             	sub    esp,0xc
c001842f:	68 c8 48 02 c0       	push   0xc00248c8
c0018434:	e8 67 68 00 00       	call   c001eca0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018439:	c7 04 24 c8 48 02 c0 	mov    DWORD PTR [esp],0xc00248c8
c0018440:	89 c7                	mov    edi,eax
c0018442:	e8 61 68 00 00       	call   c001eca8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018447:	83 c4 10             	add    esp,0x10
c001844a:	84 c0                	test   al,al
c001844c:	0f 84 e4 00 00 00    	je     c0018536 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c0018452:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018455:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001845b:	85 d2                	test   edx,edx
c001845d:	74 0f                	je     c001846e <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001845f:	83 ec 0c             	sub    esp,0xc
c0018462:	8b 02                	mov    eax,DWORD PTR [edx]
c0018464:	52                   	push   edx
c0018465:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018468:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001846b:	83 c4 10             	add    esp,0x10
c001846e:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c0018478:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001847b:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c0018481:	85 db                	test   ebx,ebx
c0018483:	74 16                	je     c001849b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c0018485:	83 ec 0c             	sub    esp,0xc
c0018488:	53                   	push   ebx
c0018489:	e8 9c 5c ff ff       	call   c000e12a <VAS::~VAS()>
c001848e:	58                   	pop    eax
c001848f:	5a                   	pop    edx
c0018490:	6a 10                	push   0x10
c0018492:	53                   	push   ebx
c0018493:	e8 67 69 ff ff       	call   c000edff <operator delete(void*, unsigned long)>
c0018498:	83 c4 10             	add    esp,0x10
c001849b:	83 ec 0c             	sub    esp,0xc
c001849e:	68 ae 1b 02 c0       	push   0xc0021bae
c00184a3:	e8 37 6a ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c00184a8:	83 c4 10             	add    esp,0x10
c00184ab:	83 ec 08             	sub    esp,0x8
c00184ae:	68 3b 07 00 00       	push   0x73b
c00184b3:	68 bc 1b 02 c0       	push   0xc0021bbc
c00184b8:	e8 22 6a ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c00184bd:	83 c4 2c             	add    esp,0x2c
c00184c0:	5b                   	pop    ebx
c00184c1:	5e                   	pop    esi
c00184c2:	5f                   	pop    edi
c00184c3:	5d                   	pop    ebp
c00184c4:	c3                   	ret    
c00184c5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00184c9:	83 ec 0c             	sub    esp,0xc
c00184cc:	68 dc 1e 02 c0       	push   0xc0021edc
c00184d1:	e8 9e c6 ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c00184d6:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00184d9:	83 c4 10             	add    esp,0x10
c00184dc:	89 f7                	mov    edi,esi
c00184de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00184e2:	e9 8e fe ff ff       	jmp    c0018375 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c00184e7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00184ed:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c00184f3:	75 1c                	jne    c0018511 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c00184f5:	83 ec 0c             	sub    esp,0xc
c00184f8:	68 44 1f 02 c0       	push   0xc0021f44
c00184fd:	e8 dd 69 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0018502:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018509:	e8 25 fb ff ff       	call   c0018033 <blockTask(TaskState)>
c001850e:	83 c4 10             	add    esp,0x10
c0018511:	83 ec 08             	sub    esp,0x8
c0018514:	56                   	push   esi
c0018515:	68 c8 48 02 c0       	push   0xc00248c8
c001851a:	e8 53 68 00 00       	call   c001ed72 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001851f:	c7 04 24 c8 48 02 c0 	mov    DWORD PTR [esp],0xc00248c8
c0018526:	e8 75 67 00 00       	call   c001eca0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001852b:	83 c4 10             	add    esp,0x10
c001852e:	39 f8                	cmp    eax,edi
c0018530:	0f 84 1c ff ff ff    	je     c0018452 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c0018536:	83 ec 0c             	sub    esp,0xc
c0018539:	68 c8 48 02 c0       	push   0xc00248c8
c001853e:	e8 5d 67 00 00       	call   c001eca0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018543:	c7 04 24 c8 48 02 c0 	mov    DWORD PTR [esp],0xc00248c8
c001854a:	89 c6                	mov    esi,eax
c001854c:	e8 73 67 00 00       	call   c001ecc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018551:	83 c4 10             	add    esp,0x10
c0018554:	39 f3                	cmp    ebx,esi
c0018556:	74 b9                	je     c0018511 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c0018558:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001855b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001855e:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c0018564:	75 ab                	jne    c0018511 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c0018566:	e9 7c ff ff ff       	jmp    c00184e7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001856b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001856f:	83 ec 0c             	sub    esp,0xc
c0018572:	68 10 1f 02 c0       	push   0xc0021f10
c0018577:	e9 55 ff ff ff       	jmp    c00184d1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001857c:	8b 36                	mov    esi,DWORD PTR [esi]
c001857e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018582:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0018585:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018588:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001858e:	01 d7                	add    edi,edx
c0018590:	89 f8                	mov    eax,edi
c0018592:	e9 44 fe ff ff       	jmp    c00183db <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c0018597 <cleanerTaskFunction(void*)>:
c0018597:	53                   	push   ebx
c0018598:	83 ec 08             	sub    esp,0x8
c001859b:	e8 96 f4 ff ff       	call   c0017a36 <unlockScheduler()>
c00185a0:	e8 8f f4 ff ff       	call   c0017a34 <lockScheduler()>
c00185a5:	80 3d 8c 48 02 c0 00 	cmp    BYTE PTR ds:0xc002488c,0x0
c00185ac:	0f 85 8e 00 00 00    	jne    c0018640 <cleanerTaskFunction(void*)+0xa9>
c00185b2:	83 ec 0c             	sub    esp,0xc
c00185b5:	6a 02                	push   0x2
c00185b7:	e8 35 fa ff ff       	call   c0017ff1 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00185bc:	83 c4 10             	add    esp,0x10
c00185bf:	c6 05 8c 48 02 c0 00 	mov    BYTE PTR ds:0xc002488c,0x0
c00185c6:	e8 90 f4 ff ff       	call   c0017a5b <lockStuff()>
c00185cb:	e8 64 f4 ff ff       	call   c0017a34 <lockScheduler()>
c00185d0:	83 ec 0c             	sub    esp,0xc
c00185d3:	68 b0 48 02 c0       	push   0xc00248b0
c00185d8:	e8 cb 66 00 00       	call   c001eca8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00185dd:	83 c4 10             	add    esp,0x10
c00185e0:	84 c0                	test   al,al
c00185e2:	75 40                	jne    c0018624 <cleanerTaskFunction(void*)+0x8d>
c00185e4:	83 ec 0c             	sub    esp,0xc
c00185e7:	68 b0 48 02 c0       	push   0xc00248b0
c00185ec:	e8 af 66 00 00       	call   c001eca0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00185f1:	c7 04 24 b0 48 02 c0 	mov    DWORD PTR [esp],0xc00248b0
c00185f8:	89 c3                	mov    ebx,eax
c00185fa:	e8 c5 66 00 00       	call   c001ecc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00185ff:	c7 04 24 d2 1b 02 c0 	mov    DWORD PTR [esp],0xc0021bd2
c0018606:	e8 d4 68 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001860b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001860e:	e8 e0 fc ff ff       	call   c00182f3 <cleanupTerminatedTask(ThreadControlBlock*)>
c0018613:	c7 04 24 eb 1b 02 c0 	mov    DWORD PTR [esp],0xc0021beb
c001861a:	e8 c0 68 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001861f:	83 c4 10             	add    esp,0x10
c0018622:	eb ac                	jmp    c00185d0 <cleanerTaskFunction(void*)+0x39>
c0018624:	e8 0d f4 ff ff       	call   c0017a36 <unlockScheduler()>
c0018629:	e8 bf f7 ff ff       	call   c0017ded <unlockStuff()>
c001862e:	e8 01 f4 ff ff       	call   c0017a34 <lockScheduler()>
c0018633:	80 3d 8c 48 02 c0 00 	cmp    BYTE PTR ds:0xc002488c,0x0
c001863a:	0f 84 72 ff ff ff    	je     c00185b2 <cleanerTaskFunction(void*)+0x1b>
c0018640:	e8 f1 f3 ff ff       	call   c0017a36 <unlockScheduler()>
c0018645:	e9 75 ff ff ff       	jmp    c00185bf <cleanerTaskFunction(void*)+0x28>

c001864a <terminateTask(int)>:
c001864a:	83 ec 18             	sub    esp,0x18
c001864d:	68 fe 1b 02 c0       	push   0xc0021bfe
c0018652:	e8 88 68 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0018657:	e8 ff f3 ff ff       	call   c0017a5b <lockStuff()>
c001865c:	e8 d3 f3 ff ff       	call   c0017a34 <lockScheduler()>
c0018661:	c7 04 24 18 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c18
c0018668:	e8 72 68 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001866d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018671:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018676:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0018679:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001867e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0018681:	5a                   	pop    edx
c0018682:	59                   	pop    ecx
c0018683:	50                   	push   eax
c0018684:	68 b0 48 02 c0       	push   0xc00248b0
c0018689:	e8 e4 66 00 00       	call   c001ed72 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001868e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018693:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001869a:	c7 04 24 32 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c32
c00186a1:	e8 39 68 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c00186a6:	83 c4 10             	add    esp,0x10
c00186a9:	a1 88 48 02 c0       	mov    eax,ds:0xc0024888
c00186ae:	85 c0                	test   eax,eax
c00186b0:	74 5a                	je     c001870c <terminateTask(int)+0xc2>
c00186b2:	83 ec 0c             	sub    esp,0xc
c00186b5:	68 4c 1c 02 c0       	push   0xc0021c4c
c00186ba:	e8 20 68 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c00186bf:	58                   	pop    eax
c00186c0:	c6 05 8c 48 02 c0 01 	mov    BYTE PTR ds:0xc002488c,0x1
c00186c7:	ff 35 88 48 02 c0    	push   DWORD PTR ds:0xc0024888
c00186cd:	e8 72 fb ff ff       	call   c0018244 <unblockTask(ThreadControlBlock*)>
c00186d2:	c7 04 24 66 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c66
c00186d9:	e8 01 68 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c00186de:	83 c4 10             	add    esp,0x10
c00186e1:	e8 50 f3 ff ff       	call   c0017a36 <unlockScheduler()>
c00186e6:	e8 02 f7 ff ff       	call   c0017ded <unlockStuff()>
c00186eb:	83 ec 0c             	sub    esp,0xc
c00186ee:	68 9e 1c 02 c0       	push   0xc0021c9e
c00186f3:	e8 e7 67 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c00186f8:	83 c4 10             	add    esp,0x10
c00186fb:	e8 34 f3 ff ff       	call   c0017a34 <lockScheduler()>
c0018700:	e8 63 f6 ff ff       	call   c0017d68 <schedule()>
c0018705:	e8 2c f3 ff ff       	call   c0017a36 <unlockScheduler()>
c001870a:	eb ef                	jmp    c00186fb <terminateTask(int)+0xb1>
c001870c:	83 ec 0c             	sub    esp,0xc
c001870f:	68 80 1c 02 c0       	push   0xc0021c80
c0018714:	e8 c6 67 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c0018719:	83 c4 10             	add    esp,0x10
c001871c:	eb c3                	jmp    c00186e1 <terminateTask(int)+0x97>

c001871e <Thr::terminateFromIRQ(int)>:
c001871e:	83 ec 18             	sub    esp,0x18
c0018721:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018725:	e8 20 ff ff ff       	call   c001864a <terminateTask(int)>

c001872a <Semaphore::release()>:
c001872a:	83 ec 0c             	sub    esp,0xc
c001872d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018731:	e8 25 f3 ff ff       	call   c0017a5b <lockStuff()>
c0018736:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018739:	85 d2                	test   edx,edx
c001873b:	74 1a                	je     c0018757 <Semaphore::release()+0x2d>
c001873d:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0018740:	83 ec 0c             	sub    esp,0xc
c0018743:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0018746:	52                   	push   edx
c0018747:	e8 f8 fa ff ff       	call   c0018244 <unblockTask(ThreadControlBlock*)>
c001874c:	83 c4 10             	add    esp,0x10
c001874f:	83 c4 0c             	add    esp,0xc
c0018752:	e9 96 f6 ff ff       	jmp    c0017ded <unlockStuff()>
c0018757:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001875a:	83 c4 0c             	add    esp,0xc
c001875d:	e9 8b f6 ff ff       	jmp    c0017ded <unlockStuff()>

c0018762 <__static_initialization_and_destruction_0(int, int)>:
c0018762:	83 ec 0c             	sub    esp,0xc
c0018765:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001876a:	0f 85 88 00 00 00    	jne    c00187f8 <__static_initialization_and_destruction_0(int, int)+0x96>
c0018770:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018778:	75 7e                	jne    c00187f8 <__static_initialization_and_destruction_0(int, int)+0x96>
c001877a:	83 ec 0c             	sub    esp,0xc
c001877d:	68 c8 48 02 c0       	push   0xc00248c8
c0018782:	e8 d1 67 00 00       	call   c001ef58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018787:	83 c4 10             	add    esp,0x10
c001878a:	83 ec 04             	sub    esp,0x4
c001878d:	68 30 29 02 c0       	push   0xc0022930
c0018792:	68 c8 48 02 c0       	push   0xc00248c8
c0018797:	68 18 ef 01 c0       	push   0xc001ef18
c001879c:	e8 da 65 ff ff       	call   c000ed7b <__cxa_atexit>
c00187a1:	83 c4 10             	add    esp,0x10
c00187a4:	83 ec 0c             	sub    esp,0xc
c00187a7:	68 bc 48 02 c0       	push   0xc00248bc
c00187ac:	e8 a7 67 00 00       	call   c001ef58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00187b1:	83 c4 10             	add    esp,0x10
c00187b4:	83 ec 04             	sub    esp,0x4
c00187b7:	68 30 29 02 c0       	push   0xc0022930
c00187bc:	68 bc 48 02 c0       	push   0xc00248bc
c00187c1:	68 18 ef 01 c0       	push   0xc001ef18
c00187c6:	e8 b0 65 ff ff       	call   c000ed7b <__cxa_atexit>
c00187cb:	83 c4 10             	add    esp,0x10
c00187ce:	83 ec 0c             	sub    esp,0xc
c00187d1:	68 b0 48 02 c0       	push   0xc00248b0
c00187d6:	e8 7d 67 00 00       	call   c001ef58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00187db:	83 c4 10             	add    esp,0x10
c00187de:	83 ec 04             	sub    esp,0x4
c00187e1:	68 30 29 02 c0       	push   0xc0022930
c00187e6:	68 b0 48 02 c0       	push   0xc00248b0
c00187eb:	68 18 ef 01 c0       	push   0xc001ef18
c00187f0:	e8 86 65 ff ff       	call   c000ed7b <__cxa_atexit>
c00187f5:	83 c4 10             	add    esp,0x10
c00187f8:	90                   	nop
c00187f9:	83 c4 0c             	add    esp,0xc
c00187fc:	c3                   	ret    

c00187fd <_GLOBAL__sub_I_kernelProcess>:
c00187fd:	83 ec 0c             	sub    esp,0xc
c0018800:	83 ec 08             	sub    esp,0x8
c0018803:	68 ff ff 00 00       	push   0xffff
c0018808:	6a 01                	push   0x1
c001880a:	e8 53 ff ff ff       	call   c0018762 <__static_initialization_and_destruction_0(int, int)>
c001880f:	83 c4 10             	add    esp,0x10
c0018812:	83 c4 0c             	add    esp,0xc
c0018815:	c3                   	ret    

c0018816 <Vm::vm8086EntryPoint(void*)>:
c0018816:	83 ec 0c             	sub    esp,0xc
c0018819:	e8 18 f2 ff ff       	call   c0017a36 <unlockScheduler()>
c001881e:	fb                   	sti    
c001881f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018824:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0018828:	52                   	push   edx
c0018829:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001882d:	52                   	push   edx
c001882e:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018832:	52                   	push   edx
c0018833:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0018837:	50                   	push   eax
c0018838:	e8 78 79 fe ff       	call   c00001b5 <goToVM86>
c001883d:	83 c4 1c             	add    esp,0x1c
c0018840:	c3                   	ret    

c0018841 <Vm::inbv(unsigned short)>:
c0018841:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018845:	ec                   	in     al,dx
c0018846:	c3                   	ret    

c0018847 <Vm::outbv(unsigned short, unsigned char)>:
c0018847:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001884b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001884f:	ee                   	out    dx,al
c0018850:	c3                   	ret    

c0018851 <Vm::realToLinear(unsigned short, unsigned short)>:
c0018851:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018856:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001885b:	c1 e0 04             	shl    eax,0x4
c001885e:	01 d0                	add    eax,edx
c0018860:	c3                   	ret    

c0018861 <Vm::getSegment(unsigned int)>:
c0018861:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018865:	c1 e8 10             	shr    eax,0x10
c0018868:	c3                   	ret    

c0018869 <Vm::getOffset(unsigned int)>:
c0018869:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001886d:	c3                   	ret    

c001886e <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001886e:	55                   	push   ebp
c001886f:	57                   	push   edi
c0018870:	56                   	push   esi
c0018871:	53                   	push   ebx
c0018872:	83 ec 2c             	sub    esp,0x2c
c0018875:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0018879:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001887d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018881:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0018885:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018889:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001888d:	e8 a2 f1 ff ff       	call   c0017a34 <lockScheduler()>
c0018892:	68 80 00 00 00       	push   0x80
c0018897:	6a 00                	push   0x0
c0018899:	68 16 88 01 c0       	push   0xc0018816
c001889e:	55                   	push   ebp
c001889f:	e8 ba f2 ff ff       	call   c0017b5e <Process::createThread(void (*)(void*), void*, int)>
c00188a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00188a8:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c00188ac:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00188b0:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c00188b4:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c00188b8:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00188bc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00188c3:	e8 28 65 ff ff       	call   c000edf0 <operator new(unsigned long)>
c00188c8:	83 c4 0c             	add    esp,0xc
c00188cb:	89 c3                	mov    ebx,eax
c00188cd:	55                   	push   ebp
c00188ce:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00188d2:	50                   	push   eax
c00188d3:	e8 36 6b ff ff       	call   c000f40e <File::File(char const*, Process*)>
c00188d8:	83 c4 0c             	add    esp,0xc
c00188db:	8d 44 24 17          	lea    eax,[esp+0x17]
c00188df:	50                   	push   eax
c00188e0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00188e4:	50                   	push   eax
c00188e5:	53                   	push   ebx
c00188e6:	e8 33 6e ff ff       	call   c000f71e <File::stat(unsigned long long*, bool*)>
c00188eb:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c00188ef:	83 c4 10             	add    esp,0x10
c00188f2:	84 d2                	test   dl,dl
c00188f4:	74 1c                	je     c0018912 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c00188f6:	83 ec 0c             	sub    esp,0xc
c00188f9:	68 6c 1f 02 c0       	push   0xc0021f6c
c00188fe:	e8 71 c2 ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c0018903:	e8 2e f1 ff ff       	call   c0017a36 <unlockScheduler()>
c0018908:	83 c4 10             	add    esp,0x10
c001890b:	31 d2                	xor    edx,edx
c001890d:	e9 81 00 00 00       	jmp    c0018993 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018912:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018916:	51                   	push   ecx
c0018917:	51                   	push   ecx
c0018918:	6a 01                	push   0x1
c001891a:	53                   	push   ebx
c001891b:	e8 52 6b ff ff       	call   c000f472 <File::open(FileOpenMode)>
c0018920:	83 c4 10             	add    esp,0x10
c0018923:	85 c0                	test   eax,eax
c0018925:	74 1b                	je     c0018942 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0018927:	83 ec 0c             	sub    esp,0xc
c001892a:	68 85 1f 02 c0       	push   0xc0021f85
c001892f:	e8 40 c2 ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c0018934:	e8 fd f0 ff ff       	call   c0017a36 <unlockScheduler()>
c0018939:	83 c4 10             	add    esp,0x10
c001893c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018940:	eb 51                	jmp    c0018993 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018942:	83 ec 0c             	sub    esp,0xc
c0018945:	0f b7 ff             	movzx  edi,di
c0018948:	6a 07                	push   0x7
c001894a:	0f b7 f6             	movzx  esi,si
c001894d:	68 00 01 00 00       	push   0x100
c0018952:	6a 00                	push   0x0
c0018954:	6a 00                	push   0x0
c0018956:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c001895c:	e8 21 5c ff ff       	call   c000e582 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018961:	83 c4 18             	add    esp,0x18
c0018964:	57                   	push   edi
c0018965:	56                   	push   esi
c0018966:	e8 e6 fe ff ff       	call   c0018851 <Vm::realToLinear(unsigned short, unsigned short)>
c001896b:	5a                   	pop    edx
c001896c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001896e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018972:	51                   	push   ecx
c0018973:	50                   	push   eax
c0018974:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018978:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001897c:	53                   	push   ebx
c001897d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018980:	83 c4 14             	add    esp,0x14
c0018983:	53                   	push   ebx
c0018984:	e8 47 6b ff ff       	call   c000f4d0 <File::close()>
c0018989:	e8 a8 f0 ff ff       	call   c0017a36 <unlockScheduler()>
c001898e:	83 c4 10             	add    esp,0x10
c0018991:	b2 01                	mov    dl,0x1
c0018993:	83 c4 2c             	add    esp,0x2c
c0018996:	88 d0                	mov    al,dl
c0018998:	5b                   	pop    ebx
c0018999:	5e                   	pop    esi
c001899a:	5f                   	pop    edi
c001899b:	5d                   	pop    ebp
c001899c:	c3                   	ret    

c001899d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001899d:	57                   	push   edi
c001899e:	56                   	push   esi
c001899f:	53                   	push   ebx
c00189a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00189a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189a8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00189ac:	83 e8 06             	sub    eax,0x6
c00189af:	0f b7 c0             	movzx  eax,ax
c00189b2:	50                   	push   eax
c00189b3:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00189b8:	50                   	push   eax
c00189b9:	e8 93 fe ff ff       	call   c0018851 <Vm::realToLinear(unsigned short, unsigned short)>
c00189be:	5a                   	pop    edx
c00189bf:	5e                   	pop    esi
c00189c0:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00189c3:	8d 56 fa             	lea    edx,[esi-0x6]
c00189c6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00189cc:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00189cf:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00189d2:	83 c2 02             	add    edx,0x2
c00189d5:	66 89 10             	mov    WORD PTR [eax],dx
c00189d8:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00189db:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00189df:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00189e2:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00189e6:	89 d6                	mov    esi,edx
c00189e8:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00189ee:	66 81 e6 ff fd       	and    si,0xfdff
c00189f3:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c00189f7:	74 07                	je     c0018a00 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00189f9:	89 d6                	mov    esi,edx
c00189fb:	66 81 ce 00 02       	or     si,0x200
c0018a00:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018a04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a09:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018a0d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018a15:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018a18:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018a20:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018a23:	5b                   	pop    ebx
c0018a24:	5e                   	pop    esi
c0018a25:	5f                   	pop    edi
c0018a26:	c3                   	ret    

c0018a27 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0018a27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018a2c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018a31:	c1 e0 04             	shl    eax,0x4
c0018a34:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018a37:	c3                   	ret    

c0018a38 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018a38:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018a3d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018a42:	c1 e0 04             	shl    eax,0x4
c0018a45:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018a49:	c3                   	ret    

c0018a4a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018a4a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018a4f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018a54:	c1 e0 04             	shl    eax,0x4
c0018a57:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018a5a:	c3                   	ret    

c0018a5b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018a5b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018a60:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018a65:	c1 e0 04             	shl    eax,0x4
c0018a68:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a6c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018a6f:	c3                   	ret    

c0018a70 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018a70:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018a75:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018a7a:	c1 e0 04             	shl    eax,0x4
c0018a7d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a81:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018a85:	c3                   	ret    

c0018a86 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018a86:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018a8b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018a90:	c1 e0 04             	shl    eax,0x4
c0018a93:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a97:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018a9a:	c3                   	ret    

c0018a9b <Vm::faultHandler(regs*)>:
c0018a9b:	55                   	push   ebp
c0018a9c:	57                   	push   edi
c0018a9d:	56                   	push   esi
c0018a9e:	53                   	push   ebx
c0018a9f:	83 ec 1c             	sub    esp,0x1c
c0018aa2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018aa6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018aa9:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018aad:	0f b7 f0             	movzx  esi,ax
c0018ab0:	52                   	push   edx
c0018ab1:	0f b7 c0             	movzx  eax,ax
c0018ab4:	50                   	push   eax
c0018ab5:	e8 97 fd ff ff       	call   c0018851 <Vm::realToLinear(unsigned short, unsigned short)>
c0018aba:	5a                   	pop    edx
c0018abb:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018abe:	59                   	pop    ecx
c0018abf:	89 c7                	mov    edi,eax
c0018ac1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018ac4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018ac8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018acd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018ad1:	0f b7 c5             	movzx  eax,bp
c0018ad4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018ad8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018adc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018ae0:	e8 6c fd ff ff       	call   c0018851 <Vm::realToLinear(unsigned short, unsigned short)>
c0018ae5:	5a                   	pop    edx
c0018ae6:	59                   	pop    ecx
c0018ae7:	b1 06                	mov    cl,0x6
c0018ae9:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018aee:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018af3:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0018af6:	80 fa 9d             	cmp    dl,0x9d
c0018af9:	0f 84 1d 02 00 00    	je     c0018d1c <Vm::faultHandler(regs*)+0x281>
c0018aff:	0f 87 8e 00 00 00    	ja     c0018b93 <Vm::faultHandler(regs*)+0xf8>
c0018b05:	80 fa 66             	cmp    dl,0x66
c0018b08:	0f 84 89 01 00 00    	je     c0018c97 <Vm::faultHandler(regs*)+0x1fc>
c0018b0e:	77 44                	ja     c0018b54 <Vm::faultHandler(regs*)+0xb9>
c0018b10:	80 fa 36             	cmp    dl,0x36
c0018b13:	0f 84 74 01 00 00    	je     c0018c8d <Vm::faultHandler(regs*)+0x1f2>
c0018b19:	77 1a                	ja     c0018b35 <Vm::faultHandler(regs*)+0x9a>
c0018b1b:	80 fa 26             	cmp    dl,0x26
c0018b1e:	0f 84 4b 01 00 00    	je     c0018c6f <Vm::faultHandler(regs*)+0x1d4>
c0018b24:	80 fa 2e             	cmp    dl,0x2e
c0018b27:	0f 85 4a 05 00 00    	jne    c0019077 <Vm::faultHandler(regs*)+0x5dc>
c0018b2d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018b30:	31 c9                	xor    ecx,ecx
c0018b32:	47                   	inc    edi
c0018b33:	eb be                	jmp    c0018af3 <Vm::faultHandler(regs*)+0x58>
c0018b35:	80 fa 64             	cmp    dl,0x64
c0018b38:	0f 84 3b 01 00 00    	je     c0018c79 <Vm::faultHandler(regs*)+0x1de>
c0018b3e:	0f 87 3f 01 00 00    	ja     c0018c83 <Vm::faultHandler(regs*)+0x1e8>
c0018b44:	80 fa 3e             	cmp    dl,0x3e
c0018b47:	0f 85 2a 05 00 00    	jne    c0019077 <Vm::faultHandler(regs*)+0x5dc>
c0018b4d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018b50:	b1 01                	mov    cl,0x1
c0018b52:	eb de                	jmp    c0018b32 <Vm::faultHandler(regs*)+0x97>
c0018b54:	80 fa 6d             	cmp    dl,0x6d
c0018b57:	0f 84 bf 02 00 00    	je     c0018e1c <Vm::faultHandler(regs*)+0x381>
c0018b5d:	77 17                	ja     c0018b76 <Vm::faultHandler(regs*)+0xdb>
c0018b5f:	80 fa 67             	cmp    dl,0x67
c0018b62:	0f 84 3c 01 00 00    	je     c0018ca4 <Vm::faultHandler(regs*)+0x209>
c0018b68:	80 fa 6c             	cmp    dl,0x6c
c0018b6b:	0f 84 5d 02 00 00    	je     c0018dce <Vm::faultHandler(regs*)+0x333>
c0018b71:	e9 01 05 00 00       	jmp    c0019077 <Vm::faultHandler(regs*)+0x5dc>
c0018b76:	80 fa 6f             	cmp    dl,0x6f
c0018b79:	0f 84 8b 03 00 00    	je     c0018f0a <Vm::faultHandler(regs*)+0x46f>
c0018b7f:	0f 82 0f 03 00 00    	jb     c0018e94 <Vm::faultHandler(regs*)+0x3f9>
c0018b85:	80 fa 9c             	cmp    dl,0x9c
c0018b88:	0f 84 23 01 00 00    	je     c0018cb1 <Vm::faultHandler(regs*)+0x216>
c0018b8e:	e9 e4 04 00 00       	jmp    c0019077 <Vm::faultHandler(regs*)+0x5dc>
c0018b93:	80 fa ec             	cmp    dl,0xec
c0018b96:	0f 84 7f 04 00 00    	je     c001901b <Vm::faultHandler(regs*)+0x580>
c0018b9c:	77 7b                	ja     c0018c19 <Vm::faultHandler(regs*)+0x17e>
c0018b9e:	80 fa e4             	cmp    dl,0xe4
c0018ba1:	0f 84 fe 03 00 00    	je     c0018fa5 <Vm::faultHandler(regs*)+0x50a>
c0018ba7:	77 53                	ja     c0018bfc <Vm::faultHandler(regs*)+0x161>
c0018ba9:	80 fa cd             	cmp    dl,0xcd
c0018bac:	0f 84 cd 01 00 00    	je     c0018d7f <Vm::faultHandler(regs*)+0x2e4>
c0018bb2:	80 fa cf             	cmp    dl,0xcf
c0018bb5:	0f 85 bc 04 00 00    	jne    c0019077 <Vm::faultHandler(regs*)+0x5dc>
c0018bbb:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018bbe:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018bc1:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0018bc5:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018bc8:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018bcc:	81 ca 00 02 02 00    	or     edx,0x20200
c0018bd2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018bd5:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0018bd9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018bdf:	66 c1 e8 09          	shr    ax,0x9
c0018be3:	83 e0 01             	and    eax,0x1
c0018be6:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018be9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018bec:	83 c0 06             	add    eax,0x6
c0018bef:	25 ff ff 00 00       	and    eax,0xffff
c0018bf4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018bf7:	e9 77 04 00 00       	jmp    c0019073 <Vm::faultHandler(regs*)+0x5d8>
c0018bfc:	80 fa e6             	cmp    dl,0xe6
c0018bff:	0f 84 ea 03 00 00    	je     c0018fef <Vm::faultHandler(regs*)+0x554>
c0018c05:	0f 82 b6 03 00 00    	jb     c0018fc1 <Vm::faultHandler(regs*)+0x526>
c0018c0b:	80 fa e7             	cmp    dl,0xe7
c0018c0e:	0f 84 f2 03 00 00    	je     c0019006 <Vm::faultHandler(regs*)+0x56b>
c0018c14:	e9 5e 04 00 00       	jmp    c0019077 <Vm::faultHandler(regs*)+0x5dc>
c0018c19:	80 fa ef             	cmp    dl,0xef
c0018c1c:	0f 84 3c 04 00 00    	je     c001905e <Vm::faultHandler(regs*)+0x5c3>
c0018c22:	77 28                	ja     c0018c4c <Vm::faultHandler(regs*)+0x1b1>
c0018c24:	80 fa ed             	cmp    dl,0xed
c0018c27:	0f 84 0a 04 00 00    	je     c0019037 <Vm::faultHandler(regs*)+0x59c>
c0018c2d:	80 fa ee             	cmp    dl,0xee
c0018c30:	0f 85 41 04 00 00    	jne    c0019077 <Vm::faultHandler(regs*)+0x5dc>
c0018c36:	50                   	push   eax
c0018c37:	50                   	push   eax
c0018c38:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018c3c:	50                   	push   eax
c0018c3d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018c41:	50                   	push   eax
c0018c42:	e8 00 fc ff ff       	call   c0018847 <Vm::outbv(unsigned short, unsigned char)>
c0018c47:	e9 0a 04 00 00       	jmp    c0019056 <Vm::faultHandler(regs*)+0x5bb>
c0018c4c:	80 fa fa             	cmp    dl,0xfa
c0018c4f:	0f 84 5d 01 00 00    	je     c0018db2 <Vm::faultHandler(regs*)+0x317>
c0018c55:	80 fa fb             	cmp    dl,0xfb
c0018c58:	0f 84 62 01 00 00    	je     c0018dc0 <Vm::faultHandler(regs*)+0x325>
c0018c5e:	80 fa f3             	cmp    dl,0xf3
c0018c61:	0f 85 10 04 00 00    	jne    c0019077 <Vm::faultHandler(regs*)+0x5dc>
c0018c67:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018c6a:	e9 c3 fe ff ff       	jmp    c0018b32 <Vm::faultHandler(regs*)+0x97>
c0018c6f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018c72:	b1 02                	mov    cl,0x2
c0018c74:	e9 b9 fe ff ff       	jmp    c0018b32 <Vm::faultHandler(regs*)+0x97>
c0018c79:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018c7c:	b1 03                	mov    cl,0x3
c0018c7e:	e9 af fe ff ff       	jmp    c0018b32 <Vm::faultHandler(regs*)+0x97>
c0018c83:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018c86:	b1 04                	mov    cl,0x4
c0018c88:	e9 a5 fe ff ff       	jmp    c0018b32 <Vm::faultHandler(regs*)+0x97>
c0018c8d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018c90:	b1 05                	mov    cl,0x5
c0018c92:	e9 9b fe ff ff       	jmp    c0018b32 <Vm::faultHandler(regs*)+0x97>
c0018c97:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018c9a:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0018c9f:	e9 8e fe ff ff       	jmp    c0018b32 <Vm::faultHandler(regs*)+0x97>
c0018ca4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018ca7:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0018cac:	e9 81 fe ff ff       	jmp    c0018b32 <Vm::faultHandler(regs*)+0x97>
c0018cb1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018cb4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018cb8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018cbd:	74 30                	je     c0018cef <Vm::faultHandler(regs*)+0x254>
c0018cbf:	83 e9 04             	sub    ecx,0x4
c0018cc2:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018cc8:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018cce:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018cd1:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018cd4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018cda:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018cde:	0f 84 8c 03 00 00    	je     c0019070 <Vm::faultHandler(regs*)+0x5d5>
c0018ce4:	80 ce 02             	or     dh,0x2
c0018ce7:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018cea:	e9 81 03 00 00       	jmp    c0019070 <Vm::faultHandler(regs*)+0x5d5>
c0018cef:	83 e9 02             	sub    ecx,0x2
c0018cf2:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018cf8:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018cfb:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018cff:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018d05:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018d09:	74 05                	je     c0018d10 <Vm::faultHandler(regs*)+0x275>
c0018d0b:	80 ce 02             	or     dh,0x2
c0018d0e:	eb 03                	jmp    c0018d13 <Vm::faultHandler(regs*)+0x278>
c0018d10:	80 e6 fd             	and    dh,0xfd
c0018d13:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018d17:	e9 54 03 00 00       	jmp    c0019070 <Vm::faultHandler(regs*)+0x5d5>
c0018d1c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018d21:	74 2a                	je     c0018d4d <Vm::faultHandler(regs*)+0x2b2>
c0018d23:	8b 10                	mov    edx,DWORD PTR [eax]
c0018d25:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018d2b:	81 ca 00 02 02 00    	or     edx,0x20200
c0018d31:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018d34:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d36:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018d3c:	c1 e8 09             	shr    eax,0x9
c0018d3f:	83 e0 01             	and    eax,0x1
c0018d42:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018d45:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018d48:	83 c0 04             	add    eax,0x4
c0018d4b:	eb 25                	jmp    c0018d72 <Vm::faultHandler(regs*)+0x2d7>
c0018d4d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018d50:	81 ca 00 02 02 00    	or     edx,0x20200
c0018d56:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018d59:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018d5c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018d62:	66 c1 e8 09          	shr    ax,0x9
c0018d66:	83 e0 01             	and    eax,0x1
c0018d69:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018d6c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018d6f:	83 c0 02             	add    eax,0x2
c0018d72:	25 ff ff 00 00       	and    eax,0xffff
c0018d77:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018d7a:	e9 f1 02 00 00       	jmp    c0019070 <Vm::faultHandler(regs*)+0x5d5>
c0018d7f:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018d83:	3c ff                	cmp    al,0xff
c0018d85:	75 10                	jne    c0018d97 <Vm::faultHandler(regs*)+0x2fc>
c0018d87:	83 ec 0c             	sub    esp,0xc
c0018d8a:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0018d8d:	e8 8c f9 ff ff       	call   c001871e <Thr::terminateFromIRQ(int)>
c0018d92:	e9 c2 02 00 00       	jmp    c0019059 <Vm::faultHandler(regs*)+0x5be>
c0018d97:	83 ec 0c             	sub    esp,0xc
c0018d9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018d9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018da2:	57                   	push   edi
c0018da3:	50                   	push   eax
c0018da4:	53                   	push   ebx
c0018da5:	e8 f3 fb ff ff       	call   c001899d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018daa:	83 c4 20             	add    esp,0x20
c0018dad:	e9 c1 02 00 00       	jmp    c0019073 <Vm::faultHandler(regs*)+0x5d8>
c0018db2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018db7:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018dbb:	e9 b0 02 00 00       	jmp    c0019070 <Vm::faultHandler(regs*)+0x5d5>
c0018dc0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018dc5:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018dc9:	e9 a2 02 00 00       	jmp    c0019070 <Vm::faultHandler(regs*)+0x5d5>
c0018dce:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018dd3:	74 0d                	je     c0018de2 <Vm::faultHandler(regs*)+0x347>
c0018dd5:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0018ddc:	0f 87 e9 02 00 00    	ja     c00190cb <Vm::faultHandler(regs*)+0x630>
c0018de2:	83 ec 0c             	sub    esp,0xc
c0018de5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0018de8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018dec:	50                   	push   eax
c0018ded:	e8 4f fa ff ff       	call   c0018841 <Vm::inbv(unsigned short)>
c0018df2:	83 c4 0c             	add    esp,0xc
c0018df5:	0f b6 c0             	movzx  eax,al
c0018df8:	0f b7 c9             	movzx  ecx,cx
c0018dfb:	50                   	push   eax
c0018dfc:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0018e00:	50                   	push   eax
c0018e01:	51                   	push   ecx
c0018e02:	e8 54 fc ff ff       	call   c0018a5b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018e07:	83 c4 10             	add    esp,0x10
c0018e0a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018e0d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018e11:	74 03                	je     c0018e16 <Vm::faultHandler(regs*)+0x37b>
c0018e13:	48                   	dec    eax
c0018e14:	eb 01                	jmp    c0018e17 <Vm::faultHandler(regs*)+0x37c>
c0018e16:	40                   	inc    eax
c0018e17:	0f b7 c0             	movzx  eax,ax
c0018e1a:	eb 70                	jmp    c0018e8c <Vm::faultHandler(regs*)+0x3f1>
c0018e1c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018e1f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0018e22:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018e27:	74 0c                	je     c0018e35 <Vm::faultHandler(regs*)+0x39a>
c0018e29:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018e2f:	0f 87 96 02 00 00    	ja     c00190cb <Vm::faultHandler(regs*)+0x630>
c0018e35:	0f b7 c9             	movzx  ecx,cx
c0018e38:	0f b7 f6             	movzx  esi,si
c0018e3b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018e3e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018e43:	74 20                	je     c0018e65 <Vm::faultHandler(regs*)+0x3ca>
c0018e45:	ed                   	in     eax,dx
c0018e46:	55                   	push   ebp
c0018e47:	50                   	push   eax
c0018e48:	51                   	push   ecx
c0018e49:	56                   	push   esi
c0018e4a:	e8 37 fc ff ff       	call   c0018a86 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018e4f:	83 c4 10             	add    esp,0x10
c0018e52:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018e55:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018e59:	74 05                	je     c0018e60 <Vm::faultHandler(regs*)+0x3c5>
c0018e5b:	83 e8 04             	sub    eax,0x4
c0018e5e:	eb 27                	jmp    c0018e87 <Vm::faultHandler(regs*)+0x3ec>
c0018e60:	83 c0 04             	add    eax,0x4
c0018e63:	eb 22                	jmp    c0018e87 <Vm::faultHandler(regs*)+0x3ec>
c0018e65:	66 ed                	in     ax,dx
c0018e67:	0f b7 c0             	movzx  eax,ax
c0018e6a:	57                   	push   edi
c0018e6b:	50                   	push   eax
c0018e6c:	51                   	push   ecx
c0018e6d:	56                   	push   esi
c0018e6e:	e8 fd fb ff ff       	call   c0018a70 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018e73:	83 c4 10             	add    esp,0x10
c0018e76:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018e79:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018e7d:	74 05                	je     c0018e84 <Vm::faultHandler(regs*)+0x3e9>
c0018e7f:	83 e8 02             	sub    eax,0x2
c0018e82:	eb 03                	jmp    c0018e87 <Vm::faultHandler(regs*)+0x3ec>
c0018e84:	83 c0 02             	add    eax,0x2
c0018e87:	25 ff ff 00 00       	and    eax,0xffff
c0018e8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018e8f:	e9 dc 01 00 00       	jmp    c0019070 <Vm::faultHandler(regs*)+0x5d5>
c0018e94:	49                   	dec    ecx
c0018e95:	80 f9 05             	cmp    cl,0x5
c0018e98:	77 24                	ja     c0018ebe <Vm::faultHandler(regs*)+0x423>
c0018e9a:	0f b6 c9             	movzx  ecx,cl
c0018e9d:	ff 24 8d cc 1f 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffde034]
c0018ea4:	0f b7 f5             	movzx  esi,bp
c0018ea7:	eb 15                	jmp    c0018ebe <Vm::faultHandler(regs*)+0x423>
c0018ea9:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0018ead:	eb 0f                	jmp    c0018ebe <Vm::faultHandler(regs*)+0x423>
c0018eaf:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0018eb3:	eb 09                	jmp    c0018ebe <Vm::faultHandler(regs*)+0x423>
c0018eb5:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0018eb9:	eb 03                	jmp    c0018ebe <Vm::faultHandler(regs*)+0x423>
c0018ebb:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0018ebe:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018ec1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018ec6:	74 0b                	je     c0018ed3 <Vm::faultHandler(regs*)+0x438>
c0018ec8:	3d ff ff 00 00       	cmp    eax,0xffff
c0018ecd:	0f 87 f8 01 00 00    	ja     c00190cb <Vm::faultHandler(regs*)+0x630>
c0018ed3:	0f b7 c0             	movzx  eax,ax
c0018ed6:	52                   	push   edx
c0018ed7:	52                   	push   edx
c0018ed8:	50                   	push   eax
c0018ed9:	56                   	push   esi
c0018eda:	e8 48 fb ff ff       	call   c0018a27 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0018edf:	59                   	pop    ecx
c0018ee0:	0f b6 c0             	movzx  eax,al
c0018ee3:	5e                   	pop    esi
c0018ee4:	50                   	push   eax
c0018ee5:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018ee9:	50                   	push   eax
c0018eea:	e8 58 f9 ff ff       	call   c0018847 <Vm::outbv(unsigned short, unsigned char)>
c0018eef:	83 c4 10             	add    esp,0x10
c0018ef2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018ef5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018ef9:	74 03                	je     c0018efe <Vm::faultHandler(regs*)+0x463>
c0018efb:	48                   	dec    eax
c0018efc:	eb 01                	jmp    c0018eff <Vm::faultHandler(regs*)+0x464>
c0018efe:	40                   	inc    eax
c0018eff:	0f b7 c0             	movzx  eax,ax
c0018f02:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018f05:	e9 66 01 00 00       	jmp    c0019070 <Vm::faultHandler(regs*)+0x5d5>
c0018f0a:	49                   	dec    ecx
c0018f0b:	80 f9 05             	cmp    cl,0x5
c0018f0e:	77 1f                	ja     c0018f2f <Vm::faultHandler(regs*)+0x494>
c0018f10:	0f b6 c9             	movzx  ecx,cl
c0018f13:	ff 24 8d e4 1f 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffde01c]
c0018f1a:	89 ee                	mov    esi,ebp
c0018f1c:	eb 11                	jmp    c0018f2f <Vm::faultHandler(regs*)+0x494>
c0018f1e:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0018f21:	eb 0c                	jmp    c0018f2f <Vm::faultHandler(regs*)+0x494>
c0018f23:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018f26:	eb 07                	jmp    c0018f2f <Vm::faultHandler(regs*)+0x494>
c0018f28:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0018f2b:	eb 02                	jmp    c0018f2f <Vm::faultHandler(regs*)+0x494>
c0018f2d:	8b 33                	mov    esi,DWORD PTR [ebx]
c0018f2f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0018f32:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018f37:	74 0c                	je     c0018f45 <Vm::faultHandler(regs*)+0x4aa>
c0018f39:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018f3f:	0f 87 86 01 00 00    	ja     c00190cb <Vm::faultHandler(regs*)+0x630>
c0018f45:	0f b7 d6             	movzx  edx,si
c0018f48:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0018f4b:	0f b7 c1             	movzx  eax,cx
c0018f4e:	81 e7 00 04 00 00    	and    edi,0x400
c0018f54:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0018f57:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018f5c:	74 1d                	je     c0018f7b <Vm::faultHandler(regs*)+0x4e0>
c0018f5e:	55                   	push   ebp
c0018f5f:	55                   	push   ebp
c0018f60:	50                   	push   eax
c0018f61:	52                   	push   edx
c0018f62:	e8 e3 fa ff ff       	call   c0018a4a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0018f67:	83 c4 10             	add    esp,0x10
c0018f6a:	89 f2                	mov    edx,esi
c0018f6c:	ef                   	out    dx,eax
c0018f6d:	85 ff                	test   edi,edi
c0018f6f:	74 05                	je     c0018f76 <Vm::faultHandler(regs*)+0x4db>
c0018f71:	83 e9 04             	sub    ecx,0x4
c0018f74:	eb 21                	jmp    c0018f97 <Vm::faultHandler(regs*)+0x4fc>
c0018f76:	83 c1 04             	add    ecx,0x4
c0018f79:	eb 1c                	jmp    c0018f97 <Vm::faultHandler(regs*)+0x4fc>
c0018f7b:	55                   	push   ebp
c0018f7c:	55                   	push   ebp
c0018f7d:	50                   	push   eax
c0018f7e:	52                   	push   edx
c0018f7f:	e8 b4 fa ff ff       	call   c0018a38 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0018f84:	83 c4 10             	add    esp,0x10
c0018f87:	89 f2                	mov    edx,esi
c0018f89:	66 ef                	out    dx,ax
c0018f8b:	85 ff                	test   edi,edi
c0018f8d:	74 05                	je     c0018f94 <Vm::faultHandler(regs*)+0x4f9>
c0018f8f:	83 e9 02             	sub    ecx,0x2
c0018f92:	eb 03                	jmp    c0018f97 <Vm::faultHandler(regs*)+0x4fc>
c0018f94:	83 c1 02             	add    ecx,0x2
c0018f97:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018f9d:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0018fa0:	e9 cb 00 00 00       	jmp    c0019070 <Vm::faultHandler(regs*)+0x5d5>
c0018fa5:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018fac:	83 ec 0c             	sub    esp,0xc
c0018faf:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018fb3:	50                   	push   eax
c0018fb4:	e8 88 f8 ff ff       	call   c0018841 <Vm::inbv(unsigned short)>
c0018fb9:	0f b6 c0             	movzx  eax,al
c0018fbc:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018fbf:	eb 3f                	jmp    c0019000 <Vm::faultHandler(regs*)+0x565>
c0018fc1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018fc6:	74 07                	je     c0018fcf <Vm::faultHandler(regs*)+0x534>
c0018fc8:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018fcc:	ed                   	in     eax,dx
c0018fcd:	eb 14                	jmp    c0018fe3 <Vm::faultHandler(regs*)+0x548>
c0018fcf:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0018fd2:	66 31 c9             	xor    cx,cx
c0018fd5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0018fd8:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018fdc:	66 ed                	in     ax,dx
c0018fde:	0f b7 c0             	movzx  eax,ax
c0018fe1:	09 c8                	or     eax,ecx
c0018fe3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018fe6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018fea:	e9 84 00 00 00       	jmp    c0019073 <Vm::faultHandler(regs*)+0x5d8>
c0018fef:	52                   	push   edx
c0018ff0:	52                   	push   edx
c0018ff1:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018ff5:	50                   	push   eax
c0018ff6:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018ffa:	50                   	push   eax
c0018ffb:	e8 47 f8 ff ff       	call   c0018847 <Vm::outbv(unsigned short, unsigned char)>
c0019000:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019004:	eb 53                	jmp    c0019059 <Vm::faultHandler(regs*)+0x5be>
c0019006:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019009:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001900d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019012:	74 03                	je     c0019017 <Vm::faultHandler(regs*)+0x57c>
c0019014:	ef                   	out    dx,eax
c0019015:	eb cf                	jmp    c0018fe6 <Vm::faultHandler(regs*)+0x54b>
c0019017:	66 ef                	out    dx,ax
c0019019:	eb cb                	jmp    c0018fe6 <Vm::faultHandler(regs*)+0x54b>
c001901b:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019022:	83 ec 0c             	sub    esp,0xc
c0019025:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019029:	50                   	push   eax
c001902a:	e8 12 f8 ff ff       	call   c0018841 <Vm::inbv(unsigned short)>
c001902f:	0f b6 c0             	movzx  eax,al
c0019032:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019035:	eb 1f                	jmp    c0019056 <Vm::faultHandler(regs*)+0x5bb>
c0019037:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001903a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001903f:	74 03                	je     c0019044 <Vm::faultHandler(regs*)+0x5a9>
c0019041:	ed                   	in     eax,dx
c0019042:	eb 0d                	jmp    c0019051 <Vm::faultHandler(regs*)+0x5b6>
c0019044:	66 ed                	in     ax,dx
c0019046:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019049:	0f b7 c0             	movzx  eax,ax
c001904c:	66 31 d2             	xor    dx,dx
c001904f:	09 d0                	or     eax,edx
c0019051:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019054:	eb 1a                	jmp    c0019070 <Vm::faultHandler(regs*)+0x5d5>
c0019056:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019059:	83 c4 10             	add    esp,0x10
c001905c:	eb 15                	jmp    c0019073 <Vm::faultHandler(regs*)+0x5d8>
c001905e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019061:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019064:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019069:	74 03                	je     c001906e <Vm::faultHandler(regs*)+0x5d3>
c001906b:	ef                   	out    dx,eax
c001906c:	eb 02                	jmp    c0019070 <Vm::faultHandler(regs*)+0x5d5>
c001906e:	66 ef                	out    dx,ax
c0019070:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019073:	b0 01                	mov    al,0x1
c0019075:	eb 56                	jmp    c00190cd <Vm::faultHandler(regs*)+0x632>
c0019077:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c001907b:	50                   	push   eax
c001907c:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0019080:	50                   	push   eax
c0019081:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0019085:	50                   	push   eax
c0019086:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c001908a:	50                   	push   eax
c001908b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001908f:	50                   	push   eax
c0019090:	52                   	push   edx
c0019091:	52                   	push   edx
c0019092:	68 9e 1f 02 c0       	push   0xc0021f9e
c0019097:	e8 43 5e ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001909c:	83 c4 20             	add    esp,0x20
c001909f:	83 ec 0c             	sub    esp,0xc
c00190a2:	6a 60                	push   0x60
c00190a4:	e8 98 f7 ff ff       	call   c0018841 <Vm::inbv(unsigned short)>
c00190a9:	83 c4 10             	add    esp,0x10
c00190ac:	3c 1c                	cmp    al,0x1c
c00190ae:	74 04                	je     c00190b4 <Vm::faultHandler(regs*)+0x619>
c00190b0:	3c 5a                	cmp    al,0x5a
c00190b2:	75 eb                	jne    c001909f <Vm::faultHandler(regs*)+0x604>
c00190b4:	3c 5a                	cmp    al,0x5a
c00190b6:	74 04                	je     c00190bc <Vm::faultHandler(regs*)+0x621>
c00190b8:	3c 1c                	cmp    al,0x1c
c00190ba:	75 0f                	jne    c00190cb <Vm::faultHandler(regs*)+0x630>
c00190bc:	83 ec 0c             	sub    esp,0xc
c00190bf:	6a 60                	push   0x60
c00190c1:	e8 7b f7 ff ff       	call   c0018841 <Vm::inbv(unsigned short)>
c00190c6:	83 c4 10             	add    esp,0x10
c00190c9:	eb e9                	jmp    c00190b4 <Vm::faultHandler(regs*)+0x619>
c00190cb:	31 c0                	xor    eax,eax
c00190cd:	83 c4 1c             	add    esp,0x1c
c00190d0:	5b                   	pop    ebx
c00190d1:	5e                   	pop    esi
c00190d2:	5f                   	pop    edi
c00190d3:	5d                   	pop    ebp
c00190d4:	c3                   	ret    
c00190d5:	90                   	nop

c00190d6 <FAT::getName()>:
c00190d6:	b8 fc 1f 02 c0       	mov    eax,0xc0021ffc
c00190db:	c3                   	ret    

c00190dc <FAT::tell(void*, unsigned long long*)>:
c00190dc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00190e1:	75 06                	jne    c00190e9 <FAT::tell(void*, unsigned long long*)+0xd>
c00190e3:	b8 04 00 00 00       	mov    eax,0x4
c00190e8:	c3                   	ret    
c00190e9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00190ee:	75 06                	jne    c00190f6 <FAT::tell(void*, unsigned long long*)+0x1a>
c00190f0:	b8 04 00 00 00       	mov    eax,0x4
c00190f5:	c3                   	ret    
c00190f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00190fa:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00190fd:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019100:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019104:	89 01                	mov    DWORD PTR [ecx],eax
c0019106:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019109:	b8 00 00 00 00       	mov    eax,0x0
c001910e:	c3                   	ret    
c001910f:	90                   	nop

c0019110 <FAT::stat(void*, unsigned long long*)>:
c0019110:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019115:	75 06                	jne    c001911d <FAT::stat(void*, unsigned long long*)+0xd>
c0019117:	b8 04 00 00 00       	mov    eax,0x4
c001911c:	c3                   	ret    
c001911d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019122:	75 06                	jne    c001912a <FAT::stat(void*, unsigned long long*)+0x1a>
c0019124:	b8 04 00 00 00       	mov    eax,0x4
c0019129:	c3                   	ret    
c001912a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001912e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019131:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019134:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019138:	89 01                	mov    DWORD PTR [ecx],eax
c001913a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001913d:	b8 00 00 00 00       	mov    eax,0x0
c0019142:	c3                   	ret    
c0019143:	90                   	nop

c0019144 <FAT::~FAT()>:
c0019144:	83 ec 0c             	sub    esp,0xc
c0019147:	ba 80 20 02 c0       	mov    edx,0xc0022080
c001914c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019150:	89 10                	mov    DWORD PTR [eax],edx
c0019152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019156:	83 ec 0c             	sub    esp,0xc
c0019159:	50                   	push   eax
c001915a:	e8 a9 60 ff ff       	call   c000f208 <Filesystem::~Filesystem()>
c001915f:	83 c4 10             	add    esp,0x10
c0019162:	90                   	nop
c0019163:	83 c4 0c             	add    esp,0xc
c0019166:	c3                   	ret    
c0019167:	90                   	nop

c0019168 <FAT::~FAT()>:
c0019168:	83 ec 0c             	sub    esp,0xc
c001916b:	83 ec 0c             	sub    esp,0xc
c001916e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019172:	e8 cd ff ff ff       	call   c0019144 <FAT::~FAT()>
c0019177:	83 c4 10             	add    esp,0x10
c001917a:	83 ec 08             	sub    esp,0x8
c001917d:	6a 08                	push   0x8
c001917f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019183:	e8 77 5c ff ff       	call   c000edff <operator delete(void*, unsigned long)>
c0019188:	83 c4 10             	add    esp,0x10
c001918b:	83 c4 0c             	add    esp,0xc
c001918e:	c3                   	ret    
c001918f:	90                   	nop

c0019190 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019190:	83 ec 1c             	sub    esp,0x1c
c0019193:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001919a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001919f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00191a3:	8b 04 85 20 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb6e0]
c00191aa:	83 f8 ff             	cmp    eax,0xffffffff
c00191ad:	75 34                	jne    c00191e3 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00191af:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00191b3:	88 c2                	mov    dl,al
c00191b5:	a1 00 49 02 c0       	mov    eax,ds:0xc0024900
c00191ba:	01 d0                	add    eax,edx
c00191bc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00191c0:	8b 15 00 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024900
c00191c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00191ca:	89 14 85 20 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb6e0],edx
c00191d1:	a1 00 49 02 c0       	mov    eax,ds:0xc0024900
c00191d6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00191da:	89 14 85 a0 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb660],edx
c00191e1:	eb 17                	jmp    c00191fa <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00191e3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00191e7:	88 c2                	mov    dl,al
c00191e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00191ed:	8b 04 85 20 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb6e0]
c00191f4:	01 d0                	add    eax,edx
c00191f6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00191fa:	83 ec 04             	sub    esp,0x4
c00191fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019205:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019209:	50                   	push   eax
c001920a:	e8 56 d8 fe ff       	call   c0006a65 <f_getlabel>
c001920f:	83 c4 10             	add    esp,0x10
c0019212:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019216:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001921b:	75 07                	jne    c0019224 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001921d:	b8 00 00 00 00       	mov    eax,0x0
c0019222:	eb 05                	jmp    c0019229 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0019224:	b8 01 00 00 00       	mov    eax,0x1
c0019229:	83 c4 1c             	add    esp,0x1c
c001922c:	c3                   	ret    
c001922d:	90                   	nop

c001922e <FAT::setlabel(LogicalDisk*, int, char*)>:
c001922e:	57                   	push   edi
c001922f:	83 ec 58             	sub    esp,0x58
c0019232:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001923a:	8d 54 24 10          	lea    edx,[esp+0x10]
c001923e:	b9 0f 00 00 00       	mov    ecx,0xf
c0019243:	b8 00 00 00 00       	mov    eax,0x0
c0019248:	fc                   	cld    
c0019249:	89 d7                	mov    edi,edx
c001924b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001924d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019251:	8b 04 85 20 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb6e0]
c0019258:	83 f8 ff             	cmp    eax,0xffffffff
c001925b:	75 34                	jne    c0019291 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001925d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019261:	88 c2                	mov    dl,al
c0019263:	a1 00 49 02 c0       	mov    eax,ds:0xc0024900
c0019268:	01 d0                	add    eax,edx
c001926a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001926e:	8b 15 00 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024900
c0019274:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019278:	89 14 85 20 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb6e0],edx
c001927f:	a1 00 49 02 c0       	mov    eax,ds:0xc0024900
c0019284:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019288:	89 14 85 a0 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb660],edx
c001928f:	eb 17                	jmp    c00192a8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0019291:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019295:	88 c2                	mov    dl,al
c0019297:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001929b:	8b 04 85 20 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb6e0]
c00192a2:	01 d0                	add    eax,edx
c00192a4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00192a8:	83 ec 08             	sub    esp,0x8
c00192ab:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00192af:	8d 44 24 18          	lea    eax,[esp+0x18]
c00192b3:	50                   	push   eax
c00192b4:	e8 a5 74 fe ff       	call   c000075e <strcat>
c00192b9:	83 c4 10             	add    esp,0x10
c00192bc:	83 ec 0c             	sub    esp,0xc
c00192bf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00192c3:	50                   	push   eax
c00192c4:	e8 8a d9 fe ff       	call   c0006c53 <f_setlabel>
c00192c9:	83 c4 10             	add    esp,0x10
c00192cc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00192d0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00192d5:	75 07                	jne    c00192de <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00192d7:	b8 00 00 00 00       	mov    eax,0x0
c00192dc:	eb 05                	jmp    c00192e3 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00192de:	b8 01 00 00 00       	mov    eax,0x1
c00192e3:	83 c4 58             	add    esp,0x58
c00192e6:	5f                   	pop    edi
c00192e7:	c3                   	ret    

c00192e8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00192e8:	83 ec 2c             	sub    esp,0x2c
c00192eb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00192f3:	83 ec 08             	sub    esp,0x8
c00192f6:	68 20 20 02 c0       	push   0xc0022020
c00192fb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00192ff:	e8 f4 73 fe ff       	call   c00006f8 <strcmp>
c0019304:	83 c4 10             	add    esp,0x10
c0019307:	85 c0                	test   eax,eax
c0019309:	0f 94 c0             	sete   al
c001930c:	84 c0                	test   al,al
c001930e:	74 0d                	je     c001931d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0019310:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019318:	e9 a6 00 00 00       	jmp    c00193c3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001931d:	83 ec 08             	sub    esp,0x8
c0019320:	68 12 20 02 c0       	push   0xc0022012
c0019325:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019329:	e8 ca 73 fe ff       	call   c00006f8 <strcmp>
c001932e:	83 c4 10             	add    esp,0x10
c0019331:	85 c0                	test   eax,eax
c0019333:	0f 94 c0             	sete   al
c0019336:	84 c0                	test   al,al
c0019338:	74 0a                	je     c0019344 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001933a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019342:	eb 7f                	jmp    c00193c3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019344:	83 ec 08             	sub    esp,0x8
c0019347:	68 18 20 02 c0       	push   0xc0022018
c001934c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019350:	e8 a3 73 fe ff       	call   c00006f8 <strcmp>
c0019355:	83 c4 10             	add    esp,0x10
c0019358:	85 c0                	test   eax,eax
c001935a:	0f 94 c0             	sete   al
c001935d:	84 c0                	test   al,al
c001935f:	74 0a                	je     c001936b <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0019361:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019369:	eb 58                	jmp    c00193c3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001936b:	83 ec 08             	sub    esp,0x8
c001936e:	68 2c f6 01 c0       	push   0xc001f62c
c0019373:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019377:	e8 7c 73 fe ff       	call   c00006f8 <strcmp>
c001937c:	83 c4 10             	add    esp,0x10
c001937f:	85 c0                	test   eax,eax
c0019381:	0f 94 c0             	sete   al
c0019384:	84 c0                	test   al,al
c0019386:	74 0a                	je     c0019392 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0019388:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019390:	eb 31                	jmp    c00193c3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019392:	83 ec 08             	sub    esp,0x8
c0019395:	68 1e 20 02 c0       	push   0xc002201e
c001939a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001939e:	e8 55 73 fe ff       	call   c00006f8 <strcmp>
c00193a3:	83 c4 10             	add    esp,0x10
c00193a6:	85 c0                	test   eax,eax
c00193a8:	0f 94 c0             	sete   al
c00193ab:	84 c0                	test   al,al
c00193ad:	74 0a                	je     c00193b9 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00193af:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00193b7:	eb 0a                	jmp    c00193c3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00193b9:	b8 08 00 00 00       	mov    eax,0x8
c00193be:	e9 04 01 00 00       	jmp    c00194c7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00193c3:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00193ca:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00193cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00193d3:	8b 04 85 20 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb6e0]
c00193da:	83 f8 ff             	cmp    eax,0xffffffff
c00193dd:	75 34                	jne    c0019413 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00193df:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00193e3:	88 c2                	mov    dl,al
c00193e5:	a1 00 49 02 c0       	mov    eax,ds:0xc0024900
c00193ea:	01 d0                	add    eax,edx
c00193ec:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00193f0:	8b 15 00 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024900
c00193f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00193fa:	89 14 85 20 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb6e0],edx
c0019401:	a1 00 49 02 c0       	mov    eax,ds:0xc0024900
c0019406:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001940a:	89 14 85 a0 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb660],edx
c0019411:	eb 17                	jmp    c001942a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0019413:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019417:	88 c2                	mov    dl,al
c0019419:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001941d:	8b 04 85 20 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb6e0]
c0019424:	01 d0                	add    eax,edx
c0019426:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001942a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001942e:	88 04 24             	mov    BYTE PTR [esp],al
c0019431:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019435:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019439:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019441:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019446:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001944e:	83 ec 0c             	sub    esp,0xc
c0019451:	68 00 20 00 00       	push   0x2000
c0019456:	e8 c3 27 ff ff       	call   c000bc1e <malloc>
c001945b:	83 c4 10             	add    esp,0x10
c001945e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019462:	68 00 20 00 00       	push   0x2000
c0019467:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001946b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001946f:	50                   	push   eax
c0019470:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019474:	50                   	push   eax
c0019475:	e8 24 dc fe ff       	call   c000709e <f_mkfs>
c001947a:	83 c4 10             	add    esp,0x10
c001947d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019481:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019486:	75 07                	jne    c001948f <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0019488:	b8 00 00 00 00       	mov    eax,0x0
c001948d:	eb 38                	jmp    c00194c7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001948f:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019494:	75 17                	jne    c00194ad <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0019496:	83 ec 0c             	sub    esp,0xc
c0019499:	68 50 20 02 c0       	push   0xc0022050
c001949e:	e8 3c 5a ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c00194a3:	83 c4 10             	add    esp,0x10
c00194a6:	b8 09 00 00 00       	mov    eax,0x9
c00194ab:	eb 1a                	jmp    c00194c7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00194ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00194b1:	83 ec 08             	sub    esp,0x8
c00194b4:	50                   	push   eax
c00194b5:	68 24 20 02 c0       	push   0xc0022024
c00194ba:	e8 20 5a ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c00194bf:	83 c4 10             	add    esp,0x10
c00194c2:	b8 01 00 00 00       	mov    eax,0x1
c00194c7:	83 c4 2c             	add    esp,0x2c
c00194ca:	c3                   	ret    
c00194cb:	90                   	nop

c00194cc <FAT::tryMount(LogicalDisk*, int)>:
c00194cc:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00194d2:	a1 00 49 02 c0       	mov    eax,ds:0xc0024900
c00194d7:	83 f8 14             	cmp    eax,0x14
c00194da:	75 17                	jne    c00194f3 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00194dc:	83 ec 0c             	sub    esp,0xc
c00194df:	68 36 20 02 c0       	push   0xc0022036
c00194e4:	e8 8b b6 ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c00194e9:	83 c4 10             	add    esp,0x10
c00194ec:	b0 00                	mov    al,0x0
c00194ee:	e9 d7 01 00 00       	jmp    c00196ca <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00194f3:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00194fa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019500:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019506:	3d 00 02 00 00       	cmp    eax,0x200
c001950b:	74 07                	je     c0019514 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001950d:	b0 00                	mov    al,0x0
c001950f:	e9 b6 01 00 00       	jmp    c00196ca <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019514:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001951c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0019523:	8b 04 85 20 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb6e0]
c001952a:	83 f8 ff             	cmp    eax,0xffffffff
c001952d:	74 07                	je     c0019536 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001952f:	b0 01                	mov    al,0x1
c0019531:	e9 94 01 00 00       	jmp    c00196ca <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019536:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0019540:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0019548:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001954f:	88 c2                	mov    dl,al
c0019551:	a1 00 49 02 c0       	mov    eax,ds:0xc0024900
c0019556:	01 d0                	add    eax,edx
c0019558:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001955f:	8b 15 00 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024900
c0019565:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001956c:	89 14 85 20 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb6e0],edx
c0019573:	a1 00 49 02 c0       	mov    eax,ds:0xc0024900
c0019578:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001957f:	89 14 85 a0 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb660],edx
c0019586:	83 ec 0c             	sub    esp,0xc
c0019589:	68 54 02 00 00       	push   0x254
c001958e:	e8 8b 26 ff ff       	call   c000bc1e <malloc>
c0019593:	83 c4 10             	add    esp,0x10
c0019596:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001959d:	83 ec 04             	sub    esp,0x4
c00195a0:	6a 00                	push   0x0
c00195a2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00195a9:	50                   	push   eax
c00195aa:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00195b1:	e8 a6 b6 fe ff       	call   c0004c5c <f_mount>
c00195b6:	83 c4 10             	add    esp,0x10
c00195b9:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00195c0:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00195c8:	74 19                	je     c00195e3 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00195ca:	83 ec 0c             	sub    esp,0xc
c00195cd:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00195d4:	e8 65 26 ff ff       	call   c000bc3e <rfree>
c00195d9:	83 c4 10             	add    esp,0x10
c00195dc:	b0 00                	mov    al,0x0
c00195de:	e9 e7 00 00 00       	jmp    c00196ca <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00195e3:	83 ec 04             	sub    esp,0x4
c00195e6:	68 00 01 00 00       	push   0x100
c00195eb:	6a 00                	push   0x0
c00195ed:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00195f4:	50                   	push   eax
c00195f5:	e8 0e 70 fe ff       	call   c0000608 <memset>
c00195fa:	83 c4 10             	add    esp,0x10
c00195fd:	83 ec 08             	sub    esp,0x8
c0019600:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019607:	50                   	push   eax
c0019608:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001960f:	50                   	push   eax
c0019610:	e8 49 71 fe ff       	call   c000075e <strcat>
c0019615:	83 c4 10             	add    esp,0x10
c0019618:	83 ec 08             	sub    esp,0x8
c001961b:	68 44 20 02 c0       	push   0xc0022044
c0019620:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019627:	50                   	push   eax
c0019628:	e8 31 71 fe ff       	call   c000075e <strcat>
c001962d:	83 c4 10             	add    esp,0x10
c0019630:	83 ec 04             	sub    esp,0x4
c0019633:	6a 01                	push   0x1
c0019635:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001963c:	50                   	push   eax
c001963d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019641:	50                   	push   eax
c0019642:	e8 77 b6 fe ff       	call   c0004cbe <f_open>
c0019647:	83 c4 10             	add    esp,0x10
c001964a:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019651:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019658:	85 c0                	test   eax,eax
c001965a:	74 0a                	je     c0019666 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001965c:	78 2d                	js     c001968b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001965e:	83 e8 04             	sub    eax,0x4
c0019661:	83 f8 01             	cmp    eax,0x1
c0019664:	77 25                	ja     c001968b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0019666:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001966e:	83 ec 0c             	sub    esp,0xc
c0019671:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019675:	50                   	push   eax
c0019676:	e8 95 c1 fe ff       	call   c0005810 <f_close>
c001967b:	83 c4 10             	add    esp,0x10
c001967e:	90                   	nop
c001967f:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0019687:	74 3a                	je     c00196c3 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0019689:	eb 2d                	jmp    c00196b8 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001968b:	83 ec 0c             	sub    esp,0xc
c001968e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019695:	e8 a4 25 ff ff       	call   c000bc3e <rfree>
c001969a:	83 c4 10             	add    esp,0x10
c001969d:	83 ec 04             	sub    esp,0x4
c00196a0:	6a 00                	push   0x0
c00196a2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00196a9:	50                   	push   eax
c00196aa:	6a 00                	push   0x0
c00196ac:	e8 ab b5 fe ff       	call   c0004c5c <f_mount>
c00196b1:	83 c4 10             	add    esp,0x10
c00196b4:	b0 00                	mov    al,0x0
c00196b6:	eb 12                	jmp    c00196ca <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00196b8:	a1 00 49 02 c0       	mov    eax,ds:0xc0024900
c00196bd:	40                   	inc    eax
c00196be:	a3 00 49 02 c0       	mov    ds:0xc0024900,eax
c00196c3:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00196ca:	81 c4 6c 03 00 00    	add    esp,0x36c
c00196d0:	c3                   	ret    
c00196d1:	90                   	nop

c00196d2 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00196d2:	81 ec 3c 02 00 00    	sub    esp,0x23c
c00196d8:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c00196e0:	74 0a                	je     c00196ec <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c00196e2:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c00196ea:	75 0a                	jne    c00196f6 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c00196ec:	b8 04 00 00 00       	mov    eax,0x4
c00196f1:	e9 db 00 00 00       	jmp    c00197d1 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00196f6:	83 ec 08             	sub    esp,0x8
c00196f9:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019700:	50                   	push   eax
c0019701:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0019708:	e8 0d c7 fe ff       	call   c0005e1a <f_readdir>
c001970d:	83 c4 10             	add    esp,0x10
c0019710:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0019717:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001971d:	83 ec 0c             	sub    esp,0xc
c0019720:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0019727:	83 c0 1a             	add    eax,0x1a
c001972a:	50                   	push   eax
c001972b:	e8 f5 6e fe ff       	call   c0000625 <strlen>
c0019730:	83 c4 10             	add    esp,0x10
c0019733:	ba 00 00 00 00       	mov    edx,0x0
c0019738:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001973c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0019740:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0019747:	0f b6 c0             	movzx  eax,al
c001974a:	83 e0 10             	and    eax,0x10
c001974d:	74 07                	je     c0019756 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001974f:	b8 02 00 00 00       	mov    eax,0x2
c0019754:	eb 05                	jmp    c001975b <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0019756:	b8 01 00 00 00       	mov    eax,0x1
c001975b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001975f:	83 ec 08             	sub    esp,0x8
c0019762:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019769:	83 c0 1a             	add    eax,0x1a
c001976c:	50                   	push   eax
c001976d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019771:	83 c0 10             	add    eax,0x10
c0019774:	50                   	push   eax
c0019775:	e8 2d 6f fe ff       	call   c00006a7 <strcpy>
c001977a:	83 c4 10             	add    esp,0x10
c001977d:	83 ec 04             	sub    esp,0x4
c0019780:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0019787:	8d 44 24 08          	lea    eax,[esp+0x8]
c001978b:	50                   	push   eax
c001978c:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0019793:	e8 3a 6e fe ff       	call   c00005d2 <memcpy>
c0019798:	83 c4 10             	add    esp,0x10
c001979b:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c00197a2:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00197a8:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c00197af:	84 c0                	test   al,al
c00197b1:	75 07                	jne    c00197ba <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c00197b3:	b8 07 00 00 00       	mov    eax,0x7
c00197b8:	eb 17                	jmp    c00197d1 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00197ba:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c00197c1:	85 c0                	test   eax,eax
c00197c3:	75 07                	jne    c00197cc <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c00197c5:	b8 00 00 00 00       	mov    eax,0x0
c00197ca:	eb 05                	jmp    c00197d1 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00197cc:	b8 01 00 00 00       	mov    eax,0x1
c00197d1:	81 c4 3c 02 00 00    	add    esp,0x23c
c00197d7:	c3                   	ret    

c00197d8 <FAT::read(void*, unsigned long, void*, int*)>:
c00197d8:	83 ec 1c             	sub    esp,0x1c
c00197db:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00197e0:	74 07                	je     c00197e9 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00197e2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00197e7:	75 07                	jne    c00197f0 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00197e9:	b8 04 00 00 00       	mov    eax,0x4
c00197ee:	eb 3d                	jmp    c001982d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00197f0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00197f4:	50                   	push   eax
c00197f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00197f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00197fd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019801:	e8 f4 b8 fe ff       	call   c00050fa <f_read>
c0019806:	83 c4 10             	add    esp,0x10
c0019809:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001980d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019811:	89 c2                	mov    edx,eax
c0019813:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019817:	89 10                	mov    DWORD PTR [eax],edx
c0019819:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001981d:	85 c0                	test   eax,eax
c001981f:	75 07                	jne    c0019828 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0019821:	b8 00 00 00 00       	mov    eax,0x0
c0019826:	eb 05                	jmp    c001982d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0019828:	b8 01 00 00 00       	mov    eax,0x1
c001982d:	83 c4 1c             	add    esp,0x1c
c0019830:	c3                   	ret    
c0019831:	90                   	nop

c0019832 <FAT::write(void*, unsigned long, void*, int*)>:
c0019832:	83 ec 1c             	sub    esp,0x1c
c0019835:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001983a:	74 07                	je     c0019843 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001983c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019841:	75 07                	jne    c001984a <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0019843:	b8 04 00 00 00       	mov    eax,0x4
c0019848:	eb 3d                	jmp    c0019887 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001984a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001984e:	50                   	push   eax
c001984f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019853:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019857:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001985b:	e8 1a bb fe ff       	call   c000537a <f_write>
c0019860:	83 c4 10             	add    esp,0x10
c0019863:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019867:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001986b:	89 c2                	mov    edx,eax
c001986d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019871:	89 10                	mov    DWORD PTR [eax],edx
c0019873:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019877:	85 c0                	test   eax,eax
c0019879:	75 07                	jne    c0019882 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001987b:	b8 00 00 00 00       	mov    eax,0x0
c0019880:	eb 05                	jmp    c0019887 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0019882:	b8 01 00 00 00       	mov    eax,0x1
c0019887:	83 c4 1c             	add    esp,0x1c
c001988a:	c3                   	ret    
c001988b:	90                   	nop

c001988c <FAT::close(void*)>:
c001988c:	83 ec 1c             	sub    esp,0x1c
c001988f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019894:	75 07                	jne    c001989d <FAT::close(void*)+0x11>
c0019896:	b8 04 00 00 00       	mov    eax,0x4
c001989b:	eb 36                	jmp    c00198d3 <FAT::close(void*)+0x47>
c001989d:	83 ec 0c             	sub    esp,0xc
c00198a0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198a4:	e8 67 bf fe ff       	call   c0005810 <f_close>
c00198a9:	83 c4 10             	add    esp,0x10
c00198ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198b0:	83 ec 0c             	sub    esp,0xc
c00198b3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198b7:	e8 72 23 ff ff       	call   c000bc2e <free>
c00198bc:	83 c4 10             	add    esp,0x10
c00198bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198c3:	85 c0                	test   eax,eax
c00198c5:	75 07                	jne    c00198ce <FAT::close(void*)+0x42>
c00198c7:	b8 00 00 00 00       	mov    eax,0x0
c00198cc:	eb 05                	jmp    c00198d3 <FAT::close(void*)+0x47>
c00198ce:	b8 01 00 00 00       	mov    eax,0x1
c00198d3:	83 c4 1c             	add    esp,0x1c
c00198d6:	c3                   	ret    
c00198d7:	90                   	nop

c00198d8 <FAT::closeDir(void*)>:
c00198d8:	83 ec 1c             	sub    esp,0x1c
c00198db:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00198e0:	75 07                	jne    c00198e9 <FAT::closeDir(void*)+0x11>
c00198e2:	b8 04 00 00 00       	mov    eax,0x4
c00198e7:	eb 36                	jmp    c001991f <FAT::closeDir(void*)+0x47>
c00198e9:	83 ec 0c             	sub    esp,0xc
c00198ec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198f0:	e8 03 c5 fe ff       	call   c0005df8 <f_closedir>
c00198f5:	83 c4 10             	add    esp,0x10
c00198f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198fc:	83 ec 0c             	sub    esp,0xc
c00198ff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019903:	e8 26 23 ff ff       	call   c000bc2e <free>
c0019908:	83 c4 10             	add    esp,0x10
c001990b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001990f:	85 c0                	test   eax,eax
c0019911:	75 07                	jne    c001991a <FAT::closeDir(void*)+0x42>
c0019913:	b8 00 00 00 00       	mov    eax,0x0
c0019918:	eb 05                	jmp    c001991f <FAT::closeDir(void*)+0x47>
c001991a:	b8 01 00 00 00       	mov    eax,0x1
c001991f:	83 c4 1c             	add    esp,0x1c
c0019922:	c3                   	ret    
c0019923:	90                   	nop

c0019924 <FAT::seek(void*, unsigned long long)>:
c0019924:	83 ec 2c             	sub    esp,0x2c
c0019927:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001992b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001992f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019933:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019937:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001993c:	75 07                	jne    c0019945 <FAT::seek(void*, unsigned long long)+0x21>
c001993e:	b8 04 00 00 00       	mov    eax,0x4
c0019943:	eb 2f                	jmp    c0019974 <FAT::seek(void*, unsigned long long)+0x50>
c0019945:	83 ec 04             	sub    esp,0x4
c0019948:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001994c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019950:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019954:	e8 e6 be fe ff       	call   c000583f <f_lseek>
c0019959:	83 c4 10             	add    esp,0x10
c001995c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019960:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019964:	85 c0                	test   eax,eax
c0019966:	75 07                	jne    c001996f <FAT::seek(void*, unsigned long long)+0x4b>
c0019968:	b8 00 00 00 00       	mov    eax,0x0
c001996d:	eb 05                	jmp    c0019974 <FAT::seek(void*, unsigned long long)+0x50>
c001996f:	b8 01 00 00 00       	mov    eax,0x1
c0019974:	83 c4 2c             	add    esp,0x2c
c0019977:	c3                   	ret    

c0019978 <fatWrapperReadDisk>:
c0019978:	83 ec 1c             	sub    esp,0x1c
c001997b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001997f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019983:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019987:	89 04 24             	mov    DWORD PTR [esp],eax
c001998a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001998e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019992:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019997:	8b 04 85 80 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc580]
c001999e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00199a2:	83 ec 0c             	sub    esp,0xc
c00199a5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199a9:	52                   	push   edx
c00199aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00199ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00199b2:	50                   	push   eax
c00199b3:	e8 aa 84 ff ff       	call   c0011e62 <LogicalDisk::read(unsigned long long, int, void*)>
c00199b8:	83 c4 20             	add    esp,0x20
c00199bb:	83 c4 1c             	add    esp,0x1c
c00199be:	c3                   	ret    

c00199bf <fatWrapperWriteDisk>:
c00199bf:	83 ec 1c             	sub    esp,0x1c
c00199c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199c6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00199ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00199ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00199d1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00199d5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00199d9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00199de:	8b 04 85 80 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc580]
c00199e5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00199e9:	83 ec 0c             	sub    esp,0xc
c00199ec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199f0:	52                   	push   edx
c00199f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00199f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00199f9:	50                   	push   eax
c00199fa:	e8 cf 84 ff ff       	call   c0011ece <LogicalDisk::write(unsigned long long, int, void*)>
c00199ff:	83 c4 20             	add    esp,0x20
c0019a02:	83 c4 1c             	add    esp,0x1c
c0019a05:	c3                   	ret    

c0019a06 <fatWrapperIoctl>:
c0019a06:	53                   	push   ebx
c0019a07:	83 ec 28             	sub    esp,0x28
c0019a0a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019a0e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019a12:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019a16:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019a1a:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0019a1f:	75 31                	jne    c0019a52 <fatWrapperIoctl+0x4c>
c0019a21:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a25:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019a29:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019a2e:	8b 04 85 80 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc580]
c0019a35:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019a3b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019a41:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019a45:	66 89 02             	mov    WORD PTR [edx],ax
c0019a48:	b8 00 00 00 00       	mov    eax,0x0
c0019a4d:	e9 b2 00 00 00       	jmp    c0019b04 <fatWrapperIoctl+0xfe>
c0019a52:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0019a57:	75 6a                	jne    c0019ac3 <fatWrapperIoctl+0xbd>
c0019a59:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a5d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019a61:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019a66:	8b 04 85 80 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc580]
c0019a6d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019a73:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019a79:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019a7f:	89 c8                	mov    eax,ecx
c0019a81:	89 da                	mov    edx,ebx
c0019a83:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019a87:	c1 e0 0a             	shl    eax,0xa
c0019a8a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019a8f:	8b 0c 8d 80 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc580]
c0019a96:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019a9c:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019aa2:	89 cb                	mov    ebx,ecx
c0019aa4:	c1 fb 1f             	sar    ebx,0x1f
c0019aa7:	53                   	push   ebx
c0019aa8:	51                   	push   ecx
c0019aa9:	52                   	push   edx
c0019aaa:	50                   	push   eax
c0019aab:	e8 1c 4b 00 00       	call   c001e5cc <__udivdi3>
c0019ab0:	83 c4 10             	add    esp,0x10
c0019ab3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019ab7:	89 01                	mov    DWORD PTR [ecx],eax
c0019ab9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019abc:	b8 00 00 00 00       	mov    eax,0x0
c0019ac1:	eb 41                	jmp    c0019b04 <fatWrapperIoctl+0xfe>
c0019ac3:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0019ac8:	75 07                	jne    c0019ad1 <fatWrapperIoctl+0xcb>
c0019aca:	b8 00 00 00 00       	mov    eax,0x0
c0019acf:	eb 33                	jmp    c0019b04 <fatWrapperIoctl+0xfe>
c0019ad1:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0019ad6:	75 19                	jne    c0019af1 <fatWrapperIoctl+0xeb>
c0019ad8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019adc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019ae0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019ae4:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019aea:	b8 00 00 00 00       	mov    eax,0x0
c0019aef:	eb 13                	jmp    c0019b04 <fatWrapperIoctl+0xfe>
c0019af1:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0019af6:	75 07                	jne    c0019aff <fatWrapperIoctl+0xf9>
c0019af8:	b8 00 00 00 00       	mov    eax,0x0
c0019afd:	eb 05                	jmp    c0019b04 <fatWrapperIoctl+0xfe>
c0019aff:	b8 04 00 00 00       	mov    eax,0x4
c0019b04:	83 c4 28             	add    esp,0x28
c0019b07:	5b                   	pop    ebx
c0019b08:	c3                   	ret    
c0019b09:	90                   	nop

c0019b0a <FAT::FAT()>:
c0019b0a:	83 ec 1c             	sub    esp,0x1c
c0019b0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b11:	83 ec 0c             	sub    esp,0xc
c0019b14:	50                   	push   eax
c0019b15:	e8 ca 56 ff ff       	call   c000f1e4 <Filesystem::Filesystem()>
c0019b1a:	83 c4 10             	add    esp,0x10
c0019b1d:	ba 80 20 02 c0       	mov    edx,0xc0022080
c0019b22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b26:	89 10                	mov    DWORD PTR [eax],edx
c0019b28:	c7 05 00 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024900,0x0
c0019b32:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019b3a:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019b3f:	7f 15                	jg     c0019b56 <FAT::FAT()+0x4c>
c0019b41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b45:	c7 04 85 20 49 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdb6e0],0xffffffff
c0019b50:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019b54:	eb e4                	jmp    c0019b3a <FAT::FAT()+0x30>
c0019b56:	90                   	nop
c0019b57:	83 c4 1c             	add    esp,0x1c
c0019b5a:	c3                   	ret    
c0019b5b:	90                   	nop

c0019b5c <FAT::fixFilepath(char*)>:
c0019b5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b60:	8a 00                	mov    al,BYTE PTR [eax]
c0019b62:	3c 40                	cmp    al,0x40
c0019b64:	7e 2c                	jle    c0019b92 <FAT::fixFilepath(char*)+0x36>
c0019b66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b6a:	8a 00                	mov    al,BYTE PTR [eax]
c0019b6c:	83 e8 41             	sub    eax,0x41
c0019b6f:	88 c2                	mov    dl,al
c0019b71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b75:	88 10                	mov    BYTE PTR [eax],dl
c0019b77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b7b:	8a 00                	mov    al,BYTE PTR [eax]
c0019b7d:	0f be c0             	movsx  eax,al
c0019b80:	8b 04 85 20 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb6e0]
c0019b87:	83 c0 30             	add    eax,0x30
c0019b8a:	88 c2                	mov    dl,al
c0019b8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b90:	88 10                	mov    BYTE PTR [eax],dl
c0019b92:	90                   	nop
c0019b93:	c3                   	ret    

c0019b94 <FAT::open(char const*, void**, FileOpenMode)>:
c0019b94:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019b9a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019ba2:	74 0a                	je     c0019bae <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0019ba4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019bac:	75 0a                	jne    c0019bb8 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0019bae:	b8 04 00 00 00       	mov    eax,0x4
c0019bb3:	e9 fd 00 00 00       	jmp    c0019cb5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0019bb8:	83 ec 08             	sub    esp,0x8
c0019bbb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019bc2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019bc6:	50                   	push   eax
c0019bc7:	e8 db 6a fe ff       	call   c00006a7 <strcpy>
c0019bcc:	83 c4 10             	add    esp,0x10
c0019bcf:	83 ec 08             	sub    esp,0x8
c0019bd2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019bd6:	50                   	push   eax
c0019bd7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019bde:	e8 79 ff ff ff       	call   c0019b5c <FAT::fixFilepath(char*)>
c0019be3:	83 c4 10             	add    esp,0x10
c0019be6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019bee:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019bf5:	83 e0 01             	and    eax,0x1
c0019bf8:	74 08                	je     c0019c02 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0019bfa:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0019c02:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019c09:	83 e0 04             	and    eax,0x4
c0019c0c:	74 10                	je     c0019c1e <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0019c0e:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0019c16:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019c1e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019c25:	83 e0 02             	and    eax,0x2
c0019c28:	74 08                	je     c0019c32 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0019c2a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019c32:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019c39:	83 e0 08             	and    eax,0x8
c0019c3c:	74 08                	je     c0019c46 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0019c3e:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0019c46:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019c4d:	83 e0 10             	and    eax,0x10
c0019c50:	74 08                	je     c0019c5a <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0019c52:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0019c5a:	83 ec 0c             	sub    esp,0xc
c0019c5d:	68 50 02 00 00       	push   0x250
c0019c62:	e8 b7 1f ff ff       	call   c000bc1e <malloc>
c0019c67:	83 c4 10             	add    esp,0x10
c0019c6a:	89 c2                	mov    edx,eax
c0019c6c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019c73:	89 10                	mov    DWORD PTR [eax],edx
c0019c75:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019c7d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019c84:	8b 00                	mov    eax,DWORD PTR [eax]
c0019c86:	83 ec 04             	sub    esp,0x4
c0019c89:	52                   	push   edx
c0019c8a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019c8e:	52                   	push   edx
c0019c8f:	50                   	push   eax
c0019c90:	e8 29 b0 fe ff       	call   c0004cbe <f_open>
c0019c95:	83 c4 10             	add    esp,0x10
c0019c98:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019c9f:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019ca7:	74 07                	je     c0019cb0 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0019ca9:	b8 01 00 00 00       	mov    eax,0x1
c0019cae:	eb 05                	jmp    c0019cb5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0019cb0:	b8 00 00 00 00       	mov    eax,0x0
c0019cb5:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019cbb:	c3                   	ret    

c0019cbc <FAT::openDir(char const*, void**)>:
c0019cbc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019cc2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019cca:	74 0a                	je     c0019cd6 <FAT::openDir(char const*, void**)+0x1a>
c0019ccc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019cd4:	75 07                	jne    c0019cdd <FAT::openDir(char const*, void**)+0x21>
c0019cd6:	b8 04 00 00 00       	mov    eax,0x4
c0019cdb:	eb 7d                	jmp    c0019d5a <FAT::openDir(char const*, void**)+0x9e>
c0019cdd:	83 ec 08             	sub    esp,0x8
c0019ce0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ce7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ceb:	50                   	push   eax
c0019cec:	e8 b6 69 fe ff       	call   c00006a7 <strcpy>
c0019cf1:	83 c4 10             	add    esp,0x10
c0019cf4:	83 ec 08             	sub    esp,0x8
c0019cf7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019cfb:	50                   	push   eax
c0019cfc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d03:	e8 54 fe ff ff       	call   c0019b5c <FAT::fixFilepath(char*)>
c0019d08:	83 c4 10             	add    esp,0x10
c0019d0b:	83 ec 0c             	sub    esp,0xc
c0019d0e:	6a 4c                	push   0x4c
c0019d10:	e8 09 1f ff ff       	call   c000bc1e <malloc>
c0019d15:	83 c4 10             	add    esp,0x10
c0019d18:	89 c2                	mov    edx,eax
c0019d1a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019d21:	89 10                	mov    DWORD PTR [eax],edx
c0019d23:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019d2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d2c:	83 ec 08             	sub    esp,0x8
c0019d2f:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019d33:	52                   	push   edx
c0019d34:	50                   	push   eax
c0019d35:	e8 bc bf fe ff       	call   c0005cf6 <f_opendir>
c0019d3a:	83 c4 10             	add    esp,0x10
c0019d3d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019d44:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019d4c:	74 07                	je     c0019d55 <FAT::openDir(char const*, void**)+0x99>
c0019d4e:	b8 01 00 00 00       	mov    eax,0x1
c0019d53:	eb 05                	jmp    c0019d5a <FAT::openDir(char const*, void**)+0x9e>
c0019d55:	b8 00 00 00 00       	mov    eax,0x0
c0019d5a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019d60:	c3                   	ret    
c0019d61:	90                   	nop

c0019d62 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019d62:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019d68:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019d70:	75 0a                	jne    c0019d7c <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0019d72:	b8 04 00 00 00       	mov    eax,0x4
c0019d77:	e9 c9 00 00 00       	jmp    c0019e45 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019d7c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019d84:	75 0a                	jne    c0019d90 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0019d86:	b8 04 00 00 00       	mov    eax,0x4
c0019d8b:	e9 b5 00 00 00       	jmp    c0019e45 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019d90:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019d98:	75 0a                	jne    c0019da4 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0019d9a:	b8 04 00 00 00       	mov    eax,0x4
c0019d9f:	e9 a1 00 00 00       	jmp    c0019e45 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019da4:	83 ec 08             	sub    esp,0x8
c0019da7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019dae:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019db5:	50                   	push   eax
c0019db6:	e8 ec 68 fe ff       	call   c00006a7 <strcpy>
c0019dbb:	83 c4 10             	add    esp,0x10
c0019dbe:	83 ec 08             	sub    esp,0x8
c0019dc1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019dc8:	50                   	push   eax
c0019dc9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019dd0:	e8 87 fd ff ff       	call   c0019b5c <FAT::fixFilepath(char*)>
c0019dd5:	83 c4 10             	add    esp,0x10
c0019dd8:	83 ec 08             	sub    esp,0x8
c0019ddb:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019ddf:	50                   	push   eax
c0019de0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019de7:	50                   	push   eax
c0019de8:	e8 c8 c0 fe ff       	call   c0005eb5 <f_stat>
c0019ded:	83 c4 10             	add    esp,0x10
c0019df0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019df7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019dfe:	85 c0                	test   eax,eax
c0019e00:	74 07                	je     c0019e09 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0019e02:	83 f8 04             	cmp    eax,0x4
c0019e05:	74 32                	je     c0019e39 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0019e07:	eb 37                	jmp    c0019e40 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0019e09:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019e0d:	0f b6 c0             	movzx  eax,al
c0019e10:	83 e0 10             	and    eax,0x10
c0019e13:	0f 95 c2             	setne  dl
c0019e16:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019e1d:	88 10                	mov    BYTE PTR [eax],dl
c0019e1f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019e22:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019e26:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019e2d:	89 01                	mov    DWORD PTR [ecx],eax
c0019e2f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019e32:	b8 00 00 00 00       	mov    eax,0x0
c0019e37:	eb 0c                	jmp    c0019e45 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019e39:	b8 02 00 00 00       	mov    eax,0x2
c0019e3e:	eb 05                	jmp    c0019e45 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019e40:	b8 01 00 00 00       	mov    eax,0x1
c0019e45:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019e4b:	c3                   	ret    

c0019e4c <FAT::unlink(char const*)>:
c0019e4c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019e52:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e5a:	75 07                	jne    c0019e63 <FAT::unlink(char const*)+0x17>
c0019e5c:	b8 04 00 00 00       	mov    eax,0x4
c0019e61:	eb 5c                	jmp    c0019ebf <FAT::unlink(char const*)+0x73>
c0019e63:	83 ec 08             	sub    esp,0x8
c0019e66:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e6d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e71:	50                   	push   eax
c0019e72:	e8 30 68 fe ff       	call   c00006a7 <strcpy>
c0019e77:	83 c4 10             	add    esp,0x10
c0019e7a:	83 ec 08             	sub    esp,0x8
c0019e7d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e81:	50                   	push   eax
c0019e82:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e89:	e8 ce fc ff ff       	call   c0019b5c <FAT::fixFilepath(char*)>
c0019e8e:	83 c4 10             	add    esp,0x10
c0019e91:	83 ec 0c             	sub    esp,0xc
c0019e94:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e98:	50                   	push   eax
c0019e99:	e8 69 c3 fe ff       	call   c0006207 <f_unlink>
c0019e9e:	83 c4 10             	add    esp,0x10
c0019ea1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019ea8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019eaf:	85 c0                	test   eax,eax
c0019eb1:	75 07                	jne    c0019eba <FAT::unlink(char const*)+0x6e>
c0019eb3:	b8 00 00 00 00       	mov    eax,0x0
c0019eb8:	eb 05                	jmp    c0019ebf <FAT::unlink(char const*)+0x73>
c0019eba:	b8 01 00 00 00       	mov    eax,0x1
c0019ebf:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019ec5:	c3                   	ret    

c0019ec6 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019ec6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019ecc:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019ed3:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019eda:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019ede:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019ee2:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019eea:	75 0a                	jne    c0019ef6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019eec:	b8 04 00 00 00       	mov    eax,0x4
c0019ef1:	e9 1c 01 00 00       	jmp    c001a012 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019ef6:	83 ec 08             	sub    esp,0x8
c0019ef9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019f00:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019f04:	50                   	push   eax
c0019f05:	e8 9d 67 fe ff       	call   c00006a7 <strcpy>
c0019f0a:	83 c4 10             	add    esp,0x10
c0019f0d:	83 ec 08             	sub    esp,0x8
c0019f10:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019f14:	50                   	push   eax
c0019f15:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019f1c:	e8 3b fc ff ff       	call   c0019b5c <FAT::fixFilepath(char*)>
c0019f21:	83 c4 10             	add    esp,0x10
c0019f24:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019f2c:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019f34:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019f39:	83 e0 01             	and    eax,0x1
c0019f3c:	74 08                	je     c0019f46 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0019f3e:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0019f46:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019f4b:	83 e0 02             	and    eax,0x2
c0019f4e:	74 08                	je     c0019f58 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0019f50:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0019f58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019f5d:	83 e0 04             	and    eax,0x4
c0019f60:	74 08                	je     c0019f6a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0019f62:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0019f6a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019f6f:	83 e0 08             	and    eax,0x8
c0019f72:	74 08                	je     c0019f7c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0019f74:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0019f7c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019f81:	83 e0 01             	and    eax,0x1
c0019f84:	74 08                	je     c0019f8e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019f86:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0019f8e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019f93:	83 e0 02             	and    eax,0x2
c0019f96:	74 08                	je     c0019fa0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0019f98:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0019fa0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019fa5:	83 e0 04             	and    eax,0x4
c0019fa8:	74 08                	je     c0019fb2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0019faa:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0019fb2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019fb7:	83 e0 08             	and    eax,0x8
c0019fba:	74 08                	je     c0019fc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0019fbc:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0019fc4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019fcb:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0019fd2:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019fda:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019fe2:	83 ec 04             	sub    esp,0x4
c0019fe5:	52                   	push   edx
c0019fe6:	50                   	push   eax
c0019fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019feb:	50                   	push   eax
c0019fec:	e8 b8 c8 fe ff       	call   c00068a9 <f_chmod>
c0019ff1:	83 c4 10             	add    esp,0x10
c0019ff4:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019ffb:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a002:	85 c0                	test   eax,eax
c001a004:	75 07                	jne    c001a00d <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001a006:	b8 00 00 00 00       	mov    eax,0x0
c001a00b:	eb 05                	jmp    c001a012 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001a00d:	b8 01 00 00 00       	mov    eax,0x1
c001a012:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a018:	c3                   	ret    
c001a019:	90                   	nop

c001a01a <FAT::rename(char const*, char const*)>:
c001a01a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a020:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a028:	74 0a                	je     c001a034 <FAT::rename(char const*, char const*)+0x1a>
c001a02a:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a032:	75 0a                	jne    c001a03e <FAT::rename(char const*, char const*)+0x24>
c001a034:	b8 04 00 00 00       	mov    eax,0x4
c001a039:	e9 98 00 00 00       	jmp    c001a0d6 <FAT::rename(char const*, char const*)+0xbc>
c001a03e:	83 ec 08             	sub    esp,0x8
c001a041:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a048:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a04f:	50                   	push   eax
c001a050:	e8 52 66 fe ff       	call   c00006a7 <strcpy>
c001a055:	83 c4 10             	add    esp,0x10
c001a058:	83 ec 08             	sub    esp,0x8
c001a05b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a062:	50                   	push   eax
c001a063:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a06a:	e8 ed fa ff ff       	call   c0019b5c <FAT::fixFilepath(char*)>
c001a06f:	83 c4 10             	add    esp,0x10
c001a072:	83 ec 08             	sub    esp,0x8
c001a075:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a07c:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a080:	50                   	push   eax
c001a081:	e8 21 66 fe ff       	call   c00006a7 <strcpy>
c001a086:	83 c4 10             	add    esp,0x10
c001a089:	83 ec 08             	sub    esp,0x8
c001a08c:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a090:	50                   	push   eax
c001a091:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a098:	e8 bf fa ff ff       	call   c0019b5c <FAT::fixFilepath(char*)>
c001a09d:	83 c4 10             	add    esp,0x10
c001a0a0:	83 ec 08             	sub    esp,0x8
c001a0a3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a0a7:	50                   	push   eax
c001a0a8:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a0af:	50                   	push   eax
c001a0b0:	e8 01 c5 fe ff       	call   c00065b6 <f_rename>
c001a0b5:	83 c4 10             	add    esp,0x10
c001a0b8:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a0bf:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a0c6:	85 c0                	test   eax,eax
c001a0c8:	75 07                	jne    c001a0d1 <FAT::rename(char const*, char const*)+0xb7>
c001a0ca:	b8 00 00 00 00       	mov    eax,0x0
c001a0cf:	eb 05                	jmp    c001a0d6 <FAT::rename(char const*, char const*)+0xbc>
c001a0d1:	b8 01 00 00 00       	mov    eax,0x1
c001a0d6:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a0dc:	c3                   	ret    
c001a0dd:	90                   	nop

c001a0de <FAT::mkdir(char const*)>:
c001a0de:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a0e4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a0ec:	75 07                	jne    c001a0f5 <FAT::mkdir(char const*)+0x17>
c001a0ee:	b8 04 00 00 00       	mov    eax,0x4
c001a0f3:	eb 5c                	jmp    c001a151 <FAT::mkdir(char const*)+0x73>
c001a0f5:	83 ec 08             	sub    esp,0x8
c001a0f8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a0ff:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a103:	50                   	push   eax
c001a104:	e8 9e 65 fe ff       	call   c00006a7 <strcpy>
c001a109:	83 c4 10             	add    esp,0x10
c001a10c:	83 ec 08             	sub    esp,0x8
c001a10f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a113:	50                   	push   eax
c001a114:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a11b:	e8 3c fa ff ff       	call   c0019b5c <FAT::fixFilepath(char*)>
c001a120:	83 c4 10             	add    esp,0x10
c001a123:	83 ec 0c             	sub    esp,0xc
c001a126:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a12a:	50                   	push   eax
c001a12b:	e8 5a c2 fe ff       	call   c000638a <f_mkdir>
c001a130:	83 c4 10             	add    esp,0x10
c001a133:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a13a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a141:	85 c0                	test   eax,eax
c001a143:	75 07                	jne    c001a14c <FAT::mkdir(char const*)+0x6e>
c001a145:	b8 00 00 00 00       	mov    eax,0x0
c001a14a:	eb 05                	jmp    c001a151 <FAT::mkdir(char const*)+0x73>
c001a14c:	b8 01 00 00 00       	mov    eax,0x1
c001a151:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a157:	c3                   	ret    

c001a158 <FAT::exists(char const*)>:
c001a158:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a15e:	83 ec 08             	sub    esp,0x8
c001a161:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a168:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a16c:	50                   	push   eax
c001a16d:	e8 35 65 fe ff       	call   c00006a7 <strcpy>
c001a172:	83 c4 10             	add    esp,0x10
c001a175:	83 ec 08             	sub    esp,0x8
c001a178:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a17c:	50                   	push   eax
c001a17d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a184:	e8 d3 f9 ff ff       	call   c0019b5c <FAT::fixFilepath(char*)>
c001a189:	83 c4 10             	add    esp,0x10
c001a18c:	83 ec 08             	sub    esp,0x8
c001a18f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001a196:	50                   	push   eax
c001a197:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a19b:	50                   	push   eax
c001a19c:	e8 14 bd fe ff       	call   c0005eb5 <f_stat>
c001a1a1:	83 c4 10             	add    esp,0x10
c001a1a4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a1ab:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a1b2:	85 c0                	test   eax,eax
c001a1b4:	75 04                	jne    c001a1ba <FAT::exists(char const*)+0x62>
c001a1b6:	b0 01                	mov    al,0x1
c001a1b8:	eb 02                	jmp    c001a1bc <FAT::exists(char const*)+0x64>
c001a1ba:	b0 00                	mov    al,0x0
c001a1bc:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a1c2:	c3                   	ret    
c001a1c3:	90                   	nop

c001a1c4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a1c4:	b8 08 00 00 00       	mov    eax,0x8
c001a1c9:	c3                   	ret    

c001a1ca <ISO9660::seek(void*, unsigned long long)>:
c001a1ca:	53                   	push   ebx
c001a1cb:	b8 04 00 00 00       	mov    eax,0x4
c001a1d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a1d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a1d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a1dc:	85 d2                	test   edx,edx
c001a1de:	74 17                	je     c001a1f7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001a1e0:	89 c8                	mov    eax,ecx
c001a1e2:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001a1e5:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001a1e8:	b8 01 00 00 00       	mov    eax,0x1
c001a1ed:	73 08                	jae    c001a1f7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001a1ef:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001a1f2:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001a1f5:	31 c0                	xor    eax,eax
c001a1f7:	5b                   	pop    ebx
c001a1f8:	c3                   	ret    
c001a1f9:	90                   	nop

c001a1fa <ISO9660::tell(void*, unsigned long long*)>:
c001a1fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a202:	85 d2                	test   edx,edx
c001a204:	74 12                	je     c001a218 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001a206:	85 c0                	test   eax,eax
c001a208:	74 0e                	je     c001a218 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001a20a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a20d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001a210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001a213:	89 10                	mov    DWORD PTR [eax],edx
c001a215:	31 c0                	xor    eax,eax
c001a217:	c3                   	ret    
c001a218:	b8 04 00 00 00       	mov    eax,0x4
c001a21d:	c3                   	ret    

c001a21e <ISO9660::getName()>:
c001a21e:	b8 dc 20 02 c0       	mov    eax,0xc00220dc
c001a223:	c3                   	ret    

c001a224 <ISO9660::stat(void*, unsigned long long*)>:
c001a224:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a228:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a22c:	85 d2                	test   edx,edx
c001a22e:	74 12                	je     c001a242 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001a230:	85 c0                	test   eax,eax
c001a232:	74 0e                	je     c001a242 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001a234:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001a237:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001a23a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001a23d:	89 10                	mov    DWORD PTR [eax],edx
c001a23f:	31 c0                	xor    eax,eax
c001a241:	c3                   	ret    
c001a242:	b8 04 00 00 00       	mov    eax,0x4
c001a247:	c3                   	ret    

c001a248 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a248:	b8 01 00 00 00       	mov    eax,0x1
c001a24d:	c3                   	ret    

c001a24e <ISO9660::unlink(char const*)>:
c001a24e:	b8 01 00 00 00       	mov    eax,0x1
c001a253:	c3                   	ret    

c001a254 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a254:	b8 01 00 00 00       	mov    eax,0x1
c001a259:	c3                   	ret    

c001a25a <ISO9660::rename(char const*, char const*)>:
c001a25a:	b8 01 00 00 00       	mov    eax,0x1
c001a25f:	c3                   	ret    

c001a260 <ISO9660::mkdir(char const*)>:
c001a260:	b8 01 00 00 00       	mov    eax,0x1
c001a265:	c3                   	ret    

c001a266 <ISO9660::close(void*)>:
c001a266:	83 ec 0c             	sub    esp,0xc
c001a269:	b8 04 00 00 00       	mov    eax,0x4
c001a26e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a272:	85 d2                	test   edx,edx
c001a274:	74 0e                	je     c001a284 <ISO9660::close(void*)+0x1e>
c001a276:	83 ec 0c             	sub    esp,0xc
c001a279:	52                   	push   edx
c001a27a:	e8 af 19 ff ff       	call   c000bc2e <free>
c001a27f:	83 c4 10             	add    esp,0x10
c001a282:	31 c0                	xor    eax,eax
c001a284:	83 c4 0c             	add    esp,0xc
c001a287:	c3                   	ret    

c001a288 <ISO9660::closeDir(void*)>:
c001a288:	83 ec 0c             	sub    esp,0xc
c001a28b:	b8 04 00 00 00       	mov    eax,0x4
c001a290:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a294:	85 d2                	test   edx,edx
c001a296:	74 0e                	je     c001a2a6 <ISO9660::closeDir(void*)+0x1e>
c001a298:	83 ec 0c             	sub    esp,0xc
c001a29b:	52                   	push   edx
c001a29c:	e8 8d 19 ff ff       	call   c000bc2e <free>
c001a2a1:	83 c4 10             	add    esp,0x10
c001a2a4:	31 c0                	xor    eax,eax
c001a2a6:	83 c4 0c             	add    esp,0xc
c001a2a9:	c3                   	ret    

c001a2aa <ISO9660::~ISO9660()>:
c001a2aa:	83 ec 0c             	sub    esp,0xc
c001a2ad:	ba 30 21 02 c0       	mov    edx,0xc0022130
c001a2b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2b6:	89 10                	mov    DWORD PTR [eax],edx
c001a2b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2bc:	83 ec 0c             	sub    esp,0xc
c001a2bf:	50                   	push   eax
c001a2c0:	e8 43 4f ff ff       	call   c000f208 <Filesystem::~Filesystem()>
c001a2c5:	83 c4 10             	add    esp,0x10
c001a2c8:	90                   	nop
c001a2c9:	83 c4 0c             	add    esp,0xc
c001a2cc:	c3                   	ret    
c001a2cd:	90                   	nop

c001a2ce <ISO9660::~ISO9660()>:
c001a2ce:	83 ec 0c             	sub    esp,0xc
c001a2d1:	83 ec 0c             	sub    esp,0xc
c001a2d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2d8:	e8 cd ff ff ff       	call   c001a2aa <ISO9660::~ISO9660()>
c001a2dd:	83 c4 10             	add    esp,0x10
c001a2e0:	83 ec 08             	sub    esp,0x8
c001a2e3:	6a 08                	push   0x8
c001a2e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2e9:	e8 11 4b ff ff       	call   c000edff <operator delete(void*, unsigned long)>
c001a2ee:	83 c4 10             	add    esp,0x10
c001a2f1:	83 c4 0c             	add    esp,0xc
c001a2f4:	c3                   	ret    

c001a2f5 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001a2f5:	55                   	push   ebp
c001a2f6:	31 c9                	xor    ecx,ecx
c001a2f8:	57                   	push   edi
c001a2f9:	56                   	push   esi
c001a2fa:	53                   	push   ebx
c001a2fb:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001a2ff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a303:	89 eb                	mov    ebx,ebp
c001a305:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001a309:	39 ce                	cmp    esi,ecx
c001a30b:	7e 17                	jle    c001a324 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001a30d:	31 d2                	xor    edx,edx
c001a30f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001a313:	7d 13                	jge    c001a328 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001a315:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a319:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a31c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001a31f:	75 0d                	jne    c001a32e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001a321:	42                   	inc    edx
c001a322:	eb eb                	jmp    c001a30f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001a324:	31 c0                	xor    eax,eax
c001a326:	eb 0a                	jmp    c001a332 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001a328:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001a32c:	eb 04                	jmp    c001a332 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001a32e:	41                   	inc    ecx
c001a32f:	43                   	inc    ebx
c001a330:	eb d7                	jmp    c001a309 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001a332:	5b                   	pop    ebx
c001a333:	5e                   	pop    esi
c001a334:	5f                   	pop    edi
c001a335:	5d                   	pop    ebp
c001a336:	c3                   	ret    

c001a337 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a337:	56                   	push   esi
c001a338:	53                   	push   ebx
c001a339:	52                   	push   edx
c001a33a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a33e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a342:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a346:	39 0d 00 4a 02 c0    	cmp    DWORD PTR ds:0xc0024a00,ecx
c001a34c:	75 08                	jne    c001a356 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001a34e:	38 05 28 2f 02 c0    	cmp    BYTE PTR ds:0xc0022f28,al
c001a354:	74 2b                	je     c001a381 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001a356:	83 ec 0c             	sub    esp,0xc
c001a359:	a2 28 2f 02 c0       	mov    ds:0xc0022f28,al
c001a35e:	68 20 4a 02 c0       	push   0xc0024a20
c001a363:	0f be c0             	movsx  eax,al
c001a366:	6a 01                	push   0x1
c001a368:	89 0d 00 4a 02 c0    	mov    DWORD PTR ds:0xc0024a00,ecx
c001a36e:	31 db                	xor    ebx,ebx
c001a370:	53                   	push   ebx
c001a371:	51                   	push   ecx
c001a372:	ff 34 85 7c 39 02 c0 	push   DWORD PTR [eax*4-0x3ffdc684]
c001a379:	e8 e4 7a ff ff       	call   c0011e62 <LogicalDisk::read(unsigned long long, int, void*)>
c001a37e:	83 c4 20             	add    esp,0x20
c001a381:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001a389:	c7 44 24 14 20 4a 02 c0 	mov    DWORD PTR [esp+0x14],0xc0024a20
c001a391:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001a395:	58                   	pop    eax
c001a396:	5b                   	pop    ebx
c001a397:	5e                   	pop    esi
c001a398:	e9 35 62 fe ff       	jmp    c00005d2 <memcpy>
c001a39d:	90                   	nop

c001a39e <ISO9660::tryMount(LogicalDisk*, int)>:
c001a39e:	81 ec 10 08 00 00    	sub    esp,0x810
c001a3a4:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001a3ab:	83 c0 41             	add    eax,0x41
c001a3ae:	0f be c0             	movsx  eax,al
c001a3b1:	50                   	push   eax
c001a3b2:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a3b6:	50                   	push   eax
c001a3b7:	6a 10                	push   0x10
c001a3b9:	e8 79 ff ff ff       	call   c001a337 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a3be:	83 c4 10             	add    esp,0x10
c001a3c1:	31 c0                	xor    eax,eax
c001a3c3:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a3c8:	75 1d                	jne    c001a3e7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a3ca:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a3cf:	75 16                	jne    c001a3e7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a3d1:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a3d6:	75 0f                	jne    c001a3e7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a3d8:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a3dd:	75 08                	jne    c001a3e7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a3df:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a3e4:	0f 94 c0             	sete   al
c001a3e7:	81 c4 0c 08 00 00    	add    esp,0x80c
c001a3ed:	c3                   	ret    

c001a3ee <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a3ee:	55                   	push   ebp
c001a3ef:	57                   	push   edi
c001a3f0:	56                   	push   esi
c001a3f1:	53                   	push   ebx
c001a3f2:	81 ec 34 08 00 00    	sub    esp,0x834
c001a3f8:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001a3ff:	55                   	push   ebp
c001a400:	68 f7 20 02 c0       	push   0xc00220f7
c001a405:	e8 d5 4a ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001a40a:	83 c4 10             	add    esp,0x10
c001a40d:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001a415:	0f 84 06 02 00 00    	je     c001a621 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a41b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001a423:	0f 84 f8 01 00 00    	je     c001a621 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a429:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a430:	b8 01 00 00 00       	mov    eax,0x1
c001a435:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001a439:	0f 85 e7 01 00 00    	jne    c001a626 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a43f:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001a442:	31 d2                	xor    edx,edx
c001a444:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001a447:	89 e9                	mov    ecx,ebp
c001a449:	89 d3                	mov    ebx,edx
c001a44b:	01 f1                	add    ecx,esi
c001a44d:	11 fb                	adc    ebx,edi
c001a44f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a453:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a457:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001a45e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001a461:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001a464:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001a468:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a46c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a470:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a474:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001a478:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001a47c:	72 19                	jb     c001a497 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001a47e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a486:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a48a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a48d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a491:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a495:	eb 13                	jmp    c001a4aa <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001a497:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a49b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a49f:	29 f0                	sub    eax,esi
c001a4a1:	19 fa                	sbb    edx,edi
c001a4a3:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4a6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a4aa:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001a4b1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a4b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4b6:	53                   	push   ebx
c001a4b7:	0f a4 c2 0b          	shld   edx,eax,0xb
c001a4bb:	c1 e0 0b             	shl    eax,0xb
c001a4be:	01 c6                	add    esi,eax
c001a4c0:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a4c7:	11 d7                	adc    edi,edx
c001a4c9:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a4cd:	89 fa                	mov    edx,edi
c001a4cf:	50                   	push   eax
c001a4d0:	8d 44 24 28          	lea    eax,[esp+0x28]
c001a4d4:	50                   	push   eax
c001a4d5:	89 f0                	mov    eax,esi
c001a4d7:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a4db:	50                   	push   eax
c001a4dc:	e8 56 fe ff ff       	call   c001a337 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a4e1:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a4e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a4ec:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a4ef:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001a4f3:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001a4f9:	83 c4 10             	add    esp,0x10
c001a4fc:	b8 00 08 00 00       	mov    eax,0x800
c001a501:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001a505:	29 d0                	sub    eax,edx
c001a507:	39 c1                	cmp    ecx,eax
c001a509:	83 db 00             	sbb    ebx,0x0
c001a50c:	7d 19                	jge    c001a527 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001a50e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a513:	75 16                	jne    c001a52b <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001a515:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a51c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a522:	e9 f6 00 00 00       	jmp    c001a61d <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001a527:	89 c5                	mov    ebp,eax
c001a529:	eb 03                	jmp    c001a52e <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001a52b:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001a52e:	51                   	push   ecx
c001a52f:	55                   	push   ebp
c001a530:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001a534:	50                   	push   eax
c001a535:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001a53c:	e8 91 60 fe ff       	call   c00005d2 <memcpy>
c001a541:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a545:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a549:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001a550:	01 e8                	add    eax,ebp
c001a552:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a556:	89 e8                	mov    eax,ebp
c001a558:	99                   	cdq    
c001a559:	01 ee                	add    esi,ebp
c001a55b:	11 d7                	adc    edi,edx
c001a55d:	29 e9                	sub    ecx,ebp
c001a55f:	19 d3                	sbb    ebx,edx
c001a561:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a565:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a569:	83 c4 10             	add    esp,0x10
c001a56c:	b8 ff 07 00 00       	mov    eax,0x7ff
c001a571:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001a574:	b8 00 00 00 00       	mov    eax,0x0
c001a579:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a57d:	7d 3f                	jge    c001a5be <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001a57f:	52                   	push   edx
c001a580:	89 fa                	mov    edx,edi
c001a582:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a589:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a58d:	50                   	push   eax
c001a58e:	89 f0                	mov    eax,esi
c001a590:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a594:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a598:	50                   	push   eax
c001a599:	e8 99 fd ff ff       	call   c001a337 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a59e:	81 c6 00 08 00 00    	add    esi,0x800
c001a5a4:	83 d7 00             	adc    edi,0x0
c001a5a7:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001a5af:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001a5b7:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001a5bc:	eb ab                	jmp    c001a569 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001a5be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5c2:	0b 04 24             	or     eax,DWORD PTR [esp]
c001a5c5:	74 34                	je     c001a5fb <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001a5c7:	89 fa                	mov    edx,edi
c001a5c9:	50                   	push   eax
c001a5ca:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a5d1:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a5d5:	50                   	push   eax
c001a5d6:	89 f0                	mov    eax,esi
c001a5d8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a5dc:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a5e0:	55                   	push   ebp
c001a5e1:	50                   	push   eax
c001a5e2:	e8 50 fd ff ff       	call   c001a337 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a5e7:	83 c4 0c             	add    esp,0xc
c001a5ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001a5ee:	55                   	push   ebp
c001a5ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5f3:	e8 da 5f fe ff       	call   c00005d2 <memcpy>
c001a5f8:	83 c4 10             	add    esp,0x10
c001a5fb:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a602:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a606:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a60a:	89 38                	mov    DWORD PTR [eax],edi
c001a60c:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a613:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a617:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001a61a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001a61d:	31 c0                	xor    eax,eax
c001a61f:	eb 05                	jmp    c001a626 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a621:	b8 04 00 00 00       	mov    eax,0x4
c001a626:	81 c4 2c 08 00 00    	add    esp,0x82c
c001a62c:	5b                   	pop    ebx
c001a62d:	5e                   	pop    esi
c001a62e:	5f                   	pop    edi
c001a62f:	5d                   	pop    ebp
c001a630:	c3                   	ret    
c001a631:	90                   	nop

c001a632 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a632:	55                   	push   ebp
c001a633:	57                   	push   edi
c001a634:	56                   	push   esi
c001a635:	53                   	push   ebx
c001a636:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001a63c:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001a643:	85 f6                	test   esi,esi
c001a645:	0f 84 64 02 00 00    	je     c001a8af <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001a64b:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001a653:	0f 84 56 02 00 00    	je     c001a8af <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001a659:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001a65c:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001a65f:	75 0a                	jne    c001a66b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001a661:	b8 07 00 00 00       	mov    eax,0x7
c001a666:	e9 49 02 00 00       	jmp    c001a8b4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001a66b:	50                   	push   eax
c001a66c:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a670:	50                   	push   eax
c001a671:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a678:	53                   	push   ebx
c001a679:	8b 06                	mov    eax,DWORD PTR [esi]
c001a67b:	c1 e0 0b             	shl    eax,0xb
c001a67e:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001a681:	c1 e8 0b             	shr    eax,0xb
c001a684:	50                   	push   eax
c001a685:	e8 ad fc ff ff       	call   c001a337 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a68a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a68d:	83 c4 10             	add    esp,0x10
c001a690:	89 c1                	mov    ecx,eax
c001a692:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001a695:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a69b:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001a69e:	84 db                	test   bl,bl
c001a6a0:	0f 85 90 00 00 00    	jne    c001a736 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001a6a6:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001a6ac:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a6b2:	29 c7                	sub    edi,eax
c001a6b4:	89 fb                	mov    ebx,edi
c001a6b6:	c1 fb 1f             	sar    ebx,0x1f
c001a6b9:	01 f8                	add    eax,edi
c001a6bb:	11 da                	adc    edx,ebx
c001a6bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a6c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a6c5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001a6c8:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001a6cb:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a6ce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a6d1:	89 04 24             	mov    DWORD PTR [esp],eax
c001a6d4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a6d8:	89 d8                	mov    eax,ebx
c001a6da:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001a6dd:	ba 00 00 00 00       	mov    edx,0x0
c001a6e2:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a6e6:	b8 00 00 00 00       	mov    eax,0x0
c001a6eb:	73 0b                	jae    c001a6f8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a6ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a6f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a6f4:	29 f8                	sub    eax,edi
c001a6f6:	19 da                	sbb    edx,ebx
c001a6f8:	89 d3                	mov    ebx,edx
c001a6fa:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a6fd:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a700:	09 c3                	or     ebx,eax
c001a702:	0f 84 59 ff ff ff    	je     c001a661 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001a708:	55                   	push   ebp
c001a709:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a70d:	50                   	push   eax
c001a70e:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a715:	53                   	push   ebx
c001a716:	8b 06                	mov    eax,DWORD PTR [esi]
c001a718:	c1 e0 0b             	shl    eax,0xb
c001a71b:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001a71f:	c1 e8 0b             	shr    eax,0xb
c001a722:	50                   	push   eax
c001a723:	e8 0f fc ff ff       	call   c001a337 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a728:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a72b:	83 c4 10             	add    esp,0x10
c001a72e:	25 ff 07 00 00       	and    eax,0x7ff
c001a733:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001a736:	57                   	push   edi
c001a737:	6a 28                	push   0x28
c001a739:	6a 00                	push   0x0
c001a73b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a73f:	50                   	push   eax
c001a740:	e8 c3 5e fe ff       	call   c0000608 <memset>
c001a745:	31 d2                	xor    edx,edx
c001a747:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a74a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a750:	89 f8                	mov    eax,edi
c001a752:	83 c0 21             	add    eax,0x21
c001a755:	83 d2 00             	adc    edx,0x0
c001a758:	89 c7                	mov    edi,eax
c001a75a:	89 d5                	mov    ebp,edx
c001a75c:	83 c4 10             	add    esp,0x10
c001a75f:	31 c9                	xor    ecx,ecx
c001a761:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001a768:	83 f9 28             	cmp    ecx,0x28
c001a76b:	88 04 24             	mov    BYTE PTR [esp],al
c001a76e:	0f 94 c2             	sete   dl
c001a771:	88 d0                	mov    al,dl
c001a773:	ba ff 07 00 00       	mov    edx,0x7ff
c001a778:	39 fa                	cmp    edx,edi
c001a77a:	ba 00 00 00 00       	mov    edx,0x0
c001a77f:	19 ea                	sbb    edx,ebp
c001a781:	0f 92 c2             	setb   dl
c001a784:	09 c2                	or     edx,eax
c001a786:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001a78a:	0f 94 c0             	sete   al
c001a78d:	08 d0                	or     al,dl
c001a78f:	75 16                	jne    c001a7a7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a791:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001a795:	74 10                	je     c001a7a7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a797:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a79a:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001a79e:	41                   	inc    ecx
c001a79f:	83 c7 01             	add    edi,0x1
c001a7a2:	83 d5 00             	adc    ebp,0x0
c001a7a5:	eb ba                	jmp    c001a761 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001a7a7:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001a7ae:	83 ec 0c             	sub    esp,0xc
c001a7b1:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001a7b5:	57                   	push   edi
c001a7b6:	e8 6a 5e fe ff       	call   c0000625 <strlen>
c001a7bb:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001a7c3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a7c7:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001a7ce:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a7d1:	5a                   	pop    edx
c001a7d2:	25 ff 07 00 00       	and    eax,0x7ff
c001a7d7:	01 c8                	add    eax,ecx
c001a7d9:	59                   	pop    ecx
c001a7da:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001a7e0:	83 e0 02             	and    eax,0x2
c001a7e3:	3c 01                	cmp    al,0x1
c001a7e5:	19 c0                	sbb    eax,eax
c001a7e7:	83 c0 02             	add    eax,0x2
c001a7ea:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a7ee:	57                   	push   edi
c001a7ef:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001a7f3:	50                   	push   eax
c001a7f4:	e8 ae 5e fe ff       	call   c00006a7 <strcpy>
c001a7f9:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001a7fd:	83 c4 10             	add    esp,0x10
c001a800:	84 c0                	test   al,al
c001a802:	75 21                	jne    c001a825 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001a804:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001a80c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a814:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a81c:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001a823:	eb 28                	jmp    c001a84d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001a825:	fe c8                	dec    al
c001a827:	75 24                	jne    c001a84d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001a829:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001a831:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a839:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a841:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001a848:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001a84d:	0f b6 fb             	movzx  edi,bl
c001a850:	31 db                	xor    ebx,ebx
c001a852:	50                   	push   eax
c001a853:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001a85a:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a85e:	50                   	push   eax
c001a85f:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001a866:	e8 67 5d fe ff       	call   c00005d2 <memcpy>
c001a86b:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001a872:	89 f9                	mov    ecx,edi
c001a874:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a87a:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001a87d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a880:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001a883:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a886:	83 c4 10             	add    esp,0x10
c001a889:	39 c7                	cmp    edi,eax
c001a88b:	89 df                	mov    edi,ebx
c001a88d:	19 d7                	sbb    edi,edx
c001a88f:	72 10                	jb     c001a8a1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001a891:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001a898:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001a89f:	eb 0a                	jmp    c001a8ab <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001a8a1:	29 c8                	sub    eax,ecx
c001a8a3:	19 da                	sbb    edx,ebx
c001a8a5:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a8a8:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a8ab:	31 c0                	xor    eax,eax
c001a8ad:	eb 05                	jmp    c001a8b4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001a8af:	b8 04 00 00 00       	mov    eax,0x4
c001a8b4:	81 c4 5c 09 00 00    	add    esp,0x95c
c001a8ba:	5b                   	pop    ebx
c001a8bb:	5e                   	pop    esi
c001a8bc:	5f                   	pop    edi
c001a8bd:	5d                   	pop    ebp
c001a8be:	c3                   	ret    

c001a8bf <readRoot(unsigned int*, unsigned int*, char)>:
c001a8bf:	81 ec 40 08 00 00    	sub    esp,0x840
c001a8c5:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001a8cd:	50                   	push   eax
c001a8ce:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a8d2:	50                   	push   eax
c001a8d3:	6a 10                	push   0x10
c001a8d5:	e8 5d fa ff ff       	call   c001a337 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a8da:	83 c4 0c             	add    esp,0xc
c001a8dd:	6a 22                	push   0x22
c001a8df:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001a8e6:	50                   	push   eax
c001a8e7:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a8eb:	50                   	push   eax
c001a8ec:	e8 e1 5c fe ff       	call   c00005d2 <memcpy>
c001a8f1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a8f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a8fc:	89 10                	mov    DWORD PTR [eax],edx
c001a8fe:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a905:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a909:	89 10                	mov    DWORD PTR [eax],edx
c001a90b:	b0 01                	mov    al,0x1
c001a90d:	81 c4 4c 08 00 00    	add    esp,0x84c
c001a913:	c3                   	ret    

c001a914 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001a914:	55                   	push   ebp
c001a915:	57                   	push   edi
c001a916:	56                   	push   esi
c001a917:	53                   	push   ebx
c001a918:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a91e:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a925:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001a92c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a930:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001a934:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a938:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a93c:	75 03                	jne    c001a941 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a93e:	83 c3 02             	add    ebx,0x2
c001a941:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001a944:	75 03                	jne    c001a949 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001a946:	43                   	inc    ebx
c001a947:	eb f8                	jmp    c001a941 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a949:	51                   	push   ecx
c001a94a:	68 00 01 00 00       	push   0x100
c001a94f:	6a 00                	push   0x0
c001a951:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a955:	50                   	push   eax
c001a956:	e8 ad 5c fe ff       	call   c0000608 <memset>
c001a95b:	83 c4 10             	add    esp,0x10
c001a95e:	31 d2                	xor    edx,edx
c001a960:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a963:	84 c0                	test   al,al
c001a965:	74 21                	je     c001a988 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001a967:	3c 2f                	cmp    al,0x2f
c001a969:	75 0b                	jne    c001a976 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001a96b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001a96f:	bd 01 00 00 00       	mov    ebp,0x1
c001a974:	eb 14                	jmp    c001a98a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001a976:	8d 48 9f             	lea    ecx,[eax-0x61]
c001a979:	80 f9 19             	cmp    cl,0x19
c001a97c:	77 03                	ja     c001a981 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a97e:	83 e8 20             	sub    eax,0x20
c001a981:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001a985:	42                   	inc    edx
c001a986:	eb d8                	jmp    c001a960 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001a988:	31 ed                	xor    ebp,ebp
c001a98a:	83 ec 0c             	sub    esp,0xc
c001a98d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001a994:	e8 85 12 ff ff       	call   c000bc1e <malloc>
c001a999:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a9a0:	89 c6                	mov    esi,eax
c001a9a2:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001a9a8:	c1 ef 0b             	shr    edi,0xb
c001a9ab:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001a9b2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001a9b6:	83 c4 10             	add    esp,0x10
c001a9b9:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001a9be:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a9c2:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001a9c9:	74 28                	je     c001a9f3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001a9cb:	52                   	push   edx
c001a9cc:	57                   	push   edi
c001a9cd:	50                   	push   eax
c001a9ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a9d2:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a9d9:	e8 59 f9 ff ff       	call   c001a337 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a9de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a9e2:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001a9e9:	05 00 08 00 00       	add    eax,0x800
c001a9ee:	83 c4 10             	add    esp,0x10
c001a9f1:	eb cb                	jmp    c001a9be <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001a9f3:	83 ec 0c             	sub    esp,0xc
c001a9f6:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a9fa:	57                   	push   edi
c001a9fb:	e8 25 5c fe ff       	call   c0000625 <strlen>
c001aa00:	50                   	push   eax
c001aa01:	57                   	push   edi
c001aa02:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001aa09:	56                   	push   esi
c001aa0a:	e8 e6 f8 ff ff       	call   c001a2f5 <__memmem(unsigned char*, int, unsigned char*, int)>
c001aa0f:	83 c4 20             	add    esp,0x20
c001aa12:	85 c0                	test   eax,eax
c001aa14:	75 13                	jne    c001aa29 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001aa16:	83 ec 0c             	sub    esp,0xc
c001aa19:	56                   	push   esi
c001aa1a:	e8 0f 12 ff ff       	call   c000bc2e <free>
c001aa1f:	83 c4 10             	add    esp,0x10
c001aa22:	31 c0                	xor    eax,eax
c001aa24:	e9 b3 00 00 00       	jmp    c001aadc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001aa29:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001aa2d:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001aa31:	c1 e7 08             	shl    edi,0x8
c001aa34:	c1 e2 10             	shl    edx,0x10
c001aa37:	09 d7                	or     edi,edx
c001aa39:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001aa3d:	09 d7                	or     edi,edx
c001aa3f:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001aa43:	c1 e2 18             	shl    edx,0x18
c001aa46:	09 d7                	or     edi,edx
c001aa48:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001aa4c:	89 d1                	mov    ecx,edx
c001aa4e:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001aa52:	c1 e1 08             	shl    ecx,0x8
c001aa55:	c1 e2 10             	shl    edx,0x10
c001aa58:	09 ca                	or     edx,ecx
c001aa5a:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001aa5e:	09 ca                	or     edx,ecx
c001aa60:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001aa64:	c1 e1 18             	shl    ecx,0x18
c001aa67:	09 ca                	or     edx,ecx
c001aa69:	89 e9                	mov    ecx,ebp
c001aa6b:	84 c9                	test   cl,cl
c001aa6d:	74 3c                	je     c001aaab <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001aa6f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001aa73:	83 ec 0c             	sub    esp,0xc
c001aa76:	56                   	push   esi
c001aa77:	e8 b2 11 ff ff       	call   c000bc2e <free>
c001aa7c:	83 c4 0c             	add    esp,0xc
c001aa7f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001aa86:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001aa8b:	50                   	push   eax
c001aa8c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001aa93:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001aa9a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aa9e:	52                   	push   edx
c001aa9f:	57                   	push   edi
c001aaa0:	53                   	push   ebx
c001aaa1:	e8 6e fe ff ff       	call   c001a914 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001aaa6:	83 c4 20             	add    esp,0x20
c001aaa9:	eb 31                	jmp    c001aadc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001aaab:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001aaae:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001aab5:	d0 e8                	shr    al,1
c001aab7:	89 3b                	mov    DWORD PTR [ebx],edi
c001aab9:	83 e0 01             	and    eax,0x1
c001aabc:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aac3:	83 ec 0c             	sub    esp,0xc
c001aac6:	89 13                	mov    DWORD PTR [ebx],edx
c001aac8:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001aacf:	89 03                	mov    DWORD PTR [ebx],eax
c001aad1:	56                   	push   esi
c001aad2:	e8 57 11 ff ff       	call   c000bc2e <free>
c001aad7:	83 c4 10             	add    esp,0x10
c001aada:	b0 01                	mov    al,0x1
c001aadc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aae2:	5b                   	pop    ebx
c001aae3:	5e                   	pop    esi
c001aae4:	5f                   	pop    edi
c001aae5:	5d                   	pop    ebp
c001aae6:	c3                   	ret    

c001aae7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001aae7:	55                   	push   ebp
c001aae8:	57                   	push   edi
c001aae9:	56                   	push   esi
c001aaea:	53                   	push   ebx
c001aaeb:	83 ec 20             	sub    esp,0x20
c001aaee:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001aaf2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001aaf6:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001aafa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab02:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ab0a:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001ab0f:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001ab15:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001ab1b:	57                   	push   edi
c001ab1c:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ab20:	50                   	push   eax
c001ab21:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ab25:	50                   	push   eax
c001ab26:	e8 94 fd ff ff       	call   c001a8bf <readRoot(unsigned int*, unsigned int*, char)>
c001ab2b:	5a                   	pop    edx
c001ab2c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab30:	e8 f0 5a fe ff       	call   c0000625 <strlen>
c001ab35:	83 c4 10             	add    esp,0x10
c001ab38:	83 f8 03             	cmp    eax,0x3
c001ab3b:	77 17                	ja     c001ab54 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001ab3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ab41:	89 03                	mov    DWORD PTR [ebx],eax
c001ab43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab47:	89 06                	mov    DWORD PTR [esi],eax
c001ab49:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001ab50:	b0 01                	mov    al,0x1
c001ab52:	eb 19                	jmp    c001ab6d <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001ab54:	50                   	push   eax
c001ab55:	55                   	push   ebp
c001ab56:	57                   	push   edi
c001ab57:	56                   	push   esi
c001ab58:	53                   	push   ebx
c001ab59:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ab5d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ab61:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ab65:	e8 aa fd ff ff       	call   c001a914 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001ab6a:	83 c4 20             	add    esp,0x20
c001ab6d:	83 c4 1c             	add    esp,0x1c
c001ab70:	5b                   	pop    ebx
c001ab71:	5e                   	pop    esi
c001ab72:	5f                   	pop    edi
c001ab73:	5d                   	pop    ebp
c001ab74:	c3                   	ret    
c001ab75:	90                   	nop

c001ab76 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001ab76:	57                   	push   edi
c001ab77:	56                   	push   esi
c001ab78:	53                   	push   ebx
c001ab79:	83 ec 10             	sub    esp,0x10
c001ab7c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ab80:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ab84:	85 ff                	test   edi,edi
c001ab86:	74 7b                	je     c001ac03 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ab88:	85 f6                	test   esi,esi
c001ab8a:	74 77                	je     c001ac03 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ab8c:	83 ec 0c             	sub    esp,0xc
c001ab8f:	6a 1c                	push   0x1c
c001ab91:	e8 88 10 ff ff       	call   c000bc1e <malloc>
c001ab96:	89 07                	mov    DWORD PTR [edi],eax
c001ab98:	89 c3                	mov    ebx,eax
c001ab9a:	58                   	pop    eax
c001ab9b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab9f:	50                   	push   eax
c001aba0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001aba3:	50                   	push   eax
c001aba4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aba8:	50                   	push   eax
c001aba9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001abad:	50                   	push   eax
c001abae:	56                   	push   esi
c001abaf:	e8 33 ff ff ff       	call   c001aae7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001abb4:	83 c4 20             	add    esp,0x20
c001abb7:	84 c0                	test   al,al
c001abb9:	74 07                	je     c001abc2 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001abbb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001abc0:	74 0b                	je     c001abcd <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001abc2:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001abc6:	b8 01 00 00 00       	mov    eax,0x1
c001abcb:	eb 3b                	jmp    c001ac08 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001abcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abd1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001abd5:	89 03                	mov    DWORD PTR [ebx],eax
c001abd7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001abde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001abe2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001abe9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001abf0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001abf3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001abfa:	8a 06                	mov    al,BYTE PTR [esi]
c001abfc:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001abff:	31 c0                	xor    eax,eax
c001ac01:	eb 05                	jmp    c001ac08 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ac03:	b8 04 00 00 00       	mov    eax,0x4
c001ac08:	83 c4 10             	add    esp,0x10
c001ac0b:	5b                   	pop    ebx
c001ac0c:	5e                   	pop    esi
c001ac0d:	5f                   	pop    edi
c001ac0e:	c3                   	ret    
c001ac0f:	90                   	nop

c001ac10 <ISO9660::exists(char const*)>:
c001ac10:	83 ec 28             	sub    esp,0x28
c001ac13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac17:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ac1b:	52                   	push   edx
c001ac1c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001ac1f:	52                   	push   edx
c001ac20:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001ac24:	52                   	push   edx
c001ac25:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001ac29:	52                   	push   edx
c001ac2a:	50                   	push   eax
c001ac2b:	e8 b7 fe ff ff       	call   c001aae7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ac30:	83 c4 3c             	add    esp,0x3c
c001ac33:	c3                   	ret    

c001ac34 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001ac34:	56                   	push   esi
c001ac35:	53                   	push   ebx
c001ac36:	83 ec 14             	sub    esp,0x14
c001ac39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ac3d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ac41:	85 db                	test   ebx,ebx
c001ac43:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ac47:	0f 94 c2             	sete   dl
c001ac4a:	85 f6                	test   esi,esi
c001ac4c:	0f 94 c0             	sete   al
c001ac4f:	08 c2                	or     dl,al
c001ac51:	75 68                	jne    c001acbb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001ac53:	85 c9                	test   ecx,ecx
c001ac55:	74 64                	je     c001acbb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001ac57:	83 ec 0c             	sub    esp,0xc
c001ac5a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ac5d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ac61:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001ac67:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ac6e:	50                   	push   eax
c001ac6f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001ac72:	50                   	push   eax
c001ac73:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ac77:	50                   	push   eax
c001ac78:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ac7c:	50                   	push   eax
c001ac7d:	51                   	push   ecx
c001ac7e:	e8 64 fe ff ff       	call   c001aae7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ac83:	83 c4 20             	add    esp,0x20
c001ac86:	ba 01 00 00 00       	mov    edx,0x1
c001ac8b:	84 c0                	test   al,al
c001ac8d:	74 31                	je     c001acc0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ac8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac93:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ac9a:	89 03                	mov    DWORD PTR [ebx],eax
c001ac9c:	ba 00 00 00 00       	mov    edx,0x0
c001aca1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aca5:	85 c0                	test   eax,eax
c001aca7:	0f 95 06             	setne  BYTE PTR [esi]
c001acaa:	74 14                	je     c001acc0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001acac:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001acb2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001acb9:	eb 05                	jmp    c001acc0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001acbb:	ba 04 00 00 00       	mov    edx,0x4
c001acc0:	83 c4 14             	add    esp,0x14
c001acc3:	89 d0                	mov    eax,edx
c001acc5:	5b                   	pop    ebx
c001acc6:	5e                   	pop    esi
c001acc7:	c3                   	ret    

c001acc8 <ISO9660::openDir(char const*, void**)>:
c001acc8:	57                   	push   edi
c001acc9:	56                   	push   esi
c001acca:	53                   	push   ebx
c001accb:	83 ec 10             	sub    esp,0x10
c001acce:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001acd2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001acd6:	85 ff                	test   edi,edi
c001acd8:	0f 84 95 00 00 00    	je     c001ad73 <ISO9660::openDir(char const*, void**)+0xab>
c001acde:	85 f6                	test   esi,esi
c001ace0:	0f 84 8d 00 00 00    	je     c001ad73 <ISO9660::openDir(char const*, void**)+0xab>
c001ace6:	83 ec 0c             	sub    esp,0xc
c001ace9:	6a 1c                	push   0x1c
c001aceb:	e8 2e 0f ff ff       	call   c000bc1e <malloc>
c001acf0:	89 07                	mov    DWORD PTR [edi],eax
c001acf2:	89 c3                	mov    ebx,eax
c001acf4:	59                   	pop    ecx
c001acf5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001acf9:	50                   	push   eax
c001acfa:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001acfd:	50                   	push   eax
c001acfe:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ad02:	50                   	push   eax
c001ad03:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ad07:	50                   	push   eax
c001ad08:	56                   	push   esi
c001ad09:	e8 d9 fd ff ff       	call   c001aae7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ad0e:	83 c4 20             	add    esp,0x20
c001ad11:	84 c0                	test   al,al
c001ad13:	74 07                	je     c001ad1c <ISO9660::openDir(char const*, void**)+0x54>
c001ad15:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ad1a:	75 21                	jne    c001ad3d <ISO9660::openDir(char const*, void**)+0x75>
c001ad1c:	0f b6 c0             	movzx  eax,al
c001ad1f:	52                   	push   edx
c001ad20:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ad24:	50                   	push   eax
c001ad25:	68 0a 21 02 c0       	push   0xc002210a
c001ad2a:	e8 b0 41 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001ad2f:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ad33:	83 c4 10             	add    esp,0x10
c001ad36:	b8 01 00 00 00       	mov    eax,0x1
c001ad3b:	eb 3b                	jmp    c001ad78 <ISO9660::openDir(char const*, void**)+0xb0>
c001ad3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad41:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ad45:	89 03                	mov    DWORD PTR [ebx],eax
c001ad47:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ad4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad52:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ad59:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ad60:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ad63:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ad6a:	8a 06                	mov    al,BYTE PTR [esi]
c001ad6c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001ad6f:	31 c0                	xor    eax,eax
c001ad71:	eb 05                	jmp    c001ad78 <ISO9660::openDir(char const*, void**)+0xb0>
c001ad73:	b8 04 00 00 00       	mov    eax,0x4
c001ad78:	83 c4 10             	add    esp,0x10
c001ad7b:	5b                   	pop    ebx
c001ad7c:	5e                   	pop    esi
c001ad7d:	5f                   	pop    edi
c001ad7e:	c3                   	ret    
c001ad7f:	90                   	nop

c001ad80 <ISO9660::ISO9660()>:
c001ad80:	83 ec 0c             	sub    esp,0xc
c001ad83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad87:	83 ec 0c             	sub    esp,0xc
c001ad8a:	50                   	push   eax
c001ad8b:	e8 54 44 ff ff       	call   c000f1e4 <Filesystem::Filesystem()>
c001ad90:	83 c4 10             	add    esp,0x10
c001ad93:	ba 30 21 02 c0       	mov    edx,0xc0022130
c001ad98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad9c:	89 10                	mov    DWORD PTR [eax],edx
c001ad9e:	90                   	nop
c001ad9f:	83 c4 0c             	add    esp,0xc
c001ada2:	c3                   	ret    
c001ada3:	90                   	nop

c001ada4 <SoundChannel::~SoundChannel()>:
c001ada4:	83 ec 0c             	sub    esp,0xc
c001ada7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adab:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001adae:	83 ec 0c             	sub    esp,0xc
c001adb1:	50                   	push   eax
c001adb2:	e8 77 0e ff ff       	call   c000bc2e <free>
c001adb7:	83 c4 10             	add    esp,0x10
c001adba:	90                   	nop
c001adbb:	83 c4 0c             	add    esp,0xc
c001adbe:	c3                   	ret    
c001adbf:	90                   	nop

c001adc0 <SoundChannel::setSpeed(float)>:
c001adc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001adc4:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001adc8:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001adcb:	c3                   	ret    

c001adcc <SoundChannel::getSpeed()>:
c001adcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001add0:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001add3:	c3                   	ret    

c001add4 <SoundChannel::setVolume(int)>:
c001add4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001add8:	83 f8 64             	cmp    eax,0x64
c001addb:	7e 05                	jle    c001ade2 <SoundChannel::setVolume(int)+0xe>
c001addd:	b8 64 00 00 00       	mov    eax,0x64
c001ade2:	85 c0                	test   eax,eax
c001ade4:	79 02                	jns    c001ade8 <SoundChannel::setVolume(int)+0x14>
c001ade6:	31 c0                	xor    eax,eax
c001ade8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001adec:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001adef:	c3                   	ret    

c001adf0 <SoundChannel::getVolume()>:
c001adf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001adf4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001adf7:	c3                   	ret    

c001adf8 <SoundChannel::pause()>:
c001adf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001adfc:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001ae00:	c3                   	ret    
c001ae01:	90                   	nop

c001ae02 <SoundChannel::SoundChannel(int, int, int, int)>:
c001ae02:	83 ec 1c             	sub    esp,0x1c
c001ae05:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ae09:	e8 ea ff ff ff       	call   c001adf8 <SoundChannel::pause()>
c001ae0e:	83 c4 04             	add    esp,0x4
c001ae11:	6a 50                	push   0x50
c001ae13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ae17:	e8 b8 ff ff ff       	call   c001add4 <SoundChannel::setVolume(int)>
c001ae1c:	83 c4 08             	add    esp,0x8
c001ae1f:	d9 e8                	fld1   
c001ae21:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001ae25:	d9 1c 24             	fstp   DWORD PTR [esp]
c001ae28:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ae2c:	e8 8f ff ff ff       	call   c001adc0 <SoundChannel::setSpeed(float)>
c001ae31:	83 c4 08             	add    esp,0x8
c001ae34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae38:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ae3c:	89 10                	mov    DWORD PTR [eax],edx
c001ae3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae42:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ae46:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ae49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae4d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ae51:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ae54:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001ae59:	75 23                	jne    c001ae7e <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001ae5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae5f:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ae68:	0f af c2             	imul   eax,edx
c001ae6b:	85 c0                	test   eax,eax
c001ae6d:	79 03                	jns    c001ae72 <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001ae6f:	83 c0 03             	add    eax,0x3
c001ae72:	c1 f8 02             	sar    eax,0x2
c001ae75:	05 a0 0f 00 00       	add    eax,0xfa0
c001ae7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ae7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae82:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ae86:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001ae89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae8d:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001ae94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae98:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001ae9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aea3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aea6:	c1 e0 02             	shl    eax,0x2
c001aea9:	83 ec 0c             	sub    esp,0xc
c001aeac:	50                   	push   eax
c001aead:	e8 6c 0d ff ff       	call   c000bc1e <malloc>
c001aeb2:	83 c4 10             	add    esp,0x10
c001aeb5:	89 c2                	mov    edx,eax
c001aeb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aebb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001aebe:	83 ec 04             	sub    esp,0x4
c001aec1:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aec5:	50                   	push   eax
c001aec6:	6a 01                	push   0x1
c001aec8:	6a 04                	push   0x4
c001aeca:	e8 7c d9 fe ff       	call   c000884b <src_new>
c001aecf:	83 c4 10             	add    esp,0x10
c001aed2:	89 c2                	mov    edx,eax
c001aed4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aed8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001aedb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aedf:	85 c0                	test   eax,eax
c001aee1:	74 10                	je     c001aef3 <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001aee3:	83 ec 0c             	sub    esp,0xc
c001aee6:	68 8c 21 02 c0       	push   0xc002218c
c001aeeb:	e8 84 9c ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c001aef0:	83 c4 10             	add    esp,0x10
c001aef3:	90                   	nop
c001aef4:	83 c4 1c             	add    esp,0x1c
c001aef7:	c3                   	ret    

c001aef8 <SoundChannel::play()>:
c001aef8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aefc:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001af00:	c3                   	ret    
c001af01:	90                   	nop

c001af02 <SoundChannel::paused()>:
c001af02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af06:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001af09:	c3                   	ret    

c001af0a <SoundChannel::getSampleRate()>:
c001af0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af0e:	8b 00                	mov    eax,DWORD PTR [eax]
c001af10:	c3                   	ret    
c001af11:	90                   	nop

c001af12 <SoundChannel::getBits()>:
c001af12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001af19:	c3                   	ret    

c001af1a <SoundChannel::getBufferUsed()>:
c001af1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af1e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001af21:	c3                   	ret    

c001af22 <SoundChannel::getBufferSize()>:
c001af22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af26:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001af29:	c3                   	ret    

c001af2a <SoundChannel::unbuffer(float*, int, int)>:
c001af2a:	53                   	push   ebx
c001af2b:	83 ec 40             	sub    esp,0x40
c001af2e:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001af32:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001af3a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001af3d:	db 03                	fild   DWORD PTR [ebx]
c001af3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001af43:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001af47:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001af4a:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001af4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af51:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001af55:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001af59:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001af5d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001af61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001af65:	8d 44 24 14          	lea    eax,[esp+0x14]
c001af69:	50                   	push   eax
c001af6a:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001af6d:	e8 93 d5 fe ff       	call   c0008505 <src_process>
c001af72:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001af76:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001af79:	83 c4 0c             	add    esp,0xc
c001af7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001af7f:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001af82:	29 d0                	sub    eax,edx
c001af84:	c1 e0 02             	shl    eax,0x2
c001af87:	50                   	push   eax
c001af88:	8d 04 91             	lea    eax,[ecx+edx*4]
c001af8b:	50                   	push   eax
c001af8c:	51                   	push   ecx
c001af8d:	e8 08 56 fe ff       	call   c000059a <memmove>
c001af92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001af96:	83 c4 48             	add    esp,0x48
c001af99:	5b                   	pop    ebx
c001af9a:	c3                   	ret    
c001af9b:	90                   	nop

c001af9c <SoundChannel::buffer8(unsigned char*, int)>:
c001af9c:	53                   	push   ebx
c001af9d:	31 c0                	xor    eax,eax
c001af9f:	83 ec 08             	sub    esp,0x8
c001afa2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001afa6:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001afa9:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001afac:	74 35                	je     c001afe3 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001afae:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001afb2:	7d 2f                	jge    c001afe3 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001afb4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001afb8:	d9 05 a8 21 02 c0    	fld    DWORD PTR ds:0xc00221a8
c001afbe:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001afc2:	40                   	inc    eax
c001afc3:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001afc8:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001afcb:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001afcf:	8d 59 01             	lea    ebx,[ecx+0x1]
c001afd2:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001afd5:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001afd8:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001afdb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afde:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001afe1:	eb c9                	jmp    c001afac <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001afe3:	83 c4 08             	add    esp,0x8
c001afe6:	5b                   	pop    ebx
c001afe7:	c3                   	ret    

c001afe8 <SoundDevice::SoundDevice(char const*)>:
c001afe8:	83 ec 1c             	sub    esp,0x1c
c001afeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afef:	83 ec 08             	sub    esp,0x8
c001aff2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aff6:	50                   	push   eax
c001aff7:	e8 de 54 ff ff       	call   c00104da <Device::Device(char const*)>
c001affc:	83 c4 10             	add    esp,0x10
c001afff:	ba b4 21 02 c0       	mov    edx,0xc00221b4
c001b004:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b008:	89 10                	mov    DWORD PTR [eax],edx
c001b00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b00e:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b018:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b01c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b026:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b02e:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b033:	7f 19                	jg     c001b04e <SoundDevice::SoundDevice(char const*)+0x66>
c001b035:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b039:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b03d:	83 c2 54             	add    edx,0x54
c001b040:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001b048:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b04c:	eb e0                	jmp    c001b02e <SoundDevice::SoundDevice(char const*)+0x46>
c001b04e:	90                   	nop
c001b04f:	83 c4 1c             	add    esp,0x1c
c001b052:	c3                   	ret    
c001b053:	90                   	nop

c001b054 <SoundDevice::~SoundDevice()>:
c001b054:	53                   	push   ebx
c001b055:	83 ec 18             	sub    esp,0x18
c001b058:	ba b4 21 02 c0       	mov    edx,0xc00221b4
c001b05d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b061:	89 10                	mov    DWORD PTR [eax],edx
c001b063:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b06b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b070:	7f 46                	jg     c001b0b8 <SoundDevice::~SoundDevice()+0x64>
c001b072:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b076:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b07a:	83 c2 54             	add    edx,0x54
c001b07d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001b081:	85 c0                	test   eax,eax
c001b083:	74 2d                	je     c001b0b2 <SoundDevice::~SoundDevice()+0x5e>
c001b085:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b089:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b08d:	83 c2 54             	add    edx,0x54
c001b090:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001b094:	85 db                	test   ebx,ebx
c001b096:	74 1a                	je     c001b0b2 <SoundDevice::~SoundDevice()+0x5e>
c001b098:	83 ec 0c             	sub    esp,0xc
c001b09b:	53                   	push   ebx
c001b09c:	e8 03 fd ff ff       	call   c001ada4 <SoundChannel::~SoundChannel()>
c001b0a1:	83 c4 10             	add    esp,0x10
c001b0a4:	83 ec 08             	sub    esp,0x8
c001b0a7:	6a 2c                	push   0x2c
c001b0a9:	53                   	push   ebx
c001b0aa:	e8 50 3d ff ff       	call   c000edff <operator delete(void*, unsigned long)>
c001b0af:	83 c4 10             	add    esp,0x10
c001b0b2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b0b6:	eb b3                	jmp    c001b06b <SoundDevice::~SoundDevice()+0x17>
c001b0b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b0bc:	83 ec 0c             	sub    esp,0xc
c001b0bf:	50                   	push   eax
c001b0c0:	e8 c7 50 ff ff       	call   c001018c <Device::~Device()>
c001b0c5:	83 c4 10             	add    esp,0x10
c001b0c8:	90                   	nop
c001b0c9:	83 c4 18             	add    esp,0x18
c001b0cc:	5b                   	pop    ebx
c001b0cd:	c3                   	ret    

c001b0ce <SoundDevice::~SoundDevice()>:
c001b0ce:	83 ec 0c             	sub    esp,0xc
c001b0d1:	83 ec 0c             	sub    esp,0xc
c001b0d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0d8:	e8 77 ff ff ff       	call   c001b054 <SoundDevice::~SoundDevice()>
c001b0dd:	83 c4 10             	add    esp,0x10
c001b0e0:	83 ec 08             	sub    esp,0x8
c001b0e3:	68 e4 01 00 00       	push   0x1e4
c001b0e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0ec:	e8 0e 3d ff ff       	call   c000edff <operator delete(void*, unsigned long)>
c001b0f1:	83 c4 10             	add    esp,0x10
c001b0f4:	83 c4 0c             	add    esp,0xc
c001b0f7:	c3                   	ret    

c001b0f8 <SoundDevice::getFreeChannelNum()>:
c001b0f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b0fc:	31 c0                	xor    eax,eax
c001b0fe:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001b106:	74 09                	je     c001b111 <SoundDevice::getFreeChannelNum()+0x19>
c001b108:	40                   	inc    eax
c001b109:	83 f8 20             	cmp    eax,0x20
c001b10c:	75 f0                	jne    c001b0fe <SoundDevice::getFreeChannelNum()+0x6>
c001b10e:	83 c8 ff             	or     eax,0xffffffff
c001b111:	c3                   	ret    

c001b112 <SoundDevice::addChannel(SoundChannel*)>:
c001b112:	56                   	push   esi
c001b113:	53                   	push   ebx
c001b114:	51                   	push   ecx
c001b115:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b119:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b11d:	53                   	push   ebx
c001b11e:	e8 d5 ff ff ff       	call   c001b0f8 <SoundDevice::getFreeChannelNum()>
c001b123:	5a                   	pop    edx
c001b124:	83 f8 ff             	cmp    eax,0xffffffff
c001b127:	74 51                	je     c001b17a <SoundDevice::addChannel(SoundChannel*)+0x68>
c001b129:	85 f6                	test   esi,esi
c001b12b:	74 4d                	je     c001b17a <SoundDevice::addChannel(SoundChannel*)+0x68>
c001b12d:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001b134:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001b13b:	75 30                	jne    c001b16d <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001b13d:	83 ec 0c             	sub    esp,0xc
c001b140:	56                   	push   esi
c001b141:	e8 c4 fd ff ff       	call   c001af0a <SoundChannel::getSampleRate()>
c001b146:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001b14c:	89 34 24             	mov    DWORD PTR [esp],esi
c001b14f:	e8 be fd ff ff       	call   c001af12 <SoundChannel::getBits()>
c001b154:	83 c4 0c             	add    esp,0xc
c001b157:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001b15d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b15f:	50                   	push   eax
c001b160:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001b166:	53                   	push   ebx
c001b167:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001b16a:	83 c4 10             	add    esp,0x10
c001b16d:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001b173:	b8 01 00 00 00       	mov    eax,0x1
c001b178:	eb 03                	jmp    c001b17d <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001b17a:	83 c8 ff             	or     eax,0xffffffff
c001b17d:	5a                   	pop    edx
c001b17e:	5b                   	pop    ebx
c001b17f:	5e                   	pop    esi
c001b180:	c3                   	ret    
c001b181:	90                   	nop

c001b182 <SoundDevice::removeChannel(int)>:
c001b182:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b186:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b18a:	83 fa 1f             	cmp    edx,0x1f
c001b18d:	77 23                	ja     c001b1b2 <SoundDevice::removeChannel(int)+0x30>
c001b18f:	8d 14 90             	lea    edx,[eax+edx*4]
c001b192:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001b199:	74 17                	je     c001b1b2 <SoundDevice::removeChannel(int)+0x30>
c001b19b:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001b1a5:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001b1ab:	75 05                	jne    c001b1b2 <SoundDevice::removeChannel(int)+0x30>
c001b1ad:	8b 00                	mov    eax,DWORD PTR [eax]
c001b1af:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001b1b2:	c3                   	ret    
c001b1b3:	90                   	nop

c001b1b4 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001b1b4:	56                   	push   esi
c001b1b5:	53                   	push   ebx
c001b1b6:	31 db                	xor    ebx,ebx
c001b1b8:	83 ec 14             	sub    esp,0x14
c001b1bb:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b1bf:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001b1c3:	7d 55                	jge    c001b21a <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b1c9:	d9 e8                	fld1   
c001b1cb:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001b1ce:	d8 0d e4 21 02 c0    	fmul   DWORD PTR ds:0xc00221e4
c001b1d4:	d8 0d e8 21 02 c0    	fmul   DWORD PTR ds:0xc00221e8
c001b1da:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001b1de:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001b1e2:	d8 15 ec 21 02 c0    	fcom   DWORD PTR ds:0xc00221ec
c001b1e8:	df e0                	fnstsw ax
c001b1ea:	9e                   	sahf   
c001b1eb:	72 08                	jb     c001b1f5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001b1ed:	dd d8                	fstp   st(0)
c001b1ef:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001b1f3:	eb 22                	jmp    c001b217 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001b1f5:	d9 ee                	fldz   
c001b1f7:	d8 d9                	fcomp  st(1)
c001b1f9:	df e0                	fnstsw ax
c001b1fb:	9e                   	sahf   
c001b1fc:	72 08                	jb     c001b206 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001b1fe:	dd d8                	fstp   st(0)
c001b200:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001b204:	eb 11                	jmp    c001b217 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001b206:	83 ec 10             	sub    esp,0x10
c001b209:	d9 1c 24             	fstp   DWORD PTR [esp]
c001b20c:	e8 0b 36 00 00       	call   c001e81c <lrintf>
c001b211:	83 c4 10             	add    esp,0x10
c001b214:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001b217:	43                   	inc    ebx
c001b218:	eb a5                	jmp    c001b1bf <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001b21a:	83 c4 14             	add    esp,0x14
c001b21d:	5b                   	pop    ebx
c001b21e:	5e                   	pop    esi
c001b21f:	c3                   	ret    

c001b220 <SoundDevice::getAudio(int, float*, float*)>:
c001b220:	55                   	push   ebp
c001b221:	57                   	push   edi
c001b222:	56                   	push   esi
c001b223:	53                   	push   ebx
c001b224:	31 db                	xor    ebx,ebx
c001b226:	83 ec 20             	sub    esp,0x20
c001b229:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b22d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b231:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b235:	c1 e0 02             	shl    eax,0x2
c001b238:	50                   	push   eax
c001b239:	6a 00                	push   0x0
c001b23b:	55                   	push   ebp
c001b23c:	e8 c7 53 fe ff       	call   c0000608 <memset>
c001b241:	83 c4 10             	add    esp,0x10
c001b244:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b248:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001b24f:	85 c0                	test   eax,eax
c001b251:	0f 84 94 00 00 00    	je     c001b2eb <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b257:	83 ec 0c             	sub    esp,0xc
c001b25a:	50                   	push   eax
c001b25b:	e8 a2 fc ff ff       	call   c001af02 <SoundChannel::paused()>
c001b260:	83 c4 10             	add    esp,0x10
c001b263:	84 c0                	test   al,al
c001b265:	0f 85 80 00 00 00    	jne    c001b2eb <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b26b:	83 ec 0c             	sub    esp,0xc
c001b26e:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b275:	e8 76 fb ff ff       	call   c001adf0 <SoundChannel::getVolume()>
c001b27a:	83 c4 10             	add    esp,0x10
c001b27d:	85 c0                	test   eax,eax
c001b27f:	74 6a                	je     c001b2eb <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b281:	83 ec 0c             	sub    esp,0xc
c001b284:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b28b:	e8 60 fb ff ff       	call   c001adf0 <SoundChannel::getVolume()>
c001b290:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b294:	d9 05 f0 21 02 c0    	fld    DWORD PTR ds:0xc00221f0
c001b29a:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001b29e:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001b2a2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001b2a6:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001b2ac:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001b2b0:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b2b7:	e8 6e fc ff ff       	call   c001af2a <SoundChannel::unbuffer(float*, int, int)>
c001b2bc:	83 c4 20             	add    esp,0x20
c001b2bf:	31 d2                	xor    edx,edx
c001b2c1:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001b2c5:	39 c2                	cmp    edx,eax
c001b2c7:	7d 1a                	jge    c001b2e3 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001b2c9:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001b2cd:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001b2d0:	d8 c9                	fmul   st,st(1)
c001b2d2:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001b2d8:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001b2dc:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001b2e0:	42                   	inc    edx
c001b2e1:	eb e2                	jmp    c001b2c5 <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001b2e3:	dd d8                	fstp   st(0)
c001b2e5:	39 c7                	cmp    edi,eax
c001b2e7:	7e 02                	jle    c001b2eb <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b2e9:	89 c7                	mov    edi,eax
c001b2eb:	43                   	inc    ebx
c001b2ec:	83 fb 20             	cmp    ebx,0x20
c001b2ef:	0f 85 53 ff ff ff    	jne    c001b248 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001b2f5:	83 c4 1c             	add    esp,0x1c
c001b2f8:	89 f8                	mov    eax,edi
c001b2fa:	5b                   	pop    ebx
c001b2fb:	5e                   	pop    esi
c001b2fc:	5f                   	pop    edi
c001b2fd:	5d                   	pop    ebp
c001b2fe:	c3                   	ret    
c001b2ff:	90                   	nop

c001b300 <PCI::open(int, int, void*)>:
c001b300:	83 ec 18             	sub    esp,0x18
c001b303:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b307:	8b 10                	mov    edx,DWORD PTR [eax]
c001b309:	50                   	push   eax
c001b30a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b30d:	31 c0                	xor    eax,eax
c001b30f:	83 c4 1c             	add    esp,0x1c
c001b312:	c3                   	ret    
c001b313:	90                   	nop

c001b314 <PCI::close(int, int, void*)>:
c001b314:	31 c0                	xor    eax,eax
c001b316:	c3                   	ret    
c001b317:	90                   	nop

c001b318 <PCI::PCI()>:
c001b318:	83 ec 0c             	sub    esp,0xc
c001b31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b31f:	83 ec 08             	sub    esp,0x8
c001b322:	68 f4 21 02 c0       	push   0xc00221f4
c001b327:	50                   	push   eax
c001b328:	e8 39 48 ff ff       	call   c000fb66 <Bus::Bus(char const*)>
c001b32d:	83 c4 10             	add    esp,0x10
c001b330:	ba a0 22 02 c0       	mov    edx,0xc00222a0
c001b335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b339:	89 10                	mov    DWORD PTR [eax],edx
c001b33b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b33f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b345:	0f b6 d0             	movzx  edx,al
c001b348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b34c:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b357:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b35d:	0f b6 d0             	movzx  edx,al
c001b360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b364:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b36d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b373:	8d 50 01             	lea    edx,[eax+0x1]
c001b376:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b37a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b380:	0f b6 d0             	movzx  edx,al
c001b383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b387:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b38b:	83 c9 c0             	or     ecx,0xffffffc0
c001b38e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b392:	90                   	nop
c001b393:	83 c4 0c             	add    esp,0xc
c001b396:	c3                   	ret    
c001b397:	90                   	nop

c001b398 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b398:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b39c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b3a1:	89 ca                	mov    edx,ecx
c001b3a3:	c1 e0 10             	shl    eax,0x10
c001b3a6:	81 e2 fc 00 00 00    	and    edx,0xfc
c001b3ac:	09 d0                	or     eax,edx
c001b3ae:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001b3b3:	c1 e2 08             	shl    edx,0x8
c001b3b6:	09 d0                	or     eax,edx
c001b3b8:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001b3bd:	c1 e2 0b             	shl    edx,0xb
c001b3c0:	09 d0                	or     eax,edx
c001b3c2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b3c7:	0d 00 00 00 80       	or     eax,0x80000000
c001b3cc:	ef                   	out    dx,eax
c001b3cd:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b3d2:	ed                   	in     eax,dx
c001b3d3:	83 e1 02             	and    ecx,0x2
c001b3d6:	0f b6 c9             	movzx  ecx,cl
c001b3d9:	c1 e1 03             	shl    ecx,0x3
c001b3dc:	d3 e8                	shr    eax,cl
c001b3de:	c3                   	ret    
c001b3df:	90                   	nop

c001b3e0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b3e0:	6a 00                	push   0x0
c001b3e2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b3e7:	50                   	push   eax
c001b3e8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b3ed:	50                   	push   eax
c001b3ee:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b3f3:	50                   	push   eax
c001b3f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b3f8:	e8 9b ff ff ff       	call   c001b398 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3fd:	83 c4 14             	add    esp,0x14
c001b400:	c3                   	ret    
c001b401:	90                   	nop

c001b402 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b402:	6a 0e                	push   0xe
c001b404:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b409:	50                   	push   eax
c001b40a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b40f:	50                   	push   eax
c001b410:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b415:	50                   	push   eax
c001b416:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b41a:	e8 79 ff ff ff       	call   c001b398 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b41f:	83 c4 14             	add    esp,0x14
c001b422:	0f b6 c0             	movzx  eax,al
c001b425:	c3                   	ret    

c001b426 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b426:	55                   	push   ebp
c001b427:	57                   	push   edi
c001b428:	56                   	push   esi
c001b429:	53                   	push   ebx
c001b42a:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b42f:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b434:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001b439:	6a 0a                	push   0xa
c001b43b:	56                   	push   esi
c001b43c:	55                   	push   ebp
c001b43d:	57                   	push   edi
c001b43e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b442:	e8 51 ff ff ff       	call   c001b398 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b447:	6a 0a                	push   0xa
c001b449:	89 c3                	mov    ebx,eax
c001b44b:	56                   	push   esi
c001b44c:	0f b6 db             	movzx  ebx,bl
c001b44f:	55                   	push   ebp
c001b450:	57                   	push   edi
c001b451:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b455:	e8 3e ff ff ff       	call   c001b398 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b45a:	83 c4 28             	add    esp,0x28
c001b45d:	25 00 ff 00 00       	and    eax,0xff00
c001b462:	09 d8                	or     eax,ebx
c001b464:	5b                   	pop    ebx
c001b465:	5e                   	pop    esi
c001b466:	5f                   	pop    edi
c001b467:	5d                   	pop    ebp
c001b468:	c3                   	ret    
c001b469:	90                   	nop

c001b46a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b46a:	6a 08                	push   0x8
c001b46c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b471:	50                   	push   eax
c001b472:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b477:	50                   	push   eax
c001b478:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b47d:	50                   	push   eax
c001b47e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b482:	e8 11 ff ff ff       	call   c001b398 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b487:	83 c4 14             	add    esp,0x14
c001b48a:	0f b6 c4             	movzx  eax,ah
c001b48d:	c3                   	ret    

c001b48e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b48e:	6a 08                	push   0x8
c001b490:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b495:	50                   	push   eax
c001b496:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b49b:	50                   	push   eax
c001b49c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b4a1:	50                   	push   eax
c001b4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b4a6:	e8 ed fe ff ff       	call   c001b398 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4ab:	83 c4 14             	add    esp,0x14
c001b4ae:	c3                   	ret    
c001b4af:	90                   	nop

c001b4b0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b4b0:	6a 3c                	push   0x3c
c001b4b2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b4b7:	50                   	push   eax
c001b4b8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b4bd:	50                   	push   eax
c001b4be:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b4c3:	50                   	push   eax
c001b4c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b4c8:	e8 cb fe ff ff       	call   c001b398 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4cd:	83 c4 14             	add    esp,0x14
c001b4d0:	c3                   	ret    
c001b4d1:	90                   	nop

c001b4d2 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b4d2:	6a 18                	push   0x18
c001b4d4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b4d9:	50                   	push   eax
c001b4da:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b4df:	50                   	push   eax
c001b4e0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b4e5:	50                   	push   eax
c001b4e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b4ea:	e8 a9 fe ff ff       	call   c001b398 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4ef:	83 c4 14             	add    esp,0x14
c001b4f2:	0f b6 c4             	movzx  eax,ah
c001b4f5:	c3                   	ret    

c001b4f6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b4f6:	55                   	push   ebp
c001b4f7:	57                   	push   edi
c001b4f8:	56                   	push   esi
c001b4f9:	53                   	push   ebx
c001b4fa:	50                   	push   eax
c001b4fb:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b4ff:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001b504:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b509:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001b50e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b515:	8d 43 12             	lea    eax,[ebx+0x12]
c001b518:	83 c3 10             	add    ebx,0x10
c001b51b:	0f b6 c0             	movzx  eax,al
c001b51e:	0f b6 db             	movzx  ebx,bl
c001b521:	50                   	push   eax
c001b522:	51                   	push   ecx
c001b523:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b527:	57                   	push   edi
c001b528:	55                   	push   ebp
c001b529:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b52d:	e8 66 fe ff ff       	call   c001b398 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b532:	53                   	push   ebx
c001b533:	89 c6                	mov    esi,eax
c001b535:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b539:	c1 e6 10             	shl    esi,0x10
c001b53c:	51                   	push   ecx
c001b53d:	57                   	push   edi
c001b53e:	55                   	push   ebp
c001b53f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b543:	e8 50 fe ff ff       	call   c001b398 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b548:	83 c4 2c             	add    esp,0x2c
c001b54b:	0f b7 c0             	movzx  eax,ax
c001b54e:	5b                   	pop    ebx
c001b54f:	09 f0                	or     eax,esi
c001b551:	5e                   	pop    esi
c001b552:	5f                   	pop    edi
c001b553:	5d                   	pop    ebp
c001b554:	c3                   	ret    
c001b555:	90                   	nop

c001b556 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b556:	53                   	push   ebx
c001b557:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b55c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b561:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b565:	c1 e1 10             	shl    ecx,0x10
c001b568:	25 fc 00 00 00       	and    eax,0xfc
c001b56d:	09 c1                	or     ecx,eax
c001b56f:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b574:	c1 e0 08             	shl    eax,0x8
c001b577:	09 c1                	or     ecx,eax
c001b579:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b57e:	c1 e0 0b             	shl    eax,0xb
c001b581:	09 c1                	or     ecx,eax
c001b583:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b589:	89 c8                	mov    eax,ecx
c001b58b:	ef                   	out    dx,eax
c001b58c:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b591:	ed                   	in     eax,dx
c001b592:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001b597:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001b59c:	74 0a                	je     c001b5a8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001b59e:	0f b7 d8             	movzx  ebx,ax
c001b5a1:	89 d0                	mov    eax,edx
c001b5a3:	c1 e0 10             	shl    eax,0x10
c001b5a6:	eb 05                	jmp    c001b5ad <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001b5a8:	66 31 c0             	xor    ax,ax
c001b5ab:	89 d3                	mov    ebx,edx
c001b5ad:	09 c3                	or     ebx,eax
c001b5af:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b5b4:	89 c8                	mov    eax,ecx
c001b5b6:	ef                   	out    dx,eax
c001b5b7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b5bc:	89 d8                	mov    eax,ebx
c001b5be:	ef                   	out    dx,eax
c001b5bf:	5b                   	pop    ebx
c001b5c0:	c3                   	ret    
c001b5c1:	90                   	nop

c001b5c2 <PCI::checkBus(unsigned char)>:
c001b5c2:	56                   	push   esi
c001b5c3:	53                   	push   ebx
c001b5c4:	31 db                	xor    ebx,ebx
c001b5c6:	51                   	push   ecx
c001b5c7:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b5cc:	52                   	push   edx
c001b5cd:	53                   	push   ebx
c001b5ce:	43                   	inc    ebx
c001b5cf:	56                   	push   esi
c001b5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b5d4:	e8 4d 03 00 00       	call   c001b926 <PCI::checkDevice(unsigned char, unsigned char)>
c001b5d9:	83 c4 10             	add    esp,0x10
c001b5dc:	83 fb 20             	cmp    ebx,0x20
c001b5df:	75 eb                	jne    c001b5cc <PCI::checkBus(unsigned char)+0xa>
c001b5e1:	58                   	pop    eax
c001b5e2:	5b                   	pop    ebx
c001b5e3:	5e                   	pop    esi
c001b5e4:	c3                   	ret    
c001b5e5:	90                   	nop

c001b5e6 <PCI::foundDevice(PCIDeviceInfo)>:
c001b5e6:	55                   	push   ebp
c001b5e7:	57                   	push   edi
c001b5e8:	56                   	push   esi
c001b5e9:	53                   	push   ebx
c001b5ea:	83 ec 1c             	sub    esp,0x1c
c001b5ed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b5f1:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001b5f7:	0f 84 51 01 00 00    	je     c001b74e <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b5fd:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b601:	66 81 f9 06 04       	cmp    cx,0x406
c001b606:	75 2c                	jne    c001b634 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001b608:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b60d:	50                   	push   eax
c001b60e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b613:	50                   	push   eax
c001b614:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b619:	50                   	push   eax
c001b61a:	56                   	push   esi
c001b61b:	e8 b2 fe ff ff       	call   c001b4d2 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b620:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b624:	0f b6 c0             	movzx  eax,al
c001b627:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b62b:	83 c4 2c             	add    esp,0x2c
c001b62e:	5b                   	pop    ebx
c001b62f:	5e                   	pop    esi
c001b630:	5f                   	pop    edi
c001b631:	5d                   	pop    ebp
c001b632:	eb 8e                	jmp    c001b5c2 <PCI::checkBus(unsigned char)>
c001b634:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b638:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b63e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b642:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b646:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001b64a:	88 d3                	mov    bl,dl
c001b64c:	85 c0                	test   eax,eax
c001b64e:	74 33                	je     c001b683 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b650:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b653:	85 d2                	test   edx,edx
c001b655:	74 28                	je     c001b67f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b657:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001b65d:	31 ef                	xor    edi,ebp
c001b65f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001b665:	75 18                	jne    c001b67f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b667:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b66b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001b671:	75 0c                	jne    c001b67f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b673:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001b679:	0f 84 cf 00 00 00    	je     c001b74e <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b67f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b681:	eb c9                	jmp    c001b64c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001b683:	66 81 f9 01 06       	cmp    cx,0x601
c001b688:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001b68c:	75 18                	jne    c001b6a6 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001b68e:	83 ec 0c             	sub    esp,0xc
c001b691:	68 58 01 00 00       	push   0x158
c001b696:	e8 55 37 ff ff       	call   c000edf0 <operator new(unsigned long)>
c001b69b:	59                   	pop    ecx
c001b69c:	89 c5                	mov    ebp,eax
c001b69e:	5f                   	pop    edi
c001b69f:	68 fc 21 02 c0       	push   0xc00221fc
c001b6a4:	eb 7d                	jmp    c001b723 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001b6a6:	66 81 f9 01 01       	cmp    cx,0x101
c001b6ab:	75 60                	jne    c001b70d <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001b6ad:	83 ec 0c             	sub    esp,0xc
c001b6b0:	68 70 02 00 00       	push   0x270
c001b6b5:	e8 36 37 ff ff       	call   c000edf0 <operator new(unsigned long)>
c001b6ba:	89 04 24             	mov    DWORD PTR [esp],eax
c001b6bd:	89 c5                	mov    ebp,eax
c001b6bf:	e8 26 03 00 00       	call   c001b9ea <IDE::IDE()>
c001b6c4:	58                   	pop    eax
c001b6c5:	5a                   	pop    edx
c001b6c6:	55                   	push   ebp
c001b6c7:	56                   	push   esi
c001b6c8:	e8 1d 4c ff ff       	call   c00102ea <Device::addChild(Device*)>
c001b6cd:	83 ec 1c             	sub    esp,0x1c
c001b6d0:	b9 09 00 00 00       	mov    ecx,0x9
c001b6d5:	fc                   	cld    
c001b6d6:	89 e7                	mov    edi,esp
c001b6d8:	89 de                	mov    esi,ebx
c001b6da:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b6dc:	55                   	push   ebp
c001b6dd:	e8 e2 4a ff ff       	call   c00101c4 <Device::preOpenPCI(PCIDeviceInfo)>
c001b6e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b6e5:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b6e9:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b6f1:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b6f9:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b701:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b704:	83 c4 4c             	add    esp,0x4c
c001b707:	5b                   	pop    ebx
c001b708:	5e                   	pop    esi
c001b709:	5f                   	pop    edi
c001b70a:	5d                   	pop    ebp
c001b70b:	ff e0                	jmp    eax
c001b70d:	83 ec 0c             	sub    esp,0xc
c001b710:	68 58 01 00 00       	push   0x158
c001b715:	e8 d6 36 ff ff       	call   c000edf0 <operator new(unsigned long)>
c001b71a:	59                   	pop    ecx
c001b71b:	89 c5                	mov    ebp,eax
c001b71d:	5f                   	pop    edi
c001b71e:	68 1b 22 02 c0       	push   0xc002221b
c001b723:	55                   	push   ebp
c001b724:	e8 ad 4e ff ff       	call   c00105d6 <DriverlessDevice::DriverlessDevice(char const*)>
c001b729:	58                   	pop    eax
c001b72a:	5a                   	pop    edx
c001b72b:	55                   	push   ebp
c001b72c:	56                   	push   esi
c001b72d:	e8 b8 4b ff ff       	call   c00102ea <Device::addChild(Device*)>
c001b732:	b9 09 00 00 00       	mov    ecx,0x9
c001b737:	fc                   	cld    
c001b738:	89 df                	mov    edi,ebx
c001b73a:	89 de                	mov    esi,ebx
c001b73c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b73e:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001b742:	83 c4 2c             	add    esp,0x2c
c001b745:	5b                   	pop    ebx
c001b746:	5e                   	pop    esi
c001b747:	5f                   	pop    edi
c001b748:	5d                   	pop    ebp
c001b749:	e9 76 4a ff ff       	jmp    c00101c4 <Device::preOpenPCI(PCIDeviceInfo)>
c001b74e:	83 c4 1c             	add    esp,0x1c
c001b751:	5b                   	pop    ebx
c001b752:	5e                   	pop    esi
c001b753:	5f                   	pop    edi
c001b754:	5d                   	pop    ebp
c001b755:	c3                   	ret    

c001b756 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b756:	55                   	push   ebp
c001b757:	57                   	push   edi
c001b758:	56                   	push   esi
c001b759:	53                   	push   ebx
c001b75a:	83 ec 5c             	sub    esp,0x5c
c001b75d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001b761:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b765:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001b769:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001b76e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b772:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001b776:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001b77b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b77f:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001b784:	6a 0c                	push   0xc
c001b786:	55                   	push   ebp
c001b787:	53                   	push   ebx
c001b788:	57                   	push   edi
c001b789:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001b790:	e8 03 fc ff ff       	call   c001b398 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b795:	83 c4 0c             	add    esp,0xc
c001b798:	6a 00                	push   0x0
c001b79a:	68 35 22 02 c0       	push   0xc0022235
c001b79f:	e8 3b 37 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001b7a4:	55                   	push   ebp
c001b7a5:	53                   	push   ebx
c001b7a6:	57                   	push   edi
c001b7a7:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b7ae:	e8 73 fc ff ff       	call   c001b426 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b7b3:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001b7b8:	83 c4 20             	add    esp,0x20
c001b7bb:	55                   	push   ebp
c001b7bc:	53                   	push   ebx
c001b7bd:	57                   	push   edi
c001b7be:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b7c2:	e8 e9 fc ff ff       	call   c001b4b0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b7c7:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001b7ce:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b7d2:	55                   	push   ebp
c001b7d3:	53                   	push   ebx
c001b7d4:	57                   	push   edi
c001b7d5:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b7dc:	e8 b7 fb ff ff       	call   c001b398 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b7e1:	0f b6 c4             	movzx  eax,ah
c001b7e4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b7e8:	83 c4 18             	add    esp,0x18
c001b7eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b7ef:	68 49 22 02 c0       	push   0xc0022249
c001b7f4:	e8 e6 36 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001b7f9:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b7fd:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001b801:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c001b806:	83 c4 10             	add    esp,0x10
c001b809:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001b80f:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001b816:	74 6c                	je     c001b884 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b818:	31 f6                	xor    esi,esi
c001b81a:	8b 15 08 35 02 c0    	mov    edx,DWORD PTR ds:0xc0023508
c001b820:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b826:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001b82c:	7e 56                	jle    c001b884 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b82e:	8d 14 f2             	lea    edx,[edx+esi*8]
c001b831:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001b838:	39 cb                	cmp    ebx,ecx
c001b83a:	75 45                	jne    c001b881 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b83c:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001b843:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001b847:	75 38                	jne    c001b881 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b849:	83 ec 0c             	sub    esp,0xc
c001b84c:	68 58 22 02 c0       	push   0xc0022258
c001b851:	e8 89 36 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001b856:	8b 15 08 35 02 c0    	mov    edx,DWORD PTR ds:0xc0023508
c001b85c:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b862:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001b86a:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001b86e:	52                   	push   edx
c001b86f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b873:	53                   	push   ebx
c001b874:	68 7d 22 02 c0       	push   0xc002227d
c001b879:	e8 61 36 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001b87e:	83 c4 20             	add    esp,0x20
c001b881:	46                   	inc    esi
c001b882:	eb 96                	jmp    c001b81a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001b884:	31 d2                	xor    edx,edx
c001b886:	83 ec 0c             	sub    esp,0xc
c001b889:	55                   	push   ebp
c001b88a:	53                   	push   ebx
c001b88b:	57                   	push   edi
c001b88c:	52                   	push   edx
c001b88d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b891:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b898:	e8 59 fc ff ff       	call   c001b4f6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b89d:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001b8a1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b8a5:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b8a9:	42                   	inc    edx
c001b8aa:	83 c4 20             	add    esp,0x20
c001b8ad:	83 fa 06             	cmp    edx,0x6
c001b8b0:	75 d4                	jne    c001b886 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001b8b2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b8b6:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001b8ba:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001b8be:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001b8c2:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001b8c6:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b8ca:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b8cf:	86 e0                	xchg   al,ah
c001b8d1:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001b8d6:	55                   	push   ebp
c001b8d7:	53                   	push   ebx
c001b8d8:	57                   	push   edi
c001b8d9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b8dd:	e8 88 fb ff ff       	call   c001b46a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b8e2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b8e6:	55                   	push   ebp
c001b8e7:	53                   	push   ebx
c001b8e8:	57                   	push   edi
c001b8e9:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b8f0:	e8 eb fa ff ff       	call   c001b3e0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b8f5:	83 ec 0c             	sub    esp,0xc
c001b8f8:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001b8fd:	b9 09 00 00 00       	mov    ecx,0x9
c001b902:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001b906:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001b90a:	fc                   	cld    
c001b90b:	89 e7                	mov    edi,esp
c001b90d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b90f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001b916:	e8 cb fc ff ff       	call   c001b5e6 <PCI::foundDevice(PCIDeviceInfo)>
c001b91b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b921:	5b                   	pop    ebx
c001b922:	5e                   	pop    esi
c001b923:	5f                   	pop    edi
c001b924:	5d                   	pop    ebp
c001b925:	c3                   	ret    

c001b926 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b926:	55                   	push   ebp
c001b927:	57                   	push   edi
c001b928:	56                   	push   esi
c001b929:	53                   	push   ebx
c001b92a:	83 ec 0c             	sub    esp,0xc
c001b92d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b931:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b936:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b93b:	6a 00                	push   0x0
c001b93d:	56                   	push   esi
c001b93e:	57                   	push   edi
c001b93f:	55                   	push   ebp
c001b940:	e8 9b fa ff ff       	call   c001b3e0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b945:	6a 00                	push   0x0
c001b947:	56                   	push   esi
c001b948:	57                   	push   edi
c001b949:	55                   	push   ebp
c001b94a:	e8 07 fe ff ff       	call   c001b756 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b94f:	83 c4 20             	add    esp,0x20
c001b952:	6a 00                	push   0x0
c001b954:	56                   	push   esi
c001b955:	57                   	push   edi
c001b956:	55                   	push   ebp
c001b957:	e8 a6 fa ff ff       	call   c001b402 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b95c:	83 c4 10             	add    esp,0x10
c001b95f:	84 c0                	test   al,al
c001b961:	79 27                	jns    c001b98a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b963:	bb 01 00 00 00       	mov    ebx,0x1
c001b968:	53                   	push   ebx
c001b969:	56                   	push   esi
c001b96a:	57                   	push   edi
c001b96b:	55                   	push   ebp
c001b96c:	e8 6f fa ff ff       	call   c001b3e0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b971:	83 c4 10             	add    esp,0x10
c001b974:	66 40                	inc    ax
c001b976:	74 0c                	je     c001b984 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001b978:	53                   	push   ebx
c001b979:	56                   	push   esi
c001b97a:	57                   	push   edi
c001b97b:	55                   	push   ebp
c001b97c:	e8 d5 fd ff ff       	call   c001b756 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b981:	83 c4 10             	add    esp,0x10
c001b984:	43                   	inc    ebx
c001b985:	83 fb 08             	cmp    ebx,0x8
c001b988:	75 de                	jne    c001b968 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b98a:	83 c4 0c             	add    esp,0xc
c001b98d:	5b                   	pop    ebx
c001b98e:	5e                   	pop    esi
c001b98f:	5f                   	pop    edi
c001b990:	5d                   	pop    ebp
c001b991:	c3                   	ret    

c001b992 <PCI::detect()>:
c001b992:	56                   	push   esi
c001b993:	53                   	push   ebx
c001b994:	53                   	push   ebx
c001b995:	31 db                	xor    ebx,ebx
c001b997:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b99b:	6a 00                	push   0x0
c001b99d:	6a 00                	push   0x0
c001b99f:	6a 00                	push   0x0
c001b9a1:	56                   	push   esi
c001b9a2:	e8 5b fa ff ff       	call   c001b402 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b9a7:	83 c4 10             	add    esp,0x10
c001b9aa:	a8 80                	test   al,0x80
c001b9ac:	75 21                	jne    c001b9cf <PCI::detect()+0x3d>
c001b9ae:	51                   	push   ecx
c001b9af:	51                   	push   ecx
c001b9b0:	6a 00                	push   0x0
c001b9b2:	56                   	push   esi
c001b9b3:	e8 0a fc ff ff       	call   c001b5c2 <PCI::checkBus(unsigned char)>
c001b9b8:	83 c4 10             	add    esp,0x10
c001b9bb:	eb 24                	jmp    c001b9e1 <PCI::detect()+0x4f>
c001b9bd:	52                   	push   edx
c001b9be:	52                   	push   edx
c001b9bf:	53                   	push   ebx
c001b9c0:	43                   	inc    ebx
c001b9c1:	56                   	push   esi
c001b9c2:	e8 fb fb ff ff       	call   c001b5c2 <PCI::checkBus(unsigned char)>
c001b9c7:	83 c4 10             	add    esp,0x10
c001b9ca:	83 fb 08             	cmp    ebx,0x8
c001b9cd:	74 12                	je     c001b9e1 <PCI::detect()+0x4f>
c001b9cf:	53                   	push   ebx
c001b9d0:	6a 00                	push   0x0
c001b9d2:	6a 00                	push   0x0
c001b9d4:	56                   	push   esi
c001b9d5:	e8 06 fa ff ff       	call   c001b3e0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b9da:	83 c4 10             	add    esp,0x10
c001b9dd:	66 40                	inc    ax
c001b9df:	74 dc                	je     c001b9bd <PCI::detect()+0x2b>
c001b9e1:	58                   	pop    eax
c001b9e2:	5b                   	pop    ebx
c001b9e3:	5e                   	pop    esi
c001b9e4:	c3                   	ret    
c001b9e5:	90                   	nop

c001b9e6 <IDE::close(int, int, void*)>:
c001b9e6:	83 c8 ff             	or     eax,0xffffffff
c001b9e9:	c3                   	ret    

c001b9ea <IDE::IDE()>:
c001b9ea:	83 ec 0c             	sub    esp,0xc
c001b9ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9f1:	83 ec 08             	sub    esp,0x8
c001b9f4:	68 c4 22 02 c0       	push   0xc00222c4
c001b9f9:	50                   	push   eax
c001b9fa:	e8 6d 4c ff ff       	call   c001066c <HardDiskController::HardDiskController(char const*)>
c001b9ff:	83 c4 10             	add    esp,0x10
c001ba02:	ba 04 25 02 c0       	mov    edx,0xc0022504
c001ba07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba0b:	89 10                	mov    DWORD PTR [eax],edx
c001ba0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba11:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ba18:	90                   	nop
c001ba19:	83 c4 0c             	add    esp,0xc
c001ba1c:	c3                   	ret    
c001ba1d:	90                   	nop

c001ba1e <IDE::prepareInterrupt(unsigned char)>:
c001ba1e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ba23:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ba27:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001ba2f:	c3                   	ret    

c001ba30 <selectDrive(unsigned char, unsigned char)>:
c001ba30:	c3                   	ret    
c001ba31:	90                   	nop

c001ba32 <IDE::getBase(unsigned char)>:
c001ba32:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ba37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba3b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001ba43:	c3                   	ret    

c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001ba44:	55                   	push   ebp
c001ba45:	57                   	push   edi
c001ba46:	56                   	push   esi
c001ba47:	53                   	push   ebx
c001ba48:	83 ec 1c             	sub    esp,0x1c
c001ba4b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ba4f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ba53:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001ba56:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ba5a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ba5e:	80 f9 03             	cmp    cl,0x3
c001ba61:	77 51                	ja     c001bab4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001ba63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba67:	0f b6 f2             	movzx  esi,dl
c001ba6a:	0f b6 db             	movzx  ebx,bl
c001ba6d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ba70:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001ba74:	83 ca 80             	or     edx,0xffffff80
c001ba77:	0f b6 d2             	movzx  edx,dl
c001ba7a:	52                   	push   edx
c001ba7b:	6a 0c                	push   0xc
c001ba7d:	56                   	push   esi
c001ba7e:	57                   	push   edi
c001ba7f:	e8 c0 ff ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba84:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001ba89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ba8d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ba91:	ee                   	out    dx,al
c001ba92:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001ba97:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001ba9b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001ba9f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001baa3:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001baab:	83 c4 2c             	add    esp,0x2c
c001baae:	5b                   	pop    ebx
c001baaf:	5e                   	pop    esi
c001bab0:	5f                   	pop    edi
c001bab1:	5d                   	pop    ebp
c001bab2:	eb 90                	jmp    c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bab4:	80 fb 07             	cmp    bl,0x7
c001bab7:	77 12                	ja     c001bacb <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001bab9:	0f b6 d2             	movzx  edx,dl
c001babc:	0f b6 db             	movzx  ebx,bl
c001babf:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001bac7:	89 da                	mov    edx,ebx
c001bac9:	eb 2f                	jmp    c001bafa <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bacb:	80 fb 0d             	cmp    bl,0xd
c001bace:	77 13                	ja     c001bae3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001bad0:	0f b6 d2             	movzx  edx,dl
c001bad3:	0f b6 db             	movzx  ebx,bl
c001bad6:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001badd:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bae1:	eb 17                	jmp    c001bafa <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bae3:	80 fb 15             	cmp    bl,0x15
c001bae6:	77 13                	ja     c001bafb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bae8:	0f b6 d2             	movzx  edx,dl
c001baeb:	0f b6 db             	movzx  ebx,bl
c001baee:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001baf6:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bafa:	ee                   	out    dx,al
c001bafb:	83 c4 1c             	add    esp,0x1c
c001bafe:	5b                   	pop    ebx
c001baff:	5e                   	pop    esi
c001bb00:	5f                   	pop    edi
c001bb01:	5d                   	pop    ebp
c001bb02:	c3                   	ret    
c001bb03:	90                   	nop

c001bb04 <IDE::read(unsigned char, unsigned char)>:
c001bb04:	55                   	push   ebp
c001bb05:	57                   	push   edi
c001bb06:	56                   	push   esi
c001bb07:	53                   	push   ebx
c001bb08:	83 ec 1c             	sub    esp,0x1c
c001bb0b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bb0f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb13:	8d 43 f8             	lea    eax,[ebx-0x8]
c001bb16:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bb1a:	3c 03                	cmp    al,0x3
c001bb1c:	77 43                	ja     c001bb61 <IDE::read(unsigned char, unsigned char)+0x5d>
c001bb1e:	0f b6 f2             	movzx  esi,dl
c001bb21:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bb24:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001bb28:	83 c8 80             	or     eax,0xffffff80
c001bb2b:	0f b6 c0             	movzx  eax,al
c001bb2e:	50                   	push   eax
c001bb2f:	6a 0c                	push   0xc
c001bb31:	56                   	push   esi
c001bb32:	57                   	push   edi
c001bb33:	e8 0c ff ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb38:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001bb3d:	0f b6 c3             	movzx  eax,bl
c001bb40:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001bb44:	ec                   	in     al,dx
c001bb45:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bb49:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001bb4e:	52                   	push   edx
c001bb4f:	6a 0c                	push   0xc
c001bb51:	56                   	push   esi
c001bb52:	57                   	push   edi
c001bb53:	e8 ec fe ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb58:	83 c4 20             	add    esp,0x20
c001bb5b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bb5f:	eb 49                	jmp    c001bbaa <IDE::read(unsigned char, unsigned char)+0xa6>
c001bb61:	80 fb 07             	cmp    bl,0x7
c001bb64:	77 12                	ja     c001bb78 <IDE::read(unsigned char, unsigned char)+0x74>
c001bb66:	0f b6 d2             	movzx  edx,dl
c001bb69:	0f b6 c3             	movzx  eax,bl
c001bb6c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001bb74:	89 c2                	mov    edx,eax
c001bb76:	eb 31                	jmp    c001bba9 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bb78:	80 fb 0d             	cmp    bl,0xd
c001bb7b:	77 13                	ja     c001bb90 <IDE::read(unsigned char, unsigned char)+0x8c>
c001bb7d:	0f b6 d2             	movzx  edx,dl
c001bb80:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001bb87:	0f b6 d3             	movzx  edx,bl
c001bb8a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bb8e:	eb 19                	jmp    c001bba9 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bb90:	31 c0                	xor    eax,eax
c001bb92:	80 fb 15             	cmp    bl,0x15
c001bb95:	77 13                	ja     c001bbaa <IDE::read(unsigned char, unsigned char)+0xa6>
c001bb97:	0f b6 d2             	movzx  edx,dl
c001bb9a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001bba2:	0f b6 d3             	movzx  edx,bl
c001bba5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bba9:	ec                   	in     al,dx
c001bbaa:	83 c4 1c             	add    esp,0x1c
c001bbad:	5b                   	pop    ebx
c001bbae:	5e                   	pop    esi
c001bbaf:	5f                   	pop    edi
c001bbb0:	5d                   	pop    ebp
c001bbb1:	c3                   	ret    

c001bbb2 <IDE::waitInterrupt(unsigned char)>:
c001bbb2:	55                   	push   ebp
c001bbb3:	57                   	push   edi
c001bbb4:	56                   	push   esi
c001bbb5:	53                   	push   ebx
c001bbb6:	31 db                	xor    ebx,ebx
c001bbb8:	83 ec 0c             	sub    esp,0xc
c001bbbb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bbbf:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bbc4:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bbcc:	89 e8                	mov    eax,ebp
c001bbce:	84 c0                	test   al,al
c001bbd0:	75 34                	jne    c001bc06 <IDE::waitInterrupt(unsigned char)+0x54>
c001bbd2:	52                   	push   edx
c001bbd3:	6a 0c                	push   0xc
c001bbd5:	56                   	push   esi
c001bbd6:	57                   	push   edi
c001bbd7:	e8 28 ff ff ff       	call   c001bb04 <IDE::read(unsigned char, unsigned char)>
c001bbdc:	83 c4 10             	add    esp,0x10
c001bbdf:	a8 01                	test   al,0x1
c001bbe1:	75 2b                	jne    c001bc0e <IDE::waitInterrupt(unsigned char)+0x5c>
c001bbe3:	f6 c3 04             	test   bl,0x4
c001bbe6:	75 16                	jne    c001bbfe <IDE::waitInterrupt(unsigned char)+0x4c>
c001bbe8:	83 fb 32             	cmp    ebx,0x32
c001bbeb:	7e 11                	jle    c001bbfe <IDE::waitInterrupt(unsigned char)+0x4c>
c001bbed:	50                   	push   eax
c001bbee:	50                   	push   eax
c001bbef:	6a 00                	push   0x0
c001bbf1:	68 80 96 98 00       	push   0x989680
c001bbf6:	e8 f2 c4 ff ff       	call   c00180ed <nanoSleep(unsigned long long)>
c001bbfb:	83 c4 10             	add    esp,0x10
c001bbfe:	83 fb 3c             	cmp    ebx,0x3c
c001bc01:	74 0b                	je     c001bc0e <IDE::waitInterrupt(unsigned char)+0x5c>
c001bc03:	43                   	inc    ebx
c001bc04:	eb be                	jmp    c001bbc4 <IDE::waitInterrupt(unsigned char)+0x12>
c001bc06:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bc0e:	83 c4 0c             	add    esp,0xc
c001bc11:	89 e8                	mov    eax,ebp
c001bc13:	5b                   	pop    ebx
c001bc14:	5e                   	pop    esi
c001bc15:	5f                   	pop    edi
c001bc16:	5d                   	pop    ebp
c001bc17:	c3                   	ret    

c001bc18 <ideChannel0IRQHandler(regs*, void*)>:
c001bc18:	83 ec 10             	sub    esp,0x10
c001bc1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc1f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bc26:	6a 07                	push   0x7
c001bc28:	6a 00                	push   0x0
c001bc2a:	50                   	push   eax
c001bc2b:	e8 d4 fe ff ff       	call   c001bb04 <IDE::read(unsigned char, unsigned char)>
c001bc30:	83 c4 1c             	add    esp,0x1c
c001bc33:	c3                   	ret    

c001bc34 <ideChannel1IRQHandler(regs*, void*)>:
c001bc34:	83 ec 10             	sub    esp,0x10
c001bc37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc3b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bc42:	6a 07                	push   0x7
c001bc44:	6a 01                	push   0x1
c001bc46:	50                   	push   eax
c001bc47:	e8 b8 fe ff ff       	call   c001bb04 <IDE::read(unsigned char, unsigned char)>
c001bc4c:	83 c4 1c             	add    esp,0x1c
c001bc4f:	c3                   	ret    

c001bc50 <IDE::enableIRQs(unsigned char, bool)>:
c001bc50:	57                   	push   edi
c001bc51:	56                   	push   esi
c001bc52:	be 04 00 00 00       	mov    esi,0x4
c001bc57:	53                   	push   ebx
c001bc58:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bc5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc61:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001bc66:	0f 94 c0             	sete   al
c001bc69:	d1 e0                	shl    eax,1
c001bc6b:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001bc72:	0f b6 c0             	movzx  eax,al
c001bc75:	50                   	push   eax
c001bc76:	6a 0c                	push   0xc
c001bc78:	57                   	push   edi
c001bc79:	53                   	push   ebx
c001bc7a:	e8 c5 fd ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc7f:	83 c4 10             	add    esp,0x10
c001bc82:	50                   	push   eax
c001bc83:	6a 0c                	push   0xc
c001bc85:	57                   	push   edi
c001bc86:	53                   	push   ebx
c001bc87:	e8 78 fe ff ff       	call   c001bb04 <IDE::read(unsigned char, unsigned char)>
c001bc8c:	83 c4 10             	add    esp,0x10
c001bc8f:	4e                   	dec    esi
c001bc90:	75 f0                	jne    c001bc82 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001bc92:	5b                   	pop    ebx
c001bc93:	5e                   	pop    esi
c001bc94:	5f                   	pop    edi
c001bc95:	c3                   	ret    

c001bc96 <IDE::open(int, int, void*)>:
c001bc96:	55                   	push   ebp
c001bc97:	57                   	push   edi
c001bc98:	56                   	push   esi
c001bc99:	53                   	push   ebx
c001bc9a:	83 ec 1c             	sub    esp,0x1c
c001bc9d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bca1:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bcaa:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bcb3:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bcba:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bcc1:	0f 85 b0 02 00 00    	jne    c001bf77 <IDE::open(int, int, void*)+0x2e1>
c001bcc7:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bccd:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001bcd1:	83 e0 7f             	and    eax,0x7f
c001bcd4:	3c 05                	cmp    al,0x5
c001bcd6:	74 04                	je     c001bcdc <IDE::open(int, int, void*)+0x46>
c001bcd8:	3c 0f                	cmp    al,0xf
c001bcda:	75 32                	jne    c001bd0e <IDE::open(int, int, void*)+0x78>
c001bcdc:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bce2:	83 e0 fc             	and    eax,0xfffffffc
c001bce5:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bcec:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bcf2:	83 e0 fc             	and    eax,0xfffffffc
c001bcf5:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bcfc:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bd02:	83 e0 fc             	and    eax,0xfffffffc
c001bd05:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bd0c:	eb 14                	jmp    c001bd22 <IDE::open(int, int, void*)+0x8c>
c001bd0e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bd18:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bd22:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001bd29:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bd30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bd34:	89 c6                	mov    esi,eax
c001bd36:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bd3b:	c1 e6 10             	shl    esi,0x10
c001bd3e:	89 e8                	mov    eax,ebp
c001bd40:	89 fa                	mov    edx,edi
c001bd42:	c1 e0 0b             	shl    eax,0xb
c001bd45:	09 f0                	or     eax,esi
c001bd47:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001bd4e:	c1 e6 08             	shl    esi,0x8
c001bd51:	09 c6                	or     esi,eax
c001bd53:	89 f0                	mov    eax,esi
c001bd55:	0d 08 00 00 80       	or     eax,0x80000008
c001bd5a:	ef                   	out    dx,eax
c001bd5b:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001bd60:	89 ca                	mov    edx,ecx
c001bd62:	ed                   	in     eax,dx
c001bd63:	c1 e8 10             	shr    eax,0x10
c001bd66:	3d ff ff 00 00       	cmp    eax,0xffff
c001bd6b:	0f 84 f5 00 00 00    	je     c001be66 <IDE::open(int, int, void*)+0x1d0>
c001bd71:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001bd77:	89 fa                	mov    edx,edi
c001bd79:	89 f0                	mov    eax,esi
c001bd7b:	ef                   	out    dx,eax
c001bd7c:	b0 fe                	mov    al,0xfe
c001bd7e:	89 ca                	mov    edx,ecx
c001bd80:	ee                   	out    dx,al
c001bd81:	89 f0                	mov    eax,esi
c001bd83:	89 fa                	mov    edx,edi
c001bd85:	ef                   	out    dx,eax
c001bd86:	89 ca                	mov    edx,ecx
c001bd88:	ed                   	in     eax,dx
c001bd89:	3c fe                	cmp    al,0xfe
c001bd8b:	0f 85 a9 00 00 00    	jne    c001be3a <IDE::open(int, int, void*)+0x1a4>
c001bd91:	8b 15 08 35 02 c0    	mov    edx,DWORD PTR ds:0xc0023508
c001bd97:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001bd9e:	74 33                	je     c001bdd3 <IDE::open(int, int, void*)+0x13d>
c001bda0:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bda6:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bdaa:	40                   	inc    eax
c001bdab:	83 ec 0c             	sub    esp,0xc
c001bdae:	0f b6 c0             	movzx  eax,al
c001bdb1:	50                   	push   eax
c001bdb2:	55                   	push   ebp
c001bdb3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bdb7:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001bdbd:	51                   	push   ecx
c001bdbe:	e8 71 76 ff ff       	call   c0013434 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bdc3:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bdc8:	83 c4 1c             	add    esp,0x1c
c001bdcb:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bdd1:	eb 0a                	jmp    c001bddd <IDE::open(int, int, void*)+0x147>
c001bdd3:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bddd:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bde4:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bdeb:	c1 e1 10             	shl    ecx,0x10
c001bdee:	c1 e0 08             	shl    eax,0x8
c001bdf1:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bdf6:	09 c1                	or     ecx,eax
c001bdf8:	89 fa                	mov    edx,edi
c001bdfa:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001be01:	c1 e0 0b             	shl    eax,0xb
c001be04:	09 c1                	or     ecx,eax
c001be06:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001be0c:	89 c8                	mov    eax,ecx
c001be0e:	ef                   	out    dx,eax
c001be0f:	be fc 0c 00 00       	mov    esi,0xcfc
c001be14:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001be1a:	89 f2                	mov    edx,esi
c001be1c:	ee                   	out    dx,al
c001be1d:	89 c8                	mov    eax,ecx
c001be1f:	89 fa                	mov    edx,edi
c001be21:	ef                   	out    dx,eax
c001be22:	89 f2                	mov    edx,esi
c001be24:	ed                   	in     eax,dx
c001be25:	0f b6 c0             	movzx  eax,al
c001be28:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001be2e:	74 46                	je     c001be76 <IDE::open(int, int, void*)+0x1e0>
c001be30:	83 ec 0c             	sub    esp,0xc
c001be33:	68 dc 22 02 c0       	push   0xc00222dc
c001be38:	eb 34                	jmp    c001be6e <IDE::open(int, int, void*)+0x1d8>
c001be3a:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001be43:	75 17                	jne    c001be5c <IDE::open(int, int, void*)+0x1c6>
c001be45:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001be4a:	74 07                	je     c001be53 <IDE::open(int, int, void*)+0x1bd>
c001be4c:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001be51:	75 09                	jne    c001be5c <IDE::open(int, int, void*)+0x1c6>
c001be53:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001be5a:	eb 1a                	jmp    c001be76 <IDE::open(int, int, void*)+0x1e0>
c001be5c:	83 ec 0c             	sub    esp,0xc
c001be5f:	68 e4 22 02 c0       	push   0xc00222e4
c001be64:	eb 08                	jmp    c001be6e <IDE::open(int, int, void*)+0x1d8>
c001be66:	83 ec 0c             	sub    esp,0xc
c001be69:	68 15 23 02 c0       	push   0xc0022315
c001be6e:	e8 01 8d ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c001be73:	83 c4 10             	add    esp,0x10
c001be76:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001be7d:	79 1a                	jns    c001be99 <IDE::open(int, int, void*)+0x203>
c001be7f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001be85:	83 e0 fc             	and    eax,0xfffffffc
c001be88:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001be8f:	83 c0 08             	add    eax,0x8
c001be92:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001be99:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001be9f:	89 c2                	mov    edx,eax
c001bea1:	83 e2 0f             	and    edx,0xf
c001bea4:	66 83 fa 08          	cmp    dx,0x8
c001bea8:	75 0a                	jne    c001beb4 <IDE::open(int, int, void*)+0x21e>
c001beaa:	83 e8 02             	sub    eax,0x2
c001bead:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001beb4:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001beba:	89 c2                	mov    edx,eax
c001bebc:	83 e2 0f             	and    edx,0xf
c001bebf:	66 83 fa 08          	cmp    dx,0x8
c001bec3:	75 0a                	jne    c001becf <IDE::open(int, int, void*)+0x239>
c001bec5:	83 e8 02             	sub    eax,0x2
c001bec8:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001becf:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bed6:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bedd:	89 d0                	mov    eax,edx
c001bedf:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bee2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bee6:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001beea:	8d 4a 01             	lea    ecx,[edx+0x1]
c001beed:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bef2:	0f b6 c9             	movzx  ecx,cl
c001bef5:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001befc:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001beff:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bf03:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bf07:	8d 50 02             	lea    edx,[eax+0x2]
c001bf0a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001bf0f:	0f b6 d2             	movzx  edx,dl
c001bf12:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bf18:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bf1b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bf1f:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bf23:	8d 48 03             	lea    ecx,[eax+0x3]
c001bf26:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bf2b:	0f b6 c9             	movzx  ecx,cl
c001bf2e:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bf34:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bf37:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bf3b:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bf3f:	8d 50 04             	lea    edx,[eax+0x4]
c001bf42:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bf48:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001bf4d:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bf54:	66 85 f6             	test   si,si
c001bf57:	74 3e                	je     c001bf97 <IDE::open(int, int, void*)+0x301>
c001bf59:	0f b6 d2             	movzx  edx,dl
c001bf5c:	83 c0 05             	add    eax,0x5
c001bf5f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bf62:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bf66:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bf6a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bf70:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bf75:	eb 20                	jmp    c001bf97 <IDE::open(int, int, void*)+0x301>
c001bf77:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bf81:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bf8b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bf92:	e9 02 ff ff ff       	jmp    c001be99 <IDE::open(int, int, void*)+0x203>
c001bf97:	52                   	push   edx
c001bf98:	52                   	push   edx
c001bf99:	6a 00                	push   0x0
c001bf9b:	53                   	push   ebx
c001bf9c:	e8 7d fa ff ff       	call   c001ba1e <IDE::prepareInterrupt(unsigned char)>
c001bfa1:	59                   	pop    ecx
c001bfa2:	5e                   	pop    esi
c001bfa3:	6a 01                	push   0x1
c001bfa5:	53                   	push   ebx
c001bfa6:	e8 73 fa ff ff       	call   c001ba1e <IDE::prepareInterrupt(unsigned char)>
c001bfab:	83 c4 0c             	add    esp,0xc
c001bfae:	6a 00                	push   0x0
c001bfb0:	6a 00                	push   0x0
c001bfb2:	53                   	push   ebx
c001bfb3:	e8 98 fc ff ff       	call   c001bc50 <IDE::enableIRQs(unsigned char, bool)>
c001bfb8:	83 c4 0c             	add    esp,0xc
c001bfbb:	6a 00                	push   0x0
c001bfbd:	6a 01                	push   0x1
c001bfbf:	53                   	push   ebx
c001bfc0:	e8 8b fc ff ff       	call   c001bc50 <IDE::enableIRQs(unsigned char, bool)>
c001bfc5:	83 c4 10             	add    esp,0x10
c001bfc8:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bfcf:	74 40                	je     c001c011 <IDE::open(int, int, void*)+0x37b>
c001bfd1:	83 ec 0c             	sub    esp,0xc
c001bfd4:	68 3f 23 02 c0       	push   0xc002233f
c001bfd9:	e8 01 2f ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001bfde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bfe1:	6a 01                	push   0x1
c001bfe3:	68 18 bc 01 c0       	push   0xc001bc18
c001bfe8:	6a 0e                	push   0xe
c001bfea:	53                   	push   ebx
c001bfeb:	e8 4e 42 ff ff       	call   c001023e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bff0:	83 c4 14             	add    esp,0x14
c001bff3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bff9:	53                   	push   ebx
c001bffa:	6a 01                	push   0x1
c001bffc:	68 34 bc 01 c0       	push   0xc001bc34
c001c001:	6a 0f                	push   0xf
c001c003:	53                   	push   ebx
c001c004:	e8 35 42 ff ff       	call   c001023e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c009:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c00f:	eb 4a                	jmp    c001c05b <IDE::open(int, int, void*)+0x3c5>
c001c011:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c01b:	50                   	push   eax
c001c01c:	6a 0f                	push   0xf
c001c01e:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c024:	68 5b 23 02 c0       	push   0xc002235b
c001c029:	e8 b1 2e ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001c02e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c031:	6a 00                	push   0x0
c001c033:	68 18 bc 01 c0       	push   0xc001bc18
c001c038:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c03e:	53                   	push   ebx
c001c03f:	e8 fa 41 ff ff       	call   c001023e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c044:	83 c4 14             	add    esp,0x14
c001c047:	53                   	push   ebx
c001c048:	6a 00                	push   0x0
c001c04a:	68 34 bc 01 c0       	push   0xc001bc34
c001c04f:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c055:	53                   	push   ebx
c001c056:	e8 e3 41 ff ff       	call   c001023e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c05b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c05d:	83 c4 20             	add    esp,0x20
c001c060:	83 ec 0c             	sub    esp,0xc
c001c063:	53                   	push   ebx
c001c064:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c067:	83 c4 0c             	add    esp,0xc
c001c06a:	6a 07                	push   0x7
c001c06c:	6a 00                	push   0x0
c001c06e:	53                   	push   ebx
c001c06f:	e8 90 fa ff ff       	call   c001bb04 <IDE::read(unsigned char, unsigned char)>
c001c074:	83 c4 0c             	add    esp,0xc
c001c077:	6a 07                	push   0x7
c001c079:	6a 01                	push   0x1
c001c07b:	53                   	push   ebx
c001c07c:	e8 83 fa ff ff       	call   c001bb04 <IDE::read(unsigned char, unsigned char)>
c001c081:	83 c4 0c             	add    esp,0xc
c001c084:	6a 01                	push   0x1
c001c086:	6a 00                	push   0x0
c001c088:	53                   	push   ebx
c001c089:	e8 c2 fb ff ff       	call   c001bc50 <IDE::enableIRQs(unsigned char, bool)>
c001c08e:	83 c4 0c             	add    esp,0xc
c001c091:	6a 01                	push   0x1
c001c093:	6a 01                	push   0x1
c001c095:	53                   	push   ebx
c001c096:	e8 b5 fb ff ff       	call   c001bc50 <IDE::enableIRQs(unsigned char, bool)>
c001c09b:	83 c4 2c             	add    esp,0x2c
c001c09e:	31 c0                	xor    eax,eax
c001c0a0:	5b                   	pop    ebx
c001c0a1:	5e                   	pop    esi
c001c0a2:	5f                   	pop    edi
c001c0a3:	5d                   	pop    ebp
c001c0a4:	c3                   	ret    
c001c0a5:	90                   	nop

c001c0a6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c0a6:	55                   	push   ebp
c001c0a7:	57                   	push   edi
c001c0a8:	56                   	push   esi
c001c0a9:	53                   	push   ebx
c001c0aa:	83 ec 1c             	sub    esp,0x1c
c001c0ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c0b1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c0b5:	8d 50 f8             	lea    edx,[eax-0x8]
c001c0b8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c0bc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c0c0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c0c4:	80 fa 03             	cmp    dl,0x3
c001c0c7:	77 5d                	ja     c001c126 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001c0c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c0cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c0d1:	0f b6 db             	movzx  ebx,bl
c001c0d4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c0d7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001c0db:	83 ca 80             	or     edx,0xffffff80
c001c0de:	0f b6 d2             	movzx  edx,dl
c001c0e1:	52                   	push   edx
c001c0e2:	6a 0c                	push   0xc
c001c0e4:	53                   	push   ebx
c001c0e5:	56                   	push   esi
c001c0e6:	e8 59 f9 ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0eb:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001c0f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c0f4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c0f8:	0f b6 c0             	movzx  eax,al
c001c0fb:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001c0ff:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c101:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c106:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c10a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c10e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c112:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c11a:	83 c4 2c             	add    esp,0x2c
c001c11d:	5b                   	pop    ebx
c001c11e:	5e                   	pop    esi
c001c11f:	5f                   	pop    edi
c001c120:	5d                   	pop    ebp
c001c121:	e9 1e f9 ff ff       	jmp    c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c126:	3c 07                	cmp    al,0x7
c001c128:	77 10                	ja     c001c13a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001c12a:	0f b6 db             	movzx  ebx,bl
c001c12d:	0f b6 d0             	movzx  edx,al
c001c130:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001c138:	eb 2d                	jmp    c001c167 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c13a:	3c 0d                	cmp    al,0xd
c001c13c:	77 13                	ja     c001c151 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001c13e:	0f b6 db             	movzx  ebx,bl
c001c141:	0f b6 c0             	movzx  eax,al
c001c144:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001c14b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001c14f:	eb 16                	jmp    c001c167 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c151:	3c 15                	cmp    al,0x15
c001c153:	77 14                	ja     c001c169 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001c155:	0f b6 db             	movzx  ebx,bl
c001c158:	0f b6 c0             	movzx  eax,al
c001c15b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001c163:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001c167:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c169:	83 c4 1c             	add    esp,0x1c
c001c16c:	5b                   	pop    ebx
c001c16d:	5e                   	pop    esi
c001c16e:	5f                   	pop    edi
c001c16f:	5d                   	pop    ebp
c001c170:	c3                   	ret    
c001c171:	90                   	nop

c001c172 <IDE::detect()>:
c001c172:	55                   	push   ebp
c001c173:	57                   	push   edi
c001c174:	56                   	push   esi
c001c175:	53                   	push   ebx
c001c176:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c17c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c183:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c18a:	0f 85 be 02 00 00    	jne    c001c44e <IDE::detect()+0x2dc>
c001c190:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c197:	31 f6                	xor    esi,esi
c001c199:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c1a1:	31 ed                	xor    ebp,ebp
c001c1a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1a7:	c1 e0 06             	shl    eax,0x6
c001c1aa:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c1b2:	89 e8                	mov    eax,ebp
c001c1b4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c1b8:	c1 e0 04             	shl    eax,0x4
c001c1bb:	83 c8 a0             	or     eax,0xffffffa0
c001c1be:	0f b6 c0             	movzx  eax,al
c001c1c1:	50                   	push   eax
c001c1c2:	6a 06                	push   0x6
c001c1c4:	56                   	push   esi
c001c1c5:	53                   	push   ebx
c001c1c6:	e8 79 f8 ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1cb:	83 c4 0c             	add    esp,0xc
c001c1ce:	6a 0c                	push   0xc
c001c1d0:	56                   	push   esi
c001c1d1:	53                   	push   ebx
c001c1d2:	e8 2d f9 ff ff       	call   c001bb04 <IDE::read(unsigned char, unsigned char)>
c001c1d7:	83 c4 0c             	add    esp,0xc
c001c1da:	6a 0c                	push   0xc
c001c1dc:	56                   	push   esi
c001c1dd:	53                   	push   ebx
c001c1de:	e8 21 f9 ff ff       	call   c001bb04 <IDE::read(unsigned char, unsigned char)>
c001c1e3:	83 c4 0c             	add    esp,0xc
c001c1e6:	6a 0c                	push   0xc
c001c1e8:	56                   	push   esi
c001c1e9:	53                   	push   ebx
c001c1ea:	e8 15 f9 ff ff       	call   c001bb04 <IDE::read(unsigned char, unsigned char)>
c001c1ef:	83 c4 0c             	add    esp,0xc
c001c1f2:	6a 0c                	push   0xc
c001c1f4:	56                   	push   esi
c001c1f5:	53                   	push   ebx
c001c1f6:	e8 09 f9 ff ff       	call   c001bb04 <IDE::read(unsigned char, unsigned char)>
c001c1fb:	68 ec 00 00 00       	push   0xec
c001c200:	6a 07                	push   0x7
c001c202:	56                   	push   esi
c001c203:	53                   	push   ebx
c001c204:	e8 3b f8 ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c209:	83 c4 1c             	add    esp,0x1c
c001c20c:	6a 0c                	push   0xc
c001c20e:	56                   	push   esi
c001c20f:	53                   	push   ebx
c001c210:	e8 ef f8 ff ff       	call   c001bb04 <IDE::read(unsigned char, unsigned char)>
c001c215:	83 c4 0c             	add    esp,0xc
c001c218:	6a 0c                	push   0xc
c001c21a:	56                   	push   esi
c001c21b:	53                   	push   ebx
c001c21c:	e8 e3 f8 ff ff       	call   c001bb04 <IDE::read(unsigned char, unsigned char)>
c001c221:	83 c4 0c             	add    esp,0xc
c001c224:	6a 0c                	push   0xc
c001c226:	56                   	push   esi
c001c227:	53                   	push   ebx
c001c228:	e8 d7 f8 ff ff       	call   c001bb04 <IDE::read(unsigned char, unsigned char)>
c001c22d:	83 c4 0c             	add    esp,0xc
c001c230:	6a 0c                	push   0xc
c001c232:	56                   	push   esi
c001c233:	53                   	push   ebx
c001c234:	e8 cb f8 ff ff       	call   c001bb04 <IDE::read(unsigned char, unsigned char)>
c001c239:	83 c4 0c             	add    esp,0xc
c001c23c:	6a 0c                	push   0xc
c001c23e:	56                   	push   esi
c001c23f:	53                   	push   ebx
c001c240:	e8 bf f8 ff ff       	call   c001bb04 <IDE::read(unsigned char, unsigned char)>
c001c245:	83 c4 10             	add    esp,0x10
c001c248:	84 c0                	test   al,al
c001c24a:	0f 84 8b 01 00 00    	je     c001c3db <IDE::detect()+0x269>
c001c250:	31 ff                	xor    edi,edi
c001c252:	50                   	push   eax
c001c253:	6a 0c                	push   0xc
c001c255:	56                   	push   esi
c001c256:	53                   	push   ebx
c001c257:	e8 a8 f8 ff ff       	call   c001bb04 <IDE::read(unsigned char, unsigned char)>
c001c25c:	83 c4 10             	add    esp,0x10
c001c25f:	a8 01                	test   al,0x1
c001c261:	0f 85 8e 01 00 00    	jne    c001c3f5 <IDE::detect()+0x283>
c001c267:	84 c0                	test   al,al
c001c269:	78 04                	js     c001c26f <IDE::detect()+0xfd>
c001c26b:	a8 08                	test   al,0x8
c001c26d:	75 27                	jne    c001c296 <IDE::detect()+0x124>
c001c26f:	47                   	inc    edi
c001c270:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c276:	7e da                	jle    c001c252 <IDE::detect()+0xe0>
c001c278:	50                   	push   eax
c001c279:	50                   	push   eax
c001c27a:	6a 00                	push   0x0
c001c27c:	68 40 4b 4c 00       	push   0x4c4b40
c001c281:	e8 67 be ff ff       	call   c00180ed <nanoSleep(unsigned long long)>
c001c286:	83 c4 10             	add    esp,0x10
c001c289:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c28f:	75 c1                	jne    c001c252 <IDE::detect()+0xe0>
c001c291:	e9 5f 01 00 00       	jmp    c001c3f5 <IDE::detect()+0x283>
c001c296:	31 c9                	xor    ecx,ecx
c001c298:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c29c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c2a0:	83 ec 0c             	sub    esp,0xc
c001c2a3:	68 80 00 00 00       	push   0x80
c001c2a8:	57                   	push   edi
c001c2a9:	6a 00                	push   0x0
c001c2ab:	56                   	push   esi
c001c2ac:	53                   	push   ebx
c001c2ad:	e8 f4 fd ff ff       	call   c001c0a6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c2b2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c2b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c2bb:	89 d1                	mov    ecx,edx
c001c2bd:	c1 e0 06             	shl    eax,0x6
c001c2c0:	01 d8                	add    eax,ebx
c001c2c2:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c2c9:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c2d0:	89 f2                	mov    edx,esi
c001c2d2:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c2d8:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c2dc:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c2e2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c2e6:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c2ed:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c2f5:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c2fc:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c304:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c30a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c311:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c317:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c31b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c31f:	83 c4 20             	add    esp,0x20
c001c322:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c325:	83 c0 02             	add    eax,0x2
c001c328:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c32e:	83 c7 02             	add    edi,0x2
c001c331:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c334:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c33a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c33e:	75 e2                	jne    c001c322 <IDE::detect()+0x1b0>
c001c340:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c344:	c1 e0 06             	shl    eax,0x6
c001c347:	01 d8                	add    eax,ebx
c001c349:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001c34f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c356:	66 c1 ea 09          	shr    dx,0x9
c001c35a:	83 e2 01             	and    edx,0x1
c001c35d:	84 c9                	test   cl,cl
c001c35f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c365:	75 2f                	jne    c001c396 <IDE::detect()+0x224>
c001c367:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001c36d:	85 c0                	test   eax,eax
c001c36f:	74 66                	je     c001c3d7 <IDE::detect()+0x265>
c001c371:	50                   	push   eax
c001c372:	55                   	push   ebp
c001c373:	56                   	push   esi
c001c374:	68 77 23 02 c0       	push   0xc0022377
c001c379:	e8 61 2b ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001c37e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c385:	e8 66 2a ff ff       	call   c000edf0 <operator new(unsigned long)>
c001c38a:	89 c7                	mov    edi,eax
c001c38c:	89 04 24             	mov    DWORD PTR [esp],eax
c001c38f:	e8 e8 02 00 00       	call   c001c67c <ATA::ATA()>
c001c394:	eb 28                	jmp    c001c3be <IDE::detect()+0x24c>
c001c396:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001c39c:	55                   	push   ebp
c001c39d:	56                   	push   esi
c001c39e:	68 a6 23 02 c0       	push   0xc00223a6
c001c3a3:	e8 37 2b ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001c3a8:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001c3af:	e8 3c 2a ff ff       	call   c000edf0 <operator new(unsigned long)>
c001c3b4:	89 c7                	mov    edi,eax
c001c3b6:	89 04 24             	mov    DWORD PTR [esp],eax
c001c3b9:	e8 ee 08 00 00       	call   c001ccac <ATAPI::ATAPI()>
c001c3be:	5a                   	pop    edx
c001c3bf:	59                   	pop    ecx
c001c3c0:	57                   	push   edi
c001c3c1:	53                   	push   ebx
c001c3c2:	e8 23 3f ff ff       	call   c00102ea <Device::addChild(Device*)>
c001c3c7:	8b 07                	mov    eax,DWORD PTR [edi]
c001c3c9:	53                   	push   ebx
c001c3ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c3ce:	6a 00                	push   0x0
c001c3d0:	57                   	push   edi
c001c3d1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c3d4:	83 c4 20             	add    esp,0x20
c001c3d7:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001c3db:	4d                   	dec    ebp
c001c3dc:	74 0a                	je     c001c3e8 <IDE::detect()+0x276>
c001c3de:	bd 01 00 00 00       	mov    ebp,0x1
c001c3e3:	e9 bb fd ff ff       	jmp    c001c1a3 <IDE::detect()+0x31>
c001c3e8:	4e                   	dec    esi
c001c3e9:	74 63                	je     c001c44e <IDE::detect()+0x2dc>
c001c3eb:	be 01 00 00 00       	mov    esi,0x1
c001c3f0:	e9 ac fd ff ff       	jmp    c001c1a1 <IDE::detect()+0x2f>
c001c3f5:	50                   	push   eax
c001c3f6:	6a 04                	push   0x4
c001c3f8:	56                   	push   esi
c001c3f9:	53                   	push   ebx
c001c3fa:	e8 05 f7 ff ff       	call   c001bb04 <IDE::read(unsigned char, unsigned char)>
c001c3ff:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c403:	83 c4 0c             	add    esp,0xc
c001c406:	6a 05                	push   0x5
c001c408:	56                   	push   esi
c001c409:	53                   	push   ebx
c001c40a:	e8 f5 f6 ff ff       	call   c001bb04 <IDE::read(unsigned char, unsigned char)>
c001c40f:	83 c4 10             	add    esp,0x10
c001c412:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001c416:	80 fa 14             	cmp    dl,0x14
c001c419:	75 04                	jne    c001c41f <IDE::detect()+0x2ad>
c001c41b:	3c eb                	cmp    al,0xeb
c001c41d:	eb 07                	jmp    c001c426 <IDE::detect()+0x2b4>
c001c41f:	3c 96                	cmp    al,0x96
c001c421:	75 b8                	jne    c001c3db <IDE::detect()+0x269>
c001c423:	80 fa 69             	cmp    dl,0x69
c001c426:	75 b3                	jne    c001c3db <IDE::detect()+0x269>
c001c428:	68 a1 00 00 00       	push   0xa1
c001c42d:	6a 07                	push   0x7
c001c42f:	56                   	push   esi
c001c430:	53                   	push   ebx
c001c431:	e8 0e f6 ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c436:	5f                   	pop    edi
c001c437:	58                   	pop    eax
c001c438:	6a 00                	push   0x0
c001c43a:	68 40 42 0f 00       	push   0xf4240
c001c43f:	e8 a9 bc ff ff       	call   c00180ed <nanoSleep(unsigned long long)>
c001c444:	83 c4 10             	add    esp,0x10
c001c447:	b1 01                	mov    cl,0x1
c001c449:	e9 4a fe ff ff       	jmp    c001c298 <IDE::detect()+0x126>
c001c44e:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c454:	5b                   	pop    ebx
c001c455:	5e                   	pop    esi
c001c456:	5f                   	pop    edi
c001c457:	5d                   	pop    ebp
c001c458:	c3                   	ret    
c001c459:	90                   	nop

c001c45a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c45a:	55                   	push   ebp
c001c45b:	57                   	push   edi
c001c45c:	56                   	push   esi
c001c45d:	53                   	push   ebx
c001c45e:	83 ec 1c             	sub    esp,0x1c
c001c461:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c465:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c469:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c46d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001c471:	88 c3                	mov    bl,al
c001c473:	84 c0                	test   al,al
c001c475:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c479:	0f 84 67 01 00 00    	je     c001c5e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001c47f:	83 ec 0c             	sub    esp,0xc
c001c482:	68 d7 23 02 c0       	push   0xc00223d7
c001c487:	e8 53 2a ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001c48c:	83 c4 10             	add    esp,0x10
c001c48f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c493:	3c 01                	cmp    al,0x1
c001c495:	75 17                	jne    c001c4ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001c497:	83 ec 0c             	sub    esp,0xc
c001c49a:	b3 13                	mov    bl,0x13
c001c49c:	68 e3 23 02 c0       	push   0xc00223e3
c001c4a1:	e8 39 2a ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001c4a6:	83 c4 10             	add    esp,0x10
c001c4a9:	e9 25 01 00 00       	jmp    c001c5d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c4ae:	3c 02                	cmp    al,0x2
c001c4b0:	0f 85 ef 00 00 00    	jne    c001c5a5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001c4b6:	d1 e6                	shl    esi,1
c001c4b8:	09 ee                	or     esi,ebp
c001c4ba:	52                   	push   edx
c001c4bb:	89 f0                	mov    eax,esi
c001c4bd:	6a 01                	push   0x1
c001c4bf:	0f b6 f0             	movzx  esi,al
c001c4c2:	c1 e6 06             	shl    esi,0x6
c001c4c5:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001c4cd:	50                   	push   eax
c001c4ce:	57                   	push   edi
c001c4cf:	e8 30 f6 ff ff       	call   c001bb04 <IDE::read(unsigned char, unsigned char)>
c001c4d4:	83 c4 10             	add    esp,0x10
c001c4d7:	89 c6                	mov    esi,eax
c001c4d9:	a8 01                	test   al,0x1
c001c4db:	74 12                	je     c001c4ef <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001c4dd:	83 ec 0c             	sub    esp,0xc
c001c4e0:	b3 07                	mov    bl,0x7
c001c4e2:	68 f8 23 02 c0       	push   0xc00223f8
c001c4e7:	e8 f3 29 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001c4ec:	83 c4 10             	add    esp,0x10
c001c4ef:	f7 c6 02 00 00 00    	test   esi,0x2
c001c4f5:	74 12                	je     c001c509 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001c4f7:	83 ec 0c             	sub    esp,0xc
c001c4fa:	b3 03                	mov    bl,0x3
c001c4fc:	68 16 24 02 c0       	push   0xc0022416
c001c501:	e8 d9 29 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001c506:	83 c4 10             	add    esp,0x10
c001c509:	f7 c6 04 00 00 00    	test   esi,0x4
c001c50f:	74 12                	je     c001c523 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001c511:	83 ec 0c             	sub    esp,0xc
c001c514:	b3 14                	mov    bl,0x14
c001c516:	68 36 24 02 c0       	push   0xc0022436
c001c51b:	e8 bf 29 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001c520:	83 c4 10             	add    esp,0x10
c001c523:	f7 c6 08 00 00 00    	test   esi,0x8
c001c529:	74 12                	je     c001c53d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001c52b:	83 ec 0c             	sub    esp,0xc
c001c52e:	b3 03                	mov    bl,0x3
c001c530:	68 16 24 02 c0       	push   0xc0022416
c001c535:	e8 a5 29 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001c53a:	83 c4 10             	add    esp,0x10
c001c53d:	f7 c6 10 00 00 00    	test   esi,0x10
c001c543:	74 12                	je     c001c557 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001c545:	83 ec 0c             	sub    esp,0xc
c001c548:	b3 15                	mov    bl,0x15
c001c54a:	68 4e 24 02 c0       	push   0xc002244e
c001c54f:	e8 8b 29 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001c554:	83 c4 10             	add    esp,0x10
c001c557:	f7 c6 20 00 00 00    	test   esi,0x20
c001c55d:	74 12                	je     c001c571 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001c55f:	83 ec 0c             	sub    esp,0xc
c001c562:	b3 03                	mov    bl,0x3
c001c564:	68 16 24 02 c0       	push   0xc0022416
c001c569:	e8 71 29 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001c56e:	83 c4 10             	add    esp,0x10
c001c571:	f7 c6 40 00 00 00    	test   esi,0x40
c001c577:	74 12                	je     c001c58b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001c579:	83 ec 0c             	sub    esp,0xc
c001c57c:	b3 16                	mov    bl,0x16
c001c57e:	68 68 24 02 c0       	push   0xc0022468
c001c583:	e8 57 29 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001c588:	83 c4 10             	add    esp,0x10
c001c58b:	89 f0                	mov    eax,esi
c001c58d:	84 c0                	test   al,al
c001c58f:	79 42                	jns    c001c5d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c591:	83 ec 0c             	sub    esp,0xc
c001c594:	b3 0d                	mov    bl,0xd
c001c596:	68 89 24 02 c0       	push   0xc0022489
c001c59b:	e8 3f 29 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001c5a0:	83 c4 10             	add    esp,0x10
c001c5a3:	eb 2e                	jmp    c001c5d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c5a5:	3c 03                	cmp    al,0x3
c001c5a7:	75 14                	jne    c001c5bd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001c5a9:	83 ec 0c             	sub    esp,0xc
c001c5ac:	b3 17                	mov    bl,0x17
c001c5ae:	68 9d 24 02 c0       	push   0xc002249d
c001c5b3:	e8 27 29 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001c5b8:	83 c4 10             	add    esp,0x10
c001c5bb:	eb 16                	jmp    c001c5d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c5bd:	3c 04                	cmp    al,0x4
c001c5bf:	75 12                	jne    c001c5d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c5c1:	83 ec 0c             	sub    esp,0xc
c001c5c4:	b3 08                	mov    bl,0x8
c001c5c6:	68 b3 24 02 c0       	push   0xc00224b3
c001c5cb:	e8 0f 29 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001c5d0:	83 c4 10             	add    esp,0x10
c001c5d3:	50                   	push   eax
c001c5d4:	50                   	push   eax
c001c5d5:	0f b6 c3             	movzx  eax,bl
c001c5d8:	50                   	push   eax
c001c5d9:	68 cb 24 02 c0       	push   0xc00224cb
c001c5de:	e8 fc 28 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001c5e3:	83 c4 10             	add    esp,0x10
c001c5e6:	83 c4 1c             	add    esp,0x1c
c001c5e9:	88 d8                	mov    al,bl
c001c5eb:	5b                   	pop    ebx
c001c5ec:	5e                   	pop    esi
c001c5ed:	5f                   	pop    edi
c001c5ee:	5d                   	pop    ebp
c001c5ef:	c3                   	ret    

c001c5f0 <IDE::polling(unsigned char, unsigned int)>:
c001c5f0:	57                   	push   edi
c001c5f1:	56                   	push   esi
c001c5f2:	53                   	push   ebx
c001c5f3:	bb 04 00 00 00       	mov    ebx,0x4
c001c5f8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c5fc:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c601:	52                   	push   edx
c001c602:	6a 0c                	push   0xc
c001c604:	56                   	push   esi
c001c605:	57                   	push   edi
c001c606:	e8 f9 f4 ff ff       	call   c001bb04 <IDE::read(unsigned char, unsigned char)>
c001c60b:	83 c4 10             	add    esp,0x10
c001c60e:	4b                   	dec    ebx
c001c60f:	75 f0                	jne    c001c601 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c611:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c616:	50                   	push   eax
c001c617:	6a 0c                	push   0xc
c001c619:	56                   	push   esi
c001c61a:	57                   	push   edi
c001c61b:	e8 e4 f4 ff ff       	call   c001bb04 <IDE::read(unsigned char, unsigned char)>
c001c620:	83 c4 10             	add    esp,0x10
c001c623:	a8 01                	test   al,0x1
c001c625:	74 12                	je     c001c639 <IDE::polling(unsigned char, unsigned int)+0x49>
c001c627:	83 ec 0c             	sub    esp,0xc
c001c62a:	68 e5 24 02 c0       	push   0xc00224e5
c001c62f:	e8 ab 28 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001c634:	83 c4 10             	add    esp,0x10
c001c637:	eb 17                	jmp    c001c650 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c639:	a8 20                	test   al,0x20
c001c63b:	75 0f                	jne    c001c64c <IDE::polling(unsigned char, unsigned int)+0x5c>
c001c63d:	4b                   	dec    ebx
c001c63e:	74 10                	je     c001c650 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c640:	84 c0                	test   al,al
c001c642:	78 d2                	js     c001c616 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c644:	a8 08                	test   al,0x8
c001c646:	74 ce                	je     c001c616 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c648:	31 c0                	xor    eax,eax
c001c64a:	eb 06                	jmp    c001c652 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c64c:	b0 01                	mov    al,0x1
c001c64e:	eb 02                	jmp    c001c652 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c650:	b0 02                	mov    al,0x2
c001c652:	5b                   	pop    ebx
c001c653:	5e                   	pop    esi
c001c654:	5f                   	pop    edi
c001c655:	c3                   	ret    

c001c656 <ATA::close(int, int, void*)>:
c001c656:	83 ec 0c             	sub    esp,0xc
c001c659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c65d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c663:	85 c0                	test   eax,eax
c001c665:	74 0c                	je     c001c673 <ATA::close(int, int, void*)+0x1d>
c001c667:	83 ec 0c             	sub    esp,0xc
c001c66a:	8b 10                	mov    edx,DWORD PTR [eax]
c001c66c:	50                   	push   eax
c001c66d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c670:	83 c4 10             	add    esp,0x10
c001c673:	31 c0                	xor    eax,eax
c001c675:	83 c4 0c             	add    esp,0xc
c001c678:	c3                   	ret    
c001c679:	90                   	nop

c001c67a <ATA::powerSaving(PowerSavingLevel)>:
c001c67a:	c3                   	ret    
c001c67b:	90                   	nop

c001c67c <ATA::ATA()>:
c001c67c:	83 ec 0c             	sub    esp,0xc
c001c67f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c683:	83 ec 04             	sub    esp,0x4
c001c686:	68 00 02 00 00       	push   0x200
c001c68b:	68 28 25 02 c0       	push   0xc0022528
c001c690:	50                   	push   eax
c001c691:	e8 5a 40 ff ff       	call   c00106f0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c696:	83 c4 10             	add    esp,0x10
c001c699:	ba 54 25 02 c0       	mov    edx,0xc0022554
c001c69e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6a2:	89 10                	mov    DWORD PTR [eax],edx
c001c6a4:	90                   	nop
c001c6a5:	83 c4 0c             	add    esp,0xc
c001c6a8:	c3                   	ret    
c001c6a9:	90                   	nop

c001c6aa <ATA::flush(bool)>:
c001c6aa:	53                   	push   ebx
c001c6ab:	83 ec 08             	sub    esp,0x8
c001c6ae:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001c6b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c6b7:	19 c0                	sbb    eax,eax
c001c6b9:	83 e0 fd             	and    eax,0xfffffffd
c001c6bc:	05 ea 00 00 00       	add    eax,0xea
c001c6c1:	50                   	push   eax
c001c6c2:	6a 07                	push   0x7
c001c6c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c6cb:	50                   	push   eax
c001c6cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c6d2:	e8 6d f3 ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6d7:	83 c4 0c             	add    esp,0xc
c001c6da:	6a 00                	push   0x0
c001c6dc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c6e3:	50                   	push   eax
c001c6e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c6ea:	e8 01 ff ff ff       	call   c001c5f0 <IDE::polling(unsigned char, unsigned int)>
c001c6ef:	83 c4 18             	add    esp,0x18
c001c6f2:	5b                   	pop    ebx
c001c6f3:	c3                   	ret    

c001c6f4 <ATA::readyForCommand()>:
c001c6f4:	56                   	push   esi
c001c6f5:	53                   	push   ebx
c001c6f6:	31 db                	xor    ebx,ebx
c001c6f8:	50                   	push   eax
c001c6f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c6fd:	50                   	push   eax
c001c6fe:	6a 0c                	push   0xc
c001c700:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c707:	50                   	push   eax
c001c708:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c70e:	e8 f1 f3 ff ff       	call   c001bb04 <IDE::read(unsigned char, unsigned char)>
c001c713:	83 c4 10             	add    esp,0x10
c001c716:	a8 88                	test   al,0x88
c001c718:	74 23                	je     c001c73d <ATA::readyForCommand()+0x49>
c001c71a:	43                   	inc    ebx
c001c71b:	83 fb 63             	cmp    ebx,0x63
c001c71e:	7e dd                	jle    c001c6fd <ATA::readyForCommand()+0x9>
c001c720:	51                   	push   ecx
c001c721:	51                   	push   ecx
c001c722:	6a 00                	push   0x0
c001c724:	68 40 42 0f 00       	push   0xf4240
c001c729:	e8 bf b9 ff ff       	call   c00180ed <nanoSleep(unsigned long long)>
c001c72e:	83 c4 10             	add    esp,0x10
c001c731:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c737:	75 c4                	jne    c001c6fd <ATA::readyForCommand()+0x9>
c001c739:	31 c0                	xor    eax,eax
c001c73b:	eb 02                	jmp    c001c73f <ATA::readyForCommand()+0x4b>
c001c73d:	b0 01                	mov    al,0x1
c001c73f:	5a                   	pop    edx
c001c740:	5b                   	pop    ebx
c001c741:	5e                   	pop    esi
c001c742:	c3                   	ret    
c001c743:	90                   	nop

c001c744 <ATA::access(unsigned long long, int, void*, bool)>:
c001c744:	55                   	push   ebp
c001c745:	57                   	push   edi
c001c746:	56                   	push   esi
c001c747:	53                   	push   ebx
c001c748:	83 ec 2c             	sub    esp,0x2c
c001c74b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c74f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c753:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c757:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c75b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c75f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c763:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c767:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c76d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c771:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c777:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c77b:	c1 e0 06             	shl    eax,0x6
c001c77e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c786:	74 5d                	je     c001c7e5 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c788:	89 fa                	mov    edx,edi
c001c78a:	89 f0                	mov    eax,esi
c001c78c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c790:	c1 ea 1c             	shr    edx,0x1c
c001c793:	89 d1                	mov    ecx,edx
c001c795:	09 c1                	or     ecx,eax
c001c797:	74 25                	je     c001c7be <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c799:	31 ed                	xor    ebp,ebp
c001c79b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c7a2:	89 fa                	mov    edx,edi
c001c7a4:	89 f0                	mov    eax,esi
c001c7a6:	0f ad d0             	shrd   eax,edx,cl
c001c7a9:	d3 ea                	shr    edx,cl
c001c7ab:	f6 c1 20             	test   cl,0x20
c001c7ae:	74 02                	je     c001c7b2 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c7b0:	89 d0                	mov    eax,edx
c001c7b2:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c7b6:	45                   	inc    ebp
c001c7b7:	83 fd 06             	cmp    ebp,0x6
c001c7ba:	75 df                	jne    c001c79b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c7bc:	eb 76                	jmp    c001c834 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c7be:	89 f0                	mov    eax,esi
c001c7c0:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c7c5:	89 fa                	mov    edx,edi
c001c7c7:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c7ce:	0f ac d0 10          	shrd   eax,edx,0x10
c001c7d2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c7d7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c7db:	c1 ee 18             	shr    esi,0x18
c001c7de:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c7e3:	eb 56                	jmp    c001c83b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c7e5:	6a 00                	push   0x0
c001c7e7:	6a 3f                	push   0x3f
c001c7e9:	57                   	push   edi
c001c7ea:	56                   	push   esi
c001c7eb:	e8 dc 1e 00 00       	call   c001e6cc <__umoddi3>
c001c7f0:	83 c4 10             	add    esp,0x10
c001c7f3:	40                   	inc    eax
c001c7f4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c7f8:	6a 00                	push   0x0
c001c7fa:	68 f0 03 00 00       	push   0x3f0
c001c7ff:	57                   	push   edi
c001c800:	56                   	push   esi
c001c801:	e8 c6 1d 00 00       	call   c001e5cc <__udivdi3>
c001c806:	83 c4 10             	add    esp,0x10
c001c809:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c80e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c815:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c81a:	6a 00                	push   0x0
c001c81c:	6a 3f                	push   0x3f
c001c81e:	57                   	push   edi
c001c81f:	56                   	push   esi
c001c820:	e8 a7 1d 00 00       	call   c001e5cc <__udivdi3>
c001c825:	83 c4 10             	add    esp,0x10
c001c828:	89 c6                	mov    esi,eax
c001c82a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c82f:	83 e6 0f             	and    esi,0xf
c001c832:	eb 07                	jmp    c001c83b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c834:	31 f6                	xor    esi,esi
c001c836:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c83b:	bf 01 00 00 00       	mov    edi,0x1
c001c840:	50                   	push   eax
c001c841:	6a 00                	push   0x0
c001c843:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c84a:	50                   	push   eax
c001c84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c84f:	e8 fc f3 ff ff       	call   c001bc50 <IDE::enableIRQs(unsigned char, bool)>
c001c854:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c857:	e8 98 fe ff ff       	call   c001c6f4 <ATA::readyForCommand()>
c001c85c:	83 c4 10             	add    esp,0x10
c001c85f:	84 c0                	test   al,al
c001c861:	0f 84 50 02 00 00    	je     c001cab7 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c867:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c86d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c873:	c1 e0 04             	shl    eax,0x4
c001c876:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c87d:	09 c6                	or     esi,eax
c001c87f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001c884:	75 05                	jne    c001c88b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c886:	83 ce a0             	or     esi,0xffffffa0
c001c889:	eb 03                	jmp    c001c88e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c88b:	83 ce e0             	or     esi,0xffffffe0
c001c88e:	89 f0                	mov    eax,esi
c001c890:	0f b6 f0             	movzx  esi,al
c001c893:	56                   	push   esi
c001c894:	6a 06                	push   0x6
c001c896:	51                   	push   ecx
c001c897:	52                   	push   edx
c001c898:	e8 a7 f1 ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c89d:	83 c4 10             	add    esp,0x10
c001c8a0:	6a 00                	push   0x0
c001c8a2:	6a 01                	push   0x1
c001c8a4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8ab:	50                   	push   eax
c001c8ac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8b2:	e8 8d f1 ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8b7:	83 c4 10             	add    esp,0x10
c001c8ba:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c8bf:	75 6e                	jne    c001c92f <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c8c1:	6a 00                	push   0x0
c001c8c3:	6a 08                	push   0x8
c001c8c5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8cc:	50                   	push   eax
c001c8cd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8d3:	e8 6c f1 ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8d8:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c8dd:	50                   	push   eax
c001c8de:	6a 09                	push   0x9
c001c8e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8e7:	50                   	push   eax
c001c8e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8ee:	e8 51 f1 ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8f3:	83 c4 20             	add    esp,0x20
c001c8f6:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c8fb:	50                   	push   eax
c001c8fc:	6a 0a                	push   0xa
c001c8fe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c905:	50                   	push   eax
c001c906:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c90c:	e8 33 f1 ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c911:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c916:	50                   	push   eax
c001c917:	6a 0b                	push   0xb
c001c919:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c920:	50                   	push   eax
c001c921:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c927:	e8 18 f1 ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c92c:	83 c4 20             	add    esp,0x20
c001c92f:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c934:	50                   	push   eax
c001c935:	6a 02                	push   0x2
c001c937:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c93e:	50                   	push   eax
c001c93f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c945:	e8 fa f0 ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c94a:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c94f:	50                   	push   eax
c001c950:	6a 03                	push   0x3
c001c952:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c959:	50                   	push   eax
c001c95a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c960:	e8 df f0 ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c965:	83 c4 20             	add    esp,0x20
c001c968:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c96d:	50                   	push   eax
c001c96e:	6a 04                	push   0x4
c001c970:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c977:	50                   	push   eax
c001c978:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c97e:	e8 c1 f0 ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c983:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c988:	50                   	push   eax
c001c989:	6a 05                	push   0x5
c001c98b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c992:	50                   	push   eax
c001c993:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c999:	e8 a6 f0 ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c99e:	83 c4 20             	add    esp,0x20
c001c9a1:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c9a6:	0f 94 c0             	sete   al
c001c9a9:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c9ae:	74 09                	je     c001c9b9 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001c9b0:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001c9b7:	eb 07                	jmp    c001c9c0 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001c9b9:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001c9c0:	0f b6 c0             	movzx  eax,al
c001c9c3:	50                   	push   eax
c001c9c4:	6a 07                	push   0x7
c001c9c6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9cd:	50                   	push   eax
c001c9ce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9d4:	e8 6b f0 ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9d9:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c9dd:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001c9e1:	83 c4 10             	add    esp,0x10
c001c9e4:	85 f6                	test   esi,esi
c001c9e6:	0f 84 ac 00 00 00    	je     c001ca98 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001c9ec:	50                   	push   eax
c001c9ed:	6a 01                	push   0x1
c001c9ef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9f6:	50                   	push   eax
c001c9f7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9fd:	e8 ee fb ff ff       	call   c001c5f0 <IDE::polling(unsigned char, unsigned int)>
c001ca02:	83 c4 10             	add    esp,0x10
c001ca05:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ca0b:	84 c0                	test   al,al
c001ca0d:	74 20                	je     c001ca2f <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001ca0f:	0f b6 f8             	movzx  edi,al
c001ca12:	0f b6 d2             	movzx  edx,dl
c001ca15:	57                   	push   edi
c001ca16:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001ca1d:	50                   	push   eax
c001ca1e:	52                   	push   edx
c001ca1f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca25:	e8 30 fa ff ff       	call   c001c45a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ca2a:	e9 85 00 00 00       	jmp    c001cab4 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001ca2f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ca34:	74 41                	je     c001ca77 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001ca36:	31 c9                	xor    ecx,ecx
c001ca38:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001ca3c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ca40:	50                   	push   eax
c001ca41:	50                   	push   eax
c001ca42:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca49:	50                   	push   eax
c001ca4a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca50:	e8 dd ef ff ff       	call   c001ba32 <IDE::getBase(unsigned char)>
c001ca55:	89 c2                	mov    edx,eax
c001ca57:	89 e8                	mov    eax,ebp
c001ca59:	66 ef                	out    dx,ax
c001ca5b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ca5f:	83 c4 10             	add    esp,0x10
c001ca62:	41                   	inc    ecx
c001ca63:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001ca69:	75 cd                	jne    c001ca38 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001ca6b:	4e                   	dec    esi
c001ca6c:	81 c7 00 02 00 00    	add    edi,0x200
c001ca72:	e9 6d ff ff ff       	jmp    c001c9e4 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001ca77:	0f b6 d2             	movzx  edx,dl
c001ca7a:	51                   	push   ecx
c001ca7b:	51                   	push   ecx
c001ca7c:	52                   	push   edx
c001ca7d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca83:	e8 aa ef ff ff       	call   c001ba32 <IDE::getBase(unsigned char)>
c001ca88:	b9 00 01 00 00       	mov    ecx,0x100
c001ca8d:	89 c2                	mov    edx,eax
c001ca8f:	fc                   	cld    
c001ca90:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001ca93:	83 c4 10             	add    esp,0x10
c001ca96:	eb d3                	jmp    c001ca6b <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001ca98:	31 ff                	xor    edi,edi
c001ca9a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ca9f:	74 16                	je     c001cab7 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001caa1:	50                   	push   eax
c001caa2:	50                   	push   eax
c001caa3:	31 c0                	xor    eax,eax
c001caa5:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001caaa:	0f 94 c0             	sete   al
c001caad:	50                   	push   eax
c001caae:	53                   	push   ebx
c001caaf:	e8 f6 fb ff ff       	call   c001c6aa <ATA::flush(bool)>
c001cab4:	83 c4 10             	add    esp,0x10
c001cab7:	83 c4 2c             	add    esp,0x2c
c001caba:	89 f8                	mov    eax,edi
c001cabc:	5b                   	pop    ebx
c001cabd:	5e                   	pop    esi
c001cabe:	5f                   	pop    edi
c001cabf:	5d                   	pop    ebp
c001cac0:	c3                   	ret    
c001cac1:	90                   	nop

c001cac2 <ATA::read(unsigned long long, int, void*)>:
c001cac2:	57                   	push   edi
c001cac3:	b8 04 00 00 00       	mov    eax,0x4
c001cac8:	56                   	push   esi
c001cac9:	53                   	push   ebx
c001caca:	83 ec 10             	sub    esp,0x10
c001cacd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cad1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cad5:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001cad8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cadc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cae0:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001cae6:	77 3b                	ja     c001cb23 <ATA::read(unsigned long long, int, void*)+0x61>
c001cae8:	b8 06 00 00 00       	mov    eax,0x6
c001caed:	85 d2                	test   edx,edx
c001caef:	74 32                	je     c001cb23 <ATA::read(unsigned long long, int, void*)+0x61>
c001caf1:	50                   	push   eax
c001caf2:	50                   	push   eax
c001caf3:	6a 00                	push   0x0
c001caf5:	52                   	push   edx
c001caf6:	53                   	push   ebx
c001caf7:	57                   	push   edi
c001caf8:	56                   	push   esi
c001caf9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cafd:	e8 42 fc ff ff       	call   c001c744 <ATA::access(unsigned long long, int, void*, bool)>
c001cb02:	83 c4 20             	add    esp,0x20
c001cb05:	85 c0                	test   eax,eax
c001cb07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb0b:	75 11                	jne    c001cb1e <ATA::read(unsigned long long, int, void*)+0x5c>
c001cb0d:	01 1d 24 52 02 c0    	add    DWORD PTR ds:0xc0025224,ebx
c001cb13:	e8 5c 00 ff ff       	call   c000cb74 <VgaText::updateDiskUsage()>
c001cb18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb1c:	eb 05                	jmp    c001cb23 <ATA::read(unsigned long long, int, void*)+0x61>
c001cb1e:	b8 01 00 00 00       	mov    eax,0x1
c001cb23:	83 c4 10             	add    esp,0x10
c001cb26:	5b                   	pop    ebx
c001cb27:	5e                   	pop    esi
c001cb28:	5f                   	pop    edi
c001cb29:	c3                   	ret    

c001cb2a <ATA::write(unsigned long long, int, void*)>:
c001cb2a:	57                   	push   edi
c001cb2b:	b8 04 00 00 00       	mov    eax,0x4
c001cb30:	56                   	push   esi
c001cb31:	53                   	push   ebx
c001cb32:	83 ec 10             	sub    esp,0x10
c001cb35:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cb39:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cb3d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001cb40:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cb44:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cb48:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001cb4e:	77 3b                	ja     c001cb8b <ATA::write(unsigned long long, int, void*)+0x61>
c001cb50:	b8 06 00 00 00       	mov    eax,0x6
c001cb55:	85 d2                	test   edx,edx
c001cb57:	74 32                	je     c001cb8b <ATA::write(unsigned long long, int, void*)+0x61>
c001cb59:	50                   	push   eax
c001cb5a:	50                   	push   eax
c001cb5b:	6a 01                	push   0x1
c001cb5d:	52                   	push   edx
c001cb5e:	53                   	push   ebx
c001cb5f:	57                   	push   edi
c001cb60:	56                   	push   esi
c001cb61:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cb65:	e8 da fb ff ff       	call   c001c744 <ATA::access(unsigned long long, int, void*, bool)>
c001cb6a:	83 c4 20             	add    esp,0x20
c001cb6d:	85 c0                	test   eax,eax
c001cb6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb73:	75 11                	jne    c001cb86 <ATA::write(unsigned long long, int, void*)+0x5c>
c001cb75:	01 1d 20 52 02 c0    	add    DWORD PTR ds:0xc0025220,ebx
c001cb7b:	e8 f4 ff fe ff       	call   c000cb74 <VgaText::updateDiskUsage()>
c001cb80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb84:	eb 05                	jmp    c001cb8b <ATA::write(unsigned long long, int, void*)+0x61>
c001cb86:	b8 01 00 00 00       	mov    eax,0x1
c001cb8b:	83 c4 10             	add    esp,0x10
c001cb8e:	5b                   	pop    ebx
c001cb8f:	5e                   	pop    esi
c001cb90:	5f                   	pop    edi
c001cb91:	c3                   	ret    

c001cb92 <ATA::detectCHS()>:
c001cb92:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb96:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cb9c:	c1 e0 06             	shl    eax,0x6
c001cb9f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cba5:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cbaf:	c7 44 24 04 37 25 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022537
c001cbb7:	e9 b8 7f ff ff       	jmp    c0014b74 <Krnl::panic(char const*)>

c001cbbc <ATA::open(int, int, void*)>:
c001cbbc:	53                   	push   ebx
c001cbbd:	83 ec 08             	sub    esp,0x8
c001cbc0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cbc4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cbc8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cbcc:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cbd2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cbd8:	c1 e0 06             	shl    eax,0x6
c001cbdb:	01 d0                	add    eax,edx
c001cbdd:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cbe4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cbea:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cbf1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cbfb:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cc01:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cc08:	75 0c                	jne    c001cc16 <ATA::open(int, int, void*)+0x5a>
c001cc0a:	83 ec 0c             	sub    esp,0xc
c001cc0d:	53                   	push   ebx
c001cc0e:	e8 7f ff ff ff       	call   c001cb92 <ATA::detectCHS()>
c001cc13:	83 c4 10             	add    esp,0x10
c001cc16:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cc1c:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cc22:	c1 e0 06             	shl    eax,0x6
c001cc25:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cc2c:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cc36:	d1 e8                	shr    eax,1
c001cc38:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cc3e:	6a 04                	push   0x4
c001cc40:	6a 0c                	push   0xc
c001cc42:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc49:	50                   	push   eax
c001cc4a:	52                   	push   edx
c001cc4b:	e8 f4 ed ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc50:	90                   	nop
c001cc51:	90                   	nop
c001cc52:	6a 00                	push   0x0
c001cc54:	6a 0c                	push   0xc
c001cc56:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc5d:	50                   	push   eax
c001cc5e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc64:	e8 db ed ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc69:	83 c4 14             	add    esp,0x14
c001cc6c:	53                   	push   ebx
c001cc6d:	e8 e6 3a ff ff       	call   c0010758 <PhysicalDisk::startCache()>
c001cc72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc75:	e8 ec 53 ff ff       	call   c0012066 <createPartitionsForDisk(PhysicalDisk*)>
c001cc7a:	31 c0                	xor    eax,eax
c001cc7c:	83 c4 18             	add    esp,0x18
c001cc7f:	5b                   	pop    ebx
c001cc80:	c3                   	ret    
c001cc81:	90                   	nop

c001cc82 <ATAPI::write(unsigned long long, int, void*)>:
c001cc82:	b8 03 00 00 00       	mov    eax,0x3
c001cc87:	c3                   	ret    

c001cc88 <ATAPI::close(int, int, void*)>:
c001cc88:	83 ec 0c             	sub    esp,0xc
c001cc8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc8f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cc95:	85 c0                	test   eax,eax
c001cc97:	74 0c                	je     c001cca5 <ATAPI::close(int, int, void*)+0x1d>
c001cc99:	83 ec 0c             	sub    esp,0xc
c001cc9c:	8b 10                	mov    edx,DWORD PTR [eax]
c001cc9e:	50                   	push   eax
c001cc9f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cca2:	83 c4 10             	add    esp,0x10
c001cca5:	31 c0                	xor    eax,eax
c001cca7:	83 c4 0c             	add    esp,0xc
c001ccaa:	c3                   	ret    
c001ccab:	90                   	nop

c001ccac <ATAPI::ATAPI()>:
c001ccac:	83 ec 0c             	sub    esp,0xc
c001ccaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccb3:	83 ec 04             	sub    esp,0x4
c001ccb6:	68 00 08 00 00       	push   0x800
c001ccbb:	68 80 25 02 c0       	push   0xc0022580
c001ccc0:	50                   	push   eax
c001ccc1:	e8 2a 3a ff ff       	call   c00106f0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ccc6:	83 c4 10             	add    esp,0x10
c001ccc9:	ba c0 25 02 c0       	mov    edx,0xc00225c0
c001ccce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccd2:	89 10                	mov    DWORD PTR [eax],edx
c001ccd4:	90                   	nop
c001ccd5:	83 c4 0c             	add    esp,0xc
c001ccd8:	c3                   	ret    
c001ccd9:	90                   	nop

c001ccda <ATAPI::readyForCommand()>:
c001ccda:	56                   	push   esi
c001ccdb:	53                   	push   ebx
c001ccdc:	31 db                	xor    ebx,ebx
c001ccde:	50                   	push   eax
c001ccdf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cce3:	50                   	push   eax
c001cce4:	6a 0c                	push   0xc
c001cce6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cced:	50                   	push   eax
c001ccee:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ccf4:	e8 0b ee ff ff       	call   c001bb04 <IDE::read(unsigned char, unsigned char)>
c001ccf9:	83 c4 10             	add    esp,0x10
c001ccfc:	a8 88                	test   al,0x88
c001ccfe:	74 23                	je     c001cd23 <ATAPI::readyForCommand()+0x49>
c001cd00:	43                   	inc    ebx
c001cd01:	83 fb 63             	cmp    ebx,0x63
c001cd04:	7e dd                	jle    c001cce3 <ATAPI::readyForCommand()+0x9>
c001cd06:	51                   	push   ecx
c001cd07:	51                   	push   ecx
c001cd08:	6a 00                	push   0x0
c001cd0a:	68 40 42 0f 00       	push   0xf4240
c001cd0f:	e8 d9 b3 ff ff       	call   c00180ed <nanoSleep(unsigned long long)>
c001cd14:	83 c4 10             	add    esp,0x10
c001cd17:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cd1d:	75 c4                	jne    c001cce3 <ATAPI::readyForCommand()+0x9>
c001cd1f:	31 c0                	xor    eax,eax
c001cd21:	eb 02                	jmp    c001cd25 <ATAPI::readyForCommand()+0x4b>
c001cd23:	b0 01                	mov    al,0x1
c001cd25:	5a                   	pop    edx
c001cd26:	5b                   	pop    ebx
c001cd27:	5e                   	pop    esi
c001cd28:	c3                   	ret    
c001cd29:	90                   	nop

c001cd2a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001cd2a:	55                   	push   ebp
c001cd2b:	57                   	push   edi
c001cd2c:	56                   	push   esi
c001cd2d:	53                   	push   ebx
c001cd2e:	83 ec 20             	sub    esp,0x20
c001cd31:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cd35:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001cd39:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001cd3d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cd41:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001cd45:	6a 01                	push   0x1
c001cd47:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cd4e:	50                   	push   eax
c001cd4f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cd55:	e8 f6 ee ff ff       	call   c001bc50 <IDE::enableIRQs(unsigned char, bool)>
c001cd5a:	5e                   	pop    esi
c001cd5b:	58                   	pop    eax
c001cd5c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cd63:	50                   	push   eax
c001cd64:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cd6a:	e8 af ec ff ff       	call   c001ba1e <IDE::prepareInterrupt(unsigned char)>
c001cd6f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cd72:	e8 63 ff ff ff       	call   c001ccda <ATAPI::readyForCommand()>
c001cd77:	83 c4 10             	add    esp,0x10
c001cd7a:	84 c0                	test   al,al
c001cd7c:	75 0a                	jne    c001cd88 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001cd7e:	bb 01 00 00 00       	mov    ebx,0x1
c001cd83:	e9 57 02 00 00       	jmp    c001cfdf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cd88:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001cd8e:	c1 e0 04             	shl    eax,0x4
c001cd91:	0f b6 c0             	movzx  eax,al
c001cd94:	50                   	push   eax
c001cd95:	6a 06                	push   0x6
c001cd97:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cd9e:	50                   	push   eax
c001cd9f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cda5:	e8 9a ec ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdaa:	6a 00                	push   0x0
c001cdac:	6a 01                	push   0x1
c001cdae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cdb5:	50                   	push   eax
c001cdb6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cdbc:	e8 83 ec ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdc1:	83 c4 20             	add    esp,0x20
c001cdc4:	0f b6 c3             	movzx  eax,bl
c001cdc7:	0f b6 df             	movzx  ebx,bh
c001cdca:	50                   	push   eax
c001cdcb:	6a 04                	push   0x4
c001cdcd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cdd4:	50                   	push   eax
c001cdd5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cddb:	e8 64 ec ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cde0:	53                   	push   ebx
c001cde1:	6a 05                	push   0x5
c001cde3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cdea:	50                   	push   eax
c001cdeb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cdf1:	e8 4e ec ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdf6:	83 c4 20             	add    esp,0x20
c001cdf9:	68 a0 00 00 00       	push   0xa0
c001cdfe:	6a 07                	push   0x7
c001ce00:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ce07:	50                   	push   eax
c001ce08:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ce0e:	e8 31 ec ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce13:	83 c4 0c             	add    esp,0xc
c001ce16:	6a 01                	push   0x1
c001ce18:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ce1f:	50                   	push   eax
c001ce20:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ce26:	e8 c5 f7 ff ff       	call   c001c5f0 <IDE::polling(unsigned char, unsigned int)>
c001ce2b:	83 c4 10             	add    esp,0x10
c001ce2e:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001ce34:	84 c0                	test   al,al
c001ce36:	74 23                	je     c001ce5b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001ce38:	0f b6 d8             	movzx  ebx,al
c001ce3b:	0f b6 d2             	movzx  edx,dl
c001ce3e:	53                   	push   ebx
c001ce3f:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001ce46:	50                   	push   eax
c001ce47:	52                   	push   edx
c001ce48:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ce4e:	e8 07 f6 ff ff       	call   c001c45a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ce53:	83 c4 10             	add    esp,0x10
c001ce56:	e9 84 01 00 00       	jmp    c001cfdf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ce5b:	0f b6 d2             	movzx  edx,dl
c001ce5e:	53                   	push   ebx
c001ce5f:	53                   	push   ebx
c001ce60:	52                   	push   edx
c001ce61:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ce67:	e8 c6 eb ff ff       	call   c001ba32 <IDE::getBase(unsigned char)>
c001ce6c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ce70:	b9 06 00 00 00       	mov    ecx,0x6
c001ce75:	89 c2                	mov    edx,eax
c001ce77:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001ce7a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001ce7e:	83 c4 10             	add    esp,0x10
c001ce81:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ce87:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ce8e:	85 db                	test   ebx,ebx
c001ce90:	0f 84 ec 00 00 00    	je     c001cf82 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001ce96:	51                   	push   ecx
c001ce97:	51                   	push   ecx
c001ce98:	52                   	push   edx
c001ce99:	50                   	push   eax
c001ce9a:	e8 13 ed ff ff       	call   c001bbb2 <IDE::waitInterrupt(unsigned char)>
c001ce9f:	83 c4 10             	add    esp,0x10
c001cea2:	84 c0                	test   al,al
c001cea4:	0f 84 d4 fe ff ff    	je     c001cd7e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ceaa:	56                   	push   esi
c001ceab:	56                   	push   esi
c001ceac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ceb3:	50                   	push   eax
c001ceb4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ceba:	e8 5f eb ff ff       	call   c001ba1e <IDE::prepareInterrupt(unsigned char)>
c001cebf:	83 c4 0c             	add    esp,0xc
c001cec2:	6a 04                	push   0x4
c001cec4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cecb:	50                   	push   eax
c001cecc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ced2:	e8 2d ec ff ff       	call   c001bb04 <IDE::read(unsigned char, unsigned char)>
c001ced7:	83 c4 0c             	add    esp,0xc
c001ceda:	89 c6                	mov    esi,eax
c001cedc:	6a 05                	push   0x5
c001cede:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cee5:	50                   	push   eax
c001cee6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ceec:	e8 13 ec ff ff       	call   c001bb04 <IDE::read(unsigned char, unsigned char)>
c001cef1:	89 f1                	mov    ecx,esi
c001cef3:	0f b6 c0             	movzx  eax,al
c001cef6:	0f b6 f1             	movzx  esi,cl
c001cef9:	c1 e0 08             	shl    eax,0x8
c001cefc:	09 c6                	or     esi,eax
c001cefe:	d1 fe                	sar    esi,1
c001cf00:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001cf04:	83 c4 10             	add    esp,0x10
c001cf07:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001cf0c:	74 41                	je     c001cf4f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001cf0e:	31 c9                	xor    ecx,ecx
c001cf10:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cf16:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cf1d:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001cf21:	75 0a                	jne    c001cf2d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001cf23:	01 c9                	add    ecx,ecx
c001cf25:	01 cd                	add    ebp,ecx
c001cf27:	4b                   	dec    ebx
c001cf28:	e9 54 ff ff ff       	jmp    c001ce81 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001cf2d:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001cf32:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cf36:	51                   	push   ecx
c001cf37:	51                   	push   ecx
c001cf38:	52                   	push   edx
c001cf39:	50                   	push   eax
c001cf3a:	e8 f3 ea ff ff       	call   c001ba32 <IDE::getBase(unsigned char)>
c001cf3f:	89 c2                	mov    edx,eax
c001cf41:	89 f0                	mov    eax,esi
c001cf43:	66 ef                	out    dx,ax
c001cf45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf49:	83 c4 10             	add    esp,0x10
c001cf4c:	41                   	inc    ecx
c001cf4d:	eb c1                	jmp    c001cf10 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001cf4f:	31 f6                	xor    esi,esi
c001cf51:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cf57:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cf5e:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001cf62:	75 06                	jne    c001cf6a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001cf64:	01 f6                	add    esi,esi
c001cf66:	01 f5                	add    ebp,esi
c001cf68:	eb bd                	jmp    c001cf27 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001cf6a:	51                   	push   ecx
c001cf6b:	51                   	push   ecx
c001cf6c:	52                   	push   edx
c001cf6d:	50                   	push   eax
c001cf6e:	e8 bf ea ff ff       	call   c001ba32 <IDE::getBase(unsigned char)>
c001cf73:	89 c2                	mov    edx,eax
c001cf75:	66 ed                	in     ax,dx
c001cf77:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001cf7c:	83 c4 10             	add    esp,0x10
c001cf7f:	46                   	inc    esi
c001cf80:	eb cf                	jmp    c001cf51 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001cf82:	51                   	push   ecx
c001cf83:	51                   	push   ecx
c001cf84:	52                   	push   edx
c001cf85:	50                   	push   eax
c001cf86:	e8 27 ec ff ff       	call   c001bbb2 <IDE::waitInterrupt(unsigned char)>
c001cf8b:	83 c4 10             	add    esp,0x10
c001cf8e:	84 c0                	test   al,al
c001cf90:	0f 84 e8 fd ff ff    	je     c001cd7e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001cf96:	bb a0 86 01 00       	mov    ebx,0x186a0
c001cf9b:	52                   	push   edx
c001cf9c:	52                   	push   edx
c001cf9d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cfa4:	50                   	push   eax
c001cfa5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfab:	e8 6e ea ff ff       	call   c001ba1e <IDE::prepareInterrupt(unsigned char)>
c001cfb0:	83 c4 10             	add    esp,0x10
c001cfb3:	50                   	push   eax
c001cfb4:	50                   	push   eax
c001cfb5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cfbc:	50                   	push   eax
c001cfbd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfc3:	e8 6a ea ff ff       	call   c001ba32 <IDE::getBase(unsigned char)>
c001cfc8:	8d 50 07             	lea    edx,[eax+0x7]
c001cfcb:	ec                   	in     al,dx
c001cfcc:	83 c4 10             	add    esp,0x10
c001cfcf:	a8 88                	test   al,0x88
c001cfd1:	74 0a                	je     c001cfdd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001cfd3:	4b                   	dec    ebx
c001cfd4:	75 dd                	jne    c001cfb3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001cfd6:	bb 02 00 00 00       	mov    ebx,0x2
c001cfdb:	eb 02                	jmp    c001cfdf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cfdd:	31 db                	xor    ebx,ebx
c001cfdf:	83 c4 1c             	add    esp,0x1c
c001cfe2:	89 d8                	mov    eax,ebx
c001cfe4:	5b                   	pop    ebx
c001cfe5:	5e                   	pop    esi
c001cfe6:	5f                   	pop    edi
c001cfe7:	5d                   	pop    ebp
c001cfe8:	c3                   	ret    
c001cfe9:	90                   	nop

c001cfea <ATAPI::diskRemoved()>:
c001cfea:	83 ec 18             	sub    esp,0x18
c001cfed:	68 8b 25 02 c0       	push   0xc002258b
c001cff2:	e8 e8 1e ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001cff7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cffb:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001d002:	83 c4 1c             	add    esp,0x1c
c001d005:	c3                   	ret    

c001d006 <ATAPI::eject()>:
c001d006:	57                   	push   edi
c001d007:	b9 03 00 00 00       	mov    ecx,0x3
c001d00c:	53                   	push   ebx
c001d00d:	83 ec 14             	sub    esp,0x14
c001d010:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d014:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d018:	fc                   	cld    
c001d019:	31 c0                	xor    eax,eax
c001d01b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d01d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d022:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d027:	50                   	push   eax
c001d028:	50                   	push   eax
c001d029:	6a 00                	push   0x0
c001d02b:	6a 00                	push   0x0
c001d02d:	6a 00                	push   0x0
c001d02f:	6a 02                	push   0x2
c001d031:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d035:	50                   	push   eax
c001d036:	53                   	push   ebx
c001d037:	e8 ee fc ff ff       	call   c001cd2a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d03c:	83 c4 14             	add    esp,0x14
c001d03f:	53                   	push   ebx
c001d040:	e8 a5 ff ff ff       	call   c001cfea <ATAPI::diskRemoved()>
c001d045:	83 c4 24             	add    esp,0x24
c001d048:	5b                   	pop    ebx
c001d049:	5f                   	pop    edi
c001d04a:	c3                   	ret    
c001d04b:	90                   	nop

c001d04c <ATAPI::diskInserted()>:
c001d04c:	53                   	push   ebx
c001d04d:	83 ec 14             	sub    esp,0x14
c001d050:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d054:	68 a1 25 02 c0       	push   0xc00225a1
c001d059:	e8 81 1e ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001d05e:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001d065:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d068:	e8 eb 36 ff ff       	call   c0010758 <PhysicalDisk::startCache()>
c001d06d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001d071:	83 c4 18             	add    esp,0x18
c001d074:	5b                   	pop    ebx
c001d075:	e9 ec 4f ff ff       	jmp    c0012066 <createPartitionsForDisk(PhysicalDisk*)>

c001d07a <ATAPI::detectMedia()>:
c001d07a:	56                   	push   esi
c001d07b:	53                   	push   ebx
c001d07c:	83 ec 28             	sub    esp,0x28
c001d07f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d083:	6a 0c                	push   0xc
c001d085:	6a 00                	push   0x0
c001d087:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d08b:	56                   	push   esi
c001d08c:	e8 77 35 fe ff       	call   c0000608 <memset>
c001d091:	58                   	pop    eax
c001d092:	5a                   	pop    edx
c001d093:	6a 00                	push   0x0
c001d095:	6a 00                	push   0x0
c001d097:	6a 00                	push   0x0
c001d099:	6a 00                	push   0x0
c001d09b:	56                   	push   esi
c001d09c:	53                   	push   ebx
c001d09d:	e8 88 fc ff ff       	call   c001cd2a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d0a2:	83 c4 1c             	add    esp,0x1c
c001d0a5:	6a 0c                	push   0xc
c001d0a7:	6a 00                	push   0x0
c001d0a9:	56                   	push   esi
c001d0aa:	e8 59 35 fe ff       	call   c0000608 <memset>
c001d0af:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d0b4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d0b9:	59                   	pop    ecx
c001d0ba:	58                   	pop    eax
c001d0bb:	6a 01                	push   0x1
c001d0bd:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d0c1:	50                   	push   eax
c001d0c2:	6a 00                	push   0x0
c001d0c4:	6a 12                	push   0x12
c001d0c6:	56                   	push   esi
c001d0c7:	53                   	push   ebx
c001d0c8:	e8 5d fc ff ff       	call   c001cd2a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d0cd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d0d1:	83 c4 20             	add    esp,0x20
c001d0d4:	83 e0 7f             	and    eax,0x7f
c001d0d7:	3c 70                	cmp    al,0x70
c001d0d9:	74 15                	je     c001d0f0 <ATAPI::detectMedia()+0x76>
c001d0db:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d0e2:	75 0c                	jne    c001d0f0 <ATAPI::detectMedia()+0x76>
c001d0e4:	83 ec 0c             	sub    esp,0xc
c001d0e7:	53                   	push   ebx
c001d0e8:	e8 5f ff ff ff       	call   c001d04c <ATAPI::diskInserted()>
c001d0ed:	83 c4 10             	add    esp,0x10
c001d0f0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d0f4:	83 e0 0f             	and    eax,0xf
c001d0f7:	3c 02                	cmp    al,0x2
c001d0f9:	75 1b                	jne    c001d116 <ATAPI::detectMedia()+0x9c>
c001d0fb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d100:	75 2d                	jne    c001d12f <ATAPI::detectMedia()+0xb5>
c001d102:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d109:	74 24                	je     c001d12f <ATAPI::detectMedia()+0xb5>
c001d10b:	83 ec 0c             	sub    esp,0xc
c001d10e:	53                   	push   ebx
c001d10f:	e8 d6 fe ff ff       	call   c001cfea <ATAPI::diskRemoved()>
c001d114:	eb 16                	jmp    c001d12c <ATAPI::detectMedia()+0xb2>
c001d116:	84 c0                	test   al,al
c001d118:	75 15                	jne    c001d12f <ATAPI::detectMedia()+0xb5>
c001d11a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d121:	75 0c                	jne    c001d12f <ATAPI::detectMedia()+0xb5>
c001d123:	83 ec 0c             	sub    esp,0xc
c001d126:	53                   	push   ebx
c001d127:	e8 20 ff ff ff       	call   c001d04c <ATAPI::diskInserted()>
c001d12c:	83 c4 10             	add    esp,0x10
c001d12f:	83 c4 24             	add    esp,0x24
c001d132:	5b                   	pop    ebx
c001d133:	5e                   	pop    esi
c001d134:	c3                   	ret    
c001d135:	90                   	nop

c001d136 <ATAPI::open(int, int, void*)>:
c001d136:	53                   	push   ebx
c001d137:	83 ec 08             	sub    esp,0x8
c001d13a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d13e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d142:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d146:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d14c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d152:	c1 e0 06             	shl    eax,0x6
c001d155:	01 d0                	add    eax,edx
c001d157:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d15e:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d164:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d16b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d175:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d17b:	6a 04                	push   0x4
c001d17d:	6a 0c                	push   0xc
c001d17f:	51                   	push   ecx
c001d180:	52                   	push   edx
c001d181:	e8 be e8 ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d186:	90                   	nop
c001d187:	90                   	nop
c001d188:	6a 00                	push   0x0
c001d18a:	6a 0c                	push   0xc
c001d18c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d193:	50                   	push   eax
c001d194:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d19a:	e8 a5 e8 ff ff       	call   c001ba44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d19f:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d1a6:	83 c4 14             	add    esp,0x14
c001d1a9:	53                   	push   ebx
c001d1aa:	e8 cb fe ff ff       	call   c001d07a <ATAPI::detectMedia()>
c001d1af:	31 c0                	xor    eax,eax
c001d1b1:	83 c4 18             	add    esp,0x18
c001d1b4:	5b                   	pop    ebx
c001d1b5:	c3                   	ret    

c001d1b6 <ATAPI::read(unsigned long long, int, void*)>:
c001d1b6:	55                   	push   ebp
c001d1b7:	57                   	push   edi
c001d1b8:	56                   	push   esi
c001d1b9:	53                   	push   ebx
c001d1ba:	83 ec 1c             	sub    esp,0x1c
c001d1bd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d1c1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d1c5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d1c9:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d1d0:	74 41                	je     c001d213 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001d1d2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d1d6:	b9 03 00 00 00       	mov    ecx,0x3
c001d1db:	fc                   	cld    
c001d1dc:	31 c0                	xor    eax,eax
c001d1de:	86 fb                	xchg   bl,bh
c001d1e0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d1e2:	c1 c3 10             	rol    ebx,0x10
c001d1e5:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d1ea:	89 e8                	mov    eax,ebp
c001d1ec:	86 fb                	xchg   bl,bh
c001d1ee:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d1f2:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001d1f6:	50                   	push   eax
c001d1f7:	50                   	push   eax
c001d1f8:	55                   	push   ebp
c001d1f9:	c1 e5 0b             	shl    ebp,0xb
c001d1fc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d200:	6a 00                	push   0x0
c001d202:	55                   	push   ebp
c001d203:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d207:	50                   	push   eax
c001d208:	56                   	push   esi
c001d209:	e8 1c fb ff ff       	call   c001cd2a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d20e:	83 c4 20             	add    esp,0x20
c001d211:	eb 1a                	jmp    c001d22d <ATAPI::read(unsigned long long, int, void*)+0x77>
c001d213:	83 ec 0c             	sub    esp,0xc
c001d216:	56                   	push   esi
c001d217:	e8 5e fe ff ff       	call   c001d07a <ATAPI::detectMedia()>
c001d21c:	83 c4 10             	add    esp,0x10
c001d21f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d226:	75 aa                	jne    c001d1d2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d228:	b8 02 00 00 00       	mov    eax,0x2
c001d22d:	83 c4 1c             	add    esp,0x1c
c001d230:	5b                   	pop    ebx
c001d231:	5e                   	pop    esi
c001d232:	5f                   	pop    edi
c001d233:	5d                   	pop    ebp
c001d234:	c3                   	ret    
c001d235:	90                   	nop

c001d236 <AVX::open(int, int, void*)>:
c001d236:	83 ec 0c             	sub    esp,0xc
c001d239:	e8 0a 10 00 00       	call   c001e248 <avxInit>
c001d23e:	b8 00 00 00 00       	mov    eax,0x0
c001d243:	83 c4 0c             	add    esp,0xc
c001d246:	c3                   	ret    
c001d247:	90                   	nop

c001d248 <AVX::close(int, int, void*)>:
c001d248:	83 ec 0c             	sub    esp,0xc
c001d24b:	e8 f9 0f 00 00       	call   c001e249 <avxClose>
c001d250:	b8 00 00 00 00       	mov    eax,0x0
c001d255:	83 c4 0c             	add    esp,0xc
c001d258:	c3                   	ret    
c001d259:	90                   	nop

c001d25a <AVX::available()>:
c001d25a:	83 ec 0c             	sub    esp,0xc
c001d25d:	e8 de 0f 00 00       	call   c001e240 <avxDetect>
c001d262:	85 c0                	test   eax,eax
c001d264:	0f 95 c0             	setne  al
c001d267:	83 c4 0c             	add    esp,0xc
c001d26a:	c3                   	ret    
c001d26b:	90                   	nop

c001d26c <AVX::save(void*)>:
c001d26c:	83 ec 0c             	sub    esp,0xc
c001d26f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d273:	83 ec 0c             	sub    esp,0xc
c001d276:	50                   	push   eax
c001d277:	e8 ca 0f 00 00       	call   c001e246 <avxSave>
c001d27c:	83 c4 10             	add    esp,0x10
c001d27f:	90                   	nop
c001d280:	83 c4 0c             	add    esp,0xc
c001d283:	c3                   	ret    

c001d284 <AVX::load(void*)>:
c001d284:	83 ec 0c             	sub    esp,0xc
c001d287:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d28b:	83 ec 0c             	sub    esp,0xc
c001d28e:	50                   	push   eax
c001d28f:	e8 b3 0f 00 00       	call   c001e247 <avxLoad>
c001d294:	83 c4 10             	add    esp,0x10
c001d297:	90                   	nop
c001d298:	83 c4 0c             	add    esp,0xc
c001d29b:	c3                   	ret    

c001d29c <AVX::AVX()>:
c001d29c:	83 ec 0c             	sub    esp,0xc
c001d29f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2a3:	83 ec 08             	sub    esp,0x8
c001d2a6:	68 ec 25 02 c0       	push   0xc00225ec
c001d2ab:	50                   	push   eax
c001d2ac:	e8 1d 35 ff ff       	call   c00107ce <FPU::FPU(char const*)>
c001d2b1:	83 c4 10             	add    esp,0x10
c001d2b4:	ba fc 25 02 c0       	mov    edx,0xc00225fc
c001d2b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2bd:	89 10                	mov    DWORD PTR [eax],edx
c001d2bf:	90                   	nop
c001d2c0:	83 c4 0c             	add    esp,0xc
c001d2c3:	c3                   	ret    

c001d2c4 <MMX::available()>:
c001d2c4:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c001d2c9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d2cf:	83 e0 20             	and    eax,0x20
c001d2d2:	84 c0                	test   al,al
c001d2d4:	0f 95 c0             	setne  al
c001d2d7:	c3                   	ret    

c001d2d8 <MMX::open(int, int, void*)>:
c001d2d8:	83 ec 0c             	sub    esp,0xc
c001d2db:	e8 dc 0f 00 00       	call   c001e2bc <x87Init>
c001d2e0:	b8 00 00 00 00       	mov    eax,0x0
c001d2e5:	83 c4 0c             	add    esp,0xc
c001d2e8:	c3                   	ret    
c001d2e9:	90                   	nop

c001d2ea <MMX::close(int, int, void*)>:
c001d2ea:	83 ec 0c             	sub    esp,0xc
c001d2ed:	e8 e4 0f 00 00       	call   c001e2d6 <x87Close>
c001d2f2:	b8 00 00 00 00       	mov    eax,0x0
c001d2f7:	83 c4 0c             	add    esp,0xc
c001d2fa:	c3                   	ret    
c001d2fb:	90                   	nop

c001d2fc <MMX::save(void*)>:
c001d2fc:	83 ec 0c             	sub    esp,0xc
c001d2ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d303:	83 ec 0c             	sub    esp,0xc
c001d306:	50                   	push   eax
c001d307:	e8 a5 0f 00 00       	call   c001e2b1 <x87Save>
c001d30c:	83 c4 10             	add    esp,0x10
c001d30f:	90                   	nop
c001d310:	83 c4 0c             	add    esp,0xc
c001d313:	c3                   	ret    

c001d314 <MMX::load(void*)>:
c001d314:	83 ec 0c             	sub    esp,0xc
c001d317:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d31b:	83 ec 0c             	sub    esp,0xc
c001d31e:	50                   	push   eax
c001d31f:	e8 93 0f 00 00       	call   c001e2b7 <x87Load>
c001d324:	83 c4 10             	add    esp,0x10
c001d327:	90                   	nop
c001d328:	83 c4 0c             	add    esp,0xc
c001d32b:	c3                   	ret    

c001d32c <MMX::MMX()>:
c001d32c:	83 ec 0c             	sub    esp,0xc
c001d32f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d333:	83 ec 08             	sub    esp,0x8
c001d336:	68 2c 26 02 c0       	push   0xc002262c
c001d33b:	50                   	push   eax
c001d33c:	e8 8d 34 ff ff       	call   c00107ce <FPU::FPU(char const*)>
c001d341:	83 c4 10             	add    esp,0x10
c001d344:	ba 3c 26 02 c0       	mov    edx,0xc002263c
c001d349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d34d:	89 10                	mov    DWORD PTR [eax],edx
c001d34f:	90                   	nop
c001d350:	83 c4 0c             	add    esp,0xc
c001d353:	c3                   	ret    

c001d354 <SSE::open(int, int, void*)>:
c001d354:	83 ec 0c             	sub    esp,0xc
c001d357:	e8 1b 0f 00 00       	call   c001e277 <sseInit>
c001d35c:	b8 00 00 00 00       	mov    eax,0x0
c001d361:	83 c4 0c             	add    esp,0xc
c001d364:	c3                   	ret    
c001d365:	90                   	nop

c001d366 <SSE::close(int, int, void*)>:
c001d366:	83 ec 0c             	sub    esp,0xc
c001d369:	e8 19 0f 00 00       	call   c001e287 <sseClose>
c001d36e:	b8 00 00 00 00       	mov    eax,0x0
c001d373:	83 c4 0c             	add    esp,0xc
c001d376:	c3                   	ret    
c001d377:	90                   	nop

c001d378 <SSE::available()>:
c001d378:	83 ec 1c             	sub    esp,0x1c
c001d37b:	e8 d0 0e 00 00       	call   c001e250 <sseDetect>
c001d380:	85 c0                	test   eax,eax
c001d382:	0f 95 c0             	setne  al
c001d385:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d389:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d38d:	83 c4 1c             	add    esp,0x1c
c001d390:	c3                   	ret    
c001d391:	90                   	nop

c001d392 <SSE::save(void*)>:
c001d392:	83 ec 0c             	sub    esp,0xc
c001d395:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d399:	83 ec 0c             	sub    esp,0xc
c001d39c:	50                   	push   eax
c001d39d:	e8 c9 0e 00 00       	call   c001e26b <sseSave>
c001d3a2:	83 c4 10             	add    esp,0x10
c001d3a5:	90                   	nop
c001d3a6:	83 c4 0c             	add    esp,0xc
c001d3a9:	c3                   	ret    

c001d3aa <SSE::load(void*)>:
c001d3aa:	83 ec 0c             	sub    esp,0xc
c001d3ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d3b1:	83 ec 0c             	sub    esp,0xc
c001d3b4:	50                   	push   eax
c001d3b5:	e8 b7 0e 00 00       	call   c001e271 <sseLoad>
c001d3ba:	83 c4 10             	add    esp,0x10
c001d3bd:	90                   	nop
c001d3be:	83 c4 0c             	add    esp,0xc
c001d3c1:	c3                   	ret    

c001d3c2 <SSE::SSE()>:
c001d3c2:	83 ec 0c             	sub    esp,0xc
c001d3c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3c9:	83 ec 08             	sub    esp,0x8
c001d3cc:	68 6c 26 02 c0       	push   0xc002266c
c001d3d1:	50                   	push   eax
c001d3d2:	e8 f7 33 ff ff       	call   c00107ce <FPU::FPU(char const*)>
c001d3d7:	83 c4 10             	add    esp,0x10
c001d3da:	ba 7c 26 02 c0       	mov    edx,0xc002267c
c001d3df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3e3:	89 10                	mov    DWORD PTR [eax],edx
c001d3e5:	90                   	nop
c001d3e6:	83 c4 0c             	add    esp,0xc
c001d3e9:	c3                   	ret    

c001d3ea <x87::open(int, int, void*)>:
c001d3ea:	83 ec 0c             	sub    esp,0xc
c001d3ed:	e8 ca 0e 00 00       	call   c001e2bc <x87Init>
c001d3f2:	b8 00 00 00 00       	mov    eax,0x0
c001d3f7:	83 c4 0c             	add    esp,0xc
c001d3fa:	c3                   	ret    
c001d3fb:	90                   	nop

c001d3fc <x87::close(int, int, void*)>:
c001d3fc:	83 ec 0c             	sub    esp,0xc
c001d3ff:	e8 d2 0e 00 00       	call   c001e2d6 <x87Close>
c001d404:	b8 00 00 00 00       	mov    eax,0x0
c001d409:	83 c4 0c             	add    esp,0xc
c001d40c:	c3                   	ret    
c001d40d:	90                   	nop

c001d40e <x87::available()>:
c001d40e:	83 ec 0c             	sub    esp,0xc
c001d411:	e8 80 0e 00 00       	call   c001e296 <x87Detect>
c001d416:	85 c0                	test   eax,eax
c001d418:	0f 95 c0             	setne  al
c001d41b:	83 c4 0c             	add    esp,0xc
c001d41e:	c3                   	ret    
c001d41f:	90                   	nop

c001d420 <x87::save(void*)>:
c001d420:	83 ec 0c             	sub    esp,0xc
c001d423:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d427:	83 ec 0c             	sub    esp,0xc
c001d42a:	50                   	push   eax
c001d42b:	e8 81 0e 00 00       	call   c001e2b1 <x87Save>
c001d430:	83 c4 10             	add    esp,0x10
c001d433:	90                   	nop
c001d434:	83 c4 0c             	add    esp,0xc
c001d437:	c3                   	ret    

c001d438 <x87::load(void*)>:
c001d438:	83 ec 0c             	sub    esp,0xc
c001d43b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d43f:	83 ec 0c             	sub    esp,0xc
c001d442:	50                   	push   eax
c001d443:	e8 6f 0e 00 00       	call   c001e2b7 <x87Load>
c001d448:	83 c4 10             	add    esp,0x10
c001d44b:	90                   	nop
c001d44c:	83 c4 0c             	add    esp,0xc
c001d44f:	c3                   	ret    

c001d450 <x87::x87()>:
c001d450:	83 ec 0c             	sub    esp,0xc
c001d453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d457:	83 ec 08             	sub    esp,0x8
c001d45a:	68 ac 26 02 c0       	push   0xc00226ac
c001d45f:	50                   	push   eax
c001d460:	e8 69 33 ff ff       	call   c00107ce <FPU::FPU(char const*)>
c001d465:	83 c4 10             	add    esp,0x10
c001d468:	ba bc 26 02 c0       	mov    edx,0xc00226bc
c001d46d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d471:	89 10                	mov    DWORD PTR [eax],edx
c001d473:	90                   	nop
c001d474:	83 c4 0c             	add    esp,0xc
c001d477:	c3                   	ret    

c001d478 <APIC::disable()>:
c001d478:	90                   	nop
c001d479:	c3                   	ret    

c001d47a <APIC::close(int, int, void*)>:
c001d47a:	55                   	push   ebp
c001d47b:	89 e5                	mov    ebp,esp
c001d47d:	83 ec 08             	sub    esp,0x8
c001d480:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d483:	8b 00                	mov    eax,DWORD PTR [eax]
c001d485:	83 c0 3c             	add    eax,0x3c
c001d488:	8b 00                	mov    eax,DWORD PTR [eax]
c001d48a:	83 ec 0c             	sub    esp,0xc
c001d48d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d490:	ff d0                	call   eax
c001d492:	83 c4 10             	add    esp,0x10
c001d495:	b8 00 00 00 00       	mov    eax,0x0
c001d49a:	c9                   	leave  
c001d49b:	c3                   	ret    

c001d49c <IOAPIC::close(int, int, void*)>:
c001d49c:	b8 00 00 00 00       	mov    eax,0x0
c001d4a1:	c3                   	ret    

c001d4a2 <APIC::io_wait()>:
c001d4a2:	eb 00                	jmp    c001d4a4 <APIC::io_wait()+0x2>
c001d4a4:	eb 00                	jmp    c001d4a6 <APIC::io_wait()+0x4>
c001d4a6:	90                   	nop
c001d4a7:	c3                   	ret    

c001d4a8 <APIC::getBase()>:
c001d4a8:	55                   	push   ebp
c001d4a9:	89 e5                	mov    ebp,esp
c001d4ab:	83 ec 18             	sub    esp,0x18
c001d4ae:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c001d4b3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d4b9:	83 e0 08             	and    eax,0x8
c001d4bc:	84 c0                	test   al,al
c001d4be:	75 07                	jne    c001d4c7 <APIC::getBase()+0x1f>
c001d4c0:	b8 00 00 00 00       	mov    eax,0x0
c001d4c5:	eb 21                	jmp    c001d4e8 <APIC::getBase()+0x40>
c001d4c7:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c001d4cc:	83 ec 08             	sub    esp,0x8
c001d4cf:	6a 1b                	push   0x1b
c001d4d1:	50                   	push   eax
c001d4d2:	e8 ef dc fe ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c001d4d7:	83 c4 10             	add    esp,0x10
c001d4da:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d4dd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d4e0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d4e3:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d4e8:	c9                   	leave  
c001d4e9:	c3                   	ret    

c001d4ea <APIC::eoi(unsigned char)>:
c001d4ea:	55                   	push   ebp
c001d4eb:	89 e5                	mov    ebp,esp
c001d4ed:	83 ec 28             	sub    esp,0x28
c001d4f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d4f3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d4f6:	83 ec 0c             	sub    esp,0xc
c001d4f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d4fc:	e8 a7 ff ff ff       	call   c001d4a8 <APIC::getBase()>
c001d501:	83 c4 10             	add    esp,0x10
c001d504:	05 b0 00 00 00       	add    eax,0xb0
c001d509:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d50c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d50f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001d515:	90                   	nop
c001d516:	c9                   	leave  
c001d517:	c3                   	ret    

c001d518 <APIC::open(int, int, void*)>:
c001d518:	55                   	push   ebp
c001d519:	89 e5                	mov    ebp,esp
c001d51b:	57                   	push   edi
c001d51c:	56                   	push   esi
c001d51d:	53                   	push   ebx
c001d51e:	83 ec 1c             	sub    esp,0x1c
c001d521:	83 ec 0c             	sub    esp,0xc
c001d524:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d527:	e8 7c ff ff ff       	call   c001d4a8 <APIC::getBase()>
c001d52c:	83 c4 10             	add    esp,0x10
c001d52f:	05 f0 00 00 00       	add    eax,0xf0
c001d534:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d537:	83 ec 0c             	sub    esp,0xc
c001d53a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d53d:	e8 66 ff ff ff       	call   c001d4a8 <APIC::getBase()>
c001d542:	83 c4 10             	add    esp,0x10
c001d545:	89 c2                	mov    edx,eax
c001d547:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d54a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d550:	0f b6 f8             	movzx  edi,al
c001d553:	89 d0                	mov    eax,edx
c001d555:	ba 00 00 00 00       	mov    edx,0x0
c001d55a:	89 c1                	mov    ecx,eax
c001d55c:	80 e5 ff             	and    ch,0xff
c001d55f:	89 cb                	mov    ebx,ecx
c001d561:	0f b6 f2             	movzx  esi,dl
c001d564:	89 d8                	mov    eax,ebx
c001d566:	89 f2                	mov    edx,esi
c001d568:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d56b:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d56e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d572:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d576:	83 e0 00             	and    eax,0x0
c001d579:	09 d0                	or     eax,edx
c001d57b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d57f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d582:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d588:	8d 50 01             	lea    edx,[eax+0x1]
c001d58b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d58e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d594:	0f b6 d0             	movzx  edx,al
c001d597:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d59a:	83 c2 08             	add    edx,0x8
c001d59d:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d5a1:	0f b6 c9             	movzx  ecx,cl
c001d5a4:	81 c9 00 00 01 00    	or     ecx,0x10000
c001d5aa:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d5ae:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d5b1:	8b 00                	mov    eax,DWORD PTR [eax]
c001d5b3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d5b6:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001d5bd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d5c0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d5c3:	89 10                	mov    DWORD PTR [eax],edx
c001d5c5:	b8 00 00 00 00       	mov    eax,0x0
c001d5ca:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d5cd:	5b                   	pop    ebx
c001d5ce:	5e                   	pop    esi
c001d5cf:	5f                   	pop    edi
c001d5d0:	5d                   	pop    ebp
c001d5d1:	c3                   	ret    

c001d5d2 <IOAPIC::IOAPIC()>:
c001d5d2:	83 ec 0c             	sub    esp,0xc
c001d5d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5d9:	83 ec 08             	sub    esp,0x8
c001d5dc:	68 ec 26 02 c0       	push   0xc00226ec
c001d5e1:	50                   	push   eax
c001d5e2:	e8 f3 2e ff ff       	call   c00104da <Device::Device(char const*)>
c001d5e7:	83 c4 10             	add    esp,0x10
c001d5ea:	ba 14 28 02 c0       	mov    edx,0xc0022814
c001d5ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5f3:	89 10                	mov    DWORD PTR [eax],edx
c001d5f5:	90                   	nop
c001d5f6:	83 c4 0c             	add    esp,0xc
c001d5f9:	c3                   	ret    

c001d5fa <APIC::APIC()>:
c001d5fa:	53                   	push   ebx
c001d5fb:	83 ec 18             	sub    esp,0x18
c001d5fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d602:	83 ec 08             	sub    esp,0x8
c001d605:	68 f4 26 02 c0       	push   0xc00226f4
c001d60a:	50                   	push   eax
c001d60b:	e8 0c 36 ff ff       	call   c0010c1c <InterruptController::InterruptController(char const*)>
c001d610:	83 c4 10             	add    esp,0x10
c001d613:	ba cc 27 02 c0       	mov    edx,0xc00227cc
c001d618:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d61c:	89 10                	mov    DWORD PTR [eax],edx
c001d61e:	a0 80 52 02 c0       	mov    al,ds:0xc0025280
c001d623:	83 f0 01             	xor    eax,0x1
c001d626:	84 c0                	test   al,al
c001d628:	0f 84 96 00 00 00    	je     c001d6c4 <APIC::APIC()+0xca>
c001d62e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001d633:	a0 30 3d 02 c0       	mov    al,ds:0xc0023d30
c001d638:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001d63c:	73 7f                	jae    c001d6bd <APIC::APIC()+0xc3>
c001d63e:	83 ec 0c             	sub    esp,0xc
c001d641:	68 68 01 00 00       	push   0x168
c001d646:	e8 a5 17 ff ff       	call   c000edf0 <operator new(unsigned long)>
c001d64b:	83 c4 10             	add    esp,0x10
c001d64e:	89 c3                	mov    ebx,eax
c001d650:	83 ec 0c             	sub    esp,0xc
c001d653:	53                   	push   ebx
c001d654:	e8 79 ff ff ff       	call   c001d5d2 <IOAPIC::IOAPIC()>
c001d659:	83 c4 10             	add    esp,0x10
c001d65c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d660:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d665:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d669:	89 14 85 60 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdada0],edx
c001d670:	a1 40 52 02 c0       	mov    eax,ds:0xc0025240
c001d675:	40                   	inc    eax
c001d676:	a3 40 52 02 c0       	mov    ds:0xc0025240,eax
c001d67b:	a1 08 35 02 c0       	mov    eax,ds:0xc0023508
c001d680:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d686:	83 ec 08             	sub    esp,0x8
c001d689:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d68d:	50                   	push   eax
c001d68e:	e8 57 2c ff ff       	call   c00102ea <Device::addChild(Device*)>
c001d693:	83 c4 10             	add    esp,0x10
c001d696:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d69a:	8b 00                	mov    eax,DWORD PTR [eax]
c001d69c:	83 c0 08             	add    eax,0x8
c001d69f:	8b 00                	mov    eax,DWORD PTR [eax]
c001d6a1:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001d6a6:	6a 00                	push   0x0
c001d6a8:	6a 00                	push   0x0
c001d6aa:	52                   	push   edx
c001d6ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6af:	ff d0                	call   eax
c001d6b1:	83 c4 10             	add    esp,0x10
c001d6b4:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001d6b8:	e9 76 ff ff ff       	jmp    c001d633 <APIC::APIC()+0x39>
c001d6bd:	c6 05 80 52 02 c0 01 	mov    BYTE PTR ds:0xc0025280,0x1
c001d6c4:	90                   	nop
c001d6c5:	83 c4 18             	add    esp,0x18
c001d6c8:	5b                   	pop    ebx
c001d6c9:	c3                   	ret    

c001d6ca <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d6ca:	55                   	push   ebp
c001d6cb:	89 e5                	mov    ebp,esp
c001d6cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d6d0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d6d6:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d6d9:	72 1d                	jb     c001d6f8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d6db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d6de:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d6e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d6e7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d6ed:	01 d0                	add    eax,edx
c001d6ef:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d6f2:	73 04                	jae    c001d6f8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d6f4:	b0 01                	mov    al,0x1
c001d6f6:	eb 02                	jmp    c001d6fa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d6f8:	b0 00                	mov    al,0x0
c001d6fa:	5d                   	pop    ebp
c001d6fb:	c3                   	ret    

c001d6fc <IOAPIC::read(int)>:
c001d6fc:	55                   	push   ebp
c001d6fd:	89 e5                	mov    ebp,esp
c001d6ff:	83 ec 10             	sub    esp,0x10
c001d702:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d705:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d70b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d70e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d711:	0f b6 d0             	movzx  edx,al
c001d714:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d717:	89 10                	mov    DWORD PTR [eax],edx
c001d719:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d71c:	83 c0 10             	add    eax,0x10
c001d71f:	8b 00                	mov    eax,DWORD PTR [eax]
c001d721:	c9                   	leave  
c001d722:	c3                   	ret    
c001d723:	90                   	nop

c001d724 <IOAPIC::open(int, int, void*)>:
c001d724:	55                   	push   ebp
c001d725:	89 e5                	mov    ebp,esp
c001d727:	57                   	push   edi
c001d728:	56                   	push   esi
c001d729:	53                   	push   ebx
c001d72a:	83 ec 0c             	sub    esp,0xc
c001d72d:	83 ec 0c             	sub    esp,0xc
c001d730:	68 1f 27 02 c0       	push   0xc002271f
c001d735:	e8 a5 17 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001d73a:	83 c4 10             	add    esp,0x10
c001d73d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d740:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d743:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d749:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d74c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d752:	8b 14 85 60 3d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc2a0]
c001d759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d75c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d762:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d765:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d76b:	8b 14 85 e0 3d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc220]
c001d772:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d775:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d77b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d77e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d784:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d787:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d78d:	0f b6 f8             	movzx  edi,al
c001d790:	89 d0                	mov    eax,edx
c001d792:	ba 00 00 00 00       	mov    edx,0x0
c001d797:	89 c1                	mov    ecx,eax
c001d799:	80 e5 ff             	and    ch,0xff
c001d79c:	89 cb                	mov    ebx,ecx
c001d79e:	0f b6 f2             	movzx  esi,dl
c001d7a1:	89 d8                	mov    eax,ebx
c001d7a3:	89 f2                	mov    edx,esi
c001d7a5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d7a8:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d7ab:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d7af:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d7b3:	83 e0 00             	and    eax,0x0
c001d7b6:	09 d0                	or     eax,edx
c001d7b8:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d7bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7bf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d7c5:	8d 50 01             	lea    edx,[eax+0x1]
c001d7c8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d7cb:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d7d1:	0f b6 d0             	movzx  edx,al
c001d7d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7d7:	83 c2 08             	add    edx,0x8
c001d7da:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d7de:	0f b6 c9             	movzx  ecx,cl
c001d7e1:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d7e7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d7eb:	83 ec 08             	sub    esp,0x8
c001d7ee:	6a 01                	push   0x1
c001d7f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d7f3:	e8 04 ff ff ff       	call   c001d6fc <IOAPIC::read(int)>
c001d7f8:	83 c4 10             	add    esp,0x10
c001d7fb:	c1 f8 10             	sar    eax,0x10
c001d7fe:	0f b6 c0             	movzx  eax,al
c001d801:	8d 50 01             	lea    edx,[eax+0x1]
c001d804:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d807:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d80d:	b8 00 00 00 00       	mov    eax,0x0
c001d812:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d815:	5b                   	pop    ebx
c001d816:	5e                   	pop    esi
c001d817:	5f                   	pop    edi
c001d818:	5d                   	pop    ebp
c001d819:	c3                   	ret    

c001d81a <IOAPIC::write(int, int)>:
c001d81a:	55                   	push   ebp
c001d81b:	89 e5                	mov    ebp,esp
c001d81d:	83 ec 10             	sub    esp,0x10
c001d820:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d823:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d829:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d82c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d82f:	0f b6 d0             	movzx  edx,al
c001d832:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d835:	89 10                	mov    DWORD PTR [eax],edx
c001d837:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d83a:	8d 50 10             	lea    edx,[eax+0x10]
c001d83d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d840:	89 02                	mov    DWORD PTR [edx],eax
c001d842:	90                   	nop
c001d843:	c9                   	leave  
c001d844:	c3                   	ret    
c001d845:	90                   	nop

c001d846 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001d846:	55                   	push   ebp
c001d847:	89 e5                	mov    ebp,esp
c001d849:	83 ec 20             	sub    esp,0x20
c001d84c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d84f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d852:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d855:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d858:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d85b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d85e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d861:	88 d0                	mov    al,dl
c001d863:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001d866:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d86a:	83 c0 08             	add    eax,0x8
c001d86d:	01 c0                	add    eax,eax
c001d86f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d872:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d876:	83 c0 08             	add    eax,0x8
c001d879:	01 c0                	add    eax,eax
c001d87b:	40                   	inc    eax
c001d87c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001d87f:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d882:	50                   	push   eax
c001d883:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d886:	e8 71 fe ff ff       	call   c001d6fc <IOAPIC::read(int)>
c001d88b:	83 c4 08             	add    esp,0x8
c001d88e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d891:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001d898:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001d89b:	c1 e0 18             	shl    eax,0x18
c001d89e:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d8a1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d8a4:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d8a7:	52                   	push   edx
c001d8a8:	50                   	push   eax
c001d8a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d8ac:	e8 69 ff ff ff       	call   c001d81a <IOAPIC::write(int, int)>
c001d8b1:	83 c4 0c             	add    esp,0xc
c001d8b4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d8b7:	50                   	push   eax
c001d8b8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d8bb:	e8 3c fe ff ff       	call   c001d6fc <IOAPIC::read(int)>
c001d8c0:	83 c4 08             	add    esp,0x8
c001d8c3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d8c6:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001d8cd:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001d8d4:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001d8db:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001d8e2:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001d8e6:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001d8e9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001d8ec:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d8ef:	52                   	push   edx
c001d8f0:	50                   	push   eax
c001d8f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d8f4:	e8 21 ff ff ff       	call   c001d81a <IOAPIC::write(int, int)>
c001d8f9:	83 c4 0c             	add    esp,0xc
c001d8fc:	90                   	nop
c001d8fd:	c9                   	leave  
c001d8fe:	c3                   	ret    
c001d8ff:	90                   	nop

c001d900 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001d900:	55                   	push   ebp
c001d901:	89 e5                	mov    ebp,esp
c001d903:	56                   	push   esi
c001d904:	53                   	push   ebx
c001d905:	83 ec 20             	sub    esp,0x20
c001d908:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d90b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d90e:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001d912:	74 28                	je     c001d93c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d914:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001d918:	7f 12                	jg     c001d92c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001d91a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d91d:	05 60 2c 02 c0       	add    eax,0xc0022c60
c001d922:	8a 00                	mov    al,BYTE PTR [eax]
c001d924:	0f b6 c0             	movzx  eax,al
c001d927:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001d92a:	eb 10                	jmp    c001d93c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d92c:	83 ec 0c             	sub    esp,0xc
c001d92f:	68 30 27 02 c0       	push   0xc0022730
c001d934:	e8 3b 72 ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c001d939:	83 c4 10             	add    esp,0x10
c001d93c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d940:	a1 40 52 02 c0       	mov    eax,ds:0xc0025240
c001d945:	83 ec 08             	sub    esp,0x8
c001d948:	50                   	push   eax
c001d949:	68 68 27 02 c0       	push   0xc0022768
c001d94e:	e8 8c 15 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001d953:	83 c4 10             	add    esp,0x10
c001d956:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d95d:	a1 40 52 02 c0       	mov    eax,ds:0xc0025240
c001d962:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d965:	7d 58                	jge    c001d9bf <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001d967:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d96a:	8b 04 85 60 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdada0]
c001d971:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d974:	83 ec 08             	sub    esp,0x8
c001d977:	52                   	push   edx
c001d978:	50                   	push   eax
c001d979:	e8 4c fd ff ff       	call   c001d6ca <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001d97e:	83 c4 10             	add    esp,0x10
c001d981:	84 c0                	test   al,al
c001d983:	74 35                	je     c001d9ba <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001d985:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d988:	8b 1c 85 60 52 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdada0]
c001d98f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d992:	83 c0 20             	add    eax,0x20
c001d995:	0f b6 f0             	movzx  esi,al
c001d998:	e8 ce 64 ff ff       	call   c0013e6b <getCPUNumber()>
c001d99d:	99                   	cdq    
c001d99e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001d9a1:	0f b6 c9             	movzx  ecx,cl
c001d9a4:	83 ec 0c             	sub    esp,0xc
c001d9a7:	56                   	push   esi
c001d9a8:	52                   	push   edx
c001d9a9:	50                   	push   eax
c001d9aa:	51                   	push   ecx
c001d9ab:	53                   	push   ebx
c001d9ac:	e8 95 fe ff ff       	call   c001d846 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001d9b1:	83 c4 20             	add    esp,0x20
c001d9b4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001d9b8:	eb 05                	jmp    c001d9bf <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001d9ba:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001d9bd:	eb 9e                	jmp    c001d95d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001d9bf:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d9c2:	83 f0 01             	xor    eax,0x1
c001d9c5:	84 c0                	test   al,al
c001d9c7:	74 10                	je     c001d9d9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001d9c9:	83 ec 0c             	sub    esp,0xc
c001d9cc:	68 7f 27 02 c0       	push   0xc002277f
c001d9d1:	e8 9e 71 ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c001d9d6:	83 c4 10             	add    esp,0x10
c001d9d9:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001d9dd:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001d9e4:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001d9e8:	7f 65                	jg     c001da4f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001d9ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9ed:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d9f0:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d9f7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d9fa:	01 ca                	add    edx,ecx
c001d9fc:	83 c2 54             	add    edx,0x54
c001d9ff:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001da03:	85 c0                	test   eax,eax
c001da05:	75 43                	jne    c001da4a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001da07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da0a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001da0d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001da14:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001da17:	01 ca                	add    edx,ecx
c001da19:	8d 4a 54             	lea    ecx,[edx+0x54]
c001da1c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001da1f:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001da23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da26:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001da29:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001da30:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001da33:	01 ca                	add    edx,ecx
c001da35:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001da3b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001da3e:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001da42:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da45:	83 e8 20             	sub    eax,0x20
c001da48:	eb 1a                	jmp    c001da64 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001da4a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001da4d:	eb 95                	jmp    c001d9e4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001da4f:	83 ec 0c             	sub    esp,0xc
c001da52:	68 8c 27 02 c0       	push   0xc002278c
c001da57:	e8 18 71 ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c001da5c:	83 c4 10             	add    esp,0x10
c001da5f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001da64:	8d 65 f8             	lea    esp,[ebp-0x8]
c001da67:	5b                   	pop    ebx
c001da68:	5e                   	pop    esi
c001da69:	5d                   	pop    ebp
c001da6a:	c3                   	ret    
c001da6b:	90                   	nop

c001da6c <PIC::disable()>:
c001da6c:	55                   	push   ebp
c001da6d:	89 e5                	mov    ebp,esp
c001da6f:	83 ec 10             	sub    esp,0x10
c001da72:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001da78:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001da7c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001da7f:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001da83:	ee                   	out    dx,al
c001da84:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001da8a:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001da8e:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001da91:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001da95:	ee                   	out    dx,al
c001da96:	90                   	nop
c001da97:	c9                   	leave  
c001da98:	c3                   	ret    
c001da99:	90                   	nop

c001da9a <PIC::close(int, int, void*)>:
c001da9a:	55                   	push   ebp
c001da9b:	89 e5                	mov    ebp,esp
c001da9d:	83 ec 08             	sub    esp,0x8
c001daa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001daa3:	8b 00                	mov    eax,DWORD PTR [eax]
c001daa5:	83 c0 3c             	add    eax,0x3c
c001daa8:	8b 00                	mov    eax,DWORD PTR [eax]
c001daaa:	83 ec 0c             	sub    esp,0xc
c001daad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dab0:	ff d0                	call   eax
c001dab2:	83 c4 10             	add    esp,0x10
c001dab5:	b8 00 00 00 00       	mov    eax,0x0
c001daba:	c9                   	leave  
c001dabb:	c3                   	ret    

c001dabc <PIC::PIC()>:
c001dabc:	83 ec 0c             	sub    esp,0xc
c001dabf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dac3:	83 ec 08             	sub    esp,0x8
c001dac6:	68 38 28 02 c0       	push   0xc0022838
c001dacb:	50                   	push   eax
c001dacc:	e8 4b 31 ff ff       	call   c0010c1c <InterruptController::InterruptController(char const*)>
c001dad1:	83 c4 10             	add    esp,0x10
c001dad4:	ba 64 28 02 c0       	mov    edx,0xc0022864
c001dad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dadd:	89 10                	mov    DWORD PTR [eax],edx
c001dadf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dae3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dae9:	0f b6 d0             	movzx  edx,al
c001daec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001daf0:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001daf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dafb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001db01:	0f b6 d0             	movzx  edx,al
c001db04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db08:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001db0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db11:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001db17:	8d 50 01             	lea    edx,[eax+0x1]
c001db1a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001db1e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001db24:	0f b6 d0             	movzx  edx,al
c001db27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db2b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001db2f:	83 e1 3f             	and    ecx,0x3f
c001db32:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001db36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db3a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001db40:	0f b6 d0             	movzx  edx,al
c001db43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db47:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001db4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db52:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001db58:	0f b6 d0             	movzx  edx,al
c001db5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db5f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001db64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db68:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001db6e:	8d 50 01             	lea    edx,[eax+0x1]
c001db71:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001db75:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001db7b:	0f b6 d0             	movzx  edx,al
c001db7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db82:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001db86:	83 e1 3f             	and    ecx,0x3f
c001db89:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001db8d:	90                   	nop
c001db8e:	83 c4 0c             	add    esp,0xc
c001db91:	c3                   	ret    

c001db92 <PIC::ioWait()>:
c001db92:	eb 00                	jmp    c001db94 <PIC::ioWait()+0x2>
c001db94:	eb 00                	jmp    c001db96 <PIC::ioWait()+0x4>
c001db96:	90                   	nop
c001db97:	c3                   	ret    

c001db98 <PIC::getIRQReg(int)>:
c001db98:	55                   	push   ebp
c001db99:	89 e5                	mov    ebp,esp
c001db9b:	83 ec 10             	sub    esp,0x10
c001db9e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dba1:	0f b6 c0             	movzx  eax,al
c001dba4:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001dbaa:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001dbad:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dbb0:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dbb4:	ee                   	out    dx,al
c001dbb5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dbb8:	0f b6 c0             	movzx  eax,al
c001dbbb:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001dbc1:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001dbc4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dbc7:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dbcb:	ee                   	out    dx,al
c001dbcc:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001dbd2:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001dbd6:	89 c2                	mov    edx,eax
c001dbd8:	ec                   	in     al,dx
c001dbd9:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001dbdc:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dbdf:	0f b6 c0             	movzx  eax,al
c001dbe2:	c1 e0 08             	shl    eax,0x8
c001dbe5:	89 c1                	mov    ecx,eax
c001dbe7:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001dbed:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001dbf1:	89 c2                	mov    edx,eax
c001dbf3:	ec                   	in     al,dx
c001dbf4:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001dbf7:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001dbfa:	0f b6 c0             	movzx  eax,al
c001dbfd:	09 c8                	or     eax,ecx
c001dbff:	c9                   	leave  
c001dc00:	c3                   	ret    
c001dc01:	90                   	nop

c001dc02 <PIC::eoi(unsigned char)>:
c001dc02:	55                   	push   ebp
c001dc03:	89 e5                	mov    ebp,esp
c001dc05:	83 ec 14             	sub    esp,0x14
c001dc08:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dc0b:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001dc0e:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001dc12:	75 1e                	jne    c001dc32 <PIC::eoi(unsigned char)+0x30>
c001dc14:	6a 0b                	push   0xb
c001dc16:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc19:	e8 7a ff ff ff       	call   c001db98 <PIC::getIRQReg(int)>
c001dc1e:	83 c4 08             	add    esp,0x8
c001dc21:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001dc25:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001dc29:	25 80 00 00 00       	and    eax,0x80
c001dc2e:	85 c0                	test   eax,eax
c001dc30:	74 5f                	je     c001dc91 <PIC::eoi(unsigned char)+0x8f>
c001dc32:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001dc36:	75 2d                	jne    c001dc65 <PIC::eoi(unsigned char)+0x63>
c001dc38:	6a 0b                	push   0xb
c001dc3a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc3d:	e8 56 ff ff ff       	call   c001db98 <PIC::getIRQReg(int)>
c001dc42:	83 c4 08             	add    esp,0x8
c001dc45:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001dc49:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dc4c:	66 85 c0             	test   ax,ax
c001dc4f:	78 14                	js     c001dc65 <PIC::eoi(unsigned char)+0x63>
c001dc51:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001dc57:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001dc5b:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dc5e:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001dc62:	ee                   	out    dx,al
c001dc63:	eb 2d                	jmp    c001dc92 <PIC::eoi(unsigned char)+0x90>
c001dc65:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001dc69:	76 12                	jbe    c001dc7d <PIC::eoi(unsigned char)+0x7b>
c001dc6b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001dc71:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001dc75:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dc78:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dc7c:	ee                   	out    dx,al
c001dc7d:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001dc83:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001dc87:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dc8a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dc8e:	ee                   	out    dx,al
c001dc8f:	eb 01                	jmp    c001dc92 <PIC::eoi(unsigned char)+0x90>
c001dc91:	90                   	nop
c001dc92:	c9                   	leave  
c001dc93:	c3                   	ret    

c001dc94 <PIC::remap()>:
c001dc94:	55                   	push   ebp
c001dc95:	89 e5                	mov    ebp,esp
c001dc97:	83 ec 48             	sub    esp,0x48
c001dc9a:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001dca1:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001dca8:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001dcae:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001dcb1:	89 c2                	mov    edx,eax
c001dcb3:	ec                   	in     al,dx
c001dcb4:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001dcb7:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001dcba:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001dcbd:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001dcc3:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001dcc6:	89 c2                	mov    edx,eax
c001dcc8:	ec                   	in     al,dx
c001dcc9:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001dccc:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001dccf:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001dcd2:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001dcd8:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001dcdc:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001dcdf:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001dce2:	ee                   	out    dx,al
c001dce3:	83 ec 0c             	sub    esp,0xc
c001dce6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dce9:	e8 a4 fe ff ff       	call   c001db92 <PIC::ioWait()>
c001dcee:	83 c4 10             	add    esp,0x10
c001dcf1:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001dcf7:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001dcfb:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001dcfe:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001dd01:	ee                   	out    dx,al
c001dd02:	83 ec 0c             	sub    esp,0xc
c001dd05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dd08:	e8 85 fe ff ff       	call   c001db92 <PIC::ioWait()>
c001dd0d:	83 c4 10             	add    esp,0x10
c001dd10:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001dd13:	0f b6 c0             	movzx  eax,al
c001dd16:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001dd1c:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001dd1f:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001dd22:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001dd25:	ee                   	out    dx,al
c001dd26:	83 ec 0c             	sub    esp,0xc
c001dd29:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dd2c:	e8 61 fe ff ff       	call   c001db92 <PIC::ioWait()>
c001dd31:	83 c4 10             	add    esp,0x10
c001dd34:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dd37:	0f b6 c0             	movzx  eax,al
c001dd3a:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001dd40:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001dd43:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001dd46:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001dd49:	ee                   	out    dx,al
c001dd4a:	83 ec 0c             	sub    esp,0xc
c001dd4d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dd50:	e8 3d fe ff ff       	call   c001db92 <PIC::ioWait()>
c001dd55:	83 c4 10             	add    esp,0x10
c001dd58:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001dd5e:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001dd62:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001dd65:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001dd68:	ee                   	out    dx,al
c001dd69:	83 ec 0c             	sub    esp,0xc
c001dd6c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dd6f:	e8 1e fe ff ff       	call   c001db92 <PIC::ioWait()>
c001dd74:	83 c4 10             	add    esp,0x10
c001dd77:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001dd7d:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001dd81:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001dd84:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001dd87:	ee                   	out    dx,al
c001dd88:	83 ec 0c             	sub    esp,0xc
c001dd8b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dd8e:	e8 ff fd ff ff       	call   c001db92 <PIC::ioWait()>
c001dd93:	83 c4 10             	add    esp,0x10
c001dd96:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001dd9c:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001dda0:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001dda3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001dda6:	ee                   	out    dx,al
c001dda7:	83 ec 0c             	sub    esp,0xc
c001ddaa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ddad:	e8 e0 fd ff ff       	call   c001db92 <PIC::ioWait()>
c001ddb2:	83 c4 10             	add    esp,0x10
c001ddb5:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001ddbb:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001ddbf:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001ddc2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ddc5:	ee                   	out    dx,al
c001ddc6:	83 ec 0c             	sub    esp,0xc
c001ddc9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ddcc:	e8 c1 fd ff ff       	call   c001db92 <PIC::ioWait()>
c001ddd1:	83 c4 10             	add    esp,0x10
c001ddd4:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001ddd8:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001ddde:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001dde1:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001dde4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001dde7:	ee                   	out    dx,al
c001dde8:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001ddec:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001ddf2:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001ddf5:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001ddf8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ddfb:	ee                   	out    dx,al
c001ddfc:	90                   	nop
c001ddfd:	c9                   	leave  
c001ddfe:	c3                   	ret    
c001ddff:	90                   	nop

c001de00 <PIC::open(int, int, void*)>:
c001de00:	55                   	push   ebp
c001de01:	89 e5                	mov    ebp,esp
c001de03:	83 ec 18             	sub    esp,0x18
c001de06:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001de0c:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001de10:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001de13:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001de17:	ee                   	out    dx,al
c001de18:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001de1e:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001de22:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001de25:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001de29:	ee                   	out    dx,al
c001de2a:	83 ec 0c             	sub    esp,0xc
c001de2d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de30:	e8 5f fe ff ff       	call   c001dc94 <PIC::remap()>
c001de35:	83 c4 10             	add    esp,0x10
c001de38:	b8 00 00 00 00       	mov    eax,0x0
c001de3d:	c9                   	leave  
c001de3e:	c3                   	ret    
c001de3f:	90                   	nop

c001de40 <APICTimer::close(int, int, void*)>:
c001de40:	b8 00 00 00 00       	mov    eax,0x0
c001de45:	c3                   	ret    

c001de46 <apicTimerHandler(regs*, void*)>:
c001de46:	83 ec 0c             	sub    esp,0xc
c001de49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de4d:	8b 00                	mov    eax,DWORD PTR [eax]
c001de4f:	99                   	cdq    
c001de50:	52                   	push   edx
c001de51:	50                   	push   eax
c001de52:	6a 00                	push   0x0
c001de54:	68 00 ca 9a 3b       	push   0x3b9aca00
c001de59:	e8 6e 07 00 00       	call   c001e5cc <__udivdi3>
c001de5e:	83 c4 10             	add    esp,0x10
c001de61:	83 ec 08             	sub    esp,0x8
c001de64:	52                   	push   edx
c001de65:	50                   	push   eax
c001de66:	e8 1c 45 ff ff       	call   c0012387 <timerHandler(unsigned long long)>
c001de6b:	83 c4 10             	add    esp,0x10
c001de6e:	90                   	nop
c001de6f:	83 c4 0c             	add    esp,0xc
c001de72:	c3                   	ret    
c001de73:	90                   	nop

c001de74 <APICTimer::write(int)>:
c001de74:	53                   	push   ebx
c001de75:	83 ec 28             	sub    esp,0x28
c001de78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de7c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001de80:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001de86:	e8 e3 5f ff ff       	call   c0013e6e <thisCPU()>
c001de8b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001de91:	83 ec 0c             	sub    esp,0xc
c001de94:	50                   	push   eax
c001de95:	e8 0e f6 ff ff       	call   c001d4a8 <APIC::getBase()>
c001de9a:	83 c4 10             	add    esp,0x10
c001de9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dea1:	a1 f0 3a 02 c0       	mov    eax,ds:0xc0023af0
c001dea6:	8b 15 f4 3a 02 c0    	mov    edx,DWORD PTR ds:0xc0023af4
c001deac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001deb0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001deb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001deb8:	05 e0 03 00 00       	add    eax,0x3e0
c001debd:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001dec3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dec7:	05 80 03 00 00       	add    eax,0x380
c001decc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001ded2:	fb                   	sti    
c001ded3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ded7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dedb:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001dee0:	83 d2 00             	adc    edx,0x0
c001dee3:	89 c1                	mov    ecx,eax
c001dee5:	89 d3                	mov    ebx,edx
c001dee7:	a1 f0 3a 02 c0       	mov    eax,ds:0xc0023af0
c001deec:	8b 15 f4 3a 02 c0    	mov    edx,DWORD PTR ds:0xc0023af4
c001def2:	39 c8                	cmp    eax,ecx
c001def4:	89 d0                	mov    eax,edx
c001def6:	19 d8                	sbb    eax,ebx
c001def8:	73 02                	jae    c001defc <APICTimer::write(int)+0x88>
c001defa:	eb d7                	jmp    c001ded3 <APICTimer::write(int)+0x5f>
c001defc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001df00:	05 20 03 00 00       	add    eax,0x320
c001df05:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001df0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001df0f:	05 90 03 00 00       	add    eax,0x390
c001df14:	8b 00                	mov    eax,DWORD PTR [eax]
c001df16:	f7 d0                	not    eax
c001df18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001df1c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001df20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df24:	ba 00 00 00 00       	mov    edx,0x0
c001df29:	f7 f3                	div    ebx
c001df2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001df2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df33:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001df39:	0d 00 00 02 00       	or     eax,0x20000
c001df3e:	89 c2                	mov    edx,eax
c001df40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001df44:	05 20 03 00 00       	add    eax,0x320
c001df49:	89 10                	mov    DWORD PTR [eax],edx
c001df4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001df4f:	05 e0 03 00 00       	add    eax,0x3e0
c001df54:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001df5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001df5e:	05 80 03 00 00       	add    eax,0x380
c001df63:	89 c2                	mov    edx,eax
c001df65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001df69:	89 02                	mov    DWORD PTR [edx],eax
c001df6b:	90                   	nop
c001df6c:	83 c4 28             	add    esp,0x28
c001df6f:	5b                   	pop    ebx
c001df70:	c3                   	ret    
c001df71:	90                   	nop

c001df72 <APICTimer::open(int, int, void*)>:
c001df72:	57                   	push   edi
c001df73:	56                   	push   esi
c001df74:	53                   	push   ebx
c001df75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df79:	8b 00                	mov    eax,DWORD PTR [eax]
c001df7b:	83 c0 24             	add    eax,0x24
c001df7e:	8b 00                	mov    eax,DWORD PTR [eax]
c001df80:	83 ec 08             	sub    esp,0x8
c001df83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df8b:	ff d0                	call   eax
c001df8d:	83 c4 10             	add    esp,0x10
c001df90:	e8 d9 5e ff ff       	call   c0013e6e <thisCPU()>
c001df95:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001df9b:	83 ec 0c             	sub    esp,0xc
c001df9e:	50                   	push   eax
c001df9f:	e8 04 f5 ff ff       	call   c001d4a8 <APIC::getBase()>
c001dfa4:	83 c4 10             	add    esp,0x10
c001dfa7:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001dfad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfb1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dfb7:	0f b6 f8             	movzx  edi,al
c001dfba:	89 d0                	mov    eax,edx
c001dfbc:	ba 00 00 00 00       	mov    edx,0x0
c001dfc1:	89 c1                	mov    ecx,eax
c001dfc3:	80 e5 ff             	and    ch,0xff
c001dfc6:	89 cb                	mov    ebx,ecx
c001dfc8:	0f b6 f2             	movzx  esi,dl
c001dfcb:	89 d8                	mov    eax,ebx
c001dfcd:	89 f2                	mov    edx,esi
c001dfcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dfd3:	8d 5f 08             	lea    ebx,[edi+0x8]
c001dfd6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001dfda:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001dfde:	83 e0 00             	and    eax,0x0
c001dfe1:	09 d0                	or     eax,edx
c001dfe3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001dfe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfeb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dff1:	8d 50 01             	lea    edx,[eax+0x1]
c001dff4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dff8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001dffe:	0f b6 d0             	movzx  edx,al
c001e001:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e005:	83 c2 08             	add    edx,0x8
c001e008:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e00c:	0f b6 c9             	movzx  ecx,cl
c001e00f:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e015:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e01d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e021:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e02b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e02f:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e035:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e039:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e03f:	83 ec 0c             	sub    esp,0xc
c001e042:	51                   	push   ecx
c001e043:	6a 01                	push   0x1
c001e045:	68 46 de 01 c0       	push   0xc001de46
c001e04a:	52                   	push   edx
c001e04b:	50                   	push   eax
c001e04c:	e8 ed 21 ff ff       	call   c001023e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e051:	83 c4 20             	add    esp,0x20
c001e054:	89 c2                	mov    edx,eax
c001e056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e05a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e060:	b8 00 00 00 00       	mov    eax,0x0
c001e065:	5b                   	pop    ebx
c001e066:	5e                   	pop    esi
c001e067:	5f                   	pop    edi
c001e068:	c3                   	ret    
c001e069:	90                   	nop

c001e06a <APICTimer::APICTimer()>:
c001e06a:	83 ec 0c             	sub    esp,0xc
c001e06d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e071:	83 ec 08             	sub    esp,0x8
c001e074:	68 a4 28 02 c0       	push   0xc00228a4
c001e079:	50                   	push   eax
c001e07a:	e8 79 42 ff ff       	call   c00122f8 <Timer::Timer(char const*)>
c001e07f:	83 c4 10             	add    esp,0x10
c001e082:	ba b8 28 02 c0       	mov    edx,0xc00228b8
c001e087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e08b:	89 10                	mov    DWORD PTR [eax],edx
c001e08d:	90                   	nop
c001e08e:	83 c4 0c             	add    esp,0xc
c001e091:	c3                   	ret    

c001e092 <PIT::write(int)>:
c001e092:	83 ec 10             	sub    esp,0x10
c001e095:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e099:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e09d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e0a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e0a7:	a3 84 52 02 c0       	mov    ds:0xc0025284,eax
c001e0ac:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e0b1:	99                   	cdq    
c001e0b2:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e0b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e0ba:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e0c1:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e0c6:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e0ca:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e0cf:	ee                   	out    dx,al
c001e0d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e0d4:	0f b6 c0             	movzx  eax,al
c001e0d7:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e0de:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e0e2:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e0e6:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e0eb:	ee                   	out    dx,al
c001e0ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e0f0:	c1 f8 08             	sar    eax,0x8
c001e0f3:	0f b6 c0             	movzx  eax,al
c001e0f6:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e0fd:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e101:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e105:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e10a:	ee                   	out    dx,al
c001e10b:	90                   	nop
c001e10c:	83 c4 10             	add    esp,0x10
c001e10f:	c3                   	ret    

c001e110 <pitHandler(regs*, void*)>:
c001e110:	83 ec 0c             	sub    esp,0xc
c001e113:	a1 84 52 02 c0       	mov    eax,ds:0xc0025284
c001e118:	99                   	cdq    
c001e119:	52                   	push   edx
c001e11a:	50                   	push   eax
c001e11b:	6a 00                	push   0x0
c001e11d:	68 00 ca 9a 3b       	push   0x3b9aca00
c001e122:	e8 a5 04 00 00       	call   c001e5cc <__udivdi3>
c001e127:	83 c4 10             	add    esp,0x10
c001e12a:	83 ec 08             	sub    esp,0x8
c001e12d:	52                   	push   edx
c001e12e:	50                   	push   eax
c001e12f:	e8 53 42 ff ff       	call   c0012387 <timerHandler(unsigned long long)>
c001e134:	83 c4 10             	add    esp,0x10
c001e137:	90                   	nop
c001e138:	83 c4 0c             	add    esp,0xc
c001e13b:	c3                   	ret    

c001e13c <PIT::open(int, int, void*)>:
c001e13c:	83 ec 0c             	sub    esp,0xc
c001e13f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e143:	8b 00                	mov    eax,DWORD PTR [eax]
c001e145:	83 c0 24             	add    eax,0x24
c001e148:	8b 00                	mov    eax,DWORD PTR [eax]
c001e14a:	83 ec 08             	sub    esp,0x8
c001e14d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e155:	ff d0                	call   eax
c001e157:	83 c4 10             	add    esp,0x10
c001e15a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e15e:	83 ec 0c             	sub    esp,0xc
c001e161:	6a 00                	push   0x0
c001e163:	6a 01                	push   0x1
c001e165:	68 10 e1 01 c0       	push   0xc001e110
c001e16a:	6a 00                	push   0x0
c001e16c:	50                   	push   eax
c001e16d:	e8 cc 20 ff ff       	call   c001023e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e172:	83 c4 20             	add    esp,0x20
c001e175:	89 c2                	mov    edx,eax
c001e177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e17b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e181:	b8 00 00 00 00       	mov    eax,0x0
c001e186:	83 c4 0c             	add    esp,0xc
c001e189:	c3                   	ret    

c001e18a <PIT::close(int, int, void*)>:
c001e18a:	83 ec 0c             	sub    esp,0xc
c001e18d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e191:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e19b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e19f:	6a 01                	push   0x1
c001e1a1:	68 10 e1 01 c0       	push   0xc001e110
c001e1a6:	6a 00                	push   0x0
c001e1a8:	50                   	push   eax
c001e1a9:	e8 ee 20 ff ff       	call   c001029c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e1ae:	83 c4 10             	add    esp,0x10
c001e1b1:	b8 00 00 00 00       	mov    eax,0x0
c001e1b6:	83 c4 0c             	add    esp,0xc
c001e1b9:	c3                   	ret    

c001e1ba <PIT::PIT()>:
c001e1ba:	83 ec 0c             	sub    esp,0xc
c001e1bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1c1:	83 ec 08             	sub    esp,0x8
c001e1c4:	68 e0 28 02 c0       	push   0xc00228e0
c001e1c9:	50                   	push   eax
c001e1ca:	e8 29 41 ff ff       	call   c00122f8 <Timer::Timer(char const*)>
c001e1cf:	83 c4 10             	add    esp,0x10
c001e1d2:	ba 08 29 02 c0       	mov    edx,0xc0022908
c001e1d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1db:	89 10                	mov    DWORD PTR [eax],edx
c001e1dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e1e7:	0f b6 d0             	movzx  edx,al
c001e1ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1ee:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e1f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e1ff:	0f b6 d0             	movzx  edx,al
c001e202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e206:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e20b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e20f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e215:	8d 50 01             	lea    edx,[eax+0x1]
c001e218:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e21c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e222:	0f b6 d0             	movzx  edx,al
c001e225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e229:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e22d:	83 e1 3f             	and    ecx,0x3f
c001e230:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e234:	90                   	nop
c001e235:	83 c4 0c             	add    esp,0xc
c001e238:	c3                   	ret    
c001e239:	66 90                	xchg   ax,ax
c001e23b:	66 90                	xchg   ax,ax
c001e23d:	66 90                	xchg   ax,ax
c001e23f:	90                   	nop

c001e240 <avxDetect>:
c001e240:	b8 00 00 00 00       	mov    eax,0x0
c001e245:	c3                   	ret    

c001e246 <avxSave>:
c001e246:	c3                   	ret    

c001e247 <avxLoad>:
c001e247:	c3                   	ret    

c001e248 <avxInit>:
c001e248:	c3                   	ret    

c001e249 <avxClose>:
c001e249:	c3                   	ret    
c001e24a:	66 90                	xchg   ax,ax
c001e24c:	66 90                	xchg   ax,ax
c001e24e:	66 90                	xchg   ax,ax

c001e250 <sseDetect>:
c001e250:	b8 01 00 00 00       	mov    eax,0x1
c001e255:	0f a2                	cpuid  
c001e257:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e25d:	74 06                	je     c001e265 <sseDetect.noSSE>
c001e25f:	b8 01 00 00 00       	mov    eax,0x1
c001e264:	c3                   	ret    

c001e265 <sseDetect.noSSE>:
c001e265:	b8 00 00 00 00       	mov    eax,0x0
c001e26a:	c3                   	ret    

c001e26b <sseSave>:
c001e26b:	0f ae 44 24 08       	fxsave [esp+0x8]
c001e270:	c3                   	ret    

c001e271 <sseLoad>:
c001e271:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001e276:	c3                   	ret    

c001e277 <sseInit>:
c001e277:	e8 40 00 00 00       	call   c001e2bc <x87Init>
c001e27c:	0f 20 e0             	mov    eax,cr4
c001e27f:	66 0d 00 06          	or     ax,0x600
c001e283:	0f 22 e0             	mov    cr4,eax
c001e286:	c3                   	ret    

c001e287 <sseClose>:
c001e287:	c3                   	ret    
c001e288:	66 90                	xchg   ax,ax
c001e28a:	66 90                	xchg   ax,ax
c001e28c:	66 90                	xchg   ax,ax
c001e28e:	66 90                	xchg   ax,ax

c001e290 <value_37F>:
c001e290:	7f 03                	jg     c001e295 <value_37A+0x1>

c001e292 <value_37E>:
c001e292:	7e 03                	jle    c001e297 <x87Detect+0x1>

c001e294 <value_37A>:
c001e294:	7a 03                	jp     c001e299 <x87Detect+0x3>

c001e296 <x87Detect>:
c001e296:	b8 01 00 00 00       	mov    eax,0x1
c001e29b:	0f a2                	cpuid  
c001e29d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e2a3:	74 06                	je     c001e2ab <x87Detect.nox87>
c001e2a5:	b8 01 00 00 00       	mov    eax,0x1
c001e2aa:	c3                   	ret    

c001e2ab <x87Detect.nox87>:
c001e2ab:	b8 00 00 00 00       	mov    eax,0x0
c001e2b0:	c3                   	ret    

c001e2b1 <x87Save>:
c001e2b1:	9b dd 74 24 08       	fsave  [esp+0x8]
c001e2b6:	c3                   	ret    

c001e2b7 <x87Load>:
c001e2b7:	dd 64 24 08          	frstor [esp+0x8]
c001e2bb:	c3                   	ret    

c001e2bc <x87Init>:
c001e2bc:	9b db e3             	finit  
c001e2bf:	0f 20 c0             	mov    eax,cr0
c001e2c2:	66 25 fb ff          	and    ax,0xfffb
c001e2c6:	66 0d 22 00          	or     ax,0x22
c001e2ca:	0f 22 c0             	mov    cr0,eax
c001e2cd:	0f 06                	clts   
c001e2cf:	d9 2d 94 e2 01 c0    	fldcw  WORD PTR ds:0xc001e294
c001e2d5:	c3                   	ret    

c001e2d6 <x87Close>:
c001e2d6:	c3                   	ret    
c001e2d7:	90                   	nop

c001e2d8 <__do_global_ctors_aux>:
c001e2d8:	a1 b8 f3 01 c0       	mov    eax,ds:0xc001f3b8
c001e2dd:	83 f8 ff             	cmp    eax,0xffffffff
c001e2e0:	74 1a                	je     c001e2fc <__do_global_ctors_aux+0x24>
c001e2e2:	55                   	push   ebp
c001e2e3:	89 e5                	mov    ebp,esp
c001e2e5:	53                   	push   ebx
c001e2e6:	52                   	push   edx
c001e2e7:	bb b8 f3 01 c0       	mov    ebx,0xc001f3b8
c001e2ec:	ff d0                	call   eax
c001e2ee:	83 eb 04             	sub    ebx,0x4
c001e2f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e2f3:	83 f8 ff             	cmp    eax,0xffffffff
c001e2f6:	75 f4                	jne    c001e2ec <__do_global_ctors_aux+0x14>
c001e2f8:	58                   	pop    eax
c001e2f9:	5b                   	pop    ebx
c001e2fa:	5d                   	pop    ebp
c001e2fb:	c3                   	ret    
c001e2fc:	c3                   	ret    
c001e2fd:	66 90                	xchg   ax,ax
c001e2ff:	90                   	nop

c001e300 <__divdi3>:
c001e300:	55                   	push   ebp
c001e301:	57                   	push   edi
c001e302:	56                   	push   esi
c001e303:	53                   	push   ebx
c001e304:	83 ec 1c             	sub    esp,0x1c
c001e307:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e30b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e30f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e312:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e316:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e31a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e31e:	85 db                	test   ebx,ebx
c001e320:	0f 88 8e 00 00 00    	js     c001e3b4 <__divdi3+0xb4>
c001e326:	89 dd                	mov    ebp,ebx
c001e328:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e330:	89 d3                	mov    ebx,edx
c001e332:	85 d2                	test   edx,edx
c001e334:	79 0d                	jns    c001e343 <__divdi3+0x43>
c001e336:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e33a:	f7 d8                	neg    eax
c001e33c:	83 d2 00             	adc    edx,0x0
c001e33f:	f7 da                	neg    edx
c001e341:	89 d3                	mov    ebx,edx
c001e343:	89 c7                	mov    edi,eax
c001e345:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e348:	85 db                	test   ebx,ebx
c001e34a:	75 48                	jne    c001e394 <__divdi3+0x94>
c001e34c:	39 ef                	cmp    edi,ebp
c001e34e:	76 24                	jbe    c001e374 <__divdi3+0x74>
c001e350:	89 ea                	mov    edx,ebp
c001e352:	f7 f7                	div    edi
c001e354:	89 c1                	mov    ecx,eax
c001e356:	31 f6                	xor    esi,esi
c001e358:	89 c8                	mov    eax,ecx
c001e35a:	89 f2                	mov    edx,esi
c001e35c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e360:	85 c9                	test   ecx,ecx
c001e362:	74 07                	je     c001e36b <__divdi3+0x6b>
c001e364:	f7 d8                	neg    eax
c001e366:	83 d2 00             	adc    edx,0x0
c001e369:	f7 da                	neg    edx
c001e36b:	83 c4 1c             	add    esp,0x1c
c001e36e:	5b                   	pop    ebx
c001e36f:	5e                   	pop    esi
c001e370:	5f                   	pop    edi
c001e371:	5d                   	pop    ebp
c001e372:	c3                   	ret    
c001e373:	90                   	nop
c001e374:	85 ff                	test   edi,edi
c001e376:	75 0b                	jne    c001e383 <__divdi3+0x83>
c001e378:	b8 01 00 00 00       	mov    eax,0x1
c001e37d:	31 d2                	xor    edx,edx
c001e37f:	f7 f3                	div    ebx
c001e381:	89 c7                	mov    edi,eax
c001e383:	31 d2                	xor    edx,edx
c001e385:	89 e8                	mov    eax,ebp
c001e387:	f7 f7                	div    edi
c001e389:	89 c6                	mov    esi,eax
c001e38b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e38e:	f7 f7                	div    edi
c001e390:	89 c1                	mov    ecx,eax
c001e392:	eb c4                	jmp    c001e358 <__divdi3+0x58>
c001e394:	39 eb                	cmp    ebx,ebp
c001e396:	77 3c                	ja     c001e3d4 <__divdi3+0xd4>
c001e398:	0f bd f3             	bsr    esi,ebx
c001e39b:	83 f6 1f             	xor    esi,0x1f
c001e39e:	75 40                	jne    c001e3e0 <__divdi3+0xe0>
c001e3a0:	39 eb                	cmp    ebx,ebp
c001e3a2:	72 09                	jb     c001e3ad <__divdi3+0xad>
c001e3a4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e3a7:	0f 87 97 00 00 00    	ja     c001e444 <__divdi3+0x144>
c001e3ad:	b9 01 00 00 00       	mov    ecx,0x1
c001e3b2:	eb a4                	jmp    c001e358 <__divdi3+0x58>
c001e3b4:	f7 d9                	neg    ecx
c001e3b6:	83 d3 00             	adc    ebx,0x0
c001e3b9:	f7 db                	neg    ebx
c001e3bb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e3be:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e3c2:	89 dd                	mov    ebp,ebx
c001e3c4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e3cc:	e9 5f ff ff ff       	jmp    c001e330 <__divdi3+0x30>
c001e3d1:	8d 76 00             	lea    esi,[esi+0x0]
c001e3d4:	31 f6                	xor    esi,esi
c001e3d6:	31 c9                	xor    ecx,ecx
c001e3d8:	e9 7b ff ff ff       	jmp    c001e358 <__divdi3+0x58>
c001e3dd:	8d 76 00             	lea    esi,[esi+0x0]
c001e3e0:	b8 20 00 00 00       	mov    eax,0x20
c001e3e5:	29 f0                	sub    eax,esi
c001e3e7:	89 f1                	mov    ecx,esi
c001e3e9:	d3 e3                	shl    ebx,cl
c001e3eb:	89 fa                	mov    edx,edi
c001e3ed:	88 c1                	mov    cl,al
c001e3ef:	d3 ea                	shr    edx,cl
c001e3f1:	09 da                	or     edx,ebx
c001e3f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e3f7:	89 f1                	mov    ecx,esi
c001e3f9:	d3 e7                	shl    edi,cl
c001e3fb:	89 eb                	mov    ebx,ebp
c001e3fd:	88 c1                	mov    cl,al
c001e3ff:	d3 eb                	shr    ebx,cl
c001e401:	89 f1                	mov    ecx,esi
c001e403:	d3 e5                	shl    ebp,cl
c001e405:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e408:	88 c1                	mov    cl,al
c001e40a:	d3 ea                	shr    edx,cl
c001e40c:	09 d5                	or     ebp,edx
c001e40e:	89 e8                	mov    eax,ebp
c001e410:	89 da                	mov    edx,ebx
c001e412:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e416:	89 d3                	mov    ebx,edx
c001e418:	89 c5                	mov    ebp,eax
c001e41a:	f7 e7                	mul    edi
c001e41c:	39 d3                	cmp    ebx,edx
c001e41e:	72 18                	jb     c001e438 <__divdi3+0x138>
c001e420:	74 0a                	je     c001e42c <__divdi3+0x12c>
c001e422:	89 e9                	mov    ecx,ebp
c001e424:	31 f6                	xor    esi,esi
c001e426:	e9 2d ff ff ff       	jmp    c001e358 <__divdi3+0x58>
c001e42b:	90                   	nop
c001e42c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e42f:	89 f1                	mov    ecx,esi
c001e431:	d3 e7                	shl    edi,cl
c001e433:	39 c7                	cmp    edi,eax
c001e435:	73 eb                	jae    c001e422 <__divdi3+0x122>
c001e437:	90                   	nop
c001e438:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e43b:	31 f6                	xor    esi,esi
c001e43d:	e9 16 ff ff ff       	jmp    c001e358 <__divdi3+0x58>
c001e442:	66 90                	xchg   ax,ax
c001e444:	31 c9                	xor    ecx,ecx
c001e446:	e9 0d ff ff ff       	jmp    c001e358 <__divdi3+0x58>
c001e44b:	90                   	nop

c001e44c <__moddi3>:
c001e44c:	55                   	push   ebp
c001e44d:	57                   	push   edi
c001e44e:	56                   	push   esi
c001e44f:	53                   	push   ebx
c001e450:	83 ec 2c             	sub    esp,0x2c
c001e453:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e457:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e45b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e45f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e463:	85 db                	test   ebx,ebx
c001e465:	0f 88 85 00 00 00    	js     c001e4f0 <__moddi3+0xa4>
c001e46b:	89 de                	mov    esi,ebx
c001e46d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e475:	89 d7                	mov    edi,edx
c001e477:	85 d2                	test   edx,edx
c001e479:	79 09                	jns    c001e484 <__moddi3+0x38>
c001e47b:	f7 d8                	neg    eax
c001e47d:	83 d2 00             	adc    edx,0x0
c001e480:	f7 da                	neg    edx
c001e482:	89 d7                	mov    edi,edx
c001e484:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e488:	89 cd                	mov    ebp,ecx
c001e48a:	85 ff                	test   edi,edi
c001e48c:	75 52                	jne    c001e4e0 <__moddi3+0x94>
c001e48e:	89 c3                	mov    ebx,eax
c001e490:	39 f0                	cmp    eax,esi
c001e492:	76 24                	jbe    c001e4b8 <__moddi3+0x6c>
c001e494:	89 c8                	mov    eax,ecx
c001e496:	89 f2                	mov    edx,esi
c001e498:	f7 f3                	div    ebx
c001e49a:	89 d6                	mov    esi,edx
c001e49c:	89 f0                	mov    eax,esi
c001e49e:	31 d2                	xor    edx,edx
c001e4a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e4a4:	85 c9                	test   ecx,ecx
c001e4a6:	74 07                	je     c001e4af <__moddi3+0x63>
c001e4a8:	f7 d8                	neg    eax
c001e4aa:	83 d2 00             	adc    edx,0x0
c001e4ad:	f7 da                	neg    edx
c001e4af:	83 c4 2c             	add    esp,0x2c
c001e4b2:	5b                   	pop    ebx
c001e4b3:	5e                   	pop    esi
c001e4b4:	5f                   	pop    edi
c001e4b5:	5d                   	pop    ebp
c001e4b6:	c3                   	ret    
c001e4b7:	90                   	nop
c001e4b8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e4bc:	85 db                	test   ebx,ebx
c001e4be:	75 0d                	jne    c001e4cd <__moddi3+0x81>
c001e4c0:	b8 01 00 00 00       	mov    eax,0x1
c001e4c5:	31 d2                	xor    edx,edx
c001e4c7:	f7 f7                	div    edi
c001e4c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4cd:	89 f0                	mov    eax,esi
c001e4cf:	31 d2                	xor    edx,edx
c001e4d1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e4d5:	f7 f7                	div    edi
c001e4d7:	89 e8                	mov    eax,ebp
c001e4d9:	f7 f7                	div    edi
c001e4db:	89 d6                	mov    esi,edx
c001e4dd:	eb bd                	jmp    c001e49c <__moddi3+0x50>
c001e4df:	90                   	nop
c001e4e0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e4e4:	39 f7                	cmp    edi,esi
c001e4e6:	76 20                	jbe    c001e508 <__moddi3+0xbc>
c001e4e8:	89 c8                	mov    eax,ecx
c001e4ea:	89 f2                	mov    edx,esi
c001e4ec:	eb b2                	jmp    c001e4a0 <__moddi3+0x54>
c001e4ee:	66 90                	xchg   ax,ax
c001e4f0:	f7 d9                	neg    ecx
c001e4f2:	83 d3 00             	adc    ebx,0x0
c001e4f5:	f7 db                	neg    ebx
c001e4f7:	89 de                	mov    esi,ebx
c001e4f9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e501:	e9 6f ff ff ff       	jmp    c001e475 <__moddi3+0x29>
c001e506:	66 90                	xchg   ax,ax
c001e508:	0f bd c7             	bsr    eax,edi
c001e50b:	83 f0 1f             	xor    eax,0x1f
c001e50e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e512:	75 24                	jne    c001e538 <__moddi3+0xec>
c001e514:	39 f7                	cmp    edi,esi
c001e516:	72 06                	jb     c001e51e <__moddi3+0xd2>
c001e518:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e51c:	77 0c                	ja     c001e52a <__moddi3+0xde>
c001e51e:	89 e9                	mov    ecx,ebp
c001e520:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e524:	19 fe                	sbb    esi,edi
c001e526:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e52a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e52e:	89 f2                	mov    edx,esi
c001e530:	e9 6b ff ff ff       	jmp    c001e4a0 <__moddi3+0x54>
c001e535:	8d 76 00             	lea    esi,[esi+0x0]
c001e538:	b8 20 00 00 00       	mov    eax,0x20
c001e53d:	89 c2                	mov    edx,eax
c001e53f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e543:	29 da                	sub    edx,ebx
c001e545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e549:	88 d9                	mov    cl,bl
c001e54b:	d3 e7                	shl    edi,cl
c001e54d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e551:	88 d1                	mov    cl,dl
c001e553:	d3 e8                	shr    eax,cl
c001e555:	09 c7                	or     edi,eax
c001e557:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e55b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e55f:	89 d8                	mov    eax,ebx
c001e561:	88 d9                	mov    cl,bl
c001e563:	d3 e7                	shl    edi,cl
c001e565:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e569:	89 f3                	mov    ebx,esi
c001e56b:	88 d1                	mov    cl,dl
c001e56d:	d3 eb                	shr    ebx,cl
c001e56f:	89 c7                	mov    edi,eax
c001e571:	88 c1                	mov    cl,al
c001e573:	d3 e6                	shl    esi,cl
c001e575:	89 e8                	mov    eax,ebp
c001e577:	88 d1                	mov    cl,dl
c001e579:	d3 e8                	shr    eax,cl
c001e57b:	09 f0                	or     eax,esi
c001e57d:	89 f9                	mov    ecx,edi
c001e57f:	d3 e5                	shl    ebp,cl
c001e581:	89 da                	mov    edx,ebx
c001e583:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e587:	89 d3                	mov    ebx,edx
c001e589:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e58d:	89 c6                	mov    esi,eax
c001e58f:	89 d1                	mov    ecx,edx
c001e591:	39 d3                	cmp    ebx,edx
c001e593:	72 27                	jb     c001e5bc <__moddi3+0x170>
c001e595:	74 21                	je     c001e5b8 <__moddi3+0x16c>
c001e597:	29 f5                	sub    ebp,esi
c001e599:	19 cb                	sbb    ebx,ecx
c001e59b:	89 de                	mov    esi,ebx
c001e59d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e5a1:	d3 e6                	shl    esi,cl
c001e5a3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e5a7:	89 f9                	mov    ecx,edi
c001e5a9:	d3 ed                	shr    ebp,cl
c001e5ab:	09 ee                	or     esi,ebp
c001e5ad:	89 f0                	mov    eax,esi
c001e5af:	d3 eb                	shr    ebx,cl
c001e5b1:	89 da                	mov    edx,ebx
c001e5b3:	e9 e8 fe ff ff       	jmp    c001e4a0 <__moddi3+0x54>
c001e5b8:	39 c5                	cmp    ebp,eax
c001e5ba:	73 db                	jae    c001e597 <__moddi3+0x14b>
c001e5bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e5c0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e5c4:	89 d1                	mov    ecx,edx
c001e5c6:	89 c6                	mov    esi,eax
c001e5c8:	eb cd                	jmp    c001e597 <__moddi3+0x14b>
c001e5ca:	66 90                	xchg   ax,ax

c001e5cc <__udivdi3>:
c001e5cc:	55                   	push   ebp
c001e5cd:	57                   	push   edi
c001e5ce:	56                   	push   esi
c001e5cf:	53                   	push   ebx
c001e5d0:	83 ec 1c             	sub    esp,0x1c
c001e5d3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e5d7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e5db:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e5df:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e5e3:	85 d2                	test   edx,edx
c001e5e5:	75 41                	jne    c001e628 <__udivdi3+0x5c>
c001e5e7:	39 f7                	cmp    edi,esi
c001e5e9:	76 15                	jbe    c001e600 <__udivdi3+0x34>
c001e5eb:	89 e8                	mov    eax,ebp
c001e5ed:	89 f2                	mov    edx,esi
c001e5ef:	f7 f7                	div    edi
c001e5f1:	31 db                	xor    ebx,ebx
c001e5f3:	89 da                	mov    edx,ebx
c001e5f5:	83 c4 1c             	add    esp,0x1c
c001e5f8:	5b                   	pop    ebx
c001e5f9:	5e                   	pop    esi
c001e5fa:	5f                   	pop    edi
c001e5fb:	5d                   	pop    ebp
c001e5fc:	c3                   	ret    
c001e5fd:	8d 76 00             	lea    esi,[esi+0x0]
c001e600:	89 f9                	mov    ecx,edi
c001e602:	85 ff                	test   edi,edi
c001e604:	75 0b                	jne    c001e611 <__udivdi3+0x45>
c001e606:	b8 01 00 00 00       	mov    eax,0x1
c001e60b:	31 d2                	xor    edx,edx
c001e60d:	f7 f7                	div    edi
c001e60f:	89 c1                	mov    ecx,eax
c001e611:	31 d2                	xor    edx,edx
c001e613:	89 f0                	mov    eax,esi
c001e615:	f7 f1                	div    ecx
c001e617:	89 c3                	mov    ebx,eax
c001e619:	89 e8                	mov    eax,ebp
c001e61b:	f7 f1                	div    ecx
c001e61d:	89 da                	mov    edx,ebx
c001e61f:	83 c4 1c             	add    esp,0x1c
c001e622:	5b                   	pop    ebx
c001e623:	5e                   	pop    esi
c001e624:	5f                   	pop    edi
c001e625:	5d                   	pop    ebp
c001e626:	c3                   	ret    
c001e627:	90                   	nop
c001e628:	39 f2                	cmp    edx,esi
c001e62a:	77 1c                	ja     c001e648 <__udivdi3+0x7c>
c001e62c:	0f bd da             	bsr    ebx,edx
c001e62f:	83 f3 1f             	xor    ebx,0x1f
c001e632:	75 24                	jne    c001e658 <__udivdi3+0x8c>
c001e634:	39 f2                	cmp    edx,esi
c001e636:	72 08                	jb     c001e640 <__udivdi3+0x74>
c001e638:	39 ef                	cmp    edi,ebp
c001e63a:	0f 87 84 00 00 00    	ja     c001e6c4 <__udivdi3+0xf8>
c001e640:	b8 01 00 00 00       	mov    eax,0x1
c001e645:	eb ac                	jmp    c001e5f3 <__udivdi3+0x27>
c001e647:	90                   	nop
c001e648:	31 db                	xor    ebx,ebx
c001e64a:	31 c0                	xor    eax,eax
c001e64c:	89 da                	mov    edx,ebx
c001e64e:	83 c4 1c             	add    esp,0x1c
c001e651:	5b                   	pop    ebx
c001e652:	5e                   	pop    esi
c001e653:	5f                   	pop    edi
c001e654:	5d                   	pop    ebp
c001e655:	c3                   	ret    
c001e656:	66 90                	xchg   ax,ax
c001e658:	b8 20 00 00 00       	mov    eax,0x20
c001e65d:	29 d8                	sub    eax,ebx
c001e65f:	88 d9                	mov    cl,bl
c001e661:	d3 e2                	shl    edx,cl
c001e663:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e667:	89 fa                	mov    edx,edi
c001e669:	88 c1                	mov    cl,al
c001e66b:	d3 ea                	shr    edx,cl
c001e66d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e671:	09 d1                	or     ecx,edx
c001e673:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e677:	88 d9                	mov    cl,bl
c001e679:	d3 e7                	shl    edi,cl
c001e67b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e67f:	89 f7                	mov    edi,esi
c001e681:	88 c1                	mov    cl,al
c001e683:	d3 ef                	shr    edi,cl
c001e685:	88 d9                	mov    cl,bl
c001e687:	d3 e6                	shl    esi,cl
c001e689:	89 ea                	mov    edx,ebp
c001e68b:	88 c1                	mov    cl,al
c001e68d:	d3 ea                	shr    edx,cl
c001e68f:	09 d6                	or     esi,edx
c001e691:	89 f0                	mov    eax,esi
c001e693:	89 fa                	mov    edx,edi
c001e695:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e699:	89 d7                	mov    edi,edx
c001e69b:	89 c6                	mov    esi,eax
c001e69d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e6a1:	39 d7                	cmp    edi,edx
c001e6a3:	72 13                	jb     c001e6b8 <__udivdi3+0xec>
c001e6a5:	74 09                	je     c001e6b0 <__udivdi3+0xe4>
c001e6a7:	89 f0                	mov    eax,esi
c001e6a9:	31 db                	xor    ebx,ebx
c001e6ab:	e9 43 ff ff ff       	jmp    c001e5f3 <__udivdi3+0x27>
c001e6b0:	88 d9                	mov    cl,bl
c001e6b2:	d3 e5                	shl    ebp,cl
c001e6b4:	39 c5                	cmp    ebp,eax
c001e6b6:	73 ef                	jae    c001e6a7 <__udivdi3+0xdb>
c001e6b8:	8d 46 ff             	lea    eax,[esi-0x1]
c001e6bb:	31 db                	xor    ebx,ebx
c001e6bd:	e9 31 ff ff ff       	jmp    c001e5f3 <__udivdi3+0x27>
c001e6c2:	66 90                	xchg   ax,ax
c001e6c4:	31 c0                	xor    eax,eax
c001e6c6:	e9 28 ff ff ff       	jmp    c001e5f3 <__udivdi3+0x27>
c001e6cb:	90                   	nop

c001e6cc <__umoddi3>:
c001e6cc:	55                   	push   ebp
c001e6cd:	57                   	push   edi
c001e6ce:	56                   	push   esi
c001e6cf:	53                   	push   ebx
c001e6d0:	83 ec 1c             	sub    esp,0x1c
c001e6d3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e6d7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e6db:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e6df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e6e3:	89 da                	mov    edx,ebx
c001e6e5:	85 c0                	test   eax,eax
c001e6e7:	75 37                	jne    c001e720 <__umoddi3+0x54>
c001e6e9:	39 df                	cmp    edi,ebx
c001e6eb:	76 13                	jbe    c001e700 <__umoddi3+0x34>
c001e6ed:	89 f0                	mov    eax,esi
c001e6ef:	f7 f7                	div    edi
c001e6f1:	89 d0                	mov    eax,edx
c001e6f3:	31 d2                	xor    edx,edx
c001e6f5:	83 c4 1c             	add    esp,0x1c
c001e6f8:	5b                   	pop    ebx
c001e6f9:	5e                   	pop    esi
c001e6fa:	5f                   	pop    edi
c001e6fb:	5d                   	pop    ebp
c001e6fc:	c3                   	ret    
c001e6fd:	8d 76 00             	lea    esi,[esi+0x0]
c001e700:	89 fd                	mov    ebp,edi
c001e702:	85 ff                	test   edi,edi
c001e704:	75 0b                	jne    c001e711 <__umoddi3+0x45>
c001e706:	b8 01 00 00 00       	mov    eax,0x1
c001e70b:	31 d2                	xor    edx,edx
c001e70d:	f7 f7                	div    edi
c001e70f:	89 c5                	mov    ebp,eax
c001e711:	89 d8                	mov    eax,ebx
c001e713:	31 d2                	xor    edx,edx
c001e715:	f7 f5                	div    ebp
c001e717:	89 f0                	mov    eax,esi
c001e719:	f7 f5                	div    ebp
c001e71b:	89 d0                	mov    eax,edx
c001e71d:	eb d4                	jmp    c001e6f3 <__umoddi3+0x27>
c001e71f:	90                   	nop
c001e720:	89 f1                	mov    ecx,esi
c001e722:	39 d8                	cmp    eax,ebx
c001e724:	76 0a                	jbe    c001e730 <__umoddi3+0x64>
c001e726:	89 f0                	mov    eax,esi
c001e728:	83 c4 1c             	add    esp,0x1c
c001e72b:	5b                   	pop    ebx
c001e72c:	5e                   	pop    esi
c001e72d:	5f                   	pop    edi
c001e72e:	5d                   	pop    ebp
c001e72f:	c3                   	ret    
c001e730:	0f bd e8             	bsr    ebp,eax
c001e733:	83 f5 1f             	xor    ebp,0x1f
c001e736:	75 1c                	jne    c001e754 <__umoddi3+0x88>
c001e738:	39 d8                	cmp    eax,ebx
c001e73a:	72 04                	jb     c001e740 <__umoddi3+0x74>
c001e73c:	39 f7                	cmp    edi,esi
c001e73e:	77 08                	ja     c001e748 <__umoddi3+0x7c>
c001e740:	89 da                	mov    edx,ebx
c001e742:	29 fe                	sub    esi,edi
c001e744:	19 c2                	sbb    edx,eax
c001e746:	89 f1                	mov    ecx,esi
c001e748:	89 c8                	mov    eax,ecx
c001e74a:	83 c4 1c             	add    esp,0x1c
c001e74d:	5b                   	pop    ebx
c001e74e:	5e                   	pop    esi
c001e74f:	5f                   	pop    edi
c001e750:	5d                   	pop    ebp
c001e751:	c3                   	ret    
c001e752:	66 90                	xchg   ax,ax
c001e754:	ba 20 00 00 00       	mov    edx,0x20
c001e759:	29 ea                	sub    edx,ebp
c001e75b:	89 e9                	mov    ecx,ebp
c001e75d:	d3 e0                	shl    eax,cl
c001e75f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e763:	89 f8                	mov    eax,edi
c001e765:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e769:	88 d1                	mov    cl,dl
c001e76b:	d3 e8                	shr    eax,cl
c001e76d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e771:	09 c1                	or     ecx,eax
c001e773:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e777:	89 e9                	mov    ecx,ebp
c001e779:	d3 e7                	shl    edi,cl
c001e77b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e77f:	89 d8                	mov    eax,ebx
c001e781:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e785:	88 d1                	mov    cl,dl
c001e787:	d3 e8                	shr    eax,cl
c001e789:	89 c7                	mov    edi,eax
c001e78b:	89 e9                	mov    ecx,ebp
c001e78d:	d3 e3                	shl    ebx,cl
c001e78f:	89 f0                	mov    eax,esi
c001e791:	88 d1                	mov    cl,dl
c001e793:	d3 e8                	shr    eax,cl
c001e795:	09 d8                	or     eax,ebx
c001e797:	89 e9                	mov    ecx,ebp
c001e799:	d3 e6                	shl    esi,cl
c001e79b:	89 f3                	mov    ebx,esi
c001e79d:	89 fa                	mov    edx,edi
c001e79f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e7a3:	89 d1                	mov    ecx,edx
c001e7a5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e7a9:	89 c6                	mov    esi,eax
c001e7ab:	89 d7                	mov    edi,edx
c001e7ad:	39 d1                	cmp    ecx,edx
c001e7af:	72 27                	jb     c001e7d8 <__umoddi3+0x10c>
c001e7b1:	74 21                	je     c001e7d4 <__umoddi3+0x108>
c001e7b3:	89 ca                	mov    edx,ecx
c001e7b5:	29 f3                	sub    ebx,esi
c001e7b7:	19 fa                	sbb    edx,edi
c001e7b9:	89 d0                	mov    eax,edx
c001e7bb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e7bf:	d3 e0                	shl    eax,cl
c001e7c1:	89 e9                	mov    ecx,ebp
c001e7c3:	d3 eb                	shr    ebx,cl
c001e7c5:	09 d8                	or     eax,ebx
c001e7c7:	d3 ea                	shr    edx,cl
c001e7c9:	83 c4 1c             	add    esp,0x1c
c001e7cc:	5b                   	pop    ebx
c001e7cd:	5e                   	pop    esi
c001e7ce:	5f                   	pop    edi
c001e7cf:	5d                   	pop    ebp
c001e7d0:	c3                   	ret    
c001e7d1:	8d 76 00             	lea    esi,[esi+0x0]
c001e7d4:	39 c3                	cmp    ebx,eax
c001e7d6:	73 db                	jae    c001e7b3 <__umoddi3+0xe7>
c001e7d8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e7dc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e7e0:	89 d7                	mov    edi,edx
c001e7e2:	89 c6                	mov    esi,eax
c001e7e4:	eb cd                	jmp    c001e7b3 <__umoddi3+0xe7>
c001e7e6:	66 90                	xchg   ax,ax
c001e7e8:	66 90                	xchg   ax,ax
c001e7ea:	66 90                	xchg   ax,ax
c001e7ec:	66 90                	xchg   ax,ax
c001e7ee:	66 90                	xchg   ax,ax

c001e7f0 <fabs>:
c001e7f0:	83 ec 0c             	sub    esp,0xc
c001e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7f7:	89 04 24             	mov    DWORD PTR [esp],eax
c001e7fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e7fe:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001e803:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e807:	dd 04 24             	fld    QWORD PTR [esp]
c001e80a:	83 c4 0c             	add    esp,0xc
c001e80d:	c3                   	ret    
c001e80e:	66 90                	xchg   ax,ax

c001e810 <lrint>:
c001e810:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001e814:	83 ec 04             	sub    esp,0x4
c001e817:	db 1c 24             	fistp  DWORD PTR [esp]
c001e81a:	58                   	pop    eax
c001e81b:	c3                   	ret    

c001e81c <lrintf>:
c001e81c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001e820:	83 ec 04             	sub    esp,0x4
c001e823:	db 1c 24             	fistp  DWORD PTR [esp]
c001e826:	58                   	pop    eax
c001e827:	c3                   	ret    

Disassembly of section .init:

c001e828 <_init>:
c001e828:	55                   	push   ebp
c001e829:	89 e5                	mov    ebp,esp
c001e82b:	e8 e8 18 fe ff       	call   c0000118 <frame_dummy>
c001e830:	e8 a3 fa ff ff       	call   c001e2d8 <__do_global_ctors_aux>
c001e835:	5d                   	pop    ebp
c001e836:	c3                   	ret    

Disassembly of section .fini:

c001e837 <_fini>:
c001e837:	55                   	push   ebp
c001e838:	89 e5                	mov    ebp,esp
c001e83a:	e8 69 18 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001e83f:	5d                   	pop    ebp
c001e840:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e842 <Computer::~Computer()>:
c001e842:	83 ec 0c             	sub    esp,0xc
c001e845:	ba 18 02 02 c0       	mov    edx,0xc0020218
c001e84a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e84e:	89 10                	mov    DWORD PTR [eax],edx
c001e850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e854:	83 ec 0c             	sub    esp,0xc
c001e857:	50                   	push   eax
c001e858:	e8 2f 19 ff ff       	call   c001018c <Device::~Device()>
c001e85d:	83 c4 10             	add    esp,0x10
c001e860:	90                   	nop
c001e861:	83 c4 0c             	add    esp,0xc
c001e864:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e866 <Computer::~Computer()>:
c001e866:	83 ec 0c             	sub    esp,0xc
c001e869:	83 ec 0c             	sub    esp,0xc
c001e86c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e870:	e8 cd ff ff ff       	call   c001e842 <Computer::~Computer()>
c001e875:	83 c4 10             	add    esp,0x10
c001e878:	83 ec 08             	sub    esp,0x8
c001e87b:	68 ec 01 00 00       	push   0x1ec
c001e880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e884:	e8 76 05 ff ff       	call   c000edff <operator delete(void*, unsigned long)>
c001e889:	83 c4 10             	add    esp,0x10
c001e88c:	83 c4 0c             	add    esp,0xc
c001e88f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e890 <idleCommon()>:
c001e890:	83 ec 0c             	sub    esp,0xc
c001e893:	e8 9c 91 ff ff       	call   c0017a34 <lockScheduler()>
c001e898:	e8 cb 94 ff ff       	call   c0017d68 <schedule()>
c001e89d:	83 c4 0c             	add    esp,0xc
c001e8a0:	e9 91 91 ff ff       	jmp    c0017a36 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001e8a5 <CPU::readCR3()>:
c001e8a5:	83 ec 10             	sub    esp,0x10
c001e8a8:	0f 20 d8             	mov    eax,cr3
c001e8ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e8af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8b3:	83 c4 10             	add    esp,0x10
c001e8b6:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001e8b7 <CPU::writeCR3(unsigned long)>:
c001e8b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8bb:	0f 22 d8             	mov    cr3,eax
c001e8be:	90                   	nop
c001e8bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e8c0 <LinkedList<UnixFile>::~LinkedList()>:
c001e8c0:	90                   	nop
c001e8c1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e8c2 <LinkedList<UnixFile>::LinkedList()>:
c001e8c2:	83 ec 0c             	sub    esp,0xc
c001e8c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8c9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e8cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e8da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8de:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e8e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8e9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e8ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e8fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8fe:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e905:	83 ec 0c             	sub    esp,0xc
c001e908:	68 48 04 02 c0       	push   0xc0020448
c001e90d:	e8 cd 05 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001e912:	83 c4 10             	add    esp,0x10
c001e915:	90                   	nop
c001e916:	83 c4 0c             	add    esp,0xc
c001e919:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e91a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e91a:	83 ec 0c             	sub    esp,0xc
c001e91d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e922:	75 10                	jne    c001e934 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e924:	83 ec 0c             	sub    esp,0xc
c001e927:	68 64 04 02 c0       	push   0xc0020464
c001e92c:	e8 43 62 ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c001e931:	83 c4 10             	add    esp,0x10
c001e934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e938:	8b 00                	mov    eax,DWORD PTR [eax]
c001e93a:	85 c0                	test   eax,eax
c001e93c:	74 34                	je     c001e972 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e93e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e942:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e945:	85 c0                	test   eax,eax
c001e947:	74 29                	je     c001e972 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e94d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e950:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e954:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e95b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e95f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e966:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e969:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e970:	eb 65                	jmp    c001e9d7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e976:	8b 00                	mov    eax,DWORD PTR [eax]
c001e978:	85 c0                	test   eax,eax
c001e97a:	75 4b                	jne    c001e9c7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e97c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e980:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e983:	85 c0                	test   eax,eax
c001e985:	75 40                	jne    c001e9c7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e98b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e98f:	89 10                	mov    DWORD PTR [eax],edx
c001e991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e995:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e999:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e99c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9a3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e9aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9b1:	85 c0                	test   eax,eax
c001e9b3:	74 22                	je     c001e9d7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e9b5:	83 ec 0c             	sub    esp,0xc
c001e9b8:	68 86 04 02 c0       	push   0xc0020486
c001e9bd:	e8 b2 61 ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c001e9c2:	83 c4 10             	add    esp,0x10
c001e9c5:	eb 10                	jmp    c001e9d7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e9c7:	83 ec 0c             	sub    esp,0xc
c001e9ca:	68 90 04 02 c0       	push   0xc0020490
c001e9cf:	e8 a0 61 ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c001e9d4:	83 c4 10             	add    esp,0x10
c001e9d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9db:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9de:	8d 50 01             	lea    edx,[eax+0x1]
c001e9e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e9e8:	90                   	nop
c001e9e9:	83 c4 0c             	add    esp,0xc
c001e9ec:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e9ee <LinkedList<UnixFile>::getFirstElement()>:
c001e9ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9f2:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9f4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e9f6 <LinkedList<UnixFile>::removeFirst()>:
c001e9f6:	83 ec 0c             	sub    esp,0xc
c001e9f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9fd:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9ff:	85 c0                	test   eax,eax
c001ea01:	75 12                	jne    c001ea15 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ea03:	83 ec 0c             	sub    esp,0xc
c001ea06:	68 9c 04 02 c0       	push   0xc002049c
c001ea0b:	e8 64 61 ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c001ea10:	83 c4 10             	add    esp,0x10
c001ea13:	eb 7e                	jmp    c001ea93 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ea15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea19:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea1c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea1f:	85 c0                	test   eax,eax
c001ea21:	74 10                	je     c001ea33 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ea23:	83 ec 0c             	sub    esp,0xc
c001ea26:	68 e7 04 02 c0       	push   0xc00204e7
c001ea2b:	e8 44 61 ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c001ea30:	83 c4 10             	add    esp,0x10
c001ea33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea37:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea39:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea3c:	85 c0                	test   eax,eax
c001ea3e:	75 33                	jne    c001ea73 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ea40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea44:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea4e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea59:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea5c:	83 f8 01             	cmp    eax,0x1
c001ea5f:	74 21                	je     c001ea82 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ea61:	83 ec 0c             	sub    esp,0xc
c001ea64:	68 c0 04 02 c0       	push   0xc00204c0
c001ea69:	e8 06 61 ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c001ea6e:	83 c4 10             	add    esp,0x10
c001ea71:	eb 0f                	jmp    c001ea82 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ea73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea77:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea79:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ea7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea80:	89 10                	mov    DWORD PTR [eax],edx
c001ea82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea86:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea89:	8d 50 ff             	lea    edx,[eax-0x1]
c001ea8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea90:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ea93:	83 c4 0c             	add    esp,0xc
c001ea96:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ea98 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ea98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ea9c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea9f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001eaa0 <DriverlessDevice::~DriverlessDevice()>:
c001eaa0:	ba 04 0c 02 c0       	mov    edx,0xc0020c04
c001eaa5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eaa9:	89 10                	mov    DWORD PTR [eax],edx
c001eaab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eaaf:	50                   	push   eax
c001eab0:	e8 d7 16 ff ff       	call   c001018c <Device::~Device()>
c001eab5:	83 c4 04             	add    esp,0x4
c001eab8:	90                   	nop
c001eab9:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001eaba <DriverlessDevice::~DriverlessDevice()>:
c001eaba:	83 ec 0c             	sub    esp,0xc
c001eabd:	83 ec 0c             	sub    esp,0xc
c001eac0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eac4:	e8 d7 ff ff ff       	call   c001eaa0 <DriverlessDevice::~DriverlessDevice()>
c001eac9:	83 c4 10             	add    esp,0x10
c001eacc:	83 ec 08             	sub    esp,0x8
c001eacf:	68 58 01 00 00       	push   0x158
c001ead4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ead8:	e8 22 03 ff ff       	call   c000edff <operator delete(void*, unsigned long)>
c001eadd:	83 c4 10             	add    esp,0x10
c001eae0:	83 c4 0c             	add    esp,0xc
c001eae3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001eae4 <LinkedList<Device>::addElement(Device*)>:
c001eae4:	83 ec 0c             	sub    esp,0xc
c001eae7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eaec:	75 10                	jne    c001eafe <LinkedList<Device>::addElement(Device*)+0x1a>
c001eaee:	83 ec 0c             	sub    esp,0xc
c001eaf1:	68 64 04 02 c0       	push   0xc0020464
c001eaf6:	e8 79 60 ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c001eafb:	83 c4 10             	add    esp,0x10
c001eafe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb02:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb04:	85 c0                	test   eax,eax
c001eb06:	74 3a                	je     c001eb42 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eb08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb0f:	85 c0                	test   eax,eax
c001eb11:	74 2f                	je     c001eb42 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eb13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb1a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb1e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001eb24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb2c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb36:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eb40:	eb 68                	jmp    c001ebaa <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb46:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb48:	85 c0                	test   eax,eax
c001eb4a:	75 4e                	jne    c001eb9a <LinkedList<Device>::addElement(Device*)+0xb6>
c001eb4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb53:	85 c0                	test   eax,eax
c001eb55:	75 43                	jne    c001eb9a <LinkedList<Device>::addElement(Device*)+0xb6>
c001eb57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb5b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb5f:	89 10                	mov    DWORD PTR [eax],edx
c001eb61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb65:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb69:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb73:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eb7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb81:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb84:	85 c0                	test   eax,eax
c001eb86:	74 22                	je     c001ebaa <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb88:	83 ec 0c             	sub    esp,0xc
c001eb8b:	68 86 04 02 c0       	push   0xc0020486
c001eb90:	e8 df 5f ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c001eb95:	83 c4 10             	add    esp,0x10
c001eb98:	eb 10                	jmp    c001ebaa <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb9a:	83 ec 0c             	sub    esp,0xc
c001eb9d:	68 90 04 02 c0       	push   0xc0020490
c001eba2:	e8 cd 5f ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c001eba7:	83 c4 10             	add    esp,0x10
c001ebaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebb1:	8d 50 01             	lea    edx,[eax+0x1]
c001ebb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebb8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ebbb:	90                   	nop
c001ebbc:	83 c4 0c             	add    esp,0xc
c001ebbf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ebc0 <LinkedList<Device>::LinkedList()>:
c001ebc0:	83 ec 0c             	sub    esp,0xc
c001ebc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebd1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ebd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebdc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ebe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebe7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebf1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ebf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebfc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec03:	83 ec 0c             	sub    esp,0xc
c001ec06:	68 48 04 02 c0       	push   0xc0020448
c001ec0b:	e8 cf 02 ff ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001ec10:	83 c4 10             	add    esp,0x10
c001ec13:	90                   	nop
c001ec14:	83 c4 0c             	add    esp,0xc
c001ec17:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001ec18 <CPU::readCR0()>:
c001ec18:	83 ec 10             	sub    esp,0x10
c001ec1b:	0f 20 c0             	mov    eax,cr0
c001ec1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ec22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec26:	83 c4 10             	add    esp,0x10
c001ec29:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001ec2a <CPU::writeCR0(unsigned long)>:
c001ec2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec2e:	0f 22 c0             	mov    cr0,eax
c001ec31:	90                   	nop
c001ec32:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001ec33 <CPU::readDR0()>:
c001ec33:	83 ec 10             	sub    esp,0x10
c001ec36:	0f 21 c0             	mov    eax,db0
c001ec39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ec3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec41:	83 c4 10             	add    esp,0x10
c001ec44:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001ec45 <CPU::readDR1()>:
c001ec45:	83 ec 10             	sub    esp,0x10
c001ec48:	0f 21 c8             	mov    eax,db1
c001ec4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ec4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec53:	83 c4 10             	add    esp,0x10
c001ec56:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001ec57 <CPU::readDR2()>:
c001ec57:	83 ec 10             	sub    esp,0x10
c001ec5a:	0f 21 d0             	mov    eax,db2
c001ec5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ec61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec65:	83 c4 10             	add    esp,0x10
c001ec68:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001ec69 <CPU::readDR3()>:
c001ec69:	83 ec 10             	sub    esp,0x10
c001ec6c:	0f 21 d8             	mov    eax,db3
c001ec6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ec73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec77:	83 c4 10             	add    esp,0x10
c001ec7a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001ec7b <CPU::readDR6()>:
c001ec7b:	83 ec 10             	sub    esp,0x10
c001ec7e:	0f 21 f0             	mov    eax,db6
c001ec81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ec85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec89:	83 c4 10             	add    esp,0x10
c001ec8c:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001ec8d <CPU::readDR7()>:
c001ec8d:	83 ec 10             	sub    esp,0x10
c001ec90:	0f 21 f8             	mov    eax,db7
c001ec93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ec97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec9b:	83 c4 10             	add    esp,0x10
c001ec9e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001eca0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001eca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eca4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eca6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001eca8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001eca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecac:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecae:	85 c0                	test   eax,eax
c001ecb0:	75 0e                	jne    c001ecc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ecb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecb9:	85 c0                	test   eax,eax
c001ecbb:	75 03                	jne    c001ecc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ecbd:	b0 01                	mov    al,0x1
c001ecbf:	c3                   	ret    
c001ecc0:	b0 00                	mov    al,0x0
c001ecc2:	90                   	nop
c001ecc3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001ecc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001ecc4:	83 ec 0c             	sub    esp,0xc
c001ecc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eccb:	8b 00                	mov    eax,DWORD PTR [eax]
c001eccd:	85 c0                	test   eax,eax
c001eccf:	75 15                	jne    c001ece6 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001ecd1:	83 ec 0c             	sub    esp,0xc
c001ecd4:	68 9c 04 02 c0       	push   0xc002049c
c001ecd9:	e8 96 5e ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c001ecde:	83 c4 10             	add    esp,0x10
c001ece1:	e9 88 00 00 00       	jmp    c001ed6e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001ece6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eced:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ecf0:	85 c0                	test   eax,eax
c001ecf2:	0f 95 c0             	setne  al
c001ecf5:	84 c0                	test   al,al
c001ecf7:	74 10                	je     c001ed09 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001ecf9:	83 ec 0c             	sub    esp,0xc
c001ecfc:	68 e7 04 02 c0       	push   0xc00204e7
c001ed01:	e8 6e 5e ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c001ed06:	83 c4 10             	add    esp,0x10
c001ed09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed0d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed0f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ed12:	85 c0                	test   eax,eax
c001ed14:	0f 94 c0             	sete   al
c001ed17:	84 c0                	test   al,al
c001ed19:	74 33                	je     c001ed4e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001ed1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed1f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ed25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed29:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ed30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed37:	83 f8 01             	cmp    eax,0x1
c001ed3a:	74 21                	je     c001ed5d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001ed3c:	83 ec 0c             	sub    esp,0xc
c001ed3f:	68 c0 04 02 c0       	push   0xc00204c0
c001ed44:	e8 2b 5e ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c001ed49:	83 c4 10             	add    esp,0x10
c001ed4c:	eb 0f                	jmp    c001ed5d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001ed4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed52:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed54:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ed57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed5b:	89 10                	mov    DWORD PTR [eax],edx
c001ed5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed61:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed64:	8d 50 ff             	lea    edx,[eax-0x1]
c001ed67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed6b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed6e:	83 c4 0c             	add    esp,0xc
c001ed71:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ed72 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ed72:	83 ec 0c             	sub    esp,0xc
c001ed75:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ed7a:	75 10                	jne    c001ed8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001ed7c:	83 ec 0c             	sub    esp,0xc
c001ed7f:	68 64 04 02 c0       	push   0xc0020464
c001ed84:	e8 eb 5d ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c001ed89:	83 c4 10             	add    esp,0x10
c001ed8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed90:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed92:	85 c0                	test   eax,eax
c001ed94:	74 34                	je     c001edca <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001ed96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed9d:	85 c0                	test   eax,eax
c001ed9f:	74 29                	je     c001edca <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001eda1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eda5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eda8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001edac:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001edaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001edb7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001edba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001edc1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001edc8:	eb 65                	jmp    c001ee2f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001edca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edce:	8b 00                	mov    eax,DWORD PTR [eax]
c001edd0:	85 c0                	test   eax,eax
c001edd2:	75 4b                	jne    c001ee1f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001edd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eddb:	85 c0                	test   eax,eax
c001eddd:	75 40                	jne    c001ee1f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001eddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ede3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ede7:	89 10                	mov    DWORD PTR [eax],edx
c001ede9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eded:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001edf1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001edf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001edfb:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ee02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee06:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee09:	85 c0                	test   eax,eax
c001ee0b:	74 22                	je     c001ee2f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001ee0d:	83 ec 0c             	sub    esp,0xc
c001ee10:	68 86 04 02 c0       	push   0xc0020486
c001ee15:	e8 5a 5d ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c001ee1a:	83 c4 10             	add    esp,0x10
c001ee1d:	eb 10                	jmp    c001ee2f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001ee1f:	83 ec 0c             	sub    esp,0xc
c001ee22:	68 90 04 02 c0       	push   0xc0020490
c001ee27:	e8 48 5d ff ff       	call   c0014b74 <Krnl::panic(char const*)>
c001ee2c:	83 c4 10             	add    esp,0x10
c001ee2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee33:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee36:	8d 50 01             	lea    edx,[eax+0x1]
c001ee39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee3d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ee40:	90                   	nop
c001ee41:	83 c4 0c             	add    esp,0xc
c001ee44:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ee46 <ACPI::~ACPI()>:
c001ee46:	83 ec 0c             	sub    esp,0xc
c001ee49:	ba 90 13 02 c0       	mov    edx,0xc0021390
c001ee4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee52:	89 10                	mov    DWORD PTR [eax],edx
c001ee54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee58:	83 ec 0c             	sub    esp,0xc
c001ee5b:	50                   	push   eax
c001ee5c:	e8 2b 13 ff ff       	call   c001018c <Device::~Device()>
c001ee61:	83 c4 10             	add    esp,0x10
c001ee64:	90                   	nop
c001ee65:	83 c4 0c             	add    esp,0xc
c001ee68:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ee6a <ACPI::~ACPI()>:
c001ee6a:	83 ec 0c             	sub    esp,0xc
c001ee6d:	83 ec 0c             	sub    esp,0xc
c001ee70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee74:	e8 cd ff ff ff       	call   c001ee46 <ACPI::~ACPI()>
c001ee79:	83 c4 10             	add    esp,0x10
c001ee7c:	83 ec 08             	sub    esp,0x8
c001ee7f:	68 68 22 00 00       	push   0x2268
c001ee84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee88:	e8 72 ff fe ff       	call   c000edff <operator delete(void*, unsigned long)>
c001ee8d:	83 c4 10             	add    esp,0x10
c001ee90:	83 c4 0c             	add    esp,0xc
c001ee93:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ee94 <CPU::~CPU()>:
c001ee94:	83 ec 0c             	sub    esp,0xc
c001ee97:	ba e0 15 02 c0       	mov    edx,0xc00215e0
c001ee9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea0:	89 10                	mov    DWORD PTR [eax],edx
c001eea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea6:	83 ec 0c             	sub    esp,0xc
c001eea9:	50                   	push   eax
c001eeaa:	e8 dd 12 ff ff       	call   c001018c <Device::~Device()>
c001eeaf:	83 c4 10             	add    esp,0x10
c001eeb2:	90                   	nop
c001eeb3:	83 c4 0c             	add    esp,0xc
c001eeb6:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001eeb8 <CPU::~CPU()>:
c001eeb8:	83 ec 0c             	sub    esp,0xc
c001eebb:	83 ec 0c             	sub    esp,0xc
c001eebe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eec2:	e8 cd ff ff ff       	call   c001ee94 <CPU::~CPU()>
c001eec7:	83 c4 10             	add    esp,0x10
c001eeca:	83 ec 08             	sub    esp,0x8
c001eecd:	68 98 11 00 00       	push   0x1198
c001eed2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eed6:	e8 24 ff fe ff       	call   c000edff <operator delete(void*, unsigned long)>
c001eedb:	83 c4 10             	add    esp,0x10
c001eede:	83 c4 0c             	add    esp,0xc
c001eee1:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001eee2 <CPU::readCR4()>:
c001eee2:	83 ec 10             	sub    esp,0x10
c001eee5:	0f 20 e0             	mov    eax,cr4
c001eee8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eeec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eef0:	83 c4 10             	add    esp,0x10
c001eef3:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001eef4 <CPU::writeDR7(unsigned long)>:
c001eef4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eef8:	0f 23 f8             	mov    db7,eax
c001eefb:	90                   	nop
c001eefc:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001eefd <CPU::writeCR4(unsigned long)>:
c001eefd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef01:	0f 22 e0             	mov    cr4,eax
c001ef04:	90                   	nop
c001ef05:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001ef06 <CPU::readCR2()>:
c001ef06:	83 ec 10             	sub    esp,0x10
c001ef09:	0f 20 d0             	mov    eax,cr2
c001ef0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ef10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef14:	83 c4 10             	add    esp,0x10
c001ef17:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ef18 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ef18:	90                   	nop
c001ef19:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ef1a <ThreadControlBlock::ThreadControlBlock()>:
c001ef1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef1e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ef25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef29:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ef30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef34:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ef3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef3f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001ef46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef4a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ef4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef52:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001ef56:	90                   	nop
c001ef57:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ef58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ef58:	83 ec 0c             	sub    esp,0xc
c001ef5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef5f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef69:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef74:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef7f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef89:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef94:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef9b:	83 ec 0c             	sub    esp,0xc
c001ef9e:	68 48 04 02 c0       	push   0xc0020448
c001efa3:	e8 37 ff fe ff       	call   c000eedf <Dbg::kprintf(char const*, ...)>
c001efa8:	83 c4 10             	add    esp,0x10
c001efab:	90                   	nop
c001efac:	83 c4 0c             	add    esp,0xc
c001efaf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001efb0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001efb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001efb4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001efb7:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001efb8 <PCI::~PCI()>:
c001efb8:	83 ec 0c             	sub    esp,0xc
c001efbb:	ba a0 22 02 c0       	mov    edx,0xc00222a0
c001efc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc4:	89 10                	mov    DWORD PTR [eax],edx
c001efc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efca:	83 ec 0c             	sub    esp,0xc
c001efcd:	50                   	push   eax
c001efce:	e8 c9 0b ff ff       	call   c000fb9c <Bus::~Bus()>
c001efd3:	83 c4 10             	add    esp,0x10
c001efd6:	90                   	nop
c001efd7:	83 c4 0c             	add    esp,0xc
c001efda:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001efdc <PCI::~PCI()>:
c001efdc:	83 ec 0c             	sub    esp,0xc
c001efdf:	83 ec 0c             	sub    esp,0xc
c001efe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efe6:	e8 cd ff ff ff       	call   c001efb8 <PCI::~PCI()>
c001efeb:	83 c4 10             	add    esp,0x10
c001efee:	83 ec 08             	sub    esp,0x8
c001eff1:	68 58 01 00 00       	push   0x158
c001eff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001effa:	e8 00 fe fe ff       	call   c000edff <operator delete(void*, unsigned long)>
c001efff:	83 c4 10             	add    esp,0x10
c001f002:	83 c4 0c             	add    esp,0xc
c001f005:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f006 <IDE::~IDE()>:
c001f006:	83 ec 0c             	sub    esp,0xc
c001f009:	ba 04 25 02 c0       	mov    edx,0xc0022504
c001f00e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f012:	89 10                	mov    DWORD PTR [eax],edx
c001f014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f018:	83 ec 0c             	sub    esp,0xc
c001f01b:	50                   	push   eax
c001f01c:	e8 81 16 ff ff       	call   c00106a2 <HardDiskController::~HardDiskController()>
c001f021:	83 c4 10             	add    esp,0x10
c001f024:	90                   	nop
c001f025:	83 c4 0c             	add    esp,0xc
c001f028:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f02a <IDE::~IDE()>:
c001f02a:	83 ec 0c             	sub    esp,0xc
c001f02d:	83 ec 0c             	sub    esp,0xc
c001f030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f034:	e8 cd ff ff ff       	call   c001f006 <IDE::~IDE()>
c001f039:	83 c4 10             	add    esp,0x10
c001f03c:	83 ec 08             	sub    esp,0x8
c001f03f:	68 70 02 00 00       	push   0x270
c001f044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f048:	e8 b2 fd fe ff       	call   c000edff <operator delete(void*, unsigned long)>
c001f04d:	83 c4 10             	add    esp,0x10
c001f050:	83 c4 0c             	add    esp,0xc
c001f053:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f054 <ATA::~ATA()>:
c001f054:	83 ec 0c             	sub    esp,0xc
c001f057:	ba 54 25 02 c0       	mov    edx,0xc0022554
c001f05c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f060:	89 10                	mov    DWORD PTR [eax],edx
c001f062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f066:	83 ec 0c             	sub    esp,0xc
c001f069:	50                   	push   eax
c001f06a:	e8 11 17 ff ff       	call   c0010780 <PhysicalDisk::~PhysicalDisk()>
c001f06f:	83 c4 10             	add    esp,0x10
c001f072:	90                   	nop
c001f073:	83 c4 0c             	add    esp,0xc
c001f076:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f078 <ATA::~ATA()>:
c001f078:	83 ec 0c             	sub    esp,0xc
c001f07b:	83 ec 0c             	sub    esp,0xc
c001f07e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f082:	e8 cd ff ff ff       	call   c001f054 <ATA::~ATA()>
c001f087:	83 c4 10             	add    esp,0x10
c001f08a:	83 ec 08             	sub    esp,0x8
c001f08d:	68 7c 01 00 00       	push   0x17c
c001f092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f096:	e8 64 fd fe ff       	call   c000edff <operator delete(void*, unsigned long)>
c001f09b:	83 c4 10             	add    esp,0x10
c001f09e:	83 c4 0c             	add    esp,0xc
c001f0a1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f0a2 <ATAPI::~ATAPI()>:
c001f0a2:	83 ec 0c             	sub    esp,0xc
c001f0a5:	ba c0 25 02 c0       	mov    edx,0xc00225c0
c001f0aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ae:	89 10                	mov    DWORD PTR [eax],edx
c001f0b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0b4:	83 ec 0c             	sub    esp,0xc
c001f0b7:	50                   	push   eax
c001f0b8:	e8 c3 16 ff ff       	call   c0010780 <PhysicalDisk::~PhysicalDisk()>
c001f0bd:	83 c4 10             	add    esp,0x10
c001f0c0:	90                   	nop
c001f0c1:	83 c4 0c             	add    esp,0xc
c001f0c4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f0c6 <ATAPI::~ATAPI()>:
c001f0c6:	83 ec 0c             	sub    esp,0xc
c001f0c9:	83 ec 0c             	sub    esp,0xc
c001f0cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0d0:	e8 cd ff ff ff       	call   c001f0a2 <ATAPI::~ATAPI()>
c001f0d5:	83 c4 10             	add    esp,0x10
c001f0d8:	83 ec 08             	sub    esp,0x8
c001f0db:	68 80 01 00 00       	push   0x180
c001f0e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0e4:	e8 16 fd fe ff       	call   c000edff <operator delete(void*, unsigned long)>
c001f0e9:	83 c4 10             	add    esp,0x10
c001f0ec:	83 c4 0c             	add    esp,0xc
c001f0ef:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001f0f0 <AVX::~AVX()>:
c001f0f0:	83 ec 0c             	sub    esp,0xc
c001f0f3:	ba fc 25 02 c0       	mov    edx,0xc00225fc
c001f0f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0fc:	89 10                	mov    DWORD PTR [eax],edx
c001f0fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f102:	83 ec 0c             	sub    esp,0xc
c001f105:	50                   	push   eax
c001f106:	e8 f9 16 ff ff       	call   c0010804 <FPU::~FPU()>
c001f10b:	83 c4 10             	add    esp,0x10
c001f10e:	90                   	nop
c001f10f:	83 c4 0c             	add    esp,0xc
c001f112:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001f114 <AVX::~AVX()>:
c001f114:	83 ec 0c             	sub    esp,0xc
c001f117:	83 ec 0c             	sub    esp,0xc
c001f11a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f11e:	e8 cd ff ff ff       	call   c001f0f0 <AVX::~AVX()>
c001f123:	83 c4 10             	add    esp,0x10
c001f126:	83 ec 08             	sub    esp,0x8
c001f129:	68 58 01 00 00       	push   0x158
c001f12e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f132:	e8 c8 fc fe ff       	call   c000edff <operator delete(void*, unsigned long)>
c001f137:	83 c4 10             	add    esp,0x10
c001f13a:	83 c4 0c             	add    esp,0xc
c001f13d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001f13e <MMX::~MMX()>:
c001f13e:	83 ec 0c             	sub    esp,0xc
c001f141:	ba 3c 26 02 c0       	mov    edx,0xc002263c
c001f146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f14a:	89 10                	mov    DWORD PTR [eax],edx
c001f14c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f150:	83 ec 0c             	sub    esp,0xc
c001f153:	50                   	push   eax
c001f154:	e8 ab 16 ff ff       	call   c0010804 <FPU::~FPU()>
c001f159:	83 c4 10             	add    esp,0x10
c001f15c:	90                   	nop
c001f15d:	83 c4 0c             	add    esp,0xc
c001f160:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001f162 <MMX::~MMX()>:
c001f162:	83 ec 0c             	sub    esp,0xc
c001f165:	83 ec 0c             	sub    esp,0xc
c001f168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f16c:	e8 cd ff ff ff       	call   c001f13e <MMX::~MMX()>
c001f171:	83 c4 10             	add    esp,0x10
c001f174:	83 ec 08             	sub    esp,0x8
c001f177:	68 58 01 00 00       	push   0x158
c001f17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f180:	e8 7a fc fe ff       	call   c000edff <operator delete(void*, unsigned long)>
c001f185:	83 c4 10             	add    esp,0x10
c001f188:	83 c4 0c             	add    esp,0xc
c001f18b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001f18c <SSE::~SSE()>:
c001f18c:	83 ec 0c             	sub    esp,0xc
c001f18f:	ba 7c 26 02 c0       	mov    edx,0xc002267c
c001f194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f198:	89 10                	mov    DWORD PTR [eax],edx
c001f19a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f19e:	83 ec 0c             	sub    esp,0xc
c001f1a1:	50                   	push   eax
c001f1a2:	e8 5d 16 ff ff       	call   c0010804 <FPU::~FPU()>
c001f1a7:	83 c4 10             	add    esp,0x10
c001f1aa:	90                   	nop
c001f1ab:	83 c4 0c             	add    esp,0xc
c001f1ae:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001f1b0 <SSE::~SSE()>:
c001f1b0:	83 ec 0c             	sub    esp,0xc
c001f1b3:	83 ec 0c             	sub    esp,0xc
c001f1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1ba:	e8 cd ff ff ff       	call   c001f18c <SSE::~SSE()>
c001f1bf:	83 c4 10             	add    esp,0x10
c001f1c2:	83 ec 08             	sub    esp,0x8
c001f1c5:	68 58 01 00 00       	push   0x158
c001f1ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1ce:	e8 2c fc fe ff       	call   c000edff <operator delete(void*, unsigned long)>
c001f1d3:	83 c4 10             	add    esp,0x10
c001f1d6:	83 c4 0c             	add    esp,0xc
c001f1d9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001f1da <x87::~x87()>:
c001f1da:	83 ec 0c             	sub    esp,0xc
c001f1dd:	ba bc 26 02 c0       	mov    edx,0xc00226bc
c001f1e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1e6:	89 10                	mov    DWORD PTR [eax],edx
c001f1e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1ec:	83 ec 0c             	sub    esp,0xc
c001f1ef:	50                   	push   eax
c001f1f0:	e8 0f 16 ff ff       	call   c0010804 <FPU::~FPU()>
c001f1f5:	83 c4 10             	add    esp,0x10
c001f1f8:	90                   	nop
c001f1f9:	83 c4 0c             	add    esp,0xc
c001f1fc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001f1fe <x87::~x87()>:
c001f1fe:	83 ec 0c             	sub    esp,0xc
c001f201:	83 ec 0c             	sub    esp,0xc
c001f204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f208:	e8 cd ff ff ff       	call   c001f1da <x87::~x87()>
c001f20d:	83 c4 10             	add    esp,0x10
c001f210:	83 ec 08             	sub    esp,0x8
c001f213:	68 58 01 00 00       	push   0x158
c001f218:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f21c:	e8 de fb fe ff       	call   c000edff <operator delete(void*, unsigned long)>
c001f221:	83 c4 10             	add    esp,0x10
c001f224:	83 c4 0c             	add    esp,0xc
c001f227:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f228 <IOAPIC::~IOAPIC()>:
c001f228:	83 ec 0c             	sub    esp,0xc
c001f22b:	ba 14 28 02 c0       	mov    edx,0xc0022814
c001f230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f234:	89 10                	mov    DWORD PTR [eax],edx
c001f236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f23a:	83 ec 0c             	sub    esp,0xc
c001f23d:	50                   	push   eax
c001f23e:	e8 49 0f ff ff       	call   c001018c <Device::~Device()>
c001f243:	83 c4 10             	add    esp,0x10
c001f246:	90                   	nop
c001f247:	83 c4 0c             	add    esp,0xc
c001f24a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f24c <IOAPIC::~IOAPIC()>:
c001f24c:	83 ec 0c             	sub    esp,0xc
c001f24f:	83 ec 0c             	sub    esp,0xc
c001f252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f256:	e8 cd ff ff ff       	call   c001f228 <IOAPIC::~IOAPIC()>
c001f25b:	83 c4 10             	add    esp,0x10
c001f25e:	83 ec 08             	sub    esp,0x8
c001f261:	68 68 01 00 00       	push   0x168
c001f266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f26a:	e8 90 fb fe ff       	call   c000edff <operator delete(void*, unsigned long)>
c001f26f:	83 c4 10             	add    esp,0x10
c001f272:	83 c4 0c             	add    esp,0xc
c001f275:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001f276 <APIC::~APIC()>:
c001f276:	83 ec 0c             	sub    esp,0xc
c001f279:	ba cc 27 02 c0       	mov    edx,0xc00227cc
c001f27e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f282:	89 10                	mov    DWORD PTR [eax],edx
c001f284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f288:	83 ec 0c             	sub    esp,0xc
c001f28b:	50                   	push   eax
c001f28c:	e8 31 1a ff ff       	call   c0010cc2 <InterruptController::~InterruptController()>
c001f291:	83 c4 10             	add    esp,0x10
c001f294:	90                   	nop
c001f295:	83 c4 0c             	add    esp,0xc
c001f298:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001f29a <APIC::~APIC()>:
c001f29a:	83 ec 0c             	sub    esp,0xc
c001f29d:	83 ec 0c             	sub    esp,0xc
c001f2a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2a4:	e8 cd ff ff ff       	call   c001f276 <APIC::~APIC()>
c001f2a9:	83 c4 10             	add    esp,0x10
c001f2ac:	83 ec 08             	sub    esp,0x8
c001f2af:	68 58 21 00 00       	push   0x2158
c001f2b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2b8:	e8 42 fb fe ff       	call   c000edff <operator delete(void*, unsigned long)>
c001f2bd:	83 c4 10             	add    esp,0x10
c001f2c0:	83 c4 0c             	add    esp,0xc
c001f2c3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001f2c4 <PIC::~PIC()>:
c001f2c4:	83 ec 0c             	sub    esp,0xc
c001f2c7:	ba 64 28 02 c0       	mov    edx,0xc0022864
c001f2cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2d0:	89 10                	mov    DWORD PTR [eax],edx
c001f2d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2d6:	83 ec 0c             	sub    esp,0xc
c001f2d9:	50                   	push   eax
c001f2da:	e8 e3 19 ff ff       	call   c0010cc2 <InterruptController::~InterruptController()>
c001f2df:	83 c4 10             	add    esp,0x10
c001f2e2:	90                   	nop
c001f2e3:	83 c4 0c             	add    esp,0xc
c001f2e6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001f2e8 <PIC::~PIC()>:
c001f2e8:	83 ec 0c             	sub    esp,0xc
c001f2eb:	83 ec 0c             	sub    esp,0xc
c001f2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2f2:	e8 cd ff ff ff       	call   c001f2c4 <PIC::~PIC()>
c001f2f7:	83 c4 10             	add    esp,0x10
c001f2fa:	83 ec 08             	sub    esp,0x8
c001f2fd:	68 58 21 00 00       	push   0x2158
c001f302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f306:	e8 f4 fa fe ff       	call   c000edff <operator delete(void*, unsigned long)>
c001f30b:	83 c4 10             	add    esp,0x10
c001f30e:	83 c4 0c             	add    esp,0xc
c001f311:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f312 <APICTimer::~APICTimer()>:
c001f312:	83 ec 0c             	sub    esp,0xc
c001f315:	ba b8 28 02 c0       	mov    edx,0xc00228b8
c001f31a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f31e:	89 10                	mov    DWORD PTR [eax],edx
c001f320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f324:	83 ec 0c             	sub    esp,0xc
c001f327:	50                   	push   eax
c001f328:	e8 01 30 ff ff       	call   c001232e <Timer::~Timer()>
c001f32d:	83 c4 10             	add    esp,0x10
c001f330:	90                   	nop
c001f331:	83 c4 0c             	add    esp,0xc
c001f334:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f336 <APICTimer::~APICTimer()>:
c001f336:	83 ec 0c             	sub    esp,0xc
c001f339:	83 ec 0c             	sub    esp,0xc
c001f33c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f340:	e8 cd ff ff ff       	call   c001f312 <APICTimer::~APICTimer()>
c001f345:	83 c4 10             	add    esp,0x10
c001f348:	83 ec 08             	sub    esp,0x8
c001f34b:	68 60 01 00 00       	push   0x160
c001f350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f354:	e8 a6 fa fe ff       	call   c000edff <operator delete(void*, unsigned long)>
c001f359:	83 c4 10             	add    esp,0x10
c001f35c:	83 c4 0c             	add    esp,0xc
c001f35f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f360 <PIT::~PIT()>:
c001f360:	83 ec 0c             	sub    esp,0xc
c001f363:	ba 08 29 02 c0       	mov    edx,0xc0022908
c001f368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f36c:	89 10                	mov    DWORD PTR [eax],edx
c001f36e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f372:	83 ec 0c             	sub    esp,0xc
c001f375:	50                   	push   eax
c001f376:	e8 b3 2f ff ff       	call   c001232e <Timer::~Timer()>
c001f37b:	83 c4 10             	add    esp,0x10
c001f37e:	90                   	nop
c001f37f:	83 c4 0c             	add    esp,0xc
c001f382:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f384 <PIT::~PIT()>:
c001f384:	83 ec 0c             	sub    esp,0xc
c001f387:	83 ec 0c             	sub    esp,0xc
c001f38a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f38e:	e8 cd ff ff ff       	call   c001f360 <PIT::~PIT()>
c001f393:	83 c4 10             	add    esp,0x10
c001f396:	83 ec 08             	sub    esp,0x8
c001f399:	68 5c 01 00 00       	push   0x15c
c001f39e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3a2:	e8 58 fa fe ff       	call   c000edff <operator delete(void*, unsigned long)>
c001f3a7:	83 c4 10             	add    esp,0x10
c001f3aa:	83 c4 0c             	add    esp,0xc
c001f3ad:	c3                   	ret    
