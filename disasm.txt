
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 ed be 00 00       	call   c000bf0d <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 b3 e5 01 00       	call   c001e5d8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 62 f1 01 c0       	mov    ebx,0xc001f162
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 6c f1 01 c0    	cmp    ebx,0xc001f16c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 2c 2c 02 c0       	mov    eax,0xc0022c2c
c0000049:	3d 2c 2c 02 c0       	cmp    eax,0xc0022c2c
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 2c 2c 02 c0       	push   0xc0022c2c
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 2c 2c 02 c0       	mov    eax,0xc0022c2c
c0000075:	2d 2c 2c 02 c0       	sub    eax,0xc0022c2c
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 2c 2c 02 c0       	push   0xc0022c2c
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d cc 2d 02 c0 00 	cmp    BYTE PTR ds:0xc0022dcc,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 74 f1 01 c0       	mov    ebx,0xc001f174
c00000bb:	81 eb 70 f1 01 c0    	sub    ebx,0xc001f170
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 70 f1 01 c0       	mov    esi,0xc001f170
c00000ca:	a1 d0 2d 02 c0       	mov    eax,ds:0xc0022dd0
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 d0 2d 02 c0       	mov    ds:0xc0022dd0,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 d0 2d 02 c0       	mov    eax,ds:0xc0022dd0
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 2c 2c 02 c0       	push   0xc0022c2c
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 cc 2d 02 c0 01 	mov    BYTE PTR ds:0xc0022dcc,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d4 2d 02 c0       	push   0xc0022dd4
c000012c:	68 2c 2c 02 c0       	push   0xc0022c2c
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	c3                   	ret    

c00001b5 <goToVM86>:
c00001b5:	fa                   	cli    
c00001b6:	55                   	push   ebp
c00001b7:	89 e5                	mov    ebp,esp
c00001b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bc:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001bf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001c2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001c5:	25 ff ff 00 00       	and    eax,0xffff
c00001ca:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001d0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00001d6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00001dc:	52                   	push   edx
c00001dd:	51                   	push   ecx
c00001de:	68 02 02 02 00       	push   0x20202
c00001e3:	53                   	push   ebx
c00001e4:	50                   	push   eax
c00001e5:	cf                   	iret   

c00001e6 <goToUsermode>:
c00001e6:	fa                   	cli    
c00001e7:	55                   	push   ebp
c00001e8:	89 e5                	mov    ebp,esp
c00001ea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00001ed:	66 b8 23 00          	mov    ax,0x23
c00001f1:	66 8e d8             	mov    ds,ax
c00001f4:	66 8e c0             	mov    es,ax
c00001f7:	66 8e e0             	mov    fs,ax
c00001fa:	66 8e e8             	mov    gs,ax
c00001fd:	89 e0                	mov    eax,esp
c00001ff:	68 23 00 00 00       	push   0x23
c0000204:	50                   	push   eax
c0000205:	68 02 02 00 00       	push   0x202
c000020a:	68 1b 00 00 00       	push   0x1b
c000020f:	53                   	push   ebx
c0000210:	cf                   	iret   

c0000211 <switchToThreadASMFirstTime>:
c0000211:	9c                   	pushf  
c0000212:	fa                   	cli    
c0000213:	50                   	push   eax
c0000214:	53                   	push   ebx
c0000215:	51                   	push   ecx
c0000216:	52                   	push   edx
c0000217:	56                   	push   esi
c0000218:	57                   	push   edi
c0000219:	55                   	push   ebp
c000021a:	e9 11 00 00 00       	jmp    c0000230 <commonThreadSwitch>

c000021f <switchToThreadASM>:
c000021f:	9c                   	pushf  
c0000220:	50                   	push   eax
c0000221:	53                   	push   ebx
c0000222:	51                   	push   ecx
c0000223:	52                   	push   edx
c0000224:	56                   	push   esi
c0000225:	57                   	push   edi
c0000226:	55                   	push   ebp
c0000227:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000022d:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000230 <commonThreadSwitch>:
c0000230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000234:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000023a:	8b 06                	mov    eax,DWORD PTR [esi]
c000023c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000023f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000242:	0f 20 d9             	mov    ecx,cr3
c0000245:	39 c8                	cmp    eax,ecx
c0000247:	74 03                	je     c000024c <commonThreadSwitch.doneVAS>
c0000249:	0f 22 d8             	mov    cr3,eax

c000024c <commonThreadSwitch.doneVAS>:
c000024c:	85 d2                	test   edx,edx
c000024e:	74 4e                	je     c000029e <commonThreadSwitch.notFirstTime>
c0000250:	fa                   	cli    
c0000251:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000254:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000259:	60                   	pusha  
c000025a:	e8 5b e9 00 00       	call   c000ebba <mapVASFirstTime>
c000025f:	61                   	popa   
c0000260:	89 c4                	mov    esp,eax
c0000262:	56                   	push   esi
c0000263:	52                   	push   edx
c0000264:	e8 91 71 01 00       	call   c00173fa <changeTSS>
c0000269:	5a                   	pop    edx
c000026a:	5e                   	pop    esi
c000026b:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000272:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000278:	74 39                	je     c00002b3 <commonThreadSwitch.cameOffAFork>
c000027a:	5d                   	pop    ebp
c000027b:	5f                   	pop    edi
c000027c:	5e                   	pop    esi
c000027d:	59                   	pop    ecx
c000027e:	59                   	pop    ecx
c000027f:	5b                   	pop    ebx
c0000280:	58                   	pop    eax
c0000281:	81 c4 04 00 00 00    	add    esp,0x4
c0000287:	6a 02                	push   0x2
c0000289:	9d                   	popf   
c000028a:	52                   	push   edx
c000028b:	e8 7d 75 01 00       	call   c001780d <taskStartupFunction>
c0000290:	5a                   	pop    edx
c0000291:	50                   	push   eax
c0000292:	ff d2                	call   edx
c0000294:	e8 23 7d 01 00       	call   c0017fbc <taskReturned>
c0000299:	e9 fb ff ff ff       	jmp    c0000299 <commonThreadSwitch.doneVAS+0x4d>

c000029e <commonThreadSwitch.notFirstTime>:
c000029e:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a1:	56                   	push   esi
c00002a2:	52                   	push   edx
c00002a3:	e8 52 71 01 00       	call   c00173fa <changeTSS>
c00002a8:	5a                   	pop    edx
c00002a9:	5e                   	pop    esi
c00002aa:	5d                   	pop    ebp
c00002ab:	5f                   	pop    edi
c00002ac:	5e                   	pop    esi
c00002ad:	5a                   	pop    edx
c00002ae:	59                   	pop    ecx
c00002af:	5b                   	pop    ebx
c00002b0:	58                   	pop    eax
c00002b1:	9d                   	popf   
c00002b2:	c3                   	ret    

c00002b3 <commonThreadSwitch.cameOffAFork>:
c00002b3:	31 c0                	xor    eax,eax
c00002b5:	31 d2                	xor    edx,edx
c00002b7:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002ba:	e9 a2 02 00 00       	jmp    c0000561 <offAForkJumpThingy>

c00002bf <detectCPUID>:
c00002bf:	9c                   	pushf  
c00002c0:	9c                   	pushf  
c00002c1:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002c8:	9d                   	popf   
c00002c9:	9c                   	pushf  
c00002ca:	58                   	pop    eax
c00002cb:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002ce:	9d                   	popf   
c00002cf:	25 00 00 20 00       	and    eax,0x200000
c00002d4:	c3                   	ret    

c00002d5 <asmQuickAcquireLock>:
c00002d5:	55                   	push   ebp
c00002d6:	89 e5                	mov    ebp,esp
c00002d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00002db <asmQuickAcquireLock.retry>:
c00002db:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00002e0:	72 02                	jb     c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002e2:	fa                   	cli    
c00002e3:	c3                   	ret    

c00002e4 <asmQuickAcquireLock.spin_with_pause>:
c00002e4:	f3 90                	pause  
c00002e6:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00002ec:	75 f6                	jne    c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002ee:	e9 e8 ff ff ff       	jmp    c00002db <asmQuickAcquireLock.retry>

c00002f3 <asmQuickReleaseLock>:
c00002f3:	55                   	push   ebp
c00002f4:	89 e5                	mov    ebp,esp
c00002f6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00002fd:	5d                   	pop    ebp
c00002fe:	c3                   	ret    

c00002ff <asmAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 05                	jb     c0000311 <asmAcquireLock.spin_with_pause>
c000030c:	9c                   	pushf  
c000030d:	58                   	pop    eax
c000030e:	fa                   	cli    
c000030f:	5d                   	pop    ebp
c0000310:	c3                   	ret    

c0000311 <asmAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmAcquireLock.spin_with_pause>
c000031b:	e9 e5 ff ff ff       	jmp    c0000305 <asmAcquireLock.retry>

c0000320 <asmReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000329:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000032f:	52                   	push   edx
c0000330:	9d                   	popf   
c0000331:	5d                   	pop    ebp
c0000332:	c3                   	ret    

c0000333 <loadGDT>:
c0000333:	0f 01 15 10 32 02 c0 	lgdtd  ds:0xc0023210
c000033a:	66 b8 10 00          	mov    ax,0x10
c000033e:	66 8e d8             	mov    ds,ax
c0000341:	66 8e c0             	mov    es,ax
c0000344:	66 8e e0             	mov    fs,ax
c0000347:	66 8e e8             	mov    gs,ax
c000034a:	66 8e d0             	mov    ss,ax
c000034d:	e9 00 00 00 00       	jmp    c0000352 <flush2>

c0000352 <flush2>:
c0000352:	c3                   	ret    

c0000353 <isr0>:
c0000353:	fa                   	cli    
c0000354:	68 00 00 00 00       	push   0x0
c0000359:	68 00 00 00 00       	push   0x0
c000035e:	e9 a2 01 00 00       	jmp    c0000505 <int_common_stub>

c0000363 <isr1>:
c0000363:	fa                   	cli    
c0000364:	6a 00                	push   0x0
c0000366:	6a 01                	push   0x1
c0000368:	e9 98 01 00 00       	jmp    c0000505 <int_common_stub>

c000036d <isr2>:
c000036d:	fa                   	cli    
c000036e:	6a 00                	push   0x0
c0000370:	6a 02                	push   0x2
c0000372:	e9 8e 01 00 00       	jmp    c0000505 <int_common_stub>

c0000377 <isr3>:
c0000377:	fa                   	cli    
c0000378:	6a 00                	push   0x0
c000037a:	6a 03                	push   0x3
c000037c:	e9 84 01 00 00       	jmp    c0000505 <int_common_stub>

c0000381 <isr4>:
c0000381:	fa                   	cli    
c0000382:	6a 00                	push   0x0
c0000384:	6a 04                	push   0x4
c0000386:	e9 7a 01 00 00       	jmp    c0000505 <int_common_stub>

c000038b <isr5>:
c000038b:	fa                   	cli    
c000038c:	6a 00                	push   0x0
c000038e:	6a 05                	push   0x5
c0000390:	e9 70 01 00 00       	jmp    c0000505 <int_common_stub>

c0000395 <isr6>:
c0000395:	fa                   	cli    
c0000396:	6a 00                	push   0x0
c0000398:	6a 06                	push   0x6
c000039a:	e9 66 01 00 00       	jmp    c0000505 <int_common_stub>

c000039f <isr7>:
c000039f:	fa                   	cli    
c00003a0:	6a 00                	push   0x0
c00003a2:	6a 07                	push   0x7
c00003a4:	e9 5c 01 00 00       	jmp    c0000505 <int_common_stub>

c00003a9 <isr8>:
c00003a9:	fa                   	cli    
c00003aa:	6a 08                	push   0x8
c00003ac:	e9 54 01 00 00       	jmp    c0000505 <int_common_stub>

c00003b1 <isr9>:
c00003b1:	fa                   	cli    
c00003b2:	6a 00                	push   0x0
c00003b4:	6a 09                	push   0x9
c00003b6:	e9 4a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003bb <isr10>:
c00003bb:	fa                   	cli    
c00003bc:	6a 0a                	push   0xa
c00003be:	e9 42 01 00 00       	jmp    c0000505 <int_common_stub>

c00003c3 <isr11>:
c00003c3:	fa                   	cli    
c00003c4:	6a 0b                	push   0xb
c00003c6:	e9 3a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003cb <isr12>:
c00003cb:	fa                   	cli    
c00003cc:	6a 0c                	push   0xc
c00003ce:	e9 32 01 00 00       	jmp    c0000505 <int_common_stub>

c00003d3 <isr13>:
c00003d3:	fa                   	cli    
c00003d4:	6a 0d                	push   0xd
c00003d6:	e9 2a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003db <isr14>:
c00003db:	fa                   	cli    
c00003dc:	6a 0e                	push   0xe
c00003de:	e9 22 01 00 00       	jmp    c0000505 <int_common_stub>

c00003e3 <isr15>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 0f                	push   0xf
c00003e8:	e9 18 01 00 00       	jmp    c0000505 <int_common_stub>

c00003ed <isr16>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 10                	push   0x10
c00003f2:	e9 0e 01 00 00       	jmp    c0000505 <int_common_stub>

c00003f7 <isr17>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 11                	push   0x11
c00003fc:	e9 04 01 00 00       	jmp    c0000505 <int_common_stub>

c0000401 <isr18>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 12                	push   0x12
c0000406:	e9 fa 00 00 00       	jmp    c0000505 <int_common_stub>

c000040b <isr96>:
c000040b:	fa                   	cli    
c000040c:	6a 00                	push   0x0
c000040e:	6a 60                	push   0x60
c0000410:	e9 20 01 00 00       	jmp    c0000535 <syscall_common_stub>

c0000415 <irq0>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 20                	push   0x20
c000041a:	e9 e6 00 00 00       	jmp    c0000505 <int_common_stub>

c000041f <irq1>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 21                	push   0x21
c0000424:	e9 dc 00 00 00       	jmp    c0000505 <int_common_stub>

c0000429 <irq2>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 22                	push   0x22
c000042e:	e9 d2 00 00 00       	jmp    c0000505 <int_common_stub>

c0000433 <irq3>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 23                	push   0x23
c0000438:	e9 c8 00 00 00       	jmp    c0000505 <int_common_stub>

c000043d <irq4>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 24                	push   0x24
c0000442:	e9 be 00 00 00       	jmp    c0000505 <int_common_stub>

c0000447 <irq5>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 25                	push   0x25
c000044c:	e9 b4 00 00 00       	jmp    c0000505 <int_common_stub>

c0000451 <irq6>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 26                	push   0x26
c0000456:	e9 aa 00 00 00       	jmp    c0000505 <int_common_stub>

c000045b <irq7>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 27                	push   0x27
c0000460:	e9 a0 00 00 00       	jmp    c0000505 <int_common_stub>

c0000465 <irq8>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 28                	push   0x28
c000046a:	e9 96 00 00 00       	jmp    c0000505 <int_common_stub>

c000046f <irq9>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 29                	push   0x29
c0000474:	e9 8c 00 00 00       	jmp    c0000505 <int_common_stub>

c0000479 <irq10>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 2a                	push   0x2a
c000047e:	e9 82 00 00 00       	jmp    c0000505 <int_common_stub>

c0000483 <irq11>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 2b                	push   0x2b
c0000488:	e9 78 00 00 00       	jmp    c0000505 <int_common_stub>

c000048d <irq12>:
c000048d:	fa                   	cli    
c000048e:	6a 00                	push   0x0
c0000490:	6a 2c                	push   0x2c
c0000492:	e9 6e 00 00 00       	jmp    c0000505 <int_common_stub>

c0000497 <irq13>:
c0000497:	fa                   	cli    
c0000498:	6a 00                	push   0x0
c000049a:	6a 2d                	push   0x2d
c000049c:	e9 64 00 00 00       	jmp    c0000505 <int_common_stub>

c00004a1 <irq14>:
c00004a1:	fa                   	cli    
c00004a2:	6a 00                	push   0x0
c00004a4:	6a 2e                	push   0x2e
c00004a6:	e9 5a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004ab <irq15>:
c00004ab:	fa                   	cli    
c00004ac:	6a 00                	push   0x0
c00004ae:	6a 2f                	push   0x2f
c00004b0:	e9 50 00 00 00       	jmp    c0000505 <int_common_stub>

c00004b5 <irq16>:
c00004b5:	fa                   	cli    
c00004b6:	6a 00                	push   0x0
c00004b8:	6a 30                	push   0x30
c00004ba:	e9 46 00 00 00       	jmp    c0000505 <int_common_stub>

c00004bf <irq17>:
c00004bf:	fa                   	cli    
c00004c0:	6a 00                	push   0x0
c00004c2:	6a 31                	push   0x31
c00004c4:	e9 3c 00 00 00       	jmp    c0000505 <int_common_stub>

c00004c9 <irq18>:
c00004c9:	fa                   	cli    
c00004ca:	6a 00                	push   0x0
c00004cc:	6a 32                	push   0x32
c00004ce:	e9 32 00 00 00       	jmp    c0000505 <int_common_stub>

c00004d3 <irq19>:
c00004d3:	fa                   	cli    
c00004d4:	6a 00                	push   0x0
c00004d6:	6a 33                	push   0x33
c00004d8:	e9 28 00 00 00       	jmp    c0000505 <int_common_stub>

c00004dd <irq20>:
c00004dd:	fa                   	cli    
c00004de:	6a 00                	push   0x0
c00004e0:	6a 34                	push   0x34
c00004e2:	e9 1e 00 00 00       	jmp    c0000505 <int_common_stub>

c00004e7 <irq21>:
c00004e7:	fa                   	cli    
c00004e8:	6a 00                	push   0x0
c00004ea:	6a 35                	push   0x35
c00004ec:	e9 14 00 00 00       	jmp    c0000505 <int_common_stub>

c00004f1 <irq22>:
c00004f1:	fa                   	cli    
c00004f2:	6a 00                	push   0x0
c00004f4:	6a 36                	push   0x36
c00004f6:	e9 0a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004fb <irq23>:
c00004fb:	fa                   	cli    
c00004fc:	6a 00                	push   0x0
c00004fe:	6a 37                	push   0x37
c0000500:	e9 00 00 00 00       	jmp    c0000505 <int_common_stub>

c0000505 <int_common_stub>:
c0000505:	60                   	pusha  
c0000506:	1e                   	push   ds
c0000507:	06                   	push   es
c0000508:	0f a0                	push   fs
c000050a:	0f a8                	push   gs
c000050c:	66 b8 10 00          	mov    ax,0x10
c0000510:	66 8e d8             	mov    ds,ax
c0000513:	66 8e c0             	mov    es,ax
c0000516:	66 8e e0             	mov    fs,ax
c0000519:	66 8e e8             	mov    gs,ax
c000051c:	89 e1                	mov    ecx,esp
c000051e:	51                   	push   ecx
c000051f:	b9 87 0a 01 c0       	mov    ecx,0xc0010a87
c0000524:	ff d1                	call   ecx
c0000526:	59                   	pop    ecx
c0000527:	0f a9                	pop    gs
c0000529:	0f a1                	pop    fs
c000052b:	07                   	pop    es
c000052c:	1f                   	pop    ds
c000052d:	61                   	popa   
c000052e:	81 c4 08 00 00 00    	add    esp,0x8
c0000534:	cf                   	iret   

c0000535 <syscall_common_stub>:
c0000535:	60                   	pusha  
c0000536:	1e                   	push   ds
c0000537:	06                   	push   es
c0000538:	0f a0                	push   fs
c000053a:	0f a8                	push   gs
c000053c:	66 b8 10 00          	mov    ax,0x10
c0000540:	66 8e d8             	mov    ds,ax
c0000543:	66 8e c0             	mov    es,ax
c0000546:	66 8e e0             	mov    fs,ax
c0000549:	66 8e e8             	mov    gs,ax
c000054c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000552:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000555:	89 e1                	mov    ecx,esp
c0000557:	51                   	push   ecx
c0000558:	fb                   	sti    
c0000559:	b9 87 0a 01 c0       	mov    ecx,0xc0010a87
c000055e:	ff d1                	call   ecx
c0000560:	59                   	pop    ecx

c0000561 <offAForkJumpThingy>:
c0000561:	0f a9                	pop    gs
c0000563:	0f a1                	pop    fs
c0000565:	07                   	pop    es
c0000566:	1f                   	pop    ds
c0000567:	61                   	popa   
c0000568:	81 c4 08 00 00 00    	add    esp,0x8
c000056e:	cf                   	iret   

c000056f <memcmp>:
c000056f:	56                   	push   esi
c0000570:	53                   	push   ebx
c0000571:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000575:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000057d:	01 d6                	add    esi,edx
c000057f:	39 f2                	cmp    edx,esi
c0000581:	74 0e                	je     c0000591 <memcmp+0x22>
c0000583:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000586:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000589:	38 c8                	cmp    al,cl
c000058b:	75 08                	jne    c0000595 <memcmp+0x26>
c000058d:	42                   	inc    edx
c000058e:	43                   	inc    ebx
c000058f:	eb ee                	jmp    c000057f <memcmp+0x10>
c0000591:	31 c0                	xor    eax,eax
c0000593:	eb 02                	jmp    c0000597 <memcmp+0x28>
c0000595:	29 c8                	sub    eax,ecx
c0000597:	5b                   	pop    ebx
c0000598:	5e                   	pop    esi
c0000599:	c3                   	ret    

c000059a <memmove>:
c000059a:	56                   	push   esi
c000059b:	53                   	push   ebx
c000059c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00005a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00005a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00005a8:	39 c8                	cmp    eax,ecx
c00005aa:	73 12                	jae    c00005be <memmove+0x24>
c00005ac:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00005af:	89 c3                	mov    ebx,eax
c00005b1:	39 f1                	cmp    ecx,esi
c00005b3:	74 1a                	je     c00005cf <memmove+0x35>
c00005b5:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005b7:	43                   	inc    ebx
c00005b8:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00005bb:	41                   	inc    ecx
c00005bc:	eb f3                	jmp    c00005b1 <memmove+0x17>
c00005be:	76 0f                	jbe    c00005cf <memmove+0x35>
c00005c0:	85 d2                	test   edx,edx
c00005c2:	74 0b                	je     c00005cf <memmove+0x35>
c00005c4:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c00005c8:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c00005cc:	4a                   	dec    edx
c00005cd:	eb f1                	jmp    c00005c0 <memmove+0x26>
c00005cf:	5b                   	pop    ebx
c00005d0:	5e                   	pop    esi
c00005d1:	c3                   	ret    

c00005d2 <memcpy>:
c00005d2:	57                   	push   edi
c00005d3:	56                   	push   esi
c00005d4:	53                   	push   ebx
c00005d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005dd:	89 da                	mov    edx,ebx
c00005df:	89 d9                	mov    ecx,ebx
c00005e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005e5:	83 e2 fc             	and    edx,0xfffffffc
c00005e8:	c1 e9 02             	shr    ecx,0x2
c00005eb:	89 c7                	mov    edi,eax
c00005ed:	fc                   	cld    
c00005ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00005f0:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00005f3:	01 c2                	add    edx,eax
c00005f5:	01 de                	add    esi,ebx
c00005f7:	39 f1                	cmp    ecx,esi
c00005f9:	74 09                	je     c0000604 <memcpy+0x32>
c00005fb:	8a 19                	mov    bl,BYTE PTR [ecx]
c00005fd:	42                   	inc    edx
c00005fe:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000601:	41                   	inc    ecx
c0000602:	eb f3                	jmp    c00005f7 <memcpy+0x25>
c0000604:	5b                   	pop    ebx
c0000605:	5e                   	pop    esi
c0000606:	5f                   	pop    edi
c0000607:	c3                   	ret    

c0000608 <memset>:
c0000608:	53                   	push   ebx
c0000609:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000060d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000611:	89 c2                	mov    edx,eax
c0000613:	01 c1                	add    ecx,eax
c0000615:	39 ca                	cmp    edx,ecx
c0000617:	74 0a                	je     c0000623 <memset+0x1b>
c0000619:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c000061d:	42                   	inc    edx
c000061e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000621:	eb f2                	jmp    c0000615 <memset+0xd>
c0000623:	5b                   	pop    ebx
c0000624:	c3                   	ret    

c0000625 <strlen>:
c0000625:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000629:	31 c0                	xor    eax,eax
c000062b:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000062f:	74 03                	je     c0000634 <strlen+0xf>
c0000631:	40                   	inc    eax
c0000632:	eb f7                	jmp    c000062b <strlen+0x6>
c0000634:	c3                   	ret    

c0000635 <strpbrk>:
c0000635:	53                   	push   ebx
c0000636:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000063a:	8a 08                	mov    cl,BYTE PTR [eax]
c000063c:	84 c9                	test   cl,cl
c000063e:	74 14                	je     c0000654 <strpbrk+0x1f>
c0000640:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000644:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000646:	84 db                	test   bl,bl
c0000648:	74 07                	je     c0000651 <strpbrk+0x1c>
c000064a:	38 cb                	cmp    bl,cl
c000064c:	74 08                	je     c0000656 <strpbrk+0x21>
c000064e:	42                   	inc    edx
c000064f:	eb f3                	jmp    c0000644 <strpbrk+0xf>
c0000651:	40                   	inc    eax
c0000652:	eb e6                	jmp    c000063a <strpbrk+0x5>
c0000654:	31 c0                	xor    eax,eax
c0000656:	5b                   	pop    ebx
c0000657:	c3                   	ret    

c0000658 <strtok>:
c0000658:	56                   	push   esi
c0000659:	53                   	push   ebx
c000065a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000065e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000662:	85 db                	test   ebx,ebx
c0000664:	75 0e                	jne    c0000674 <strtok+0x1c>
c0000666:	8b 1d ec 2d 02 c0    	mov    ebx,DWORD PTR ds:0xc0022dec
c000066c:	85 db                	test   ebx,ebx
c000066e:	75 04                	jne    c0000674 <strtok+0x1c>
c0000670:	31 db                	xor    ebx,ebx
c0000672:	eb 2e                	jmp    c00006a2 <strtok+0x4a>
c0000674:	56                   	push   esi
c0000675:	53                   	push   ebx
c0000676:	e8 ba ff ff ff       	call   c0000635 <strpbrk>
c000067b:	5a                   	pop    edx
c000067c:	a3 ec 2d 02 c0       	mov    ds:0xc0022dec,eax
c0000681:	59                   	pop    ecx
c0000682:	a1 ec 2d 02 c0       	mov    eax,ds:0xc0022dec
c0000687:	39 d8                	cmp    eax,ebx
c0000689:	75 07                	jne    c0000692 <strtok+0x3a>
c000068b:	43                   	inc    ebx
c000068c:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000690:	eb e2                	jmp    c0000674 <strtok+0x1c>
c0000692:	85 c0                	test   eax,eax
c0000694:	74 da                	je     c0000670 <strtok+0x18>
c0000696:	8d 50 01             	lea    edx,[eax+0x1]
c0000699:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000069c:	89 15 ec 2d 02 c0    	mov    DWORD PTR ds:0xc0022dec,edx
c00006a2:	89 d8                	mov    eax,ebx
c00006a4:	5b                   	pop    ebx
c00006a5:	5e                   	pop    esi
c00006a6:	c3                   	ret    

c00006a7 <strcpy>:
c00006a7:	53                   	push   ebx
c00006a8:	31 d2                	xor    edx,edx
c00006aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00006b2:	8d 1c 10             	lea    ebx,[eax+edx*1]
c00006b5:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00006b8:	84 c9                	test   cl,cl
c00006ba:	74 06                	je     c00006c2 <strcpy+0x1b>
c00006bc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00006bf:	42                   	inc    edx
c00006c0:	eb ec                	jmp    c00006ae <strcpy+0x7>
c00006c2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00006c5:	5b                   	pop    ebx
c00006c6:	c3                   	ret    

c00006c7 <strncpy>:
c00006c7:	56                   	push   esi
c00006c8:	53                   	push   ebx
c00006c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00006d5:	89 c3                	mov    ebx,eax
c00006d7:	85 c9                	test   ecx,ecx
c00006d9:	74 1a                	je     c00006f5 <strncpy+0x2e>
c00006db:	46                   	inc    esi
c00006dc:	43                   	inc    ebx
c00006dd:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00006e0:	49                   	dec    ecx
c00006e1:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00006e4:	84 d2                	test   dl,dl
c00006e6:	75 ef                	jne    c00006d7 <strncpy+0x10>
c00006e8:	31 d2                	xor    edx,edx
c00006ea:	39 d1                	cmp    ecx,edx
c00006ec:	74 07                	je     c00006f5 <strncpy+0x2e>
c00006ee:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00006f2:	42                   	inc    edx
c00006f3:	eb f5                	jmp    c00006ea <strncpy+0x23>
c00006f5:	5b                   	pop    ebx
c00006f6:	5e                   	pop    esi
c00006f7:	c3                   	ret    

c00006f8 <strcmp>:
c00006f8:	31 c9                	xor    ecx,ecx
c00006fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00006fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000702:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000706:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000070a:	38 d0                	cmp    al,dl
c000070c:	75 08                	jne    c0000716 <strcmp+0x1e>
c000070e:	41                   	inc    ecx
c000070f:	84 c0                	test   al,al
c0000711:	75 e7                	jne    c00006fa <strcmp+0x2>
c0000713:	31 c0                	xor    eax,eax
c0000715:	c3                   	ret    
c0000716:	29 d0                	sub    eax,edx
c0000718:	c3                   	ret    

c0000719 <strchr>:
c0000719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000071d:	8a 10                	mov    dl,BYTE PTR [eax]
c000071f:	84 d2                	test   dl,dl
c0000721:	74 09                	je     c000072c <strchr+0x13>
c0000723:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c0000727:	74 05                	je     c000072e <strchr+0x15>
c0000729:	40                   	inc    eax
c000072a:	eb f1                	jmp    c000071d <strchr+0x4>
c000072c:	31 c0                	xor    eax,eax
c000072e:	c3                   	ret    

c000072f <strncmp>:
c000072f:	56                   	push   esi
c0000730:	53                   	push   ebx
c0000731:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000735:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000073d:	01 d6                	add    esi,edx
c000073f:	39 f2                	cmp    edx,esi
c0000741:	74 12                	je     c0000755 <strncmp+0x26>
c0000743:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000746:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000749:	38 c8                	cmp    al,cl
c000074b:	75 0c                	jne    c0000759 <strncmp+0x2a>
c000074d:	42                   	inc    edx
c000074e:	84 c0                	test   al,al
c0000750:	74 03                	je     c0000755 <strncmp+0x26>
c0000752:	43                   	inc    ebx
c0000753:	eb ea                	jmp    c000073f <strncmp+0x10>
c0000755:	31 c0                	xor    eax,eax
c0000757:	eb 02                	jmp    c000075b <strncmp+0x2c>
c0000759:	29 c8                	sub    eax,ecx
c000075b:	5b                   	pop    ebx
c000075c:	5e                   	pop    esi
c000075d:	c3                   	ret    

c000075e <strcat>:
c000075e:	53                   	push   ebx
c000075f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000763:	89 c1                	mov    ecx,eax
c0000765:	8d 51 01             	lea    edx,[ecx+0x1]
c0000768:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000076c:	74 04                	je     c0000772 <strcat+0x14>
c000076e:	89 d1                	mov    ecx,edx
c0000770:	eb f3                	jmp    c0000765 <strcat+0x7>
c0000772:	31 d2                	xor    edx,edx
c0000774:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000778:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000077b:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000077e:	42                   	inc    edx
c000077f:	84 db                	test   bl,bl
c0000781:	75 f1                	jne    c0000774 <strcat+0x16>
c0000783:	5b                   	pop    ebx
c0000784:	c3                   	ret    

c0000785 <strncat>:
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000793:	89 c2                	mov    edx,eax
c0000795:	85 db                	test   ebx,ebx
c0000797:	74 23                	je     c00007bc <strncat+0x37>
c0000799:	8d 72 01             	lea    esi,[edx+0x1]
c000079c:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c00007a0:	74 04                	je     c00007a6 <strncat+0x21>
c00007a2:	89 f2                	mov    edx,esi
c00007a4:	eb f3                	jmp    c0000799 <strncat+0x14>
c00007a6:	8d 34 19             	lea    esi,[ecx+ebx*1]
c00007a9:	41                   	inc    ecx
c00007aa:	42                   	inc    edx
c00007ab:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00007ae:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007b1:	84 db                	test   bl,bl
c00007b3:	74 07                	je     c00007bc <strncat+0x37>
c00007b5:	39 f1                	cmp    ecx,esi
c00007b7:	75 f0                	jne    c00007a9 <strncat+0x24>
c00007b9:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00007bc:	5b                   	pop    ebx
c00007bd:	5e                   	pop    esi
c00007be:	c3                   	ret    

c00007bf <strstr>:
c00007bf:	57                   	push   edi
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ca:	57                   	push   edi
c00007cb:	e8 55 fe ff ff       	call   c0000625 <strlen>
c00007d0:	59                   	pop    ecx
c00007d1:	89 c6                	mov    esi,eax
c00007d3:	85 c0                	test   eax,eax
c00007d5:	74 1f                	je     c00007f6 <strstr+0x37>
c00007d7:	53                   	push   ebx
c00007d8:	e8 48 fe ff ff       	call   c0000625 <strlen>
c00007dd:	5a                   	pop    edx
c00007de:	39 f0                	cmp    eax,esi
c00007e0:	72 12                	jb     c00007f4 <strstr+0x35>
c00007e2:	56                   	push   esi
c00007e3:	57                   	push   edi
c00007e4:	53                   	push   ebx
c00007e5:	e8 85 fd ff ff       	call   c000056f <memcmp>
c00007ea:	83 c4 0c             	add    esp,0xc
c00007ed:	85 c0                	test   eax,eax
c00007ef:	74 05                	je     c00007f6 <strstr+0x37>
c00007f1:	43                   	inc    ebx
c00007f2:	eb e3                	jmp    c00007d7 <strstr+0x18>
c00007f4:	31 db                	xor    ebx,ebx
c00007f6:	89 d8                	mov    eax,ebx
c00007f8:	5b                   	pop    ebx
c00007f9:	5e                   	pop    esi
c00007fa:	5f                   	pop    edi
c00007fb:	c3                   	ret    

c00007fc <toupper>:
c00007fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000800:	0f b6 d0             	movzx  edx,al
c0000803:	f6 82 80 f1 01 c0 02 	test   BYTE PTR [edx-0x3ffe0e80],0x2
c000080a:	74 03                	je     c000080f <toupper+0x13>
c000080c:	83 e8 20             	sub    eax,0x20
c000080f:	c3                   	ret    

c0000810 <tolower>:
c0000810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000814:	0f b6 d0             	movzx  edx,al
c0000817:	f6 82 80 f1 01 c0 01 	test   BYTE PTR [edx-0x3ffe0e80],0x1
c000081e:	74 03                	je     c0000823 <tolower+0x13>
c0000820:	83 c0 20             	add    eax,0x20
c0000823:	c3                   	ret    

c0000824 <simple_strtoul>:
c0000824:	55                   	push   ebp
c0000825:	57                   	push   edi
c0000826:	56                   	push   esi
c0000827:	53                   	push   ebx
c0000828:	83 ec 08             	sub    esp,0x8
c000082b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000082f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000833:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000836:	f6 82 80 f1 01 c0 08 	test   BYTE PTR [edx-0x3ffe0e80],0x8
c000083d:	74 03                	je     c0000842 <simple_strtoul+0x1e>
c000083f:	41                   	inc    ecx
c0000840:	eb f1                	jmp    c0000833 <simple_strtoul+0xf>
c0000842:	80 fa 09             	cmp    dl,0x9
c0000845:	74 f8                	je     c000083f <simple_strtoul+0x1b>
c0000847:	80 fa 2d             	cmp    dl,0x2d
c000084a:	75 0b                	jne    c0000857 <simple_strtoul+0x33>
c000084c:	41                   	inc    ecx
c000084d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000855:	eb 0e                	jmp    c0000865 <simple_strtoul+0x41>
c0000857:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000085f:	80 fa 2b             	cmp    dl,0x2b
c0000862:	75 01                	jne    c0000865 <simple_strtoul+0x41>
c0000864:	41                   	inc    ecx
c0000865:	85 f6                	test   esi,esi
c0000867:	75 22                	jne    c000088b <simple_strtoul+0x67>
c0000869:	be 0a 00 00 00       	mov    esi,0xa
c000086e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000871:	75 5a                	jne    c00008cd <simple_strtoul+0xa9>
c0000873:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000877:	50                   	push   eax
c0000878:	e8 93 ff ff ff       	call   c0000810 <tolower>
c000087d:	5a                   	pop    edx
c000087e:	83 f8 78             	cmp    eax,0x78
c0000881:	74 03                	je     c0000886 <simple_strtoul+0x62>
c0000883:	41                   	inc    ecx
c0000884:	eb 16                	jmp    c000089c <simple_strtoul+0x78>
c0000886:	83 c1 02             	add    ecx,0x2
c0000889:	eb 22                	jmp    c00008ad <simple_strtoul+0x89>
c000088b:	8d 46 fe             	lea    eax,[esi-0x2]
c000088e:	83 f8 22             	cmp    eax,0x22
c0000891:	0f 87 b7 00 00 00    	ja     c000094e <simple_strtoul+0x12a>
c0000897:	83 fe 08             	cmp    esi,0x8
c000089a:	75 0c                	jne    c00008a8 <simple_strtoul+0x84>
c000089c:	be 08 00 00 00       	mov    esi,0x8
c00008a1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008a4:	75 27                	jne    c00008cd <simple_strtoul+0xa9>
c00008a6:	eb 1f                	jmp    c00008c7 <simple_strtoul+0xa3>
c00008a8:	83 fe 10             	cmp    esi,0x10
c00008ab:	75 20                	jne    c00008cd <simple_strtoul+0xa9>
c00008ad:	be 10 00 00 00       	mov    esi,0x10
c00008b2:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008b5:	75 16                	jne    c00008cd <simple_strtoul+0xa9>
c00008b7:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008bb:	50                   	push   eax
c00008bc:	e8 4f ff ff ff       	call   c0000810 <tolower>
c00008c1:	5d                   	pop    ebp
c00008c2:	83 f8 78             	cmp    eax,0x78
c00008c5:	74 03                	je     c00008ca <simple_strtoul+0xa6>
c00008c7:	41                   	inc    ecx
c00008c8:	eb 03                	jmp    c00008cd <simple_strtoul+0xa9>
c00008ca:	83 c1 02             	add    ecx,0x2
c00008cd:	31 ed                	xor    ebp,ebp
c00008cf:	31 db                	xor    ebx,ebx
c00008d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00008d8:	8a 11                	mov    dl,BYTE PTR [ecx]
c00008da:	84 d2                	test   dl,dl
c00008dc:	74 27                	je     c0000905 <simple_strtoul+0xe1>
c00008de:	0f b6 fa             	movzx  edi,dl
c00008e1:	f6 87 80 f1 01 c0 04 	test   BYTE PTR [edi-0x3ffe0e80],0x4
c00008e8:	74 05                	je     c00008ef <simple_strtoul+0xcb>
c00008ea:	83 ef 30             	sub    edi,0x30
c00008ed:	eb 22                	jmp    c0000911 <simple_strtoul+0xed>
c00008ef:	0f be d2             	movsx  edx,dl
c00008f2:	52                   	push   edx
c00008f3:	e8 04 ff ff ff       	call   c00007fc <toupper>
c00008f8:	5f                   	pop    edi
c00008f9:	0f b6 d0             	movzx  edx,al
c00008fc:	f6 82 80 f1 01 c0 01 	test   BYTE PTR [edx-0x3ffe0e80],0x1
c0000903:	75 09                	jne    c000090e <simple_strtoul+0xea>
c0000905:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000090a:	75 2d                	jne    c0000939 <simple_strtoul+0x115>
c000090c:	eb 57                	jmp    c0000965 <simple_strtoul+0x141>
c000090e:	8d 78 c9             	lea    edi,[eax-0x37]
c0000911:	39 f7                	cmp    edi,esi
c0000913:	73 f0                	jae    c0000905 <simple_strtoul+0xe1>
c0000915:	31 d2                	xor    edx,edx
c0000917:	89 f8                	mov    eax,edi
c0000919:	f7 d0                	not    eax
c000091b:	f7 f6                	div    esi
c000091d:	39 d8                	cmp    eax,ebx
c000091f:	72 0e                	jb     c000092f <simple_strtoul+0x10b>
c0000921:	0f af de             	imul   ebx,esi
c0000924:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000092b:	01 fb                	add    ebx,edi
c000092d:	eb 07                	jmp    c0000936 <simple_strtoul+0x112>
c000092f:	bd 01 00 00 00       	mov    ebp,0x1
c0000934:	31 db                	xor    ebx,ebx
c0000936:	41                   	inc    ecx
c0000937:	eb 9f                	jmp    c00008d8 <simple_strtoul+0xb4>
c0000939:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000093c:	09 d8                	or     eax,ebx
c000093e:	75 1f                	jne    c000095f <simple_strtoul+0x13b>
c0000940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000944:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000948:	31 db                	xor    ebx,ebx
c000094a:	89 38                	mov    DWORD PTR [eax],edi
c000094c:	eb 17                	jmp    c0000965 <simple_strtoul+0x141>
c000094e:	31 db                	xor    ebx,ebx
c0000950:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000955:	74 14                	je     c000096b <simple_strtoul+0x147>
c0000957:	31 ed                	xor    ebp,ebp
c0000959:	85 c9                	test   ecx,ecx
c000095b:	75 e3                	jne    c0000940 <simple_strtoul+0x11c>
c000095d:	31 db                	xor    ebx,ebx
c000095f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000963:	89 08                	mov    DWORD PTR [eax],ecx
c0000965:	4d                   	dec    ebp
c0000966:	75 03                	jne    c000096b <simple_strtoul+0x147>
c0000968:	83 cb ff             	or     ebx,0xffffffff
c000096b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000970:	75 02                	jne    c0000974 <simple_strtoul+0x150>
c0000972:	f7 db                	neg    ebx
c0000974:	83 c4 08             	add    esp,0x8
c0000977:	89 d8                	mov    eax,ebx
c0000979:	5b                   	pop    ebx
c000097a:	5e                   	pop    esi
c000097b:	5f                   	pop    edi
c000097c:	5d                   	pop    ebp
c000097d:	c3                   	ret    

c000097e <largebin_index>:
c000097e:	89 c2                	mov    edx,eax
c0000980:	c1 ea 08             	shr    edx,0x8
c0000983:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000989:	77 10                	ja     c000099b <largebin_index+0x1d>
c000098b:	0f bd d2             	bsr    edx,edx
c000098e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000991:	d3 e8                	shr    eax,cl
c0000993:	83 e0 03             	and    eax,0x3
c0000996:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099a:	c3                   	ret    
c000099b:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a0:	c3                   	ret    

c00009a1 <malloc_init_state>:
c00009a1:	53                   	push   ebx
c00009a2:	8d 50 34             	lea    edx,[eax+0x34]
c00009a5:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009ab:	89 d1                	mov    ecx,edx
c00009ad:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b0:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b3:	83 c2 08             	add    edx,0x8
c00009b6:	39 da                	cmp    edx,ebx
c00009b8:	75 f3                	jne    c00009ad <malloc_init_state+0xc>
c00009ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00009bc:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c6:	83 e2 03             	and    edx,0x3
c00009c9:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d3:	83 ca 48             	or     edx,0x48
c00009d6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ea:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f1:	89 10                	mov    DWORD PTR [eax],edx
c00009f3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a00:	5b                   	pop    ebx
c0000a01:	c3                   	ret    

c0000a02 <malloc_consolidate>:
c0000a02:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a04:	85 d2                	test   edx,edx
c0000a06:	0f 84 d8 00 00 00    	je     c0000ae4 <malloc_consolidate+0xe2>
c0000a0c:	55                   	push   ebp
c0000a0d:	83 e2 fd             	and    edx,0xfffffffd
c0000a10:	57                   	push   edi
c0000a11:	89 c5                	mov    ebp,eax
c0000a13:	56                   	push   esi
c0000a14:	8d 78 34             	lea    edi,[eax+0x34]
c0000a17:	53                   	push   ebx
c0000a18:	83 ec 10             	sub    esp,0x10
c0000a1b:	89 10                	mov    DWORD PTR [eax],edx
c0000a1d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a21:	c1 ea 03             	shr    edx,0x3
c0000a24:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a28:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a2f:	85 d2                	test   edx,edx
c0000a31:	0f 84 98 00 00 00    	je     c0000acf <malloc_consolidate+0xcd>
c0000a37:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a3e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a41:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a44:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a48:	89 f9                	mov    ecx,edi
c0000a4a:	83 e1 fe             	and    ecx,0xfffffffe
c0000a4d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a50:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a53:	83 e3 fc             	and    ebx,0xfffffffc
c0000a56:	83 e7 01             	and    edi,0x1
c0000a59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5c:	75 14                	jne    c0000a72 <malloc_consolidate+0x70>
c0000a5e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a60:	29 fa                	sub    edx,edi
c0000a62:	01 f9                	add    ecx,edi
c0000a64:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a67:	89 fb                	mov    ebx,edi
c0000a69:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a6f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a72:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a75:	74 40                	je     c0000ab7 <malloc_consolidate+0xb5>
c0000a77:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a7d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a81:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a84:	83 e7 01             	and    edi,0x1
c0000a87:	75 0e                	jne    c0000a97 <malloc_consolidate+0x95>
c0000a89:	01 d9                	add    ecx,ebx
c0000a8b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a8e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a91:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a94:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a97:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9a:	89 ce                	mov    esi,ecx
c0000a9c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000a9f:	83 ce 01             	or     esi,0x1
c0000aa2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aa8:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000aab:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000aaf:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab2:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab5:	eb 0c                	jmp    c0000ac3 <malloc_consolidate+0xc1>
c0000ab7:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000aba:	83 c9 01             	or     ecx,0x1
c0000abd:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ac7:	85 d2                	test   edx,edx
c0000ac9:	0f 85 6f ff ff ff    	jne    c0000a3e <malloc_consolidate+0x3c>
c0000acf:	83 c5 04             	add    ebp,0x4
c0000ad2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad6:	0f 85 50 ff ff ff    	jne    c0000a2c <malloc_consolidate+0x2a>
c0000adc:	83 c4 10             	add    esp,0x10
c0000adf:	5b                   	pop    ebx
c0000ae0:	5e                   	pop    esi
c0000ae1:	5f                   	pop    edi
c0000ae2:	5d                   	pop    ebp
c0000ae3:	c3                   	ret    
c0000ae4:	e9 b8 fe ff ff       	jmp    c00009a1 <malloc_init_state>

c0000ae9 <dlfree>:
c0000ae9:	57                   	push   edi
c0000aea:	56                   	push   esi
c0000aeb:	53                   	push   ebx
c0000aec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af0:	85 db                	test   ebx,ebx
c0000af2:	0f 84 e2 00 00 00    	je     c0000bda <dlfree+0xf1>
c0000af8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afb:	8b 0d 00 2e 02 c0    	mov    ecx,DWORD PTR ds:0xc0022e00
c0000b01:	89 f0                	mov    eax,esi
c0000b03:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b06:	83 e0 fc             	and    eax,0xfffffffc
c0000b09:	39 c1                	cmp    ecx,eax
c0000b0b:	72 24                	jb     c0000b31 <dlfree+0x48>
c0000b0d:	83 c9 03             	or     ecx,0x3
c0000b10:	c1 e8 03             	shr    eax,0x3
c0000b13:	89 0d 00 2e 02 c0    	mov    DWORD PTR ds:0xc0022e00,ecx
c0000b19:	83 e8 02             	sub    eax,0x2
c0000b1c:	8b 0c 85 04 2e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd1fc]
c0000b23:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b25:	89 14 85 04 2e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd1fc],edx
c0000b2c:	e9 a9 00 00 00       	jmp    c0000bda <dlfree+0xf1>
c0000b31:	83 e6 02             	and    esi,0x2
c0000b34:	0f 85 a0 00 00 00    	jne    c0000bda <dlfree+0xf1>
c0000b3a:	83 c9 01             	or     ecx,0x1
c0000b3d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b40:	89 0d 00 2e 02 c0    	mov    DWORD PTR ds:0xc0022e00,ecx
c0000b46:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b49:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b50:	75 13                	jne    c0000b65 <dlfree+0x7c>
c0000b52:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b55:	29 da                	sub    edx,ebx
c0000b57:	01 d8                	add    eax,ebx
c0000b59:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b5f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b62:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b65:	39 35 2c 2e 02 c0    	cmp    DWORD PTR ds:0xc0022e2c,esi
c0000b6b:	74 40                	je     c0000bad <dlfree+0xc4>
c0000b6d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b71:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b74:	80 e3 01             	and    bl,0x1
c0000b77:	75 0e                	jne    c0000b87 <dlfree+0x9e>
c0000b79:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b7f:	01 c8                	add    eax,ecx
c0000b81:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b84:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b87:	8b 0d 3c 2e 02 c0    	mov    ecx,DWORD PTR ds:0xc0022e3c
c0000b8d:	c7 42 0c 34 2e 02 c0 	mov    DWORD PTR [edx+0xc],0xc0022e34
c0000b94:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b97:	89 15 3c 2e 02 c0    	mov    DWORD PTR ds:0xc0022e3c,edx
c0000b9d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba0:	89 c1                	mov    ecx,eax
c0000ba2:	83 c9 01             	or     ecx,0x1
c0000ba5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ba8:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bab:	eb 10                	jmp    c0000bbd <dlfree+0xd4>
c0000bad:	01 c8                	add    eax,ecx
c0000baf:	89 c1                	mov    ecx,eax
c0000bb1:	83 c9 01             	or     ecx,0x1
c0000bb4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bb7:	89 15 2c 2e 02 c0    	mov    DWORD PTR ds:0xc0022e2c,edx
c0000bbd:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc2:	76 16                	jbe    c0000bda <dlfree+0xf1>
c0000bc4:	f6 05 00 2e 02 c0 02 	test   BYTE PTR ds:0xc0022e00,0x2
c0000bcb:	74 0d                	je     c0000bda <dlfree+0xf1>
c0000bcd:	5b                   	pop    ebx
c0000bce:	b8 00 2e 02 c0       	mov    eax,0xc0022e00
c0000bd3:	5e                   	pop    esi
c0000bd4:	5f                   	pop    edi
c0000bd5:	e9 28 fe ff ff       	jmp    c0000a02 <malloc_consolidate>
c0000bda:	5b                   	pop    ebx
c0000bdb:	5e                   	pop    esi
c0000bdc:	5f                   	pop    edi
c0000bdd:	c3                   	ret    

c0000bde <sYSMALLOc>:
c0000bde:	55                   	push   ebp
c0000bdf:	57                   	push   edi
c0000be0:	56                   	push   esi
c0000be1:	53                   	push   ebx
c0000be2:	89 d3                	mov    ebx,edx
c0000be4:	83 ec 2c             	sub    esp,0x2c
c0000be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000beb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000bf1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000bf4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000bf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bfb:	74 1f                	je     c0000c1c <sYSMALLOc+0x3e>
c0000bfd:	89 d8                	mov    eax,ebx
c0000bff:	e8 fe fd ff ff       	call   c0000a02 <malloc_consolidate>
c0000c04:	83 ec 0c             	sub    esp,0xc
c0000c07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c0b:	83 e8 07             	sub    eax,0x7
c0000c0e:	50                   	push   eax
c0000c0f:	e8 30 02 00 00       	call   c0000e44 <dlmalloc>
c0000c14:	83 c4 10             	add    esp,0x10
c0000c17:	e9 20 02 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c1c:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c1f:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c25:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c28:	83 e0 fc             	and    eax,0xfffffffc
c0000c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000c2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c33:	83 c0 10             	add    eax,0x10
c0000c36:	01 c1                	add    ecx,eax
c0000c38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000c3c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c43:	74 04                	je     c0000c49 <sYSMALLOc+0x6b>
c0000c45:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000c49:	f7 da                	neg    edx
c0000c4b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000c4f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000c53:	21 d1                	and    ecx,edx
c0000c55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000c59:	7f 07                	jg     c0000c62 <sYSMALLOc+0x84>
c0000c5b:	31 c0                	xor    eax,eax
c0000c5d:	e9 da 01 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c62:	83 ec 0c             	sub    esp,0xc
c0000c65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c69:	e8 fd ad 00 00       	call   c000ba6b <sbrk>
c0000c6e:	83 c4 10             	add    esp,0x10
c0000c71:	89 c6                	mov    esi,eax
c0000c73:	83 f8 ff             	cmp    eax,0xffffffff
c0000c76:	74 e3                	je     c0000c5b <sYSMALLOc+0x7d>
c0000c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c7c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000c80:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000c83:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000c89:	39 f1                	cmp    ecx,esi
c0000c8b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000c91:	75 13                	jne    c0000ca6 <sYSMALLOc+0xc8>
c0000c93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c97:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000c9b:	83 c8 01             	or     eax,0x1
c0000c9e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ca1:	e9 3e 01 00 00       	jmp    c0000de4 <sYSMALLOc+0x206>
c0000ca6:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000cac:	88 d0                	mov    al,dl
c0000cae:	83 e0 01             	and    eax,0x1
c0000cb1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000cb6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000cba:	0f 95 c0             	setne  al
c0000cbd:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000cc1:	39 f1                	cmp    ecx,esi
c0000cc3:	76 12                	jbe    c0000cd7 <sYSMALLOc+0xf9>
c0000cc5:	84 c0                	test   al,al
c0000cc7:	74 0e                	je     c0000cd7 <sYSMALLOc+0xf9>
c0000cc9:	83 e2 fe             	and    edx,0xfffffffe
c0000ccc:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000cd2:	e9 83 00 00 00       	jmp    c0000d5a <sYSMALLOc+0x17c>
c0000cd7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000cdc:	74 7c                	je     c0000d5a <sYSMALLOc+0x17c>
c0000cde:	84 c0                	test   al,al
c0000ce0:	74 0c                	je     c0000cee <sYSMALLOc+0x110>
c0000ce2:	89 f0                	mov    eax,esi
c0000ce4:	29 c8                	sub    eax,ecx
c0000ce6:	01 e8                	add    eax,ebp
c0000ce8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000cee:	89 f2                	mov    edx,esi
c0000cf0:	83 e2 07             	and    edx,0x7
c0000cf3:	74 0c                	je     c0000d01 <sYSMALLOc+0x123>
c0000cf5:	b8 08 00 00 00       	mov    eax,0x8
c0000cfa:	29 d0                	sub    eax,edx
c0000cfc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000cff:	eb 04                	jmp    c0000d05 <sYSMALLOc+0x127>
c0000d01:	89 f5                	mov    ebp,esi
c0000d03:	31 c0                	xor    eax,eax
c0000d05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d11:	01 c1                	add    ecx,eax
c0000d13:	83 ec 0c             	sub    esp,0xc
c0000d16:	01 f1                	add    ecx,esi
c0000d18:	01 ca                	add    edx,ecx
c0000d1a:	29 c8                	sub    eax,ecx
c0000d1c:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d20:	01 c2                	add    edx,eax
c0000d22:	52                   	push   edx
c0000d23:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d27:	e8 3f ad 00 00       	call   c000ba6b <sbrk>
c0000d2c:	83 c4 10             	add    esp,0x10
c0000d2f:	83 f8 ff             	cmp    eax,0xffffffff
c0000d32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d36:	75 0f                	jne    c0000d47 <sYSMALLOc+0x169>
c0000d38:	83 ec 0c             	sub    esp,0xc
c0000d3b:	6a 00                	push   0x0
c0000d3d:	e8 29 ad 00 00       	call   c000ba6b <sbrk>
c0000d42:	83 c4 10             	add    esp,0x10
c0000d45:	eb 30                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d47:	39 c6                	cmp    esi,eax
c0000d49:	76 33                	jbe    c0000d7e <sYSMALLOc+0x1a0>
c0000d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d4f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000d56:	01 f0                	add    eax,esi
c0000d58:	eb 1d                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d5a:	83 ec 0c             	sub    esp,0xc
c0000d5d:	89 f5                	mov    ebp,esi
c0000d5f:	6a 00                	push   0x0
c0000d61:	e8 05 ad 00 00       	call   c000ba6b <sbrk>
c0000d66:	89 c2                	mov    edx,eax
c0000d68:	29 f2                	sub    edx,esi
c0000d6a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000d6e:	83 c4 10             	add    esp,0x10
c0000d71:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d77:	31 d2                	xor    edx,edx
c0000d79:	83 f8 ff             	cmp    eax,0xffffffff
c0000d7c:	74 66                	je     c0000de4 <sYSMALLOc+0x206>
c0000d7e:	29 e8                	sub    eax,ebp
c0000d80:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000d83:	01 d0                	add    eax,edx
c0000d85:	83 c8 01             	or     eax,0x1
c0000d88:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000d8b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d91:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d96:	74 4c                	je     c0000de4 <sYSMALLOc+0x206>
c0000d98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d9c:	83 e8 0c             	sub    eax,0xc
c0000d9f:	83 e0 f8             	and    eax,0xfffffff8
c0000da2:	89 c2                	mov    edx,eax
c0000da4:	83 ca 01             	or     edx,0x1
c0000da7:	83 f8 0f             	cmp    eax,0xf
c0000daa:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000dad:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000db5:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000dbd:	76 25                	jbe    c0000de4 <sYSMALLOc+0x206>
c0000dbf:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dc5:	83 ec 0c             	sub    esp,0xc
c0000dc8:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000dd2:	83 c7 08             	add    edi,0x8
c0000dd5:	57                   	push   edi
c0000dd6:	e8 0e fd ff ff       	call   c0000ae9 <dlfree>
c0000ddb:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000de1:	83 c4 10             	add    esp,0x10
c0000de4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000dea:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df0:	73 06                	jae    c0000df8 <sYSMALLOc+0x21a>
c0000df2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000df8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000dfe:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e04:	73 06                	jae    c0000e0c <sYSMALLOc+0x22e>
c0000e06:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e0c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e0f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e12:	83 e2 fc             	and    edx,0xfffffffc
c0000e15:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e19:	0f 82 3c fe ff ff    	jb     c0000c5b <sYSMALLOc+0x7d>
c0000e1f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e23:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e26:	29 fa                	sub    edx,edi
c0000e28:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2b:	83 ca 01             	or     edx,0x1
c0000e2e:	89 fb                	mov    ebx,edi
c0000e30:	83 c0 08             	add    eax,0x8
c0000e33:	83 cb 01             	or     ebx,0x1
c0000e36:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e39:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e3c:	83 c4 2c             	add    esp,0x2c
c0000e3f:	5b                   	pop    ebx
c0000e40:	5e                   	pop    esi
c0000e41:	5f                   	pop    edi
c0000e42:	5d                   	pop    ebp
c0000e43:	c3                   	ret    

c0000e44 <dlmalloc>:
c0000e44:	55                   	push   ebp
c0000e45:	57                   	push   edi
c0000e46:	56                   	push   esi
c0000e47:	53                   	push   ebx
c0000e48:	83 ec 1c             	sub    esp,0x1c
c0000e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e4f:	83 f8 df             	cmp    eax,0xffffffdf
c0000e52:	0f 87 70 03 00 00    	ja     c00011c8 <dlmalloc+0x384>
c0000e58:	83 c0 0b             	add    eax,0xb
c0000e5b:	be 10 00 00 00       	mov    esi,0x10
c0000e60:	83 f8 0f             	cmp    eax,0xf
c0000e63:	76 05                	jbe    c0000e6a <dlmalloc+0x26>
c0000e65:	83 e0 f8             	and    eax,0xfffffff8
c0000e68:	89 c6                	mov    esi,eax
c0000e6a:	8b 3d 00 2e 02 c0    	mov    edi,DWORD PTR ds:0xc0022e00
c0000e70:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e76:	75 17                	jne    c0000e8f <dlmalloc+0x4b>
c0000e78:	85 ff                	test   edi,edi
c0000e7a:	0f 85 05 03 00 00    	jne    c0001185 <dlmalloc+0x341>
c0000e80:	b8 00 2e 02 c0       	mov    eax,0xc0022e00
c0000e85:	e8 78 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000e8a:	e9 f6 02 00 00       	jmp    c0001185 <dlmalloc+0x341>
c0000e8f:	39 f7                	cmp    edi,esi
c0000e91:	72 1f                	jb     c0000eb2 <dlmalloc+0x6e>
c0000e93:	89 f2                	mov    edx,esi
c0000e95:	c1 ea 03             	shr    edx,0x3
c0000e98:	83 ea 02             	sub    edx,0x2
c0000e9b:	8b 04 95 04 2e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd1fc]
c0000ea2:	85 c0                	test   eax,eax
c0000ea4:	74 0c                	je     c0000eb2 <dlmalloc+0x6e>
c0000ea6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000ea9:	89 0c 95 04 2e 02 c0 	mov    DWORD PTR [edx*4-0x3ffdd1fc],ecx
c0000eb0:	eb 30                	jmp    c0000ee2 <dlmalloc+0x9e>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000eba:	77 2e                	ja     c0000eea <dlmalloc+0xa6>
c0000ebc:	c1 e8 03             	shr    eax,0x3
c0000ebf:	8d 14 c5 34 2e 02 c0 	lea    edx,[eax*8-0x3ffdd1cc]
c0000ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eca:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ecd:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed0:	39 c3                	cmp    ebx,eax
c0000ed2:	74 2e                	je     c0000f02 <dlmalloc+0xbe>
c0000ed4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000ed7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000edc:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000edf:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee2:	83 c0 08             	add    eax,0x8
c0000ee5:	e9 e0 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000eea:	e8 8f fa ff ff       	call   c000097e <largebin_index>
c0000eef:	83 e7 02             	and    edi,0x2
c0000ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef6:	74 0a                	je     c0000f02 <dlmalloc+0xbe>
c0000ef8:	b8 00 2e 02 c0       	mov    eax,0xc0022e00
c0000efd:	e8 00 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000f02:	8d 46 10             	lea    eax,[esi+0x10]
c0000f05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f09:	8b 1d 40 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022e40
c0000f0f:	81 fb 34 2e 02 c0    	cmp    ebx,0xc0022e34
c0000f15:	0f 84 13 01 00 00    	je     c000102e <dlmalloc+0x1ea>
c0000f1b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f1e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f21:	83 e7 fc             	and    edi,0xfffffffc
c0000f24:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2a:	77 4c                	ja     c0000f78 <dlmalloc+0x134>
c0000f2c:	3d 34 2e 02 c0       	cmp    eax,0xc0022e34
c0000f31:	75 45                	jne    c0000f78 <dlmalloc+0x134>
c0000f33:	39 1d 30 2e 02 c0    	cmp    DWORD PTR ds:0xc0022e30,ebx
c0000f39:	75 3d                	jne    c0000f78 <dlmalloc+0x134>
c0000f3b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f3f:	73 37                	jae    c0000f78 <dlmalloc+0x134>
c0000f41:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f44:	89 fa                	mov    edx,edi
c0000f46:	a3 3c 2e 02 c0       	mov    ds:0xc0022e3c,eax
c0000f4b:	a3 40 2e 02 c0       	mov    ds:0xc0022e40,eax
c0000f50:	a3 30 2e 02 c0       	mov    ds:0xc0022e30,eax
c0000f55:	29 f2                	sub    edx,esi
c0000f57:	c7 40 08 34 2e 02 c0 	mov    DWORD PTR [eax+0x8],0xc0022e34
c0000f5e:	c7 40 0c 34 2e 02 c0 	mov    DWORD PTR [eax+0xc],0xc0022e34
c0000f65:	83 ce 01             	or     esi,0x1
c0000f68:	89 d1                	mov    ecx,edx
c0000f6a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f6d:	83 c9 01             	or     ecx,0x1
c0000f70:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f73:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f76:	eb 15                	jmp    c0000f8d <dlmalloc+0x149>
c0000f78:	a3 40 2e 02 c0       	mov    ds:0xc0022e40,eax
c0000f7d:	39 fe                	cmp    esi,edi
c0000f7f:	c7 40 08 34 2e 02 c0 	mov    DWORD PTR [eax+0x8],0xc0022e34
c0000f86:	75 0d                	jne    c0000f95 <dlmalloc+0x151>
c0000f88:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f8d:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f90:	e9 35 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000f95:	89 f8                	mov    eax,edi
c0000f97:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000f9d:	77 19                	ja     c0000fb8 <dlmalloc+0x174>
c0000f9f:	c1 e8 03             	shr    eax,0x3
c0000fa2:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fa5:	83 c2 0d             	add    edx,0xd
c0000fa8:	8d 2c 95 f8 2d 02 c0 	lea    ebp,[edx*4-0x3ffdd208]
c0000faf:	8b 14 95 00 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd200]
c0000fb6:	eb 46                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000fb8:	e8 c1 f9 ff ff       	call   c000097e <largebin_index>
c0000fbd:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc0:	83 c2 0d             	add    edx,0xd
c0000fc3:	8d 0c 95 00 2e 02 c0 	lea    ecx,[edx*4-0x3ffdd200]
c0000fca:	8b 14 95 00 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd200]
c0000fd1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fd8:	89 d5                	mov    ebp,edx
c0000fda:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fde:	74 1e                	je     c0000ffe <dlmalloc+0x1ba>
c0000fe0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000fe6:	77 12                	ja     c0000ffa <dlmalloc+0x1b6>
c0000fe8:	83 cf 01             	or     edi,0x1
c0000feb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000fee:	76 05                	jbe    c0000ff5 <dlmalloc+0x1b1>
c0000ff0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff3:	eb f6                	jmp    c0000feb <dlmalloc+0x1a7>
c0000ff5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ff8:	eb 04                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000ffa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000ffe:	89 c7                	mov    edi,eax
c0001000:	88 c1                	mov    cl,al
c0001002:	c1 ff 05             	sar    edi,0x5
c0001005:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001009:	bf 01 00 00 00       	mov    edi,0x1
c000100e:	d3 e7                	shl    edi,cl
c0001010:	89 f8                	mov    eax,edi
c0001012:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001016:	09 04 bd 34 31 02 c0 	or     DWORD PTR [edi*4-0x3ffdcecc],eax
c000101d:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001020:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001023:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001026:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001029:	e9 db fe ff ff       	jmp    c0000f09 <dlmalloc+0xc5>
c000102e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001034:	76 78                	jbe    c00010ae <dlmalloc+0x26a>
c0001036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103a:	8d 04 c5 34 2e 02 c0 	lea    eax,[eax*8-0x3ffdd1cc]
c0001041:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001047:	39 ca                	cmp    edx,ecx
c0001049:	74 63                	je     c00010ae <dlmalloc+0x26a>
c000104b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000104e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001051:	83 e3 fc             	and    ebx,0xfffffffc
c0001054:	39 de                	cmp    esi,ebx
c0001056:	77 52                	ja     c00010aa <dlmalloc+0x266>
c0001058:	89 df                	mov    edi,ebx
c000105a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000105d:	29 f7                	sub    edi,esi
c000105f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001062:	01 d3                	add    ebx,edx
c0001064:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001067:	83 ff 0f             	cmp    edi,0xf
c000106a:	8d 42 08             	lea    eax,[edx+0x8]
c000106d:	77 09                	ja     c0001078 <dlmalloc+0x234>
c000106f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001073:	e9 52 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001078:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000107b:	83 ce 01             	or     esi,0x1
c000107e:	89 0d 3c 2e 02 c0    	mov    DWORD PTR ds:0xc0022e3c,ecx
c0001084:	89 0d 40 2e 02 c0    	mov    DWORD PTR ds:0xc0022e40,ecx
c000108a:	c7 41 08 34 2e 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0022e34
c0001091:	c7 41 0c 34 2e 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0022e34
c0001098:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000109b:	89 fa                	mov    edx,edi
c000109d:	83 ca 01             	or     edx,0x1
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	89 3b                	mov    DWORD PTR [ebx],edi
c00010a5:	e9 20 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c00010aa:	89 c2                	mov    edx,eax
c00010ac:	eb 99                	jmp    c0001047 <dlmalloc+0x203>
c00010ae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b2:	b8 01 00 00 00       	mov    eax,0x1
c00010b7:	41                   	inc    ecx
c00010b8:	89 cb                	mov    ebx,ecx
c00010ba:	8d 14 cd 2c 2e 02 c0 	lea    edx,[ecx*8-0x3ffdd1d4]
c00010c1:	c1 eb 05             	shr    ebx,0x5
c00010c4:	d3 e0                	shl    eax,cl
c00010c6:	8b 3c 9d 34 31 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcecc]
c00010cd:	39 f8                	cmp    eax,edi
c00010cf:	77 04                	ja     c00010d5 <dlmalloc+0x291>
c00010d1:	85 c0                	test   eax,eax
c00010d3:	75 26                	jne    c00010fb <dlmalloc+0x2b7>
c00010d5:	43                   	inc    ebx
c00010d6:	83 fb 02             	cmp    ebx,0x2
c00010d9:	0f 87 a6 00 00 00    	ja     c0001185 <dlmalloc+0x341>
c00010df:	8b 3c 9d 34 31 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcecc]
c00010e6:	85 ff                	test   edi,edi
c00010e8:	74 eb                	je     c00010d5 <dlmalloc+0x291>
c00010ea:	89 d8                	mov    eax,ebx
c00010ec:	c1 e0 06             	shl    eax,0x6
c00010ef:	8d 14 85 2c 2e 02 c0 	lea    edx,[eax*4-0x3ffdd1d4]
c00010f6:	b8 01 00 00 00       	mov    eax,0x1
c00010fb:	85 f8                	test   eax,edi
c00010fd:	75 07                	jne    c0001106 <dlmalloc+0x2c2>
c00010ff:	83 c2 08             	add    edx,0x8
c0001102:	01 c0                	add    eax,eax
c0001104:	eb f5                	jmp    c00010fb <dlmalloc+0x2b7>
c0001106:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001109:	39 ca                	cmp    edx,ecx
c000110b:	75 14                	jne    c0001121 <dlmalloc+0x2dd>
c000110d:	89 c1                	mov    ecx,eax
c000110f:	83 c2 08             	add    edx,0x8
c0001112:	f7 d1                	not    ecx
c0001114:	01 c0                	add    eax,eax
c0001116:	21 cf                	and    edi,ecx
c0001118:	89 3c 9d 34 31 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcecc],edi
c000111f:	eb ac                	jmp    c00010cd <dlmalloc+0x289>
c0001121:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001124:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001127:	83 e0 fc             	and    eax,0xfffffffc
c000112a:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000112d:	89 c3                	mov    ebx,eax
c000112f:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001132:	29 f3                	sub    ebx,esi
c0001134:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001137:	83 fb 0f             	cmp    ebx,0xf
c000113a:	8d 41 08             	lea    eax,[ecx+0x8]
c000113d:	77 09                	ja     c0001148 <dlmalloc+0x304>
c000113f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001143:	e9 82 00 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001148:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000114b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001151:	89 3d 3c 2e 02 c0    	mov    DWORD PTR ds:0xc0022e3c,edi
c0001157:	89 3d 40 2e 02 c0    	mov    DWORD PTR ds:0xc0022e40,edi
c000115d:	c7 47 08 34 2e 02 c0 	mov    DWORD PTR [edi+0x8],0xc0022e34
c0001164:	c7 47 0c 34 2e 02 c0 	mov    DWORD PTR [edi+0xc],0xc0022e34
c000116b:	77 06                	ja     c0001173 <dlmalloc+0x32f>
c000116d:	89 3d 30 2e 02 c0    	mov    DWORD PTR ds:0xc0022e30,edi
c0001173:	83 ce 01             	or     esi,0x1
c0001176:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001179:	89 d9                	mov    ecx,ebx
c000117b:	83 c9 01             	or     ecx,0x1
c000117e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001181:	89 1a                	mov    DWORD PTR [edx],ebx
c0001183:	eb 45                	jmp    c00011ca <dlmalloc+0x386>
c0001185:	a1 2c 2e 02 c0       	mov    eax,ds:0xc0022e2c
c000118a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000118d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001190:	83 e2 fc             	and    edx,0xfffffffc
c0001193:	39 d1                	cmp    ecx,edx
c0001195:	77 1e                	ja     c00011b5 <dlmalloc+0x371>
c0001197:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119a:	89 f3                	mov    ebx,esi
c000119c:	89 0d 2c 2e 02 c0    	mov    DWORD PTR ds:0xc0022e2c,ecx
c00011a2:	83 cb 01             	or     ebx,0x1
c00011a5:	29 f2                	sub    edx,esi
c00011a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011aa:	83 ca 01             	or     edx,0x1
c00011ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b0:	e9 2d fd ff ff       	jmp    c0000ee2 <dlmalloc+0x9e>
c00011b5:	83 c4 1c             	add    esp,0x1c
c00011b8:	89 f0                	mov    eax,esi
c00011ba:	5b                   	pop    ebx
c00011bb:	ba 00 2e 02 c0       	mov    edx,0xc0022e00
c00011c0:	5e                   	pop    esi
c00011c1:	5f                   	pop    edi
c00011c2:	5d                   	pop    ebp
c00011c3:	e9 16 fa ff ff       	jmp    c0000bde <sYSMALLOc>
c00011c8:	31 c0                	xor    eax,eax
c00011ca:	83 c4 1c             	add    esp,0x1c
c00011cd:	5b                   	pop    ebx
c00011ce:	5e                   	pop    esi
c00011cf:	5f                   	pop    edi
c00011d0:	5d                   	pop    ebp
c00011d1:	c3                   	ret    

c00011d2 <iALLOc>:
c00011d2:	55                   	push   ebp
c00011d3:	89 c5                	mov    ebp,eax
c00011d5:	57                   	push   edi
c00011d6:	56                   	push   esi
c00011d7:	53                   	push   ebx
c00011d8:	83 ec 2c             	sub    esp,0x2c
c00011db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011e7:	83 3d 00 2e 02 c0 00 	cmp    DWORD PTR ds:0xc0022e00,0x0
c00011ee:	75 12                	jne    c0001202 <iALLOc+0x30>
c00011f0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011f4:	b8 00 2e 02 c0       	mov    eax,0xc0022e00
c00011f9:	e8 04 f8 ff ff       	call   c0000a02 <malloc_consolidate>
c00011fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001202:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001207:	74 12                	je     c000121b <iALLOc+0x49>
c0001209:	85 ed                	test   ebp,ebp
c000120b:	0f 84 64 01 00 00    	je     c0001375 <iALLOc+0x1a3>
c0001211:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001219:	eb 33                	jmp    c000124e <iALLOc+0x7c>
c000121b:	85 ed                	test   ebp,ebp
c000121d:	75 14                	jne    c0001233 <iALLOc+0x61>
c000121f:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001227:	83 c4 2c             	add    esp,0x2c
c000122a:	5b                   	pop    ebx
c000122b:	5e                   	pop    esi
c000122c:	5f                   	pop    edi
c000122d:	5d                   	pop    ebp
c000122e:	e9 11 fc ff ff       	jmp    c0000e44 <dlmalloc>
c0001233:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001242:	83 f8 0f             	cmp    eax,0xf
c0001245:	76 07                	jbe    c000124e <iALLOc+0x7c>
c0001247:	83 e0 f8             	and    eax,0xfffffff8
c000124a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000124e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001253:	75 09                	jne    c000125e <iALLOc+0x8c>
c0001255:	89 d0                	mov    eax,edx
c0001257:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125a:	31 f6                	xor    esi,esi
c000125c:	eb 3b                	jmp    c0001299 <iALLOc+0xc7>
c000125e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001260:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001268:	83 c0 0b             	add    eax,0xb
c000126b:	83 f8 0f             	cmp    eax,0xf
c000126e:	76 07                	jbe    c0001277 <iALLOc+0xa5>
c0001270:	83 e0 f8             	and    eax,0xfffffff8
c0001273:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001277:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000127b:	0f af f5             	imul   esi,ebp
c000127e:	eb 25                	jmp    c00012a5 <iALLOc+0xd3>
c0001280:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001282:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001285:	bb 10 00 00 00       	mov    ebx,0x10
c000128a:	83 f9 0f             	cmp    ecx,0xf
c000128d:	76 05                	jbe    c0001294 <iALLOc+0xc2>
c000128f:	83 e1 f8             	and    ecx,0xfffffff8
c0001292:	89 cb                	mov    ebx,ecx
c0001294:	01 de                	add    esi,ebx
c0001296:	83 c0 04             	add    eax,0x4
c0001299:	39 c7                	cmp    edi,eax
c000129b:	75 e3                	jne    c0001280 <iALLOc+0xae>
c000129d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012a9:	8b 1d 54 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023154
c00012af:	83 ec 0c             	sub    esp,0xc
c00012b2:	c7 05 54 31 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023154,0x0
c00012bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c0:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c4:	50                   	push   eax
c00012c5:	e8 7a fb ff ff       	call   c0000e44 <dlmalloc>
c00012ca:	83 c4 10             	add    esp,0x10
c00012cd:	89 1d 54 31 02 c0    	mov    DWORD PTR ds:0xc0023154,ebx
c00012d3:	85 c0                	test   eax,eax
c00012d5:	0f 84 92 00 00 00    	je     c000136d <iALLOc+0x19b>
c00012db:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012de:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e1:	83 e3 fc             	and    ebx,0xfffffffc
c00012e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012e8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012ed:	74 1e                	je     c000130d <iALLOc+0x13b>
c00012ef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f3:	89 d9                	mov    ecx,ebx
c00012f5:	52                   	push   edx
c00012f6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012fa:	83 e9 04             	sub    ecx,0x4
c00012fd:	51                   	push   ecx
c00012fe:	6a 00                	push   0x0
c0001300:	50                   	push   eax
c0001301:	e8 02 f3 ff ff       	call   c0000608 <memset>
c0001306:	83 c4 10             	add    esp,0x10
c0001309:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000130d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001312:	75 14                	jne    c0001328 <iALLOc+0x156>
c0001314:	8d 04 37             	lea    eax,[edi+esi*1]
c0001317:	29 f3                	sub    ebx,esi
c0001319:	8d 48 08             	lea    ecx,[eax+0x8]
c000131c:	83 cb 01             	or     ebx,0x1
c000131f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001323:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001326:	89 f3                	mov    ebx,esi
c0001328:	31 c0                	xor    eax,eax
c000132a:	4d                   	dec    ebp
c000132b:	8d 4f 08             	lea    ecx,[edi+0x8]
c000132e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001332:	39 c5                	cmp    ebp,eax
c0001334:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001337:	74 2c                	je     c0001365 <iALLOc+0x193>
c0001339:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000133d:	85 c9                	test   ecx,ecx
c000133f:	75 15                	jne    c0001356 <iALLOc+0x184>
c0001341:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001344:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001347:	b9 10 00 00 00       	mov    ecx,0x10
c000134c:	83 fe 0f             	cmp    esi,0xf
c000134f:	76 05                	jbe    c0001356 <iALLOc+0x184>
c0001351:	83 e6 f8             	and    esi,0xfffffff8
c0001354:	89 f1                	mov    ecx,esi
c0001356:	89 ce                	mov    esi,ecx
c0001358:	29 cb                	sub    ebx,ecx
c000135a:	83 ce 01             	or     esi,0x1
c000135d:	40                   	inc    eax
c000135e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001361:	01 cf                	add    edi,ecx
c0001363:	eb c6                	jmp    c000132b <iALLOc+0x159>
c0001365:	83 cb 01             	or     ebx,0x1
c0001368:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000136b:	eb 08                	jmp    c0001375 <iALLOc+0x1a3>
c000136d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001375:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001379:	83 c4 2c             	add    esp,0x2c
c000137c:	5b                   	pop    ebx
c000137d:	5e                   	pop    esi
c000137e:	5f                   	pop    edi
c000137f:	5d                   	pop    ebp
c0001380:	c3                   	ret    

c0001381 <dlrealloc>:
c0001381:	55                   	push   ebp
c0001382:	57                   	push   edi
c0001383:	56                   	push   esi
c0001384:	53                   	push   ebx
c0001385:	83 ec 1c             	sub    esp,0x1c
c0001388:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000138c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001390:	85 db                	test   ebx,ebx
c0001392:	75 10                	jne    c00013a4 <dlrealloc+0x23>
c0001394:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001398:	83 c4 1c             	add    esp,0x1c
c000139b:	5b                   	pop    ebx
c000139c:	5e                   	pop    esi
c000139d:	5f                   	pop    edi
c000139e:	5d                   	pop    ebp
c000139f:	e9 a0 fa ff ff       	jmp    c0000e44 <dlmalloc>
c00013a4:	83 f8 df             	cmp    eax,0xffffffdf
c00013a7:	76 07                	jbe    c00013b0 <dlrealloc+0x2f>
c00013a9:	31 db                	xor    ebx,ebx
c00013ab:	e9 7c 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c00013b0:	83 c0 0b             	add    eax,0xb
c00013b3:	bf 10 00 00 00       	mov    edi,0x10
c00013b8:	83 f8 0f             	cmp    eax,0xf
c00013bb:	76 05                	jbe    c00013c2 <dlrealloc+0x41>
c00013bd:	83 e0 f8             	and    eax,0xfffffff8
c00013c0:	89 c7                	mov    edi,eax
c00013c2:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013c5:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00013c8:	89 c6                	mov    esi,eax
c00013ca:	83 e6 fc             	and    esi,0xfffffffc
c00013cd:	a8 02                	test   al,0x2
c00013cf:	75 d8                	jne    c00013a9 <dlrealloc+0x28>
c00013d1:	39 f7                	cmp    edi,esi
c00013d3:	0f 86 15 01 00 00    	jbe    c00014ee <dlrealloc+0x16d>
c00013d9:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00013dd:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013e0:	39 15 2c 2e 02 c0    	cmp    DWORD PTR ds:0xc0022e2c,edx
c00013e6:	75 33                	jne    c000141b <dlrealloc+0x9a>
c00013e8:	83 e1 fc             	and    ecx,0xfffffffc
c00013eb:	01 f1                	add    ecx,esi
c00013ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f1:	8d 4f 10             	lea    ecx,[edi+0x10]
c00013f4:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013f8:	77 49                	ja     c0001443 <dlrealloc+0xc2>
c00013fa:	01 fd                	add    ebp,edi
c00013fc:	83 e0 01             	and    eax,0x1
c00013ff:	09 f8                	or     eax,edi
c0001401:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001404:	89 2d 2c 2e 02 c0    	mov    DWORD PTR ds:0xc0022e2c,ebp
c000140a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000140e:	29 f8                	sub    eax,edi
c0001410:	83 c8 01             	or     eax,0x1
c0001413:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001416:	e9 11 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c000141b:	89 c8                	mov    eax,ecx
c000141d:	83 e0 fe             	and    eax,0xfffffffe
c0001420:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001425:	75 1c                	jne    c0001443 <dlrealloc+0xc2>
c0001427:	83 e1 fc             	and    ecx,0xfffffffc
c000142a:	01 f1                	add    ecx,esi
c000142c:	39 cf                	cmp    edi,ecx
c000142e:	77 13                	ja     c0001443 <dlrealloc+0xc2>
c0001430:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001433:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001436:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001439:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000143c:	89 ce                	mov    esi,ecx
c000143e:	e9 ab 00 00 00       	jmp    c00014ee <dlrealloc+0x16d>
c0001443:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001447:	8d 47 f9             	lea    eax,[edi-0x7]
c000144a:	83 ec 0c             	sub    esp,0xc
c000144d:	50                   	push   eax
c000144e:	e8 f1 f9 ff ff       	call   c0000e44 <dlmalloc>
c0001453:	83 c4 10             	add    esp,0x10
c0001456:	89 c1                	mov    ecx,eax
c0001458:	85 c0                	test   eax,eax
c000145a:	0f 84 49 ff ff ff    	je     c00013a9 <dlrealloc+0x28>
c0001460:	8d 40 f8             	lea    eax,[eax-0x8]
c0001463:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001467:	39 c2                	cmp    edx,eax
c0001469:	75 0a                	jne    c0001475 <dlrealloc+0xf4>
c000146b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000146e:	83 e0 fc             	and    eax,0xfffffffc
c0001471:	01 c6                	add    esi,eax
c0001473:	eb 79                	jmp    c00014ee <dlrealloc+0x16d>
c0001475:	83 ee 04             	sub    esi,0x4
c0001478:	83 fe 27             	cmp    esi,0x27
c000147b:	76 16                	jbe    c0001493 <dlrealloc+0x112>
c000147d:	50                   	push   eax
c000147e:	56                   	push   esi
c000147f:	53                   	push   ebx
c0001480:	51                   	push   ecx
c0001481:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001485:	e8 48 f1 ff ff       	call   c00005d2 <memcpy>
c000148a:	83 c4 10             	add    esp,0x10
c000148d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001491:	eb 43                	jmp    c00014d6 <dlrealloc+0x155>
c0001493:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001495:	83 fe 13             	cmp    esi,0x13
c0001498:	89 01                	mov    DWORD PTR [ecx],eax
c000149a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000149d:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00014a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00014a3:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00014a6:	76 2e                	jbe    c00014d6 <dlrealloc+0x155>
c00014a8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014ab:	83 fe 1b             	cmp    esi,0x1b
c00014ae:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00014b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00014b4:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00014b7:	76 1d                	jbe    c00014d6 <dlrealloc+0x155>
c00014b9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00014bc:	83 fe 23             	cmp    esi,0x23
c00014bf:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00014c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00014c5:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00014c8:	76 0c                	jbe    c00014d6 <dlrealloc+0x155>
c00014ca:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00014cd:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00014d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00014d3:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00014d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014da:	83 ec 0c             	sub    esp,0xc
c00014dd:	53                   	push   ebx
c00014de:	e8 06 f6 ff ff       	call   c0000ae9 <dlfree>
c00014e3:	83 c4 10             	add    esp,0x10
c00014e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00014ea:	89 cb                	mov    ebx,ecx
c00014ec:	eb 3e                	jmp    c000152c <dlrealloc+0x1ab>
c00014ee:	89 f2                	mov    edx,esi
c00014f0:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014f3:	29 fa                	sub    edx,edi
c00014f5:	83 e1 01             	and    ecx,0x1
c00014f8:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00014fc:	83 fa 0f             	cmp    edx,0xf
c00014ff:	77 0b                	ja     c000150c <dlrealloc+0x18b>
c0001501:	09 ce                	or     esi,ecx
c0001503:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001506:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000150a:	eb 20                	jmp    c000152c <dlrealloc+0x1ab>
c000150c:	01 fd                	add    ebp,edi
c000150e:	83 ec 0c             	sub    esp,0xc
c0001511:	09 cf                	or     edi,ecx
c0001513:	83 ca 01             	or     edx,0x1
c0001516:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001519:	83 c5 08             	add    ebp,0x8
c000151c:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000151f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001523:	55                   	push   ebp
c0001524:	e8 c0 f5 ff ff       	call   c0000ae9 <dlfree>
c0001529:	83 c4 10             	add    esp,0x10
c000152c:	83 c4 1c             	add    esp,0x1c
c000152f:	89 d8                	mov    eax,ebx
c0001531:	5b                   	pop    ebx
c0001532:	5e                   	pop    esi
c0001533:	5f                   	pop    edi
c0001534:	5d                   	pop    ebp
c0001535:	c3                   	ret    

c0001536 <dlmemalign>:
c0001536:	55                   	push   ebp
c0001537:	57                   	push   edi
c0001538:	56                   	push   esi
c0001539:	53                   	push   ebx
c000153a:	83 ec 0c             	sub    esp,0xc
c000153d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001541:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001545:	83 fa 08             	cmp    edx,0x8
c0001548:	77 10                	ja     c000155a <dlmemalign+0x24>
c000154a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000154e:	83 c4 0c             	add    esp,0xc
c0001551:	5b                   	pop    ebx
c0001552:	5e                   	pop    esi
c0001553:	5f                   	pop    edi
c0001554:	5d                   	pop    ebp
c0001555:	e9 ea f8 ff ff       	jmp    c0000e44 <dlmalloc>
c000155a:	bf 10 00 00 00       	mov    edi,0x10
c000155f:	83 fa 0f             	cmp    edx,0xf
c0001562:	76 13                	jbe    c0001577 <dlmemalign+0x41>
c0001564:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001567:	85 d1                	test   ecx,edx
c0001569:	75 04                	jne    c000156f <dlmemalign+0x39>
c000156b:	89 d7                	mov    edi,edx
c000156d:	eb 08                	jmp    c0001577 <dlmemalign+0x41>
c000156f:	39 d7                	cmp    edi,edx
c0001571:	73 04                	jae    c0001577 <dlmemalign+0x41>
c0001573:	01 ff                	add    edi,edi
c0001575:	eb f8                	jmp    c000156f <dlmemalign+0x39>
c0001577:	83 f8 df             	cmp    eax,0xffffffdf
c000157a:	76 07                	jbe    c0001583 <dlmemalign+0x4d>
c000157c:	31 c0                	xor    eax,eax
c000157e:	e9 ce 00 00 00       	jmp    c0001651 <dlmemalign+0x11b>
c0001583:	83 c0 0b             	add    eax,0xb
c0001586:	bd 10 00 00 00       	mov    ebp,0x10
c000158b:	83 f8 0f             	cmp    eax,0xf
c000158e:	76 05                	jbe    c0001595 <dlmemalign+0x5f>
c0001590:	83 e0 f8             	and    eax,0xfffffff8
c0001593:	89 c5                	mov    ebp,eax
c0001595:	83 ec 0c             	sub    esp,0xc
c0001598:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000159c:	50                   	push   eax
c000159d:	e8 a2 f8 ff ff       	call   c0000e44 <dlmalloc>
c00015a2:	83 c4 10             	add    esp,0x10
c00015a5:	89 c1                	mov    ecx,eax
c00015a7:	85 c0                	test   eax,eax
c00015a9:	74 d1                	je     c000157c <dlmemalign+0x46>
c00015ab:	31 d2                	xor    edx,edx
c00015ad:	8d 70 f8             	lea    esi,[eax-0x8]
c00015b0:	f7 f7                	div    edi
c00015b2:	85 d2                	test   edx,edx
c00015b4:	74 62                	je     c0001618 <dlmemalign+0xe2>
c00015b6:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015ba:	89 f8                	mov    eax,edi
c00015bc:	f7 d8                	neg    eax
c00015be:	21 c3                	and    ebx,eax
c00015c0:	83 eb 08             	sub    ebx,0x8
c00015c3:	89 d8                	mov    eax,ebx
c00015c5:	29 f0                	sub    eax,esi
c00015c7:	83 f8 0f             	cmp    eax,0xf
c00015ca:	77 02                	ja     c00015ce <dlmemalign+0x98>
c00015cc:	01 fb                	add    ebx,edi
c00015ce:	89 d8                	mov    eax,ebx
c00015d0:	29 f0                	sub    eax,esi
c00015d2:	89 c6                	mov    esi,eax
c00015d4:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015d7:	89 c2                	mov    edx,eax
c00015d9:	83 e2 fc             	and    edx,0xfffffffc
c00015dc:	29 f2                	sub    edx,esi
c00015de:	a8 02                	test   al,0x2
c00015e0:	74 10                	je     c00015f2 <dlmemalign+0xbc>
c00015e2:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015e5:	83 ca 02             	or     edx,0x2
c00015e8:	8d 43 08             	lea    eax,[ebx+0x8]
c00015eb:	89 33                	mov    DWORD PTR [ebx],esi
c00015ed:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015f0:	eb 5f                	jmp    c0001651 <dlmemalign+0x11b>
c00015f2:	83 ec 0c             	sub    esp,0xc
c00015f5:	89 d0                	mov    eax,edx
c00015f7:	83 c8 01             	or     eax,0x1
c00015fa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00015fd:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001602:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001605:	83 e0 01             	and    eax,0x1
c0001608:	09 f0                	or     eax,esi
c000160a:	89 de                	mov    esi,ebx
c000160c:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000160f:	51                   	push   ecx
c0001610:	e8 d4 f4 ff ff       	call   c0000ae9 <dlfree>
c0001615:	83 c4 10             	add    esp,0x10
c0001618:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000161b:	a8 02                	test   al,0x2
c000161d:	75 2f                	jne    c000164e <dlmemalign+0x118>
c000161f:	83 e0 fc             	and    eax,0xfffffffc
c0001622:	8d 55 10             	lea    edx,[ebp+0x10]
c0001625:	39 c2                	cmp    edx,eax
c0001627:	73 25                	jae    c000164e <dlmemalign+0x118>
c0001629:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000162c:	83 ec 0c             	sub    esp,0xc
c000162f:	29 e8                	sub    eax,ebp
c0001631:	83 c2 08             	add    edx,0x8
c0001634:	83 c8 01             	or     eax,0x1
c0001637:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000163a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000163d:	83 e0 01             	and    eax,0x1
c0001640:	09 c5                	or     ebp,eax
c0001642:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001645:	52                   	push   edx
c0001646:	e8 9e f4 ff ff       	call   c0000ae9 <dlfree>
c000164b:	83 c4 10             	add    esp,0x10
c000164e:	8d 46 08             	lea    eax,[esi+0x8]
c0001651:	83 c4 0c             	add    esp,0xc
c0001654:	5b                   	pop    ebx
c0001655:	5e                   	pop    esi
c0001656:	5f                   	pop    edi
c0001657:	5d                   	pop    ebp
c0001658:	c3                   	ret    

c0001659 <dlcalloc>:
c0001659:	53                   	push   ebx
c000165a:	83 ec 14             	sub    esp,0x14
c000165d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001661:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001666:	50                   	push   eax
c0001667:	e8 d8 f7 ff ff       	call   c0000e44 <dlmalloc>
c000166c:	83 c4 10             	add    esp,0x10
c000166f:	89 c3                	mov    ebx,eax
c0001671:	85 c0                	test   eax,eax
c0001673:	74 77                	je     c00016ec <dlcalloc+0x93>
c0001675:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 e0 fc             	and    eax,0xfffffffc
c000167d:	80 e2 02             	and    dl,0x2
c0001680:	75 5a                	jne    c00016dc <dlcalloc+0x83>
c0001682:	83 e8 04             	sub    eax,0x4
c0001685:	83 f8 27             	cmp    eax,0x27
c0001688:	76 03                	jbe    c000168d <dlcalloc+0x34>
c000168a:	51                   	push   ecx
c000168b:	eb 53                	jmp    c00016e0 <dlcalloc+0x87>
c000168d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001693:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000169a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00016a1:	83 f8 13             	cmp    eax,0x13
c00016a4:	76 46                	jbe    c00016ec <dlcalloc+0x93>
c00016a6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00016ad:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016b4:	83 f8 1b             	cmp    eax,0x1b
c00016b7:	76 33                	jbe    c00016ec <dlcalloc+0x93>
c00016b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016c0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016c7:	83 f8 23             	cmp    eax,0x23
c00016ca:	76 20                	jbe    c00016ec <dlcalloc+0x93>
c00016cc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016d3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016da:	eb 10                	jmp    c00016ec <dlcalloc+0x93>
c00016dc:	83 e8 08             	sub    eax,0x8
c00016df:	52                   	push   edx
c00016e0:	50                   	push   eax
c00016e1:	6a 00                	push   0x0
c00016e3:	53                   	push   ebx
c00016e4:	e8 1f ef ff ff       	call   c0000608 <memset>
c00016e9:	83 c4 10             	add    esp,0x10
c00016ec:	89 d8                	mov    eax,ebx
c00016ee:	83 c4 08             	add    esp,0x8
c00016f1:	5b                   	pop    ebx
c00016f2:	c3                   	ret    

c00016f3 <dlcfree>:
c00016f3:	e9 f1 f3 ff ff       	jmp    c0000ae9 <dlfree>

c00016f8 <dlindependent_calloc>:
c00016f8:	83 ec 28             	sub    esp,0x28
c00016fb:	b9 03 00 00 00       	mov    ecx,0x3
c0001700:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001704:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001708:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000170c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001710:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001714:	e8 b9 fa ff ff       	call   c00011d2 <iALLOc>
c0001719:	83 c4 2c             	add    esp,0x2c
c000171c:	c3                   	ret    

c000171d <dlindependent_comalloc>:
c000171d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001721:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001725:	31 c9                	xor    ecx,ecx
c0001727:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000172b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000172f:	e9 9e fa ff ff       	jmp    c00011d2 <iALLOc>

c0001734 <dlvalloc>:
c0001734:	83 ec 0c             	sub    esp,0xc
c0001737:	83 3d 00 2e 02 c0 00 	cmp    DWORD PTR ds:0xc0022e00,0x0
c000173e:	75 0a                	jne    c000174a <dlvalloc+0x16>
c0001740:	b8 00 2e 02 c0       	mov    eax,0xc0022e00
c0001745:	e8 b8 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000174a:	50                   	push   eax
c000174b:	50                   	push   eax
c000174c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001750:	ff 35 5c 31 02 c0    	push   DWORD PTR ds:0xc002315c
c0001756:	e8 db fd ff ff       	call   c0001536 <dlmemalign>
c000175b:	83 c4 1c             	add    esp,0x1c
c000175e:	c3                   	ret    

c000175f <dlpvalloc>:
c000175f:	83 ec 0c             	sub    esp,0xc
c0001762:	83 3d 00 2e 02 c0 00 	cmp    DWORD PTR ds:0xc0022e00,0x0
c0001769:	75 0a                	jne    c0001775 <dlpvalloc+0x16>
c000176b:	b8 00 2e 02 c0       	mov    eax,0xc0022e00
c0001770:	e8 8d f2 ff ff       	call   c0000a02 <malloc_consolidate>
c0001775:	a1 5c 31 02 c0       	mov    eax,ds:0xc002315c
c000177a:	89 c1                	mov    ecx,eax
c000177c:	52                   	push   edx
c000177d:	f7 d9                	neg    ecx
c000177f:	52                   	push   edx
c0001780:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001784:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001788:	21 ca                	and    edx,ecx
c000178a:	52                   	push   edx
c000178b:	50                   	push   eax
c000178c:	e8 a5 fd ff ff       	call   c0001536 <dlmemalign>
c0001791:	83 c4 1c             	add    esp,0x1c
c0001794:	c3                   	ret    

c0001795 <dlmalloc_trim>:
c0001795:	b8 00 2e 02 c0       	mov    eax,0xc0022e00
c000179a:	e8 63 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000179f:	31 c0                	xor    eax,eax
c00017a1:	c3                   	ret    

c00017a2 <dlmalloc_usable_size>:
c00017a2:	53                   	push   ebx
c00017a3:	31 c0                	xor    eax,eax
c00017a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00017a9:	85 c9                	test   ecx,ecx
c00017ab:	74 24                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017ad:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017b0:	f6 c2 02             	test   dl,0x2
c00017b3:	74 08                	je     c00017bd <dlmalloc_usable_size+0x1b>
c00017b5:	83 e2 fc             	and    edx,0xfffffffc
c00017b8:	8d 42 f8             	lea    eax,[edx-0x8]
c00017bb:	eb 14                	jmp    c00017d1 <dlmalloc_usable_size+0x2f>
c00017bd:	89 d3                	mov    ebx,edx
c00017bf:	31 c0                	xor    eax,eax
c00017c1:	83 e3 fe             	and    ebx,0xfffffffe
c00017c4:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017c9:	74 06                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017cb:	83 e2 fc             	and    edx,0xfffffffc
c00017ce:	8d 42 fc             	lea    eax,[edx-0x4]
c00017d1:	5b                   	pop    ebx
c00017d2:	c3                   	ret    

c00017d3 <dlmallinfo>:
c00017d3:	55                   	push   ebp
c00017d4:	57                   	push   edi
c00017d5:	56                   	push   esi
c00017d6:	53                   	push   ebx
c00017d7:	83 ec 08             	sub    esp,0x8
c00017da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017de:	83 3d 2c 2e 02 c0 00 	cmp    DWORD PTR ds:0xc0022e2c,0x0
c00017e5:	75 0a                	jne    c00017f1 <dlmallinfo+0x1e>
c00017e7:	b8 00 2e 02 c0       	mov    eax,0xc0022e00
c00017ec:	e8 11 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c00017f1:	a1 2c 2e 02 c0       	mov    eax,ds:0xc0022e2c
c00017f6:	31 ed                	xor    ebp,ebp
c00017f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00017fb:	31 c9                	xor    ecx,ecx
c00017fd:	83 e0 fc             	and    eax,0xfffffffc
c0001800:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001804:	31 c0                	xor    eax,eax
c0001806:	8b 14 85 04 2e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd1fc]
c000180d:	85 d2                	test   edx,edx
c000180f:	74 0e                	je     c000181f <dlmallinfo+0x4c>
c0001811:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001814:	45                   	inc    ebp
c0001815:	83 e6 fc             	and    esi,0xfffffffc
c0001818:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000181b:	01 f1                	add    ecx,esi
c000181d:	eb ee                	jmp    c000180d <dlmallinfo+0x3a>
c000181f:	40                   	inc    eax
c0001820:	83 f8 0a             	cmp    eax,0xa
c0001823:	75 e1                	jne    c0001806 <dlmallinfo+0x33>
c0001825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001829:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001830:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001833:	b8 34 2e 02 c0       	mov    eax,0xc0022e34
c0001838:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000183b:	39 f0                	cmp    eax,esi
c000183d:	74 10                	je     c000184f <dlmallinfo+0x7c>
c000183f:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001842:	ff 04 24             	inc    DWORD PTR [esp]
c0001845:	83 e7 fc             	and    edi,0xfffffffc
c0001848:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000184b:	01 fa                	add    edx,edi
c000184d:	eb ec                	jmp    c000183b <dlmallinfo+0x68>
c000184f:	83 c0 08             	add    eax,0x8
c0001852:	3d 2c 31 02 c0       	cmp    eax,0xc002312c
c0001857:	75 df                	jne    c0001838 <dlmallinfo+0x65>
c0001859:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000185c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000185f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001862:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c0001867:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000186a:	89 03                	mov    DWORD PTR [ebx],eax
c000186c:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000186f:	8b 35 50 31 02 c0    	mov    esi,DWORD PTR ds:0xc0023150
c0001875:	29 d0                	sub    eax,edx
c0001877:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000187a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000187d:	8b 35 64 31 02 c0    	mov    esi,DWORD PTR ds:0xc0023164
c0001883:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001887:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000188a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000188d:	8b 35 74 31 02 c0    	mov    esi,DWORD PTR ds:0xc0023174
c0001893:	89 d8                	mov    eax,ebx
c0001895:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001898:	83 c4 08             	add    esp,0x8
c000189b:	5b                   	pop    ebx
c000189c:	5e                   	pop    esi
c000189d:	5f                   	pop    edi
c000189e:	5d                   	pop    ebp
c000189f:	c2 04 00             	ret    0x4

c00018a2 <dlmalloc_stats>:
c00018a2:	83 ec 30             	sub    esp,0x30
c00018a5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00018a9:	50                   	push   eax
c00018aa:	e8 24 ff ff ff       	call   c00017d3 <dlmallinfo>
c00018af:	83 c4 30             	add    esp,0x30
c00018b2:	c3                   	ret    

c00018b3 <dlmallopt>:
c00018b3:	56                   	push   esi
c00018b4:	b8 00 2e 02 c0       	mov    eax,0xc0022e00
c00018b9:	53                   	push   ebx
c00018ba:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018c2:	e8 3b f1 ff ff       	call   c0000a02 <malloc_consolidate>
c00018c7:	8d 46 04             	lea    eax,[esi+0x4]
c00018ca:	83 f8 05             	cmp    eax,0x5
c00018cd:	77 67                	ja     c0001936 <dlmallopt+0x83>
c00018cf:	ff 24 85 84 f2 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0d7c]
c00018d6:	83 fb 50             	cmp    ebx,0x50
c00018d9:	77 5b                	ja     c0001936 <dlmallopt+0x83>
c00018db:	ba 08 00 00 00       	mov    edx,0x8
c00018e0:	85 db                	test   ebx,ebx
c00018e2:	74 12                	je     c00018f6 <dlmallopt+0x43>
c00018e4:	83 c3 0b             	add    ebx,0xb
c00018e7:	ba 10 00 00 00       	mov    edx,0x10
c00018ec:	83 fb 0f             	cmp    ebx,0xf
c00018ef:	76 05                	jbe    c00018f6 <dlmallopt+0x43>
c00018f1:	89 da                	mov    edx,ebx
c00018f3:	83 e2 f8             	and    edx,0xfffffff8
c00018f6:	a1 00 2e 02 c0       	mov    eax,ds:0xc0022e00
c00018fb:	83 e0 03             	and    eax,0x3
c00018fe:	09 d0                	or     eax,edx
c0001900:	a3 00 2e 02 c0       	mov    ds:0xc0022e00,eax
c0001905:	eb 31                	jmp    c0001938 <dlmallopt+0x85>
c0001907:	89 1d 44 31 02 c0    	mov    DWORD PTR ds:0xc0023144,ebx
c000190d:	eb 06                	jmp    c0001915 <dlmallopt+0x62>
c000190f:	89 1d 48 31 02 c0    	mov    DWORD PTR ds:0xc0023148,ebx
c0001915:	be 01 00 00 00       	mov    esi,0x1
c000191a:	eb 1c                	jmp    c0001938 <dlmallopt+0x85>
c000191c:	89 1d 4c 31 02 c0    	mov    DWORD PTR ds:0xc002314c,ebx
c0001922:	eb f1                	jmp    c0001915 <dlmallopt+0x62>
c0001924:	31 f6                	xor    esi,esi
c0001926:	85 db                	test   ebx,ebx
c0001928:	75 0e                	jne    c0001938 <dlmallopt+0x85>
c000192a:	c7 05 54 31 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023154,0x0
c0001934:	eb df                	jmp    c0001915 <dlmallopt+0x62>
c0001936:	31 f6                	xor    esi,esi
c0001938:	89 f0                	mov    eax,esi
c000193a:	5b                   	pop    ebx
c000193b:	5e                   	pop    esi
c000193c:	c3                   	ret    

c000193d <disk_status>:
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <disk_initialize>:
c0001940:	31 c0                	xor    eax,eax
c0001942:	c3                   	ret    

c0001943 <disk_read>:
c0001943:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001948:	0f b6 04 85 a0 46 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb960]
c0001950:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001954:	e9 cf 7d 01 00       	jmp    c0019728 <fatWrapperReadDisk>

c0001959 <disk_write>:
c0001959:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000195e:	0f b6 04 85 a0 46 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb960]
c0001966:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000196a:	e9 00 7e 01 00       	jmp    c001976f <fatWrapperWriteDisk>

c000196f <disk_ioctl>:
c000196f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001978:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000197d:	0f b6 04 85 a0 46 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb960]
c0001985:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001989:	e9 28 7e 01 00       	jmp    c00197b6 <fatWrapperIoctl>

c000198e <ld_word>:
c000198e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001992:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001995:	c1 e2 08             	shl    edx,0x8
c0001998:	09 d0                	or     eax,edx
c000199a:	c3                   	ret    

c000199b <ld_dword>:
c000199b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c000199f:	89 d1                	mov    ecx,edx
c00019a1:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019a5:	c1 e1 08             	shl    ecx,0x8
c00019a8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019ab:	09 ca                	or     edx,ecx
c00019ad:	c1 e2 08             	shl    edx,0x8
c00019b0:	09 d0                	or     eax,edx
c00019b2:	c3                   	ret    

c00019b3 <ld_qword>:
c00019b3:	57                   	push   edi
c00019b4:	56                   	push   esi
c00019b5:	53                   	push   ebx
c00019b6:	31 db                	xor    ebx,ebx
c00019b8:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00019bb:	89 df                	mov    edi,ebx
c00019bd:	89 ce                	mov    esi,ecx
c00019bf:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00019c3:	0f a4 f7 08          	shld   edi,esi,0x8
c00019c7:	c1 e6 08             	shl    esi,0x8
c00019ca:	09 f2                	or     edx,esi
c00019cc:	89 d6                	mov    esi,edx
c00019ce:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00019d2:	0f a4 f7 08          	shld   edi,esi,0x8
c00019d6:	c1 e6 08             	shl    esi,0x8
c00019d9:	09 f2                	or     edx,esi
c00019db:	89 d6                	mov    esi,edx
c00019dd:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019e1:	0f a4 f7 08          	shld   edi,esi,0x8
c00019e5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019e8:	c1 e6 08             	shl    esi,0x8
c00019eb:	89 fb                	mov    ebx,edi
c00019ed:	09 f2                	or     edx,esi
c00019ef:	89 d1                	mov    ecx,edx
c00019f1:	0f a4 cb 08          	shld   ebx,ecx,0x8
c00019f5:	c1 e1 08             	shl    ecx,0x8
c00019f8:	89 da                	mov    edx,ebx
c00019fa:	09 c8                	or     eax,ecx
c00019fc:	5b                   	pop    ebx
c00019fd:	5e                   	pop    esi
c00019fe:	5f                   	pop    edi
c00019ff:	c3                   	ret    

c0001a00 <st_word>:
c0001a00:	66 89 10             	mov    WORD PTR [eax],dx
c0001a03:	c3                   	ret    

c0001a04 <st_dword>:
c0001a04:	89 10                	mov    DWORD PTR [eax],edx
c0001a06:	c3                   	ret    

c0001a07 <st_qword>:
c0001a07:	89 10                	mov    DWORD PTR [eax],edx
c0001a09:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a0c:	c3                   	ret    

c0001a0d <mem_cpy>:
c0001a0d:	85 c9                	test   ecx,ecx
c0001a0f:	74 10                	je     c0001a21 <mem_cpy+0x14>
c0001a11:	57                   	push   edi
c0001a12:	01 c1                	add    ecx,eax
c0001a14:	56                   	push   esi
c0001a15:	89 c7                	mov    edi,eax
c0001a17:	89 d6                	mov    esi,edx
c0001a19:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a1a:	39 f9                	cmp    ecx,edi
c0001a1c:	75 fb                	jne    c0001a19 <mem_cpy+0xc>
c0001a1e:	5e                   	pop    esi
c0001a1f:	5f                   	pop    edi
c0001a20:	c3                   	ret    
c0001a21:	c3                   	ret    

c0001a22 <mem_set>:
c0001a22:	01 c1                	add    ecx,eax
c0001a24:	40                   	inc    eax
c0001a25:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a28:	39 c8                	cmp    eax,ecx
c0001a2a:	75 f8                	jne    c0001a24 <mem_set+0x2>
c0001a2c:	c3                   	ret    

c0001a2d <mem_cmp>:
c0001a2d:	57                   	push   edi
c0001a2e:	56                   	push   esi
c0001a2f:	89 c6                	mov    esi,eax
c0001a31:	53                   	push   ebx
c0001a32:	46                   	inc    esi
c0001a33:	42                   	inc    edx
c0001a34:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001a38:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001a3c:	29 fb                	sub    ebx,edi
c0001a3e:	89 cf                	mov    edi,ecx
c0001a40:	29 f7                	sub    edi,esi
c0001a42:	01 c7                	add    edi,eax
c0001a44:	74 04                	je     c0001a4a <mem_cmp+0x1d>
c0001a46:	85 db                	test   ebx,ebx
c0001a48:	74 e8                	je     c0001a32 <mem_cmp+0x5>
c0001a4a:	89 d8                	mov    eax,ebx
c0001a4c:	5b                   	pop    ebx
c0001a4d:	5e                   	pop    esi
c0001a4e:	5f                   	pop    edi
c0001a4f:	c3                   	ret    

c0001a50 <chk_chr>:
c0001a50:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001a53:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001a56:	74 07                	je     c0001a5f <chk_chr+0xf>
c0001a58:	39 d1                	cmp    ecx,edx
c0001a5a:	74 03                	je     c0001a5f <chk_chr+0xf>
c0001a5c:	40                   	inc    eax
c0001a5d:	eb f1                	jmp    c0001a50 <chk_chr>
c0001a5f:	89 c8                	mov    eax,ecx
c0001a61:	c3                   	ret    

c0001a62 <dbc_1st>:
c0001a62:	31 c0                	xor    eax,eax
c0001a64:	c3                   	ret    

c0001a65 <dbc_2nd>:
c0001a65:	31 c0                	xor    eax,eax
c0001a67:	c3                   	ret    

c0001a68 <tchar2uni>:
c0001a68:	57                   	push   edi
c0001a69:	89 c7                	mov    edi,eax
c0001a6b:	56                   	push   esi
c0001a6c:	53                   	push   ebx
c0001a6d:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a6f:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a71:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a74:	84 c9                	test   cl,cl
c0001a76:	78 0a                	js     c0001a82 <tchar2uni+0x1a>
c0001a78:	0f b6 d1             	movzx  edx,cl
c0001a7b:	89 f3                	mov    ebx,esi
c0001a7d:	e9 9f 00 00 00       	jmp    c0001b21 <tchar2uni+0xb9>
c0001a82:	88 ca                	mov    dl,cl
c0001a84:	83 e2 e0             	and    edx,0xffffffe0
c0001a87:	80 fa c0             	cmp    dl,0xc0
c0001a8a:	75 0c                	jne    c0001a98 <tchar2uni+0x30>
c0001a8c:	89 ca                	mov    edx,ecx
c0001a8e:	b9 01 00 00 00       	mov    ecx,0x1
c0001a93:	83 e2 1f             	and    edx,0x1f
c0001a96:	eb 2e                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001a98:	88 ca                	mov    dl,cl
c0001a9a:	83 e2 f0             	and    edx,0xfffffff0
c0001a9d:	80 fa e0             	cmp    dl,0xe0
c0001aa0:	75 0c                	jne    c0001aae <tchar2uni+0x46>
c0001aa2:	89 ca                	mov    edx,ecx
c0001aa4:	b9 02 00 00 00       	mov    ecx,0x2
c0001aa9:	83 e2 0f             	and    edx,0xf
c0001aac:	eb 18                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001aae:	88 ca                	mov    dl,cl
c0001ab0:	83 e2 f8             	and    edx,0xfffffff8
c0001ab3:	88 d0                	mov    al,dl
c0001ab5:	83 ca ff             	or     edx,0xffffffff
c0001ab8:	3c f0                	cmp    al,0xf0
c0001aba:	75 6c                	jne    c0001b28 <tchar2uni+0xc0>
c0001abc:	89 ca                	mov    edx,ecx
c0001abe:	b9 03 00 00 00       	mov    ecx,0x3
c0001ac3:	83 e2 07             	and    edx,0x7
c0001ac6:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001aca:	46                   	inc    esi
c0001acb:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ace:	88 c8                	mov    al,cl
c0001ad0:	83 e0 c0             	and    eax,0xffffffc0
c0001ad3:	3c 80                	cmp    al,0x80
c0001ad5:	75 4e                	jne    c0001b25 <tchar2uni+0xbd>
c0001ad7:	c1 e2 06             	shl    edx,0x6
c0001ada:	83 e1 3f             	and    ecx,0x3f
c0001add:	09 ca                	or     edx,ecx
c0001adf:	39 de                	cmp    esi,ebx
c0001ae1:	75 e7                	jne    c0001aca <tchar2uni+0x62>
c0001ae3:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ae6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001aec:	77 37                	ja     c0001b25 <tchar2uni+0xbd>
c0001aee:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001af4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001afa:	76 29                	jbe    c0001b25 <tchar2uni+0xbd>
c0001afc:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b02:	76 1d                	jbe    c0001b21 <tchar2uni+0xb9>
c0001b04:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b0a:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b10:	c1 e1 06             	shl    ecx,0x6
c0001b13:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b19:	09 ca                	or     edx,ecx
c0001b1b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b21:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b23:	eb 03                	jmp    c0001b28 <tchar2uni+0xc0>
c0001b25:	83 ca ff             	or     edx,0xffffffff
c0001b28:	5b                   	pop    ebx
c0001b29:	89 d0                	mov    eax,edx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	c3                   	ret    

c0001b2e <put_utf>:
c0001b2e:	53                   	push   ebx
c0001b2f:	83 f8 7f             	cmp    eax,0x7f
c0001b32:	89 c3                	mov    ebx,eax
c0001b34:	b0 00                	mov    al,0x0
c0001b36:	77 11                	ja     c0001b49 <put_utf+0x1b>
c0001b38:	85 c9                	test   ecx,ecx
c0001b3a:	0f 84 e5 00 00 00    	je     c0001c25 <put_utf+0xf7>
c0001b40:	88 1a                	mov    BYTE PTR [edx],bl
c0001b42:	b0 01                	mov    al,0x1
c0001b44:	e9 dc 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b49:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001b4f:	77 23                	ja     c0001b74 <put_utf+0x46>
c0001b51:	83 f9 01             	cmp    ecx,0x1
c0001b54:	0f 86 cb 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b5a:	89 d8                	mov    eax,ebx
c0001b5c:	83 e3 3f             	and    ebx,0x3f
c0001b5f:	c1 e8 06             	shr    eax,0x6
c0001b62:	83 cb 80             	or     ebx,0xffffff80
c0001b65:	83 c8 c0             	or     eax,0xffffffc0
c0001b68:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b6b:	88 02                	mov    BYTE PTR [edx],al
c0001b6d:	b0 02                	mov    al,0x2
c0001b6f:	e9 b1 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b74:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b7a:	77 40                	ja     c0001bbc <put_utf+0x8e>
c0001b7c:	83 f9 02             	cmp    ecx,0x2
c0001b7f:	0f 86 a0 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b85:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b8b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b91:	0f 86 8e 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b97:	89 d8                	mov    eax,ebx
c0001b99:	c1 e8 0c             	shr    eax,0xc
c0001b9c:	83 c8 e0             	or     eax,0xffffffe0
c0001b9f:	88 02                	mov    BYTE PTR [edx],al
c0001ba1:	89 d8                	mov    eax,ebx
c0001ba3:	83 e3 3f             	and    ebx,0x3f
c0001ba6:	c1 e8 06             	shr    eax,0x6
c0001ba9:	83 cb 80             	or     ebx,0xffffff80
c0001bac:	83 e0 3f             	and    eax,0x3f
c0001baf:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001bb2:	83 c8 80             	or     eax,0xffffff80
c0001bb5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001bb8:	b0 03                	mov    al,0x3
c0001bba:	eb 69                	jmp    c0001c25 <put_utf+0xf7>
c0001bbc:	83 f9 03             	cmp    ecx,0x3
c0001bbf:	76 64                	jbe    c0001c25 <put_utf+0xf7>
c0001bc1:	89 d9                	mov    ecx,ebx
c0001bc3:	0f b7 c3             	movzx  eax,bx
c0001bc6:	66 31 c9             	xor    cx,cx
c0001bc9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001bcf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001bd5:	c1 e9 06             	shr    ecx,0x6
c0001bd8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001bde:	77 43                	ja     c0001c23 <put_utf+0xf5>
c0001be0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001be6:	77 3b                	ja     c0001c23 <put_utf+0xf5>
c0001be8:	09 cb                	or     ebx,ecx
c0001bea:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001bf0:	89 d8                	mov    eax,ebx
c0001bf2:	c1 e8 12             	shr    eax,0x12
c0001bf5:	83 c8 f0             	or     eax,0xfffffff0
c0001bf8:	88 02                	mov    BYTE PTR [edx],al
c0001bfa:	89 d8                	mov    eax,ebx
c0001bfc:	c1 e8 0c             	shr    eax,0xc
c0001bff:	83 e0 3f             	and    eax,0x3f
c0001c02:	83 c8 80             	or     eax,0xffffff80
c0001c05:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c08:	89 d8                	mov    eax,ebx
c0001c0a:	83 e3 3f             	and    ebx,0x3f
c0001c0d:	c1 e8 06             	shr    eax,0x6
c0001c10:	83 cb 80             	or     ebx,0xffffff80
c0001c13:	83 e0 3f             	and    eax,0x3f
c0001c16:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c19:	83 c8 80             	or     eax,0xffffff80
c0001c1c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c1f:	b0 04                	mov    al,0x4
c0001c21:	eb 02                	jmp    c0001c25 <put_utf+0xf7>
c0001c23:	31 c0                	xor    eax,eax
c0001c25:	5b                   	pop    ebx
c0001c26:	c3                   	ret    

c0001c27 <clst2sect>:
c0001c27:	89 c1                	mov    ecx,eax
c0001c29:	83 ea 02             	sub    edx,0x2
c0001c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001c2f:	83 e8 02             	sub    eax,0x2
c0001c32:	39 d0                	cmp    eax,edx
c0001c34:	76 0d                	jbe    c0001c43 <clst2sect+0x1c>
c0001c36:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001c3a:	f7 e2                	mul    edx
c0001c3c:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001c3f:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001c42:	c3                   	ret    
c0001c43:	31 c0                	xor    eax,eax
c0001c45:	31 d2                	xor    edx,edx
c0001c47:	c3                   	ret    

c0001c48 <clmt_clust>:
c0001c48:	57                   	push   edi
c0001c49:	89 cf                	mov    edi,ecx
c0001c4b:	56                   	push   esi
c0001c4c:	89 d6                	mov    esi,edx
c0001c4e:	53                   	push   ebx
c0001c4f:	0f ac fe 09          	shrd   esi,edi,0x9
c0001c53:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001c56:	89 f2                	mov    edx,esi
c0001c58:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c5a:	c1 ef 09             	shr    edi,0x9
c0001c5d:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001c61:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001c64:	89 f9                	mov    ecx,edi
c0001c66:	31 ff                	xor    edi,edi
c0001c68:	57                   	push   edi
c0001c69:	56                   	push   esi
c0001c6a:	51                   	push   ecx
c0001c6b:	52                   	push   edx
c0001c6c:	e8 0b c7 01 00       	call   c001e37c <__udivdi3>
c0001c71:	83 c4 10             	add    esp,0x10
c0001c74:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001c76:	85 d2                	test   edx,edx
c0001c78:	74 10                	je     c0001c8a <clmt_clust+0x42>
c0001c7a:	39 d0                	cmp    eax,edx
c0001c7c:	72 07                	jb     c0001c85 <clmt_clust+0x3d>
c0001c7e:	29 d0                	sub    eax,edx
c0001c80:	83 c3 08             	add    ebx,0x8
c0001c83:	eb ef                	jmp    c0001c74 <clmt_clust+0x2c>
c0001c85:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001c88:	89 c2                	mov    edx,eax
c0001c8a:	5b                   	pop    ebx
c0001c8b:	89 d0                	mov    eax,edx
c0001c8d:	5e                   	pop    esi
c0001c8e:	5f                   	pop    edi
c0001c8f:	c3                   	ret    

c0001c90 <pick_lfn>:
c0001c90:	55                   	push   ebp
c0001c91:	57                   	push   edi
c0001c92:	56                   	push   esi
c0001c93:	89 d6                	mov    esi,edx
c0001c95:	53                   	push   ebx
c0001c96:	89 c3                	mov    ebx,eax
c0001c98:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001c9b:	e8 ee fc ff ff       	call   c000198e <ld_word>
c0001ca0:	66 85 c0             	test   ax,ax
c0001ca3:	74 04                	je     c0001ca9 <pick_lfn+0x19>
c0001ca5:	31 c0                	xor    eax,eax
c0001ca7:	eb 5c                	jmp    c0001d05 <pick_lfn+0x75>
c0001ca9:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001cac:	bd 01 00 00 00       	mov    ebp,0x1
c0001cb1:	83 e1 bf             	and    ecx,0xffffffbf
c0001cb4:	31 ff                	xor    edi,edi
c0001cb6:	49                   	dec    ecx
c0001cb7:	6b c9 0d             	imul   ecx,ecx,0xd
c0001cba:	0f b6 87 a0 f3 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe0c60]
c0001cc1:	01 f0                	add    eax,esi
c0001cc3:	e8 c6 fc ff ff       	call   c000198e <ld_word>
c0001cc8:	66 85 ed             	test   bp,bp
c0001ccb:	74 11                	je     c0001cde <pick_lfn+0x4e>
c0001ccd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cd3:	77 d0                	ja     c0001ca5 <pick_lfn+0x15>
c0001cd5:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001cd9:	89 c5                	mov    ebp,eax
c0001cdb:	41                   	inc    ecx
c0001cdc:	eb 04                	jmp    c0001ce2 <pick_lfn+0x52>
c0001cde:	66 40                	inc    ax
c0001ce0:	75 c3                	jne    c0001ca5 <pick_lfn+0x15>
c0001ce2:	47                   	inc    edi
c0001ce3:	83 ff 0d             	cmp    edi,0xd
c0001ce6:	75 d2                	jne    c0001cba <pick_lfn+0x2a>
c0001ce8:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ceb:	74 13                	je     c0001d00 <pick_lfn+0x70>
c0001ced:	66 85 ed             	test   bp,bp
c0001cf0:	74 0e                	je     c0001d00 <pick_lfn+0x70>
c0001cf2:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cf8:	77 ab                	ja     c0001ca5 <pick_lfn+0x15>
c0001cfa:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d00:	b8 01 00 00 00       	mov    eax,0x1
c0001d05:	5b                   	pop    ebx
c0001d06:	5e                   	pop    esi
c0001d07:	5f                   	pop    edi
c0001d08:	5d                   	pop    ebp
c0001d09:	c3                   	ret    

c0001d0a <put_lfn>:
c0001d0a:	55                   	push   ebp
c0001d0b:	31 ed                	xor    ebp,ebp
c0001d0d:	57                   	push   edi
c0001d0e:	89 d7                	mov    edi,edx
c0001d10:	56                   	push   esi
c0001d11:	31 f6                	xor    esi,esi
c0001d13:	53                   	push   ebx
c0001d14:	83 ec 08             	sub    esp,0x8
c0001d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d1a:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d22:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d28:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d2b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d2e:	31 d2                	xor    edx,edx
c0001d30:	e8 cb fc ff ff       	call   c0001a00 <st_word>
c0001d35:	0f b6 d9             	movzx  ebx,cl
c0001d38:	4b                   	dec    ebx
c0001d39:	6b db 0d             	imul   ebx,ebx,0xd
c0001d3c:	66 83 fe ff          	cmp    si,0xffff
c0001d40:	74 08                	je     c0001d4a <put_lfn+0x40>
c0001d42:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d45:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001d49:	43                   	inc    ebx
c0001d4a:	0f b6 85 a0 f3 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0c60]
c0001d51:	0f b7 d6             	movzx  edx,si
c0001d54:	01 f8                	add    eax,edi
c0001d56:	e8 a5 fc ff ff       	call   c0001a00 <st_word>
c0001d5b:	66 85 f6             	test   si,si
c0001d5e:	75 03                	jne    c0001d63 <put_lfn+0x59>
c0001d60:	83 ce ff             	or     esi,0xffffffff
c0001d63:	45                   	inc    ebp
c0001d64:	83 fd 0d             	cmp    ebp,0xd
c0001d67:	75 d3                	jne    c0001d3c <put_lfn+0x32>
c0001d69:	66 46                	inc    si
c0001d6b:	74 0a                	je     c0001d77 <put_lfn+0x6d>
c0001d6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001d75:	75 09                	jne    c0001d80 <put_lfn+0x76>
c0001d77:	88 c8                	mov    al,cl
c0001d79:	83 c8 40             	or     eax,0x40
c0001d7c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d80:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d84:	88 07                	mov    BYTE PTR [edi],al
c0001d86:	83 c4 08             	add    esp,0x8
c0001d89:	5b                   	pop    ebx
c0001d8a:	5e                   	pop    esi
c0001d8b:	5f                   	pop    edi
c0001d8c:	5d                   	pop    ebp
c0001d8d:	c3                   	ret    

c0001d8e <gen_numname>:
c0001d8e:	57                   	push   edi
c0001d8f:	89 cf                	mov    edi,ecx
c0001d91:	56                   	push   esi
c0001d92:	b9 0b 00 00 00       	mov    ecx,0xb
c0001d97:	53                   	push   ebx
c0001d98:	89 c6                	mov    esi,eax
c0001d9a:	83 ec 10             	sub    esp,0x10
c0001d9d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001da1:	e8 67 fc ff ff       	call   c0001a0d <mem_cpy>
c0001da6:	83 fb 05             	cmp    ebx,0x5
c0001da9:	76 2d                	jbe    c0001dd8 <gen_numname+0x4a>
c0001dab:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001dae:	66 85 c0             	test   ax,ax
c0001db1:	74 25                	je     c0001dd8 <gen_numname+0x4a>
c0001db3:	83 c7 02             	add    edi,0x2
c0001db6:	ba 10 00 00 00       	mov    edx,0x10
c0001dbb:	01 db                	add    ebx,ebx
c0001dbd:	89 c1                	mov    ecx,eax
c0001dbf:	66 d1 e8             	shr    ax,1
c0001dc2:	83 e1 01             	and    ecx,0x1
c0001dc5:	01 cb                	add    ebx,ecx
c0001dc7:	0f ba e3 10          	bt     ebx,0x10
c0001dcb:	73 06                	jae    c0001dd3 <gen_numname+0x45>
c0001dcd:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001dd3:	4a                   	dec    edx
c0001dd4:	75 e5                	jne    c0001dbb <gen_numname+0x2d>
c0001dd6:	eb d3                	jmp    c0001dab <gen_numname+0x1d>
c0001dd8:	b8 07 00 00 00       	mov    eax,0x7
c0001ddd:	88 d9                	mov    cl,bl
c0001ddf:	83 e1 0f             	and    ecx,0xf
c0001de2:	8d 51 30             	lea    edx,[ecx+0x30]
c0001de5:	80 fa 39             	cmp    dl,0x39
c0001de8:	76 03                	jbe    c0001ded <gen_numname+0x5f>
c0001dea:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ded:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001df0:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001df4:	89 da                	mov    edx,ebx
c0001df6:	c1 ea 04             	shr    edx,0x4
c0001df9:	83 fb 0f             	cmp    ebx,0xf
c0001dfc:	76 06                	jbe    c0001e04 <gen_numname+0x76>
c0001dfe:	89 c8                	mov    eax,ecx
c0001e00:	89 d3                	mov    ebx,edx
c0001e02:	eb d9                	jmp    c0001ddd <gen_numname+0x4f>
c0001e04:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e09:	31 d2                	xor    edx,edx
c0001e0b:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e0e:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e11:	39 ca                	cmp    edx,ecx
c0001e13:	73 18                	jae    c0001e2d <gen_numname+0x9f>
c0001e15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e18:	3c 20                	cmp    al,0x20
c0001e1a:	74 11                	je     c0001e2d <gen_numname+0x9f>
c0001e1c:	e8 41 fc ff ff       	call   c0001a62 <dbc_1st>
c0001e21:	85 c0                	test   eax,eax
c0001e23:	74 05                	je     c0001e2a <gen_numname+0x9c>
c0001e25:	39 d3                	cmp    ebx,edx
c0001e27:	74 04                	je     c0001e2d <gen_numname+0x9f>
c0001e29:	42                   	inc    edx
c0001e2a:	42                   	inc    edx
c0001e2b:	eb e1                	jmp    c0001e0e <gen_numname+0x80>
c0001e2d:	b0 20                	mov    al,0x20
c0001e2f:	83 f9 07             	cmp    ecx,0x7
c0001e32:	77 05                	ja     c0001e39 <gen_numname+0xab>
c0001e34:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001e38:	41                   	inc    ecx
c0001e39:	42                   	inc    edx
c0001e3a:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001e3e:	83 fa 07             	cmp    edx,0x7
c0001e41:	76 ea                	jbe    c0001e2d <gen_numname+0x9f>
c0001e43:	83 c4 10             	add    esp,0x10
c0001e46:	5b                   	pop    ebx
c0001e47:	5e                   	pop    esi
c0001e48:	5f                   	pop    edi
c0001e49:	c3                   	ret    

c0001e4a <sum_sfn>:
c0001e4a:	31 c9                	xor    ecx,ecx
c0001e4c:	31 d2                	xor    edx,edx
c0001e4e:	d0 ca                	ror    dl,1
c0001e50:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001e53:	41                   	inc    ecx
c0001e54:	83 f9 0b             	cmp    ecx,0xb
c0001e57:	75 f5                	jne    c0001e4e <sum_sfn+0x4>
c0001e59:	88 d0                	mov    al,dl
c0001e5b:	c3                   	ret    

c0001e5c <xdir_sum>:
c0001e5c:	56                   	push   esi
c0001e5d:	31 c9                	xor    ecx,ecx
c0001e5f:	53                   	push   ebx
c0001e60:	31 d2                	xor    edx,edx
c0001e62:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001e66:	43                   	inc    ebx
c0001e67:	c1 e3 05             	shl    ebx,0x5
c0001e6a:	83 fa 02             	cmp    edx,0x2
c0001e6d:	74 0b                	je     c0001e7a <xdir_sum+0x1e>
c0001e6f:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001e73:	66 d1 c9             	ror    cx,1
c0001e76:	01 f1                	add    ecx,esi
c0001e78:	eb 05                	jmp    c0001e7f <xdir_sum+0x23>
c0001e7a:	ba 03 00 00 00       	mov    edx,0x3
c0001e7f:	42                   	inc    edx
c0001e80:	39 d3                	cmp    ebx,edx
c0001e82:	77 e6                	ja     c0001e6a <xdir_sum+0xe>
c0001e84:	89 c8                	mov    eax,ecx
c0001e86:	5b                   	pop    ebx
c0001e87:	5e                   	pop    esi
c0001e88:	c3                   	ret    

c0001e89 <xsum32>:
c0001e89:	d1 ca                	ror    edx,1
c0001e8b:	0f b6 c0             	movzx  eax,al
c0001e8e:	01 d0                	add    eax,edx
c0001e90:	c3                   	ret    

c0001e91 <get_xfileinfo>:
c0001e91:	55                   	push   ebp
c0001e92:	31 c9                	xor    ecx,ecx
c0001e94:	57                   	push   edi
c0001e95:	bd 40 00 00 00       	mov    ebp,0x40
c0001e9a:	56                   	push   esi
c0001e9b:	31 ff                	xor    edi,edi
c0001e9d:	53                   	push   ebx
c0001e9e:	89 c6                	mov    esi,eax
c0001ea0:	83 ec 0c             	sub    esp,0xc
c0001ea3:	89 d3                	mov    ebx,edx
c0001ea5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001eac:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001eb0:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001eb3:	76 6d                	jbe    c0001f22 <get_xfileinfo+0x91>
c0001eb5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001ebb:	76 0b                	jbe    c0001ec8 <get_xfileinfo+0x37>
c0001ebd:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001ec1:	bf 01 00 00 00       	mov    edi,0x1
c0001ec6:	eb 63                	jmp    c0001f2b <get_xfileinfo+0x9a>
c0001ec8:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001ece:	75 03                	jne    c0001ed3 <get_xfileinfo+0x42>
c0001ed0:	83 c5 02             	add    ebp,0x2
c0001ed3:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001ed6:	83 c5 02             	add    ebp,0x2
c0001ed9:	e8 b0 fa ff ff       	call   c000198e <ld_word>
c0001ede:	ff 04 24             	inc    DWORD PTR [esp]
c0001ee1:	66 85 c9             	test   cx,cx
c0001ee4:	75 0d                	jne    c0001ef3 <get_xfileinfo+0x62>
c0001ee6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001eec:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001ef1:	76 2b                	jbe    c0001f1e <get_xfileinfo+0x8d>
c0001ef3:	c1 e1 10             	shl    ecx,0x10
c0001ef6:	ba ff 00 00 00       	mov    edx,0xff
c0001efb:	0f b7 c0             	movzx  eax,ax
c0001efe:	29 fa                	sub    edx,edi
c0001f00:	09 c8                	or     eax,ecx
c0001f02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f06:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f0a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f0e:	e8 1b fc ff ff       	call   c0001b2e <put_utf>
c0001f13:	84 c0                	test   al,al
c0001f15:	74 a6                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f17:	0f b6 c0             	movzx  eax,al
c0001f1a:	01 c7                	add    edi,eax
c0001f1c:	31 c0                	xor    eax,eax
c0001f1e:	89 c1                	mov    ecx,eax
c0001f20:	eb 8a                	jmp    c0001eac <get_xfileinfo+0x1b>
c0001f22:	85 ff                	test   edi,edi
c0001f24:	74 97                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f26:	66 85 c9             	test   cx,cx
c0001f29:	75 92                	jne    c0001ebd <get_xfileinfo+0x2c>
c0001f2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001f30:	31 c0                	xor    eax,eax
c0001f32:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001f36:	31 d2                	xor    edx,edx
c0001f38:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001f3b:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001f3e:	80 e1 10             	and    cl,0x10
c0001f41:	75 08                	jne    c0001f4b <get_xfileinfo+0xba>
c0001f43:	8d 46 38             	lea    eax,[esi+0x38]
c0001f46:	e8 68 fa ff ff       	call   c00019b3 <ld_qword>
c0001f4b:	89 03                	mov    DWORD PTR [ebx],eax
c0001f4d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001f50:	8d 46 0c             	lea    eax,[esi+0xc]
c0001f53:	e8 36 fa ff ff       	call   c000198e <ld_word>
c0001f58:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001f5c:	8d 46 0e             	lea    eax,[esi+0xe]
c0001f5f:	e8 2a fa ff ff       	call   c000198e <ld_word>
c0001f64:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001f68:	83 c4 0c             	add    esp,0xc
c0001f6b:	5b                   	pop    ebx
c0001f6c:	5e                   	pop    esi
c0001f6d:	5f                   	pop    edi
c0001f6e:	5d                   	pop    ebp
c0001f6f:	c3                   	ret    

c0001f70 <get_ldnumber>:
c0001f70:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f72:	85 d2                	test   edx,edx
c0001f74:	74 14                	je     c0001f8a <get_ldnumber+0x1a>
c0001f76:	56                   	push   esi
c0001f77:	53                   	push   ebx
c0001f78:	89 d3                	mov    ebx,edx
c0001f7a:	43                   	inc    ebx
c0001f7b:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f7e:	80 f9 1f             	cmp    cl,0x1f
c0001f81:	76 0d                	jbe    c0001f90 <get_ldnumber+0x20>
c0001f83:	80 f9 3a             	cmp    cl,0x3a
c0001f86:	75 f2                	jne    c0001f7a <get_ldnumber+0xa>
c0001f88:	eb 0a                	jmp    c0001f94 <get_ldnumber+0x24>
c0001f8a:	83 c9 ff             	or     ecx,0xffffffff
c0001f8d:	89 c8                	mov    eax,ecx
c0001f8f:	c3                   	ret    
c0001f90:	31 c9                	xor    ecx,ecx
c0001f92:	eb 24                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001f94:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001f97:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001f9a:	80 f9 09             	cmp    cl,0x9
c0001f9d:	77 16                	ja     c0001fb5 <get_ldnumber+0x45>
c0001f9f:	83 c2 02             	add    edx,0x2
c0001fa2:	83 c9 ff             	or     ecx,0xffffffff
c0001fa5:	39 d3                	cmp    ebx,edx
c0001fa7:	75 0f                	jne    c0001fb8 <get_ldnumber+0x48>
c0001fa9:	89 f2                	mov    edx,esi
c0001fab:	89 18                	mov    DWORD PTR [eax],ebx
c0001fad:	0f be ca             	movsx  ecx,dl
c0001fb0:	83 e9 30             	sub    ecx,0x30
c0001fb3:	eb 03                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001fb5:	83 c9 ff             	or     ecx,0xffffffff
c0001fb8:	89 c8                	mov    eax,ecx
c0001fba:	5b                   	pop    ebx
c0001fbb:	5e                   	pop    esi
c0001fbc:	c3                   	ret    

c0001fbd <crc32>:
c0001fbd:	56                   	push   esi
c0001fbe:	89 d6                	mov    esi,edx
c0001fc0:	53                   	push   ebx
c0001fc1:	b2 01                	mov    dl,0x1
c0001fc3:	bb 08 00 00 00       	mov    ebx,0x8
c0001fc8:	89 f1                	mov    ecx,esi
c0001fca:	84 d1                	test   cl,dl
c0001fcc:	0f 95 c1             	setne  cl
c0001fcf:	0f b6 c9             	movzx  ecx,cl
c0001fd2:	31 c1                	xor    ecx,eax
c0001fd4:	89 c8                	mov    eax,ecx
c0001fd6:	d1 e8                	shr    eax,1
c0001fd8:	80 e1 01             	and    cl,0x1
c0001fdb:	74 05                	je     c0001fe2 <crc32+0x25>
c0001fdd:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0001fe2:	d1 e2                	shl    edx,1
c0001fe4:	4b                   	dec    ebx
c0001fe5:	75 e1                	jne    c0001fc8 <crc32+0xb>
c0001fe7:	5b                   	pop    ebx
c0001fe8:	5e                   	pop    esi
c0001fe9:	c3                   	ret    

c0001fea <test_gpt_header>:
c0001fea:	55                   	push   ebp
c0001feb:	b9 10 00 00 00       	mov    ecx,0x10
c0001ff0:	57                   	push   edi
c0001ff1:	ba a0 f2 01 c0       	mov    edx,0xc001f2a0
c0001ff6:	56                   	push   esi
c0001ff7:	31 ff                	xor    edi,edi
c0001ff9:	53                   	push   ebx
c0001ffa:	89 c3                	mov    ebx,eax
c0001ffc:	e8 2c fa ff ff       	call   c0001a2d <mem_cmp>
c0002001:	85 c0                	test   eax,eax
c0002003:	75 55                	jne    c000205a <test_gpt_header+0x70>
c0002005:	89 c7                	mov    edi,eax
c0002007:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000200c:	83 ce ff             	or     esi,0xffffffff
c000200f:	31 d2                	xor    edx,edx
c0002011:	83 fd 03             	cmp    ebp,0x3
c0002014:	76 05                	jbe    c000201b <test_gpt_header+0x31>
c0002016:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000201b:	89 f0                	mov    eax,esi
c000201d:	45                   	inc    ebp
c000201e:	e8 9a ff ff ff       	call   c0001fbd <crc32>
c0002023:	83 fd 4c             	cmp    ebp,0x4c
c0002026:	89 c6                	mov    esi,eax
c0002028:	75 e5                	jne    c000200f <test_gpt_header+0x25>
c000202a:	8d 43 10             	lea    eax,[ebx+0x10]
c000202d:	f7 d6                	not    esi
c000202f:	e8 67 f9 ff ff       	call   c000199b <ld_dword>
c0002034:	39 c6                	cmp    esi,eax
c0002036:	75 22                	jne    c000205a <test_gpt_header+0x70>
c0002038:	8d 43 54             	lea    eax,[ebx+0x54]
c000203b:	e8 5b f9 ff ff       	call   c000199b <ld_dword>
c0002040:	83 c0 80             	add    eax,0xffffff80
c0002043:	75 15                	jne    c000205a <test_gpt_header+0x70>
c0002045:	8d 43 50             	lea    eax,[ebx+0x50]
c0002048:	e8 4e f9 ff ff       	call   c000199b <ld_dword>
c000204d:	3d 80 00 00 00       	cmp    eax,0x80
c0002052:	0f 96 c0             	setbe  al
c0002055:	0f b6 c0             	movzx  eax,al
c0002058:	89 c7                	mov    edi,eax
c000205a:	5b                   	pop    ebx
c000205b:	89 f8                	mov    eax,edi
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <make_rand>:
c0002061:	56                   	push   esi
c0002062:	85 c0                	test   eax,eax
c0002064:	53                   	push   ebx
c0002065:	75 05                	jne    c000206c <make_rand+0xb>
c0002067:	b8 01 00 00 00       	mov    eax,0x1
c000206c:	01 d1                	add    ecx,edx
c000206e:	bb 08 00 00 00       	mov    ebx,0x8
c0002073:	89 c6                	mov    esi,eax
c0002075:	d1 e8                	shr    eax,1
c0002077:	83 e6 01             	and    esi,0x1
c000207a:	85 f6                	test   esi,esi
c000207c:	74 05                	je     c0002083 <make_rand+0x22>
c000207e:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002083:	4b                   	dec    ebx
c0002084:	75 ed                	jne    c0002073 <make_rand+0x12>
c0002086:	42                   	inc    edx
c0002087:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000208a:	39 ca                	cmp    edx,ecx
c000208c:	75 e0                	jne    c000206e <make_rand+0xd>
c000208e:	5b                   	pop    ebx
c000208f:	5e                   	pop    esi
c0002090:	c3                   	ret    

c0002091 <validate>:
c0002091:	56                   	push   esi
c0002092:	53                   	push   ebx
c0002093:	89 d6                	mov    esi,edx
c0002095:	51                   	push   ecx
c0002096:	85 c0                	test   eax,eax
c0002098:	75 09                	jne    c00020a3 <validate+0x12>
c000209a:	b8 09 00 00 00       	mov    eax,0x9
c000209f:	31 c9                	xor    ecx,ecx
c00020a1:	eb 2f                	jmp    c00020d2 <validate+0x41>
c00020a3:	89 c3                	mov    ebx,eax
c00020a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00020a7:	85 c0                	test   eax,eax
c00020a9:	74 ef                	je     c000209a <validate+0x9>
c00020ab:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00020ae:	74 ea                	je     c000209a <validate+0x9>
c00020b0:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00020b4:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00020b8:	75 e0                	jne    c000209a <validate+0x9>
c00020ba:	83 ec 0c             	sub    esp,0xc
c00020bd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020c1:	50                   	push   eax
c00020c2:	e8 76 f8 ff ff       	call   c000193d <disk_status>
c00020c7:	83 c4 10             	add    esp,0x10
c00020ca:	a8 01                	test   al,0x1
c00020cc:	75 cc                	jne    c000209a <validate+0x9>
c00020ce:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00020d0:	31 c0                	xor    eax,eax
c00020d2:	89 0e                	mov    DWORD PTR [esi],ecx
c00020d4:	5a                   	pop    edx
c00020d5:	5b                   	pop    ebx
c00020d6:	5e                   	pop    esi
c00020d7:	c3                   	ret    

c00020d8 <sync_window>:
c00020d8:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00020dc:	0f 84 85 00 00 00    	je     c0002167 <sync_window+0x8f>
c00020e2:	55                   	push   ebp
c00020e3:	8d 68 54             	lea    ebp,[eax+0x54]
c00020e6:	57                   	push   edi
c00020e7:	56                   	push   esi
c00020e8:	53                   	push   ebx
c00020e9:	89 c3                	mov    ebx,eax
c00020eb:	83 ec 28             	sub    esp,0x28
c00020ee:	6a 01                	push   0x1
c00020f0:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00020f3:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00020f6:	55                   	push   ebp
c00020f7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020fb:	50                   	push   eax
c00020fc:	e8 58 f8 ff ff       	call   c0001959 <disk_write>
c0002101:	83 c4 20             	add    esp,0x20
c0002104:	ba 01 00 00 00       	mov    edx,0x1
c0002109:	85 c0                	test   eax,eax
c000210b:	75 50                	jne    c000215d <sync_window+0x85>
c000210d:	31 ff                	xor    edi,edi
c000210f:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002112:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002116:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000211a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000211d:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002120:	89 c6                	mov    esi,eax
c0002122:	89 d7                	mov    edi,edx
c0002124:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002127:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000212b:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000212e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002132:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002136:	73 23                	jae    c000215b <sync_window+0x83>
c0002138:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000213c:	75 1d                	jne    c000215b <sync_window+0x83>
c000213e:	83 ec 0c             	sub    esp,0xc
c0002141:	6a 01                	push   0x1
c0002143:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002147:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000214b:	52                   	push   edx
c000214c:	50                   	push   eax
c000214d:	55                   	push   ebp
c000214e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002152:	50                   	push   eax
c0002153:	e8 01 f8 ff ff       	call   c0001959 <disk_write>
c0002158:	83 c4 20             	add    esp,0x20
c000215b:	31 d2                	xor    edx,edx
c000215d:	83 c4 1c             	add    esp,0x1c
c0002160:	89 d0                	mov    eax,edx
c0002162:	5b                   	pop    ebx
c0002163:	5e                   	pop    esi
c0002164:	5f                   	pop    edi
c0002165:	5d                   	pop    ebp
c0002166:	c3                   	ret    
c0002167:	31 d2                	xor    edx,edx
c0002169:	89 d0                	mov    eax,edx
c000216b:	c3                   	ret    

c000216c <move_window>:
c000216c:	56                   	push   esi
c000216d:	53                   	push   ebx
c000216e:	89 c3                	mov    ebx,eax
c0002170:	83 ec 14             	sub    esp,0x14
c0002173:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002176:	75 07                	jne    c000217f <move_window+0x13>
c0002178:	31 f6                	xor    esi,esi
c000217a:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000217d:	74 59                	je     c00021d8 <move_window+0x6c>
c000217f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002183:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002187:	89 d8                	mov    eax,ebx
c0002189:	e8 4a ff ff ff       	call   c00020d8 <sync_window>
c000218e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002192:	89 c6                	mov    esi,eax
c0002194:	85 c0                	test   eax,eax
c0002196:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000219a:	75 3c                	jne    c00021d8 <move_window+0x6c>
c000219c:	83 ec 0c             	sub    esp,0xc
c000219f:	8d 43 54             	lea    eax,[ebx+0x54]
c00021a2:	6a 01                	push   0x1
c00021a4:	51                   	push   ecx
c00021a5:	52                   	push   edx
c00021a6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00021aa:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00021ae:	50                   	push   eax
c00021af:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021b3:	50                   	push   eax
c00021b4:	e8 8a f7 ff ff       	call   c0001943 <disk_read>
c00021b9:	83 c4 20             	add    esp,0x20
c00021bc:	85 c0                	test   eax,eax
c00021be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00021c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021c6:	74 0a                	je     c00021d2 <move_window+0x66>
c00021c8:	83 ca ff             	or     edx,0xffffffff
c00021cb:	be 01 00 00 00       	mov    esi,0x1
c00021d0:	89 d1                	mov    ecx,edx
c00021d2:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00021d5:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00021d8:	89 f0                	mov    eax,esi
c00021da:	83 c4 14             	add    esp,0x14
c00021dd:	5b                   	pop    ebx
c00021de:	5e                   	pop    esi
c00021df:	c3                   	ret    

c00021e0 <check_fs>:
c00021e0:	53                   	push   ebx
c00021e1:	89 c3                	mov    ebx,eax
c00021e3:	83 ec 08             	sub    esp,0x8
c00021e6:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00021ea:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00021f1:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00021f8:	e8 6f ff ff ff       	call   c000216c <move_window>
c00021fd:	ba 04 00 00 00       	mov    edx,0x4
c0002202:	85 c0                	test   eax,eax
c0002204:	0f 85 89 00 00 00    	jne    c0002293 <check_fs+0xb3>
c000220a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002210:	e8 79 f7 ff ff       	call   c000198e <ld_word>
c0002215:	ba 03 00 00 00       	mov    edx,0x3
c000221a:	66 3d 55 aa          	cmp    ax,0xaa55
c000221e:	75 73                	jne    c0002293 <check_fs+0xb3>
c0002220:	ba c0 f3 01 c0       	mov    edx,0xc001f3c0
c0002225:	8d 43 54             	lea    eax,[ebx+0x54]
c0002228:	b9 0b 00 00 00       	mov    ecx,0xb
c000222d:	e8 fb f7 ff ff       	call   c0001a2d <mem_cmp>
c0002232:	ba 01 00 00 00       	mov    edx,0x1
c0002237:	85 c0                	test   eax,eax
c0002239:	74 58                	je     c0002293 <check_fs+0xb3>
c000223b:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000223e:	8d 50 18             	lea    edx,[eax+0x18]
c0002241:	80 fa 01             	cmp    dl,0x1
c0002244:	76 09                	jbe    c000224f <check_fs+0x6f>
c0002246:	ba 02 00 00 00       	mov    edx,0x2
c000224b:	3c eb                	cmp    al,0xeb
c000224d:	75 44                	jne    c0002293 <check_fs+0xb3>
c000224f:	ba 20 1d 02 c0       	mov    edx,0xc0021d20
c0002254:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000225a:	b9 03 00 00 00       	mov    ecx,0x3
c000225f:	e8 c9 f7 ff ff       	call   c0001a2d <mem_cmp>
c0002264:	31 d2                	xor    edx,edx
c0002266:	85 c0                	test   eax,eax
c0002268:	74 29                	je     c0002293 <check_fs+0xb3>
c000226a:	ba cc f3 01 c0       	mov    edx,0xc001f3cc
c000226f:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002275:	b9 05 00 00 00       	mov    ecx,0x5
c000227a:	e8 ae f7 ff ff       	call   c0001a2d <mem_cmp>
c000227f:	31 d2                	xor    edx,edx
c0002281:	85 c0                	test   eax,eax
c0002283:	74 0e                	je     c0002293 <check_fs+0xb3>
c0002285:	31 d2                	xor    edx,edx
c0002287:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000228e:	0f 95 c2             	setne  dl
c0002291:	01 d2                	add    edx,edx
c0002293:	89 d0                	mov    eax,edx
c0002295:	83 c4 08             	add    esp,0x8
c0002298:	5b                   	pop    ebx
c0002299:	c3                   	ret    

c000229a <find_volume>:
c000229a:	55                   	push   ebp
c000229b:	31 c9                	xor    ecx,ecx
c000229d:	57                   	push   edi
c000229e:	56                   	push   esi
c000229f:	89 d6                	mov    esi,edx
c00022a1:	53                   	push   ebx
c00022a2:	31 d2                	xor    edx,edx
c00022a4:	83 ec 3c             	sub    esp,0x3c
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	e8 32 ff ff ff       	call   c00021e0 <check_fs>
c00022ae:	83 f8 02             	cmp    eax,0x2
c00022b1:	74 0e                	je     c00022c1 <find_volume+0x27>
c00022b3:	0f 87 5d 01 00 00    	ja     c0002416 <find_volume+0x17c>
c00022b9:	85 f6                	test   esi,esi
c00022bb:	0f 84 55 01 00 00    	je     c0002416 <find_volume+0x17c>
c00022c1:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00022c8:	0f 85 dd 00 00 00    	jne    c00023ab <find_volume+0x111>
c00022ce:	31 c9                	xor    ecx,ecx
c00022d0:	ba 01 00 00 00       	mov    edx,0x1
c00022d5:	89 d8                	mov    eax,ebx
c00022d7:	e8 90 fe ff ff       	call   c000216c <move_window>
c00022dc:	85 c0                	test   eax,eax
c00022de:	74 0a                	je     c00022ea <find_volume+0x50>
c00022e0:	b8 04 00 00 00       	mov    eax,0x4
c00022e5:	e9 2c 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c00022ea:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00022ed:	89 e8                	mov    eax,ebp
c00022ef:	e8 f6 fc ff ff       	call   c0001fea <test_gpt_header>
c00022f4:	85 c0                	test   eax,eax
c00022f6:	75 0a                	jne    c0002302 <find_volume+0x68>
c00022f8:	b8 03 00 00 00       	mov    eax,0x3
c00022fd:	e9 14 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c0002302:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002308:	e8 8e f6 ff ff       	call   c000199b <ld_dword>
c000230d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002311:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002317:	e8 97 f6 ff ff       	call   c00019b3 <ld_qword>
c000231c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002324:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000232c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002334:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002338:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000233c:	74 ba                	je     c00022f8 <find_volume+0x5e>
c000233e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002342:	31 c9                	xor    ecx,ecx
c0002344:	c1 e7 07             	shl    edi,0x7
c0002347:	89 d8                	mov    eax,ebx
c0002349:	89 fa                	mov    edx,edi
c000234b:	c1 ea 09             	shr    edx,0x9
c000234e:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002352:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002356:	e8 11 fe ff ff       	call   c000216c <move_window>
c000235b:	85 c0                	test   eax,eax
c000235d:	75 81                	jne    c00022e0 <find_volume+0x46>
c000235f:	81 e7 80 01 00 00    	and    edi,0x180
c0002365:	b9 10 00 00 00       	mov    ecx,0x10
c000236a:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000236e:	ba b0 f3 01 c0       	mov    edx,0xc001f3b0
c0002373:	e8 b5 f6 ff ff       	call   c0001a2d <mem_cmp>
c0002378:	85 c0                	test   eax,eax
c000237a:	75 29                	jne    c00023a5 <find_volume+0x10b>
c000237c:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002380:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002384:	e8 2a f6 ff ff       	call   c00019b3 <ld_qword>
c0002389:	89 d1                	mov    ecx,edx
c000238b:	89 c2                	mov    edx,eax
c000238d:	89 d8                	mov    eax,ebx
c000238f:	e8 4c fe ff ff       	call   c00021e0 <check_fs>
c0002394:	85 f6                	test   esi,esi
c0002396:	75 07                	jne    c000239f <find_volume+0x105>
c0002398:	83 f8 01             	cmp    eax,0x1
c000239b:	77 08                	ja     c00023a5 <find_volume+0x10b>
c000239d:	eb 77                	jmp    c0002416 <find_volume+0x17c>
c000239f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00023a3:	74 71                	je     c0002416 <find_volume+0x17c>
c00023a5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00023a9:	eb 89                	jmp    c0002334 <find_volume+0x9a>
c00023ab:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00023af:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00023b5:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00023bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023bf:	89 cd                	mov    ebp,ecx
c00023c1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00023c5:	89 f8                	mov    eax,edi
c00023c7:	83 c7 10             	add    edi,0x10
c00023ca:	e8 cc f5 ff ff       	call   c000199b <ld_dword>
c00023cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00023d3:	89 01                	mov    DWORD PTR [ecx],eax
c00023d5:	83 c1 04             	add    ecx,0x4
c00023d8:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023dc:	75 e3                	jne    c00023c1 <find_volume+0x127>
c00023de:	31 ff                	xor    edi,edi
c00023e0:	85 f6                	test   esi,esi
c00023e2:	74 03                	je     c00023e7 <find_volume+0x14d>
c00023e4:	8d 7e ff             	lea    edi,[esi-0x1]
c00023e7:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00023eb:	85 d2                	test   edx,edx
c00023ed:	74 14                	je     c0002403 <find_volume+0x169>
c00023ef:	31 c9                	xor    ecx,ecx
c00023f1:	89 d8                	mov    eax,ebx
c00023f3:	e8 e8 fd ff ff       	call   c00021e0 <check_fs>
c00023f8:	83 f8 01             	cmp    eax,0x1
c00023fb:	76 19                	jbe    c0002416 <find_volume+0x17c>
c00023fd:	85 f6                	test   esi,esi
c00023ff:	74 0f                	je     c0002410 <find_volume+0x176>
c0002401:	eb 13                	jmp    c0002416 <find_volume+0x17c>
c0002403:	85 f6                	test   esi,esi
c0002405:	0f 85 ed fe ff ff    	jne    c00022f8 <find_volume+0x5e>
c000240b:	b8 03 00 00 00       	mov    eax,0x3
c0002410:	47                   	inc    edi
c0002411:	83 ff 03             	cmp    edi,0x3
c0002414:	76 d1                	jbe    c00023e7 <find_volume+0x14d>
c0002416:	83 c4 3c             	add    esp,0x3c
c0002419:	5b                   	pop    ebx
c000241a:	5e                   	pop    esi
c000241b:	5f                   	pop    edi
c000241c:	5d                   	pop    ebp
c000241d:	c3                   	ret    

c000241e <mount_volume>:
c000241e:	55                   	push   ebp
c000241f:	57                   	push   edi
c0002420:	89 cf                	mov    edi,ecx
c0002422:	56                   	push   esi
c0002423:	53                   	push   ebx
c0002424:	bb 0b 00 00 00       	mov    ebx,0xb
c0002429:	83 ec 3c             	sub    esp,0x3c
c000242c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002432:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002436:	e8 35 fb ff ff       	call   c0001f70 <get_ldnumber>
c000243b:	85 c0                	test   eax,eax
c000243d:	0f 88 3a 05 00 00    	js     c000297d <mount_volume+0x55f>
c0002443:	8b 2c 85 a0 31 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdce60]
c000244a:	89 c6                	mov    esi,eax
c000244c:	bb 0c 00 00 00       	mov    ebx,0xc
c0002451:	85 ed                	test   ebp,ebp
c0002453:	0f 84 24 05 00 00    	je     c000297d <mount_volume+0x55f>
c0002459:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245d:	83 e7 fe             	and    edi,0xfffffffe
c0002460:	89 2a                	mov    DWORD PTR [edx],ebp
c0002462:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002466:	74 32                	je     c000249a <mount_volume+0x7c>
c0002468:	83 ec 0c             	sub    esp,0xc
c000246b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000246f:	50                   	push   eax
c0002470:	e8 c8 f4 ff ff       	call   c000193d <disk_status>
c0002475:	83 c4 10             	add    esp,0x10
c0002478:	a8 01                	test   al,0x1
c000247a:	75 1e                	jne    c000249a <mount_volume+0x7c>
c000247c:	31 db                	xor    ebx,ebx
c000247e:	89 f9                	mov    ecx,edi
c0002480:	84 c9                	test   cl,cl
c0002482:	0f 84 f5 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002488:	a8 04                	test   al,0x4
c000248a:	0f 84 ed 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002490:	bb 0a 00 00 00       	mov    ebx,0xa
c0002495:	e9 e3 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c000249a:	83 ec 0c             	sub    esp,0xc
c000249d:	89 f0                	mov    eax,esi
c000249f:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00024a3:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c00024a6:	0f b6 f0             	movzx  esi,al
c00024a9:	bb 03 00 00 00       	mov    ebx,0x3
c00024ae:	56                   	push   esi
c00024af:	e8 8c f4 ff ff       	call   c0001940 <disk_initialize>
c00024b4:	83 c4 10             	add    esp,0x10
c00024b7:	a8 01                	test   al,0x1
c00024b9:	0f 85 be 04 00 00    	jne    c000297d <mount_volume+0x55f>
c00024bf:	89 f9                	mov    ecx,edi
c00024c1:	84 c9                	test   cl,cl
c00024c3:	74 04                	je     c00024c9 <mount_volume+0xab>
c00024c5:	a8 04                	test   al,0x4
c00024c7:	75 c7                	jne    c0002490 <mount_volume+0x72>
c00024c9:	31 d2                	xor    edx,edx
c00024cb:	89 e8                	mov    eax,ebp
c00024cd:	e8 c8 fd ff ff       	call   c000229a <find_volume>
c00024d2:	83 f8 04             	cmp    eax,0x4
c00024d5:	75 0a                	jne    c00024e1 <mount_volume+0xc3>
c00024d7:	bb 01 00 00 00       	mov    ebx,0x1
c00024dc:	e9 9c 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024e1:	83 f8 01             	cmp    eax,0x1
c00024e4:	76 0a                	jbe    c00024f0 <mount_volume+0xd2>
c00024e6:	bb 0d 00 00 00       	mov    ebx,0xd
c00024eb:	e9 8d 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024f0:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00024f3:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00024f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00024fe:	75 17                	jne    c0002517 <mount_volume+0xf9>
c0002500:	b8 0b 00 00 00       	mov    eax,0xb
c0002505:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000250a:	75 da                	jne    c00024e6 <mount_volume+0xc8>
c000250c:	40                   	inc    eax
c000250d:	83 f8 40             	cmp    eax,0x40
c0002510:	75 f3                	jne    c0002505 <mount_volume+0xe7>
c0002512:	e9 5a 02 00 00       	jmp    c0002771 <mount_volume+0x353>
c0002517:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000251a:	e8 6f f4 ff ff       	call   c000198e <ld_word>
c000251f:	66 3d 00 02          	cmp    ax,0x200
c0002523:	75 c1                	jne    c00024e6 <mount_volume+0xc8>
c0002525:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002528:	e8 61 f4 ff ff       	call   c000198e <ld_word>
c000252d:	0f b7 c0             	movzx  eax,ax
c0002530:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002534:	85 c0                	test   eax,eax
c0002536:	75 0c                	jne    c0002544 <mount_volume+0x126>
c0002538:	8d 45 78             	lea    eax,[ebp+0x78]
c000253b:	e8 5b f4 ff ff       	call   c000199b <ld_dword>
c0002540:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002548:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000254b:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000254e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002552:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002555:	48                   	dec    eax
c0002556:	3c 01                	cmp    al,0x1
c0002558:	77 8c                	ja     c00024e6 <mount_volume+0xc8>
c000255a:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000255e:	89 c3                	mov    ebx,eax
c0002560:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002564:	66 85 c0             	test   ax,ax
c0002567:	0f 84 79 ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c000256d:	8d 40 ff             	lea    eax,[eax-0x1]
c0002570:	85 d8                	test   eax,ebx
c0002572:	0f 85 6e ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002578:	8d 45 65             	lea    eax,[ebp+0x65]
c000257b:	e8 0e f4 ff ff       	call   c000198e <ld_word>
c0002580:	89 c7                	mov    edi,eax
c0002582:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002586:	a8 0f                	test   al,0xf
c0002588:	0f 85 58 ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c000258e:	8d 45 67             	lea    eax,[ebp+0x67]
c0002591:	e8 f8 f3 ff ff       	call   c000198e <ld_word>
c0002596:	0f b7 f0             	movzx  esi,ax
c0002599:	85 f6                	test   esi,esi
c000259b:	75 0a                	jne    c00025a7 <mount_volume+0x189>
c000259d:	8d 45 74             	lea    eax,[ebp+0x74]
c00025a0:	e8 f6 f3 ff ff       	call   c000199b <ld_dword>
c00025a5:	89 c6                	mov    esi,eax
c00025a7:	8d 45 62             	lea    eax,[ebp+0x62]
c00025aa:	e8 df f3 ff ff       	call   c000198e <ld_word>
c00025af:	66 85 c0             	test   ax,ax
c00025b2:	0f 84 2e ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c00025b8:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00025bd:	0f b7 c8             	movzx  ecx,ax
c00025c0:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00025c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00025c9:	89 fa                	mov    edx,edi
c00025cb:	66 c1 ea 04          	shr    dx,0x4
c00025cf:	0f b7 d2             	movzx  edx,dx
c00025d2:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00025d6:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00025d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025dd:	39 c6                	cmp    esi,eax
c00025df:	0f 82 01 ff ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025e5:	29 c6                	sub    esi,eax
c00025e7:	31 d2                	xor    edx,edx
c00025e9:	89 f0                	mov    eax,esi
c00025eb:	f7 f3                	div    ebx
c00025ed:	39 de                	cmp    esi,ebx
c00025ef:	0f 82 f1 fe ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025f5:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00025fa:	0f 87 e6 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c0002600:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002605:	0f 86 63 03 00 00    	jbe    c000296e <mount_volume+0x550>
c000260b:	bb 03 00 00 00       	mov    ebx,0x3
c0002610:	8d 70 02             	lea    esi,[eax+0x2]
c0002613:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000261b:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000261e:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002621:	31 d2                	xor    edx,edx
c0002623:	89 c8                	mov    eax,ecx
c0002625:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002628:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000262c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002630:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002634:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002638:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000263b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000263e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002642:	31 d2                	xor    edx,edx
c0002644:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002648:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000264c:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000264f:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002652:	83 fb 03             	cmp    ebx,0x3
c0002655:	75 2b                	jne    c0002682 <mount_volume+0x264>
c0002657:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000265a:	e8 2f f3 ff ff       	call   c000198e <ld_word>
c000265f:	66 09 c7             	or     di,ax
c0002662:	0f 85 7e fe ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002668:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000266e:	c1 e6 02             	shl    esi,0x2
c0002671:	e8 25 f3 ff ff       	call   c000199b <ld_dword>
c0002676:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000267d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002680:	eb 30                	jmp    c00026b2 <mount_volume+0x294>
c0002682:	66 85 ff             	test   di,di
c0002685:	0f 84 5b fe ff ff    	je     c00024e6 <mount_volume+0xc8>
c000268b:	31 d2                	xor    edx,edx
c000268d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002691:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002695:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002699:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000269c:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000269f:	83 fb 02             	cmp    ebx,0x2
c00026a2:	75 04                	jne    c00026a8 <mount_volume+0x28a>
c00026a4:	01 f6                	add    esi,esi
c00026a6:	eb 0a                	jmp    c00026b2 <mount_volume+0x294>
c00026a8:	8d 04 76             	lea    eax,[esi+esi*2]
c00026ab:	83 e6 01             	and    esi,0x1
c00026ae:	d1 e8                	shr    eax,1
c00026b0:	01 c6                	add    esi,eax
c00026b2:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00026b8:	c1 ee 09             	shr    esi,0x9
c00026bb:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026bf:	0f 87 21 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00026c5:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00026cc:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00026d3:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00026d7:	83 fb 03             	cmp    ebx,0x3
c00026da:	75 7a                	jne    c0002756 <mount_volume+0x338>
c00026dc:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00026e2:	e8 a7 f2 ff ff       	call   c000198e <ld_word>
c00026e7:	66 48                	dec    ax
c00026e9:	75 6b                	jne    c0002756 <mount_volume+0x338>
c00026eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026f3:	83 c2 01             	add    edx,0x1
c00026f6:	89 e8                	mov    eax,ebp
c00026f8:	83 d1 00             	adc    ecx,0x0
c00026fb:	e8 6c fa ff ff       	call   c000216c <move_window>
c0002700:	85 c0                	test   eax,eax
c0002702:	75 52                	jne    c0002756 <mount_volume+0x338>
c0002704:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c0002708:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c000270e:	e8 7b f2 ff ff       	call   c000198e <ld_word>
c0002713:	66 3d 55 aa          	cmp    ax,0xaa55
c0002717:	75 3d                	jne    c0002756 <mount_volume+0x338>
c0002719:	8d 45 54             	lea    eax,[ebp+0x54]
c000271c:	e8 7a f2 ff ff       	call   c000199b <ld_dword>
c0002721:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002726:	75 2e                	jne    c0002756 <mount_volume+0x338>
c0002728:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000272e:	e8 68 f2 ff ff       	call   c000199b <ld_dword>
c0002733:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002738:	75 1c                	jne    c0002756 <mount_volume+0x338>
c000273a:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002740:	e8 56 f2 ff ff       	call   c000199b <ld_dword>
c0002745:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002748:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000274e:	e8 48 f2 ff ff       	call   c000199b <ld_dword>
c0002753:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002756:	66 a1 80 31 02 c0    	mov    ax,ds:0xc0023180
c000275c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000275f:	40                   	inc    eax
c0002760:	31 db                	xor    ebx,ebx
c0002762:	66 a3 80 31 02 c0    	mov    ds:0xc0023180,ax
c0002768:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000276c:	e9 0c 02 00 00       	jmp    c000297d <mount_volume+0x55f>
c0002771:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002777:	e8 12 f2 ff ff       	call   c000198e <ld_word>
c000277c:	66 3d 00 01          	cmp    ax,0x100
c0002780:	0f 85 60 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002786:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000278d:	0f 85 53 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002793:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002799:	e8 15 f2 ff ff       	call   c00019b3 <ld_qword>
c000279e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00027a6:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c00027ac:	e8 ea f1 ff ff       	call   c000199b <ld_dword>
c00027b1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027b4:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00027ba:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027bd:	fe c8                	dec    al
c00027bf:	0f 85 21 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c00027c5:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00027cc:	bb 01 00 00 00       	mov    ebx,0x1
c00027d1:	d3 e3                	shl    ebx,cl
c00027d3:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00027d7:	66 85 db             	test   bx,bx
c00027da:	0f 84 06 fd ff ff    	je     c00024e6 <mount_volume+0xc8>
c00027e0:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00027e6:	e8 b0 f1 ff ff       	call   c000199b <ld_dword>
c00027eb:	89 c6                	mov    esi,eax
c00027ed:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00027f2:	0f 87 ee fc ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00027f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027fc:	8d 40 02             	lea    eax,[eax+0x2]
c00027ff:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002802:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002805:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002809:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000280c:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002812:	e8 84 f1 ff ff       	call   c000199b <ld_dword>
c0002817:	31 d2                	xor    edx,edx
c0002819:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000281d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002821:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002825:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002829:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000282c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000282f:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002835:	e8 61 f1 ff ff       	call   c000199b <ld_dword>
c000283a:	31 d2                	xor    edx,edx
c000283c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002840:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002844:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002848:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000284b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000284e:	0f b7 c3             	movzx  eax,bx
c0002851:	31 d2                	xor    edx,edx
c0002853:	0f af f0             	imul   esi,eax
c0002856:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000285a:	89 f0                	mov    eax,esi
c000285c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002860:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002864:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002868:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000286c:	39 c1                	cmp    ecx,eax
c000286e:	89 df                	mov    edi,ebx
c0002870:	19 d7                	sbb    edi,edx
c0002872:	0f 82 6e fc ff ff    	jb     c00024e6 <mount_volume+0xc8>
c0002878:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000287e:	31 db                	xor    ebx,ebx
c0002880:	e8 16 f1 ff ff       	call   c000199b <ld_dword>
c0002885:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000288c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000288f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002897:	85 db                	test   ebx,ebx
c0002899:	75 39                	jne    c00028d4 <mount_volume+0x4b6>
c000289b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000289f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00028a3:	0f 86 3d fc ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028a9:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c00028ac:	31 ff                	xor    edi,edi
c00028ae:	89 e8                	mov    eax,ebp
c00028b0:	e8 72 f3 ff ff       	call   c0001c27 <clst2sect>
c00028b5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028b9:	01 c6                	add    esi,eax
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	11 d7                	adc    edi,edx
c00028bf:	89 f2                	mov    edx,esi
c00028c1:	89 f9                	mov    ecx,edi
c00028c3:	e8 a4 f8 ff ff       	call   c000216c <move_window>
c00028c8:	85 c0                	test   eax,eax
c00028ca:	0f 85 07 fc ff ff    	jne    c00024d7 <mount_volume+0xb9>
c00028d0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00028d4:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00028d9:	74 0b                	je     c00028e6 <mount_volume+0x4c8>
c00028db:	83 c3 20             	add    ebx,0x20
c00028de:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00028e4:	eb b1                	jmp    c0002897 <mount_volume+0x479>
c00028e6:	8d 75 54             	lea    esi,[ebp+0x54]
c00028e9:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00028ed:	e8 a9 f0 ff ff       	call   c000199b <ld_dword>
c00028f2:	89 c3                	mov    ebx,eax
c00028f4:	83 f8 01             	cmp    eax,0x1
c00028f7:	0f 86 e9 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028fd:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002900:	0f 86 e0 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c0002906:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002909:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000290d:	0f af c2             	imul   eax,edx
c0002910:	31 d2                	xor    edx,edx
c0002912:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002915:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002918:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000291b:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c000291e:	31 c9                	xor    ecx,ecx
c0002920:	89 da                	mov    edx,ebx
c0002922:	89 e8                	mov    eax,ebp
c0002924:	c1 ea 07             	shr    edx,0x7
c0002927:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000292a:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c000292d:	e8 3a f8 ff ff       	call   c000216c <move_window>
c0002932:	85 c0                	test   eax,eax
c0002934:	0f 85 9d fb ff ff    	jne    c00024d7 <mount_volume+0xb9>
c000293a:	89 d8                	mov    eax,ebx
c000293c:	83 e0 7f             	and    eax,0x7f
c000293f:	8d 04 86             	lea    eax,[esi+eax*4]
c0002942:	e8 54 f0 ff ff       	call   c000199b <ld_dword>
c0002947:	83 f8 ff             	cmp    eax,0xffffffff
c000294a:	74 0a                	je     c0002956 <mount_volume+0x538>
c000294c:	43                   	inc    ebx
c000294d:	39 d8                	cmp    eax,ebx
c000294f:	74 cd                	je     c000291e <mount_volume+0x500>
c0002951:	e9 90 fb ff ff       	jmp    c00024e6 <mount_volume+0xc8>
c0002956:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000295d:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002964:	bb 04 00 00 00       	mov    ebx,0x4
c0002969:	e9 e8 fd ff ff       	jmp    c0002756 <mount_volume+0x338>
c000296e:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002973:	19 db                	sbb    ebx,ebx
c0002975:	83 c3 02             	add    ebx,0x2
c0002978:	e9 93 fc ff ff       	jmp    c0002610 <mount_volume+0x1f2>
c000297d:	83 c4 3c             	add    esp,0x3c
c0002980:	89 d8                	mov    eax,ebx
c0002982:	5b                   	pop    ebx
c0002983:	5e                   	pop    esi
c0002984:	5f                   	pop    edi
c0002985:	5d                   	pop    ebp
c0002986:	c3                   	ret    

c0002987 <find_bitmap>:
c0002987:	55                   	push   ebp
c0002988:	57                   	push   edi
c0002989:	89 c7                	mov    edi,eax
c000298b:	56                   	push   esi
c000298c:	8d 72 fe             	lea    esi,[edx-0x2]
c000298f:	53                   	push   ebx
c0002990:	83 ec 1c             	sub    esp,0x1c
c0002993:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002996:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000299a:	83 e8 02             	sub    eax,0x2
c000299d:	39 f0                	cmp    eax,esi
c000299f:	77 02                	ja     c00029a3 <find_bitmap+0x1c>
c00029a1:	31 f6                	xor    esi,esi
c00029a3:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00029a7:	89 f3                	mov    ebx,esi
c00029a9:	31 ed                	xor    ebp,ebp
c00029ab:	31 c9                	xor    ecx,ecx
c00029ad:	89 da                	mov    edx,ebx
c00029af:	89 f8                	mov    eax,edi
c00029b1:	c1 ea 0c             	shr    edx,0xc
c00029b4:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c00029b7:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c00029ba:	e8 ad f7 ff ff       	call   c000216c <move_window>
c00029bf:	85 c0                	test   eax,eax
c00029c1:	75 68                	jne    c0002a2b <find_bitmap+0xa4>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	89 d9                	mov    ecx,ebx
c00029c7:	c1 ea 03             	shr    edx,0x3
c00029ca:	83 e1 07             	and    ecx,0x7
c00029cd:	b8 01 00 00 00       	mov    eax,0x1
c00029d2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00029d8:	d3 e0                	shl    eax,cl
c00029da:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c00029dd:	83 e9 02             	sub    ecx,0x2
c00029e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00029e4:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c00029e8:	43                   	inc    ebx
c00029e9:	21 c1                	and    ecx,eax
c00029eb:	d1 e0                	shl    eax,1
c00029ed:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c00029f1:	77 09                	ja     c00029fc <find_bitmap+0x75>
c00029f3:	31 db                	xor    ebx,ebx
c00029f5:	ba 00 02 00 00       	mov    edx,0x200
c00029fa:	31 c0                	xor    eax,eax
c00029fc:	84 c9                	test   cl,cl
c00029fe:	75 10                	jne    c0002a10 <find_bitmap+0x89>
c0002a00:	45                   	inc    ebp
c0002a01:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a05:	75 0f                	jne    c0002a16 <find_bitmap+0x8f>
c0002a07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a0b:	83 c0 02             	add    eax,0x2
c0002a0e:	eb 22                	jmp    c0002a32 <find_bitmap+0xab>
c0002a10:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a14:	31 ed                	xor    ebp,ebp
c0002a16:	39 de                	cmp    esi,ebx
c0002a18:	74 16                	je     c0002a30 <find_bitmap+0xa9>
c0002a1a:	84 c0                	test   al,al
c0002a1c:	75 c6                	jne    c00029e4 <find_bitmap+0x5d>
c0002a1e:	42                   	inc    edx
c0002a1f:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a25:	77 84                	ja     c00029ab <find_bitmap+0x24>
c0002a27:	b0 01                	mov    al,0x1
c0002a29:	eb b9                	jmp    c00029e4 <find_bitmap+0x5d>
c0002a2b:	83 c8 ff             	or     eax,0xffffffff
c0002a2e:	eb 02                	jmp    c0002a32 <find_bitmap+0xab>
c0002a30:	31 c0                	xor    eax,eax
c0002a32:	83 c4 1c             	add    esp,0x1c
c0002a35:	5b                   	pop    ebx
c0002a36:	5e                   	pop    esi
c0002a37:	5f                   	pop    edi
c0002a38:	5d                   	pop    ebp
c0002a39:	c3                   	ret    

c0002a3a <change_bitmap>:
c0002a3a:	55                   	push   ebp
c0002a3b:	89 cd                	mov    ebp,ecx
c0002a3d:	57                   	push   edi
c0002a3e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002a41:	56                   	push   esi
c0002a42:	89 c7                	mov    edi,eax
c0002a44:	53                   	push   ebx
c0002a45:	89 c8                	mov    eax,ecx
c0002a47:	83 ec 1c             	sub    esp,0x1c
c0002a4a:	31 d2                	xor    edx,edx
c0002a4c:	89 ce                	mov    esi,ecx
c0002a4e:	c1 e8 0c             	shr    eax,0xc
c0002a51:	bb 01 00 00 00       	mov    ebx,0x1
c0002a56:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002a59:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002a5c:	c1 ee 03             	shr    esi,0x3
c0002a5f:	83 e1 07             	and    ecx,0x7
c0002a62:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002a68:	d3 e3                	shl    ebx,cl
c0002a6a:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002a6e:	89 c1                	mov    ecx,eax
c0002a70:	89 d3                	mov    ebx,edx
c0002a72:	83 c1 01             	add    ecx,0x1
c0002a75:	83 d3 00             	adc    ebx,0x0
c0002a78:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a7c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002a80:	89 d1                	mov    ecx,edx
c0002a82:	89 c2                	mov    edx,eax
c0002a84:	89 f8                	mov    eax,edi
c0002a86:	e8 e1 f6 ff ff       	call   c000216c <move_window>
c0002a8b:	89 c1                	mov    ecx,eax
c0002a8d:	85 c0                	test   eax,eax
c0002a8f:	75 48                	jne    c0002ad9 <change_bitmap+0x9f>
c0002a91:	31 d2                	xor    edx,edx
c0002a93:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002a97:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002a9b:	0f 95 c2             	setne  dl
c0002a9e:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002aa2:	74 3c                	je     c0002ae0 <change_bitmap+0xa6>
c0002aa4:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002aa8:	4d                   	dec    ebp
c0002aa9:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002ab1:	74 32                	je     c0002ae5 <change_bitmap+0xab>
c0002ab3:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002ab7:	75 d8                	jne    c0002a91 <change_bitmap+0x57>
c0002ab9:	8d 46 01             	lea    eax,[esi+0x1]
c0002abc:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ac1:	89 c3                	mov    ebx,eax
c0002ac3:	31 f6                	xor    esi,esi
c0002ac5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ac9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acd:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ad3:	74 99                	je     c0002a6e <change_bitmap+0x34>
c0002ad5:	89 de                	mov    esi,ebx
c0002ad7:	eb b8                	jmp    c0002a91 <change_bitmap+0x57>
c0002ad9:	b9 01 00 00 00       	mov    ecx,0x1
c0002ade:	eb 05                	jmp    c0002ae5 <change_bitmap+0xab>
c0002ae0:	b9 02 00 00 00       	mov    ecx,0x2
c0002ae5:	83 c4 1c             	add    esp,0x1c
c0002ae8:	89 c8                	mov    eax,ecx
c0002aea:	5b                   	pop    ebx
c0002aeb:	5e                   	pop    esi
c0002aec:	5f                   	pop    edi
c0002aed:	5d                   	pop    ebp
c0002aee:	c3                   	ret    

c0002aef <put_fat>:
c0002aef:	83 fa 01             	cmp    edx,0x1
c0002af2:	0f 86 7b 01 00 00    	jbe    c0002c73 <put_fat+0x184>
c0002af8:	55                   	push   ebp
c0002af9:	57                   	push   edi
c0002afa:	89 cf                	mov    edi,ecx
c0002afc:	56                   	push   esi
c0002afd:	b9 02 00 00 00       	mov    ecx,0x2
c0002b02:	53                   	push   ebx
c0002b03:	89 c6                	mov    esi,eax
c0002b05:	83 ec 1c             	sub    esp,0x1c
c0002b08:	89 d3                	mov    ebx,edx
c0002b0a:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b0d:	0f 86 68 01 00 00    	jbe    c0002c7b <put_fat+0x18c>
c0002b13:	8a 00                	mov    al,BYTE PTR [eax]
c0002b15:	3c 02                	cmp    al,0x2
c0002b17:	0f 84 c7 00 00 00    	je     c0002be4 <put_fat+0xf5>
c0002b1d:	77 09                	ja     c0002b28 <put_fat+0x39>
c0002b1f:	fe c8                	dec    al
c0002b21:	74 17                	je     c0002b3a <put_fat+0x4b>
c0002b23:	e9 53 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b28:	b9 02 00 00 00       	mov    ecx,0x2
c0002b2d:	3c 04                	cmp    al,0x4
c0002b2f:	0f 86 e1 00 00 00    	jbe    c0002c16 <put_fat+0x127>
c0002b35:	e9 41 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b3a:	89 d5                	mov    ebp,edx
c0002b3c:	31 c9                	xor    ecx,ecx
c0002b3e:	d1 ed                	shr    ebp,1
c0002b40:	89 f0                	mov    eax,esi
c0002b42:	01 d5                	add    ebp,edx
c0002b44:	89 ea                	mov    edx,ebp
c0002b46:	c1 ea 09             	shr    edx,0x9
c0002b49:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b4c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b4f:	e8 18 f6 ff ff       	call   c000216c <move_window>
c0002b54:	89 c1                	mov    ecx,eax
c0002b56:	85 c0                	test   eax,eax
c0002b58:	0f 85 1d 01 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002b5e:	8d 46 54             	lea    eax,[esi+0x54]
c0002b61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b65:	8d 45 01             	lea    eax,[ebp+0x1]
c0002b68:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002b6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b72:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002b76:	89 f8                	mov    eax,edi
c0002b78:	83 e3 01             	and    ebx,0x1
c0002b7b:	74 0d                	je     c0002b8a <put_fat+0x9b>
c0002b7d:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002b80:	89 fa                	mov    edx,edi
c0002b82:	83 e0 0f             	and    eax,0xf
c0002b85:	c1 e2 04             	shl    edx,0x4
c0002b88:	09 d0                	or     eax,edx
c0002b8a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002b8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b91:	31 c9                	xor    ecx,ecx
c0002b93:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b97:	c1 ea 09             	shr    edx,0x9
c0002b9a:	89 f0                	mov    eax,esi
c0002b9c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b9f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ba2:	e8 c5 f5 ff ff       	call   c000216c <move_window>
c0002ba7:	89 c1                	mov    ecx,eax
c0002ba9:	85 c0                	test   eax,eax
c0002bab:	0f 85 ca 00 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002bb1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002bb5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bbb:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bbf:	85 db                	test   ebx,ebx
c0002bc1:	74 07                	je     c0002bca <put_fat+0xdb>
c0002bc3:	c1 ef 04             	shr    edi,0x4
c0002bc6:	89 fa                	mov    edx,edi
c0002bc8:	eb 0e                	jmp    c0002bd8 <put_fat+0xe9>
c0002bca:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002bcd:	c1 ef 08             	shr    edi,0x8
c0002bd0:	83 e2 f0             	and    edx,0xfffffff0
c0002bd3:	83 e7 0f             	and    edi,0xf
c0002bd6:	09 fa                	or     edx,edi
c0002bd8:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002bdb:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bdf:	e9 97 00 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002be4:	31 c9                	xor    ecx,ecx
c0002be6:	c1 ea 08             	shr    edx,0x8
c0002be9:	89 f0                	mov    eax,esi
c0002beb:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bee:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bf1:	e8 76 f5 ff ff       	call   c000216c <move_window>
c0002bf6:	89 c1                	mov    ecx,eax
c0002bf8:	85 c0                	test   eax,eax
c0002bfa:	75 7f                	jne    c0002c7b <put_fat+0x18c>
c0002bfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c00:	01 db                	add    ebx,ebx
c0002c02:	0f b7 d7             	movzx  edx,di
c0002c05:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c0b:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c0f:	e8 ec ed ff ff       	call   c0001a00 <st_word>
c0002c14:	eb 53                	jmp    c0002c69 <put_fat+0x17a>
c0002c16:	31 c9                	xor    ecx,ecx
c0002c18:	c1 ea 07             	shr    edx,0x7
c0002c1b:	89 f0                	mov    eax,esi
c0002c1d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c20:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c23:	e8 44 f5 ff ff       	call   c000216c <move_window>
c0002c28:	89 c1                	mov    ecx,eax
c0002c2a:	85 c0                	test   eax,eax
c0002c2c:	75 4d                	jne    c0002c7b <put_fat+0x18c>
c0002c2e:	c1 e3 02             	shl    ebx,0x2
c0002c31:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c37:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002c3a:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002c3e:	74 1c                	je     c0002c5c <put_fat+0x16d>
c0002c40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c44:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c4a:	89 d8                	mov    eax,ebx
c0002c4c:	e8 4a ed ff ff       	call   c000199b <ld_dword>
c0002c51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c55:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c5a:	09 c7                	or     edi,eax
c0002c5c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c60:	89 fa                	mov    edx,edi
c0002c62:	89 d8                	mov    eax,ebx
c0002c64:	e8 9b ed ff ff       	call   c0001a04 <st_dword>
c0002c69:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c71:	eb 08                	jmp    c0002c7b <put_fat+0x18c>
c0002c73:	b9 02 00 00 00       	mov    ecx,0x2
c0002c78:	89 c8                	mov    eax,ecx
c0002c7a:	c3                   	ret    
c0002c7b:	83 c4 1c             	add    esp,0x1c
c0002c7e:	89 c8                	mov    eax,ecx
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <fill_last_frag>:
c0002c85:	57                   	push   edi
c0002c86:	89 cf                	mov    edi,ecx
c0002c88:	56                   	push   esi
c0002c89:	89 d6                	mov    esi,edx
c0002c8b:	53                   	push   ebx
c0002c8c:	89 c3                	mov    ebx,eax
c0002c8e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002c91:	85 c0                	test   eax,eax
c0002c93:	74 21                	je     c0002cb6 <fill_last_frag+0x31>
c0002c95:	89 f9                	mov    ecx,edi
c0002c97:	83 f8 01             	cmp    eax,0x1
c0002c9a:	76 05                	jbe    c0002ca1 <fill_last_frag+0x1c>
c0002c9c:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002c9f:	29 c1                	sub    ecx,eax
c0002ca1:	8d 56 01             	lea    edx,[esi+0x1]
c0002ca4:	29 c2                	sub    edx,eax
c0002ca6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ca8:	e8 42 fe ff ff       	call   c0002aef <put_fat>
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 05                	jne    c0002cb6 <fill_last_frag+0x31>
c0002cb1:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002cb4:	eb d8                	jmp    c0002c8e <fill_last_frag+0x9>
c0002cb6:	5b                   	pop    ebx
c0002cb7:	5e                   	pop    esi
c0002cb8:	5f                   	pop    edi
c0002cb9:	c3                   	ret    

c0002cba <fill_first_frag>:
c0002cba:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002cbe:	75 2d                	jne    c0002ced <fill_first_frag+0x33>
c0002cc0:	57                   	push   edi
c0002cc1:	56                   	push   esi
c0002cc2:	53                   	push   ebx
c0002cc3:	89 c3                	mov    ebx,eax
c0002cc5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002cc8:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002ccb:	01 d7                	add    edi,edx
c0002ccd:	39 fa                	cmp    edx,edi
c0002ccf:	74 14                	je     c0002ce5 <fill_first_frag+0x2b>
c0002cd1:	8d 72 01             	lea    esi,[edx+0x1]
c0002cd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002cd6:	89 f1                	mov    ecx,esi
c0002cd8:	e8 12 fe ff ff       	call   c0002aef <put_fat>
c0002cdd:	89 f2                	mov    edx,esi
c0002cdf:	85 c0                	test   eax,eax
c0002ce1:	74 ea                	je     c0002ccd <fill_first_frag+0x13>
c0002ce3:	eb 0b                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ce5:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ce9:	31 c0                	xor    eax,eax
c0002ceb:	eb 03                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ced:	31 c0                	xor    eax,eax
c0002cef:	c3                   	ret    
c0002cf0:	5b                   	pop    ebx
c0002cf1:	5e                   	pop    esi
c0002cf2:	5f                   	pop    edi
c0002cf3:	c3                   	ret    

c0002cf4 <get_fat>:
c0002cf4:	83 fa 01             	cmp    edx,0x1
c0002cf7:	0f 86 db 01 00 00    	jbe    c0002ed8 <get_fat+0x1e4>
c0002cfd:	55                   	push   ebp
c0002cfe:	b9 01 00 00 00       	mov    ecx,0x1
c0002d03:	57                   	push   edi
c0002d04:	56                   	push   esi
c0002d05:	53                   	push   ebx
c0002d06:	83 ec 1c             	sub    esp,0x1c
c0002d09:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d0b:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d0e:	0f 86 cc 01 00 00    	jbe    c0002ee0 <get_fat+0x1ec>
c0002d14:	89 c3                	mov    ebx,eax
c0002d16:	89 d6                	mov    esi,edx
c0002d18:	8a 07                	mov    al,BYTE PTR [edi]
c0002d1a:	3c 02                	cmp    al,0x2
c0002d1c:	0f 84 99 00 00 00    	je     c0002dbb <get_fat+0xc7>
c0002d22:	77 09                	ja     c0002d2d <get_fat+0x39>
c0002d24:	fe c8                	dec    al
c0002d26:	74 1a                	je     c0002d42 <get_fat+0x4e>
c0002d28:	e9 b3 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d2d:	3c 03                	cmp    al,0x3
c0002d2f:	0f 84 b5 00 00 00    	je     c0002dea <get_fat+0xf6>
c0002d35:	3c 04                	cmp    al,0x4
c0002d37:	0f 84 e3 00 00 00    	je     c0002e20 <get_fat+0x12c>
c0002d3d:	e9 9e 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d42:	89 d3                	mov    ebx,edx
c0002d44:	31 c9                	xor    ecx,ecx
c0002d46:	d1 eb                	shr    ebx,1
c0002d48:	89 f8                	mov    eax,edi
c0002d4a:	01 d3                	add    ebx,edx
c0002d4c:	89 da                	mov    edx,ebx
c0002d4e:	c1 ea 09             	shr    edx,0x9
c0002d51:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d54:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d57:	e8 10 f4 ff ff       	call   c000216c <move_window>
c0002d5c:	85 c0                	test   eax,eax
c0002d5e:	74 08                	je     c0002d68 <get_fat+0x74>
c0002d60:	83 c9 ff             	or     ecx,0xffffffff
c0002d63:	e9 78 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d68:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002d6b:	31 c9                	xor    ecx,ecx
c0002d6d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d73:	89 ea                	mov    edx,ebp
c0002d75:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002d79:	c1 ea 09             	shr    edx,0x9
c0002d7c:	89 f8                	mov    eax,edi
c0002d7e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d81:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d84:	e8 e3 f3 ff ff       	call   c000216c <move_window>
c0002d89:	85 c0                	test   eax,eax
c0002d8b:	75 d3                	jne    c0002d60 <get_fat+0x6c>
c0002d8d:	0f b6 c3             	movzx  eax,bl
c0002d90:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d96:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002d9b:	c1 e3 08             	shl    ebx,0x8
c0002d9e:	09 c3                	or     ebx,eax
c0002da0:	89 d9                	mov    ecx,ebx
c0002da2:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002da8:	83 e6 01             	and    esi,0x1
c0002dab:	0f 84 2f 01 00 00    	je     c0002ee0 <get_fat+0x1ec>
c0002db1:	89 d9                	mov    ecx,ebx
c0002db3:	c1 e9 04             	shr    ecx,0x4
c0002db6:	e9 25 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dbb:	31 c9                	xor    ecx,ecx
c0002dbd:	c1 ea 08             	shr    edx,0x8
c0002dc0:	89 f8                	mov    eax,edi
c0002dc2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dc5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dc8:	e8 9f f3 ff ff       	call   c000216c <move_window>
c0002dcd:	85 c0                	test   eax,eax
c0002dcf:	75 8f                	jne    c0002d60 <get_fat+0x6c>
c0002dd1:	01 f6                	add    esi,esi
c0002dd3:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002dd9:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ddd:	e8 ac eb ff ff       	call   c000198e <ld_word>
c0002de2:	0f b7 c8             	movzx  ecx,ax
c0002de5:	e9 f6 00 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dea:	31 c9                	xor    ecx,ecx
c0002dec:	c1 ea 07             	shr    edx,0x7
c0002def:	89 f8                	mov    eax,edi
c0002df1:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002df4:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002df7:	e8 70 f3 ff ff       	call   c000216c <move_window>
c0002dfc:	85 c0                	test   eax,eax
c0002dfe:	0f 85 5c ff ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002e04:	c1 e6 02             	shl    esi,0x2
c0002e07:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e0d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e11:	e8 85 eb ff ff       	call   c000199b <ld_dword>
c0002e16:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e1b:	e9 b4 00 00 00       	jmp    c0002ed4 <get_fat+0x1e0>
c0002e20:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e23:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e26:	89 d1                	mov    ecx,edx
c0002e28:	09 c1                	or     ecx,eax
c0002e2a:	74 06                	je     c0002e32 <get_fat+0x13e>
c0002e2c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002e30:	75 0f                	jne    c0002e41 <get_fat+0x14d>
c0002e32:	b9 01 00 00 00       	mov    ecx,0x1
c0002e37:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002e3b:	0f 85 9f 00 00 00    	jne    c0002ee0 <get_fat+0x1ec>
c0002e41:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002e45:	89 f5                	mov    ebp,esi
c0002e47:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002e4c:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002e4f:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002e52:	80 f9 02             	cmp    cl,0x2
c0002e55:	75 35                	jne    c0002e8c <get_fat+0x198>
c0002e57:	83 c0 ff             	add    eax,0xffffffff
c0002e5a:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002e5f:	83 d2 ff             	adc    edx,0xffffffff
c0002e62:	31 db                	xor    ebx,ebx
c0002e64:	0f ac d0 09          	shrd   eax,edx,0x9
c0002e68:	53                   	push   ebx
c0002e69:	c1 ea 09             	shr    edx,0x9
c0002e6c:	51                   	push   ecx
c0002e6d:	52                   	push   edx
c0002e6e:	50                   	push   eax
c0002e6f:	e8 08 b5 01 00       	call   c001e37c <__udivdi3>
c0002e74:	83 c4 10             	add    esp,0x10
c0002e77:	b9 01 00 00 00       	mov    ecx,0x1
c0002e7c:	39 c5                	cmp    ebp,eax
c0002e7e:	77 60                	ja     c0002ee0 <get_fat+0x1ec>
c0002e80:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e85:	74 59                	je     c0002ee0 <get_fat+0x1ec>
c0002e87:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002e8a:	eb 54                	jmp    c0002ee0 <get_fat+0x1ec>
c0002e8c:	80 f9 03             	cmp    cl,0x3
c0002e8f:	75 05                	jne    c0002e96 <get_fat+0x1a2>
c0002e91:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002e94:	77 f1                	ja     c0002e87 <get_fat+0x193>
c0002e96:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e9b:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002e9f:	75 3f                	jne    c0002ee0 <get_fat+0x1ec>
c0002ea1:	31 c9                	xor    ecx,ecx
c0002ea3:	89 f2                	mov    edx,esi
c0002ea5:	89 f8                	mov    eax,edi
c0002ea7:	c1 ea 07             	shr    edx,0x7
c0002eaa:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ead:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb0:	e8 b7 f2 ff ff       	call   c000216c <move_window>
c0002eb5:	85 c0                	test   eax,eax
c0002eb7:	0f 85 a3 fe ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002ebd:	c1 e6 02             	shl    esi,0x2
c0002ec0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ec6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002eca:	e8 cc ea ff ff       	call   c000199b <ld_dword>
c0002ecf:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002ed4:	89 c1                	mov    ecx,eax
c0002ed6:	eb 08                	jmp    c0002ee0 <get_fat+0x1ec>
c0002ed8:	b9 01 00 00 00       	mov    ecx,0x1
c0002edd:	89 c8                	mov    eax,ecx
c0002edf:	c3                   	ret    
c0002ee0:	83 c4 1c             	add    esp,0x1c
c0002ee3:	89 c8                	mov    eax,ecx
c0002ee5:	5b                   	pop    ebx
c0002ee6:	5e                   	pop    esi
c0002ee7:	5f                   	pop    edi
c0002ee8:	5d                   	pop    ebp
c0002ee9:	c3                   	ret    

c0002eea <dir_sdi>:
c0002eea:	55                   	push   ebp
c0002eeb:	57                   	push   edi
c0002eec:	56                   	push   esi
c0002eed:	53                   	push   ebx
c0002eee:	89 c3                	mov    ebx,eax
c0002ef0:	83 ec 1c             	sub    esp,0x1c
c0002ef3:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ef5:	31 c0                	xor    eax,eax
c0002ef7:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002efa:	0f 94 c0             	sete   al
c0002efd:	48                   	dec    eax
c0002efe:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f03:	05 00 00 00 10       	add    eax,0x10000000
c0002f08:	39 d0                	cmp    eax,edx
c0002f0a:	77 0a                	ja     c0002f16 <dir_sdi+0x2c>
c0002f0c:	b8 02 00 00 00       	mov    eax,0x2
c0002f11:	e9 c4 00 00 00       	jmp    c0002fda <dir_sdi+0xf0>
c0002f16:	89 d6                	mov    esi,edx
c0002f18:	f6 c2 1f             	test   dl,0x1f
c0002f1b:	75 ef                	jne    c0002f0c <dir_sdi+0x22>
c0002f1d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f20:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f23:	85 c9                	test   ecx,ecx
c0002f25:	75 2d                	jne    c0002f54 <dir_sdi+0x6a>
c0002f27:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f2a:	77 1b                	ja     c0002f47 <dir_sdi+0x5d>
c0002f2c:	89 f2                	mov    edx,esi
c0002f2e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002f32:	c1 ea 05             	shr    edx,0x5
c0002f35:	39 c2                	cmp    edx,eax
c0002f37:	73 d3                	jae    c0002f0c <dir_sdi+0x22>
c0002f39:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f3c:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002f3f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f42:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f45:	eb 4b                	jmp    c0002f92 <dir_sdi+0xa8>
c0002f47:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f4a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f4e:	85 c0                	test   eax,eax
c0002f50:	74 da                	je     c0002f2c <dir_sdi+0x42>
c0002f52:	89 c1                	mov    ecx,eax
c0002f54:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002f58:	c1 e5 09             	shl    ebp,0x9
c0002f5b:	89 ca                	mov    edx,ecx
c0002f5d:	39 ee                	cmp    esi,ebp
c0002f5f:	72 1c                	jb     c0002f7d <dir_sdi+0x93>
c0002f61:	89 d8                	mov    eax,ebx
c0002f63:	e8 8c fd ff ff       	call   c0002cf4 <get_fat>
c0002f68:	89 c1                	mov    ecx,eax
c0002f6a:	83 f8 ff             	cmp    eax,0xffffffff
c0002f6d:	74 66                	je     c0002fd5 <dir_sdi+0xeb>
c0002f6f:	83 f8 01             	cmp    eax,0x1
c0002f72:	76 98                	jbe    c0002f0c <dir_sdi+0x22>
c0002f74:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002f77:	76 93                	jbe    c0002f0c <dir_sdi+0x22>
c0002f79:	29 ee                	sub    esi,ebp
c0002f7b:	eb de                	jmp    c0002f5b <dir_sdi+0x71>
c0002f7d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f81:	89 f8                	mov    eax,edi
c0002f83:	e8 9f ec ff ff       	call   c0001c27 <clst2sect>
c0002f88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f8c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f8f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f92:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002f95:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002f98:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002f9b:	89 d1                	mov    ecx,edx
c0002f9d:	09 c1                	or     ecx,eax
c0002f9f:	0f 84 67 ff ff ff    	je     c0002f0c <dir_sdi+0x22>
c0002fa5:	89 f1                	mov    ecx,esi
c0002fa7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002faf:	c1 e9 09             	shr    ecx,0x9
c0002fb2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002fb6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002fba:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002fbe:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002fc7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fca:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fce:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002fd1:	31 c0                	xor    eax,eax
c0002fd3:	eb 05                	jmp    c0002fda <dir_sdi+0xf0>
c0002fd5:	b8 01 00 00 00       	mov    eax,0x1
c0002fda:	83 c4 1c             	add    esp,0x1c
c0002fdd:	5b                   	pop    ebx
c0002fde:	5e                   	pop    esi
c0002fdf:	5f                   	pop    edi
c0002fe0:	5d                   	pop    ebp
c0002fe1:	c3                   	ret    

c0002fe2 <create_chain>:
c0002fe2:	55                   	push   ebp
c0002fe3:	89 c5                	mov    ebp,eax
c0002fe5:	57                   	push   edi
c0002fe6:	56                   	push   esi
c0002fe7:	53                   	push   ebx
c0002fe8:	83 ec 1c             	sub    esp,0x1c
c0002feb:	85 d2                	test   edx,edx
c0002fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002ff1:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ff3:	75 0e                	jne    c0003003 <create_chain+0x21>
c0002ff5:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0002ff8:	85 ff                	test   edi,edi
c0002ffa:	74 39                	je     c0003035 <create_chain+0x53>
c0002ffc:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0002fff:	77 39                	ja     c000303a <create_chain+0x58>
c0003001:	eb 32                	jmp    c0003035 <create_chain+0x53>
c0003003:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003007:	e8 e8 fc ff ff       	call   c0002cf4 <get_fat>
c000300c:	89 c3                	mov    ebx,eax
c000300e:	83 f8 01             	cmp    eax,0x1
c0003011:	77 0a                	ja     c000301d <create_chain+0x3b>
c0003013:	bb 01 00 00 00       	mov    ebx,0x1
c0003018:	e9 ba 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c000301d:	83 f8 ff             	cmp    eax,0xffffffff
c0003020:	0f 84 62 01 00 00    	je     c0003188 <create_chain+0x1a6>
c0003026:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003029:	0f 87 a8 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c000302f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003033:	eb 05                	jmp    c000303a <create_chain+0x58>
c0003035:	bf 01 00 00 00       	mov    edi,0x1
c000303a:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000303e:	75 07                	jne    c0003047 <create_chain+0x65>
c0003040:	31 db                	xor    ebx,ebx
c0003042:	e9 90 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c0003047:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000304a:	75 74                	jne    c00030c0 <create_chain+0xde>
c000304c:	b9 01 00 00 00       	mov    ecx,0x1
c0003051:	89 fa                	mov    edx,edi
c0003053:	89 f0                	mov    eax,esi
c0003055:	e8 2d f9 ff ff       	call   c0002987 <find_bitmap>
c000305a:	89 c3                	mov    ebx,eax
c000305c:	8d 40 ff             	lea    eax,[eax-0x1]
c000305f:	83 f8 fd             	cmp    eax,0xfffffffd
c0003062:	0f 87 6f 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c0003068:	83 ec 0c             	sub    esp,0xc
c000306b:	b9 01 00 00 00       	mov    ecx,0x1
c0003070:	6a 01                	push   0x1
c0003072:	89 da                	mov    edx,ebx
c0003074:	89 f0                	mov    eax,esi
c0003076:	e8 bf f9 ff ff       	call   c0002a3a <change_bitmap>
c000307b:	83 c4 10             	add    esp,0x10
c000307e:	83 f8 02             	cmp    eax,0x2
c0003081:	74 90                	je     c0003013 <create_chain+0x31>
c0003083:	83 f8 01             	cmp    eax,0x1
c0003086:	0f 84 fc 00 00 00    	je     c0003188 <create_chain+0x1a6>
c000308c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003091:	75 09                	jne    c000309c <create_chain+0xba>
c0003093:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003097:	e9 0c 01 00 00       	jmp    c00031a8 <create_chain+0x1c6>
c000309c:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c00030a0:	0f 85 e7 00 00 00    	jne    c000318d <create_chain+0x1ab>
c00030a6:	8d 57 01             	lea    edx,[edi+0x1]
c00030a9:	39 da                	cmp    edx,ebx
c00030ab:	0f 84 f7 00 00 00    	je     c00031a8 <create_chain+0x1c6>
c00030b1:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00030b4:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00030b8:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00030bb:	e9 cd 00 00 00       	jmp    c000318d <create_chain+0x1ab>
c00030c0:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00030c4:	75 41                	jne    c0003107 <create_chain+0x125>
c00030c6:	8d 5f 01             	lea    ebx,[edi+0x1]
c00030c9:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030cc:	77 05                	ja     c00030d3 <create_chain+0xf1>
c00030ce:	bb 02 00 00 00       	mov    ebx,0x2
c00030d3:	89 da                	mov    edx,ebx
c00030d5:	89 e8                	mov    eax,ebp
c00030d7:	e8 18 fc ff ff       	call   c0002cf4 <get_fat>
c00030dc:	83 f8 01             	cmp    eax,0x1
c00030df:	0f 84 2e ff ff ff    	je     c0003013 <create_chain+0x31>
c00030e5:	83 f8 ff             	cmp    eax,0xffffffff
c00030e8:	0f 84 9a 00 00 00    	je     c0003188 <create_chain+0x1a6>
c00030ee:	85 c0                	test   eax,eax
c00030f0:	74 11                	je     c0003103 <create_chain+0x121>
c00030f2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00030f5:	83 f8 01             	cmp    eax,0x1
c00030f8:	76 0d                	jbe    c0003107 <create_chain+0x125>
c00030fa:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030fd:	76 08                	jbe    c0003107 <create_chain+0x125>
c00030ff:	89 c7                	mov    edi,eax
c0003101:	eb 04                	jmp    c0003107 <create_chain+0x125>
c0003103:	85 db                	test   ebx,ebx
c0003105:	75 38                	jne    c000313f <create_chain+0x15d>
c0003107:	89 fb                	mov    ebx,edi
c0003109:	43                   	inc    ebx
c000310a:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000310d:	77 0e                	ja     c000311d <create_chain+0x13b>
c000310f:	83 ff 01             	cmp    edi,0x1
c0003112:	0f 86 28 ff ff ff    	jbe    c0003040 <create_chain+0x5e>
c0003118:	bb 02 00 00 00       	mov    ebx,0x2
c000311d:	89 da                	mov    edx,ebx
c000311f:	89 e8                	mov    eax,ebp
c0003121:	e8 ce fb ff ff       	call   c0002cf4 <get_fat>
c0003126:	85 c0                	test   eax,eax
c0003128:	74 15                	je     c000313f <create_chain+0x15d>
c000312a:	83 f8 01             	cmp    eax,0x1
c000312d:	0f 84 e0 fe ff ff    	je     c0003013 <create_chain+0x31>
c0003133:	40                   	inc    eax
c0003134:	74 52                	je     c0003188 <create_chain+0x1a6>
c0003136:	39 fb                	cmp    ebx,edi
c0003138:	75 cf                	jne    c0003109 <create_chain+0x127>
c000313a:	e9 01 ff ff ff       	jmp    c0003040 <create_chain+0x5e>
c000313f:	83 c9 ff             	or     ecx,0xffffffff
c0003142:	89 da                	mov    edx,ebx
c0003144:	89 f0                	mov    eax,esi
c0003146:	e8 a4 f9 ff ff       	call   c0002aef <put_fat>
c000314b:	85 c0                	test   eax,eax
c000314d:	75 32                	jne    c0003181 <create_chain+0x19f>
c000314f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003154:	74 11                	je     c0003167 <create_chain+0x185>
c0003156:	89 d9                	mov    ecx,ebx
c0003158:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000315c:	89 f0                	mov    eax,esi
c000315e:	e8 8c f9 ff ff       	call   c0002aef <put_fat>
c0003163:	85 c0                	test   eax,eax
c0003165:	75 1a                	jne    c0003181 <create_chain+0x19f>
c0003167:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000316a:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000316d:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003170:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003173:	39 d0                	cmp    eax,edx
c0003175:	77 04                	ja     c000317b <create_chain+0x199>
c0003177:	48                   	dec    eax
c0003178:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000317b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000317f:	eb 56                	jmp    c00031d7 <create_chain+0x1f5>
c0003181:	48                   	dec    eax
c0003182:	0f 85 8b fe ff ff    	jne    c0003013 <create_chain+0x31>
c0003188:	83 cb ff             	or     ebx,0xffffffff
c000318b:	eb 4a                	jmp    c00031d7 <create_chain+0x1f5>
c000318d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003191:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003194:	41                   	inc    ecx
c0003195:	39 d9                	cmp    ecx,ebx
c0003197:	75 19                	jne    c00031b2 <create_chain+0x1d0>
c0003199:	b9 02 00 00 00       	mov    ecx,0x2
c000319e:	85 d2                	test   edx,edx
c00031a0:	74 03                	je     c00031a5 <create_chain+0x1c3>
c00031a2:	8d 4a 01             	lea    ecx,[edx+0x1]
c00031a5:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00031a8:	85 c0                	test   eax,eax
c00031aa:	0f 85 63 fe ff ff    	jne    c0003013 <create_chain+0x31>
c00031b0:	eb b5                	jmp    c0003167 <create_chain+0x185>
c00031b2:	85 d2                	test   edx,edx
c00031b4:	75 07                	jne    c00031bd <create_chain+0x1db>
c00031b6:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031c3:	89 e8                	mov    eax,ebp
c00031c5:	e8 bb fa ff ff       	call   c0002c85 <fill_last_frag>
c00031ca:	85 c0                	test   eax,eax
c00031cc:	75 b3                	jne    c0003181 <create_chain+0x19f>
c00031ce:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031d5:	eb 90                	jmp    c0003167 <create_chain+0x185>
c00031d7:	83 c4 1c             	add    esp,0x1c
c00031da:	89 d8                	mov    eax,ebx
c00031dc:	5b                   	pop    ebx
c00031dd:	5e                   	pop    esi
c00031de:	5f                   	pop    edi
c00031df:	5d                   	pop    ebp
c00031e0:	c3                   	ret    

c00031e1 <remove_chain>:
c00031e1:	55                   	push   ebp
c00031e2:	57                   	push   edi
c00031e3:	56                   	push   esi
c00031e4:	53                   	push   ebx
c00031e5:	83 ec 1c             	sub    esp,0x1c
c00031e8:	83 fa 01             	cmp    edx,0x1
c00031eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031ef:	8b 18                	mov    ebx,DWORD PTR [eax]
c00031f1:	77 0a                	ja     c00031fd <remove_chain+0x1c>
c00031f3:	b8 02 00 00 00       	mov    eax,0x2
c00031f8:	e9 24 01 00 00       	jmp    c0003321 <remove_chain+0x140>
c00031fd:	89 d6                	mov    esi,edx
c00031ff:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003202:	76 ef                	jbe    c00031f3 <remove_chain+0x12>
c0003204:	89 c7                	mov    edi,eax
c0003206:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000320b:	75 06                	jne    c0003213 <remove_chain+0x32>
c000320d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003211:	eb 54                	jmp    c0003267 <remove_chain+0x86>
c0003213:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003216:	75 06                	jne    c000321e <remove_chain+0x3d>
c0003218:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000321c:	74 ef                	je     c000320d <remove_chain+0x2c>
c000321e:	83 c9 ff             	or     ecx,0xffffffff
c0003221:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003225:	89 d8                	mov    eax,ebx
c0003227:	e8 c3 f8 ff ff       	call   c0002aef <put_fat>
c000322c:	85 c0                	test   eax,eax
c000322e:	74 dd                	je     c000320d <remove_chain+0x2c>
c0003230:	e9 ec 00 00 00       	jmp    c0003321 <remove_chain+0x140>
c0003235:	83 f8 01             	cmp    eax,0x1
c0003238:	74 b9                	je     c00031f3 <remove_chain+0x12>
c000323a:	83 f8 ff             	cmp    eax,0xffffffff
c000323d:	74 6d                	je     c00032ac <remove_chain+0xcb>
c000323f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003242:	75 6f                	jne    c00032b3 <remove_chain+0xd2>
c0003244:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003247:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000324a:	8d 51 fe             	lea    edx,[ecx-0x2]
c000324d:	39 d0                	cmp    eax,edx
c000324f:	73 08                	jae    c0003259 <remove_chain+0x78>
c0003251:	40                   	inc    eax
c0003252:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003256:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003259:	8d 4e 01             	lea    ecx,[esi+0x1]
c000325c:	39 e9                	cmp    ecx,ebp
c000325e:	75 64                	jne    c00032c4 <remove_chain+0xe3>
c0003260:	89 ee                	mov    esi,ebp
c0003262:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003265:	76 0f                	jbe    c0003276 <remove_chain+0x95>
c0003267:	89 f2                	mov    edx,esi
c0003269:	89 f8                	mov    eax,edi
c000326b:	e8 84 fa ff ff       	call   c0002cf4 <get_fat>
c0003270:	89 c5                	mov    ebp,eax
c0003272:	85 c0                	test   eax,eax
c0003274:	75 bf                	jne    c0003235 <remove_chain+0x54>
c0003276:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003279:	0f 85 a0 00 00 00    	jne    c000331f <remove_chain+0x13e>
c000327f:	eb 6c                	jmp    c00032ed <remove_chain+0x10c>
c0003281:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003284:	84 c0                	test   al,al
c0003286:	75 7d                	jne    c0003305 <remove_chain+0x124>
c0003288:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000328b:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000328f:	0f 84 86 00 00 00    	je     c000331b <remove_chain+0x13a>
c0003295:	89 da                	mov    edx,ebx
c0003297:	89 f8                	mov    eax,edi
c0003299:	e8 56 fa ff ff       	call   c0002cf4 <get_fat>
c000329e:	83 f8 01             	cmp    eax,0x1
c00032a1:	0f 86 4c ff ff ff    	jbe    c00031f3 <remove_chain+0x12>
c00032a7:	83 f8 ff             	cmp    eax,0xffffffff
c00032aa:	75 4e                	jne    c00032fa <remove_chain+0x119>
c00032ac:	b8 01 00 00 00       	mov    eax,0x1
c00032b1:	eb 6e                	jmp    c0003321 <remove_chain+0x140>
c00032b3:	31 c9                	xor    ecx,ecx
c00032b5:	89 f2                	mov    edx,esi
c00032b7:	89 d8                	mov    eax,ebx
c00032b9:	e8 31 f8 ff ff       	call   c0002aef <put_fat>
c00032be:	85 c0                	test   eax,eax
c00032c0:	74 82                	je     c0003244 <remove_chain+0x63>
c00032c2:	eb 5d                	jmp    c0003321 <remove_chain+0x140>
c00032c4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c7:	75 1b                	jne    c00032e4 <remove_chain+0x103>
c00032c9:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	83 ec 0c             	sub    esp,0xc
c00032d2:	6a 00                	push   0x0
c00032d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00032d8:	e8 5d f7 ff ff       	call   c0002a3a <change_bitmap>
c00032dd:	83 c4 10             	add    esp,0x10
c00032e0:	85 c0                	test   eax,eax
c00032e2:	75 3d                	jne    c0003321 <remove_chain+0x140>
c00032e4:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00032e8:	e9 73 ff ff ff       	jmp    c0003260 <remove_chain+0x7f>
c00032ed:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032f2:	75 8d                	jne    c0003281 <remove_chain+0xa0>
c00032f4:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00032f8:	eb 25                	jmp    c000331f <remove_chain+0x13e>
c00032fa:	8d 53 01             	lea    edx,[ebx+0x1]
c00032fd:	89 c3                	mov    ebx,eax
c00032ff:	39 c2                	cmp    edx,eax
c0003301:	74 88                	je     c000328b <remove_chain+0xaa>
c0003303:	eb 1a                	jmp    c000331f <remove_chain+0x13e>
c0003305:	3c 03                	cmp    al,0x3
c0003307:	75 16                	jne    c000331f <remove_chain+0x13e>
c0003309:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000330c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003310:	77 0d                	ja     c000331f <remove_chain+0x13e>
c0003312:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003315:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003319:	72 04                	jb     c000331f <remove_chain+0x13e>
c000331b:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c000331f:	31 c0                	xor    eax,eax
c0003321:	83 c4 1c             	add    esp,0x1c
c0003324:	5b                   	pop    ebx
c0003325:	5e                   	pop    esi
c0003326:	5f                   	pop    edi
c0003327:	5d                   	pop    ebp
c0003328:	c3                   	ret    

c0003329 <dir_clear>:
c0003329:	55                   	push   ebp
c000332a:	57                   	push   edi
c000332b:	56                   	push   esi
c000332c:	89 c6                	mov    esi,eax
c000332e:	53                   	push   ebx
c000332f:	83 ec 1c             	sub    esp,0x1c
c0003332:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003336:	e8 9d ed ff ff       	call   c00020d8 <sync_window>
c000333b:	85 c0                	test   eax,eax
c000333d:	0f 85 de 00 00 00    	jne    c0003421 <dir_clear+0xf8>
c0003343:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003347:	89 f0                	mov    eax,esi
c0003349:	8d 6e 54             	lea    ebp,[esi+0x54]
c000334c:	e8 d6 e8 ff ff       	call   c0001c27 <clst2sect>
c0003351:	b9 00 02 00 00       	mov    ecx,0x200
c0003356:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000335a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000335e:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003361:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003364:	89 e8                	mov    eax,ebp
c0003366:	31 d2                	xor    edx,edx
c0003368:	e8 b5 e6 ff ff       	call   c0001a22 <mem_set>
c000336d:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003371:	c1 e3 09             	shl    ebx,0x9
c0003374:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000337a:	76 1f                	jbe    c000339b <dir_clear+0x72>
c000337c:	bb 00 80 00 00       	mov    ebx,0x8000
c0003381:	eb 18                	jmp    c000339b <dir_clear+0x72>
c0003383:	83 ec 0c             	sub    esp,0xc
c0003386:	53                   	push   ebx
c0003387:	e8 35 4e 00 00       	call   c00081c1 <ff_memalloc>
c000338c:	83 c4 10             	add    esp,0x10
c000338f:	89 c7                	mov    edi,eax
c0003391:	85 c0                	test   eax,eax
c0003393:	0f 85 8f 00 00 00    	jne    c0003428 <dir_clear+0xff>
c0003399:	d1 eb                	shr    ebx,1
c000339b:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00033a1:	77 e0                	ja     c0003383 <dir_clear+0x5a>
c00033a3:	31 db                	xor    ebx,ebx
c00033a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033a9:	39 d8                	cmp    eax,ebx
c00033ab:	76 66                	jbe    c0003413 <dir_clear+0xea>
c00033ad:	83 ec 0c             	sub    esp,0xc
c00033b0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033b4:	6a 01                	push   0x1
c00033b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033be:	55                   	push   ebp
c00033bf:	50                   	push   eax
c00033c0:	e8 94 e5 ff ff       	call   c0001959 <disk_write>
c00033c5:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00033ca:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00033cf:	83 c4 20             	add    esp,0x20
c00033d2:	85 c0                	test   eax,eax
c00033d4:	75 3d                	jne    c0003413 <dir_clear+0xea>
c00033d6:	43                   	inc    ebx
c00033d7:	eb cc                	jmp    c00033a5 <dir_clear+0x7c>
c00033d9:	83 ec 0c             	sub    esp,0xc
c00033dc:	31 d2                	xor    edx,edx
c00033de:	55                   	push   ebp
c00033df:	89 d8                	mov    eax,ebx
c00033e1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00033e5:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00033e9:	52                   	push   edx
c00033ea:	50                   	push   eax
c00033eb:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033ef:	57                   	push   edi
c00033f0:	50                   	push   eax
c00033f1:	e8 63 e5 ff ff       	call   c0001959 <disk_write>
c00033f6:	83 c4 20             	add    esp,0x20
c00033f9:	85 c0                	test   eax,eax
c00033fb:	75 0a                	jne    c0003407 <dir_clear+0xde>
c00033fd:	01 eb                	add    ebx,ebp
c00033ff:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003403:	39 d8                	cmp    eax,ebx
c0003405:	77 d2                	ja     c00033d9 <dir_clear+0xb0>
c0003407:	83 ec 0c             	sub    esp,0xc
c000340a:	57                   	push   edi
c000340b:	e8 c7 4d 00 00       	call   c00081d7 <ff_memfree>
c0003410:	83 c4 10             	add    esp,0x10
c0003413:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003417:	39 d8                	cmp    eax,ebx
c0003419:	0f 95 c0             	setne  al
c000341c:	0f b6 c0             	movzx  eax,al
c000341f:	eb 19                	jmp    c000343a <dir_clear+0x111>
c0003421:	b8 01 00 00 00       	mov    eax,0x1
c0003426:	eb 12                	jmp    c000343a <dir_clear+0x111>
c0003428:	89 d9                	mov    ecx,ebx
c000342a:	31 d2                	xor    edx,edx
c000342c:	c1 eb 09             	shr    ebx,0x9
c000342f:	e8 ee e5 ff ff       	call   c0001a22 <mem_set>
c0003434:	89 dd                	mov    ebp,ebx
c0003436:	31 db                	xor    ebx,ebx
c0003438:	eb c5                	jmp    c00033ff <dir_clear+0xd6>
c000343a:	83 c4 1c             	add    esp,0x1c
c000343d:	5b                   	pop    ebx
c000343e:	5e                   	pop    esi
c000343f:	5f                   	pop    edi
c0003440:	5d                   	pop    ebp
c0003441:	c3                   	ret    

c0003442 <dir_next>:
c0003442:	55                   	push   ebp
c0003443:	57                   	push   edi
c0003444:	56                   	push   esi
c0003445:	53                   	push   ebx
c0003446:	89 c3                	mov    ebx,eax
c0003448:	83 ec 1c             	sub    esp,0x1c
c000344b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000344d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003451:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003454:	8d 78 20             	lea    edi,[eax+0x20]
c0003457:	31 c0                	xor    eax,eax
c0003459:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000345d:	0f 94 c0             	sete   al
c0003460:	48                   	dec    eax
c0003461:	25 00 00 20 f0       	and    eax,0xf0200000
c0003466:	05 00 00 00 10       	add    eax,0x10000000
c000346b:	39 f8                	cmp    eax,edi
c000346d:	77 0e                	ja     c000347d <dir_next+0x3b>
c000346f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003476:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000347d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003480:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003483:	b8 04 00 00 00       	mov    eax,0x4
c0003488:	89 ce                	mov    esi,ecx
c000348a:	09 d6                	or     esi,edx
c000348c:	0f 84 da 00 00 00    	je     c000356c <dir_next+0x12a>
c0003492:	89 f8                	mov    eax,edi
c0003494:	25 ff 01 00 00       	and    eax,0x1ff
c0003499:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000349d:	0f 85 b9 00 00 00    	jne    c000355c <dir_next+0x11a>
c00034a3:	83 c2 01             	add    edx,0x1
c00034a6:	83 d1 00             	adc    ecx,0x0
c00034a9:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00034ac:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00034af:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00034b2:	85 d2                	test   edx,edx
c00034b4:	75 29                	jne    c00034df <dir_next+0x9d>
c00034b6:	89 fa                	mov    edx,edi
c00034b8:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034bc:	c1 ea 05             	shr    edx,0x5
c00034bf:	39 c2                	cmp    edx,eax
c00034c1:	0f 82 95 00 00 00    	jb     c000355c <dir_next+0x11a>
c00034c7:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034ce:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034d5:	b8 04 00 00 00       	mov    eax,0x4
c00034da:	e9 8d 00 00 00       	jmp    c000356c <dir_next+0x12a>
c00034df:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00034e3:	89 f9                	mov    ecx,edi
c00034e5:	48                   	dec    eax
c00034e6:	c1 e9 09             	shr    ecx,0x9
c00034e9:	85 c8                	test   eax,ecx
c00034eb:	75 6f                	jne    c000355c <dir_next+0x11a>
c00034ed:	89 d8                	mov    eax,ebx
c00034ef:	e8 00 f8 ff ff       	call   c0002cf4 <get_fat>
c00034f4:	89 c6                	mov    esi,eax
c00034f6:	83 f8 01             	cmp    eax,0x1
c00034f9:	77 07                	ja     c0003502 <dir_next+0xc0>
c00034fb:	b8 02 00 00 00       	mov    eax,0x2
c0003500:	eb 6a                	jmp    c000356c <dir_next+0x12a>
c0003502:	83 f8 ff             	cmp    eax,0xffffffff
c0003505:	75 07                	jne    c000350e <dir_next+0xcc>
c0003507:	b8 01 00 00 00       	mov    eax,0x1
c000350c:	eb 5e                	jmp    c000356c <dir_next+0x12a>
c000350e:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003511:	77 37                	ja     c000354a <dir_next+0x108>
c0003513:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003518:	74 ad                	je     c00034c7 <dir_next+0x85>
c000351a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000351d:	89 d8                	mov    eax,ebx
c000351f:	e8 be fa ff ff       	call   c0002fe2 <create_chain>
c0003524:	89 c6                	mov    esi,eax
c0003526:	b8 07 00 00 00       	mov    eax,0x7
c000352b:	85 f6                	test   esi,esi
c000352d:	74 3d                	je     c000356c <dir_next+0x12a>
c000352f:	83 fe 01             	cmp    esi,0x1
c0003532:	74 c7                	je     c00034fb <dir_next+0xb9>
c0003534:	83 fe ff             	cmp    esi,0xffffffff
c0003537:	74 ce                	je     c0003507 <dir_next+0xc5>
c0003539:	89 f2                	mov    edx,esi
c000353b:	89 e8                	mov    eax,ebp
c000353d:	e8 e7 fd ff ff       	call   c0003329 <dir_clear>
c0003542:	85 c0                	test   eax,eax
c0003544:	75 c1                	jne    c0003507 <dir_next+0xc5>
c0003546:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000354a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000354d:	89 f2                	mov    edx,esi
c000354f:	89 e8                	mov    eax,ebp
c0003551:	e8 d1 e6 ff ff       	call   c0001c27 <clst2sect>
c0003556:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003559:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000355c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003560:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003563:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003567:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000356a:	31 c0                	xor    eax,eax
c000356c:	83 c4 1c             	add    esp,0x1c
c000356f:	5b                   	pop    ebx
c0003570:	5e                   	pop    esi
c0003571:	5f                   	pop    edi
c0003572:	5d                   	pop    ebp
c0003573:	c3                   	ret    

c0003574 <load_xdir>:
c0003574:	55                   	push   ebp
c0003575:	57                   	push   edi
c0003576:	56                   	push   esi
c0003577:	89 c6                	mov    esi,eax
c0003579:	53                   	push   ebx
c000357a:	83 ec 1c             	sub    esp,0x1c
c000357d:	8b 00                	mov    eax,DWORD PTR [eax]
c000357f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003582:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003585:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003588:	e8 df eb ff ff       	call   c000216c <move_window>
c000358d:	89 c3                	mov    ebx,eax
c000358f:	85 c0                	test   eax,eax
c0003591:	0f 85 0c 01 00 00    	jne    c00036a3 <load_xdir+0x12f>
c0003597:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000359a:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000359d:	0f 85 fb 00 00 00    	jne    c000369e <load_xdir+0x12a>
c00035a3:	89 f8                	mov    eax,edi
c00035a5:	b9 20 00 00 00       	mov    ecx,0x20
c00035aa:	e8 5e e4 ff ff       	call   c0001a0d <mem_cpy>
c00035af:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00035b3:	40                   	inc    eax
c00035b4:	c1 e0 05             	shl    eax,0x5
c00035b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035bb:	83 e8 60             	sub    eax,0x60
c00035be:	3d 00 02 00 00       	cmp    eax,0x200
c00035c3:	0f 87 d5 00 00 00    	ja     c000369e <load_xdir+0x12a>
c00035c9:	31 d2                	xor    edx,edx
c00035cb:	89 f0                	mov    eax,esi
c00035cd:	e8 70 fe ff ff       	call   c0003442 <dir_next>
c00035d2:	89 c3                	mov    ebx,eax
c00035d4:	83 f8 04             	cmp    eax,0x4
c00035d7:	0f 84 c1 00 00 00    	je     c000369e <load_xdir+0x12a>
c00035dd:	85 c0                	test   eax,eax
c00035df:	0f 85 be 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035e5:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035e8:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00035ed:	e8 7a eb ff ff       	call   c000216c <move_window>
c00035f2:	89 c3                	mov    ebx,eax
c00035f4:	85 c0                	test   eax,eax
c00035f6:	0f 85 a7 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035fc:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00035ff:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003602:	0f 85 96 00 00 00    	jne    c000369e <load_xdir+0x12a>
c0003608:	8d 47 20             	lea    eax,[edi+0x20]
c000360b:	b9 20 00 00 00       	mov    ecx,0x20
c0003610:	e8 f8 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003615:	31 d2                	xor    edx,edx
c0003617:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000361b:	b9 0f 00 00 00       	mov    ecx,0xf
c0003620:	83 c0 2c             	add    eax,0x2c
c0003623:	f7 f1                	div    ecx
c0003625:	c1 e0 05             	shl    eax,0x5
c0003628:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000362c:	77 70                	ja     c000369e <load_xdir+0x12a>
c000362e:	bd 40 00 00 00       	mov    ebp,0x40
c0003633:	31 d2                	xor    edx,edx
c0003635:	89 f0                	mov    eax,esi
c0003637:	e8 06 fe ff ff       	call   c0003442 <dir_next>
c000363c:	89 c3                	mov    ebx,eax
c000363e:	83 f8 04             	cmp    eax,0x4
c0003641:	74 5b                	je     c000369e <load_xdir+0x12a>
c0003643:	85 c0                	test   eax,eax
c0003645:	75 5c                	jne    c00036a3 <load_xdir+0x12f>
c0003647:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000364a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000364d:	8b 06                	mov    eax,DWORD PTR [esi]
c000364f:	e8 18 eb ff ff       	call   c000216c <move_window>
c0003654:	89 c3                	mov    ebx,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	75 49                	jne    c00036a3 <load_xdir+0x12f>
c000365a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000365d:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003660:	75 3c                	jne    c000369e <load_xdir+0x12a>
c0003662:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003668:	77 0d                	ja     c0003677 <load_xdir+0x103>
c000366a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000366d:	b9 20 00 00 00       	mov    ecx,0x20
c0003672:	e8 96 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003677:	83 c5 20             	add    ebp,0x20
c000367a:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000367e:	77 b3                	ja     c0003633 <load_xdir+0xbf>
c0003680:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003686:	77 1b                	ja     c00036a3 <load_xdir+0x12f>
c0003688:	89 f8                	mov    eax,edi
c000368a:	e8 cd e7 ff ff       	call   c0001e5c <xdir_sum>
c000368f:	89 c1                	mov    ecx,eax
c0003691:	8d 47 02             	lea    eax,[edi+0x2]
c0003694:	e8 f5 e2 ff ff       	call   c000198e <ld_word>
c0003699:	66 39 c1             	cmp    cx,ax
c000369c:	74 05                	je     c00036a3 <load_xdir+0x12f>
c000369e:	bb 02 00 00 00       	mov    ebx,0x2
c00036a3:	83 c4 1c             	add    esp,0x1c
c00036a6:	89 d8                	mov    eax,ebx
c00036a8:	5b                   	pop    ebx
c00036a9:	5e                   	pop    esi
c00036aa:	5f                   	pop    edi
c00036ab:	5d                   	pop    ebp
c00036ac:	c3                   	ret    

c00036ad <load_obj_xdir>:
c00036ad:	53                   	push   ebx
c00036ae:	89 c3                	mov    ebx,eax
c00036b0:	83 ec 08             	sub    esp,0x8
c00036b3:	8b 02                	mov    eax,DWORD PTR [edx]
c00036b5:	89 03                	mov    DWORD PTR [ebx],eax
c00036b7:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00036ba:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00036bd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c0:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00036c3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00036cd:	30 c0                	xor    al,al
c00036cf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036d6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00036d9:	89 d8                	mov    eax,ebx
c00036db:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00036de:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00036e1:	e8 04 f8 ff ff       	call   c0002eea <dir_sdi>
c00036e6:	85 c0                	test   eax,eax
c00036e8:	75 0b                	jne    c00036f5 <load_obj_xdir+0x48>
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	83 c4 08             	add    esp,0x8
c00036ef:	5b                   	pop    ebx
c00036f0:	e9 7f fe ff ff       	jmp    c0003574 <load_xdir>
c00036f5:	83 c4 08             	add    esp,0x8
c00036f8:	5b                   	pop    ebx
c00036f9:	c3                   	ret    

c00036fa <dir_read>:
c00036fa:	55                   	push   ebp
c00036fb:	bd 04 00 00 00       	mov    ebp,0x4
c0003700:	57                   	push   edi
c0003701:	56                   	push   esi
c0003702:	be ff ff ff ff       	mov    esi,0xffffffff
c0003707:	53                   	push   ebx
c0003708:	89 c3                	mov    ebx,eax
c000370a:	83 ec 1c             	sub    esp,0x1c
c000370d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003711:	8b 38                	mov    edi,DWORD PTR [eax]
c0003713:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003718:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000371b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371e:	89 c8                	mov    eax,ecx
c0003720:	09 d0                	or     eax,edx
c0003722:	0f 84 25 01 00 00    	je     c000384d <dir_read+0x153>
c0003728:	89 f8                	mov    eax,edi
c000372a:	e8 3d ea ff ff       	call   c000216c <move_window>
c000372f:	89 c5                	mov    ebp,eax
c0003731:	85 c0                	test   eax,eax
c0003733:	0f 85 23 01 00 00    	jne    c000385c <dir_read+0x162>
c0003739:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000373c:	8a 0a                	mov    cl,BYTE PTR [edx]
c000373e:	84 c9                	test   cl,cl
c0003740:	0f 84 11 01 00 00    	je     c0003857 <dir_read+0x15d>
c0003746:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003749:	75 48                	jne    c0003793 <dir_read+0x99>
c000374b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003750:	74 10                	je     c0003762 <dir_read+0x68>
c0003752:	80 f9 83             	cmp    cl,0x83
c0003755:	0f 85 dd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000375b:	31 ed                	xor    ebp,ebp
c000375d:	e9 08 01 00 00       	jmp    c000386a <dir_read+0x170>
c0003762:	80 f9 85             	cmp    cl,0x85
c0003765:	0f 85 cd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000376b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000376e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003771:	89 d8                	mov    eax,ebx
c0003773:	e8 fc fd ff ff       	call   c0003574 <load_xdir>
c0003778:	89 c5                	mov    ebp,eax
c000377a:	85 c0                	test   eax,eax
c000377c:	0f 85 da 00 00 00    	jne    c000385c <dir_read+0x162>
c0003782:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003785:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003788:	83 e0 3f             	and    eax,0x3f
c000378b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000378e:	e9 d7 00 00 00       	jmp    c000386a <dir_read+0x170>
c0003793:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003796:	83 e0 3f             	and    eax,0x3f
c0003799:	80 f9 2e             	cmp    cl,0x2e
c000379c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00037a0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037a3:	0f 84 8a 00 00 00    	je     c0003833 <dir_read+0x139>
c00037a9:	80 f9 e5             	cmp    cl,0xe5
c00037ac:	0f 84 81 00 00 00    	je     c0003833 <dir_read+0x139>
c00037b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037b6:	83 e0 1f             	and    eax,0x1f
c00037b9:	83 f8 08             	cmp    eax,0x8
c00037bc:	0f 94 c0             	sete   al
c00037bf:	0f b6 c0             	movzx  eax,al
c00037c2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037c6:	75 6b                	jne    c0003833 <dir_read+0x139>
c00037c8:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00037cd:	75 44                	jne    c0003813 <dir_read+0x119>
c00037cf:	f6 c1 40             	test   cl,0x40
c00037d2:	74 12                	je     c00037e6 <dir_read+0xec>
c00037d4:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037d7:	83 e1 bf             	and    ecx,0xffffffbf
c00037da:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037de:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037e1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037e4:	eb 06                	jmp    c00037ec <dir_read+0xf2>
c00037e6:	89 f0                	mov    eax,esi
c00037e8:	38 c8                	cmp    al,cl
c00037ea:	75 47                	jne    c0003833 <dir_read+0x139>
c00037ec:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037f0:	be ff ff ff ff       	mov    esi,0xffffffff
c00037f5:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00037f8:	75 3e                	jne    c0003838 <dir_read+0x13e>
c00037fa:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00037fe:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003801:	e8 8a e4 ff ff       	call   c0001c90 <pick_lfn>
c0003806:	85 c0                	test   eax,eax
c0003808:	74 2e                	je     c0003838 <dir_read+0x13e>
c000380a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000380e:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003811:	eb 25                	jmp    c0003838 <dir_read+0x13e>
c0003813:	89 f0                	mov    eax,esi
c0003815:	84 c0                	test   al,al
c0003817:	75 11                	jne    c000382a <dir_read+0x130>
c0003819:	89 d0                	mov    eax,edx
c000381b:	e8 2a e6 ff ff       	call   c0001e4a <sum_sfn>
c0003820:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003824:	0f 84 31 ff ff ff    	je     c000375b <dir_read+0x61>
c000382a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003831:	eb 37                	jmp    c000386a <dir_read+0x170>
c0003833:	be ff ff ff ff       	mov    esi,0xffffffff
c0003838:	31 d2                	xor    edx,edx
c000383a:	89 d8                	mov    eax,ebx
c000383c:	e8 01 fc ff ff       	call   c0003442 <dir_next>
c0003841:	89 c5                	mov    ebp,eax
c0003843:	85 c0                	test   eax,eax
c0003845:	0f 84 cd fe ff ff    	je     c0003718 <dir_read+0x1e>
c000384b:	eb 0f                	jmp    c000385c <dir_read+0x162>
c000384d:	85 ed                	test   ebp,ebp
c000384f:	0f 84 06 ff ff ff    	je     c000375b <dir_read+0x61>
c0003855:	eb 05                	jmp    c000385c <dir_read+0x162>
c0003857:	bd 04 00 00 00       	mov    ebp,0x4
c000385c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003863:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000386a:	83 c4 1c             	add    esp,0x1c
c000386d:	89 e8                	mov    eax,ebp
c000386f:	5b                   	pop    ebx
c0003870:	5e                   	pop    esi
c0003871:	5f                   	pop    edi
c0003872:	5d                   	pop    ebp
c0003873:	c3                   	ret    

c0003874 <dir_alloc>:
c0003874:	55                   	push   ebp
c0003875:	89 d5                	mov    ebp,edx
c0003877:	57                   	push   edi
c0003878:	31 d2                	xor    edx,edx
c000387a:	56                   	push   esi
c000387b:	53                   	push   ebx
c000387c:	89 c3                	mov    ebx,eax
c000387e:	83 ec 0c             	sub    esp,0xc
c0003881:	8b 38                	mov    edi,DWORD PTR [eax]
c0003883:	e8 62 f6 ff ff       	call   c0002eea <dir_sdi>
c0003888:	85 c0                	test   eax,eax
c000388a:	75 4e                	jne    c00038da <dir_alloc+0x66>
c000388c:	31 f6                	xor    esi,esi
c000388e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003891:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003894:	89 f8                	mov    eax,edi
c0003896:	e8 d1 e8 ff ff       	call   c000216c <move_window>
c000389b:	85 c0                	test   eax,eax
c000389d:	75 3b                	jne    c00038da <dir_alloc+0x66>
c000389f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00038a2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00038a5:	8a 12                	mov    dl,BYTE PTR [edx]
c00038a7:	75 07                	jne    c00038b0 <dir_alloc+0x3c>
c00038a9:	f7 d2                	not    edx
c00038ab:	c0 ea 07             	shr    dl,0x7
c00038ae:	eb 0d                	jmp    c00038bd <dir_alloc+0x49>
c00038b0:	84 d2                	test   dl,dl
c00038b2:	0f 94 c1             	sete   cl
c00038b5:	80 fa e5             	cmp    dl,0xe5
c00038b8:	0f 94 c2             	sete   dl
c00038bb:	09 ca                	or     edx,ecx
c00038bd:	84 d2                	test   dl,dl
c00038bf:	74 07                	je     c00038c8 <dir_alloc+0x54>
c00038c1:	46                   	inc    esi
c00038c2:	39 ee                	cmp    esi,ebp
c00038c4:	75 04                	jne    c00038ca <dir_alloc+0x56>
c00038c6:	eb 1c                	jmp    c00038e4 <dir_alloc+0x70>
c00038c8:	31 f6                	xor    esi,esi
c00038ca:	ba 01 00 00 00       	mov    edx,0x1
c00038cf:	89 d8                	mov    eax,ebx
c00038d1:	e8 6c fb ff ff       	call   c0003442 <dir_next>
c00038d6:	85 c0                	test   eax,eax
c00038d8:	74 b4                	je     c000388e <dir_alloc+0x1a>
c00038da:	83 f8 04             	cmp    eax,0x4
c00038dd:	75 05                	jne    c00038e4 <dir_alloc+0x70>
c00038df:	b8 07 00 00 00       	mov    eax,0x7
c00038e4:	83 c4 0c             	add    esp,0xc
c00038e7:	5b                   	pop    ebx
c00038e8:	5e                   	pop    esi
c00038e9:	5f                   	pop    edi
c00038ea:	5d                   	pop    ebp
c00038eb:	c3                   	ret    

c00038ec <store_xdir>:
c00038ec:	55                   	push   ebp
c00038ed:	57                   	push   edi
c00038ee:	89 c7                	mov    edi,eax
c00038f0:	56                   	push   esi
c00038f1:	53                   	push   ebx
c00038f2:	83 ec 0c             	sub    esp,0xc
c00038f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00038f7:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00038fa:	89 e8                	mov    eax,ebp
c00038fc:	e8 5b e5 ff ff       	call   c0001e5c <xdir_sum>
c0003901:	0f b7 d0             	movzx  edx,ax
c0003904:	8d 45 02             	lea    eax,[ebp+0x2]
c0003907:	e8 f4 e0 ff ff       	call   c0001a00 <st_word>
c000390c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003910:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003913:	89 f8                	mov    eax,edi
c0003915:	e8 d0 f5 ff ff       	call   c0002eea <dir_sdi>
c000391a:	89 c6                	mov    esi,eax
c000391c:	85 f6                	test   esi,esi
c000391e:	75 3d                	jne    c000395d <store_xdir+0x71>
c0003920:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003923:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003926:	8b 07                	mov    eax,DWORD PTR [edi]
c0003928:	e8 3f e8 ff ff       	call   c000216c <move_window>
c000392d:	89 c6                	mov    esi,eax
c000392f:	85 c0                	test   eax,eax
c0003931:	75 2a                	jne    c000395d <store_xdir+0x71>
c0003933:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003936:	b9 20 00 00 00       	mov    ecx,0x20
c000393b:	89 ea                	mov    edx,ebp
c000393d:	e8 cb e0 ff ff       	call   c0001a0d <mem_cpy>
c0003942:	8b 07                	mov    eax,DWORD PTR [edi]
c0003944:	85 db                	test   ebx,ebx
c0003946:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000394a:	74 11                	je     c000395d <store_xdir+0x71>
c000394c:	31 d2                	xor    edx,edx
c000394e:	89 f8                	mov    eax,edi
c0003950:	83 c5 20             	add    ebp,0x20
c0003953:	e8 ea fa ff ff       	call   c0003442 <dir_next>
c0003958:	4b                   	dec    ebx
c0003959:	89 c6                	mov    esi,eax
c000395b:	eb bf                	jmp    c000391c <store_xdir+0x30>
c000395d:	89 f0                	mov    eax,esi
c000395f:	83 fe 02             	cmp    esi,0x2
c0003962:	76 05                	jbe    c0003969 <store_xdir+0x7d>
c0003964:	b8 02 00 00 00       	mov    eax,0x2
c0003969:	83 c4 0c             	add    esp,0xc
c000396c:	5b                   	pop    ebx
c000396d:	5e                   	pop    esi
c000396e:	5f                   	pop    edi
c000396f:	5d                   	pop    ebp
c0003970:	c3                   	ret    

c0003971 <dir_remove>:
c0003971:	57                   	push   edi
c0003972:	56                   	push   esi
c0003973:	53                   	push   ebx
c0003974:	89 c3                	mov    ebx,eax
c0003976:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003979:	8b 30                	mov    esi,DWORD PTR [eax]
c000397b:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c000397e:	83 fa ff             	cmp    edx,0xffffffff
c0003981:	74 09                	je     c000398c <dir_remove+0x1b>
c0003983:	e8 62 f5 ff ff       	call   c0002eea <dir_sdi>
c0003988:	85 c0                	test   eax,eax
c000398a:	75 41                	jne    c00039cd <dir_remove+0x5c>
c000398c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000398f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003992:	89 f0                	mov    eax,esi
c0003994:	e8 d3 e7 ff ff       	call   c000216c <move_window>
c0003999:	85 c0                	test   eax,eax
c000399b:	75 26                	jne    c00039c3 <dir_remove+0x52>
c000399d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039a0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00039a3:	75 05                	jne    c00039aa <dir_remove+0x39>
c00039a5:	80 22 7f             	and    BYTE PTR [edx],0x7f
c00039a8:	eb 03                	jmp    c00039ad <dir_remove+0x3c>
c00039aa:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00039ad:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039b1:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c00039b4:	73 17                	jae    c00039cd <dir_remove+0x5c>
c00039b6:	31 d2                	xor    edx,edx
c00039b8:	89 d8                	mov    eax,ebx
c00039ba:	e8 83 fa ff ff       	call   c0003442 <dir_next>
c00039bf:	85 c0                	test   eax,eax
c00039c1:	74 c9                	je     c000398c <dir_remove+0x1b>
c00039c3:	83 f8 04             	cmp    eax,0x4
c00039c6:	75 05                	jne    c00039cd <dir_remove+0x5c>
c00039c8:	b8 02 00 00 00       	mov    eax,0x2
c00039cd:	5b                   	pop    ebx
c00039ce:	5e                   	pop    esi
c00039cf:	5f                   	pop    edi
c00039d0:	c3                   	ret    

c00039d1 <create_name>:
c00039d1:	55                   	push   ebp
c00039d2:	89 d5                	mov    ebp,edx
c00039d4:	57                   	push   edi
c00039d5:	89 c7                	mov    edi,eax
c00039d7:	56                   	push   esi
c00039d8:	31 f6                	xor    esi,esi
c00039da:	53                   	push   ebx
c00039db:	83 ec 3c             	sub    esp,0x3c
c00039de:	8b 02                	mov    eax,DWORD PTR [edx]
c00039e0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00039e4:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00039ed:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00039f1:	e8 72 e0 ff ff       	call   c0001a68 <tchar2uni>
c00039f6:	89 c3                	mov    ebx,eax
c00039f8:	83 f8 ff             	cmp    eax,0xffffffff
c00039fb:	75 0a                	jne    c0003a07 <create_name+0x36>
c00039fd:	b8 06 00 00 00       	mov    eax,0x6
c0003a02:	e9 9e 02 00 00       	jmp    c0003ca5 <create_name+0x2d4>
c0003a07:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a0c:	76 0c                	jbe    c0003a1a <create_name+0x49>
c0003a0e:	c1 e8 10             	shr    eax,0x10
c0003a11:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a15:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a19:	46                   	inc    esi
c0003a1a:	66 83 fb 1f          	cmp    bx,0x1f
c0003a1e:	76 4f                	jbe    c0003a6f <create_name+0x9e>
c0003a20:	66 83 fb 5c          	cmp    bx,0x5c
c0003a24:	74 35                	je     c0003a5b <create_name+0x8a>
c0003a26:	66 83 fb 2f          	cmp    bx,0x2f
c0003a2a:	74 2f                	je     c0003a5b <create_name+0x8a>
c0003a2c:	66 83 fb 7f          	cmp    bx,0x7f
c0003a30:	77 11                	ja     c0003a43 <create_name+0x72>
c0003a32:	0f b7 d3             	movzx  edx,bx
c0003a35:	b8 d2 f3 01 c0       	mov    eax,0xc001f3d2
c0003a3a:	e8 11 e0 ff ff       	call   c0001a50 <chk_chr>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 ba                	jne    c00039fd <create_name+0x2c>
c0003a43:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003a49:	77 b2                	ja     c00039fd <create_name+0x2c>
c0003a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a4f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003a53:	46                   	inc    esi
c0003a54:	eb 97                	jmp    c00039ed <create_name+0x1c>
c0003a56:	40                   	inc    eax
c0003a57:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a5f:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a61:	80 fa 2f             	cmp    dl,0x2f
c0003a64:	74 f0                	je     c0003a56 <create_name+0x85>
c0003a66:	80 fa 5c             	cmp    dl,0x5c
c0003a69:	74 eb                	je     c0003a56 <create_name+0x85>
c0003a6b:	31 db                	xor    ebx,ebx
c0003a6d:	eb 02                	jmp    c0003a71 <create_name+0xa0>
c0003a6f:	b3 04                	mov    bl,0x4
c0003a71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a75:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003a78:	85 f6                	test   esi,esi
c0003a7a:	74 18                	je     c0003a94 <create_name+0xc3>
c0003a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a80:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003a85:	66 83 f8 20          	cmp    ax,0x20
c0003a89:	74 06                	je     c0003a91 <create_name+0xc0>
c0003a8b:	66 83 f8 2e          	cmp    ax,0x2e
c0003a8f:	75 03                	jne    c0003a94 <create_name+0xc3>
c0003a91:	4e                   	dec    esi
c0003a92:	eb e4                	jmp    c0003a78 <create_name+0xa7>
c0003a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a98:	31 ed                	xor    ebp,ebp
c0003a9a:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003aa0:	85 f6                	test   esi,esi
c0003aa2:	0f 84 55 ff ff ff    	je     c00039fd <create_name+0x2c>
c0003aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003aac:	8d 55 01             	lea    edx,[ebp+0x1]
c0003aaf:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003ab3:	66 83 f8 20          	cmp    ax,0x20
c0003ab7:	75 04                	jne    c0003abd <create_name+0xec>
c0003ab9:	89 d5                	mov    ebp,edx
c0003abb:	eb eb                	jmp    c0003aa8 <create_name+0xd7>
c0003abd:	85 ed                	test   ebp,ebp
c0003abf:	75 06                	jne    c0003ac7 <create_name+0xf6>
c0003ac1:	66 83 f8 2e          	cmp    ax,0x2e
c0003ac5:	75 08                	jne    c0003acf <create_name+0xfe>
c0003ac7:	83 cb 03             	or     ebx,0x3
c0003aca:	eb 03                	jmp    c0003acf <create_name+0xfe>
c0003acc:	4e                   	dec    esi
c0003acd:	74 0c                	je     c0003adb <create_name+0x10a>
c0003acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad3:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ad9:	75 f1                	jne    c0003acc <create_name+0xfb>
c0003adb:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ae0:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ae3:	ba 20 00 00 00       	mov    edx,0x20
c0003ae8:	e8 35 df ff ff       	call   c0001a22 <mem_set>
c0003aed:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003af5:	31 c9                	xor    ecx,ecx
c0003af7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003afc:	8d 45 01             	lea    eax,[ebp+0x1]
c0003aff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b07:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b0b:	66 85 ed             	test   bp,bp
c0003b0e:	0f 84 30 01 00 00    	je     c0003c44 <create_name+0x273>
c0003b14:	66 83 fd 20          	cmp    bp,0x20
c0003b18:	74 10                	je     c0003b2a <create_name+0x159>
c0003b1a:	66 83 fd 2e          	cmp    bp,0x2e
c0003b1e:	75 13                	jne    c0003b33 <create_name+0x162>
c0003b20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b24:	0f 84 6b 01 00 00    	je     c0003c95 <create_name+0x2c4>
c0003b2a:	83 cb 03             	or     ebx,0x3
c0003b2d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003b31:	eb c9                	jmp    c0003afc <create_name+0x12b>
c0003b33:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003b37:	73 0b                	jae    c0003b44 <create_name+0x173>
c0003b39:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b3d:	75 47                	jne    c0003b86 <create_name+0x1b5>
c0003b3f:	e9 51 01 00 00       	jmp    c0003c95 <create_name+0x2c4>
c0003b44:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003b49:	75 10                	jne    c0003b5b <create_name+0x18a>
c0003b4b:	83 cb 03             	or     ebx,0x3
c0003b4e:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b56:	e9 e9 00 00 00       	jmp    c0003c44 <create_name+0x273>
c0003b5b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b5f:	74 0d                	je     c0003b6e <create_name+0x19d>
c0003b61:	83 cb 03             	or     ebx,0x3
c0003b64:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b68:	0f 87 d6 00 00 00    	ja     c0003c44 <create_name+0x273>
c0003b6e:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003b73:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003b77:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b7f:	b9 08 00 00 00       	mov    ecx,0x8
c0003b84:	eb a7                	jmp    c0003b2d <create_name+0x15c>
c0003b86:	66 83 fd 7f          	cmp    bp,0x7f
c0003b8a:	76 68                	jbe    c0003bf4 <create_name+0x223>
c0003b8c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003b90:	88 da                	mov    dl,bl
c0003b92:	83 ca 02             	or     edx,0x2
c0003b95:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003b99:	50                   	push   eax
c0003b9a:	50                   	push   eax
c0003b9b:	68 b5 01 00 00       	push   0x1b5
c0003ba0:	55                   	push   ebp
c0003ba1:	e8 48 46 00 00       	call   c00081ee <ff_uni2oem>
c0003ba6:	83 c4 10             	add    esp,0x10
c0003ba9:	89 c5                	mov    ebp,eax
c0003bab:	a8 80                	test   al,0x80
c0003bad:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003bb1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003bb5:	74 0c                	je     c0003bc3 <create_name+0x1f2>
c0003bb7:	83 e5 7f             	and    ebp,0x7f
c0003bba:	0f b6 ad 20 f3 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe0ce0]
c0003bc1:	eb 2a                	jmp    c0003bed <create_name+0x21c>
c0003bc3:	66 3d ff 00          	cmp    ax,0xff
c0003bc7:	76 24                	jbe    c0003bed <create_name+0x21c>
c0003bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bcd:	48                   	dec    eax
c0003bce:	39 c8                	cmp    eax,ecx
c0003bd0:	77 0c                	ja     c0003bde <create_name+0x20d>
c0003bd2:	83 cb 03             	or     ebx,0x3
c0003bd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003bd9:	e9 4f ff ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003bde:	89 e8                	mov    eax,ebp
c0003be0:	88 d3                	mov    bl,dl
c0003be2:	66 c1 e8 08          	shr    ax,0x8
c0003be6:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003bea:	41                   	inc    ecx
c0003beb:	eb 4b                	jmp    c0003c38 <create_name+0x267>
c0003bed:	88 d3                	mov    bl,dl
c0003bef:	66 85 ed             	test   bp,bp
c0003bf2:	74 19                	je     c0003c0d <create_name+0x23c>
c0003bf4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003bf8:	0f b7 d5             	movzx  edx,bp
c0003bfb:	b8 db f3 01 c0       	mov    eax,0xc001f3db
c0003c00:	e8 4b de ff ff       	call   c0001a50 <chk_chr>
c0003c05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c09:	85 c0                	test   eax,eax
c0003c0b:	74 0a                	je     c0003c17 <create_name+0x246>
c0003c0d:	83 cb 03             	or     ebx,0x3
c0003c10:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c15:	eb 21                	jmp    c0003c38 <create_name+0x267>
c0003c17:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c1a:	66 83 f8 19          	cmp    ax,0x19
c0003c1e:	77 07                	ja     c0003c27 <create_name+0x256>
c0003c20:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c25:	eb 11                	jmp    c0003c38 <create_name+0x267>
c0003c27:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c2a:	66 83 f8 19          	cmp    ax,0x19
c0003c2e:	77 08                	ja     c0003c38 <create_name+0x267>
c0003c30:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003c35:	83 ed 20             	sub    ebp,0x20
c0003c38:	89 e8                	mov    eax,ebp
c0003c3a:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c3e:	41                   	inc    ecx
c0003c3f:	e9 e9 fe ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003c44:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003c48:	75 04                	jne    c0003c4e <create_name+0x27d>
c0003c4a:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003c4e:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003c53:	75 05                	jne    c0003c5a <create_name+0x289>
c0003c55:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c5a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c5e:	83 e0 0c             	and    eax,0xc
c0003c61:	3c 0c                	cmp    al,0xc
c0003c63:	74 0b                	je     c0003c70 <create_name+0x29f>
c0003c65:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c69:	83 e0 03             	and    eax,0x3
c0003c6c:	3c 03                	cmp    al,0x3
c0003c6e:	75 05                	jne    c0003c75 <create_name+0x2a4>
c0003c70:	83 cb 02             	or     ebx,0x2
c0003c73:	eb 19                	jmp    c0003c8e <create_name+0x2bd>
c0003c75:	f6 c3 02             	test   bl,0x2
c0003c78:	75 14                	jne    c0003c8e <create_name+0x2bd>
c0003c7a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003c7f:	74 03                	je     c0003c84 <create_name+0x2b3>
c0003c81:	83 cb 10             	or     ebx,0x10
c0003c84:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003c89:	74 03                	je     c0003c8e <create_name+0x2bd>
c0003c8b:	83 cb 08             	or     ebx,0x8
c0003c8e:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003c91:	31 c0                	xor    eax,eax
c0003c93:	eb 10                	jmp    c0003ca5 <create_name+0x2d4>
c0003c95:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c9a:	0f 85 ce fe ff ff    	jne    c0003b6e <create_name+0x19d>
c0003ca0:	e9 a6 fe ff ff       	jmp    c0003b4b <create_name+0x17a>
c0003ca5:	83 c4 3c             	add    esp,0x3c
c0003ca8:	5b                   	pop    ebx
c0003ca9:	5e                   	pop    esi
c0003caa:	5f                   	pop    edi
c0003cab:	5d                   	pop    ebp
c0003cac:	c3                   	ret    

c0003cad <xname_sum>:
c0003cad:	56                   	push   esi
c0003cae:	53                   	push   ebx
c0003caf:	89 c6                	mov    esi,eax
c0003cb1:	51                   	push   ecx
c0003cb2:	31 db                	xor    ebx,ebx
c0003cb4:	83 c6 02             	add    esi,0x2
c0003cb7:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003cbb:	66 85 c0             	test   ax,ax
c0003cbe:	74 1f                	je     c0003cdf <xname_sum+0x32>
c0003cc0:	83 ec 0c             	sub    esp,0xc
c0003cc3:	66 d1 cb             	ror    bx,1
c0003cc6:	50                   	push   eax
c0003cc7:	e8 1e 46 00 00       	call   c00082ea <ff_wtoupper>
c0003ccc:	83 c4 10             	add    esp,0x10
c0003ccf:	0f b6 d0             	movzx  edx,al
c0003cd2:	66 c1 e8 08          	shr    ax,0x8
c0003cd6:	01 d3                	add    ebx,edx
c0003cd8:	66 d1 cb             	ror    bx,1
c0003cdb:	01 c3                	add    ebx,eax
c0003cdd:	eb d5                	jmp    c0003cb4 <xname_sum+0x7>
c0003cdf:	89 d8                	mov    eax,ebx
c0003ce1:	5a                   	pop    edx
c0003ce2:	5b                   	pop    ebx
c0003ce3:	5e                   	pop    esi
c0003ce4:	c3                   	ret    

c0003ce5 <create_xdir>:
c0003ce5:	55                   	push   ebp
c0003ce6:	b9 40 00 00 00       	mov    ecx,0x40
c0003ceb:	57                   	push   edi
c0003cec:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf1:	56                   	push   esi
c0003cf2:	31 ff                	xor    edi,edi
c0003cf4:	53                   	push   ebx
c0003cf5:	be 40 00 00 00       	mov    esi,0x40
c0003cfa:	89 c3                	mov    ebx,eax
c0003cfc:	83 ec 1c             	sub    esp,0x1c
c0003cff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d03:	31 d2                	xor    edx,edx
c0003d05:	e8 18 dd ff ff       	call   c0001a22 <mem_set>
c0003d0a:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d0d:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d11:	31 c9                	xor    ecx,ecx
c0003d13:	8d 46 01             	lea    eax,[esi+0x1]
c0003d16:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d1a:	83 c6 02             	add    esi,0x2
c0003d1d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d21:	66 85 ed             	test   bp,bp
c0003d24:	74 12                	je     c0003d38 <create_xdir+0x53>
c0003d26:	0f b6 c1             	movzx  eax,cl
c0003d29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d2d:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003d31:	66 83 fd 01          	cmp    bp,0x1
c0003d35:	80 d9 ff             	sbb    cl,0xff
c0003d38:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003d3b:	0f b7 d5             	movzx  edx,bp
c0003d3e:	83 c6 02             	add    esi,0x2
c0003d41:	e8 ba dc ff ff       	call   c0001a00 <st_word>
c0003d46:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003d4c:	75 d3                	jne    c0003d21 <create_xdir+0x3c>
c0003d4e:	8d 47 01             	lea    eax,[edi+0x1]
c0003d51:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d55:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003d59:	0f b6 c1             	movzx  eax,cl
c0003d5c:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003d61:	74 07                	je     c0003d6a <create_xdir+0x85>
c0003d63:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003d68:	eb a9                	jmp    c0003d13 <create_xdir+0x2e>
c0003d6a:	8d 47 02             	lea    eax,[edi+0x2]
c0003d6d:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003d70:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003d73:	89 d0                	mov    eax,edx
c0003d75:	e8 33 ff ff ff       	call   c0003cad <xname_sum>
c0003d7a:	83 c4 1c             	add    esp,0x1c
c0003d7d:	0f b7 d0             	movzx  edx,ax
c0003d80:	8d 43 24             	lea    eax,[ebx+0x24]
c0003d83:	5b                   	pop    ebx
c0003d84:	5e                   	pop    esi
c0003d85:	5f                   	pop    edi
c0003d86:	5d                   	pop    ebp
c0003d87:	e9 74 dc ff ff       	jmp    c0001a00 <st_word>

c0003d8c <cmp_lfn>:
c0003d8c:	55                   	push   ebp
c0003d8d:	57                   	push   edi
c0003d8e:	89 d7                	mov    edi,edx
c0003d90:	56                   	push   esi
c0003d91:	53                   	push   ebx
c0003d92:	83 ec 1c             	sub    esp,0x1c
c0003d95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003d99:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003d9c:	e8 ed db ff ff       	call   c000198e <ld_word>
c0003da1:	66 85 c0             	test   ax,ax
c0003da4:	74 07                	je     c0003dad <cmp_lfn+0x21>
c0003da6:	31 c0                	xor    eax,eax
c0003da8:	e9 9a 00 00 00       	jmp    c0003e47 <cmp_lfn+0xbb>
c0003dad:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003daf:	bd 01 00 00 00       	mov    ebp,0x1
c0003db4:	83 e3 3f             	and    ebx,0x3f
c0003db7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003dbf:	4b                   	dec    ebx
c0003dc0:	6b db 0d             	imul   ebx,ebx,0xd
c0003dc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003dc7:	0f b6 80 a0 f3 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0c60]
c0003dce:	01 f8                	add    eax,edi
c0003dd0:	e8 b9 db ff ff       	call   c000198e <ld_word>
c0003dd5:	66 85 ed             	test   bp,bp
c0003dd8:	89 c6                	mov    esi,eax
c0003dda:	74 3c                	je     c0003e18 <cmp_lfn+0x8c>
c0003ddc:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003de2:	77 c2                	ja     c0003da6 <cmp_lfn+0x1a>
c0003de4:	83 ec 0c             	sub    esp,0xc
c0003de7:	0f b7 c0             	movzx  eax,ax
c0003dea:	50                   	push   eax
c0003deb:	e8 fa 44 00 00       	call   c00082ea <ff_wtoupper>
c0003df0:	89 c5                	mov    ebp,eax
c0003df2:	8d 43 01             	lea    eax,[ebx+0x1]
c0003df5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003df9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003dfd:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e01:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e04:	e8 e1 44 00 00       	call   c00082ea <ff_wtoupper>
c0003e09:	83 c4 10             	add    esp,0x10
c0003e0c:	39 c5                	cmp    ebp,eax
c0003e0e:	75 96                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e10:	89 f5                	mov    ebp,esi
c0003e12:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e16:	eb 04                	jmp    c0003e1c <cmp_lfn+0x90>
c0003e18:	66 46                	inc    si
c0003e1a:	75 8a                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e1c:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e20:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e25:	75 9c                	jne    c0003dc3 <cmp_lfn+0x37>
c0003e27:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e2a:	74 16                	je     c0003e42 <cmp_lfn+0xb6>
c0003e2c:	66 85 ed             	test   bp,bp
c0003e2f:	74 11                	je     c0003e42 <cmp_lfn+0xb6>
c0003e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e35:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003e3a:	0f 94 c0             	sete   al
c0003e3d:	0f b6 c0             	movzx  eax,al
c0003e40:	eb 05                	jmp    c0003e47 <cmp_lfn+0xbb>
c0003e42:	b8 01 00 00 00       	mov    eax,0x1
c0003e47:	83 c4 1c             	add    esp,0x1c
c0003e4a:	5b                   	pop    ebx
c0003e4b:	5e                   	pop    esi
c0003e4c:	5f                   	pop    edi
c0003e4d:	5d                   	pop    ebp
c0003e4e:	c3                   	ret    

c0003e4f <dir_find>:
c0003e4f:	55                   	push   ebp
c0003e50:	31 d2                	xor    edx,edx
c0003e52:	57                   	push   edi
c0003e53:	56                   	push   esi
c0003e54:	53                   	push   ebx
c0003e55:	89 c3                	mov    ebx,eax
c0003e57:	83 ec 1c             	sub    esp,0x1c
c0003e5a:	8b 30                	mov    esi,DWORD PTR [eax]
c0003e5c:	e8 89 f0 ff ff       	call   c0002eea <dir_sdi>
c0003e61:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e64:	85 c0                	test   eax,eax
c0003e66:	0f 85 9e 01 00 00    	jne    c000400a <dir_find+0x1bb>
c0003e6c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003e6f:	0f 85 8d 00 00 00    	jne    c0003f02 <dir_find+0xb3>
c0003e75:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003e78:	e8 30 fe ff ff       	call   c0003cad <xname_sum>
c0003e7d:	89 c7                	mov    edi,eax
c0003e7f:	31 d2                	xor    edx,edx
c0003e81:	89 d8                	mov    eax,ebx
c0003e83:	e8 72 f8 ff ff       	call   c00036fa <dir_read>
c0003e88:	85 c0                	test   eax,eax
c0003e8a:	0f 85 5e 01 00 00    	jne    c0003fee <dir_find+0x19f>
c0003e90:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003e93:	8d 41 24             	lea    eax,[ecx+0x24]
c0003e96:	e8 f3 da ff ff       	call   c000198e <ld_word>
c0003e9b:	66 39 f8             	cmp    ax,di
c0003e9e:	75 df                	jne    c0003e7f <dir_find+0x30>
c0003ea0:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003ea3:	31 ed                	xor    ebp,ebp
c0003ea5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003ea9:	ba 40 00 00 00       	mov    edx,0x40
c0003eae:	89 e9                	mov    ecx,ebp
c0003eb0:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003eb4:	0f 84 42 01 00 00    	je     c0003ffc <dir_find+0x1ad>
c0003eba:	f6 c2 1f             	test   dl,0x1f
c0003ebd:	75 03                	jne    c0003ec2 <dir_find+0x73>
c0003ebf:	83 c2 02             	add    edx,0x2
c0003ec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003ec6:	89 d0                	mov    eax,edx
c0003ec8:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003ecb:	e8 be da ff ff       	call   c000198e <ld_word>
c0003ed0:	83 ec 0c             	sub    esp,0xc
c0003ed3:	0f b7 c0             	movzx  eax,ax
c0003ed6:	50                   	push   eax
c0003ed7:	e8 0e 44 00 00       	call   c00082ea <ff_wtoupper>
c0003edc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ee0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ee3:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003ee7:	89 04 24             	mov    DWORD PTR [esp],eax
c0003eea:	e8 fb 43 00 00       	call   c00082ea <ff_wtoupper>
c0003eef:	83 c4 10             	add    esp,0x10
c0003ef2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003ef6:	75 87                	jne    c0003e7f <dir_find+0x30>
c0003ef8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003efc:	45                   	inc    ebp
c0003efd:	83 c2 02             	add    edx,0x2
c0003f00:	eb ac                	jmp    c0003eae <dir_find+0x5f>
c0003f02:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f09:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f0e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f13:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f16:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f19:	89 f0                	mov    eax,esi
c0003f1b:	e8 4c e2 ff ff       	call   c000216c <move_window>
c0003f20:	85 c0                	test   eax,eax
c0003f22:	0f 85 c6 00 00 00    	jne    c0003fee <dir_find+0x19f>
c0003f28:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f2b:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003f2e:	84 c9                	test   cl,cl
c0003f30:	0f 84 bd 00 00 00    	je     c0003ff3 <dir_find+0x1a4>
c0003f36:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003f39:	88 d0                	mov    al,dl
c0003f3b:	83 e0 3f             	and    eax,0x3f
c0003f3e:	80 f9 e5             	cmp    cl,0xe5
c0003f41:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003f44:	0f 84 87 00 00 00    	je     c0003fd1 <dir_find+0x182>
c0003f4a:	80 e2 08             	and    dl,0x8
c0003f4d:	74 06                	je     c0003f55 <dir_find+0x106>
c0003f4f:	3c 0f                	cmp    al,0xf
c0003f51:	75 7e                	jne    c0003fd1 <dir_find+0x182>
c0003f53:	eb 04                	jmp    c0003f59 <dir_find+0x10a>
c0003f55:	3c 0f                	cmp    al,0xf
c0003f57:	75 4c                	jne    c0003fa5 <dir_find+0x156>
c0003f59:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003f5d:	75 7e                	jne    c0003fdd <dir_find+0x18e>
c0003f5f:	f6 c1 40             	test   cl,0x40
c0003f62:	74 12                	je     c0003f76 <dir_find+0x127>
c0003f64:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003f67:	83 e1 bf             	and    ecx,0xffffffbf
c0003f6a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003f6e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003f71:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003f74:	eb 06                	jmp    c0003f7c <dir_find+0x12d>
c0003f76:	89 f8                	mov    eax,edi
c0003f78:	38 c8                	cmp    al,cl
c0003f7a:	75 5c                	jne    c0003fd8 <dir_find+0x189>
c0003f7c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003f80:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f85:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003f88:	75 53                	jne    c0003fdd <dir_find+0x18e>
c0003f8a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0003f8e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f91:	89 ea                	mov    edx,ebp
c0003f93:	e8 f4 fd ff ff       	call   c0003d8c <cmp_lfn>
c0003f98:	85 c0                	test   eax,eax
c0003f9a:	74 41                	je     c0003fdd <dir_find+0x18e>
c0003f9c:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0003fa0:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003fa3:	eb 38                	jmp    c0003fdd <dir_find+0x18e>
c0003fa5:	89 f8                	mov    eax,edi
c0003fa7:	84 c0                	test   al,al
c0003fa9:	75 0d                	jne    c0003fb8 <dir_find+0x169>
c0003fab:	89 e8                	mov    eax,ebp
c0003fad:	e8 98 de ff ff       	call   c0001e4a <sum_sfn>
c0003fb2:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0003fb6:	74 52                	je     c000400a <dir_find+0x1bb>
c0003fb8:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003fbc:	75 13                	jne    c0003fd1 <dir_find+0x182>
c0003fbe:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0003fc1:	b9 0b 00 00 00       	mov    ecx,0xb
c0003fc6:	89 e8                	mov    eax,ebp
c0003fc8:	e8 60 da ff ff       	call   c0001a2d <mem_cmp>
c0003fcd:	85 c0                	test   eax,eax
c0003fcf:	74 39                	je     c000400a <dir_find+0x1bb>
c0003fd1:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fd8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fdd:	31 d2                	xor    edx,edx
c0003fdf:	89 d8                	mov    eax,ebx
c0003fe1:	e8 5c f4 ff ff       	call   c0003442 <dir_next>
c0003fe6:	85 c0                	test   eax,eax
c0003fe8:	0f 84 25 ff ff ff    	je     c0003f13 <dir_find+0xc4>
c0003fee:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ff1:	eb 17                	jmp    c000400a <dir_find+0x1bb>
c0003ff3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0003ffa:	eb 0e                	jmp    c000400a <dir_find+0x1bb>
c0003ffc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fff:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004004:	0f 85 75 fe ff ff    	jne    c0003e7f <dir_find+0x30>
c000400a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000400d:	83 c4 1c             	add    esp,0x1c
c0004010:	5b                   	pop    ebx
c0004011:	5e                   	pop    esi
c0004012:	5f                   	pop    edi
c0004013:	5d                   	pop    ebp
c0004014:	c3                   	ret    

c0004015 <dir_register>:
c0004015:	55                   	push   ebp
c0004016:	57                   	push   edi
c0004017:	56                   	push   esi
c0004018:	be 06 00 00 00       	mov    esi,0x6
c000401d:	53                   	push   ebx
c000401e:	83 ec 6c             	sub    esp,0x6c
c0004021:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004025:	0f 85 62 02 00 00    	jne    c000428d <dir_register+0x278>
c000402b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000402d:	31 ff                	xor    edi,edi
c000402f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004032:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004037:	74 03                	je     c000403c <dir_register+0x27>
c0004039:	47                   	inc    edi
c000403a:	eb f6                	jmp    c0004032 <dir_register+0x1d>
c000403c:	89 c3                	mov    ebx,eax
c000403e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004042:	0f 85 e1 00 00 00    	jne    c0004129 <dir_register+0x114>
c0004048:	83 c7 0e             	add    edi,0xe
c000404b:	b9 0f 00 00 00       	mov    ecx,0xf
c0004050:	89 f8                	mov    eax,edi
c0004052:	31 d2                	xor    edx,edx
c0004054:	f7 f1                	div    ecx
c0004056:	8d 50 02             	lea    edx,[eax+0x2]
c0004059:	89 c7                	mov    edi,eax
c000405b:	89 d8                	mov    eax,ebx
c000405d:	e8 12 f8 ff ff       	call   c0003874 <dir_alloc>
c0004062:	89 c6                	mov    esi,eax
c0004064:	85 c0                	test   eax,eax
c0004066:	0f 85 21 02 00 00    	jne    c000428d <dir_register+0x278>
c000406c:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004072:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004075:	c1 e7 05             	shl    edi,0x5
c0004078:	29 f8                	sub    eax,edi
c000407a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000407d:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004080:	a8 04                	test   al,0x4
c0004082:	0f 84 91 00 00 00    	je     c0004119 <dir_register+0x104>
c0004088:	83 e0 fb             	and    eax,0xfffffffb
c000408b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000408e:	89 d8                	mov    eax,ebx
c0004090:	e8 25 ec ff ff       	call   c0002cba <fill_first_frag>
c0004095:	85 c0                	test   eax,eax
c0004097:	0f 85 ee 01 00 00    	jne    c000428b <dir_register+0x276>
c000409d:	83 c9 ff             	or     ecx,0xffffffff
c00040a0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00040a3:	89 d8                	mov    eax,ebx
c00040a5:	e8 db eb ff ff       	call   c0002c85 <fill_last_frag>
c00040aa:	85 c0                	test   eax,eax
c00040ac:	0f 85 d9 01 00 00    	jne    c000428b <dir_register+0x276>
c00040b2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00040b6:	74 61                	je     c0004119 <dir_register+0x104>
c00040b8:	89 da                	mov    edx,ebx
c00040ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040be:	e8 ea f5 ff ff       	call   c00036ad <load_obj_xdir>
c00040c3:	85 c0                	test   eax,eax
c00040c5:	0f 85 c0 01 00 00    	jne    c000428b <dir_register+0x276>
c00040cb:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00040cf:	31 c9                	xor    ecx,ecx
c00040d1:	c1 e2 09             	shl    edx,0x9
c00040d4:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00040d7:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00040da:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00040dd:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00040e0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040e3:	83 c0 38             	add    eax,0x38
c00040e6:	e8 1c d9 ff ff       	call   c0001a07 <st_qword>
c00040eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040ee:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040f1:	83 c0 28             	add    eax,0x28
c00040f4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00040f7:	e8 0b d9 ff ff       	call   c0001a07 <st_qword>
c00040fc:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040ff:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004102:	83 c8 01             	or     eax,0x1
c0004105:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c0004108:	8d 44 24 14          	lea    eax,[esp+0x14]
c000410c:	e8 db f7 ff ff       	call   c00038ec <store_xdir>
c0004111:	85 c0                	test   eax,eax
c0004113:	0f 85 72 01 00 00    	jne    c000428b <dir_register+0x276>
c0004119:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000411c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000411f:	e8 c1 fb ff ff       	call   c0003ce5 <create_xdir>
c0004124:	e9 64 01 00 00       	jmp    c000428d <dir_register+0x278>
c0004129:	8d 40 3c             	lea    eax,[eax+0x3c]
c000412c:	b9 0c 00 00 00       	mov    ecx,0xc
c0004131:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004135:	89 c2                	mov    edx,eax
c0004137:	8d 44 24 14          	lea    eax,[esp+0x14]
c000413b:	e8 cd d8 ff ff       	call   c0001a0d <mem_cpy>
c0004140:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004145:	74 58                	je     c000419f <dir_register+0x18a>
c0004147:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000414b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004153:	83 ec 0c             	sub    esp,0xc
c0004156:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004159:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000415d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004161:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004165:	e8 24 dc ff ff       	call   c0001d8e <gen_numname>
c000416a:	89 d8                	mov    eax,ebx
c000416c:	e8 de fc ff ff       	call   c0003e4f <dir_find>
c0004171:	83 c4 10             	add    esp,0x10
c0004174:	89 c6                	mov    esi,eax
c0004176:	85 c0                	test   eax,eax
c0004178:	75 15                	jne    c000418f <dir_register+0x17a>
c000417a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000417e:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004183:	75 ce                	jne    c0004153 <dir_register+0x13e>
c0004185:	be 07 00 00 00       	mov    esi,0x7
c000418a:	e9 fe 00 00 00       	jmp    c000428d <dir_register+0x278>
c000418f:	83 f8 04             	cmp    eax,0x4
c0004192:	0f 85 f5 00 00 00    	jne    c000428d <dir_register+0x278>
c0004198:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000419c:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000419f:	b9 01 00 00 00       	mov    ecx,0x1
c00041a4:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00041a9:	74 0f                	je     c00041ba <dir_register+0x1a5>
c00041ab:	b9 0d 00 00 00       	mov    ecx,0xd
c00041b0:	8d 47 0c             	lea    eax,[edi+0xc]
c00041b3:	31 d2                	xor    edx,edx
c00041b5:	f7 f1                	div    ecx
c00041b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00041ba:	89 ca                	mov    edx,ecx
c00041bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041c0:	89 d8                	mov    eax,ebx
c00041c2:	e8 ad f6 ff ff       	call   c0003874 <dir_alloc>
c00041c7:	89 c6                	mov    esi,eax
c00041c9:	85 c0                	test   eax,eax
c00041cb:	0f 85 bc 00 00 00    	jne    c000428d <dir_register+0x278>
c00041d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041d5:	49                   	dec    ecx
c00041d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041da:	74 6a                	je     c0004246 <dir_register+0x231>
c00041dc:	89 c8                	mov    eax,ecx
c00041de:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00041e1:	c1 e0 05             	shl    eax,0x5
c00041e4:	29 c2                	sub    edx,eax
c00041e6:	89 d8                	mov    eax,ebx
c00041e8:	e8 fd ec ff ff       	call   c0002eea <dir_sdi>
c00041ed:	89 c6                	mov    esi,eax
c00041ef:	85 c0                	test   eax,eax
c00041f1:	0f 85 96 00 00 00    	jne    c000428d <dir_register+0x278>
c00041f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00041fb:	e8 4a dc ff ff       	call   c0001e4a <sum_sfn>
c0004200:	0f b6 f8             	movzx  edi,al
c0004203:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004206:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004209:	89 e8                	mov    eax,ebp
c000420b:	e8 5c df ff ff       	call   c000216c <move_window>
c0004210:	89 c6                	mov    esi,eax
c0004212:	85 c0                	test   eax,eax
c0004214:	75 77                	jne    c000428d <dir_register+0x278>
c0004216:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000421b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000421e:	83 ec 0c             	sub    esp,0xc
c0004221:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004224:	57                   	push   edi
c0004225:	e8 e0 da ff ff       	call   c0001d0a <put_lfn>
c000422a:	31 d2                	xor    edx,edx
c000422c:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004230:	89 d8                	mov    eax,ebx
c0004232:	e8 0b f2 ff ff       	call   c0003442 <dir_next>
c0004237:	83 c4 10             	add    esp,0x10
c000423a:	89 c6                	mov    esi,eax
c000423c:	85 c0                	test   eax,eax
c000423e:	75 4d                	jne    c000428d <dir_register+0x278>
c0004240:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004244:	75 bd                	jne    c0004203 <dir_register+0x1ee>
c0004246:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004249:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000424c:	89 e8                	mov    eax,ebp
c000424e:	e8 19 df ff ff       	call   c000216c <move_window>
c0004253:	89 c6                	mov    esi,eax
c0004255:	85 c0                	test   eax,eax
c0004257:	75 34                	jne    c000428d <dir_register+0x278>
c0004259:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000425c:	b9 20 00 00 00       	mov    ecx,0x20
c0004261:	31 d2                	xor    edx,edx
c0004263:	e8 ba d7 ff ff       	call   c0001a22 <mem_set>
c0004268:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000426b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000426f:	b9 0b 00 00 00       	mov    ecx,0xb
c0004274:	e8 94 d7 ff ff       	call   c0001a0d <mem_cpy>
c0004279:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000427c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000427f:	83 e0 18             	and    eax,0x18
c0004282:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004285:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004289:	eb 02                	jmp    c000428d <dir_register+0x278>
c000428b:	89 c6                	mov    esi,eax
c000428d:	83 c4 6c             	add    esp,0x6c
c0004290:	89 f0                	mov    eax,esi
c0004292:	5b                   	pop    ebx
c0004293:	5e                   	pop    esi
c0004294:	5f                   	pop    edi
c0004295:	5d                   	pop    ebp
c0004296:	c3                   	ret    

c0004297 <sync_fs>:
c0004297:	56                   	push   esi
c0004298:	53                   	push   ebx
c0004299:	53                   	push   ebx
c000429a:	89 c3                	mov    ebx,eax
c000429c:	e8 37 de ff ff       	call   c00020d8 <sync_window>
c00042a1:	85 c0                	test   eax,eax
c00042a3:	0f 85 b1 00 00 00    	jne    c000435a <sync_fs+0xc3>
c00042a9:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00042ac:	0f 85 8e 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042b2:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00042b6:	0f 85 84 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042bc:	b9 00 02 00 00       	mov    ecx,0x200
c00042c1:	8d 73 54             	lea    esi,[ebx+0x54]
c00042c4:	31 d2                	xor    edx,edx
c00042c6:	89 f0                	mov    eax,esi
c00042c8:	e8 55 d7 ff ff       	call   c0001a22 <mem_set>
c00042cd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00042d3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00042d8:	e8 23 d7 ff ff       	call   c0001a00 <st_word>
c00042dd:	ba 52 52 61 41       	mov    edx,0x41615252
c00042e2:	89 f0                	mov    eax,esi
c00042e4:	e8 1b d7 ff ff       	call   c0001a04 <st_dword>
c00042e9:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00042ef:	ba 72 72 41 61       	mov    edx,0x61417272
c00042f4:	e8 0b d7 ff ff       	call   c0001a04 <st_dword>
c00042f9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042fc:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004302:	e8 fd d6 ff ff       	call   c0001a04 <st_dword>
c0004307:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000430a:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004310:	e8 ef d6 ff ff       	call   c0001a04 <st_dword>
c0004315:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004318:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000431b:	83 c0 01             	add    eax,0x1
c000431e:	83 d2 00             	adc    edx,0x0
c0004321:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004324:	83 ec 0c             	sub    esp,0xc
c0004327:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000432a:	6a 01                	push   0x1
c000432c:	52                   	push   edx
c000432d:	50                   	push   eax
c000432e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004332:	56                   	push   esi
c0004333:	50                   	push   eax
c0004334:	e8 20 d6 ff ff       	call   c0001959 <disk_write>
c0004339:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000433d:	83 c4 20             	add    esp,0x20
c0004340:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004344:	51                   	push   ecx
c0004345:	6a 00                	push   0x0
c0004347:	6a 00                	push   0x0
c0004349:	50                   	push   eax
c000434a:	e8 20 d6 ff ff       	call   c000196f <disk_ioctl>
c000434f:	83 c4 10             	add    esp,0x10
c0004352:	85 c0                	test   eax,eax
c0004354:	0f 95 c0             	setne  al
c0004357:	0f b6 c0             	movzx  eax,al
c000435a:	5a                   	pop    edx
c000435b:	5b                   	pop    ebx
c000435c:	5e                   	pop    esi
c000435d:	c3                   	ret    

c000435e <create_partition>:
c000435e:	55                   	push   ebp
c000435f:	0f b6 c0             	movzx  eax,al
c0004362:	57                   	push   edi
c0004363:	56                   	push   esi
c0004364:	53                   	push   ebx
c0004365:	83 ec 60             	sub    esp,0x60
c0004368:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000436c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004370:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004374:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004378:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000437c:	50                   	push   eax
c000437d:	6a 01                	push   0x1
c000437f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004383:	e8 e7 d5 ff ff       	call   c000196f <disk_ioctl>
c0004388:	83 c4 10             	add    esp,0x10
c000438b:	85 c0                	test   eax,eax
c000438d:	74 0a                	je     c0004399 <create_partition+0x3b>
c000438f:	b8 01 00 00 00       	mov    eax,0x1
c0004394:	e9 67 05 00 00       	jmp    c0004900 <create_partition+0x5a2>
c0004399:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000439d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00043a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00043a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00043a9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00043ae:	0f 86 ed 03 00 00    	jbe    c00047a1 <create_partition+0x443>
c00043b4:	83 c0 df             	add    eax,0xffffffdf
c00043b7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00043bf:	83 d2 ff             	adc    edx,0xffffffff
c00043c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00043ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043d2:	83 c0 bd             	add    eax,0xffffffbd
c00043d5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00043dc:	83 d2 ff             	adc    edx,0xffffffff
c00043df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00043e3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00043e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00043ef:	be 22 00 00 00       	mov    esi,0x22
c00043f4:	31 ff                	xor    edi,edi
c00043f6:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00043fe:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004406:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000440e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004412:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004418:	75 0e                	jne    c0004428 <create_partition+0xca>
c000441a:	b9 00 02 00 00       	mov    ecx,0x200
c000441f:	31 d2                	xor    edx,edx
c0004421:	89 d8                	mov    eax,ebx
c0004423:	e8 fa d5 ff ff       	call   c0001a22 <mem_set>
c0004428:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000442c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004434:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004437:	0f 84 23 01 00 00    	je     c0004560 <create_partition+0x202>
c000443d:	89 f0                	mov    eax,esi
c000443f:	89 fa                	mov    edx,edi
c0004441:	05 ff 07 00 00       	add    eax,0x7ff
c0004446:	83 d2 00             	adc    edx,0x0
c0004449:	89 c1                	mov    ecx,eax
c000444b:	89 d7                	mov    edi,edx
c000444d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004453:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004457:	89 ce                	mov    esi,ecx
c0004459:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000445d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004461:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004465:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004468:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000446c:	89 04 24             	mov    DWORD PTR [esp],eax
c000446f:	b8 64 00 00 00       	mov    eax,0x64
c0004474:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004477:	b8 00 00 00 00       	mov    eax,0x0
c000447c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004480:	72 41                	jb     c00044c3 <create_partition+0x165>
c0004482:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000448a:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000448e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004493:	01 c1                	add    ecx,eax
c0004495:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004499:	f7 24 24             	mul    DWORD PTR [esp]
c000449c:	6a 00                	push   0x0
c000449e:	01 ca                	add    edx,ecx
c00044a0:	6a 64                	push   0x64
c00044a2:	52                   	push   edx
c00044a3:	50                   	push   eax
c00044a4:	e8 d3 9e 01 00       	call   c001e37c <__udivdi3>
c00044a9:	83 c4 10             	add    esp,0x10
c00044ac:	05 ff 07 00 00       	add    eax,0x7ff
c00044b1:	83 d2 00             	adc    edx,0x0
c00044b4:	89 c1                	mov    ecx,eax
c00044b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ba:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044c0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00044c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00044c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00044ca:	01 f0                	add    eax,esi
c00044cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00044d0:	11 fa                	adc    edx,edi
c00044d2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00044d6:	19 d1                	sbb    ecx,edx
c00044d8:	73 2e                	jae    c0004508 <create_partition+0x1aa>
c00044da:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00044de:	89 f8                	mov    eax,edi
c00044e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00044e7:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00044eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044f3:	73 6b                	jae    c0004560 <create_partition+0x202>
c00044f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00044f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00044fd:	29 f0                	sub    eax,esi
c00044ff:	19 fa                	sbb    edx,edi
c0004501:	89 04 24             	mov    DWORD PTR [esp],eax
c0004504:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450c:	0b 04 24             	or     eax,DWORD PTR [esp]
c000450f:	74 4f                	je     c0004560 <create_partition+0x202>
c0004511:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004514:	b9 10 00 00 00       	mov    ecx,0x10
c0004519:	ba b0 f3 01 c0       	mov    edx,0xc001f3b0
c000451e:	e8 ea d4 ff ff       	call   c0001a0d <mem_cpy>
c0004523:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004527:	b9 10 00 00 00       	mov    ecx,0x10
c000452c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004530:	e8 2c db ff ff       	call   c0002061 <make_rand>
c0004535:	89 f2                	mov    edx,esi
c0004537:	89 f9                	mov    ecx,edi
c0004539:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000453d:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004541:	e8 c1 d4 ff ff       	call   c0001a07 <st_qword>
c0004546:	03 34 24             	add    esi,DWORD PTR [esp]
c0004549:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000454d:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004551:	89 f2                	mov    edx,esi
c0004553:	89 f9                	mov    ecx,edi
c0004555:	83 c2 ff             	add    edx,0xffffffff
c0004558:	83 d1 ff             	adc    ecx,0xffffffff
c000455b:	e8 a7 d4 ff ff       	call   c0001a07 <st_qword>
c0004560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004564:	83 e8 80             	sub    eax,0xffffff80
c0004567:	89 c5                	mov    ebp,eax
c0004569:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000456d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004573:	75 6b                	jne    c00045e0 <create_partition+0x282>
c0004575:	45                   	inc    ebp
c0004576:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000457a:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000457f:	e8 39 da ff ff       	call   c0001fbd <crc32>
c0004584:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000458a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000458e:	75 e5                	jne    c0004575 <create_partition+0x217>
c0004590:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004594:	31 d2                	xor    edx,edx
c0004596:	83 ec 0c             	sub    esp,0xc
c0004599:	c1 ed 09             	shr    ebp,0x9
c000459c:	6a 01                	push   0x1
c000459e:	8d 45 02             	lea    eax,[ebp+0x2]
c00045a1:	52                   	push   edx
c00045a2:	50                   	push   eax
c00045a3:	53                   	push   ebx
c00045a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045a8:	e8 ac d3 ff ff       	call   c0001959 <disk_write>
c00045ad:	83 c4 20             	add    esp,0x20
c00045b0:	85 c0                	test   eax,eax
c00045b2:	0f 85 d7 fd ff ff    	jne    c000438f <create_partition+0x31>
c00045b8:	83 ec 0c             	sub    esp,0xc
c00045bb:	31 d2                	xor    edx,edx
c00045bd:	6a 01                	push   0x1
c00045bf:	89 e8                	mov    eax,ebp
c00045c1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00045c5:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00045c9:	52                   	push   edx
c00045ca:	50                   	push   eax
c00045cb:	53                   	push   ebx
c00045cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045d0:	e8 84 d3 ff ff       	call   c0001959 <disk_write>
c00045d5:	83 c4 20             	add    esp,0x20
c00045d8:	85 c0                	test   eax,eax
c00045da:	0f 85 af fd ff ff    	jne    c000438f <create_partition+0x31>
c00045e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00045e8:	3d 00 40 00 00       	cmp    eax,0x4000
c00045ed:	74 0d                	je     c00045fc <create_partition+0x29e>
c00045ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00045f3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f7:	e9 12 fe ff ff       	jmp    c000440e <create_partition+0xb0>
c00045fc:	31 d2                	xor    edx,edx
c00045fe:	b9 00 02 00 00       	mov    ecx,0x200
c0004603:	89 d8                	mov    eax,ebx
c0004605:	8d 6b 20             	lea    ebp,[ebx+0x20]
c0004608:	e8 15 d4 ff ff       	call   c0001a22 <mem_set>
c000460d:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004610:	b9 10 00 00 00       	mov    ecx,0x10
c0004615:	ba a0 f2 01 c0       	mov    edx,0xc001f2a0
c000461a:	89 d8                	mov    eax,ebx
c000461c:	e8 ec d3 ff ff       	call   c0001a0d <mem_cpy>
c0004621:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004625:	8d 43 58             	lea    eax,[ebx+0x58]
c0004628:	f7 d2                	not    edx
c000462a:	e8 d5 d3 ff ff       	call   c0001a04 <st_dword>
c000462f:	8d 43 18             	lea    eax,[ebx+0x18]
c0004632:	31 c9                	xor    ecx,ecx
c0004634:	89 04 24             	mov    DWORD PTR [esp],eax
c0004637:	ba 01 00 00 00       	mov    edx,0x1
c000463c:	e8 c6 d3 ff ff       	call   c0001a07 <st_qword>
c0004641:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004645:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004649:	83 c2 ff             	add    edx,0xffffffff
c000464c:	89 e8                	mov    eax,ebp
c000464e:	83 d1 ff             	adc    ecx,0xffffffff
c0004651:	e8 b1 d3 ff ff       	call   c0001a07 <st_qword>
c0004656:	31 c9                	xor    ecx,ecx
c0004658:	8d 43 28             	lea    eax,[ebx+0x28]
c000465b:	ba 22 00 00 00       	mov    edx,0x22
c0004660:	e8 a2 d3 ff ff       	call   c0001a07 <st_qword>
c0004665:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004669:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000466d:	83 c2 de             	add    edx,0xffffffde
c0004670:	8d 43 30             	lea    eax,[ebx+0x30]
c0004673:	83 d1 ff             	adc    ecx,0xffffffff
c0004676:	31 f6                	xor    esi,esi
c0004678:	e8 8a d3 ff ff       	call   c0001a07 <st_qword>
c000467d:	8d 43 54             	lea    eax,[ebx+0x54]
c0004680:	ba 80 00 00 00       	mov    edx,0x80
c0004685:	e8 7a d3 ff ff       	call   c0001a04 <st_dword>
c000468a:	8d 43 50             	lea    eax,[ebx+0x50]
c000468d:	ba 80 00 00 00       	mov    edx,0x80
c0004692:	e8 6d d3 ff ff       	call   c0001a04 <st_dword>
c0004697:	ba 02 00 00 00       	mov    edx,0x2
c000469c:	89 f8                	mov    eax,edi
c000469e:	e8 61 d3 ff ff       	call   c0001a04 <st_dword>
c00046a3:	8d 53 38             	lea    edx,[ebx+0x38]
c00046a6:	b9 10 00 00 00       	mov    ecx,0x10
c00046ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046af:	e8 ad d9 ff ff       	call   c0002061 <make_rand>
c00046b4:	83 c8 ff             	or     eax,0xffffffff
c00046b7:	46                   	inc    esi
c00046b8:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00046bd:	e8 fb d8 ff ff       	call   c0001fbd <crc32>
c00046c2:	83 fe 5c             	cmp    esi,0x5c
c00046c5:	75 f0                	jne    c00046b7 <create_partition+0x359>
c00046c7:	f7 d0                	not    eax
c00046c9:	8d 73 10             	lea    esi,[ebx+0x10]
c00046cc:	89 c2                	mov    edx,eax
c00046ce:	89 f0                	mov    eax,esi
c00046d0:	e8 2f d3 ff ff       	call   c0001a04 <st_dword>
c00046d5:	83 ec 0c             	sub    esp,0xc
c00046d8:	6a 01                	push   0x1
c00046da:	6a 00                	push   0x0
c00046dc:	6a 01                	push   0x1
c00046de:	53                   	push   ebx
c00046df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046e3:	e8 71 d2 ff ff       	call   c0001959 <disk_write>
c00046e8:	83 c4 20             	add    esp,0x20
c00046eb:	85 c0                	test   eax,eax
c00046ed:	0f 85 9c fc ff ff    	jne    c000438f <create_partition+0x31>
c00046f3:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046f7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046fb:	83 c2 ff             	add    edx,0xffffffff
c00046fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004701:	83 d1 ff             	adc    ecx,0xffffffff
c0004704:	e8 fe d2 ff ff       	call   c0001a07 <st_qword>
c0004709:	ba 01 00 00 00       	mov    edx,0x1
c000470e:	31 c9                	xor    ecx,ecx
c0004710:	89 e8                	mov    eax,ebp
c0004712:	e8 f0 d2 ff ff       	call   c0001a07 <st_qword>
c0004717:	89 f8                	mov    eax,edi
c0004719:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000471d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004721:	31 ff                	xor    edi,edi
c0004723:	e8 df d2 ff ff       	call   c0001a07 <st_qword>
c0004728:	89 f0                	mov    eax,esi
c000472a:	31 d2                	xor    edx,edx
c000472c:	e8 d3 d2 ff ff       	call   c0001a04 <st_dword>
c0004731:	83 c8 ff             	or     eax,0xffffffff
c0004734:	47                   	inc    edi
c0004735:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c000473a:	e8 7e d8 ff ff       	call   c0001fbd <crc32>
c000473f:	83 ff 5c             	cmp    edi,0x5c
c0004742:	75 f0                	jne    c0004734 <create_partition+0x3d6>
c0004744:	f7 d0                	not    eax
c0004746:	89 c2                	mov    edx,eax
c0004748:	89 f0                	mov    eax,esi
c000474a:	e8 b5 d2 ff ff       	call   c0001a04 <st_dword>
c000474f:	83 ec 0c             	sub    esp,0xc
c0004752:	6a 01                	push   0x1
c0004754:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004758:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000475c:	83 c0 ff             	add    eax,0xffffffff
c000475f:	83 d2 ff             	adc    edx,0xffffffff
c0004762:	52                   	push   edx
c0004763:	50                   	push   eax
c0004764:	53                   	push   ebx
c0004765:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004769:	e8 eb d1 ff ff       	call   c0001959 <disk_write>
c000476e:	83 c4 20             	add    esp,0x20
c0004771:	85 c0                	test   eax,eax
c0004773:	0f 85 16 fc ff ff    	jne    c000438f <create_partition+0x31>
c0004779:	31 d2                	xor    edx,edx
c000477b:	89 d8                	mov    eax,ebx
c000477d:	b9 00 02 00 00       	mov    ecx,0x200
c0004782:	e8 9b d2 ff ff       	call   c0001a22 <mem_set>
c0004787:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000478d:	b9 10 00 00 00       	mov    ecx,0x10
c0004792:	ba b0 f2 01 c0       	mov    edx,0xc001f2b0
c0004797:	e8 71 d2 ff ff       	call   c0001a0d <mem_cpy>
c000479c:	e9 21 01 00 00       	jmp    c00048c2 <create_partition+0x564>
c00047a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00047a5:	b9 05 00 00 00       	mov    ecx,0x5
c00047aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00047ad:	bf 08 00 00 00       	mov    edi,0x8
c00047b2:	89 f8                	mov    eax,edi
c00047b4:	31 d2                	xor    edx,edx
c00047b6:	0f b6 f0             	movzx  esi,al
c00047b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047bc:	f7 f6                	div    esi
c00047be:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00047c3:	76 0a                	jbe    c00047cf <create_partition+0x471>
c00047c5:	d1 e7                	shl    edi,1
c00047c7:	49                   	dec    ecx
c00047c8:	75 e8                	jne    c00047b2 <create_partition+0x454>
c00047ca:	bf ff ff ff ff       	mov    edi,0xffffffff
c00047cf:	b9 00 02 00 00       	mov    ecx,0x200
c00047d4:	31 d2                	xor    edx,edx
c00047d6:	89 d8                	mov    eax,ebx
c00047d8:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00047de:	e8 3f d2 ff ff       	call   c0001a22 <mem_set>
c00047e3:	b9 64 00 00 00       	mov    ecx,0x64
c00047e8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047eb:	31 d2                	xor    edx,edx
c00047ed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00047f5:	f7 f1                	div    ecx
c00047f7:	b9 3f 00 00 00       	mov    ecx,0x3f
c00047fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004800:	89 f8                	mov    eax,edi
c0004802:	0f b6 c0             	movzx  eax,al
c0004805:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004809:	e9 80 00 00 00       	jmp    c000488e <create_partition+0x530>
c000480e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004811:	29 cf                	sub    edi,ecx
c0004813:	89 ca                	mov    edx,ecx
c0004815:	89 f0                	mov    eax,esi
c0004817:	bd 3f 00 00 00       	mov    ebp,0x3f
c000481c:	e8 e3 d1 ff ff       	call   c0001a04 <st_dword>
c0004821:	8d 46 04             	lea    eax,[esi+0x4]
c0004824:	89 fa                	mov    edx,edi
c0004826:	83 c6 10             	add    esi,0x10
c0004829:	e8 d6 d1 ff ff       	call   c0001a04 <st_dword>
c000482e:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004832:	31 d2                	xor    edx,edx
c0004834:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004837:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000483b:	89 c8                	mov    eax,ecx
c000483d:	01 f9                	add    ecx,edi
c000483f:	f7 f5                	div    ebp
c0004841:	89 d5                	mov    ebp,edx
c0004843:	31 d2                	xor    edx,edx
c0004845:	45                   	inc    ebp
c0004846:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000484a:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000484d:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004850:	89 c2                	mov    edx,eax
c0004852:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004855:	c1 ea 02             	shr    edx,0x2
c0004858:	83 e2 c0             	and    edx,0xffffffc0
c000485b:	09 ea                	or     edx,ebp
c000485d:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004862:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004865:	31 d2                	xor    edx,edx
c0004867:	f7 f5                	div    ebp
c0004869:	89 d7                	mov    edi,edx
c000486b:	31 d2                	xor    edx,edx
c000486d:	47                   	inc    edi
c000486e:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004872:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004875:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004878:	89 c5                	mov    ebp,eax
c000487a:	c1 ed 02             	shr    ebp,0x2
c000487d:	83 e5 c0             	and    ebp,0xffffffc0
c0004880:	09 ef                	or     edi,ebp
c0004882:	89 fa                	mov    edx,edi
c0004884:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004887:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000488c:	74 34                	je     c00048c2 <create_partition+0x564>
c000488e:	85 c9                	test   ecx,ecx
c0004890:	74 30                	je     c00048c2 <create_partition+0x564>
c0004892:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004895:	76 2b                	jbe    c00048c2 <create_partition+0x564>
c0004897:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000489b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000489f:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c00048a2:	83 ff 64             	cmp    edi,0x64
c00048a5:	76 4b                	jbe    c00048f2 <create_partition+0x594>
c00048a7:	89 f8                	mov    eax,edi
c00048a9:	01 c8                	add    eax,ecx
c00048ab:	0f 82 5d ff ff ff    	jb     c000480e <create_partition+0x4b0>
c00048b1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048b4:	0f 87 54 ff ff ff    	ja     c000480e <create_partition+0x4b0>
c00048ba:	85 ff                	test   edi,edi
c00048bc:	0f 85 51 ff ff ff    	jne    c0004813 <create_partition+0x4b5>
c00048c2:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00048c8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00048cd:	e8 2e d1 ff ff       	call   c0001a00 <st_word>
c00048d2:	83 ec 0c             	sub    esp,0xc
c00048d5:	6a 01                	push   0x1
c00048d7:	6a 00                	push   0x0
c00048d9:	6a 00                	push   0x0
c00048db:	53                   	push   ebx
c00048dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048e0:	e8 74 d0 ff ff       	call   c0001959 <disk_write>
c00048e5:	83 c4 20             	add    esp,0x20
c00048e8:	85 c0                	test   eax,eax
c00048ea:	0f 95 c0             	setne  al
c00048ed:	0f b6 c0             	movzx  eax,al
c00048f0:	eb 0e                	jmp    c0004900 <create_partition+0x5a2>
c00048f2:	74 07                	je     c00048fb <create_partition+0x59d>
c00048f4:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00048f9:	eb ac                	jmp    c00048a7 <create_partition+0x549>
c00048fb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048fe:	eb a7                	jmp    c00048a7 <create_partition+0x549>
c0004900:	83 c4 5c             	add    esp,0x5c
c0004903:	5b                   	pop    ebx
c0004904:	5e                   	pop    esi
c0004905:	5f                   	pop    edi
c0004906:	5d                   	pop    ebp
c0004907:	c3                   	ret    

c0004908 <get_fileinfo>:
c0004908:	55                   	push   ebp
c0004909:	57                   	push   edi
c000490a:	56                   	push   esi
c000490b:	53                   	push   ebx
c000490c:	83 ec 1c             	sub    esp,0x1c
c000490f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004911:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004915:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004919:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000491c:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c000491f:	0f 84 dc 01 00 00    	je     c0004b01 <get_fileinfo+0x1f9>
c0004925:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004928:	75 0f                	jne    c0004939 <get_fileinfo+0x31>
c000492a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000492d:	83 c4 1c             	add    esp,0x1c
c0004930:	5b                   	pop    ebx
c0004931:	5e                   	pop    esi
c0004932:	5f                   	pop    edi
c0004933:	5d                   	pop    ebp
c0004934:	e9 58 d5 ff ff       	jmp    c0001e91 <get_xfileinfo>
c0004939:	89 d3                	mov    ebx,edx
c000493b:	89 c6                	mov    esi,eax
c000493d:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004941:	74 6a                	je     c00049ad <get_fileinfo+0xa5>
c0004943:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000494b:	31 ed                	xor    ebp,ebp
c000494d:	31 ff                	xor    edi,edi
c000494f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004953:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004957:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000495a:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c000495e:	66 85 d2             	test   dx,dx
c0004961:	74 3e                	je     c00049a1 <get_fileinfo+0x99>
c0004963:	66 85 ed             	test   bp,bp
c0004966:	75 0c                	jne    c0004974 <get_fileinfo+0x6c>
c0004968:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c000496e:	66 3d ff 07          	cmp    ax,0x7ff
c0004972:	76 22                	jbe    c0004996 <get_fileinfo+0x8e>
c0004974:	b9 ff 00 00 00       	mov    ecx,0xff
c0004979:	89 e8                	mov    eax,ebp
c000497b:	29 f9                	sub    ecx,edi
c000497d:	c1 e0 10             	shl    eax,0x10
c0004980:	09 d0                	or     eax,edx
c0004982:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004986:	e8 a3 d1 ff ff       	call   c0001b2e <put_utf>
c000498b:	84 c0                	test   al,al
c000498d:	74 10                	je     c000499f <get_fileinfo+0x97>
c000498f:	0f b6 c0             	movzx  eax,al
c0004992:	31 d2                	xor    edx,edx
c0004994:	01 c7                	add    edi,eax
c0004996:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c000499b:	89 d5                	mov    ebp,edx
c000499d:	eb b0                	jmp    c000494f <get_fileinfo+0x47>
c000499f:	31 ff                	xor    edi,edi
c00049a1:	66 85 ed             	test   bp,bp
c00049a4:	74 02                	je     c00049a8 <get_fileinfo+0xa0>
c00049a6:	31 ff                	xor    edi,edi
c00049a8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00049ad:	31 ff                	xor    edi,edi
c00049af:	31 c9                	xor    ecx,ecx
c00049b1:	83 f9 0a             	cmp    ecx,0xa
c00049b4:	0f 87 ad 00 00 00    	ja     c0004a67 <get_fileinfo+0x15f>
c00049ba:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049bd:	8d 69 01             	lea    ebp,[ecx+0x1]
c00049c0:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c00049c4:	66 83 fa 20          	cmp    dx,0x20
c00049c8:	0f 84 92 00 00 00    	je     c0004a60 <get_fileinfo+0x158>
c00049ce:	66 83 fa 05          	cmp    dx,0x5
c00049d2:	75 05                	jne    c00049d9 <get_fileinfo+0xd1>
c00049d4:	ba e5 00 00 00       	mov    edx,0xe5
c00049d9:	83 ff 0b             	cmp    edi,0xb
c00049dc:	77 0b                	ja     c00049e9 <get_fileinfo+0xe1>
c00049de:	83 fd 09             	cmp    ebp,0x9
c00049e1:	75 06                	jne    c00049e9 <get_fileinfo+0xe1>
c00049e3:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c00049e8:	47                   	inc    edi
c00049e9:	0f b7 c2             	movzx  eax,dx
c00049ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049f0:	e8 6d d0 ff ff       	call   c0001a62 <dbc_1st>
c00049f5:	85 c0                	test   eax,eax
c00049f7:	74 2f                	je     c0004a28 <get_fileinfo+0x120>
c00049f9:	83 fd 08             	cmp    ebp,0x8
c00049fc:	74 2a                	je     c0004a28 <get_fileinfo+0x120>
c00049fe:	83 fd 0b             	cmp    ebp,0xb
c0004a01:	74 25                	je     c0004a28 <get_fileinfo+0x120>
c0004a03:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a06:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a0a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a0e:	e8 52 d0 ff ff       	call   c0001a65 <dbc_2nd>
c0004a13:	85 c0                	test   eax,eax
c0004a15:	74 11                	je     c0004a28 <get_fileinfo+0x120>
c0004a17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a1b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a20:	c1 e2 08             	shl    edx,0x8
c0004a23:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a26:	09 c2                	or     edx,eax
c0004a28:	0f b7 d2             	movzx  edx,dx
c0004a2b:	50                   	push   eax
c0004a2c:	50                   	push   eax
c0004a2d:	68 b5 01 00 00       	push   0x1b5
c0004a32:	52                   	push   edx
c0004a33:	e8 46 38 00 00       	call   c000827e <ff_oem2uni>
c0004a38:	83 c4 10             	add    esp,0x10
c0004a3b:	66 85 c0             	test   ax,ax
c0004a3e:	75 04                	jne    c0004a44 <get_fileinfo+0x13c>
c0004a40:	31 ff                	xor    edi,edi
c0004a42:	eb 23                	jmp    c0004a67 <get_fileinfo+0x15f>
c0004a44:	b9 0c 00 00 00       	mov    ecx,0xc
c0004a49:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004a4d:	29 f9                	sub    ecx,edi
c0004a4f:	0f b7 c0             	movzx  eax,ax
c0004a52:	e8 d7 d0 ff ff       	call   c0001b2e <put_utf>
c0004a57:	84 c0                	test   al,al
c0004a59:	74 e5                	je     c0004a40 <get_fileinfo+0x138>
c0004a5b:	0f b6 c0             	movzx  eax,al
c0004a5e:	01 c7                	add    edi,eax
c0004a60:	89 e9                	mov    ecx,ebp
c0004a62:	e9 4a ff ff ff       	jmp    c00049b1 <get_fileinfo+0xa9>
c0004a67:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004a6c:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004a70:	75 54                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004a72:	85 ff                	test   edi,edi
c0004a74:	75 0b                	jne    c0004a81 <get_fileinfo+0x179>
c0004a76:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004a7a:	ba 01 00 00 00       	mov    edx,0x1
c0004a7f:	eb 33                	jmp    c0004ab4 <get_fileinfo+0x1ac>
c0004a81:	b1 08                	mov    cl,0x8
c0004a83:	31 d2                	xor    edx,edx
c0004a85:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004a8b:	84 c0                	test   al,al
c0004a8d:	74 25                	je     c0004ab4 <get_fileinfo+0x1ac>
c0004a8f:	66 83 f8 2e          	cmp    ax,0x2e
c0004a93:	74 16                	je     c0004aab <get_fileinfo+0x1a3>
c0004a95:	8d 78 bf             	lea    edi,[eax-0x41]
c0004a98:	66 83 ff 19          	cmp    di,0x19
c0004a9c:	77 0f                	ja     c0004aad <get_fileinfo+0x1a5>
c0004a9e:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004aa1:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004aa4:	74 07                	je     c0004aad <get_fileinfo+0x1a5>
c0004aa6:	83 c0 20             	add    eax,0x20
c0004aa9:	eb 02                	jmp    c0004aad <get_fileinfo+0x1a5>
c0004aab:	b1 10                	mov    cl,0x10
c0004aad:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004ab1:	42                   	inc    edx
c0004ab2:	eb d1                	jmp    c0004a85 <get_fileinfo+0x17d>
c0004ab4:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004ab9:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004abc:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ac0:	75 04                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004ac2:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ac6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac9:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004acc:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004acf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad2:	83 c0 1c             	add    eax,0x1c
c0004ad5:	e8 c1 ce ff ff       	call   c000199b <ld_dword>
c0004ada:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ae1:	89 03                	mov    DWORD PTR [ebx],eax
c0004ae3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae6:	83 c0 16             	add    eax,0x16
c0004ae9:	e8 a0 ce ff ff       	call   c000198e <ld_word>
c0004aee:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004af2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004af5:	83 c0 18             	add    eax,0x18
c0004af8:	e8 91 ce ff ff       	call   c000198e <ld_word>
c0004afd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b01:	83 c4 1c             	add    esp,0x1c
c0004b04:	5b                   	pop    ebx
c0004b05:	5e                   	pop    esi
c0004b06:	5f                   	pop    edi
c0004b07:	5d                   	pop    ebp
c0004b08:	c3                   	ret    

c0004b09 <ld_clust.isra.0>:
c0004b09:	56                   	push   esi
c0004b0a:	89 c6                	mov    esi,eax
c0004b0c:	53                   	push   ebx
c0004b0d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b10:	89 d3                	mov    ebx,edx
c0004b12:	e8 77 ce ff ff       	call   c000198e <ld_word>
c0004b17:	0f b7 c8             	movzx  ecx,ax
c0004b1a:	89 f0                	mov    eax,esi
c0004b1c:	3c 03                	cmp    al,0x3
c0004b1e:	75 0d                	jne    c0004b2d <ld_clust.isra.0+0x24>
c0004b20:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b23:	e8 66 ce ff ff       	call   c000198e <ld_word>
c0004b28:	c1 e0 10             	shl    eax,0x10
c0004b2b:	09 c1                	or     ecx,eax
c0004b2d:	89 c8                	mov    eax,ecx
c0004b2f:	5b                   	pop    ebx
c0004b30:	5e                   	pop    esi
c0004b31:	c3                   	ret    

c0004b32 <st_clust.isra.1>:
c0004b32:	56                   	push   esi
c0004b33:	89 c6                	mov    esi,eax
c0004b35:	53                   	push   ebx
c0004b36:	89 d3                	mov    ebx,edx
c0004b38:	0f b7 d1             	movzx  edx,cx
c0004b3b:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004b3e:	e8 bd ce ff ff       	call   c0001a00 <st_word>
c0004b43:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004b46:	75 0f                	jne    c0004b57 <st_clust.isra.1+0x25>
c0004b48:	c1 e9 10             	shr    ecx,0x10
c0004b4b:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b4e:	89 ca                	mov    edx,ecx
c0004b50:	5b                   	pop    ebx
c0004b51:	5e                   	pop    esi
c0004b52:	e9 a9 ce ff ff       	jmp    c0001a00 <st_word>
c0004b57:	5b                   	pop    ebx
c0004b58:	5e                   	pop    esi
c0004b59:	c3                   	ret    

c0004b5a <init_alloc_info.isra.2>:
c0004b5a:	56                   	push   esi
c0004b5b:	53                   	push   ebx
c0004b5c:	89 c6                	mov    esi,eax
c0004b5e:	89 d3                	mov    ebx,edx
c0004b60:	51                   	push   ecx
c0004b61:	8b 00                	mov    eax,DWORD PTR [eax]
c0004b63:	83 c0 34             	add    eax,0x34
c0004b66:	e8 30 ce ff ff       	call   c000199b <ld_dword>
c0004b6b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004b6e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b70:	83 c0 38             	add    eax,0x38
c0004b73:	e8 3b ce ff ff       	call   c00019b3 <ld_qword>
c0004b78:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004b7b:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004b7e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b80:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004b83:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004b8a:	83 e0 02             	and    eax,0x2
c0004b8d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004b90:	5b                   	pop    ebx
c0004b91:	5b                   	pop    ebx
c0004b92:	5e                   	pop    esi
c0004b93:	c3                   	ret    

c0004b94 <follow_path>:
c0004b94:	56                   	push   esi
c0004b95:	53                   	push   ebx
c0004b96:	89 c3                	mov    ebx,eax
c0004b98:	83 ec 14             	sub    esp,0x14
c0004b9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004b9f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ba1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ba5:	8a 10                	mov    dl,BYTE PTR [eax]
c0004ba7:	80 fa 5c             	cmp    dl,0x5c
c0004baa:	75 07                	jne    c0004bb3 <follow_path+0x1f>
c0004bac:	40                   	inc    eax
c0004bad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bb1:	eb ee                	jmp    c0004ba1 <follow_path+0xd>
c0004bb3:	80 fa 2f             	cmp    dl,0x2f
c0004bb6:	74 f4                	je     c0004bac <follow_path+0x18>
c0004bb8:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004bbf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bc6:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004bc9:	77 52                	ja     c0004c1d <follow_path+0x89>
c0004bcb:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004bcf:	31 d2                	xor    edx,edx
c0004bd1:	89 d8                	mov    eax,ebx
c0004bd3:	e8 12 e3 ff ff       	call   c0002eea <dir_sdi>
c0004bd8:	eb 7c                	jmp    c0004c56 <follow_path+0xc2>
c0004bda:	89 d8                	mov    eax,ebx
c0004bdc:	e8 6e f2 ff ff       	call   c0003e4f <dir_find>
c0004be1:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004be4:	85 c0                	test   eax,eax
c0004be6:	75 46                	jne    c0004c2e <follow_path+0x9a>
c0004be8:	80 e2 04             	and    dl,0x4
c0004beb:	75 69                	jne    c0004c56 <follow_path+0xc2>
c0004bed:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004bf1:	74 5e                	je     c0004c51 <follow_path+0xbd>
c0004bf3:	8a 06                	mov    al,BYTE PTR [esi]
c0004bf5:	3c 04                	cmp    al,0x4
c0004bf7:	75 41                	jne    c0004c3a <follow_path+0xa6>
c0004bf9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004bfc:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c00:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c03:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c06:	30 c0                	xor    al,al
c0004c08:	09 d0                	or     eax,edx
c0004c0a:	89 da                	mov    edx,ebx
c0004c0c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c0f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c12:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c15:	8d 46 10             	lea    eax,[esi+0x10]
c0004c18:	e8 3d ff ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004c1d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c21:	89 d8                	mov    eax,ebx
c0004c23:	e8 a9 ed ff ff       	call   c00039d1 <create_name>
c0004c28:	85 c0                	test   eax,eax
c0004c2a:	74 ae                	je     c0004bda <follow_path+0x46>
c0004c2c:	eb 28                	jmp    c0004c56 <follow_path+0xc2>
c0004c2e:	83 f8 04             	cmp    eax,0x4
c0004c31:	75 23                	jne    c0004c56 <follow_path+0xc2>
c0004c33:	80 e2 04             	and    dl,0x4
c0004c36:	74 19                	je     c0004c51 <follow_path+0xbd>
c0004c38:	eb 1c                	jmp    c0004c56 <follow_path+0xc2>
c0004c3a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004c3d:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004c43:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004c47:	e8 bd fe ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004c4c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c4f:	eb cc                	jmp    c0004c1d <follow_path+0x89>
c0004c51:	b8 05 00 00 00       	mov    eax,0x5
c0004c56:	83 c4 14             	add    esp,0x14
c0004c59:	5b                   	pop    ebx
c0004c5a:	5e                   	pop    esi
c0004c5b:	c3                   	ret    

c0004c5c <f_mount>:
c0004c5c:	53                   	push   ebx
c0004c5d:	83 ec 18             	sub    esp,0x18
c0004c60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c64:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c70:	e8 fb d2 ff ff       	call   c0001f70 <get_ldnumber>
c0004c75:	89 c2                	mov    edx,eax
c0004c77:	b8 0b 00 00 00       	mov    eax,0xb
c0004c7c:	85 d2                	test   edx,edx
c0004c7e:	78 39                	js     c0004cb9 <f_mount+0x5d>
c0004c80:	8b 04 95 a0 31 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdce60]
c0004c87:	85 c0                	test   eax,eax
c0004c89:	74 03                	je     c0004c8e <f_mount+0x32>
c0004c8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c92:	85 c0                	test   eax,eax
c0004c94:	74 03                	je     c0004c99 <f_mount+0x3d>
c0004c96:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c9d:	89 04 95 a0 31 02 c0 	mov    DWORD PTR [edx*4-0x3ffdce60],eax
c0004ca4:	31 c0                	xor    eax,eax
c0004ca6:	84 db                	test   bl,bl
c0004ca8:	74 0f                	je     c0004cb9 <f_mount+0x5d>
c0004caa:	31 c9                	xor    ecx,ecx
c0004cac:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cb0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004cb4:	e8 65 d7 ff ff       	call   c000241e <mount_volume>
c0004cb9:	83 c4 18             	add    esp,0x18
c0004cbc:	5b                   	pop    ebx
c0004cbd:	c3                   	ret    

c0004cbe <f_open>:
c0004cbe:	55                   	push   ebp
c0004cbf:	bd 09 00 00 00       	mov    ebp,0x9
c0004cc4:	57                   	push   edi
c0004cc5:	56                   	push   esi
c0004cc6:	53                   	push   ebx
c0004cc7:	83 ec 7c             	sub    esp,0x7c
c0004cca:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004cd1:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004cd8:	85 db                	test   ebx,ebx
c0004cda:	0f 84 10 04 00 00    	je     c00050f0 <f_open+0x432>
c0004ce0:	89 fe                	mov    esi,edi
c0004ce2:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ce6:	83 e6 3f             	and    esi,0x3f
c0004ce9:	89 f0                	mov    eax,esi
c0004ceb:	0f b6 c8             	movzx  ecx,al
c0004cee:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004cf5:	e8 24 d7 ff ff       	call   c000241e <mount_volume>
c0004cfa:	89 c5                	mov    ebp,eax
c0004cfc:	85 c0                	test   eax,eax
c0004cfe:	0f 85 e6 03 00 00    	jne    c00050ea <f_open+0x42c>
c0004d04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d08:	bd 11 00 00 00       	mov    ebp,0x11
c0004d0d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	68 60 04 00 00       	push   0x460
c0004d19:	e8 a3 34 00 00       	call   c00081c1 <ff_memalloc>
c0004d1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d2a:	0f 84 c0 03 00 00    	je     c00050f0 <f_open+0x432>
c0004d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004d38:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004d3e:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004d41:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d44:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004d4b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d4f:	e8 40 fe ff ff       	call   c0004b94 <follow_path>
c0004d54:	89 c5                	mov    ebp,eax
c0004d56:	85 c0                	test   eax,eax
c0004d58:	75 0c                	jne    c0004d66 <f_open+0xa8>
c0004d5a:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d5f:	79 05                	jns    c0004d66 <f_open+0xa8>
c0004d61:	bd 06 00 00 00       	mov    ebp,0x6
c0004d66:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004d6c:	0f 84 84 01 00 00    	je     c0004ef6 <f_open+0x238>
c0004d72:	85 ed                	test   ebp,ebp
c0004d74:	74 20                	je     c0004d96 <f_open+0xd8>
c0004d76:	83 fd 04             	cmp    ebp,0x4
c0004d79:	0f 85 58 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004d7f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d83:	83 ce 08             	or     esi,0x8
c0004d86:	e8 8a f2 ff ff       	call   c0004015 <dir_register>
c0004d8b:	89 c5                	mov    ebp,eax
c0004d8d:	85 c0                	test   eax,eax
c0004d8f:	74 2f                	je     c0004dc0 <f_open+0x102>
c0004d91:	e9 41 03 00 00       	jmp    c00050d7 <f_open+0x419>
c0004d96:	bd 07 00 00 00       	mov    ebp,0x7
c0004d9b:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004da0:	0f 85 31 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004da6:	bd 08 00 00 00       	mov    ebp,0x8
c0004dab:	f7 c7 04 00 00 00    	test   edi,0x4
c0004db1:	0f 85 20 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004db7:	83 e7 08             	and    edi,0x8
c0004dba:	0f 84 65 01 00 00    	je     c0004f25 <f_open+0x267>
c0004dc0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004dc4:	8a 02                	mov    al,BYTE PTR [edx]
c0004dc6:	3c 04                	cmp    al,0x4
c0004dc8:	0f 85 97 00 00 00    	jne    c0004e65 <f_open+0x1a7>
c0004dce:	8d 42 10             	lea    eax,[edx+0x10]
c0004dd1:	89 13                	mov    DWORD PTR [ebx],edx
c0004dd3:	89 da                	mov    edx,ebx
c0004dd5:	e8 80 fd ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004dda:	31 d2                	xor    edx,edx
c0004ddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de0:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004de5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004de8:	83 c0 02             	add    eax,0x2
c0004deb:	e8 32 cc ff ff       	call   c0001a22 <mem_set>
c0004df0:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004df5:	31 d2                	xor    edx,edx
c0004df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dfb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004dfe:	83 c0 26             	add    eax,0x26
c0004e01:	e8 1c cc ff ff       	call   c0001a22 <mem_set>
c0004e06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e0a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e0d:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e11:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e19:	83 c0 08             	add    eax,0x8
c0004e1c:	e8 e3 cb ff ff       	call   c0001a04 <st_dword>
c0004e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e28:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e2c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e30:	e8 b7 ea ff ff       	call   c00038ec <store_xdir>
c0004e35:	89 c5                	mov    ebp,eax
c0004e37:	85 c0                	test   eax,eax
c0004e39:	0f 85 98 02 00 00    	jne    c00050d7 <f_open+0x419>
c0004e3f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004e42:	85 d2                	test   edx,edx
c0004e44:	0f 84 db 00 00 00    	je     c0004f25 <f_open+0x267>
c0004e4a:	31 c9                	xor    ecx,ecx
c0004e4c:	89 d8                	mov    eax,ebx
c0004e4e:	e8 8e e3 ff ff       	call   c00031e1 <remove_chain>
c0004e53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e57:	89 c5                	mov    ebp,eax
c0004e59:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e5c:	48                   	dec    eax
c0004e5d:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004e60:	e9 b8 00 00 00       	jmp    c0004f1d <f_open+0x25f>
c0004e65:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004e69:	89 ea                	mov    edx,ebp
c0004e6b:	e8 99 fc ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004e70:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e75:	89 c7                	mov    edi,eax
c0004e77:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004e7a:	e8 85 cb ff ff       	call   c0001a04 <st_dword>
c0004e7f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e83:	31 c9                	xor    ecx,ecx
c0004e85:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e91:	e8 9c fc ff ff       	call   c0004b32 <st_clust.isra.1>
c0004e96:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e9a:	31 d2                	xor    edx,edx
c0004e9c:	83 c0 1c             	add    eax,0x1c
c0004e9f:	e8 60 cb ff ff       	call   c0001a04 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	85 ff                	test   edi,edi
c0004eaa:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004eae:	74 75                	je     c0004f25 <f_open+0x267>
c0004eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb4:	31 c9                	xor    ecx,ecx
c0004eb6:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004eb9:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ec4:	89 fa                	mov    edx,edi
c0004ec6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eca:	e8 12 e3 ff ff       	call   c00031e1 <remove_chain>
c0004ecf:	89 c5                	mov    ebp,eax
c0004ed1:	85 c0                	test   eax,eax
c0004ed3:	0f 85 fe 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004ed9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004edd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee5:	4f                   	dec    edi
c0004ee6:	e8 81 d2 ff ff       	call   c000216c <move_window>
c0004eeb:	89 c5                	mov    ebp,eax
c0004eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef1:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004ef4:	eb 27                	jmp    c0004f1d <f_open+0x25f>
c0004ef6:	85 ed                	test   ebp,ebp
c0004ef8:	0f 85 d9 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004efe:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f02:	bd 04 00 00 00       	mov    ebp,0x4
c0004f07:	a8 10                	test   al,0x10
c0004f09:	0f 85 c8 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f0f:	83 e7 02             	and    edi,0x2
c0004f12:	74 11                	je     c0004f25 <f_open+0x267>
c0004f14:	bd 07 00 00 00       	mov    ebp,0x7
c0004f19:	a8 01                	test   al,0x1
c0004f1b:	eb 02                	jmp    c0004f1f <f_open+0x261>
c0004f1d:	85 ed                	test   ebp,ebp
c0004f1f:	0f 85 b2 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f25:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f2b:	74 03                	je     c0004f30 <f_open+0x272>
c0004f2d:	83 ce 40             	or     esi,0x40
c0004f30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f34:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004f37:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004f3a:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004f3d:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004f40:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004f44:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004f47:	8a 02                	mov    al,BYTE PTR [edx]
c0004f49:	3c 04                	cmp    al,0x4
c0004f4b:	75 2a                	jne    c0004f77 <f_open+0x2b9>
c0004f4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f51:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004f56:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f5d:	30 c0                	xor    al,al
c0004f5f:	09 c8                	or     eax,ecx
c0004f61:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f64:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f68:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f6b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f6e:	89 da                	mov    edx,ebx
c0004f70:	e8 e5 fb ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004f75:	eb 1c                	jmp    c0004f93 <f_open+0x2d5>
c0004f77:	89 fa                	mov    edx,edi
c0004f79:	e8 8b fb ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004f7e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f81:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004f84:	e8 12 ca ff ff       	call   c000199b <ld_dword>
c0004f89:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0004f90:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004f93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f97:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0004f9e:	89 03                	mov    DWORD PTR [ebx],eax
c0004fa0:	31 d2                	xor    edx,edx
c0004fa2:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004fa6:	b9 00 02 00 00       	mov    ecx,0x200
c0004fab:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004faf:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0004fb3:	89 f0                	mov    eax,esi
c0004fb5:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0004fbc:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0004fbf:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0004fc6:	8d 43 50             	lea    eax,[ebx+0x50]
c0004fc9:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0004fd0:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0004fd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004fdb:	e8 42 ca ff ff       	call   c0001a22 <mem_set>
c0004fe0:	83 e6 20             	and    esi,0x20
c0004fe3:	75 07                	jne    c0004fec <f_open+0x32e>
c0004fe5:	31 ed                	xor    ebp,ebp
c0004fe7:	e9 eb 00 00 00       	jmp    c00050d7 <f_open+0x419>
c0004fec:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004fef:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0004ff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ff6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ffe:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005002:	74 e1                	je     c0004fe5 <f_open+0x327>
c0005004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005008:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000500c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000500f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005012:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005016:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005019:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000501d:	31 ff                	xor    edi,edi
c000501f:	c1 e5 09             	shl    ebp,0x9
c0005022:	89 ee                	mov    esi,ebp
c0005024:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005028:	89 f8                	mov    eax,edi
c000502a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000502e:	73 22                	jae    c0005052 <f_open+0x394>
c0005030:	89 d8                	mov    eax,ebx
c0005032:	e8 bd dc ff ff       	call   c0002cf4 <get_fat>
c0005037:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000503b:	89 c2                	mov    edx,eax
c000503d:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005041:	83 f8 01             	cmp    eax,0x1
c0005044:	76 10                	jbe    c0005056 <f_open+0x398>
c0005046:	83 f8 ff             	cmp    eax,0xffffffff
c0005049:	75 d9                	jne    c0005024 <f_open+0x366>
c000504b:	bd 01 00 00 00       	mov    ebp,0x1
c0005050:	eb 09                	jmp    c000505b <f_open+0x39d>
c0005052:	31 ed                	xor    ebp,ebp
c0005054:	eb 05                	jmp    c000505b <f_open+0x39d>
c0005056:	bd 02 00 00 00       	mov    ebp,0x2
c000505b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000505e:	85 ed                	test   ebp,ebp
c0005060:	75 75                	jne    c00050d7 <f_open+0x419>
c0005062:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005066:	25 ff 01 00 00       	and    eax,0x1ff
c000506b:	0f 84 74 ff ff ff    	je     c0004fe5 <f_open+0x327>
c0005071:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005075:	bd 02 00 00 00       	mov    ebp,0x2
c000507a:	89 c8                	mov    eax,ecx
c000507c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005080:	e8 a2 cb ff ff       	call   c0001c27 <clst2sect>
c0005085:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005089:	89 d7                	mov    edi,edx
c000508b:	09 c7                	or     edi,eax
c000508d:	74 48                	je     c00050d7 <f_open+0x419>
c000508f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005093:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005097:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000509f:	0f ac fe 09          	shrd   esi,edi,0x9
c00050a3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00050a7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00050ab:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00050ae:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00050b2:	83 ec 0c             	sub    esp,0xc
c00050b5:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00050b8:	6a 01                	push   0x1
c00050ba:	52                   	push   edx
c00050bb:	50                   	push   eax
c00050bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00050c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00050c4:	50                   	push   eax
c00050c5:	e8 79 c8 ff ff       	call   c0001943 <disk_read>
c00050ca:	83 c4 20             	add    esp,0x20
c00050cd:	85 c0                	test   eax,eax
c00050cf:	0f 95 c0             	setne  al
c00050d2:	0f b6 c0             	movzx  eax,al
c00050d5:	89 c5                	mov    ebp,eax
c00050d7:	83 ec 0c             	sub    esp,0xc
c00050da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00050de:	e8 f4 30 00 00       	call   c00081d7 <ff_memfree>
c00050e3:	83 c4 10             	add    esp,0x10
c00050e6:	85 ed                	test   ebp,ebp
c00050e8:	74 06                	je     c00050f0 <f_open+0x432>
c00050ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00050f0:	83 c4 7c             	add    esp,0x7c
c00050f3:	89 e8                	mov    eax,ebp
c00050f5:	5b                   	pop    ebx
c00050f6:	5e                   	pop    esi
c00050f7:	5f                   	pop    edi
c00050f8:	5d                   	pop    ebp
c00050f9:	c3                   	ret    

c00050fa <f_read>:
c00050fa:	55                   	push   ebp
c00050fb:	57                   	push   edi
c00050fc:	56                   	push   esi
c00050fd:	53                   	push   ebx
c00050fe:	83 ec 2c             	sub    esp,0x2c
c0005101:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005105:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005109:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000510f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005113:	89 d8                	mov    eax,ebx
c0005115:	e8 77 cf ff ff       	call   c0002091 <validate>
c000511a:	89 c5                	mov    ebp,eax
c000511c:	85 c0                	test   eax,eax
c000511e:	0f 85 4c 02 00 00    	jne    c0005370 <f_read+0x276>
c0005124:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005128:	85 ed                	test   ebp,ebp
c000512a:	0f 85 40 02 00 00    	jne    c0005370 <f_read+0x276>
c0005130:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005134:	0f 84 31 02 00 00    	je     c000536b <f_read+0x271>
c000513a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000513d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005140:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005143:	bf 00 00 00 00       	mov    edi,0x0
c0005148:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000514b:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000514f:	89 d1                	mov    ecx,edx
c0005151:	19 f9                	sbb    ecx,edi
c0005153:	0f 83 cf 00 00 00    	jae    c0005228 <f_read+0x12e>
c0005159:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000515d:	e9 c6 00 00 00       	jmp    c0005228 <f_read+0x12e>
c0005162:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005165:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005168:	89 d0                	mov    eax,edx
c000516a:	25 ff 01 00 00       	and    eax,0x1ff
c000516f:	0f 85 c9 01 00 00    	jne    c000533e <f_read+0x244>
c0005175:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005179:	89 d6                	mov    esi,edx
c000517b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000517f:	89 cf                	mov    edi,ecx
c0005181:	48                   	dec    eax
c0005182:	0f ac fe 09          	shrd   esi,edi,0x9
c0005186:	21 f0                	and    eax,esi
c0005188:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000518c:	0f 84 a6 00 00 00    	je     c0005238 <f_read+0x13e>
c0005192:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005196:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005199:	89 c8                	mov    eax,ecx
c000519b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000519e:	e8 84 ca ff ff       	call   c0001c27 <clst2sect>
c00051a3:	89 d7                	mov    edi,edx
c00051a5:	09 c7                	or     edi,eax
c00051a7:	0f 84 b4 00 00 00    	je     c0005261 <f_read+0x167>
c00051ad:	31 ff                	xor    edi,edi
c00051af:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00051b3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00051b6:	01 c6                	add    esi,eax
c00051b8:	11 d7                	adc    edi,edx
c00051ba:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00051c2:	0f 86 fd 00 00 00    	jbe    c00052c5 <f_read+0x1cb>
c00051c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00051cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d0:	c1 e8 09             	shr    eax,0x9
c00051d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00051d6:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00051da:	03 14 24             	add    edx,DWORD PTR [esp]
c00051dd:	39 c2                	cmp    edx,eax
c00051df:	76 07                	jbe    c00051e8 <f_read+0xee>
c00051e1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00051e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00051e8:	83 ec 0c             	sub    esp,0xc
c00051eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051ef:	57                   	push   edi
c00051f0:	56                   	push   esi
c00051f1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00051f5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051f9:	50                   	push   eax
c00051fa:	e8 44 c7 ff ff       	call   c0001943 <disk_read>
c00051ff:	83 c4 20             	add    esp,0x20
c0005202:	85 c0                	test   eax,eax
c0005204:	75 6e                	jne    c0005274 <f_read+0x17a>
c0005206:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000520a:	78 7e                	js     c000528a <f_read+0x190>
c000520c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000520f:	c1 e6 09             	shl    esi,0x9
c0005212:	31 ff                	xor    edi,edi
c0005214:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005218:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000521c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005220:	01 30                	add    DWORD PTR [eax],esi
c0005222:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005225:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005228:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000522d:	0f 85 2f ff ff ff    	jne    c0005162 <f_read+0x68>
c0005233:	e9 38 01 00 00       	jmp    c0005370 <f_read+0x276>
c0005238:	89 c8                	mov    eax,ecx
c000523a:	09 d0                	or     eax,edx
c000523c:	75 05                	jne    c0005243 <f_read+0x149>
c000523e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005241:	eb 19                	jmp    c000525c <f_read+0x162>
c0005243:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005247:	74 09                	je     c0005252 <f_read+0x158>
c0005249:	89 d8                	mov    eax,ebx
c000524b:	e8 f8 c9 ff ff       	call   c0001c48 <clmt_clust>
c0005250:	eb 0a                	jmp    c000525c <f_read+0x162>
c0005252:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005255:	89 d8                	mov    eax,ebx
c0005257:	e8 98 da ff ff       	call   c0002cf4 <get_fat>
c000525c:	83 f8 01             	cmp    eax,0x1
c000525f:	77 0e                	ja     c000526f <f_read+0x175>
c0005261:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005265:	bd 02 00 00 00       	mov    ebp,0x2
c000526a:	e9 01 01 00 00       	jmp    c0005370 <f_read+0x276>
c000526f:	83 f8 ff             	cmp    eax,0xffffffff
c0005272:	75 0e                	jne    c0005282 <f_read+0x188>
c0005274:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005278:	bd 01 00 00 00       	mov    ebp,0x1
c000527d:	e9 ee 00 00 00       	jmp    c0005370 <f_read+0x276>
c0005282:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005285:	e9 08 ff ff ff       	jmp    c0005192 <f_read+0x98>
c000528a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000528d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005290:	29 f0                	sub    eax,esi
c0005292:	19 fa                	sbb    edx,edi
c0005294:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005297:	89 d7                	mov    edi,edx
c0005299:	ba 00 00 00 00       	mov    edx,0x0
c000529e:	89 f9                	mov    ecx,edi
c00052a0:	19 d1                	sbb    ecx,edx
c00052a2:	0f 83 64 ff ff ff    	jae    c000520c <f_read+0x112>
c00052a8:	89 c7                	mov    edi,eax
c00052aa:	8d 53 50             	lea    edx,[ebx+0x50]
c00052ad:	c1 e7 09             	shl    edi,0x9
c00052b0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00052b4:	b9 00 02 00 00       	mov    ecx,0x200
c00052b9:	01 f8                	add    eax,edi
c00052bb:	e8 4d c7 ff ff       	call   c0001a0d <mem_cpy>
c00052c0:	e9 47 ff ff ff       	jmp    c000520c <f_read+0x112>
c00052c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052c8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00052cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00052ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00052d2:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00052d6:	75 05                	jne    c00052dd <f_read+0x1e3>
c00052d8:	39 34 24             	cmp    DWORD PTR [esp],esi
c00052db:	74 5b                	je     c0005338 <f_read+0x23e>
c00052dd:	8d 43 50             	lea    eax,[ebx+0x50]
c00052e0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052e8:	79 2a                	jns    c0005314 <f_read+0x21a>
c00052ea:	83 ec 0c             	sub    esp,0xc
c00052ed:	6a 01                	push   0x1
c00052ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00052fb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052ff:	50                   	push   eax
c0005300:	e8 54 c6 ff ff       	call   c0001959 <disk_write>
c0005305:	83 c4 20             	add    esp,0x20
c0005308:	85 c0                	test   eax,eax
c000530a:	0f 85 64 ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005310:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005314:	83 ec 0c             	sub    esp,0xc
c0005317:	6a 01                	push   0x1
c0005319:	57                   	push   edi
c000531a:	56                   	push   esi
c000531b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000531f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005323:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005327:	50                   	push   eax
c0005328:	e8 16 c6 ff ff       	call   c0001943 <disk_read>
c000532d:	83 c4 20             	add    esp,0x20
c0005330:	85 c0                	test   eax,eax
c0005332:	0f 85 3c ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005338:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000533b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000533e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005341:	ba 00 02 00 00       	mov    edx,0x200
c0005346:	25 ff 01 00 00       	and    eax,0x1ff
c000534b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000534f:	29 c2                	sub    edx,eax
c0005351:	39 d6                	cmp    esi,edx
c0005353:	76 02                	jbe    c0005357 <f_read+0x25d>
c0005355:	89 d6                	mov    esi,edx
c0005357:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000535b:	89 f1                	mov    ecx,esi
c000535d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005361:	e8 a7 c6 ff ff       	call   c0001a0d <mem_cpy>
c0005366:	e9 a7 fe ff ff       	jmp    c0005212 <f_read+0x118>
c000536b:	bd 07 00 00 00       	mov    ebp,0x7
c0005370:	83 c4 2c             	add    esp,0x2c
c0005373:	89 e8                	mov    eax,ebp
c0005375:	5b                   	pop    ebx
c0005376:	5e                   	pop    esi
c0005377:	5f                   	pop    edi
c0005378:	5d                   	pop    ebp
c0005379:	c3                   	ret    

c000537a <f_write>:
c000537a:	55                   	push   ebp
c000537b:	57                   	push   edi
c000537c:	56                   	push   esi
c000537d:	53                   	push   ebx
c000537e:	83 ec 2c             	sub    esp,0x2c
c0005381:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005385:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005389:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000538f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005393:	89 d8                	mov    eax,ebx
c0005395:	e8 f7 cc ff ff       	call   c0002091 <validate>
c000539a:	89 c5                	mov    ebp,eax
c000539c:	85 c0                	test   eax,eax
c000539e:	0f 85 86 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053a4:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053a8:	85 ed                	test   ebp,ebp
c00053aa:	0f 85 7a 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053b0:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00053b4:	0f 84 6b 02 00 00    	je     c0005625 <f_write+0x2ab>
c00053ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053be:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00053c1:	0f 84 43 01 00 00    	je     c000550a <f_write+0x190>
c00053c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053ca:	89 c1                	mov    ecx,eax
c00053cc:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00053d0:	0f 83 34 01 00 00    	jae    c000550a <f_write+0x190>
c00053d6:	f7 d0                	not    eax
c00053d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053dc:	e9 29 01 00 00       	jmp    c000550a <f_write+0x190>
c00053e1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053e4:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00053e7:	89 d0                	mov    eax,edx
c00053e9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ee:	0f 85 00 02 00 00    	jne    c00055f4 <f_write+0x27a>
c00053f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053f8:	89 d6                	mov    esi,edx
c00053fa:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00053fe:	89 cf                	mov    edi,ecx
c0005400:	48                   	dec    eax
c0005401:	0f ac fe 09          	shrd   esi,edi,0x9
c0005405:	21 f0                	and    eax,esi
c0005407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000540b:	0f 84 06 01 00 00    	je     c0005517 <f_write+0x19d>
c0005411:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005415:	0f 88 6e 01 00 00    	js     c0005589 <f_write+0x20f>
c000541b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 c8                	mov    eax,ecx
c0005424:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005428:	e8 fa c7 ff ff       	call   c0001c27 <clst2sect>
c000542d:	89 d1                	mov    ecx,edx
c000542f:	09 c1                	or     ecx,eax
c0005431:	0f 84 1c 01 00 00    	je     c0005553 <f_write+0x1d9>
c0005437:	31 ff                	xor    edi,edi
c0005439:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000543d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005441:	01 c6                	add    esi,eax
c0005443:	11 d7                	adc    edi,edx
c0005445:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000544d:	0f 86 63 01 00 00    	jbe    c00055b6 <f_write+0x23c>
c0005453:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000545b:	c1 e8 09             	shr    eax,0x9
c000545e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005462:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005466:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000546a:	39 c2                	cmp    edx,eax
c000546c:	76 08                	jbe    c0005476 <f_write+0xfc>
c000546e:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005472:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005476:	83 ec 0c             	sub    esp,0xc
c0005479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000547d:	57                   	push   edi
c000547e:	56                   	push   esi
c000547f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005483:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005487:	50                   	push   eax
c0005488:	e8 cc c4 ff ff       	call   c0001959 <disk_write>
c000548d:	83 c4 20             	add    esp,0x20
c0005490:	85 c0                	test   eax,eax
c0005492:	0f 85 ce 00 00 00    	jne    c0005566 <f_write+0x1ec>
c0005498:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000549b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000549e:	29 f0                	sub    eax,esi
c00054a0:	19 fa                	sbb    edx,edi
c00054a2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00054a6:	89 d7                	mov    edi,edx
c00054a8:	ba 00 00 00 00       	mov    edx,0x0
c00054ad:	89 f9                	mov    ecx,edi
c00054af:	19 d1                	sbb    ecx,edx
c00054b1:	73 1c                	jae    c00054cf <f_write+0x155>
c00054b3:	89 c7                	mov    edi,eax
c00054b5:	b9 00 02 00 00       	mov    ecx,0x200
c00054ba:	c1 e7 09             	shl    edi,0x9
c00054bd:	8d 43 50             	lea    eax,[ebx+0x50]
c00054c0:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00054c4:	89 fa                	mov    edx,edi
c00054c6:	e8 42 c5 ff ff       	call   c0001a0d <mem_cpy>
c00054cb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054cf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00054d3:	c1 e6 09             	shl    esi,0x9
c00054d6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054da:	31 ff                	xor    edi,edi
c00054dc:	01 30                	add    DWORD PTR [eax],esi
c00054de:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054e2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054e6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00054e9:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00054ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00054ef:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00054f2:	89 c1                	mov    ecx,eax
c00054f4:	39 f2                	cmp    edx,esi
c00054f6:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00054f9:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00054fc:	19 f9                	sbb    ecx,edi
c00054fe:	73 04                	jae    c0005504 <f_write+0x18a>
c0005500:	89 f2                	mov    edx,esi
c0005502:	89 f8                	mov    eax,edi
c0005504:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0005507:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000550a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000550f:	0f 85 cc fe ff ff    	jne    c00053e1 <f_write+0x67>
c0005515:	eb 2e                	jmp    c0005545 <f_write+0x1cb>
c0005517:	89 c8                	mov    eax,ecx
c0005519:	09 d0                	or     eax,edx
c000551b:	75 0b                	jne    c0005528 <f_write+0x1ae>
c000551d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005520:	31 d2                	xor    edx,edx
c0005522:	85 c0                	test   eax,eax
c0005524:	75 28                	jne    c000554e <f_write+0x1d4>
c0005526:	eb 12                	jmp    c000553a <f_write+0x1c0>
c0005528:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000552c:	74 09                	je     c0005537 <f_write+0x1bd>
c000552e:	89 d8                	mov    eax,ebx
c0005530:	e8 13 c7 ff ff       	call   c0001c48 <clmt_clust>
c0005535:	eb 0a                	jmp    c0005541 <f_write+0x1c7>
c0005537:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000553a:	89 d8                	mov    eax,ebx
c000553c:	e8 a1 da ff ff       	call   c0002fe2 <create_chain>
c0005541:	85 c0                	test   eax,eax
c0005543:	75 09                	jne    c000554e <f_write+0x1d4>
c0005545:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005549:	e9 dc 00 00 00       	jmp    c000562a <f_write+0x2b0>
c000554e:	83 f8 01             	cmp    eax,0x1
c0005551:	75 0e                	jne    c0005561 <f_write+0x1e7>
c0005553:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005557:	bd 02 00 00 00       	mov    ebp,0x2
c000555c:	e9 c9 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005561:	83 f8 ff             	cmp    eax,0xffffffff
c0005564:	75 0e                	jne    c0005574 <f_write+0x1fa>
c0005566:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000556a:	bd 01 00 00 00       	mov    ebp,0x1
c000556f:	e9 b6 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005574:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005577:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000557b:	0f 85 90 fe ff ff    	jne    c0005411 <f_write+0x97>
c0005581:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005584:	e9 88 fe ff ff       	jmp    c0005411 <f_write+0x97>
c0005589:	83 ec 0c             	sub    esp,0xc
c000558c:	8d 43 50             	lea    eax,[ebx+0x50]
c000558f:	6a 01                	push   0x1
c0005591:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005594:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005597:	50                   	push   eax
c0005598:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000559c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055a0:	50                   	push   eax
c00055a1:	e8 b3 c3 ff ff       	call   c0001959 <disk_write>
c00055a6:	83 c4 20             	add    esp,0x20
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 b9                	jne    c0005566 <f_write+0x1ec>
c00055ad:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055b1:	e9 65 fe ff ff       	jmp    c000541b <f_write+0xa1>
c00055b6:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00055b9:	75 05                	jne    c00055c0 <f_write+0x246>
c00055bb:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00055be:	74 2e                	je     c00055ee <f_write+0x274>
c00055c0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00055c3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055c6:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00055c9:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00055cc:	73 20                	jae    c00055ee <f_write+0x274>
c00055ce:	83 ec 0c             	sub    esp,0xc
c00055d1:	8d 43 50             	lea    eax,[ebx+0x50]
c00055d4:	6a 01                	push   0x1
c00055d6:	57                   	push   edi
c00055d7:	56                   	push   esi
c00055d8:	50                   	push   eax
c00055d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055dd:	50                   	push   eax
c00055de:	e8 60 c3 ff ff       	call   c0001943 <disk_read>
c00055e3:	83 c4 20             	add    esp,0x20
c00055e6:	85 c0                	test   eax,eax
c00055e8:	0f 85 78 ff ff ff    	jne    c0005566 <f_write+0x1ec>
c00055ee:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055f1:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055f4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055f7:	ba 00 02 00 00       	mov    edx,0x200
c00055fc:	25 ff 01 00 00       	and    eax,0x1ff
c0005601:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005605:	29 c2                	sub    edx,eax
c0005607:	39 d6                	cmp    esi,edx
c0005609:	76 02                	jbe    c000560d <f_write+0x293>
c000560b:	89 d6                	mov    esi,edx
c000560d:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005611:	89 f1                	mov    ecx,esi
c0005613:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005617:	e8 f1 c3 ff ff       	call   c0001a0d <mem_cpy>
c000561c:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005620:	e9 b1 fe ff ff       	jmp    c00054d6 <f_write+0x15c>
c0005625:	bd 07 00 00 00       	mov    ebp,0x7
c000562a:	83 c4 2c             	add    esp,0x2c
c000562d:	89 e8                	mov    eax,ebp
c000562f:	5b                   	pop    ebx
c0005630:	5e                   	pop    esi
c0005631:	5f                   	pop    edi
c0005632:	5d                   	pop    ebp
c0005633:	c3                   	ret    

c0005634 <f_sync>:
c0005634:	56                   	push   esi
c0005635:	53                   	push   ebx
c0005636:	83 ec 64             	sub    esp,0x64
c0005639:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000563d:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005641:	89 d8                	mov    eax,ebx
c0005643:	e8 49 ca ff ff       	call   c0002091 <validate>
c0005648:	85 c0                	test   eax,eax
c000564a:	0f 85 ba 01 00 00    	jne    c000580a <f_sync+0x1d6>
c0005650:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005653:	f6 c2 40             	test   dl,0x40
c0005656:	0f 84 ae 01 00 00    	je     c000580a <f_sync+0x1d6>
c000565c:	84 d2                	test   dl,dl
c000565e:	79 33                	jns    c0005693 <f_sync+0x5f>
c0005660:	83 ec 0c             	sub    esp,0xc
c0005663:	8d 43 50             	lea    eax,[ebx+0x50]
c0005666:	6a 01                	push   0x1
c0005668:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000566b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000566e:	50                   	push   eax
c000566f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005673:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005677:	50                   	push   eax
c0005678:	e8 dc c2 ff ff       	call   c0001959 <disk_write>
c000567d:	83 c4 20             	add    esp,0x20
c0005680:	89 c2                	mov    edx,eax
c0005682:	b8 01 00 00 00       	mov    eax,0x1
c0005687:	85 d2                	test   edx,edx
c0005689:	0f 85 7b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c000568f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005697:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000569a:	0f 85 11 01 00 00    	jne    c00057b1 <f_sync+0x17d>
c00056a0:	89 d8                	mov    eax,ebx
c00056a2:	e8 13 d6 ff ff       	call   c0002cba <fill_first_frag>
c00056a7:	85 c0                	test   eax,eax
c00056a9:	0f 85 5b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056af:	83 c9 ff             	or     ecx,0xffffffff
c00056b2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056b5:	89 d8                	mov    eax,ebx
c00056b7:	e8 c9 d5 ff ff       	call   c0002c85 <fill_last_frag>
c00056bc:	85 c0                	test   eax,eax
c00056be:	0f 85 46 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056c4:	83 ec 0c             	sub    esp,0xc
c00056c7:	68 60 04 00 00       	push   0x460
c00056cc:	e8 f0 2a 00 00       	call   c00081c1 <ff_memalloc>
c00056d1:	83 c4 10             	add    esp,0x10
c00056d4:	89 c6                	mov    esi,eax
c00056d6:	b8 11 00 00 00       	mov    eax,0x11
c00056db:	85 f6                	test   esi,esi
c00056dd:	0f 84 27 01 00 00    	je     c000580a <f_sync+0x1d6>
c00056e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056e7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00056ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00056f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00056f3:	89 da                	mov    edx,ebx
c00056f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00056f9:	e8 af df ff ff       	call   c00036ad <load_obj_xdir>
c00056fe:	85 c0                	test   eax,eax
c0005700:	0f 85 95 00 00 00    	jne    c000579b <f_sync+0x167>
c0005706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000570a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000570d:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005711:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005714:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005717:	83 ca 01             	or     edx,0x1
c000571a:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c000571d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005720:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005723:	83 c0 34             	add    eax,0x34
c0005726:	e8 d9 c2 ff ff       	call   c0001a04 <st_dword>
c000572b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000572f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005732:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005735:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005738:	83 c0 38             	add    eax,0x38
c000573b:	e8 c7 c2 ff ff       	call   c0001a07 <st_qword>
c0005740:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005747:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000574a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000574d:	83 c0 28             	add    eax,0x28
c0005750:	e8 b2 c2 ff ff       	call   c0001a07 <st_qword>
c0005755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005759:	ba 00 00 21 50       	mov    edx,0x50210000
c000575e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005761:	83 c0 0c             	add    eax,0xc
c0005764:	e8 9b c2 ff ff       	call   c0001a04 <st_dword>
c0005769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005770:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005774:	31 d2                	xor    edx,edx
c0005776:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005779:	83 c0 10             	add    eax,0x10
c000577c:	e8 83 c2 ff ff       	call   c0001a04 <st_dword>
c0005781:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005785:	e8 62 e1 ff ff       	call   c00038ec <store_xdir>
c000578a:	85 c0                	test   eax,eax
c000578c:	75 0d                	jne    c000579b <f_sync+0x167>
c000578e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005792:	e8 00 eb ff ff       	call   c0004297 <sync_fs>
c0005797:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000579b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000579f:	83 ec 0c             	sub    esp,0xc
c00057a2:	56                   	push   esi
c00057a3:	e8 2f 2a 00 00       	call   c00081d7 <ff_memfree>
c00057a8:	83 c4 10             	add    esp,0x10
c00057ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057af:	eb 59                	jmp    c000580a <f_sync+0x1d6>
c00057b1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00057b4:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00057b7:	e8 b0 c9 ff ff       	call   c000216c <move_window>
c00057bc:	85 c0                	test   eax,eax
c00057be:	75 4a                	jne    c000580a <f_sync+0x1d6>
c00057c0:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00057c3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00057c7:	89 f2                	mov    edx,esi
c00057c9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00057cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00057ce:	e8 5f f3 ff ff       	call   c0004b32 <st_clust.isra.1>
c00057d3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057d6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00057d9:	e8 26 c2 ff ff       	call   c0001a04 <st_dword>
c00057de:	8d 46 16             	lea    eax,[esi+0x16]
c00057e1:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e6:	e8 19 c2 ff ff       	call   c0001a04 <st_dword>
c00057eb:	8d 46 12             	lea    eax,[esi+0x12]
c00057ee:	31 d2                	xor    edx,edx
c00057f0:	e8 0b c2 ff ff       	call   c0001a00 <st_word>
c00057f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00057fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005801:	e8 91 ea ff ff       	call   c0004297 <sync_fs>
c0005806:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000580a:	83 c4 64             	add    esp,0x64
c000580d:	5b                   	pop    ebx
c000580e:	5e                   	pop    esi
c000580f:	c3                   	ret    

c0005810 <f_close>:
c0005810:	53                   	push   ebx
c0005811:	83 ec 24             	sub    esp,0x24
c0005814:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005818:	53                   	push   ebx
c0005819:	e8 16 fe ff ff       	call   c0005634 <f_sync>
c000581e:	83 c4 10             	add    esp,0x10
c0005821:	85 c0                	test   eax,eax
c0005823:	75 15                	jne    c000583a <f_close+0x2a>
c0005825:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005829:	89 d8                	mov    eax,ebx
c000582b:	e8 61 c8 ff ff       	call   c0002091 <validate>
c0005830:	85 c0                	test   eax,eax
c0005832:	75 06                	jne    c000583a <f_close+0x2a>
c0005834:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000583a:	83 c4 18             	add    esp,0x18
c000583d:	5b                   	pop    ebx
c000583e:	c3                   	ret    

c000583f <f_lseek>:
c000583f:	55                   	push   ebp
c0005840:	57                   	push   edi
c0005841:	56                   	push   esi
c0005842:	53                   	push   ebx
c0005843:	83 ec 3c             	sub    esp,0x3c
c0005846:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000584a:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000584e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005852:	89 04 24             	mov    DWORD PTR [esp],eax
c0005855:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005859:	89 d8                	mov    eax,ebx
c000585b:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000585f:	e8 2d c8 ff ff       	call   c0002091 <validate>
c0005864:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005868:	85 c0                	test   eax,eax
c000586a:	0f 85 7a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005870:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005874:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005878:	85 c0                	test   eax,eax
c000587a:	0f 85 6a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005880:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005884:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005887:	74 0c                	je     c0005895 <f_lseek+0x56>
c0005889:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000588c:	85 c0                	test   eax,eax
c000588e:	75 1f                	jne    c00058af <f_lseek+0x70>
c0005890:	e9 b5 01 00 00       	jmp    c0005a4a <f_lseek+0x20b>
c0005895:	83 c9 ff             	or     ecx,0xffffffff
c0005898:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000589b:	89 d8                	mov    eax,ebx
c000589d:	e8 e3 d3 ff ff       	call   c0002c85 <fill_last_frag>
c00058a2:	85 c0                	test   eax,eax
c00058a4:	74 e3                	je     c0005889 <f_lseek+0x4a>
c00058a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058aa:	e9 3b 04 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c00058af:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00058b4:	0f 85 ac 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058ba:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00058be:	0f 85 a2 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058c4:	8d 78 04             	lea    edi,[eax+0x4]
c00058c7:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00058ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00058cc:	be 02 00 00 00       	mov    esi,0x2
c00058d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058d5:	85 ed                	test   ebp,ebp
c00058d7:	74 73                	je     c000594c <f_lseek+0x10d>
c00058d9:	89 e9                	mov    ecx,ebp
c00058db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00058e2:	ff 04 24             	inc    DWORD PTR [esp]
c00058e5:	89 ca                	mov    edx,ecx
c00058e7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00058eb:	89 d8                	mov    eax,ebx
c00058ed:	e8 02 d4 ff ff       	call   c0002cf4 <get_fat>
c00058f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00058f6:	83 f8 01             	cmp    eax,0x1
c00058f9:	77 11                	ja     c000590c <f_lseek+0xcd>
c00058fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00058ff:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005907:	e9 de 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c000590c:	83 f8 ff             	cmp    eax,0xffffffff
c000590f:	75 11                	jne    c0005922 <f_lseek+0xe3>
c0005911:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005915:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000591d:	e9 c8 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005922:	8d 51 01             	lea    edx,[ecx+0x1]
c0005925:	89 c1                	mov    ecx,eax
c0005927:	39 c2                	cmp    edx,eax
c0005929:	74 b7                	je     c00058e2 <f_lseek+0xa3>
c000592b:	83 c6 02             	add    esi,0x2
c000592e:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005932:	72 0b                	jb     c000593f <f_lseek+0x100>
c0005934:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005937:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c000593a:	89 0f                	mov    DWORD PTR [edi],ecx
c000593c:	83 c7 08             	add    edi,0x8
c000593f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005943:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005946:	76 04                	jbe    c000594c <f_lseek+0x10d>
c0005948:	89 c5                	mov    ebp,eax
c000594a:	eb 8d                	jmp    c00058d9 <f_lseek+0x9a>
c000594c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000594f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005953:	89 30                	mov    DWORD PTR [eax],esi
c0005955:	0f 87 87 03 00 00    	ja     c0005ce2 <f_lseek+0x4a3>
c000595b:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005961:	e9 84 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005966:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005969:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000596c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005970:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005974:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005978:	39 04 24             	cmp    DWORD PTR [esp],eax
c000597b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000597f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005983:	73 0f                	jae    c0005994 <f_lseek+0x155>
c0005985:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005988:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000598c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005990:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005998:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000599c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000599f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00059a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00059a6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00059aa:	0f 84 3a 03 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00059b4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00059b8:	83 c6 ff             	add    esi,0xffffffff
c00059bb:	89 d8                	mov    eax,ebx
c00059bd:	83 d7 ff             	adc    edi,0xffffffff
c00059c0:	89 f2                	mov    edx,esi
c00059c2:	89 f9                	mov    ecx,edi
c00059c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00059c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00059cb:	e8 78 c2 ff ff       	call   c0001c48 <clmt_clust>
c00059d0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00059d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00059d7:	89 c2                	mov    edx,eax
c00059d9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059dd:	89 c8                	mov    eax,ecx
c00059df:	e8 43 c2 ff ff       	call   c0001c27 <clst2sect>
c00059e4:	89 d7                	mov    edi,edx
c00059e6:	09 c7                	or     edi,eax
c00059e8:	0f 84 0d ff ff ff    	je     c00058fb <f_lseek+0xbc>
c00059ee:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00059f2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00059f8:	0f 84 ec 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059fe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a06:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a09:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a0d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a11:	4d                   	dec    ebp
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	21 ee                	and    esi,ebp
c0005a16:	01 c6                	add    esi,eax
c0005a18:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a1b:	11 d7                	adc    edi,edx
c0005a1d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a20:	39 fa                	cmp    edx,edi
c0005a22:	75 08                	jne    c0005a2c <f_lseek+0x1ed>
c0005a24:	39 f0                	cmp    eax,esi
c0005a26:	0f 84 be 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c0005a2c:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005a2f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005a33:	0f 89 80 02 00 00    	jns    c0005cb9 <f_lseek+0x47a>
c0005a39:	83 ec 0c             	sub    esp,0xc
c0005a3c:	6a 01                	push   0x1
c0005a3e:	52                   	push   edx
c0005a3f:	50                   	push   eax
c0005a40:	55                   	push   ebp
c0005a41:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005a45:	e9 5a 02 00 00       	jmp    c0005ca4 <f_lseek+0x465>
c0005a4a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a4e:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005a51:	74 16                	je     c0005a69 <f_lseek+0x22a>
c0005a53:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005a58:	76 0f                	jbe    c0005a69 <f_lseek+0x22a>
c0005a5a:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005a61:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005a69:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005a6f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005a72:	89 c7                	mov    edi,eax
c0005a74:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005a78:	73 0d                	jae    c0005a87 <f_lseek+0x248>
c0005a7a:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005a7e:	75 07                	jne    c0005a87 <f_lseek+0x248>
c0005a80:	89 14 24             	mov    DWORD PTR [esp],edx
c0005a83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a87:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005a8a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005a8d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a91:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005a98:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005a9f:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005aa2:	75 09                	jne    c0005aad <f_lseek+0x26e>
c0005aa4:	31 f6                	xor    esi,esi
c0005aa6:	31 ff                	xor    edi,edi
c0005aa8:	e9 af 01 00 00       	jmp    c0005c5c <f_lseek+0x41d>
c0005aad:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005ab1:	89 d7                	mov    edi,edx
c0005ab3:	c1 e1 09             	shl    ecx,0x9
c0005ab6:	09 c7                	or     edi,eax
c0005ab8:	89 cd                	mov    ebp,ecx
c0005aba:	74 6d                	je     c0005b29 <f_lseek+0x2ea>
c0005abc:	83 c0 ff             	add    eax,0xffffffff
c0005abf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ac3:	83 d2 ff             	adc    edx,0xffffffff
c0005ac6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ac9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005acd:	83 c0 ff             	add    eax,0xffffffff
c0005ad0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ad4:	83 d2 ff             	adc    edx,0xffffffff
c0005ad7:	31 ff                	xor    edi,edi
c0005ad9:	57                   	push   edi
c0005ada:	51                   	push   ecx
c0005adb:	52                   	push   edx
c0005adc:	50                   	push   eax
c0005add:	e8 9a 88 01 00       	call   c001e37c <__udivdi3>
c0005ae2:	83 c4 10             	add    esp,0x10
c0005ae5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ae9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005aed:	57                   	push   edi
c0005aee:	55                   	push   ebp
c0005aef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af7:	e8 80 88 01 00       	call   c001e37c <__udivdi3>
c0005afc:	83 c4 10             	add    esp,0x10
c0005aff:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b03:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b07:	19 d1                	sbb    ecx,edx
c0005b09:	72 1e                	jb     c0005b29 <f_lseek+0x2ea>
c0005b0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b0f:	89 e9                	mov    ecx,ebp
c0005b11:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b14:	f7 d9                	neg    ecx
c0005b16:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b19:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b1d:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b20:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b23:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b27:	eb 28                	jmp    c0005b51 <f_lseek+0x312>
c0005b29:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005b2c:	85 c0                	test   eax,eax
c0005b2e:	75 1e                	jne    c0005b4e <f_lseek+0x30f>
c0005b30:	31 d2                	xor    edx,edx
c0005b32:	89 d8                	mov    eax,ebx
c0005b34:	e8 a9 d4 ff ff       	call   c0002fe2 <create_chain>
c0005b39:	83 f8 01             	cmp    eax,0x1
c0005b3c:	0f 84 b9 fd ff ff    	je     c00058fb <f_lseek+0xbc>
c0005b42:	83 f8 ff             	cmp    eax,0xffffffff
c0005b45:	0f 84 c6 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005b4b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005b4e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b51:	85 c0                	test   eax,eax
c0005b53:	0f 84 4b ff ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005b59:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005b5d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005b65:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005b68:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b6c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005b6f:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005b72:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b76:	0f 83 9d 00 00 00    	jae    c0005c19 <f_lseek+0x3da>
c0005b7c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b80:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b84:	29 34 24             	sub    DWORD PTR [esp],esi
c0005b87:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005b8b:	01 f2                	add    edx,esi
c0005b8d:	11 f9                	adc    ecx,edi
c0005b8f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005b93:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005b97:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005b9a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005b9d:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005ba0:	f6 c1 02             	test   cl,0x2
c0005ba3:	74 35                	je     c0005bda <f_lseek+0x39b>
c0005ba5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005ba9:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005bac:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005baf:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005bb3:	73 16                	jae    c0005bcb <f_lseek+0x38c>
c0005bb5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005bb9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005bbd:	88 ca                	mov    dl,cl
c0005bbf:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005bc2:	83 ca 40             	or     edx,0x40
c0005bc5:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005bc8:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005bcb:	89 c2                	mov    edx,eax
c0005bcd:	89 d8                	mov    eax,ebx
c0005bcf:	e8 0e d4 ff ff       	call   c0002fe2 <create_chain>
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	75 0b                	jne    c0005be3 <f_lseek+0x3a4>
c0005bd8:	eb 30                	jmp    c0005c0a <f_lseek+0x3cb>
c0005bda:	89 c2                	mov    edx,eax
c0005bdc:	89 d8                	mov    eax,ebx
c0005bde:	e8 11 d1 ff ff       	call   c0002cf4 <get_fat>
c0005be3:	83 f8 ff             	cmp    eax,0xffffffff
c0005be6:	0f 84 25 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005bec:	83 f8 01             	cmp    eax,0x1
c0005bef:	0f 86 06 fd ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005bf5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bf9:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bfc:	0f 86 f9 fc ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005c02:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c05:	e9 5b ff ff ff       	jmp    c0005b65 <f_lseek+0x326>
c0005c0a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c19:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c1c:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c20:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c23:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c26:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c29:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c2f:	0f 84 6f fe ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005c35:	89 c2                	mov    edx,eax
c0005c37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c3b:	e8 e7 bf ff ff       	call   c0001c27 <clst2sect>
c0005c40:	89 d7                	mov    edi,edx
c0005c42:	09 c7                	or     edi,eax
c0005c44:	0f 84 b1 fc ff ff    	je     c00058fb <f_lseek+0xbc>
c0005c4a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c4e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c51:	0f ac fe 09          	shrd   esi,edi,0x9
c0005c55:	c1 ef 09             	shr    edi,0x9
c0005c58:	01 c6                	add    esi,eax
c0005c5a:	11 d7                	adc    edi,edx
c0005c5c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c62:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c65:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005c68:	19 d1                	sbb    ecx,edx
c0005c6a:	73 0a                	jae    c0005c76 <f_lseek+0x437>
c0005c6c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005c6f:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005c72:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005c76:	a9 ff 01 00 00       	test   eax,0x1ff
c0005c7b:	74 6d                	je     c0005cea <f_lseek+0x4ab>
c0005c7d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c80:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c83:	39 fa                	cmp    edx,edi
c0005c85:	75 04                	jne    c0005c8b <f_lseek+0x44c>
c0005c87:	39 f0                	cmp    eax,esi
c0005c89:	74 5f                	je     c0005cea <f_lseek+0x4ab>
c0005c8b:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c8e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c92:	79 25                	jns    c0005cb9 <f_lseek+0x47a>
c0005c94:	83 ec 0c             	sub    esp,0xc
c0005c97:	6a 01                	push   0x1
c0005c99:	52                   	push   edx
c0005c9a:	50                   	push   eax
c0005c9b:	55                   	push   ebp
c0005c9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ca0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005ca4:	50                   	push   eax
c0005ca5:	e8 af bc ff ff       	call   c0001959 <disk_write>
c0005caa:	83 c4 20             	add    esp,0x20
c0005cad:	85 c0                	test   eax,eax
c0005caf:	0f 85 5c fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cb5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005cb9:	83 ec 0c             	sub    esp,0xc
c0005cbc:	6a 01                	push   0x1
c0005cbe:	57                   	push   edi
c0005cbf:	56                   	push   esi
c0005cc0:	55                   	push   ebp
c0005cc1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cc5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cc9:	50                   	push   eax
c0005cca:	e8 74 bc ff ff       	call   c0001943 <disk_read>
c0005ccf:	83 c4 20             	add    esp,0x20
c0005cd2:	85 c0                	test   eax,eax
c0005cd4:	0f 85 37 fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cda:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005cdd:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ce0:	eb 08                	jmp    c0005cea <f_lseek+0x4ab>
c0005ce2:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005cea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005cee:	83 c4 3c             	add    esp,0x3c
c0005cf1:	5b                   	pop    ebx
c0005cf2:	5e                   	pop    esi
c0005cf3:	5f                   	pop    edi
c0005cf4:	5d                   	pop    ebp
c0005cf5:	c3                   	ret    

c0005cf6 <f_opendir>:
c0005cf6:	56                   	push   esi
c0005cf7:	b8 09 00 00 00       	mov    eax,0x9
c0005cfc:	53                   	push   ebx
c0005cfd:	83 ec 24             	sub    esp,0x24
c0005d00:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d04:	85 db                	test   ebx,ebx
c0005d06:	0f 84 e6 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d0c:	31 c9                	xor    ecx,ecx
c0005d0e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d12:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d16:	e8 03 c7 ff ff       	call   c000241e <mount_volume>
c0005d1b:	85 c0                	test   eax,eax
c0005d1d:	0f 85 c9 00 00 00    	jne    c0005dec <f_opendir+0xf6>
c0005d23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d27:	83 ec 0c             	sub    esp,0xc
c0005d2a:	89 03                	mov    DWORD PTR [ebx],eax
c0005d2c:	68 60 04 00 00       	push   0x460
c0005d31:	e8 8b 24 00 00       	call   c00081c1 <ff_memalloc>
c0005d36:	83 c4 10             	add    esp,0x10
c0005d39:	89 c6                	mov    esi,eax
c0005d3b:	b8 11 00 00 00       	mov    eax,0x11
c0005d40:	85 f6                	test   esi,esi
c0005d42:	0f 84 aa 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d4c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d52:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005d55:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005d58:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005d5c:	89 d8                	mov    eax,ebx
c0005d5e:	e8 31 ee ff ff       	call   c0004b94 <follow_path>
c0005d63:	85 c0                	test   eax,eax
c0005d65:	75 61                	jne    c0005dc8 <f_opendir+0xd2>
c0005d67:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005d6b:	78 46                	js     c0005db3 <f_opendir+0xbd>
c0005d6d:	b8 05 00 00 00       	mov    eax,0x5
c0005d72:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005d76:	74 50                	je     c0005dc8 <f_opendir+0xd2>
c0005d78:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d7c:	8a 01                	mov    al,BYTE PTR [ecx]
c0005d7e:	3c 04                	cmp    al,0x4
c0005d80:	75 26                	jne    c0005da8 <f_opendir+0xb2>
c0005d82:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d85:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d88:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005d8b:	30 d2                	xor    dl,dl
c0005d8d:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005d91:	09 c2                	or     edx,eax
c0005d93:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005d96:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005d99:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005d9c:	89 da                	mov    edx,ebx
c0005d9e:	8d 41 10             	lea    eax,[ecx+0x10]
c0005da1:	e8 b4 ed ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0005da6:	eb 0b                	jmp    c0005db3 <f_opendir+0xbd>
c0005da8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005dab:	e8 59 ed ff ff       	call   c0004b09 <ld_clust.isra.0>
c0005db0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005db3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005db7:	31 d2                	xor    edx,edx
c0005db9:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005dbd:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005dc1:	89 d8                	mov    eax,ebx
c0005dc3:	e8 22 d1 ff ff       	call   c0002eea <dir_sdi>
c0005dc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dcc:	83 ec 0c             	sub    esp,0xc
c0005dcf:	56                   	push   esi
c0005dd0:	e8 02 24 00 00       	call   c00081d7 <ff_memfree>
c0005dd5:	83 c4 10             	add    esp,0x10
c0005dd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ddc:	83 f8 04             	cmp    eax,0x4
c0005ddf:	74 06                	je     c0005de7 <f_opendir+0xf1>
c0005de1:	85 c0                	test   eax,eax
c0005de3:	74 0d                	je     c0005df2 <f_opendir+0xfc>
c0005de5:	eb 05                	jmp    c0005dec <f_opendir+0xf6>
c0005de7:	b8 05 00 00 00       	mov    eax,0x5
c0005dec:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005df2:	83 c4 24             	add    esp,0x24
c0005df5:	5b                   	pop    ebx
c0005df6:	5e                   	pop    esi
c0005df7:	c3                   	ret    

c0005df8 <f_closedir>:
c0005df8:	53                   	push   ebx
c0005df9:	83 ec 18             	sub    esp,0x18
c0005dfc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e04:	89 d8                	mov    eax,ebx
c0005e06:	e8 86 c2 ff ff       	call   c0002091 <validate>
c0005e0b:	85 c0                	test   eax,eax
c0005e0d:	75 06                	jne    c0005e15 <f_closedir+0x1d>
c0005e0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e15:	83 c4 18             	add    esp,0x18
c0005e18:	5b                   	pop    ebx
c0005e19:	c3                   	ret    

c0005e1a <f_readdir>:
c0005e1a:	57                   	push   edi
c0005e1b:	56                   	push   esi
c0005e1c:	53                   	push   ebx
c0005e1d:	83 ec 20             	sub    esp,0x20
c0005e20:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e24:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e28:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e2c:	89 d8                	mov    eax,ebx
c0005e2e:	e8 5e c2 ff ff       	call   c0002091 <validate>
c0005e33:	85 c0                	test   eax,eax
c0005e35:	75 77                	jne    c0005eae <f_readdir+0x94>
c0005e37:	85 ff                	test   edi,edi
c0005e39:	75 0b                	jne    c0005e46 <f_readdir+0x2c>
c0005e3b:	31 d2                	xor    edx,edx
c0005e3d:	89 d8                	mov    eax,ebx
c0005e3f:	e8 a6 d0 ff ff       	call   c0002eea <dir_sdi>
c0005e44:	eb 68                	jmp    c0005eae <f_readdir+0x94>
c0005e46:	83 ec 0c             	sub    esp,0xc
c0005e49:	68 60 04 00 00       	push   0x460
c0005e4e:	e8 6e 23 00 00       	call   c00081c1 <ff_memalloc>
c0005e53:	83 c4 10             	add    esp,0x10
c0005e56:	89 c6                	mov    esi,eax
c0005e58:	b8 11 00 00 00       	mov    eax,0x11
c0005e5d:	85 f6                	test   esi,esi
c0005e5f:	74 4d                	je     c0005eae <f_readdir+0x94>
c0005e61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e65:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e6b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e71:	31 d2                	xor    edx,edx
c0005e73:	89 d8                	mov    eax,ebx
c0005e75:	e8 80 d8 ff ff       	call   c00036fa <dir_read>
c0005e7a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005e7f:	75 19                	jne    c0005e9a <f_readdir+0x80>
c0005e81:	89 fa                	mov    edx,edi
c0005e83:	89 d8                	mov    eax,ebx
c0005e85:	e8 7e ea ff ff       	call   c0004908 <get_fileinfo>
c0005e8a:	31 d2                	xor    edx,edx
c0005e8c:	89 d8                	mov    eax,ebx
c0005e8e:	e8 af d5 ff ff       	call   c0003442 <dir_next>
c0005e93:	83 f8 04             	cmp    eax,0x4
c0005e96:	75 02                	jne    c0005e9a <f_readdir+0x80>
c0005e98:	31 c0                	xor    eax,eax
c0005e9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e9e:	83 ec 0c             	sub    esp,0xc
c0005ea1:	56                   	push   esi
c0005ea2:	e8 30 23 00 00       	call   c00081d7 <ff_memfree>
c0005ea7:	83 c4 10             	add    esp,0x10
c0005eaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eae:	83 c4 20             	add    esp,0x20
c0005eb1:	5b                   	pop    ebx
c0005eb2:	5e                   	pop    esi
c0005eb3:	5f                   	pop    edi
c0005eb4:	c3                   	ret    

c0005eb5 <f_stat>:
c0005eb5:	57                   	push   edi
c0005eb6:	31 c9                	xor    ecx,ecx
c0005eb8:	56                   	push   esi
c0005eb9:	53                   	push   ebx
c0005eba:	83 ec 50             	sub    esp,0x50
c0005ebd:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005ec1:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005ec5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005ec9:	e8 50 c5 ff ff       	call   c000241e <mount_volume>
c0005ece:	89 c3                	mov    ebx,eax
c0005ed0:	85 c0                	test   eax,eax
c0005ed2:	75 67                	jne    c0005f3b <f_stat+0x86>
c0005ed4:	83 ec 0c             	sub    esp,0xc
c0005ed7:	bb 11 00 00 00       	mov    ebx,0x11
c0005edc:	68 60 04 00 00       	push   0x460
c0005ee1:	e8 db 22 00 00       	call   c00081c1 <ff_memalloc>
c0005ee6:	83 c4 10             	add    esp,0x10
c0005ee9:	89 c6                	mov    esi,eax
c0005eeb:	85 c0                	test   eax,eax
c0005eed:	74 4c                	je     c0005f3b <f_stat+0x86>
c0005eef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ef3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ef9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005efc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005eff:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f03:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f07:	e8 88 ec ff ff       	call   c0004b94 <follow_path>
c0005f0c:	89 c3                	mov    ebx,eax
c0005f0e:	85 c0                	test   eax,eax
c0005f10:	75 1d                	jne    c0005f2f <f_stat+0x7a>
c0005f12:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f17:	78 11                	js     c0005f2a <f_stat+0x75>
c0005f19:	85 ff                	test   edi,edi
c0005f1b:	74 12                	je     c0005f2f <f_stat+0x7a>
c0005f1d:	89 fa                	mov    edx,edi
c0005f1f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f23:	e8 e0 e9 ff ff       	call   c0004908 <get_fileinfo>
c0005f28:	eb 05                	jmp    c0005f2f <f_stat+0x7a>
c0005f2a:	bb 06 00 00 00       	mov    ebx,0x6
c0005f2f:	83 ec 0c             	sub    esp,0xc
c0005f32:	56                   	push   esi
c0005f33:	e8 9f 22 00 00       	call   c00081d7 <ff_memfree>
c0005f38:	83 c4 10             	add    esp,0x10
c0005f3b:	83 c4 50             	add    esp,0x50
c0005f3e:	89 d8                	mov    eax,ebx
c0005f40:	5b                   	pop    ebx
c0005f41:	5e                   	pop    esi
c0005f42:	5f                   	pop    edi
c0005f43:	c3                   	ret    

c0005f44 <f_getfree>:
c0005f44:	55                   	push   ebp
c0005f45:	31 c9                	xor    ecx,ecx
c0005f47:	57                   	push   edi
c0005f48:	56                   	push   esi
c0005f49:	53                   	push   ebx
c0005f4a:	83 ec 5c             	sub    esp,0x5c
c0005f4d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f51:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005f55:	e8 c4 c4 ff ff       	call   c000241e <mount_volume>
c0005f5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f5e:	85 c0                	test   eax,eax
c0005f60:	0f 85 9d 01 00 00    	jne    c0006103 <f_getfree+0x1bf>
c0005f66:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f6a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005f6e:	89 02                	mov    DWORD PTR [edx],eax
c0005f70:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005f73:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005f76:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005f79:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005f7d:	39 f2                	cmp    edx,esi
c0005f7f:	77 0b                	ja     c0005f8c <f_getfree+0x48>
c0005f81:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005f85:	89 10                	mov    DWORD PTR [eax],edx
c0005f87:	e9 77 01 00 00       	jmp    c0006103 <f_getfree+0x1bf>
c0005f8c:	8a 10                	mov    dl,BYTE PTR [eax]
c0005f8e:	80 fa 01             	cmp    dl,0x1
c0005f91:	75 3a                	jne    c0005fcd <f_getfree+0x89>
c0005f93:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005f97:	be 02 00 00 00       	mov    esi,0x2
c0005f9c:	31 db                	xor    ebx,ebx
c0005f9e:	89 f2                	mov    edx,esi
c0005fa0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005fa4:	e8 4b cd ff ff       	call   c0002cf4 <get_fat>
c0005fa9:	83 f8 ff             	cmp    eax,0xffffffff
c0005fac:	0f 84 28 01 00 00    	je     c00060da <f_getfree+0x196>
c0005fb2:	83 f8 01             	cmp    eax,0x1
c0005fb5:	0f 84 29 01 00 00    	je     c00060e4 <f_getfree+0x1a0>
c0005fbb:	83 d3 00             	adc    ebx,0x0
c0005fbe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fc2:	46                   	inc    esi
c0005fc3:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0005fc6:	77 d6                	ja     c0005f9e <f_getfree+0x5a>
c0005fc8:	e9 25 01 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c0005fcd:	80 fa 04             	cmp    dl,0x4
c0005fd0:	0f 85 88 00 00 00    	jne    c000605e <f_getfree+0x11a>
c0005fd6:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0005fd9:	31 ed                	xor    ebp,ebp
c0005fdb:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0005fde:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005fe2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005fe6:	31 db                	xor    ebx,ebx
c0005fe8:	85 ed                	test   ebp,ebp
c0005fea:	75 3f                	jne    c000602b <f_getfree+0xe7>
c0005fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ff0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ff4:	83 c0 01             	add    eax,0x1
c0005ff7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005ffb:	83 d2 00             	adc    edx,0x0
c0005ffe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006002:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006006:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000600a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000600e:	e8 59 c1 ff ff       	call   c000216c <move_window>
c0006013:	85 c0                	test   eax,eax
c0006015:	0f 85 d3 00 00 00    	jne    c00060ee <f_getfree+0x1aa>
c000601b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000601f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006023:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006027:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000602b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000602f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006032:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006036:	89 cf                	mov    edi,ecx
c0006038:	85 f6                	test   esi,esi
c000603a:	74 12                	je     c000604e <f_getfree+0x10a>
c000603c:	88 c1                	mov    cl,al
c000603e:	83 e1 01             	and    ecx,0x1
c0006041:	80 f9 01             	cmp    cl,0x1
c0006044:	83 d3 00             	adc    ebx,0x0
c0006047:	d0 e8                	shr    al,1
c0006049:	4e                   	dec    esi
c000604a:	39 fe                	cmp    esi,edi
c000604c:	75 ea                	jne    c0006038 <f_getfree+0xf4>
c000604e:	45                   	inc    ebp
c000604f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006055:	85 f6                	test   esi,esi
c0006057:	75 8f                	jne    c0005fe8 <f_getfree+0xa4>
c0006059:	e9 94 00 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c000605e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006061:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006064:	31 f6                	xor    esi,esi
c0006066:	31 db                	xor    ebx,ebx
c0006068:	85 f6                	test   esi,esi
c000606a:	75 1b                	jne    c0006087 <f_getfree+0x143>
c000606c:	89 d7                	mov    edi,edx
c000606e:	89 cd                	mov    ebp,ecx
c0006070:	83 c7 01             	add    edi,0x1
c0006073:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006077:	83 d5 00             	adc    ebp,0x0
c000607a:	e8 ed c0 ff ff       	call   c000216c <move_window>
c000607f:	85 c0                	test   eax,eax
c0006081:	75 6b                	jne    c00060ee <f_getfree+0x1aa>
c0006083:	89 fa                	mov    edx,edi
c0006085:	89 e9                	mov    ecx,ebp
c0006087:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000608f:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006093:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006096:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000609a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000609e:	75 11                	jne    c00060b1 <f_getfree+0x16d>
c00060a0:	e8 e9 b8 ff ff       	call   c000198e <ld_word>
c00060a5:	66 83 f8 01          	cmp    ax,0x1
c00060a9:	83 d3 00             	adc    ebx,0x0
c00060ac:	83 c6 02             	add    esi,0x2
c00060af:	eb 13                	jmp    c00060c4 <f_getfree+0x180>
c00060b1:	e8 e5 b8 ff ff       	call   c000199b <ld_dword>
c00060b6:	25 ff ff ff 0f       	and    eax,0xfffffff
c00060bb:	83 f8 01             	cmp    eax,0x1
c00060be:	83 d3 00             	adc    ebx,0x0
c00060c1:	83 c6 04             	add    esi,0x4
c00060c4:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00060ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00060ce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00060d2:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00060d6:	75 90                	jne    c0006068 <f_getfree+0x124>
c00060d8:	eb 18                	jmp    c00060f2 <f_getfree+0x1ae>
c00060da:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00060e2:	eb 0e                	jmp    c00060f2 <f_getfree+0x1ae>
c00060e4:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00060ec:	eb 04                	jmp    c00060f2 <f_getfree+0x1ae>
c00060ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060f2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00060f6:	89 18                	mov    DWORD PTR [eax],ebx
c00060f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fc:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00060ff:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006103:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006107:	83 c4 5c             	add    esp,0x5c
c000610a:	5b                   	pop    ebx
c000610b:	5e                   	pop    esi
c000610c:	5f                   	pop    edi
c000610d:	5d                   	pop    ebp
c000610e:	c3                   	ret    

c000610f <f_truncate>:
c000610f:	56                   	push   esi
c0006110:	53                   	push   ebx
c0006111:	83 ec 14             	sub    esp,0x14
c0006114:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006118:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 6e bf ff ff       	call   c0002091 <validate>
c0006123:	89 c6                	mov    esi,eax
c0006125:	85 c0                	test   eax,eax
c0006127:	0f 85 d2 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c000612d:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006131:	85 f6                	test   esi,esi
c0006133:	0f 85 c6 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c0006139:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000613d:	0f 84 b7 00 00 00    	je     c00061fa <f_truncate+0xeb>
c0006143:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006146:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006149:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000614c:	89 d1                	mov    ecx,edx
c000614e:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006151:	0f 83 a8 00 00 00    	jae    c00061ff <f_truncate+0xf0>
c0006157:	09 c2                	or     edx,eax
c0006159:	75 15                	jne    c0006170 <f_truncate+0x61>
c000615b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000615e:	31 c9                	xor    ecx,ecx
c0006160:	89 d8                	mov    eax,ebx
c0006162:	e8 7a d0 ff ff       	call   c00031e1 <remove_chain>
c0006167:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000616e:	eb 35                	jmp    c00061a5 <f_truncate+0x96>
c0006170:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006173:	89 d8                	mov    eax,ebx
c0006175:	e8 7a cb ff ff       	call   c0002cf4 <get_fat>
c000617a:	89 c2                	mov    edx,eax
c000617c:	b8 01 00 00 00       	mov    eax,0x1
c0006181:	83 fa ff             	cmp    edx,0xffffffff
c0006184:	74 1f                	je     c00061a5 <f_truncate+0x96>
c0006186:	b8 02 00 00 00       	mov    eax,0x2
c000618b:	83 fa 01             	cmp    edx,0x1
c000618e:	74 15                	je     c00061a5 <f_truncate+0x96>
c0006190:	31 c0                	xor    eax,eax
c0006192:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006196:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006199:	76 0a                	jbe    c00061a5 <f_truncate+0x96>
c000619b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000619e:	89 d8                	mov    eax,ebx
c00061a0:	e8 3c d0 ff ff       	call   c00031e1 <remove_chain>
c00061a5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00061a8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00061ab:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00061ae:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00061b1:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00061b4:	83 ca 40             	or     edx,0x40
c00061b7:	85 c0                	test   eax,eax
c00061b9:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00061bc:	75 35                	jne    c00061f3 <f_truncate+0xe4>
c00061be:	84 d2                	test   dl,dl
c00061c0:	79 3d                	jns    c00061ff <f_truncate+0xf0>
c00061c2:	83 ec 0c             	sub    esp,0xc
c00061c5:	8d 43 50             	lea    eax,[ebx+0x50]
c00061c8:	6a 01                	push   0x1
c00061ca:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00061cd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00061d0:	50                   	push   eax
c00061d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00061d5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00061d9:	50                   	push   eax
c00061da:	e8 7a b7 ff ff       	call   c0001959 <disk_write>
c00061df:	83 c4 20             	add    esp,0x20
c00061e2:	85 c0                	test   eax,eax
c00061e4:	75 08                	jne    c00061ee <f_truncate+0xdf>
c00061e6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00061ea:	31 f6                	xor    esi,esi
c00061ec:	eb 11                	jmp    c00061ff <f_truncate+0xf0>
c00061ee:	b8 01 00 00 00       	mov    eax,0x1
c00061f3:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00061f6:	89 c6                	mov    esi,eax
c00061f8:	eb 05                	jmp    c00061ff <f_truncate+0xf0>
c00061fa:	be 07 00 00 00       	mov    esi,0x7
c00061ff:	89 f0                	mov    eax,esi
c0006201:	83 c4 14             	add    esp,0x14
c0006204:	5b                   	pop    ebx
c0006205:	5e                   	pop    esi
c0006206:	c3                   	ret    

c0006207 <f_unlink>:
c0006207:	56                   	push   esi
c0006208:	b9 02 00 00 00       	mov    ecx,0x2
c000620d:	53                   	push   ebx
c000620e:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006214:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006218:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000621f:	e8 fa c1 ff ff       	call   c000241e <mount_volume>
c0006224:	85 c0                	test   eax,eax
c0006226:	0f 85 55 01 00 00    	jne    c0006381 <f_unlink+0x17a>
c000622c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006230:	83 ec 0c             	sub    esp,0xc
c0006233:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006237:	68 60 04 00 00       	push   0x460
c000623c:	e8 80 1f 00 00       	call   c00081c1 <ff_memalloc>
c0006241:	83 c4 10             	add    esp,0x10
c0006244:	89 c3                	mov    ebx,eax
c0006246:	b8 11 00 00 00       	mov    eax,0x11
c000624b:	85 db                	test   ebx,ebx
c000624d:	0f 84 2e 01 00 00    	je     c0006381 <f_unlink+0x17a>
c0006253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006257:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000625d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006260:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006263:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000626a:	8d 44 24 48          	lea    eax,[esp+0x48]
c000626e:	e8 21 e9 ff ff       	call   c0004b94 <follow_path>
c0006273:	85 c0                	test   eax,eax
c0006275:	0f 85 f2 00 00 00    	jne    c000636d <f_unlink+0x166>
c000627b:	b8 06 00 00 00       	mov    eax,0x6
c0006280:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006288:	0f 88 df 00 00 00    	js     c000636d <f_unlink+0x166>
c000628e:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006293:	74 0a                	je     c000629f <f_unlink+0x98>
c0006295:	b8 07 00 00 00       	mov    eax,0x7
c000629a:	e9 ce 00 00 00       	jmp    c000636d <f_unlink+0x166>
c000629f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062a3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00062a7:	8a 02                	mov    al,BYTE PTR [edx]
c00062a9:	3c 04                	cmp    al,0x4
c00062ab:	75 12                	jne    c00062bf <f_unlink+0xb8>
c00062ad:	8d 42 10             	lea    eax,[edx+0x10]
c00062b0:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062b4:	e8 a1 e8 ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c00062b9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00062bd:	eb 0e                	jmp    c00062cd <f_unlink+0xc6>
c00062bf:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00062c6:	e8 3e e8 ff ff       	call   c0004b09 <ld_clust.isra.0>
c00062cb:	89 c6                	mov    esi,eax
c00062cd:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00062d2:	75 12                	jne    c00062e6 <f_unlink+0xdf>
c00062d4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062d8:	e8 94 d6 ff ff       	call   c0003971 <dir_remove>
c00062dd:	85 c0                	test   eax,eax
c00062df:	74 6c                	je     c000634d <f_unlink+0x146>
c00062e1:	e9 87 00 00 00       	jmp    c000636d <f_unlink+0x166>
c00062e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ea:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00062f1:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00062f8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00062fb:	75 21                	jne    c000631e <f_unlink+0x117>
c00062fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006301:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006305:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000630c:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006313:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006317:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000631e:	31 d2                	xor    edx,edx
c0006320:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006327:	e8 be cb ff ff       	call   c0002eea <dir_sdi>
c000632c:	85 c0                	test   eax,eax
c000632e:	75 3d                	jne    c000636d <f_unlink+0x166>
c0006330:	31 d2                	xor    edx,edx
c0006332:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006339:	e8 bc d3 ff ff       	call   c00036fa <dir_read>
c000633e:	85 c0                	test   eax,eax
c0006340:	0f 84 4f ff ff ff    	je     c0006295 <f_unlink+0x8e>
c0006346:	83 f8 04             	cmp    eax,0x4
c0006349:	75 22                	jne    c000636d <f_unlink+0x166>
c000634b:	eb 87                	jmp    c00062d4 <f_unlink+0xcd>
c000634d:	85 f6                	test   esi,esi
c000634f:	75 0b                	jne    c000635c <f_unlink+0x155>
c0006351:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006355:	e8 3d df ff ff       	call   c0004297 <sync_fs>
c000635a:	eb 11                	jmp    c000636d <f_unlink+0x166>
c000635c:	31 c9                	xor    ecx,ecx
c000635e:	89 f2                	mov    edx,esi
c0006360:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006364:	e8 78 ce ff ff       	call   c00031e1 <remove_chain>
c0006369:	85 c0                	test   eax,eax
c000636b:	74 e4                	je     c0006351 <f_unlink+0x14a>
c000636d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006371:	83 ec 0c             	sub    esp,0xc
c0006374:	53                   	push   ebx
c0006375:	e8 5d 1e 00 00       	call   c00081d7 <ff_memfree>
c000637a:	83 c4 10             	add    esp,0x10
c000637d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006381:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006387:	5b                   	pop    ebx
c0006388:	5e                   	pop    esi
c0006389:	c3                   	ret    

c000638a <f_mkdir>:
c000638a:	57                   	push   edi
c000638b:	b9 02 00 00 00       	mov    ecx,0x2
c0006390:	56                   	push   esi
c0006391:	53                   	push   ebx
c0006392:	83 c4 80             	add    esp,0xffffff80
c0006395:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006399:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c00063a0:	e8 79 c0 ff ff       	call   c000241e <mount_volume>
c00063a5:	89 c3                	mov    ebx,eax
c00063a7:	85 c0                	test   eax,eax
c00063a9:	0f 85 fe 01 00 00    	jne    c00065ad <f_mkdir+0x223>
c00063af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063b3:	bb 11 00 00 00       	mov    ebx,0x11
c00063b8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00063bc:	83 ec 0c             	sub    esp,0xc
c00063bf:	68 60 04 00 00       	push   0x460
c00063c4:	e8 f8 1d 00 00       	call   c00081c1 <ff_memalloc>
c00063c9:	83 c4 10             	add    esp,0x10
c00063cc:	89 c7                	mov    edi,eax
c00063ce:	85 c0                	test   eax,eax
c00063d0:	0f 84 d7 01 00 00    	je     c00065ad <f_mkdir+0x223>
c00063d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063da:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00063e0:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00063e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00063e6:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00063ed:	8d 44 24 34          	lea    eax,[esp+0x34]
c00063f1:	e8 9e e7 ff ff       	call   c0004b94 <follow_path>
c00063f6:	89 c3                	mov    ebx,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	74 3e                	je     c000643a <f_mkdir+0xb0>
c00063fc:	83 f8 04             	cmp    eax,0x4
c00063ff:	75 3e                	jne    c000643f <f_mkdir+0xb5>
c0006401:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006405:	31 d2                	xor    edx,edx
c0006407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000640b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000640f:	e8 ce cb ff ff       	call   c0002fe2 <create_chain>
c0006414:	89 c6                	mov    esi,eax
c0006416:	85 c0                	test   eax,eax
c0006418:	74 0c                	je     c0006426 <f_mkdir+0x9c>
c000641a:	bb 02 00 00 00       	mov    ebx,0x2
c000641f:	83 f8 01             	cmp    eax,0x1
c0006422:	74 07                	je     c000642b <f_mkdir+0xa1>
c0006424:	eb 2a                	jmp    c0006450 <f_mkdir+0xc6>
c0006426:	bb 07 00 00 00       	mov    ebx,0x7
c000642b:	31 c9                	xor    ecx,ecx
c000642d:	89 f2                	mov    edx,esi
c000642f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006433:	e8 a9 cd ff ff       	call   c00031e1 <remove_chain>
c0006438:	eb 05                	jmp    c000643f <f_mkdir+0xb5>
c000643a:	bb 08 00 00 00       	mov    ebx,0x8
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	57                   	push   edi
c0006443:	e8 8f 1d 00 00       	call   c00081d7 <ff_memfree>
c0006448:	83 c4 10             	add    esp,0x10
c000644b:	e9 5d 01 00 00       	jmp    c00065ad <f_mkdir+0x223>
c0006450:	bb 01 00 00 00       	mov    ebx,0x1
c0006455:	83 f8 ff             	cmp    eax,0xffffffff
c0006458:	74 d1                	je     c000642b <f_mkdir+0xa1>
c000645a:	89 f2                	mov    edx,esi
c000645c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006460:	e8 c4 ce ff ff       	call   c0003329 <dir_clear>
c0006465:	89 c3                	mov    ebx,eax
c0006467:	85 c0                	test   eax,eax
c0006469:	75 c0                	jne    c000642b <f_mkdir+0xa1>
c000646b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006472:	74 69                	je     c00064dd <f_mkdir+0x153>
c0006474:	b9 0b 00 00 00       	mov    ecx,0xb
c0006479:	83 c0 54             	add    eax,0x54
c000647c:	ba 20 00 00 00       	mov    edx,0x20
c0006481:	e8 9c b5 ff ff       	call   c0001a22 <mem_set>
c0006486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000648a:	ba 00 00 21 50       	mov    edx,0x50210000
c000648f:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006493:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006497:	83 c0 6a             	add    eax,0x6a
c000649a:	e8 65 b5 ff ff       	call   c0001a04 <st_dword>
c000649f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064a3:	89 f1                	mov    ecx,esi
c00064a5:	8d 50 54             	lea    edx,[eax+0x54]
c00064a8:	e8 85 e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b1:	b9 20 00 00 00       	mov    ecx,0x20
c00064b6:	8d 50 54             	lea    edx,[eax+0x54]
c00064b9:	83 c0 74             	add    eax,0x74
c00064bc:	e8 4c b5 ff ff       	call   c0001a0d <mem_cpy>
c00064c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c5:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00064c9:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00064cd:	8d 50 74             	lea    edx,[eax+0x74]
c00064d0:	e8 5d e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00064dd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064e1:	e8 2f db ff ff       	call   c0004015 <dir_register>
c00064e6:	89 c3                	mov    ebx,eax
c00064e8:	85 c0                	test   eax,eax
c00064ea:	0f 85 3b ff ff ff    	jne    c000642b <f_mkdir+0xa1>
c00064f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f7:	75 74                	jne    c000656d <f_mkdir+0x1e3>
c00064f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064fc:	ba 00 00 21 50       	mov    edx,0x50210000
c0006501:	83 c0 0c             	add    eax,0xc
c0006504:	e8 fb b4 ff ff       	call   c0001a04 <st_dword>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	89 f2                	mov    edx,esi
c000650f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006512:	83 c0 34             	add    eax,0x34
c0006515:	e8 ea b4 ff ff       	call   c0001a04 <st_dword>
c000651a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651e:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006522:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006525:	c1 e2 09             	shl    edx,0x9
c0006528:	83 c0 38             	add    eax,0x38
c000652b:	e8 d4 b4 ff ff       	call   c0001a04 <st_dword>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006538:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000653b:	c1 e2 09             	shl    edx,0x9
c000653e:	83 c0 28             	add    eax,0x28
c0006541:	e8 be b4 ff ff       	call   c0001a04 <st_dword>
c0006546:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000654d:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006551:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006554:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006558:	8d 44 24 34          	lea    eax,[esp+0x34]
c000655c:	e8 8b d3 ff ff       	call   c00038ec <store_xdir>
c0006561:	89 c3                	mov    ebx,eax
c0006563:	85 c0                	test   eax,eax
c0006565:	0f 85 d4 fe ff ff    	jne    c000643f <f_mkdir+0xb5>
c000656b:	eb 30                	jmp    c000659d <f_mkdir+0x213>
c000656d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006571:	ba 00 00 21 50       	mov    edx,0x50210000
c0006576:	83 c0 16             	add    eax,0x16
c0006579:	e8 86 b4 ff ff       	call   c0001a04 <st_dword>
c000657e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006582:	89 f1                	mov    ecx,esi
c0006584:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006588:	e8 a5 e5 ff ff       	call   c0004b32 <st_clust.isra.1>
c000658d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006591:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006595:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006599:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	e8 f1 dc ff ff       	call   c0004297 <sync_fs>
c00065a6:	89 c3                	mov    ebx,eax
c00065a8:	e9 92 fe ff ff       	jmp    c000643f <f_mkdir+0xb5>
c00065ad:	83 ec 80             	sub    esp,0xffffff80
c00065b0:	89 d8                	mov    eax,ebx
c00065b2:	5b                   	pop    ebx
c00065b3:	5e                   	pop    esi
c00065b4:	5f                   	pop    edi
c00065b5:	c3                   	ret    

c00065b6 <f_rename>:
c00065b6:	55                   	push   ebp
c00065b7:	57                   	push   edi
c00065b8:	56                   	push   esi
c00065b9:	53                   	push   ebx
c00065ba:	81 ec fc 00 00 00    	sub    esp,0xfc
c00065c0:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00065c7:	e8 a4 b9 ff ff       	call   c0001f70 <get_ldnumber>
c00065cc:	b9 02 00 00 00       	mov    ecx,0x2
c00065d1:	8d 54 24 14          	lea    edx,[esp+0x14]
c00065d5:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00065dc:	e8 3d be ff ff       	call   c000241e <mount_volume>
c00065e1:	85 c0                	test   eax,eax
c00065e3:	0f 85 b5 02 00 00    	jne    c000689e <f_rename+0x2e8>
c00065e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065ed:	83 ec 0c             	sub    esp,0xc
c00065f0:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00065f4:	68 60 04 00 00       	push   0x460
c00065f9:	e8 c3 1b 00 00       	call   c00081c1 <ff_memalloc>
c00065fe:	83 c4 10             	add    esp,0x10
c0006601:	89 c3                	mov    ebx,eax
c0006603:	b8 11 00 00 00       	mov    eax,0x11
c0006608:	85 db                	test   ebx,ebx
c000660a:	0f 84 8e 02 00 00    	je     c000689e <f_rename+0x2e8>
c0006610:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006614:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000661a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000661d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006620:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006627:	8d 44 24 58          	lea    eax,[esp+0x58]
c000662b:	e8 64 e5 ff ff       	call   c0004b94 <follow_path>
c0006630:	85 c0                	test   eax,eax
c0006632:	0f 85 52 02 00 00    	jne    c000688a <f_rename+0x2d4>
c0006638:	b8 06 00 00 00       	mov    eax,0x6
c000663d:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006645:	0f 85 3f 02 00 00    	jne    c000688a <f_rename+0x2d4>
c000664b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000664f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006652:	0f 85 05 01 00 00    	jne    c000675d <f_rename+0x1a7>
c0006658:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000665b:	b9 40 00 00 00       	mov    ecx,0x40
c0006660:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006664:	e8 a4 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006669:	b9 4c 00 00 00       	mov    ecx,0x4c
c000666e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006672:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006679:	e8 8f b3 ff ff       	call   c0001a0d <mem_cpy>
c000667e:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006685:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000668c:	e8 03 e5 ff ff       	call   c0004b94 <follow_path>
c0006691:	85 c0                	test   eax,eax
c0006693:	75 29                	jne    c00066be <f_rename+0x108>
c0006695:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006699:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00066a0:	74 0a                	je     c00066ac <f_rename+0xf6>
c00066a2:	b8 08 00 00 00       	mov    eax,0x8
c00066a7:	e9 de 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c00066ac:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00066b3:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00066ba:	75 e6                	jne    c00066a2 <f_rename+0xec>
c00066bc:	eb 09                	jmp    c00066c7 <f_rename+0x111>
c00066be:	83 f8 04             	cmp    eax,0x4
c00066c1:	0f 85 c3 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ce:	e8 42 d9 ff ff       	call   c0004015 <dir_register>
c00066d3:	85 c0                	test   eax,eax
c00066d5:	0f 85 af 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066df:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00066e2:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00066e5:	89 c5                	mov    ebp,eax
c00066e7:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00066ea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00066ee:	8d 46 24             	lea    eax,[esi+0x24]
c00066f1:	e8 98 b2 ff ff       	call   c000198e <ld_word>
c00066f6:	b9 40 00 00 00       	mov    ecx,0x40
c00066fb:	89 c7                	mov    edi,eax
c00066fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006701:	89 f0                	mov    eax,esi
c0006703:	e8 05 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006708:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670c:	89 e9                	mov    ecx,ebp
c000670e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006711:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006714:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006718:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000671c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671f:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006722:	0f b7 d7             	movzx  edx,di
c0006725:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006728:	83 c0 24             	add    eax,0x24
c000672b:	e8 d0 b2 ff ff       	call   c0001a00 <st_word>
c0006730:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006734:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006737:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c000673a:	a8 10                	test   al,0x10
c000673c:	75 06                	jne    c0006744 <f_rename+0x18e>
c000673e:	83 c8 20             	or     eax,0x20
c0006741:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006744:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000674b:	e8 9c d1 ff ff       	call   c00038ec <store_xdir>
c0006750:	85 c0                	test   eax,eax
c0006752:	0f 84 1c 01 00 00    	je     c0006874 <f_rename+0x2be>
c0006758:	e9 2d 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c000675d:	b9 20 00 00 00       	mov    ecx,0x20
c0006762:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006769:	8d 44 24 18          	lea    eax,[esp+0x18]
c000676d:	e8 9b b2 ff ff       	call   c0001a0d <mem_cpy>
c0006772:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006777:	8d 54 24 58          	lea    edx,[esp+0x58]
c000677b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006782:	e8 86 b2 ff ff       	call   c0001a0d <mem_cpy>
c0006787:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000678e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006795:	e8 fa e3 ff ff       	call   c0004b94 <follow_path>
c000679a:	85 c0                	test   eax,eax
c000679c:	75 27                	jne    c00067c5 <f_rename+0x20f>
c000679e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00067a2:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00067a9:	0f 85 f3 fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067af:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00067b6:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00067bd:	0f 85 df fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067c3:	eb 09                	jmp    c00067ce <f_rename+0x218>
c00067c5:	83 f8 04             	cmp    eax,0x4
c00067c8:	0f 85 bc 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067ce:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067d5:	e8 3b d8 ff ff       	call   c0004015 <dir_register>
c00067da:	85 c0                	test   eax,eax
c00067dc:	0f 85 a8 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067e2:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00067e9:	b9 13 00 00 00       	mov    ecx,0x13
c00067ee:	8d 46 0d             	lea    eax,[esi+0xd]
c00067f1:	8d 54 24 25          	lea    edx,[esp+0x25]
c00067f5:	e8 13 b2 ff ff       	call   c0001a0d <mem_cpy>
c00067fa:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00067fe:	a8 10                	test   al,0x10
c0006800:	75 03                	jne    c0006805 <f_rename+0x24f>
c0006802:	83 c8 20             	or     eax,0x20
c0006805:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006808:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000680c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006810:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006814:	74 5e                	je     c0006874 <f_rename+0x2be>
c0006816:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000681d:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006821:	74 51                	je     c0006874 <f_rename+0x2be>
c0006823:	89 f2                	mov    edx,esi
c0006825:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006829:	8a 07                	mov    al,BYTE PTR [edi]
c000682b:	e8 d9 e2 ff ff       	call   c0004b09 <ld_clust.isra.0>
c0006830:	89 c2                	mov    edx,eax
c0006832:	89 f8                	mov    eax,edi
c0006834:	e8 ee b3 ff ff       	call   c0001c27 <clst2sect>
c0006839:	89 c6                	mov    esi,eax
c000683b:	89 d1                	mov    ecx,edx
c000683d:	b8 02 00 00 00       	mov    eax,0x2
c0006842:	09 f2                	or     edx,esi
c0006844:	74 44                	je     c000688a <f_rename+0x2d4>
c0006846:	89 f2                	mov    edx,esi
c0006848:	89 f8                	mov    eax,edi
c000684a:	e8 1d b9 ff ff       	call   c000216c <move_window>
c000684f:	85 c0                	test   eax,eax
c0006851:	75 37                	jne    c000688a <f_rename+0x2d4>
c0006853:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006857:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000685b:	75 17                	jne    c0006874 <f_rename+0x2be>
c000685d:	8d 50 74             	lea    edx,[eax+0x74]
c0006860:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006867:	e8 c6 e2 ff ff       	call   c0004b32 <st_clust.isra.1>
c000686c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006870:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006874:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006878:	e8 f4 d0 ff ff       	call   c0003971 <dir_remove>
c000687d:	85 c0                	test   eax,eax
c000687f:	75 09                	jne    c000688a <f_rename+0x2d4>
c0006881:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006885:	e8 0d da ff ff       	call   c0004297 <sync_fs>
c000688a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000688e:	83 ec 0c             	sub    esp,0xc
c0006891:	53                   	push   ebx
c0006892:	e8 40 19 00 00       	call   c00081d7 <ff_memfree>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000689e:	81 c4 fc 00 00 00    	add    esp,0xfc
c00068a4:	5b                   	pop    ebx
c00068a5:	5e                   	pop    esi
c00068a6:	5f                   	pop    edi
c00068a7:	5d                   	pop    ebp
c00068a8:	c3                   	ret    

c00068a9 <f_chmod>:
c00068a9:	57                   	push   edi
c00068aa:	b9 02 00 00 00       	mov    ecx,0x2
c00068af:	56                   	push   esi
c00068b0:	53                   	push   ebx
c00068b1:	83 ec 60             	sub    esp,0x60
c00068b4:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00068b8:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00068bc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00068c0:	8d 44 24 70          	lea    eax,[esp+0x70]
c00068c4:	e8 55 bb ff ff       	call   c000241e <mount_volume>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 af 00 00 00    	jne    c0006980 <f_chmod+0xd7>
c00068d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068d5:	83 ec 0c             	sub    esp,0xc
c00068d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00068dc:	68 60 04 00 00       	push   0x460
c00068e1:	e8 db 18 00 00       	call   c00081c1 <ff_memalloc>
c00068e6:	83 c4 10             	add    esp,0x10
c00068e9:	89 c6                	mov    esi,eax
c00068eb:	b8 11 00 00 00       	mov    eax,0x11
c00068f0:	85 f6                	test   esi,esi
c00068f2:	0f 84 88 00 00 00    	je     c0006980 <f_chmod+0xd7>
c00068f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068fc:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006902:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006905:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006908:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000690c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006910:	e8 7f e2 ff ff       	call   c0004b94 <follow_path>
c0006915:	85 c0                	test   eax,eax
c0006917:	75 53                	jne    c000696c <f_chmod+0xc3>
c0006919:	b8 06 00 00 00       	mov    eax,0x6
c000691e:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006923:	75 47                	jne    c000696c <f_chmod+0xc3>
c0006925:	89 f9                	mov    ecx,edi
c0006927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000692b:	83 e1 27             	and    ecx,0x27
c000692e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006931:	75 1d                	jne    c0006950 <f_chmod+0xa7>
c0006933:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006936:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006939:	21 cb                	and    ebx,ecx
c000693b:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000693e:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006941:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006945:	e8 a2 cf ff ff       	call   c00038ec <store_xdir>
c000694a:	85 c0                	test   eax,eax
c000694c:	75 1e                	jne    c000696c <f_chmod+0xc3>
c000694e:	eb 13                	jmp    c0006963 <f_chmod+0xba>
c0006950:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006954:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006957:	21 cb                	and    ebx,ecx
c0006959:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c000695c:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c000695f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006967:	e8 2b d9 ff ff       	call   c0004297 <sync_fs>
c000696c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006970:	83 ec 0c             	sub    esp,0xc
c0006973:	56                   	push   esi
c0006974:	e8 5e 18 00 00       	call   c00081d7 <ff_memfree>
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006980:	83 c4 60             	add    esp,0x60
c0006983:	5b                   	pop    ebx
c0006984:	5e                   	pop    esi
c0006985:	5f                   	pop    edi
c0006986:	c3                   	ret    

c0006987 <f_utime>:
c0006987:	56                   	push   esi
c0006988:	b9 02 00 00 00       	mov    ecx,0x2
c000698d:	53                   	push   ebx
c000698e:	83 ec 64             	sub    esp,0x64
c0006991:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006995:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006999:	8d 44 24 70          	lea    eax,[esp+0x70]
c000699d:	e8 7c ba ff ff       	call   c000241e <mount_volume>
c00069a2:	85 c0                	test   eax,eax
c00069a4:	0f 85 b5 00 00 00    	jne    c0006a5f <f_utime+0xd8>
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 ec 0c             	sub    esp,0xc
c00069b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069b5:	68 60 04 00 00       	push   0x460
c00069ba:	e8 02 18 00 00       	call   c00081c1 <ff_memalloc>
c00069bf:	83 c4 10             	add    esp,0x10
c00069c2:	89 c3                	mov    ebx,eax
c00069c4:	b8 11 00 00 00       	mov    eax,0x11
c00069c9:	85 db                	test   ebx,ebx
c00069cb:	0f 84 8e 00 00 00    	je     c0006a5f <f_utime+0xd8>
c00069d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069d5:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00069db:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00069de:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069e1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069e9:	e8 a6 e1 ff ff       	call   c0004b94 <follow_path>
c00069ee:	85 c0                	test   eax,eax
c00069f0:	75 59                	jne    c0006a4b <f_utime+0xc4>
c00069f2:	b8 06 00 00 00       	mov    eax,0x6
c00069f7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069fc:	75 4d                	jne    c0006a4b <f_utime+0xc4>
c00069fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a02:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a06:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a0a:	c1 e2 10             	shl    edx,0x10
c0006a0d:	09 ca                	or     edx,ecx
c0006a0f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a12:	75 1a                	jne    c0006a2e <f_utime+0xa7>
c0006a14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a17:	83 c0 0c             	add    eax,0xc
c0006a1a:	e8 e5 af ff ff       	call   c0001a04 <st_dword>
c0006a1f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a23:	e8 c4 ce ff ff       	call   c00038ec <store_xdir>
c0006a28:	85 c0                	test   eax,eax
c0006a2a:	75 1f                	jne    c0006a4b <f_utime+0xc4>
c0006a2c:	eb 14                	jmp    c0006a42 <f_utime+0xbb>
c0006a2e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a32:	83 c0 16             	add    eax,0x16
c0006a35:	e8 ca af ff ff       	call   c0001a04 <st_dword>
c0006a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a3e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a46:	e8 4c d8 ff ff       	call   c0004297 <sync_fs>
c0006a4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a4f:	83 ec 0c             	sub    esp,0xc
c0006a52:	53                   	push   ebx
c0006a53:	e8 7f 17 00 00       	call   c00081d7 <ff_memfree>
c0006a58:	83 c4 10             	add    esp,0x10
c0006a5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a5f:	83 c4 64             	add    esp,0x64
c0006a62:	5b                   	pop    ebx
c0006a63:	5e                   	pop    esi
c0006a64:	c3                   	ret    

c0006a65 <f_getlabel>:
c0006a65:	55                   	push   ebp
c0006a66:	31 c9                	xor    ecx,ecx
c0006a68:	57                   	push   edi
c0006a69:	56                   	push   esi
c0006a6a:	53                   	push   ebx
c0006a6b:	83 ec 6c             	sub    esp,0x6c
c0006a6e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a72:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006a79:	e8 a0 b9 ff ff       	call   c000241e <mount_volume>
c0006a7e:	89 c6                	mov    esi,eax
c0006a80:	85 c0                	test   eax,eax
c0006a82:	0f 85 c1 01 00 00    	jne    c0006c49 <f_getlabel+0x1e4>
c0006a88:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006a90:	0f 84 5f 01 00 00    	je     c0006bf5 <f_getlabel+0x190>
c0006a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a9a:	31 d2                	xor    edx,edx
c0006a9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006aa0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006aa8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aac:	e8 39 c4 ff ff       	call   c0002eea <dir_sdi>
c0006ab1:	85 c0                	test   eax,eax
c0006ab3:	0f 85 2d 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006ab9:	ba 01 00 00 00       	mov    edx,0x1
c0006abe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ac2:	e8 33 cc ff ff       	call   c00036fa <dir_read>
c0006ac7:	85 c0                	test   eax,eax
c0006ac9:	0f 85 17 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ad3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ad6:	74 09                	je     c0006ae1 <f_getlabel+0x7c>
c0006ad8:	31 db                	xor    ebx,ebx
c0006ada:	31 c9                	xor    ecx,ecx
c0006adc:	e9 c8 00 00 00       	jmp    c0006ba9 <f_getlabel+0x144>
c0006ae1:	31 ed                	xor    ebp,ebp
c0006ae3:	31 db                	xor    ebx,ebx
c0006ae5:	31 ff                	xor    edi,edi
c0006ae7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aeb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006aef:	39 fa                	cmp    edx,edi
c0006af1:	76 4b                	jbe    c0006b3e <f_getlabel+0xd9>
c0006af3:	47                   	inc    edi
c0006af4:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006af7:	01 d0                	add    eax,edx
c0006af9:	e8 90 ae ff ff       	call   c000198e <ld_word>
c0006afe:	66 85 ed             	test   bp,bp
c0006b01:	75 0d                	jne    c0006b10 <f_getlabel+0xab>
c0006b03:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b09:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b0e:	76 28                	jbe    c0006b38 <f_getlabel+0xd3>
c0006b10:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b17:	89 e9                	mov    ecx,ebp
c0006b19:	01 da                	add    edx,ebx
c0006b1b:	c1 e1 10             	shl    ecx,0x10
c0006b1e:	0f b7 c0             	movzx  eax,ax
c0006b21:	09 c8                	or     eax,ecx
c0006b23:	b9 04 00 00 00       	mov    ecx,0x4
c0006b28:	e8 01 b0 ff ff       	call   c0001b2e <put_utf>
c0006b2d:	84 c0                	test   al,al
c0006b2f:	74 0b                	je     c0006b3c <f_getlabel+0xd7>
c0006b31:	0f b6 c0             	movzx  eax,al
c0006b34:	01 c3                	add    ebx,eax
c0006b36:	31 c0                	xor    eax,eax
c0006b38:	89 c5                	mov    ebp,eax
c0006b3a:	eb ab                	jmp    c0006ae7 <f_getlabel+0x82>
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	66 85 ed             	test   bp,bp
c0006b41:	74 02                	je     c0006b45 <f_getlabel+0xe0>
c0006b43:	31 db                	xor    ebx,ebx
c0006b45:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006b4c:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006b50:	e9 a0 00 00 00       	jmp    c0006bf5 <f_getlabel+0x190>
c0006b55:	83 ff 0b             	cmp    edi,0xb
c0006b58:	74 11                	je     c0006b6b <f_getlabel+0x106>
c0006b5a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b63:	8d 79 02             	lea    edi,[ecx+0x2]
c0006b66:	c1 e0 08             	shl    eax,0x8
c0006b69:	09 c2                	or     edx,eax
c0006b6b:	0f b7 d2             	movzx  edx,dx
c0006b6e:	50                   	push   eax
c0006b6f:	50                   	push   eax
c0006b70:	68 b5 01 00 00       	push   0x1b5
c0006b75:	52                   	push   edx
c0006b76:	e8 03 17 00 00       	call   c000827e <ff_oem2uni>
c0006b7b:	83 c4 10             	add    esp,0x10
c0006b7e:	66 85 c0             	test   ax,ax
c0006b81:	74 46                	je     c0006bc9 <f_getlabel+0x164>
c0006b83:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8a:	0f b7 c0             	movzx  eax,ax
c0006b8d:	01 da                	add    edx,ebx
c0006b8f:	b9 04 00 00 00       	mov    ecx,0x4
c0006b94:	e8 95 af ff ff       	call   c0001b2e <put_utf>
c0006b99:	84 c0                	test   al,al
c0006b9b:	74 2c                	je     c0006bc9 <f_getlabel+0x164>
c0006b9d:	0f b6 c0             	movzx  eax,al
c0006ba0:	01 c3                	add    ebx,eax
c0006ba2:	83 ff 0b             	cmp    edi,0xb
c0006ba5:	74 24                	je     c0006bcb <f_getlabel+0x166>
c0006ba7:	89 f9                	mov    ecx,edi
c0006ba9:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006bad:	8d 79 01             	lea    edi,[ecx+0x1]
c0006bb0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006bb5:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006bba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bbe:	e8 9f ae ff ff       	call   c0001a62 <dbc_1st>
c0006bc3:	85 c0                	test   eax,eax
c0006bc5:	74 a4                	je     c0006b6b <f_getlabel+0x106>
c0006bc7:	eb 8c                	jmp    c0006b55 <f_getlabel+0xf0>
c0006bc9:	31 db                	xor    ebx,ebx
c0006bcb:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006bd2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006bd5:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006bdc:	74 17                	je     c0006bf5 <f_getlabel+0x190>
c0006bde:	4b                   	dec    ebx
c0006bdf:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006be2:	74 ee                	je     c0006bd2 <f_getlabel+0x16d>
c0006be4:	eb 0f                	jmp    c0006bf5 <f_getlabel+0x190>
c0006be6:	83 f8 04             	cmp    eax,0x4
c0006be9:	75 5c                	jne    c0006c47 <f_getlabel+0x1e2>
c0006beb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bf2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006bf5:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006bfd:	74 4a                	je     c0006c49 <f_getlabel+0x1e4>
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c06:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c09:	e8 5e b5 ff ff       	call   c000216c <move_window>
c0006c0e:	89 c6                	mov    esi,eax
c0006c10:	85 c0                	test   eax,eax
c0006c12:	75 35                	jne    c0006c49 <f_getlabel+0x1e4>
c0006c14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c18:	b8 43 00 00 00       	mov    eax,0x43
c0006c1d:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c1f:	80 f9 03             	cmp    cl,0x3
c0006c22:	74 0f                	je     c0006c33 <f_getlabel+0x1ce>
c0006c24:	31 c0                	xor    eax,eax
c0006c26:	80 f9 04             	cmp    cl,0x4
c0006c29:	0f 94 c0             	sete   al
c0006c2c:	48                   	dec    eax
c0006c2d:	83 e0 c3             	and    eax,0xffffffc3
c0006c30:	83 c0 64             	add    eax,0x64
c0006c33:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006c37:	e8 5f ad ff ff       	call   c000199b <ld_dword>
c0006c3c:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006c43:	89 07                	mov    DWORD PTR [edi],eax
c0006c45:	eb 02                	jmp    c0006c49 <f_getlabel+0x1e4>
c0006c47:	89 c6                	mov    esi,eax
c0006c49:	83 c4 6c             	add    esp,0x6c
c0006c4c:	89 f0                	mov    eax,esi
c0006c4e:	5b                   	pop    ebx
c0006c4f:	5e                   	pop    esi
c0006c50:	5f                   	pop    edi
c0006c51:	5d                   	pop    ebp
c0006c52:	c3                   	ret    

c0006c53 <f_setlabel>:
c0006c53:	56                   	push   esi
c0006c54:	b9 02 00 00 00       	mov    ecx,0x2
c0006c59:	53                   	push   ebx
c0006c5a:	83 ec 74             	sub    esp,0x74
c0006c5d:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006c61:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c68:	e8 b1 b7 ff ff       	call   c000241e <mount_volume>
c0006c6d:	89 c6                	mov    esi,eax
c0006c6f:	85 c0                	test   eax,eax
c0006c71:	0f 85 41 02 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006c77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c7b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c7e:	0f 85 8e 00 00 00    	jne    c0006d12 <f_setlabel+0xbf>
c0006c84:	b9 16 00 00 00       	mov    ecx,0x16
c0006c89:	31 d2                	xor    edx,edx
c0006c8b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006c8f:	31 db                	xor    ebx,ebx
c0006c91:	e8 8c ad ff ff       	call   c0001a22 <mem_set>
c0006c96:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006c9d:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ca0:	0f 86 0a 01 00 00    	jbe    c0006db0 <f_setlabel+0x15d>
c0006ca6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cad:	e8 b6 ad ff ff       	call   c0001a68 <tchar2uni>
c0006cb2:	89 c6                	mov    esi,eax
c0006cb4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006cb9:	76 2a                	jbe    c0006ce5 <f_setlabel+0x92>
c0006cbb:	83 f8 ff             	cmp    eax,0xffffffff
c0006cbe:	74 05                	je     c0006cc5 <f_setlabel+0x72>
c0006cc0:	83 fb 09             	cmp    ebx,0x9
c0006cc3:	76 0a                	jbe    c0006ccf <f_setlabel+0x7c>
c0006cc5:	be 06 00 00 00       	mov    esi,0x6
c0006cca:	e9 e9 01 00 00       	jmp    c0006eb8 <f_setlabel+0x265>
c0006ccf:	89 c2                	mov    edx,eax
c0006cd1:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cd5:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cd8:	c1 ea 10             	shr    edx,0x10
c0006cdb:	01 c8                	add    eax,ecx
c0006cdd:	43                   	inc    ebx
c0006cde:	e8 1d ad ff ff       	call   c0001a00 <st_word>
c0006ce3:	eb 04                	jmp    c0006ce9 <f_setlabel+0x96>
c0006ce5:	85 c0                	test   eax,eax
c0006ce7:	74 dc                	je     c0006cc5 <f_setlabel+0x72>
c0006ce9:	89 f2                	mov    edx,esi
c0006ceb:	b8 f7 f2 01 c0       	mov    eax,0xc001f2f7
c0006cf0:	e8 5b ad ff ff       	call   c0001a50 <chk_chr>
c0006cf5:	85 c0                	test   eax,eax
c0006cf7:	75 cc                	jne    c0006cc5 <f_setlabel+0x72>
c0006cf9:	83 fb 0a             	cmp    ebx,0xa
c0006cfc:	77 c7                	ja     c0006cc5 <f_setlabel+0x72>
c0006cfe:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d01:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d05:	0f b7 d6             	movzx  edx,si
c0006d08:	01 c8                	add    eax,ecx
c0006d0a:	43                   	inc    ebx
c0006d0b:	e8 f0 ac ff ff       	call   c0001a00 <st_word>
c0006d10:	eb 84                	jmp    c0006c96 <f_setlabel+0x43>
c0006d12:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d17:	ba 20 00 00 00       	mov    edx,0x20
c0006d1c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d20:	31 db                	xor    ebx,ebx
c0006d22:	e8 fb ac ff ff       	call   c0001a22 <mem_set>
c0006d27:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d2e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d31:	76 60                	jbe    c0006d93 <f_setlabel+0x140>
c0006d33:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d3a:	e8 29 ad ff ff       	call   c0001a68 <tchar2uni>
c0006d3f:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d44:	0f 87 7b ff ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006d4a:	83 ec 0c             	sub    esp,0xc
c0006d4d:	50                   	push   eax
c0006d4e:	e8 97 15 00 00       	call   c00082ea <ff_wtoupper>
c0006d53:	5a                   	pop    edx
c0006d54:	59                   	pop    ecx
c0006d55:	68 b5 01 00 00       	push   0x1b5
c0006d5a:	50                   	push   eax
c0006d5b:	e8 8e 14 00 00       	call   c00081ee <ff_uni2oem>
c0006d60:	83 c4 10             	add    esp,0x10
c0006d63:	89 c6                	mov    esi,eax
c0006d65:	66 85 c0             	test   ax,ax
c0006d68:	0f 84 57 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d6e:	0f b7 d0             	movzx  edx,ax
c0006d71:	b8 f0 f2 01 c0       	mov    eax,0xc001f2f0
c0006d76:	e8 d5 ac ff ff       	call   c0001a50 <chk_chr>
c0006d7b:	85 c0                	test   eax,eax
c0006d7d:	0f 85 42 ff ff ff    	jne    c0006cc5 <f_setlabel+0x72>
c0006d83:	66 81 fe ff 00       	cmp    si,0xff
c0006d88:	0f 87 14 01 00 00    	ja     c0006ea2 <f_setlabel+0x24f>
c0006d8e:	e9 fa 00 00 00       	jmp    c0006e8d <f_setlabel+0x23a>
c0006d93:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006d98:	0f 84 27 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d9e:	85 db                	test   ebx,ebx
c0006da0:	74 0e                	je     c0006db0 <f_setlabel+0x15d>
c0006da2:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006da5:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006daa:	75 04                	jne    c0006db0 <f_setlabel+0x15d>
c0006dac:	89 c3                	mov    ebx,eax
c0006dae:	eb ee                	jmp    c0006d9e <f_setlabel+0x14b>
c0006db0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006db4:	31 d2                	xor    edx,edx
c0006db6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006dba:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006dc2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dc6:	e8 1f c1 ff ff       	call   c0002eea <dir_sdi>
c0006dcb:	89 c6                	mov    esi,eax
c0006dcd:	85 c0                	test   eax,eax
c0006dcf:	0f 85 e3 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006dd5:	ba 01 00 00 00       	mov    edx,0x1
c0006dda:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dde:	e8 17 c9 ff ff       	call   c00036fa <dir_read>
c0006de3:	85 c0                	test   eax,eax
c0006de5:	75 21                	jne    c0006e08 <f_setlabel+0x1b5>
c0006de7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006deb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006def:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006df2:	74 5d                	je     c0006e51 <f_setlabel+0x1fe>
c0006df4:	85 db                	test   ebx,ebx
c0006df6:	74 0b                	je     c0006e03 <f_setlabel+0x1b0>
c0006df8:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dfd:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e01:	eb 70                	jmp    c0006e73 <f_setlabel+0x220>
c0006e03:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e06:	eb 70                	jmp    c0006e78 <f_setlabel+0x225>
c0006e08:	83 f8 04             	cmp    eax,0x4
c0006e0b:	75 7c                	jne    c0006e89 <f_setlabel+0x236>
c0006e0d:	85 db                	test   ebx,ebx
c0006e0f:	0f 84 a3 00 00 00    	je     c0006eb8 <f_setlabel+0x265>
c0006e15:	ba 01 00 00 00       	mov    edx,0x1
c0006e1a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e1e:	e8 51 ca ff ff       	call   c0003874 <dir_alloc>
c0006e23:	89 c6                	mov    esi,eax
c0006e25:	85 c0                	test   eax,eax
c0006e27:	0f 85 8b 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006e2d:	31 d2                	xor    edx,edx
c0006e2f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e33:	b9 20 00 00 00       	mov    ecx,0x20
c0006e38:	e8 e5 ab ff ff       	call   c0001a22 <mem_set>
c0006e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e41:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e44:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e48:	75 18                	jne    c0006e62 <f_setlabel+0x20f>
c0006e4a:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006e4d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e51:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006e54:	b9 16 00 00 00       	mov    ecx,0x16
c0006e59:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e5d:	83 c0 02             	add    eax,0x2
c0006e60:	eb 9b                	jmp    c0006dfd <f_setlabel+0x1aa>
c0006e62:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006e66:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e6b:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e6f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e73:	e8 95 ab ff ff       	call   c0001a0d <mem_cpy>
c0006e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006e80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e84:	e8 0e d4 ff ff       	call   c0004297 <sync_fs>
c0006e89:	89 c6                	mov    esi,eax
c0006e8b:	eb 2b                	jmp    c0006eb8 <f_setlabel+0x265>
c0006e8d:	83 fb 0a             	cmp    ebx,0xa
c0006e90:	0f 87 2f fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006e96:	89 f0                	mov    eax,esi
c0006e98:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e9c:	43                   	inc    ebx
c0006e9d:	e9 85 fe ff ff       	jmp    c0006d27 <f_setlabel+0xd4>
c0006ea2:	83 fb 09             	cmp    ebx,0x9
c0006ea5:	0f 87 1a fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006eab:	89 f0                	mov    eax,esi
c0006ead:	66 c1 e8 08          	shr    ax,0x8
c0006eb1:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006eb5:	43                   	inc    ebx
c0006eb6:	eb de                	jmp    c0006e96 <f_setlabel+0x243>
c0006eb8:	89 f0                	mov    eax,esi
c0006eba:	83 c4 74             	add    esp,0x74
c0006ebd:	5b                   	pop    ebx
c0006ebe:	5e                   	pop    esi
c0006ebf:	c3                   	ret    

c0006ec0 <f_forward>:
c0006ec0:	55                   	push   ebp
c0006ec1:	57                   	push   edi
c0006ec2:	56                   	push   esi
c0006ec3:	53                   	push   ebx
c0006ec4:	83 ec 2c             	sub    esp,0x2c
c0006ec7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ecb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006ecf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006ed5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006ed9:	89 d8                	mov    eax,ebx
c0006edb:	e8 b1 b1 ff ff       	call   c0002091 <validate>
c0006ee0:	89 c5                	mov    ebp,eax
c0006ee2:	85 c0                	test   eax,eax
c0006ee4:	0f 85 aa 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006eea:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006eee:	85 ed                	test   ebp,ebp
c0006ef0:	0f 85 9e 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006ef6:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006efa:	0f 84 8f 01 00 00    	je     c000708f <f_forward+0x1cf>
c0006f00:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f03:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f06:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f09:	bf 00 00 00 00       	mov    edi,0x0
c0006f0e:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f11:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f15:	89 d1                	mov    ecx,edx
c0006f17:	19 f9                	sbb    ecx,edi
c0006f19:	0f 83 cf 00 00 00    	jae    c0006fee <f_forward+0x12e>
c0006f1f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f23:	e9 c6 00 00 00       	jmp    c0006fee <f_forward+0x12e>
c0006f28:	50                   	push   eax
c0006f29:	50                   	push   eax
c0006f2a:	6a 00                	push   0x0
c0006f2c:	6a 00                	push   0x0
c0006f2e:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006f32:	83 c4 10             	add    esp,0x10
c0006f35:	85 c0                	test   eax,eax
c0006f37:	0f 84 57 01 00 00    	je     c0007094 <f_forward+0x1d4>
c0006f3d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006f40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f44:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006f47:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006f4b:	89 d7                	mov    edi,edx
c0006f4d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006f50:	89 c6                	mov    esi,eax
c0006f52:	0f ac fe 09          	shrd   esi,edi,0x9
c0006f56:	21 ce                	and    esi,ecx
c0006f58:	89 c1                	mov    ecx,eax
c0006f5a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006f60:	0f 84 98 00 00 00    	je     c0006ffe <f_forward+0x13e>
c0006f66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f6a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006f6d:	89 c8                	mov    eax,ecx
c0006f6f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006f73:	e8 af ac ff ff       	call   c0001c27 <clst2sect>
c0006f78:	89 d7                	mov    edi,edx
c0006f7a:	09 c7                	or     edi,eax
c0006f7c:	0f 84 9e 00 00 00    	je     c0007020 <f_forward+0x160>
c0006f82:	31 ff                	xor    edi,edi
c0006f84:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006f87:	01 c6                	add    esi,eax
c0006f89:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0006f8d:	11 d7                	adc    edi,edx
c0006f8f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0006f92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006f95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006f99:	39 fa                	cmp    edx,edi
c0006f9b:	0f 85 a2 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa1:	39 f0                	cmp    eax,esi
c0006fa3:	0f 85 9a 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fac:	ba 00 02 00 00       	mov    edx,0x200
c0006fb1:	25 ff 01 00 00       	and    eax,0x1ff
c0006fb6:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0006fba:	29 c2                	sub    edx,eax
c0006fbc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0006fbf:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0006fc2:	39 d1                	cmp    ecx,edx
c0006fc4:	76 02                	jbe    c0006fc8 <f_forward+0x108>
c0006fc6:	89 d1                	mov    ecx,edx
c0006fc8:	8d 73 50             	lea    esi,[ebx+0x50]
c0006fcb:	52                   	push   edx
c0006fcc:	01 c6                	add    esi,eax
c0006fce:	52                   	push   edx
c0006fcf:	51                   	push   ecx
c0006fd0:	56                   	push   esi
c0006fd1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fd5:	83 c4 10             	add    esp,0x10
c0006fd8:	85 c0                	test   eax,eax
c0006fda:	74 44                	je     c0007020 <f_forward+0x160>
c0006fdc:	31 ff                	xor    edi,edi
c0006fde:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0006fe1:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0006fe4:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0006fe8:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0006fec:	01 07                	add    DWORD PTR [edi],eax
c0006fee:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0006ff3:	0f 85 2f ff ff ff    	jne    c0006f28 <f_forward+0x68>
c0006ff9:	e9 96 00 00 00       	jmp    c0007094 <f_forward+0x1d4>
c0006ffe:	85 f6                	test   esi,esi
c0007000:	0f 85 60 ff ff ff    	jne    c0006f66 <f_forward+0xa6>
c0007006:	89 d7                	mov    edi,edx
c0007008:	09 c7                	or     edi,eax
c000700a:	75 05                	jne    c0007011 <f_forward+0x151>
c000700c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000700f:	eb 0a                	jmp    c000701b <f_forward+0x15b>
c0007011:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007014:	89 d8                	mov    eax,ebx
c0007016:	e8 d9 bc ff ff       	call   c0002cf4 <get_fat>
c000701b:	83 f8 01             	cmp    eax,0x1
c000701e:	77 0b                	ja     c000702b <f_forward+0x16b>
c0007020:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007024:	bd 02 00 00 00       	mov    ebp,0x2
c0007029:	eb 69                	jmp    c0007094 <f_forward+0x1d4>
c000702b:	83 f8 ff             	cmp    eax,0xffffffff
c000702e:	75 0b                	jne    c000703b <f_forward+0x17b>
c0007030:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007034:	bd 01 00 00 00       	mov    ebp,0x1
c0007039:	eb 59                	jmp    c0007094 <f_forward+0x1d4>
c000703b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000703e:	e9 23 ff ff ff       	jmp    c0006f66 <f_forward+0xa6>
c0007043:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007047:	79 20                	jns    c0007069 <f_forward+0x1a9>
c0007049:	83 ec 0c             	sub    esp,0xc
c000704c:	6a 01                	push   0x1
c000704e:	52                   	push   edx
c000704f:	50                   	push   eax
c0007050:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007054:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007058:	50                   	push   eax
c0007059:	e8 fb a8 ff ff       	call   c0001959 <disk_write>
c000705e:	83 c4 20             	add    esp,0x20
c0007061:	85 c0                	test   eax,eax
c0007063:	75 cb                	jne    c0007030 <f_forward+0x170>
c0007065:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007069:	83 ec 0c             	sub    esp,0xc
c000706c:	6a 01                	push   0x1
c000706e:	57                   	push   edi
c000706f:	56                   	push   esi
c0007070:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007074:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007078:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000707c:	50                   	push   eax
c000707d:	e8 c1 a8 ff ff       	call   c0001943 <disk_read>
c0007082:	83 c4 20             	add    esp,0x20
c0007085:	85 c0                	test   eax,eax
c0007087:	0f 84 1c ff ff ff    	je     c0006fa9 <f_forward+0xe9>
c000708d:	eb a1                	jmp    c0007030 <f_forward+0x170>
c000708f:	bd 07 00 00 00       	mov    ebp,0x7
c0007094:	83 c4 2c             	add    esp,0x2c
c0007097:	89 e8                	mov    eax,ebp
c0007099:	5b                   	pop    ebx
c000709a:	5e                   	pop    esi
c000709b:	5f                   	pop    edi
c000709c:	5d                   	pop    ebp
c000709d:	c3                   	ret    

c000709e <f_mkfs>:
c000709e:	55                   	push   ebp
c000709f:	57                   	push   edi
c00070a0:	56                   	push   esi
c00070a1:	53                   	push   ebx
c00070a2:	bb 0b 00 00 00       	mov    ebx,0xb
c00070a7:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00070ad:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00070b4:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00070bb:	e8 b0 ae ff ff       	call   c0001f70 <get_ldnumber>
c00070c0:	85 c0                	test   eax,eax
c00070c2:	0f 88 ec 10 00 00    	js     c00081b4 <f_mkfs+0x1116>
c00070c8:	8b 14 85 a0 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdce60]
c00070cf:	85 d2                	test   edx,edx
c00070d1:	74 03                	je     c00070d6 <f_mkfs+0x38>
c00070d3:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00070d6:	85 f6                	test   esi,esi
c00070d8:	75 05                	jne    c00070df <f_mkfs+0x41>
c00070da:	be e0 f2 01 c0       	mov    esi,0xc001f2e0
c00070df:	83 ec 0c             	sub    esp,0xc
c00070e2:	0f b6 c0             	movzx  eax,al
c00070e5:	bb 03 00 00 00       	mov    ebx,0x3
c00070ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070f2:	e8 49 a8 ff ff       	call   c0001940 <disk_initialize>
c00070f7:	83 c4 10             	add    esp,0x10
c00070fa:	a8 01                	test   al,0x1
c00070fc:	0f 85 b2 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c0007102:	bb 0a 00 00 00       	mov    ebx,0xa
c0007107:	a8 04                	test   al,0x4
c0007109:	0f 85 a5 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c000710f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007112:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007116:	85 c0                	test   eax,eax
c0007118:	75 20                	jne    c000713a <f_mkfs+0x9c>
c000711a:	51                   	push   ecx
c000711b:	8d 44 24 78          	lea    eax,[esp+0x78]
c000711f:	50                   	push   eax
c0007120:	6a 03                	push   0x3
c0007122:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007126:	e8 44 a8 ff ff       	call   c000196f <disk_ioctl>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	85 c0                	test   eax,eax
c0007130:	74 08                	je     c000713a <f_mkfs+0x9c>
c0007132:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000713a:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000713e:	8d 42 ff             	lea    eax,[edx-0x1]
c0007141:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007146:	77 04                	ja     c000714c <f_mkfs+0xae>
c0007148:	85 c2                	test   edx,eax
c000714a:	74 08                	je     c0007154 <f_mkfs+0xb6>
c000714c:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007154:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007157:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000715b:	48                   	dec    eax
c000715c:	3c 01                	cmp    al,0x1
c000715e:	76 05                	jbe    c0007165 <f_mkfs+0xc7>
c0007160:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007165:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007168:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000716c:	48                   	dec    eax
c000716d:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007172:	77 07                	ja     c000717b <f_mkfs+0xdd>
c0007174:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007179:	74 08                	je     c0007183 <f_mkfs+0xe5>
c000717b:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007183:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007186:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000718c:	77 07                	ja     c0007195 <f_mkfs+0xf7>
c000718e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007191:	85 d8                	test   eax,ebx
c0007193:	74 02                	je     c0007197 <f_mkfs+0xf9>
c0007195:	31 db                	xor    ebx,ebx
c0007197:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00071a2:	77 0a                	ja     c00071ae <f_mkfs+0x110>
c00071a4:	bb 11 00 00 00       	mov    ebx,0x11
c00071a9:	e9 06 10 00 00       	jmp    c00081b4 <f_mkfs+0x1116>
c00071ae:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00071b5:	8b 36                	mov    esi,DWORD PTR [esi]
c00071b7:	85 ed                	test   ebp,ebp
c00071b9:	75 1e                	jne    c00071d9 <f_mkfs+0x13b>
c00071bb:	83 ec 0c             	sub    esp,0xc
c00071be:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00071c5:	25 00 fe ff ff       	and    eax,0xfffffe00
c00071ca:	50                   	push   eax
c00071cb:	e8 f1 0f 00 00       	call   c00081c1 <ff_memalloc>
c00071d0:	83 c4 10             	add    esp,0x10
c00071d3:	89 c5                	mov    ebp,eax
c00071d5:	85 c0                	test   eax,eax
c00071d7:	74 cb                	je     c00071a4 <f_mkfs+0x106>
c00071d9:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00071e1:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00071e9:	52                   	push   edx
c00071ea:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00071ee:	50                   	push   eax
c00071ef:	6a 01                	push   0x1
c00071f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071f5:	e8 75 a7 ff ff       	call   c000196f <disk_ioctl>
c00071fa:	83 c4 10             	add    esp,0x10
c00071fd:	85 c0                	test   eax,eax
c00071ff:	0f 85 4a 0f 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007205:	89 f1                	mov    ecx,esi
c0007207:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000720f:	83 e1 0f             	and    ecx,0xf
c0007212:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000721a:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000721e:	83 e6 08             	and    esi,0x8
c0007221:	75 56                	jne    c0007279 <f_mkfs+0x1db>
c0007223:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007227:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000722b:	83 ff 00             	cmp    edi,0x0
c000722e:	76 20                	jbe    c0007250 <f_mkfs+0x1b2>
c0007230:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007235:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000723d:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007243:	83 d7 ff             	adc    edi,0xffffffff
c0007246:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000724a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000724e:	eb 21                	jmp    c0007271 <f_mkfs+0x1d3>
c0007250:	ba 3f 00 00 00       	mov    edx,0x3f
c0007255:	39 f2                	cmp    edx,esi
c0007257:	19 f8                	sbb    eax,edi
c0007259:	73 1e                	jae    c0007279 <f_mkfs+0x1db>
c000725b:	83 c6 c1             	add    esi,0xffffffc1
c000725e:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007266:	83 d7 ff             	adc    edi,0xffffffff
c0007269:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000726d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007271:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007279:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000727d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007281:	89 04 24             	mov    DWORD PTR [esp],eax
c0007284:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007288:	31 c0                	xor    eax,eax
c000728a:	ba 7f 00 00 00       	mov    edx,0x7f
c000728f:	89 c7                	mov    edi,eax
c0007291:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007294:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007298:	0f 83 c5 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c000729e:	89 df                	mov    edi,ebx
c00072a0:	c1 ef 09             	shr    edi,0x9
c00072a3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00072a7:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00072ae:	c1 ef 09             	shr    edi,0x9
c00072b1:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00072b6:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00072ba:	74 29                	je     c00072e5 <f_mkfs+0x247>
c00072bc:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072c2:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00072c7:	0f 97 c2             	seta   dl
c00072ca:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00072cd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00072d1:	0f 92 c0             	setb   al
c00072d4:	08 c2                	or     dl,al
c00072d6:	75 5b                	jne    c0007333 <f_mkfs+0x295>
c00072d8:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00072dc:	83 e0 07             	and    eax,0x7
c00072df:	3c 04                	cmp    al,0x4
c00072e1:	74 50                	je     c0007333 <f_mkfs+0x295>
c00072e3:	eb 1b                	jmp    c0007300 <f_mkfs+0x262>
c00072e5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00072ea:	0f 87 73 0a 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c00072f0:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072f6:	76 08                	jbe    c0007300 <f_mkfs+0x262>
c00072f8:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007300:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007304:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007308:	83 e0 01             	and    eax,0x1
c000730b:	80 e1 02             	and    cl,0x2
c000730e:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007312:	74 0d                	je     c0007321 <f_mkfs+0x283>
c0007314:	84 c0                	test   al,al
c0007316:	0f 84 53 09 00 00    	je     c0007c6f <f_mkfs+0xbd1>
c000731c:	e9 12 08 00 00       	jmp    c0007b33 <f_mkfs+0xa95>
c0007321:	bb 13 00 00 00       	mov    ebx,0x13
c0007326:	84 c0                	test   al,al
c0007328:	0f 85 05 08 00 00    	jne    c0007b33 <f_mkfs+0xa95>
c000732e:	e9 39 0e 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007333:	31 c0                	xor    eax,eax
c0007335:	ba ff 0f 00 00       	mov    edx,0xfff
c000733a:	89 c7                	mov    edi,eax
c000733c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000733f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007343:	0f 83 1a 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007349:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000734f:	77 39                	ja     c000738a <f_mkfs+0x2ec>
c0007351:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007356:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000735e:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007361:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007365:	73 08                	jae    c000736f <f_mkfs+0x2d1>
c0007367:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000736f:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007374:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007377:	b8 00 00 00 00       	mov    eax,0x0
c000737c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007380:	73 08                	jae    c000738a <f_mkfs+0x2ec>
c0007382:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000738a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000738e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007392:	83 c0 20             	add    eax,0x20
c0007395:	83 d2 00             	adc    edx,0x0
c0007398:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000739c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00073a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00073a4:	31 d2                	xor    edx,edx
c00073a6:	31 ff                	xor    edi,edi
c00073a8:	52                   	push   edx
c00073a9:	89 fb                	mov    ebx,edi
c00073ab:	50                   	push   eax
c00073ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b4:	e8 c3 6f 01 00       	call   c001e37c <__udivdi3>
c00073b9:	83 c4 10             	add    esp,0x10
c00073bc:	c1 e0 02             	shl    eax,0x2
c00073bf:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00073c3:	05 07 02 00 00       	add    eax,0x207
c00073c8:	89 f1                	mov    ecx,esi
c00073ca:	c1 e8 09             	shr    eax,0x9
c00073cd:	83 c1 ff             	add    ecx,0xffffffff
c00073d0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00073d4:	83 d3 ff             	adc    ebx,0xffffffff
c00073d7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00073db:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00073df:	31 d2                	xor    edx,edx
c00073e1:	01 c8                	add    eax,ecx
c00073e3:	11 da                	adc    edx,ebx
c00073e5:	89 c1                	mov    ecx,eax
c00073e7:	f7 de                	neg    esi
c00073e9:	89 d0                	mov    eax,edx
c00073eb:	83 d7 00             	adc    edi,0x0
c00073ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00073f2:	f7 df                	neg    edi
c00073f4:	21 f1                	and    ecx,esi
c00073f6:	21 f8                	and    eax,edi
c00073f8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00073fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007400:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007404:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007408:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000740c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000740f:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007413:	0f ac d0 01          	shrd   eax,edx,0x1
c0007417:	89 df                	mov    edi,ebx
c0007419:	d1 ea                	shr    edx,1
c000741b:	39 c1                	cmp    ecx,eax
c000741d:	19 d7                	sbb    edi,edx
c000741f:	0f 83 3e 09 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007429:	31 d2                	xor    edx,edx
c000742b:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000742f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007433:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007437:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000743a:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000743e:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007442:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007446:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000744a:	83 f8 0f             	cmp    eax,0xf
c000744d:	0f 86 10 09 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007453:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000745b:	0f 87 02 09 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007461:	31 d2                	xor    edx,edx
c0007463:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007467:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000746f:	83 c0 07             	add    eax,0x7
c0007472:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000747a:	c1 e8 03             	shr    eax,0x3
c000747d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007484:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000748c:	c1 e0 09             	shl    eax,0x9
c000748f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007493:	48                   	dec    eax
c0007494:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007498:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000749c:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00074a0:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00074a4:	31 d2                	xor    edx,edx
c00074a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00074aa:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00074b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074b5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00074ba:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00074be:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00074c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00074c6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00074ca:	31 ff                	xor    edi,edi
c00074cc:	31 f6                	xor    esi,esi
c00074ce:	31 db                	xor    ebx,ebx
c00074d0:	85 ff                	test   edi,edi
c00074d2:	74 05                	je     c00074d9 <f_mkfs+0x43b>
c00074d4:	4f                   	dec    edi
c00074d5:	74 44                	je     c000751b <f_mkfs+0x47d>
c00074d7:	eb 4f                	jmp    c0007528 <f_mkfs+0x48a>
c00074d9:	83 ec 0c             	sub    esp,0xc
c00074dc:	0f b7 c3             	movzx  eax,bx
c00074df:	50                   	push   eax
c00074e0:	e8 05 0e 00 00       	call   c00082ea <ff_wtoupper>
c00074e5:	83 c4 10             	add    esp,0x10
c00074e8:	89 c1                	mov    ecx,eax
c00074ea:	8d 53 01             	lea    edx,[ebx+0x1]
c00074ed:	66 39 c3             	cmp    bx,ax
c00074f0:	75 3e                	jne    c0007530 <f_mkfs+0x492>
c00074f2:	be 01 00 00 00       	mov    esi,0x1
c00074f7:	89 df                	mov    edi,ebx
c00074f9:	66 01 f7             	add    di,si
c00074fc:	75 07                	jne    c0007505 <f_mkfs+0x467>
c00074fe:	83 fe 7f             	cmp    esi,0x7f
c0007501:	77 31                	ja     c0007534 <f_mkfs+0x496>
c0007503:	eb 16                	jmp    c000751b <f_mkfs+0x47d>
c0007505:	83 ec 0c             	sub    esp,0xc
c0007508:	0f b7 ff             	movzx  edi,di
c000750b:	57                   	push   edi
c000750c:	e8 d9 0d 00 00       	call   c00082ea <ff_wtoupper>
c0007511:	83 c4 10             	add    esp,0x10
c0007514:	39 c7                	cmp    edi,eax
c0007516:	75 e6                	jne    c00074fe <f_mkfs+0x460>
c0007518:	46                   	inc    esi
c0007519:	eb dc                	jmp    c00074f7 <f_mkfs+0x459>
c000751b:	31 c0                	xor    eax,eax
c000751d:	89 d9                	mov    ecx,ebx
c000751f:	4e                   	dec    esi
c0007520:	0f 95 c0             	setne  al
c0007523:	43                   	inc    ebx
c0007524:	89 c7                	mov    edi,eax
c0007526:	eb 14                	jmp    c000753c <f_mkfs+0x49e>
c0007528:	89 f1                	mov    ecx,esi
c000752a:	01 f3                	add    ebx,esi
c000752c:	31 ff                	xor    edi,edi
c000752e:	eb 0c                	jmp    c000753c <f_mkfs+0x49e>
c0007530:	89 d3                	mov    ebx,edx
c0007532:	eb 08                	jmp    c000753c <f_mkfs+0x49e>
c0007534:	bf 02 00 00 00       	mov    edi,0x2
c0007539:	83 c9 ff             	or     ecx,0xffffffff
c000753c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007540:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007543:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007547:	0f b6 c1             	movzx  eax,cl
c000754a:	e8 3a a9 ff ff       	call   c0001e89 <xsum32>
c000754f:	66 c1 e9 08          	shr    cx,0x8
c0007553:	89 c2                	mov    edx,eax
c0007555:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007558:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000755c:	0f b7 c1             	movzx  eax,cx
c000755f:	e8 25 a9 ff ff       	call   c0001e89 <xsum32>
c0007564:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007569:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000756d:	66 85 db             	test   bx,bx
c0007570:	74 1f                	je     c0007591 <f_mkfs+0x4f3>
c0007572:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007575:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000757c:	83 c0 02             	add    eax,0x2
c000757f:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007585:	39 c2                	cmp    edx,eax
c0007587:	74 08                	je     c0007591 <f_mkfs+0x4f3>
c0007589:	89 04 24             	mov    DWORD PTR [esp],eax
c000758c:	e9 3f ff ff ff       	jmp    c00074d0 <f_mkfs+0x432>
c0007591:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007594:	83 ec 0c             	sub    esp,0xc
c0007597:	05 01 02 00 00       	add    eax,0x201
c000759c:	c1 e8 09             	shr    eax,0x9
c000759f:	50                   	push   eax
c00075a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00075a4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075a8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075ac:	55                   	push   ebp
c00075ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075b1:	e8 a3 a3 ff ff       	call   c0001959 <disk_write>
c00075b6:	83 c4 20             	add    esp,0x20
c00075b9:	85 c0                	test   eax,eax
c00075bb:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00075be:	0f 85 8b 0b 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00075c4:	89 d0                	mov    eax,edx
c00075c6:	31 d2                	xor    edx,edx
c00075c8:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00075cc:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00075d0:	66 85 db             	test   bx,bx
c00075d3:	74 04                	je     c00075d9 <f_mkfs+0x53b>
c00075d5:	31 c0                	xor    eax,eax
c00075d7:	eb b0                	jmp    c0007589 <f_mkfs+0x4eb>
c00075d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00075dd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00075e1:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00075e5:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00075eb:	31 d2                	xor    edx,edx
c00075ed:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00075f8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00075fc:	c1 eb 09             	shr    ebx,0x9
c00075ff:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007606:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000760a:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000760e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007612:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007616:	8d 70 01             	lea    esi,[eax+0x1]
c0007619:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000761d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007621:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007628:	31 d2                	xor    edx,edx
c000762a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000762f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007632:	89 c1                	mov    ecx,eax
c0007634:	89 e8                	mov    eax,ebp
c0007636:	e8 e7 a3 ff ff       	call   c0001a22 <mem_set>
c000763b:	31 c0                	xor    eax,eax
c000763d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007640:	76 10                	jbe    c0007652 <f_mkfs+0x5b4>
c0007642:	83 fe 07             	cmp    esi,0x7
c0007645:	76 0b                	jbe    c0007652 <f_mkfs+0x5b4>
c0007647:	40                   	inc    eax
c0007648:	83 ee 08             	sub    esi,0x8
c000764b:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007650:	eb eb                	jmp    c000763d <f_mkfs+0x59f>
c0007652:	b2 01                	mov    dl,0x1
c0007654:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007658:	85 f6                	test   esi,esi
c000765a:	74 0c                	je     c0007668 <f_mkfs+0x5ca>
c000765c:	39 04 24             	cmp    DWORD PTR [esp],eax
c000765f:	76 07                	jbe    c0007668 <f_mkfs+0x5ca>
c0007661:	08 11                	or     BYTE PTR [ecx],dl
c0007663:	4e                   	dec    esi
c0007664:	d1 e2                	shl    edx,1
c0007666:	eb f0                	jmp    c0007658 <f_mkfs+0x5ba>
c0007668:	89 df                	mov    edi,ebx
c000766a:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000766e:	76 04                	jbe    c0007674 <f_mkfs+0x5d6>
c0007670:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007674:	83 ec 0c             	sub    esp,0xc
c0007677:	57                   	push   edi
c0007678:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000767c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007680:	55                   	push   ebp
c0007681:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007685:	e8 cf a2 ff ff       	call   c0001959 <disk_write>
c000768a:	83 c4 20             	add    esp,0x20
c000768d:	85 c0                	test   eax,eax
c000768f:	0f 85 ba 0a 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007695:	31 d2                	xor    edx,edx
c0007697:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000769b:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000769f:	29 fb                	sub    ebx,edi
c00076a1:	0f 85 7a ff ff ff    	jne    c0007621 <f_mkfs+0x583>
c00076a7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00076ab:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00076b3:	31 f6                	xor    esi,esi
c00076b5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00076b9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00076bc:	31 d2                	xor    edx,edx
c00076be:	89 e8                	mov    eax,ebp
c00076c0:	e8 5d a3 ff ff       	call   c0001a22 <mem_set>
c00076c5:	31 c9                	xor    ecx,ecx
c00076c7:	85 db                	test   ebx,ebx
c00076c9:	75 40                	jne    c000770b <f_mkfs+0x66d>
c00076cb:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00076d0:	89 e8                	mov    eax,ebp
c00076d2:	bb 02 00 00 00       	mov    ebx,0x2
c00076d7:	e8 28 a3 ff ff       	call   c0001a04 <st_dword>
c00076dc:	8d 45 04             	lea    eax,[ebp+0x4]
c00076df:	83 ca ff             	or     edx,0xffffffff
c00076e2:	e8 1d a3 ff ff       	call   c0001a04 <st_dword>
c00076e7:	b9 08 00 00 00       	mov    ecx,0x8
c00076ec:	eb 1d                	jmp    c000770b <f_mkfs+0x66d>
c00076ee:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00076f1:	76 3b                	jbe    c000772e <f_mkfs+0x690>
c00076f3:	43                   	inc    ebx
c00076f4:	83 fe 01             	cmp    esi,0x1
c00076f7:	89 da                	mov    edx,ebx
c00076f9:	77 03                	ja     c00076fe <f_mkfs+0x660>
c00076fb:	83 ca ff             	or     edx,0xffffffff
c00076fe:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007702:	4e                   	dec    esi
c0007703:	e8 fc a2 ff ff       	call   c0001a04 <st_dword>
c0007708:	83 c1 04             	add    ecx,0x4
c000770b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000770f:	85 f6                	test   esi,esi
c0007711:	75 db                	jne    c00076ee <f_mkfs+0x650>
c0007713:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007718:	77 14                	ja     c000772e <f_mkfs+0x690>
c000771a:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000771e:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007725:	85 f6                	test   esi,esi
c0007727:	74 05                	je     c000772e <f_mkfs+0x690>
c0007729:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000772c:	77 dd                	ja     c000770b <f_mkfs+0x66d>
c000772e:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007732:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007736:	39 cf                	cmp    edi,ecx
c0007738:	76 02                	jbe    c000773c <f_mkfs+0x69e>
c000773a:	89 cf                	mov    edi,ecx
c000773c:	83 ec 0c             	sub    esp,0xc
c000773f:	57                   	push   edi
c0007740:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007744:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007748:	55                   	push   ebp
c0007749:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000774d:	e8 07 a2 ff ff       	call   c0001959 <disk_write>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	85 c0                	test   eax,eax
c0007757:	0f 85 f2 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c000775d:	31 d2                	xor    edx,edx
c000775f:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007763:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007767:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c000776b:	0f 85 48 ff ff ff    	jne    c00076b9 <f_mkfs+0x61b>
c0007771:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007774:	31 d2                	xor    edx,edx
c0007776:	89 e8                	mov    eax,ebp
c0007778:	31 ff                	xor    edi,edi
c000777a:	e8 a3 a2 ff ff       	call   c0001a22 <mem_set>
c000777f:	8d 45 34             	lea    eax,[ebp+0x34]
c0007782:	ba 02 00 00 00       	mov    edx,0x2
c0007787:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000778b:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000778f:	e8 70 a2 ff ff       	call   c0001a04 <st_dword>
c0007794:	8d 45 38             	lea    eax,[ebp+0x38]
c0007797:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000779b:	e8 64 a2 ff ff       	call   c0001a04 <st_dword>
c00077a0:	8d 45 44             	lea    eax,[ebp+0x44]
c00077a3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077a7:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c00077ab:	e8 54 a2 ff ff       	call   c0001a04 <st_dword>
c00077b0:	8d 45 54             	lea    eax,[ebp+0x54]
c00077b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00077b7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077bb:	83 c2 02             	add    edx,0x2
c00077be:	e8 41 a2 ff ff       	call   c0001a04 <st_dword>
c00077c3:	8d 45 58             	lea    eax,[ebp+0x58]
c00077c6:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00077ca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00077ce:	e8 31 a2 ff ff       	call   c0001a04 <st_dword>
c00077d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077d7:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00077dc:	89 c6                	mov    esi,eax
c00077de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077e2:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00077e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00077e9:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00077ed:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00077f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077f4:	39 cb                	cmp    ebx,ecx
c00077f6:	76 02                	jbe    c00077fa <f_mkfs+0x75c>
c00077f8:	89 cb                	mov    ebx,ecx
c00077fa:	83 ec 0c             	sub    esp,0xc
c00077fd:	53                   	push   ebx
c00077fe:	57                   	push   edi
c00077ff:	56                   	push   esi
c0007800:	55                   	push   ebp
c0007801:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007805:	e8 4f a1 ff ff       	call   c0001959 <disk_write>
c000780a:	83 c4 20             	add    esp,0x20
c000780d:	85 c0                	test   eax,eax
c000780f:	0f 85 3a 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007815:	31 d2                	xor    edx,edx
c0007817:	b9 00 02 00 00       	mov    ecx,0x200
c000781c:	89 e8                	mov    eax,ebp
c000781e:	e8 ff a1 ff ff       	call   c0001a22 <mem_set>
c0007823:	31 d2                	xor    edx,edx
c0007825:	01 de                	add    esi,ebx
c0007827:	11 d7                	adc    edi,edx
c0007829:	29 1c 24             	sub    DWORD PTR [esp],ebx
c000782c:	75 bf                	jne    c00077ed <f_mkfs+0x74f>
c000782e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007832:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007836:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c000783e:	b9 00 02 00 00       	mov    ecx,0x200
c0007843:	31 d2                	xor    edx,edx
c0007845:	89 e8                	mov    eax,ebp
c0007847:	e8 d6 a1 ff ff       	call   c0001a22 <mem_set>
c000784c:	b9 0b 00 00 00       	mov    ecx,0xb
c0007851:	ba c0 f3 01 c0       	mov    edx,0xc001f3c0
c0007856:	89 e8                	mov    eax,ebp
c0007858:	e8 b0 a1 ff ff       	call   c0001a0d <mem_cpy>
c000785d:	8d 45 40             	lea    eax,[ebp+0x40]
c0007860:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007864:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007868:	e8 9a a1 ff ff       	call   c0001a07 <st_qword>
c000786d:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007871:	8d 45 48             	lea    eax,[ebp+0x48]
c0007874:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007878:	e8 8a a1 ff ff       	call   c0001a07 <st_qword>
c000787d:	8d 45 50             	lea    eax,[ebp+0x50]
c0007880:	ba 20 00 00 00       	mov    edx,0x20
c0007885:	e8 7a a1 ff ff       	call   c0001a04 <st_dword>
c000788a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000788e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007892:	e8 6d a1 ff ff       	call   c0001a04 <st_dword>
c0007897:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000789b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000789f:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c00078a3:	e8 5c a1 ff ff       	call   c0001a04 <st_dword>
c00078a8:	8d 45 5c             	lea    eax,[ebp+0x5c]
c00078ab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00078af:	e8 50 a1 ff ff       	call   c0001a04 <st_dword>
c00078b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b8:	8d 50 02             	lea    edx,[eax+0x2]
c00078bb:	8d 45 60             	lea    eax,[ebp+0x60]
c00078be:	e8 41 a1 ff ff       	call   c0001a04 <st_dword>
c00078c3:	8d 45 64             	lea    eax,[ebp+0x64]
c00078c6:	ba 00 00 21 50       	mov    edx,0x50210000
c00078cb:	e8 34 a1 ff ff       	call   c0001a04 <st_dword>
c00078d0:	8d 45 68             	lea    eax,[ebp+0x68]
c00078d3:	ba 00 01 00 00       	mov    edx,0x100
c00078d8:	e8 23 a1 ff ff       	call   c0001a00 <st_word>
c00078dd:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00078e1:	b8 0a 00 00 00       	mov    eax,0xa
c00078e6:	48                   	dec    eax
c00078e7:	74 05                	je     c00078ee <f_mkfs+0x850>
c00078e9:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00078ec:	eb f8                	jmp    c00078e6 <f_mkfs+0x848>
c00078ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078f2:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00078f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00078fa:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00078fe:	74 05                	je     c0007905 <f_mkfs+0x867>
c0007900:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007903:	eb f5                	jmp    c00078fa <f_mkfs+0x85c>
c0007905:	8d 45 78             	lea    eax,[ebp+0x78]
c0007908:	ba eb fe 00 00       	mov    edx,0xfeeb
c000790d:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007913:	31 db                	xor    ebx,ebx
c0007915:	e8 e6 a0 ff ff       	call   c0001a00 <st_word>
c000791a:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007920:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	e8 d3 a0 ff ff       	call   c0001a00 <st_word>
c000792d:	31 c9                	xor    ecx,ecx
c000792f:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007932:	83 f8 01             	cmp    eax,0x1
c0007935:	76 13                	jbe    c000794a <f_mkfs+0x8ac>
c0007937:	83 f9 70             	cmp    ecx,0x70
c000793a:	74 0e                	je     c000794a <f_mkfs+0x8ac>
c000793c:	89 da                	mov    edx,ebx
c000793e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007943:	e8 41 a5 ff ff       	call   c0001e89 <xsum32>
c0007948:	89 c3                	mov    ebx,eax
c000794a:	41                   	inc    ecx
c000794b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007951:	75 dc                	jne    c000792f <f_mkfs+0x891>
c0007953:	89 f0                	mov    eax,esi
c0007955:	89 fa                	mov    edx,edi
c0007957:	83 c0 01             	add    eax,0x1
c000795a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000795e:	83 d2 00             	adc    edx,0x0
c0007961:	83 ec 0c             	sub    esp,0xc
c0007964:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007968:	6a 01                	push   0x1
c000796a:	57                   	push   edi
c000796b:	56                   	push   esi
c000796c:	55                   	push   ebp
c000796d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007971:	e8 e3 9f ff ff       	call   c0001959 <disk_write>
c0007976:	83 c4 20             	add    esp,0x20
c0007979:	85 c0                	test   eax,eax
c000797b:	0f 85 ce 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007981:	31 d2                	xor    edx,edx
c0007983:	b9 00 02 00 00       	mov    ecx,0x200
c0007988:	89 e8                	mov    eax,ebp
c000798a:	e8 93 a0 ff ff       	call   c0001a22 <mem_set>
c000798f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	e8 64 a0 ff ff       	call   c0001a00 <st_word>
c000799c:	89 f0                	mov    eax,esi
c000799e:	89 fa                	mov    edx,edi
c00079a0:	83 c0 09             	add    eax,0x9
c00079a3:	83 d2 00             	adc    edx,0x0
c00079a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00079a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00079ad:	31 c9                	xor    ecx,ecx
c00079af:	41                   	inc    ecx
c00079b0:	89 da                	mov    edx,ebx
c00079b2:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c00079b7:	e8 cd a4 ff ff       	call   c0001e89 <xsum32>
c00079bc:	89 c3                	mov    ebx,eax
c00079be:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c4:	75 e9                	jne    c00079af <f_mkfs+0x911>
c00079c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00079ce:	83 c0 01             	add    eax,0x1
c00079d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00079d5:	83 d2 00             	adc    edx,0x0
c00079d8:	83 ec 0c             	sub    esp,0xc
c00079db:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00079df:	6a 01                	push   0x1
c00079e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e9:	55                   	push   ebp
c00079ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079ee:	e8 66 9f ff ff       	call   c0001959 <disk_write>
c00079f3:	83 c4 20             	add    esp,0x20
c00079f6:	85 c0                	test   eax,eax
c00079f8:	0f 85 51 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00079fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a02:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a06:	75 09                	jne    c0007a11 <f_mkfs+0x973>
c0007a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a0f:	74 12                	je     c0007a23 <f_mkfs+0x985>
c0007a11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a15:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a21:	eb 8a                	jmp    c00079ad <f_mkfs+0x90f>
c0007a23:	31 d2                	xor    edx,edx
c0007a25:	b9 00 02 00 00       	mov    ecx,0x200
c0007a2a:	89 e8                	mov    eax,ebp
c0007a2c:	e8 f1 9f ff ff       	call   c0001a22 <mem_set>
c0007a31:	83 c6 0b             	add    esi,0xb
c0007a34:	83 d7 00             	adc    edi,0x0
c0007a37:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007a3b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007a3f:	31 c9                	xor    ecx,ecx
c0007a41:	41                   	inc    ecx
c0007a42:	89 da                	mov    edx,ebx
c0007a44:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a49:	e8 3b a4 ff ff       	call   c0001e89 <xsum32>
c0007a4e:	89 c3                	mov    ebx,eax
c0007a50:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a56:	75 e9                	jne    c0007a41 <f_mkfs+0x9a3>
c0007a58:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007a5b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007a5f:	83 c6 01             	add    esi,0x1
c0007a62:	83 d7 00             	adc    edi,0x0
c0007a65:	83 ec 0c             	sub    esp,0xc
c0007a68:	6a 01                	push   0x1
c0007a6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a72:	55                   	push   ebp
c0007a73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a77:	e8 dd 9e ff ff       	call   c0001959 <disk_write>
c0007a7c:	83 c4 20             	add    esp,0x20
c0007a7f:	85 c0                	test   eax,eax
c0007a81:	0f 85 c8 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007a87:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007a8b:	75 06                	jne    c0007a93 <f_mkfs+0x9f5>
c0007a8d:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007a91:	74 09                	je     c0007a9c <f_mkfs+0x9fe>
c0007a93:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a96:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007a9a:	eb a3                	jmp    c0007a3f <f_mkfs+0x9a1>
c0007a9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aa0:	89 da                	mov    edx,ebx
c0007aa2:	01 e8                	add    eax,ebp
c0007aa4:	e8 5b 9f ff ff       	call   c0001a04 <st_dword>
c0007aa9:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007aae:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007ab6:	75 e4                	jne    c0007a9c <f_mkfs+0x9fe>
c0007ab8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007abb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007abf:	83 c6 02             	add    esi,0x2
c0007ac2:	83 d7 00             	adc    edi,0x0
c0007ac5:	83 ec 0c             	sub    esp,0xc
c0007ac8:	6a 01                	push   0x1
c0007aca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ace:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ad2:	55                   	push   ebp
c0007ad3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad7:	e8 7d 9e ff ff       	call   c0001959 <disk_write>
c0007adc:	83 c4 20             	add    esp,0x20
c0007adf:	85 c0                	test   eax,eax
c0007ae1:	0f 85 68 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ae7:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007aec:	74 0d                	je     c0007afb <f_mkfs+0xa5d>
c0007aee:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007af6:	e9 43 fd ff ff       	jmp    c000783e <f_mkfs+0x7a0>
c0007afb:	b1 07                	mov    cl,0x7
c0007afd:	e9 e3 05 00 00       	jmp    c00080e5 <f_mkfs+0x1047>
c0007b02:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b07:	0f 85 4f 02 00 00    	jne    c0007d5c <f_mkfs+0xcbe>
c0007b0d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b12:	0f 86 22 02 00 00    	jbe    c0007d3a <f_mkfs+0xc9c>
c0007b18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b1d:	0f 85 81 06 00 00    	jne    c00081a4 <f_mkfs+0x1106>
c0007b23:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b2a:	83 f8 40             	cmp    eax,0x40
c0007b2d:	0f 87 51 06 00 00    	ja     c0008184 <f_mkfs+0x10e6>
c0007b33:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007b37:	85 ff                	test   edi,edi
c0007b39:	75 1c                	jne    c0007b57 <f_mkfs+0xab9>
c0007b3b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b3e:	ba c0 f2 01 c0       	mov    edx,0xc001f2c0
c0007b43:	c1 e9 0c             	shr    ecx,0xc
c0007b46:	bf 01 00 00 00       	mov    edi,0x1
c0007b4b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007b4e:	66 85 c0             	test   ax,ax
c0007b51:	0f 85 95 01 00 00    	jne    c0007cec <f_mkfs+0xc4e>
c0007b57:	31 d2                	xor    edx,edx
c0007b59:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007b5c:	f7 f7                	div    edi
c0007b5e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007b63:	0f 86 95 01 00 00    	jbe    c0007cfe <f_mkfs+0xc60>
c0007b69:	83 c0 02             	add    eax,0x2
c0007b6c:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007b71:	01 c0                	add    eax,eax
c0007b73:	05 ff 01 00 00       	add    eax,0x1ff
c0007b78:	be 01 00 00 00       	mov    esi,0x1
c0007b7d:	c1 e8 09             	shr    eax,0x9
c0007b80:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007b84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b88:	c1 e0 05             	shl    eax,0x5
c0007b8b:	c1 e8 09             	shr    eax,0x9
c0007b8e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007b92:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007b97:	31 d2                	xor    edx,edx
c0007b99:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b9d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007ba1:	89 f0                	mov    eax,esi
c0007ba3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007ba7:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007bab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007baf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007bb3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007bb7:	31 d2                	xor    edx,edx
c0007bb9:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007bbe:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007bc2:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007bc6:	31 db                	xor    ebx,ebx
c0007bc8:	01 c8                	add    eax,ecx
c0007bca:	11 da                	adc    edx,ebx
c0007bcc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007bd0:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007bd4:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007bd8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007bdc:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007be0:	f7 da                	neg    edx
c0007be2:	21 d1                	and    ecx,edx
c0007be4:	29 d9                	sub    ecx,ebx
c0007be6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007beb:	0f 85 20 01 00 00    	jne    c0007d11 <f_mkfs+0xc73>
c0007bf1:	31 db                	xor    ebx,ebx
c0007bf3:	01 ce                	add    esi,ecx
c0007bf5:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007bf9:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007bfd:	31 d2                	xor    edx,edx
c0007bff:	89 f8                	mov    eax,edi
c0007c01:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c05:	c1 e0 04             	shl    eax,0x4
c0007c08:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c0c:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c10:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c14:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c18:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c1b:	19 d3                	sbb    ebx,edx
c0007c1d:	0f 82 40 01 00 00    	jb     c0007d63 <f_mkfs+0xcc5>
c0007c23:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c26:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c2a:	89 c8                	mov    eax,ecx
c0007c2c:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007c31:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007c35:	29 f0                	sub    eax,esi
c0007c37:	29 d0                	sub    eax,edx
c0007c39:	31 d2                	xor    edx,edx
c0007c3b:	f7 f7                	div    edi
c0007c3d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c42:	89 c3                	mov    ebx,eax
c0007c44:	0f 85 b8 fe ff ff    	jne    c0007b02 <f_mkfs+0xa64>
c0007c4a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007c4f:	0f 87 1d 01 00 00    	ja     c0007d72 <f_mkfs+0xcd4>
c0007c55:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c5a:	0f 85 03 01 00 00    	jne    c0007d63 <f_mkfs+0xcc5>
c0007c60:	83 ff 01             	cmp    edi,0x1
c0007c63:	0f 86 fa 00 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007c69:	d1 ef                	shr    edi,1
c0007c6b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007c6f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c73:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c76:	85 db                	test   ebx,ebx
c0007c78:	75 2d                	jne    c0007ca7 <f_mkfs+0xc09>
c0007c7a:	89 cb                	mov    ebx,ecx
c0007c7c:	ba d0 f2 01 c0       	mov    edx,0xc001f2d0
c0007c81:	c1 eb 11             	shr    ebx,0x11
c0007c84:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007c8c:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c8f:	66 85 c0             	test   ax,ax
c0007c92:	74 11                	je     c0007ca5 <f_mkfs+0xc07>
c0007c94:	83 c2 02             	add    edx,0x2
c0007c97:	39 d8                	cmp    eax,ebx
c0007c99:	77 0a                	ja     c0007ca5 <f_mkfs+0xc07>
c0007c9b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007c9f:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007ca3:	eb e7                	jmp    c0007c8c <f_mkfs+0xbee>
c0007ca5:	31 db                	xor    ebx,ebx
c0007ca7:	31 d2                	xor    edx,edx
c0007ca9:	89 c8                	mov    eax,ecx
c0007cab:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007caf:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007cb6:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007cbb:	c1 ea 09             	shr    edx,0x9
c0007cbe:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007cc3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007cc7:	0f 87 96 00 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007ccd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cd1:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007cd9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007cdd:	be 20 00 00 00       	mov    esi,0x20
c0007ce2:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007ce7:	e9 a6 fe ff ff       	jmp    c0007b92 <f_mkfs+0xaf4>
c0007cec:	83 c2 02             	add    edx,0x2
c0007cef:	39 c8                	cmp    eax,ecx
c0007cf1:	0f 87 60 fe ff ff    	ja     c0007b57 <f_mkfs+0xab9>
c0007cf7:	01 ff                	add    edi,edi
c0007cf9:	e9 4d fe ff ff       	jmp    c0007b4b <f_mkfs+0xaad>
c0007cfe:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d01:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d06:	40                   	inc    eax
c0007d07:	d1 e8                	shr    eax,1
c0007d09:	83 c0 03             	add    eax,0x3
c0007d0c:	e9 62 fe ff ff       	jmp    c0007b73 <f_mkfs+0xad5>
c0007d11:	31 d2                	xor    edx,edx
c0007d13:	89 c8                	mov    eax,ecx
c0007d15:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d19:	85 d2                	test   edx,edx
c0007d1b:	74 0c                	je     c0007d29 <f_mkfs+0xc8b>
c0007d1d:	49                   	dec    ecx
c0007d1e:	46                   	inc    esi
c0007d1f:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d24:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d29:	89 c8                	mov    eax,ecx
c0007d2b:	31 d2                	xor    edx,edx
c0007d2d:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d31:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007d35:	e9 c3 fe ff ff       	jmp    c0007bfd <f_mkfs+0xb5f>
c0007d3a:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d3f:	77 31                	ja     c0007d72 <f_mkfs+0xcd4>
c0007d41:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d46:	75 1b                	jne    c0007d63 <f_mkfs+0xcc5>
c0007d48:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d4f:	3d 80 00 00 00       	cmp    eax,0x80
c0007d54:	0f 86 d9 fd ff ff    	jbe    c0007b33 <f_mkfs+0xa95>
c0007d5a:	eb 07                	jmp    c0007d63 <f_mkfs+0xcc5>
c0007d5c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d61:	76 0a                	jbe    c0007d6d <f_mkfs+0xccf>
c0007d63:	bb 0e 00 00 00       	mov    ebx,0xe
c0007d68:	e9 ff 03 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007d6d:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d72:	31 d2                	xor    edx,edx
c0007d74:	b9 00 02 00 00       	mov    ecx,0x200
c0007d79:	89 e8                	mov    eax,ebp
c0007d7b:	e8 a2 9c ff ff       	call   c0001a22 <mem_set>
c0007d80:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d85:	ba e2 f3 01 c0       	mov    edx,0xc001f3e2
c0007d8a:	89 e8                	mov    eax,ebp
c0007d8c:	e8 7c 9c ff ff       	call   c0001a0d <mem_cpy>
c0007d91:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007d94:	ba 00 02 00 00       	mov    edx,0x200
c0007d99:	e8 62 9c ff ff       	call   c0001a00 <st_word>
c0007d9e:	89 f8                	mov    eax,edi
c0007da0:	0f b7 d6             	movzx  edx,si
c0007da3:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007da6:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007da9:	e8 52 9c ff ff       	call   c0001a00 <st_word>
c0007dae:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007db2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007db7:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007dba:	75 08                	jne    c0007dc4 <f_mkfs+0xd26>
c0007dbc:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007dc4:	8d 45 11             	lea    eax,[ebp+0x11]
c0007dc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007dcb:	e8 30 9c ff ff       	call   c0001a00 <st_word>
c0007dd0:	b8 ff ff 00 00       	mov    eax,0xffff
c0007dd5:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007dd9:	39 d0                	cmp    eax,edx
c0007ddb:	b8 00 00 00 00       	mov    eax,0x0
c0007de0:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007de4:	72 0a                	jb     c0007df0 <f_mkfs+0xd52>
c0007de6:	8d 45 13             	lea    eax,[ebp+0x13]
c0007de9:	e8 12 9c ff ff       	call   c0001a00 <st_word>
c0007dee:	eb 08                	jmp    c0007df8 <f_mkfs+0xd5a>
c0007df0:	8d 45 20             	lea    eax,[ebp+0x20]
c0007df3:	e8 0c 9c ff ff       	call   c0001a04 <st_dword>
c0007df8:	8d 45 18             	lea    eax,[ebp+0x18]
c0007dfb:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e00:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e04:	e8 f7 9b ff ff       	call   c0001a00 <st_word>
c0007e09:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e0c:	ba ff 00 00 00       	mov    edx,0xff
c0007e11:	e8 ea 9b ff ff       	call   c0001a00 <st_word>
c0007e16:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e1d:	e8 e2 9b ff ff       	call   c0001a04 <st_dword>
c0007e22:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e27:	75 57                	jne    c0007e80 <f_mkfs+0xde2>
c0007e29:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e31:	e8 ce 9b ff ff       	call   c0001a04 <st_dword>
c0007e36:	8d 45 24             	lea    eax,[ebp+0x24]
c0007e39:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007e3d:	e8 c2 9b ff ff       	call   c0001a04 <st_dword>
c0007e42:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007e45:	ba 02 00 00 00       	mov    edx,0x2
c0007e4a:	e8 b5 9b ff ff       	call   c0001a04 <st_dword>
c0007e4f:	8d 45 30             	lea    eax,[ebp+0x30]
c0007e52:	ba 01 00 00 00       	mov    edx,0x1
c0007e57:	e8 a4 9b ff ff       	call   c0001a00 <st_word>
c0007e5c:	8d 45 32             	lea    eax,[ebp+0x32]
c0007e5f:	ba 06 00 00 00       	mov    edx,0x6
c0007e64:	e8 97 9b ff ff       	call   c0001a00 <st_word>
c0007e69:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007e6d:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007e71:	8d 45 47             	lea    eax,[ebp+0x47]
c0007e74:	b9 13 00 00 00       	mov    ecx,0x13
c0007e79:	ba ee f3 01 c0       	mov    edx,0xc001f3ee
c0007e7e:	eb 2f                	jmp    c0007eaf <f_mkfs+0xe11>
c0007e80:	8d 45 27             	lea    eax,[ebp+0x27]
c0007e83:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e88:	e8 77 9b ff ff       	call   c0001a04 <st_dword>
c0007e8d:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007e92:	8d 45 16             	lea    eax,[ebp+0x16]
c0007e95:	e8 66 9b ff ff       	call   c0001a00 <st_word>
c0007e9a:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007e9e:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007ea2:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007ea5:	b9 13 00 00 00       	mov    ecx,0x13
c0007eaa:	ba 02 f4 01 c0       	mov    edx,0xc001f402
c0007eaf:	e8 59 9b ff ff       	call   c0001a0d <mem_cpy>
c0007eb4:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007eba:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007ebf:	89 f0                	mov    eax,esi
c0007ec1:	e8 3a 9b ff ff       	call   c0001a00 <st_word>
c0007ec6:	83 ec 0c             	sub    esp,0xc
c0007ec9:	6a 01                	push   0x1
c0007ecb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ecf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ed3:	55                   	push   ebp
c0007ed4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ed8:	e8 7c 9a ff ff       	call   c0001959 <disk_write>
c0007edd:	83 c4 20             	add    esp,0x20
c0007ee0:	85 c0                	test   eax,eax
c0007ee2:	0f 85 67 02 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ee8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eed:	0f 85 b7 00 00 00    	jne    c0007faa <f_mkfs+0xf0c>
c0007ef3:	83 ec 0c             	sub    esp,0xc
c0007ef6:	6a 01                	push   0x1
c0007ef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007efc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f00:	83 c0 06             	add    eax,0x6
c0007f03:	83 d2 00             	adc    edx,0x0
c0007f06:	52                   	push   edx
c0007f07:	50                   	push   eax
c0007f08:	55                   	push   ebp
c0007f09:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f0d:	e8 47 9a ff ff       	call   c0001959 <disk_write>
c0007f12:	83 c4 20             	add    esp,0x20
c0007f15:	b9 00 02 00 00       	mov    ecx,0x200
c0007f1a:	31 d2                	xor    edx,edx
c0007f1c:	89 e8                	mov    eax,ebp
c0007f1e:	e8 ff 9a ff ff       	call   c0001a22 <mem_set>
c0007f23:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f28:	89 e8                	mov    eax,ebp
c0007f2a:	e8 d5 9a ff ff       	call   c0001a04 <st_dword>
c0007f2f:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007f35:	ba 72 72 41 61       	mov    edx,0x61417272
c0007f3a:	e8 c5 9a ff ff       	call   c0001a04 <st_dword>
c0007f3f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007f42:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007f48:	e8 b7 9a ff ff       	call   c0001a04 <st_dword>
c0007f4d:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007f53:	ba 02 00 00 00       	mov    edx,0x2
c0007f58:	e8 a7 9a ff ff       	call   c0001a04 <st_dword>
c0007f5d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f62:	89 f0                	mov    eax,esi
c0007f64:	e8 97 9a ff ff       	call   c0001a00 <st_word>
c0007f69:	83 ec 0c             	sub    esp,0xc
c0007f6c:	6a 01                	push   0x1
c0007f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f76:	83 c0 07             	add    eax,0x7
c0007f79:	83 d2 00             	adc    edx,0x0
c0007f7c:	52                   	push   edx
c0007f7d:	50                   	push   eax
c0007f7e:	55                   	push   ebp
c0007f7f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f83:	e8 d1 99 ff ff       	call   c0001959 <disk_write>
c0007f88:	83 c4 14             	add    esp,0x14
c0007f8b:	6a 01                	push   0x1
c0007f8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f91:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f95:	83 c0 01             	add    eax,0x1
c0007f98:	83 d2 00             	adc    edx,0x0
c0007f9b:	52                   	push   edx
c0007f9c:	50                   	push   eax
c0007f9d:	55                   	push   ebp
c0007f9e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa2:	e8 b2 99 ff ff       	call   c0001959 <disk_write>
c0007fa7:	83 c4 20             	add    esp,0x20
c0007faa:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0007fb1:	31 d2                	xor    edx,edx
c0007fb3:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0007fb9:	31 db                	xor    ebx,ebx
c0007fbb:	89 e8                	mov    eax,ebp
c0007fbd:	e8 60 9a ff ff       	call   c0001a22 <mem_set>
c0007fc2:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0007fc7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007fce:	0f 94 c3             	sete   bl
c0007fd1:	4b                   	dec    ebx
c0007fd2:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0007fd8:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0007fde:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fe3:	75 21                	jne    c0008006 <f_mkfs+0xf68>
c0007fe5:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007fea:	89 e8                	mov    eax,ebp
c0007fec:	e8 13 9a ff ff       	call   c0001a04 <st_dword>
c0007ff1:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ff4:	83 ca ff             	or     edx,0xffffffff
c0007ff7:	e8 08 9a ff ff       	call   c0001a04 <st_dword>
c0007ffc:	8d 45 08             	lea    eax,[ebp+0x8]
c0007fff:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008004:	eb 04                	jmp    c000800a <f_mkfs+0xf6c>
c0008006:	89 da                	mov    edx,ebx
c0008008:	89 e8                	mov    eax,ebp
c000800a:	e8 f5 99 ff ff       	call   c0001a04 <st_dword>
c000800f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008013:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008017:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000801b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000801f:	39 ce                	cmp    esi,ecx
c0008021:	76 02                	jbe    c0008025 <f_mkfs+0xf87>
c0008023:	89 ce                	mov    esi,ecx
c0008025:	83 ec 0c             	sub    esp,0xc
c0008028:	56                   	push   esi
c0008029:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000802d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008031:	55                   	push   ebp
c0008032:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008036:	e8 1e 99 ff ff       	call   c0001959 <disk_write>
c000803b:	83 c4 20             	add    esp,0x20
c000803e:	85 c0                	test   eax,eax
c0008040:	0f 85 09 01 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0008046:	31 d2                	xor    edx,edx
c0008048:	b9 00 02 00 00       	mov    ecx,0x200
c000804d:	89 e8                	mov    eax,ebp
c000804f:	e8 ce 99 ff ff       	call   c0001a22 <mem_set>
c0008054:	31 d2                	xor    edx,edx
c0008056:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000805a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000805e:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008062:	75 b3                	jne    c0008017 <f_mkfs+0xf79>
c0008064:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008067:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000806e:	40                   	inc    eax
c000806f:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008073:	0f 87 65 ff ff ff    	ja     c0007fde <f_mkfs+0xf40>
c0008079:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000807e:	74 04                	je     c0008084 <f_mkfs+0xfe6>
c0008080:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008084:	89 fb                	mov    ebx,edi
c0008086:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000808a:	76 04                	jbe    c0008090 <f_mkfs+0xff2>
c000808c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008090:	83 ec 0c             	sub    esp,0xc
c0008093:	53                   	push   ebx
c0008094:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008098:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000809c:	55                   	push   ebp
c000809d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a1:	e8 b3 98 ff ff       	call   c0001959 <disk_write>
c00080a6:	83 c4 20             	add    esp,0x20
c00080a9:	85 c0                	test   eax,eax
c00080ab:	0f 85 9e 00 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00080b1:	31 d2                	xor    edx,edx
c00080b3:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00080b7:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080bb:	29 df                	sub    edi,ebx
c00080bd:	75 c5                	jne    c0008084 <f_mkfs+0xfe6>
c00080bf:	b1 0c                	mov    cl,0xc
c00080c1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c6:	74 1d                	je     c00080e5 <f_mkfs+0x1047>
c00080c8:	b8 ff ff 00 00       	mov    eax,0xffff
c00080cd:	b1 06                	mov    cl,0x6
c00080cf:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00080d3:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00080d7:	72 0c                	jb     c00080e5 <f_mkfs+0x1047>
c00080d9:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00080de:	0f 94 c1             	sete   cl
c00080e1:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00080e5:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00080ea:	75 4c                	jne    c0008138 <f_mkfs+0x109a>
c00080ec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00080f0:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00080f4:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00080fb:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008102:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000810d:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008118:	0f b6 c9             	movzx  ecx,cl
c000811b:	83 ec 0c             	sub    esp,0xc
c000811e:	55                   	push   ebp
c000811f:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000812a:	e8 2f c2 ff ff       	call   c000435e <create_partition>
c000812f:	83 c4 10             	add    esp,0x10
c0008132:	89 c3                	mov    ebx,eax
c0008134:	85 c0                	test   eax,eax
c0008136:	75 34                	jne    c000816c <f_mkfs+0x10ce>
c0008138:	31 db                	xor    ebx,ebx
c000813a:	50                   	push   eax
c000813b:	6a 00                	push   0x0
c000813d:	6a 00                	push   0x0
c000813f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008143:	e8 27 98 ff ff       	call   c000196f <disk_ioctl>
c0008148:	83 c4 10             	add    esp,0x10
c000814b:	85 c0                	test   eax,eax
c000814d:	74 1d                	je     c000816c <f_mkfs+0x10ce>
c000814f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008157:	75 0c                	jne    c0008165 <f_mkfs+0x10c7>
c0008159:	83 ec 0c             	sub    esp,0xc
c000815c:	55                   	push   ebp
c000815d:	e8 75 00 00 00       	call   c00081d7 <ff_memfree>
c0008162:	83 c4 10             	add    esp,0x10
c0008165:	bb 01 00 00 00       	mov    ebx,0x1
c000816a:	eb 48                	jmp    c00081b4 <f_mkfs+0x1116>
c000816c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008174:	75 3e                	jne    c00081b4 <f_mkfs+0x1116>
c0008176:	83 ec 0c             	sub    esp,0xc
c0008179:	55                   	push   ebp
c000817a:	e8 58 00 00 00       	call   c00081d7 <ff_memfree>
c000817f:	83 c4 10             	add    esp,0x10
c0008182:	eb 30                	jmp    c00081b4 <f_mkfs+0x1116>
c0008184:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008189:	0f 85 eb fa ff ff    	jne    c0007c7a <f_mkfs+0xbdc>
c000818f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008193:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008199:	0f 86 b8 f9 ff ff    	jbe    c0007b57 <f_mkfs+0xab9>
c000819f:	e9 bf fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081a4:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081a9:	0f 85 c0 fa ff ff    	jne    c0007c6f <f_mkfs+0xbd1>
c00081af:	e9 af fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081b4:	81 c4 9c 00 00 00    	add    esp,0x9c
c00081ba:	89 d8                	mov    eax,ebx
c00081bc:	5b                   	pop    ebx
c00081bd:	5e                   	pop    esi
c00081be:	5f                   	pop    edi
c00081bf:	5d                   	pop    ebp
c00081c0:	c3                   	ret    

c00081c1 <ff_memalloc>:
c00081c1:	83 ec 0c             	sub    esp,0xc
c00081c4:	83 ec 0c             	sub    esp,0xc
c00081c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081cb:	e8 4e 3a 00 00       	call   c000bc1e <malloc>
c00081d0:	83 c4 10             	add    esp,0x10
c00081d3:	83 c4 0c             	add    esp,0xc
c00081d6:	c3                   	ret    

c00081d7 <ff_memfree>:
c00081d7:	83 ec 0c             	sub    esp,0xc
c00081da:	83 ec 0c             	sub    esp,0xc
c00081dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081e1:	e8 48 3a 00 00       	call   c000bc2e <free>
c00081e6:	83 c4 10             	add    esp,0x10
c00081e9:	90                   	nop
c00081ea:	83 c4 0c             	add    esp,0xc
c00081ed:	c3                   	ret    

c00081ee <ff_uni2oem>:
c00081ee:	83 ec 14             	sub    esp,0x14
c00081f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081f5:	66 89 04 24          	mov    WORD PTR [esp],ax
c00081f9:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008200:	c7 44 24 0c 20 f7 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f720
c0008208:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000820d:	77 0b                	ja     c000821a <ff_uni2oem+0x2c>
c000820f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008213:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008218:	eb 5b                	jmp    c0008275 <ff_uni2oem+0x87>
c000821a:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008222:	77 51                	ja     c0008275 <ff_uni2oem+0x87>
c0008224:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000822a:	75 49                	jne    c0008275 <ff_uni2oem+0x87>
c000822c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008233:	eb 0b                	jmp    c0008240 <ff_uni2oem+0x52>
c0008235:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000823a:	40                   	inc    eax
c000823b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008240:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008246:	77 1b                	ja     c0008263 <ff_uni2oem+0x75>
c0008248:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000824d:	01 c0                	add    eax,eax
c000824f:	89 c2                	mov    edx,eax
c0008251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008255:	01 d0                	add    eax,edx
c0008257:	66 8b 00             	mov    ax,WORD PTR [eax]
c000825a:	0f b7 c0             	movzx  eax,ax
c000825d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008261:	75 d2                	jne    c0008235 <ff_uni2oem+0x47>
c0008263:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008268:	83 e8 80             	sub    eax,0xffffff80
c000826b:	25 ff 00 00 00       	and    eax,0xff
c0008270:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008275:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000827a:	83 c4 14             	add    esp,0x14
c000827d:	c3                   	ret    

c000827e <ff_oem2uni>:
c000827e:	83 ec 18             	sub    esp,0x18
c0008281:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008289:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000828e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008292:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008299:	c7 44 24 10 20 f7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f720
c00082a1:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00082a7:	77 0b                	ja     c00082b4 <ff_oem2uni+0x36>
c00082a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ad:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082b2:	eb 2d                	jmp    c00082e1 <ff_oem2uni+0x63>
c00082b4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ba:	75 25                	jne    c00082e1 <ff_oem2uni+0x63>
c00082bc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00082c3:	77 1c                	ja     c00082e1 <ff_oem2uni+0x63>
c00082c5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00082ca:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00082cf:	01 c0                	add    eax,eax
c00082d1:	89 c2                	mov    edx,eax
c00082d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00082d7:	01 d0                	add    eax,edx
c00082d9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082e1:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00082e6:	83 c4 18             	add    esp,0x18
c00082e9:	c3                   	ret    

c00082ea <ff_wtoupper>:
c00082ea:	83 ec 10             	sub    esp,0x10
c00082ed:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00082f5:	0f 87 3e 01 00 00    	ja     c0008439 <ff_wtoupper+0x14f>
c00082fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00082ff:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008304:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000830b:	77 07                	ja     c0008314 <ff_wtoupper+0x2a>
c000830d:	b8 20 f5 01 c0       	mov    eax,0xc001f520
c0008312:	eb 05                	jmp    c0008319 <ff_wtoupper+0x2f>
c0008314:	b8 60 f4 01 c0       	mov    eax,0xc001f460
c0008319:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000831d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008321:	8d 50 02             	lea    edx,[eax+0x2]
c0008324:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008328:	66 8b 00             	mov    ax,WORD PTR [eax]
c000832b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008330:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008336:	0f 84 f4 00 00 00    	je     c0008430 <ff_wtoupper+0x146>
c000833c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008341:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008346:	0f 82 e4 00 00 00    	jb     c0008430 <ff_wtoupper+0x146>
c000834c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008350:	8d 50 02             	lea    edx,[eax+0x2]
c0008353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008357:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000835f:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008364:	66 c1 e8 08          	shr    ax,0x8
c0008368:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000836d:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008374:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008379:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000837e:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008383:	01 ca                	add    edx,ecx
c0008385:	39 d0                	cmp    eax,edx
c0008387:	0f 8d 86 00 00 00    	jge    c0008413 <ff_wtoupper+0x129>
c000838d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008392:	83 f8 08             	cmp    eax,0x8
c0008395:	0f 87 94 00 00 00    	ja     c000842f <ff_wtoupper+0x145>
c000839b:	8b 04 85 20 f4 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0be0]
c00083a2:	ff e0                	jmp    eax
c00083a4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00083a9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00083ae:	29 c2                	sub    edx,eax
c00083b0:	89 d0                	mov    eax,edx
c00083b2:	01 c0                	add    eax,eax
c00083b4:	89 c2                	mov    edx,eax
c00083b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083ba:	01 d0                	add    eax,edx
c00083bc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083bf:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083c4:	eb 4b                	jmp    c0008411 <ff_wtoupper+0x127>
c00083c6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083cb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00083cf:	83 e0 01             	and    eax,0x1
c00083d2:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00083d7:	eb 38                	jmp    c0008411 <ff_wtoupper+0x127>
c00083d9:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00083df:	eb 30                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e1:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00083e7:	eb 28                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e9:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00083ef:	eb 20                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f1:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00083f7:	eb 18                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f9:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00083ff:	eb 10                	jmp    c0008411 <ff_wtoupper+0x127>
c0008401:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008407:	eb 08                	jmp    c0008411 <ff_wtoupper+0x127>
c0008409:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008410:	90                   	nop
c0008411:	eb 1c                	jmp    c000842f <ff_wtoupper+0x145>
c0008413:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008419:	0f 85 fe fe ff ff    	jne    c000831d <ff_wtoupper+0x33>
c000841f:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008424:	01 c0                	add    eax,eax
c0008426:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000842a:	e9 ee fe ff ff       	jmp    c000831d <ff_wtoupper+0x33>
c000842f:	90                   	nop
c0008430:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008435:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008439:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	c3                   	ret    

c0008441 <is_bad_src_ratio>:
c0008441:	83 ec 0c             	sub    esp,0xc
c0008444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008448:	89 04 24             	mov    DWORD PTR [esp],eax
c000844b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000844f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008453:	dd 04 24             	fld    QWORD PTR [esp]
c0008456:	dd 05 e0 fc 01 c0    	fld    QWORD PTR ds:0xc001fce0
c000845c:	de d9                	fcompp 
c000845e:	df e0                	fnstsw ax
c0008460:	f6 c4 45             	test   ah,0x45
c0008463:	74 10                	je     c0008475 <is_bad_src_ratio+0x34>
c0008465:	dd 04 24             	fld    QWORD PTR [esp]
c0008468:	dc 1d e8 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fce8
c000846e:	df e0                	fnstsw ax
c0008470:	f6 c4 45             	test   ah,0x45
c0008473:	75 07                	jne    c000847c <is_bad_src_ratio+0x3b>
c0008475:	b8 01 00 00 00       	mov    eax,0x1
c000847a:	eb 05                	jmp    c0008481 <is_bad_src_ratio+0x40>
c000847c:	b8 00 00 00 00       	mov    eax,0x0
c0008481:	83 c4 0c             	add    esp,0xc
c0008484:	c3                   	ret    

c0008485 <psrc_set_converter>:
c0008485:	56                   	push   esi
c0008486:	89 d6                	mov    esi,edx
c0008488:	53                   	push   ebx
c0008489:	89 c3                	mov    ebx,eax
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	52                   	push   edx
c000848f:	50                   	push   eax
c0008490:	e8 33 24 00 00       	call   c000a8c8 <sinc_set_converter>
c0008495:	83 c4 10             	add    esp,0x10
c0008498:	85 c0                	test   eax,eax
c000849a:	74 25                	je     c00084c1 <psrc_set_converter+0x3c>
c000849c:	50                   	push   eax
c000849d:	50                   	push   eax
c000849e:	56                   	push   esi
c000849f:	53                   	push   ebx
c00084a0:	e8 32 28 00 00       	call   c000acd7 <zoh_set_converter>
c00084a5:	83 c4 10             	add    esp,0x10
c00084a8:	85 c0                	test   eax,eax
c00084aa:	74 15                	je     c00084c1 <psrc_set_converter+0x3c>
c00084ac:	51                   	push   ecx
c00084ad:	51                   	push   ecx
c00084ae:	56                   	push   esi
c00084af:	53                   	push   ebx
c00084b0:	e8 10 0a 00 00       	call   c0008ec5 <linear_set_converter>
c00084b5:	83 c4 10             	add    esp,0x10
c00084b8:	ba 0a 00 00 00       	mov    edx,0xa
c00084bd:	85 c0                	test   eax,eax
c00084bf:	75 02                	jne    c00084c3 <psrc_set_converter+0x3e>
c00084c1:	31 d2                	xor    edx,edx
c00084c3:	89 d0                	mov    eax,edx
c00084c5:	5a                   	pop    edx
c00084c6:	5b                   	pop    ebx
c00084c7:	5e                   	pop    esi
c00084c8:	c3                   	ret    

c00084c9 <src_delete>:
c00084c9:	53                   	push   ebx
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084d1:	85 db                	test   ebx,ebx
c00084d3:	74 29                	je     c00084fe <src_delete+0x35>
c00084d5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00084d8:	85 c0                	test   eax,eax
c00084da:	74 0c                	je     c00084e8 <src_delete+0x1f>
c00084dc:	83 ec 0c             	sub    esp,0xc
c00084df:	50                   	push   eax
c00084e0:	e8 49 37 00 00       	call   c000bc2e <free>
c00084e5:	83 c4 10             	add    esp,0x10
c00084e8:	50                   	push   eax
c00084e9:	6a 3c                	push   0x3c
c00084eb:	6a 00                	push   0x0
c00084ed:	53                   	push   ebx
c00084ee:	e8 15 81 ff ff       	call   c0000608 <memset>
c00084f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00084f6:	e8 33 37 00 00       	call   c000bc2e <free>
c00084fb:	83 c4 10             	add    esp,0x10
c00084fe:	31 c0                	xor    eax,eax
c0008500:	83 c4 08             	add    esp,0x8
c0008503:	5b                   	pop    ebx
c0008504:	c3                   	ret    

c0008505 <src_process>:
c0008505:	56                   	push   esi
c0008506:	53                   	push   ebx
c0008507:	53                   	push   ebx
c0008508:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000850c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008510:	85 f6                	test   esi,esi
c0008512:	0f 84 e2 00 00 00    	je     c00085fa <src_process+0xf5>
c0008518:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000851c:	0f 84 df 00 00 00    	je     c0008601 <src_process+0xfc>
c0008522:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008526:	0f 84 d5 00 00 00    	je     c0008601 <src_process+0xfc>
c000852c:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008533:	0f 85 cf 00 00 00    	jne    c0008608 <src_process+0x103>
c0008539:	85 db                	test   ebx,ebx
c000853b:	0f 84 ce 00 00 00    	je     c000860f <src_process+0x10a>
c0008541:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008544:	0f 84 cc 00 00 00    	je     c0008616 <src_process+0x111>
c000854a:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000854e:	0f 84 c2 00 00 00    	je     c0008616 <src_process+0x111>
c0008554:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008557:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000855a:	e8 e2 fe ff ff       	call   c0008441 <is_bad_src_ratio>
c000855f:	5a                   	pop    edx
c0008560:	85 c0                	test   eax,eax
c0008562:	59                   	pop    ecx
c0008563:	0f 85 b4 00 00 00    	jne    c000861d <src_process+0x118>
c0008569:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000856d:	79 07                	jns    c0008576 <src_process+0x71>
c000856f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008576:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000857a:	79 07                	jns    c0008583 <src_process+0x7e>
c000857c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008583:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008585:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008588:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000858b:	39 ca                	cmp    edx,ecx
c000858d:	73 0b                	jae    c000859a <src_process+0x95>
c000858f:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008593:	8d 04 82             	lea    eax,[edx+eax*4]
c0008596:	39 c1                	cmp    ecx,eax
c0008598:	eb 09                	jmp    c00085a3 <src_process+0x9e>
c000859a:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c000859e:	8d 04 81             	lea    eax,[ecx+eax*4]
c00085a1:	39 c2                	cmp    edx,eax
c00085a3:	72 7f                	jb     c0008624 <src_process+0x11f>
c00085a5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00085ac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085b3:	d9 05 00 fd 01 c0    	fld    DWORD PTR ds:0xc001fd00
c00085b9:	dc 1e                	fcomp  QWORD PTR [esi]
c00085bb:	df e0                	fnstsw ax
c00085bd:	9e                   	sahf   
c00085be:	76 05                	jbe    c00085c5 <src_process+0xc0>
c00085c0:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00085c3:	dd 1e                	fstp   QWORD PTR [esi]
c00085c5:	83 ec 10             	sub    esp,0x10
c00085c8:	dd 06                	fld    QWORD PTR [esi]
c00085ca:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00085cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00085d0:	e8 cb 5f 01 00       	call   c001e5a0 <fabs>
c00085d5:	83 c4 10             	add    esp,0x10
c00085d8:	dd 05 f0 fc 01 c0    	fld    QWORD PTR ds:0xc001fcf0
c00085de:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00085e2:	de d9                	fcompp 
c00085e4:	df e0                	fnstsw ax
c00085e6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00085ea:	9e                   	sahf   
c00085eb:	76 05                	jbe    c00085f2 <src_process+0xed>
c00085ed:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00085f0:	eb 03                	jmp    c00085f5 <src_process+0xf0>
c00085f2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00085f5:	59                   	pop    ecx
c00085f6:	5b                   	pop    ebx
c00085f7:	5e                   	pop    esi
c00085f8:	ff e0                	jmp    eax
c00085fa:	b8 02 00 00 00       	mov    eax,0x2
c00085ff:	eb 28                	jmp    c0008629 <src_process+0x124>
c0008601:	b8 07 00 00 00       	mov    eax,0x7
c0008606:	eb 21                	jmp    c0008629 <src_process+0x124>
c0008608:	b8 12 00 00 00       	mov    eax,0x12
c000860d:	eb 1a                	jmp    c0008629 <src_process+0x124>
c000860f:	b8 03 00 00 00       	mov    eax,0x3
c0008614:	eb 13                	jmp    c0008629 <src_process+0x124>
c0008616:	b8 04 00 00 00       	mov    eax,0x4
c000861b:	eb 0c                	jmp    c0008629 <src_process+0x124>
c000861d:	b8 06 00 00 00       	mov    eax,0x6
c0008622:	eb 05                	jmp    c0008629 <src_process+0x124>
c0008624:	b8 10 00 00 00       	mov    eax,0x10
c0008629:	5a                   	pop    edx
c000862a:	5b                   	pop    ebx
c000862b:	5e                   	pop    esi
c000862c:	c3                   	ret    

c000862d <src_callback_read>:
c000862d:	55                   	push   ebp
c000862e:	57                   	push   edi
c000862f:	56                   	push   esi
c0008630:	53                   	push   ebx
c0008631:	83 ec 4c             	sub    esp,0x4c
c0008634:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008638:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c000863c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0008640:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008644:	85 ff                	test   edi,edi
c0008646:	0f 8e 36 01 00 00    	jle    c0008782 <src_callback_read+0x155>
c000864c:	85 db                	test   ebx,ebx
c000864e:	0f 84 2e 01 00 00    	je     c0008782 <src_callback_read+0x155>
c0008654:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000865b:	74 0c                	je     c0008669 <src_callback_read+0x3c>
c000865d:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008664:	e9 19 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c0008669:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000866d:	75 0c                	jne    c000867b <src_callback_read+0x4e>
c000866f:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008676:	e9 07 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c000867b:	51                   	push   ecx
c000867c:	6a 24                	push   0x24
c000867e:	6a 00                	push   0x0
c0008680:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008684:	50                   	push   eax
c0008685:	e8 7e 7f ff ff       	call   c0000608 <memset>
c000868a:	5e                   	pop    esi
c000868b:	5d                   	pop    ebp
c000868c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008694:	e8 a8 fd ff ff       	call   c0008441 <is_bad_src_ratio>
c0008699:	83 c4 10             	add    esp,0x10
c000869c:	85 c0                	test   eax,eax
c000869e:	74 0c                	je     c00086ac <src_callback_read+0x7f>
c00086a0:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00086a7:	e9 d6 00 00 00       	jmp    c0008782 <src_callback_read+0x155>
c00086ac:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00086b0:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00086b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086b8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00086bc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00086bf:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00086c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00086c7:	31 f6                	xor    esi,esi
c00086c9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00086cc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00086d0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00086d5:	75 30                	jne    c0008707 <src_callback_read+0xda>
c00086d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00086db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086df:	52                   	push   edx
c00086e0:	52                   	push   edx
c00086e1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00086e5:	50                   	push   eax
c00086e6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086e9:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00086ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00086f0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00086f8:	83 c4 10             	add    esp,0x10
c00086fb:	85 c0                	test   eax,eax
c00086fd:	75 08                	jne    c0008707 <src_callback_read+0xda>
c00086ff:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008707:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c000870e:	50                   	push   eax
c000870f:	50                   	push   eax
c0008710:	8d 44 24 24          	lea    eax,[esp+0x24]
c0008714:	50                   	push   eax
c0008715:	53                   	push   ebx
c0008716:	e8 ea fd ff ff       	call   c0008505 <src_process>
c000871b:	83 c4 10             	add    esp,0x10
c000871e:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008725:	85 c0                	test   eax,eax
c0008727:	75 42                	jne    c000876b <src_callback_read+0x13e>
c0008729:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000872d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008730:	89 e9                	mov    ecx,ebp
c0008732:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008736:	0f af ca             	imul   ecx,edx
c0008739:	c1 e1 02             	shl    ecx,0x2
c000873c:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0008740:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008744:	0f af d1             	imul   edx,ecx
c0008747:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c000874b:	c1 e2 02             	shl    edx,0x2
c000874e:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008752:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008755:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000875a:	75 04                	jne    c0008760 <src_callback_read+0x133>
c000875c:	85 c9                	test   ecx,ecx
c000875e:	74 0b                	je     c000876b <src_callback_read+0x13e>
c0008760:	39 d7                	cmp    edi,edx
c0008762:	7e 09                	jle    c000876d <src_callback_read+0x140>
c0008764:	89 d6                	mov    esi,edx
c0008766:	e9 65 ff ff ff       	jmp    c00086d0 <src_callback_read+0xa3>
c000876b:	89 f2                	mov    edx,esi
c000876d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008771:	85 c0                	test   eax,eax
c0008773:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008776:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000877a:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000877d:	74 05                	je     c0008784 <src_callback_read+0x157>
c000877f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008782:	31 d2                	xor    edx,edx
c0008784:	83 c4 4c             	add    esp,0x4c
c0008787:	89 d0                	mov    eax,edx
c0008789:	5b                   	pop    ebx
c000878a:	5e                   	pop    esi
c000878b:	5f                   	pop    edi
c000878c:	5d                   	pop    ebp
c000878d:	c3                   	ret    

c000878e <src_set_ratio>:
c000878e:	53                   	push   ebx
c000878f:	b8 02 00 00 00       	mov    eax,0x2
c0008794:	83 ec 08             	sub    esp,0x8
c0008797:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000879b:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c000879f:	85 db                	test   ebx,ebx
c00087a1:	74 33                	je     c00087d6 <src_set_ratio+0x48>
c00087a3:	b8 07 00 00 00       	mov    eax,0x7
c00087a8:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00087ac:	74 2c                	je     c00087da <src_set_ratio+0x4c>
c00087ae:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00087b2:	74 2a                	je     c00087de <src_set_ratio+0x50>
c00087b4:	50                   	push   eax
c00087b5:	50                   	push   eax
c00087b6:	dd 14 24             	fst    QWORD PTR [esp]
c00087b9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00087bd:	e8 7f fc ff ff       	call   c0008441 <is_bad_src_ratio>
c00087c2:	5a                   	pop    edx
c00087c3:	85 c0                	test   eax,eax
c00087c5:	59                   	pop    ecx
c00087c6:	75 07                	jne    c00087cf <src_set_ratio+0x41>
c00087c8:	dd 04 24             	fld    QWORD PTR [esp]
c00087cb:	dd 1b                	fstp   QWORD PTR [ebx]
c00087cd:	eb 11                	jmp    c00087e0 <src_set_ratio+0x52>
c00087cf:	b8 06 00 00 00       	mov    eax,0x6
c00087d4:	eb 0a                	jmp    c00087e0 <src_set_ratio+0x52>
c00087d6:	dd d8                	fstp   st(0)
c00087d8:	eb 06                	jmp    c00087e0 <src_set_ratio+0x52>
c00087da:	dd d8                	fstp   st(0)
c00087dc:	eb 02                	jmp    c00087e0 <src_set_ratio+0x52>
c00087de:	dd d8                	fstp   st(0)
c00087e0:	83 c4 08             	add    esp,0x8
c00087e3:	5b                   	pop    ebx
c00087e4:	c3                   	ret    

c00087e5 <src_get_channels>:
c00087e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00087e9:	b8 02 00 00 00       	mov    eax,0x2
c00087ee:	85 d2                	test   edx,edx
c00087f0:	74 14                	je     c0008806 <src_get_channels+0x21>
c00087f2:	b8 07 00 00 00       	mov    eax,0x7
c00087f7:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00087fb:	74 09                	je     c0008806 <src_get_channels+0x21>
c00087fd:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008801:	74 03                	je     c0008806 <src_get_channels+0x21>
c0008803:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008806:	c3                   	ret    

c0008807 <src_reset>:
c0008807:	53                   	push   ebx
c0008808:	b8 02 00 00 00       	mov    eax,0x2
c000880d:	83 ec 08             	sub    esp,0x8
c0008810:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008814:	85 db                	test   ebx,ebx
c0008816:	74 2e                	je     c0008846 <src_reset+0x3f>
c0008818:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000881b:	85 c0                	test   eax,eax
c000881d:	74 09                	je     c0008828 <src_reset+0x21>
c000881f:	83 ec 0c             	sub    esp,0xc
c0008822:	53                   	push   ebx
c0008823:	ff d0                	call   eax
c0008825:	83 c4 10             	add    esp,0x10
c0008828:	d9 ee                	fldz   
c000882a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008831:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008834:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000883b:	dd 1b                	fstp   QWORD PTR [ebx]
c000883d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008844:	31 c0                	xor    eax,eax
c0008846:	83 c4 08             	add    esp,0x8
c0008849:	5b                   	pop    ebx
c000884a:	c3                   	ret    

c000884b <src_new>:
c000884b:	57                   	push   edi
c000884c:	56                   	push   esi
c000884d:	53                   	push   ebx
c000884e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008852:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008856:	85 f6                	test   esi,esi
c0008858:	74 73                	je     c00088cd <src_new+0x82>
c000885a:	85 ff                	test   edi,edi
c000885c:	7f 08                	jg     c0008866 <src_new+0x1b>
c000885e:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008864:	eb 1e                	jmp    c0008884 <src_new+0x39>
c0008866:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c000886c:	50                   	push   eax
c000886d:	50                   	push   eax
c000886e:	6a 3c                	push   0x3c
c0008870:	6a 01                	push   0x1
c0008872:	e8 d7 33 00 00       	call   c000bc4e <calloc>
c0008877:	83 c4 10             	add    esp,0x10
c000887a:	89 c3                	mov    ebx,eax
c000887c:	85 c0                	test   eax,eax
c000887e:	75 10                	jne    c0008890 <src_new+0x45>
c0008880:	85 f6                	test   esi,esi
c0008882:	75 04                	jne    c0008888 <src_new+0x3d>
c0008884:	31 db                	xor    ebx,ebx
c0008886:	eb 4b                	jmp    c00088d3 <src_new+0x88>
c0008888:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c000888e:	eb 43                	jmp    c00088d3 <src_new+0x88>
c0008890:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008893:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000889a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000889e:	e8 e2 fb ff ff       	call   c0008485 <psrc_set_converter>
c00088a3:	85 c0                	test   eax,eax
c00088a5:	74 18                	je     c00088bf <src_new+0x74>
c00088a7:	85 f6                	test   esi,esi
c00088a9:	74 06                	je     c00088b1 <src_new+0x66>
c00088ab:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00088b1:	83 ec 0c             	sub    esp,0xc
c00088b4:	53                   	push   ebx
c00088b5:	31 db                	xor    ebx,ebx
c00088b7:	e8 72 33 00 00       	call   c000bc2e <free>
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	83 ec 0c             	sub    esp,0xc
c00088c2:	53                   	push   ebx
c00088c3:	e8 3f ff ff ff       	call   c0008807 <src_reset>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	eb 06                	jmp    c00088d3 <src_new+0x88>
c00088cd:	85 ff                	test   edi,edi
c00088cf:	7f 9b                	jg     c000886c <src_new+0x21>
c00088d1:	eb b1                	jmp    c0008884 <src_new+0x39>
c00088d3:	89 d8                	mov    eax,ebx
c00088d5:	5b                   	pop    ebx
c00088d6:	5e                   	pop    esi
c00088d7:	5f                   	pop    edi
c00088d8:	c3                   	ret    

c00088d9 <src_callback_new>:
c00088d9:	56                   	push   esi
c00088da:	53                   	push   ebx
c00088db:	53                   	push   ebx
c00088dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088e4:	85 f6                	test   esi,esi
c00088e6:	75 0e                	jne    c00088f6 <src_callback_new+0x1d>
c00088e8:	31 db                	xor    ebx,ebx
c00088ea:	85 c0                	test   eax,eax
c00088ec:	74 47                	je     c0008935 <src_callback_new+0x5c>
c00088ee:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00088f4:	eb 3f                	jmp    c0008935 <src_callback_new+0x5c>
c00088f6:	85 c0                	test   eax,eax
c00088f8:	74 06                	je     c0008900 <src_callback_new+0x27>
c00088fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008900:	51                   	push   ecx
c0008901:	50                   	push   eax
c0008902:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008906:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000890a:	e8 3c ff ff ff       	call   c000884b <src_new>
c000890f:	83 c4 10             	add    esp,0x10
c0008912:	89 c3                	mov    ebx,eax
c0008914:	85 c0                	test   eax,eax
c0008916:	74 1d                	je     c0008935 <src_callback_new+0x5c>
c0008918:	83 ec 0c             	sub    esp,0xc
c000891b:	50                   	push   eax
c000891c:	e8 e6 fe ff ff       	call   c0008807 <src_reset>
c0008921:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008925:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c000892c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000892f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008932:	83 c4 10             	add    esp,0x10
c0008935:	89 d8                	mov    eax,ebx
c0008937:	5a                   	pop    edx
c0008938:	5b                   	pop    ebx
c0008939:	5e                   	pop    esi
c000893a:	c3                   	ret    

c000893b <src_get_name>:
c000893b:	53                   	push   ebx
c000893c:	83 ec 14             	sub    esp,0x14
c000893f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008943:	53                   	push   ebx
c0008944:	e8 59 1f 00 00       	call   c000a8a2 <sinc_get_name>
c0008949:	83 c4 10             	add    esp,0x10
c000894c:	85 c0                	test   eax,eax
c000894e:	75 1d                	jne    c000896d <src_get_name+0x32>
c0008950:	83 ec 0c             	sub    esp,0xc
c0008953:	53                   	push   ebx
c0008954:	e8 60 23 00 00       	call   c000acb9 <zoh_get_name>
c0008959:	83 c4 10             	add    esp,0x10
c000895c:	85 c0                	test   eax,eax
c000895e:	75 0d                	jne    c000896d <src_get_name+0x32>
c0008960:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008964:	83 c4 08             	add    esp,0x8
c0008967:	5b                   	pop    ebx
c0008968:	e9 3a 05 00 00       	jmp    c0008ea7 <linear_get_name>
c000896d:	83 c4 08             	add    esp,0x8
c0008970:	5b                   	pop    ebx
c0008971:	c3                   	ret    

c0008972 <src_get_description>:
c0008972:	53                   	push   ebx
c0008973:	83 ec 14             	sub    esp,0x14
c0008976:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000897a:	53                   	push   ebx
c000897b:	e8 35 1f 00 00       	call   c000a8b5 <sinc_get_description>
c0008980:	83 c4 10             	add    esp,0x10
c0008983:	85 c0                	test   eax,eax
c0008985:	75 1d                	jne    c00089a4 <src_get_description+0x32>
c0008987:	83 ec 0c             	sub    esp,0xc
c000898a:	53                   	push   ebx
c000898b:	e8 38 23 00 00       	call   c000acc8 <zoh_get_description>
c0008990:	83 c4 10             	add    esp,0x10
c0008993:	85 c0                	test   eax,eax
c0008995:	75 0d                	jne    c00089a4 <src_get_description+0x32>
c0008997:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000899b:	83 c4 08             	add    esp,0x8
c000899e:	5b                   	pop    ebx
c000899f:	e9 12 05 00 00       	jmp    c0008eb6 <linear_get_description>
c00089a4:	83 c4 08             	add    esp,0x8
c00089a7:	5b                   	pop    ebx
c00089a8:	c3                   	ret    

c00089a9 <src_get_version>:
c00089a9:	b8 20 f8 01 c0       	mov    eax,0xc001f820
c00089ae:	c3                   	ret    

c00089af <src_is_valid_ratio>:
c00089af:	50                   	push   eax
c00089b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b8:	e8 84 fa ff ff       	call   c0008441 <is_bad_src_ratio>
c00089bd:	85 c0                	test   eax,eax
c00089bf:	0f 94 c0             	sete   al
c00089c2:	83 c4 0c             	add    esp,0xc
c00089c5:	0f b6 c0             	movzx  eax,al
c00089c8:	c3                   	ret    

c00089c9 <src_error>:
c00089c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089cd:	31 c0                	xor    eax,eax
c00089cf:	85 d2                	test   edx,edx
c00089d1:	74 03                	je     c00089d6 <src_error+0xd>
c00089d3:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00089d6:	c3                   	ret    

c00089d7 <src_strerror>:
c00089d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089db:	31 c0                	xor    eax,eax
c00089dd:	83 fa 17             	cmp    edx,0x17
c00089e0:	77 07                	ja     c00089e9 <src_strerror+0x12>
c00089e2:	8b 04 95 80 fc 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0380]
c00089e9:	c3                   	ret    

c00089ea <src_simple>:
c00089ea:	56                   	push   esi
c00089eb:	53                   	push   ebx
c00089ec:	83 ec 18             	sub    esp,0x18
c00089ef:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089f3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089f7:	50                   	push   eax
c00089f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00089fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a00:	e8 46 fe ff ff       	call   c000884b <src_new>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	85 c0                	test   eax,eax
c0008a0a:	75 06                	jne    c0008a12 <src_simple+0x28>
c0008a0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a10:	eb 25                	jmp    c0008a37 <src_simple+0x4d>
c0008a12:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008a19:	89 c3                	mov    ebx,eax
c0008a1b:	50                   	push   eax
c0008a1c:	50                   	push   eax
c0008a1d:	56                   	push   esi
c0008a1e:	53                   	push   ebx
c0008a1f:	e8 e1 fa ff ff       	call   c0008505 <src_process>
c0008a24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008a27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a2b:	e8 99 fa ff ff       	call   c00084c9 <src_delete>
c0008a30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a34:	83 c4 10             	add    esp,0x10
c0008a37:	83 c4 14             	add    esp,0x14
c0008a3a:	5b                   	pop    ebx
c0008a3b:	5e                   	pop    esi
c0008a3c:	c3                   	ret    

c0008a3d <src_short_to_float_array>:
c0008a3d:	83 ec 0c             	sub    esp,0xc
c0008a40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008a44:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008a4c:	85 c0                	test   eax,eax
c0008a4e:	74 0f                	je     c0008a5f <src_short_to_float_array+0x22>
c0008a50:	48                   	dec    eax
c0008a51:	d9 05 04 fd 01 c0    	fld    DWORD PTR ds:0xc001fd04
c0008a57:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008a5a:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008a5d:	eb ed                	jmp    c0008a4c <src_short_to_float_array+0xf>
c0008a5f:	83 c4 0c             	add    esp,0xc
c0008a62:	c3                   	ret    

c0008a63 <src_float_to_short_array>:
c0008a63:	56                   	push   esi
c0008a64:	53                   	push   ebx
c0008a65:	52                   	push   edx
c0008a66:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a6a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008a6e:	85 db                	test   ebx,ebx
c0008a70:	74 51                	je     c0008ac3 <src_float_to_short_array+0x60>
c0008a72:	4b                   	dec    ebx
c0008a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a77:	d9 05 08 fd 01 c0    	fld    DWORD PTR ds:0xc001fd08
c0008a7d:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008a80:	dc 15 f8 fc 01 c0    	fcom   QWORD PTR ds:0xc001fcf8
c0008a86:	df e0                	fnstsw ax
c0008a88:	9e                   	sahf   
c0008a89:	72 0a                	jb     c0008a95 <src_float_to_short_array+0x32>
c0008a8b:	dd d8                	fstp   st(0)
c0008a8d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008a93:	eb d9                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008a95:	d9 05 0c fd 01 c0    	fld    DWORD PTR ds:0xc001fd0c
c0008a9b:	d8 d9                	fcomp  st(1)
c0008a9d:	df e0                	fnstsw ax
c0008a9f:	9e                   	sahf   
c0008aa0:	72 0a                	jb     c0008aac <src_float_to_short_array+0x49>
c0008aa2:	dd d8                	fstp   st(0)
c0008aa4:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008aaa:	eb c2                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008aac:	83 ec 10             	sub    esp,0x10
c0008aaf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008ab2:	e8 09 5b 01 00       	call   c001e5c0 <lrint>
c0008ab7:	83 c4 10             	add    esp,0x10
c0008aba:	c1 f8 10             	sar    eax,0x10
c0008abd:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ac1:	eb ab                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008ac3:	58                   	pop    eax
c0008ac4:	5b                   	pop    ebx
c0008ac5:	5e                   	pop    esi
c0008ac6:	c3                   	ret    

c0008ac7 <src_int_to_float_array>:
c0008ac7:	83 ec 0c             	sub    esp,0xc
c0008aca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ace:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ad2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ad6:	85 c0                	test   eax,eax
c0008ad8:	74 0f                	je     c0008ae9 <src_int_to_float_array+0x22>
c0008ada:	48                   	dec    eax
c0008adb:	d9 05 10 fd 01 c0    	fld    DWORD PTR ds:0xc001fd10
c0008ae1:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008ae4:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008ae7:	eb ed                	jmp    c0008ad6 <src_int_to_float_array+0xf>
c0008ae9:	83 c4 0c             	add    esp,0xc
c0008aec:	c3                   	ret    

c0008aed <src_float_to_int_array>:
c0008aed:	56                   	push   esi
c0008aee:	53                   	push   ebx
c0008aef:	52                   	push   edx
c0008af0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008af4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008af8:	85 db                	test   ebx,ebx
c0008afa:	74 4f                	je     c0008b4b <src_float_to_int_array+0x5e>
c0008afc:	4b                   	dec    ebx
c0008afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b01:	d9 05 08 fd 01 c0    	fld    DWORD PTR ds:0xc001fd08
c0008b07:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b0a:	dc 15 f8 fc 01 c0    	fcom   QWORD PTR ds:0xc001fcf8
c0008b10:	df e0                	fnstsw ax
c0008b12:	9e                   	sahf   
c0008b13:	72 0b                	jb     c0008b20 <src_float_to_int_array+0x33>
c0008b15:	dd d8                	fstp   st(0)
c0008b17:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008b1e:	eb d8                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b20:	d9 05 0c fd 01 c0    	fld    DWORD PTR ds:0xc001fd0c
c0008b26:	d8 d9                	fcomp  st(1)
c0008b28:	df e0                	fnstsw ax
c0008b2a:	9e                   	sahf   
c0008b2b:	72 0b                	jb     c0008b38 <src_float_to_int_array+0x4b>
c0008b2d:	dd d8                	fstp   st(0)
c0008b2f:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008b36:	eb c0                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b38:	83 ec 10             	sub    esp,0x10
c0008b3b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b3e:	e8 7d 5a 01 00       	call   c001e5c0 <lrint>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008b49:	eb ad                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b4b:	58                   	pop    eax
c0008b4c:	5b                   	pop    ebx
c0008b4d:	5e                   	pop    esi
c0008b4e:	c3                   	ret    

c0008b4f <is_bad_src_ratio>:
c0008b4f:	83 ec 0c             	sub    esp,0xc
c0008b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b56:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008b61:	dd 04 24             	fld    QWORD PTR [esp]
c0008b64:	dd 05 e0 fc 01 c0    	fld    QWORD PTR ds:0xc001fce0
c0008b6a:	de d9                	fcompp 
c0008b6c:	df e0                	fnstsw ax
c0008b6e:	f6 c4 45             	test   ah,0x45
c0008b71:	74 10                	je     c0008b83 <is_bad_src_ratio+0x34>
c0008b73:	dd 04 24             	fld    QWORD PTR [esp]
c0008b76:	dc 1d e8 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fce8
c0008b7c:	df e0                	fnstsw ax
c0008b7e:	f6 c4 45             	test   ah,0x45
c0008b81:	75 07                	jne    c0008b8a <is_bad_src_ratio+0x3b>
c0008b83:	b8 01 00 00 00       	mov    eax,0x1
c0008b88:	eb 05                	jmp    c0008b8f <is_bad_src_ratio+0x40>
c0008b8a:	b8 00 00 00 00       	mov    eax,0x0
c0008b8f:	83 c4 0c             	add    esp,0xc
c0008b92:	c3                   	ret    

c0008b93 <fmod_one>:
c0008b93:	83 ec 2c             	sub    esp,0x2c
c0008b96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008ba2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ba6:	83 ec 08             	sub    esp,0x8
c0008ba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb1:	e8 0a 5a 01 00       	call   c001e5c0 <lrint>
c0008bb6:	83 c4 10             	add    esp,0x10
c0008bb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bbd:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008bc1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008bc5:	de e1                	fsubrp st(1),st
c0008bc7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008bcb:	d9 ee                	fldz   
c0008bcd:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008bd1:	df e0                	fnstsw ax
c0008bd3:	f6 c4 45             	test   ah,0x45
c0008bd6:	75 0a                	jne    c0008be2 <fmod_one+0x4f>
c0008bd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008bdc:	d9 e8                	fld1   
c0008bde:	de c1                	faddp  st(1),st
c0008be0:	eb 04                	jmp    c0008be6 <fmod_one+0x53>
c0008be2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008be6:	83 c4 2c             	add    esp,0x2c
c0008be9:	c3                   	ret    

c0008bea <linear_vari_process>:
c0008bea:	55                   	push   ebp
c0008beb:	57                   	push   edi
c0008bec:	56                   	push   esi
c0008bed:	53                   	push   ebx
c0008bee:	83 ec 2c             	sub    esp,0x2c
c0008bf1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008bf5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008bf9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c01:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008c05:	0f 8e 5e 02 00 00    	jle    c0008e69 <linear_vari_process+0x27f>
c0008c0b:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008c0e:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008c16:	85 db                	test   ebx,ebx
c0008c18:	0f 84 4b 02 00 00    	je     c0008e69 <linear_vari_process+0x27f>
c0008c1e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008c21:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008c25:	74 19                	je     c0008c40 <linear_vari_process+0x56>
c0008c27:	31 d2                	xor    edx,edx
c0008c29:	39 c2                	cmp    edx,eax
c0008c2b:	7d 0c                	jge    c0008c39 <linear_vari_process+0x4f>
c0008c2d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008c2f:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008c32:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008c36:	42                   	inc    edx
c0008c37:	eb f0                	jmp    c0008c29 <linear_vari_process+0x3f>
c0008c39:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008c40:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008c43:	0f af d0             	imul   edx,eax
c0008c46:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008c49:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008c4d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008c54:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008c5e:	dd 07                	fld    QWORD PTR [edi]
c0008c60:	dd 14 24             	fst    QWORD PTR [esp]
c0008c63:	50                   	push   eax
c0008c64:	50                   	push   eax
c0008c65:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008c68:	e8 e2 fe ff ff       	call   c0008b4f <is_bad_src_ratio>
c0008c6d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008c71:	5a                   	pop    edx
c0008c72:	59                   	pop    ecx
c0008c73:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008c78:	0f 85 e3 01 00 00    	jne    c0008e61 <linear_vari_process+0x277>
c0008c7e:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008c81:	d9 e8                	fld1   
c0008c83:	d8 d1                	fcom   st(1)
c0008c85:	df e0                	fnstsw ax
c0008c87:	9e                   	sahf   
c0008c88:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008c8c:	0f 86 99 00 00 00    	jbe    c0008d2b <linear_vari_process+0x141>
c0008c92:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c95:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008c98:	0f 8d 8d 00 00 00    	jge    c0008d2b <linear_vari_process+0x141>
c0008c9e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008ca2:	d8 c1                	fadd   st,st(1)
c0008ca4:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008ca7:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008caa:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008cad:	df e0                	fnstsw ax
c0008caf:	9e                   	sahf   
c0008cb0:	73 79                	jae    c0008d2b <linear_vari_process+0x141>
c0008cb2:	85 d2                	test   edx,edx
c0008cb4:	7e 38                	jle    c0008cee <linear_vari_process+0x104>
c0008cb6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008cba:	83 ec 10             	sub    esp,0x10
c0008cbd:	dd 07                	fld    QWORD PTR [edi]
c0008cbf:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cc5:	e8 d6 58 01 00       	call   c001e5a0 <fabs>
c0008cca:	83 c4 10             	add    esp,0x10
c0008ccd:	dc 1d 58 fd 01 c0    	fcomp  QWORD PTR ds:0xc001fd58
c0008cd3:	df e0                	fnstsw ax
c0008cd5:	9e                   	sahf   
c0008cd6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008cda:	76 12                	jbe    c0008cee <linear_vari_process+0x104>
c0008cdc:	dd 07                	fld    QWORD PTR [edi]
c0008cde:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008ce1:	d8 e1                	fsub   st,st(1)
c0008ce3:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008ce6:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008ce9:	de c1                	faddp  st(1),st
c0008ceb:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cee:	31 c0                	xor    eax,eax
c0008cf0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008cf3:	7e 1f                	jle    c0008d14 <linear_vari_process+0x12a>
c0008cf5:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008cf9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008cfb:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008cfe:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d02:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008d05:	d8 e1                	fsub   st,st(1)
c0008d07:	40                   	inc    eax
c0008d08:	d8 ca                	fmul   st,st(2)
c0008d0a:	de c1                	faddp  st(1),st
c0008d0c:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008d0f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008d12:	eb dc                	jmp    c0008cf0 <linear_vari_process+0x106>
c0008d14:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d18:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d1b:	de c1                	faddp  st(1),st
c0008d1d:	e9 5f ff ff ff       	jmp    c0008c81 <linear_vari_process+0x97>
c0008d22:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d26:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d29:	de c1                	faddp  st(1),st
c0008d2b:	83 ec 10             	sub    esp,0x10
c0008d2e:	dd 14 24             	fst    QWORD PTR [esp]
c0008d31:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d35:	e8 59 fe ff ff       	call   c0008b93 <fmod_one>
c0008d3a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008d3d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008d41:	d8 e1                	fsub   st,st(1)
c0008d43:	d9 c9                	fxch   st(1)
c0008d45:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d49:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d4c:	e8 6f 58 01 00       	call   c001e5c0 <lrint>
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	0f af e8             	imul   ebp,eax
c0008d57:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d5b:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008d5e:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008d61:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008d64:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008d67:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008d6a:	0f 8d 97 00 00 00    	jge    c0008e07 <linear_vari_process+0x21d>
c0008d70:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008d74:	d9 c0                	fld    st(0)
c0008d76:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d79:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008d7d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008d81:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008d85:	de d9                	fcompp 
c0008d87:	df e0                	fnstsw ax
c0008d89:	9e                   	sahf   
c0008d8a:	76 7b                	jbe    c0008e07 <linear_vari_process+0x21d>
c0008d8c:	85 ed                	test   ebp,ebp
c0008d8e:	7e 38                	jle    c0008dc8 <linear_vari_process+0x1de>
c0008d90:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d94:	83 ec 10             	sub    esp,0x10
c0008d97:	dd 07                	fld    QWORD PTR [edi]
c0008d99:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d9c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d9f:	e8 fc 57 01 00       	call   c001e5a0 <fabs>
c0008da4:	83 c4 10             	add    esp,0x10
c0008da7:	dc 1d 58 fd 01 c0    	fcomp  QWORD PTR ds:0xc001fd58
c0008dad:	df e0                	fnstsw ax
c0008daf:	9e                   	sahf   
c0008db0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008db4:	76 12                	jbe    c0008dc8 <linear_vari_process+0x1de>
c0008db6:	dd 07                	fld    QWORD PTR [edi]
c0008db8:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008dbb:	d8 e1                	fsub   st,st(1)
c0008dbd:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008dc0:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008dc3:	de c1                	faddp  st(1),st
c0008dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dc8:	31 c0                	xor    eax,eax
c0008dca:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008dcd:	39 c2                	cmp    edx,eax
c0008dcf:	0f 8e 4d ff ff ff    	jle    c0008d22 <linear_vari_process+0x138>
c0008dd5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dd7:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008dda:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008dde:	89 e9                	mov    ecx,ebp
c0008de0:	01 c5                	add    ebp,eax
c0008de2:	29 d1                	sub    ecx,edx
c0008de4:	89 ca                	mov    edx,ecx
c0008de6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008dea:	01 c2                	add    edx,eax
c0008dec:	40                   	inc    eax
c0008ded:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008df0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008df3:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008df6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008df9:	d8 e1                	fsub   st,st(1)
c0008dfb:	d8 ca                	fmul   st,st(2)
c0008dfd:	de c1                	faddp  st(1),st
c0008dff:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e02:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e05:	eb c3                	jmp    c0008dca <linear_vari_process+0x1e0>
c0008e07:	39 d1                	cmp    ecx,edx
c0008e09:	7d 13                	jge    c0008e1e <linear_vari_process+0x234>
c0008e0b:	89 d0                	mov    eax,edx
c0008e0d:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008e10:	29 c8                	sub    eax,ecx
c0008e12:	99                   	cdq    
c0008e13:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e1a:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008e1e:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008e21:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e24:	85 c0                	test   eax,eax
c0008e26:	7f 1b                	jg     c0008e43 <linear_vari_process+0x259>
c0008e28:	dd 04 24             	fld    QWORD PTR [esp]
c0008e2b:	dd 1f                	fstp   QWORD PTR [edi]
c0008e2d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e30:	99                   	cdq    
c0008e31:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e34:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008e37:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008e3a:	99                   	cdq    
c0008e3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e3e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008e41:	eb 26                	jmp    c0008e69 <linear_vari_process+0x27f>
c0008e43:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008e46:	31 d2                	xor    edx,edx
c0008e48:	29 c8                	sub    eax,ecx
c0008e4a:	c1 e0 02             	shl    eax,0x2
c0008e4d:	39 d1                	cmp    ecx,edx
c0008e4f:	7e d7                	jle    c0008e28 <linear_vari_process+0x23e>
c0008e51:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008e53:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008e57:	83 c0 04             	add    eax,0x4
c0008e5a:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008e5e:	42                   	inc    edx
c0008e5f:	eb ec                	jmp    c0008e4d <linear_vari_process+0x263>
c0008e61:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008e69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e6d:	83 c4 2c             	add    esp,0x2c
c0008e70:	5b                   	pop    ebx
c0008e71:	5e                   	pop    esi
c0008e72:	5f                   	pop    edi
c0008e73:	5d                   	pop    ebp
c0008e74:	c3                   	ret    

c0008e75 <linear_reset>:
c0008e75:	83 ec 0c             	sub    esp,0xc
c0008e78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008e7c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008e7f:	85 c0                	test   eax,eax
c0008e81:	74 20                	je     c0008ea3 <linear_reset+0x2e>
c0008e83:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008e86:	83 c0 1c             	add    eax,0x1c
c0008e89:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0008e8c:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0008e93:	c1 e2 02             	shl    edx,0x2
c0008e96:	51                   	push   ecx
c0008e97:	52                   	push   edx
c0008e98:	6a 00                	push   0x0
c0008e9a:	50                   	push   eax
c0008e9b:	e8 68 77 ff ff       	call   c0000608 <memset>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	83 c4 0c             	add    esp,0xc
c0008ea6:	c3                   	ret    

c0008ea7 <linear_get_name>:
c0008ea7:	31 c0                	xor    eax,eax
c0008ea9:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008eae:	75 05                	jne    c0008eb5 <linear_get_name+0xe>
c0008eb0:	b8 14 fd 01 c0       	mov    eax,0xc001fd14
c0008eb5:	c3                   	ret    

c0008eb6 <linear_get_description>:
c0008eb6:	31 c0                	xor    eax,eax
c0008eb8:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008ebd:	75 05                	jne    c0008ec4 <linear_get_description+0xe>
c0008ebf:	b8 28 fd 01 c0       	mov    eax,0xc001fd28
c0008ec4:	c3                   	ret    

c0008ec5 <linear_set_converter>:
c0008ec5:	53                   	push   ebx
c0008ec6:	b8 0a 00 00 00       	mov    eax,0xa
c0008ecb:	83 ec 08             	sub    esp,0x8
c0008ece:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ed2:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008ed7:	75 6e                	jne    c0008f47 <linear_set_converter+0x82>
c0008ed9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008edc:	85 c0                	test   eax,eax
c0008ede:	74 13                	je     c0008ef3 <linear_set_converter+0x2e>
c0008ee0:	83 ec 0c             	sub    esp,0xc
c0008ee3:	50                   	push   eax
c0008ee4:	e8 45 2d 00 00       	call   c000bc2e <free>
c0008ee9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008ef0:	83 c4 10             	add    esp,0x10
c0008ef3:	50                   	push   eax
c0008ef4:	50                   	push   eax
c0008ef5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008ef8:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008eff:	50                   	push   eax
c0008f00:	6a 01                	push   0x1
c0008f02:	e8 47 2d 00 00       	call   c000bc4e <calloc>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	89 c2                	mov    edx,eax
c0008f0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008f0f:	85 d2                	test   edx,edx
c0008f11:	b8 01 00 00 00       	mov    eax,0x1
c0008f16:	74 2f                	je     c0008f47 <linear_set_converter+0x82>
c0008f18:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f1b:	83 ec 0c             	sub    esp,0xc
c0008f1e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f21:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008f27:	c7 43 24 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008bea
c0008f2e:	c7 43 20 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008bea
c0008f35:	c7 43 28 75 8e 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008e75
c0008f3c:	53                   	push   ebx
c0008f3d:	e8 33 ff ff ff       	call   c0008e75 <linear_reset>
c0008f42:	83 c4 10             	add    esp,0x10
c0008f45:	31 c0                	xor    eax,eax
c0008f47:	83 c4 08             	add    esp,0x8
c0008f4a:	5b                   	pop    ebx
c0008f4b:	c3                   	ret    

c0008f4c <is_bad_src_ratio>:
c0008f4c:	83 ec 0c             	sub    esp,0xc
c0008f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f53:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008f5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008f5e:	dd 04 24             	fld    QWORD PTR [esp]
c0008f61:	dd 05 e0 fc 01 c0    	fld    QWORD PTR ds:0xc001fce0
c0008f67:	de d9                	fcompp 
c0008f69:	df e0                	fnstsw ax
c0008f6b:	f6 c4 45             	test   ah,0x45
c0008f6e:	74 10                	je     c0008f80 <is_bad_src_ratio+0x34>
c0008f70:	dd 04 24             	fld    QWORD PTR [esp]
c0008f73:	dc 1d e8 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fce8
c0008f79:	df e0                	fnstsw ax
c0008f7b:	f6 c4 45             	test   ah,0x45
c0008f7e:	75 07                	jne    c0008f87 <is_bad_src_ratio+0x3b>
c0008f80:	b8 01 00 00 00       	mov    eax,0x1
c0008f85:	eb 05                	jmp    c0008f8c <is_bad_src_ratio+0x40>
c0008f87:	b8 00 00 00 00       	mov    eax,0x0
c0008f8c:	83 c4 0c             	add    esp,0xc
c0008f8f:	c3                   	ret    

c0008f90 <int_to_fp>:
c0008f90:	c1 e0 0c             	shl    eax,0xc
c0008f93:	c3                   	ret    

c0008f94 <fp_to_int>:
c0008f94:	c1 f8 0c             	sar    eax,0xc
c0008f97:	c3                   	ret    

c0008f98 <fp_fraction_part>:
c0008f98:	25 ff 0f 00 00       	and    eax,0xfff
c0008f9d:	c3                   	ret    

c0008f9e <fp_to_double>:
c0008f9e:	83 ec 0c             	sub    esp,0xc
c0008fa1:	e8 f2 ff ff ff       	call   c0008f98 <fp_fraction_part>
c0008fa6:	d9 05 e8 fe 01 c0    	fld    DWORD PTR ds:0xc001fee8
c0008fac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fb0:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0008fb4:	83 c4 0c             	add    esp,0xc
c0008fb7:	c3                   	ret    

c0008fb8 <calc_output_single>:
c0008fb8:	55                   	push   ebp
c0008fb9:	57                   	push   edi
c0008fba:	89 c7                	mov    edi,eax
c0008fbc:	56                   	push   esi
c0008fbd:	53                   	push   ebx
c0008fbe:	89 d3                	mov    ebx,edx
c0008fc0:	83 ec 24             	sub    esp,0x24
c0008fc3:	89 de                	mov    esi,ebx
c0008fc5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008fc8:	e8 c3 ff ff ff       	call   c0008f90 <int_to_fp>
c0008fcd:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0008fd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fd4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008fdb:	29 c8                	sub    eax,ecx
c0008fdd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008fe5:	99                   	cdq    
c0008fe6:	f7 fb                	idiv   ebx
c0008fe8:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0008feb:	0f af f0             	imul   esi,eax
c0008fee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008ff2:	01 ce                	add    esi,ecx
c0008ff4:	29 c2                	sub    edx,eax
c0008ff6:	8d 14 97             	lea    edx,[edi+edx*4]
c0008ff9:	89 f0                	mov    eax,esi
c0008ffb:	e8 9e ff ff ff       	call   c0008f9e <fp_to_double>
c0009000:	89 f0                	mov    eax,esi
c0009002:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009006:	e8 89 ff ff ff       	call   c0008f94 <fp_to_int>
c000900b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000900f:	83 c2 04             	add    edx,0x4
c0009012:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009016:	d8 e1                	fsub   st,st(1)
c0009018:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000901c:	de c9                	fmulp  st(1),st
c000901e:	de c1                	faddp  st(1),st
c0009020:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009026:	29 de                	sub    esi,ebx
c0009028:	dc 04 24             	fadd   QWORD PTR [esp]
c000902b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000902e:	79 c9                	jns    c0008ff9 <calc_output_single+0x41>
c0009030:	89 d8                	mov    eax,ebx
c0009032:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009036:	29 c8                	sub    eax,ecx
c0009038:	d9 ee                	fldz   
c000903a:	89 c1                	mov    ecx,eax
c000903c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009040:	29 c8                	sub    eax,ecx
c0009042:	99                   	cdq    
c0009043:	f7 fb                	idiv   ebx
c0009045:	89 da                	mov    edx,ebx
c0009047:	0f af d0             	imul   edx,eax
c000904a:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000904e:	01 d1                	add    ecx,edx
c0009050:	8d 14 87             	lea    edx,[edi+eax*4]
c0009053:	89 c8                	mov    eax,ecx
c0009055:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009059:	e8 40 ff ff ff       	call   c0008f9e <fp_to_double>
c000905e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009062:	89 c8                	mov    eax,ecx
c0009064:	e8 2b ff ff ff       	call   c0008f94 <fp_to_int>
c0009069:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000906d:	29 d9                	sub    ecx,ebx
c000906f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009073:	83 ea 04             	sub    edx,0x4
c0009076:	d8 e1                	fsub   st,st(1)
c0009078:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000907c:	de c9                	fmulp  st(1),st
c000907e:	de c1                	faddp  st(1),st
c0009080:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009086:	85 c9                	test   ecx,ecx
c0009088:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000908c:	de c1                	faddp  st(1),st
c000908e:	7f c3                	jg     c0009053 <calc_output_single+0x9b>
c0009090:	dd 04 24             	fld    QWORD PTR [esp]
c0009093:	83 c4 24             	add    esp,0x24
c0009096:	de c1                	faddp  st(1),st
c0009098:	5b                   	pop    ebx
c0009099:	5e                   	pop    esi
c000909a:	5f                   	pop    edi
c000909b:	5d                   	pop    ebp
c000909c:	c3                   	ret    

c000909d <calc_output_stereo>:
c000909d:	55                   	push   ebp
c000909e:	57                   	push   edi
c000909f:	89 c7                	mov    edi,eax
c00090a1:	56                   	push   esi
c00090a2:	53                   	push   ebx
c00090a3:	89 d3                	mov    ebx,edx
c00090a5:	83 ec 44             	sub    esp,0x44
c00090a8:	89 de                	mov    esi,ebx
c00090aa:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00090ae:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00090b1:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00090b5:	e8 d6 fe ff ff       	call   c0008f90 <int_to_fp>
c00090ba:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00090bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090c1:	d9 ee                	fldz   
c00090c3:	29 c8                	sub    eax,ecx
c00090c5:	dd 14 24             	fst    QWORD PTR [esp]
c00090c8:	99                   	cdq    
c00090c9:	f7 fb                	idiv   ebx
c00090cb:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00090ce:	0f af f0             	imul   esi,eax
c00090d1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00090d5:	01 ce                	add    esi,ecx
c00090d7:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00090da:	0f af c2             	imul   eax,edx
c00090dd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00090e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00090e5:	29 c2                	sub    edx,eax
c00090e7:	8d 14 97             	lea    edx,[edi+edx*4]
c00090ea:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00090ee:	89 f0                	mov    eax,esi
c00090f0:	e8 a9 fe ff ff       	call   c0008f9e <fp_to_double>
c00090f5:	89 f0                	mov    eax,esi
c00090f7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00090fb:	e8 94 fe ff ff       	call   c0008f94 <fp_to_int>
c0009100:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009104:	83 c2 08             	add    edx,0x8
c0009107:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000910b:	d8 e1                	fsub   st,st(1)
c000910d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009111:	de c9                	fmulp  st(1),st
c0009113:	de c1                	faddp  st(1),st
c0009115:	d9 c0                	fld    st(0)
c0009117:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000911d:	dc 04 24             	fadd   QWORD PTR [esp]
c0009120:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009123:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009129:	29 de                	sub    esi,ebx
c000912b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000912f:	de c1                	faddp  st(1),st
c0009131:	79 b7                	jns    c00090ea <calc_output_stereo+0x4d>
c0009133:	89 d8                	mov    eax,ebx
c0009135:	d9 ee                	fldz   
c0009137:	d9 ee                	fldz   
c0009139:	29 c8                	sub    eax,ecx
c000913b:	89 c1                	mov    ecx,eax
c000913d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009141:	29 c8                	sub    eax,ecx
c0009143:	99                   	cdq    
c0009144:	f7 fb                	idiv   ebx
c0009146:	89 da                	mov    edx,ebx
c0009148:	0f af d0             	imul   edx,eax
c000914b:	40                   	inc    eax
c000914c:	01 d1                	add    ecx,edx
c000914e:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009153:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009157:	8d 14 87             	lea    edx,[edi+eax*4]
c000915a:	eb 04                	jmp    c0009160 <calc_output_stereo+0xc3>
c000915c:	d9 ca                	fxch   st(2)
c000915e:	d9 c9                	fxch   st(1)
c0009160:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009164:	d9 c9                	fxch   st(1)
c0009166:	89 c8                	mov    eax,ecx
c0009168:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000916c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009170:	e8 29 fe ff ff       	call   c0008f9e <fp_to_double>
c0009175:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009179:	89 c8                	mov    eax,ecx
c000917b:	e8 14 fe ff ff       	call   c0008f94 <fp_to_int>
c0009180:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009184:	29 d9                	sub    ecx,ebx
c0009186:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000918a:	83 ea 08             	sub    edx,0x8
c000918d:	d8 e1                	fsub   st,st(1)
c000918f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009193:	de c9                	fmulp  st(1),st
c0009195:	de c1                	faddp  st(1),st
c0009197:	d9 c0                	fld    st(0)
c0009199:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c000919f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00091a3:	de c1                	faddp  st(1),st
c00091a5:	d9 c9                	fxch   st(1)
c00091a7:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c00091ad:	85 c9                	test   ecx,ecx
c00091af:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00091b3:	de c1                	faddp  st(1),st
c00091b5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00091b9:	7f a1                	jg     c000915c <calc_output_stereo+0xbf>
c00091bb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00091bf:	dd 04 24             	fld    QWORD PTR [esp]
c00091c2:	de c3                	faddp  st(3),st
c00091c4:	d9 ca                	fxch   st(2)
c00091c6:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091ca:	d9 18                	fstp   DWORD PTR [eax]
c00091cc:	de c1                	faddp  st(1),st
c00091ce:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091d2:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00091d5:	83 c4 44             	add    esp,0x44
c00091d8:	5b                   	pop    ebx
c00091d9:	5e                   	pop    esi
c00091da:	5f                   	pop    edi
c00091db:	5d                   	pop    ebp
c00091dc:	c3                   	ret    

c00091dd <calc_output_quad>:
c00091dd:	55                   	push   ebp
c00091de:	57                   	push   edi
c00091df:	56                   	push   esi
c00091e0:	89 c6                	mov    esi,eax
c00091e2:	53                   	push   ebx
c00091e3:	89 d3                	mov    ebx,edx
c00091e5:	83 ec 5c             	sub    esp,0x5c
c00091e8:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c00091ec:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00091ef:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091f2:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00091f6:	e8 95 fd ff ff       	call   c0008f90 <int_to_fp>
c00091fb:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00091fe:	d9 ee                	fldz   
c0009200:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009204:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009208:	29 c8                	sub    eax,ecx
c000920a:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c000920e:	99                   	cdq    
c000920f:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009213:	f7 fb                	idiv   ebx
c0009215:	89 da                	mov    edx,ebx
c0009217:	0f af d0             	imul   edx,eax
c000921a:	01 ca                	add    edx,ecx
c000921c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009220:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c0009223:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009227:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000922a:	0f af c2             	imul   eax,edx
c000922d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009231:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009235:	29 c2                	sub    edx,eax
c0009237:	8d 14 96             	lea    edx,[esi+edx*4]
c000923a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000923e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009242:	e8 57 fd ff ff       	call   c0008f9e <fp_to_double>
c0009247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000924b:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000924f:	e8 40 fd ff ff       	call   c0008f94 <fp_to_int>
c0009254:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009258:	83 c2 10             	add    edx,0x10
c000925b:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000925f:	d8 e1                	fsub   st,st(1)
c0009261:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009265:	de c9                	fmulp  st(1),st
c0009267:	de c1                	faddp  st(1),st
c0009269:	d9 c0                	fld    st(0)
c000926b:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009271:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009275:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009279:	d9 c0                	fld    st(0)
c000927b:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009281:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009285:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009289:	d9 c0                	fld    st(0)
c000928b:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009291:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009295:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009299:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000929f:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c00092a3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00092a7:	de c1                	faddp  st(1),st
c00092a9:	79 8f                	jns    c000923a <calc_output_quad+0x5d>
c00092ab:	89 d8                	mov    eax,ebx
c00092ad:	d9 ee                	fldz   
c00092af:	29 c8                	sub    eax,ecx
c00092b1:	d9 ee                	fldz   
c00092b3:	89 c1                	mov    ecx,eax
c00092b5:	d9 ee                	fldz   
c00092b7:	d9 ee                	fldz   
c00092b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00092bd:	29 c8                	sub    eax,ecx
c00092bf:	99                   	cdq    
c00092c0:	f7 fb                	idiv   ebx
c00092c2:	89 da                	mov    edx,ebx
c00092c4:	0f af d0             	imul   edx,eax
c00092c7:	40                   	inc    eax
c00092c8:	01 d1                	add    ecx,edx
c00092ca:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00092cf:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00092d3:	8d 14 86             	lea    edx,[esi+eax*4]
c00092d6:	eb 0a                	jmp    c00092e2 <calc_output_quad+0x105>
c00092d8:	d9 cc                	fxch   st(4)
c00092da:	d9 ca                	fxch   st(2)
c00092dc:	d9 c9                	fxch   st(1)
c00092de:	d9 cb                	fxch   st(3)
c00092e0:	d9 c9                	fxch   st(1)
c00092e2:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092e6:	d9 c9                	fxch   st(1)
c00092e8:	89 c8                	mov    eax,ecx
c00092ea:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092ee:	d9 c9                	fxch   st(1)
c00092f0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00092f4:	d9 c9                	fxch   st(1)
c00092f6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00092fa:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00092fe:	e8 9b fc ff ff       	call   c0008f9e <fp_to_double>
c0009303:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009307:	89 c8                	mov    eax,ecx
c0009309:	e8 86 fc ff ff       	call   c0008f94 <fp_to_int>
c000930e:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009312:	29 d9                	sub    ecx,ebx
c0009314:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009318:	83 ea 10             	sub    edx,0x10
c000931b:	d8 e1                	fsub   st,st(1)
c000931d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009321:	de c9                	fmulp  st(1),st
c0009323:	de c1                	faddp  st(1),st
c0009325:	d9 c0                	fld    st(0)
c0009327:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c000932d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009331:	de c1                	faddp  st(1),st
c0009333:	d9 c1                	fld    st(1)
c0009335:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c000933b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000933f:	de c1                	faddp  st(1),st
c0009341:	d9 c2                	fld    st(2)
c0009343:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009349:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000934d:	de c1                	faddp  st(1),st
c000934f:	d9 cb                	fxch   st(3)
c0009351:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009357:	85 c9                	test   ecx,ecx
c0009359:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000935d:	de c1                	faddp  st(1),st
c000935f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009363:	0f 8f 6f ff ff ff    	jg     c00092d8 <calc_output_quad+0xfb>
c0009369:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000936d:	de c4                	faddp  st(4),st
c000936f:	d9 cb                	fxch   st(3)
c0009371:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009374:	d9 1f                	fstp   DWORD PTR [edi]
c0009376:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000937a:	de c2                	faddp  st(2),st
c000937c:	d9 c9                	fxch   st(1)
c000937e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009381:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009384:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009388:	de c3                	faddp  st(3),st
c000938a:	d9 ca                	fxch   st(2)
c000938c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000938f:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009392:	de c1                	faddp  st(1),st
c0009394:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009397:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000939a:	83 c4 5c             	add    esp,0x5c
c000939d:	5b                   	pop    ebx
c000939e:	5e                   	pop    esi
c000939f:	5f                   	pop    edi
c00093a0:	5d                   	pop    ebp
c00093a1:	c3                   	ret    

c00093a2 <calc_output_hex>:
c00093a2:	55                   	push   ebp
c00093a3:	57                   	push   edi
c00093a4:	89 c7                	mov    edi,eax
c00093a6:	56                   	push   esi
c00093a7:	53                   	push   ebx
c00093a8:	89 d3                	mov    ebx,edx
c00093aa:	83 ec 7c             	sub    esp,0x7c
c00093ad:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c00093b4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00093b7:	dd 1c 24             	fstp   QWORD PTR [esp]
c00093ba:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00093c1:	e8 ca fb ff ff       	call   c0008f90 <int_to_fp>
c00093c6:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093c9:	d9 ee                	fldz   
c00093cb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00093cf:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00093d3:	29 c8                	sub    eax,ecx
c00093d5:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00093d9:	99                   	cdq    
c00093da:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00093de:	f7 fb                	idiv   ebx
c00093e0:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00093e4:	89 da                	mov    edx,ebx
c00093e6:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00093ea:	0f af d0             	imul   edx,eax
c00093ed:	01 ca                	add    edx,ecx
c00093ef:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00093f3:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00093f6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00093fa:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00093fd:	0f af c2             	imul   eax,edx
c0009400:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009404:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009408:	29 c2                	sub    edx,eax
c000940a:	8d 14 97             	lea    edx,[edi+edx*4]
c000940d:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009411:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009415:	e8 84 fb ff ff       	call   c0008f9e <fp_to_double>
c000941a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000941e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009422:	e8 6d fb ff ff       	call   c0008f94 <fp_to_int>
c0009427:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000942b:	83 c2 18             	add    edx,0x18
c000942e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009432:	d8 e1                	fsub   st,st(1)
c0009434:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009438:	de c9                	fmulp  st(1),st
c000943a:	de c1                	faddp  st(1),st
c000943c:	d9 c0                	fld    st(0)
c000943e:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009444:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009448:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000944c:	d9 c0                	fld    st(0)
c000944e:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009454:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009458:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000945c:	d9 c0                	fld    st(0)
c000945e:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009464:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009468:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000946c:	d9 c0                	fld    st(0)
c000946e:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009474:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009478:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000947c:	d9 c0                	fld    st(0)
c000947e:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009484:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009488:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000948c:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009492:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009496:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000949a:	de c1                	faddp  st(1),st
c000949c:	0f 89 6b ff ff ff    	jns    c000940d <calc_output_hex+0x6b>
c00094a2:	d9 ee                	fldz   
c00094a4:	d9 ee                	fldz   
c00094a6:	89 d8                	mov    eax,ebx
c00094a8:	29 c8                	sub    eax,ecx
c00094aa:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00094ae:	89 c1                	mov    ecx,eax
c00094b0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00094b4:	29 c8                	sub    eax,ecx
c00094b6:	99                   	cdq    
c00094b7:	f7 fb                	idiv   ebx
c00094b9:	89 da                	mov    edx,ebx
c00094bb:	0f af d0             	imul   edx,eax
c00094be:	40                   	inc    eax
c00094bf:	01 d1                	add    ecx,edx
c00094c1:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c00094c6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00094ca:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c00094ce:	8d 14 87             	lea    edx,[edi+eax*4]
c00094d1:	d9 ee                	fldz   
c00094d3:	d9 ee                	fldz   
c00094d5:	d9 ca                	fxch   st(2)
c00094d7:	eb 08                	jmp    c00094e1 <calc_output_hex+0x13f>
c00094d9:	d9 cc                	fxch   st(4)
c00094db:	d9 cb                	fxch   st(3)
c00094dd:	d9 ca                	fxch   st(2)
c00094df:	d9 c9                	fxch   st(1)
c00094e1:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c00094e5:	89 c8                	mov    eax,ecx
c00094e7:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00094eb:	d9 ca                	fxch   st(2)
c00094ed:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094f1:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00094f5:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00094f9:	e8 a0 fa ff ff       	call   c0008f9e <fp_to_double>
c00094fe:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009502:	89 c8                	mov    eax,ecx
c0009504:	e8 8b fa ff ff       	call   c0008f94 <fp_to_int>
c0009509:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000950d:	29 d9                	sub    ecx,ebx
c000950f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009513:	83 ea 18             	sub    edx,0x18
c0009516:	d8 e1                	fsub   st,st(1)
c0009518:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000951c:	de c9                	fmulp  st(1),st
c000951e:	de c1                	faddp  st(1),st
c0009520:	d9 c0                	fld    st(0)
c0009522:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009528:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000952c:	de c1                	faddp  st(1),st
c000952e:	d9 c1                	fld    st(1)
c0009530:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009536:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c000953a:	de c1                	faddp  st(1),st
c000953c:	d9 c2                	fld    st(2)
c000953e:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009544:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009548:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000954c:	d9 c2                	fld    st(2)
c000954e:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009554:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009558:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000955c:	d9 c2                	fld    st(2)
c000955e:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009564:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009568:	de c1                	faddp  st(1),st
c000956a:	d9 cb                	fxch   st(3)
c000956c:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009572:	85 c9                	test   ecx,ecx
c0009574:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009578:	de c1                	faddp  st(1),st
c000957a:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000957e:	0f 8f 55 ff ff ff    	jg     c00094d9 <calc_output_hex+0x137>
c0009584:	d9 cb                	fxch   st(3)
c0009586:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000958a:	dc 0c 24             	fmul   QWORD PTR [esp]
c000958d:	d9 1e                	fstp   DWORD PTR [esi]
c000958f:	d9 c9                	fxch   st(1)
c0009591:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009595:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009598:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000959b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000959f:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00095a3:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095a6:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c00095a9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00095ad:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095b1:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095b4:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00095b7:	d9 ca                	fxch   st(2)
c00095b9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00095bd:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c0:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00095c3:	de c1                	faddp  st(1),st
c00095c5:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c8:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00095cb:	83 c4 7c             	add    esp,0x7c
c00095ce:	5b                   	pop    ebx
c00095cf:	5e                   	pop    esi
c00095d0:	5f                   	pop    edi
c00095d1:	5d                   	pop    ebp
c00095d2:	c3                   	ret    

c00095d3 <sinc_reset>:
c00095d3:	56                   	push   esi
c00095d4:	53                   	push   ebx
c00095d5:	51                   	push   ecx
c00095d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095da:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00095dd:	85 db                	test   ebx,ebx
c00095df:	74 51                	je     c0009632 <sinc_reset+0x5f>
c00095e1:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00095e8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00095ef:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00095f6:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00095fc:	d9 ee                	fldz   
c00095fe:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009601:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c0009604:	52                   	push   edx
c0009605:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009608:	c1 e0 02             	shl    eax,0x2
c000960b:	50                   	push   eax
c000960c:	6a 00                	push   0x0
c000960e:	56                   	push   esi
c000960f:	e8 f4 6f ff ff       	call   c0000608 <memset>
c0009614:	83 c4 0c             	add    esp,0xc
c0009617:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000961a:	c1 e0 02             	shl    eax,0x2
c000961d:	50                   	push   eax
c000961e:	68 aa 00 00 00       	push   0xaa
c0009623:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009626:	8d 04 86             	lea    eax,[esi+eax*4]
c0009629:	50                   	push   eax
c000962a:	e8 d9 6f ff ff       	call   c0000608 <memset>
c000962f:	83 c4 10             	add    esp,0x10
c0009632:	58                   	pop    eax
c0009633:	5b                   	pop    ebx
c0009634:	5e                   	pop    esi
c0009635:	c3                   	ret    

c0009636 <calc_output_multi>:
c0009636:	55                   	push   ebp
c0009637:	57                   	push   edi
c0009638:	8d 78 44             	lea    edi,[eax+0x44]
c000963b:	56                   	push   esi
c000963c:	89 c6                	mov    esi,eax
c000963e:	53                   	push   ebx
c000963f:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c0009645:	83 ec 4c             	sub    esp,0x4c
c0009648:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000964c:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0009650:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009654:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009658:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000965c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009660:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009663:	e8 28 f9 ff ff       	call   c0008f90 <int_to_fp>
c0009668:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c000966b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000966f:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009673:	99                   	cdq    
c0009674:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009678:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000967c:	0f af d0             	imul   edx,eax
c000967f:	0f af c3             	imul   eax,ebx
c0009682:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009686:	29 c5                	sub    ebp,eax
c0009688:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000968c:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0009690:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009697:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000969b:	52                   	push   edx
c000969c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096a0:	6a 00                	push   0x0
c00096a2:	57                   	push   edi
c00096a3:	e8 60 6f ff ff       	call   c0000608 <memset>
c00096a8:	83 c4 10             	add    esp,0x10
c00096ab:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096af:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00096b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096b7:	e8 e2 f8 ff ff       	call   c0008f9e <fp_to_double>
c00096bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096c0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00096c4:	e8 cb f8 ff ff       	call   c0008f94 <fp_to_int>
c00096c9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00096cc:	89 d9                	mov    ecx,ebx
c00096ce:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00096d1:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00096d5:	d8 e1                	fsub   st,st(1)
c00096d7:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096db:	de c9                	fmulp  st(1),st
c00096dd:	de c1                	faddp  st(1),st
c00096df:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00096e3:	89 c8                	mov    eax,ecx
c00096e5:	bd 08 00 00 00       	mov    ebp,0x8
c00096ea:	99                   	cdq    
c00096eb:	f7 fd                	idiv   ebp
c00096ed:	4a                   	dec    edx
c00096ee:	83 fa 06             	cmp    edx,0x6
c00096f1:	77 07                	ja     c00096fa <calc_output_multi+0xc4>
c00096f3:	ff 24 95 60 fd 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe02a0]
c00096fa:	49                   	dec    ecx
c00096fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00096ff:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009702:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009709:	d9 c1                	fld    st(1)
c000970b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000970f:	dc 00                	fadd   QWORD PTR [eax]
c0009711:	dd 18                	fstp   QWORD PTR [eax]
c0009713:	49                   	dec    ecx
c0009714:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009718:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000971b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009722:	d9 c1                	fld    st(1)
c0009724:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009728:	dc 00                	fadd   QWORD PTR [eax]
c000972a:	dd 18                	fstp   QWORD PTR [eax]
c000972c:	49                   	dec    ecx
c000972d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009731:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009734:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000973b:	d9 c1                	fld    st(1)
c000973d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009741:	dc 00                	fadd   QWORD PTR [eax]
c0009743:	dd 18                	fstp   QWORD PTR [eax]
c0009745:	49                   	dec    ecx
c0009746:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000974a:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000974d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009754:	d9 c1                	fld    st(1)
c0009756:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000975a:	dc 00                	fadd   QWORD PTR [eax]
c000975c:	dd 18                	fstp   QWORD PTR [eax]
c000975e:	49                   	dec    ecx
c000975f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009763:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009766:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000976d:	d9 c1                	fld    st(1)
c000976f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009773:	dc 00                	fadd   QWORD PTR [eax]
c0009775:	dd 18                	fstp   QWORD PTR [eax]
c0009777:	49                   	dec    ecx
c0009778:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000977c:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000977f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009786:	d9 c1                	fld    st(1)
c0009788:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000978c:	dc 00                	fadd   QWORD PTR [eax]
c000978e:	dd 18                	fstp   QWORD PTR [eax]
c0009790:	49                   	dec    ecx
c0009791:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009795:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009798:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000979f:	d9 c1                	fld    st(1)
c00097a1:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097a5:	dc 00                	fadd   QWORD PTR [eax]
c00097a7:	dd 18                	fstp   QWORD PTR [eax]
c00097a9:	49                   	dec    ecx
c00097aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097ae:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097b1:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097b8:	d9 c1                	fld    st(1)
c00097ba:	85 c9                	test   ecx,ecx
c00097bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097c0:	dc 00                	fadd   QWORD PTR [eax]
c00097c2:	dd 18                	fstp   QWORD PTR [eax]
c00097c4:	0f 8f 19 ff ff ff    	jg     c00096e3 <calc_output_multi+0xad>
c00097ca:	dd d9                	fstp   st(1)
c00097cc:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c00097d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d4:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c00097d8:	0f 89 d1 fe ff ff    	jns    c00096af <calc_output_multi+0x79>
c00097de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097e2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00097e6:	89 d1                	mov    ecx,edx
c00097e8:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00097ec:	29 c8                	sub    eax,ecx
c00097ee:	99                   	cdq    
c00097ef:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c00097f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097f7:	0f af d0             	imul   edx,eax
c00097fa:	40                   	inc    eax
c00097fb:	01 d1                	add    ecx,edx
c00097fd:	0f af c3             	imul   eax,ebx
c0009800:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009804:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009807:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000980b:	50                   	push   eax
c000980c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009810:	6a 00                	push   0x0
c0009812:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009816:	e8 ed 6d ff ff       	call   c0000608 <memset>
c000981b:	83 c4 10             	add    esp,0x10
c000981e:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009822:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009826:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000982a:	e8 6f f7 ff ff       	call   c0008f9e <fp_to_double>
c000982f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009833:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009837:	e8 58 f7 ff ff       	call   c0008f94 <fp_to_int>
c000983c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000983f:	89 d9                	mov    ecx,ebx
c0009841:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009844:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009848:	d8 e1                	fsub   st,st(1)
c000984a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000984e:	de c9                	fmulp  st(1),st
c0009850:	de c1                	faddp  st(1),st
c0009852:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009856:	89 c8                	mov    eax,ecx
c0009858:	bd 08 00 00 00       	mov    ebp,0x8
c000985d:	99                   	cdq    
c000985e:	f7 fd                	idiv   ebp
c0009860:	4a                   	dec    edx
c0009861:	83 fa 06             	cmp    edx,0x6
c0009864:	77 07                	ja     c000986d <calc_output_multi+0x237>
c0009866:	ff 24 95 7c fd 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0284]
c000986d:	49                   	dec    ecx
c000986e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009872:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009876:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009879:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009880:	d9 c1                	fld    st(1)
c0009882:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009886:	dc 00                	fadd   QWORD PTR [eax]
c0009888:	dd 18                	fstp   QWORD PTR [eax]
c000988a:	49                   	dec    ecx
c000988b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000988f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009893:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009896:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000989d:	d9 c1                	fld    st(1)
c000989f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098a3:	dc 00                	fadd   QWORD PTR [eax]
c00098a5:	dd 18                	fstp   QWORD PTR [eax]
c00098a7:	49                   	dec    ecx
c00098a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098b0:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098b3:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098ba:	d9 c1                	fld    st(1)
c00098bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098c0:	dc 00                	fadd   QWORD PTR [eax]
c00098c2:	dd 18                	fstp   QWORD PTR [eax]
c00098c4:	49                   	dec    ecx
c00098c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098cd:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098d0:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098d7:	d9 c1                	fld    st(1)
c00098d9:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098dd:	dc 00                	fadd   QWORD PTR [eax]
c00098df:	dd 18                	fstp   QWORD PTR [eax]
c00098e1:	49                   	dec    ecx
c00098e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098ea:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098ed:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098f4:	d9 c1                	fld    st(1)
c00098f6:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098fa:	dc 00                	fadd   QWORD PTR [eax]
c00098fc:	dd 18                	fstp   QWORD PTR [eax]
c00098fe:	49                   	dec    ecx
c00098ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009903:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009907:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000990a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009911:	d9 c1                	fld    st(1)
c0009913:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009917:	dc 00                	fadd   QWORD PTR [eax]
c0009919:	dd 18                	fstp   QWORD PTR [eax]
c000991b:	49                   	dec    ecx
c000991c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009920:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009924:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009927:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000992e:	d9 c1                	fld    st(1)
c0009930:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009934:	dc 00                	fadd   QWORD PTR [eax]
c0009936:	dd 18                	fstp   QWORD PTR [eax]
c0009938:	49                   	dec    ecx
c0009939:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000993d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009941:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009944:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000994b:	d9 c1                	fld    st(1)
c000994d:	85 c9                	test   ecx,ecx
c000994f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009953:	dc 00                	fadd   QWORD PTR [eax]
c0009955:	dd 18                	fstp   QWORD PTR [eax]
c0009957:	0f 8f f9 fe ff ff    	jg     c0009856 <calc_output_multi+0x220>
c000995d:	dd d9                	fstp   st(1)
c000995f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009963:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009967:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c000996b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0009970:	0f 8f ac fe ff ff    	jg     c0009822 <calc_output_multi+0x1ec>
c0009976:	b9 08 00 00 00       	mov    ecx,0x8
c000997b:	89 d8                	mov    eax,ebx
c000997d:	99                   	cdq    
c000997e:	f7 f9                	idiv   ecx
c0009980:	4a                   	dec    edx
c0009981:	83 fa 06             	cmp    edx,0x6
c0009984:	77 07                	ja     c000998d <calc_output_multi+0x357>
c0009986:	ff 24 95 98 fd 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0268]
c000998d:	4b                   	dec    ebx
c000998e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009992:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009995:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009998:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000999c:	d8 c9                	fmul   st,st(1)
c000999e:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099a1:	4b                   	dec    ebx
c00099a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099a6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099a9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099b0:	d8 c9                	fmul   st,st(1)
c00099b2:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099b5:	4b                   	dec    ebx
c00099b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ba:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099bd:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099c0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099c4:	d8 c9                	fmul   st,st(1)
c00099c6:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099c9:	4b                   	dec    ebx
c00099ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ce:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099d1:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099d4:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099d8:	d8 c9                	fmul   st,st(1)
c00099da:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099dd:	4b                   	dec    ebx
c00099de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099e2:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099e5:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099e8:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099ec:	d8 c9                	fmul   st,st(1)
c00099ee:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099f1:	4b                   	dec    ebx
c00099f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099f6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099f9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099fc:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a00:	d8 c9                	fmul   st,st(1)
c0009a02:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a05:	4b                   	dec    ebx
c0009a06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a0a:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a0d:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a10:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a14:	d8 c9                	fmul   st,st(1)
c0009a16:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a19:	4b                   	dec    ebx
c0009a1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a1e:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a21:	85 db                	test   ebx,ebx
c0009a23:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a26:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a2a:	d8 c9                	fmul   st,st(1)
c0009a2c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a2f:	0f 8f 46 ff ff ff    	jg     c000997b <calc_output_multi+0x345>
c0009a35:	dd d8                	fstp   st(0)
c0009a37:	83 c4 4c             	add    esp,0x4c
c0009a3a:	5b                   	pop    ebx
c0009a3b:	5e                   	pop    esi
c0009a3c:	5f                   	pop    edi
c0009a3d:	5d                   	pop    ebp
c0009a3e:	c3                   	ret    

c0009a3f <double_to_fp>:
c0009a3f:	d9 05 ec fe 01 c0    	fld    DWORD PTR ds:0xc001feec
c0009a45:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009a49:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009a4d:	e9 6e 4b 01 00       	jmp    c001e5c0 <lrint>

c0009a52 <fmod_one>:
c0009a52:	83 ec 2c             	sub    esp,0x2c
c0009a55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a65:	83 ec 08             	sub    esp,0x8
c0009a68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a70:	e8 4b 4b 01 00       	call   c001e5c0 <lrint>
c0009a75:	83 c4 10             	add    esp,0x10
c0009a78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a7c:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009a80:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009a84:	de e1                	fsubrp st(1),st
c0009a86:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009a8a:	d9 ee                	fldz   
c0009a8c:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009a90:	df e0                	fnstsw ax
c0009a92:	f6 c4 45             	test   ah,0x45
c0009a95:	75 0a                	jne    c0009aa1 <fmod_one+0x4f>
c0009a97:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009a9b:	d9 e8                	fld1   
c0009a9d:	de c1                	faddp  st(1),st
c0009a9f:	eb 04                	jmp    c0009aa5 <fmod_one+0x53>
c0009aa1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009aa5:	83 c4 2c             	add    esp,0x2c
c0009aa8:	c3                   	ret    

c0009aa9 <prepare_data>:
c0009aa9:	55                   	push   ebp
c0009aaa:	57                   	push   edi
c0009aab:	56                   	push   esi
c0009aac:	53                   	push   ebx
c0009aad:	83 ec 1c             	sub    esp,0x1c
c0009ab0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009ab4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009ab8:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009abc:	0f 89 57 01 00 00    	jns    c0009c19 <prepare_data+0x170>
c0009ac2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009ac5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ac8:	85 d2                	test   edx,edx
c0009aca:	75 0d                	jne    c0009ad9 <prepare_data+0x30>
c0009acc:	8d 14 36             	lea    edx,[esi+esi*1]
c0009acf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009ad2:	29 d0                	sub    eax,edx
c0009ad4:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ad7:	eb 44                	jmp    c0009b1d <prepare_data+0x74>
c0009ad9:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009adc:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009adf:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009ae2:	39 c1                	cmp    ecx,eax
c0009ae4:	7d 04                	jge    c0009aea <prepare_data+0x41>
c0009ae6:	29 d0                	sub    eax,edx
c0009ae8:	eb 2d                	jmp    c0009b17 <prepare_data+0x6e>
c0009aea:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009af0:	29 d7                	sub    edi,edx
c0009af2:	01 f7                	add    edi,esi
c0009af4:	51                   	push   ecx
c0009af5:	29 f2                	sub    edx,esi
c0009af7:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009afe:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b01:	51                   	push   ecx
c0009b02:	52                   	push   edx
c0009b03:	50                   	push   eax
c0009b04:	e8 91 6a ff ff       	call   c000059a <memmove>
c0009b09:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b0c:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b0f:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009b12:	29 f0                	sub    eax,esi
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	29 f0                	sub    eax,esi
c0009b19:	79 02                	jns    c0009b1d <prepare_data+0x74>
c0009b1b:	31 c0                	xor    eax,eax
c0009b1d:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009b20:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009b23:	29 ef                	sub    edi,ebp
c0009b25:	39 c7                	cmp    edi,eax
c0009b27:	7e 02                	jle    c0009b2b <prepare_data+0x82>
c0009b29:	89 c7                	mov    edi,eax
c0009b2b:	89 f8                	mov    eax,edi
c0009b2d:	99                   	cdq    
c0009b2e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009b31:	b8 15 00 00 00       	mov    eax,0x15
c0009b36:	29 d7                	sub    edi,edx
c0009b38:	0f 88 dd 00 00 00    	js     c0009c1b <prepare_data+0x172>
c0009b3e:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009b41:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009b44:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009b47:	0f 8f ce 00 00 00    	jg     c0009c1b <prepare_data+0x172>
c0009b4d:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009b53:	50                   	push   eax
c0009b54:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009b5b:	50                   	push   eax
c0009b5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b62:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009b65:	50                   	push   eax
c0009b66:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009b69:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009b6d:	50                   	push   eax
c0009b6e:	e8 5f 6a ff ff       	call   c00005d2 <memcpy>
c0009b73:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009b76:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009b79:	01 fd                	add    ebp,edi
c0009b7b:	01 f9                	add    ecx,edi
c0009b7d:	83 c4 10             	add    esp,0x10
c0009b80:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009b83:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009b86:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009b89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b8d:	0f 85 86 00 00 00    	jne    c0009c19 <prepare_data+0x170>
c0009b93:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009b96:	89 e8                	mov    eax,ebp
c0009b98:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009b9b:	29 c8                	sub    eax,ecx
c0009b9d:	39 f8                	cmp    eax,edi
c0009b9f:	7d 78                	jge    c0009c19 <prepare_data+0x170>
c0009ba1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009ba5:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009ba9:	74 6e                	je     c0009c19 <prepare_data+0x170>
c0009bab:	8d 7e 04             	lea    edi,[esi+0x4]
c0009bae:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009bb2:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009bb5:	29 ef                	sub    edi,ebp
c0009bb7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009bbb:	7c 29                	jl     c0009be6 <prepare_data+0x13d>
c0009bbd:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bc0:	29 f1                	sub    ecx,esi
c0009bc2:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009bc9:	55                   	push   ebp
c0009bca:	50                   	push   eax
c0009bcb:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bce:	50                   	push   eax
c0009bcf:	52                   	push   edx
c0009bd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009bd4:	e8 c1 69 ff ff       	call   c000059a <memmove>
c0009bd9:	83 c4 10             	add    esp,0x10
c0009bdc:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bdf:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009be2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009be6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009be9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009bec:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009bef:	83 c6 05             	add    esi,0x5
c0009bf2:	78 07                	js     c0009bfb <prepare_data+0x152>
c0009bf4:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bf7:	39 cf                	cmp    edi,ecx
c0009bf9:	7e 04                	jle    c0009bff <prepare_data+0x156>
c0009bfb:	89 ce                	mov    esi,ecx
c0009bfd:	29 c6                	sub    esi,eax
c0009bff:	8d 04 82             	lea    eax,[edx+eax*4]
c0009c02:	51                   	push   ecx
c0009c03:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c0a:	51                   	push   ecx
c0009c0b:	6a 00                	push   0x0
c0009c0d:	50                   	push   eax
c0009c0e:	e8 f5 69 ff ff       	call   c0000608 <memset>
c0009c13:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009c16:	83 c4 10             	add    esp,0x10
c0009c19:	31 c0                	xor    eax,eax
c0009c1b:	83 c4 1c             	add    esp,0x1c
c0009c1e:	5b                   	pop    ebx
c0009c1f:	5e                   	pop    esi
c0009c20:	5f                   	pop    edi
c0009c21:	5d                   	pop    ebp
c0009c22:	c3                   	ret    

c0009c23 <sinc_multichan_vari_process>:
c0009c23:	55                   	push   ebp
c0009c24:	b8 05 00 00 00       	mov    eax,0x5
c0009c29:	57                   	push   edi
c0009c2a:	56                   	push   esi
c0009c2b:	53                   	push   ebx
c0009c2c:	83 ec 3c             	sub    esp,0x3c
c0009c2f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009c33:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009c37:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009c3a:	85 db                	test   ebx,ebx
c0009c3c:	0f 84 5d 02 00 00    	je     c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c42:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009c45:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009c48:	0f af d0             	imul   edx,eax
c0009c4b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009c4e:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009c52:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009c59:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009c5c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009c63:	dd 06                	fld    QWORD PTR [esi]
c0009c65:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009c69:	55                   	push   ebp
c0009c6a:	55                   	push   ebp
c0009c6b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009c6e:	e8 d9 f2 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009c73:	89 c2                	mov    edx,eax
c0009c75:	58                   	pop    eax
c0009c76:	85 d2                	test   edx,edx
c0009c78:	59                   	pop    ecx
c0009c79:	b8 16 00 00 00       	mov    eax,0x16
c0009c7e:	0f 85 1b 02 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c84:	d9 05 f0 fe 01 c0    	fld    DWORD PTR ds:0xc001fef0
c0009c8a:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009c8d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009c90:	dd 06                	fld    QWORD PTR [esi]
c0009c92:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009c95:	d8 d1                	fcom   st(1)
c0009c97:	df e0                	fnstsw ax
c0009c99:	9e                   	sahf   
c0009c9a:	76 0f                	jbe    c0009cab <sinc_multichan_vari_process+0x88>
c0009c9c:	dd d8                	fstp   st(0)
c0009c9e:	d9 e8                	fld1   
c0009ca0:	d8 d9                	fcomp  st(1)
c0009ca2:	df e0                	fnstsw ax
c0009ca4:	9e                   	sahf   
c0009ca5:	77 0f                	ja     c0009cb6 <sinc_multichan_vari_process+0x93>
c0009ca7:	dd d8                	fstp   st(0)
c0009ca9:	eb 11                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cab:	dd d9                	fstp   st(1)
c0009cad:	d9 e8                	fld1   
c0009caf:	d8 d9                	fcomp  st(1)
c0009cb1:	df e0                	fnstsw ax
c0009cb3:	9e                   	sahf   
c0009cb4:	76 04                	jbe    c0009cba <sinc_multichan_vari_process+0x97>
c0009cb6:	de f9                	fdivp  st(1),st
c0009cb8:	eb 02                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cba:	dd d8                	fstp   st(0)
c0009cbc:	83 ec 10             	sub    esp,0x10
c0009cbf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cc5:	e8 f6 48 01 00       	call   c001e5c0 <lrint>
c0009cca:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009ccd:	40                   	inc    eax
c0009cce:	dd 14 24             	fst    QWORD PTR [esp]
c0009cd1:	0f af c5             	imul   eax,ebp
c0009cd4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009cd8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009cdc:	e8 71 fd ff ff       	call   c0009a52 <fmod_one>
c0009ce1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ce4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009ce8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ceb:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009cef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cf3:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009cf7:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cfa:	e8 c1 48 01 00       	call   c001e5c0 <lrint>
c0009cff:	0f af e8             	imul   ebp,eax
c0009d02:	d9 e8                	fld1   
c0009d04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009d08:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d0c:	01 e8                	add    eax,ebp
c0009d0e:	dc 05 58 fd 01 c0    	fadd   QWORD PTR ds:0xc001fd58
c0009d14:	99                   	cdq    
c0009d15:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d19:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009d1c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009d1f:	83 c4 10             	add    esp,0x10
c0009d22:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009d25:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009d28:	7d 4b                	jge    c0009d75 <sinc_multichan_vari_process+0x152>
c0009d2a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d2d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d30:	01 c8                	add    eax,ecx
c0009d32:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d35:	99                   	cdq    
c0009d36:	f7 f9                	idiv   ecx
c0009d38:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d3c:	7d 09                	jge    c0009d47 <sinc_multichan_vari_process+0x124>
c0009d3e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009d41:	85 c0                	test   eax,eax
c0009d43:	79 57                	jns    c0009d9c <sinc_multichan_vari_process+0x179>
c0009d45:	eb 70                	jmp    c0009db7 <sinc_multichan_vari_process+0x194>
c0009d47:	51                   	push   ecx
c0009d48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d4c:	57                   	push   edi
c0009d4d:	53                   	push   ebx
c0009d4e:	e8 56 fd ff ff       	call   c0009aa9 <prepare_data>
c0009d53:	83 c4 10             	add    esp,0x10
c0009d56:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009d59:	85 c0                	test   eax,eax
c0009d5b:	0f 85 3e 01 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d61:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d64:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d67:	01 c8                	add    eax,ecx
c0009d69:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d6c:	99                   	cdq    
c0009d6d:	f7 f9                	idiv   ecx
c0009d6f:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d73:	7c c9                	jl     c0009d3e <sinc_multichan_vari_process+0x11b>
c0009d75:	dd 04 24             	fld    QWORD PTR [esp]
c0009d78:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009d7b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009d7f:	dd 1e                	fstp   QWORD PTR [esi]
c0009d81:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009d84:	99                   	cdq    
c0009d85:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d88:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009d8b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009d8e:	99                   	cdq    
c0009d8f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d92:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009d95:	31 c0                	xor    eax,eax
c0009d97:	e9 03 01 00 00       	jmp    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da0:	dd 04 24             	fld    QWORD PTR [esp]
c0009da3:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009da6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009daa:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009dae:	d9 c9                	fxch   st(1)
c0009db0:	de d9                	fcompp 
c0009db2:	df e0                	fnstsw ax
c0009db4:	9e                   	sahf   
c0009db5:	73 be                	jae    c0009d75 <sinc_multichan_vari_process+0x152>
c0009db7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009dbb:	7e 31                	jle    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009dbd:	83 ec 10             	sub    esp,0x10
c0009dc0:	dd 06                	fld    QWORD PTR [esi]
c0009dc2:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009dc8:	e8 d3 47 01 00       	call   c001e5a0 <fabs>
c0009dcd:	83 c4 10             	add    esp,0x10
c0009dd0:	dc 1d e0 fe 01 c0    	fcomp  QWORD PTR ds:0xc001fee0
c0009dd6:	df e0                	fnstsw ax
c0009dd8:	9e                   	sahf   
c0009dd9:	76 13                	jbe    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009ddb:	dd 06                	fld    QWORD PTR [esi]
c0009ddd:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009de0:	d8 e1                	fsub   st,st(1)
c0009de2:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009de5:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009de8:	de c1                	faddp  st(1),st
c0009dea:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009dee:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009df1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009df5:	d9 e8                	fld1   
c0009df7:	d8 d9                	fcomp  st(1)
c0009df9:	df e0                	fnstsw ax
c0009dfb:	9e                   	sahf   
c0009dfc:	77 04                	ja     c0009e02 <sinc_multichan_vari_process+0x1df>
c0009dfe:	dd d8                	fstp   st(0)
c0009e00:	d9 e8                	fld1   
c0009e02:	de c9                	fmulp  st(1),st
c0009e04:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e08:	50                   	push   eax
c0009e09:	50                   	push   eax
c0009e0a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e12:	e8 28 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e17:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009e1b:	89 c5                	mov    ebp,eax
c0009e1d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009e21:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e24:	e8 16 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e29:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009e2c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009e2f:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009e32:	89 c1                	mov    ecx,eax
c0009e34:	52                   	push   edx
c0009e35:	89 d8                	mov    eax,ebx
c0009e37:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009e3b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009e3e:	52                   	push   edx
c0009e3f:	52                   	push   edx
c0009e40:	89 ea                	mov    edx,ebp
c0009e42:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009e48:	e8 e9 f7 ff ff       	call   c0009636 <calc_output_multi>
c0009e4d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009e50:	d9 e8                	fld1   
c0009e52:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009e55:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009e59:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e5d:	83 c4 10             	add    esp,0x10
c0009e60:	dd 14 24             	fst    QWORD PTR [esp]
c0009e63:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009e67:	e8 e6 fb ff ff       	call   c0009a52 <fmod_one>
c0009e6c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009e6f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009e73:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009e76:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009e7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e7e:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009e82:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e85:	e8 36 47 01 00       	call   c001e5c0 <lrint>
c0009e8a:	0f af e8             	imul   ebp,eax
c0009e8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009e91:	01 e8                	add    eax,ebp
c0009e93:	99                   	cdq    
c0009e94:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009e97:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009e9a:	e9 80 fe ff ff       	jmp    c0009d1f <sinc_multichan_vari_process+0xfc>
c0009e9f:	83 c4 3c             	add    esp,0x3c
c0009ea2:	5b                   	pop    ebx
c0009ea3:	5e                   	pop    esi
c0009ea4:	5f                   	pop    edi
c0009ea5:	5d                   	pop    ebp
c0009ea6:	c3                   	ret    

c0009ea7 <sinc_hex_vari_process>:
c0009ea7:	55                   	push   ebp
c0009ea8:	b8 05 00 00 00       	mov    eax,0x5
c0009ead:	57                   	push   edi
c0009eae:	56                   	push   esi
c0009eaf:	53                   	push   ebx
c0009eb0:	83 ec 3c             	sub    esp,0x3c
c0009eb3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009eb7:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009ebb:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009ebe:	85 db                	test   ebx,ebx
c0009ec0:	0f 84 58 02 00 00    	je     c000a11e <sinc_hex_vari_process+0x277>
c0009ec6:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009ec9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009ecc:	0f af d0             	imul   edx,eax
c0009ecf:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009ed2:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ed6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009edd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009ee0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009ee7:	dd 06                	fld    QWORD PTR [esi]
c0009ee9:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009eed:	55                   	push   ebp
c0009eee:	55                   	push   ebp
c0009eef:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ef2:	e8 55 f0 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009ef7:	89 c2                	mov    edx,eax
c0009ef9:	58                   	pop    eax
c0009efa:	85 d2                	test   edx,edx
c0009efc:	59                   	pop    ecx
c0009efd:	b8 16 00 00 00       	mov    eax,0x16
c0009f02:	0f 85 16 02 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009f08:	d9 05 f0 fe 01 c0    	fld    DWORD PTR ds:0xc001fef0
c0009f0e:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009f11:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009f14:	dd 06                	fld    QWORD PTR [esi]
c0009f16:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009f19:	d8 d1                	fcom   st(1)
c0009f1b:	df e0                	fnstsw ax
c0009f1d:	9e                   	sahf   
c0009f1e:	76 0f                	jbe    c0009f2f <sinc_hex_vari_process+0x88>
c0009f20:	dd d8                	fstp   st(0)
c0009f22:	d9 e8                	fld1   
c0009f24:	d8 d9                	fcomp  st(1)
c0009f26:	df e0                	fnstsw ax
c0009f28:	9e                   	sahf   
c0009f29:	77 0f                	ja     c0009f3a <sinc_hex_vari_process+0x93>
c0009f2b:	dd d8                	fstp   st(0)
c0009f2d:	eb 11                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f2f:	dd d9                	fstp   st(1)
c0009f31:	d9 e8                	fld1   
c0009f33:	d8 d9                	fcomp  st(1)
c0009f35:	df e0                	fnstsw ax
c0009f37:	9e                   	sahf   
c0009f38:	76 04                	jbe    c0009f3e <sinc_hex_vari_process+0x97>
c0009f3a:	de f9                	fdivp  st(1),st
c0009f3c:	eb 02                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f3e:	dd d8                	fstp   st(0)
c0009f40:	83 ec 10             	sub    esp,0x10
c0009f43:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f46:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f49:	e8 72 46 01 00       	call   c001e5c0 <lrint>
c0009f4e:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009f51:	40                   	inc    eax
c0009f52:	dd 14 24             	fst    QWORD PTR [esp]
c0009f55:	0f af c5             	imul   eax,ebp
c0009f58:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f5c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009f60:	e8 ed fa ff ff       	call   c0009a52 <fmod_one>
c0009f65:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f68:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f6c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f6f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009f73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f77:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f7b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f7e:	e8 3d 46 01 00       	call   c001e5c0 <lrint>
c0009f83:	0f af e8             	imul   ebp,eax
c0009f86:	d9 e8                	fld1   
c0009f88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f8c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009f90:	01 e8                	add    eax,ebp
c0009f92:	dc 05 58 fd 01 c0    	fadd   QWORD PTR ds:0xc001fd58
c0009f98:	99                   	cdq    
c0009f99:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f9d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009fa0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009fa3:	83 c4 10             	add    esp,0x10
c0009fa6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009fa9:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009fac:	7d 4b                	jge    c0009ff9 <sinc_hex_vari_process+0x152>
c0009fae:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009fb4:	01 c8                	add    eax,ecx
c0009fb6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009fb9:	99                   	cdq    
c0009fba:	f7 f9                	idiv   ecx
c0009fbc:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009fc0:	7d 09                	jge    c0009fcb <sinc_hex_vari_process+0x124>
c0009fc2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009fc5:	85 c0                	test   eax,eax
c0009fc7:	79 57                	jns    c000a020 <sinc_hex_vari_process+0x179>
c0009fc9:	eb 70                	jmp    c000a03b <sinc_hex_vari_process+0x194>
c0009fcb:	51                   	push   ecx
c0009fcc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009fd0:	57                   	push   edi
c0009fd1:	53                   	push   ebx
c0009fd2:	e8 d2 fa ff ff       	call   c0009aa9 <prepare_data>
c0009fd7:	83 c4 10             	add    esp,0x10
c0009fda:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009fdd:	85 c0                	test   eax,eax
c0009fdf:	0f 85 39 01 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009fe5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fe8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009feb:	01 c8                	add    eax,ecx
c0009fed:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009ff0:	99                   	cdq    
c0009ff1:	f7 f9                	idiv   ecx
c0009ff3:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009ff7:	7c c9                	jl     c0009fc2 <sinc_hex_vari_process+0x11b>
c0009ff9:	dd 04 24             	fld    QWORD PTR [esp]
c0009ffc:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009fff:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a003:	dd 1e                	fstp   QWORD PTR [esi]
c000a005:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a008:	99                   	cdq    
c000a009:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a00c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a00f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a012:	99                   	cdq    
c000a013:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a016:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a019:	31 c0                	xor    eax,eax
c000a01b:	e9 fe 00 00 00       	jmp    c000a11e <sinc_hex_vari_process+0x277>
c000a020:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a024:	dd 04 24             	fld    QWORD PTR [esp]
c000a027:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a02a:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a02e:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a032:	d9 c9                	fxch   st(1)
c000a034:	de d9                	fcompp 
c000a036:	df e0                	fnstsw ax
c000a038:	9e                   	sahf   
c000a039:	73 be                	jae    c0009ff9 <sinc_hex_vari_process+0x152>
c000a03b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a03f:	7e 31                	jle    c000a072 <sinc_hex_vari_process+0x1cb>
c000a041:	83 ec 10             	sub    esp,0x10
c000a044:	dd 06                	fld    QWORD PTR [esi]
c000a046:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a049:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a04c:	e8 4f 45 01 00       	call   c001e5a0 <fabs>
c000a051:	83 c4 10             	add    esp,0x10
c000a054:	dc 1d e0 fe 01 c0    	fcomp  QWORD PTR ds:0xc001fee0
c000a05a:	df e0                	fnstsw ax
c000a05c:	9e                   	sahf   
c000a05d:	76 13                	jbe    c000a072 <sinc_hex_vari_process+0x1cb>
c000a05f:	dd 06                	fld    QWORD PTR [esi]
c000a061:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a064:	d8 e1                	fsub   st,st(1)
c000a066:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a069:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a06c:	de c1                	faddp  st(1),st
c000a06e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a072:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a075:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a079:	d9 e8                	fld1   
c000a07b:	d8 d9                	fcomp  st(1)
c000a07d:	df e0                	fnstsw ax
c000a07f:	9e                   	sahf   
c000a080:	77 04                	ja     c000a086 <sinc_hex_vari_process+0x1df>
c000a082:	dd d8                	fstp   st(0)
c000a084:	d9 e8                	fld1   
c000a086:	de c9                	fmulp  st(1),st
c000a088:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a08c:	50                   	push   eax
c000a08d:	50                   	push   eax
c000a08e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a092:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a096:	e8 a4 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a09b:	89 c5                	mov    ebp,eax
c000a09d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a0a1:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a0a5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0a8:	e8 92 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a0ad:	83 c4 0c             	add    esp,0xc
c000a0b0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a0b3:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a0b6:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a0b9:	89 c1                	mov    ecx,eax
c000a0bb:	52                   	push   edx
c000a0bc:	89 d8                	mov    eax,ebx
c000a0be:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a0c2:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a0c5:	52                   	push   edx
c000a0c6:	52                   	push   edx
c000a0c7:	89 ea                	mov    edx,ebp
c000a0c9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0cc:	e8 d1 f2 ff ff       	call   c00093a2 <calc_output_hex>
c000a0d1:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a0d5:	d9 e8                	fld1   
c000a0d7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a0db:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a0df:	dd 14 24             	fst    QWORD PTR [esp]
c000a0e2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a0e6:	e8 67 f9 ff ff       	call   c0009a52 <fmod_one>
c000a0eb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a0ee:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a0f2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a0f5:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a0f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a0fd:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a101:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a104:	e8 b7 44 01 00       	call   c001e5c0 <lrint>
c000a109:	0f af e8             	imul   ebp,eax
c000a10c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a110:	01 e8                	add    eax,ebp
c000a112:	99                   	cdq    
c000a113:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a116:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a119:	e9 85 fe ff ff       	jmp    c0009fa3 <sinc_hex_vari_process+0xfc>
c000a11e:	83 c4 3c             	add    esp,0x3c
c000a121:	5b                   	pop    ebx
c000a122:	5e                   	pop    esi
c000a123:	5f                   	pop    edi
c000a124:	5d                   	pop    ebp
c000a125:	c3                   	ret    

c000a126 <sinc_quad_vari_process>:
c000a126:	55                   	push   ebp
c000a127:	b8 05 00 00 00       	mov    eax,0x5
c000a12c:	57                   	push   edi
c000a12d:	56                   	push   esi
c000a12e:	53                   	push   ebx
c000a12f:	83 ec 3c             	sub    esp,0x3c
c000a132:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a136:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a13a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a13d:	85 db                	test   ebx,ebx
c000a13f:	0f 84 58 02 00 00    	je     c000a39d <sinc_quad_vari_process+0x277>
c000a145:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a148:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a14b:	0f af d0             	imul   edx,eax
c000a14e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a151:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a155:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a15c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a15f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a166:	dd 06                	fld    QWORD PTR [esi]
c000a168:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a16c:	55                   	push   ebp
c000a16d:	55                   	push   ebp
c000a16e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a171:	e8 d6 ed ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a176:	89 c2                	mov    edx,eax
c000a178:	58                   	pop    eax
c000a179:	85 d2                	test   edx,edx
c000a17b:	59                   	pop    ecx
c000a17c:	b8 16 00 00 00       	mov    eax,0x16
c000a181:	0f 85 16 02 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a187:	d9 05 f0 fe 01 c0    	fld    DWORD PTR ds:0xc001fef0
c000a18d:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a190:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a193:	dd 06                	fld    QWORD PTR [esi]
c000a195:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a198:	d8 d1                	fcom   st(1)
c000a19a:	df e0                	fnstsw ax
c000a19c:	9e                   	sahf   
c000a19d:	76 0f                	jbe    c000a1ae <sinc_quad_vari_process+0x88>
c000a19f:	dd d8                	fstp   st(0)
c000a1a1:	d9 e8                	fld1   
c000a1a3:	d8 d9                	fcomp  st(1)
c000a1a5:	df e0                	fnstsw ax
c000a1a7:	9e                   	sahf   
c000a1a8:	77 0f                	ja     c000a1b9 <sinc_quad_vari_process+0x93>
c000a1aa:	dd d8                	fstp   st(0)
c000a1ac:	eb 11                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1ae:	dd d9                	fstp   st(1)
c000a1b0:	d9 e8                	fld1   
c000a1b2:	d8 d9                	fcomp  st(1)
c000a1b4:	df e0                	fnstsw ax
c000a1b6:	9e                   	sahf   
c000a1b7:	76 04                	jbe    c000a1bd <sinc_quad_vari_process+0x97>
c000a1b9:	de f9                	fdivp  st(1),st
c000a1bb:	eb 02                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1bd:	dd d8                	fstp   st(0)
c000a1bf:	83 ec 10             	sub    esp,0x10
c000a1c2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1c5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1c8:	e8 f3 43 01 00       	call   c001e5c0 <lrint>
c000a1cd:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a1d0:	40                   	inc    eax
c000a1d1:	dd 14 24             	fst    QWORD PTR [esp]
c000a1d4:	0f af c5             	imul   eax,ebp
c000a1d7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a1db:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a1df:	e8 6e f8 ff ff       	call   c0009a52 <fmod_one>
c000a1e4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a1e7:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a1eb:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1ee:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a1f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1f6:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a1fa:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1fd:	e8 be 43 01 00       	call   c001e5c0 <lrint>
c000a202:	0f af e8             	imul   ebp,eax
c000a205:	d9 e8                	fld1   
c000a207:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a20b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a20f:	01 e8                	add    eax,ebp
c000a211:	dc 05 58 fd 01 c0    	fadd   QWORD PTR ds:0xc001fd58
c000a217:	99                   	cdq    
c000a218:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a21c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a21f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a222:	83 c4 10             	add    esp,0x10
c000a225:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a228:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a22b:	7d 4b                	jge    c000a278 <sinc_quad_vari_process+0x152>
c000a22d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a230:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a233:	01 c8                	add    eax,ecx
c000a235:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a238:	99                   	cdq    
c000a239:	f7 f9                	idiv   ecx
c000a23b:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a23f:	7d 09                	jge    c000a24a <sinc_quad_vari_process+0x124>
c000a241:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a244:	85 c0                	test   eax,eax
c000a246:	79 57                	jns    c000a29f <sinc_quad_vari_process+0x179>
c000a248:	eb 70                	jmp    c000a2ba <sinc_quad_vari_process+0x194>
c000a24a:	51                   	push   ecx
c000a24b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a24f:	57                   	push   edi
c000a250:	53                   	push   ebx
c000a251:	e8 53 f8 ff ff       	call   c0009aa9 <prepare_data>
c000a256:	83 c4 10             	add    esp,0x10
c000a259:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a25c:	85 c0                	test   eax,eax
c000a25e:	0f 85 39 01 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a264:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a267:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a26a:	01 c8                	add    eax,ecx
c000a26c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a26f:	99                   	cdq    
c000a270:	f7 f9                	idiv   ecx
c000a272:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a276:	7c c9                	jl     c000a241 <sinc_quad_vari_process+0x11b>
c000a278:	dd 04 24             	fld    QWORD PTR [esp]
c000a27b:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a27e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a282:	dd 1e                	fstp   QWORD PTR [esi]
c000a284:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a287:	99                   	cdq    
c000a288:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a28b:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a28e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a291:	99                   	cdq    
c000a292:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a295:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a298:	31 c0                	xor    eax,eax
c000a29a:	e9 fe 00 00 00       	jmp    c000a39d <sinc_quad_vari_process+0x277>
c000a29f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a2a3:	dd 04 24             	fld    QWORD PTR [esp]
c000a2a6:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a2a9:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a2ad:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a2b1:	d9 c9                	fxch   st(1)
c000a2b3:	de d9                	fcompp 
c000a2b5:	df e0                	fnstsw ax
c000a2b7:	9e                   	sahf   
c000a2b8:	73 be                	jae    c000a278 <sinc_quad_vari_process+0x152>
c000a2ba:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a2be:	7e 31                	jle    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2c0:	83 ec 10             	sub    esp,0x10
c000a2c3:	dd 06                	fld    QWORD PTR [esi]
c000a2c5:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a2c8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2cb:	e8 d0 42 01 00       	call   c001e5a0 <fabs>
c000a2d0:	83 c4 10             	add    esp,0x10
c000a2d3:	dc 1d e0 fe 01 c0    	fcomp  QWORD PTR ds:0xc001fee0
c000a2d9:	df e0                	fnstsw ax
c000a2db:	9e                   	sahf   
c000a2dc:	76 13                	jbe    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2de:	dd 06                	fld    QWORD PTR [esi]
c000a2e0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a2e3:	d8 e1                	fsub   st,st(1)
c000a2e5:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a2e8:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a2eb:	de c1                	faddp  st(1),st
c000a2ed:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a2f1:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a2f4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a2f8:	d9 e8                	fld1   
c000a2fa:	d8 d9                	fcomp  st(1)
c000a2fc:	df e0                	fnstsw ax
c000a2fe:	9e                   	sahf   
c000a2ff:	77 04                	ja     c000a305 <sinc_quad_vari_process+0x1df>
c000a301:	dd d8                	fstp   st(0)
c000a303:	d9 e8                	fld1   
c000a305:	de c9                	fmulp  st(1),st
c000a307:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a30b:	50                   	push   eax
c000a30c:	50                   	push   eax
c000a30d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a311:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a315:	e8 25 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a31a:	89 c5                	mov    ebp,eax
c000a31c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a320:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a324:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a327:	e8 13 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a32c:	83 c4 0c             	add    esp,0xc
c000a32f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a332:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a335:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a338:	89 c1                	mov    ecx,eax
c000a33a:	52                   	push   edx
c000a33b:	89 d8                	mov    eax,ebx
c000a33d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a341:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a344:	52                   	push   edx
c000a345:	52                   	push   edx
c000a346:	89 ea                	mov    edx,ebp
c000a348:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a34b:	e8 8d ee ff ff       	call   c00091dd <calc_output_quad>
c000a350:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a354:	d9 e8                	fld1   
c000a356:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a35a:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a35e:	dd 14 24             	fst    QWORD PTR [esp]
c000a361:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a365:	e8 e8 f6 ff ff       	call   c0009a52 <fmod_one>
c000a36a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a36d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a371:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a374:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a37c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a380:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a383:	e8 38 42 01 00       	call   c001e5c0 <lrint>
c000a388:	0f af e8             	imul   ebp,eax
c000a38b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a38f:	01 e8                	add    eax,ebp
c000a391:	99                   	cdq    
c000a392:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a395:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a398:	e9 85 fe ff ff       	jmp    c000a222 <sinc_quad_vari_process+0xfc>
c000a39d:	83 c4 3c             	add    esp,0x3c
c000a3a0:	5b                   	pop    ebx
c000a3a1:	5e                   	pop    esi
c000a3a2:	5f                   	pop    edi
c000a3a3:	5d                   	pop    ebp
c000a3a4:	c3                   	ret    

c000a3a5 <sinc_stereo_vari_process>:
c000a3a5:	55                   	push   ebp
c000a3a6:	b8 05 00 00 00       	mov    eax,0x5
c000a3ab:	57                   	push   edi
c000a3ac:	56                   	push   esi
c000a3ad:	53                   	push   ebx
c000a3ae:	83 ec 3c             	sub    esp,0x3c
c000a3b1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a3b5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a3b9:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a3bc:	85 db                	test   ebx,ebx
c000a3be:	0f 84 58 02 00 00    	je     c000a61c <sinc_stereo_vari_process+0x277>
c000a3c4:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a3c7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a3ca:	0f af d0             	imul   edx,eax
c000a3cd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a3d0:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a3d4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a3db:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a3de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a3e5:	dd 06                	fld    QWORD PTR [esi]
c000a3e7:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a3eb:	55                   	push   ebp
c000a3ec:	55                   	push   ebp
c000a3ed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3f0:	e8 57 eb ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a3f5:	89 c2                	mov    edx,eax
c000a3f7:	58                   	pop    eax
c000a3f8:	85 d2                	test   edx,edx
c000a3fa:	59                   	pop    ecx
c000a3fb:	b8 16 00 00 00       	mov    eax,0x16
c000a400:	0f 85 16 02 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a406:	d9 05 f0 fe 01 c0    	fld    DWORD PTR ds:0xc001fef0
c000a40c:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a40f:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a412:	dd 06                	fld    QWORD PTR [esi]
c000a414:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a417:	d8 d1                	fcom   st(1)
c000a419:	df e0                	fnstsw ax
c000a41b:	9e                   	sahf   
c000a41c:	76 0f                	jbe    c000a42d <sinc_stereo_vari_process+0x88>
c000a41e:	dd d8                	fstp   st(0)
c000a420:	d9 e8                	fld1   
c000a422:	d8 d9                	fcomp  st(1)
c000a424:	df e0                	fnstsw ax
c000a426:	9e                   	sahf   
c000a427:	77 0f                	ja     c000a438 <sinc_stereo_vari_process+0x93>
c000a429:	dd d8                	fstp   st(0)
c000a42b:	eb 11                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a42d:	dd d9                	fstp   st(1)
c000a42f:	d9 e8                	fld1   
c000a431:	d8 d9                	fcomp  st(1)
c000a433:	df e0                	fnstsw ax
c000a435:	9e                   	sahf   
c000a436:	76 04                	jbe    c000a43c <sinc_stereo_vari_process+0x97>
c000a438:	de f9                	fdivp  st(1),st
c000a43a:	eb 02                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a43c:	dd d8                	fstp   st(0)
c000a43e:	83 ec 10             	sub    esp,0x10
c000a441:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a444:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a447:	e8 74 41 01 00       	call   c001e5c0 <lrint>
c000a44c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a44f:	40                   	inc    eax
c000a450:	dd 14 24             	fst    QWORD PTR [esp]
c000a453:	0f af c5             	imul   eax,ebp
c000a456:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a45a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a45e:	e8 ef f5 ff ff       	call   c0009a52 <fmod_one>
c000a463:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a466:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a46a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a46d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a471:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a475:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a479:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a47c:	e8 3f 41 01 00       	call   c001e5c0 <lrint>
c000a481:	0f af e8             	imul   ebp,eax
c000a484:	d9 e8                	fld1   
c000a486:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a48a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a48e:	01 e8                	add    eax,ebp
c000a490:	dc 05 58 fd 01 c0    	fadd   QWORD PTR ds:0xc001fd58
c000a496:	99                   	cdq    
c000a497:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a49b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a49e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a4a1:	83 c4 10             	add    esp,0x10
c000a4a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a4a7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a4aa:	7d 4b                	jge    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a4ac:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4af:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4b2:	01 c8                	add    eax,ecx
c000a4b4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4b7:	99                   	cdq    
c000a4b8:	f7 f9                	idiv   ecx
c000a4ba:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4be:	7d 09                	jge    c000a4c9 <sinc_stereo_vari_process+0x124>
c000a4c0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a4c3:	85 c0                	test   eax,eax
c000a4c5:	79 57                	jns    c000a51e <sinc_stereo_vari_process+0x179>
c000a4c7:	eb 70                	jmp    c000a539 <sinc_stereo_vari_process+0x194>
c000a4c9:	51                   	push   ecx
c000a4ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a4ce:	57                   	push   edi
c000a4cf:	53                   	push   ebx
c000a4d0:	e8 d4 f5 ff ff       	call   c0009aa9 <prepare_data>
c000a4d5:	83 c4 10             	add    esp,0x10
c000a4d8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a4db:	85 c0                	test   eax,eax
c000a4dd:	0f 85 39 01 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a4e3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4e6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4e9:	01 c8                	add    eax,ecx
c000a4eb:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4ee:	99                   	cdq    
c000a4ef:	f7 f9                	idiv   ecx
c000a4f1:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4f5:	7c c9                	jl     c000a4c0 <sinc_stereo_vari_process+0x11b>
c000a4f7:	dd 04 24             	fld    QWORD PTR [esp]
c000a4fa:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a4fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a501:	dd 1e                	fstp   QWORD PTR [esi]
c000a503:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a506:	99                   	cdq    
c000a507:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a50a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a50d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a510:	99                   	cdq    
c000a511:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a514:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a517:	31 c0                	xor    eax,eax
c000a519:	e9 fe 00 00 00       	jmp    c000a61c <sinc_stereo_vari_process+0x277>
c000a51e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a522:	dd 04 24             	fld    QWORD PTR [esp]
c000a525:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a528:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a52c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a530:	d9 c9                	fxch   st(1)
c000a532:	de d9                	fcompp 
c000a534:	df e0                	fnstsw ax
c000a536:	9e                   	sahf   
c000a537:	73 be                	jae    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a539:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a53d:	7e 31                	jle    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a53f:	83 ec 10             	sub    esp,0x10
c000a542:	dd 06                	fld    QWORD PTR [esi]
c000a544:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a547:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a54a:	e8 51 40 01 00       	call   c001e5a0 <fabs>
c000a54f:	83 c4 10             	add    esp,0x10
c000a552:	dc 1d e0 fe 01 c0    	fcomp  QWORD PTR ds:0xc001fee0
c000a558:	df e0                	fnstsw ax
c000a55a:	9e                   	sahf   
c000a55b:	76 13                	jbe    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a55d:	dd 06                	fld    QWORD PTR [esi]
c000a55f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a562:	d8 e1                	fsub   st,st(1)
c000a564:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a567:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a56a:	de c1                	faddp  st(1),st
c000a56c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a570:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a573:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a577:	d9 e8                	fld1   
c000a579:	d8 d9                	fcomp  st(1)
c000a57b:	df e0                	fnstsw ax
c000a57d:	9e                   	sahf   
c000a57e:	77 04                	ja     c000a584 <sinc_stereo_vari_process+0x1df>
c000a580:	dd d8                	fstp   st(0)
c000a582:	d9 e8                	fld1   
c000a584:	de c9                	fmulp  st(1),st
c000a586:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a58a:	50                   	push   eax
c000a58b:	50                   	push   eax
c000a58c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a594:	e8 a6 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a599:	89 c5                	mov    ebp,eax
c000a59b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a59f:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a5a3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5a6:	e8 94 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a5ab:	83 c4 0c             	add    esp,0xc
c000a5ae:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a5b1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a5b4:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a5b7:	89 c1                	mov    ecx,eax
c000a5b9:	52                   	push   edx
c000a5ba:	89 d8                	mov    eax,ebx
c000a5bc:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a5c0:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a5c3:	52                   	push   edx
c000a5c4:	52                   	push   edx
c000a5c5:	89 ea                	mov    edx,ebp
c000a5c7:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5ca:	e8 ce ea ff ff       	call   c000909d <calc_output_stereo>
c000a5cf:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a5d3:	d9 e8                	fld1   
c000a5d5:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a5d9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a5dd:	dd 14 24             	fst    QWORD PTR [esp]
c000a5e0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a5e4:	e8 69 f4 ff ff       	call   c0009a52 <fmod_one>
c000a5e9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a5ec:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a5f0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a5f3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a5f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5fb:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a5ff:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a602:	e8 b9 3f 01 00       	call   c001e5c0 <lrint>
c000a607:	0f af e8             	imul   ebp,eax
c000a60a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a60e:	01 e8                	add    eax,ebp
c000a610:	99                   	cdq    
c000a611:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a614:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a617:	e9 85 fe ff ff       	jmp    c000a4a1 <sinc_stereo_vari_process+0xfc>
c000a61c:	83 c4 3c             	add    esp,0x3c
c000a61f:	5b                   	pop    ebx
c000a620:	5e                   	pop    esi
c000a621:	5f                   	pop    edi
c000a622:	5d                   	pop    ebp
c000a623:	c3                   	ret    

c000a624 <sinc_mono_vari_process>:
c000a624:	55                   	push   ebp
c000a625:	b8 05 00 00 00       	mov    eax,0x5
c000a62a:	57                   	push   edi
c000a62b:	56                   	push   esi
c000a62c:	53                   	push   ebx
c000a62d:	83 ec 3c             	sub    esp,0x3c
c000a630:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a634:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a638:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a63b:	85 db                	test   ebx,ebx
c000a63d:	0f 84 57 02 00 00    	je     c000a89a <sinc_mono_vari_process+0x276>
c000a643:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a646:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a649:	0f af d0             	imul   edx,eax
c000a64c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a64f:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a653:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a65a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a65d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a664:	dd 06                	fld    QWORD PTR [esi]
c000a666:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a66a:	51                   	push   ecx
c000a66b:	51                   	push   ecx
c000a66c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a66f:	e8 d8 e8 ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a674:	5d                   	pop    ebp
c000a675:	89 c2                	mov    edx,eax
c000a677:	58                   	pop    eax
c000a678:	85 d2                	test   edx,edx
c000a67a:	b8 16 00 00 00       	mov    eax,0x16
c000a67f:	0f 85 15 02 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a685:	d9 05 f0 fe 01 c0    	fld    DWORD PTR ds:0xc001fef0
c000a68b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a68e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a691:	dd 06                	fld    QWORD PTR [esi]
c000a693:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a696:	d8 d1                	fcom   st(1)
c000a698:	df e0                	fnstsw ax
c000a69a:	9e                   	sahf   
c000a69b:	76 0f                	jbe    c000a6ac <sinc_mono_vari_process+0x88>
c000a69d:	dd d8                	fstp   st(0)
c000a69f:	d9 e8                	fld1   
c000a6a1:	d8 d9                	fcomp  st(1)
c000a6a3:	df e0                	fnstsw ax
c000a6a5:	9e                   	sahf   
c000a6a6:	77 0f                	ja     c000a6b7 <sinc_mono_vari_process+0x93>
c000a6a8:	dd d8                	fstp   st(0)
c000a6aa:	eb 11                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6ac:	dd d9                	fstp   st(1)
c000a6ae:	d9 e8                	fld1   
c000a6b0:	d8 d9                	fcomp  st(1)
c000a6b2:	df e0                	fnstsw ax
c000a6b4:	9e                   	sahf   
c000a6b5:	76 04                	jbe    c000a6bb <sinc_mono_vari_process+0x97>
c000a6b7:	de f9                	fdivp  st(1),st
c000a6b9:	eb 02                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6bb:	dd d8                	fstp   st(0)
c000a6bd:	83 ec 10             	sub    esp,0x10
c000a6c0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a6c3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6c6:	e8 f5 3e 01 00       	call   c001e5c0 <lrint>
c000a6cb:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a6ce:	40                   	inc    eax
c000a6cf:	dd 14 24             	fst    QWORD PTR [esp]
c000a6d2:	0f af e8             	imul   ebp,eax
c000a6d5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a6d9:	e8 74 f3 ff ff       	call   c0009a52 <fmod_one>
c000a6de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a6e1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a6e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6e9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a6ed:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6f0:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a6f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a6f8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6fb:	e8 c0 3e 01 00       	call   c001e5c0 <lrint>
c000a700:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a705:	d9 e8                	fld1   
c000a707:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a70b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a70f:	99                   	cdq    
c000a710:	dc 05 58 fd 01 c0    	fadd   QWORD PTR ds:0xc001fd58
c000a716:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a719:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a71d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a720:	83 c4 10             	add    esp,0x10
c000a723:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a726:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a729:	7d 44                	jge    c000a76f <sinc_mono_vari_process+0x14b>
c000a72b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a72e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a731:	01 c8                	add    eax,ecx
c000a733:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a736:	99                   	cdq    
c000a737:	f7 f9                	idiv   ecx
c000a739:	39 d5                	cmp    ebp,edx
c000a73b:	7d 09                	jge    c000a746 <sinc_mono_vari_process+0x122>
c000a73d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a740:	85 c0                	test   eax,eax
c000a742:	79 52                	jns    c000a796 <sinc_mono_vari_process+0x172>
c000a744:	eb 6b                	jmp    c000a7b1 <sinc_mono_vari_process+0x18d>
c000a746:	52                   	push   edx
c000a747:	55                   	push   ebp
c000a748:	57                   	push   edi
c000a749:	53                   	push   ebx
c000a74a:	e8 5a f3 ff ff       	call   c0009aa9 <prepare_data>
c000a74f:	83 c4 10             	add    esp,0x10
c000a752:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a755:	85 c0                	test   eax,eax
c000a757:	0f 85 3d 01 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a75d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a760:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a763:	01 c8                	add    eax,ecx
c000a765:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a768:	99                   	cdq    
c000a769:	f7 f9                	idiv   ecx
c000a76b:	39 d5                	cmp    ebp,edx
c000a76d:	7c ce                	jl     c000a73d <sinc_mono_vari_process+0x119>
c000a76f:	dd 04 24             	fld    QWORD PTR [esp]
c000a772:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a775:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a779:	dd 1e                	fstp   QWORD PTR [esi]
c000a77b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a77e:	99                   	cdq    
c000a77f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a782:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a785:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a788:	99                   	cdq    
c000a789:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a78c:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a78f:	31 c0                	xor    eax,eax
c000a791:	e9 04 01 00 00       	jmp    c000a89a <sinc_mono_vari_process+0x276>
c000a796:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a79a:	dd 04 24             	fld    QWORD PTR [esp]
c000a79d:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a7a0:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a7a4:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a7a8:	d9 c9                	fxch   st(1)
c000a7aa:	de d9                	fcompp 
c000a7ac:	df e0                	fnstsw ax
c000a7ae:	9e                   	sahf   
c000a7af:	77 be                	ja     c000a76f <sinc_mono_vari_process+0x14b>
c000a7b1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a7b5:	7e 31                	jle    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7b7:	83 ec 10             	sub    esp,0x10
c000a7ba:	dd 06                	fld    QWORD PTR [esi]
c000a7bc:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a7bf:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7c2:	e8 d9 3d 01 00       	call   c001e5a0 <fabs>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	dc 1d e0 fe 01 c0    	fcomp  QWORD PTR ds:0xc001fee0
c000a7d0:	df e0                	fnstsw ax
c000a7d2:	9e                   	sahf   
c000a7d3:	76 13                	jbe    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7d5:	dd 06                	fld    QWORD PTR [esi]
c000a7d7:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a7da:	d8 e1                	fsub   st,st(1)
c000a7dc:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a7df:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a7e2:	de c1                	faddp  st(1),st
c000a7e4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a7e8:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a7eb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a7ef:	d9 e8                	fld1   
c000a7f1:	d8 d9                	fcomp  st(1)
c000a7f3:	df e0                	fnstsw ax
c000a7f5:	9e                   	sahf   
c000a7f6:	77 04                	ja     c000a7fc <sinc_mono_vari_process+0x1d8>
c000a7f8:	dd d8                	fstp   st(0)
c000a7fa:	d9 e8                	fld1   
c000a7fc:	de c9                	fmulp  st(1),st
c000a7fe:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a802:	50                   	push   eax
c000a803:	50                   	push   eax
c000a804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a80c:	e8 2e f2 ff ff       	call   c0009a3f <double_to_fp>
c000a811:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a815:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a819:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a81d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a820:	e8 1a f2 ff ff       	call   c0009a3f <double_to_fp>
c000a825:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a829:	89 c1                	mov    ecx,eax
c000a82b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a82f:	89 d8                	mov    eax,ebx
c000a831:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a834:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a838:	e8 7b e7 ff ff       	call   c0008fb8 <calc_output_single>
c000a83d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a840:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a843:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a847:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a84a:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a84d:	d9 e8                	fld1   
c000a84f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a853:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a857:	dd 14 24             	fst    QWORD PTR [esp]
c000a85a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a85e:	e8 ef f1 ff ff       	call   c0009a52 <fmod_one>
c000a863:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a866:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a86a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a86e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a872:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a875:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a879:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a87d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a880:	e8 3b 3d 01 00       	call   c001e5c0 <lrint>
c000a885:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a88a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88e:	99                   	cdq    
c000a88f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a892:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a895:	e9 86 fe ff ff       	jmp    c000a720 <sinc_mono_vari_process+0xfc>
c000a89a:	83 c4 3c             	add    esp,0x3c
c000a89d:	5b                   	pop    ebx
c000a89e:	5e                   	pop    esi
c000a89f:	5f                   	pop    edi
c000a8a0:	5d                   	pop    ebp
c000a8a1:	c3                   	ret    

c000a8a2 <sinc_get_name>:
c000a8a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8a6:	31 c0                	xor    eax,eax
c000a8a8:	83 fa 02             	cmp    edx,0x2
c000a8ab:	77 07                	ja     c000a8b4 <sinc_get_name+0x12>
c000a8ad:	8b 04 95 c0 fd 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0240]
c000a8b4:	c3                   	ret    

c000a8b5 <sinc_get_description>:
c000a8b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8b9:	31 c0                	xor    eax,eax
c000a8bb:	83 fa 02             	cmp    edx,0x2
c000a8be:	77 07                	ja     c000a8c7 <sinc_get_description+0x12>
c000a8c0:	8b 04 95 b4 fd 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe024c]
c000a8c7:	c3                   	ret    

c000a8c8 <sinc_set_converter>:
c000a8c8:	53                   	push   ebx
c000a8c9:	81 ec 58 08 00 00    	sub    esp,0x858
c000a8cf:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a8d6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a8d9:	85 c0                	test   eax,eax
c000a8db:	74 13                	je     c000a8f0 <sinc_set_converter+0x28>
c000a8dd:	83 ec 0c             	sub    esp,0xc
c000a8e0:	50                   	push   eax
c000a8e1:	e8 48 13 00 00       	call   c000bc2e <free>
c000a8e6:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a8ed:	83 c4 10             	add    esp,0x10
c000a8f0:	50                   	push   eax
c000a8f1:	68 44 08 00 00       	push   0x844
c000a8f6:	6a 00                	push   0x0
c000a8f8:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a8fc:	50                   	push   eax
c000a8fd:	e8 06 5d ff ff       	call   c0000608 <memset>
c000a902:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a905:	83 c4 10             	add    esp,0x10
c000a908:	b8 0b 00 00 00       	mov    eax,0xb
c000a90d:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a913:	7f 6e                	jg     c000a983 <sinc_set_converter+0xbb>
c000a915:	83 fa 01             	cmp    edx,0x1
c000a918:	75 10                	jne    c000a92a <sinc_set_converter+0x62>
c000a91a:	c7 43 24 24 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a624
c000a921:	c7 43 20 24 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a624
c000a928:	eb 4d                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a92a:	83 fa 02             	cmp    edx,0x2
c000a92d:	75 10                	jne    c000a93f <sinc_set_converter+0x77>
c000a92f:	c7 43 24 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a3a5
c000a936:	c7 43 20 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a3a5
c000a93d:	eb 38                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a93f:	83 fa 04             	cmp    edx,0x4
c000a942:	75 10                	jne    c000a954 <sinc_set_converter+0x8c>
c000a944:	c7 43 24 26 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a126
c000a94b:	c7 43 20 26 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a126
c000a952:	eb 23                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a954:	83 fa 06             	cmp    edx,0x6
c000a957:	75 10                	jne    c000a969 <sinc_set_converter+0xa1>
c000a959:	c7 43 24 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009ea7
c000a960:	c7 43 20 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009ea7
c000a967:	eb 0e                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a969:	c7 43 24 23 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009c23
c000a970:	c7 43 20 23 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009c23
c000a977:	c7 43 28 d3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095d3
c000a97e:	b8 0a 00 00 00       	mov    eax,0xa
c000a983:	81 c4 58 08 00 00    	add    esp,0x858
c000a989:	5b                   	pop    ebx
c000a98a:	c3                   	ret    

c000a98b <is_bad_src_ratio>:
c000a98b:	83 ec 0c             	sub    esp,0xc
c000a98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a992:	89 04 24             	mov    DWORD PTR [esp],eax
c000a995:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a999:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a99d:	dd 04 24             	fld    QWORD PTR [esp]
c000a9a0:	dd 05 e0 fc 01 c0    	fld    QWORD PTR ds:0xc001fce0
c000a9a6:	de d9                	fcompp 
c000a9a8:	df e0                	fnstsw ax
c000a9aa:	f6 c4 45             	test   ah,0x45
c000a9ad:	74 10                	je     c000a9bf <is_bad_src_ratio+0x34>
c000a9af:	dd 04 24             	fld    QWORD PTR [esp]
c000a9b2:	dc 1d e8 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fce8
c000a9b8:	df e0                	fnstsw ax
c000a9ba:	f6 c4 45             	test   ah,0x45
c000a9bd:	75 07                	jne    c000a9c6 <is_bad_src_ratio+0x3b>
c000a9bf:	b8 01 00 00 00       	mov    eax,0x1
c000a9c4:	eb 05                	jmp    c000a9cb <is_bad_src_ratio+0x40>
c000a9c6:	b8 00 00 00 00       	mov    eax,0x0
c000a9cb:	83 c4 0c             	add    esp,0xc
c000a9ce:	c3                   	ret    

c000a9cf <fmod_one>:
c000a9cf:	83 ec 2c             	sub    esp,0x2c
c000a9d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a9d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9e2:	83 ec 08             	sub    esp,0x8
c000a9e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ed:	e8 ce 3b 01 00       	call   c001e5c0 <lrint>
c000a9f2:	83 c4 10             	add    esp,0x10
c000a9f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9f9:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000a9fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa01:	de e1                	fsubrp st(1),st
c000aa03:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa07:	d9 ee                	fldz   
c000aa09:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa0d:	df e0                	fnstsw ax
c000aa0f:	f6 c4 45             	test   ah,0x45
c000aa12:	75 0a                	jne    c000aa1e <fmod_one+0x4f>
c000aa14:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa18:	d9 e8                	fld1   
c000aa1a:	de c1                	faddp  st(1),st
c000aa1c:	eb 04                	jmp    c000aa22 <fmod_one+0x53>
c000aa1e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa22:	83 c4 2c             	add    esp,0x2c
c000aa25:	c3                   	ret    

c000aa26 <zoh_vari_process>:
c000aa26:	55                   	push   ebp
c000aa27:	57                   	push   edi
c000aa28:	56                   	push   esi
c000aa29:	53                   	push   ebx
c000aa2a:	83 ec 2c             	sub    esp,0x2c
c000aa2d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aa31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aa35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aa3d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aa41:	0f 8e 34 02 00 00    	jle    c000ac7b <zoh_vari_process+0x255>
c000aa47:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aa4a:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aa52:	85 db                	test   ebx,ebx
c000aa54:	0f 84 21 02 00 00    	je     c000ac7b <zoh_vari_process+0x255>
c000aa5a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aa5d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aa61:	74 19                	je     c000aa7c <zoh_vari_process+0x56>
c000aa63:	31 d2                	xor    edx,edx
c000aa65:	39 c2                	cmp    edx,eax
c000aa67:	7d 0c                	jge    c000aa75 <zoh_vari_process+0x4f>
c000aa69:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aa6b:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aa6e:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aa72:	42                   	inc    edx
c000aa73:	eb f0                	jmp    c000aa65 <zoh_vari_process+0x3f>
c000aa75:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000aa7c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000aa7f:	0f af d0             	imul   edx,eax
c000aa82:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000aa85:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000aa89:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000aa90:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aa93:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000aa9a:	dd 07                	fld    QWORD PTR [edi]
c000aa9c:	dd 14 24             	fst    QWORD PTR [esp]
c000aa9f:	50                   	push   eax
c000aaa0:	50                   	push   eax
c000aaa1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaa4:	e8 e2 fe ff ff       	call   c000a98b <is_bad_src_ratio>
c000aaa9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aaad:	5a                   	pop    edx
c000aaae:	59                   	pop    ecx
c000aaaf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aab4:	0f 85 b9 01 00 00    	jne    c000ac73 <zoh_vari_process+0x24d>
c000aaba:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000aabd:	d9 e8                	fld1   
c000aabf:	d8 d1                	fcom   st(1)
c000aac1:	df e0                	fnstsw ax
c000aac3:	9e                   	sahf   
c000aac4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aac8:	0f 86 85 00 00 00    	jbe    c000ab53 <zoh_vari_process+0x12d>
c000aace:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aad1:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aad4:	7d 7d                	jge    c000ab53 <zoh_vari_process+0x12d>
c000aad6:	d9 c0                	fld    st(0)
c000aad8:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aadb:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000aade:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000aae1:	df e0                	fnstsw ax
c000aae3:	9e                   	sahf   
c000aae4:	73 6d                	jae    c000ab53 <zoh_vari_process+0x12d>
c000aae6:	85 d2                	test   edx,edx
c000aae8:	7e 38                	jle    c000ab22 <zoh_vari_process+0xfc>
c000aaea:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aaee:	83 ec 10             	sub    esp,0x10
c000aaf1:	dd 07                	fld    QWORD PTR [edi]
c000aaf3:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000aaf6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaf9:	e8 a2 3a 01 00       	call   c001e5a0 <fabs>
c000aafe:	83 c4 10             	add    esp,0x10
c000ab01:	dc 1d 58 fd 01 c0    	fcomp  QWORD PTR ds:0xc001fd58
c000ab07:	df e0                	fnstsw ax
c000ab09:	9e                   	sahf   
c000ab0a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab0e:	76 12                	jbe    c000ab22 <zoh_vari_process+0xfc>
c000ab10:	dd 07                	fld    QWORD PTR [edi]
c000ab12:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ab15:	d8 e1                	fsub   st,st(1)
c000ab17:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ab1a:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ab1d:	de c1                	faddp  st(1),st
c000ab1f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab22:	31 c0                	xor    eax,eax
c000ab24:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ab27:	7e 13                	jle    c000ab3c <zoh_vari_process+0x116>
c000ab29:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000ab2d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ab30:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ab33:	40                   	inc    eax
c000ab34:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000ab37:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ab3a:	eb e8                	jmp    c000ab24 <zoh_vari_process+0xfe>
c000ab3c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab40:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab43:	de c1                	faddp  st(1),st
c000ab45:	e9 73 ff ff ff       	jmp    c000aabd <zoh_vari_process+0x97>
c000ab4a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab4e:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab51:	de c1                	faddp  st(1),st
c000ab53:	83 ec 10             	sub    esp,0x10
c000ab56:	dd 14 24             	fst    QWORD PTR [esp]
c000ab59:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab5d:	e8 6d fe ff ff       	call   c000a9cf <fmod_one>
c000ab62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ab65:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ab69:	d8 e1                	fsub   st,st(1)
c000ab6b:	d9 c9                	fxch   st(1)
c000ab6d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab71:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab74:	e8 47 3a 01 00       	call   c001e5c0 <lrint>
c000ab79:	83 c4 10             	add    esp,0x10
c000ab7c:	0f af e8             	imul   ebp,eax
c000ab7f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab82:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ab85:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ab8c:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ab8f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab92:	0f 8d 82 00 00 00    	jge    c000ac1a <zoh_vari_process+0x1f4>
c000ab98:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ab9c:	d9 c0                	fld    st(0)
c000ab9e:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aba1:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000aba5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000aba9:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000abad:	de d9                	fcompp 
c000abaf:	df e0                	fnstsw ax
c000abb1:	9e                   	sahf   
c000abb2:	72 66                	jb     c000ac1a <zoh_vari_process+0x1f4>
c000abb4:	85 d2                	test   edx,edx
c000abb6:	7e 38                	jle    c000abf0 <zoh_vari_process+0x1ca>
c000abb8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000abbc:	83 ec 10             	sub    esp,0x10
c000abbf:	dd 07                	fld    QWORD PTR [edi]
c000abc1:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000abc4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abc7:	e8 d4 39 01 00       	call   c001e5a0 <fabs>
c000abcc:	83 c4 10             	add    esp,0x10
c000abcf:	dc 1d 58 fd 01 c0    	fcomp  QWORD PTR ds:0xc001fd58
c000abd5:	df e0                	fnstsw ax
c000abd7:	9e                   	sahf   
c000abd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000abdc:	76 12                	jbe    c000abf0 <zoh_vari_process+0x1ca>
c000abde:	dd 07                	fld    QWORD PTR [edi]
c000abe0:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abe3:	d8 e1                	fsub   st,st(1)
c000abe5:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abe8:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abeb:	de c1                	faddp  st(1),st
c000abed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abf0:	31 d2                	xor    edx,edx
c000abf2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000abf5:	39 d0                	cmp    eax,edx
c000abf7:	0f 8e 4d ff ff ff    	jle    c000ab4a <zoh_vari_process+0x124>
c000abfd:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac00:	29 c1                	sub    ecx,eax
c000ac02:	89 c8                	mov    eax,ecx
c000ac04:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac06:	01 d0                	add    eax,edx
c000ac08:	42                   	inc    edx
c000ac09:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac0c:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac0f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac12:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac15:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac18:	eb d8                	jmp    c000abf2 <zoh_vari_process+0x1cc>
c000ac1a:	39 e9                	cmp    ecx,ebp
c000ac1c:	7d 13                	jge    c000ac31 <zoh_vari_process+0x20b>
c000ac1e:	89 e8                	mov    eax,ebp
c000ac20:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000ac23:	29 c8                	sub    eax,ecx
c000ac25:	99                   	cdq    
c000ac26:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac2d:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000ac31:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000ac34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac37:	85 c0                	test   eax,eax
c000ac39:	7f 1b                	jg     c000ac56 <zoh_vari_process+0x230>
c000ac3b:	dd 04 24             	fld    QWORD PTR [esp]
c000ac3e:	dd 1f                	fstp   QWORD PTR [edi]
c000ac40:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac43:	99                   	cdq    
c000ac44:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac47:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ac4a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac4d:	99                   	cdq    
c000ac4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac51:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000ac54:	eb 25                	jmp    c000ac7b <zoh_vari_process+0x255>
c000ac56:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac59:	31 d2                	xor    edx,edx
c000ac5b:	29 e8                	sub    eax,ebp
c000ac5d:	c1 e0 02             	shl    eax,0x2
c000ac60:	39 d5                	cmp    ebp,edx
c000ac62:	7e d7                	jle    c000ac3b <zoh_vari_process+0x215>
c000ac64:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac66:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ac69:	83 c0 04             	add    eax,0x4
c000ac6c:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ac70:	42                   	inc    edx
c000ac71:	eb ed                	jmp    c000ac60 <zoh_vari_process+0x23a>
c000ac73:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ac7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ac7f:	83 c4 2c             	add    esp,0x2c
c000ac82:	5b                   	pop    ebx
c000ac83:	5e                   	pop    esi
c000ac84:	5f                   	pop    edi
c000ac85:	5d                   	pop    ebp
c000ac86:	c3                   	ret    

c000ac87 <zoh_reset>:
c000ac87:	83 ec 0c             	sub    esp,0xc
c000ac8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac8e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ac91:	85 c0                	test   eax,eax
c000ac93:	74 20                	je     c000acb5 <zoh_reset+0x2e>
c000ac95:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ac98:	83 c0 1c             	add    eax,0x1c
c000ac9b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000ac9e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000aca5:	c1 e2 02             	shl    edx,0x2
c000aca8:	51                   	push   ecx
c000aca9:	52                   	push   edx
c000acaa:	6a 00                	push   0x0
c000acac:	50                   	push   eax
c000acad:	e8 56 59 ff ff       	call   c0000608 <memset>
c000acb2:	83 c4 10             	add    esp,0x10
c000acb5:	83 c4 0c             	add    esp,0xc
c000acb8:	c3                   	ret    

c000acb9 <zoh_get_name>:
c000acb9:	31 c0                	xor    eax,eax
c000acbb:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000acc0:	75 05                	jne    c000acc7 <zoh_get_name+0xe>
c000acc2:	b8 f4 fe 01 c0       	mov    eax,0xc001fef4
c000acc7:	c3                   	ret    

c000acc8 <zoh_get_description>:
c000acc8:	31 c0                	xor    eax,eax
c000acca:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000accf:	75 05                	jne    c000acd6 <zoh_get_description+0xe>
c000acd1:	b8 05 ff 01 c0       	mov    eax,0xc001ff05
c000acd6:	c3                   	ret    

c000acd7 <zoh_set_converter>:
c000acd7:	53                   	push   ebx
c000acd8:	b8 0a 00 00 00       	mov    eax,0xa
c000acdd:	83 ec 08             	sub    esp,0x8
c000ace0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ace4:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ace9:	75 6e                	jne    c000ad59 <zoh_set_converter+0x82>
c000aceb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000acee:	85 c0                	test   eax,eax
c000acf0:	74 13                	je     c000ad05 <zoh_set_converter+0x2e>
c000acf2:	83 ec 0c             	sub    esp,0xc
c000acf5:	50                   	push   eax
c000acf6:	e8 33 0f 00 00       	call   c000bc2e <free>
c000acfb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad02:	83 c4 10             	add    esp,0x10
c000ad05:	50                   	push   eax
c000ad06:	50                   	push   eax
c000ad07:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad0a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad11:	50                   	push   eax
c000ad12:	6a 01                	push   0x1
c000ad14:	e8 35 0f 00 00       	call   c000bc4e <calloc>
c000ad19:	83 c4 10             	add    esp,0x10
c000ad1c:	89 c2                	mov    edx,eax
c000ad1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ad21:	85 d2                	test   edx,edx
c000ad23:	b8 01 00 00 00       	mov    eax,0x1
c000ad28:	74 2f                	je     c000ad59 <zoh_set_converter+0x82>
c000ad2a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad2d:	83 ec 0c             	sub    esp,0xc
c000ad30:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ad33:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000ad39:	c7 43 24 26 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aa26
c000ad40:	c7 43 20 26 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aa26
c000ad47:	c7 43 28 87 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ac87
c000ad4e:	53                   	push   ebx
c000ad4f:	e8 33 ff ff ff       	call   c000ac87 <zoh_reset>
c000ad54:	83 c4 10             	add    esp,0x10
c000ad57:	31 c0                	xor    eax,eax
c000ad59:	83 c4 08             	add    esp,0x8
c000ad5c:	5b                   	pop    ebx
c000ad5d:	c3                   	ret    

c000ad5e <Computer::close(int, int, void*)>:
c000ad5e:	57                   	push   edi
c000ad5f:	56                   	push   esi
c000ad60:	53                   	push   ebx
c000ad61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ad69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ad6d:	83 ec 0c             	sub    esp,0xc
c000ad70:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000ad76:	e8 eb 55 00 00       	call   c0010366 <Device::closeAll()>
c000ad7b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ad81:	83 c4 10             	add    esp,0x10
c000ad84:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad86:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ad8a:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ad92:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ad96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ad9a:	5b                   	pop    ebx
c000ad9b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ad9e:	5e                   	pop    esi
c000ad9f:	5f                   	pop    edi
c000ada0:	ff e0                	jmp    eax

c000ada2 <Computer::Computer()>:
c000ada2:	83 ec 0c             	sub    esp,0xc
c000ada5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ada9:	83 ec 08             	sub    esp,0x8
c000adac:	68 3c ff 01 c0       	push   0xc001ff3c
c000adb1:	50                   	push   eax
c000adb2:	e8 29 56 00 00       	call   c00103e0 <Device::Device(char const*)>
c000adb7:	83 c4 10             	add    esp,0x10
c000adba:	ba b8 ff 01 c0       	mov    edx,0xc001ffb8
c000adbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc3:	89 10                	mov    DWORD PTR [eax],edx
c000adc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc9:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000add3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add7:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ade1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000adeb:	83 ca 04             	or     edx,0x4
c000adee:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000adf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000adfe:	0f b6 d0             	movzx  edx,al
c000ae01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae05:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae16:	0f b6 d0             	movzx  edx,al
c000ae19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae1d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ae22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae2c:	8d 50 01             	lea    edx,[eax+0x1]
c000ae2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae33:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae39:	0f b6 d0             	movzx  edx,al
c000ae3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae40:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae44:	83 e1 3f             	and    ecx,0x3f
c000ae47:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000ae4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae55:	0f b6 d0             	movzx  edx,al
c000ae58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5c:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ae63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae6d:	0f b6 d0             	movzx  edx,al
c000ae70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae74:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000ae79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae83:	8d 50 01             	lea    edx,[eax+0x1]
c000ae86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae8a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae90:	0f b6 d0             	movzx  edx,al
c000ae93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae97:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae9b:	83 e1 3f             	and    ecx,0x3f
c000ae9e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeac:	0f b6 d0             	movzx  edx,al
c000aeaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb3:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000aeba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aebe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aec4:	0f b6 d0             	movzx  edx,al
c000aec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aecb:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000aed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeda:	8d 50 01             	lea    edx,[eax+0x1]
c000aedd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aee1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aee7:	0f b6 d0             	movzx  edx,al
c000aeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeee:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aef2:	83 e1 3f             	and    ecx,0x3f
c000aef5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aef9:	90                   	nop
c000aefa:	83 c4 0c             	add    esp,0xc
c000aefd:	c3                   	ret    

c000aefe <Computer::setBootMessage(char const*)>:
c000aefe:	c3                   	ret    
c000aeff:	90                   	nop

c000af00 <Computer::start()>:
c000af00:	56                   	push   esi
c000af01:	53                   	push   ebx
c000af02:	50                   	push   eax
c000af03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af07:	e8 ce c8 00 00       	call   c00177da <lockScheduler()>
c000af0c:	e8 fd cb 00 00       	call   c0017b0e <schedule()>
c000af11:	e8 c6 c8 00 00       	call   c00177dc <unlockScheduler()>
c000af16:	fb                   	sti    
c000af17:	83 ec 0c             	sub    esp,0xc
c000af1a:	68 3b 07 00 00       	push   0x73b
c000af1f:	e8 d2 3d 00 00       	call   c000ecf6 <operator new(unsigned long)>
c000af24:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000af2b:	89 c6                	mov    esi,eax
c000af2d:	ff 35 d4 45 02 c0    	push   DWORD PTR ds:0xc00245d4
c000af33:	68 45 ff 01 c0       	push   0xc001ff45
c000af38:	6a 01                	push   0x1
c000af3a:	50                   	push   eax
c000af3b:	e8 fa c6 00 00       	call   c001763a <Process::Process(bool, char const*, Process*, char**)>
c000af40:	83 c4 20             	add    esp,0x20
c000af43:	68 ff 00 00 00       	push   0xff
c000af48:	6a 00                	push   0x0
c000af4a:	68 ab b5 00 c0       	push   0xc000b5ab
c000af4f:	56                   	push   esi
c000af50:	e8 af c9 00 00       	call   c0017904 <Process::createThread(void (*)(void*), void*, int)>
c000af55:	6a 7a                	push   0x7a
c000af57:	6a 00                	push   0x0
c000af59:	68 47 83 01 c0       	push   0xc0018347
c000af5e:	ff 35 d4 45 02 c0    	push   DWORD PTR ds:0xc00245d4
c000af64:	e8 9b c9 00 00       	call   c0017904 <Process::createThread(void (*)(void*), void*, int)>
c000af69:	83 c4 20             	add    esp,0x20
c000af6c:	a3 88 45 02 c0       	mov    ds:0xc0024588,eax
c000af71:	c6 05 0d 32 02 c0 01 	mov    BYTE PTR ds:0xc002320d,0x1
c000af78:	e8 c3 41 00 00       	call   c000f140 <initVFS()>
c000af7d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000af83:	8b 10                	mov    edx,DWORD PTR [eax]
c000af85:	6a 00                	push   0x0
c000af87:	6a 00                	push   0x0
c000af89:	6a 00                	push   0x0
c000af8b:	50                   	push   eax
c000af8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000af8f:	e8 b0 b0 00 00       	call   c0016044 <setupSystemCalls()>
c000af94:	e8 a5 4c 00 00       	call   c000fc3e <loadClockSettings()>
c000af99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000af9c:	e8 99 53 00 00       	call   c001033a <Device::loadDriversForAll()>
c000afa1:	5a                   	pop    edx
c000afa2:	8b 1d 08 32 02 c0    	mov    ebx,DWORD PTR ds:0xc0023208
c000afa8:	59                   	pop    ecx
c000afa9:	6a 01                	push   0x1
c000afab:	68 52 ff 01 c0       	push   0xc001ff52
c000afb0:	e8 c7 c2 00 00       	call   c001727c <Thr::loadDLL(char const*, bool)>
c000afb5:	5e                   	pop    esi
c000afb6:	5a                   	pop    edx
c000afb7:	53                   	push   ebx
c000afb8:	50                   	push   eax
c000afb9:	e8 11 c4 00 00       	call   c00173cf <Thr::executeDLL(unsigned long, void*)>
c000afbe:	c7 04 24 bc 0f 02 c0 	mov    DWORD PTR [esp],0xc0020fbc
c000afc5:	e8 1b 3e 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000afca:	83 c4 10             	add    esp,0x10
c000afcd:	83 ec 0c             	sub    esp,0xc
c000afd0:	6a 02                	push   0x2
c000afd2:	e8 02 ce 00 00       	call   c0017dd9 <blockTask(TaskState)>
c000afd7:	83 c4 10             	add    esp,0x10
c000afda:	eb f1                	jmp    c000afcd <Computer::start()+0xcd>

c000afdc <firstTask()>:
c000afdc:	83 ec 18             	sub    esp,0x18
c000afdf:	ff 35 08 32 02 c0    	push   DWORD PTR ds:0xc0023208
c000afe5:	e8 16 ff ff ff       	call   c000af00 <Computer::start()>

c000afea <Computer::detectFeatures()>:
c000afea:	55                   	push   ebp
c000afeb:	57                   	push   edi
c000afec:	56                   	push   esi
c000afed:	53                   	push   ebx
c000afee:	83 ec 1c             	sub    esp,0x1c
c000aff1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000aff5:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000afff:	e8 bb 52 ff ff       	call   c00002bf <detectCPUID>
c000b004:	85 c0                	test   eax,eax
c000b006:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b00c:	0f 95 c2             	setne  dl
c000b00f:	83 e0 fd             	and    eax,0xfffffffd
c000b012:	d1 e2                	shl    edx,1
c000b014:	09 d0                	or     eax,edx
c000b016:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b01c:	a8 02                	test   al,0x2
c000b01e:	75 46                	jne    c000b066 <Computer::detectFeatures()+0x7c>
c000b020:	f6 05 21 32 02 c0 04 	test   BYTE PTR ds:0xc0023221,0x4
c000b027:	74 07                	je     c000b030 <Computer::detectFeatures()+0x46>
c000b029:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b030:	e8 11 30 01 00       	call   c001e046 <x87Detect>
c000b035:	83 e0 01             	and    eax,0x1
c000b038:	c1 e0 04             	shl    eax,0x4
c000b03b:	88 c2                	mov    dl,al
c000b03d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b043:	83 e0 ef             	and    eax,0xffffffef
c000b046:	09 d0                	or     eax,edx
c000b048:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b04e:	a8 10                	test   al,0x10
c000b050:	0f 85 10 01 00 00    	jne    c000b166 <Computer::detectFeatures()+0x17c>
c000b056:	84 c0                	test   al,al
c000b058:	0f 88 2b 01 00 00    	js     c000b189 <Computer::detectFeatures()+0x19f>
c000b05e:	83 c4 1c             	add    esp,0x1c
c000b061:	5b                   	pop    ebx
c000b062:	5e                   	pop    esi
c000b063:	5f                   	pop    edi
c000b064:	5d                   	pop    ebp
c000b065:	c3                   	ret    
c000b066:	83 ec 0c             	sub    esp,0xc
c000b069:	6a 20                	push   0x20
c000b06b:	e8 4d 8c 00 00       	call   c0013cbd <cpuidCheckEDX(unsigned int)>
c000b070:	83 e0 01             	and    eax,0x1
c000b073:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b07a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b080:	83 e0 f7             	and    eax,0xfffffff7
c000b083:	09 d0                	or     eax,edx
c000b085:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b08b:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b092:	e8 26 8c 00 00       	call   c0013cbd <cpuidCheckEDX(unsigned int)>
c000b097:	83 e0 01             	and    eax,0x1
c000b09a:	88 c2                	mov    dl,al
c000b09c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0a2:	83 e0 fe             	and    eax,0xfffffffe
c000b0a5:	09 d0                	or     eax,edx
c000b0a7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0ad:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b0b4:	e8 04 8c 00 00       	call   c0013cbd <cpuidCheckEDX(unsigned int)>
c000b0b9:	c1 e0 07             	shl    eax,0x7
c000b0bc:	88 c2                	mov    dl,al
c000b0be:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0c4:	83 e0 7f             	and    eax,0x7f
c000b0c7:	09 d0                	or     eax,edx
c000b0c9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0cf:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b0d6:	e8 e2 8b 00 00       	call   c0013cbd <cpuidCheckEDX(unsigned int)>
c000b0db:	83 c4 10             	add    esp,0x10
c000b0de:	83 e0 01             	and    eax,0x1
c000b0e1:	c1 e0 05             	shl    eax,0x5
c000b0e4:	88 c2                	mov    dl,al
c000b0e6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0ec:	83 e0 df             	and    eax,0xffffffdf
c000b0ef:	09 d0                	or     eax,edx
c000b0f1:	f7 05 20 32 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0023220,0x401
c000b0fb:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b101:	0f 84 a8 00 00 00    	je     c000b1af <Computer::detectFeatures()+0x1c5>
c000b107:	83 ec 0c             	sub    esp,0xc
c000b10a:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b111:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b115:	50                   	push   eax
c000b116:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b11a:	55                   	push   ebp
c000b11b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b11f:	57                   	push   edi
c000b120:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b124:	56                   	push   esi
c000b125:	68 00 00 00 80       	push   0x80000000
c000b12a:	e8 0b 8b 00 00       	call   c0013c3a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b12f:	83 c4 20             	add    esp,0x20
c000b132:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b139:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b13d:	0f 86 dd fe ff ff    	jbe    c000b020 <Computer::detectFeatures()+0x36>
c000b143:	83 ec 0c             	sub    esp,0xc
c000b146:	50                   	push   eax
c000b147:	55                   	push   ebp
c000b148:	57                   	push   edi
c000b149:	56                   	push   esi
c000b14a:	68 01 00 00 80       	push   0x80000001
c000b14f:	e8 e6 8a 00 00       	call   c0013c3a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b154:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b15e:	83 c4 20             	add    esp,0x20
c000b161:	e9 ba fe ff ff       	jmp    c000b020 <Computer::detectFeatures()+0x36>
c000b166:	e8 95 2e 01 00       	call   c001e000 <sseDetect>
c000b16b:	88 c2                	mov    dl,al
c000b16d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b173:	c1 e2 07             	shl    edx,0x7
c000b176:	83 e0 7f             	and    eax,0x7f
c000b179:	09 d0                	or     eax,edx
c000b17b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b181:	84 c0                	test   al,al
c000b183:	0f 89 d5 fe ff ff    	jns    c000b05e <Computer::detectFeatures()+0x74>
c000b189:	e8 62 2e 01 00       	call   c001dff0 <avxDetect>
c000b18e:	83 e0 01             	and    eax,0x1
c000b191:	c1 e0 05             	shl    eax,0x5
c000b194:	88 c2                	mov    dl,al
c000b196:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b19c:	83 e0 df             	and    eax,0xffffffdf
c000b19f:	09 d0                	or     eax,edx
c000b1a1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b1a7:	83 c4 1c             	add    esp,0x1c
c000b1aa:	5b                   	pop    ebx
c000b1ab:	5e                   	pop    esi
c000b1ac:	5f                   	pop    edi
c000b1ad:	5d                   	pop    ebp
c000b1ae:	c3                   	ret    
c000b1af:	83 ec 0c             	sub    esp,0xc
c000b1b2:	68 00 02 00 00       	push   0x200
c000b1b7:	e8 01 8b 00 00       	call   c0013cbd <cpuidCheckEDX(unsigned int)>
c000b1bc:	83 c4 10             	add    esp,0x10
c000b1bf:	e9 43 ff ff ff       	jmp    c000b107 <Computer::detectFeatures()+0x11d>

c000b1c4 <Computer::displayFeatures()>:
c000b1c4:	c3                   	ret    
c000b1c5:	90                   	nop

c000b1c6 <Computer::rdmsr(unsigned int)>:
c000b1c6:	83 ec 0c             	sub    esp,0xc
c000b1c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1cd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b1d4:	74 0a                	je     c000b1e0 <Computer::rdmsr(unsigned int)+0x1a>
c000b1d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b1da:	0f 32                	rdmsr  
c000b1dc:	83 c4 0c             	add    esp,0xc
c000b1df:	c3                   	ret    
c000b1e0:	83 ec 0c             	sub    esp,0xc
c000b1e3:	68 6e ff 01 c0       	push   0xc001ff6e
c000b1e8:	e8 8d 98 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c000b1ed:	83 c4 10             	add    esp,0x10
c000b1f0:	eb e4                	jmp    c000b1d6 <Computer::rdmsr(unsigned int)+0x10>

c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b1f2:	57                   	push   edi
c000b1f3:	56                   	push   esi
c000b1f4:	52                   	push   edx
c000b1f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b1fd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b201:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b208:	74 0e                	je     c000b218 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b20a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b20e:	89 f0                	mov    eax,esi
c000b210:	89 fa                	mov    edx,edi
c000b212:	0f 30                	wrmsr  
c000b214:	58                   	pop    eax
c000b215:	5e                   	pop    esi
c000b216:	5f                   	pop    edi
c000b217:	c3                   	ret    
c000b218:	83 ec 0c             	sub    esp,0xc
c000b21b:	68 74 ff 01 c0       	push   0xc001ff74
c000b220:	e8 55 98 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c000b225:	83 c4 10             	add    esp,0x10
c000b228:	eb e0                	jmp    c000b20a <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b22a <Computer::nmiEnabled()>:
c000b22a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b22e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b234:	c3                   	ret    
c000b235:	90                   	nop

c000b236 <Computer::readCMOS(unsigned char)>:
c000b236:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b23a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b241:	19 c0                	sbb    eax,eax
c000b243:	83 e0 80             	and    eax,0xffffff80
c000b246:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b24a:	e6 70                	out    0x70,al
c000b24c:	e4 71                	in     al,0x71
c000b24e:	c3                   	ret    
c000b24f:	90                   	nop

c000b250 <Computer::enableNMI(bool)>:
c000b250:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b258:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b25e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b266:	eb ce                	jmp    c000b236 <Computer::readCMOS(unsigned char)>

c000b268 <Computer::open(int, int, void*)>:
c000b268:	56                   	push   esi
c000b269:	53                   	push   ebx
c000b26a:	83 ec 10             	sub    esp,0x10
c000b26d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b271:	f6 05 20 32 02 c0 04 	test   BYTE PTR ds:0xc0023220,0x4
c000b278:	68 68 22 00 00       	push   0x2268
c000b27d:	0f 94 05 40 26 02 c0 	sete   BYTE PTR ds:0xc0022640
c000b284:	e8 6d 3a 00 00       	call   c000ecf6 <operator new(unsigned long)>
c000b289:	89 04 24             	mov    DWORD PTR [esp],eax
c000b28c:	89 c6                	mov    esi,eax
c000b28e:	e8 47 80 00 00       	call   c00132da <ACPI::ACPI()>
c000b293:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b299:	58                   	pop    eax
c000b29a:	5a                   	pop    edx
c000b29b:	56                   	push   esi
c000b29c:	53                   	push   ebx
c000b29d:	e8 4e 4f 00 00       	call   c00101f0 <Device::addChild(Device*)>
c000b2a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2a5:	e8 40 fd ff ff       	call   c000afea <Computer::detectFeatures()>
c000b2aa:	59                   	pop    ecx
c000b2ab:	5e                   	pop    esi
c000b2ac:	6a 01                	push   0x1
c000b2ae:	53                   	push   ebx
c000b2af:	e8 9c ff ff ff       	call   c000b250 <Computer::enableNMI(bool)>
c000b2b4:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b2bb:	e8 36 3a 00 00       	call   c000ecf6 <operator new(unsigned long)>
c000b2c0:	89 04 24             	mov    DWORD PTR [esp],eax
c000b2c3:	89 c6                	mov    esi,eax
c000b2c5:	e8 be 8a 00 00       	call   c0013d88 <CPU::CPU()>
c000b2ca:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b2d0:	58                   	pop    eax
c000b2d1:	5a                   	pop    edx
c000b2d2:	56                   	push   esi
c000b2d3:	53                   	push   ebx
c000b2d4:	e8 17 4f 00 00       	call   c00101f0 <Device::addChild(Device*)>
c000b2d9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b2df:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b2e5:	6a 00                	push   0x0
c000b2e7:	6a 00                	push   0x0
c000b2e9:	50                   	push   eax
c000b2ea:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b2ed:	83 c4 20             	add    esp,0x20
c000b2f0:	e8 63 54 00 00       	call   c0010758 <setupFPU()>
c000b2f5:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b2fb:	85 c0                	test   eax,eax
c000b2fd:	74 1f                	je     c000b31e <Computer::open(int, int, void*)+0xb6>
c000b2ff:	83 ec 08             	sub    esp,0x8
c000b302:	50                   	push   eax
c000b303:	53                   	push   ebx
c000b304:	e8 e7 4e 00 00       	call   c00101f0 <Device::addChild(Device*)>
c000b309:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b30f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b311:	6a 00                	push   0x0
c000b313:	6a 00                	push   0x0
c000b315:	6a 00                	push   0x0
c000b317:	50                   	push   eax
c000b318:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b31b:	83 c4 20             	add    esp,0x20
c000b31e:	83 ec 0c             	sub    esp,0xc
c000b321:	68 dc af 00 c0       	push   0xc000afdc
c000b326:	e8 d9 c6 00 00       	call   c0017a04 <setupMultitasking(void (*)())>
c000b32b:	83 c4 14             	add    esp,0x14
c000b32e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b333:	5b                   	pop    ebx
c000b334:	5e                   	pop    esi
c000b335:	c3                   	ret    

c000b336 <Computer::disableNMI()>:
c000b336:	6a 00                	push   0x0
c000b338:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b33c:	e8 0f ff ff ff       	call   c000b250 <Computer::enableNMI(bool)>
c000b341:	58                   	pop    eax
c000b342:	5a                   	pop    edx
c000b343:	c3                   	ret    

c000b344 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b344:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b348:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b34f:	19 c0                	sbb    eax,eax
c000b351:	83 e0 80             	and    eax,0xffffff80
c000b354:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b358:	e6 70                	out    0x70,al
c000b35a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b35e:	e6 71                	out    0x71,al
c000b360:	c3                   	ret    
c000b361:	90                   	nop

c000b362 <Computer::handleNMI()>:
c000b362:	56                   	push   esi
c000b363:	53                   	push   ebx
c000b364:	83 ec 10             	sub    esp,0x10
c000b367:	e4 92                	in     al,0x92
c000b369:	89 c6                	mov    esi,eax
c000b36b:	e4 61                	in     al,0x61
c000b36d:	68 7a ff 01 c0       	push   0xc001ff7a
c000b372:	88 c3                	mov    bl,al
c000b374:	e8 6c 3a 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000b379:	83 c4 10             	add    esp,0x10
c000b37c:	83 e6 10             	and    esi,0x10
c000b37f:	75 0d                	jne    c000b38e <Computer::handleNMI()+0x2c>
c000b381:	f6 c3 40             	test   bl,0x40
c000b384:	75 1d                	jne    c000b3a3 <Computer::handleNMI()+0x41>
c000b386:	84 db                	test   bl,bl
c000b388:	78 2d                	js     c000b3b7 <Computer::handleNMI()+0x55>
c000b38a:	58                   	pop    eax
c000b38b:	5b                   	pop    ebx
c000b38c:	5e                   	pop    esi
c000b38d:	c3                   	ret    
c000b38e:	83 ec 0c             	sub    esp,0xc
c000b391:	68 8b ff 01 c0       	push   0xc001ff8b
c000b396:	e8 df 96 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c000b39b:	83 c4 10             	add    esp,0x10
c000b39e:	f6 c3 40             	test   bl,0x40
c000b3a1:	74 e3                	je     c000b386 <Computer::handleNMI()+0x24>
c000b3a3:	83 ec 0c             	sub    esp,0xc
c000b3a6:	68 98 ff 01 c0       	push   0xc001ff98
c000b3ab:	e8 ca 96 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c000b3b0:	83 c4 10             	add    esp,0x10
c000b3b3:	84 db                	test   bl,bl
c000b3b5:	79 d3                	jns    c000b38a <Computer::handleNMI()+0x28>
c000b3b7:	c7 44 24 10 a2 ff 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ffa2
c000b3bf:	5a                   	pop    edx
c000b3c0:	5b                   	pop    ebx
c000b3c1:	5e                   	pop    esi
c000b3c2:	e9 b3 96 00 00       	jmp    c0014a7a <Krnl::panic(char const*)>
c000b3c7:	90                   	nop

c000b3c8 <Computer::setDiskActivityLight(int, bool)>:
c000b3c8:	56                   	push   esi
c000b3c9:	53                   	push   ebx
c000b3ca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b3ce:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b3d3:	77 1b                	ja     c000b3f0 <Computer::setDiskActivityLight(int, bool)+0x28>
c000b3d5:	e4 92                	in     al,0x92
c000b3d7:	bb 40 00 00 00       	mov    ebx,0x40
c000b3dc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b3e0:	89 da                	mov    edx,ebx
c000b3e2:	d3 e2                	shl    edx,cl
c000b3e4:	89 f1                	mov    ecx,esi
c000b3e6:	f7 d2                	not    edx
c000b3e8:	d3 e3                	shl    ebx,cl
c000b3ea:	21 d0                	and    eax,edx
c000b3ec:	09 d8                	or     eax,ebx
c000b3ee:	e6 92                	out    0x92,al
c000b3f0:	5b                   	pop    ebx
c000b3f1:	5e                   	pop    esi
c000b3f2:	c3                   	ret    
c000b3f3:	90                   	nop

c000b3f4 <GDTEntry::setBase(unsigned int)>:
c000b3f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b3fc:	89 c1                	mov    ecx,eax
c000b3fe:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b402:	c1 e9 10             	shr    ecx,0x10
c000b405:	c1 e8 18             	shr    eax,0x18
c000b408:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b40b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b40e:	c3                   	ret    
c000b40f:	90                   	nop

c000b410 <GDTEntry::setLimit(unsigned int)>:
c000b410:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b414:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b418:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b41b:	66 89 01             	mov    WORD PTR [ecx],ax
c000b41e:	83 e2 f0             	and    edx,0xfffffff0
c000b421:	c1 e8 10             	shr    eax,0x10
c000b424:	83 e0 0f             	and    eax,0xf
c000b427:	09 d0                	or     eax,edx
c000b429:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b42c:	c3                   	ret    
c000b42d:	90                   	nop

c000b42e <GDT::GDT()>:
c000b42e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b432:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b43c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b442:	90                   	nop
c000b443:	c3                   	ret    

c000b444 <GDT::addEntry(GDTEntry)>:
c000b444:	53                   	push   ebx
c000b445:	83 ec 0c             	sub    esp,0xc
c000b448:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b44c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b44e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b455:	52                   	push   edx
c000b456:	50                   	push   eax
c000b457:	68 dc ff 01 c0       	push   0xc001ffdc
c000b45c:	e8 84 39 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000b461:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b463:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b467:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b46b:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b46f:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b473:	8d 50 01             	lea    edx,[eax+0x1]
c000b476:	c1 e0 03             	shl    eax,0x3
c000b479:	89 13                	mov    DWORD PTR [ebx],edx
c000b47b:	83 c4 18             	add    esp,0x18
c000b47e:	5b                   	pop    ebx
c000b47f:	c3                   	ret    

c000b480 <GDT::getNumberOfEntries()>:
c000b480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b484:	8b 00                	mov    eax,DWORD PTR [eax]
c000b486:	c3                   	ret    
c000b487:	90                   	nop

c000b488 <GDT::flush()>:
c000b488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b48c:	8b 10                	mov    edx,DWORD PTR [eax]
c000b48e:	83 c0 04             	add    eax,0x4
c000b491:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b498:	a3 12 32 02 c0       	mov    ds:0xc0023212,eax
c000b49d:	66 89 15 10 32 02 c0 	mov    WORD PTR ds:0xc0023210,dx
c000b4a4:	e9 8a 4e ff ff       	jmp    c0000333 <loadGDT>
c000b4a9:	90                   	nop

c000b4aa <GDT::setup()>:
c000b4aa:	55                   	push   ebp
c000b4ab:	57                   	push   edi
c000b4ac:	56                   	push   esi
c000b4ad:	53                   	push   ebx
c000b4ae:	83 ec 3c             	sub    esp,0x3c
c000b4b1:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b4b5:	6a 00                	push   0x0
c000b4b7:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b4bb:	53                   	push   ebx
c000b4bc:	e8 33 ff ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000b4c1:	6a 00                	push   0x0
c000b4c3:	53                   	push   ebx
c000b4c4:	e8 47 ff ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000b4c9:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b4d1:	6a 00                	push   0x0
c000b4d3:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b4d7:	53                   	push   ebx
c000b4d8:	e8 17 ff ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000b4dd:	68 ff ff ff 00       	push   0xffffff
c000b4e2:	53                   	push   ebx
c000b4e3:	e8 28 ff ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000b4e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b4ec:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b4f1:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b4f6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b4fa:	83 c4 20             	add    esp,0x20
c000b4fd:	6a 00                	push   0x0
c000b4ff:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b503:	53                   	push   ebx
c000b504:	e8 eb fe ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000b509:	68 ff ff ff 00       	push   0xffffff
c000b50e:	53                   	push   ebx
c000b50f:	e8 fc fe ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000b514:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b518:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b51c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b520:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b524:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b528:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b52d:	0d 00 92 c0 00       	or     eax,0xc09200
c000b532:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b536:	89 d8                	mov    eax,ebx
c000b538:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b53c:	80 cc 60             	or     ah,0x60
c000b53f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b543:	83 c4 0c             	add    esp,0xc
c000b546:	89 f8                	mov    eax,edi
c000b548:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b54c:	80 cc 60             	or     ah,0x60
c000b54f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b553:	89 c7                	mov    edi,eax
c000b555:	55                   	push   ebp
c000b556:	e8 e9 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b55b:	83 c4 0c             	add    esp,0xc
c000b55e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b562:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b566:	55                   	push   ebp
c000b567:	e8 d8 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b56c:	83 c4 0c             	add    esp,0xc
c000b56f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b573:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b577:	55                   	push   ebp
c000b578:	e8 c7 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b57d:	83 c4 0c             	add    esp,0xc
c000b580:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b584:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b588:	53                   	push   ebx
c000b589:	51                   	push   ecx
c000b58a:	55                   	push   ebp
c000b58b:	e8 b4 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b590:	83 c4 0c             	add    esp,0xc
c000b593:	57                   	push   edi
c000b594:	56                   	push   esi
c000b595:	55                   	push   ebp
c000b596:	e8 a9 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b59b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b59e:	e8 e5 fe ff ff       	call   c000b488 <GDT::flush()>
c000b5a3:	83 c4 4c             	add    esp,0x4c
c000b5a6:	5b                   	pop    ebx
c000b5a7:	5e                   	pop    esi
c000b5a8:	5f                   	pop    edi
c000b5a9:	5d                   	pop    ebp
c000b5aa:	c3                   	ret    

c000b5ab <idleFunction(void*)>:
c000b5ab:	53                   	push   ebx
c000b5ac:	83 ec 08             	sub    esp,0x8
c000b5af:	e8 28 c2 00 00       	call   c00177dc <unlockScheduler()>
c000b5b4:	e8 bb 87 00 00       	call   c0013d74 <thisCPU()>
c000b5b9:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b5c0:	74 41                	je     c000b603 <idleFunction(void*)+0x58>
c000b5c2:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c000b5c7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5ce:	74 33                	je     c000b603 <idleFunction(void*)+0x58>
c000b5d0:	31 db                	xor    ebx,ebx
c000b5d2:	52                   	push   edx
c000b5d3:	52                   	push   edx
c000b5d4:	68 e1 00 00 00       	push   0xe1
c000b5d9:	50                   	push   eax
c000b5da:	e8 e7 fb ff ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c000b5df:	53                   	push   ebx
c000b5e0:	83 e0 02             	and    eax,0x2
c000b5e3:	50                   	push   eax
c000b5e4:	68 e1 00 00 00       	push   0xe1
c000b5e9:	ff 35 08 32 02 c0    	push   DWORD PTR ds:0xc0023208
c000b5ef:	e8 fe fb ff ff       	call   c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b5f4:	83 c4 20             	add    esp,0x20
c000b5f7:	e8 54 4b ff ff       	call   c0000150 <doTPAUSE>
c000b5fc:	e8 3f 30 01 00       	call   c001e640 <idleCommon()>
c000b601:	eb f4                	jmp    c000b5f7 <idleFunction(void*)+0x4c>
c000b603:	fb                   	sti    
c000b604:	f4                   	hlt    
c000b605:	e8 36 30 01 00       	call   c001e640 <idleCommon()>
c000b60a:	eb f7                	jmp    c000b603 <idleFunction(void*)+0x58>

c000b60c <IDTEntry::IDTEntry(bool)>:
c000b60c:	83 ec 04             	sub    esp,0x4
c000b60f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b613:	88 04 24             	mov    BYTE PTR [esp],al
c000b616:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b61a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b624:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b628:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b62c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b62f:	83 e2 f0             	and    edx,0xfffffff0
c000b632:	83 ca 0e             	or     edx,0xe
c000b635:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b63c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b63f:	83 e2 ef             	and    edx,0xffffffef
c000b642:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b645:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000b649:	74 04                	je     c000b64f <IDTEntry::IDTEntry(bool)+0x43>
c000b64b:	b2 03                	mov    dl,0x3
c000b64d:	eb 02                	jmp    c000b651 <IDTEntry::IDTEntry(bool)+0x45>
c000b64f:	b2 00                	mov    dl,0x0
c000b651:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b655:	83 e2 03             	and    edx,0x3
c000b658:	88 d1                	mov    cl,dl
c000b65a:	c1 e1 05             	shl    ecx,0x5
c000b65d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b660:	83 e2 9f             	and    edx,0xffffff9f
c000b663:	09 ca                	or     edx,ecx
c000b665:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b668:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b66c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b66f:	83 ca 80             	or     edx,0xffffff80
c000b672:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b675:	90                   	nop
c000b676:	83 c4 04             	add    esp,0x4
c000b679:	c3                   	ret    

c000b67a <IDTEntry::setOffset(unsigned int)>:
c000b67a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b67e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b682:	66 89 02             	mov    WORD PTR [edx],ax
c000b685:	c1 e8 10             	shr    eax,0x10
c000b688:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000b68c:	c3                   	ret    
c000b68d:	90                   	nop

c000b68e <IDT::IDT()>:
c000b68e:	90                   	nop
c000b68f:	c3                   	ret    

c000b690 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000b690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b694:	83 c0 30             	add    eax,0x30
c000b697:	c3                   	ret    

c000b698 <IDT::addEntry(IDTEntry, int)>:
c000b698:	53                   	push   ebx
c000b699:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b69d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b6a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b6a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b6a9:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000b6ac:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000b6b0:	5b                   	pop    ebx
c000b6b1:	c3                   	ret    

c000b6b2 <IDT::addEntry(int, void (*)(), bool)>:
c000b6b2:	53                   	push   ebx
c000b6b3:	83 ec 10             	sub    esp,0x10
c000b6b6:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000b6bb:	50                   	push   eax
c000b6bc:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000b6c0:	53                   	push   ebx
c000b6c1:	e8 46 ff ff ff       	call   c000b60c <IDTEntry::IDTEntry(bool)>
c000b6c6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b6ca:	53                   	push   ebx
c000b6cb:	e8 aa ff ff ff       	call   c000b67a <IDTEntry::setOffset(unsigned int)>
c000b6d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b6d4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b6d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b6dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6e0:	e8 b3 ff ff ff       	call   c000b698 <IDT::addEntry(IDTEntry, int)>
c000b6e5:	83 c4 30             	add    esp,0x30
c000b6e8:	5b                   	pop    ebx
c000b6e9:	c3                   	ret    

c000b6ea <IDT::flush()>:
c000b6ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6ee:	66 c7 05 18 32 02 c0 ff 07 	mov    WORD PTR ds:0xc0023218,0x7ff
c000b6f7:	a3 1a 32 02 c0       	mov    ds:0xc002321a,eax
c000b6fc:	0f 01 1d 18 32 02 c0 	lidtd  ds:0xc0023218
c000b703:	c3                   	ret    

c000b704 <IDT::setup()>:
c000b704:	57                   	push   edi
c000b705:	56                   	push   esi
c000b706:	53                   	push   ebx
c000b707:	83 ec 10             	sub    esp,0x10
c000b70a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b70e:	6a 00                	push   0x0
c000b710:	68 53 03 00 c0       	push   0xc0000353
c000b715:	6a 00                	push   0x0
c000b717:	53                   	push   ebx
c000b718:	e8 95 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b71d:	6a 00                	push   0x0
c000b71f:	68 63 03 00 c0       	push   0xc0000363
c000b724:	6a 01                	push   0x1
c000b726:	53                   	push   ebx
c000b727:	e8 86 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b72c:	83 c4 20             	add    esp,0x20
c000b72f:	6a 00                	push   0x0
c000b731:	68 6d 03 00 c0       	push   0xc000036d
c000b736:	6a 02                	push   0x2
c000b738:	53                   	push   ebx
c000b739:	e8 74 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b73e:	6a 00                	push   0x0
c000b740:	68 77 03 00 c0       	push   0xc0000377
c000b745:	6a 03                	push   0x3
c000b747:	53                   	push   ebx
c000b748:	e8 65 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b74d:	83 c4 20             	add    esp,0x20
c000b750:	6a 00                	push   0x0
c000b752:	68 81 03 00 c0       	push   0xc0000381
c000b757:	6a 04                	push   0x4
c000b759:	53                   	push   ebx
c000b75a:	e8 53 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b75f:	6a 00                	push   0x0
c000b761:	68 8b 03 00 c0       	push   0xc000038b
c000b766:	6a 05                	push   0x5
c000b768:	53                   	push   ebx
c000b769:	e8 44 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b76e:	83 c4 20             	add    esp,0x20
c000b771:	6a 00                	push   0x0
c000b773:	68 95 03 00 c0       	push   0xc0000395
c000b778:	6a 06                	push   0x6
c000b77a:	53                   	push   ebx
c000b77b:	e8 32 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b780:	6a 00                	push   0x0
c000b782:	68 9f 03 00 c0       	push   0xc000039f
c000b787:	6a 07                	push   0x7
c000b789:	53                   	push   ebx
c000b78a:	e8 23 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b78f:	83 c4 20             	add    esp,0x20
c000b792:	6a 00                	push   0x0
c000b794:	68 a9 03 00 c0       	push   0xc00003a9
c000b799:	6a 08                	push   0x8
c000b79b:	53                   	push   ebx
c000b79c:	e8 11 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7a1:	6a 00                	push   0x0
c000b7a3:	68 b1 03 00 c0       	push   0xc00003b1
c000b7a8:	6a 09                	push   0x9
c000b7aa:	53                   	push   ebx
c000b7ab:	e8 02 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7b0:	83 c4 20             	add    esp,0x20
c000b7b3:	6a 00                	push   0x0
c000b7b5:	68 bb 03 00 c0       	push   0xc00003bb
c000b7ba:	6a 0a                	push   0xa
c000b7bc:	53                   	push   ebx
c000b7bd:	e8 f0 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7c2:	6a 00                	push   0x0
c000b7c4:	68 c3 03 00 c0       	push   0xc00003c3
c000b7c9:	6a 0b                	push   0xb
c000b7cb:	53                   	push   ebx
c000b7cc:	e8 e1 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7d1:	83 c4 20             	add    esp,0x20
c000b7d4:	6a 00                	push   0x0
c000b7d6:	68 cb 03 00 c0       	push   0xc00003cb
c000b7db:	6a 0c                	push   0xc
c000b7dd:	53                   	push   ebx
c000b7de:	e8 cf fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7e3:	6a 00                	push   0x0
c000b7e5:	68 d3 03 00 c0       	push   0xc00003d3
c000b7ea:	6a 0d                	push   0xd
c000b7ec:	53                   	push   ebx
c000b7ed:	e8 c0 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7f2:	83 c4 20             	add    esp,0x20
c000b7f5:	6a 00                	push   0x0
c000b7f7:	68 db 03 00 c0       	push   0xc00003db
c000b7fc:	6a 0e                	push   0xe
c000b7fe:	53                   	push   ebx
c000b7ff:	e8 ae fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b804:	6a 00                	push   0x0
c000b806:	68 e3 03 00 c0       	push   0xc00003e3
c000b80b:	6a 0f                	push   0xf
c000b80d:	53                   	push   ebx
c000b80e:	e8 9f fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b813:	83 c4 20             	add    esp,0x20
c000b816:	6a 00                	push   0x0
c000b818:	68 ed 03 00 c0       	push   0xc00003ed
c000b81d:	6a 10                	push   0x10
c000b81f:	53                   	push   ebx
c000b820:	e8 8d fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b825:	6a 00                	push   0x0
c000b827:	68 f7 03 00 c0       	push   0xc00003f7
c000b82c:	6a 11                	push   0x11
c000b82e:	53                   	push   ebx
c000b82f:	e8 7e fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b834:	83 c4 20             	add    esp,0x20
c000b837:	6a 00                	push   0x0
c000b839:	68 01 04 00 c0       	push   0xc0000401
c000b83e:	6a 12                	push   0x12
c000b840:	53                   	push   ebx
c000b841:	e8 6c fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b846:	6a 01                	push   0x1
c000b848:	68 0b 04 00 c0       	push   0xc000040b
c000b84d:	6a 60                	push   0x60
c000b84f:	53                   	push   ebx
c000b850:	e8 5d fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b855:	83 c4 20             	add    esp,0x20
c000b858:	6a 00                	push   0x0
c000b85a:	68 15 04 00 c0       	push   0xc0000415
c000b85f:	6a 20                	push   0x20
c000b861:	53                   	push   ebx
c000b862:	e8 4b fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b867:	6a 00                	push   0x0
c000b869:	68 1f 04 00 c0       	push   0xc000041f
c000b86e:	6a 21                	push   0x21
c000b870:	53                   	push   ebx
c000b871:	e8 3c fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b876:	83 c4 20             	add    esp,0x20
c000b879:	6a 00                	push   0x0
c000b87b:	68 29 04 00 c0       	push   0xc0000429
c000b880:	6a 22                	push   0x22
c000b882:	53                   	push   ebx
c000b883:	e8 2a fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b888:	6a 00                	push   0x0
c000b88a:	68 33 04 00 c0       	push   0xc0000433
c000b88f:	6a 23                	push   0x23
c000b891:	53                   	push   ebx
c000b892:	e8 1b fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b897:	83 c4 20             	add    esp,0x20
c000b89a:	6a 00                	push   0x0
c000b89c:	68 3d 04 00 c0       	push   0xc000043d
c000b8a1:	6a 24                	push   0x24
c000b8a3:	53                   	push   ebx
c000b8a4:	e8 09 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8a9:	6a 00                	push   0x0
c000b8ab:	68 47 04 00 c0       	push   0xc0000447
c000b8b0:	6a 25                	push   0x25
c000b8b2:	53                   	push   ebx
c000b8b3:	e8 fa fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8b8:	83 c4 20             	add    esp,0x20
c000b8bb:	6a 00                	push   0x0
c000b8bd:	68 51 04 00 c0       	push   0xc0000451
c000b8c2:	6a 26                	push   0x26
c000b8c4:	53                   	push   ebx
c000b8c5:	e8 e8 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8ca:	6a 00                	push   0x0
c000b8cc:	68 5b 04 00 c0       	push   0xc000045b
c000b8d1:	6a 27                	push   0x27
c000b8d3:	53                   	push   ebx
c000b8d4:	e8 d9 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8d9:	83 c4 20             	add    esp,0x20
c000b8dc:	6a 00                	push   0x0
c000b8de:	68 65 04 00 c0       	push   0xc0000465
c000b8e3:	6a 28                	push   0x28
c000b8e5:	53                   	push   ebx
c000b8e6:	e8 c7 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8eb:	6a 00                	push   0x0
c000b8ed:	68 6f 04 00 c0       	push   0xc000046f
c000b8f2:	6a 29                	push   0x29
c000b8f4:	53                   	push   ebx
c000b8f5:	e8 b8 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8fa:	83 c4 20             	add    esp,0x20
c000b8fd:	6a 00                	push   0x0
c000b8ff:	68 79 04 00 c0       	push   0xc0000479
c000b904:	6a 2a                	push   0x2a
c000b906:	53                   	push   ebx
c000b907:	e8 a6 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b90c:	6a 00                	push   0x0
c000b90e:	68 83 04 00 c0       	push   0xc0000483
c000b913:	6a 2b                	push   0x2b
c000b915:	53                   	push   ebx
c000b916:	e8 97 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b91b:	83 c4 20             	add    esp,0x20
c000b91e:	6a 00                	push   0x0
c000b920:	68 8d 04 00 c0       	push   0xc000048d
c000b925:	6a 2c                	push   0x2c
c000b927:	53                   	push   ebx
c000b928:	e8 85 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b92d:	6a 00                	push   0x0
c000b92f:	68 97 04 00 c0       	push   0xc0000497
c000b934:	6a 2d                	push   0x2d
c000b936:	53                   	push   ebx
c000b937:	e8 76 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b93c:	83 c4 20             	add    esp,0x20
c000b93f:	6a 00                	push   0x0
c000b941:	68 a1 04 00 c0       	push   0xc00004a1
c000b946:	6a 2e                	push   0x2e
c000b948:	53                   	push   ebx
c000b949:	e8 64 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b94e:	6a 00                	push   0x0
c000b950:	68 ab 04 00 c0       	push   0xc00004ab
c000b955:	6a 2f                	push   0x2f
c000b957:	53                   	push   ebx
c000b958:	e8 55 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b95d:	83 c4 20             	add    esp,0x20
c000b960:	6a 00                	push   0x0
c000b962:	68 b5 04 00 c0       	push   0xc00004b5
c000b967:	6a 30                	push   0x30
c000b969:	53                   	push   ebx
c000b96a:	e8 43 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b96f:	6a 00                	push   0x0
c000b971:	68 bf 04 00 c0       	push   0xc00004bf
c000b976:	6a 31                	push   0x31
c000b978:	53                   	push   ebx
c000b979:	e8 34 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b97e:	83 c4 20             	add    esp,0x20
c000b981:	6a 00                	push   0x0
c000b983:	68 c9 04 00 c0       	push   0xc00004c9
c000b988:	6a 32                	push   0x32
c000b98a:	53                   	push   ebx
c000b98b:	e8 22 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b990:	6a 00                	push   0x0
c000b992:	68 d3 04 00 c0       	push   0xc00004d3
c000b997:	6a 33                	push   0x33
c000b999:	53                   	push   ebx
c000b99a:	e8 13 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b99f:	83 c4 20             	add    esp,0x20
c000b9a2:	6a 00                	push   0x0
c000b9a4:	68 dd 04 00 c0       	push   0xc00004dd
c000b9a9:	6a 34                	push   0x34
c000b9ab:	53                   	push   ebx
c000b9ac:	e8 01 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9b1:	6a 00                	push   0x0
c000b9b3:	68 e7 04 00 c0       	push   0xc00004e7
c000b9b8:	6a 35                	push   0x35
c000b9ba:	53                   	push   ebx
c000b9bb:	e8 f2 fc ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9c0:	83 c4 20             	add    esp,0x20
c000b9c3:	6a 00                	push   0x0
c000b9c5:	68 f1 04 00 c0       	push   0xc00004f1
c000b9ca:	6a 36                	push   0x36
c000b9cc:	53                   	push   ebx
c000b9cd:	e8 e0 fc ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9d2:	6a 00                	push   0x0
c000b9d4:	68 fb 04 00 c0       	push   0xc00004fb
c000b9d9:	6a 37                	push   0x37
c000b9db:	53                   	push   ebx
c000b9dc:	e8 d1 fc ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9e1:	83 c4 20             	add    esp,0x20
c000b9e4:	e8 0c 23 00 00       	call   c000dcf5 <Virt::getAKernelVAS()>
c000b9e9:	52                   	push   edx
c000b9ea:	6a 03                	push   0x3
c000b9ec:	6a 02                	push   0x2
c000b9ee:	50                   	push   eax
c000b9ef:	e8 a8 28 00 00       	call   c000e29c <VAS::allocatePages(int, int)>
c000b9f4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b9fb:	89 c6                	mov    esi,eax
c000b9fd:	e8 f4 32 00 00       	call   c000ecf6 <operator new(unsigned long)>
c000ba02:	81 c6 00 20 00 00    	add    esi,0x2000
c000ba08:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba0b:	89 c7                	mov    edi,eax
c000ba0d:	e8 3a 1c 00 00       	call   c000d64c <TSS::TSS()>
c000ba12:	83 c4 0c             	add    esp,0xc
c000ba15:	68 a9 03 00 c0       	push   0xc00003a9
c000ba1a:	56                   	push   esi
c000ba1b:	57                   	push   edi
c000ba1c:	e8 6b 1c 00 00       	call   c000d68c <TSS::setup(unsigned long, unsigned long)>
c000ba21:	59                   	pop    ecx
c000ba22:	89 c6                	mov    esi,eax
c000ba24:	5f                   	pop    edi
c000ba25:	6a 00                	push   0x0
c000ba27:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ba2b:	50                   	push   eax
c000ba2c:	e8 db fb ff ff       	call   c000b60c <IDTEntry::IDTEntry(bool)>
c000ba31:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ba35:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ba3a:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ba41:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ba47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ba4b:	80 ce 05             	or     dh,0x5
c000ba4e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ba51:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba55:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ba59:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ba5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ba5f:	e8 86 fc ff ff       	call   c000b6ea <IDT::flush()>
c000ba64:	83 c4 20             	add    esp,0x20
c000ba67:	5b                   	pop    ebx
c000ba68:	5e                   	pop    esi
c000ba69:	5f                   	pop    edi
c000ba6a:	c3                   	ret    

c000ba6b <sbrk>:
c000ba6b:	55                   	push   ebp
c000ba6c:	57                   	push   edi
c000ba6d:	56                   	push   esi
c000ba6e:	53                   	push   ebx
c000ba6f:	83 ec 1c             	sub    esp,0x1c
c000ba72:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ba76:	85 db                	test   ebx,ebx
c000ba78:	74 37                	je     c000bab1 <sbrk+0x46>
c000ba7a:	78 3f                	js     c000babb <sbrk+0x50>
c000ba7c:	e8 f3 82 00 00       	call   c0013d74 <thisCPU()>
c000ba81:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000ba87:	83 e0 01             	and    eax,0x1
c000ba8a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000ba8e:	a1 34 26 02 c0       	mov    eax,ds:0xc0022634
c000ba93:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba97:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000ba9d:	89 d8                	mov    eax,ebx
c000ba9f:	78 35                	js     c000bad6 <sbrk+0x6b>
c000baa1:	c1 f8 0c             	sar    eax,0xc
c000baa4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000baa8:	89 c7                	mov    edi,eax
c000baaa:	be 00 00 00 00       	mov    esi,0x0
c000baaf:	eb 3c                	jmp    c000baed <sbrk+0x82>
c000bab1:	a1 34 26 02 c0       	mov    eax,ds:0xc0022634
c000bab6:	e9 ad 00 00 00       	jmp    c000bb68 <sbrk+0xfd>
c000babb:	83 ec 08             	sub    esp,0x8
c000babe:	53                   	push   ebx
c000babf:	68 f8 ff 01 c0       	push   0xc001fff8
c000bac4:	e8 1c 33 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000bac9:	83 c4 10             	add    esp,0x10
c000bacc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bad1:	e9 92 00 00 00       	jmp    c000bb68 <sbrk+0xfd>
c000bad6:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000badc:	eb c3                	jmp    c000baa1 <sbrk+0x36>
c000bade:	81 05 34 26 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0022634,0x1000
c000bae8:	46                   	inc    esi
c000bae9:	39 f7                	cmp    edi,esi
c000baeb:	74 34                	je     c000bb21 <sbrk+0xb6>
c000baed:	e8 03 22 00 00       	call   c000dcf5 <Virt::getAKernelVAS()>
c000baf2:	89 c3                	mov    ebx,eax
c000baf4:	8b 2d 34 26 02 c0    	mov    ebp,DWORD PTR ds:0xc0022634
c000bafa:	e8 c9 06 00 00       	call   c000c1c8 <Phys::allocatePage()>
c000baff:	68 01 04 00 00       	push   0x401
c000bb04:	55                   	push   ebp
c000bb05:	50                   	push   eax
c000bb06:	53                   	push   ebx
c000bb07:	e8 90 26 00 00       	call   c000e19c <VAS::mapPage(unsigned long, unsigned long, int)>
c000bb0c:	83 c4 10             	add    esp,0x10
c000bb0f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bb14:	74 c8                	je     c000bade <sbrk+0x73>
c000bb16:	8b 1d 34 26 02 c0    	mov    ebx,DWORD PTR ds:0xc0022634
c000bb1c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb1f:	eb bd                	jmp    c000bade <sbrk+0x73>
c000bb21:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bb26:	74 48                	je     c000bb70 <sbrk+0x105>
c000bb28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bb2c:	89 d3                	mov    ebx,edx
c000bb2e:	c1 eb 0a             	shr    ebx,0xa
c000bb31:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bb37:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bb3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb41:	c1 e0 0c             	shl    eax,0xc
c000bb44:	01 d0                	add    eax,edx
c000bb46:	c1 e8 0a             	shr    eax,0xa
c000bb49:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bb4e:	2d 00 00 40 00       	sub    eax,0x400000
c000bb53:	39 c3                	cmp    ebx,eax
c000bb55:	77 0d                	ja     c000bb64 <sbrk+0xf9>
c000bb57:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb5a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bb60:	39 d8                	cmp    eax,ebx
c000bb62:	73 f3                	jae    c000bb57 <sbrk+0xec>
c000bb64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb68:	83 c4 1c             	add    esp,0x1c
c000bb6b:	5b                   	pop    ebx
c000bb6c:	5e                   	pop    esi
c000bb6d:	5f                   	pop    edi
c000bb6e:	5d                   	pop    ebp
c000bb6f:	c3                   	ret    
c000bb70:	e8 e0 2a 01 00       	call   c001e655 <CPU::readCR3()>
c000bb75:	83 ec 0c             	sub    esp,0xc
c000bb78:	50                   	push   eax
c000bb79:	e8 e9 2a 01 00       	call   c001e667 <CPU::writeCR3(unsigned long)>
c000bb7e:	83 c4 10             	add    esp,0x10
c000bb81:	eb e1                	jmp    c000bb64 <sbrk+0xf9>

c000bb83 <mmap>:
c000bb83:	83 ec 18             	sub    esp,0x18
c000bb86:	68 28 00 02 c0       	push   0xc0020028
c000bb8b:	e8 ea 8e 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c000bb90:	b8 00 00 00 00       	mov    eax,0x0
c000bb95:	83 c4 1c             	add    esp,0x1c
c000bb98:	c3                   	ret    

c000bb99 <munmap>:
c000bb99:	83 ec 18             	sub    esp,0x18
c000bb9c:	68 2d 00 02 c0       	push   0xc002002d
c000bba1:	e8 d4 8e 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c000bba6:	b8 00 00 00 00       	mov    eax,0x0
c000bbab:	83 c4 1c             	add    esp,0x1c
c000bbae:	c3                   	ret    

c000bbaf <liballoc_lock()>:
c000bbaf:	83 ec 0c             	sub    esp,0xc
c000bbb2:	e8 23 bc 00 00       	call   c00177da <lockScheduler()>
c000bbb7:	b8 00 00 00 00       	mov    eax,0x0
c000bbbc:	83 c4 0c             	add    esp,0xc
c000bbbf:	c3                   	ret    

c000bbc0 <liballoc_unlock()>:
c000bbc0:	83 ec 0c             	sub    esp,0xc
c000bbc3:	e8 14 bc 00 00       	call   c00177dc <unlockScheduler()>
c000bbc8:	b8 00 00 00 00       	mov    eax,0x0
c000bbcd:	83 c4 0c             	add    esp,0xc
c000bbd0:	c3                   	ret    

c000bbd1 <liballoc_alloc(int)>:
c000bbd1:	83 ec 0c             	sub    esp,0xc
c000bbd4:	e8 1c 21 00 00       	call   c000dcf5 <Virt::getAKernelVAS()>
c000bbd9:	83 ec 04             	sub    esp,0x4
c000bbdc:	6a 01                	push   0x1
c000bbde:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbe2:	50                   	push   eax
c000bbe3:	e8 b4 26 00 00       	call   c000e29c <VAS::allocatePages(int, int)>
c000bbe8:	83 c4 1c             	add    esp,0x1c
c000bbeb:	c3                   	ret    

c000bbec <liballoc_free(void*, int)>:
c000bbec:	83 ec 0c             	sub    esp,0xc
c000bbef:	e8 01 21 00 00       	call   c000dcf5 <Virt::getAKernelVAS()>
c000bbf4:	83 ec 08             	sub    esp,0x8
c000bbf7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbfb:	50                   	push   eax
c000bbfc:	e8 bd 23 00 00       	call   c000dfbe <VAS::freeAllocatedPages(unsigned long)>
c000bc01:	b8 00 00 00 00       	mov    eax,0x0
c000bc06:	83 c4 1c             	add    esp,0x1c
c000bc09:	c3                   	ret    

c000bc0a <realloc>:
c000bc0a:	83 ec 14             	sub    esp,0x14
c000bc0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc15:	e8 67 57 ff ff       	call   c0001381 <dlrealloc>
c000bc1a:	83 c4 1c             	add    esp,0x1c
c000bc1d:	c3                   	ret    

c000bc1e <malloc>:
c000bc1e:	83 ec 18             	sub    esp,0x18
c000bc21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc25:	e8 1a 52 ff ff       	call   c0000e44 <dlmalloc>
c000bc2a:	83 c4 1c             	add    esp,0x1c
c000bc2d:	c3                   	ret    

c000bc2e <free>:
c000bc2e:	83 ec 18             	sub    esp,0x18
c000bc31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc35:	e8 af 4e ff ff       	call   c0000ae9 <dlfree>
c000bc3a:	83 c4 1c             	add    esp,0x1c
c000bc3d:	c3                   	ret    

c000bc3e <rfree>:
c000bc3e:	83 ec 18             	sub    esp,0x18
c000bc41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc45:	e8 e4 ff ff ff       	call   c000bc2e <free>
c000bc4a:	83 c4 1c             	add    esp,0x1c
c000bc4d:	c3                   	ret    

c000bc4e <calloc>:
c000bc4e:	56                   	push   esi
c000bc4f:	53                   	push   ebx
c000bc50:	83 ec 10             	sub    esp,0x10
c000bc53:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bc57:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000bc5c:	53                   	push   ebx
c000bc5d:	e8 bc ff ff ff       	call   c000bc1e <malloc>
c000bc62:	89 c6                	mov    esi,eax
c000bc64:	83 c4 0c             	add    esp,0xc
c000bc67:	53                   	push   ebx
c000bc68:	6a 00                	push   0x0
c000bc6a:	50                   	push   eax
c000bc6b:	e8 98 49 ff ff       	call   c0000608 <memset>
c000bc70:	89 f0                	mov    eax,esi
c000bc72:	83 c4 14             	add    esp,0x14
c000bc75:	5b                   	pop    ebx
c000bc76:	5e                   	pop    esi
c000bc77:	c3                   	ret    

c000bc78 <hwTextMode_loadInData(VgaText*)>:
c000bc78:	57                   	push   edi
c000bc79:	56                   	push   esi
c000bc7a:	53                   	push   ebx
c000bc7b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bc7f:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000bc85:	85 c0                	test   eax,eax
c000bc87:	7e 30                	jle    c000bcb9 <hwTextMode_loadInData(VgaText*)+0x41>
c000bc89:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000bc8c:	31 f6                	xor    esi,esi
c000bc8e:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000bc91:	31 c0                	xor    eax,eax
c000bc93:	c1 e1 05             	shl    ecx,0x5
c000bc96:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000bc9c:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000bca0:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000bca4:	40                   	inc    eax
c000bca5:	83 f8 50             	cmp    eax,0x50
c000bca8:	75 f2                	jne    c000bc9c <hwTextMode_loadInData(VgaText*)+0x24>
c000bcaa:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000bcb0:	46                   	inc    esi
c000bcb1:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000bcb7:	7f d5                	jg     c000bc8e <hwTextMode_loadInData(VgaText*)+0x16>
c000bcb9:	5b                   	pop    ebx
c000bcba:	5e                   	pop    esi
c000bcbb:	5f                   	pop    edi
c000bcbc:	c3                   	ret    

c000bcbd <hwTextMode_loadInTitle(VgaText*, char*)>:
c000bcbd:	56                   	push   esi
c000bcbe:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000bcc3:	53                   	push   ebx
c000bcc4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bcc8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bccc:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000bcd2:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000bcd8:	c1 e0 04             	shl    eax,0x4
c000bcdb:	83 e6 0f             	and    esi,0xf
c000bcde:	0f b6 c0             	movzx  eax,al
c000bce1:	41                   	inc    ecx
c000bce2:	09 f0                	or     eax,esi
c000bce4:	83 c2 02             	add    edx,0x2
c000bce7:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000bceb:	c1 e0 08             	shl    eax,0x8
c000bcee:	09 f0                	or     eax,esi
c000bcf0:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000bcf4:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000bcfa:	75 d0                	jne    c000bccc <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000bcfc:	5b                   	pop    ebx
c000bcfd:	5e                   	pop    esi
c000bcfe:	c3                   	ret    

c000bcff <hwTextMode_showCursor(VgaText*, bool)>:
c000bcff:	56                   	push   esi
c000bd00:	53                   	push   ebx
c000bd01:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000bd06:	74 38                	je     c000bd40 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000bd08:	bb d4 03 00 00       	mov    ebx,0x3d4
c000bd0d:	b0 0a                	mov    al,0xa
c000bd0f:	89 da                	mov    edx,ebx
c000bd11:	ee                   	out    dx,al
c000bd12:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000bd17:	89 ca                	mov    edx,ecx
c000bd19:	ec                   	in     al,dx
c000bd1a:	b2 0f                	mov    dl,0xf
c000bd1c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bd20:	83 e0 c0             	and    eax,0xffffffc0
c000bd23:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000bd29:	09 d0                	or     eax,edx
c000bd2b:	89 ca                	mov    edx,ecx
c000bd2d:	ee                   	out    dx,al
c000bd2e:	b0 0b                	mov    al,0xb
c000bd30:	89 da                	mov    edx,ebx
c000bd32:	ee                   	out    dx,al
c000bd33:	89 ca                	mov    edx,ecx
c000bd35:	ec                   	in     al,dx
c000bd36:	83 e0 e0             	and    eax,0xffffffe0
c000bd39:	83 c8 0f             	or     eax,0xf
c000bd3c:	ee                   	out    dx,al
c000bd3d:	5b                   	pop    ebx
c000bd3e:	5e                   	pop    esi
c000bd3f:	c3                   	ret    
c000bd40:	b0 0a                	mov    al,0xa
c000bd42:	ba d4 03 00 00       	mov    edx,0x3d4
c000bd47:	ee                   	out    dx,al
c000bd48:	b0 20                	mov    al,0x20
c000bd4a:	ba d5 03 00 00       	mov    edx,0x3d5
c000bd4f:	ee                   	out    dx,al
c000bd50:	5b                   	pop    ebx
c000bd51:	5e                   	pop    esi
c000bd52:	c3                   	ret    

c000bd53 <hwTextMode_update(VgaText*)>:
c000bd53:	c3                   	ret    

c000bd54 <hwTextMode_updateCursor(VgaText*)>:
c000bd54:	56                   	push   esi
c000bd55:	b9 19 00 00 00       	mov    ecx,0x19
c000bd5a:	53                   	push   ebx
c000bd5b:	be d4 03 00 00       	mov    esi,0x3d4
c000bd60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd64:	89 f2                	mov    edx,esi
c000bd66:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000bd6c:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000bd72:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000bd75:	c1 e1 04             	shl    ecx,0x4
c000bd78:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000bd7e:	b0 0f                	mov    al,0xf
c000bd80:	ee                   	out    dx,al
c000bd81:	bb d5 03 00 00       	mov    ebx,0x3d5
c000bd86:	88 c8                	mov    al,cl
c000bd88:	89 da                	mov    edx,ebx
c000bd8a:	ee                   	out    dx,al
c000bd8b:	b0 0e                	mov    al,0xe
c000bd8d:	89 f2                	mov    edx,esi
c000bd8f:	ee                   	out    dx,al
c000bd90:	89 c8                	mov    eax,ecx
c000bd92:	89 da                	mov    edx,ebx
c000bd94:	66 c1 e8 08          	shr    ax,0x8
c000bd98:	ee                   	out    dx,al
c000bd99:	5b                   	pop    ebx
c000bd9a:	5e                   	pop    esi
c000bd9b:	c3                   	ret    

c000bd9c <hwTextMode_disableBlink(VgaText*, bool)>:
c000bd9c:	ba da 03 00 00       	mov    edx,0x3da
c000bda1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000bda6:	75 18                	jne    c000bdc0 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000bda8:	ec                   	in     al,dx
c000bda9:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000bdae:	b0 30                	mov    al,0x30
c000bdb0:	89 ca                	mov    edx,ecx
c000bdb2:	ee                   	out    dx,al
c000bdb3:	ba c1 03 00 00       	mov    edx,0x3c1
c000bdb8:	ec                   	in     al,dx
c000bdb9:	83 c8 08             	or     eax,0x8
c000bdbc:	89 ca                	mov    edx,ecx
c000bdbe:	ee                   	out    dx,al
c000bdbf:	c3                   	ret    
c000bdc0:	ec                   	in     al,dx
c000bdc1:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000bdc6:	b0 30                	mov    al,0x30
c000bdc8:	89 ca                	mov    edx,ecx
c000bdca:	ee                   	out    dx,al
c000bdcb:	ba c1 03 00 00       	mov    edx,0x3c1
c000bdd0:	ec                   	in     al,dx
c000bdd1:	83 e0 f7             	and    eax,0xfffffff7
c000bdd4:	89 ca                	mov    edx,ecx
c000bdd6:	ee                   	out    dx,al
c000bdd7:	c3                   	ret    

c000bdd8 <hwTextMode_scrollScreen(VgaText*)>:
c000bdd8:	55                   	push   ebp
c000bdd9:	bd 02 00 00 00       	mov    ebp,0x2
c000bdde:	57                   	push   edi
c000bddf:	56                   	push   esi
c000bde0:	53                   	push   ebx
c000bde1:	83 ec 1c             	sub    esp,0x1c
c000bde4:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000bdec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bdf0:	31 c0                	xor    eax,eax
c000bdf2:	eb 0b                	jmp    c000bdff <hwTextMode_scrollScreen(VgaText*)+0x27>
c000bdf4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000bdfa:	74 57                	je     c000be53 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000bdfc:	43                   	inc    ebx
c000bdfd:	89 f0                	mov    eax,esi
c000bdff:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000be05:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000be0b:	88 13                	mov    BYTE PTR [ebx],dl
c000be0d:	8d 70 01             	lea    esi,[eax+0x1]
c000be10:	83 fd 18             	cmp    ebp,0x18
c000be13:	75 df                	jne    c000bdf4 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000be15:	a8 01                	test   al,0x1
c000be17:	75 13                	jne    c000be2c <hwTextMode_scrollScreen(VgaText*)+0x54>
c000be19:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000be1c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000be22:	75 d8                	jne    c000bdfc <hwTextMode_scrollScreen(VgaText*)+0x24>
c000be24:	83 c4 1c             	add    esp,0x1c
c000be27:	5b                   	pop    ebx
c000be28:	5e                   	pop    esi
c000be29:	5f                   	pop    edi
c000be2a:	5d                   	pop    ebp
c000be2b:	c3                   	ret    
c000be2c:	83 ec 08             	sub    esp,0x8
c000be2f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000be33:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000be3a:	50                   	push   eax
c000be3b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000be3f:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000be46:	50                   	push   eax
c000be47:	e8 e0 0a 00 00       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	88 07                	mov    BYTE PTR [edi],al
c000be51:	eb c9                	jmp    c000be1c <hwTextMode_scrollScreen(VgaText*)+0x44>
c000be53:	45                   	inc    ebp
c000be54:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000be5c:	eb 8e                	jmp    c000bdec <hwTextMode_scrollScreen(VgaText*)+0x14>

c000be5e <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000be5e:	56                   	push   esi
c000be5f:	53                   	push   ebx
c000be60:	83 ec 0c             	sub    esp,0xc
c000be63:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000be67:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000be6b:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000be70:	50                   	push   eax
c000be71:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000be76:	50                   	push   eax
c000be77:	e8 b0 0a 00 00       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000be7c:	5a                   	pop    edx
c000be7d:	0f b6 c0             	movzx  eax,al
c000be80:	59                   	pop    ecx
c000be81:	50                   	push   eax
c000be82:	89 f0                	mov    eax,esi
c000be84:	0f be f0             	movsx  esi,al
c000be87:	56                   	push   esi
c000be88:	e8 45 0b 00 00       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000be8d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000be91:	ba 19 00 00 00       	mov    edx,0x19
c000be96:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000be9c:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000be9f:	8d 14 92             	lea    edx,[edx+edx*4]
c000bea2:	c1 e1 04             	shl    ecx,0x4
c000bea5:	c1 e2 04             	shl    edx,0x4
c000bea8:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000beac:	01 ca                	add    edx,ecx
c000beae:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000beb6:	83 c4 14             	add    esp,0x14
c000beb9:	5b                   	pop    ebx
c000beba:	5e                   	pop    esi
c000bebb:	c3                   	ret    

c000bebc <setupTextMode()>:
c000bebc:	c7 05 b8 32 02 c0 9c bd 00 c0 	mov    DWORD PTR ds:0xc00232b8,0xc000bd9c
c000bec6:	c7 05 a4 32 02 c0 78 bc 00 c0 	mov    DWORD PTR ds:0xc00232a4,0xc000bc78
c000bed0:	c7 05 a0 32 02 c0 bd bc 00 c0 	mov    DWORD PTR ds:0xc00232a0,0xc000bcbd
c000beda:	c7 05 ac 32 02 c0 d8 bd 00 c0 	mov    DWORD PTR ds:0xc00232ac,0xc000bdd8
c000bee4:	c7 05 b4 32 02 c0 ff bc 00 c0 	mov    DWORD PTR ds:0xc00232b4,0xc000bcff
c000beee:	c7 05 a8 32 02 c0 53 bd 00 c0 	mov    DWORD PTR ds:0xc00232a8,0xc000bd53
c000bef8:	c7 05 b0 32 02 c0 54 bd 00 c0 	mov    DWORD PTR ds:0xc00232b0,0xc000bd54
c000bf02:	c7 05 bc 32 02 c0 5e be 00 c0 	mov    DWORD PTR ds:0xc00232bc,0xc000be5e
c000bf0c:	c3                   	ret    

c000bf0d <kernel_main>:
c000bf0d:	57                   	push   edi
c000bf0e:	bf f9 03 00 00       	mov    edi,0x3f9
c000bf13:	56                   	push   esi
c000bf14:	31 f6                	xor    esi,esi
c000bf16:	53                   	push   ebx
c000bf17:	83 ec 10             	sub    esp,0x10
c000bf1a:	e8 67 08 00 00       	call   c000c786 <installVgaTextImplementation()>
c000bf1f:	e8 98 ff ff ff       	call   c000bebc <setupTextMode()>
c000bf24:	89 f0                	mov    eax,esi
c000bf26:	89 fa                	mov    edx,edi
c000bf28:	ee                   	out    dx,al
c000bf29:	bb fb 03 00 00       	mov    ebx,0x3fb
c000bf2e:	b0 80                	mov    al,0x80
c000bf30:	89 da                	mov    edx,ebx
c000bf32:	ee                   	out    dx,al
c000bf33:	b1 03                	mov    cl,0x3
c000bf35:	ba f8 03 00 00       	mov    edx,0x3f8
c000bf3a:	88 c8                	mov    al,cl
c000bf3c:	ee                   	out    dx,al
c000bf3d:	89 f0                	mov    eax,esi
c000bf3f:	89 fa                	mov    edx,edi
c000bf41:	ee                   	out    dx,al
c000bf42:	88 c8                	mov    al,cl
c000bf44:	89 da                	mov    edx,ebx
c000bf46:	ee                   	out    dx,al
c000bf47:	b0 c7                	mov    al,0xc7
c000bf49:	ba fa 03 00 00       	mov    edx,0x3fa
c000bf4e:	ee                   	out    dx,al
c000bf4f:	b0 0b                	mov    al,0xb
c000bf51:	ba fc 03 00 00       	mov    edx,0x3fc
c000bf56:	ee                   	out    dx,al
c000bf57:	a1 24 05 00 00       	mov    eax,ds:0x524
c000bf5c:	83 ec 0c             	sub    esp,0xc
c000bf5f:	05 ff 0f 00 00       	add    eax,0xfff
c000bf64:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf69:	50                   	push   eax
c000bf6a:	e8 4d 03 00 00       	call   c000c2bc <Phys::physicalMemorySetup(unsigned int)>
c000bf6f:	e8 02 1d 00 00       	call   c000dc76 <Virt::virtualMemorySetup()>
c000bf74:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000bf7a:	83 c4 10             	add    esp,0x10
c000bf7d:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000bf83:	75 0e                	jne    c000bf93 <kernel_main+0x86>
c000bf85:	89 d8                	mov    eax,ebx
c000bf87:	25 48 03 00 00       	and    eax,0x348
c000bf8c:	3d 00 03 00 00       	cmp    eax,0x300
c000bf91:	74 10                	je     c000bfa3 <kernel_main+0x96>
c000bf93:	83 ec 0c             	sub    esp,0xc
c000bf96:	68 fb 13 02 c0       	push   0xc00213fb
c000bf9b:	e8 da 8a 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c000bfa0:	83 c4 10             	add    esp,0x10
c000bfa3:	83 ec 0c             	sub    esp,0xc
c000bfa6:	89 1d 20 32 02 c0    	mov    DWORD PTR ds:0xc0023220,ebx
c000bfac:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000bfb0:	53                   	push   ebx
c000bfb1:	e8 6a 1e 00 00       	call   c000de20 <VAS::VAS()>
c000bfb6:	89 1d dc 32 02 c0    	mov    DWORD PTR ds:0xc00232dc,ebx
c000bfbc:	e8 5f 40 ff ff       	call   c0000020 <callGlobalConstructors>
c000bfc1:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000bfc8:	e8 29 2d 00 00       	call   c000ecf6 <operator new(unsigned long)>
c000bfcd:	89 04 24             	mov    DWORD PTR [esp],eax
c000bfd0:	89 c6                	mov    esi,eax
c000bfd2:	e8 cb ed ff ff       	call   c000ada2 <Computer::Computer()>
c000bfd7:	6a 00                	push   0x0
c000bfd9:	89 35 08 32 02 c0    	mov    DWORD PTR ds:0xc0023208,esi
c000bfdf:	6a 00                	push   0x0
c000bfe1:	6a 00                	push   0x0
c000bfe3:	56                   	push   esi
c000bfe4:	e8 7f f2 ff ff       	call   c000b268 <Computer::open(int, int, void*)>
c000bfe9:	83 c4 14             	add    esp,0x14
c000bfec:	53                   	push   ebx
c000bfed:	e8 3e 20 00 00       	call   c000e030 <VAS::~VAS()>
c000bff2:	c7 04 24 34 00 02 c0 	mov    DWORD PTR [esp],0xc0020034
c000bff9:	e8 7c 8a 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c000bffe:	83 c4 20             	add    esp,0x20
c000c001:	5b                   	pop    ebx
c000c002:	5e                   	pop    esi
c000c003:	5f                   	pop    edi
c000c004:	c3                   	ret    

c000c005 <Phys::allocateDMA(unsigned long)>:
c000c005:	55                   	push   ebp
c000c006:	31 d2                	xor    edx,edx
c000c008:	57                   	push   edi
c000c009:	31 ed                	xor    ebp,ebp
c000c00b:	56                   	push   esi
c000c00c:	31 c9                	xor    ecx,ecx
c000c00e:	53                   	push   ebx
c000c00f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c013:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000c019:	31 c0                	xor    eax,eax
c000c01b:	c1 ee 0c             	shr    esi,0xc
c000c01e:	eb 17                	jmp    c000c037 <Phys::allocateDMA(unsigned long)+0x32>
c000c020:	85 c9                	test   ecx,ecx
c000c022:	75 04                	jne    c000c028 <Phys::allocateDMA(unsigned long)+0x23>
c000c024:	89 d5                	mov    ebp,edx
c000c026:	89 d0                	mov    eax,edx
c000c028:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c02b:	39 de                	cmp    esi,ebx
c000c02d:	74 20                	je     c000c04f <Phys::allocateDMA(unsigned long)+0x4a>
c000c02f:	42                   	inc    edx
c000c030:	89 d9                	mov    ecx,ebx
c000c032:	83 fa 2f             	cmp    edx,0x2f
c000c035:	7f 11                	jg     c000c048 <Phys::allocateDMA(unsigned long)+0x43>
c000c037:	80 ba 60 32 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdcda0],0x0
c000c03e:	74 e0                	je     c000c020 <Phys::allocateDMA(unsigned long)+0x1b>
c000c040:	31 c9                	xor    ecx,ecx
c000c042:	42                   	inc    edx
c000c043:	83 fa 2f             	cmp    edx,0x2f
c000c046:	7e ef                	jle    c000c037 <Phys::allocateDMA(unsigned long)+0x32>
c000c048:	5b                   	pop    ebx
c000c049:	31 c0                	xor    eax,eax
c000c04b:	5e                   	pop    esi
c000c04c:	5f                   	pop    edi
c000c04d:	5d                   	pop    ebp
c000c04e:	c3                   	ret    
c000c04f:	8d 14 30             	lea    edx,[eax+esi*1]
c000c052:	89 d7                	mov    edi,edx
c000c054:	4f                   	dec    edi
c000c055:	79 03                	jns    c000c05a <Phys::allocateDMA(unsigned long)+0x55>
c000c057:	8d 7a 0e             	lea    edi,[edx+0xe]
c000c05a:	c1 ff 04             	sar    edi,0x4
c000c05d:	89 c2                	mov    edx,eax
c000c05f:	c1 fa 04             	sar    edx,0x4
c000c062:	39 fa                	cmp    edx,edi
c000c064:	75 2f                	jne    c000c095 <Phys::allocateDMA(unsigned long)+0x90>
c000c066:	85 db                	test   ebx,ebx
c000c068:	74 1a                	je     c000c084 <Phys::allocateDMA(unsigned long)+0x7f>
c000c06a:	be 60 32 02 c0       	mov    esi,0xc0023260
c000c06f:	8d 90 60 32 02 c0    	lea    edx,[eax-0x3ffdcda0]
c000c075:	f7 d6                	not    esi
c000c077:	29 c6                	sub    esi,eax
c000c079:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c07c:	42                   	inc    edx
c000c07d:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000c080:	39 d9                	cmp    ecx,ebx
c000c082:	7f f5                	jg     c000c079 <Phys::allocateDMA(unsigned long)+0x74>
c000c084:	85 ff                	test   edi,edi
c000c086:	74 13                	je     c000c09b <Phys::allocateDMA(unsigned long)+0x96>
c000c088:	5b                   	pop    ebx
c000c089:	05 50 20 0c 00       	add    eax,0xc2050
c000c08e:	5e                   	pop    esi
c000c08f:	c1 e0 0c             	shl    eax,0xc
c000c092:	5f                   	pop    edi
c000c093:	5d                   	pop    ebp
c000c094:	c3                   	ret    
c000c095:	89 ea                	mov    edx,ebp
c000c097:	31 c9                	xor    ecx,ecx
c000c099:	eb a7                	jmp    c000c042 <Phys::allocateDMA(unsigned long)+0x3d>
c000c09b:	5b                   	pop    ebx
c000c09c:	c1 e0 0c             	shl    eax,0xc
c000c09f:	5e                   	pop    esi
c000c0a0:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000c0a5:	5f                   	pop    edi
c000c0a6:	5d                   	pop    ebp
c000c0a7:	c3                   	ret    

c000c0a8 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c0a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c0ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c0b0:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c0b6:	c1 e9 0c             	shr    ecx,0xc
c000c0b9:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c0be:	76 25                	jbe    c000c0e5 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c0c0:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c0c5:	c1 e8 0c             	shr    eax,0xc
c000c0c8:	8d 50 10             	lea    edx,[eax+0x10]
c000c0cb:	85 c9                	test   ecx,ecx
c000c0cd:	74 15                	je     c000c0e4 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c0cf:	8d 82 60 32 02 c0    	lea    eax,[edx-0x3ffdcda0]
c000c0d5:	8d 94 11 60 32 02 c0 	lea    edx,[ecx+edx*1-0x3ffdcda0]
c000c0dc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c0df:	40                   	inc    eax
c000c0e0:	39 d0                	cmp    eax,edx
c000c0e2:	75 f8                	jne    c000c0dc <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c0e4:	c3                   	ret    
c000c0e5:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c0eb:	c1 ea 0c             	shr    edx,0xc
c000c0ee:	eb db                	jmp    c000c0cb <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c0f0 <Phys::setPageState(unsigned long, bool)>:
c000c0f0:	56                   	push   esi
c000c0f1:	ba 01 00 00 00       	mov    edx,0x1
c000c0f6:	53                   	push   ebx
c000c0f7:	8b 35 38 26 02 c0    	mov    esi,DWORD PTR ds:0xc0022638
c000c0fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c101:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c105:	89 c8                	mov    eax,ecx
c000c107:	83 e1 07             	and    ecx,0x7
c000c10a:	c1 e8 03             	shr    eax,0x3
c000c10d:	d3 e3                	shl    ebx,cl
c000c10f:	01 c6                	add    esi,eax
c000c111:	d3 e2                	shl    edx,cl
c000c113:	f7 d2                	not    edx
c000c115:	20 16                	and    BYTE PTR [esi],dl
c000c117:	03 05 38 26 02 c0    	add    eax,DWORD PTR ds:0xc0022638
c000c11d:	08 18                	or     BYTE PTR [eax],bl
c000c11f:	5b                   	pop    ebx
c000c120:	5e                   	pop    esi
c000c121:	c3                   	ret    

c000c122 <Phys::getPageState(unsigned long)>:
c000c122:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c126:	8b 15 38 26 02 c0    	mov    edx,DWORD PTR ds:0xc0022638
c000c12c:	89 c8                	mov    eax,ecx
c000c12e:	83 e1 07             	and    ecx,0x7
c000c131:	c1 e8 03             	shr    eax,0x3
c000c134:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000c138:	d3 f8                	sar    eax,cl
c000c13a:	83 e0 01             	and    eax,0x1
c000c13d:	c3                   	ret    

c000c13e <Phys::freePage(unsigned long)>:
c000c13e:	53                   	push   ebx
c000c13f:	83 ec 08             	sub    esp,0x8
c000c142:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c146:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c14c:	76 57                	jbe    c000c1a5 <Phys::freePage(unsigned long)+0x67>
c000c14e:	c1 eb 0c             	shr    ebx,0xc
c000c151:	53                   	push   ebx
c000c152:	e8 cb ff ff ff       	call   c000c122 <Phys::getPageState(unsigned long)>
c000c157:	5a                   	pop    edx
c000c158:	84 c0                	test   al,al
c000c15a:	74 5b                	je     c000c1b7 <Phys::freePage(unsigned long)+0x79>
c000c15c:	a1 4c 32 02 c0       	mov    eax,ds:0xc002324c
c000c161:	48                   	dec    eax
c000c162:	a3 4c 32 02 c0       	mov    ds:0xc002324c,eax
c000c167:	8d 04 80             	lea    eax,[eax+eax*4]
c000c16a:	8d 04 80             	lea    eax,[eax+eax*4]
c000c16d:	c1 e0 02             	shl    eax,0x2
c000c170:	99                   	cdq    
c000c171:	f7 3d 50 32 02 c0    	idiv   DWORD PTR ds:0xc0023250
c000c177:	39 05 48 32 02 c0    	cmp    DWORD PTR ds:0xc0023248,eax
c000c17d:	75 13                	jne    c000c192 <Phys::freePage(unsigned long)+0x54>
c000c17f:	83 ec 08             	sub    esp,0x8
c000c182:	6a 00                	push   0x0
c000c184:	53                   	push   ebx
c000c185:	e8 66 ff ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c18a:	83 c4 10             	add    esp,0x10
c000c18d:	83 c4 08             	add    esp,0x8
c000c190:	5b                   	pop    ebx
c000c191:	c3                   	ret    
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	a3 48 32 02 c0       	mov    ds:0xc0023248,eax
c000c19a:	50                   	push   eax
c000c19b:	e8 7a 09 00 00       	call   c000cb1a <VgaText::updateRAMUsageDisplay(int)>
c000c1a0:	83 c4 10             	add    esp,0x10
c000c1a3:	eb da                	jmp    c000c17f <Phys::freePage(unsigned long)+0x41>
c000c1a5:	68 00 10 00 00       	push   0x1000
c000c1aa:	53                   	push   ebx
c000c1ab:	e8 f8 fe ff ff       	call   c000c0a8 <Phys::freeDMA(unsigned long, unsigned long)>
c000c1b0:	59                   	pop    ecx
c000c1b1:	5b                   	pop    ebx
c000c1b2:	83 c4 08             	add    esp,0x8
c000c1b5:	5b                   	pop    ebx
c000c1b6:	c3                   	ret    
c000c1b7:	c7 44 24 10 4f 00 02 c0 	mov    DWORD PTR [esp+0x10],0xc002004f
c000c1bf:	83 c4 08             	add    esp,0x8
c000c1c2:	5b                   	pop    ebx
c000c1c3:	e9 b2 88 00 00       	jmp    c0014a7a <Krnl::panic(char const*)>

c000c1c8 <Phys::allocatePage()>:
c000c1c8:	56                   	push   esi
c000c1c9:	53                   	push   ebx
c000c1ca:	51                   	push   ecx
c000c1cb:	8b 35 40 32 02 c0    	mov    esi,DWORD PTR ds:0xc0023240
c000c1d1:	89 f3                	mov    ebx,esi
c000c1d3:	eb 0a                	jmp    c000c1df <Phys::allocatePage()+0x17>
c000c1d5:	89 1d 40 32 02 c0    	mov    DWORD PTR ds:0xc0023240,ebx
c000c1db:	39 de                	cmp    esi,ebx
c000c1dd:	74 24                	je     c000c203 <Phys::allocatePage()+0x3b>
c000c1df:	53                   	push   ebx
c000c1e0:	e8 3d ff ff ff       	call   c000c122 <Phys::getPageState(unsigned long)>
c000c1e5:	5a                   	pop    edx
c000c1e6:	84 c0                	test   al,al
c000c1e8:	74 4e                	je     c000c238 <Phys::allocatePage()+0x70>
c000c1ea:	43                   	inc    ebx
c000c1eb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c1f1:	75 e2                	jne    c000c1d5 <Phys::allocatePage()+0xd>
c000c1f3:	31 db                	xor    ebx,ebx
c000c1f5:	c7 05 40 32 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023240,0x0
c000c1ff:	39 de                	cmp    esi,ebx
c000c201:	75 dc                	jne    c000c1df <Phys::allocatePage()+0x17>
c000c203:	83 ec 0c             	sub    esp,0xc
c000c206:	68 00 10 00 00       	push   0x1000
c000c20b:	e8 f5 fd ff ff       	call   c000c005 <Phys::allocateDMA(unsigned long)>
c000c210:	83 c4 10             	add    esp,0x10
c000c213:	85 c0                	test   eax,eax
c000c215:	75 56                	jne    c000c26d <Phys::allocatePage()+0xa5>
c000c217:	83 ec 0c             	sub    esp,0xc
c000c21a:	68 65 00 02 c0       	push   0xc0020065
c000c21f:	e8 56 88 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c000c224:	83 c4 10             	add    esp,0x10
c000c227:	8b 1d 40 32 02 c0    	mov    ebx,DWORD PTR ds:0xc0023240
c000c22d:	53                   	push   ebx
c000c22e:	e8 ef fe ff ff       	call   c000c122 <Phys::getPageState(unsigned long)>
c000c233:	5a                   	pop    edx
c000c234:	84 c0                	test   al,al
c000c236:	75 b2                	jne    c000c1ea <Phys::allocatePage()+0x22>
c000c238:	6a 01                	push   0x1
c000c23a:	53                   	push   ebx
c000c23b:	e8 b0 fe ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c240:	a1 4c 32 02 c0       	mov    eax,ds:0xc002324c
c000c245:	59                   	pop    ecx
c000c246:	40                   	inc    eax
c000c247:	5b                   	pop    ebx
c000c248:	a3 4c 32 02 c0       	mov    ds:0xc002324c,eax
c000c24d:	8d 04 80             	lea    eax,[eax+eax*4]
c000c250:	8d 04 80             	lea    eax,[eax+eax*4]
c000c253:	c1 e0 02             	shl    eax,0x2
c000c256:	99                   	cdq    
c000c257:	f7 3d 50 32 02 c0    	idiv   DWORD PTR ds:0xc0023250
c000c25d:	39 05 48 32 02 c0    	cmp    DWORD PTR ds:0xc0023248,eax
c000c263:	75 0c                	jne    c000c271 <Phys::allocatePage()+0xa9>
c000c265:	a1 40 32 02 c0       	mov    eax,ds:0xc0023240
c000c26a:	c1 e0 0c             	shl    eax,0xc
c000c26d:	5a                   	pop    edx
c000c26e:	5b                   	pop    ebx
c000c26f:	5e                   	pop    esi
c000c270:	c3                   	ret    
c000c271:	83 ec 0c             	sub    esp,0xc
c000c274:	a3 48 32 02 c0       	mov    ds:0xc0023248,eax
c000c279:	50                   	push   eax
c000c27a:	e8 9b 08 00 00       	call   c000cb1a <VgaText::updateRAMUsageDisplay(int)>
c000c27f:	83 c4 10             	add    esp,0x10
c000c282:	eb e1                	jmp    c000c265 <Phys::allocatePage()+0x9d>

c000c284 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c284:	56                   	push   esi
c000c285:	53                   	push   ebx
c000c286:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c28a:	39 1d 44 32 02 c0    	cmp    DWORD PTR ds:0xc0023244,ebx
c000c290:	73 06                	jae    c000c298 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c292:	89 1d 44 32 02 c0    	mov    DWORD PTR ds:0xc0023244,ebx
c000c298:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c29c:	c1 eb 0c             	shr    ebx,0xc
c000c29f:	c1 e8 0c             	shr    eax,0xc
c000c2a2:	39 d8                	cmp    eax,ebx
c000c2a4:	73 13                	jae    c000c2b9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c2a6:	6a 00                	push   0x0
c000c2a8:	8d 70 01             	lea    esi,[eax+0x1]
c000c2ab:	50                   	push   eax
c000c2ac:	e8 3f fe ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c2b1:	5a                   	pop    edx
c000c2b2:	89 f0                	mov    eax,esi
c000c2b4:	59                   	pop    ecx
c000c2b5:	39 f3                	cmp    ebx,esi
c000c2b7:	75 ed                	jne    c000c2a6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c2b9:	5b                   	pop    ebx
c000c2ba:	5e                   	pop    esi
c000c2bb:	c3                   	ret    

c000c2bc <Phys::physicalMemorySetup(unsigned int)>:
c000c2bc:	55                   	push   ebp
c000c2bd:	57                   	push   edi
c000c2be:	56                   	push   esi
c000c2bf:	53                   	push   ebx
c000c2c0:	31 db                	xor    ebx,ebx
c000c2c2:	83 ec 30             	sub    esp,0x30
c000c2c5:	6a 30                	push   0x30
c000c2c7:	6a 00                	push   0x0
c000c2c9:	68 60 32 02 c0       	push   0xc0023260
c000c2ce:	e8 35 43 ff ff       	call   c0000608 <memset>
c000c2d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c2d7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c2dc:	05 00 10 00 00       	add    eax,0x1000
c000c2e1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c2e5:	83 c4 10             	add    esp,0x10
c000c2e8:	83 ec 08             	sub    esp,0x8
c000c2eb:	6a 01                	push   0x1
c000c2ed:	53                   	push   ebx
c000c2ee:	43                   	inc    ebx
c000c2ef:	e8 fc fd ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c2f4:	83 c4 10             	add    esp,0x10
c000c2f7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c2fd:	75 e9                	jne    c000c2e8 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c2ff:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000c306:	66 85 c0             	test   ax,ax
c000c309:	0f 84 28 01 00 00    	je     c000c437 <Phys::physicalMemorySetup(unsigned int)+0x17b>
c000c30f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c313:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000c319:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000c31e:	8b 35 08 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000608
c000c324:	8b 3d 0c 06 00 c2    	mov    edi,DWORD PTR ds:0xc200060c
c000c32a:	89 f1                	mov    ecx,esi
c000c32c:	89 fb                	mov    ebx,edi
c000c32e:	01 c1                	add    ecx,eax
c000c330:	89 d5                	mov    ebp,edx
c000c332:	11 d3                	adc    ebx,edx
c000c334:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c337:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c33b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c33f:	8b 0d 10 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000610
c000c345:	09 dd                	or     ebp,ebx
c000c347:	0f 85 fa 00 00 00    	jne    c000c447 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c34d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c351:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000c359:	c7 44 24 0c 00 06 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000600
c000c361:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000c365:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c36d:	eb 45                	jmp    c000c3b4 <Phys::physicalMemorySetup(unsigned int)+0xf8>
c000c36f:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000c373:	83 44 24 0c 18       	add    DWORD PTR [esp+0xc],0x18
c000c378:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c37c:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000c380:	0f 84 c1 00 00 00    	je     c000c447 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c386:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c38a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c38d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c390:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c000c393:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000c396:	89 c1                	mov    ecx,eax
c000c398:	89 d3                	mov    ebx,edx
c000c39a:	01 f1                	add    ecx,esi
c000c39c:	11 fb                	adc    ebx,edi
c000c39e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c3a1:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c3a5:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000c3a8:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c3ac:	09 d3                	or     ebx,edx
c000c3ae:	0f 85 93 00 00 00    	jne    c000c447 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c3b4:	49                   	dec    ecx
c000c3b5:	75 b8                	jne    c000c36f <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c3b7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000c3ba:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c3be:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c3c2:	39 e9                	cmp    ecx,ebp
c000c3c4:	89 d9                	mov    ecx,ebx
c000c3c6:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c3ca:	72 a3                	jb     c000c36f <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c3cc:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c3d1:	39 f1                	cmp    ecx,esi
c000c3d3:	b9 00 00 00 00       	mov    ecx,0x0
c000c3d8:	19 f9                	sbb    ecx,edi
c000c3da:	73 93                	jae    c000c36f <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c3dc:	39 e8                	cmp    eax,ebp
c000c3de:	89 d1                	mov    ecx,edx
c000c3e0:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c3e4:	73 13                	jae    c000c3f9 <Phys::physicalMemorySetup(unsigned int)+0x13d>
c000c3e6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000c3e9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000c3ed:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000c3f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c3f5:	1b 7c 24 1c          	sbb    edi,DWORD PTR [esp+0x1c]
c000c3f9:	83 ec 08             	sub    esp,0x8
c000c3fc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c400:	50                   	push   eax
c000c401:	e8 7e fe ff ff       	call   c000c284 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c406:	83 c4 0c             	add    esp,0xc
c000c409:	89 fa                	mov    edx,edi
c000c40b:	89 f0                	mov    eax,esi
c000c40d:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c411:	03 05 50 32 02 c0    	add    eax,DWORD PTR ds:0xc0023250
c000c417:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c41e:	a3 50 32 02 c0       	mov    ds:0xc0023250,eax
c000c423:	52                   	push   edx
c000c424:	50                   	push   eax
c000c425:	68 81 00 02 c0       	push   0xc0020081
c000c42a:	e8 b6 29 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000c42f:	83 c4 10             	add    esp,0x10
c000c432:	e9 38 ff ff ff       	jmp    c000c36f <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c437:	83 ec 0c             	sub    esp,0xc
c000c43a:	68 73 00 02 c0       	push   0xc0020073
c000c43f:	e8 36 86 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c000c444:	83 c4 10             	add    esp,0x10
c000c447:	bb 40 01 00 00       	mov    ebx,0x140
c000c44c:	83 ec 08             	sub    esp,0x8
c000c44f:	6a 00                	push   0x0
c000c451:	53                   	push   ebx
c000c452:	43                   	inc    ebx
c000c453:	e8 98 fc ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c458:	ff 05 50 32 02 c0    	inc    DWORD PTR ds:0xc0023250
c000c45e:	83 c4 10             	add    esp,0x10
c000c461:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c467:	75 e3                	jne    c000c44c <Phys::physicalMemorySetup(unsigned int)+0x190>
c000c469:	83 c4 2c             	add    esp,0x2c
c000c46c:	5b                   	pop    ebx
c000c46d:	5e                   	pop    esi
c000c46e:	5f                   	pop    edi
c000c46f:	5d                   	pop    ebp
c000c470:	c3                   	ret    
c000c471:	90                   	nop

c000c472 <Pipe::isAtty()>:
c000c472:	31 c0                	xor    eax,eax
c000c474:	c3                   	ret    
c000c475:	90                   	nop

c000c476 <Pipe::~Pipe()>:
c000c476:	83 ec 0c             	sub    esp,0xc
c000c479:	ba e0 00 02 c0       	mov    edx,0xc00200e0
c000c47e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c482:	89 10                	mov    DWORD PTR [eax],edx
c000c484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c488:	83 ec 0c             	sub    esp,0xc
c000c48b:	50                   	push   eax
c000c48c:	e8 f5 14 00 00       	call   c000d986 <UnixFile::~UnixFile()>
c000c491:	83 c4 10             	add    esp,0x10
c000c494:	90                   	nop
c000c495:	83 c4 0c             	add    esp,0xc
c000c498:	c3                   	ret    
c000c499:	90                   	nop

c000c49a <Pipe::~Pipe()>:
c000c49a:	83 ec 0c             	sub    esp,0xc
c000c49d:	83 ec 0c             	sub    esp,0xc
c000c4a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4a4:	e8 cd ff ff ff       	call   c000c476 <Pipe::~Pipe()>
c000c4a9:	83 c4 10             	add    esp,0x10
c000c4ac:	83 ec 08             	sub    esp,0x8
c000c4af:	6a 20                	push   0x20
c000c4b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4b5:	e8 4b 28 00 00       	call   c000ed05 <operator delete(void*, unsigned long)>
c000c4ba:	83 c4 10             	add    esp,0x10
c000c4bd:	83 c4 0c             	add    esp,0xc
c000c4c0:	c3                   	ret    
c000c4c1:	90                   	nop

c000c4c2 <Pipe::read(unsigned long long, void*, int*)>:
c000c4c2:	55                   	push   ebp
c000c4c3:	57                   	push   edi
c000c4c4:	56                   	push   esi
c000c4c5:	53                   	push   ebx
c000c4c6:	83 ec 1c             	sub    esp,0x1c
c000c4c9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c4cd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c4d1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c4d5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c4d8:	89 c8                	mov    eax,ecx
c000c4da:	99                   	cdq    
c000c4db:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c4df:	74 19                	je     c000c4fa <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c4e1:	39 f9                	cmp    ecx,edi
c000c4e3:	89 d1                	mov    ecx,edx
c000c4e5:	19 f1                	sbb    ecx,esi
c000c4e7:	73 11                	jae    c000c4fa <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c4e9:	e8 ec b2 00 00       	call   c00177da <lockScheduler()>
c000c4ee:	e8 1b b6 00 00       	call   c0017b0e <schedule()>
c000c4f3:	e8 e4 b2 00 00       	call   c00177dc <unlockScheduler()>
c000c4f8:	eb db                	jmp    c000c4d5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c4fa:	39 f8                	cmp    eax,edi
c000c4fc:	89 d1                	mov    ecx,edx
c000c4fe:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c502:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c506:	19 f1                	sbb    ecx,esi
c000c508:	73 08                	jae    c000c512 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c50a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c50e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c512:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c515:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c518:	29 c6                	sub    esi,eax
c000c51a:	89 f1                	mov    ecx,esi
c000c51c:	c1 f9 1f             	sar    ecx,0x1f
c000c51f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c523:	89 ca                	mov    edx,ecx
c000c525:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c529:	19 d1                	sbb    ecx,edx
c000c52b:	73 04                	jae    c000c531 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c52d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c531:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c535:	89 fd                	mov    ebp,edi
c000c537:	29 f5                	sub    ebp,esi
c000c539:	85 f6                	test   esi,esi
c000c53b:	74 12                	je     c000c54f <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c53d:	52                   	push   edx
c000c53e:	56                   	push   esi
c000c53f:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c542:	50                   	push   eax
c000c543:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c547:	e8 86 40 ff ff       	call   c00005d2 <memcpy>
c000c54c:	83 c4 10             	add    esp,0x10
c000c54f:	85 ed                	test   ebp,ebp
c000c551:	74 12                	je     c000c565 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c553:	50                   	push   eax
c000c554:	55                   	push   ebp
c000c555:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c558:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c55c:	56                   	push   esi
c000c55d:	e8 70 40 ff ff       	call   c00005d2 <memcpy>
c000c562:	83 c4 10             	add    esp,0x10
c000c565:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c568:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c56b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c56e:	99                   	cdq    
c000c56f:	89 f7                	mov    edi,esi
c000c571:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c575:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c579:	c1 ff 1f             	sar    edi,0x1f
c000c57c:	57                   	push   edi
c000c57d:	56                   	push   esi
c000c57e:	52                   	push   edx
c000c57f:	50                   	push   eax
c000c580:	e8 f7 1e 01 00       	call   c001e47c <__umoddi3>
c000c585:	83 c4 10             	add    esp,0x10
c000c588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c58b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c590:	75 10                	jne    c000c5a2 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000c592:	83 ec 0c             	sub    esp,0xc
c000c595:	68 9d 00 02 c0       	push   0xc002009d
c000c59a:	e8 db 84 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c000c59f:	83 c4 10             	add    esp,0x10
c000c5a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c5a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c5aa:	89 10                	mov    DWORD PTR [eax],edx
c000c5ac:	83 c4 1c             	add    esp,0x1c
c000c5af:	31 c0                	xor    eax,eax
c000c5b1:	5b                   	pop    ebx
c000c5b2:	5e                   	pop    esi
c000c5b3:	5f                   	pop    edi
c000c5b4:	5d                   	pop    ebp
c000c5b5:	c3                   	ret    

c000c5b6 <Pipe::write(unsigned long long, void*, int*)>:
c000c5b6:	55                   	push   ebp
c000c5b7:	57                   	push   edi
c000c5b8:	56                   	push   esi
c000c5b9:	53                   	push   ebx
c000c5ba:	83 ec 1c             	sub    esp,0x1c
c000c5bd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c5c1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c5c5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000c5c9:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5cc:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000c5cf:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000c5d2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c5d6:	89 de                	mov    esi,ebx
c000c5d8:	89 df                	mov    edi,ebx
c000c5da:	c1 ff 1f             	sar    edi,0x1f
c000c5dd:	01 c6                	add    esi,eax
c000c5df:	89 c8                	mov    eax,ecx
c000c5e1:	11 d7                	adc    edi,edx
c000c5e3:	99                   	cdq    
c000c5e4:	39 f1                	cmp    ecx,esi
c000c5e6:	89 d0                	mov    eax,edx
c000c5e8:	19 f8                	sbb    eax,edi
c000c5ea:	b8 01 00 00 00       	mov    eax,0x1
c000c5ef:	0f 82 80 00 00 00    	jb     c000c675 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000c5f5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000c5f8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000c5fb:	01 d8                	add    eax,ebx
c000c5fd:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c601:	99                   	cdq    
c000c602:	f7 f9                	idiv   ecx
c000c604:	29 d1                	sub    ecx,edx
c000c606:	89 d7                	mov    edi,edx
c000c608:	89 c8                	mov    eax,ecx
c000c60a:	99                   	cdq    
c000c60b:	39 ce                	cmp    esi,ecx
c000c60d:	19 d3                	sbb    ebx,edx
c000c60f:	bb 00 00 00 00       	mov    ebx,0x0
c000c614:	72 04                	jb     c000c61a <Pipe::write(unsigned long long, void*, int*)+0x64>
c000c616:	89 f3                	mov    ebx,esi
c000c618:	29 cb                	sub    ebx,ecx
c000c61a:	89 f1                	mov    ecx,esi
c000c61c:	29 d9                	sub    ecx,ebx
c000c61e:	74 1a                	je     c000c63a <Pipe::write(unsigned long long, void*, int*)+0x84>
c000c620:	52                   	push   edx
c000c621:	51                   	push   ecx
c000c622:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c626:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c62a:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000c62d:	57                   	push   edi
c000c62e:	e8 9f 3f ff ff       	call   c00005d2 <memcpy>
c000c633:	83 c4 10             	add    esp,0x10
c000c636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c63a:	85 db                	test   ebx,ebx
c000c63c:	74 12                	je     c000c650 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000c63e:	50                   	push   eax
c000c63f:	53                   	push   ebx
c000c640:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000c644:	51                   	push   ecx
c000c645:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000c648:	e8 85 3f ff ff       	call   c00005d2 <memcpy>
c000c64d:	83 c4 10             	add    esp,0x10
c000c650:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000c653:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c658:	75 10                	jne    c000c66a <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000c65a:	83 ec 0c             	sub    esp,0xc
c000c65d:	68 b9 00 02 c0       	push   0xc00200b9
c000c662:	e8 13 84 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c000c667:	83 c4 10             	add    esp,0x10
c000c66a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c66e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000c671:	89 38                	mov    DWORD PTR [eax],edi
c000c673:	31 c0                	xor    eax,eax
c000c675:	83 c4 1c             	add    esp,0x1c
c000c678:	5b                   	pop    ebx
c000c679:	5e                   	pop    esi
c000c67a:	5f                   	pop    edi
c000c67b:	5d                   	pop    ebp
c000c67c:	c3                   	ret    
c000c67d:	90                   	nop

c000c67e <Pipe::Pipe(int)>:
c000c67e:	83 ec 0c             	sub    esp,0xc
c000c681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c685:	83 ec 08             	sub    esp,0x8
c000c688:	6a 00                	push   0x0
c000c68a:	50                   	push   eax
c000c68b:	e8 92 12 00 00       	call   c000d922 <UnixFile::UnixFile(int)>
c000c690:	83 c4 10             	add    esp,0x10
c000c693:	ba e0 00 02 c0       	mov    edx,0xc00200e0
c000c698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c69c:	89 10                	mov    DWORD PTR [eax],edx
c000c69e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6a6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000c6a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6ad:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000c6b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6b8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000c6bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c6c3:	83 ec 0c             	sub    esp,0xc
c000c6c6:	50                   	push   eax
c000c6c7:	e8 52 f5 ff ff       	call   c000bc1e <malloc>
c000c6cc:	83 c4 10             	add    esp,0x10
c000c6cf:	89 c2                	mov    edx,eax
c000c6d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6d5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6dc:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000c6e0:	90                   	nop
c000c6e1:	83 c4 0c             	add    esp,0xc
c000c6e4:	c3                   	ret    
c000c6e5:	90                   	nop

c000c6e6 <VgaText::isAtty()>:
c000c6e6:	b0 01                	mov    al,0x1
c000c6e8:	c3                   	ret    
c000c6e9:	90                   	nop

c000c6ea <VgaText::~VgaText()>:
c000c6ea:	83 ec 0c             	sub    esp,0xc
c000c6ed:	ba 9c 01 02 c0       	mov    edx,0xc002019c
c000c6f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6f6:	89 10                	mov    DWORD PTR [eax],edx
c000c6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6fc:	83 ec 0c             	sub    esp,0xc
c000c6ff:	50                   	push   eax
c000c700:	e8 81 12 00 00       	call   c000d986 <UnixFile::~UnixFile()>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	90                   	nop
c000c709:	83 c4 0c             	add    esp,0xc
c000c70c:	c3                   	ret    
c000c70d:	90                   	nop

c000c70e <VgaText::~VgaText()>:
c000c70e:	83 ec 0c             	sub    esp,0xc
c000c711:	83 ec 0c             	sub    esp,0xc
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	e8 cd ff ff ff       	call   c000c6ea <VgaText::~VgaText()>
c000c71d:	83 c4 10             	add    esp,0x10
c000c720:	83 ec 08             	sub    esp,0x8
c000c723:	68 60 12 00 00       	push   0x1260
c000c728:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c72c:	e8 d4 25 00 00       	call   c000ed05 <operator delete(void*, unsigned long)>
c000c731:	83 c4 10             	add    esp,0x10
c000c734:	83 c4 0c             	add    esp,0xc
c000c737:	c3                   	ret    

c000c738 <VgaText::read(unsigned long long, void*, int*)>:
c000c738:	83 ec 10             	sub    esp,0x10
c000c73b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c743:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c747:	e8 da 51 00 00       	call   c0011926 <readKeyboard(VgaText*, char*, unsigned long)>
c000c74c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c750:	89 02                	mov    DWORD PTR [edx],eax
c000c752:	31 c0                	xor    eax,eax
c000c754:	83 c4 1c             	add    esp,0x1c
c000c757:	c3                   	ret    

c000c758 <setTerminalScrollLock(bool)>:
c000c758:	c3                   	ret    

c000c759 <addToTerminalCycle(VgaText*)>:
c000c759:	8b 15 c0 32 02 c0    	mov    edx,DWORD PTR ds:0xc00232c0
c000c75f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c763:	85 d2                	test   edx,edx
c000c765:	75 0c                	jne    c000c773 <addToTerminalCycle(VgaText*)+0x1a>
c000c767:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000c76d:	a3 c0 32 02 c0       	mov    ds:0xc00232c0,eax
c000c772:	c3                   	ret    
c000c773:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000c779:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000c77f:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000c785:	c3                   	ret    

c000c786 <installVgaTextImplementation()>:
c000c786:	83 ec 10             	sub    esp,0x10
c000c789:	6a 20                	push   0x20
c000c78b:	6a 00                	push   0x0
c000c78d:	68 a0 32 02 c0       	push   0xc00232a0
c000c792:	e8 71 3e ff ff       	call   c0000608 <memset>
c000c797:	83 c4 1c             	add    esp,0x1c
c000c79a:	c3                   	ret    

c000c79b <scrollTerminalScrollLock(int)>:
c000c79b:	c3                   	ret    

c000c79c <VgaText::load()>:
c000c79c:	53                   	push   ebx
c000c79d:	31 c0                	xor    eax,eax
c000c79f:	83 ec 58             	sub    esp,0x58
c000c7a2:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000c7a6:	89 e2                	mov    edx,esp
c000c7a8:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000c7ac:	40                   	inc    eax
c000c7ad:	83 f8 50             	cmp    eax,0x50
c000c7b0:	75 f6                	jne    c000c7a8 <VgaText::load()+0xc>
c000c7b2:	31 c0                	xor    eax,eax
c000c7b4:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000c7bb:	84 c9                	test   cl,cl
c000c7bd:	74 06                	je     c000c7c5 <VgaText::load()+0x29>
c000c7bf:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000c7c2:	40                   	inc    eax
c000c7c3:	eb ef                	jmp    c000c7b4 <VgaText::load()+0x18>
c000c7c5:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000c7cb:	85 c0                	test   eax,eax
c000c7cd:	74 09                	je     c000c7d8 <VgaText::load()+0x3c>
c000c7cf:	51                   	push   ecx
c000c7d0:	51                   	push   ecx
c000c7d1:	52                   	push   edx
c000c7d2:	53                   	push   ebx
c000c7d3:	ff d0                	call   eax
c000c7d5:	83 c4 10             	add    esp,0x10
c000c7d8:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000c7de:	85 c0                	test   eax,eax
c000c7e0:	74 09                	je     c000c7eb <VgaText::load()+0x4f>
c000c7e2:	83 ec 0c             	sub    esp,0xc
c000c7e5:	53                   	push   ebx
c000c7e6:	ff d0                	call   eax
c000c7e8:	83 c4 10             	add    esp,0x10
c000c7eb:	83 c4 58             	add    esp,0x58
c000c7ee:	5b                   	pop    ebx
c000c7ef:	c3                   	ret    

c000c7f0 <VgaText::updateCursor()>:
c000c7f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7f4:	39 05 c4 32 02 c0    	cmp    DWORD PTR ds:0xc00232c4,eax
c000c7fa:	75 0c                	jne    c000c808 <VgaText::updateCursor()+0x18>
c000c7fc:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000c802:	85 c0                	test   eax,eax
c000c804:	74 02                	je     c000c808 <VgaText::updateCursor()+0x18>
c000c806:	ff e0                	jmp    eax
c000c808:	c3                   	ret    
c000c809:	90                   	nop

c000c80a <VgaText::showCursor(bool)>:
c000c80a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c80e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c812:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000c818:	c3                   	ret    
c000c819:	90                   	nop

c000c81a <VgaText::disableBlink(bool)>:
c000c81a:	56                   	push   esi
c000c81b:	53                   	push   ebx
c000c81c:	51                   	push   ecx
c000c81d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c821:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c825:	39 1d c4 32 02 c0    	cmp    DWORD PTR ds:0xc00232c4,ebx
c000c82b:	75 18                	jne    c000c845 <VgaText::disableBlink(bool)+0x2b>
c000c82d:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000c833:	85 c0                	test   eax,eax
c000c835:	74 0e                	je     c000c845 <VgaText::disableBlink(bool)+0x2b>
c000c837:	89 f1                	mov    ecx,esi
c000c839:	52                   	push   edx
c000c83a:	52                   	push   edx
c000c83b:	0f b6 d1             	movzx  edx,cl
c000c83e:	52                   	push   edx
c000c83f:	53                   	push   ebx
c000c840:	ff d0                	call   eax
c000c842:	83 c4 10             	add    esp,0x10
c000c845:	89 f0                	mov    eax,esi
c000c847:	83 f0 01             	xor    eax,0x1
c000c84a:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000c850:	58                   	pop    eax
c000c851:	5b                   	pop    ebx
c000c852:	5e                   	pop    esi
c000c853:	c3                   	ret    

c000c854 <VgaText::doANSI_SGR(int)>:
c000c854:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c85c:	85 d2                	test   edx,edx
c000c85e:	75 14                	jne    c000c874 <VgaText::doANSI_SGR(int)+0x20>
c000c860:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000c866:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c86c:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000c872:	eb 65                	jmp    c000c8d9 <VgaText::doANSI_SGR(int)+0x85>
c000c874:	83 fa 07             	cmp    edx,0x7
c000c877:	75 14                	jne    c000c88d <VgaText::doANSI_SGR(int)+0x39>
c000c879:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000c87f:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000c885:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000c88b:	eb 4c                	jmp    c000c8d9 <VgaText::doANSI_SGR(int)+0x85>
c000c88d:	83 fa 1b             	cmp    edx,0x1b
c000c890:	74 ce                	je     c000c860 <VgaText::doANSI_SGR(int)+0xc>
c000c892:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000c895:	83 f9 07             	cmp    ecx,0x7
c000c898:	77 09                	ja     c000c8a3 <VgaText::doANSI_SGR(int)+0x4f>
c000c89a:	8b 14 8d 60 26 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd9a0]
c000c8a1:	eb 20                	jmp    c000c8c3 <VgaText::doANSI_SGR(int)+0x6f>
c000c8a3:	8d 4a d8             	lea    ecx,[edx-0x28]
c000c8a6:	83 f9 07             	cmp    ecx,0x7
c000c8a9:	77 09                	ja     c000c8b4 <VgaText::doANSI_SGR(int)+0x60>
c000c8ab:	8b 14 8d 60 26 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd9a0]
c000c8b2:	eb 25                	jmp    c000c8d9 <VgaText::doANSI_SGR(int)+0x85>
c000c8b4:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000c8b7:	83 f9 07             	cmp    ecx,0x7
c000c8ba:	77 0e                	ja     c000c8ca <VgaText::doANSI_SGR(int)+0x76>
c000c8bc:	8b 14 95 18 25 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffddae8]
c000c8c3:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c8c9:	c3                   	ret    
c000c8ca:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000c8cd:	83 f9 07             	cmp    ecx,0x7
c000c8d0:	77 0d                	ja     c000c8df <VgaText::doANSI_SGR(int)+0x8b>
c000c8d2:	8b 14 95 f0 24 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffddb10]
c000c8d9:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000c8df:	c3                   	ret    

c000c8e0 <VgaText::setDefaultBgColour(VgaColour)>:
c000c8e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c8e8:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000c8ee:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000c8f4:	c3                   	ret    
c000c8f5:	90                   	nop

c000c8f6 <VgaText::setDefaultFgColour(VgaColour)>:
c000c8f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c8fe:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000c904:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c90a:	c3                   	ret    
c000c90b:	90                   	nop

c000c90c <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000c90c:	53                   	push   ebx
c000c90d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c911:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c915:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c919:	51                   	push   ecx
c000c91a:	e8 c1 ff ff ff       	call   c000c8e0 <VgaText::setDefaultBgColour(VgaColour)>
c000c91f:	58                   	pop    eax
c000c920:	5a                   	pop    edx
c000c921:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c925:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000c929:	5b                   	pop    ebx
c000c92a:	eb ca                	jmp    c000c8f6 <VgaText::setDefaultFgColour(VgaColour)>

c000c92c <VgaText::combineColours(unsigned char, unsigned char)>:
c000c92c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000c930:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000c935:	83 e0 0f             	and    eax,0xf
c000c938:	c1 e2 04             	shl    edx,0x4
c000c93b:	09 d0                	or     eax,edx
c000c93d:	c3                   	ret    

c000c93e <VgaText::scrollScreen()>:
c000c93e:	57                   	push   edi
c000c93f:	56                   	push   esi
c000c940:	be 01 00 00 00       	mov    esi,0x1
c000c945:	53                   	push   ebx
c000c946:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c94a:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000c950:	31 ff                	xor    edi,edi
c000c952:	01 d9                	add    ecx,ebx
c000c954:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000c957:	83 fe 17             	cmp    esi,0x17
c000c95a:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000c960:	75 28                	jne    c000c98a <VgaText::scrollScreen()+0x4c>
c000c962:	f7 c7 01 00 00 00    	test   edi,0x1
c000c968:	74 1c                	je     c000c986 <VgaText::scrollScreen()+0x48>
c000c96a:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000c971:	50                   	push   eax
c000c972:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000c979:	50                   	push   eax
c000c97a:	e8 ad ff ff ff       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000c97f:	5a                   	pop    edx
c000c980:	5a                   	pop    edx
c000c981:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000c984:	eb 04                	jmp    c000c98a <VgaText::scrollScreen()+0x4c>
c000c986:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000c98a:	47                   	inc    edi
c000c98b:	41                   	inc    ecx
c000c98c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000c992:	75 c0                	jne    c000c954 <VgaText::scrollScreen()+0x16>
c000c994:	46                   	inc    esi
c000c995:	83 fe 18             	cmp    esi,0x18
c000c998:	75 b0                	jne    c000c94a <VgaText::scrollScreen()+0xc>
c000c99a:	39 1d c4 32 02 c0    	cmp    DWORD PTR ds:0xc00232c4,ebx
c000c9a0:	75 24                	jne    c000c9c6 <VgaText::scrollScreen()+0x88>
c000c9a2:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000c9a9:	74 08                	je     c000c9b3 <VgaText::scrollScreen()+0x75>
c000c9ab:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000c9b1:	eb 13                	jmp    c000c9c6 <VgaText::scrollScreen()+0x88>
c000c9b3:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000c9b9:	85 c0                	test   eax,eax
c000c9bb:	74 09                	je     c000c9c6 <VgaText::scrollScreen()+0x88>
c000c9bd:	83 ec 0c             	sub    esp,0xc
c000c9c0:	53                   	push   ebx
c000c9c1:	ff d0                	call   eax
c000c9c3:	83 c4 10             	add    esp,0x10
c000c9c6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c9ca:	5b                   	pop    ebx
c000c9cb:	5e                   	pop    esi
c000c9cc:	5f                   	pop    edi
c000c9cd:	e9 1e fe ff ff       	jmp    c000c7f0 <VgaText::updateCursor()>

c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>:
c000c9d2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000c9d7:	c1 e0 08             	shl    eax,0x8
c000c9da:	89 c2                	mov    edx,eax
c000c9dc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000c9e1:	09 d0                	or     eax,edx
c000c9e3:	c3                   	ret    

c000c9e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000c9e4:	53                   	push   ebx
c000c9e5:	83 ec 08             	sub    esp,0x8
c000c9e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c9ec:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c9f1:	50                   	push   eax
c000c9f2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c9f7:	50                   	push   eax
c000c9f8:	e8 2f ff ff ff       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000c9fd:	5a                   	pop    edx
c000c9fe:	0f b6 c0             	movzx  eax,al
c000ca01:	5b                   	pop    ebx
c000ca02:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ca07:	50                   	push   eax
c000ca08:	53                   	push   ebx
c000ca09:	e8 c4 ff ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000ca0e:	5a                   	pop    edx
c000ca0f:	5a                   	pop    edx
c000ca10:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ca16:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ca1a:	0f b7 d2             	movzx  edx,dx
c000ca1d:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ca22:	39 0d c4 32 02 c0    	cmp    DWORD PTR ds:0xc00232c4,ecx
c000ca28:	75 14                	jne    c000ca3e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ca2a:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ca30:	85 c0                	test   eax,eax
c000ca32:	74 0a                	je     c000ca3e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ca34:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ca38:	83 c4 08             	add    esp,0x8
c000ca3b:	5b                   	pop    ebx
c000ca3c:	ff e0                	jmp    eax
c000ca3e:	83 c4 08             	add    esp,0x8
c000ca41:	5b                   	pop    ebx
c000ca42:	c3                   	ret    
c000ca43:	90                   	nop

c000ca44 <VgaText::getCursorX()>:
c000ca44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca48:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000ca4e:	c3                   	ret    
c000ca4f:	90                   	nop

c000ca50 <VgaText::getCursorY()>:
c000ca50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca54:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000ca5a:	c3                   	ret    
c000ca5b:	90                   	nop

c000ca5c <VgaText::setCursor(int, int)>:
c000ca5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca64:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000ca6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca6e:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000ca74:	e9 77 fd ff ff       	jmp    c000c7f0 <VgaText::updateCursor()>
c000ca79:	90                   	nop

c000ca7a <VgaText::setCursorX(int)>:
c000ca7a:	83 ec 10             	sub    esp,0x10
c000ca7d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca81:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000ca87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8b:	50                   	push   eax
c000ca8c:	e8 cb ff ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000ca91:	83 c4 1c             	add    esp,0x1c
c000ca94:	c3                   	ret    
c000ca95:	90                   	nop

c000ca96 <VgaText::setCursorY(int)>:
c000ca96:	83 ec 10             	sub    esp,0x10
c000ca99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000caa1:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000caa7:	50                   	push   eax
c000caa8:	e8 af ff ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000caad:	83 c4 1c             	add    esp,0x1c
c000cab0:	c3                   	ret    
c000cab1:	90                   	nop

c000cab2 <VgaText::incrementCursor(bool)>:
c000cab2:	56                   	push   esi
c000cab3:	53                   	push   ebx
c000cab4:	51                   	push   ecx
c000cab5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cab9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cabd:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cac3:	40                   	inc    eax
c000cac4:	83 f8 50             	cmp    eax,0x50
c000cac7:	74 08                	je     c000cad1 <VgaText::incrementCursor(bool)+0x1f>
c000cac9:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cacf:	eb 33                	jmp    c000cb04 <VgaText::incrementCursor(bool)+0x52>
c000cad1:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cad7:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cae1:	8d 50 01             	lea    edx,[eax+0x1]
c000cae4:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000caea:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000caf0:	75 12                	jne    c000cb04 <VgaText::incrementCursor(bool)+0x52>
c000caf2:	83 ec 0c             	sub    esp,0xc
c000caf5:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cafb:	53                   	push   ebx
c000cafc:	e8 3d fe ff ff       	call   c000c93e <VgaText::scrollScreen()>
c000cb01:	83 c4 10             	add    esp,0x10
c000cb04:	89 f0                	mov    eax,esi
c000cb06:	84 c0                	test   al,al
c000cb08:	74 0c                	je     c000cb16 <VgaText::incrementCursor(bool)+0x64>
c000cb0a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cb0e:	5a                   	pop    edx
c000cb0f:	5b                   	pop    ebx
c000cb10:	5e                   	pop    esi
c000cb11:	e9 da fc ff ff       	jmp    c000c7f0 <VgaText::updateCursor()>
c000cb16:	58                   	pop    eax
c000cb17:	5b                   	pop    ebx
c000cb18:	5e                   	pop    esi
c000cb19:	c3                   	ret    

c000cb1a <VgaText::updateRAMUsageDisplay(int)>:
c000cb1a:	53                   	push   ebx
c000cb1b:	bb 0a 00 00 00       	mov    ebx,0xa
c000cb20:	6a 0f                	push   0xf
c000cb22:	6a 00                	push   0x0
c000cb24:	e8 03 fe ff ff       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000cb29:	5a                   	pop    edx
c000cb2a:	59                   	pop    ecx
c000cb2b:	0f b6 c8             	movzx  ecx,al
c000cb2e:	51                   	push   ecx
c000cb2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb33:	99                   	cdq    
c000cb34:	f7 fb                	idiv   ebx
c000cb36:	89 d3                	mov    ebx,edx
c000cb38:	83 c0 30             	add    eax,0x30
c000cb3b:	83 c3 30             	add    ebx,0x30
c000cb3e:	0f be c0             	movsx  eax,al
c000cb41:	0f b6 db             	movzx  ebx,bl
c000cb44:	50                   	push   eax
c000cb45:	e8 88 fe ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cb4a:	5a                   	pop    edx
c000cb4b:	5a                   	pop    edx
c000cb4c:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cb52:	51                   	push   ecx
c000cb53:	53                   	push   ebx
c000cb54:	e8 79 fe ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cb59:	5b                   	pop    ebx
c000cb5a:	5a                   	pop    edx
c000cb5b:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cb61:	51                   	push   ecx
c000cb62:	6a 25                	push   0x25
c000cb64:	e8 69 fe ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cb69:	59                   	pop    ecx
c000cb6a:	5b                   	pop    ebx
c000cb6b:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cb71:	5b                   	pop    ebx
c000cb72:	c3                   	ret    
c000cb73:	90                   	nop

c000cb74 <VgaText::updateDiskUsage()>:
c000cb74:	55                   	push   ebp
c000cb75:	bd 10 27 00 00       	mov    ebp,0x2710
c000cb7a:	57                   	push   edi
c000cb7b:	56                   	push   esi
c000cb7c:	53                   	push   ebx
c000cb7d:	6a 0f                	push   0xf
c000cb7f:	6a 00                	push   0x0
c000cb81:	e8 a6 fd ff ff       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000cb86:	5a                   	pop    edx
c000cb87:	0f b6 d8             	movzx  ebx,al
c000cb8a:	59                   	pop    ecx
c000cb8b:	a1 24 4f 02 c0       	mov    eax,ds:0xc0024f24
c000cb90:	53                   	push   ebx
c000cb91:	b9 0a 00 00 00       	mov    ecx,0xa
c000cb96:	99                   	cdq    
c000cb97:	f7 fd                	idiv   ebp
c000cb99:	99                   	cdq    
c000cb9a:	f7 f9                	idiv   ecx
c000cb9c:	8d 42 30             	lea    eax,[edx+0x30]
c000cb9f:	0f b6 c0             	movzx  eax,al
c000cba2:	50                   	push   eax
c000cba3:	e8 2a fe ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cba8:	5e                   	pop    esi
c000cba9:	5f                   	pop    edi
c000cbaa:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000cbb0:	bf e8 03 00 00       	mov    edi,0x3e8
c000cbb5:	53                   	push   ebx
c000cbb6:	a1 24 4f 02 c0       	mov    eax,ds:0xc0024f24
c000cbbb:	99                   	cdq    
c000cbbc:	f7 ff                	idiv   edi
c000cbbe:	99                   	cdq    
c000cbbf:	f7 f9                	idiv   ecx
c000cbc1:	8d 42 30             	lea    eax,[edx+0x30]
c000cbc4:	0f b6 c0             	movzx  eax,al
c000cbc7:	50                   	push   eax
c000cbc8:	e8 05 fe ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cbcd:	5a                   	pop    edx
c000cbce:	5e                   	pop    esi
c000cbcf:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000cbd5:	be 64 00 00 00       	mov    esi,0x64
c000cbda:	53                   	push   ebx
c000cbdb:	a1 24 4f 02 c0       	mov    eax,ds:0xc0024f24
c000cbe0:	99                   	cdq    
c000cbe1:	f7 fe                	idiv   esi
c000cbe3:	99                   	cdq    
c000cbe4:	f7 f9                	idiv   ecx
c000cbe6:	8d 42 30             	lea    eax,[edx+0x30]
c000cbe9:	0f b6 c0             	movzx  eax,al
c000cbec:	50                   	push   eax
c000cbed:	e8 e0 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cbf2:	5a                   	pop    edx
c000cbf3:	5a                   	pop    edx
c000cbf4:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000cbfa:	53                   	push   ebx
c000cbfb:	a1 24 4f 02 c0       	mov    eax,ds:0xc0024f24
c000cc00:	99                   	cdq    
c000cc01:	f7 f9                	idiv   ecx
c000cc03:	99                   	cdq    
c000cc04:	f7 f9                	idiv   ecx
c000cc06:	8d 42 30             	lea    eax,[edx+0x30]
c000cc09:	0f b6 c0             	movzx  eax,al
c000cc0c:	50                   	push   eax
c000cc0d:	e8 c0 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc12:	5a                   	pop    edx
c000cc13:	5a                   	pop    edx
c000cc14:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000cc1a:	53                   	push   ebx
c000cc1b:	a1 24 4f 02 c0       	mov    eax,ds:0xc0024f24
c000cc20:	99                   	cdq    
c000cc21:	f7 f9                	idiv   ecx
c000cc23:	8d 42 30             	lea    eax,[edx+0x30]
c000cc26:	0f b6 c0             	movzx  eax,al
c000cc29:	50                   	push   eax
c000cc2a:	e8 a3 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc2f:	5a                   	pop    edx
c000cc30:	5a                   	pop    edx
c000cc31:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000cc37:	53                   	push   ebx
c000cc38:	a1 20 4f 02 c0       	mov    eax,ds:0xc0024f20
c000cc3d:	99                   	cdq    
c000cc3e:	f7 fd                	idiv   ebp
c000cc40:	99                   	cdq    
c000cc41:	f7 f9                	idiv   ecx
c000cc43:	8d 42 30             	lea    eax,[edx+0x30]
c000cc46:	0f b6 c0             	movzx  eax,al
c000cc49:	50                   	push   eax
c000cc4a:	e8 83 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc4f:	5d                   	pop    ebp
c000cc50:	5a                   	pop    edx
c000cc51:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000cc57:	53                   	push   ebx
c000cc58:	a1 20 4f 02 c0       	mov    eax,ds:0xc0024f20
c000cc5d:	99                   	cdq    
c000cc5e:	f7 ff                	idiv   edi
c000cc60:	99                   	cdq    
c000cc61:	f7 f9                	idiv   ecx
c000cc63:	8d 42 30             	lea    eax,[edx+0x30]
c000cc66:	0f b6 c0             	movzx  eax,al
c000cc69:	50                   	push   eax
c000cc6a:	e8 63 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc6f:	5f                   	pop    edi
c000cc70:	5d                   	pop    ebp
c000cc71:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000cc77:	53                   	push   ebx
c000cc78:	a1 20 4f 02 c0       	mov    eax,ds:0xc0024f20
c000cc7d:	99                   	cdq    
c000cc7e:	f7 fe                	idiv   esi
c000cc80:	99                   	cdq    
c000cc81:	f7 f9                	idiv   ecx
c000cc83:	8d 42 30             	lea    eax,[edx+0x30]
c000cc86:	0f b6 c0             	movzx  eax,al
c000cc89:	50                   	push   eax
c000cc8a:	e8 43 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc8f:	5a                   	pop    edx
c000cc90:	5e                   	pop    esi
c000cc91:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000cc97:	53                   	push   ebx
c000cc98:	a1 20 4f 02 c0       	mov    eax,ds:0xc0024f20
c000cc9d:	99                   	cdq    
c000cc9e:	f7 f9                	idiv   ecx
c000cca0:	99                   	cdq    
c000cca1:	f7 f9                	idiv   ecx
c000cca3:	8d 42 30             	lea    eax,[edx+0x30]
c000cca6:	0f b6 c0             	movzx  eax,al
c000cca9:	50                   	push   eax
c000ccaa:	e8 23 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000ccaf:	5f                   	pop    edi
c000ccb0:	5d                   	pop    ebp
c000ccb1:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000ccb7:	53                   	push   ebx
c000ccb8:	a1 20 4f 02 c0       	mov    eax,ds:0xc0024f20
c000ccbd:	99                   	cdq    
c000ccbe:	f7 f9                	idiv   ecx
c000ccc0:	83 c2 30             	add    edx,0x30
c000ccc3:	0f b6 d2             	movzx  edx,dl
c000ccc6:	52                   	push   edx
c000ccc7:	e8 06 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cccc:	5a                   	pop    edx
c000cccd:	59                   	pop    ecx
c000ccce:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000ccd4:	5b                   	pop    ebx
c000ccd5:	5e                   	pop    esi
c000ccd6:	5f                   	pop    edi
c000ccd7:	5d                   	pop    ebp
c000ccd8:	c3                   	ret    
c000ccd9:	90                   	nop

c000ccda <VgaText::updateTitle()>:
c000ccda:	53                   	push   ebx
c000ccdb:	31 c0                	xor    eax,eax
c000ccdd:	83 ec 58             	sub    esp,0x58
c000cce0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000cce4:	89 e1                	mov    ecx,esp
c000cce6:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000ccea:	40                   	inc    eax
c000cceb:	83 f8 50             	cmp    eax,0x50
c000ccee:	75 f6                	jne    c000cce6 <VgaText::updateTitle()+0xc>
c000ccf0:	31 c0                	xor    eax,eax
c000ccf2:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000ccf9:	84 db                	test   bl,bl
c000ccfb:	74 06                	je     c000cd03 <VgaText::updateTitle()+0x29>
c000ccfd:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000cd00:	40                   	inc    eax
c000cd01:	eb ef                	jmp    c000ccf2 <VgaText::updateTitle()+0x18>
c000cd03:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000cd09:	85 c0                	test   eax,eax
c000cd0b:	74 09                	je     c000cd16 <VgaText::updateTitle()+0x3c>
c000cd0d:	53                   	push   ebx
c000cd0e:	53                   	push   ebx
c000cd0f:	51                   	push   ecx
c000cd10:	52                   	push   edx
c000cd11:	ff d0                	call   eax
c000cd13:	83 c4 10             	add    esp,0x10
c000cd16:	e8 59 fe ff ff       	call   c000cb74 <VgaText::updateDiskUsage()>
c000cd1b:	83 c4 58             	add    esp,0x58
c000cd1e:	5b                   	pop    ebx
c000cd1f:	c3                   	ret    

c000cd20 <VgaText::setTitleTextColour(VgaColour)>:
c000cd20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd28:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000cd2e:	eb aa                	jmp    c000ccda <VgaText::updateTitle()>

c000cd30 <VgaText::setTitleColour(VgaColour)>:
c000cd30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd38:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000cd3e:	eb 9a                	jmp    c000ccda <VgaText::updateTitle()>

c000cd40 <VgaText::setTitle(char*)>:
c000cd40:	53                   	push   ebx
c000cd41:	83 ec 10             	sub    esp,0x10
c000cd44:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd4c:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000cd52:	50                   	push   eax
c000cd53:	e8 4f 39 ff ff       	call   c00006a7 <strcpy>
c000cd58:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000cd5c:	83 c4 18             	add    esp,0x18
c000cd5f:	5b                   	pop    ebx
c000cd60:	e9 75 ff ff ff       	jmp    c000ccda <VgaText::updateTitle()>
c000cd65:	90                   	nop

c000cd66 <VgaText::decrementCursor(bool)>:
c000cd66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd6a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd6e:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000cd74:	85 c0                	test   eax,eax
c000cd76:	74 07                	je     c000cd7f <VgaText::decrementCursor(bool)+0x19>
c000cd78:	48                   	dec    eax
c000cd79:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000cd7f:	84 c9                	test   cl,cl
c000cd81:	74 09                	je     c000cd8c <VgaText::decrementCursor(bool)+0x26>
c000cd83:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cd87:	e9 64 fa ff ff       	jmp    c000c7f0 <VgaText::updateCursor()>
c000cd8c:	c3                   	ret    
c000cd8d:	90                   	nop

c000cd8e <VgaText::putchar(char, VgaColour, VgaColour)>:
c000cd8e:	53                   	push   ebx
c000cd8f:	83 ec 08             	sub    esp,0x8
c000cd92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cd96:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd9a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cd9e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000cda2:	3c 07                	cmp    al,0x7
c000cda4:	75 2a                	jne    c000cdd0 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000cda6:	a1 e4 32 02 c0       	mov    eax,ds:0xc00232e4
c000cdab:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000cdb3:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000cdbb:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000cdc3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cdc7:	83 c4 08             	add    esp,0x8
c000cdca:	5b                   	pop    ebx
c000cdcb:	e9 00 2e 00 00       	jmp    c000fbd0 <Buzzer::beep(int, int, bool)>
c000cdd0:	3c 0d                	cmp    al,0xd
c000cdd2:	75 0c                	jne    c000cde0 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000cdd4:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cdde:	eb 3b                	jmp    c000ce1b <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000cde0:	3c 0a                	cmp    al,0xa
c000cde2:	75 40                	jne    c000ce24 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000cde4:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cdea:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cdf4:	8d 50 01             	lea    edx,[eax+0x1]
c000cdf7:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cdfd:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000ce03:	75 12                	jne    c000ce17 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000ce05:	83 ec 0c             	sub    esp,0xc
c000ce08:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000ce0e:	53                   	push   ebx
c000ce0f:	e8 2a fb ff ff       	call   c000c93e <VgaText::scrollScreen()>
c000ce14:	83 c4 10             	add    esp,0x10
c000ce17:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce1b:	83 c4 08             	add    esp,0x8
c000ce1e:	5b                   	pop    ebx
c000ce1f:	e9 cc f9 ff ff       	jmp    c000c7f0 <VgaText::updateCursor()>
c000ce24:	3c 08                	cmp    al,0x8
c000ce26:	75 31                	jne    c000ce59 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000ce28:	50                   	push   eax
c000ce29:	50                   	push   eax
c000ce2a:	6a 01                	push   0x1
c000ce2c:	53                   	push   ebx
c000ce2d:	e8 34 ff ff ff       	call   c000cd66 <VgaText::decrementCursor(bool)>
c000ce32:	5a                   	pop    edx
c000ce33:	59                   	pop    ecx
c000ce34:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000ce3a:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000ce40:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000ce46:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000ce4c:	6a 20                	push   0x20
c000ce4e:	53                   	push   ebx
c000ce4f:	e8 90 fb ff ff       	call   c000c9e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ce54:	83 c4 28             	add    esp,0x28
c000ce57:	5b                   	pop    ebx
c000ce58:	c3                   	ret    
c000ce59:	83 ec 08             	sub    esp,0x8
c000ce5c:	0f be c0             	movsx  eax,al
c000ce5f:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000ce65:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000ce6b:	51                   	push   ecx
c000ce6c:	52                   	push   edx
c000ce6d:	50                   	push   eax
c000ce6e:	53                   	push   ebx
c000ce6f:	e8 70 fb ff ff       	call   c000c9e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ce74:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000ce78:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000ce80:	83 c4 28             	add    esp,0x28
c000ce83:	5b                   	pop    ebx
c000ce84:	e9 29 fc ff ff       	jmp    c000cab2 <VgaText::incrementCursor(bool)>
c000ce89:	90                   	nop

c000ce8a <VgaText::isShowingCursor()>:
c000ce8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce8e:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000ce94:	c3                   	ret    
c000ce95:	90                   	nop

c000ce96 <VgaText::isBlinkDisabled()>:
c000ce96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce9a:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000cea0:	83 f0 01             	xor    eax,0x1
c000cea3:	c3                   	ret    

c000cea4 <VgaText::setCursorHeight(int)>:
c000cea4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cea8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ceac:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000ceb2:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000ceb9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cebd:	e9 48 f9 ff ff       	jmp    c000c80a <VgaText::showCursor(bool)>

c000cec2 <VgaText::getCursorHeight()>:
c000cec2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cec6:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000cecc:	c3                   	ret    

c000cecd <setActiveTerminal(VgaText*)>:
c000cecd:	53                   	push   ebx
c000cece:	83 ec 08             	sub    esp,0x8
c000ced1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	75 11                	jne    c000ceea <setActiveTerminal(VgaText*)+0x1d>
c000ced9:	c7 44 24 10 f4 00 02 c0 	mov    DWORD PTR [esp+0x10],0xc00200f4
c000cee1:	83 c4 08             	add    esp,0x8
c000cee4:	5b                   	pop    ebx
c000cee5:	e9 90 7b 00 00       	jmp    c0014a7a <Krnl::panic(char const*)>
c000ceea:	50                   	push   eax
c000ceeb:	50                   	push   eax
c000ceec:	53                   	push   ebx
c000ceed:	68 02 01 02 c0       	push   0xc0020102
c000cef2:	e8 ee 1e 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000cef7:	a1 c4 32 02 c0       	mov    eax,ds:0xc00232c4
c000cefc:	83 c4 10             	add    esp,0x10
c000ceff:	85 c0                	test   eax,eax
c000cf01:	74 0c                	je     c000cf0f <setActiveTerminal(VgaText*)+0x42>
c000cf03:	83 ec 0c             	sub    esp,0xc
c000cf06:	50                   	push   eax
c000cf07:	e8 e4 f8 ff ff       	call   c000c7f0 <VgaText::updateCursor()>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	89 1d c4 32 02 c0    	mov    DWORD PTR ds:0xc00232c4,ebx
c000cf15:	51                   	push   ecx
c000cf16:	51                   	push   ecx
c000cf17:	53                   	push   ebx
c000cf18:	68 1a 01 02 c0       	push   0xc002011a
c000cf1d:	e8 c3 1e 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000cf22:	83 c4 0c             	add    esp,0xc
c000cf25:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000cf2b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000cf31:	53                   	push   ebx
c000cf32:	e8 25 fb ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000cf37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf3a:	e8 57 ff ff ff       	call   c000ce96 <VgaText::isBlinkDisabled()>
c000cf3f:	5a                   	pop    edx
c000cf40:	0f b6 c0             	movzx  eax,al
c000cf43:	59                   	pop    ecx
c000cf44:	50                   	push   eax
c000cf45:	53                   	push   ebx
c000cf46:	e8 cf f8 ff ff       	call   c000c81a <VgaText::disableBlink(bool)>
c000cf4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf4e:	e8 6f ff ff ff       	call   c000cec2 <VgaText::getCursorHeight()>
c000cf53:	5a                   	pop    edx
c000cf54:	59                   	pop    ecx
c000cf55:	50                   	push   eax
c000cf56:	53                   	push   ebx
c000cf57:	e8 48 ff ff ff       	call   c000cea4 <VgaText::setCursorHeight(int)>
c000cf5c:	83 c4 10             	add    esp,0x10
c000cf5f:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000cf66:	75 0a                	jne    c000cf72 <setActiveTerminal(VgaText*)+0xa5>
c000cf68:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000cf72:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf76:	83 c4 08             	add    esp,0x8
c000cf79:	5b                   	pop    ebx
c000cf7a:	e9 1d f8 ff ff       	jmp    c000c79c <VgaText::load()>

c000cf7f <doTerminalCycle()>:
c000cf7f:	83 ec 18             	sub    esp,0x18
c000cf82:	a1 c0 32 02 c0       	mov    eax,ds:0xc00232c0
c000cf87:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000cf8d:	50                   	push   eax
c000cf8e:	a3 c0 32 02 c0       	mov    ds:0xc00232c0,eax
c000cf93:	e8 35 ff ff ff       	call   c000cecd <setActiveTerminal(VgaText*)>
c000cf98:	83 c4 1c             	add    esp,0x1c
c000cf9b:	c3                   	ret    

c000cf9c <VgaText::doUpdate()>:
c000cf9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cfa0:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000cfa6:	85 c0                	test   eax,eax
c000cfa8:	74 02                	je     c000cfac <VgaText::doUpdate()+0x10>
c000cfaa:	ff e0                	jmp    eax
c000cfac:	c3                   	ret    
c000cfad:	90                   	nop

c000cfae <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000cfae:	55                   	push   ebp
c000cfaf:	57                   	push   edi
c000cfb0:	56                   	push   esi
c000cfb1:	53                   	push   ebx
c000cfb2:	83 ec 1c             	sub    esp,0x1c
c000cfb5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000cfb9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000cfbe:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000cfc5:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000cfc8:	50                   	push   eax
c000cfc9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000cfce:	50                   	push   eax
c000cfcf:	e8 58 f9 ff ff       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000cfd4:	59                   	pop    ecx
c000cfd5:	0f b6 c0             	movzx  eax,al
c000cfd8:	5b                   	pop    ebx
c000cfd9:	31 c9                	xor    ecx,ecx
c000cfdb:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000cfe3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000cfe7:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000cfed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cff1:	0f b7 db             	movzx  ebx,bx
c000cff4:	01 db                	add    ebx,ebx
c000cff6:	01 fb                	add    ebx,edi
c000cff8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cffb:	84 c0                	test   al,al
c000cffd:	0f 84 38 01 00 00    	je     c000d13b <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c000d003:	3c 0d                	cmp    al,0xd
c000d005:	75 0f                	jne    c000d016 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c000d007:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d011:	e9 1f 01 00 00       	jmp    c000d135 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d016:	3c 0a                	cmp    al,0xa
c000d018:	75 5b                	jne    c000d075 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c000d01a:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d020:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d02a:	8d 48 01             	lea    ecx,[eax+0x1]
c000d02d:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d033:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d039:	75 12                	jne    c000d04d <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c000d03b:	83 ec 0c             	sub    esp,0xc
c000d03e:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d044:	55                   	push   ebp
c000d045:	e8 f4 f8 ff ff       	call   c000c93e <VgaText::scrollScreen()>
c000d04a:	83 c4 10             	add    esp,0x10
c000d04d:	83 ec 0c             	sub    esp,0xc
c000d050:	55                   	push   ebp
c000d051:	e8 9a f7 ff ff       	call   c000c7f0 <VgaText::updateCursor()>
c000d056:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d05e:	83 c4 10             	add    esp,0x10
c000d061:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d067:	31 c9                	xor    ecx,ecx
c000d069:	0f b7 db             	movzx  ebx,bx
c000d06c:	01 db                	add    ebx,ebx
c000d06e:	01 fb                	add    ebx,edi
c000d070:	e9 c0 00 00 00       	jmp    c000d135 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d075:	3c 08                	cmp    al,0x8
c000d077:	75 4e                	jne    c000d0c7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d079:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d07d:	53                   	push   ebx
c000d07e:	53                   	push   ebx
c000d07f:	6a 01                	push   0x1
c000d081:	55                   	push   ebp
c000d082:	e8 df fc ff ff       	call   c000cd66 <VgaText::decrementCursor(bool)>
c000d087:	58                   	pop    eax
c000d088:	5a                   	pop    edx
c000d089:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d08f:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d095:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d09b:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d0a1:	6a 20                	push   0x20
c000d0a3:	55                   	push   ebp
c000d0a4:	e8 3b f9 ff ff       	call   c000c9e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d0a9:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d0b1:	83 c4 20             	add    esp,0x20
c000d0b4:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d0ba:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d0be:	0f b7 db             	movzx  ebx,bx
c000d0c1:	01 db                	add    ebx,ebx
c000d0c3:	01 fb                	add    ebx,edi
c000d0c5:	eb 6e                	jmp    c000d135 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d0c7:	51                   	push   ecx
c000d0c8:	51                   	push   ecx
c000d0c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d0cd:	50                   	push   eax
c000d0ce:	e8 ff f8 ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0d3:	83 c4 10             	add    esp,0x10
c000d0d6:	66 89 03             	mov    WORD PTR [ebx],ax
c000d0d9:	39 2d c4 32 02 c0    	cmp    DWORD PTR ds:0xc00232c4,ebp
c000d0df:	75 2a                	jne    c000d10b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d0e1:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d0e7:	85 c0                	test   eax,eax
c000d0e9:	74 20                	je     c000d10b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d0eb:	52                   	push   edx
c000d0ec:	52                   	push   edx
c000d0ed:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d0f3:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d0f9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d0fd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d101:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d104:	51                   	push   ecx
c000d105:	55                   	push   ebp
c000d106:	ff d0                	call   eax
c000d108:	83 c4 20             	add    esp,0x20
c000d10b:	83 c3 02             	add    ebx,0x2
c000d10e:	50                   	push   eax
c000d10f:	50                   	push   eax
c000d110:	6a 00                	push   0x0
c000d112:	55                   	push   ebp
c000d113:	e8 9a f9 ff ff       	call   c000cab2 <VgaText::incrementCursor(bool)>
c000d118:	83 c4 10             	add    esp,0x10
c000d11b:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d122:	75 0f                	jne    c000d133 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c000d124:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d12c:	0f b7 db             	movzx  ebx,bx
c000d12f:	01 db                	add    ebx,ebx
c000d131:	01 fb                	add    ebx,edi
c000d133:	b1 01                	mov    cl,0x1
c000d135:	46                   	inc    esi
c000d136:	e9 bd fe ff ff       	jmp    c000cff8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c000d13b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d13f:	83 ec 0c             	sub    esp,0xc
c000d142:	55                   	push   ebp
c000d143:	e8 a8 f6 ff ff       	call   c000c7f0 <VgaText::updateCursor()>
c000d148:	83 c4 10             	add    esp,0x10
c000d14b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d14f:	84 c9                	test   cl,cl
c000d151:	74 0c                	je     c000d15f <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c000d153:	83 ec 0c             	sub    esp,0xc
c000d156:	55                   	push   ebp
c000d157:	e8 40 fe ff ff       	call   c000cf9c <VgaText::doUpdate()>
c000d15c:	83 c4 10             	add    esp,0x10
c000d15f:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d166:	83 c4 1c             	add    esp,0x1c
c000d169:	5b                   	pop    ebx
c000d16a:	5e                   	pop    esi
c000d16b:	5f                   	pop    edi
c000d16c:	5d                   	pop    ebp
c000d16d:	c3                   	ret    

c000d16e <VgaText::clearScreen()>:
c000d16e:	57                   	push   edi
c000d16f:	56                   	push   esi
c000d170:	31 f6                	xor    esi,esi
c000d172:	53                   	push   ebx
c000d173:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d177:	52                   	push   edx
c000d178:	6a 00                	push   0x0
c000d17a:	6a 00                	push   0x0
c000d17c:	53                   	push   ebx
c000d17d:	e8 da f8 ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000d182:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d189:	83 c4 10             	add    esp,0x10
c000d18c:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d192:	7e 26                	jle    c000d1ba <VgaText::clearScreen()+0x4c>
c000d194:	31 ff                	xor    edi,edi
c000d196:	50                   	push   eax
c000d197:	50                   	push   eax
c000d198:	56                   	push   esi
c000d199:	57                   	push   edi
c000d19a:	47                   	inc    edi
c000d19b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d1a1:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d1a7:	6a 20                	push   0x20
c000d1a9:	53                   	push   ebx
c000d1aa:	e8 35 f8 ff ff       	call   c000c9e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d1af:	83 c4 20             	add    esp,0x20
c000d1b2:	83 ff 50             	cmp    edi,0x50
c000d1b5:	75 df                	jne    c000d196 <VgaText::clearScreen()+0x28>
c000d1b7:	46                   	inc    esi
c000d1b8:	eb d2                	jmp    c000d18c <VgaText::clearScreen()+0x1e>
c000d1ba:	83 ec 0c             	sub    esp,0xc
c000d1bd:	53                   	push   ebx
c000d1be:	e8 d9 fd ff ff       	call   c000cf9c <VgaText::doUpdate()>
c000d1c3:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d1ca:	83 c4 10             	add    esp,0x10
c000d1cd:	5b                   	pop    ebx
c000d1ce:	5e                   	pop    esi
c000d1cf:	5f                   	pop    edi
c000d1d0:	c3                   	ret    
c000d1d1:	90                   	nop

c000d1d2 <VgaText::putchar(char)>:
c000d1d2:	56                   	push   esi
c000d1d3:	53                   	push   ebx
c000d1d4:	83 ec 14             	sub    esp,0x14
c000d1d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d1db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d1df:	3c 5b                	cmp    al,0x5b
c000d1e1:	75 21                	jne    c000d204 <VgaText::putchar(char)+0x32>
c000d1e3:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d1ea:	74 28                	je     c000d214 <VgaText::putchar(char)+0x42>
c000d1ec:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d1f5:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d1ff:	e9 e2 00 00 00       	jmp    c000d2e6 <VgaText::putchar(char)+0x114>
c000d204:	3c 1b                	cmp    al,0x1b
c000d206:	75 0c                	jne    c000d214 <VgaText::putchar(char)+0x42>
c000d208:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d20f:	e9 d2 00 00 00       	jmp    c000d2e6 <VgaText::putchar(char)+0x114>
c000d214:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d21a:	84 c9                	test   cl,cl
c000d21c:	0f 84 ab 00 00 00    	je     c000d2cd <VgaText::putchar(char)+0xfb>
c000d222:	8d 50 c0             	lea    edx,[eax-0x40]
c000d225:	80 fa 3e             	cmp    dl,0x3e
c000d228:	0f 87 82 00 00 00    	ja     c000d2b0 <VgaText::putchar(char)+0xde>
c000d22e:	3c 6d                	cmp    al,0x6d
c000d230:	75 4d                	jne    c000d27f <VgaText::putchar(char)+0xad>
c000d232:	31 f6                	xor    esi,esi
c000d234:	31 d2                	xor    edx,edx
c000d236:	31 c0                	xor    eax,eax
c000d238:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d23e:	7e 30                	jle    c000d270 <VgaText::putchar(char)+0x9e>
c000d240:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d248:	80 fa 3b             	cmp    dl,0x3b
c000d24b:	75 17                	jne    c000d264 <VgaText::putchar(char)+0x92>
c000d24d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d251:	50                   	push   eax
c000d252:	53                   	push   ebx
c000d253:	e8 fc f5 ff ff       	call   c000c854 <VgaText::doANSI_SGR(int)>
c000d258:	59                   	pop    ecx
c000d259:	31 d2                	xor    edx,edx
c000d25b:	58                   	pop    eax
c000d25c:	31 c0                	xor    eax,eax
c000d25e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d262:	eb 09                	jmp    c000d26d <VgaText::putchar(char)+0x9b>
c000d264:	6b c0 0a             	imul   eax,eax,0xa
c000d267:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d26b:	88 ca                	mov    dl,cl
c000d26d:	46                   	inc    esi
c000d26e:	eb c8                	jmp    c000d238 <VgaText::putchar(char)+0x66>
c000d270:	84 d2                	test   dl,dl
c000d272:	74 31                	je     c000d2a5 <VgaText::putchar(char)+0xd3>
c000d274:	50                   	push   eax
c000d275:	53                   	push   ebx
c000d276:	e8 d9 f5 ff ff       	call   c000c854 <VgaText::doANSI_SGR(int)>
c000d27b:	58                   	pop    eax
c000d27c:	5a                   	pop    edx
c000d27d:	eb 26                	jmp    c000d2a5 <VgaText::putchar(char)+0xd3>
c000d27f:	3c 4a                	cmp    al,0x4a
c000d281:	75 22                	jne    c000d2a5 <VgaText::putchar(char)+0xd3>
c000d283:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d28a:	75 19                	jne    c000d2a5 <VgaText::putchar(char)+0xd3>
c000d28c:	83 ec 0c             	sub    esp,0xc
c000d28f:	53                   	push   ebx
c000d290:	e8 d9 fe ff ff       	call   c000d16e <VgaText::clearScreen()>
c000d295:	83 c4 0c             	add    esp,0xc
c000d298:	6a 00                	push   0x0
c000d29a:	6a 00                	push   0x0
c000d29c:	53                   	push   ebx
c000d29d:	e8 ba f7 ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000d2a2:	83 c4 10             	add    esp,0x10
c000d2a5:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d2ae:	eb 36                	jmp    c000d2e6 <VgaText::putchar(char)+0x114>
c000d2b0:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d2b6:	83 fa 0e             	cmp    edx,0xe
c000d2b9:	7f 2b                	jg     c000d2e6 <VgaText::putchar(char)+0x114>
c000d2bb:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d2be:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d2c4:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d2cb:	eb 19                	jmp    c000d2e6 <VgaText::putchar(char)+0x114>
c000d2cd:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d2d3:	0f be c0             	movsx  eax,al
c000d2d6:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d2dc:	50                   	push   eax
c000d2dd:	53                   	push   ebx
c000d2de:	e8 ab fa ff ff       	call   c000cd8e <VgaText::putchar(char, VgaColour, VgaColour)>
c000d2e3:	83 c4 10             	add    esp,0x10
c000d2e6:	83 c4 14             	add    esp,0x14
c000d2e9:	5b                   	pop    ebx
c000d2ea:	5e                   	pop    esi
c000d2eb:	c3                   	ret    

c000d2ec <VgaText::puts(char const*)>:
c000d2ec:	53                   	push   ebx
c000d2ed:	83 ec 08             	sub    esp,0x8
c000d2f0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d2f4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d2f7:	84 c0                	test   al,al
c000d2f9:	74 12                	je     c000d30d <VgaText::puts(char const*)+0x21>
c000d2fb:	43                   	inc    ebx
c000d2fc:	51                   	push   ecx
c000d2fd:	51                   	push   ecx
c000d2fe:	50                   	push   eax
c000d2ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d303:	e8 ca fe ff ff       	call   c000d1d2 <VgaText::putchar(char)>
c000d308:	83 c4 10             	add    esp,0x10
c000d30b:	eb e7                	jmp    c000d2f4 <VgaText::puts(char const*)+0x8>
c000d30d:	83 c4 08             	add    esp,0x8
c000d310:	5b                   	pop    ebx
c000d311:	c3                   	ret    

c000d312 <VgaText::putx(unsigned int)>:
c000d312:	57                   	push   edi
c000d313:	b9 11 00 00 00       	mov    ecx,0x11
c000d318:	56                   	push   esi
c000d319:	be 36 01 02 c0       	mov    esi,0xc0020136
c000d31e:	53                   	push   ebx
c000d31f:	83 ec 20             	sub    esp,0x20
c000d322:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d326:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d32a:	fc                   	cld    
c000d32b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d32d:	be 08 00 00 00       	mov    esi,0x8
c000d332:	50                   	push   eax
c000d333:	50                   	push   eax
c000d334:	89 d8                	mov    eax,ebx
c000d336:	c1 e3 04             	shl    ebx,0x4
c000d339:	c1 e8 1c             	shr    eax,0x1c
c000d33c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d341:	50                   	push   eax
c000d342:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d346:	e8 87 fe ff ff       	call   c000d1d2 <VgaText::putchar(char)>
c000d34b:	83 c4 10             	add    esp,0x10
c000d34e:	4e                   	dec    esi
c000d34f:	75 e1                	jne    c000d332 <VgaText::putx(unsigned int)+0x20>
c000d351:	83 c4 20             	add    esp,0x20
c000d354:	5b                   	pop    ebx
c000d355:	5e                   	pop    esi
c000d356:	5f                   	pop    edi
c000d357:	c3                   	ret    

c000d358 <VgaText::VgaText(char const*)>:
c000d358:	57                   	push   edi
c000d359:	56                   	push   esi
c000d35a:	53                   	push   ebx
c000d35b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d35f:	83 ec 08             	sub    esp,0x8
c000d362:	6a 00                	push   0x0
c000d364:	50                   	push   eax
c000d365:	e8 b8 05 00 00       	call   c000d922 <UnixFile::UnixFile(int)>
c000d36a:	83 c4 10             	add    esp,0x10
c000d36d:	ba 9c 01 02 c0       	mov    edx,0xc002019c
c000d372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d376:	89 10                	mov    DWORD PTR [eax],edx
c000d378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d37c:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d38a:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d398:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d39f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3a3:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ae:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3bc:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d3c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ca:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d3d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3d5:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3e0:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d3e6:	bb a0 32 02 c0       	mov    ebx,0xc00232a0
c000d3eb:	b8 08 00 00 00       	mov    eax,0x8
c000d3f0:	fc                   	cld    
c000d3f1:	89 d7                	mov    edi,edx
c000d3f3:	89 de                	mov    esi,ebx
c000d3f5:	89 c1                	mov    ecx,eax
c000d3f7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d3f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3fd:	05 1e 10 00 00       	add    eax,0x101e
c000d402:	83 ec 08             	sub    esp,0x8
c000d405:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d409:	50                   	push   eax
c000d40a:	e8 98 32 ff ff       	call   c00006a7 <strcpy>
c000d40f:	83 c4 10             	add    esp,0x10
c000d412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d416:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d424:	83 c0 0c             	add    eax,0xc
c000d427:	83 ec 04             	sub    esp,0x4
c000d42a:	68 00 0f 00 00       	push   0xf00
c000d42f:	6a 00                	push   0x0
c000d431:	50                   	push   eax
c000d432:	e8 d1 31 ff ff       	call   c0000608 <memset>
c000d437:	83 c4 10             	add    esp,0x10
c000d43a:	83 ec 04             	sub    esp,0x4
c000d43d:	6a 00                	push   0x0
c000d43f:	6a 07                	push   0x7
c000d441:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d445:	e8 c2 f4 ff ff       	call   c000c90c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d44a:	83 c4 10             	add    esp,0x10
c000d44d:	83 ec 08             	sub    esp,0x8
c000d450:	6a 02                	push   0x2
c000d452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d456:	e8 49 fa ff ff       	call   c000cea4 <VgaText::setCursorHeight(int)>
c000d45b:	83 c4 10             	add    esp,0x10
c000d45e:	83 ec 04             	sub    esp,0x4
c000d461:	6a 00                	push   0x0
c000d463:	6a 00                	push   0x0
c000d465:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d469:	e8 ee f5 ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000d46e:	83 c4 10             	add    esp,0x10
c000d471:	83 ec 08             	sub    esp,0x8
c000d474:	6a 01                	push   0x1
c000d476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d47a:	e8 8b f3 ff ff       	call   c000c80a <VgaText::showCursor(bool)>
c000d47f:	83 c4 10             	add    esp,0x10
c000d482:	83 ec 08             	sub    esp,0x8
c000d485:	6a 01                	push   0x1
c000d487:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d48b:	e8 8a f3 ff ff       	call   c000c81a <VgaText::disableBlink(bool)>
c000d490:	83 c4 10             	add    esp,0x10
c000d493:	83 ec 0c             	sub    esp,0xc
c000d496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49a:	e8 cf fc ff ff       	call   c000d16e <VgaText::clearScreen()>
c000d49f:	83 c4 10             	add    esp,0x10
c000d4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4a6:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d4ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4b1:	05 9e 10 00 00       	add    eax,0x109e
c000d4b6:	83 ec 04             	sub    esp,0x4
c000d4b9:	68 96 00 00 00       	push   0x96
c000d4be:	6a 00                	push   0x0
c000d4c0:	50                   	push   eax
c000d4c1:	e8 42 31 ff ff       	call   c0000608 <memset>
c000d4c6:	83 c4 10             	add    esp,0x10
c000d4c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4cd:	05 34 11 00 00       	add    eax,0x1134
c000d4d2:	83 ec 04             	sub    esp,0x4
c000d4d5:	68 2c 01 00 00       	push   0x12c
c000d4da:	6a 00                	push   0x0
c000d4dc:	50                   	push   eax
c000d4dd:	e8 26 31 ff ff       	call   c0000608 <memset>
c000d4e2:	83 c4 10             	add    esp,0x10
c000d4e5:	90                   	nop
c000d4e6:	5b                   	pop    ebx
c000d4e7:	5e                   	pop    esi
c000d4e8:	5f                   	pop    edi
c000d4e9:	c3                   	ret    

c000d4ea <VgaText::receiveKey(unsigned char)>:
c000d4ea:	55                   	push   ebp
c000d4eb:	57                   	push   edi
c000d4ec:	56                   	push   esi
c000d4ed:	53                   	push   ebx
c000d4ee:	83 ec 1c             	sub    esp,0x1c
c000d4f1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d4f5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d4f9:	84 db                	test   bl,bl
c000d4fb:	0f 84 c9 00 00 00    	je     c000d5ca <VgaText::receiveKey(unsigned char)+0xe0>
c000d501:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d507:	80 fb 08             	cmp    bl,0x8
c000d50a:	75 2c                	jne    c000d538 <VgaText::receiveKey(unsigned char)+0x4e>
c000d50c:	83 ec 0c             	sub    esp,0xc
c000d50f:	57                   	push   edi
c000d510:	e8 10 31 ff ff       	call   c0000625 <strlen>
c000d515:	83 c4 10             	add    esp,0x10
c000d518:	85 c0                	test   eax,eax
c000d51a:	74 41                	je     c000d55d <VgaText::receiveKey(unsigned char)+0x73>
c000d51c:	50                   	push   eax
c000d51d:	50                   	push   eax
c000d51e:	6a 08                	push   0x8
c000d520:	56                   	push   esi
c000d521:	e8 ac fc ff ff       	call   c000d1d2 <VgaText::putchar(char)>
c000d526:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d529:	e8 f7 30 ff ff       	call   c0000625 <strlen>
c000d52e:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d536:	eb 22                	jmp    c000d55a <VgaText::receiveKey(unsigned char)+0x70>
c000d538:	0f be c3             	movsx  eax,bl
c000d53b:	52                   	push   edx
c000d53c:	52                   	push   edx
c000d53d:	50                   	push   eax
c000d53e:	56                   	push   esi
c000d53f:	e8 8e fc ff ff       	call   c000d1d2 <VgaText::putchar(char)>
c000d544:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d548:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d54d:	59                   	pop    ecx
c000d54e:	5d                   	pop    ebp
c000d54f:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d553:	50                   	push   eax
c000d554:	57                   	push   edi
c000d555:	e8 04 32 ff ff       	call   c000075e <strcat>
c000d55a:	83 c4 10             	add    esp,0x10
c000d55d:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d564:	75 05                	jne    c000d56b <VgaText::receiveKey(unsigned char)+0x81>
c000d566:	80 fb 0a             	cmp    bl,0xa
c000d569:	75 53                	jne    c000d5be <VgaText::receiveKey(unsigned char)+0xd4>
c000d56b:	83 ec 0c             	sub    esp,0xc
c000d56e:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d574:	53                   	push   ebx
c000d575:	e8 ab 30 ff ff       	call   c0000625 <strlen>
c000d57a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d57d:	89 c5                	mov    ebp,eax
c000d57f:	e8 a1 30 ff ff       	call   c0000625 <strlen>
c000d584:	83 c4 10             	add    esp,0x10
c000d587:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000d58b:	3d 2c 01 00 00       	cmp    eax,0x12c
c000d590:	76 10                	jbe    c000d5a2 <VgaText::receiveKey(unsigned char)+0xb8>
c000d592:	83 ec 0c             	sub    esp,0xc
c000d595:	68 47 01 02 c0       	push   0xc0020147
c000d59a:	e8 db 74 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c000d59f:	83 c4 10             	add    esp,0x10
c000d5a2:	50                   	push   eax
c000d5a3:	50                   	push   eax
c000d5a4:	57                   	push   edi
c000d5a5:	53                   	push   ebx
c000d5a6:	e8 b3 31 ff ff       	call   c000075e <strcat>
c000d5ab:	83 c4 0c             	add    esp,0xc
c000d5ae:	68 96 00 00 00       	push   0x96
c000d5b3:	6a 00                	push   0x0
c000d5b5:	57                   	push   edi
c000d5b6:	e8 4d 30 ff ff       	call   c0000608 <memset>
c000d5bb:	83 c4 10             	add    esp,0x10
c000d5be:	83 ec 0c             	sub    esp,0xc
c000d5c1:	56                   	push   esi
c000d5c2:	e8 d5 f9 ff ff       	call   c000cf9c <VgaText::doUpdate()>
c000d5c7:	83 c4 10             	add    esp,0x10
c000d5ca:	83 c4 1c             	add    esp,0x1c
c000d5cd:	5b                   	pop    ebx
c000d5ce:	5e                   	pop    esi
c000d5cf:	5f                   	pop    edi
c000d5d0:	5d                   	pop    ebp
c000d5d1:	c3                   	ret    

c000d5d2 <VgaText::write(unsigned long long, void*, int*)>:
c000d5d2:	55                   	push   ebp
c000d5d3:	57                   	push   edi
c000d5d4:	56                   	push   esi
c000d5d5:	53                   	push   ebx
c000d5d6:	83 ec 0c             	sub    esp,0xc
c000d5d9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d5dd:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000d5e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d5e5:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000d5ec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000d5ef:	39 eb                	cmp    ebx,ebp
c000d5f1:	74 13                	je     c000d606 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000d5f3:	43                   	inc    ebx
c000d5f4:	50                   	push   eax
c000d5f5:	50                   	push   eax
c000d5f6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000d5fa:	50                   	push   eax
c000d5fb:	56                   	push   esi
c000d5fc:	e8 d1 fb ff ff       	call   c000d1d2 <VgaText::putchar(char)>
c000d601:	83 c4 10             	add    esp,0x10
c000d604:	eb e9                	jmp    c000d5ef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000d606:	83 ec 0c             	sub    esp,0xc
c000d609:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000d610:	56                   	push   esi
c000d611:	e8 86 f9 ff ff       	call   c000cf9c <VgaText::doUpdate()>
c000d616:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d61a:	89 38                	mov    DWORD PTR [eax],edi
c000d61c:	83 c4 1c             	add    esp,0x1c
c000d61f:	31 c0                	xor    eax,eax
c000d621:	5b                   	pop    ebx
c000d622:	5e                   	pop    esi
c000d623:	5f                   	pop    edi
c000d624:	5d                   	pop    ebp
c000d625:	c3                   	ret    

c000d626 <newTerminal(char*)>:
c000d626:	83 ec 28             	sub    esp,0x28
c000d629:	68 60 12 00 00       	push   0x1260
c000d62e:	e8 c3 16 00 00       	call   c000ecf6 <operator new(unsigned long)>
c000d633:	5a                   	pop    edx
c000d634:	59                   	pop    ecx
c000d635:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d639:	50                   	push   eax
c000d63a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d63e:	e8 15 fd ff ff       	call   c000d358 <VgaText::VgaText(char const*)>
c000d643:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d647:	83 c4 2c             	add    esp,0x2c
c000d64a:	c3                   	ret    
c000d64b:	90                   	nop

c000d64c <TSS::TSS()>:
c000d64c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d650:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000d657:	90                   	nop
c000d658:	c3                   	ret    
c000d659:	90                   	nop

c000d65a <TSS::setESP(unsigned long)>:
c000d65a:	55                   	push   ebp
c000d65b:	89 e5                	mov    ebp,esp
c000d65d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d660:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d663:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d666:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d669:	90                   	nop
c000d66a:	5d                   	pop    ebp
c000d66b:	c3                   	ret    

c000d66c <TSS::flush()>:
c000d66c:	55                   	push   ebp
c000d66d:	89 e5                	mov    ebp,esp
c000d66f:	83 ec 10             	sub    esp,0x10
c000d672:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d675:	8b 00                	mov    eax,DWORD PTR [eax]
c000d677:	83 c8 03             	or     eax,0x3
c000d67a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000d67e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000d682:	66 89 d0             	mov    ax,dx
c000d685:	0f 00 d8             	ltr    ax
c000d688:	90                   	nop
c000d689:	c9                   	leave  
c000d68a:	c3                   	ret    
c000d68b:	90                   	nop

c000d68c <TSS::setup(unsigned long, unsigned long)>:
c000d68c:	55                   	push   ebp
c000d68d:	89 e5                	mov    ebp,esp
c000d68f:	53                   	push   ebx
c000d690:	83 ec 14             	sub    esp,0x14
c000d693:	83 ec 0c             	sub    esp,0xc
c000d696:	6a 68                	push   0x68
c000d698:	e8 81 e5 ff ff       	call   c000bc1e <malloc>
c000d69d:	83 c4 10             	add    esp,0x10
c000d6a0:	89 c2                	mov    edx,eax
c000d6a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d6a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6ae:	83 ec 04             	sub    esp,0x4
c000d6b1:	6a 68                	push   0x68
c000d6b3:	6a 00                	push   0x0
c000d6b5:	50                   	push   eax
c000d6b6:	e8 4d 2f ff ff       	call   c0000608 <memset>
c000d6bb:	83 c4 10             	add    esp,0x10
c000d6be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6c4:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000d6ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6d0:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000d6d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6dc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d6df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d6e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6e8:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000d6ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6f4:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000d6fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6fd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d700:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000d706:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d709:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d70c:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000d712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d715:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d718:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000d71b:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000d71e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d721:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d724:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d727:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d72a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d72d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d730:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000d737:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d73a:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000d73d:	e8 13 0f 01 00       	call   c001e655 <CPU::readCR3()>
c000d742:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000d745:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d748:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d74b:	83 ec 08             	sub    esp,0x8
c000d74e:	50                   	push   eax
c000d74f:	8d 45 f0             	lea    eax,[ebp-0x10]
c000d752:	50                   	push   eax
c000d753:	e8 9c dc ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000d758:	83 c4 10             	add    esp,0x10
c000d75b:	83 ec 08             	sub    esp,0x8
c000d75e:	6a 68                	push   0x68
c000d760:	8d 45 f0             	lea    eax,[ebp-0x10]
c000d763:	50                   	push   eax
c000d764:	e8 a7 dc ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000d769:	83 c4 10             	add    esp,0x10
c000d76c:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000d770:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d773:	83 e0 0f             	and    eax,0xf
c000d776:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d779:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d77c:	83 c8 40             	or     eax,0x40
c000d77f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d782:	e8 ed 65 00 00       	call   c0013d74 <thisCPU()>
c000d787:	05 78 01 00 00       	add    eax,0x178
c000d78c:	83 ec 04             	sub    esp,0x4
c000d78f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000d792:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d795:	50                   	push   eax
c000d796:	e8 a9 dc ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000d79b:	83 c4 10             	add    esp,0x10
c000d79e:	89 c2                	mov    edx,eax
c000d7a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7a3:	89 10                	mov    DWORD PTR [eax],edx
c000d7a5:	e8 ca 65 00 00       	call   c0013d74 <thisCPU()>
c000d7aa:	05 78 01 00 00       	add    eax,0x178
c000d7af:	83 ec 0c             	sub    esp,0xc
c000d7b2:	50                   	push   eax
c000d7b3:	e8 d0 dc ff ff       	call   c000b488 <GDT::flush()>
c000d7b8:	83 c4 10             	add    esp,0x10
c000d7bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7be:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7c0:	83 ec 08             	sub    esp,0x8
c000d7c3:	50                   	push   eax
c000d7c4:	68 b0 01 02 c0       	push   0xc00201b0
c000d7c9:	e8 17 16 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000d7ce:	83 c4 10             	add    esp,0x10
c000d7d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7d6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d7d9:	c9                   	leave  
c000d7da:	c3                   	ret    
c000d7db:	90                   	nop

c000d7dc <ReservedFilename::isAtty()>:
c000d7dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d7e0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d7e3:	31 c0                	xor    eax,eax
c000d7e5:	83 fa 08             	cmp    edx,0x8
c000d7e8:	74 06                	je     c000d7f0 <ReservedFilename::isAtty()+0x14>
c000d7ea:	83 fa 06             	cmp    edx,0x6
c000d7ed:	0f 94 c0             	sete   al
c000d7f0:	c3                   	ret    
c000d7f1:	90                   	nop

c000d7f2 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000d7f2:	55                   	push   ebp
c000d7f3:	57                   	push   edi
c000d7f4:	56                   	push   esi
c000d7f5:	53                   	push   ebx
c000d7f6:	83 ec 0c             	sub    esp,0xc
c000d7f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7fd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d801:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d804:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d808:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000d80c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d810:	83 f8 08             	cmp    eax,0x8
c000d813:	75 08                	jne    c000d81d <ReservedFilename::read(unsigned long long, void*, int*)+0x2b>
c000d815:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000d81b:	eb 5c                	jmp    c000d879 <ReservedFilename::read(unsigned long long, void*, int*)+0x87>
c000d81d:	83 f8 06             	cmp    eax,0x6
c000d820:	75 3d                	jne    c000d85f <ReservedFilename::read(unsigned long long, void*, int*)+0x6d>
c000d822:	83 ec 0c             	sub    esp,0xc
c000d825:	68 ce 01 02 c0       	push   0xc00201ce
c000d82a:	e8 b6 15 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000d82f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d834:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d837:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d83d:	8b 10                	mov    edx,DWORD PTR [eax]
c000d83f:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000d843:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d847:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d84b:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000d84f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d853:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000d856:	83 c4 1c             	add    esp,0x1c
c000d859:	5b                   	pop    ebx
c000d85a:	5e                   	pop    esi
c000d85b:	5f                   	pop    edi
c000d85c:	5d                   	pop    ebp
c000d85d:	ff e0                	jmp    eax
c000d85f:	89 c2                	mov    edx,eax
c000d861:	83 e2 fd             	and    edx,0xfffffffd
c000d864:	83 fa 05             	cmp    edx,0x5
c000d867:	74 ac                	je     c000d815 <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c000d869:	8d 50 f5             	lea    edx,[eax-0xb]
c000d86c:	83 fa 08             	cmp    edx,0x8
c000d86f:	76 a4                	jbe    c000d815 <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c000d871:	83 e8 15             	sub    eax,0x15
c000d874:	83 f8 08             	cmp    eax,0x8
c000d877:	76 9c                	jbe    c000d815 <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c000d879:	83 c4 0c             	add    esp,0xc
c000d87c:	31 c0                	xor    eax,eax
c000d87e:	5b                   	pop    ebx
c000d87f:	5e                   	pop    esi
c000d880:	5f                   	pop    edi
c000d881:	5d                   	pop    ebp
c000d882:	c3                   	ret    
c000d883:	90                   	nop

c000d884 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000d884:	55                   	push   ebp
c000d885:	57                   	push   edi
c000d886:	56                   	push   esi
c000d887:	53                   	push   ebx
c000d888:	83 ec 0c             	sub    esp,0xc
c000d88b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d88f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d893:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d896:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d89a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000d89e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d8a2:	83 f8 08             	cmp    eax,0x8
c000d8a5:	75 08                	jne    c000d8af <ReservedFilename::write(unsigned long long, void*, int*)+0x2b>
c000d8a7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000d8ad:	eb 60                	jmp    c000d90f <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c000d8af:	83 f8 06             	cmp    eax,0x6
c000d8b2:	75 3d                	jne    c000d8f1 <ReservedFilename::write(unsigned long long, void*, int*)+0x6d>
c000d8b4:	83 ec 0c             	sub    esp,0xc
c000d8b7:	68 db 01 02 c0       	push   0xc00201db
c000d8bc:	e8 24 15 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000d8c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d8c6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d8c9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d8cf:	8b 10                	mov    edx,DWORD PTR [eax]
c000d8d1:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000d8d5:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d8d9:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d8dd:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000d8e1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8e5:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000d8e8:	83 c4 1c             	add    esp,0x1c
c000d8eb:	5b                   	pop    ebx
c000d8ec:	5e                   	pop    esi
c000d8ed:	5f                   	pop    edi
c000d8ee:	5d                   	pop    ebp
c000d8ef:	ff e0                	jmp    eax
c000d8f1:	83 f8 05             	cmp    eax,0x5
c000d8f4:	75 04                	jne    c000d8fa <ReservedFilename::write(unsigned long long, void*, int*)+0x76>
c000d8f6:	89 33                	mov    DWORD PTR [ebx],esi
c000d8f8:	eb 15                	jmp    c000d90f <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c000d8fa:	83 f8 07             	cmp    eax,0x7
c000d8fd:	74 a8                	je     c000d8a7 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c000d8ff:	8d 50 f5             	lea    edx,[eax-0xb]
c000d902:	83 fa 08             	cmp    edx,0x8
c000d905:	76 a0                	jbe    c000d8a7 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c000d907:	83 e8 15             	sub    eax,0x15
c000d90a:	83 f8 08             	cmp    eax,0x8
c000d90d:	76 98                	jbe    c000d8a7 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c000d90f:	83 c4 0c             	add    esp,0xc
c000d912:	31 c0                	xor    eax,eax
c000d914:	5b                   	pop    ebx
c000d915:	5e                   	pop    esi
c000d916:	5f                   	pop    edi
c000d917:	5d                   	pop    ebp
c000d918:	c3                   	ret    
c000d919:	90                   	nop

c000d91a <UnixFile::getFileDescriptor()>:
c000d91a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d91e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d921:	c3                   	ret    

c000d922 <UnixFile::UnixFile(int)>:
c000d922:	83 ec 0c             	sub    esp,0xc
c000d925:	ba b8 02 02 c0       	mov    edx,0xc00202b8
c000d92a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d92e:	89 10                	mov    DWORD PTR [eax],edx
c000d930:	a1 a0 26 02 c0       	mov    eax,ds:0xc00226a0
c000d935:	8d 50 01             	lea    edx,[eax+0x1]
c000d938:	89 15 a0 26 02 c0    	mov    DWORD PTR ds:0xc00226a0,edx
c000d93e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d942:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000d945:	83 ec 08             	sub    esp,0x8
c000d948:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d94c:	68 d0 32 02 c0       	push   0xc00232d0
c000d951:	e8 74 0d 01 00       	call   c001e6ca <LinkedList<UnixFile>::addElement(UnixFile*)>
c000d956:	83 c4 10             	add    esp,0x10
c000d959:	90                   	nop
c000d95a:	83 c4 0c             	add    esp,0xc
c000d95d:	c3                   	ret    

c000d95e <ReservedFilename::ReservedFilename(int)>:
c000d95e:	83 ec 0c             	sub    esp,0xc
c000d961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d965:	83 ec 08             	sub    esp,0x8
c000d968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d96c:	50                   	push   eax
c000d96d:	e8 b0 ff ff ff       	call   c000d922 <UnixFile::UnixFile(int)>
c000d972:	83 c4 10             	add    esp,0x10
c000d975:	ba d4 02 02 c0       	mov    edx,0xc00202d4
c000d97a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d97e:	89 10                	mov    DWORD PTR [eax],edx
c000d980:	90                   	nop
c000d981:	83 c4 0c             	add    esp,0xc
c000d984:	c3                   	ret    
c000d985:	90                   	nop

c000d986 <UnixFile::~UnixFile()>:
c000d986:	83 ec 1c             	sub    esp,0x1c
c000d989:	ba b8 02 02 c0       	mov    edx,0xc00202b8
c000d98e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d992:	89 10                	mov    DWORD PTR [eax],edx
c000d994:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000d99c:	83 ec 0c             	sub    esp,0xc
c000d99f:	68 d0 32 02 c0       	push   0xc00232d0
c000d9a4:	e8 f5 0d 01 00       	call   c001e79e <LinkedList<UnixFile>::getFirstElement()>
c000d9a9:	83 c4 10             	add    esp,0x10
c000d9ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9b0:	83 ec 0c             	sub    esp,0xc
c000d9b3:	68 d0 32 02 c0       	push   0xc00232d0
c000d9b8:	e8 e9 0d 01 00       	call   c001e7a6 <LinkedList<UnixFile>::removeFirst()>
c000d9bd:	83 c4 10             	add    esp,0x10
c000d9c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d9c4:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000d9c8:	74 3d                	je     c000da07 <UnixFile::~UnixFile()+0x81>
c000d9ca:	83 ec 08             	sub    esp,0x8
c000d9cd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d9d1:	68 d0 32 02 c0       	push   0xc00232d0
c000d9d6:	e8 ef 0c 01 00       	call   c001e6ca <LinkedList<UnixFile>::addElement(UnixFile*)>
c000d9db:	83 c4 10             	add    esp,0x10
c000d9de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d9e2:	8d 50 01             	lea    edx,[eax+0x1]
c000d9e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9e9:	3d 88 13 00 00       	cmp    eax,0x1388
c000d9ee:	0f 94 c0             	sete   al
c000d9f1:	84 c0                	test   al,al
c000d9f3:	74 a7                	je     c000d99c <UnixFile::~UnixFile()+0x16>
c000d9f5:	83 ec 0c             	sub    esp,0xc
c000d9f8:	68 90 02 02 c0       	push   0xc0020290
c000d9fd:	e8 78 70 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c000da02:	83 c4 10             	add    esp,0x10
c000da05:	eb 95                	jmp    c000d99c <UnixFile::~UnixFile()+0x16>
c000da07:	90                   	nop
c000da08:	83 c4 1c             	add    esp,0x1c
c000da0b:	c3                   	ret    

c000da0c <UnixFile::~UnixFile()>:
c000da0c:	83 ec 0c             	sub    esp,0xc
c000da0f:	83 ec 0c             	sub    esp,0xc
c000da12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da16:	e8 6b ff ff ff       	call   c000d986 <UnixFile::~UnixFile()>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	83 ec 08             	sub    esp,0x8
c000da21:	6a 0c                	push   0xc
c000da23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da27:	e8 d9 12 00 00       	call   c000ed05 <operator delete(void*, unsigned long)>
c000da2c:	83 c4 10             	add    esp,0x10
c000da2f:	83 c4 0c             	add    esp,0xc
c000da32:	c3                   	ret    
c000da33:	90                   	nop

c000da34 <ReservedFilename::~ReservedFilename()>:
c000da34:	83 ec 0c             	sub    esp,0xc
c000da37:	ba d4 02 02 c0       	mov    edx,0xc00202d4
c000da3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da40:	89 10                	mov    DWORD PTR [eax],edx
c000da42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da46:	83 ec 0c             	sub    esp,0xc
c000da49:	50                   	push   eax
c000da4a:	e8 37 ff ff ff       	call   c000d986 <UnixFile::~UnixFile()>
c000da4f:	83 c4 10             	add    esp,0x10
c000da52:	90                   	nop
c000da53:	83 c4 0c             	add    esp,0xc
c000da56:	c3                   	ret    
c000da57:	90                   	nop

c000da58 <ReservedFilename::~ReservedFilename()>:
c000da58:	83 ec 0c             	sub    esp,0xc
c000da5b:	83 ec 0c             	sub    esp,0xc
c000da5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da62:	e8 cd ff ff ff       	call   c000da34 <ReservedFilename::~ReservedFilename()>
c000da67:	83 c4 10             	add    esp,0x10
c000da6a:	83 ec 08             	sub    esp,0x8
c000da6d:	6a 0c                	push   0xc
c000da6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da73:	e8 8d 12 00 00       	call   c000ed05 <operator delete(void*, unsigned long)>
c000da78:	83 c4 10             	add    esp,0x10
c000da7b:	83 c4 0c             	add    esp,0xc
c000da7e:	c3                   	ret    

c000da7f <getFromFileDescriptor(int)>:
c000da7f:	83 ec 18             	sub    esp,0x18
c000da82:	68 d0 32 02 c0       	push   0xc00232d0
c000da87:	e8 12 0d 01 00       	call   c001e79e <LinkedList<UnixFile>::getFirstElement()>
c000da8c:	83 c4 10             	add    esp,0x10
c000da8f:	85 c0                	test   eax,eax
c000da91:	74 18                	je     c000daab <getFromFileDescriptor(int)+0x2c>
c000da93:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000da97:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
c000da9a:	74 0f                	je     c000daab <getFromFileDescriptor(int)+0x2c>
c000da9c:	52                   	push   edx
c000da9d:	52                   	push   edx
c000da9e:	50                   	push   eax
c000da9f:	68 d0 32 02 c0       	push   0xc00232d0
c000daa4:	e8 9f 0d 01 00       	call   c001e848 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000daa9:	eb e1                	jmp    c000da8c <getFromFileDescriptor(int)+0xd>
c000daab:	83 c4 0c             	add    esp,0xc
c000daae:	c3                   	ret    

c000daaf <__static_initialization_and_destruction_0(int, int)>:
c000daaf:	83 ec 0c             	sub    esp,0xc
c000dab2:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000dab7:	75 34                	jne    c000daed <__static_initialization_and_destruction_0(int, int)+0x3e>
c000dab9:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000dac1:	75 2a                	jne    c000daed <__static_initialization_and_destruction_0(int, int)+0x3e>
c000dac3:	83 ec 0c             	sub    esp,0xc
c000dac6:	68 d0 32 02 c0       	push   0xc00232d0
c000dacb:	e8 a2 0b 01 00       	call   c001e672 <LinkedList<UnixFile>::LinkedList()>
c000dad0:	83 c4 10             	add    esp,0x10
c000dad3:	83 ec 04             	sub    esp,0x4
c000dad6:	68 30 26 02 c0       	push   0xc0022630
c000dadb:	68 d0 32 02 c0       	push   0xc00232d0
c000dae0:	68 70 e6 01 c0       	push   0xc001e670
c000dae5:	e8 97 11 00 00       	call   c000ec81 <__cxa_atexit>
c000daea:	83 c4 10             	add    esp,0x10
c000daed:	90                   	nop
c000daee:	83 c4 0c             	add    esp,0xc
c000daf1:	c3                   	ret    

c000daf2 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000daf2:	83 ec 0c             	sub    esp,0xc
c000daf5:	83 ec 08             	sub    esp,0x8
c000daf8:	68 ff ff 00 00       	push   0xffff
c000dafd:	6a 01                	push   0x1
c000daff:	e8 ab ff ff ff       	call   c000daaf <__static_initialization_and_destruction_0(int, int)>
c000db04:	83 c4 10             	add    esp,0x10
c000db07:	83 c4 0c             	add    esp,0xc
c000db0a:	c3                   	ret    
c000db0b:	90                   	nop

c000db0c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000db0c:	53                   	push   ebx
c000db0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000db11:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000db15:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000db1b:	89 c8                	mov    eax,ecx
c000db1d:	d1 e8                	shr    eax,1
c000db1f:	03 05 a8 26 02 c0    	add    eax,DWORD PTR ds:0xc00226a8
c000db25:	83 e1 01             	and    ecx,0x1
c000db28:	8a 10                	mov    dl,BYTE PTR [eax]
c000db2a:	75 09                	jne    c000db35 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000db2c:	83 e2 f0             	and    edx,0xfffffff0
c000db2f:	09 da                	or     edx,ebx
c000db31:	88 10                	mov    BYTE PTR [eax],dl
c000db33:	5b                   	pop    ebx
c000db34:	c3                   	ret    
c000db35:	c1 e3 04             	shl    ebx,0x4
c000db38:	83 e2 0f             	and    edx,0xf
c000db3b:	09 da                	or     edx,ebx
c000db3d:	88 10                	mov    BYTE PTR [eax],dl
c000db3f:	5b                   	pop    ebx
c000db40:	c3                   	ret    

c000db41 <Virt::getPageState(unsigned long)>:
c000db41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db45:	8b 0d a8 26 02 c0    	mov    ecx,DWORD PTR ds:0xc00226a8
c000db4b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000db51:	89 d0                	mov    eax,edx
c000db53:	d1 e8                	shr    eax,1
c000db55:	83 e2 01             	and    edx,0x1
c000db58:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000db5b:	75 04                	jne    c000db61 <Virt::getPageState(unsigned long)+0x20>
c000db5d:	83 e0 0f             	and    eax,0xf
c000db60:	c3                   	ret    
c000db61:	c0 e8 04             	shr    al,0x4
c000db64:	c3                   	ret    

c000db65 <Virt::allocateKernelVirtualPages(int)>:
c000db65:	55                   	push   ebp
c000db66:	31 ed                	xor    ebp,ebp
c000db68:	57                   	push   edi
c000db69:	56                   	push   esi
c000db6a:	53                   	push   ebx
c000db6b:	31 db                	xor    ebx,ebx
c000db6d:	83 ec 1c             	sub    esp,0x1c
c000db70:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000db74:	8b 3d a4 26 02 c0    	mov    edi,DWORD PTR ds:0xc00226a4
c000db7a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000db7f:	57                   	push   edi
c000db80:	e8 bc ff ff ff       	call   c000db41 <Virt::getPageState(unsigned long)>
c000db85:	5a                   	pop    edx
c000db86:	84 c0                	test   al,al
c000db88:	75 3a                	jne    c000dbc4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000db8a:	85 db                	test   ebx,ebx
c000db8c:	75 02                	jne    c000db90 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000db8e:	89 fd                	mov    ebp,edi
c000db90:	43                   	inc    ebx
c000db91:	39 f3                	cmp    ebx,esi
c000db93:	74 5a                	je     c000dbef <Virt::allocateKernelVirtualPages(int)+0x8a>
c000db95:	47                   	inc    edi
c000db96:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000db9c:	76 31                	jbe    c000dbcf <Virt::allocateKernelVirtualPages(int)+0x6a>
c000db9e:	c7 05 a4 26 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00226a4,0xc8000
c000dba8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dbad:	75 28                	jne    c000dbd7 <Virt::allocateKernelVirtualPages(int)+0x72>
c000dbaf:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000dbb4:	bf 00 80 0c 00       	mov    edi,0xc8000
c000dbb9:	57                   	push   edi
c000dbba:	e8 82 ff ff ff       	call   c000db41 <Virt::getPageState(unsigned long)>
c000dbbf:	5a                   	pop    edx
c000dbc0:	84 c0                	test   al,al
c000dbc2:	74 c6                	je     c000db8a <Virt::allocateKernelVirtualPages(int)+0x25>
c000dbc4:	31 db                	xor    ebx,ebx
c000dbc6:	47                   	inc    edi
c000dbc7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000dbcd:	77 cf                	ja     c000db9e <Virt::allocateKernelVirtualPages(int)+0x39>
c000dbcf:	89 3d a4 26 02 c0    	mov    DWORD PTR ds:0xc00226a4,edi
c000dbd5:	eb a8                	jmp    c000db7f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000dbd7:	83 ec 0c             	sub    esp,0xc
c000dbda:	68 e8 02 02 c0       	push   0xc00202e8
c000dbdf:	e8 96 6e 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c000dbe4:	8b 3d a4 26 02 c0    	mov    edi,DWORD PTR ds:0xc00226a4
c000dbea:	83 c4 10             	add    esp,0x10
c000dbed:	eb 90                	jmp    c000db7f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000dbef:	89 2d a4 26 02 c0    	mov    DWORD PTR ds:0xc00226a4,ebp
c000dbf5:	4b                   	dec    ebx
c000dbf6:	74 5f                	je     c000dc57 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000dbf8:	85 f6                	test   esi,esi
c000dbfa:	74 3d                	je     c000dc39 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000dbfc:	89 e8                	mov    eax,ebp
c000dbfe:	31 db                	xor    ebx,ebx
c000dc00:	8d 7e ff             	lea    edi,[esi-0x1]
c000dc03:	eb 14                	jmp    c000dc19 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000dc05:	6a 01                	push   0x1
c000dc07:	43                   	inc    ebx
c000dc08:	50                   	push   eax
c000dc09:	e8 fe fe ff ff       	call   c000db0c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dc0e:	58                   	pop    eax
c000dc0f:	39 f3                	cmp    ebx,esi
c000dc11:	5a                   	pop    edx
c000dc12:	74 25                	je     c000dc39 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000dc14:	a1 a4 26 02 c0       	mov    eax,ds:0xc00226a4
c000dc19:	8d 50 01             	lea    edx,[eax+0x1]
c000dc1c:	85 db                	test   ebx,ebx
c000dc1e:	89 15 a4 26 02 c0    	mov    DWORD PTR ds:0xc00226a4,edx
c000dc24:	74 20                	je     c000dc46 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000dc26:	39 df                	cmp    edi,ebx
c000dc28:	75 db                	jne    c000dc05 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000dc2a:	6a 03                	push   0x3
c000dc2c:	43                   	inc    ebx
c000dc2d:	50                   	push   eax
c000dc2e:	e8 d9 fe ff ff       	call   c000db0c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dc33:	59                   	pop    ecx
c000dc34:	39 f3                	cmp    ebx,esi
c000dc36:	58                   	pop    eax
c000dc37:	75 db                	jne    c000dc14 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000dc39:	83 c4 1c             	add    esp,0x1c
c000dc3c:	89 e8                	mov    eax,ebp
c000dc3e:	5b                   	pop    ebx
c000dc3f:	c1 e0 0c             	shl    eax,0xc
c000dc42:	5e                   	pop    esi
c000dc43:	5f                   	pop    edi
c000dc44:	5d                   	pop    ebp
c000dc45:	c3                   	ret    
c000dc46:	6a 02                	push   0x2
c000dc48:	bb 01 00 00 00       	mov    ebx,0x1
c000dc4d:	50                   	push   eax
c000dc4e:	e8 b9 fe ff ff       	call   c000db0c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dc53:	58                   	pop    eax
c000dc54:	5a                   	pop    edx
c000dc55:	eb bd                	jmp    c000dc14 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000dc57:	6a 04                	push   0x4
c000dc59:	8d 45 01             	lea    eax,[ebp+0x1]
c000dc5c:	55                   	push   ebp
c000dc5d:	a3 a4 26 02 c0       	mov    ds:0xc00226a4,eax
c000dc62:	e8 a5 fe ff ff       	call   c000db0c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dc67:	59                   	pop    ecx
c000dc68:	89 e8                	mov    eax,ebp
c000dc6a:	5b                   	pop    ebx
c000dc6b:	c1 e0 0c             	shl    eax,0xc
c000dc6e:	83 c4 1c             	add    esp,0x1c
c000dc71:	5b                   	pop    ebx
c000dc72:	5e                   	pop    esi
c000dc73:	5f                   	pop    edi
c000dc74:	5d                   	pop    ebp
c000dc75:	c3                   	ret    

c000dc76 <Virt::virtualMemorySetup()>:
c000dc76:	53                   	push   ebx
c000dc77:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000dc7c:	83 ec 08             	sub    esp,0x8
c000dc7f:	6a 0f                	push   0xf
c000dc81:	53                   	push   ebx
c000dc82:	43                   	inc    ebx
c000dc83:	e8 84 fe ff ff       	call   c000db0c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dc88:	59                   	pop    ecx
c000dc89:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000dc8f:	58                   	pop    eax
c000dc90:	75 ed                	jne    c000dc7f <Virt::virtualMemorySetup()+0x9>
c000dc92:	83 ec 08             	sub    esp,0x8
c000dc95:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000dc9a:	68 00 00 00 c8       	push   0xc8000000
c000dc9f:	68 93 04 02 c0       	push   0xc0020493
c000dca4:	e8 3c 11 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000dca9:	58                   	pop    eax
c000dcaa:	5a                   	pop    edx
c000dcab:	68 00 f0 ff ef       	push   0xeffff000
c000dcb0:	68 a7 04 02 c0       	push   0xc00204a7
c000dcb5:	e8 2b 11 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000dcba:	83 c4 10             	add    esp,0x10
c000dcbd:	83 ec 08             	sub    esp,0x8
c000dcc0:	6a 00                	push   0x0
c000dcc2:	53                   	push   ebx
c000dcc3:	43                   	inc    ebx
c000dcc4:	e8 43 fe ff ff       	call   c000db0c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dcc9:	83 c4 10             	add    esp,0x10
c000dccc:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000dcd2:	75 e9                	jne    c000dcbd <Virt::virtualMemorySetup()+0x47>
c000dcd4:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000dcd9:	83 ec 08             	sub    esp,0x8
c000dcdc:	6a 0f                	push   0xf
c000dcde:	53                   	push   ebx
c000dcdf:	43                   	inc    ebx
c000dce0:	e8 27 fe ff ff       	call   c000db0c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dce5:	83 c4 10             	add    esp,0x10
c000dce8:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000dcee:	75 e9                	jne    c000dcd9 <Virt::virtualMemorySetup()+0x63>
c000dcf0:	83 c4 08             	add    esp,0x8
c000dcf3:	5b                   	pop    ebx
c000dcf4:	c3                   	ret    

c000dcf5 <Virt::getAKernelVAS()>:
c000dcf5:	a1 dc 32 02 c0       	mov    eax,ds:0xc00232dc
c000dcfa:	c3                   	ret    

c000dcfb <Virt::setupPageSwapping(int)>:
c000dcfb:	57                   	push   edi
c000dcfc:	56                   	push   esi
c000dcfd:	53                   	push   ebx
c000dcfe:	83 ec 1c             	sub    esp,0x1c
c000dd01:	68 14 01 00 00       	push   0x114
c000dd06:	e8 eb 0f 00 00       	call   c000ecf6 <operator new(unsigned long)>
c000dd0b:	83 c4 0c             	add    esp,0xc
c000dd0e:	89 c6                	mov    esi,eax
c000dd10:	ff 35 d4 45 02 c0    	push   DWORD PTR ds:0xc00245d4
c000dd16:	68 bb 04 02 c0       	push   0xc00204bb
c000dd1b:	50                   	push   eax
c000dd1c:	e8 f3 15 00 00       	call   c000f314 <File::File(char const*, Process*)>
c000dd21:	89 34 24             	mov    DWORD PTR [esp],esi
c000dd24:	e8 c7 17 00 00       	call   c000f4f0 <File::unlink()>
c000dd29:	58                   	pop    eax
c000dd2a:	5a                   	pop    edx
c000dd2b:	6a 12                	push   0x12
c000dd2d:	56                   	push   esi
c000dd2e:	e8 45 16 00 00       	call   c000f378 <File::open(FileOpenMode)>
c000dd33:	83 c4 10             	add    esp,0x10
c000dd36:	85 c0                	test   eax,eax
c000dd38:	0f 85 bf 00 00 00    	jne    c000ddfd <Virt::setupPageSwapping(int)+0x102>
c000dd3e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000dd42:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dd4a:	c1 e3 08             	shl    ebx,0x8
c000dd4d:	83 ec 0c             	sub    esp,0xc
c000dd50:	68 00 00 01 00       	push   0x10000
c000dd55:	e8 c4 de ff ff       	call   c000bc1e <malloc>
c000dd5a:	83 c4 0c             	add    esp,0xc
c000dd5d:	89 c7                	mov    edi,eax
c000dd5f:	68 00 00 01 00       	push   0x10000
c000dd64:	6a 00                	push   0x0
c000dd66:	50                   	push   eax
c000dd67:	e8 9c 28 ff ff       	call   c0000608 <memset>
c000dd6c:	83 c4 10             	add    esp,0x10
c000dd6f:	85 db                	test   ebx,ebx
c000dd71:	79 03                	jns    c000dd76 <Virt::setupPageSwapping(int)+0x7b>
c000dd73:	83 c3 0f             	add    ebx,0xf
c000dd76:	c1 fb 04             	sar    ebx,0x4
c000dd79:	4b                   	dec    ebx
c000dd7a:	83 fb ff             	cmp    ebx,0xffffffff
c000dd7d:	74 4b                	je     c000ddca <Virt::setupPageSwapping(int)+0xcf>
c000dd7f:	83 ec 0c             	sub    esp,0xc
c000dd82:	8b 06                	mov    eax,DWORD PTR [esi]
c000dd84:	8d 54 24 18          	lea    edx,[esp+0x18]
c000dd88:	52                   	push   edx
c000dd89:	57                   	push   edi
c000dd8a:	6a 00                	push   0x0
c000dd8c:	68 00 00 01 00       	push   0x10000
c000dd91:	56                   	push   esi
c000dd92:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000dd95:	83 c4 20             	add    esp,0x20
c000dd98:	85 c0                	test   eax,eax
c000dd9a:	75 4e                	jne    c000ddea <Virt::setupPageSwapping(int)+0xef>
c000dd9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dda0:	3d 00 00 01 00       	cmp    eax,0x10000
c000dda5:	74 d2                	je     c000dd79 <Virt::setupPageSwapping(int)+0x7e>
c000dda7:	83 ec 08             	sub    esp,0x8
c000ddaa:	4b                   	dec    ebx
c000ddab:	50                   	push   eax
c000ddac:	68 0e 05 02 c0       	push   0xc002050e
c000ddb1:	e8 2f 10 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000ddb6:	c7 04 24 17 05 02 c0 	mov    DWORD PTR [esp],0xc0020517
c000ddbd:	e8 b8 6c 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c000ddc2:	83 c4 10             	add    esp,0x10
c000ddc5:	83 fb ff             	cmp    ebx,0xffffffff
c000ddc8:	75 b5                	jne    c000dd7f <Virt::setupPageSwapping(int)+0x84>
c000ddca:	83 ec 0c             	sub    esp,0xc
c000ddcd:	56                   	push   esi
c000ddce:	e8 03 16 00 00       	call   c000f3d6 <File::close()>
c000ddd3:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ddd6:	e8 63 de ff ff       	call   c000bc3e <rfree>
c000dddb:	89 34 24             	mov    DWORD PTR [esp],esi
c000ddde:	8b 06                	mov    eax,DWORD PTR [esi]
c000dde0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dde3:	83 c4 20             	add    esp,0x20
c000dde6:	5b                   	pop    ebx
c000dde7:	5e                   	pop    esi
c000dde8:	5f                   	pop    edi
c000dde9:	c3                   	ret    
c000ddea:	83 ec 08             	sub    esp,0x8
c000dded:	50                   	push   eax
c000ddee:	68 f6 04 02 c0       	push   0xc00204f6
c000ddf3:	e8 ed 0f 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000ddf8:	83 c4 10             	add    esp,0x10
c000ddfb:	eb 9f                	jmp    c000dd9c <Virt::setupPageSwapping(int)+0xa1>
c000ddfd:	83 ec 08             	sub    esp,0x8
c000de00:	50                   	push   eax
c000de01:	68 d2 04 02 c0       	push   0xc00204d2
c000de06:	e8 da 0f 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000de0b:	c7 04 24 db 04 02 c0 	mov    DWORD PTR [esp],0xc00204db
c000de12:	e8 63 6c 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c000de17:	83 c4 10             	add    esp,0x10
c000de1a:	e9 1f ff ff ff       	jmp    c000dd3e <Virt::setupPageSwapping(int)+0x43>
c000de1f:	90                   	nop

c000de20 <VAS::VAS()>:
c000de20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de24:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000de2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de2f:	a3 dc 32 02 c0       	mov    ds:0xc00232dc,eax
c000de34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de38:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000de3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de40:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000de43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de47:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000de4e:	90                   	nop
c000de4f:	c3                   	ret    

c000de50 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000de50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de54:	89 c2                	mov    edx,eax
c000de56:	c1 e8 0a             	shr    eax,0xa
c000de59:	c1 ea 16             	shr    edx,0x16
c000de5c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000de61:	19 c9                	sbb    ecx,ecx
c000de63:	c1 e2 0c             	shl    edx,0xc
c000de66:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000de6c:	25 fc 0f 00 00       	and    eax,0xffc
c000de71:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000de78:	01 d0                	add    eax,edx
c000de7a:	c3                   	ret    
c000de7b:	90                   	nop

c000de7c <VAS::getPageTableEntry(unsigned long)>:
c000de7c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000de80:	89 ca                	mov    edx,ecx
c000de82:	c1 e9 0a             	shr    ecx,0xa
c000de85:	c1 ea 16             	shr    edx,0x16
c000de88:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000de8e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000de94:	c1 e0 0c             	shl    eax,0xc
c000de97:	8d 04 08             	lea    eax,[eax+ecx*1]
c000de9a:	c3                   	ret    

c000de9b <Virt::freeKernelVirtualPages(unsigned long)>:
c000de9b:	57                   	push   edi
c000de9c:	56                   	push   esi
c000de9d:	be 01 00 00 00       	mov    esi,0x1
c000dea2:	53                   	push   ebx
c000dea3:	83 ec 10             	sub    esp,0x10
c000dea6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000deaa:	c1 eb 0c             	shr    ebx,0xc
c000dead:	eb 3f                	jmp    c000deee <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000deaf:	e8 41 fe ff ff       	call   c000dcf5 <Virt::getAKernelVAS()>
c000deb4:	83 ec 08             	sub    esp,0x8
c000deb7:	57                   	push   edi
c000deb8:	50                   	push   eax
c000deb9:	e8 be ff ff ff       	call   c000de7c <VAS::getPageTableEntry(unsigned long)>
c000debe:	83 c4 10             	add    esp,0x10
c000dec1:	8b 00                	mov    eax,DWORD PTR [eax]
c000dec3:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000dec7:	f6 c4 04             	test   ah,0x4
c000deca:	75 5f                	jne    c000df2b <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000decc:	80 fa 04             	cmp    dl,0x4
c000decf:	74 78                	je     c000df49 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000ded1:	80 fa 02             	cmp    dl,0x2
c000ded4:	0f 84 88 00 00 00    	je     c000df62 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000deda:	80 fa 03             	cmp    dl,0x3
c000dedd:	0f 84 ad 00 00 00    	je     c000df90 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000dee3:	fe ca                	dec    dl
c000dee5:	0f 84 92 00 00 00    	je     c000df7d <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000deeb:	43                   	inc    ebx
c000deec:	31 f6                	xor    esi,esi
c000deee:	53                   	push   ebx
c000deef:	e8 4d fc ff ff       	call   c000db41 <Virt::getPageState(unsigned long)>
c000def4:	5f                   	pop    edi
c000def5:	89 df                	mov    edi,ebx
c000def7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000defb:	c1 e7 0c             	shl    edi,0xc
c000defe:	84 c0                	test   al,al
c000df00:	75 ad                	jne    c000deaf <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000df02:	83 ec 0c             	sub    esp,0xc
c000df05:	68 1d 05 02 c0       	push   0xc002051d
c000df0a:	e8 6b 6b 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c000df0f:	e8 e1 fd ff ff       	call   c000dcf5 <Virt::getAKernelVAS()>
c000df14:	5a                   	pop    edx
c000df15:	59                   	pop    ecx
c000df16:	57                   	push   edi
c000df17:	50                   	push   eax
c000df18:	e8 5f ff ff ff       	call   c000de7c <VAS::getPageTableEntry(unsigned long)>
c000df1d:	83 c4 10             	add    esp,0x10
c000df20:	8b 00                	mov    eax,DWORD PTR [eax]
c000df22:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000df26:	f6 c4 04             	test   ah,0x4
c000df29:	74 c0                	je     c000deeb <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000df2b:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000df2f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000df34:	83 ec 0c             	sub    esp,0xc
c000df37:	50                   	push   eax
c000df38:	e8 01 e2 ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000df3d:	83 c4 10             	add    esp,0x10
c000df40:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000df44:	80 fa 04             	cmp    dl,0x4
c000df47:	75 88                	jne    c000ded1 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000df49:	89 f0                	mov    eax,esi
c000df4b:	84 c0                	test   al,al
c000df4d:	75 47                	jne    c000df96 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000df4f:	c7 44 24 20 08 03 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020308
c000df57:	83 c4 10             	add    esp,0x10
c000df5a:	5b                   	pop    ebx
c000df5b:	5e                   	pop    esi
c000df5c:	5f                   	pop    edi
c000df5d:	e9 18 6b 00 00       	jmp    c0014a7a <Krnl::panic(char const*)>
c000df62:	89 f0                	mov    eax,esi
c000df64:	84 c0                	test   al,al
c000df66:	75 15                	jne    c000df7d <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000df68:	83 ec 0c             	sub    esp,0xc
c000df6b:	68 39 05 02 c0       	push   0xc0020539
c000df70:	e8 05 6b 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c000df75:	83 c4 10             	add    esp,0x10
c000df78:	e9 6e ff ff ff       	jmp    c000deeb <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000df7d:	83 ec 08             	sub    esp,0x8
c000df80:	6a 00                	push   0x0
c000df82:	53                   	push   ebx
c000df83:	e8 84 fb ff ff       	call   c000db0c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000df88:	83 c4 10             	add    esp,0x10
c000df8b:	e9 5b ff ff ff       	jmp    c000deeb <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000df90:	89 f0                	mov    eax,esi
c000df92:	84 c0                	test   al,al
c000df94:	75 15                	jne    c000dfab <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000df96:	83 ec 08             	sub    esp,0x8
c000df99:	6a 00                	push   0x0
c000df9b:	53                   	push   ebx
c000df9c:	e8 6b fb ff ff       	call   c000db0c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dfa1:	83 c4 10             	add    esp,0x10
c000dfa4:	83 c4 10             	add    esp,0x10
c000dfa7:	5b                   	pop    ebx
c000dfa8:	5e                   	pop    esi
c000dfa9:	5f                   	pop    edi
c000dfaa:	c3                   	ret    
c000dfab:	c7 44 24 20 55 05 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020555
c000dfb3:	83 c4 10             	add    esp,0x10
c000dfb6:	5b                   	pop    ebx
c000dfb7:	5e                   	pop    esi
c000dfb8:	5f                   	pop    edi
c000dfb9:	e9 bc 6a 00 00       	jmp    c0014a7a <Krnl::panic(char const*)>

c000dfbe <VAS::freeAllocatedPages(unsigned long)>:
c000dfbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dfc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dfc6:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000dfca:	74 09                	je     c000dfd5 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000dfcc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfd0:	e9 c6 fe ff ff       	jmp    c000de9b <Virt::freeKernelVirtualPages(unsigned long)>
c000dfd5:	c7 44 24 04 2c 03 02 c0 	mov    DWORD PTR [esp+0x4],0xc002032c
c000dfdd:	e9 03 0e 00 00       	jmp    c000ede5 <Dbg::kprintf(char const*, ...)>

c000dfe2 <VAS::virtualToPhysical(unsigned long)>:
c000dfe2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000dfe6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000dfea:	e8 8d fe ff ff       	call   c000de7c <VAS::getPageTableEntry(unsigned long)>
c000dfef:	5a                   	pop    edx
c000dff0:	8b 00                	mov    eax,DWORD PTR [eax]
c000dff2:	59                   	pop    ecx
c000dff3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000dff8:	c3                   	ret    
c000dff9:	90                   	nop

c000dffa <VAS::mapOtherVASIn(bool, VAS*)>:
c000dffa:	83 ec 0c             	sub    esp,0xc
c000dffd:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e002:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e006:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e00d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e010:	19 c0                	sbb    eax,eax
c000e012:	83 ca 03             	or     edx,0x3
c000e015:	83 e0 fc             	and    eax,0xfffffffc
c000e018:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e01f:	e8 31 06 01 00       	call   c001e655 <CPU::readCR3()>
c000e024:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e028:	83 c4 0c             	add    esp,0xc
c000e02b:	e9 37 06 01 00       	jmp    c001e667 <CPU::writeCR3(unsigned long)>

c000e030 <VAS::~VAS()>:
c000e030:	83 ec 2c             	sub    esp,0x2c
c000e033:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e03b:	e8 9a 97 00 00       	call   c00177da <lockScheduler()>
c000e040:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e045:	8b 00                	mov    eax,DWORD PTR [eax]
c000e047:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e04a:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e050:	83 ec 04             	sub    esp,0x4
c000e053:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e057:	6a 01                	push   0x1
c000e059:	50                   	push   eax
c000e05a:	e8 9b ff ff ff       	call   c000dffa <VAS::mapOtherVASIn(bool, VAS*)>
c000e05f:	83 c4 10             	add    esp,0x10
c000e062:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e06a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e072:	0f 8f d7 00 00 00    	jg     c000e14f <VAS::~VAS()+0x11f>
c000e078:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e07c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e07f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e083:	c1 e2 02             	shl    edx,0x2
c000e086:	01 d0                	add    eax,edx
c000e088:	8b 00                	mov    eax,DWORD PTR [eax]
c000e08a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e08e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e092:	83 e0 01             	and    eax,0x1
c000e095:	0f 84 ab 00 00 00    	je     c000e146 <VAS::~VAS()+0x116>
c000e09b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e0a3:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e0ab:	7f 75                	jg     c000e122 <VAS::~VAS()+0xf2>
c000e0ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e0b1:	c1 e0 0a             	shl    eax,0xa
c000e0b4:	89 c2                	mov    edx,eax
c000e0b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e0ba:	01 d0                	add    eax,edx
c000e0bc:	c1 e0 0c             	shl    eax,0xc
c000e0bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0c3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e0c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000e0ca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e0cd:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e0d3:	83 ec 04             	sub    esp,0x4
c000e0d6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e0da:	6a 01                	push   0x1
c000e0dc:	50                   	push   eax
c000e0dd:	e8 6e fd ff ff       	call   c000de50 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e0e2:	83 c4 10             	add    esp,0x10
c000e0e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e0e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e0ed:	8b 00                	mov    eax,DWORD PTR [eax]
c000e0ef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e0f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0f7:	25 01 04 00 00       	and    eax,0x401
c000e0fc:	3d 01 04 00 00       	cmp    eax,0x401
c000e101:	75 19                	jne    c000e11c <VAS::~VAS()+0xec>
c000e103:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e107:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e10c:	83 ec 0c             	sub    esp,0xc
c000e10f:	50                   	push   eax
c000e110:	e8 29 e0 ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e115:	83 c4 10             	add    esp,0x10
c000e118:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e11c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e120:	eb 81                	jmp    c000e0a3 <VAS::~VAS()+0x73>
c000e122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e126:	25 00 04 00 00       	and    eax,0x400
c000e12b:	74 19                	je     c000e146 <VAS::~VAS()+0x116>
c000e12d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e131:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e136:	83 ec 0c             	sub    esp,0xc
c000e139:	50                   	push   eax
c000e13a:	e8 ff df ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e13f:	83 c4 10             	add    esp,0x10
c000e142:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e146:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e14a:	e9 1b ff ff ff       	jmp    c000e06a <VAS::~VAS()+0x3a>
c000e14f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e153:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e156:	83 ec 0c             	sub    esp,0xc
c000e159:	50                   	push   eax
c000e15a:	e8 3c fd ff ff       	call   c000de9b <Virt::freeKernelVirtualPages(unsigned long)>
c000e15f:	83 c4 10             	add    esp,0x10
c000e162:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e166:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e169:	83 ec 0c             	sub    esp,0xc
c000e16c:	50                   	push   eax
c000e16d:	e8 cc df ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e172:	83 c4 10             	add    esp,0x10
c000e175:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e179:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e17d:	c1 e0 02             	shl    eax,0x2
c000e180:	83 ec 08             	sub    esp,0x8
c000e183:	50                   	push   eax
c000e184:	68 50 03 02 c0       	push   0xc0020350
c000e189:	e8 57 0c 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000e18e:	83 c4 10             	add    esp,0x10
c000e191:	e8 46 96 00 00       	call   c00177dc <unlockScheduler()>
c000e196:	90                   	nop
c000e197:	83 c4 2c             	add    esp,0x2c
c000e19a:	c3                   	ret    
c000e19b:	90                   	nop

c000e19c <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e19c:	55                   	push   ebp
c000e19d:	57                   	push   edi
c000e19e:	56                   	push   esi
c000e19f:	53                   	push   ebx
c000e1a0:	83 ec 1c             	sub    esp,0x1c
c000e1a3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e1a7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e1ab:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e1b1:	77 08                	ja     c000e1bb <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e1b3:	0f 20 d8             	mov    eax,cr3
c000e1b6:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e1b9:	75 47                	jne    c000e202 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000e1bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e1bf:	09 d8                	or     eax,ebx
c000e1c1:	a9 ff 0f 00 00       	test   eax,0xfff
c000e1c6:	75 57                	jne    c000e21f <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000e1c8:	89 de                	mov    esi,ebx
c000e1ca:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e1cd:	c1 ee 16             	shr    esi,0x16
c000e1d0:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e1d7:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e1db:	74 54                	je     c000e231 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000e1dd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e1e1:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e1e7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e1eb:	c1 e6 0c             	shl    esi,0xc
c000e1ee:	c1 eb 0a             	shr    ebx,0xa
c000e1f1:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e1f7:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e1fa:	83 c4 1c             	add    esp,0x1c
c000e1fd:	5b                   	pop    ebx
c000e1fe:	5e                   	pop    esi
c000e1ff:	5f                   	pop    edi
c000e200:	5d                   	pop    ebp
c000e201:	c3                   	ret    
c000e202:	83 ec 0c             	sub    esp,0xc
c000e205:	68 70 03 02 c0       	push   0xc0020370
c000e20a:	e8 d6 0b 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000e20f:	83 c4 10             	add    esp,0x10
c000e212:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e216:	09 d8                	or     eax,ebx
c000e218:	a9 ff 0f 00 00       	test   eax,0xfff
c000e21d:	74 a9                	je     c000e1c8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e21f:	83 ec 0c             	sub    esp,0xc
c000e222:	68 d8 03 02 c0       	push   0xc00203d8
c000e227:	e8 4e 68 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c000e22c:	83 c4 10             	add    esp,0x10
c000e22f:	eb 97                	jmp    c000e1c8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e231:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e235:	e8 8e df ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e23a:	89 c5                	mov    ebp,eax
c000e23c:	e8 b4 fa ff ff       	call   c000dcf5 <Virt::getAKernelVAS()>
c000e241:	83 ec 0c             	sub    esp,0xc
c000e244:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e248:	6a 01                	push   0x1
c000e24a:	e8 16 f9 ff ff       	call   c000db65 <Virt::allocateKernelVirtualPages(int)>
c000e24f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e256:	6a 01                	push   0x1
c000e258:	50                   	push   eax
c000e259:	55                   	push   ebp
c000e25a:	81 cd 07 04 00 00    	or     ebp,0x407
c000e260:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e264:	51                   	push   ecx
c000e265:	e8 1e 02 00 00       	call   c000e488 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e26a:	83 c4 1c             	add    esp,0x1c
c000e26d:	68 00 10 00 00       	push   0x1000
c000e272:	6a 00                	push   0x0
c000e274:	50                   	push   eax
c000e275:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e279:	e8 8a 23 ff ff       	call   c0000608 <memset>
c000e27e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e282:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e285:	e8 11 fc ff ff       	call   c000de9b <Virt::freeKernelVirtualPages(unsigned long)>
c000e28a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e28e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e291:	83 c4 10             	add    esp,0x10
c000e294:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e297:	e9 41 ff ff ff       	jmp    c000e1dd <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e29c <VAS::allocatePages(int, int)>:
c000e29c:	55                   	push   ebp
c000e29d:	57                   	push   edi
c000e29e:	56                   	push   esi
c000e29f:	53                   	push   ebx
c000e2a0:	83 ec 1c             	sub    esp,0x1c
c000e2a3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e2a7:	e8 c8 5a 00 00       	call   c0013d74 <thisCPU()>
c000e2ac:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e2b2:	83 e0 01             	and    eax,0x1
c000e2b5:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e2b9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e2bd:	0f 85 d7 00 00 00    	jne    c000e39a <VAS::allocatePages(int, int)+0xfe>
c000e2c3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e2c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e2ca:	85 c0                	test   eax,eax
c000e2cc:	0f 84 ac 00 00 00    	je     c000e37e <VAS::allocatePages(int, int)+0xe2>
c000e2d2:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e2d6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e2da:	c1 e6 0c             	shl    esi,0xc
c000e2dd:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000e2e1:	85 c0                	test   eax,eax
c000e2e3:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000e2e6:	7e 33                	jle    c000e31b <VAS::allocatePages(int, int)+0x7f>
c000e2e8:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e2ec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e2f0:	81 cd 00 04 00 00    	or     ebp,0x400
c000e2f6:	e8 cd de ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e2fb:	55                   	push   ebp
c000e2fc:	53                   	push   ebx
c000e2fd:	50                   	push   eax
c000e2fe:	57                   	push   edi
c000e2ff:	e8 98 fe ff ff       	call   c000e19c <VAS::mapPage(unsigned long, unsigned long, int)>
c000e304:	83 c4 10             	add    esp,0x10
c000e307:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e30c:	74 03                	je     c000e311 <VAS::allocatePages(int, int)+0x75>
c000e30e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e311:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e317:	39 de                	cmp    esi,ebx
c000e319:	75 db                	jne    c000e2f6 <VAS::allocatePages(int, int)+0x5a>
c000e31b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e320:	74 3f                	je     c000e361 <VAS::allocatePages(int, int)+0xc5>
c000e322:	c1 ee 0a             	shr    esi,0xa
c000e325:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e329:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000e32f:	c1 eb 0a             	shr    ebx,0xa
c000e332:	81 ee 00 00 40 00    	sub    esi,0x400000
c000e338:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e33e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e344:	39 f3                	cmp    ebx,esi
c000e346:	77 0d                	ja     c000e355 <VAS::allocatePages(int, int)+0xb9>
c000e348:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e34b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e351:	39 de                	cmp    esi,ebx
c000e353:	73 f3                	jae    c000e348 <VAS::allocatePages(int, int)+0xac>
c000e355:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e359:	83 c4 1c             	add    esp,0x1c
c000e35c:	5b                   	pop    ebx
c000e35d:	5e                   	pop    esi
c000e35e:	5f                   	pop    edi
c000e35f:	5d                   	pop    ebp
c000e360:	c3                   	ret    
c000e361:	e8 ef 02 01 00       	call   c001e655 <CPU::readCR3()>
c000e366:	83 ec 0c             	sub    esp,0xc
c000e369:	50                   	push   eax
c000e36a:	e8 f8 02 01 00       	call   c001e667 <CPU::writeCR3(unsigned long)>
c000e36f:	83 c4 10             	add    esp,0x10
c000e372:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e376:	83 c4 1c             	add    esp,0x1c
c000e379:	5b                   	pop    ebx
c000e37a:	5e                   	pop    esi
c000e37b:	5f                   	pop    edi
c000e37c:	5d                   	pop    ebp
c000e37d:	c3                   	ret    
c000e37e:	83 ec 0c             	sub    esp,0xc
c000e381:	68 fc 03 02 c0       	push   0xc00203fc
c000e386:	e8 ef 66 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c000e38b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e38e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e392:	83 c4 10             	add    esp,0x10
c000e395:	e9 38 ff ff ff       	jmp    c000e2d2 <VAS::allocatePages(int, int)+0x36>
c000e39a:	83 ec 0c             	sub    esp,0xc
c000e39d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e3a1:	e8 bf f7 ff ff       	call   c000db65 <Virt::allocateKernelVirtualPages(int)>
c000e3a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e3aa:	83 c4 10             	add    esp,0x10
c000e3ad:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000e3b2:	0f 87 94 00 00 00    	ja     c000e44c <VAS::allocatePages(int, int)+0x1b0>
c000e3b8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e3bc:	85 d2                	test   edx,edx
c000e3be:	7e 3c                	jle    c000e3fc <VAS::allocatePages(int, int)+0x160>
c000e3c0:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e3c4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e3c8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e3cc:	c1 e5 0c             	shl    ebp,0xc
c000e3cf:	81 ce 00 04 00 00    	or     esi,0x400
c000e3d5:	01 dd                	add    ebp,ebx
c000e3d7:	e8 ec dd ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e3dc:	56                   	push   esi
c000e3dd:	53                   	push   ebx
c000e3de:	50                   	push   eax
c000e3df:	57                   	push   edi
c000e3e0:	e8 b7 fd ff ff       	call   c000e19c <VAS::mapPage(unsigned long, unsigned long, int)>
c000e3e5:	83 c4 10             	add    esp,0x10
c000e3e8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e3ed:	74 03                	je     c000e3f2 <VAS::allocatePages(int, int)+0x156>
c000e3ef:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e3f2:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e3f8:	39 dd                	cmp    ebp,ebx
c000e3fa:	75 db                	jne    c000e3d7 <VAS::allocatePages(int, int)+0x13b>
c000e3fc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e401:	0f 84 5a ff ff ff    	je     c000e361 <VAS::allocatePages(int, int)+0xc5>
c000e407:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e40b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e40f:	89 d3                	mov    ebx,edx
c000e411:	c1 e0 0c             	shl    eax,0xc
c000e414:	c1 eb 0a             	shr    ebx,0xa
c000e417:	01 d0                	add    eax,edx
c000e419:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e41f:	c1 e8 0a             	shr    eax,0xa
c000e422:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e428:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e42d:	2d 00 00 40 00       	sub    eax,0x400000
c000e432:	39 c3                	cmp    ebx,eax
c000e434:	0f 87 1b ff ff ff    	ja     c000e355 <VAS::allocatePages(int, int)+0xb9>
c000e43a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e43d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e443:	39 d8                	cmp    eax,ebx
c000e445:	73 f3                	jae    c000e43a <VAS::allocatePages(int, int)+0x19e>
c000e447:	e9 09 ff ff ff       	jmp    c000e355 <VAS::allocatePages(int, int)+0xb9>
c000e44c:	e8 23 59 00 00       	call   c0013d74 <thisCPU()>
c000e451:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000e458:	0f 84 5a ff ff ff    	je     c000e3b8 <VAS::allocatePages(int, int)+0x11c>
c000e45e:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000e466:	e9 4d ff ff ff       	jmp    c000e3b8 <VAS::allocatePages(int, int)+0x11c>
c000e46b:	90                   	nop

c000e46c <VAS::setCPUSpecific(unsigned long)>:
c000e46c:	83 ec 0c             	sub    esp,0xc
c000e46f:	6a 05                	push   0x5
c000e471:	68 00 00 40 c2       	push   0xc2400000
c000e476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e47a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e47e:	e8 19 fd ff ff       	call   c000e19c <VAS::mapPage(unsigned long, unsigned long, int)>
c000e483:	83 c4 1c             	add    esp,0x1c
c000e486:	c3                   	ret    
c000e487:	90                   	nop

c000e488 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000e488:	55                   	push   ebp
c000e489:	57                   	push   edi
c000e48a:	56                   	push   esi
c000e48b:	53                   	push   ebx
c000e48c:	83 ec 1c             	sub    esp,0x1c
c000e48f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e493:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e497:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000e49b:	e8 d4 58 00 00       	call   c0013d74 <thisCPU()>
c000e4a0:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e4a6:	83 e0 01             	and    eax,0x1
c000e4a9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e4ad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e4b1:	85 c0                	test   eax,eax
c000e4b3:	7e 39                	jle    c000e4ee <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000e4b5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e4b9:	89 f3                	mov    ebx,esi
c000e4bb:	c1 e0 0c             	shl    eax,0xc
c000e4be:	01 f0                	add    eax,esi
c000e4c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e4c4:	55                   	push   ebp
c000e4c5:	53                   	push   ebx
c000e4c6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e4ca:	29 f0                	sub    eax,esi
c000e4cc:	01 d8                	add    eax,ebx
c000e4ce:	50                   	push   eax
c000e4cf:	57                   	push   edi
c000e4d0:	e8 c7 fc ff ff       	call   c000e19c <VAS::mapPage(unsigned long, unsigned long, int)>
c000e4d5:	83 c4 10             	add    esp,0x10
c000e4d8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e4dd:	74 03                	je     c000e4e2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000e4df:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e4e2:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e4e8:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000e4ec:	75 d6                	jne    c000e4c4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000e4ee:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e4f3:	74 42                	je     c000e537 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000e4f5:	89 f3                	mov    ebx,esi
c000e4f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e4fb:	c1 eb 0a             	shr    ebx,0xa
c000e4fe:	c1 e0 0c             	shl    eax,0xc
c000e501:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e507:	01 f0                	add    eax,esi
c000e509:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e50f:	c1 e8 0a             	shr    eax,0xa
c000e512:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e517:	2d 00 00 40 00       	sub    eax,0x400000
c000e51c:	39 c3                	cmp    ebx,eax
c000e51e:	77 0d                	ja     c000e52d <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000e520:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e523:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e529:	39 d8                	cmp    eax,ebx
c000e52b:	73 f3                	jae    c000e520 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000e52d:	83 c4 1c             	add    esp,0x1c
c000e530:	89 f0                	mov    eax,esi
c000e532:	5b                   	pop    ebx
c000e533:	5e                   	pop    esi
c000e534:	5f                   	pop    edi
c000e535:	5d                   	pop    ebp
c000e536:	c3                   	ret    
c000e537:	e8 19 01 01 00       	call   c001e655 <CPU::readCR3()>
c000e53c:	83 ec 0c             	sub    esp,0xc
c000e53f:	50                   	push   eax
c000e540:	e8 22 01 01 00       	call   c001e667 <CPU::writeCR3(unsigned long)>
c000e545:	89 f0                	mov    eax,esi
c000e547:	83 c4 10             	add    esp,0x10
c000e54a:	83 c4 1c             	add    esp,0x1c
c000e54d:	5b                   	pop    ebx
c000e54e:	5e                   	pop    esi
c000e54f:	5f                   	pop    edi
c000e550:	5d                   	pop    ebp
c000e551:	c3                   	ret    

c000e552 <VAS::VAS(VAS*)>:
c000e552:	53                   	push   ebx
c000e553:	83 ec 38             	sub    esp,0x38
c000e556:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e55a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e561:	e8 9b 92 00 00       	call   c0017801 <lockStuff()>
c000e566:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e56a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e56d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e571:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e574:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e578:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c000e57b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e57f:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000e582:	e8 41 dc ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e587:	89 c2                	mov    edx,eax
c000e589:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e58d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e590:	e8 60 f7 ff ff       	call   c000dcf5 <Virt::getAKernelVAS()>
c000e595:	89 c3                	mov    ebx,eax
c000e597:	83 ec 0c             	sub    esp,0xc
c000e59a:	6a 01                	push   0x1
c000e59c:	e8 c4 f5 ff ff       	call   c000db65 <Virt::allocateKernelVirtualPages(int)>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	89 c2                	mov    edx,eax
c000e5a6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e5aa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e5ad:	83 ec 0c             	sub    esp,0xc
c000e5b0:	6a 03                	push   0x3
c000e5b2:	6a 01                	push   0x1
c000e5b4:	52                   	push   edx
c000e5b5:	50                   	push   eax
c000e5b6:	53                   	push   ebx
c000e5b7:	e8 cc fe ff ff       	call   c000e488 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e5bc:	83 c4 20             	add    esp,0x20
c000e5bf:	89 c2                	mov    edx,eax
c000e5c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e5c5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e5c8:	83 ec 04             	sub    esp,0x4
c000e5cb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e5cf:	6a 01                	push   0x1
c000e5d1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e5d5:	e8 20 fa ff ff       	call   c000dffa <VAS::mapOtherVASIn(bool, VAS*)>
c000e5da:	83 c4 10             	add    esp,0x10
c000e5dd:	83 ec 0c             	sub    esp,0xc
c000e5e0:	6a 01                	push   0x1
c000e5e2:	e8 7e f5 ff ff       	call   c000db65 <Virt::allocateKernelVirtualPages(int)>
c000e5e7:	83 c4 10             	add    esp,0x10
c000e5ea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e5ee:	83 ec 0c             	sub    esp,0xc
c000e5f1:	6a 01                	push   0x1
c000e5f3:	e8 6d f5 ff ff       	call   c000db65 <Virt::allocateKernelVirtualPages(int)>
c000e5f8:	83 c4 10             	add    esp,0x10
c000e5fb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e5ff:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e607:	81 7c 24 2c ff 03 00 00 	cmp    DWORD PTR [esp+0x2c],0x3ff
c000e60f:	0f 8f 5e 02 00 00    	jg     c000e873 <VAS::VAS(VAS*)+0x321>
c000e615:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e61a:	8b 00                	mov    eax,DWORD PTR [eax]
c000e61c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e61f:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e625:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e628:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e62c:	c1 e2 02             	shl    edx,0x2
c000e62f:	01 d0                	add    eax,edx
c000e631:	8b 00                	mov    eax,DWORD PTR [eax]
c000e633:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e637:	83 ec 08             	sub    esp,0x8
c000e63a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e63e:	68 6f 05 02 c0       	push   0xc002056f
c000e643:	e8 9d 07 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000e648:	83 c4 10             	add    esp,0x10
c000e64b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e64f:	25 01 04 00 00       	and    eax,0x401
c000e654:	3d 01 04 00 00       	cmp    eax,0x401
c000e659:	0f 85 e5 01 00 00    	jne    c000e844 <VAS::VAS(VAS*)+0x2f2>
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	68 80 05 02 c0       	push   0xc0020580
c000e667:	e8 79 07 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000e66c:	83 c4 10             	add    esp,0x10
c000e66f:	e8 54 db ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e678:	83 ec 08             	sub    esp,0x8
c000e67b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e67f:	68 96 05 02 c0       	push   0xc0020596
c000e684:	e8 5c 07 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000e689:	83 c4 10             	add    esp,0x10
c000e68c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e690:	25 ff 0f 00 00       	and    eax,0xfff
c000e695:	89 c1                	mov    ecx,eax
c000e697:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e69b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e69e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e6a2:	c1 e2 02             	shl    edx,0x2
c000e6a5:	01 c2                	add    edx,eax
c000e6a7:	89 c8                	mov    eax,ecx
c000e6a9:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c000e6ad:	89 02                	mov    DWORD PTR [edx],eax
c000e6af:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000e6b7:	81 7c 24 28 ff 03 00 00 	cmp    DWORD PTR [esp+0x28],0x3ff
c000e6bf:	0f 8f a5 01 00 00    	jg     c000e86a <VAS::VAS(VAS*)+0x318>
c000e6c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6c9:	c1 e0 0a             	shl    eax,0xa
c000e6cc:	89 c2                	mov    edx,eax
c000e6ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e6d2:	01 d0                	add    eax,edx
c000e6d4:	c1 e0 0c             	shl    eax,0xc
c000e6d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e6db:	83 ec 08             	sub    esp,0x8
c000e6de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6e2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e6e6:	e8 91 f7 ff ff       	call   c000de7c <VAS::getPageTableEntry(unsigned long)>
c000e6eb:	83 c4 10             	add    esp,0x10
c000e6ee:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6f4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e6f9:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e6fe:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e704:	83 ec 04             	sub    esp,0x4
c000e707:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e70b:	6a 01                	push   0x1
c000e70d:	50                   	push   eax
c000e70e:	e8 3d f7 ff ff       	call   c000de50 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e713:	83 c4 10             	add    esp,0x10
c000e716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e71a:	83 ec 04             	sub    esp,0x4
c000e71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e721:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e725:	68 28 04 02 c0       	push   0xc0020428
c000e72a:	e8 b6 06 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000e72f:	83 c4 10             	add    esp,0x10
c000e732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e736:	25 01 04 00 00       	and    eax,0x401
c000e73b:	3d 01 04 00 00       	cmp    eax,0x401
c000e740:	0f 85 db 00 00 00    	jne    c000e821 <VAS::VAS(VAS*)+0x2cf>
c000e746:	83 ec 0c             	sub    esp,0xc
c000e749:	68 a5 05 02 c0       	push   0xc00205a5
c000e74e:	e8 92 06 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000e753:	83 c4 10             	add    esp,0x10
c000e756:	e8 6d da ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e75b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e75f:	83 ec 08             	sub    esp,0x8
c000e762:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e766:	68 b4 05 02 c0       	push   0xc00205b4
c000e76b:	e8 75 06 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000e770:	83 c4 10             	add    esp,0x10
c000e773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e777:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e77c:	83 ec 08             	sub    esp,0x8
c000e77f:	50                   	push   eax
c000e780:	68 c8 05 02 c0       	push   0xc00205c8
c000e785:	e8 5b 06 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000e78a:	83 c4 10             	add    esp,0x10
c000e78d:	e8 63 f5 ff ff       	call   c000dcf5 <Virt::getAKernelVAS()>
c000e792:	83 ec 0c             	sub    esp,0xc
c000e795:	6a 03                	push   0x3
c000e797:	6a 01                	push   0x1
c000e799:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e79d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e7a1:	50                   	push   eax
c000e7a2:	e8 e1 fc ff ff       	call   c000e488 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e7a7:	83 c4 20             	add    esp,0x20
c000e7aa:	e8 46 f5 ff ff       	call   c000dcf5 <Virt::getAKernelVAS()>
c000e7af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e7b3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e7b9:	83 ec 0c             	sub    esp,0xc
c000e7bc:	6a 03                	push   0x3
c000e7be:	6a 01                	push   0x1
c000e7c0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000e7c4:	52                   	push   edx
c000e7c5:	50                   	push   eax
c000e7c6:	e8 bd fc ff ff       	call   c000e488 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e7cb:	83 c4 20             	add    esp,0x20
c000e7ce:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e7d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7d6:	83 ec 04             	sub    esp,0x4
c000e7d9:	68 00 10 00 00       	push   0x1000
c000e7de:	52                   	push   edx
c000e7df:	50                   	push   eax
c000e7e0:	e8 ed 1d ff ff       	call   c00005d2 <memcpy>
c000e7e5:	83 c4 10             	add    esp,0x10
c000e7e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ec:	25 ff 0f 00 00       	and    eax,0xfff
c000e7f1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e7f5:	89 c2                	mov    edx,eax
c000e7f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7fb:	89 10                	mov    DWORD PTR [eax],edx
c000e7fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e801:	25 ff 0f 00 00       	and    eax,0xfff
c000e806:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e80a:	83 ec 04             	sub    esp,0x4
c000e80d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e811:	50                   	push   eax
c000e812:	68 4c 04 02 c0       	push   0xc002044c
c000e817:	e8 c9 05 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000e81c:	83 c4 10             	add    esp,0x10
c000e81f:	eb 1a                	jmp    c000e83b <VAS::VAS(VAS*)+0x2e9>
c000e821:	83 ec 0c             	sub    esp,0xc
c000e824:	68 dc 05 02 c0       	push   0xc00205dc
c000e829:	e8 b7 05 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000e82e:	83 c4 10             	add    esp,0x10
c000e831:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e835:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e839:	89 10                	mov    DWORD PTR [eax],edx
c000e83b:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000e83f:	e9 73 fe ff ff       	jmp    c000e6b7 <VAS::VAS(VAS*)+0x165>
c000e844:	83 ec 0c             	sub    esp,0xc
c000e847:	68 e0 05 02 c0       	push   0xc00205e0
c000e84c:	e8 94 05 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000e851:	83 c4 10             	add    esp,0x10
c000e854:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e858:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e85b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e85f:	c1 e2 02             	shl    edx,0x2
c000e862:	01 c2                	add    edx,eax
c000e864:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e868:	89 02                	mov    DWORD PTR [edx],eax
c000e86a:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e86e:	e9 94 fd ff ff       	jmp    c000e607 <VAS::VAS(VAS*)+0xb5>
c000e873:	83 ec 0c             	sub    esp,0xc
c000e876:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e87a:	e8 1c f6 ff ff       	call   c000de9b <Virt::freeKernelVirtualPages(unsigned long)>
c000e87f:	83 c4 10             	add    esp,0x10
c000e882:	83 ec 0c             	sub    esp,0xc
c000e885:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e889:	e8 0d f6 ff ff       	call   c000de9b <Virt::freeKernelVirtualPages(unsigned long)>
c000e88e:	83 c4 10             	add    esp,0x10
c000e891:	e8 fd 92 00 00       	call   c0017b93 <unlockStuff()>
c000e896:	90                   	nop
c000e897:	83 c4 38             	add    esp,0x38
c000e89a:	5b                   	pop    ebx
c000e89b:	c3                   	ret    

c000e89c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000e89c:	55                   	push   ebp
c000e89d:	57                   	push   edi
c000e89e:	56                   	push   esi
c000e89f:	53                   	push   ebx
c000e8a0:	83 ec 1c             	sub    esp,0x1c
c000e8a3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e8a7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e8ab:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000e8af:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e8b3:	a9 ff 0f 00 00       	test   eax,0xfff
c000e8b8:	75 4a                	jne    c000e904 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000e8ba:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e8be:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e8c1:	c1 eb 16             	shr    ebx,0x16
c000e8c4:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000e8cb:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000e8cf:	74 4d                	je     c000e91e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000e8d1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e8d5:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000e8d9:	c1 e8 0a             	shr    eax,0xa
c000e8dc:	80 fa 01             	cmp    dl,0x1
c000e8df:	19 d2                	sbb    edx,edx
c000e8e1:	c1 e3 0c             	shl    ebx,0xc
c000e8e4:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000e8e8:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000e8ee:	25 fc 0f 00 00       	and    eax,0xffc
c000e8f3:	01 d8                	add    eax,ebx
c000e8f5:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000e8fc:	83 c4 1c             	add    esp,0x1c
c000e8ff:	5b                   	pop    ebx
c000e900:	5e                   	pop    esi
c000e901:	5f                   	pop    edi
c000e902:	5d                   	pop    ebp
c000e903:	c3                   	ret    
c000e904:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e908:	83 ec 0c             	sub    esp,0xc
c000e90b:	68 70 04 02 c0       	push   0xc0020470
c000e910:	e8 65 61 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c000e915:	83 c4 10             	add    esp,0x10
c000e918:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e91c:	eb 9c                	jmp    c000e8ba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000e91e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e922:	e8 a1 d8 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e927:	89 c5                	mov    ebp,eax
c000e929:	e8 c7 f3 ff ff       	call   c000dcf5 <Virt::getAKernelVAS()>
c000e92e:	83 ec 0c             	sub    esp,0xc
c000e931:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e935:	6a 01                	push   0x1
c000e937:	e8 29 f2 ff ff       	call   c000db65 <Virt::allocateKernelVirtualPages(int)>
c000e93c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e943:	6a 01                	push   0x1
c000e945:	50                   	push   eax
c000e946:	55                   	push   ebp
c000e947:	81 cd 07 04 00 00    	or     ebp,0x407
c000e94d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e951:	51                   	push   ecx
c000e952:	e8 31 fb ff ff       	call   c000e488 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e957:	83 c4 1c             	add    esp,0x1c
c000e95a:	68 00 10 00 00       	push   0x1000
c000e95f:	6a 00                	push   0x0
c000e961:	50                   	push   eax
c000e962:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e966:	e8 9d 1c ff ff       	call   c0000608 <memset>
c000e96b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e96f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e972:	e8 24 f5 ff ff       	call   c000de9b <Virt::freeKernelVirtualPages(unsigned long)>
c000e977:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e97a:	83 c4 10             	add    esp,0x10
c000e97d:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000e980:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e984:	e9 48 ff ff ff       	jmp    c000e8d1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c000e989:	90                   	nop

c000e98a <VAS::VAS(bool)>:
c000e98a:	53                   	push   ebx
c000e98b:	83 ec 28             	sub    esp,0x28
c000e98e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e992:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000e996:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e99a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e9a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9a5:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000e9a9:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000e9ac:	e8 17 d8 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e9b1:	89 c2                	mov    edx,eax
c000e9b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9b7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e9ba:	e8 36 f3 ff ff       	call   c000dcf5 <Virt::getAKernelVAS()>
c000e9bf:	89 c3                	mov    ebx,eax
c000e9c1:	83 ec 0c             	sub    esp,0xc
c000e9c4:	6a 01                	push   0x1
c000e9c6:	e8 9a f1 ff ff       	call   c000db65 <Virt::allocateKernelVirtualPages(int)>
c000e9cb:	83 c4 10             	add    esp,0x10
c000e9ce:	89 c2                	mov    edx,eax
c000e9d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9d4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e9d7:	83 ec 0c             	sub    esp,0xc
c000e9da:	6a 03                	push   0x3
c000e9dc:	6a 01                	push   0x1
c000e9de:	52                   	push   edx
c000e9df:	50                   	push   eax
c000e9e0:	53                   	push   ebx
c000e9e1:	e8 a2 fa ff ff       	call   c000e488 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e9e6:	83 c4 20             	add    esp,0x20
c000e9e9:	89 c2                	mov    edx,eax
c000e9eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9ef:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e9f2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e9fa:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000ea02:	7f 1c                	jg     c000ea20 <VAS::VAS(bool)+0x96>
c000ea04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea08:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ea0b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ea0f:	c1 e2 02             	shl    edx,0x2
c000ea12:	01 d0                	add    eax,edx
c000ea14:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ea1a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ea1e:	eb da                	jmp    c000e9fa <VAS::VAS(bool)+0x70>
c000ea20:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ea28:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ea30:	7f 71                	jg     c000eaa3 <VAS::VAS(bool)+0x119>
c000ea32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea36:	2d 00 02 00 00       	sub    eax,0x200
c000ea3b:	c1 e0 0c             	shl    eax,0xc
c000ea3e:	83 c8 03             	or     eax,0x3
c000ea41:	89 c3                	mov    ebx,eax
c000ea43:	e8 2c 53 00 00       	call   c0013d74 <thisCPU()>
c000ea48:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ea4e:	83 e0 10             	and    eax,0x10
c000ea51:	84 c0                	test   al,al
c000ea53:	74 07                	je     c000ea5c <VAS::VAS(bool)+0xd2>
c000ea55:	b8 00 01 00 00       	mov    eax,0x100
c000ea5a:	eb 05                	jmp    c000ea61 <VAS::VAS(bool)+0xd7>
c000ea5c:	b8 00 00 00 00       	mov    eax,0x0
c000ea61:	09 d8                	or     eax,ebx
c000ea63:	89 c1                	mov    ecx,eax
c000ea65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea69:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ea6c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea70:	c1 e2 02             	shl    edx,0x2
c000ea73:	01 d0                	add    eax,edx
c000ea75:	89 ca                	mov    edx,ecx
c000ea77:	89 10                	mov    DWORD PTR [eax],edx
c000ea79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea7d:	2d 40 03 00 00       	sub    eax,0x340
c000ea82:	83 f8 7f             	cmp    eax,0x7f
c000ea85:	77 16                	ja     c000ea9d <VAS::VAS(bool)+0x113>
c000ea87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea8b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ea8e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea92:	c1 e2 02             	shl    edx,0x2
c000ea95:	01 d0                	add    eax,edx
c000ea97:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ea9d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000eaa1:	eb 85                	jmp    c000ea28 <VAS::VAS(bool)+0x9e>
c000eaa3:	e8 cc 52 00 00       	call   c0013d74 <thisCPU()>
c000eaa8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000eaae:	83 e0 10             	and    eax,0x10
c000eab1:	84 c0                	test   al,al
c000eab3:	74 07                	je     c000eabc <VAS::VAS(bool)+0x132>
c000eab5:	b8 03 41 00 00       	mov    eax,0x4103
c000eaba:	eb 05                	jmp    c000eac1 <VAS::VAS(bool)+0x137>
c000eabc:	b8 03 40 00 00       	mov    eax,0x4003
c000eac1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eac5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000eac8:	81 c2 20 0c 00 00    	add    edx,0xc20
c000eace:	89 02                	mov    DWORD PTR [edx],eax
c000ead0:	e8 9f 52 00 00       	call   c0013d74 <thisCPU()>
c000ead5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000eadb:	83 ec 08             	sub    esp,0x8
c000eade:	50                   	push   eax
c000eadf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eae3:	e8 84 f9 ff ff       	call   c000e46c <VAS::setCPUSpecific(unsigned long)>
c000eae8:	83 c4 10             	add    esp,0x10
c000eaeb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eaef:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000eaf2:	e8 7d 52 00 00       	call   c0013d74 <thisCPU()>
c000eaf7:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000eafd:	83 e0 10             	and    eax,0x10
c000eb00:	84 c0                	test   al,al
c000eb02:	74 07                	je     c000eb0b <VAS::VAS(bool)+0x181>
c000eb04:	b8 00 01 00 00       	mov    eax,0x100
c000eb09:	eb 05                	jmp    c000eb10 <VAS::VAS(bool)+0x186>
c000eb0b:	b8 00 00 00 00       	mov    eax,0x0
c000eb10:	09 d8                	or     eax,ebx
c000eb12:	89 c2                	mov    edx,eax
c000eb14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000eb1b:	05 fc 0f 00 00       	add    eax,0xffc
c000eb20:	83 ca 03             	or     edx,0x3
c000eb23:	89 10                	mov    DWORD PTR [eax],edx
c000eb25:	e8 4a 52 00 00       	call   c0013d74 <thisCPU()>
c000eb2a:	83 ec 0c             	sub    esp,0xc
c000eb2d:	50                   	push   eax
c000eb2e:	e8 9f 19 00 00       	call   c00104d2 <Device::getName()>
c000eb33:	83 c4 10             	add    esp,0x10
c000eb36:	83 ec 08             	sub    esp,0x8
c000eb39:	68 f0 05 02 c0       	push   0xc00205f0
c000eb3e:	50                   	push   eax
c000eb3f:	e8 b4 1b ff ff       	call   c00006f8 <strcmp>
c000eb44:	83 c4 10             	add    esp,0x10
c000eb47:	85 c0                	test   eax,eax
c000eb49:	0f 94 c0             	sete   al
c000eb4c:	84 c0                	test   al,al
c000eb4e:	74 64                	je     c000ebb4 <VAS::VAS(bool)+0x22a>
c000eb50:	e8 68 8c 00 00       	call   c00177bd <disableIRQs()>
c000eb55:	e8 1a 52 00 00       	call   c0013d74 <thisCPU()>
c000eb5a:	05 7c 09 00 00       	add    eax,0x97c
c000eb5f:	83 ec 0c             	sub    esp,0xc
c000eb62:	50                   	push   eax
c000eb63:	e8 28 cb ff ff       	call   c000b690 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000eb68:	83 c4 10             	add    esp,0x10
c000eb6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb70:	89 c3                	mov    ebx,eax
c000eb72:	e8 fd 51 00 00       	call   c0013d74 <thisCPU()>
c000eb77:	05 7c 09 00 00       	add    eax,0x97c
c000eb7c:	83 ec 0c             	sub    esp,0xc
c000eb7f:	50                   	push   eax
c000eb80:	e8 0b cb ff ff       	call   c000b690 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000eb85:	83 c4 10             	add    esp,0x10
c000eb88:	83 ec 08             	sub    esp,0x8
c000eb8b:	50                   	push   eax
c000eb8c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eb90:	e8 e7 f2 ff ff       	call   c000de7c <VAS::getPageTableEntry(unsigned long)>
c000eb95:	83 c4 10             	add    esp,0x10
c000eb98:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb9a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb9f:	6a 11                	push   0x11
c000eba1:	53                   	push   ebx
c000eba2:	50                   	push   eax
c000eba3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eba7:	e8 f0 f5 ff ff       	call   c000e19c <VAS::mapPage(unsigned long, unsigned long, int)>
c000ebac:	83 c4 10             	add    esp,0x10
c000ebaf:	e8 17 8c 00 00       	call   c00177cb <enableIRQs()>
c000ebb4:	90                   	nop
c000ebb5:	83 c4 28             	add    esp,0x28
c000ebb8:	5b                   	pop    ebx
c000ebb9:	c3                   	ret    

c000ebba <mapVASFirstTime>:
c000ebba:	55                   	push   ebp
c000ebbb:	57                   	push   edi
c000ebbc:	56                   	push   esi
c000ebbd:	53                   	push   ebx
c000ebbe:	83 ec 0c             	sub    esp,0xc
c000ebc1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ebc6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ebc9:	4a                   	dec    edx
c000ebca:	0f 84 99 00 00 00    	je     c000ec69 <mapVASFirstTime+0xaf>
c000ebd0:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000ebd3:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000ebd6:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ebdb:	c1 e5 15             	shl    ebp,0x15
c000ebde:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000ebe3:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000ebe9:	29 eb                	sub    ebx,ebp
c000ebeb:	29 ee                	sub    esi,ebp
c000ebed:	e8 d6 d5 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000ebf2:	83 ec 0c             	sub    esp,0xc
c000ebf5:	68 03 04 00 00       	push   0x403
c000ebfa:	6a 01                	push   0x1
c000ebfc:	53                   	push   ebx
c000ebfd:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ec03:	50                   	push   eax
c000ec04:	57                   	push   edi
c000ec05:	e8 7e f8 ff ff       	call   c000e488 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ec0a:	83 c4 20             	add    esp,0x20
c000ec0d:	39 f3                	cmp    ebx,esi
c000ec0f:	75 dc                	jne    c000ebed <mapVASFirstTime+0x33>
c000ec11:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000ec16:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000ec1b:	29 ee                	sub    esi,ebp
c000ec1d:	29 e8                	sub    eax,ebp
c000ec1f:	89 c5                	mov    ebp,eax
c000ec21:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000ec25:	19 db                	sbb    ebx,ebx
c000ec27:	e8 9c d5 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000ec2c:	83 e3 04             	and    ebx,0x4
c000ec2f:	83 ec 0c             	sub    esp,0xc
c000ec32:	81 c3 03 04 00 00    	add    ebx,0x403
c000ec38:	53                   	push   ebx
c000ec39:	6a 01                	push   0x1
c000ec3b:	56                   	push   esi
c000ec3c:	81 ee 00 10 00 00    	sub    esi,0x1000
c000ec42:	50                   	push   eax
c000ec43:	57                   	push   edi
c000ec44:	e8 3f f8 ff ff       	call   c000e488 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ec49:	83 c4 20             	add    esp,0x20
c000ec4c:	39 f5                	cmp    ebp,esi
c000ec4e:	75 d1                	jne    c000ec21 <mapVASFirstTime+0x67>
c000ec50:	e8 00 fa 00 00       	call   c001e655 <CPU::readCR3()>
c000ec55:	83 ec 0c             	sub    esp,0xc
c000ec58:	50                   	push   eax
c000ec59:	e8 09 fa 00 00       	call   c001e667 <CPU::writeCR3(unsigned long)>
c000ec5e:	83 c4 10             	add    esp,0x10
c000ec61:	83 c4 0c             	add    esp,0xc
c000ec64:	5b                   	pop    ebx
c000ec65:	5e                   	pop    esi
c000ec66:	5f                   	pop    edi
c000ec67:	5d                   	pop    ebp
c000ec68:	c3                   	ret    
c000ec69:	83 ec 0c             	sub    esp,0xc
c000ec6c:	68 fe 05 02 c0       	push   0xc00205fe
c000ec71:	e8 6f 01 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000ec76:	83 c4 10             	add    esp,0x10
c000ec79:	83 c4 0c             	add    esp,0xc
c000ec7c:	5b                   	pop    ebx
c000ec7d:	5e                   	pop    esi
c000ec7e:	5f                   	pop    edi
c000ec7f:	5d                   	pop    ebp
c000ec80:	c3                   	ret    

c000ec81 <__cxa_atexit>:
c000ec81:	31 c0                	xor    eax,eax
c000ec83:	c3                   	ret    

c000ec84 <__cxa_finalize>:
c000ec84:	c3                   	ret    

c000ec85 <__stack_chk_fail>:
c000ec85:	55                   	push   ebp
c000ec86:	89 e5                	mov    ebp,esp
c000ec88:	83 ec 10             	sub    esp,0x10
c000ec8b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ec8e:	68 17 06 02 c0       	push   0xc0020617
c000ec93:	e8 4d 01 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000ec98:	58                   	pop    eax
c000ec99:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ec9c:	5a                   	pop    edx
c000ec9d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000eca0:	68 17 06 02 c0       	push   0xc0020617
c000eca5:	e8 3b 01 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000ecaa:	59                   	pop    ecx
c000ecab:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ecae:	5a                   	pop    edx
c000ecaf:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecb1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ecb4:	68 17 06 02 c0       	push   0xc0020617
c000ecb9:	e8 27 01 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000ecbe:	59                   	pop    ecx
c000ecbf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ecc2:	5a                   	pop    edx
c000ecc3:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecc5:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecc7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ecca:	68 17 06 02 c0       	push   0xc0020617
c000eccf:	e8 11 01 00 00       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c000ecd4:	c7 04 24 1f 06 02 c0 	mov    DWORD PTR [esp],0xc002061f
c000ecdb:	e8 9a 5d 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c000ece0:	83 c4 10             	add    esp,0x10
c000ece3:	c9                   	leave  
c000ece4:	c3                   	ret    

c000ece5 <__cxa_pure_virtual>:
c000ece5:	83 ec 18             	sub    esp,0x18
c000ece8:	68 37 06 02 c0       	push   0xc0020637
c000eced:	e8 88 5d 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c000ecf2:	83 c4 1c             	add    esp,0x1c
c000ecf5:	c3                   	ret    

c000ecf6 <operator new(unsigned long)>:
c000ecf6:	e9 23 cf ff ff       	jmp    c000bc1e <malloc>

c000ecfb <operator new[](unsigned long)>:
c000ecfb:	e9 1e cf ff ff       	jmp    c000bc1e <malloc>

c000ed00 <operator delete(void*)>:
c000ed00:	e9 39 cf ff ff       	jmp    c000bc3e <rfree>

c000ed05 <operator delete(void*, unsigned long)>:
c000ed05:	e9 34 cf ff ff       	jmp    c000bc3e <rfree>

c000ed0a <operator delete[](void*)>:
c000ed0a:	e9 2f cf ff ff       	jmp    c000bc3e <rfree>

c000ed0f <operator delete[](void*, unsigned long)>:
c000ed0f:	e9 2a cf ff ff       	jmp    c000bc3e <rfree>

c000ed14 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000ed14:	57                   	push   edi
c000ed15:	b9 3f 00 00 00       	mov    ecx,0x3f
c000ed1a:	56                   	push   esi
c000ed1b:	be 4c 06 02 c0       	mov    esi,0xc002064c
c000ed20:	53                   	push   ebx
c000ed21:	83 ec 40             	sub    esp,0x40
c000ed24:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000ed28:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000ed2c:	fc                   	cld    
c000ed2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ed2f:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000ed33:	83 f9 3e             	cmp    ecx,0x3e
c000ed36:	7e 05                	jle    c000ed3d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c000ed38:	b9 3e 00 00 00       	mov    ecx,0x3e
c000ed3d:	89 df                	mov    edi,ebx
c000ed3f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000ed43:	eb 02                	jmp    c000ed47 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c000ed45:	89 c7                	mov    edi,eax
c000ed47:	31 d2                	xor    edx,edx
c000ed49:	46                   	inc    esi
c000ed4a:	89 f8                	mov    eax,edi
c000ed4c:	f7 f1                	div    ecx
c000ed4e:	39 cf                	cmp    edi,ecx
c000ed50:	73 f3                	jae    c000ed45 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c000ed52:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ed55:	eb 02                	jmp    c000ed59 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c000ed57:	89 c3                	mov    ebx,eax
c000ed59:	31 d2                	xor    edx,edx
c000ed5b:	4e                   	dec    esi
c000ed5c:	89 d8                	mov    eax,ebx
c000ed5e:	f7 f1                	div    ecx
c000ed60:	39 cb                	cmp    ebx,ecx
c000ed62:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000ed66:	88 16                	mov    BYTE PTR [esi],dl
c000ed68:	73 ed                	jae    c000ed57 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c000ed6a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ed6e:	83 c4 40             	add    esp,0x40
c000ed71:	5b                   	pop    ebx
c000ed72:	5e                   	pop    esi
c000ed73:	5f                   	pop    edi
c000ed74:	c3                   	ret    

c000ed75 <Dbg::logc(char)>:
c000ed75:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ed79:	ba fd 03 00 00       	mov    edx,0x3fd
c000ed7e:	ec                   	in     al,dx
c000ed7f:	a8 20                	test   al,0x20
c000ed81:	74 fb                	je     c000ed7e <Dbg::logc(char)+0x9>
c000ed83:	ba f8 03 00 00       	mov    edx,0x3f8
c000ed88:	88 c8                	mov    al,cl
c000ed8a:	ee                   	out    dx,al
c000ed8b:	c3                   	ret    

c000ed8c <Dbg::logs(char*)>:
c000ed8c:	53                   	push   ebx
c000ed8d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ed91:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ed94:	84 c0                	test   al,al
c000ed96:	74 0f                	je     c000eda7 <Dbg::logs(char*)+0x1b>
c000ed98:	50                   	push   eax
c000ed99:	43                   	inc    ebx
c000ed9a:	e8 d6 ff ff ff       	call   c000ed75 <Dbg::logc(char)>
c000ed9f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000eda2:	5a                   	pop    edx
c000eda3:	84 c0                	test   al,al
c000eda5:	75 f1                	jne    c000ed98 <Dbg::logs(char*)+0xc>
c000eda7:	5b                   	pop    ebx
c000eda8:	c3                   	ret    

c000eda9 <Dbg::logWriteInt(unsigned int)>:
c000eda9:	83 ec 10             	sub    esp,0x10
c000edac:	6a 0a                	push   0xa
c000edae:	8d 44 24 08          	lea    eax,[esp+0x8]
c000edb2:	50                   	push   eax
c000edb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000edb7:	e8 58 ff ff ff       	call   c000ed14 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000edbc:	50                   	push   eax
c000edbd:	e8 ca ff ff ff       	call   c000ed8c <Dbg::logs(char*)>
c000edc2:	83 c4 20             	add    esp,0x20
c000edc5:	c3                   	ret    

c000edc6 <Dbg::logWriteIntBase(unsigned int, int)>:
c000edc6:	83 ec 10             	sub    esp,0x10
c000edc9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000edcd:	8d 44 24 08          	lea    eax,[esp+0x8]
c000edd1:	50                   	push   eax
c000edd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000edd6:	e8 39 ff ff ff       	call   c000ed14 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000eddb:	50                   	push   eax
c000eddc:	e8 ab ff ff ff       	call   c000ed8c <Dbg::logs(char*)>
c000ede1:	83 c4 20             	add    esp,0x20
c000ede4:	c3                   	ret    

c000ede5 <Dbg::kprintf(char const*, ...)>:
c000ede5:	55                   	push   ebp
c000ede6:	57                   	push   edi
c000ede7:	56                   	push   esi
c000ede8:	53                   	push   ebx
c000ede9:	83 ec 0c             	sub    esp,0xc
c000edec:	8d 44 24 24          	lea    eax,[esp+0x24]
c000edf0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000edf4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000edf8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000edfb:	84 c0                	test   al,al
c000edfd:	74 4a                	je     c000ee49 <Dbg::kprintf(char const*, ...)+0x64>
c000edff:	31 db                	xor    ebx,ebx
c000ee01:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ee04:	3c 25                	cmp    al,0x25
c000ee06:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000ee09:	0f 85 e4 00 00 00    	jne    c000eef3 <Dbg::kprintf(char const*, ...)+0x10e>
c000ee0f:	83 c3 02             	add    ebx,0x2
c000ee12:	8a 07                	mov    al,BYTE PTR [edi]
c000ee14:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000ee17:	83 e8 25             	sub    eax,0x25
c000ee1a:	3c 53                	cmp    al,0x53
c000ee1c:	0f 87 ba 00 00 00    	ja     c000eedc <Dbg::kprintf(char const*, ...)+0xf7>
c000ee22:	0f b6 c0             	movzx  eax,al
c000ee25:	ff 24 85 8c 06 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf974]
c000ee2c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee30:	89 c8                	mov    eax,ecx
c000ee32:	83 c1 04             	add    ecx,0x4
c000ee35:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ee39:	ff 30                	push   DWORD PTR [eax]
c000ee3b:	e8 4c ff ff ff       	call   c000ed8c <Dbg::logs(char*)>
c000ee40:	58                   	pop    eax
c000ee41:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000ee45:	84 c0                	test   al,al
c000ee47:	75 b8                	jne    c000ee01 <Dbg::kprintf(char const*, ...)+0x1c>
c000ee49:	83 c4 0c             	add    esp,0xc
c000ee4c:	5b                   	pop    ebx
c000ee4d:	5e                   	pop    esi
c000ee4e:	5f                   	pop    edi
c000ee4f:	5d                   	pop    ebp
c000ee50:	c3                   	ret    
c000ee51:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ee55:	89 d0                	mov    eax,edx
c000ee57:	83 c2 04             	add    edx,0x4
c000ee5a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ee5e:	ff 30                	push   DWORD PTR [eax]
c000ee60:	e8 44 ff ff ff       	call   c000eda9 <Dbg::logWriteInt(unsigned int)>
c000ee65:	58                   	pop    eax
c000ee66:	eb d9                	jmp    c000ee41 <Dbg::kprintf(char const*, ...)+0x5c>
c000ee68:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ee6c:	89 d0                	mov    eax,edx
c000ee6e:	83 c2 04             	add    edx,0x4
c000ee71:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000ee74:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ee78:	50                   	push   eax
c000ee79:	e8 f7 fe ff ff       	call   c000ed75 <Dbg::logc(char)>
c000ee7e:	58                   	pop    eax
c000ee7f:	eb c0                	jmp    c000ee41 <Dbg::kprintf(char const*, ...)+0x5c>
c000ee81:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee85:	89 c8                	mov    eax,ecx
c000ee87:	83 c1 04             	add    ecx,0x4
c000ee8a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ee8e:	ff 30                	push   DWORD PTR [eax]
c000ee90:	e8 14 ff ff ff       	call   c000eda9 <Dbg::logWriteInt(unsigned int)>
c000ee95:	5f                   	pop    edi
c000ee96:	eb a9                	jmp    c000ee41 <Dbg::kprintf(char const*, ...)+0x5c>
c000ee98:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee9c:	89 c8                	mov    eax,ecx
c000ee9e:	83 c1 04             	add    ecx,0x4
c000eea1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000eea5:	6a 10                	push   0x10
c000eea7:	ff 30                	push   DWORD PTR [eax]
c000eea9:	e8 18 ff ff ff       	call   c000edc6 <Dbg::logWriteIntBase(unsigned int, int)>
c000eeae:	59                   	pop    ecx
c000eeaf:	5f                   	pop    edi
c000eeb0:	eb 8f                	jmp    c000ee41 <Dbg::kprintf(char const*, ...)+0x5c>
c000eeb2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000eeb6:	89 d0                	mov    eax,edx
c000eeb8:	83 c2 08             	add    edx,0x8
c000eebb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000eebf:	6a 10                	push   0x10
c000eec1:	ff 30                	push   DWORD PTR [eax]
c000eec3:	e8 fe fe ff ff       	call   c000edc6 <Dbg::logWriteIntBase(unsigned int, int)>
c000eec8:	58                   	pop    eax
c000eec9:	5a                   	pop    edx
c000eeca:	e9 72 ff ff ff       	jmp    c000ee41 <Dbg::kprintf(char const*, ...)+0x5c>
c000eecf:	6a 25                	push   0x25
c000eed1:	e8 9f fe ff ff       	call   c000ed75 <Dbg::logc(char)>
c000eed6:	58                   	pop    eax
c000eed7:	e9 65 ff ff ff       	jmp    c000ee41 <Dbg::kprintf(char const*, ...)+0x5c>
c000eedc:	6a 25                	push   0x25
c000eede:	e8 92 fe ff ff       	call   c000ed75 <Dbg::logc(char)>
c000eee3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000eee6:	50                   	push   eax
c000eee7:	e8 89 fe ff ff       	call   c000ed75 <Dbg::logc(char)>
c000eeec:	5a                   	pop    edx
c000eeed:	59                   	pop    ecx
c000eeee:	e9 4e ff ff ff       	jmp    c000ee41 <Dbg::kprintf(char const*, ...)+0x5c>
c000eef3:	50                   	push   eax
c000eef4:	89 eb                	mov    ebx,ebp
c000eef6:	e8 7a fe ff ff       	call   c000ed75 <Dbg::logc(char)>
c000eefb:	89 fd                	mov    ebp,edi
c000eefd:	58                   	pop    eax
c000eefe:	e9 3e ff ff ff       	jmp    c000ee41 <Dbg::kprintf(char const*, ...)+0x5c>
c000ef03:	90                   	nop

c000ef04 <File::read(unsigned long long, void*, int*)>:
c000ef04:	53                   	push   ebx
c000ef05:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef09:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ef0d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ef14:	3c 19                	cmp    al,0x19
c000ef16:	77 35                	ja     c000ef4d <File::read(unsigned long long, void*, int*)+0x49>
c000ef18:	8b 04 85 80 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc880]
c000ef1f:	85 c0                	test   eax,eax
c000ef21:	74 2a                	je     c000ef4d <File::read(unsigned long long, void*, int*)+0x49>
c000ef23:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ef29:	85 c0                	test   eax,eax
c000ef2b:	74 20                	je     c000ef4d <File::read(unsigned long long, void*, int*)+0x49>
c000ef2d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ef31:	74 21                	je     c000ef54 <File::read(unsigned long long, void*, int*)+0x50>
c000ef33:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ef35:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ef39:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ef3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ef43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ef47:	5b                   	pop    ebx
c000ef48:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ef4b:	ff e0                	jmp    eax
c000ef4d:	b8 0b 00 00 00       	mov    eax,0xb
c000ef52:	eb 05                	jmp    c000ef59 <File::read(unsigned long long, void*, int*)+0x55>
c000ef54:	b8 05 00 00 00       	mov    eax,0x5
c000ef59:	5b                   	pop    ebx
c000ef5a:	c3                   	ret    
c000ef5b:	90                   	nop

c000ef5c <File::write(unsigned long long, void*, int*)>:
c000ef5c:	53                   	push   ebx
c000ef5d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef61:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ef65:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ef6c:	3c 19                	cmp    al,0x19
c000ef6e:	77 35                	ja     c000efa5 <File::write(unsigned long long, void*, int*)+0x49>
c000ef70:	8b 04 85 80 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc880]
c000ef77:	85 c0                	test   eax,eax
c000ef79:	74 2a                	je     c000efa5 <File::write(unsigned long long, void*, int*)+0x49>
c000ef7b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ef81:	85 c0                	test   eax,eax
c000ef83:	74 20                	je     c000efa5 <File::write(unsigned long long, void*, int*)+0x49>
c000ef85:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ef89:	74 21                	je     c000efac <File::write(unsigned long long, void*, int*)+0x50>
c000ef8b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ef8d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ef91:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ef97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ef9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ef9f:	5b                   	pop    ebx
c000efa0:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000efa3:	ff e0                	jmp    eax
c000efa5:	b8 0b 00 00 00       	mov    eax,0xb
c000efaa:	eb 05                	jmp    c000efb1 <File::write(unsigned long long, void*, int*)+0x55>
c000efac:	b8 05 00 00 00       	mov    eax,0x5
c000efb1:	5b                   	pop    ebx
c000efb2:	c3                   	ret    
c000efb3:	90                   	nop

c000efb4 <Directory::read(unsigned long long, void*, int*)>:
c000efb4:	53                   	push   ebx
c000efb5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000efb9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000efbd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000efc4:	3c 19                	cmp    al,0x19
c000efc6:	77 35                	ja     c000effd <Directory::read(unsigned long long, void*, int*)+0x49>
c000efc8:	8b 04 85 80 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc880]
c000efcf:	85 c0                	test   eax,eax
c000efd1:	74 2a                	je     c000effd <Directory::read(unsigned long long, void*, int*)+0x49>
c000efd3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000efd9:	85 c0                	test   eax,eax
c000efdb:	74 20                	je     c000effd <Directory::read(unsigned long long, void*, int*)+0x49>
c000efdd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000efe1:	74 21                	je     c000f004 <Directory::read(unsigned long long, void*, int*)+0x50>
c000efe3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000efe5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000efe9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000efef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eff3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000eff7:	5b                   	pop    ebx
c000eff8:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000effb:	ff e0                	jmp    eax
c000effd:	b8 0b 00 00 00       	mov    eax,0xb
c000f002:	eb 05                	jmp    c000f009 <Directory::read(unsigned long long, void*, int*)+0x55>
c000f004:	b8 05 00 00 00       	mov    eax,0x5
c000f009:	5b                   	pop    ebx
c000f00a:	c3                   	ret    
c000f00b:	90                   	nop

c000f00c <Directory::write(unsigned long long, void*, int*)>:
c000f00c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f010:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f017:	b8 0b 00 00 00       	mov    eax,0xb
c000f01c:	80 fa 19             	cmp    dl,0x19
c000f01f:	77 18                	ja     c000f039 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f021:	8b 14 95 80 37 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc880]
c000f028:	85 d2                	test   edx,edx
c000f02a:	74 0d                	je     c000f039 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f02c:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f033:	19 c0                	sbb    eax,eax
c000f035:	83 e0 0a             	and    eax,0xa
c000f038:	40                   	inc    eax
c000f039:	c3                   	ret    

c000f03a <File::isAtty()>:
c000f03a:	31 c0                	xor    eax,eax
c000f03c:	c3                   	ret    
c000f03d:	90                   	nop

c000f03e <Directory::isAtty()>:
c000f03e:	31 c0                	xor    eax,eax
c000f040:	c3                   	ret    
c000f041:	90                   	nop

c000f042 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f042:	b8 0a 00 00 00       	mov    eax,0xa
c000f047:	c3                   	ret    

c000f048 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f048:	b8 0a 00 00 00       	mov    eax,0xa
c000f04d:	c3                   	ret    

c000f04e <File::~File()>:
c000f04e:	83 ec 0c             	sub    esp,0xc
c000f051:	ba 48 08 02 c0       	mov    edx,0xc0020848
c000f056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f05a:	89 10                	mov    DWORD PTR [eax],edx
c000f05c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f060:	83 ec 0c             	sub    esp,0xc
c000f063:	50                   	push   eax
c000f064:	e8 1d e9 ff ff       	call   c000d986 <UnixFile::~UnixFile()>
c000f069:	83 c4 10             	add    esp,0x10
c000f06c:	90                   	nop
c000f06d:	83 c4 0c             	add    esp,0xc
c000f070:	c3                   	ret    
c000f071:	90                   	nop

c000f072 <File::~File()>:
c000f072:	83 ec 0c             	sub    esp,0xc
c000f075:	83 ec 0c             	sub    esp,0xc
c000f078:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f07c:	e8 cd ff ff ff       	call   c000f04e <File::~File()>
c000f081:	83 c4 10             	add    esp,0x10
c000f084:	83 ec 08             	sub    esp,0x8
c000f087:	68 14 01 00 00       	push   0x114
c000f08c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f090:	e8 70 fc ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c000f095:	83 c4 10             	add    esp,0x10
c000f098:	83 c4 0c             	add    esp,0xc
c000f09b:	c3                   	ret    

c000f09c <Directory::~Directory()>:
c000f09c:	83 ec 0c             	sub    esp,0xc
c000f09f:	ba 64 08 02 c0       	mov    edx,0xc0020864
c000f0a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0a8:	89 10                	mov    DWORD PTR [eax],edx
c000f0aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0ae:	83 ec 0c             	sub    esp,0xc
c000f0b1:	50                   	push   eax
c000f0b2:	e8 cf e8 ff ff       	call   c000d986 <UnixFile::~UnixFile()>
c000f0b7:	83 c4 10             	add    esp,0x10
c000f0ba:	90                   	nop
c000f0bb:	83 c4 0c             	add    esp,0xc
c000f0be:	c3                   	ret    
c000f0bf:	90                   	nop

c000f0c0 <Directory::~Directory()>:
c000f0c0:	83 ec 0c             	sub    esp,0xc
c000f0c3:	83 ec 0c             	sub    esp,0xc
c000f0c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0ca:	e8 cd ff ff ff       	call   c000f09c <Directory::~Directory()>
c000f0cf:	83 c4 10             	add    esp,0x10
c000f0d2:	83 ec 08             	sub    esp,0x8
c000f0d5:	68 14 01 00 00       	push   0x114
c000f0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0de:	e8 22 fc ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c000f0e3:	83 c4 10             	add    esp,0x10
c000f0e6:	83 c4 0c             	add    esp,0xc
c000f0e9:	c3                   	ret    

c000f0ea <Filesystem::Filesystem()>:
c000f0ea:	ba e4 07 02 c0       	mov    edx,0xc00207e4
c000f0ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0f3:	89 10                	mov    DWORD PTR [eax],edx
c000f0f5:	8b 15 e0 32 02 c0    	mov    edx,DWORD PTR ds:0xc00232e0
c000f0fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f102:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f106:	a3 e0 32 02 c0       	mov    ds:0xc00232e0,eax
c000f10b:	90                   	nop
c000f10c:	c3                   	ret    
c000f10d:	90                   	nop

c000f10e <Filesystem::~Filesystem()>:
c000f10e:	ba e4 07 02 c0       	mov    edx,0xc00207e4
c000f113:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f117:	89 10                	mov    DWORD PTR [eax],edx
c000f119:	90                   	nop
c000f11a:	c3                   	ret    
c000f11b:	90                   	nop

c000f11c <Filesystem::~Filesystem()>:
c000f11c:	83 ec 0c             	sub    esp,0xc
c000f11f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f123:	e8 e6 ff ff ff       	call   c000f10e <Filesystem::~Filesystem()>
c000f128:	83 c4 04             	add    esp,0x4
c000f12b:	83 ec 08             	sub    esp,0x8
c000f12e:	6a 08                	push   0x8
c000f130:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f134:	e8 cc fb ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c000f139:	83 c4 10             	add    esp,0x10
c000f13c:	83 c4 0c             	add    esp,0xc
c000f13f:	c3                   	ret    

c000f140 <initVFS()>:
c000f140:	83 ec 18             	sub    esp,0x18
c000f143:	6a 08                	push   0x8
c000f145:	e8 ac fb ff ff       	call   c000ecf6 <operator new(unsigned long)>
c000f14a:	89 04 24             	mov    DWORD PTR [esp],eax
c000f14d:	e8 68 a7 00 00       	call   c00198ba <FAT::FAT()>
c000f152:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f159:	e8 98 fb ff ff       	call   c000ecf6 <operator new(unsigned long)>
c000f15e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f161:	e8 ca b9 00 00       	call   c001ab30 <ISO9660::ISO9660()>
c000f166:	83 c4 1c             	add    esp,0x1c
c000f169:	c3                   	ret    

c000f16a <standardiseFiles(char*, char const*, char const*)>:
c000f16a:	55                   	push   ebp
c000f16b:	57                   	push   edi
c000f16c:	56                   	push   esi
c000f16d:	53                   	push   ebx
c000f16e:	81 ec 10 04 00 00    	sub    esp,0x410
c000f174:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f17b:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f182:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f189:	68 00 04 00 00       	push   0x400
c000f18e:	6a 00                	push   0x0
c000f190:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f194:	56                   	push   esi
c000f195:	e8 6e 14 ff ff       	call   c0000608 <memset>
c000f19a:	83 c4 10             	add    esp,0x10
c000f19d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f1a1:	75 0b                	jne    c000f1ae <standardiseFiles(char*, char const*, char const*)+0x44>
c000f1a3:	50                   	push   eax
c000f1a4:	50                   	push   eax
c000f1a5:	57                   	push   edi
c000f1a6:	56                   	push   esi
c000f1a7:	e8 fb 14 ff ff       	call   c00006a7 <strcpy>
c000f1ac:	eb 41                	jmp    c000f1ef <standardiseFiles(char*, char const*, char const*)+0x85>
c000f1ae:	8a 07                	mov    al,BYTE PTR [edi]
c000f1b0:	3c 5c                	cmp    al,0x5c
c000f1b2:	74 04                	je     c000f1b8 <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f1b4:	3c 2f                	cmp    al,0x2f
c000f1b6:	75 18                	jne    c000f1d0 <standardiseFiles(char*, char const*, char const*)+0x66>
c000f1b8:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f1bb:	3c 60                	cmp    al,0x60
c000f1bd:	7e 03                	jle    c000f1c2 <standardiseFiles(char*, char const*, char const*)+0x58>
c000f1bf:	83 e8 20             	sub    eax,0x20
c000f1c2:	88 04 24             	mov    BYTE PTR [esp],al
c000f1c5:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f1cc:	50                   	push   eax
c000f1cd:	50                   	push   eax
c000f1ce:	eb 18                	jmp    c000f1e8 <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f1d0:	50                   	push   eax
c000f1d1:	50                   	push   eax
c000f1d2:	55                   	push   ebp
c000f1d3:	56                   	push   esi
c000f1d4:	e8 ce 14 ff ff       	call   c00006a7 <strcpy>
c000f1d9:	5a                   	pop    edx
c000f1da:	59                   	pop    ecx
c000f1db:	68 bb 18 02 c0       	push   0xc00218bb
c000f1e0:	56                   	push   esi
c000f1e1:	e8 78 15 ff ff       	call   c000075e <strcat>
c000f1e6:	5d                   	pop    ebp
c000f1e7:	58                   	pop    eax
c000f1e8:	57                   	push   edi
c000f1e9:	56                   	push   esi
c000f1ea:	e8 6f 15 ff ff       	call   c000075e <strcat>
c000f1ef:	83 c4 10             	add    esp,0x10
c000f1f2:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f1f5:	3c 60                	cmp    al,0x60
c000f1f7:	7e 03                	jle    c000f1fc <standardiseFiles(char*, char const*, char const*)+0x92>
c000f1f9:	83 e8 20             	sub    eax,0x20
c000f1fc:	88 04 24             	mov    BYTE PTR [esp],al
c000f1ff:	88 03                	mov    BYTE PTR [ebx],al
c000f201:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f208:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f20e:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f212:	bf 03 00 00 00       	mov    edi,0x3
c000f217:	b8 03 00 00 00       	mov    eax,0x3
c000f21c:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f21f:	84 d2                	test   dl,dl
c000f221:	0f 84 91 00 00 00    	je     c000f2b8 <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f227:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f22a:	80 fa 5c             	cmp    dl,0x5c
c000f22d:	74 05                	je     c000f234 <standardiseFiles(char*, char const*, char const*)+0xca>
c000f22f:	80 fa 2f             	cmp    dl,0x2f
c000f232:	75 12                	jne    c000f246 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f234:	89 c5                	mov    ebp,eax
c000f236:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f23b:	74 09                	je     c000f246 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f23d:	40                   	inc    eax
c000f23e:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f242:	89 cf                	mov    edi,ecx
c000f244:	eb d6                	jmp    c000f21c <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f246:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f24b:	75 5b                	jne    c000f2a8 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f24d:	80 fa 2e             	cmp    dl,0x2e
c000f250:	75 56                	jne    c000f2a8 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f252:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f256:	74 19                	je     c000f271 <standardiseFiles(char*, char const*, char const*)+0x107>
c000f258:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f25d:	74 53                	je     c000f2b2 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f25f:	89 f9                	mov    ecx,edi
c000f261:	41                   	inc    ecx
c000f262:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f265:	80 fa 2f             	cmp    dl,0x2f
c000f268:	74 f7                	je     c000f261 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f26a:	80 fa 5c             	cmp    dl,0x5c
c000f26d:	74 f2                	je     c000f261 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f26f:	eb d1                	jmp    c000f242 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f271:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f276:	74 3a                	je     c000f2b2 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f278:	83 f8 03             	cmp    eax,0x3
c000f27b:	74 c5                	je     c000f242 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f27d:	41                   	inc    ecx
c000f27e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f281:	80 fa 2f             	cmp    dl,0x2f
c000f284:	74 f7                	je     c000f27d <standardiseFiles(char*, char const*, char const*)+0x113>
c000f286:	80 fa 5c             	cmp    dl,0x5c
c000f289:	74 f2                	je     c000f27d <standardiseFiles(char*, char const*, char const*)+0x113>
c000f28b:	48                   	dec    eax
c000f28c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f290:	75 06                	jne    c000f298 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f292:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f296:	eb f3                	jmp    c000f28b <standardiseFiles(char*, char const*, char const*)+0x121>
c000f298:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f29c:	74 07                	je     c000f2a5 <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f29e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f2a2:	48                   	dec    eax
c000f2a3:	eb f3                	jmp    c000f298 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f2a5:	40                   	inc    eax
c000f2a6:	eb 9a                	jmp    c000f242 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f2a8:	80 fa 2f             	cmp    dl,0x2f
c000f2ab:	74 95                	je     c000f242 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f2ad:	80 fa 5c             	cmp    dl,0x5c
c000f2b0:	74 90                	je     c000f242 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f2b2:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f2b5:	40                   	inc    eax
c000f2b6:	eb 8a                	jmp    c000f242 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f2b8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f2bc:	83 ec 0c             	sub    esp,0xc
c000f2bf:	53                   	push   ebx
c000f2c0:	e8 60 13 ff ff       	call   c0000625 <strlen>
c000f2c5:	83 c4 10             	add    esp,0x10
c000f2c8:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f2cd:	75 26                	jne    c000f2f5 <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f2cf:	83 ec 0c             	sub    esp,0xc
c000f2d2:	53                   	push   ebx
c000f2d3:	e8 4d 13 ff ff       	call   c0000625 <strlen>
c000f2d8:	83 c4 10             	add    esp,0x10
c000f2db:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f2e0:	74 26                	je     c000f308 <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f2e2:	83 ec 0c             	sub    esp,0xc
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 3a 13 ff ff       	call   c0000625 <strlen>
c000f2eb:	83 c4 10             	add    esp,0x10
c000f2ee:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f2f3:	eb c7                	jmp    c000f2bc <standardiseFiles(char*, char const*, char const*)+0x152>
c000f2f5:	83 ec 0c             	sub    esp,0xc
c000f2f8:	53                   	push   ebx
c000f2f9:	e8 27 13 ff ff       	call   c0000625 <strlen>
c000f2fe:	83 c4 10             	add    esp,0x10
c000f301:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f306:	74 c7                	je     c000f2cf <standardiseFiles(char*, char const*, char const*)+0x165>
c000f308:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f30e:	5b                   	pop    ebx
c000f30f:	5e                   	pop    esi
c000f310:	5f                   	pop    edi
c000f311:	5d                   	pop    ebp
c000f312:	c3                   	ret    
c000f313:	90                   	nop

c000f314 <File::File(char const*, Process*)>:
c000f314:	83 ec 0c             	sub    esp,0xc
c000f317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f31b:	83 ec 08             	sub    esp,0x8
c000f31e:	6a 00                	push   0x0
c000f320:	50                   	push   eax
c000f321:	e8 fc e5 ff ff       	call   c000d922 <UnixFile::UnixFile(int)>
c000f326:	83 c4 10             	add    esp,0x10
c000f329:	ba 48 08 02 c0       	mov    edx,0xc0020848
c000f32e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f332:	89 10                	mov    DWORD PTR [eax],edx
c000f334:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f338:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f33e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f342:	83 c0 0d             	add    eax,0xd
c000f345:	83 ec 04             	sub    esp,0x4
c000f348:	52                   	push   edx
c000f349:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f34d:	50                   	push   eax
c000f34e:	e8 17 fe ff ff       	call   c000f16a <standardiseFiles(char*, char const*, char const*)>
c000f353:	83 c4 10             	add    esp,0x10
c000f356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f35a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f35d:	8d 50 bf             	lea    edx,[eax-0x41]
c000f360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f364:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f36e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f372:	90                   	nop
c000f373:	83 c4 0c             	add    esp,0xc
c000f376:	c3                   	ret    
c000f377:	90                   	nop

c000f378 <File::open(FileOpenMode)>:
c000f378:	53                   	push   ebx
c000f379:	b8 0b 00 00 00       	mov    eax,0xb
c000f37e:	83 ec 08             	sub    esp,0x8
c000f381:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f385:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f38c:	80 fa 19             	cmp    dl,0x19
c000f38f:	77 40                	ja     c000f3d1 <File::open(FileOpenMode)+0x59>
c000f391:	8b 14 95 80 37 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc880]
c000f398:	85 d2                	test   edx,edx
c000f39a:	74 35                	je     c000f3d1 <File::open(FileOpenMode)+0x59>
c000f39c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f3a2:	85 d2                	test   edx,edx
c000f3a4:	74 2b                	je     c000f3d1 <File::open(FileOpenMode)+0x59>
c000f3a6:	b8 06 00 00 00       	mov    eax,0x6
c000f3ab:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f3af:	75 20                	jne    c000f3d1 <File::open(FileOpenMode)+0x59>
c000f3b1:	8b 02                	mov    eax,DWORD PTR [edx]
c000f3b3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f3b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f3bd:	51                   	push   ecx
c000f3be:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f3c1:	51                   	push   ecx
c000f3c2:	52                   	push   edx
c000f3c3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f3c6:	83 c4 10             	add    esp,0x10
c000f3c9:	85 c0                	test   eax,eax
c000f3cb:	75 04                	jne    c000f3d1 <File::open(FileOpenMode)+0x59>
c000f3cd:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f3d1:	83 c4 08             	add    esp,0x8
c000f3d4:	5b                   	pop    ebx
c000f3d5:	c3                   	ret    

c000f3d6 <File::close()>:
c000f3d6:	53                   	push   ebx
c000f3d7:	b8 0b 00 00 00       	mov    eax,0xb
c000f3dc:	83 ec 08             	sub    esp,0x8
c000f3df:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f3e3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f3ea:	80 fa 19             	cmp    dl,0x19
c000f3ed:	77 41                	ja     c000f430 <File::close()+0x5a>
c000f3ef:	8b 1c 95 80 37 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc880]
c000f3f6:	85 db                	test   ebx,ebx
c000f3f8:	74 36                	je     c000f430 <File::close()+0x5a>
c000f3fa:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f401:	74 2d                	je     c000f430 <File::close()+0x5a>
c000f403:	b8 05 00 00 00       	mov    eax,0x5
c000f408:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f40c:	74 22                	je     c000f430 <File::close()+0x5a>
c000f40e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f412:	8b 04 95 80 37 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc880]
c000f419:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f41f:	53                   	push   ebx
c000f420:	53                   	push   ebx
c000f421:	8b 10                	mov    edx,DWORD PTR [eax]
c000f423:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f429:	50                   	push   eax
c000f42a:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f42d:	83 c4 10             	add    esp,0x10
c000f430:	83 c4 08             	add    esp,0x8
c000f433:	5b                   	pop    ebx
c000f434:	c3                   	ret    
c000f435:	90                   	nop

c000f436 <File::seek(unsigned long long)>:
c000f436:	56                   	push   esi
c000f437:	53                   	push   ebx
c000f438:	b8 0b 00 00 00       	mov    eax,0xb
c000f43d:	51                   	push   ecx
c000f43e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f442:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f446:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f44d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f451:	80 fa 19             	cmp    dl,0x19
c000f454:	77 31                	ja     c000f487 <File::seek(unsigned long long)+0x51>
c000f456:	8b 14 95 80 37 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc880]
c000f45d:	85 d2                	test   edx,edx
c000f45f:	74 26                	je     c000f487 <File::seek(unsigned long long)+0x51>
c000f461:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f467:	85 d2                	test   edx,edx
c000f469:	74 1c                	je     c000f487 <File::seek(unsigned long long)+0x51>
c000f46b:	b8 05 00 00 00       	mov    eax,0x5
c000f470:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f474:	74 11                	je     c000f487 <File::seek(unsigned long long)+0x51>
c000f476:	8b 02                	mov    eax,DWORD PTR [edx]
c000f478:	53                   	push   ebx
c000f479:	51                   	push   ecx
c000f47a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f480:	52                   	push   edx
c000f481:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f484:	83 c4 10             	add    esp,0x10
c000f487:	5a                   	pop    edx
c000f488:	5b                   	pop    ebx
c000f489:	5e                   	pop    esi
c000f48a:	c3                   	ret    
c000f48b:	90                   	nop

c000f48c <File::tell(unsigned long long*)>:
c000f48c:	83 ec 0c             	sub    esp,0xc
c000f48f:	b8 0b 00 00 00       	mov    eax,0xb
c000f494:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f498:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f49f:	80 fa 19             	cmp    dl,0x19
c000f4a2:	77 34                	ja     c000f4d8 <File::tell(unsigned long long*)+0x4c>
c000f4a4:	8b 14 95 80 37 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc880]
c000f4ab:	85 d2                	test   edx,edx
c000f4ad:	74 29                	je     c000f4d8 <File::tell(unsigned long long*)+0x4c>
c000f4af:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f4b5:	85 d2                	test   edx,edx
c000f4b7:	74 1f                	je     c000f4d8 <File::tell(unsigned long long*)+0x4c>
c000f4b9:	b8 05 00 00 00       	mov    eax,0x5
c000f4be:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f4c2:	74 14                	je     c000f4d8 <File::tell(unsigned long long*)+0x4c>
c000f4c4:	50                   	push   eax
c000f4c5:	8b 02                	mov    eax,DWORD PTR [edx]
c000f4c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f4cb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f4d1:	52                   	push   edx
c000f4d2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f4d5:	83 c4 10             	add    esp,0x10
c000f4d8:	83 c4 0c             	add    esp,0xc
c000f4db:	c3                   	ret    

c000f4dc <File::rewind()>:
c000f4dc:	83 ec 10             	sub    esp,0x10
c000f4df:	6a 00                	push   0x0
c000f4e1:	6a 00                	push   0x0
c000f4e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4e7:	e8 4a ff ff ff       	call   c000f436 <File::seek(unsigned long long)>
c000f4ec:	83 c4 1c             	add    esp,0x1c
c000f4ef:	c3                   	ret    

c000f4f0 <File::unlink()>:
c000f4f0:	83 ec 0c             	sub    esp,0xc
c000f4f3:	b8 0b 00 00 00       	mov    eax,0xb
c000f4f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f4fc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f503:	80 f9 19             	cmp    cl,0x19
c000f506:	77 2f                	ja     c000f537 <File::unlink()+0x47>
c000f508:	8b 0c 8d 80 37 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc880]
c000f50f:	85 c9                	test   ecx,ecx
c000f511:	74 24                	je     c000f537 <File::unlink()+0x47>
c000f513:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f519:	85 c9                	test   ecx,ecx
c000f51b:	74 1a                	je     c000f537 <File::unlink()+0x47>
c000f51d:	b8 06 00 00 00       	mov    eax,0x6
c000f522:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f526:	75 0f                	jne    c000f537 <File::unlink()+0x47>
c000f528:	83 c2 0d             	add    edx,0xd
c000f52b:	50                   	push   eax
c000f52c:	50                   	push   eax
c000f52d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f52f:	52                   	push   edx
c000f530:	51                   	push   ecx
c000f531:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f534:	83 c4 10             	add    esp,0x10
c000f537:	83 c4 0c             	add    esp,0xc
c000f53a:	c3                   	ret    
c000f53b:	90                   	nop

c000f53c <File::rename(char const*)>:
c000f53c:	83 ec 0c             	sub    esp,0xc
c000f53f:	b8 0b 00 00 00       	mov    eax,0xb
c000f544:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f548:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f54f:	80 f9 19             	cmp    cl,0x19
c000f552:	77 32                	ja     c000f586 <File::rename(char const*)+0x4a>
c000f554:	8b 0c 8d 80 37 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc880]
c000f55b:	85 c9                	test   ecx,ecx
c000f55d:	74 27                	je     c000f586 <File::rename(char const*)+0x4a>
c000f55f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f565:	85 c9                	test   ecx,ecx
c000f567:	74 1d                	je     c000f586 <File::rename(char const*)+0x4a>
c000f569:	b8 06 00 00 00       	mov    eax,0x6
c000f56e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f572:	75 12                	jne    c000f586 <File::rename(char const*)+0x4a>
c000f574:	83 c2 0d             	add    edx,0xd
c000f577:	50                   	push   eax
c000f578:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f57a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f57e:	52                   	push   edx
c000f57f:	51                   	push   ecx
c000f580:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f583:	83 c4 10             	add    esp,0x10
c000f586:	83 c4 0c             	add    esp,0xc
c000f589:	c3                   	ret    

c000f58a <File::chfatattr(unsigned char, unsigned char)>:
c000f58a:	57                   	push   edi
c000f58b:	b8 0b 00 00 00       	mov    eax,0xb
c000f590:	56                   	push   esi
c000f591:	53                   	push   ebx
c000f592:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f596:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f59a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f5a1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f5a5:	80 f9 19             	cmp    cl,0x19
c000f5a8:	77 37                	ja     c000f5e1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f5aa:	8b 0c 8d 80 37 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc880]
c000f5b1:	85 c9                	test   ecx,ecx
c000f5b3:	74 2c                	je     c000f5e1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f5b5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f5bb:	85 c9                	test   ecx,ecx
c000f5bd:	74 22                	je     c000f5e1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f5bf:	b8 06 00 00 00       	mov    eax,0x6
c000f5c4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f5c8:	75 17                	jne    c000f5e1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f5ca:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f5cc:	89 f0                	mov    eax,esi
c000f5ce:	83 c2 0d             	add    edx,0xd
c000f5d1:	0f b6 f0             	movzx  esi,al
c000f5d4:	0f b6 db             	movzx  ebx,bl
c000f5d7:	56                   	push   esi
c000f5d8:	53                   	push   ebx
c000f5d9:	52                   	push   edx
c000f5da:	51                   	push   ecx
c000f5db:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000f5de:	83 c4 10             	add    esp,0x10
c000f5e1:	5b                   	pop    ebx
c000f5e2:	5e                   	pop    esi
c000f5e3:	5f                   	pop    edi
c000f5e4:	c3                   	ret    
c000f5e5:	90                   	nop

c000f5e6 <File::exists()>:
c000f5e6:	83 ec 0c             	sub    esp,0xc
c000f5e9:	31 c0                	xor    eax,eax
c000f5eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f5ef:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f5f6:	80 f9 19             	cmp    cl,0x19
c000f5f9:	77 24                	ja     c000f61f <File::exists()+0x39>
c000f5fb:	8b 0c 8d 80 37 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc880]
c000f602:	85 c9                	test   ecx,ecx
c000f604:	74 19                	je     c000f61f <File::exists()+0x39>
c000f606:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f60c:	85 c9                	test   ecx,ecx
c000f60e:	74 0f                	je     c000f61f <File::exists()+0x39>
c000f610:	83 c2 0d             	add    edx,0xd
c000f613:	50                   	push   eax
c000f614:	50                   	push   eax
c000f615:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f617:	52                   	push   edx
c000f618:	51                   	push   ecx
c000f619:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f61c:	83 c4 10             	add    esp,0x10
c000f61f:	83 c4 0c             	add    esp,0xc
c000f622:	c3                   	ret    
c000f623:	90                   	nop

c000f624 <File::stat(unsigned long long*, bool*)>:
c000f624:	56                   	push   esi
c000f625:	53                   	push   ebx
c000f626:	50                   	push   eax
c000f627:	b8 0b 00 00 00       	mov    eax,0xb
c000f62c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f630:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f634:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f63b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f63f:	80 f9 19             	cmp    cl,0x19
c000f642:	77 3d                	ja     c000f681 <File::stat(unsigned long long*, bool*)+0x5d>
c000f644:	8b 0c 8d 80 37 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc880]
c000f64b:	85 c9                	test   ecx,ecx
c000f64d:	74 32                	je     c000f681 <File::stat(unsigned long long*, bool*)+0x5d>
c000f64f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f655:	85 c9                	test   ecx,ecx
c000f657:	74 28                	je     c000f681 <File::stat(unsigned long long*, bool*)+0x5d>
c000f659:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f65b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f65f:	74 13                	je     c000f674 <File::stat(unsigned long long*, bool*)+0x50>
c000f661:	83 ec 04             	sub    esp,0x4
c000f664:	56                   	push   esi
c000f665:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000f66b:	51                   	push   ecx
c000f66c:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000f66f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000f672:	eb 0a                	jmp    c000f67e <File::stat(unsigned long long*, bool*)+0x5a>
c000f674:	53                   	push   ebx
c000f675:	83 c2 0d             	add    edx,0xd
c000f678:	56                   	push   esi
c000f679:	52                   	push   edx
c000f67a:	51                   	push   ecx
c000f67b:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000f67e:	83 c4 10             	add    esp,0x10
c000f681:	5a                   	pop    edx
c000f682:	5b                   	pop    ebx
c000f683:	5e                   	pop    esi
c000f684:	c3                   	ret    

c000f685 <getcwd(Process*, char*, int)>:
c000f685:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f689:	31 c0                	xor    eax,eax
c000f68b:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000f68e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000f692:	7d 15                	jge    c000f6a9 <getcwd(Process*, char*, int)+0x24>
c000f694:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f698:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000f69f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000f6a2:	84 c9                	test   cl,cl
c000f6a4:	74 06                	je     c000f6ac <getcwd(Process*, char*, int)+0x27>
c000f6a6:	40                   	inc    eax
c000f6a7:	eb e2                	jmp    c000f68b <getcwd(Process*, char*, int)+0x6>
c000f6a9:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000f6ac:	31 c0                	xor    eax,eax
c000f6ae:	c3                   	ret    

c000f6af <setcwd(Process*, char*)>:
c000f6af:	55                   	push   ebp
c000f6b0:	57                   	push   edi
c000f6b1:	56                   	push   esi
c000f6b2:	53                   	push   ebx
c000f6b3:	81 ec 20 02 00 00    	sub    esp,0x220
c000f6b9:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000f6c0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000f6c6:	57                   	push   edi
c000f6c7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000f6ce:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000f6d2:	56                   	push   esi
c000f6d3:	e8 92 fa ff ff       	call   c000f16a <standardiseFiles(char*, char const*, char const*)>
c000f6d8:	89 34 24             	mov    DWORD PTR [esp],esi
c000f6db:	e8 45 0f ff ff       	call   c0000625 <strlen>
c000f6e0:	83 c4 10             	add    esp,0x10
c000f6e3:	83 f8 02             	cmp    eax,0x2
c000f6e6:	77 17                	ja     c000f6ff <setcwd(Process*, char*)+0x50>
c000f6e8:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000f6ed:	83 e8 41             	sub    eax,0x41
c000f6f0:	83 f8 19             	cmp    eax,0x19
c000f6f3:	76 24                	jbe    c000f719 <setcwd(Process*, char*)+0x6a>
c000f6f5:	b8 03 00 00 00       	mov    eax,0x3
c000f6fa:	e9 cb 00 00 00       	jmp    c000f7ca <setcwd(Process*, char*)+0x11b>
c000f6ff:	83 ec 0c             	sub    esp,0xc
c000f702:	56                   	push   esi
c000f703:	e8 1d 0f ff ff       	call   c0000625 <strlen>
c000f708:	83 c4 10             	add    esp,0x10
c000f70b:	83 f8 03             	cmp    eax,0x3
c000f70e:	75 33                	jne    c000f743 <setcwd(Process*, char*)+0x94>
c000f710:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000f715:	75 2c                	jne    c000f743 <setcwd(Process*, char*)+0x94>
c000f717:	eb cf                	jmp    c000f6e8 <setcwd(Process*, char*)+0x39>
c000f719:	8b 14 85 80 37 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc880]
c000f720:	b8 05 00 00 00       	mov    eax,0x5
c000f725:	85 d2                	test   edx,edx
c000f727:	0f 84 9d 00 00 00    	je     c000f7ca <setcwd(Process*, char*)+0x11b>
c000f72d:	b8 06 00 00 00       	mov    eax,0x6
c000f732:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000f739:	0f 84 8b 00 00 00    	je     c000f7ca <setcwd(Process*, char*)+0x11b>
c000f73f:	51                   	push   ecx
c000f740:	51                   	push   ecx
c000f741:	eb 7b                	jmp    c000f7be <setcwd(Process*, char*)+0x10f>
c000f743:	83 ec 0c             	sub    esp,0xc
c000f746:	68 14 01 00 00       	push   0x114
c000f74b:	e8 a6 f5 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c000f750:	83 c4 0c             	add    esp,0xc
c000f753:	89 c3                	mov    ebx,eax
c000f755:	55                   	push   ebp
c000f756:	56                   	push   esi
c000f757:	50                   	push   eax
c000f758:	e8 b7 fb ff ff       	call   c000f314 <File::File(char const*, Process*)>
c000f75d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000f762:	83 c4 0c             	add    esp,0xc
c000f765:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000f769:	50                   	push   eax
c000f76a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000f76e:	50                   	push   eax
c000f76f:	53                   	push   ebx
c000f770:	e8 af fe ff ff       	call   c000f624 <File::stat(unsigned long long*, bool*)>
c000f775:	83 c4 10             	add    esp,0x10
c000f778:	8b 13                	mov    edx,DWORD PTR [ebx]
c000f77a:	83 f8 02             	cmp    eax,0x2
c000f77d:	75 09                	jne    c000f788 <setcwd(Process*, char*)+0xd9>
c000f77f:	83 ec 0c             	sub    esp,0xc
c000f782:	53                   	push   ebx
c000f783:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f786:	eb 0d                	jmp    c000f795 <setcwd(Process*, char*)+0xe6>
c000f788:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000f78b:	85 c0                	test   eax,eax
c000f78d:	74 10                	je     c000f79f <setcwd(Process*, char*)+0xf0>
c000f78f:	83 ec 0c             	sub    esp,0xc
c000f792:	53                   	push   ebx
c000f793:	ff d2                	call   edx
c000f795:	83 c4 10             	add    esp,0x10
c000f798:	b8 01 00 00 00       	mov    eax,0x1
c000f79d:	eb 2b                	jmp    c000f7ca <setcwd(Process*, char*)+0x11b>
c000f79f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7a4:	75 10                	jne    c000f7b6 <setcwd(Process*, char*)+0x107>
c000f7a6:	83 ec 0c             	sub    esp,0xc
c000f7a9:	53                   	push   ebx
c000f7aa:	ff d2                	call   edx
c000f7ac:	83 c4 10             	add    esp,0x10
c000f7af:	b8 02 00 00 00       	mov    eax,0x2
c000f7b4:	eb 14                	jmp    c000f7ca <setcwd(Process*, char*)+0x11b>
c000f7b6:	83 ec 0c             	sub    esp,0xc
c000f7b9:	53                   	push   ebx
c000f7ba:	ff d2                	call   edx
c000f7bc:	58                   	pop    eax
c000f7bd:	5a                   	pop    edx
c000f7be:	56                   	push   esi
c000f7bf:	57                   	push   edi
c000f7c0:	e8 e2 0e ff ff       	call   c00006a7 <strcpy>
c000f7c5:	83 c4 10             	add    esp,0x10
c000f7c8:	31 c0                	xor    eax,eax
c000f7ca:	81 c4 1c 02 00 00    	add    esp,0x21c
c000f7d0:	5b                   	pop    ebx
c000f7d1:	5e                   	pop    esi
c000f7d2:	5f                   	pop    edi
c000f7d3:	5d                   	pop    ebp
c000f7d4:	c3                   	ret    
c000f7d5:	90                   	nop

c000f7d6 <Directory::Directory(char const*, Process*)>:
c000f7d6:	83 ec 0c             	sub    esp,0xc
c000f7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7dd:	83 ec 08             	sub    esp,0x8
c000f7e0:	6a 00                	push   0x0
c000f7e2:	50                   	push   eax
c000f7e3:	e8 3a e1 ff ff       	call   c000d922 <UnixFile::UnixFile(int)>
c000f7e8:	83 c4 10             	add    esp,0x10
c000f7eb:	ba 64 08 02 c0       	mov    edx,0xc0020864
c000f7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7f4:	89 10                	mov    DWORD PTR [eax],edx
c000f7f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f7fa:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f804:	83 c0 0d             	add    eax,0xd
c000f807:	83 ec 04             	sub    esp,0x4
c000f80a:	52                   	push   edx
c000f80b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f80f:	50                   	push   eax
c000f810:	e8 55 f9 ff ff       	call   c000f16a <standardiseFiles(char*, char const*, char const*)>
c000f815:	83 c4 10             	add    esp,0x10
c000f818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f81c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f81f:	8d 50 bf             	lea    edx,[eax-0x41]
c000f822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f826:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f830:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f834:	90                   	nop
c000f835:	83 c4 0c             	add    esp,0xc
c000f838:	c3                   	ret    
c000f839:	90                   	nop

c000f83a <Directory::open()>:
c000f83a:	53                   	push   ebx
c000f83b:	b8 0b 00 00 00       	mov    eax,0xb
c000f840:	83 ec 08             	sub    esp,0x8
c000f843:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f847:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f84e:	80 fa 19             	cmp    dl,0x19
c000f851:	77 3d                	ja     c000f890 <Directory::open()+0x56>
c000f853:	8b 14 95 80 37 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc880]
c000f85a:	85 d2                	test   edx,edx
c000f85c:	74 32                	je     c000f890 <Directory::open()+0x56>
c000f85e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f864:	85 d2                	test   edx,edx
c000f866:	74 28                	je     c000f890 <Directory::open()+0x56>
c000f868:	b8 06 00 00 00       	mov    eax,0x6
c000f86d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f871:	75 1d                	jne    c000f890 <Directory::open()+0x56>
c000f873:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f879:	50                   	push   eax
c000f87a:	8b 02                	mov    eax,DWORD PTR [edx]
c000f87c:	51                   	push   ecx
c000f87d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f880:	51                   	push   ecx
c000f881:	52                   	push   edx
c000f882:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000f885:	83 c4 10             	add    esp,0x10
c000f888:	85 c0                	test   eax,eax
c000f88a:	75 04                	jne    c000f890 <Directory::open()+0x56>
c000f88c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f890:	83 c4 08             	add    esp,0x8
c000f893:	5b                   	pop    ebx
c000f894:	c3                   	ret    
c000f895:	90                   	nop

c000f896 <Directory::close()>:
c000f896:	53                   	push   ebx
c000f897:	b8 0b 00 00 00       	mov    eax,0xb
c000f89c:	83 ec 08             	sub    esp,0x8
c000f89f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f8a3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f8aa:	80 fa 19             	cmp    dl,0x19
c000f8ad:	77 41                	ja     c000f8f0 <Directory::close()+0x5a>
c000f8af:	8b 1c 95 80 37 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc880]
c000f8b6:	85 db                	test   ebx,ebx
c000f8b8:	74 36                	je     c000f8f0 <Directory::close()+0x5a>
c000f8ba:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f8c1:	74 2d                	je     c000f8f0 <Directory::close()+0x5a>
c000f8c3:	b8 05 00 00 00       	mov    eax,0x5
c000f8c8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f8cc:	74 22                	je     c000f8f0 <Directory::close()+0x5a>
c000f8ce:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f8d2:	8b 04 95 80 37 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc880]
c000f8d9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f8df:	53                   	push   ebx
c000f8e0:	53                   	push   ebx
c000f8e1:	8b 10                	mov    edx,DWORD PTR [eax]
c000f8e3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f8e9:	50                   	push   eax
c000f8ea:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000f8ed:	83 c4 10             	add    esp,0x10
c000f8f0:	83 c4 08             	add    esp,0x8
c000f8f3:	5b                   	pop    ebx
c000f8f4:	c3                   	ret    
c000f8f5:	90                   	nop

c000f8f6 <Directory::unlink()>:
c000f8f6:	83 ec 0c             	sub    esp,0xc
c000f8f9:	b8 0b 00 00 00       	mov    eax,0xb
c000f8fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f902:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f909:	80 f9 19             	cmp    cl,0x19
c000f90c:	77 2f                	ja     c000f93d <Directory::unlink()+0x47>
c000f90e:	8b 0c 8d 80 37 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc880]
c000f915:	85 c9                	test   ecx,ecx
c000f917:	74 24                	je     c000f93d <Directory::unlink()+0x47>
c000f919:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f91f:	85 c9                	test   ecx,ecx
c000f921:	74 1a                	je     c000f93d <Directory::unlink()+0x47>
c000f923:	b8 06 00 00 00       	mov    eax,0x6
c000f928:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f92c:	75 0f                	jne    c000f93d <Directory::unlink()+0x47>
c000f92e:	83 c2 0d             	add    edx,0xd
c000f931:	50                   	push   eax
c000f932:	50                   	push   eax
c000f933:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f935:	52                   	push   edx
c000f936:	51                   	push   ecx
c000f937:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f93a:	83 c4 10             	add    esp,0x10
c000f93d:	83 c4 0c             	add    esp,0xc
c000f940:	c3                   	ret    
c000f941:	90                   	nop

c000f942 <Directory::rename(char const*)>:
c000f942:	83 ec 0c             	sub    esp,0xc
c000f945:	b8 0b 00 00 00       	mov    eax,0xb
c000f94a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f94e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f955:	80 f9 19             	cmp    cl,0x19
c000f958:	77 32                	ja     c000f98c <Directory::rename(char const*)+0x4a>
c000f95a:	8b 0c 8d 80 37 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc880]
c000f961:	85 c9                	test   ecx,ecx
c000f963:	74 27                	je     c000f98c <Directory::rename(char const*)+0x4a>
c000f965:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f96b:	85 c9                	test   ecx,ecx
c000f96d:	74 1d                	je     c000f98c <Directory::rename(char const*)+0x4a>
c000f96f:	b8 06 00 00 00       	mov    eax,0x6
c000f974:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f978:	75 12                	jne    c000f98c <Directory::rename(char const*)+0x4a>
c000f97a:	83 c2 0d             	add    edx,0xd
c000f97d:	50                   	push   eax
c000f97e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f980:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f984:	52                   	push   edx
c000f985:	51                   	push   ecx
c000f986:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f989:	83 c4 10             	add    esp,0x10
c000f98c:	83 c4 0c             	add    esp,0xc
c000f98f:	c3                   	ret    

c000f990 <Directory::exists()>:
c000f990:	83 ec 0c             	sub    esp,0xc
c000f993:	31 c0                	xor    eax,eax
c000f995:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f999:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f9a0:	80 f9 19             	cmp    cl,0x19
c000f9a3:	77 24                	ja     c000f9c9 <Directory::exists()+0x39>
c000f9a5:	8b 0c 8d 80 37 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc880]
c000f9ac:	85 c9                	test   ecx,ecx
c000f9ae:	74 19                	je     c000f9c9 <Directory::exists()+0x39>
c000f9b0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f9b6:	85 c9                	test   ecx,ecx
c000f9b8:	74 0f                	je     c000f9c9 <Directory::exists()+0x39>
c000f9ba:	83 c2 0d             	add    edx,0xd
c000f9bd:	50                   	push   eax
c000f9be:	50                   	push   eax
c000f9bf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f9c1:	52                   	push   edx
c000f9c2:	51                   	push   ecx
c000f9c3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f9c6:	83 c4 10             	add    esp,0x10
c000f9c9:	83 c4 0c             	add    esp,0xc
c000f9cc:	c3                   	ret    
c000f9cd:	90                   	nop

c000f9ce <Directory::read(dirent*)>:
c000f9ce:	83 ec 1c             	sub    esp,0x1c
c000f9d1:	b8 0b 00 00 00       	mov    eax,0xb
c000f9d6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f9da:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f9e1:	80 fa 19             	cmp    dl,0x19
c000f9e4:	77 30                	ja     c000fa16 <Directory::read(dirent*)+0x48>
c000f9e6:	8b 14 95 80 37 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc880]
c000f9ed:	85 d2                	test   edx,edx
c000f9ef:	74 25                	je     c000fa16 <Directory::read(dirent*)+0x48>
c000f9f1:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000f9f8:	74 1c                	je     c000fa16 <Directory::read(dirent*)+0x48>
c000f9fa:	83 ec 0c             	sub    esp,0xc
c000f9fd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f9ff:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fa03:	52                   	push   edx
c000fa04:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fa08:	6a 00                	push   0x0
c000fa0a:	68 10 01 00 00       	push   0x110
c000fa0f:	51                   	push   ecx
c000fa10:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fa13:	83 c4 20             	add    esp,0x20
c000fa16:	83 c4 1c             	add    esp,0x1c
c000fa19:	c3                   	ret    

c000fa1a <Directory::create()>:
c000fa1a:	83 ec 0c             	sub    esp,0xc
c000fa1d:	b8 0b 00 00 00       	mov    eax,0xb
c000fa22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fa26:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fa2d:	80 f9 19             	cmp    cl,0x19
c000fa30:	77 2f                	ja     c000fa61 <Directory::create()+0x47>
c000fa32:	8b 0c 8d 80 37 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc880]
c000fa39:	85 c9                	test   ecx,ecx
c000fa3b:	74 24                	je     c000fa61 <Directory::create()+0x47>
c000fa3d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fa43:	85 c9                	test   ecx,ecx
c000fa45:	74 1a                	je     c000fa61 <Directory::create()+0x47>
c000fa47:	b8 06 00 00 00       	mov    eax,0x6
c000fa4c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fa50:	75 0f                	jne    c000fa61 <Directory::create()+0x47>
c000fa52:	83 c2 0d             	add    edx,0xd
c000fa55:	50                   	push   eax
c000fa56:	50                   	push   eax
c000fa57:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fa59:	52                   	push   edx
c000fa5a:	51                   	push   ecx
c000fa5b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fa5e:	83 c4 10             	add    esp,0x10
c000fa61:	83 c4 0c             	add    esp,0xc
c000fa64:	c3                   	ret    
c000fa65:	90                   	nop

c000fa66 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fa66:	b8 0a 00 00 00       	mov    eax,0xa
c000fa6b:	c3                   	ret    

c000fa6c <Bus::Bus(char const*)>:
c000fa6c:	83 ec 0c             	sub    esp,0xc
c000fa6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa73:	83 ec 08             	sub    esp,0x8
c000fa76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa7a:	50                   	push   eax
c000fa7b:	e8 60 09 00 00       	call   c00103e0 <Device::Device(char const*)>
c000fa80:	83 c4 10             	add    esp,0x10
c000fa83:	ba 80 08 02 c0       	mov    edx,0xc0020880
c000fa88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa8c:	89 10                	mov    DWORD PTR [eax],edx
c000fa8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa92:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fa9c:	90                   	nop
c000fa9d:	83 c4 0c             	add    esp,0xc
c000faa0:	c3                   	ret    
c000faa1:	90                   	nop

c000faa2 <Bus::~Bus()>:
c000faa2:	83 ec 0c             	sub    esp,0xc
c000faa5:	ba 80 08 02 c0       	mov    edx,0xc0020880
c000faaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000faae:	89 10                	mov    DWORD PTR [eax],edx
c000fab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fab4:	83 ec 0c             	sub    esp,0xc
c000fab7:	50                   	push   eax
c000fab8:	e8 d5 05 00 00       	call   c0010092 <Device::~Device()>
c000fabd:	83 c4 10             	add    esp,0x10
c000fac0:	90                   	nop
c000fac1:	83 c4 0c             	add    esp,0xc
c000fac4:	c3                   	ret    
c000fac5:	90                   	nop

c000fac6 <Bus::~Bus()>:
c000fac6:	83 ec 0c             	sub    esp,0xc
c000fac9:	83 ec 0c             	sub    esp,0xc
c000facc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fad0:	e8 cd ff ff ff       	call   c000faa2 <Bus::~Bus()>
c000fad5:	83 c4 10             	add    esp,0x10
c000fad8:	83 ec 08             	sub    esp,0x8
c000fadb:	68 58 01 00 00       	push   0x158
c000fae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fae4:	e8 1c f2 ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c000fae9:	83 c4 10             	add    esp,0x10
c000faec:	83 c4 0c             	add    esp,0xc
c000faef:	c3                   	ret    

c000faf0 <Buzzer::Buzzer(char const*)>:
c000faf0:	83 ec 0c             	sub    esp,0xc
c000faf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000faf7:	83 ec 08             	sub    esp,0x8
c000fafa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fafe:	50                   	push   eax
c000faff:	e8 dc 08 00 00       	call   c00103e0 <Device::Device(char const*)>
c000fb04:	83 c4 10             	add    esp,0x10
c000fb07:	ba ac 08 02 c0       	mov    edx,0xc00208ac
c000fb0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb10:	89 10                	mov    DWORD PTR [eax],edx
c000fb12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb16:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000fb20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb24:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000fb2e:	90                   	nop
c000fb2f:	83 c4 0c             	add    esp,0xc
c000fb32:	c3                   	ret    
c000fb33:	90                   	nop

c000fb34 <Buzzer::~Buzzer()>:
c000fb34:	83 ec 0c             	sub    esp,0xc
c000fb37:	ba ac 08 02 c0       	mov    edx,0xc00208ac
c000fb3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb40:	89 10                	mov    DWORD PTR [eax],edx
c000fb42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb46:	83 ec 0c             	sub    esp,0xc
c000fb49:	50                   	push   eax
c000fb4a:	e8 43 05 00 00       	call   c0010092 <Device::~Device()>
c000fb4f:	83 c4 10             	add    esp,0x10
c000fb52:	90                   	nop
c000fb53:	83 c4 0c             	add    esp,0xc
c000fb56:	c3                   	ret    
c000fb57:	90                   	nop

c000fb58 <Buzzer::~Buzzer()>:
c000fb58:	83 ec 0c             	sub    esp,0xc
c000fb5b:	83 ec 0c             	sub    esp,0xc
c000fb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb62:	e8 cd ff ff ff       	call   c000fb34 <Buzzer::~Buzzer()>
c000fb67:	83 c4 10             	add    esp,0x10
c000fb6a:	83 ec 08             	sub    esp,0x8
c000fb6d:	68 5c 01 00 00       	push   0x15c
c000fb72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb76:	e8 8a f1 ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c000fb7b:	83 c4 10             	add    esp,0x10
c000fb7e:	83 c4 0c             	add    esp,0xc
c000fb81:	c3                   	ret    

c000fb82 <Buzzer::stop()>:
c000fb82:	83 ec 14             	sub    esp,0x14
c000fb85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fb89:	8b 10                	mov    edx,DWORD PTR [eax]
c000fb8b:	6a 00                	push   0x0
c000fb8d:	50                   	push   eax
c000fb8e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fb91:	83 c4 1c             	add    esp,0x1c
c000fb94:	c3                   	ret    

c000fb95 <beepThread(void*)>:
c000fb95:	53                   	push   ebx
c000fb96:	83 ec 08             	sub    esp,0x8
c000fb99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb9d:	e8 3a 7c 00 00       	call   c00177dc <unlockScheduler()>
c000fba2:	b8 40 42 0f 00       	mov    eax,0xf4240
c000fba7:	52                   	push   edx
c000fba8:	52                   	push   edx
c000fba9:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000fbaf:	52                   	push   edx
c000fbb0:	50                   	push   eax
c000fbb1:	e8 dd 82 00 00       	call   c0017e93 <nanoSleep(unsigned long long)>
c000fbb6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbb9:	e8 c4 ff ff ff       	call   c000fb82 <Buzzer::stop()>
c000fbbe:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000fbc6:	83 c4 18             	add    esp,0x18
c000fbc9:	5b                   	pop    ebx
c000fbca:	e9 0a 82 00 00       	jmp    c0017dd9 <blockTask(TaskState)>
c000fbcf:	90                   	nop

c000fbd0 <Buzzer::beep(int, int, bool)>:
c000fbd0:	57                   	push   edi
c000fbd1:	56                   	push   esi
c000fbd2:	53                   	push   ebx
c000fbd3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fbd7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fbdb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fbdf:	52                   	push   edx
c000fbe0:	52                   	push   edx
c000fbe1:	8b 06                	mov    eax,DWORD PTR [esi]
c000fbe3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fbe7:	56                   	push   esi
c000fbe8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000fbeb:	83 c4 10             	add    esp,0x10
c000fbee:	89 f8                	mov    eax,edi
c000fbf0:	84 c0                	test   al,al
c000fbf2:	74 1f                	je     c000fc13 <Buzzer::beep(int, int, bool)+0x43>
c000fbf4:	50                   	push   eax
c000fbf5:	50                   	push   eax
c000fbf6:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000fbfc:	99                   	cdq    
c000fbfd:	52                   	push   edx
c000fbfe:	50                   	push   eax
c000fbff:	e8 8f 82 00 00       	call   c0017e93 <nanoSleep(unsigned long long)>
c000fc04:	83 c4 10             	add    esp,0x10
c000fc07:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fc0b:	5b                   	pop    ebx
c000fc0c:	5e                   	pop    esi
c000fc0d:	5f                   	pop    edi
c000fc0e:	e9 6f ff ff ff       	jmp    c000fb82 <Buzzer::stop()>
c000fc13:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000fc19:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c000fc1e:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000fc26:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fc2a:	c7 44 24 14 95 fb 00 c0 	mov    DWORD PTR [esp+0x14],0xc000fb95
c000fc32:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fc36:	5b                   	pop    ebx
c000fc37:	5e                   	pop    esi
c000fc38:	5f                   	pop    edi
c000fc39:	e9 c6 7c 00 00       	jmp    c0017904 <Process::createThread(void (*)(void*), void*, int)>

c000fc3e <loadClockSettings()>:
c000fc3e:	c7 05 ec 32 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc00232ec,0xa
c000fc48:	c6 05 e9 32 02 c0 00 	mov    BYTE PTR ds:0xc00232e9,0x0
c000fc4f:	c6 05 e8 32 02 c0 01 	mov    BYTE PTR ds:0xc00232e8,0x1
c000fc56:	c3                   	ret    
c000fc57:	90                   	nop

c000fc58 <Clock::Clock(char const*)>:
c000fc58:	83 ec 0c             	sub    esp,0xc
c000fc5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc5f:	83 ec 08             	sub    esp,0x8
c000fc62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc66:	50                   	push   eax
c000fc67:	e8 74 07 00 00       	call   c00103e0 <Device::Device(char const*)>
c000fc6c:	83 c4 10             	add    esp,0x10
c000fc6f:	ba dc 08 02 c0       	mov    edx,0xc00208dc
c000fc74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc78:	89 10                	mov    DWORD PTR [eax],edx
c000fc7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc7e:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000fc88:	90                   	nop
c000fc89:	83 c4 0c             	add    esp,0xc
c000fc8c:	c3                   	ret    
c000fc8d:	90                   	nop

c000fc8e <Clock::~Clock()>:
c000fc8e:	83 ec 0c             	sub    esp,0xc
c000fc91:	ba dc 08 02 c0       	mov    edx,0xc00208dc
c000fc96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc9a:	89 10                	mov    DWORD PTR [eax],edx
c000fc9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fca0:	83 ec 0c             	sub    esp,0xc
c000fca3:	50                   	push   eax
c000fca4:	e8 e9 03 00 00       	call   c0010092 <Device::~Device()>
c000fca9:	83 c4 10             	add    esp,0x10
c000fcac:	90                   	nop
c000fcad:	83 c4 0c             	add    esp,0xc
c000fcb0:	c3                   	ret    
c000fcb1:	90                   	nop

c000fcb2 <Clock::~Clock()>:
c000fcb2:	83 ec 0c             	sub    esp,0xc
c000fcb5:	83 ec 0c             	sub    esp,0xc
c000fcb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcbc:	e8 cd ff ff ff       	call   c000fc8e <Clock::~Clock()>
c000fcc1:	83 c4 10             	add    esp,0x10
c000fcc4:	83 ec 08             	sub    esp,0x8
c000fcc7:	68 58 01 00 00       	push   0x158
c000fccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcd0:	e8 30 f0 ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c000fcd5:	83 c4 10             	add    esp,0x10
c000fcd8:	83 c4 0c             	add    esp,0xc
c000fcdb:	c3                   	ret    

c000fcdc <Clock::timeInSecondsLocal()>:
c000fcdc:	53                   	push   ebx
c000fcdd:	83 ec 14             	sub    esp,0x14
c000fce0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fce4:	8b 10                	mov    edx,DWORD PTR [eax]
c000fce6:	50                   	push   eax
c000fce7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fcea:	0f b6 0d e8 32 02 c0 	movzx  ecx,BYTE PTR ds:0xc00232e8
c000fcf1:	03 0d ec 32 02 c0    	add    ecx,DWORD PTR ds:0xc00232ec
c000fcf7:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000fcfd:	89 cb                	mov    ebx,ecx
c000fcff:	c1 fb 1f             	sar    ebx,0x1f
c000fd02:	01 c8                	add    eax,ecx
c000fd04:	11 da                	adc    edx,ebx
c000fd06:	83 c4 10             	add    esp,0x10
c000fd09:	31 c9                	xor    ecx,ecx
c000fd0b:	80 3d e9 32 02 c0 00 	cmp    BYTE PTR ds:0xc00232e9,0x0
c000fd12:	74 05                	je     c000fd19 <Clock::timeInSecondsLocal()+0x3d>
c000fd14:	b9 08 07 00 00       	mov    ecx,0x708
c000fd19:	31 db                	xor    ebx,ebx
c000fd1b:	01 c8                	add    eax,ecx
c000fd1d:	11 da                	adc    edx,ebx
c000fd1f:	83 c4 08             	add    esp,0x8
c000fd22:	5b                   	pop    ebx
c000fd23:	c3                   	ret    

c000fd24 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000fd24:	57                   	push   edi
c000fd25:	56                   	push   esi
c000fd26:	53                   	push   ebx
c000fd27:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fd2b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fd2f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd31:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fd35:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000fd38:	0f b6 05 e8 32 02 c0 	movzx  eax,BYTE PTR ds:0xc00232e8
c000fd3f:	03 05 ec 32 02 c0    	add    eax,DWORD PTR ds:0xc00232ec
c000fd45:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000fd4b:	99                   	cdq    
c000fd4c:	29 c6                	sub    esi,eax
c000fd4e:	19 d7                	sbb    edi,edx
c000fd50:	89 f0                	mov    eax,esi
c000fd52:	89 fa                	mov    edx,edi
c000fd54:	31 f6                	xor    esi,esi
c000fd56:	80 3d e9 32 02 c0 00 	cmp    BYTE PTR ds:0xc00232e9,0x0
c000fd5d:	74 05                	je     c000fd64 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000fd5f:	be 08 07 00 00       	mov    esi,0x708
c000fd64:	31 ff                	xor    edi,edi
c000fd66:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000fd6a:	29 f0                	sub    eax,esi
c000fd6c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000fd70:	19 fa                	sbb    edx,edi
c000fd72:	89 d8                	mov    eax,ebx
c000fd74:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000fd78:	5b                   	pop    ebx
c000fd79:	5e                   	pop    esi
c000fd7a:	5f                   	pop    edi
c000fd7b:	ff e0                	jmp    eax

c000fd7d <datetimeToSeconds(datetime_t)>:
c000fd7d:	55                   	push   ebp
c000fd7e:	57                   	push   edi
c000fd7f:	56                   	push   esi
c000fd80:	53                   	push   ebx
c000fd81:	83 ec 14             	sub    esp,0x14
c000fd84:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000fd88:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fd8c:	89 d3                	mov    ebx,edx
c000fd8e:	0f b6 c6             	movzx  eax,dh
c000fd91:	c1 eb 10             	shr    ebx,0x10
c000fd94:	48                   	dec    eax
c000fd95:	66 81 eb 6c 07       	sub    bx,0x76c
c000fd9a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000fd9e:	0f b6 f5             	movzx  esi,ch
c000fda1:	89 cf                	mov    edi,ecx
c000fda3:	6b f6 3c             	imul   esi,esi,0x3c
c000fda6:	c1 ef 10             	shr    edi,0x10
c000fda9:	0f b6 c9             	movzx  ecx,cl
c000fdac:	89 f8                	mov    eax,edi
c000fdae:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000fdb4:	0f b6 f8             	movzx  edi,al
c000fdb7:	0f b6 d2             	movzx  edx,dl
c000fdba:	01 fe                	add    esi,edi
c000fdbc:	01 f1                	add    ecx,esi
c000fdbe:	0f b7 f3             	movzx  esi,bx
c000fdc1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000fdc5:	c1 f9 1f             	sar    ecx,0x1f
c000fdc8:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000fdcd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000fdd1:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000fdd6:	8b 0c 8d 20 09 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdf6e0]
c000fddd:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000fde1:	76 29                	jbe    c000fe0c <datetimeToSeconds(datetime_t)+0x8f>
c000fde3:	f6 c3 03             	test   bl,0x3
c000fde6:	75 24                	jne    c000fe0c <datetimeToSeconds(datetime_t)+0x8f>
c000fde8:	31 d2                	xor    edx,edx
c000fdea:	bf 64 00 00 00       	mov    edi,0x64
c000fdef:	89 d8                	mov    eax,ebx
c000fdf1:	66 f7 f7             	div    di
c000fdf4:	66 85 d2             	test   dx,dx
c000fdf7:	75 12                	jne    c000fe0b <datetimeToSeconds(datetime_t)+0x8e>
c000fdf9:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000fdff:	bf 90 01 00 00       	mov    edi,0x190
c000fe04:	99                   	cdq    
c000fe05:	f7 ff                	idiv   edi
c000fe07:	85 d2                	test   edx,edx
c000fe09:	75 01                	jne    c000fe0c <datetimeToSeconds(datetime_t)+0x8f>
c000fe0b:	41                   	inc    ecx
c000fe0c:	66 83 fb 46          	cmp    bx,0x46
c000fe10:	76 45                	jbe    c000fe57 <datetimeToSeconds(datetime_t)+0xda>
c000fe12:	bb 46 00 00 00       	mov    ebx,0x46
c000fe17:	bf 64 00 00 00       	mov    edi,0x64
c000fe1c:	bd 90 01 00 00       	mov    ebp,0x190
c000fe21:	b8 6d 01 00 00       	mov    eax,0x16d
c000fe26:	f6 c3 03             	test   bl,0x3
c000fe29:	75 23                	jne    c000fe4e <datetimeToSeconds(datetime_t)+0xd1>
c000fe2b:	89 d8                	mov    eax,ebx
c000fe2d:	99                   	cdq    
c000fe2e:	f7 ff                	idiv   edi
c000fe30:	b8 6e 01 00 00       	mov    eax,0x16e
c000fe35:	85 d2                	test   edx,edx
c000fe37:	75 15                	jne    c000fe4e <datetimeToSeconds(datetime_t)+0xd1>
c000fe39:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000fe3f:	99                   	cdq    
c000fe40:	f7 fd                	idiv   ebp
c000fe42:	83 fa 01             	cmp    edx,0x1
c000fe45:	19 c0                	sbb    eax,eax
c000fe47:	f7 d0                	not    eax
c000fe49:	05 6e 01 00 00       	add    eax,0x16e
c000fe4e:	01 c1                	add    ecx,eax
c000fe50:	43                   	inc    ebx
c000fe51:	39 f3                	cmp    ebx,esi
c000fe53:	7c cc                	jl     c000fe21 <datetimeToSeconds(datetime_t)+0xa4>
c000fe55:	eb 35                	jmp    c000fe8c <datetimeToSeconds(datetime_t)+0x10f>
c000fe57:	74 33                	je     c000fe8c <datetimeToSeconds(datetime_t)+0x10f>
c000fe59:	b8 45 00 00 00       	mov    eax,0x45
c000fe5e:	89 c2                	mov    edx,eax
c000fe60:	83 e2 03             	and    edx,0x3
c000fe63:	39 f0                	cmp    eax,esi
c000fe65:	7e 0f                	jle    c000fe76 <datetimeToSeconds(datetime_t)+0xf9>
c000fe67:	83 fa 01             	cmp    edx,0x1
c000fe6a:	19 d2                	sbb    edx,edx
c000fe6c:	48                   	dec    eax
c000fe6d:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000fe74:	eb e8                	jmp    c000fe5e <datetimeToSeconds(datetime_t)+0xe1>
c000fe76:	b8 6d 01 00 00       	mov    eax,0x16d
c000fe7b:	85 d2                	test   edx,edx
c000fe7d:	75 0b                	jne    c000fe8a <datetimeToSeconds(datetime_t)+0x10d>
c000fe7f:	66 83 fb 01          	cmp    bx,0x1
c000fe83:	19 c0                	sbb    eax,eax
c000fe85:	05 6e 01 00 00       	add    eax,0x16e
c000fe8a:	29 c1                	sub    ecx,eax
c000fe8c:	b8 80 51 01 00       	mov    eax,0x15180
c000fe91:	f7 e9                	imul   ecx
c000fe93:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fe97:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000fe9b:	83 c4 14             	add    esp,0x14
c000fe9e:	5b                   	pop    ebx
c000fe9f:	5e                   	pop    esi
c000fea0:	5f                   	pop    edi
c000fea1:	5d                   	pop    ebp
c000fea2:	c3                   	ret    
c000fea3:	90                   	nop

c000fea4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000fea4:	57                   	push   edi
c000fea5:	56                   	push   esi
c000fea6:	53                   	push   ebx
c000fea7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000feab:	8b 06                	mov    eax,DWORD PTR [esi]
c000fead:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000feb0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000feb4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000feb8:	e8 c0 fe ff ff       	call   c000fd7d <datetimeToSeconds(datetime_t)>
c000febd:	59                   	pop    ecx
c000febe:	0f b6 0d e8 32 02 c0 	movzx  ecx,BYTE PTR ds:0xc00232e8
c000fec5:	5b                   	pop    ebx
c000fec6:	03 0d ec 32 02 c0    	add    ecx,DWORD PTR ds:0xc00232ec
c000fecc:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000fed2:	89 cb                	mov    ebx,ecx
c000fed4:	c1 fb 1f             	sar    ebx,0x1f
c000fed7:	29 c8                	sub    eax,ecx
c000fed9:	19 da                	sbb    edx,ebx
c000fedb:	31 c9                	xor    ecx,ecx
c000fedd:	80 3d e9 32 02 c0 00 	cmp    BYTE PTR ds:0xc00232e9,0x0
c000fee4:	74 05                	je     c000feeb <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000fee6:	b9 08 07 00 00       	mov    ecx,0x708
c000feeb:	31 db                	xor    ebx,ebx
c000feed:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fef1:	29 c8                	sub    eax,ecx
c000fef3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000fef7:	19 da                	sbb    edx,ebx
c000fef9:	89 f8                	mov    eax,edi
c000fefb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000feff:	5b                   	pop    ebx
c000ff00:	5e                   	pop    esi
c000ff01:	5f                   	pop    edi
c000ff02:	ff e0                	jmp    eax

c000ff04 <secondsToDatetime(unsigned long long)>:
c000ff04:	55                   	push   ebp
c000ff05:	57                   	push   edi
c000ff06:	56                   	push   esi
c000ff07:	53                   	push   ebx
c000ff08:	83 ec 1c             	sub    esp,0x1c
c000ff0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ff0f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ff13:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000ff17:	6a 00                	push   0x0
c000ff19:	68 80 51 01 00       	push   0x15180
c000ff1e:	55                   	push   ebp
c000ff1f:	57                   	push   edi
c000ff20:	e8 57 e4 00 00       	call   c001e37c <__udivdi3>
c000ff25:	83 c4 10             	add    esp,0x10
c000ff28:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000ff2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ff32:	6a 00                	push   0x0
c000ff34:	68 80 51 01 00       	push   0x15180
c000ff39:	55                   	push   ebp
c000ff3a:	57                   	push   edi
c000ff3b:	bf 10 0e 00 00       	mov    edi,0xe10
c000ff40:	e8 37 e5 00 00       	call   c001e47c <__umoddi3>
c000ff45:	83 c4 10             	add    esp,0x10
c000ff48:	99                   	cdq    
c000ff49:	f7 ff                	idiv   edi
c000ff4b:	bf 3c 00 00 00       	mov    edi,0x3c
c000ff50:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000ff53:	89 d0                	mov    eax,edx
c000ff55:	99                   	cdq    
c000ff56:	f7 ff                	idiv   edi
c000ff58:	85 db                	test   ebx,ebx
c000ff5a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000ff5d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000ff60:	79 11                	jns    c000ff73 <secondsToDatetime(unsigned long long)+0x6f>
c000ff62:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ff66:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000ff6c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000ff71:	eb 07                	jmp    c000ff7a <secondsToDatetime(unsigned long long)+0x76>
c000ff73:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000ff78:	89 d8                	mov    eax,ebx
c000ff7a:	bf b4 05 00 00       	mov    edi,0x5b4
c000ff7f:	99                   	cdq    
c000ff80:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000ff85:	f7 f9                	idiv   ecx
c000ff87:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000ff8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ff90:	31 d2                	xor    edx,edx
c000ff92:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000ff9a:	01 c3                	add    ebx,eax
c000ff9c:	89 d8                	mov    eax,ebx
c000ff9e:	f7 f1                	div    ecx
c000ffa0:	31 d2                	xor    edx,edx
c000ffa2:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000ffa5:	89 d8                	mov    eax,ebx
c000ffa7:	f7 f7                	div    edi
c000ffa9:	31 d2                	xor    edx,edx
c000ffab:	29 c1                	sub    ecx,eax
c000ffad:	89 d8                	mov    eax,ebx
c000ffaf:	f7 f5                	div    ebp
c000ffb1:	bd 6d 01 00 00       	mov    ebp,0x16d
c000ffb6:	29 c1                	sub    ecx,eax
c000ffb8:	31 d2                	xor    edx,edx
c000ffba:	89 c8                	mov    eax,ecx
c000ffbc:	f7 f5                	div    ebp
c000ffbe:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000ffc3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ffc7:	31 d2                	xor    edx,edx
c000ffc9:	89 c8                	mov    eax,ecx
c000ffcb:	f7 f5                	div    ebp
c000ffcd:	31 d2                	xor    edx,edx
c000ffcf:	01 c3                	add    ebx,eax
c000ffd1:	89 c8                	mov    eax,ecx
c000ffd3:	f7 f7                	div    edi
c000ffd5:	bf 99 00 00 00       	mov    edi,0x99
c000ffda:	29 c3                	sub    ebx,eax
c000ffdc:	31 d2                	xor    edx,edx
c000ffde:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000ffe6:	29 c3                	sub    ebx,eax
c000ffe8:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ffeb:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000ffee:	bb 05 00 00 00       	mov    ebx,0x5
c000fff3:	83 c1 02             	add    ecx,0x2
c000fff6:	89 c8                	mov    eax,ecx
c000fff8:	f7 f7                	div    edi
c000fffa:	31 d2                	xor    edx,edx
c000fffc:	89 c7                	mov    edi,eax
c000fffe:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0010004:	83 c0 02             	add    eax,0x2
c0010007:	f7 f3                	div    ebx
c0010009:	89 eb                	mov    ebx,ebp
c001000b:	29 c3                	sub    ebx,eax
c001000d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0010013:	88 1e                	mov    BYTE PTR [esi],bl
c0010015:	19 c0                	sbb    eax,eax
c0010017:	31 d2                	xor    edx,edx
c0010019:	83 e0 0c             	and    eax,0xc
c001001c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0010020:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0010028:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001002c:	83 f9 01             	cmp    ecx,0x1
c001002f:	0f 96 c2             	setbe  dl
c0010032:	41                   	inc    ecx
c0010033:	01 d0                	add    eax,edx
c0010035:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0010038:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001003c:	83 c4 1c             	add    esp,0x1c
c001003f:	89 f0                	mov    eax,esi
c0010041:	5b                   	pop    ebx
c0010042:	5e                   	pop    esi
c0010043:	5f                   	pop    edi
c0010044:	5d                   	pop    ebp
c0010045:	c2 04 00             	ret    0x4

c0010048 <Clock::timeInDatetimeLocal()>:
c0010048:	53                   	push   ebx
c0010049:	83 ec 14             	sub    esp,0x14
c001004c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010050:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010054:	e8 83 fc ff ff       	call   c000fcdc <Clock::timeInSecondsLocal()>
c0010059:	83 c4 0c             	add    esp,0xc
c001005c:	52                   	push   edx
c001005d:	50                   	push   eax
c001005e:	53                   	push   ebx
c001005f:	e8 a0 fe ff ff       	call   c000ff04 <secondsToDatetime(unsigned long long)>
c0010064:	89 d8                	mov    eax,ebx
c0010066:	83 c4 14             	add    esp,0x14
c0010069:	5b                   	pop    ebx
c001006a:	c2 04 00             	ret    0x4
c001006d:	90                   	nop

c001006e <Device::hibernate()>:
c001006e:	c3                   	ret    
c001006f:	90                   	nop

c0010070 <Device::wake()>:
c0010070:	c3                   	ret    
c0010071:	90                   	nop

c0010072 <Device::detect()>:
c0010072:	c3                   	ret    
c0010073:	90                   	nop

c0010074 <Device::disableLegacy()>:
c0010074:	c3                   	ret    
c0010075:	90                   	nop

c0010076 <Device::powerSaving(PowerSavingLevel)>:
c0010076:	c3                   	ret    
c0010077:	90                   	nop

c0010078 <DriverlessDevice::close(int, int, void*)>:
c0010078:	31 c0                	xor    eax,eax
c001007a:	c3                   	ret    
c001007b:	90                   	nop

c001007c <DriverlessDevice::detect()>:
c001007c:	c3                   	ret    
c001007d:	90                   	nop

c001007e <DriverlessDevice::open(int, int, void*)>:
c001007e:	83 ec 18             	sub    esp,0x18
c0010081:	68 50 09 02 c0       	push   0xc0020950
c0010086:	e8 ef 49 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c001008b:	83 c8 ff             	or     eax,0xffffffff
c001008e:	83 c4 1c             	add    esp,0x1c
c0010091:	c3                   	ret    

c0010092 <Device::~Device()>:
c0010092:	ba 78 09 02 c0       	mov    edx,0xc0020978
c0010097:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001009b:	89 10                	mov    DWORD PTR [eax],edx
c001009d:	90                   	nop
c001009e:	c3                   	ret    
c001009f:	90                   	nop

c00100a0 <Device::~Device()>:
c00100a0:	83 ec 0c             	sub    esp,0xc
c00100a3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00100a7:	e8 e6 ff ff ff       	call   c0010092 <Device::~Device()>
c00100ac:	83 c4 04             	add    esp,0x4
c00100af:	83 ec 08             	sub    esp,0x8
c00100b2:	68 58 01 00 00       	push   0x158
c00100b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100bb:	e8 45 ec ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c00100c0:	83 c4 10             	add    esp,0x10
c00100c3:	83 c4 0c             	add    esp,0xc
c00100c6:	c3                   	ret    
c00100c7:	90                   	nop

c00100c8 <Device::findAndLoadDriver()>:
c00100c8:	c3                   	ret    
c00100c9:	90                   	nop

c00100ca <Device::preOpenPCI(PCIDeviceInfo)>:
c00100ca:	57                   	push   edi
c00100cb:	b9 09 00 00 00       	mov    ecx,0x9
c00100d0:	56                   	push   esi
c00100d1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00100d5:	8d 74 24 10          	lea    esi,[esp+0x10]
c00100d9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00100e3:	81 c7 18 01 00 00    	add    edi,0x118
c00100e9:	fc                   	cld    
c00100ea:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00100ec:	5e                   	pop    esi
c00100ed:	5f                   	pop    edi
c00100ee:	c3                   	ret    
c00100ef:	90                   	nop

c00100f0 <Device::preOpenACPI(void*, char*, char*)>:
c00100f0:	56                   	push   esi
c00100f1:	53                   	push   ebx
c00100f2:	83 ec 08             	sub    esp,0x8
c00100f5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00100f9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00100fd:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0010107:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001010b:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0010111:	6a 1e                	push   0x1e
c0010113:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0010119:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001011d:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0010123:	50                   	push   eax
c0010124:	e8 a9 04 ff ff       	call   c00005d2 <memcpy>
c0010129:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001012d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010131:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0010139:	83 c4 14             	add    esp,0x14
c001013c:	5b                   	pop    ebx
c001013d:	5e                   	pop    esi
c001013e:	e9 8f 04 ff ff       	jmp    c00005d2 <memcpy>
c0010143:	90                   	nop

c0010144 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010144:	55                   	push   ebp
c0010145:	57                   	push   edi
c0010146:	56                   	push   esi
c0010147:	53                   	push   ebx
c0010148:	83 ec 0c             	sub    esp,0xc
c001014b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001014f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010153:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010157:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001015b:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c0010160:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0010167:	75 0b                	jne    c0010174 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c0010169:	8b 00                	mov    eax,DWORD PTR [eax]
c001016b:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001016f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010172:	eb 24                	jmp    c0010198 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c0010174:	e8 fb 3b 00 00       	call   c0013d74 <thisCPU()>
c0010179:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001017f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010181:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0010185:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0010189:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c001018d:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010191:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010195:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0010198:	83 c4 0c             	add    esp,0xc
c001019b:	5b                   	pop    ebx
c001019c:	5e                   	pop    esi
c001019d:	5f                   	pop    edi
c001019e:	5d                   	pop    ebp
c001019f:	ff e0                	jmp    eax
c00101a1:	90                   	nop

c00101a2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00101a2:	57                   	push   edi
c00101a3:	56                   	push   esi
c00101a4:	53                   	push   ebx
c00101a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101a9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00101ad:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00101b1:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00101b6:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00101bd:	75 0b                	jne    c00101ca <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c00101bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00101c1:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00101c5:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00101c8:	eb 20                	jmp    c00101ea <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c00101ca:	e8 a5 3b 00 00       	call   c0013d74 <thisCPU()>
c00101cf:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00101d5:	8b 10                	mov    edx,DWORD PTR [eax]
c00101d7:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00101db:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101df:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00101e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00101e7:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c00101ea:	5b                   	pop    ebx
c00101eb:	5e                   	pop    esi
c00101ec:	5f                   	pop    edi
c00101ed:	ff e0                	jmp    eax
c00101ef:	90                   	nop

c00101f0 <Device::addChild(Device*)>:
c00101f0:	53                   	push   ebx
c00101f1:	83 ec 08             	sub    esp,0x8
c00101f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00101f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101fc:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0010202:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0010208:	8b 13                	mov    edx,DWORD PTR [ebx]
c001020a:	85 d2                	test   edx,edx
c001020c:	74 04                	je     c0010212 <Device::addChild(Device*)+0x22>
c001020e:	89 d3                	mov    ebx,edx
c0010210:	eb f6                	jmp    c0010208 <Device::addChild(Device*)+0x18>
c0010212:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010215:	83 ec 0c             	sub    esp,0xc
c0010218:	6a 08                	push   0x8
c001021a:	e8 d7 ea ff ff       	call   c000ecf6 <operator new(unsigned long)>
c001021f:	89 03                	mov    DWORD PTR [ebx],eax
c0010221:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010227:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001022e:	83 c4 18             	add    esp,0x18
c0010231:	5b                   	pop    ebx
c0010232:	c3                   	ret    
c0010233:	90                   	nop

c0010234 <Device::removeAllChildren()>:
c0010234:	56                   	push   esi
c0010235:	53                   	push   ebx
c0010236:	52                   	push   edx
c0010237:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001023b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0010241:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010244:	74 17                	je     c001025d <Device::removeAllChildren()+0x29>
c0010246:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0010249:	85 c0                	test   eax,eax
c001024b:	74 0c                	je     c0010259 <Device::removeAllChildren()+0x25>
c001024d:	83 ec 0c             	sub    esp,0xc
c0010250:	8b 10                	mov    edx,DWORD PTR [eax]
c0010252:	50                   	push   eax
c0010253:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0010256:	83 c4 10             	add    esp,0x10
c0010259:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001025b:	eb e4                	jmp    c0010241 <Device::removeAllChildren()+0xd>
c001025d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0010263:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010269:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001026f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010276:	58                   	pop    eax
c0010277:	5b                   	pop    ebx
c0010278:	5e                   	pop    esi
c0010279:	c3                   	ret    

c001027a <Device::hibernateAll()>:
c001027a:	53                   	push   ebx
c001027b:	83 ec 14             	sub    esp,0x14
c001027e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010282:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010284:	53                   	push   ebx
c0010285:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0010288:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001028e:	83 c4 10             	add    esp,0x10
c0010291:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010294:	74 0f                	je     c00102a5 <Device::hibernateAll()+0x2b>
c0010296:	83 ec 0c             	sub    esp,0xc
c0010299:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001029c:	e8 d9 ff ff ff       	call   c001027a <Device::hibernateAll()>
c00102a1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00102a3:	eb e9                	jmp    c001028e <Device::hibernateAll()+0x14>
c00102a5:	83 c4 08             	add    esp,0x8
c00102a8:	5b                   	pop    ebx
c00102a9:	c3                   	ret    

c00102aa <Device::wakeAll()>:
c00102aa:	53                   	push   ebx
c00102ab:	83 ec 14             	sub    esp,0x14
c00102ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00102b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00102b4:	53                   	push   ebx
c00102b5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00102b8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00102be:	83 c4 10             	add    esp,0x10
c00102c1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00102c4:	74 0f                	je     c00102d5 <Device::wakeAll()+0x2b>
c00102c6:	83 ec 0c             	sub    esp,0xc
c00102c9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00102cc:	e8 d9 ff ff ff       	call   c00102aa <Device::wakeAll()>
c00102d1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00102d3:	eb e9                	jmp    c00102be <Device::wakeAll()+0x14>
c00102d5:	83 c4 08             	add    esp,0x8
c00102d8:	5b                   	pop    ebx
c00102d9:	c3                   	ret    

c00102da <Device::detectAll()>:
c00102da:	53                   	push   ebx
c00102db:	83 ec 14             	sub    esp,0x14
c00102de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00102e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00102e4:	53                   	push   ebx
c00102e5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00102e8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00102ee:	83 c4 10             	add    esp,0x10
c00102f1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00102f4:	74 0f                	je     c0010305 <Device::detectAll()+0x2b>
c00102f6:	83 ec 0c             	sub    esp,0xc
c00102f9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00102fc:	e8 d9 ff ff ff       	call   c00102da <Device::detectAll()>
c0010301:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010303:	eb e9                	jmp    c00102ee <Device::detectAll()+0x14>
c0010305:	83 c4 08             	add    esp,0x8
c0010308:	5b                   	pop    ebx
c0010309:	c3                   	ret    

c001030a <Device::disableLegacyAll()>:
c001030a:	53                   	push   ebx
c001030b:	83 ec 14             	sub    esp,0x14
c001030e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010312:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010314:	53                   	push   ebx
c0010315:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0010318:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001031e:	83 c4 10             	add    esp,0x10
c0010321:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010324:	74 0f                	je     c0010335 <Device::disableLegacyAll()+0x2b>
c0010326:	83 ec 0c             	sub    esp,0xc
c0010329:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001032c:	e8 d9 ff ff ff       	call   c001030a <Device::disableLegacyAll()>
c0010331:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010333:	eb e9                	jmp    c001031e <Device::disableLegacyAll()+0x14>
c0010335:	83 c4 08             	add    esp,0x8
c0010338:	5b                   	pop    ebx
c0010339:	c3                   	ret    

c001033a <Device::loadDriversForAll()>:
c001033a:	53                   	push   ebx
c001033b:	83 ec 08             	sub    esp,0x8
c001033e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010342:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010348:	8b 18                	mov    ebx,DWORD PTR [eax]
c001034a:	85 db                	test   ebx,ebx
c001034c:	74 12                	je     c0010360 <Device::loadDriversForAll()+0x26>
c001034e:	83 ec 0c             	sub    esp,0xc
c0010351:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0010354:	e8 e1 ff ff ff       	call   c001033a <Device::loadDriversForAll()>
c0010359:	83 c4 10             	add    esp,0x10
c001035c:	89 d8                	mov    eax,ebx
c001035e:	eb e8                	jmp    c0010348 <Device::loadDriversForAll()+0xe>
c0010360:	83 c4 08             	add    esp,0x8
c0010363:	5b                   	pop    ebx
c0010364:	c3                   	ret    
c0010365:	90                   	nop

c0010366 <Device::closeAll()>:
c0010366:	53                   	push   ebx
c0010367:	83 ec 08             	sub    esp,0x8
c001036a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001036e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010370:	6a 00                	push   0x0
c0010372:	6a 00                	push   0x0
c0010374:	6a 00                	push   0x0
c0010376:	53                   	push   ebx
c0010377:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001037a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010380:	83 c4 10             	add    esp,0x10
c0010383:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010386:	74 0f                	je     c0010397 <Device::closeAll()+0x31>
c0010388:	83 ec 0c             	sub    esp,0xc
c001038b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001038e:	e8 d3 ff ff ff       	call   c0010366 <Device::closeAll()>
c0010393:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010395:	eb e9                	jmp    c0010380 <Device::closeAll()+0x1a>
c0010397:	83 c4 08             	add    esp,0x8
c001039a:	5b                   	pop    ebx
c001039b:	c3                   	ret    

c001039c <Device::powerSavingAll(PowerSavingLevel)>:
c001039c:	56                   	push   esi
c001039d:	53                   	push   ebx
c001039e:	83 ec 0c             	sub    esp,0xc
c00103a1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00103a5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00103a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00103ab:	56                   	push   esi
c00103ac:	53                   	push   ebx
c00103ad:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00103b0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00103b6:	83 c4 10             	add    esp,0x10
c00103b9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00103bc:	74 0f                	je     c00103cd <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00103be:	52                   	push   edx
c00103bf:	52                   	push   edx
c00103c0:	56                   	push   esi
c00103c1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00103c4:	e8 d3 ff ff ff       	call   c001039c <Device::powerSavingAll(PowerSavingLevel)>
c00103c9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00103cb:	eb e9                	jmp    c00103b6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00103cd:	58                   	pop    eax
c00103ce:	5b                   	pop    ebx
c00103cf:	5e                   	pop    esi
c00103d0:	c3                   	ret    
c00103d1:	90                   	nop

c00103d2 <Device::setName(char const*)>:
c00103d2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00103da:	e9 c8 02 ff ff       	jmp    c00006a7 <strcpy>
c00103df:	90                   	nop

c00103e0 <Device::Device(char const*)>:
c00103e0:	83 ec 0c             	sub    esp,0xc
c00103e3:	ba 78 09 02 c0       	mov    edx,0xc0020978
c00103e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103ec:	89 10                	mov    DWORD PTR [eax],edx
c00103ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103f2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00103fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010400:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001040a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001040e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001041c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0010426:	83 ec 08             	sub    esp,0x8
c0010429:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001042d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010431:	e8 9c ff ff ff       	call   c00103d2 <Device::setName(char const*)>
c0010436:	83 c4 10             	add    esp,0x10
c0010439:	83 ec 0c             	sub    esp,0xc
c001043c:	6a 08                	push   0x8
c001043e:	e8 b3 e8 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c0010443:	83 c4 10             	add    esp,0x10
c0010446:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001044c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010453:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010457:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001045d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010461:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010467:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001046d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010471:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010477:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001047e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010482:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0010489:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001048d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0010494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010498:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00104a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00104b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00104be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c2:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00104cc:	90                   	nop
c00104cd:	83 c4 0c             	add    esp,0xc
c00104d0:	c3                   	ret    
c00104d1:	90                   	nop

c00104d2 <Device::getName()>:
c00104d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d6:	05 d0 00 00 00       	add    eax,0xd0
c00104db:	c3                   	ret    

c00104dc <DriverlessDevice::DriverlessDevice(char const*)>:
c00104dc:	83 ec 0c             	sub    esp,0xc
c00104df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e3:	83 ec 08             	sub    esp,0x8
c00104e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104ea:	50                   	push   eax
c00104eb:	e8 f0 fe ff ff       	call   c00103e0 <Device::Device(char const*)>
c00104f0:	83 c4 10             	add    esp,0x10
c00104f3:	ba a4 09 02 c0       	mov    edx,0xc00209a4
c00104f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fc:	89 10                	mov    DWORD PTR [eax],edx
c00104fe:	90                   	nop
c00104ff:	83 c4 0c             	add    esp,0xc
c0010502:	c3                   	ret    
c0010503:	90                   	nop

c0010504 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0010504:	57                   	push   edi
c0010505:	56                   	push   esi
c0010506:	53                   	push   ebx
c0010507:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001050b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001050f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010513:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0010519:	75 0c                	jne    c0010527 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001051b:	52                   	push   edx
c001051c:	52                   	push   edx
c001051d:	53                   	push   ebx
c001051e:	56                   	push   esi
c001051f:	e8 70 e3 00 00       	call   c001e894 <LinkedList<Device>::addElement(Device*)>
c0010524:	83 c4 10             	add    esp,0x10
c0010527:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001052d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010530:	74 12                	je     c0010544 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0010532:	50                   	push   eax
c0010533:	57                   	push   edi
c0010534:	56                   	push   esi
c0010535:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010538:	e8 c7 ff ff ff       	call   c0010504 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001053d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001053f:	83 c4 10             	add    esp,0x10
c0010542:	eb e9                	jmp    c001052d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0010544:	5b                   	pop    ebx
c0010545:	5e                   	pop    esi
c0010546:	5f                   	pop    edi
c0010547:	c3                   	ret    

c0010548 <getDevicesOfType(DeviceType)>:
c0010548:	53                   	push   ebx
c0010549:	83 ec 14             	sub    esp,0x14
c001054c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010550:	53                   	push   ebx
c0010551:	e8 1a e4 00 00       	call   c001e970 <LinkedList<Device>::LinkedList()>
c0010556:	83 c4 0c             	add    esp,0xc
c0010559:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001055d:	53                   	push   ebx
c001055e:	ff 35 08 32 02 c0    	push   DWORD PTR ds:0xc0023208
c0010564:	e8 9b ff ff ff       	call   c0010504 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0010569:	89 d8                	mov    eax,ebx
c001056b:	83 c4 18             	add    esp,0x18
c001056e:	5b                   	pop    ebx
c001056f:	c2 04 00             	ret    0x4

c0010572 <HardDiskController::HardDiskController(char const*)>:
c0010572:	83 ec 0c             	sub    esp,0xc
c0010575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010579:	83 ec 08             	sub    esp,0x8
c001057c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010580:	50                   	push   eax
c0010581:	e8 5a fe ff ff       	call   c00103e0 <Device::Device(char const*)>
c0010586:	83 c4 10             	add    esp,0x10
c0010589:	ba d0 09 02 c0       	mov    edx,0xc00209d0
c001058e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010592:	89 10                	mov    DWORD PTR [eax],edx
c0010594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010598:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00105a2:	90                   	nop
c00105a3:	83 c4 0c             	add    esp,0xc
c00105a6:	c3                   	ret    
c00105a7:	90                   	nop

c00105a8 <HardDiskController::~HardDiskController()>:
c00105a8:	83 ec 0c             	sub    esp,0xc
c00105ab:	ba d0 09 02 c0       	mov    edx,0xc00209d0
c00105b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105b4:	89 10                	mov    DWORD PTR [eax],edx
c00105b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105ba:	83 ec 0c             	sub    esp,0xc
c00105bd:	50                   	push   eax
c00105be:	e8 cf fa ff ff       	call   c0010092 <Device::~Device()>
c00105c3:	83 c4 10             	add    esp,0x10
c00105c6:	90                   	nop
c00105c7:	83 c4 0c             	add    esp,0xc
c00105ca:	c3                   	ret    
c00105cb:	90                   	nop

c00105cc <HardDiskController::~HardDiskController()>:
c00105cc:	83 ec 0c             	sub    esp,0xc
c00105cf:	83 ec 0c             	sub    esp,0xc
c00105d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105d6:	e8 cd ff ff ff       	call   c00105a8 <HardDiskController::~HardDiskController()>
c00105db:	83 c4 10             	add    esp,0x10
c00105de:	83 ec 08             	sub    esp,0x8
c00105e1:	68 58 01 00 00       	push   0x158
c00105e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105ea:	e8 16 e7 ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c00105ef:	83 c4 10             	add    esp,0x10
c00105f2:	83 c4 0c             	add    esp,0xc
c00105f5:	c3                   	ret    

c00105f6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00105f6:	83 ec 0c             	sub    esp,0xc
c00105f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105fd:	83 ec 08             	sub    esp,0x8
c0010600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010604:	50                   	push   eax
c0010605:	e8 d6 fd ff ff       	call   c00103e0 <Device::Device(char const*)>
c001060a:	83 c4 10             	add    esp,0x10
c001060d:	ba fc 09 02 c0       	mov    edx,0xc00209fc
c0010612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010616:	89 10                	mov    DWORD PTR [eax],edx
c0010618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001061c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010627:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001062e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010632:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001063c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010640:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010644:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001064a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001064e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010658:	90                   	nop
c0010659:	83 c4 0c             	add    esp,0xc
c001065c:	c3                   	ret    
c001065d:	90                   	nop

c001065e <PhysicalDisk::startCache()>:
c001065e:	56                   	push   esi
c001065f:	53                   	push   ebx
c0010660:	83 ec 10             	sub    esp,0x10
c0010663:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010667:	6a 30                	push   0x30
c0010669:	e8 88 e6 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c001066e:	89 c6                	mov    esi,eax
c0010670:	58                   	pop    eax
c0010671:	5a                   	pop    edx
c0010672:	53                   	push   ebx
c0010673:	56                   	push   esi
c0010674:	e8 6d 1e 00 00       	call   c00124e6 <VCache::VCache(PhysicalDisk*)>
c0010679:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001067f:	83 c4 14             	add    esp,0x14
c0010682:	5b                   	pop    ebx
c0010683:	5e                   	pop    esi
c0010684:	c3                   	ret    
c0010685:	90                   	nop

c0010686 <PhysicalDisk::~PhysicalDisk()>:
c0010686:	83 ec 0c             	sub    esp,0xc
c0010689:	ba fc 09 02 c0       	mov    edx,0xc00209fc
c001068e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010692:	89 10                	mov    DWORD PTR [eax],edx
c0010694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010698:	83 ec 0c             	sub    esp,0xc
c001069b:	50                   	push   eax
c001069c:	e8 f1 f9 ff ff       	call   c0010092 <Device::~Device()>
c00106a1:	83 c4 10             	add    esp,0x10
c00106a4:	90                   	nop
c00106a5:	83 c4 0c             	add    esp,0xc
c00106a8:	c3                   	ret    
c00106a9:	90                   	nop

c00106aa <PhysicalDisk::~PhysicalDisk()>:
c00106aa:	83 ec 0c             	sub    esp,0xc
c00106ad:	83 ec 0c             	sub    esp,0xc
c00106b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106b4:	e8 cd ff ff ff       	call   c0010686 <PhysicalDisk::~PhysicalDisk()>
c00106b9:	83 c4 10             	add    esp,0x10
c00106bc:	83 ec 08             	sub    esp,0x8
c00106bf:	68 6c 01 00 00       	push   0x16c
c00106c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106c8:	e8 38 e6 ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c00106cd:	83 c4 10             	add    esp,0x10
c00106d0:	83 c4 0c             	add    esp,0xc
c00106d3:	c3                   	ret    

c00106d4 <FPU::FPU(char const*)>:
c00106d4:	83 ec 0c             	sub    esp,0xc
c00106d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106db:	83 ec 08             	sub    esp,0x8
c00106de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106e2:	50                   	push   eax
c00106e3:	e8 f8 fc ff ff       	call   c00103e0 <Device::Device(char const*)>
c00106e8:	83 c4 10             	add    esp,0x10
c00106eb:	ba 3c 0a 02 c0       	mov    edx,0xc0020a3c
c00106f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106f4:	89 10                	mov    DWORD PTR [eax],edx
c00106f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106fa:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010704:	90                   	nop
c0010705:	83 c4 0c             	add    esp,0xc
c0010708:	c3                   	ret    
c0010709:	90                   	nop

c001070a <FPU::~FPU()>:
c001070a:	83 ec 0c             	sub    esp,0xc
c001070d:	ba 3c 0a 02 c0       	mov    edx,0xc0020a3c
c0010712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010716:	89 10                	mov    DWORD PTR [eax],edx
c0010718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001071c:	83 ec 0c             	sub    esp,0xc
c001071f:	50                   	push   eax
c0010720:	e8 6d f9 ff ff       	call   c0010092 <Device::~Device()>
c0010725:	83 c4 10             	add    esp,0x10
c0010728:	90                   	nop
c0010729:	83 c4 0c             	add    esp,0xc
c001072c:	c3                   	ret    
c001072d:	90                   	nop

c001072e <FPU::~FPU()>:
c001072e:	83 ec 0c             	sub    esp,0xc
c0010731:	83 ec 0c             	sub    esp,0xc
c0010734:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010738:	e8 cd ff ff ff       	call   c001070a <FPU::~FPU()>
c001073d:	83 c4 10             	add    esp,0x10
c0010740:	83 ec 08             	sub    esp,0x8
c0010743:	68 58 01 00 00       	push   0x158
c0010748:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001074c:	e8 b4 e5 ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c0010751:	83 c4 10             	add    esp,0x10
c0010754:	83 c4 0c             	add    esp,0xc
c0010757:	c3                   	ret    

c0010758 <setupFPU()>:
c0010758:	53                   	push   ebx
c0010759:	83 ec 08             	sub    esp,0x8
c001075c:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c0010761:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010768:	74 19                	je     c0010783 <setupFPU()+0x2b>
c001076a:	83 ec 0c             	sub    esp,0xc
c001076d:	68 58 01 00 00       	push   0x158
c0010772:	e8 7f e5 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c0010777:	89 c3                	mov    ebx,eax
c0010779:	89 04 24             	mov    DWORD PTR [esp],eax
c001077c:	e8 cb c8 00 00       	call   c001d04c <AVX::AVX()>
c0010781:	eb 5b                	jmp    c00107de <setupFPU()+0x86>
c0010783:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010789:	84 c0                	test   al,al
c001078b:	79 19                	jns    c00107a6 <setupFPU()+0x4e>
c001078d:	83 ec 0c             	sub    esp,0xc
c0010790:	68 58 01 00 00       	push   0x158
c0010795:	e8 5c e5 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c001079a:	89 c3                	mov    ebx,eax
c001079c:	89 04 24             	mov    DWORD PTR [esp],eax
c001079f:	e8 ce c9 00 00       	call   c001d172 <SSE::SSE()>
c00107a4:	eb 38                	jmp    c00107de <setupFPU()+0x86>
c00107a6:	a8 20                	test   al,0x20
c00107a8:	74 19                	je     c00107c3 <setupFPU()+0x6b>
c00107aa:	83 ec 0c             	sub    esp,0xc
c00107ad:	68 58 01 00 00       	push   0x158
c00107b2:	e8 3f e5 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c00107b7:	89 c3                	mov    ebx,eax
c00107b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00107bc:	e8 1b c9 00 00       	call   c001d0dc <MMX::MMX()>
c00107c1:	eb 1b                	jmp    c00107de <setupFPU()+0x86>
c00107c3:	a8 10                	test   al,0x10
c00107c5:	74 1c                	je     c00107e3 <setupFPU()+0x8b>
c00107c7:	83 ec 0c             	sub    esp,0xc
c00107ca:	68 58 01 00 00       	push   0x158
c00107cf:	e8 22 e5 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c00107d4:	89 c3                	mov    ebx,eax
c00107d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00107d9:	e8 22 ca 00 00       	call   c001d200 <x87::x87()>
c00107de:	83 c4 10             	add    esp,0x10
c00107e1:	eb 2c                	jmp    c001080f <setupFPU()+0xb7>
c00107e3:	83 ec 0c             	sub    esp,0xc
c00107e6:	31 db                	xor    ebx,ebx
c00107e8:	68 28 0a 02 c0       	push   0xc0020a28
c00107ed:	e8 f3 e5 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c00107f2:	e8 7d 35 00 00       	call   c0013d74 <thisCPU()>
c00107f7:	e8 78 35 00 00       	call   c0013d74 <thisCPU()>
c00107fc:	e8 c7 e1 00 00       	call   c001e9c8 <CPU::readCR0()>
c0010801:	83 c8 04             	or     eax,0x4
c0010804:	89 04 24             	mov    DWORD PTR [esp],eax
c0010807:	e8 ce e1 00 00       	call   c001e9da <CPU::writeCR0(unsigned long)>
c001080c:	83 c4 10             	add    esp,0x10
c001080f:	89 d8                	mov    eax,ebx
c0010811:	83 c4 08             	add    esp,0x8
c0010814:	5b                   	pop    ebx
c0010815:	c3                   	ret    

c0010816 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010816:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001081a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001081e:	c1 e0 04             	shl    eax,0x4
c0010821:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010825:	8d 50 10             	lea    edx,[eax+0x10]
c0010828:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001082e:	74 08                	je     c0010838 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010830:	83 c0 04             	add    eax,0x4
c0010833:	39 d0                	cmp    eax,edx
c0010835:	75 f1                	jne    c0010828 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010837:	c3                   	ret    
c0010838:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010842:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001084c:	eb e2                	jmp    c0010830 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001084e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001084e:	57                   	push   edi
c001084f:	31 c0                	xor    eax,eax
c0010851:	56                   	push   esi
c0010852:	53                   	push   ebx
c0010853:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010857:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001085b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001085f:	89 da                	mov    edx,ebx
c0010861:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010865:	c1 e2 04             	shl    edx,0x4
c0010868:	01 ca                	add    edx,ecx
c001086a:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010872:	74 16                	je     c001088a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010874:	40                   	inc    eax
c0010875:	83 f8 04             	cmp    eax,0x4
c0010878:	75 f0                	jne    c001086a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001087a:	c7 44 24 10 6c 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020a6c
c0010882:	5b                   	pop    ebx
c0010883:	5e                   	pop    esi
c0010884:	5f                   	pop    edi
c0010885:	e9 f0 41 00 00       	jmp    c0014a7a <Krnl::panic(char const*)>
c001088a:	8d 04 98             	lea    eax,[eax+ebx*4]
c001088d:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010890:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010896:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001089c:	5b                   	pop    ebx
c001089d:	5e                   	pop    esi
c001089e:	5f                   	pop    edi
c001089f:	c3                   	ret    

c00108a0 <doubleFault(regs*, void*)>:
c00108a0:	c7 44 24 04 9c 0b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020b9c
c00108a8:	e9 cd 41 00 00       	jmp    c0014a7a <Krnl::panic(char const*)>
c00108ad:	90                   	nop

c00108ae <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00108ae:	56                   	push   esi
c00108af:	53                   	push   ebx
c00108b0:	50                   	push   eax
c00108b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00108b5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00108b9:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00108be:	75 35                	jne    c00108f5 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00108c0:	8d 43 20             	lea    eax,[ebx+0x20]
c00108c3:	31 d2                	xor    edx,edx
c00108c5:	89 c1                	mov    ecx,eax
c00108c7:	c1 e1 04             	shl    ecx,0x4
c00108ca:	01 f1                	add    ecx,esi
c00108cc:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00108d4:	74 3e                	je     c0010914 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00108d6:	42                   	inc    edx
c00108d7:	83 fa 04             	cmp    edx,0x4
c00108da:	75 f0                	jne    c00108cc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00108dc:	83 ec 0c             	sub    esp,0xc
c00108df:	68 e0 0a 02 c0       	push   0xc0020ae0
c00108e4:	e8 91 41 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c00108e9:	83 c4 10             	add    esp,0x10
c00108ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00108f1:	5a                   	pop    edx
c00108f2:	5b                   	pop    ebx
c00108f3:	5e                   	pop    esi
c00108f4:	c3                   	ret    
c00108f5:	83 ec 0c             	sub    esp,0xc
c00108f8:	56                   	push   esi
c00108f9:	e8 d4 fb ff ff       	call   c00104d2 <Device::getName()>
c00108fe:	83 c4 10             	add    esp,0x10
c0010901:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010904:	75 ba                	jne    c00108c0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010906:	83 fb 0f             	cmp    ebx,0xf
c0010909:	7f 29                	jg     c0010934 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001090b:	0f b6 9b 60 29 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd6a0]
c0010912:	eb ac                	jmp    c00108c0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010914:	8d 04 82             	lea    eax,[edx+eax*4]
c0010917:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001091b:	8d 04 86             	lea    eax,[esi+eax*4]
c001091e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010924:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010928:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001092e:	89 d8                	mov    eax,ebx
c0010930:	5a                   	pop    edx
c0010931:	5b                   	pop    ebx
c0010932:	5e                   	pop    esi
c0010933:	c3                   	ret    
c0010934:	83 ec 0c             	sub    esp,0xc
c0010937:	68 a8 0a 02 c0       	push   0xc0020aa8
c001093c:	e8 39 41 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c0010941:	83 c4 10             	add    esp,0x10
c0010944:	e9 77 ff ff ff       	jmp    c00108c0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010949:	90                   	nop

c001094a <InterruptController::clearAllHandlers(int, bool)>:
c001094a:	56                   	push   esi
c001094b:	53                   	push   ebx
c001094c:	52                   	push   edx
c001094d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010951:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010955:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001095a:	75 61                	jne    c00109bd <InterruptController::clearAllHandlers(int, bool)+0x73>
c001095c:	8d 46 20             	lea    eax,[esi+0x20]
c001095f:	c1 e6 04             	shl    esi,0x4
c0010962:	c1 e0 04             	shl    eax,0x4
c0010965:	01 de                	add    esi,ebx
c0010967:	01 d8                	add    eax,ebx
c0010969:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010973:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c001097d:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010987:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010991:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c001099b:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00109a5:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00109af:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00109b9:	58                   	pop    eax
c00109ba:	5b                   	pop    ebx
c00109bb:	5e                   	pop    esi
c00109bc:	c3                   	ret    
c00109bd:	83 ec 0c             	sub    esp,0xc
c00109c0:	53                   	push   ebx
c00109c1:	e8 0c fb ff ff       	call   c00104d2 <Device::getName()>
c00109c6:	83 c4 10             	add    esp,0x10
c00109c9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00109cc:	75 8e                	jne    c001095c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00109ce:	83 fe 0f             	cmp    esi,0xf
c00109d1:	7f 09                	jg     c00109dc <InterruptController::clearAllHandlers(int, bool)+0x92>
c00109d3:	0f b6 b6 60 29 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd6a0]
c00109da:	eb 80                	jmp    c001095c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00109dc:	83 ec 0c             	sub    esp,0xc
c00109df:	68 1c 0b 02 c0       	push   0xc0020b1c
c00109e4:	e8 91 40 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c00109e9:	83 c4 10             	add    esp,0x10
c00109ec:	e9 6b ff ff ff       	jmp    c001095c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00109f1:	90                   	nop

c00109f2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00109f2:	56                   	push   esi
c00109f3:	53                   	push   ebx
c00109f4:	52                   	push   edx
c00109f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00109f9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00109fd:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010a02:	75 3a                	jne    c0010a3e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010a04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a08:	8d 50 20             	lea    edx,[eax+0x20]
c0010a0b:	c1 e2 04             	shl    edx,0x4
c0010a0e:	8d 04 16             	lea    eax,[esi+edx*1]
c0010a11:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010a15:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010a1b:	74 0b                	je     c0010a28 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010a1d:	83 c0 04             	add    eax,0x4
c0010a20:	39 d0                	cmp    eax,edx
c0010a22:	75 f1                	jne    c0010a15 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010a24:	58                   	pop    eax
c0010a25:	5b                   	pop    ebx
c0010a26:	5e                   	pop    esi
c0010a27:	c3                   	ret    
c0010a28:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010a32:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010a3c:	eb df                	jmp    c0010a1d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010a3e:	83 ec 0c             	sub    esp,0xc
c0010a41:	56                   	push   esi
c0010a42:	e8 8b fa ff ff       	call   c00104d2 <Device::getName()>
c0010a47:	83 c4 10             	add    esp,0x10
c0010a4a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010a4d:	75 b5                	jne    c0010a04 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010a4f:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010a54:	7f 11                	jg     c0010a67 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010a56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a5a:	0f b6 80 60 29 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd6a0]
c0010a61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010a65:	eb 9d                	jmp    c0010a04 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010a67:	83 ec 0c             	sub    esp,0xc
c0010a6a:	68 1c 0b 02 c0       	push   0xc0020b1c
c0010a6f:	e8 06 40 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c0010a74:	83 c4 10             	add    esp,0x10
c0010a77:	eb 8b                	jmp    c0010a04 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010a79 <nmiHandler(regs*, void*)>:
c0010a79:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c0010a7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010a82:	e9 db a8 ff ff       	jmp    c000b362 <Computer::handleNMI()>

c0010a87 <int_handler>:
c0010a87:	55                   	push   ebp
c0010a88:	57                   	push   edi
c0010a89:	56                   	push   esi
c0010a8a:	53                   	push   ebx
c0010a8b:	83 ec 0c             	sub    esp,0xc
c0010a8e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010a92:	80 3d d0 3b 02 c0 00 	cmp    BYTE PTR ds:0xc0023bd0,0x0
c0010a99:	74 0b                	je     c0010aa6 <int_handler+0x1f>
c0010a9b:	fa                   	cli    
c0010a9c:	f4                   	hlt    
c0010a9d:	80 3d d0 3b 02 c0 00 	cmp    BYTE PTR ds:0xc0023bd0,0x0
c0010aa4:	75 f5                	jne    c0010a9b <int_handler+0x14>
c0010aa6:	e8 c9 32 00 00       	call   c0013d74 <thisCPU()>
c0010aab:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010aae:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010ab4:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010ab7:	83 f8 17             	cmp    eax,0x17
c0010aba:	77 13                	ja     c0010acf <int_handler+0x48>
c0010abc:	83 ec 08             	sub    esp,0x8
c0010abf:	8b 17                	mov    edx,DWORD PTR [edi]
c0010ac1:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010ac4:	0f b6 c0             	movzx  eax,al
c0010ac7:	50                   	push   eax
c0010ac8:	57                   	push   edi
c0010ac9:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010acc:	83 c4 10             	add    esp,0x10
c0010acf:	83 c3 15             	add    ebx,0x15
c0010ad2:	c1 e3 04             	shl    ebx,0x4
c0010ad5:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010ad9:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010ae0:	31 db                	xor    ebx,ebx
c0010ae2:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010ae6:	85 c0                	test   eax,eax
c0010ae8:	74 13                	je     c0010afd <int_handler+0x76>
c0010aea:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010aed:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010af1:	74 1c                	je     c0010b0f <int_handler+0x88>
c0010af3:	83 ec 08             	sub    esp,0x8
c0010af6:	52                   	push   edx
c0010af7:	56                   	push   esi
c0010af8:	ff d0                	call   eax
c0010afa:	83 c4 10             	add    esp,0x10
c0010afd:	43                   	inc    ebx
c0010afe:	83 fb 04             	cmp    ebx,0x4
c0010b01:	75 df                	jne    c0010ae2 <int_handler+0x5b>
c0010b03:	83 c4 0c             	add    esp,0xc
c0010b06:	31 c0                	xor    eax,eax
c0010b08:	5b                   	pop    ebx
c0010b09:	31 d2                	xor    edx,edx
c0010b0b:	5e                   	pop    esi
c0010b0c:	5f                   	pop    edi
c0010b0d:	5d                   	pop    ebp
c0010b0e:	c3                   	ret    
c0010b0f:	83 ec 08             	sub    esp,0x8
c0010b12:	52                   	push   edx
c0010b13:	56                   	push   esi
c0010b14:	ff d0                	call   eax
c0010b16:	83 c4 10             	add    esp,0x10
c0010b19:	83 c4 0c             	add    esp,0xc
c0010b1c:	5b                   	pop    ebx
c0010b1d:	5e                   	pop    esi
c0010b1e:	5f                   	pop    edi
c0010b1f:	5d                   	pop    ebp
c0010b20:	c3                   	ret    
c0010b21:	90                   	nop

c0010b22 <InterruptController::InterruptController(char const*)>:
c0010b22:	83 ec 1c             	sub    esp,0x1c
c0010b25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b29:	83 ec 08             	sub    esp,0x8
c0010b2c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010b30:	50                   	push   eax
c0010b31:	e8 aa f8 ff ff       	call   c00103e0 <Device::Device(char const*)>
c0010b36:	83 c4 10             	add    esp,0x10
c0010b39:	ba 38 0d 02 c0       	mov    edx,0xc0020d38
c0010b3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b42:	89 10                	mov    DWORD PTR [eax],edx
c0010b44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b48:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010b52:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010b5a:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010b62:	7f 5e                	jg     c0010bc2 <InterruptController::InterruptController(char const*)+0xa0>
c0010b64:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010b6c:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010b71:	7f 49                	jg     c0010bbc <InterruptController::InterruptController(char const*)+0x9a>
c0010b73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010b7b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010b82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b86:	01 ca                	add    edx,ecx
c0010b88:	83 c2 54             	add    edx,0x54
c0010b8b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010b93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b97:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010b9b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010ba2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ba6:	01 ca                	add    edx,ecx
c0010ba8:	81 c2 54 04 00 00    	add    edx,0x454
c0010bae:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010bb6:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010bba:	eb b0                	jmp    c0010b6c <InterruptController::InterruptController(char const*)+0x4a>
c0010bbc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010bc0:	eb 98                	jmp    c0010b5a <InterruptController::InterruptController(char const*)+0x38>
c0010bc2:	90                   	nop
c0010bc3:	83 c4 1c             	add    esp,0x1c
c0010bc6:	c3                   	ret    
c0010bc7:	90                   	nop

c0010bc8 <InterruptController::~InterruptController()>:
c0010bc8:	83 ec 0c             	sub    esp,0xc
c0010bcb:	ba 38 0d 02 c0       	mov    edx,0xc0020d38
c0010bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bd4:	89 10                	mov    DWORD PTR [eax],edx
c0010bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bda:	83 ec 0c             	sub    esp,0xc
c0010bdd:	50                   	push   eax
c0010bde:	e8 af f4 ff ff       	call   c0010092 <Device::~Device()>
c0010be3:	83 c4 10             	add    esp,0x10
c0010be6:	90                   	nop
c0010be7:	83 c4 0c             	add    esp,0xc
c0010bea:	c3                   	ret    
c0010beb:	90                   	nop

c0010bec <InterruptController::~InterruptController()>:
c0010bec:	83 ec 0c             	sub    esp,0xc
c0010bef:	83 ec 0c             	sub    esp,0xc
c0010bf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bf6:	e8 cd ff ff ff       	call   c0010bc8 <InterruptController::~InterruptController()>
c0010bfb:	83 c4 10             	add    esp,0x10
c0010bfe:	83 ec 08             	sub    esp,0x8
c0010c01:	68 58 21 00 00       	push   0x2158
c0010c06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c0a:	e8 f6 e0 ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c0010c0f:	83 c4 10             	add    esp,0x10
c0010c12:	83 c4 0c             	add    esp,0xc
c0010c15:	c3                   	ret    

c0010c16 <displayDebugInfo(regs*)>:
c0010c16:	55                   	push   ebp
c0010c17:	57                   	push   edi
c0010c18:	56                   	push   esi
c0010c19:	53                   	push   ebx
c0010c1a:	83 ec 24             	sub    esp,0x24
c0010c1d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010c21:	0f 20 c2             	mov    edx,cr0
c0010c24:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010c28:	0f 20 d7             	mov    edi,cr2
c0010c2b:	0f 20 de             	mov    esi,cr3
c0010c2e:	0f 20 e5             	mov    ebp,cr4
c0010c31:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0010c34:	68 a9 0b 02 c0       	push   0xc0020ba9
c0010c39:	e8 a7 e1 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0010c3e:	58                   	pop    eax
c0010c3f:	5a                   	pop    edx
c0010c40:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010c43:	68 b4 0b 02 c0       	push   0xc0020bb4
c0010c48:	e8 98 e1 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0010c4d:	59                   	pop    ecx
c0010c4e:	58                   	pop    eax
c0010c4f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010c52:	68 bf 0b 02 c0       	push   0xc0020bbf
c0010c57:	e8 89 e1 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0010c5c:	58                   	pop    eax
c0010c5d:	5a                   	pop    edx
c0010c5e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010c61:	68 ca 0b 02 c0       	push   0xc0020bca
c0010c66:	e8 7a e1 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0010c6b:	59                   	pop    ecx
c0010c6c:	58                   	pop    eax
c0010c6d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c70:	68 d5 0b 02 c0       	push   0xc0020bd5
c0010c75:	e8 6b e1 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0010c7a:	58                   	pop    eax
c0010c7b:	5a                   	pop    edx
c0010c7c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0010c7f:	68 e0 0b 02 c0       	push   0xc0020be0
c0010c84:	e8 5c e1 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0010c89:	59                   	pop    ecx
c0010c8a:	58                   	pop    eax
c0010c8b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010c8e:	68 fa 0b 02 c0       	push   0xc0020bfa
c0010c93:	e8 4d e1 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0010c98:	58                   	pop    eax
c0010c99:	5a                   	pop    edx
c0010c9a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c9d:	68 eb 0b 02 c0       	push   0xc0020beb
c0010ca2:	e8 3e e1 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0010ca7:	59                   	pop    ecx
c0010ca8:	58                   	pop    eax
c0010ca9:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010cac:	68 f6 0b 02 c0       	push   0xc0020bf6
c0010cb1:	e8 2f e1 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0010cb6:	58                   	pop    eax
c0010cb7:	5a                   	pop    edx
c0010cb8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010cbb:	68 05 0c 02 c0       	push   0xc0020c05
c0010cc0:	e8 20 e1 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0010cc5:	59                   	pop    ecx
c0010cc6:	58                   	pop    eax
c0010cc7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010cca:	68 10 0c 02 c0       	push   0xc0020c10
c0010ccf:	e8 11 e1 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0010cd4:	58                   	pop    eax
c0010cd5:	5a                   	pop    edx
c0010cd6:	57                   	push   edi
c0010cd7:	68 1b 0c 02 c0       	push   0xc0020c1b
c0010cdc:	e8 04 e1 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0010ce1:	59                   	pop    ecx
c0010ce2:	58                   	pop    eax
c0010ce3:	56                   	push   esi
c0010ce4:	68 26 0c 02 c0       	push   0xc0020c26
c0010ce9:	e8 f7 e0 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0010cee:	58                   	pop    eax
c0010cef:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010cf4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010cfa:	e8 ce c1 ff ff       	call   c000cecd <setActiveTerminal(VgaText*)>
c0010cff:	58                   	pop    eax
c0010d00:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0010d03:	5a                   	pop    edx
c0010d04:	c1 e0 05             	shl    eax,0x5
c0010d07:	05 c0 26 02 c0       	add    eax,0xc00226c0
c0010d0c:	50                   	push   eax
c0010d0d:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010d12:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d18:	e8 cf c5 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010d1d:	59                   	pop    ecx
c0010d1e:	58                   	pop    eax
c0010d1f:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010d24:	68 31 0c 02 c0       	push   0xc0020c31
c0010d29:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d2f:	e8 b8 c5 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010d34:	58                   	pop    eax
c0010d35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d3a:	5a                   	pop    edx
c0010d3b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d3e:	83 c0 0c             	add    eax,0xc
c0010d41:	50                   	push   eax
c0010d42:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010d47:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d4d:	e8 9a c5 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010d52:	59                   	pop    ecx
c0010d53:	58                   	pop    eax
c0010d54:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010d59:	68 3a 0c 02 c0       	push   0xc0020c3a
c0010d5e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d64:	e8 83 c5 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010d69:	58                   	pop    eax
c0010d6a:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010d6f:	5a                   	pop    edx
c0010d70:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010d73:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d79:	e8 94 c5 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010d7e:	59                   	pop    ecx
c0010d7f:	58                   	pop    eax
c0010d80:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010d85:	68 42 0c 02 c0       	push   0xc0020c42
c0010d8a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d90:	e8 57 c5 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010d95:	58                   	pop    eax
c0010d96:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010d9b:	5a                   	pop    edx
c0010d9c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010d9f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010da5:	e8 68 c5 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010daa:	59                   	pop    ecx
c0010dab:	58                   	pop    eax
c0010dac:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010db1:	68 4a 0c 02 c0       	push   0xc0020c4a
c0010db6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010dbc:	e8 2b c5 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010dc1:	58                   	pop    eax
c0010dc2:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010dc7:	5a                   	pop    edx
c0010dc8:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010dcb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010dd1:	e8 3c c5 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010dd6:	59                   	pop    ecx
c0010dd7:	58                   	pop    eax
c0010dd8:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010ddd:	68 52 0c 02 c0       	push   0xc0020c52
c0010de2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010de8:	e8 ff c4 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010ded:	58                   	pop    eax
c0010dee:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010df3:	5a                   	pop    edx
c0010df4:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0010df7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010dfd:	e8 10 c5 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010e02:	59                   	pop    ecx
c0010e03:	58                   	pop    eax
c0010e04:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010e09:	68 5a 0c 02 c0       	push   0xc0020c5a
c0010e0e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e14:	e8 d3 c4 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010e19:	58                   	pop    eax
c0010e1a:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010e1f:	5a                   	pop    edx
c0010e20:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010e23:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e29:	e8 e4 c4 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010e2e:	59                   	pop    ecx
c0010e2f:	58                   	pop    eax
c0010e30:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010e35:	68 62 0c 02 c0       	push   0xc0020c62
c0010e3a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e40:	e8 a7 c4 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010e45:	58                   	pop    eax
c0010e46:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010e4b:	5a                   	pop    edx
c0010e4c:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0010e4f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e55:	e8 b8 c4 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010e5a:	59                   	pop    ecx
c0010e5b:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010e60:	5b                   	pop    ebx
c0010e61:	68 6a 0c 02 c0       	push   0xc0020c6a
c0010e66:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e6c:	e8 7b c4 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010e71:	58                   	pop    eax
c0010e72:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010e77:	5a                   	pop    edx
c0010e78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010e7c:	52                   	push   edx
c0010e7d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e83:	e8 8a c4 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010e88:	59                   	pop    ecx
c0010e89:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010e8e:	5b                   	pop    ebx
c0010e8f:	68 73 0c 02 c0       	push   0xc0020c73
c0010e94:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e9a:	e8 4d c4 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010e9f:	58                   	pop    eax
c0010ea0:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010ea5:	5a                   	pop    edx
c0010ea6:	57                   	push   edi
c0010ea7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010ead:	e8 60 c4 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010eb2:	59                   	pop    ecx
c0010eb3:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010eb8:	5b                   	pop    ebx
c0010eb9:	68 7b 0c 02 c0       	push   0xc0020c7b
c0010ebe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010ec4:	e8 23 c4 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010ec9:	5f                   	pop    edi
c0010eca:	58                   	pop    eax
c0010ecb:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010ed0:	56                   	push   esi
c0010ed1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010ed7:	e8 36 c4 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010edc:	58                   	pop    eax
c0010edd:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010ee2:	5a                   	pop    edx
c0010ee3:	68 83 0c 02 c0       	push   0xc0020c83
c0010ee8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010eee:	e8 f9 c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010ef3:	59                   	pop    ecx
c0010ef4:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010ef9:	5b                   	pop    ebx
c0010efa:	55                   	push   ebp
c0010efb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f01:	e8 0c c4 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010f06:	5e                   	pop    esi
c0010f07:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010f0c:	5f                   	pop    edi
c0010f0d:	68 8b 0c 02 c0       	push   0xc0020c8b
c0010f12:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f18:	e8 cf c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010f1d:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010f22:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010f28:	e8 b6 da 00 00       	call   c001e9e3 <CPU::readDR0()>
c0010f2d:	5d                   	pop    ebp
c0010f2e:	5a                   	pop    edx
c0010f2f:	50                   	push   eax
c0010f30:	53                   	push   ebx
c0010f31:	e8 dc c3 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010f36:	59                   	pop    ecx
c0010f37:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010f3c:	5b                   	pop    ebx
c0010f3d:	68 94 0c 02 c0       	push   0xc0020c94
c0010f42:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f48:	e8 9f c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010f4d:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010f52:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010f58:	e8 98 da 00 00       	call   c001e9f5 <CPU::readDR1()>
c0010f5d:	5e                   	pop    esi
c0010f5e:	5f                   	pop    edi
c0010f5f:	50                   	push   eax
c0010f60:	53                   	push   ebx
c0010f61:	e8 ac c3 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010f66:	5d                   	pop    ebp
c0010f67:	58                   	pop    eax
c0010f68:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010f6d:	68 9c 0c 02 c0       	push   0xc0020c9c
c0010f72:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f78:	e8 6f c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010f7d:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010f82:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010f88:	e8 7a da 00 00       	call   c001ea07 <CPU::readDR2()>
c0010f8d:	5a                   	pop    edx
c0010f8e:	59                   	pop    ecx
c0010f8f:	50                   	push   eax
c0010f90:	53                   	push   ebx
c0010f91:	e8 7c c3 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010f96:	5b                   	pop    ebx
c0010f97:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010f9c:	5e                   	pop    esi
c0010f9d:	68 a4 0c 02 c0       	push   0xc0020ca4
c0010fa2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fa8:	e8 3f c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010fad:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010fb2:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010fb8:	e8 5c da 00 00       	call   c001ea19 <CPU::readDR3()>
c0010fbd:	5f                   	pop    edi
c0010fbe:	5d                   	pop    ebp
c0010fbf:	50                   	push   eax
c0010fc0:	53                   	push   ebx
c0010fc1:	e8 4c c3 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010fc6:	58                   	pop    eax
c0010fc7:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010fcc:	5a                   	pop    edx
c0010fcd:	68 ac 0c 02 c0       	push   0xc0020cac
c0010fd2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fd8:	e8 0f c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010fdd:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010fe2:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010fe8:	e8 3e da 00 00       	call   c001ea2b <CPU::readDR6()>
c0010fed:	59                   	pop    ecx
c0010fee:	5e                   	pop    esi
c0010fef:	50                   	push   eax
c0010ff0:	53                   	push   ebx
c0010ff1:	e8 1c c3 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010ff6:	5f                   	pop    edi
c0010ff7:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0010ffc:	5d                   	pop    ebp
c0010ffd:	68 b4 0c 02 c0       	push   0xc0020cb4
c0011002:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011008:	e8 df c2 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c001100d:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0011012:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011018:	e8 20 da 00 00       	call   c001ea3d <CPU::readDR7()>
c001101d:	5a                   	pop    edx
c001101e:	59                   	pop    ecx
c001101f:	50                   	push   eax
c0011020:	53                   	push   ebx
c0011021:	e8 ec c2 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0011026:	fa                   	cli    
c0011027:	f4                   	hlt    
c0011028:	83 c4 10             	add    esp,0x10
c001102b:	eb fe                	jmp    c001102b <displayDebugInfo(regs*)+0x415>

c001102d <x87EmulHandler(regs*, void*)>:
c001102d:	53                   	push   ebx
c001102e:	83 ec 08             	sub    esp,0x8
c0011031:	a1 0c 33 02 c0       	mov    eax,ds:0xc002330c
c0011036:	85 c0                	test   eax,eax
c0011038:	74 15                	je     c001104f <x87EmulHandler(regs*, void*)+0x22>
c001103a:	83 ec 0c             	sub    esp,0xc
c001103d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011041:	ff d0                	call   eax
c0011043:	83 c4 10             	add    esp,0x10
c0011046:	84 c0                	test   al,al
c0011048:	74 2f                	je     c0011079 <x87EmulHandler(regs*, void*)+0x4c>
c001104a:	83 c4 08             	add    esp,0x8
c001104d:	5b                   	pop    ebx
c001104e:	c3                   	ret    
c001104f:	83 ec 08             	sub    esp,0x8
c0011052:	8b 1d 08 32 02 c0    	mov    ebx,DWORD PTR ds:0xc0023208
c0011058:	6a 01                	push   0x1
c001105a:	68 bc 0c 02 c0       	push   0xc0020cbc
c001105f:	e8 18 62 00 00       	call   c001727c <Thr::loadDLL(char const*, bool)>
c0011064:	5a                   	pop    edx
c0011065:	59                   	pop    ecx
c0011066:	53                   	push   ebx
c0011067:	50                   	push   eax
c0011068:	e8 62 63 00 00       	call   c00173cf <Thr::executeDLL(unsigned long, void*)>
c001106d:	a1 0c 33 02 c0       	mov    eax,ds:0xc002330c
c0011072:	83 c4 10             	add    esp,0x10
c0011075:	85 c0                	test   eax,eax
c0011077:	75 c1                	jne    c001103a <x87EmulHandler(regs*, void*)+0xd>
c0011079:	83 ec 0c             	sub    esp,0xc
c001107c:	68 d9 0c 02 c0       	push   0xc0020cd9
c0011081:	e8 5f dd ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0011086:	58                   	pop    eax
c0011087:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001108b:	e8 86 fb ff ff       	call   c0010c16 <displayDebugInfo(regs*)>

c0011090 <gpFault(regs*, void*)>:
c0011090:	53                   	push   ebx
c0011091:	83 ec 14             	sub    esp,0x14
c0011094:	c7 05 08 33 02 c0 4b 88 01 c0 	mov    DWORD PTR ds:0xc0023308,0xc001884b
c001109e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00110a2:	53                   	push   ebx
c00110a3:	e8 a3 77 00 00       	call   c001884b <Vm::faultHandler(regs*)>
c00110a8:	83 c4 10             	add    esp,0x10
c00110ab:	84 c0                	test   al,al
c00110ad:	74 05                	je     c00110b4 <gpFault(regs*, void*)+0x24>
c00110af:	83 c4 08             	add    esp,0x8
c00110b2:	5b                   	pop    ebx
c00110b3:	c3                   	ret    
c00110b4:	83 ec 0c             	sub    esp,0xc
c00110b7:	68 d9 0c 02 c0       	push   0xc0020cd9
c00110bc:	e8 24 dd ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c00110c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110c4:	e8 4d fb ff ff       	call   c0010c16 <displayDebugInfo(regs*)>

c00110c9 <pgFault(regs*, void*)>:
c00110c9:	83 ec 18             	sub    esp,0x18
c00110cc:	68 f4 0c 02 c0       	push   0xc0020cf4
c00110d1:	e8 0f dd ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c00110d6:	58                   	pop    eax
c00110d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110db:	e8 36 fb ff ff       	call   c0010c16 <displayDebugInfo(regs*)>

c00110e0 <otherISRHandler(regs*, void*)>:
c00110e0:	53                   	push   ebx
c00110e1:	83 ec 0c             	sub    esp,0xc
c00110e4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00110e8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00110eb:	50                   	push   eax
c00110ec:	50                   	push   eax
c00110ed:	68 01 0d 02 c0       	push   0xc0020d01
c00110f2:	e8 ee dc ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c00110f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110fa:	e8 17 fb ff ff       	call   c0010c16 <displayDebugInfo(regs*)>

c00110ff <opcodeFault(regs*, void*)>:
c00110ff:	53                   	push   ebx
c0011100:	83 ec 08             	sub    esp,0x8
c0011103:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011107:	e8 68 2c 00 00       	call   c0013d74 <thisCPU()>
c001110c:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c0011113:	74 16                	je     c001112b <opcodeFault(regs*, void*)+0x2c>
c0011115:	83 ec 0c             	sub    esp,0xc
c0011118:	68 58 0b 02 c0       	push   0xc0020b58
c001111d:	e8 c3 dc ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0011122:	83 43 38 19          	add    DWORD PTR [ebx+0x38],0x19
c0011126:	83 c4 18             	add    esp,0x18
c0011129:	5b                   	pop    ebx
c001112a:	c3                   	ret    
c001112b:	83 ec 0c             	sub    esp,0xc
c001112e:	68 1e 0d 02 c0       	push   0xc0020d1e
c0011133:	e8 ad dc ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0011138:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001113b:	c1 e0 04             	shl    eax,0x4
c001113e:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0011141:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0011145:	89 14 24             	mov    DWORD PTR [esp],edx
c0011148:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c001114c:	52                   	push   edx
c001114d:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0011151:	52                   	push   edx
c0011152:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0011155:	50                   	push   eax
c0011156:	68 7c 0b 02 c0       	push   0xc0020b7c
c001115b:	e8 85 dc ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0011160:	83 c4 14             	add    esp,0x14
c0011163:	53                   	push   ebx
c0011164:	e8 ad fa ff ff       	call   c0010c16 <displayDebugInfo(regs*)>

c0011169 <displayProgramFault(char const*)>:
c0011169:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001116e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011171:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011177:	85 c0                	test   eax,eax
c0011179:	74 15                	je     c0011190 <displayProgramFault(char const*)+0x27>
c001117b:	83 ec 0c             	sub    esp,0xc
c001117e:	6a 04                	push   0x4
c0011180:	6a 0f                	push   0xf
c0011182:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011186:	50                   	push   eax
c0011187:	e8 22 be ff ff       	call   c000cfae <VgaText::puts(char const*, VgaColour, VgaColour)>
c001118c:	83 c4 1c             	add    esp,0x1c
c001118f:	c3                   	ret    
c0011190:	c3                   	ret    
c0011191:	90                   	nop

c0011192 <InterruptController::convertLegacyIRQNumber(int)>:
c0011192:	53                   	push   ebx
c0011193:	83 ec 14             	sub    esp,0x14
c0011196:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001119a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001119e:	e8 2f f3 ff ff       	call   c00104d2 <Device::getName()>
c00111a3:	83 c4 10             	add    esp,0x10
c00111a6:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00111a9:	74 07                	je     c00111b2 <InterruptController::convertLegacyIRQNumber(int)+0x20>
c00111ab:	89 d8                	mov    eax,ebx
c00111ad:	83 c4 08             	add    esp,0x8
c00111b0:	5b                   	pop    ebx
c00111b1:	c3                   	ret    
c00111b2:	83 fb 0f             	cmp    ebx,0xf
c00111b5:	7f 0e                	jg     c00111c5 <InterruptController::convertLegacyIRQNumber(int)+0x33>
c00111b7:	0f b6 9b 60 29 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd6a0]
c00111be:	83 c4 08             	add    esp,0x8
c00111c1:	89 d8                	mov    eax,ebx
c00111c3:	5b                   	pop    ebx
c00111c4:	c3                   	ret    
c00111c5:	83 ec 0c             	sub    esp,0xc
c00111c8:	68 a8 0a 02 c0       	push   0xc0020aa8
c00111cd:	e8 a8 38 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c00111d2:	89 d8                	mov    eax,ebx
c00111d4:	83 c4 10             	add    esp,0x10
c00111d7:	83 c4 08             	add    esp,0x8
c00111da:	5b                   	pop    ebx
c00111db:	c3                   	ret    

c00111dc <setupInterruptController()>:
c00111dc:	56                   	push   esi
c00111dd:	53                   	push   ebx
c00111de:	51                   	push   ecx
c00111df:	e8 8d 2b 00 00       	call   c0013d71 <getCPUNumber()>
c00111e4:	85 c0                	test   eax,eax
c00111e6:	0f 85 10 02 00 00    	jne    c00113fc <setupInterruptController()+0x220>
c00111ec:	83 ec 0c             	sub    esp,0xc
c00111ef:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c00111f4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00111fa:	68 58 21 00 00       	push   0x2158
c00111ff:	83 e0 01             	and    eax,0x1
c0011202:	89 c6                	mov    esi,eax
c0011204:	e8 ed da ff ff       	call   c000ecf6 <operator new(unsigned long)>
c0011209:	89 04 24             	mov    DWORD PTR [esp],eax
c001120c:	89 c3                	mov    ebx,eax
c001120e:	e8 59 c6 00 00       	call   c001d86c <PIC::PIC()>
c0011213:	6a 00                	push   0x0
c0011215:	6a 00                	push   0x0
c0011217:	6a 00                	push   0x0
c0011219:	53                   	push   ebx
c001121a:	e8 91 c9 00 00       	call   c001dbb0 <PIC::open(int, int, void*)>
c001121f:	83 c4 20             	add    esp,0x20
c0011222:	89 f0                	mov    eax,esi
c0011224:	84 c0                	test   al,al
c0011226:	0f 85 92 01 00 00    	jne    c00113be <setupInterruptController()+0x1e2>
c001122c:	83 ec 08             	sub    esp,0x8
c001122f:	53                   	push   ebx
c0011230:	ff 35 08 32 02 c0    	push   DWORD PTR ds:0xc0023208
c0011236:	e8 b5 ef ff ff       	call   c00101f0 <Device::addChild(Device*)>
c001123b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001123d:	6a 00                	push   0x0
c001123f:	68 e0 10 01 c0       	push   0xc00110e0
c0011244:	6a 00                	push   0x0
c0011246:	53                   	push   ebx
c0011247:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001124a:	83 c4 20             	add    esp,0x20
c001124d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001124f:	6a 00                	push   0x0
c0011251:	68 e0 10 01 c0       	push   0xc00110e0
c0011256:	6a 01                	push   0x1
c0011258:	53                   	push   ebx
c0011259:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001125c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001125e:	6a 00                	push   0x0
c0011260:	68 79 0a 01 c0       	push   0xc0010a79
c0011265:	6a 02                	push   0x2
c0011267:	53                   	push   ebx
c0011268:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001126b:	83 c4 20             	add    esp,0x20
c001126e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011270:	6a 00                	push   0x0
c0011272:	68 e0 10 01 c0       	push   0xc00110e0
c0011277:	6a 03                	push   0x3
c0011279:	53                   	push   ebx
c001127a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001127d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001127f:	6a 00                	push   0x0
c0011281:	68 e0 10 01 c0       	push   0xc00110e0
c0011286:	6a 04                	push   0x4
c0011288:	53                   	push   ebx
c0011289:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001128c:	83 c4 20             	add    esp,0x20
c001128f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011291:	6a 00                	push   0x0
c0011293:	68 e0 10 01 c0       	push   0xc00110e0
c0011298:	6a 05                	push   0x5
c001129a:	53                   	push   ebx
c001129b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001129e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112a0:	6a 00                	push   0x0
c00112a2:	68 ff 10 01 c0       	push   0xc00110ff
c00112a7:	6a 06                	push   0x6
c00112a9:	53                   	push   ebx
c00112aa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112ad:	83 c4 20             	add    esp,0x20
c00112b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112b2:	6a 00                	push   0x0
c00112b4:	68 2d 10 01 c0       	push   0xc001102d
c00112b9:	6a 07                	push   0x7
c00112bb:	53                   	push   ebx
c00112bc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112c1:	6a 00                	push   0x0
c00112c3:	68 a0 08 01 c0       	push   0xc00108a0
c00112c8:	6a 08                	push   0x8
c00112ca:	53                   	push   ebx
c00112cb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112ce:	83 c4 20             	add    esp,0x20
c00112d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112d3:	6a 00                	push   0x0
c00112d5:	68 e0 10 01 c0       	push   0xc00110e0
c00112da:	6a 09                	push   0x9
c00112dc:	53                   	push   ebx
c00112dd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112e2:	6a 00                	push   0x0
c00112e4:	68 e0 10 01 c0       	push   0xc00110e0
c00112e9:	6a 0a                	push   0xa
c00112eb:	53                   	push   ebx
c00112ec:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112ef:	83 c4 20             	add    esp,0x20
c00112f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112f4:	6a 00                	push   0x0
c00112f6:	68 e0 10 01 c0       	push   0xc00110e0
c00112fb:	6a 0b                	push   0xb
c00112fd:	53                   	push   ebx
c00112fe:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011301:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011303:	6a 00                	push   0x0
c0011305:	68 e0 10 01 c0       	push   0xc00110e0
c001130a:	6a 0c                	push   0xc
c001130c:	53                   	push   ebx
c001130d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011310:	83 c4 20             	add    esp,0x20
c0011313:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011315:	6a 00                	push   0x0
c0011317:	68 90 10 01 c0       	push   0xc0011090
c001131c:	6a 0d                	push   0xd
c001131e:	53                   	push   ebx
c001131f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011322:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011324:	6a 00                	push   0x0
c0011326:	68 c9 10 01 c0       	push   0xc00110c9
c001132b:	6a 0e                	push   0xe
c001132d:	53                   	push   ebx
c001132e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011331:	83 c4 20             	add    esp,0x20
c0011334:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011336:	6a 00                	push   0x0
c0011338:	68 e0 10 01 c0       	push   0xc00110e0
c001133d:	6a 0f                	push   0xf
c001133f:	53                   	push   ebx
c0011340:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011343:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011345:	6a 00                	push   0x0
c0011347:	68 e0 10 01 c0       	push   0xc00110e0
c001134c:	6a 10                	push   0x10
c001134e:	53                   	push   ebx
c001134f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011352:	83 c4 20             	add    esp,0x20
c0011355:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011357:	6a 00                	push   0x0
c0011359:	68 e0 10 01 c0       	push   0xc00110e0
c001135e:	6a 11                	push   0x11
c0011360:	53                   	push   ebx
c0011361:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011364:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011366:	6a 00                	push   0x0
c0011368:	68 e0 10 01 c0       	push   0xc00110e0
c001136d:	6a 12                	push   0x12
c001136f:	53                   	push   ebx
c0011370:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011373:	83 c4 20             	add    esp,0x20
c0011376:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011378:	6a 00                	push   0x0
c001137a:	68 e0 10 01 c0       	push   0xc00110e0
c001137f:	6a 13                	push   0x13
c0011381:	53                   	push   ebx
c0011382:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011385:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011387:	6a 00                	push   0x0
c0011389:	68 e0 10 01 c0       	push   0xc00110e0
c001138e:	6a 14                	push   0x14
c0011390:	53                   	push   ebx
c0011391:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011394:	83 c4 20             	add    esp,0x20
c0011397:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011399:	6a 00                	push   0x0
c001139b:	68 e0 10 01 c0       	push   0xc00110e0
c00113a0:	6a 1e                	push   0x1e
c00113a2:	53                   	push   ebx
c00113a3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00113a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00113a8:	6a 00                	push   0x0
c00113aa:	68 fd 61 01 c0       	push   0xc00161fd
c00113af:	6a 60                	push   0x60
c00113b1:	53                   	push   ebx
c00113b2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00113b5:	83 c4 20             	add    esp,0x20
c00113b8:	89 d8                	mov    eax,ebx
c00113ba:	5a                   	pop    edx
c00113bb:	5b                   	pop    ebx
c00113bc:	5e                   	pop    esi
c00113bd:	c3                   	ret    
c00113be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00113c0:	6a 00                	push   0x0
c00113c2:	6a 00                	push   0x0
c00113c4:	6a 00                	push   0x0
c00113c6:	53                   	push   ebx
c00113c7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00113ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00113cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00113cf:	ff 50 04             	call   DWORD PTR [eax+0x4]
c00113d2:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c00113d9:	e8 18 d9 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c00113de:	89 04 24             	mov    DWORD PTR [esp],eax
c00113e1:	89 c3                	mov    ebx,eax
c00113e3:	e8 c2 bf 00 00       	call   c001d3aa <APIC::APIC()>
c00113e8:	6a 00                	push   0x0
c00113ea:	6a 00                	push   0x0
c00113ec:	6a 00                	push   0x0
c00113ee:	53                   	push   ebx
c00113ef:	e8 d4 be 00 00       	call   c001d2c8 <APIC::open(int, int, void*)>
c00113f4:	83 c4 20             	add    esp,0x20
c00113f7:	e9 30 fe ff ff       	jmp    c001122c <setupInterruptController()+0x50>
c00113fc:	83 ec 0c             	sub    esp,0xc
c00113ff:	68 58 21 00 00       	push   0x2158
c0011404:	e8 ed d8 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c0011409:	89 04 24             	mov    DWORD PTR [esp],eax
c001140c:	89 c3                	mov    ebx,eax
c001140e:	e8 97 bf 00 00       	call   c001d3aa <APIC::APIC()>
c0011413:	6a 00                	push   0x0
c0011415:	6a 00                	push   0x0
c0011417:	6a 00                	push   0x0
c0011419:	53                   	push   ebx
c001141a:	e8 a9 be 00 00       	call   c001d2c8 <APIC::open(int, int, void*)>
c001141f:	83 c4 18             	add    esp,0x18
c0011422:	53                   	push   ebx
c0011423:	ff 35 08 32 02 c0    	push   DWORD PTR ds:0xc0023208
c0011429:	e8 c2 ed ff ff       	call   c00101f0 <Device::addChild(Device*)>
c001142e:	83 c4 10             	add    esp,0x10
c0011431:	89 d8                	mov    eax,ebx
c0011433:	5a                   	pop    edx
c0011434:	5b                   	pop    ebx
c0011435:	5e                   	pop    esi
c0011436:	c3                   	ret    
c0011437:	90                   	nop

c0011438 <startGUI(void*)>:
c0011438:	55                   	push   ebp
c0011439:	89 e5                	mov    ebp,esp
c001143b:	53                   	push   ebx
c001143c:	83 ec 04             	sub    esp,0x4
c001143f:	e8 98 63 00 00       	call   c00177dc <unlockScheduler()>
c0011444:	e8 7c 63 00 00       	call   c00177c5 <getIRQNestingLevel()>
c0011449:	83 ec 08             	sub    esp,0x8
c001144c:	50                   	push   eax
c001144d:	68 78 0d 02 c0       	push   0xc0020d78
c0011452:	e8 8e d9 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0011457:	83 c4 10             	add    esp,0x10
c001145a:	8b 1d 08 32 02 c0    	mov    ebx,DWORD PTR ds:0xc0023208
c0011460:	83 ec 08             	sub    esp,0x8
c0011463:	6a 01                	push   0x1
c0011465:	68 92 0d 02 c0       	push   0xc0020d92
c001146a:	e8 0d 5e 00 00       	call   c001727c <Thr::loadDLL(char const*, bool)>
c001146f:	83 c4 10             	add    esp,0x10
c0011472:	83 ec 08             	sub    esp,0x8
c0011475:	53                   	push   ebx
c0011476:	50                   	push   eax
c0011477:	e8 53 5f 00 00       	call   c00173cf <Thr::executeDLL(unsigned long, void*)>
c001147c:	83 c4 10             	add    esp,0x10
c001147f:	8b 1d 08 32 02 c0    	mov    ebx,DWORD PTR ds:0xc0023208
c0011485:	83 ec 08             	sub    esp,0x8
c0011488:	6a 01                	push   0x1
c001148a:	68 ac 0d 02 c0       	push   0xc0020dac
c001148f:	e8 e8 5d 00 00       	call   c001727c <Thr::loadDLL(char const*, bool)>
c0011494:	83 c4 10             	add    esp,0x10
c0011497:	83 ec 08             	sub    esp,0x8
c001149a:	53                   	push   ebx
c001149b:	50                   	push   eax
c001149c:	e8 2e 5f 00 00       	call   c00173cf <Thr::executeDLL(unsigned long, void*)>
c00114a1:	83 c4 10             	add    esp,0x10
c00114a4:	90                   	nop
c00114a5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00114a8:	c9                   	leave  
c00114a9:	c3                   	ret    

c00114aa <sendKeyToTerminal(unsigned char)>:
c00114aa:	55                   	push   ebp
c00114ab:	89 e5                	mov    ebp,esp
c00114ad:	83 ec 28             	sub    esp,0x28
c00114b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114b3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00114b6:	a1 c4 32 02 c0       	mov    eax,ds:0xc00232c4
c00114bb:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00114bf:	83 ec 08             	sub    esp,0x8
c00114c2:	52                   	push   edx
c00114c3:	50                   	push   eax
c00114c4:	e8 21 c0 ff ff       	call   c000d4ea <VgaText::receiveKey(unsigned char)>
c00114c9:	83 c4 10             	add    esp,0x10
c00114cc:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00114d0:	75 41                	jne    c0011513 <sendKeyToTerminal(unsigned char)+0x69>
c00114d2:	e8 2a 63 00 00       	call   c0017801 <lockStuff()>
c00114d7:	a1 20 33 02 c0       	mov    eax,ds:0xc0023320
c00114dc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00114df:	c7 05 20 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023320,0x0
c00114e9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00114ed:	74 1f                	je     c001150e <sendKeyToTerminal(unsigned char)+0x64>
c00114ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00114f2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00114f5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00114f8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00114fb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00114fe:	83 ec 0c             	sub    esp,0xc
c0011501:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011504:	e8 e1 6a 00 00       	call   c0017fea <unblockTask(ThreadControlBlock*)>
c0011509:	83 c4 10             	add    esp,0x10
c001150c:	eb db                	jmp    c00114e9 <sendKeyToTerminal(unsigned char)+0x3f>
c001150e:	e8 80 66 00 00       	call   c0017b93 <unlockStuff()>
c0011513:	90                   	nop
c0011514:	c9                   	leave  
c0011515:	c3                   	ret    

c0011516 <sendKeyboardToken(KeyboardToken)>:
c0011516:	55                   	push   ebp
c0011517:	89 e5                	mov    ebp,esp
c0011519:	83 ec 18             	sub    esp,0x18
c001151c:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001151f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011522:	0f b7 c0             	movzx  eax,ax
c0011525:	83 f2 01             	xor    edx,0x1
c0011528:	88 90 40 33 02 c0    	mov    BYTE PTR [eax-0x3ffdccc0],dl
c001152e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011531:	66 3d 03 02          	cmp    ax,0x203
c0011535:	75 07                	jne    c001153e <sendKeyboardToken(KeyboardToken)+0x28>
c0011537:	a0 40 34 02 c0       	mov    al,ds:0xc0023440
c001153c:	84 c0                	test   al,al
c001153e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0011542:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0011545:	a0 48 37 02 c0       	mov    al,ds:0xc0023748
c001154a:	38 c2                	cmp    dl,al
c001154c:	74 1c                	je     c001156a <sendKeyboardToken(KeyboardToken)+0x54>
c001154e:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0011551:	a2 48 37 02 c0       	mov    ds:0xc0023748,al
c0011556:	a0 48 37 02 c0       	mov    al,ds:0xc0023748
c001155b:	0f b6 c0             	movzx  eax,al
c001155e:	83 ec 0c             	sub    esp,0xc
c0011561:	50                   	push   eax
c0011562:	e8 f1 b1 ff ff       	call   c000c758 <setTerminalScrollLock(bool)>
c0011567:	83 c4 10             	add    esp,0x10
c001156a:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001156d:	84 c0                	test   al,al
c001156f:	0f 84 ae 00 00 00    	je     c0011623 <sendKeyboardToken(KeyboardToken)+0x10d>
c0011575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011578:	66 3d 10 03          	cmp    ax,0x310
c001157c:	75 06                	jne    c0011584 <sendKeyboardToken(KeyboardToken)+0x6e>
c001157e:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0011584:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011587:	66 3d 11 03          	cmp    ax,0x311
c001158b:	75 06                	jne    c0011593 <sendKeyboardToken(KeyboardToken)+0x7d>
c001158d:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0011593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011596:	66 3d 12 03          	cmp    ax,0x312
c001159a:	75 06                	jne    c00115a2 <sendKeyboardToken(KeyboardToken)+0x8c>
c001159c:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00115a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a5:	66 3d 13 03          	cmp    ax,0x313
c00115a9:	75 06                	jne    c00115b1 <sendKeyboardToken(KeyboardToken)+0x9b>
c00115ab:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00115b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b4:	66 3d 14 03          	cmp    ax,0x314
c00115b8:	75 06                	jne    c00115c0 <sendKeyboardToken(KeyboardToken)+0xaa>
c00115ba:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00115c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c3:	66 3d 15 03          	cmp    ax,0x315
c00115c7:	75 06                	jne    c00115cf <sendKeyboardToken(KeyboardToken)+0xb9>
c00115c9:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00115cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d2:	66 3d 16 03          	cmp    ax,0x316
c00115d6:	75 06                	jne    c00115de <sendKeyboardToken(KeyboardToken)+0xc8>
c00115d8:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00115de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e1:	66 3d 17 03          	cmp    ax,0x317
c00115e5:	75 06                	jne    c00115ed <sendKeyboardToken(KeyboardToken)+0xd7>
c00115e7:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00115ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115f0:	66 3d 18 03          	cmp    ax,0x318
c00115f4:	75 06                	jne    c00115fc <sendKeyboardToken(KeyboardToken)+0xe6>
c00115f6:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00115fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ff:	66 3d 19 03          	cmp    ax,0x319
c0011603:	75 06                	jne    c001160b <sendKeyboardToken(KeyboardToken)+0xf5>
c0011605:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001160b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001160e:	66 3d 1a 03          	cmp    ax,0x31a
c0011612:	0f 85 c9 00 00 00    	jne    c00116e1 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0011618:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001161e:	e9 be 00 00 00       	jmp    c00116e1 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0011623:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011626:	66 3d 10 03          	cmp    ax,0x310
c001162a:	75 0a                	jne    c0011636 <sendKeyboardToken(KeyboardToken)+0x120>
c001162c:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0011632:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011636:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011639:	66 3d 11 03          	cmp    ax,0x311
c001163d:	75 0a                	jne    c0011649 <sendKeyboardToken(KeyboardToken)+0x133>
c001163f:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0011645:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001164c:	66 3d 12 03          	cmp    ax,0x312
c0011650:	75 0a                	jne    c001165c <sendKeyboardToken(KeyboardToken)+0x146>
c0011652:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0011658:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001165c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001165f:	66 3d 13 03          	cmp    ax,0x313
c0011663:	75 0a                	jne    c001166f <sendKeyboardToken(KeyboardToken)+0x159>
c0011665:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001166b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001166f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011672:	66 3d 14 03          	cmp    ax,0x314
c0011676:	75 0a                	jne    c0011682 <sendKeyboardToken(KeyboardToken)+0x16c>
c0011678:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001167e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011682:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011685:	66 3d 15 03          	cmp    ax,0x315
c0011689:	75 0a                	jne    c0011695 <sendKeyboardToken(KeyboardToken)+0x17f>
c001168b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0011691:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011695:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011698:	66 3d 16 03          	cmp    ax,0x316
c001169c:	75 0a                	jne    c00116a8 <sendKeyboardToken(KeyboardToken)+0x192>
c001169e:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00116a4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00116a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116ab:	66 3d 17 03          	cmp    ax,0x317
c00116af:	75 0a                	jne    c00116bb <sendKeyboardToken(KeyboardToken)+0x1a5>
c00116b1:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00116b7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00116bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116be:	66 3d 18 03          	cmp    ax,0x318
c00116c2:	75 0a                	jne    c00116ce <sendKeyboardToken(KeyboardToken)+0x1b8>
c00116c4:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00116ca:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00116ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116d1:	66 3d 19 03          	cmp    ax,0x319
c00116d5:	75 0a                	jne    c00116e1 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00116d7:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00116dd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00116e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116e4:	66 3d 00 02          	cmp    ax,0x200
c00116e8:	75 2a                	jne    c0011714 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00116ea:	a0 40 37 02 c0       	mov    al,ds:0xc0023740
c00116ef:	83 f0 01             	xor    eax,0x1
c00116f2:	84 c0                	test   al,al
c00116f4:	74 1e                	je     c0011714 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00116f6:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c00116fb:	6a 01                	push   0x1
c00116fd:	6a 00                	push   0x0
c00116ff:	68 38 14 01 c0       	push   0xc0011438
c0011704:	50                   	push   eax
c0011705:	e8 fa 61 00 00       	call   c0017904 <Process::createThread(void (*)(void*), void*, int)>
c001170a:	83 c4 10             	add    esp,0x10
c001170d:	c6 05 40 37 02 c0 01 	mov    BYTE PTR ds:0xc0023740,0x1
c0011714:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011717:	66 3d 1d 03          	cmp    ax,0x31d
c001171b:	75 06                	jne    c0011723 <sendKeyboardToken(KeyboardToken)+0x20d>
c001171d:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0011723:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011726:	66 3d 1c 03          	cmp    ax,0x31c
c001172a:	75 06                	jne    c0011732 <sendKeyboardToken(KeyboardToken)+0x21c>
c001172c:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0011732:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011735:	66 3d 1b 03          	cmp    ax,0x31b
c0011739:	75 06                	jne    c0011741 <sendKeyboardToken(KeyboardToken)+0x22b>
c001173b:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0011741:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011744:	66 3d 1e 03          	cmp    ax,0x31e
c0011748:	75 06                	jne    c0011750 <sendKeyboardToken(KeyboardToken)+0x23a>
c001174a:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0011750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011753:	66 3d 1f 03          	cmp    ax,0x31f
c0011757:	75 06                	jne    c001175f <sendKeyboardToken(KeyboardToken)+0x249>
c0011759:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001175f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011762:	66 3d 1a 03          	cmp    ax,0x31a
c0011766:	75 06                	jne    c001176e <sendKeyboardToken(KeyboardToken)+0x258>
c0011768:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001176e:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0011772:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011775:	83 f0 01             	xor    eax,0x1
c0011778:	84 c0                	test   al,al
c001177a:	74 77                	je     c00117f3 <sendKeyboardToken(KeyboardToken)+0x2dd>
c001177c:	a0 41 34 02 c0       	mov    al,ds:0xc0023441
c0011781:	84 c0                	test   al,al
c0011783:	74 41                	je     c00117c6 <sendKeyboardToken(KeyboardToken)+0x2b0>
c0011785:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011789:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001178d:	74 2b                	je     c00117ba <sendKeyboardToken(KeyboardToken)+0x2a4>
c001178f:	8b 15 44 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023744
c0011795:	89 d0                	mov    eax,edx
c0011797:	c1 e0 02             	shl    eax,0x2
c001179a:	01 d0                	add    eax,edx
c001179c:	01 c0                	add    eax,eax
c001179e:	a3 44 37 02 c0       	mov    ds:0xc0023744,eax
c00117a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117a6:	0f b7 c0             	movzx  eax,ax
c00117a9:	8d 50 d0             	lea    edx,[eax-0x30]
c00117ac:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c00117b1:	01 d0                	add    eax,edx
c00117b3:	a3 44 37 02 c0       	mov    ds:0xc0023744,eax
c00117b8:	eb 6d                	jmp    c0011827 <sendKeyboardToken(KeyboardToken)+0x311>
c00117ba:	c7 05 44 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023744,0x0
c00117c4:	eb 61                	jmp    c0011827 <sendKeyboardToken(KeyboardToken)+0x311>
c00117c6:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c00117cb:	85 c0                	test   eax,eax
c00117cd:	74 18                	je     c00117e7 <sendKeyboardToken(KeyboardToken)+0x2d1>
c00117cf:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c00117d4:	0f b6 c0             	movzx  eax,al
c00117d7:	83 ec 0c             	sub    esp,0xc
c00117da:	50                   	push   eax
c00117db:	e8 ca fc ff ff       	call   c00114aa <sendKeyToTerminal(unsigned char)>
c00117e0:	83 c4 10             	add    esp,0x10
c00117e3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00117e7:	c7 05 44 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023744,0x0
c00117f1:	eb 34                	jmp    c0011827 <sendKeyboardToken(KeyboardToken)+0x311>
c00117f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117f6:	66 3d 01 01          	cmp    ax,0x101
c00117fa:	75 2b                	jne    c0011827 <sendKeyboardToken(KeyboardToken)+0x311>
c00117fc:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c0011801:	85 c0                	test   eax,eax
c0011803:	74 18                	je     c001181d <sendKeyboardToken(KeyboardToken)+0x307>
c0011805:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c001180a:	0f b6 c0             	movzx  eax,al
c001180d:	83 ec 0c             	sub    esp,0xc
c0011810:	50                   	push   eax
c0011811:	e8 94 fc ff ff       	call   c00114aa <sendKeyToTerminal(unsigned char)>
c0011816:	83 c4 10             	add    esp,0x10
c0011819:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001181d:	c7 05 44 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023744,0x0
c0011827:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001182a:	83 f0 01             	xor    eax,0x1
c001182d:	84 c0                	test   al,al
c001182f:	74 4c                	je     c001187d <sendKeyboardToken(KeyboardToken)+0x367>
c0011831:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011834:	83 f0 01             	xor    eax,0x1
c0011837:	84 c0                	test   al,al
c0011839:	74 42                	je     c001187d <sendKeyboardToken(KeyboardToken)+0x367>
c001183b:	a0 40 34 02 c0       	mov    al,ds:0xc0023440
c0011840:	83 f0 01             	xor    eax,0x1
c0011843:	84 c0                	test   al,al
c0011845:	74 36                	je     c001187d <sendKeyboardToken(KeyboardToken)+0x367>
c0011847:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001184a:	66 83 f8 1f          	cmp    ax,0x1f
c001184e:	76 09                	jbe    c0011859 <sendKeyboardToken(KeyboardToken)+0x343>
c0011850:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011853:	66 83 f8 7e          	cmp    ax,0x7e
c0011857:	76 12                	jbe    c001186b <sendKeyboardToken(KeyboardToken)+0x355>
c0011859:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001185c:	66 83 f8 0a          	cmp    ax,0xa
c0011860:	74 09                	je     c001186b <sendKeyboardToken(KeyboardToken)+0x355>
c0011862:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011865:	66 83 f8 08          	cmp    ax,0x8
c0011869:	75 12                	jne    c001187d <sendKeyboardToken(KeyboardToken)+0x367>
c001186b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001186e:	0f b6 c0             	movzx  eax,al
c0011871:	83 ec 0c             	sub    esp,0xc
c0011874:	50                   	push   eax
c0011875:	e8 30 fc ff ff       	call   c00114aa <sendKeyToTerminal(unsigned char)>
c001187a:	83 c4 10             	add    esp,0x10
c001187d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0011880:	83 f0 01             	xor    eax,0x1
c0011883:	84 c0                	test   al,al
c0011885:	74 4f                	je     c00118d6 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011887:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001188a:	83 f0 01             	xor    eax,0x1
c001188d:	84 c0                	test   al,al
c001188f:	74 45                	je     c00118d6 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011891:	a0 40 34 02 c0       	mov    al,ds:0xc0023440
c0011896:	84 c0                	test   al,al
c0011898:	74 3c                	je     c00118d6 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001189a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001189d:	66 83 f8 3f          	cmp    ax,0x3f
c00118a1:	76 33                	jbe    c00118d6 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00118a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118a6:	66 83 f8 7f          	cmp    ax,0x7f
c00118aa:	77 2a                	ja     c00118d6 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00118ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118af:	88 c2                	mov    dl,al
c00118b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118b4:	66 83 f8 5f          	cmp    ax,0x5f
c00118b8:	76 04                	jbe    c00118be <sendKeyboardToken(KeyboardToken)+0x3a8>
c00118ba:	b0 20                	mov    al,0x20
c00118bc:	eb 02                	jmp    c00118c0 <sendKeyboardToken(KeyboardToken)+0x3aa>
c00118be:	b0 00                	mov    al,0x0
c00118c0:	29 c2                	sub    edx,eax
c00118c2:	88 d0                	mov    al,dl
c00118c4:	83 e8 40             	sub    eax,0x40
c00118c7:	0f b6 c0             	movzx  eax,al
c00118ca:	83 ec 0c             	sub    esp,0xc
c00118cd:	50                   	push   eax
c00118ce:	e8 d7 fb ff ff       	call   c00114aa <sendKeyToTerminal(unsigned char)>
c00118d3:	83 c4 10             	add    esp,0x10
c00118d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118d9:	66 3d 00 03          	cmp    ax,0x300
c00118dd:	75 0f                	jne    c00118ee <sendKeyboardToken(KeyboardToken)+0x3d8>
c00118df:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00118e2:	83 f0 01             	xor    eax,0x1
c00118e5:	84 c0                	test   al,al
c00118e7:	74 05                	je     c00118ee <sendKeyboardToken(KeyboardToken)+0x3d8>
c00118e9:	e8 91 b6 ff ff       	call   c000cf7f <doTerminalCycle()>
c00118ee:	90                   	nop
c00118ef:	c9                   	leave  
c00118f0:	c3                   	ret    

c00118f1 <clearInternalKeybuffer(VgaText*)>:
c00118f1:	55                   	push   ebp
c00118f2:	89 e5                	mov    ebp,esp
c00118f4:	83 ec 08             	sub    esp,0x8
c00118f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118fa:	05 34 11 00 00       	add    eax,0x1134
c00118ff:	83 ec 0c             	sub    esp,0xc
c0011902:	50                   	push   eax
c0011903:	e8 1d ed fe ff       	call   c0000625 <strlen>
c0011908:	83 c4 10             	add    esp,0x10
c001190b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001190e:	81 c2 34 11 00 00    	add    edx,0x1134
c0011914:	83 ec 04             	sub    esp,0x4
c0011917:	50                   	push   eax
c0011918:	6a 00                	push   0x0
c001191a:	52                   	push   edx
c001191b:	e8 e8 ec fe ff       	call   c0000608 <memset>
c0011920:	83 c4 10             	add    esp,0x10
c0011923:	90                   	nop
c0011924:	c9                   	leave  
c0011925:	c3                   	ret    

c0011926 <readKeyboard(VgaText*, char*, unsigned long)>:
c0011926:	55                   	push   ebp
c0011927:	89 e5                	mov    ebp,esp
c0011929:	83 ec 18             	sub    esp,0x18
c001192c:	fb                   	sti    
c001192d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0011934:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0011938:	74 77                	je     c00119b1 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c001193a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001193d:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011943:	84 c0                	test   al,al
c0011945:	75 02                	jne    c0011949 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0011947:	eb f1                	jmp    c001193a <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0011949:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001194c:	8d 50 01             	lea    edx,[eax+0x1]
c001194f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0011952:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011955:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c001195b:	88 10                	mov    BYTE PTR [eax],dl
c001195d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011960:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011966:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0011969:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001196c:	05 34 11 00 00       	add    eax,0x1134
c0011971:	83 ec 0c             	sub    esp,0xc
c0011974:	50                   	push   eax
c0011975:	e8 ab ec fe ff       	call   c0000625 <strlen>
c001197a:	83 c4 10             	add    esp,0x10
c001197d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011980:	81 c2 34 11 00 00    	add    edx,0x1134
c0011986:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011989:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001198c:	81 c2 34 11 00 00    	add    edx,0x1134
c0011992:	83 ec 04             	sub    esp,0x4
c0011995:	50                   	push   eax
c0011996:	51                   	push   ecx
c0011997:	52                   	push   edx
c0011998:	e8 fd eb fe ff       	call   c000059a <memmove>
c001199d:	83 c4 10             	add    esp,0x10
c00119a0:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00119a3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00119a6:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00119aa:	75 88                	jne    c0011934 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00119ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00119af:	eb 03                	jmp    c00119b4 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c00119b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00119b4:	c9                   	leave  
c00119b5:	c3                   	ret    

c00119b6 <Keyboard::Keyboard(char const*)>:
c00119b6:	83 ec 0c             	sub    esp,0xc
c00119b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119bd:	83 ec 08             	sub    esp,0x8
c00119c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119c4:	50                   	push   eax
c00119c5:	e8 16 ea ff ff       	call   c00103e0 <Device::Device(char const*)>
c00119ca:	83 c4 10             	add    esp,0x10
c00119cd:	ba d0 0d 02 c0       	mov    edx,0xc0020dd0
c00119d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119d6:	89 10                	mov    DWORD PTR [eax],edx
c00119d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119dc:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00119e6:	c6 05 24 33 02 c0 01 	mov    BYTE PTR ds:0xc0023324,0x1
c00119ed:	90                   	nop
c00119ee:	83 c4 0c             	add    esp,0xc
c00119f1:	c3                   	ret    

c00119f2 <Keyboard::~Keyboard()>:
c00119f2:	83 ec 0c             	sub    esp,0xc
c00119f5:	ba d0 0d 02 c0       	mov    edx,0xc0020dd0
c00119fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119fe:	89 10                	mov    DWORD PTR [eax],edx
c0011a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a04:	83 ec 0c             	sub    esp,0xc
c0011a07:	50                   	push   eax
c0011a08:	e8 85 e6 ff ff       	call   c0010092 <Device::~Device()>
c0011a0d:	83 c4 10             	add    esp,0x10
c0011a10:	90                   	nop
c0011a11:	83 c4 0c             	add    esp,0xc
c0011a14:	c3                   	ret    
c0011a15:	90                   	nop

c0011a16 <Keyboard::~Keyboard()>:
c0011a16:	83 ec 0c             	sub    esp,0xc
c0011a19:	83 ec 0c             	sub    esp,0xc
c0011a1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a20:	e8 cd ff ff ff       	call   c00119f2 <Keyboard::~Keyboard()>
c0011a25:	83 c4 10             	add    esp,0x10
c0011a28:	83 ec 08             	sub    esp,0x8
c0011a2b:	68 5c 01 00 00       	push   0x15c
c0011a30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a34:	e8 cc d2 ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c0011a39:	83 c4 10             	add    esp,0x10
c0011a3c:	83 c4 0c             	add    esp,0xc
c0011a3f:	c3                   	ret    

c0011a40 <LogicalDisk::close(int, int, void*)>:
c0011a40:	83 c8 ff             	or     eax,0xffffffff
c0011a43:	c3                   	ret    

c0011a44 <LogicalDisk::~LogicalDisk()>:
c0011a44:	83 ec 0c             	sub    esp,0xc
c0011a47:	ba 80 0e 02 c0       	mov    edx,0xc0020e80
c0011a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a50:	89 10                	mov    DWORD PTR [eax],edx
c0011a52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a56:	83 ec 0c             	sub    esp,0xc
c0011a59:	50                   	push   eax
c0011a5a:	e8 33 e6 ff ff       	call   c0010092 <Device::~Device()>
c0011a5f:	83 c4 10             	add    esp,0x10
c0011a62:	90                   	nop
c0011a63:	83 c4 0c             	add    esp,0xc
c0011a66:	c3                   	ret    
c0011a67:	90                   	nop

c0011a68 <LogicalDisk::~LogicalDisk()>:
c0011a68:	83 ec 0c             	sub    esp,0xc
c0011a6b:	83 ec 0c             	sub    esp,0xc
c0011a6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a72:	e8 cd ff ff ff       	call   c0011a44 <LogicalDisk::~LogicalDisk()>
c0011a77:	83 c4 10             	add    esp,0x10
c0011a7a:	83 ec 08             	sub    esp,0x8
c0011a7d:	68 74 01 00 00       	push   0x174
c0011a82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a86:	e8 7a d2 ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c0011a8b:	83 c4 10             	add    esp,0x10
c0011a8e:	83 c4 0c             	add    esp,0xc
c0011a91:	c3                   	ret    

c0011a92 <LogicalDisk::open(int, int, void*)>:
c0011a92:	83 ec 18             	sub    esp,0x18
c0011a95:	68 fc 0d 02 c0       	push   0xc0020dfc
c0011a9a:	e8 db 2f 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c0011a9f:	83 c8 ff             	or     eax,0xffffffff
c0011aa2:	83 c4 1c             	add    esp,0x1c
c0011aa5:	c3                   	ret    

c0011aa6 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0011aa6:	53                   	push   ebx
c0011aa7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011aaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011ab3:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0011ab9:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0011abf:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0011ac5:	77 10                	ja     c0011ad7 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0011ac7:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0011acd:	89 d3                	mov    ebx,edx
c0011acf:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0011ad5:	72 05                	jb     c0011adc <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0011ad7:	83 c8 ff             	or     eax,0xffffffff
c0011ada:	89 c2                	mov    edx,eax
c0011adc:	5b                   	pop    ebx
c0011add:	c3                   	ret    

c0011ade <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0011ade:	56                   	push   esi
c0011adf:	83 c8 ff             	or     eax,0xffffffff
c0011ae2:	53                   	push   ebx
c0011ae3:	89 c2                	mov    edx,eax
c0011ae5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011ae9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0011aed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011af1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011af7:	77 27                	ja     c0011b20 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011af9:	89 d8                	mov    eax,ebx
c0011afb:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0011b01:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0011b07:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b0c:	89 c2                	mov    edx,eax
c0011b0e:	73 10                	jae    c0011b20 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011b10:	89 c8                	mov    eax,ecx
c0011b12:	89 da                	mov    edx,ebx
c0011b14:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0011b1a:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0011b20:	5b                   	pop    ebx
c0011b21:	5e                   	pop    esi
c0011b22:	c3                   	ret    
c0011b23:	90                   	nop

c0011b24 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0011b24:	83 ec 1c             	sub    esp,0x1c
c0011b27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011b2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011b33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011b37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b3b:	89 04 24             	mov    DWORD PTR [esp],eax
c0011b3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011b42:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011b46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011b4a:	83 ec 08             	sub    esp,0x8
c0011b4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011b51:	50                   	push   eax
c0011b52:	e8 89 e8 ff ff       	call   c00103e0 <Device::Device(char const*)>
c0011b57:	83 c4 10             	add    esp,0x10
c0011b5a:	ba 80 0e 02 c0       	mov    edx,0xc0020e80
c0011b5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011b63:	89 10                	mov    DWORD PTR [eax],edx
c0011b65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011b69:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011b70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011b74:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011b7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011b7f:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0011b89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011b8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011b95:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0011b9b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0011ba1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011ba5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011ba8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011bac:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0011bb2:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0011bb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011bbc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011bc0:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0011bc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011bca:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011bd4:	90                   	nop
c0011bd5:	83 c4 1c             	add    esp,0x1c
c0011bd8:	c3                   	ret    
c0011bd9:	90                   	nop

c0011bda <LogicalDisk::assignDriveLetter()>:
c0011bda:	55                   	push   ebp
c0011bdb:	57                   	push   edi
c0011bdc:	56                   	push   esi
c0011bdd:	53                   	push   ebx
c0011bde:	83 ec 14             	sub    esp,0x14
c0011be1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011be5:	8b 3d 60 37 02 c0    	mov    edi,DWORD PTR ds:0xc0023760
c0011beb:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0011bf1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0011bf5:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0011bfb:	8b 3d 64 37 02 c0    	mov    edi,DWORD PTR ds:0xc0023764
c0011c01:	3c 01                	cmp    al,0x1
c0011c03:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0011c07:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0011c0b:	19 c0                	sbb    eax,eax
c0011c0d:	83 e0 02             	and    eax,0x2
c0011c10:	83 c0 41             	add    eax,0x41
c0011c13:	0f be e8             	movsx  ebp,al
c0011c16:	3c 43                	cmp    al,0x43
c0011c18:	75 10                	jne    c0011c2a <LogicalDisk::assignDriveLetter()+0x50>
c0011c1a:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0011c21:	75 5d                	jne    c0011c80 <LogicalDisk::assignDriveLetter()+0xa6>
c0011c23:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0011c28:	75 56                	jne    c0011c80 <LogicalDisk::assignDriveLetter()+0xa6>
c0011c2a:	8d 75 bf             	lea    esi,[ebp-0x41]
c0011c2d:	ba 01 00 00 00       	mov    edx,0x1
c0011c32:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0011c36:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0011c3a:	d3 e2                	shl    edx,cl
c0011c3c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011c40:	89 d7                	mov    edi,edx
c0011c42:	89 d6                	mov    esi,edx
c0011c44:	c1 ff 1f             	sar    edi,0x1f
c0011c47:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0011c4b:	21 f9                	and    ecx,edi
c0011c4d:	09 d1                	or     ecx,edx
c0011c4f:	75 2f                	jne    c0011c80 <LogicalDisk::assignDriveLetter()+0xa6>
c0011c51:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0011c55:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011c59:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0011c5f:	09 f2                	or     edx,esi
c0011c61:	89 15 60 37 02 c0    	mov    DWORD PTR ds:0xc0023760,edx
c0011c67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c6b:	09 fa                	or     edx,edi
c0011c6d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0011c71:	89 15 64 37 02 c0    	mov    DWORD PTR ds:0xc0023764,edx
c0011c77:	89 1c bd 80 37 02 c0 	mov    DWORD PTR [edi*4-0x3ffdc880],ebx
c0011c7e:	eb 08                	jmp    c0011c88 <LogicalDisk::assignDriveLetter()+0xae>
c0011c80:	45                   	inc    ebp
c0011c81:	40                   	inc    eax
c0011c82:	3c 5b                	cmp    al,0x5b
c0011c84:	75 90                	jne    c0011c16 <LogicalDisk::assignDriveLetter()+0x3c>
c0011c86:	31 c0                	xor    eax,eax
c0011c88:	83 c4 14             	add    esp,0x14
c0011c8b:	5b                   	pop    ebx
c0011c8c:	5e                   	pop    esi
c0011c8d:	5f                   	pop    edi
c0011c8e:	5d                   	pop    ebp
c0011c8f:	c3                   	ret    

c0011c90 <LogicalDisk::mount()>:
c0011c90:	56                   	push   esi
c0011c91:	53                   	push   ebx
c0011c92:	51                   	push   ecx
c0011c93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c97:	8b 1d e0 32 02 c0    	mov    ebx,DWORD PTR ds:0xc00232e0
c0011c9d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0011ca7:	85 db                	test   ebx,ebx
c0011ca9:	74 50                	je     c0011cfb <LogicalDisk::mount()+0x6b>
c0011cab:	e8 15 5b 00 00       	call   c00177c5 <getIRQNestingLevel()>
c0011cb0:	52                   	push   edx
c0011cb1:	52                   	push   edx
c0011cb2:	50                   	push   eax
c0011cb3:	68 20 0e 02 c0       	push   0xc0020e20
c0011cb8:	e8 28 d1 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0011cbd:	83 c4 0c             	add    esp,0xc
c0011cc0:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0011cc7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011cc9:	83 e8 41             	sub    eax,0x41
c0011ccc:	50                   	push   eax
c0011ccd:	56                   	push   esi
c0011cce:	53                   	push   ebx
c0011ccf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011cd2:	83 c4 10             	add    esp,0x10
c0011cd5:	84 c0                	test   al,al
c0011cd7:	74 08                	je     c0011ce1 <LogicalDisk::mount()+0x51>
c0011cd9:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0011cdf:	eb 1c                	jmp    c0011cfd <LogicalDisk::mount()+0x6d>
c0011ce1:	e8 df 5a 00 00       	call   c00177c5 <getIRQNestingLevel()>
c0011ce6:	51                   	push   ecx
c0011ce7:	51                   	push   ecx
c0011ce8:	50                   	push   eax
c0011ce9:	68 3b 0e 02 c0       	push   0xc0020e3b
c0011cee:	e8 f2 d0 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0011cf3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011cf6:	83 c4 10             	add    esp,0x10
c0011cf9:	eb ac                	jmp    c0011ca7 <LogicalDisk::mount()+0x17>
c0011cfb:	31 c0                	xor    eax,eax
c0011cfd:	5a                   	pop    edx
c0011cfe:	5b                   	pop    ebx
c0011cff:	5e                   	pop    esi
c0011d00:	c3                   	ret    
c0011d01:	90                   	nop

c0011d02 <LogicalDisk::unmount()>:
c0011d02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d06:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011d10:	c3                   	ret    
c0011d11:	90                   	nop

c0011d12 <LogicalDisk::unassignDriveLetter()>:
c0011d12:	57                   	push   edi
c0011d13:	56                   	push   esi
c0011d14:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011d18:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0011d1f:	84 c9                	test   cl,cl
c0011d21:	75 0f                	jne    c0011d32 <LogicalDisk::unassignDriveLetter()+0x20>
c0011d23:	c7 44 24 0c 56 0e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020e56
c0011d2b:	5e                   	pop    esi
c0011d2c:	5f                   	pop    edi
c0011d2d:	e9 48 2d 00 00       	jmp    c0014a7a <Krnl::panic(char const*)>
c0011d32:	83 e9 41             	sub    ecx,0x41
c0011d35:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0011d3c:	b8 01 00 00 00       	mov    eax,0x1
c0011d41:	c7 04 8d 80 37 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdc880],0x0
c0011d4c:	d3 e0                	shl    eax,cl
c0011d4e:	89 c7                	mov    edi,eax
c0011d50:	f7 d0                	not    eax
c0011d52:	c1 ff 1f             	sar    edi,0x1f
c0011d55:	21 05 60 37 02 c0    	and    DWORD PTR ds:0xc0023760,eax
c0011d5b:	89 fe                	mov    esi,edi
c0011d5d:	f7 d6                	not    esi
c0011d5f:	21 35 64 37 02 c0    	and    DWORD PTR ds:0xc0023764,esi
c0011d65:	5e                   	pop    esi
c0011d66:	5f                   	pop    edi
c0011d67:	c3                   	ret    

c0011d68 <LogicalDisk::read(unsigned long long, int, void*)>:
c0011d68:	57                   	push   edi
c0011d69:	56                   	push   esi
c0011d6a:	53                   	push   ebx
c0011d6b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011d6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011d73:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011d77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d7b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011d81:	77 41                	ja     c0011dc4 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0011d83:	99                   	cdq    
c0011d84:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0011d8a:	01 c8                	add    eax,ecx
c0011d8c:	11 da                	adc    edx,ebx
c0011d8e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0011d94:	19 d7                	sbb    edi,edx
c0011d96:	72 33                	jb     c0011dcb <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0011d98:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0011d9e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0011da4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011da8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0011dac:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0011db2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011dbc:	5b                   	pop    ebx
c0011dbd:	5e                   	pop    esi
c0011dbe:	5f                   	pop    edi
c0011dbf:	e9 9a 09 00 00       	jmp    c001275e <VCache::read(unsigned long long, int, void*)>
c0011dc4:	b8 05 00 00 00       	mov    eax,0x5
c0011dc9:	eb 05                	jmp    c0011dd0 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0011dcb:	b8 07 00 00 00       	mov    eax,0x7
c0011dd0:	5b                   	pop    ebx
c0011dd1:	5e                   	pop    esi
c0011dd2:	5f                   	pop    edi
c0011dd3:	c3                   	ret    

c0011dd4 <LogicalDisk::write(unsigned long long, int, void*)>:
c0011dd4:	57                   	push   edi
c0011dd5:	56                   	push   esi
c0011dd6:	53                   	push   ebx
c0011dd7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011ddb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011ddf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011de3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011de7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011ded:	77 41                	ja     c0011e30 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0011def:	99                   	cdq    
c0011df0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0011df6:	01 c8                	add    eax,ecx
c0011df8:	11 da                	adc    edx,ebx
c0011dfa:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0011e00:	19 d7                	sbb    edi,edx
c0011e02:	72 33                	jb     c0011e37 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0011e04:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0011e0a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0011e10:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011e14:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0011e18:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0011e1e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011e24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011e28:	5b                   	pop    ebx
c0011e29:	5e                   	pop    esi
c0011e2a:	5f                   	pop    edi
c0011e2b:	e9 4a 08 00 00       	jmp    c001267a <VCache::write(unsigned long long, int, void*)>
c0011e30:	b8 05 00 00 00       	mov    eax,0x5
c0011e35:	eb 05                	jmp    c0011e3c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0011e37:	b8 07 00 00 00       	mov    eax,0x7
c0011e3c:	5b                   	pop    ebx
c0011e3d:	5e                   	pop    esi
c0011e3e:	5f                   	pop    edi
c0011e3f:	c3                   	ret    

c0011e40 <Mouse::Mouse(char const*)>:
c0011e40:	83 ec 0c             	sub    esp,0xc
c0011e43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e47:	83 ec 08             	sub    esp,0x8
c0011e4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e4e:	50                   	push   eax
c0011e4f:	e8 8c e5 ff ff       	call   c00103e0 <Device::Device(char const*)>
c0011e54:	83 c4 10             	add    esp,0x10
c0011e57:	ba ac 0e 02 c0       	mov    edx,0xc0020eac
c0011e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e60:	89 10                	mov    DWORD PTR [eax],edx
c0011e62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e66:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0011e70:	90                   	nop
c0011e71:	83 c4 0c             	add    esp,0xc
c0011e74:	c3                   	ret    
c0011e75:	90                   	nop

c0011e76 <Mouse::~Mouse()>:
c0011e76:	83 ec 0c             	sub    esp,0xc
c0011e79:	ba ac 0e 02 c0       	mov    edx,0xc0020eac
c0011e7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e82:	89 10                	mov    DWORD PTR [eax],edx
c0011e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e88:	83 ec 0c             	sub    esp,0xc
c0011e8b:	50                   	push   eax
c0011e8c:	e8 01 e2 ff ff       	call   c0010092 <Device::~Device()>
c0011e91:	83 c4 10             	add    esp,0x10
c0011e94:	90                   	nop
c0011e95:	83 c4 0c             	add    esp,0xc
c0011e98:	c3                   	ret    
c0011e99:	90                   	nop

c0011e9a <Mouse::~Mouse()>:
c0011e9a:	83 ec 0c             	sub    esp,0xc
c0011e9d:	83 ec 0c             	sub    esp,0xc
c0011ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ea4:	e8 cd ff ff ff       	call   c0011e76 <Mouse::~Mouse()>
c0011ea9:	83 c4 10             	add    esp,0x10
c0011eac:	83 ec 08             	sub    esp,0x8
c0011eaf:	68 58 01 00 00       	push   0x158
c0011eb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011eb8:	e8 48 ce ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c0011ebd:	83 c4 10             	add    esp,0x10
c0011ec0:	83 c4 0c             	add    esp,0xc
c0011ec3:	c3                   	ret    

c0011ec4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0011ec4:	55                   	push   ebp
c0011ec5:	57                   	push   edi
c0011ec6:	56                   	push   esi
c0011ec7:	53                   	push   ebx
c0011ec8:	81 ec 28 01 00 00    	sub    esp,0x128
c0011ece:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0011ed5:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0011edc:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0011ee3:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0011eea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011eee:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0011ef2:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0011ef9:	e8 d4 e5 ff ff       	call   c00104d2 <Device::getName()>
c0011efe:	5a                   	pop    edx
c0011eff:	59                   	pop    ecx
c0011f00:	50                   	push   eax
c0011f01:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0011f05:	55                   	push   ebp
c0011f06:	e8 9c e7 fe ff       	call   c00006a7 <strcpy>
c0011f0b:	5b                   	pop    ebx
c0011f0c:	58                   	pop    eax
c0011f0d:	68 d0 0e 02 c0       	push   0xc0020ed0
c0011f12:	55                   	push   ebp
c0011f13:	e8 46 e8 fe ff       	call   c000075e <strcat>
c0011f18:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0011f1f:	e8 d2 cd ff ff       	call   c000ecf6 <operator new(unsigned long)>
c0011f24:	83 c4 0c             	add    esp,0xc
c0011f27:	89 c3                	mov    ebx,eax
c0011f29:	57                   	push   edi
c0011f2a:	56                   	push   esi
c0011f2b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011f2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011f33:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0011f3a:	55                   	push   ebp
c0011f3b:	50                   	push   eax
c0011f3c:	e8 e3 fb ff ff       	call   c0011b24 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0011f41:	83 c4 14             	add    esp,0x14
c0011f44:	53                   	push   ebx
c0011f45:	e8 90 fc ff ff       	call   c0011bda <LogicalDisk::assignDriveLetter()>
c0011f4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011f4d:	e8 3e fd ff ff       	call   c0011c90 <LogicalDisk::mount()>
c0011f52:	58                   	pop    eax
c0011f53:	5a                   	pop    edx
c0011f54:	53                   	push   ebx
c0011f55:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0011f5c:	e8 8f e2 ff ff       	call   c00101f0 <Device::addChild(Device*)>
c0011f61:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011f67:	5b                   	pop    ebx
c0011f68:	5e                   	pop    esi
c0011f69:	5f                   	pop    edi
c0011f6a:	5d                   	pop    ebp
c0011f6b:	c3                   	ret    

c0011f6c <createPartitionsForDisk(PhysicalDisk*)>:
c0011f6c:	55                   	push   ebp
c0011f6d:	57                   	push   edi
c0011f6e:	56                   	push   esi
c0011f6f:	53                   	push   ebx
c0011f70:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0011f76:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0011f7d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0011f83:	3d 00 02 00 00       	cmp    eax,0x200
c0011f88:	74 27                	je     c0011fb1 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0011f8a:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0011f90:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0011f96:	83 ec 10             	sub    esp,0x10
c0011f99:	0f a4 f7 0a          	shld   edi,esi,0xa
c0011f9d:	99                   	cdq    
c0011f9e:	c1 e6 0a             	shl    esi,0xa
c0011fa1:	52                   	push   edx
c0011fa2:	89 fd                	mov    ebp,edi
c0011fa4:	50                   	push   eax
c0011fa5:	55                   	push   ebp
c0011fa6:	56                   	push   esi
c0011fa7:	e8 d0 c3 00 00       	call   c001e37c <__udivdi3>
c0011fac:	e9 b1 00 00 00       	jmp    c0012062 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0011fb1:	83 ec 0c             	sub    esp,0xc
c0011fb4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011fb6:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0011fba:	56                   	push   esi
c0011fbb:	6a 01                	push   0x1
c0011fbd:	6a 00                	push   0x0
c0011fbf:	6a 00                	push   0x0
c0011fc1:	53                   	push   ebx
c0011fc2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011fc5:	83 c4 20             	add    esp,0x20
c0011fc8:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0011fd0:	75 0a                	jne    c0011fdc <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0011fd2:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0011fda:	74 2c                	je     c0012008 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0011fdc:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0011fe2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0011fe8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0011fee:	83 ec 10             	sub    esp,0x10
c0011ff1:	0f a4 c2 0a          	shld   edx,eax,0xa
c0011ff5:	89 f7                	mov    edi,esi
c0011ff7:	c1 e0 0a             	shl    eax,0xa
c0011ffa:	c1 ff 1f             	sar    edi,0x1f
c0011ffd:	57                   	push   edi
c0011ffe:	56                   	push   esi
c0011fff:	52                   	push   edx
c0012000:	50                   	push   eax
c0012001:	e8 76 c3 00 00       	call   c001e37c <__udivdi3>
c0012006:	eb 5a                	jmp    c0012062 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012008:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001200f:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0012016:	83 e1 7f             	and    ecx,0x7f
c0012019:	83 e0 7f             	and    eax,0x7f
c001201c:	01 c1                	add    ecx,eax
c001201e:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0012025:	83 e0 7f             	and    eax,0x7f
c0012028:	01 c1                	add    ecx,eax
c001202a:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0012031:	83 e0 7f             	and    eax,0x7f
c0012034:	00 c1                	add    cl,al
c0012036:	74 41                	je     c0012079 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0012038:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001203e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012044:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001204a:	83 ec 10             	sub    esp,0x10
c001204d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012051:	89 f7                	mov    edi,esi
c0012053:	c1 e0 0a             	shl    eax,0xa
c0012056:	c1 ff 1f             	sar    edi,0x1f
c0012059:	57                   	push   edi
c001205a:	56                   	push   esi
c001205b:	52                   	push   edx
c001205c:	50                   	push   eax
c001205d:	e8 1a c3 00 00       	call   c001e37c <__udivdi3>
c0012062:	83 c4 14             	add    esp,0x14
c0012065:	52                   	push   edx
c0012066:	50                   	push   eax
c0012067:	6a 00                	push   0x0
c0012069:	6a 00                	push   0x0
c001206b:	53                   	push   ebx
c001206c:	e8 53 fe ff ff       	call   c0011ec4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012071:	83 c4 20             	add    esp,0x20
c0012074:	e9 79 01 00 00       	jmp    c00121f2 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0012079:	89 f0                	mov    eax,esi
c001207b:	31 f6                	xor    esi,esi
c001207d:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0012084:	75 02                	jne    c0012088 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0012086:	89 f1                	mov    ecx,esi
c0012088:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001208f:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0012096:	c1 e2 08             	shl    edx,0x8
c0012099:	c1 e7 10             	shl    edi,0x10
c001209c:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00120a4:	09 fa                	or     edx,edi
c00120a6:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00120ae:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00120b5:	83 c0 10             	add    eax,0x10
c00120b8:	09 fa                	or     edx,edi
c00120ba:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00120c1:	c1 e7 18             	shl    edi,0x18
c00120c4:	09 fa                	or     edx,edi
c00120c6:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00120cd:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00120d1:	c1 e7 10             	shl    edi,0x10
c00120d4:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00120db:	c1 e2 08             	shl    edx,0x8
c00120de:	09 fa                	or     edx,edi
c00120e0:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00120e7:	09 fa                	or     edx,edi
c00120e9:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00120f0:	c1 e7 18             	shl    edi,0x18
c00120f3:	09 fa                	or     edx,edi
c00120f5:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00120f9:	46                   	inc    esi
c00120fa:	83 fe 04             	cmp    esi,0x4
c00120fd:	0f 85 7a ff ff ff    	jne    c001207d <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012107:	83 f0 01             	xor    eax,0x1
c001210a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001210e:	75 57                	jne    c0012167 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012110:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012114:	83 f0 01             	xor    eax,0x1
c0012117:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001211b:	75 4a                	jne    c0012167 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001211d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012121:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012129:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012131:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012137:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001213d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012143:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012147:	89 f7                	mov    edi,esi
c0012149:	c1 e0 0a             	shl    eax,0xa
c001214c:	c1 ff 1f             	sar    edi,0x1f
c001214f:	57                   	push   edi
c0012150:	56                   	push   esi
c0012151:	52                   	push   edx
c0012152:	50                   	push   eax
c0012153:	e8 24 c2 00 00       	call   c001e37c <__udivdi3>
c0012158:	83 c4 10             	add    esp,0x10
c001215b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001215f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012163:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0012167:	84 c9                	test   cl,cl
c0012169:	74 53                	je     c00121be <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001216b:	0f b6 c9             	movzx  ecx,cl
c001216e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012172:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012176:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001217a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001217e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012182:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012186:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001218a:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001218e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012192:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0012196:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001219a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001219e:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00121a2:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00121a6:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00121aa:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00121ae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00121b2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00121b6:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00121ba:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00121be:	31 ed                	xor    ebp,ebp
c00121c0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00121c4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00121c8:	89 f8                	mov    eax,edi
c00121ca:	09 f0                	or     eax,esi
c00121cc:	74 1e                	je     c00121ec <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00121ce:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00121d2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00121d6:	89 d1                	mov    ecx,edx
c00121d8:	09 c1                	or     ecx,eax
c00121da:	74 10                	je     c00121ec <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00121dc:	83 ec 0c             	sub    esp,0xc
c00121df:	57                   	push   edi
c00121e0:	56                   	push   esi
c00121e1:	52                   	push   edx
c00121e2:	50                   	push   eax
c00121e3:	53                   	push   ebx
c00121e4:	e8 db fc ff ff       	call   c0011ec4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00121e9:	83 c4 20             	add    esp,0x20
c00121ec:	45                   	inc    ebp
c00121ed:	83 fd 04             	cmp    ebp,0x4
c00121f0:	75 ce                	jne    c00121c0 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00121f2:	81 c4 5c 02 00 00    	add    esp,0x25c
c00121f8:	5b                   	pop    ebx
c00121f9:	5e                   	pop    esi
c00121fa:	5f                   	pop    edi
c00121fb:	5d                   	pop    ebp
c00121fc:	c3                   	ret    
c00121fd:	90                   	nop

c00121fe <Timer::Timer(char const*)>:
c00121fe:	83 ec 0c             	sub    esp,0xc
c0012201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012205:	83 ec 08             	sub    esp,0x8
c0012208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001220c:	50                   	push   eax
c001220d:	e8 ce e1 ff ff       	call   c00103e0 <Device::Device(char const*)>
c0012212:	83 c4 10             	add    esp,0x10
c0012215:	ba e4 0e 02 c0       	mov    edx,0xc0020ee4
c001221a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001221e:	89 10                	mov    DWORD PTR [eax],edx
c0012220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012224:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001222e:	90                   	nop
c001222f:	83 c4 0c             	add    esp,0xc
c0012232:	c3                   	ret    
c0012233:	90                   	nop

c0012234 <Timer::~Timer()>:
c0012234:	83 ec 0c             	sub    esp,0xc
c0012237:	ba e4 0e 02 c0       	mov    edx,0xc0020ee4
c001223c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012240:	89 10                	mov    DWORD PTR [eax],edx
c0012242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012246:	83 ec 0c             	sub    esp,0xc
c0012249:	50                   	push   eax
c001224a:	e8 43 de ff ff       	call   c0010092 <Device::~Device()>
c001224f:	83 c4 10             	add    esp,0x10
c0012252:	90                   	nop
c0012253:	83 c4 0c             	add    esp,0xc
c0012256:	c3                   	ret    
c0012257:	90                   	nop

c0012258 <Timer::~Timer()>:
c0012258:	83 ec 0c             	sub    esp,0xc
c001225b:	83 ec 0c             	sub    esp,0xc
c001225e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012262:	e8 cd ff ff ff       	call   c0012234 <Timer::~Timer()>
c0012267:	83 c4 10             	add    esp,0x10
c001226a:	83 ec 08             	sub    esp,0x8
c001226d:	68 5c 01 00 00       	push   0x15c
c0012272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012276:	e8 8a ca ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c001227b:	83 c4 10             	add    esp,0x10
c001227e:	83 c4 0c             	add    esp,0xc
c0012281:	c3                   	ret    

c0012282 <Timer::read()>:
c0012282:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012286:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001228c:	c3                   	ret    

c001228d <timerHandler(unsigned long long)>:
c001228d:	55                   	push   ebp
c001228e:	57                   	push   edi
c001228f:	56                   	push   esi
c0012290:	53                   	push   ebx
c0012291:	83 ec 0c             	sub    esp,0xc
c0012294:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012298:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001229c:	01 35 f0 37 02 c0    	add    DWORD PTR ds:0xc00237f0,esi
c00122a2:	11 3d f4 37 02 c0    	adc    DWORD PTR ds:0xc00237f4,edi
c00122a8:	80 3d 0d 32 02 c0 00 	cmp    BYTE PTR ds:0xc002320d,0x0
c00122af:	0f 84 07 01 00 00    	je     c00123bc <timerHandler(unsigned long long)+0x12f>
c00122b5:	e8 47 55 00 00       	call   c0017801 <lockStuff()>
c00122ba:	83 ec 0c             	sub    esp,0xc
c00122bd:	68 bc 45 02 c0       	push   0xc00245bc
c00122c2:	e8 89 c7 00 00       	call   c001ea50 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00122c7:	c7 04 24 bc 45 02 c0 	mov    DWORD PTR [esp],0xc00245bc
c00122ce:	89 c3                	mov    ebx,eax
c00122d0:	e8 83 c7 00 00       	call   c001ea58 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00122d5:	83 c4 10             	add    esp,0x10
c00122d8:	84 c0                	test   al,al
c00122da:	74 60                	je     c001233c <timerHandler(unsigned long long)+0xaf>
c00122dc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00122e2:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00122e5:	85 c0                	test   eax,eax
c00122e7:	0f 85 91 00 00 00    	jne    c001237e <timerHandler(unsigned long long)+0xf1>
c00122ed:	e9 be 00 00 00       	jmp    c00123b0 <timerHandler(unsigned long long)+0x123>
c00122f2:	83 ec 0c             	sub    esp,0xc
c00122f5:	55                   	push   ebp
c00122f6:	e8 ef 5c 00 00       	call   c0017fea <unblockTask(ThreadControlBlock*)>
c00122fb:	83 c4 10             	add    esp,0x10
c00122fe:	39 eb                	cmp    ebx,ebp
c0012300:	75 12                	jne    c0012314 <timerHandler(unsigned long long)+0x87>
c0012302:	83 ec 0c             	sub    esp,0xc
c0012305:	68 bc 45 02 c0       	push   0xc00245bc
c001230a:	e8 41 c7 00 00       	call   c001ea50 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001230f:	89 c3                	mov    ebx,eax
c0012311:	83 c4 10             	add    esp,0x10
c0012314:	83 ec 0c             	sub    esp,0xc
c0012317:	68 bc 45 02 c0       	push   0xc00245bc
c001231c:	e8 37 c7 00 00       	call   c001ea58 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012321:	83 c4 10             	add    esp,0x10
c0012324:	84 c0                	test   al,al
c0012326:	75 b4                	jne    c00122dc <timerHandler(unsigned long long)+0x4f>
c0012328:	83 ec 0c             	sub    esp,0xc
c001232b:	68 bc 45 02 c0       	push   0xc00245bc
c0012330:	e8 1b c7 00 00       	call   c001ea50 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012335:	83 c4 10             	add    esp,0x10
c0012338:	39 d8                	cmp    eax,ebx
c001233a:	74 a0                	je     c00122dc <timerHandler(unsigned long long)+0x4f>
c001233c:	83 ec 0c             	sub    esp,0xc
c001233f:	68 bc 45 02 c0       	push   0xc00245bc
c0012344:	e8 07 c7 00 00       	call   c001ea50 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012349:	c7 04 24 bc 45 02 c0 	mov    DWORD PTR [esp],0xc00245bc
c0012350:	89 c5                	mov    ebp,eax
c0012352:	e8 1d c7 00 00       	call   c001ea74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012357:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001235a:	83 c4 10             	add    esp,0x10
c001235d:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0012360:	39 15 f0 37 02 c0    	cmp    DWORD PTR ds:0xc00237f0,edx
c0012366:	a1 f4 37 02 c0       	mov    eax,ds:0xc00237f4
c001236b:	19 c8                	sbb    eax,ecx
c001236d:	73 83                	jae    c00122f2 <timerHandler(unsigned long long)+0x65>
c001236f:	50                   	push   eax
c0012370:	50                   	push   eax
c0012371:	55                   	push   ebp
c0012372:	68 bc 45 02 c0       	push   0xc00245bc
c0012377:	e8 a6 c7 00 00       	call   c001eb22 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001237c:	eb 93                	jmp    c0012311 <timerHandler(unsigned long long)+0x84>
c001237e:	80 3d 0c 32 02 c0 00 	cmp    BYTE PTR ds:0xc002320c,0x0
c0012385:	74 29                	je     c00123b0 <timerHandler(unsigned long long)+0x123>
c0012387:	39 c6                	cmp    esi,eax
c0012389:	bb 00 00 00 00       	mov    ebx,0x0
c001238e:	19 df                	sbb    edi,ebx
c0012390:	72 19                	jb     c00123ab <timerHandler(unsigned long long)+0x11e>
c0012392:	e8 43 54 00 00       	call   c00177da <lockScheduler()>
c0012397:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001239c:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001239f:	e8 6a 57 00 00       	call   c0017b0e <schedule()>
c00123a4:	e8 33 54 00 00       	call   c00177dc <unlockScheduler()>
c00123a9:	eb 05                	jmp    c00123b0 <timerHandler(unsigned long long)+0x123>
c00123ab:	29 f0                	sub    eax,esi
c00123ad:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00123b0:	83 c4 0c             	add    esp,0xc
c00123b3:	5b                   	pop    ebx
c00123b4:	5e                   	pop    esi
c00123b5:	5f                   	pop    edi
c00123b6:	5d                   	pop    ebp
c00123b7:	e9 d7 57 00 00       	jmp    c0017b93 <unlockStuff()>
c00123bc:	83 c4 0c             	add    esp,0xc
c00123bf:	5b                   	pop    ebx
c00123c0:	5e                   	pop    esi
c00123c1:	5f                   	pop    edi
c00123c2:	5d                   	pop    ebp
c00123c3:	c3                   	ret    

c00123c4 <setupTimer(int)>:
c00123c4:	57                   	push   edi
c00123c5:	56                   	push   esi
c00123c6:	53                   	push   ebx
c00123c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00123cb:	e8 a1 19 00 00       	call   c0013d71 <getCPUNumber()>
c00123d0:	85 c0                	test   eax,eax
c00123d2:	74 32                	je     c0012406 <setupTimer(int)+0x42>
c00123d4:	83 ec 0c             	sub    esp,0xc
c00123d7:	68 60 01 00 00       	push   0x160
c00123dc:	e8 15 c9 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c00123e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00123e4:	89 c3                	mov    ebx,eax
c00123e6:	e8 2f ba 00 00       	call   c001de1a <APICTimer::APICTimer()>
c00123eb:	6a 00                	push   0x0
c00123ed:	6a 00                	push   0x0
c00123ef:	56                   	push   esi
c00123f0:	53                   	push   ebx
c00123f1:	e8 2c b9 00 00       	call   c001dd22 <APICTimer::open(int, int, void*)>
c00123f6:	83 c4 20             	add    esp,0x20
c00123f9:	e8 76 19 00 00       	call   c0013d74 <thisCPU()>
c00123fe:	56                   	push   esi
c00123ff:	56                   	push   esi
c0012400:	53                   	push   ebx
c0012401:	e9 96 00 00 00       	jmp    c001249c <setupTimer(int)+0xd8>
c0012406:	e8 69 19 00 00       	call   c0013d74 <thisCPU()>
c001240b:	83 ec 0c             	sub    esp,0xc
c001240e:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012414:	e8 b9 e0 ff ff       	call   c00104d2 <Device::getName()>
c0012419:	83 c4 10             	add    esp,0x10
c001241c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001241f:	0f 85 87 00 00 00    	jne    c00124ac <setupTimer(int)+0xe8>
c0012425:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c001242a:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0012431:	74 79                	je     c00124ac <setupTimer(int)+0xe8>
c0012433:	83 ec 0c             	sub    esp,0xc
c0012436:	68 5c 01 00 00       	push   0x15c
c001243b:	e8 b6 c8 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c0012440:	89 04 24             	mov    DWORD PTR [esp],eax
c0012443:	89 c3                	mov    ebx,eax
c0012445:	e8 20 bb 00 00       	call   c001df6a <PIT::PIT()>
c001244a:	59                   	pop    ecx
c001244b:	5f                   	pop    edi
c001244c:	53                   	push   ebx
c001244d:	ff 35 08 32 02 c0    	push   DWORD PTR ds:0xc0023208
c0012453:	e8 98 dd ff ff       	call   c00101f0 <Device::addChild(Device*)>
c0012458:	8b 03                	mov    eax,DWORD PTR [ebx]
c001245a:	6a 00                	push   0x0
c001245c:	6a 00                	push   0x0
c001245e:	56                   	push   esi
c001245f:	53                   	push   ebx
c0012460:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012463:	83 c4 14             	add    esp,0x14
c0012466:	68 60 01 00 00       	push   0x160
c001246b:	e8 86 c8 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c0012470:	89 04 24             	mov    DWORD PTR [esp],eax
c0012473:	89 c7                	mov    edi,eax
c0012475:	e8 a0 b9 00 00       	call   c001de1a <APICTimer::APICTimer()>
c001247a:	6a 00                	push   0x0
c001247c:	6a 00                	push   0x0
c001247e:	56                   	push   esi
c001247f:	57                   	push   edi
c0012480:	e8 9d b8 00 00       	call   c001dd22 <APICTimer::open(int, int, void*)>
c0012485:	83 c4 20             	add    esp,0x20
c0012488:	8b 03                	mov    eax,DWORD PTR [ebx]
c001248a:	6a 00                	push   0x0
c001248c:	6a 00                	push   0x0
c001248e:	6a 00                	push   0x0
c0012490:	53                   	push   ebx
c0012491:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012494:	e8 db 18 00 00       	call   c0013d74 <thisCPU()>
c0012499:	5a                   	pop    edx
c001249a:	59                   	pop    ecx
c001249b:	57                   	push   edi
c001249c:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00124a2:	e8 49 dd ff ff       	call   c00101f0 <Device::addChild(Device*)>
c00124a7:	83 c4 10             	add    esp,0x10
c00124aa:	eb 33                	jmp    c00124df <setupTimer(int)+0x11b>
c00124ac:	83 ec 0c             	sub    esp,0xc
c00124af:	68 5c 01 00 00       	push   0x15c
c00124b4:	e8 3d c8 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c00124b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00124bc:	89 c3                	mov    ebx,eax
c00124be:	e8 a7 ba 00 00       	call   c001df6a <PIT::PIT()>
c00124c3:	58                   	pop    eax
c00124c4:	5a                   	pop    edx
c00124c5:	53                   	push   ebx
c00124c6:	ff 35 08 32 02 c0    	push   DWORD PTR ds:0xc0023208
c00124cc:	e8 1f dd ff ff       	call   c00101f0 <Device::addChild(Device*)>
c00124d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124d3:	6a 00                	push   0x0
c00124d5:	6a 00                	push   0x0
c00124d7:	56                   	push   esi
c00124d8:	53                   	push   ebx
c00124d9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00124dc:	83 c4 20             	add    esp,0x20
c00124df:	89 d8                	mov    eax,ebx
c00124e1:	5b                   	pop    ebx
c00124e2:	5e                   	pop    esi
c00124e3:	5f                   	pop    edi
c00124e4:	c3                   	ret    
c00124e5:	90                   	nop

c00124e6 <VCache::VCache(PhysicalDisk*)>:
c00124e6:	53                   	push   ebx
c00124e7:	83 ec 08             	sub    esp,0x8
c00124ea:	ba 14 0f 02 c0       	mov    edx,0xc0020f14
c00124ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124f3:	89 10                	mov    DWORD PTR [eax],edx
c00124f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124f9:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0012500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012504:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001250b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001250f:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0012516:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001251d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012521:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0012528:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001252f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012533:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001253a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001253e:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012542:	83 ec 0c             	sub    esp,0xc
c0012545:	6a 10                	push   0x10
c0012547:	e8 aa c7 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c001254c:	83 c4 10             	add    esp,0x10
c001254f:	89 c3                	mov    ebx,eax
c0012551:	83 ec 0c             	sub    esp,0xc
c0012554:	53                   	push   ebx
c0012555:	e8 98 53 00 00       	call   c00178f2 <Mutex::Mutex()>
c001255a:	83 c4 10             	add    esp,0x10
c001255d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012561:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0012564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012568:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001256c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001256f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012573:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001257a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001257e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0012584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012588:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001258b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001258f:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0012595:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001259b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001259f:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00125a2:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00125a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125a9:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00125ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00125b1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00125b7:	c1 e0 06             	shl    eax,0x6
c00125ba:	83 ec 0c             	sub    esp,0xc
c00125bd:	50                   	push   eax
c00125be:	e8 5b 96 ff ff       	call   c000bc1e <malloc>
c00125c3:	83 c4 10             	add    esp,0x10
c00125c6:	89 c2                	mov    edx,eax
c00125c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125cc:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00125cf:	90                   	nop
c00125d0:	83 c4 08             	add    esp,0x8
c00125d3:	5b                   	pop    ebx
c00125d4:	c3                   	ret    
c00125d5:	90                   	nop

c00125d6 <VCache::writeWriteBuffer()>:
c00125d6:	53                   	push   ebx
c00125d7:	83 ec 14             	sub    esp,0x14
c00125da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00125de:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00125e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00125e3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00125e6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00125e9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00125ec:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00125ef:	50                   	push   eax
c00125f0:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00125f3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00125fa:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0012601:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0012605:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001260c:	83 c4 28             	add    esp,0x28
c001260f:	5b                   	pop    ebx
c0012610:	c3                   	ret    
c0012611:	90                   	nop

c0012612 <VCache::~VCache()>:
c0012612:	83 ec 0c             	sub    esp,0xc
c0012615:	ba 14 0f 02 c0       	mov    edx,0xc0020f14
c001261a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001261e:	89 10                	mov    DWORD PTR [eax],edx
c0012620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012624:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0012627:	84 c0                	test   al,al
c0012629:	74 0f                	je     c001263a <VCache::~VCache()+0x28>
c001262b:	83 ec 0c             	sub    esp,0xc
c001262e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012632:	e8 9f ff ff ff       	call   c00125d6 <VCache::writeWriteBuffer()>
c0012637:	83 c4 10             	add    esp,0x10
c001263a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001263e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0012641:	83 ec 0c             	sub    esp,0xc
c0012644:	50                   	push   eax
c0012645:	e8 e4 95 ff ff       	call   c000bc2e <free>
c001264a:	83 c4 10             	add    esp,0x10
c001264d:	90                   	nop
c001264e:	83 c4 0c             	add    esp,0xc
c0012651:	c3                   	ret    

c0012652 <VCache::~VCache()>:
c0012652:	83 ec 0c             	sub    esp,0xc
c0012655:	83 ec 0c             	sub    esp,0xc
c0012658:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001265c:	e8 b1 ff ff ff       	call   c0012612 <VCache::~VCache()>
c0012661:	83 c4 10             	add    esp,0x10
c0012664:	83 ec 08             	sub    esp,0x8
c0012667:	6a 30                	push   0x30
c0012669:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001266d:	e8 93 c6 ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c0012672:	83 c4 10             	add    esp,0x10
c0012675:	83 c4 0c             	add    esp,0xc
c0012678:	c3                   	ret    
c0012679:	90                   	nop

c001267a <VCache::write(unsigned long long, int, void*)>:
c001267a:	55                   	push   ebp
c001267b:	57                   	push   edi
c001267c:	56                   	push   esi
c001267d:	53                   	push   ebx
c001267e:	83 ec 28             	sub    esp,0x28
c0012681:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012685:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012689:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001268d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0012691:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012694:	e8 2d 58 00 00       	call   c0017ec6 <Semaphore::acquire()>
c0012699:	83 c4 10             	add    esp,0x10
c001269c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00126a0:	74 66                	je     c0012708 <VCache::write(unsigned long long, int, void*)+0x8e>
c00126a2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00126a5:	99                   	cdq    
c00126a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126aa:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00126ad:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00126b0:	89 c1                	mov    ecx,eax
c00126b2:	89 d0                	mov    eax,edx
c00126b4:	31 f1                	xor    ecx,esi
c00126b6:	31 f8                	xor    eax,edi
c00126b8:	89 ca                	mov    edx,ecx
c00126ba:	09 c2                	or     edx,eax
c00126bc:	75 3e                	jne    c00126fc <VCache::write(unsigned long long, int, void*)+0x82>
c00126be:	83 fd 01             	cmp    ebp,0x1
c00126c1:	75 39                	jne    c00126fc <VCache::write(unsigned long long, int, void*)+0x82>
c00126c3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00126c6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00126cc:	51                   	push   ecx
c00126cd:	50                   	push   eax
c00126ce:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00126d2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00126d6:	0f af c8             	imul   ecx,eax
c00126d9:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00126dc:	51                   	push   ecx
c00126dd:	e8 f0 de fe ff       	call   c00005d2 <memcpy>
c00126e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00126e5:	83 c4 10             	add    esp,0x10
c00126e8:	40                   	inc    eax
c00126e9:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00126ec:	83 f8 40             	cmp    eax,0x40
c00126ef:	75 57                	jne    c0012748 <VCache::write(unsigned long long, int, void*)+0xce>
c00126f1:	83 ec 0c             	sub    esp,0xc
c00126f4:	53                   	push   ebx
c00126f5:	e8 dc fe ff ff       	call   c00125d6 <VCache::writeWriteBuffer()>
c00126fa:	eb 34                	jmp    c0012730 <VCache::write(unsigned long long, int, void*)+0xb6>
c00126fc:	83 ec 0c             	sub    esp,0xc
c00126ff:	53                   	push   ebx
c0012700:	e8 d1 fe ff ff       	call   c00125d6 <VCache::writeWriteBuffer()>
c0012705:	83 c4 10             	add    esp,0x10
c0012708:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001270b:	83 fd 3f             	cmp    ebp,0x3f
c001270e:	7f 25                	jg     c0012735 <VCache::write(unsigned long long, int, void*)+0xbb>
c0012710:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0012713:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0012716:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0012719:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001271d:	52                   	push   edx
c001271e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0012724:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012728:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001272b:	e8 a2 de fe ff       	call   c00005d2 <memcpy>
c0012730:	83 c4 10             	add    esp,0x10
c0012733:	eb 13                	jmp    c0012748 <VCache::write(unsigned long long, int, void*)+0xce>
c0012735:	83 ec 0c             	sub    esp,0xc
c0012738:	8b 10                	mov    edx,DWORD PTR [eax]
c001273a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001273e:	55                   	push   ebp
c001273f:	57                   	push   edi
c0012740:	56                   	push   esi
c0012741:	50                   	push   eax
c0012742:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0012745:	83 c4 20             	add    esp,0x20
c0012748:	83 ec 0c             	sub    esp,0xc
c001274b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001274e:	e8 87 5d 00 00       	call   c00184da <Semaphore::release()>
c0012753:	83 c4 2c             	add    esp,0x2c
c0012756:	31 c0                	xor    eax,eax
c0012758:	5b                   	pop    ebx
c0012759:	5e                   	pop    esi
c001275a:	5f                   	pop    edi
c001275b:	5d                   	pop    ebp
c001275c:	c3                   	ret    
c001275d:	90                   	nop

c001275e <VCache::read(unsigned long long, int, void*)>:
c001275e:	57                   	push   edi
c001275f:	56                   	push   esi
c0012760:	53                   	push   ebx
c0012761:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012765:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012769:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001276d:	83 ec 0c             	sub    esp,0xc
c0012770:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012773:	e8 4e 57 00 00       	call   c0017ec6 <Semaphore::acquire()>
c0012778:	83 c4 10             	add    esp,0x10
c001277b:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001277f:	74 0c                	je     c001278d <VCache::read(unsigned long long, int, void*)+0x2f>
c0012781:	83 ec 0c             	sub    esp,0xc
c0012784:	53                   	push   ebx
c0012785:	e8 4c fe ff ff       	call   c00125d6 <VCache::writeWriteBuffer()>
c001278a:	83 c4 10             	add    esp,0x10
c001278d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012790:	83 ec 0c             	sub    esp,0xc
c0012793:	8b 10                	mov    edx,DWORD PTR [eax]
c0012795:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012799:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001279d:	57                   	push   edi
c001279e:	56                   	push   esi
c001279f:	50                   	push   eax
c00127a0:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00127a3:	83 c4 14             	add    esp,0x14
c00127a6:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00127a9:	e8 2c 5d 00 00       	call   c00184da <Semaphore::release()>
c00127ae:	83 c4 10             	add    esp,0x10
c00127b1:	31 c0                	xor    eax,eax
c00127b3:	5b                   	pop    ebx
c00127b4:	5e                   	pop    esi
c00127b5:	5f                   	pop    edi
c00127b6:	c3                   	ret    
c00127b7:	90                   	nop

c00127b8 <Video::putrect(int, int, int, int, unsigned int)>:
c00127b8:	55                   	push   ebp
c00127b9:	57                   	push   edi
c00127ba:	56                   	push   esi
c00127bb:	53                   	push   ebx
c00127bc:	83 ec 1c             	sub    esp,0x1c
c00127bf:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00127c3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00127c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00127cb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00127cf:	01 e8                	add    eax,ebp
c00127d1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00127d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127d9:	01 df                	add    edi,ebx
c00127db:	39 fb                	cmp    ebx,edi
c00127dd:	7d 1b                	jge    c00127fa <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00127df:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00127e3:	7d 12                	jge    c00127f7 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00127e5:	8b 16                	mov    edx,DWORD PTR [esi]
c00127e7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00127eb:	53                   	push   ebx
c00127ec:	55                   	push   ebp
c00127ed:	45                   	inc    ebp
c00127ee:	56                   	push   esi
c00127ef:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00127f2:	83 c4 10             	add    esp,0x10
c00127f5:	eb e8                	jmp    c00127df <Video::putrect(int, int, int, int, unsigned int)+0x27>
c00127f7:	43                   	inc    ebx
c00127f8:	eb e1                	jmp    c00127db <Video::putrect(int, int, int, int, unsigned int)+0x23>
c00127fa:	83 c4 1c             	add    esp,0x1c
c00127fd:	5b                   	pop    ebx
c00127fe:	5e                   	pop    esi
c00127ff:	5f                   	pop    edi
c0012800:	5d                   	pop    ebp
c0012801:	c3                   	ret    

c0012802 <Video::blit(unsigned int*, int, int, int, int)>:
c0012802:	55                   	push   ebp
c0012803:	57                   	push   edi
c0012804:	56                   	push   esi
c0012805:	53                   	push   ebx
c0012806:	83 ec 1c             	sub    esp,0x1c
c0012809:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001280d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012811:	85 c0                	test   eax,eax
c0012813:	79 02                	jns    c0012817 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0012815:	31 c0                	xor    eax,eax
c0012817:	c1 e0 02             	shl    eax,0x2
c001281a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001281e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012822:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012826:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001282a:	39 d8                	cmp    eax,ebx
c001282c:	7e 49                	jle    c0012877 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001282e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0012834:	7c 41                	jl     c0012877 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0012836:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001283a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001283e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012842:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0012846:	39 f9                	cmp    ecx,edi
c0012848:	7e 22                	jle    c001286c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001284a:	83 c5 04             	add    ebp,0x4
c001284d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012853:	7c 14                	jl     c0012869 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0012855:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012857:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001285a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001285e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012862:	56                   	push   esi
c0012863:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0012866:	83 c4 10             	add    esp,0x10
c0012869:	47                   	inc    edi
c001286a:	eb d2                	jmp    c001283e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001286c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012870:	43                   	inc    ebx
c0012871:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0012875:	eb ab                	jmp    c0012822 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0012877:	83 c4 1c             	add    esp,0x1c
c001287a:	5b                   	pop    ebx
c001287b:	5e                   	pop    esi
c001287c:	5f                   	pop    edi
c001287d:	5d                   	pop    ebp
c001287e:	c3                   	ret    
c001287f:	90                   	nop

c0012880 <Video::clearScreen(unsigned int)>:
c0012880:	57                   	push   edi
c0012881:	56                   	push   esi
c0012882:	53                   	push   ebx
c0012883:	31 db                	xor    ebx,ebx
c0012885:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012889:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001288f:	7e 1f                	jle    c00128b0 <Video::clearScreen(unsigned int)+0x30>
c0012891:	31 ff                	xor    edi,edi
c0012893:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012899:	7e 12                	jle    c00128ad <Video::clearScreen(unsigned int)+0x2d>
c001289b:	8b 06                	mov    eax,DWORD PTR [esi]
c001289d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00128a1:	53                   	push   ebx
c00128a2:	57                   	push   edi
c00128a3:	47                   	inc    edi
c00128a4:	56                   	push   esi
c00128a5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00128a8:	83 c4 10             	add    esp,0x10
c00128ab:	eb e6                	jmp    c0012893 <Video::clearScreen(unsigned int)+0x13>
c00128ad:	43                   	inc    ebx
c00128ae:	eb d9                	jmp    c0012889 <Video::clearScreen(unsigned int)+0x9>
c00128b0:	5b                   	pop    ebx
c00128b1:	5e                   	pop    esi
c00128b2:	5f                   	pop    edi
c00128b3:	c3                   	ret    

c00128b4 <Video::putpixel(int, int, unsigned int)>:
c00128b4:	c7 44 24 04 1c 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020f1c
c00128bc:	e9 24 c5 ff ff       	jmp    c000ede5 <Dbg::kprintf(char const*, ...)>
c00128c1:	90                   	nop

c00128c2 <Video::Video(char const*)>:
c00128c2:	83 ec 0c             	sub    esp,0xc
c00128c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128c9:	83 ec 08             	sub    esp,0x8
c00128cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128d0:	50                   	push   eax
c00128d1:	e8 0a db ff ff       	call   c00103e0 <Device::Device(char const*)>
c00128d6:	83 c4 10             	add    esp,0x10
c00128d9:	ba 34 0f 02 c0       	mov    edx,0xc0020f34
c00128de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128e2:	89 10                	mov    DWORD PTR [eax],edx
c00128e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128e8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00128f2:	90                   	nop
c00128f3:	83 c4 0c             	add    esp,0xc
c00128f6:	c3                   	ret    
c00128f7:	90                   	nop

c00128f8 <Video::~Video()>:
c00128f8:	83 ec 0c             	sub    esp,0xc
c00128fb:	ba 34 0f 02 c0       	mov    edx,0xc0020f34
c0012900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012904:	89 10                	mov    DWORD PTR [eax],edx
c0012906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001290a:	83 ec 0c             	sub    esp,0xc
c001290d:	50                   	push   eax
c001290e:	e8 7f d7 ff ff       	call   c0010092 <Device::~Device()>
c0012913:	83 c4 10             	add    esp,0x10
c0012916:	90                   	nop
c0012917:	83 c4 0c             	add    esp,0xc
c001291a:	c3                   	ret    
c001291b:	90                   	nop

c001291c <Video::~Video()>:
c001291c:	83 ec 0c             	sub    esp,0xc
c001291f:	83 ec 0c             	sub    esp,0xc
c0012922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012926:	e8 cd ff ff ff       	call   c00128f8 <Video::~Video()>
c001292b:	83 c4 10             	add    esp,0x10
c001292e:	83 ec 08             	sub    esp,0x8
c0012931:	68 64 01 00 00       	push   0x164
c0012936:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001293a:	e8 c6 c3 ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c001293f:	83 c4 10             	add    esp,0x10
c0012942:	83 c4 0c             	add    esp,0xc
c0012945:	c3                   	ret    

c0012946 <Video::isMonochrome()>:
c0012946:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001294a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0012950:	c3                   	ret    
c0012951:	90                   	nop

c0012952 <Video::getWidth()>:
c0012952:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012956:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001295c:	c3                   	ret    
c001295d:	90                   	nop

c001295e <Video::getHeight()>:
c001295e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012962:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012968:	c3                   	ret    
c0012969:	90                   	nop

c001296a <Video::drawCursor(int, int, unsigned char*, int)>:
c001296a:	55                   	push   ebp
c001296b:	57                   	push   edi
c001296c:	56                   	push   esi
c001296d:	53                   	push   ebx
c001296e:	83 ec 2c             	sub    esp,0x2c
c0012971:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012975:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012979:	83 f8 01             	cmp    eax,0x1
c001297c:	19 c9                	sbb    ecx,ecx
c001297e:	31 db                	xor    ebx,ebx
c0012980:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0012984:	89 cd                	mov    ebp,ecx
c0012986:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001298e:	f7 d5                	not    ebp
c0012990:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0012996:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001299a:	01 d8                	add    eax,ebx
c001299c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129a0:	56                   	push   esi
c00129a1:	e8 b8 ff ff ff       	call   c001295e <Video::getHeight()>
c00129a6:	59                   	pop    ecx
c00129a7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00129ab:	7e 70                	jle    c0012a1d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00129ad:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00129b1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00129b5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00129b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00129bc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00129c0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00129c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00129cb:	89 f8                	mov    eax,edi
c00129cd:	83 c0 20             	add    eax,0x20
c00129d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00129d4:	56                   	push   esi
c00129d5:	e8 78 ff ff ff       	call   c0012952 <Video::getWidth()>
c00129da:	5a                   	pop    edx
c00129db:	39 c7                	cmp    edi,eax
c00129dd:	7d 34                	jge    c0012a13 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00129df:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00129e4:	74 05                	je     c00129eb <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00129e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00129e8:	55                   	push   ebp
c00129e9:	eb 0d                	jmp    c00129f8 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00129eb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00129f0:	74 12                	je     c0012a04 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00129f2:	8b 06                	mov    eax,DWORD PTR [esi]
c00129f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00129fc:	57                   	push   edi
c00129fd:	56                   	push   esi
c00129fe:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012a01:	83 c4 10             	add    esp,0x10
c0012a04:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0012a08:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0012a0c:	47                   	inc    edi
c0012a0d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0012a11:	75 c1                	jne    c00129d4 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0012a13:	43                   	inc    ebx
c0012a14:	83 fb 20             	cmp    ebx,0x20
c0012a17:	0f 85 79 ff ff ff    	jne    c0012996 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0012a1d:	83 c4 2c             	add    esp,0x2c
c0012a20:	5b                   	pop    ebx
c0012a21:	5e                   	pop    esi
c0012a22:	5f                   	pop    edi
c0012a23:	5d                   	pop    ebp
c0012a24:	c3                   	ret    
c0012a25:	90                   	nop

c0012a26 <ACPI::close(int, int, void*)>:
c0012a26:	83 ec 1c             	sub    esp,0x1c
c0012a29:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0012a31:	74 0a                	je     c0012a3d <ACPI::close(int, int, void*)+0x17>
c0012a33:	b8 00 00 00 00       	mov    eax,0x0
c0012a38:	e9 9a 00 00 00       	jmp    c0012ad7 <ACPI::close(int, int, void*)+0xb1>
c0012a3d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0012a42:	75 37                	jne    c0012a7b <ACPI::close(int, int, void*)+0x55>
c0012a44:	83 ec 0c             	sub    esp,0xc
c0012a47:	68 6c 0f 02 c0       	push   0xc0020f6c
c0012a4c:	e8 94 c3 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0012a51:	83 c4 10             	add    esp,0x10
c0012a54:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0012a59:	85 c0                	test   eax,eax
c0012a5b:	74 07                	je     c0012a64 <ACPI::close(int, int, void*)+0x3e>
c0012a5d:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0012a62:	ff d0                	call   eax
c0012a64:	83 ec 0c             	sub    esp,0xc
c0012a67:	68 40 10 02 c0       	push   0xc0021040
c0012a6c:	e8 09 20 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c0012a71:	83 c4 10             	add    esp,0x10
c0012a74:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012a79:	eb 5c                	jmp    c0012ad7 <ACPI::close(int, int, void*)+0xb1>
c0012a7b:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0012a80:	75 50                	jne    c0012ad2 <ACPI::close(int, int, void*)+0xac>
c0012a82:	a1 04 38 02 c0       	mov    eax,ds:0xc0023804
c0012a87:	85 c0                	test   eax,eax
c0012a89:	74 07                	je     c0012a92 <ACPI::close(int, int, void*)+0x6c>
c0012a8b:	a1 04 38 02 c0       	mov    eax,ds:0xc0023804
c0012a90:	ff d0                	call   eax
c0012a92:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0012a97:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0012a9c:	83 e0 02             	and    eax,0x2
c0012a9f:	74 1c                	je     c0012abd <ACPI::close(int, int, void*)+0x97>
c0012aa1:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0012aa8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012aac:	89 c2                	mov    edx,eax
c0012aae:	ec                   	in     al,dx
c0012aaf:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012ab3:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012ab7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012abb:	eb da                	jmp    c0012a97 <ACPI::close(int, int, void*)+0x71>
c0012abd:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0012ac4:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0012ac9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0012acd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ad1:	ee                   	out    dx,al
c0012ad2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012ad7:	83 c4 1c             	add    esp,0x1c
c0012ada:	c3                   	ret    

c0012adb <findRSDP()>:
c0012adb:	83 ec 1c             	sub    esp,0x1c
c0012ade:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c0012ae3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012ae9:	83 e0 04             	and    eax,0x4
c0012aec:	84 c0                	test   al,al
c0012aee:	75 07                	jne    c0012af7 <findRSDP()+0x1c>
c0012af0:	b8 00 00 00 00       	mov    eax,0x0
c0012af5:	eb 6a                	jmp    c0012b61 <findRSDP()+0x86>
c0012af7:	a1 50 32 02 c0       	mov    eax,ds:0xc0023250
c0012afc:	3d ff 07 00 00       	cmp    eax,0x7ff
c0012b01:	7f 1b                	jg     c0012b1e <findRSDP()+0x43>
c0012b03:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c0012b08:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012b0e:	83 e2 fb             	and    edx,0xfffffffb
c0012b11:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012b17:	b8 00 00 00 00       	mov    eax,0x0
c0012b1c:	eb 43                	jmp    c0012b61 <findRSDP()+0x86>
c0012b1e:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0012b26:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0012b2e:	77 2c                	ja     c0012b5c <findRSDP()+0x81>
c0012b30:	83 ec 04             	sub    esp,0x4
c0012b33:	6a 08                	push   0x8
c0012b35:	68 79 0f 02 c0       	push   0xc0020f79
c0012b3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012b3e:	e8 2c da fe ff       	call   c000056f <memcmp>
c0012b43:	83 c4 10             	add    esp,0x10
c0012b46:	85 c0                	test   eax,eax
c0012b48:	0f 94 c0             	sete   al
c0012b4b:	84 c0                	test   al,al
c0012b4d:	74 06                	je     c0012b55 <findRSDP()+0x7a>
c0012b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012b53:	eb 0c                	jmp    c0012b61 <findRSDP()+0x86>
c0012b55:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0012b5a:	eb ca                	jmp    c0012b26 <findRSDP()+0x4b>
c0012b5c:	b8 00 00 00 00       	mov    eax,0x0
c0012b61:	83 c4 1c             	add    esp,0x1c
c0012b64:	c3                   	ret    

c0012b65 <loadACPITables(unsigned char*)>:
c0012b65:	56                   	push   esi
c0012b66:	53                   	push   ebx
c0012b67:	83 ec 44             	sub    esp,0x44
c0012b6a:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c0012b6f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012b75:	83 e0 04             	and    eax,0x4
c0012b78:	84 c0                	test   al,al
c0012b7a:	0f 84 05 02 00 00    	je     c0012d85 <loadACPITables(unsigned char*)+0x220>
c0012b80:	a0 20 3a 02 c0       	mov    al,ds:0xc0023a20
c0012b85:	84 c0                	test   al,al
c0012b87:	74 75                	je     c0012bfe <loadACPITables(unsigned char*)+0x99>
c0012b89:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012b8d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012b91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b98:	83 e8 24             	sub    eax,0x24
c0012b9b:	c1 e8 03             	shr    eax,0x3
c0012b9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012ba2:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0012baa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012bae:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0012bb2:	0f 8d b2 00 00 00    	jge    c0012c6a <loadACPITables(unsigned char*)+0x105>
c0012bb8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012bbc:	83 c0 24             	add    eax,0x24
c0012bbf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012bc3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012bc7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012bcb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012bcf:	c1 e0 03             	shl    eax,0x3
c0012bd2:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0012bd6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012bda:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012bdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0012bdf:	89 c1                	mov    ecx,eax
c0012be1:	a1 0c 38 02 c0       	mov    eax,ds:0xc002380c
c0012be6:	8d 50 01             	lea    edx,[eax+0x1]
c0012be9:	89 15 0c 38 02 c0    	mov    DWORD PTR ds:0xc002380c,edx
c0012bef:	89 ca                	mov    edx,ecx
c0012bf1:	89 14 c5 24 38 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc7dc],edx
c0012bf8:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0012bfc:	eb ac                	jmp    c0012baa <loadACPITables(unsigned char*)+0x45>
c0012bfe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012c02:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012c06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012c0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c0d:	83 e8 24             	sub    eax,0x24
c0012c10:	c1 e8 02             	shr    eax,0x2
c0012c13:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c17:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0012c1f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012c23:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0012c27:	7d 41                	jge    c0012c6a <loadACPITables(unsigned char*)+0x105>
c0012c29:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012c2d:	83 c0 24             	add    eax,0x24
c0012c30:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012c34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c38:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012c3c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012c40:	c1 e0 02             	shl    eax,0x2
c0012c43:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0012c47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c4b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012c4d:	a1 0c 38 02 c0       	mov    eax,ds:0xc002380c
c0012c52:	8d 50 01             	lea    edx,[eax+0x1]
c0012c55:	89 15 0c 38 02 c0    	mov    DWORD PTR ds:0xc002380c,edx
c0012c5b:	89 ca                	mov    edx,ecx
c0012c5d:	89 14 c5 24 38 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc7dc],edx
c0012c64:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0012c68:	eb b5                	jmp    c0012c1f <loadACPITables(unsigned char*)+0xba>
c0012c6a:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0012c72:	a1 0c 38 02 c0       	mov    eax,ds:0xc002380c
c0012c77:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0012c7b:	0f 8d 05 01 00 00    	jge    c0012d86 <loadACPITables(unsigned char*)+0x221>
c0012c81:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012c85:	8b 04 c5 24 38 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc7dc]
c0012c8c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c9c:	25 ff 0f 00 00       	and    eax,0xfff
c0012ca1:	89 c6                	mov    esi,eax
c0012ca3:	e8 4d b0 ff ff       	call   c000dcf5 <Virt::getAKernelVAS()>
c0012ca8:	89 c3                	mov    ebx,eax
c0012caa:	83 ec 0c             	sub    esp,0xc
c0012cad:	6a 01                	push   0x1
c0012caf:	e8 b1 ae ff ff       	call   c000db65 <Virt::allocateKernelVirtualPages(int)>
c0012cb4:	83 c4 10             	add    esp,0x10
c0012cb7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012cbb:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012cc1:	83 ec 0c             	sub    esp,0xc
c0012cc4:	6a 01                	push   0x1
c0012cc6:	6a 01                	push   0x1
c0012cc8:	50                   	push   eax
c0012cc9:	52                   	push   edx
c0012cca:	53                   	push   ebx
c0012ccb:	e8 b8 b7 ff ff       	call   c000e488 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012cd0:	83 c4 20             	add    esp,0x20
c0012cd3:	09 f0                	or     eax,esi
c0012cd5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012cd9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012cdd:	c1 e0 03             	shl    eax,0x3
c0012ce0:	05 20 38 02 c0       	add    eax,0xc0023820
c0012ce5:	83 ec 04             	sub    esp,0x4
c0012ce8:	6a 04                	push   0x4
c0012cea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012cee:	50                   	push   eax
c0012cef:	e8 de d8 fe ff       	call   c00005d2 <memcpy>
c0012cf4:	83 c4 10             	add    esp,0x10
c0012cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cfb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cfe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012d02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012d06:	05 00 10 00 00       	add    eax,0x1000
c0012d0b:	c1 e8 0c             	shr    eax,0xc
c0012d0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012d12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d16:	89 04 24             	mov    DWORD PTR [esp],eax
c0012d19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d1d:	25 ff 0f 00 00       	and    eax,0xfff
c0012d22:	89 c6                	mov    esi,eax
c0012d24:	e8 cc af ff ff       	call   c000dcf5 <Virt::getAKernelVAS()>
c0012d29:	89 c3                	mov    ebx,eax
c0012d2b:	83 ec 0c             	sub    esp,0xc
c0012d2e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012d32:	e8 2e ae ff ff       	call   c000db65 <Virt::allocateKernelVirtualPages(int)>
c0012d37:	83 c4 10             	add    esp,0x10
c0012d3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012d3e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012d44:	83 ec 0c             	sub    esp,0xc
c0012d47:	6a 01                	push   0x1
c0012d49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d4d:	50                   	push   eax
c0012d4e:	52                   	push   edx
c0012d4f:	53                   	push   ebx
c0012d50:	e8 33 b7 ff ff       	call   c000e488 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d55:	83 c4 20             	add    esp,0x20
c0012d58:	09 f0                	or     eax,esi
c0012d5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012d5e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0012d61:	83 ec 0c             	sub    esp,0xc
c0012d64:	50                   	push   eax
c0012d65:	e8 31 b1 ff ff       	call   c000de9b <Virt::freeKernelVirtualPages(unsigned long)>
c0012d6a:	83 c4 10             	add    esp,0x10
c0012d6d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012d71:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d75:	89 14 c5 24 38 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc7dc],edx
c0012d7c:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0012d80:	e9 ed fe ff ff       	jmp    c0012c72 <loadACPITables(unsigned char*)+0x10d>
c0012d85:	90                   	nop
c0012d86:	83 c4 44             	add    esp,0x44
c0012d89:	5b                   	pop    ebx
c0012d8a:	5e                   	pop    esi
c0012d8b:	c3                   	ret    

c0012d8c <findRSDT(unsigned char*)>:
c0012d8c:	56                   	push   esi
c0012d8d:	53                   	push   ebx
c0012d8e:	83 ec 44             	sub    esp,0x44
c0012d91:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c0012d96:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012d9c:	83 e0 04             	and    eax,0x4
c0012d9f:	84 c0                	test   al,al
c0012da1:	75 0a                	jne    c0012dad <findRSDT(unsigned char*)+0x21>
c0012da3:	b8 00 00 00 00       	mov    eax,0x0
c0012da8:	e9 f7 00 00 00       	jmp    c0012ea4 <findRSDT(unsigned char*)+0x118>
c0012dad:	83 ec 04             	sub    esp,0x4
c0012db0:	6a 24                	push   0x24
c0012db2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0012db6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012dba:	50                   	push   eax
c0012dbb:	e8 12 d8 fe ff       	call   c00005d2 <memcpy>
c0012dc0:	83 c4 10             	add    esp,0x10
c0012dc3:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0012dc7:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012dcb:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0012dd3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012dd7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012ddb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012ddf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012de3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012de7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012deb:	25 ff 0f 00 00       	and    eax,0xfff
c0012df0:	89 c6                	mov    esi,eax
c0012df2:	e8 fe ae ff ff       	call   c000dcf5 <Virt::getAKernelVAS()>
c0012df7:	89 c3                	mov    ebx,eax
c0012df9:	83 ec 0c             	sub    esp,0xc
c0012dfc:	6a 02                	push   0x2
c0012dfe:	e8 62 ad ff ff       	call   c000db65 <Virt::allocateKernelVirtualPages(int)>
c0012e03:	83 c4 10             	add    esp,0x10
c0012e06:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012e0a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012e10:	83 ec 0c             	sub    esp,0xc
c0012e13:	6a 01                	push   0x1
c0012e15:	6a 02                	push   0x2
c0012e17:	50                   	push   eax
c0012e18:	52                   	push   edx
c0012e19:	53                   	push   ebx
c0012e1a:	e8 69 b6 ff ff       	call   c000e488 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012e1f:	83 c4 20             	add    esp,0x20
c0012e22:	09 f0                	or     eax,esi
c0012e24:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012e28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012e2c:	25 ff 0f 00 00       	and    eax,0xfff
c0012e31:	89 c6                	mov    esi,eax
c0012e33:	e8 bd ae ff ff       	call   c000dcf5 <Virt::getAKernelVAS()>
c0012e38:	89 c3                	mov    ebx,eax
c0012e3a:	83 ec 0c             	sub    esp,0xc
c0012e3d:	6a 02                	push   0x2
c0012e3f:	e8 21 ad ff ff       	call   c000db65 <Virt::allocateKernelVirtualPages(int)>
c0012e44:	83 c4 10             	add    esp,0x10
c0012e47:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012e4b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012e51:	83 ec 0c             	sub    esp,0xc
c0012e54:	6a 01                	push   0x1
c0012e56:	6a 02                	push   0x2
c0012e58:	50                   	push   eax
c0012e59:	52                   	push   edx
c0012e5a:	53                   	push   ebx
c0012e5b:	e8 28 b6 ff ff       	call   c000e488 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012e60:	83 c4 20             	add    esp,0x20
c0012e63:	09 f0                	or     eax,esi
c0012e65:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012e69:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0012e6e:	75 11                	jne    c0012e81 <findRSDT(unsigned char*)+0xf5>
c0012e70:	c6 05 20 3a 02 c0 00 	mov    BYTE PTR ds:0xc0023a20,0x0
c0012e77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012e7b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012e7f:	eb 1f                	jmp    c0012ea0 <findRSDT(unsigned char*)+0x114>
c0012e81:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0012e86:	75 11                	jne    c0012e99 <findRSDT(unsigned char*)+0x10d>
c0012e88:	c6 05 20 3a 02 c0 01 	mov    BYTE PTR ds:0xc0023a20,0x1
c0012e8f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012e93:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012e97:	eb 07                	jmp    c0012ea0 <findRSDT(unsigned char*)+0x114>
c0012e99:	b8 00 00 00 00       	mov    eax,0x0
c0012e9e:	eb 04                	jmp    c0012ea4 <findRSDT(unsigned char*)+0x118>
c0012ea0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012ea4:	83 c4 44             	add    esp,0x44
c0012ea7:	5b                   	pop    ebx
c0012ea8:	5e                   	pop    esi
c0012ea9:	c3                   	ret    

c0012eaa <findDataTable(unsigned char*, char*)>:
c0012eaa:	83 ec 1c             	sub    esp,0x1c
c0012ead:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c0012eb2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012eb8:	83 e0 04             	and    eax,0x4
c0012ebb:	84 c0                	test   al,al
c0012ebd:	75 07                	jne    c0012ec6 <findDataTable(unsigned char*, char*)+0x1c>
c0012ebf:	b8 00 00 00 00       	mov    eax,0x0
c0012ec4:	eb 7c                	jmp    c0012f42 <findDataTable(unsigned char*, char*)+0x98>
c0012ec6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012ece:	a1 0c 38 02 c0       	mov    eax,ds:0xc002380c
c0012ed3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0012ed7:	7d 3a                	jge    c0012f13 <findDataTable(unsigned char*, char*)+0x69>
c0012ed9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012edd:	c1 e0 03             	shl    eax,0x3
c0012ee0:	05 20 38 02 c0       	add    eax,0xc0023820
c0012ee5:	83 ec 04             	sub    esp,0x4
c0012ee8:	6a 04                	push   0x4
c0012eea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012eee:	50                   	push   eax
c0012eef:	e8 7b d6 fe ff       	call   c000056f <memcmp>
c0012ef4:	83 c4 10             	add    esp,0x10
c0012ef7:	85 c0                	test   eax,eax
c0012ef9:	0f 94 c0             	sete   al
c0012efc:	84 c0                	test   al,al
c0012efe:	74 0d                	je     c0012f0d <findDataTable(unsigned char*, char*)+0x63>
c0012f00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f04:	8b 04 c5 24 38 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc7dc]
c0012f0b:	eb 35                	jmp    c0012f42 <findDataTable(unsigned char*, char*)+0x98>
c0012f0d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0012f11:	eb bb                	jmp    c0012ece <findDataTable(unsigned char*, char*)+0x24>
c0012f13:	a0 20 3a 02 c0       	mov    al,ds:0xc0023a20
c0012f18:	84 c0                	test   al,al
c0012f1a:	74 07                	je     c0012f23 <findDataTable(unsigned char*, char*)+0x79>
c0012f1c:	b8 58 00 00 00       	mov    eax,0x58
c0012f21:	eb 05                	jmp    c0012f28 <findDataTable(unsigned char*, char*)+0x7e>
c0012f23:	b8 52 00 00 00       	mov    eax,0x52
c0012f28:	83 ec 04             	sub    esp,0x4
c0012f2b:	50                   	push   eax
c0012f2c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f30:	68 64 10 02 c0       	push   0xc0021064
c0012f35:	e8 ab be ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0012f3a:	83 c4 10             	add    esp,0x10
c0012f3d:	b8 00 00 00 00       	mov    eax,0x0
c0012f42:	83 c4 1c             	add    esp,0x1c
c0012f45:	c3                   	ret    

c0012f46 <scanMADT()>:
c0012f46:	83 ec 2c             	sub    esp,0x2c
c0012f49:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c0012f4e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012f54:	83 e0 04             	and    eax,0x4
c0012f57:	84 c0                	test   al,al
c0012f59:	0f 84 73 03 00 00    	je     c00132d2 <scanMADT()+0x38c>
c0012f5f:	e8 77 fb ff ff       	call   c0012adb <findRSDP()>
c0012f64:	a3 2c 3a 02 c0       	mov    ds:0xc0023a2c,eax
c0012f69:	a1 2c 3a 02 c0       	mov    eax,ds:0xc0023a2c
c0012f6e:	85 c0                	test   eax,eax
c0012f70:	75 19                	jne    c0012f8b <scanMADT()+0x45>
c0012f72:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c0012f77:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012f7d:	83 e2 fb             	and    edx,0xfffffffb
c0012f80:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012f86:	e9 4b 03 00 00       	jmp    c00132d6 <scanMADT()+0x390>
c0012f8b:	a1 2c 3a 02 c0       	mov    eax,ds:0xc0023a2c
c0012f90:	83 ec 0c             	sub    esp,0xc
c0012f93:	50                   	push   eax
c0012f94:	e8 f3 fd ff ff       	call   c0012d8c <findRSDT(unsigned char*)>
c0012f99:	83 c4 10             	add    esp,0x10
c0012f9c:	a3 28 3a 02 c0       	mov    ds:0xc0023a28,eax
c0012fa1:	a1 28 3a 02 c0       	mov    eax,ds:0xc0023a28
c0012fa6:	85 c0                	test   eax,eax
c0012fa8:	75 19                	jne    c0012fc3 <scanMADT()+0x7d>
c0012faa:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c0012faf:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012fb5:	83 e2 fb             	and    edx,0xfffffffb
c0012fb8:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012fbe:	e9 13 03 00 00       	jmp    c00132d6 <scanMADT()+0x390>
c0012fc3:	a1 28 3a 02 c0       	mov    eax,ds:0xc0023a28
c0012fc8:	83 ec 0c             	sub    esp,0xc
c0012fcb:	50                   	push   eax
c0012fcc:	e8 94 fb ff ff       	call   c0012b65 <loadACPITables(unsigned char*)>
c0012fd1:	83 c4 10             	add    esp,0x10
c0012fd4:	a1 28 3a 02 c0       	mov    eax,ds:0xc0023a28
c0012fd9:	83 ec 08             	sub    esp,0x8
c0012fdc:	68 82 0f 02 c0       	push   0xc0020f82
c0012fe1:	50                   	push   eax
c0012fe2:	e8 c3 fe ff ff       	call   c0012eaa <findDataTable(unsigned char*, char*)>
c0012fe7:	83 c4 10             	add    esp,0x10
c0012fea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012fee:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012ff3:	75 19                	jne    c001300e <scanMADT()+0xc8>
c0012ff5:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c0012ffa:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013000:	83 e2 fe             	and    edx,0xfffffffe
c0013003:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013009:	e9 c8 02 00 00       	jmp    c00132d6 <scanMADT()+0x390>
c001300e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013016:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001301a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001301d:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0013021:	0f 87 af 02 00 00    	ja     c00132d6 <scanMADT()+0x390>
c0013027:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c001302f:	0f 87 a1 02 00 00    	ja     c00132d6 <scanMADT()+0x390>
c0013035:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013039:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001303d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013041:	8d 50 01             	lea    edx,[eax+0x1]
c0013044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013048:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001304c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013050:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0013054:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013058:	8d 50 01             	lea    edx,[eax+0x1]
c001305b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001305f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013063:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013067:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c001306b:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0013070:	0f 86 5f 02 00 00    	jbe    c00132d5 <scanMADT()+0x38f>
c0013076:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001307b:	75 57                	jne    c00130d4 <scanMADT()+0x18e>
c001307d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013081:	8d 50 01             	lea    edx,[eax+0x1]
c0013084:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013088:	8a 15 60 3b 02 c0    	mov    dl,BYTE PTR ds:0xc0023b60
c001308e:	0f b6 d2             	movzx  edx,dl
c0013091:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013095:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013099:	88 82 a0 3b 02 c0    	mov    BYTE PTR [edx-0x3ffdc460],al
c001309f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130a3:	8d 50 01             	lea    edx,[eax+0x1]
c00130a6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00130aa:	8a 15 60 3b 02 c0    	mov    dl,BYTE PTR ds:0xc0023b60
c00130b0:	8d 4a 01             	lea    ecx,[edx+0x1]
c00130b3:	88 0d 60 3b 02 c0    	mov    BYTE PTR ds:0xc0023b60,cl
c00130b9:	0f b6 d2             	movzx  edx,dl
c00130bc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00130c0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00130c4:	88 82 80 3b 02 c0    	mov    BYTE PTR [edx-0x3ffdc480],al
c00130ca:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00130cf:	e9 ea 01 00 00       	jmp    c00132be <scanMADT()+0x378>
c00130d4:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c00130d9:	0f 85 14 01 00 00    	jne    c00131f3 <scanMADT()+0x2ad>
c00130df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130e3:	8d 50 01             	lea    edx,[eax+0x1]
c00130e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00130ea:	8a 15 30 3a 02 c0    	mov    dl,BYTE PTR ds:0xc0023a30
c00130f0:	0f b6 d2             	movzx  edx,dl
c00130f3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00130f7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00130fb:	88 82 40 3a 02 c0    	mov    BYTE PTR [edx-0x3ffdc5c0],al
c0013101:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0013105:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013109:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001310d:	01 d0                	add    eax,edx
c001310f:	83 c0 2c             	add    eax,0x2c
c0013112:	8a 00                	mov    al,BYTE PTR [eax]
c0013114:	0f b6 d0             	movzx  edx,al
c0013117:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001311b:	8d 48 01             	lea    ecx,[eax+0x1]
c001311e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013122:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013126:	0f b6 c0             	movzx  eax,al
c0013129:	c1 e0 08             	shl    eax,0x8
c001312c:	89 d1                	mov    ecx,edx
c001312e:	09 c1                	or     ecx,eax
c0013130:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013134:	8d 50 02             	lea    edx,[eax+0x2]
c0013137:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001313b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001313f:	0f b6 c0             	movzx  eax,al
c0013142:	c1 e0 10             	shl    eax,0x10
c0013145:	09 c1                	or     ecx,eax
c0013147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001314b:	8d 50 03             	lea    edx,[eax+0x3]
c001314e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013152:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013156:	0f b6 c0             	movzx  eax,al
c0013159:	c1 e0 18             	shl    eax,0x18
c001315c:	09 c1                	or     ecx,eax
c001315e:	89 ca                	mov    edx,ecx
c0013160:	a0 30 3a 02 c0       	mov    al,ds:0xc0023a30
c0013165:	0f b6 c0             	movzx  eax,al
c0013168:	89 14 85 60 3a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc5a0],edx
c001316f:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013174:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013178:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001317c:	01 d0                	add    eax,edx
c001317e:	83 c0 2c             	add    eax,0x2c
c0013181:	8a 00                	mov    al,BYTE PTR [eax]
c0013183:	0f b6 d0             	movzx  edx,al
c0013186:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001318a:	8d 48 01             	lea    ecx,[eax+0x1]
c001318d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013191:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013195:	0f b6 c0             	movzx  eax,al
c0013198:	c1 e0 08             	shl    eax,0x8
c001319b:	89 d1                	mov    ecx,edx
c001319d:	09 c1                	or     ecx,eax
c001319f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131a3:	8d 50 02             	lea    edx,[eax+0x2]
c00131a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131aa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00131ae:	0f b6 c0             	movzx  eax,al
c00131b1:	c1 e0 10             	shl    eax,0x10
c00131b4:	09 c1                	or     ecx,eax
c00131b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131ba:	8d 50 03             	lea    edx,[eax+0x3]
c00131bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131c1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00131c5:	0f b6 c0             	movzx  eax,al
c00131c8:	c1 e0 18             	shl    eax,0x18
c00131cb:	09 c1                	or     ecx,eax
c00131cd:	89 ca                	mov    edx,ecx
c00131cf:	a0 30 3a 02 c0       	mov    al,ds:0xc0023a30
c00131d4:	0f b6 c0             	movzx  eax,al
c00131d7:	89 14 85 e0 3a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc520],edx
c00131de:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00131e3:	a0 30 3a 02 c0       	mov    al,ds:0xc0023a30
c00131e8:	40                   	inc    eax
c00131e9:	a2 30 3a 02 c0       	mov    ds:0xc0023a30,al
c00131ee:	e9 cb 00 00 00       	jmp    c00132be <scanMADT()+0x378>
c00131f3:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c00131f8:	0f 85 a6 00 00 00    	jne    c00132a4 <scanMADT()+0x35e>
c00131fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013202:	8d 50 01             	lea    edx,[eax+0x1]
c0013205:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013209:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001320d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013211:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0013215:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013219:	8d 50 01             	lea    edx,[eax+0x1]
c001321c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013220:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013224:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013228:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001322c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013230:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013234:	01 d0                	add    eax,edx
c0013236:	83 c0 2c             	add    eax,0x2c
c0013239:	8a 00                	mov    al,BYTE PTR [eax]
c001323b:	0f b6 d0             	movzx  edx,al
c001323e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013242:	8d 48 01             	lea    ecx,[eax+0x1]
c0013245:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013249:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001324d:	0f b6 c0             	movzx  eax,al
c0013250:	c1 e0 08             	shl    eax,0x8
c0013253:	89 d1                	mov    ecx,edx
c0013255:	09 c1                	or     ecx,eax
c0013257:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001325b:	8d 50 02             	lea    edx,[eax+0x2]
c001325e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013262:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013266:	0f b6 c0             	movzx  eax,al
c0013269:	c1 e0 10             	shl    eax,0x10
c001326c:	09 c1                	or     ecx,eax
c001326e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013272:	8d 50 03             	lea    edx,[eax+0x3]
c0013275:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013279:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001327d:	0f b6 c0             	movzx  eax,al
c0013280:	c1 e0 18             	shl    eax,0x18
c0013283:	09 c8                	or     eax,ecx
c0013285:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013289:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001328e:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0013293:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0013298:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001329c:	88 90 60 29 02 c0    	mov    BYTE PTR [eax-0x3ffdd6a0],dl
c00132a2:	eb 1a                	jmp    c00132be <scanMADT()+0x378>
c00132a4:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c00132a9:	75 07                	jne    c00132b2 <scanMADT()+0x36c>
c00132ab:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00132b0:	eb 0c                	jmp    c00132be <scanMADT()+0x378>
c00132b2:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c00132b7:	75 05                	jne    c00132be <scanMADT()+0x378>
c00132b9:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c00132be:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c00132c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132c7:	01 d0                	add    eax,edx
c00132c9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00132cd:	e9 44 fd ff ff       	jmp    c0013016 <scanMADT()+0xd0>
c00132d2:	90                   	nop
c00132d3:	eb 01                	jmp    c00132d6 <scanMADT()+0x390>
c00132d5:	90                   	nop
c00132d6:	83 c4 2c             	add    esp,0x2c
c00132d9:	c3                   	ret    

c00132da <ACPI::ACPI()>:
c00132da:	83 ec 0c             	sub    esp,0xc
c00132dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132e1:	83 ec 08             	sub    esp,0x8
c00132e4:	68 87 0f 02 c0       	push   0xc0020f87
c00132e9:	50                   	push   eax
c00132ea:	e8 f1 d0 ff ff       	call   c00103e0 <Device::Device(char const*)>
c00132ef:	83 c4 10             	add    esp,0x10
c00132f2:	ba 30 11 02 c0       	mov    edx,0xc0021130
c00132f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132fb:	89 10                	mov    DWORD PTR [eax],edx
c00132fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013301:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001330c:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0013316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001331a:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013328:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c001332f:	e8 12 fc ff ff       	call   c0012f46 <scanMADT()>
c0013334:	90                   	nop
c0013335:	83 c4 0c             	add    esp,0xc
c0013338:	c3                   	ret    
c0013339:	90                   	nop

c001333a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001333a:	83 ec 2c             	sub    esp,0x2c
c001333d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013341:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013345:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013349:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001334d:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013352:	88 d0                	mov    al,dl
c0013354:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013358:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001335d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013365:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013369:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001336f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013373:	0f 8d 97 00 00 00    	jge    c0013410 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0013379:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001337d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013381:	83 c2 2a             	add    edx,0x2a
c0013384:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0013388:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001338d:	75 78                	jne    c0013407 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001338f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013393:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013397:	83 c2 2a             	add    edx,0x2a
c001339a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001339e:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00133a2:	75 63                	jne    c0013407 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00133a4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00133a9:	74 3a                	je     c00133e5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00133ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00133af:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00133b3:	83 c2 2a             	add    edx,0x2a
c00133b6:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00133ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00133c1:	39 c2                	cmp    edx,eax
c00133c3:	74 10                	je     c00133d5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00133c5:	83 ec 0c             	sub    esp,0xc
c00133c8:	68 94 10 02 c0       	push   0xc0021094
c00133cd:	e8 a8 16 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c00133d2:	83 c4 10             	add    esp,0x10
c00133d5:	83 ec 0c             	sub    esp,0xc
c00133d8:	68 8c 0f 02 c0       	push   0xc0020f8c
c00133dd:	e8 98 16 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c00133e2:	83 c4 10             	add    esp,0x10
c00133e5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00133e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00133ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00133f1:	83 c2 2a             	add    edx,0x2a
c00133f4:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00133f8:	8b 02                	mov    eax,DWORD PTR [edx]
c00133fa:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00133fd:	89 01                	mov    DWORD PTR [ecx],eax
c00133ff:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013402:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0013407:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001340b:	e9 55 ff ff ff       	jmp    c0013365 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0013410:	90                   	nop
c0013411:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013415:	83 c4 2c             	add    esp,0x2c
c0013418:	c2 04 00             	ret    0x4
c001341b:	90                   	nop

c001341c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001341c:	56                   	push   esi
c001341d:	53                   	push   ebx
c001341e:	83 ec 14             	sub    esp,0x14
c0013421:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013425:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013429:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001342d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013432:	88 c8                	mov    al,cl
c0013434:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013438:	88 d0                	mov    al,dl
c001343a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001343e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013442:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013448:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001344c:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013452:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013457:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001345c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0013461:	83 ec 04             	sub    esp,0x4
c0013464:	56                   	push   esi
c0013465:	53                   	push   ebx
c0013466:	51                   	push   ecx
c0013467:	52                   	push   edx
c0013468:	50                   	push   eax
c0013469:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001346d:	68 c4 10 02 c0       	push   0xc00210c4
c0013472:	e8 6e b9 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0013477:	83 c4 20             	add    esp,0x20
c001347a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001347e:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013484:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013488:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001348b:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001348f:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013497:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001349d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00134a1:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00134a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00134a8:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00134ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134b1:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00134b7:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00134bb:	8d 48 01             	lea    ecx,[eax+0x1]
c00134be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134c2:	83 c2 2a             	add    edx,0x2a
c00134c5:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00134c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134cd:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00134d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134d7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00134da:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00134de:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00134e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134e6:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00134ec:	8d 50 01             	lea    edx,[eax+0x1]
c00134ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134f3:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c00134f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134fd:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013503:	3d 00 08 00 00       	cmp    eax,0x800
c0013508:	75 10                	jne    c001351a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c001350a:	83 ec 0c             	sub    esp,0xc
c001350d:	68 9b 0f 02 c0       	push   0xc0020f9b
c0013512:	e8 63 15 00 00       	call   c0014a7a <Krnl::panic(char const*)>
c0013517:	83 c4 10             	add    esp,0x10
c001351a:	90                   	nop
c001351b:	83 c4 14             	add    esp,0x14
c001351e:	5b                   	pop    ebx
c001351f:	5e                   	pop    esi
c0013520:	c3                   	ret    
c0013521:	90                   	nop

c0013522 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0013522:	b8 00 00 00 00       	mov    eax,0x0
c0013527:	c3                   	ret    

c0013528 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0013528:	83 ec 1c             	sub    esp,0x1c
c001352b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001352f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0013532:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013536:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c001353b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0013540:	83 ec 08             	sub    esp,0x8
c0013543:	52                   	push   edx
c0013544:	50                   	push   eax
c0013545:	e8 ec 7c ff ff       	call   c000b236 <Computer::readCMOS(unsigned char)>
c001354a:	83 c4 10             	add    esp,0x10
c001354d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0013551:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c0013556:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001355b:	83 ec 04             	sub    esp,0x4
c001355e:	6a 01                	push   0x1
c0013560:	52                   	push   edx
c0013561:	50                   	push   eax
c0013562:	e8 dd 7d ff ff       	call   c000b344 <Computer::writeCMOS(unsigned char, unsigned char)>
c0013567:	83 c4 10             	add    esp,0x10
c001356a:	90                   	nop
c001356b:	83 c4 1c             	add    esp,0x1c
c001356e:	c3                   	ret    
c001356f:	90                   	nop

c0013570 <ACPI::open(int, int, void*)>:
c0013570:	53                   	push   ebx
c0013571:	83 ec 18             	sub    esp,0x18
c0013574:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013578:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c001357f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013583:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0013589:	84 c0                	test   al,al
c001358b:	74 60                	je     c00135ed <ACPI::open(int, int, void*)+0x7d>
c001358d:	83 ec 0c             	sub    esp,0xc
c0013590:	68 58 01 00 00       	push   0x158
c0013595:	e8 5c b7 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c001359a:	83 c4 10             	add    esp,0x10
c001359d:	89 c3                	mov    ebx,eax
c001359f:	83 ec 0c             	sub    esp,0xc
c00135a2:	53                   	push   ebx
c00135a3:	e8 20 7b 00 00       	call   c001b0c8 <PCI::PCI()>
c00135a8:	83 c4 10             	add    esp,0x10
c00135ab:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00135af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135b3:	83 ec 08             	sub    esp,0x8
c00135b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00135ba:	50                   	push   eax
c00135bb:	e8 30 cc ff ff       	call   c00101f0 <Device::addChild(Device*)>
c00135c0:	83 c4 10             	add    esp,0x10
c00135c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00135c9:	83 c0 08             	add    eax,0x8
c00135cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00135ce:	6a 00                	push   0x0
c00135d0:	6a 00                	push   0x0
c00135d2:	6a 00                	push   0x0
c00135d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00135d8:	ff d0                	call   eax
c00135da:	83 c4 10             	add    esp,0x10
c00135dd:	83 ec 0c             	sub    esp,0xc
c00135e0:	68 b8 0f 02 c0       	push   0xc0020fb8
c00135e5:	e8 fb b7 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c00135ea:	83 c4 10             	add    esp,0x10
c00135ed:	83 ec 0c             	sub    esp,0xc
c00135f0:	68 c3 0f 02 c0       	push   0xc0020fc3
c00135f5:	e8 3a 31 00 00       	call   c0016734 <Thr::loadKernelSymbolTable(char const*)>
c00135fa:	83 c4 10             	add    esp,0x10
c00135fd:	8b 1d 08 32 02 c0    	mov    ebx,DWORD PTR ds:0xc0023208
c0013603:	83 ec 08             	sub    esp,0x8
c0013606:	6a 01                	push   0x1
c0013608:	68 e1 0f 02 c0       	push   0xc0020fe1
c001360d:	e8 6a 3c 00 00       	call   c001727c <Thr::loadDLL(char const*, bool)>
c0013612:	83 c4 10             	add    esp,0x10
c0013615:	83 ec 08             	sub    esp,0x8
c0013618:	53                   	push   ebx
c0013619:	50                   	push   eax
c001361a:	e8 b0 3d 00 00       	call   c00173cf <Thr::executeDLL(unsigned long, void*)>
c001361f:	83 c4 10             	add    esp,0x10
c0013622:	8b 1d 08 32 02 c0    	mov    ebx,DWORD PTR ds:0xc0023208
c0013628:	83 ec 08             	sub    esp,0x8
c001362b:	6a 01                	push   0x1
c001362d:	68 fe 0f 02 c0       	push   0xc0020ffe
c0013632:	e8 45 3c 00 00       	call   c001727c <Thr::loadDLL(char const*, bool)>
c0013637:	83 c4 10             	add    esp,0x10
c001363a:	83 ec 08             	sub    esp,0x8
c001363d:	53                   	push   ebx
c001363e:	50                   	push   eax
c001363f:	e8 8b 3d 00 00       	call   c00173cf <Thr::executeDLL(unsigned long, void*)>
c0013644:	83 c4 10             	add    esp,0x10
c0013647:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c001364c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013652:	83 e0 04             	and    eax,0x4
c0013655:	84 c0                	test   al,al
c0013657:	0f 84 cf 00 00 00    	je     c001372c <ACPI::open(int, int, void*)+0x1bc>
c001365d:	83 ec 0c             	sub    esp,0xc
c0013660:	68 14 01 00 00       	push   0x114
c0013665:	e8 8c b6 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c001366a:	83 c4 10             	add    esp,0x10
c001366d:	89 c3                	mov    ebx,eax
c001366f:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0013674:	83 ec 04             	sub    esp,0x4
c0013677:	50                   	push   eax
c0013678:	68 1b 10 02 c0       	push   0xc002101b
c001367d:	53                   	push   ebx
c001367e:	e8 91 bc ff ff       	call   c000f314 <File::File(char const*, Process*)>
c0013683:	83 c4 10             	add    esp,0x10
c0013686:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001368a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001368f:	74 17                	je     c00136a8 <ACPI::open(int, int, void*)+0x138>
c0013691:	83 ec 0c             	sub    esp,0xc
c0013694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013698:	e8 49 bf ff ff       	call   c000f5e6 <File::exists()>
c001369d:	83 c4 10             	add    esp,0x10
c00136a0:	84 c0                	test   al,al
c00136a2:	74 04                	je     c00136a8 <ACPI::open(int, int, void*)+0x138>
c00136a4:	b0 01                	mov    al,0x1
c00136a6:	eb 02                	jmp    c00136aa <ACPI::open(int, int, void*)+0x13a>
c00136a8:	b0 00                	mov    al,0x0
c00136aa:	84 c0                	test   al,al
c00136ac:	74 25                	je     c00136d3 <ACPI::open(int, int, void*)+0x163>
c00136ae:	8b 1d 08 32 02 c0    	mov    ebx,DWORD PTR ds:0xc0023208
c00136b4:	83 ec 08             	sub    esp,0x8
c00136b7:	6a 01                	push   0x1
c00136b9:	68 1b 10 02 c0       	push   0xc002101b
c00136be:	e8 b9 3b 00 00       	call   c001727c <Thr::loadDLL(char const*, bool)>
c00136c3:	83 c4 10             	add    esp,0x10
c00136c6:	83 ec 08             	sub    esp,0x8
c00136c9:	53                   	push   ebx
c00136ca:	50                   	push   eax
c00136cb:	e8 ff 3c 00 00       	call   c00173cf <Thr::executeDLL(unsigned long, void*)>
c00136d0:	83 c4 10             	add    esp,0x10
c00136d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00136d8:	74 1e                	je     c00136f8 <ACPI::open(int, int, void*)+0x188>
c00136da:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00136df:	74 17                	je     c00136f8 <ACPI::open(int, int, void*)+0x188>
c00136e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00136e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00136e7:	83 c0 08             	add    eax,0x8
c00136ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00136ec:	83 ec 0c             	sub    esp,0xc
c00136ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00136f3:	ff d0                	call   eax
c00136f5:	83 c4 10             	add    esp,0x10
c00136f8:	a1 28 3a 02 c0       	mov    eax,ds:0xc0023a28
c00136fd:	83 ec 08             	sub    esp,0x8
c0013700:	68 38 10 02 c0       	push   0xc0021038
c0013705:	50                   	push   eax
c0013706:	e8 9f f7 ff ff       	call   c0012eaa <findDataTable(unsigned char*, char*)>
c001370b:	83 c4 10             	add    esp,0x10
c001370e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013712:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0013717:	74 13                	je     c001372c <ACPI::open(int, int, void*)+0x1bc>
c0013719:	83 ec 08             	sub    esp,0x8
c001371c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013720:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013724:	e8 ff fd ff ff       	call   c0013528 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0013729:	83 c4 10             	add    esp,0x10
c001372c:	b8 00 00 00 00       	mov    eax,0x0
c0013731:	83 c4 18             	add    esp,0x18
c0013734:	5b                   	pop    ebx
c0013735:	c3                   	ret    

c0013736 <ACPI::sleep()>:
c0013736:	83 ec 0c             	sub    esp,0xc
c0013739:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c001373e:	85 c0                	test   eax,eax
c0013740:	74 07                	je     c0013749 <ACPI::sleep()+0x13>
c0013742:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c0013747:	ff d0                	call   eax
c0013749:	90                   	nop
c001374a:	83 c4 0c             	add    esp,0xc
c001374d:	c3                   	ret    

c001374e <CPU::close(int, int, void*)>:
c001374e:	31 c0                	xor    eax,eax
c0013750:	c3                   	ret    

c0013751 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0013751:	55                   	push   ebp
c0013752:	57                   	push   edi
c0013753:	56                   	push   esi
c0013754:	53                   	push   ebx
c0013755:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013759:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001375d:	89 ce                	mov    esi,ecx
c001375f:	89 d5                	mov    ebp,edx
c0013761:	80 f9 04             	cmp    cl,0x4
c0013764:	75 28                	jne    c001378e <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c0013766:	8d 42 f9             	lea    eax,[edx-0x7]
c0013769:	3c 03                	cmp    al,0x3
c001376b:	0f 86 63 01 00 00    	jbe    c00138d4 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0013771:	80 fa 03             	cmp    dl,0x3
c0013774:	0f 84 5a 01 00 00    	je     c00138d4 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c001377a:	8d 7a f2             	lea    edi,[edx-0xe]
c001377d:	b8 30 2b 02 c0       	mov    eax,0xc0022b30
c0013782:	89 fb                	mov    ebx,edi
c0013784:	80 fb 01             	cmp    bl,0x1
c0013787:	77 4e                	ja     c00137d7 <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c0013789:	e9 52 01 00 00       	jmp    c00138e0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001378e:	80 f9 05             	cmp    cl,0x5
c0013791:	75 4d                	jne    c00137e0 <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c0013793:	b8 40 2b 02 c0       	mov    eax,0xc0022b40
c0013798:	80 fa 03             	cmp    dl,0x3
c001379b:	0f 86 3f 01 00 00    	jbe    c00138e0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00137a1:	8d 7a fa             	lea    edi,[edx-0x6]
c00137a4:	b8 50 2b 02 c0       	mov    eax,0xc0022b50
c00137a9:	89 fb                	mov    ebx,edi
c00137ab:	80 fb 01             	cmp    bl,0x1
c00137ae:	0f 86 2c 01 00 00    	jbe    c00138e0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00137b4:	b8 60 2b 02 c0       	mov    eax,0xc0022b60
c00137b9:	80 fa 08             	cmp    dl,0x8
c00137bc:	0f 84 1e 01 00 00    	je     c00138e0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00137c2:	89 d7                	mov    edi,edx
c00137c4:	b8 70 2b 02 c0       	mov    eax,0xc0022b70
c00137c9:	83 e7 fb             	and    edi,0xfffffffb
c00137cc:	89 fb                	mov    ebx,edi
c00137ce:	80 fb 09             	cmp    bl,0x9
c00137d1:	0f 84 09 01 00 00    	je     c00138e0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00137d7:	31 c0                	xor    eax,eax
c00137d9:	89 eb                	mov    ebx,ebp
c00137db:	0f b6 fb             	movzx  edi,bl
c00137de:	eb 30                	jmp    c0013810 <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c00137e0:	31 c0                	xor    eax,eax
c00137e2:	80 f9 06             	cmp    cl,0x6
c00137e5:	75 f2                	jne    c00137d9 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00137e7:	80 fa 0a             	cmp    dl,0xa
c00137ea:	77 ed                	ja     c00137d9 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00137ec:	bf de 05 00 00       	mov    edi,0x5de
c00137f1:	0f a3 d7             	bt     edi,edx
c00137f4:	73 e3                	jae    c00137d9 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00137f6:	b8 80 2b 02 c0       	mov    eax,0xc0022b80
c00137fb:	e9 e0 00 00 00       	jmp    c00138e0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013800:	39 c7                	cmp    edi,eax
c0013802:	0f 84 d3 00 00 00    	je     c00138db <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0013808:	40                   	inc    eax
c0013809:	3d d0 00 00 00       	cmp    eax,0xd0
c001380e:	74 09                	je     c0013819 <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c0013810:	89 f3                	mov    ebx,esi
c0013812:	80 fb 0f             	cmp    bl,0xf
c0013815:	75 f1                	jne    c0013808 <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c0013817:	eb e7                	jmp    c0013800 <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c0013819:	80 f9 10             	cmp    cl,0x10
c001381c:	75 14                	jne    c0013832 <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c001381e:	8d 42 fc             	lea    eax,[edx-0x4]
c0013821:	83 e0 fb             	and    eax,0xfffffffb
c0013824:	3c 02                	cmp    al,0x2
c0013826:	76 34                	jbe    c001385c <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c0013828:	b8 a9 12 02 c0       	mov    eax,0xc00212a9
c001382d:	80 fa 02             	cmp    dl,0x2
c0013830:	eb 24                	jmp    c0013856 <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c0013832:	80 f9 11             	cmp    cl,0x11
c0013835:	75 13                	jne    c001384a <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0013837:	b8 a9 12 02 c0       	mov    eax,0xc00212a9
c001383c:	80 fa 03             	cmp    dl,0x3
c001383f:	0f 85 9b 00 00 00    	jne    c00138e0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013845:	e9 91 00 00 00       	jmp    c00138db <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c001384a:	80 f9 12             	cmp    cl,0x12
c001384d:	75 14                	jne    c0013863 <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c001384f:	b8 a9 12 02 c0       	mov    eax,0xc00212a9
c0013854:	fe ca                	dec    dl
c0013856:	0f 85 84 00 00 00    	jne    c00138e0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001385c:	b8 a0 2b 02 c0       	mov    eax,0xc0022ba0
c0013861:	eb 7d                	jmp    c00138e0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013863:	80 f9 14             	cmp    cl,0x14
c0013866:	75 12                	jne    c001387a <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0013868:	4a                   	dec    edx
c0013869:	b8 a9 12 02 c0       	mov    eax,0xc00212a9
c001386e:	80 fa 01             	cmp    dl,0x1
c0013871:	77 6d                	ja     c00138e0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013873:	b8 b0 2b 02 c0       	mov    eax,0xc0022bb0
c0013878:	eb 66                	jmp    c00138e0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001387a:	80 f9 15             	cmp    cl,0x15
c001387d:	75 31                	jne    c00138b0 <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c001387f:	b8 c0 2b 02 c0       	mov    eax,0xc0022bc0
c0013884:	80 fa 01             	cmp    dl,0x1
c0013887:	74 57                	je     c00138e0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013889:	b8 a9 12 02 c0       	mov    eax,0xc00212a9
c001388e:	80 fa 13             	cmp    dl,0x13
c0013891:	76 0c                	jbe    c001389f <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c0013893:	80 fa 30             	cmp    dl,0x30
c0013896:	75 48                	jne    c00138e0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013898:	b8 e0 2b 02 c0       	mov    eax,0xc0022be0
c001389d:	eb 41                	jmp    c00138e0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001389f:	b9 04 00 09 00       	mov    ecx,0x90004
c00138a4:	0f a3 d1             	bt     ecx,edx
c00138a7:	73 37                	jae    c00138e0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00138a9:	b8 d0 2b 02 c0       	mov    eax,0xc0022bd0
c00138ae:	eb 30                	jmp    c00138e0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00138b0:	b8 a9 12 02 c0       	mov    eax,0xc00212a9
c00138b5:	80 f9 16             	cmp    cl,0x16
c00138b8:	75 26                	jne    c00138e0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00138ba:	b8 f0 2b 02 c0       	mov    eax,0xc0022bf0
c00138bf:	84 d2                	test   dl,dl
c00138c1:	74 1d                	je     c00138e0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00138c3:	b8 a9 12 02 c0       	mov    eax,0xc00212a9
c00138c8:	80 fa 30             	cmp    dl,0x30
c00138cb:	75 13                	jne    c00138e0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00138cd:	b8 00 2c 02 c0       	mov    eax,0xc0022c00
c00138d2:	eb 0c                	jmp    c00138e0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00138d4:	b8 20 2b 02 c0       	mov    eax,0xc0022b20
c00138d9:	eb 05                	jmp    c00138e0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00138db:	b8 90 2b 02 c0       	mov    eax,0xc0022b90
c00138e0:	5b                   	pop    ebx
c00138e1:	5e                   	pop    esi
c00138e2:	5f                   	pop    edi
c00138e3:	5d                   	pop    ebp
c00138e4:	c3                   	ret    

c00138e5 <lookupIntelCPUName(unsigned char, unsigned char)>:
c00138e5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00138e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00138ed:	80 f9 04             	cmp    cl,0x4
c00138f0:	75 6b                	jne    c001395d <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c00138f2:	b8 80 29 02 c0       	mov    eax,0xc0022980
c00138f7:	80 fa 01             	cmp    dl,0x1
c00138fa:	0f 86 92 02 00 00    	jbe    c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013900:	b8 90 29 02 c0       	mov    eax,0xc0022990
c0013905:	80 fa 02             	cmp    dl,0x2
c0013908:	0f 84 84 02 00 00    	je     c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001390e:	b8 a0 29 02 c0       	mov    eax,0xc00229a0
c0013913:	80 fa 03             	cmp    dl,0x3
c0013916:	0f 84 76 02 00 00    	je     c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001391c:	b8 b0 29 02 c0       	mov    eax,0xc00229b0
c0013921:	80 fa 04             	cmp    dl,0x4
c0013924:	0f 84 68 02 00 00    	je     c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001392a:	b8 c0 29 02 c0       	mov    eax,0xc00229c0
c001392f:	80 fa 05             	cmp    dl,0x5
c0013932:	0f 84 5a 02 00 00    	je     c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013938:	b8 a0 29 02 c0       	mov    eax,0xc00229a0
c001393d:	80 fa 07             	cmp    dl,0x7
c0013940:	0f 84 4c 02 00 00    	je     c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013946:	83 ea 08             	sub    edx,0x8
c0013949:	b8 a9 12 02 c0       	mov    eax,0xc00212a9
c001394e:	80 fa 01             	cmp    dl,0x1
c0013951:	0f 87 3b 02 00 00    	ja     c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013957:	b8 d0 29 02 c0       	mov    eax,0xc00229d0
c001395c:	c3                   	ret    
c001395d:	80 f9 05             	cmp    cl,0x5
c0013960:	75 45                	jne    c00139a7 <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0013962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0013965:	b8 e0 29 02 c0       	mov    eax,0xc00229e0
c001396a:	80 f9 02             	cmp    cl,0x2
c001396d:	0f 86 1f 02 00 00    	jbe    c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013973:	80 fa 04             	cmp    dl,0x4
c0013976:	0f 84 f3 01 00 00    	je     c0013b6f <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c001397c:	80 fa 07             	cmp    dl,0x7
c001397f:	0f 84 0d 02 00 00    	je     c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013985:	b8 f0 29 02 c0       	mov    eax,0xc00229f0
c001398a:	80 fa 08             	cmp    dl,0x8
c001398d:	0f 84 ff 01 00 00    	je     c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013993:	b8 a9 12 02 c0       	mov    eax,0xc00212a9
c0013998:	80 fa 09             	cmp    dl,0x9
c001399b:	0f 85 f1 01 00 00    	jne    c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139a1:	b8 00 2a 02 c0       	mov    eax,0xc0022a00
c00139a6:	c3                   	ret    
c00139a7:	80 f9 06             	cmp    cl,0x6
c00139aa:	0f 85 85 01 00 00    	jne    c0013b35 <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c00139b0:	b8 10 2a 02 c0       	mov    eax,0xc0022a10
c00139b5:	80 fa 01             	cmp    dl,0x1
c00139b8:	0f 84 d4 01 00 00    	je     c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139be:	8d 42 fb             	lea    eax,[edx-0x5]
c00139c1:	3c 01                	cmp    al,0x1
c00139c3:	0f 86 ac 01 00 00    	jbe    c0013b75 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c00139c9:	80 fa 03             	cmp    dl,0x3
c00139cc:	0f 84 a3 01 00 00    	je     c0013b75 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c00139d2:	8d 4a f9             	lea    ecx,[edx-0x7]
c00139d5:	b8 30 2a 02 c0       	mov    eax,0xc0022a30
c00139da:	80 f9 01             	cmp    cl,0x1
c00139dd:	0f 86 af 01 00 00    	jbe    c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139e3:	80 fa 09             	cmp    dl,0x9
c00139e6:	0f 84 8f 01 00 00    	je     c0013b7b <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c00139ec:	8d 4a f6             	lea    ecx,[edx-0xa]
c00139ef:	80 f9 01             	cmp    cl,0x1
c00139f2:	0f 86 9a 01 00 00    	jbe    c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139f8:	b8 40 2a 02 c0       	mov    eax,0xc0022a40
c00139fd:	80 fa 0d             	cmp    dl,0xd
c0013a00:	0f 84 8c 01 00 00    	je     c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a06:	b8 50 2a 02 c0       	mov    eax,0xc0022a50
c0013a0b:	80 fa 0e             	cmp    dl,0xe
c0013a0e:	0f 84 7e 01 00 00    	je     c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a14:	b8 60 2a 02 c0       	mov    eax,0xc0022a60
c0013a19:	80 fa 0f             	cmp    dl,0xf
c0013a1c:	0f 84 70 01 00 00    	je     c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a22:	b8 40 2a 02 c0       	mov    eax,0xc0022a40
c0013a27:	80 fa 15             	cmp    dl,0x15
c0013a2a:	0f 84 62 01 00 00    	je     c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a30:	8d 4a ea             	lea    ecx,[edx-0x16]
c0013a33:	b8 60 2a 02 c0       	mov    eax,0xc0022a60
c0013a38:	80 f9 01             	cmp    cl,0x1
c0013a3b:	0f 86 51 01 00 00    	jbe    c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a41:	80 fa 1a             	cmp    dl,0x1a
c0013a44:	0f 84 37 01 00 00    	je     c0013b81 <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0013a4a:	80 fa 1c             	cmp    dl,0x1c
c0013a4d:	0f 84 34 01 00 00    	je     c0013b87 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0013a53:	80 fa 1d             	cmp    dl,0x1d
c0013a56:	0f 84 36 01 00 00    	je     c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a5c:	b8 90 2a 02 c0       	mov    eax,0xc0022a90
c0013a61:	80 fa 25             	cmp    dl,0x25
c0013a64:	0f 84 28 01 00 00    	je     c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a6a:	8d 4a da             	lea    ecx,[edx-0x26]
c0013a6d:	b8 80 2a 02 c0       	mov    eax,0xc0022a80
c0013a72:	80 f9 01             	cmp    cl,0x1
c0013a75:	0f 86 17 01 00 00    	jbe    c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a7b:	b8 a0 2a 02 c0       	mov    eax,0xc0022aa0
c0013a80:	80 fa 2a             	cmp    dl,0x2a
c0013a83:	0f 84 09 01 00 00    	je     c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a89:	b8 90 2a 02 c0       	mov    eax,0xc0022a90
c0013a8e:	80 fa 2c             	cmp    dl,0x2c
c0013a91:	0f 84 fb 00 00 00    	je     c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a97:	b8 a0 2a 02 c0       	mov    eax,0xc0022aa0
c0013a9c:	80 fa 2d             	cmp    dl,0x2d
c0013a9f:	0f 84 ed 00 00 00    	je     c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013aa5:	b8 70 2a 02 c0       	mov    eax,0xc0022a70
c0013aaa:	80 fa 2e             	cmp    dl,0x2e
c0013aad:	0f 84 df 00 00 00    	je     c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ab3:	b8 90 2a 02 c0       	mov    eax,0xc0022a90
c0013ab8:	80 fa 2f             	cmp    dl,0x2f
c0013abb:	0f 84 d1 00 00 00    	je     c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ac1:	8d 4a cb             	lea    ecx,[edx-0x35]
c0013ac4:	b8 80 2a 02 c0       	mov    eax,0xc0022a80
c0013ac9:	80 f9 01             	cmp    cl,0x1
c0013acc:	0f 86 c0 00 00 00    	jbe    c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ad2:	b8 b0 2a 02 c0       	mov    eax,0xc0022ab0
c0013ad7:	80 fa 37             	cmp    dl,0x37
c0013ada:	0f 84 b2 00 00 00    	je     c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ae0:	b8 c0 2a 02 c0       	mov    eax,0xc0022ac0
c0013ae5:	80 fa 3a             	cmp    dl,0x3a
c0013ae8:	0f 84 a4 00 00 00    	je     c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013aee:	b8 d0 2a 02 c0       	mov    eax,0xc0022ad0
c0013af3:	80 fa 3c             	cmp    dl,0x3c
c0013af6:	0f 84 96 00 00 00    	je     c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013afc:	b8 e0 2a 02 c0       	mov    eax,0xc0022ae0
c0013b01:	80 fa 3d             	cmp    dl,0x3d
c0013b04:	0f 84 88 00 00 00    	je     c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b0a:	b8 c0 2a 02 c0       	mov    eax,0xc0022ac0
c0013b0f:	80 fa 3e             	cmp    dl,0x3e
c0013b12:	74 7e                	je     c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b14:	8d 42 bb             	lea    eax,[edx-0x45]
c0013b17:	3c 01                	cmp    al,0x1
c0013b19:	76 72                	jbe    c0013b8d <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0013b1b:	80 fa 3f             	cmp    dl,0x3f
c0013b1e:	74 6d                	je     c0013b8d <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0013b20:	80 fa 4a             	cmp    dl,0x4a
c0013b23:	74 0a                	je     c0013b2f <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0013b25:	b8 a9 12 02 c0       	mov    eax,0xc00212a9
c0013b2a:	80 fa 4d             	cmp    dl,0x4d
c0013b2d:	75 63                	jne    c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b2f:	b8 b0 2a 02 c0       	mov    eax,0xc0022ab0
c0013b34:	c3                   	ret    
c0013b35:	b8 a9 12 02 c0       	mov    eax,0xc00212a9
c0013b3a:	80 f9 0b             	cmp    cl,0xb
c0013b3d:	75 0a                	jne    c0013b49 <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0013b3f:	fe ca                	dec    dl
c0013b41:	75 4f                	jne    c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b43:	b8 f0 2a 02 c0       	mov    eax,0xc0022af0
c0013b48:	c3                   	ret    
c0013b49:	80 f9 0f             	cmp    cl,0xf
c0013b4c:	75 44                	jne    c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b4e:	b8 00 2b 02 c0       	mov    eax,0xc0022b00
c0013b53:	80 fa 02             	cmp    dl,0x2
c0013b56:	76 3a                	jbe    c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b58:	8d 42 fd             	lea    eax,[edx-0x3]
c0013b5b:	3c 01                	cmp    al,0x1
c0013b5d:	76 0a                	jbe    c0013b69 <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0013b5f:	b8 a9 12 02 c0       	mov    eax,0xc00212a9
c0013b64:	80 fa 06             	cmp    dl,0x6
c0013b67:	75 29                	jne    c0013b92 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b69:	b8 10 2b 02 c0       	mov    eax,0xc0022b10
c0013b6e:	c3                   	ret    
c0013b6f:	b8 f0 29 02 c0       	mov    eax,0xc00229f0
c0013b74:	c3                   	ret    
c0013b75:	b8 20 2a 02 c0       	mov    eax,0xc0022a20
c0013b7a:	c3                   	ret    
c0013b7b:	b8 40 2a 02 c0       	mov    eax,0xc0022a40
c0013b80:	c3                   	ret    
c0013b81:	b8 70 2a 02 c0       	mov    eax,0xc0022a70
c0013b86:	c3                   	ret    
c0013b87:	b8 80 2a 02 c0       	mov    eax,0xc0022a80
c0013b8c:	c3                   	ret    
c0013b8d:	b8 d0 2a 02 c0       	mov    eax,0xc0022ad0
c0013b92:	c3                   	ret    

c0013b93 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0013b93:	60                   	pusha  
c0013b94:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013b98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013b9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013ba0:	9c                   	pushf  
c0013ba1:	fa                   	cli    
c0013ba2:	0f 09                	wbinvd 
c0013ba4:	0f 30                	wrmsr  
c0013ba6:	9d                   	popf   
c0013ba7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bab:	89 02                	mov    DWORD PTR [edx],eax
c0013bad:	61                   	popa   
c0013bae:	c3                   	ret    

c0013baf <AMD_K6_read_msr(unsigned int, REGS*)>:
c0013baf:	60                   	pusha  
c0013bb0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013bb4:	9c                   	pushf  
c0013bb5:	fa                   	cli    
c0013bb6:	0f 09                	wbinvd 
c0013bb8:	31 c0                	xor    eax,eax
c0013bba:	31 d2                	xor    edx,edx
c0013bbc:	0f 32                	rdmsr  
c0013bbe:	9d                   	popf   
c0013bbf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013bc3:	89 02                	mov    DWORD PTR [edx],eax
c0013bc5:	61                   	popa   
c0013bc6:	c3                   	ret    

c0013bc7 <AMD_K6_writeback(int, int, int)>:
c0013bc7:	56                   	push   esi
c0013bc8:	53                   	push   ebx
c0013bc9:	83 ec 10             	sub    esp,0x10
c0013bcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013bd0:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013bd5:	75 5d                	jne    c0013c34 <AMD_K6_writeback(int, int, int)+0x6d>
c0013bd7:	83 f8 08             	cmp    eax,0x8
c0013bda:	75 09                	jne    c0013be5 <AMD_K6_writeback(int, int, int)+0x1e>
c0013bdc:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0013be1:	7e 13                	jle    c0013bf6 <AMD_K6_writeback(int, int, int)+0x2f>
c0013be3:	eb 30                	jmp    c0013c15 <AMD_K6_writeback(int, int, int)+0x4e>
c0013be5:	83 f8 06             	cmp    eax,0x6
c0013be8:	7c 4a                	jl     c0013c34 <AMD_K6_writeback(int, int, int)+0x6d>
c0013bea:	83 f8 07             	cmp    eax,0x7
c0013bed:	7e 07                	jle    c0013bf6 <AMD_K6_writeback(int, int, int)+0x2f>
c0013bef:	83 f8 09             	cmp    eax,0x9
c0013bf2:	74 21                	je     c0013c15 <AMD_K6_writeback(int, int, int)+0x4e>
c0013bf4:	eb 3e                	jmp    c0013c34 <AMD_K6_writeback(int, int, int)+0x6d>
c0013bf6:	89 e6                	mov    esi,esp
c0013bf8:	8b 1d 44 32 02 c0    	mov    ebx,DWORD PTR ds:0xc0023244
c0013bfe:	56                   	push   esi
c0013bff:	c1 eb 15             	shr    ebx,0x15
c0013c02:	68 82 00 00 c0       	push   0xc0000082
c0013c07:	83 e3 7e             	and    ebx,0x7e
c0013c0a:	e8 a0 ff ff ff       	call   c0013baf <AMD_K6_read_msr(unsigned int, REGS*)>
c0013c0f:	56                   	push   esi
c0013c10:	6a 00                	push   0x0
c0013c12:	53                   	push   ebx
c0013c13:	eb 12                	jmp    c0013c27 <AMD_K6_writeback(int, int, int)+0x60>
c0013c15:	89 e3                	mov    ebx,esp
c0013c17:	53                   	push   ebx
c0013c18:	68 82 00 00 c0       	push   0xc0000082
c0013c1d:	e8 8d ff ff ff       	call   c0013baf <AMD_K6_read_msr(unsigned int, REGS*)>
c0013c22:	53                   	push   ebx
c0013c23:	6a 00                	push   0x0
c0013c25:	6a 00                	push   0x0
c0013c27:	68 82 00 00 c0       	push   0xc0000082
c0013c2c:	e8 62 ff ff ff       	call   c0013b93 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0013c31:	83 c4 18             	add    esp,0x18
c0013c34:	83 c4 10             	add    esp,0x10
c0013c37:	5b                   	pop    ebx
c0013c38:	5e                   	pop    esi
c0013c39:	c3                   	ret    

c0013c3a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0013c3a:	55                   	push   ebp
c0013c3b:	57                   	push   edi
c0013c3c:	56                   	push   esi
c0013c3d:	53                   	push   ebx
c0013c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c42:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013c46:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013c4a:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013c4e:	39 05 20 2c 02 c0    	cmp    DWORD PTR ds:0xc0022c20,eax
c0013c54:	75 23                	jne    c0013c79 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0013c56:	a1 cc 3b 02 c0       	mov    eax,ds:0xc0023bcc
c0013c5b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013c5f:	89 06                	mov    DWORD PTR [esi],eax
c0013c61:	a1 c8 3b 02 c0       	mov    eax,ds:0xc0023bc8
c0013c66:	89 07                	mov    DWORD PTR [edi],eax
c0013c68:	a1 c4 3b 02 c0       	mov    eax,ds:0xc0023bc4
c0013c6d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013c70:	a1 c0 3b 02 c0       	mov    eax,ds:0xc0023bc0
c0013c75:	89 02                	mov    DWORD PTR [edx],eax
c0013c77:	eb 3f                	jmp    c0013cb8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013c79:	31 c9                	xor    ecx,ecx
c0013c7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c7f:	0f a2                	cpuid  
c0013c81:	89 06                	mov    DWORD PTR [esi],eax
c0013c83:	89 1f                	mov    DWORD PTR [edi],ebx
c0013c85:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013c89:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013c8c:	89 10                	mov    DWORD PTR [eax],edx
c0013c8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c92:	a3 20 2c 02 c0       	mov    ds:0xc0022c20,eax
c0013c97:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c99:	a3 cc 3b 02 c0       	mov    ds:0xc0023bcc,eax
c0013c9e:	8b 07                	mov    eax,DWORD PTR [edi]
c0013ca0:	a3 c8 3b 02 c0       	mov    ds:0xc0023bc8,eax
c0013ca5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013ca8:	a3 c4 3b 02 c0       	mov    ds:0xc0023bc4,eax
c0013cad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013cb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0013cb3:	a3 c0 3b 02 c0       	mov    ds:0xc0023bc0,eax
c0013cb8:	5b                   	pop    ebx
c0013cb9:	5e                   	pop    esi
c0013cba:	5f                   	pop    edi
c0013cbb:	5d                   	pop    ebp
c0013cbc:	c3                   	ret    

c0013cbd <cpuidCheckEDX(unsigned int)>:
c0013cbd:	83 ec 10             	sub    esp,0x10
c0013cc0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013cc4:	50                   	push   eax
c0013cc5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013cc9:	50                   	push   eax
c0013cca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013cce:	50                   	push   eax
c0013ccf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013cd3:	50                   	push   eax
c0013cd4:	6a 01                	push   0x1
c0013cd6:	e8 5f ff ff ff       	call   c0013c3a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013cdb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013cdf:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0013ce3:	0f 95 c0             	setne  al
c0013ce6:	83 c4 24             	add    esp,0x24
c0013ce9:	c3                   	ret    

c0013cea <cpuidCheckECX(unsigned int)>:
c0013cea:	83 ec 10             	sub    esp,0x10
c0013ced:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013cf1:	50                   	push   eax
c0013cf2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013cf6:	50                   	push   eax
c0013cf7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013cfb:	50                   	push   eax
c0013cfc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013d00:	50                   	push   eax
c0013d01:	6a 01                	push   0x1
c0013d03:	e8 32 ff ff ff       	call   c0013c3a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013d08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013d0c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013d10:	0f 95 c0             	setne  al
c0013d13:	83 c4 24             	add    esp,0x24
c0013d16:	c3                   	ret    

c0013d17 <cpuidCheckExtendedEBX(unsigned int)>:
c0013d17:	83 ec 10             	sub    esp,0x10
c0013d1a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013d1e:	50                   	push   eax
c0013d1f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013d23:	50                   	push   eax
c0013d24:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013d28:	50                   	push   eax
c0013d29:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013d2d:	50                   	push   eax
c0013d2e:	6a 07                	push   0x7
c0013d30:	e8 05 ff ff ff       	call   c0013c3a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013d35:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013d39:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0013d3d:	0f 95 c0             	setne  al
c0013d40:	83 c4 24             	add    esp,0x24
c0013d43:	c3                   	ret    

c0013d44 <cpuidCheckExtendedECX(unsigned int)>:
c0013d44:	83 ec 10             	sub    esp,0x10
c0013d47:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013d4b:	50                   	push   eax
c0013d4c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013d50:	50                   	push   eax
c0013d51:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013d55:	50                   	push   eax
c0013d56:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013d5a:	50                   	push   eax
c0013d5b:	6a 07                	push   0x7
c0013d5d:	e8 d8 fe ff ff       	call   c0013c3a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013d62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013d66:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013d6a:	0f 95 c0             	setne  al
c0013d6d:	83 c4 24             	add    esp,0x24
c0013d70:	c3                   	ret    

c0013d71 <getCPUNumber()>:
c0013d71:	31 c0                	xor    eax,eax
c0013d73:	c3                   	ret    

c0013d74 <thisCPU()>:
c0013d74:	e8 f8 ff ff ff       	call   c0013d71 <getCPUNumber()>
c0013d79:	8b 15 08 32 02 c0    	mov    edx,DWORD PTR ds:0xc0023208
c0013d7f:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0013d86:	c3                   	ret    
c0013d87:	90                   	nop

c0013d88 <CPU::CPU()>:
c0013d88:	83 ec 0c             	sub    esp,0xc
c0013d8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d8f:	83 ec 08             	sub    esp,0x8
c0013d92:	68 a9 12 02 c0       	push   0xc00212a9
c0013d97:	50                   	push   eax
c0013d98:	e8 43 c6 ff ff       	call   c00103e0 <Device::Device(char const*)>
c0013d9d:	83 c4 10             	add    esp,0x10
c0013da0:	ba 80 13 02 c0       	mov    edx,0xc0021380
c0013da5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013da9:	89 10                	mov    DWORD PTR [eax],edx
c0013dab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013daf:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0013db9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dbd:	05 78 01 00 00       	add    eax,0x178
c0013dc2:	83 ec 0c             	sub    esp,0xc
c0013dc5:	50                   	push   eax
c0013dc6:	e8 63 76 ff ff       	call   c000b42e <GDT::GDT()>
c0013dcb:	83 c4 10             	add    esp,0x10
c0013dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dd2:	05 7c 09 00 00       	add    eax,0x97c
c0013dd7:	83 ec 0c             	sub    esp,0xc
c0013dda:	50                   	push   eax
c0013ddb:	e8 ae 78 ff ff       	call   c000b68e <IDT::IDT()>
c0013de0:	83 c4 10             	add    esp,0x10
c0013de3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013de7:	05 7c 11 00 00       	add    eax,0x117c
c0013dec:	83 ec 0c             	sub    esp,0xc
c0013def:	50                   	push   eax
c0013df0:	e8 57 98 ff ff       	call   c000d64c <TSS::TSS()>
c0013df5:	83 c4 10             	add    esp,0x10
c0013df8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dfc:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0013e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e07:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0013e11:	90                   	nop
c0013e12:	83 c4 0c             	add    esp,0xc
c0013e15:	c3                   	ret    

c0013e16 <CPU::displayFeatures()>:
c0013e16:	c3                   	ret    
c0013e17:	90                   	nop

c0013e18 <CPU::detectFeatures()>:
c0013e18:	55                   	push   ebp
c0013e19:	57                   	push   edi
c0013e1a:	56                   	push   esi
c0013e1b:	53                   	push   ebx
c0013e1c:	83 ec 50             	sub    esp,0x50
c0013e1f:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0013e23:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013e2d:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0013e34:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0013e3a:	6a 0d                	push   0xd
c0013e3c:	6a 00                	push   0x0
c0013e3e:	57                   	push   edi
c0013e3f:	e8 c4 c7 fe ff       	call   c0000608 <memset>
c0013e44:	83 c4 10             	add    esp,0x10
c0013e47:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c0013e4c:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0013e53:	0f 84 20 09 00 00    	je     c0014779 <CPU::detectFeatures()+0x961>
c0013e59:	83 ec 0c             	sub    esp,0xc
c0013e5c:	6a 10                	push   0x10
c0013e5e:	e8 5a fe ff ff       	call   c0013cbd <cpuidCheckEDX(unsigned int)>
c0013e63:	83 e0 01             	and    eax,0x1
c0013e66:	8d 14 00             	lea    edx,[eax+eax*1]
c0013e69:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013e6f:	83 e0 fd             	and    eax,0xfffffffd
c0013e72:	09 d0                	or     eax,edx
c0013e74:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013e7a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0013e81:	e8 37 fe ff ff       	call   c0013cbd <cpuidCheckEDX(unsigned int)>
c0013e86:	83 e0 01             	and    eax,0x1
c0013e89:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013e90:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013e96:	83 e0 fb             	and    eax,0xfffffffb
c0013e99:	09 d0                	or     eax,edx
c0013e9b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013ea1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013ea8:	e8 10 fe ff ff       	call   c0013cbd <cpuidCheckEDX(unsigned int)>
c0013ead:	83 e0 01             	and    eax,0x1
c0013eb0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013eb7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013ebd:	83 e0 f7             	and    eax,0xfffffff7
c0013ec0:	09 d0                	or     eax,edx
c0013ec2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013ec8:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0013ecf:	e8 e9 fd ff ff       	call   c0013cbd <cpuidCheckEDX(unsigned int)>
c0013ed4:	83 e0 01             	and    eax,0x1
c0013ed7:	c1 e0 04             	shl    eax,0x4
c0013eda:	88 c2                	mov    dl,al
c0013edc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013ee2:	83 e0 ef             	and    eax,0xffffffef
c0013ee5:	09 d0                	or     eax,edx
c0013ee7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013eed:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0013ef4:	e8 c4 fd ff ff       	call   c0013cbd <cpuidCheckEDX(unsigned int)>
c0013ef9:	83 e0 01             	and    eax,0x1
c0013efc:	c1 e0 05             	shl    eax,0x5
c0013eff:	88 c2                	mov    dl,al
c0013f01:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013f07:	83 e0 df             	and    eax,0xffffffdf
c0013f0a:	09 d0                	or     eax,edx
c0013f0c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013f12:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0013f19:	e8 9f fd ff ff       	call   c0013cbd <cpuidCheckEDX(unsigned int)>
c0013f1e:	83 e0 01             	and    eax,0x1
c0013f21:	8d 14 00             	lea    edx,[eax+eax*1]
c0013f24:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013f2a:	83 e0 fd             	and    eax,0xfffffffd
c0013f2d:	09 d0                	or     eax,edx
c0013f2f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013f35:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0013f3c:	e8 7c fd ff ff       	call   c0013cbd <cpuidCheckEDX(unsigned int)>
c0013f41:	83 e0 01             	and    eax,0x1
c0013f44:	c1 e0 06             	shl    eax,0x6
c0013f47:	88 c2                	mov    dl,al
c0013f49:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013f4f:	83 e0 bf             	and    eax,0xffffffbf
c0013f52:	09 d0                	or     eax,edx
c0013f54:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013f5a:	58                   	pop    eax
c0013f5b:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013f5f:	56                   	push   esi
c0013f60:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0013f64:	55                   	push   ebp
c0013f65:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013f69:	50                   	push   eax
c0013f6a:	8d 54 24 28          	lea    edx,[esp+0x28]
c0013f6e:	52                   	push   edx
c0013f6f:	6a 00                	push   0x0
c0013f71:	e8 c4 fc ff ff       	call   c0013c3a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013f76:	83 c4 1c             	add    esp,0x1c
c0013f79:	6a 04                	push   0x4
c0013f7b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0013f7f:	50                   	push   eax
c0013f80:	57                   	push   edi
c0013f81:	e8 4c c6 fe ff       	call   c00005d2 <memcpy>
c0013f86:	83 c4 0c             	add    esp,0xc
c0013f89:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0013f8f:	6a 04                	push   0x4
c0013f91:	56                   	push   esi
c0013f92:	50                   	push   eax
c0013f93:	e8 3a c6 fe ff       	call   c00005d2 <memcpy>
c0013f98:	83 c4 0c             	add    esp,0xc
c0013f9b:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0013fa1:	6a 04                	push   0x4
c0013fa3:	55                   	push   ebp
c0013fa4:	50                   	push   eax
c0013fa5:	e8 28 c6 fe ff       	call   c00005d2 <memcpy>
c0013faa:	58                   	pop    eax
c0013fab:	5a                   	pop    edx
c0013fac:	68 54 11 02 c0       	push   0xc0021154
c0013fb1:	57                   	push   edi
c0013fb2:	e8 41 c7 fe ff       	call   c00006f8 <strcmp>
c0013fb7:	83 c4 10             	add    esp,0x10
c0013fba:	85 c0                	test   eax,eax
c0013fbc:	75 0f                	jne    c0013fcd <CPU::detectFeatures()+0x1b5>
c0013fbe:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0013fc8:	e9 22 02 00 00       	jmp    c00141ef <CPU::detectFeatures()+0x3d7>
c0013fcd:	50                   	push   eax
c0013fce:	50                   	push   eax
c0013fcf:	68 61 11 02 c0       	push   0xc0021161
c0013fd4:	57                   	push   edi
c0013fd5:	e8 1e c7 fe ff       	call   c00006f8 <strcmp>
c0013fda:	83 c4 10             	add    esp,0x10
c0013fdd:	85 c0                	test   eax,eax
c0013fdf:	74 dd                	je     c0013fbe <CPU::detectFeatures()+0x1a6>
c0013fe1:	51                   	push   ecx
c0013fe2:	51                   	push   ecx
c0013fe3:	68 6e 11 02 c0       	push   0xc002116e
c0013fe8:	57                   	push   edi
c0013fe9:	e8 0a c7 fe ff       	call   c00006f8 <strcmp>
c0013fee:	83 c4 10             	add    esp,0x10
c0013ff1:	85 c0                	test   eax,eax
c0013ff3:	74 2a                	je     c001401f <CPU::detectFeatures()+0x207>
c0013ff5:	52                   	push   edx
c0013ff6:	52                   	push   edx
c0013ff7:	68 7b 11 02 c0       	push   0xc002117b
c0013ffc:	57                   	push   edi
c0013ffd:	e8 f6 c6 fe ff       	call   c00006f8 <strcmp>
c0014002:	83 c4 10             	add    esp,0x10
c0014005:	85 c0                	test   eax,eax
c0014007:	74 16                	je     c001401f <CPU::detectFeatures()+0x207>
c0014009:	50                   	push   eax
c001400a:	50                   	push   eax
c001400b:	68 88 11 02 c0       	push   0xc0021188
c0014010:	57                   	push   edi
c0014011:	e8 e2 c6 fe ff       	call   c00006f8 <strcmp>
c0014016:	83 c4 10             	add    esp,0x10
c0014019:	85 c0                	test   eax,eax
c001401b:	74 48                	je     c0014065 <CPU::detectFeatures()+0x24d>
c001401d:	eb 0f                	jmp    c001402e <CPU::detectFeatures()+0x216>
c001401f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0014029:	e9 c1 01 00 00       	jmp    c00141ef <CPU::detectFeatures()+0x3d7>
c001402e:	50                   	push   eax
c001402f:	50                   	push   eax
c0014030:	68 95 11 02 c0       	push   0xc0021195
c0014035:	57                   	push   edi
c0014036:	e8 bd c6 fe ff       	call   c00006f8 <strcmp>
c001403b:	83 c4 10             	add    esp,0x10
c001403e:	85 c0                	test   eax,eax
c0014040:	74 23                	je     c0014065 <CPU::detectFeatures()+0x24d>
c0014042:	50                   	push   eax
c0014043:	50                   	push   eax
c0014044:	68 a2 11 02 c0       	push   0xc00211a2
c0014049:	57                   	push   edi
c001404a:	e8 a9 c6 fe ff       	call   c00006f8 <strcmp>
c001404f:	83 c4 10             	add    esp,0x10
c0014052:	85 c0                	test   eax,eax
c0014054:	75 1e                	jne    c0014074 <CPU::detectFeatures()+0x25c>
c0014056:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014060:	e9 8a 01 00 00       	jmp    c00141ef <CPU::detectFeatures()+0x3d7>
c0014065:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001406f:	e9 7b 01 00 00       	jmp    c00141ef <CPU::detectFeatures()+0x3d7>
c0014074:	50                   	push   eax
c0014075:	50                   	push   eax
c0014076:	68 af 11 02 c0       	push   0xc00211af
c001407b:	57                   	push   edi
c001407c:	e8 77 c6 fe ff       	call   c00006f8 <strcmp>
c0014081:	83 c4 10             	add    esp,0x10
c0014084:	85 c0                	test   eax,eax
c0014086:	75 0f                	jne    c0014097 <CPU::detectFeatures()+0x27f>
c0014088:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0014092:	e9 58 01 00 00       	jmp    c00141ef <CPU::detectFeatures()+0x3d7>
c0014097:	50                   	push   eax
c0014098:	50                   	push   eax
c0014099:	68 6e 11 02 c0       	push   0xc002116e
c001409e:	57                   	push   edi
c001409f:	e8 54 c6 fe ff       	call   c00006f8 <strcmp>
c00140a4:	83 c4 10             	add    esp,0x10
c00140a7:	85 c0                	test   eax,eax
c00140a9:	75 0f                	jne    c00140ba <CPU::detectFeatures()+0x2a2>
c00140ab:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00140b5:	e9 35 01 00 00       	jmp    c00141ef <CPU::detectFeatures()+0x3d7>
c00140ba:	50                   	push   eax
c00140bb:	50                   	push   eax
c00140bc:	68 bc 11 02 c0       	push   0xc00211bc
c00140c1:	57                   	push   edi
c00140c2:	e8 31 c6 fe ff       	call   c00006f8 <strcmp>
c00140c7:	83 c4 10             	add    esp,0x10
c00140ca:	85 c0                	test   eax,eax
c00140cc:	75 0f                	jne    c00140dd <CPU::detectFeatures()+0x2c5>
c00140ce:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00140d8:	e9 12 01 00 00       	jmp    c00141ef <CPU::detectFeatures()+0x3d7>
c00140dd:	51                   	push   ecx
c00140de:	51                   	push   ecx
c00140df:	68 c9 11 02 c0       	push   0xc00211c9
c00140e4:	57                   	push   edi
c00140e5:	e8 0e c6 fe ff       	call   c00006f8 <strcmp>
c00140ea:	83 c4 10             	add    esp,0x10
c00140ed:	85 c0                	test   eax,eax
c00140ef:	75 0f                	jne    c0014100 <CPU::detectFeatures()+0x2e8>
c00140f1:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00140fb:	e9 ef 00 00 00       	jmp    c00141ef <CPU::detectFeatures()+0x3d7>
c0014100:	52                   	push   edx
c0014101:	52                   	push   edx
c0014102:	68 d6 11 02 c0       	push   0xc00211d6
c0014107:	57                   	push   edi
c0014108:	e8 eb c5 fe ff       	call   c00006f8 <strcmp>
c001410d:	83 c4 10             	add    esp,0x10
c0014110:	85 c0                	test   eax,eax
c0014112:	75 0f                	jne    c0014123 <CPU::detectFeatures()+0x30b>
c0014114:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001411e:	e9 cc 00 00 00       	jmp    c00141ef <CPU::detectFeatures()+0x3d7>
c0014123:	50                   	push   eax
c0014124:	50                   	push   eax
c0014125:	68 e3 11 02 c0       	push   0xc00211e3
c001412a:	57                   	push   edi
c001412b:	e8 c8 c5 fe ff       	call   c00006f8 <strcmp>
c0014130:	83 c4 10             	add    esp,0x10
c0014133:	85 c0                	test   eax,eax
c0014135:	75 0f                	jne    c0014146 <CPU::detectFeatures()+0x32e>
c0014137:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0014141:	e9 a9 00 00 00       	jmp    c00141ef <CPU::detectFeatures()+0x3d7>
c0014146:	50                   	push   eax
c0014147:	50                   	push   eax
c0014148:	68 f0 11 02 c0       	push   0xc00211f0
c001414d:	57                   	push   edi
c001414e:	e8 a5 c5 fe ff       	call   c00006f8 <strcmp>
c0014153:	83 c4 10             	add    esp,0x10
c0014156:	85 c0                	test   eax,eax
c0014158:	75 0f                	jne    c0014169 <CPU::detectFeatures()+0x351>
c001415a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0014164:	e9 86 00 00 00       	jmp    c00141ef <CPU::detectFeatures()+0x3d7>
c0014169:	50                   	push   eax
c001416a:	50                   	push   eax
c001416b:	68 fd 11 02 c0       	push   0xc00211fd
c0014170:	57                   	push   edi
c0014171:	e8 82 c5 fe ff       	call   c00006f8 <strcmp>
c0014176:	83 c4 10             	add    esp,0x10
c0014179:	85 c0                	test   eax,eax
c001417b:	75 0c                	jne    c0014189 <CPU::detectFeatures()+0x371>
c001417d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0014187:	eb 66                	jmp    c00141ef <CPU::detectFeatures()+0x3d7>
c0014189:	50                   	push   eax
c001418a:	50                   	push   eax
c001418b:	68 0a 12 02 c0       	push   0xc002120a
c0014190:	57                   	push   edi
c0014191:	e8 62 c5 fe ff       	call   c00006f8 <strcmp>
c0014196:	83 c4 10             	add    esp,0x10
c0014199:	85 c0                	test   eax,eax
c001419b:	75 0c                	jne    c00141a9 <CPU::detectFeatures()+0x391>
c001419d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00141a7:	eb 46                	jmp    c00141ef <CPU::detectFeatures()+0x3d7>
c00141a9:	50                   	push   eax
c00141aa:	50                   	push   eax
c00141ab:	68 17 12 02 c0       	push   0xc0021217
c00141b0:	57                   	push   edi
c00141b1:	e8 42 c5 fe ff       	call   c00006f8 <strcmp>
c00141b6:	83 c4 10             	add    esp,0x10
c00141b9:	85 c0                	test   eax,eax
c00141bb:	74 e0                	je     c001419d <CPU::detectFeatures()+0x385>
c00141bd:	50                   	push   eax
c00141be:	50                   	push   eax
c00141bf:	68 24 12 02 c0       	push   0xc0021224
c00141c4:	57                   	push   edi
c00141c5:	e8 2e c5 fe ff       	call   c00006f8 <strcmp>
c00141ca:	83 c4 10             	add    esp,0x10
c00141cd:	85 c0                	test   eax,eax
c00141cf:	74 cc                	je     c001419d <CPU::detectFeatures()+0x385>
c00141d1:	51                   	push   ecx
c00141d2:	51                   	push   ecx
c00141d3:	68 31 12 02 c0       	push   0xc0021231
c00141d8:	57                   	push   edi
c00141d9:	e8 1a c5 fe ff       	call   c00006f8 <strcmp>
c00141de:	83 c4 10             	add    esp,0x10
c00141e1:	85 c0                	test   eax,eax
c00141e3:	74 b8                	je     c001419d <CPU::detectFeatures()+0x385>
c00141e5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00141ef:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00141f4:	0f 86 be 00 00 00    	jbe    c00142b8 <CPU::detectFeatures()+0x4a0>
c00141fa:	83 ec 0c             	sub    esp,0xc
c00141fd:	68 80 00 00 00       	push   0x80
c0014202:	e8 10 fb ff ff       	call   c0013d17 <cpuidCheckExtendedEBX(unsigned int)>
c0014207:	83 e0 01             	and    eax,0x1
c001420a:	c1 e0 06             	shl    eax,0x6
c001420d:	88 c2                	mov    dl,al
c001420f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014215:	83 e0 bf             	and    eax,0xffffffbf
c0014218:	09 d0                	or     eax,edx
c001421a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014220:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0014227:	e8 eb fa ff ff       	call   c0013d17 <cpuidCheckExtendedEBX(unsigned int)>
c001422c:	83 e0 01             	and    eax,0x1
c001422f:	c1 e0 04             	shl    eax,0x4
c0014232:	88 c2                	mov    dl,al
c0014234:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001423a:	83 e0 ef             	and    eax,0xffffffef
c001423d:	09 d0                	or     eax,edx
c001423f:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014245:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001424c:	e8 c6 fa ff ff       	call   c0013d17 <cpuidCheckExtendedEBX(unsigned int)>
c0014251:	c1 e0 07             	shl    eax,0x7
c0014254:	88 c2                	mov    dl,al
c0014256:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001425c:	83 e0 7f             	and    eax,0x7f
c001425f:	09 d0                	or     eax,edx
c0014261:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014267:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001426e:	e8 d1 fa ff ff       	call   c0013d44 <cpuidCheckExtendedECX(unsigned int)>
c0014273:	83 e0 01             	and    eax,0x1
c0014276:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001427d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014283:	83 e0 f7             	and    eax,0xfffffff7
c0014286:	09 d0                	or     eax,edx
c0014288:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001428e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0014295:	e8 aa fa ff ff       	call   c0013d44 <cpuidCheckExtendedECX(unsigned int)>
c001429a:	83 c4 10             	add    esp,0x10
c001429d:	83 e0 01             	and    eax,0x1
c00142a0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00142a7:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00142ad:	83 e0 fb             	and    eax,0xfffffffb
c00142b0:	09 d0                	or     eax,edx
c00142b2:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00142b8:	83 ec 0c             	sub    esp,0xc
c00142bb:	56                   	push   esi
c00142bc:	55                   	push   ebp
c00142bd:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00142c1:	57                   	push   edi
c00142c2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00142c6:	50                   	push   eax
c00142c7:	6a 01                	push   0x1
c00142c9:	e8 6c f9 ff ff       	call   c0013c3a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00142ce:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00142d2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00142d8:	88 ca                	mov    dl,cl
c00142da:	83 e0 f0             	and    eax,0xfffffff0
c00142dd:	83 e2 0f             	and    edx,0xf
c00142e0:	09 d0                	or     eax,edx
c00142e2:	88 ca                	mov    dl,cl
c00142e4:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00142ea:	c0 ea 04             	shr    dl,0x4
c00142ed:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00142f1:	0f b6 c2             	movzx  eax,dl
c00142f4:	83 c4 20             	add    esp,0x20
c00142f7:	c1 e0 06             	shl    eax,0x6
c00142fa:	89 c5                	mov    ebp,eax
c00142fc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014302:	66 25 3f c0          	and    ax,0xc03f
c0014306:	09 e8                	or     eax,ebp
c0014308:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001430f:	89 c8                	mov    eax,ecx
c0014311:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0014317:	c1 e8 08             	shr    eax,0x8
c001431a:	83 e2 3f             	and    edx,0x3f
c001431d:	83 e0 0f             	and    eax,0xf
c0014320:	89 c5                	mov    ebp,eax
c0014322:	c1 e5 06             	shl    ebp,0x6
c0014325:	09 d5                	or     ebp,edx
c0014327:	89 ea                	mov    edx,ebp
c0014329:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001432f:	88 c2                	mov    dl,al
c0014331:	c0 ea 02             	shr    dl,0x2
c0014334:	89 d5                	mov    ebp,edx
c0014336:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001433c:	83 e2 c0             	and    edx,0xffffffc0
c001433f:	09 d5                	or     ebp,edx
c0014341:	89 ea                	mov    edx,ebp
c0014343:	89 cd                	mov    ebp,ecx
c0014345:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001434b:	c1 ed 0c             	shr    ebp,0xc
c001434e:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0014354:	83 e5 03             	and    ebp,0x3
c0014357:	83 e2 cf             	and    edx,0xffffffcf
c001435a:	c1 e5 04             	shl    ebp,0x4
c001435d:	09 d5                	or     ebp,edx
c001435f:	3c 06                	cmp    al,0x6
c0014361:	89 ea                	mov    edx,ebp
c0014363:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0014369:	74 04                	je     c001436f <CPU::detectFeatures()+0x557>
c001436b:	3c 0f                	cmp    al,0xf
c001436d:	75 5c                	jne    c00143cb <CPU::detectFeatures()+0x5b3>
c001436f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0014373:	89 cd                	mov    ebp,ecx
c0014375:	c1 ed 10             	shr    ebp,0x10
c0014378:	c1 e5 04             	shl    ebp,0x4
c001437b:	09 ea                	or     edx,ebp
c001437d:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0014383:	0f b6 d2             	movzx  edx,dl
c0014386:	66 81 e5 3f c0       	and    bp,0xc03f
c001438b:	c1 e2 06             	shl    edx,0x6
c001438e:	09 ea                	or     edx,ebp
c0014390:	3c 0f                	cmp    al,0xf
c0014392:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0014399:	75 30                	jne    c00143cb <CPU::detectFeatures()+0x5b3>
c001439b:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00143a1:	c1 e9 14             	shr    ecx,0x14
c00143a4:	83 e0 3f             	and    eax,0x3f
c00143a7:	83 c1 0f             	add    ecx,0xf
c00143aa:	88 ca                	mov    dl,cl
c00143ac:	c0 e9 02             	shr    cl,0x2
c00143af:	c1 e2 06             	shl    edx,0x6
c00143b2:	09 d0                	or     eax,edx
c00143b4:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00143ba:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00143c0:	83 e0 c0             	and    eax,0xffffffc0
c00143c3:	09 c1                	or     ecx,eax
c00143c5:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00143cb:	83 ec 0c             	sub    esp,0xc
c00143ce:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00143d5:	56                   	push   esi
c00143d6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00143da:	50                   	push   eax
c00143db:	57                   	push   edi
c00143dc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00143e0:	55                   	push   ebp
c00143e1:	68 00 00 00 80       	push   0x80000000
c00143e6:	e8 4f f8 ff ff       	call   c0013c3a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00143eb:	83 c4 20             	add    esp,0x20
c00143ee:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00143f6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00143fa:	76 1e                	jbe    c001441a <CPU::detectFeatures()+0x602>
c00143fc:	83 ec 0c             	sub    esp,0xc
c00143ff:	56                   	push   esi
c0014400:	50                   	push   eax
c0014401:	57                   	push   edi
c0014402:	55                   	push   ebp
c0014403:	68 01 00 00 80       	push   0x80000001
c0014408:	e8 2d f8 ff ff       	call   c0013c3a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001440d:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0014417:	83 c4 20             	add    esp,0x20
c001441a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0014420:	83 f8 01             	cmp    eax,0x1
c0014423:	75 6f                	jne    c0014494 <CPU::detectFeatures()+0x67c>
c0014425:	51                   	push   ecx
c0014426:	51                   	push   ecx
c0014427:	68 3d 12 02 c0       	push   0xc002123d
c001442c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014430:	56                   	push   esi
c0014431:	e8 71 c2 fe ff       	call   c00006a7 <strcpy>
c0014436:	5f                   	pop    edi
c0014437:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001443d:	5d                   	pop    ebp
c001443e:	66 c1 e8 06          	shr    ax,0x6
c0014442:	0f b6 c0             	movzx  eax,al
c0014445:	50                   	push   eax
c0014446:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001444c:	c1 e8 0e             	shr    eax,0xe
c001444f:	0f b6 c0             	movzx  eax,al
c0014452:	50                   	push   eax
c0014453:	e8 8d f4 ff ff       	call   c00138e5 <lookupIntelCPUName(unsigned char, unsigned char)>
c0014458:	5a                   	pop    edx
c0014459:	59                   	pop    ecx
c001445a:	50                   	push   eax
c001445b:	56                   	push   esi
c001445c:	e8 fd c2 fe ff       	call   c000075e <strcat>
c0014461:	5f                   	pop    edi
c0014462:	5d                   	pop    ebp
c0014463:	56                   	push   esi
c0014464:	53                   	push   ebx
c0014465:	e8 68 bf ff ff       	call   c00103d2 <Device::setName(char const*)>
c001446a:	58                   	pop    eax
c001446b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0014471:	5a                   	pop    edx
c0014472:	68 44 12 02 c0       	push   0xc0021244
c0014477:	50                   	push   eax
c0014478:	e8 7b c2 fe ff       	call   c00006f8 <strcmp>
c001447d:	83 c4 10             	add    esp,0x10
c0014480:	85 c0                	test   eax,eax
c0014482:	0f 85 73 03 00 00    	jne    c00147fb <CPU::detectFeatures()+0x9e3>
c0014488:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001448f:	e9 67 03 00 00       	jmp    c00147fb <CPU::detectFeatures()+0x9e3>
c0014494:	83 f8 02             	cmp    eax,0x2
c0014497:	0f 85 b5 00 00 00    	jne    c0014552 <CPU::detectFeatures()+0x73a>
c001449d:	57                   	push   edi
c001449e:	57                   	push   edi
c001449f:	68 56 12 02 c0       	push   0xc0021256
c00144a4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00144a8:	56                   	push   esi
c00144a9:	e8 f9 c1 fe ff       	call   c00006a7 <strcpy>
c00144ae:	5d                   	pop    ebp
c00144af:	58                   	pop    eax
c00144b0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00144b6:	66 c1 e8 06          	shr    ax,0x6
c00144ba:	0f b6 c0             	movzx  eax,al
c00144bd:	50                   	push   eax
c00144be:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00144c4:	c1 e8 0e             	shr    eax,0xe
c00144c7:	0f b6 c0             	movzx  eax,al
c00144ca:	50                   	push   eax
c00144cb:	e8 81 f2 ff ff       	call   c0013751 <lookupAMDCPUName(unsigned char, unsigned char)>
c00144d0:	5a                   	pop    edx
c00144d1:	59                   	pop    ecx
c00144d2:	50                   	push   eax
c00144d3:	56                   	push   esi
c00144d4:	e8 85 c2 fe ff       	call   c000075e <strcat>
c00144d9:	5f                   	pop    edi
c00144da:	5d                   	pop    ebp
c00144db:	56                   	push   esi
c00144dc:	53                   	push   ebx
c00144dd:	e8 f0 be ff ff       	call   c00103d2 <Device::setName(char const*)>
c00144e2:	58                   	pop    eax
c00144e3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00144e9:	5a                   	pop    edx
c00144ea:	68 5b 12 02 c0       	push   0xc002125b
c00144ef:	50                   	push   eax
c00144f0:	e8 03 c2 fe ff       	call   c00006f8 <strcmp>
c00144f5:	83 c4 10             	add    esp,0x10
c00144f8:	85 c0                	test   eax,eax
c00144fa:	75 20                	jne    c001451c <CPU::detectFeatures()+0x704>
c00144fc:	8b 15 08 32 02 c0    	mov    edx,DWORD PTR ds:0xc0023208
c0014502:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014508:	a8 01                	test   al,0x1
c001450a:	74 10                	je     c001451c <CPU::detectFeatures()+0x704>
c001450c:	83 e0 fe             	and    eax,0xfffffffe
c001450f:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014515:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001451c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014522:	c1 e8 0e             	shr    eax,0xe
c0014525:	3c 05                	cmp    al,0x5
c0014527:	0f 85 ce 02 00 00    	jne    c00147fb <CPU::detectFeatures()+0x9e3>
c001452d:	56                   	push   esi
c001452e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0014534:	83 e0 0f             	and    eax,0xf
c0014537:	50                   	push   eax
c0014538:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001453e:	66 c1 e8 06          	shr    ax,0x6
c0014542:	0f b6 c0             	movzx  eax,al
c0014545:	50                   	push   eax
c0014546:	6a 05                	push   0x5
c0014548:	e8 7a f6 ff ff       	call   c0013bc7 <AMD_K6_writeback(int, int, int)>
c001454d:	e9 1f 02 00 00       	jmp    c0014771 <CPU::detectFeatures()+0x959>
c0014552:	8d 50 fd             	lea    edx,[eax-0x3]
c0014555:	83 fa 01             	cmp    edx,0x1
c0014558:	76 09                	jbe    c0014563 <CPU::detectFeatures()+0x74b>
c001455a:	83 f8 06             	cmp    eax,0x6
c001455d:	0f 85 91 01 00 00    	jne    c00146f4 <CPU::detectFeatures()+0x8dc>
c0014563:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014569:	c1 ea 0e             	shr    edx,0xe
c001456c:	80 fa 05             	cmp    dl,0x5
c001456f:	75 7b                	jne    c00145ec <CPU::detectFeatures()+0x7d4>
c0014571:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014577:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001457c:	66 81 fa 00 01       	cmp    dx,0x100
c0014581:	75 0c                	jne    c001458f <CPU::detectFeatures()+0x777>
c0014583:	51                   	push   ecx
c0014584:	51                   	push   ecx
c0014585:	68 62 12 02 c0       	push   0xc0021262
c001458a:	e9 dc 01 00 00       	jmp    c001476b <CPU::detectFeatures()+0x953>
c001458f:	66 81 fa 00 02       	cmp    dx,0x200
c0014594:	75 0c                	jne    c00145a2 <CPU::detectFeatures()+0x78a>
c0014596:	52                   	push   edx
c0014597:	52                   	push   edx
c0014598:	68 75 12 02 c0       	push   0xc0021275
c001459d:	e9 c9 01 00 00       	jmp    c001476b <CPU::detectFeatures()+0x953>
c00145a2:	66 81 fa 40 02       	cmp    dx,0x240
c00145a7:	75 0c                	jne    c00145b5 <CPU::detectFeatures()+0x79d>
c00145a9:	50                   	push   eax
c00145aa:	50                   	push   eax
c00145ab:	68 87 12 02 c0       	push   0xc0021287
c00145b0:	e9 b6 01 00 00       	jmp    c001476b <CPU::detectFeatures()+0x953>
c00145b5:	83 f8 06             	cmp    eax,0x6
c00145b8:	75 0c                	jne    c00145c6 <CPU::detectFeatures()+0x7ae>
c00145ba:	50                   	push   eax
c00145bb:	50                   	push   eax
c00145bc:	68 99 12 02 c0       	push   0xc0021299
c00145c1:	e9 a5 01 00 00       	jmp    c001476b <CPU::detectFeatures()+0x953>
c00145c6:	83 f8 04             	cmp    eax,0x4
c00145c9:	75 0c                	jne    c00145d7 <CPU::detectFeatures()+0x7bf>
c00145cb:	50                   	push   eax
c00145cc:	50                   	push   eax
c00145cd:	68 a5 12 02 c0       	push   0xc00212a5
c00145d2:	e9 94 01 00 00       	jmp    c001476b <CPU::detectFeatures()+0x953>
c00145d7:	83 f8 03             	cmp    eax,0x3
c00145da:	0f 85 1b 02 00 00    	jne    c00147fb <CPU::detectFeatures()+0x9e3>
c00145e0:	50                   	push   eax
c00145e1:	50                   	push   eax
c00145e2:	68 ad 12 02 c0       	push   0xc00212ad
c00145e7:	e9 7f 01 00 00       	jmp    c001476b <CPU::detectFeatures()+0x953>
c00145ec:	80 fa 06             	cmp    dl,0x6
c00145ef:	0f 85 db 00 00 00    	jne    c00146d0 <CPU::detectFeatures()+0x8b8>
c00145f5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00145fb:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0014600:	66 81 fa 80 01       	cmp    dx,0x180
c0014605:	75 0c                	jne    c0014613 <CPU::detectFeatures()+0x7fb>
c0014607:	50                   	push   eax
c0014608:	50                   	push   eax
c0014609:	68 b8 12 02 c0       	push   0xc00212b8
c001460e:	e9 58 01 00 00       	jmp    c001476b <CPU::detectFeatures()+0x953>
c0014613:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0014619:	66 f7 c1 80 ff       	test   cx,0xff80
c001461e:	75 0c                	jne    c001462c <CPU::detectFeatures()+0x814>
c0014620:	50                   	push   eax
c0014621:	50                   	push   eax
c0014622:	68 c8 12 02 c0       	push   0xc00212c8
c0014627:	e9 3f 01 00 00       	jmp    c001476b <CPU::detectFeatures()+0x953>
c001462c:	66 81 fa 40 02       	cmp    dx,0x240
c0014631:	75 0c                	jne    c001463f <CPU::detectFeatures()+0x827>
c0014633:	55                   	push   ebp
c0014634:	55                   	push   ebp
c0014635:	68 cf 12 02 c0       	push   0xc00212cf
c001463a:	e9 2c 01 00 00       	jmp    c001476b <CPU::detectFeatures()+0x953>
c001463f:	66 81 fa 80 02       	cmp    dx,0x280
c0014644:	75 0c                	jne    c0014652 <CPU::detectFeatures()+0x83a>
c0014646:	57                   	push   edi
c0014647:	57                   	push   edi
c0014648:	68 d8 12 02 c0       	push   0xc00212d8
c001464d:	e9 19 01 00 00       	jmp    c001476b <CPU::detectFeatures()+0x953>
c0014652:	66 81 fa 40 03       	cmp    dx,0x340
c0014657:	74 ed                	je     c0014646 <CPU::detectFeatures()+0x82e>
c0014659:	66 81 fa c0 03       	cmp    dx,0x3c0
c001465e:	75 0c                	jne    c001466c <CPU::detectFeatures()+0x854>
c0014660:	56                   	push   esi
c0014661:	56                   	push   esi
c0014662:	68 df 12 02 c0       	push   0xc00212df
c0014667:	e9 ff 00 00 00       	jmp    c001476b <CPU::detectFeatures()+0x953>
c001466c:	83 f8 06             	cmp    eax,0x6
c001466f:	0f 84 45 ff ff ff    	je     c00145ba <CPU::detectFeatures()+0x7a2>
c0014675:	83 f8 04             	cmp    eax,0x4
c0014678:	0f 84 4d ff ff ff    	je     c00145cb <CPU::detectFeatures()+0x7b3>
c001467e:	83 f8 03             	cmp    eax,0x3
c0014681:	0f 85 74 01 00 00    	jne    c00147fb <CPU::detectFeatures()+0x9e3>
c0014687:	51                   	push   ecx
c0014688:	51                   	push   ecx
c0014689:	68 e8 12 02 c0       	push   0xc00212e8
c001468e:	53                   	push   ebx
c001468f:	e8 3e bd ff ff       	call   c00103d2 <Device::setName(char const*)>
c0014694:	b1 c1                	mov    cl,0xc1
c0014696:	88 c8                	mov    al,cl
c0014698:	e6 22                	out    0x22,al
c001469a:	e4 23                	in     al,0x23
c001469c:	88 c2                	mov    dl,al
c001469e:	88 c8                	mov    al,cl
c00146a0:	e6 22                	out    0x22,al
c00146a2:	88 d0                	mov    al,dl
c00146a4:	83 c8 10             	or     eax,0x10
c00146a7:	e6 23                	out    0x23,al
c00146a9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00146b0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00146b3:	89 d0                	mov    eax,edx
c00146b5:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00146bb:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00146bf:	40                   	inc    eax
c00146c0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00146c6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00146cb:	e9 a1 00 00 00       	jmp    c0014771 <CPU::detectFeatures()+0x959>
c00146d0:	83 f8 06             	cmp    eax,0x6
c00146d3:	0f 84 e1 fe ff ff    	je     c00145ba <CPU::detectFeatures()+0x7a2>
c00146d9:	83 f8 04             	cmp    eax,0x4
c00146dc:	0f 84 e9 fe ff ff    	je     c00145cb <CPU::detectFeatures()+0x7b3>
c00146e2:	83 f8 03             	cmp    eax,0x3
c00146e5:	0f 85 10 01 00 00    	jne    c00147fb <CPU::detectFeatures()+0x9e3>
c00146eb:	52                   	push   edx
c00146ec:	52                   	push   edx
c00146ed:	68 f3 12 02 c0       	push   0xc00212f3
c00146f2:	eb 77                	jmp    c001476b <CPU::detectFeatures()+0x953>
c00146f4:	83 f8 07             	cmp    eax,0x7
c00146f7:	75 09                	jne    c0014702 <CPU::detectFeatures()+0x8ea>
c00146f9:	50                   	push   eax
c00146fa:	50                   	push   eax
c00146fb:	68 fd 12 02 c0       	push   0xc00212fd
c0014700:	eb 69                	jmp    c001476b <CPU::detectFeatures()+0x953>
c0014702:	83 f8 0a             	cmp    eax,0xa
c0014705:	75 09                	jne    c0014710 <CPU::detectFeatures()+0x8f8>
c0014707:	50                   	push   eax
c0014708:	50                   	push   eax
c0014709:	68 08 13 02 c0       	push   0xc0021308
c001470e:	eb 5b                	jmp    c001476b <CPU::detectFeatures()+0x953>
c0014710:	83 f8 0b             	cmp    eax,0xb
c0014713:	75 09                	jne    c001471e <CPU::detectFeatures()+0x906>
c0014715:	50                   	push   eax
c0014716:	50                   	push   eax
c0014717:	68 10 13 02 c0       	push   0xc0021310
c001471c:	eb 4d                	jmp    c001476b <CPU::detectFeatures()+0x953>
c001471e:	83 f8 08             	cmp    eax,0x8
c0014721:	75 09                	jne    c001472c <CPU::detectFeatures()+0x914>
c0014723:	50                   	push   eax
c0014724:	50                   	push   eax
c0014725:	68 19 13 02 c0       	push   0xc0021319
c001472a:	eb 3f                	jmp    c001476b <CPU::detectFeatures()+0x953>
c001472c:	83 f8 09             	cmp    eax,0x9
c001472f:	75 09                	jne    c001473a <CPU::detectFeatures()+0x922>
c0014731:	50                   	push   eax
c0014732:	50                   	push   eax
c0014733:	68 21 13 02 c0       	push   0xc0021321
c0014738:	eb 31                	jmp    c001476b <CPU::detectFeatures()+0x953>
c001473a:	83 f8 05             	cmp    eax,0x5
c001473d:	75 09                	jne    c0014748 <CPU::detectFeatures()+0x930>
c001473f:	50                   	push   eax
c0014740:	50                   	push   eax
c0014741:	68 29 13 02 c0       	push   0xc0021329
c0014746:	eb 23                	jmp    c001476b <CPU::detectFeatures()+0x953>
c0014748:	83 f8 0c             	cmp    eax,0xc
c001474b:	75 09                	jne    c0014756 <CPU::detectFeatures()+0x93e>
c001474d:	55                   	push   ebp
c001474e:	55                   	push   ebp
c001474f:	68 37 13 02 c0       	push   0xc0021337
c0014754:	eb 15                	jmp    c001476b <CPU::detectFeatures()+0x953>
c0014756:	83 f8 0d             	cmp    eax,0xd
c0014759:	75 09                	jne    c0014764 <CPU::detectFeatures()+0x94c>
c001475b:	57                   	push   edi
c001475c:	57                   	push   edi
c001475d:	68 42 13 02 c0       	push   0xc0021342
c0014762:	eb 07                	jmp    c001476b <CPU::detectFeatures()+0x953>
c0014764:	56                   	push   esi
c0014765:	56                   	push   esi
c0014766:	68 56 13 02 c0       	push   0xc0021356
c001476b:	53                   	push   ebx
c001476c:	e8 61 bc ff ff       	call   c00103d2 <Device::setName(char const*)>
c0014771:	83 c4 10             	add    esp,0x10
c0014774:	e9 82 00 00 00       	jmp    c00147fb <CPU::detectFeatures()+0x9e3>
c0014779:	51                   	push   ecx
c001477a:	51                   	push   ecx
c001477b:	68 a2 11 02 c0       	push   0xc00211a2
c0014780:	57                   	push   edi
c0014781:	e8 21 bf fe ff       	call   c00006a7 <strcpy>
c0014786:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014790:	e8 ea b9 fe ff       	call   c000017f <is486>
c0014795:	83 c4 10             	add    esp,0x10
c0014798:	85 c0                	test   eax,eax
c001479a:	74 2d                	je     c00147c9 <CPU::detectFeatures()+0x9b1>
c001479c:	52                   	push   edx
c001479d:	52                   	push   edx
c001479e:	68 62 13 02 c0       	push   0xc0021362
c00147a3:	53                   	push   ebx
c00147a4:	e8 29 bc ff ff       	call   c00103d2 <Device::setName(char const*)>
c00147a9:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00147b0:	e8 13 a2 00 00       	call   c001e9c8 <CPU::readCR0()>
c00147b5:	83 c4 10             	add    esp,0x10
c00147b8:	83 e0 14             	and    eax,0x14
c00147bb:	83 f8 04             	cmp    eax,0x4
c00147be:	75 1f                	jne    c00147df <CPU::detectFeatures()+0x9c7>
c00147c0:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00147c7:	eb 32                	jmp    c00147fb <CPU::detectFeatures()+0x9e3>
c00147c9:	50                   	push   eax
c00147ca:	50                   	push   eax
c00147cb:	68 6d 13 02 c0       	push   0xc002136d
c00147d0:	53                   	push   ebx
c00147d1:	e8 fc bb ff ff       	call   c00103d2 <Device::setName(char const*)>
c00147d6:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00147dd:	eb d1                	jmp    c00147b0 <CPU::detectFeatures()+0x998>
c00147df:	e8 76 b9 fe ff       	call   c000015a <hasLegacyFPU>
c00147e4:	83 e0 01             	and    eax,0x1
c00147e7:	8d 14 00             	lea    edx,[eax+eax*1]
c00147ea:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00147f0:	83 e0 fd             	and    eax,0xfffffffd
c00147f3:	09 d0                	or     eax,edx
c00147f5:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00147fb:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0014802:	83 c4 4c             	add    esp,0x4c
c0014805:	5b                   	pop    ebx
c0014806:	5e                   	pop    esi
c0014807:	5f                   	pop    edi
c0014808:	5d                   	pop    ebp
c0014809:	c3                   	ret    

c001480a <CPU::setupSMEP()>:
c001480a:	83 ec 0c             	sub    esp,0xc
c001480d:	e8 80 a4 00 00       	call   c001ec92 <CPU::readCR4()>
c0014812:	0d 00 00 10 00       	or     eax,0x100000
c0014817:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001481b:	83 c4 0c             	add    esp,0xc
c001481e:	e9 8a a4 00 00       	jmp    c001ecad <CPU::writeCR4(unsigned long)>
c0014823:	90                   	nop

c0014824 <CPU::setupUMIP()>:
c0014824:	83 ec 0c             	sub    esp,0xc
c0014827:	e8 66 a4 00 00       	call   c001ec92 <CPU::readCR4()>
c001482c:	80 cc 08             	or     ah,0x8
c001482f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014833:	83 c4 0c             	add    esp,0xc
c0014836:	e9 72 a4 00 00       	jmp    c001ecad <CPU::writeCR4(unsigned long)>
c001483b:	90                   	nop

c001483c <CPU::setupTSC()>:
c001483c:	83 ec 0c             	sub    esp,0xc
c001483f:	e8 4e a4 00 00       	call   c001ec92 <CPU::readCR4()>
c0014844:	83 c8 04             	or     eax,0x4
c0014847:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001484b:	83 c4 0c             	add    esp,0xc
c001484e:	e9 5a a4 00 00       	jmp    c001ecad <CPU::writeCR4(unsigned long)>
c0014853:	90                   	nop

c0014854 <CPU::setupLargePages()>:
c0014854:	83 ec 0c             	sub    esp,0xc
c0014857:	e8 36 a4 00 00       	call   c001ec92 <CPU::readCR4()>
c001485c:	83 c8 10             	or     eax,0x10
c001485f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014863:	83 c4 0c             	add    esp,0xc
c0014866:	e9 42 a4 00 00       	jmp    c001ecad <CPU::writeCR4(unsigned long)>
c001486b:	90                   	nop

c001486c <CPU::setupPAT()>:
c001486c:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c0014871:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014878:	74 2c                	je     c00148a6 <CPU::setupPAT()+0x3a>
c001487a:	53                   	push   ebx
c001487b:	83 ec 10             	sub    esp,0x10
c001487e:	68 77 02 00 00       	push   0x277
c0014883:	50                   	push   eax
c0014884:	e8 3d 69 ff ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c0014889:	83 e2 f8             	and    edx,0xfffffff8
c001488c:	83 ca 01             	or     edx,0x1
c001488f:	52                   	push   edx
c0014890:	50                   	push   eax
c0014891:	68 77 02 00 00       	push   0x277
c0014896:	ff 35 08 32 02 c0    	push   DWORD PTR ds:0xc0023208
c001489c:	e8 51 69 ff ff       	call   c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>
c00148a1:	83 c4 28             	add    esp,0x28
c00148a4:	5b                   	pop    ebx
c00148a5:	c3                   	ret    
c00148a6:	c3                   	ret    
c00148a7:	90                   	nop

c00148a8 <CPU::setupMTRR()>:
c00148a8:	c3                   	ret    
c00148a9:	90                   	nop

c00148aa <CPU::setupGlobalPages()>:
c00148aa:	83 ec 0c             	sub    esp,0xc
c00148ad:	e8 e0 a3 00 00       	call   c001ec92 <CPU::readCR4()>
c00148b2:	0c 80                	or     al,0x80
c00148b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00148b8:	83 c4 0c             	add    esp,0xc
c00148bb:	e9 ed a3 00 00       	jmp    c001ecad <CPU::writeCR4(unsigned long)>

c00148c0 <CPU::allowUsermodeDataAccess()>:
c00148c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00148c4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00148cb:	74 03                	je     c00148d0 <CPU::allowUsermodeDataAccess()+0x10>
c00148cd:	0f 01 cb             	stac   
c00148d0:	c3                   	ret    
c00148d1:	90                   	nop

c00148d2 <CPU::prohibitUsermodeDataAccess()>:
c00148d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00148d6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00148dd:	74 03                	je     c00148e2 <CPU::prohibitUsermodeDataAccess()+0x10>
c00148df:	0f 01 ca             	clac   
c00148e2:	c3                   	ret    
c00148e3:	90                   	nop

c00148e4 <CPU::setupSMAP()>:
c00148e4:	53                   	push   ebx
c00148e5:	83 ec 08             	sub    esp,0x8
c00148e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00148ec:	e8 a1 a3 00 00       	call   c001ec92 <CPU::readCR4()>
c00148f1:	83 ec 0c             	sub    esp,0xc
c00148f4:	0d 00 00 20 00       	or     eax,0x200000
c00148f9:	50                   	push   eax
c00148fa:	e8 ae a3 00 00       	call   c001ecad <CPU::writeCR4(unsigned long)>
c00148ff:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014903:	83 c4 18             	add    esp,0x18
c0014906:	5b                   	pop    ebx
c0014907:	eb c9                	jmp    c00148d2 <CPU::prohibitUsermodeDataAccess()>
c0014909:	90                   	nop

c001490a <CPU::setupFeatures()>:
c001490a:	53                   	push   ebx
c001490b:	83 ec 08             	sub    esp,0x8
c001490e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014912:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014919:	74 0c                	je     c0014927 <CPU::setupFeatures()+0x1d>
c001491b:	83 ec 0c             	sub    esp,0xc
c001491e:	53                   	push   ebx
c001491f:	e8 e6 fe ff ff       	call   c001480a <CPU::setupSMEP()>
c0014924:	83 c4 10             	add    esp,0x10
c0014927:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001492e:	74 0c                	je     c001493c <CPU::setupFeatures()+0x32>
c0014930:	83 ec 0c             	sub    esp,0xc
c0014933:	53                   	push   ebx
c0014934:	e8 ab ff ff ff       	call   c00148e4 <CPU::setupSMAP()>
c0014939:	83 c4 10             	add    esp,0x10
c001493c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014943:	74 0c                	je     c0014951 <CPU::setupFeatures()+0x47>
c0014945:	83 ec 0c             	sub    esp,0xc
c0014948:	53                   	push   ebx
c0014949:	e8 d6 fe ff ff       	call   c0014824 <CPU::setupUMIP()>
c001494e:	83 c4 10             	add    esp,0x10
c0014951:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014958:	74 0c                	je     c0014966 <CPU::setupFeatures()+0x5c>
c001495a:	83 ec 0c             	sub    esp,0xc
c001495d:	53                   	push   ebx
c001495e:	e8 d9 fe ff ff       	call   c001483c <CPU::setupTSC()>
c0014963:	83 c4 10             	add    esp,0x10
c0014966:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001496d:	74 0c                	je     c001497b <CPU::setupFeatures()+0x71>
c001496f:	83 ec 0c             	sub    esp,0xc
c0014972:	53                   	push   ebx
c0014973:	e8 dc fe ff ff       	call   c0014854 <CPU::setupLargePages()>
c0014978:	83 c4 10             	add    esp,0x10
c001497b:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014982:	74 0c                	je     c0014990 <CPU::setupFeatures()+0x86>
c0014984:	83 ec 0c             	sub    esp,0xc
c0014987:	53                   	push   ebx
c0014988:	e8 1d ff ff ff       	call   c00148aa <CPU::setupGlobalPages()>
c001498d:	83 c4 10             	add    esp,0x10
c0014990:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014997:	74 0d                	je     c00149a6 <CPU::setupFeatures()+0x9c>
c0014999:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001499d:	83 c4 08             	add    esp,0x8
c00149a0:	5b                   	pop    ebx
c00149a1:	e9 c6 fe ff ff       	jmp    c001486c <CPU::setupPAT()>
c00149a6:	83 c4 08             	add    esp,0x8
c00149a9:	5b                   	pop    ebx
c00149aa:	c3                   	ret    
c00149ab:	90                   	nop

c00149ac <CPU::open(int, int, void*)>:
c00149ac:	57                   	push   edi
c00149ad:	56                   	push   esi
c00149ae:	53                   	push   ebx
c00149af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00149b3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00149b7:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00149bd:	83 ec 0c             	sub    esp,0xc
c00149c0:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00149c6:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00149cc:	50                   	push   eax
c00149cd:	e8 d8 6a ff ff       	call   c000b4aa <GDT::setup()>
c00149d2:	83 c4 0c             	add    esp,0xc
c00149d5:	6a 00                	push   0x0
c00149d7:	68 ef be ad de       	push   0xdeadbeef
c00149dc:	57                   	push   edi
c00149dd:	e8 aa 8c ff ff       	call   c000d68c <TSS::setup(unsigned long, unsigned long)>
c00149e2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00149e5:	e8 82 8c ff ff       	call   c000d66c <TSS::flush()>
c00149ea:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00149f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00149f3:	e8 0c 6d ff ff       	call   c000b704 <IDT::setup()>
c00149f8:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c00149ff:	e8 a0 a2 00 00       	call   c001eca4 <CPU::writeDR7(unsigned long)>
c0014a04:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0014a0e:	e8 b5 77 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c0014a13:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0014a19:	89 30                	mov    DWORD PTR [eax],esi
c0014a1b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0014a21:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0014a24:	58                   	pop    eax
c0014a25:	5a                   	pop    edx
c0014a26:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0014a2c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014a30:	e8 37 9a ff ff       	call   c000e46c <VAS::setCPUSpecific(unsigned long)>
c0014a35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a38:	e8 db f3 ff ff       	call   c0013e18 <CPU::detectFeatures()>
c0014a3d:	e8 9a c7 ff ff       	call   c00111dc <setupInterruptController()>
c0014a42:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0014a48:	a1 20 32 02 c0       	mov    eax,ds:0xc0023220
c0014a4d:	83 e0 10             	and    eax,0x10
c0014a50:	83 f8 01             	cmp    eax,0x1
c0014a53:	19 c0                	sbb    eax,eax
c0014a55:	83 e0 46             	and    eax,0x46
c0014a58:	83 c0 1e             	add    eax,0x1e
c0014a5b:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a5e:	e8 61 d9 ff ff       	call   c00123c4 <setupTimer(int)>
c0014a63:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0014a69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a6c:	e8 99 fe ff ff       	call   c001490a <CPU::setupFeatures()>
c0014a71:	83 c4 10             	add    esp,0x10
c0014a74:	31 c0                	xor    eax,eax
c0014a76:	5b                   	pop    ebx
c0014a77:	5e                   	pop    esi
c0014a78:	5f                   	pop    edi
c0014a79:	c3                   	ret    

c0014a7a <Krnl::panic(char const*)>:
c0014a7a:	55                   	push   ebp
c0014a7b:	89 e5                	mov    ebp,esp
c0014a7d:	53                   	push   ebx
c0014a7e:	83 ec 0c             	sub    esp,0xc
c0014a81:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0014a84:	fa                   	cli    
c0014a85:	c6 05 d0 3b 02 c0 01 	mov    BYTE PTR ds:0xc0023bd0,0x1
c0014a8c:	53                   	push   ebx
c0014a8d:	c6 05 40 26 02 c0 00 	mov    BYTE PTR ds:0xc0022640,0x0
c0014a94:	68 a4 13 02 c0       	push   0xc00213a4
c0014a99:	e8 47 a3 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0014a9e:	58                   	pop    eax
c0014a9f:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014aa4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aaa:	e8 1e 84 ff ff       	call   c000cecd <setActiveTerminal(VgaText*)>
c0014aaf:	83 c4 0c             	add    esp,0xc
c0014ab2:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014ab7:	6a 01                	push   0x1
c0014ab9:	6a 0f                	push   0xf
c0014abb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ac1:	e8 46 7e ff ff       	call   c000c90c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014ac6:	5a                   	pop    edx
c0014ac7:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014acc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ad2:	e8 97 86 ff ff       	call   c000d16e <VgaText::clearScreen()>
c0014ad7:	59                   	pop    ecx
c0014ad8:	58                   	pop    eax
c0014ad9:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014ade:	68 bd 13 02 c0       	push   0xc00213bd
c0014ae3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ae9:	e8 fe 87 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014aee:	58                   	pop    eax
c0014aef:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014af4:	5a                   	pop    edx
c0014af5:	68 5c 14 02 c0       	push   0xc002145c
c0014afa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b00:	e8 e7 87 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014b05:	59                   	pop    ecx
c0014b06:	58                   	pop    eax
c0014b07:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014b0c:	68 d9 13 02 c0       	push   0xc00213d9
c0014b11:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b17:	e8 d0 87 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014b1c:	58                   	pop    eax
c0014b1d:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014b22:	5a                   	pop    edx
c0014b23:	53                   	push   ebx
c0014b24:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b2a:	e8 bd 87 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014b2f:	59                   	pop    ecx
c0014b30:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014b35:	5b                   	pop    ebx
c0014b36:	68 f9 13 02 c0       	push   0xc00213f9
c0014b3b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b41:	e8 a6 87 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014b46:	58                   	pop    eax
c0014b47:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014b4c:	5a                   	pop    edx
c0014b4d:	68 98 14 02 c0       	push   0xc0021498
c0014b52:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b58:	e8 8f 87 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014b5d:	59                   	pop    ecx
c0014b5e:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014b63:	5b                   	pop    ebx
c0014b64:	68 d9 13 02 c0       	push   0xc00213d9
c0014b69:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b6f:	e8 78 87 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014b74:	58                   	pop    eax
c0014b75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b7a:	5a                   	pop    edx
c0014b7b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b7e:	83 c0 0c             	add    eax,0xc
c0014b81:	50                   	push   eax
c0014b82:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014b87:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b8d:	e8 5a 87 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014b92:	59                   	pop    ecx
c0014b93:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014b98:	5b                   	pop    ebx
c0014b99:	68 f8 13 02 c0       	push   0xc00213f8
c0014b9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ba4:	e8 43 87 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014ba9:	58                   	pop    eax
c0014baa:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014baf:	5a                   	pop    edx
c0014bb0:	68 c4 14 02 c0       	push   0xc00214c4
c0014bb5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bbb:	e8 2c 87 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014bc0:	59                   	pop    ecx
c0014bc1:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014bc6:	5b                   	pop    ebx
c0014bc7:	68 04 15 02 c0       	push   0xc0021504
c0014bcc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bd2:	e8 15 87 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014bd7:	58                   	pop    eax
c0014bd8:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014bdd:	5a                   	pop    edx
c0014bde:	68 e4 13 02 c0       	push   0xc00213e4
c0014be3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014be9:	e8 fe 86 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014bee:	59                   	pop    ecx
c0014bef:	5b                   	pop    ebx
c0014bf0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014bf3:	68 fc 13 02 c0       	push   0xc00213fc
c0014bf8:	e8 e8 a1 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0014bfd:	58                   	pop    eax
c0014bfe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014c01:	5a                   	pop    edx
c0014c02:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014c05:	68 05 14 02 c0       	push   0xc0021405
c0014c0a:	e8 d6 a1 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0014c0f:	59                   	pop    ecx
c0014c10:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014c13:	5b                   	pop    ebx
c0014c14:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c16:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014c19:	68 1d 0c 02 c0       	push   0xc0020c1d
c0014c1e:	e8 c2 a1 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0014c23:	58                   	pop    eax
c0014c24:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014c29:	5a                   	pop    edx
c0014c2a:	68 48 15 02 c0       	push   0xc0021548
c0014c2f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c35:	e8 b2 86 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014c3a:	59                   	pop    ecx
c0014c3b:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014c40:	5b                   	pop    ebx
c0014c41:	68 0e 14 02 c0       	push   0xc002140e
c0014c46:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c4c:	e8 9b 86 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014c51:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014c56:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014c5c:	e8 67 9d 00 00       	call   c001e9c8 <CPU::readCR0()>
c0014c61:	5a                   	pop    edx
c0014c62:	59                   	pop    ecx
c0014c63:	50                   	push   eax
c0014c64:	53                   	push   ebx
c0014c65:	e8 a8 86 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014c6a:	5b                   	pop    ebx
c0014c6b:	58                   	pop    eax
c0014c6c:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014c71:	68 18 14 02 c0       	push   0xc0021418
c0014c76:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c7c:	e8 6b 86 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014c81:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014c86:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014c8c:	e8 25 a0 00 00       	call   c001ecb6 <CPU::readCR2()>
c0014c91:	5a                   	pop    edx
c0014c92:	59                   	pop    ecx
c0014c93:	50                   	push   eax
c0014c94:	53                   	push   ebx
c0014c95:	e8 78 86 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014c9a:	5b                   	pop    ebx
c0014c9b:	58                   	pop    eax
c0014c9c:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014ca1:	68 22 14 02 c0       	push   0xc0021422
c0014ca6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cac:	e8 3b 86 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014cb1:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014cb6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014cbc:	e8 94 99 00 00       	call   c001e655 <CPU::readCR3()>
c0014cc1:	5a                   	pop    edx
c0014cc2:	59                   	pop    ecx
c0014cc3:	50                   	push   eax
c0014cc4:	53                   	push   ebx
c0014cc5:	e8 48 86 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014cca:	5b                   	pop    ebx
c0014ccb:	58                   	pop    eax
c0014ccc:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014cd1:	68 35 14 02 c0       	push   0xc0021435
c0014cd6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cdc:	e8 0b 86 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014ce1:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014ce6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014cec:	e8 a1 9f 00 00       	call   c001ec92 <CPU::readCR4()>
c0014cf1:	5a                   	pop    edx
c0014cf2:	59                   	pop    ecx
c0014cf3:	50                   	push   eax
c0014cf4:	53                   	push   ebx
c0014cf5:	e8 18 86 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014cfa:	5b                   	pop    ebx
c0014cfb:	58                   	pop    eax
c0014cfc:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014d01:	68 3f 14 02 c0       	push   0xc002143f
c0014d06:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d0c:	e8 db 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d11:	5a                   	pop    edx
c0014d12:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014d17:	59                   	pop    ecx
c0014d18:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014d1e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014d21:	50                   	push   eax
c0014d22:	e8 eb 85 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014d27:	5b                   	pop    ebx
c0014d28:	58                   	pop    eax
c0014d29:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014d2e:	68 56 14 02 c0       	push   0xc0021456
c0014d33:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d39:	e8 ae 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d3e:	5a                   	pop    edx
c0014d3f:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014d44:	59                   	pop    ecx
c0014d45:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014d4b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014d4e:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014d51:	50                   	push   eax
c0014d52:	e8 bb 85 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014d57:	5b                   	pop    ebx
c0014d58:	58                   	pop    eax
c0014d59:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014d5e:	68 56 14 02 c0       	push   0xc0021456
c0014d63:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d69:	e8 7e 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d6e:	59                   	pop    ecx
c0014d6f:	a1 d4 45 02 c0       	mov    eax,ds:0xc00245d4
c0014d74:	5b                   	pop    ebx
c0014d75:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014d7b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014d7e:	8b 12                	mov    edx,DWORD PTR [edx]
c0014d80:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014d83:	50                   	push   eax
c0014d84:	e8 89 85 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014d89:	83 c4 10             	add    esp,0x10
c0014d8c:	b2 fe                	mov    dl,0xfe
c0014d8e:	e4 60                	in     al,0x60
c0014d90:	3c 1c                	cmp    al,0x1c
c0014d92:	74 04                	je     c0014d98 <Krnl::panic(char const*)+0x31e>
c0014d94:	3c 5a                	cmp    al,0x5a
c0014d96:	75 f6                	jne    c0014d8e <Krnl::panic(char const*)+0x314>
c0014d98:	e4 64                	in     al,0x64
c0014d9a:	a8 02                	test   al,0x2
c0014d9c:	75 fa                	jne    c0014d98 <Krnl::panic(char const*)+0x31e>
c0014d9e:	88 d0                	mov    al,dl
c0014da0:	e6 64                	out    0x64,al
c0014da2:	fa                   	cli    
c0014da3:	f4                   	hlt    
c0014da4:	eb e8                	jmp    c0014d8e <Krnl::panic(char const*)+0x314>

c0014da6 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014da6:	55                   	push   ebp
c0014da7:	57                   	push   edi
c0014da8:	56                   	push   esi
c0014da9:	53                   	push   ebx
c0014daa:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014db0:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014db7:	8a 1e                	mov    bl,BYTE PTR [esi]
c0014db9:	8d 6e 01             	lea    ebp,[esi+0x1]
c0014dbc:	80 fb 40             	cmp    bl,0x40
c0014dbf:	75 1b                	jne    c0014ddc <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0014dc1:	8a 16                	mov    dl,BYTE PTR [esi]
c0014dc3:	84 d2                	test   dl,dl
c0014dc5:	0f 84 f1 00 00 00    	je     c0014ebc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014dcb:	8d 46 01             	lea    eax,[esi+0x1]
c0014dce:	80 fa 3a             	cmp    dl,0x3a
c0014dd1:	74 04                	je     c0014dd7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0014dd3:	89 c6                	mov    esi,eax
c0014dd5:	eb ea                	jmp    c0014dc1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0014dd7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014dda:	89 c6                	mov    esi,eax
c0014ddc:	50                   	push   eax
c0014ddd:	6a 40                	push   0x40
c0014ddf:	6a 00                	push   0x0
c0014de1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014de5:	50                   	push   eax
c0014de6:	e8 1d b8 fe ff       	call   c0000608 <memset>
c0014deb:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0014df2:	31 c0                	xor    eax,eax
c0014df4:	83 c4 10             	add    esp,0x10
c0014df7:	8a 0f                	mov    cl,BYTE PTR [edi]
c0014df9:	84 c9                	test   cl,cl
c0014dfb:	0f 84 bb 00 00 00    	je     c0014ebc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014e01:	3d c7 00 00 00       	cmp    eax,0xc7
c0014e06:	0f 8f b0 00 00 00    	jg     c0014ebc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014e0c:	80 f9 0a             	cmp    cl,0xa
c0014e0f:	0f 85 98 00 00 00    	jne    c0014ead <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0014e15:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0014e1a:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0014e1e:	a8 df                	test   al,0xdf
c0014e20:	0f 94 c1             	sete   cl
c0014e23:	3c 23                	cmp    al,0x23
c0014e25:	0f 94 c2             	sete   dl
c0014e28:	08 d1                	or     cl,dl
c0014e2a:	75 4a                	jne    c0014e76 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014e2c:	8d 50 f7             	lea    edx,[eax-0x9]
c0014e2f:	80 fa 01             	cmp    dl,0x1
c0014e32:	76 42                	jbe    c0014e76 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014e34:	3c 5b                	cmp    al,0x5b
c0014e36:	75 42                	jne    c0014e7a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0014e38:	80 fb 40             	cmp    bl,0x40
c0014e3b:	75 39                	jne    c0014e76 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014e3d:	83 ec 0c             	sub    esp,0xc
c0014e40:	8d 54 24 65          	lea    edx,[esp+0x65]
c0014e44:	52                   	push   edx
c0014e45:	e8 db b7 fe ff       	call   c0000625 <strlen>
c0014e4a:	83 c4 10             	add    esp,0x10
c0014e4d:	83 f8 3f             	cmp    eax,0x3f
c0014e50:	77 6a                	ja     c0014ebc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014e52:	50                   	push   eax
c0014e53:	50                   	push   eax
c0014e54:	8d 54 24 61          	lea    edx,[esp+0x61]
c0014e58:	52                   	push   edx
c0014e59:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014e5d:	52                   	push   edx
c0014e5e:	e8 44 b8 fe ff       	call   c00006a7 <strcpy>
c0014e63:	58                   	pop    eax
c0014e64:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014e68:	52                   	push   edx
c0014e69:	e8 b7 b7 fe ff       	call   c0000625 <strlen>
c0014e6e:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0014e73:	83 c4 10             	add    esp,0x10
c0014e76:	31 d2                	xor    edx,edx
c0014e78:	eb 3a                	jmp    c0014eb4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0014e7a:	80 fb 40             	cmp    bl,0x40
c0014e7d:	74 06                	je     c0014e85 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0014e7f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014e83:	eb 20                	jmp    c0014ea5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0014e85:	50                   	push   eax
c0014e86:	50                   	push   eax
c0014e87:	55                   	push   ebp
c0014e88:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014e8c:	50                   	push   eax
c0014e8d:	e8 66 b8 fe ff       	call   c00006f8 <strcmp>
c0014e92:	83 c4 10             	add    esp,0x10
c0014e95:	85 c0                	test   eax,eax
c0014e97:	75 dd                	jne    c0014e76 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014e99:	eb e4                	jmp    c0014e7f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0014e9b:	8d 50 01             	lea    edx,[eax+0x1]
c0014e9e:	80 f9 3d             	cmp    cl,0x3d
c0014ea1:	74 1d                	je     c0014ec0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0014ea3:	89 d0                	mov    eax,edx
c0014ea5:	8a 08                	mov    cl,BYTE PTR [eax]
c0014ea7:	84 c9                	test   cl,cl
c0014ea9:	75 f0                	jne    c0014e9b <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0014eab:	eb 0f                	jmp    c0014ebc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014ead:	8d 50 01             	lea    edx,[eax+0x1]
c0014eb0:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0014eb4:	47                   	inc    edi
c0014eb5:	89 d0                	mov    eax,edx
c0014eb7:	e9 3b ff ff ff       	jmp    c0014df7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0014ebc:	31 c0                	xor    eax,eax
c0014ebe:	eb 33                	jmp    c0014ef3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0014ec0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014ec4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014ec7:	50                   	push   eax
c0014ec8:	50                   	push   eax
c0014ec9:	8d 44 24 60          	lea    eax,[esp+0x60]
c0014ecd:	50                   	push   eax
c0014ece:	56                   	push   esi
c0014ecf:	e8 24 b8 fe ff       	call   c00006f8 <strcmp>
c0014ed4:	83 c4 10             	add    esp,0x10
c0014ed7:	85 c0                	test   eax,eax
c0014ed9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014edd:	75 97                	jne    c0014e76 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014edf:	51                   	push   ecx
c0014ee0:	51                   	push   ecx
c0014ee1:	52                   	push   edx
c0014ee2:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0014ee9:	e8 b9 b7 fe ff       	call   c00006a7 <strcpy>
c0014eee:	83 c4 10             	add    esp,0x10
c0014ef1:	b0 01                	mov    al,0x1
c0014ef3:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014ef9:	5b                   	pop    ebx
c0014efa:	5e                   	pop    esi
c0014efb:	5f                   	pop    edi
c0014efc:	5d                   	pop    ebp
c0014efd:	c3                   	ret    

c0014efe <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0014efe:	57                   	push   edi
c0014eff:	56                   	push   esi
c0014f00:	53                   	push   ebx
c0014f01:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0014f07:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0014f0e:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0014f15:	53                   	push   ebx
c0014f16:	e8 0a b7 fe ff       	call   c0000625 <strlen>
c0014f1b:	89 34 24             	mov    DWORD PTR [esp],esi
c0014f1e:	89 c7                	mov    edi,eax
c0014f20:	e8 00 b7 fe ff       	call   c0000625 <strlen>
c0014f25:	83 c4 10             	add    esp,0x10
c0014f28:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0014f2c:	31 ff                	xor    edi,edi
c0014f2e:	3d ff 00 00 00       	cmp    eax,0xff
c0014f33:	0f 87 18 01 00 00    	ja     c0015051 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0014f39:	51                   	push   ecx
c0014f3a:	51                   	push   ecx
c0014f3b:	56                   	push   esi
c0014f3c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0014f40:	56                   	push   esi
c0014f41:	e8 61 b7 fe ff       	call   c00006a7 <strcpy>
c0014f46:	58                   	pop    eax
c0014f47:	5a                   	pop    edx
c0014f48:	68 bb 18 02 c0       	push   0xc00218bb
c0014f4d:	56                   	push   esi
c0014f4e:	e8 0b b8 fe ff       	call   c000075e <strcat>
c0014f53:	59                   	pop    ecx
c0014f54:	58                   	pop    eax
c0014f55:	53                   	push   ebx
c0014f56:	56                   	push   esi
c0014f57:	e8 02 b8 fe ff       	call   c000075e <strcat>
c0014f5c:	58                   	pop    eax
c0014f5d:	5a                   	pop    edx
c0014f5e:	68 6e 15 02 c0       	push   0xc002156e
c0014f63:	56                   	push   esi
c0014f64:	e8 f5 b7 fe ff       	call   c000075e <strcat>
c0014f69:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014f70:	e8 81 9d ff ff       	call   c000ecf6 <operator new(unsigned long)>
c0014f75:	83 c4 0c             	add    esp,0xc
c0014f78:	89 c3                	mov    ebx,eax
c0014f7a:	ff 35 d4 45 02 c0    	push   DWORD PTR ds:0xc00245d4
c0014f80:	56                   	push   esi
c0014f81:	50                   	push   eax
c0014f82:	e8 8d a3 ff ff       	call   c000f314 <File::File(char const*, Process*)>
c0014f87:	59                   	pop    ecx
c0014f88:	5e                   	pop    esi
c0014f89:	6a 01                	push   0x1
c0014f8b:	53                   	push   ebx
c0014f8c:	e8 e7 a3 ff ff       	call   c000f378 <File::open(FileOpenMode)>
c0014f91:	83 c4 10             	add    esp,0x10
c0014f94:	85 c0                	test   eax,eax
c0014f96:	74 08                	je     c0014fa0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0014f98:	83 ec 0c             	sub    esp,0xc
c0014f9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f9d:	53                   	push   ebx
c0014f9e:	eb 2e                	jmp    c0014fce <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0014fa0:	52                   	push   edx
c0014fa1:	8d 44 24 07          	lea    eax,[esp+0x7]
c0014fa5:	50                   	push   eax
c0014fa6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0014faa:	50                   	push   eax
c0014fab:	53                   	push   ebx
c0014fac:	e8 73 a6 ff ff       	call   c000f624 <File::stat(unsigned long long*, bool*)>
c0014fb1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fb5:	83 c4 10             	add    esp,0x10
c0014fb8:	89 c1                	mov    ecx,eax
c0014fba:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0014fbe:	75 13                	jne    c0014fd3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0014fc0:	83 ec 0c             	sub    esp,0xc
c0014fc3:	53                   	push   ebx
c0014fc4:	e8 0d a4 ff ff       	call   c000f3d6 <File::close()>
c0014fc9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014fcb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014fce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014fd1:	eb 7b                	jmp    c001504e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0014fd3:	83 ec 0c             	sub    esp,0xc
c0014fd6:	50                   	push   eax
c0014fd7:	e8 42 6c ff ff       	call   c000bc1e <malloc>
c0014fdc:	89 c6                	mov    esi,eax
c0014fde:	58                   	pop    eax
c0014fdf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014fe1:	8d 54 24 10          	lea    edx,[esp+0x10]
c0014fe5:	52                   	push   edx
c0014fe6:	56                   	push   esi
c0014fe7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014feb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014fef:	53                   	push   ebx
c0014ff0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ff3:	83 c4 20             	add    esp,0x20
c0014ff6:	85 c0                	test   eax,eax
c0014ff8:	75 0a                	jne    c0015004 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0014ffa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ffe:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0015002:	74 18                	je     c001501c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0015004:	83 ec 0c             	sub    esp,0xc
c0015007:	31 ff                	xor    edi,edi
c0015009:	53                   	push   ebx
c001500a:	e8 c7 a3 ff ff       	call   c000f3d6 <File::close()>
c001500f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015011:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015014:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015017:	83 c4 10             	add    esp,0x10
c001501a:	eb 35                	jmp    c0015051 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c001501c:	83 ec 0c             	sub    esp,0xc
c001501f:	53                   	push   ebx
c0015020:	e8 b1 a3 ff ff       	call   c000f3d6 <File::close()>
c0015025:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015027:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001502a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001502d:	83 c4 0c             	add    esp,0xc
c0015030:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015037:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c001503e:	56                   	push   esi
c001503f:	e8 62 fd ff ff       	call   c0014da6 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015044:	89 34 24             	mov    DWORD PTR [esp],esi
c0015047:	89 c7                	mov    edi,eax
c0015049:	e8 e0 6b ff ff       	call   c000bc2e <free>
c001504e:	83 c4 10             	add    esp,0x10
c0015051:	81 c4 10 01 00 00    	add    esp,0x110
c0015057:	89 f8                	mov    eax,edi
c0015059:	5b                   	pop    ebx
c001505a:	5e                   	pop    esi
c001505b:	5f                   	pop    edi
c001505c:	c3                   	ret    

c001505d <Reg::getLine(char*, char*, char*)>:
c001505d:	57                   	push   edi
c001505e:	56                   	push   esi
c001505f:	53                   	push   ebx
c0015060:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015064:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015068:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001506c:	57                   	push   edi
c001506d:	56                   	push   esi
c001506e:	53                   	push   ebx
c001506f:	68 73 15 02 c0       	push   0xc0021573
c0015074:	e8 85 fe ff ff       	call   c0014efe <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015079:	83 c4 10             	add    esp,0x10
c001507c:	84 c0                	test   al,al
c001507e:	75 10                	jne    c0015090 <Reg::getLine(char*, char*, char*)+0x33>
c0015080:	57                   	push   edi
c0015081:	56                   	push   esi
c0015082:	53                   	push   ebx
c0015083:	68 98 15 02 c0       	push   0xc0021598
c0015088:	e8 71 fe ff ff       	call   c0014efe <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001508d:	83 c4 10             	add    esp,0x10
c0015090:	5b                   	pop    ebx
c0015091:	5e                   	pop    esi
c0015092:	5f                   	pop    edi
c0015093:	c3                   	ret    

c0015094 <Reg::readInt(char*, char*, int*)>:
c0015094:	55                   	push   ebp
c0015095:	57                   	push   edi
c0015096:	56                   	push   esi
c0015097:	53                   	push   ebx
c0015098:	81 ec f0 00 00 00    	sub    esp,0xf0
c001509e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00150a2:	57                   	push   edi
c00150a3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00150aa:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00150b1:	e8 a7 ff ff ff       	call   c001505d <Reg::getLine(char*, char*, char*)>
c00150b6:	83 c4 10             	add    esp,0x10
c00150b9:	84 c0                	test   al,al
c00150bb:	0f 84 b3 00 00 00    	je     c0015174 <Reg::readInt(char*, char*, int*)+0xe0>
c00150c1:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00150c5:	80 fa 2b             	cmp    dl,0x2b
c00150c8:	74 0c                	je     c00150d6 <Reg::readInt(char*, char*, int*)+0x42>
c00150ca:	80 fa 2d             	cmp    dl,0x2d
c00150cd:	75 0e                	jne    c00150dd <Reg::readInt(char*, char*, int*)+0x49>
c00150cf:	ba 01 00 00 00       	mov    edx,0x1
c00150d4:	eb 0b                	jmp    c00150e1 <Reg::readInt(char*, char*, int*)+0x4d>
c00150d6:	ba 01 00 00 00       	mov    edx,0x1
c00150db:	eb 02                	jmp    c00150df <Reg::readInt(char*, char*, int*)+0x4b>
c00150dd:	31 d2                	xor    edx,edx
c00150df:	31 c0                	xor    eax,eax
c00150e1:	be 0a 00 00 00       	mov    esi,0xa
c00150e6:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00150eb:	75 20                	jne    c001510d <Reg::readInt(char*, char*, int*)+0x79>
c00150ed:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00150f1:	80 f9 78             	cmp    cl,0x78
c00150f4:	75 0a                	jne    c0015100 <Reg::readInt(char*, char*, int*)+0x6c>
c00150f6:	83 c2 02             	add    edx,0x2
c00150f9:	be 10 00 00 00       	mov    esi,0x10
c00150fe:	eb 0d                	jmp    c001510d <Reg::readInt(char*, char*, int*)+0x79>
c0015100:	80 f9 62             	cmp    cl,0x62
c0015103:	75 08                	jne    c001510d <Reg::readInt(char*, char*, int*)+0x79>
c0015105:	83 c2 02             	add    edx,0x2
c0015108:	be 02 00 00 00       	mov    esi,0x2
c001510d:	01 d7                	add    edi,edx
c001510f:	31 d2                	xor    edx,edx
c0015111:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015113:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015117:	80 fb 0d             	cmp    bl,0xd
c001511a:	0f 94 c3             	sete   bl
c001511d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015122:	0f 94 c1             	sete   cl
c0015125:	08 cb                	or     bl,cl
c0015127:	75 3a                	jne    c0015163 <Reg::readInt(char*, char*, int*)+0xcf>
c0015129:	0f af d6             	imul   edx,esi
c001512c:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015131:	83 fe 10             	cmp    esi,0x10
c0015134:	75 26                	jne    c001515c <Reg::readInt(char*, char*, int*)+0xc8>
c0015136:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001513a:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001513d:	89 e9                	mov    ecx,ebp
c001513f:	80 f9 05             	cmp    cl,0x5
c0015142:	77 06                	ja     c001514a <Reg::readInt(char*, char*, int*)+0xb6>
c0015144:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015148:	eb 16                	jmp    c0015160 <Reg::readInt(char*, char*, int*)+0xcc>
c001514a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001514e:	83 e9 61             	sub    ecx,0x61
c0015151:	80 f9 05             	cmp    cl,0x5
c0015154:	77 06                	ja     c001515c <Reg::readInt(char*, char*, int*)+0xc8>
c0015156:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001515a:	eb 04                	jmp    c0015160 <Reg::readInt(char*, char*, int*)+0xcc>
c001515c:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015160:	47                   	inc    edi
c0015161:	eb ae                	jmp    c0015111 <Reg::readInt(char*, char*, int*)+0x7d>
c0015163:	84 c0                	test   al,al
c0015165:	74 02                	je     c0015169 <Reg::readInt(char*, char*, int*)+0xd5>
c0015167:	f7 da                	neg    edx
c0015169:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015170:	89 10                	mov    DWORD PTR [eax],edx
c0015172:	88 d8                	mov    al,bl
c0015174:	81 c4 ec 00 00 00    	add    esp,0xec
c001517a:	5b                   	pop    ebx
c001517b:	5e                   	pop    esi
c001517c:	5f                   	pop    edi
c001517d:	5d                   	pop    ebp
c001517e:	c3                   	ret    

c001517f <Reg::readString(char*, char*, char*, int)>:
c001517f:	57                   	push   edi
c0015180:	56                   	push   esi
c0015181:	53                   	push   ebx
c0015182:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015188:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001518f:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0015193:	57                   	push   edi
c0015194:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001519b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00151a2:	e8 b6 fe ff ff       	call   c001505d <Reg::getLine(char*, char*, char*)>
c00151a7:	83 c4 10             	add    esp,0x10
c00151aa:	89 c6                	mov    esi,eax
c00151ac:	84 c0                	test   al,al
c00151ae:	74 44                	je     c00151f4 <Reg::readString(char*, char*, char*, int)+0x75>
c00151b0:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00151b7:	31 c0                	xor    eax,eax
c00151b9:	4a                   	dec    edx
c00151ba:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00151bd:	84 c9                	test   cl,cl
c00151bf:	74 0f                	je     c00151d0 <Reg::readString(char*, char*, char*, int)+0x51>
c00151c1:	39 c2                	cmp    edx,eax
c00151c3:	7e 0b                	jle    c00151d0 <Reg::readString(char*, char*, char*, int)+0x51>
c00151c5:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00151c8:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00151cd:	40                   	inc    eax
c00151ce:	eb ea                	jmp    c00151ba <Reg::readString(char*, char*, char*, int)+0x3b>
c00151d0:	83 ec 0c             	sub    esp,0xc
c00151d3:	53                   	push   ebx
c00151d4:	e8 4c b4 fe ff       	call   c0000625 <strlen>
c00151d9:	83 c4 10             	add    esp,0x10
c00151dc:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00151e1:	75 11                	jne    c00151f4 <Reg::readString(char*, char*, char*, int)+0x75>
c00151e3:	83 ec 0c             	sub    esp,0xc
c00151e6:	53                   	push   ebx
c00151e7:	e8 39 b4 fe ff       	call   c0000625 <strlen>
c00151ec:	83 c4 10             	add    esp,0x10
c00151ef:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00151f4:	81 c4 d0 00 00 00    	add    esp,0xd0
c00151fa:	89 f0                	mov    eax,esi
c00151fc:	5b                   	pop    ebx
c00151fd:	5e                   	pop    esi
c00151fe:	5f                   	pop    edi
c00151ff:	c3                   	ret    

c0015200 <Reg::readBool(char*, char*, bool*)>:
c0015200:	83 ec 20             	sub    esp,0x20
c0015203:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015207:	50                   	push   eax
c0015208:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001520c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015210:	e8 7f fe ff ff       	call   c0015094 <Reg::readInt(char*, char*, int*)>
c0015215:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001521a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001521e:	0f 95 02             	setne  BYTE PTR [edx]
c0015221:	83 c4 2c             	add    esp,0x2c
c0015224:	c3                   	ret    

c0015225 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0015225:	53                   	push   ebx
c0015226:	83 ec 1c             	sub    esp,0x1c
c0015229:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001522d:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015231:	50                   	push   eax
c0015232:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015236:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001523a:	e8 c1 ff ff ff       	call   c0015200 <Reg::readBool(char*, char*, bool*)>
c001523f:	83 c4 10             	add    esp,0x10
c0015242:	84 c0                	test   al,al
c0015244:	74 04                	je     c001524a <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0015246:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001524a:	88 d8                	mov    al,bl
c001524c:	83 c4 18             	add    esp,0x18
c001524f:	5b                   	pop    ebx
c0015250:	c3                   	ret    

c0015251 <Reg::readIntWithDefault(char*, char*, int)>:
c0015251:	53                   	push   ebx
c0015252:	83 ec 1c             	sub    esp,0x1c
c0015255:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015259:	8d 44 24 10          	lea    eax,[esp+0x10]
c001525d:	50                   	push   eax
c001525e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015262:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015266:	e8 29 fe ff ff       	call   c0015094 <Reg::readInt(char*, char*, int*)>
c001526b:	83 c4 10             	add    esp,0x10
c001526e:	84 c0                	test   al,al
c0015270:	74 04                	je     c0015276 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0015272:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0015276:	89 d8                	mov    eax,ebx
c0015278:	83 c4 18             	add    esp,0x18
c001527b:	5b                   	pop    ebx
c001527c:	c3                   	ret    

c001527d <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001527d:	56                   	push   esi
c001527e:	53                   	push   ebx
c001527f:	51                   	push   ecx
c0015280:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015284:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015288:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001528c:	56                   	push   esi
c001528d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015291:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015295:	e8 e5 fe ff ff       	call   c001517f <Reg::readString(char*, char*, char*, int)>
c001529a:	83 c4 10             	add    esp,0x10
c001529d:	84 c0                	test   al,al
c001529f:	74 02                	je     c00152a3 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c00152a1:	89 f3                	mov    ebx,esi
c00152a3:	89 d8                	mov    eax,ebx
c00152a5:	5a                   	pop    edx
c00152a6:	5b                   	pop    ebx
c00152a7:	5e                   	pop    esi
c00152a8:	c3                   	ret    

c00152a9 <Sys::exit(regs*)>:
c00152a9:	83 ec 18             	sub    esp,0x18
c00152ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152b0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00152b3:	e8 42 31 00 00       	call   c00183fa <terminateTask(int)>
c00152b8:	83 c8 ff             	or     eax,0xffffffff
c00152bb:	83 c4 1c             	add    esp,0x1c
c00152be:	89 c2                	mov    edx,eax
c00152c0:	c3                   	ret    

c00152c1 <Sys::loadDLL(regs*)>:
c00152c1:	56                   	push   esi
c00152c2:	53                   	push   ebx
c00152c3:	31 d2                	xor    edx,edx
c00152c5:	51                   	push   ecx
c00152c6:	b8 01 00 00 00       	mov    eax,0x1
c00152cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00152cf:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00152d3:	74 7d                	je     c0015352 <Sys::loadDLL(regs*)+0x91>
c00152d5:	83 ec 0c             	sub    esp,0xc
c00152d8:	68 14 01 00 00       	push   0x114
c00152dd:	e8 14 9a ff ff       	call   c000ecf6 <operator new(unsigned long)>
c00152e2:	83 c4 0c             	add    esp,0xc
c00152e5:	89 c3                	mov    ebx,eax
c00152e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152ec:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00152ef:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00152f2:	53                   	push   ebx
c00152f3:	e8 1c a0 ff ff       	call   c000f314 <File::File(char const*, Process*)>
c00152f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152fb:	e8 e6 a2 ff ff       	call   c000f5e6 <File::exists()>
c0015300:	83 c4 10             	add    esp,0x10
c0015303:	84 c0                	test   al,al
c0015305:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015307:	75 11                	jne    c001531a <Sys::loadDLL(regs*)+0x59>
c0015309:	83 ec 0c             	sub    esp,0xc
c001530c:	53                   	push   ebx
c001530d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015310:	83 c4 10             	add    esp,0x10
c0015313:	b8 03 00 00 00       	mov    eax,0x3
c0015318:	eb 36                	jmp    c0015350 <Sys::loadDLL(regs*)+0x8f>
c001531a:	83 ec 0c             	sub    esp,0xc
c001531d:	53                   	push   ebx
c001531e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015321:	58                   	pop    eax
c0015322:	5a                   	pop    edx
c0015323:	6a 00                	push   0x0
c0015325:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015328:	e8 4f 1f 00 00       	call   c001727c <Thr::loadDLL(char const*, bool)>
c001532d:	83 c4 10             	add    esp,0x10
c0015330:	89 c1                	mov    ecx,eax
c0015332:	31 d2                	xor    edx,edx
c0015334:	b8 04 00 00 00       	mov    eax,0x4
c0015339:	85 c9                	test   ecx,ecx
c001533b:	74 15                	je     c0015352 <Sys::loadDLL(regs*)+0x91>
c001533d:	53                   	push   ebx
c001533e:	53                   	push   ebx
c001533f:	ff 35 08 32 02 c0    	push   DWORD PTR ds:0xc0023208
c0015345:	51                   	push   ecx
c0015346:	e8 84 20 00 00       	call   c00173cf <Thr::executeDLL(unsigned long, void*)>
c001534b:	83 c4 10             	add    esp,0x10
c001534e:	31 c0                	xor    eax,eax
c0015350:	31 d2                	xor    edx,edx
c0015352:	59                   	pop    ecx
c0015353:	5b                   	pop    ebx
c0015354:	5e                   	pop    esi
c0015355:	c3                   	ret    

c0015356 <Sys::read(regs*)>:
c0015356:	57                   	push   edi
c0015357:	56                   	push   esi
c0015358:	53                   	push   ebx
c0015359:	83 ec 10             	sub    esp,0x10
c001535c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015360:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015363:	83 f8 02             	cmp    eax,0x2
c0015366:	77 10                	ja     c0015378 <Sys::read(regs*)+0x22>
c0015368:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001536d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015370:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015376:	eb 0e                	jmp    c0015386 <Sys::read(regs*)+0x30>
c0015378:	83 ec 0c             	sub    esp,0xc
c001537b:	50                   	push   eax
c001537c:	e8 fe 86 ff ff       	call   c000da7f <getFromFileDescriptor(int)>
c0015381:	83 c4 10             	add    esp,0x10
c0015384:	89 c1                	mov    ecx,eax
c0015386:	83 c8 ff             	or     eax,0xffffffff
c0015389:	85 c9                	test   ecx,ecx
c001538b:	89 c2                	mov    edx,eax
c001538d:	74 28                	je     c00153b7 <Sys::read(regs*)+0x61>
c001538f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015397:	31 ff                	xor    edi,edi
c0015399:	83 ec 0c             	sub    esp,0xc
c001539c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001539e:	8d 54 24 18          	lea    edx,[esp+0x18]
c00153a2:	52                   	push   edx
c00153a3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00153a6:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00153a9:	57                   	push   edi
c00153aa:	56                   	push   esi
c00153ab:	51                   	push   ecx
c00153ac:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00153af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00153b3:	83 c4 20             	add    esp,0x20
c00153b6:	99                   	cdq    
c00153b7:	83 c4 10             	add    esp,0x10
c00153ba:	5b                   	pop    ebx
c00153bb:	5e                   	pop    esi
c00153bc:	5f                   	pop    edi
c00153bd:	c3                   	ret    

c00153be <Sys::sbrk(regs*)>:
c00153be:	56                   	push   esi
c00153bf:	53                   	push   ebx
c00153c0:	50                   	push   eax
c00153c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00153ca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00153cd:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00153d0:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c00153d6:	85 db                	test   ebx,ebx
c00153d8:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00153db:	74 02                	je     c00153df <Sys::sbrk(regs*)+0x21>
c00153dd:	79 06                	jns    c00153e5 <Sys::sbrk(regs*)+0x27>
c00153df:	89 f0                	mov    eax,esi
c00153e1:	31 d2                	xor    edx,edx
c00153e3:	eb 2a                	jmp    c001540f <Sys::sbrk(regs*)+0x51>
c00153e5:	83 c8 ff             	or     eax,0xffffffff
c00153e8:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00153ee:	89 c2                	mov    edx,eax
c00153f0:	77 1d                	ja     c001540f <Sys::sbrk(regs*)+0x51>
c00153f2:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00153f8:	50                   	push   eax
c00153f9:	c1 ea 0c             	shr    edx,0xc
c00153fc:	68 07 04 00 00       	push   0x407
c0015401:	52                   	push   edx
c0015402:	51                   	push   ecx
c0015403:	e8 94 8e ff ff       	call   c000e29c <VAS::allocatePages(int, int)>
c0015408:	89 f0                	mov    eax,esi
c001540a:	31 d2                	xor    edx,edx
c001540c:	83 c4 10             	add    esp,0x10
c001540f:	59                   	pop    ecx
c0015410:	5b                   	pop    ebx
c0015411:	5e                   	pop    esi
c0015412:	c3                   	ret    

c0015413 <Sys::write(regs*)>:
c0015413:	57                   	push   edi
c0015414:	56                   	push   esi
c0015415:	53                   	push   ebx
c0015416:	83 ec 10             	sub    esp,0x10
c0015419:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001541d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015420:	83 f8 02             	cmp    eax,0x2
c0015423:	77 10                	ja     c0015435 <Sys::write(regs*)+0x22>
c0015425:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001542a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001542d:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015433:	eb 0e                	jmp    c0015443 <Sys::write(regs*)+0x30>
c0015435:	83 ec 0c             	sub    esp,0xc
c0015438:	50                   	push   eax
c0015439:	e8 41 86 ff ff       	call   c000da7f <getFromFileDescriptor(int)>
c001543e:	83 c4 10             	add    esp,0x10
c0015441:	89 c1                	mov    ecx,eax
c0015443:	83 c8 ff             	or     eax,0xffffffff
c0015446:	85 c9                	test   ecx,ecx
c0015448:	89 c2                	mov    edx,eax
c001544a:	74 28                	je     c0015474 <Sys::write(regs*)+0x61>
c001544c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015454:	31 ff                	xor    edi,edi
c0015456:	83 ec 0c             	sub    esp,0xc
c0015459:	8b 01                	mov    eax,DWORD PTR [ecx]
c001545b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001545f:	52                   	push   edx
c0015460:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015463:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015466:	57                   	push   edi
c0015467:	56                   	push   esi
c0015468:	51                   	push   ecx
c0015469:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001546c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015470:	83 c4 20             	add    esp,0x20
c0015473:	99                   	cdq    
c0015474:	83 c4 10             	add    esp,0x10
c0015477:	5b                   	pop    ebx
c0015478:	5e                   	pop    esi
c0015479:	5f                   	pop    edi
c001547a:	c3                   	ret    

c001547b <Sys::yield(regs*)>:
c001547b:	83 ec 0c             	sub    esp,0xc
c001547e:	e8 57 23 00 00       	call   c00177da <lockScheduler()>
c0015483:	e8 86 26 00 00       	call   c0017b0e <schedule()>
c0015488:	e8 4f 23 00 00       	call   c00177dc <unlockScheduler()>
c001548d:	31 c0                	xor    eax,eax
c001548f:	31 d2                	xor    edx,edx
c0015491:	83 c4 0c             	add    esp,0xc
c0015494:	c3                   	ret    

c0015495 <sysCallGetPID(regs*)>:
c0015495:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001549a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001549d:	8b 00                	mov    eax,DWORD PTR [eax]
c001549f:	99                   	cdq    
c00154a0:	c3                   	ret    

c00154a1 <sysCallSeekDir(regs*)>:
c00154a1:	31 c0                	xor    eax,eax
c00154a3:	31 d2                	xor    edx,edx
c00154a5:	c3                   	ret    

c00154a6 <sysCallTellDir(regs*)>:
c00154a6:	31 c0                	xor    eax,eax
c00154a8:	31 d2                	xor    edx,edx
c00154aa:	c3                   	ret    

c00154ab <sysCallVerify(regs*)>:
c00154ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00154af:	31 d2                	xor    edx,edx
c00154b1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00154b4:	c3                   	ret    

c00154b5 <sysCallGetArgc(regs*)>:
c00154b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00154bd:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c00154c3:	99                   	cdq    
c00154c4:	c3                   	ret    

c00154c5 <sysFormatDisk(regs*)>:
c00154c5:	56                   	push   esi
c00154c6:	53                   	push   ebx
c00154c7:	53                   	push   ebx
c00154c8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00154cc:	8b 1d e0 32 02 c0    	mov    ebx,DWORD PTR ds:0xc00232e0
c00154d2:	eb 25                	jmp    c00154f9 <sysFormatDisk(regs*)+0x34>
c00154d4:	83 ec 0c             	sub    esp,0xc
c00154d7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00154da:	8b 13                	mov    edx,DWORD PTR [ebx]
c00154dc:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00154df:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00154e2:	50                   	push   eax
c00154e3:	ff 34 85 80 37 02 c0 	push   DWORD PTR [eax*4-0x3ffdc880]
c00154ea:	53                   	push   ebx
c00154eb:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00154ee:	83 c4 20             	add    esp,0x20
c00154f1:	83 f8 08             	cmp    eax,0x8
c00154f4:	75 12                	jne    c0015508 <sysFormatDisk(regs*)+0x43>
c00154f6:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00154f9:	85 db                	test   ebx,ebx
c00154fb:	75 d7                	jne    c00154d4 <sysFormatDisk(regs*)+0xf>
c00154fd:	59                   	pop    ecx
c00154fe:	b8 03 00 00 00       	mov    eax,0x3
c0015503:	31 d2                	xor    edx,edx
c0015505:	5b                   	pop    ebx
c0015506:	5e                   	pop    esi
c0015507:	c3                   	ret    
c0015508:	85 c0                	test   eax,eax
c001550a:	74 1b                	je     c0015527 <sysFormatDisk(regs*)+0x62>
c001550c:	83 f8 09             	cmp    eax,0x9
c001550f:	74 0b                	je     c001551c <sysFormatDisk(regs*)+0x57>
c0015511:	59                   	pop    ecx
c0015512:	b8 02 00 00 00       	mov    eax,0x2
c0015517:	31 d2                	xor    edx,edx
c0015519:	5b                   	pop    ebx
c001551a:	5e                   	pop    esi
c001551b:	c3                   	ret    
c001551c:	59                   	pop    ecx
c001551d:	b8 01 00 00 00       	mov    eax,0x1
c0015522:	31 d2                	xor    edx,edx
c0015524:	5b                   	pop    ebx
c0015525:	5e                   	pop    esi
c0015526:	c3                   	ret    
c0015527:	59                   	pop    ecx
c0015528:	31 c0                	xor    eax,eax
c001552a:	31 d2                	xor    edx,edx
c001552c:	5b                   	pop    ebx
c001552d:	5e                   	pop    esi
c001552e:	c3                   	ret    

c001552f <sysSetDiskVolumeLabel(regs*)>:
c001552f:	56                   	push   esi
c0015530:	53                   	push   ebx
c0015531:	53                   	push   ebx
c0015532:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015536:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015539:	83 f8 19             	cmp    eax,0x19
c001553c:	77 29                	ja     c0015567 <sysSetDiskVolumeLabel(regs*)+0x38>
c001553e:	8b 0c 85 80 37 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdc880]
c0015545:	85 c9                	test   ecx,ecx
c0015547:	74 1e                	je     c0015567 <sysSetDiskVolumeLabel(regs*)+0x38>
c0015549:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001554c:	85 d2                	test   edx,edx
c001554e:	74 17                	je     c0015567 <sysSetDiskVolumeLabel(regs*)+0x38>
c0015550:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c0015556:	8b 33                	mov    esi,DWORD PTR [ebx]
c0015558:	52                   	push   edx
c0015559:	50                   	push   eax
c001555a:	51                   	push   ecx
c001555b:	53                   	push   ebx
c001555c:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001555f:	83 c4 10             	add    esp,0x10
c0015562:	99                   	cdq    
c0015563:	59                   	pop    ecx
c0015564:	5b                   	pop    ebx
c0015565:	5e                   	pop    esi
c0015566:	c3                   	ret    
c0015567:	59                   	pop    ecx
c0015568:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001556d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015572:	5b                   	pop    ebx
c0015573:	5e                   	pop    esi
c0015574:	c3                   	ret    

c0015575 <sysGetDiskVolumeLabel(regs*)>:
c0015575:	57                   	push   edi
c0015576:	56                   	push   esi
c0015577:	53                   	push   ebx
c0015578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001557c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001557f:	83 fa 19             	cmp    edx,0x19
c0015582:	77 34                	ja     c00155b8 <sysGetDiskVolumeLabel(regs*)+0x43>
c0015584:	8b 0c 95 80 37 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdc880]
c001558b:	85 c9                	test   ecx,ecx
c001558d:	74 29                	je     c00155b8 <sysGetDiskVolumeLabel(regs*)+0x43>
c001558f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015592:	85 db                	test   ebx,ebx
c0015594:	74 22                	je     c00155b8 <sysGetDiskVolumeLabel(regs*)+0x43>
c0015596:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015599:	85 c0                	test   eax,eax
c001559b:	74 1b                	je     c00155b8 <sysGetDiskVolumeLabel(regs*)+0x43>
c001559d:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c00155a3:	83 ec 0c             	sub    esp,0xc
c00155a6:	8b 3e                	mov    edi,DWORD PTR [esi]
c00155a8:	50                   	push   eax
c00155a9:	53                   	push   ebx
c00155aa:	52                   	push   edx
c00155ab:	51                   	push   ecx
c00155ac:	56                   	push   esi
c00155ad:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00155b0:	83 c4 20             	add    esp,0x20
c00155b3:	99                   	cdq    
c00155b4:	5b                   	pop    ebx
c00155b5:	5e                   	pop    esi
c00155b6:	5f                   	pop    edi
c00155b7:	c3                   	ret    
c00155b8:	5b                   	pop    ebx
c00155b9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00155be:	ba ff ff ff ff       	mov    edx,0xffffffff
c00155c3:	5e                   	pop    esi
c00155c4:	5f                   	pop    edi
c00155c5:	c3                   	ret    

c00155c6 <sysShutdown(regs*)>:
c00155c6:	83 ec 0c             	sub    esp,0xc
c00155c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00155cd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00155d0:	85 c0                	test   eax,eax
c00155d2:	74 18                	je     c00155ec <sysShutdown(regs*)+0x26>
c00155d4:	83 f8 01             	cmp    eax,0x1
c00155d7:	74 38                	je     c0015611 <sysShutdown(regs*)+0x4b>
c00155d9:	83 f8 02             	cmp    eax,0x2
c00155dc:	74 24                	je     c0015602 <sysShutdown(regs*)+0x3c>
c00155de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00155e3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00155e8:	83 c4 0c             	add    esp,0xc
c00155eb:	c3                   	ret    
c00155ec:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c00155f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00155f3:	6a 00                	push   0x0
c00155f5:	6a 00                	push   0x0
c00155f7:	6a 00                	push   0x0
c00155f9:	50                   	push   eax
c00155fa:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00155fd:	83 c4 10             	add    esp,0x10
c0015600:	eb dc                	jmp    c00155de <sysShutdown(regs*)+0x18>
c0015602:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c0015607:	8b 10                	mov    edx,DWORD PTR [eax]
c0015609:	6a 00                	push   0x0
c001560b:	6a 00                	push   0x0
c001560d:	6a 01                	push   0x1
c001560f:	eb e8                	jmp    c00155f9 <sysShutdown(regs*)+0x33>
c0015611:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c0015616:	85 c0                	test   eax,eax
c0015618:	74 02                	je     c001561c <sysShutdown(regs*)+0x56>
c001561a:	ff d0                	call   eax
c001561c:	31 c0                	xor    eax,eax
c001561e:	31 d2                	xor    edx,edx
c0015620:	83 c4 0c             	add    esp,0xc
c0015623:	c3                   	ret    

c0015624 <sysCallGetCwd(regs*)>:
c0015624:	83 ec 10             	sub    esp,0x10
c0015627:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001562b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001562e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015631:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015636:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015639:	e8 47 a0 ff ff       	call   c000f685 <getcwd(Process*, char*, int)>
c001563e:	83 c4 1c             	add    esp,0x1c
c0015641:	99                   	cdq    
c0015642:	c3                   	ret    

c0015643 <sysCallSetCwd(regs*)>:
c0015643:	83 ec 14             	sub    esp,0x14
c0015646:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001564a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001564d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015652:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015655:	e8 55 a0 ff ff       	call   c000f6af <setcwd(Process*, char*)>
c001565a:	83 c4 1c             	add    esp,0x1c
c001565d:	99                   	cdq    
c001565e:	c3                   	ret    

c001565f <sysCallRealpath(regs*)>:
c001565f:	83 ec 0c             	sub    esp,0xc
c0015662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015666:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015669:	85 d2                	test   edx,edx
c001566b:	74 07                	je     c0015674 <sysCallRealpath(regs*)+0x15>
c001566d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015670:	85 c0                	test   eax,eax
c0015672:	75 0b                	jne    c001567f <sysCallRealpath(regs*)+0x20>
c0015674:	b8 01 00 00 00       	mov    eax,0x1
c0015679:	31 d2                	xor    edx,edx
c001567b:	83 c4 0c             	add    esp,0xc
c001567e:	c3                   	ret    
c001567f:	51                   	push   ecx
c0015680:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015686:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0015689:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001568f:	51                   	push   ecx
c0015690:	52                   	push   edx
c0015691:	50                   	push   eax
c0015692:	e8 d3 9a ff ff       	call   c000f16a <standardiseFiles(char*, char const*, char const*)>
c0015697:	83 c4 10             	add    esp,0x10
c001569a:	31 c0                	xor    eax,eax
c001569c:	31 d2                	xor    edx,edx
c001569e:	83 c4 0c             	add    esp,0xc
c00156a1:	c3                   	ret    

c00156a2 <sysCallOpen(regs*)>:
c00156a2:	56                   	push   esi
c00156a3:	53                   	push   ebx
c00156a4:	81 ec 04 01 00 00    	sub    esp,0x104
c00156aa:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00156b1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00156b4:	85 d2                	test   edx,edx
c00156b6:	0f 84 c3 00 00 00    	je     c001577f <sysCallOpen(regs*)+0xdd>
c00156bc:	50                   	push   eax
c00156bd:	68 b3 15 02 c0       	push   0xc00215b3
c00156c2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00156c5:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00156c9:	56                   	push   esi
c00156ca:	e8 9b 9a ff ff       	call   c000f16a <standardiseFiles(char*, char const*, char const*)>
c00156cf:	89 34 24             	mov    DWORD PTR [esp],esi
c00156d2:	e8 4e af fe ff       	call   c0000625 <strlen>
c00156d7:	83 c4 10             	add    esp,0x10
c00156da:	48                   	dec    eax
c00156db:	74 1d                	je     c00156fa <sysCallOpen(regs*)+0x58>
c00156dd:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00156e0:	eb 0f                	jmp    c00156f1 <sysCallOpen(regs*)+0x4f>
c00156e2:	80 fa 3a             	cmp    dl,0x3a
c00156e5:	74 0f                	je     c00156f6 <sysCallOpen(regs*)+0x54>
c00156e7:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00156eb:	48                   	dec    eax
c00156ec:	74 0c                	je     c00156fa <sysCallOpen(regs*)+0x58>
c00156ee:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00156f1:	80 fa 2e             	cmp    dl,0x2e
c00156f4:	75 ec                	jne    c00156e2 <sysCallOpen(regs*)+0x40>
c00156f6:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00156fa:	83 ec 0c             	sub    esp,0xc
c00156fd:	68 14 01 00 00       	push   0x114
c0015702:	e8 ef 95 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c0015707:	83 c4 0c             	add    esp,0xc
c001570a:	89 c6                	mov    esi,eax
c001570c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015711:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015714:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015717:	56                   	push   esi
c0015718:	e8 f7 9b ff ff       	call   c000f314 <File::File(char const*, Process*)>
c001571d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015720:	83 c4 10             	add    esp,0x10
c0015723:	0f b6 d0             	movzx  edx,al
c0015726:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0015729:	89 c2                	mov    edx,eax
c001572b:	83 e2 01             	and    edx,0x1
c001572e:	a8 02                	test   al,0x2
c0015730:	74 03                	je     c0015735 <sysCallOpen(regs*)+0x93>
c0015732:	83 ca 02             	or     edx,0x2
c0015735:	a8 04                	test   al,0x4
c0015737:	74 03                	je     c001573c <sysCallOpen(regs*)+0x9a>
c0015739:	83 ca 04             	or     edx,0x4
c001573c:	a8 08                	test   al,0x8
c001573e:	74 03                	je     c0015743 <sysCallOpen(regs*)+0xa1>
c0015740:	83 ca 0a             	or     edx,0xa
c0015743:	a8 10                	test   al,0x10
c0015745:	74 03                	je     c001574a <sysCallOpen(regs*)+0xa8>
c0015747:	83 ca 12             	or     edx,0x12
c001574a:	83 ec 08             	sub    esp,0x8
c001574d:	52                   	push   edx
c001574e:	56                   	push   esi
c001574f:	e8 24 9c ff ff       	call   c000f378 <File::open(FileOpenMode)>
c0015754:	83 c4 10             	add    esp,0x10
c0015757:	85 c0                	test   eax,eax
c0015759:	75 24                	jne    c001577f <sysCallOpen(regs*)+0xdd>
c001575b:	83 ec 0c             	sub    esp,0xc
c001575e:	56                   	push   esi
c001575f:	e8 b6 81 ff ff       	call   c000d91a <UnixFile::getFileDescriptor()>
c0015764:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015767:	83 c4 10             	add    esp,0x10
c001576a:	89 02                	mov    DWORD PTR [edx],eax
c001576c:	c1 f8 1f             	sar    eax,0x1f
c001576f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015772:	81 c4 04 01 00 00    	add    esp,0x104
c0015778:	31 c0                	xor    eax,eax
c001577a:	31 d2                	xor    edx,edx
c001577c:	5b                   	pop    ebx
c001577d:	5e                   	pop    esi
c001577e:	c3                   	ret    
c001577f:	81 c4 04 01 00 00    	add    esp,0x104
c0015785:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001578a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001578f:	5b                   	pop    ebx
c0015790:	5e                   	pop    esi
c0015791:	c3                   	ret    

c0015792 <sysCallReadDir(regs*)>:
c0015792:	53                   	push   ebx
c0015793:	83 ec 18             	sub    esp,0x18
c0015796:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001579a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001579d:	83 f8 02             	cmp    eax,0x2
c00157a0:	77 0c                	ja     c00157ae <sysCallReadDir(regs*)+0x1c>
c00157a2:	b8 01 00 00 00       	mov    eax,0x1
c00157a7:	31 d2                	xor    edx,edx
c00157a9:	83 c4 18             	add    esp,0x18
c00157ac:	5b                   	pop    ebx
c00157ad:	c3                   	ret    
c00157ae:	83 ec 0c             	sub    esp,0xc
c00157b1:	50                   	push   eax
c00157b2:	e8 c8 82 ff ff       	call   c000da7f <getFromFileDescriptor(int)>
c00157b7:	83 c4 10             	add    esp,0x10
c00157ba:	85 c0                	test   eax,eax
c00157bc:	74 37                	je     c00157f5 <sysCallReadDir(regs*)+0x63>
c00157be:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00157c6:	83 ec 0c             	sub    esp,0xc
c00157c9:	8b 10                	mov    edx,DWORD PTR [eax]
c00157cb:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00157cf:	51                   	push   ecx
c00157d0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00157d3:	6a 00                	push   0x0
c00157d5:	68 10 01 00 00       	push   0x110
c00157da:	50                   	push   eax
c00157db:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00157de:	83 c4 20             	add    esp,0x20
c00157e1:	85 c0                	test   eax,eax
c00157e3:	74 0c                	je     c00157f1 <sysCallReadDir(regs*)+0x5f>
c00157e5:	83 f8 07             	cmp    eax,0x7
c00157e8:	74 b8                	je     c00157a2 <sysCallReadDir(regs*)+0x10>
c00157ea:	b8 02 00 00 00       	mov    eax,0x2
c00157ef:	eb b6                	jmp    c00157a7 <sysCallReadDir(regs*)+0x15>
c00157f1:	31 c0                	xor    eax,eax
c00157f3:	eb b2                	jmp    c00157a7 <sysCallReadDir(regs*)+0x15>
c00157f5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00157fa:	ba ff ff ff ff       	mov    edx,0xffffffff
c00157ff:	eb a8                	jmp    c00157a9 <sysCallReadDir(regs*)+0x17>

c0015801 <sysCallIsATTY(regs*)>:
c0015801:	83 ec 0c             	sub    esp,0xc
c0015804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015808:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001580b:	83 f8 02             	cmp    eax,0x2
c001580e:	77 26                	ja     c0015836 <sysCallIsATTY(regs*)+0x35>
c0015810:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015815:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015818:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001581e:	85 c0                	test   eax,eax
c0015820:	74 24                	je     c0015846 <sysCallIsATTY(regs*)+0x45>
c0015822:	83 ec 0c             	sub    esp,0xc
c0015825:	8b 10                	mov    edx,DWORD PTR [eax]
c0015827:	50                   	push   eax
c0015828:	ff 12                	call   DWORD PTR [edx]
c001582a:	31 d2                	xor    edx,edx
c001582c:	0f b6 c0             	movzx  eax,al
c001582f:	83 c4 10             	add    esp,0x10
c0015832:	83 c4 0c             	add    esp,0xc
c0015835:	c3                   	ret    
c0015836:	83 ec 0c             	sub    esp,0xc
c0015839:	50                   	push   eax
c001583a:	e8 40 82 ff ff       	call   c000da7f <getFromFileDescriptor(int)>
c001583f:	83 c4 10             	add    esp,0x10
c0015842:	85 c0                	test   eax,eax
c0015844:	75 dc                	jne    c0015822 <sysCallIsATTY(regs*)+0x21>
c0015846:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001584b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015850:	83 c4 0c             	add    esp,0xc
c0015853:	c3                   	ret    

c0015854 <sysCallSeek(regs*)>:
c0015854:	53                   	push   ebx
c0015855:	83 ec 08             	sub    esp,0x8
c0015858:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001585c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001585f:	83 f8 02             	cmp    eax,0x2
c0015862:	76 32                	jbe    c0015896 <sysCallSeek(regs*)+0x42>
c0015864:	83 ec 0c             	sub    esp,0xc
c0015867:	50                   	push   eax
c0015868:	e8 12 82 ff ff       	call   c000da7f <getFromFileDescriptor(int)>
c001586d:	83 c4 0c             	add    esp,0xc
c0015870:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015873:	31 db                	xor    ebx,ebx
c0015875:	53                   	push   ebx
c0015876:	51                   	push   ecx
c0015877:	50                   	push   eax
c0015878:	e8 b9 9b ff ff       	call   c000f436 <File::seek(unsigned long long)>
c001587d:	83 c4 10             	add    esp,0x10
c0015880:	85 c0                	test   eax,eax
c0015882:	0f 95 c0             	setne  al
c0015885:	31 d2                	xor    edx,edx
c0015887:	0f b6 c0             	movzx  eax,al
c001588a:	f7 d8                	neg    eax
c001588c:	83 d2 00             	adc    edx,0x0
c001588f:	83 c4 08             	add    esp,0x8
c0015892:	f7 da                	neg    edx
c0015894:	5b                   	pop    ebx
c0015895:	c3                   	ret    
c0015896:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001589b:	ba ff ff ff ff       	mov    edx,0xffffffff
c00158a0:	83 c4 08             	add    esp,0x8
c00158a3:	5b                   	pop    ebx
c00158a4:	c3                   	ret    

c00158a5 <sysCallTell(regs*)>:
c00158a5:	53                   	push   ebx
c00158a6:	83 ec 08             	sub    esp,0x8
c00158a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158ad:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00158b0:	83 f8 02             	cmp    eax,0x2
c00158b3:	76 2d                	jbe    c00158e2 <sysCallTell(regs*)+0x3d>
c00158b5:	83 ec 0c             	sub    esp,0xc
c00158b8:	50                   	push   eax
c00158b9:	e8 c1 81 ff ff       	call   c000da7f <getFromFileDescriptor(int)>
c00158be:	5a                   	pop    edx
c00158bf:	59                   	pop    ecx
c00158c0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00158c3:	50                   	push   eax
c00158c4:	e8 c3 9b ff ff       	call   c000f48c <File::tell(unsigned long long*)>
c00158c9:	83 c4 10             	add    esp,0x10
c00158cc:	85 c0                	test   eax,eax
c00158ce:	0f 95 c0             	setne  al
c00158d1:	31 d2                	xor    edx,edx
c00158d3:	0f b6 c0             	movzx  eax,al
c00158d6:	f7 d8                	neg    eax
c00158d8:	83 d2 00             	adc    edx,0x0
c00158db:	83 c4 08             	add    esp,0x8
c00158de:	f7 da                	neg    edx
c00158e0:	5b                   	pop    ebx
c00158e1:	c3                   	ret    
c00158e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00158e7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00158ec:	83 c4 08             	add    esp,0x8
c00158ef:	5b                   	pop    ebx
c00158f0:	c3                   	ret    

c00158f1 <sysCallSizeFromFilename(regs*)>:
c00158f1:	57                   	push   edi
c00158f2:	56                   	push   esi
c00158f3:	53                   	push   ebx
c00158f4:	83 ec 10             	sub    esp,0x10
c00158f7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00158fb:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00158fe:	83 ff 02             	cmp    edi,0x2
c0015901:	76 56                	jbe    c0015959 <sysCallSizeFromFilename(regs*)+0x68>
c0015903:	83 ec 0c             	sub    esp,0xc
c0015906:	68 14 01 00 00       	push   0x114
c001590b:	e8 e6 93 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c0015910:	83 c4 0c             	add    esp,0xc
c0015913:	89 c3                	mov    ebx,eax
c0015915:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001591a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001591d:	57                   	push   edi
c001591e:	53                   	push   ebx
c001591f:	e8 f0 99 ff ff       	call   c000f314 <File::File(char const*, Process*)>
c0015924:	83 c4 0c             	add    esp,0xc
c0015927:	8d 44 24 13          	lea    eax,[esp+0x13]
c001592b:	50                   	push   eax
c001592c:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001592f:	53                   	push   ebx
c0015930:	e8 ef 9c ff ff       	call   c000f624 <File::stat(unsigned long long*, bool*)>
c0015935:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015938:	89 c6                	mov    esi,eax
c001593a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001593c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001593f:	83 c4 10             	add    esp,0x10
c0015942:	31 c0                	xor    eax,eax
c0015944:	85 f6                	test   esi,esi
c0015946:	0f 95 c0             	setne  al
c0015949:	31 d2                	xor    edx,edx
c001594b:	f7 d8                	neg    eax
c001594d:	83 d2 00             	adc    edx,0x0
c0015950:	83 c4 10             	add    esp,0x10
c0015953:	f7 da                	neg    edx
c0015955:	5b                   	pop    ebx
c0015956:	5e                   	pop    esi
c0015957:	5f                   	pop    edi
c0015958:	c3                   	ret    
c0015959:	83 c4 10             	add    esp,0x10
c001595c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015961:	5b                   	pop    ebx
c0015962:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015967:	5e                   	pop    esi
c0015968:	5f                   	pop    edi
c0015969:	c3                   	ret    

c001596a <sysCallSize(regs*)>:
c001596a:	53                   	push   ebx
c001596b:	83 ec 18             	sub    esp,0x18
c001596e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015972:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015975:	83 f8 02             	cmp    eax,0x2
c0015978:	76 33                	jbe    c00159ad <sysCallSize(regs*)+0x43>
c001597a:	83 ec 0c             	sub    esp,0xc
c001597d:	50                   	push   eax
c001597e:	e8 fc 80 ff ff       	call   c000da7f <getFromFileDescriptor(int)>
c0015983:	83 c4 0c             	add    esp,0xc
c0015986:	8d 54 24 13          	lea    edx,[esp+0x13]
c001598a:	52                   	push   edx
c001598b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001598e:	50                   	push   eax
c001598f:	e8 90 9c ff ff       	call   c000f624 <File::stat(unsigned long long*, bool*)>
c0015994:	83 c4 10             	add    esp,0x10
c0015997:	85 c0                	test   eax,eax
c0015999:	0f 95 c0             	setne  al
c001599c:	31 d2                	xor    edx,edx
c001599e:	0f b6 c0             	movzx  eax,al
c00159a1:	f7 d8                	neg    eax
c00159a3:	83 d2 00             	adc    edx,0x0
c00159a6:	83 c4 18             	add    esp,0x18
c00159a9:	f7 da                	neg    edx
c00159ab:	5b                   	pop    ebx
c00159ac:	c3                   	ret    
c00159ad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159b2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00159b7:	83 c4 18             	add    esp,0x18
c00159ba:	5b                   	pop    ebx
c00159bb:	c3                   	ret    

c00159bc <sysCallClose(regs*)>:
c00159bc:	53                   	push   ebx
c00159bd:	83 ec 08             	sub    esp,0x8
c00159c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159c4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00159c7:	83 f8 02             	cmp    eax,0x2
c00159ca:	76 2f                	jbe    c00159fb <sysCallClose(regs*)+0x3f>
c00159cc:	83 ec 0c             	sub    esp,0xc
c00159cf:	50                   	push   eax
c00159d0:	e8 aa 80 ff ff       	call   c000da7f <getFromFileDescriptor(int)>
c00159d5:	89 c3                	mov    ebx,eax
c00159d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00159da:	e8 f7 99 ff ff       	call   c000f3d6 <File::close()>
c00159df:	83 c4 10             	add    esp,0x10
c00159e2:	85 db                	test   ebx,ebx
c00159e4:	74 0c                	je     c00159f2 <sysCallClose(regs*)+0x36>
c00159e6:	83 ec 0c             	sub    esp,0xc
c00159e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159eb:	53                   	push   ebx
c00159ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159ef:	83 c4 10             	add    esp,0x10
c00159f2:	31 c0                	xor    eax,eax
c00159f4:	31 d2                	xor    edx,edx
c00159f6:	83 c4 08             	add    esp,0x8
c00159f9:	5b                   	pop    ebx
c00159fa:	c3                   	ret    
c00159fb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a00:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a05:	83 c4 08             	add    esp,0x8
c0015a08:	5b                   	pop    ebx
c0015a09:	c3                   	ret    

c0015a0a <sysCallOpenDir(regs*)>:
c0015a0a:	56                   	push   esi
c0015a0b:	53                   	push   ebx
c0015a0c:	53                   	push   ebx
c0015a0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015a11:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015a14:	85 f6                	test   esi,esi
c0015a16:	74 51                	je     c0015a69 <sysCallOpenDir(regs*)+0x5f>
c0015a18:	83 ec 0c             	sub    esp,0xc
c0015a1b:	68 14 01 00 00       	push   0x114
c0015a20:	e8 d1 92 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c0015a25:	83 c4 0c             	add    esp,0xc
c0015a28:	89 c6                	mov    esi,eax
c0015a2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a2f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015a32:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015a35:	56                   	push   esi
c0015a36:	e8 9b 9d ff ff       	call   c000f7d6 <Directory::Directory(char const*, Process*)>
c0015a3b:	89 34 24             	mov    DWORD PTR [esp],esi
c0015a3e:	e8 f7 9d ff ff       	call   c000f83a <Directory::open()>
c0015a43:	83 c4 10             	add    esp,0x10
c0015a46:	85 c0                	test   eax,eax
c0015a48:	75 1f                	jne    c0015a69 <sysCallOpenDir(regs*)+0x5f>
c0015a4a:	83 ec 0c             	sub    esp,0xc
c0015a4d:	56                   	push   esi
c0015a4e:	e8 c7 7e ff ff       	call   c000d91a <UnixFile::getFileDescriptor()>
c0015a53:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015a56:	83 c4 10             	add    esp,0x10
c0015a59:	89 02                	mov    DWORD PTR [edx],eax
c0015a5b:	c1 f8 1f             	sar    eax,0x1f
c0015a5e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015a61:	31 c0                	xor    eax,eax
c0015a63:	59                   	pop    ecx
c0015a64:	31 d2                	xor    edx,edx
c0015a66:	5b                   	pop    ebx
c0015a67:	5e                   	pop    esi
c0015a68:	c3                   	ret    
c0015a69:	59                   	pop    ecx
c0015a6a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a6f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a74:	5b                   	pop    ebx
c0015a75:	5e                   	pop    esi
c0015a76:	c3                   	ret    

c0015a77 <sysCallMakeDir(regs*)>:
c0015a77:	56                   	push   esi
c0015a78:	53                   	push   ebx
c0015a79:	83 ec 10             	sub    esp,0x10
c0015a7c:	68 14 01 00 00       	push   0x114
c0015a81:	e8 70 92 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c0015a86:	83 c4 0c             	add    esp,0xc
c0015a89:	89 c3                	mov    ebx,eax
c0015a8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a90:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015a93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015a97:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015a9a:	53                   	push   ebx
c0015a9b:	e8 36 9d ff ff       	call   c000f7d6 <Directory::Directory(char const*, Process*)>
c0015aa0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015aa3:	e8 72 9f ff ff       	call   c000fa1a <Directory::create()>
c0015aa8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015aab:	89 c6                	mov    esi,eax
c0015aad:	e8 e4 9d ff ff       	call   c000f896 <Directory::close()>
c0015ab2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ab4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ab7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015aba:	31 c0                	xor    eax,eax
c0015abc:	85 f6                	test   esi,esi
c0015abe:	0f 95 c0             	setne  al
c0015ac1:	31 d2                	xor    edx,edx
c0015ac3:	f7 d8                	neg    eax
c0015ac5:	83 d2 00             	adc    edx,0x0
c0015ac8:	83 c4 14             	add    esp,0x14
c0015acb:	f7 da                	neg    edx
c0015acd:	5b                   	pop    ebx
c0015ace:	5e                   	pop    esi
c0015acf:	c3                   	ret    

c0015ad0 <sysCallCloseDir(regs*)>:
c0015ad0:	53                   	push   ebx
c0015ad1:	83 ec 08             	sub    esp,0x8
c0015ad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ad8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015adb:	83 f8 02             	cmp    eax,0x2
c0015ade:	76 2f                	jbe    c0015b0f <sysCallCloseDir(regs*)+0x3f>
c0015ae0:	83 ec 0c             	sub    esp,0xc
c0015ae3:	50                   	push   eax
c0015ae4:	e8 96 7f ff ff       	call   c000da7f <getFromFileDescriptor(int)>
c0015ae9:	89 c3                	mov    ebx,eax
c0015aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0015aee:	e8 a3 9d ff ff       	call   c000f896 <Directory::close()>
c0015af3:	83 c4 10             	add    esp,0x10
c0015af6:	85 db                	test   ebx,ebx
c0015af8:	74 0c                	je     c0015b06 <sysCallCloseDir(regs*)+0x36>
c0015afa:	83 ec 0c             	sub    esp,0xc
c0015afd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015aff:	53                   	push   ebx
c0015b00:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b03:	83 c4 10             	add    esp,0x10
c0015b06:	31 c0                	xor    eax,eax
c0015b08:	31 d2                	xor    edx,edx
c0015b0a:	83 c4 08             	add    esp,0x8
c0015b0d:	5b                   	pop    ebx
c0015b0e:	c3                   	ret    
c0015b0f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b14:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b19:	83 c4 08             	add    esp,0x8
c0015b1c:	5b                   	pop    ebx
c0015b1d:	c3                   	ret    

c0015b1e <sysCallWait(regs*)>:
c0015b1e:	83 ec 10             	sub    esp,0x10
c0015b21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015b25:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015b28:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015b2b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015b2e:	e8 c7 22 00 00       	call   c0017dfa <waitTask(int, int*, int)>
c0015b33:	83 c4 1c             	add    esp,0x1c
c0015b36:	99                   	cdq    
c0015b37:	c3                   	ret    

c0015b38 <sysCallFork(regs*)>:
c0015b38:	83 ec 18             	sub    esp,0x18
c0015b3b:	68 b7 15 02 c0       	push   0xc00215b7
c0015b40:	e8 a0 92 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0015b45:	58                   	pop    eax
c0015b46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b4a:	e8 79 20 00 00       	call   c0017bc8 <forkProcess(regs*)>
c0015b4f:	83 c4 1c             	add    esp,0x1c
c0015b52:	99                   	cdq    
c0015b53:	c3                   	ret    

c0015b54 <sysCallExecve(regs*)>:
c0015b54:	53                   	push   ebx
c0015b55:	81 ec 24 01 00 00    	sub    esp,0x124
c0015b5b:	8b 9c 24 2c 01 00 00 	mov    ebx,DWORD PTR [esp+0x12c]
c0015b62:	68 c5 15 02 c0       	push   0xc00215c5
c0015b67:	e8 79 92 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0015b6c:	83 c4 0c             	add    esp,0xc
c0015b6f:	68 00 01 00 00       	push   0x100
c0015b74:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015b78:	50                   	push   eax
c0015b79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b7e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015b81:	e8 ff 9a ff ff       	call   c000f685 <getcwd(Process*, char*, int)>
c0015b86:	83 c4 0c             	add    esp,0xc
c0015b89:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015b8c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015b8f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015b92:	e8 97 23 00 00       	call   c0017f2e <execveProcess(char const*, char* const*, char* const*)>
c0015b97:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b9c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ba1:	81 c4 28 01 00 00    	add    esp,0x128
c0015ba7:	5b                   	pop    ebx
c0015ba8:	c3                   	ret    

c0015ba9 <sysCallRmdir(regs*)>:
c0015ba9:	56                   	push   esi
c0015baa:	53                   	push   ebx
c0015bab:	83 ec 10             	sub    esp,0x10
c0015bae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015bb2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015bb5:	68 14 01 00 00       	push   0x114
c0015bba:	e8 37 91 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c0015bbf:	83 c4 0c             	add    esp,0xc
c0015bc2:	89 c3                	mov    ebx,eax
c0015bc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bc9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015bcc:	56                   	push   esi
c0015bcd:	53                   	push   ebx
c0015bce:	e8 41 97 ff ff       	call   c000f314 <File::File(char const*, Process*)>
c0015bd3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bd6:	e8 15 99 ff ff       	call   c000f4f0 <File::unlink()>
c0015bdb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bde:	89 c6                	mov    esi,eax
c0015be0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015be2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015be5:	31 c0                	xor    eax,eax
c0015be7:	85 f6                	test   esi,esi
c0015be9:	0f 95 c0             	setne  al
c0015bec:	31 d2                	xor    edx,edx
c0015bee:	f7 d8                	neg    eax
c0015bf0:	83 d2 00             	adc    edx,0x0
c0015bf3:	83 c4 14             	add    esp,0x14
c0015bf6:	f7 da                	neg    edx
c0015bf8:	5b                   	pop    ebx
c0015bf9:	5e                   	pop    esi
c0015bfa:	c3                   	ret    

c0015bfb <sysCallUnlink(regs*)>:
c0015bfb:	56                   	push   esi
c0015bfc:	53                   	push   ebx
c0015bfd:	83 ec 10             	sub    esp,0x10
c0015c00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c04:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015c07:	68 14 01 00 00       	push   0x114
c0015c0c:	e8 e5 90 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c0015c11:	83 c4 0c             	add    esp,0xc
c0015c14:	89 c3                	mov    ebx,eax
c0015c16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c1b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015c1e:	56                   	push   esi
c0015c1f:	53                   	push   ebx
c0015c20:	e8 ef 96 ff ff       	call   c000f314 <File::File(char const*, Process*)>
c0015c25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c28:	e8 c3 98 ff ff       	call   c000f4f0 <File::unlink()>
c0015c2d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c30:	89 c6                	mov    esi,eax
c0015c32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c34:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015c37:	31 c0                	xor    eax,eax
c0015c39:	85 f6                	test   esi,esi
c0015c3b:	0f 95 c0             	setne  al
c0015c3e:	31 d2                	xor    edx,edx
c0015c40:	f7 d8                	neg    eax
c0015c42:	83 d2 00             	adc    edx,0x0
c0015c45:	83 c4 14             	add    esp,0x14
c0015c48:	f7 da                	neg    edx
c0015c4a:	5b                   	pop    ebx
c0015c4b:	5e                   	pop    esi
c0015c4c:	c3                   	ret    

c0015c4d <sysCallGetArgv(regs*)>:
c0015c4d:	83 ec 0c             	sub    esp,0xc
c0015c50:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c54:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015c57:	85 c0                	test   eax,eax
c0015c59:	78 2b                	js     c0015c86 <sysCallGetArgv(regs*)+0x39>
c0015c5b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015c61:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0015c64:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0015c6a:	7d 1a                	jge    c0015c86 <sysCallGetArgv(regs*)+0x39>
c0015c6c:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0015c73:	85 c0                	test   eax,eax
c0015c75:	74 17                	je     c0015c8e <sysCallGetArgv(regs*)+0x41>
c0015c77:	83 ec 08             	sub    esp,0x8
c0015c7a:	50                   	push   eax
c0015c7b:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015c7e:	e8 24 aa fe ff       	call   c00006a7 <strcpy>
c0015c83:	83 c4 10             	add    esp,0x10
c0015c86:	31 c0                	xor    eax,eax
c0015c88:	31 d2                	xor    edx,edx
c0015c8a:	83 c4 0c             	add    esp,0xc
c0015c8d:	c3                   	ret    
c0015c8e:	b8 01 00 00 00       	mov    eax,0x1
c0015c93:	31 d2                	xor    edx,edx
c0015c95:	83 c4 0c             	add    esp,0xc
c0015c98:	c3                   	ret    

c0015c99 <sysCallTTYName(regs*)>:
c0015c99:	56                   	push   esi
c0015c9a:	53                   	push   ebx
c0015c9b:	53                   	push   ebx
c0015c9c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ca0:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015ca3:	85 c0                	test   eax,eax
c0015ca5:	74 58                	je     c0015cff <sysCallTTYName(regs*)+0x66>
c0015ca7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015caa:	83 f8 02             	cmp    eax,0x2
c0015cad:	77 3e                	ja     c0015ced <sysCallTTYName(regs*)+0x54>
c0015caf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cb4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015cb7:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015cbd:	85 db                	test   ebx,ebx
c0015cbf:	74 3e                	je     c0015cff <sysCallTTYName(regs*)+0x66>
c0015cc1:	83 ec 0c             	sub    esp,0xc
c0015cc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015cc6:	53                   	push   ebx
c0015cc7:	ff 10                	call   DWORD PTR [eax]
c0015cc9:	83 c4 10             	add    esp,0x10
c0015ccc:	84 c0                	test   al,al
c0015cce:	74 3a                	je     c0015d0a <sysCallTTYName(regs*)+0x71>
c0015cd0:	83 ec 08             	sub    esp,0x8
c0015cd3:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0015cd9:	53                   	push   ebx
c0015cda:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015cdd:	e8 c5 a9 fe ff       	call   c00006a7 <strcpy>
c0015ce2:	83 c4 10             	add    esp,0x10
c0015ce5:	31 c0                	xor    eax,eax
c0015ce7:	59                   	pop    ecx
c0015ce8:	31 d2                	xor    edx,edx
c0015cea:	5b                   	pop    ebx
c0015ceb:	5e                   	pop    esi
c0015cec:	c3                   	ret    
c0015ced:	83 ec 0c             	sub    esp,0xc
c0015cf0:	50                   	push   eax
c0015cf1:	e8 89 7d ff ff       	call   c000da7f <getFromFileDescriptor(int)>
c0015cf6:	83 c4 10             	add    esp,0x10
c0015cf9:	89 c3                	mov    ebx,eax
c0015cfb:	85 db                	test   ebx,ebx
c0015cfd:	75 c2                	jne    c0015cc1 <sysCallTTYName(regs*)+0x28>
c0015cff:	59                   	pop    ecx
c0015d00:	b8 01 00 00 00       	mov    eax,0x1
c0015d05:	31 d2                	xor    edx,edx
c0015d07:	5b                   	pop    ebx
c0015d08:	5e                   	pop    esi
c0015d09:	c3                   	ret    
c0015d0a:	59                   	pop    ecx
c0015d0b:	b8 02 00 00 00       	mov    eax,0x2
c0015d10:	31 d2                	xor    edx,edx
c0015d12:	5b                   	pop    ebx
c0015d13:	5e                   	pop    esi
c0015d14:	c3                   	ret    

c0015d15 <sysCallGetEnv(regs*)>:
c0015d15:	83 ec 0c             	sub    esp,0xc
c0015d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d1c:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0015d1f:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015d22:	85 c9                	test   ecx,ecx
c0015d24:	75 0c                	jne    c0015d32 <sysCallGetEnv(regs*)+0x1d>
c0015d26:	85 d2                	test   edx,edx
c0015d28:	74 14                	je     c0015d3e <sysCallGetEnv(regs*)+0x29>
c0015d2a:	31 c0                	xor    eax,eax
c0015d2c:	31 d2                	xor    edx,edx
c0015d2e:	83 c4 0c             	add    esp,0xc
c0015d31:	c3                   	ret    
c0015d32:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015d35:	85 d2                	test   edx,edx
c0015d37:	74 1b                	je     c0015d54 <sysCallGetEnv(regs*)+0x3f>
c0015d39:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015d3c:	eb ec                	jmp    c0015d2a <sysCallGetEnv(regs*)+0x15>
c0015d3e:	83 ec 0c             	sub    esp,0xc
c0015d41:	68 10 16 02 c0       	push   0xc0021610
c0015d46:	e8 da a8 fe ff       	call   c0000625 <strlen>
c0015d4b:	83 c4 10             	add    esp,0x10
c0015d4e:	31 d2                	xor    edx,edx
c0015d50:	83 c4 0c             	add    esp,0xc
c0015d53:	c3                   	ret    
c0015d54:	83 ec 08             	sub    esp,0x8
c0015d57:	68 10 16 02 c0       	push   0xc0021610
c0015d5c:	50                   	push   eax
c0015d5d:	e8 45 a9 fe ff       	call   c00006a7 <strcpy>
c0015d62:	83 c4 10             	add    esp,0x10
c0015d65:	eb c3                	jmp    c0015d2a <sysCallGetEnv(regs*)+0x15>

c0015d67 <sysCallUSleep(regs*)>:
c0015d67:	83 ec 14             	sub    esp,0x14
c0015d6a:	b8 e8 03 00 00       	mov    eax,0x3e8
c0015d6f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015d73:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0015d7a:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0015d7d:	01 ca                	add    edx,ecx
c0015d7f:	52                   	push   edx
c0015d80:	50                   	push   eax
c0015d81:	e8 0d 21 00 00       	call   c0017e93 <nanoSleep(unsigned long long)>
c0015d86:	31 c0                	xor    eax,eax
c0015d88:	31 d2                	xor    edx,edx
c0015d8a:	83 c4 1c             	add    esp,0x1c
c0015d8d:	c3                   	ret    

c0015d8e <sysCallSpawn(regs*)>:
c0015d8e:	56                   	push   esi
c0015d8f:	53                   	push   ebx
c0015d90:	53                   	push   ebx
c0015d91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015d95:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0015d98:	85 f6                	test   esi,esi
c0015d9a:	75 08                	jne    c0015da4 <sysCallSpawn(regs*)+0x16>
c0015d9c:	59                   	pop    ecx
c0015d9d:	31 c0                	xor    eax,eax
c0015d9f:	31 d2                	xor    edx,edx
c0015da1:	5b                   	pop    ebx
c0015da2:	5e                   	pop    esi
c0015da3:	c3                   	ret    
c0015da4:	83 ec 0c             	sub    esp,0xc
c0015da7:	68 d5 15 02 c0       	push   0xc00215d5
c0015dac:	e8 34 90 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0015db1:	c7 04 24 3b 07 00 00 	mov    DWORD PTR [esp],0x73b
c0015db8:	e8 39 8f ff ff       	call   c000ecf6 <operator new(unsigned long)>
c0015dbd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015dc0:	89 c6                	mov    esi,eax
c0015dc2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015dc7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015dca:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015dcd:	56                   	push   esi
c0015dce:	e8 af 16 00 00       	call   c0017482 <Process::Process(char const*, Process*, char**)>
c0015dd3:	83 c4 20             	add    esp,0x20
c0015dd6:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0015ddd:	75 bd                	jne    c0015d9c <sysCallSpawn(regs*)+0xe>
c0015ddf:	83 ec 0c             	sub    esp,0xc
c0015de2:	68 e0 15 02 c0       	push   0xc00215e0
c0015de7:	e8 f9 8f ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0015dec:	89 34 24             	mov    DWORD PTR [esp],esi
c0015def:	e8 f4 1b 00 00       	call   c00179e8 <Process::createUserThread()>
c0015df4:	8b 06                	mov    eax,DWORD PTR [esi]
c0015df6:	83 c4 10             	add    esp,0x10
c0015df9:	99                   	cdq    
c0015dfa:	59                   	pop    ecx
c0015dfb:	5b                   	pop    ebx
c0015dfc:	5e                   	pop    esi
c0015dfd:	c3                   	ret    

c0015dfe <sysAppSettings(regs*)>:
c0015dfe:	53                   	push   ebx
c0015dff:	83 ec 08             	sub    esp,0x8
c0015e02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e06:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015e09:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c0015e0f:	25 e0 1f 00 00       	and    eax,0x1fe0
c0015e14:	66 3d c0 09          	cmp    ax,0x9c0
c0015e18:	75 2f                	jne    c0015e49 <sysAppSettings(regs*)+0x4b>
c0015e1a:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0015e20:	83 e0 1f             	and    eax,0x1f
c0015e23:	3c 01                	cmp    al,0x1
c0015e25:	74 2e                	je     c0015e55 <sysAppSettings(regs*)+0x57>
c0015e27:	3c 07                	cmp    al,0x7
c0015e29:	0f 84 bd 00 00 00    	je     c0015eec <sysAppSettings(regs*)+0xee>
c0015e2f:	84 c0                	test   al,al
c0015e31:	0f 84 dc 00 00 00    	je     c0015f13 <sysAppSettings(regs*)+0x115>
c0015e37:	3c 08                	cmp    al,0x8
c0015e39:	74 6d                	je     c0015ea8 <sysAppSettings(regs*)+0xaa>
c0015e3b:	0f b6 c0             	movzx  eax,al
c0015e3e:	83 c4 08             	add    esp,0x8
c0015e41:	05 e8 03 00 00       	add    eax,0x3e8
c0015e46:	5b                   	pop    ebx
c0015e47:	99                   	cdq    
c0015e48:	c3                   	ret    
c0015e49:	b8 01 00 00 00       	mov    eax,0x1
c0015e4e:	31 d2                	xor    edx,edx
c0015e50:	83 c4 08             	add    esp,0x8
c0015e53:	5b                   	pop    ebx
c0015e54:	c3                   	ret    
c0015e55:	51                   	push   ecx
c0015e56:	68 00 01 00 00       	push   0x100
c0015e5b:	6a 00                	push   0x0
c0015e5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e62:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015e65:	83 c0 0c             	add    eax,0xc
c0015e68:	50                   	push   eax
c0015e69:	e8 9a a7 fe ff       	call   c0000608 <memset>
c0015e6e:	83 c4 0c             	add    esp,0xc
c0015e71:	68 ff 00 00 00       	push   0xff
c0015e76:	53                   	push   ebx
c0015e77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e7c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015e7f:	83 c0 0c             	add    eax,0xc
c0015e82:	50                   	push   eax
c0015e83:	e8 4a a7 fe ff       	call   c00005d2 <memcpy>
c0015e88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e8d:	5b                   	pop    ebx
c0015e8e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015e91:	5a                   	pop    edx
c0015e92:	8d 50 0c             	lea    edx,[eax+0xc]
c0015e95:	52                   	push   edx
c0015e96:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015e9c:	e8 9f 6e ff ff       	call   c000cd40 <VgaText::setTitle(char*)>
c0015ea1:	83 c4 10             	add    esp,0x10
c0015ea4:	31 c0                	xor    eax,eax
c0015ea6:	eb a6                	jmp    c0015e4e <sysAppSettings(regs*)+0x50>
c0015ea8:	83 ec 08             	sub    esp,0x8
c0015eab:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0015eb1:	83 e0 0f             	and    eax,0xf
c0015eb4:	50                   	push   eax
c0015eb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015ebd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015ec3:	e8 68 6e ff ff       	call   c000cd30 <VgaText::setTitleColour(VgaColour)>
c0015ec8:	58                   	pop    eax
c0015ec9:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0015ecf:	5a                   	pop    edx
c0015ed0:	c1 e8 04             	shr    eax,0x4
c0015ed3:	83 e0 0f             	and    eax,0xf
c0015ed6:	50                   	push   eax
c0015ed7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015edc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015edf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015ee5:	e8 36 6e ff ff       	call   c000cd20 <VgaText::setTitleTextColour(VgaColour)>
c0015eea:	eb b5                	jmp    c0015ea1 <sysAppSettings(regs*)+0xa3>
c0015eec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ef1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015ef4:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0015efa:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0015f00:	c0 e8 06             	shr    al,0x6
c0015f03:	83 e0 01             	and    eax,0x1
c0015f06:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0015f0c:	31 c0                	xor    eax,eax
c0015f0e:	e9 3b ff ff ff       	jmp    c0015e4e <sysAppSettings(regs*)+0x50>
c0015f13:	b8 02 00 00 00       	mov    eax,0x2
c0015f18:	e9 31 ff ff ff       	jmp    c0015e4e <sysAppSettings(regs*)+0x50>

c0015f1d <sysSetFatAttrib(regs*)>:
c0015f1d:	57                   	push   edi
c0015f1e:	56                   	push   esi
c0015f1f:	53                   	push   ebx
c0015f20:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f24:	83 ec 0c             	sub    esp,0xc
c0015f27:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0015f2a:	68 14 01 00 00       	push   0x114
c0015f2f:	e8 c2 8d ff ff       	call   c000ecf6 <operator new(unsigned long)>
c0015f34:	83 c4 0c             	add    esp,0xc
c0015f37:	89 c3                	mov    ebx,eax
c0015f39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f3e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015f41:	57                   	push   edi
c0015f42:	53                   	push   ebx
c0015f43:	e8 cc 93 ff ff       	call   c000f314 <File::File(char const*, Process*)>
c0015f48:	83 c4 0c             	add    esp,0xc
c0015f4b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015f4e:	0f b6 d4             	movzx  edx,ah
c0015f51:	0f b6 c0             	movzx  eax,al
c0015f54:	52                   	push   edx
c0015f55:	50                   	push   eax
c0015f56:	53                   	push   ebx
c0015f57:	e8 2e 96 ff ff       	call   c000f58a <File::chfatattr(unsigned char, unsigned char)>
c0015f5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f5f:	89 c6                	mov    esi,eax
c0015f61:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f63:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f66:	83 c4 10             	add    esp,0x10
c0015f69:	31 c0                	xor    eax,eax
c0015f6b:	5b                   	pop    ebx
c0015f6c:	85 f6                	test   esi,esi
c0015f6e:	5e                   	pop    esi
c0015f6f:	0f 95 c0             	setne  al
c0015f72:	5f                   	pop    edi
c0015f73:	31 d2                	xor    edx,edx
c0015f75:	f7 d8                	neg    eax
c0015f77:	83 d2 00             	adc    edx,0x0
c0015f7a:	f7 da                	neg    edx
c0015f7c:	c3                   	ret    

c0015f7d <sysPanic(regs*)>:
c0015f7d:	83 ec 18             	sub    esp,0x18
c0015f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f84:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015f87:	e8 ee ea ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c0015f8c:	c7 04 24 ed 15 02 c0 	mov    DWORD PTR [esp],0xc00215ed
c0015f93:	e8 e2 ea ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c0015f98:	b8 01 00 00 00       	mov    eax,0x1
c0015f9d:	31 d2                	xor    edx,edx
c0015f9f:	83 c4 1c             	add    esp,0x1c
c0015fa2:	c3                   	ret    

c0015fa3 <sysPipe(regs*)>:
c0015fa3:	57                   	push   edi
c0015fa4:	56                   	push   esi
c0015fa5:	53                   	push   ebx
c0015fa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015faa:	83 ec 0c             	sub    esp,0xc
c0015fad:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0015fb0:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015fb3:	6a 20                	push   0x20
c0015fb5:	e8 3c 8d ff ff       	call   c000ecf6 <operator new(unsigned long)>
c0015fba:	89 c3                	mov    ebx,eax
c0015fbc:	58                   	pop    eax
c0015fbd:	5a                   	pop    edx
c0015fbe:	68 00 50 00 00       	push   0x5000
c0015fc3:	53                   	push   ebx
c0015fc4:	e8 b5 66 ff ff       	call   c000c67e <Pipe::Pipe(int)>
c0015fc9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015fcc:	e8 49 79 ff ff       	call   c000d91a <UnixFile::getFileDescriptor()>
c0015fd1:	89 07                	mov    DWORD PTR [edi],eax
c0015fd3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015fd6:	e8 3f 79 ff ff       	call   c000d91a <UnixFile::getFileDescriptor()>
c0015fdb:	83 c4 10             	add    esp,0x10
c0015fde:	89 06                	mov    DWORD PTR [esi],eax
c0015fe0:	31 d2                	xor    edx,edx
c0015fe2:	5b                   	pop    ebx
c0015fe3:	31 c0                	xor    eax,eax
c0015fe5:	5e                   	pop    esi
c0015fe6:	5f                   	pop    edi
c0015fe7:	c3                   	ret    

c0015fe8 <sysGetUnixTime(regs*)>:
c0015fe8:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c0015fed:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015ff3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015ff7:	e9 e0 9c ff ff       	jmp    c000fcdc <Clock::timeInSecondsLocal()>

c0015ffc <string_ends_with(char const*, char const*)>:
c0015ffc:	57                   	push   edi
c0015ffd:	56                   	push   esi
c0015ffe:	53                   	push   ebx
c0015fff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016003:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016007:	83 ec 0c             	sub    esp,0xc
c001600a:	53                   	push   ebx
c001600b:	e8 15 a6 fe ff       	call   c0000625 <strlen>
c0016010:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016013:	89 c6                	mov    esi,eax
c0016015:	e8 0b a6 fe ff       	call   c0000625 <strlen>
c001601a:	83 c4 10             	add    esp,0x10
c001601d:	39 c6                	cmp    esi,eax
c001601f:	7d 06                	jge    c0016027 <string_ends_with(char const*, char const*)+0x2b>
c0016021:	5b                   	pop    ebx
c0016022:	31 c0                	xor    eax,eax
c0016024:	5e                   	pop    esi
c0016025:	5f                   	pop    edi
c0016026:	c3                   	ret    
c0016027:	83 ec 08             	sub    esp,0x8
c001602a:	29 c6                	sub    esi,eax
c001602c:	57                   	push   edi
c001602d:	01 f3                	add    ebx,esi
c001602f:	53                   	push   ebx
c0016030:	e8 c3 a6 fe ff       	call   c00006f8 <strcmp>
c0016035:	83 c4 10             	add    esp,0x10
c0016038:	85 c0                	test   eax,eax
c001603a:	5b                   	pop    ebx
c001603b:	0f 94 c0             	sete   al
c001603e:	5e                   	pop    esi
c001603f:	0f b6 c0             	movzx  eax,al
c0016042:	5f                   	pop    edi
c0016043:	c3                   	ret    

c0016044 <setupSystemCalls()>:
c0016044:	c7 05 e0 3b 02 c0 7b 54 01 c0 	mov    DWORD PTR ds:0xc0023be0,0xc001547b
c001604e:	c7 05 e4 3b 02 c0 a9 52 01 c0 	mov    DWORD PTR ds:0xc0023be4,0xc00152a9
c0016058:	c7 05 e8 3b 02 c0 be 53 01 c0 	mov    DWORD PTR ds:0xc0023be8,0xc00153be
c0016062:	c7 05 ec 3b 02 c0 13 54 01 c0 	mov    DWORD PTR ds:0xc0023bec,0xc0015413
c001606c:	c7 05 f0 3b 02 c0 56 53 01 c0 	mov    DWORD PTR ds:0xc0023bf0,0xc0015356
c0016076:	c7 05 f4 3b 02 c0 95 54 01 c0 	mov    DWORD PTR ds:0xc0023bf4,0xc0015495
c0016080:	c7 05 f8 3b 02 c0 24 56 01 c0 	mov    DWORD PTR ds:0xc0023bf8,0xc0015624
c001608a:	c7 05 fc 3b 02 c0 43 56 01 c0 	mov    DWORD PTR ds:0xc0023bfc,0xc0015643
c0016094:	c7 05 04 3c 02 c0 bc 59 01 c0 	mov    DWORD PTR ds:0xc0023c04,0xc00159bc
c001609e:	c7 05 00 3c 02 c0 a2 56 01 c0 	mov    DWORD PTR ds:0xc0023c00,0xc00156a2
c00160a8:	c7 05 08 3c 02 c0 0a 5a 01 c0 	mov    DWORD PTR ds:0xc0023c08,0xc0015a0a
c00160b2:	c7 05 0c 3c 02 c0 92 57 01 c0 	mov    DWORD PTR ds:0xc0023c0c,0xc0015792
c00160bc:	c7 05 10 3c 02 c0 a1 54 01 c0 	mov    DWORD PTR ds:0xc0023c10,0xc00154a1
c00160c6:	c7 05 14 3c 02 c0 a6 54 01 c0 	mov    DWORD PTR ds:0xc0023c14,0xc00154a6
c00160d0:	c7 05 18 3c 02 c0 77 5a 01 c0 	mov    DWORD PTR ds:0xc0023c18,0xc0015a77
c00160da:	c7 05 1c 3c 02 c0 d0 5a 01 c0 	mov    DWORD PTR ds:0xc0023c1c,0xc0015ad0
c00160e4:	c7 05 20 3c 02 c0 54 58 01 c0 	mov    DWORD PTR ds:0xc0023c20,0xc0015854
c00160ee:	c7 05 24 3c 02 c0 a5 58 01 c0 	mov    DWORD PTR ds:0xc0023c24,0xc00158a5
c00160f8:	c7 05 28 3c 02 c0 6a 59 01 c0 	mov    DWORD PTR ds:0xc0023c28,0xc001596a
c0016102:	c7 05 2c 3c 02 c0 ab 54 01 c0 	mov    DWORD PTR ds:0xc0023c2c,0xc00154ab
c001610c:	c7 05 30 3c 02 c0 1e 5b 01 c0 	mov    DWORD PTR ds:0xc0023c30,0xc0015b1e
c0016116:	c7 05 34 3c 02 c0 38 5b 01 c0 	mov    DWORD PTR ds:0xc0023c34,0xc0015b38
c0016120:	c7 05 38 3c 02 c0 54 5b 01 c0 	mov    DWORD PTR ds:0xc0023c38,0xc0015b54
c001612a:	c7 05 3c 3c 02 c0 a9 5b 01 c0 	mov    DWORD PTR ds:0xc0023c3c,0xc0015ba9
c0016134:	c7 05 40 3c 02 c0 fb 5b 01 c0 	mov    DWORD PTR ds:0xc0023c40,0xc0015bfb
c001613e:	c7 05 44 3c 02 c0 b5 54 01 c0 	mov    DWORD PTR ds:0xc0023c44,0xc00154b5
c0016148:	c7 05 48 3c 02 c0 4d 5c 01 c0 	mov    DWORD PTR ds:0xc0023c48,0xc0015c4d
c0016152:	c7 05 4c 3c 02 c0 5f 56 01 c0 	mov    DWORD PTR ds:0xc0023c4c,0xc001565f
c001615c:	c7 05 50 3c 02 c0 99 5c 01 c0 	mov    DWORD PTR ds:0xc0023c50,0xc0015c99
c0016166:	c7 05 54 3c 02 c0 01 58 01 c0 	mov    DWORD PTR ds:0xc0023c54,0xc0015801
c0016170:	c7 05 58 3c 02 c0 67 5d 01 c0 	mov    DWORD PTR ds:0xc0023c58,0xc0015d67
c001617a:	c7 05 5c 3c 02 c0 f1 58 01 c0 	mov    DWORD PTR ds:0xc0023c5c,0xc00158f1
c0016184:	c7 05 60 3c 02 c0 8e 5d 01 c0 	mov    DWORD PTR ds:0xc0023c60,0xc0015d8e
c001618e:	c7 05 64 3c 02 c0 15 5d 01 c0 	mov    DWORD PTR ds:0xc0023c64,0xc0015d15
c0016198:	c7 05 68 3c 02 c0 fe 5d 01 c0 	mov    DWORD PTR ds:0xc0023c68,0xc0015dfe
c00161a2:	c7 05 6c 3c 02 c0 c5 54 01 c0 	mov    DWORD PTR ds:0xc0023c6c,0xc00154c5
c00161ac:	c7 05 70 3c 02 c0 2f 55 01 c0 	mov    DWORD PTR ds:0xc0023c70,0xc001552f
c00161b6:	c7 05 74 3c 02 c0 75 55 01 c0 	mov    DWORD PTR ds:0xc0023c74,0xc0015575
c00161c0:	c7 05 78 3c 02 c0 1d 5f 01 c0 	mov    DWORD PTR ds:0xc0023c78,0xc0015f1d
c00161ca:	c7 05 7c 3c 02 c0 7d 5f 01 c0 	mov    DWORD PTR ds:0xc0023c7c,0xc0015f7d
c00161d4:	c7 05 80 3c 02 c0 c6 55 01 c0 	mov    DWORD PTR ds:0xc0023c80,0xc00155c6
c00161de:	c7 05 84 3c 02 c0 a3 5f 01 c0 	mov    DWORD PTR ds:0xc0023c84,0xc0015fa3
c00161e8:	c7 05 88 3c 02 c0 e8 5f 01 c0 	mov    DWORD PTR ds:0xc0023c88,0xc0015fe8
c00161f2:	c7 05 8c 3c 02 c0 c1 52 01 c0 	mov    DWORD PTR ds:0xc0023c8c,0xc00152c1
c00161fc:	c3                   	ret    

c00161fd <systemCall(regs*, void*)>:
c00161fd:	53                   	push   ebx
c00161fe:	83 ec 08             	sub    esp,0x8
c0016201:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016205:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016208:	83 f8 7f             	cmp    eax,0x7f
c001620b:	77 16                	ja     c0016223 <systemCall(regs*, void*)+0x26>
c001620d:	8b 14 85 e0 3b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc420]
c0016214:	85 d2                	test   edx,edx
c0016216:	74 0b                	je     c0016223 <systemCall(regs*, void*)+0x26>
c0016218:	83 ec 0c             	sub    esp,0xc
c001621b:	53                   	push   ebx
c001621c:	ff d2                	call   edx
c001621e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016221:	eb 0d                	jmp    c0016230 <systemCall(regs*, void*)+0x33>
c0016223:	52                   	push   edx
c0016224:	52                   	push   edx
c0016225:	50                   	push   eax
c0016226:	68 fc 15 02 c0       	push   0xc00215fc
c001622b:	e8 b5 8b ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0016230:	83 c4 10             	add    esp,0x10
c0016233:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016238:	31 d2                	xor    edx,edx
c001623a:	83 c4 08             	add    esp,0x8
c001623d:	5b                   	pop    ebx
c001623e:	c3                   	ret    

c001623f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001623f:	55                   	push   ebp
c0016240:	89 e5                	mov    ebp,esp
c0016242:	57                   	push   edi
c0016243:	56                   	push   esi
c0016244:	53                   	push   ebx
c0016245:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001624b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001624e:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0016251:	85 c0                	test   eax,eax
c0016253:	0f 95 c1             	setne  cl
c0016256:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001625a:	0f 94 c2             	sete   dl
c001625d:	84 d1                	test   cl,dl
c001625f:	74 26                	je     c0016287 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c0016261:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c0016268:	74 1d                	je     c0016287 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001626a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001626d:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c0016273:	89 d6                	mov    esi,edx
c0016275:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001627b:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c0016281:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0016284:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c0016287:	83 ec 0c             	sub    esp,0xc
c001628a:	05 ff 0f 00 00       	add    eax,0xfff
c001628f:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0016292:	6a 01                	push   0x1
c0016294:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001629a:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c00162a0:	e8 c0 78 ff ff       	call   c000db65 <Virt::allocateKernelVirtualPages(int)>
c00162a5:	83 c4 10             	add    esp,0x10
c00162a8:	89 c6                	mov    esi,eax
c00162aa:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c00162b0:	0f 86 21 01 00 00    	jbe    c00163d7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c00162b6:	c1 eb 0c             	shr    ebx,0xc
c00162b9:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c00162c3:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c00162c9:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00162cc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00162cf:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c00162d5:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c00162d8:	29 d8                	sub    eax,ebx
c00162da:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c00162e0:	0f 83 f4 00 00 00    	jae    c00163da <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c00162e6:	83 ec 0c             	sub    esp,0xc
c00162e9:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c00162ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00162f2:	3d 00 10 00 00       	cmp    eax,0x1000
c00162f7:	8b 09                	mov    ecx,DWORD PTR [ecx]
c00162f9:	52                   	push   edx
c00162fa:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c0016300:	52                   	push   edx
c0016301:	76 05                	jbe    c0016308 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c0016303:	b8 00 10 00 00       	mov    eax,0x1000
c0016308:	31 d2                	xor    edx,edx
c001630a:	52                   	push   edx
c001630b:	50                   	push   eax
c001630c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001630f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016312:	83 c4 20             	add    esp,0x20
c0016315:	85 c0                	test   eax,eax
c0016317:	74 1f                	je     c0016338 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c0016319:	51                   	push   ecx
c001631a:	51                   	push   ecx
c001631b:	50                   	push   eax
c001631c:	68 5c 16 02 c0       	push   0xc002165c
c0016321:	e8 bf 8a ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0016326:	89 34 24             	mov    DWORD PTR [esp],esi
c0016329:	e8 6d 7b ff ff       	call   c000de9b <Virt::freeKernelVirtualPages(unsigned long)>
c001632e:	83 c4 10             	add    esp,0x10
c0016331:	31 c0                	xor    eax,eax
c0016333:	e9 7c 01 00 00       	jmp    c00164b4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0016338:	e8 9d 14 00 00       	call   c00177da <lockScheduler()>
c001633d:	e8 86 5e ff ff       	call   c000c1c8 <Phys::allocatePage()>
c0016342:	6a 07                	push   0x7
c0016344:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001634a:	56                   	push   esi
c001634b:	50                   	push   eax
c001634c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016352:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016355:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001635b:	e8 3c 7e ff ff       	call   c000e19c <VAS::mapPage(unsigned long, unsigned long, int)>
c0016360:	83 c4 0c             	add    esp,0xc
c0016363:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016369:	6a 00                	push   0x0
c001636b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016371:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016374:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001637a:	e8 7b 7c ff ff       	call   c000dffa <VAS::mapOtherVASIn(bool, VAS*)>
c001637f:	58                   	pop    eax
c0016380:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c0016386:	5a                   	pop    edx
c0016387:	68 07 04 00 00       	push   0x407
c001638c:	53                   	push   ebx
c001638d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016393:	50                   	push   eax
c0016394:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001639a:	6a 00                	push   0x0
c001639c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00163a4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00163aa:	e8 ed 84 ff ff       	call   c000e89c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00163af:	83 c4 1c             	add    esp,0x1c
c00163b2:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c00163b8:	68 00 10 00 00       	push   0x1000
c00163bd:	50                   	push   eax
c00163be:	56                   	push   esi
c00163bf:	e8 0e a2 fe ff       	call   c00005d2 <memcpy>
c00163c4:	e8 13 14 00 00       	call   c00177dc <unlockScheduler()>
c00163c9:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c00163cf:	83 c4 10             	add    esp,0x10
c00163d2:	e9 f5 fe ff ff       	jmp    c00162cc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c00163d7:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00163da:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c00163e4:	0f 86 bc 00 00 00    	jbe    c00164a6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c00163ea:	e8 eb 13 00 00       	call   c00177da <lockScheduler()>
c00163ef:	51                   	push   ecx
c00163f0:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00163f6:	6a 00                	push   0x0
c00163f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163fd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016400:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016406:	e8 ef 7b ff ff       	call   c000dffa <VAS::mapOtherVASIn(bool, VAS*)>
c001640b:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c0016411:	83 c4 10             	add    esp,0x10
c0016414:	c1 e8 0c             	shr    eax,0xc
c0016417:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c0016421:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c0016427:	e8 9c 5d ff ff       	call   c000c1c8 <Phys::allocatePage()>
c001642c:	6a 07                	push   0x7
c001642e:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c0016434:	56                   	push   esi
c0016435:	50                   	push   eax
c0016436:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001643c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001643f:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c0016445:	e8 52 7d ff ff       	call   c000e19c <VAS::mapPage(unsigned long, unsigned long, int)>
c001644a:	58                   	pop    eax
c001644b:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c0016451:	5a                   	pop    edx
c0016452:	68 07 04 00 00       	push   0x407
c0016457:	53                   	push   ebx
c0016458:	81 c3 00 10 00 00    	add    ebx,0x1000
c001645e:	50                   	push   eax
c001645f:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016465:	6a 00                	push   0x0
c0016467:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001646c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001646f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016475:	e8 22 84 ff ff       	call   c000e89c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001647a:	83 c4 1c             	add    esp,0x1c
c001647d:	68 00 10 00 00       	push   0x1000
c0016482:	6a 00                	push   0x0
c0016484:	56                   	push   esi
c0016485:	e8 7e a1 fe ff       	call   c0000608 <memset>
c001648a:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c0016490:	83 c4 10             	add    esp,0x10
c0016493:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c0016499:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001649f:	77 86                	ja     c0016427 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c00164a1:	e8 36 13 00 00       	call   c00177dc <unlockScheduler()>
c00164a6:	83 ec 0c             	sub    esp,0xc
c00164a9:	56                   	push   esi
c00164aa:	e8 ec 79 ff ff       	call   c000de9b <Virt::freeKernelVirtualPages(unsigned long)>
c00164af:	83 c4 10             	add    esp,0x10
c00164b2:	b0 01                	mov    al,0x1
c00164b4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00164b7:	5b                   	pop    ebx
c00164b8:	5e                   	pop    esi
c00164b9:	5f                   	pop    edi
c00164ba:	5d                   	pop    ebp
c00164bb:	c3                   	ret    

c00164bc <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00164bc:	55                   	push   ebp
c00164bd:	57                   	push   edi
c00164be:	56                   	push   esi
c00164bf:	53                   	push   ebx
c00164c0:	83 ec 48             	sub    esp,0x48
c00164c3:	68 14 01 00 00       	push   0x114
c00164c8:	e8 29 88 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c00164cd:	83 c4 0c             	add    esp,0xc
c00164d0:	89 c6                	mov    esi,eax
c00164d2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00164d6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00164da:	50                   	push   eax
c00164db:	e8 34 8e ff ff       	call   c000f314 <File::File(char const*, Process*)>
c00164e0:	58                   	pop    eax
c00164e1:	5a                   	pop    edx
c00164e2:	6a 01                	push   0x1
c00164e4:	56                   	push   esi
c00164e5:	e8 8e 8e ff ff       	call   c000f378 <File::open(FileOpenMode)>
c00164ea:	83 c4 10             	add    esp,0x10
c00164ed:	85 c0                	test   eax,eax
c00164ef:	0f 85 47 01 00 00    	jne    c001663c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00164f5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00164fd:	83 ec 0c             	sub    esp,0xc
c0016500:	6a 34                	push   0x34
c0016502:	e8 17 57 ff ff       	call   c000bc1e <malloc>
c0016507:	89 c3                	mov    ebx,eax
c0016509:	58                   	pop    eax
c001650a:	8b 06                	mov    eax,DWORD PTR [esi]
c001650c:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0016510:	57                   	push   edi
c0016511:	53                   	push   ebx
c0016512:	6a 00                	push   0x0
c0016514:	6a 34                	push   0x34
c0016516:	56                   	push   esi
c0016517:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001651a:	83 c4 20             	add    esp,0x20
c001651d:	85 c0                	test   eax,eax
c001651f:	0f 85 17 01 00 00    	jne    c001663c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016525:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001652b:	0f 85 0b 01 00 00    	jne    c001663c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016531:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016534:	85 c0                	test   eax,eax
c0016536:	0f 84 00 01 00 00    	je     c001663c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001653c:	31 d2                	xor    edx,edx
c001653e:	55                   	push   ebp
c001653f:	52                   	push   edx
c0016540:	50                   	push   eax
c0016541:	56                   	push   esi
c0016542:	e8 ef 8e ff ff       	call   c000f436 <File::seek(unsigned long long)>
c0016547:	83 c4 10             	add    esp,0x10
c001654a:	85 c0                	test   eax,eax
c001654c:	0f 85 ea 00 00 00    	jne    c001663c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016552:	83 ec 0c             	sub    esp,0xc
c0016555:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016558:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001655c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016560:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016564:	0f af c2             	imul   eax,edx
c0016567:	50                   	push   eax
c0016568:	e8 b1 56 ff ff       	call   c000bc1e <malloc>
c001656d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016570:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016574:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016576:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001657a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001657e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016582:	0f af c2             	imul   eax,edx
c0016585:	99                   	cdq    
c0016586:	52                   	push   edx
c0016587:	50                   	push   eax
c0016588:	56                   	push   esi
c0016589:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001658c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001658f:	83 c4 20             	add    esp,0x20
c0016592:	85 c0                	test   eax,eax
c0016594:	0f 84 a2 00 00 00    	je     c001663c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001659a:	31 d2                	xor    edx,edx
c001659c:	51                   	push   ecx
c001659d:	52                   	push   edx
c001659e:	50                   	push   eax
c001659f:	56                   	push   esi
c00165a0:	e8 91 8e ff ff       	call   c000f436 <File::seek(unsigned long long)>
c00165a5:	83 c4 10             	add    esp,0x10
c00165a8:	85 c0                	test   eax,eax
c00165aa:	0f 85 8c 00 00 00    	jne    c001663c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00165b0:	83 ec 0c             	sub    esp,0xc
c00165b3:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00165b7:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00165bb:	31 ed                	xor    ebp,ebp
c00165bd:	0f af c2             	imul   eax,edx
c00165c0:	50                   	push   eax
c00165c1:	e8 58 56 ff ff       	call   c000bc1e <malloc>
c00165c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00165c9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00165cd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00165cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165d3:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00165d7:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00165db:	0f af c2             	imul   eax,edx
c00165de:	99                   	cdq    
c00165df:	52                   	push   edx
c00165e0:	50                   	push   eax
c00165e1:	56                   	push   esi
c00165e2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00165e5:	83 c4 20             	add    esp,0x20
c00165e8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00165f0:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00165f4:	0f 86 80 00 00 00    	jbe    c001667a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00165fa:	0f b7 fd             	movzx  edi,bp
c00165fd:	c1 e7 05             	shl    edi,0x5
c0016600:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0016604:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0016607:	75 6b                	jne    c0016674 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016609:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001660c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016610:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0016613:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016617:	52                   	push   edx
c0016618:	31 d2                	xor    edx,edx
c001661a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001661d:	52                   	push   edx
c001661e:	50                   	push   eax
c001661f:	56                   	push   esi
c0016620:	e8 11 8e ff ff       	call   c000f436 <File::seek(unsigned long long)>
c0016625:	83 c4 10             	add    esp,0x10
c0016628:	85 c0                	test   eax,eax
c001662a:	74 17                	je     c0016643 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001662c:	83 ec 0c             	sub    esp,0xc
c001662f:	68 87 16 02 c0       	push   0xc0021687
c0016634:	e8 ac 87 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0016639:	83 c4 10             	add    esp,0x10
c001663c:	31 c0                	xor    eax,eax
c001663e:	e9 87 00 00 00       	jmp    c00166ca <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0016643:	83 ec 0c             	sub    esp,0xc
c0016646:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016649:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001664c:	50                   	push   eax
c001664d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016651:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016655:	56                   	push   esi
c0016656:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001665a:	e8 e0 fb ff ff       	call   c001623f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001665f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016663:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0016667:	83 c4 20             	add    esp,0x20
c001666a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001666e:	73 04                	jae    c0016674 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016670:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016674:	45                   	inc    ebp
c0016675:	e9 76 ff ff ff       	jmp    c00165f0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001667a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001667e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016686:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001668c:	83 ec 0c             	sub    esp,0xc
c001668f:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c0016695:	25 00 f0 ff ff       	and    eax,0xfffff000
c001669a:	05 00 10 00 00       	add    eax,0x1000
c001669f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00166a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166a6:	e8 83 55 ff ff       	call   c000bc2e <free>
c00166ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00166ae:	e8 7b 55 ff ff       	call   c000bc2e <free>
c00166b3:	58                   	pop    eax
c00166b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00166b8:	e8 71 55 ff ff       	call   c000bc2e <free>
c00166bd:	89 34 24             	mov    DWORD PTR [esp],esi
c00166c0:	e8 11 8d ff ff       	call   c000f3d6 <File::close()>
c00166c5:	83 c4 10             	add    esp,0x10
c00166c8:	b0 01                	mov    al,0x1
c00166ca:	83 c4 3c             	add    esp,0x3c
c00166cd:	5b                   	pop    ebx
c00166ce:	5e                   	pop    esi
c00166cf:	5f                   	pop    edi
c00166d0:	5d                   	pop    ebp
c00166d1:	c3                   	ret    

c00166d2 <Thr::runtimeReferenceHelper()>:
c00166d2:	83 ec 18             	sub    esp,0x18
c00166d5:	68 8f 16 02 c0       	push   0xc002168f
c00166da:	e8 06 87 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c00166df:	fa                   	cli    
c00166e0:	83 c4 10             	add    esp,0x10
c00166e3:	eb fe                	jmp    c00166e3 <Thr::runtimeReferenceHelper()+0x11>

c00166e5 <Thr::getAddressOfKernelSymbol(char const*)>:
c00166e5:	57                   	push   edi
c00166e6:	56                   	push   esi
c00166e7:	53                   	push   ebx
c00166e8:	31 db                	xor    ebx,ebx
c00166ea:	39 1d 80 45 02 c0    	cmp    DWORD PTR ds:0xc0024580,ebx
c00166f0:	7e 3c                	jle    c001672e <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00166f2:	8b 34 9d 00 45 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdbb00]
c00166f9:	31 ff                	xor    edi,edi
c00166fb:	39 3c 9d 00 44 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdbc00],edi
c0016702:	7e 27                	jle    c001672b <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016704:	50                   	push   eax
c0016705:	50                   	push   eax
c0016706:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001670a:	8b 06                	mov    eax,DWORD PTR [esi]
c001670c:	03 04 9d 80 44 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdbb80]
c0016713:	50                   	push   eax
c0016714:	e8 df 9f fe ff       	call   c00006f8 <strcmp>
c0016719:	83 c4 10             	add    esp,0x10
c001671c:	85 c0                	test   eax,eax
c001671e:	75 05                	jne    c0016725 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016720:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016723:	eb 0b                	jmp    c0016730 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016725:	83 c6 10             	add    esi,0x10
c0016728:	47                   	inc    edi
c0016729:	eb d0                	jmp    c00166fb <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001672b:	43                   	inc    ebx
c001672c:	eb bc                	jmp    c00166ea <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001672e:	31 c0                	xor    eax,eax
c0016730:	5b                   	pop    ebx
c0016731:	5e                   	pop    esi
c0016732:	5f                   	pop    edi
c0016733:	c3                   	ret    

c0016734 <Thr::loadKernelSymbolTable(char const*)>:
c0016734:	55                   	push   ebp
c0016735:	57                   	push   edi
c0016736:	56                   	push   esi
c0016737:	53                   	push   ebx
c0016738:	83 ec 68             	sub    esp,0x68
c001673b:	8b 35 d4 45 02 c0    	mov    esi,DWORD PTR ds:0xc00245d4
c0016741:	68 14 01 00 00       	push   0x114
c0016746:	e8 ab 85 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c001674b:	83 c4 0c             	add    esp,0xc
c001674e:	89 c3                	mov    ebx,eax
c0016750:	56                   	push   esi
c0016751:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016755:	50                   	push   eax
c0016756:	e8 b9 8b ff ff       	call   c000f314 <File::File(char const*, Process*)>
c001675b:	5e                   	pop    esi
c001675c:	5f                   	pop    edi
c001675d:	6a 01                	push   0x1
c001675f:	53                   	push   ebx
c0016760:	e8 13 8c ff ff       	call   c000f378 <File::open(FileOpenMode)>
c0016765:	83 c4 10             	add    esp,0x10
c0016768:	31 d2                	xor    edx,edx
c001676a:	85 c0                	test   eax,eax
c001676c:	0f 85 79 02 00 00    	jne    c00169eb <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0016772:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001677a:	83 ec 0c             	sub    esp,0xc
c001677d:	6a 34                	push   0x34
c001677f:	e8 9a 54 ff ff       	call   c000bc1e <malloc>
c0016784:	59                   	pop    ecx
c0016785:	89 c7                	mov    edi,eax
c0016787:	8d 74 24 34          	lea    esi,[esp+0x34]
c001678b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001678d:	56                   	push   esi
c001678e:	57                   	push   edi
c001678f:	6a 00                	push   0x0
c0016791:	6a 34                	push   0x34
c0016793:	53                   	push   ebx
c0016794:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016797:	83 c4 20             	add    esp,0x20
c001679a:	85 c0                	test   eax,eax
c001679c:	74 17                	je     c00167b5 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001679e:	83 ec 0c             	sub    esp,0xc
c00167a1:	68 b1 16 02 c0       	push   0xc00216b1
c00167a6:	e8 cf e2 ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c00167ab:	83 c4 10             	add    esp,0x10
c00167ae:	31 d2                	xor    edx,edx
c00167b0:	e9 36 02 00 00       	jmp    c00169eb <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00167b5:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00167bb:	75 e1                	jne    c001679e <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00167bd:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00167c0:	85 c0                	test   eax,eax
c00167c2:	74 da                	je     c001679e <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00167c4:	52                   	push   edx
c00167c5:	31 d2                	xor    edx,edx
c00167c7:	52                   	push   edx
c00167c8:	50                   	push   eax
c00167c9:	53                   	push   ebx
c00167ca:	e8 67 8c ff ff       	call   c000f436 <File::seek(unsigned long long)>
c00167cf:	83 c4 10             	add    esp,0x10
c00167d2:	85 c0                	test   eax,eax
c00167d4:	75 c8                	jne    c001679e <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00167d6:	83 ec 0c             	sub    esp,0xc
c00167d9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00167dd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00167e1:	31 ed                	xor    ebp,ebp
c00167e3:	0f af c2             	imul   eax,edx
c00167e6:	50                   	push   eax
c00167e7:	e8 32 54 ff ff       	call   c000bc1e <malloc>
c00167ec:	89 34 24             	mov    DWORD PTR [esp],esi
c00167ef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00167f3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00167f5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00167f9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00167fd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016801:	0f af c2             	imul   eax,edx
c0016804:	99                   	cdq    
c0016805:	52                   	push   edx
c0016806:	50                   	push   eax
c0016807:	53                   	push   ebx
c0016808:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001680b:	83 c4 20             	add    esp,0x20
c001680e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016816:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001681e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016826:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001682e:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0016832:	0f 86 aa 00 00 00    	jbe    c00168e2 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c0016838:	0f b7 f5             	movzx  esi,bp
c001683b:	6b f6 28             	imul   esi,esi,0x28
c001683e:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0016842:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016845:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016849:	50                   	push   eax
c001684a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001684e:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016852:	8b 16                	mov    edx,DWORD PTR [esi]
c0016854:	6b c0 28             	imul   eax,eax,0x28
c0016857:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001685b:	89 d0                	mov    eax,edx
c001685d:	31 d2                	xor    edx,edx
c001685f:	52                   	push   edx
c0016860:	50                   	push   eax
c0016861:	53                   	push   ebx
c0016862:	e8 cf 8b ff ff       	call   c000f436 <File::seek(unsigned long long)>
c0016867:	83 c4 0c             	add    esp,0xc
c001686a:	6a 20                	push   0x20
c001686c:	6a 00                	push   0x0
c001686e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016872:	52                   	push   edx
c0016873:	e8 90 9d fe ff       	call   c0000608 <memset>
c0016878:	58                   	pop    eax
c0016879:	8b 03                	mov    eax,DWORD PTR [ebx]
c001687b:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001687f:	51                   	push   ecx
c0016880:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016884:	52                   	push   edx
c0016885:	6a 00                	push   0x0
c0016887:	6a 1f                	push   0x1f
c0016889:	53                   	push   ebx
c001688a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001688d:	83 c4 18             	add    esp,0x18
c0016890:	68 c8 16 02 c0       	push   0xc00216c8
c0016895:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016899:	52                   	push   edx
c001689a:	e8 59 9e fe ff       	call   c00006f8 <strcmp>
c001689f:	83 c4 10             	add    esp,0x10
c00168a2:	85 c0                	test   eax,eax
c00168a4:	75 0f                	jne    c00168b5 <Thr::loadKernelSymbolTable(char const*)+0x181>
c00168a6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00168a9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00168ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00168b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00168b5:	50                   	push   eax
c00168b6:	50                   	push   eax
c00168b7:	68 d0 16 02 c0       	push   0xc00216d0
c00168bc:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00168c0:	50                   	push   eax
c00168c1:	e8 32 9e fe ff       	call   c00006f8 <strcmp>
c00168c6:	83 c4 10             	add    esp,0x10
c00168c9:	85 c0                	test   eax,eax
c00168cb:	75 0f                	jne    c00168dc <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c00168cd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00168d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00168d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00168d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00168dc:	45                   	inc    ebp
c00168dd:	e9 4c ff ff ff       	jmp    c001682e <Thr::loadKernelSymbolTable(char const*)+0xfa>
c00168e2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00168e7:	75 10                	jne    c00168f9 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c00168e9:	83 ec 0c             	sub    esp,0xc
c00168ec:	68 d8 16 02 c0       	push   0xc00216d8
c00168f1:	e8 84 e1 ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c00168f6:	83 c4 10             	add    esp,0x10
c00168f9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00168fe:	75 10                	jne    c0016910 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c0016900:	83 ec 0c             	sub    esp,0xc
c0016903:	68 d8 16 02 c0       	push   0xc00216d8
c0016908:	e8 6d e1 ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c001690d:	83 c4 10             	add    esp,0x10
c0016910:	31 d2                	xor    edx,edx
c0016912:	50                   	push   eax
c0016913:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016917:	52                   	push   edx
c0016918:	50                   	push   eax
c0016919:	53                   	push   ebx
c001691a:	e8 17 8b ff ff       	call   c000f436 <File::seek(unsigned long long)>
c001691f:	5a                   	pop    edx
c0016920:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016924:	e8 f5 52 ff ff       	call   c000bc1e <malloc>
c0016929:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016931:	89 c1                	mov    ecx,eax
c0016933:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016937:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001693b:	5e                   	pop    esi
c001693c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001693e:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0016942:	55                   	push   ebp
c0016943:	51                   	push   ecx
c0016944:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0016948:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001694c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016950:	53                   	push   ebx
c0016951:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016954:	83 c4 14             	add    esp,0x14
c0016957:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001695b:	e8 be 52 ff ff       	call   c000bc1e <malloc>
c0016960:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016963:	89 c6                	mov    esi,eax
c0016965:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016967:	56                   	push   esi
c0016968:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001696c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016970:	53                   	push   ebx
c0016971:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016974:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016978:	8b 15 80 45 02 c0    	mov    edx,DWORD PTR ds:0xc0024580
c001697e:	83 c4 1c             	add    esp,0x1c
c0016981:	c1 e8 04             	shr    eax,0x4
c0016984:	89 04 95 00 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbc00],eax
c001698b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001698f:	31 d2                	xor    edx,edx
c0016991:	52                   	push   edx
c0016992:	50                   	push   eax
c0016993:	53                   	push   ebx
c0016994:	e8 9d 8a ff ff       	call   c000f436 <File::seek(unsigned long long)>
c0016999:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001699c:	31 d2                	xor    edx,edx
c001699e:	56                   	push   esi
c001699f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00169a3:	52                   	push   edx
c00169a4:	50                   	push   eax
c00169a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169a7:	53                   	push   ebx
c00169a8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00169ab:	83 c4 14             	add    esp,0x14
c00169ae:	53                   	push   ebx
c00169af:	e8 22 8a ff ff       	call   c000f3d6 <File::close()>
c00169b4:	5d                   	pop    ebp
c00169b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169b9:	e8 70 52 ff ff       	call   c000bc2e <free>
c00169be:	89 3c 24             	mov    DWORD PTR [esp],edi
c00169c1:	e8 68 52 ff ff       	call   c000bc2e <free>
c00169c6:	a1 80 45 02 c0       	mov    eax,ds:0xc0024580
c00169cb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00169cf:	8d 50 01             	lea    edx,[eax+0x1]
c00169d2:	89 0c 85 00 45 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbb00],ecx
c00169d9:	89 15 80 45 02 c0    	mov    DWORD PTR ds:0xc0024580,edx
c00169df:	89 34 85 80 44 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbb80],esi
c00169e6:	83 c4 10             	add    esp,0x10
c00169e9:	b2 01                	mov    dl,0x1
c00169eb:	83 c4 5c             	add    esp,0x5c
c00169ee:	88 d0                	mov    al,dl
c00169f0:	5b                   	pop    ebx
c00169f1:	5e                   	pop    esi
c00169f2:	5f                   	pop    edi
c00169f3:	5d                   	pop    ebp
c00169f4:	c3                   	ret    

c00169f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00169f5:	55                   	push   ebp
c00169f6:	57                   	push   edi
c00169f7:	56                   	push   esi
c00169f8:	53                   	push   ebx
c00169f9:	81 ec 68 03 00 00    	sub    esp,0x368
c00169ff:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0016a06:	8b 1d d4 45 02 c0    	mov    ebx,DWORD PTR ds:0xc00245d4
c0016a0c:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0016a10:	68 14 01 00 00       	push   0x114
c0016a15:	e8 dc 82 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c0016a1a:	83 c4 0c             	add    esp,0xc
c0016a1d:	89 c5                	mov    ebp,eax
c0016a1f:	53                   	push   ebx
c0016a20:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0016a27:	50                   	push   eax
c0016a28:	e8 e7 88 ff ff       	call   c000f314 <File::File(char const*, Process*)>
c0016a2d:	58                   	pop    eax
c0016a2e:	5a                   	pop    edx
c0016a2f:	6a 01                	push   0x1
c0016a31:	55                   	push   ebp
c0016a32:	e8 41 89 ff ff       	call   c000f378 <File::open(FileOpenMode)>
c0016a37:	83 c4 10             	add    esp,0x10
c0016a3a:	85 c0                	test   eax,eax
c0016a3c:	0f 85 75 07 00 00    	jne    c00171b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7c2>
c0016a42:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016a4a:	83 ec 0c             	sub    esp,0xc
c0016a4d:	6a 34                	push   0x34
c0016a4f:	e8 ca 51 ff ff       	call   c000bc1e <malloc>
c0016a54:	89 c7                	mov    edi,eax
c0016a56:	58                   	pop    eax
c0016a57:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016a5a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016a5e:	53                   	push   ebx
c0016a5f:	57                   	push   edi
c0016a60:	6a 00                	push   0x0
c0016a62:	6a 34                	push   0x34
c0016a64:	55                   	push   ebp
c0016a65:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016a68:	83 c4 20             	add    esp,0x20
c0016a6b:	85 c0                	test   eax,eax
c0016a6d:	0f 85 44 07 00 00    	jne    c00171b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7c2>
c0016a73:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016a79:	0f 85 38 07 00 00    	jne    c00171b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7c2>
c0016a7f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016a82:	85 c0                	test   eax,eax
c0016a84:	0f 84 2d 07 00 00    	je     c00171b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7c2>
c0016a8a:	31 d2                	xor    edx,edx
c0016a8c:	56                   	push   esi
c0016a8d:	52                   	push   edx
c0016a8e:	50                   	push   eax
c0016a8f:	55                   	push   ebp
c0016a90:	e8 a1 89 ff ff       	call   c000f436 <File::seek(unsigned long long)>
c0016a95:	83 c4 10             	add    esp,0x10
c0016a98:	85 c0                	test   eax,eax
c0016a9a:	0f 85 17 07 00 00    	jne    c00171b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7c2>
c0016aa0:	83 ec 0c             	sub    esp,0xc
c0016aa3:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016aa6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016aaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016aae:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016ab2:	0f af c2             	imul   eax,edx
c0016ab5:	50                   	push   eax
c0016ab6:	e8 63 51 ff ff       	call   c000bc1e <malloc>
c0016abb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016abe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016ac2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016ac5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016ac9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016acd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016ad1:	0f af c2             	imul   eax,edx
c0016ad4:	99                   	cdq    
c0016ad5:	52                   	push   edx
c0016ad6:	50                   	push   eax
c0016ad7:	55                   	push   ebp
c0016ad8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016adb:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016ade:	83 c4 20             	add    esp,0x20
c0016ae1:	85 c0                	test   eax,eax
c0016ae3:	0f 84 ce 06 00 00    	je     c00171b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7c2>
c0016ae9:	31 d2                	xor    edx,edx
c0016aeb:	51                   	push   ecx
c0016aec:	52                   	push   edx
c0016aed:	50                   	push   eax
c0016aee:	55                   	push   ebp
c0016aef:	e8 42 89 ff ff       	call   c000f436 <File::seek(unsigned long long)>
c0016af4:	83 c4 10             	add    esp,0x10
c0016af7:	85 c0                	test   eax,eax
c0016af9:	0f 85 b8 06 00 00    	jne    c00171b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7c2>
c0016aff:	83 ec 0c             	sub    esp,0xc
c0016b02:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016b06:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016b0a:	31 f6                	xor    esi,esi
c0016b0c:	0f af c2             	imul   eax,edx
c0016b0f:	50                   	push   eax
c0016b10:	e8 09 51 ff ff       	call   c000bc1e <malloc>
c0016b15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b18:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016b1c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016b1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b23:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016b27:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016b2b:	0f af c2             	imul   eax,edx
c0016b2e:	99                   	cdq    
c0016b2f:	52                   	push   edx
c0016b30:	50                   	push   eax
c0016b31:	55                   	push   ebp
c0016b32:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016b35:	83 c4 20             	add    esp,0x20
c0016b38:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0016b3c:	0f 86 8a 00 00 00    	jbe    c0016bcc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0016b42:	0f b7 de             	movzx  ebx,si
c0016b45:	c1 e3 05             	shl    ebx,0x5
c0016b48:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0016b4c:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016b4f:	75 75                	jne    c0016bc6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016b51:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b54:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016b58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016b5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b5f:	52                   	push   edx
c0016b60:	31 d2                	xor    edx,edx
c0016b62:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016b65:	52                   	push   edx
c0016b66:	50                   	push   eax
c0016b67:	55                   	push   ebp
c0016b68:	e8 c9 88 ff ff       	call   c000f436 <File::seek(unsigned long long)>
c0016b6d:	83 c4 10             	add    esp,0x10
c0016b70:	85 c0                	test   eax,eax
c0016b72:	0f 85 3f 06 00 00    	jne    c00171b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7c2>
c0016b78:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0016b7f:	31 d2                	xor    edx,edx
c0016b81:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0016b85:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016b88:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0016b8c:	83 ec 0c             	sub    esp,0xc
c0016b8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b93:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016b9a:	50                   	push   eax
c0016b9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016b9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ba3:	52                   	push   edx
c0016ba4:	50                   	push   eax
c0016ba5:	55                   	push   ebp
c0016ba6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016ba9:	83 c4 1c             	add    esp,0x1c
c0016bac:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016baf:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0016bb2:	50                   	push   eax
c0016bb3:	6a 00                	push   0x0
c0016bb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bb9:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0016bbd:	50                   	push   eax
c0016bbe:	e8 45 9a fe ff       	call   c0000608 <memset>
c0016bc3:	83 c4 10             	add    esp,0x10
c0016bc6:	46                   	inc    esi
c0016bc7:	e9 6c ff ff ff       	jmp    c0016b38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0016bcc:	31 db                	xor    ebx,ebx
c0016bce:	50                   	push   eax
c0016bcf:	68 00 01 00 00       	push   0x100
c0016bd4:	6a 00                	push   0x0
c0016bd6:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016bda:	50                   	push   eax
c0016bdb:	e8 28 9a fe ff       	call   c0000608 <memset>
c0016be0:	83 c4 0c             	add    esp,0xc
c0016be3:	68 00 01 00 00       	push   0x100
c0016be8:	6a 00                	push   0x0
c0016bea:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0016bf1:	50                   	push   eax
c0016bf2:	e8 11 9a fe ff       	call   c0000608 <memset>
c0016bf7:	83 c4 10             	add    esp,0x10
c0016bfa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016c02:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016c0a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016c12:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016c1a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016c22:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0016c26:	0f 86 50 01 00 00    	jbe    c0016d7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x387>
c0016c2c:	0f b7 cb             	movzx  ecx,bx
c0016c2f:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0016c33:	6b f1 28             	imul   esi,ecx,0x28
c0016c36:	03 74 24 14          	add    esi,DWORD PTR [esp+0x14]
c0016c3a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016c3d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016c41:	50                   	push   eax
c0016c42:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016c46:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016c4a:	8b 16                	mov    edx,DWORD PTR [esi]
c0016c4c:	6b c0 28             	imul   eax,eax,0x28
c0016c4f:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016c53:	89 d0                	mov    eax,edx
c0016c55:	31 d2                	xor    edx,edx
c0016c57:	52                   	push   edx
c0016c58:	50                   	push   eax
c0016c59:	55                   	push   ebp
c0016c5a:	e8 d7 87 ff ff       	call   c000f436 <File::seek(unsigned long long)>
c0016c5f:	83 c4 0c             	add    esp,0xc
c0016c62:	6a 20                	push   0x20
c0016c64:	6a 00                	push   0x0
c0016c66:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016c6d:	50                   	push   eax
c0016c6e:	e8 95 99 fe ff       	call   c0000608 <memset>
c0016c73:	58                   	pop    eax
c0016c74:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016c77:	8d 54 24 58          	lea    edx,[esp+0x58]
c0016c7b:	52                   	push   edx
c0016c7c:	8d 94 24 60 02 00 00 	lea    edx,[esp+0x260]
c0016c83:	52                   	push   edx
c0016c84:	6a 00                	push   0x0
c0016c86:	6a 1f                	push   0x1f
c0016c88:	55                   	push   ebp
c0016c89:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016c8c:	83 c4 1c             	add    esp,0x1c
c0016c8f:	8d 84 24 54 02 00 00 	lea    eax,[esp+0x254]
c0016c96:	50                   	push   eax
c0016c97:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016c9b:	51                   	push   ecx
c0016c9c:	68 f2 16 02 c0       	push   0xc00216f2
c0016ca1:	e8 3f 81 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0016ca6:	83 c4 0c             	add    esp,0xc
c0016ca9:	6a 09                	push   0x9
c0016cab:	68 03 17 02 c0       	push   0xc0021703
c0016cb0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016cb7:	50                   	push   eax
c0016cb8:	e8 b2 98 fe ff       	call   c000056f <memcmp>
c0016cbd:	83 c4 10             	add    esp,0x10
c0016cc0:	85 c0                	test   eax,eax
c0016cc2:	75 21                	jne    c0016ce5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f0>
c0016cc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016ccc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016cd0:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0016cd4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016cd7:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0016cde:	89 d0                	mov    eax,edx
c0016ce0:	40                   	inc    eax
c0016ce1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ce5:	50                   	push   eax
c0016ce6:	6a 09                	push   0x9
c0016ce8:	68 0d 17 02 c0       	push   0xc002170d
c0016ced:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016cf4:	50                   	push   eax
c0016cf5:	e8 75 98 fe ff       	call   c000056f <memcmp>
c0016cfa:	83 c4 10             	add    esp,0x10
c0016cfd:	85 c0                	test   eax,eax
c0016cff:	75 21                	jne    c0016d22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32d>
c0016d01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d05:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016d09:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016d0d:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0016d11:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016d14:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0016d1b:	89 d0                	mov    eax,edx
c0016d1d:	40                   	inc    eax
c0016d1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016d22:	50                   	push   eax
c0016d23:	50                   	push   eax
c0016d24:	68 c8 16 02 c0       	push   0xc00216c8
c0016d29:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016d30:	50                   	push   eax
c0016d31:	e8 c2 99 fe ff       	call   c00006f8 <strcmp>
c0016d36:	83 c4 10             	add    esp,0x10
c0016d39:	85 c0                	test   eax,eax
c0016d3b:	75 0f                	jne    c0016d4c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x357>
c0016d3d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016d40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016d4c:	50                   	push   eax
c0016d4d:	50                   	push   eax
c0016d4e:	68 d0 16 02 c0       	push   0xc00216d0
c0016d53:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016d5a:	50                   	push   eax
c0016d5b:	e8 98 99 fe ff       	call   c00006f8 <strcmp>
c0016d60:	83 c4 10             	add    esp,0x10
c0016d63:	85 c0                	test   eax,eax
c0016d65:	75 0f                	jne    c0016d76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x381>
c0016d67:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016d6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016d6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016d76:	43                   	inc    ebx
c0016d77:	e9 a6 fe ff ff       	jmp    c0016c22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0016d7c:	31 d2                	xor    edx,edx
c0016d7e:	50                   	push   eax
c0016d7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d83:	52                   	push   edx
c0016d84:	50                   	push   eax
c0016d85:	55                   	push   ebp
c0016d86:	e8 ab 86 ff ff       	call   c000f436 <File::seek(unsigned long long)>
c0016d8b:	5a                   	pop    edx
c0016d8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d90:	e8 89 4e ff ff       	call   c000bc1e <malloc>
c0016d95:	31 d2                	xor    edx,edx
c0016d97:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0016d9b:	59                   	pop    ecx
c0016d9c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016d9f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016da3:	53                   	push   ebx
c0016da4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016da8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016dac:	52                   	push   edx
c0016dad:	50                   	push   eax
c0016dae:	55                   	push   ebp
c0016daf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016db2:	83 c4 14             	add    esp,0x14
c0016db5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016db9:	e8 60 4e ff ff       	call   c000bc1e <malloc>
c0016dbe:	31 d2                	xor    edx,edx
c0016dc0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016dc4:	83 c4 0c             	add    esp,0xc
c0016dc7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016dcb:	52                   	push   edx
c0016dcc:	50                   	push   eax
c0016dcd:	55                   	push   ebp
c0016dce:	e8 63 86 ff ff       	call   c000f436 <File::seek(unsigned long long)>
c0016dd3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016dd6:	31 d2                	xor    edx,edx
c0016dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016ddc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016ddf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016de3:	52                   	push   edx
c0016de4:	50                   	push   eax
c0016de5:	55                   	push   ebp
c0016de6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016de9:	83 c4 20             	add    esp,0x20
c0016dec:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016df4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016df8:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0016dfc:	0f 84 b9 03 00 00    	je     c00171bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7c6>
c0016e02:	8b 84 b4 50 01 00 00 	mov    eax,DWORD PTR [esp+esi*4+0x150]
c0016e09:	31 d2                	xor    edx,edx
c0016e0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e0f:	c1 e8 03             	shr    eax,0x3
c0016e12:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016e16:	50                   	push   eax
c0016e17:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016e1b:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0016e1f:	52                   	push   edx
c0016e20:	50                   	push   eax
c0016e21:	55                   	push   ebp
c0016e22:	e8 0f 86 ff ff       	call   c000f436 <File::seek(unsigned long long)>
c0016e27:	58                   	pop    eax
c0016e28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016e2c:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0016e33:	e8 e6 4d ff ff       	call   c000bc1e <malloc>
c0016e38:	31 d2                	xor    edx,edx
c0016e3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016e3e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016e41:	58                   	pop    eax
c0016e42:	8d 44 24 58          	lea    eax,[esp+0x58]
c0016e46:	50                   	push   eax
c0016e47:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016e4b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e4f:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0016e56:	52                   	push   edx
c0016e57:	50                   	push   eax
c0016e58:	55                   	push   ebp
c0016e59:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e5c:	83 c4 20             	add    esp,0x20
c0016e5f:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0016e67:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016e6b:	39 74 24 30          	cmp    DWORD PTR [esp+0x30],esi
c0016e6f:	0f 8d 2a 03 00 00    	jge    c001719f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7aa>
c0016e75:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016e79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016e7d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016e81:	8b 04 f0             	mov    eax,DWORD PTR [eax+esi*8]
c0016e84:	31 db                	xor    ebx,ebx
c0016e86:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016e8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016e8e:	8b 44 f0 04          	mov    eax,DWORD PTR [eax+esi*8+0x4]
c0016e92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016e96:	c1 e8 08             	shr    eax,0x8
c0016e99:	c1 e0 04             	shl    eax,0x4
c0016e9c:	8d 34 01             	lea    esi,[ecx+eax*1]
c0016e9f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016ea2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ea6:	85 c0                	test   eax,eax
c0016ea8:	0f 85 17 01 00 00    	jne    c0016fc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0016eae:	83 ec 0c             	sub    esp,0xc
c0016eb1:	b3 01                	mov    bl,0x1
c0016eb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016eb7:	03 06                	add    eax,DWORD PTR [esi]
c0016eb9:	50                   	push   eax
c0016eba:	e8 26 f8 ff ff       	call   c00166e5 <Thr::getAddressOfKernelSymbol(char const*)>
c0016ebf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016ec3:	83 c4 10             	add    esp,0x10
c0016ec6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016ecb:	0f 85 f4 00 00 00    	jne    c0016fc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0016ed1:	50                   	push   eax
c0016ed2:	50                   	push   eax
c0016ed3:	68 17 17 02 c0       	push   0xc0021717
c0016ed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016edc:	03 06                	add    eax,DWORD PTR [esi]
c0016ede:	50                   	push   eax
c0016edf:	e8 14 98 fe ff       	call   c00006f8 <strcmp>
c0016ee4:	83 c4 10             	add    esp,0x10
c0016ee7:	85 c0                	test   eax,eax
c0016ee9:	75 0a                	jne    c0016ef5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x500>
c0016eeb:	b8 7c e3 01 c0       	mov    eax,0xc001e37c
c0016ef0:	e9 ca 00 00 00       	jmp    c0016fbf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ca>
c0016ef5:	50                   	push   eax
c0016ef6:	50                   	push   eax
c0016ef7:	68 21 17 02 c0       	push   0xc0021721
c0016efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f00:	03 06                	add    eax,DWORD PTR [esi]
c0016f02:	50                   	push   eax
c0016f03:	e8 f0 97 fe ff       	call   c00006f8 <strcmp>
c0016f08:	83 c4 10             	add    esp,0x10
c0016f0b:	85 c0                	test   eax,eax
c0016f0d:	75 0a                	jne    c0016f19 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x524>
c0016f0f:	b8 b0 e0 01 c0       	mov    eax,0xc001e0b0
c0016f14:	e9 a6 00 00 00       	jmp    c0016fbf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ca>
c0016f19:	53                   	push   ebx
c0016f1a:	53                   	push   ebx
c0016f1b:	68 2a 17 02 c0       	push   0xc002172a
c0016f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f24:	03 06                	add    eax,DWORD PTR [esi]
c0016f26:	50                   	push   eax
c0016f27:	e8 cc 97 fe ff       	call   c00006f8 <strcmp>
c0016f2c:	83 c4 10             	add    esp,0x10
c0016f2f:	85 c0                	test   eax,eax
c0016f31:	75 0a                	jne    c0016f3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x548>
c0016f33:	b8 7c e4 01 c0       	mov    eax,0xc001e47c
c0016f38:	e9 82 00 00 00       	jmp    c0016fbf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ca>
c0016f3d:	51                   	push   ecx
c0016f3e:	51                   	push   ecx
c0016f3f:	68 34 17 02 c0       	push   0xc0021734
c0016f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f48:	03 06                	add    eax,DWORD PTR [esi]
c0016f4a:	50                   	push   eax
c0016f4b:	e8 a8 97 fe ff       	call   c00006f8 <strcmp>
c0016f50:	83 c4 10             	add    esp,0x10
c0016f53:	85 c0                	test   eax,eax
c0016f55:	74 63                	je     c0016fba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c5>
c0016f57:	50                   	push   eax
c0016f58:	50                   	push   eax
c0016f59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f5d:	03 06                	add    eax,DWORD PTR [esi]
c0016f5f:	50                   	push   eax
c0016f60:	68 3d 17 02 c0       	push   0xc002173d
c0016f65:	e8 7b 7e ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0016f6a:	58                   	pop    eax
c0016f6b:	5a                   	pop    edx
c0016f6c:	68 57 17 02 c0       	push   0xc0021757
c0016f71:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c0016f78:	53                   	push   ebx
c0016f79:	e8 29 97 fe ff       	call   c00006a7 <strcpy>
c0016f7e:	59                   	pop    ecx
c0016f7f:	58                   	pop    eax
c0016f80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f84:	03 06                	add    eax,DWORD PTR [esi]
c0016f86:	50                   	push   eax
c0016f87:	53                   	push   ebx
c0016f88:	e8 d1 97 fe ff       	call   c000075e <strcat>
c0016f8d:	58                   	pop    eax
c0016f8e:	5a                   	pop    edx
c0016f8f:	68 4f 18 02 c0       	push   0xc002184f
c0016f94:	53                   	push   ebx
c0016f95:	e8 c4 97 fe ff       	call   c000075e <strcat>
c0016f9a:	83 c4 10             	add    esp,0x10
c0016f9d:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c0016fa2:	0f 84 b1 01 00 00    	je     c0017159 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x764>
c0016fa8:	83 ec 0c             	sub    esp,0xc
c0016fab:	53                   	push   ebx
c0016fac:	e8 c9 da ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c0016fb1:	83 c4 10             	add    esp,0x10
c0016fb4:	8a 5c 24 2f          	mov    bl,BYTE PTR [esp+0x2f]
c0016fb8:	eb 0b                	jmp    c0016fc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0016fba:	b8 fc e1 01 c0       	mov    eax,0xc001e1fc
c0016fbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fc3:	b3 01                	mov    bl,0x1
c0016fc5:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0016fca:	0f 85 86 00 00 00    	jne    c0017056 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x661>
c0016fd0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016fd4:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0016fdb:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0016fdf:	01 c8                	add    eax,ecx
c0016fe1:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0016fe9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016fed:	0f 94 c2             	sete   dl
c0016ff0:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ff2:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0016ffa:	0f 94 44 24 10       	sete   BYTE PTR [esp+0x10]
c0016fff:	0b 54 24 10          	or     edx,DWORD PTR [esp+0x10]
c0017003:	84 db                	test   bl,bl
c0017005:	74 39                	je     c0017040 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64b>
c0017007:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001700b:	01 c3                	add    ebx,eax
c001700d:	84 d2                	test   dl,dl
c001700f:	74 3a                	je     c001704b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0017011:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c0017016:	0f 84 3d 01 00 00    	je     c0017159 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x764>
c001701c:	50                   	push   eax
c001701d:	50                   	push   eax
c001701e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017022:	03 06                	add    eax,DWORD PTR [esi]
c0017024:	50                   	push   eax
c0017025:	68 4b 17 02 c0       	push   0xc002174b
c001702a:	e8 b6 7d ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001702f:	c7 04 24 6e 17 02 c0 	mov    DWORD PTR [esp],0xc002176e
c0017036:	e8 3f da ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c001703b:	83 c4 10             	add    esp,0x10
c001703e:	eb 0b                	jmp    c001704b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0017040:	8d 1c 01             	lea    ebx,[ecx+eax*1]
c0017043:	84 d2                	test   dl,dl
c0017045:	75 04                	jne    c001704b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0017047:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c001704b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001704f:	89 18                	mov    DWORD PTR [eax],ebx
c0017051:	e9 40 01 00 00       	jmp    c0017196 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7a1>
c0017056:	80 7c 24 10 02       	cmp    BYTE PTR [esp+0x10],0x2
c001705b:	0f 85 ca 00 00 00    	jne    c001712b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0017061:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0017068:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c001706c:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0017070:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0017078:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001707c:	74 0a                	je     c0017088 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x693>
c001707e:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0017086:	75 73                	jne    c00170fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0017088:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c001708d:	0f 84 c6 00 00 00    	je     c0017159 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x764>
c0017093:	50                   	push   eax
c0017094:	50                   	push   eax
c0017095:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017099:	68 8a 17 02 c0       	push   0xc002178a
c001709e:	e8 42 7d ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c00170a3:	58                   	pop    eax
c00170a4:	0f b6 c3             	movzx  eax,bl
c00170a7:	5a                   	pop    edx
c00170a8:	50                   	push   eax
c00170a9:	68 97 17 02 c0       	push   0xc0021797
c00170ae:	e8 32 7d ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c00170b3:	59                   	pop    ecx
c00170b4:	58                   	pop    eax
c00170b5:	ff b4 24 7c 03 00 00 	push   DWORD PTR [esp+0x37c]
c00170bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170c0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00170c4:	ff 30                	push   DWORD PTR [eax]
c00170c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00170ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00170ce:	68 a4 17 02 c0       	push   0xc00217a4
c00170d3:	e8 0d 7d ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c00170d8:	83 c4 18             	add    esp,0x18
c00170db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170df:	03 06                	add    eax,DWORD PTR [esi]
c00170e1:	50                   	push   eax
c00170e2:	68 4b 17 02 c0       	push   0xc002174b
c00170e7:	e8 f9 7c ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c00170ec:	c7 04 24 ec 17 02 c0 	mov    DWORD PTR [esp],0xc00217ec
c00170f3:	e8 82 d9 ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c00170f8:	83 c4 10             	add    esp,0x10
c00170fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170ff:	84 db                	test   bl,bl
c0017101:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017103:	74 14                	je     c0017119 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x724>
c0017105:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017109:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c0017110:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0017114:	8d 04 08             	lea    eax,[eax+ecx*1]
c0017117:	eb 06                	jmp    c001711f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72a>
c0017119:	89 c8                	mov    eax,ecx
c001711b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001711f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017123:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017127:	89 02                	mov    DWORD PTR [edx],eax
c0017129:	eb 6b                	jmp    c0017196 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7a1>
c001712b:	50                   	push   eax
c001712c:	50                   	push   eax
c001712d:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0017132:	50                   	push   eax
c0017133:	68 08 18 02 c0       	push   0xc0021808
c0017138:	e8 a8 7c ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001713d:	83 c4 10             	add    esp,0x10
c0017140:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c0017145:	74 12                	je     c0017159 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x764>
c0017147:	83 ec 0c             	sub    esp,0xc
c001714a:	68 13 18 02 c0       	push   0xc0021813
c001714f:	e8 26 d9 ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c0017154:	83 c4 10             	add    esp,0x10
c0017157:	eb 3d                	jmp    c0017196 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7a1>
c0017159:	83 ec 0c             	sub    esp,0xc
c001715c:	55                   	push   ebp
c001715d:	e8 74 82 ff ff       	call   c000f3d6 <File::close()>
c0017162:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017165:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017168:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001716b:	59                   	pop    ecx
c001716c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017170:	e8 b9 4a ff ff       	call   c000bc2e <free>
c0017175:	5b                   	pop    ebx
c0017176:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001717a:	e8 af 4a ff ff       	call   c000bc2e <free>
c001717f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017182:	e8 a7 4a ff ff       	call   c000bc2e <free>
c0017187:	5e                   	pop    esi
c0017188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001718c:	e8 9d 4a ff ff       	call   c000bc2e <free>
c0017191:	83 c4 10             	add    esp,0x10
c0017194:	eb 21                	jmp    c00171b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7c2>
c0017196:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001719a:	e9 c8 fc ff ff       	jmp    c0016e67 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x472>
c001719f:	83 ec 0c             	sub    esp,0xc
c00171a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00171a6:	e8 83 4a ff ff       	call   c000bc2e <free>
c00171ab:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c00171af:	83 c4 10             	add    esp,0x10
c00171b2:	e9 3d fc ff ff       	jmp    c0016df4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c00171b7:	31 c0                	xor    eax,eax
c00171b9:	eb 33                	jmp    c00171ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7f9>
c00171bb:	83 ec 0c             	sub    esp,0xc
c00171be:	55                   	push   ebp
c00171bf:	e8 12 82 ff ff       	call   c000f3d6 <File::close()>
c00171c4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00171c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00171ca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00171cd:	58                   	pop    eax
c00171ce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00171d2:	e8 57 4a ff ff       	call   c000bc2e <free>
c00171d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00171da:	e8 4f 4a ff ff       	call   c000bc2e <free>
c00171df:	5a                   	pop    edx
c00171e0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00171e4:	e8 45 4a ff ff       	call   c000bc2e <free>
c00171e9:	83 c4 10             	add    esp,0x10
c00171ec:	b0 01                	mov    al,0x1
c00171ee:	81 c4 5c 03 00 00    	add    esp,0x35c
c00171f4:	5b                   	pop    ebx
c00171f5:	5e                   	pop    esi
c00171f6:	5f                   	pop    edi
c00171f7:	5d                   	pop    ebp
c00171f8:	c3                   	ret    

c00171f9 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00171f9:	56                   	push   esi
c00171fa:	31 d2                	xor    edx,edx
c00171fc:	53                   	push   ebx
c00171fd:	8b 1d e0 3d 02 c0    	mov    ebx,DWORD PTR ds:0xc0023de0
c0017203:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017207:	39 d3                	cmp    ebx,edx
c0017209:	7e 1b                	jle    c0017226 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001720b:	8b 04 95 00 40 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc000]
c0017212:	39 c8                	cmp    eax,ecx
c0017214:	77 0d                	ja     c0017223 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017216:	8b 34 95 00 3e 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdc200]
c001721d:	01 c6                	add    esi,eax
c001721f:	39 ce                	cmp    esi,ecx
c0017221:	77 05                	ja     c0017228 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0017223:	42                   	inc    edx
c0017224:	eb e1                	jmp    c0017207 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0017226:	31 c0                	xor    eax,eax
c0017228:	5b                   	pop    ebx
c0017229:	5e                   	pop    esi
c001722a:	c3                   	ret    

c001722b <Thr::getDriverNameFromAddress(unsigned long)>:
c001722b:	53                   	push   ebx
c001722c:	31 c0                	xor    eax,eax
c001722e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017232:	8b 1d e0 3d 02 c0    	mov    ebx,DWORD PTR ds:0xc0023de0
c0017238:	39 c3                	cmp    ebx,eax
c001723a:	7e 22                	jle    c001725e <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001723c:	8b 14 85 00 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc000]
c0017243:	39 ca                	cmp    edx,ecx
c0017245:	77 14                	ja     c001725b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017247:	03 14 85 00 3e 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdc200]
c001724e:	39 ca                	cmp    edx,ecx
c0017250:	76 09                	jbe    c001725b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017252:	8b 04 85 00 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbe00]
c0017259:	eb 05                	jmp    c0017260 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001725b:	40                   	inc    eax
c001725c:	eb da                	jmp    c0017238 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001725e:	31 c0                	xor    eax,eax
c0017260:	5b                   	pop    ebx
c0017261:	c3                   	ret    

c0017262 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017262:	53                   	push   ebx
c0017263:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017267:	53                   	push   ebx
c0017268:	e8 8c ff ff ff       	call   c00171f9 <Thr::getDriverBaseFromAddress(unsigned long)>
c001726d:	5a                   	pop    edx
c001726e:	31 d2                	xor    edx,edx
c0017270:	85 c0                	test   eax,eax
c0017272:	74 04                	je     c0017278 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0017274:	89 da                	mov    edx,ebx
c0017276:	29 c2                	sub    edx,eax
c0017278:	89 d0                	mov    eax,edx
c001727a:	5b                   	pop    ebx
c001727b:	c3                   	ret    

c001727c <Thr::loadDLL(char const*, bool)>:
c001727c:	55                   	push   ebp
c001727d:	57                   	push   edi
c001727e:	56                   	push   esi
c001727f:	53                   	push   ebx
c0017280:	81 ec 24 01 00 00    	sub    esp,0x124
c0017286:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c001728d:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017294:	56                   	push   esi
c0017295:	68 2b 18 02 c0       	push   0xc002182b
c001729a:	e8 46 7b ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001729f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00172a6:	e8 4b 7a ff ff       	call   c000ecf6 <operator new(unsigned long)>
c00172ab:	83 c4 0c             	add    esp,0xc
c00172ae:	89 c3                	mov    ebx,eax
c00172b0:	ff 35 d4 45 02 c0    	push   DWORD PTR ds:0xc00245d4
c00172b6:	56                   	push   esi
c00172b7:	50                   	push   eax
c00172b8:	e8 57 80 ff ff       	call   c000f314 <File::File(char const*, Process*)>
c00172bd:	83 c4 0c             	add    esp,0xc
c00172c0:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00172c4:	50                   	push   eax
c00172c5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00172c9:	50                   	push   eax
c00172ca:	53                   	push   ebx
c00172cb:	e8 54 83 ff ff       	call   c000f624 <File::stat(unsigned long long*, bool*)>
c00172d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00172d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00172d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00172d8:	83 c4 10             	add    esp,0x10
c00172db:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00172e0:	75 0a                	jne    c00172ec <Thr::loadDLL(char const*, bool)+0x70>
c00172e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00172e6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00172ea:	75 3e                	jne    c001732a <Thr::loadDLL(char const*, bool)+0xae>
c00172ec:	89 f8                	mov    eax,edi
c00172ee:	31 db                	xor    ebx,ebx
c00172f0:	84 c0                	test   al,al
c00172f2:	0f 84 ca 00 00 00    	je     c00173c2 <Thr::loadDLL(char const*, bool)+0x146>
c00172f8:	50                   	push   eax
c00172f9:	50                   	push   eax
c00172fa:	68 3c 18 02 c0       	push   0xc002183c
c00172ff:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0017303:	53                   	push   ebx
c0017304:	e8 9e 93 fe ff       	call   c00006a7 <strcpy>
c0017309:	58                   	pop    eax
c001730a:	5a                   	pop    edx
c001730b:	56                   	push   esi
c001730c:	53                   	push   ebx
c001730d:	e8 4c 94 fe ff       	call   c000075e <strcat>
c0017312:	59                   	pop    ecx
c0017313:	5d                   	pop    ebp
c0017314:	68 4f 18 02 c0       	push   0xc002184f
c0017319:	53                   	push   ebx
c001731a:	e8 3f 94 fe ff       	call   c000075e <strcat>
c001731f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017322:	e8 53 d7 ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c0017327:	83 c4 10             	add    esp,0x10
c001732a:	83 ec 0c             	sub    esp,0xc
c001732d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017331:	e8 e8 48 ff ff       	call   c000bc1e <malloc>
c0017336:	89 34 24             	mov    DWORD PTR [esp],esi
c0017339:	89 c3                	mov    ebx,eax
c001733b:	e8 e5 92 fe ff       	call   c0000625 <strlen>
c0017340:	8b 2d e0 3d 02 c0    	mov    ebp,DWORD PTR ds:0xc0023de0
c0017346:	40                   	inc    eax
c0017347:	89 04 24             	mov    DWORD PTR [esp],eax
c001734a:	e8 cf 48 ff ff       	call   c000bc1e <malloc>
c001734f:	89 04 ad 00 42 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdbe00],eax
c0017356:	58                   	pop    eax
c0017357:	a1 e0 3d 02 c0       	mov    eax,ds:0xc0023de0
c001735c:	5a                   	pop    edx
c001735d:	56                   	push   esi
c001735e:	ff 34 85 00 42 02 c0 	push   DWORD PTR [eax*4-0x3ffdbe00]
c0017365:	e8 3d 93 fe ff       	call   c00006a7 <strcpy>
c001736a:	a1 e0 3d 02 c0       	mov    eax,ds:0xc0023de0
c001736f:	8d 50 01             	lea    edx,[eax+0x1]
c0017372:	89 1c 85 00 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc000],ebx
c0017379:	89 15 e0 3d 02 c0    	mov    DWORD PTR ds:0xc0023de0,edx
c001737f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017383:	59                   	pop    ecx
c0017384:	89 14 85 00 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc200],edx
c001738b:	5d                   	pop    ebp
c001738c:	53                   	push   ebx
c001738d:	68 51 18 02 c0       	push   0xc0021851
c0017392:	e8 4e 7a ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0017397:	83 c4 0c             	add    esp,0xc
c001739a:	6a 01                	push   0x1
c001739c:	53                   	push   ebx
c001739d:	56                   	push   esi
c001739e:	e8 52 f6 ff ff       	call   c00169f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00173a3:	83 c4 10             	add    esp,0x10
c00173a6:	84 c0                	test   al,al
c00173a8:	75 18                	jne    c00173c2 <Thr::loadDLL(char const*, bool)+0x146>
c00173aa:	31 db                	xor    ebx,ebx
c00173ac:	89 f8                	mov    eax,edi
c00173ae:	84 c0                	test   al,al
c00173b0:	74 10                	je     c00173c2 <Thr::loadDLL(char const*, bool)+0x146>
c00173b2:	83 ec 0c             	sub    esp,0xc
c00173b5:	68 70 18 02 c0       	push   0xc0021870
c00173ba:	e8 bb d6 ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c00173bf:	83 c4 10             	add    esp,0x10
c00173c2:	81 c4 1c 01 00 00    	add    esp,0x11c
c00173c8:	89 d8                	mov    eax,ebx
c00173ca:	5b                   	pop    ebx
c00173cb:	5e                   	pop    esi
c00173cc:	5f                   	pop    edi
c00173cd:	5d                   	pop    ebp
c00173ce:	c3                   	ret    

c00173cf <Thr::executeDLL(unsigned long, void*)>:
c00173cf:	56                   	push   esi
c00173d0:	53                   	push   ebx
c00173d1:	51                   	push   ecx
c00173d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00173d6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00173da:	85 db                	test   ebx,ebx
c00173dc:	75 10                	jne    c00173ee <Thr::executeDLL(unsigned long, void*)+0x1f>
c00173de:	83 ec 0c             	sub    esp,0xc
c00173e1:	68 8f 18 02 c0       	push   0xc002188f
c00173e6:	e8 8f d6 ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c00173eb:	83 c4 10             	add    esp,0x10
c00173ee:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00173f2:	89 d8                	mov    eax,ebx
c00173f4:	5a                   	pop    edx
c00173f5:	5b                   	pop    ebx
c00173f6:	5e                   	pop    esi
c00173f7:	ff e0                	jmp    eax
c00173f9:	90                   	nop

c00173fa <changeTSS>:
c00173fa:	83 ec 0c             	sub    esp,0xc
c00173fd:	e8 72 c9 ff ff       	call   c0013d74 <thisCPU()>
c0017402:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017408:	83 ec 08             	sub    esp,0x8
c001740b:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001740e:	05 7c 11 00 00       	add    eax,0x117c
c0017413:	c1 e1 15             	shl    ecx,0x15
c0017416:	ba 00 00 e8 01       	mov    edx,0x1e80000
c001741b:	29 ca                	sub    edx,ecx
c001741d:	52                   	push   edx
c001741e:	50                   	push   eax
c001741f:	e8 36 62 ff ff       	call   c000d65a <TSS::setESP(unsigned long)>
c0017424:	83 c4 1c             	add    esp,0x1c
c0017427:	c3                   	ret    

c0017428 <Process::addArgs(char**)>:
c0017428:	57                   	push   edi
c0017429:	56                   	push   esi
c001742a:	53                   	push   ebx
c001742b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001742f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017433:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001743d:	85 ff                	test   edi,edi
c001743f:	74 3d                	je     c001747e <Process::addArgs(char**)+0x56>
c0017441:	8b 07                	mov    eax,DWORD PTR [edi]
c0017443:	85 c0                	test   eax,eax
c0017445:	74 37                	je     c001747e <Process::addArgs(char**)+0x56>
c0017447:	31 db                	xor    ebx,ebx
c0017449:	83 ec 0c             	sub    esp,0xc
c001744c:	50                   	push   eax
c001744d:	e8 d3 91 fe ff       	call   c0000625 <strlen>
c0017452:	40                   	inc    eax
c0017453:	89 04 24             	mov    DWORD PTR [esp],eax
c0017456:	e8 c3 47 ff ff       	call   c000bc1e <malloc>
c001745b:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c0017462:	5a                   	pop    edx
c0017463:	59                   	pop    ecx
c0017464:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0017467:	43                   	inc    ebx
c0017468:	50                   	push   eax
c0017469:	e8 39 92 fe ff       	call   c00006a7 <strcpy>
c001746e:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c0017474:	83 c4 10             	add    esp,0x10
c0017477:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001747a:	85 c0                	test   eax,eax
c001747c:	75 cb                	jne    c0017449 <Process::addArgs(char**)+0x21>
c001747e:	5b                   	pop    ebx
c001747f:	5e                   	pop    esi
c0017480:	5f                   	pop    edi
c0017481:	c3                   	ret    

c0017482 <Process::Process(char const*, Process*, char**)>:
c0017482:	56                   	push   esi
c0017483:	53                   	push   ebx
c0017484:	83 ec 14             	sub    esp,0x14
c0017487:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001748b:	05 0c 02 00 00       	add    eax,0x20c
c0017490:	bb 07 00 00 00       	mov    ebx,0x7
c0017495:	89 c6                	mov    esi,eax
c0017497:	85 db                	test   ebx,ebx
c0017499:	78 12                	js     c00174ad <Process::Process(char const*, Process*, char**)+0x2b>
c001749b:	83 ec 0c             	sub    esp,0xc
c001749e:	56                   	push   esi
c001749f:	e8 26 78 00 00       	call   c001ecca <ThreadControlBlock::ThreadControlBlock()>
c00174a4:	83 c4 10             	add    esp,0x10
c00174a7:	83 c6 63             	add    esi,0x63
c00174aa:	4b                   	dec    ebx
c00174ab:	eb ea                	jmp    c0017497 <Process::Process(char const*, Process*, char**)+0x15>
c00174ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174b1:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00174b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174bc:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00174c5:	a1 24 2c 02 c0       	mov    eax,ds:0xc0022c24
c00174ca:	8d 50 01             	lea    edx,[eax+0x1]
c00174cd:	89 15 24 2c 02 c0    	mov    DWORD PTR ds:0xc0022c24,edx
c00174d3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00174d7:	89 02                	mov    DWORD PTR [edx],eax
c00174d9:	83 ec 0c             	sub    esp,0xc
c00174dc:	6a 10                	push   0x10
c00174de:	e8 13 78 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c00174e3:	83 c4 10             	add    esp,0x10
c00174e6:	89 c3                	mov    ebx,eax
c00174e8:	83 ec 08             	sub    esp,0x8
c00174eb:	6a 00                	push   0x0
c00174ed:	53                   	push   ebx
c00174ee:	e8 97 74 ff ff       	call   c000e98a <VAS::VAS(bool)>
c00174f3:	83 c4 10             	add    esp,0x10
c00174f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174fa:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0017500:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017504:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001750e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017512:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017516:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001751c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017520:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017526:	85 c0                	test   eax,eax
c0017528:	74 42                	je     c001756c <Process::Process(char const*, Process*, char**)+0xea>
c001752a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001752e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017534:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001753a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001753e:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0017544:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017548:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001754e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017554:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017558:	05 0c 01 00 00       	add    eax,0x10c
c001755d:	83 ec 08             	sub    esp,0x8
c0017560:	52                   	push   edx
c0017561:	50                   	push   eax
c0017562:	e8 40 91 fe ff       	call   c00006a7 <strcpy>
c0017567:	83 c4 10             	add    esp,0x10
c001756a:	eb 5c                	jmp    c00175c8 <Process::Process(char const*, Process*, char**)+0x146>
c001756c:	83 ec 0c             	sub    esp,0xc
c001756f:	68 60 12 00 00       	push   0x1260
c0017574:	e8 7d 77 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c0017579:	83 c4 10             	add    esp,0x10
c001757c:	89 c3                	mov    ebx,eax
c001757e:	83 ec 08             	sub    esp,0x8
c0017581:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017585:	53                   	push   ebx
c0017586:	e8 cd 5d ff ff       	call   c000d358 <VgaText::VgaText(char const*)>
c001758b:	83 c4 10             	add    esp,0x10
c001758e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017592:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c0017598:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001759c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00175a2:	83 ec 0c             	sub    esp,0xc
c00175a5:	50                   	push   eax
c00175a6:	e8 ae 51 ff ff       	call   c000c759 <addToTerminalCycle(VgaText*)>
c00175ab:	83 c4 10             	add    esp,0x10
c00175ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175b2:	05 0c 01 00 00       	add    eax,0x10c
c00175b7:	83 ec 08             	sub    esp,0x8
c00175ba:	68 b9 18 02 c0       	push   0xc00218b9
c00175bf:	50                   	push   eax
c00175c0:	e8 e2 90 fe ff       	call   c00006a7 <strcpy>
c00175c5:	83 c4 10             	add    esp,0x10
c00175c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175cc:	83 c0 0c             	add    eax,0xc
c00175cf:	83 ec 08             	sub    esp,0x8
c00175d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175d6:	50                   	push   eax
c00175d7:	e8 cb 90 fe ff       	call   c00006a7 <strcpy>
c00175dc:	83 c4 10             	add    esp,0x10
c00175df:	83 ec 08             	sub    esp,0x8
c00175e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00175e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175ea:	e8 39 fe ff ff       	call   c0017428 <Process::addArgs(char**)>
c00175ef:	83 c4 10             	add    esp,0x10
c00175f2:	83 ec 08             	sub    esp,0x8
c00175f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175fd:	e8 ba ee ff ff       	call   c00164bc <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017602:	83 c4 10             	add    esp,0x10
c0017605:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017609:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001760d:	83 f0 01             	xor    eax,0x1
c0017610:	88 c2                	mov    dl,al
c0017612:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017616:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001761c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017621:	83 ec 08             	sub    esp,0x8
c0017624:	50                   	push   eax
c0017625:	68 b8 19 02 c0       	push   0xc00219b8
c001762a:	e8 b6 77 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001762f:	83 c4 10             	add    esp,0x10
c0017632:	90                   	nop
c0017633:	83 c4 14             	add    esp,0x14
c0017636:	5b                   	pop    ebx
c0017637:	5e                   	pop    esi
c0017638:	c3                   	ret    
c0017639:	90                   	nop

c001763a <Process::Process(bool, char const*, Process*, char**)>:
c001763a:	56                   	push   esi
c001763b:	53                   	push   ebx
c001763c:	83 ec 14             	sub    esp,0x14
c001763f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017643:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017647:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001764b:	05 0c 02 00 00       	add    eax,0x20c
c0017650:	bb 07 00 00 00       	mov    ebx,0x7
c0017655:	89 c6                	mov    esi,eax
c0017657:	85 db                	test   ebx,ebx
c0017659:	78 12                	js     c001766d <Process::Process(bool, char const*, Process*, char**)+0x33>
c001765b:	83 ec 0c             	sub    esp,0xc
c001765e:	56                   	push   esi
c001765f:	e8 66 76 00 00       	call   c001ecca <ThreadControlBlock::ThreadControlBlock()>
c0017664:	83 c4 10             	add    esp,0x10
c0017667:	83 c6 63             	add    esi,0x63
c001766a:	4b                   	dec    ebx
c001766b:	eb ea                	jmp    c0017657 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001766d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017671:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c0017678:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001767c:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0017685:	a1 24 2c 02 c0       	mov    eax,ds:0xc0022c24
c001768a:	8d 50 01             	lea    edx,[eax+0x1]
c001768d:	89 15 24 2c 02 c0    	mov    DWORD PTR ds:0xc0022c24,edx
c0017693:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017697:	89 02                	mov    DWORD PTR [edx],eax
c0017699:	83 ec 0c             	sub    esp,0xc
c001769c:	6a 10                	push   0x10
c001769e:	e8 53 76 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c00176a3:	83 c4 10             	add    esp,0x10
c00176a6:	89 c3                	mov    ebx,eax
c00176a8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00176ad:	83 ec 08             	sub    esp,0x8
c00176b0:	50                   	push   eax
c00176b1:	53                   	push   ebx
c00176b2:	e8 d3 72 ff ff       	call   c000e98a <VAS::VAS(bool)>
c00176b7:	83 c4 10             	add    esp,0x10
c00176ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176be:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c00176c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176c8:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c00176d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176d6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00176da:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c00176e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176e4:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00176ea:	85 c0                	test   eax,eax
c00176ec:	74 42                	je     c0017730 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c00176ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176f2:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00176f8:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c00176fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017702:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0017708:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001770c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017712:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017718:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001771c:	05 0c 01 00 00       	add    eax,0x10c
c0017721:	83 ec 08             	sub    esp,0x8
c0017724:	52                   	push   edx
c0017725:	50                   	push   eax
c0017726:	e8 7c 8f fe ff       	call   c00006a7 <strcpy>
c001772b:	83 c4 10             	add    esp,0x10
c001772e:	eb 5c                	jmp    c001778c <Process::Process(bool, char const*, Process*, char**)+0x152>
c0017730:	83 ec 0c             	sub    esp,0xc
c0017733:	68 60 12 00 00       	push   0x1260
c0017738:	e8 b9 75 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c001773d:	83 c4 10             	add    esp,0x10
c0017740:	89 c3                	mov    ebx,eax
c0017742:	83 ec 08             	sub    esp,0x8
c0017745:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017749:	53                   	push   ebx
c001774a:	e8 09 5c ff ff       	call   c000d358 <VgaText::VgaText(char const*)>
c001774f:	83 c4 10             	add    esp,0x10
c0017752:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017756:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001775c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017760:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0017766:	83 ec 0c             	sub    esp,0xc
c0017769:	50                   	push   eax
c001776a:	e8 ea 4f ff ff       	call   c000c759 <addToTerminalCycle(VgaText*)>
c001776f:	83 c4 10             	add    esp,0x10
c0017772:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017776:	05 0c 01 00 00       	add    eax,0x10c
c001777b:	83 ec 08             	sub    esp,0x8
c001777e:	68 b9 18 02 c0       	push   0xc00218b9
c0017783:	50                   	push   eax
c0017784:	e8 1e 8f fe ff       	call   c00006a7 <strcpy>
c0017789:	83 c4 10             	add    esp,0x10
c001778c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017790:	83 c0 0c             	add    eax,0xc
c0017793:	83 ec 08             	sub    esp,0x8
c0017796:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001779a:	50                   	push   eax
c001779b:	e8 07 8f fe ff       	call   c00006a7 <strcpy>
c00177a0:	83 c4 10             	add    esp,0x10
c00177a3:	83 ec 08             	sub    esp,0x8
c00177a6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00177aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00177ae:	e8 75 fc ff ff       	call   c0017428 <Process::addArgs(char**)>
c00177b3:	83 c4 10             	add    esp,0x10
c00177b6:	90                   	nop
c00177b7:	83 c4 14             	add    esp,0x14
c00177ba:	5b                   	pop    ebx
c00177bb:	5e                   	pop    esi
c00177bc:	c3                   	ret    

c00177bd <disableIRQs()>:
c00177bd:	fa                   	cli    
c00177be:	ff 05 ac 45 02 c0    	inc    DWORD PTR ds:0xc00245ac
c00177c4:	c3                   	ret    

c00177c5 <getIRQNestingLevel()>:
c00177c5:	a1 ac 45 02 c0       	mov    eax,ds:0xc00245ac
c00177ca:	c3                   	ret    

c00177cb <enableIRQs()>:
c00177cb:	a1 ac 45 02 c0       	mov    eax,ds:0xc00245ac
c00177d0:	48                   	dec    eax
c00177d1:	a3 ac 45 02 c0       	mov    ds:0xc00245ac,eax
c00177d6:	75 01                	jne    c00177d9 <enableIRQs()+0xe>
c00177d8:	fb                   	sti    
c00177d9:	c3                   	ret    

c00177da <lockScheduler()>:
c00177da:	eb e1                	jmp    c00177bd <disableIRQs()>

c00177dc <unlockScheduler()>:
c00177dc:	eb ed                	jmp    c00177cb <enableIRQs()>

c00177de <userModeEntryPoint(void*)>:
c00177de:	83 ec 0c             	sub    esp,0xc
c00177e1:	e8 f6 ff ff ff       	call   c00177dc <unlockScheduler()>
c00177e6:	fb                   	sti    
c00177e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00177ec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00177ef:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c00177f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00177f9:	83 c4 0c             	add    esp,0xc
c00177fc:	e9 e5 89 fe ff       	jmp    c00001e6 <goToUsermode>

c0017801 <lockStuff()>:
c0017801:	e8 b7 ff ff ff       	call   c00177bd <disableIRQs()>
c0017806:	ff 05 a8 45 02 c0    	inc    DWORD PTR ds:0xc00245a8
c001780c:	c3                   	ret    

c001780d <taskStartupFunction>:
c001780d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017812:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0017815:	c3                   	ret    

c0017816 <updateTimeUsed()>:
c0017816:	57                   	push   edi
c0017817:	56                   	push   esi
c0017818:	53                   	push   ebx
c0017819:	e8 56 c5 ff ff       	call   c0013d74 <thisCPU()>
c001781e:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017825:	74 49                	je     c0017870 <updateTimeUsed()+0x5a>
c0017827:	0f 31                	rdtsc  
c0017829:	89 c1                	mov    ecx,eax
c001782b:	a3 e8 45 02 c0       	mov    ds:0xc00245e8,eax
c0017830:	2b 0d d8 45 02 c0    	sub    ecx,DWORD PTR ds:0xc00245d8
c0017836:	89 d3                	mov    ebx,edx
c0017838:	89 0d e0 45 02 c0    	mov    DWORD PTR ds:0xc00245e0,ecx
c001783e:	1b 1d dc 45 02 c0    	sbb    ebx,DWORD PTR ds:0xc00245dc
c0017844:	a3 d8 45 02 c0       	mov    ds:0xc00245d8,eax
c0017849:	89 1d e4 45 02 c0    	mov    DWORD PTR ds:0xc00245e4,ebx
c001784f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017854:	89 15 ec 45 02 c0    	mov    DWORD PTR ds:0xc00245ec,edx
c001785a:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001785d:	89 15 dc 45 02 c0    	mov    DWORD PTR ds:0xc00245dc,edx
c0017863:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0017866:	01 f1                	add    ecx,esi
c0017868:	11 fb                	adc    ebx,edi
c001786a:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001786d:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0017870:	5b                   	pop    ebx
c0017871:	5e                   	pop    esi
c0017872:	5f                   	pop    edi
c0017873:	c3                   	ret    

c0017874 <switchToThread(ThreadControlBlock*)>:
c0017874:	53                   	push   ebx
c0017875:	83 ec 08             	sub    esp,0x8
c0017878:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c001787d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017881:	85 c0                	test   eax,eax
c0017883:	75 30                	jne    c00178b5 <switchToThread(ThreadControlBlock*)+0x41>
c0017885:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c0017888:	3c ff                	cmp    al,0xff
c001788a:	74 25                	je     c00178b1 <switchToThread(ThreadControlBlock*)+0x3d>
c001788c:	0f b6 d0             	movzx  edx,al
c001788f:	b8 84 03 00 00       	mov    eax,0x384
c0017894:	29 d0                	sub    eax,edx
c0017896:	c1 e0 10             	shl    eax,0x10
c0017899:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001789c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001789f:	e8 72 ff ff ff       	call   c0017816 <updateTimeUsed()>
c00178a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00178a8:	83 c4 08             	add    esp,0x8
c00178ab:	5b                   	pop    ebx
c00178ac:	e9 6e 89 fe ff       	jmp    c000021f <switchToThreadASM>
c00178b1:	31 c0                	xor    eax,eax
c00178b3:	eb e7                	jmp    c001789c <switchToThread(ThreadControlBlock*)+0x28>
c00178b5:	c7 05 a4 45 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00245a4,0x1
c00178bf:	83 c4 08             	add    esp,0x8
c00178c2:	5b                   	pop    ebx
c00178c3:	c3                   	ret    

c00178c4 <Semaphore::Semaphore(int)>:
c00178c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00178cc:	89 10                	mov    DWORD PTR [eax],edx
c00178ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178d2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00178d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178dd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00178e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178e8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00178ef:	90                   	nop
c00178f0:	c3                   	ret    
c00178f1:	90                   	nop

c00178f2 <Mutex::Mutex()>:
c00178f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178f6:	6a 01                	push   0x1
c00178f8:	50                   	push   eax
c00178f9:	e8 c6 ff ff ff       	call   c00178c4 <Semaphore::Semaphore(int)>
c00178fe:	83 c4 08             	add    esp,0x8
c0017901:	90                   	nop
c0017902:	c3                   	ret    
c0017903:	90                   	nop

c0017904 <Process::createThread(void (*)(void*), void*, int)>:
c0017904:	55                   	push   ebp
c0017905:	31 c9                	xor    ecx,ecx
c0017907:	57                   	push   edi
c0017908:	56                   	push   esi
c0017909:	53                   	push   ebx
c001790a:	83 ec 1c             	sub    esp,0x1c
c001790d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017911:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0017918:	89 f2                	mov    edx,esi
c001791a:	0f b7 c2             	movzx  eax,dx
c001791d:	83 e2 01             	and    edx,0x1
c0017920:	74 14                	je     c0017936 <Process::createThread(void (*)(void*), void*, int)+0x32>
c0017922:	d1 f8                	sar    eax,1
c0017924:	41                   	inc    ecx
c0017925:	89 c2                	mov    edx,eax
c0017927:	83 f9 10             	cmp    ecx,0x10
c001792a:	75 ee                	jne    c001791a <Process::createThread(void (*)(void*), void*, int)+0x16>
c001792c:	83 c4 1c             	add    esp,0x1c
c001792f:	31 c0                	xor    eax,eax
c0017931:	5b                   	pop    ebx
c0017932:	5e                   	pop    esi
c0017933:	5f                   	pop    edi
c0017934:	5d                   	pop    ebp
c0017935:	c3                   	ret    
c0017936:	83 ec 08             	sub    esp,0x8
c0017939:	b8 01 00 00 00       	mov    eax,0x1
c001793e:	d3 e0                	shl    eax,cl
c0017940:	09 c6                	or     esi,eax
c0017942:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0017948:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001794f:	8d 34 09             	lea    esi,[ecx+ecx*1]
c0017952:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0017955:	01 ce                	add    esi,ecx
c0017957:	89 f0                	mov    eax,esi
c0017959:	c1 e0 05             	shl    eax,0x5
c001795c:	01 c6                	add    esi,eax
c001795e:	8d 04 33             	lea    eax,[ebx+esi*1]
c0017961:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0017967:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001796d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017971:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0017977:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001797d:	89 ca                	mov    edx,ecx
c001797f:	f7 da                	neg    edx
c0017981:	c1 e2 15             	shl    edx,0x15
c0017984:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001798a:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017990:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017994:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001799e:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c00179a4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00179a8:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00179ae:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00179b8:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00179c2:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c00179c9:	50                   	push   eax
c00179ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00179ce:	68 c8 45 02 c0       	push   0xc00245c8
c00179d3:	e8 4a 71 00 00       	call   c001eb22 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00179d8:	83 c4 10             	add    esp,0x10
c00179db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179df:	83 c4 1c             	add    esp,0x1c
c00179e2:	5b                   	pop    ebx
c00179e3:	5e                   	pop    esi
c00179e4:	5f                   	pop    edi
c00179e5:	5d                   	pop    ebp
c00179e6:	c3                   	ret    
c00179e7:	90                   	nop

c00179e8 <Process::createUserThread()>:
c00179e8:	83 ec 0c             	sub    esp,0xc
c00179eb:	68 80 00 00 00       	push   0x80
c00179f0:	6a 00                	push   0x0
c00179f2:	68 de 77 01 c0       	push   0xc00177de
c00179f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179fb:	e8 04 ff ff ff       	call   c0017904 <Process::createThread(void (*)(void*), void*, int)>
c0017a00:	83 c4 1c             	add    esp,0x1c
c0017a03:	c3                   	ret    

c0017a04 <setupMultitasking(void (*)())>:
c0017a04:	56                   	push   esi
c0017a05:	53                   	push   ebx
c0017a06:	53                   	push   ebx
c0017a07:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017a0b:	eb 10                	jmp    c0017a1d <setupMultitasking(void (*)())+0x19>
c0017a0d:	83 ec 0c             	sub    esp,0xc
c0017a10:	68 c8 45 02 c0       	push   0xc00245c8
c0017a15:	e8 5a 70 00 00       	call   c001ea74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017a1a:	83 c4 10             	add    esp,0x10
c0017a1d:	83 ec 0c             	sub    esp,0xc
c0017a20:	68 c8 45 02 c0       	push   0xc00245c8
c0017a25:	e8 2e 70 00 00       	call   c001ea58 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017a2a:	83 c4 10             	add    esp,0x10
c0017a2d:	84 c0                	test   al,al
c0017a2f:	74 dc                	je     c0017a0d <setupMultitasking(void (*)())+0x9>
c0017a31:	83 ec 0c             	sub    esp,0xc
c0017a34:	68 3b 07 00 00       	push   0x73b
c0017a39:	e8 b8 72 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c0017a3e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017a45:	89 c3                	mov    ebx,eax
c0017a47:	6a 00                	push   0x0
c0017a49:	68 bd 18 02 c0       	push   0xc00218bd
c0017a4e:	6a 01                	push   0x1
c0017a50:	50                   	push   eax
c0017a51:	e8 e4 fb ff ff       	call   c001763a <Process::Process(bool, char const*, Process*, char**)>
c0017a56:	83 c4 18             	add    esp,0x18
c0017a59:	89 1d d4 45 02 c0    	mov    DWORD PTR ds:0xc00245d4,ebx
c0017a5f:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0017a65:	68 e0 19 02 c0       	push   0xc00219e0
c0017a6a:	e8 76 73 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0017a6f:	58                   	pop    eax
c0017a70:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0017a76:	e8 52 54 ff ff       	call   c000cecd <setActiveTerminal(VgaText*)>
c0017a7b:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c0017a83:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0017a89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017a8c:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0017a96:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017a9c:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0017aa2:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017aac:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0017ab6:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017ac0:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017ac6:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017acc:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017ad6:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017adc:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017ae6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017aec:	5a                   	pop    edx
c0017aed:	59                   	pop    ecx
c0017aee:	68 b9 18 02 c0       	push   0xc00218b9
c0017af3:	50                   	push   eax
c0017af4:	e8 ae 8b fe ff       	call   c00006a7 <strcpy>
c0017af9:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0017b00:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017b04:	83 c4 14             	add    esp,0x14
c0017b07:	5b                   	pop    ebx
c0017b08:	5e                   	pop    esi
c0017b09:	e9 03 87 fe ff       	jmp    c0000211 <switchToThreadASMFirstTime>

c0017b0e <schedule()>:
c0017b0e:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c0017b13:	85 c0                	test   eax,eax
c0017b15:	74 0b                	je     c0017b22 <schedule()+0x14>
c0017b17:	c7 05 a4 45 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00245a4,0x1
c0017b21:	c3                   	ret    
c0017b22:	53                   	push   ebx
c0017b23:	83 ec 14             	sub    esp,0x14
c0017b26:	68 c8 45 02 c0       	push   0xc00245c8
c0017b2b:	e8 28 6f 00 00       	call   c001ea58 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017b30:	83 c4 10             	add    esp,0x10
c0017b33:	84 c0                	test   al,al
c0017b35:	75 38                	jne    c0017b6f <schedule()+0x61>
c0017b37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b3c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017b3f:	4a                   	dec    edx
c0017b40:	74 32                	je     c0017b74 <schedule()+0x66>
c0017b42:	83 ec 0c             	sub    esp,0xc
c0017b45:	68 c8 45 02 c0       	push   0xc00245c8
c0017b4a:	e8 01 6f 00 00       	call   c001ea50 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017b4f:	c7 04 24 c8 45 02 c0 	mov    DWORD PTR [esp],0xc00245c8
c0017b56:	89 c3                	mov    ebx,eax
c0017b58:	e8 17 6f 00 00       	call   c001ea74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017b5d:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017b64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017b67:	e8 08 fd ff ff       	call   c0017874 <switchToThread(ThreadControlBlock*)>
c0017b6c:	83 c4 10             	add    esp,0x10
c0017b6f:	83 c4 08             	add    esp,0x8
c0017b72:	5b                   	pop    ebx
c0017b73:	c3                   	ret    
c0017b74:	83 ec 08             	sub    esp,0x8
c0017b77:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017b7e:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017b84:	68 c8 45 02 c0       	push   0xc00245c8
c0017b89:	e8 94 6f 00 00       	call   c001eb22 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017b8e:	83 c4 10             	add    esp,0x10
c0017b91:	eb af                	jmp    c0017b42 <schedule()+0x34>

c0017b93 <unlockStuff()>:
c0017b93:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c0017b98:	48                   	dec    eax
c0017b99:	a3 a8 45 02 c0       	mov    ds:0xc00245a8,eax
c0017b9e:	75 09                	jne    c0017ba9 <unlockStuff()+0x16>
c0017ba0:	a1 a4 45 02 c0       	mov    eax,ds:0xc00245a4
c0017ba5:	85 c0                	test   eax,eax
c0017ba7:	75 05                	jne    c0017bae <unlockStuff()+0x1b>
c0017ba9:	e9 1d fc ff ff       	jmp    c00177cb <enableIRQs()>
c0017bae:	83 ec 0c             	sub    esp,0xc
c0017bb1:	c7 05 a4 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00245a4,0x0
c0017bbb:	e8 4e ff ff ff       	call   c0017b0e <schedule()>
c0017bc0:	83 c4 0c             	add    esp,0xc
c0017bc3:	e9 03 fc ff ff       	jmp    c00177cb <enableIRQs()>

c0017bc8 <forkProcess(regs*)>:
c0017bc8:	56                   	push   esi
c0017bc9:	53                   	push   ebx
c0017bca:	50                   	push   eax
c0017bcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017bd0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017bd3:	66 83 b8 24 05 00 00 01 	cmp    WORD PTR [eax+0x524],0x1
c0017bdb:	0f 85 3e 01 00 00    	jne    c0017d1f <forkProcess(regs*)+0x157>
c0017be1:	e8 1b fc ff ff       	call   c0017801 <lockStuff()>
c0017be6:	83 ec 0c             	sub    esp,0xc
c0017be9:	68 3b 07 00 00       	push   0x73b
c0017bee:	e8 03 71 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c0017bf3:	89 c3                	mov    ebx,eax
c0017bf5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017bfa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017bfd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017c04:	50                   	push   eax
c0017c05:	83 c0 0c             	add    eax,0xc
c0017c08:	50                   	push   eax
c0017c09:	6a 00                	push   0x0
c0017c0b:	53                   	push   ebx
c0017c0c:	e8 29 fa ff ff       	call   c001763a <Process::Process(bool, char const*, Process*, char**)>
c0017c11:	8b b3 32 05 00 00    	mov    esi,DWORD PTR [ebx+0x532]
c0017c17:	83 c4 20             	add    esp,0x20
c0017c1a:	85 f6                	test   esi,esi
c0017c1c:	74 16                	je     c0017c34 <forkProcess(regs*)+0x6c>
c0017c1e:	83 ec 0c             	sub    esp,0xc
c0017c21:	56                   	push   esi
c0017c22:	e8 09 64 ff ff       	call   c000e030 <VAS::~VAS()>
c0017c27:	59                   	pop    ecx
c0017c28:	58                   	pop    eax
c0017c29:	6a 10                	push   0x10
c0017c2b:	56                   	push   esi
c0017c2c:	e8 d4 70 ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c0017c31:	83 c4 10             	add    esp,0x10
c0017c34:	83 ec 0c             	sub    esp,0xc
c0017c37:	66 c7 83 24 05 00 00 01 00 	mov    WORD PTR [ebx+0x524],0x1
c0017c40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c45:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017c48:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0017c4e:	89 83 2e 05 00 00    	mov    DWORD PTR [ebx+0x52e],eax
c0017c54:	6a 10                	push   0x10
c0017c56:	e8 9b 70 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c0017c5b:	59                   	pop    ecx
c0017c5c:	89 c6                	mov    esi,eax
c0017c5e:	58                   	pop    eax
c0017c5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c64:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017c67:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017c6d:	56                   	push   esi
c0017c6e:	e8 df 68 ff ff       	call   c000e552 <VAS::VAS(VAS*)>
c0017c73:	89 b3 32 05 00 00    	mov    DWORD PTR [ebx+0x532],esi
c0017c79:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0017c7c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0017c7e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017c84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c89:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017c8c:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c0017c92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c9a:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c0017ca0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ca5:	8a 40 44             	mov    al,BYTE PTR [eax+0x44]
c0017ca8:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0017cb2:	88 83 50 02 00 00    	mov    BYTE PTR [ebx+0x250],al
c0017cb8:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0017cbe:	81 c3 0c 02 00 00    	add    ebx,0x20c
c0017cc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017cc9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017ccc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0017cd3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017cd6:	c7 43 0c 01 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1
c0017cdd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0017ce4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017ceb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017cf0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017cf3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0017cf6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017cfb:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0017cfe:	58                   	pop    eax
c0017cff:	5a                   	pop    edx
c0017d00:	53                   	push   ebx
c0017d01:	68 c8 45 02 c0       	push   0xc00245c8
c0017d06:	e8 17 6e 00 00       	call   c001eb22 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017d0b:	e8 83 fe ff ff       	call   c0017b93 <unlockStuff()>
c0017d10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d15:	83 c4 10             	add    esp,0x10
c0017d18:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017d1b:	5a                   	pop    edx
c0017d1c:	5b                   	pop    ebx
c0017d1d:	5e                   	pop    esi
c0017d1e:	c3                   	ret    
c0017d1f:	83 ec 0c             	sub    esp,0xc
c0017d22:	68 14 1a 02 c0       	push   0xc0021a14
c0017d27:	e8 b9 70 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0017d2c:	83 c4 10             	add    esp,0x10
c0017d2f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017d34:	eb e5                	jmp    c0017d1b <forkProcess(regs*)+0x153>

c0017d36 <Semaphore::tryAcquire()>:
c0017d36:	83 ec 0c             	sub    esp,0xc
c0017d39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d3d:	e8 bf fa ff ff       	call   c0017801 <lockStuff()>
c0017d42:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0017d45:	3b 10                	cmp    edx,DWORD PTR [eax]
c0017d47:	7c 0b                	jl     c0017d54 <Semaphore::tryAcquire()+0x1e>
c0017d49:	e8 45 fe ff ff       	call   c0017b93 <unlockStuff()>
c0017d4e:	31 c0                	xor    eax,eax
c0017d50:	83 c4 0c             	add    esp,0xc
c0017d53:	c3                   	ret    
c0017d54:	42                   	inc    edx
c0017d55:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017d58:	e8 36 fe ff ff       	call   c0017b93 <unlockStuff()>
c0017d5d:	b0 01                	mov    al,0x1
c0017d5f:	83 c4 0c             	add    esp,0xc
c0017d62:	c3                   	ret    
c0017d63:	90                   	nop

c0017d64 <Semaphore::assertLocked(char const*)>:
c0017d64:	83 ec 0c             	sub    esp,0xc
c0017d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d6f:	e8 8d fa ff ff       	call   c0017801 <lockStuff()>
c0017d74:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017d76:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c0017d79:	7c 08                	jl     c0017d83 <Semaphore::assertLocked(char const*)+0x1f>
c0017d7b:	83 c4 0c             	add    esp,0xc
c0017d7e:	e9 10 fe ff ff       	jmp    c0017b93 <unlockStuff()>
c0017d83:	83 ec 0c             	sub    esp,0xc
c0017d86:	52                   	push   edx
c0017d87:	e8 ee cc ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c0017d8c:	83 c4 10             	add    esp,0x10
c0017d8f:	83 c4 0c             	add    esp,0xc
c0017d92:	e9 fc fd ff ff       	jmp    c0017b93 <unlockStuff()>

c0017d97 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0017d97:	83 ec 0c             	sub    esp,0xc
c0017d9a:	e8 26 fa ff ff       	call   c00177c5 <getIRQNestingLevel()>
c0017d9f:	83 ec 08             	sub    esp,0x8
c0017da2:	50                   	push   eax
c0017da3:	68 40 1a 02 c0       	push   0xc0021a40
c0017da8:	e8 38 70 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0017dad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017db1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017db6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017db9:	e8 50 fd ff ff       	call   c0017b0e <schedule()>
c0017dbe:	e8 19 fa ff ff       	call   c00177dc <unlockScheduler()>
c0017dc3:	e8 fd f9 ff ff       	call   c00177c5 <getIRQNestingLevel()>
c0017dc8:	5a                   	pop    edx
c0017dc9:	59                   	pop    ecx
c0017dca:	50                   	push   eax
c0017dcb:	68 74 1a 02 c0       	push   0xc0021a74
c0017dd0:	e8 10 70 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0017dd5:	83 c4 1c             	add    esp,0x1c
c0017dd8:	c3                   	ret    

c0017dd9 <blockTask(TaskState)>:
c0017dd9:	83 ec 0c             	sub    esp,0xc
c0017ddc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017de0:	e8 f5 f9 ff ff       	call   c00177da <lockScheduler()>
c0017de5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017dea:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017ded:	e8 1c fd ff ff       	call   c0017b0e <schedule()>
c0017df2:	83 c4 0c             	add    esp,0xc
c0017df5:	e9 e2 f9 ff ff       	jmp    c00177dc <unlockScheduler()>

c0017dfa <waitTask(int, int*, int)>:
c0017dfa:	83 ec 18             	sub    esp,0x18
c0017dfd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017e02:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e06:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0017e09:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017e0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017e12:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0017e15:	6a 07                	push   0x7
c0017e17:	e8 bd ff ff ff       	call   c0017dd9 <blockTask(TaskState)>
c0017e1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017e21:	83 c4 10             	add    esp,0x10
c0017e24:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0017e27:	85 d2                	test   edx,edx
c0017e29:	74 0a                	je     c0017e35 <waitTask(int, int*, int)+0x3b>
c0017e2b:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0017e2e:	89 02                	mov    DWORD PTR [edx],eax
c0017e30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017e35:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0017e38:	83 c4 0c             	add    esp,0xc
c0017e3b:	c3                   	ret    

c0017e3c <nanoSleepUntil(unsigned long long)>:
c0017e3c:	83 ec 0c             	sub    esp,0xc
c0017e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e43:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017e47:	3b 05 f0 37 02 c0    	cmp    eax,DWORD PTR ds:0xc00237f0
c0017e4d:	89 d1                	mov    ecx,edx
c0017e4f:	1b 0d f4 37 02 c0    	sbb    ecx,DWORD PTR ds:0xc00237f4
c0017e55:	73 04                	jae    c0017e5b <nanoSleepUntil(unsigned long long)+0x1f>
c0017e57:	83 c4 0c             	add    esp,0xc
c0017e5a:	c3                   	ret    
c0017e5b:	e8 a1 f9 ff ff       	call   c0017801 <lockStuff()>
c0017e60:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017e66:	83 ec 08             	sub    esp,0x8
c0017e69:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c0017e6c:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c0017e6f:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017e75:	68 bc 45 02 c0       	push   0xc00245bc
c0017e7a:	e8 a3 6c 00 00       	call   c001eb22 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017e7f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0017e86:	e8 4e ff ff ff       	call   c0017dd9 <blockTask(TaskState)>
c0017e8b:	83 c4 1c             	add    esp,0x1c
c0017e8e:	e9 00 fd ff ff       	jmp    c0017b93 <unlockStuff()>

c0017e93 <nanoSleep(unsigned long long)>:
c0017e93:	a1 f0 37 02 c0       	mov    eax,ds:0xc00237f0
c0017e98:	8b 15 f4 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237f4
c0017e9e:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0017ea2:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0017ea6:	eb 94                	jmp    c0017e3c <nanoSleepUntil(unsigned long long)>

c0017ea8 <sleep(unsigned long long)>:
c0017ea8:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0017eb0:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0017eb5:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0017eb9:	01 ca                	add    edx,ecx
c0017ebb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ebf:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017ec3:	eb ce                	jmp    c0017e93 <nanoSleep(unsigned long long)>
c0017ec5:	90                   	nop

c0017ec6 <Semaphore::acquire()>:
c0017ec6:	83 ec 0c             	sub    esp,0xc
c0017ec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ecd:	e8 2f f9 ff ff       	call   c0017801 <lockStuff()>
c0017ed2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0017ed5:	3b 10                	cmp    edx,DWORD PTR [eax]
c0017ed7:	7d 0c                	jge    c0017ee5 <Semaphore::acquire()+0x1f>
c0017ed9:	42                   	inc    edx
c0017eda:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017edd:	83 c4 0c             	add    esp,0xc
c0017ee0:	e9 ae fc ff ff       	jmp    c0017b93 <unlockStuff()>
c0017ee5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017eeb:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c0017ef2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017ef5:	85 d2                	test   edx,edx
c0017ef7:	74 2a                	je     c0017f23 <Semaphore::acquire()+0x5d>
c0017ef9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0017efc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017f02:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c0017f05:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017f0b:	83 ec 0c             	sub    esp,0xc
c0017f0e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017f11:	6a 05                	push   0x5
c0017f13:	e8 c1 fe ff ff       	call   c0017dd9 <blockTask(TaskState)>
c0017f18:	83 c4 10             	add    esp,0x10
c0017f1b:	83 c4 0c             	add    esp,0xc
c0017f1e:	e9 70 fc ff ff       	jmp    c0017b93 <unlockStuff()>
c0017f23:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017f29:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017f2c:	eb d7                	jmp    c0017f05 <Semaphore::acquire()+0x3f>

c0017f2e <execveProcess(char const*, char* const*, char* const*)>:
c0017f2e:	56                   	push   esi
c0017f2f:	53                   	push   ebx
c0017f30:	50                   	push   eax
c0017f31:	e8 cb f8 ff ff       	call   c0017801 <lockStuff()>
c0017f36:	83 ec 0c             	sub    esp,0xc
c0017f39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f3e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017f41:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c0017f47:	68 3b 07 00 00       	push   0x73b
c0017f4c:	e8 a5 6d ff ff       	call   c000ecf6 <operator new(unsigned long)>
c0017f51:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017f55:	89 c3                	mov    ebx,eax
c0017f57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f5c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017f5f:	ff b0 2a 05 00 00    	push   DWORD PTR [eax+0x52a]
c0017f65:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017f69:	53                   	push   ebx
c0017f6a:	e8 13 f5 ff ff       	call   c0017482 <Process::Process(char const*, Process*, char**)>
c0017f6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f74:	83 c4 20             	add    esp,0x20
c0017f77:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017f7a:	85 f6                	test   esi,esi
c0017f7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f7e:	89 03                	mov    DWORD PTR [ebx],eax
c0017f80:	74 06                	je     c0017f88 <execveProcess(char const*, char* const*, char* const*)+0x5a>
c0017f82:	89 b3 26 05 00 00    	mov    DWORD PTR [ebx+0x526],esi
c0017f88:	83 ec 0c             	sub    esp,0xc
c0017f8b:	53                   	push   ebx
c0017f8c:	e8 57 fa ff ff       	call   c00179e8 <Process::createUserThread()>
c0017f91:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0017f98:	e8 3c fe ff ff       	call   c0017dd9 <blockTask(TaskState)>
c0017f9d:	e8 f1 fb ff ff       	call   c0017b93 <unlockStuff()>
c0017fa2:	e8 33 f8 ff ff       	call   c00177da <lockScheduler()>
c0017fa7:	e8 62 fb ff ff       	call   c0017b0e <schedule()>
c0017fac:	e8 2b f8 ff ff       	call   c00177dc <unlockScheduler()>
c0017fb1:	83 c4 14             	add    esp,0x14
c0017fb4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017fb9:	5b                   	pop    ebx
c0017fba:	5e                   	pop    esi
c0017fbb:	c3                   	ret    

c0017fbc <taskReturned>:
c0017fbc:	83 ec 18             	sub    esp,0x18
c0017fbf:	68 a8 1a 02 c0       	push   0xc0021aa8
c0017fc4:	e8 b1 ca ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c0017fc9:	83 c4 10             	add    esp,0x10
c0017fcc:	83 ec 0c             	sub    esp,0xc
c0017fcf:	6a 02                	push   0x2
c0017fd1:	e8 03 fe ff ff       	call   c0017dd9 <blockTask(TaskState)>
c0017fd6:	e8 ff f7 ff ff       	call   c00177da <lockScheduler()>
c0017fdb:	e8 2e fb ff ff       	call   c0017b0e <schedule()>
c0017fe0:	e8 f7 f7 ff ff       	call   c00177dc <unlockScheduler()>
c0017fe5:	83 c4 10             	add    esp,0x10
c0017fe8:	eb e2                	jmp    c0017fcc <taskReturned+0x10>

c0017fea <unblockTask(ThreadControlBlock*)>:
c0017fea:	53                   	push   ebx
c0017feb:	83 ec 08             	sub    esp,0x8
c0017fee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017ff2:	e8 e3 f7 ff ff       	call   c00177da <lockScheduler()>
c0017ff7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017ffa:	85 c0                	test   eax,eax
c0017ffc:	74 5c                	je     c001805a <unblockTask(ThreadControlBlock*)+0x70>
c0017ffe:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018001:	48                   	dec    eax
c0018002:	74 31                	je     c0018035 <unblockTask(ThreadControlBlock*)+0x4b>
c0018004:	83 ec 0c             	sub    esp,0xc
c0018007:	68 c8 45 02 c0       	push   0xc00245c8
c001800c:	e8 3f 6a 00 00       	call   c001ea50 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018011:	83 c4 10             	add    esp,0x10
c0018014:	85 c0                	test   eax,eax
c0018016:	75 17                	jne    c001802f <unblockTask(ThreadControlBlock*)+0x45>
c0018018:	eb 65                	jmp    c001807f <unblockTask(ThreadControlBlock*)+0x95>
c001801a:	83 ec 08             	sub    esp,0x8
c001801d:	50                   	push   eax
c001801e:	68 c8 45 02 c0       	push   0xc00245c8
c0018023:	e8 38 6d 00 00       	call   c001ed60 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018028:	83 c4 10             	add    esp,0x10
c001802b:	85 c0                	test   eax,eax
c001802d:	74 50                	je     c001807f <unblockTask(ThreadControlBlock*)+0x95>
c001802f:	39 c3                	cmp    ebx,eax
c0018031:	75 e7                	jne    c001801a <unblockTask(ThreadControlBlock*)+0x30>
c0018033:	eb 1c                	jmp    c0018051 <unblockTask(ThreadControlBlock*)+0x67>
c0018035:	83 ec 0c             	sub    esp,0xc
c0018038:	68 98 1b 02 c0       	push   0xc0021b98
c001803d:	e8 a3 6d ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0018042:	c7 04 24 24 1b 02 c0 	mov    DWORD PTR [esp],0xc0021b24
c0018049:	e8 97 6d ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001804e:	83 c4 10             	add    esp,0x10
c0018051:	83 c4 08             	add    esp,0x8
c0018054:	5b                   	pop    ebx
c0018055:	e9 82 f7 ff ff       	jmp    c00177dc <unlockScheduler()>
c001805a:	83 ec 0c             	sub    esp,0xc
c001805d:	68 dc 1a 02 c0       	push   0xc0021adc
c0018062:	e8 7e 6d ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0018067:	c7 04 24 24 1b 02 c0 	mov    DWORD PTR [esp],0xc0021b24
c001806e:	e8 72 6d ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0018073:	83 c4 10             	add    esp,0x10
c0018076:	83 c4 08             	add    esp,0x8
c0018079:	5b                   	pop    ebx
c001807a:	e9 5d f7 ff ff       	jmp    c00177dc <unlockScheduler()>
c001807f:	83 ec 08             	sub    esp,0x8
c0018082:	53                   	push   ebx
c0018083:	68 c8 45 02 c0       	push   0xc00245c8
c0018088:	e8 95 6a 00 00       	call   c001eb22 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001808d:	83 c4 10             	add    esp,0x10
c0018090:	83 c4 08             	add    esp,0x8
c0018093:	5b                   	pop    ebx
c0018094:	e9 43 f7 ff ff       	jmp    c00177dc <unlockScheduler()>

c0018099 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018099:	55                   	push   ebp
c001809a:	57                   	push   edi
c001809b:	56                   	push   esi
c001809c:	53                   	push   ebx
c001809d:	83 ec 1c             	sub    esp,0x1c
c00180a0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00180a4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00180a7:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c00180ad:	85 c9                	test   ecx,ecx
c00180af:	7e 20                	jle    c00180d1 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c00180b1:	31 f6                	xor    esi,esi
c00180b3:	83 ec 0c             	sub    esp,0xc
c00180b6:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c00180bd:	46                   	inc    esi
c00180be:	e8 6b 3b ff ff       	call   c000bc2e <free>
c00180c3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00180c6:	83 c4 10             	add    esp,0x10
c00180c9:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c00180cf:	7f e2                	jg     c00180b3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c00180d1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c00180db:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00180e0:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c00180e3:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00180e6:	d3 c0                	rol    eax,cl
c00180e8:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c00180ef:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00180f2:	89 f7                	mov    edi,esi
c00180f4:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c00180fc:	0f 85 4f 01 00 00    	jne    c0018251 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c0018102:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018108:	85 c0                	test   eax,eax
c001810a:	0f 84 aa 00 00 00    	je     c00181ba <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c0018110:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0018113:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018117:	31 c9                	xor    ecx,ecx
c0018119:	eb 10                	jmp    c001812b <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c001811b:	41                   	inc    ecx
c001811c:	83 f9 10             	cmp    ecx,0x10
c001811f:	0f 84 95 00 00 00    	je     c00181ba <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c0018125:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001812b:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c0018132:	d3 fa                	sar    edx,cl
c0018134:	83 e2 01             	and    edx,0x1
c0018137:	74 e2                	je     c001811b <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018139:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001813c:	01 ca                	add    edx,ecx
c001813e:	89 d5                	mov    ebp,edx
c0018140:	c1 e5 05             	shl    ebp,0x5
c0018143:	01 ea                	add    edx,ebp
c0018145:	01 d0                	add    eax,edx
c0018147:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001814d:	83 fd 07             	cmp    ebp,0x7
c0018150:	75 c9                	jne    c001811b <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018152:	05 40 02 00 00       	add    eax,0x240
c0018157:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001815a:	83 fd ff             	cmp    ebp,0xffffffff
c001815d:	0f 8c 12 01 00 00    	jl     c0018275 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dc>
c0018163:	0f 84 c3 01 00 00    	je     c001832c <cleanupTerminatedTask(ThreadControlBlock*)+0x293>
c0018169:	85 ed                	test   ebp,ebp
c001816b:	0f 84 aa 01 00 00    	je     c001831b <cleanupTerminatedTask(ThreadControlBlock*)+0x282>
c0018171:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018173:	75 a6                	jne    c001811b <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018175:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001817b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001817f:	01 d0                	add    eax,edx
c0018181:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018185:	83 ec 0c             	sub    esp,0xc
c0018188:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001818e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018191:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018197:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001819e:	50                   	push   eax
c001819f:	e8 46 fe ff ff       	call   c0017fea <unblockTask(ThreadControlBlock*)>
c00181a4:	83 c4 10             	add    esp,0x10
c00181a7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00181aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00181ae:	89 f7                	mov    edi,esi
c00181b0:	41                   	inc    ecx
c00181b1:	83 f9 10             	cmp    ecx,0x10
c00181b4:	0f 85 6b ff ff ff    	jne    c0018125 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00181ba:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c00181c0:	85 c0                	test   eax,eax
c00181c2:	74 5d                	je     c0018221 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c00181c4:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c00181ca:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c00181d0:	74 4f                	je     c0018221 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c00181d2:	83 ec 0c             	sub    esp,0xc
c00181d5:	68 c8 45 02 c0       	push   0xc00245c8
c00181da:	e8 71 68 00 00       	call   c001ea50 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00181df:	c7 04 24 c8 45 02 c0 	mov    DWORD PTR [esp],0xc00245c8
c00181e6:	89 c7                	mov    edi,eax
c00181e8:	e8 6b 68 00 00       	call   c001ea58 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00181ed:	83 c4 10             	add    esp,0x10
c00181f0:	84 c0                	test   al,al
c00181f2:	0f 84 ee 00 00 00    	je     c00182e6 <cleanupTerminatedTask(ThreadControlBlock*)+0x24d>
c00181f8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00181fb:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018201:	85 d2                	test   edx,edx
c0018203:	74 0f                	je     c0018214 <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c0018205:	83 ec 0c             	sub    esp,0xc
c0018208:	8b 02                	mov    eax,DWORD PTR [edx]
c001820a:	52                   	push   edx
c001820b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001820e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018211:	83 c4 10             	add    esp,0x10
c0018214:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001821e:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0018221:	8b b7 32 05 00 00    	mov    esi,DWORD PTR [edi+0x532]
c0018227:	85 f6                	test   esi,esi
c0018229:	74 16                	je     c0018241 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c001822b:	83 ec 0c             	sub    esp,0xc
c001822e:	56                   	push   esi
c001822f:	e8 fc 5d ff ff       	call   c000e030 <VAS::~VAS()>
c0018234:	58                   	pop    eax
c0018235:	5a                   	pop    edx
c0018236:	6a 10                	push   0x10
c0018238:	56                   	push   esi
c0018239:	e8 c7 6a ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c001823e:	83 c4 10             	add    esp,0x10
c0018241:	83 ec 0c             	sub    esp,0xc
c0018244:	68 c4 18 02 c0       	push   0xc00218c4
c0018249:	e8 97 6b ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001824e:	83 c4 10             	add    esp,0x10
c0018251:	80 7b 62 00          	cmp    BYTE PTR [ebx+0x62],0x0
c0018255:	74 08                	je     c001825f <cleanupTerminatedTask(ThreadControlBlock*)+0x1c6>
c0018257:	83 c4 1c             	add    esp,0x1c
c001825a:	5b                   	pop    ebx
c001825b:	5e                   	pop    esi
c001825c:	5f                   	pop    edi
c001825d:	5d                   	pop    ebp
c001825e:	c3                   	ret    
c001825f:	83 ec 08             	sub    esp,0x8
c0018262:	6a 63                	push   0x63
c0018264:	53                   	push   ebx
c0018265:	e8 9b 6a ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c001826a:	83 c4 10             	add    esp,0x10
c001826d:	83 c4 1c             	add    esp,0x1c
c0018270:	5b                   	pop    ebx
c0018271:	5e                   	pop    esi
c0018272:	5f                   	pop    edi
c0018273:	5d                   	pop    ebp
c0018274:	c3                   	ret    
c0018275:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018279:	83 ec 0c             	sub    esp,0xc
c001827c:	68 dc 1b 02 c0       	push   0xc0021bdc
c0018281:	e8 f4 c7 ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c0018286:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018289:	83 c4 10             	add    esp,0x10
c001828c:	89 f7                	mov    edi,esi
c001828e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018292:	e9 84 fe ff ff       	jmp    c001811b <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018297:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001829d:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c00182a3:	75 1c                	jne    c00182c1 <cleanupTerminatedTask(ThreadControlBlock*)+0x228>
c00182a5:	83 ec 0c             	sub    esp,0xc
c00182a8:	68 44 1c 02 c0       	push   0xc0021c44
c00182ad:	e8 33 6b ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c00182b2:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00182b9:	e8 1b fb ff ff       	call   c0017dd9 <blockTask(TaskState)>
c00182be:	83 c4 10             	add    esp,0x10
c00182c1:	83 ec 08             	sub    esp,0x8
c00182c4:	56                   	push   esi
c00182c5:	68 c8 45 02 c0       	push   0xc00245c8
c00182ca:	e8 53 68 00 00       	call   c001eb22 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00182cf:	c7 04 24 c8 45 02 c0 	mov    DWORD PTR [esp],0xc00245c8
c00182d6:	e8 75 67 00 00       	call   c001ea50 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00182db:	83 c4 10             	add    esp,0x10
c00182de:	39 f8                	cmp    eax,edi
c00182e0:	0f 84 12 ff ff ff    	je     c00181f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c00182e6:	83 ec 0c             	sub    esp,0xc
c00182e9:	68 c8 45 02 c0       	push   0xc00245c8
c00182ee:	e8 5d 67 00 00       	call   c001ea50 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00182f3:	c7 04 24 c8 45 02 c0 	mov    DWORD PTR [esp],0xc00245c8
c00182fa:	89 c6                	mov    esi,eax
c00182fc:	e8 73 67 00 00       	call   c001ea74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018301:	83 c4 10             	add    esp,0x10
c0018304:	39 f3                	cmp    ebx,esi
c0018306:	74 b9                	je     c00182c1 <cleanupTerminatedTask(ThreadControlBlock*)+0x228>
c0018308:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001830b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001830e:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c0018314:	75 ab                	jne    c00182c1 <cleanupTerminatedTask(ThreadControlBlock*)+0x228>
c0018316:	e9 7c ff ff ff       	jmp    c0018297 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fe>
c001831b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001831f:	83 ec 0c             	sub    esp,0xc
c0018322:	68 10 1c 02 c0       	push   0xc0021c10
c0018327:	e9 55 ff ff ff       	jmp    c0018281 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c001832c:	8b 36                	mov    esi,DWORD PTR [esi]
c001832e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018332:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0018335:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018338:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001833e:	01 d7                	add    edi,edx
c0018340:	89 f8                	mov    eax,edi
c0018342:	e9 3a fe ff ff       	jmp    c0018181 <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c0018347 <cleanerTaskFunction(void*)>:
c0018347:	53                   	push   ebx
c0018348:	83 ec 08             	sub    esp,0x8
c001834b:	e8 8c f4 ff ff       	call   c00177dc <unlockScheduler()>
c0018350:	e8 85 f4 ff ff       	call   c00177da <lockScheduler()>
c0018355:	80 3d 8c 45 02 c0 00 	cmp    BYTE PTR ds:0xc002458c,0x0
c001835c:	0f 85 8e 00 00 00    	jne    c00183f0 <cleanerTaskFunction(void*)+0xa9>
c0018362:	83 ec 0c             	sub    esp,0xc
c0018365:	6a 02                	push   0x2
c0018367:	e8 2b fa ff ff       	call   c0017d97 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001836c:	83 c4 10             	add    esp,0x10
c001836f:	c6 05 8c 45 02 c0 00 	mov    BYTE PTR ds:0xc002458c,0x0
c0018376:	e8 86 f4 ff ff       	call   c0017801 <lockStuff()>
c001837b:	e8 5a f4 ff ff       	call   c00177da <lockScheduler()>
c0018380:	83 ec 0c             	sub    esp,0xc
c0018383:	68 b0 45 02 c0       	push   0xc00245b0
c0018388:	e8 cb 66 00 00       	call   c001ea58 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001838d:	83 c4 10             	add    esp,0x10
c0018390:	84 c0                	test   al,al
c0018392:	75 40                	jne    c00183d4 <cleanerTaskFunction(void*)+0x8d>
c0018394:	83 ec 0c             	sub    esp,0xc
c0018397:	68 b0 45 02 c0       	push   0xc00245b0
c001839c:	e8 af 66 00 00       	call   c001ea50 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00183a1:	c7 04 24 b0 45 02 c0 	mov    DWORD PTR [esp],0xc00245b0
c00183a8:	89 c3                	mov    ebx,eax
c00183aa:	e8 c5 66 00 00       	call   c001ea74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00183af:	c7 04 24 d2 18 02 c0 	mov    DWORD PTR [esp],0xc00218d2
c00183b6:	e8 2a 6a ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c00183bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00183be:	e8 d6 fc ff ff       	call   c0018099 <cleanupTerminatedTask(ThreadControlBlock*)>
c00183c3:	c7 04 24 eb 18 02 c0 	mov    DWORD PTR [esp],0xc00218eb
c00183ca:	e8 16 6a ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c00183cf:	83 c4 10             	add    esp,0x10
c00183d2:	eb ac                	jmp    c0018380 <cleanerTaskFunction(void*)+0x39>
c00183d4:	e8 03 f4 ff ff       	call   c00177dc <unlockScheduler()>
c00183d9:	e8 b5 f7 ff ff       	call   c0017b93 <unlockStuff()>
c00183de:	e8 f7 f3 ff ff       	call   c00177da <lockScheduler()>
c00183e3:	80 3d 8c 45 02 c0 00 	cmp    BYTE PTR ds:0xc002458c,0x0
c00183ea:	0f 84 72 ff ff ff    	je     c0018362 <cleanerTaskFunction(void*)+0x1b>
c00183f0:	e8 e7 f3 ff ff       	call   c00177dc <unlockScheduler()>
c00183f5:	e9 75 ff ff ff       	jmp    c001836f <cleanerTaskFunction(void*)+0x28>

c00183fa <terminateTask(int)>:
c00183fa:	83 ec 18             	sub    esp,0x18
c00183fd:	68 fe 18 02 c0       	push   0xc00218fe
c0018402:	e8 de 69 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0018407:	e8 f5 f3 ff ff       	call   c0017801 <lockStuff()>
c001840c:	e8 c9 f3 ff ff       	call   c00177da <lockScheduler()>
c0018411:	c7 04 24 18 19 02 c0 	mov    DWORD PTR [esp],0xc0021918
c0018418:	e8 c8 69 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001841d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018421:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018426:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0018429:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001842e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0018431:	5a                   	pop    edx
c0018432:	59                   	pop    ecx
c0018433:	50                   	push   eax
c0018434:	68 b0 45 02 c0       	push   0xc00245b0
c0018439:	e8 e4 66 00 00       	call   c001eb22 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001843e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018443:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001844a:	c7 04 24 32 19 02 c0 	mov    DWORD PTR [esp],0xc0021932
c0018451:	e8 8f 69 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0018456:	83 c4 10             	add    esp,0x10
c0018459:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c001845e:	85 c0                	test   eax,eax
c0018460:	74 5a                	je     c00184bc <terminateTask(int)+0xc2>
c0018462:	83 ec 0c             	sub    esp,0xc
c0018465:	68 4c 19 02 c0       	push   0xc002194c
c001846a:	e8 76 69 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001846f:	58                   	pop    eax
c0018470:	c6 05 8c 45 02 c0 01 	mov    BYTE PTR ds:0xc002458c,0x1
c0018477:	ff 35 88 45 02 c0    	push   DWORD PTR ds:0xc0024588
c001847d:	e8 68 fb ff ff       	call   c0017fea <unblockTask(ThreadControlBlock*)>
c0018482:	c7 04 24 66 19 02 c0 	mov    DWORD PTR [esp],0xc0021966
c0018489:	e8 57 69 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001848e:	83 c4 10             	add    esp,0x10
c0018491:	e8 46 f3 ff ff       	call   c00177dc <unlockScheduler()>
c0018496:	e8 f8 f6 ff ff       	call   c0017b93 <unlockStuff()>
c001849b:	83 ec 0c             	sub    esp,0xc
c001849e:	68 9e 19 02 c0       	push   0xc002199e
c00184a3:	e8 3d 69 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c00184a8:	83 c4 10             	add    esp,0x10
c00184ab:	e8 2a f3 ff ff       	call   c00177da <lockScheduler()>
c00184b0:	e8 59 f6 ff ff       	call   c0017b0e <schedule()>
c00184b5:	e8 22 f3 ff ff       	call   c00177dc <unlockScheduler()>
c00184ba:	eb ef                	jmp    c00184ab <terminateTask(int)+0xb1>
c00184bc:	83 ec 0c             	sub    esp,0xc
c00184bf:	68 80 19 02 c0       	push   0xc0021980
c00184c4:	e8 1c 69 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c00184c9:	83 c4 10             	add    esp,0x10
c00184cc:	eb c3                	jmp    c0018491 <terminateTask(int)+0x97>

c00184ce <Thr::terminateFromIRQ(int)>:
c00184ce:	83 ec 18             	sub    esp,0x18
c00184d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00184d5:	e8 20 ff ff ff       	call   c00183fa <terminateTask(int)>

c00184da <Semaphore::release()>:
c00184da:	83 ec 0c             	sub    esp,0xc
c00184dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184e1:	e8 1b f3 ff ff       	call   c0017801 <lockStuff()>
c00184e6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00184e9:	85 d2                	test   edx,edx
c00184eb:	74 1a                	je     c0018507 <Semaphore::release()+0x2d>
c00184ed:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00184f0:	83 ec 0c             	sub    esp,0xc
c00184f3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00184f6:	52                   	push   edx
c00184f7:	e8 ee fa ff ff       	call   c0017fea <unblockTask(ThreadControlBlock*)>
c00184fc:	83 c4 10             	add    esp,0x10
c00184ff:	83 c4 0c             	add    esp,0xc
c0018502:	e9 8c f6 ff ff       	jmp    c0017b93 <unlockStuff()>
c0018507:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001850a:	83 c4 0c             	add    esp,0xc
c001850d:	e9 81 f6 ff ff       	jmp    c0017b93 <unlockStuff()>

c0018512 <__static_initialization_and_destruction_0(int, int)>:
c0018512:	83 ec 0c             	sub    esp,0xc
c0018515:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001851a:	0f 85 88 00 00 00    	jne    c00185a8 <__static_initialization_and_destruction_0(int, int)+0x96>
c0018520:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018528:	75 7e                	jne    c00185a8 <__static_initialization_and_destruction_0(int, int)+0x96>
c001852a:	83 ec 0c             	sub    esp,0xc
c001852d:	68 c8 45 02 c0       	push   0xc00245c8
c0018532:	e8 d1 67 00 00       	call   c001ed08 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018537:	83 c4 10             	add    esp,0x10
c001853a:	83 ec 04             	sub    esp,0x4
c001853d:	68 30 26 02 c0       	push   0xc0022630
c0018542:	68 c8 45 02 c0       	push   0xc00245c8
c0018547:	68 c8 ec 01 c0       	push   0xc001ecc8
c001854c:	e8 30 67 ff ff       	call   c000ec81 <__cxa_atexit>
c0018551:	83 c4 10             	add    esp,0x10
c0018554:	83 ec 0c             	sub    esp,0xc
c0018557:	68 bc 45 02 c0       	push   0xc00245bc
c001855c:	e8 a7 67 00 00       	call   c001ed08 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018561:	83 c4 10             	add    esp,0x10
c0018564:	83 ec 04             	sub    esp,0x4
c0018567:	68 30 26 02 c0       	push   0xc0022630
c001856c:	68 bc 45 02 c0       	push   0xc00245bc
c0018571:	68 c8 ec 01 c0       	push   0xc001ecc8
c0018576:	e8 06 67 ff ff       	call   c000ec81 <__cxa_atexit>
c001857b:	83 c4 10             	add    esp,0x10
c001857e:	83 ec 0c             	sub    esp,0xc
c0018581:	68 b0 45 02 c0       	push   0xc00245b0
c0018586:	e8 7d 67 00 00       	call   c001ed08 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001858b:	83 c4 10             	add    esp,0x10
c001858e:	83 ec 04             	sub    esp,0x4
c0018591:	68 30 26 02 c0       	push   0xc0022630
c0018596:	68 b0 45 02 c0       	push   0xc00245b0
c001859b:	68 c8 ec 01 c0       	push   0xc001ecc8
c00185a0:	e8 dc 66 ff ff       	call   c000ec81 <__cxa_atexit>
c00185a5:	83 c4 10             	add    esp,0x10
c00185a8:	90                   	nop
c00185a9:	83 c4 0c             	add    esp,0xc
c00185ac:	c3                   	ret    

c00185ad <_GLOBAL__sub_I_kernelProcess>:
c00185ad:	83 ec 0c             	sub    esp,0xc
c00185b0:	83 ec 08             	sub    esp,0x8
c00185b3:	68 ff ff 00 00       	push   0xffff
c00185b8:	6a 01                	push   0x1
c00185ba:	e8 53 ff ff ff       	call   c0018512 <__static_initialization_and_destruction_0(int, int)>
c00185bf:	83 c4 10             	add    esp,0x10
c00185c2:	83 c4 0c             	add    esp,0xc
c00185c5:	c3                   	ret    

c00185c6 <Vm::vm8086EntryPoint(void*)>:
c00185c6:	83 ec 0c             	sub    esp,0xc
c00185c9:	e8 0e f2 ff ff       	call   c00177dc <unlockScheduler()>
c00185ce:	fb                   	sti    
c00185cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00185d4:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c00185d8:	52                   	push   edx
c00185d9:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c00185dd:	52                   	push   edx
c00185de:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00185e2:	52                   	push   edx
c00185e3:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c00185e7:	50                   	push   eax
c00185e8:	e8 c8 7b fe ff       	call   c00001b5 <goToVM86>
c00185ed:	83 c4 1c             	add    esp,0x1c
c00185f0:	c3                   	ret    

c00185f1 <Vm::inbv(unsigned short)>:
c00185f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00185f5:	ec                   	in     al,dx
c00185f6:	c3                   	ret    

c00185f7 <Vm::outbv(unsigned short, unsigned char)>:
c00185f7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00185fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00185ff:	ee                   	out    dx,al
c0018600:	c3                   	ret    

c0018601 <Vm::realToLinear(unsigned short, unsigned short)>:
c0018601:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018606:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001860b:	c1 e0 04             	shl    eax,0x4
c001860e:	01 d0                	add    eax,edx
c0018610:	c3                   	ret    

c0018611 <Vm::getSegment(unsigned int)>:
c0018611:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018615:	c1 e8 10             	shr    eax,0x10
c0018618:	c3                   	ret    

c0018619 <Vm::getOffset(unsigned int)>:
c0018619:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001861d:	c3                   	ret    

c001861e <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001861e:	55                   	push   ebp
c001861f:	57                   	push   edi
c0018620:	56                   	push   esi
c0018621:	53                   	push   ebx
c0018622:	83 ec 2c             	sub    esp,0x2c
c0018625:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0018629:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001862d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018631:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0018635:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018639:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001863d:	e8 98 f1 ff ff       	call   c00177da <lockScheduler()>
c0018642:	68 80 00 00 00       	push   0x80
c0018647:	6a 00                	push   0x0
c0018649:	68 c6 85 01 c0       	push   0xc00185c6
c001864e:	55                   	push   ebp
c001864f:	e8 b0 f2 ff ff       	call   c0017904 <Process::createThread(void (*)(void*), void*, int)>
c0018654:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018658:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001865c:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0018660:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c0018664:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c0018668:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001866c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018673:	e8 7e 66 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c0018678:	83 c4 0c             	add    esp,0xc
c001867b:	89 c3                	mov    ebx,eax
c001867d:	55                   	push   ebp
c001867e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018682:	50                   	push   eax
c0018683:	e8 8c 6c ff ff       	call   c000f314 <File::File(char const*, Process*)>
c0018688:	83 c4 0c             	add    esp,0xc
c001868b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001868f:	50                   	push   eax
c0018690:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018694:	50                   	push   eax
c0018695:	53                   	push   ebx
c0018696:	e8 89 6f ff ff       	call   c000f624 <File::stat(unsigned long long*, bool*)>
c001869b:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c001869f:	83 c4 10             	add    esp,0x10
c00186a2:	84 d2                	test   dl,dl
c00186a4:	74 1c                	je     c00186c2 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c00186a6:	83 ec 0c             	sub    esp,0xc
c00186a9:	68 6c 1c 02 c0       	push   0xc0021c6c
c00186ae:	e8 c7 c3 ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c00186b3:	e8 24 f1 ff ff       	call   c00177dc <unlockScheduler()>
c00186b8:	83 c4 10             	add    esp,0x10
c00186bb:	31 d2                	xor    edx,edx
c00186bd:	e9 81 00 00 00       	jmp    c0018743 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c00186c2:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00186c6:	51                   	push   ecx
c00186c7:	51                   	push   ecx
c00186c8:	6a 01                	push   0x1
c00186ca:	53                   	push   ebx
c00186cb:	e8 a8 6c ff ff       	call   c000f378 <File::open(FileOpenMode)>
c00186d0:	83 c4 10             	add    esp,0x10
c00186d3:	85 c0                	test   eax,eax
c00186d5:	74 1b                	je     c00186f2 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c00186d7:	83 ec 0c             	sub    esp,0xc
c00186da:	68 85 1c 02 c0       	push   0xc0021c85
c00186df:	e8 96 c3 ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c00186e4:	e8 f3 f0 ff ff       	call   c00177dc <unlockScheduler()>
c00186e9:	83 c4 10             	add    esp,0x10
c00186ec:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00186f0:	eb 51                	jmp    c0018743 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c00186f2:	83 ec 0c             	sub    esp,0xc
c00186f5:	0f b7 ff             	movzx  edi,di
c00186f8:	6a 07                	push   0x7
c00186fa:	0f b7 f6             	movzx  esi,si
c00186fd:	68 00 01 00 00       	push   0x100
c0018702:	6a 00                	push   0x0
c0018704:	6a 00                	push   0x0
c0018706:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c001870c:	e8 77 5d ff ff       	call   c000e488 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018711:	83 c4 18             	add    esp,0x18
c0018714:	57                   	push   edi
c0018715:	56                   	push   esi
c0018716:	e8 e6 fe ff ff       	call   c0018601 <Vm::realToLinear(unsigned short, unsigned short)>
c001871b:	5a                   	pop    edx
c001871c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001871e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018722:	51                   	push   ecx
c0018723:	50                   	push   eax
c0018724:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018728:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001872c:	53                   	push   ebx
c001872d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018730:	83 c4 14             	add    esp,0x14
c0018733:	53                   	push   ebx
c0018734:	e8 9d 6c ff ff       	call   c000f3d6 <File::close()>
c0018739:	e8 9e f0 ff ff       	call   c00177dc <unlockScheduler()>
c001873e:	83 c4 10             	add    esp,0x10
c0018741:	b2 01                	mov    dl,0x1
c0018743:	83 c4 2c             	add    esp,0x2c
c0018746:	88 d0                	mov    al,dl
c0018748:	5b                   	pop    ebx
c0018749:	5e                   	pop    esi
c001874a:	5f                   	pop    edi
c001874b:	5d                   	pop    ebp
c001874c:	c3                   	ret    

c001874d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001874d:	57                   	push   edi
c001874e:	56                   	push   esi
c001874f:	53                   	push   ebx
c0018750:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018758:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001875c:	83 e8 06             	sub    eax,0x6
c001875f:	0f b7 c0             	movzx  eax,ax
c0018762:	50                   	push   eax
c0018763:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018768:	50                   	push   eax
c0018769:	e8 93 fe ff ff       	call   c0018601 <Vm::realToLinear(unsigned short, unsigned short)>
c001876e:	5a                   	pop    edx
c001876f:	5e                   	pop    esi
c0018770:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018773:	8d 56 fa             	lea    edx,[esi-0x6]
c0018776:	81 e2 ff ff 00 00    	and    edx,0xffff
c001877c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001877f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018782:	83 c2 02             	add    edx,0x2
c0018785:	66 89 10             	mov    WORD PTR [eax],dx
c0018788:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001878b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001878f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018792:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018796:	89 d6                	mov    esi,edx
c0018798:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001879e:	66 81 e6 ff fd       	and    si,0xfdff
c00187a3:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c00187a7:	74 07                	je     c00187b0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00187a9:	89 d6                	mov    esi,edx
c00187ab:	66 81 ce 00 02       	or     si,0x200
c00187b0:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00187b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187b9:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00187bd:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00187c5:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00187c8:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00187d0:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00187d3:	5b                   	pop    ebx
c00187d4:	5e                   	pop    esi
c00187d5:	5f                   	pop    edi
c00187d6:	c3                   	ret    

c00187d7 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00187d7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00187dc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00187e1:	c1 e0 04             	shl    eax,0x4
c00187e4:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00187e7:	c3                   	ret    

c00187e8 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00187e8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00187ed:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00187f2:	c1 e0 04             	shl    eax,0x4
c00187f5:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00187f9:	c3                   	ret    

c00187fa <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00187fa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00187ff:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018804:	c1 e0 04             	shl    eax,0x4
c0018807:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001880a:	c3                   	ret    

c001880b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001880b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018810:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018815:	c1 e0 04             	shl    eax,0x4
c0018818:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001881c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001881f:	c3                   	ret    

c0018820 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018820:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018825:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001882a:	c1 e0 04             	shl    eax,0x4
c001882d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018831:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018835:	c3                   	ret    

c0018836 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018836:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001883b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018840:	c1 e0 04             	shl    eax,0x4
c0018843:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018847:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001884a:	c3                   	ret    

c001884b <Vm::faultHandler(regs*)>:
c001884b:	55                   	push   ebp
c001884c:	57                   	push   edi
c001884d:	56                   	push   esi
c001884e:	53                   	push   ebx
c001884f:	83 ec 1c             	sub    esp,0x1c
c0018852:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018856:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018859:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001885d:	0f b7 f0             	movzx  esi,ax
c0018860:	52                   	push   edx
c0018861:	0f b7 c0             	movzx  eax,ax
c0018864:	50                   	push   eax
c0018865:	e8 97 fd ff ff       	call   c0018601 <Vm::realToLinear(unsigned short, unsigned short)>
c001886a:	5a                   	pop    edx
c001886b:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001886e:	59                   	pop    ecx
c001886f:	89 c7                	mov    edi,eax
c0018871:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018874:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018878:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001887d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018881:	0f b7 c5             	movzx  eax,bp
c0018884:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018888:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001888c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018890:	e8 6c fd ff ff       	call   c0018601 <Vm::realToLinear(unsigned short, unsigned short)>
c0018895:	5a                   	pop    edx
c0018896:	59                   	pop    ecx
c0018897:	b1 06                	mov    cl,0x6
c0018899:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001889e:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00188a3:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c00188a6:	80 fa 9d             	cmp    dl,0x9d
c00188a9:	0f 84 1d 02 00 00    	je     c0018acc <Vm::faultHandler(regs*)+0x281>
c00188af:	0f 87 8e 00 00 00    	ja     c0018943 <Vm::faultHandler(regs*)+0xf8>
c00188b5:	80 fa 66             	cmp    dl,0x66
c00188b8:	0f 84 89 01 00 00    	je     c0018a47 <Vm::faultHandler(regs*)+0x1fc>
c00188be:	77 44                	ja     c0018904 <Vm::faultHandler(regs*)+0xb9>
c00188c0:	80 fa 36             	cmp    dl,0x36
c00188c3:	0f 84 74 01 00 00    	je     c0018a3d <Vm::faultHandler(regs*)+0x1f2>
c00188c9:	77 1a                	ja     c00188e5 <Vm::faultHandler(regs*)+0x9a>
c00188cb:	80 fa 26             	cmp    dl,0x26
c00188ce:	0f 84 4b 01 00 00    	je     c0018a1f <Vm::faultHandler(regs*)+0x1d4>
c00188d4:	80 fa 2e             	cmp    dl,0x2e
c00188d7:	0f 85 4a 05 00 00    	jne    c0018e27 <Vm::faultHandler(regs*)+0x5dc>
c00188dd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00188e0:	31 c9                	xor    ecx,ecx
c00188e2:	47                   	inc    edi
c00188e3:	eb be                	jmp    c00188a3 <Vm::faultHandler(regs*)+0x58>
c00188e5:	80 fa 64             	cmp    dl,0x64
c00188e8:	0f 84 3b 01 00 00    	je     c0018a29 <Vm::faultHandler(regs*)+0x1de>
c00188ee:	0f 87 3f 01 00 00    	ja     c0018a33 <Vm::faultHandler(regs*)+0x1e8>
c00188f4:	80 fa 3e             	cmp    dl,0x3e
c00188f7:	0f 85 2a 05 00 00    	jne    c0018e27 <Vm::faultHandler(regs*)+0x5dc>
c00188fd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018900:	b1 01                	mov    cl,0x1
c0018902:	eb de                	jmp    c00188e2 <Vm::faultHandler(regs*)+0x97>
c0018904:	80 fa 6d             	cmp    dl,0x6d
c0018907:	0f 84 bf 02 00 00    	je     c0018bcc <Vm::faultHandler(regs*)+0x381>
c001890d:	77 17                	ja     c0018926 <Vm::faultHandler(regs*)+0xdb>
c001890f:	80 fa 67             	cmp    dl,0x67
c0018912:	0f 84 3c 01 00 00    	je     c0018a54 <Vm::faultHandler(regs*)+0x209>
c0018918:	80 fa 6c             	cmp    dl,0x6c
c001891b:	0f 84 5d 02 00 00    	je     c0018b7e <Vm::faultHandler(regs*)+0x333>
c0018921:	e9 01 05 00 00       	jmp    c0018e27 <Vm::faultHandler(regs*)+0x5dc>
c0018926:	80 fa 6f             	cmp    dl,0x6f
c0018929:	0f 84 8b 03 00 00    	je     c0018cba <Vm::faultHandler(regs*)+0x46f>
c001892f:	0f 82 0f 03 00 00    	jb     c0018c44 <Vm::faultHandler(regs*)+0x3f9>
c0018935:	80 fa 9c             	cmp    dl,0x9c
c0018938:	0f 84 23 01 00 00    	je     c0018a61 <Vm::faultHandler(regs*)+0x216>
c001893e:	e9 e4 04 00 00       	jmp    c0018e27 <Vm::faultHandler(regs*)+0x5dc>
c0018943:	80 fa ec             	cmp    dl,0xec
c0018946:	0f 84 7f 04 00 00    	je     c0018dcb <Vm::faultHandler(regs*)+0x580>
c001894c:	77 7b                	ja     c00189c9 <Vm::faultHandler(regs*)+0x17e>
c001894e:	80 fa e4             	cmp    dl,0xe4
c0018951:	0f 84 fe 03 00 00    	je     c0018d55 <Vm::faultHandler(regs*)+0x50a>
c0018957:	77 53                	ja     c00189ac <Vm::faultHandler(regs*)+0x161>
c0018959:	80 fa cd             	cmp    dl,0xcd
c001895c:	0f 84 cd 01 00 00    	je     c0018b2f <Vm::faultHandler(regs*)+0x2e4>
c0018962:	80 fa cf             	cmp    dl,0xcf
c0018965:	0f 85 bc 04 00 00    	jne    c0018e27 <Vm::faultHandler(regs*)+0x5dc>
c001896b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001896e:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018971:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0018975:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018978:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001897c:	81 ca 00 02 02 00    	or     edx,0x20200
c0018982:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018985:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0018989:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001898f:	66 c1 e8 09          	shr    ax,0x9
c0018993:	83 e0 01             	and    eax,0x1
c0018996:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018999:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001899c:	83 c0 06             	add    eax,0x6
c001899f:	25 ff ff 00 00       	and    eax,0xffff
c00189a4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00189a7:	e9 77 04 00 00       	jmp    c0018e23 <Vm::faultHandler(regs*)+0x5d8>
c00189ac:	80 fa e6             	cmp    dl,0xe6
c00189af:	0f 84 ea 03 00 00    	je     c0018d9f <Vm::faultHandler(regs*)+0x554>
c00189b5:	0f 82 b6 03 00 00    	jb     c0018d71 <Vm::faultHandler(regs*)+0x526>
c00189bb:	80 fa e7             	cmp    dl,0xe7
c00189be:	0f 84 f2 03 00 00    	je     c0018db6 <Vm::faultHandler(regs*)+0x56b>
c00189c4:	e9 5e 04 00 00       	jmp    c0018e27 <Vm::faultHandler(regs*)+0x5dc>
c00189c9:	80 fa ef             	cmp    dl,0xef
c00189cc:	0f 84 3c 04 00 00    	je     c0018e0e <Vm::faultHandler(regs*)+0x5c3>
c00189d2:	77 28                	ja     c00189fc <Vm::faultHandler(regs*)+0x1b1>
c00189d4:	80 fa ed             	cmp    dl,0xed
c00189d7:	0f 84 0a 04 00 00    	je     c0018de7 <Vm::faultHandler(regs*)+0x59c>
c00189dd:	80 fa ee             	cmp    dl,0xee
c00189e0:	0f 85 41 04 00 00    	jne    c0018e27 <Vm::faultHandler(regs*)+0x5dc>
c00189e6:	50                   	push   eax
c00189e7:	50                   	push   eax
c00189e8:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00189ec:	50                   	push   eax
c00189ed:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00189f1:	50                   	push   eax
c00189f2:	e8 00 fc ff ff       	call   c00185f7 <Vm::outbv(unsigned short, unsigned char)>
c00189f7:	e9 0a 04 00 00       	jmp    c0018e06 <Vm::faultHandler(regs*)+0x5bb>
c00189fc:	80 fa fa             	cmp    dl,0xfa
c00189ff:	0f 84 5d 01 00 00    	je     c0018b62 <Vm::faultHandler(regs*)+0x317>
c0018a05:	80 fa fb             	cmp    dl,0xfb
c0018a08:	0f 84 62 01 00 00    	je     c0018b70 <Vm::faultHandler(regs*)+0x325>
c0018a0e:	80 fa f3             	cmp    dl,0xf3
c0018a11:	0f 85 10 04 00 00    	jne    c0018e27 <Vm::faultHandler(regs*)+0x5dc>
c0018a17:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018a1a:	e9 c3 fe ff ff       	jmp    c00188e2 <Vm::faultHandler(regs*)+0x97>
c0018a1f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018a22:	b1 02                	mov    cl,0x2
c0018a24:	e9 b9 fe ff ff       	jmp    c00188e2 <Vm::faultHandler(regs*)+0x97>
c0018a29:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018a2c:	b1 03                	mov    cl,0x3
c0018a2e:	e9 af fe ff ff       	jmp    c00188e2 <Vm::faultHandler(regs*)+0x97>
c0018a33:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018a36:	b1 04                	mov    cl,0x4
c0018a38:	e9 a5 fe ff ff       	jmp    c00188e2 <Vm::faultHandler(regs*)+0x97>
c0018a3d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018a40:	b1 05                	mov    cl,0x5
c0018a42:	e9 9b fe ff ff       	jmp    c00188e2 <Vm::faultHandler(regs*)+0x97>
c0018a47:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018a4a:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0018a4f:	e9 8e fe ff ff       	jmp    c00188e2 <Vm::faultHandler(regs*)+0x97>
c0018a54:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018a57:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0018a5c:	e9 81 fe ff ff       	jmp    c00188e2 <Vm::faultHandler(regs*)+0x97>
c0018a61:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018a64:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018a68:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018a6d:	74 30                	je     c0018a9f <Vm::faultHandler(regs*)+0x254>
c0018a6f:	83 e9 04             	sub    ecx,0x4
c0018a72:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018a78:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018a7e:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018a81:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018a84:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018a8a:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018a8e:	0f 84 8c 03 00 00    	je     c0018e20 <Vm::faultHandler(regs*)+0x5d5>
c0018a94:	80 ce 02             	or     dh,0x2
c0018a97:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018a9a:	e9 81 03 00 00       	jmp    c0018e20 <Vm::faultHandler(regs*)+0x5d5>
c0018a9f:	83 e9 02             	sub    ecx,0x2
c0018aa2:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018aa8:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018aab:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018aaf:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018ab5:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018ab9:	74 05                	je     c0018ac0 <Vm::faultHandler(regs*)+0x275>
c0018abb:	80 ce 02             	or     dh,0x2
c0018abe:	eb 03                	jmp    c0018ac3 <Vm::faultHandler(regs*)+0x278>
c0018ac0:	80 e6 fd             	and    dh,0xfd
c0018ac3:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018ac7:	e9 54 03 00 00       	jmp    c0018e20 <Vm::faultHandler(regs*)+0x5d5>
c0018acc:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018ad1:	74 2a                	je     c0018afd <Vm::faultHandler(regs*)+0x2b2>
c0018ad3:	8b 10                	mov    edx,DWORD PTR [eax]
c0018ad5:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018adb:	81 ca 00 02 02 00    	or     edx,0x20200
c0018ae1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018ae4:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ae6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018aec:	c1 e8 09             	shr    eax,0x9
c0018aef:	83 e0 01             	and    eax,0x1
c0018af2:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018af5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018af8:	83 c0 04             	add    eax,0x4
c0018afb:	eb 25                	jmp    c0018b22 <Vm::faultHandler(regs*)+0x2d7>
c0018afd:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018b00:	81 ca 00 02 02 00    	or     edx,0x20200
c0018b06:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018b09:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018b0c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018b12:	66 c1 e8 09          	shr    ax,0x9
c0018b16:	83 e0 01             	and    eax,0x1
c0018b19:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018b1c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018b1f:	83 c0 02             	add    eax,0x2
c0018b22:	25 ff ff 00 00       	and    eax,0xffff
c0018b27:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018b2a:	e9 f1 02 00 00       	jmp    c0018e20 <Vm::faultHandler(regs*)+0x5d5>
c0018b2f:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018b33:	3c ff                	cmp    al,0xff
c0018b35:	75 10                	jne    c0018b47 <Vm::faultHandler(regs*)+0x2fc>
c0018b37:	83 ec 0c             	sub    esp,0xc
c0018b3a:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0018b3d:	e8 8c f9 ff ff       	call   c00184ce <Thr::terminateFromIRQ(int)>
c0018b42:	e9 c2 02 00 00       	jmp    c0018e09 <Vm::faultHandler(regs*)+0x5be>
c0018b47:	83 ec 0c             	sub    esp,0xc
c0018b4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018b4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018b52:	57                   	push   edi
c0018b53:	50                   	push   eax
c0018b54:	53                   	push   ebx
c0018b55:	e8 f3 fb ff ff       	call   c001874d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018b5a:	83 c4 20             	add    esp,0x20
c0018b5d:	e9 c1 02 00 00       	jmp    c0018e23 <Vm::faultHandler(regs*)+0x5d8>
c0018b62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018b67:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018b6b:	e9 b0 02 00 00       	jmp    c0018e20 <Vm::faultHandler(regs*)+0x5d5>
c0018b70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018b75:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018b79:	e9 a2 02 00 00       	jmp    c0018e20 <Vm::faultHandler(regs*)+0x5d5>
c0018b7e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018b83:	74 0d                	je     c0018b92 <Vm::faultHandler(regs*)+0x347>
c0018b85:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0018b8c:	0f 87 e9 02 00 00    	ja     c0018e7b <Vm::faultHandler(regs*)+0x630>
c0018b92:	83 ec 0c             	sub    esp,0xc
c0018b95:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0018b98:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018b9c:	50                   	push   eax
c0018b9d:	e8 4f fa ff ff       	call   c00185f1 <Vm::inbv(unsigned short)>
c0018ba2:	83 c4 0c             	add    esp,0xc
c0018ba5:	0f b6 c0             	movzx  eax,al
c0018ba8:	0f b7 c9             	movzx  ecx,cx
c0018bab:	50                   	push   eax
c0018bac:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0018bb0:	50                   	push   eax
c0018bb1:	51                   	push   ecx
c0018bb2:	e8 54 fc ff ff       	call   c001880b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018bb7:	83 c4 10             	add    esp,0x10
c0018bba:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018bbd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018bc1:	74 03                	je     c0018bc6 <Vm::faultHandler(regs*)+0x37b>
c0018bc3:	48                   	dec    eax
c0018bc4:	eb 01                	jmp    c0018bc7 <Vm::faultHandler(regs*)+0x37c>
c0018bc6:	40                   	inc    eax
c0018bc7:	0f b7 c0             	movzx  eax,ax
c0018bca:	eb 70                	jmp    c0018c3c <Vm::faultHandler(regs*)+0x3f1>
c0018bcc:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018bcf:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0018bd2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018bd7:	74 0c                	je     c0018be5 <Vm::faultHandler(regs*)+0x39a>
c0018bd9:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018bdf:	0f 87 96 02 00 00    	ja     c0018e7b <Vm::faultHandler(regs*)+0x630>
c0018be5:	0f b7 c9             	movzx  ecx,cx
c0018be8:	0f b7 f6             	movzx  esi,si
c0018beb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018bee:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018bf3:	74 20                	je     c0018c15 <Vm::faultHandler(regs*)+0x3ca>
c0018bf5:	ed                   	in     eax,dx
c0018bf6:	55                   	push   ebp
c0018bf7:	50                   	push   eax
c0018bf8:	51                   	push   ecx
c0018bf9:	56                   	push   esi
c0018bfa:	e8 37 fc ff ff       	call   c0018836 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018bff:	83 c4 10             	add    esp,0x10
c0018c02:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018c05:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018c09:	74 05                	je     c0018c10 <Vm::faultHandler(regs*)+0x3c5>
c0018c0b:	83 e8 04             	sub    eax,0x4
c0018c0e:	eb 27                	jmp    c0018c37 <Vm::faultHandler(regs*)+0x3ec>
c0018c10:	83 c0 04             	add    eax,0x4
c0018c13:	eb 22                	jmp    c0018c37 <Vm::faultHandler(regs*)+0x3ec>
c0018c15:	66 ed                	in     ax,dx
c0018c17:	0f b7 c0             	movzx  eax,ax
c0018c1a:	57                   	push   edi
c0018c1b:	50                   	push   eax
c0018c1c:	51                   	push   ecx
c0018c1d:	56                   	push   esi
c0018c1e:	e8 fd fb ff ff       	call   c0018820 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018c23:	83 c4 10             	add    esp,0x10
c0018c26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018c29:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018c2d:	74 05                	je     c0018c34 <Vm::faultHandler(regs*)+0x3e9>
c0018c2f:	83 e8 02             	sub    eax,0x2
c0018c32:	eb 03                	jmp    c0018c37 <Vm::faultHandler(regs*)+0x3ec>
c0018c34:	83 c0 02             	add    eax,0x2
c0018c37:	25 ff ff 00 00       	and    eax,0xffff
c0018c3c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018c3f:	e9 dc 01 00 00       	jmp    c0018e20 <Vm::faultHandler(regs*)+0x5d5>
c0018c44:	49                   	dec    ecx
c0018c45:	80 f9 05             	cmp    cl,0x5
c0018c48:	77 24                	ja     c0018c6e <Vm::faultHandler(regs*)+0x423>
c0018c4a:	0f b6 c9             	movzx  ecx,cl
c0018c4d:	ff 24 8d cc 1c 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffde334]
c0018c54:	0f b7 f5             	movzx  esi,bp
c0018c57:	eb 15                	jmp    c0018c6e <Vm::faultHandler(regs*)+0x423>
c0018c59:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0018c5d:	eb 0f                	jmp    c0018c6e <Vm::faultHandler(regs*)+0x423>
c0018c5f:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0018c63:	eb 09                	jmp    c0018c6e <Vm::faultHandler(regs*)+0x423>
c0018c65:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0018c69:	eb 03                	jmp    c0018c6e <Vm::faultHandler(regs*)+0x423>
c0018c6b:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0018c6e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018c71:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018c76:	74 0b                	je     c0018c83 <Vm::faultHandler(regs*)+0x438>
c0018c78:	3d ff ff 00 00       	cmp    eax,0xffff
c0018c7d:	0f 87 f8 01 00 00    	ja     c0018e7b <Vm::faultHandler(regs*)+0x630>
c0018c83:	0f b7 c0             	movzx  eax,ax
c0018c86:	52                   	push   edx
c0018c87:	52                   	push   edx
c0018c88:	50                   	push   eax
c0018c89:	56                   	push   esi
c0018c8a:	e8 48 fb ff ff       	call   c00187d7 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0018c8f:	59                   	pop    ecx
c0018c90:	0f b6 c0             	movzx  eax,al
c0018c93:	5e                   	pop    esi
c0018c94:	50                   	push   eax
c0018c95:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018c99:	50                   	push   eax
c0018c9a:	e8 58 f9 ff ff       	call   c00185f7 <Vm::outbv(unsigned short, unsigned char)>
c0018c9f:	83 c4 10             	add    esp,0x10
c0018ca2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018ca5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018ca9:	74 03                	je     c0018cae <Vm::faultHandler(regs*)+0x463>
c0018cab:	48                   	dec    eax
c0018cac:	eb 01                	jmp    c0018caf <Vm::faultHandler(regs*)+0x464>
c0018cae:	40                   	inc    eax
c0018caf:	0f b7 c0             	movzx  eax,ax
c0018cb2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018cb5:	e9 66 01 00 00       	jmp    c0018e20 <Vm::faultHandler(regs*)+0x5d5>
c0018cba:	49                   	dec    ecx
c0018cbb:	80 f9 05             	cmp    cl,0x5
c0018cbe:	77 1f                	ja     c0018cdf <Vm::faultHandler(regs*)+0x494>
c0018cc0:	0f b6 c9             	movzx  ecx,cl
c0018cc3:	ff 24 8d e4 1c 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffde31c]
c0018cca:	89 ee                	mov    esi,ebp
c0018ccc:	eb 11                	jmp    c0018cdf <Vm::faultHandler(regs*)+0x494>
c0018cce:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0018cd1:	eb 0c                	jmp    c0018cdf <Vm::faultHandler(regs*)+0x494>
c0018cd3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018cd6:	eb 07                	jmp    c0018cdf <Vm::faultHandler(regs*)+0x494>
c0018cd8:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0018cdb:	eb 02                	jmp    c0018cdf <Vm::faultHandler(regs*)+0x494>
c0018cdd:	8b 33                	mov    esi,DWORD PTR [ebx]
c0018cdf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0018ce2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018ce7:	74 0c                	je     c0018cf5 <Vm::faultHandler(regs*)+0x4aa>
c0018ce9:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018cef:	0f 87 86 01 00 00    	ja     c0018e7b <Vm::faultHandler(regs*)+0x630>
c0018cf5:	0f b7 d6             	movzx  edx,si
c0018cf8:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0018cfb:	0f b7 c1             	movzx  eax,cx
c0018cfe:	81 e7 00 04 00 00    	and    edi,0x400
c0018d04:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0018d07:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018d0c:	74 1d                	je     c0018d2b <Vm::faultHandler(regs*)+0x4e0>
c0018d0e:	55                   	push   ebp
c0018d0f:	55                   	push   ebp
c0018d10:	50                   	push   eax
c0018d11:	52                   	push   edx
c0018d12:	e8 e3 fa ff ff       	call   c00187fa <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0018d17:	83 c4 10             	add    esp,0x10
c0018d1a:	89 f2                	mov    edx,esi
c0018d1c:	ef                   	out    dx,eax
c0018d1d:	85 ff                	test   edi,edi
c0018d1f:	74 05                	je     c0018d26 <Vm::faultHandler(regs*)+0x4db>
c0018d21:	83 e9 04             	sub    ecx,0x4
c0018d24:	eb 21                	jmp    c0018d47 <Vm::faultHandler(regs*)+0x4fc>
c0018d26:	83 c1 04             	add    ecx,0x4
c0018d29:	eb 1c                	jmp    c0018d47 <Vm::faultHandler(regs*)+0x4fc>
c0018d2b:	55                   	push   ebp
c0018d2c:	55                   	push   ebp
c0018d2d:	50                   	push   eax
c0018d2e:	52                   	push   edx
c0018d2f:	e8 b4 fa ff ff       	call   c00187e8 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0018d34:	83 c4 10             	add    esp,0x10
c0018d37:	89 f2                	mov    edx,esi
c0018d39:	66 ef                	out    dx,ax
c0018d3b:	85 ff                	test   edi,edi
c0018d3d:	74 05                	je     c0018d44 <Vm::faultHandler(regs*)+0x4f9>
c0018d3f:	83 e9 02             	sub    ecx,0x2
c0018d42:	eb 03                	jmp    c0018d47 <Vm::faultHandler(regs*)+0x4fc>
c0018d44:	83 c1 02             	add    ecx,0x2
c0018d47:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018d4d:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0018d50:	e9 cb 00 00 00       	jmp    c0018e20 <Vm::faultHandler(regs*)+0x5d5>
c0018d55:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018d5c:	83 ec 0c             	sub    esp,0xc
c0018d5f:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018d63:	50                   	push   eax
c0018d64:	e8 88 f8 ff ff       	call   c00185f1 <Vm::inbv(unsigned short)>
c0018d69:	0f b6 c0             	movzx  eax,al
c0018d6c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018d6f:	eb 3f                	jmp    c0018db0 <Vm::faultHandler(regs*)+0x565>
c0018d71:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018d76:	74 07                	je     c0018d7f <Vm::faultHandler(regs*)+0x534>
c0018d78:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018d7c:	ed                   	in     eax,dx
c0018d7d:	eb 14                	jmp    c0018d93 <Vm::faultHandler(regs*)+0x548>
c0018d7f:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0018d82:	66 31 c9             	xor    cx,cx
c0018d85:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0018d88:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018d8c:	66 ed                	in     ax,dx
c0018d8e:	0f b7 c0             	movzx  eax,ax
c0018d91:	09 c8                	or     eax,ecx
c0018d93:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018d96:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018d9a:	e9 84 00 00 00       	jmp    c0018e23 <Vm::faultHandler(regs*)+0x5d8>
c0018d9f:	52                   	push   edx
c0018da0:	52                   	push   edx
c0018da1:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018da5:	50                   	push   eax
c0018da6:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018daa:	50                   	push   eax
c0018dab:	e8 47 f8 ff ff       	call   c00185f7 <Vm::outbv(unsigned short, unsigned char)>
c0018db0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018db4:	eb 53                	jmp    c0018e09 <Vm::faultHandler(regs*)+0x5be>
c0018db6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018db9:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018dbd:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018dc2:	74 03                	je     c0018dc7 <Vm::faultHandler(regs*)+0x57c>
c0018dc4:	ef                   	out    dx,eax
c0018dc5:	eb cf                	jmp    c0018d96 <Vm::faultHandler(regs*)+0x54b>
c0018dc7:	66 ef                	out    dx,ax
c0018dc9:	eb cb                	jmp    c0018d96 <Vm::faultHandler(regs*)+0x54b>
c0018dcb:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018dd2:	83 ec 0c             	sub    esp,0xc
c0018dd5:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018dd9:	50                   	push   eax
c0018dda:	e8 12 f8 ff ff       	call   c00185f1 <Vm::inbv(unsigned short)>
c0018ddf:	0f b6 c0             	movzx  eax,al
c0018de2:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018de5:	eb 1f                	jmp    c0018e06 <Vm::faultHandler(regs*)+0x5bb>
c0018de7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018dea:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018def:	74 03                	je     c0018df4 <Vm::faultHandler(regs*)+0x5a9>
c0018df1:	ed                   	in     eax,dx
c0018df2:	eb 0d                	jmp    c0018e01 <Vm::faultHandler(regs*)+0x5b6>
c0018df4:	66 ed                	in     ax,dx
c0018df6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018df9:	0f b7 c0             	movzx  eax,ax
c0018dfc:	66 31 d2             	xor    dx,dx
c0018dff:	09 d0                	or     eax,edx
c0018e01:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018e04:	eb 1a                	jmp    c0018e20 <Vm::faultHandler(regs*)+0x5d5>
c0018e06:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e09:	83 c4 10             	add    esp,0x10
c0018e0c:	eb 15                	jmp    c0018e23 <Vm::faultHandler(regs*)+0x5d8>
c0018e0e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018e11:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018e14:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018e19:	74 03                	je     c0018e1e <Vm::faultHandler(regs*)+0x5d3>
c0018e1b:	ef                   	out    dx,eax
c0018e1c:	eb 02                	jmp    c0018e20 <Vm::faultHandler(regs*)+0x5d5>
c0018e1e:	66 ef                	out    dx,ax
c0018e20:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e23:	b0 01                	mov    al,0x1
c0018e25:	eb 56                	jmp    c0018e7d <Vm::faultHandler(regs*)+0x632>
c0018e27:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0018e2b:	50                   	push   eax
c0018e2c:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0018e30:	50                   	push   eax
c0018e31:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0018e35:	50                   	push   eax
c0018e36:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0018e3a:	50                   	push   eax
c0018e3b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018e3f:	50                   	push   eax
c0018e40:	52                   	push   edx
c0018e41:	52                   	push   edx
c0018e42:	68 9e 1c 02 c0       	push   0xc0021c9e
c0018e47:	e8 99 5f ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0018e4c:	83 c4 20             	add    esp,0x20
c0018e4f:	83 ec 0c             	sub    esp,0xc
c0018e52:	6a 60                	push   0x60
c0018e54:	e8 98 f7 ff ff       	call   c00185f1 <Vm::inbv(unsigned short)>
c0018e59:	83 c4 10             	add    esp,0x10
c0018e5c:	3c 1c                	cmp    al,0x1c
c0018e5e:	74 04                	je     c0018e64 <Vm::faultHandler(regs*)+0x619>
c0018e60:	3c 5a                	cmp    al,0x5a
c0018e62:	75 eb                	jne    c0018e4f <Vm::faultHandler(regs*)+0x604>
c0018e64:	3c 5a                	cmp    al,0x5a
c0018e66:	74 04                	je     c0018e6c <Vm::faultHandler(regs*)+0x621>
c0018e68:	3c 1c                	cmp    al,0x1c
c0018e6a:	75 0f                	jne    c0018e7b <Vm::faultHandler(regs*)+0x630>
c0018e6c:	83 ec 0c             	sub    esp,0xc
c0018e6f:	6a 60                	push   0x60
c0018e71:	e8 7b f7 ff ff       	call   c00185f1 <Vm::inbv(unsigned short)>
c0018e76:	83 c4 10             	add    esp,0x10
c0018e79:	eb e9                	jmp    c0018e64 <Vm::faultHandler(regs*)+0x619>
c0018e7b:	31 c0                	xor    eax,eax
c0018e7d:	83 c4 1c             	add    esp,0x1c
c0018e80:	5b                   	pop    ebx
c0018e81:	5e                   	pop    esi
c0018e82:	5f                   	pop    edi
c0018e83:	5d                   	pop    ebp
c0018e84:	c3                   	ret    
c0018e85:	90                   	nop

c0018e86 <FAT::getName()>:
c0018e86:	b8 fc 1c 02 c0       	mov    eax,0xc0021cfc
c0018e8b:	c3                   	ret    

c0018e8c <FAT::tell(void*, unsigned long long*)>:
c0018e8c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018e91:	75 06                	jne    c0018e99 <FAT::tell(void*, unsigned long long*)+0xd>
c0018e93:	b8 04 00 00 00       	mov    eax,0x4
c0018e98:	c3                   	ret    
c0018e99:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018e9e:	75 06                	jne    c0018ea6 <FAT::tell(void*, unsigned long long*)+0x1a>
c0018ea0:	b8 04 00 00 00       	mov    eax,0x4
c0018ea5:	c3                   	ret    
c0018ea6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018eaa:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0018ead:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018eb0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018eb4:	89 01                	mov    DWORD PTR [ecx],eax
c0018eb6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018eb9:	b8 00 00 00 00       	mov    eax,0x0
c0018ebe:	c3                   	ret    
c0018ebf:	90                   	nop

c0018ec0 <FAT::stat(void*, unsigned long long*)>:
c0018ec0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018ec5:	75 06                	jne    c0018ecd <FAT::stat(void*, unsigned long long*)+0xd>
c0018ec7:	b8 04 00 00 00       	mov    eax,0x4
c0018ecc:	c3                   	ret    
c0018ecd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018ed2:	75 06                	jne    c0018eda <FAT::stat(void*, unsigned long long*)+0x1a>
c0018ed4:	b8 04 00 00 00       	mov    eax,0x4
c0018ed9:	c3                   	ret    
c0018eda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ede:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018ee1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018ee4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018ee8:	89 01                	mov    DWORD PTR [ecx],eax
c0018eea:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018eed:	b8 00 00 00 00       	mov    eax,0x0
c0018ef2:	c3                   	ret    
c0018ef3:	90                   	nop

c0018ef4 <FAT::~FAT()>:
c0018ef4:	83 ec 0c             	sub    esp,0xc
c0018ef7:	ba 80 1d 02 c0       	mov    edx,0xc0021d80
c0018efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f00:	89 10                	mov    DWORD PTR [eax],edx
c0018f02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f06:	83 ec 0c             	sub    esp,0xc
c0018f09:	50                   	push   eax
c0018f0a:	e8 ff 61 ff ff       	call   c000f10e <Filesystem::~Filesystem()>
c0018f0f:	83 c4 10             	add    esp,0x10
c0018f12:	90                   	nop
c0018f13:	83 c4 0c             	add    esp,0xc
c0018f16:	c3                   	ret    
c0018f17:	90                   	nop

c0018f18 <FAT::~FAT()>:
c0018f18:	83 ec 0c             	sub    esp,0xc
c0018f1b:	83 ec 0c             	sub    esp,0xc
c0018f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f22:	e8 cd ff ff ff       	call   c0018ef4 <FAT::~FAT()>
c0018f27:	83 c4 10             	add    esp,0x10
c0018f2a:	83 ec 08             	sub    esp,0x8
c0018f2d:	6a 08                	push   0x8
c0018f2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f33:	e8 cd 5d ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c0018f38:	83 c4 10             	add    esp,0x10
c0018f3b:	83 c4 0c             	add    esp,0xc
c0018f3e:	c3                   	ret    
c0018f3f:	90                   	nop

c0018f40 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018f40:	83 ec 1c             	sub    esp,0x1c
c0018f43:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018f4a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018f4f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f53:	8b 04 85 20 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb9e0]
c0018f5a:	83 f8 ff             	cmp    eax,0xffffffff
c0018f5d:	75 34                	jne    c0018f93 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0018f5f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018f63:	88 c2                	mov    dl,al
c0018f65:	a1 00 46 02 c0       	mov    eax,ds:0xc0024600
c0018f6a:	01 d0                	add    eax,edx
c0018f6c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018f70:	8b 15 00 46 02 c0    	mov    edx,DWORD PTR ds:0xc0024600
c0018f76:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f7a:	89 14 85 20 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb9e0],edx
c0018f81:	a1 00 46 02 c0       	mov    eax,ds:0xc0024600
c0018f86:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018f8a:	89 14 85 a0 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb960],edx
c0018f91:	eb 17                	jmp    c0018faa <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0018f93:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018f97:	88 c2                	mov    dl,al
c0018f99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f9d:	8b 04 85 20 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb9e0]
c0018fa4:	01 d0                	add    eax,edx
c0018fa6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018faa:	83 ec 04             	sub    esp,0x4
c0018fad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018fb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018fb5:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018fb9:	50                   	push   eax
c0018fba:	e8 a6 da fe ff       	call   c0006a65 <f_getlabel>
c0018fbf:	83 c4 10             	add    esp,0x10
c0018fc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018fc6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018fcb:	75 07                	jne    c0018fd4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0018fcd:	b8 00 00 00 00       	mov    eax,0x0
c0018fd2:	eb 05                	jmp    c0018fd9 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0018fd4:	b8 01 00 00 00       	mov    eax,0x1
c0018fd9:	83 c4 1c             	add    esp,0x1c
c0018fdc:	c3                   	ret    
c0018fdd:	90                   	nop

c0018fde <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018fde:	57                   	push   edi
c0018fdf:	83 ec 58             	sub    esp,0x58
c0018fe2:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018fea:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018fee:	b9 0f 00 00 00       	mov    ecx,0xf
c0018ff3:	b8 00 00 00 00       	mov    eax,0x0
c0018ff8:	fc                   	cld    
c0018ff9:	89 d7                	mov    edi,edx
c0018ffb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018ffd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019001:	8b 04 85 20 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb9e0]
c0019008:	83 f8 ff             	cmp    eax,0xffffffff
c001900b:	75 34                	jne    c0019041 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001900d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019011:	88 c2                	mov    dl,al
c0019013:	a1 00 46 02 c0       	mov    eax,ds:0xc0024600
c0019018:	01 d0                	add    eax,edx
c001901a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001901e:	8b 15 00 46 02 c0    	mov    edx,DWORD PTR ds:0xc0024600
c0019024:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019028:	89 14 85 20 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb9e0],edx
c001902f:	a1 00 46 02 c0       	mov    eax,ds:0xc0024600
c0019034:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019038:	89 14 85 a0 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb960],edx
c001903f:	eb 17                	jmp    c0019058 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0019041:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019045:	88 c2                	mov    dl,al
c0019047:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001904b:	8b 04 85 20 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb9e0]
c0019052:	01 d0                	add    eax,edx
c0019054:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019058:	83 ec 08             	sub    esp,0x8
c001905b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001905f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019063:	50                   	push   eax
c0019064:	e8 f5 76 fe ff       	call   c000075e <strcat>
c0019069:	83 c4 10             	add    esp,0x10
c001906c:	83 ec 0c             	sub    esp,0xc
c001906f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019073:	50                   	push   eax
c0019074:	e8 da db fe ff       	call   c0006c53 <f_setlabel>
c0019079:	83 c4 10             	add    esp,0x10
c001907c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019080:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019085:	75 07                	jne    c001908e <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0019087:	b8 00 00 00 00       	mov    eax,0x0
c001908c:	eb 05                	jmp    c0019093 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001908e:	b8 01 00 00 00       	mov    eax,0x1
c0019093:	83 c4 58             	add    esp,0x58
c0019096:	5f                   	pop    edi
c0019097:	c3                   	ret    

c0019098 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019098:	83 ec 2c             	sub    esp,0x2c
c001909b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00190a3:	83 ec 08             	sub    esp,0x8
c00190a6:	68 20 1d 02 c0       	push   0xc0021d20
c00190ab:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00190af:	e8 44 76 fe ff       	call   c00006f8 <strcmp>
c00190b4:	83 c4 10             	add    esp,0x10
c00190b7:	85 c0                	test   eax,eax
c00190b9:	0f 94 c0             	sete   al
c00190bc:	84 c0                	test   al,al
c00190be:	74 0d                	je     c00190cd <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c00190c0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00190c8:	e9 a6 00 00 00       	jmp    c0019173 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00190cd:	83 ec 08             	sub    esp,0x8
c00190d0:	68 12 1d 02 c0       	push   0xc0021d12
c00190d5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00190d9:	e8 1a 76 fe ff       	call   c00006f8 <strcmp>
c00190de:	83 c4 10             	add    esp,0x10
c00190e1:	85 c0                	test   eax,eax
c00190e3:	0f 94 c0             	sete   al
c00190e6:	84 c0                	test   al,al
c00190e8:	74 0a                	je     c00190f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00190ea:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00190f2:	eb 7f                	jmp    c0019173 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00190f4:	83 ec 08             	sub    esp,0x8
c00190f7:	68 18 1d 02 c0       	push   0xc0021d18
c00190fc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019100:	e8 f3 75 fe ff       	call   c00006f8 <strcmp>
c0019105:	83 c4 10             	add    esp,0x10
c0019108:	85 c0                	test   eax,eax
c001910a:	0f 94 c0             	sete   al
c001910d:	84 c0                	test   al,al
c001910f:	74 0a                	je     c001911b <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0019111:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019119:	eb 58                	jmp    c0019173 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001911b:	83 ec 08             	sub    esp,0x8
c001911e:	68 cc f3 01 c0       	push   0xc001f3cc
c0019123:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019127:	e8 cc 75 fe ff       	call   c00006f8 <strcmp>
c001912c:	83 c4 10             	add    esp,0x10
c001912f:	85 c0                	test   eax,eax
c0019131:	0f 94 c0             	sete   al
c0019134:	84 c0                	test   al,al
c0019136:	74 0a                	je     c0019142 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0019138:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019140:	eb 31                	jmp    c0019173 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019142:	83 ec 08             	sub    esp,0x8
c0019145:	68 1e 1d 02 c0       	push   0xc0021d1e
c001914a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001914e:	e8 a5 75 fe ff       	call   c00006f8 <strcmp>
c0019153:	83 c4 10             	add    esp,0x10
c0019156:	85 c0                	test   eax,eax
c0019158:	0f 94 c0             	sete   al
c001915b:	84 c0                	test   al,al
c001915d:	74 0a                	je     c0019169 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001915f:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019167:	eb 0a                	jmp    c0019173 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019169:	b8 08 00 00 00       	mov    eax,0x8
c001916e:	e9 04 01 00 00       	jmp    c0019277 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019173:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001917a:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001917f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019183:	8b 04 85 20 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb9e0]
c001918a:	83 f8 ff             	cmp    eax,0xffffffff
c001918d:	75 34                	jne    c00191c3 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001918f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019193:	88 c2                	mov    dl,al
c0019195:	a1 00 46 02 c0       	mov    eax,ds:0xc0024600
c001919a:	01 d0                	add    eax,edx
c001919c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00191a0:	8b 15 00 46 02 c0    	mov    edx,DWORD PTR ds:0xc0024600
c00191a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00191aa:	89 14 85 20 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb9e0],edx
c00191b1:	a1 00 46 02 c0       	mov    eax,ds:0xc0024600
c00191b6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00191ba:	89 14 85 a0 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb960],edx
c00191c1:	eb 17                	jmp    c00191da <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00191c3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00191c7:	88 c2                	mov    dl,al
c00191c9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00191cd:	8b 04 85 20 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb9e0]
c00191d4:	01 d0                	add    eax,edx
c00191d6:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00191da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00191de:	88 04 24             	mov    BYTE PTR [esp],al
c00191e1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00191e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00191e9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00191f1:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00191f6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00191fe:	83 ec 0c             	sub    esp,0xc
c0019201:	68 00 20 00 00       	push   0x2000
c0019206:	e8 13 2a ff ff       	call   c000bc1e <malloc>
c001920b:	83 c4 10             	add    esp,0x10
c001920e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019212:	68 00 20 00 00       	push   0x2000
c0019217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001921b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001921f:	50                   	push   eax
c0019220:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019224:	50                   	push   eax
c0019225:	e8 74 de fe ff       	call   c000709e <f_mkfs>
c001922a:	83 c4 10             	add    esp,0x10
c001922d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019231:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019236:	75 07                	jne    c001923f <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0019238:	b8 00 00 00 00       	mov    eax,0x0
c001923d:	eb 38                	jmp    c0019277 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001923f:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019244:	75 17                	jne    c001925d <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0019246:	83 ec 0c             	sub    esp,0xc
c0019249:	68 50 1d 02 c0       	push   0xc0021d50
c001924e:	e8 92 5b ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c0019253:	83 c4 10             	add    esp,0x10
c0019256:	b8 09 00 00 00       	mov    eax,0x9
c001925b:	eb 1a                	jmp    c0019277 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001925d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019261:	83 ec 08             	sub    esp,0x8
c0019264:	50                   	push   eax
c0019265:	68 24 1d 02 c0       	push   0xc0021d24
c001926a:	e8 76 5b ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001926f:	83 c4 10             	add    esp,0x10
c0019272:	b8 01 00 00 00       	mov    eax,0x1
c0019277:	83 c4 2c             	add    esp,0x2c
c001927a:	c3                   	ret    
c001927b:	90                   	nop

c001927c <FAT::tryMount(LogicalDisk*, int)>:
c001927c:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0019282:	a1 00 46 02 c0       	mov    eax,ds:0xc0024600
c0019287:	83 f8 14             	cmp    eax,0x14
c001928a:	75 17                	jne    c00192a3 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001928c:	83 ec 0c             	sub    esp,0xc
c001928f:	68 36 1d 02 c0       	push   0xc0021d36
c0019294:	e8 e1 b7 ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c0019299:	83 c4 10             	add    esp,0x10
c001929c:	b0 00                	mov    al,0x0
c001929e:	e9 d7 01 00 00       	jmp    c001947a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00192a3:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00192aa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00192b0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00192b6:	3d 00 02 00 00       	cmp    eax,0x200
c00192bb:	74 07                	je     c00192c4 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00192bd:	b0 00                	mov    al,0x0
c00192bf:	e9 b6 01 00 00       	jmp    c001947a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00192c4:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00192cc:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00192d3:	8b 04 85 20 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb9e0]
c00192da:	83 f8 ff             	cmp    eax,0xffffffff
c00192dd:	74 07                	je     c00192e6 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00192df:	b0 01                	mov    al,0x1
c00192e1:	e9 94 01 00 00       	jmp    c001947a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00192e6:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00192f0:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00192f8:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00192ff:	88 c2                	mov    dl,al
c0019301:	a1 00 46 02 c0       	mov    eax,ds:0xc0024600
c0019306:	01 d0                	add    eax,edx
c0019308:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001930f:	8b 15 00 46 02 c0    	mov    edx,DWORD PTR ds:0xc0024600
c0019315:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001931c:	89 14 85 20 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb9e0],edx
c0019323:	a1 00 46 02 c0       	mov    eax,ds:0xc0024600
c0019328:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001932f:	89 14 85 a0 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb960],edx
c0019336:	83 ec 0c             	sub    esp,0xc
c0019339:	68 54 02 00 00       	push   0x254
c001933e:	e8 db 28 ff ff       	call   c000bc1e <malloc>
c0019343:	83 c4 10             	add    esp,0x10
c0019346:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001934d:	83 ec 04             	sub    esp,0x4
c0019350:	6a 00                	push   0x0
c0019352:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019359:	50                   	push   eax
c001935a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019361:	e8 f6 b8 fe ff       	call   c0004c5c <f_mount>
c0019366:	83 c4 10             	add    esp,0x10
c0019369:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019370:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0019378:	74 19                	je     c0019393 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001937a:	83 ec 0c             	sub    esp,0xc
c001937d:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019384:	e8 b5 28 ff ff       	call   c000bc3e <rfree>
c0019389:	83 c4 10             	add    esp,0x10
c001938c:	b0 00                	mov    al,0x0
c001938e:	e9 e7 00 00 00       	jmp    c001947a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019393:	83 ec 04             	sub    esp,0x4
c0019396:	68 00 01 00 00       	push   0x100
c001939b:	6a 00                	push   0x0
c001939d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00193a4:	50                   	push   eax
c00193a5:	e8 5e 72 fe ff       	call   c0000608 <memset>
c00193aa:	83 c4 10             	add    esp,0x10
c00193ad:	83 ec 08             	sub    esp,0x8
c00193b0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00193b7:	50                   	push   eax
c00193b8:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00193bf:	50                   	push   eax
c00193c0:	e8 99 73 fe ff       	call   c000075e <strcat>
c00193c5:	83 c4 10             	add    esp,0x10
c00193c8:	83 ec 08             	sub    esp,0x8
c00193cb:	68 44 1d 02 c0       	push   0xc0021d44
c00193d0:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00193d7:	50                   	push   eax
c00193d8:	e8 81 73 fe ff       	call   c000075e <strcat>
c00193dd:	83 c4 10             	add    esp,0x10
c00193e0:	83 ec 04             	sub    esp,0x4
c00193e3:	6a 01                	push   0x1
c00193e5:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00193ec:	50                   	push   eax
c00193ed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00193f1:	50                   	push   eax
c00193f2:	e8 c7 b8 fe ff       	call   c0004cbe <f_open>
c00193f7:	83 c4 10             	add    esp,0x10
c00193fa:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019401:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019408:	85 c0                	test   eax,eax
c001940a:	74 0a                	je     c0019416 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001940c:	78 2d                	js     c001943b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001940e:	83 e8 04             	sub    eax,0x4
c0019411:	83 f8 01             	cmp    eax,0x1
c0019414:	77 25                	ja     c001943b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0019416:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001941e:	83 ec 0c             	sub    esp,0xc
c0019421:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019425:	50                   	push   eax
c0019426:	e8 e5 c3 fe ff       	call   c0005810 <f_close>
c001942b:	83 c4 10             	add    esp,0x10
c001942e:	90                   	nop
c001942f:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0019437:	74 3a                	je     c0019473 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0019439:	eb 2d                	jmp    c0019468 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001943b:	83 ec 0c             	sub    esp,0xc
c001943e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019445:	e8 f4 27 ff ff       	call   c000bc3e <rfree>
c001944a:	83 c4 10             	add    esp,0x10
c001944d:	83 ec 04             	sub    esp,0x4
c0019450:	6a 00                	push   0x0
c0019452:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019459:	50                   	push   eax
c001945a:	6a 00                	push   0x0
c001945c:	e8 fb b7 fe ff       	call   c0004c5c <f_mount>
c0019461:	83 c4 10             	add    esp,0x10
c0019464:	b0 00                	mov    al,0x0
c0019466:	eb 12                	jmp    c001947a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019468:	a1 00 46 02 c0       	mov    eax,ds:0xc0024600
c001946d:	40                   	inc    eax
c001946e:	a3 00 46 02 c0       	mov    ds:0xc0024600,eax
c0019473:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001947a:	81 c4 6c 03 00 00    	add    esp,0x36c
c0019480:	c3                   	ret    
c0019481:	90                   	nop

c0019482 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019482:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0019488:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0019490:	74 0a                	je     c001949c <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0019492:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001949a:	75 0a                	jne    c00194a6 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001949c:	b8 04 00 00 00       	mov    eax,0x4
c00194a1:	e9 db 00 00 00       	jmp    c0019581 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00194a6:	83 ec 08             	sub    esp,0x8
c00194a9:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00194b0:	50                   	push   eax
c00194b1:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c00194b8:	e8 5d c9 fe ff       	call   c0005e1a <f_readdir>
c00194bd:	83 c4 10             	add    esp,0x10
c00194c0:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c00194c7:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00194cd:	83 ec 0c             	sub    esp,0xc
c00194d0:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00194d7:	83 c0 1a             	add    eax,0x1a
c00194da:	50                   	push   eax
c00194db:	e8 45 71 fe ff       	call   c0000625 <strlen>
c00194e0:	83 c4 10             	add    esp,0x10
c00194e3:	ba 00 00 00 00       	mov    edx,0x0
c00194e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00194ec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00194f0:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c00194f7:	0f b6 c0             	movzx  eax,al
c00194fa:	83 e0 10             	and    eax,0x10
c00194fd:	74 07                	je     c0019506 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c00194ff:	b8 02 00 00 00       	mov    eax,0x2
c0019504:	eb 05                	jmp    c001950b <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0019506:	b8 01 00 00 00       	mov    eax,0x1
c001950b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001950f:	83 ec 08             	sub    esp,0x8
c0019512:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019519:	83 c0 1a             	add    eax,0x1a
c001951c:	50                   	push   eax
c001951d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019521:	83 c0 10             	add    eax,0x10
c0019524:	50                   	push   eax
c0019525:	e8 7d 71 fe ff       	call   c00006a7 <strcpy>
c001952a:	83 c4 10             	add    esp,0x10
c001952d:	83 ec 04             	sub    esp,0x4
c0019530:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0019537:	8d 44 24 08          	lea    eax,[esp+0x8]
c001953b:	50                   	push   eax
c001953c:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0019543:	e8 8a 70 fe ff       	call   c00005d2 <memcpy>
c0019548:	83 c4 10             	add    esp,0x10
c001954b:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0019552:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019558:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001955f:	84 c0                	test   al,al
c0019561:	75 07                	jne    c001956a <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0019563:	b8 07 00 00 00       	mov    eax,0x7
c0019568:	eb 17                	jmp    c0019581 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001956a:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0019571:	85 c0                	test   eax,eax
c0019573:	75 07                	jne    c001957c <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0019575:	b8 00 00 00 00       	mov    eax,0x0
c001957a:	eb 05                	jmp    c0019581 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001957c:	b8 01 00 00 00       	mov    eax,0x1
c0019581:	81 c4 3c 02 00 00    	add    esp,0x23c
c0019587:	c3                   	ret    

c0019588 <FAT::read(void*, unsigned long, void*, int*)>:
c0019588:	83 ec 1c             	sub    esp,0x1c
c001958b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019590:	74 07                	je     c0019599 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0019592:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019597:	75 07                	jne    c00195a0 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0019599:	b8 04 00 00 00       	mov    eax,0x4
c001959e:	eb 3d                	jmp    c00195dd <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00195a0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00195a4:	50                   	push   eax
c00195a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00195a9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00195ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195b1:	e8 44 bb fe ff       	call   c00050fa <f_read>
c00195b6:	83 c4 10             	add    esp,0x10
c00195b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00195c1:	89 c2                	mov    edx,eax
c00195c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00195c7:	89 10                	mov    DWORD PTR [eax],edx
c00195c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195cd:	85 c0                	test   eax,eax
c00195cf:	75 07                	jne    c00195d8 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00195d1:	b8 00 00 00 00       	mov    eax,0x0
c00195d6:	eb 05                	jmp    c00195dd <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00195d8:	b8 01 00 00 00       	mov    eax,0x1
c00195dd:	83 c4 1c             	add    esp,0x1c
c00195e0:	c3                   	ret    
c00195e1:	90                   	nop

c00195e2 <FAT::write(void*, unsigned long, void*, int*)>:
c00195e2:	83 ec 1c             	sub    esp,0x1c
c00195e5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00195ea:	74 07                	je     c00195f3 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00195ec:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00195f1:	75 07                	jne    c00195fa <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00195f3:	b8 04 00 00 00       	mov    eax,0x4
c00195f8:	eb 3d                	jmp    c0019637 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00195fa:	8d 44 24 08          	lea    eax,[esp+0x8]
c00195fe:	50                   	push   eax
c00195ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019603:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019607:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001960b:	e8 6a bd fe ff       	call   c000537a <f_write>
c0019610:	83 c4 10             	add    esp,0x10
c0019613:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001961b:	89 c2                	mov    edx,eax
c001961d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019621:	89 10                	mov    DWORD PTR [eax],edx
c0019623:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019627:	85 c0                	test   eax,eax
c0019629:	75 07                	jne    c0019632 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001962b:	b8 00 00 00 00       	mov    eax,0x0
c0019630:	eb 05                	jmp    c0019637 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0019632:	b8 01 00 00 00       	mov    eax,0x1
c0019637:	83 c4 1c             	add    esp,0x1c
c001963a:	c3                   	ret    
c001963b:	90                   	nop

c001963c <FAT::close(void*)>:
c001963c:	83 ec 1c             	sub    esp,0x1c
c001963f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019644:	75 07                	jne    c001964d <FAT::close(void*)+0x11>
c0019646:	b8 04 00 00 00       	mov    eax,0x4
c001964b:	eb 36                	jmp    c0019683 <FAT::close(void*)+0x47>
c001964d:	83 ec 0c             	sub    esp,0xc
c0019650:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019654:	e8 b7 c1 fe ff       	call   c0005810 <f_close>
c0019659:	83 c4 10             	add    esp,0x10
c001965c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019660:	83 ec 0c             	sub    esp,0xc
c0019663:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019667:	e8 c2 25 ff ff       	call   c000bc2e <free>
c001966c:	83 c4 10             	add    esp,0x10
c001966f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019673:	85 c0                	test   eax,eax
c0019675:	75 07                	jne    c001967e <FAT::close(void*)+0x42>
c0019677:	b8 00 00 00 00       	mov    eax,0x0
c001967c:	eb 05                	jmp    c0019683 <FAT::close(void*)+0x47>
c001967e:	b8 01 00 00 00       	mov    eax,0x1
c0019683:	83 c4 1c             	add    esp,0x1c
c0019686:	c3                   	ret    
c0019687:	90                   	nop

c0019688 <FAT::closeDir(void*)>:
c0019688:	83 ec 1c             	sub    esp,0x1c
c001968b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019690:	75 07                	jne    c0019699 <FAT::closeDir(void*)+0x11>
c0019692:	b8 04 00 00 00       	mov    eax,0x4
c0019697:	eb 36                	jmp    c00196cf <FAT::closeDir(void*)+0x47>
c0019699:	83 ec 0c             	sub    esp,0xc
c001969c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196a0:	e8 53 c7 fe ff       	call   c0005df8 <f_closedir>
c00196a5:	83 c4 10             	add    esp,0x10
c00196a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00196ac:	83 ec 0c             	sub    esp,0xc
c00196af:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196b3:	e8 76 25 ff ff       	call   c000bc2e <free>
c00196b8:	83 c4 10             	add    esp,0x10
c00196bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00196bf:	85 c0                	test   eax,eax
c00196c1:	75 07                	jne    c00196ca <FAT::closeDir(void*)+0x42>
c00196c3:	b8 00 00 00 00       	mov    eax,0x0
c00196c8:	eb 05                	jmp    c00196cf <FAT::closeDir(void*)+0x47>
c00196ca:	b8 01 00 00 00       	mov    eax,0x1
c00196cf:	83 c4 1c             	add    esp,0x1c
c00196d2:	c3                   	ret    
c00196d3:	90                   	nop

c00196d4 <FAT::seek(void*, unsigned long long)>:
c00196d4:	83 ec 2c             	sub    esp,0x2c
c00196d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00196db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00196df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00196e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00196e7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00196ec:	75 07                	jne    c00196f5 <FAT::seek(void*, unsigned long long)+0x21>
c00196ee:	b8 04 00 00 00       	mov    eax,0x4
c00196f3:	eb 2f                	jmp    c0019724 <FAT::seek(void*, unsigned long long)+0x50>
c00196f5:	83 ec 04             	sub    esp,0x4
c00196f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00196fc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019700:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019704:	e8 36 c1 fe ff       	call   c000583f <f_lseek>
c0019709:	83 c4 10             	add    esp,0x10
c001970c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019710:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019714:	85 c0                	test   eax,eax
c0019716:	75 07                	jne    c001971f <FAT::seek(void*, unsigned long long)+0x4b>
c0019718:	b8 00 00 00 00       	mov    eax,0x0
c001971d:	eb 05                	jmp    c0019724 <FAT::seek(void*, unsigned long long)+0x50>
c001971f:	b8 01 00 00 00       	mov    eax,0x1
c0019724:	83 c4 2c             	add    esp,0x2c
c0019727:	c3                   	ret    

c0019728 <fatWrapperReadDisk>:
c0019728:	83 ec 1c             	sub    esp,0x1c
c001972b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001972f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019733:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019737:	89 04 24             	mov    DWORD PTR [esp],eax
c001973a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001973e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019742:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019747:	8b 04 85 80 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc880]
c001974e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019752:	83 ec 0c             	sub    esp,0xc
c0019755:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019759:	52                   	push   edx
c001975a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001975e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019762:	50                   	push   eax
c0019763:	e8 00 86 ff ff       	call   c0011d68 <LogicalDisk::read(unsigned long long, int, void*)>
c0019768:	83 c4 20             	add    esp,0x20
c001976b:	83 c4 1c             	add    esp,0x1c
c001976e:	c3                   	ret    

c001976f <fatWrapperWriteDisk>:
c001976f:	83 ec 1c             	sub    esp,0x1c
c0019772:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019776:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001977a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001977e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019781:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019785:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019789:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001978e:	8b 04 85 80 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc880]
c0019795:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019799:	83 ec 0c             	sub    esp,0xc
c001979c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197a0:	52                   	push   edx
c00197a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197a9:	50                   	push   eax
c00197aa:	e8 25 86 ff ff       	call   c0011dd4 <LogicalDisk::write(unsigned long long, int, void*)>
c00197af:	83 c4 20             	add    esp,0x20
c00197b2:	83 c4 1c             	add    esp,0x1c
c00197b5:	c3                   	ret    

c00197b6 <fatWrapperIoctl>:
c00197b6:	53                   	push   ebx
c00197b7:	83 ec 28             	sub    esp,0x28
c00197ba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00197be:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00197c2:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00197c6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00197ca:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00197cf:	75 31                	jne    c0019802 <fatWrapperIoctl+0x4c>
c00197d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00197d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00197d9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00197de:	8b 04 85 80 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc880]
c00197e5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00197eb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00197f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00197f5:	66 89 02             	mov    WORD PTR [edx],ax
c00197f8:	b8 00 00 00 00       	mov    eax,0x0
c00197fd:	e9 b2 00 00 00       	jmp    c00198b4 <fatWrapperIoctl+0xfe>
c0019802:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0019807:	75 6a                	jne    c0019873 <fatWrapperIoctl+0xbd>
c0019809:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001980d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019811:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019816:	8b 04 85 80 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc880]
c001981d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019823:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019829:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001982f:	89 c8                	mov    eax,ecx
c0019831:	89 da                	mov    edx,ebx
c0019833:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019837:	c1 e0 0a             	shl    eax,0xa
c001983a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001983f:	8b 0c 8d 80 37 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc880]
c0019846:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001984c:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019852:	89 cb                	mov    ebx,ecx
c0019854:	c1 fb 1f             	sar    ebx,0x1f
c0019857:	53                   	push   ebx
c0019858:	51                   	push   ecx
c0019859:	52                   	push   edx
c001985a:	50                   	push   eax
c001985b:	e8 1c 4b 00 00       	call   c001e37c <__udivdi3>
c0019860:	83 c4 10             	add    esp,0x10
c0019863:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019867:	89 01                	mov    DWORD PTR [ecx],eax
c0019869:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001986c:	b8 00 00 00 00       	mov    eax,0x0
c0019871:	eb 41                	jmp    c00198b4 <fatWrapperIoctl+0xfe>
c0019873:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0019878:	75 07                	jne    c0019881 <fatWrapperIoctl+0xcb>
c001987a:	b8 00 00 00 00       	mov    eax,0x0
c001987f:	eb 33                	jmp    c00198b4 <fatWrapperIoctl+0xfe>
c0019881:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0019886:	75 19                	jne    c00198a1 <fatWrapperIoctl+0xeb>
c0019888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001988c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019890:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019894:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001989a:	b8 00 00 00 00       	mov    eax,0x0
c001989f:	eb 13                	jmp    c00198b4 <fatWrapperIoctl+0xfe>
c00198a1:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00198a6:	75 07                	jne    c00198af <fatWrapperIoctl+0xf9>
c00198a8:	b8 00 00 00 00       	mov    eax,0x0
c00198ad:	eb 05                	jmp    c00198b4 <fatWrapperIoctl+0xfe>
c00198af:	b8 04 00 00 00       	mov    eax,0x4
c00198b4:	83 c4 28             	add    esp,0x28
c00198b7:	5b                   	pop    ebx
c00198b8:	c3                   	ret    
c00198b9:	90                   	nop

c00198ba <FAT::FAT()>:
c00198ba:	83 ec 1c             	sub    esp,0x1c
c00198bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198c1:	83 ec 0c             	sub    esp,0xc
c00198c4:	50                   	push   eax
c00198c5:	e8 20 58 ff ff       	call   c000f0ea <Filesystem::Filesystem()>
c00198ca:	83 c4 10             	add    esp,0x10
c00198cd:	ba 80 1d 02 c0       	mov    edx,0xc0021d80
c00198d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198d6:	89 10                	mov    DWORD PTR [eax],edx
c00198d8:	c7 05 00 46 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024600,0x0
c00198e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00198ea:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00198ef:	7f 15                	jg     c0019906 <FAT::FAT()+0x4c>
c00198f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198f5:	c7 04 85 20 46 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdb9e0],0xffffffff
c0019900:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019904:	eb e4                	jmp    c00198ea <FAT::FAT()+0x30>
c0019906:	90                   	nop
c0019907:	83 c4 1c             	add    esp,0x1c
c001990a:	c3                   	ret    
c001990b:	90                   	nop

c001990c <FAT::fixFilepath(char*)>:
c001990c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019910:	8a 00                	mov    al,BYTE PTR [eax]
c0019912:	3c 40                	cmp    al,0x40
c0019914:	7e 2c                	jle    c0019942 <FAT::fixFilepath(char*)+0x36>
c0019916:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001991a:	8a 00                	mov    al,BYTE PTR [eax]
c001991c:	83 e8 41             	sub    eax,0x41
c001991f:	88 c2                	mov    dl,al
c0019921:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019925:	88 10                	mov    BYTE PTR [eax],dl
c0019927:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001992b:	8a 00                	mov    al,BYTE PTR [eax]
c001992d:	0f be c0             	movsx  eax,al
c0019930:	8b 04 85 20 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb9e0]
c0019937:	83 c0 30             	add    eax,0x30
c001993a:	88 c2                	mov    dl,al
c001993c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019940:	88 10                	mov    BYTE PTR [eax],dl
c0019942:	90                   	nop
c0019943:	c3                   	ret    

c0019944 <FAT::open(char const*, void**, FileOpenMode)>:
c0019944:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001994a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019952:	74 0a                	je     c001995e <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0019954:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001995c:	75 0a                	jne    c0019968 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001995e:	b8 04 00 00 00       	mov    eax,0x4
c0019963:	e9 fd 00 00 00       	jmp    c0019a65 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0019968:	83 ec 08             	sub    esp,0x8
c001996b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019972:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019976:	50                   	push   eax
c0019977:	e8 2b 6d fe ff       	call   c00006a7 <strcpy>
c001997c:	83 c4 10             	add    esp,0x10
c001997f:	83 ec 08             	sub    esp,0x8
c0019982:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019986:	50                   	push   eax
c0019987:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001998e:	e8 79 ff ff ff       	call   c001990c <FAT::fixFilepath(char*)>
c0019993:	83 c4 10             	add    esp,0x10
c0019996:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001999e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00199a5:	83 e0 01             	and    eax,0x1
c00199a8:	74 08                	je     c00199b2 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00199aa:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00199b2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00199b9:	83 e0 04             	and    eax,0x4
c00199bc:	74 10                	je     c00199ce <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00199be:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00199c6:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00199ce:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00199d5:	83 e0 02             	and    eax,0x2
c00199d8:	74 08                	je     c00199e2 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00199da:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00199e2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00199e9:	83 e0 08             	and    eax,0x8
c00199ec:	74 08                	je     c00199f6 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00199ee:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00199f6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00199fd:	83 e0 10             	and    eax,0x10
c0019a00:	74 08                	je     c0019a0a <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0019a02:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0019a0a:	83 ec 0c             	sub    esp,0xc
c0019a0d:	68 50 02 00 00       	push   0x250
c0019a12:	e8 07 22 ff ff       	call   c000bc1e <malloc>
c0019a17:	83 c4 10             	add    esp,0x10
c0019a1a:	89 c2                	mov    edx,eax
c0019a1c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019a23:	89 10                	mov    DWORD PTR [eax],edx
c0019a25:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019a2d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019a34:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a36:	83 ec 04             	sub    esp,0x4
c0019a39:	52                   	push   edx
c0019a3a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019a3e:	52                   	push   edx
c0019a3f:	50                   	push   eax
c0019a40:	e8 79 b2 fe ff       	call   c0004cbe <f_open>
c0019a45:	83 c4 10             	add    esp,0x10
c0019a48:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019a4f:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019a57:	74 07                	je     c0019a60 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0019a59:	b8 01 00 00 00       	mov    eax,0x1
c0019a5e:	eb 05                	jmp    c0019a65 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0019a60:	b8 00 00 00 00       	mov    eax,0x0
c0019a65:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a6b:	c3                   	ret    

c0019a6c <FAT::openDir(char const*, void**)>:
c0019a6c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019a72:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019a7a:	74 0a                	je     c0019a86 <FAT::openDir(char const*, void**)+0x1a>
c0019a7c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019a84:	75 07                	jne    c0019a8d <FAT::openDir(char const*, void**)+0x21>
c0019a86:	b8 04 00 00 00       	mov    eax,0x4
c0019a8b:	eb 7d                	jmp    c0019b0a <FAT::openDir(char const*, void**)+0x9e>
c0019a8d:	83 ec 08             	sub    esp,0x8
c0019a90:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a97:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a9b:	50                   	push   eax
c0019a9c:	e8 06 6c fe ff       	call   c00006a7 <strcpy>
c0019aa1:	83 c4 10             	add    esp,0x10
c0019aa4:	83 ec 08             	sub    esp,0x8
c0019aa7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019aab:	50                   	push   eax
c0019aac:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ab3:	e8 54 fe ff ff       	call   c001990c <FAT::fixFilepath(char*)>
c0019ab8:	83 c4 10             	add    esp,0x10
c0019abb:	83 ec 0c             	sub    esp,0xc
c0019abe:	6a 4c                	push   0x4c
c0019ac0:	e8 59 21 ff ff       	call   c000bc1e <malloc>
c0019ac5:	83 c4 10             	add    esp,0x10
c0019ac8:	89 c2                	mov    edx,eax
c0019aca:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019ad1:	89 10                	mov    DWORD PTR [eax],edx
c0019ad3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019ada:	8b 00                	mov    eax,DWORD PTR [eax]
c0019adc:	83 ec 08             	sub    esp,0x8
c0019adf:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019ae3:	52                   	push   edx
c0019ae4:	50                   	push   eax
c0019ae5:	e8 0c c2 fe ff       	call   c0005cf6 <f_opendir>
c0019aea:	83 c4 10             	add    esp,0x10
c0019aed:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019af4:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019afc:	74 07                	je     c0019b05 <FAT::openDir(char const*, void**)+0x99>
c0019afe:	b8 01 00 00 00       	mov    eax,0x1
c0019b03:	eb 05                	jmp    c0019b0a <FAT::openDir(char const*, void**)+0x9e>
c0019b05:	b8 00 00 00 00       	mov    eax,0x0
c0019b0a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019b10:	c3                   	ret    
c0019b11:	90                   	nop

c0019b12 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019b12:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019b18:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019b20:	75 0a                	jne    c0019b2c <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0019b22:	b8 04 00 00 00       	mov    eax,0x4
c0019b27:	e9 c9 00 00 00       	jmp    c0019bf5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019b2c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019b34:	75 0a                	jne    c0019b40 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0019b36:	b8 04 00 00 00       	mov    eax,0x4
c0019b3b:	e9 b5 00 00 00       	jmp    c0019bf5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019b40:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019b48:	75 0a                	jne    c0019b54 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0019b4a:	b8 04 00 00 00       	mov    eax,0x4
c0019b4f:	e9 a1 00 00 00       	jmp    c0019bf5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019b54:	83 ec 08             	sub    esp,0x8
c0019b57:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019b5e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019b65:	50                   	push   eax
c0019b66:	e8 3c 6b fe ff       	call   c00006a7 <strcpy>
c0019b6b:	83 c4 10             	add    esp,0x10
c0019b6e:	83 ec 08             	sub    esp,0x8
c0019b71:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019b78:	50                   	push   eax
c0019b79:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019b80:	e8 87 fd ff ff       	call   c001990c <FAT::fixFilepath(char*)>
c0019b85:	83 c4 10             	add    esp,0x10
c0019b88:	83 ec 08             	sub    esp,0x8
c0019b8b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019b8f:	50                   	push   eax
c0019b90:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019b97:	50                   	push   eax
c0019b98:	e8 18 c3 fe ff       	call   c0005eb5 <f_stat>
c0019b9d:	83 c4 10             	add    esp,0x10
c0019ba0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019ba7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019bae:	85 c0                	test   eax,eax
c0019bb0:	74 07                	je     c0019bb9 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0019bb2:	83 f8 04             	cmp    eax,0x4
c0019bb5:	74 32                	je     c0019be9 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0019bb7:	eb 37                	jmp    c0019bf0 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0019bb9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019bbd:	0f b6 c0             	movzx  eax,al
c0019bc0:	83 e0 10             	and    eax,0x10
c0019bc3:	0f 95 c2             	setne  dl
c0019bc6:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019bcd:	88 10                	mov    BYTE PTR [eax],dl
c0019bcf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019bd2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019bd6:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019bdd:	89 01                	mov    DWORD PTR [ecx],eax
c0019bdf:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019be2:	b8 00 00 00 00       	mov    eax,0x0
c0019be7:	eb 0c                	jmp    c0019bf5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019be9:	b8 02 00 00 00       	mov    eax,0x2
c0019bee:	eb 05                	jmp    c0019bf5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019bf0:	b8 01 00 00 00       	mov    eax,0x1
c0019bf5:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019bfb:	c3                   	ret    

c0019bfc <FAT::unlink(char const*)>:
c0019bfc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019c02:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019c0a:	75 07                	jne    c0019c13 <FAT::unlink(char const*)+0x17>
c0019c0c:	b8 04 00 00 00       	mov    eax,0x4
c0019c11:	eb 5c                	jmp    c0019c6f <FAT::unlink(char const*)+0x73>
c0019c13:	83 ec 08             	sub    esp,0x8
c0019c16:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c1d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c21:	50                   	push   eax
c0019c22:	e8 80 6a fe ff       	call   c00006a7 <strcpy>
c0019c27:	83 c4 10             	add    esp,0x10
c0019c2a:	83 ec 08             	sub    esp,0x8
c0019c2d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c31:	50                   	push   eax
c0019c32:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c39:	e8 ce fc ff ff       	call   c001990c <FAT::fixFilepath(char*)>
c0019c3e:	83 c4 10             	add    esp,0x10
c0019c41:	83 ec 0c             	sub    esp,0xc
c0019c44:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c48:	50                   	push   eax
c0019c49:	e8 b9 c5 fe ff       	call   c0006207 <f_unlink>
c0019c4e:	83 c4 10             	add    esp,0x10
c0019c51:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019c58:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019c5f:	85 c0                	test   eax,eax
c0019c61:	75 07                	jne    c0019c6a <FAT::unlink(char const*)+0x6e>
c0019c63:	b8 00 00 00 00       	mov    eax,0x0
c0019c68:	eb 05                	jmp    c0019c6f <FAT::unlink(char const*)+0x73>
c0019c6a:	b8 01 00 00 00       	mov    eax,0x1
c0019c6f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019c75:	c3                   	ret    

c0019c76 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019c76:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019c7c:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019c83:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019c8a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019c8e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019c92:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019c9a:	75 0a                	jne    c0019ca6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019c9c:	b8 04 00 00 00       	mov    eax,0x4
c0019ca1:	e9 1c 01 00 00       	jmp    c0019dc2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019ca6:	83 ec 08             	sub    esp,0x8
c0019ca9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019cb0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019cb4:	50                   	push   eax
c0019cb5:	e8 ed 69 fe ff       	call   c00006a7 <strcpy>
c0019cba:	83 c4 10             	add    esp,0x10
c0019cbd:	83 ec 08             	sub    esp,0x8
c0019cc0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019cc4:	50                   	push   eax
c0019cc5:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019ccc:	e8 3b fc ff ff       	call   c001990c <FAT::fixFilepath(char*)>
c0019cd1:	83 c4 10             	add    esp,0x10
c0019cd4:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019cdc:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019ce4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ce9:	83 e0 01             	and    eax,0x1
c0019cec:	74 08                	je     c0019cf6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0019cee:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0019cf6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019cfb:	83 e0 02             	and    eax,0x2
c0019cfe:	74 08                	je     c0019d08 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0019d00:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0019d08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019d0d:	83 e0 04             	and    eax,0x4
c0019d10:	74 08                	je     c0019d1a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0019d12:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0019d1a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019d1f:	83 e0 08             	and    eax,0x8
c0019d22:	74 08                	je     c0019d2c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0019d24:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0019d2c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019d31:	83 e0 01             	and    eax,0x1
c0019d34:	74 08                	je     c0019d3e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019d36:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0019d3e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019d43:	83 e0 02             	and    eax,0x2
c0019d46:	74 08                	je     c0019d50 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0019d48:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0019d50:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019d55:	83 e0 04             	and    eax,0x4
c0019d58:	74 08                	je     c0019d62 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0019d5a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0019d62:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019d67:	83 e0 08             	and    eax,0x8
c0019d6a:	74 08                	je     c0019d74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0019d6c:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0019d74:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019d7b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0019d82:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019d8a:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019d92:	83 ec 04             	sub    esp,0x4
c0019d95:	52                   	push   edx
c0019d96:	50                   	push   eax
c0019d97:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019d9b:	50                   	push   eax
c0019d9c:	e8 08 cb fe ff       	call   c00068a9 <f_chmod>
c0019da1:	83 c4 10             	add    esp,0x10
c0019da4:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019dab:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019db2:	85 c0                	test   eax,eax
c0019db4:	75 07                	jne    c0019dbd <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0019db6:	b8 00 00 00 00       	mov    eax,0x0
c0019dbb:	eb 05                	jmp    c0019dc2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019dbd:	b8 01 00 00 00       	mov    eax,0x1
c0019dc2:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019dc8:	c3                   	ret    
c0019dc9:	90                   	nop

c0019dca <FAT::rename(char const*, char const*)>:
c0019dca:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019dd0:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019dd8:	74 0a                	je     c0019de4 <FAT::rename(char const*, char const*)+0x1a>
c0019dda:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019de2:	75 0a                	jne    c0019dee <FAT::rename(char const*, char const*)+0x24>
c0019de4:	b8 04 00 00 00       	mov    eax,0x4
c0019de9:	e9 98 00 00 00       	jmp    c0019e86 <FAT::rename(char const*, char const*)+0xbc>
c0019dee:	83 ec 08             	sub    esp,0x8
c0019df1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019df8:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019dff:	50                   	push   eax
c0019e00:	e8 a2 68 fe ff       	call   c00006a7 <strcpy>
c0019e05:	83 c4 10             	add    esp,0x10
c0019e08:	83 ec 08             	sub    esp,0x8
c0019e0b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019e12:	50                   	push   eax
c0019e13:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019e1a:	e8 ed fa ff ff       	call   c001990c <FAT::fixFilepath(char*)>
c0019e1f:	83 c4 10             	add    esp,0x10
c0019e22:	83 ec 08             	sub    esp,0x8
c0019e25:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019e2c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e30:	50                   	push   eax
c0019e31:	e8 71 68 fe ff       	call   c00006a7 <strcpy>
c0019e36:	83 c4 10             	add    esp,0x10
c0019e39:	83 ec 08             	sub    esp,0x8
c0019e3c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e40:	50                   	push   eax
c0019e41:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019e48:	e8 bf fa ff ff       	call   c001990c <FAT::fixFilepath(char*)>
c0019e4d:	83 c4 10             	add    esp,0x10
c0019e50:	83 ec 08             	sub    esp,0x8
c0019e53:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e57:	50                   	push   eax
c0019e58:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019e5f:	50                   	push   eax
c0019e60:	e8 51 c7 fe ff       	call   c00065b6 <f_rename>
c0019e65:	83 c4 10             	add    esp,0x10
c0019e68:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019e6f:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019e76:	85 c0                	test   eax,eax
c0019e78:	75 07                	jne    c0019e81 <FAT::rename(char const*, char const*)+0xb7>
c0019e7a:	b8 00 00 00 00       	mov    eax,0x0
c0019e7f:	eb 05                	jmp    c0019e86 <FAT::rename(char const*, char const*)+0xbc>
c0019e81:	b8 01 00 00 00       	mov    eax,0x1
c0019e86:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019e8c:	c3                   	ret    
c0019e8d:	90                   	nop

c0019e8e <FAT::mkdir(char const*)>:
c0019e8e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019e94:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e9c:	75 07                	jne    c0019ea5 <FAT::mkdir(char const*)+0x17>
c0019e9e:	b8 04 00 00 00       	mov    eax,0x4
c0019ea3:	eb 5c                	jmp    c0019f01 <FAT::mkdir(char const*)+0x73>
c0019ea5:	83 ec 08             	sub    esp,0x8
c0019ea8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019eaf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019eb3:	50                   	push   eax
c0019eb4:	e8 ee 67 fe ff       	call   c00006a7 <strcpy>
c0019eb9:	83 c4 10             	add    esp,0x10
c0019ebc:	83 ec 08             	sub    esp,0x8
c0019ebf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ec3:	50                   	push   eax
c0019ec4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ecb:	e8 3c fa ff ff       	call   c001990c <FAT::fixFilepath(char*)>
c0019ed0:	83 c4 10             	add    esp,0x10
c0019ed3:	83 ec 0c             	sub    esp,0xc
c0019ed6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019eda:	50                   	push   eax
c0019edb:	e8 aa c4 fe ff       	call   c000638a <f_mkdir>
c0019ee0:	83 c4 10             	add    esp,0x10
c0019ee3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019eea:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019ef1:	85 c0                	test   eax,eax
c0019ef3:	75 07                	jne    c0019efc <FAT::mkdir(char const*)+0x6e>
c0019ef5:	b8 00 00 00 00       	mov    eax,0x0
c0019efa:	eb 05                	jmp    c0019f01 <FAT::mkdir(char const*)+0x73>
c0019efc:	b8 01 00 00 00       	mov    eax,0x1
c0019f01:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019f07:	c3                   	ret    

c0019f08 <FAT::exists(char const*)>:
c0019f08:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019f0e:	83 ec 08             	sub    esp,0x8
c0019f11:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f18:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019f1c:	50                   	push   eax
c0019f1d:	e8 85 67 fe ff       	call   c00006a7 <strcpy>
c0019f22:	83 c4 10             	add    esp,0x10
c0019f25:	83 ec 08             	sub    esp,0x8
c0019f28:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019f2c:	50                   	push   eax
c0019f2d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f34:	e8 d3 f9 ff ff       	call   c001990c <FAT::fixFilepath(char*)>
c0019f39:	83 c4 10             	add    esp,0x10
c0019f3c:	83 ec 08             	sub    esp,0x8
c0019f3f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0019f46:	50                   	push   eax
c0019f47:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019f4b:	50                   	push   eax
c0019f4c:	e8 64 bf fe ff       	call   c0005eb5 <f_stat>
c0019f51:	83 c4 10             	add    esp,0x10
c0019f54:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019f5b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019f62:	85 c0                	test   eax,eax
c0019f64:	75 04                	jne    c0019f6a <FAT::exists(char const*)+0x62>
c0019f66:	b0 01                	mov    al,0x1
c0019f68:	eb 02                	jmp    c0019f6c <FAT::exists(char const*)+0x64>
c0019f6a:	b0 00                	mov    al,0x0
c0019f6c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019f72:	c3                   	ret    
c0019f73:	90                   	nop

c0019f74 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019f74:	b8 08 00 00 00       	mov    eax,0x8
c0019f79:	c3                   	ret    

c0019f7a <ISO9660::seek(void*, unsigned long long)>:
c0019f7a:	53                   	push   ebx
c0019f7b:	b8 04 00 00 00       	mov    eax,0x4
c0019f80:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019f84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f88:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019f8c:	85 d2                	test   edx,edx
c0019f8e:	74 17                	je     c0019fa7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019f90:	89 c8                	mov    eax,ecx
c0019f92:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0019f95:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0019f98:	b8 01 00 00 00       	mov    eax,0x1
c0019f9d:	73 08                	jae    c0019fa7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019f9f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0019fa2:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0019fa5:	31 c0                	xor    eax,eax
c0019fa7:	5b                   	pop    ebx
c0019fa8:	c3                   	ret    
c0019fa9:	90                   	nop

c0019faa <ISO9660::tell(void*, unsigned long long*)>:
c0019faa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019fae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fb2:	85 d2                	test   edx,edx
c0019fb4:	74 12                	je     c0019fc8 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019fb6:	85 c0                	test   eax,eax
c0019fb8:	74 0e                	je     c0019fc8 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019fba:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019fbd:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0019fc0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019fc3:	89 10                	mov    DWORD PTR [eax],edx
c0019fc5:	31 c0                	xor    eax,eax
c0019fc7:	c3                   	ret    
c0019fc8:	b8 04 00 00 00       	mov    eax,0x4
c0019fcd:	c3                   	ret    

c0019fce <ISO9660::getName()>:
c0019fce:	b8 dc 1d 02 c0       	mov    eax,0xc0021ddc
c0019fd3:	c3                   	ret    

c0019fd4 <ISO9660::stat(void*, unsigned long long*)>:
c0019fd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019fd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fdc:	85 d2                	test   edx,edx
c0019fde:	74 12                	je     c0019ff2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019fe0:	85 c0                	test   eax,eax
c0019fe2:	74 0e                	je     c0019ff2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019fe4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0019fe7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0019fea:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019fed:	89 10                	mov    DWORD PTR [eax],edx
c0019fef:	31 c0                	xor    eax,eax
c0019ff1:	c3                   	ret    
c0019ff2:	b8 04 00 00 00       	mov    eax,0x4
c0019ff7:	c3                   	ret    

c0019ff8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019ff8:	b8 01 00 00 00       	mov    eax,0x1
c0019ffd:	c3                   	ret    

c0019ffe <ISO9660::unlink(char const*)>:
c0019ffe:	b8 01 00 00 00       	mov    eax,0x1
c001a003:	c3                   	ret    

c001a004 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a004:	b8 01 00 00 00       	mov    eax,0x1
c001a009:	c3                   	ret    

c001a00a <ISO9660::rename(char const*, char const*)>:
c001a00a:	b8 01 00 00 00       	mov    eax,0x1
c001a00f:	c3                   	ret    

c001a010 <ISO9660::mkdir(char const*)>:
c001a010:	b8 01 00 00 00       	mov    eax,0x1
c001a015:	c3                   	ret    

c001a016 <ISO9660::close(void*)>:
c001a016:	83 ec 0c             	sub    esp,0xc
c001a019:	b8 04 00 00 00       	mov    eax,0x4
c001a01e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a022:	85 d2                	test   edx,edx
c001a024:	74 0e                	je     c001a034 <ISO9660::close(void*)+0x1e>
c001a026:	83 ec 0c             	sub    esp,0xc
c001a029:	52                   	push   edx
c001a02a:	e8 ff 1b ff ff       	call   c000bc2e <free>
c001a02f:	83 c4 10             	add    esp,0x10
c001a032:	31 c0                	xor    eax,eax
c001a034:	83 c4 0c             	add    esp,0xc
c001a037:	c3                   	ret    

c001a038 <ISO9660::closeDir(void*)>:
c001a038:	83 ec 0c             	sub    esp,0xc
c001a03b:	b8 04 00 00 00       	mov    eax,0x4
c001a040:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a044:	85 d2                	test   edx,edx
c001a046:	74 0e                	je     c001a056 <ISO9660::closeDir(void*)+0x1e>
c001a048:	83 ec 0c             	sub    esp,0xc
c001a04b:	52                   	push   edx
c001a04c:	e8 dd 1b ff ff       	call   c000bc2e <free>
c001a051:	83 c4 10             	add    esp,0x10
c001a054:	31 c0                	xor    eax,eax
c001a056:	83 c4 0c             	add    esp,0xc
c001a059:	c3                   	ret    

c001a05a <ISO9660::~ISO9660()>:
c001a05a:	83 ec 0c             	sub    esp,0xc
c001a05d:	ba 30 1e 02 c0       	mov    edx,0xc0021e30
c001a062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a066:	89 10                	mov    DWORD PTR [eax],edx
c001a068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a06c:	83 ec 0c             	sub    esp,0xc
c001a06f:	50                   	push   eax
c001a070:	e8 99 50 ff ff       	call   c000f10e <Filesystem::~Filesystem()>
c001a075:	83 c4 10             	add    esp,0x10
c001a078:	90                   	nop
c001a079:	83 c4 0c             	add    esp,0xc
c001a07c:	c3                   	ret    
c001a07d:	90                   	nop

c001a07e <ISO9660::~ISO9660()>:
c001a07e:	83 ec 0c             	sub    esp,0xc
c001a081:	83 ec 0c             	sub    esp,0xc
c001a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a088:	e8 cd ff ff ff       	call   c001a05a <ISO9660::~ISO9660()>
c001a08d:	83 c4 10             	add    esp,0x10
c001a090:	83 ec 08             	sub    esp,0x8
c001a093:	6a 08                	push   0x8
c001a095:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a099:	e8 67 4c ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c001a09e:	83 c4 10             	add    esp,0x10
c001a0a1:	83 c4 0c             	add    esp,0xc
c001a0a4:	c3                   	ret    

c001a0a5 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001a0a5:	55                   	push   ebp
c001a0a6:	31 c9                	xor    ecx,ecx
c001a0a8:	57                   	push   edi
c001a0a9:	56                   	push   esi
c001a0aa:	53                   	push   ebx
c001a0ab:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001a0af:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a0b3:	89 eb                	mov    ebx,ebp
c001a0b5:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001a0b9:	39 ce                	cmp    esi,ecx
c001a0bb:	7e 17                	jle    c001a0d4 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001a0bd:	31 d2                	xor    edx,edx
c001a0bf:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001a0c3:	7d 13                	jge    c001a0d8 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001a0c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a0c9:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a0cc:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001a0cf:	75 0d                	jne    c001a0de <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001a0d1:	42                   	inc    edx
c001a0d2:	eb eb                	jmp    c001a0bf <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001a0d4:	31 c0                	xor    eax,eax
c001a0d6:	eb 0a                	jmp    c001a0e2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001a0d8:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001a0dc:	eb 04                	jmp    c001a0e2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001a0de:	41                   	inc    ecx
c001a0df:	43                   	inc    ebx
c001a0e0:	eb d7                	jmp    c001a0b9 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001a0e2:	5b                   	pop    ebx
c001a0e3:	5e                   	pop    esi
c001a0e4:	5f                   	pop    edi
c001a0e5:	5d                   	pop    ebp
c001a0e6:	c3                   	ret    

c001a0e7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a0e7:	56                   	push   esi
c001a0e8:	53                   	push   ebx
c001a0e9:	52                   	push   edx
c001a0ea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a0ee:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a0f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a0f6:	39 0d 00 47 02 c0    	cmp    DWORD PTR ds:0xc0024700,ecx
c001a0fc:	75 08                	jne    c001a106 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001a0fe:	38 05 28 2c 02 c0    	cmp    BYTE PTR ds:0xc0022c28,al
c001a104:	74 2b                	je     c001a131 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001a106:	83 ec 0c             	sub    esp,0xc
c001a109:	a2 28 2c 02 c0       	mov    ds:0xc0022c28,al
c001a10e:	68 20 47 02 c0       	push   0xc0024720
c001a113:	0f be c0             	movsx  eax,al
c001a116:	6a 01                	push   0x1
c001a118:	89 0d 00 47 02 c0    	mov    DWORD PTR ds:0xc0024700,ecx
c001a11e:	31 db                	xor    ebx,ebx
c001a120:	53                   	push   ebx
c001a121:	51                   	push   ecx
c001a122:	ff 34 85 7c 36 02 c0 	push   DWORD PTR [eax*4-0x3ffdc984]
c001a129:	e8 3a 7c ff ff       	call   c0011d68 <LogicalDisk::read(unsigned long long, int, void*)>
c001a12e:	83 c4 20             	add    esp,0x20
c001a131:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001a139:	c7 44 24 14 20 47 02 c0 	mov    DWORD PTR [esp+0x14],0xc0024720
c001a141:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001a145:	58                   	pop    eax
c001a146:	5b                   	pop    ebx
c001a147:	5e                   	pop    esi
c001a148:	e9 85 64 fe ff       	jmp    c00005d2 <memcpy>
c001a14d:	90                   	nop

c001a14e <ISO9660::tryMount(LogicalDisk*, int)>:
c001a14e:	81 ec 10 08 00 00    	sub    esp,0x810
c001a154:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001a15b:	83 c0 41             	add    eax,0x41
c001a15e:	0f be c0             	movsx  eax,al
c001a161:	50                   	push   eax
c001a162:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a166:	50                   	push   eax
c001a167:	6a 10                	push   0x10
c001a169:	e8 79 ff ff ff       	call   c001a0e7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a16e:	83 c4 10             	add    esp,0x10
c001a171:	31 c0                	xor    eax,eax
c001a173:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a178:	75 1d                	jne    c001a197 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a17a:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a17f:	75 16                	jne    c001a197 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a181:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a186:	75 0f                	jne    c001a197 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a188:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a18d:	75 08                	jne    c001a197 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a18f:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a194:	0f 94 c0             	sete   al
c001a197:	81 c4 0c 08 00 00    	add    esp,0x80c
c001a19d:	c3                   	ret    

c001a19e <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a19e:	55                   	push   ebp
c001a19f:	57                   	push   edi
c001a1a0:	56                   	push   esi
c001a1a1:	53                   	push   ebx
c001a1a2:	81 ec 34 08 00 00    	sub    esp,0x834
c001a1a8:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001a1af:	55                   	push   ebp
c001a1b0:	68 f7 1d 02 c0       	push   0xc0021df7
c001a1b5:	e8 2b 4c ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001a1ba:	83 c4 10             	add    esp,0x10
c001a1bd:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001a1c5:	0f 84 06 02 00 00    	je     c001a3d1 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a1cb:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001a1d3:	0f 84 f8 01 00 00    	je     c001a3d1 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a1d9:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a1e0:	b8 01 00 00 00       	mov    eax,0x1
c001a1e5:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001a1e9:	0f 85 e7 01 00 00    	jne    c001a3d6 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a1ef:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001a1f2:	31 d2                	xor    edx,edx
c001a1f4:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001a1f7:	89 e9                	mov    ecx,ebp
c001a1f9:	89 d3                	mov    ebx,edx
c001a1fb:	01 f1                	add    ecx,esi
c001a1fd:	11 fb                	adc    ebx,edi
c001a1ff:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a203:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a207:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001a20e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001a211:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001a214:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001a218:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a21c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a220:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a224:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001a228:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001a22c:	72 19                	jb     c001a247 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001a22e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a236:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a23a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a23d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a241:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a245:	eb 13                	jmp    c001a25a <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001a247:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a24b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a24f:	29 f0                	sub    eax,esi
c001a251:	19 fa                	sbb    edx,edi
c001a253:	89 04 24             	mov    DWORD PTR [esp],eax
c001a256:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a25a:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001a261:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a264:	8b 00                	mov    eax,DWORD PTR [eax]
c001a266:	53                   	push   ebx
c001a267:	0f a4 c2 0b          	shld   edx,eax,0xb
c001a26b:	c1 e0 0b             	shl    eax,0xb
c001a26e:	01 c6                	add    esi,eax
c001a270:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a277:	11 d7                	adc    edi,edx
c001a279:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a27d:	89 fa                	mov    edx,edi
c001a27f:	50                   	push   eax
c001a280:	8d 44 24 28          	lea    eax,[esp+0x28]
c001a284:	50                   	push   eax
c001a285:	89 f0                	mov    eax,esi
c001a287:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a28b:	50                   	push   eax
c001a28c:	e8 56 fe ff ff       	call   c001a0e7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a291:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a298:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a29c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a29f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001a2a3:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001a2a9:	83 c4 10             	add    esp,0x10
c001a2ac:	b8 00 08 00 00       	mov    eax,0x800
c001a2b1:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001a2b5:	29 d0                	sub    eax,edx
c001a2b7:	39 c1                	cmp    ecx,eax
c001a2b9:	83 db 00             	sbb    ebx,0x0
c001a2bc:	7d 19                	jge    c001a2d7 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001a2be:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a2c3:	75 16                	jne    c001a2db <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001a2c5:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a2cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a2d2:	e9 f6 00 00 00       	jmp    c001a3cd <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001a2d7:	89 c5                	mov    ebp,eax
c001a2d9:	eb 03                	jmp    c001a2de <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001a2db:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001a2de:	51                   	push   ecx
c001a2df:	55                   	push   ebp
c001a2e0:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001a2e4:	50                   	push   eax
c001a2e5:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001a2ec:	e8 e1 62 fe ff       	call   c00005d2 <memcpy>
c001a2f1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a2f5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a2f9:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001a300:	01 e8                	add    eax,ebp
c001a302:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a306:	89 e8                	mov    eax,ebp
c001a308:	99                   	cdq    
c001a309:	01 ee                	add    esi,ebp
c001a30b:	11 d7                	adc    edi,edx
c001a30d:	29 e9                	sub    ecx,ebp
c001a30f:	19 d3                	sbb    ebx,edx
c001a311:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a315:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a319:	83 c4 10             	add    esp,0x10
c001a31c:	b8 ff 07 00 00       	mov    eax,0x7ff
c001a321:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001a324:	b8 00 00 00 00       	mov    eax,0x0
c001a329:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a32d:	7d 3f                	jge    c001a36e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001a32f:	52                   	push   edx
c001a330:	89 fa                	mov    edx,edi
c001a332:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a339:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a33d:	50                   	push   eax
c001a33e:	89 f0                	mov    eax,esi
c001a340:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a344:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a348:	50                   	push   eax
c001a349:	e8 99 fd ff ff       	call   c001a0e7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a34e:	81 c6 00 08 00 00    	add    esi,0x800
c001a354:	83 d7 00             	adc    edi,0x0
c001a357:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001a35f:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001a367:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001a36c:	eb ab                	jmp    c001a319 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001a36e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a372:	0b 04 24             	or     eax,DWORD PTR [esp]
c001a375:	74 34                	je     c001a3ab <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001a377:	89 fa                	mov    edx,edi
c001a379:	50                   	push   eax
c001a37a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a381:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a385:	50                   	push   eax
c001a386:	89 f0                	mov    eax,esi
c001a388:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a38c:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a390:	55                   	push   ebp
c001a391:	50                   	push   eax
c001a392:	e8 50 fd ff ff       	call   c001a0e7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a397:	83 c4 0c             	add    esp,0xc
c001a39a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001a39e:	55                   	push   ebp
c001a39f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3a3:	e8 2a 62 fe ff       	call   c00005d2 <memcpy>
c001a3a8:	83 c4 10             	add    esp,0x10
c001a3ab:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a3b2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a3b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a3ba:	89 38                	mov    DWORD PTR [eax],edi
c001a3bc:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a3c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3c7:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001a3ca:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001a3cd:	31 c0                	xor    eax,eax
c001a3cf:	eb 05                	jmp    c001a3d6 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a3d1:	b8 04 00 00 00       	mov    eax,0x4
c001a3d6:	81 c4 2c 08 00 00    	add    esp,0x82c
c001a3dc:	5b                   	pop    ebx
c001a3dd:	5e                   	pop    esi
c001a3de:	5f                   	pop    edi
c001a3df:	5d                   	pop    ebp
c001a3e0:	c3                   	ret    
c001a3e1:	90                   	nop

c001a3e2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a3e2:	55                   	push   ebp
c001a3e3:	57                   	push   edi
c001a3e4:	56                   	push   esi
c001a3e5:	53                   	push   ebx
c001a3e6:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001a3ec:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001a3f3:	85 f6                	test   esi,esi
c001a3f5:	0f 84 64 02 00 00    	je     c001a65f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001a3fb:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001a403:	0f 84 56 02 00 00    	je     c001a65f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001a409:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001a40c:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001a40f:	75 0a                	jne    c001a41b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001a411:	b8 07 00 00 00       	mov    eax,0x7
c001a416:	e9 49 02 00 00       	jmp    c001a664 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001a41b:	50                   	push   eax
c001a41c:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a420:	50                   	push   eax
c001a421:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a428:	53                   	push   ebx
c001a429:	8b 06                	mov    eax,DWORD PTR [esi]
c001a42b:	c1 e0 0b             	shl    eax,0xb
c001a42e:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001a431:	c1 e8 0b             	shr    eax,0xb
c001a434:	50                   	push   eax
c001a435:	e8 ad fc ff ff       	call   c001a0e7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a43a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a43d:	83 c4 10             	add    esp,0x10
c001a440:	89 c1                	mov    ecx,eax
c001a442:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001a445:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a44b:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001a44e:	84 db                	test   bl,bl
c001a450:	0f 85 90 00 00 00    	jne    c001a4e6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001a456:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001a45c:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a462:	29 c7                	sub    edi,eax
c001a464:	89 fb                	mov    ebx,edi
c001a466:	c1 fb 1f             	sar    ebx,0x1f
c001a469:	01 f8                	add    eax,edi
c001a46b:	11 da                	adc    edx,ebx
c001a46d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a471:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a475:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001a478:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001a47b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a47e:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a481:	89 04 24             	mov    DWORD PTR [esp],eax
c001a484:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a488:	89 d8                	mov    eax,ebx
c001a48a:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001a48d:	ba 00 00 00 00       	mov    edx,0x0
c001a492:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a496:	b8 00 00 00 00       	mov    eax,0x0
c001a49b:	73 0b                	jae    c001a4a8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a49d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a4a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a4a4:	29 f8                	sub    eax,edi
c001a4a6:	19 da                	sbb    edx,ebx
c001a4a8:	89 d3                	mov    ebx,edx
c001a4aa:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a4ad:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a4b0:	09 c3                	or     ebx,eax
c001a4b2:	0f 84 59 ff ff ff    	je     c001a411 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001a4b8:	55                   	push   ebp
c001a4b9:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a4bd:	50                   	push   eax
c001a4be:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a4c5:	53                   	push   ebx
c001a4c6:	8b 06                	mov    eax,DWORD PTR [esi]
c001a4c8:	c1 e0 0b             	shl    eax,0xb
c001a4cb:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001a4cf:	c1 e8 0b             	shr    eax,0xb
c001a4d2:	50                   	push   eax
c001a4d3:	e8 0f fc ff ff       	call   c001a0e7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a4d8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a4db:	83 c4 10             	add    esp,0x10
c001a4de:	25 ff 07 00 00       	and    eax,0x7ff
c001a4e3:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001a4e6:	57                   	push   edi
c001a4e7:	6a 28                	push   0x28
c001a4e9:	6a 00                	push   0x0
c001a4eb:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a4ef:	50                   	push   eax
c001a4f0:	e8 13 61 fe ff       	call   c0000608 <memset>
c001a4f5:	31 d2                	xor    edx,edx
c001a4f7:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a4fa:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a500:	89 f8                	mov    eax,edi
c001a502:	83 c0 21             	add    eax,0x21
c001a505:	83 d2 00             	adc    edx,0x0
c001a508:	89 c7                	mov    edi,eax
c001a50a:	89 d5                	mov    ebp,edx
c001a50c:	83 c4 10             	add    esp,0x10
c001a50f:	31 c9                	xor    ecx,ecx
c001a511:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001a518:	83 f9 28             	cmp    ecx,0x28
c001a51b:	88 04 24             	mov    BYTE PTR [esp],al
c001a51e:	0f 94 c2             	sete   dl
c001a521:	88 d0                	mov    al,dl
c001a523:	ba ff 07 00 00       	mov    edx,0x7ff
c001a528:	39 fa                	cmp    edx,edi
c001a52a:	ba 00 00 00 00       	mov    edx,0x0
c001a52f:	19 ea                	sbb    edx,ebp
c001a531:	0f 92 c2             	setb   dl
c001a534:	09 c2                	or     edx,eax
c001a536:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001a53a:	0f 94 c0             	sete   al
c001a53d:	08 d0                	or     al,dl
c001a53f:	75 16                	jne    c001a557 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a541:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001a545:	74 10                	je     c001a557 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a547:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a54a:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001a54e:	41                   	inc    ecx
c001a54f:	83 c7 01             	add    edi,0x1
c001a552:	83 d5 00             	adc    ebp,0x0
c001a555:	eb ba                	jmp    c001a511 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001a557:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001a55e:	83 ec 0c             	sub    esp,0xc
c001a561:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001a565:	57                   	push   edi
c001a566:	e8 ba 60 fe ff       	call   c0000625 <strlen>
c001a56b:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001a573:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a577:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001a57e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a581:	5a                   	pop    edx
c001a582:	25 ff 07 00 00       	and    eax,0x7ff
c001a587:	01 c8                	add    eax,ecx
c001a589:	59                   	pop    ecx
c001a58a:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001a590:	83 e0 02             	and    eax,0x2
c001a593:	3c 01                	cmp    al,0x1
c001a595:	19 c0                	sbb    eax,eax
c001a597:	83 c0 02             	add    eax,0x2
c001a59a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a59e:	57                   	push   edi
c001a59f:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001a5a3:	50                   	push   eax
c001a5a4:	e8 fe 60 fe ff       	call   c00006a7 <strcpy>
c001a5a9:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001a5ad:	83 c4 10             	add    esp,0x10
c001a5b0:	84 c0                	test   al,al
c001a5b2:	75 21                	jne    c001a5d5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001a5b4:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001a5bc:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a5c4:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a5cc:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001a5d3:	eb 28                	jmp    c001a5fd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001a5d5:	fe c8                	dec    al
c001a5d7:	75 24                	jne    c001a5fd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001a5d9:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001a5e1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a5e9:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a5f1:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001a5f8:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001a5fd:	0f b6 fb             	movzx  edi,bl
c001a600:	31 db                	xor    ebx,ebx
c001a602:	50                   	push   eax
c001a603:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001a60a:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a60e:	50                   	push   eax
c001a60f:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001a616:	e8 b7 5f fe ff       	call   c00005d2 <memcpy>
c001a61b:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001a622:	89 f9                	mov    ecx,edi
c001a624:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a62a:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001a62d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a630:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001a633:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a636:	83 c4 10             	add    esp,0x10
c001a639:	39 c7                	cmp    edi,eax
c001a63b:	89 df                	mov    edi,ebx
c001a63d:	19 d7                	sbb    edi,edx
c001a63f:	72 10                	jb     c001a651 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001a641:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001a648:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001a64f:	eb 0a                	jmp    c001a65b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001a651:	29 c8                	sub    eax,ecx
c001a653:	19 da                	sbb    edx,ebx
c001a655:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a658:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a65b:	31 c0                	xor    eax,eax
c001a65d:	eb 05                	jmp    c001a664 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001a65f:	b8 04 00 00 00       	mov    eax,0x4
c001a664:	81 c4 5c 09 00 00    	add    esp,0x95c
c001a66a:	5b                   	pop    ebx
c001a66b:	5e                   	pop    esi
c001a66c:	5f                   	pop    edi
c001a66d:	5d                   	pop    ebp
c001a66e:	c3                   	ret    

c001a66f <readRoot(unsigned int*, unsigned int*, char)>:
c001a66f:	81 ec 40 08 00 00    	sub    esp,0x840
c001a675:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001a67d:	50                   	push   eax
c001a67e:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a682:	50                   	push   eax
c001a683:	6a 10                	push   0x10
c001a685:	e8 5d fa ff ff       	call   c001a0e7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a68a:	83 c4 0c             	add    esp,0xc
c001a68d:	6a 22                	push   0x22
c001a68f:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001a696:	50                   	push   eax
c001a697:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a69b:	50                   	push   eax
c001a69c:	e8 31 5f fe ff       	call   c00005d2 <memcpy>
c001a6a1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a6a8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a6ac:	89 10                	mov    DWORD PTR [eax],edx
c001a6ae:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a6b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a6b9:	89 10                	mov    DWORD PTR [eax],edx
c001a6bb:	b0 01                	mov    al,0x1
c001a6bd:	81 c4 4c 08 00 00    	add    esp,0x84c
c001a6c3:	c3                   	ret    

c001a6c4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001a6c4:	55                   	push   ebp
c001a6c5:	57                   	push   edi
c001a6c6:	56                   	push   esi
c001a6c7:	53                   	push   ebx
c001a6c8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a6ce:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a6d5:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001a6dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a6e0:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001a6e4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a6e8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a6ec:	75 03                	jne    c001a6f1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a6ee:	83 c3 02             	add    ebx,0x2
c001a6f1:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001a6f4:	75 03                	jne    c001a6f9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001a6f6:	43                   	inc    ebx
c001a6f7:	eb f8                	jmp    c001a6f1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a6f9:	51                   	push   ecx
c001a6fa:	68 00 01 00 00       	push   0x100
c001a6ff:	6a 00                	push   0x0
c001a701:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a705:	50                   	push   eax
c001a706:	e8 fd 5e fe ff       	call   c0000608 <memset>
c001a70b:	83 c4 10             	add    esp,0x10
c001a70e:	31 d2                	xor    edx,edx
c001a710:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a713:	84 c0                	test   al,al
c001a715:	74 21                	je     c001a738 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001a717:	3c 2f                	cmp    al,0x2f
c001a719:	75 0b                	jne    c001a726 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001a71b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001a71f:	bd 01 00 00 00       	mov    ebp,0x1
c001a724:	eb 14                	jmp    c001a73a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001a726:	8d 48 9f             	lea    ecx,[eax-0x61]
c001a729:	80 f9 19             	cmp    cl,0x19
c001a72c:	77 03                	ja     c001a731 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a72e:	83 e8 20             	sub    eax,0x20
c001a731:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001a735:	42                   	inc    edx
c001a736:	eb d8                	jmp    c001a710 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001a738:	31 ed                	xor    ebp,ebp
c001a73a:	83 ec 0c             	sub    esp,0xc
c001a73d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001a744:	e8 d5 14 ff ff       	call   c000bc1e <malloc>
c001a749:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a750:	89 c6                	mov    esi,eax
c001a752:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001a758:	c1 ef 0b             	shr    edi,0xb
c001a75b:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001a762:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001a766:	83 c4 10             	add    esp,0x10
c001a769:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001a76e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a772:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001a779:	74 28                	je     c001a7a3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001a77b:	52                   	push   edx
c001a77c:	57                   	push   edi
c001a77d:	50                   	push   eax
c001a77e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a782:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a789:	e8 59 f9 ff ff       	call   c001a0e7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a78e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a792:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001a799:	05 00 08 00 00       	add    eax,0x800
c001a79e:	83 c4 10             	add    esp,0x10
c001a7a1:	eb cb                	jmp    c001a76e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001a7a3:	83 ec 0c             	sub    esp,0xc
c001a7a6:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a7aa:	57                   	push   edi
c001a7ab:	e8 75 5e fe ff       	call   c0000625 <strlen>
c001a7b0:	50                   	push   eax
c001a7b1:	57                   	push   edi
c001a7b2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001a7b9:	56                   	push   esi
c001a7ba:	e8 e6 f8 ff ff       	call   c001a0a5 <__memmem(unsigned char*, int, unsigned char*, int)>
c001a7bf:	83 c4 20             	add    esp,0x20
c001a7c2:	85 c0                	test   eax,eax
c001a7c4:	75 13                	jne    c001a7d9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001a7c6:	83 ec 0c             	sub    esp,0xc
c001a7c9:	56                   	push   esi
c001a7ca:	e8 5f 14 ff ff       	call   c000bc2e <free>
c001a7cf:	83 c4 10             	add    esp,0x10
c001a7d2:	31 c0                	xor    eax,eax
c001a7d4:	e9 b3 00 00 00       	jmp    c001a88c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a7d9:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001a7dd:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001a7e1:	c1 e7 08             	shl    edi,0x8
c001a7e4:	c1 e2 10             	shl    edx,0x10
c001a7e7:	09 d7                	or     edi,edx
c001a7e9:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001a7ed:	09 d7                	or     edi,edx
c001a7ef:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001a7f3:	c1 e2 18             	shl    edx,0x18
c001a7f6:	09 d7                	or     edi,edx
c001a7f8:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001a7fc:	89 d1                	mov    ecx,edx
c001a7fe:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001a802:	c1 e1 08             	shl    ecx,0x8
c001a805:	c1 e2 10             	shl    edx,0x10
c001a808:	09 ca                	or     edx,ecx
c001a80a:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001a80e:	09 ca                	or     edx,ecx
c001a810:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001a814:	c1 e1 18             	shl    ecx,0x18
c001a817:	09 ca                	or     edx,ecx
c001a819:	89 e9                	mov    ecx,ebp
c001a81b:	84 c9                	test   cl,cl
c001a81d:	74 3c                	je     c001a85b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001a81f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a823:	83 ec 0c             	sub    esp,0xc
c001a826:	56                   	push   esi
c001a827:	e8 02 14 ff ff       	call   c000bc2e <free>
c001a82c:	83 c4 0c             	add    esp,0xc
c001a82f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a836:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a83b:	50                   	push   eax
c001a83c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a843:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a84a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a84e:	52                   	push   edx
c001a84f:	57                   	push   edi
c001a850:	53                   	push   ebx
c001a851:	e8 6e fe ff ff       	call   c001a6c4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a856:	83 c4 20             	add    esp,0x20
c001a859:	eb 31                	jmp    c001a88c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a85b:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001a85e:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001a865:	d0 e8                	shr    al,1
c001a867:	89 3b                	mov    DWORD PTR [ebx],edi
c001a869:	83 e0 01             	and    eax,0x1
c001a86c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a873:	83 ec 0c             	sub    esp,0xc
c001a876:	89 13                	mov    DWORD PTR [ebx],edx
c001a878:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001a87f:	89 03                	mov    DWORD PTR [ebx],eax
c001a881:	56                   	push   esi
c001a882:	e8 a7 13 ff ff       	call   c000bc2e <free>
c001a887:	83 c4 10             	add    esp,0x10
c001a88a:	b0 01                	mov    al,0x1
c001a88c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a892:	5b                   	pop    ebx
c001a893:	5e                   	pop    esi
c001a894:	5f                   	pop    edi
c001a895:	5d                   	pop    ebp
c001a896:	c3                   	ret    

c001a897 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001a897:	55                   	push   ebp
c001a898:	57                   	push   edi
c001a899:	56                   	push   esi
c001a89a:	53                   	push   ebx
c001a89b:	83 ec 20             	sub    esp,0x20
c001a89e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a8a2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001a8a6:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a8aa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a8b2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001a8ba:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001a8bf:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001a8c5:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001a8cb:	57                   	push   edi
c001a8cc:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a8d0:	50                   	push   eax
c001a8d1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a8d5:	50                   	push   eax
c001a8d6:	e8 94 fd ff ff       	call   c001a66f <readRoot(unsigned int*, unsigned int*, char)>
c001a8db:	5a                   	pop    edx
c001a8dc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a8e0:	e8 40 5d fe ff       	call   c0000625 <strlen>
c001a8e5:	83 c4 10             	add    esp,0x10
c001a8e8:	83 f8 03             	cmp    eax,0x3
c001a8eb:	77 17                	ja     c001a904 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a8ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8f1:	89 03                	mov    DWORD PTR [ebx],eax
c001a8f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a8f7:	89 06                	mov    DWORD PTR [esi],eax
c001a8f9:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001a900:	b0 01                	mov    al,0x1
c001a902:	eb 19                	jmp    c001a91d <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001a904:	50                   	push   eax
c001a905:	55                   	push   ebp
c001a906:	57                   	push   edi
c001a907:	56                   	push   esi
c001a908:	53                   	push   ebx
c001a909:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a90d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a911:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a915:	e8 aa fd ff ff       	call   c001a6c4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a91a:	83 c4 20             	add    esp,0x20
c001a91d:	83 c4 1c             	add    esp,0x1c
c001a920:	5b                   	pop    ebx
c001a921:	5e                   	pop    esi
c001a922:	5f                   	pop    edi
c001a923:	5d                   	pop    ebp
c001a924:	c3                   	ret    
c001a925:	90                   	nop

c001a926 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a926:	57                   	push   edi
c001a927:	56                   	push   esi
c001a928:	53                   	push   ebx
c001a929:	83 ec 10             	sub    esp,0x10
c001a92c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a930:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a934:	85 ff                	test   edi,edi
c001a936:	74 7b                	je     c001a9b3 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a938:	85 f6                	test   esi,esi
c001a93a:	74 77                	je     c001a9b3 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a93c:	83 ec 0c             	sub    esp,0xc
c001a93f:	6a 1c                	push   0x1c
c001a941:	e8 d8 12 ff ff       	call   c000bc1e <malloc>
c001a946:	89 07                	mov    DWORD PTR [edi],eax
c001a948:	89 c3                	mov    ebx,eax
c001a94a:	58                   	pop    eax
c001a94b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a94f:	50                   	push   eax
c001a950:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a953:	50                   	push   eax
c001a954:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a958:	50                   	push   eax
c001a959:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a95d:	50                   	push   eax
c001a95e:	56                   	push   esi
c001a95f:	e8 33 ff ff ff       	call   c001a897 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a964:	83 c4 20             	add    esp,0x20
c001a967:	84 c0                	test   al,al
c001a969:	74 07                	je     c001a972 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001a96b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a970:	74 0b                	je     c001a97d <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a972:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a976:	b8 01 00 00 00       	mov    eax,0x1
c001a97b:	eb 3b                	jmp    c001a9b8 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a97d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a981:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a985:	89 03                	mov    DWORD PTR [ebx],eax
c001a987:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a98e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a992:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a999:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a9a0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a9a3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a9aa:	8a 06                	mov    al,BYTE PTR [esi]
c001a9ac:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a9af:	31 c0                	xor    eax,eax
c001a9b1:	eb 05                	jmp    c001a9b8 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a9b3:	b8 04 00 00 00       	mov    eax,0x4
c001a9b8:	83 c4 10             	add    esp,0x10
c001a9bb:	5b                   	pop    ebx
c001a9bc:	5e                   	pop    esi
c001a9bd:	5f                   	pop    edi
c001a9be:	c3                   	ret    
c001a9bf:	90                   	nop

c001a9c0 <ISO9660::exists(char const*)>:
c001a9c0:	83 ec 28             	sub    esp,0x28
c001a9c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a9c7:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a9cb:	52                   	push   edx
c001a9cc:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001a9cf:	52                   	push   edx
c001a9d0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a9d4:	52                   	push   edx
c001a9d5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a9d9:	52                   	push   edx
c001a9da:	50                   	push   eax
c001a9db:	e8 b7 fe ff ff       	call   c001a897 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a9e0:	83 c4 3c             	add    esp,0x3c
c001a9e3:	c3                   	ret    

c001a9e4 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a9e4:	56                   	push   esi
c001a9e5:	53                   	push   ebx
c001a9e6:	83 ec 14             	sub    esp,0x14
c001a9e9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a9ed:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a9f1:	85 db                	test   ebx,ebx
c001a9f3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001a9f7:	0f 94 c2             	sete   dl
c001a9fa:	85 f6                	test   esi,esi
c001a9fc:	0f 94 c0             	sete   al
c001a9ff:	08 c2                	or     dl,al
c001aa01:	75 68                	jne    c001aa6b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001aa03:	85 c9                	test   ecx,ecx
c001aa05:	74 64                	je     c001aa6b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001aa07:	83 ec 0c             	sub    esp,0xc
c001aa0a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001aa0d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa11:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001aa17:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001aa1e:	50                   	push   eax
c001aa1f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001aa22:	50                   	push   eax
c001aa23:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aa27:	50                   	push   eax
c001aa28:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aa2c:	50                   	push   eax
c001aa2d:	51                   	push   ecx
c001aa2e:	e8 64 fe ff ff       	call   c001a897 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001aa33:	83 c4 20             	add    esp,0x20
c001aa36:	ba 01 00 00 00       	mov    edx,0x1
c001aa3b:	84 c0                	test   al,al
c001aa3d:	74 31                	je     c001aa70 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001aa3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa43:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001aa4a:	89 03                	mov    DWORD PTR [ebx],eax
c001aa4c:	ba 00 00 00 00       	mov    edx,0x0
c001aa51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aa55:	85 c0                	test   eax,eax
c001aa57:	0f 95 06             	setne  BYTE PTR [esi]
c001aa5a:	74 14                	je     c001aa70 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001aa5c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001aa62:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001aa69:	eb 05                	jmp    c001aa70 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001aa6b:	ba 04 00 00 00       	mov    edx,0x4
c001aa70:	83 c4 14             	add    esp,0x14
c001aa73:	89 d0                	mov    eax,edx
c001aa75:	5b                   	pop    ebx
c001aa76:	5e                   	pop    esi
c001aa77:	c3                   	ret    

c001aa78 <ISO9660::openDir(char const*, void**)>:
c001aa78:	57                   	push   edi
c001aa79:	56                   	push   esi
c001aa7a:	53                   	push   ebx
c001aa7b:	83 ec 10             	sub    esp,0x10
c001aa7e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001aa82:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001aa86:	85 ff                	test   edi,edi
c001aa88:	0f 84 95 00 00 00    	je     c001ab23 <ISO9660::openDir(char const*, void**)+0xab>
c001aa8e:	85 f6                	test   esi,esi
c001aa90:	0f 84 8d 00 00 00    	je     c001ab23 <ISO9660::openDir(char const*, void**)+0xab>
c001aa96:	83 ec 0c             	sub    esp,0xc
c001aa99:	6a 1c                	push   0x1c
c001aa9b:	e8 7e 11 ff ff       	call   c000bc1e <malloc>
c001aaa0:	89 07                	mov    DWORD PTR [edi],eax
c001aaa2:	89 c3                	mov    ebx,eax
c001aaa4:	59                   	pop    ecx
c001aaa5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aaa9:	50                   	push   eax
c001aaaa:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001aaad:	50                   	push   eax
c001aaae:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aab2:	50                   	push   eax
c001aab3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aab7:	50                   	push   eax
c001aab8:	56                   	push   esi
c001aab9:	e8 d9 fd ff ff       	call   c001a897 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001aabe:	83 c4 20             	add    esp,0x20
c001aac1:	84 c0                	test   al,al
c001aac3:	74 07                	je     c001aacc <ISO9660::openDir(char const*, void**)+0x54>
c001aac5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001aaca:	75 21                	jne    c001aaed <ISO9660::openDir(char const*, void**)+0x75>
c001aacc:	0f b6 c0             	movzx  eax,al
c001aacf:	52                   	push   edx
c001aad0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001aad4:	50                   	push   eax
c001aad5:	68 0a 1e 02 c0       	push   0xc0021e0a
c001aada:	e8 06 43 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001aadf:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001aae3:	83 c4 10             	add    esp,0x10
c001aae6:	b8 01 00 00 00       	mov    eax,0x1
c001aaeb:	eb 3b                	jmp    c001ab28 <ISO9660::openDir(char const*, void**)+0xb0>
c001aaed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaf1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001aaf5:	89 03                	mov    DWORD PTR [ebx],eax
c001aaf7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001aafe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ab02:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ab09:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ab10:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ab13:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ab1a:	8a 06                	mov    al,BYTE PTR [esi]
c001ab1c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001ab1f:	31 c0                	xor    eax,eax
c001ab21:	eb 05                	jmp    c001ab28 <ISO9660::openDir(char const*, void**)+0xb0>
c001ab23:	b8 04 00 00 00       	mov    eax,0x4
c001ab28:	83 c4 10             	add    esp,0x10
c001ab2b:	5b                   	pop    ebx
c001ab2c:	5e                   	pop    esi
c001ab2d:	5f                   	pop    edi
c001ab2e:	c3                   	ret    
c001ab2f:	90                   	nop

c001ab30 <ISO9660::ISO9660()>:
c001ab30:	83 ec 0c             	sub    esp,0xc
c001ab33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab37:	83 ec 0c             	sub    esp,0xc
c001ab3a:	50                   	push   eax
c001ab3b:	e8 aa 45 ff ff       	call   c000f0ea <Filesystem::Filesystem()>
c001ab40:	83 c4 10             	add    esp,0x10
c001ab43:	ba 30 1e 02 c0       	mov    edx,0xc0021e30
c001ab48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab4c:	89 10                	mov    DWORD PTR [eax],edx
c001ab4e:	90                   	nop
c001ab4f:	83 c4 0c             	add    esp,0xc
c001ab52:	c3                   	ret    
c001ab53:	90                   	nop

c001ab54 <SoundChannel::~SoundChannel()>:
c001ab54:	83 ec 0c             	sub    esp,0xc
c001ab57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab5b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ab5e:	83 ec 0c             	sub    esp,0xc
c001ab61:	50                   	push   eax
c001ab62:	e8 c7 10 ff ff       	call   c000bc2e <free>
c001ab67:	83 c4 10             	add    esp,0x10
c001ab6a:	90                   	nop
c001ab6b:	83 c4 0c             	add    esp,0xc
c001ab6e:	c3                   	ret    
c001ab6f:	90                   	nop

c001ab70 <SoundChannel::setSpeed(float)>:
c001ab70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab74:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001ab78:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001ab7b:	c3                   	ret    

c001ab7c <SoundChannel::getSpeed()>:
c001ab7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab80:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001ab83:	c3                   	ret    

c001ab84 <SoundChannel::setVolume(int)>:
c001ab84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ab88:	83 f8 64             	cmp    eax,0x64
c001ab8b:	7e 05                	jle    c001ab92 <SoundChannel::setVolume(int)+0xe>
c001ab8d:	b8 64 00 00 00       	mov    eax,0x64
c001ab92:	85 c0                	test   eax,eax
c001ab94:	79 02                	jns    c001ab98 <SoundChannel::setVolume(int)+0x14>
c001ab96:	31 c0                	xor    eax,eax
c001ab98:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ab9c:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001ab9f:	c3                   	ret    

c001aba0 <SoundChannel::getVolume()>:
c001aba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aba4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001aba7:	c3                   	ret    

c001aba8 <SoundChannel::pause()>:
c001aba8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abac:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001abb0:	c3                   	ret    
c001abb1:	90                   	nop

c001abb2 <SoundChannel::SoundChannel(int, int, int, int)>:
c001abb2:	83 ec 1c             	sub    esp,0x1c
c001abb5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001abb9:	e8 ea ff ff ff       	call   c001aba8 <SoundChannel::pause()>
c001abbe:	83 c4 04             	add    esp,0x4
c001abc1:	6a 50                	push   0x50
c001abc3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001abc7:	e8 b8 ff ff ff       	call   c001ab84 <SoundChannel::setVolume(int)>
c001abcc:	83 c4 08             	add    esp,0x8
c001abcf:	d9 e8                	fld1   
c001abd1:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001abd5:	d9 1c 24             	fstp   DWORD PTR [esp]
c001abd8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001abdc:	e8 8f ff ff ff       	call   c001ab70 <SoundChannel::setSpeed(float)>
c001abe1:	83 c4 08             	add    esp,0x8
c001abe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abe8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001abec:	89 10                	mov    DWORD PTR [eax],edx
c001abee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abf2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001abf6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001abf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abfd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ac01:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ac04:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001ac09:	75 23                	jne    c001ac2e <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001ac0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac0f:	8b 10                	mov    edx,DWORD PTR [eax]
c001ac11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ac18:	0f af c2             	imul   eax,edx
c001ac1b:	85 c0                	test   eax,eax
c001ac1d:	79 03                	jns    c001ac22 <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001ac1f:	83 c0 03             	add    eax,0x3
c001ac22:	c1 f8 02             	sar    eax,0x2
c001ac25:	05 a0 0f 00 00       	add    eax,0xfa0
c001ac2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ac2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac32:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ac36:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001ac39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac3d:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001ac44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac48:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001ac4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac53:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac56:	c1 e0 02             	shl    eax,0x2
c001ac59:	83 ec 0c             	sub    esp,0xc
c001ac5c:	50                   	push   eax
c001ac5d:	e8 bc 0f ff ff       	call   c000bc1e <malloc>
c001ac62:	83 c4 10             	add    esp,0x10
c001ac65:	89 c2                	mov    edx,eax
c001ac67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac6b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ac6e:	83 ec 04             	sub    esp,0x4
c001ac71:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ac75:	50                   	push   eax
c001ac76:	6a 01                	push   0x1
c001ac78:	6a 04                	push   0x4
c001ac7a:	e8 cc db fe ff       	call   c000884b <src_new>
c001ac7f:	83 c4 10             	add    esp,0x10
c001ac82:	89 c2                	mov    edx,eax
c001ac84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac88:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ac8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac8f:	85 c0                	test   eax,eax
c001ac91:	74 10                	je     c001aca3 <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001ac93:	83 ec 0c             	sub    esp,0xc
c001ac96:	68 8c 1e 02 c0       	push   0xc0021e8c
c001ac9b:	e8 da 9d ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c001aca0:	83 c4 10             	add    esp,0x10
c001aca3:	90                   	nop
c001aca4:	83 c4 1c             	add    esp,0x1c
c001aca7:	c3                   	ret    

c001aca8 <SoundChannel::play()>:
c001aca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acac:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001acb0:	c3                   	ret    
c001acb1:	90                   	nop

c001acb2 <SoundChannel::paused()>:
c001acb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acb6:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001acb9:	c3                   	ret    

c001acba <SoundChannel::getSampleRate()>:
c001acba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acbe:	8b 00                	mov    eax,DWORD PTR [eax]
c001acc0:	c3                   	ret    
c001acc1:	90                   	nop

c001acc2 <SoundChannel::getBits()>:
c001acc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001acc9:	c3                   	ret    

c001acca <SoundChannel::getBufferUsed()>:
c001acca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acce:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001acd1:	c3                   	ret    

c001acd2 <SoundChannel::getBufferSize()>:
c001acd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acd6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001acd9:	c3                   	ret    

c001acda <SoundChannel::unbuffer(float*, int, int)>:
c001acda:	53                   	push   ebx
c001acdb:	83 ec 40             	sub    esp,0x40
c001acde:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ace2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001acea:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001aced:	db 03                	fild   DWORD PTR [ebx]
c001acef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001acf3:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001acf7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001acfa:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001acfd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ad01:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001ad05:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ad09:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ad0d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ad11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ad15:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ad19:	50                   	push   eax
c001ad1a:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001ad1d:	e8 e3 d7 fe ff       	call   c0008505 <src_process>
c001ad22:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ad26:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001ad29:	83 c4 0c             	add    esp,0xc
c001ad2c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ad2f:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001ad32:	29 d0                	sub    eax,edx
c001ad34:	c1 e0 02             	shl    eax,0x2
c001ad37:	50                   	push   eax
c001ad38:	8d 04 91             	lea    eax,[ecx+edx*4]
c001ad3b:	50                   	push   eax
c001ad3c:	51                   	push   ecx
c001ad3d:	e8 58 58 fe ff       	call   c000059a <memmove>
c001ad42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad46:	83 c4 48             	add    esp,0x48
c001ad49:	5b                   	pop    ebx
c001ad4a:	c3                   	ret    
c001ad4b:	90                   	nop

c001ad4c <SoundChannel::buffer8(unsigned char*, int)>:
c001ad4c:	53                   	push   ebx
c001ad4d:	31 c0                	xor    eax,eax
c001ad4f:	83 ec 08             	sub    esp,0x8
c001ad52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad56:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001ad59:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001ad5c:	74 35                	je     c001ad93 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001ad5e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001ad62:	7d 2f                	jge    c001ad93 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001ad64:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ad68:	d9 05 a8 1e 02 c0    	fld    DWORD PTR ds:0xc0021ea8
c001ad6e:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001ad72:	40                   	inc    eax
c001ad73:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001ad78:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001ad7b:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001ad7f:	8d 59 01             	lea    ebx,[ecx+0x1]
c001ad82:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001ad85:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001ad88:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001ad8b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ad8e:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001ad91:	eb c9                	jmp    c001ad5c <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001ad93:	83 c4 08             	add    esp,0x8
c001ad96:	5b                   	pop    ebx
c001ad97:	c3                   	ret    

c001ad98 <SoundDevice::SoundDevice(char const*)>:
c001ad98:	83 ec 1c             	sub    esp,0x1c
c001ad9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad9f:	83 ec 08             	sub    esp,0x8
c001ada2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ada6:	50                   	push   eax
c001ada7:	e8 34 56 ff ff       	call   c00103e0 <Device::Device(char const*)>
c001adac:	83 c4 10             	add    esp,0x10
c001adaf:	ba b4 1e 02 c0       	mov    edx,0xc0021eb4
c001adb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001adb8:	89 10                	mov    DWORD PTR [eax],edx
c001adba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001adbe:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001adc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001adcc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001add6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001adde:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ade3:	7f 19                	jg     c001adfe <SoundDevice::SoundDevice(char const*)+0x66>
c001ade5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ade9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aded:	83 c2 54             	add    edx,0x54
c001adf0:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001adf8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001adfc:	eb e0                	jmp    c001adde <SoundDevice::SoundDevice(char const*)+0x46>
c001adfe:	90                   	nop
c001adff:	83 c4 1c             	add    esp,0x1c
c001ae02:	c3                   	ret    
c001ae03:	90                   	nop

c001ae04 <SoundDevice::~SoundDevice()>:
c001ae04:	53                   	push   ebx
c001ae05:	83 ec 18             	sub    esp,0x18
c001ae08:	ba b4 1e 02 c0       	mov    edx,0xc0021eb4
c001ae0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae11:	89 10                	mov    DWORD PTR [eax],edx
c001ae13:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ae1b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ae20:	7f 46                	jg     c001ae68 <SoundDevice::~SoundDevice()+0x64>
c001ae22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae2a:	83 c2 54             	add    edx,0x54
c001ae2d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001ae31:	85 c0                	test   eax,eax
c001ae33:	74 2d                	je     c001ae62 <SoundDevice::~SoundDevice()+0x5e>
c001ae35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae39:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae3d:	83 c2 54             	add    edx,0x54
c001ae40:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001ae44:	85 db                	test   ebx,ebx
c001ae46:	74 1a                	je     c001ae62 <SoundDevice::~SoundDevice()+0x5e>
c001ae48:	83 ec 0c             	sub    esp,0xc
c001ae4b:	53                   	push   ebx
c001ae4c:	e8 03 fd ff ff       	call   c001ab54 <SoundChannel::~SoundChannel()>
c001ae51:	83 c4 10             	add    esp,0x10
c001ae54:	83 ec 08             	sub    esp,0x8
c001ae57:	6a 2c                	push   0x2c
c001ae59:	53                   	push   ebx
c001ae5a:	e8 a6 3e ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c001ae5f:	83 c4 10             	add    esp,0x10
c001ae62:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ae66:	eb b3                	jmp    c001ae1b <SoundDevice::~SoundDevice()+0x17>
c001ae68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae6c:	83 ec 0c             	sub    esp,0xc
c001ae6f:	50                   	push   eax
c001ae70:	e8 1d 52 ff ff       	call   c0010092 <Device::~Device()>
c001ae75:	83 c4 10             	add    esp,0x10
c001ae78:	90                   	nop
c001ae79:	83 c4 18             	add    esp,0x18
c001ae7c:	5b                   	pop    ebx
c001ae7d:	c3                   	ret    

c001ae7e <SoundDevice::~SoundDevice()>:
c001ae7e:	83 ec 0c             	sub    esp,0xc
c001ae81:	83 ec 0c             	sub    esp,0xc
c001ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae88:	e8 77 ff ff ff       	call   c001ae04 <SoundDevice::~SoundDevice()>
c001ae8d:	83 c4 10             	add    esp,0x10
c001ae90:	83 ec 08             	sub    esp,0x8
c001ae93:	68 e4 01 00 00       	push   0x1e4
c001ae98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae9c:	e8 64 3e ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c001aea1:	83 c4 10             	add    esp,0x10
c001aea4:	83 c4 0c             	add    esp,0xc
c001aea7:	c3                   	ret    

c001aea8 <SoundDevice::getFreeChannelNum()>:
c001aea8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aeac:	31 c0                	xor    eax,eax
c001aeae:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001aeb6:	74 09                	je     c001aec1 <SoundDevice::getFreeChannelNum()+0x19>
c001aeb8:	40                   	inc    eax
c001aeb9:	83 f8 20             	cmp    eax,0x20
c001aebc:	75 f0                	jne    c001aeae <SoundDevice::getFreeChannelNum()+0x6>
c001aebe:	83 c8 ff             	or     eax,0xffffffff
c001aec1:	c3                   	ret    

c001aec2 <SoundDevice::addChannel(SoundChannel*)>:
c001aec2:	56                   	push   esi
c001aec3:	53                   	push   ebx
c001aec4:	51                   	push   ecx
c001aec5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aec9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aecd:	53                   	push   ebx
c001aece:	e8 d5 ff ff ff       	call   c001aea8 <SoundDevice::getFreeChannelNum()>
c001aed3:	5a                   	pop    edx
c001aed4:	83 f8 ff             	cmp    eax,0xffffffff
c001aed7:	74 51                	je     c001af2a <SoundDevice::addChannel(SoundChannel*)+0x68>
c001aed9:	85 f6                	test   esi,esi
c001aedb:	74 4d                	je     c001af2a <SoundDevice::addChannel(SoundChannel*)+0x68>
c001aedd:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001aee4:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001aeeb:	75 30                	jne    c001af1d <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001aeed:	83 ec 0c             	sub    esp,0xc
c001aef0:	56                   	push   esi
c001aef1:	e8 c4 fd ff ff       	call   c001acba <SoundChannel::getSampleRate()>
c001aef6:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001aefc:	89 34 24             	mov    DWORD PTR [esp],esi
c001aeff:	e8 be fd ff ff       	call   c001acc2 <SoundChannel::getBits()>
c001af04:	83 c4 0c             	add    esp,0xc
c001af07:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001af0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001af0f:	50                   	push   eax
c001af10:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001af16:	53                   	push   ebx
c001af17:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001af1a:	83 c4 10             	add    esp,0x10
c001af1d:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001af23:	b8 01 00 00 00       	mov    eax,0x1
c001af28:	eb 03                	jmp    c001af2d <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001af2a:	83 c8 ff             	or     eax,0xffffffff
c001af2d:	5a                   	pop    edx
c001af2e:	5b                   	pop    ebx
c001af2f:	5e                   	pop    esi
c001af30:	c3                   	ret    
c001af31:	90                   	nop

c001af32 <SoundDevice::removeChannel(int)>:
c001af32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af3a:	83 fa 1f             	cmp    edx,0x1f
c001af3d:	77 23                	ja     c001af62 <SoundDevice::removeChannel(int)+0x30>
c001af3f:	8d 14 90             	lea    edx,[eax+edx*4]
c001af42:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001af49:	74 17                	je     c001af62 <SoundDevice::removeChannel(int)+0x30>
c001af4b:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001af55:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001af5b:	75 05                	jne    c001af62 <SoundDevice::removeChannel(int)+0x30>
c001af5d:	8b 00                	mov    eax,DWORD PTR [eax]
c001af5f:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001af62:	c3                   	ret    
c001af63:	90                   	nop

c001af64 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001af64:	56                   	push   esi
c001af65:	53                   	push   ebx
c001af66:	31 db                	xor    ebx,ebx
c001af68:	83 ec 14             	sub    esp,0x14
c001af6b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001af6f:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001af73:	7d 55                	jge    c001afca <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001af75:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af79:	d9 e8                	fld1   
c001af7b:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001af7e:	d8 0d e4 1e 02 c0    	fmul   DWORD PTR ds:0xc0021ee4
c001af84:	d8 0d e8 1e 02 c0    	fmul   DWORD PTR ds:0xc0021ee8
c001af8a:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001af8e:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001af92:	d8 15 ec 1e 02 c0    	fcom   DWORD PTR ds:0xc0021eec
c001af98:	df e0                	fnstsw ax
c001af9a:	9e                   	sahf   
c001af9b:	72 08                	jb     c001afa5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001af9d:	dd d8                	fstp   st(0)
c001af9f:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001afa3:	eb 22                	jmp    c001afc7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001afa5:	d9 ee                	fldz   
c001afa7:	d8 d9                	fcomp  st(1)
c001afa9:	df e0                	fnstsw ax
c001afab:	9e                   	sahf   
c001afac:	72 08                	jb     c001afb6 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001afae:	dd d8                	fstp   st(0)
c001afb0:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001afb4:	eb 11                	jmp    c001afc7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001afb6:	83 ec 10             	sub    esp,0x10
c001afb9:	d9 1c 24             	fstp   DWORD PTR [esp]
c001afbc:	e8 0b 36 00 00       	call   c001e5cc <lrintf>
c001afc1:	83 c4 10             	add    esp,0x10
c001afc4:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001afc7:	43                   	inc    ebx
c001afc8:	eb a5                	jmp    c001af6f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001afca:	83 c4 14             	add    esp,0x14
c001afcd:	5b                   	pop    ebx
c001afce:	5e                   	pop    esi
c001afcf:	c3                   	ret    

c001afd0 <SoundDevice::getAudio(int, float*, float*)>:
c001afd0:	55                   	push   ebp
c001afd1:	57                   	push   edi
c001afd2:	56                   	push   esi
c001afd3:	53                   	push   ebx
c001afd4:	31 db                	xor    ebx,ebx
c001afd6:	83 ec 20             	sub    esp,0x20
c001afd9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001afdd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001afe1:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001afe5:	c1 e0 02             	shl    eax,0x2
c001afe8:	50                   	push   eax
c001afe9:	6a 00                	push   0x0
c001afeb:	55                   	push   ebp
c001afec:	e8 17 56 fe ff       	call   c0000608 <memset>
c001aff1:	83 c4 10             	add    esp,0x10
c001aff4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001aff8:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001afff:	85 c0                	test   eax,eax
c001b001:	0f 84 94 00 00 00    	je     c001b09b <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b007:	83 ec 0c             	sub    esp,0xc
c001b00a:	50                   	push   eax
c001b00b:	e8 a2 fc ff ff       	call   c001acb2 <SoundChannel::paused()>
c001b010:	83 c4 10             	add    esp,0x10
c001b013:	84 c0                	test   al,al
c001b015:	0f 85 80 00 00 00    	jne    c001b09b <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b01b:	83 ec 0c             	sub    esp,0xc
c001b01e:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b025:	e8 76 fb ff ff       	call   c001aba0 <SoundChannel::getVolume()>
c001b02a:	83 c4 10             	add    esp,0x10
c001b02d:	85 c0                	test   eax,eax
c001b02f:	74 6a                	je     c001b09b <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b031:	83 ec 0c             	sub    esp,0xc
c001b034:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b03b:	e8 60 fb ff ff       	call   c001aba0 <SoundChannel::getVolume()>
c001b040:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b044:	d9 05 f0 1e 02 c0    	fld    DWORD PTR ds:0xc0021ef0
c001b04a:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001b04e:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001b052:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001b056:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001b05c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001b060:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b067:	e8 6e fc ff ff       	call   c001acda <SoundChannel::unbuffer(float*, int, int)>
c001b06c:	83 c4 20             	add    esp,0x20
c001b06f:	31 d2                	xor    edx,edx
c001b071:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001b075:	39 c2                	cmp    edx,eax
c001b077:	7d 1a                	jge    c001b093 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001b079:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001b07d:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001b080:	d8 c9                	fmul   st,st(1)
c001b082:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001b088:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001b08c:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001b090:	42                   	inc    edx
c001b091:	eb e2                	jmp    c001b075 <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001b093:	dd d8                	fstp   st(0)
c001b095:	39 c7                	cmp    edi,eax
c001b097:	7e 02                	jle    c001b09b <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b099:	89 c7                	mov    edi,eax
c001b09b:	43                   	inc    ebx
c001b09c:	83 fb 20             	cmp    ebx,0x20
c001b09f:	0f 85 53 ff ff ff    	jne    c001aff8 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001b0a5:	83 c4 1c             	add    esp,0x1c
c001b0a8:	89 f8                	mov    eax,edi
c001b0aa:	5b                   	pop    ebx
c001b0ab:	5e                   	pop    esi
c001b0ac:	5f                   	pop    edi
c001b0ad:	5d                   	pop    ebp
c001b0ae:	c3                   	ret    
c001b0af:	90                   	nop

c001b0b0 <PCI::open(int, int, void*)>:
c001b0b0:	83 ec 18             	sub    esp,0x18
c001b0b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b0b7:	8b 10                	mov    edx,DWORD PTR [eax]
c001b0b9:	50                   	push   eax
c001b0ba:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b0bd:	31 c0                	xor    eax,eax
c001b0bf:	83 c4 1c             	add    esp,0x1c
c001b0c2:	c3                   	ret    
c001b0c3:	90                   	nop

c001b0c4 <PCI::close(int, int, void*)>:
c001b0c4:	31 c0                	xor    eax,eax
c001b0c6:	c3                   	ret    
c001b0c7:	90                   	nop

c001b0c8 <PCI::PCI()>:
c001b0c8:	83 ec 0c             	sub    esp,0xc
c001b0cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0cf:	83 ec 08             	sub    esp,0x8
c001b0d2:	68 f4 1e 02 c0       	push   0xc0021ef4
c001b0d7:	50                   	push   eax
c001b0d8:	e8 8f 49 ff ff       	call   c000fa6c <Bus::Bus(char const*)>
c001b0dd:	83 c4 10             	add    esp,0x10
c001b0e0:	ba a0 1f 02 c0       	mov    edx,0xc0021fa0
c001b0e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0e9:	89 10                	mov    DWORD PTR [eax],edx
c001b0eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0ef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b0f5:	0f b6 d0             	movzx  edx,al
c001b0f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0fc:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b107:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b10d:	0f b6 d0             	movzx  edx,al
c001b110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b114:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b11d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b123:	8d 50 01             	lea    edx,[eax+0x1]
c001b126:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b12a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b130:	0f b6 d0             	movzx  edx,al
c001b133:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b137:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b13b:	83 c9 c0             	or     ecx,0xffffffc0
c001b13e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b142:	90                   	nop
c001b143:	83 c4 0c             	add    esp,0xc
c001b146:	c3                   	ret    
c001b147:	90                   	nop

c001b148 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b148:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b14c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b151:	89 ca                	mov    edx,ecx
c001b153:	c1 e0 10             	shl    eax,0x10
c001b156:	81 e2 fc 00 00 00    	and    edx,0xfc
c001b15c:	09 d0                	or     eax,edx
c001b15e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001b163:	c1 e2 08             	shl    edx,0x8
c001b166:	09 d0                	or     eax,edx
c001b168:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001b16d:	c1 e2 0b             	shl    edx,0xb
c001b170:	09 d0                	or     eax,edx
c001b172:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b177:	0d 00 00 00 80       	or     eax,0x80000000
c001b17c:	ef                   	out    dx,eax
c001b17d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b182:	ed                   	in     eax,dx
c001b183:	83 e1 02             	and    ecx,0x2
c001b186:	0f b6 c9             	movzx  ecx,cl
c001b189:	c1 e1 03             	shl    ecx,0x3
c001b18c:	d3 e8                	shr    eax,cl
c001b18e:	c3                   	ret    
c001b18f:	90                   	nop

c001b190 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b190:	6a 00                	push   0x0
c001b192:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b197:	50                   	push   eax
c001b198:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b19d:	50                   	push   eax
c001b19e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b1a3:	50                   	push   eax
c001b1a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b1a8:	e8 9b ff ff ff       	call   c001b148 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1ad:	83 c4 14             	add    esp,0x14
c001b1b0:	c3                   	ret    
c001b1b1:	90                   	nop

c001b1b2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b1b2:	6a 0e                	push   0xe
c001b1b4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b1b9:	50                   	push   eax
c001b1ba:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b1bf:	50                   	push   eax
c001b1c0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b1c5:	50                   	push   eax
c001b1c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b1ca:	e8 79 ff ff ff       	call   c001b148 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1cf:	83 c4 14             	add    esp,0x14
c001b1d2:	0f b6 c0             	movzx  eax,al
c001b1d5:	c3                   	ret    

c001b1d6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b1d6:	55                   	push   ebp
c001b1d7:	57                   	push   edi
c001b1d8:	56                   	push   esi
c001b1d9:	53                   	push   ebx
c001b1da:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b1df:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b1e4:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001b1e9:	6a 0a                	push   0xa
c001b1eb:	56                   	push   esi
c001b1ec:	55                   	push   ebp
c001b1ed:	57                   	push   edi
c001b1ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b1f2:	e8 51 ff ff ff       	call   c001b148 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1f7:	6a 0a                	push   0xa
c001b1f9:	89 c3                	mov    ebx,eax
c001b1fb:	56                   	push   esi
c001b1fc:	0f b6 db             	movzx  ebx,bl
c001b1ff:	55                   	push   ebp
c001b200:	57                   	push   edi
c001b201:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b205:	e8 3e ff ff ff       	call   c001b148 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b20a:	83 c4 28             	add    esp,0x28
c001b20d:	25 00 ff 00 00       	and    eax,0xff00
c001b212:	09 d8                	or     eax,ebx
c001b214:	5b                   	pop    ebx
c001b215:	5e                   	pop    esi
c001b216:	5f                   	pop    edi
c001b217:	5d                   	pop    ebp
c001b218:	c3                   	ret    
c001b219:	90                   	nop

c001b21a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b21a:	6a 08                	push   0x8
c001b21c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b221:	50                   	push   eax
c001b222:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b227:	50                   	push   eax
c001b228:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b22d:	50                   	push   eax
c001b22e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b232:	e8 11 ff ff ff       	call   c001b148 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b237:	83 c4 14             	add    esp,0x14
c001b23a:	0f b6 c4             	movzx  eax,ah
c001b23d:	c3                   	ret    

c001b23e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b23e:	6a 08                	push   0x8
c001b240:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b245:	50                   	push   eax
c001b246:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b24b:	50                   	push   eax
c001b24c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b251:	50                   	push   eax
c001b252:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b256:	e8 ed fe ff ff       	call   c001b148 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b25b:	83 c4 14             	add    esp,0x14
c001b25e:	c3                   	ret    
c001b25f:	90                   	nop

c001b260 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b260:	6a 3c                	push   0x3c
c001b262:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b267:	50                   	push   eax
c001b268:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b26d:	50                   	push   eax
c001b26e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b273:	50                   	push   eax
c001b274:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b278:	e8 cb fe ff ff       	call   c001b148 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b27d:	83 c4 14             	add    esp,0x14
c001b280:	c3                   	ret    
c001b281:	90                   	nop

c001b282 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b282:	6a 18                	push   0x18
c001b284:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b289:	50                   	push   eax
c001b28a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b28f:	50                   	push   eax
c001b290:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b295:	50                   	push   eax
c001b296:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b29a:	e8 a9 fe ff ff       	call   c001b148 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b29f:	83 c4 14             	add    esp,0x14
c001b2a2:	0f b6 c4             	movzx  eax,ah
c001b2a5:	c3                   	ret    

c001b2a6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b2a6:	55                   	push   ebp
c001b2a7:	57                   	push   edi
c001b2a8:	56                   	push   esi
c001b2a9:	53                   	push   ebx
c001b2aa:	50                   	push   eax
c001b2ab:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b2af:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001b2b4:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b2b9:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001b2be:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b2c5:	8d 43 12             	lea    eax,[ebx+0x12]
c001b2c8:	83 c3 10             	add    ebx,0x10
c001b2cb:	0f b6 c0             	movzx  eax,al
c001b2ce:	0f b6 db             	movzx  ebx,bl
c001b2d1:	50                   	push   eax
c001b2d2:	51                   	push   ecx
c001b2d3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b2d7:	57                   	push   edi
c001b2d8:	55                   	push   ebp
c001b2d9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b2dd:	e8 66 fe ff ff       	call   c001b148 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b2e2:	53                   	push   ebx
c001b2e3:	89 c6                	mov    esi,eax
c001b2e5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b2e9:	c1 e6 10             	shl    esi,0x10
c001b2ec:	51                   	push   ecx
c001b2ed:	57                   	push   edi
c001b2ee:	55                   	push   ebp
c001b2ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b2f3:	e8 50 fe ff ff       	call   c001b148 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b2f8:	83 c4 2c             	add    esp,0x2c
c001b2fb:	0f b7 c0             	movzx  eax,ax
c001b2fe:	5b                   	pop    ebx
c001b2ff:	09 f0                	or     eax,esi
c001b301:	5e                   	pop    esi
c001b302:	5f                   	pop    edi
c001b303:	5d                   	pop    ebp
c001b304:	c3                   	ret    
c001b305:	90                   	nop

c001b306 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b306:	53                   	push   ebx
c001b307:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b30c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b311:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b315:	c1 e1 10             	shl    ecx,0x10
c001b318:	25 fc 00 00 00       	and    eax,0xfc
c001b31d:	09 c1                	or     ecx,eax
c001b31f:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b324:	c1 e0 08             	shl    eax,0x8
c001b327:	09 c1                	or     ecx,eax
c001b329:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b32e:	c1 e0 0b             	shl    eax,0xb
c001b331:	09 c1                	or     ecx,eax
c001b333:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b339:	89 c8                	mov    eax,ecx
c001b33b:	ef                   	out    dx,eax
c001b33c:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b341:	ed                   	in     eax,dx
c001b342:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001b347:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001b34c:	74 0a                	je     c001b358 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001b34e:	0f b7 d8             	movzx  ebx,ax
c001b351:	89 d0                	mov    eax,edx
c001b353:	c1 e0 10             	shl    eax,0x10
c001b356:	eb 05                	jmp    c001b35d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001b358:	66 31 c0             	xor    ax,ax
c001b35b:	89 d3                	mov    ebx,edx
c001b35d:	09 c3                	or     ebx,eax
c001b35f:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b364:	89 c8                	mov    eax,ecx
c001b366:	ef                   	out    dx,eax
c001b367:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b36c:	89 d8                	mov    eax,ebx
c001b36e:	ef                   	out    dx,eax
c001b36f:	5b                   	pop    ebx
c001b370:	c3                   	ret    
c001b371:	90                   	nop

c001b372 <PCI::checkBus(unsigned char)>:
c001b372:	56                   	push   esi
c001b373:	53                   	push   ebx
c001b374:	31 db                	xor    ebx,ebx
c001b376:	51                   	push   ecx
c001b377:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b37c:	52                   	push   edx
c001b37d:	53                   	push   ebx
c001b37e:	43                   	inc    ebx
c001b37f:	56                   	push   esi
c001b380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b384:	e8 4d 03 00 00       	call   c001b6d6 <PCI::checkDevice(unsigned char, unsigned char)>
c001b389:	83 c4 10             	add    esp,0x10
c001b38c:	83 fb 20             	cmp    ebx,0x20
c001b38f:	75 eb                	jne    c001b37c <PCI::checkBus(unsigned char)+0xa>
c001b391:	58                   	pop    eax
c001b392:	5b                   	pop    ebx
c001b393:	5e                   	pop    esi
c001b394:	c3                   	ret    
c001b395:	90                   	nop

c001b396 <PCI::foundDevice(PCIDeviceInfo)>:
c001b396:	55                   	push   ebp
c001b397:	57                   	push   edi
c001b398:	56                   	push   esi
c001b399:	53                   	push   ebx
c001b39a:	83 ec 1c             	sub    esp,0x1c
c001b39d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b3a1:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001b3a7:	0f 84 51 01 00 00    	je     c001b4fe <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b3ad:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b3b1:	66 81 f9 06 04       	cmp    cx,0x406
c001b3b6:	75 2c                	jne    c001b3e4 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001b3b8:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b3bd:	50                   	push   eax
c001b3be:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b3c3:	50                   	push   eax
c001b3c4:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b3c9:	50                   	push   eax
c001b3ca:	56                   	push   esi
c001b3cb:	e8 b2 fe ff ff       	call   c001b282 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b3d0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b3d4:	0f b6 c0             	movzx  eax,al
c001b3d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b3db:	83 c4 2c             	add    esp,0x2c
c001b3de:	5b                   	pop    ebx
c001b3df:	5e                   	pop    esi
c001b3e0:	5f                   	pop    edi
c001b3e1:	5d                   	pop    ebp
c001b3e2:	eb 8e                	jmp    c001b372 <PCI::checkBus(unsigned char)>
c001b3e4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b3e8:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b3ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b3f2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b3f6:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001b3fa:	88 d3                	mov    bl,dl
c001b3fc:	85 c0                	test   eax,eax
c001b3fe:	74 33                	je     c001b433 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b400:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b403:	85 d2                	test   edx,edx
c001b405:	74 28                	je     c001b42f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b407:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001b40d:	31 ef                	xor    edi,ebp
c001b40f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001b415:	75 18                	jne    c001b42f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b417:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b41b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001b421:	75 0c                	jne    c001b42f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b423:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001b429:	0f 84 cf 00 00 00    	je     c001b4fe <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b42f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b431:	eb c9                	jmp    c001b3fc <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001b433:	66 81 f9 01 06       	cmp    cx,0x601
c001b438:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001b43c:	75 18                	jne    c001b456 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001b43e:	83 ec 0c             	sub    esp,0xc
c001b441:	68 58 01 00 00       	push   0x158
c001b446:	e8 ab 38 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c001b44b:	59                   	pop    ecx
c001b44c:	89 c5                	mov    ebp,eax
c001b44e:	5f                   	pop    edi
c001b44f:	68 fc 1e 02 c0       	push   0xc0021efc
c001b454:	eb 7d                	jmp    c001b4d3 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001b456:	66 81 f9 01 01       	cmp    cx,0x101
c001b45b:	75 60                	jne    c001b4bd <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001b45d:	83 ec 0c             	sub    esp,0xc
c001b460:	68 70 02 00 00       	push   0x270
c001b465:	e8 8c 38 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c001b46a:	89 04 24             	mov    DWORD PTR [esp],eax
c001b46d:	89 c5                	mov    ebp,eax
c001b46f:	e8 26 03 00 00       	call   c001b79a <IDE::IDE()>
c001b474:	58                   	pop    eax
c001b475:	5a                   	pop    edx
c001b476:	55                   	push   ebp
c001b477:	56                   	push   esi
c001b478:	e8 73 4d ff ff       	call   c00101f0 <Device::addChild(Device*)>
c001b47d:	83 ec 1c             	sub    esp,0x1c
c001b480:	b9 09 00 00 00       	mov    ecx,0x9
c001b485:	fc                   	cld    
c001b486:	89 e7                	mov    edi,esp
c001b488:	89 de                	mov    esi,ebx
c001b48a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b48c:	55                   	push   ebp
c001b48d:	e8 38 4c ff ff       	call   c00100ca <Device::preOpenPCI(PCIDeviceInfo)>
c001b492:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b495:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b499:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b4a1:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b4a9:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b4b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b4b4:	83 c4 4c             	add    esp,0x4c
c001b4b7:	5b                   	pop    ebx
c001b4b8:	5e                   	pop    esi
c001b4b9:	5f                   	pop    edi
c001b4ba:	5d                   	pop    ebp
c001b4bb:	ff e0                	jmp    eax
c001b4bd:	83 ec 0c             	sub    esp,0xc
c001b4c0:	68 58 01 00 00       	push   0x158
c001b4c5:	e8 2c 38 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c001b4ca:	59                   	pop    ecx
c001b4cb:	89 c5                	mov    ebp,eax
c001b4cd:	5f                   	pop    edi
c001b4ce:	68 1b 1f 02 c0       	push   0xc0021f1b
c001b4d3:	55                   	push   ebp
c001b4d4:	e8 03 50 ff ff       	call   c00104dc <DriverlessDevice::DriverlessDevice(char const*)>
c001b4d9:	58                   	pop    eax
c001b4da:	5a                   	pop    edx
c001b4db:	55                   	push   ebp
c001b4dc:	56                   	push   esi
c001b4dd:	e8 0e 4d ff ff       	call   c00101f0 <Device::addChild(Device*)>
c001b4e2:	b9 09 00 00 00       	mov    ecx,0x9
c001b4e7:	fc                   	cld    
c001b4e8:	89 df                	mov    edi,ebx
c001b4ea:	89 de                	mov    esi,ebx
c001b4ec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b4ee:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001b4f2:	83 c4 2c             	add    esp,0x2c
c001b4f5:	5b                   	pop    ebx
c001b4f6:	5e                   	pop    esi
c001b4f7:	5f                   	pop    edi
c001b4f8:	5d                   	pop    ebp
c001b4f9:	e9 cc 4b ff ff       	jmp    c00100ca <Device::preOpenPCI(PCIDeviceInfo)>
c001b4fe:	83 c4 1c             	add    esp,0x1c
c001b501:	5b                   	pop    ebx
c001b502:	5e                   	pop    esi
c001b503:	5f                   	pop    edi
c001b504:	5d                   	pop    ebp
c001b505:	c3                   	ret    

c001b506 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b506:	55                   	push   ebp
c001b507:	57                   	push   edi
c001b508:	56                   	push   esi
c001b509:	53                   	push   ebx
c001b50a:	83 ec 5c             	sub    esp,0x5c
c001b50d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001b511:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b515:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001b519:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001b51e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b522:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001b526:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001b52b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b52f:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001b534:	6a 0c                	push   0xc
c001b536:	55                   	push   ebp
c001b537:	53                   	push   ebx
c001b538:	57                   	push   edi
c001b539:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001b540:	e8 03 fc ff ff       	call   c001b148 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b545:	83 c4 0c             	add    esp,0xc
c001b548:	6a 00                	push   0x0
c001b54a:	68 35 1f 02 c0       	push   0xc0021f35
c001b54f:	e8 91 38 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001b554:	55                   	push   ebp
c001b555:	53                   	push   ebx
c001b556:	57                   	push   edi
c001b557:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b55e:	e8 73 fc ff ff       	call   c001b1d6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b563:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001b568:	83 c4 20             	add    esp,0x20
c001b56b:	55                   	push   ebp
c001b56c:	53                   	push   ebx
c001b56d:	57                   	push   edi
c001b56e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b572:	e8 e9 fc ff ff       	call   c001b260 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b577:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001b57e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b582:	55                   	push   ebp
c001b583:	53                   	push   ebx
c001b584:	57                   	push   edi
c001b585:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b58c:	e8 b7 fb ff ff       	call   c001b148 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b591:	0f b6 c4             	movzx  eax,ah
c001b594:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b598:	83 c4 18             	add    esp,0x18
c001b59b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b59f:	68 49 1f 02 c0       	push   0xc0021f49
c001b5a4:	e8 3c 38 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001b5a9:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b5ad:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001b5b1:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c001b5b6:	83 c4 10             	add    esp,0x10
c001b5b9:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001b5bf:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001b5c6:	74 6c                	je     c001b634 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b5c8:	31 f6                	xor    esi,esi
c001b5ca:	8b 15 08 32 02 c0    	mov    edx,DWORD PTR ds:0xc0023208
c001b5d0:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b5d6:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001b5dc:	7e 56                	jle    c001b634 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b5de:	8d 14 f2             	lea    edx,[edx+esi*8]
c001b5e1:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001b5e8:	39 cb                	cmp    ebx,ecx
c001b5ea:	75 45                	jne    c001b631 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b5ec:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001b5f3:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001b5f7:	75 38                	jne    c001b631 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b5f9:	83 ec 0c             	sub    esp,0xc
c001b5fc:	68 58 1f 02 c0       	push   0xc0021f58
c001b601:	e8 df 37 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001b606:	8b 15 08 32 02 c0    	mov    edx,DWORD PTR ds:0xc0023208
c001b60c:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b612:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001b61a:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001b61e:	52                   	push   edx
c001b61f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b623:	53                   	push   ebx
c001b624:	68 7d 1f 02 c0       	push   0xc0021f7d
c001b629:	e8 b7 37 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001b62e:	83 c4 20             	add    esp,0x20
c001b631:	46                   	inc    esi
c001b632:	eb 96                	jmp    c001b5ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001b634:	31 d2                	xor    edx,edx
c001b636:	83 ec 0c             	sub    esp,0xc
c001b639:	55                   	push   ebp
c001b63a:	53                   	push   ebx
c001b63b:	57                   	push   edi
c001b63c:	52                   	push   edx
c001b63d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b641:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b648:	e8 59 fc ff ff       	call   c001b2a6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b64d:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001b651:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b655:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b659:	42                   	inc    edx
c001b65a:	83 c4 20             	add    esp,0x20
c001b65d:	83 fa 06             	cmp    edx,0x6
c001b660:	75 d4                	jne    c001b636 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001b662:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b666:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001b66a:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001b66e:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001b672:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001b676:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b67a:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b67f:	86 e0                	xchg   al,ah
c001b681:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001b686:	55                   	push   ebp
c001b687:	53                   	push   ebx
c001b688:	57                   	push   edi
c001b689:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b68d:	e8 88 fb ff ff       	call   c001b21a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b692:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b696:	55                   	push   ebp
c001b697:	53                   	push   ebx
c001b698:	57                   	push   edi
c001b699:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b6a0:	e8 eb fa ff ff       	call   c001b190 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b6a5:	83 ec 0c             	sub    esp,0xc
c001b6a8:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001b6ad:	b9 09 00 00 00       	mov    ecx,0x9
c001b6b2:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001b6b6:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001b6ba:	fc                   	cld    
c001b6bb:	89 e7                	mov    edi,esp
c001b6bd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b6bf:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001b6c6:	e8 cb fc ff ff       	call   c001b396 <PCI::foundDevice(PCIDeviceInfo)>
c001b6cb:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b6d1:	5b                   	pop    ebx
c001b6d2:	5e                   	pop    esi
c001b6d3:	5f                   	pop    edi
c001b6d4:	5d                   	pop    ebp
c001b6d5:	c3                   	ret    

c001b6d6 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b6d6:	55                   	push   ebp
c001b6d7:	57                   	push   edi
c001b6d8:	56                   	push   esi
c001b6d9:	53                   	push   ebx
c001b6da:	83 ec 0c             	sub    esp,0xc
c001b6dd:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b6e1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b6e6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b6eb:	6a 00                	push   0x0
c001b6ed:	56                   	push   esi
c001b6ee:	57                   	push   edi
c001b6ef:	55                   	push   ebp
c001b6f0:	e8 9b fa ff ff       	call   c001b190 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b6f5:	6a 00                	push   0x0
c001b6f7:	56                   	push   esi
c001b6f8:	57                   	push   edi
c001b6f9:	55                   	push   ebp
c001b6fa:	e8 07 fe ff ff       	call   c001b506 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b6ff:	83 c4 20             	add    esp,0x20
c001b702:	6a 00                	push   0x0
c001b704:	56                   	push   esi
c001b705:	57                   	push   edi
c001b706:	55                   	push   ebp
c001b707:	e8 a6 fa ff ff       	call   c001b1b2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b70c:	83 c4 10             	add    esp,0x10
c001b70f:	84 c0                	test   al,al
c001b711:	79 27                	jns    c001b73a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b713:	bb 01 00 00 00       	mov    ebx,0x1
c001b718:	53                   	push   ebx
c001b719:	56                   	push   esi
c001b71a:	57                   	push   edi
c001b71b:	55                   	push   ebp
c001b71c:	e8 6f fa ff ff       	call   c001b190 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b721:	83 c4 10             	add    esp,0x10
c001b724:	66 40                	inc    ax
c001b726:	74 0c                	je     c001b734 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001b728:	53                   	push   ebx
c001b729:	56                   	push   esi
c001b72a:	57                   	push   edi
c001b72b:	55                   	push   ebp
c001b72c:	e8 d5 fd ff ff       	call   c001b506 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b731:	83 c4 10             	add    esp,0x10
c001b734:	43                   	inc    ebx
c001b735:	83 fb 08             	cmp    ebx,0x8
c001b738:	75 de                	jne    c001b718 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b73a:	83 c4 0c             	add    esp,0xc
c001b73d:	5b                   	pop    ebx
c001b73e:	5e                   	pop    esi
c001b73f:	5f                   	pop    edi
c001b740:	5d                   	pop    ebp
c001b741:	c3                   	ret    

c001b742 <PCI::detect()>:
c001b742:	56                   	push   esi
c001b743:	53                   	push   ebx
c001b744:	53                   	push   ebx
c001b745:	31 db                	xor    ebx,ebx
c001b747:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b74b:	6a 00                	push   0x0
c001b74d:	6a 00                	push   0x0
c001b74f:	6a 00                	push   0x0
c001b751:	56                   	push   esi
c001b752:	e8 5b fa ff ff       	call   c001b1b2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b757:	83 c4 10             	add    esp,0x10
c001b75a:	a8 80                	test   al,0x80
c001b75c:	75 21                	jne    c001b77f <PCI::detect()+0x3d>
c001b75e:	51                   	push   ecx
c001b75f:	51                   	push   ecx
c001b760:	6a 00                	push   0x0
c001b762:	56                   	push   esi
c001b763:	e8 0a fc ff ff       	call   c001b372 <PCI::checkBus(unsigned char)>
c001b768:	83 c4 10             	add    esp,0x10
c001b76b:	eb 24                	jmp    c001b791 <PCI::detect()+0x4f>
c001b76d:	52                   	push   edx
c001b76e:	52                   	push   edx
c001b76f:	53                   	push   ebx
c001b770:	43                   	inc    ebx
c001b771:	56                   	push   esi
c001b772:	e8 fb fb ff ff       	call   c001b372 <PCI::checkBus(unsigned char)>
c001b777:	83 c4 10             	add    esp,0x10
c001b77a:	83 fb 08             	cmp    ebx,0x8
c001b77d:	74 12                	je     c001b791 <PCI::detect()+0x4f>
c001b77f:	53                   	push   ebx
c001b780:	6a 00                	push   0x0
c001b782:	6a 00                	push   0x0
c001b784:	56                   	push   esi
c001b785:	e8 06 fa ff ff       	call   c001b190 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b78a:	83 c4 10             	add    esp,0x10
c001b78d:	66 40                	inc    ax
c001b78f:	74 dc                	je     c001b76d <PCI::detect()+0x2b>
c001b791:	58                   	pop    eax
c001b792:	5b                   	pop    ebx
c001b793:	5e                   	pop    esi
c001b794:	c3                   	ret    
c001b795:	90                   	nop

c001b796 <IDE::close(int, int, void*)>:
c001b796:	83 c8 ff             	or     eax,0xffffffff
c001b799:	c3                   	ret    

c001b79a <IDE::IDE()>:
c001b79a:	83 ec 0c             	sub    esp,0xc
c001b79d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7a1:	83 ec 08             	sub    esp,0x8
c001b7a4:	68 c4 1f 02 c0       	push   0xc0021fc4
c001b7a9:	50                   	push   eax
c001b7aa:	e8 c3 4d ff ff       	call   c0010572 <HardDiskController::HardDiskController(char const*)>
c001b7af:	83 c4 10             	add    esp,0x10
c001b7b2:	ba 04 22 02 c0       	mov    edx,0xc0022204
c001b7b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7bb:	89 10                	mov    DWORD PTR [eax],edx
c001b7bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7c1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b7c8:	90                   	nop
c001b7c9:	83 c4 0c             	add    esp,0xc
c001b7cc:	c3                   	ret    
c001b7cd:	90                   	nop

c001b7ce <IDE::prepareInterrupt(unsigned char)>:
c001b7ce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b7d3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b7d7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b7df:	c3                   	ret    

c001b7e0 <selectDrive(unsigned char, unsigned char)>:
c001b7e0:	c3                   	ret    
c001b7e1:	90                   	nop

c001b7e2 <IDE::getBase(unsigned char)>:
c001b7e2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b7e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7eb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b7f3:	c3                   	ret    

c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b7f4:	55                   	push   ebp
c001b7f5:	57                   	push   edi
c001b7f6:	56                   	push   esi
c001b7f7:	53                   	push   ebx
c001b7f8:	83 ec 1c             	sub    esp,0x1c
c001b7fb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b7ff:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b803:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b806:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b80a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b80e:	80 f9 03             	cmp    cl,0x3
c001b811:	77 51                	ja     c001b864 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001b813:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b817:	0f b6 f2             	movzx  esi,dl
c001b81a:	0f b6 db             	movzx  ebx,bl
c001b81d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b820:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001b824:	83 ca 80             	or     edx,0xffffff80
c001b827:	0f b6 d2             	movzx  edx,dl
c001b82a:	52                   	push   edx
c001b82b:	6a 0c                	push   0xc
c001b82d:	56                   	push   esi
c001b82e:	57                   	push   edi
c001b82f:	e8 c0 ff ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b834:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001b839:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b83d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b841:	ee                   	out    dx,al
c001b842:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001b847:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001b84b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001b84f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b853:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b85b:	83 c4 2c             	add    esp,0x2c
c001b85e:	5b                   	pop    ebx
c001b85f:	5e                   	pop    esi
c001b860:	5f                   	pop    edi
c001b861:	5d                   	pop    ebp
c001b862:	eb 90                	jmp    c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b864:	80 fb 07             	cmp    bl,0x7
c001b867:	77 12                	ja     c001b87b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001b869:	0f b6 d2             	movzx  edx,dl
c001b86c:	0f b6 db             	movzx  ebx,bl
c001b86f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001b877:	89 da                	mov    edx,ebx
c001b879:	eb 2f                	jmp    c001b8aa <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001b87b:	80 fb 0d             	cmp    bl,0xd
c001b87e:	77 13                	ja     c001b893 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001b880:	0f b6 d2             	movzx  edx,dl
c001b883:	0f b6 db             	movzx  ebx,bl
c001b886:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001b88d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b891:	eb 17                	jmp    c001b8aa <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001b893:	80 fb 15             	cmp    bl,0x15
c001b896:	77 13                	ja     c001b8ab <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b898:	0f b6 d2             	movzx  edx,dl
c001b89b:	0f b6 db             	movzx  ebx,bl
c001b89e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001b8a6:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b8aa:	ee                   	out    dx,al
c001b8ab:	83 c4 1c             	add    esp,0x1c
c001b8ae:	5b                   	pop    ebx
c001b8af:	5e                   	pop    esi
c001b8b0:	5f                   	pop    edi
c001b8b1:	5d                   	pop    ebp
c001b8b2:	c3                   	ret    
c001b8b3:	90                   	nop

c001b8b4 <IDE::read(unsigned char, unsigned char)>:
c001b8b4:	55                   	push   ebp
c001b8b5:	57                   	push   edi
c001b8b6:	56                   	push   esi
c001b8b7:	53                   	push   ebx
c001b8b8:	83 ec 1c             	sub    esp,0x1c
c001b8bb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b8bf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b8c3:	8d 43 f8             	lea    eax,[ebx-0x8]
c001b8c6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b8ca:	3c 03                	cmp    al,0x3
c001b8cc:	77 43                	ja     c001b911 <IDE::read(unsigned char, unsigned char)+0x5d>
c001b8ce:	0f b6 f2             	movzx  esi,dl
c001b8d1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b8d4:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001b8d8:	83 c8 80             	or     eax,0xffffff80
c001b8db:	0f b6 c0             	movzx  eax,al
c001b8de:	50                   	push   eax
c001b8df:	6a 0c                	push   0xc
c001b8e1:	56                   	push   esi
c001b8e2:	57                   	push   edi
c001b8e3:	e8 0c ff ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b8e8:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001b8ed:	0f b6 c3             	movzx  eax,bl
c001b8f0:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001b8f4:	ec                   	in     al,dx
c001b8f5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b8f9:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001b8fe:	52                   	push   edx
c001b8ff:	6a 0c                	push   0xc
c001b901:	56                   	push   esi
c001b902:	57                   	push   edi
c001b903:	e8 ec fe ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b908:	83 c4 20             	add    esp,0x20
c001b90b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b90f:	eb 49                	jmp    c001b95a <IDE::read(unsigned char, unsigned char)+0xa6>
c001b911:	80 fb 07             	cmp    bl,0x7
c001b914:	77 12                	ja     c001b928 <IDE::read(unsigned char, unsigned char)+0x74>
c001b916:	0f b6 d2             	movzx  edx,dl
c001b919:	0f b6 c3             	movzx  eax,bl
c001b91c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001b924:	89 c2                	mov    edx,eax
c001b926:	eb 31                	jmp    c001b959 <IDE::read(unsigned char, unsigned char)+0xa5>
c001b928:	80 fb 0d             	cmp    bl,0xd
c001b92b:	77 13                	ja     c001b940 <IDE::read(unsigned char, unsigned char)+0x8c>
c001b92d:	0f b6 d2             	movzx  edx,dl
c001b930:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001b937:	0f b6 d3             	movzx  edx,bl
c001b93a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b93e:	eb 19                	jmp    c001b959 <IDE::read(unsigned char, unsigned char)+0xa5>
c001b940:	31 c0                	xor    eax,eax
c001b942:	80 fb 15             	cmp    bl,0x15
c001b945:	77 13                	ja     c001b95a <IDE::read(unsigned char, unsigned char)+0xa6>
c001b947:	0f b6 d2             	movzx  edx,dl
c001b94a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001b952:	0f b6 d3             	movzx  edx,bl
c001b955:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b959:	ec                   	in     al,dx
c001b95a:	83 c4 1c             	add    esp,0x1c
c001b95d:	5b                   	pop    ebx
c001b95e:	5e                   	pop    esi
c001b95f:	5f                   	pop    edi
c001b960:	5d                   	pop    ebp
c001b961:	c3                   	ret    

c001b962 <IDE::waitInterrupt(unsigned char)>:
c001b962:	55                   	push   ebp
c001b963:	57                   	push   edi
c001b964:	56                   	push   esi
c001b965:	53                   	push   ebx
c001b966:	31 db                	xor    ebx,ebx
c001b968:	83 ec 0c             	sub    esp,0xc
c001b96b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b96f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b974:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b97c:	89 e8                	mov    eax,ebp
c001b97e:	84 c0                	test   al,al
c001b980:	75 34                	jne    c001b9b6 <IDE::waitInterrupt(unsigned char)+0x54>
c001b982:	52                   	push   edx
c001b983:	6a 0c                	push   0xc
c001b985:	56                   	push   esi
c001b986:	57                   	push   edi
c001b987:	e8 28 ff ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001b98c:	83 c4 10             	add    esp,0x10
c001b98f:	a8 01                	test   al,0x1
c001b991:	75 2b                	jne    c001b9be <IDE::waitInterrupt(unsigned char)+0x5c>
c001b993:	f6 c3 04             	test   bl,0x4
c001b996:	75 16                	jne    c001b9ae <IDE::waitInterrupt(unsigned char)+0x4c>
c001b998:	83 fb 32             	cmp    ebx,0x32
c001b99b:	7e 11                	jle    c001b9ae <IDE::waitInterrupt(unsigned char)+0x4c>
c001b99d:	50                   	push   eax
c001b99e:	50                   	push   eax
c001b99f:	6a 00                	push   0x0
c001b9a1:	68 80 96 98 00       	push   0x989680
c001b9a6:	e8 e8 c4 ff ff       	call   c0017e93 <nanoSleep(unsigned long long)>
c001b9ab:	83 c4 10             	add    esp,0x10
c001b9ae:	83 fb 3c             	cmp    ebx,0x3c
c001b9b1:	74 0b                	je     c001b9be <IDE::waitInterrupt(unsigned char)+0x5c>
c001b9b3:	43                   	inc    ebx
c001b9b4:	eb be                	jmp    c001b974 <IDE::waitInterrupt(unsigned char)+0x12>
c001b9b6:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b9be:	83 c4 0c             	add    esp,0xc
c001b9c1:	89 e8                	mov    eax,ebp
c001b9c3:	5b                   	pop    ebx
c001b9c4:	5e                   	pop    esi
c001b9c5:	5f                   	pop    edi
c001b9c6:	5d                   	pop    ebp
c001b9c7:	c3                   	ret    

c001b9c8 <ideChannel0IRQHandler(regs*, void*)>:
c001b9c8:	83 ec 10             	sub    esp,0x10
c001b9cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9cf:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b9d6:	6a 07                	push   0x7
c001b9d8:	6a 00                	push   0x0
c001b9da:	50                   	push   eax
c001b9db:	e8 d4 fe ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001b9e0:	83 c4 1c             	add    esp,0x1c
c001b9e3:	c3                   	ret    

c001b9e4 <ideChannel1IRQHandler(regs*, void*)>:
c001b9e4:	83 ec 10             	sub    esp,0x10
c001b9e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9eb:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b9f2:	6a 07                	push   0x7
c001b9f4:	6a 01                	push   0x1
c001b9f6:	50                   	push   eax
c001b9f7:	e8 b8 fe ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001b9fc:	83 c4 1c             	add    esp,0x1c
c001b9ff:	c3                   	ret    

c001ba00 <IDE::enableIRQs(unsigned char, bool)>:
c001ba00:	57                   	push   edi
c001ba01:	56                   	push   esi
c001ba02:	be 04 00 00 00       	mov    esi,0x4
c001ba07:	53                   	push   ebx
c001ba08:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ba0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba11:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001ba16:	0f 94 c0             	sete   al
c001ba19:	d1 e0                	shl    eax,1
c001ba1b:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001ba22:	0f b6 c0             	movzx  eax,al
c001ba25:	50                   	push   eax
c001ba26:	6a 0c                	push   0xc
c001ba28:	57                   	push   edi
c001ba29:	53                   	push   ebx
c001ba2a:	e8 c5 fd ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba2f:	83 c4 10             	add    esp,0x10
c001ba32:	50                   	push   eax
c001ba33:	6a 0c                	push   0xc
c001ba35:	57                   	push   edi
c001ba36:	53                   	push   ebx
c001ba37:	e8 78 fe ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001ba3c:	83 c4 10             	add    esp,0x10
c001ba3f:	4e                   	dec    esi
c001ba40:	75 f0                	jne    c001ba32 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001ba42:	5b                   	pop    ebx
c001ba43:	5e                   	pop    esi
c001ba44:	5f                   	pop    edi
c001ba45:	c3                   	ret    

c001ba46 <IDE::open(int, int, void*)>:
c001ba46:	55                   	push   ebp
c001ba47:	57                   	push   edi
c001ba48:	56                   	push   esi
c001ba49:	53                   	push   ebx
c001ba4a:	83 ec 1c             	sub    esp,0x1c
c001ba4d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ba51:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ba5a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ba63:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ba6a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ba71:	0f 85 b0 02 00 00    	jne    c001bd27 <IDE::open(int, int, void*)+0x2e1>
c001ba77:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ba7d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001ba81:	83 e0 7f             	and    eax,0x7f
c001ba84:	3c 05                	cmp    al,0x5
c001ba86:	74 04                	je     c001ba8c <IDE::open(int, int, void*)+0x46>
c001ba88:	3c 0f                	cmp    al,0xf
c001ba8a:	75 32                	jne    c001babe <IDE::open(int, int, void*)+0x78>
c001ba8c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ba92:	83 e0 fc             	and    eax,0xfffffffc
c001ba95:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ba9c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001baa2:	83 e0 fc             	and    eax,0xfffffffc
c001baa5:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001baac:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bab2:	83 e0 fc             	and    eax,0xfffffffc
c001bab5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001babc:	eb 14                	jmp    c001bad2 <IDE::open(int, int, void*)+0x8c>
c001babe:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bac8:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bad2:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001bad9:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bae0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bae4:	89 c6                	mov    esi,eax
c001bae6:	bf f8 0c 00 00       	mov    edi,0xcf8
c001baeb:	c1 e6 10             	shl    esi,0x10
c001baee:	89 e8                	mov    eax,ebp
c001baf0:	89 fa                	mov    edx,edi
c001baf2:	c1 e0 0b             	shl    eax,0xb
c001baf5:	09 f0                	or     eax,esi
c001baf7:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001bafe:	c1 e6 08             	shl    esi,0x8
c001bb01:	09 c6                	or     esi,eax
c001bb03:	89 f0                	mov    eax,esi
c001bb05:	0d 08 00 00 80       	or     eax,0x80000008
c001bb0a:	ef                   	out    dx,eax
c001bb0b:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001bb10:	89 ca                	mov    edx,ecx
c001bb12:	ed                   	in     eax,dx
c001bb13:	c1 e8 10             	shr    eax,0x10
c001bb16:	3d ff ff 00 00       	cmp    eax,0xffff
c001bb1b:	0f 84 f5 00 00 00    	je     c001bc16 <IDE::open(int, int, void*)+0x1d0>
c001bb21:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001bb27:	89 fa                	mov    edx,edi
c001bb29:	89 f0                	mov    eax,esi
c001bb2b:	ef                   	out    dx,eax
c001bb2c:	b0 fe                	mov    al,0xfe
c001bb2e:	89 ca                	mov    edx,ecx
c001bb30:	ee                   	out    dx,al
c001bb31:	89 f0                	mov    eax,esi
c001bb33:	89 fa                	mov    edx,edi
c001bb35:	ef                   	out    dx,eax
c001bb36:	89 ca                	mov    edx,ecx
c001bb38:	ed                   	in     eax,dx
c001bb39:	3c fe                	cmp    al,0xfe
c001bb3b:	0f 85 a9 00 00 00    	jne    c001bbea <IDE::open(int, int, void*)+0x1a4>
c001bb41:	8b 15 08 32 02 c0    	mov    edx,DWORD PTR ds:0xc0023208
c001bb47:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001bb4e:	74 33                	je     c001bb83 <IDE::open(int, int, void*)+0x13d>
c001bb50:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bb56:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bb5a:	40                   	inc    eax
c001bb5b:	83 ec 0c             	sub    esp,0xc
c001bb5e:	0f b6 c0             	movzx  eax,al
c001bb61:	50                   	push   eax
c001bb62:	55                   	push   ebp
c001bb63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bb67:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001bb6d:	51                   	push   ecx
c001bb6e:	e8 c7 77 ff ff       	call   c001333a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bb73:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bb78:	83 c4 1c             	add    esp,0x1c
c001bb7b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bb81:	eb 0a                	jmp    c001bb8d <IDE::open(int, int, void*)+0x147>
c001bb83:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bb8d:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bb94:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bb9b:	c1 e1 10             	shl    ecx,0x10
c001bb9e:	c1 e0 08             	shl    eax,0x8
c001bba1:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bba6:	09 c1                	or     ecx,eax
c001bba8:	89 fa                	mov    edx,edi
c001bbaa:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bbb1:	c1 e0 0b             	shl    eax,0xb
c001bbb4:	09 c1                	or     ecx,eax
c001bbb6:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bbbc:	89 c8                	mov    eax,ecx
c001bbbe:	ef                   	out    dx,eax
c001bbbf:	be fc 0c 00 00       	mov    esi,0xcfc
c001bbc4:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bbca:	89 f2                	mov    edx,esi
c001bbcc:	ee                   	out    dx,al
c001bbcd:	89 c8                	mov    eax,ecx
c001bbcf:	89 fa                	mov    edx,edi
c001bbd1:	ef                   	out    dx,eax
c001bbd2:	89 f2                	mov    edx,esi
c001bbd4:	ed                   	in     eax,dx
c001bbd5:	0f b6 c0             	movzx  eax,al
c001bbd8:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bbde:	74 46                	je     c001bc26 <IDE::open(int, int, void*)+0x1e0>
c001bbe0:	83 ec 0c             	sub    esp,0xc
c001bbe3:	68 dc 1f 02 c0       	push   0xc0021fdc
c001bbe8:	eb 34                	jmp    c001bc1e <IDE::open(int, int, void*)+0x1d8>
c001bbea:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bbf3:	75 17                	jne    c001bc0c <IDE::open(int, int, void*)+0x1c6>
c001bbf5:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001bbfa:	74 07                	je     c001bc03 <IDE::open(int, int, void*)+0x1bd>
c001bbfc:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001bc01:	75 09                	jne    c001bc0c <IDE::open(int, int, void*)+0x1c6>
c001bc03:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bc0a:	eb 1a                	jmp    c001bc26 <IDE::open(int, int, void*)+0x1e0>
c001bc0c:	83 ec 0c             	sub    esp,0xc
c001bc0f:	68 e4 1f 02 c0       	push   0xc0021fe4
c001bc14:	eb 08                	jmp    c001bc1e <IDE::open(int, int, void*)+0x1d8>
c001bc16:	83 ec 0c             	sub    esp,0xc
c001bc19:	68 15 20 02 c0       	push   0xc0022015
c001bc1e:	e8 57 8e ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c001bc23:	83 c4 10             	add    esp,0x10
c001bc26:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001bc2d:	79 1a                	jns    c001bc49 <IDE::open(int, int, void*)+0x203>
c001bc2f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bc35:	83 e0 fc             	and    eax,0xfffffffc
c001bc38:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bc3f:	83 c0 08             	add    eax,0x8
c001bc42:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bc49:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bc4f:	89 c2                	mov    edx,eax
c001bc51:	83 e2 0f             	and    edx,0xf
c001bc54:	66 83 fa 08          	cmp    dx,0x8
c001bc58:	75 0a                	jne    c001bc64 <IDE::open(int, int, void*)+0x21e>
c001bc5a:	83 e8 02             	sub    eax,0x2
c001bc5d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bc64:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bc6a:	89 c2                	mov    edx,eax
c001bc6c:	83 e2 0f             	and    edx,0xf
c001bc6f:	66 83 fa 08          	cmp    dx,0x8
c001bc73:	75 0a                	jne    c001bc7f <IDE::open(int, int, void*)+0x239>
c001bc75:	83 e8 02             	sub    eax,0x2
c001bc78:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bc7f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bc86:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bc8d:	89 d0                	mov    eax,edx
c001bc8f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bc92:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bc96:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bc9a:	8d 4a 01             	lea    ecx,[edx+0x1]
c001bc9d:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bca2:	0f b6 c9             	movzx  ecx,cl
c001bca5:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bcac:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bcaf:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bcb3:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bcb7:	8d 50 02             	lea    edx,[eax+0x2]
c001bcba:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001bcbf:	0f b6 d2             	movzx  edx,dl
c001bcc2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bcc8:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bccb:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bccf:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bcd3:	8d 48 03             	lea    ecx,[eax+0x3]
c001bcd6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bcdb:	0f b6 c9             	movzx  ecx,cl
c001bcde:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bce4:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bce7:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bceb:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bcef:	8d 50 04             	lea    edx,[eax+0x4]
c001bcf2:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bcf8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001bcfd:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bd04:	66 85 f6             	test   si,si
c001bd07:	74 3e                	je     c001bd47 <IDE::open(int, int, void*)+0x301>
c001bd09:	0f b6 d2             	movzx  edx,dl
c001bd0c:	83 c0 05             	add    eax,0x5
c001bd0f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bd12:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bd16:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bd1a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bd20:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bd25:	eb 20                	jmp    c001bd47 <IDE::open(int, int, void*)+0x301>
c001bd27:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bd31:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bd3b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bd42:	e9 02 ff ff ff       	jmp    c001bc49 <IDE::open(int, int, void*)+0x203>
c001bd47:	52                   	push   edx
c001bd48:	52                   	push   edx
c001bd49:	6a 00                	push   0x0
c001bd4b:	53                   	push   ebx
c001bd4c:	e8 7d fa ff ff       	call   c001b7ce <IDE::prepareInterrupt(unsigned char)>
c001bd51:	59                   	pop    ecx
c001bd52:	5e                   	pop    esi
c001bd53:	6a 01                	push   0x1
c001bd55:	53                   	push   ebx
c001bd56:	e8 73 fa ff ff       	call   c001b7ce <IDE::prepareInterrupt(unsigned char)>
c001bd5b:	83 c4 0c             	add    esp,0xc
c001bd5e:	6a 00                	push   0x0
c001bd60:	6a 00                	push   0x0
c001bd62:	53                   	push   ebx
c001bd63:	e8 98 fc ff ff       	call   c001ba00 <IDE::enableIRQs(unsigned char, bool)>
c001bd68:	83 c4 0c             	add    esp,0xc
c001bd6b:	6a 00                	push   0x0
c001bd6d:	6a 01                	push   0x1
c001bd6f:	53                   	push   ebx
c001bd70:	e8 8b fc ff ff       	call   c001ba00 <IDE::enableIRQs(unsigned char, bool)>
c001bd75:	83 c4 10             	add    esp,0x10
c001bd78:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bd7f:	74 40                	je     c001bdc1 <IDE::open(int, int, void*)+0x37b>
c001bd81:	83 ec 0c             	sub    esp,0xc
c001bd84:	68 3f 20 02 c0       	push   0xc002203f
c001bd89:	e8 57 30 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001bd8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd91:	6a 01                	push   0x1
c001bd93:	68 c8 b9 01 c0       	push   0xc001b9c8
c001bd98:	6a 0e                	push   0xe
c001bd9a:	53                   	push   ebx
c001bd9b:	e8 a4 43 ff ff       	call   c0010144 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bda0:	83 c4 14             	add    esp,0x14
c001bda3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bda9:	53                   	push   ebx
c001bdaa:	6a 01                	push   0x1
c001bdac:	68 e4 b9 01 c0       	push   0xc001b9e4
c001bdb1:	6a 0f                	push   0xf
c001bdb3:	53                   	push   ebx
c001bdb4:	e8 8b 43 ff ff       	call   c0010144 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bdb9:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bdbf:	eb 4a                	jmp    c001be0b <IDE::open(int, int, void*)+0x3c5>
c001bdc1:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001bdcb:	50                   	push   eax
c001bdcc:	6a 0f                	push   0xf
c001bdce:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bdd4:	68 5b 20 02 c0       	push   0xc002205b
c001bdd9:	e8 07 30 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001bdde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bde1:	6a 00                	push   0x0
c001bde3:	68 c8 b9 01 c0       	push   0xc001b9c8
c001bde8:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bdee:	53                   	push   ebx
c001bdef:	e8 50 43 ff ff       	call   c0010144 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bdf4:	83 c4 14             	add    esp,0x14
c001bdf7:	53                   	push   ebx
c001bdf8:	6a 00                	push   0x0
c001bdfa:	68 e4 b9 01 c0       	push   0xc001b9e4
c001bdff:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001be05:	53                   	push   ebx
c001be06:	e8 39 43 ff ff       	call   c0010144 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001be0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be0d:	83 c4 20             	add    esp,0x20
c001be10:	83 ec 0c             	sub    esp,0xc
c001be13:	53                   	push   ebx
c001be14:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001be17:	83 c4 0c             	add    esp,0xc
c001be1a:	6a 07                	push   0x7
c001be1c:	6a 00                	push   0x0
c001be1e:	53                   	push   ebx
c001be1f:	e8 90 fa ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001be24:	83 c4 0c             	add    esp,0xc
c001be27:	6a 07                	push   0x7
c001be29:	6a 01                	push   0x1
c001be2b:	53                   	push   ebx
c001be2c:	e8 83 fa ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001be31:	83 c4 0c             	add    esp,0xc
c001be34:	6a 01                	push   0x1
c001be36:	6a 00                	push   0x0
c001be38:	53                   	push   ebx
c001be39:	e8 c2 fb ff ff       	call   c001ba00 <IDE::enableIRQs(unsigned char, bool)>
c001be3e:	83 c4 0c             	add    esp,0xc
c001be41:	6a 01                	push   0x1
c001be43:	6a 01                	push   0x1
c001be45:	53                   	push   ebx
c001be46:	e8 b5 fb ff ff       	call   c001ba00 <IDE::enableIRQs(unsigned char, bool)>
c001be4b:	83 c4 2c             	add    esp,0x2c
c001be4e:	31 c0                	xor    eax,eax
c001be50:	5b                   	pop    ebx
c001be51:	5e                   	pop    esi
c001be52:	5f                   	pop    edi
c001be53:	5d                   	pop    ebp
c001be54:	c3                   	ret    
c001be55:	90                   	nop

c001be56 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001be56:	55                   	push   ebp
c001be57:	57                   	push   edi
c001be58:	56                   	push   esi
c001be59:	53                   	push   ebx
c001be5a:	83 ec 1c             	sub    esp,0x1c
c001be5d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be61:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001be65:	8d 50 f8             	lea    edx,[eax-0x8]
c001be68:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001be6c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001be70:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001be74:	80 fa 03             	cmp    dl,0x3
c001be77:	77 5d                	ja     c001bed6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001be79:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001be7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001be81:	0f b6 db             	movzx  ebx,bl
c001be84:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001be87:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001be8b:	83 ca 80             	or     edx,0xffffff80
c001be8e:	0f b6 d2             	movzx  edx,dl
c001be91:	52                   	push   edx
c001be92:	6a 0c                	push   0xc
c001be94:	53                   	push   ebx
c001be95:	56                   	push   esi
c001be96:	e8 59 f9 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be9b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001bea0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bea4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bea8:	0f b6 c0             	movzx  eax,al
c001beab:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001beaf:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001beb1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001beb6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001beba:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bebe:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bec2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001beca:	83 c4 2c             	add    esp,0x2c
c001becd:	5b                   	pop    ebx
c001bece:	5e                   	pop    esi
c001becf:	5f                   	pop    edi
c001bed0:	5d                   	pop    ebp
c001bed1:	e9 1e f9 ff ff       	jmp    c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bed6:	3c 07                	cmp    al,0x7
c001bed8:	77 10                	ja     c001beea <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001beda:	0f b6 db             	movzx  ebx,bl
c001bedd:	0f b6 d0             	movzx  edx,al
c001bee0:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001bee8:	eb 2d                	jmp    c001bf17 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001beea:	3c 0d                	cmp    al,0xd
c001beec:	77 13                	ja     c001bf01 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001beee:	0f b6 db             	movzx  ebx,bl
c001bef1:	0f b6 c0             	movzx  eax,al
c001bef4:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001befb:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001beff:	eb 16                	jmp    c001bf17 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001bf01:	3c 15                	cmp    al,0x15
c001bf03:	77 14                	ja     c001bf19 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001bf05:	0f b6 db             	movzx  ebx,bl
c001bf08:	0f b6 c0             	movzx  eax,al
c001bf0b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001bf13:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001bf17:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bf19:	83 c4 1c             	add    esp,0x1c
c001bf1c:	5b                   	pop    ebx
c001bf1d:	5e                   	pop    esi
c001bf1e:	5f                   	pop    edi
c001bf1f:	5d                   	pop    ebp
c001bf20:	c3                   	ret    
c001bf21:	90                   	nop

c001bf22 <IDE::detect()>:
c001bf22:	55                   	push   ebp
c001bf23:	57                   	push   edi
c001bf24:	56                   	push   esi
c001bf25:	53                   	push   ebx
c001bf26:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bf2c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001bf33:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001bf3a:	0f 85 be 02 00 00    	jne    c001c1fe <IDE::detect()+0x2dc>
c001bf40:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001bf47:	31 f6                	xor    esi,esi
c001bf49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bf51:	31 ed                	xor    ebp,ebp
c001bf53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf57:	c1 e0 06             	shl    eax,0x6
c001bf5a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001bf62:	89 e8                	mov    eax,ebp
c001bf64:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bf68:	c1 e0 04             	shl    eax,0x4
c001bf6b:	83 c8 a0             	or     eax,0xffffffa0
c001bf6e:	0f b6 c0             	movzx  eax,al
c001bf71:	50                   	push   eax
c001bf72:	6a 06                	push   0x6
c001bf74:	56                   	push   esi
c001bf75:	53                   	push   ebx
c001bf76:	e8 79 f8 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf7b:	83 c4 0c             	add    esp,0xc
c001bf7e:	6a 0c                	push   0xc
c001bf80:	56                   	push   esi
c001bf81:	53                   	push   ebx
c001bf82:	e8 2d f9 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001bf87:	83 c4 0c             	add    esp,0xc
c001bf8a:	6a 0c                	push   0xc
c001bf8c:	56                   	push   esi
c001bf8d:	53                   	push   ebx
c001bf8e:	e8 21 f9 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001bf93:	83 c4 0c             	add    esp,0xc
c001bf96:	6a 0c                	push   0xc
c001bf98:	56                   	push   esi
c001bf99:	53                   	push   ebx
c001bf9a:	e8 15 f9 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001bf9f:	83 c4 0c             	add    esp,0xc
c001bfa2:	6a 0c                	push   0xc
c001bfa4:	56                   	push   esi
c001bfa5:	53                   	push   ebx
c001bfa6:	e8 09 f9 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001bfab:	68 ec 00 00 00       	push   0xec
c001bfb0:	6a 07                	push   0x7
c001bfb2:	56                   	push   esi
c001bfb3:	53                   	push   ebx
c001bfb4:	e8 3b f8 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfb9:	83 c4 1c             	add    esp,0x1c
c001bfbc:	6a 0c                	push   0xc
c001bfbe:	56                   	push   esi
c001bfbf:	53                   	push   ebx
c001bfc0:	e8 ef f8 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001bfc5:	83 c4 0c             	add    esp,0xc
c001bfc8:	6a 0c                	push   0xc
c001bfca:	56                   	push   esi
c001bfcb:	53                   	push   ebx
c001bfcc:	e8 e3 f8 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001bfd1:	83 c4 0c             	add    esp,0xc
c001bfd4:	6a 0c                	push   0xc
c001bfd6:	56                   	push   esi
c001bfd7:	53                   	push   ebx
c001bfd8:	e8 d7 f8 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001bfdd:	83 c4 0c             	add    esp,0xc
c001bfe0:	6a 0c                	push   0xc
c001bfe2:	56                   	push   esi
c001bfe3:	53                   	push   ebx
c001bfe4:	e8 cb f8 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001bfe9:	83 c4 0c             	add    esp,0xc
c001bfec:	6a 0c                	push   0xc
c001bfee:	56                   	push   esi
c001bfef:	53                   	push   ebx
c001bff0:	e8 bf f8 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001bff5:	83 c4 10             	add    esp,0x10
c001bff8:	84 c0                	test   al,al
c001bffa:	0f 84 8b 01 00 00    	je     c001c18b <IDE::detect()+0x269>
c001c000:	31 ff                	xor    edi,edi
c001c002:	50                   	push   eax
c001c003:	6a 0c                	push   0xc
c001c005:	56                   	push   esi
c001c006:	53                   	push   ebx
c001c007:	e8 a8 f8 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001c00c:	83 c4 10             	add    esp,0x10
c001c00f:	a8 01                	test   al,0x1
c001c011:	0f 85 8e 01 00 00    	jne    c001c1a5 <IDE::detect()+0x283>
c001c017:	84 c0                	test   al,al
c001c019:	78 04                	js     c001c01f <IDE::detect()+0xfd>
c001c01b:	a8 08                	test   al,0x8
c001c01d:	75 27                	jne    c001c046 <IDE::detect()+0x124>
c001c01f:	47                   	inc    edi
c001c020:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c026:	7e da                	jle    c001c002 <IDE::detect()+0xe0>
c001c028:	50                   	push   eax
c001c029:	50                   	push   eax
c001c02a:	6a 00                	push   0x0
c001c02c:	68 40 4b 4c 00       	push   0x4c4b40
c001c031:	e8 5d be ff ff       	call   c0017e93 <nanoSleep(unsigned long long)>
c001c036:	83 c4 10             	add    esp,0x10
c001c039:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c03f:	75 c1                	jne    c001c002 <IDE::detect()+0xe0>
c001c041:	e9 5f 01 00 00       	jmp    c001c1a5 <IDE::detect()+0x283>
c001c046:	31 c9                	xor    ecx,ecx
c001c048:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c04c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c050:	83 ec 0c             	sub    esp,0xc
c001c053:	68 80 00 00 00       	push   0x80
c001c058:	57                   	push   edi
c001c059:	6a 00                	push   0x0
c001c05b:	56                   	push   esi
c001c05c:	53                   	push   ebx
c001c05d:	e8 f4 fd ff ff       	call   c001be56 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c062:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c067:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c06b:	89 d1                	mov    ecx,edx
c001c06d:	c1 e0 06             	shl    eax,0x6
c001c070:	01 d8                	add    eax,ebx
c001c072:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c079:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c080:	89 f2                	mov    edx,esi
c001c082:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c088:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c08c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c092:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c096:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c09d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c0a5:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c0ac:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c0b4:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c0ba:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c0c1:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c0c7:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c0cb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c0cf:	83 c4 20             	add    esp,0x20
c001c0d2:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c0d5:	83 c0 02             	add    eax,0x2
c001c0d8:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c0de:	83 c7 02             	add    edi,0x2
c001c0e1:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c0e4:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c0ea:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c0ee:	75 e2                	jne    c001c0d2 <IDE::detect()+0x1b0>
c001c0f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0f4:	c1 e0 06             	shl    eax,0x6
c001c0f7:	01 d8                	add    eax,ebx
c001c0f9:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001c0ff:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c106:	66 c1 ea 09          	shr    dx,0x9
c001c10a:	83 e2 01             	and    edx,0x1
c001c10d:	84 c9                	test   cl,cl
c001c10f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c115:	75 2f                	jne    c001c146 <IDE::detect()+0x224>
c001c117:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001c11d:	85 c0                	test   eax,eax
c001c11f:	74 66                	je     c001c187 <IDE::detect()+0x265>
c001c121:	50                   	push   eax
c001c122:	55                   	push   ebp
c001c123:	56                   	push   esi
c001c124:	68 77 20 02 c0       	push   0xc0022077
c001c129:	e8 b7 2c ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001c12e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c135:	e8 bc 2b ff ff       	call   c000ecf6 <operator new(unsigned long)>
c001c13a:	89 c7                	mov    edi,eax
c001c13c:	89 04 24             	mov    DWORD PTR [esp],eax
c001c13f:	e8 e8 02 00 00       	call   c001c42c <ATA::ATA()>
c001c144:	eb 28                	jmp    c001c16e <IDE::detect()+0x24c>
c001c146:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001c14c:	55                   	push   ebp
c001c14d:	56                   	push   esi
c001c14e:	68 a6 20 02 c0       	push   0xc00220a6
c001c153:	e8 8d 2c ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001c158:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001c15f:	e8 92 2b ff ff       	call   c000ecf6 <operator new(unsigned long)>
c001c164:	89 c7                	mov    edi,eax
c001c166:	89 04 24             	mov    DWORD PTR [esp],eax
c001c169:	e8 ee 08 00 00       	call   c001ca5c <ATAPI::ATAPI()>
c001c16e:	5a                   	pop    edx
c001c16f:	59                   	pop    ecx
c001c170:	57                   	push   edi
c001c171:	53                   	push   ebx
c001c172:	e8 79 40 ff ff       	call   c00101f0 <Device::addChild(Device*)>
c001c177:	8b 07                	mov    eax,DWORD PTR [edi]
c001c179:	53                   	push   ebx
c001c17a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c17e:	6a 00                	push   0x0
c001c180:	57                   	push   edi
c001c181:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c184:	83 c4 20             	add    esp,0x20
c001c187:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001c18b:	4d                   	dec    ebp
c001c18c:	74 0a                	je     c001c198 <IDE::detect()+0x276>
c001c18e:	bd 01 00 00 00       	mov    ebp,0x1
c001c193:	e9 bb fd ff ff       	jmp    c001bf53 <IDE::detect()+0x31>
c001c198:	4e                   	dec    esi
c001c199:	74 63                	je     c001c1fe <IDE::detect()+0x2dc>
c001c19b:	be 01 00 00 00       	mov    esi,0x1
c001c1a0:	e9 ac fd ff ff       	jmp    c001bf51 <IDE::detect()+0x2f>
c001c1a5:	50                   	push   eax
c001c1a6:	6a 04                	push   0x4
c001c1a8:	56                   	push   esi
c001c1a9:	53                   	push   ebx
c001c1aa:	e8 05 f7 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001c1af:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c1b3:	83 c4 0c             	add    esp,0xc
c001c1b6:	6a 05                	push   0x5
c001c1b8:	56                   	push   esi
c001c1b9:	53                   	push   ebx
c001c1ba:	e8 f5 f6 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001c1bf:	83 c4 10             	add    esp,0x10
c001c1c2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001c1c6:	80 fa 14             	cmp    dl,0x14
c001c1c9:	75 04                	jne    c001c1cf <IDE::detect()+0x2ad>
c001c1cb:	3c eb                	cmp    al,0xeb
c001c1cd:	eb 07                	jmp    c001c1d6 <IDE::detect()+0x2b4>
c001c1cf:	3c 96                	cmp    al,0x96
c001c1d1:	75 b8                	jne    c001c18b <IDE::detect()+0x269>
c001c1d3:	80 fa 69             	cmp    dl,0x69
c001c1d6:	75 b3                	jne    c001c18b <IDE::detect()+0x269>
c001c1d8:	68 a1 00 00 00       	push   0xa1
c001c1dd:	6a 07                	push   0x7
c001c1df:	56                   	push   esi
c001c1e0:	53                   	push   ebx
c001c1e1:	e8 0e f6 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1e6:	5f                   	pop    edi
c001c1e7:	58                   	pop    eax
c001c1e8:	6a 00                	push   0x0
c001c1ea:	68 40 42 0f 00       	push   0xf4240
c001c1ef:	e8 9f bc ff ff       	call   c0017e93 <nanoSleep(unsigned long long)>
c001c1f4:	83 c4 10             	add    esp,0x10
c001c1f7:	b1 01                	mov    cl,0x1
c001c1f9:	e9 4a fe ff ff       	jmp    c001c048 <IDE::detect()+0x126>
c001c1fe:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c204:	5b                   	pop    ebx
c001c205:	5e                   	pop    esi
c001c206:	5f                   	pop    edi
c001c207:	5d                   	pop    ebp
c001c208:	c3                   	ret    
c001c209:	90                   	nop

c001c20a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c20a:	55                   	push   ebp
c001c20b:	57                   	push   edi
c001c20c:	56                   	push   esi
c001c20d:	53                   	push   ebx
c001c20e:	83 ec 1c             	sub    esp,0x1c
c001c211:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c215:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c219:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c21d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001c221:	88 c3                	mov    bl,al
c001c223:	84 c0                	test   al,al
c001c225:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c229:	0f 84 67 01 00 00    	je     c001c396 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001c22f:	83 ec 0c             	sub    esp,0xc
c001c232:	68 d7 20 02 c0       	push   0xc00220d7
c001c237:	e8 a9 2b ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001c23c:	83 c4 10             	add    esp,0x10
c001c23f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c243:	3c 01                	cmp    al,0x1
c001c245:	75 17                	jne    c001c25e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001c247:	83 ec 0c             	sub    esp,0xc
c001c24a:	b3 13                	mov    bl,0x13
c001c24c:	68 e3 20 02 c0       	push   0xc00220e3
c001c251:	e8 8f 2b ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001c256:	83 c4 10             	add    esp,0x10
c001c259:	e9 25 01 00 00       	jmp    c001c383 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c25e:	3c 02                	cmp    al,0x2
c001c260:	0f 85 ef 00 00 00    	jne    c001c355 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001c266:	d1 e6                	shl    esi,1
c001c268:	09 ee                	or     esi,ebp
c001c26a:	52                   	push   edx
c001c26b:	89 f0                	mov    eax,esi
c001c26d:	6a 01                	push   0x1
c001c26f:	0f b6 f0             	movzx  esi,al
c001c272:	c1 e6 06             	shl    esi,0x6
c001c275:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001c27d:	50                   	push   eax
c001c27e:	57                   	push   edi
c001c27f:	e8 30 f6 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001c284:	83 c4 10             	add    esp,0x10
c001c287:	89 c6                	mov    esi,eax
c001c289:	a8 01                	test   al,0x1
c001c28b:	74 12                	je     c001c29f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001c28d:	83 ec 0c             	sub    esp,0xc
c001c290:	b3 07                	mov    bl,0x7
c001c292:	68 f8 20 02 c0       	push   0xc00220f8
c001c297:	e8 49 2b ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001c29c:	83 c4 10             	add    esp,0x10
c001c29f:	f7 c6 02 00 00 00    	test   esi,0x2
c001c2a5:	74 12                	je     c001c2b9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001c2a7:	83 ec 0c             	sub    esp,0xc
c001c2aa:	b3 03                	mov    bl,0x3
c001c2ac:	68 16 21 02 c0       	push   0xc0022116
c001c2b1:	e8 2f 2b ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001c2b6:	83 c4 10             	add    esp,0x10
c001c2b9:	f7 c6 04 00 00 00    	test   esi,0x4
c001c2bf:	74 12                	je     c001c2d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001c2c1:	83 ec 0c             	sub    esp,0xc
c001c2c4:	b3 14                	mov    bl,0x14
c001c2c6:	68 36 21 02 c0       	push   0xc0022136
c001c2cb:	e8 15 2b ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001c2d0:	83 c4 10             	add    esp,0x10
c001c2d3:	f7 c6 08 00 00 00    	test   esi,0x8
c001c2d9:	74 12                	je     c001c2ed <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001c2db:	83 ec 0c             	sub    esp,0xc
c001c2de:	b3 03                	mov    bl,0x3
c001c2e0:	68 16 21 02 c0       	push   0xc0022116
c001c2e5:	e8 fb 2a ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001c2ea:	83 c4 10             	add    esp,0x10
c001c2ed:	f7 c6 10 00 00 00    	test   esi,0x10
c001c2f3:	74 12                	je     c001c307 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001c2f5:	83 ec 0c             	sub    esp,0xc
c001c2f8:	b3 15                	mov    bl,0x15
c001c2fa:	68 4e 21 02 c0       	push   0xc002214e
c001c2ff:	e8 e1 2a ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001c304:	83 c4 10             	add    esp,0x10
c001c307:	f7 c6 20 00 00 00    	test   esi,0x20
c001c30d:	74 12                	je     c001c321 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001c30f:	83 ec 0c             	sub    esp,0xc
c001c312:	b3 03                	mov    bl,0x3
c001c314:	68 16 21 02 c0       	push   0xc0022116
c001c319:	e8 c7 2a ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001c31e:	83 c4 10             	add    esp,0x10
c001c321:	f7 c6 40 00 00 00    	test   esi,0x40
c001c327:	74 12                	je     c001c33b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001c329:	83 ec 0c             	sub    esp,0xc
c001c32c:	b3 16                	mov    bl,0x16
c001c32e:	68 68 21 02 c0       	push   0xc0022168
c001c333:	e8 ad 2a ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001c338:	83 c4 10             	add    esp,0x10
c001c33b:	89 f0                	mov    eax,esi
c001c33d:	84 c0                	test   al,al
c001c33f:	79 42                	jns    c001c383 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c341:	83 ec 0c             	sub    esp,0xc
c001c344:	b3 0d                	mov    bl,0xd
c001c346:	68 89 21 02 c0       	push   0xc0022189
c001c34b:	e8 95 2a ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001c350:	83 c4 10             	add    esp,0x10
c001c353:	eb 2e                	jmp    c001c383 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c355:	3c 03                	cmp    al,0x3
c001c357:	75 14                	jne    c001c36d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001c359:	83 ec 0c             	sub    esp,0xc
c001c35c:	b3 17                	mov    bl,0x17
c001c35e:	68 9d 21 02 c0       	push   0xc002219d
c001c363:	e8 7d 2a ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001c368:	83 c4 10             	add    esp,0x10
c001c36b:	eb 16                	jmp    c001c383 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c36d:	3c 04                	cmp    al,0x4
c001c36f:	75 12                	jne    c001c383 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c371:	83 ec 0c             	sub    esp,0xc
c001c374:	b3 08                	mov    bl,0x8
c001c376:	68 b3 21 02 c0       	push   0xc00221b3
c001c37b:	e8 65 2a ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001c380:	83 c4 10             	add    esp,0x10
c001c383:	50                   	push   eax
c001c384:	50                   	push   eax
c001c385:	0f b6 c3             	movzx  eax,bl
c001c388:	50                   	push   eax
c001c389:	68 cb 21 02 c0       	push   0xc00221cb
c001c38e:	e8 52 2a ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001c393:	83 c4 10             	add    esp,0x10
c001c396:	83 c4 1c             	add    esp,0x1c
c001c399:	88 d8                	mov    al,bl
c001c39b:	5b                   	pop    ebx
c001c39c:	5e                   	pop    esi
c001c39d:	5f                   	pop    edi
c001c39e:	5d                   	pop    ebp
c001c39f:	c3                   	ret    

c001c3a0 <IDE::polling(unsigned char, unsigned int)>:
c001c3a0:	57                   	push   edi
c001c3a1:	56                   	push   esi
c001c3a2:	53                   	push   ebx
c001c3a3:	bb 04 00 00 00       	mov    ebx,0x4
c001c3a8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c3ac:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c3b1:	52                   	push   edx
c001c3b2:	6a 0c                	push   0xc
c001c3b4:	56                   	push   esi
c001c3b5:	57                   	push   edi
c001c3b6:	e8 f9 f4 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001c3bb:	83 c4 10             	add    esp,0x10
c001c3be:	4b                   	dec    ebx
c001c3bf:	75 f0                	jne    c001c3b1 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c3c1:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c3c6:	50                   	push   eax
c001c3c7:	6a 0c                	push   0xc
c001c3c9:	56                   	push   esi
c001c3ca:	57                   	push   edi
c001c3cb:	e8 e4 f4 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001c3d0:	83 c4 10             	add    esp,0x10
c001c3d3:	a8 01                	test   al,0x1
c001c3d5:	74 12                	je     c001c3e9 <IDE::polling(unsigned char, unsigned int)+0x49>
c001c3d7:	83 ec 0c             	sub    esp,0xc
c001c3da:	68 e5 21 02 c0       	push   0xc00221e5
c001c3df:	e8 01 2a ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001c3e4:	83 c4 10             	add    esp,0x10
c001c3e7:	eb 17                	jmp    c001c400 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c3e9:	a8 20                	test   al,0x20
c001c3eb:	75 0f                	jne    c001c3fc <IDE::polling(unsigned char, unsigned int)+0x5c>
c001c3ed:	4b                   	dec    ebx
c001c3ee:	74 10                	je     c001c400 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c3f0:	84 c0                	test   al,al
c001c3f2:	78 d2                	js     c001c3c6 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c3f4:	a8 08                	test   al,0x8
c001c3f6:	74 ce                	je     c001c3c6 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c3f8:	31 c0                	xor    eax,eax
c001c3fa:	eb 06                	jmp    c001c402 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c3fc:	b0 01                	mov    al,0x1
c001c3fe:	eb 02                	jmp    c001c402 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c400:	b0 02                	mov    al,0x2
c001c402:	5b                   	pop    ebx
c001c403:	5e                   	pop    esi
c001c404:	5f                   	pop    edi
c001c405:	c3                   	ret    

c001c406 <ATA::close(int, int, void*)>:
c001c406:	83 ec 0c             	sub    esp,0xc
c001c409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c40d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c413:	85 c0                	test   eax,eax
c001c415:	74 0c                	je     c001c423 <ATA::close(int, int, void*)+0x1d>
c001c417:	83 ec 0c             	sub    esp,0xc
c001c41a:	8b 10                	mov    edx,DWORD PTR [eax]
c001c41c:	50                   	push   eax
c001c41d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c420:	83 c4 10             	add    esp,0x10
c001c423:	31 c0                	xor    eax,eax
c001c425:	83 c4 0c             	add    esp,0xc
c001c428:	c3                   	ret    
c001c429:	90                   	nop

c001c42a <ATA::powerSaving(PowerSavingLevel)>:
c001c42a:	c3                   	ret    
c001c42b:	90                   	nop

c001c42c <ATA::ATA()>:
c001c42c:	83 ec 0c             	sub    esp,0xc
c001c42f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c433:	83 ec 04             	sub    esp,0x4
c001c436:	68 00 02 00 00       	push   0x200
c001c43b:	68 28 22 02 c0       	push   0xc0022228
c001c440:	50                   	push   eax
c001c441:	e8 b0 41 ff ff       	call   c00105f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c446:	83 c4 10             	add    esp,0x10
c001c449:	ba 54 22 02 c0       	mov    edx,0xc0022254
c001c44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c452:	89 10                	mov    DWORD PTR [eax],edx
c001c454:	90                   	nop
c001c455:	83 c4 0c             	add    esp,0xc
c001c458:	c3                   	ret    
c001c459:	90                   	nop

c001c45a <ATA::flush(bool)>:
c001c45a:	53                   	push   ebx
c001c45b:	83 ec 08             	sub    esp,0x8
c001c45e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001c463:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c467:	19 c0                	sbb    eax,eax
c001c469:	83 e0 fd             	and    eax,0xfffffffd
c001c46c:	05 ea 00 00 00       	add    eax,0xea
c001c471:	50                   	push   eax
c001c472:	6a 07                	push   0x7
c001c474:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c47b:	50                   	push   eax
c001c47c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c482:	e8 6d f3 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c487:	83 c4 0c             	add    esp,0xc
c001c48a:	6a 00                	push   0x0
c001c48c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c493:	50                   	push   eax
c001c494:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c49a:	e8 01 ff ff ff       	call   c001c3a0 <IDE::polling(unsigned char, unsigned int)>
c001c49f:	83 c4 18             	add    esp,0x18
c001c4a2:	5b                   	pop    ebx
c001c4a3:	c3                   	ret    

c001c4a4 <ATA::readyForCommand()>:
c001c4a4:	56                   	push   esi
c001c4a5:	53                   	push   ebx
c001c4a6:	31 db                	xor    ebx,ebx
c001c4a8:	50                   	push   eax
c001c4a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c4ad:	50                   	push   eax
c001c4ae:	6a 0c                	push   0xc
c001c4b0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c4b7:	50                   	push   eax
c001c4b8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c4be:	e8 f1 f3 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001c4c3:	83 c4 10             	add    esp,0x10
c001c4c6:	a8 88                	test   al,0x88
c001c4c8:	74 23                	je     c001c4ed <ATA::readyForCommand()+0x49>
c001c4ca:	43                   	inc    ebx
c001c4cb:	83 fb 63             	cmp    ebx,0x63
c001c4ce:	7e dd                	jle    c001c4ad <ATA::readyForCommand()+0x9>
c001c4d0:	51                   	push   ecx
c001c4d1:	51                   	push   ecx
c001c4d2:	6a 00                	push   0x0
c001c4d4:	68 40 42 0f 00       	push   0xf4240
c001c4d9:	e8 b5 b9 ff ff       	call   c0017e93 <nanoSleep(unsigned long long)>
c001c4de:	83 c4 10             	add    esp,0x10
c001c4e1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c4e7:	75 c4                	jne    c001c4ad <ATA::readyForCommand()+0x9>
c001c4e9:	31 c0                	xor    eax,eax
c001c4eb:	eb 02                	jmp    c001c4ef <ATA::readyForCommand()+0x4b>
c001c4ed:	b0 01                	mov    al,0x1
c001c4ef:	5a                   	pop    edx
c001c4f0:	5b                   	pop    ebx
c001c4f1:	5e                   	pop    esi
c001c4f2:	c3                   	ret    
c001c4f3:	90                   	nop

c001c4f4 <ATA::access(unsigned long long, int, void*, bool)>:
c001c4f4:	55                   	push   ebp
c001c4f5:	57                   	push   edi
c001c4f6:	56                   	push   esi
c001c4f7:	53                   	push   ebx
c001c4f8:	83 ec 2c             	sub    esp,0x2c
c001c4fb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c4ff:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c503:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c507:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c50b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c50f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c513:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c517:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c51d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c521:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c527:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c52b:	c1 e0 06             	shl    eax,0x6
c001c52e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c536:	74 5d                	je     c001c595 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c538:	89 fa                	mov    edx,edi
c001c53a:	89 f0                	mov    eax,esi
c001c53c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c540:	c1 ea 1c             	shr    edx,0x1c
c001c543:	89 d1                	mov    ecx,edx
c001c545:	09 c1                	or     ecx,eax
c001c547:	74 25                	je     c001c56e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c549:	31 ed                	xor    ebp,ebp
c001c54b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c552:	89 fa                	mov    edx,edi
c001c554:	89 f0                	mov    eax,esi
c001c556:	0f ad d0             	shrd   eax,edx,cl
c001c559:	d3 ea                	shr    edx,cl
c001c55b:	f6 c1 20             	test   cl,0x20
c001c55e:	74 02                	je     c001c562 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c560:	89 d0                	mov    eax,edx
c001c562:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c566:	45                   	inc    ebp
c001c567:	83 fd 06             	cmp    ebp,0x6
c001c56a:	75 df                	jne    c001c54b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c56c:	eb 76                	jmp    c001c5e4 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c56e:	89 f0                	mov    eax,esi
c001c570:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c575:	89 fa                	mov    edx,edi
c001c577:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c57e:	0f ac d0 10          	shrd   eax,edx,0x10
c001c582:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c587:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c58b:	c1 ee 18             	shr    esi,0x18
c001c58e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c593:	eb 56                	jmp    c001c5eb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c595:	6a 00                	push   0x0
c001c597:	6a 3f                	push   0x3f
c001c599:	57                   	push   edi
c001c59a:	56                   	push   esi
c001c59b:	e8 dc 1e 00 00       	call   c001e47c <__umoddi3>
c001c5a0:	83 c4 10             	add    esp,0x10
c001c5a3:	40                   	inc    eax
c001c5a4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c5a8:	6a 00                	push   0x0
c001c5aa:	68 f0 03 00 00       	push   0x3f0
c001c5af:	57                   	push   edi
c001c5b0:	56                   	push   esi
c001c5b1:	e8 c6 1d 00 00       	call   c001e37c <__udivdi3>
c001c5b6:	83 c4 10             	add    esp,0x10
c001c5b9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c5be:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c5c5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c5ca:	6a 00                	push   0x0
c001c5cc:	6a 3f                	push   0x3f
c001c5ce:	57                   	push   edi
c001c5cf:	56                   	push   esi
c001c5d0:	e8 a7 1d 00 00       	call   c001e37c <__udivdi3>
c001c5d5:	83 c4 10             	add    esp,0x10
c001c5d8:	89 c6                	mov    esi,eax
c001c5da:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c5df:	83 e6 0f             	and    esi,0xf
c001c5e2:	eb 07                	jmp    c001c5eb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c5e4:	31 f6                	xor    esi,esi
c001c5e6:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c5eb:	bf 01 00 00 00       	mov    edi,0x1
c001c5f0:	50                   	push   eax
c001c5f1:	6a 00                	push   0x0
c001c5f3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c5fa:	50                   	push   eax
c001c5fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c5ff:	e8 fc f3 ff ff       	call   c001ba00 <IDE::enableIRQs(unsigned char, bool)>
c001c604:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c607:	e8 98 fe ff ff       	call   c001c4a4 <ATA::readyForCommand()>
c001c60c:	83 c4 10             	add    esp,0x10
c001c60f:	84 c0                	test   al,al
c001c611:	0f 84 50 02 00 00    	je     c001c867 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c617:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c61d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c623:	c1 e0 04             	shl    eax,0x4
c001c626:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c62d:	09 c6                	or     esi,eax
c001c62f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001c634:	75 05                	jne    c001c63b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c636:	83 ce a0             	or     esi,0xffffffa0
c001c639:	eb 03                	jmp    c001c63e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c63b:	83 ce e0             	or     esi,0xffffffe0
c001c63e:	89 f0                	mov    eax,esi
c001c640:	0f b6 f0             	movzx  esi,al
c001c643:	56                   	push   esi
c001c644:	6a 06                	push   0x6
c001c646:	51                   	push   ecx
c001c647:	52                   	push   edx
c001c648:	e8 a7 f1 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c64d:	83 c4 10             	add    esp,0x10
c001c650:	6a 00                	push   0x0
c001c652:	6a 01                	push   0x1
c001c654:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c65b:	50                   	push   eax
c001c65c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c662:	e8 8d f1 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c667:	83 c4 10             	add    esp,0x10
c001c66a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c66f:	75 6e                	jne    c001c6df <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c671:	6a 00                	push   0x0
c001c673:	6a 08                	push   0x8
c001c675:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c67c:	50                   	push   eax
c001c67d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c683:	e8 6c f1 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c688:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c68d:	50                   	push   eax
c001c68e:	6a 09                	push   0x9
c001c690:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c697:	50                   	push   eax
c001c698:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c69e:	e8 51 f1 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6a3:	83 c4 20             	add    esp,0x20
c001c6a6:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c6ab:	50                   	push   eax
c001c6ac:	6a 0a                	push   0xa
c001c6ae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c6b5:	50                   	push   eax
c001c6b6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c6bc:	e8 33 f1 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6c1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c6c6:	50                   	push   eax
c001c6c7:	6a 0b                	push   0xb
c001c6c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c6d0:	50                   	push   eax
c001c6d1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c6d7:	e8 18 f1 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6dc:	83 c4 20             	add    esp,0x20
c001c6df:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c6e4:	50                   	push   eax
c001c6e5:	6a 02                	push   0x2
c001c6e7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c6ee:	50                   	push   eax
c001c6ef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c6f5:	e8 fa f0 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6fa:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c6ff:	50                   	push   eax
c001c700:	6a 03                	push   0x3
c001c702:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c709:	50                   	push   eax
c001c70a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c710:	e8 df f0 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c715:	83 c4 20             	add    esp,0x20
c001c718:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c71d:	50                   	push   eax
c001c71e:	6a 04                	push   0x4
c001c720:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c727:	50                   	push   eax
c001c728:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c72e:	e8 c1 f0 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c733:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c738:	50                   	push   eax
c001c739:	6a 05                	push   0x5
c001c73b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c742:	50                   	push   eax
c001c743:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c749:	e8 a6 f0 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c74e:	83 c4 20             	add    esp,0x20
c001c751:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c756:	0f 94 c0             	sete   al
c001c759:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c75e:	74 09                	je     c001c769 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001c760:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001c767:	eb 07                	jmp    c001c770 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001c769:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001c770:	0f b6 c0             	movzx  eax,al
c001c773:	50                   	push   eax
c001c774:	6a 07                	push   0x7
c001c776:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c77d:	50                   	push   eax
c001c77e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c784:	e8 6b f0 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c789:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c78d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001c791:	83 c4 10             	add    esp,0x10
c001c794:	85 f6                	test   esi,esi
c001c796:	0f 84 ac 00 00 00    	je     c001c848 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001c79c:	50                   	push   eax
c001c79d:	6a 01                	push   0x1
c001c79f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c7a6:	50                   	push   eax
c001c7a7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c7ad:	e8 ee fb ff ff       	call   c001c3a0 <IDE::polling(unsigned char, unsigned int)>
c001c7b2:	83 c4 10             	add    esp,0x10
c001c7b5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001c7bb:	84 c0                	test   al,al
c001c7bd:	74 20                	je     c001c7df <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001c7bf:	0f b6 f8             	movzx  edi,al
c001c7c2:	0f b6 d2             	movzx  edx,dl
c001c7c5:	57                   	push   edi
c001c7c6:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001c7cd:	50                   	push   eax
c001c7ce:	52                   	push   edx
c001c7cf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c7d5:	e8 30 fa ff ff       	call   c001c20a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c7da:	e9 85 00 00 00       	jmp    c001c864 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001c7df:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001c7e4:	74 41                	je     c001c827 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001c7e6:	31 c9                	xor    ecx,ecx
c001c7e8:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001c7ec:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c7f0:	50                   	push   eax
c001c7f1:	50                   	push   eax
c001c7f2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c7f9:	50                   	push   eax
c001c7fa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c800:	e8 dd ef ff ff       	call   c001b7e2 <IDE::getBase(unsigned char)>
c001c805:	89 c2                	mov    edx,eax
c001c807:	89 e8                	mov    eax,ebp
c001c809:	66 ef                	out    dx,ax
c001c80b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c80f:	83 c4 10             	add    esp,0x10
c001c812:	41                   	inc    ecx
c001c813:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001c819:	75 cd                	jne    c001c7e8 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001c81b:	4e                   	dec    esi
c001c81c:	81 c7 00 02 00 00    	add    edi,0x200
c001c822:	e9 6d ff ff ff       	jmp    c001c794 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001c827:	0f b6 d2             	movzx  edx,dl
c001c82a:	51                   	push   ecx
c001c82b:	51                   	push   ecx
c001c82c:	52                   	push   edx
c001c82d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c833:	e8 aa ef ff ff       	call   c001b7e2 <IDE::getBase(unsigned char)>
c001c838:	b9 00 01 00 00       	mov    ecx,0x100
c001c83d:	89 c2                	mov    edx,eax
c001c83f:	fc                   	cld    
c001c840:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001c843:	83 c4 10             	add    esp,0x10
c001c846:	eb d3                	jmp    c001c81b <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001c848:	31 ff                	xor    edi,edi
c001c84a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c84f:	74 16                	je     c001c867 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c851:	50                   	push   eax
c001c852:	50                   	push   eax
c001c853:	31 c0                	xor    eax,eax
c001c855:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001c85a:	0f 94 c0             	sete   al
c001c85d:	50                   	push   eax
c001c85e:	53                   	push   ebx
c001c85f:	e8 f6 fb ff ff       	call   c001c45a <ATA::flush(bool)>
c001c864:	83 c4 10             	add    esp,0x10
c001c867:	83 c4 2c             	add    esp,0x2c
c001c86a:	89 f8                	mov    eax,edi
c001c86c:	5b                   	pop    ebx
c001c86d:	5e                   	pop    esi
c001c86e:	5f                   	pop    edi
c001c86f:	5d                   	pop    ebp
c001c870:	c3                   	ret    
c001c871:	90                   	nop

c001c872 <ATA::read(unsigned long long, int, void*)>:
c001c872:	57                   	push   edi
c001c873:	b8 04 00 00 00       	mov    eax,0x4
c001c878:	56                   	push   esi
c001c879:	53                   	push   ebx
c001c87a:	83 ec 10             	sub    esp,0x10
c001c87d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c881:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c885:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001c888:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c88c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c890:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001c896:	77 3b                	ja     c001c8d3 <ATA::read(unsigned long long, int, void*)+0x61>
c001c898:	b8 06 00 00 00       	mov    eax,0x6
c001c89d:	85 d2                	test   edx,edx
c001c89f:	74 32                	je     c001c8d3 <ATA::read(unsigned long long, int, void*)+0x61>
c001c8a1:	50                   	push   eax
c001c8a2:	50                   	push   eax
c001c8a3:	6a 00                	push   0x0
c001c8a5:	52                   	push   edx
c001c8a6:	53                   	push   ebx
c001c8a7:	57                   	push   edi
c001c8a8:	56                   	push   esi
c001c8a9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c8ad:	e8 42 fc ff ff       	call   c001c4f4 <ATA::access(unsigned long long, int, void*, bool)>
c001c8b2:	83 c4 20             	add    esp,0x20
c001c8b5:	85 c0                	test   eax,eax
c001c8b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8bb:	75 11                	jne    c001c8ce <ATA::read(unsigned long long, int, void*)+0x5c>
c001c8bd:	01 1d 24 4f 02 c0    	add    DWORD PTR ds:0xc0024f24,ebx
c001c8c3:	e8 ac 02 ff ff       	call   c000cb74 <VgaText::updateDiskUsage()>
c001c8c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8cc:	eb 05                	jmp    c001c8d3 <ATA::read(unsigned long long, int, void*)+0x61>
c001c8ce:	b8 01 00 00 00       	mov    eax,0x1
c001c8d3:	83 c4 10             	add    esp,0x10
c001c8d6:	5b                   	pop    ebx
c001c8d7:	5e                   	pop    esi
c001c8d8:	5f                   	pop    edi
c001c8d9:	c3                   	ret    

c001c8da <ATA::write(unsigned long long, int, void*)>:
c001c8da:	57                   	push   edi
c001c8db:	b8 04 00 00 00       	mov    eax,0x4
c001c8e0:	56                   	push   esi
c001c8e1:	53                   	push   ebx
c001c8e2:	83 ec 10             	sub    esp,0x10
c001c8e5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c8e9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c8ed:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001c8f0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c8f4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c8f8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001c8fe:	77 3b                	ja     c001c93b <ATA::write(unsigned long long, int, void*)+0x61>
c001c900:	b8 06 00 00 00       	mov    eax,0x6
c001c905:	85 d2                	test   edx,edx
c001c907:	74 32                	je     c001c93b <ATA::write(unsigned long long, int, void*)+0x61>
c001c909:	50                   	push   eax
c001c90a:	50                   	push   eax
c001c90b:	6a 01                	push   0x1
c001c90d:	52                   	push   edx
c001c90e:	53                   	push   ebx
c001c90f:	57                   	push   edi
c001c910:	56                   	push   esi
c001c911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c915:	e8 da fb ff ff       	call   c001c4f4 <ATA::access(unsigned long long, int, void*, bool)>
c001c91a:	83 c4 20             	add    esp,0x20
c001c91d:	85 c0                	test   eax,eax
c001c91f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c923:	75 11                	jne    c001c936 <ATA::write(unsigned long long, int, void*)+0x5c>
c001c925:	01 1d 20 4f 02 c0    	add    DWORD PTR ds:0xc0024f20,ebx
c001c92b:	e8 44 02 ff ff       	call   c000cb74 <VgaText::updateDiskUsage()>
c001c930:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c934:	eb 05                	jmp    c001c93b <ATA::write(unsigned long long, int, void*)+0x61>
c001c936:	b8 01 00 00 00       	mov    eax,0x1
c001c93b:	83 c4 10             	add    esp,0x10
c001c93e:	5b                   	pop    ebx
c001c93f:	5e                   	pop    esi
c001c940:	5f                   	pop    edi
c001c941:	c3                   	ret    

c001c942 <ATA::detectCHS()>:
c001c942:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c946:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001c94c:	c1 e0 06             	shl    eax,0x6
c001c94f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001c955:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001c95f:	c7 44 24 04 37 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022237
c001c967:	e9 0e 81 ff ff       	jmp    c0014a7a <Krnl::panic(char const*)>

c001c96c <ATA::open(int, int, void*)>:
c001c96c:	53                   	push   ebx
c001c96d:	83 ec 08             	sub    esp,0x8
c001c970:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c974:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c978:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c97c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c982:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c988:	c1 e0 06             	shl    eax,0x6
c001c98b:	01 d0                	add    eax,edx
c001c98d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001c994:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001c99a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001c9a1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c9ab:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001c9b1:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001c9b8:	75 0c                	jne    c001c9c6 <ATA::open(int, int, void*)+0x5a>
c001c9ba:	83 ec 0c             	sub    esp,0xc
c001c9bd:	53                   	push   ebx
c001c9be:	e8 7f ff ff ff       	call   c001c942 <ATA::detectCHS()>
c001c9c3:	83 c4 10             	add    esp,0x10
c001c9c6:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c9cc:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c9d2:	c1 e0 06             	shl    eax,0x6
c001c9d5:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001c9dc:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c9e6:	d1 e8                	shr    eax,1
c001c9e8:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001c9ee:	6a 04                	push   0x4
c001c9f0:	6a 0c                	push   0xc
c001c9f2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9f9:	50                   	push   eax
c001c9fa:	52                   	push   edx
c001c9fb:	e8 f4 ed ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca00:	90                   	nop
c001ca01:	90                   	nop
c001ca02:	6a 00                	push   0x0
c001ca04:	6a 0c                	push   0xc
c001ca06:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca0d:	50                   	push   eax
c001ca0e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca14:	e8 db ed ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca19:	83 c4 14             	add    esp,0x14
c001ca1c:	53                   	push   ebx
c001ca1d:	e8 3c 3c ff ff       	call   c001065e <PhysicalDisk::startCache()>
c001ca22:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca25:	e8 42 55 ff ff       	call   c0011f6c <createPartitionsForDisk(PhysicalDisk*)>
c001ca2a:	31 c0                	xor    eax,eax
c001ca2c:	83 c4 18             	add    esp,0x18
c001ca2f:	5b                   	pop    ebx
c001ca30:	c3                   	ret    
c001ca31:	90                   	nop

c001ca32 <ATAPI::write(unsigned long long, int, void*)>:
c001ca32:	b8 03 00 00 00       	mov    eax,0x3
c001ca37:	c3                   	ret    

c001ca38 <ATAPI::close(int, int, void*)>:
c001ca38:	83 ec 0c             	sub    esp,0xc
c001ca3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca3f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ca45:	85 c0                	test   eax,eax
c001ca47:	74 0c                	je     c001ca55 <ATAPI::close(int, int, void*)+0x1d>
c001ca49:	83 ec 0c             	sub    esp,0xc
c001ca4c:	8b 10                	mov    edx,DWORD PTR [eax]
c001ca4e:	50                   	push   eax
c001ca4f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ca52:	83 c4 10             	add    esp,0x10
c001ca55:	31 c0                	xor    eax,eax
c001ca57:	83 c4 0c             	add    esp,0xc
c001ca5a:	c3                   	ret    
c001ca5b:	90                   	nop

c001ca5c <ATAPI::ATAPI()>:
c001ca5c:	83 ec 0c             	sub    esp,0xc
c001ca5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca63:	83 ec 04             	sub    esp,0x4
c001ca66:	68 00 08 00 00       	push   0x800
c001ca6b:	68 80 22 02 c0       	push   0xc0022280
c001ca70:	50                   	push   eax
c001ca71:	e8 80 3b ff ff       	call   c00105f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ca76:	83 c4 10             	add    esp,0x10
c001ca79:	ba c0 22 02 c0       	mov    edx,0xc00222c0
c001ca7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca82:	89 10                	mov    DWORD PTR [eax],edx
c001ca84:	90                   	nop
c001ca85:	83 c4 0c             	add    esp,0xc
c001ca88:	c3                   	ret    
c001ca89:	90                   	nop

c001ca8a <ATAPI::readyForCommand()>:
c001ca8a:	56                   	push   esi
c001ca8b:	53                   	push   ebx
c001ca8c:	31 db                	xor    ebx,ebx
c001ca8e:	50                   	push   eax
c001ca8f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ca93:	50                   	push   eax
c001ca94:	6a 0c                	push   0xc
c001ca96:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ca9d:	50                   	push   eax
c001ca9e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001caa4:	e8 0b ee ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001caa9:	83 c4 10             	add    esp,0x10
c001caac:	a8 88                	test   al,0x88
c001caae:	74 23                	je     c001cad3 <ATAPI::readyForCommand()+0x49>
c001cab0:	43                   	inc    ebx
c001cab1:	83 fb 63             	cmp    ebx,0x63
c001cab4:	7e dd                	jle    c001ca93 <ATAPI::readyForCommand()+0x9>
c001cab6:	51                   	push   ecx
c001cab7:	51                   	push   ecx
c001cab8:	6a 00                	push   0x0
c001caba:	68 40 42 0f 00       	push   0xf4240
c001cabf:	e8 cf b3 ff ff       	call   c0017e93 <nanoSleep(unsigned long long)>
c001cac4:	83 c4 10             	add    esp,0x10
c001cac7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cacd:	75 c4                	jne    c001ca93 <ATAPI::readyForCommand()+0x9>
c001cacf:	31 c0                	xor    eax,eax
c001cad1:	eb 02                	jmp    c001cad5 <ATAPI::readyForCommand()+0x4b>
c001cad3:	b0 01                	mov    al,0x1
c001cad5:	5a                   	pop    edx
c001cad6:	5b                   	pop    ebx
c001cad7:	5e                   	pop    esi
c001cad8:	c3                   	ret    
c001cad9:	90                   	nop

c001cada <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001cada:	55                   	push   ebp
c001cadb:	57                   	push   edi
c001cadc:	56                   	push   esi
c001cadd:	53                   	push   ebx
c001cade:	83 ec 20             	sub    esp,0x20
c001cae1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cae5:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001cae9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001caed:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001caf1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001caf5:	6a 01                	push   0x1
c001caf7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cafe:	50                   	push   eax
c001caff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb05:	e8 f6 ee ff ff       	call   c001ba00 <IDE::enableIRQs(unsigned char, bool)>
c001cb0a:	5e                   	pop    esi
c001cb0b:	58                   	pop    eax
c001cb0c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb13:	50                   	push   eax
c001cb14:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb1a:	e8 af ec ff ff       	call   c001b7ce <IDE::prepareInterrupt(unsigned char)>
c001cb1f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb22:	e8 63 ff ff ff       	call   c001ca8a <ATAPI::readyForCommand()>
c001cb27:	83 c4 10             	add    esp,0x10
c001cb2a:	84 c0                	test   al,al
c001cb2c:	75 0a                	jne    c001cb38 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001cb2e:	bb 01 00 00 00       	mov    ebx,0x1
c001cb33:	e9 57 02 00 00       	jmp    c001cd8f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cb38:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001cb3e:	c1 e0 04             	shl    eax,0x4
c001cb41:	0f b6 c0             	movzx  eax,al
c001cb44:	50                   	push   eax
c001cb45:	6a 06                	push   0x6
c001cb47:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb4e:	50                   	push   eax
c001cb4f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb55:	e8 9a ec ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb5a:	6a 00                	push   0x0
c001cb5c:	6a 01                	push   0x1
c001cb5e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb65:	50                   	push   eax
c001cb66:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb6c:	e8 83 ec ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb71:	83 c4 20             	add    esp,0x20
c001cb74:	0f b6 c3             	movzx  eax,bl
c001cb77:	0f b6 df             	movzx  ebx,bh
c001cb7a:	50                   	push   eax
c001cb7b:	6a 04                	push   0x4
c001cb7d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb84:	50                   	push   eax
c001cb85:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb8b:	e8 64 ec ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb90:	53                   	push   ebx
c001cb91:	6a 05                	push   0x5
c001cb93:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb9a:	50                   	push   eax
c001cb9b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cba1:	e8 4e ec ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cba6:	83 c4 20             	add    esp,0x20
c001cba9:	68 a0 00 00 00       	push   0xa0
c001cbae:	6a 07                	push   0x7
c001cbb0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cbb7:	50                   	push   eax
c001cbb8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cbbe:	e8 31 ec ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbc3:	83 c4 0c             	add    esp,0xc
c001cbc6:	6a 01                	push   0x1
c001cbc8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cbcf:	50                   	push   eax
c001cbd0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cbd6:	e8 c5 f7 ff ff       	call   c001c3a0 <IDE::polling(unsigned char, unsigned int)>
c001cbdb:	83 c4 10             	add    esp,0x10
c001cbde:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001cbe4:	84 c0                	test   al,al
c001cbe6:	74 23                	je     c001cc0b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001cbe8:	0f b6 d8             	movzx  ebx,al
c001cbeb:	0f b6 d2             	movzx  edx,dl
c001cbee:	53                   	push   ebx
c001cbef:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001cbf6:	50                   	push   eax
c001cbf7:	52                   	push   edx
c001cbf8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cbfe:	e8 07 f6 ff ff       	call   c001c20a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cc03:	83 c4 10             	add    esp,0x10
c001cc06:	e9 84 01 00 00       	jmp    c001cd8f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cc0b:	0f b6 d2             	movzx  edx,dl
c001cc0e:	53                   	push   ebx
c001cc0f:	53                   	push   ebx
c001cc10:	52                   	push   edx
c001cc11:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cc17:	e8 c6 eb ff ff       	call   c001b7e2 <IDE::getBase(unsigned char)>
c001cc1c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cc20:	b9 06 00 00 00       	mov    ecx,0x6
c001cc25:	89 c2                	mov    edx,eax
c001cc27:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001cc2a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001cc2e:	83 c4 10             	add    esp,0x10
c001cc31:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cc37:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cc3e:	85 db                	test   ebx,ebx
c001cc40:	0f 84 ec 00 00 00    	je     c001cd32 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001cc46:	51                   	push   ecx
c001cc47:	51                   	push   ecx
c001cc48:	52                   	push   edx
c001cc49:	50                   	push   eax
c001cc4a:	e8 13 ed ff ff       	call   c001b962 <IDE::waitInterrupt(unsigned char)>
c001cc4f:	83 c4 10             	add    esp,0x10
c001cc52:	84 c0                	test   al,al
c001cc54:	0f 84 d4 fe ff ff    	je     c001cb2e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001cc5a:	56                   	push   esi
c001cc5b:	56                   	push   esi
c001cc5c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cc63:	50                   	push   eax
c001cc64:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cc6a:	e8 5f eb ff ff       	call   c001b7ce <IDE::prepareInterrupt(unsigned char)>
c001cc6f:	83 c4 0c             	add    esp,0xc
c001cc72:	6a 04                	push   0x4
c001cc74:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cc7b:	50                   	push   eax
c001cc7c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cc82:	e8 2d ec ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001cc87:	83 c4 0c             	add    esp,0xc
c001cc8a:	89 c6                	mov    esi,eax
c001cc8c:	6a 05                	push   0x5
c001cc8e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cc95:	50                   	push   eax
c001cc96:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cc9c:	e8 13 ec ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001cca1:	89 f1                	mov    ecx,esi
c001cca3:	0f b6 c0             	movzx  eax,al
c001cca6:	0f b6 f1             	movzx  esi,cl
c001cca9:	c1 e0 08             	shl    eax,0x8
c001ccac:	09 c6                	or     esi,eax
c001ccae:	d1 fe                	sar    esi,1
c001ccb0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ccb4:	83 c4 10             	add    esp,0x10
c001ccb7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ccbc:	74 41                	je     c001ccff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ccbe:	31 c9                	xor    ecx,ecx
c001ccc0:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ccc6:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cccd:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ccd1:	75 0a                	jne    c001ccdd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001ccd3:	01 c9                	add    ecx,ecx
c001ccd5:	01 cd                	add    ebp,ecx
c001ccd7:	4b                   	dec    ebx
c001ccd8:	e9 54 ff ff ff       	jmp    c001cc31 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001ccdd:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001cce2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cce6:	51                   	push   ecx
c001cce7:	51                   	push   ecx
c001cce8:	52                   	push   edx
c001cce9:	50                   	push   eax
c001ccea:	e8 f3 ea ff ff       	call   c001b7e2 <IDE::getBase(unsigned char)>
c001ccef:	89 c2                	mov    edx,eax
c001ccf1:	89 f0                	mov    eax,esi
c001ccf3:	66 ef                	out    dx,ax
c001ccf5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ccf9:	83 c4 10             	add    esp,0x10
c001ccfc:	41                   	inc    ecx
c001ccfd:	eb c1                	jmp    c001ccc0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001ccff:	31 f6                	xor    esi,esi
c001cd01:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cd07:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cd0e:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001cd12:	75 06                	jne    c001cd1a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001cd14:	01 f6                	add    esi,esi
c001cd16:	01 f5                	add    ebp,esi
c001cd18:	eb bd                	jmp    c001ccd7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001cd1a:	51                   	push   ecx
c001cd1b:	51                   	push   ecx
c001cd1c:	52                   	push   edx
c001cd1d:	50                   	push   eax
c001cd1e:	e8 bf ea ff ff       	call   c001b7e2 <IDE::getBase(unsigned char)>
c001cd23:	89 c2                	mov    edx,eax
c001cd25:	66 ed                	in     ax,dx
c001cd27:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001cd2c:	83 c4 10             	add    esp,0x10
c001cd2f:	46                   	inc    esi
c001cd30:	eb cf                	jmp    c001cd01 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001cd32:	51                   	push   ecx
c001cd33:	51                   	push   ecx
c001cd34:	52                   	push   edx
c001cd35:	50                   	push   eax
c001cd36:	e8 27 ec ff ff       	call   c001b962 <IDE::waitInterrupt(unsigned char)>
c001cd3b:	83 c4 10             	add    esp,0x10
c001cd3e:	84 c0                	test   al,al
c001cd40:	0f 84 e8 fd ff ff    	je     c001cb2e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001cd46:	bb a0 86 01 00       	mov    ebx,0x186a0
c001cd4b:	52                   	push   edx
c001cd4c:	52                   	push   edx
c001cd4d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cd54:	50                   	push   eax
c001cd55:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cd5b:	e8 6e ea ff ff       	call   c001b7ce <IDE::prepareInterrupt(unsigned char)>
c001cd60:	83 c4 10             	add    esp,0x10
c001cd63:	50                   	push   eax
c001cd64:	50                   	push   eax
c001cd65:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cd6c:	50                   	push   eax
c001cd6d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cd73:	e8 6a ea ff ff       	call   c001b7e2 <IDE::getBase(unsigned char)>
c001cd78:	8d 50 07             	lea    edx,[eax+0x7]
c001cd7b:	ec                   	in     al,dx
c001cd7c:	83 c4 10             	add    esp,0x10
c001cd7f:	a8 88                	test   al,0x88
c001cd81:	74 0a                	je     c001cd8d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001cd83:	4b                   	dec    ebx
c001cd84:	75 dd                	jne    c001cd63 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001cd86:	bb 02 00 00 00       	mov    ebx,0x2
c001cd8b:	eb 02                	jmp    c001cd8f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cd8d:	31 db                	xor    ebx,ebx
c001cd8f:	83 c4 1c             	add    esp,0x1c
c001cd92:	89 d8                	mov    eax,ebx
c001cd94:	5b                   	pop    ebx
c001cd95:	5e                   	pop    esi
c001cd96:	5f                   	pop    edi
c001cd97:	5d                   	pop    ebp
c001cd98:	c3                   	ret    
c001cd99:	90                   	nop

c001cd9a <ATAPI::diskRemoved()>:
c001cd9a:	83 ec 18             	sub    esp,0x18
c001cd9d:	68 8b 22 02 c0       	push   0xc002228b
c001cda2:	e8 3e 20 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001cda7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdab:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001cdb2:	83 c4 1c             	add    esp,0x1c
c001cdb5:	c3                   	ret    

c001cdb6 <ATAPI::eject()>:
c001cdb6:	57                   	push   edi
c001cdb7:	b9 03 00 00 00       	mov    ecx,0x3
c001cdbc:	53                   	push   ebx
c001cdbd:	83 ec 14             	sub    esp,0x14
c001cdc0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cdc4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cdc8:	fc                   	cld    
c001cdc9:	31 c0                	xor    eax,eax
c001cdcb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cdcd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001cdd2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001cdd7:	50                   	push   eax
c001cdd8:	50                   	push   eax
c001cdd9:	6a 00                	push   0x0
c001cddb:	6a 00                	push   0x0
c001cddd:	6a 00                	push   0x0
c001cddf:	6a 02                	push   0x2
c001cde1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cde5:	50                   	push   eax
c001cde6:	53                   	push   ebx
c001cde7:	e8 ee fc ff ff       	call   c001cada <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cdec:	83 c4 14             	add    esp,0x14
c001cdef:	53                   	push   ebx
c001cdf0:	e8 a5 ff ff ff       	call   c001cd9a <ATAPI::diskRemoved()>
c001cdf5:	83 c4 24             	add    esp,0x24
c001cdf8:	5b                   	pop    ebx
c001cdf9:	5f                   	pop    edi
c001cdfa:	c3                   	ret    
c001cdfb:	90                   	nop

c001cdfc <ATAPI::diskInserted()>:
c001cdfc:	53                   	push   ebx
c001cdfd:	83 ec 14             	sub    esp,0x14
c001ce00:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ce04:	68 a1 22 02 c0       	push   0xc00222a1
c001ce09:	e8 d7 1f ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001ce0e:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001ce15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce18:	e8 41 38 ff ff       	call   c001065e <PhysicalDisk::startCache()>
c001ce1d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001ce21:	83 c4 18             	add    esp,0x18
c001ce24:	5b                   	pop    ebx
c001ce25:	e9 42 51 ff ff       	jmp    c0011f6c <createPartitionsForDisk(PhysicalDisk*)>

c001ce2a <ATAPI::detectMedia()>:
c001ce2a:	56                   	push   esi
c001ce2b:	53                   	push   ebx
c001ce2c:	83 ec 28             	sub    esp,0x28
c001ce2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ce33:	6a 0c                	push   0xc
c001ce35:	6a 00                	push   0x0
c001ce37:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001ce3b:	56                   	push   esi
c001ce3c:	e8 c7 37 fe ff       	call   c0000608 <memset>
c001ce41:	58                   	pop    eax
c001ce42:	5a                   	pop    edx
c001ce43:	6a 00                	push   0x0
c001ce45:	6a 00                	push   0x0
c001ce47:	6a 00                	push   0x0
c001ce49:	6a 00                	push   0x0
c001ce4b:	56                   	push   esi
c001ce4c:	53                   	push   ebx
c001ce4d:	e8 88 fc ff ff       	call   c001cada <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ce52:	83 c4 1c             	add    esp,0x1c
c001ce55:	6a 0c                	push   0xc
c001ce57:	6a 00                	push   0x0
c001ce59:	56                   	push   esi
c001ce5a:	e8 a9 37 fe ff       	call   c0000608 <memset>
c001ce5f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001ce64:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001ce69:	59                   	pop    ecx
c001ce6a:	58                   	pop    eax
c001ce6b:	6a 01                	push   0x1
c001ce6d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001ce71:	50                   	push   eax
c001ce72:	6a 00                	push   0x0
c001ce74:	6a 12                	push   0x12
c001ce76:	56                   	push   esi
c001ce77:	53                   	push   ebx
c001ce78:	e8 5d fc ff ff       	call   c001cada <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ce7d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001ce81:	83 c4 20             	add    esp,0x20
c001ce84:	83 e0 7f             	and    eax,0x7f
c001ce87:	3c 70                	cmp    al,0x70
c001ce89:	74 15                	je     c001cea0 <ATAPI::detectMedia()+0x76>
c001ce8b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ce92:	75 0c                	jne    c001cea0 <ATAPI::detectMedia()+0x76>
c001ce94:	83 ec 0c             	sub    esp,0xc
c001ce97:	53                   	push   ebx
c001ce98:	e8 5f ff ff ff       	call   c001cdfc <ATAPI::diskInserted()>
c001ce9d:	83 c4 10             	add    esp,0x10
c001cea0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001cea4:	83 e0 0f             	and    eax,0xf
c001cea7:	3c 02                	cmp    al,0x2
c001cea9:	75 1b                	jne    c001cec6 <ATAPI::detectMedia()+0x9c>
c001ceab:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001ceb0:	75 2d                	jne    c001cedf <ATAPI::detectMedia()+0xb5>
c001ceb2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ceb9:	74 24                	je     c001cedf <ATAPI::detectMedia()+0xb5>
c001cebb:	83 ec 0c             	sub    esp,0xc
c001cebe:	53                   	push   ebx
c001cebf:	e8 d6 fe ff ff       	call   c001cd9a <ATAPI::diskRemoved()>
c001cec4:	eb 16                	jmp    c001cedc <ATAPI::detectMedia()+0xb2>
c001cec6:	84 c0                	test   al,al
c001cec8:	75 15                	jne    c001cedf <ATAPI::detectMedia()+0xb5>
c001ceca:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ced1:	75 0c                	jne    c001cedf <ATAPI::detectMedia()+0xb5>
c001ced3:	83 ec 0c             	sub    esp,0xc
c001ced6:	53                   	push   ebx
c001ced7:	e8 20 ff ff ff       	call   c001cdfc <ATAPI::diskInserted()>
c001cedc:	83 c4 10             	add    esp,0x10
c001cedf:	83 c4 24             	add    esp,0x24
c001cee2:	5b                   	pop    ebx
c001cee3:	5e                   	pop    esi
c001cee4:	c3                   	ret    
c001cee5:	90                   	nop

c001cee6 <ATAPI::open(int, int, void*)>:
c001cee6:	53                   	push   ebx
c001cee7:	83 ec 08             	sub    esp,0x8
c001ceea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ceee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cef2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cef6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cefc:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cf02:	c1 e0 06             	shl    eax,0x6
c001cf05:	01 d0                	add    eax,edx
c001cf07:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001cf0e:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001cf14:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001cf1b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001cf25:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001cf2b:	6a 04                	push   0x4
c001cf2d:	6a 0c                	push   0xc
c001cf2f:	51                   	push   ecx
c001cf30:	52                   	push   edx
c001cf31:	e8 be e8 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf36:	90                   	nop
c001cf37:	90                   	nop
c001cf38:	6a 00                	push   0x0
c001cf3a:	6a 0c                	push   0xc
c001cf3c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf43:	50                   	push   eax
c001cf44:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf4a:	e8 a5 e8 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf4f:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001cf56:	83 c4 14             	add    esp,0x14
c001cf59:	53                   	push   ebx
c001cf5a:	e8 cb fe ff ff       	call   c001ce2a <ATAPI::detectMedia()>
c001cf5f:	31 c0                	xor    eax,eax
c001cf61:	83 c4 18             	add    esp,0x18
c001cf64:	5b                   	pop    ebx
c001cf65:	c3                   	ret    

c001cf66 <ATAPI::read(unsigned long long, int, void*)>:
c001cf66:	55                   	push   ebp
c001cf67:	57                   	push   edi
c001cf68:	56                   	push   esi
c001cf69:	53                   	push   ebx
c001cf6a:	83 ec 1c             	sub    esp,0x1c
c001cf6d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cf71:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cf75:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001cf79:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001cf80:	74 41                	je     c001cfc3 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001cf82:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cf86:	b9 03 00 00 00       	mov    ecx,0x3
c001cf8b:	fc                   	cld    
c001cf8c:	31 c0                	xor    eax,eax
c001cf8e:	86 fb                	xchg   bl,bh
c001cf90:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cf92:	c1 c3 10             	rol    ebx,0x10
c001cf95:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001cf9a:	89 e8                	mov    eax,ebp
c001cf9c:	86 fb                	xchg   bl,bh
c001cf9e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001cfa2:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001cfa6:	50                   	push   eax
c001cfa7:	50                   	push   eax
c001cfa8:	55                   	push   ebp
c001cfa9:	c1 e5 0b             	shl    ebp,0xb
c001cfac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cfb0:	6a 00                	push   0x0
c001cfb2:	55                   	push   ebp
c001cfb3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cfb7:	50                   	push   eax
c001cfb8:	56                   	push   esi
c001cfb9:	e8 1c fb ff ff       	call   c001cada <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cfbe:	83 c4 20             	add    esp,0x20
c001cfc1:	eb 1a                	jmp    c001cfdd <ATAPI::read(unsigned long long, int, void*)+0x77>
c001cfc3:	83 ec 0c             	sub    esp,0xc
c001cfc6:	56                   	push   esi
c001cfc7:	e8 5e fe ff ff       	call   c001ce2a <ATAPI::detectMedia()>
c001cfcc:	83 c4 10             	add    esp,0x10
c001cfcf:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001cfd6:	75 aa                	jne    c001cf82 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001cfd8:	b8 02 00 00 00       	mov    eax,0x2
c001cfdd:	83 c4 1c             	add    esp,0x1c
c001cfe0:	5b                   	pop    ebx
c001cfe1:	5e                   	pop    esi
c001cfe2:	5f                   	pop    edi
c001cfe3:	5d                   	pop    ebp
c001cfe4:	c3                   	ret    
c001cfe5:	90                   	nop

c001cfe6 <AVX::open(int, int, void*)>:
c001cfe6:	83 ec 0c             	sub    esp,0xc
c001cfe9:	e8 0a 10 00 00       	call   c001dff8 <avxInit>
c001cfee:	b8 00 00 00 00       	mov    eax,0x0
c001cff3:	83 c4 0c             	add    esp,0xc
c001cff6:	c3                   	ret    
c001cff7:	90                   	nop

c001cff8 <AVX::close(int, int, void*)>:
c001cff8:	83 ec 0c             	sub    esp,0xc
c001cffb:	e8 f9 0f 00 00       	call   c001dff9 <avxClose>
c001d000:	b8 00 00 00 00       	mov    eax,0x0
c001d005:	83 c4 0c             	add    esp,0xc
c001d008:	c3                   	ret    
c001d009:	90                   	nop

c001d00a <AVX::available()>:
c001d00a:	83 ec 0c             	sub    esp,0xc
c001d00d:	e8 de 0f 00 00       	call   c001dff0 <avxDetect>
c001d012:	85 c0                	test   eax,eax
c001d014:	0f 95 c0             	setne  al
c001d017:	83 c4 0c             	add    esp,0xc
c001d01a:	c3                   	ret    
c001d01b:	90                   	nop

c001d01c <AVX::save(void*)>:
c001d01c:	83 ec 0c             	sub    esp,0xc
c001d01f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d023:	83 ec 0c             	sub    esp,0xc
c001d026:	50                   	push   eax
c001d027:	e8 ca 0f 00 00       	call   c001dff6 <avxSave>
c001d02c:	83 c4 10             	add    esp,0x10
c001d02f:	90                   	nop
c001d030:	83 c4 0c             	add    esp,0xc
c001d033:	c3                   	ret    

c001d034 <AVX::load(void*)>:
c001d034:	83 ec 0c             	sub    esp,0xc
c001d037:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d03b:	83 ec 0c             	sub    esp,0xc
c001d03e:	50                   	push   eax
c001d03f:	e8 b3 0f 00 00       	call   c001dff7 <avxLoad>
c001d044:	83 c4 10             	add    esp,0x10
c001d047:	90                   	nop
c001d048:	83 c4 0c             	add    esp,0xc
c001d04b:	c3                   	ret    

c001d04c <AVX::AVX()>:
c001d04c:	83 ec 0c             	sub    esp,0xc
c001d04f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d053:	83 ec 08             	sub    esp,0x8
c001d056:	68 ec 22 02 c0       	push   0xc00222ec
c001d05b:	50                   	push   eax
c001d05c:	e8 73 36 ff ff       	call   c00106d4 <FPU::FPU(char const*)>
c001d061:	83 c4 10             	add    esp,0x10
c001d064:	ba fc 22 02 c0       	mov    edx,0xc00222fc
c001d069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d06d:	89 10                	mov    DWORD PTR [eax],edx
c001d06f:	90                   	nop
c001d070:	83 c4 0c             	add    esp,0xc
c001d073:	c3                   	ret    

c001d074 <MMX::available()>:
c001d074:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c001d079:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d07f:	83 e0 20             	and    eax,0x20
c001d082:	84 c0                	test   al,al
c001d084:	0f 95 c0             	setne  al
c001d087:	c3                   	ret    

c001d088 <MMX::open(int, int, void*)>:
c001d088:	83 ec 0c             	sub    esp,0xc
c001d08b:	e8 dc 0f 00 00       	call   c001e06c <x87Init>
c001d090:	b8 00 00 00 00       	mov    eax,0x0
c001d095:	83 c4 0c             	add    esp,0xc
c001d098:	c3                   	ret    
c001d099:	90                   	nop

c001d09a <MMX::close(int, int, void*)>:
c001d09a:	83 ec 0c             	sub    esp,0xc
c001d09d:	e8 e4 0f 00 00       	call   c001e086 <x87Close>
c001d0a2:	b8 00 00 00 00       	mov    eax,0x0
c001d0a7:	83 c4 0c             	add    esp,0xc
c001d0aa:	c3                   	ret    
c001d0ab:	90                   	nop

c001d0ac <MMX::save(void*)>:
c001d0ac:	83 ec 0c             	sub    esp,0xc
c001d0af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d0b3:	83 ec 0c             	sub    esp,0xc
c001d0b6:	50                   	push   eax
c001d0b7:	e8 a5 0f 00 00       	call   c001e061 <x87Save>
c001d0bc:	83 c4 10             	add    esp,0x10
c001d0bf:	90                   	nop
c001d0c0:	83 c4 0c             	add    esp,0xc
c001d0c3:	c3                   	ret    

c001d0c4 <MMX::load(void*)>:
c001d0c4:	83 ec 0c             	sub    esp,0xc
c001d0c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d0cb:	83 ec 0c             	sub    esp,0xc
c001d0ce:	50                   	push   eax
c001d0cf:	e8 93 0f 00 00       	call   c001e067 <x87Load>
c001d0d4:	83 c4 10             	add    esp,0x10
c001d0d7:	90                   	nop
c001d0d8:	83 c4 0c             	add    esp,0xc
c001d0db:	c3                   	ret    

c001d0dc <MMX::MMX()>:
c001d0dc:	83 ec 0c             	sub    esp,0xc
c001d0df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0e3:	83 ec 08             	sub    esp,0x8
c001d0e6:	68 2c 23 02 c0       	push   0xc002232c
c001d0eb:	50                   	push   eax
c001d0ec:	e8 e3 35 ff ff       	call   c00106d4 <FPU::FPU(char const*)>
c001d0f1:	83 c4 10             	add    esp,0x10
c001d0f4:	ba 3c 23 02 c0       	mov    edx,0xc002233c
c001d0f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0fd:	89 10                	mov    DWORD PTR [eax],edx
c001d0ff:	90                   	nop
c001d100:	83 c4 0c             	add    esp,0xc
c001d103:	c3                   	ret    

c001d104 <SSE::open(int, int, void*)>:
c001d104:	83 ec 0c             	sub    esp,0xc
c001d107:	e8 1b 0f 00 00       	call   c001e027 <sseInit>
c001d10c:	b8 00 00 00 00       	mov    eax,0x0
c001d111:	83 c4 0c             	add    esp,0xc
c001d114:	c3                   	ret    
c001d115:	90                   	nop

c001d116 <SSE::close(int, int, void*)>:
c001d116:	83 ec 0c             	sub    esp,0xc
c001d119:	e8 19 0f 00 00       	call   c001e037 <sseClose>
c001d11e:	b8 00 00 00 00       	mov    eax,0x0
c001d123:	83 c4 0c             	add    esp,0xc
c001d126:	c3                   	ret    
c001d127:	90                   	nop

c001d128 <SSE::available()>:
c001d128:	83 ec 1c             	sub    esp,0x1c
c001d12b:	e8 d0 0e 00 00       	call   c001e000 <sseDetect>
c001d130:	85 c0                	test   eax,eax
c001d132:	0f 95 c0             	setne  al
c001d135:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d139:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d13d:	83 c4 1c             	add    esp,0x1c
c001d140:	c3                   	ret    
c001d141:	90                   	nop

c001d142 <SSE::save(void*)>:
c001d142:	83 ec 0c             	sub    esp,0xc
c001d145:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d149:	83 ec 0c             	sub    esp,0xc
c001d14c:	50                   	push   eax
c001d14d:	e8 c9 0e 00 00       	call   c001e01b <sseSave>
c001d152:	83 c4 10             	add    esp,0x10
c001d155:	90                   	nop
c001d156:	83 c4 0c             	add    esp,0xc
c001d159:	c3                   	ret    

c001d15a <SSE::load(void*)>:
c001d15a:	83 ec 0c             	sub    esp,0xc
c001d15d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d161:	83 ec 0c             	sub    esp,0xc
c001d164:	50                   	push   eax
c001d165:	e8 b7 0e 00 00       	call   c001e021 <sseLoad>
c001d16a:	83 c4 10             	add    esp,0x10
c001d16d:	90                   	nop
c001d16e:	83 c4 0c             	add    esp,0xc
c001d171:	c3                   	ret    

c001d172 <SSE::SSE()>:
c001d172:	83 ec 0c             	sub    esp,0xc
c001d175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d179:	83 ec 08             	sub    esp,0x8
c001d17c:	68 6c 23 02 c0       	push   0xc002236c
c001d181:	50                   	push   eax
c001d182:	e8 4d 35 ff ff       	call   c00106d4 <FPU::FPU(char const*)>
c001d187:	83 c4 10             	add    esp,0x10
c001d18a:	ba 7c 23 02 c0       	mov    edx,0xc002237c
c001d18f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d193:	89 10                	mov    DWORD PTR [eax],edx
c001d195:	90                   	nop
c001d196:	83 c4 0c             	add    esp,0xc
c001d199:	c3                   	ret    

c001d19a <x87::open(int, int, void*)>:
c001d19a:	83 ec 0c             	sub    esp,0xc
c001d19d:	e8 ca 0e 00 00       	call   c001e06c <x87Init>
c001d1a2:	b8 00 00 00 00       	mov    eax,0x0
c001d1a7:	83 c4 0c             	add    esp,0xc
c001d1aa:	c3                   	ret    
c001d1ab:	90                   	nop

c001d1ac <x87::close(int, int, void*)>:
c001d1ac:	83 ec 0c             	sub    esp,0xc
c001d1af:	e8 d2 0e 00 00       	call   c001e086 <x87Close>
c001d1b4:	b8 00 00 00 00       	mov    eax,0x0
c001d1b9:	83 c4 0c             	add    esp,0xc
c001d1bc:	c3                   	ret    
c001d1bd:	90                   	nop

c001d1be <x87::available()>:
c001d1be:	83 ec 0c             	sub    esp,0xc
c001d1c1:	e8 80 0e 00 00       	call   c001e046 <x87Detect>
c001d1c6:	85 c0                	test   eax,eax
c001d1c8:	0f 95 c0             	setne  al
c001d1cb:	83 c4 0c             	add    esp,0xc
c001d1ce:	c3                   	ret    
c001d1cf:	90                   	nop

c001d1d0 <x87::save(void*)>:
c001d1d0:	83 ec 0c             	sub    esp,0xc
c001d1d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d1d7:	83 ec 0c             	sub    esp,0xc
c001d1da:	50                   	push   eax
c001d1db:	e8 81 0e 00 00       	call   c001e061 <x87Save>
c001d1e0:	83 c4 10             	add    esp,0x10
c001d1e3:	90                   	nop
c001d1e4:	83 c4 0c             	add    esp,0xc
c001d1e7:	c3                   	ret    

c001d1e8 <x87::load(void*)>:
c001d1e8:	83 ec 0c             	sub    esp,0xc
c001d1eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d1ef:	83 ec 0c             	sub    esp,0xc
c001d1f2:	50                   	push   eax
c001d1f3:	e8 6f 0e 00 00       	call   c001e067 <x87Load>
c001d1f8:	83 c4 10             	add    esp,0x10
c001d1fb:	90                   	nop
c001d1fc:	83 c4 0c             	add    esp,0xc
c001d1ff:	c3                   	ret    

c001d200 <x87::x87()>:
c001d200:	83 ec 0c             	sub    esp,0xc
c001d203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d207:	83 ec 08             	sub    esp,0x8
c001d20a:	68 ac 23 02 c0       	push   0xc00223ac
c001d20f:	50                   	push   eax
c001d210:	e8 bf 34 ff ff       	call   c00106d4 <FPU::FPU(char const*)>
c001d215:	83 c4 10             	add    esp,0x10
c001d218:	ba bc 23 02 c0       	mov    edx,0xc00223bc
c001d21d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d221:	89 10                	mov    DWORD PTR [eax],edx
c001d223:	90                   	nop
c001d224:	83 c4 0c             	add    esp,0xc
c001d227:	c3                   	ret    

c001d228 <APIC::disable()>:
c001d228:	90                   	nop
c001d229:	c3                   	ret    

c001d22a <APIC::close(int, int, void*)>:
c001d22a:	55                   	push   ebp
c001d22b:	89 e5                	mov    ebp,esp
c001d22d:	83 ec 08             	sub    esp,0x8
c001d230:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d233:	8b 00                	mov    eax,DWORD PTR [eax]
c001d235:	83 c0 3c             	add    eax,0x3c
c001d238:	8b 00                	mov    eax,DWORD PTR [eax]
c001d23a:	83 ec 0c             	sub    esp,0xc
c001d23d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d240:	ff d0                	call   eax
c001d242:	83 c4 10             	add    esp,0x10
c001d245:	b8 00 00 00 00       	mov    eax,0x0
c001d24a:	c9                   	leave  
c001d24b:	c3                   	ret    

c001d24c <IOAPIC::close(int, int, void*)>:
c001d24c:	b8 00 00 00 00       	mov    eax,0x0
c001d251:	c3                   	ret    

c001d252 <APIC::io_wait()>:
c001d252:	eb 00                	jmp    c001d254 <APIC::io_wait()+0x2>
c001d254:	eb 00                	jmp    c001d256 <APIC::io_wait()+0x4>
c001d256:	90                   	nop
c001d257:	c3                   	ret    

c001d258 <APIC::getBase()>:
c001d258:	55                   	push   ebp
c001d259:	89 e5                	mov    ebp,esp
c001d25b:	83 ec 18             	sub    esp,0x18
c001d25e:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c001d263:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d269:	83 e0 08             	and    eax,0x8
c001d26c:	84 c0                	test   al,al
c001d26e:	75 07                	jne    c001d277 <APIC::getBase()+0x1f>
c001d270:	b8 00 00 00 00       	mov    eax,0x0
c001d275:	eb 21                	jmp    c001d298 <APIC::getBase()+0x40>
c001d277:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c001d27c:	83 ec 08             	sub    esp,0x8
c001d27f:	6a 1b                	push   0x1b
c001d281:	50                   	push   eax
c001d282:	e8 3f df fe ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c001d287:	83 c4 10             	add    esp,0x10
c001d28a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d28d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d290:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d293:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d298:	c9                   	leave  
c001d299:	c3                   	ret    

c001d29a <APIC::eoi(unsigned char)>:
c001d29a:	55                   	push   ebp
c001d29b:	89 e5                	mov    ebp,esp
c001d29d:	83 ec 28             	sub    esp,0x28
c001d2a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d2a3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d2a6:	83 ec 0c             	sub    esp,0xc
c001d2a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d2ac:	e8 a7 ff ff ff       	call   c001d258 <APIC::getBase()>
c001d2b1:	83 c4 10             	add    esp,0x10
c001d2b4:	05 b0 00 00 00       	add    eax,0xb0
c001d2b9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d2bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d2bf:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001d2c5:	90                   	nop
c001d2c6:	c9                   	leave  
c001d2c7:	c3                   	ret    

c001d2c8 <APIC::open(int, int, void*)>:
c001d2c8:	55                   	push   ebp
c001d2c9:	89 e5                	mov    ebp,esp
c001d2cb:	57                   	push   edi
c001d2cc:	56                   	push   esi
c001d2cd:	53                   	push   ebx
c001d2ce:	83 ec 1c             	sub    esp,0x1c
c001d2d1:	83 ec 0c             	sub    esp,0xc
c001d2d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d2d7:	e8 7c ff ff ff       	call   c001d258 <APIC::getBase()>
c001d2dc:	83 c4 10             	add    esp,0x10
c001d2df:	05 f0 00 00 00       	add    eax,0xf0
c001d2e4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d2e7:	83 ec 0c             	sub    esp,0xc
c001d2ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d2ed:	e8 66 ff ff ff       	call   c001d258 <APIC::getBase()>
c001d2f2:	83 c4 10             	add    esp,0x10
c001d2f5:	89 c2                	mov    edx,eax
c001d2f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d2fa:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d300:	0f b6 f8             	movzx  edi,al
c001d303:	89 d0                	mov    eax,edx
c001d305:	ba 00 00 00 00       	mov    edx,0x0
c001d30a:	89 c1                	mov    ecx,eax
c001d30c:	80 e5 ff             	and    ch,0xff
c001d30f:	89 cb                	mov    ebx,ecx
c001d311:	0f b6 f2             	movzx  esi,dl
c001d314:	89 d8                	mov    eax,ebx
c001d316:	89 f2                	mov    edx,esi
c001d318:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d31b:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d31e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d322:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d326:	83 e0 00             	and    eax,0x0
c001d329:	09 d0                	or     eax,edx
c001d32b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d32f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d332:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d338:	8d 50 01             	lea    edx,[eax+0x1]
c001d33b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d33e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d344:	0f b6 d0             	movzx  edx,al
c001d347:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d34a:	83 c2 08             	add    edx,0x8
c001d34d:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d351:	0f b6 c9             	movzx  ecx,cl
c001d354:	81 c9 00 00 01 00    	or     ecx,0x10000
c001d35a:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d35e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d361:	8b 00                	mov    eax,DWORD PTR [eax]
c001d363:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d366:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001d36d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d370:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d373:	89 10                	mov    DWORD PTR [eax],edx
c001d375:	b8 00 00 00 00       	mov    eax,0x0
c001d37a:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d37d:	5b                   	pop    ebx
c001d37e:	5e                   	pop    esi
c001d37f:	5f                   	pop    edi
c001d380:	5d                   	pop    ebp
c001d381:	c3                   	ret    

c001d382 <IOAPIC::IOAPIC()>:
c001d382:	83 ec 0c             	sub    esp,0xc
c001d385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d389:	83 ec 08             	sub    esp,0x8
c001d38c:	68 ec 23 02 c0       	push   0xc00223ec
c001d391:	50                   	push   eax
c001d392:	e8 49 30 ff ff       	call   c00103e0 <Device::Device(char const*)>
c001d397:	83 c4 10             	add    esp,0x10
c001d39a:	ba 14 25 02 c0       	mov    edx,0xc0022514
c001d39f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3a3:	89 10                	mov    DWORD PTR [eax],edx
c001d3a5:	90                   	nop
c001d3a6:	83 c4 0c             	add    esp,0xc
c001d3a9:	c3                   	ret    

c001d3aa <APIC::APIC()>:
c001d3aa:	53                   	push   ebx
c001d3ab:	83 ec 18             	sub    esp,0x18
c001d3ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3b2:	83 ec 08             	sub    esp,0x8
c001d3b5:	68 f4 23 02 c0       	push   0xc00223f4
c001d3ba:	50                   	push   eax
c001d3bb:	e8 62 37 ff ff       	call   c0010b22 <InterruptController::InterruptController(char const*)>
c001d3c0:	83 c4 10             	add    esp,0x10
c001d3c3:	ba cc 24 02 c0       	mov    edx,0xc00224cc
c001d3c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3cc:	89 10                	mov    DWORD PTR [eax],edx
c001d3ce:	a0 80 4f 02 c0       	mov    al,ds:0xc0024f80
c001d3d3:	83 f0 01             	xor    eax,0x1
c001d3d6:	84 c0                	test   al,al
c001d3d8:	0f 84 96 00 00 00    	je     c001d474 <APIC::APIC()+0xca>
c001d3de:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001d3e3:	a0 30 3a 02 c0       	mov    al,ds:0xc0023a30
c001d3e8:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001d3ec:	73 7f                	jae    c001d46d <APIC::APIC()+0xc3>
c001d3ee:	83 ec 0c             	sub    esp,0xc
c001d3f1:	68 68 01 00 00       	push   0x168
c001d3f6:	e8 fb 18 ff ff       	call   c000ecf6 <operator new(unsigned long)>
c001d3fb:	83 c4 10             	add    esp,0x10
c001d3fe:	89 c3                	mov    ebx,eax
c001d400:	83 ec 0c             	sub    esp,0xc
c001d403:	53                   	push   ebx
c001d404:	e8 79 ff ff ff       	call   c001d382 <IOAPIC::IOAPIC()>
c001d409:	83 c4 10             	add    esp,0x10
c001d40c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d410:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d415:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d419:	89 14 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],edx
c001d420:	a1 40 4f 02 c0       	mov    eax,ds:0xc0024f40
c001d425:	40                   	inc    eax
c001d426:	a3 40 4f 02 c0       	mov    ds:0xc0024f40,eax
c001d42b:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c001d430:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d436:	83 ec 08             	sub    esp,0x8
c001d439:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d43d:	50                   	push   eax
c001d43e:	e8 ad 2d ff ff       	call   c00101f0 <Device::addChild(Device*)>
c001d443:	83 c4 10             	add    esp,0x10
c001d446:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d44a:	8b 00                	mov    eax,DWORD PTR [eax]
c001d44c:	83 c0 08             	add    eax,0x8
c001d44f:	8b 00                	mov    eax,DWORD PTR [eax]
c001d451:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001d456:	6a 00                	push   0x0
c001d458:	6a 00                	push   0x0
c001d45a:	52                   	push   edx
c001d45b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d45f:	ff d0                	call   eax
c001d461:	83 c4 10             	add    esp,0x10
c001d464:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001d468:	e9 76 ff ff ff       	jmp    c001d3e3 <APIC::APIC()+0x39>
c001d46d:	c6 05 80 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f80,0x1
c001d474:	90                   	nop
c001d475:	83 c4 18             	add    esp,0x18
c001d478:	5b                   	pop    ebx
c001d479:	c3                   	ret    

c001d47a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d47a:	55                   	push   ebp
c001d47b:	89 e5                	mov    ebp,esp
c001d47d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d480:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d486:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d489:	72 1d                	jb     c001d4a8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d48b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d48e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d494:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d497:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d49d:	01 d0                	add    eax,edx
c001d49f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d4a2:	73 04                	jae    c001d4a8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d4a4:	b0 01                	mov    al,0x1
c001d4a6:	eb 02                	jmp    c001d4aa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d4a8:	b0 00                	mov    al,0x0
c001d4aa:	5d                   	pop    ebp
c001d4ab:	c3                   	ret    

c001d4ac <IOAPIC::read(int)>:
c001d4ac:	55                   	push   ebp
c001d4ad:	89 e5                	mov    ebp,esp
c001d4af:	83 ec 10             	sub    esp,0x10
c001d4b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d4b5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d4bb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d4be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d4c1:	0f b6 d0             	movzx  edx,al
c001d4c4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d4c7:	89 10                	mov    DWORD PTR [eax],edx
c001d4c9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d4cc:	83 c0 10             	add    eax,0x10
c001d4cf:	8b 00                	mov    eax,DWORD PTR [eax]
c001d4d1:	c9                   	leave  
c001d4d2:	c3                   	ret    
c001d4d3:	90                   	nop

c001d4d4 <IOAPIC::open(int, int, void*)>:
c001d4d4:	55                   	push   ebp
c001d4d5:	89 e5                	mov    ebp,esp
c001d4d7:	57                   	push   edi
c001d4d8:	56                   	push   esi
c001d4d9:	53                   	push   ebx
c001d4da:	83 ec 0c             	sub    esp,0xc
c001d4dd:	83 ec 0c             	sub    esp,0xc
c001d4e0:	68 1f 24 02 c0       	push   0xc002241f
c001d4e5:	e8 fb 18 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001d4ea:	83 c4 10             	add    esp,0x10
c001d4ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d4f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d4f3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d4f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d4fc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d502:	8b 14 85 60 3a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc5a0]
c001d509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d50c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d512:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d515:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d51b:	8b 14 85 e0 3a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc520]
c001d522:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d525:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d52b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d52e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d534:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d537:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d53d:	0f b6 f8             	movzx  edi,al
c001d540:	89 d0                	mov    eax,edx
c001d542:	ba 00 00 00 00       	mov    edx,0x0
c001d547:	89 c1                	mov    ecx,eax
c001d549:	80 e5 ff             	and    ch,0xff
c001d54c:	89 cb                	mov    ebx,ecx
c001d54e:	0f b6 f2             	movzx  esi,dl
c001d551:	89 d8                	mov    eax,ebx
c001d553:	89 f2                	mov    edx,esi
c001d555:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d558:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d55b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d55f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d563:	83 e0 00             	and    eax,0x0
c001d566:	09 d0                	or     eax,edx
c001d568:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d56c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d56f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d575:	8d 50 01             	lea    edx,[eax+0x1]
c001d578:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d57b:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d581:	0f b6 d0             	movzx  edx,al
c001d584:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d587:	83 c2 08             	add    edx,0x8
c001d58a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d58e:	0f b6 c9             	movzx  ecx,cl
c001d591:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d597:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d59b:	83 ec 08             	sub    esp,0x8
c001d59e:	6a 01                	push   0x1
c001d5a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d5a3:	e8 04 ff ff ff       	call   c001d4ac <IOAPIC::read(int)>
c001d5a8:	83 c4 10             	add    esp,0x10
c001d5ab:	c1 f8 10             	sar    eax,0x10
c001d5ae:	0f b6 c0             	movzx  eax,al
c001d5b1:	8d 50 01             	lea    edx,[eax+0x1]
c001d5b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d5b7:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d5bd:	b8 00 00 00 00       	mov    eax,0x0
c001d5c2:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d5c5:	5b                   	pop    ebx
c001d5c6:	5e                   	pop    esi
c001d5c7:	5f                   	pop    edi
c001d5c8:	5d                   	pop    ebp
c001d5c9:	c3                   	ret    

c001d5ca <IOAPIC::write(int, int)>:
c001d5ca:	55                   	push   ebp
c001d5cb:	89 e5                	mov    ebp,esp
c001d5cd:	83 ec 10             	sub    esp,0x10
c001d5d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d5d3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d5d9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d5dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d5df:	0f b6 d0             	movzx  edx,al
c001d5e2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d5e5:	89 10                	mov    DWORD PTR [eax],edx
c001d5e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d5ea:	8d 50 10             	lea    edx,[eax+0x10]
c001d5ed:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d5f0:	89 02                	mov    DWORD PTR [edx],eax
c001d5f2:	90                   	nop
c001d5f3:	c9                   	leave  
c001d5f4:	c3                   	ret    
c001d5f5:	90                   	nop

c001d5f6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001d5f6:	55                   	push   ebp
c001d5f7:	89 e5                	mov    ebp,esp
c001d5f9:	83 ec 20             	sub    esp,0x20
c001d5fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d5ff:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d602:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d605:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d608:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d60b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d60e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d611:	88 d0                	mov    al,dl
c001d613:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001d616:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d61a:	83 c0 08             	add    eax,0x8
c001d61d:	01 c0                	add    eax,eax
c001d61f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d622:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d626:	83 c0 08             	add    eax,0x8
c001d629:	01 c0                	add    eax,eax
c001d62b:	40                   	inc    eax
c001d62c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001d62f:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d632:	50                   	push   eax
c001d633:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d636:	e8 71 fe ff ff       	call   c001d4ac <IOAPIC::read(int)>
c001d63b:	83 c4 08             	add    esp,0x8
c001d63e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d641:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001d648:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001d64b:	c1 e0 18             	shl    eax,0x18
c001d64e:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d651:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d654:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d657:	52                   	push   edx
c001d658:	50                   	push   eax
c001d659:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d65c:	e8 69 ff ff ff       	call   c001d5ca <IOAPIC::write(int, int)>
c001d661:	83 c4 0c             	add    esp,0xc
c001d664:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d667:	50                   	push   eax
c001d668:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d66b:	e8 3c fe ff ff       	call   c001d4ac <IOAPIC::read(int)>
c001d670:	83 c4 08             	add    esp,0x8
c001d673:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d676:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001d67d:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001d684:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001d68b:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001d692:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001d696:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001d699:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001d69c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d69f:	52                   	push   edx
c001d6a0:	50                   	push   eax
c001d6a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d6a4:	e8 21 ff ff ff       	call   c001d5ca <IOAPIC::write(int, int)>
c001d6a9:	83 c4 0c             	add    esp,0xc
c001d6ac:	90                   	nop
c001d6ad:	c9                   	leave  
c001d6ae:	c3                   	ret    
c001d6af:	90                   	nop

c001d6b0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001d6b0:	55                   	push   ebp
c001d6b1:	89 e5                	mov    ebp,esp
c001d6b3:	56                   	push   esi
c001d6b4:	53                   	push   ebx
c001d6b5:	83 ec 20             	sub    esp,0x20
c001d6b8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d6bb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d6be:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001d6c2:	74 28                	je     c001d6ec <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d6c4:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001d6c8:	7f 12                	jg     c001d6dc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001d6ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d6cd:	05 60 29 02 c0       	add    eax,0xc0022960
c001d6d2:	8a 00                	mov    al,BYTE PTR [eax]
c001d6d4:	0f b6 c0             	movzx  eax,al
c001d6d7:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001d6da:	eb 10                	jmp    c001d6ec <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d6dc:	83 ec 0c             	sub    esp,0xc
c001d6df:	68 30 24 02 c0       	push   0xc0022430
c001d6e4:	e8 91 73 ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c001d6e9:	83 c4 10             	add    esp,0x10
c001d6ec:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d6f0:	a1 40 4f 02 c0       	mov    eax,ds:0xc0024f40
c001d6f5:	83 ec 08             	sub    esp,0x8
c001d6f8:	50                   	push   eax
c001d6f9:	68 68 24 02 c0       	push   0xc0022468
c001d6fe:	e8 e2 16 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001d703:	83 c4 10             	add    esp,0x10
c001d706:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d70d:	a1 40 4f 02 c0       	mov    eax,ds:0xc0024f40
c001d712:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d715:	7d 58                	jge    c001d76f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001d717:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d71a:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c001d721:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d724:	83 ec 08             	sub    esp,0x8
c001d727:	52                   	push   edx
c001d728:	50                   	push   eax
c001d729:	e8 4c fd ff ff       	call   c001d47a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001d72e:	83 c4 10             	add    esp,0x10
c001d731:	84 c0                	test   al,al
c001d733:	74 35                	je     c001d76a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001d735:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d738:	8b 1c 85 60 4f 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdb0a0]
c001d73f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d742:	83 c0 20             	add    eax,0x20
c001d745:	0f b6 f0             	movzx  esi,al
c001d748:	e8 24 66 ff ff       	call   c0013d71 <getCPUNumber()>
c001d74d:	99                   	cdq    
c001d74e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001d751:	0f b6 c9             	movzx  ecx,cl
c001d754:	83 ec 0c             	sub    esp,0xc
c001d757:	56                   	push   esi
c001d758:	52                   	push   edx
c001d759:	50                   	push   eax
c001d75a:	51                   	push   ecx
c001d75b:	53                   	push   ebx
c001d75c:	e8 95 fe ff ff       	call   c001d5f6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001d761:	83 c4 20             	add    esp,0x20
c001d764:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001d768:	eb 05                	jmp    c001d76f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001d76a:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001d76d:	eb 9e                	jmp    c001d70d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001d76f:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d772:	83 f0 01             	xor    eax,0x1
c001d775:	84 c0                	test   al,al
c001d777:	74 10                	je     c001d789 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001d779:	83 ec 0c             	sub    esp,0xc
c001d77c:	68 7f 24 02 c0       	push   0xc002247f
c001d781:	e8 f4 72 ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c001d786:	83 c4 10             	add    esp,0x10
c001d789:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001d78d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001d794:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001d798:	7f 65                	jg     c001d7ff <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001d79a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d79d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d7a0:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d7a7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d7aa:	01 ca                	add    edx,ecx
c001d7ac:	83 c2 54             	add    edx,0x54
c001d7af:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001d7b3:	85 c0                	test   eax,eax
c001d7b5:	75 43                	jne    c001d7fa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001d7b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7ba:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d7bd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d7c4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d7c7:	01 ca                	add    edx,ecx
c001d7c9:	8d 4a 54             	lea    ecx,[edx+0x54]
c001d7cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001d7cf:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001d7d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7d6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d7d9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d7e0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d7e3:	01 ca                	add    edx,ecx
c001d7e5:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001d7eb:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d7ee:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001d7f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d7f5:	83 e8 20             	sub    eax,0x20
c001d7f8:	eb 1a                	jmp    c001d814 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001d7fa:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001d7fd:	eb 95                	jmp    c001d794 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001d7ff:	83 ec 0c             	sub    esp,0xc
c001d802:	68 8c 24 02 c0       	push   0xc002248c
c001d807:	e8 6e 72 ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c001d80c:	83 c4 10             	add    esp,0x10
c001d80f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001d814:	8d 65 f8             	lea    esp,[ebp-0x8]
c001d817:	5b                   	pop    ebx
c001d818:	5e                   	pop    esi
c001d819:	5d                   	pop    ebp
c001d81a:	c3                   	ret    
c001d81b:	90                   	nop

c001d81c <PIC::disable()>:
c001d81c:	55                   	push   ebp
c001d81d:	89 e5                	mov    ebp,esp
c001d81f:	83 ec 10             	sub    esp,0x10
c001d822:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001d828:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001d82c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001d82f:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001d833:	ee                   	out    dx,al
c001d834:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001d83a:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001d83e:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001d841:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001d845:	ee                   	out    dx,al
c001d846:	90                   	nop
c001d847:	c9                   	leave  
c001d848:	c3                   	ret    
c001d849:	90                   	nop

c001d84a <PIC::close(int, int, void*)>:
c001d84a:	55                   	push   ebp
c001d84b:	89 e5                	mov    ebp,esp
c001d84d:	83 ec 08             	sub    esp,0x8
c001d850:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d853:	8b 00                	mov    eax,DWORD PTR [eax]
c001d855:	83 c0 3c             	add    eax,0x3c
c001d858:	8b 00                	mov    eax,DWORD PTR [eax]
c001d85a:	83 ec 0c             	sub    esp,0xc
c001d85d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d860:	ff d0                	call   eax
c001d862:	83 c4 10             	add    esp,0x10
c001d865:	b8 00 00 00 00       	mov    eax,0x0
c001d86a:	c9                   	leave  
c001d86b:	c3                   	ret    

c001d86c <PIC::PIC()>:
c001d86c:	83 ec 0c             	sub    esp,0xc
c001d86f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d873:	83 ec 08             	sub    esp,0x8
c001d876:	68 38 25 02 c0       	push   0xc0022538
c001d87b:	50                   	push   eax
c001d87c:	e8 a1 32 ff ff       	call   c0010b22 <InterruptController::InterruptController(char const*)>
c001d881:	83 c4 10             	add    esp,0x10
c001d884:	ba 64 25 02 c0       	mov    edx,0xc0022564
c001d889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d88d:	89 10                	mov    DWORD PTR [eax],edx
c001d88f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d893:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d899:	0f b6 d0             	movzx  edx,al
c001d89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8a0:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001d8a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8ab:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d8b1:	0f b6 d0             	movzx  edx,al
c001d8b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8b8:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001d8bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8c1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d8c7:	8d 50 01             	lea    edx,[eax+0x1]
c001d8ca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d8ce:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d8d4:	0f b6 d0             	movzx  edx,al
c001d8d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8db:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d8df:	83 e1 3f             	and    ecx,0x3f
c001d8e2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8ea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d8f0:	0f b6 d0             	movzx  edx,al
c001d8f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8f7:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001d8fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d902:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d908:	0f b6 d0             	movzx  edx,al
c001d90b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d90f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001d914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d918:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d91e:	8d 50 01             	lea    edx,[eax+0x1]
c001d921:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d925:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d92b:	0f b6 d0             	movzx  edx,al
c001d92e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d932:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d936:	83 e1 3f             	and    ecx,0x3f
c001d939:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d93d:	90                   	nop
c001d93e:	83 c4 0c             	add    esp,0xc
c001d941:	c3                   	ret    

c001d942 <PIC::ioWait()>:
c001d942:	eb 00                	jmp    c001d944 <PIC::ioWait()+0x2>
c001d944:	eb 00                	jmp    c001d946 <PIC::ioWait()+0x4>
c001d946:	90                   	nop
c001d947:	c3                   	ret    

c001d948 <PIC::getIRQReg(int)>:
c001d948:	55                   	push   ebp
c001d949:	89 e5                	mov    ebp,esp
c001d94b:	83 ec 10             	sub    esp,0x10
c001d94e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d951:	0f b6 c0             	movzx  eax,al
c001d954:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001d95a:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001d95d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001d960:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001d964:	ee                   	out    dx,al
c001d965:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d968:	0f b6 c0             	movzx  eax,al
c001d96b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001d971:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001d974:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001d977:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001d97b:	ee                   	out    dx,al
c001d97c:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001d982:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001d986:	89 c2                	mov    edx,eax
c001d988:	ec                   	in     al,dx
c001d989:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001d98c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001d98f:	0f b6 c0             	movzx  eax,al
c001d992:	c1 e0 08             	shl    eax,0x8
c001d995:	89 c1                	mov    ecx,eax
c001d997:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001d99d:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001d9a1:	89 c2                	mov    edx,eax
c001d9a3:	ec                   	in     al,dx
c001d9a4:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001d9a7:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001d9aa:	0f b6 c0             	movzx  eax,al
c001d9ad:	09 c8                	or     eax,ecx
c001d9af:	c9                   	leave  
c001d9b0:	c3                   	ret    
c001d9b1:	90                   	nop

c001d9b2 <PIC::eoi(unsigned char)>:
c001d9b2:	55                   	push   ebp
c001d9b3:	89 e5                	mov    ebp,esp
c001d9b5:	83 ec 14             	sub    esp,0x14
c001d9b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d9bb:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d9be:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001d9c2:	75 1e                	jne    c001d9e2 <PIC::eoi(unsigned char)+0x30>
c001d9c4:	6a 0b                	push   0xb
c001d9c6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d9c9:	e8 7a ff ff ff       	call   c001d948 <PIC::getIRQReg(int)>
c001d9ce:	83 c4 08             	add    esp,0x8
c001d9d1:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001d9d5:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001d9d9:	25 80 00 00 00       	and    eax,0x80
c001d9de:	85 c0                	test   eax,eax
c001d9e0:	74 5f                	je     c001da41 <PIC::eoi(unsigned char)+0x8f>
c001d9e2:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001d9e6:	75 2d                	jne    c001da15 <PIC::eoi(unsigned char)+0x63>
c001d9e8:	6a 0b                	push   0xb
c001d9ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d9ed:	e8 56 ff ff ff       	call   c001d948 <PIC::getIRQReg(int)>
c001d9f2:	83 c4 08             	add    esp,0x8
c001d9f5:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001d9f9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d9fc:	66 85 c0             	test   ax,ax
c001d9ff:	78 14                	js     c001da15 <PIC::eoi(unsigned char)+0x63>
c001da01:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001da07:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001da0b:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001da0e:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001da12:	ee                   	out    dx,al
c001da13:	eb 2d                	jmp    c001da42 <PIC::eoi(unsigned char)+0x90>
c001da15:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001da19:	76 12                	jbe    c001da2d <PIC::eoi(unsigned char)+0x7b>
c001da1b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001da21:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001da25:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001da28:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001da2c:	ee                   	out    dx,al
c001da2d:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001da33:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001da37:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001da3a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001da3e:	ee                   	out    dx,al
c001da3f:	eb 01                	jmp    c001da42 <PIC::eoi(unsigned char)+0x90>
c001da41:	90                   	nop
c001da42:	c9                   	leave  
c001da43:	c3                   	ret    

c001da44 <PIC::remap()>:
c001da44:	55                   	push   ebp
c001da45:	89 e5                	mov    ebp,esp
c001da47:	83 ec 48             	sub    esp,0x48
c001da4a:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001da51:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001da58:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001da5e:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001da61:	89 c2                	mov    edx,eax
c001da63:	ec                   	in     al,dx
c001da64:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001da67:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001da6a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001da6d:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001da73:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001da76:	89 c2                	mov    edx,eax
c001da78:	ec                   	in     al,dx
c001da79:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001da7c:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001da7f:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001da82:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001da88:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001da8c:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001da8f:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001da92:	ee                   	out    dx,al
c001da93:	83 ec 0c             	sub    esp,0xc
c001da96:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da99:	e8 a4 fe ff ff       	call   c001d942 <PIC::ioWait()>
c001da9e:	83 c4 10             	add    esp,0x10
c001daa1:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001daa7:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001daab:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001daae:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001dab1:	ee                   	out    dx,al
c001dab2:	83 ec 0c             	sub    esp,0xc
c001dab5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dab8:	e8 85 fe ff ff       	call   c001d942 <PIC::ioWait()>
c001dabd:	83 c4 10             	add    esp,0x10
c001dac0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001dac3:	0f b6 c0             	movzx  eax,al
c001dac6:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001dacc:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001dacf:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001dad2:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001dad5:	ee                   	out    dx,al
c001dad6:	83 ec 0c             	sub    esp,0xc
c001dad9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dadc:	e8 61 fe ff ff       	call   c001d942 <PIC::ioWait()>
c001dae1:	83 c4 10             	add    esp,0x10
c001dae4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dae7:	0f b6 c0             	movzx  eax,al
c001daea:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001daf0:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001daf3:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001daf6:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001daf9:	ee                   	out    dx,al
c001dafa:	83 ec 0c             	sub    esp,0xc
c001dafd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db00:	e8 3d fe ff ff       	call   c001d942 <PIC::ioWait()>
c001db05:	83 c4 10             	add    esp,0x10
c001db08:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001db0e:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001db12:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001db15:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001db18:	ee                   	out    dx,al
c001db19:	83 ec 0c             	sub    esp,0xc
c001db1c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db1f:	e8 1e fe ff ff       	call   c001d942 <PIC::ioWait()>
c001db24:	83 c4 10             	add    esp,0x10
c001db27:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001db2d:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001db31:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001db34:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001db37:	ee                   	out    dx,al
c001db38:	83 ec 0c             	sub    esp,0xc
c001db3b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db3e:	e8 ff fd ff ff       	call   c001d942 <PIC::ioWait()>
c001db43:	83 c4 10             	add    esp,0x10
c001db46:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001db4c:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001db50:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001db53:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001db56:	ee                   	out    dx,al
c001db57:	83 ec 0c             	sub    esp,0xc
c001db5a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db5d:	e8 e0 fd ff ff       	call   c001d942 <PIC::ioWait()>
c001db62:	83 c4 10             	add    esp,0x10
c001db65:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001db6b:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001db6f:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001db72:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001db75:	ee                   	out    dx,al
c001db76:	83 ec 0c             	sub    esp,0xc
c001db79:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db7c:	e8 c1 fd ff ff       	call   c001d942 <PIC::ioWait()>
c001db81:	83 c4 10             	add    esp,0x10
c001db84:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001db88:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001db8e:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001db91:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001db94:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001db97:	ee                   	out    dx,al
c001db98:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001db9c:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001dba2:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001dba5:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001dba8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dbab:	ee                   	out    dx,al
c001dbac:	90                   	nop
c001dbad:	c9                   	leave  
c001dbae:	c3                   	ret    
c001dbaf:	90                   	nop

c001dbb0 <PIC::open(int, int, void*)>:
c001dbb0:	55                   	push   ebp
c001dbb1:	89 e5                	mov    ebp,esp
c001dbb3:	83 ec 18             	sub    esp,0x18
c001dbb6:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001dbbc:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001dbc0:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dbc3:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dbc7:	ee                   	out    dx,al
c001dbc8:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001dbce:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001dbd2:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dbd5:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dbd9:	ee                   	out    dx,al
c001dbda:	83 ec 0c             	sub    esp,0xc
c001dbdd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dbe0:	e8 5f fe ff ff       	call   c001da44 <PIC::remap()>
c001dbe5:	83 c4 10             	add    esp,0x10
c001dbe8:	b8 00 00 00 00       	mov    eax,0x0
c001dbed:	c9                   	leave  
c001dbee:	c3                   	ret    
c001dbef:	90                   	nop

c001dbf0 <APICTimer::close(int, int, void*)>:
c001dbf0:	b8 00 00 00 00       	mov    eax,0x0
c001dbf5:	c3                   	ret    

c001dbf6 <apicTimerHandler(regs*, void*)>:
c001dbf6:	83 ec 0c             	sub    esp,0xc
c001dbf9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dbfd:	8b 00                	mov    eax,DWORD PTR [eax]
c001dbff:	99                   	cdq    
c001dc00:	52                   	push   edx
c001dc01:	50                   	push   eax
c001dc02:	6a 00                	push   0x0
c001dc04:	68 00 ca 9a 3b       	push   0x3b9aca00
c001dc09:	e8 6e 07 00 00       	call   c001e37c <__udivdi3>
c001dc0e:	83 c4 10             	add    esp,0x10
c001dc11:	83 ec 08             	sub    esp,0x8
c001dc14:	52                   	push   edx
c001dc15:	50                   	push   eax
c001dc16:	e8 72 46 ff ff       	call   c001228d <timerHandler(unsigned long long)>
c001dc1b:	83 c4 10             	add    esp,0x10
c001dc1e:	90                   	nop
c001dc1f:	83 c4 0c             	add    esp,0xc
c001dc22:	c3                   	ret    
c001dc23:	90                   	nop

c001dc24 <APICTimer::write(int)>:
c001dc24:	53                   	push   ebx
c001dc25:	83 ec 28             	sub    esp,0x28
c001dc28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc2c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001dc30:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dc36:	e8 39 61 ff ff       	call   c0013d74 <thisCPU()>
c001dc3b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001dc41:	83 ec 0c             	sub    esp,0xc
c001dc44:	50                   	push   eax
c001dc45:	e8 0e f6 ff ff       	call   c001d258 <APIC::getBase()>
c001dc4a:	83 c4 10             	add    esp,0x10
c001dc4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dc51:	a1 f0 37 02 c0       	mov    eax,ds:0xc00237f0
c001dc56:	8b 15 f4 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237f4
c001dc5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dc60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001dc64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc68:	05 e0 03 00 00       	add    eax,0x3e0
c001dc6d:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001dc73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc77:	05 80 03 00 00       	add    eax,0x380
c001dc7c:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001dc82:	fb                   	sti    
c001dc83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc87:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dc8b:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001dc90:	83 d2 00             	adc    edx,0x0
c001dc93:	89 c1                	mov    ecx,eax
c001dc95:	89 d3                	mov    ebx,edx
c001dc97:	a1 f0 37 02 c0       	mov    eax,ds:0xc00237f0
c001dc9c:	8b 15 f4 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237f4
c001dca2:	39 c8                	cmp    eax,ecx
c001dca4:	89 d0                	mov    eax,edx
c001dca6:	19 d8                	sbb    eax,ebx
c001dca8:	73 02                	jae    c001dcac <APICTimer::write(int)+0x88>
c001dcaa:	eb d7                	jmp    c001dc83 <APICTimer::write(int)+0x5f>
c001dcac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dcb0:	05 20 03 00 00       	add    eax,0x320
c001dcb5:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001dcbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dcbf:	05 90 03 00 00       	add    eax,0x390
c001dcc4:	8b 00                	mov    eax,DWORD PTR [eax]
c001dcc6:	f7 d0                	not    eax
c001dcc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dccc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dcd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dcd4:	ba 00 00 00 00       	mov    edx,0x0
c001dcd9:	f7 f3                	div    ebx
c001dcdb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dcdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dce3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001dce9:	0d 00 00 02 00       	or     eax,0x20000
c001dcee:	89 c2                	mov    edx,eax
c001dcf0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dcf4:	05 20 03 00 00       	add    eax,0x320
c001dcf9:	89 10                	mov    DWORD PTR [eax],edx
c001dcfb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dcff:	05 e0 03 00 00       	add    eax,0x3e0
c001dd04:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001dd0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dd0e:	05 80 03 00 00       	add    eax,0x380
c001dd13:	89 c2                	mov    edx,eax
c001dd15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dd19:	89 02                	mov    DWORD PTR [edx],eax
c001dd1b:	90                   	nop
c001dd1c:	83 c4 28             	add    esp,0x28
c001dd1f:	5b                   	pop    ebx
c001dd20:	c3                   	ret    
c001dd21:	90                   	nop

c001dd22 <APICTimer::open(int, int, void*)>:
c001dd22:	57                   	push   edi
c001dd23:	56                   	push   esi
c001dd24:	53                   	push   ebx
c001dd25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd29:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd2b:	83 c0 24             	add    eax,0x24
c001dd2e:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd30:	83 ec 08             	sub    esp,0x8
c001dd33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd3b:	ff d0                	call   eax
c001dd3d:	83 c4 10             	add    esp,0x10
c001dd40:	e8 2f 60 ff ff       	call   c0013d74 <thisCPU()>
c001dd45:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001dd4b:	83 ec 0c             	sub    esp,0xc
c001dd4e:	50                   	push   eax
c001dd4f:	e8 04 f5 ff ff       	call   c001d258 <APIC::getBase()>
c001dd54:	83 c4 10             	add    esp,0x10
c001dd57:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001dd5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd61:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dd67:	0f b6 f8             	movzx  edi,al
c001dd6a:	89 d0                	mov    eax,edx
c001dd6c:	ba 00 00 00 00       	mov    edx,0x0
c001dd71:	89 c1                	mov    ecx,eax
c001dd73:	80 e5 ff             	and    ch,0xff
c001dd76:	89 cb                	mov    ebx,ecx
c001dd78:	0f b6 f2             	movzx  esi,dl
c001dd7b:	89 d8                	mov    eax,ebx
c001dd7d:	89 f2                	mov    edx,esi
c001dd7f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd83:	8d 5f 08             	lea    ebx,[edi+0x8]
c001dd86:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001dd8a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001dd8e:	83 e0 00             	and    eax,0x0
c001dd91:	09 d0                	or     eax,edx
c001dd93:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001dd97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd9b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dda1:	8d 50 01             	lea    edx,[eax+0x1]
c001dda4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dda8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001ddae:	0f b6 d0             	movzx  edx,al
c001ddb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddb5:	83 c2 08             	add    edx,0x8
c001ddb8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ddbc:	0f b6 c9             	movzx  ecx,cl
c001ddbf:	81 c9 00 00 01 00    	or     ecx,0x10000
c001ddc5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ddc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddcd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ddd1:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ddd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dddb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dddf:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001dde5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dde9:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ddef:	83 ec 0c             	sub    esp,0xc
c001ddf2:	51                   	push   ecx
c001ddf3:	6a 01                	push   0x1
c001ddf5:	68 f6 db 01 c0       	push   0xc001dbf6
c001ddfa:	52                   	push   edx
c001ddfb:	50                   	push   eax
c001ddfc:	e8 43 23 ff ff       	call   c0010144 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001de01:	83 c4 20             	add    esp,0x20
c001de04:	89 c2                	mov    edx,eax
c001de06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de0a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001de10:	b8 00 00 00 00       	mov    eax,0x0
c001de15:	5b                   	pop    ebx
c001de16:	5e                   	pop    esi
c001de17:	5f                   	pop    edi
c001de18:	c3                   	ret    
c001de19:	90                   	nop

c001de1a <APICTimer::APICTimer()>:
c001de1a:	83 ec 0c             	sub    esp,0xc
c001de1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de21:	83 ec 08             	sub    esp,0x8
c001de24:	68 a4 25 02 c0       	push   0xc00225a4
c001de29:	50                   	push   eax
c001de2a:	e8 cf 43 ff ff       	call   c00121fe <Timer::Timer(char const*)>
c001de2f:	83 c4 10             	add    esp,0x10
c001de32:	ba b8 25 02 c0       	mov    edx,0xc00225b8
c001de37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de3b:	89 10                	mov    DWORD PTR [eax],edx
c001de3d:	90                   	nop
c001de3e:	83 c4 0c             	add    esp,0xc
c001de41:	c3                   	ret    

c001de42 <PIT::write(int)>:
c001de42:	83 ec 10             	sub    esp,0x10
c001de45:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de49:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001de4d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001de53:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001de57:	a3 84 4f 02 c0       	mov    ds:0xc0024f84,eax
c001de5c:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001de61:	99                   	cdq    
c001de62:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001de66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001de6a:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001de71:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001de76:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001de7a:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001de7f:	ee                   	out    dx,al
c001de80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de84:	0f b6 c0             	movzx  eax,al
c001de87:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001de8e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001de92:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001de96:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001de9b:	ee                   	out    dx,al
c001de9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dea0:	c1 f8 08             	sar    eax,0x8
c001dea3:	0f b6 c0             	movzx  eax,al
c001dea6:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001dead:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001deb1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001deb5:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001deba:	ee                   	out    dx,al
c001debb:	90                   	nop
c001debc:	83 c4 10             	add    esp,0x10
c001debf:	c3                   	ret    

c001dec0 <pitHandler(regs*, void*)>:
c001dec0:	83 ec 0c             	sub    esp,0xc
c001dec3:	a1 84 4f 02 c0       	mov    eax,ds:0xc0024f84
c001dec8:	99                   	cdq    
c001dec9:	52                   	push   edx
c001deca:	50                   	push   eax
c001decb:	6a 00                	push   0x0
c001decd:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ded2:	e8 a5 04 00 00       	call   c001e37c <__udivdi3>
c001ded7:	83 c4 10             	add    esp,0x10
c001deda:	83 ec 08             	sub    esp,0x8
c001dedd:	52                   	push   edx
c001dede:	50                   	push   eax
c001dedf:	e8 a9 43 ff ff       	call   c001228d <timerHandler(unsigned long long)>
c001dee4:	83 c4 10             	add    esp,0x10
c001dee7:	90                   	nop
c001dee8:	83 c4 0c             	add    esp,0xc
c001deeb:	c3                   	ret    

c001deec <PIT::open(int, int, void*)>:
c001deec:	83 ec 0c             	sub    esp,0xc
c001deef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001def3:	8b 00                	mov    eax,DWORD PTR [eax]
c001def5:	83 c0 24             	add    eax,0x24
c001def8:	8b 00                	mov    eax,DWORD PTR [eax]
c001defa:	83 ec 08             	sub    esp,0x8
c001defd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df05:	ff d0                	call   eax
c001df07:	83 c4 10             	add    esp,0x10
c001df0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df0e:	83 ec 0c             	sub    esp,0xc
c001df11:	6a 00                	push   0x0
c001df13:	6a 01                	push   0x1
c001df15:	68 c0 de 01 c0       	push   0xc001dec0
c001df1a:	6a 00                	push   0x0
c001df1c:	50                   	push   eax
c001df1d:	e8 22 22 ff ff       	call   c0010144 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001df22:	83 c4 20             	add    esp,0x20
c001df25:	89 c2                	mov    edx,eax
c001df27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df2b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001df31:	b8 00 00 00 00       	mov    eax,0x0
c001df36:	83 c4 0c             	add    esp,0xc
c001df39:	c3                   	ret    

c001df3a <PIT::close(int, int, void*)>:
c001df3a:	83 ec 0c             	sub    esp,0xc
c001df3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df41:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001df4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df4f:	6a 01                	push   0x1
c001df51:	68 c0 de 01 c0       	push   0xc001dec0
c001df56:	6a 00                	push   0x0
c001df58:	50                   	push   eax
c001df59:	e8 44 22 ff ff       	call   c00101a2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001df5e:	83 c4 10             	add    esp,0x10
c001df61:	b8 00 00 00 00       	mov    eax,0x0
c001df66:	83 c4 0c             	add    esp,0xc
c001df69:	c3                   	ret    

c001df6a <PIT::PIT()>:
c001df6a:	83 ec 0c             	sub    esp,0xc
c001df6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df71:	83 ec 08             	sub    esp,0x8
c001df74:	68 e0 25 02 c0       	push   0xc00225e0
c001df79:	50                   	push   eax
c001df7a:	e8 7f 42 ff ff       	call   c00121fe <Timer::Timer(char const*)>
c001df7f:	83 c4 10             	add    esp,0x10
c001df82:	ba 08 26 02 c0       	mov    edx,0xc0022608
c001df87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df8b:	89 10                	mov    DWORD PTR [eax],edx
c001df8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df91:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001df97:	0f b6 d0             	movzx  edx,al
c001df9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df9e:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001dfa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfa9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dfaf:	0f b6 d0             	movzx  edx,al
c001dfb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfb6:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001dfbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfbf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dfc5:	8d 50 01             	lea    edx,[eax+0x1]
c001dfc8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dfcc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dfd2:	0f b6 d0             	movzx  edx,al
c001dfd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfd9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dfdd:	83 e1 3f             	and    ecx,0x3f
c001dfe0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dfe4:	90                   	nop
c001dfe5:	83 c4 0c             	add    esp,0xc
c001dfe8:	c3                   	ret    
c001dfe9:	66 90                	xchg   ax,ax
c001dfeb:	66 90                	xchg   ax,ax
c001dfed:	66 90                	xchg   ax,ax
c001dfef:	90                   	nop

c001dff0 <avxDetect>:
c001dff0:	b8 00 00 00 00       	mov    eax,0x0
c001dff5:	c3                   	ret    

c001dff6 <avxSave>:
c001dff6:	c3                   	ret    

c001dff7 <avxLoad>:
c001dff7:	c3                   	ret    

c001dff8 <avxInit>:
c001dff8:	c3                   	ret    

c001dff9 <avxClose>:
c001dff9:	c3                   	ret    
c001dffa:	66 90                	xchg   ax,ax
c001dffc:	66 90                	xchg   ax,ax
c001dffe:	66 90                	xchg   ax,ax

c001e000 <sseDetect>:
c001e000:	b8 01 00 00 00       	mov    eax,0x1
c001e005:	0f a2                	cpuid  
c001e007:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e00d:	74 06                	je     c001e015 <sseDetect.noSSE>
c001e00f:	b8 01 00 00 00       	mov    eax,0x1
c001e014:	c3                   	ret    

c001e015 <sseDetect.noSSE>:
c001e015:	b8 00 00 00 00       	mov    eax,0x0
c001e01a:	c3                   	ret    

c001e01b <sseSave>:
c001e01b:	0f ae 44 24 08       	fxsave [esp+0x8]
c001e020:	c3                   	ret    

c001e021 <sseLoad>:
c001e021:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001e026:	c3                   	ret    

c001e027 <sseInit>:
c001e027:	e8 40 00 00 00       	call   c001e06c <x87Init>
c001e02c:	0f 20 e0             	mov    eax,cr4
c001e02f:	66 0d 00 06          	or     ax,0x600
c001e033:	0f 22 e0             	mov    cr4,eax
c001e036:	c3                   	ret    

c001e037 <sseClose>:
c001e037:	c3                   	ret    
c001e038:	66 90                	xchg   ax,ax
c001e03a:	66 90                	xchg   ax,ax
c001e03c:	66 90                	xchg   ax,ax
c001e03e:	66 90                	xchg   ax,ax

c001e040 <value_37F>:
c001e040:	7f 03                	jg     c001e045 <value_37A+0x1>

c001e042 <value_37E>:
c001e042:	7e 03                	jle    c001e047 <x87Detect+0x1>

c001e044 <value_37A>:
c001e044:	7a 03                	jp     c001e049 <x87Detect+0x3>

c001e046 <x87Detect>:
c001e046:	b8 01 00 00 00       	mov    eax,0x1
c001e04b:	0f a2                	cpuid  
c001e04d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e053:	74 06                	je     c001e05b <x87Detect.nox87>
c001e055:	b8 01 00 00 00       	mov    eax,0x1
c001e05a:	c3                   	ret    

c001e05b <x87Detect.nox87>:
c001e05b:	b8 00 00 00 00       	mov    eax,0x0
c001e060:	c3                   	ret    

c001e061 <x87Save>:
c001e061:	9b dd 74 24 08       	fsave  [esp+0x8]
c001e066:	c3                   	ret    

c001e067 <x87Load>:
c001e067:	dd 64 24 08          	frstor [esp+0x8]
c001e06b:	c3                   	ret    

c001e06c <x87Init>:
c001e06c:	9b db e3             	finit  
c001e06f:	0f 20 c0             	mov    eax,cr0
c001e072:	66 25 fb ff          	and    ax,0xfffb
c001e076:	66 0d 22 00          	or     ax,0x22
c001e07a:	0f 22 c0             	mov    cr0,eax
c001e07d:	0f 06                	clts   
c001e07f:	d9 2d 44 e0 01 c0    	fldcw  WORD PTR ds:0xc001e044
c001e085:	c3                   	ret    

c001e086 <x87Close>:
c001e086:	c3                   	ret    
c001e087:	90                   	nop

c001e088 <__do_global_ctors_aux>:
c001e088:	a1 68 f1 01 c0       	mov    eax,ds:0xc001f168
c001e08d:	83 f8 ff             	cmp    eax,0xffffffff
c001e090:	74 1a                	je     c001e0ac <__do_global_ctors_aux+0x24>
c001e092:	55                   	push   ebp
c001e093:	89 e5                	mov    ebp,esp
c001e095:	53                   	push   ebx
c001e096:	52                   	push   edx
c001e097:	bb 68 f1 01 c0       	mov    ebx,0xc001f168
c001e09c:	ff d0                	call   eax
c001e09e:	83 eb 04             	sub    ebx,0x4
c001e0a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e0a3:	83 f8 ff             	cmp    eax,0xffffffff
c001e0a6:	75 f4                	jne    c001e09c <__do_global_ctors_aux+0x14>
c001e0a8:	58                   	pop    eax
c001e0a9:	5b                   	pop    ebx
c001e0aa:	5d                   	pop    ebp
c001e0ab:	c3                   	ret    
c001e0ac:	c3                   	ret    
c001e0ad:	66 90                	xchg   ax,ax
c001e0af:	90                   	nop

c001e0b0 <__divdi3>:
c001e0b0:	55                   	push   ebp
c001e0b1:	57                   	push   edi
c001e0b2:	56                   	push   esi
c001e0b3:	53                   	push   ebx
c001e0b4:	83 ec 1c             	sub    esp,0x1c
c001e0b7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e0bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e0bf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e0c2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e0c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e0ca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e0ce:	85 db                	test   ebx,ebx
c001e0d0:	0f 88 8e 00 00 00    	js     c001e164 <__divdi3+0xb4>
c001e0d6:	89 dd                	mov    ebp,ebx
c001e0d8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e0e0:	89 d3                	mov    ebx,edx
c001e0e2:	85 d2                	test   edx,edx
c001e0e4:	79 0d                	jns    c001e0f3 <__divdi3+0x43>
c001e0e6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e0ea:	f7 d8                	neg    eax
c001e0ec:	83 d2 00             	adc    edx,0x0
c001e0ef:	f7 da                	neg    edx
c001e0f1:	89 d3                	mov    ebx,edx
c001e0f3:	89 c7                	mov    edi,eax
c001e0f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e0f8:	85 db                	test   ebx,ebx
c001e0fa:	75 48                	jne    c001e144 <__divdi3+0x94>
c001e0fc:	39 ef                	cmp    edi,ebp
c001e0fe:	76 24                	jbe    c001e124 <__divdi3+0x74>
c001e100:	89 ea                	mov    edx,ebp
c001e102:	f7 f7                	div    edi
c001e104:	89 c1                	mov    ecx,eax
c001e106:	31 f6                	xor    esi,esi
c001e108:	89 c8                	mov    eax,ecx
c001e10a:	89 f2                	mov    edx,esi
c001e10c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e110:	85 c9                	test   ecx,ecx
c001e112:	74 07                	je     c001e11b <__divdi3+0x6b>
c001e114:	f7 d8                	neg    eax
c001e116:	83 d2 00             	adc    edx,0x0
c001e119:	f7 da                	neg    edx
c001e11b:	83 c4 1c             	add    esp,0x1c
c001e11e:	5b                   	pop    ebx
c001e11f:	5e                   	pop    esi
c001e120:	5f                   	pop    edi
c001e121:	5d                   	pop    ebp
c001e122:	c3                   	ret    
c001e123:	90                   	nop
c001e124:	85 ff                	test   edi,edi
c001e126:	75 0b                	jne    c001e133 <__divdi3+0x83>
c001e128:	b8 01 00 00 00       	mov    eax,0x1
c001e12d:	31 d2                	xor    edx,edx
c001e12f:	f7 f3                	div    ebx
c001e131:	89 c7                	mov    edi,eax
c001e133:	31 d2                	xor    edx,edx
c001e135:	89 e8                	mov    eax,ebp
c001e137:	f7 f7                	div    edi
c001e139:	89 c6                	mov    esi,eax
c001e13b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e13e:	f7 f7                	div    edi
c001e140:	89 c1                	mov    ecx,eax
c001e142:	eb c4                	jmp    c001e108 <__divdi3+0x58>
c001e144:	39 eb                	cmp    ebx,ebp
c001e146:	77 3c                	ja     c001e184 <__divdi3+0xd4>
c001e148:	0f bd f3             	bsr    esi,ebx
c001e14b:	83 f6 1f             	xor    esi,0x1f
c001e14e:	75 40                	jne    c001e190 <__divdi3+0xe0>
c001e150:	39 eb                	cmp    ebx,ebp
c001e152:	72 09                	jb     c001e15d <__divdi3+0xad>
c001e154:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e157:	0f 87 97 00 00 00    	ja     c001e1f4 <__divdi3+0x144>
c001e15d:	b9 01 00 00 00       	mov    ecx,0x1
c001e162:	eb a4                	jmp    c001e108 <__divdi3+0x58>
c001e164:	f7 d9                	neg    ecx
c001e166:	83 d3 00             	adc    ebx,0x0
c001e169:	f7 db                	neg    ebx
c001e16b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e16e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e172:	89 dd                	mov    ebp,ebx
c001e174:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e17c:	e9 5f ff ff ff       	jmp    c001e0e0 <__divdi3+0x30>
c001e181:	8d 76 00             	lea    esi,[esi+0x0]
c001e184:	31 f6                	xor    esi,esi
c001e186:	31 c9                	xor    ecx,ecx
c001e188:	e9 7b ff ff ff       	jmp    c001e108 <__divdi3+0x58>
c001e18d:	8d 76 00             	lea    esi,[esi+0x0]
c001e190:	b8 20 00 00 00       	mov    eax,0x20
c001e195:	29 f0                	sub    eax,esi
c001e197:	89 f1                	mov    ecx,esi
c001e199:	d3 e3                	shl    ebx,cl
c001e19b:	89 fa                	mov    edx,edi
c001e19d:	88 c1                	mov    cl,al
c001e19f:	d3 ea                	shr    edx,cl
c001e1a1:	09 da                	or     edx,ebx
c001e1a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e1a7:	89 f1                	mov    ecx,esi
c001e1a9:	d3 e7                	shl    edi,cl
c001e1ab:	89 eb                	mov    ebx,ebp
c001e1ad:	88 c1                	mov    cl,al
c001e1af:	d3 eb                	shr    ebx,cl
c001e1b1:	89 f1                	mov    ecx,esi
c001e1b3:	d3 e5                	shl    ebp,cl
c001e1b5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e1b8:	88 c1                	mov    cl,al
c001e1ba:	d3 ea                	shr    edx,cl
c001e1bc:	09 d5                	or     ebp,edx
c001e1be:	89 e8                	mov    eax,ebp
c001e1c0:	89 da                	mov    edx,ebx
c001e1c2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e1c6:	89 d3                	mov    ebx,edx
c001e1c8:	89 c5                	mov    ebp,eax
c001e1ca:	f7 e7                	mul    edi
c001e1cc:	39 d3                	cmp    ebx,edx
c001e1ce:	72 18                	jb     c001e1e8 <__divdi3+0x138>
c001e1d0:	74 0a                	je     c001e1dc <__divdi3+0x12c>
c001e1d2:	89 e9                	mov    ecx,ebp
c001e1d4:	31 f6                	xor    esi,esi
c001e1d6:	e9 2d ff ff ff       	jmp    c001e108 <__divdi3+0x58>
c001e1db:	90                   	nop
c001e1dc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e1df:	89 f1                	mov    ecx,esi
c001e1e1:	d3 e7                	shl    edi,cl
c001e1e3:	39 c7                	cmp    edi,eax
c001e1e5:	73 eb                	jae    c001e1d2 <__divdi3+0x122>
c001e1e7:	90                   	nop
c001e1e8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e1eb:	31 f6                	xor    esi,esi
c001e1ed:	e9 16 ff ff ff       	jmp    c001e108 <__divdi3+0x58>
c001e1f2:	66 90                	xchg   ax,ax
c001e1f4:	31 c9                	xor    ecx,ecx
c001e1f6:	e9 0d ff ff ff       	jmp    c001e108 <__divdi3+0x58>
c001e1fb:	90                   	nop

c001e1fc <__moddi3>:
c001e1fc:	55                   	push   ebp
c001e1fd:	57                   	push   edi
c001e1fe:	56                   	push   esi
c001e1ff:	53                   	push   ebx
c001e200:	83 ec 2c             	sub    esp,0x2c
c001e203:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e207:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e20b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e20f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e213:	85 db                	test   ebx,ebx
c001e215:	0f 88 85 00 00 00    	js     c001e2a0 <__moddi3+0xa4>
c001e21b:	89 de                	mov    esi,ebx
c001e21d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e225:	89 d7                	mov    edi,edx
c001e227:	85 d2                	test   edx,edx
c001e229:	79 09                	jns    c001e234 <__moddi3+0x38>
c001e22b:	f7 d8                	neg    eax
c001e22d:	83 d2 00             	adc    edx,0x0
c001e230:	f7 da                	neg    edx
c001e232:	89 d7                	mov    edi,edx
c001e234:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e238:	89 cd                	mov    ebp,ecx
c001e23a:	85 ff                	test   edi,edi
c001e23c:	75 52                	jne    c001e290 <__moddi3+0x94>
c001e23e:	89 c3                	mov    ebx,eax
c001e240:	39 f0                	cmp    eax,esi
c001e242:	76 24                	jbe    c001e268 <__moddi3+0x6c>
c001e244:	89 c8                	mov    eax,ecx
c001e246:	89 f2                	mov    edx,esi
c001e248:	f7 f3                	div    ebx
c001e24a:	89 d6                	mov    esi,edx
c001e24c:	89 f0                	mov    eax,esi
c001e24e:	31 d2                	xor    edx,edx
c001e250:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e254:	85 c9                	test   ecx,ecx
c001e256:	74 07                	je     c001e25f <__moddi3+0x63>
c001e258:	f7 d8                	neg    eax
c001e25a:	83 d2 00             	adc    edx,0x0
c001e25d:	f7 da                	neg    edx
c001e25f:	83 c4 2c             	add    esp,0x2c
c001e262:	5b                   	pop    ebx
c001e263:	5e                   	pop    esi
c001e264:	5f                   	pop    edi
c001e265:	5d                   	pop    ebp
c001e266:	c3                   	ret    
c001e267:	90                   	nop
c001e268:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e26c:	85 db                	test   ebx,ebx
c001e26e:	75 0d                	jne    c001e27d <__moddi3+0x81>
c001e270:	b8 01 00 00 00       	mov    eax,0x1
c001e275:	31 d2                	xor    edx,edx
c001e277:	f7 f7                	div    edi
c001e279:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e27d:	89 f0                	mov    eax,esi
c001e27f:	31 d2                	xor    edx,edx
c001e281:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e285:	f7 f7                	div    edi
c001e287:	89 e8                	mov    eax,ebp
c001e289:	f7 f7                	div    edi
c001e28b:	89 d6                	mov    esi,edx
c001e28d:	eb bd                	jmp    c001e24c <__moddi3+0x50>
c001e28f:	90                   	nop
c001e290:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e294:	39 f7                	cmp    edi,esi
c001e296:	76 20                	jbe    c001e2b8 <__moddi3+0xbc>
c001e298:	89 c8                	mov    eax,ecx
c001e29a:	89 f2                	mov    edx,esi
c001e29c:	eb b2                	jmp    c001e250 <__moddi3+0x54>
c001e29e:	66 90                	xchg   ax,ax
c001e2a0:	f7 d9                	neg    ecx
c001e2a2:	83 d3 00             	adc    ebx,0x0
c001e2a5:	f7 db                	neg    ebx
c001e2a7:	89 de                	mov    esi,ebx
c001e2a9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e2b1:	e9 6f ff ff ff       	jmp    c001e225 <__moddi3+0x29>
c001e2b6:	66 90                	xchg   ax,ax
c001e2b8:	0f bd c7             	bsr    eax,edi
c001e2bb:	83 f0 1f             	xor    eax,0x1f
c001e2be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e2c2:	75 24                	jne    c001e2e8 <__moddi3+0xec>
c001e2c4:	39 f7                	cmp    edi,esi
c001e2c6:	72 06                	jb     c001e2ce <__moddi3+0xd2>
c001e2c8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e2cc:	77 0c                	ja     c001e2da <__moddi3+0xde>
c001e2ce:	89 e9                	mov    ecx,ebp
c001e2d0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e2d4:	19 fe                	sbb    esi,edi
c001e2d6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e2da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2de:	89 f2                	mov    edx,esi
c001e2e0:	e9 6b ff ff ff       	jmp    c001e250 <__moddi3+0x54>
c001e2e5:	8d 76 00             	lea    esi,[esi+0x0]
c001e2e8:	b8 20 00 00 00       	mov    eax,0x20
c001e2ed:	89 c2                	mov    edx,eax
c001e2ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e2f3:	29 da                	sub    edx,ebx
c001e2f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e2f9:	88 d9                	mov    cl,bl
c001e2fb:	d3 e7                	shl    edi,cl
c001e2fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e301:	88 d1                	mov    cl,dl
c001e303:	d3 e8                	shr    eax,cl
c001e305:	09 c7                	or     edi,eax
c001e307:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e30b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e30f:	89 d8                	mov    eax,ebx
c001e311:	88 d9                	mov    cl,bl
c001e313:	d3 e7                	shl    edi,cl
c001e315:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e319:	89 f3                	mov    ebx,esi
c001e31b:	88 d1                	mov    cl,dl
c001e31d:	d3 eb                	shr    ebx,cl
c001e31f:	89 c7                	mov    edi,eax
c001e321:	88 c1                	mov    cl,al
c001e323:	d3 e6                	shl    esi,cl
c001e325:	89 e8                	mov    eax,ebp
c001e327:	88 d1                	mov    cl,dl
c001e329:	d3 e8                	shr    eax,cl
c001e32b:	09 f0                	or     eax,esi
c001e32d:	89 f9                	mov    ecx,edi
c001e32f:	d3 e5                	shl    ebp,cl
c001e331:	89 da                	mov    edx,ebx
c001e333:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e337:	89 d3                	mov    ebx,edx
c001e339:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e33d:	89 c6                	mov    esi,eax
c001e33f:	89 d1                	mov    ecx,edx
c001e341:	39 d3                	cmp    ebx,edx
c001e343:	72 27                	jb     c001e36c <__moddi3+0x170>
c001e345:	74 21                	je     c001e368 <__moddi3+0x16c>
c001e347:	29 f5                	sub    ebp,esi
c001e349:	19 cb                	sbb    ebx,ecx
c001e34b:	89 de                	mov    esi,ebx
c001e34d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e351:	d3 e6                	shl    esi,cl
c001e353:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e357:	89 f9                	mov    ecx,edi
c001e359:	d3 ed                	shr    ebp,cl
c001e35b:	09 ee                	or     esi,ebp
c001e35d:	89 f0                	mov    eax,esi
c001e35f:	d3 eb                	shr    ebx,cl
c001e361:	89 da                	mov    edx,ebx
c001e363:	e9 e8 fe ff ff       	jmp    c001e250 <__moddi3+0x54>
c001e368:	39 c5                	cmp    ebp,eax
c001e36a:	73 db                	jae    c001e347 <__moddi3+0x14b>
c001e36c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e370:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e374:	89 d1                	mov    ecx,edx
c001e376:	89 c6                	mov    esi,eax
c001e378:	eb cd                	jmp    c001e347 <__moddi3+0x14b>
c001e37a:	66 90                	xchg   ax,ax

c001e37c <__udivdi3>:
c001e37c:	55                   	push   ebp
c001e37d:	57                   	push   edi
c001e37e:	56                   	push   esi
c001e37f:	53                   	push   ebx
c001e380:	83 ec 1c             	sub    esp,0x1c
c001e383:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e387:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e38b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e38f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e393:	85 d2                	test   edx,edx
c001e395:	75 41                	jne    c001e3d8 <__udivdi3+0x5c>
c001e397:	39 f7                	cmp    edi,esi
c001e399:	76 15                	jbe    c001e3b0 <__udivdi3+0x34>
c001e39b:	89 e8                	mov    eax,ebp
c001e39d:	89 f2                	mov    edx,esi
c001e39f:	f7 f7                	div    edi
c001e3a1:	31 db                	xor    ebx,ebx
c001e3a3:	89 da                	mov    edx,ebx
c001e3a5:	83 c4 1c             	add    esp,0x1c
c001e3a8:	5b                   	pop    ebx
c001e3a9:	5e                   	pop    esi
c001e3aa:	5f                   	pop    edi
c001e3ab:	5d                   	pop    ebp
c001e3ac:	c3                   	ret    
c001e3ad:	8d 76 00             	lea    esi,[esi+0x0]
c001e3b0:	89 f9                	mov    ecx,edi
c001e3b2:	85 ff                	test   edi,edi
c001e3b4:	75 0b                	jne    c001e3c1 <__udivdi3+0x45>
c001e3b6:	b8 01 00 00 00       	mov    eax,0x1
c001e3bb:	31 d2                	xor    edx,edx
c001e3bd:	f7 f7                	div    edi
c001e3bf:	89 c1                	mov    ecx,eax
c001e3c1:	31 d2                	xor    edx,edx
c001e3c3:	89 f0                	mov    eax,esi
c001e3c5:	f7 f1                	div    ecx
c001e3c7:	89 c3                	mov    ebx,eax
c001e3c9:	89 e8                	mov    eax,ebp
c001e3cb:	f7 f1                	div    ecx
c001e3cd:	89 da                	mov    edx,ebx
c001e3cf:	83 c4 1c             	add    esp,0x1c
c001e3d2:	5b                   	pop    ebx
c001e3d3:	5e                   	pop    esi
c001e3d4:	5f                   	pop    edi
c001e3d5:	5d                   	pop    ebp
c001e3d6:	c3                   	ret    
c001e3d7:	90                   	nop
c001e3d8:	39 f2                	cmp    edx,esi
c001e3da:	77 1c                	ja     c001e3f8 <__udivdi3+0x7c>
c001e3dc:	0f bd da             	bsr    ebx,edx
c001e3df:	83 f3 1f             	xor    ebx,0x1f
c001e3e2:	75 24                	jne    c001e408 <__udivdi3+0x8c>
c001e3e4:	39 f2                	cmp    edx,esi
c001e3e6:	72 08                	jb     c001e3f0 <__udivdi3+0x74>
c001e3e8:	39 ef                	cmp    edi,ebp
c001e3ea:	0f 87 84 00 00 00    	ja     c001e474 <__udivdi3+0xf8>
c001e3f0:	b8 01 00 00 00       	mov    eax,0x1
c001e3f5:	eb ac                	jmp    c001e3a3 <__udivdi3+0x27>
c001e3f7:	90                   	nop
c001e3f8:	31 db                	xor    ebx,ebx
c001e3fa:	31 c0                	xor    eax,eax
c001e3fc:	89 da                	mov    edx,ebx
c001e3fe:	83 c4 1c             	add    esp,0x1c
c001e401:	5b                   	pop    ebx
c001e402:	5e                   	pop    esi
c001e403:	5f                   	pop    edi
c001e404:	5d                   	pop    ebp
c001e405:	c3                   	ret    
c001e406:	66 90                	xchg   ax,ax
c001e408:	b8 20 00 00 00       	mov    eax,0x20
c001e40d:	29 d8                	sub    eax,ebx
c001e40f:	88 d9                	mov    cl,bl
c001e411:	d3 e2                	shl    edx,cl
c001e413:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e417:	89 fa                	mov    edx,edi
c001e419:	88 c1                	mov    cl,al
c001e41b:	d3 ea                	shr    edx,cl
c001e41d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e421:	09 d1                	or     ecx,edx
c001e423:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e427:	88 d9                	mov    cl,bl
c001e429:	d3 e7                	shl    edi,cl
c001e42b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e42f:	89 f7                	mov    edi,esi
c001e431:	88 c1                	mov    cl,al
c001e433:	d3 ef                	shr    edi,cl
c001e435:	88 d9                	mov    cl,bl
c001e437:	d3 e6                	shl    esi,cl
c001e439:	89 ea                	mov    edx,ebp
c001e43b:	88 c1                	mov    cl,al
c001e43d:	d3 ea                	shr    edx,cl
c001e43f:	09 d6                	or     esi,edx
c001e441:	89 f0                	mov    eax,esi
c001e443:	89 fa                	mov    edx,edi
c001e445:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e449:	89 d7                	mov    edi,edx
c001e44b:	89 c6                	mov    esi,eax
c001e44d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e451:	39 d7                	cmp    edi,edx
c001e453:	72 13                	jb     c001e468 <__udivdi3+0xec>
c001e455:	74 09                	je     c001e460 <__udivdi3+0xe4>
c001e457:	89 f0                	mov    eax,esi
c001e459:	31 db                	xor    ebx,ebx
c001e45b:	e9 43 ff ff ff       	jmp    c001e3a3 <__udivdi3+0x27>
c001e460:	88 d9                	mov    cl,bl
c001e462:	d3 e5                	shl    ebp,cl
c001e464:	39 c5                	cmp    ebp,eax
c001e466:	73 ef                	jae    c001e457 <__udivdi3+0xdb>
c001e468:	8d 46 ff             	lea    eax,[esi-0x1]
c001e46b:	31 db                	xor    ebx,ebx
c001e46d:	e9 31 ff ff ff       	jmp    c001e3a3 <__udivdi3+0x27>
c001e472:	66 90                	xchg   ax,ax
c001e474:	31 c0                	xor    eax,eax
c001e476:	e9 28 ff ff ff       	jmp    c001e3a3 <__udivdi3+0x27>
c001e47b:	90                   	nop

c001e47c <__umoddi3>:
c001e47c:	55                   	push   ebp
c001e47d:	57                   	push   edi
c001e47e:	56                   	push   esi
c001e47f:	53                   	push   ebx
c001e480:	83 ec 1c             	sub    esp,0x1c
c001e483:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e487:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e48b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e48f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e493:	89 da                	mov    edx,ebx
c001e495:	85 c0                	test   eax,eax
c001e497:	75 37                	jne    c001e4d0 <__umoddi3+0x54>
c001e499:	39 df                	cmp    edi,ebx
c001e49b:	76 13                	jbe    c001e4b0 <__umoddi3+0x34>
c001e49d:	89 f0                	mov    eax,esi
c001e49f:	f7 f7                	div    edi
c001e4a1:	89 d0                	mov    eax,edx
c001e4a3:	31 d2                	xor    edx,edx
c001e4a5:	83 c4 1c             	add    esp,0x1c
c001e4a8:	5b                   	pop    ebx
c001e4a9:	5e                   	pop    esi
c001e4aa:	5f                   	pop    edi
c001e4ab:	5d                   	pop    ebp
c001e4ac:	c3                   	ret    
c001e4ad:	8d 76 00             	lea    esi,[esi+0x0]
c001e4b0:	89 fd                	mov    ebp,edi
c001e4b2:	85 ff                	test   edi,edi
c001e4b4:	75 0b                	jne    c001e4c1 <__umoddi3+0x45>
c001e4b6:	b8 01 00 00 00       	mov    eax,0x1
c001e4bb:	31 d2                	xor    edx,edx
c001e4bd:	f7 f7                	div    edi
c001e4bf:	89 c5                	mov    ebp,eax
c001e4c1:	89 d8                	mov    eax,ebx
c001e4c3:	31 d2                	xor    edx,edx
c001e4c5:	f7 f5                	div    ebp
c001e4c7:	89 f0                	mov    eax,esi
c001e4c9:	f7 f5                	div    ebp
c001e4cb:	89 d0                	mov    eax,edx
c001e4cd:	eb d4                	jmp    c001e4a3 <__umoddi3+0x27>
c001e4cf:	90                   	nop
c001e4d0:	89 f1                	mov    ecx,esi
c001e4d2:	39 d8                	cmp    eax,ebx
c001e4d4:	76 0a                	jbe    c001e4e0 <__umoddi3+0x64>
c001e4d6:	89 f0                	mov    eax,esi
c001e4d8:	83 c4 1c             	add    esp,0x1c
c001e4db:	5b                   	pop    ebx
c001e4dc:	5e                   	pop    esi
c001e4dd:	5f                   	pop    edi
c001e4de:	5d                   	pop    ebp
c001e4df:	c3                   	ret    
c001e4e0:	0f bd e8             	bsr    ebp,eax
c001e4e3:	83 f5 1f             	xor    ebp,0x1f
c001e4e6:	75 1c                	jne    c001e504 <__umoddi3+0x88>
c001e4e8:	39 d8                	cmp    eax,ebx
c001e4ea:	72 04                	jb     c001e4f0 <__umoddi3+0x74>
c001e4ec:	39 f7                	cmp    edi,esi
c001e4ee:	77 08                	ja     c001e4f8 <__umoddi3+0x7c>
c001e4f0:	89 da                	mov    edx,ebx
c001e4f2:	29 fe                	sub    esi,edi
c001e4f4:	19 c2                	sbb    edx,eax
c001e4f6:	89 f1                	mov    ecx,esi
c001e4f8:	89 c8                	mov    eax,ecx
c001e4fa:	83 c4 1c             	add    esp,0x1c
c001e4fd:	5b                   	pop    ebx
c001e4fe:	5e                   	pop    esi
c001e4ff:	5f                   	pop    edi
c001e500:	5d                   	pop    ebp
c001e501:	c3                   	ret    
c001e502:	66 90                	xchg   ax,ax
c001e504:	ba 20 00 00 00       	mov    edx,0x20
c001e509:	29 ea                	sub    edx,ebp
c001e50b:	89 e9                	mov    ecx,ebp
c001e50d:	d3 e0                	shl    eax,cl
c001e50f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e513:	89 f8                	mov    eax,edi
c001e515:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e519:	88 d1                	mov    cl,dl
c001e51b:	d3 e8                	shr    eax,cl
c001e51d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e521:	09 c1                	or     ecx,eax
c001e523:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e527:	89 e9                	mov    ecx,ebp
c001e529:	d3 e7                	shl    edi,cl
c001e52b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e52f:	89 d8                	mov    eax,ebx
c001e531:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e535:	88 d1                	mov    cl,dl
c001e537:	d3 e8                	shr    eax,cl
c001e539:	89 c7                	mov    edi,eax
c001e53b:	89 e9                	mov    ecx,ebp
c001e53d:	d3 e3                	shl    ebx,cl
c001e53f:	89 f0                	mov    eax,esi
c001e541:	88 d1                	mov    cl,dl
c001e543:	d3 e8                	shr    eax,cl
c001e545:	09 d8                	or     eax,ebx
c001e547:	89 e9                	mov    ecx,ebp
c001e549:	d3 e6                	shl    esi,cl
c001e54b:	89 f3                	mov    ebx,esi
c001e54d:	89 fa                	mov    edx,edi
c001e54f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e553:	89 d1                	mov    ecx,edx
c001e555:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e559:	89 c6                	mov    esi,eax
c001e55b:	89 d7                	mov    edi,edx
c001e55d:	39 d1                	cmp    ecx,edx
c001e55f:	72 27                	jb     c001e588 <__umoddi3+0x10c>
c001e561:	74 21                	je     c001e584 <__umoddi3+0x108>
c001e563:	89 ca                	mov    edx,ecx
c001e565:	29 f3                	sub    ebx,esi
c001e567:	19 fa                	sbb    edx,edi
c001e569:	89 d0                	mov    eax,edx
c001e56b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e56f:	d3 e0                	shl    eax,cl
c001e571:	89 e9                	mov    ecx,ebp
c001e573:	d3 eb                	shr    ebx,cl
c001e575:	09 d8                	or     eax,ebx
c001e577:	d3 ea                	shr    edx,cl
c001e579:	83 c4 1c             	add    esp,0x1c
c001e57c:	5b                   	pop    ebx
c001e57d:	5e                   	pop    esi
c001e57e:	5f                   	pop    edi
c001e57f:	5d                   	pop    ebp
c001e580:	c3                   	ret    
c001e581:	8d 76 00             	lea    esi,[esi+0x0]
c001e584:	39 c3                	cmp    ebx,eax
c001e586:	73 db                	jae    c001e563 <__umoddi3+0xe7>
c001e588:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e58c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e590:	89 d7                	mov    edi,edx
c001e592:	89 c6                	mov    esi,eax
c001e594:	eb cd                	jmp    c001e563 <__umoddi3+0xe7>
c001e596:	66 90                	xchg   ax,ax
c001e598:	66 90                	xchg   ax,ax
c001e59a:	66 90                	xchg   ax,ax
c001e59c:	66 90                	xchg   ax,ax
c001e59e:	66 90                	xchg   ax,ax

c001e5a0 <fabs>:
c001e5a0:	83 ec 0c             	sub    esp,0xc
c001e5a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5a7:	89 04 24             	mov    DWORD PTR [esp],eax
c001e5aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e5ae:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001e5b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e5b7:	dd 04 24             	fld    QWORD PTR [esp]
c001e5ba:	83 c4 0c             	add    esp,0xc
c001e5bd:	c3                   	ret    
c001e5be:	66 90                	xchg   ax,ax

c001e5c0 <lrint>:
c001e5c0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001e5c4:	83 ec 04             	sub    esp,0x4
c001e5c7:	db 1c 24             	fistp  DWORD PTR [esp]
c001e5ca:	58                   	pop    eax
c001e5cb:	c3                   	ret    

c001e5cc <lrintf>:
c001e5cc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001e5d0:	83 ec 04             	sub    esp,0x4
c001e5d3:	db 1c 24             	fistp  DWORD PTR [esp]
c001e5d6:	58                   	pop    eax
c001e5d7:	c3                   	ret    

Disassembly of section .init:

c001e5d8 <_init>:
c001e5d8:	55                   	push   ebp
c001e5d9:	89 e5                	mov    ebp,esp
c001e5db:	e8 38 1b fe ff       	call   c0000118 <frame_dummy>
c001e5e0:	e8 a3 fa ff ff       	call   c001e088 <__do_global_ctors_aux>
c001e5e5:	5d                   	pop    ebp
c001e5e6:	c3                   	ret    

Disassembly of section .fini:

c001e5e7 <_fini>:
c001e5e7:	55                   	push   ebp
c001e5e8:	89 e5                	mov    ebp,esp
c001e5ea:	e8 b9 1a fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001e5ef:	5d                   	pop    ebp
c001e5f0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e5f2 <Computer::~Computer()>:
c001e5f2:	83 ec 0c             	sub    esp,0xc
c001e5f5:	ba b8 ff 01 c0       	mov    edx,0xc001ffb8
c001e5fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5fe:	89 10                	mov    DWORD PTR [eax],edx
c001e600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e604:	83 ec 0c             	sub    esp,0xc
c001e607:	50                   	push   eax
c001e608:	e8 85 1a ff ff       	call   c0010092 <Device::~Device()>
c001e60d:	83 c4 10             	add    esp,0x10
c001e610:	90                   	nop
c001e611:	83 c4 0c             	add    esp,0xc
c001e614:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e616 <Computer::~Computer()>:
c001e616:	83 ec 0c             	sub    esp,0xc
c001e619:	83 ec 0c             	sub    esp,0xc
c001e61c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e620:	e8 cd ff ff ff       	call   c001e5f2 <Computer::~Computer()>
c001e625:	83 c4 10             	add    esp,0x10
c001e628:	83 ec 08             	sub    esp,0x8
c001e62b:	68 ec 01 00 00       	push   0x1ec
c001e630:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e634:	e8 cc 06 ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c001e639:	83 c4 10             	add    esp,0x10
c001e63c:	83 c4 0c             	add    esp,0xc
c001e63f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e640 <idleCommon()>:
c001e640:	83 ec 0c             	sub    esp,0xc
c001e643:	e8 92 91 ff ff       	call   c00177da <lockScheduler()>
c001e648:	e8 c1 94 ff ff       	call   c0017b0e <schedule()>
c001e64d:	83 c4 0c             	add    esp,0xc
c001e650:	e9 87 91 ff ff       	jmp    c00177dc <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001e655 <CPU::readCR3()>:
c001e655:	83 ec 10             	sub    esp,0x10
c001e658:	0f 20 d8             	mov    eax,cr3
c001e65b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e65f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e663:	83 c4 10             	add    esp,0x10
c001e666:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001e667 <CPU::writeCR3(unsigned long)>:
c001e667:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e66b:	0f 22 d8             	mov    cr3,eax
c001e66e:	90                   	nop
c001e66f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e670 <LinkedList<UnixFile>::~LinkedList()>:
c001e670:	90                   	nop
c001e671:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e672 <LinkedList<UnixFile>::LinkedList()>:
c001e672:	83 ec 0c             	sub    esp,0xc
c001e675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e679:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e67f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e683:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e68a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e68e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e699:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e69f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e6aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6ae:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e6b5:	83 ec 0c             	sub    esp,0xc
c001e6b8:	68 e8 01 02 c0       	push   0xc00201e8
c001e6bd:	e8 23 07 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001e6c2:	83 c4 10             	add    esp,0x10
c001e6c5:	90                   	nop
c001e6c6:	83 c4 0c             	add    esp,0xc
c001e6c9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e6ca <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e6ca:	83 ec 0c             	sub    esp,0xc
c001e6cd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e6d2:	75 10                	jne    c001e6e4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e6d4:	83 ec 0c             	sub    esp,0xc
c001e6d7:	68 04 02 02 c0       	push   0xc0020204
c001e6dc:	e8 99 63 ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c001e6e1:	83 c4 10             	add    esp,0x10
c001e6e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6e8:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6ea:	85 c0                	test   eax,eax
c001e6ec:	74 34                	je     c001e722 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e6ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e6f5:	85 c0                	test   eax,eax
c001e6f7:	74 29                	je     c001e722 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e6f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6fd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e700:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e704:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e70b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e70f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e716:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e719:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e720:	eb 65                	jmp    c001e787 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e726:	8b 00                	mov    eax,DWORD PTR [eax]
c001e728:	85 c0                	test   eax,eax
c001e72a:	75 4b                	jne    c001e777 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e72c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e730:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e733:	85 c0                	test   eax,eax
c001e735:	75 40                	jne    c001e777 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e73b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e73f:	89 10                	mov    DWORD PTR [eax],edx
c001e741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e745:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e749:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e74c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e750:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e753:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e75a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e75e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e761:	85 c0                	test   eax,eax
c001e763:	74 22                	je     c001e787 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e765:	83 ec 0c             	sub    esp,0xc
c001e768:	68 26 02 02 c0       	push   0xc0020226
c001e76d:	e8 08 63 ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c001e772:	83 c4 10             	add    esp,0x10
c001e775:	eb 10                	jmp    c001e787 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e777:	83 ec 0c             	sub    esp,0xc
c001e77a:	68 30 02 02 c0       	push   0xc0020230
c001e77f:	e8 f6 62 ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c001e784:	83 c4 10             	add    esp,0x10
c001e787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e78b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e78e:	8d 50 01             	lea    edx,[eax+0x1]
c001e791:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e795:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e798:	90                   	nop
c001e799:	83 c4 0c             	add    esp,0xc
c001e79c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e79e <LinkedList<UnixFile>::getFirstElement()>:
c001e79e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7a2:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7a4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e7a6 <LinkedList<UnixFile>::removeFirst()>:
c001e7a6:	83 ec 0c             	sub    esp,0xc
c001e7a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7ad:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7af:	85 c0                	test   eax,eax
c001e7b1:	75 12                	jne    c001e7c5 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001e7b3:	83 ec 0c             	sub    esp,0xc
c001e7b6:	68 3c 02 02 c0       	push   0xc002023c
c001e7bb:	e8 ba 62 ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c001e7c0:	83 c4 10             	add    esp,0x10
c001e7c3:	eb 7e                	jmp    c001e843 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001e7c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e7cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e7cf:	85 c0                	test   eax,eax
c001e7d1:	74 10                	je     c001e7e3 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001e7d3:	83 ec 0c             	sub    esp,0xc
c001e7d6:	68 87 02 02 c0       	push   0xc0020287
c001e7db:	e8 9a 62 ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c001e7e0:	83 c4 10             	add    esp,0x10
c001e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7e7:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7e9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e7ec:	85 c0                	test   eax,eax
c001e7ee:	75 33                	jne    c001e823 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7f4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7fe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e809:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e80c:	83 f8 01             	cmp    eax,0x1
c001e80f:	74 21                	je     c001e832 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e811:	83 ec 0c             	sub    esp,0xc
c001e814:	68 60 02 02 c0       	push   0xc0020260
c001e819:	e8 5c 62 ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c001e81e:	83 c4 10             	add    esp,0x10
c001e821:	eb 0f                	jmp    c001e832 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e827:	8b 00                	mov    eax,DWORD PTR [eax]
c001e829:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e830:	89 10                	mov    DWORD PTR [eax],edx
c001e832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e836:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e839:	8d 50 ff             	lea    edx,[eax-0x1]
c001e83c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e840:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e843:	83 c4 0c             	add    esp,0xc
c001e846:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001e848 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001e848:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e84c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e84f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001e850 <DriverlessDevice::~DriverlessDevice()>:
c001e850:	ba a4 09 02 c0       	mov    edx,0xc00209a4
c001e855:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e859:	89 10                	mov    DWORD PTR [eax],edx
c001e85b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e85f:	50                   	push   eax
c001e860:	e8 2d 18 ff ff       	call   c0010092 <Device::~Device()>
c001e865:	83 c4 04             	add    esp,0x4
c001e868:	90                   	nop
c001e869:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001e86a <DriverlessDevice::~DriverlessDevice()>:
c001e86a:	83 ec 0c             	sub    esp,0xc
c001e86d:	83 ec 0c             	sub    esp,0xc
c001e870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e874:	e8 d7 ff ff ff       	call   c001e850 <DriverlessDevice::~DriverlessDevice()>
c001e879:	83 c4 10             	add    esp,0x10
c001e87c:	83 ec 08             	sub    esp,0x8
c001e87f:	68 58 01 00 00       	push   0x158
c001e884:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e888:	e8 78 04 ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c001e88d:	83 c4 10             	add    esp,0x10
c001e890:	83 c4 0c             	add    esp,0xc
c001e893:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001e894 <LinkedList<Device>::addElement(Device*)>:
c001e894:	83 ec 0c             	sub    esp,0xc
c001e897:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e89c:	75 10                	jne    c001e8ae <LinkedList<Device>::addElement(Device*)+0x1a>
c001e89e:	83 ec 0c             	sub    esp,0xc
c001e8a1:	68 04 02 02 c0       	push   0xc0020204
c001e8a6:	e8 cf 61 ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c001e8ab:	83 c4 10             	add    esp,0x10
c001e8ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8b2:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8b4:	85 c0                	test   eax,eax
c001e8b6:	74 3a                	je     c001e8f2 <LinkedList<Device>::addElement(Device*)+0x5e>
c001e8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8bf:	85 c0                	test   eax,eax
c001e8c1:	74 2f                	je     c001e8f2 <LinkedList<Device>::addElement(Device*)+0x5e>
c001e8c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8ce:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001e8d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8dc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e8df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8e3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8e6:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e8f0:	eb 68                	jmp    c001e95a <LinkedList<Device>::addElement(Device*)+0xc6>
c001e8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8f6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8f8:	85 c0                	test   eax,eax
c001e8fa:	75 4e                	jne    c001e94a <LinkedList<Device>::addElement(Device*)+0xb6>
c001e8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e900:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e903:	85 c0                	test   eax,eax
c001e905:	75 43                	jne    c001e94a <LinkedList<Device>::addElement(Device*)+0xb6>
c001e907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e90b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e90f:	89 10                	mov    DWORD PTR [eax],edx
c001e911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e915:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e919:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e91c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e920:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e923:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e92d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e931:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e934:	85 c0                	test   eax,eax
c001e936:	74 22                	je     c001e95a <LinkedList<Device>::addElement(Device*)+0xc6>
c001e938:	83 ec 0c             	sub    esp,0xc
c001e93b:	68 26 02 02 c0       	push   0xc0020226
c001e940:	e8 35 61 ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c001e945:	83 c4 10             	add    esp,0x10
c001e948:	eb 10                	jmp    c001e95a <LinkedList<Device>::addElement(Device*)+0xc6>
c001e94a:	83 ec 0c             	sub    esp,0xc
c001e94d:	68 30 02 02 c0       	push   0xc0020230
c001e952:	e8 23 61 ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c001e957:	83 c4 10             	add    esp,0x10
c001e95a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e95e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e961:	8d 50 01             	lea    edx,[eax+0x1]
c001e964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e968:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e96b:	90                   	nop
c001e96c:	83 c4 0c             	add    esp,0xc
c001e96f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001e970 <LinkedList<Device>::LinkedList()>:
c001e970:	83 ec 0c             	sub    esp,0xc
c001e973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e977:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e97d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e981:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e98c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e997:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e99d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e9a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e9b3:	83 ec 0c             	sub    esp,0xc
c001e9b6:	68 e8 01 02 c0       	push   0xc00201e8
c001e9bb:	e8 25 04 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001e9c0:	83 c4 10             	add    esp,0x10
c001e9c3:	90                   	nop
c001e9c4:	83 c4 0c             	add    esp,0xc
c001e9c7:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001e9c8 <CPU::readCR0()>:
c001e9c8:	83 ec 10             	sub    esp,0x10
c001e9cb:	0f 20 c0             	mov    eax,cr0
c001e9ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9d6:	83 c4 10             	add    esp,0x10
c001e9d9:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001e9da <CPU::writeCR0(unsigned long)>:
c001e9da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9de:	0f 22 c0             	mov    cr0,eax
c001e9e1:	90                   	nop
c001e9e2:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001e9e3 <CPU::readDR0()>:
c001e9e3:	83 ec 10             	sub    esp,0x10
c001e9e6:	0f 21 c0             	mov    eax,db0
c001e9e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9f1:	83 c4 10             	add    esp,0x10
c001e9f4:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001e9f5 <CPU::readDR1()>:
c001e9f5:	83 ec 10             	sub    esp,0x10
c001e9f8:	0f 21 c8             	mov    eax,db1
c001e9fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea03:	83 c4 10             	add    esp,0x10
c001ea06:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001ea07 <CPU::readDR2()>:
c001ea07:	83 ec 10             	sub    esp,0x10
c001ea0a:	0f 21 d0             	mov    eax,db2
c001ea0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea15:	83 c4 10             	add    esp,0x10
c001ea18:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001ea19 <CPU::readDR3()>:
c001ea19:	83 ec 10             	sub    esp,0x10
c001ea1c:	0f 21 d8             	mov    eax,db3
c001ea1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea27:	83 c4 10             	add    esp,0x10
c001ea2a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001ea2b <CPU::readDR6()>:
c001ea2b:	83 ec 10             	sub    esp,0x10
c001ea2e:	0f 21 f0             	mov    eax,db6
c001ea31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea39:	83 c4 10             	add    esp,0x10
c001ea3c:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001ea3d <CPU::readDR7()>:
c001ea3d:	83 ec 10             	sub    esp,0x10
c001ea40:	0f 21 f8             	mov    eax,db7
c001ea43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea4b:	83 c4 10             	add    esp,0x10
c001ea4e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ea50 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ea50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea54:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea56:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001ea58 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001ea58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea5e:	85 c0                	test   eax,eax
c001ea60:	75 0e                	jne    c001ea70 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ea62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea69:	85 c0                	test   eax,eax
c001ea6b:	75 03                	jne    c001ea70 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ea6d:	b0 01                	mov    al,0x1
c001ea6f:	c3                   	ret    
c001ea70:	b0 00                	mov    al,0x0
c001ea72:	90                   	nop
c001ea73:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001ea74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001ea74:	83 ec 0c             	sub    esp,0xc
c001ea77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea7b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea7d:	85 c0                	test   eax,eax
c001ea7f:	75 15                	jne    c001ea96 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001ea81:	83 ec 0c             	sub    esp,0xc
c001ea84:	68 3c 02 02 c0       	push   0xc002023c
c001ea89:	e8 ec 5f ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c001ea8e:	83 c4 10             	add    esp,0x10
c001ea91:	e9 88 00 00 00       	jmp    c001eb1e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001ea96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea9d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eaa0:	85 c0                	test   eax,eax
c001eaa2:	0f 95 c0             	setne  al
c001eaa5:	84 c0                	test   al,al
c001eaa7:	74 10                	je     c001eab9 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001eaa9:	83 ec 0c             	sub    esp,0xc
c001eaac:	68 87 02 02 c0       	push   0xc0020287
c001eab1:	e8 c4 5f ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c001eab6:	83 c4 10             	add    esp,0x10
c001eab9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eabd:	8b 00                	mov    eax,DWORD PTR [eax]
c001eabf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eac2:	85 c0                	test   eax,eax
c001eac4:	0f 94 c0             	sete   al
c001eac7:	84 c0                	test   al,al
c001eac9:	74 33                	je     c001eafe <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001eacb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eacf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ead5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ead9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eae4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eae7:	83 f8 01             	cmp    eax,0x1
c001eaea:	74 21                	je     c001eb0d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001eaec:	83 ec 0c             	sub    esp,0xc
c001eaef:	68 60 02 02 c0       	push   0xc0020260
c001eaf4:	e8 81 5f ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c001eaf9:	83 c4 10             	add    esp,0x10
c001eafc:	eb 0f                	jmp    c001eb0d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001eafe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb02:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb04:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001eb07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb0b:	89 10                	mov    DWORD PTR [eax],edx
c001eb0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb11:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb14:	8d 50 ff             	lea    edx,[eax-0x1]
c001eb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb1b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb1e:	83 c4 0c             	add    esp,0xc
c001eb21:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001eb22 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001eb22:	83 ec 0c             	sub    esp,0xc
c001eb25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eb2a:	75 10                	jne    c001eb3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001eb2c:	83 ec 0c             	sub    esp,0xc
c001eb2f:	68 04 02 02 c0       	push   0xc0020204
c001eb34:	e8 41 5f ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c001eb39:	83 c4 10             	add    esp,0x10
c001eb3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb40:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb42:	85 c0                	test   eax,eax
c001eb44:	74 34                	je     c001eb7a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001eb46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb4d:	85 c0                	test   eax,eax
c001eb4f:	74 29                	je     c001eb7a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001eb51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb55:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb5c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001eb5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb67:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb71:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eb78:	eb 65                	jmp    c001ebdf <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001eb7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb7e:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb80:	85 c0                	test   eax,eax
c001eb82:	75 4b                	jne    c001ebcf <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001eb84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb8b:	85 c0                	test   eax,eax
c001eb8d:	75 40                	jne    c001ebcf <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001eb8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb97:	89 10                	mov    DWORD PTR [eax],edx
c001eb99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb9d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eba1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eba8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ebab:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ebb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebb6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebb9:	85 c0                	test   eax,eax
c001ebbb:	74 22                	je     c001ebdf <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001ebbd:	83 ec 0c             	sub    esp,0xc
c001ebc0:	68 26 02 02 c0       	push   0xc0020226
c001ebc5:	e8 b0 5e ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c001ebca:	83 c4 10             	add    esp,0x10
c001ebcd:	eb 10                	jmp    c001ebdf <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001ebcf:	83 ec 0c             	sub    esp,0xc
c001ebd2:	68 30 02 02 c0       	push   0xc0020230
c001ebd7:	e8 9e 5e ff ff       	call   c0014a7a <Krnl::panic(char const*)>
c001ebdc:	83 c4 10             	add    esp,0x10
c001ebdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebe3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebe6:	8d 50 01             	lea    edx,[eax+0x1]
c001ebe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebed:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ebf0:	90                   	nop
c001ebf1:	83 c4 0c             	add    esp,0xc
c001ebf4:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ebf6 <ACPI::~ACPI()>:
c001ebf6:	83 ec 0c             	sub    esp,0xc
c001ebf9:	ba 30 11 02 c0       	mov    edx,0xc0021130
c001ebfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec02:	89 10                	mov    DWORD PTR [eax],edx
c001ec04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec08:	83 ec 0c             	sub    esp,0xc
c001ec0b:	50                   	push   eax
c001ec0c:	e8 81 14 ff ff       	call   c0010092 <Device::~Device()>
c001ec11:	83 c4 10             	add    esp,0x10
c001ec14:	90                   	nop
c001ec15:	83 c4 0c             	add    esp,0xc
c001ec18:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ec1a <ACPI::~ACPI()>:
c001ec1a:	83 ec 0c             	sub    esp,0xc
c001ec1d:	83 ec 0c             	sub    esp,0xc
c001ec20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec24:	e8 cd ff ff ff       	call   c001ebf6 <ACPI::~ACPI()>
c001ec29:	83 c4 10             	add    esp,0x10
c001ec2c:	83 ec 08             	sub    esp,0x8
c001ec2f:	68 68 22 00 00       	push   0x2268
c001ec34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec38:	e8 c8 00 ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c001ec3d:	83 c4 10             	add    esp,0x10
c001ec40:	83 c4 0c             	add    esp,0xc
c001ec43:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ec44 <CPU::~CPU()>:
c001ec44:	83 ec 0c             	sub    esp,0xc
c001ec47:	ba 80 13 02 c0       	mov    edx,0xc0021380
c001ec4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec50:	89 10                	mov    DWORD PTR [eax],edx
c001ec52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec56:	83 ec 0c             	sub    esp,0xc
c001ec59:	50                   	push   eax
c001ec5a:	e8 33 14 ff ff       	call   c0010092 <Device::~Device()>
c001ec5f:	83 c4 10             	add    esp,0x10
c001ec62:	90                   	nop
c001ec63:	83 c4 0c             	add    esp,0xc
c001ec66:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ec68 <CPU::~CPU()>:
c001ec68:	83 ec 0c             	sub    esp,0xc
c001ec6b:	83 ec 0c             	sub    esp,0xc
c001ec6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec72:	e8 cd ff ff ff       	call   c001ec44 <CPU::~CPU()>
c001ec77:	83 c4 10             	add    esp,0x10
c001ec7a:	83 ec 08             	sub    esp,0x8
c001ec7d:	68 98 11 00 00       	push   0x1198
c001ec82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec86:	e8 7a 00 ff ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c001ec8b:	83 c4 10             	add    esp,0x10
c001ec8e:	83 c4 0c             	add    esp,0xc
c001ec91:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001ec92 <CPU::readCR4()>:
c001ec92:	83 ec 10             	sub    esp,0x10
c001ec95:	0f 20 e0             	mov    eax,cr4
c001ec98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ec9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eca0:	83 c4 10             	add    esp,0x10
c001eca3:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001eca4 <CPU::writeDR7(unsigned long)>:
c001eca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eca8:	0f 23 f8             	mov    db7,eax
c001ecab:	90                   	nop
c001ecac:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001ecad <CPU::writeCR4(unsigned long)>:
c001ecad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecb1:	0f 22 e0             	mov    cr4,eax
c001ecb4:	90                   	nop
c001ecb5:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001ecb6 <CPU::readCR2()>:
c001ecb6:	83 ec 10             	sub    esp,0x10
c001ecb9:	0f 20 d0             	mov    eax,cr2
c001ecbc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ecc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ecc4:	83 c4 10             	add    esp,0x10
c001ecc7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ecc8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ecc8:	90                   	nop
c001ecc9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ecca <ThreadControlBlock::ThreadControlBlock()>:
c001ecca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecce:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ecd5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecd9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ece0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ece4:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001eceb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecef:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001ecf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecfa:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ecfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed02:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001ed06:	90                   	nop
c001ed07:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ed08 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ed08:	83 ec 0c             	sub    esp,0xc
c001ed0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed0f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ed15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed19:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ed20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed24:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ed2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed2f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ed35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed39:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ed40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed44:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ed4b:	83 ec 0c             	sub    esp,0xc
c001ed4e:	68 e8 01 02 c0       	push   0xc00201e8
c001ed53:	e8 8d 00 ff ff       	call   c000ede5 <Dbg::kprintf(char const*, ...)>
c001ed58:	83 c4 10             	add    esp,0x10
c001ed5b:	90                   	nop
c001ed5c:	83 c4 0c             	add    esp,0xc
c001ed5f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ed60 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ed60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed64:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ed67:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001ed68 <PCI::~PCI()>:
c001ed68:	83 ec 0c             	sub    esp,0xc
c001ed6b:	ba a0 1f 02 c0       	mov    edx,0xc0021fa0
c001ed70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed74:	89 10                	mov    DWORD PTR [eax],edx
c001ed76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed7a:	83 ec 0c             	sub    esp,0xc
c001ed7d:	50                   	push   eax
c001ed7e:	e8 1f 0d ff ff       	call   c000faa2 <Bus::~Bus()>
c001ed83:	83 c4 10             	add    esp,0x10
c001ed86:	90                   	nop
c001ed87:	83 c4 0c             	add    esp,0xc
c001ed8a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ed8c <PCI::~PCI()>:
c001ed8c:	83 ec 0c             	sub    esp,0xc
c001ed8f:	83 ec 0c             	sub    esp,0xc
c001ed92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed96:	e8 cd ff ff ff       	call   c001ed68 <PCI::~PCI()>
c001ed9b:	83 c4 10             	add    esp,0x10
c001ed9e:	83 ec 08             	sub    esp,0x8
c001eda1:	68 58 01 00 00       	push   0x158
c001eda6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edaa:	e8 56 ff fe ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c001edaf:	83 c4 10             	add    esp,0x10
c001edb2:	83 c4 0c             	add    esp,0xc
c001edb5:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001edb6 <IDE::~IDE()>:
c001edb6:	83 ec 0c             	sub    esp,0xc
c001edb9:	ba 04 22 02 c0       	mov    edx,0xc0022204
c001edbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edc2:	89 10                	mov    DWORD PTR [eax],edx
c001edc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edc8:	83 ec 0c             	sub    esp,0xc
c001edcb:	50                   	push   eax
c001edcc:	e8 d7 17 ff ff       	call   c00105a8 <HardDiskController::~HardDiskController()>
c001edd1:	83 c4 10             	add    esp,0x10
c001edd4:	90                   	nop
c001edd5:	83 c4 0c             	add    esp,0xc
c001edd8:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001edda <IDE::~IDE()>:
c001edda:	83 ec 0c             	sub    esp,0xc
c001eddd:	83 ec 0c             	sub    esp,0xc
c001ede0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ede4:	e8 cd ff ff ff       	call   c001edb6 <IDE::~IDE()>
c001ede9:	83 c4 10             	add    esp,0x10
c001edec:	83 ec 08             	sub    esp,0x8
c001edef:	68 70 02 00 00       	push   0x270
c001edf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edf8:	e8 08 ff fe ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c001edfd:	83 c4 10             	add    esp,0x10
c001ee00:	83 c4 0c             	add    esp,0xc
c001ee03:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001ee04 <ATA::~ATA()>:
c001ee04:	83 ec 0c             	sub    esp,0xc
c001ee07:	ba 54 22 02 c0       	mov    edx,0xc0022254
c001ee0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee10:	89 10                	mov    DWORD PTR [eax],edx
c001ee12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee16:	83 ec 0c             	sub    esp,0xc
c001ee19:	50                   	push   eax
c001ee1a:	e8 67 18 ff ff       	call   c0010686 <PhysicalDisk::~PhysicalDisk()>
c001ee1f:	83 c4 10             	add    esp,0x10
c001ee22:	90                   	nop
c001ee23:	83 c4 0c             	add    esp,0xc
c001ee26:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ee28 <ATA::~ATA()>:
c001ee28:	83 ec 0c             	sub    esp,0xc
c001ee2b:	83 ec 0c             	sub    esp,0xc
c001ee2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee32:	e8 cd ff ff ff       	call   c001ee04 <ATA::~ATA()>
c001ee37:	83 c4 10             	add    esp,0x10
c001ee3a:	83 ec 08             	sub    esp,0x8
c001ee3d:	68 7c 01 00 00       	push   0x17c
c001ee42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee46:	e8 ba fe fe ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c001ee4b:	83 c4 10             	add    esp,0x10
c001ee4e:	83 c4 0c             	add    esp,0xc
c001ee51:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ee52 <ATAPI::~ATAPI()>:
c001ee52:	83 ec 0c             	sub    esp,0xc
c001ee55:	ba c0 22 02 c0       	mov    edx,0xc00222c0
c001ee5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee5e:	89 10                	mov    DWORD PTR [eax],edx
c001ee60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee64:	83 ec 0c             	sub    esp,0xc
c001ee67:	50                   	push   eax
c001ee68:	e8 19 18 ff ff       	call   c0010686 <PhysicalDisk::~PhysicalDisk()>
c001ee6d:	83 c4 10             	add    esp,0x10
c001ee70:	90                   	nop
c001ee71:	83 c4 0c             	add    esp,0xc
c001ee74:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001ee76 <ATAPI::~ATAPI()>:
c001ee76:	83 ec 0c             	sub    esp,0xc
c001ee79:	83 ec 0c             	sub    esp,0xc
c001ee7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee80:	e8 cd ff ff ff       	call   c001ee52 <ATAPI::~ATAPI()>
c001ee85:	83 c4 10             	add    esp,0x10
c001ee88:	83 ec 08             	sub    esp,0x8
c001ee8b:	68 80 01 00 00       	push   0x180
c001ee90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee94:	e8 6c fe fe ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c001ee99:	83 c4 10             	add    esp,0x10
c001ee9c:	83 c4 0c             	add    esp,0xc
c001ee9f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001eea0 <AVX::~AVX()>:
c001eea0:	83 ec 0c             	sub    esp,0xc
c001eea3:	ba fc 22 02 c0       	mov    edx,0xc00222fc
c001eea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeac:	89 10                	mov    DWORD PTR [eax],edx
c001eeae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeb2:	83 ec 0c             	sub    esp,0xc
c001eeb5:	50                   	push   eax
c001eeb6:	e8 4f 18 ff ff       	call   c001070a <FPU::~FPU()>
c001eebb:	83 c4 10             	add    esp,0x10
c001eebe:	90                   	nop
c001eebf:	83 c4 0c             	add    esp,0xc
c001eec2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001eec4 <AVX::~AVX()>:
c001eec4:	83 ec 0c             	sub    esp,0xc
c001eec7:	83 ec 0c             	sub    esp,0xc
c001eeca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eece:	e8 cd ff ff ff       	call   c001eea0 <AVX::~AVX()>
c001eed3:	83 c4 10             	add    esp,0x10
c001eed6:	83 ec 08             	sub    esp,0x8
c001eed9:	68 58 01 00 00       	push   0x158
c001eede:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eee2:	e8 1e fe fe ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c001eee7:	83 c4 10             	add    esp,0x10
c001eeea:	83 c4 0c             	add    esp,0xc
c001eeed:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001eeee <MMX::~MMX()>:
c001eeee:	83 ec 0c             	sub    esp,0xc
c001eef1:	ba 3c 23 02 c0       	mov    edx,0xc002233c
c001eef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eefa:	89 10                	mov    DWORD PTR [eax],edx
c001eefc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef00:	83 ec 0c             	sub    esp,0xc
c001ef03:	50                   	push   eax
c001ef04:	e8 01 18 ff ff       	call   c001070a <FPU::~FPU()>
c001ef09:	83 c4 10             	add    esp,0x10
c001ef0c:	90                   	nop
c001ef0d:	83 c4 0c             	add    esp,0xc
c001ef10:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001ef12 <MMX::~MMX()>:
c001ef12:	83 ec 0c             	sub    esp,0xc
c001ef15:	83 ec 0c             	sub    esp,0xc
c001ef18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef1c:	e8 cd ff ff ff       	call   c001eeee <MMX::~MMX()>
c001ef21:	83 c4 10             	add    esp,0x10
c001ef24:	83 ec 08             	sub    esp,0x8
c001ef27:	68 58 01 00 00       	push   0x158
c001ef2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef30:	e8 d0 fd fe ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c001ef35:	83 c4 10             	add    esp,0x10
c001ef38:	83 c4 0c             	add    esp,0xc
c001ef3b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001ef3c <SSE::~SSE()>:
c001ef3c:	83 ec 0c             	sub    esp,0xc
c001ef3f:	ba 7c 23 02 c0       	mov    edx,0xc002237c
c001ef44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef48:	89 10                	mov    DWORD PTR [eax],edx
c001ef4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef4e:	83 ec 0c             	sub    esp,0xc
c001ef51:	50                   	push   eax
c001ef52:	e8 b3 17 ff ff       	call   c001070a <FPU::~FPU()>
c001ef57:	83 c4 10             	add    esp,0x10
c001ef5a:	90                   	nop
c001ef5b:	83 c4 0c             	add    esp,0xc
c001ef5e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001ef60 <SSE::~SSE()>:
c001ef60:	83 ec 0c             	sub    esp,0xc
c001ef63:	83 ec 0c             	sub    esp,0xc
c001ef66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef6a:	e8 cd ff ff ff       	call   c001ef3c <SSE::~SSE()>
c001ef6f:	83 c4 10             	add    esp,0x10
c001ef72:	83 ec 08             	sub    esp,0x8
c001ef75:	68 58 01 00 00       	push   0x158
c001ef7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef7e:	e8 82 fd fe ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c001ef83:	83 c4 10             	add    esp,0x10
c001ef86:	83 c4 0c             	add    esp,0xc
c001ef89:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001ef8a <x87::~x87()>:
c001ef8a:	83 ec 0c             	sub    esp,0xc
c001ef8d:	ba bc 23 02 c0       	mov    edx,0xc00223bc
c001ef92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef96:	89 10                	mov    DWORD PTR [eax],edx
c001ef98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef9c:	83 ec 0c             	sub    esp,0xc
c001ef9f:	50                   	push   eax
c001efa0:	e8 65 17 ff ff       	call   c001070a <FPU::~FPU()>
c001efa5:	83 c4 10             	add    esp,0x10
c001efa8:	90                   	nop
c001efa9:	83 c4 0c             	add    esp,0xc
c001efac:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001efae <x87::~x87()>:
c001efae:	83 ec 0c             	sub    esp,0xc
c001efb1:	83 ec 0c             	sub    esp,0xc
c001efb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efb8:	e8 cd ff ff ff       	call   c001ef8a <x87::~x87()>
c001efbd:	83 c4 10             	add    esp,0x10
c001efc0:	83 ec 08             	sub    esp,0x8
c001efc3:	68 58 01 00 00       	push   0x158
c001efc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efcc:	e8 34 fd fe ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c001efd1:	83 c4 10             	add    esp,0x10
c001efd4:	83 c4 0c             	add    esp,0xc
c001efd7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001efd8 <IOAPIC::~IOAPIC()>:
c001efd8:	83 ec 0c             	sub    esp,0xc
c001efdb:	ba 14 25 02 c0       	mov    edx,0xc0022514
c001efe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe4:	89 10                	mov    DWORD PTR [eax],edx
c001efe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efea:	83 ec 0c             	sub    esp,0xc
c001efed:	50                   	push   eax
c001efee:	e8 9f 10 ff ff       	call   c0010092 <Device::~Device()>
c001eff3:	83 c4 10             	add    esp,0x10
c001eff6:	90                   	nop
c001eff7:	83 c4 0c             	add    esp,0xc
c001effa:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001effc <IOAPIC::~IOAPIC()>:
c001effc:	83 ec 0c             	sub    esp,0xc
c001efff:	83 ec 0c             	sub    esp,0xc
c001f002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f006:	e8 cd ff ff ff       	call   c001efd8 <IOAPIC::~IOAPIC()>
c001f00b:	83 c4 10             	add    esp,0x10
c001f00e:	83 ec 08             	sub    esp,0x8
c001f011:	68 68 01 00 00       	push   0x168
c001f016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f01a:	e8 e6 fc fe ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c001f01f:	83 c4 10             	add    esp,0x10
c001f022:	83 c4 0c             	add    esp,0xc
c001f025:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001f026 <APIC::~APIC()>:
c001f026:	83 ec 0c             	sub    esp,0xc
c001f029:	ba cc 24 02 c0       	mov    edx,0xc00224cc
c001f02e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f032:	89 10                	mov    DWORD PTR [eax],edx
c001f034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f038:	83 ec 0c             	sub    esp,0xc
c001f03b:	50                   	push   eax
c001f03c:	e8 87 1b ff ff       	call   c0010bc8 <InterruptController::~InterruptController()>
c001f041:	83 c4 10             	add    esp,0x10
c001f044:	90                   	nop
c001f045:	83 c4 0c             	add    esp,0xc
c001f048:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001f04a <APIC::~APIC()>:
c001f04a:	83 ec 0c             	sub    esp,0xc
c001f04d:	83 ec 0c             	sub    esp,0xc
c001f050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f054:	e8 cd ff ff ff       	call   c001f026 <APIC::~APIC()>
c001f059:	83 c4 10             	add    esp,0x10
c001f05c:	83 ec 08             	sub    esp,0x8
c001f05f:	68 58 21 00 00       	push   0x2158
c001f064:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f068:	e8 98 fc fe ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c001f06d:	83 c4 10             	add    esp,0x10
c001f070:	83 c4 0c             	add    esp,0xc
c001f073:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001f074 <PIC::~PIC()>:
c001f074:	83 ec 0c             	sub    esp,0xc
c001f077:	ba 64 25 02 c0       	mov    edx,0xc0022564
c001f07c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f080:	89 10                	mov    DWORD PTR [eax],edx
c001f082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f086:	83 ec 0c             	sub    esp,0xc
c001f089:	50                   	push   eax
c001f08a:	e8 39 1b ff ff       	call   c0010bc8 <InterruptController::~InterruptController()>
c001f08f:	83 c4 10             	add    esp,0x10
c001f092:	90                   	nop
c001f093:	83 c4 0c             	add    esp,0xc
c001f096:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001f098 <PIC::~PIC()>:
c001f098:	83 ec 0c             	sub    esp,0xc
c001f09b:	83 ec 0c             	sub    esp,0xc
c001f09e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0a2:	e8 cd ff ff ff       	call   c001f074 <PIC::~PIC()>
c001f0a7:	83 c4 10             	add    esp,0x10
c001f0aa:	83 ec 08             	sub    esp,0x8
c001f0ad:	68 58 21 00 00       	push   0x2158
c001f0b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0b6:	e8 4a fc fe ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c001f0bb:	83 c4 10             	add    esp,0x10
c001f0be:	83 c4 0c             	add    esp,0xc
c001f0c1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f0c2 <APICTimer::~APICTimer()>:
c001f0c2:	83 ec 0c             	sub    esp,0xc
c001f0c5:	ba b8 25 02 c0       	mov    edx,0xc00225b8
c001f0ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ce:	89 10                	mov    DWORD PTR [eax],edx
c001f0d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0d4:	83 ec 0c             	sub    esp,0xc
c001f0d7:	50                   	push   eax
c001f0d8:	e8 57 31 ff ff       	call   c0012234 <Timer::~Timer()>
c001f0dd:	83 c4 10             	add    esp,0x10
c001f0e0:	90                   	nop
c001f0e1:	83 c4 0c             	add    esp,0xc
c001f0e4:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f0e6 <APICTimer::~APICTimer()>:
c001f0e6:	83 ec 0c             	sub    esp,0xc
c001f0e9:	83 ec 0c             	sub    esp,0xc
c001f0ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0f0:	e8 cd ff ff ff       	call   c001f0c2 <APICTimer::~APICTimer()>
c001f0f5:	83 c4 10             	add    esp,0x10
c001f0f8:	83 ec 08             	sub    esp,0x8
c001f0fb:	68 60 01 00 00       	push   0x160
c001f100:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f104:	e8 fc fb fe ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c001f109:	83 c4 10             	add    esp,0x10
c001f10c:	83 c4 0c             	add    esp,0xc
c001f10f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f110 <PIT::~PIT()>:
c001f110:	83 ec 0c             	sub    esp,0xc
c001f113:	ba 08 26 02 c0       	mov    edx,0xc0022608
c001f118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f11c:	89 10                	mov    DWORD PTR [eax],edx
c001f11e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f122:	83 ec 0c             	sub    esp,0xc
c001f125:	50                   	push   eax
c001f126:	e8 09 31 ff ff       	call   c0012234 <Timer::~Timer()>
c001f12b:	83 c4 10             	add    esp,0x10
c001f12e:	90                   	nop
c001f12f:	83 c4 0c             	add    esp,0xc
c001f132:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f134 <PIT::~PIT()>:
c001f134:	83 ec 0c             	sub    esp,0xc
c001f137:	83 ec 0c             	sub    esp,0xc
c001f13a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f13e:	e8 cd ff ff ff       	call   c001f110 <PIT::~PIT()>
c001f143:	83 c4 10             	add    esp,0x10
c001f146:	83 ec 08             	sub    esp,0x8
c001f149:	68 5c 01 00 00       	push   0x15c
c001f14e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f152:	e8 ae fb fe ff       	call   c000ed05 <operator delete(void*, unsigned long)>
c001f157:	83 c4 10             	add    esp,0x10
c001f15a:	83 c4 0c             	add    esp,0xc
c001f15d:	c3                   	ret    
